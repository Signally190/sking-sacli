; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ShooterNum@@3HA				; ShooterNum
PUBLIC	?AttPreMagicNum@@3HA				; AttPreMagicNum
PUBLIC	?AttNextMagicNum@@3HA				; AttNextMagicNum
PUBLIC	?NoMiss@@3FA					; NoMiss
PUBLIC	?StarLoop@@3FA					; StarLoop
PUBLIC	?BeAttNum@@3HA					; BeAttNum
PUBLIC	?FireSkillEnd@@3HA				; FireSkillEnd
PUBLIC	?bFireInit@@3HA					; bFireInit
PUBLIC	?tempPosH@@3HA					; tempPosH
PUBLIC	?tempPosV@@3HA					; tempPosV
PUBLIC	?iBeAttNum@@3HA					; iBeAttNum
PUBLIC	?counter@@3HA					; counter
PUBLIC	?tarpos@@3HA					; tarpos
PUBLIC	?tarMgiDem@@3HA					; tarMgiDem
PUBLIC	?att_select_flg@@3DA				; att_select_flg
PUBLIC	?crs_change_tbl@@3PAEA				; crs_change_tbl
PUBLIC	?crs_change_tbl2@@3PAEA				; crs_change_tbl2
PUBLIC	?crs_bound_tbl@@3PAY0CA@EA			; crs_bound_tbl
PUBLIC	?g_iRunEarthQuake@@3HA				; g_iRunEarthQuake
PUBLIC	?g_iCurRunEarthQuake@@3HA			; g_iCurRunEarthQuake
PUBLIC	?g_iNumRunEarthQuake@@3HA			; g_iNumRunEarthQuake
PUBLIC	?boundary_2@@3PAUaction@@A			; boundary_2
PUBLIC	?boundary_mark@@3PAPAUaction@@A			; boundary_mark
PUBLIC	?boomerang_pos_tbl@@3PAHA			; boomerang_pos_tbl
PUBLIC	?boomerang_pos_tbl2@@3PAHA			; boomerang_pos_tbl2
PUBLIC	?boomerang_pos_tbl3a@@3PAHA			; boomerang_pos_tbl3a
PUBLIC	?boomerang_pos_tbl4a@@3PAHA			; boomerang_pos_tbl4a
PUBLIC	?boomerang_pos_tbl3b@@3PAHA			; boomerang_pos_tbl3b
PUBLIC	?boomerang_pos_tbl4b@@3PAHA			; boomerang_pos_tbl4b
_BSS	SEGMENT
?StarLoop@@3FA DW 01H DUP (?)				; StarLoop
	ALIGN	4

?FireSkillEnd@@3HA DD 01H DUP (?)			; FireSkillEnd
?bFireInit@@3HA DD 01H DUP (?)				; bFireInit
?tempPosH@@3HA DD 01H DUP (?)				; tempPosH
?tempPosV@@3HA DD 01H DUP (?)				; tempPosV
?counter@@3HA DD 01H DUP (?)				; counter
?tarMgiDem@@3HA DD 01H DUP (?)				; tarMgiDem
?att_select_flg@@3DA DB 01H DUP (?)			; att_select_flg
	ALIGN	4

?g_iRunEarthQuake@@3HA DD 01H DUP (?)			; g_iRunEarthQuake
?g_iCurRunEarthQuake@@3HA DD 01H DUP (?)		; g_iCurRunEarthQuake
?g_iNumRunEarthQuake@@3HA DD 01H DUP (?)		; g_iNumRunEarthQuake
?boundary_2@@3PAUaction@@A DD 01H DUP (?)		; boundary_2
?boundary_mark@@3PAPAUaction@@A DD 02H DUP (?)		; boundary_mark
_BSS	ENDS
_DATA	SEGMENT
?ShooterNum@@3HA DD 0ffffffffH				; ShooterNum
?AttPreMagicNum@@3HA DD 0ffffffffH			; AttPreMagicNum
?AttNextMagicNum@@3HA DD 0ffffffffH			; AttNextMagicNum
?NoMiss@@3FA DW	0ffffH					; NoMiss
	ORG $+2
?BeAttNum@@3HA DD 0ffffffffH				; BeAttNum
?iBeAttNum@@3HA DD 0ffffffffH				; iBeAttNum
?tarpos@@3HA DD	0ffffffffH				; tarpos
?crs_change_tbl@@3PAEA DB 04H				; crs_change_tbl
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
?crs_change_tbl2@@3PAEA DB 010H				; crs_change_tbl2
	DB	014H
	DB	018H
	DB	01cH
	DB	00H
	DB	04H
	DB	08H
	DB	0cH
	ORG $+4
?crs_bound_tbl@@3PAY0CA@EA DB 010H			; crs_bound_tbl
	DB	0fH
	DB	0eH
	DB	0dH
	DB	0cH
	DB	0bH
	DB	0aH
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	017H
	DB	016H
	DB	015H
	DB	014H
	DB	013H
	DB	012H
	DB	011H
	DB	00H
	DB	01fH
	DB	01eH
	DB	01dH
	DB	01cH
	DB	01bH
	DB	01aH
	DB	019H
	DB	018H
	DB	017H
	DB	016H
	DB	015H
	DB	014H
	DB	013H
	DB	012H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	07H
	DB	06H
	DB	05H
	DB	04H
	DB	03H
	DB	02H
	DB	01H
	DB	00H
	DB	01fH
	DB	01eH
	DB	01dH
	DB	01cH
	DB	01bH
	DB	01aH
	DB	019H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0eH
	DB	0dH
	DB	0cH
	DB	0bH
	DB	0aH
	DB	09H
	DB	08H
	DB	07H
	DB	06H
	DB	05H
	DB	04H
	DB	03H
	DB	02H
	DB	01H
?boomerang_pos_tbl@@3PAHA DD 0320H			; boomerang_pos_tbl
	DD	0140H
	DD	02eeH
	DD	0dcH
	DD	0186H
	DD	06aH
	DD	0214H
	DD	0aaH
?boomerang_pos_tbl2@@3PAHA DD 02eeH			; boomerang_pos_tbl2
	DD	0118H
	DD	02bcH
	DD	0b4H
	DD	0154H
	DD	032H
	DD	01beH
	DD	064H
?boomerang_pos_tbl3a@@3PAHA DD 0104H			; boomerang_pos_tbl3a
	DD	01a4H
	DD	064H
	DD	014aH
	DD	0ffffffa0H
	DD	0a0H
	DD	0ffffff6eH
	DD	0104H
?boomerang_pos_tbl4a@@3PAHA DD 0154H			; boomerang_pos_tbl4a
	DD	01c2H
	DD	0b4H
	DD	0190H
	DD	0ffffff6eH
	DD	0c8H
	DD	0ffffff3cH
	DD	012cH
?boomerang_pos_tbl3b@@3PAHA DD 0c4H			; boomerang_pos_tbl3b
	DD	01a4H
	DD	044H
	DD	016aH
	DD	0ffffffa0H
	DD	0a0H
	DD	0ffffff6eH
	DD	0104H
?boomerang_pos_tbl4b@@3PAHA DD 0154H			; boomerang_pos_tbl4b
	DD	01c2H
	DD	0b4H
	DD	01d0H
	DD	0ffffff6eH
	DD	0c8H
	DD	0ffffff3cH
	DD	012cH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	?petfallChangeGraph@@YAXPAUaction@@@Z		; petfallChangeGraph
PUBLIC	?petrideChangeGraph@@YAXPAUaction@@H@Z		; petrideChangeGraph
PUBLIC	?LogToBattleError@@YAXPADH@Z			; LogToBattleError
PUBLIC	?katino@@YAXPAUaction@@@Z			; katino
PUBLIC	?oft_test@@YAPAUaction@@XZ			; oft_test
PUBLIC	?monster@@YAXPAUaction@@@Z			; monster
PUBLIC	?DisplayAttackEffect@@YAXPAUaction@@@Z		; DisplayAttackEffect
PUBLIC	?SetDisplayAttackEffect@@YAXPAUaction@@H@Z	; SetDisplayAttackEffect
PUBLIC	?kakushi_command@@YAXXZ				; kakushi_command
PUBLIC	?damage_num@@YAXPAUaction@@@Z			; damage_num
PUBLIC	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ		; sprintf_s<256>
PUBLIC	?set_damage_num@@YAXPAUaction@@HH@Z		; set_damage_num
PUBLIC	?play_damage@@YAXHH@Z				; play_damage
PUBLIC	?disp_kanji@@YAXPAUaction@@@Z			; disp_kanji
PUBLIC	?magic_effect@@YAXPAUaction@@@Z			; magic_effect
PUBLIC	?hit_mark_critical@@YAXPAUaction@@@Z		; hit_mark_critical
PUBLIC	?hit_mark@@YAXPAUaction@@@Z			; hit_mark
PUBLIC	?set_hit_mark@@YAXPAUaction@@@Z			; set_hit_mark
PUBLIC	?disp_guard_mark@@YAXPAUaction@@@Z		; disp_guard_mark
PUBLIC	?set_guard_mark@@YAXPAUaction@@@Z		; set_guard_mark
PUBLIC	?set_jujutsu_hit_mark@@YAXPAUaction@@@Z		; set_jujutsu_hit_mark
PUBLIC	?piyo_loop@@YAXPAUaction@@@Z			; piyo_loop
PUBLIC	?set_piyo_loop@@YAXPAUaction@@@Z		; set_piyo_loop
PUBLIC	?˜Î€ØŒ√?@@YAXPAUaction@@@Z			; ˜Î€ØŒ√?
PUBLIC	?set_Œ√?@@YAXHPAUaction@@@Z			; set_Œ√?
PUBLIC	?set_single_jujutsu@@YAXHPAUaction@@@Z		; set_single_jujutsu
PUBLIC	?attrib_reverse@@YAXPAUaction@@@Z		; attrib_reverse
PUBLIC	?set_attrib_reverse@@YAXPAUaction@@@Z		; set_attrib_reverse
PUBLIC	?boomerang@@YAXPAUaction@@@Z			; boomerang
PUBLIC	?stick_bow@@YAXPAUaction@@@Z			; stick_bow
PUBLIC	?shoot@@YAXPAUaction@@@Z			; shoot
PUBLIC	?bow@@YAXPAUaction@@@Z				; bow
PUBLIC	?axe@@YAXPAUaction@@@Z				; axe
PUBLIC	?fireHunter@@YAXPAUaction@@@Z			; fireHunter
PUBLIC	?axe_shadow@@YAXPAUaction@@@Z			; axe_shadow
PUBLIC	?stone@@YAXPAUaction@@@Z			; stone
PUBLIC	?stone_shadow@@YAXPAUaction@@@Z			; stone_shadow
PUBLIC	?firecracker_shadow@@YAXPAUaction@@@Z		; firecracker_shadow
PUBLIC	?missile@@YAXPAUaction@@@Z			; missile
PUBLIC	?amelioration@@YAXPAUaction@@@Z			; amelioration
PUBLIC	?sort_chr@@YAHPAUSORT_CHR_EQU@@0@Z		; sort_chr
PUBLIC	?set_raster_pos@@YAXPAUaction@@@Z		; set_raster_pos
PUBLIC	?get_name@@YAXPAUaction@@@Z			; get_name
PUBLIC	?check_all_dead@@YAHXZ				; check_all_dead
PUBLIC	?disp_attrib@@YAXPAUaction@@@Z			; disp_attrib
PUBLIC	?get_command_asc@@YAXXZ				; get_command_asc
PUBLIC	?RunTimeMagicToCall@@YAHXZ			; RunTimeMagicToCall
PUBLIC	?master@@YAXPAUaction@@@Z			; master
PUBLIC	?get_bc_num@@YAHXZ				; get_bc_num
PUBLIC	?get_bc_asc@@YAXPAUaction@@H@Z			; get_bc_asc
PUBLIC	?get_bc_asc_ridepet@@YAXPAUaction@@@Z		; get_bc_asc_ridepet
PUBLIC	?set_party_Œ√?@@YAXXZ				; set_party_Œ√?
PUBLIC	?set_bc@@YAXXZ					; set_bc
PUBLIC	?disp_shild@@YAXXZ				; disp_shild
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_04INDFNAKP@Miss@				; `string'
PUBLIC	??_C@_07IKJEKJLO@Counter@			; `string'
PUBLIC	??_C@_05LICMIJMM@Guard@				; `string'
PUBLIC	??_C@_07EGAJKHF@Capture@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_07PBILKAFL@Success@			; `string'
PUBLIC	??_C@_04ODLKOBGJ@Fail@				; `string'
PUBLIC	??_C@_06OIGFGPHJ@Escape@			; `string'
PUBLIC	??_C@_05NHFMPFPE@Come?$CB@			; `string'
PUBLIC	??_C@_03BHGMNJJJ@Go?$CB@			; `string'
PUBLIC	??_C@_0M@DBACIDCK@Guard?5break@			; `string'
PUBLIC	??_C@_06MCJJLJDN@Danger@			; `string'
PUBLIC	??_C@_05KMBJHHBA@Leave@				; `string'
PUBLIC	??_C@_02JINPPBEP@No@				; `string'
PUBLIC	??_C@_04EMFHMJHP@Roar@				; `string'
PUBLIC	??_C@_0M@NHOFEJMF@SelfExplode@			; `string'
PUBLIC	??_C@_03GLKEJMAA@?$CF4d@			; `string'
PUBLIC	??_C@_04FEPFCGFN@?$NP?$LO?c?$KO@		; `string'
PUBLIC	??_C@_04HKBLFKAB@?y?$LL?K?$LN@			; `string'
PUBLIC	??_C@_07OJGJELHN@?$PM?$NO?y?$KN?5?$CFs@		; `string'
PUBLIC	??_C@_09GEAOALJ@?M?t?5?$CFs?$CFd?$KD?$KF@	; `string'
PUBLIC	??_C@_09EIFGJEIL@?$NL?A?5?$CFs?$CFd?$KD?$KF@	; `string'
PUBLIC	??_C@_09JOBJMDHA@?Z?B?5?$CFs?$CFd?$KD?$KF@	; `string'
PUBLIC	??_C@_09IIPGOBOB@LightTake@			; `string'
PUBLIC	??_C@_0L@EGPLNANN@?$DP?$NP?H?y?w?$OA?u?$PM?$NO?$DP@ ; `string'
PUBLIC	??_C@_0P@MLDKCEHF@?$DP?$NP?H?y?w?$OA?u?5?$CFs?$CFd?$KD?$KF@ ; `string'
PUBLIC	??_C@_03PEJDBJAE@?$DP?$NN?$LL@			; `string'
PUBLIC	??_C@_04BOKPGBJO@?i?S?b?$KC@			; `string'
PUBLIC	??_C@_05PHLFPKGG@?q?$KH?$DP?y?$KB@		; `string'
PUBLIC	??_C@_05BEGCDMJP@?i?S?$DP?y?$KB@		; `string'
PUBLIC	??_C@_03PAOHCFLP@?i?$KG?$DP@			; `string'
PUBLIC	??_C@_04KKGCIKBG@?q?$KH?b?$KC@			; `string'
PUBLIC	??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@		; `string'
PUBLIC	??_C@_04DKIAPBFG@?b?$KC?w?$NP@			; `string'
PUBLIC	??_C@_09MFDBOBKF@?$DP?y?$LL?5?$CFs?5?$DP?$DP@	; `string'
PUBLIC	__real@3ff3333333333333
PUBLIC	__real@4034000000000000
PUBLIC	__xmm@00000000000101010101010000000000
PUBLIC	__xmm@00000001010101000001010101000000
PUBLIC	__xmm@00000001010101010101010101000000
PUBLIC	__xmm@00000101010100010100010101010000
PUBLIC	__xmm@00000101010101010101010101010000
PUBLIC	__xmm@0000013e00000013000000c600000007
PUBLIC	__xmm@00010101000000000000000001010100
PUBLIC	__xmm@00010101000000010100000001010100
PUBLIC	__xmm@00010101010101010101010101010100
PUBLIC	__xmm@00018da000018d9400018d8e00018d9a
PUBLIC	__xmm@00018da300018d9700018d9100018d9d
PUBLIC	__xmm@00018dd700018dcb00018dc500018dd1
PUBLIC	__xmm@00018dda00018dce00018dc800018dd4
EXTRN	__imp__IsDBCSLeadByte@4:PROC
EXTRN	_qsort:PROC
EXTRN	_atoi:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	?LoadBmp@@YAHH@Z:PROC				; LoadBmp
EXTRN	?split_damage@@YAHPADDPAHI@Z:PROC		; split_damage
EXTRN	?GetAction@@YAPAUaction@@EI@Z:PROC		; GetAction
EXTRN	?DeathAction@@YAXPAUaction@@@Z:PROC		; DeathAction
EXTRN	?Rnd@@YAHHH@Z:PROC				; Rnd
EXTRN	?GetStrWidth@@YAHPAD@Z:PROC			; GetStrWidth
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?radar@@YAXPAUaction@@PAH1@Z:PROC		; radar
EXTRN	?radar2@@YAHPAUaction@@HHH@Z:PROC		; radar2
EXTRN	?gemini@@YAXPAUaction@@@Z:PROC			; gemini
EXTRN	?pattern@@YAHPAUaction@@HH@Z:PROC		; pattern
EXTRN	?makeStringFromEscaped@@YAPADPAD@Z:PROC		; makeStringFromEscaped
EXTRN	?play_se@@YAHHHH@Z:PROC				; play_se
EXTRN	?play_bgm@@YAHH@Z:PROC				; play_bgm
EXTRN	?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z:PROC	; MakeWindowDisp
EXTRN	?MakeAnimDisp@@YAPAUaction@@HHHH@Z:PROC		; MakeAnimDisp
EXTRN	?JL_???Í»@@YAXPAUaction@@@Z:PROC		; JL_???Í»
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memset:PROC
EXTRN	?DISPLACEMENT_X@@3HA:DWORD			; DISPLACEMENT_X
EXTRN	?DISPLACEMENT_Y@@3HA:DWORD			; DISPLACEMENT_Y
EXTRN	?SpriteInfo@@3PAUSPRITE_INFO@@A:BYTE		; SpriteInfo
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?LowResoCmdFlag@@3HA:DWORD			; LowResoCmdFlag
EXTRN	?joy_con@@3PAKA:QWORD				; joy_con
EXTRN	?s_timer@@3GA:WORD				; s_timer
EXTRN	?slow_flg@@3HA:DWORD				; slow_flg
EXTRN	?flash_vct_no@@3HA:DWORD			; flash_vct_no
EXTRN	?p_party@@3PAPAUaction@@A:BYTE			; p_party
EXTRN	?action_inf@@3HA:DWORD				; action_inf
EXTRN	?BattleCmd@@3PADA:BYTE				; BattleCmd
EXTRN	?BattleStatus@@3PADA:BYTE			; BattleStatus
EXTRN	?BattleMyNo@@3HA:DWORD				; BattleMyNo
EXTRN	?battlePetNoBak2@@3HA:DWORD			; battlePetNoBak2
EXTRN	?BattleBpFlag@@3HA:DWORD			; BattleBpFlag
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?t_music_bgm_no@@3HA:DWORD			; t_music_bgm_no
EXTRN	?BattleMapNo@@3HA:DWORD				; BattleMapNo
EXTRN	?g_bUseAlpha@@3HA:DWORD				; g_bUseAlpha
EXTRN	?bNewServer@@3HA:DWORD				; bNewServer
EXTRN	?piyo_tbl@@3PAHA:BYTE				; piyo_tbl
EXTRN	?piyo_point@@3HA:DWORD				; piyo_point
EXTRN	?gStrŒ√?@@3PADA:BYTE				; gStrŒ√?
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?command_point@@3HA DD 01H DUP (?)			; command_point
?p_kanji@@3PAUaction@@A DD 01H DUP (?)			; p_kanji
?kanji_buf@@3PAY0IA@DA DB 0200H DUP (?)			; kanji_buf
?p_master@@3PAUaction@@A DD 01H DUP (?)			; p_master
?p_attrib@@3PAUaction@@A DD 01H DUP (?)			; p_attrib
?p_missile@@3PAPAUaction@@A DD 015H DUP (?)		; p_missile
	ALIGN	8

?sort_chr_buf@@3PAUSORT_CHR_EQU@@A DQ 028H DUP (?)	; sort_chr_buf
?monster_start_pos@@3PAHA DD 028H DUP (?)		; monster_start_pos
?monster_place_pos@@3PAHA DD 028H DUP (?)		; monster_place_pos
?AttMgc@@3UATTACK_MAGIC@@A DB 0c8H DUP (?)		; AttMgc
?bRunAttMgc@@3HA DD 01H DUP (?)				; bRunAttMgc
?AttackedInfo@@3PAHA DD 028H DUP (?)			; AttackedInfo
?iAttackedNum@@3HA DD 01H DUP (?)			; iAttackedNum
?iCurAttackedFinishNum@@3HA DD 01H DUP (?)		; iCurAttackedFinishNum
?ToCallMgc@@3UTOCALL_MAGIC@@A DB 0ccH DUP (?)		; ToCallMgc
?bRunToCallMgc@@3HA DD 01H DUP (?)			; bRunToCallMgc
?bRunBoundaryMgc_l@@3HA DD 01H DUP (?)			; bRunBoundaryMgc_l
?bRunBoundaryMgc_r@@3HA DD 01H DUP (?)			; bRunBoundaryMgc_r
_BSS	ENDS
;	COMDAT ?a0tmp@?1??monster@@YAXPAUaction@@@Z@4PAPAU2@A
_BSS	SEGMENT
?a0tmp@?1??monster@@YAXPAUaction@@@Z@4PAPAU2@A DD 0aH DUP (?) ; `monster'::`2'::a0tmp
_BSS	ENDS
;	COMDAT ?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA
_BSS	SEGMENT
?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA DD 0aH DUP (?) ; `monster'::`2'::a0mark
_BSS	ENDS
;	COMDAT ?a0tmpcount@?1??monster@@YAXPAUaction@@@Z@4HA
_BSS	SEGMENT
?a0tmpcount@?1??monster@@YAXPAUaction@@@Z@4HA DD 01H DUP (?) ; `monster'::`2'::a0tmpcount
_BSS	ENDS
;	COMDAT ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA
_BSS	SEGMENT
?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA DD 01H DUP (?) ; `monster'::`2'::Ù¯„∑˚˘
_BSS	ENDS
_BSS	SEGMENT
?bc_pointer@@3HA DD 01H DUP (?)				; bc_pointer
_BSS	ENDS
;	COMDAT __xmm@00018dda00018dce00018dc800018dd4
CONST	SEGMENT
__xmm@00018dda00018dce00018dc800018dd4 DB 0d4H, 08dH, 01H, 00H, 0c8H, 08dH
	DB	01H, 00H, 0ceH, 08dH, 01H, 00H, 0daH, 08dH, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00018dd700018dcb00018dc500018dd1
CONST	SEGMENT
__xmm@00018dd700018dcb00018dc500018dd1 DB 0d1H, 08dH, 01H, 00H, 0c5H, 08dH
	DB	01H, 00H, 0cbH, 08dH, 01H, 00H, 0d7H, 08dH, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00018da300018d9700018d9100018d9d
CONST	SEGMENT
__xmm@00018da300018d9700018d9100018d9d DB 09dH, 08dH, 01H, 00H, 091H, 08dH
	DB	01H, 00H, 097H, 08dH, 01H, 00H, 0a3H, 08dH, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00018da000018d9400018d8e00018d9a
CONST	SEGMENT
__xmm@00018da000018d9400018d8e00018d9a DB 09aH, 08dH, 01H, 00H, 08eH, 08dH
	DB	01H, 00H, 094H, 08dH, 01H, 00H, 0a0H, 08dH, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00010101010101010101010101010100
CONST	SEGMENT
__xmm@00010101010101010101010101010100 DB 00H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00010101000000010100000001010100
CONST	SEGMENT
__xmm@00010101000000010100000001010100 DB 00H, 01H, 01H, 01H, 00H, 00H, 00H
	DB	01H, 01H, 00H, 00H, 00H, 01H, 01H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00010101000000000000000001010100
CONST	SEGMENT
__xmm@00010101000000000000000001010100 DB 00H, 01H, 01H, 01H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 01H, 01H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@0000013e00000013000000c600000007
CONST	SEGMENT
__xmm@0000013e00000013000000c600000007 DB 07H, 00H, 00H, 00H, 0c6H, 00H, 00H
	DB	00H, 013H, 00H, 00H, 00H, '>', 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000101010101010101010101010000
CONST	SEGMENT
__xmm@00000101010101010101010101010000 DB 00H, 00H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000101010100010100010101010000
CONST	SEGMENT
__xmm@00000101010100010100010101010000 DB 00H, 00H, 01H, 01H, 01H, 01H, 00H
	DB	01H, 01H, 00H, 01H, 01H, 01H, 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000001010101010101010101000000
CONST	SEGMENT
__xmm@00000001010101010101010101000000 DB 00H, 00H, 00H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000001010101000001010101000000
CONST	SEGMENT
__xmm@00000001010101000001010101000000 DB 00H, 00H, 00H, 01H, 01H, 01H, 01H
	DB	00H, 00H, 01H, 01H, 01H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000101010101010000000000
CONST	SEGMENT
__xmm@00000000000101010101010000000000 DB 00H, 00H, 00H, 00H, 00H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@3ff3333333333333
CONST	SEGMENT
__real@3ff3333333333333 DQ 03ff3333333333333r	; 1.2
CONST	ENDS
;	COMDAT ??_C@_09MFDBOBKF@?$DP?y?$LL?5?$CFs?5?$DP?$DP@
CONST	SEGMENT
??_C@_09MFDBOBKF@?$DP?y?$LL?5?$CFs?5?$DP?$DP@ DB '?', 0f9H, 0bbH, ' %s ??'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04DKIAPBFG@?b?$KC?w?$NP@
CONST	SEGMENT
??_C@_04DKIAPBFG@?b?$KC?w?$NP@ DB 0e2H, 0a2H, 0f7H, 0dfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@
CONST	SEGMENT
??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@ DB 0fbH, 0b9H, 0edH, 0adH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKGCIKBG@?q?$KH?b?$KC@
CONST	SEGMENT
??_C@_04KKGCIKBG@?q?$KH?b?$KC@ DB 0f1H, 0a7H, 0e2H, 0a2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PAOHCFLP@?i?$KG?$DP@
CONST	SEGMENT
??_C@_03PAOHCFLP@?i?$KG?$DP@ DB 0e9H, 0a6H, '?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BEGCDMJP@?i?S?$DP?y?$KB@
CONST	SEGMENT
??_C@_05BEGCDMJP@?i?S?$DP?y?$KB@ DB 0e9H, 0d3H, '?', 0f9H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PHLFPKGG@?q?$KH?$DP?y?$KB@
CONST	SEGMENT
??_C@_05PHLFPKGG@?q?$KH?$DP?y?$KB@ DB 0f1H, 0a7H, '?', 0f9H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BOKPGBJO@?i?S?b?$KC@
CONST	SEGMENT
??_C@_04BOKPGBJO@?i?S?b?$KC@ DB 0e9H, 0d3H, 0e2H, 0a2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PEJDBJAE@?$DP?$NN?$LL@
CONST	SEGMENT
??_C@_03PEJDBJAE@?$DP?$NN?$LL@ DB '?', 0ddH, 0bbH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLDKCEHF@?$DP?$NP?H?y?w?$OA?u?5?$CFs?$CFd?$KD?$KF@
CONST	SEGMENT
??_C@_0P@MLDKCEHF@?$DP?$NP?H?y?w?$OA?u?5?$CFs?$CFd?$KD?$KF@ DB '?', 0dfH, 0c8H
	DB	0f9H, 0f7H, 0e0H, 0f5H, ' %s%d', 0a3H, 0a5H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EGPLNANN@?$DP?$NP?H?y?w?$OA?u?$PM?$NO?$DP@
CONST	SEGMENT
??_C@_0L@EGPLNANN@?$DP?$NP?H?y?w?$OA?u?$PM?$NO?$DP@ DB '?', 0dfH, 0c8H, 0f9H
	DB	0f7H, 0e0H, 0f5H, 0fcH, 0deH, '?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IIPGOBOB@LightTake@
CONST	SEGMENT
??_C@_09IIPGOBOB@LightTake@ DB 'LightTake', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JOBJMDHA@?Z?B?5?$CFs?$CFd?$KD?$KF@
CONST	SEGMENT
??_C@_09JOBJMDHA@?Z?B?5?$CFs?$CFd?$KD?$KF@ DB 0daH, 0c2H, ' %s%d', 0a3H, 0a5H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09EIFGJEIL@?$NL?A?5?$CFs?$CFd?$KD?$KF@
CONST	SEGMENT
??_C@_09EIFGJEIL@?$NL?A?5?$CFs?$CFd?$KD?$KF@ DB 0dbH, 0c1H, ' %s%d', 0a3H
	DB	0a5H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09GEAOALJ@?M?t?5?$CFs?$CFd?$KD?$KF@
CONST	SEGMENT
??_C@_09GEAOALJ@?M?t?5?$CFs?$CFd?$KD?$KF@ DB 0cdH, 0f4H, ' %s%d', 0a3H, 0a5H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJGJELHN@?$PM?$NO?y?$KN?5?$CFs@
CONST	SEGMENT
??_C@_07OJGJELHN@?$PM?$NO?y?$KN?5?$CFs@ DB 0fcH, 0deH, 0f9H, 0adH, ' %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HKBLFKAB@?y?$LL?K?$LN@
CONST	SEGMENT
??_C@_04HKBLFKAB@?y?$LL?K?$LN@ DB 0f9H, 0bbH, 0cbH, 0bdH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FEPFCGFN@?$NP?$LO?c?$KO@
CONST	SEGMENT
??_C@_04FEPFCGFN@?$NP?$LO?c?$KO@ DB 0dfH, 0beH, 0e3H, 0aeH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d@ DB '%4d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NHOFEJMF@SelfExplode@
CONST	SEGMENT
??_C@_0M@NHOFEJMF@SelfExplode@ DB 'SelfExplode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EMFHMJHP@Roar@
CONST	SEGMENT
??_C@_04EMFHMJHP@Roar@ DB 'Roar', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No@
CONST	SEGMENT
??_C@_02JINPPBEP@No@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KMBJHHBA@Leave@
CONST	SEGMENT
??_C@_05KMBJHHBA@Leave@ DB 'Leave', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MCJJLJDN@Danger@
CONST	SEGMENT
??_C@_06MCJJLJDN@Danger@ DB 'Danger', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DBACIDCK@Guard?5break@
CONST	SEGMENT
??_C@_0M@DBACIDCK@Guard?5break@ DB 'Guard break', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BHGMNJJJ@Go?$CB@
CONST	SEGMENT
??_C@_03BHGMNJJJ@Go?$CB@ DB 'Go!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NHFMPFPE@Come?$CB@
CONST	SEGMENT
??_C@_05NHFMPFPE@Come?$CB@ DB 'Come!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIGFGPHJ@Escape@
CONST	SEGMENT
??_C@_06OIGFGPHJ@Escape@ DB 'Escape', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ODLKOBGJ@Fail@
CONST	SEGMENT
??_C@_04ODLKOBGJ@Fail@ DB 'Fail', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBILKAFL@Success@
CONST	SEGMENT
??_C@_07PBILKAFL@Success@ DB 'Success', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EGAJKHF@Capture@
CONST	SEGMENT
??_C@_07EGAJKHF@Capture@ DB 'Capture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LICMIJMM@Guard@
CONST	SEGMENT
??_C@_05LICMIJMM@Guard@ DB 'Guard', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07IKJEKJLO@Counter@
CONST	SEGMENT
??_C@_07IKJEKJLO@Counter@ DB 'Counter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04INDFNAKP@Miss@
CONST	SEGMENT
??_C@_04INDFNAKP@Miss@ DB 'Miss', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?ridePetTable@@3PAUtagRidePetTable@@A DD 018a88H	; ridePetTable
	DD	0186a0H
	DD	018800H
	DD	00H
	DD	018a89H
	DD	0186a5H
	DD	018800H
	DD	00H
	DD	018a8aH
	DD	0186aaH
	DD	018800H
	DD	00H
	DD	018a8bH
	DD	0186afH
	DD	018800H
	DD	00H
	DD	018a8cH
	DD	0186a0H
	DD	0187e9H
	DD	00H
	DD	018a8dH
	DD	0186a5H
	DD	0187e7H
	DD	00H
	DD	018a8eH
	DD	0186aaH
	DD	0187eaH
	DD	00H
	DD	018a8fH
	DD	0186afH
	DD	0187e8H
	DD	00H
	DD	018a90H
	DD	01895cH
	DD	018814H
	DD	00H
	DD	018a91H
	DD	018961H
	DD	018815H
	DD	00H
	DD	018e65H
	DD	018961H
	DD	018cc8H
	DD	00H
	DD	018e5aH
	DD	018961H
	DD	018c9cH
	DD	00H
	DD	018a92H
	DD	0186b4H
	DD	01882cH
	DD	00H
	DD	018a93H
	DD	0186b9H
	DD	01882cH
	DD	00H
	DD	018a94H
	DD	0186beH
	DD	01882cH
	DD	00H
	DD	018a95H
	DD	0186c3H
	DD	01882cH
	DD	00H
	DD	018a96H
	DD	0186b4H
	DD	0187e8H
	DD	00H
	DD	018a97H
	DD	0186b9H
	DD	0187e9H
	DD	00H
	DD	018a98H
	DD	0186beH
	DD	0187e7H
	DD	00H
	DD	018a99H
	DD	0186c3H
	DD	0187eaH
	DD	00H
	DD	018a9aH
	DD	018966H
	DD	018814H
	DD	00H
	DD	018a9bH
	DD	01896bH
	DD	018815H
	DD	00H
	DD	018e64H
	DD	01896bH
	DD	018cc8H
	DD	00H
	DD	018e62H
	DD	01896bH
	DD	018c9cH
	DD	00H
	DD	018a9cH
	DD	0186c8H
	DD	0187ffH
	DD	00H
	DD	018a9dH
	DD	0186cdH
	DD	0187ffH
	DD	00H
	DD	018a9eH
	DD	0186d2H
	DD	0187ffH
	DD	00H
	DD	018a9fH
	DD	0186d7H
	DD	0187ffH
	DD	00H
	DD	018aa0H
	DD	0186c8H
	DD	0187e8H
	DD	00H
	DD	018aa1H
	DD	0186cdH
	DD	0187eaH
	DD	00H
	DD	018aa2H
	DD	0186d2H
	DD	0187e7H
	DD	00H
	DD	018aa3H
	DD	0186d7H
	DD	0187e9H
	DD	00H
	DD	018aa4H
	DD	018970H
	DD	018814H
	DD	00H
	DD	018aa5H
	DD	018975H
	DD	018815H
	DD	00H
	DD	018e4dH
	DD	018975H
	DD	018cc8H
	DD	00H
	DD	018e57H
	DD	018975H
	DD	018c9cH
	DD	00H
	DD	018aa6H
	DD	0186dcH
	DD	018801H
	DD	00H
	DD	018aa7H
	DD	0186e1H
	DD	018801H
	DD	00H
	DD	018aa8H
	DD	0186e6H
	DD	018801H
	DD	00H
	DD	018aa9H
	DD	0186ebH
	DD	018801H
	DD	00H
	DD	018aaaH
	DD	0186dcH
	DD	0187e9H
	DD	00H
	DD	018aabH
	DD	0186e1H
	DD	0187e7H
	DD	00H
	DD	018aacH
	DD	0186e6H
	DD	0187eaH
	DD	00H
	DD	018aadH
	DD	0186ebH
	DD	0187e8H
	DD	00H
	DD	018aaeH
	DD	01897aH
	DD	018814H
	DD	00H
	DD	018aafH
	DD	01897fH
	DD	018815H
	DD	00H
	DD	018e4eH
	DD	01897fH
	DD	018cc8H
	DD	00H
	DD	018e58H
	DD	01897fH
	DD	018c9cH
	DD	00H
	DD	018ab0H
	DD	0186f0H
	DD	01882cH
	DD	00H
	DD	018ab1H
	DD	0186f5H
	DD	01882cH
	DD	00H
	DD	018ab2H
	DD	0186faH
	DD	01882cH
	DD	00H
	DD	018ab3H
	DD	0186ffH
	DD	01882cH
	DD	00H
	DD	018ab4H
	DD	0186f0H
	DD	0187e8H
	DD	00H
	DD	018ab5H
	DD	0186f5H
	DD	0187e7H
	DD	00H
	DD	018ab6H
	DD	0186faH
	DD	0187eaH
	DD	00H
	DD	018ab7H
	DD	0186ffH
	DD	0187e9H
	DD	00H
	DD	018ab8H
	DD	018984H
	DD	018814H
	DD	00H
	DD	018ab9H
	DD	018989H
	DD	018815H
	DD	00H
	DD	018e55H
	DD	018989H
	DD	018cc8H
	DD	00H
	DD	018e60H
	DD	018989H
	DD	018c9cH
	DD	00H
	DD	018abaH
	DD	018704H
	DD	018801H
	DD	00H
	DD	018abbH
	DD	018709H
	DD	018801H
	DD	00H
	DD	018abcH
	DD	01870eH
	DD	018801H
	DD	00H
	DD	018abdH
	DD	018713H
	DD	018801H
	DD	00H
	DD	018abeH
	DD	018704H
	DD	0187e9H
	DD	00H
	DD	018abfH
	DD	018709H
	DD	0187e8H
	DD	00H
	DD	018ac0H
	DD	01870eH
	DD	0187eaH
	DD	00H
	DD	018ac1H
	DD	018713H
	DD	0187e7H
	DD	00H
	DD	018ac2H
	DD	01898eH
	DD	018814H
	DD	00H
	DD	018ac3H
	DD	018993H
	DD	018815H
	DD	00H
	DD	018e56H
	DD	018993H
	DD	018cc8H
	DD	00H
	DD	018e61H
	DD	018993H
	DD	018c9cH
	DD	00H
	DD	018ac4H
	DD	018718H
	DD	018802H
	DD	00H
	DD	018ac5H
	DD	01871dH
	DD	018802H
	DD	00H
	DD	018ac6H
	DD	018722H
	DD	018802H
	DD	00H
	DD	018ac7H
	DD	018727H
	DD	018802H
	DD	00H
	DD	018ac8H
	DD	018718H
	DD	0187e7H
	DD	00H
	DD	018ac9H
	DD	01871dH
	DD	0187eaH
	DD	00H
	DD	018acaH
	DD	018722H
	DD	0187e8H
	DD	00H
	DD	018acbH
	DD	018727H
	DD	0187e9H
	DD	00H
	DD	018accH
	DD	018998H
	DD	018814H
	DD	00H
	DD	018acdH
	DD	01899dH
	DD	018815H
	DD	00H
	DD	018e4fH
	DD	01899dH
	DD	018cc8H
	DD	00H
	DD	018e59H
	DD	01899dH
	DD	018c9cH
	DD	00H
	DD	018aceH
	DD	01872cH
	DD	018802H
	DD	00H
	DD	018acfH
	DD	018731H
	DD	018802H
	DD	00H
	DD	018ad0H
	DD	018736H
	DD	018802H
	DD	00H
	DD	018ad1H
	DD	01873bH
	DD	018802H
	DD	00H
	DD	018ad2H
	DD	01872cH
	DD	0187e7H
	DD	00H
	DD	018ad3H
	DD	018731H
	DD	0187e9H
	DD	00H
	DD	018ad4H
	DD	018736H
	DD	0187eaH
	DD	00H
	DD	018ad5H
	DD	01873bH
	DD	0187e8H
	DD	00H
	DD	018ad6H
	DD	0189a2H
	DD	018814H
	DD	00H
	DD	018ad7H
	DD	0189a7H
	DD	018815H
	DD	00H
	DD	018e50H
	DD	0189a7H
	DD	018cc8H
	DD	00H
	DD	018e5bH
	DD	0189a7H
	DD	018c9cH
	DD	00H
	DD	018ad8H
	DD	018740H
	DD	018800H
	DD	00H
	DD	018ad9H
	DD	018745H
	DD	018800H
	DD	00H
	DD	018adaH
	DD	01874aH
	DD	018800H
	DD	00H
	DD	018adbH
	DD	01874fH
	DD	018800H
	DD	00H
	DD	018adcH
	DD	018740H
	DD	0187eaH
	DD	00H
	DD	018addH
	DD	018745H
	DD	0187e9H
	DD	00H
	DD	018adeH
	DD	01874aH
	DD	0187e7H
	DD	00H
	DD	018adfH
	DD	01874fH
	DD	0187e8H
	DD	00H
	DD	018ae0H
	DD	0189acH
	DD	018814H
	DD	00H
	DD	018ae1H
	DD	0189b1H
	DD	018815H
	DD	00H
	DD	018e52H
	DD	0189b1H
	DD	018cc8H
	DD	00H
	DD	018e5dH
	DD	0189b1H
	DD	018c9cH
	DD	00H
	DD	018ae2H
	DD	018754H
	DD	0187ffH
	DD	00H
	DD	018ae3H
	DD	018759H
	DD	0187ffH
	DD	00H
	DD	018ae4H
	DD	01875eH
	DD	0187ffH
	DD	00H
	DD	018ae5H
	DD	018763H
	DD	0187ffH
	DD	00H
	DD	018ae6H
	DD	018754H
	DD	0187e8H
	DD	00H
	DD	018ae7H
	DD	018759H
	DD	0187eaH
	DD	00H
	DD	018ae8H
	DD	01875eH
	DD	0187e9H
	DD	00H
	DD	018ae9H
	DD	018763H
	DD	0187e7H
	DD	00H
	DD	018aeaH
	DD	0189b6H
	DD	018814H
	DD	00H
	DD	018aebH
	DD	0189bbH
	DD	018815H
	DD	00H
	DD	018e51H
	DD	0189bbH
	DD	018cc8H
	DD	00H
	DD	018e5cH
	DD	0189bbH
	DD	018c9cH
	DD	00H
	DD	018aecH
	DD	018768H
	DD	018801H
	DD	00H
	DD	018aedH
	DD	01876dH
	DD	018801H
	DD	00H
	DD	018aeeH
	DD	018772H
	DD	018801H
	DD	00H
	DD	018aefH
	DD	018777H
	DD	018801H
	DD	00H
	DD	018af0H
	DD	018768H
	DD	0187e9H
	DD	00H
	DD	018af1H
	DD	01876dH
	DD	0187e8H
	DD	00H
	DD	018af2H
	DD	018772H
	DD	0187e7H
	DD	00H
	DD	018af3H
	DD	018777H
	DD	0187eaH
	DD	00H
	DD	018af4H
	DD	0189c0H
	DD	018814H
	DD	00H
	DD	018af5H
	DD	0189c5H
	DD	018815H
	DD	00H
	DD	018e54H
	DD	0189c5H
	DD	018cc8H
	DD	00H
	DD	018e5fH
	DD	0189c5H
	DD	018c9cH
	DD	00H
	DD	018af6H
	DD	01877cH
	DD	01882cH
	DD	00H
	DD	018af7H
	DD	018781H
	DD	01882cH
	DD	00H
	DD	018af8H
	DD	018786H
	DD	01882cH
	DD	00H
	DD	018af9H
	DD	01878bH
	DD	01882cH
	DD	00H
	DD	018afaH
	DD	01877cH
	DD	0187eaH
	DD	00H
	DD	018afbH
	DD	018781H
	DD	0187e7H
	DD	00H
	DD	018afcH
	DD	018786H
	DD	0187e9H
	DD	00H
	DD	018afdH
	DD	01878bH
	DD	0187e8H
	DD	00H
	DD	018afeH
	DD	0189caH
	DD	018814H
	DD	00H
	DD	018affH
	DD	0189cfH
	DD	018815H
	DD	00H
	DD	018e53H
	DD	0189cfH
	DD	018cc8H
	DD	00H
	DD	018e5eH
	DD	0189cfH
	DD	018c9cH
	DD	00H
	DD	018b3bH
	DD	018b39H
	DD	018b3aH
	DD	00H
	DD	018b3bH
	DD	018b3aH
	DD	018b39H
	DD	00H
?pet_nix_tbl@@3PADA DB 01H				; pet_nix_tbl
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0feH
	ORG $+7
?monster_place_no@@3PAHA DD 02H				; monster_place_no
	DD	01H
	DD	03H
	DD	00H
	DD	04H
	DD	07H
	DD	06H
	DD	08H
	DD	05H
	DD	09H
	DD	0cH
	DD	0bH
	DD	0dH
	DD	0aH
	DD	0eH
	DD	011H
	DD	010H
	DD	012H
	DD	0fH
	DD	013H
?piyo_loop_v_tbl@@3PAHA DD 00H				; piyo_loop_v_tbl
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	09H
	DD	09H
	DD	0aH
	DD	09H
	DD	09H
	DD	09H
	DD	09H
	DD	08H
	DD	08H
	DD	07H
	DD	06H
	DD	05H
	DD	05H
	DD	04H
	DD	03H
	DD	02H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	0fffffffeH
	DD	0fffffffdH
	DD	0fffffffcH
	DD	0fffffffcH
	DD	0fffffffbH
	DD	0fffffffaH
	DD	0fffffff9H
	DD	0fffffff8H
	DD	0fffffff8H
	DD	0fffffff7H
	DD	0fffffff7H
	DD	0fffffff7H
	DD	0fffffff7H
	DD	0fffffff6H
	DD	0fffffff7H
	DD	0fffffff7H
	DD	0fffffff7H
	DD	0fffffff7H
	DD	0fffffff8H
	DD	0fffffff8H
	DD	0fffffff9H
	DD	0fffffffaH
	DD	0fffffffbH
	DD	0fffffffbH
	DD	0fffffffcH
	DD	0fffffffdH
	DD	0fffffffeH
	DD	0ffffffffH
?piyo_loop_h_tbl@@3PAHA DD 0ffffffe8H			; piyo_loop_h_tbl
	DD	0ffffffe9H
	DD	0ffffffe9H
	DD	0ffffffeaH
	DD	0ffffffebH
	DD	0ffffffecH
	DD	0ffffffedH
	DD	0ffffffefH
	DD	0fffffff0H
	DD	0fffffff2H
	DD	0fffffff5H
	DD	0fffffff7H
	DD	0fffffff9H
	DD	0fffffffcH
	DD	0fffffffeH
	DD	00H
	DD	02H
	DD	04H
	DD	07H
	DD	09H
	DD	0bH
	DD	0eH
	DD	010H
	DD	011H
	DD	013H
	DD	014H
	DD	015H
	DD	016H
	DD	017H
	DD	017H
	DD	018H
	DD	017H
	DD	017H
	DD	016H
	DD	015H
	DD	014H
	DD	013H
	DD	011H
	DD	010H
	DD	0eH
	DD	0cH
	DD	09H
	DD	07H
	DD	04H
	DD	02H
	DD	00H
	DD	0fffffffeH
	DD	0fffffffcH
	DD	0fffffff9H
	DD	0fffffff7H
	DD	0fffffff5H
	DD	0fffffff2H
	DD	0fffffff0H
	DD	0ffffffefH
	DD	0ffffffedH
	DD	0ffffffecH
	DD	0ffffffebH
	DD	0ffffffeaH
	DD	0ffffffe9H
	DD	0ffffffe9H
?stick_ang_tbl@@3PADA DB 08H				; stick_ang_tbl
	DB	0aH
	DB	0cH
	DB	0eH
	DB	00H
	DB	02H
	DB	04H
	DB	06H
_DATA	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?disp_shild@@YAXXZ
_TEXT	SEGMENT
_psource$ = -376					; size = 4
_d6$ = -370						; size = 1
_d7$ = -369						; size = 1
_ddsd$ = -368						; size = 108
_box$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?disp_shild@@YAXXZ PROC					; disp_shild, COMDAT

; 12352: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 12353: 	char box[] = { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,

  00013	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000000000101010101010000000000

; 12354: 		0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
; 12355: 		0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
; 12356: 		0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
; 12357: 		0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0,
; 12358: 		0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0,
; 12359: 		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
; 12360: 		0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
; 12361: 		0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0,
; 12362: 		0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
; 12363: 		0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,
; 12364: 		0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
; 12365: 		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
; 12366: 		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
; 12367: 		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
; 12368: 		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
; 12369: 	};
; 12370: 
; 12371: 	DDSURFACEDESC ddsd;	// ??????Óî®Óïí
; 12372: 	char d6, d7;
; 12373: 	char *psource;		// Óòø?Óìè?????
; 12374: 
; 12375: 	ZeroMemory(&ddsd, sizeof(DDSURFACEDESC));

  0001a	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _ddsd$[ebp]
  00020	0f 11 85 fc fe
	ff ff		 movups	 XMMWORD PTR _box$[ebp], xmm0
  00027	6a 6c		 push	 108			; 0000006cH
  00029	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000001010101010101010101000000
  00030	0f 11 85 0c ff
	ff ff		 movups	 XMMWORD PTR _box$[ebp+16], xmm0
  00037	6a 00		 push	 0
  00039	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000101010101010101010101010000
  00040	0f 11 85 1c ff
	ff ff		 movups	 XMMWORD PTR _box$[ebp+32], xmm0
  00047	50		 push	 eax
  00048	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000101010101010101010101010000
  0004f	0f 11 85 2c ff
	ff ff		 movups	 XMMWORD PTR _box$[ebp+48], xmm0
  00056	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010101000000010100000001010100
  0005d	0f 11 85 3c ff
	ff ff		 movups	 XMMWORD PTR _box$[ebp+64], xmm0
  00064	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010101000000010100000001010100
  0006b	0f 11 85 4c ff
	ff ff		 movups	 XMMWORD PTR _box$[ebp+80], xmm0
  00072	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010101010101010101010101010100
  00079	0f 11 85 5c ff
	ff ff		 movups	 XMMWORD PTR _box$[ebp+96], xmm0
  00080	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010101010101010101010101010100
  00087	0f 11 85 6c ff
	ff ff		 movups	 XMMWORD PTR _box$[ebp+112], xmm0
  0008e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000001010101000001010101000000
  00095	0f 11 85 7c ff
	ff ff		 movups	 XMMWORD PTR _box$[ebp+128], xmm0
  0009c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000001010101010101010101000000
  000a3	0f 11 45 8c	 movups	 XMMWORD PTR _box$[ebp+144], xmm0
  000a7	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000101010100010100010101010000
  000ae	0f 11 45 9c	 movups	 XMMWORD PTR _box$[ebp+160], xmm0
  000b2	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010101000000000000000001010100
  000b9	0f 11 45 ac	 movups	 XMMWORD PTR _box$[ebp+176], xmm0
  000bd	0f 57 c0	 xorps	 xmm0, xmm0
  000c0	0f 11 45 bc	 movups	 XMMWORD PTR _box$[ebp+192], xmm0
  000c4	0f 11 45 cc	 movups	 XMMWORD PTR _box$[ebp+208], xmm0
  000c8	0f 11 45 dc	 movups	 XMMWORD PTR _box$[ebp+224], xmm0
  000cc	0f 11 45 ec	 movups	 XMMWORD PTR _box$[ebp+240], xmm0
  000d0	e8 00 00 00 00	 call	 _memset

; 12376: 	ddsd.dwSize = sizeof(DDSURFACEDESC);
; 12377: 
; 12378: 	// ?????????????????( ÓôØ?? ddsd ?Óê∫Óü´?Óöº????? )
; 12379: 	if (lpDraw->lpBACKBUFFER->Lock(NULL, &ddsd, DDLOCK_WAIT, NULL) != DD_OK)

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  000da	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR _ddsd$[ebp]
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e3	c7 85 90 fe ff
	ff 6c 00 00 00	 mov	 DWORD PTR _ddsd$[ebp], 108 ; 0000006cH
  000ed	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000f0	6a 00		 push	 0
  000f2	6a 01		 push	 1
  000f4	52		 push	 edx
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	6a 00		 push	 0
  000f9	50		 push	 eax
  000fa	ff 51 64	 call	 DWORD PTR [ecx+100]
  000fd	85 c0		 test	 eax, eax
  000ff	75 7d		 jne	 SHORT $LN3@disp_shild

; 12380: 	{
; 12381: 		//MessageBoxNew( hWnd, "SurfaceÁöÑlockÂ§±Ë¥•ÔºÅ", "??", MB_OK | MB_ICONSTOP );
; 12382: 		return;
; 12383: 	}
; 12384: 
; 12385: 	psource = box;		// Óòø???????

  00101	53		 push	 ebx
  00102	56		 push	 esi
  00103	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _box$[ebp]
  00109	57		 push	 edi
  0010a	89 85 88 fe ff
	ff		 mov	 DWORD PTR _psource$[ebp], eax

; 12386: 	_asm{
; 12387: 		//		push	eax
; 12388: 		//		push	ebx
; 12389: 		//		push	ecx
; 12390: 		//		push	edx
; 12391: 		//		push	esi
; 12392: 		//		push	edi
; 12393: 
; 12394: 		mov		edx, [ddsd.lpSurface]		//ÓìèÓô™????

  00110	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR _ddsd$[ebp+36]

; 12395: 			add		edx, 640 - 24						//

  00116	81 c2 68 02 00
	00		 add	 edx, 616		; 00000268H

; 12396: 
; 12397: 			mov		ebx, [ddsd.lPitch]		//?????????

  0011c	8b 9d a0 fe ff
	ff		 mov	 ebx, DWORD PTR _ddsd$[ebp+16]

; 12398: 			sub		ebx, 16

  00122	83 eb 10	 sub	 ebx, 16			; 00000010H

; 12399: 
; 12400: 			mov		al, 10 - 9		//????????

  00125	b0 01		 mov	 al, 1

; 12401: 			mov[d6], al	//

  00127	88 85 8e fe ff
	ff		 mov	 BYTE PTR _d6$[ebp], al
$disp_shild_100$6:

; 12402: 
; 12403: 		disp_shild_100 :
; 12404: 		mov		al, 30				//????????

  0012d	b0 1e		 mov	 al, 30			; 0000001eH

; 12405: 			mov[d7], al			//

  0012f	88 85 8f fe ff
	ff		 mov	 BYTE PTR _d7$[ebp], al

; 12406: 			mov		edi, edx		//Óù∏Óçï?Óåø????

  00135	8b fa		 mov	 edi, edx
$disp_shild_200$7:

; 12407: 
; 12408: 		disp_shild_200 :
; 12409: 		mov		cl, 16		//?????????

  00137	b1 10		 mov	 cl, 16			; 00000010H

; 12410: 			//		mov		esi,edx
; 12411: 			mov		esi, [psource]

  00139	8b b5 88 fe ff
	ff		 mov	 esi, DWORD PTR _psource$[ebp]
$disp_shild_300$8:

; 12412: 
; 12413: 		disp_shild_300 :
; 12414: 					   mov		ch, 16		//?????????

  0013f	b5 10		 mov	 ch, 16			; 00000010H
$loop_x$9:

; 12415: 
; 12416: 				   loop_x :
; 12417: 						  mov		al, [esi]

  00141	8a 06		 mov	 al, BYTE PTR [esi]

; 12418: 						  or		al, al

  00143	0a c0		 or	 al, al

; 12419: 						  je		skip

  00145	74 02		 je	 SHORT $skip$10

; 12420: 
; 12421: 						  mov[edi], al

  00147	88 07		 mov	 BYTE PTR [edi], al
$skip$10:

; 12422: 
; 12423: 					  skip :
; 12424: 		inc		esi

  00149	46		 inc	 esi

; 12425: 			inc		edi

  0014a	47		 inc	 edi

; 12426: 			dec		ch

  0014b	fe cd		 dec	 ch

; 12427: 			jne		loop_x

  0014d	75 f2		 jne	 SHORT $loop_x$9

; 12428: 
; 12429: 			add		edi, ebx

  0014f	03 fb		 add	 edi, ebx

; 12430: 			dec		cl

  00151	fe c9		 dec	 cl

; 12431: 			jne		disp_shild_300

  00153	75 ea		 jne	 SHORT $disp_shild_300$8

; 12432: 
; 12433: 			dec[d7]

  00155	fe 8d 8f fe ff
	ff		 dec	 BYTE PTR _d7$[ebp]

; 12434: 			jne		disp_shild_200

  0015b	75 da		 jne	 SHORT $disp_shild_200$7

; 12435: 
; 12436: 			add		edx, 16						//

  0015d	83 c2 10	 add	 edx, 16			; 00000010H

; 12437: 			dec[d6]

  00160	fe 8d 8e fe ff
	ff		 dec	 BYTE PTR _d6$[ebp]

; 12438: 			jne		disp_shild_100

  00166	75 c5		 jne	 SHORT $disp_shild_100$6

; 12439: 
; 12440: 			//		pop		edi
; 12441: 			//		pop		esi
; 12442: 			//		pop		edx
; 12443: 			//		pop		ecx
; 12444: 			//		pop		ebx
; 12445: 			//		pop		eax
; 12446: 	}
; 12447: 
; 12448: 	// ???????????????????
; 12449: 	if (lpDraw->lpBACKBUFFER->Unlock(NULL) != DD_OK)

  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0016d	6a 00		 push	 0
  0016f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00172	50		 push	 eax
  00173	8b 08		 mov	 ecx, DWORD PTR [eax]
  00175	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
$LN3@disp_shild:

; 12450: 	{
; 12451: 	//	extern int MessageBoxNew(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
; 12452: 	//	MessageBoxNew(hWnd, "SurfaceÁöÑUnlockÂ§±Ë¥•ÔºÅ", "??", MB_OK | MB_ICONSTOP);
; 12453: 		return;
; 12454: 	}
; 12455: 
; 12456: 	return;
; 12457: }

  0017e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00181	33 cd		 xor	 ecx, ebp
  00183	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
?disp_shild@@YAXXZ ENDP					; disp_shild
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_bc@@YAXXZ
_TEXT	SEGMENT
?set_bc@@YAXXZ PROC					; set_bc, COMDAT

; 12041: 	ACTION *a1;
; 12042: 	int d0, d2, d3, d1 = 0;
; 12043: 
; 12044: 	//????????
; 12045: 	bc_pointer = 3;

  00000	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?bc_pointer@@3HA, 3

; 12046: 	//?????Óî¥Óíî
; 12047: 	ATR_ATTRIB(p_master) = get_bc_num();

  0000a	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?p_master@@3PAUaction@@A
  00015	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 12048: 	//ÓìñÓô¨????????
; 12049: 	while (BattleStatus[bc_pointer] != NULL)

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bc_pointer@@3HA
  00020	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?BattleStatus@@3PADA[eax], 0
  00027	0f 84 12 06 00
	00		 je	 $LN3@set_bc
  0002d	53		 push	 ebx
  0002e	56		 push	 esi
  0002f	57		 push	 edi
$LL2@set_bc:

; 12050: 	{
; 12051: 		//??Óú±?Óöá???
; 12052: 		d2 = get_bc_num();

  00030	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num
  00035	8b f8		 mov	 edi, eax

; 12053: #ifdef _STONDEBUG_
; 12054: 		if (d2 >= BATTLKPKPLYAERNUM)
; 12055: 			MessageBox(hWnd, "ÂàùÂßãÂåñÂ§±Ë¥•,Ë∂ÖËøáËÆæÂÆöÊï∞Èáè", "Error", MB_OK);
; 12056: #endif
; 12057: 		//?????????????
; 12058: 		a1 = p_party[d2];
; 12059: 
; 12060: 		/* ÓçØ??? */
; 12061: 		ATR_NAME(a1) = monster;
; 12062: 		//Ó°ìÓì∑Óöá???
; 12063: 		get_bc_asc(a1, 0);

  00037	6a 00		 push	 0
  00039	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  00040	56		 push	 esi
  00041	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster
  00048	e8 00 00 00 00	 call	 ?get_bc_asc@@YAXPAUaction@@H@Z ; get_bc_asc

; 12064: 		//Óêò?Óöá???
; 12065: 		get_bc_asc(a1, 1);

  0004d	6a 01		 push	 1
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ?get_bc_asc@@YAXPAUaction@@H@Z ; get_bc_asc
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 12066: 		//???Óú±?Óöá???
; 12067: 		ATR_CHR_NO(a1) = get_bc_num();

  00058	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num
  0005d	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax

; 12068: 		//???Óöá???
; 12069: 		ATR_LEVEL(a1) = get_bc_num();

  00063	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num
  00068	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 12070: 		//??Óöá???
; 12071: 		ATR_LIFE(a1) = get_bc_num();

  0006e	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num
  00073	89 46 78	 mov	 DWORD PTR [esi+120], eax

; 12072: 
; 12073: #ifdef _SFUMATO
; 12074: 		ATR_SFUMATO(a1) = 0xff0000;	
; 12075: #endif
; 12076: 
; 12077: 		//?Óï´??Óöá???
; 12078: 		ATR_MAX_LIFE(a1) = get_bc_num();

  00076	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num
  0007b	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 12079: #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 12080: 		ATR_MAX_MANA(a1) = pc.maxMp ;

  00081	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+28
  00086	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 12081: #endif
; 12082: 		//???Óöá???
; 12083: 		d0 = get_bc_num();

  0008c	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num

; 12084: 		// Robin 0728 ridePet
; 12085: 		if (bNewServer)

  00091	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  00098	8b d8		 mov	 ebx, eax
  0009a	74 31		 je	 SHORT $LN6@set_bc

; 12086: 		{
; 12087: 			ATR_RIDE(a1) = get_bc_num();

  0009c	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num

; 12088: 			get_bc_asc_ridepet(a1);

  000a1	56		 push	 esi
  000a2	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax
  000a8	e8 00 00 00 00	 call	 ?get_bc_asc_ridepet@@YAXPAUaction@@@Z ; get_bc_asc_ridepet
  000ad	83 c4 04	 add	 esp, 4

; 12089: 			ATR_PETLEVEL(a1) = get_bc_num();

  000b0	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num
  000b5	89 86 ac 01 00
	00		 mov	 DWORD PTR [esi+428], eax

; 12090: 			ATR_PET_LIFE(a1) = get_bc_num();

  000bb	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num
  000c0	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax

; 12091: 			int k = ATR_PET_LIFE(a1);
; 12092: 			ATR_PET_MAX_LIFE(a1) = get_bc_num();

  000c6	e8 00 00 00 00	 call	 ?get_bc_num@@YAHXZ	; get_bc_num

; 12093: 			int o = ATR_PET_MAX_LIFE(a1);
; 12094: 		}

  000cb	eb 27		 jmp	 SHORT $LN7@set_bc
$LN6@set_bc:

; 12095: 		else
; 12096: 		{
; 12097: 			ATR_RIDE(a1) = 0;

  000cd	c7 86 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+404], 0

; 12098: 			ATR_PETNAME(a1)[0] = NULL;
; 12099: 			ATR_PETLEVEL(a1) = 0;
; 12100: 			ATR_PET_LIFE(a1) = 0;
; 12101: 			ATR_PET_MAX_LIFE(a1) = 0;

  000d7	33 c0		 xor	 eax, eax
  000d9	c6 86 98 01 00
	00 00		 mov	 BYTE PTR [esi+408], 0
  000e0	c7 86 ac 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+428], 0
  000ea	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0
$LN7@set_bc:

; 12102: 		}
; 12103: 		//Óë°???
; 12104: 		if (d0 & BC_FRESH)

  000f4	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
  000fa	f6 c3 01	 test	 bl, 1
  000fd	0f 84 65 01 00
	00		 je	 $LN8@set_bc

; 12105: 		{
; 12106: 			//??Óí∑??
; 12107: 			if ((ATR_CHR_NO(a1) >= SPR_mwood1 && ATR_CHR_NO(a1) <= SPR_mstone3) ||
; 12108: 				(ATR_CHR_NO(a1) == 15323) || (ATR_CHR_NO(a1) == 10812) || (ATR_CHR_NO(a1) == 15527) ||
; 12109: 				(ATR_CHR_NO(a1) == 15543) || (ATR_CHR_NO(a1) == 15575) || (ATR_CHR_NO(a1) == 15607))

  00103	8b 86 44 01 00
	00		 mov	 eax, DWORD PTR [esi+324]
  00109	3d 72 88 01 00	 cmp	 eax, 100466		; 00018872H
  0010e	7c 0b		 jl	 SHORT $LN13@set_bc
  00110	3d 77 88 01 00	 cmp	 eax, 100471		; 00018877H
  00115	0f 8e 8f 00 00
	00		 jle	 $LN12@set_bc
$LN13@set_bc:
  0011b	3d db 3b 00 00	 cmp	 eax, 15323		; 00003bdbH
  00120	0f 84 84 00 00
	00		 je	 $LN12@set_bc
  00126	3d 3c 2a 00 00	 cmp	 eax, 10812		; 00002a3cH
  0012b	74 7d		 je	 SHORT $LN12@set_bc
  0012d	3d a7 3c 00 00	 cmp	 eax, 15527		; 00003ca7H
  00132	74 76		 je	 SHORT $LN12@set_bc
  00134	3d b7 3c 00 00	 cmp	 eax, 15543		; 00003cb7H
  00139	74 6f		 je	 SHORT $LN12@set_bc
  0013b	3d d7 3c 00 00	 cmp	 eax, 15575		; 00003cd7H
  00140	74 68		 je	 SHORT $LN12@set_bc
  00142	3d f7 3c 00 00	 cmp	 eax, 15607		; 00003cf7H
  00147	74 61		 je	 SHORT $LN12@set_bc

; 12132: 			}
; 12133: 			else
; 12134: 			{
; 12135: 				//ÓôëÓê∂?
; 12136: 				ATR_VCT_NO(a1) = VCT_NO_APPEAR;

  00149	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 12137: 				ATR_ATTRIB(a1) &= ~ACT_ATR_HIDE;		//Óù∏Óçï??
; 12138: 				//ÓôëÓê∂Óïò?
; 12139: 				ATR_VCT_NO(p_master) = 3;
; 12140: 				/* ?Óù≥??? */
; 12141: 				ATR_H_POS(a1) = monster_start_pos[monster_place_no[d2] * 2];

  0014c	8b 14 bd 00 00
	00 00		 mov	 edx, DWORD PTR ?monster_place_no@@3PAHA[edi*4]

; 12142: 				ATR_V_POS(a1) = monster_start_pos[monster_place_no[d2] * 2 + 1];
; 12143: 				ATR_INT_WORK0(a1) = monster_place_pos[monster_place_no[d2] * 2];
; 12144: 				ATR_INT_WORK1(a1) = monster_place_pos[monster_place_no[d2] * 2 + 1];
; 12145: 			}
; 12146: 			//????????????
; 12147: 			set_raster_pos(a1);

  00153	56		 push	 esi
  00154	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H
  00157	83 a6 a4 00 00
	00 fd		 and	 DWORD PTR [esi+164], -3	; fffffffdH
  0015e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00163	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00166	c6 00 03	 mov	 BYTE PTR [eax], 3
  00169	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0016c	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_start_pos@@3PAHA[edx*8]
  00173	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00176	8b 04 d5 04 00
	00 00		 mov	 eax, DWORD PTR ?monster_start_pos@@3PAHA[edx*8+4]
  0017d	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00180	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[edx*8]
  00187	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax
  0018d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00190	8b 04 d5 04 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[edx*8+4]
  00197	89 81 28 01 00
	00		 mov	 DWORD PTR [ecx+296], eax
  0019d	e8 00 00 00 00	 call	 ?set_raster_pos@@YAXPAUaction@@@Z ; set_raster_pos
  001a2	83 c4 04	 add	 esp, 4

; 12148: 			//148 149 150
; 12149: 		}

  001a5	e9 ef 01 00 00	 jmp	 $LN80@set_bc
$LN12@set_bc:

; 12110: 			{
; 12111: 				ATR_ATTRIB(a1) &= ~ACT_ATR_HIDE;		//Óù∏Óçï??
; 12112: 				//Óïò??
; 12113: 				ATR_VCT_NO(a1) = 0;

  001aa	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ad	83 a6 a4 00 00
	00 fd		 and	 DWORD PTR [esi+164], -3	; fffffffdH

; 12114: 				ATR_CHR_ACT(a1) = ANIM_STAND;
; 12115: 				ATR_H_POS(a1) = ATR_INT_WORK0(a1) = monster_place_pos[monster_place_no[d2] * 2];

  001b4	8b 14 bd 00 00
	00 00		 mov	 edx, DWORD PTR ?monster_place_no@@3PAHA[edi*4]
  001bb	c6 00 00	 mov	 BYTE PTR [eax], 0
  001be	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  001c1	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[edx*8]
  001c8	c7 86 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+332], 3
  001d2	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax
  001d8	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  001db	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  001e1	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 12116: 				ATR_V_POS(a1) = ATR_INT_WORK1(a1) = monster_place_pos[monster_place_no[d2] * 2 + 1];

  001e4	8b 04 d5 04 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[edx*8+4]
  001eb	89 81 28 01 00
	00		 mov	 DWORD PTR [ecx+296], eax
  001f1	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  001f4	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  001fa	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 12117: 				//???Óù∏Óçï
; 12118: 				if (ATR_GROUP_FLG(a1) == 0)

  001fd	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  00200	84 c0		 test	 al, al
  00202	75 0c		 jne	 SHORT $LN14@set_bc

; 12119: 					ATR_CHR_ANG(a1) = 3;

  00204	c7 86 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+340], 3
  0020e	eb 0e		 jmp	 SHORT $LN16@set_bc
$LN14@set_bc:

; 12120: 				else if (ATR_GROUP_FLG(a1) == 1)

  00210	3c 01		 cmp	 al, 1
  00212	75 0a		 jne	 SHORT $LN16@set_bc

; 12121: 					ATR_CHR_ANG(a1) = 7;

  00214	c7 86 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+340], 7
$LN16@set_bc:

; 12122: #ifdef _BATTLE_PK_PLAYER_FOR_40
; 12123: 				else if (ATR_GROUP_FLG(a1) == 2)
; 12124: 					ATR_CHR_ANG(a1) = 5;
; 12125: 				else if (ATR_GROUP_FLG(a1) == 3)	
; 12126: 					ATR_CHR_ANG(a1) = 1;
; 12127: #endif
; 12128: 				ATR_CRS_OLD(a1) = ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];

  0021e	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]

; 12129: 				ATR_CHR_ACT(a1) = ANIM_WALK;
; 12130: 				ATR_CHR_ACT_OLD(a1) = -1;
; 12131: 				pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00224	6a 00		 push	 0
  00226	6a 00		 push	 0
  00228	56		 push	 esi
  00229	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  0022f	0f b6 c1	 movzx	 eax, cl
  00232	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  00238	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl
  0023e	c7 86 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+332], 4
  00248	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  00252	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00257	83 c4 0c	 add	 esp, 12			; 0000000cH

; 12142: 				ATR_V_POS(a1) = monster_start_pos[monster_place_no[d2] * 2 + 1];
; 12143: 				ATR_INT_WORK0(a1) = monster_place_pos[monster_place_no[d2] * 2];
; 12144: 				ATR_INT_WORK1(a1) = monster_place_pos[monster_place_no[d2] * 2 + 1];
; 12145: 			}
; 12146: 			//????????????
; 12147: 			set_raster_pos(a1);

  0025a	56		 push	 esi
  0025b	e8 00 00 00 00	 call	 ?set_raster_pos@@YAXPAUaction@@@Z ; set_raster_pos
  00260	83 c4 04	 add	 esp, 4

; 12148: 			//148 149 150
; 12149: 		}

  00263	e9 31 01 00 00	 jmp	 $LN80@set_bc
$LN8@set_bc:

; 12150: 		else
; 12151: 		{
; 12152: 			if (ATR_LIFE(a1) > 0)

  00268	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  0026c	0f 8e 27 01 00
	00		 jle	 $LN80@set_bc

; 12153: 			{	//Óíü?????
; 12154: 				if (d0 & BC_FADE_OUT)

  00272	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  00278	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0027b	f7 c3 00 02 00
	00		 test	 ebx, 512		; 00000200H
  00281	74 50		 je	 SHORT $LN18@set_bc

; 12155: 				{	// ??s???
; 12156: 					ATR_ATTRIB(a1) |= ACT_ATR_TRAVEL;

  00283	0d 00 00 02 00	 or	 eax, 131072		; 00020000H
  00288	89 86 a4 00 00
	00		 mov	 DWORD PTR [esi+164], eax

; 12157: 					//??????
; 12158: 					ATR_ATTACK_KIND(2, a1) = 1;

  0028e	c7 41 68 01 00
	00 00		 mov	 DWORD PTR [ecx+104], 1

; 12159: 					if (ATR_GROUP_FLG(a1) == 0)

  00295	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00298	80 79 5e 00	 cmp	 BYTE PTR [ecx+94], 0
  0029c	75 24		 jne	 SHORT $LN20@set_bc

; 12160: 					{	//????????
; 12161: 						ATR_V_POS(a1) = lpDraw->ySize + 16;

  0029e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  002a3	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [eax+136]
  002a9	83 c0 10	 add	 eax, 16			; 00000010H
  002ac	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 12162: 						ATR_H_POS(a1) = lpDraw->xSize + SCREEN_OUT;

  002af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  002b4	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  002ba	83 c0 6a	 add	 eax, 106		; 0000006aH

; 12168: 					}
; 12169: 				}

  002bd	89 46 18	 mov	 DWORD PTR [esi+24], eax
  002c0	eb 61		 jmp	 SHORT $LN19@set_bc
$LN20@set_bc:

; 12163: 					}
; 12164: 					else
; 12165: 					{
; 12166: 						ATR_V_POS(a1) = -18;
; 12167: 						ATR_H_POS(a1) = -SCREEN_OUT;

  002c2	b8 96 ff ff ff	 mov	 eax, -106		; ffffff96H
  002c7	c7 46 1c ee ff
	ff ff		 mov	 DWORD PTR [esi+28], -18	; ffffffeeH

; 12168: 					}
; 12169: 				}

  002ce	89 46 18	 mov	 DWORD PTR [esi+24], eax
  002d1	eb 50		 jmp	 SHORT $LN19@set_bc
$LN18@set_bc:

; 12170: 				else
; 12171: 				{
; 12172: 					ATR_ATTRIB(a1) &= ~ACT_ATR_TRAVEL;
; 12173: 					ATR_H_POS(a1) = ATR_INT_WORK0(a1) = monster_place_pos[monster_place_no[d2] * 2];

  002d3	8b 14 bd 00 00
	00 00		 mov	 edx, DWORD PTR ?monster_place_no@@3PAHA[edi*4]
  002da	25 ff ff fd ff	 and	 eax, -131073		; fffdffffH
  002df	89 86 a4 00 00
	00		 mov	 DWORD PTR [esi+164], eax

; 12174: 					ATR_V_POS(a1) = ATR_INT_WORK1(a1) = monster_place_pos[monster_place_no[d2] * 2 + 1];
; 12175: 					//????????????
; 12176: 					set_raster_pos(a1);

  002e5	56		 push	 esi
  002e6	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[edx*8]
  002ed	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax
  002f3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  002f6	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  002fc	89 46 18	 mov	 DWORD PTR [esi+24], eax
  002ff	8b 04 d5 04 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[edx*8+4]
  00306	89 81 28 01 00
	00		 mov	 DWORD PTR [ecx+296], eax
  0030c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0030f	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  00315	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00318	e8 00 00 00 00	 call	 ?set_raster_pos@@YAXPAUaction@@@Z ; set_raster_pos
  0031d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00320	83 c4 04	 add	 esp, 4
$LN19@set_bc:

; 12177: 				}
; 12178: 				//Óïò??
; 12179: 				ATR_VCT_NO(a1) = 0;

  00323	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 12180: 				ATR_CHR_ACT(a1) = ANIM_STAND;

  00326	c7 86 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+332], 3

; 12181: 				if (BattleBpFlag & BATTLE_BP_JOIN)

  00330	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?BattleBpFlag@@3HA, 1
  00337	74 60		 je	 SHORT $LN80@set_bc

; 12182: 				{	// Óå¢Óìñ??
; 12183: 					//???Óù∏Óçï
; 12184: 					if (ATR_GROUP_FLG(a1) == 0)

  00339	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0033c	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  0033f	84 c0		 test	 al, al
  00341	75 0c		 jne	 SHORT $LN23@set_bc

; 12185: 						ATR_CHR_ANG(a1) = 3;

  00343	c7 86 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+340], 3
  0034d	eb 0e		 jmp	 SHORT $LN25@set_bc
$LN23@set_bc:

; 12186: 					else if (ATR_GROUP_FLG(a1) == 1)

  0034f	3c 01		 cmp	 al, 1
  00351	75 0a		 jne	 SHORT $LN25@set_bc

; 12187: 						ATR_CHR_ANG(a1) = 7;

  00353	c7 86 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+340], 7
$LN25@set_bc:

; 12188: #ifdef _BATTLE_PK_PLAYER_FOR_40
; 12189: 					else if (ATR_GROUP_FLG(a1) == 2)
; 12190: 						ATR_CHR_ANG(a1) = 5;
; 12191: 					else if (ATR_GROUP_FLG(a1) == 3)	
; 12192: 						ATR_CHR_ANG(a1) = 1;
; 12193: #endif
; 12194: 					ATR_CRS_OLD(a1) = ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];

  0035d	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]

; 12195: 					ATR_CHR_ACT(a1) = ANIM_WALK;
; 12196: 					ATR_CHR_ACT_OLD(a1) = -1;
; 12197: 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00363	6a 00		 push	 0
  00365	6a 00		 push	 0
  00367	56		 push	 esi
  00368	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  0036e	0f b6 c1	 movzx	 eax, cl
  00371	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  00377	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl
  0037d	c7 86 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+332], 4
  00387	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  00391	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00396	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN80@set_bc:

; 12198: 				}
; 12199: 			}
; 12200: 		}
; 12201: 		//?Ó†å??
; 12202: 		if (d0 & BC_DEATH)

  00399	f6 c3 02	 test	 bl, 2
  0039c	0f 84 d8 00 00
	00		 je	 $LN27@set_bc

; 12203: 		{
; 12204: 			if (ATR_VCT_NO(a1) == VCT_NO_APPEAR)

  003a2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003a5	80 38 f9	 cmp	 BYTE PTR [eax], 249	; 000000f9H
  003a8	0f 85 cc 00 00
	00		 jne	 $LN27@set_bc

; 12205: 			{	//?Ó†å??????
; 12206: 				//?Ó†å???
; 12207: 				ATR_VCT_NO(a1) = VCT_NO_DIE + 2;
; 12208: 				ATR_H_POS(a1) = ATR_INT_WORK0(a1) = monster_place_pos[monster_place_no[d2] * 2];

  003ae	8b 14 bd 00 00
	00 00		 mov	 edx, DWORD PTR ?monster_place_no@@3PAHA[edi*4]
  003b5	c6 00 fc	 mov	 BYTE PTR [eax], 252	; 000000fcH
  003b8	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 12209: 				ATR_V_POS(a1) = ATR_INT_WORK1(a1) = monster_place_pos[monster_place_no[d2] * 2 + 1];
; 12210: 				//????????????
; 12211: 				set_raster_pos(a1);

  003bb	56		 push	 esi
  003bc	8b 04 d5 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[edx*8]
  003c3	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax
  003c9	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  003cc	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  003d2	89 46 18	 mov	 DWORD PTR [esi+24], eax
  003d5	8b 04 d5 04 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[edx*8+4]
  003dc	89 81 28 01 00
	00		 mov	 DWORD PTR [ecx+296], eax
  003e2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003e5	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  003eb	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  003ee	e8 00 00 00 00	 call	 ?set_raster_pos@@YAXPAUaction@@@Z ; set_raster_pos

; 12212: 				//????
; 12213: 				ATR_LIFE(a1) = 0;
; 12214: 				//?Ó†å???????
; 12215: 				if (ATR_GROUP_FLG(a1) == 0)

  003f3	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  003f6	83 c4 04	 add	 esp, 4
  003f9	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00400	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  00403	84 c0		 test	 al, al
  00405	75 0c		 jne	 SHORT $LN28@set_bc

; 12216: 					ATR_CHR_ANG(a1) = 3;

  00407	c7 86 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+340], 3
  00411	eb 0e		 jmp	 SHORT $LN30@set_bc
$LN28@set_bc:

; 12217: 				else if (ATR_GROUP_FLG(a1) == 1)

  00413	3c 01		 cmp	 al, 1
  00415	75 0a		 jne	 SHORT $LN30@set_bc

; 12218: 					ATR_CHR_ANG(a1) = 7;

  00417	c7 86 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+340], 7
$LN30@set_bc:

; 12219: #ifdef _BATTLE_PK_PLAYER_FOR_40
; 12220: 				else if (ATR_GROUP_FLG(a1) == 2)
; 12221: 					ATR_CHR_ANG(a1) = 5;
; 12222: 				else if (ATR_GROUP_FLG(a1) == 3)	
; 12223: 					ATR_CHR_ANG(a1) = 1;
; 12224: #endif
; 12225: 				ATR_CRS_OLD(a1) = ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];

  00421	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  00427	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  0042d	0f b6 c1	 movzx	 eax, cl
  00430	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  00436	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl

; 12226: 				ATR_CHR_ACT(a1) = ANIM_DEAD;		//?Ó†å???????

  0043c	c7 86 4c 01 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+332], 2

; 12227: 				ATR_CHR_ACT_OLD(a1) = -1;

  00446	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
$LL4@set_bc:

; 12228: 				while (1)
; 12229: 				{
; 12230: 					if (pattern(a1, 1, ANM_NO_LOOP))	//???Óé∑???

  00450	6a 01		 push	 1
  00452	6a 01		 push	 1
  00454	56		 push	 esi
  00455	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0045a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0045d	85 c0		 test	 eax, eax
  0045f	74 ef		 je	 SHORT $LL4@set_bc

; 12231: 						break;
; 12232: 				}
; 12233: 				//????Óù∏Óçï
; 12234: 				LoadBmp(ATR_PAT_NO(a1));

  00461	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  00467	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp

; 12235: #ifndef _PETSKILL_ANTINTER
; 12236: 				set_piyo_loop(a1);
; 12237: #endif			
; 12238: 				//?Ó†åÓïò?`
; 12239: 				ATR_VCT_NO(p_master) = 3;

  0046c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00471	83 c4 04	 add	 esp, 4
  00474	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00477	c6 00 03	 mov	 BYTE PTR [eax], 3
$LN27@set_bc:

; 12240: 			}
; 12241: 		}
; 12242: 		//???Óèù?Óöº?ÔºØÔº´??
; 12243: 		if (d0 & BC_PET_OK)

  0047a	f6 c3 04	 test	 bl, 4
  0047d	74 0a		 je	 SHORT $LN32@set_bc

; 12244: 			ATR_PET_OK(a1) = 1;

  0047f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00482	c6 80 20 01 00
	00 01		 mov	 BYTE PTR [eax+288], 1
$LN32@set_bc:

; 12245: 		//??????Óêπ????????
; 12246: 		if (ATR_JUJUTSU_WORK(a1) == NULL)

  00489	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0048c	83 b8 10 01 00
	00 00		 cmp	 DWORD PTR [eax+272], 0
  00493	0f 85 74 01 00
	00		 jne	 $LN67@set_bc

; 12247: 		{
; 12248: 			d3 = 0;

  00499	33 ff		 xor	 edi, edi

; 12249: 			if (d0 & BC_BIT3)		//  "ÓöÖ"??

  0049b	f6 c3 08	 test	 bl, 8
  0049e	74 07		 je	 SHORT $LN34@set_bc

; 12250: 				d3 = 1;

  004a0	bf 01 00 00 00	 mov	 edi, 1
  004a5	eb 3d		 jmp	 SHORT $LN44@set_bc
$LN34@set_bc:

; 12251: 			else if (d0 & BC_BIT4)		//  "??"??

  004a7	f6 c3 10	 test	 bl, 16			; 00000010H
  004aa	74 07		 je	 SHORT $LN36@set_bc

; 12252: 				d3 = 2;

  004ac	bf 02 00 00 00	 mov	 edi, 2
  004b1	eb 31		 jmp	 SHORT $LN44@set_bc
$LN36@set_bc:

; 12253: 			else if (d0 & BC_BIT5)		//  "Ó°á?"??

  004b3	f6 c3 20	 test	 bl, 32			; 00000020H
  004b6	74 07		 je	 SHORT $LN38@set_bc

; 12254: 				d3 = 3;

  004b8	bf 03 00 00 00	 mov	 edi, 3
  004bd	eb 25		 jmp	 SHORT $LN44@set_bc
$LN38@set_bc:

; 12255: 			else if (d0 & BC_BIT6)		//  "Óí∑?"??

  004bf	f6 c3 40	 test	 bl, 64			; 00000040H
  004c2	74 07		 je	 SHORT $LN40@set_bc

; 12256: 				d3 = 4;

  004c4	bf 04 00 00 00	 mov	 edi, 4
  004c9	eb 19		 jmp	 SHORT $LN44@set_bc
$LN40@set_bc:

; 12257: 			else if (d0 & BC_BIT7)		//  "??Óûü?"??

  004cb	84 db		 test	 bl, bl
  004cd	79 07		 jns	 SHORT $LN42@set_bc

; 12258: 				d3 = 5;

  004cf	bf 05 00 00 00	 mov	 edi, 5
  004d4	eb 0e		 jmp	 SHORT $LN44@set_bc
$LN42@set_bc:

; 12259: 			else if (d0 & BC_BIT8)		//  "??"??

  004d6	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  004dc	b8 06 00 00 00	 mov	 eax, 6
  004e1	0f 45 f8	 cmovne	 edi, eax
$LN44@set_bc:

; 12260: 				d3 = 6;
; 12261: #ifdef _MAGIC_WEAKEN
; 12262: 			if (d0 & BC_WEAKEN)    //ËôöÂº±

  004e4	f7 c3 00 08 00
	00		 test	 ebx, 2048		; 00000800H
  004ea	b8 07 00 00 00	 mov	 eax, 7
  004ef	0f 45 f8	 cmovne	 edi, eax

; 12263: 				d3 = 7;
; 12264: #endif
; 12265: #ifdef _MAGIC_DEEPPOISION
; 12266: 			if (d0 & BC_DEEPPOISON)  //ÂâßÊØí

  004f2	f7 c3 00 10 00
	00		 test	 ebx, 4096		; 00001000H
  004f8	b8 08 00 00 00	 mov	 eax, 8
  004fd	0f 45 f8	 cmovne	 edi, eax

; 12267: 				d3 = 8;
; 12268: #endif
; 12269: #ifdef _MAGIC_BARRIER
; 12270: 			if (d0 & BC_BARRIER)  //È≠îÈöú

  00500	f7 c3 00 20 00
	00		 test	 ebx, 8192		; 00002000H
  00506	b8 09 00 00 00	 mov	 eax, 9
  0050b	0f 45 f8	 cmovne	 edi, eax

; 12271: 				d3 = 9;
; 12272: #endif
; 12273: #ifdef _MAGIC_NOCAST
; 12274: 			if (d0 & BC_NOCAST)   //Ê≤âÈªò

  0050e	f7 c3 00 40 00
	00		 test	 ebx, 16384		; 00004000H
  00514	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00519	0f 45 f8	 cmovne	 edi, eax

; 12275: 				d3 = 10;
; 12276: #endif
; 12277: #ifdef _SARS						// WON ADD ÊØíÁÖûËîìÂª∂
; 12278: 			if (d0 & BC_SARS)		// ÊØíÁÖûËîìÂª∂

  0051c	f7 c3 00 80 00
	00		 test	 ebx, 32768		; 00008000H
  00522	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  00527	0f 45 f8	 cmovne	 edi, eax

; 12279: 				d3 = 11;
; 12280: #endif
; 12281: #ifdef _CHAR_PROFESSION						// WON ADD	ÊôïÁú©
; 12282: 			if (d0 & BC_DIZZY)		// ÊôïÁú©

  0052a	f7 c3 00 00 01
	00		 test	 ebx, 65536		; 00010000H
  00530	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00535	0f 45 f8	 cmovne	 edi, eax

; 12283: 				d3 = 12;
; 12284: 			if (d0 & BC_ENTWINE)	// Ê†ëÊ†πÁº†Áªï

  00538	f7 c3 00 00 02
	00		 test	 ebx, 131072		; 00020000H
  0053e	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH
  00543	0f 45 f8	 cmovne	 edi, eax

; 12285: 				d3 = 13;
; 12286: 			if (d0 & BC_DRAGNET)	// Â§©ÁΩóÂú∞ÁΩë

  00546	f7 c3 00 00 04
	00		 test	 ebx, 262144		; 00040000H
  0054c	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  00551	0f 45 f8	 cmovne	 edi, eax

; 12287: 				d3 = 14;
; 12288: 			if (d0 & BC_ICECRACK)	// ÂÜ∞ÁàÜÊúØ

  00554	f7 c3 00 00 08
	00		 test	 ebx, 524288		; 00080000H
  0055a	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  0055f	0f 45 f8	 cmovne	 edi, eax

; 12289: 				d3 = 15;
; 12290: 			if (d0 & BC_OBLIVION)	// ÈÅóÂøò

  00562	f7 c3 00 00 10
	00		 test	 ebx, 1048576		; 00100000H
  00568	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0056d	0f 45 f8	 cmovne	 edi, eax

; 12291: 				d3 = 16;
; 12292: 			if (d0 & BC_ICEARROW)	// ÂÜ∞ÁÆ≠

  00570	f7 c3 00 00 20
	00		 test	 ebx, 2097152		; 00200000H
  00576	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  0057b	0f 45 f8	 cmovne	 edi, eax

; 12293: 				d3 = 17;
; 12294: 			if (d0 & BC_BLOODWORMS)// ÂóúË°ÄËõä

  0057e	f7 c3 00 00 40
	00		 test	 ebx, 4194304		; 00400000H
  00584	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  00589	0f 45 f8	 cmovne	 edi, eax

; 12295: 				d3 = 18;
; 12296: 			if (d0 & BC_SIGN)		// ‰∏ÄÈíàËßÅË°Ä

  0058c	f7 c3 00 00 80
	00		 test	 ebx, 8388608		; 00800000H
  00592	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
  00597	0f 45 f8	 cmovne	 edi, eax

; 12297: 				d3 = 19;
; 12298: 			if (d0 & BC_CRAZY)		// ÊåëÊã®

  0059a	f7 c3 00 00 00
	01		 test	 ebx, 16777216		; 01000000H
  005a0	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  005a5	0f 45 f8	 cmovne	 edi, eax

; 12299: 				d3 = 20;
; 12300: 			if (d0 & BC_F_ENCLOSE)		// ÁÅ´ÈôÑ‰Ωì

  005a8	f7 c3 00 00 00
	02		 test	 ebx, 33554432		; 02000000H
  005ae	b8 15 00 00 00	 mov	 eax, 21			; 00000015H
  005b3	0f 45 f8	 cmovne	 edi, eax

; 12301: 				d3 = 21;
; 12302: 			if (d0 & BC_I_ENCLOSE)		// ÂÜ∞ÈôÑ‰Ωì

  005b6	f7 c3 00 00 00
	04		 test	 ebx, 67108864		; 04000000H
  005bc	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  005c1	0f 45 f8	 cmovne	 edi, eax

; 12303: 				d3 = 22;
; 12304: 			if (d0 & BC_T_ENCLOSE)		// Èõ∑ÈôÑ‰Ωì

  005c4	f7 c3 00 00 00
	08		 test	 ebx, 134217728		; 08000000H
  005ca	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  005cf	0f 45 f8	 cmovne	 edi, eax

; 12305: 				d3 = 23;
; 12306: #ifdef _PROFESSION_ADDSKILL
; 12307: 			if (d0 & BC_WATER)

  005d2	f7 c3 00 00 00
	10		 test	 ebx, 268435456		; 10000000H
  005d8	b8 21 00 00 00	 mov	 eax, 33			; 00000021H
  005dd	0f 45 f8	 cmovne	 edi, eax

; 12308: 				d3 = 32;		// Ê∞¥ÈôÑ‰Ωì
; 12309: 			if (d0 & BC_WATER)
; 12310: 				d3 = 33;		// ÊÅêÊÉß
; 12311: 			//if (d0 & BC_F_I_T_ENCLOSE)  // ÁÅ´ÂÜ∞Èõ∑ÈôÑ‰Ωì
; 12312: 			//    d3 = 24;
; 12313: #endif
; 12314: #ifdef _PETSKILL_LER
; 12315: 			if (d0 & BC_CHANGE)

  005e0	f7 c3 00 00 00
	40		 test	 ebx, 1073741824		; 40000000H
  005e6	74 05		 je	 SHORT $LN65@set_bc

; 12316: 				d3 = 34; // Èõ∑Â∞îÂèòË∫´
; 12317: #endif
; 12318: #ifdef _PRO_KILLME
; 12319: 			if (d0 & BC_ANGER)
; 12320: 				d3 = 35; // ÊÄí
; 12321: #endif
; 12322: 
; 12323: #endif
; 12324: #ifdef _PETSKILL_LER
; 12325: 			if (d0 & BC_CHANGE)
; 12326: 				d3 = 34; // Èõ∑Â∞îÂèòË∫´

  005e8	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  005eb	eb 04		 jmp	 SHORT $LN79@set_bc
$LN65@set_bc:

; 12327: #endif
; 12328: 			if (d3)

  005ed	85 ff		 test	 edi, edi
  005ef	74 12		 je	 SHORT $LN66@set_bc
$LN79@set_bc:

; 12329: 			{	//?Óêπ?????
; 12330: 				set_single_jujutsu(d3, a1);		//ÓñïÓïíÓé£Óèû???

  005f1	56		 push	 esi
  005f2	57		 push	 edi
  005f3	e8 00 00 00 00	 call	 ?set_single_jujutsu@@YAXHPAUaction@@@Z ; set_single_jujutsu
  005f8	83 c4 08	 add	 esp, 8

; 12331: 				ATR_STATUS(a1) = d3;		//????????

  005fb	89 be 90 00 00
	00		 mov	 DWORD PTR [esi+144], edi

; 12332: 			}

  00601	eb 0a		 jmp	 SHORT $LN67@set_bc
$LN66@set_bc:

; 12333: 			else
; 12334: 				ATR_STATUS(a1) = 0;		//?????ÓíúÓêπ

  00603	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
$LN67@set_bc:

; 12335: 		}
; 12336: 		//Óî¥ÓíîÓúöÓòø????????
; 12337: 		if (ATR_ATTRIB_WORK(a1) == NULL)

  0060d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00610	83 b8 18 01 00
	00 00		 cmp	 DWORD PTR [eax+280], 0
  00617	75 11		 jne	 SHORT $LN69@set_bc

; 12338: 		{
; 12339: 			if (d0 & BC_REVERSE)		//ÓúöÓòø??

  00619	f7 c3 00 04 00
	00		 test	 ebx, 1024		; 00000400H
  0061f	74 09		 je	 SHORT $LN69@set_bc

; 12340: 				set_attrib_reverse(a1);		//Óî¥ÓíîÓúöÓòø???

  00621	56		 push	 esi
  00622	e8 00 00 00 00	 call	 ?set_attrib_reverse@@YAXPAUaction@@@Z ; set_attrib_reverse
  00627	83 c4 04	 add	 esp, 4
$LN69@set_bc:

; 12048: 	//ÓìñÓô¨????????
; 12049: 	while (BattleStatus[bc_pointer] != NULL)

  0062a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bc_pointer@@3HA
  0062f	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?BattleStatus@@3PADA[eax], 0
  00636	0f 85 f4 f9 ff
	ff		 jne	 $LL2@set_bc
  0063c	5f		 pop	 edi
  0063d	5e		 pop	 esi
  0063e	5b		 pop	 ebx
$LN3@set_bc:

; 12341: 		}
; 12342: 
; 12343: 
; 12344: 	}
; 12345: 	//ÓôëÓê∂Óïò??????
; 12346: 	if (ATR_VCT_NO(p_master) != 3)

  0063f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00644	ba 03 00 00 00	 mov	 edx, 3
  00649	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?action_inf@@3HA ; action_inf
  0064f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00652	38 10		 cmp	 BYTE PTR [eax], dl
  00654	0f 45 ca	 cmovne	 ecx, edx
  00657	89 0d 00 00 00
	00		 mov	 DWORD PTR ?action_inf@@3HA, ecx ; action_inf

; 12347: 		action_inf = 3;		//ÓôëÓê∂?ÓèùÓé∑?
; 12348: }

  0065d	c3		 ret	 0
?set_bc@@YAXXZ ENDP					; set_bc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_party_Œ√?@@YAXXZ
_TEXT	SEGMENT
_array$ = -404						; size = 400
__$ArrayPad$ = -4					; size = 4
?set_party_Œ√?@@YAXXZ PROC				; set_party_Œ√?, COMDAT

; 12017: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 12018: 	if (*gStrÂÖâÁéØ == 0)return;

  00013	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?gStrŒ√?@@3PADA, 0
  0001a	74 61		 je	 SHORT $LN1@set_party_

; 12019: 	ACTION *a1;
; 12020: 	char* array[100];
; 12021: 	int count = split_damage(gStrÂÖâÁéØ, '|', (int*)array, 50);

  0001c	53		 push	 ebx
  0001d	57		 push	 edi
  0001e	6a 32		 push	 50			; 00000032H
  00020	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _array$[ebp]
  00026	50		 push	 eax
  00027	6a 7c		 push	 124			; 0000007cH
  00029	68 00 00 00 00	 push	 OFFSET ?gStrŒ√?@@3PADA	; gStrŒ√?
  0002e	e8 00 00 00 00	 call	 ?split_damage@@YAHPADDPAHI@Z ; split_damage

; 12022: 	for (int i = 0; i < count/2; i++)

  00033	99		 cdq
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	2b c2		 sub	 eax, edx
  00039	33 ff		 xor	 edi, edi
  0003b	8b d8		 mov	 ebx, eax
  0003d	d1 fb		 sar	 ebx, 1
  0003f	85 db		 test	 ebx, ebx
  00041	7e 31		 jle	 SHORT $LN3@set_party_
  00043	56		 push	 esi
$LL4@set_party_:

; 12023: 	{
; 12024: 		int index = atoi(array[2 * i]);

  00044	ff b4 fd 6c fe
	ff ff		 push	 DWORD PTR _array$[ebp+edi*8]
  0004b	e8 00 00 00 00	 call	 _atoi

; 12025: 		int image = atoi(array[2 * i + 1]);

  00050	ff b4 fd 70 fe
	ff ff		 push	 DWORD PTR _array$[ebp+edi*8+4]
  00057	8b f0		 mov	 esi, eax
  00059	e8 00 00 00 00	 call	 _atoi

; 12026: 		a1 = p_party[index];
; 12027: 		set_ÂÖâÁéØ(image, a1);

  0005e	ff 34 b5 00 00
	00 00		 push	 DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?set_Œ√?@@YAXHPAUaction@@@Z ; set_Œ√?
  0006b	47		 inc	 edi
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	3b fb		 cmp	 edi, ebx
  00071	7c d1		 jl	 SHORT $LL4@set_party_
  00073	5e		 pop	 esi
$LN3@set_party_:

; 12028: 	}
; 12029: 	*gStrÂÖâÁéØ = 0;

  00074	5f		 pop	 edi
  00075	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gStrŒ√?@@3PADA, 0
  0007c	5b		 pop	 ebx
$LN1@set_party_:

; 12030: }

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	33 cd		 xor	 ecx, ebp
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?set_party_Œ√?@@YAXXZ ENDP				; set_party_Œ√?
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_bc_asc_ridepet@@YAXPAUaction@@@Z
_TEXT	SEGMENT
tv208 = -4						; size = 4
_d0$ = 8						; size = 1
_a1$ = 8						; size = 4
?get_bc_asc_ridepet@@YAXPAUaction@@@Z PROC		; get_bc_asc_ridepet, COMDAT

; 11985: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 11986: 	char d0;
; 11987: 	char *a2;
; 11988: 
; 11989: 	a2 = ATR_PETNAME(a1);
; 11990: 	while (1)
; 11991: 	{
; 11992: 		d0 = BattleStatus[bc_pointer++];		//?Óû∞?Óéï?Óèù?

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bc_pointer@@3HA
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  0000c	53		 push	 ebx
  0000d	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  00013	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR ?BattleStatus@@3PADA[eax]
  00019	40		 inc	 eax
  0001a	89 4d fc	 mov	 DWORD PTR tv208[ebp], ecx
  0001d	88 5d 08	 mov	 BYTE PTR _d0$[ebp], bl
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?bc_pointer@@3HA, eax
  00025	56		 push	 esi
  00026	8b f1		 mov	 esi, ecx
  00028	57		 push	 edi

; 11993: 		if (d0 == NULL)

  00029	84 db		 test	 bl, bl
  0002b	74 3c		 je	 SHORT $LN11@get_bc_asc
  0002d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__IsDBCSLeadByte@4
$LL2@get_bc_asc:

; 11996: 			break;
; 11997: 		}
; 11998: 		//?ÓìÅ???
; 11999: 		if (d0 == '|')

  00033	80 fb 7c	 cmp	 bl, 124			; 0000007cH
  00036	74 4a		 je	 SHORT $LN15@get_bc_asc

; 12000: 			break;
; 12001: 		if (IsDBCSLeadByte(d0))

  00038	ff 75 08	 push	 DWORD PTR _d0$[ebp]
  0003b	ff d7		 call	 edi
  0003d	88 1e		 mov	 BYTE PTR [esi], bl
  0003f	46		 inc	 esi
  00040	85 c0		 test	 eax, eax
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bc_pointer@@3HA
  00047	74 0a		 je	 SHORT $LN7@get_bc_asc

; 12002: 		{
; 12003: 			*a2++ = d0;
; 12004: 			*a2++ = BattleStatus[bc_pointer++];

  00049	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?BattleStatus@@3PADA[eax]
  0004f	88 0e		 mov	 BYTE PTR [esi], cl
  00051	46		 inc	 esi
  00052	40		 inc	 eax
$LN7@get_bc_asc:

; 11986: 	char d0;
; 11987: 	char *a2;
; 11988: 
; 11989: 	a2 = ATR_PETNAME(a1);
; 11990: 	while (1)
; 11991: 	{
; 11992: 		d0 = BattleStatus[bc_pointer++];		//?Óû∞?Óéï?Óèù?

  00053	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR ?BattleStatus@@3PADA[eax]
  00059	40		 inc	 eax
  0005a	88 5d 08	 mov	 BYTE PTR _d0$[ebp], bl
  0005d	a3 00 00 00 00	 mov	 DWORD PTR ?bc_pointer@@3HA, eax

; 11993: 		if (d0 == NULL)

  00062	84 db		 test	 bl, bl
  00064	75 cd		 jne	 SHORT $LL2@get_bc_asc
  00066	8b 4d fc	 mov	 ecx, DWORD PTR tv208[ebp]
$LN11@get_bc_asc:

; 11994: 		{	//Óé∑???
; 11995: 			bc_pointer--;

  00069	48		 dec	 eax

; 12005: 		}
; 12006: 		else
; 12007: 			*a2++ = d0;
; 12008: 	}
; 12009: 	//Óé∑????
; 12010: 	*a2 = 0;

  0006a	c6 06 00	 mov	 BYTE PTR [esi], 0

; 12011: 	makeStringFromEscaped(ATR_PETNAME(a1));

  0006d	51		 push	 ecx
  0006e	a3 00 00 00 00	 mov	 DWORD PTR ?bc_pointer@@3HA, eax
  00073	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  00078	83 c4 04	 add	 esp, 4
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx

; 12012: }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
$LN15@get_bc_asc:

; 11996: 			break;
; 11997: 		}
; 11998: 		//?ÓìÅ???
; 11999: 		if (d0 == '|')

  00082	8b 4d fc	 mov	 ecx, DWORD PTR tv208[ebp]

; 12011: 	makeStringFromEscaped(ATR_PETNAME(a1));

  00085	51		 push	 ecx
  00086	c6 06 00	 mov	 BYTE PTR [esi], 0
  00089	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  0008e	83 c4 04	 add	 esp, 4
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx

; 12012: }

  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?get_bc_asc_ridepet@@YAXPAUaction@@@Z ENDP		; get_bc_asc_ridepet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_bc_asc@@YAXPAUaction@@H@Z
_TEXT	SEGMENT
tv316 = -8						; size = 4
_d0$ = -4						; size = 1
_a1$ = 8						; size = 4
_flg$ = 12						; size = 4
?get_bc_asc@@YAXPAUaction@@H@Z PROC			; get_bc_asc, COMDAT

; 11947: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 11948: 	char d0;
; 11949: 	char *a2;
; 11950: 
; 11951: 	if (flg == 0)
; 11952: 		a2 = ATR_HANDLE(a1);
; 11953: 	else
; 11954: 		a2 = ATR_TITLE(a1);
; 11955: 	while (1)
; 11956: 	{
; 11957: 		d0 = BattleStatus[bc_pointer++];		//?Óû∞?Óéï?Óèù?

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _flg$[ebp]
  00009	b8 55 00 00 00	 mov	 eax, 85			; 00000055H
  0000e	8b 55 08	 mov	 edx, DWORD PTR _a1$[ebp]
  00011	85 c9		 test	 ecx, ecx
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	bf 38 00 00 00	 mov	 edi, 56			; 00000038H
  0001b	8b f7		 mov	 esi, edi
  0001d	0f 45 f0	 cmovne	 esi, eax
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bc_pointer@@3HA
  00025	03 f2		 add	 esi, edx
  00027	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR ?BattleStatus@@3PADA[eax]
  0002d	40		 inc	 eax
  0002e	88 5d fc	 mov	 BYTE PTR _d0$[ebp], bl
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?bc_pointer@@3HA, eax

; 11958: 		if (d0 == NULL)

  00036	84 db		 test	 bl, bl
  00038	74 46		 je	 SHORT $LN15@get_bc_asc
  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__IsDBCSLeadByte@4
  0003f	89 45 f8	 mov	 DWORD PTR tv316[ebp], eax
  00042	eb 03		 jmp	 SHORT $LN2@get_bc_asc
$LL19@get_bc_asc:
  00044	8b 45 f8	 mov	 eax, DWORD PTR tv316[ebp]
$LN2@get_bc_asc:

; 11961: 			break;
; 11962: 		}
; 11963: 		//?ÓìÅ???
; 11964: 		if (d0 == '|')

  00047	80 fb 7c	 cmp	 bl, 124			; 0000007cH
  0004a	74 3c		 je	 SHORT $LN20@get_bc_asc

; 11965: 			break;
; 11966: 		if (IsDBCSLeadByte(d0))

  0004c	ff 75 fc	 push	 DWORD PTR _d0$[ebp]
  0004f	ff d0		 call	 eax
  00051	88 1e		 mov	 BYTE PTR [esi], bl
  00053	46		 inc	 esi
  00054	85 c0		 test	 eax, eax
  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bc_pointer@@3HA
  0005b	74 0a		 je	 SHORT $LN9@get_bc_asc

; 11967: 		{
; 11968: 			*a2++ = d0;
; 11969: 			*a2++ = BattleStatus[bc_pointer++];

  0005d	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?BattleStatus@@3PADA[eax]
  00063	88 0e		 mov	 BYTE PTR [esi], cl
  00065	46		 inc	 esi
  00066	40		 inc	 eax
$LN9@get_bc_asc:

; 11948: 	char d0;
; 11949: 	char *a2;
; 11950: 
; 11951: 	if (flg == 0)
; 11952: 		a2 = ATR_HANDLE(a1);
; 11953: 	else
; 11954: 		a2 = ATR_TITLE(a1);
; 11955: 	while (1)
; 11956: 	{
; 11957: 		d0 = BattleStatus[bc_pointer++];		//?Óû∞?Óéï?Óèù?

  00067	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR ?BattleStatus@@3PADA[eax]
  0006d	40		 inc	 eax
  0006e	88 5d fc	 mov	 BYTE PTR _d0$[ebp], bl
  00071	a3 00 00 00 00	 mov	 DWORD PTR ?bc_pointer@@3HA, eax

; 11958: 		if (d0 == NULL)

  00076	84 db		 test	 bl, bl
  00078	75 ca		 jne	 SHORT $LL19@get_bc_asc
  0007a	8b 4d 0c	 mov	 ecx, DWORD PTR _flg$[ebp]
  0007d	8b 55 08	 mov	 edx, DWORD PTR _a1$[ebp]
$LN15@get_bc_asc:

; 11959: 		{	//Óé∑???
; 11960: 			bc_pointer--;

  00080	48		 dec	 eax
  00081	a3 00 00 00 00	 mov	 DWORD PTR ?bc_pointer@@3HA, eax

; 11961: 			break;
; 11962: 		}
; 11963: 		//?ÓìÅ???
; 11964: 		if (d0 == '|')

  00086	eb 06		 jmp	 SHORT $LN16@get_bc_asc
$LN20@get_bc_asc:
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _flg$[ebp]
  0008b	8b 55 08	 mov	 edx, DWORD PTR _a1$[ebp]
$LN16@get_bc_asc:

; 11970: 		}
; 11971: 		else
; 11972: 			*a2++ = d0;
; 11973: 	}
; 11974: 	//Óé∑????
; 11975: 	*a2 = 0;
; 11976: 	if (flg == 0)
; 11977: 		makeStringFromEscaped(ATR_HANDLE(a1));
; 11978: 	else
; 11979: 		makeStringFromEscaped(ATR_TITLE(a1));
; 11980: }

  0008e	85 c9		 test	 ecx, ecx
  00090	c6 06 00	 mov	 BYTE PTR [esi], 0
  00093	b8 55 00 00 00	 mov	 eax, 85			; 00000055H
  00098	0f 45 f8	 cmovne	 edi, eax
  0009b	03 fa		 add	 edi, edx
  0009d	57		 push	 edi
  0009e	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  000a3	83 c4 04	 add	 esp, 4
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
?get_bc_asc@@YAXPAUaction@@H@Z ENDP			; get_bc_asc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_bc_num@@YAHXZ
_TEXT	SEGMENT
tv289 = -4						; size = 4
?get_bc_num@@YAHXZ PROC					; get_bc_num, COMDAT

; 11902: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 11903: 	int d0, d1;
; 11904: 
; 11905: 	while (1)
; 11906: 	{
; 11907: 		d0 = BattleStatus[bc_pointer++];		//?Óû∞?Óéï?Óèù?

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bc_pointer@@3HA
  0000a	56		 push	 esi
  0000b	0f be 81 00 00
	00 00		 movsx	 eax, BYTE PTR ?BattleStatus@@3PADA[ecx]
  00012	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00015	8b f2		 mov	 esi, edx

; 11908: 		if (d0 == NULL)

  00017	85 c0		 test	 eax, eax
  00019	74 27		 je	 SHORT $LN22@get_bc_num
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@get_bc_num:

; 11912: 		}
; 11913: 		if (d0 >= '0' && d0 <= '9')		//???

  00020	83 f8 30	 cmp	 eax, 48			; 00000030H
  00023	7c 05		 jl	 SHORT $LN7@get_bc_num
  00025	83 f8 39	 cmp	 eax, 57			; 00000039H
  00028	7e 28		 jle	 SHORT $LN23@get_bc_num
$LN7@get_bc_num:

; 11914: 			break;						//??????
; 11915: 		if (d0 >= 'A' && d0 <= 'F')		//?????

  0002a	83 f8 41	 cmp	 eax, 65			; 00000041H
  0002d	7c 05		 jl	 SHORT $LN8@get_bc_num
  0002f	83 f8 46	 cmp	 eax, 70			; 00000046H
  00032	7e 1e		 jle	 SHORT $LN23@get_bc_num
$LN8@get_bc_num:

; 11903: 	int d0, d1;
; 11904: 
; 11905: 	while (1)
; 11906: 	{
; 11907: 		d0 = BattleStatus[bc_pointer++];		//?Óû∞?Óéï?Óèù?

  00034	0f be 82 00 00
	00 00		 movsx	 eax, BYTE PTR ?BattleStatus@@3PADA[edx]
  0003b	42		 inc	 edx
  0003c	8b f2		 mov	 esi, edx

; 11908: 		if (d0 == NULL)

  0003e	85 c0		 test	 eax, eax
  00040	75 de		 jne	 SHORT $LL2@get_bc_num
$LN22@get_bc_num:

; 11909: 		{	//Óé∑???
; 11910: 			bc_pointer--;

  00042	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00045	a3 00 00 00 00	 mov	 DWORD PTR ?bc_pointer@@3HA, eax

; 11911: 			return -1;

  0004a	83 c8 ff	 or	 eax, -1
  0004d	5e		 pop	 esi

; 11943: }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN23@get_bc_num:

; 11916: 			break;						//??????
; 11917: 	}
; 11918: 	if (d0 >= 'A')		//?????
; 11919: 		d1 = d0 - 'A' + 10;
; 11920: 	else
; 11921: 		d1 = d0 - '0';
; 11922: 
; 11923: 	while (1)
; 11924: 	{
; 11925: 		d0 = BattleStatus[bc_pointer++];		//?Óû∞????Óéï?Óèù?

  00052	0f be 92 00 00
	00 00		 movsx	 edx, BYTE PTR ?BattleStatus@@3PADA[edx]
  00059	83 f8 41	 cmp	 eax, 65			; 00000041H
  0005c	53		 push	 ebx
  0005d	bb 30 00 00 00	 mov	 ebx, 48			; 00000030H
  00062	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00067	0f 4c cb	 cmovl	 ecx, ebx
  0006a	89 5d fc	 mov	 DWORD PTR tv289[ebp], ebx
  0006d	46		 inc	 esi
  0006e	2b c1		 sub	 eax, ecx
  00070	89 35 00 00 00
	00		 mov	 DWORD PTR ?bc_pointer@@3HA, esi
  00076	8b de		 mov	 ebx, esi
  00078	57		 push	 edi

; 11926: 		if (d0 == NULL)

  00079	85 d2		 test	 edx, edx
  0007b	74 3e		 je	 SHORT $LN25@get_bc_num
  0007d	0f 1f 00	 npad	 3
$LL4@get_bc_num:

; 11929: 			break;
; 11930: 		}
; 11931: 		if (d0 < '0' || d0 > '9')

  00080	8b fa		 mov	 edi, edx
  00082	83 fa 30	 cmp	 edx, 48			; 00000030H
  00085	7c 05		 jl	 SHORT $LN13@get_bc_num
  00087	83 fa 39	 cmp	 edx, 57			; 00000039H
  0008a	7e 08		 jle	 SHORT $LN14@get_bc_num
$LN13@get_bc_num:

; 11932: 		{	//??????
; 11933: 			if (d0 < 'A' || d0 > 'F')		//????????

  0008c	8d 4a bf	 lea	 ecx, DWORD PTR [edx-65]
  0008f	83 f9 05	 cmp	 ecx, 5
  00092	77 30		 ja	 SHORT $LN26@get_bc_num
$LN14@get_bc_num:

; 11916: 			break;						//??????
; 11917: 	}
; 11918: 	if (d0 >= 'A')		//?????
; 11919: 		d1 = d0 - 'A' + 10;
; 11920: 	else
; 11921: 		d1 = d0 - '0';
; 11922: 
; 11923: 	while (1)
; 11924: 	{
; 11925: 		d0 = BattleStatus[bc_pointer++];		//?Óû∞????Óéï?Óèù?

  00094	0f be 96 00 00
	00 00		 movsx	 edx, BYTE PTR ?BattleStatus@@3PADA[esi]
  0009b	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  000a0	46		 inc	 esi
  000a1	83 ff 41	 cmp	 edi, 65			; 00000041H
  000a4	89 35 00 00 00
	00		 mov	 DWORD PTR ?bc_pointer@@3HA, esi
  000aa	8b de		 mov	 ebx, esi
  000ac	0f 4c 4d fc	 cmovl	 ecx, DWORD PTR tv289[ebp]

; 11934: 				break;						//Óé∑?
; 11935: 		}
; 11936: 		d1 = d1 << 4;		//???????

  000b0	c1 e0 04	 shl	 eax, 4
  000b3	2b c1		 sub	 eax, ecx
  000b5	03 c7		 add	 eax, edi
  000b7	85 d2		 test	 edx, edx
  000b9	75 c5		 jne	 SHORT $LL4@get_bc_num
$LN25@get_bc_num:

; 11927: 		{	//Óé∑???
; 11928: 			bc_pointer--;

  000bb	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  000be	89 0d 00 00 00
	00		 mov	 DWORD PTR ?bc_pointer@@3HA, ecx
$LN26@get_bc_num:

; 11937: 		if (d0 >= 'A')		//?????
; 11938: 			d1 += d0 - 'A' + 10;
; 11939: 		else
; 11940: 			d1 += d0 - '0';
; 11941: 	}
; 11942: 	return d1;

  000c4	5f		 pop	 edi
  000c5	5b		 pop	 ebx
  000c6	5e		 pop	 esi

; 11943: }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
?get_bc_num@@YAHXZ ENDP					; get_bc_num
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?master@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d3$2$ = -28						; size = 4
tv5562 = -28						; size = 4
_a2$5$ = -24						; size = 4
_a3$1$ = -24						; size = 4
_param$1$ = -24						; size = 4
tv5569 = -24						; size = 4
_d7$3$ = -20						; size = 4
_d7$1$ = -20						; size = 4
_d3$1$ = -16						; size = 4
_a3$2$ = -16						; size = 4
_a2$1$ = -12						; size = 4
_d1$ = -8						; size = 4
_d0$ = -4						; size = 4
_d2$2$ = 8						; size = 4
_d2$1$ = 8						; size = 4
_effect_anim$1$ = 8					; size = 4
tv5504 = 8						; size = 4
_a2$ = 8						; size = 4
_a0$ = 8						; size = 4
?master@@YAXPAUaction@@@Z PROC				; master, COMDAT

; 5068 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5069 : 	ACTION *a1, *a2, *a3;
; 5070 : 	int d0, d1, d2, d3, d6, d7;
; 5071 : 	int z = 0;
; 5072 : 	int jjj = 0;
; 5073 : 	int command_no;
; 5074 : 	int sav_command_point, castflg = 0;
; 5075 : 	int petfall_flg = 0;
; 5076 : 
; 5077 : 	static int ÂàùÂßãÂåñ = 0;
; 5078 : 
; 5079 : 	//Â±ûÊÄßË°®Á§∫
; 5080 : 	disp_attrib(a0);

  00009	8b 7d 08	 mov	 edi, DWORD PTR _a0$[ebp]
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 ?disp_attrib@@YAXPAUaction@@@Z ; disp_attrib

; 5081 : 	if (ATR_VCT_NO(a0) == 0)	// ÂëΩ‰ª§Á°ÆËÆ§

  00012	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00015	83 c4 04	 add	 esp, 4
  00018	89 75 e8	 mov	 DWORD PTR tv5569[ebp], esi
  0001b	8a 06		 mov	 al, BYTE PTR [esi]
  0001d	84 c0		 test	 al, al
  0001f	75 0c		 jne	 SHORT $LN67@master

; 5082 : 	{
; 5083 : 		if (BattleCmd[0] == NULL)		//ÊàòÊñóÂëΩ‰ª§Á°ÆËÆ§

  00021	38 05 00 00 00
	00		 cmp	 BYTE PTR ?BattleCmd@@3PADA, al
  00027	0f 84 51 18 00
	00		 je	 $master_500$370
$LN67@master:

; 5084 : 			goto master_500;
; 5085 : 	}
; 5086 : 	switch (ATR_VCT_NO(a0))

  0002d	0f b6 c0	 movzx	 eax, al
  00030	83 f8 04	 cmp	 eax, 4
  00033	0f 87 45 18 00
	00		 ja	 $master_500$370
  00039	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN353@master[eax*4]
$LN69@master:

; 5087 : 	{
; 5088 : 	case 0:
; 5089 : 		sav_command_point = command_point;
; 5090 : 		command_no = get_command();

  00040	e8 00 00 00 00	 call	 ?get_command@@YADXZ	; get_command
  00045	0f be d8	 movsx	 ebx, al

; 5091 : 		if (command_no == -1){

  00048	83 fb ff	 cmp	 ebx, -1
  0004b	0f 84 e9 16 00
	00		 je	 $LN352@master

; 5092 : 			ATR_VCT_NO(a0) = 4;
; 5093 : 			command_point = 0;
; 5094 : 			break;
; 5095 : 		}
; 5096 : 		if (command_no == ATT_KANJI){

  00051	83 fb 4b	 cmp	 ebx, 75			; 0000004bH
  00054	0f 85 f2 00 00
	00		 jne	 $LN71@master

; 5097 : 			if (p_kanji != NULL){

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_kanji@@3PAUaction@@A
  0005f	85 c0		 test	 eax, eax
  00061	74 10		 je	 SHORT $LN72@master

; 5098 : 				a1 = ATR_BODY_WORK(0, p_kanji);
; 5099 : 				DeathAction(a1);

  00063	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00066	ff 70 04	 push	 DWORD PTR [eax+4]
  00069	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0006e	83 c4 04	 add	 esp, 4

; 5100 : 			}else{

  00071	eb 1c		 jmp	 SHORT $LN74@master
$LN72@master:

; 5101 : 				p_kanji = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  00073	68 60 02 00 00	 push	 608			; 00000260H
  00078	6a 47		 push	 71			; 00000047H
  0007a	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0007f	83 c4 08	 add	 esp, 8
  00082	a3 00 00 00 00	 mov	 DWORD PTR ?p_kanji@@3PAUaction@@A, eax

; 5102 : 				if (p_kanji == NULL)

  00087	85 c0		 test	 eax, eax
  00089	0f 84 f7 18 00
	00		 je	 $LN64@master
$LN74@master:

; 5103 : 					return;
; 5104 : 			}
; 5105 : 			//‰∏≠ÊñáBOXÂÅöÊàê
; 5106 : 			a1 = MakeWindowDisp(640 - 4 - 64 * 4, 4, 4, 2, 0, 2);

  0008f	6a 02		 push	 2
  00091	6a 00		 push	 0
  00093	6a 02		 push	 2
  00095	6a 04		 push	 4
  00097	6a 04		 push	 4
  00099	68 7c 01 00 00	 push	 380			; 0000017cH
  0009e	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  000a3	83 c4 18	 add	 esp, 24			; 00000018H

; 5107 : 			//ËÆ∞ÂøÜ‰Ωì‰∏çË∂≥‰∫ßÁîüÂ§±Ë¥•
; 5108 : 			if (a1 == NULL)

  000a6	85 c0		 test	 eax, eax
  000a8	0f 84 d8 18 00
	00		 je	 $LN64@master

; 5109 : 				return;
; 5110 : 			ATR_BODY_WORK(0, p_kanji) = a1;

  000ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?p_kanji@@3PAUaction@@A

; 5111 : 			ATR_NAME(p_kanji) = disp_kanji;
; 5112 : 			ATR_ATTRIB(p_kanji) = ACT_ATR_HIDE;
; 5113 : 			play_se(202, 320, 240);

  000b4	68 f0 00 00 00	 push	 240			; 000000f0H
  000b9	68 40 01 00 00	 push	 320			; 00000140H
  000be	68 ca 00 00 00	 push	 202			; 000000caH
  000c3	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  000c6	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000c9	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?disp_kanji@@YAXPAUaction@@@Z ; disp_kanji
  000d0	c7 82 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [edx+164], 2
  000da	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 5114 : 			command_point++;

  000df	ff 05 00 00 00
	00		 inc	 DWORD PTR ?command_point@@3HA
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5115 : 			get_command_asc();

  000e8	e8 00 00 00 00	 call	 ?get_command_asc@@YAXXZ	; get_command_asc

; 5116 : 			d0 = 60;

  000ed	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  000f2	b8 00 00 00 00	 mov	 eax, OFFSET ?kanji_buf@@3PAY0IA@DA
  000f7	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL6@master:

; 5118 : 				if (kanji_buf[d7][0])

  00100	80 38 00	 cmp	 BYTE PTR [eax], 0
  00103	74 03		 je	 SHORT $LN4@master

; 5119 : 					d0 += 60;

  00105	83 c1 3c	 add	 ecx, 60			; 0000003cH
$LN4@master:

; 5117 : 			for (d7 = 0; d7 < 4; d7++){

  00108	83 e8 80	 sub	 eax, -128		; ffffff80H
  0010b	3d 00 02 00 00	 cmp	 eax, OFFSET ?kanji_buf@@3PAY0IA@DA+512
  00110	7c ee		 jl	 SHORT $LL6@master

; 5120 : 			}
; 5121 : 			ATR_INT_WORK0(p_kanji) = d0;

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_kanji@@3PAUaction@@A
  00117	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
  0011a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0011d	89 88 24 01 00
	00		 mov	 DWORD PTR [eax+292], ecx

; 5122 : 			ATR_VCT_NO(a0) = 1;

  00123	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00126	c6 00 01	 mov	 BYTE PTR [eax], 1

; 5123 : 			ATR_BODY_CNT(a0) = 1;

  00129	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0012c	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5124 : 			ATR_DAMAGE(a0) = 0;

  00130	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00133	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 5125 : 			ATR_PET_DAMAGE(a0) = 0;

  0013a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0013d	c7 80 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+548], 0

; 5126 : 			break;

  00147	e9 32 17 00 00	 jmp	 $master_500$370
$LN71@master:

; 5127 : 		}
; 5128 : 		if (command_no == ATT_EFFECT){

  0014c	83 fb 6a	 cmp	 ebx, 106		; 0000006aH
  0014f	75 78		 jne	 SHORT $LN77@master

; 5129 : #ifdef __NEW_BATTLE_EFFECT
; 5130 : 			// Bj | target(who) | effect(effect no) | effect_anim | param | .... | FF
; 5131 : 			ACTION *target = NULL;
; 5132 : 			int who;
; 5133 : 			int effect;
; 5134 : 			int effect_anim;
; 5135 : 			int param;
; 5136 : 
; 5137 : 			ATR_VCT_NO(a0) = 1;

  00151	c6 06 01	 mov	 BYTE PTR [esi], 1

; 5138 : 			while (1){
; 5139 : 				who = get_num();

  00154	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00159	8b f0		 mov	 esi, eax

; 5140 : 				if (who == 255)

  0015b	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  00161	0f 84 17 17 00
	00		 je	 $master_500$370
$LL7@master:

; 5141 : 					break;
; 5142 : 				effect = get_num();			//ÁâπÊïàÁöÑÁºñÂè∑

  00167	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0016c	8b d8		 mov	 ebx, eax

; 5143 : 				effect_anim = get_num();	//ÁâπÊïàÁöÑÂä®Áîª

  0016e	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00173	89 45 08	 mov	 DWORD PTR _effect_anim$1$[ebp], eax

; 5144 : 				param = get_num();			//ÂèÇÊï∞

  00176	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0017b	89 45 e8	 mov	 DWORD PTR _param$1$[ebp], eax

; 5145 : 
; 5146 : 				target = NULL;
; 5147 : 				if (who < BATTLKPKPLYAERNUM)

  0017e	83 fe 14	 cmp	 esi, 20			; 00000014H
  00181	7d 32		 jge	 SHORT $LN80@master

; 5148 : 					target = p_party[who];

  00183	8b 14 b5 00 00
	00 00		 mov	 edx, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]

; 5149 : 				if (target){

  0018a	85 d2		 test	 edx, edx
  0018c	74 27		 je	 SHORT $LN80@master

; 5150 : 					ATR_EFFECT_FLAG(target) = effect;

  0018e	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00191	89 99 48 02 00
	00		 mov	 DWORD PTR [ecx+584], ebx

; 5151 : 					ATR_EFFECT_ANIM(target) = effect_anim;

  00197	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0019a	8b 4d 08	 mov	 ecx, DWORD PTR _effect_anim$1$[ebp]
  0019d	89 88 4c 02 00
	00		 mov	 DWORD PTR [eax+588], ecx

; 5152 : 					ATR_EFFECT_PARAM(target) = param;

  001a3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001a6	8b 4d e8	 mov	 ecx, DWORD PTR _param$1$[ebp]
  001a9	89 88 50 02 00
	00		 mov	 DWORD PTR [eax+592], ecx

; 5153 : 					ATR_BODY_CNT(a0)++;

  001af	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001b2	fe 40 54	 inc	 BYTE PTR [eax+84]
$LN80@master:

; 5138 : 			while (1){
; 5139 : 				who = get_num();

  001b5	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  001ba	8b f0		 mov	 esi, eax

; 5140 : 				if (who == 255)

  001bc	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  001c2	75 a3		 jne	 SHORT $LL7@master

; 5154 : 				}
; 5155 : 			}
; 5156 : #endif
; 5157 : 			break;

  001c4	e9 b5 16 00 00	 jmp	 $master_500$370
$LN77@master:

; 5158 : 		}
; 5159 : #ifdef _PETSKILL_BATTLE_MODEL
; 5160 : 		if (command_no == ATT_BATTLE_MODEL)			// ÂÆ†Áâ©ÊäÄËÉΩÊàòÊñóÊ®°ÁªÑ

  001c9	83 fb 62	 cmp	 ebx, 98			; 00000062H
  001cc	0f 85 ed 03 00
	00		 jne	 $LN81@master

; 5161 : 		{
; 5162 : 			ATR_VCT_NO(a0) = 1;

  001d2	c6 06 01	 mov	 BYTE PTR [esi], 1
  001d5	be 00 00 00 00	 mov	 esi, OFFSET ?p_party@@3PAPAUaction@@A

; 5163 : 			ATR_PET_DAMAGE(a0) = 0;

  001da	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001dd	c7 80 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+548], 0
$LL11@master:

; 5164 : 			for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)
; 5165 : 			{
; 5166 : 				ATR_SYNC_FLG(p_party[d7]) = 0;

  001e7	8b 06		 mov	 eax, DWORD PTR [esi]

; 5167 : 				ATR_ATTACK_KIND(0, p_party[d7]) = 0;
; 5168 : 				ATR_ATTACK_KIND(1, p_party[d7]) = 0;
; 5169 : 				ATR_ATTACK_POW(0, p_party[d7]) = 0;
; 5170 : 				ATR_ATTACK_PET_POW(0, p_party[d7]) = 0;
; 5171 : 				ATR_MPDAMAGE(p_party[d7]) = 0;
; 5172 : 				ATR_MPDFLG(p_party[d7]) = 0;
; 5173 : 				ATR_ADDHP(p_party[d7]) = 0;
; 5174 : 				ATR_ADDHPFLG(p_party[d7])=0;
; 5175 : 				ATR_SHOWADDHP(p_party[d7])=0;
; 5176 : 				ATR_LONG_WORK(0, p_party[d7]) = 0;
; 5177 : 				ATR_BATTLE_MODEL(p_party[d7]) = 0;
; 5178 : 				memset(&ATR_BODY_WORK(0, p_party[d7]), 0, sizeof(ACTION*) * 20);

  001e9	6a 50		 push	 80			; 00000050H
  001eb	6a 00		 push	 0
  001ed	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001f0	c6 80 23 01 00
	00 00		 mov	 BYTE PTR [eax+291], 0
  001f7	8b 06		 mov	 eax, DWORD PTR [esi]
  001f9	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001fc	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0
  00203	8b 06		 mov	 eax, DWORD PTR [esi]
  00205	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00208	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0
  0020f	8b 06		 mov	 eax, DWORD PTR [esi]
  00211	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00214	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0
  0021e	8b 06		 mov	 eax, DWORD PTR [esi]
  00220	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00223	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  0022d	8b 06		 mov	 eax, DWORD PTR [esi]
  0022f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00232	c7 80 30 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+560], 0
  0023c	8b 06		 mov	 eax, DWORD PTR [esi]
  0023e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00241	c7 80 38 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+568], 0
  0024b	8b 06		 mov	 eax, DWORD PTR [esi]
  0024d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00250	c7 80 34 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+564], 0
  0025a	8b 06		 mov	 eax, DWORD PTR [esi]
  0025c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0025f	c7 80 3c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+572], 0
  00269	8b 06		 mov	 eax, DWORD PTR [esi]
  0026b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0026e	c7 80 40 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+576], 0
  00278	8b 06		 mov	 eax, DWORD PTR [esi]
  0027a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0027d	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  00287	8b 06		 mov	 eax, DWORD PTR [esi]
  00289	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0028c	c7 80 58 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+600], 0
  00296	8b 06		 mov	 eax, DWORD PTR [esi]
  00298	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0029b	83 c0 04	 add	 eax, 4
  0029e	50		 push	 eax
  0029f	e8 00 00 00 00	 call	 _memset

; 5179 : 				memset(p_missile, 0, sizeof(p_missile));

  002a4	6a 54		 push	 84			; 00000054H
  002a6	6a 00		 push	 0
  002a8	68 00 00 00 00	 push	 OFFSET ?p_missile@@3PAPAUaction@@A
  002ad	e8 00 00 00 00	 call	 _memset
  002b2	83 c6 04	 add	 esi, 4
  002b5	83 c4 18	 add	 esp, 24			; 00000018H
  002b8	81 fe 50 00 00
	00		 cmp	 esi, OFFSET ?p_party@@3PAPAUaction@@A+80
  002be	0f 8c 23 ff ff
	ff		 jl	 $LL11@master

; 5180 : 			}
; 5181 : 			d7 = 0;

  002c4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _d7$1$[ebp], 0

; 5182 : 			// ÂÖàÂèñÂá∫ÊîªÂáªÁöÑÂÆ†Áâ©ÁºñÂè∑
; 5183 : 			d0 = get_num();

  002cb	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  002d0	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5184 : 			a3 = p_party[d0];
; 5185 : 			// Âà§Êñ≠ÊîªÂáªÊñπÊòØÂ∑¶‰∏äËøòÂè≥‰∏ãÊù•??ÂàùÂßã‰ΩçÁΩÆ
; 5186 : 			if (ATR_GROUP_FLG(a3) == 0){

  002d3	33 d2		 xor	 edx, edx
  002d5	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  002dc	89 45 e8	 mov	 DWORD PTR _a3$1$[ebp], eax
  002df	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  002e2	8a 48 5e	 mov	 cl, BYTE PTR [eax+94]
  002e5	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  002ea	84 c9		 test	 cl, cl
  002ec	0f 44 c2	 cmove	 eax, edx
  002ef	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5187 : 				d2 = 3;	// Âè≥‰∏ã
; 5188 : 				d0 = 0;
; 5189 : 			}else{
; 5190 : 				d2 = 7; // Â∑¶‰∏ä
; 5191 : 				d0 = 10;
; 5192 : 			}
; 5193 : 			// ÂèñÂá∫ÁõÆÊ†áÊîªÂáªÁâ©‰ª∂ÁºñÂè∑
; 5194 : 			a1 = NULL;

  002f2	33 c0		 xor	 eax, eax
  002f4	84 c9		 test	 cl, cl
  002f6	0f 95 c0	 setne	 al
  002f9	33 db		 xor	 ebx, ebx
  002fb	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [eax*4+3]
  00302	89 45 e4	 mov	 DWORD PTR tv5562[ebp], eax

; 5195 : 			while ((d6 = get_num()) != 255){

  00305	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0030a	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0030f	0f 84 6f 02 00
	00		 je	 $LN287@master

; 5187 : 				d2 = 3;	// Âè≥‰∏ã
; 5188 : 				d0 = 0;
; 5189 : 			}else{
; 5190 : 				d2 = 7; // Â∑¶‰∏ä
; 5191 : 				d0 = 10;
; 5192 : 			}
; 5193 : 			// ÂèñÂá∫ÁõÆÊ†áÊîªÂáªÁâ©‰ª∂ÁºñÂè∑
; 5194 : 			a1 = NULL;

  00315	8d 7b 01	 lea	 edi, DWORD PTR [ebx+1]
  00318	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL12@master:

; 5196 : 				a1 = p_party[d6];

  00320	8b 1c 85 00 00
	00 00		 mov	 ebx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 5197 : 				if (ATR_VCT_NO(a1) != 55)

  00327	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0032a	80 38 37	 cmp	 BYTE PTR [eax], 55	; 00000037H
  0032d	74 0a		 je	 SHORT $LN84@master

; 5198 : 					ATR_FIRST_FLG(a1) = 0;

  0032f	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  00336	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
$LN84@master:

; 5199 : 				ATR_ATTACK_KIND(2, a1) = 0;

  00339	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0

; 5200 : 				d3 = get_num();			// ÂèñÂá∫ÊîªÂáªÁâ©‰ª∂ÁºñÂè∑

  00340	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00345	89 45 f0	 mov	 DWORD PTR _d3$1$[ebp], eax

; 5201 : 				// Âà§Êñ≠ p_missile[d3] ÊúâÊ≤°ÊúâÂú®‰ΩøÁî®
; 5202 : 				// Êúâ‰ΩøÁî®,Ë°®Á§∫Ëøô‰∏™ÊîªÂáªÁâ©‰ª∂Ë¶ÅÊîªÂáªÂ§çÊï∞ÁõÆÊ†á
; 5203 : 				if (p_missile[d3] != NULL){

  00348	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?p_missile@@3PAPAUaction@@A[eax*4]
  0034f	89 55 f4	 mov	 DWORD PTR _a2$1$[ebp], edx
  00352	85 d2		 test	 edx, edx
  00354	0f 84 c1 00 00
	00		 je	 $LN85@master

; 5204 : 					a2 = p_missile[d3];
; 5205 : 					ATR_BODY_WORK(ATR_INT_WORK1(a2), a2) = a1;				// Ë¢´ÊîªÊñπ

  0035a	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0035d	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  00363	89 5c 81 04	 mov	 DWORD PTR [ecx+eax*4+4], ebx

; 5206 : 					ATR_BATTLE_MODEL(a1) = ATT_BATTLE_MODEL;				// Ê≠§ÁõÆÊ†áÊòØË¢´ ATT_BATTLE_MODEL ÂûãÊÄÅÊîªÂáª

  00367	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0036a	c7 80 58 02 00
	00 62 00 00 00	 mov	 DWORD PTR [eax+600], 98	; 00000062H

; 5207 : 					ATR_ATTACK_KIND(ATR_INT_WORK1(a2), a2) = get_num();		// ÊîªÂáªÁßçÁ±ª

  00374	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]
  00377	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0037c	8b 8e 28 01 00
	00		 mov	 ecx, DWORD PTR [esi+296]
  00382	89 44 8e 60	 mov	 DWORD PTR [esi+ecx*4+96], eax

; 5208 : 					ATR_ATTACK_POW(ATR_INT_WORK1(a2), a2) = get_num();		// ÊîªÂáªÂäõ

  00386	8b 75 f4	 mov	 esi, DWORD PTR _a2$1$[ebp]
  00389	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  0038c	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00391	8b 8e 28 01 00
	00		 mov	 ecx, DWORD PTR [esi+296]
  00397	89 84 8e b0 00
	00 00		 mov	 DWORD PTR [esi+ecx*4+176], eax

; 5209 : 					ATR_ATTACK_PET_POW(ATR_INT_WORK1(a2), a2) = get_num();	// petÊîªÂáªÂäõ

  0039e	8b 45 f4	 mov	 eax, DWORD PTR _a2$1$[ebp]
  003a1	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  003a4	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  003a9	8b 8e 28 01 00
	00		 mov	 ecx, DWORD PTR [esi+296]
  003af	89 84 8e d4 01
	00 00		 mov	 DWORD PTR [esi+ecx*4+468], eax

; 5210 : 					ATR_CHR_NO(a2) = get_num();																	// ÊîªÂáªÁâ©‰ª∂ÂõæÂè∑

  003b6	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  003bb	8b 4d f4	 mov	 ecx, DWORD PTR _a2$1$[ebp]
  003be	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 5211 : 					// Â¶ÇÊûúÊúâÂø†Áä¨ÊïàÊûú,ËÆ∞ÂΩï‰ΩøÁî®Âø†Áä¨ÁöÑÁõÆÊ†á
; 5212 : 					if (BattleCmd[command_point] == 'g')

  003c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  003c9	80 b8 00 00 00
	00 67		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 103 ; 00000067H
  003d0	75 18		 jne	 SHORT $LN87@master

; 5213 : 						ATR_LONG_WORK(ATR_INT_WORK1(a2), a2) = get_num();

  003d2	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  003d5	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  003da	8b 8e 28 01 00
	00		 mov	 ecx, DWORD PTR [esi+296]
  003e0	89 84 8e 34 01
	00 00		 mov	 DWORD PTR [esi+ecx*4+308], eax
  003e7	8b 4d f4	 mov	 ecx, DWORD PTR _a2$1$[ebp]
$LN87@master:

; 5214 : 					ATR_INT_WORK1(a2)++;

  003ea	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 5215 : 					// ËÆ∞ÂΩïÁõÆÊ†áÊúâË¢´Ê≠§ÊîªÂáªÁâ©‰ª∂ÊîªÂáª
; 5216 : 					if (ATR_LONG_WORK(0, a1) == 0){

  003ed	8b 4d f0	 mov	 ecx, DWORD PTR _d3$1$[ebp]
  003f0	ff 80 28 01 00
	00		 inc	 DWORD PTR [eax+296]
  003f6	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  003f9	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR [eax+308], 0
  00400	75 0d		 jne	 SHORT $LN88@master

; 5217 : 						ATR_LONG_WORK(0, a1) = 1;		// ATR_LONG_WORK Ê†è‰Ωç : ‰ΩçÂùÄ 0 : ÊòØËÆæÂÆöÁõÆÊ†áÊòØÂê¶Ë¢´ÊîªÂáªËøá,ÊâÄ‰ª•ÈÉΩ‰ºöËÆæÂÆö‰∏∫1

  00402	c7 80 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+308], 1

; 5218 : 						ATR_LONG_WORK(d3, a1) = d7 + 1; //						‰ΩçÂùÄ d3: d3 ÊòØÊîªÂáªÁâ©‰ª∂ÁöÑÁºñÂè∑,ËÄå d3 ÁöÑ‰ΩçÂùÄÊòØÁî®Êù•

  0040c	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
$LN88@master:

; 5263 : 				}
; 5264 : 				d7++;

  0040f	89 bc 88 34 01
	00 00		 mov	 DWORD PTR [eax+ecx*4+308], edi
  00416	e9 52 01 00 00	 jmp	 $LN86@master
$LN85@master:

; 5219 : 						//								 Á∫™ÂΩïÊîªÂáªÁâ©‰ª∂Âú®Á¨¨ d7 + 1 ÁöÑÂõûÂêàÊîªÂáªÁõÆÊ†á
; 5220 : 					}else
; 5221 : 						ATR_LONG_WORK(d3, a1) = d7 + 1;	// ÂΩì ATR_LONG_WORK Ê†è‰Ωç 0 ‰∏ç‰∏∫ 0 Êó∂,Ë°®Á§∫Ëøô‰∏™ÁõÆÊ†áÂ∑≤Ë¢´Âà´ÁöÑÊîªÂáªÁâ©‰ª∂ÊîªÂáª,
; 5222 : 					// ÊâÄ‰ª•Áõ¥Êé•Âú® d3 ÁöÑ‰ΩçÂùÄËÆ∞ÂΩïË¶ÅÂú® d7 + 1 ÁöÑÂõûÂêàÊîªÂáªÁõÆÊ†á
; 5223 : 				}else{// Ê≤°‰ΩøÁî®Ëøá
; 5224 : 					p_missile[d3] = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  0041b	68 60 02 00 00	 push	 608			; 00000260H
  00420	6a 65		 push	 101			; 00000065H
  00422	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  00427	8b 55 f0	 mov	 edx, DWORD PTR _d3$1$[ebp]
  0042a	8b f0		 mov	 esi, eax
  0042c	83 c4 08	 add	 esp, 8
  0042f	89 34 95 00 00
	00 00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A[edx*4], esi

; 5225 : 					if (p_missile[d3] == NULL)

  00436	85 f6		 test	 esi, esi
  00438	0f 84 43 01 00
	00		 je	 $LN360@master

; 5226 : 						break;	// ‰∏çÂ§™ÂèØËÉΩ
; 5227 : 					a2 = p_missile[d3];
; 5228 : 					// ÂàùÂßãÂåñ
; 5229 : 					ATR_NAME(a2) = monster;
; 5230 : 					ATR_CHR_ANG(a2) = d2;

  0043e	8b 45 e4	 mov	 eax, DWORD PTR tv5562[ebp]
  00441	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  00447	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 5231 : 					ATR_H_POS(a2) = monster_start_pos[monster_place_no[d3 + d0] * 2];

  0044e	8b 4d fc	 mov	 ecx, DWORD PTR _d0$[ebp]
  00451	03 ca		 add	 ecx, edx
  00453	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_no@@3PAHA[ecx*4]

; 5232 : 					ATR_V_POS(a2) = monster_start_pos[monster_place_no[d3 + d0] * 2 + 1];
; 5233 : 
; 5234 : 					ATR_CHR_ACT(a2) = ANIM_STAND;
; 5235 : 					ATR_GROUP_FLG(a2) = ATR_GROUP_FLG(a3);

  0045a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0045d	8b 04 c5 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_start_pos@@3PAHA[eax*8]
  00464	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00467	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  0046a	03 c2		 add	 eax, edx
  0046c	c7 86 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+332], 3
  00476	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_no@@3PAHA[eax*4]
  0047d	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?monster_start_pos@@3PAHA[eax*8+4]
  00484	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00487	8b 45 e8	 mov	 eax, DWORD PTR _a3$1$[ebp]
  0048a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0048d	8a 40 5e	 mov	 al, BYTE PTR [eax+94]
  00490	88 41 5e	 mov	 BYTE PTR [ecx+94], al

; 5236 : 					a2->hitDispNo = a3->hitDispNo;

  00493	8b 45 e8	 mov	 eax, DWORD PTR _a3$1$[ebp]
  00496	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00499	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 5237 : 					ATR_VCT_NO(a2) = 1;							// ÂâçËøõ

  0049c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0049f	c6 00 01	 mov	 BYTE PTR [eax], 1

; 5238 : 					ATR_BODY_WORK(0, a2) = a1;					// Ë¢´ÊîªÂáªÁõÆÊ†á

  004a2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  004a5	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 5239 : 					ATR_BATTLE_MODEL(a1) = ATT_BATTLE_MODEL;	// Ê≠§ÁõÆÊ†áÊòØË¢´ ATT_BATTLE_MODEL ÂûãÊÄÅÊîªÂáª

  004a8	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  004ab	c7 80 58 02 00
	00 62 00 00 00	 mov	 DWORD PTR [eax+600], 98	; 00000062H

; 5240 : 					// ËÆ∞ÂΩïÁõÆÊ†áÊúâË¢´Ê≠§ÊîªÂáªÁâ©‰ª∂ÊîªÂáª
; 5241 : 					if (ATR_LONG_WORK(0, a1) == 0)

  004b5	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  004b8	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR [eax+308], 0
  004bf	75 0d		 jne	 SHORT $LN91@master

; 5242 : 					{
; 5243 : 						ATR_LONG_WORK(0, a1) = 1;			// ATR_LONG_WORK Ê†è‰Ωç : ‰ΩçÂùÄ 0 : ÊòØËÆæÂÆöÁõÆÊ†áÊòØÂê¶Ë¢´ÊîªÂáªËøá,ÊâÄ‰ª•ÈÉΩ‰ºöËÆæÂÆö‰∏∫1

  004c1	c7 80 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+308], 1

; 5244 : 						ATR_LONG_WORK(d3, a1) = d7 + 1;		//						‰ΩçÂùÄ d3: d3 ÊòØÊîªÂáªÁâ©‰ª∂ÁöÑÁºñÂè∑,ËÄå d3 ÁöÑ‰ΩçÂùÄÊòØÁî®Êù•

  004cb	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
$LN91@master:

; 5245 : 						//								 Á∫™ÂΩïÊîªÂáªÁâ©‰ª∂Âú®Á¨¨ d7 + 1 ÁöÑÂõûÂêàÊîªÂáªÁõÆÊ†á
; 5246 : 					}
; 5247 : 					else
; 5248 : 						ATR_LONG_WORK(d3, a1) = d7 + 1;		// ÂΩì ATR_LONG_WORK Ê†è‰Ωç 0 ‰∏ç‰∏∫ 0 Êó∂,Ë°®Á§∫Ëøô‰∏™ÁõÆÊ†áÂ∑≤Ë¢´Âà´ÁöÑÊîªÂáªÁâ©‰ª∂ÊîªÂáª,
; 5249 : 					// ÊâÄ‰ª•Áõ¥Êé•Âú® d3 ÁöÑ‰ΩçÂùÄËÆ∞ÂΩïË¶ÅÂú® d7 + 1 ÁöÑÂõûÂêàÊîªÂáªÁõÆÊ†á
; 5250 : 					ATR_ATTACK_KIND(0, a2) = get_num();		// ÊîªÂáªÁßçÁ±ª

  004ce	89 bc 90 34 01
	00 00		 mov	 DWORD PTR [eax+edx*4+308], edi
  004d5	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  004da	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  004dd	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 5251 : 					ATR_ATTACK_POW(0, a2) = get_num();		// ÊîªÂáªÂäõ

  004e0	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  004e5	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  004e8	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 5252 : 					ATR_ATTACK_PET_POW(0, a2) = get_num();	// petÊîªÂáªÂäõ

  004ee	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  004f3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  004f6	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax

; 5253 : 					ATR_CHR_NO(a2) = get_num();				// ÊîªÂáªÁâ©‰ª∂ÂõæÂè∑

  004fc	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5254 : 					ATR_PLACE_NO(a2) = d3;					// ËÆ∞ÂΩïÊîªÂáªÁâ©‰ª∂ÁºñÂè∑

  00501	8b 4d f0	 mov	 ecx, DWORD PTR _d3$1$[ebp]
  00504	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  0050a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0050d	88 88 1f 01 00
	00		 mov	 BYTE PTR [eax+287], cl

; 5255 : 					ATR_INT_WORK0(a2) = ATT_BATTLE_MODEL;	// ËÆæÂÆöÊ≠§ action ÊòØ ATT_BATTLE_MODEL Âú®‰ΩøÁî®,‰ª•Êñπ‰æø‰πãÂêéÂ§ÑÁêÜÁöÑËæ®ËØÜ,‰ΩøÁî® work0 ËÆ∞ÂΩï

  00513	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00516	c7 80 24 01 00
	00 62 00 00 00	 mov	 DWORD PTR [eax+292], 98	; 00000062H

; 5256 : 					ATR_INT_WORK1(a2) = 1;					// ËÆæÂÆöÊ≠§ÊîªÂáªÁâ©‰ª∂ÁõÆÂâçÊîªÂáªÁõÆÊ†áÊï∞Èáè,‰ΩøÁî® work1ËÆ∞ÂΩï

  00520	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00523	c7 80 28 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+296], 1

; 5257 : 					ATR_INT_WORK2(a2) = 0;					// ‰Ωú‰∏∫ÊòØÂê¶Á¨¨‰∏ÄÊ¨°ÊâßË°åÁ¶ªÂºÄÂä®ÁîªÊóóÊ†á

  0052d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00530	c7 80 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+300], 0

; 5258 : 					ATR_INT_WORK3(a2) = 0;					// ‰Ωú‰∏∫Ëã•ÊúâÂø†Áä¨ÂàôÊ£ÄÊü•ËøáÂêé‰∏çÂÜçÊ£ÄÊü•Âø†Áä¨ÁöÑÊóóÊ†á

  0053a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0053d	c7 80 30 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+304], 0

; 5259 : 					// Â¶ÇÊûúÊúâÂø†Áä¨ÊïàÊûú,ËÆ∞ÂΩï‰ΩøÁî®Âø†Áä¨ÁöÑÁõÆÊ†á
; 5260 : 					if (BattleCmd[command_point] == 'g')

  00547	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  0054c	80 b8 00 00 00
	00 67		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 103 ; 00000067H
  00553	75 0e		 jne	 SHORT $LN93@master

; 5261 : 						ATR_LONG_WORK(0, a2) = get_num();

  00555	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0055a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0055d	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
$LN93@master:

; 5262 : 					ATR_SPD(a2) = 32;						// ÁßªÂä®ÈÄüÂ∫¶

  00563	c7 86 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+308], 32	; 00000020H
$LN86@master:

; 5263 : 				}
; 5264 : 				d7++;

  0056d	ff 45 ec	 inc	 DWORD PTR _d7$1$[ebp]
  00570	47		 inc	 edi
  00571	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00576	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0057b	0f 85 9f fd ff
	ff		 jne	 $LL12@master
$LN360@master:
  00581	8b 7d 08	 mov	 edi, DWORD PTR _a0$[ebp]
$LN287@master:

; 5265 : 			}
; 5266 : 			ATR_COUNTER(a0) = a1;

  00584	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 5267 : 			ATR_DAMAGE(a0) = -d7;	// ËÆæ‰∏∫Ë¥üÊï∞,ËÆ©Ê≠£Â∏∏Êó∂ÂÄôÁöÑ ATR_DAMAGE(p_master) ‰∏ç‰ºöÁ≠â‰∫é ATR_BODY_CNT(p_master)

  00587	8b 55 ec	 mov	 edx, DWORD PTR _d7$1$[ebp]
  0058a	8b ca		 mov	 ecx, edx
  0058c	f7 d9		 neg	 ecx
  0058e	89 98 08 01 00
	00		 mov	 DWORD PTR [eax+264], ebx
  00594	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00597	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 5268 : 			ATR_INT_WORK1(a0) = 0;	// Á°ÆËÆ§ p_missile ÊòØÂê¶ÈÉΩË¢´Ê∏ÖÁ©∫

  0059a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0059d	c7 80 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+296], 0

; 5269 : 			ATR_INT_WORK2(a0) = 1;	// ÊîªÂáªÁâ©‰ª∂ÊîªÂáªÊó∂ÁöÑÈ°∫Â∫è,ÂÖà‰ªé ATR_LONG_WORK ‰∏∫ 1 ÁöÑÂÖàÊâßË°å

  005a7	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  005aa	c7 80 2c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+300], 1

; 5270 : 			ATR_BODY_CNT(a0) = d7;	// ÊîªÂáªÊÄªÊ¨°Êï∞,ÊØèÂÆåÊàê‰∏ÄÊ¨°Âä®‰Ωú ATR_DAMAGE(p_master) ÈÉΩ‰ºöÈÄíÂ¢û,Áõ¥Âà∞ ATR_DAMAGE(p_master) ==  ATR_BODY_CNT(p_master)

  005b4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  005b7	88 50 54	 mov	 BYTE PTR [eax+84], dl

; 5271 : 			// p_master Êâç‰ºöÂéªÁªßÁª≠Â§ÑÁêÜ‰∏ã‰∏ÄÁ¨î BattleCmd ÈáåÁöÑËµÑÊñô (ËøôÈáåÁöÑ a0 Â∞±ÊòØ p_master)
; 5272 : 			break;

  005ba	e9 bf 12 00 00	 jmp	 $master_500$370
$LN81@master:

; 5273 : 		}
; 5274 : #endif
; 5275 : 		d0 = get_num();

  005bf	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  005c4	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5276 : 		if (d0 < 0 || d0 >= BATTLKPKPLYAERNUM){

  005c7	83 f8 13	 cmp	 eax, 19			; 00000013H
  005ca	0f 87 48 11 00
	00		 ja	 $LN95@master

; 5280 : 			}else{
; 5281 : #ifdef _STONDEBUG_
; 5282 : 				MessageBox(hWnd, "command_no != ATT_VARIABLE", "Error", MB_OK);
; 5283 : #endif
; 5284 : 				break;
; 5285 : 			}
; 5286 : 		}
; 5287 : 		a1 = p_party[d0];

  005d0	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 5288 : 		if (ATR_NAME(a1) == NULL){

  005d7	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  005db	75 19		 jne	 SHORT $LN98@master

; 5289 : #ifdef _STONDEBUG_
; 5290 : 			MessageBox(hWnd, "ATR_NAME(a1) == NULL", "Error", MB_OK);
; 5291 : #endif
; 5292 : 			command_no = get_command();

  005dd	e8 00 00 00 00	 call	 ?get_command@@YADXZ	; get_command

; 5293 : 			if (command_no == -1){

  005e2	3c ff		 cmp	 al, -1
  005e4	0f 84 4d 11 00
	00		 je	 $LN361@master

; 5297 : 			}
; 5298 : 			command_point -= 2;

  005ea	83 2d 00 00 00
	00 02		 sub	 DWORD PTR ?command_point@@3HA, 2

; 5299 : 			break;

  005f1	e9 88 12 00 00	 jmp	 $master_500$370
$LN98@master:

; 5300 : 		}
; 5301 : 		if (command_no != ATT_MALFUNCTION){

  005f6	83 fb 4d	 cmp	 ebx, 77			; 0000004dH
  005f9	74 18		 je	 SHORT $LN350@master

; 5302 : 			if (ATR_LIFE(a1) <= 0)

  005fb	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  005ff	7f 06		 jg	 SHORT $LN101@master

; 5303 : 				ATR_VCT_NO(a1) = 0;

  00601	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00604	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN101@master:

; 5304 : 		}
; 5305 : 		if (command_no != ATT_MALFUNCTION){
; 5306 : 			if (ATR_VCT_NO(a1) != 0)//command_point = sav_command_point;

  00607	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0060a	80 38 00	 cmp	 BYTE PTR [eax], 0
  0060d	0f 85 6b 12 00
	00		 jne	 $master_500$370
$LN350@master:

; 5307 : 				break;
; 5308 : 		}
; 5309 : 		ATR_VCT_NO(a0) = 1;

  00613	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00616	c6 00 01	 mov	 BYTE PTR [eax], 1

; 5310 : 		ATR_DAMAGE(a0) = 0;

  00619	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0061c	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 5311 : 		ATR_PET_DAMAGE(a0) = 0;

  00623	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00626	c7 80 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+548], 0

; 5312 : 		ATR_COUNTER(a0) = a1;

  00630	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00633	89 b0 08 01 00
	00		 mov	 DWORD PTR [eax+264], esi

; 5313 : 		if (ATR_VCT_NO(a1) != 55)

  00639	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0063c	80 38 37	 cmp	 BYTE PTR [eax], 55	; 00000037H
  0063f	74 07		 je	 SHORT $LN104@master

; 5314 : 			ATR_FIRST_FLG(a1) = 0;

  00641	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
$LN104@master:

; 5315 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++){

  00648	b9 00 00 00 00	 mov	 ecx, OFFSET ?p_party@@3PAPAUaction@@A
  0064d	0f 1f 00	 npad	 3
$LL16@master:

; 5316 : 			ATR_SYNC_FLG(p_party[d7]) = 0;

  00650	8b 01		 mov	 eax, DWORD PTR [ecx]
  00652	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00655	c6 80 23 01 00
	00 00		 mov	 BYTE PTR [eax+291], 0

; 5317 : 			ATR_ATTACK_KIND(0, p_party[d7]) = 0;

  0065c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0065e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00661	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 5318 : 			ATR_ATTACK_KIND(1, p_party[d7]) = 0;

  00668	8b 01		 mov	 eax, DWORD PTR [ecx]
  0066a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0066d	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0

; 5319 : 			ATR_ATTACK_POW(0, p_party[d7]) = 0;

  00674	8b 01		 mov	 eax, DWORD PTR [ecx]
  00676	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00679	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 5320 : 			ATR_ATTACK_PET_POW(0, p_party[d7]) = 0;

  00683	8b 01		 mov	 eax, DWORD PTR [ecx]
  00685	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00688	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0

; 5321 : 			//andy_mp
; 5322 : 			ATR_MPDAMAGE(p_party[d7]) = 0;

  00692	8b 01		 mov	 eax, DWORD PTR [ecx]
  00694	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00697	c7 80 30 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+560], 0

; 5323 : 			ATR_MPDFLG(p_party[d7]) = 0;

  006a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  006a3	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  006a6	c7 80 38 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+568], 0

; 5324 : 			ATR_ADDHP(p_party[d7]) = 0;

  006b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  006b2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  006b5	c7 80 34 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+564], 0

; 5325 : 			ATR_ADDHPFLG(p_party[d7]) = 0;

  006bf	8b 01		 mov	 eax, DWORD PTR [ecx]
  006c1	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  006c4	c7 80 3c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+572], 0

; 5326 : 			ATR_SHOWADDHP(p_party[d7]) = 0;

  006ce	8b 01		 mov	 eax, DWORD PTR [ecx]
  006d0	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  006d3	c7 80 40 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+576], 0

; 5327 : #ifdef _PETSKILL_BATTLE_MODEL
; 5328 : 			ATR_BATTLE_MODEL(p_party[d7]) = 0;

  006dd	8b 01		 mov	 eax, DWORD PTR [ecx]
  006df	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  006e2	c7 80 58 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+600], 0

; 5329 : 			ATR_BODY_WORK(0, p_party[d7]) = NULL;

  006ec	8b 01		 mov	 eax, DWORD PTR [ecx]
  006ee	83 c1 04	 add	 ecx, 4
  006f1	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  006f4	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  006fb	81 f9 50 00 00
	00		 cmp	 ecx, OFFSET ?p_party@@3PAPAUaction@@A+80
  00701	0f 8c 49 ff ff
	ff		 jl	 $LL16@master

; 5330 : #endif
; 5331 : 		}
; 5332 : 		ATR_ATTACK_KIND(2, a1) = 0;

  00707	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 5333 : 		switch (command_no){

  0070a	83 c3 fe	 add	 ebx, -2			; fffffffeH
  0070d	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0
  00714	83 fb 6e	 cmp	 ebx, 110		; 0000006eH
  00717	0f 87 2b 0f 00
	00		 ja	 $LN226@master
  0071d	0f b6 83 00 00
	00 00		 movzx	 eax, BYTE PTR $LN354@master[ebx]
  00724	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN355@master[eax*4]
$LN105@master:

; 5334 : 			// BI jibun_5 teki_F flg_2 damage_1 teki_9 flg_2 damage_1 FF
; 5335 : 		case ATT_IN:		//??????????  ‰Ωã??Óé´Óé∑?  ??????????
; 5336 : 			if (ATR_GROUP_FLG(a1) == 0)		//????????

  0072b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0072e	80 78 5e 00	 cmp	 BYTE PTR [eax+94], 0
  00732	75 10		 jne	 SHORT $LN106@master

; 5337 : 			{
; 5338 : 				ATR_V_POS(a1) = 8;

  00734	c7 46 1c 08 00
	00 00		 mov	 DWORD PTR [esi+28], 8

; 5339 : 				ATR_H_POS(a1) = -SCREEN_OUT;

  0073b	c7 46 18 96 ff
	ff ff		 mov	 DWORD PTR [esi+24], -106 ; ffffff96H

; 5340 : 			}

  00742	eb 22		 jmp	 SHORT $LN107@master
$LN106@master:

; 5341 : 			else
; 5342 : 			{
; 5343 : 				ATR_V_POS(a1) = lpDraw->ySize - 8;

  00744	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00749	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [eax+136]
  0074f	83 e8 08	 sub	 eax, 8
  00752	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 5344 : 				ATR_H_POS(a1) = lpDraw->xSize + SCREEN_OUT;

  00755	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0075a	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  00760	83 c0 6a	 add	 eax, 106		; 0000006aH
  00763	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN107@master:

; 5345 : 			}
; 5346 : 		case ATT_HIT:		//====================Áõ¥Êé•ÊîªÂáª===============
; 5347 : 			ATR_VCT_NO(a1) = 1;							//ÂâçËøõ

  00766	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00769	c6 00 01	 mov	 BYTE PTR [eax], 1

; 5348 : 			ATR_BODY_WORK(0, a1) = p_party[get_num()];	//Ë¢´ÊîªÊñπ

  0076c	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00771	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00774	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0077b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 5349 : 
; 5350 : 			//JL fixËá™Â∑±ÊâìËá™Â∑±Âç°‰Ωè
; 5351 : 			if (ATR_BODY_WORK(0, a1) == a1){//Â¶ÇÊûúËá™Â∑±ÊâìËá™Â∑±

  0077e	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00781	39 73 04	 cmp	 DWORD PTR [ebx+4], esi
  00784	75 1f		 jne	 SHORT $LN109@master

; 5352 : 				ATR_VCT_NO(a1) = 0; // ÂæÖÊú∫

  00786	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 5353 : 				ATR_BODY_WORK(0, a1) = NULL;	// Ê∏ÖÁ©∫

  00789	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0078c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 5354 : 				ATR_BODY_CNT(a0) = 1;

  00793	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00796	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5355 : 				((ATR_EQU *)a0->pYobi)->vct_no = 0; //Âº∫Âà∂Â§ç‰ΩçÂèØË°åÂä®

  0079a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN126@master:

; 6154 : 			break;
; 6155 : 		}
; 6156 : #ifdef _PET_ITEM
; 6157 : 		if (ATR_ATTACK_KIND(0, a1) & ATT_ATTACKBACK)

  0079d	c6 00 00	 mov	 BYTE PTR [eax], 0
  007a0	e9 b7 0e 00 00	 jmp	 $LN17@master
$LN109@master:

; 5356 : 				break;
; 5357 : 			}
; 5358 : 
; 5359 : 
; 5360 : 			ATR_ATTACK_KIND(0, a1) = get_num();			//ÊîªÂáªÁßçÁ±ª

  007a5	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  007aa	89 43 60	 mov	 DWORD PTR [ebx+96], eax

; 5361 : 			ATR_ATTACK_POW(0, a1) = get_num();			//ÊîªÂáªÂäõ

  007ad	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  007b2	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  007b5	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 5362 : 			if (BattleCmd[command_point] == 'p')

  007bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  007c0	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  007c7	75 0e		 jne	 SHORT $LN110@master

; 5363 : 				ATR_ATTACK_PET_POW(0, a1) = get_num();	//petÊîªÂáªÂäõ

  007c9	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  007ce	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  007d1	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
$LN110@master:

; 5364 : #ifdef _STONDEBUG_
; 5365 : 			else
; 5366 : 				LogToBattleError( BattleCmd, __LINE__ );
; 5367 : #endif
; 5368 : 			ATR_BODY_CNT(a0) = 1;

  007d7	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  007da	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5369 : #ifdef _ATTDOUBLE_ATTACK
; 5370 : 			//andy_add
; 5371 : 			if (ATR_ATTACK_KIND(0, a1) & ATT_ATTDOUBLE || ATR_ATTACK_KIND(0, a1) & BCF_MODIFY)

  007de	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  007e1	f7 43 60 00 00
	21 00		 test	 DWORD PTR [ebx+96], 2162688 ; 00210000H
  007e8	74 0b		 je	 SHORT $LN111@master

; 5372 : 				ATR_BATTLEGRANO(a1) = get_num();

  007ea	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  007ef	89 83 44 02 00
	00		 mov	 DWORD PTR [ebx+580], eax
$LN111@master:

; 5373 : #endif
; 5374 : #ifdef _ATTACK_EFFECT
; 5375 : 			//‰øÆÊ≠£Âø†Áä¨  xiezi
; 5376 : 			if (BattleCmd[command_point] == 's')

  007f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  007fa	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  00801	0f 85 55 0e 00
	00		 jne	 $LN17@master

; 5377 : 				ATR_LONG_WORK(0, a1) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  00807	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0080c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0080f	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax

; 5378 : #endif
; 5379 : 			break;

  00815	e9 42 0e 00 00	 jmp	 $LN17@master
$LN114@master:

; 5380 : #ifdef _MAGIC_DEEPPOISION
; 5381 : 		case ATT_DEEPPOISION:	//ÂâßÊØí
; 5382 : 			ATR_VCT_NO(a1) = 1;	//ÊîªÊñπÂä®‰Ωú

  0081a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0081d	c6 00 01	 mov	 BYTE PTR [eax], 1

; 5383 : 			ATR_BODY_WORK(0, a1) = p_party[get_num()];//ÊîªÊñπÁºñÂè∑

  00820	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00825	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00828	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0082f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 5384 : 			ATR_ATTACK_KIND(0, a1) = get_num();		//ÊàëÊñπÈò≤Âæ°ÁßçÁ±ª

  00832	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00837	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0083a	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 5385 : 			ATR_ATTACK_POW(0, a1) = get_num();		//ÊîªÂáªÂäõ

  0083d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00842	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00845	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 5386 : 			ATR_ATTACK_PET_POW(0, a1) = get_num();//È™ëÂÆ†Êçü‰º§

  0084b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00850	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00853	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax

; 5387 : 			ATR_BODY_CNT(a0) = 1;//ÊîªÂáªÊ¨°Êï∞

  00859	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0085c	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5388 : 			ATR_DEEPPOISION(a1) = 1;

  00860	c7 86 dc 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+476], 1

; 5389 : 			break;

  0086a	e9 ed 0d 00 00	 jmp	 $LN17@master
$LN115@master:

; 5390 : #endif
; 5391 : 			//andy_mp
; 5392 : 		case ATT_MPDAMAGE://MP‰º§ÂÆ≥
; 5393 : 			ATR_VCT_NO(a1) = 1;

  0086f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00872	c6 00 01	 mov	 BYTE PTR [eax], 1

; 5394 : 			ATR_BODY_WORK(0, a1) = p_party[get_num()];

  00875	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0087a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0087d	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00884	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 5395 : 			ATR_ATTACK_KIND(0, a1) = get_num();

  00887	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0088c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0088f	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 5396 : 			ATR_ATTACK_POW(0, a1) = get_num();

  00892	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00897	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0089a	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 5397 : 			ATR_ATTACK_PET_POW(0, a1) = get_num();

  008a0	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  008a5	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  008a8	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax

; 5398 : 			ATR_MPDAMAGE(a1) = get_num();

  008ae	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  008b3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  008b6	89 81 30 02 00
	00		 mov	 DWORD PTR [ecx+560], eax

; 5399 : 			ATR_BODY_CNT(a0) = 1;

  008bc	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  008bf	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5400 : 			ATR_MPDFLG(a1) = 1;

  008c3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  008c6	c7 80 38 02 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+568], 1

; 5401 : 			break;	//set_damage_num( a1, 16, -64 )

  008d0	e9 87 0d 00 00	 jmp	 $LN17@master
$LN116@master:

; 5402 : 
; 5403 : 		case ATT_DAMAGETOHP:
; 5404 : 			ATR_VCT_NO(a1) = 1;

  008d5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  008d8	c6 00 01	 mov	 BYTE PTR [eax], 1

; 5405 : 			ATR_BODY_WORK(0, a1) = p_party[get_num()];

  008db	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  008e0	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  008e3	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  008ea	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 5406 : 			ATR_ATTACK_KIND(0, a1) = get_num();

  008ed	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  008f2	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  008f5	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 5407 : 			ATR_ATTACK_POW(0, a1) = get_num();

  008f8	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  008fd	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00900	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 5408 : 			ATR_ATTACK_PET_POW(0, a1) = get_num();

  00906	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0090b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0090e	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax

; 5409 : 			ATR_ADDHP(a1) = get_num();

  00914	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00919	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0091c	89 81 34 02 00
	00		 mov	 DWORD PTR [ecx+564], eax

; 5410 : 			ATR_BODY_CNT(a0) = 1;

  00922	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00925	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5411 : 			ATR_SHOWADDHP(a1) = 1;

  00929	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0092c	c7 80 40 02 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+576], 1

; 5412 : 			ATR_ADDHPFLG(a1) = 1;

  00936	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00939	c7 80 3c 02 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+572], 1

; 5413 : 			break;

  00943	e9 14 0d 00 00	 jmp	 $LN17@master
$LN117@master:

; 5414 : 			//BF jibun_5
; 5415 : 		case ATT_FADE_OUT:		//??????????  ‰Ωã??Óé´?Óåø  ??????????
; 5416 : 			ATR_VCT_NO(a1) = 80;		//?Óï§?

  00948	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0094b	c6 00 50	 mov	 BYTE PTR [eax], 80	; 00000050H

; 5417 : 			//??????
; 5418 : 			ATR_ATTACK_KIND(2, a1) = 1;

  0094e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00951	c7 40 68 01 00
	00 00		 mov	 DWORD PTR [eax+104], 1

; 5419 : 			ATR_BODY_CNT(a0) = 1;

  00958	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0095b	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5420 : 			break;

  0095f	e9 f8 0c 00 00	 jmp	 $LN17@master
$LN118@master:

; 5421 : 			//BN|Óüâ???Óë∑Óú±?|?????Óú±?|
; 5422 : 		case ATT_NEXT_EQUIP:		//??????????  ?ÓùíÓüâ?  ??????????
; 5423 : 			ATR_VCT_NO(a1) = 82;		//?ÓùíÓüâ?

  00964	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00967	c6 00 52	 mov	 BYTE PTR [eax], 82	; 00000052H

; 5424 : 			ATR_BODY_CNT(a0) = 1;

  0096a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0096d	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5425 : 			break;

  00971	e9 e6 0c 00 00	 jmp	 $LN17@master
$LN119@master:

; 5426 : 			//BJ|Attacker's No( 0 - 19 )|Attacker's MP|Attacker's animation index|
; 5427 : 			//                                                Opposite's animation index|Opposite's index ...
; 5428 : 			//BJ|???Óë∑Óú±?|??|???Óë∑?????Óú±?|?????Óë∑?????Óú±?|?????Óë∑|?????Óë∑|FF
; 5429 : 		case ATT_JUJUTSU:		//??????????  Óé£Óèû  ??????????
; 5430 : 			ATR_VCT_NO(a1) = 75;		//?Ó°á?Óé£ÓèûÓìªÓúß??

  00976	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00979	c6 00 4b	 mov	 BYTE PTR [eax], 75	; 0000004bH

; 5431 : 			ATR_MP(a1) = get_num();		//?????

  0097c	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00981	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax

; 5432 : 			ATR_BODY_CNT(a0) = 1;

  00987	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0098a	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5433 : #ifdef __ATTACK_MAGIC
; 5434 : 			if (ATTACK_MAGIC_ID == ATR_MP(a1))

  0098e	81 be 84 00 00
	00 4e 61 bc 00	 cmp	 DWORD PTR [esi+132], 12345678 ; 00bc614eH
  00998	0f 85 be 0c 00
	00		 jne	 $LN17@master

; 5435 : 				BuildAttackMagicData(a0, a1);

  0099e	56		 push	 esi
  0099f	57		 push	 edi
  009a0	e8 00 00 00 00	 call	 ?BuildAttackMagicData@@YAHPAUaction@@0@Z ; BuildAttackMagicData
  009a5	83 c4 08	 add	 esp, 8

; 5436 : #endif
; 5437 : 			break;

  009a8	e9 af 0c 00 00	 jmp	 $LN17@master
$LN121@master:

; 5438 : 		case ATT_TOCALL:
; 5439 : 			ATR_VCT_NO(a1) = 2;		//?Ó°á?Óé£ÓèûÓìªÓúß??

  009ad	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  009b0	c6 00 02	 mov	 BYTE PTR [eax], 2

; 5440 : 			ATR_MP(a1) = get_num();		//?????

  009b3	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  009b8	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax

; 5441 : 			ATR_BODY_CNT(a0) = 1;

  009be	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  009c1	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5442 : #ifdef __TOCALL_MAGIC
; 5443 : 			if (TOCALL_MAGIC_ID == ATR_MP(a1))

  009c5	81 be 84 00 00
	00 4e 26 57 00	 cmp	 DWORD PTR [esi+132], 5711438 ; 0057264eH
  009cf	0f 85 87 0c 00
	00		 jne	 $LN17@master

; 5444 : 				BuildToCallMagicData(a0, a1);

  009d5	56		 push	 esi
  009d6	57		 push	 edi
  009d7	e8 00 00 00 00	 call	 ?BuildToCallMagicData@@YAHPAUaction@@0@Z ; BuildToCallMagicData
  009dc	83 c4 08	 add	 esp, 8

; 5445 : #endif
; 5446 : 			break;

  009df	e9 78 0c 00 00	 jmp	 $LN17@master
$LN123@master:

; 5447 : 		case ATT_MALFUNCTION:		//??????????  ÓñïÓïíÓé£Óèû  ??????????
; 5448 : 			d0 = get_num();		//Óé£ÓèûÓú±?Óéï?Óèù?

  009e4	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  009e9	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5449 : 			ATR_STATUS(a1) = d0;		//????????

  009ec	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 5450 : 			switch (d0)

  009f2	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  009f5	83 e8 00	 sub	 eax, 0
  009f8	74 54		 je	 SHORT $LN124@master
  009fa	83 e8 02	 sub	 eax, 2
  009fd	74 20		 je	 SHORT $LN125@master
  009ff	83 e8 1d	 sub	 eax, 29			; 0000001dH
  00a02	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00a05	c6 00 00	 mov	 BYTE PTR [eax], 0
  00a08	0f 84 4e 0c 00
	00		 je	 $LN17@master

; 5469 : 				else
; 5470 : 					ATR_VCT_NO(a0) = 0;		//????
; 5471 : 				break;
; 5472 : 			case 31:                     //JL fix Êñ∞Â¢û31ÁöÑÂ§ÑÁêÜÔºåËá™ÁÑ∂Â®ÅËÉΩÊòØ31,‰∏çËÆæÁΩÆÁä∂ÊÄÅ
; 5473 : 				ATR_VCT_NO(a0) = 0;
; 5474 : 				break;
; 5475 : 			default:
; 5476 : 				ATR_VCT_NO(a0) = 0;		//????
; 5477 : 				set_single_jujutsu(d0, a1);		//ÓñïÓïíÓé£Óèû???

  00a0e	56		 push	 esi
  00a0f	ff 75 fc	 push	 DWORD PTR _d0$[ebp]
  00a12	e8 00 00 00 00	 call	 ?set_single_jujutsu@@YAXHPAUaction@@@Z ; set_single_jujutsu
  00a17	83 c4 08	 add	 esp, 8
  00a1a	e9 3d 0c 00 00	 jmp	 $LN17@master
$LN125@master:

; 5458 : 				break;
; 5459 : 				//??
; 5460 : 			case 2:
; 5461 : 				//Óíü?????
; 5462 : 				if (ATR_LIFE(a1) > 0)

  00a1f	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  00a23	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00a26	0f 8e 71 fd ff
	ff		 jle	 $LN126@master

; 5463 : 				{
; 5464 : 					ATR_BODY_CNT(a0) = 1;

  00a2c	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5465 : 					ATR_VCT_NO(a1) = 105;		//??Óïò??

  00a30	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 5466 : 					ATR_STIMER(a1) = 60;
; 5467 : 					set_single_jujutsu(d0, a1);		//ÓñïÓïíÓé£Óèû???

  00a33	56		 push	 esi
  00a34	c6 00 69	 mov	 BYTE PTR [eax], 105	; 00000069H
  00a37	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00a3a	c6 40 01 3c	 mov	 BYTE PTR [eax+1], 60	; 0000003cH
  00a3e	ff 75 fc	 push	 DWORD PTR _d0$[ebp]
  00a41	e8 00 00 00 00	 call	 ?set_single_jujutsu@@YAXHPAUaction@@@Z ; set_single_jujutsu
  00a46	83 c4 08	 add	 esp, 8

; 5468 : 				}

  00a49	e9 0e 0c 00 00	 jmp	 $LN17@master
$LN124@master:

; 5451 : 			{
; 5452 : 				//Óéï?Óêç?
; 5453 : 			case 0:
; 5454 : 				ATR_VCT_NO(a0) = 0;		//????

  00a4e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00a51	c6 00 00	 mov	 BYTE PTR [eax], 0

; 5455 : 				a2 = ATR_JUJUTSU_WORK(a1);

  00a54	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00a57	8b 81 10 01 00
	00		 mov	 eax, DWORD PTR [ecx+272]

; 5456 : 				ATR_JUJUTSU_WORK(a1) = NULL;
; 5457 : 				DeathAction(a2);		//Óé∑?

  00a5d	50		 push	 eax
  00a5e	c7 81 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+272], 0
  00a68	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00a6d	83 c4 04	 add	 esp, 4

; 5478 : 				break;
; 5479 : 			}
; 5480 : 			break;

  00a70	e9 e7 0b 00 00	 jmp	 $LN17@master
$LN130@master:

; 5481 : 			//ATR_ATTACK_KIND(a1);
; 5482 : 			/*
; 5483 : 					case ATT_MAGICSTATUS:	//andy_add magicstatus
; 5484 : 					d0 = get_num();
; 5485 : 					ATR_STATUS(a1) = d0;
; 5486 : 					switch (d0){
; 5487 : 					case 0:
; 5488 : 					ATR_VCT_NO(a0) = 0;
; 5489 : 					a2 = ATR_MAGICSU_WORK(a1);
; 5490 : 					ATR_MAGICSU_WORK(a1) = NULL;
; 5491 : 					DeathAction( a2 );
; 5492 : 					break;
; 5493 : 
; 5494 : 					default:
; 5495 : 					ATR_VCT_NO(a0) = 0;
; 5496 : 					set_magic_status(d0, a1);
; 5497 : 					break;
; 5498 : 					}
; 5499 : 					break;
; 5500 : 					*/
; 5501 : 
; 5502 : 			// ???????Óë∑????????????Óñ±
; 5503 : 		case ATT_DAMAGE:
; 5504 : 			ATR_BODY_CNT(a0) = 1;

  00a75	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00a78	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5505 : 			ATR_VCT_NO(a1) = 79;

  00a7c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00a7f	c6 00 4f	 mov	 BYTE PTR [eax], 79	; 0000004fH

; 5506 : 			ATR_LONG_WORK(0, a1) = 0;

  00a82	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00a85	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0

; 5507 : 			d2 = d0 = get_num();

  00a8f	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00a94	89 45 08	 mov	 DWORD PTR _d2$1$[ebp], eax
  00a97	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5508 : 			d3 = d1 = get_num();

  00a9a	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00a9f	89 45 e4	 mov	 DWORD PTR _d3$2$[ebp], eax
  00aa2	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
$att_damage_loop$371:

; 5509 : 		att_damage_loop:
; 5510 : 			ATR_DAMAGE(a1) = get_num();

  00aa5	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00aaa	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00aad	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 5511 : 			if (BattleCmd[command_point] == 'p')

  00ab0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  00ab5	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  00abc	75 0e		 jne	 SHORT $LN131@master

; 5512 : 				ATR_PET_DAMAGE(a1) = get_num();		//pet damage

  00abe	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00ac3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00ac6	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax
$LN131@master:

; 5513 : 
; 5514 : 			switch (d0)

  00acc	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00acf	83 e8 00	 sub	 eax, 0
  00ad2	0f 84 93 00 00
	00		 je	 $LN132@master
  00ad8	83 e8 01	 sub	 eax, 1
  00adb	74 1a		 je	 SHORT $LN152@master
  00add	83 e8 02	 sub	 eax, 2
  00ae0	0f 85 73 02 00
	00		 jne	 $LN23@master

; 5709 : #ifdef _PETSKILL_LER
; 5710 : 			case 3:	// Èó™ÂºÄÊîªÂáª
; 5711 : 				set_damage_num(a1, 0, -64);

  00ae6	6a c0		 push	 -64			; ffffffc0H
  00ae8	50		 push	 eax
  00ae9	56		 push	 esi
  00aea	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00aef	83 c4 0c	 add	 esp, 12			; 0000000cH
  00af2	e9 62 02 00 00	 jmp	 $LN23@master
$LN152@master:

; 5618 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5619 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5620 : 					ATR_VCT_NO(a1) = 78;
; 5621 : 					break;
; 5622 : #endif
; 5623 : #ifdef _PETSKILL_JUSTICE
; 5624 : 				case 9:
; 5625 : 					set_damage_num(a1, 45, -64);
; 5626 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5627 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5628 : 					ATR_VCT_NO(a1) = 78;
; 5629 : 					break;
; 5630 : #endif
; 5631 : #ifdef _PETSKILL_PROVOKEFIGHT
; 5632 : 				case 10:
; 5633 : 					set_damage_num(a1, 48, -64);
; 5634 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5635 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5636 : 					ATR_VCT_NO(a1) = 78;
; 5637 : 					break;
; 5638 : #endif
; 5639 : #ifdef _PRO3_ADDSKILL
; 5640 : 				case 11:
; 5641 : 					set_damage_num(a1, 49, -64);
; 5642 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5643 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5644 : 					ATR_VCT_NO(a1) = 78;
; 5645 : 					break;
; 5646 : 				case 12:
; 5647 : 					set_damage_num(a1, 50, -64);
; 5648 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5649 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5650 : 					ATR_VCT_NO(a1) = 78;
; 5651 : 					break;
; 5652 : 				case 13:
; 5653 : 					set_damage_num(a1, 51, -64);
; 5654 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5655 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5656 : 					ATR_VCT_NO(a1) = 78;
; 5657 : 					break;
; 5658 : #endif
; 5659 : #ifdef _PETSKILL_ADDATTCRAZED
; 5660 : 					/*	case 10:
; 5661 : 							set_damage_num(a1, 46, -64);
; 5662 : 							ATR_CHR_ACT_OLD(a1) = -1;
; 5663 : 							pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5664 : 							ATR_VCT_NO(a1) = 78;
; 5665 : 							break;*/
; 5666 : #endif
; 5667 : 				}
; 5668 : 				break;
; 5669 : 
; 5670 : 			case 1:		//??
; 5671 : 				switch (d1)

  00af7	8b 45 f8	 mov	 eax, DWORD PTR _d1$[ebp]
  00afa	83 e8 00	 sub	 eax, 0
  00afd	74 3e		 je	 SHORT $LN153@master
  00aff	83 e8 01	 sub	 eax, 1
  00b02	0f 85 51 02 00
	00		 jne	 $LN23@master

; 5678 : 					break;
; 5679 : 				case 1:		//?
; 5680 : 					set_damage_num(a1, 15, -64);

  00b08	6a c0		 push	 -64			; ffffffc0H
  00b0a	6a 0f		 push	 15			; 0000000fH
  00b0c	56		 push	 esi
  00b0d	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 5681 : 					ATR_MP(a1) += ATR_DAMAGE(a1);		//?????

  00b12	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00b15	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b18	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  00b1b	01 86 84 00 00
	00		 add	 DWORD PTR [esi+132], eax

; 5682 : 
; 5683 : #ifdef _FIXSHOWMPERR //Syu ADD ‰øÆÊ≠£Ë°•Ê∞îÊó∂Âä®ÁîªÊòæÁ§∫ÈîôËØØ
; 5684 : 					if (ATR_MP(a1) > pc.maxMp)

  00b21	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+28
  00b26	39 86 84 00 00
	00		 cmp	 DWORD PTR [esi+132], eax
  00b2c	0f 8e 43 01 00
	00		 jle	 $LN156@master

; 5685 : 						ATR_MP(a1) = pc.maxMp;

  00b32	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax

; 5686 : #else
; 5687 : 					if (ATR_MP(a1) > 100)		//????ÓêØ??
; 5688 : 						ATR_MP(a1) = 100;		//??????
; 5689 : #endif
; 5690 : 					//???
; 5691 : 					play_se(102, ATR_H_POS(a1), 240);

  00b38	e9 38 01 00 00	 jmp	 $LN156@master
$LN153@master:

; 5672 : 				{
; 5673 : 				case 0:		//?
; 5674 : 					set_damage_num(a1, 16, -64);

  00b3d	6a c0		 push	 -64			; ffffffc0H
  00b3f	6a 10		 push	 16			; 00000010H
  00b41	56		 push	 esi
  00b42	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 5675 : 					ATR_MP(a1) -= ATR_DAMAGE(a1);		//??????

  00b47	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00b4a	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b4d	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  00b50	29 86 84 00 00
	00		 sub	 DWORD PTR [esi+132], eax

; 5676 : 					if (ATR_MP(a1) < 0)		//?Ó†π???

  00b56	0f 89 fd 01 00
	00		 jns	 $LN23@master

; 5677 : 						ATR_MP(a1) = 0;		//????

  00b5c	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0

; 5692 : 					break;
; 5693 : #ifdef _PETSKILL_ADDATTCRAZED
; 5694 : 				case 3:
; 5695 : 					set_damage_num(a1, 46, -64);
; 5696 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5697 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5698 : 					ATR_VCT_NO(a1) = 78;
; 5699 : 					break;
; 5700 : 				case 4:
; 5701 : 					set_damage_num(a1, 47, -64);
; 5702 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5703 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5704 : 					ATR_VCT_NO(a1) = 78;
; 5705 : 					break;
; 5706 : #endif
; 5707 : 				}
; 5708 : 				break;

  00b66	e9 ee 01 00 00	 jmp	 $LN23@master
$LN132@master:

; 5515 : 			{
; 5516 : 			case 0:
; 5517 : 				switch (d1)

  00b6b	8b 45 f8	 mov	 eax, DWORD PTR _d1$[ebp]
  00b6e	83 f8 08	 cmp	 eax, 8
  00b71	0f 87 e2 01 00
	00		 ja	 $LN23@master
  00b77	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN356@master[eax*4]
$LN133@master:

; 5518 : 				{
; 5519 : 				case 0:
; 5520 : 					set_damage_num(a1, 6, -64);

  00b7e	6a c0		 push	 -64			; ffffffc0H
  00b80	6a 06		 push	 6
  00b82	56		 push	 esi
  00b83	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 5521 : 					ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  00b88	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 5522 : 					set_jujutsu_hit_mark(a1);		//Óé£Óèû??????Óù∏Óçï

  00b8b	56		 push	 esi
  00b8c	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  00b8f	29 46 78	 sub	 DWORD PTR [esi+120], eax
  00b92	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  00b97	83 c4 10	 add	 esp, 16			; 00000010H

; 5523 : 					if (ATR_LIFE(a1) <= 0)		//??????

  00b9a	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  00b9e	7f 0d		 jg	 SHORT $LN134@master

; 5524 : 					{
; 5525 : 						ATR_LIFE(a1) = 0;

  00ba0	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 5526 : 						slow_flg++;		//????Óåø

  00ba7	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN134@master:

; 5527 : 					}
; 5528 : 					ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  00bad	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 5529 : 					set_jujutsu_hit_mark(a1);		//

  00bb0	56		 push	 esi
  00bb1	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  00bb7	29 86 b0 01 00
	00		 sub	 DWORD PTR [esi+432], eax
  00bbd	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  00bc2	83 c4 04	 add	 esp, 4

; 5530 : 					//andy_log
; 5531 : 					if (ATR_PETFALL(a0) == 1)

  00bc5	83 bf bc 01 00
	00 01		 cmp	 DWORD PTR [edi+444], 1
  00bcc	75 0f		 jne	 SHORT $LN136@master

; 5532 : 					{
; 5533 : 						if (ATR_LIFE(a0) > 0)

  00bce	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  00bd2	7e 09		 jle	 SHORT $LN136@master

; 5534 : 							petfallChangeGraph(a0);

  00bd4	57		 push	 edi
  00bd5	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  00bda	83 c4 04	 add	 esp, 4
$LN136@master:

; 5535 : 					}
; 5536 : 					if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1))		//??????

  00bdd	83 be b0 01 00
	00 00		 cmp	 DWORD PTR [esi+432], 0
  00be4	7f 22		 jg	 SHORT $LN138@master
  00be6	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  00bed	74 19		 je	 SHORT $LN138@master

; 5537 : 					{
; 5538 : 						ATR_PET_LIFE(a1) = 0;
; 5539 : 						//slow_flg++;		//????Óåø
; 5540 : 						if (ATR_LIFE(a1) > 0)

  00bef	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  00bf3	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0
  00bfd	7e 09		 jle	 SHORT $LN138@master

; 5541 : 							petfallChangeGraph(a1);

  00bff	56		 push	 esi
  00c00	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  00c05	83 c4 04	 add	 esp, 4
$LN138@master:

; 5542 : 					}
; 5543 : 					ATR_CHR_ACT(a1) = ANIM_DAMAGE;		//???????????
; 5544 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5545 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00c08	6a 00		 push	 0
  00c0a	6a 00		 push	 0
  00c0c	56		 push	 esi
  00c0d	c7 86 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+332], 1
  00c17	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  00c21	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00c26	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5546 : 					ATR_VCT_NO(a1) = 78;		//???????
; 5547 : 					break;

  00c29	e9 25 01 00 00	 jmp	 $LN362@master
$LN139@master:

; 5548 : 				case 1:		//?
; 5549 : 					//??Óñ±Óù∏Óçï
; 5550 : 					set_damage_num(a1, 14, -64);

  00c2e	6a c0		 push	 -64			; ffffffc0H
  00c30	6a 0e		 push	 14			; 0000000eH
  00c32	56		 push	 esi
  00c33	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 5551 : 					ATR_LIFE(a1) += ATR_DAMAGE(a1);

  00c38	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00c3b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c3e	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00c41	01 46 78	 add	 DWORD PTR [esi+120], eax

; 5552 : 					if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???

  00c44	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00c4a	39 46 78	 cmp	 DWORD PTR [esi+120], eax
  00c4d	7e 03		 jle	 SHORT $LN140@master

; 5553 : 						ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???

  00c4f	89 46 78	 mov	 DWORD PTR [esi+120], eax
$LN140@master:

; 5554 : 					ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);

  00c52	8b 81 24 02 00
	00		 mov	 eax, DWORD PTR [ecx+548]
  00c58	01 86 b0 01 00
	00		 add	 DWORD PTR [esi+432], eax

; 5555 : 					if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))

  00c5e	8b 86 b0 01 00
	00		 mov	 eax, DWORD PTR [esi+432]
  00c64	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  00c6a	3b c1		 cmp	 eax, ecx
  00c6c	0f 4f c1	 cmovg	 eax, ecx
  00c6f	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax
$LN156@master:

; 5712 : 				break;
; 5713 : #endif
; 5714 : 			}
; 5715 : 			d6 = command_point;		//????????Óï§Óùç

  00c75	68 f0 00 00 00	 push	 240			; 000000f0H
  00c7a	ff 76 18	 push	 DWORD PTR [esi+24]
  00c7d	6a 66		 push	 102			; 00000066H
  00c7f	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00c84	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c87	e9 cd 00 00 00	 jmp	 $LN23@master
$LN142@master:

; 5556 : 						ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);
; 5557 : 					play_se(102, ATR_H_POS(a1), 240);
; 5558 : 					break;
; 5559 : 					//andy_add	ÂõûÂêàË°•Ë°Ä
; 5560 : 				case 2:
; 5561 : 					if (BattleCmd[command_point] == 'm')

  00c8c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  00c91	80 b8 00 00 00
	00 6d		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 109 ; 0000006dH
  00c98	75 0e		 jne	 SHORT $LN143@master

; 5562 : 						ATR_MPDAMAGE(a1) = get_num();

  00c9a	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00c9f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00ca2	89 81 30 02 00
	00		 mov	 DWORD PTR [ecx+560], eax
$LN143@master:

; 5563 : 					set_damage_num(a1, 36, -64);

  00ca8	6a c0		 push	 -64			; ffffffc0H
  00caa	6a 24		 push	 36			; 00000024H
  00cac	56		 push	 esi
  00cad	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 5564 : 					ATR_LIFE(a1) += ATR_DAMAGE(a1);

  00cb2	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00cb5	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cb8	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00cbb	01 46 78	 add	 DWORD PTR [esi+120], eax

; 5565 : 					ATR_MP(a1) += ATR_MPDAMAGE(a1);

  00cbe	8b 81 30 02 00
	00		 mov	 eax, DWORD PTR [ecx+560]
  00cc4	01 86 84 00 00
	00		 add	 DWORD PTR [esi+132], eax

; 5566 : 					if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))

  00cca	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00cd0	39 46 78	 cmp	 DWORD PTR [esi+120], eax
  00cd3	7e 03		 jle	 SHORT $LN144@master

; 5567 : 						ATR_LIFE(a1) = ATR_MAX_LIFE(a1);

  00cd5	89 46 78	 mov	 DWORD PTR [esi+120], eax
$LN144@master:

; 5568 : 					ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);

  00cd8	8b 81 24 02 00
	00		 mov	 eax, DWORD PTR [ecx+548]
  00cde	01 86 b0 01 00
	00		 add	 DWORD PTR [esi+432], eax

; 5569 : 					if (ATR_PET_LIFE(a1) >= ATR_PET_MAX_LIFE(a1))

  00ce4	8b 86 b0 01 00
	00		 mov	 eax, DWORD PTR [esi+432]
  00cea	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  00cf0	3b c1		 cmp	 eax, ecx

; 5570 : 					{
; 5571 : 						int k;
; 5572 : 
; 5573 : 						k = ATR_PET_MAX_LIFE(a1);
; 5574 : 						k = ATR_PET_LIFE(a1);
; 5575 : 						ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);
; 5576 : 						k = ATR_PET_LIFE(a1);
; 5577 : 					}
; 5578 : 					//ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 5579 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5580 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00cf2	6a 00		 push	 0
  00cf4	0f 4d c1	 cmovge	 eax, ecx
  00cf7	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  00d01	6a 00		 push	 0
  00d03	56		 push	 esi
  00d04	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax
  00d0a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00d0f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5581 : 					ATR_VCT_NO(a1) = 78;
; 5582 : 					break;

  00d12	eb 3f		 jmp	 SHORT $LN362@master
$LN146@master:

; 5583 : 				case 3:
; 5584 : 					set_damage_num(a1, 37, -64);

  00d14	6a c0		 push	 -64			; ffffffc0H
  00d16	6a 25		 push	 37			; 00000025H

; 5585 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5586 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5587 : 					ATR_VCT_NO(a1) = 78;
; 5588 : 					break;

  00d18	eb 1c		 jmp	 SHORT $LN363@master
$LN147@master:

; 5589 : 				case 4://Êîª
; 5590 : 					set_damage_num(a1, 38, -64);

  00d1a	6a c0		 push	 -64			; ffffffc0H
  00d1c	6a 26		 push	 38			; 00000026H

; 5591 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5592 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5593 : 					ATR_VCT_NO(a1) = 78;
; 5594 : 					break;

  00d1e	eb 16		 jmp	 SHORT $LN363@master
$LN148@master:

; 5595 : 				case 5://Èò≤
; 5596 : 					set_damage_num(a1, 39, -64);

  00d20	6a c0		 push	 -64			; ffffffc0H
  00d22	6a 27		 push	 39			; 00000027H

; 5597 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5598 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5599 : 					ATR_VCT_NO(a1) = 78;
; 5600 : 					break;

  00d24	eb 10		 jmp	 SHORT $LN363@master
$LN149@master:

; 5601 : 				case 6://Êïè
; 5602 : 					set_damage_num(a1, 40, -64);

  00d26	6a c0		 push	 -64			; ffffffc0H
  00d28	6a 28		 push	 40			; 00000028H

; 5603 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5604 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5605 : 					ATR_VCT_NO(a1) = 78;
; 5606 : 					break;

  00d2a	eb 0a		 jmp	 SHORT $LN363@master
$LN150@master:

; 5607 : #ifdef _SKILL_ADDBARRIER
; 5608 : 				case 7://ÊäóÊÄß
; 5609 : 					set_damage_num(a1, 43, -64);

  00d2c	6a c0		 push	 -64			; ffffffc0H
  00d2e	6a 2b		 push	 43			; 0000002bH

; 5610 : 					ATR_CHR_ACT_OLD(a1) = -1;
; 5611 : 					pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 5612 : 					ATR_VCT_NO(a1) = 78;
; 5613 : 					break;

  00d30	eb 04		 jmp	 SHORT $LN363@master
$LN151@master:

; 5614 : #endif 
; 5615 : #ifdef _PETSKILL_PEEL
; 5616 : 				case 8://Ë¢´Âç∏‰∏ãË£ÖÂ§á
; 5617 : 					set_damage_num(a1, 44, -64);

  00d32	6a c0		 push	 -64			; ffffffc0H
  00d34	6a 2c		 push	 44			; 0000002cH
$LN363@master:

; 5712 : 				break;
; 5713 : #endif
; 5714 : 			}
; 5715 : 			d6 = command_point;		//????????Óï§Óùç

  00d36	56		 push	 esi
  00d37	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00d3c	6a 00		 push	 0
  00d3e	6a 00		 push	 0
  00d40	56		 push	 esi
  00d41	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  00d4b	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00d50	83 c4 18	 add	 esp, 24			; 00000018H
$LN362@master:
  00d53	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00d56	c6 00 4e	 mov	 BYTE PTR [eax], 78	; 0000004eH
$LN23@master:
  00d59	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?command_point@@3HA

; 5716 : 			d0 = get_command();		//??????Óéï?Óèù?

  00d5f	e8 00 00 00 00	 call	 ?get_command@@YADXZ	; get_command
  00d64	0f be c0	 movsx	 eax, al
  00d67	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  00d6a	83 f8 44	 cmp	 eax, 68			; 00000044H

; 5717 : 			if (d0 == ATT_DAMAGE)		//??????

  00d6d	75 2a		 jne	 SHORT $LN160@master

; 5718 : 			{
; 5719 : 				a1 = p_party[d0 = get_num()];		//???????

  00d6f	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00d74	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 5720 : 				d0 = get_num();		//?????Óéï?Óèù?

  00d7b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00d80	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5721 : 				if (d2 == d0)		//????ÓôØ???

  00d83	39 45 08	 cmp	 DWORD PTR _d2$1$[ebp], eax
  00d86	75 11		 jne	 SHORT $LN160@master

; 5722 : 				{
; 5723 : 					d1 = get_num();		//?????Óéï?Óèù?

  00d88	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00d8d	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 5724 : 					if (d3 == d1)		//????ÓôØ???

  00d90	39 45 e4	 cmp	 DWORD PTR _d3$2$[ebp], eax
  00d93	0f 84 0c fd ff
	ff		 je	 $att_damage_loop$371
$LN160@master:

; 5725 : 						goto att_damage_loop;
; 5726 : 				}
; 5727 : 			}
; 5728 : 			command_point = d6;		//??????????

  00d99	89 1d 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, ebx

; 5729 : 			break;

  00d9f	e9 b8 08 00 00	 jmp	 $LN17@master
$LN161@master:

; 5730 : 			//BV|???Óë∑Óú±??????|Óî¥ÓíîÓú±?
; 5731 : 		case ATT_VARIABLE:		//??????????  ?????Óî¥ÓíîÓüâ?  ??????????
; 5732 : 			ATR_BODY_CNT(a0) = 1;

  00da4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00da7	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5733 : 			ATR_VCT_NO(a1) = 85;		//?????Óî¥ÓíîÓüâ??

  00dab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00dae	c6 00 55	 mov	 BYTE PTR [eax], 85	; 00000055H

; 5734 : 			break;

  00db1	e9 a6 08 00 00	 jmp	 $LN17@master
$LN162@master:

; 5735 : 			//BR|????Óë∑|????????
; 5736 : 		case ATT_REVERSE:		//??????????  Óî¥ÓíîÓúöÓòø  ??????????
; 5737 : 			ATR_VCT_NO(a0) = 0;		//????

  00db6	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00db9	c6 00 00	 mov	 BYTE PTR [eax], 0

; 5738 : 			d0 = get_num();		//?????????Óéï?Óèù?

  00dbc	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00dc1	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5739 : 			switch (d0)

  00dc4	85 c0		 test	 eax, eax
  00dc6	74 0e		 je	 SHORT $LN163@master

; 5746 : 				break;
; 5747 : 				//??
; 5748 : 			default:
; 5749 : 				set_attrib_reverse(a1);		//Óî¥ÓíîÓúöÓòø???

  00dc8	56		 push	 esi
  00dc9	e8 00 00 00 00	 call	 ?set_attrib_reverse@@YAXPAUaction@@@Z ; set_attrib_reverse
  00dce	83 c4 04	 add	 esp, 4
  00dd1	e9 86 08 00 00	 jmp	 $LN17@master
$LN163@master:

; 5740 : 			{
; 5741 : 				//???
; 5742 : 			case 0:
; 5743 : 				a2 = ATR_ATTRIB_WORK(a1);

  00dd6	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00dd9	8b 81 18 01 00
	00		 mov	 eax, DWORD PTR [ecx+280]

; 5744 : 				ATR_ATTRIB_WORK(a1) = NULL;
; 5745 : 				DeathAction(a2);		//Óé∑?

  00ddf	50		 push	 eax
  00de0	c7 81 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+280], 0
  00dea	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00def	83 c4 04	 add	 esp, 4

; 5750 : 				break;
; 5751 : 			}
; 5752 : 			break;

  00df2	e9 65 08 00 00	 jmp	 $LN17@master
$LN165@master:

; 5753 : 			//BL|????Óë∑|??
; 5754 : 		case ATT_LIFE:		//??????????  Óíü?Óüé?  ??????????
; 5755 : 			ATR_VCT_NO(a0) = 0;		//????

  00df7	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00dfa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 5756 : 			ATR_DAMAGE(a1) = get_num();		//??Óéï?Óèù?

  00dfd	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00e02	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00e05	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 5757 : 			//??Óñ±Óù∏Óçï
; 5758 : 			ATR_LIFE(a1) = ATR_DAMAGE(a1);

  00e08	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 5759 : 			if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???

  00e0b	8b 96 80 00 00
	00		 mov	 edx, DWORD PTR [esi+128]
  00e11	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00e14	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00e17	3b c2		 cmp	 eax, edx
  00e19	7e 03		 jle	 SHORT $LN166@master

; 5760 : 				ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???

  00e1b	89 56 78	 mov	 DWORD PTR [esi+120], edx
$LN166@master:

; 5761 : 			ATR_VCT_NO(a1) = 0;		//ÓòÖÓçè?
; 5762 : 			ATR_CHR_ACT(a1) = ANIM_STAND;		//ÓòÖÓçè???????
; 5763 : 			pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00e1e	6a 00		 push	 0
  00e20	6a 00		 push	 0
  00e22	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00e25	56		 push	 esi
  00e26	c7 86 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+332], 3
  00e30	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00e35	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5764 : 			break;

  00e38	e9 1f 08 00 00	 jmp	 $LN17@master
$LN167@master:

; 5765 : 			//BQ|????Óë∑
; 5766 : 		case ATT_QUIT:		//??????????  ???Óô¶??  ??????????
; 5767 : 			ATR_BODY_CNT(a0) = 1;

  00e3d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00e40	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5768 : 			ATR_VCT_NO(a1) = 87;		//???Óô¶??Óì∑?

  00e44	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00e47	c6 00 57	 mov	 BYTE PTR [eax], 87	; 00000057H

; 5769 : 			break;

  00e4a	e9 0d 08 00 00	 jmp	 $LN17@master
$LN168@master:

; 5770 : 			//BX|????Óë∑
; 5771 : 		case ATT_NIX:		//??????????  ????Óú∏  ??????????
; 5772 : 			ATR_BODY_CNT(a0) = 1;

  00e4f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00e52	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5773 : 			ATR_VCT_NO(a1) = 90;		//????Óú∏

  00e56	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00e59	c6 00 5a	 mov	 BYTE PTR [eax], 90	; 0000005aH

; 5774 : 			break;

  00e5c	e9 fb 07 00 00	 jmp	 $LN17@master
$LN169@master:

; 5775 : 			//B!|??????????????Óíï????
; 5776 : 		case ATT_COMPANIONS:	//??????????  Óôπ????  ??????????
; 5777 : 			ATR_BODY_CNT(a0) = 1;

  00e61	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00e64	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5778 : 			ATR_VCT_NO(a1) = 95;		//Óôπ?????Óåø?

  00e68	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00e6b	c6 00 5f	 mov	 BYTE PTR [eax], 95	; 0000005fH

; 5779 : 			break;

  00e6e	e9 e9 07 00 00	 jmp	 $LN17@master
$LN170@master:

; 5780 : 			//B#|??Óë∑?????Óë∑?Óíï????
; 5781 : 		case ATT_STEAL:	//??????????  ????  ??????????
; 5782 : 			ATR_BODY_CNT(a0) = 1;

  00e73	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00e76	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5783 : 			ATR_VCT_NO(a1) = 100;		//??????

  00e7a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00e7d	c6 00 64	 mov	 BYTE PTR [eax], 100	; 00000064H

; 5784 : 			break;

  00e80	e9 d7 07 00 00	 jmp	 $LN17@master
$LN171@master:

; 5785 : 			//B%|????Óë∑????Óú±?
; 5786 : 		case ATT_TALK:	//??????????  ????  ??????????
; 5787 : 			ATR_BODY_CNT(a0) = 1;

  00e85	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00e88	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5788 : 			ATR_VCT_NO(a1) = 110;		//?????

  00e8c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00e8f	c6 00 6e	 mov	 BYTE PTR [eax], 110	; 0000006eH

; 5789 : 			ATR_STIMER(a1) = 60;

  00e92	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00e95	c6 40 01 3c	 mov	 BYTE PTR [eax+1], 60	; 0000003cH

; 5790 : 			d0 = get_num();		//???Óú±?Óéï?Óèù?

  00e99	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5791 : 			//?????????Óù∏Óçï
; 5792 : 			set_damage_num(a1, 20, -64);

  00e9e	6a c0		 push	 -64			; ffffffc0H
  00ea0	6a 14		 push	 20			; 00000014H
  00ea2	56		 push	 esi
  00ea3	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  00ea6	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00eab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5793 : 			break;

  00eae	e9 a9 07 00 00	 jmp	 $LN17@master
$LN172@master:

; 5794 : #ifdef _FIREHUNTER_SKILL				// (‰∏çÂèØÂºÄ) ROG ADD Êú±ÈõÄÊäÄËÉΩ_ÁÅ´Á∫øÁåéÊùÄ
; 5795 : 		case ATT_FIRESKILL:
; 5796 : 			ATR_VCT_NO(a1) = FIRE_HUNTER_SKILL;		//ÁÅ´Á∫øÁåéÊùÄ

  00eb3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00eb6	c6 00 f0	 mov	 BYTE PTR [eax], 240	; 000000f0H

; 5797 : 			ATR_FIRST_FLG(a1) = 0;

  00eb9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00ebc	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 5798 : 			iBeAttNum = get_num();

  00ec3	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00ec8	a3 00 00 00 00	 mov	 DWORD PTR ?iBeAttNum@@3HA, eax ; iBeAttNum

; 5799 : 			ATR_BODY_WORK(0, a1) = p_party[iBeAttNum];		//Êïå‰∫∫‰ΩçÂùÄ

  00ecd	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00ed0	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00ed7	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 5800 : 			ATR_ATTACK_KIND(0, a1) = get_num();				//ÊîªÂáªÁßçÁ±ª

  00eda	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00edf	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00ee2	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 5801 : 			ATR_ATTACK_POW(0, a1) = get_num();				//ÊîªÂáªÂäõ

  00ee5	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00eea	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00eed	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 5802 : 			//			if ( BattleCmd[command_point] == 'p' )	{
; 5803 : 			ATR_ATTACK_PET_POW(0, a1) = get_num();		//petÊîªÂáªÂäõ??

  00ef3	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00ef8	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00efb	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax

; 5804 : 			//			}
; 5805 : 			d0 = get_num();							//‰∫∫Êï∞

  00f01	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00f06	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5806 : 			ATR_BODY_CNT(a1) = d0;					//Â§ö‰∫∫ÊîªÂáª

  00f09	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00f0c	88 41 54	 mov	 BYTE PTR [ecx+84], al

; 5807 : 			for (d7 = 2; d7 < d0 + 2; d7++)

  00f0f	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00f12	83 c0 02	 add	 eax, 2
  00f15	83 f8 02	 cmp	 eax, 2
  00f18	0f 8e 3e 07 00
	00		 jle	 $LN17@master

; 5794 : #ifdef _FIREHUNTER_SKILL				// (‰∏çÂèØÂºÄ) ROG ADD Êú±ÈõÄÊäÄËÉΩ_ÁÅ´Á∫øÁåéÊùÄ
; 5795 : 		case ATT_FIRESKILL:
; 5796 : 			ATR_VCT_NO(a1) = FIRE_HUNTER_SKILL;		//ÁÅ´Á∫øÁåéÊùÄ

  00f1e	bb b8 00 00 00	 mov	 ebx, 184		; 000000b8H
  00f23	bf 02 00 00 00	 mov	 edi, 2
$LL31@master:

; 5808 : 			{
; 5809 : 				int x = get_num();

  00f28	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5810 : 
; 5811 : 				if (x == iBeAttNum)               //Ë¢´ÊîªÂáªÁõÆÊ†áÁöÑÈ≠îÊ≥ï‰º§ÂÆ≥

  00f2d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?iBeAttNum@@3HA ; iBeAttNum
  00f33	75 10		 jne	 SHORT $LN173@master

; 5812 : 				{
; 5813 : 					tarMgiDem = 1;

  00f35	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tarMgiDem@@3HA, 1 ; tarMgiDem

; 5814 : 					tarpos = d7;//ATR_BODY_CNT(a1)--;

  00f3f	89 3d 00 00 00
	00		 mov	 DWORD PTR ?tarpos@@3HA, edi ; tarpos
$LN173@master:

; 5815 : 				}
; 5816 : 				ATR_BODY_WORK(d7 ,a1) = p_party[x];		//Êïå‰∫∫‰ΩçÂùÄ

  00f45	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00f48	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00f4f	89 84 19 54 ff
	ff ff		 mov	 DWORD PTR [ecx+ebx-172], eax

; 5817 : 				ATR_ATTACK_KIND(d7 ,a1) = get_num();		//ÊîªÂáªÁßçÁ±ª

  00f56	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00f5b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00f5e	89 44 19 b0	 mov	 DWORD PTR [ecx+ebx-80], eax

; 5818 : 				ATR_ATTACK_POW(d7 ,a1) = get_num();				//ÊîªÂáªÂäõ

  00f62	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00f67	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00f6a	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax

; 5819 : 				ATR_ATTACK_PET_POW(d7 ,a1) = get_num();		//petÊîªÂáªÂäõ

  00f6d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00f72	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00f75	47		 inc	 edi
  00f76	89 84 19 24 01
	00 00		 mov	 DWORD PTR [ecx+ebx+292], eax
  00f7d	83 c3 04	 add	 ebx, 4
  00f80	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00f83	83 c0 02	 add	 eax, 2
  00f86	3b f8		 cmp	 edi, eax
  00f88	7c 9e		 jl	 SHORT $LL31@master

; 5820 : 				//}
; 5821 : 			}
; 5822 : 			break;

  00f8a	8b 7d 08	 mov	 edi, DWORD PTR _a0$[ebp]
  00f8d	e9 ca 06 00 00	 jmp	 $LN17@master
$LN174@master:

; 5823 : #endif
; 5824 : #ifdef _PROFESSION_ADDSKILL
; 5825 : 		case ATT_BOUNDARY:
; 5826 : 			ATR_VCT_NO(a0) = 0;

  00f92	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00f95	c6 00 00	 mov	 BYTE PTR [eax], 0

; 5827 : 			ATR_CHR_ACT(a0) = ANIM_STAND;
; 5828 : 			ATR_FIRST_FLG(a0) = 0;	

  00f98	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00f9b	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  00fa5	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 5829 : 			ATR_VCT_NO(a1) = 0;		//ÓòÖÓçè?

  00fac	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00faf	c6 00 00	 mov	 BYTE PTR [eax], 0

; 5830 : 			ATR_CHR_ACT(a1) = ANIM_STAND;		//ÓòÖÓçè???????
; 5831 : 			ATR_FIRST_FLG(a1) = 0;

  00fb2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00fb5	c7 86 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+332], 3
  00fbf	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 5832 : 			d0 = get_num();		//?????????Óéï?Óèù?

  00fc6	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5833 : 			BuildBoundaryMagicData( d0 );

  00fcb	50		 push	 eax
  00fcc	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  00fcf	e8 00 00 00 00	 call	 ?BuildBoundaryMagicData@@YAHH@Z ; BuildBoundaryMagicData
  00fd4	83 c4 04	 add	 esp, 4

; 5834 : 			d0 = get_num();

  00fd7	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00fdc	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5835 : 			break;

  00fdf	e9 78 06 00 00	 jmp	 $LN17@master
$LN175@master:

; 5836 : #endif
; 5837 : #ifdef _PETSKILL_RIDE
; 5838 : 		case ATT_RIDE:
; 5839 : 			ATR_VCT_NO(a0) = 0;

  00fe4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00fe7	c6 00 00	 mov	 BYTE PTR [eax], 0

; 5840 : 			ATR_CHR_ACT(a0) = ANIM_STAND;
; 5841 : 			ATR_FIRST_FLG(a0) = 0;	

  00fea	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00fed	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  00ff7	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 5842 : 			ATR_VCT_NO(a1) = 0;		//ÓòÖÓçè?

  00ffe	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01001	c6 00 00	 mov	 BYTE PTR [eax], 0

; 5843 : 			ATR_CHR_ACT(a1) = ANIM_STAND;		//ÓòÖÓçè???????
; 5844 : 			ATR_FIRST_FLG(a1) = 0;

  01004	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01007	c7 86 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+332], 3
  01011	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 5845 : 			d0 = get_num(); //‰∏äÈ©¨ÂõæÂè∑

  01018	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5846 : 			petrideChangeGraph(a1,d0);

  0101d	50		 push	 eax
  0101e	56		 push	 esi
  0101f	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  01022	e8 00 00 00 00	 call	 ?petrideChangeGraph@@YAXPAUaction@@H@Z ; petrideChangeGraph
  01027	83 c4 08	 add	 esp, 8

; 5847 : 			d0 = get_num();

  0102a	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0102f	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5848 : 			break;

  01032	e9 25 06 00 00	 jmp	 $LN17@master
$LN176@master:

; 5849 : #endif
; 5850 : 		case ATT_BOW:		//??????????  ???  ??????????
; 5851 : 			ATR_VCT_NO(a1) = 30;		//????

  01037	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0103a	c6 00 1e	 mov	 BYTE PTR [eax], 30	; 0000001eH

; 5852 : 			ATR_LONG_WORK(0, a1) = get_num();		//Óû¢Óú±????

  0103d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01042	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01045	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax

; 5853 : 			if (ATR_LONG_WORK(0, a1) == 0)		//???

  0104b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0104e	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR [eax+308], 0
  01055	75 24		 jne	 SHORT $LN177@master

; 5854 : 			{
; 5855 : 				ATR_VCT_NO(a1) = 32;		//????

  01057	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H

; 5856 : 				ATR_STIMER(a1) = 0;		//?Óöç???????

  0105a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0105d	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 5857 : 				ATR_DAMAGE(a1) = 1;		//

  01061	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01064	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1

; 5858 : 				ATR_PET_DAMAGE(a1) = 1;

  0106b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0106e	c7 80 24 02 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+548], 1
  01078	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN177@master:

; 5859 : 			}
; 5860 : 			ATR_FIRST_FLG(a1) = 0;		//

  0107b	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 5861 : 			ATR_BODY_WORK(0, a1) = p_party[get_num()];		//Óîá?Óò©???

  01082	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01087	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0108a	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  01091	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 5862 : 			ATR_ATTACK_KIND(0, a1) = get_num();		//??Óéú????

  01094	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01099	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0109c	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 5863 : 			ATR_ATTACK_POW(0, a1) = get_num();		//??????

  0109f	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  010a4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  010a7	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 5864 : 			if (BattleCmd[command_point] == 'p')

  010ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  010b2	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  010b9	75 13		 jne	 SHORT $LN178@master

; 5865 : 				ATR_ATTACK_PET_POW(0, a1) = get_num();		//pet??????

  010bb	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  010c0	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  010c3	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  010c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN178@master:

; 5866 : 
; 5867 : 			//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 5868 : #ifdef _ATTACK_EFFECT
; 5869 : 			if (BattleCmd[command_point] == 's')

  010ce	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  010d5	75 0e		 jne	 SHORT $LN179@master

; 5870 : 				ATR_LONG_WORK(0, a1) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  010d7	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  010dc	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  010df	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
$LN179@master:

; 5871 : #endif
; 5872 : 
; 5873 : 			ATR_BODY_CNT(a0) = 1;

  010e5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 5874 : #ifdef _SHOOTCHESTNUT	// Syu ADD ÂÆ†ÊäÄÔºö‰∏¢Ê†óÂ≠ê
; 5875 : 			(ATR_CHR_NO(a1) == 101578) ? ShooterNum = 101578 : ShooterNum = -1;
; 5876 : #endif
; 5877 : 			break;

  010e8	83 c9 ff	 or	 ecx, -1
  010eb	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1
  010ef	b8 ca 8c 01 00	 mov	 eax, 101578		; 00018ccaH
  010f4	39 86 44 01 00
	00		 cmp	 DWORD PTR [esi+324], eax
  010fa	0f 45 c1	 cmovne	 eax, ecx
  010fd	a3 00 00 00 00	 mov	 DWORD PTR ?ShooterNum@@3HA, eax ; ShooterNum
  01102	e9 55 05 00 00	 jmp	 $LN17@master
$LN180@master:

; 5878 : 		case ATT_BOOMERANG:		//??????????  ???????  ??????????
; 5879 : 			ATR_VCT_NO(a1) = 70;		//????????

  01107	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0110a	c6 00 46	 mov	 BYTE PTR [eax], 70	; 00000046H

; 5880 : 			ATR_FIRST_FLG(a1) = 0;		//

  0110d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01110	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 5881 : 			ATR_BODY_CNT(a0) = 1;

  01117	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0111a	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5882 : 			break;

  0111e	e9 39 05 00 00	 jmp	 $LN17@master
$LN181@master:

; 5883 : 		case ATT_FIRE:		//??????????  ?Óüπ???  ??????????
; 5884 : 			d0 = get_body_cnt();		//??Óë∑?Óéï?Óèù?

  01123	e8 00 00 00 00	 call	 ?get_body_cnt@@YAHXZ	; get_body_cnt
  01128	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  0112b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 5885 : 			if (d0 != 1)		//ÓïÉÓúä????

  0112e	c6 01 14	 mov	 BYTE PTR [ecx], 20	; 00000014H
  01131	83 f8 01	 cmp	 eax, 1
  01134	74 42		 je	 SHORT $LN182@master

; 5886 : 			{
; 5887 : 				ATR_VCT_NO(a1) = 20;		//???Óüπ?
; 5888 : 				ATR_BODY_CNT(a0) = d0;		//??Óúä??

  01136	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01139	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  0113c	88 41 54	 mov	 BYTE PTR [ecx+84], al

; 5889 : 				ATR_BODY_CNT(a1) = d0;		//

  0113f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01142	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  01145	88 41 54	 mov	 BYTE PTR [ecx+84], al

; 5890 : 				if (ATR_GROUP_FLG(a1) == 0)

  01148	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0114b	8a 40 5e	 mov	 al, BYTE PTR [eax+94]
  0114e	84 c0		 test	 al, al
  01150	75 0f		 jne	 SHORT $LN184@master

; 5891 : 					ATR_CHR_ANG(a1) = 3;

  01152	c7 86 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+340], 3
  0115c	e9 fb 04 00 00	 jmp	 $LN17@master
$LN184@master:

; 5892 : 				else if (ATR_GROUP_FLG(a1) == 1)

  01161	3c 01		 cmp	 al, 1
  01163	0f 85 f3 04 00
	00		 jne	 $LN17@master

; 5893 : 					ATR_CHR_ANG(a1) = 7;

  01169	c7 86 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+340], 7

; 5894 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 5895 : 				else if (ATR_GROUP_FLG(a1) == 2)
; 5896 : 					ATR_CHR_ANG(a1) = 5;
; 5897 : 				else if (ATR_GROUP_FLG(a1) == 3)	
; 5898 : 					ATR_CHR_ANG(a1) = 1;
; 5899 : #endif
; 5900 : 
; 5901 : 			}

  01173	e9 e4 04 00 00	 jmp	 $LN17@master
$LN182@master:

; 5902 : 			else
; 5903 : 			{	//?Óúä????
; 5904 : 				ATR_VCT_NO(a1) = 20;		//???Óüπ?
; 5905 : 				ATR_BODY_CNT(a0) = 1;		//?Óúä??

  01178	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0117b	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5906 : 				ATR_BODY_CNT(a1) = 1;		//

  0117f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01182	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 5907 : 				a2 = ATR_BODY_WORK(0, a1) = p_party[get_num()];		//Óîá?Óò©

  01186	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0118b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0118e	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  01195	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 5908 : 			}
; 5909 : 			break;

  01198	e9 bf 04 00 00	 jmp	 $LN17@master
$LN187@master:

; 5910 : 		case ATT_SYNCHRONOUS:		//??????????  ÓôØ???  ??????????
; 5911 : 			a3 = a2 = a1;		//Óîá?Óò©Óï§Óùç
; 5912 : 			d1 = 0;		//????????
; 5913 : 			d2 = 0;
; 5914 : 			d7 = 0;		//??ÓéÅ????

  0119d	33 db		 xor	 ebx, ebx
  0119f	89 75 e8	 mov	 DWORD PTR _a2$5$[ebp], esi
  011a2	89 75 f0	 mov	 DWORD PTR _a3$2$[ebp], esi
  011a5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _d1$[ebp], 0
  011ac	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _d2$2$[ebp], 0
  011b3	89 5d ec	 mov	 DWORD PTR _d7$3$[ebp], ebx

; 5915 : 			while (1)
; 5916 : 			{
; 5917 : 				d0 = get_num();		//???????

  011b6	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  011bb	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5918 : 				if (d0 == 255)		//Óé∑???

  011be	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  011c3	0f 84 0a 01 00
	00		 je	 $LN288@master
  011c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL32@master:

; 5919 : 					break;
; 5920 : 				a1 = p_party[d0];		//???????

  011d0	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 5921 : 				if (ATR_NAME(a1) == NULL)		//????????

  011d7	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  011db	75 2b		 jne	 SHORT $LN189@master

; 5922 : 				{
; 5923 : #ifdef _STONDEBUG_
; 5924 : 					MessageBox(hWnd, "Ê≤°ÊúâÂêà‰ΩìÊîªÂáªÁöÑÂêçÂ≠óÁ¥ßÊÄ•ËøûÁªúÊó•Êú¨ÔºÅ", "Error", MB_OK);
; 5925 : #endif
; 5926 : 					get_num();		//??Óéú????

  011dd	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5927 : 					get_num();		//??????

  011e2	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5928 : 					get_num();		//????Óå´

  011e7	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5929 : 					if (BattleCmd[command_point] == 'p')

  011ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  011f1	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  011f8	0f 85 c2 00 00
	00		 jne	 $LN300@master

; 5930 : 						get_num();		//pet????Óå´

  011fe	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5931 : 
; 5932 : 					continue;

  01203	e9 b8 00 00 00	 jmp	 $LN300@master
$LN189@master:

; 5933 : 				}
; 5934 : 				if (d7 == 0)		//?Óë∑????ÓéÅ??

  01208	85 db		 test	 ebx, ebx
  0120a	75 09		 jne	 SHORT $LN191@master

; 5935 : 					ATR_COUNTER(a0) = a1;		//?????Óüâ?

  0120c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0120f	89 b0 08 01 00
	00		 mov	 DWORD PTR [eax+264], esi
$LN191@master:

; 5936 : 				ATR_VCT_NO(a1) = 1;		//Óì∑Óë¥?

  01215	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 5937 : 				ATR_BODY_WORK(0, a1) = a3;		//Óîá?Óò©

  01218	8b 4d f0	 mov	 ecx, DWORD PTR _a3$2$[ebp]
  0121b	c6 00 01	 mov	 BYTE PTR [eax], 1
  0121e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01221	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 5938 : 				ATR_BODY_WORK(1, a2) = a1;		//Óì∑????ÓéÅ?????ÓéÅ???

  01224	8b 45 e8	 mov	 eax, DWORD PTR _a2$5$[ebp]
  01227	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0122a	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 5939 : 				ATR_ATTACK_KIND(0, a1) = get_num();

  0122d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01232	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01235	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 5940 : #ifdef _PETSKILL_ACUPUNCTURE
; 5941 : 				///////////////////////
; 5942 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 5943 : 				if (ATR_ATTACK_KIND(0, a1) & ATT_REFLEX+ATT_ABSORPTION+ATT_BALLIA+ATT_TRAP+ATT_ACUPUNCTURE

  01238	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0123b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01240	f7 43 60 00 1c
	00 4a		 test	 DWORD PTR [ebx+96], 1241521152 ; 4a001c00H
  01247	89 83 b0 00 00
	00		 mov	 DWORD PTR [ebx+176], eax
  0124d	74 15		 je	 SHORT $LN192@master

; 5944 : #ifdef _PET_ITEM
; 5945 : 					+ ATT_ATTACKBACK
; 5946 : #endif
; 5947 : 					)
; 5948 : #else
; 5949 : 				if (ATR_ATTACK_KIND(0, a1) & ATT_REFLEX+ATT_ABSORPTION+ATT_BALLIA+ATT_ACUPUNCTURE
; 5950 : #ifdef _PET_ITEM
; 5951 : 					+ ATT_ATTACKBACK
; 5952 : #endif
; 5953 : 					)
; 5954 : #endif
; 5955 : 					///////////////////////
; 5956 : #else
; 5957 : 				///////////////////////
; 5958 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 5959 : 				if (ATR_ATTACK_KIND(0, a1) & ATT_REFLEX+ATT_ABSORPTION+ATT_BALLIA+ATT_TRAP)
; 5960 : #else
; 5961 : 				if (ATR_ATTACK_KIND(0, a1) & ATT_REFLEX + ATT_ABSORPTION + ATT_BALLIA)
; 5962 : #endif
; 5963 : 					///////////////////////
; 5964 : #endif
; 5965 : 				{
; 5966 : 					ATR_ATTACK_POW(0, a1) = get_num();		//??????
; 5967 : 					if (BattleCmd[command_point] == 'p')

  0124f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  01254	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  0125b	75 2e		 jne	 SHORT $LN196@master

; 5968 : 						ATR_ATTACK_PET_POW(0, a1) = get_num();		//pet??????

  0125d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 5969 : 					//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 5970 : #ifdef _ATTACK_EFFECT
; 5971 : 					if (BattleCmd[command_point] == 's')
; 5972 : 						ATR_LONG_WORK(0, a1) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑
; 5973 : #endif
; 5974 : 				}

  01262	eb 19		 jmp	 SHORT $LN365@master
$LN192@master:

; 5975 : 				else
; 5976 : 				{
; 5977 : 					d1 += ATR_ATTACK_POW(0, a1) = get_num();		//????Óå´

  01264	01 45 f8	 add	 DWORD PTR _d1$[ebp], eax

; 5978 : 					if (BattleCmd[command_point] == 'p')

  01267	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  0126c	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  01273	75 16		 jne	 SHORT $LN196@master

; 5979 : 						d2 += ATR_ATTACK_PET_POW(0, a1) = get_num();		//pet????Óå´

  01275	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0127a	01 45 08	 add	 DWORD PTR _d2$2$[ebp], eax
$LN365@master:

; 5980 : 					else
; 5981 : 						LogToBattleError(BattleCmd, __LINE__);
; 5982 : 
; 5983 : 					//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 5984 : #ifdef _ATTACK_EFFECT
; 5985 : 					if (BattleCmd[command_point] == 's')
; 5986 : 						ATR_LONG_WORK(0, a1) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑
; 5987 : #endif
; 5988 : 				}
; 5989 : 				ATR_FIRST_FLG(a1) = 0;		//??????

  0127d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01280	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  01286	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN196@master:
  0128b	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  01292	75 0e		 jne	 SHORT $LN198@master
  01294	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01299	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0129c	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
$LN198@master:
  012a2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 5990 : 				ATR_SYNC_FLG(a1) = 1;		//
; 5991 : 				a2 = a1;		//Óì∑????ÓéÅ
; 5992 : 				d7++;		//??ÓéÅ??Óå´

  012a5	8b 5d ec	 mov	 ebx, DWORD PTR _d7$3$[ebp]
  012a8	43		 inc	 ebx
  012a9	89 75 e8	 mov	 DWORD PTR _a2$5$[ebp], esi
  012ac	89 5d ec	 mov	 DWORD PTR _d7$3$[ebp], ebx
  012af	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  012b6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  012b9	c6 80 23 01 00
	00 01		 mov	 BYTE PTR [eax+291], 1
$LN300@master:

; 5915 : 			while (1)
; 5916 : 			{
; 5917 : 				d0 = get_num();		//???????

  012c0	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  012c5	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 5918 : 				if (d0 == 255)		//Óé∑???

  012c8	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  012cd	0f 85 fd fe ff
	ff		 jne	 $LL32@master
$LN288@master:

; 5993 : 			}
; 5994 : 			ATR_SYNC_FLG(a1) = 2;		//?????

  012d3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  012d6	c6 80 23 01 00
	00 02		 mov	 BYTE PTR [eax+291], 2

; 5995 : 			if (d1)		//???????

  012dd	8b 4d f8	 mov	 ecx, DWORD PTR _d1$[ebp]
  012e0	85 c9		 test	 ecx, ecx
  012e2	74 09		 je	 SHORT $LN199@master

; 5996 : 				ATR_ATTACK_POW(0, a1) = d1;		//????????

  012e4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  012e7	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
$LN199@master:

; 5997 : 			if (d2)		//???????

  012ed	8b 4d 08	 mov	 ecx, DWORD PTR _d2$2$[ebp]
  012f0	85 c9		 test	 ecx, ecx
  012f2	74 09		 je	 SHORT $LN200@master

; 5998 : 				ATR_ATTACK_PET_POW(0, a1) = d2;		//????????

  012f4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  012f7	89 88 d4 01 00
	00		 mov	 DWORD PTR [eax+468], ecx
$LN200@master:

; 5999 : 			ATR_LONG_WORK(0, a3) = d7;		//??????

  012fd	8b 45 f0	 mov	 eax, DWORD PTR _a3$2$[ebp]
  01300	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01303	89 98 34 01 00
	00		 mov	 DWORD PTR [eax+308], ebx

; 6000 : 			ATR_BODY_CNT(a0) = d7;

  01309	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0130c	88 58 54	 mov	 BYTE PTR [eax+84], bl

; 6001 : 			break;

  0130f	e9 48 03 00 00	 jmp	 $LN17@master
$LN201@master:

; 6002 : 		case 2:		//??????????  ???Óüπ?  ??????????
; 6003 : 			d0 = get_num();		//??Óë∑?Óéï?Óèù?

  01314	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01319	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  0131c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 6004 : 			if (d0 != 1)		//??Óúä????

  0131f	c6 01 19	 mov	 BYTE PTR [ecx], 25	; 00000019H
  01322	83 f8 01	 cmp	 eax, 1
  01325	74 40		 je	 SHORT $LN202@master

; 6005 : 			{
; 6006 : 				ATR_VCT_NO(a1) = 25;		//???Óüπ?
; 6007 : 				ATR_BODY_CNT(a0) = d0;		//??Óúä??

  01327	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 6008 : 				ATR_BODY_CNT(a1) = d0;		//
; 6009 : 				for (d7 = 0; d7 < d0; d7++)

  0132a	33 db		 xor	 ebx, ebx
  0132c	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  0132f	88 41 54	 mov	 BYTE PTR [ecx+84], al
  01332	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01335	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  01338	88 41 54	 mov	 BYTE PTR [ecx+84], al
  0133b	39 5d fc	 cmp	 DWORD PTR _d0$[ebp], ebx
  0133e	7e 52		 jle	 SHORT $LN35@master
$LL36@master:

; 6010 : 				{
; 6011 : 					ATR_BODY_WORK(d7, a1) = p_party[get_num()];		//Óîá?Óò©

  01340	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01345	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01348	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0134f	89 44 99 04	 mov	 DWORD PTR [ecx+ebx*4+4], eax

; 6012 : 					ATR_ATTACK_KIND(d7, a1) = get_num();		//??Óéú????

  01353	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01358	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0135b	89 44 99 60	 mov	 DWORD PTR [ecx+ebx*4+96], eax
  0135f	43		 inc	 ebx
  01360	3b 5d fc	 cmp	 ebx, DWORD PTR _d0$[ebp]
  01363	7c db		 jl	 SHORT $LL36@master

; 6013 : 				}
; 6014 : 				d0 = 320;
; 6015 : 				d1 = 240;
; 6016 : 				radar(a1, &d0, &d1);	//????
; 6017 : 				ATR_CRS(a1) = d0;		/* ?????? */
; 6018 : 				ATR_CHR_ANG(a1) = crs_change_tbl[d0];		/* ????? */
; 6019 : 			}

  01365	eb 2b		 jmp	 SHORT $LN35@master
$LN202@master:

; 6020 : 			else
; 6021 : 			{
; 6022 : 				ATR_VCT_NO(a1) = 25;		//???Óüπ?
; 6023 : 				ATR_BODY_CNT(a0) = 1;		//?Óúä??

  01367	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0136a	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 6024 : 				ATR_BODY_CNT(a1) = 1;		//

  0136e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01371	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 6025 : 				ATR_BODY_WORK(0, a1) = p_party[get_num()];		//Óîá?Óò©

  01375	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0137a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0137d	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  01384	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 6026 : 				ATR_ATTACK_KIND(0, a1) = get_num();		//??Óéú????

  01387	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0138c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0138f	89 41 60	 mov	 DWORD PTR [ecx+96], eax
$LN35@master:

; 6027 : 				d0 = 320;
; 6028 : 				d1 = 240;
; 6029 : 				radar(a1, &d0, &d1);	//????
; 6030 : 				ATR_CRS(a1) = d0;		/* ?????? */
; 6031 : 				ATR_CHR_ANG(a1) = crs_change_tbl[d0];		/* ????? */
; 6032 : 			}
; 6033 : 			break;

  01392	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  01395	c7 45 fc 40 01
	00 00		 mov	 DWORD PTR _d0$[ebp], 320 ; 00000140H
  0139c	50		 push	 eax
  0139d	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  013a0	c7 45 f8 f0 00
	00 00		 mov	 DWORD PTR _d1$[ebp], 240 ; 000000f0H
  013a7	50		 push	 eax
  013a8	56		 push	 esi
  013a9	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar
  013ae	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  013b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  013b4	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  013ba	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  013bd	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?crs_change_tbl@@3PAEA[eax]
  013c3	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  013c6	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  013cc	e9 8b 02 00 00	 jmp	 $LN17@master
$LN204@master:

; 6034 : 		case 3:		//??????????  ????  ??????????
; 6035 : 			d0 = get_num();		//??Óë∑?Óéï?Óèù?

  013d1	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  013d6	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 6036 : 			ATR_VCT_NO(a1) = 30;		//???Óüπ?
; 6037 : 			ATR_BODY_CNT(a0) = d0;		//?Óúä??
; 6038 : 			ATR_BODY_CNT(a1) = d0;		//
; 6039 : 			for (d7 = 0; d7 < d0; d7++)

  013d9	33 db		 xor	 ebx, ebx
  013db	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  013de	c6 00 1e	 mov	 BYTE PTR [eax], 30	; 0000001eH
  013e1	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  013e4	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  013e7	88 41 54	 mov	 BYTE PTR [ecx+84], al
  013ea	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  013ed	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  013f0	88 41 54	 mov	 BYTE PTR [ecx+84], al
  013f3	39 5d fc	 cmp	 DWORD PTR _d0$[ebp], ebx
  013f6	0f 8e 60 02 00
	00		 jle	 $LN17@master
  013fc	0f 1f 40 00	 npad	 4
$LL39@master:

; 6040 : 			{
; 6041 : 				ATR_BODY_WORK(d7, a1) = p_party[get_num()];		//Óîá?Óò©

  01400	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01405	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01408	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0140f	89 44 99 04	 mov	 DWORD PTR [ecx+ebx*4+4], eax

; 6042 : 				ATR_ATTACK_KIND(d7, a1) = get_num();		//??Óéú????

  01413	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01418	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0141b	89 44 99 60	 mov	 DWORD PTR [ecx+ebx*4+96], eax
  0141f	43		 inc	 ebx
  01420	3b 5d fc	 cmp	 ebx, DWORD PTR _d0$[ebp]
  01423	7c db		 jl	 SHORT $LL39@master

; 6043 : 			}
; 6044 : 			break;

  01425	e9 32 02 00 00	 jmp	 $LN17@master
$LN205@master:

; 6045 : 		case ATT_TAKE:		//??????????  Óüô?  ??????????
; 6046 : 			ATR_VCT_NO(a1) = 35;		//Óüô??Óåø

  0142a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0142d	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H

; 6047 : 			ATR_BODY_WORK(0, a1) = p_party[get_num()];		//Óîá?Óò©???

  01430	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01435	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01438	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0143f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 6048 : 			ATR_ATTACK_KIND(0, a1) = get_num();		//Óíï?ÓçßÓõ≤???

  01442	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01447	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0144a	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 6049 : 			ATR_BODY_CNT(a0) = 1;

  0144d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01450	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 6050 : 			break;

  01454	e9 03 02 00 00	 jmp	 $LN17@master
$LN206@master:

; 6051 : 		case ATT_ESCAPE:		//??????????  ÓìñÓô¨ÓñäÓèù  ??????????
; 6052 : 			ATR_BODY_CNT(a0) = 1;		//ÓñäÓèùÓéÅÓë∑????

  01459	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0145c	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 6053 : 			d1 = ATR_ATTACK_KIND(0, a1) = get_num();		//Óíï?ÓçßÓõ≤???

  01460	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01465	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01468	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 6054 : 			ATR_VCT_NO(a1) = 52;		//ÓñäÓèù?
; 6055 : 			if (BattleMyNo == ATR_PLACE_NO(a1))		//ÓçòÓû§??

  0146b	33 c9		 xor	 ecx, ecx
  0146d	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  01470	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01473	c6 00 34	 mov	 BYTE PTR [eax], 52	; 00000034H
  01476	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01479	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]
  01480	39 05 00 00 00
	00		 cmp	 DWORD PTR ?BattleMyNo@@3HA, eax ; BattleMyNo
  01486	0f 94 c1	 sete	 cl
  01489	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 6056 : 				d0 = 1;
; 6057 : 			else
; 6058 : 				d0 = 0;
; 6059 : 			//ACTION_INFÓìÜÓòãÓéÅ??????
; 6060 : 			ATR_GUARD_FLG(a1) = 0;

  0148c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0148f	c6 80 1c 01 00
	00 00		 mov	 BYTE PTR [eax+284], 0

; 6061 : 			//???Óèù?Óöº?ÔºØÔº´??
; 6062 : 			if (ATR_PET_OK(a1))

  01496	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01499	80 b8 20 01 00
	00 00		 cmp	 BYTE PTR [eax+288], 0
  014a0	74 59		 je	 SHORT $LN359@master

; 6063 : 			{
; 6064 : 				a2 = p_party[ATR_PLACE_NO(a1) + 5];		//???Óèù???

  014a2	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]
  014a9	8b 0c 85 14 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4+20]

; 6065 : 				//??????????????????
; 6066 : 				if (ATR_NAME(a2) != NULL && ATR_AKO_FLG(a2) == 0)

  014b0	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  014b4	74 48		 je	 SHORT $LN213@master
  014b6	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  014b9	80 b8 21 01 00
	00 00		 cmp	 BYTE PTR [eax+289], 0
  014c0	75 3c		 jne	 SHORT $LN213@master

; 6067 : 				{
; 6068 : 					//?????
; 6069 : 					if (ATR_ATTACK_KIND(2, a2) == 1)

  014c2	83 78 68 01	 cmp	 DWORD PTR [eax+104], 1
  014c6	75 13		 jne	 SHORT $LN211@master

; 6070 : 					{
; 6071 : 						ATR_ATTRIB(a2) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  014c8	83 89 a4 00 00
	00 02		 or	 DWORD PTR [ecx+164], 2

; 6072 : 						//????Óåñ
; 6073 : 						ATR_NAME(a2) = NULL;

  014cf	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 6074 : 						ATR_VCT_NO(a2) = VCT_NO_APPEAR;

  014d6	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H

; 6075 : 					}

  014d9	eb 23		 jmp	 SHORT $LN213@master
$LN211@master:

; 6076 : 					else
; 6077 : 					{
; 6078 : 						//ACTION_INFÓìÜÓòãÓéÅ??????
; 6079 : 						ATR_GUARD_FLG(a2) = 0;

  014db	c6 80 1c 01 00
	00 00		 mov	 BYTE PTR [eax+284], 0

; 6080 : 						ATR_BODY_CNT(a0)++;		//ÓñäÓèùÓéÅÓë∑??Óå´
; 6081 : 						if (d0 == 1)		//??Óéî?ÓñäÓèù??

  014e2	ba 02 00 00 00	 mov	 edx, 2
  014e7	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  014ea	fe 40 54	 inc	 BYTE PTR [eax+84]
  014ed	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  014f0	83 f8 01	 cmp	 eax, 1
  014f3	0f 44 c2	 cmove	 eax, edx
  014f6	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  014f9	eb 03		 jmp	 SHORT $LN213@master
$LN359@master:

; 6061 : 			//???Óèù?Óöº?ÔºØÔº´??
; 6062 : 			if (ATR_PET_OK(a1))

  014fb	8b 4d 08	 mov	 ecx, DWORD PTR _a2$[ebp]
$LN213@master:

; 6082 : 							d0 = 2;
; 6083 : 					}
; 6084 : 				}
; 6085 : 			}
; 6086 : 			//ACTION_INFÓìÜÓòãÓéÅÓìÜÓòã
; 6087 : 			switch (d0)

  014fe	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  01501	83 e8 01	 sub	 eax, 1
  01504	74 13		 je	 SHORT $LN214@master
  01506	83 e8 01	 sub	 eax, 1
  01509	0f 85 4d 01 00
	00		 jne	 $LN17@master

; 6088 : 			{
; 6089 : 			case 1:
; 6090 : 				ATR_GUARD_FLG(a1) = 1;
; 6091 : 				break;
; 6092 : 			case 2:
; 6093 : 				ATR_GUARD_FLG(a2) = 1;

  0150f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  01512	c6 80 1c 01 00
	00 01		 mov	 BYTE PTR [eax+284], 1
$LN214@master:

; 6154 : 			break;
; 6155 : 		}
; 6156 : #ifdef _PET_ITEM
; 6157 : 		if (ATR_ATTACK_KIND(0, a1) & ATT_ATTACKBACK)

  01519	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0151c	c6 80 1c 01 00
	00 01		 mov	 BYTE PTR [eax+284], 1
  01523	e9 34 01 00 00	 jmp	 $LN17@master
$LN216@master:

; 6094 : 				ATR_GUARD_FLG(a1) = 1;
; 6095 : 				break;
; 6096 : 			}
; 6097 : 			break;
; 6098 : 		case ATT_SELECT:		//??????????  ???Óì±Óï∂  ??????????
; 6099 : 			ATR_BODY_CNT(a0) = 1;

  01528	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0152b	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 6100 : 			d0 = ATR_PLACE_NO(a1) + 5;		//?????????

  0152f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01532	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]
  01539	83 c0 05	 add	 eax, 5
  0153c	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 6101 : 			a2 = p_party[ATR_PLACE_NO(a1) + 5];		//?????????

  0153f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01542	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]
  01549	8b 1c 85 14 00
	00 00		 mov	 ebx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4+20]

; 6102 : 			ATR_BODY_WORK(0, a2) = a1;		//??Óéî??????

  01550	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  01553	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 6103 : 			ATR_FIRST_FLG(a2) = 0;		//??????

  01556	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  01559	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 6104 : 			if (get_num() == 0)		//????

  01560	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01565	85 c0		 test	 eax, eax
  01567	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0156a	75 08		 jne	 SHORT $LN217@master

; 6105 : 				ATR_VCT_NO(a2) = 60;		//?????

  0156c	c6 00 3c	 mov	 BYTE PTR [eax], 60	; 0000003cH
  0156f	e9 e8 00 00 00	 jmp	 $LN17@master
$LN217@master:

; 6106 : 			else
; 6107 : 			{	//Óèù???
; 6108 : 				ATR_NAME(a2) = monster;		//???Óèù?

  01574	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 6109 : 				ATR_VCT_NO(a2) = 62;		//

  0157b	c6 00 3e	 mov	 BYTE PTR [eax], 62	; 0000003eH

; 6110 : 				if (BattleMyNo == ATR_PLACE_NO(a1))		//ÓçòÓû§??

  0157e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01581	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]
  01588	39 05 00 00 00
	00		 cmp	 DWORD PTR ?BattleMyNo@@3HA, eax ; BattleMyNo
  0158e	0f 85 c8 00 00
	00		 jne	 $LN17@master

; 6111 : 					att_select_flg = TRUE;

  01594	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?att_select_flg@@3DA, 1 ; att_select_flg

; 6112 : 			}
; 6113 : 			break;

  0159b	e9 bc 00 00 00	 jmp	 $LN17@master
$LN220@master:

; 6114 : 			//#ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6115 : 		case ATT_PROSKILL:
; 6116 : 			ATR_VCT_NO(a1) = PROSKILL;					//ÂãáÂ£´ËÅå‰∏öÊäÄËÉΩ

  015a0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  015a3	c6 00 e6	 mov	 BYTE PTR [eax], 230	; 000000e6H

; 6117 : 			ATR_BODY_WORK(0, a1) = p_party[get_num()];	//ÂèñÂá∫Ë¢´ÊîªÂáªÂØπË±°No

  015a6	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  015ab	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  015ae	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  015b5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 6118 : 			ATR_ATTACK_KIND(0, a1) = get_num();			//ÊîªÂáªÁßçÁ±ª

  015b8	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  015bd	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  015c0	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 6119 : 			ATR_ATTACK_POW(0, a1) = get_num();			//ÊîªÂáªÂäõ

  015c3	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  015c8	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  015cb	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 6120 : 			if (BattleCmd[command_point] == 'p')

  015d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  015d6	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  015dd	75 13		 jne	 SHORT $LN221@master

; 6121 : 				ATR_ATTACK_PET_POW(0, a1) = get_num();		//pet??????

  015df	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  015e4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  015e7	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  015ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN221@master:

; 6122 : 			else
; 6123 : 				LogToBattleError(BattleCmd, __LINE__);
; 6124 : 
; 6125 : 			//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 6126 : #ifdef _ATTACK_EFFECT
; 6127 : 			if (BattleCmd[command_point] == 's')

  015f2	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  015f9	75 0e		 jne	 SHORT $LN223@master

; 6128 : 				ATR_LONG_WORK(0, a1) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  015fb	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01600	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01603	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
$LN223@master:

; 6129 : #endif
; 6130 : 
; 6131 : 			ATR_WARRIOR_EFFECT(a1) = get_num();

  01609	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0160e	89 86 e4 01 00
	00		 mov	 DWORD PTR [esi+484], eax

; 6132 : 			AttPreMagicNum = get_num();

  01614	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01619	a3 00 00 00 00	 mov	 DWORD PTR ?AttPreMagicNum@@3HA, eax ; AttPreMagicNum

; 6133 : 			AttNextMagicNum = get_num();

  0161e	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01623	a3 00 00 00 00	 mov	 DWORD PTR ?AttNextMagicNum@@3HA, eax ; AttNextMagicNum

; 6134 : 			ATR_BODY_CNT(a0) = 1;

  01628	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0162b	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 6135 : #ifdef _ATTDOUBLE_ATTACK
; 6136 : 			//andy_add
; 6137 : 			if (ATR_ATTACK_KIND(0, a1) & ATT_ATTDOUBLE || ATR_ATTACK_KIND(0, a1) & BCF_MODIFY)

  0162f	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  01632	f7 43 60 00 00
	21 00		 test	 DWORD PTR [ebx+96], 2162688 ; 00210000H
  01639	74 21		 je	 SHORT $LN17@master

; 6138 : 				ATR_BATTLEGRANO(a1) = get_num();

  0163b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01640	89 83 44 02 00
	00		 mov	 DWORD PTR [ebx+580], eax

; 6139 : #endif
; 6140 : 			break;

  01646	eb 14		 jmp	 SHORT $LN17@master
$LN226@master:

; 6141 : 			//#endif
; 6142 : 		default:	//???????
; 6143 : 			action_inf = -1;

  01648	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?action_inf@@3HA, -1 ; action_inf

; 6144 : 			//?????Óí∂????????
; 6145 : #ifdef _STONDEBUG_
; 6146 : 			{
; 6147 : 				char errbuf[256];
; 6148 : 
; 6149 : 				sprintf_s(errbuf, "errbuf:%c", command_no);
; 6150 : 				MessageBox(hWnd, errbuf, "Error", MB_OK);
; 6151 : 			}
; 6152 : #endif
; 6153 : 			command_point = 0;

  01652	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?command_point@@3HA, 0
$LN17@master:

; 6154 : 			break;
; 6155 : 		}
; 6156 : #ifdef _PET_ITEM
; 6157 : 		if (ATR_ATTACK_KIND(0, a1) & ATT_ATTACKBACK)

  0165c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0165f	f7 41 60 00 00
	00 40		 test	 DWORD PTR [ecx+96], 1073741824 ; 40000000H
  01666	74 1c		 je	 SHORT $LN227@master

; 6158 : 		{
; 6159 : 			ATR_ATTACK_POW(1, a1) = ATR_ATTACK_POW(0, a1) >> 16;

  01668	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  0166f	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 6160 : 			ATR_ATTACK_POW(0, a1) = ATR_ATTACK_POW(0, a1) & 0x0000ffff;

  01675	33 c9		 xor	 ecx, ecx
  01677	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0167a	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  01681	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
$LN227@master:

; 6161 : 		}
; 6162 : #endif
; 6163 : #ifdef _FIX_ACUPUNCTURE
; 6164 : 		if (ATR_ATTACK_KIND(0, a1) & ATT_ACUPUNCTURE)

  01684	f7 41 60 00 00
	00 08		 test	 DWORD PTR [ecx+96], 134217728 ; 08000000H
  0168b	74 19		 je	 SHORT $LN228@master

; 6165 : 		{
; 6166 : 			ATR_ATTACK_POW(1, a1) = ATR_ATTACK_POW(0, a1) >> 16;

  0168d	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  01694	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 6167 : 			ATR_ATTACK_POW(0, a1) = ATR_ATTACK_POW(0, a1) & 0x0000ffff;

  0169a	33 c9		 xor	 ecx, ecx
  0169c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0169f	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
$LN228@master:

; 6168 : 		}
; 6169 : #endif
; 6170 : 	case 1:		//Ó†∏Óüµ?Óï§Óïò?
; 6171 : #ifdef __ATTACK_MAGIC
; 6172 : 		if (TRUE == bRunAttMgc)

  016a6	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?bRunAttMgc@@3HA, 1
  016ad	75 05		 jne	 SHORT $LN230@master

; 6173 : 			RunTimeMagic();

  016af	e8 00 00 00 00	 call	 ?RunTimeMagic@@YAHXZ	; RunTimeMagic
$LN230@master:

; 6174 : #endif
; 6175 : #ifdef __TOCALL_MAGIC
; 6176 : 		if (TRUE == bRunToCallMgc)

  016b4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?bRunToCallMgc@@3HA, 1
  016bb	75 05		 jne	 SHORT $LN231@master

; 6177 : 			RunTimeMagicToCall();

  016bd	e8 00 00 00 00	 call	 ?RunTimeMagicToCall@@YAHXZ ; RunTimeMagicToCall
$LN231@master:

; 6178 : #endif
; 6179 : #ifdef _PROFESSION_ADDSKILL
; 6180 : 		//		RunTimeMagicBoundary();
; 6181 : #endif
; 6182 : 		if (ATR_DAMAGE(a0) == ATR_BODY_CNT(a0))

  016c2	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  016c5	0f b6 42 54	 movzx	 eax, BYTE PTR [edx+84]
  016c9	39 42 58	 cmp	 DWORD PTR [edx+88], eax
  016cc	0f 85 ac 01 00
	00		 jne	 $master_500$370

; 6183 : 		{	//?Óï§Óé∑???
; 6184 : 			for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  016d2	33 c9		 xor	 ecx, ecx
  016d4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL44@master:

; 6185 : 			{
; 6186 : 				if (ATR_NAME(p_party[d7]) != NULL)

  016e0	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  016e7	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  016eb	74 17		 je	 SHORT $LN42@master

; 6187 : 				{
; 6188 : 					//?Óë∑??Óïò???????
; 6189 : 					if (ATR_LIFE(p_party[d7]) > 0 && ATR_VCT_NO(p_party[d7]) != 0 && ATR_VCT_NO(p_party[d7]) < VCT_NO_DIE)

  016ed	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  016f1	7e 11		 jle	 SHORT $LN42@master
  016f3	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  016f6	8a 00		 mov	 al, BYTE PTR [eax]
  016f8	84 c0		 test	 al, al
  016fa	74 08		 je	 SHORT $LN42@master
  016fc	3c fa		 cmp	 al, 250			; 000000faH
  016fe	0f 82 7a 01 00
	00		 jb	 $master_500$370
$LN42@master:

; 6183 : 		{	//?Óï§Óé∑???
; 6184 : 			for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  01704	41		 inc	 ecx
  01705	83 f9 14	 cmp	 ecx, 20			; 00000014H
  01708	7c d6		 jl	 SHORT $LL44@master

; 6190 : 						break;
; 6191 : 				}
; 6192 : 			}
; 6193 : 			if (d7 == BATTLKPKPLYAERNUM)		//Óé∑???

  0170a	0f 85 6e 01 00
	00		 jne	 $master_500$370

; 6194 : 				ATR_VCT_NO(a0) = 0;		//Ó†∏Óüµ?ÓôÆ?

  01710	c6 02 00	 mov	 BYTE PTR [edx], 0

; 6195 : 		}
; 6196 : 		break;

  01713	e9 66 01 00 00	 jmp	 $master_500$370
$LN95@master:

; 5277 : 			if (command_no == ATT_VARIABLE){

  01718	83 fb 56	 cmp	 ebx, 86			; 00000056H
  0171b	0f 85 5d 01 00
	00		 jne	 $master_500$370

; 5278 : 				ATR_ATTRIB(p_master) = get_num();

  01721	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01726	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?p_master@@3PAUaction@@A
  0172c	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax

; 5279 : 				break;

  01732	e9 47 01 00 00	 jmp	 $master_500$370
$LN361@master:

; 5293 : 			if (command_no == -1){

  01737	8b 75 e8	 mov	 esi, DWORD PTR tv5569[ebp]
$LN352@master:

; 5294 : 				ATR_VCT_NO(a0) = 4;

  0173a	c6 06 04	 mov	 BYTE PTR [esi], 4

; 5295 : 				command_point = 0;

  0173d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?command_point@@3HA, 0

; 5296 : 				break;

  01747	e9 32 01 00 00	 jmp	 $master_500$370
$LN236@master:

; 6197 : 	case 2:		//ÓìªÓ°ú
; 6198 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  0174c	33 c9		 xor	 ecx, ecx
  0174e	66 90		 npad	 2
$LL47@master:

; 6199 : 		{
; 6200 : 			if (ATR_NAME(p_party[d7]) != NULL)

  01750	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  01757	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0175b	74 11		 je	 SHORT $LN45@master

; 6201 : 			{
; 6202 : 				//Óé∑??????
; 6203 : 				if (ATR_VCT_NO(p_party[d7]) != 0 && ATR_VCT_NO(p_party[d7]) != VCT_NO_DIE + 2)

  0175d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01760	8a 00		 mov	 al, BYTE PTR [eax]
  01762	84 c0		 test	 al, al
  01764	74 08		 je	 SHORT $LN45@master
  01766	3c fc		 cmp	 al, 252			; 000000fcH
  01768	0f 85 10 01 00
	00		 jne	 $master_500$370
$LN45@master:

; 6197 : 	case 2:		//ÓìªÓ°ú
; 6198 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  0176e	41		 inc	 ecx
  0176f	83 f9 14	 cmp	 ecx, 20			; 00000014H
  01772	7c dc		 jl	 SHORT $LL47@master

; 6204 : 					break;
; 6205 : 			}
; 6206 : 		}
; 6207 : 		if (d7 == BATTLKPKPLYAERNUM)

  01774	0f 85 04 01 00
	00		 jne	 $master_500$370

; 6208 : 		{	//Óé∑???
; 6209 : 			action_inf = 2;

  0177a	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?action_inf@@3HA, 2 ; action_inf

; 6210 : 			command_point = 0;		//?????Óí∂????????

  01784	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?command_point@@3HA, 0

; 6211 : 		}
; 6212 : 		break;

  0178e	e9 eb 00 00 00	 jmp	 $master_500$370
$LN240@master:

; 6213 : 	case 3:		//ÓôëÓê∂Óïò?
; 6214 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  01793	33 c9		 xor	 ecx, ecx
  01795	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL50@master:

; 6215 : 		{
; 6216 : 			if (ATR_NAME(p_party[d7]) != NULL)

  017a0	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  017a7	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  017ab	74 11		 je	 SHORT $LN48@master

; 6217 : 			{
; 6218 : 				if (ATR_VCT_NO(p_party[d7]) != 0 && ATR_VCT_NO(p_party[d7]) != VCT_NO_DIE + 2)		//?Óë∑??Óïò???????

  017ad	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  017b0	8a 00		 mov	 al, BYTE PTR [eax]
  017b2	84 c0		 test	 al, al
  017b4	74 08		 je	 SHORT $LN48@master
  017b6	3c fc		 cmp	 al, 252			; 000000fcH
  017b8	0f 85 c0 00 00
	00		 jne	 $master_500$370
$LN48@master:

; 6213 : 	case 3:		//ÓôëÓê∂Óïò?
; 6214 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  017be	41		 inc	 ecx
  017bf	83 f9 14	 cmp	 ecx, 20			; 00000014H
  017c2	7c dc		 jl	 SHORT $LL50@master

; 6219 : 					break;
; 6220 : 			}
; 6221 : 		}
; 6222 : 		if (d7 == BATTLKPKPLYAERNUM)

  017c4	0f 85 b4 00 00
	00		 jne	 $master_500$370

; 6223 : 		{
; 6224 : 			ATR_VCT_NO(a0) = 0;

  017ca	c6 06 00	 mov	 BYTE PTR [esi], 0

; 6225 : 			action_inf = 3;		//ÓôëÓê∂?ÓèùÓé∑?
; 6226 : 			if (BattleBpFlag & BATTLE_BP_JOIN)// Óå¢Óìñ??

  017cd	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?BattleBpFlag@@3HA, 1
  017d4	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?action_inf@@3HA, 3 ; action_inf
  017de	0f 84 9a 00 00
	00		 je	 $master_500$370

; 6227 : 			{
; 6228 : 				//ÓìªÓ°ú??
; 6229 : 				if (check_all_dead())

  017e4	e8 00 00 00 00	 call	 ?check_all_dead@@YAHXZ	; check_all_dead
  017e9	85 c0		 test	 eax, eax
  017eb	0f 84 8d 00 00
	00		 je	 $master_500$370

; 6230 : 					action_inf = 2;

  017f1	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?action_inf@@3HA, 2 ; action_inf

; 6231 : 			}
; 6232 : 		}
; 6233 : 		break;

  017fb	e9 7e 00 00 00	 jmp	 $master_500$370
$LN246@master:

; 6234 : 	case 4:		//???Óé∑?Óïò?
; 6235 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  01800	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  01806	33 ff		 xor	 edi, edi
  01808	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@master:

; 6236 : 		{
; 6237 : 			if (ATR_NAME(p_party[d7]) != NULL)

  01810	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  01817	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0181b	74 28		 je	 SHORT $LN51@master

; 6238 : 			{
; 6239 : 				//ÓìªÓ°ú??
; 6240 : 				if (check_all_dead())

  0181d	e8 00 00 00 00	 call	 ?check_all_dead@@YAHXZ	; check_all_dead
  01822	85 c0		 test	 eax, eax
  01824	75 12		 jne	 SHORT $LN368@master

; 6241 : 				{
; 6242 : 					//?Óë∑??Óïò???????
; 6243 : 					if (ATR_VCT_NO(p_party[d7]) != 0 && ATR_VCT_NO(p_party[d7]) != VCT_NO_DIE + 2)
; 6244 : 						break;
; 6245 : 				}
; 6246 : 				else
; 6247 : 				{
; 6248 : 					//ÓçòÓû§?????????????
; 6249 : 					if (BattleMyNo == d7)

  01826	3b df		 cmp	 ebx, edi
  01828	75 08		 jne	 SHORT $LN351@master

; 6250 : 					{
; 6251 : 						if (ATR_VCT_NO(p_party[d7]) == 55)

  0182a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0182d	80 38 37	 cmp	 BYTE PTR [eax], 55	; 00000037H
  01830	74 4c		 je	 SHORT $master_500$370
$LN351@master:

; 6252 : 							break;
; 6253 : 					}
; 6254 : 					//?Óë∑??Óïò???????
; 6255 : 					if (ATR_LIFE(p_party[d7]) > 0 && ATR_VCT_NO(p_party[d7]) != 0 && ATR_VCT_NO(p_party[d7]) != VCT_NO_DIE + 2)

  01832	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  01836	7e 0d		 jle	 SHORT $LN51@master
$LN368@master:

; 6234 : 	case 4:		//???Óé∑?Óïò?
; 6235 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  01838	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0183b	8a 00		 mov	 al, BYTE PTR [eax]
  0183d	84 c0		 test	 al, al
  0183f	74 04		 je	 SHORT $LN51@master
  01841	3c fc		 cmp	 al, 252			; 000000fcH
  01843	75 39		 jne	 SHORT $master_500$370
$LN51@master:
  01845	47		 inc	 edi
  01846	83 ff 14	 cmp	 edi, 20			; 00000014H
  01849	7c c5		 jl	 SHORT $LL53@master

; 6256 : 						break;
; 6257 : 				}
; 6258 : 			}
; 6259 : 		}
; 6260 : 		if (d7 == BATTLKPKPLYAERNUM)

  0184b	75 31		 jne	 SHORT $master_500$370

; 6261 : 		{
; 6262 : 			ATR_VCT_NO(a0) = 0;

  0184d	8b 45 e8	 mov	 eax, DWORD PTR tv5569[ebp]
  01850	c6 00 00	 mov	 BYTE PTR [eax], 0

; 6263 : 			//Ó†πÓìÜÓòã??
; 6264 : 			if (!action_inf)

  01853	b8 01 00 00 00	 mov	 eax, 1
  01858	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?action_inf@@3HA ; action_inf
  0185e	85 f6		 test	 esi, esi
  01860	0f 44 f0	 cmove	 esi, eax
  01863	89 35 00 00 00
	00		 mov	 DWORD PTR ?action_inf@@3HA, esi ; action_inf

; 6265 : 				action_inf = 1;		//???Óé∑?
; 6266 : 			//ÓìªÓ°ú??
; 6267 : 			if (check_all_dead())

  01869	e8 00 00 00 00	 call	 ?check_all_dead@@YAHXZ	; check_all_dead
  0186e	85 c0		 test	 eax, eax
  01870	b9 02 00 00 00	 mov	 ecx, 2
  01875	0f 45 f1	 cmovne	 esi, ecx
  01878	89 35 00 00 00
	00		 mov	 DWORD PTR ?action_inf@@3HA, esi ; action_inf
$master_500$370:

; 6268 : 				action_inf = 2;
; 6269 : 		}
; 6270 : 		break;
; 6271 : 	}
; 6272 : master_500:
; 6273 : 	//???????????
; 6274 : #ifdef __ATTACK_MAGIC
; 6275 : 	if ((BattleMapNo >= 148 && BattleMapNo <= 150) || g_iRunEarthQuake >= 2)

  0187e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMapNo@@3HA ; BattleMapNo
  01883	3d 94 00 00 00	 cmp	 eax, 148		; 00000094H
  01888	7c 07		 jl	 SHORT $LN259@master
  0188a	3d 96 00 00 00	 cmp	 eax, 150		; 00000096H
  0188f	7e 09		 jle	 SHORT $LN258@master
$LN259@master:
  01891	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_iRunEarthQuake@@3HA, 2 ; g_iRunEarthQuake
  01898	7c 4c		 jl	 SHORT $LN261@master
$LN258@master:

; 6276 : #else
; 6277 : 	if (BattleMapNo >= 148 && BattleMapNo <= 150)		//???????????
; 6278 : #endif
; 6279 : 	{
; 6280 : 		//????
; 6281 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  0189a	be 00 00 00 00	 mov	 esi, OFFSET ?p_party@@3PAPAUaction@@A
  0189f	90		 npad	 1
$LL56@master:

; 6282 : 		{
; 6283 : 			a1 = p_party[d7];		//???????

  018a0	8b 16		 mov	 edx, DWORD PTR [esi]

; 6284 : 			if (ATR_NAME(a1) == NULL)		//???

  018a2	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  018a6	74 21		 je	 SHORT $LN54@master

; 6285 : 				continue;
; 6286 : 			ATR_V_POS(a1) += ATR_INT_WORK3(a1);

  018a8	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]

; 6287 : 			ATR_INT_WORK1(a1) += ATR_INT_WORK3(a1);
; 6288 : 			//????????????
; 6289 : 			set_raster_pos(a1);

  018ab	52		 push	 edx
  018ac	8b 81 30 01 00
	00		 mov	 eax, DWORD PTR [ecx+304]
  018b2	01 42 1c	 add	 DWORD PTR [edx+28], eax
  018b5	8b 81 30 01 00
	00		 mov	 eax, DWORD PTR [ecx+304]
  018bb	01 81 28 01 00
	00		 add	 DWORD PTR [ecx+296], eax
  018c1	e8 00 00 00 00	 call	 ?set_raster_pos@@YAXPAUaction@@@Z ; set_raster_pos
  018c6	83 c4 04	 add	 esp, 4
$LN54@master:

; 6276 : #else
; 6277 : 	if (BattleMapNo >= 148 && BattleMapNo <= 150)		//???????????
; 6278 : #endif
; 6279 : 	{
; 6280 : 		//????
; 6281 : 		for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  018c9	83 c6 04	 add	 esi, 4
  018cc	81 fe 50 00 00
	00		 cmp	 esi, OFFSET ?p_party@@3PAPAUaction@@A+80
  018d2	7c cc		 jl	 SHORT $LL56@master

; 6290 : 		}
; 6291 : 		if (g_iRunEarthQuake == 3)

  018d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iRunEarthQuake@@3HA ; g_iRunEarthQuake
  018d9	33 c9		 xor	 ecx, ecx
  018db	83 f8 03	 cmp	 eax, 3
  018de	0f 44 c1	 cmove	 eax, ecx
  018e1	a3 00 00 00 00	 mov	 DWORD PTR ?g_iRunEarthQuake@@3HA, eax ; g_iRunEarthQuake
$LN261@master:

; 6292 : 			g_iRunEarthQuake = 0;
; 6293 : 	}
; 6294 : 	//??????Óù∏Óçï???
; 6295 : 	d6 = 0;

  018e6	33 f6		 xor	 esi, esi
  018e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?p_party@@3PAPAUaction@@A
  018ed	0f 1f 00	 npad	 3
$LL59@master:

; 6297 : 	{
; 6298 : 		a1 = p_party[d7];		//???????		

  018f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 6299 : 		if (ATR_NAME(a1) == NULL)		//???

  018f2	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  018f6	74 12		 je	 SHORT $LN57@master

; 6300 : 			continue;
; 6301 : 		sort_chr_buf[d6].work = a1;		//???????

  018f8	89 04 f5 04 00
	00 00		 mov	 DWORD PTR ?sort_chr_buf@@3PAUSORT_CHR_EQU@@A[esi*8+4], eax

; 6302 : 		sort_chr_buf[d6++].v_pos = ATR_V_POS(a1);		//??Óù≥???

  018ff	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  01902	89 04 f5 00 00
	00 00		 mov	 DWORD PTR ?sort_chr_buf@@3PAUSORT_CHR_EQU@@A[esi*8], eax
  01909	46		 inc	 esi
$LN57@master:

; 6296 : 	for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  0190a	83 c1 04	 add	 ecx, 4
  0190d	81 f9 50 00 00
	00		 cmp	 ecx, OFFSET ?p_party@@3PAPAUaction@@A+80
  01913	7c db		 jl	 SHORT $LL59@master

; 6303 : 	}
; 6304 : 	for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  01915	b9 00 00 00 00	 mov	 ecx, OFFSET ?p_missile@@3PAPAUaction@@A
  0191a	66 0f 1f 44 00
	00		 npad	 6
$LL62@master:

; 6305 : 	{
; 6306 : 		if ((a1 = p_missile[d7]) == NULL)		//Óé∑???

  01920	8b 01		 mov	 eax, DWORD PTR [ecx]
  01922	85 c0		 test	 eax, eax
  01924	74 12		 je	 SHORT $LN60@master

; 6307 : 			continue;
; 6308 : 		sort_chr_buf[d6].work = a1;		//???????

  01926	89 04 f5 04 00
	00 00		 mov	 DWORD PTR ?sort_chr_buf@@3PAUSORT_CHR_EQU@@A[esi*8+4], eax

; 6309 : 		sort_chr_buf[d6++].v_pos = ATR_V_POS(a1);		//??Óù≥???

  0192d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  01930	89 04 f5 00 00
	00 00		 mov	 DWORD PTR ?sort_chr_buf@@3PAUSORT_CHR_EQU@@A[esi*8], eax
  01937	46		 inc	 esi
$LN60@master:

; 6303 : 	}
; 6304 : 	for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  01938	83 c1 04	 add	 ecx, 4
  0193b	81 f9 50 00 00
	00		 cmp	 ecx, OFFSET ?p_missile@@3PAPAUaction@@A+80
  01941	7c dd		 jl	 SHORT $LL62@master

; 6310 : 	}
; 6311 : 	//???????
; 6312 : 	qsort(sort_chr_buf,			// ????

  01943	68 00 00 00 00	 push	 OFFSET ?sort_chr@@YAHPAUSORT_CHR_EQU@@0@Z ; sort_chr
  01948	6a 08		 push	 8
  0194a	56		 push	 esi
  0194b	68 00 00 00 00	 push	 OFFSET ?sort_chr_buf@@3PAUSORT_CHR_EQU@@A
  01950	e8 00 00 00 00	 call	 _qsort
  01955	83 c4 10	 add	 esp, 16			; 00000010H

; 6313 : 		d6,						// ÓùÅ?????
; 6314 : 		sizeof(SORT_CHR_EQU),	// ???
; 6315 : 		(CMPFUNC*)sort_chr		// ÓùÅ?????????
; 6316 : 		);
; 6317 : 	d0 = 30;		//Óù∏Óçï?Óìè???

  01958	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH

; 6318 : 	for (d7 = 0; d7 < d6; d7++)

  0195d	33 d2		 xor	 edx, edx
  0195f	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
  01962	85 f6		 test	 esi, esi
  01964	7e 20		 jle	 SHORT $LN64@master
  01966	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL65@master:

; 6319 : 		ATR_DISP_PRIO(sort_chr_buf[d7].work) = d0++;

  01970	8b 04 d5 04 00
	00 00		 mov	 eax, DWORD PTR ?sort_chr_buf@@3PAUSORT_CHR_EQU@@A[edx*8+4]
  01977	42		 inc	 edx
  01978	88 48 15	 mov	 BYTE PTR [eax+21], cl
  0197b	8b 4d fc	 mov	 ecx, DWORD PTR _d0$[ebp]
  0197e	41		 inc	 ecx
  0197f	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
  01982	3b d6		 cmp	 edx, esi
  01984	7c ea		 jl	 SHORT $LL65@master
$LN64@master:
  01986	5f		 pop	 edi

; 6320 : }

  01987	5e		 pop	 esi
  01988	5b		 pop	 ebx
  01989	8b e5		 mov	 esp, ebp
  0198b	5d		 pop	 ebp
  0198c	c3		 ret	 0
  0198d	0f 1f 00	 npad	 3
$LN353@master:
  01990	00 00 00 00	 DD	 $LN69@master
  01994	00 00 00 00	 DD	 $LN228@master
  01998	00 00 00 00	 DD	 $LN236@master
  0199c	00 00 00 00	 DD	 $LN240@master
  019a0	00 00 00 00	 DD	 $LN246@master
$LN355@master:
  019a4	00 00 00 00	 DD	 $LN201@master
  019a8	00 00 00 00	 DD	 $LN204@master
  019ac	00 00 00 00	 DD	 $LN169@master
  019b0	00 00 00 00	 DD	 $LN170@master
  019b4	00 00 00 00	 DD	 $LN121@master
  019b8	00 00 00 00	 DD	 $LN171@master
  019bc	00 00 00 00	 DD	 $LN220@master
  019c0	00 00 00 00	 DD	 $LN176@master
  019c4	00 00 00 00	 DD	 $LN130@master
  019c8	00 00 00 00	 DD	 $LN206@master
  019cc	00 00 00 00	 DD	 $LN117@master
  019d0	00 00 00 00	 DD	 $LN107@master
  019d4	00 00 00 00	 DD	 $LN105@master
  019d8	00 00 00 00	 DD	 $LN119@master
  019dc	00 00 00 00	 DD	 $LN165@master
  019e0	00 00 00 00	 DD	 $LN123@master
  019e4	00 00 00 00	 DD	 $LN118@master
  019e8	00 00 00 00	 DD	 $LN180@master
  019ec	00 00 00 00	 DD	 $LN167@master
  019f0	00 00 00 00	 DD	 $LN162@master
  019f4	00 00 00 00	 DD	 $LN216@master
  019f8	00 00 00 00	 DD	 $LN205@master
  019fc	00 00 00 00	 DD	 $LN161@master
  01a00	00 00 00 00	 DD	 $LN168@master
  01a04	00 00 00 00	 DD	 $LN187@master
  01a08	00 00 00 00	 DD	 $LN181@master
  01a0c	00 00 00 00	 DD	 $LN174@master
  01a10	00 00 00 00	 DD	 $LN175@master
  01a14	00 00 00 00	 DD	 $LN114@master
  01a18	00 00 00 00	 DD	 $LN172@master
  01a1c	00 00 00 00	 DD	 $LN116@master
  01a20	00 00 00 00	 DD	 $LN115@master
  01a24	00 00 00 00	 DD	 $LN226@master
$LN354@master:
  01a28	00		 DB	 0
  01a29	01		 DB	 1
  01a2a	20		 DB	 32			; 00000020H
  01a2b	20		 DB	 32			; 00000020H
  01a2c	20		 DB	 32			; 00000020H
  01a2d	20		 DB	 32			; 00000020H
  01a2e	20		 DB	 32			; 00000020H
  01a2f	20		 DB	 32			; 00000020H
  01a30	20		 DB	 32			; 00000020H
  01a31	20		 DB	 32			; 00000020H
  01a32	20		 DB	 32			; 00000020H
  01a33	20		 DB	 32			; 00000020H
  01a34	20		 DB	 32			; 00000020H
  01a35	20		 DB	 32			; 00000020H
  01a36	20		 DB	 32			; 00000020H
  01a37	20		 DB	 32			; 00000020H
  01a38	20		 DB	 32			; 00000020H
  01a39	20		 DB	 32			; 00000020H
  01a3a	20		 DB	 32			; 00000020H
  01a3b	20		 DB	 32			; 00000020H
  01a3c	20		 DB	 32			; 00000020H
  01a3d	20		 DB	 32			; 00000020H
  01a3e	20		 DB	 32			; 00000020H
  01a3f	20		 DB	 32			; 00000020H
  01a40	20		 DB	 32			; 00000020H
  01a41	20		 DB	 32			; 00000020H
  01a42	20		 DB	 32			; 00000020H
  01a43	20		 DB	 32			; 00000020H
  01a44	20		 DB	 32			; 00000020H
  01a45	20		 DB	 32			; 00000020H
  01a46	20		 DB	 32			; 00000020H
  01a47	02		 DB	 2
  01a48	20		 DB	 32			; 00000020H
  01a49	03		 DB	 3
  01a4a	04		 DB	 4
  01a4b	05		 DB	 5
  01a4c	20		 DB	 32			; 00000020H
  01a4d	20		 DB	 32			; 00000020H
  01a4e	20		 DB	 32			; 00000020H
  01a4f	20		 DB	 32			; 00000020H
  01a50	20		 DB	 32			; 00000020H
  01a51	06		 DB	 6
  01a52	20		 DB	 32			; 00000020H
  01a53	20		 DB	 32			; 00000020H
  01a54	20		 DB	 32			; 00000020H
  01a55	20		 DB	 32			; 00000020H
  01a56	20		 DB	 32			; 00000020H
  01a57	20		 DB	 32			; 00000020H
  01a58	20		 DB	 32			; 00000020H
  01a59	20		 DB	 32			; 00000020H
  01a5a	20		 DB	 32			; 00000020H
  01a5b	20		 DB	 32			; 00000020H
  01a5c	20		 DB	 32			; 00000020H
  01a5d	20		 DB	 32			; 00000020H
  01a5e	20		 DB	 32			; 00000020H
  01a5f	20		 DB	 32			; 00000020H
  01a60	20		 DB	 32			; 00000020H
  01a61	20		 DB	 32			; 00000020H
  01a62	20		 DB	 32			; 00000020H
  01a63	20		 DB	 32			; 00000020H
  01a64	20		 DB	 32			; 00000020H
  01a65	20		 DB	 32			; 00000020H
  01a66	20		 DB	 32			; 00000020H
  01a67	20		 DB	 32			; 00000020H
  01a68	07		 DB	 7
  01a69	20		 DB	 32			; 00000020H
  01a6a	08		 DB	 8
  01a6b	09		 DB	 9
  01a6c	0a		 DB	 10			; 0000000aH
  01a6d	20		 DB	 32			; 00000020H
  01a6e	0b		 DB	 11			; 0000000bH
  01a6f	0c		 DB	 12			; 0000000cH
  01a70	0d		 DB	 13			; 0000000dH
  01a71	20		 DB	 32			; 00000020H
  01a72	0e		 DB	 14			; 0000000eH
  01a73	0f		 DB	 15			; 0000000fH
  01a74	10		 DB	 16			; 00000010H
  01a75	11		 DB	 17			; 00000011H
  01a76	20		 DB	 32			; 00000020H
  01a77	12		 DB	 18			; 00000012H
  01a78	13		 DB	 19			; 00000013H
  01a79	14		 DB	 20			; 00000014H
  01a7a	15		 DB	 21			; 00000015H
  01a7b	20		 DB	 32			; 00000020H
  01a7c	16		 DB	 22			; 00000016H
  01a7d	20		 DB	 32			; 00000020H
  01a7e	17		 DB	 23			; 00000017H
  01a7f	18		 DB	 24			; 00000018H
  01a80	19		 DB	 25			; 00000019H
  01a81	20		 DB	 32			; 00000020H
  01a82	20		 DB	 32			; 00000020H
  01a83	20		 DB	 32			; 00000020H
  01a84	20		 DB	 32			; 00000020H
  01a85	20		 DB	 32			; 00000020H
  01a86	20		 DB	 32			; 00000020H
  01a87	1a		 DB	 26			; 0000001aH
  01a88	20		 DB	 32			; 00000020H
  01a89	1b		 DB	 27			; 0000001bH
  01a8a	1c		 DB	 28			; 0000001cH
  01a8b	20		 DB	 32			; 00000020H
  01a8c	1d		 DB	 29			; 0000001dH
  01a8d	20		 DB	 32			; 00000020H
  01a8e	1e		 DB	 30			; 0000001eH
  01a8f	20		 DB	 32			; 00000020H
  01a90	20		 DB	 32			; 00000020H
  01a91	20		 DB	 32			; 00000020H
  01a92	20		 DB	 32			; 00000020H
  01a93	20		 DB	 32			; 00000020H
  01a94	20		 DB	 32			; 00000020H
  01a95	20		 DB	 32			; 00000020H
  01a96	1f		 DB	 31			; 0000001fH
  01a97	90		 npad	 1
$LN356@master:
  01a98	00 00 00 00	 DD	 $LN133@master
  01a9c	00 00 00 00	 DD	 $LN139@master
  01aa0	00 00 00 00	 DD	 $LN142@master
  01aa4	00 00 00 00	 DD	 $LN146@master
  01aa8	00 00 00 00	 DD	 $LN147@master
  01aac	00 00 00 00	 DD	 $LN148@master
  01ab0	00 00 00 00	 DD	 $LN149@master
  01ab4	00 00 00 00	 DD	 $LN150@master
  01ab8	00 00 00 00	 DD	 $LN151@master
?master@@YAXPAUaction@@@Z ENDP				; master
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?RunTimeMagicToCall@@YAHXZ
_TEXT	SEGMENT
?RunTimeMagicToCall@@YAHXZ PROC				; RunTimeMagicToCall, COMDAT

; 4676 : 	// ÂºÄÂßãÂú∞Èúá
; 4677 : 	if (ToCallMgc.dwEQuakeSFrame == ToCallMgc.dwCurFrame1)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A
  00006	56		 push	 esi
  00007	8b 35 14 00 00
	00		 mov	 esi, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+20
  0000d	57		 push	 edi
  0000e	8b 3d 18 00 00
	00		 mov	 edi, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+24
  00014	3b f1		 cmp	 esi, ecx
  00016	75 10		 jne	 SHORT $LN45@RunTimeMag

; 4678 : 	{
; 4679 : 		g_iRunEarthQuake = 1;
; 4680 : 		g_iNumRunEarthQuake = ToCallMgc.dwEQuakeEFrame - ToCallMgc.dwEQuakeSFrame;

  00018	8b c7		 mov	 eax, edi
  0001a	ba 01 00 00 00	 mov	 edx, 1
  0001f	2b c6		 sub	 eax, esi
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?g_iNumRunEarthQuake@@3HA, eax ; g_iNumRunEarthQuake
  00026	eb 06		 jmp	 SHORT $LN6@RunTimeMag
$LN45@RunTimeMag:

; 4676 : 	// ÂºÄÂßãÂú∞Èúá
; 4677 : 	if (ToCallMgc.dwEQuakeSFrame == ToCallMgc.dwCurFrame1)

  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_iRunEarthQuake@@3HA ; g_iRunEarthQuake
$LN6@RunTimeMag:

; 4681 : 	}
; 4682 : 
; 4683 : 	// ÁªìÊùüÂú∞Èúá
; 4684 : 	if (ToCallMgc.dwEQuakeEFrame == ToCallMgc.dwCurFrame1)

  0002e	3b f9		 cmp	 edi, ecx
  00030	b8 03 00 00 00	 mov	 eax, 3
  00035	0f 44 d0	 cmove	 edx, eax

; 4685 : 		g_iRunEarthQuake = 3;
; 4686 : 
; 4687 : 	ToCallMgc.dwCurFrame1++;

  00038	41		 inc	 ecx

; 4688 : 	// ÂâçÁΩÆÈ≠îÊ≥ïÊòØÂê¶Â∑≤ÁªèÊí≠ÂÆå‰∫Ü
; 4689 : 	if (FALSE == ToCallMgc.wRunPreMgc)

  00039	33 c0		 xor	 eax, eax
  0003b	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_iRunEarthQuake@@3HA, edx ; g_iRunEarthQuake
  00041	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A, ecx
  00047	66 3b 05 28 00
	00 00		 cmp	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+40
  0004e	0f 84 d7 02 00
	00		 je	 $LN47@RunTimeMag

; 4690 : 		return TRUE;
; 4691 : 
; 4692 : 	if (ToCallMgc.wToCallMagicNo != 2)

  00054	66 83 3d ca 00
	00 00 02	 cmp	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+202, 2
  0005c	66 8b 0d c6 00
	00 00		 mov	 cx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  00063	66 8b 35 c2 00
	00 00		 mov	 si, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+194
  0006a	53		 push	 ebx
  0006b	0f 84 5b 01 00
	00		 je	 $LN9@RunTimeMag

; 4693 : 	{
; 4694 : 		// ÊòØÂê¶‰ªçÊúâÂ∞öÊú™Êí≠ÊîæÁöÑÂííÊúØ
; 4695 : 		if (ToCallMgc.wCurAttackNum < ToCallMgc.wNumAttacks)

  00071	66 3b ce	 cmp	 cx, si
  00074	0f 83 a3 02 00
	00		 jae	 $LN46@RunTimeMag
  0007a	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4
  00080	8d 58 58	 lea	 ebx, DWORD PTR [eax+88]
  00083	8d 78 14	 lea	 edi, DWORD PTR [eax+20]
  00086	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@RunTimeMag:

; 4696 : 		{
; 4697 : 			while (1)
; 4698 : 			{
; 4699 : 				if (ToCallMgc.dwCurFrame2 == ToCallMgc.wMgcFrameCount[ToCallMgc.wCurAttackNum])

  00090	0f b7 c1	 movzx	 eax, cx
  00093	0f b7 04 45 42
	00 00 00	 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+66]
  0009b	3b d0		 cmp	 edx, eax
  0009d	0f 85 fd 00 00
	00		 jne	 $LN12@RunTimeMag

; 4700 : 				{
; 4701 : 					ACTION	*a0;
; 4702 : 
; 4703 : 					a0 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  000a3	68 60 02 00 00	 push	 608			; 00000260H
  000a8	6a 47		 push	 71			; 00000047H
  000aa	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  000af	8b d0		 mov	 edx, eax
  000b1	83 c4 08	 add	 esp, 8

; 4704 : 					ATR_NAME(a0) = monster;
; 4705 : 					ATR_VCT_NO(a0) = TOCALL_MAGIC_CASE + 2;		// ÂííÊúØÁöÑÊâßË°å
; 4706 : 					ATR_DISP_PRIO(a0) = (1 == ToCallMgc.wCurMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  000b4	b8 01 00 00 00	 mov	 eax, 1
  000b9	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  000bc	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster
  000c3	c6 01 d4	 mov	 BYTE PTR [ecx], 212	; 000000d4H
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	66 3b 05 3e 00
	00 00		 cmp	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+62
  000d2	0f 44 cb	 cmove	 ecx, ebx
  000d5	88 4a 15	 mov	 BYTE PTR [edx+21], cl

; 4707 : 					ATR_CHR_NO(a0) = ToCallMgc.iCurMgcNum;

  000d8	a1 20 00 00 00	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32
  000dd	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax

; 4708 : 					ATR_LONG_WORK(0, a0) = ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum];

  000e3	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  000ea	0f b7 0c 45 62
	00 00 00	 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+98]
  000f2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000f5	89 88 34 01 00
	00		 mov	 DWORD PTR [eax+308], ecx

; 4709 : 					ATR_H_POS(a0) = (20 == ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]) ? ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].x : ATR_H_POS(p_party[ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]]) + ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].x;

  000fb	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  00102	0f b7 34 45 62
	00 00 00	 movzx	 esi, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+98]
  0010a	0f b7 0c 85 82
	00 00 00	 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*4+130]
  00112	66 3b fe	 cmp	 di, si
  00115	74 0c		 je	 SHORT $LN30@RunTimeMag
  00117	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  0011e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00121	03 c8		 add	 ecx, eax
$LN30@RunTimeMag:
  00123	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 4710 : 					ATR_V_POS(a0) = (20 == ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]) ? ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].y : ATR_V_POS(p_party[ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]]) + ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].y;

  00126	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  0012d	0f b7 34 45 62
	00 00 00	 movzx	 esi, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+98]
  00135	0f b7 0c 85 84
	00 00 00	 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*4+132]
  0013d	66 3b fe	 cmp	 di, si
  00140	74 0c		 je	 SHORT $LN32@RunTimeMag
  00142	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  00149	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0014c	03 c8		 add	 ecx, eax
$LN32@RunTimeMag:
  0014e	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 4711 : 
; 4712 : 					if (ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum] < 10)

  00151	66 8b 0d c6 00
	00 00		 mov	 cx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  00158	0f b7 c1	 movzx	 eax, cx
  0015b	0f b7 04 45 62
	00 00 00	 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+98]
  00163	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00166	73 0c		 jae	 SHORT $LN13@RunTimeMag

; 4713 : 						ATR_CHR_ANG(a0) = (7);

  00168	c7 82 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edx+340], 7
  00172	eb 0f		 jmp	 SHORT $LN48@RunTimeMag
$LN13@RunTimeMag:

; 4714 : 					else if (ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum] < 20)

  00174	83 f8 14	 cmp	 eax, 20			; 00000014H
  00177	73 11		 jae	 SHORT $LN15@RunTimeMag

; 4715 : 						ATR_CHR_ANG(a0) = (3);

  00179	c7 82 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+340], 3
$LN48@RunTimeMag:

; 4716 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 4717 : 					else if (ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum] < 30)
; 4718 : 						ATR_CHR_ANG(a0) = (1);
; 4719 : 					else if (ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum] < 40)
; 4720 : 						ATR_CHR_ANG(a0) = (5);
; 4721 : #endif
; 4722 : 					ToCallMgc.wCurAttackNum++;

  00183	66 8b 0d c6 00
	00 00		 mov	 cx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
$LN15@RunTimeMag:
  0018a	66 8b 35 c2 00
	00 00		 mov	 si, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+194
  00191	66 41		 inc	 cx
  00193	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4
  00199	66 89 0d c6 00
	00 00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198, cx
$LN12@RunTimeMag:

; 4723 : 				}
; 4724 : 				if (ToCallMgc.wCurAttackNum >= ToCallMgc.wNumAttacks || ToCallMgc.wMgcFrameCount[ToCallMgc.wCurAttackNum] > ToCallMgc.dwCurFrame2)

  001a0	66 3b ce	 cmp	 cx, si
  001a3	0f 83 7a 01 00
	00		 jae	 $LN40@RunTimeMag
  001a9	0f b7 c1	 movzx	 eax, cx
  001ac	0f b7 04 45 42
	00 00 00	 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+66]
  001b4	3b c2		 cmp	 eax, edx
  001b6	0f 86 d4 fe ff
	ff		 jbe	 $LL2@RunTimeMag

; 4760 : 
; 4761 : 	return TRUE;

  001bc	5b		 pop	 ebx
  001bd	42		 inc	 edx

; 4762 : }

  001be	b8 01 00 00 00	 mov	 eax, 1
  001c3	5f		 pop	 edi
  001c4	89 15 04 00 00
	00		 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4, edx
  001ca	5e		 pop	 esi
  001cb	c3		 ret	 0
$LN9@RunTimeMag:

; 4725 : 					break;
; 4726 : 			}
; 4727 : 		}
; 4728 : 	}else{
; 4729 : 		// ÊòØÂê¶‰ªçÊúâÂ∞öÊú™Êí≠ÊîæÁöÑÂííÊúØ
; 4730 : 		if (ToCallMgc.wCurAttackNum < ToCallMgc.wNumAttacks){

  001cc	66 3b ce	 cmp	 cx, si
  001cf	0f 83 48 01 00
	00		 jae	 $LN46@RunTimeMag
  001d5	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4
  001db	bb 58 00 00 00	 mov	 ebx, 88			; 00000058H
  001e0	8d 7b bc	 lea	 edi, DWORD PTR [ebx-68]
$LL4@RunTimeMag:

; 4731 : 			while (1){
; 4732 : 				if (ToCallMgc.dwCurFrame2 == ToCallMgc.wMgcFrameCount[ToCallMgc.wCurAttackNum]){

  001e3	0f b7 c1	 movzx	 eax, cx
  001e6	0f b7 04 45 42
	00 00 00	 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+66]
  001ee	3b d0		 cmp	 edx, eax
  001f0	0f 85 ff 00 00
	00		 jne	 $LN19@RunTimeMag

; 4733 : 					ACTION	*a0;
; 4734 : 
; 4735 : 					a0 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  001f6	68 60 02 00 00	 push	 608			; 00000260H
  001fb	6a 47		 push	 71			; 00000047H
  001fd	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  00202	8b d0		 mov	 edx, eax
  00204	83 c4 08	 add	 esp, 8

; 4736 : 					ATR_NAME(a0) = monster;
; 4737 : 					ATR_VCT_NO(a0) = TOCALL_MAGIC_CASE + 2;		// ÂííÊúØÁöÑÊâßË°å
; 4738 : 					ATR_DISP_PRIO(a0) = (1 == ToCallMgc.wCurMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  00207	b8 01 00 00 00	 mov	 eax, 1
  0020c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0020f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster
  00216	c6 01 d4	 mov	 BYTE PTR [ecx], 212	; 000000d4H
  00219	b9 02 00 00 00	 mov	 ecx, 2
  0021e	66 3b 05 3e 00
	00 00		 cmp	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+62
  00225	0f 44 cb	 cmove	 ecx, ebx
  00228	88 4a 15	 mov	 BYTE PTR [edx+21], cl

; 4739 : 					ATR_CHR_NO(a0) = ToCallMgc.iCurMgcNum;

  0022b	a1 20 00 00 00	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32
  00230	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax

; 4740 : #ifdef _PROFESSION_ADDSKILL
; 4741 : 					if (g_bUseAlpha){

  00236	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, 0 ; g_bUseAlpha
  0023d	a1 20 00 00 00	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32
  00242	74 0e		 je	 SHORT $LN20@RunTimeMag

; 4742 : 						if (ToCallMgc.iCurMgcNum == 101770 || ToCallMgc.iCurMgcNum == 101771)//‰∏∫‰∫ÜËÆ©Á†¥Èô§ÁªìÁïåÂõæÊ°£ÊòæÁ§∫‰∫éÂÖ∂ÂÆÉÁªìÁïå‰πã‰∏ä

  00244	3d 8a 8d 01 00	 cmp	 eax, 101770		; 00018d8aH
  00249	74 15		 je	 SHORT $LN25@RunTimeMag
  0024b	3d 8b 8d 01 00	 cmp	 eax, 101771		; 00018d8bH

; 4743 : 							ATR_DISP_PRIO(a0)	= DISP_PRIO_TILE + ToCallMgc.wCurMgcOnChar;
; 4744 : 					}else{

  00250	eb 0c		 jmp	 SHORT $LN49@RunTimeMag
$LN20@RunTimeMag:

; 4745 : 						if (ToCallMgc.iCurMgcNum == 101825 || ToCallMgc.iCurMgcNum == 101826)//‰∏∫‰∫ÜËÆ©Á†¥Èô§ÁªìÁïåÂõæÊ°£ÊòæÁ§∫‰∫éÂÖ∂ÂÆÉÁªìÁïå‰πã‰∏ä

  00252	3d c1 8d 01 00	 cmp	 eax, 101825		; 00018dc1H
  00257	74 07		 je	 SHORT $LN25@RunTimeMag
  00259	3d c2 8d 01 00	 cmp	 eax, 101826		; 00018dc2H
$LN49@RunTimeMag:

; 4746 : 							ATR_DISP_PRIO(a0)	= DISP_PRIO_TILE + ToCallMgc.wCurMgcOnChar;
; 4747 : 					}
; 4748 : #endif
; 4749 : 					ATR_LONG_WORK(0, a0) = ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum];

  0025e	75 0a		 jne	 SHORT $LN24@RunTimeMag
$LN25@RunTimeMag:
  00260	a0 3e 00 00 00	 mov	 al, BYTE PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+62
  00265	fe c0		 inc	 al
  00267	88 42 15	 mov	 BYTE PTR [edx+21], al
$LN24@RunTimeMag:
  0026a	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  00271	0f b7 0c 45 62
	00 00 00	 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+98]
  00279	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0027c	89 88 34 01 00
	00		 mov	 DWORD PTR [eax+308], ecx

; 4750 : 					ATR_H_POS(a0) = (20 == ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]) ? ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].x : ATR_H_POS(p_party[ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]]) + ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].x;

  00282	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  00289	0f b7 34 45 62
	00 00 00	 movzx	 esi, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+98]
  00291	0f b7 0c 85 82
	00 00 00	 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*4+130]
  00299	66 3b fe	 cmp	 di, si
  0029c	74 0c		 je	 SHORT $LN34@RunTimeMag
  0029e	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  002a5	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  002a8	03 c8		 add	 ecx, eax
$LN34@RunTimeMag:
  002aa	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 4751 : 					ATR_V_POS(a0) = (20 == ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]) ? ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].y : ATR_V_POS(p_party[ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]]) + ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].y;

  002ad	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  002b4	0f b7 34 45 62
	00 00 00	 movzx	 esi, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+98]
  002bc	0f b7 0c 85 84
	00 00 00	 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*4+132]
  002c4	66 3b fe	 cmp	 di, si
  002c7	74 0c		 je	 SHORT $LN36@RunTimeMag
  002c9	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  002d0	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  002d3	03 c8		 add	 ecx, eax
$LN36@RunTimeMag:
  002d5	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 4752 : 					ToCallMgc.wCurAttackNum++;

  002d8	66 8b 0d c6 00
	00 00		 mov	 cx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198
  002df	66 8b 35 c2 00
	00 00		 mov	 si, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+194
  002e6	66 41		 inc	 cx
  002e8	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4
  002ee	66 89 0d c6 00
	00 00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198, cx
$LN19@RunTimeMag:

; 4753 : 				}
; 4754 : 				if (ToCallMgc.wCurAttackNum >= ToCallMgc.wNumAttacks || ToCallMgc.wMgcFrameCount[ToCallMgc.wCurAttackNum] > ToCallMgc.dwCurFrame2)

  002f5	66 3b ce	 cmp	 cx, si
  002f8	73 29		 jae	 SHORT $LN40@RunTimeMag
  002fa	0f b7 c1	 movzx	 eax, cx
  002fd	0f b7 04 45 42
	00 00 00	 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[eax*2+66]
  00305	3b c2		 cmp	 eax, edx
  00307	0f 86 d6 fe ff
	ff		 jbe	 $LL4@RunTimeMag

; 4760 : 
; 4761 : 	return TRUE;

  0030d	5b		 pop	 ebx
  0030e	42		 inc	 edx

; 4762 : }

  0030f	b8 01 00 00 00	 mov	 eax, 1
  00314	5f		 pop	 edi
  00315	89 15 04 00 00
	00		 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4, edx
  0031b	5e		 pop	 esi
  0031c	c3		 ret	 0
$LN46@RunTimeMag:

; 4725 : 					break;
; 4726 : 			}
; 4727 : 		}
; 4728 : 	}else{
; 4729 : 		// ÊòØÂê¶‰ªçÊúâÂ∞öÊú™Êí≠ÊîæÁöÑÂííÊúØ
; 4730 : 		if (ToCallMgc.wCurAttackNum < ToCallMgc.wNumAttacks){

  0031d	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4
$LN40@RunTimeMag:

; 4755 : 					break;
; 4756 : 			}
; 4757 : 		}
; 4758 : 	}
; 4759 : 	ToCallMgc.dwCurFrame2++;

  00323	42		 inc	 edx
  00324	89 15 04 00 00
	00		 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4, edx

; 4760 : 
; 4761 : 	return TRUE;

  0032a	5b		 pop	 ebx
$LN47@RunTimeMag:

; 4762 : }

  0032b	5f		 pop	 edi
  0032c	b8 01 00 00 00	 mov	 eax, 1
  00331	5e		 pop	 esi
  00332	c3		 ret	 0
?RunTimeMagicToCall@@YAHXZ ENDP				; RunTimeMagicToCall
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_command_asc@@YAXXZ
_TEXT	SEGMENT
_d0$ = -4						; size = 1
?get_command_asc@@YAXXZ PROC				; get_command_asc, COMDAT

; 4469 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4470 : 	char d0, d1 = 0;
; 4471 : 	char *a2;
; 4472 : 
; 4473 : 	kanji_buf[0][0] = kanji_buf[1][0] = kanji_buf[2][0] = kanji_buf[3][0] = 0;
; 4474 : 	a2 = kanji_buf[d1];
; 4475 : 	while (1)
; 4476 : 	{
; 4477 : 		d0 = BattleCmd[command_point++];		//?Óû∞?Óéï?Óèù?

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_point@@3HA
  0000a	53		 push	 ebx
  0000b	32 ff		 xor	 bh, bh
  0000d	56		 push	 esi
  0000e	8a 99 00 00 00
	00		 mov	 bl, BYTE PTR ?BattleCmd@@3PADA[ecx]
  00014	be 00 00 00 00	 mov	 esi, OFFSET ?kanji_buf@@3PAY0IA@DA
  00019	41		 inc	 ecx
  0001a	88 3d 80 01 00
	00		 mov	 BYTE PTR ?kanji_buf@@3PAY0IA@DA+384, bh
  00020	88 3d 00 01 00
	00		 mov	 BYTE PTR ?kanji_buf@@3PAY0IA@DA+256, bh
  00026	8b c1		 mov	 eax, ecx
  00028	88 3d 80 00 00
	00		 mov	 BYTE PTR ?kanji_buf@@3PAY0IA@DA+128, bh
  0002e	88 3d 00 00 00
	00		 mov	 BYTE PTR ?kanji_buf@@3PAY0IA@DA, bh
  00034	88 5d fc	 mov	 BYTE PTR _d0$[ebp], bl
  00037	89 0d 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, ecx
  0003d	57		 push	 edi

; 4478 : 		if (d0 == NULL)		//Óé∑???

  0003e	84 db		 test	 bl, bl
  00040	74 5a		 je	 SHORT $LN14@get_comman
  00042	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__IsDBCSLeadByte@4
$LL2@get_comman:

; 4481 : 			break;
; 4482 : 		}
; 4483 : 		//????
; 4484 : 		if (d0 == '\t')

  00048	80 fb 09	 cmp	 bl, 9
  0004b	75 18		 jne	 SHORT $LN5@get_comman

; 4485 : 		{
; 4486 : 			//Óé∑????
; 4487 : 			*a2 = 0;
; 4488 : 			d1++;

  0004d	fe c7		 inc	 bh
  0004f	c6 06 00	 mov	 BYTE PTR [esi], 0

; 4489 : 			if (d1 == 4)		//?????

  00052	80 ff 04	 cmp	 bh, 4
  00055	74 4b		 je	 SHORT $LN19@get_comman

; 4490 : 				break;
; 4491 : 			a2 = kanji_buf[d1];

  00057	0f be f7	 movsx	 esi, bh
  0005a	c1 e6 07	 shl	 esi, 7
  0005d	81 c6 00 00 00
	00		 add	 esi, OFFSET ?kanji_buf@@3PAY0IA@DA

; 4492 : 			continue;

  00063	eb 21		 jmp	 SHORT $LN9@get_comman
$LN5@get_comman:

; 4493 : 		}
; 4494 : 		//?ÓìÅ???
; 4495 : 		if (d0 == '|')

  00065	80 fb 7c	 cmp	 bl, 124			; 0000007cH
  00068	74 38		 je	 SHORT $LN19@get_comman

; 4496 : 			break;
; 4497 : 		if (IsDBCSLeadByte(d0))

  0006a	ff 75 fc	 push	 DWORD PTR _d0$[ebp]
  0006d	ff d7		 call	 edi
  0006f	88 1e		 mov	 BYTE PTR [esi], bl
  00071	46		 inc	 esi
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_point@@3HA
  00078	85 c0		 test	 eax, eax
  0007a	74 0a		 je	 SHORT $LN9@get_comman

; 4498 : 		{
; 4499 : 			*a2++ = d0;
; 4500 : 			*a2++ = BattleCmd[command_point++];

  0007c	8a 81 00 00 00
	00		 mov	 al, BYTE PTR ?BattleCmd@@3PADA[ecx]
  00082	88 06		 mov	 BYTE PTR [esi], al
  00084	46		 inc	 esi
  00085	41		 inc	 ecx
$LN9@get_comman:

; 4470 : 	char d0, d1 = 0;
; 4471 : 	char *a2;
; 4472 : 
; 4473 : 	kanji_buf[0][0] = kanji_buf[1][0] = kanji_buf[2][0] = kanji_buf[3][0] = 0;
; 4474 : 	a2 = kanji_buf[d1];
; 4475 : 	while (1)
; 4476 : 	{
; 4477 : 		d0 = BattleCmd[command_point++];		//?Óû∞?Óéï?Óèù?

  00086	8a 99 00 00 00
	00		 mov	 bl, BYTE PTR ?BattleCmd@@3PADA[ecx]
  0008c	41		 inc	 ecx
  0008d	88 5d fc	 mov	 BYTE PTR _d0$[ebp], bl
  00090	8b c1		 mov	 eax, ecx
  00092	89 0d 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, ecx

; 4478 : 		if (d0 == NULL)		//Óé∑???

  00098	84 db		 test	 bl, bl
  0009a	75 ac		 jne	 SHORT $LL2@get_comman
$LN14@get_comman:

; 4479 : 		{
; 4480 : 			command_point--;

  0009c	48		 dec	 eax
  0009d	a3 00 00 00 00	 mov	 DWORD PTR ?command_point@@3HA, eax
$LN19@get_comman:

; 4501 : 		}
; 4502 : 		else
; 4503 : 			*a2++ = d0;
; 4504 : 	}
; 4505 : 	//Óé∑????
; 4506 : 	*a2 = 0;
; 4507 : }

  000a2	5f		 pop	 edi
  000a3	c6 06 00	 mov	 BYTE PTR [esi], 0
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
?get_command_asc@@YAXXZ ENDP				; get_command_asc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?disp_attrib@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?disp_attrib@@YAXPAUaction@@@Z PROC			; disp_attrib, COMDAT

; 4433 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4434 : 	ACTION *a1;
; 4435 : 
; 4436 : 	a1 = p_attrib;
; 4437 : 	switch (ATR_ATTRIB(a0))

  00003	8b 45 08	 mov	 eax, DWORD PTR _a0$[ebp]
  00006	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_attrib@@3PAUaction@@A
  00011	83 f9 04	 cmp	 ecx, 4
  00014	77 55		 ja	 SHORT $LN2@disp_attri
  00016	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN10@disp_attri[ecx*4]
$LN4@disp_attri:

; 4462 : 		break;
; 4463 : 	}
; 4464 : 	pattern(a1, ANM_NOMAL_SPD, ANM_NO_LOOP);

  0001d	6a 01		 push	 1
  0001f	6a 00		 push	 0
  00021	50		 push	 eax
  00022	c7 80 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+164], 2
  0002c	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4465 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN5@disp_attri:

; 4438 : 	{
; 4439 : 		//Êó†Â±ûÊÄß
; 4440 : 	case 0:
; 4441 : 		ATR_ATTRIB(a1) = ACT_ATR_HIDE;		//‰∏çË°®Á§∫
; 4442 : 		break;
; 4443 : 		//Âú∞Â±ûÊÄß
; 4444 : 	case 1:
; 4445 : 		ATR_ATTRIB(a1) &= ~ACT_ATR_HIDE;
; 4446 : 		ATR_CHR_NO(a1) = CG_ATR_ICON_EARTH_BATTLE;

  00036	c7 80 44 01 00
	00 2c 62 00 00	 mov	 DWORD PTR [eax+324], 25132 ; 0000622cH

; 4447 : 		break;

  00040	eb 22		 jmp	 SHORT $LN11@disp_attri
$LN6@disp_attri:

; 4448 : 		//Ê∞¥Â±ûÊÄß
; 4449 : 	case 2:
; 4450 : 		ATR_ATTRIB(a1) &= ~ACT_ATR_HIDE;
; 4451 : 		ATR_CHR_NO(a1) = CG_ATR_ICON_WATER_BATTLE;

  00042	c7 80 44 01 00
	00 2d 62 00 00	 mov	 DWORD PTR [eax+324], 25133 ; 0000622dH

; 4452 : 		break;

  0004c	eb 16		 jmp	 SHORT $LN11@disp_attri
$LN7@disp_attri:

; 4453 : 		//ÁÅ´Â±ûÊÄß
; 4454 : 	case 3:
; 4455 : 		ATR_ATTRIB(a1) &= ~ACT_ATR_HIDE;
; 4456 : 		ATR_CHR_NO(a1) = CG_ATR_ICON_FIRE_BATTLE;

  0004e	c7 80 44 01 00
	00 2e 62 00 00	 mov	 DWORD PTR [eax+324], 25134 ; 0000622eH

; 4457 : 		break;

  00058	eb 0a		 jmp	 SHORT $LN11@disp_attri
$LN8@disp_attri:

; 4458 : 		//È£éÂ±ûÊÄß
; 4459 : 	case 4:
; 4460 : 		ATR_ATTRIB(a1) &= ~ACT_ATR_HIDE;
; 4461 : 		ATR_CHR_NO(a1) = CG_ATR_ICON_WIND_BATTLE;

  0005a	c7 80 44 01 00
	00 2f 62 00 00	 mov	 DWORD PTR [eax+324], 25135 ; 0000622fH
$LN11@disp_attri:

; 4462 : 		break;
; 4463 : 	}
; 4464 : 	pattern(a1, ANM_NOMAL_SPD, ANM_NO_LOOP);

  00064	83 a0 a4 00 00
	00 fd		 and	 DWORD PTR [eax+164], -3	; fffffffdH
$LN2@disp_attri:
  0006b	6a 01		 push	 1
  0006d	6a 00		 push	 0
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4465 : }

  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
  0007a	66 90		 npad	 2
$LN10@disp_attri:
  0007c	00 00 00 00	 DD	 $LN4@disp_attri
  00080	00 00 00 00	 DD	 $LN5@disp_attri
  00084	00 00 00 00	 DD	 $LN6@disp_attri
  00088	00 00 00 00	 DD	 $LN7@disp_attri
  0008c	00 00 00 00	 DD	 $LN8@disp_attri
?disp_attrib@@YAXPAUaction@@@Z ENDP			; disp_attrib
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?check_all_dead@@YAHXZ
_TEXT	SEGMENT
?check_all_dead@@YAHXZ PROC				; check_all_dead, COMDAT

; 4356 : {

  00000	56		 push	 esi

; 4357 : 	int d0, d7;
; 4358 : 
; 4359 : 	d0 = 10;		//Ê£ÄÊü•‰∫∫Êï∞ËÆæÂÆö

  00001	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH

; 4360 : 	for (d7 = 0; d7 < 5; d7++)

  00006	b8 00 00 00 00	 mov	 eax, OFFSET ?p_party@@3PAPAUaction@@A
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@check_all_:

; 4361 : 	{
; 4362 : 		if (ATR_NAME(p_party[d7]) != NULL)		//????????????

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00016	75 0c		 jne	 SHORT $LN37@check_all_

; 4360 : 	for (d7 = 0; d7 < 5; d7++)

  00018	83 c0 04	 add	 eax, 4
  0001b	3d 14 00 00 00	 cmp	 eax, OFFSET ?p_party@@3PAPAUaction@@A+20
  00020	7c ee		 jl	 SHORT $LL4@check_all_

; 4413 : 				break;
; 4414 : #endif
; 4415 : #ifdef __NEW_BATTLE_EFFECT
; 4416 : 			if (1 == ATR_EFFECT_FLAG(p_party[d7]))

  00022	eb 12		 jmp	 SHORT $LN15@check_all_
$LN37@check_all_:

; 4363 : 		{
; 4364 : 			if (ATR_PET_OK(p_party[d7]))

  00024	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00027	b9 05 00 00 00	 mov	 ecx, 5
  0002c	80 b8 20 01 00
	00 00		 cmp	 BYTE PTR [eax+288], 0
  00033	0f 45 f1	 cmovne	 esi, ecx
$LN15@check_all_:

; 4365 : 				d0 = 5;		//Ê£ÄÊü•‰∫∫Êï∞ËÆæÂÆö
; 4366 : 			break;
; 4367 : 		}
; 4368 : 	}
; 4369 : 	for (d7 = 0; d7 < d0; d7++)

  00036	33 c9		 xor	 ecx, ecx
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@check_all_:

; 4370 : 	{
; 4371 : 		if (ATR_NAME(p_party[d7]) != NULL)

  00040	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  00047	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004b	74 28		 je	 SHORT $LN5@check_all_

; 4372 : 		{
; 4373 : 			if (ATR_LIFE(p_party[d7]) > 0)		//ÂÅáÂ¶ÇÊúâ‰∏Ä‰∏™‰∫∫ÊòØÊ¥ªÁùÄÁöÑ

  0004d	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  00051	7f 27		 jg	 SHORT $LN38@check_all_

; 4374 : 				break;
; 4375 : #ifdef _PETSKILL_LER
; 4376 : 			// Èõ∑Â∞îÁ¨¨‰∏ÄÊÆµÂèäÁ¨¨‰∫åÊÆµÊ≠ª‰∫°Êó∂‰∏çËÉΩÁÆóÂÖ®ÁÅ≠,Âõ†‰∏∫‰ºöÂèòË∫´
; 4377 : 			else if (ATR_CHR_NO(p_party[d7]) == 101813 || ATR_CHR_NO(p_party[d7]) == 101814)

  00053	8b 90 44 01 00
	00		 mov	 edx, DWORD PTR [eax+324]
  00059	81 fa b5 8d 01
	00		 cmp	 edx, 101813		; 00018db5H
  0005f	74 19		 je	 SHORT $LN38@check_all_
  00061	81 fa b6 8d 01
	00		 cmp	 edx, 101814		; 00018db6H
  00067	74 11		 je	 SHORT $LN38@check_all_

; 4378 : 				break;
; 4379 : #endif
; 4380 : #ifdef __NEW_BATTLE_EFFECT
; 4381 : 			if (1 == ATR_EFFECT_FLAG(p_party[d7]))

  00069	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0006c	83 b8 48 02 00
	00 01		 cmp	 DWORD PTR [eax+584], 1
  00073	74 05		 je	 SHORT $LN38@check_all_
$LN5@check_all_:

; 4365 : 				d0 = 5;		//Ê£ÄÊü•‰∫∫Êï∞ËÆæÂÆö
; 4366 : 			break;
; 4367 : 		}
; 4368 : 	}
; 4369 : 	for (d7 = 0; d7 < d0; d7++)

  00075	41		 inc	 ecx
  00076	3b ce		 cmp	 ecx, esi
  00078	7c c6		 jl	 SHORT $LL7@check_all_
$LN38@check_all_:

; 4382 : 				break;
; 4383 : #endif
; 4384 : #ifdef _HUNDRED_KILL
; 4385 : 			//‰ª£Ë°®Áôæ‰∫∫npcËøòÊ≤°ÁúüÊ≠£Ê≠ªÊéâ
; 4386 : 			if( BattleHundredFlag == TRUE ) 
; 4387 : 				break;
; 4388 : #endif
; 4389 : 		}
; 4390 : 	}
; 4391 : 	if (d7 == d0)		//ÂÖ®ÁÅ≠

  0007a	3b ce		 cmp	 ecx, esi
  0007c	74 77		 je	 SHORT $LN57@check_all_

; 4392 : 		return 1;
; 4393 : 	d0 = 20;		//Ê£ÄÊü•‰∫∫Êï∞ËÆæÂÆö

  0007e	be 14 00 00 00	 mov	 esi, 20			; 00000014H
  00083	b8 28 00 00 00	 mov	 eax, OFFSET ?p_party@@3PAPAUaction@@A+40
$LL10@check_all_:

; 4396 : 	{
; 4397 : 		if (ATR_NAME(p_party[d7]) != NULL)		//????????????

  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0008e	75 0c		 jne	 SHORT $LN41@check_all_

; 4394 : 
; 4395 : 	for (d7 = 10; d7 < 15; d7++)

  00090	83 c0 04	 add	 eax, 4
  00093	3d 3c 00 00 00	 cmp	 eax, OFFSET ?p_party@@3PAPAUaction@@A+60
  00098	7c ee		 jl	 SHORT $LL10@check_all_

; 4413 : 				break;
; 4414 : #endif
; 4415 : #ifdef __NEW_BATTLE_EFFECT
; 4416 : 			if (1 == ATR_EFFECT_FLAG(p_party[d7]))

  0009a	eb 12		 jmp	 SHORT $LN24@check_all_
$LN41@check_all_:

; 4398 : 		{
; 4399 : 			if (ATR_PET_OK(p_party[d7]))

  0009c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0009f	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000a4	80 b8 20 01 00
	00 00		 cmp	 BYTE PTR [eax+288], 0
  000ab	0f 45 f1	 cmovne	 esi, ecx
$LN24@check_all_:

; 4400 : 				d0 = 15;		//Ê£ÄÊü•‰∫∫Êï∞ËÆæÂÆö
; 4401 : 			break;
; 4402 : 		}
; 4403 : 	}
; 4404 : 	for (d7 = 10; d7 < d0; d7++)

  000ae	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
$LL13@check_all_:

; 4405 : 	{
; 4406 : 		if (ATR_NAME(p_party[d7]) != NULL)

  000b3	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  000ba	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000be	74 28		 je	 SHORT $LN11@check_all_

; 4407 : 		{
; 4408 : 			if (ATR_LIFE(p_party[d7]) > 0)		//ÂÅáÂ¶ÇÊúâ‰∏Ä‰∏™‰∫∫ÊòØÊ¥ªÁùÄÁöÑ

  000c0	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  000c4	7f 27		 jg	 SHORT $LN42@check_all_

; 4409 : 				break;
; 4410 : #ifdef _PETSKILL_LER
; 4411 : 			// Èõ∑Â∞îÁ¨¨‰∏ÄÊÆµÂèäÁ¨¨‰∫åÊÆµÊ≠ª‰∫°Êó∂‰∏çËÉΩÁÆóÂÖ®ÁÅ≠,Âõ†‰∏∫‰ºöÂèòË∫´
; 4412 : 			else if (ATR_CHR_NO(p_party[d7]) == 101813 || ATR_CHR_NO(p_party[d7]) == 101814)

  000c6	8b 90 44 01 00
	00		 mov	 edx, DWORD PTR [eax+324]
  000cc	81 fa b5 8d 01
	00		 cmp	 edx, 101813		; 00018db5H
  000d2	74 19		 je	 SHORT $LN42@check_all_
  000d4	81 fa b6 8d 01
	00		 cmp	 edx, 101814		; 00018db6H
  000da	74 11		 je	 SHORT $LN42@check_all_

; 4413 : 				break;
; 4414 : #endif
; 4415 : #ifdef __NEW_BATTLE_EFFECT
; 4416 : 			if (1 == ATR_EFFECT_FLAG(p_party[d7]))

  000dc	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000df	83 b8 48 02 00
	00 01		 cmp	 DWORD PTR [eax+584], 1
  000e6	74 05		 je	 SHORT $LN42@check_all_
$LN11@check_all_:

; 4400 : 				d0 = 15;		//Ê£ÄÊü•‰∫∫Êï∞ËÆæÂÆö
; 4401 : 			break;
; 4402 : 		}
; 4403 : 	}
; 4404 : 	for (d7 = 10; d7 < d0; d7++)

  000e8	41		 inc	 ecx
  000e9	3b ce		 cmp	 ecx, esi
  000eb	7c c6		 jl	 SHORT $LL13@check_all_
$LN42@check_all_:

; 4417 : 				break;
; 4418 : #endif
; 4419 : #ifdef _HUNDRED_KILL
; 4420 : 			//‰ª£Ë°®Áôæ‰∫∫npcËøòÊ≤°ÁúüÊ≠£Ê≠ªÊéâ
; 4421 : 			if( BattleHundredFlag == TRUE ) 
; 4422 : 				break;
; 4423 : #endif
; 4424 : 		}
; 4425 : 	}
; 4426 : 	if (d7 == d0)		//ÂÖ®ÁÅ≠ return 1

  000ed	3b ce		 cmp	 ecx, esi
  000ef	74 04		 je	 SHORT $LN57@check_all_

; 4428 : 	return 0;		//ËøòÊúâ‰∫∫Ê¥ªÁùÄ return 0 

  000f1	33 c0		 xor	 eax, eax
  000f3	5e		 pop	 esi

; 4429 : }

  000f4	c3		 ret	 0
$LN57@check_all_:

; 4427 : 		return 1;

  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	5e		 pop	 esi

; 4429 : }

  000fb	c3		 ret	 0
?check_all_dead@@YAHXZ ENDP				; check_all_dead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_body_cnt@@YAHXZ
_TEXT	SEGMENT
?get_body_cnt@@YAHXZ PROC				; get_body_cnt, COMDAT

; 4316 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 4317 : 	int d0, d1, d2 = 0;
; 4318 : 
; 4319 : 	d1 = command_point;		//?????????Óï§Óùç

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?command_point@@3HA
  00008	33 f6		 xor	 esi, esi

; 4320 : 	while (1)
; 4321 : 	{
; 4322 : 		d0 = get_num();		//Óò©Óéï?Óèù?

  0000a	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 4323 : 		if (d0 == -1)		//Óé∑???

  0000f	83 f8 ff	 cmp	 eax, -1
  00012	74 2f		 je	 SHORT $LN15@get_body_c
$LL2@get_body_c:

; 4324 : 			break;
; 4325 : 		if (d0 == 255)		//Óé∑???

  00014	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00019	74 28		 je	 SHORT $LN15@get_body_c

; 4326 : 			break;
; 4327 : 		get_num();		//???????

  0001b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 4328 : 		get_num();		//????????

  00020	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 4329 : 		if (BattleCmd[command_point] == 'p')

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  0002a	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  00031	75 05		 jne	 SHORT $LN6@get_body_c

; 4330 : 			get_num();		//pet????????

  00033	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
$LN6@get_body_c:

; 4331 : 		d2++;		//Óë∑??Óå´

  00038	46		 inc	 esi
  00039	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0003e	83 f8 ff	 cmp	 eax, -1
  00041	75 d1		 jne	 SHORT $LL2@get_body_c
$LN15@get_body_c:

; 4332 : 	}
; 4333 : 	command_point = d1;		//???????????
; 4334 : 
; 4335 : 	return d2;
; 4336 : }

  00043	89 3d 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, edi
  00049	8b c6		 mov	 eax, esi
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	c3		 ret	 0
?get_body_cnt@@YAHXZ ENDP				; get_body_cnt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_next_flg@@YAHXZ
_TEXT	SEGMENT
?get_next_flg@@YAHXZ PROC				; get_next_flg, COMDAT

; 4293 : {

  00000	56		 push	 esi

; 4294 : 	int d0, d1;
; 4295 : 
; 4296 : 	d1 = command_point;		//?????????Óï§Óùç

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?command_point@@3HA

; 4297 : 	d0 = get_num();		//Óò©Óéï?Óèù?

  00007	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 4298 : 	if (d0 == -1)		//Óé∑???

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	74 14		 je	 SHORT $get_next_flg_500$10

; 4299 : 		goto get_next_flg_500;
; 4300 : 	if (d0 == 255)		//Óé∑???

  00011	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00016	74 0d		 je	 SHORT $get_next_flg_500$10

; 4301 : 		goto get_next_flg_500;
; 4302 : 	d0 = get_num();		//???Óéï?Óèù?

  00018	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 4310 : }

  0001d	89 35 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, esi
$get_next_flg_700$11:
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
$get_next_flg_500$10:

; 4303 : 	goto get_next_flg_700;
; 4304 : get_next_flg_500:
; 4305 : 	d0 = 0;
; 4306 : get_next_flg_700:
; 4307 : 	command_point = d1;		//???????????
; 4308 : 
; 4309 : 	return d0;

  00025	33 c0		 xor	 eax, eax

; 4310 : }

  00027	89 35 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, esi
$get_next_flg_700_1$12:
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
?get_next_flg@@YAHXZ ENDP				; get_next_flg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_name@@YAXPAUaction@@@Z
_TEXT	SEGMENT
tv187 = -4						; size = 4
_d0$ = 8						; size = 1
_a1$ = 8						; size = 4
?get_name@@YAXPAUaction@@@Z PROC			; get_name, COMDAT

; 4263 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4264 : 	char d0;
; 4265 : 	char *a2;
; 4266 : 
; 4267 : 	a2 = ATR_HANDLE(a1);
; 4268 : 	while (1)
; 4269 : 	{
; 4270 : 		d0 = BattleCmd[command_point++];		//?Óû∞?Óéï?Óèù?

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  0000c	53		 push	 ebx
  0000d	83 c1 38	 add	 ecx, 56			; 00000038H
  00010	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR ?BattleCmd@@3PADA[eax]
  00016	40		 inc	 eax
  00017	89 4d fc	 mov	 DWORD PTR tv187[ebp], ecx
  0001a	88 5d 08	 mov	 BYTE PTR _d0$[ebp], bl
  0001d	a3 00 00 00 00	 mov	 DWORD PTR ?command_point@@3HA, eax
  00022	56		 push	 esi
  00023	8b f1		 mov	 esi, ecx

; 4271 : 		if (d0 == NULL)		//Óé∑???

  00025	84 db		 test	 bl, bl
  00027	74 3e		 je	 SHORT $LN11@get_name
  00029	57		 push	 edi
  0002a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__IsDBCSLeadByte@4
$LL2@get_name:

; 4272 : 			break;
; 4273 : 		//?ÓìÅ???
; 4274 : 		if (d0 == '|')

  00030	80 fb 7c	 cmp	 bl, 124			; 0000007cH
  00033	74 2e		 je	 SHORT $LN15@get_name

; 4275 : 			break;
; 4276 : 		if (IsDBCSLeadByte(d0))

  00035	ff 75 08	 push	 DWORD PTR _d0$[ebp]
  00038	ff d7		 call	 edi
  0003a	88 1e		 mov	 BYTE PTR [esi], bl
  0003c	46		 inc	 esi
  0003d	85 c0		 test	 eax, eax
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  00044	74 0a		 je	 SHORT $LN7@get_name

; 4277 : 		{
; 4278 : 			*a2++ = d0;
; 4279 : 			*a2++ = BattleCmd[command_point++];

  00046	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?BattleCmd@@3PADA[eax]
  0004c	88 0e		 mov	 BYTE PTR [esi], cl
  0004e	46		 inc	 esi
  0004f	40		 inc	 eax
$LN7@get_name:

; 4264 : 	char d0;
; 4265 : 	char *a2;
; 4266 : 
; 4267 : 	a2 = ATR_HANDLE(a1);
; 4268 : 	while (1)
; 4269 : 	{
; 4270 : 		d0 = BattleCmd[command_point++];		//?Óû∞?Óéï?Óèù?

  00050	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR ?BattleCmd@@3PADA[eax]
  00056	40		 inc	 eax
  00057	88 5d 08	 mov	 BYTE PTR _d0$[ebp], bl
  0005a	a3 00 00 00 00	 mov	 DWORD PTR ?command_point@@3HA, eax

; 4271 : 		if (d0 == NULL)		//Óé∑???

  0005f	84 db		 test	 bl, bl
  00061	75 cd		 jne	 SHORT $LL2@get_name
$LN15@get_name:
  00063	8b 4d fc	 mov	 ecx, DWORD PTR tv187[ebp]
  00066	5f		 pop	 edi
$LN11@get_name:

; 4280 : 		}
; 4281 : 		else
; 4282 : 			*a2++ = d0;
; 4283 : 	}
; 4284 : 	//Óé∑????
; 4285 : 	*a2 = 0;
; 4286 : 	makeStringFromEscaped(ATR_HANDLE(a1));

  00067	51		 push	 ecx
  00068	c6 06 00	 mov	 BYTE PTR [esi], 0
  0006b	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  00070	83 c4 04	 add	 esp, 4
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 4287 : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?get_name@@YAXPAUaction@@@Z ENDP			; get_name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_command@@YADXZ
_TEXT	SEGMENT
?get_command@@YADXZ PROC				; get_command, COMDAT

; 4231 : 	int now_point = 0;
; 4232 : 	char d0;
; 4233 : 
; 4234 : 	while (1)
; 4235 : 	{
; 4236 : 		now_point = command_point;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  00005	56		 push	 esi

; 4237 : 		d0 = BattleCmd[command_point++];

  00006	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR ?BattleCmd@@3PADA[eax]
  0000c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, ecx

; 4238 : 		if (d0 == NULL)

  00015	84 d2		 test	 dl, dl
  00017	74 3a		 je	 SHORT $LN11@get_comman
  00019	8b f1		 mov	 esi, ecx
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@get_comman:

; 4240 : 		if (d0 == 'B')

  00020	80 fa 42	 cmp	 dl, 66			; 00000042H
  00023	75 17		 jne	 SHORT $LN6@get_comman

; 4241 : 		{
; 4242 : 			//andy_reEdit 2003/07/18 21:54
; 4243 : 			if (BattleCmd[now_point + 2] == '|' && (BattleCmd[now_point - 1] == '|' || BattleCmd[now_point - 1] == NULL))

  00025	80 b8 02 00 00
	00 7c		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax+2], 124 ; 0000007cH
  0002c	75 0e		 jne	 SHORT $LN6@get_comman
  0002e	8a 80 ff ff ff
	ff		 mov	 al, BYTE PTR ?BattleCmd@@3PADA[eax-1]
  00034	3c 7c		 cmp	 al, 124			; 0000007cH
  00036	74 1f		 je	 SHORT $LN7@get_comman
  00038	84 c0		 test	 al, al
  0003a	74 1b		 je	 SHORT $LN7@get_comman
$LN6@get_comman:

; 4237 : 		d0 = BattleCmd[command_point++];

  0003c	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?BattleCmd@@3PADA[ecx]
  00042	8b c1		 mov	 eax, ecx
  00044	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00047	89 0d 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, ecx
  0004d	8b f1		 mov	 esi, ecx

; 4238 : 		if (d0 == NULL)

  0004f	84 d2		 test	 dl, dl
  00051	75 cd		 jne	 SHORT $LL2@get_comman
$LN11@get_comman:

; 4239 : 			return -1;

  00053	0c ff		 or	 al, -1
  00055	5e		 pop	 esi

; 4248 : 	return d0;
; 4249 : }

  00056	c3		 ret	 0
$LN7@get_comman:

; 4244 : 				break;
; 4245 : 		}
; 4246 : 	}
; 4247 : 	d0 = BattleCmd[command_point++];

  00057	8a 81 00 00 00
	00		 mov	 al, BYTE PTR ?BattleCmd@@3PADA[ecx]
  0005d	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00060	89 0d 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, ecx
  00066	5e		 pop	 esi

; 4248 : 	return d0;
; 4249 : }

  00067	c3		 ret	 0
?get_command@@YADXZ ENDP				; get_command
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_raster_pos@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?set_raster_pos@@YAXPAUaction@@@Z PROC			; set_raster_pos, COMDAT

; 4098 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4099 : 	int d0;
; 4100 : 
; 4101 : #ifdef __ATTACK_MAGIC
; 4102 : 	int value = 0;
; 4103 : 
; 4104 : 	// Â¶ÇÊûúÊ≠£Âú®Âú∞Èúá‰∏≠ÊàñÁâπÊÆäÁöÑÂú∞ÂõæÁºñÂè∑Êó∂
; 4105 : 	if ((g_iRunEarthQuake < 2) && (BattleMapNo < 148 || BattleMapNo > 150))

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iRunEarthQuake@@3HA ; g_iRunEarthQuake
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	83 f8 02	 cmp	 eax, 2
  0000e	7d 19		 jge	 SHORT $LN8@set_raster
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BattleMapNo@@3HA ; BattleMapNo
  00016	81 f9 94 00 00
	00		 cmp	 ecx, 148		; 00000094H
  0001c	7c 55		 jl	 SHORT $LN1@set_raster
  0001e	81 f9 96 00 00
	00		 cmp	 ecx, 150		; 00000096H
  00024	7f 4d		 jg	 SHORT $LN1@set_raster

; 4106 : 		return;
; 4107 : 	if (2 == g_iRunEarthQuake)

  00026	83 f8 02	 cmp	 eax, 2
$LN8@set_raster:
  00029	75 4b		 jne	 SHORT $LN4@set_raster

; 4108 : 		value = g_iCurRunEarthQuake;

  0002b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_iCurRunEarthQuake@@3HA ; g_iCurRunEarthQuake
$LN6@set_raster:
  00031	56		 push	 esi

; 4112 : 		return;
; 4113 : 	}
; 4114 : 	d0 = ATR_V_POS(a1) >> 3;

  00032	8b 75 08	 mov	 esi, DWORD PTR _a1$[ebp]
  00035	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00038	8b d0		 mov	 edx, eax

; 4115 : 	d0 += piyo_point + value;
; 4116 : 	d0 &= 63;
; 4117 : 	ATR_V_POS(a1) -= piyo_tbl[d0];
; 4118 : 	ATR_INT_WORK1(a1) -= piyo_tbl[d0];

  0003a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0003d	c1 fa 03	 sar	 edx, 3
  00040	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?piyo_point@@3HA ; piyo_point
  00046	03 d7		 add	 edx, edi
  00048	83 e2 3f	 and	 edx, 63			; 0000003fH
  0004b	2b 04 95 00 00
	00 00		 sub	 eax, DWORD PTR ?piyo_tbl@@3PAHA[edx*4]
  00052	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00055	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?piyo_tbl@@3PAHA[edx*4]
  0005c	29 81 28 01 00
	00		 sub	 DWORD PTR [ecx+296], eax

; 4119 : 	ATR_INT_WORK3(a1) = piyo_tbl[d0];

  00062	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00065	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?piyo_tbl@@3PAHA[edx*4]
  0006c	5e		 pop	 esi
  0006d	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
$LN1@set_raster:
  00073	5f		 pop	 edi

; 4120 : #else
; 4121 : 	//??????????????
; 4122 : 	if (BattleMapNo < 148 || BattleMapNo > 150)
; 4123 : 		return;
; 4124 : 	d0 = ATR_V_POS(a1) >> 3;
; 4125 : 	d0 += piyo_point;
; 4126 : 	d0 &= 63;
; 4127 : 	ATR_V_POS(a1) -= piyo_tbl[d0];
; 4128 : 	ATR_INT_WORK1(a1) -= piyo_tbl[d0];
; 4129 : 	ATR_INT_WORK3(a1) = piyo_tbl[d0];
; 4130 : #endif
; 4131 : }

  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN4@set_raster:

; 4109 : 	else if (3 == g_iRunEarthQuake)

  00076	83 f8 03	 cmp	 eax, 3
  00079	75 b6		 jne	 SHORT $LN6@set_raster

; 4110 : 	{
; 4111 : 		ATR_INT_WORK3(a1) = 0;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0007e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00081	89 b8 30 01 00
	00		 mov	 DWORD PTR [eax+304], edi
  00087	5f		 pop	 edi

; 4120 : #else
; 4121 : 	//??????????????
; 4122 : 	if (BattleMapNo < 148 || BattleMapNo > 150)
; 4123 : 		return;
; 4124 : 	d0 = ATR_V_POS(a1) >> 3;
; 4125 : 	d0 += piyo_point;
; 4126 : 	d0 &= 63;
; 4127 : 	ATR_V_POS(a1) -= piyo_tbl[d0];
; 4128 : 	ATR_INT_WORK1(a1) -= piyo_tbl[d0];
; 4129 : 	ATR_INT_WORK3(a1) = piyo_tbl[d0];
; 4130 : #endif
; 4131 : }

  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?set_raster_pos@@YAXPAUaction@@@Z ENDP			; set_raster_pos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?sort_chr@@YAHPAUSORT_CHR_EQU@@0@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
_a1$ = 12						; size = 4
?sort_chr@@YAHPAUSORT_CHR_EQU@@0@Z PROC			; sort_chr, COMDAT

; 4083 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4084 : 	if (a0->v_pos > a1->v_pos)

  00003	8b 45 08	 mov	 eax, DWORD PTR _a0$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _a1$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 9f c0	 setg	 al
  00012	8d 04 45 ff ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-1]

; 4085 : 		return 1;
; 4086 : 	else
; 4087 : 		return -1;
; 4088 : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?sort_chr@@YAHPAUSORT_CHR_EQU@@0@Z ENDP			; sort_chr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?amelioration@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d1$ = -4						; size = 4
_d0$ = 8						; size = 4
_a0$ = 8						; size = 4
?amelioration@@YAXPAUaction@@@Z PROC			; amelioration, COMDAT

; 3997 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3998 : 	ACTION *a1;
; 3999 : 	int d0, d1;
; 4000 : 
; 4001 : 	switch (ATR_VCT_NO(a0))

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0000e	83 e9 00	 sub	 ecx, 0
  00011	74 69		 je	 SHORT $LN4@ameliorati
  00013	83 e9 01	 sub	 ecx, 1
  00016	74 2c		 je	 SHORT $LN14@ameliorati
  00018	83 e9 01	 sub	 ecx, 1
  0001b	0f 85 e0 01 00
	00		 jne	 $LN2@ameliorati

; 4070 : 		break;
; 4071 : 	case 2:
; 4072 : 		if (--ATR_STIMER(a0))

  00021	80 40 01 ff	 add	 BYTE PTR [eax+1], 255	; 000000ffH
  00025	0f 85 d6 01 00
	00		 jne	 $LN2@ameliorati

; 4073 : 			break;
; 4074 : 		ATR_DAMAGE(p_master)++;		//???Óëò

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A

; 4075 : 		DeathAction(a0);		//Óé∑?

  00030	56		 push	 esi
  00031	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00034	ff 40 58	 inc	 DWORD PTR [eax+88]
  00037	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0003c	83 c4 04	 add	 esp, 4
  0003f	5e		 pop	 esi

; 4076 : 		break;
; 4077 : 	}
; 4078 : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN14@ameliorati:

; 4062 : 		break;
; 4063 : 	case 1:
; 4064 : 		if (--ATR_HIT_STOP(a0))		//??????????

  00044	80 40 5c ff	 add	 BYTE PTR [eax+92], 255	; 000000ffH
  00048	0f 85 b3 01 00
	00		 jne	 $LN2@ameliorati

; 4065 : 			break;
; 4066 : 		ATR_STIMER(a0) = 64;

  0004e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00051	c6 40 01 40	 mov	 BYTE PTR [eax+1], 64	; 00000040H

; 4067 : 		ATR_VCT_NO(a0) = 2;

  00055	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00058	c6 00 02	 mov	 BYTE PTR [eax], 2

; 4068 : 		a0->atr = ACT_ATR_HIDE;
; 4069 : 		p_missile[ATR_BODY_CNT(a0)] = NULL;

  0005b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005e	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2
  00068	5e		 pop	 esi
  00069	0f b6 40 54	 movzx	 eax, BYTE PTR [eax+84]
  0006d	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A[eax*4], 0

; 4076 : 		break;
; 4077 : 	}
; 4078 : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN4@ameliorati:

; 4002 : 	{
; 4003 : 	case 0:
; 4004 : 		if (ATR_INT_WORK0(a0) == 0)		//ÓìÖ?Óüé?Óì∑??

  0007c	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00083	75 52		 jne	 SHORT $LN5@ameliorati

; 4005 : 		{
; 4006 : 			d0 = 310;
; 4007 : 			d1 = 222;
; 4008 : 			radar(a0, &d0, &d1);	//????

  00085	8d 45 fc	 lea	 eax, DWORD PTR _d1$[ebp]
  00088	c7 45 08 36 01
	00 00		 mov	 DWORD PTR _d0$[ebp], 310 ; 00000136H
  0008f	50		 push	 eax
  00090	8d 45 08	 lea	 eax, DWORD PTR _d0$[ebp]
  00093	c7 45 fc de 00
	00 00		 mov	 DWORD PTR _d1$[ebp], 222 ; 000000deH
  0009a	50		 push	 eax
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 4009 : 			ATR_CRS(a0) = d0;		//??????

  000a1	8b 45 08	 mov	 eax, DWORD PTR _d0$[ebp]

; 4010 : 			gemini(a0);		//?ÓôÆ

  000a4	56		 push	 esi
  000a5	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  000ab	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 4011 : 			if (d1 <= (ATR_SPD(a0) >> 2))		//????

  000b0	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  000b6	83 c4 10	 add	 esp, 16			; 00000010H
  000b9	c1 f8 02	 sar	 eax, 2
  000bc	39 45 fc	 cmp	 DWORD PTR _d1$[ebp], eax
  000bf	0f 8f 25 01 00
	00		 jg	 $LN11@ameliorati

; 4012 : 				ATR_INT_WORK0(a0) = 1;		//ÓìÖ?Óüé????

  000c5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c8	c7 80 24 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+292], 1

; 4013 : 		}

  000d2	e9 13 01 00 00	 jmp	 $LN11@ameliorati
$LN5@ameliorati:
  000d7	57		 push	 edi

; 4014 : 		else
; 4015 : 		{
; 4016 : 			a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  000d8	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 4017 : 			d0 = ATR_H_POS(a1);
; 4018 : 			d1 = ATR_V_POS(a1);
; 4019 : 			radar2(a0, d0, d1, 1);	//????

  000db	6a 01		 push	 1
  000dd	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  000e0	89 4d 08	 mov	 DWORD PTR _d0$[ebp], ecx
  000e3	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000e6	50		 push	 eax
  000e7	51		 push	 ecx
  000e8	56		 push	 esi
  000e9	89 45 fc	 mov	 DWORD PTR _d1$[ebp], eax
  000ec	e8 00 00 00 00	 call	 ?radar2@@YAHPAUaction@@HHH@Z ; radar2

; 4020 : 			if (ATR_INT_WORK1(a0) == 0)		//??Óüâ??????

  000f1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000f4	83 c4 10	 add	 esp, 16			; 00000010H
  000f7	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [eax+296], 0
  000fe	75 13		 jne	 SHORT $LN20@ameliorati

; 4021 : 				ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  00100	8b 86 38 01 00
	00		 mov	 eax, DWORD PTR [esi+312]
  00106	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  0010d	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
$LN20@ameliorati:

; 4022 : 			d0 = ATR_H_POS(a1);

  00113	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00116	89 45 08	 mov	 DWORD PTR _d0$[ebp], eax

; 4023 : 			d1 = ATR_V_POS(a1);

  00119	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0011c	89 45 fc	 mov	 DWORD PTR _d1$[ebp], eax

; 4024 : 			radar(a0, &d0, &d1);	//????

  0011f	8d 45 fc	 lea	 eax, DWORD PTR _d1$[ebp]
  00122	50		 push	 eax
  00123	8d 45 08	 lea	 eax, DWORD PTR _d0$[ebp]
  00126	50		 push	 eax
  00127	56		 push	 esi
  00128	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 4025 : 			if (d0 == ATR_CRS(a0))		//??????

  0012d	8b 45 08	 mov	 eax, DWORD PTR _d0$[ebp]
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH
  00133	5f		 pop	 edi
  00134	3b 86 38 01 00
	00		 cmp	 eax, DWORD PTR [esi+312]
  0013a	75 0d		 jne	 SHORT $LN9@ameliorati

; 4026 : 				ATR_INT_WORK1(a0) = 1;		//?????Óüâ???

  0013c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0013f	c7 80 28 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+296], 1
$LN9@ameliorati:

; 4027 : 			//???????
; 4028 : 			if (d1 <= 32)

  00149	83 7d fc 20	 cmp	 DWORD PTR _d1$[ebp], 32	; 00000020H
  0014d	0f 8f 8e 00 00
	00		 jg	 $LN10@ameliorati

; 4029 : 			{
; 4030 : 				a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  00153	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00156	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 4031 : 				if (ATR_LIFE(a1) <= 0)		//??????

  00159	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  0015d	7f 0f		 jg	 SHORT $LN12@ameliorati

; 4032 : 				{
; 4033 : 					ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  0015f	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8

; 4034 : 					ATR_VCT_NO(a0) = 1;		//????????

  00163	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00166	5e		 pop	 esi
  00167	c6 00 01	 mov	 BYTE PTR [eax], 1

; 4076 : 		break;
; 4077 : 	}
; 4078 : }

  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
$LN12@ameliorati:

; 4035 : 					break;
; 4036 : 				}
; 4037 : 				ATR_COUNTER(a1) = NULL;		//????????

  0016e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 4038 : 				ATR_VCT_NO(a1) = 15;		//???Óëò
; 4039 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????
; 4040 : 				ATR_KAISHIN(a1) = 0;		//?Óëû??????
; 4041 : 				ATR_VCT_NO(a0) = 1;		//????????
; 4042 : 				//???
; 4043 : 				play_se(100, 320, 240);

  00171	68 f0 00 00 00	 push	 240			; 000000f0H
  00176	68 40 01 00 00	 push	 320			; 00000140H
  0017b	6a 64		 push	 100			; 00000064H
  0017d	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+264], 0
  00187	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0018a	c6 00 0f	 mov	 BYTE PTR [eax], 15	; 0000000fH
  0018d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00190	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8
  00194	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00197	c6 80 01 01 00
	00 00		 mov	 BYTE PTR [eax+257], 0
  0019e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001a1	c6 00 01	 mov	 BYTE PTR [eax], 1
  001a4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 4044 : 				//?Óüπ?????
; 4045 : 				a1 = GetAction(T_PRIO_MAGIC_EFFECT, sizeof(ATR_EQU));

  001a9	68 60 02 00 00	 push	 608			; 00000260H
  001ae	6a 48		 push	 72			; 00000048H
  001b0	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  001b5	8b c8		 mov	 ecx, eax
  001b7	83 c4 14	 add	 esp, 20			; 00000014H

; 4046 : 				if (a1 == NULL)

  001ba	85 c9		 test	 ecx, ecx
  001bc	74 43		 je	 SHORT $LN2@ameliorati

; 4047 : 					return;
; 4048 : 				/* ÓçØ??? */
; 4049 : 				ATR_NAME(a1) = magic_effect;

  001be	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ?magic_effect@@YAXPAUaction@@@Z ; magic_effect

; 4050 : 				/* Óù∏Óçï?ÓìèÓôö */
; 4051 : 				ATR_DISP_PRIO(a1) = D_PRIO_MAGIC_EFFECT;

  001c5	c6 41 15 57	 mov	 BYTE PTR [ecx+21], 87	; 00000057H

; 4052 : 				/* ?????Óú±? */
; 4053 : 				ATR_CHR_NO(a1) = 36009;

  001c9	c7 81 44 01 00
	00 a9 8c 00 00	 mov	 DWORD PTR [ecx+324], 36009 ; 00008ca9H

; 4054 : 				/* ???Óñ∫ */
; 4055 : 				ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);

  001d3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001d6	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  001d9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001dc	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 4056 : 			}

  001df	eb 09		 jmp	 SHORT $LN11@ameliorati
$LN10@ameliorati:

; 4057 : 			else
; 4058 : 				gemini(a0);		//?ÓôÆ

  001e1	56		 push	 esi
  001e2	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  001e7	83 c4 04	 add	 esp, 4
$LN11@ameliorati:

; 4059 : 		}
; 4060 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 4061 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  001ea	6a 00		 push	 0
  001ec	6a 00		 push	 0
  001ee	56		 push	 esi
  001ef	c7 86 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+332], 4
  001f9	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  001fe	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ameliorati:
  00201	5e		 pop	 esi

; 4076 : 		break;
; 4077 : 	}
; 4078 : }

  00202	8b e5		 mov	 esp, ebp
  00204	5d		 pop	 ebp
  00205	c3		 ret	 0
?amelioration@@YAXPAUaction@@@Z ENDP			; amelioration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?missile@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d1$ = -4						; size = 4
_d0$ = 8						; size = 4
_a0$ = 8						; size = 4
?missile@@YAXPAUaction@@@Z PROC				; missile, COMDAT

; 3882 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3883 : 	ACTION *a1, *a2;
; 3884 : 	int d0, d1;
; 3885 : 
; 3886 : 	switch (ATR_VCT_NO(a0))

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	57		 push	 edi
  00009	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0000c	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0000f	83 e8 00	 sub	 eax, 0
  00012	74 6b		 je	 SHORT $LN4@missile
  00014	83 e8 01	 sub	 eax, 1
  00017	74 2d		 je	 SHORT $LN21@missile
  00019	83 e8 01	 sub	 eax, 1
  0001c	0f 85 71 02 00
	00		 jne	 $LN2@missile

; 3985 : 		break;
; 3986 : 	case 2:
; 3987 : 		if (--ATR_STIMER(a0))

  00022	80 47 01 ff	 add	 BYTE PTR [edi+1], 255	; 000000ffH
  00026	0f 85 67 02 00
	00		 jne	 $LN2@missile

; 3988 : 			break;
; 3989 : 		ATR_DAMAGE(p_master)++;		//???Óëò

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A

; 3990 : 		DeathAction(a0);		//Óé∑?

  00031	56		 push	 esi
  00032	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00035	ff 40 58	 inc	 DWORD PTR [eax+88]
  00038	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0003d	83 c4 04	 add	 esp, 4
  00040	5f		 pop	 edi

; 3991 : 		break;
; 3992 : 	}
; 3993 : }

  00041	5e		 pop	 esi
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN21@missile:

; 3977 : 		break;
; 3978 : 	case 1:
; 3979 : 		if (--ATR_HIT_STOP(a0))		//??????????

  00046	80 47 5c ff	 add	 BYTE PTR [edi+92], 255	; 000000ffH
  0004a	0f 85 43 02 00
	00		 jne	 $LN2@missile

; 3980 : 			break;
; 3981 : 		ATR_STIMER(a0) = 64;

  00050	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00053	5f		 pop	 edi
  00054	c6 40 01 40	 mov	 BYTE PTR [eax+1], 64	; 00000040H

; 3982 : 		ATR_VCT_NO(a0) = 2;

  00058	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005b	c6 00 02	 mov	 BYTE PTR [eax], 2

; 3983 : 		a0->atr = ACT_ATR_HIDE;
; 3984 : 		p_missile[ATR_BODY_CNT(a0)] = NULL;

  0005e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00061	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2

; 3991 : 		break;
; 3992 : 	}
; 3993 : }

  0006b	5e		 pop	 esi
  0006c	0f b6 40 54	 movzx	 eax, BYTE PTR [eax+84]
  00070	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A[eax*4], 0
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
$LN4@missile:

; 3887 : 	{
; 3888 : 	case 0:
; 3889 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  0007f	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 3890 : 		d0 = ATR_H_POS(a1);

  00082	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00085	89 45 08	 mov	 DWORD PTR _d0$[ebp], eax

; 3891 : 		d1 = ATR_V_POS(a1);

  00088	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0008b	89 45 fc	 mov	 DWORD PTR _d1$[ebp], eax

; 3892 : 		radar(a0, &d0, &d1);	//????

  0008e	8d 45 fc	 lea	 eax, DWORD PTR _d1$[ebp]
  00091	50		 push	 eax
  00092	8d 45 08	 lea	 eax, DWORD PTR _d0$[ebp]
  00095	50		 push	 eax
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 3893 : 		ATR_CRS(a0) = d0;		//??????

  0009c	8b 55 08	 mov	 edx, DWORD PTR _d0$[ebp]
  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3894 : 		//???????
; 3895 : 		if (d1 <= 32)

  000a2	83 7d fc 20	 cmp	 DWORD PTR _d1$[ebp], 32	; 00000020H
  000a6	89 96 38 01 00
	00		 mov	 DWORD PTR [esi+312], edx
  000ac	0f 8f c1 01 00
	00		 jg	 $LN5@missile

; 3896 : 		{
; 3897 : 			a2 = ATR_BODY_WORK(0, a0);		//Óò©????????

  000b2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3898 : 			if (ATR_LIFE(a2) <= 0)		//??????

  000b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b8	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  000bc	7f 10		 jg	 SHORT $LN7@missile

; 3899 : 			{
; 3900 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  000be	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8

; 3901 : 				ATR_VCT_NO(a0) = 1;		//????????

  000c2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c5	5f		 pop	 edi

; 3991 : 		break;
; 3992 : 	}
; 3993 : }

  000c6	5e		 pop	 esi
  000c7	c6 00 01	 mov	 BYTE PTR [eax], 1
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
$LN7@missile:

; 3902 : 				break;
; 3903 : 			}
; 3904 : 			//????
; 3905 : 			if ((ATR_ATTACK_POW(0, a0) == 0) && (ATR_ATTACK_PET_POW(0, a0) == 0))

  000ce	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  000d5	75 29		 jne	 SHORT $LN8@missile
  000d7	83 b8 d4 01 00
	00 00		 cmp	 DWORD PTR [eax+468], 0
  000de	75 20		 jne	 SHORT $LN8@missile

; 3906 : 			{
; 3907 : 				a2 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 3908 : 				//??Óù∏Óçï
; 3909 : 				set_damage_num(a2, 0, -64);

  000e0	6a c0		 push	 -64			; ffffffc0H
  000e2	6a 00		 push	 0
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 3910 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  000ea	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3991 : 		break;
; 3992 : 	}
; 3993 : }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8
  000f4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	c6 00 01	 mov	 BYTE PTR [eax], 1
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
$LN8@missile:

; 3911 : 				ATR_VCT_NO(a0) = 1;		//????????
; 3912 : 				break;
; 3913 : 			}
; 3914 : 			ATR_CRS(a1) = d0;		//Óò©?????????????
; 3915 : 			ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//

  00100	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00103	89 97 38 01 00
	00		 mov	 DWORD PTR [edi+312], edx
  00109	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]
  0010f	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 3916 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)		//?Óé™?????

  00115	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00118	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0011b	f7 c1 00 08 00
	00		 test	 ecx, 2048		; 00000800H
  00121	74 7a		 je	 SHORT $LN9@missile

; 3917 : 			{
; 3918 : 				if (!ATR_COMBO(a1))		//????????

  00123	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00126	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  0012d	0f 85 91 00 00
	00		 jne	 $LN15@missile

; 3919 : 				{
; 3920 : 					//??Óñ±Óù∏Óçï
; 3921 : 					ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  00133	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  00139	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 3922 : 					ATR_LIFE(a1) += ATR_DAMAGE(a1);

  0013c	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]

; 3923 : 					if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???

  0013f	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]

; 3924 : 						ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???
; 3925 : 					ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);
; 3926 : 					ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);
; 3927 : 					if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))		//?Óï´Óóó???
; 3928 : 						ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);		//?Óï´???
; 3929 : 					set_damage_num(a1, 14, -64);

  00145	6a c0		 push	 -64			; ffffffc0H
  00147	6a 0e		 push	 14			; 0000000eH
  00149	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0014c	01 47 78	 add	 DWORD PTR [edi+120], eax
  0014f	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00152	3b c1		 cmp	 eax, ecx
  00154	57		 push	 edi
  00155	0f 4f c1	 cmovg	 eax, ecx
  00158	89 47 78	 mov	 DWORD PTR [edi+120], eax
  0015b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0015e	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  00164	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax
  0016a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0016d	8b 8f b4 01 00
	00		 mov	 ecx, DWORD PTR [edi+436]
  00173	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  00179	01 87 b0 01 00
	00		 add	 DWORD PTR [edi+432], eax
  0017f	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  00185	3b c1		 cmp	 eax, ecx
  00187	0f 4f c1	 cmovg	 eax, ecx
  0018a	89 87 b0 01 00
	00		 mov	 DWORD PTR [edi+432], eax
  00190	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 3930 : 					ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?

  00195	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3931 : 					ATR_ATTACK_PET_POW(0, a0) = 0;		//pet????Ó°ä?
; 3932 : 				}
; 3933 : 			}

  0019b	eb 08		 jmp	 SHORT $LN28@missile
$LN9@missile:

; 3934 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA)		//????????

  0019d	f7 c1 00 10 00
	00		 test	 ecx, 4096		; 00001000H
  001a3	74 19		 je	 SHORT $LN14@missile
$LN28@missile:

; 3941 : 			ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);		//

  001a5	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0
  001af	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001b2	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  001bc	eb 06		 jmp	 SHORT $LN15@missile
$LN14@missile:

; 3935 : 			{
; 3936 : 				ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?
; 3937 : 				ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?
; 3938 : 			}
; 3939 : 			else
; 3940 : 				ATR_VCT_NO(a1) = 10;		//?????Óëò

  001be	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001c1	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH
$LN15@missile:

; 3941 : 			ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);		//

  001c4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001c7	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  001ca	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  001d0	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 3942 : 			ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);		//

  001d3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001d6	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  001d9	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  001df	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 3943 : 			//?????
; 3944 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_GUARD)

  001e5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001e8	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  001eb	8a 40 60	 mov	 al, BYTE PTR [eax+96]
  001ee	c0 e8 03	 shr	 al, 3
  001f1	24 01		 and	 al, 1
  001f3	88 81 1c 01 00
	00		 mov	 BYTE PTR [ecx+284], al

; 3945 : 				ATR_GUARD_FLG(a1) = 1;
; 3946 : 			else
; 3947 : 				ATR_GUARD_FLG(a1) = 0;
; 3948 : 			if (ATR_LIFE(a1) - ATR_DAMAGE(a1) <= 0)		//?Ó†å????

  001f9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  001fc	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  001ff	2b 41 58	 sub	 eax, DWORD PTR [ecx+88]
  00202	85 c0		 test	 eax, eax
  00204	7f 10		 jg	 SHORT $LN18@missile

; 3949 : 			{
; 3950 : 				ATR_KAISHIN(a1) = 1;		//?Óëû??????

  00206	c6 81 01 01 00
	00 01		 mov	 BYTE PTR [ecx+257], 1

; 3951 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM * 4;		//??????????

  0020d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00210	c6 40 5c 20	 mov	 BYTE PTR [eax+92], 32	; 00000020H

; 3952 : 			}

  00214	eb 0e		 jmp	 SHORT $LN19@missile
$LN18@missile:

; 3953 : 			else
; 3954 : 			{
; 3955 : 				ATR_KAISHIN(a1) = 0;		//Óó≠Óêπ?????

  00216	c6 81 01 01 00
	00 00		 mov	 BYTE PTR [ecx+257], 0

; 3956 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  0021d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00220	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8
$LN19@missile:

; 3957 : 			}
; 3958 : 			ATR_VCT_NO(a0) = 1;		//????????

  00224	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3959 : 			//???
; 3960 : 			play_se(103, 320, 240);

  00227	68 f0 00 00 00	 push	 240			; 000000f0H
  0022c	68 40 01 00 00	 push	 320			; 00000140H
  00231	6a 67		 push	 103			; 00000067H
  00233	c6 00 01	 mov	 BYTE PTR [eax], 1
  00236	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 3961 : 			//?Óüπ?????
; 3962 : 			a1 = GetAction(T_PRIO_MAGIC_EFFECT, sizeof(ATR_EQU));

  0023b	68 60 02 00 00	 push	 608			; 00000260H
  00240	6a 48		 push	 72			; 00000048H
  00242	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  00247	8b c8		 mov	 ecx, eax
  00249	83 c4 14	 add	 esp, 20			; 00000014H

; 3963 : 			if (a1 == NULL)

  0024c	85 c9		 test	 ecx, ecx
  0024e	74 43		 je	 SHORT $LN2@missile

; 3964 : 				return;
; 3965 : 			/* ÓçØ??? */
; 3966 : 			ATR_NAME(a1) = magic_effect;

  00250	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ?magic_effect@@YAXPAUaction@@@Z ; magic_effect

; 3967 : 			/* Óù∏Óçï?ÓìèÓôö */
; 3968 : 			ATR_DISP_PRIO(a1) = D_PRIO_MAGIC_EFFECT;

  00257	c6 41 15 57	 mov	 BYTE PTR [ecx+21], 87	; 00000057H

; 3969 : 			ATR_CHR_NO(a1) = 36009;

  0025b	c7 81 44 01 00
	00 a9 8c 00 00	 mov	 DWORD PTR [ecx+324], 36009 ; 00008ca9H

; 3970 : 			/* ???Óñ∫ */
; 3971 : 			ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);

  00265	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00268	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0026b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0026e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 3972 : 		}

  00271	eb 09		 jmp	 SHORT $LN6@missile
$LN5@missile:

; 3973 : 		else
; 3974 : 			gemini(a0);		//?ÓôÆ

  00273	56		 push	 esi
  00274	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  00279	83 c4 04	 add	 esp, 4
$LN6@missile:

; 3975 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 3976 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0027c	6a 00		 push	 0
  0027e	6a 00		 push	 0
  00280	56		 push	 esi
  00281	c7 86 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+332], 4
  0028b	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 3991 : 		break;
; 3992 : 	}
; 3993 : }

  00290	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@missile:
  00293	5f		 pop	 edi
  00294	5e		 pop	 esi
  00295	8b e5		 mov	 esp, ebp
  00297	5d		 pop	 ebp
  00298	c3		 ret	 0
?missile@@YAXPAUaction@@@Z ENDP				; missile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?firecracker_shadow@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d1$ = -4						; size = 4
_d0$ = 8						; size = 4
_a0$ = 8						; size = 4
?firecracker_shadow@@YAXPAUaction@@@Z PROC		; firecracker_shadow, COMDAT

; 3825 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3826 : 	ACTION *a1;
; 3827 : 	int d0, d1;
; 3828 : 
; 3829 : 	switch (ATR_VCT_NO(a0))

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0000b	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0000e	83 e8 00	 sub	 eax, 0
  00011	74 7d		 je	 SHORT $LN4@firecracke
  00013	83 e8 01	 sub	 eax, 1
  00016	0f 85 38 01 00
	00		 jne	 $LN6@firecracke

; 3857 : 		}
; 3858 : 		break;
; 3859 : 	case 1:
; 3860 : 		a1 = ATR_BODY_WORK(2, a0);		//Èû≠ÁÇÆ‰ΩçÂùÄ
; 3861 : 		if (!pattern(a1, 36, ANM_NO_LOOP))	//Âä®ÁîªÊú™Êí≠ÂÆå

  0001c	6a 01		 push	 1
  0001e	6a 24		 push	 36			; 00000024H
  00020	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00023	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 21 01 00
	00		 je	 $LN6@firecracke

; 3862 : 			break;
; 3863 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  00033	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00036	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 3864 : 		if (ATR_NAME(a1) == NULL || ATR_VCT_NO(a1) >= VCT_NO_DIE || ATR_VCT_NO(a1) == 0)

  00039	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003d	74 11		 je	 SHORT $LN10@firecracke
  0003f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00042	8a 00		 mov	 al, BYTE PTR [eax]
  00044	3c fa		 cmp	 al, 250			; 000000faH
  00046	73 08		 jae	 SHORT $LN10@firecracke
  00048	84 c0		 test	 al, al
  0004a	0f 85 04 01 00
	00		 jne	 $LN6@firecracke
$LN10@firecracke:

; 3865 : 		{		//Óïò???????
; 3866 : 			if (!ATR_LONG_WORK(1, a0))			//Óò©?Óíü?????

  00050	83 b9 38 01 00
	00 00		 cmp	 DWORD PTR [ecx+312], 0
  00057	75 0a		 jne	 SHORT $LN11@firecracke

; 3867 : 				ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  00059	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0005c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0005f	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
$LN11@firecracke:

; 3868 : 			DeathAction(a0);		//Óé∑?

  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 3869 : 			p_missile[0] = NULL;	//

  00069	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0

; 3870 : 			p_missile[1] = NULL;	//

  00073	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0

; 3871 : 			a1 = ATR_BODY_WORK(2, a0);		//Óí∑??????
; 3872 : 			DeathAction(a1);		//Óé∑?

  0007d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00080	ff 70 0c	 push	 DWORD PTR [eax+12]
  00083	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00088	83 c4 08	 add	 esp, 8
  0008b	5e		 pop	 esi

; 3873 : 		}
; 3874 : 		break;
; 3875 : 	}
; 3876 : }

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN4@firecracke:

; 3830 : 	{
; 3831 : 	case 0:
; 3832 : 		a1 = ATR_BODY_WORK(0, a0);		//Êïå‰∫∫ÁöÑ‰ΩçÂùÄ

  00090	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 3833 : 		d0 = ATR_H_POS(a1);

  00093	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00096	89 45 08	 mov	 DWORD PTR _d0$[ebp], eax

; 3834 : 		d1 = ATR_V_POS(a1);

  00099	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0009c	89 45 fc	 mov	 DWORD PTR _d1$[ebp], eax

; 3835 : 		radar(a0, &d0, &d1);	//Èõ∑Ëææ(ËÆ°ÁÆóË∑ØÁ∫ø)

  0009f	8d 45 fc	 lea	 eax, DWORD PTR _d1$[ebp]
  000a2	50		 push	 eax
  000a3	8d 45 08	 lea	 eax, DWORD PTR _d0$[ebp]
  000a6	50		 push	 eax
  000a7	56		 push	 esi
  000a8	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 3836 : 		ATR_CRS(a0) = d0;		//Âä®ÁîªË∑ØÁ∫ø

  000ad	8b 45 08	 mov	 eax, DWORD PTR _d0$[ebp]
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b3	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 3837 : 		//ÂáÜÂ§áÂëΩ‰∏≠
; 3838 : 		if (!--ATR_GROUP_FLG(a0))

  000b9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000bc	80 40 5e ff	 add	 BYTE PTR [eax+94], 255	; 000000ffH
  000c0	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000c3	75 39		 jne	 SHORT $LN5@firecracke

; 3839 : 		{
; 3840 : 			ATR_VCT_NO(a0) = 1;				//????????

  000c5	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 3841 : 			a1 = ATR_BODY_WORK(2, a0);		//Óí∑??????

  000c8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000cb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]

; 3842 : 			ATR_VCT_NO(a1) = 1;				//????????

  000ce	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000d1	c6 00 01	 mov	 BYTE PTR [eax], 1

; 3843 : 			ATR_STIMER(ATR_BODY_WORK(1, a0)) = 0;		//???Óëò

  000d4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000da	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000dd	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 3844 : 			ATR_ATTRIB(a0) = ACT_ATR_HIDE;	//ÂΩ±Â≠êÁªìÊùü

  000e1	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2

; 3845 : 			ATR_CHR_NO(a1) = 101121;		//Èû≠ÁÇÆÁÇ∏ÂºÄ
; 3846 : 			ATR_H_POS(a1) += 50;

  000eb	83 41 18 32	 add	 DWORD PTR [ecx+24], 50	; 00000032H
  000ef	c7 81 44 01 00
	00 01 8b 01 00	 mov	 DWORD PTR [ecx+324], 101121 ; 00018b01H
  000f9	5e		 pop	 esi

; 3873 : 		}
; 3874 : 		break;
; 3875 : 	}
; 3876 : }

  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
$LN5@firecracke:

; 3847 : 		}
; 3848 : 		else
; 3849 : 		{
; 3850 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0);		//?ÓôÆ??Óå´

  000fe	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00101	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3851 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0);		//

  00107	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0010a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 3852 : 			gemini(a0);		//?ÓôÆ

  0010d	56		 push	 esi
  0010e	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  00114	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 3853 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0) - ATR_INT_WORK2(a0);

  00119	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0011c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 3854 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0) - ATR_INT_WORK3(a0);
; 3855 : 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 3856 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0011f	6a 00		 push	 0
  00121	6a 00		 push	 0
  00123	2b 81 2c 01 00
	00		 sub	 eax, DWORD PTR [ecx+300]
  00129	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax
  0012f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00132	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00135	56		 push	 esi
  00136	2b 81 30 01 00
	00		 sub	 eax, DWORD PTR [ecx+304]
  0013c	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  00142	c7 86 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+332], 4
  0014c	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00151	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@firecracke:
  00154	5e		 pop	 esi

; 3873 : 		}
; 3874 : 		break;
; 3875 : 	}
; 3876 : }

  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c3		 ret	 0
?firecracker_shadow@@YAXPAUaction@@@Z ENDP		; firecracker_shadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?stone_shadow@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d1$ = -8						; size = 4
_d0$ = -4						; size = 4
_a0$ = 8						; size = 4
?stone_shadow@@YAXPAUaction@@@Z PROC			; stone_shadow, COMDAT

; 3512 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 3513 : 	ACTION *a1, *a2, *a3;
; 3514 : 	int d0, d1;
; 3515 : 
; 3516 : 	switch (ATR_VCT_NO(a0))

  00007	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  0000a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0000d	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00010	83 f8 07	 cmp	 eax, 7
  00013	0f 87 9b 07 00
	00		 ja	 $LN58@stone_shad
  00019	57		 push	 edi
  0001a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN65@stone_shad[eax*4]
$LN4@stone_shad:

; 3517 : 	{
; 3518 : 	case 0:
; 3519 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  00021	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 3520 : 		d0 = ATR_H_POS(a1);

  00024	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00027	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 3521 : 		d1 = ATR_V_POS(a1);

  0002a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002d	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 3522 : 		radar(a0, &d0, &d1);	//????

  00030	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  00033	50		 push	 eax
  00034	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  00037	50		 push	 eax
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 3523 : 		ATR_CRS(a0) = d0;		//??????

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 3524 : 		//???????
; 3525 : 		if (!--ATR_GROUP_FLG(a0))

  0004a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004d	80 40 5e ff	 add	 BYTE PTR [eax+94], 255	; 000000ffH
  00051	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00054	0f 85 1a 03 00
	00		 jne	 $LN5@stone_shad

; 3526 : 		{
; 3527 : 			a2 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 3528 : 			if (ATR_LIFE(a2) <= 0)		//??????

  0005a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0005d	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  00061	7f 2c		 jg	 SHORT $LN7@stone_shad

; 3529 : 			{
; 3530 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  00063	c6 41 5c 08	 mov	 BYTE PTR [ecx+92], 8

; 3531 : 				ATR_VCT_NO(a0) = 1;		//????????

  00067	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3532 : 				ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 3533 : 				pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	56		 push	 esi
  0006f	c6 00 01	 mov	 BYTE PTR [eax], 1
  00072	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00075	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  0007b	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  00081	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN7@stone_shad:

; 3534 : 				break;
; 3535 : 			}
; 3536 : #ifdef _PETSKILL_ACUPUNCTURE
; 3537 : 			/////////////////////////////
; 3538 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 3539 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP | ATT_ACUPUNCTURE

  0008f	f7 41 60 00 1c
	00 4a		 test	 DWORD PTR [ecx+96], 1241521152 ; 4a001c00H
  00096	74 09		 je	 SHORT $LN8@stone_shad

; 3540 : #ifdef _PET_ITEM
; 3541 : 				| ATT_ATTACKBACK
; 3542 : #endif
; 3543 : 				))
; 3544 : #else
; 3545 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_ACUPUNCTURE
; 3546 : #ifdef _PET_ITEM
; 3547 : 				| ATT_ATTACKBACK
; 3548 : #endif
; 3549 : 				))
; 3550 : #endif
; 3551 : 				/////////////////////////////
; 3552 : #else
; 3553 : 			/////////////////////////////
; 3554 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 3555 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP))
; 3556 : #else
; 3557 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA))
; 3558 : #endif
; 3559 : 				/////////////////////////////
; 3560 : #endif
; 3561 : 				set_guard_mark(a0);		//Ó†°?Óé£ÓèûÓù∏Óçï?

  00098	56		 push	 esi
  00099	e8 00 00 00 00	 call	 ?set_guard_mark@@YAXPAUaction@@@Z ; set_guard_mark
  0009e	83 c4 04	 add	 esp, 4
$LN8@stone_shad:

; 3562 : 			//?????????
; 3563 : 			ATR_COMBO(a1) = 0;

  000a1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000a4	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0

; 3564 : 			//?Óéó??????
; 3565 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  000ab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ae	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000b1	f6 c1 20	 test	 cl, 32			; 00000020H
  000b4	74 64		 je	 SHORT $LN9@stone_shad

; 3566 : 			{
; 3567 : 				ATR_HIT_STOP(a0) = 32;		//??????????

  000b6	c6 40 5c 20	 mov	 BYTE PTR [eax+92], 32	; 00000020H

; 3568 : 				ATR_VCT_NO(a0) = 1;		//????????

  000ba	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3569 : 				ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 3570 : 				pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  000bd	6a 00		 push	 0
  000bf	6a 00		 push	 0
  000c1	56		 push	 esi
  000c2	c6 00 01	 mov	 BYTE PTR [eax], 1
  000c5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c8	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  000ce	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  000d4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 3571 : 				gemini(a0);

  000d9	56		 push	 esi
  000da	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 3572 : 				ATR_VCT_NO(a1) = 16;		//????

  000df	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
  000e5	c6 00 10	 mov	 BYTE PTR [eax], 16	; 00000010H

; 3573 : 				ATR_CRS(a1) = ATR_CRS(a0);		//Óò©?????????????

  000e8	8b 86 38 01 00
	00		 mov	 eax, DWORD PTR [esi+312]

; 3574 : 				ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//

  000ee	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000f1	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  000f7	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]
  000fd	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 3575 : 				ATR_STIMER(a1) = 0;

  00103	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00106	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 3576 : 				ATR_FIRST_FLG(a1) = 0;		//??????????

  0010a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
$LN9@stone_shad:

; 3577 : 				break;
; 3578 : 			}
; 3579 : 			//??????Óé™??????
; 3580 : 			if (!((ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) | (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)))

  0011a	f7 c1 00 18 00
	00		 test	 ecx, 6144		; 00001800H
  00120	75 4d		 jne	 SHORT $LN11@stone_shad

; 3581 : 			{
; 3582 : 				if ((ATR_ATTACK_POW(0, a0) == 0) && (ATR_ATTACK_PET_POW(0, a0) == 0))		//????

  00122	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00129	75 44		 jne	 SHORT $LN11@stone_shad
  0012b	83 b8 d4 01 00
	00 00		 cmp	 DWORD PTR [eax+468], 0
  00132	75 3b		 jne	 SHORT $LN11@stone_shad

; 3583 : 				{
; 3584 : 					a2 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 3585 : 					//??Óù∏Óçï
; 3586 : 					set_damage_num(a2, 0, -64);

  00134	6a c0		 push	 -64			; ffffffc0H
  00136	6a 00		 push	 0
  00138	ff 70 04	 push	 DWORD PTR [eax+4]
  0013b	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 3587 : 					ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  00140	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3588 : 					ATR_VCT_NO(a0) = 1;		//????????
; 3589 : 					ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 3590 : 					pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	56		 push	 esi
  00148	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8
  0014c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0014f	c6 00 01	 mov	 BYTE PTR [eax], 1
  00152	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00155	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  0015b	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  00161	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00166	83 c4 18	 add	 esp, 24			; 00000018H
  00169	5f		 pop	 edi
  0016a	5e		 pop	 esi

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
$LN11@stone_shad:

; 3591 : 					break;
; 3592 : 				}
; 3593 : 			}
; 3594 : 			//?Óéó????????
; 3595 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_CRUSH)

  0016f	f7 c1 00 20 00
	00		 test	 ecx, 8192		; 00002000H
  00175	74 0d		 je	 SHORT $LN12@stone_shad

; 3596 : 				set_damage_num(a1, 19, -112);//?????Óù∏Óçï

  00177	6a 90		 push	 -112			; ffffff90H
  00179	6a 13		 push	 19			; 00000013H
  0017b	57		 push	 edi
  0017c	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@stone_shad:

; 3597 : 			//?????????
; 3598 : 			ATR_AKO_FLG(a1) = 0;

  00184	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00187	c6 80 21 01 00
	00 00		 mov	 BYTE PTR [eax+289], 0

; 3599 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO1)		//??????

  0018e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00191	f6 40 60 40	 test	 BYTE PTR [eax+96], 64	; 00000040H
  00195	74 0d		 je	 SHORT $LN13@stone_shad

; 3600 : 				ATR_AKO_FLG(a1) = 1;

  00197	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0019a	c6 80 21 01 00
	00 01		 mov	 BYTE PTR [eax+289], 1
  001a1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN13@stone_shad:

; 3601 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO2)		//??????

  001a4	f6 40 60 80	 test	 BYTE PTR [eax+96], 128	; 00000080H
  001a8	74 0d		 je	 SHORT $LN14@stone_shad

; 3602 : 				ATR_AKO_FLG(a1) = 2;

  001aa	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001ad	c6 80 21 01 00
	00 02		 mov	 BYTE PTR [eax+289], 2
  001b4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN14@stone_shad:

; 3603 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DEATH)		//?????

  001b7	f6 40 60 01	 test	 BYTE PTR [eax+96], 1
  001bb	74 07		 je	 SHORT $LN64@stone_shad

; 3604 : 				ATR_LIFE(a1) = 0;		//?Ó†å????

  001bd	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
$LN64@stone_shad:

; 3605 : 			ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//

  001c4	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  001c7	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]
  001cd	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 3606 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)		//?Óé™?????

  001d3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001d6	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001d9	f7 c1 00 08 00
	00		 test	 ecx, 2048		; 00000800H
  001df	74 7a		 je	 SHORT $LN16@stone_shad

; 3607 : 			{
; 3608 : 				if (!ATR_COMBO(a1))		//????????

  001e1	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  001e4	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  001eb	0f 85 91 00 00
	00		 jne	 $LN22@stone_shad

; 3609 : 				{
; 3610 : 					//??Óñ±Óù∏Óçï
; 3611 : 					ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  001f1	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  001f7	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 3612 : 					ATR_LIFE(a1) += ATR_DAMAGE(a1);

  001fa	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]

; 3613 : 					if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???

  001fd	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]

; 3614 : 						ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???
; 3615 : 					ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);
; 3616 : 					ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);
; 3617 : 					if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))		//?Óï´Óóó???
; 3618 : 						ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);		//?Óï´???
; 3619 : 					set_damage_num(a1, 14, -64);

  00203	6a c0		 push	 -64			; ffffffc0H
  00205	6a 0e		 push	 14			; 0000000eH
  00207	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0020a	01 47 78	 add	 DWORD PTR [edi+120], eax
  0020d	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00210	3b c1		 cmp	 eax, ecx
  00212	57		 push	 edi
  00213	0f 4f c1	 cmovg	 eax, ecx
  00216	89 47 78	 mov	 DWORD PTR [edi+120], eax
  00219	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0021c	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  00222	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax
  00228	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0022b	8b 8f b4 01 00
	00		 mov	 ecx, DWORD PTR [edi+436]
  00231	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  00237	01 87 b0 01 00
	00		 add	 DWORD PTR [edi+432], eax
  0023d	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  00243	3b c1		 cmp	 eax, ecx
  00245	0f 4f c1	 cmovg	 eax, ecx
  00248	89 87 b0 01 00
	00		 mov	 DWORD PTR [edi+432], eax
  0024e	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 3620 : 					ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?

  00253	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00256	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3621 : 					ATR_ATTACK_PET_POW(0, a0) = 0;		//pet????Ó°ä?
; 3622 : 				}
; 3623 : 			}

  00259	eb 08		 jmp	 SHORT $LN67@stone_shad
$LN16@stone_shad:

; 3624 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA)		//????????

  0025b	f7 c1 00 10 00
	00		 test	 ecx, 4096		; 00001000H
  00261	74 19		 je	 SHORT $LN21@stone_shad
$LN67@stone_shad:

; 3631 : 			//?Óëû?????
; 3632 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  00263	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0
  0026d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00270	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  0027a	eb 06		 jmp	 SHORT $LN22@stone_shad
$LN21@stone_shad:

; 3625 : 			{
; 3626 : 				ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?
; 3627 : 				ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?
; 3628 : 			}
; 3629 : 			else
; 3630 : 				ATR_VCT_NO(a1) = 10;		//?????Óëò

  0027c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0027f	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH
$LN22@stone_shad:

; 3631 : 			//?Óëû?????
; 3632 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  00282	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00285	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00288	0f b6 40 60	 movzx	 eax, BYTE PTR [eax+96]
  0028c	c0 e8 02	 shr	 al, 2
  0028f	24 01		 and	 al, 1
  00291	88 81 01 01 00
	00		 mov	 BYTE PTR [ecx+257], al

; 3633 : 				ATR_KAISHIN(a1) = 1;		//?Óëû??????
; 3634 : 			else
; 3635 : 				ATR_KAISHIN(a1) = 0;		//Óó≠Óêπ?????
; 3636 : 			ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  00297	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0029a	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0029d	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  002a3	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 3637 : 			ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);

  002a6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002a9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002ac	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  002b2	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 3638 : 			//?????
; 3639 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_GUARD)

  002b8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002bb	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002be	0f b6 40 60	 movzx	 eax, BYTE PTR [eax+96]
  002c2	c0 e8 03	 shr	 al, 3
  002c5	24 01		 and	 al, 1
  002c7	88 81 1c 01 00
	00		 mov	 BYTE PTR [ecx+284], al

; 3640 : 				ATR_GUARD_FLG(a1) = 1;
; 3641 : 			else
; 3642 : 				ATR_GUARD_FLG(a1) = 0;
; 3643 : 			if (ATR_LIFE(a1) - ATR_DAMAGE(a1) <= 0)		//?Ó†å????

  002cd	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  002d0	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  002d3	2b 42 58	 sub	 eax, DWORD PTR [edx+88]
  002d6	85 c0		 test	 eax, eax
  002d8	7f 23		 jg	 SHORT $LN28@stone_shad

; 3644 : 			{
; 3645 : 				ATR_LONG_WORK(1, a0) = 1;		//?Ó†å??????

  002da	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002dd	c7 80 38 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+312], 1

; 3646 : 				//????????
; 3647 : 				if (ATR_COMBO(a1) == 0)

  002e7	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  002ea	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  002f1	75 0a		 jne	 SHORT $LN28@stone_shad

; 3648 : 					ATR_KAISHIN(a1) = 1;		//?Óëû??????

  002f3	c6 82 01 01 00
	00 01		 mov	 BYTE PTR [edx+257], 1
  002fa	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN28@stone_shad:

; 3649 : 			}
; 3650 : 			if (ATR_KAISHIN(a1))		//?Óëû?????
; 3651 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM * 4;		//??????????
; 3652 : 			else
; 3653 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????
; 3654 : 			//???????????Óé™??
; 3655 : 			if (ATR_DAMAGE(a1) || (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) || (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION))

  002fd	80 ba 01 01 00
	00 00		 cmp	 BYTE PTR [edx+257], 0
  00304	b8 08 00 00 00	 mov	 eax, 8
  00309	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0030e	0f 44 c8	 cmove	 ecx, eax
  00311	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00314	88 48 5c	 mov	 BYTE PTR [eax+92], cl
  00317	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0031a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0031d	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00321	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  00324	75 07		 jne	 SHORT $LN32@stone_shad
  00326	a9 00 18 00 00	 test	 eax, 6144		; 00001800H
  0032b	74 33		 je	 SHORT $LN31@stone_shad
$LN32@stone_shad:

; 3656 : 			{
; 3657 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER)		//???????

  0032d	a8 10		 test	 al, 16			; 00000010H
  0032f	74 16		 je	 SHORT $LN34@stone_shad

; 3658 : 				{
; 3659 : 					//????????
; 3660 : 					if (ATR_COMBO(a1) == 0)

  00331	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00338	75 0d		 jne	 SHORT $LN34@stone_shad

; 3661 : 						set_damage_num(a0, 1, -64 + 16);		//?????Óù∏Óçï

  0033a	6a d0		 push	 -48			; ffffffd0H
  0033c	6a 01		 push	 1
  0033e	56		 push	 esi
  0033f	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00344	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN34@stone_shad:

; 3662 : 				}
; 3663 : 				//???
; 3664 : 				play_se(252, ATR_H_POS(a0), ATR_V_POS(a0));

  00347	ff 76 1c	 push	 DWORD PTR [esi+28]
  0034a	ff 76 18	 push	 DWORD PTR [esi+24]
  0034d	68 fc 00 00 00	 push	 252			; 000000fcH
  00352	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 3665 : 				//?????????
; 3666 : 				set_hit_mark(a0);

  00357	56		 push	 esi
  00358	e8 00 00 00 00	 call	 ?set_hit_mark@@YAXPAUaction@@@Z ; set_hit_mark
  0035d	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@stone_shad:

; 3667 : 			}
; 3668 : 			ATR_VCT_NO(a0) = 3;				//????????

  00360	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00363	c6 00 03	 mov	 BYTE PTR [eax], 3

; 3669 : 			a1 = ATR_BODY_WORK(2, a0);		//Óí∑??????
; 3670 : 			ATR_VCT_NO(a1) = 1;				//????????

  00366	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00369	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0036c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0036f	c6 00 01	 mov	 BYTE PTR [eax], 1

; 3671 : 		}

  00372	eb 42		 jmp	 SHORT $LN6@stone_shad
$LN5@stone_shad:

; 3672 : 		else
; 3673 : 		{
; 3674 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0);		//?ÓôÆ??Óå´

  00374	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00377	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3675 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0);		//

  0037d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00380	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 3676 : 			gemini(a0);		//?ÓôÆ

  00383	56		 push	 esi
  00384	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  0038a	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 3677 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0) - ATR_INT_WORK2(a0);

  0038f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00392	83 c4 04	 add	 esp, 4
  00395	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00398	2b 81 2c 01 00
	00		 sub	 eax, DWORD PTR [ecx+300]
  0039e	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3678 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0) - ATR_INT_WORK3(a0);

  003a4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  003a7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003aa	2b 81 30 01 00
	00		 sub	 eax, DWORD PTR [ecx+304]
  003b0	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
$LN6@stone_shad:

; 3679 : 		}
; 3680 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 3681 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  003b6	6a 00		 push	 0
  003b8	6a 00		 push	 0
  003ba	56		 push	 esi
  003bb	c7 86 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+332], 4
  003c5	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  003ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  003cd	5f		 pop	 edi
  003ce	5e		 pop	 esi

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  003cf	8b e5		 mov	 esp, ebp
  003d1	5d		 pop	 ebp
  003d2	c3		 ret	 0
$LN35@stone_shad:

; 3682 : 		break;
; 3683 : 	case 1:
; 3684 : 		if (--ATR_HIT_STOP(a0))		//??????????

  003d3	80 41 5c ff	 add	 BYTE PTR [ecx+92], 255	; 000000ffH
  003d7	0f 85 d6 03 00
	00		 jne	 $LN66@stone_shad

; 3685 : 			break;
; 3686 : 		//???????
; 3687 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  003dd	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  003e0	5f		 pop	 edi
  003e1	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  003e4	24 20		 and	 al, 32			; 00000020H

; 3688 : 			ATR_STIMER(a0) = 32;
; 3689 : 		else
; 3690 : 			ATR_STIMER(a0) = 64;
; 3691 : 		ATR_VCT_NO(a0) = 2;

  003e6	f6 d8		 neg	 al
  003e8	1a c0		 sbb	 al, al
  003ea	24 e0		 and	 al, 224			; 000000e0H
  003ec	04 40		 add	 al, 64			; 00000040H
  003ee	88 41 01	 mov	 BYTE PTR [ecx+1], al
  003f1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003f4	c6 00 02	 mov	 BYTE PTR [eax], 2

; 3692 : 		a0->atr = ACT_ATR_HIDE;

  003f7	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2

; 3693 : 		p_missile[0] = NULL;

  00401	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0
  0040b	5e		 pop	 esi

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  0040c	8b e5		 mov	 esp, ebp
  0040e	5d		 pop	 ebp
  0040f	c3		 ret	 0
$LN39@stone_shad:

; 3694 : 		break;
; 3695 : 	case 2:
; 3696 : 		if (--ATR_STIMER(a0))

  00410	80 41 01 ff	 add	 BYTE PTR [ecx+1], 255	; 000000ffH
  00414	0f 85 99 03 00
	00		 jne	 $LN66@stone_shad

; 3697 : 			break;
; 3698 : 		ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  0041a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3699 : 		DeathAction(a0);		//Óé∑?

  0041d	56		 push	 esi
  0041e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00421	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00424	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
  00428	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0042d	83 c4 04	 add	 esp, 4
  00430	5f		 pop	 edi
  00431	5e		 pop	 esi

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  00432	8b e5		 mov	 esp, ebp
  00434	5d		 pop	 ebp
  00435	c3		 ret	 0
$LN41@stone_shad:

; 3700 : 		break;
; 3701 : 	case 3:
; 3702 : 		a1 = ATR_BODY_WORK(2, a0);		//Óí∑??????

  00436	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]

; 3703 : 		ATR_CHR_NO(a1) = SPR_isiware;		//Óí∑?????
; 3704 : 		if (pattern(a1, ANM_NOMAL_SPD, ANM_NO_LOOP))	//???Óé∑???

  00439	6a 01		 push	 1
  0043b	6a 00		 push	 0
  0043d	57		 push	 edi
  0043e	c7 87 44 01 00
	00 9a 88 01 00	 mov	 DWORD PTR [edi+324], 100506 ; 0001889aH
  00448	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0044d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00450	85 c0		 test	 eax, eax
  00452	75 14		 jne	 SHORT $stone_shadow_100$69

; 3705 : 			goto stone_shadow_100;
; 3706 : 		if (!pattern(a1, ANM_NOMAL_SPD, ANM_NO_LOOP))	//???Óé∑??????

  00454	6a 01		 push	 1
  00456	50		 push	 eax
  00457	57		 push	 edi
  00458	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0045d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00460	85 c0		 test	 eax, eax
  00462	0f 84 4b 03 00
	00		 je	 $LN66@stone_shad
$stone_shadow_100$69:

; 3707 : 			break;
; 3708 : 	stone_shadow_100:
; 3709 : 		//?????????ÓôÆ??
; 3710 : 		ATR_GROUP_FLG(a0) = 10;

  00468	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3711 : 		ATR_SPD(a0) = 6;
; 3712 : 		ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];
; 3713 : 		d0 = ATR_CRS(a0);
; 3714 : 		if (d0 >= 4 && d0 < BATTLKPKPLYAERNUM)
; 3715 : 			ATR_CHR_NO(a1) = 25784;		//Óí∑Óõ©Óüä??Óüâ?
; 3716 : 		else
; 3717 : 			ATR_CHR_NO(a1) = 25783;		//Óí∑Óõ©Óüä??Óüâ?
; 3718 : 		ATR_CRS(a0) -= 8;

  0046b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00470	53		 push	 ebx

; 3719 : 		ATR_CRS(a0) &= 31;
; 3720 : 		a1 = ATR_BODY_WORK(2, a0);		//Óí∑??????
; 3721 : 		ATR_VCT_NO(a1) = 2;				//?ÓôÆ??
; 3722 : 		ATR_SPD(a1) = 0;
; 3723 : 		ATR_CRS(a1) = 16;
; 3724 : 		ATR_LONG_WORK(1, a1) = 30;
; 3725 : 		ATR_VCT_NO(a0)++;
; 3726 : 		//Óí∑?????
; 3727 : 		a3 = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  00471	68 60 02 00 00	 push	 608			; 00000260H
  00476	6a 65		 push	 101			; 00000065H
  00478	c6 40 5e 0a	 mov	 BYTE PTR [eax+94], 10	; 0000000aH
  0047c	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  00482	c7 86 34 01 00
	00 06 00 00 00	 mov	 DWORD PTR [esi+308], 6
  0048c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  00493	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  00499	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  0049c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0049f	3b c8		 cmp	 ecx, eax
  004a1	1b c0		 sbb	 eax, eax
  004a3	05 b8 64 00 00	 add	 eax, 25784		; 000064b8H
  004a8	89 87 44 01 00
	00		 mov	 DWORD PTR [edi+324], eax
  004ae	8b 86 38 01 00
	00		 mov	 eax, DWORD PTR [esi+312]
  004b4	83 e8 08	 sub	 eax, 8
  004b7	83 e0 1f	 and	 eax, 31			; 0000001fH
  004ba	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  004c0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  004c3	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  004c6	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  004c9	c6 00 02	 mov	 BYTE PTR [eax], 2
  004cc	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  004cf	c7 83 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+308], 0
  004d9	c7 83 38 01 00
	00 10 00 00 00	 mov	 DWORD PTR [ebx+312], 16	; 00000010H
  004e3	c7 80 38 01 00
	00 1e 00 00 00	 mov	 DWORD PTR [eax+312], 30	; 0000001eH
  004ed	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  004f0	fe 00		 inc	 BYTE PTR [eax]
  004f2	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction

; 3728 : 		//?????
; 3729 : 		a2 = GetAction(T_PRIO_BOW - 1, sizeof(ATR_EQU));

  004f7	68 60 02 00 00	 push	 608			; 00000260H
  004fc	6a 64		 push	 100			; 00000064H
  004fe	8b f8		 mov	 edi, eax
  00500	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  00505	8b f0		 mov	 esi, eax

; 3730 : 		ATR_NAME(a2) = ATR_NAME(a0);

  00507	8b 45 08	 mov	 eax, DWORD PTR _a0$[ebp]
  0050a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 3731 : 		ATR_VCT_NO(a2) = ATR_VCT_NO(a0);

  0050d	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00510	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00513	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00516	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00519	88 0a		 mov	 BYTE PTR [edx], cl

; 3732 : 		/* Óù∏Óçï?ÓìèÓôö */
; 3733 : 		ATR_DISP_PRIO(a2) = ATR_DISP_PRIO(a0);

  0051b	8b d0		 mov	 edx, eax
  0051d	0f b6 4a 15	 movzx	 ecx, BYTE PTR [edx+21]
  00521	88 4e 15	 mov	 BYTE PTR [esi+21], cl

; 3734 : 		/* ?????Óú±? */
; 3735 : 		ATR_CHR_NO(a2) = ATR_CHR_NO(a0);

  00524	8b 82 44 01 00
	00		 mov	 eax, DWORD PTR [edx+324]

; 3736 : 		/* ???Óñ∫ */
; 3737 : 		ATR_CHR_ANG(a2) = ATR_CHR_ANG(a0);
; 3738 : 		ATR_BODY_WORK(0, a2) = ATR_BODY_WORK(0, a0);		//Óò©????

  0052a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0052d	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  00533	8b 82 54 01 00
	00		 mov	 eax, DWORD PTR [edx+340]
  00539	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  0053f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00542	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00545	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 3739 : 		ATR_BODY_WORK(1, a2) = ATR_BODY_WORK(1, a0);		//ÓúäÓç∫?????

  00548	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0054b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0054e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00551	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 3740 : 		ATR_BODY_WORK(2, a2) = a3;		//Óí∑??????

  00554	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00557	89 78 0c	 mov	 DWORD PTR [eax+12], edi

; 3741 : 		ATR_ATTACK_POW(0, a2) = ATR_ATTACK_POW(0, a0);		//???

  0055a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0055d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00560	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  00566	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 3742 : 		ATR_ATTACK_PET_POW(0, a2) = ATR_ATTACK_PET_POW(0, a0);		//???

  0056c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0056f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00572	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  00578	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax

; 3743 : 		ATR_ATTACK_KIND(0, a2) = ATR_ATTACK_KIND(0, a0);		//?????

  0057e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00581	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00584	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  00587	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 3744 : 		ATR_H_POS(a2) = ATR_H_POS(a0);

  0058a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0058d	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 3745 : 		ATR_V_POS(a2) = ATR_V_POS(a0);

  00590	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00593	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 3746 : 		ATR_CRS(a2) = (ATR_CRS(a0) + 15) & 31;

  00596	8b 82 38 01 00
	00		 mov	 eax, DWORD PTR [edx+312]
  0059c	83 c0 0f	 add	 eax, 15			; 0000000fH
  0059f	83 e0 1f	 and	 eax, 31			; 0000001fH
  005a2	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 3747 : 		ATR_SPD(a2) = ATR_SPD(a0);

  005a8	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]

; 3748 : 		ATR_BODY_CNT(a2) = ATR_BODY_CNT(a0);

  005ae	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  005b1	89 86 34 01 00
	00		 mov	 DWORD PTR [esi+308], eax
  005b7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]

; 3749 : 		ATR_GROUP_FLG(a2) = ATR_GROUP_FLG(a0);
; 3750 : 		pattern(a2, ANM_NOMAL_SPD, ANM_LOOP);

  005ba	6a 00		 push	 0
  005bc	6a 00		 push	 0
  005be	56		 push	 esi
  005bf	0f b6 40 54	 movzx	 eax, BYTE PTR [eax+84]
  005c3	88 41 54	 mov	 BYTE PTR [ecx+84], al
  005c6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  005c9	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  005cc	0f b6 40 5e	 movzx	 eax, BYTE PTR [eax+94]
  005d0	88 41 5e	 mov	 BYTE PTR [ecx+94], al
  005d3	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 3751 : 		p_missile[1] = a1;
; 3752 : 		p_missile[2] = NULL;
; 3753 : 		/* ?????Óú±? */
; 3754 : 		if (d0 >= 4 && d0 < BATTLKPKPLYAERNUM)

  005d8	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  005db	83 c4 1c	 add	 esp, 28			; 0000001cH
  005de	89 1d 04 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, ebx
  005e4	83 c0 fc	 add	 eax, -4			; fffffffcH
  005e7	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+8, 0

; 3755 : 			ATR_CHR_NO(a3) = 25783;		//Óí∑Óõ©Óüä??Óüâ?
; 3756 : 		else
; 3757 : 			ATR_CHR_NO(a3) = 25784;		//Óí∑Óõ©Óüä??Óüâ?
; 3758 : 		ATR_NAME(a3) = ATR_NAME(a1);

  005f1	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  005f6	3b c8		 cmp	 ecx, eax
  005f8	1b c0		 sbb	 eax, eax
  005fa	f7 d8		 neg	 eax
  005fc	05 b7 64 00 00	 add	 eax, 25783		; 000064b7H
  00601	89 87 44 01 00
	00		 mov	 DWORD PTR [edi+324], eax
  00607	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]

; 3759 : 		ATR_VCT_NO(a3) = ATR_VCT_NO(a1);

  0060a	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0060d	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00610	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00613	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00616	88 01		 mov	 BYTE PTR [ecx], al

; 3760 : 		ATR_BODY_WORK(1, a3) = a2;		//?Óôπ???????

  00618	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0061b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 3761 : 		ATR_VCT_NO(a3) = ATR_VCT_NO(a1);

  0061e	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00621	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00624	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00627	88 01		 mov	 BYTE PTR [ecx], al

; 3762 : 		ATR_DISP_PRIO(a3) = ATR_DISP_PRIO(a1);

  00629	0f b6 43 15	 movzx	 eax, BYTE PTR [ebx+21]
  0062d	88 47 15	 mov	 BYTE PTR [edi+21], al

; 3763 : 		ATR_SPD(a3) = ATR_SPD(a1);

  00630	8b 83 34 01 00
	00		 mov	 eax, DWORD PTR [ebx+308]
  00636	89 87 34 01 00
	00		 mov	 DWORD PTR [edi+308], eax

; 3764 : 		ATR_CRS(a3) = ATR_CRS(a1);

  0063c	8b 83 38 01 00
	00		 mov	 eax, DWORD PTR [ebx+312]
  00642	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 3765 : 		ATR_H_POS(a3) = ATR_H_POS(a1);

  00648	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  0064b	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 3766 : 		ATR_V_POS(a3) = ATR_V_POS(a1);

  0064e	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00651	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 3767 : 		ATR_LONG_WORK(1, a3) = 30;

  00654	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00657	5b		 pop	 ebx
  00658	5f		 pop	 edi
  00659	5e		 pop	 esi
  0065a	c7 80 38 01 00
	00 1e 00 00 00	 mov	 DWORD PTR [eax+312], 30	; 0000001eH

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  00664	8b e5		 mov	 esp, ebp
  00666	5d		 pop	 ebp
  00667	c3		 ret	 0
$LN49@stone_shad:

; 3768 : 		break;
; 3769 : 	case 4:
; 3770 : 		ATR_INT_WORK2(a0) = ATR_H_POS(a0);		//?ÓôÆ??Óå´

  00668	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0066b	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3771 : 		ATR_INT_WORK3(a0) = ATR_V_POS(a0);		//

  00671	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00674	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 3772 : 		gemini(a0);		//?ÓôÆ

  00677	56		 push	 esi
  00678	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  0067e	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 3773 : 		ATR_INT_WORK2(a0) = ATR_H_POS(a0) - ATR_INT_WORK2(a0);

  00683	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00686	83 c4 04	 add	 esp, 4
  00689	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0068c	2b 81 2c 01 00
	00		 sub	 eax, DWORD PTR [ecx+300]
  00692	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3774 : 		ATR_INT_WORK3(a0) = ATR_V_POS(a0) - ATR_INT_WORK3(a0);

  00698	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0069b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0069e	2b 81 30 01 00
	00		 sub	 eax, DWORD PTR [ecx+304]
  006a4	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax

; 3775 : 		if (!--ATR_GROUP_FLG(a0))		//Óé∑???

  006aa	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  006ad	80 40 5e ff	 add	 BYTE PTR [eax+94], 255	; 000000ffH
  006b1	0f 85 fc 00 00
	00		 jne	 $LN66@stone_shad

; 3776 : 		{
; 3777 : 			//????
; 3778 : 			ATR_LONG_WORK(2, a0) = 60;

  006b7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  006ba	5f		 pop	 edi
  006bb	c7 80 3c 01 00
	00 3c 00 00 00	 mov	 DWORD PTR [eax+316], 60	; 0000003cH

; 3779 : 			ATR_LONG_WORK(3, a0) = 1;

  006c5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  006c8	c7 80 40 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+320], 1

; 3780 : 			ATR_VCT_NO(a0) = 7;

  006d2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  006d5	5e		 pop	 esi
  006d6	c6 00 07	 mov	 BYTE PTR [eax], 7

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  006d9	8b e5		 mov	 esp, ebp
  006db	5d		 pop	 ebp
  006dc	c3		 ret	 0
$LN51@stone_shad:

; 3781 : 		}
; 3782 : 		break;
; 3783 : 	case 5:
; 3784 : 		ATR_ATTRIB(a0) = ACT_ATR_HIDE;		//Óù∏Óçï??

  006dd	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2

; 3785 : 		a1 = ATR_BODY_WORK(2, a0);		//Óí∑??????
; 3786 : 		ATR_VCT_NO(a1) = 4;

  006e7	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  006ea	5f		 pop	 edi
  006eb	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  006ee	c6 00 04	 mov	 BYTE PTR [eax], 4

; 3787 : 		//???
; 3788 : 		ATR_VCT_NO(a0)++;

  006f1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  006f4	5e		 pop	 esi
  006f5	fe 00		 inc	 BYTE PTR [eax]

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  006f7	8b e5		 mov	 esp, ebp
  006f9	5d		 pop	 ebp
  006fa	c3		 ret	 0
$LN52@stone_shad:

; 3789 : 		break;
; 3790 : 	case 6:
; 3791 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  006fb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 3792 : 		if (ATR_NAME(a1) == NULL || ATR_VCT_NO(a1) >= VCT_NO_DIE || ATR_VCT_NO(a1) == 0)		//Óïò???????

  006fe	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00702	74 0d		 je	 SHORT $LN54@stone_shad
  00704	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00707	8a 00		 mov	 al, BYTE PTR [eax]
  00709	3c fa		 cmp	 al, 250			; 000000faH
  0070b	73 04		 jae	 SHORT $LN54@stone_shad
  0070d	84 c0		 test	 al, al
  0070f	75 3b		 jne	 SHORT $LN53@stone_shad
$LN54@stone_shad:

; 3793 : 		{
; 3794 : 			if (!ATR_LONG_WORK(1, a0))		//Óò©?Óíü?????

  00711	83 b9 38 01 00
	00 00		 cmp	 DWORD PTR [ecx+312], 0
  00718	75 0a		 jne	 SHORT $LN55@stone_shad

; 3795 : 				ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  0071a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0071d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00720	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
$LN55@stone_shad:

; 3796 : 			DeathAction(a0);		//Óé∑?

  00724	56		 push	 esi
  00725	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 3797 : 			p_missile[0] = NULL;	//

  0072a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0

; 3798 : 			p_missile[1] = NULL;	//

  00734	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0

; 3799 : 			a1 = ATR_BODY_WORK(2, a0);		//Óí∑??????
; 3800 : 			DeathAction(a1);		//Óé∑?

  0073e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00741	ff 70 0c	 push	 DWORD PTR [eax+12]
  00744	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00749	83 c4 08	 add	 esp, 8
$LN53@stone_shad:

; 3801 : 		}
; 3802 : 	case 7:
; 3803 : 		if (ATR_LONG_WORK(3, a0))

  0074c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0074f	83 b8 40 01 00
	00 00		 cmp	 DWORD PTR [eax+320], 0
  00756	74 36		 je	 SHORT $LN57@stone_shad

; 3804 : 		{
; 3805 : 			ATR_LONG_WORK(3, a0) = 0;

  00758	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0

; 3806 : 			//???
; 3807 : 			play_se(251, ATR_H_POS(a0), ATR_V_POS(a0));

  00762	ff 76 1c	 push	 DWORD PTR [esi+28]
  00765	ff 76 18	 push	 DWORD PTR [esi+24]
  00768	68 fb 00 00 00	 push	 251			; 000000fbH
  0076d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 3808 : 			ATR_ATTRIB(a0) = ACT_ATR_HIDE;		//Óù∏Óçï??
; 3809 : 			a1 = ATR_BODY_WORK(2, a0);		//Óí∑??????
; 3810 : 			ATR_VCT_NO(a1) = 4;

  00772	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00775	83 c4 0c	 add	 esp, 12			; 0000000cH
  00778	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2
  00782	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00785	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00788	c6 00 04	 mov	 BYTE PTR [eax], 4
  0078b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN57@stone_shad:

; 3811 : 		}
; 3812 : 		if (!--ATR_LONG_WORK(2, a0))		//Óé∑???

  0078e	83 80 3c 01 00
	00 ff		 add	 DWORD PTR [eax+316], -1
  00795	75 1c		 jne	 SHORT $LN66@stone_shad

; 3813 : 		{
; 3814 : 			if (ATR_LONG_WORK(1, a0))		//Óò©???????

  00797	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0079a	83 b8 38 01 00
	00 00		 cmp	 DWORD PTR [eax+312], 0
  007a1	74 0d		 je	 SHORT $LN59@stone_shad

; 3815 : 				ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  007a3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  007a6	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  007a9	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
  007ad	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN59@stone_shad:

; 3816 : 			ATR_VCT_NO(a0) = 5;

  007b0	c6 00 05	 mov	 BYTE PTR [eax], 5
$LN66@stone_shad:
  007b3	5f		 pop	 edi
$LN58@stone_shad:
  007b4	5e		 pop	 esi

; 3817 : 		}
; 3818 : 	}
; 3819 : }

  007b5	8b e5		 mov	 esp, ebp
  007b7	5d		 pop	 ebp
  007b8	c3		 ret	 0
  007b9	0f 1f 00	 npad	 3
$LN65@stone_shad:
  007bc	00 00 00 00	 DD	 $LN4@stone_shad
  007c0	00 00 00 00	 DD	 $LN35@stone_shad
  007c4	00 00 00 00	 DD	 $LN39@stone_shad
  007c8	00 00 00 00	 DD	 $LN41@stone_shad
  007cc	00 00 00 00	 DD	 $LN49@stone_shad
  007d0	00 00 00 00	 DD	 $LN51@stone_shad
  007d4	00 00 00 00	 DD	 $LN52@stone_shad
  007d8	00 00 00 00	 DD	 $LN53@stone_shad
?stone_shadow@@YAXPAUaction@@@Z ENDP			; stone_shadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?stone@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d0$ = -4						; size = 4
_d1$ = 8						; size = 4
_a0$ = 8						; size = 4
?stone@@YAXPAUaction@@@Z PROC				; stone, COMDAT

; 3443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3444 : 	ACTION *a1, *a2;
; 3445 : 	int d0, d1;
; 3446 : 
; 3447 : 	switch (ATR_VCT_NO(a0))

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	57		 push	 edi
  00009	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0000c	8a 01		 mov	 al, BYTE PTR [ecx]
  0000e	0f b6 d0	 movzx	 edx, al
  00011	83 fa 04	 cmp	 edx, 4
  00014	0f 87 29 01 00
	00		 ja	 $LN2@stone
  0001a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN20@stone[edx*4]
$LN4@stone:

; 3448 : 	{
; 3449 : 	case 0:
; 3450 : 		a1 = ATR_BODY_WORK(1, a0);		//?Óôπ???????

  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 3451 : 		if (ATR_VCT_NO(a1) == 1)

  00024	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00027	80 38 01	 cmp	 BYTE PTR [eax], 1
  0002a	0f 84 ad 00 00
	00		 je	 $LN19@stone

; 3452 : 		{
; 3453 : 			DeathAction(a0);		//Óé∑?
; 3454 : 			return;
; 3455 : 		}
; 3456 : 		ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  00030	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00033	fe c0		 inc	 al
  00035	88 46 15	 mov	 BYTE PTR [esi+21], al

; 3457 : 		a2 = ATR_BODY_WORK(0, a0);		//Óò©???????

  00038	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 3458 : 		d0 = ATR_H_POS(a2);

  0003b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0003e	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 3459 : 		d1 = ATR_V_POS(a2);

  00041	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00044	89 45 08	 mov	 DWORD PTR _d1$[ebp], eax

; 3460 : 		radar(a1, &d0, &d1);	//????

  00047	8d 45 08	 lea	 eax, DWORD PTR _d1$[ebp]
  0004a	50		 push	 eax
  0004b	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  0004e	50		 push	 eax
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 3461 : 		ATR_STIMER(a0)++;

  00055	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	fe 40 01	 inc	 BYTE PTR [eax+1]

; 3462 : 		if (ATR_CRS(a0) == 0)		//ÓêØÓêÑ??

  0005e	83 be 38 01 00
	00 00		 cmp	 DWORD PTR [esi+312], 0
  00065	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  0006b	75 13		 jne	 SHORT $LN6@stone

; 3463 : 		{
; 3464 : 			if (ATR_SPD(a0) == 0)		//???Óåø??

  0006d	85 c0		 test	 eax, eax
  0006f	75 0c		 jne	 SHORT $LN8@stone

; 3465 : 				ATR_CRS(a0) = 16;

  00071	c7 86 38 01 00
	00 10 00 00 00	 mov	 DWORD PTR [esi+312], 16	; 00000010H
  0007b	eb 0a		 jmp	 SHORT $LN7@stone
$LN8@stone:

; 3466 : 			else
; 3467 : 				ATR_SPD(a0) -= 1;

  0007d	48		 dec	 eax

; 3468 : 		}

  0007e	eb 01		 jmp	 SHORT $LN21@stone
$LN6@stone:

; 3469 : 		else
; 3470 : 			ATR_SPD(a0) += 1;

  00080	40		 inc	 eax
$LN21@stone:

; 3471 : 		gemini(a0);

  00081	89 86 34 01 00
	00		 mov	 DWORD PTR [esi+308], eax
$LN7@stone:

; 3505 : 		break;
; 3506 : 	}
; 3507 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  0008d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00090	83 c4 04	 add	 esp, 4
  00093	8b 80 2c 01 00
	00		 mov	 eax, DWORD PTR [eax+300]
  00099	01 46 18	 add	 DWORD PTR [esi+24], eax
  0009c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0009f	6a 00		 push	 0
  000a1	6a 00		 push	 0
  000a3	56		 push	 esi
  000a4	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [eax+304]
  000aa	01 46 1c	 add	 DWORD PTR [esi+28], eax
  000ad	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b5	5f		 pop	 edi

; 3508 : }

  000b6	5e		 pop	 esi
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN11@stone:

; 3505 : 		break;
; 3506 : 	}
; 3507 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  000bb	6a 00		 push	 0
  000bd	fe c0		 inc	 al
  000bf	6a 00		 push	 0
  000c1	56		 push	 esi
  000c2	88 01		 mov	 BYTE PTR [ecx], al
  000c4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cc	5f		 pop	 edi

; 3508 : }

  000cd	5e		 pop	 esi
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
$LN12@stone:

; 3472 : 		ATR_H_POS(a0) += ATR_INT_WORK2(a1);
; 3473 : 		ATR_V_POS(a0) += ATR_INT_WORK3(a1);
; 3474 : 		break;
; 3475 : 	case 1:
; 3476 : 		break;
; 3477 : 	case 2:
; 3478 : 		ATR_VCT_NO(a0)++;
; 3479 : 		break;
; 3480 : 	case 3:
; 3481 : 		a1 = ATR_BODY_WORK(1, a0);		//?Óôπ???????

  000d2	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 3482 : 		if (ATR_VCT_NO(a1) == 1)

  000d5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000d8	80 38 01	 cmp	 BYTE PTR [eax], 1
  000db	75 0f		 jne	 SHORT $LN13@stone
$LN19@stone:

; 3483 : 		{
; 3484 : 			DeathAction(a0);		//Óé∑?

  000dd	56		 push	 esi
  000de	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  000e3	83 c4 04	 add	 esp, 4
  000e6	5f		 pop	 edi

; 3508 : }

  000e7	5e		 pop	 esi
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
$LN13@stone:

; 3485 : 			return;
; 3486 : 		}
; 3487 : 		ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  000ec	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000ef	fe c0		 inc	 al
  000f1	88 46 15	 mov	 BYTE PTR [esi+21], al

; 3488 : 		ATR_LONG_WORK(0, a0)++;

  000f4	ff 81 34 01 00
	00		 inc	 DWORD PTR [ecx+308]

; 3489 : 		if (ATR_LONG_WORK(0, a0) & 1)

  000fa	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000fd	f6 80 34 01 00
	00 01		 test	 BYTE PTR [eax+308], 1
  00104	74 81		 je	 SHORT $LN7@stone

; 3490 : 			ATR_SPD(a0) += 2;

  00106	83 86 34 01 00
	00 02		 add	 DWORD PTR [esi+308], 2

; 3491 : 		gemini(a0);
; 3492 : 		ATR_H_POS(a0) += ATR_INT_WORK2(a1);
; 3493 : 		ATR_V_POS(a0) += ATR_INT_WORK3(a1);
; 3494 : 		break;

  0010d	e9 75 ff ff ff	 jmp	 $LN7@stone
$LN15@stone:

; 3495 : 	case 4:
; 3496 : 		if (ATR_LONG_WORK(1, a0))

  00112	8b 81 38 01 00
	00		 mov	 eax, DWORD PTR [ecx+312]
  00118	85 c0		 test	 eax, eax
  0011a	74 15		 je	 SHORT $LN17@stone

; 3497 : 		{
; 3498 : 			//????
; 3499 : 			if (!--ATR_LONG_WORK(1, a0))

  0011c	83 c0 ff	 add	 eax, -1
  0011f	89 81 38 01 00
	00		 mov	 DWORD PTR [ecx+312], eax
  00125	75 0a		 jne	 SHORT $LN17@stone

; 3500 : 				ATR_ATTRIB(a0) = ACT_ATR_HIDE;		//Óù∏Óçï??

  00127	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2
$LN17@stone:

; 3501 : 		}
; 3502 : 		a1 = ATR_BODY_WORK(1, a0);		//?Óôπ???????

  00131	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00134	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 3503 : 		ATR_H_POS(a0) = ATR_H_POS(a1);

  00137	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0013a	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 3504 : 		ATR_V_POS(a0) = ATR_V_POS(a1);

  0013d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00140	89 46 1c	 mov	 DWORD PTR [esi+28], eax
$LN2@stone:

; 3505 : 		break;
; 3506 : 	}
; 3507 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	56		 push	 esi
  00148	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0014d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00150	5f		 pop	 edi

; 3508 : }

  00151	5e		 pop	 esi
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c3		 ret	 0
  00156	66 90		 npad	 2
$LN20@stone:
  00158	00 00 00 00	 DD	 $LN4@stone
  0015c	00 00 00 00	 DD	 $LN2@stone
  00160	00 00 00 00	 DD	 $LN11@stone
  00164	00 00 00 00	 DD	 $LN12@stone
  00168	00 00 00 00	 DD	 $LN15@stone
?stone@@YAXPAUaction@@@Z ENDP				; stone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?axe_shadow@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d1$ = -4						; size = 4
_d0$ = 8						; size = 4
_a0$ = 8						; size = 4
?axe_shadow@@YAXPAUaction@@@Z PROC			; axe_shadow, COMDAT

; 3194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3195 : 	ACTION *a1, *a2;
; 3196 : 	int d0, d1;
; 3197 : 
; 3198 : 	switch (ATR_VCT_NO(a0))

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	57		 push	 edi
  00009	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0000c	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0000f	83 f8 06	 cmp	 eax, 6
  00012	0f 87 0d 06 00
	00		 ja	 $LN49@axe_shadow
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN57@axe_shadow[eax*4]
$LN4@axe_shadow:

; 3199 : 	{
; 3200 : 	case 0:
; 3201 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  0001f	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 3202 : 		d0 = ATR_H_POS(a1);

  00022	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00025	89 45 08	 mov	 DWORD PTR _d0$[ebp], eax

; 3203 : 		d1 = ATR_V_POS(a1);

  00028	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002b	89 45 fc	 mov	 DWORD PTR _d1$[ebp], eax

; 3204 : 		radar(a0, &d0, &d1);	//????

  0002e	8d 45 fc	 lea	 eax, DWORD PTR _d1$[ebp]
  00031	50		 push	 eax
  00032	8d 45 08	 lea	 eax, DWORD PTR _d0$[ebp]
  00035	50		 push	 eax
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 3205 : 		ATR_CRS(a0) = d0;		//??????

  0003c	8b 45 08	 mov	 eax, DWORD PTR _d0$[ebp]
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 3206 : 		//???????
; 3207 : 		if (!--ATR_GROUP_FLG(a0))

  00048	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004b	80 40 5e ff	 add	 BYTE PTR [eax+94], 255	; 000000ffH
  0004f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00052	0f 85 56 03 00
	00		 jne	 $LN5@axe_shadow

; 3208 : 		{
; 3209 : 			a2 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 3210 : 			if (ATR_LIFE(a2) <= 0)		//??????

  00058	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0005b	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  0005f	7f 2c		 jg	 SHORT $LN7@axe_shadow

; 3211 : 			{
; 3212 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  00061	c6 41 5c 08	 mov	 BYTE PTR [ecx+92], 8

; 3213 : 				ATR_VCT_NO(a0) = 1;		//????????

  00065	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	56		 push	 esi
  0006d	c6 00 01	 mov	 BYTE PTR [eax], 1
  00070	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00073	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  00079	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  0007f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi

; 3439 : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
$LN7@axe_shadow:

; 3214 : 				ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 3215 : 				break;
; 3216 : 			}
; 3217 : #ifdef _PETSKILL_ACUPUNCTURE
; 3218 : 			/////////////////////////////
; 3219 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 3220 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP | ATT_ACUPUNCTURE

  0008d	f7 41 60 00 1c
	00 4a		 test	 DWORD PTR [ecx+96], 1241521152 ; 4a001c00H
  00094	74 09		 je	 SHORT $LN8@axe_shadow

; 3221 : #ifdef _PET_ITEM
; 3222 : 				| ATT_ATTACKBACK
; 3223 : #endif
; 3224 : 				))
; 3225 : #else
; 3226 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_ACUPUNCTURE
; 3227 : #ifdef _PET_ITEM
; 3228 : 				| ATT_ATTACKBACK
; 3229 : #endif
; 3230 : 				))
; 3231 : #endif
; 3232 : 				/////////////////////////////
; 3233 : #else
; 3234 : 			/////////////////////////////
; 3235 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 3236 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP))
; 3237 : #else
; 3238 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA))
; 3239 : #endif
; 3240 : 				/////////////////////////////
; 3241 : #endif
; 3242 : 				set_guard_mark(a0);		//Ó†°?Óé£ÓèûÓù∏Óçï?

  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 ?set_guard_mark@@YAXPAUaction@@@Z ; set_guard_mark
  0009c	83 c4 04	 add	 esp, 4
$LN8@axe_shadow:

; 3243 : 			//?????????
; 3244 : 			ATR_COMBO(a1) = 0;

  0009f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000a2	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0

; 3245 : 			//?Óéó??????
; 3246 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  000a9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ac	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000af	f6 c1 20	 test	 cl, 32			; 00000020H
  000b2	74 71		 je	 SHORT $LN9@axe_shadow

; 3247 : 			{
; 3248 : 				ATR_HIT_STOP(a0) = 32;		//??????????

  000b4	c6 40 5c 20	 mov	 BYTE PTR [eax+92], 32	; 00000020H

; 3249 : 				ATR_VCT_NO(a0) = 1;		//????????

  000b8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3250 : 				ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 3251 : 				ATR_CHR_ACT(a0) = 1;		//Óåπ?????????
; 3252 : 				gemini(a0);

  000bb	56		 push	 esi
  000bc	c6 00 01	 mov	 BYTE PTR [eax], 1
  000bf	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c2	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  000c8	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  000ce	c7 86 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+332], 1
  000d8	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 3253 : 				ATR_VCT_NO(a1) = 16;		//????

  000dd	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000e0	83 c4 04	 add	 esp, 4
  000e3	c6 00 10	 mov	 BYTE PTR [eax], 16	; 00000010H

; 3254 : 				ATR_CRS(a1) = ATR_CRS(a0);		//Óò©?????????????

  000e6	8b 86 38 01 00
	00		 mov	 eax, DWORD PTR [esi+312]

; 3255 : 				ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//

  000ec	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ef	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  000f5	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  000fb	6a 00		 push	 0
  000fd	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al
  00103	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00106	6a 00		 push	 0
  00108	56		 push	 esi
  00109	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  0010d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00110	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  00117	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi

; 3439 : }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
$LN9@axe_shadow:

; 3256 : 				ATR_STIMER(a1) = 0;
; 3257 : 				ATR_FIRST_FLG(a1) = 0;		//??????????
; 3258 : 				break;
; 3259 : 			}
; 3260 : 			//??????Óé™??????
; 3261 : 			if (!((ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) | (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)))

  00125	f7 c1 00 18 00
	00		 test	 ecx, 6144		; 00001800H
  0012b	75 5a		 jne	 SHORT $LN11@axe_shadow

; 3262 : 			{
; 3263 : 				if ((ATR_ATTACK_POW(0, a0) == 0) && (ATR_ATTACK_PET_POW(0, a0) == 0))		//????

  0012d	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00134	75 51		 jne	 SHORT $LN11@axe_shadow
  00136	83 b8 d4 01 00
	00 00		 cmp	 DWORD PTR [eax+468], 0
  0013d	75 48		 jne	 SHORT $LN11@axe_shadow

; 3264 : 				{
; 3265 : 					a2 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 3266 : 					//??Óù∏Óçï
; 3267 : 					set_damage_num(a2, 0, -64);

  0013f	6a c0		 push	 -64			; ffffffc0H
  00141	6a 00		 push	 0
  00143	ff 70 04	 push	 DWORD PTR [eax+4]
  00146	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 3268 : 					ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  0014b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00151	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8

; 3269 : 					ATR_VCT_NO(a0) = 1;		//????????

  00155	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00158	6a 00		 push	 0
  0015a	6a 00		 push	 0
  0015c	56		 push	 esi
  0015d	c6 00 01	 mov	 BYTE PTR [eax], 1
  00160	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00163	c7 86 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+332], 1
  0016d	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  00173	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  00179	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi

; 3439 : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
$LN11@axe_shadow:

; 3270 : 					ATR_CHR_ACT(a0) = 1;		//Óåπ?????????
; 3271 : 					ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 3272 : 					break;
; 3273 : 				}
; 3274 : 			}
; 3275 : 			//?Óéó????????
; 3276 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_CRUSH)

  00187	f7 c1 00 20 00
	00		 test	 ecx, 8192		; 00002000H
  0018d	74 0d		 je	 SHORT $LN12@axe_shadow

; 3277 : 				set_damage_num(a1, 19, -112);	//?????Óù∏Óçï

  0018f	6a 90		 push	 -112			; ffffff90H
  00191	6a 13		 push	 19			; 00000013H
  00193	57		 push	 edi
  00194	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@axe_shadow:

; 3278 : 			//?????????
; 3279 : 			ATR_AKO_FLG(a1) = 0;

  0019c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0019f	c6 80 21 01 00
	00 00		 mov	 BYTE PTR [eax+289], 0

; 3280 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO1)		//??????

  001a6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001a9	f6 40 60 40	 test	 BYTE PTR [eax+96], 64	; 00000040H
  001ad	74 0d		 je	 SHORT $LN13@axe_shadow

; 3281 : 				ATR_AKO_FLG(a1) = 1;

  001af	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001b2	c6 80 21 01 00
	00 01		 mov	 BYTE PTR [eax+289], 1
  001b9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN13@axe_shadow:

; 3282 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO2)		//??????

  001bc	f6 40 60 80	 test	 BYTE PTR [eax+96], 128	; 00000080H
  001c0	74 0d		 je	 SHORT $LN14@axe_shadow

; 3283 : 				ATR_AKO_FLG(a1) = 2;

  001c2	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001c5	c6 80 21 01 00
	00 02		 mov	 BYTE PTR [eax+289], 2
  001cc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN14@axe_shadow:

; 3284 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DEATH)		//?????

  001cf	f6 40 60 01	 test	 BYTE PTR [eax+96], 1
  001d3	74 07		 je	 SHORT $LN56@axe_shadow

; 3285 : 				ATR_LIFE(a1) = 0;		//?Ó†å????

  001d5	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
$LN56@axe_shadow:

; 3286 : 			ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//

  001dc	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  001df	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]
  001e5	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 3287 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)		//?Óé™?????

  001eb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ee	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001f1	f7 c1 00 08 00
	00		 test	 ecx, 2048		; 00000800H
  001f7	74 7a		 je	 SHORT $LN16@axe_shadow

; 3288 : 			{
; 3289 : 				if (!ATR_COMBO(a1))		//????????

  001f9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  001fc	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00203	0f 85 91 00 00
	00		 jne	 $LN22@axe_shadow

; 3290 : 				{
; 3291 : 					//??Óñ±Óù∏Óçï
; 3292 : 					ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  00209	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  0020f	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 3293 : 					ATR_LIFE(a1) += ATR_DAMAGE(a1);

  00212	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]

; 3294 : 					if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???

  00215	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]

; 3295 : 						ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???
; 3296 : 					ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);
; 3297 : 					ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);
; 3298 : 					if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))		//?Óï´Óóó???
; 3299 : 						ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);		//?Óï´???
; 3300 : 					set_damage_num(a1, 14, -64);

  0021b	6a c0		 push	 -64			; ffffffc0H
  0021d	6a 0e		 push	 14			; 0000000eH
  0021f	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00222	01 47 78	 add	 DWORD PTR [edi+120], eax
  00225	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00228	3b c1		 cmp	 eax, ecx
  0022a	57		 push	 edi
  0022b	0f 4f c1	 cmovg	 eax, ecx
  0022e	89 47 78	 mov	 DWORD PTR [edi+120], eax
  00231	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00234	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  0023a	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax
  00240	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00243	8b 8f b4 01 00
	00		 mov	 ecx, DWORD PTR [edi+436]
  00249	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  0024f	01 87 b0 01 00
	00		 add	 DWORD PTR [edi+432], eax
  00255	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  0025b	3b c1		 cmp	 eax, ecx
  0025d	0f 4f c1	 cmovg	 eax, ecx
  00260	89 87 b0 01 00
	00		 mov	 DWORD PTR [edi+432], eax
  00266	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 3301 : 					ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?

  0026b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0026e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3302 : 					ATR_ATTACK_PET_POW(0, a0) = 0;		//pet????Ó°ä?
; 3303 : 				}
; 3304 : 			}

  00271	eb 08		 jmp	 SHORT $LN58@axe_shadow
$LN16@axe_shadow:

; 3305 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA)		//????????

  00273	f7 c1 00 10 00
	00		 test	 ecx, 4096		; 00001000H
  00279	74 19		 je	 SHORT $LN21@axe_shadow
$LN58@axe_shadow:

; 3312 : 			//?Óëû?????
; 3313 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  0027b	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0
  00285	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00288	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  00292	eb 06		 jmp	 SHORT $LN22@axe_shadow
$LN21@axe_shadow:

; 3306 : 			{
; 3307 : 				ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?
; 3308 : 				ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?
; 3309 : 			}
; 3310 : 			else
; 3311 : 				ATR_VCT_NO(a1) = 10;		//?????Óëò

  00294	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00297	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH
$LN22@axe_shadow:

; 3312 : 			//?Óëû?????
; 3313 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  0029a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0029d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002a0	0f b6 40 60	 movzx	 eax, BYTE PTR [eax+96]
  002a4	c0 e8 02	 shr	 al, 2
  002a7	24 01		 and	 al, 1
  002a9	88 81 01 01 00
	00		 mov	 BYTE PTR [ecx+257], al

; 3314 : 				ATR_KAISHIN(a1) = 1;		//?Óëû??????
; 3315 : 			else
; 3316 : 				ATR_KAISHIN(a1) = 0;		//Óó≠Óêπ?????
; 3317 : 			ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  002af	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002b2	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002b5	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  002bb	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 3318 : 			ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);

  002be	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002c1	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002c4	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  002ca	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 3319 : 			//?????
; 3320 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_GUARD)

  002d0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002d3	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002d6	0f b6 40 60	 movzx	 eax, BYTE PTR [eax+96]
  002da	c0 e8 03	 shr	 al, 3
  002dd	24 01		 and	 al, 1
  002df	88 81 1c 01 00
	00		 mov	 BYTE PTR [ecx+284], al

; 3321 : 				ATR_GUARD_FLG(a1) = 1;
; 3322 : 			else
; 3323 : 				ATR_GUARD_FLG(a1) = 0;
; 3324 : 			if (ATR_LIFE(a1) - ATR_DAMAGE(a1) <= 0)		//?Ó†å????

  002e5	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  002e8	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  002eb	2b 42 58	 sub	 eax, DWORD PTR [edx+88]
  002ee	85 c0		 test	 eax, eax
  002f0	7f 23		 jg	 SHORT $LN28@axe_shadow

; 3325 : 			{
; 3326 : 				ATR_LONG_WORK(1, a0) = 1;		//?Ó†å??????

  002f2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002f5	c7 80 38 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+312], 1

; 3327 : 				//????????
; 3328 : 				if (ATR_COMBO(a1) == 0)

  002ff	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00302	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  00309	75 0a		 jne	 SHORT $LN28@axe_shadow

; 3329 : 					ATR_KAISHIN(a1) = 1;		//?Óëû??????

  0030b	c6 82 01 01 00
	00 01		 mov	 BYTE PTR [edx+257], 1
  00312	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN28@axe_shadow:

; 3330 : 			}
; 3331 : 			if (ATR_KAISHIN(a1))		//?Óëû?????
; 3332 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM * 4;		//??????????
; 3333 : 			else
; 3334 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????
; 3335 : 			//???????????Óé™??
; 3336 : 			if (ATR_DAMAGE(a1) || (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) || (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION))

  00315	80 ba 01 01 00
	00 00		 cmp	 BYTE PTR [edx+257], 0
  0031c	b8 08 00 00 00	 mov	 eax, 8
  00321	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00326	0f 44 c8	 cmove	 ecx, eax
  00329	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0032c	88 48 5c	 mov	 BYTE PTR [eax+92], cl
  0032f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00332	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00335	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00339	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  0033c	75 07		 jne	 SHORT $LN32@axe_shadow
  0033e	a9 00 18 00 00	 test	 eax, 6144		; 00001800H
  00343	74 33		 je	 SHORT $LN31@axe_shadow
$LN32@axe_shadow:

; 3337 : 			{
; 3338 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER)		//???????

  00345	a8 10		 test	 al, 16			; 00000010H
  00347	74 16		 je	 SHORT $LN34@axe_shadow

; 3339 : 				{
; 3340 : 					//????????
; 3341 : 					if (ATR_COMBO(a1) == 0)

  00349	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00350	75 0d		 jne	 SHORT $LN34@axe_shadow

; 3342 : 						set_damage_num(a0, 1, -64 + 16);//?????Óù∏Óçï

  00352	6a d0		 push	 -48			; ffffffd0H
  00354	6a 01		 push	 1
  00356	56		 push	 esi
  00357	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  0035c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN34@axe_shadow:

; 3343 : 				}
; 3344 : 				//???
; 3345 : 				play_se(252, ATR_H_POS(a0), ATR_V_POS(a0));

  0035f	ff 76 1c	 push	 DWORD PTR [esi+28]
  00362	ff 76 18	 push	 DWORD PTR [esi+24]
  00365	68 fc 00 00 00	 push	 252			; 000000fcH
  0036a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 3346 : 				//?????????
; 3347 : 				set_hit_mark(a0);

  0036f	56		 push	 esi
  00370	e8 00 00 00 00	 call	 ?set_hit_mark@@YAXPAUaction@@@Z ; set_hit_mark
  00375	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@axe_shadow:

; 3348 : 			}
; 3349 : 			ATR_HIT_STOP(a0) /= 4;		//???????Óèπ???

  00378	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0037b	6a 00		 push	 0
  0037d	6a 00		 push	 0
  0037f	56		 push	 esi
  00380	c0 68 5c 02	 shr	 BYTE PTR [eax+92], 2
  00384	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00387	c6 00 03	 mov	 BYTE PTR [eax], 3
  0038a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0038d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00390	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00393	c6 00 01	 mov	 BYTE PTR [eax], 1
  00396	c7 81 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+332], 1
  003a0	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  003a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a8	5f		 pop	 edi
  003a9	5e		 pop	 esi

; 3439 : }

  003aa	8b e5		 mov	 esp, ebp
  003ac	5d		 pop	 ebp
  003ad	c3		 ret	 0
$LN5@axe_shadow:

; 3350 : 			ATR_VCT_NO(a0) = 3;				//????????
; 3351 : 			a1 = ATR_BODY_WORK(2, a0);		//???????
; 3352 : 			ATR_VCT_NO(a1) = 1;				//????????
; 3353 : 			ATR_CHR_ACT(a1) = 1;		//Óåπ?????????
; 3354 : 		}
; 3355 : 		else
; 3356 : 		{
; 3357 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0);		//?ÓôÆ??Óå´

  003ae	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  003b1	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3358 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0);		//

  003b7	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  003ba	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 3359 : 			gemini(a0);		//?ÓôÆ

  003bd	56		 push	 esi
  003be	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  003c4	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 3360 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0) - ATR_INT_WORK2(a0);

  003c9	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  003cc	83 c4 04	 add	 esp, 4
  003cf	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  003d2	2b 81 2c 01 00
	00		 sub	 eax, DWORD PTR [ecx+300]
  003d8	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3361 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0) - ATR_INT_WORK3(a0);

  003de	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  003e1	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  003e4	6a 00		 push	 0
  003e6	6a 00		 push	 0
  003e8	2b 81 30 01 00
	00		 sub	 eax, DWORD PTR [ecx+304]
  003ee	56		 push	 esi
  003ef	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  003f5	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  003fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  003fd	5f		 pop	 edi
  003fe	5e		 pop	 esi

; 3439 : }

  003ff	8b e5		 mov	 esp, ebp
  00401	5d		 pop	 ebp
  00402	c3		 ret	 0
$LN35@axe_shadow:

; 3362 : 		}
; 3363 : 		break;
; 3364 : 	case 1:
; 3365 : 		if (--ATR_HIT_STOP(a0))		//??????????

  00403	80 41 5c ff	 add	 BYTE PTR [ecx+92], 255	; 000000ffH
  00407	0f 85 18 02 00
	00		 jne	 $LN49@axe_shadow

; 3366 : 			break;
; 3367 : 		ATR_CHR_ACT(a0) = 0;		//?ÓôÆ???????
; 3368 : 		//???????
; 3369 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  0040d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00410	c7 86 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+332], 0

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0041a	6a 00		 push	 0
  0041c	6a 00		 push	 0
  0041e	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00421	24 20		 and	 al, 32			; 00000020H
  00423	f6 d8		 neg	 al
  00425	56		 push	 esi
  00426	1a c0		 sbb	 al, al
  00428	24 e0		 and	 al, 224			; 000000e0H
  0042a	04 40		 add	 al, 64			; 00000040H
  0042c	88 41 01	 mov	 BYTE PTR [ecx+1], al
  0042f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00432	c6 00 02	 mov	 BYTE PTR [eax], 2
  00435	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2
  0043f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0
  00449	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0044e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00451	5f		 pop	 edi
  00452	5e		 pop	 esi

; 3439 : }

  00453	8b e5		 mov	 esp, ebp
  00455	5d		 pop	 ebp
  00456	c3		 ret	 0
$LN39@axe_shadow:

; 3370 : 			ATR_STIMER(a0) = 32;
; 3371 : 		else
; 3372 : 			ATR_STIMER(a0) = 64;
; 3373 : 		ATR_VCT_NO(a0) = 2;
; 3374 : 		a0->atr = ACT_ATR_HIDE;
; 3375 : 		p_missile[0] = NULL;
; 3376 : 		break;
; 3377 : 	case 2:
; 3378 : 		if (--ATR_STIMER(a0))

  00457	80 41 01 ff	 add	 BYTE PTR [ecx+1], 255	; 000000ffH
  0045b	0f 85 c4 01 00
	00		 jne	 $LN49@axe_shadow

; 3379 : 			break;
; 3380 : 		ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  00461	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3381 : 		DeathAction(a0);		//Óé∑?

  00464	56		 push	 esi
  00465	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00468	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0046b	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
  0046f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00474	83 c4 04	 add	 esp, 4

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00477	6a 00		 push	 0
  00479	6a 00		 push	 0
  0047b	56		 push	 esi
  0047c	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00481	83 c4 0c	 add	 esp, 12			; 0000000cH
  00484	5f		 pop	 edi
  00485	5e		 pop	 esi

; 3439 : }

  00486	8b e5		 mov	 esp, ebp
  00488	5d		 pop	 ebp
  00489	c3		 ret	 0
$LN41@axe_shadow:

; 3382 : 		break;
; 3383 : 	case 3:
; 3384 : 		if (--ATR_HIT_STOP(a0))		//??????????

  0048a	80 41 5c ff	 add	 BYTE PTR [ecx+92], 255	; 000000ffH
  0048e	0f 85 91 01 00
	00		 jne	 $LN49@axe_shadow

; 3385 : 			break;
; 3386 : 		a1 = ATR_BODY_WORK(2, a0);		//???????
; 3387 : 		ATR_CHR_ACT(a1) = 0;		//?ÓôÆ???????

  00494	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00497	6a 00		 push	 0
  00499	6a 00		 push	 0
  0049b	56		 push	 esi
  0049c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0049f	c7 80 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+332], 0
  004a9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  004ac	c6 40 5e 23	 mov	 BYTE PTR [eax+94], 35	; 00000023H
  004b0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  004b3	c7 86 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [esi+308], 16	; 00000010H
  004bd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  004c0	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  004c3	c6 00 02	 mov	 BYTE PTR [eax], 2
  004c6	c7 81 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [ecx+308], 32	; 00000020H
  004d0	c7 81 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+312], 0
  004da	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  004dd	fe 00		 inc	 BYTE PTR [eax]
  004df	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  004e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e7	5f		 pop	 edi
  004e8	5e		 pop	 esi

; 3439 : }

  004e9	8b e5		 mov	 esp, ebp
  004eb	5d		 pop	 ebp
  004ec	c3		 ret	 0
$LN43@axe_shadow:

; 3388 : 		//?????????ÓôÆ??
; 3389 : 		ATR_GROUP_FLG(a0) = 35;
; 3390 : 		ATR_SPD(a0) = 16;
; 3391 : 		a1 = ATR_BODY_WORK(2, a0);		//???????
; 3392 : 		ATR_VCT_NO(a1) = 2;				//?ÓôÆ??
; 3393 : 		ATR_SPD(a1) = 32;
; 3394 : 		ATR_CRS(a1) = 0;
; 3395 : 		ATR_VCT_NO(a0)++;
; 3396 : 		break;
; 3397 : 	case 4:
; 3398 : 		ATR_INT_WORK2(a0) = ATR_H_POS(a0);		//?ÓôÆ??Óå´

  004ed	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  004f0	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3399 : 		ATR_INT_WORK3(a0) = ATR_V_POS(a0);		//

  004f6	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  004f9	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 3400 : 		gemini(a0);		//?ÓôÆ

  004fc	56		 push	 esi
  004fd	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  00503	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 3401 : 		ATR_INT_WORK2(a0) = ATR_H_POS(a0) - ATR_INT_WORK2(a0);

  00508	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0050b	83 c4 04	 add	 esp, 4
  0050e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00511	2b 81 2c 01 00
	00		 sub	 eax, DWORD PTR [ecx+300]
  00517	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3402 : 		ATR_INT_WORK3(a0) = ATR_V_POS(a0) - ATR_INT_WORK3(a0);

  0051d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00520	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00523	2b 81 30 01 00
	00		 sub	 eax, DWORD PTR [ecx+304]
  00529	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax

; 3403 : 		if (!--ATR_GROUP_FLG(a0))		//Óé∑???

  0052f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00532	80 40 5e ff	 add	 BYTE PTR [eax+94], 255	; 000000ffH
  00536	0f 85 e9 00 00
	00		 jne	 $LN49@axe_shadow

; 3404 : 		{
; 3405 : 			if (ATR_LONG_WORK(1, a0))		//Óò©???????

  0053c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0053f	83 b8 38 01 00
	00 00		 cmp	 DWORD PTR [eax+312], 0
  00546	74 0d		 je	 SHORT $LN45@axe_shadow

; 3406 : 				ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  00548	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0054b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0054e	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
  00552	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN45@axe_shadow:

; 3407 : 			ATR_VCT_NO(a0)++;

  00555	fe 00		 inc	 BYTE PTR [eax]

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00557	6a 00		 push	 0
  00559	6a 00		 push	 0
  0055b	56		 push	 esi
  0055c	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00561	83 c4 0c	 add	 esp, 12			; 0000000cH
  00564	5f		 pop	 edi
  00565	5e		 pop	 esi

; 3439 : }

  00566	8b e5		 mov	 esp, ebp
  00568	5d		 pop	 ebp
  00569	c3		 ret	 0
$LN46@axe_shadow:

; 3408 : 		}
; 3409 : 		break;
; 3410 : 	case 5:
; 3411 : 		a1 = ATR_BODY_WORK(2, a0);		//???????
; 3412 : 		ATR_VCT_NO(a1) = 4;

  0056a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0056d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00570	c6 00 04	 mov	 BYTE PTR [eax], 4

; 3413 : 		//???
; 3414 : 		play_se(251, ATR_H_POS(a0), ATR_V_POS(a0));

  00573	ff 76 1c	 push	 DWORD PTR [esi+28]
  00576	ff 76 18	 push	 DWORD PTR [esi+24]
  00579	68 fb 00 00 00	 push	 251			; 000000fbH
  0057e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 3415 : 		ATR_VCT_NO(a0)++;

  00583	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00586	83 c4 0c	 add	 esp, 12			; 0000000cH
  00589	fe 00		 inc	 BYTE PTR [eax]

; 3416 : 		ATR_STIMER(a0) = 30;

  0058b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0058e	6a 00		 push	 0
  00590	6a 00		 push	 0
  00592	56		 push	 esi
  00593	c6 40 01 1e	 mov	 BYTE PTR [eax+1], 30	; 0000001eH
  00597	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0059c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0059f	5f		 pop	 edi
  005a0	5e		 pop	 esi

; 3439 : }

  005a1	8b e5		 mov	 esp, ebp
  005a3	5d		 pop	 ebp
  005a4	c3		 ret	 0
$LN47@axe_shadow:

; 3417 : 		break;
; 3418 : 	case 6:
; 3419 : 		if (ATR_STIMER(a0))

  005a5	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  005a8	84 c0		 test	 al, al
  005aa	74 18		 je	 SHORT $LN48@axe_shadow

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  005ac	6a 00		 push	 0
  005ae	fe c8		 dec	 al
  005b0	6a 00		 push	 0
  005b2	56		 push	 esi
  005b3	88 41 01	 mov	 BYTE PTR [ecx+1], al
  005b6	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  005bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  005be	5f		 pop	 edi
  005bf	5e		 pop	 esi

; 3439 : }

  005c0	8b e5		 mov	 esp, ebp
  005c2	5d		 pop	 ebp
  005c3	c3		 ret	 0
$LN48@axe_shadow:

; 3420 : 		{
; 3421 : 			ATR_STIMER(a0)--;
; 3422 : 			break;
; 3423 : 		}
; 3424 : 		ATR_ATTRIB(a0) = ACT_ATR_HIDE;		//Óù∏Óçï??

  005c4	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2

; 3425 : 		a1 = ATR_BODY_WORK(2, a0);		//???????
; 3426 : 		ATR_ATTRIB(a1) = ACT_ATR_HIDE;		//Óù∏Óçï??

  005ce	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  005d1	c7 80 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+164], 2

; 3427 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  005db	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  005de	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 3428 : 		if (ATR_NAME(a1) == NULL || ATR_VCT_NO(a1) >= VCT_NO_DIE || ATR_VCT_NO(a1) == 0)		//Óïò???????

  005e1	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  005e5	74 0d		 je	 SHORT $LN50@axe_shadow
  005e7	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  005ea	8a 00		 mov	 al, BYTE PTR [eax]
  005ec	3c fa		 cmp	 al, 250			; 000000faH
  005ee	73 04		 jae	 SHORT $LN50@axe_shadow
  005f0	84 c0		 test	 al, al
  005f2	75 31		 jne	 SHORT $LN49@axe_shadow
$LN50@axe_shadow:

; 3429 : 		{
; 3430 : 			if (!ATR_LONG_WORK(1, a0))		//Óò©?Óíü?????

  005f4	83 b9 38 01 00
	00 00		 cmp	 DWORD PTR [ecx+312], 0
  005fb	75 0a		 jne	 SHORT $LN51@axe_shadow

; 3431 : 				ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  005fd	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00600	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00603	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
$LN51@axe_shadow:

; 3432 : 			DeathAction(a0);		//Óé∑?

  00607	56		 push	 esi
  00608	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 3433 : 			p_missile[0] = NULL;	//

  0060d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0

; 3434 : 			a1 = ATR_BODY_WORK(2, a0);		//???????
; 3435 : 			DeathAction(a1);		//Óé∑?

  00617	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0061a	ff 70 0c	 push	 DWORD PTR [eax+12]
  0061d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00622	83 c4 08	 add	 esp, 8
$LN49@axe_shadow:

; 3436 : 		}
; 3437 : 	}
; 3438 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00625	6a 00		 push	 0
  00627	6a 00		 push	 0
  00629	56		 push	 esi
  0062a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0062f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00632	5f		 pop	 edi
  00633	5e		 pop	 esi

; 3439 : }

  00634	8b e5		 mov	 esp, ebp
  00636	5d		 pop	 ebp
  00637	c3		 ret	 0
$LN57@axe_shadow:
  00638	00 00 00 00	 DD	 $LN4@axe_shadow
  0063c	00 00 00 00	 DD	 $LN35@axe_shadow
  00640	00 00 00 00	 DD	 $LN39@axe_shadow
  00644	00 00 00 00	 DD	 $LN41@axe_shadow
  00648	00 00 00 00	 DD	 $LN43@axe_shadow
  0064c	00 00 00 00	 DD	 $LN46@axe_shadow
  00650	00 00 00 00	 DD	 $LN47@axe_shadow
?axe_shadow@@YAXPAUaction@@@Z ENDP			; axe_shadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?fireHunter@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$GSCopy$1$ = -68					; size = 4
_a1$1$ = -64						; size = 4
_d1$ = -60						; size = 4
_difPosV$1 = -60					; size = 4
_difPosH$2 = -60					; size = 4
_refPos$3 = -60						; size = 4
$T4 = -56						; size = 4
_d0$ = -56						; size = 4
_j$1$ = -52						; size = 4
_difPosH$1$ = -48					; size = 4
_i$1$ = -48						; size = 4
tv3416 = -44						; size = 4
_difPosV$1$ = -44					; size = 4
$T5 = -40						; size = 4
$T6 = -40						; size = 4
$T7 = -40						; size = 4
tv3417 = -40						; size = 4
_interval$1$ = -40					; size = 4
_EnemyPos$8 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_a0$ = 8						; size = 4
?fireHunter@@YAXPAUaction@@@Z PROC			; fireHunter, COMDAT

; 2693 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00015	89 75 bc	 mov	 DWORD PTR _a0$GSCopy$1$[ebp], esi

; 2694 : 	ACTION *a1, *a2;
; 2695 : 	int i = 0;
; 2696 : 	int j = 0;
; 2697 : 	int d0, d1;
; 2698 : 
; 2699 : 	a1 = ATR_BODY_WORK(0, a0);		//Êïå‰∫∫ÁöÑ‰ΩçÂùÄ

  00018	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0001b	89 4d c8	 mov	 DWORD PTR $T4[ebp], ecx

; 2700 : 
; 2701 : 	switch (ATR_VCT_NO(a0))

  0001e	8a 01		 mov	 al, BYTE PTR [ecx]
  00020	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  00023	0f b6 d0	 movzx	 edx, al
  00026	89 5d c0	 mov	 DWORD PTR _a1$1$[ebp], ebx
  00029	83 fa 08	 cmp	 edx, 8
  0002c	0f 87 0d 0c 00
	00		 ja	 $LN119@fireHunter
  00032	57		 push	 edi
  00033	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN154@fireHunter[edx*4]
$LN27@fireHunter:

; 2702 : 	{
; 2703 : 	case 0:								//ÂèëÂ∞ÑÁÅ´ÁÑ∞
; 2704 : 		if (bFireInit)

  0003a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bFireInit@@3HA, 0 ; bFireInit
  00041	0f 84 c7 02 00
	00		 je	 $LN28@fireHunter

; 2705 : 		{
; 2706 : #ifdef _FIREHUNTER_SKILL
; 2707 : 			int EnemyPos[4][2] = {{403+DISPLACEMENT_X, 422+DISPLACEMENT_Y}, {223 +DISPLACEMENT_X, 388+DISPLACEMENT_Y},{7  , 198},{19  , 318},};

  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DISPLACEMENT_X@@3HA ; DISPLACEMENT_X

; 2708 : #else
; 2709 : 			int EnemyPos[4][2] = {{403 , 422}, {223 , 388},{7  , 198},{19  , 318},};
; 2710 : #endif
; 2711 : 			int refPos, difPosH, difPosV;
; 2712 : 			int interval = 0;
; 2713 : 			int difPos_v = 0;   //ÁÅ´Á∫øÁåéÊùÄ‰ΩçÂùÄ‰øÆÊ≠£

  0004d	33 ff		 xor	 edi, edi
  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00055	bb 08 00 00 00	 mov	 ebx, OFFSET ?p_missile@@3PAPAUaction@@A+8
  0005a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000013e00000013000000c600000007
  00061	0f 11 45 ec	 movups	 XMMWORD PTR _EnemyPos$8[ebp+16], xmm0
  00065	8d 82 93 01 00
	00		 lea	 eax, DWORD PTR [edx+403]

; 2714 : 			int difPos_h = 0;   //ÁÅ´Á∫øÁåéÊùÄ‰ΩçÂùÄ‰øÆÊ≠£
; 2715 : 			int j = 1;

  0006b	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _j$1$[ebp], 1
  00072	89 45 dc	 mov	 DWORD PTR _EnemyPos$8[ebp], eax
  00075	8d 81 a6 01 00
	00		 lea	 eax, DWORD PTR [ecx+422]
  0007b	89 45 e0	 mov	 DWORD PTR _EnemyPos$8[ebp+4], eax
  0007e	8d 82 df 00 00
	00		 lea	 eax, DWORD PTR [edx+223]
  00084	89 45 e4	 mov	 DWORD PTR _EnemyPos$8[ebp+8], eax
  00087	8d 81 84 01 00
	00		 lea	 eax, DWORD PTR [ecx+388]

; 2716 : 
; 2717 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0);

  0008d	8b 4d c8	 mov	 ecx, DWORD PTR $T4[ebp]
  00090	89 45 e8	 mov	 DWORD PTR _EnemyPos$8[ebp+12], eax
  00093	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00096	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 2718 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0);

  0009c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0009f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000a2	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  000a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL6@fireHunter:

; 2719 : 			for (i = 2; i < 8 ; i++)
; 2720 : 			{
; 2721 : 				p_missile[i] = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  000b0	68 60 02 00 00	 push	 608			; 00000260H
  000b5	6a 65		 push	 101			; 00000065H
  000b7	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  000bc	89 03		 mov	 DWORD PTR [ebx], eax
  000be	83 c4 08	 add	 esp, 8

; 2722 : 				ATR_INT_WORK2(p_missile[i]) = ATR_H_POS(a0);

  000c1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000c7	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 2723 : 				ATR_INT_WORK3(p_missile[i]) = ATR_V_POS(a0);

  000cd	8b 03		 mov	 eax, DWORD PTR [ebx]
  000cf	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000d2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000d5	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax

; 2724 : 				ATR_CHR_NO(p_missile[i]) = 101734;	 //ÂõæÂè∑

  000db	8b 03		 mov	 eax, DWORD PTR [ebx]
  000dd	c7 80 44 01 00
	00 66 8d 01 00	 mov	 DWORD PTR [eax+324], 101734 ; 00018d66H

; 2725 : 				ATR_CHR_ANG(p_missile[i]) = ATR_CHR_ANG(a0);

  000e7	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000e9	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  000ef	89 81 54 01 00
	00		 mov	 DWORD PTR [ecx+340], eax

; 2726 : 				ATR_CRS(p_missile[i]) = ATR_CRS(a0);

  000f5	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000f7	8b 86 38 01 00
	00		 mov	 eax, DWORD PTR [esi+312]
  000fd	89 81 38 01 00
	00		 mov	 DWORD PTR [ecx+312], eax

; 2727 : 				ATR_SPD(p_missile[i]) = 60;

  00103	8b 03		 mov	 eax, DWORD PTR [ebx]
  00105	83 c3 04	 add	 ebx, 4
  00108	c7 80 34 01 00
	00 3c 00 00 00	 mov	 DWORD PTR [eax+308], 60	; 0000003cH
  00112	81 fb 20 00 00
	00		 cmp	 ebx, OFFSET ?p_missile@@3PAPAUaction@@A+32
  00118	7c 96		 jl	 SHORT $LL6@fireHunter

; 2728 : 			}
; 2729 : 			if (iBeAttNum < 5)

  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iBeAttNum@@3HA ; iBeAttNum
  0011f	83 f8 05	 cmp	 eax, 5
  00122	7d 0a		 jge	 SHORT $LN29@fireHunter

; 2730 : 			{
; 2731 : 				refPos = 0;

  00124	33 d2		 xor	 edx, edx

; 2732 : 				difPosH = 32;

  00126	8d 42 20	 lea	 eax, DWORD PTR [edx+32]

; 2733 : 				difPosV = 24;

  00129	8d 4a 18	 lea	 ecx, DWORD PTR [edx+24]

; 2734 : 			}

  0012c	eb 3f		 jmp	 SHORT $LN159@fireHunter
$LN29@fireHunter:

; 2735 : 			else if (iBeAttNum < 10)

  0012e	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00131	7d 0d		 jge	 SHORT $LN31@fireHunter

; 2736 : 			{
; 2737 : 				refPos = 1;

  00133	ba 01 00 00 00	 mov	 edx, 1

; 2738 : 				difPosH = 64;

  00138	8d 42 3f	 lea	 eax, DWORD PTR [edx+63]

; 2739 : 				difPosV = 48;

  0013b	8d 4a 2f	 lea	 ecx, DWORD PTR [edx+47]

; 2740 : 			}

  0013e	eb 2d		 jmp	 SHORT $LN159@fireHunter
$LN31@fireHunter:

; 2741 : 			else if (iBeAttNum < 15)

  00140	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00143	7d 0d		 jge	 SHORT $LN33@fireHunter

; 2742 : 			{
; 2743 : 				refPos = 2;

  00145	ba 02 00 00 00	 mov	 edx, 2

; 2744 : 				difPosH = 32;

  0014a	8d 42 1e	 lea	 eax, DWORD PTR [edx+30]

; 2745 : 				difPosV = 24;

  0014d	8d 4a 16	 lea	 ecx, DWORD PTR [edx+22]

; 2746 : 			}

  00150	eb 1b		 jmp	 SHORT $LN159@fireHunter
$LN33@fireHunter:

; 2747 : 			else if (iBeAttNum < 20)

  00152	83 f8 14	 cmp	 eax, 20			; 00000014H
  00155	7d 0d		 jge	 SHORT $LN156@fireHunter

; 2748 : 			{
; 2749 : 				refPos = 3;

  00157	ba 03 00 00 00	 mov	 edx, 3

; 2750 : 				difPosH = 64;

  0015c	8d 42 3d	 lea	 eax, DWORD PTR [edx+61]

; 2751 : 				difPosV = 48;

  0015f	8d 4a 2d	 lea	 ecx, DWORD PTR [edx+45]
  00162	eb 09		 jmp	 SHORT $LN159@fireHunter
$LN156@fireHunter:

; 2747 : 			else if (iBeAttNum < 20)

  00164	8b 55 c4	 mov	 edx, DWORD PTR _refPos$3[ebp]
  00167	8b 45 c4	 mov	 eax, DWORD PTR _difPosH$2[ebp]
  0016a	8b 4d c4	 mov	 ecx, DWORD PTR _difPosV$1[ebp]
$LN159@fireHunter:

; 2752 : 			}
; 2753 : 			for (i = 1; i < 9; i++)

  0016d	8b 74 d5 dc	 mov	 esi, DWORD PTR _EnemyPos$8[ebp+edx*8]
  00171	bf 20 00 00 00	 mov	 edi, OFFSET ?p_missile@@3PAPAUaction@@A+32
  00176	03 f0		 add	 esi, eax
  00178	89 45 d0	 mov	 DWORD PTR _difPosH$1$[ebp], eax
  0017b	8b 44 d5 e0	 mov	 eax, DWORD PTR _EnemyPos$8[ebp+edx*8+4]
  0017f	2b c1		 sub	 eax, ecx
  00181	89 4d d4	 mov	 DWORD PTR _difPosV$1$[ebp], ecx
  00184	89 45 d8	 mov	 DWORD PTR tv3417[ebp], eax
  00187	33 db		 xor	 ebx, ebx
  00189	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@fireHunter:

; 2754 : 			{
; 2755 : 				p_missile[i + 7] = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  00190	68 60 02 00 00	 push	 608			; 00000260H
  00195	6a 65		 push	 101			; 00000065H
  00197	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction

; 2756 : 				ATR_H_POS(p_missile[i + 7]) = EnemyPos[refPos][0] + difPosH * i;
; 2757 : 				ATR_V_POS(p_missile[i + 7]) = EnemyPos[refPos][1] - difPosV * i;

  0019c	8b 4d d8	 mov	 ecx, DWORD PTR tv3417[ebp]
  0019f	83 c4 08	 add	 esp, 8
  001a2	89 07		 mov	 DWORD PTR [edi], eax
  001a4	89 70 18	 mov	 DWORD PTR [eax+24], esi
  001a7	8b 07		 mov	 eax, DWORD PTR [edi]
  001a9	03 75 d0	 add	 esi, DWORD PTR _difPosH$1$[ebp]
  001ac	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 2758 : 				ATR_CHR_NO(p_missile[i + 7]) = 101735;	 //ÂõæÂè∑

  001af	8b 07		 mov	 eax, DWORD PTR [edi]
  001b1	83 c7 04	 add	 edi, 4
  001b4	2b 4d d4	 sub	 ecx, DWORD PTR _difPosV$1$[ebp]
  001b7	89 4d d8	 mov	 DWORD PTR tv3417[ebp], ecx
  001ba	c7 80 44 01 00
	00 67 8d 01 00	 mov	 DWORD PTR [eax+324], 101735 ; 00018d67H
  001c4	81 ff 40 00 00
	00		 cmp	 edi, OFFSET ?p_missile@@3PAPAUaction@@A+64
  001ca	7c c4		 jl	 SHORT $LL9@fireHunter

; 2759 : 			}
; 2760 : 			ATR_STIMER(a0) = 80;

  001cc	8b 75 bc	 mov	 esi, DWORD PTR _a0$GSCopy$1$[ebp]

; 2761 : 
; 2762 : 			if (iBeAttNum == 18 || iBeAttNum == 11 || iBeAttNum == 19)

  001cf	8b fb		 mov	 edi, ebx
  001d1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001d4	c6 40 01 50	 mov	 BYTE PTR [eax+1], 80	; 00000050H
  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iBeAttNum@@3HA ; iBeAttNum
  001dd	83 f8 12	 cmp	 eax, 18			; 00000012H
  001e0	74 1c		 je	 SHORT $LN38@fireHunter
  001e2	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  001e5	74 17		 je	 SHORT $LN38@fireHunter
  001e7	83 f8 13	 cmp	 eax, 19			; 00000013H
  001ea	74 12		 je	 SHORT $LN38@fireHunter

; 2764 : 			else			
; 2765 : 				interval = ATR_GROUP_FLG(a0) / 6;

  001ec	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ef	0f b6 48 5e	 movzx	 ecx, BYTE PTR [eax+94]
  001f3	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  001f8	f7 e1		 mul	 ecx
  001fa	8b ca		 mov	 ecx, edx
  001fc	eb 14		 jmp	 SHORT $LN160@fireHunter
$LN38@fireHunter:

; 2763 : 				interval = ATR_GROUP_FLG(a0) / 7;

  001fe	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00201	0f b6 48 5e	 movzx	 ecx, BYTE PTR [eax+94]
  00205	b8 25 49 92 24	 mov	 eax, 613566757		; 24924925H
  0020a	f7 e1		 mul	 ecx
  0020c	2b ca		 sub	 ecx, edx
  0020e	d1 e9		 shr	 ecx, 1
  00210	03 ca		 add	 ecx, edx
$LN160@fireHunter:

; 2766 : 			for (i = 0; i < ATR_GROUP_FLG(a0); i++)

  00212	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00215	c1 e9 02	 shr	 ecx, 2
  00218	89 4d d8	 mov	 DWORD PTR _interval$1$[ebp], ecx
  0021b	89 5d d0	 mov	 DWORD PTR _i$1$[ebp], ebx
  0021e	38 58 5e	 cmp	 BYTE PTR [eax+94], bl
  00221	0f 86 d1 00 00
	00		 jbe	 $LN11@fireHunter
  00227	89 4d d4	 mov	 DWORD PTR tv3416[ebp], ecx
  0022a	66 0f 1f 44 00
	00		 npad	 6
$LL12@fireHunter:

; 2767 : 			{
; 2768 : 				d0 = ATR_H_POS(a1);

  00230	8b 4d c0	 mov	 ecx, DWORD PTR _a1$1$[ebp]
  00233	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00236	89 45 c8	 mov	 DWORD PTR _d0$[ebp], eax

; 2769 : 				d1 = ATR_V_POS(a1);

  00239	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0023c	89 45 c4	 mov	 DWORD PTR _d1$[ebp], eax

; 2770 : 				radar(a0, &d0, &d1);	//Èõ∑Ëææ(ËÆ°ÁÆóË∑ØÁ∫ø)

  0023f	8d 45 c4	 lea	 eax, DWORD PTR _d1$[ebp]
  00242	50		 push	 eax
  00243	8d 45 c8	 lea	 eax, DWORD PTR _d0$[ebp]
  00246	50		 push	 eax
  00247	56		 push	 esi
  00248	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 2771 : 				ATR_CRS(a0) = d0;		//Âä®ÁîªË∑ØÁ∫ø

  0024d	8b 45 c8	 mov	 eax, DWORD PTR _d0$[ebp]

; 2772 : 				gemini(a0);

  00250	56		 push	 esi
  00251	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  00257	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2773 : 				if (i == interval * j)

  0025c	8b 55 d0	 mov	 edx, DWORD PTR _i$1$[ebp]
  0025f	83 c4 10	 add	 esp, 16			; 00000010H
  00262	3b 55 d4	 cmp	 edx, DWORD PTR tv3416[ebp]
  00265	75 7e		 jne	 SHORT $LN10@fireHunter

; 2774 : 				{
; 2775 : 					switch (iBeAttNum)		//ÁÅ´Á∫øÁåéÊùÄ‰ΩçÂùÄ‰øÆÊ≠£

  00267	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iBeAttNum@@3HA ; iBeAttNum
  0026d	8d 41 f6	 lea	 eax, DWORD PTR [ecx-10]
  00270	83 f8 09	 cmp	 eax, 9
  00273	77 2f		 ja	 SHORT $LN13@fireHunter
  00275	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN155@fireHunter[eax*4]
$LN40@fireHunter:

; 2776 : 					{
; 2777 : 					case 10:
; 2778 : 					case 12:
; 2779 : 						difPos_v += 7;  //ÈïøÂ∫¶

  0027c	83 c7 07	 add	 edi, 7

; 2780 : 						difPos_h += 2;	//ËßíÂ∫¶

  0027f	83 c3 02	 add	 ebx, 2

; 2781 : 						break;

  00282	eb 20		 jmp	 SHORT $LN13@fireHunter
$LN41@fireHunter:

; 2782 : 					case 14:
; 2783 : 						difPos_v += 10;

  00284	83 c7 0a	 add	 edi, 10			; 0000000aH

; 2784 : 						difPos_h += 2;

  00287	83 c3 02	 add	 ebx, 2

; 2785 : 						break;

  0028a	eb 18		 jmp	 SHORT $LN13@fireHunter
$LN42@fireHunter:

; 2786 : 					case 15:
; 2787 : 						difPos_v += 4;

  0028c	83 c7 04	 add	 edi, 4

; 2788 : 						break;
; 2789 : 					case 16:
; 2790 : 						difPos_v += 5;
; 2791 : 						difPos_h -= 5;
; 2792 : 						break;

  0028f	eb 13		 jmp	 SHORT $LN13@fireHunter
$LN44@fireHunter:

; 2793 : 					case 17:
; 2794 : 						difPos_v += 3;

  00291	83 c7 03	 add	 edi, 3

; 2795 : 						break;
; 2796 : 					case 18:
; 2797 : 						difPos_v += 5;
; 2798 : 						difPos_h -= 5;
; 2799 : 						break;

  00294	eb 0e		 jmp	 SHORT $LN13@fireHunter
$LN46@fireHunter:

; 2800 : 					case 19:
; 2801 : 						difPos_v += 17;

  00296	83 c7 11	 add	 edi, 17			; 00000011H

; 2802 : 						difPos_h -= 2;

  00299	83 eb 02	 sub	 ebx, 2

; 2803 : 						break;
; 2804 : 					case 11:
; 2805 : 						difPos_v += 5;
; 2806 : 						difPos_h -= 5;
; 2807 : 						break;
; 2808 : 						/*			case 8:
; 2809 : 										difPos_v += 7;
; 2810 : 										difPos_h -= 5;
; 2811 : 										break;
; 2812 : 										case 5:
; 2813 : 										difPos_v +=7;
; 2814 : 										difPos_h -=10;
; 2815 : 										break;*/
; 2816 : 					}
; 2817 : 					if (iBeAttNum < 10)

  0029c	eb 06		 jmp	 SHORT $LN13@fireHunter
$LN47@fireHunter:
  0029e	83 c7 05	 add	 edi, 5
  002a1	83 eb 05	 sub	 ebx, 5
$LN13@fireHunter:
  002a4	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  002a7	7d 03		 jge	 SHORT $LN48@fireHunter

; 2818 : 					{
; 2819 : 						//difPos_h -= 10;//ËßíÂ∫¶
; 2820 : 						difPos_v += 10;  //ÈïøÂ∫¶

  002a9	83 c7 0a	 add	 edi, 10			; 0000000aH
$LN48@fireHunter:

; 2821 : 					}
; 2822 : 					ATR_V_POS(p_missile[j+1]) = ATR_V_POS(a0) - difPos_v;

  002ac	8b 45 cc	 mov	 eax, DWORD PTR _j$1$[ebp]
  002af	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  002b2	2b cf		 sub	 ecx, edi
  002b4	8b 04 85 04 00
	00 00		 mov	 eax, DWORD PTR ?p_missile@@3PAPAUaction@@A[eax*4+4]
  002bb	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 2823 : 					ATR_H_POS(p_missile[j+1]) = ATR_H_POS(a0) + difPos_h;

  002be	8b 45 cc	 mov	 eax, DWORD PTR _j$1$[ebp]
  002c1	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  002c4	03 cb		 add	 ecx, ebx
  002c6	8b 04 85 04 00
	00 00		 mov	 eax, DWORD PTR ?p_missile@@3PAPAUaction@@A[eax*4+4]
  002cd	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2824 : 					if (j < 6)

  002d0	8b 45 cc	 mov	 eax, DWORD PTR _j$1$[ebp]
  002d3	83 f8 06	 cmp	 eax, 6
  002d6	7d 0d		 jge	 SHORT $LN10@fireHunter

; 2825 : 						j++;

  002d8	40		 inc	 eax
  002d9	89 45 cc	 mov	 DWORD PTR _j$1$[ebp], eax
  002dc	8b 45 d4	 mov	 eax, DWORD PTR tv3416[ebp]
  002df	03 45 d8	 add	 eax, DWORD PTR _interval$1$[ebp]
  002e2	89 45 d4	 mov	 DWORD PTR tv3416[ebp], eax
$LN10@fireHunter:

; 2766 : 			for (i = 0; i < ATR_GROUP_FLG(a0); i++)

  002e5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002e8	42		 inc	 edx
  002e9	89 55 d0	 mov	 DWORD PTR _i$1$[ebp], edx
  002ec	0f b6 40 5e	 movzx	 eax, BYTE PTR [eax+94]
  002f0	3b d0		 cmp	 edx, eax
  002f2	0f 8c 38 ff ff
	ff		 jl	 $LL12@fireHunter
$LN11@fireHunter:

; 2826 : 				}
; 2827 : 			}
; 2828 : 			ATR_V_POS(a0) -= difPos_v;

  002f8	29 7e 1c	 sub	 DWORD PTR [esi+28], edi

; 2829 : 			ATR_H_POS(a0) += difPos_h;

  002fb	01 5e 18	 add	 DWORD PTR [esi+24], ebx
  002fe	8b 5d c0	 mov	 ebx, DWORD PTR _a1$1$[ebp]

; 2830 : 			bFireInit = FALSE;

  00301	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bFireInit@@3HA, 0 ; bFireInit
  0030b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
$LN28@fireHunter:

; 2831 : 		}
; 2832 : 		//ÂáÜÂ§áÂëΩ‰∏≠
; 2833 : 		if (!FireSkillEnd)

  0030e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?FireSkillEnd@@3HA, 0 ; FireSkillEnd
  00315	0f 85 44 04 00
	00		 jne	 $LN50@fireHunter

; 2834 : 		{
; 2835 : #ifdef _PETSKILL_ACUPUNCTURE
; 2836 : 			/////////////////////////////
; 2837 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 2838 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP | ATT_ACUPUNCTURE

  0031b	f7 41 60 00 1c
	00 4a		 test	 DWORD PTR [ecx+96], 1241521152 ; 4a001c00H
  00322	74 09		 je	 SHORT $LN52@fireHunter

; 2839 : #ifdef _PET_ITEM
; 2840 : 				| ATT_ATTACKBACK
; 2841 : #endif
; 2842 : 				))
; 2843 : #else
; 2844 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_ACUPUNCTURE
; 2845 : #ifdef _PET_ITEM
; 2846 : 				| ATT_ATTACKBACK
; 2847 : #endif
; 2848 : 				))
; 2849 : #endif
; 2850 : 				/////////////////////////////
; 2851 : #else
; 2852 : 			/////////////////////////////
; 2853 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 2854 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP))
; 2855 : #else
; 2856 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA))
; 2857 : #endif
; 2858 : 				/////////////////////////////
; 2859 : #endif
; 2860 : 				set_guard_mark(a0);		//Èò≤Âæ°Âíí

  00324	56		 push	 esi
  00325	e8 00 00 00 00	 call	 ?set_guard_mark@@YAXPAUaction@@@Z ; set_guard_mark
  0032a	83 c4 04	 add	 esp, 4
$LN52@fireHunter:

; 2861 : 			ATR_COMBO(a1) = 0;   //ÁªÑÈòü

  0032d	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00330	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0

; 2862 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)  //Èó™ÈÅø

  00337	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0033a	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  0033d	a8 20		 test	 al, 32			; 00000020H
  0033f	0f 84 d2 00 00
	00		 je	 $LN53@fireHunter

; 2863 : 			{
; 2864 : 				for (i = 0; i < ATR_BODY_CNT(a0); i++) //Â§ÑÁêÜÂÖ®ÈÉ®ÈòüÂèã

  00345	33 ff		 xor	 edi, edi
  00347	80 79 54 00	 cmp	 BYTE PTR [ecx+84], 0
  0034b	76 74		 jbe	 SHORT $LN16@fireHunter
  0034d	8b d1		 mov	 edx, ecx
  0034f	bb b8 00 00 00	 mov	 ebx, 184		; 000000b8H
  00354	89 55 d8	 mov	 DWORD PTR $T6[ebp], edx
  00357	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL17@fireHunter:

; 2865 : 				{
; 2866 : 					if ((i + 2) != tarpos)

  00360	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  00363	8b ca		 mov	 ecx, edx
  00365	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?tarpos@@3HA ; tarpos
  0036b	74 40		 je	 SHORT $LN15@fireHunter

; 2867 : 					{
; 2868 : 						a2 = ATR_BODY_WORK(i + 2, a0);

  0036d	8b 94 1a 54 ff
	ff ff		 mov	 edx, DWORD PTR [edx+ebx-172]

; 2869 : 						ATR_DAMAGE(a2) = ATR_ATTACK_POW(i + 2, a0);

  00374	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  00377	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0037a	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  0037d	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2870 : 						j = ATR_DAMAGE(a2);
; 2871 : 						ATR_PET_DAMAGE(a2) = ATR_ATTACK_PET_POW(i + 2, a0);

  00380	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00383	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00386	8b 84 03 24 01
	00 00		 mov	 eax, DWORD PTR [ebx+eax+292]
  0038d	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 2872 : 						ATR_VCT_NO(a2) = 10;		//ÈÄÅÂá∫‰º§ÂÆ≥ËÆØÊÅØ

  00393	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00396	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH

; 2873 : 						ATR_STIMER(a2) = 0;

  00399	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0039c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 2874 : 						ATR_FIRST_FLG(a2) = 0;		

  003a0	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003a3	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  003aa	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
$LN15@fireHunter:

; 2863 : 			{
; 2864 : 				for (i = 0; i < ATR_BODY_CNT(a0); i++) //Â§ÑÁêÜÂÖ®ÈÉ®ÈòüÂèã

  003ad	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  003b1	47		 inc	 edi
  003b2	83 c3 04	 add	 ebx, 4
  003b5	8b d1		 mov	 edx, ecx
  003b7	89 55 d8	 mov	 DWORD PTR $T6[ebp], edx
  003ba	3b f8		 cmp	 edi, eax
  003bc	7c a2		 jl	 SHORT $LL17@fireHunter
  003be	8b 5d c0	 mov	 ebx, DWORD PTR _a1$1$[ebp]
$LN16@fireHunter:

; 2875 : 					}
; 2876 : 				}
; 2877 : 				ATR_HIT_STOP(a0) = 32;				//ÊîªÂáªÂÅúÊ≠¢

  003c1	c6 41 5c 20	 mov	 BYTE PTR [ecx+92], 32	; 00000020H

; 2878 : 				ATR_VCT_NO(a0) = 1;					//ÂÅúÊ≠¢

  003c5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2879 : 				gemini(a0);

  003c8	56		 push	 esi
  003c9	c6 00 01	 mov	 BYTE PTR [eax], 1
  003cc	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2880 : 				ATR_VCT_NO(a1) = 16;		//Èó™ÈÅøÂä®‰Ωú

  003d1	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  003d4	83 c4 04	 add	 esp, 4
  003d7	c6 00 10	 mov	 BYTE PTR [eax], 16	; 00000010H

; 2881 : 				ATR_CRS(a1) = ATR_CRS(a0);		//Ë∑ØÂæÑ

  003da	8b 86 38 01 00
	00		 mov	 eax, DWORD PTR [esi+312]

; 2882 : 				ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);

  003e0	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  003e3	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  003e9	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]
  003ef	5f		 pop	 edi
  003f0	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 2883 : 				ATR_STIMER(a1) = 0;

  003f6	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  003f9	5e		 pop	 esi
  003fa	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 2884 : 				ATR_FIRST_FLG(a1) = 0;		

  003fe	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  00401	5b		 pop	 ebx
  00402	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  00409	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0040c	33 cd		 xor	 ecx, ebp
  0040e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00413	8b e5		 mov	 esp, ebp
  00415	5d		 pop	 ebp
  00416	c3		 ret	 0
$LN53@fireHunter:

; 2885 : 				break;
; 2886 : 			}
; 2887 : 			if (!((ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) | (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)))

  00417	a9 00 18 00 00	 test	 eax, 6144		; 00001800H
  0041c	0f 85 bd 00 00
	00		 jne	 $LN56@fireHunter

; 2888 : 			{
; 2889 : 				if ((ATR_ATTACK_POW(0, a0) == 0) && (ATR_ATTACK_PET_POW(0, a0) == 0))		//????

  00422	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00429	0f 85 b0 00 00
	00		 jne	 $LN56@fireHunter
  0042f	83 b9 d4 01 00
	00 00		 cmp	 DWORD PTR [ecx+468], 0
  00436	0f 85 a3 00 00
	00		 jne	 $LN56@fireHunter

; 2890 : 				{
; 2891 : 					//‰º§ÂÆ≥
; 2892 : 					set_damage_num(a1, 0, -64);

  0043c	6a c0		 push	 -64			; ffffffc0H
  0043e	6a 00		 push	 0
  00440	53		 push	 ebx
  00441	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 2893 : 					ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//ÊîªÂáªÂÅúÊ≠¢

  00446	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00449	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2894 : 					ATR_VCT_NO(a0) = 1;		//ÊîªÂáªÂÅúÊ≠¢
; 2895 : 					for (i = 0; i < ATR_BODY_CNT(a0); i++) //Â§ÑÁêÜÂÖ®ÈÉ®ÈòüÂèã

  0044c	33 ff		 xor	 edi, edi
  0044e	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8
  00452	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00455	c6 00 01	 mov	 BYTE PTR [eax], 1
  00458	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0045b	89 4d d8	 mov	 DWORD PTR $T7[ebp], ecx
  0045e	80 79 54 00	 cmp	 BYTE PTR [ecx+84], 0
  00462	0f 86 d6 07 00
	00		 jbe	 $LN158@fireHunter
  00468	bb b8 00 00 00	 mov	 ebx, 184		; 000000b8H
  0046d	0f 1f 00	 npad	 3
$LL20@fireHunter:

; 2896 : 					{
; 2897 : 						if ((i + 2) != tarpos)

  00470	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  00473	8b d1		 mov	 edx, ecx
  00475	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?tarpos@@3HA ; tarpos
  0047b	74 40		 je	 SHORT $LN18@fireHunter

; 2898 : 						{
; 2899 : 							a2 = ATR_BODY_WORK(i + 2, a0);

  0047d	8b 94 19 54 ff
	ff ff		 mov	 edx, DWORD PTR [ecx+ebx-172]

; 2900 : 							ATR_DAMAGE(a2) = ATR_ATTACK_POW(i + 2, a0);

  00484	8b 45 d8	 mov	 eax, DWORD PTR $T7[ebp]
  00487	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0048a	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  0048d	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2901 : 							j = ATR_DAMAGE(a2);
; 2902 : 							ATR_PET_DAMAGE(a2) = ATR_ATTACK_PET_POW(i + 2, a0);

  00490	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00493	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00496	8b 84 03 24 01
	00 00		 mov	 eax, DWORD PTR [ebx+eax+292]
  0049d	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 2903 : 							ATR_VCT_NO(a2) = 10;		//ÈÄÅÂá∫‰º§ÂÆ≥ËÆØÊÅØ

  004a3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  004a6	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH

; 2904 : 							ATR_STIMER(a2) = 0;

  004a9	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  004ac	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 2905 : 							ATR_FIRST_FLG(a2) = 0;		

  004b0	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  004b3	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  004ba	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
$LN18@fireHunter:

; 2894 : 					ATR_VCT_NO(a0) = 1;		//ÊîªÂáªÂÅúÊ≠¢
; 2895 : 					for (i = 0; i < ATR_BODY_CNT(a0); i++) //Â§ÑÁêÜÂÖ®ÈÉ®ÈòüÂèã

  004bd	0f b6 42 54	 movzx	 eax, BYTE PTR [edx+84]
  004c1	47		 inc	 edi
  004c2	83 c3 04	 add	 ebx, 4
  004c5	8b ca		 mov	 ecx, edx
  004c7	89 4d d8	 mov	 DWORD PTR $T7[ebp], ecx
  004ca	3b f8		 cmp	 edi, eax
  004cc	7c a2		 jl	 SHORT $LL20@fireHunter

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  004ce	5f		 pop	 edi
  004cf	5e		 pop	 esi
  004d0	5b		 pop	 ebx
  004d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d4	33 cd		 xor	 ecx, ebp
  004d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004db	8b e5		 mov	 esp, ebp
  004dd	5d		 pop	 ebp
  004de	c3		 ret	 0
$LN56@fireHunter:

; 2906 : 						}
; 2907 : 					}
; 2908 : 					break;
; 2909 : 				}
; 2910 : 			}
; 2911 : 			//ÂéãÁ¢é
; 2912 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_CRUSH)

  004df	a9 00 20 00 00	 test	 eax, 8192		; 00002000H
  004e4	74 0d		 je	 SHORT $LN58@fireHunter

; 2913 : 				//ÂéãÁ¢é
; 2914 : 				set_damage_num(a1, 19, -112);

  004e6	6a 90		 push	 -112			; ffffff90H
  004e8	6a 13		 push	 19			; 00000013H
  004ea	53		 push	 ebx
  004eb	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  004f0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN58@fireHunter:

; 2915 : 			//ËÆæÂÆöKO
; 2916 : 			ATR_AKO_FLG(a1) = 0;

  004f3	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  004f6	c6 80 21 01 00
	00 00		 mov	 BYTE PTR [eax+289], 0

; 2917 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO1)		//KO1

  004fd	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00500	f6 40 60 40	 test	 BYTE PTR [eax+96], 64	; 00000040H
  00504	74 0d		 je	 SHORT $LN59@fireHunter

; 2918 : 				ATR_AKO_FLG(a1) = 1;

  00506	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00509	c6 80 21 01 00
	00 01		 mov	 BYTE PTR [eax+289], 1
  00510	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN59@fireHunter:

; 2919 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO2)		//KO2

  00513	f6 40 60 80	 test	 BYTE PTR [eax+96], 128	; 00000080H
  00517	74 0d		 je	 SHORT $LN60@fireHunter

; 2920 : 				ATR_AKO_FLG(a1) = 2;

  00519	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0051c	c6 80 21 01 00
	00 02		 mov	 BYTE PTR [eax+289], 2
  00523	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN60@fireHunter:

; 2921 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DEATH)		//Ê≠ª‰∫°

  00526	f6 40 60 01	 test	 BYTE PTR [eax+96], 1
  0052a	74 07		 je	 SHORT $LN153@fireHunter

; 2922 : 				ATR_LIFE(a1) = 0;		//ËÆæÂÆöÊ≠ª‰∫°

  0052c	c7 43 78 00 00
	00 00		 mov	 DWORD PTR [ebx+120], 0
$LN153@fireHunter:

; 2923 : 			ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//ËÆæÂÆö‰º§ÂÆ≥ËßíÂ∫¶

  00533	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00536	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]
  0053c	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 2924 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)		//Â¶ÇÊûúÊòØÂê∏Êî∂

  00542	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00545	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00548	f7 c1 00 08 00
	00		 test	 ecx, 2048		; 00000800H
  0054e	74 7a		 je	 SHORT $LN62@fireHunter

; 2925 : 			{
; 2926 : 				if (!ATR_COMBO(a1))		//ÁªÑÈòü

  00550	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00553	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  0055a	0f 85 91 00 00
	00		 jne	 $LN68@fireHunter

; 2927 : 				{
; 2928 : 					//??Óñ±Óù∏Óçï
; 2929 : 					ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  00560	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  00566	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2930 : 					ATR_LIFE(a1) += ATR_DAMAGE(a1);

  00569	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]

; 2931 : 					if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???

  0056c	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [ebx+128]

; 2932 : 						ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???
; 2933 : 					ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);
; 2934 : 					ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);
; 2935 : 					if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))		//?Óï´Óóó???
; 2936 : 						ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);		//?Óï´???
; 2937 : 					set_damage_num(a1, 14, -64);

  00572	6a c0		 push	 -64			; ffffffc0H
  00574	6a 0e		 push	 14			; 0000000eH
  00576	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00579	01 43 78	 add	 DWORD PTR [ebx+120], eax
  0057c	8b 43 78	 mov	 eax, DWORD PTR [ebx+120]
  0057f	3b c1		 cmp	 eax, ecx
  00581	53		 push	 ebx
  00582	0f 4f c1	 cmovg	 eax, ecx
  00585	89 43 78	 mov	 DWORD PTR [ebx+120], eax
  00588	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0058b	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  00591	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax
  00597	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0059a	8b 8b b4 01 00
	00		 mov	 ecx, DWORD PTR [ebx+436]
  005a0	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  005a6	01 83 b0 01 00
	00		 add	 DWORD PTR [ebx+432], eax
  005ac	8b 83 b0 01 00
	00		 mov	 eax, DWORD PTR [ebx+432]
  005b2	3b c1		 cmp	 eax, ecx
  005b4	0f 4f c1	 cmovg	 eax, ecx
  005b7	89 83 b0 01 00
	00		 mov	 DWORD PTR [ebx+432], eax
  005bd	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 2938 : 					ATR_ATTACK_POW(0, a0) = 0;		

  005c2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  005c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2939 : 					ATR_ATTACK_PET_POW(0, a0) = 0;		
; 2940 : 				}
; 2941 : 			}

  005c8	eb 08		 jmp	 SHORT $LN162@fireHunter
$LN62@fireHunter:

; 2942 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA)			//????????

  005ca	f7 c1 00 10 00
	00		 test	 ecx, 4096		; 00001000H
  005d0	74 19		 je	 SHORT $LN67@fireHunter
$LN162@fireHunter:

; 2949 : 			/*			//‰ºöÂøÉ‰∏ÄÂáª
; 2950 : 						if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY){
; 2951 : 						ATR_KAISHIN(a1) = 1;		//‰ºöÂøÉ‰∏ÄÂáª
; 2952 : 						} else {
; 2953 : 						ATR_KAISHIN(a1) = 0;		//ÈÄöÂ∏∏ÊîªÂáª
; 2954 : 						}*/
; 2955 : 			ATR_KAISHIN(a1) = 0;		//ÈÄöÂ∏∏ÊîªÂáª

  005d2	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0
  005dc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  005df	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  005e9	eb 06		 jmp	 SHORT $LN68@fireHunter
$LN67@fireHunter:

; 2943 : 			{
; 2944 : 				ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?
; 2945 : 				ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?
; 2946 : 			}
; 2947 : 			else
; 2948 : 				ATR_VCT_NO(a1) = 10;		//ÈÄÅÂá∫‰º§ÂÆ≥ËÆØÊÅØ

  005eb	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  005ee	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH
$LN68@fireHunter:

; 2949 : 			/*			//‰ºöÂøÉ‰∏ÄÂáª
; 2950 : 						if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY){
; 2951 : 						ATR_KAISHIN(a1) = 1;		//‰ºöÂøÉ‰∏ÄÂáª
; 2952 : 						} else {
; 2953 : 						ATR_KAISHIN(a1) = 0;		//ÈÄöÂ∏∏ÊîªÂáª
; 2954 : 						}*/
; 2955 : 			ATR_KAISHIN(a1) = 0;		//ÈÄöÂ∏∏ÊîªÂáª

  005f1	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  005f4	c6 80 01 01 00
	00 00		 mov	 BYTE PTR [eax+257], 0

; 2956 : 			ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  005fb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  005fe	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00601	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  00607	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2957 : 			ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);

  0060a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0060d	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00610	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  00616	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 2958 : 			//Èò≤Âç´
; 2959 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_GUARD)

  0061c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0061f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]

; 2960 : 				ATR_GUARD_FLG(a1) = 1;
; 2961 : 			else
; 2962 : 				ATR_GUARD_FLG(a1) = 0;
; 2963 : 			if (ATR_LIFE(a1) - ATR_DAMAGE(a1) <= 0)		//Ê≠ª‰∫°

  00622	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00625	c1 e9 03	 shr	 ecx, 3
  00628	80 e1 01	 and	 cl, 1
  0062b	88 88 1c 01 00
	00		 mov	 BYTE PTR [eax+284], cl
  00631	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  00634	8b 43 78	 mov	 eax, DWORD PTR [ebx+120]
  00637	2b 42 58	 sub	 eax, DWORD PTR [edx+88]
  0063a	85 c0		 test	 eax, eax
  0063c	7f 23		 jg	 SHORT $LN72@fireHunter

; 2964 : 			{
; 2965 : 				ATR_LONG_WORK(1, a0) = 1;		//Ê≠ª‰∫°ËÆæÂÆö

  0063e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00641	c7 80 38 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+312], 1

; 2966 : 				//ÁªÑÈòü
; 2967 : 				if (ATR_COMBO(a1) == 0)

  0064b	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  0064e	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  00655	75 0a		 jne	 SHORT $LN72@fireHunter

; 2968 : 					ATR_KAISHIN(a1) = 1;		//ËÆæÂÆö‰ºöÂøÉ‰∏ÄÂáª

  00657	c6 82 01 01 00
	00 01		 mov	 BYTE PTR [edx+257], 1
  0065e	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
$LN72@fireHunter:

; 2969 : 			}
; 2970 : 			if (ATR_KAISHIN(a1))		//ËÆæÂÆö‰ºöÂøÉ‰∏ÄÂáª
; 2971 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM * 4;		//ËÆæÂÆöÊîªÂáªÂÅúÊ≠¢Êó∂Èó¥
; 2972 : 			else
; 2973 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//ËÆæÂÆöÊîªÂáªÂÅúÊ≠¢Êó∂Èó¥
; 2974 : 			if (ATR_DAMAGE(a1) || (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) || (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION))

  00661	80 ba 01 01 00
	00 00		 cmp	 BYTE PTR [edx+257], 0
  00668	b8 08 00 00 00	 mov	 eax, 8
  0066d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00672	0f 44 c8	 cmove	 ecx, eax
  00675	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00678	88 48 5c	 mov	 BYTE PTR [eax+92], cl
  0067b	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0067e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00681	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00685	75 09		 jne	 SHORT $LN76@fireHunter
  00687	f7 40 60 00 18
	00 00		 test	 DWORD PTR [eax+96], 6144 ; 00001800H
  0068e	74 35		 je	 SHORT $LN75@fireHunter
$LN76@fireHunter:

; 2975 : 			{
; 2976 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER)		//???????

  00690	f6 40 60 10	 test	 BYTE PTR [eax+96], 16	; 00000010H
  00694	74 16		 je	 SHORT $LN78@fireHunter

; 2977 : 				{
; 2978 : 					//ÊòØÂê¶ÁªÑÈòü
; 2979 : 					if (ATR_COMBO(a1) == 0)

  00696	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  0069d	75 0d		 jne	 SHORT $LN78@fireHunter

; 2980 : 						set_damage_num(a0, 1, -64 + 16);	//‰º§ÂÆ≥Ë°®Á§∫

  0069f	6a d0		 push	 -48			; ffffffd0H
  006a1	6a 01		 push	 1
  006a3	56		 push	 esi
  006a4	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  006a9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN78@fireHunter:

; 2981 : 				}
; 2982 : 				//???
; 2983 : 				play_se(252, ATR_H_POS(a0), ATR_V_POS(a0));

  006ac	ff 76 1c	 push	 DWORD PTR [esi+28]
  006af	ff 76 18	 push	 DWORD PTR [esi+24]
  006b2	68 fc 00 00 00	 push	 252			; 000000fcH
  006b7	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 2984 : 				//ÂøÖÊùÄÊòüÊòü
; 2985 : 				set_hit_mark(a0);

  006bc	56		 push	 esi
  006bd	e8 00 00 00 00	 call	 ?set_hit_mark@@YAXPAUaction@@@Z ; set_hit_mark
  006c2	83 c4 10	 add	 esp, 16			; 00000010H
$LN75@fireHunter:

; 2986 : 			}
; 2987 : 			ATR_HIT_STOP(a0) /= 4;		//???????Óèπ???

  006c5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2988 : 			ATR_VCT_NO(a0) = 3;				//
; 2989 : 			for (i = 0; i < ATR_BODY_CNT(a0); i++) //Â§ÑÁêÜÂÖ®ÈÉ®ÈòüÂèã

  006c8	33 ff		 xor	 edi, edi
  006ca	c0 68 5c 02	 shr	 BYTE PTR [eax+92], 2
  006ce	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  006d1	c6 00 03	 mov	 BYTE PTR [eax], 3
  006d4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  006d7	89 4d d8	 mov	 DWORD PTR $T5[ebp], ecx
  006da	80 79 54 00	 cmp	 BYTE PTR [ecx+84], 0
  006de	0f 86 5a 05 00
	00		 jbe	 $LN158@fireHunter

; 2969 : 			}
; 2970 : 			if (ATR_KAISHIN(a1))		//ËÆæÂÆö‰ºöÂøÉ‰∏ÄÂáª
; 2971 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM * 4;		//ËÆæÂÆöÊîªÂáªÂÅúÊ≠¢Êó∂Èó¥
; 2972 : 			else
; 2973 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//ËÆæÂÆöÊîªÂáªÂÅúÊ≠¢Êó∂Èó¥
; 2974 : 			if (ATR_DAMAGE(a1) || (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) || (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION))

  006e4	bb b8 00 00 00	 mov	 ebx, 184		; 000000b8H
  006e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL23@fireHunter:

; 2990 : 			{
; 2991 : 				if ((i + 2) != tarpos)

  006f0	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  006f3	8b d1		 mov	 edx, ecx
  006f5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?tarpos@@3HA ; tarpos
  006fb	74 40		 je	 SHORT $LN21@fireHunter

; 2992 : 				{
; 2993 : 					a2 = ATR_BODY_WORK(i + 2, a0);

  006fd	8b 94 0b 54 ff
	ff ff		 mov	 edx, DWORD PTR [ebx+ecx-172]

; 2994 : 					ATR_DAMAGE(a2) = ATR_ATTACK_POW(i + 2, a0);

  00704	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp]
  00707	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0070a	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  0070d	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2995 : 					j = ATR_DAMAGE(a2);
; 2996 : 					ATR_PET_DAMAGE(a2) = ATR_ATTACK_PET_POW(i + 2, a0);

  00710	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00713	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00716	8b 84 03 24 01
	00 00		 mov	 eax, DWORD PTR [ebx+eax+292]
  0071d	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 2997 : 					ATR_VCT_NO(a2) = 10;		//ÈÄÅÂá∫‰º§ÂÆ≥ËÆØÊÅØ

  00723	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00726	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH

; 2998 : 					ATR_STIMER(a2) = 0;

  00729	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0072c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 2999 : 					ATR_FIRST_FLG(a2) = 0;

  00730	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00733	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  0073a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
$LN21@fireHunter:

; 2988 : 			ATR_VCT_NO(a0) = 3;				//
; 2989 : 			for (i = 0; i < ATR_BODY_CNT(a0); i++) //Â§ÑÁêÜÂÖ®ÈÉ®ÈòüÂèã

  0073d	0f b6 42 54	 movzx	 eax, BYTE PTR [edx+84]
  00741	47		 inc	 edi
  00742	83 c3 04	 add	 ebx, 4
  00745	8b ca		 mov	 ecx, edx
  00747	89 4d d8	 mov	 DWORD PTR $T5[ebp], ecx
  0074a	3b f8		 cmp	 edi, eax
  0074c	7c a2		 jl	 SHORT $LL23@fireHunter

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  0074e	5f		 pop	 edi
  0074f	5e		 pop	 esi
  00750	5b		 pop	 ebx
  00751	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00754	33 cd		 xor	 ecx, ebp
  00756	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0075b	8b e5		 mov	 esp, ebp
  0075d	5d		 pop	 ebp
  0075e	c3		 ret	 0
$LN50@fireHunter:

; 3000 : 				}
; 3001 : 			}
; 3002 : 		}
; 3003 : 		else
; 3004 : 		{
; 3005 : 			if (ATR_STIMER(a0))

  0075f	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00762	84 c0		 test	 al, al
  00764	74 05		 je	 SHORT $LN80@fireHunter

; 3006 : 				ATR_STIMER(a0)--;

  00766	fe c8		 dec	 al
  00768	88 41 01	 mov	 BYTE PTR [ecx+1], al
$LN80@fireHunter:

; 3007 : 
; 3008 : 			if (p_missile[2] != NULL)

  0076b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?p_missile@@3PAPAUaction@@A+8
  00770	85 c0		 test	 eax, eax
  00772	74 29		 je	 SHORT $LN82@fireHunter

; 3009 : 			{
; 3010 : 				if (pattern(p_missile[2], ANM_NOMAL_SPD, ANM_NO_LOOP))

  00774	6a 01		 push	 1
  00776	6a 00		 push	 0
  00778	50		 push	 eax
  00779	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0077e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00781	85 c0		 test	 eax, eax
  00783	74 18		 je	 SHORT $LN82@fireHunter

; 3011 : 				{
; 3012 : 					DeathAction(p_missile[2]);

  00785	ff 35 08 00 00
	00		 push	 DWORD PTR ?p_missile@@3PAPAUaction@@A+8
  0078b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00790	83 c4 04	 add	 esp, 4

; 3013 : 					p_missile[2] = NULL;

  00793	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+8, 0
$LN82@fireHunter:

; 3014 : 				}
; 3015 : 			}
; 3016 : 			if (ATR_STIMER(a0) < 70 && p_missile[3] != NULL)

  0079d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  007a0	80 78 01 46	 cmp	 BYTE PTR [eax+1], 70	; 00000046H
  007a4	73 32		 jae	 SHORT $LN84@fireHunter
  007a6	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?p_missile@@3PAPAUaction@@A+12
  007ab	85 c0		 test	 eax, eax
  007ad	74 29		 je	 SHORT $LN84@fireHunter

; 3017 : 			{
; 3018 : 				if (pattern(p_missile[3], ANM_NOMAL_SPD, ANM_NO_LOOP))

  007af	6a 01		 push	 1
  007b1	6a 00		 push	 0
  007b3	50		 push	 eax
  007b4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  007b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  007bc	85 c0		 test	 eax, eax
  007be	74 18		 je	 SHORT $LN84@fireHunter

; 3019 : 				{
; 3020 : 					DeathAction(p_missile[3]);

  007c0	ff 35 0c 00 00
	00		 push	 DWORD PTR ?p_missile@@3PAPAUaction@@A+12
  007c6	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  007cb	83 c4 04	 add	 esp, 4

; 3021 : 					p_missile[3] = NULL;

  007ce	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+12, 0
$LN84@fireHunter:

; 3022 : 				}
; 3023 : 			}
; 3024 : 			if (ATR_STIMER(a0) < 60 && p_missile[4] != NULL)

  007d8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  007db	80 78 01 3c	 cmp	 BYTE PTR [eax+1], 60	; 0000003cH
  007df	73 32		 jae	 SHORT $LN86@fireHunter
  007e1	a1 10 00 00 00	 mov	 eax, DWORD PTR ?p_missile@@3PAPAUaction@@A+16
  007e6	85 c0		 test	 eax, eax
  007e8	74 29		 je	 SHORT $LN86@fireHunter

; 3025 : 			{
; 3026 : 				if (pattern(p_missile[4], ANM_NOMAL_SPD, ANM_NO_LOOP))

  007ea	6a 01		 push	 1
  007ec	6a 00		 push	 0
  007ee	50		 push	 eax
  007ef	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  007f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  007f7	85 c0		 test	 eax, eax
  007f9	74 18		 je	 SHORT $LN86@fireHunter

; 3027 : 				{
; 3028 : 					DeathAction(p_missile[4]);

  007fb	ff 35 10 00 00
	00		 push	 DWORD PTR ?p_missile@@3PAPAUaction@@A+16
  00801	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00806	83 c4 04	 add	 esp, 4

; 3029 : 					p_missile[4] = NULL;

  00809	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+16, 0
$LN86@fireHunter:

; 3030 : 				}
; 3031 : 			}
; 3032 : 			if (ATR_STIMER(a0) < 50 && p_missile[5] != NULL)

  00813	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00816	80 78 01 32	 cmp	 BYTE PTR [eax+1], 50	; 00000032H
  0081a	73 32		 jae	 SHORT $LN88@fireHunter
  0081c	a1 14 00 00 00	 mov	 eax, DWORD PTR ?p_missile@@3PAPAUaction@@A+20
  00821	85 c0		 test	 eax, eax
  00823	74 29		 je	 SHORT $LN88@fireHunter

; 3033 : 			{
; 3034 : 				if (pattern(p_missile[5], ANM_NOMAL_SPD, ANM_NO_LOOP))

  00825	6a 01		 push	 1
  00827	6a 00		 push	 0
  00829	50		 push	 eax
  0082a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0082f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00832	85 c0		 test	 eax, eax
  00834	74 18		 je	 SHORT $LN88@fireHunter

; 3035 : 				{
; 3036 : 					DeathAction(p_missile[5]);

  00836	ff 35 14 00 00
	00		 push	 DWORD PTR ?p_missile@@3PAPAUaction@@A+20
  0083c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00841	83 c4 04	 add	 esp, 4

; 3037 : 					p_missile[5] = NULL;

  00844	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+20, 0
$LN88@fireHunter:

; 3038 : 				}
; 3039 : 			}
; 3040 : 			if (ATR_STIMER(a0) < 40 && p_missile[6] != NULL)

  0084e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00851	80 78 01 28	 cmp	 BYTE PTR [eax+1], 40	; 00000028H
  00855	73 32		 jae	 SHORT $LN90@fireHunter
  00857	a1 18 00 00 00	 mov	 eax, DWORD PTR ?p_missile@@3PAPAUaction@@A+24
  0085c	85 c0		 test	 eax, eax
  0085e	74 29		 je	 SHORT $LN90@fireHunter

; 3041 : 			{
; 3042 : 				if (pattern(p_missile[6], ANM_NOMAL_SPD, ANM_NO_LOOP))

  00860	6a 01		 push	 1
  00862	6a 00		 push	 0
  00864	50		 push	 eax
  00865	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0086a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0086d	85 c0		 test	 eax, eax
  0086f	74 18		 je	 SHORT $LN90@fireHunter

; 3043 : 				{
; 3044 : 					DeathAction(p_missile[6]);

  00871	ff 35 18 00 00
	00		 push	 DWORD PTR ?p_missile@@3PAPAUaction@@A+24
  00877	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0087c	83 c4 04	 add	 esp, 4

; 3045 : 					p_missile[6] = NULL;

  0087f	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+24, 0
$LN90@fireHunter:

; 3046 : 				}
; 3047 : 			}
; 3048 : 			if (iBeAttNum > 9)

  00889	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?iBeAttNum@@3HA, 9 ; iBeAttNum
  00890	7e 3b		 jle	 SHORT $LN93@fireHunter

; 3049 : 			{
; 3050 : 				if (ATR_STIMER(a0) < 30 && p_missile[7] != NULL)

  00892	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00895	80 78 01 1e	 cmp	 BYTE PTR [eax+1], 30	; 0000001eH
  00899	73 32		 jae	 SHORT $LN93@fireHunter
  0089b	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?p_missile@@3PAPAUaction@@A+28
  008a0	85 c0		 test	 eax, eax
  008a2	74 29		 je	 SHORT $LN93@fireHunter

; 3051 : 				{
; 3052 : 					if (pattern(p_missile[7], ANM_NOMAL_SPD, ANM_NO_LOOP))

  008a4	6a 01		 push	 1
  008a6	6a 00		 push	 0
  008a8	50		 push	 eax
  008a9	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  008ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  008b1	85 c0		 test	 eax, eax
  008b3	74 18		 je	 SHORT $LN93@fireHunter

; 3053 : 					{
; 3054 : 						DeathAction(p_missile[7]);

  008b5	ff 35 1c 00 00
	00		 push	 DWORD PTR ?p_missile@@3PAPAUaction@@A+28
  008bb	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  008c0	83 c4 04	 add	 esp, 4

; 3055 : 						p_missile[7] = NULL;

  008c3	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+28, 0
$LN93@fireHunter:

; 3056 : 					}
; 3057 : 				}
; 3058 : 			}
; 3059 : 			if (ATR_STIMER(a0) < 20)

  008cd	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  008d0	80 78 01 14	 cmp	 BYTE PTR [eax+1], 20	; 00000014H
  008d4	0f 83 64 03 00
	00		 jae	 $LN158@fireHunter

; 3060 : 			{
; 3061 : 				if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP) && p_missile[6] == NULL)

  008da	6a 01		 push	 1
  008dc	6a 00		 push	 0
  008de	56		 push	 esi
  008df	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  008e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  008e7	85 c0		 test	 eax, eax
  008e9	0f 84 4f 03 00
	00		 je	 $LN158@fireHunter
  008ef	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR ?p_missile@@3PAPAUaction@@A+24, 0
  008f6	0f 85 42 03 00
	00		 jne	 $LN158@fireHunter

; 3062 : 				{
; 3063 : 					counter = 0;

  008fc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?counter@@3HA, 0 ; counter

; 3064 : 					ATR_VCT_NO(a0) = 8;

  00906	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00909	5f		 pop	 edi
  0090a	5e		 pop	 esi

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  0090b	5b		 pop	 ebx
  0090c	c6 00 08	 mov	 BYTE PTR [eax], 8
  0090f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00912	33 cd		 xor	 ecx, ebp
  00914	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00919	8b e5		 mov	 esp, ebp
  0091b	5d		 pop	 ebp
  0091c	c3		 ret	 0
$LN96@fireHunter:

; 3065 : 				}
; 3066 : 			}
; 3067 : 		}
; 3068 : 		break;
; 3069 : 	case 1:
; 3070 : 		if (--ATR_HIT_STOP(a0))		//ÊîªÂáªÂÅúÊ≠¢‰∏≠

  0091d	80 41 5c ff	 add	 BYTE PTR [ecx+92], 255	; 000000ffH
  00921	0f 85 17 03 00
	00		 jne	 $LN158@fireHunter

; 3071 : 			break;
; 3072 : 		ATR_CHR_ACT(a0) = 0;		//ÁßªÂä®
; 3073 : 		//Èó™ÈÅø
; 3074 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  00927	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0092a	c7 86 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+332], 0
  00934	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00937	24 20		 and	 al, 32			; 00000020H

; 3075 : 			ATR_STIMER(a0) = 32;
; 3076 : 		else
; 3077 : 			ATR_STIMER(a0) = 64;
; 3078 : 		if (tarpos != -1)

  00939	f6 d8		 neg	 al
  0093b	1a c0		 sbb	 al, al
  0093d	24 e0		 and	 al, 224			; 000000e0H
  0093f	04 40		 add	 al, 64			; 00000040H
  00941	88 41 01	 mov	 BYTE PTR [ecx+1], al
  00944	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tarpos@@3HA ; tarpos
  0094a	83 fa ff	 cmp	 edx, -1
  0094d	74 4d		 je	 SHORT $LN100@fireHunter

; 3079 : 		{
; 3080 : 			a2 = ATR_BODY_WORK(tarpos, a0);

  0094f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00952	8b 7c 90 04	 mov	 edi, DWORD PTR [eax+edx*4+4]

; 3081 : 			ATR_DAMAGE(a2) = ATR_ATTACK_POW(tarpos, a0);

  00956	8b 84 90 b0 00
	00 00		 mov	 eax, DWORD PTR [eax+edx*4+176]
  0095d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00960	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 3082 : 			ATR_PET_DAMAGE(a2) = ATR_ATTACK_PET_POW(tarpos, a0);

  00963	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00966	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tarpos@@3HA ; tarpos
  0096b	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0096e	8b 84 81 d4 01
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+468]
  00975	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax

; 3083 : 			ATR_VCT_NO(a2) = 10;		//ÈÄÅÂá∫‰º§ÂÆ≥ËÆØÊÅØ

  0097b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0097e	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH

; 3084 : 			ATR_STIMER(a2) = 0;

  00981	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00984	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 3085 : 			ATR_FIRST_FLG(a2) = 0;

  00988	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0098b	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 3086 : 			tarpos = -1;

  00992	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?tarpos@@3HA, -1 ; tarpos
$LN100@fireHunter:

; 3087 : 		}
; 3088 : 		ATR_VCT_NO(a0) = 2;

  0099c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0099f	5f		 pop	 edi
  009a0	c6 00 02	 mov	 BYTE PTR [eax], 2

; 3089 : 		a0->atr = ACT_ATR_HIDE;

  009a3	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2
  009ad	5e		 pop	 esi

; 3090 : 		p_missile[0] = NULL;

  009ae	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0

; 3091 : 		p_missile[1] = NULL;

  009b8	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  009c2	5b		 pop	 ebx
  009c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009c6	33 cd		 xor	 ecx, ebp
  009c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009cd	8b e5		 mov	 esp, ebp
  009cf	5d		 pop	 ebp
  009d0	c3		 ret	 0
$LN101@fireHunter:

; 3092 : 		break;
; 3093 : 	case 2:
; 3094 : 		if (--ATR_STIMER(a0))

  009d1	80 41 01 ff	 add	 BYTE PTR [ecx+1], 255	; 000000ffH
  009d5	0f 85 63 02 00
	00		 jne	 $LN158@fireHunter

; 3095 : 			break;
; 3096 : 		ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//Âà∞Ëææ

  009db	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3097 : 		p_missile[0] = NULL;
; 3098 : 		DeathAction(a0);		//Óé∑?

  009de	56		 push	 esi
  009df	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  009e2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  009e5	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
  009e9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0
  009f3	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  009f8	83 c4 04	 add	 esp, 4
  009fb	5f		 pop	 edi
  009fc	5e		 pop	 esi

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  009fd	5b		 pop	 ebx
  009fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a01	33 cd		 xor	 ecx, ebp
  00a03	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a08	8b e5		 mov	 esp, ebp
  00a0a	5d		 pop	 ebp
  00a0b	c3		 ret	 0
$LN103@fireHunter:

; 3099 : 		break;
; 3100 : 	case 3:
; 3101 : 		if (--ATR_HIT_STOP(a0))		//ÊîªÂáªÂÅúÊ≠¢‰∏≠

  00a0c	80 41 5c ff	 add	 BYTE PTR [ecx+92], 255	; 000000ffH
  00a10	0f 85 28 02 00
	00		 jne	 $LN158@fireHunter

; 3102 : 			break;
; 3103 : 		/*	if ( tarMgiDem )
; 3104 : 			{
; 3105 : 			a2 = ATR_BODY_WORK(2 ,a0);
; 3106 : 			ATR_DAMAGE(a2) = ATR_ATTACK_POW(2 ,a0);
; 3107 : 			ATR_PET_DAMAGE(a2) = ATR_ATTACK_PET_POW(2 ,a0);
; 3108 : 			ATR_VCT_NO(a2) = 10;		//ÈÄÅÂá∫‰º§ÂÆ≥ËÆØÊÅØ
; 3109 : 			ATR_STIMER(a2) = 0;
; 3110 : 			ATR_FIRST_FLG(a2) = 0;		
; 3111 : 			int k = ATR_DAMAGE(a2);
; 3112 : 			set_damage_num(a2, 0, -64);
; 3113 : 			tarMgiDem = 0;
; 3114 : 			}*/
; 3115 : 		if (tarpos != -1)

  00a16	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tarpos@@3HA ; tarpos
  00a1c	83 fa ff	 cmp	 edx, -1
  00a1f	74 4d		 je	 SHORT $LN105@fireHunter

; 3116 : 		{
; 3117 : 			a2 = ATR_BODY_WORK(tarpos, a0);

  00a21	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00a24	8b 7c 90 04	 mov	 edi, DWORD PTR [eax+edx*4+4]

; 3118 : 			ATR_DAMAGE(a2) = ATR_ATTACK_POW(tarpos, a0);

  00a28	8b 84 90 b0 00
	00 00		 mov	 eax, DWORD PTR [eax+edx*4+176]
  00a2f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00a32	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 3119 : 			ATR_PET_DAMAGE(a2) = ATR_ATTACK_PET_POW(tarpos, a0);

  00a35	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00a38	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tarpos@@3HA ; tarpos
  00a3d	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00a40	8b 84 81 d4 01
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+468]
  00a47	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax

; 3120 : 			ATR_VCT_NO(a2) = 10;		//ÈÄÅÂá∫‰º§ÂÆ≥ËÆØÊÅØ

  00a4d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00a50	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH

; 3121 : 			ATR_STIMER(a2) = 0;

  00a53	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00a56	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 3122 : 			ATR_FIRST_FLG(a2) = 0;

  00a5a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00a5d	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 3123 : 			tarpos = -1;

  00a64	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?tarpos@@3HA, -1 ; tarpos
$LN105@fireHunter:

; 3124 : 		}
; 3125 : 		ATR_GROUP_FLG(a0) = 35;

  00a6e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00a71	5f		 pop	 edi
  00a72	c6 40 5e 23	 mov	 BYTE PTR [eax+94], 35	; 00000023H

; 3126 : 		ATR_SPD(a0) = 16;
; 3127 : 		ATR_VCT_NO(a0)++;

  00a76	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00a79	c7 86 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [esi+308], 16	; 00000010H
  00a83	5e		 pop	 esi

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  00a84	5b		 pop	 ebx
  00a85	fe 00		 inc	 BYTE PTR [eax]
  00a87	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a8a	33 cd		 xor	 ecx, ebp
  00a8c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a91	8b e5		 mov	 esp, ebp
  00a93	5d		 pop	 ebp
  00a94	c3		 ret	 0
$LN106@fireHunter:

; 3128 : 		break;
; 3129 : 	case 4:
; 3130 : 		ATR_INT_WORK2(a0) = ATR_H_POS(a0);		//?ÓôÆ??Óå´

  00a95	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00a98	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3131 : 		ATR_INT_WORK3(a0) = ATR_V_POS(a0);		//

  00a9e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00aa1	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 3132 : 		gemini(a0);		//?ÓôÆ

  00aa4	56		 push	 esi
  00aa5	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  00aab	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 3133 : 		ATR_INT_WORK2(a0) = ATR_H_POS(a0) - ATR_INT_WORK2(a0);

  00ab0	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00ab3	83 c4 04	 add	 esp, 4
  00ab6	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00ab9	2b 81 2c 01 00
	00		 sub	 eax, DWORD PTR [ecx+300]
  00abf	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 3134 : 		ATR_INT_WORK3(a0) = ATR_V_POS(a0) - ATR_INT_WORK3(a0);

  00ac5	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00ac8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00acb	2b 81 30 01 00
	00		 sub	 eax, DWORD PTR [ecx+304]
  00ad1	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax

; 3135 : 		if (!--ATR_GROUP_FLG(a0))		//Óé∑???

  00ad7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00ada	80 40 5e ff	 add	 BYTE PTR [eax+94], 255	; 000000ffH
  00ade	0f 85 5a 01 00
	00		 jne	 $LN158@fireHunter

; 3136 : 		{
; 3137 : 			if (ATR_LONG_WORK(1, a0))		//Óò©???????

  00ae4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00ae7	83 b8 38 01 00
	00 00		 cmp	 DWORD PTR [eax+312], 0
  00aee	74 0d		 je	 SHORT $LN108@fireHunter

; 3138 : 				ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  00af0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00af3	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00af6	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
  00afa	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN108@fireHunter:

; 3139 : 			ATR_VCT_NO(a0)++;

  00afd	fe 00		 inc	 BYTE PTR [eax]
  00aff	5f		 pop	 edi
  00b00	5e		 pop	 esi

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  00b01	5b		 pop	 ebx
  00b02	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b05	33 cd		 xor	 ecx, ebp
  00b07	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b0c	8b e5		 mov	 esp, ebp
  00b0e	5d		 pop	 ebp
  00b0f	c3		 ret	 0
$LN109@fireHunter:

; 3140 : 		}
; 3141 : 		break;
; 3142 : 	case 5:
; 3143 : 		play_se(251, ATR_H_POS(a0), ATR_V_POS(a0));

  00b10	ff 76 1c	 push	 DWORD PTR [esi+28]
  00b13	ff 76 18	 push	 DWORD PTR [esi+24]
  00b16	68 fb 00 00 00	 push	 251			; 000000fbH
  00b1b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 3144 : 		ATR_VCT_NO(a0)++;

  00b20	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00b23	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b26	fe 00		 inc	 BYTE PTR [eax]

; 3145 : 		ATR_STIMER(a0) = 30;

  00b28	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00b2b	5f		 pop	 edi
  00b2c	5e		 pop	 esi

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  00b2d	5b		 pop	 ebx
  00b2e	c6 40 01 1e	 mov	 BYTE PTR [eax+1], 30	; 0000001eH
  00b32	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b35	33 cd		 xor	 ecx, ebp
  00b37	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b3c	8b e5		 mov	 esp, ebp
  00b3e	5d		 pop	 ebp
  00b3f	c3		 ret	 0
$LN110@fireHunter:

; 3146 : 		break;
; 3147 : 	case 6:
; 3148 : 		if (ATR_STIMER(a0))

  00b40	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00b43	84 c0		 test	 al, al
  00b45	74 16		 je	 SHORT $LN111@fireHunter

; 3149 : 		{
; 3150 : 			ATR_STIMER(a0)--;

  00b47	5f		 pop	 edi
  00b48	fe c8		 dec	 al
  00b4a	5e		 pop	 esi
  00b4b	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  00b4e	5b		 pop	 ebx
  00b4f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b52	33 cd		 xor	 ecx, ebp
  00b54	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b59	8b e5		 mov	 esp, ebp
  00b5b	5d		 pop	 ebp
  00b5c	c3		 ret	 0
$LN111@fireHunter:

; 3151 : 			break;
; 3152 : 		}
; 3153 : 		ATR_ATTRIB(a0) = ACT_ATR_HIDE;		//Óù∏Óçï??

  00b5d	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2

; 3154 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  00b67	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 3155 : 		if (ATR_NAME(a1) == NULL || ATR_VCT_NO(a1) >= VCT_NO_DIE || ATR_VCT_NO(a1) == 0)		//Óïò???????

  00b6a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00b6e	74 11		 je	 SHORT $LN113@fireHunter
  00b70	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00b73	8a 00		 mov	 al, BYTE PTR [eax]
  00b75	3c fa		 cmp	 al, 250			; 000000faH
  00b77	73 08		 jae	 SHORT $LN113@fireHunter
  00b79	84 c0		 test	 al, al
  00b7b	0f 85 bd 00 00
	00		 jne	 $LN158@fireHunter
$LN113@fireHunter:

; 3156 : 		{
; 3157 : 			if (!ATR_LONG_WORK(1, a0))		//Óò©?Óíü?????

  00b81	83 b9 38 01 00
	00 00		 cmp	 DWORD PTR [ecx+312], 0
  00b88	75 0a		 jne	 SHORT $LN114@fireHunter

; 3158 : 				ATR_STIMER(ATR_BODY_WORK(1, a0)) = 1;		//???Óëò

  00b8a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00b8d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00b90	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
$LN114@fireHunter:

; 3159 : 			DeathAction(a0);		//Óé∑?

  00b94	56		 push	 esi
  00b95	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00b9a	83 c4 04	 add	 esp, 4

; 3160 : 			p_missile[0] = NULL;	//

  00b9d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0

; 3161 : 			p_missile[1] = NULL;	//

  00ba7	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0
  00bb1	5f		 pop	 edi
  00bb2	5e		 pop	 esi

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  00bb3	5b		 pop	 ebx
  00bb4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bb7	33 cd		 xor	 ecx, ebp
  00bb9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bbe	8b e5		 mov	 esp, ebp
  00bc0	5d		 pop	 ebp
  00bc1	c3		 ret	 0
$LN115@fireHunter:

; 3162 : 		}
; 3163 : 		break;
; 3164 : 	case 7:
; 3165 : 		ATR_VCT_NO(a0)++;

  00bc2	fe c0		 inc	 al
  00bc4	88 01		 mov	 BYTE PTR [ecx], al

; 3166 : 		ATR_STIMER(a0) =60;

  00bc6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00bc9	5f		 pop	 edi
  00bca	5e		 pop	 esi

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  00bcb	5b		 pop	 ebx
  00bcc	c6 40 01 3c	 mov	 BYTE PTR [eax+1], 60	; 0000003cH
  00bd0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bd3	33 cd		 xor	 ecx, ebp
  00bd5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bda	8b e5		 mov	 esp, ebp
  00bdc	5d		 pop	 ebp
  00bdd	c3		 ret	 0
$LN116@fireHunter:

; 3167 : 		break;
; 3168 : 	case 8:
; 3169 : 		for (i = 8; i < 13; i++)

  00bde	bf 20 00 00 00	 mov	 edi, OFFSET ?p_missile@@3PAPAUaction@@A+32
$LL26@fireHunter:

; 3170 : 		{
; 3171 : 			if (p_missile[i] != NULL)

  00be3	8b 07		 mov	 eax, DWORD PTR [edi]
  00be5	85 c0		 test	 eax, eax
  00be7	74 27		 je	 SHORT $LN24@fireHunter

; 3172 : 			{
; 3173 : 				if (pattern(p_missile[i], ANM_NOMAL_SPD, ANM_NO_LOOP))

  00be9	6a 01		 push	 1
  00beb	6a 00		 push	 0
  00bed	50		 push	 eax
  00bee	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00bf3	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bf6	85 c0		 test	 eax, eax
  00bf8	74 16		 je	 SHORT $LN24@fireHunter

; 3174 : 				{
; 3175 : 					DeathAction(p_missile[i]);

  00bfa	ff 37		 push	 DWORD PTR [edi]
  00bfc	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00c01	83 c4 04	 add	 esp, 4

; 3176 : 					p_missile[i] = NULL;

  00c04	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 3177 : 					counter++;

  00c0a	ff 05 00 00 00
	00		 inc	 DWORD PTR ?counter@@3HA	; counter
$LN24@fireHunter:

; 3167 : 		break;
; 3168 : 	case 8:
; 3169 : 		for (i = 8; i < 13; i++)

  00c10	83 c7 04	 add	 edi, 4
  00c13	81 ff 34 00 00
	00		 cmp	 edi, OFFSET ?p_missile@@3PAPAUaction@@A+52
  00c19	7c c8		 jl	 SHORT $LL26@fireHunter

; 3178 : 				}
; 3179 : 			}
; 3180 : 		}
; 3181 : 		if (counter == 5)

  00c1b	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?counter@@3HA, 5 ; counter
  00c22	75 1a		 jne	 SHORT $LN158@fireHunter

; 3182 : 		{
; 3183 : 			ATR_ATTRIB(a0) = ACT_ATR_HIDE;		//Óù∏Óçï??

  00c24	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2

; 3184 : 			FireSkillEnd = FALSE;

  00c2e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?FireSkillEnd@@3HA, 0 ; FireSkillEnd

; 3185 : 			ATR_VCT_NO(a0) = 0;		

  00c38	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00c3b	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN158@fireHunter:
  00c3e	5f		 pop	 edi
$LN119@fireHunter:

; 3186 : 		}
; 3187 : 		break;
; 3188 : 	}
; 3189 : }

  00c3f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c42	5e		 pop	 esi
  00c43	33 cd		 xor	 ecx, ebp
  00c45	5b		 pop	 ebx
  00c46	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c4b	8b e5		 mov	 esp, ebp
  00c4d	5d		 pop	 ebp
  00c4e	c3		 ret	 0
  00c4f	90		 npad	 1
$LN154@fireHunter:
  00c50	00 00 00 00	 DD	 $LN27@fireHunter
  00c54	00 00 00 00	 DD	 $LN96@fireHunter
  00c58	00 00 00 00	 DD	 $LN101@fireHunter
  00c5c	00 00 00 00	 DD	 $LN103@fireHunter
  00c60	00 00 00 00	 DD	 $LN106@fireHunter
  00c64	00 00 00 00	 DD	 $LN109@fireHunter
  00c68	00 00 00 00	 DD	 $LN110@fireHunter
  00c6c	00 00 00 00	 DD	 $LN115@fireHunter
  00c70	00 00 00 00	 DD	 $LN116@fireHunter
$LN155@fireHunter:
  00c74	00 00 00 00	 DD	 $LN40@fireHunter
  00c78	00 00 00 00	 DD	 $LN47@fireHunter
  00c7c	00 00 00 00	 DD	 $LN40@fireHunter
  00c80	00 00 00 00	 DD	 $LN13@fireHunter
  00c84	00 00 00 00	 DD	 $LN41@fireHunter
  00c88	00 00 00 00	 DD	 $LN42@fireHunter
  00c8c	00 00 00 00	 DD	 $LN47@fireHunter
  00c90	00 00 00 00	 DD	 $LN44@fireHunter
  00c94	00 00 00 00	 DD	 $LN47@fireHunter
  00c98	00 00 00 00	 DD	 $LN46@fireHunter
?fireHunter@@YAXPAUaction@@@Z ENDP			; fireHunter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?axe@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d0$ = -4						; size = 4
_d1$ = 8						; size = 4
_a0$ = 8						; size = 4
?axe@@YAXPAUaction@@@Z PROC				; axe, COMDAT

; 2623 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2624 : 	ACTION *a1, *a2;
; 2625 : 	int d0, d1;
; 2626 : 
; 2627 : 	switch (ATR_VCT_NO(a0))

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	57		 push	 edi
  00009	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0000c	8a 01		 mov	 al, BYTE PTR [ecx]
  0000e	0f b6 d0	 movzx	 edx, al
  00011	83 fa 04	 cmp	 edx, 4
  00014	0f 87 1a 01 00
	00		 ja	 $LN2@axe
  0001a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN21@axe[edx*4]
$LN4@axe:

; 2628 : 	{
; 2629 : 	case 0:
; 2630 : 		a1 = ATR_BODY_WORK(1, a0);		//?Óôπ???????

  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 2631 : 		if (ATR_VCT_NO(a1) == 1)

  00024	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00027	80 38 01	 cmp	 BYTE PTR [eax], 1
  0002a	0f 84 ad 00 00
	00		 je	 $LN20@axe

; 2632 : 		{
; 2633 : 			DeathAction(a0);		//Óé∑?
; 2634 : 			return;
; 2635 : 		}
; 2636 : 		ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  00030	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00033	fe c0		 inc	 al
  00035	88 46 15	 mov	 BYTE PTR [esi+21], al

; 2637 : 		a2 = ATR_BODY_WORK(0, a0);		//Óò©???????

  00038	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 2638 : 		d0 = ATR_H_POS(a2);

  0003b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0003e	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 2639 : 		d1 = ATR_V_POS(a2);

  00041	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00044	89 45 08	 mov	 DWORD PTR _d1$[ebp], eax

; 2640 : 		radar(a1, &d0, &d1);	//????

  00047	8d 45 08	 lea	 eax, DWORD PTR _d1$[ebp]
  0004a	50		 push	 eax
  0004b	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  0004e	50		 push	 eax
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 2641 : 		ATR_STIMER(a0)++;

  00055	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	fe 40 01	 inc	 BYTE PTR [eax+1]

; 2642 : 		if (ATR_CRS(a0) == 0)		//ÓêØÓêÑ??

  0005e	83 be 38 01 00
	00 00		 cmp	 DWORD PTR [esi+312], 0
  00065	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  0006b	75 13		 jne	 SHORT $LN6@axe

; 2643 : 		{
; 2644 : 			if (ATR_SPD(a0) == 0)		//???Óåø??

  0006d	85 c0		 test	 eax, eax
  0006f	75 0c		 jne	 SHORT $LN8@axe
$LN24@axe:

; 2686 : 		break;
; 2687 : 	}
; 2688 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00071	c7 86 38 01 00
	00 10 00 00 00	 mov	 DWORD PTR [esi+312], 16	; 00000010H
  0007b	eb 0a		 jmp	 SHORT $LN7@axe
$LN8@axe:

; 2645 : 				ATR_CRS(a0) = 16;
; 2646 : 			else
; 2647 : 				ATR_SPD(a0) -= 1;

  0007d	48		 dec	 eax

; 2648 : 		}

  0007e	eb 01		 jmp	 SHORT $LN22@axe
$LN6@axe:

; 2649 : 		else
; 2650 : 			ATR_SPD(a0) += 1;

  00080	40		 inc	 eax
$LN22@axe:

; 2686 : 		break;
; 2687 : 	}
; 2688 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00081	89 86 34 01 00
	00		 mov	 DWORD PTR [esi+308], eax
$LN7@axe:
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  0008d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00090	83 c4 04	 add	 esp, 4
  00093	8b 80 2c 01 00
	00		 mov	 eax, DWORD PTR [eax+300]
  00099	01 46 18	 add	 DWORD PTR [esi+24], eax
  0009c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0009f	6a 00		 push	 0
  000a1	6a 00		 push	 0
  000a3	56		 push	 esi
  000a4	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [eax+304]
  000aa	01 46 1c	 add	 DWORD PTR [esi+28], eax
  000ad	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b5	5f		 pop	 edi

; 2689 : }

  000b6	5e		 pop	 esi
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN11@axe:

; 2686 : 		break;
; 2687 : 	}
; 2688 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  000bb	6a 00		 push	 0
  000bd	fe c0		 inc	 al
  000bf	6a 00		 push	 0
  000c1	56		 push	 esi
  000c2	88 01		 mov	 BYTE PTR [ecx], al
  000c4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cc	5f		 pop	 edi

; 2689 : }

  000cd	5e		 pop	 esi
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
$LN12@axe:

; 2651 : 		gemini(a0);
; 2652 : 		ATR_H_POS(a0) += ATR_INT_WORK2(a1);
; 2653 : 		ATR_V_POS(a0) += ATR_INT_WORK3(a1);
; 2654 : 		break;
; 2655 : 	case 1:
; 2656 : 		break;
; 2657 : 	case 2:
; 2658 : 		ATR_VCT_NO(a0)++;
; 2659 : 		break;
; 2660 : 	case 3:
; 2661 : 		a1 = ATR_BODY_WORK(1, a0);		//?Óôπ???????

  000d2	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 2662 : 		if (ATR_VCT_NO(a1) == 1)

  000d5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000d8	80 38 01	 cmp	 BYTE PTR [eax], 1
  000db	75 0f		 jne	 SHORT $LN13@axe
$LN20@axe:

; 2663 : 		{
; 2664 : 			DeathAction(a0);		//Óé∑?

  000dd	56		 push	 esi
  000de	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  000e3	83 c4 04	 add	 esp, 4
  000e6	5f		 pop	 edi

; 2689 : }

  000e7	5e		 pop	 esi
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
$LN13@axe:

; 2665 : 			return;
; 2666 : 		}
; 2667 : 		ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  000ec	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000ef	fe c0		 inc	 al

; 2668 : 		if (ATR_CRS(a0) == 0)		//ÓêØÓêÑ??

  000f1	83 be 38 01 00
	00 00		 cmp	 DWORD PTR [esi+312], 0
  000f8	88 46 15	 mov	 BYTE PTR [esi+21], al
  000fb	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  00101	75 10		 jne	 SHORT $LN14@axe

; 2669 : 		{
; 2670 : 			if (ATR_SPD(a0) == 0)		//???Óåø??

  00103	85 c0		 test	 eax, eax
  00105	0f 84 66 ff ff
	ff		 je	 $LN24@axe

; 2671 : 				ATR_CRS(a0) = 16;
; 2672 : 			else
; 2673 : 				ATR_SPD(a0) -= 2;

  0010b	83 c0 fe	 add	 eax, -2			; fffffffeH

; 2674 : 		}

  0010e	e9 6e ff ff ff	 jmp	 $LN22@axe
$LN14@axe:

; 2675 : 		else
; 2676 : 			ATR_SPD(a0) += 2;

  00113	83 c0 02	 add	 eax, 2

; 2677 : 		gemini(a0);
; 2678 : 		ATR_H_POS(a0) += ATR_INT_WORK2(a1);
; 2679 : 		ATR_V_POS(a0) += ATR_INT_WORK3(a1);
; 2680 : 		break;

  00116	e9 66 ff ff ff	 jmp	 $LN22@axe
$LN18@axe:

; 2681 : 	case 4:
; 2682 : 		a1 = ATR_BODY_WORK(1, a0);		//?Óôπ???????

  0011b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 2683 : 		ATR_H_POS(a0) = ATR_H_POS(a1);

  0011e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00121	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 2684 : 		ATR_V_POS(a0) = ATR_V_POS(a1);

  00124	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00127	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 2685 : 		ATR_CHR_ACT(a0) = 1;		//Óåπ?????????

  0012a	c7 86 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+332], 1
$LN2@axe:

; 2686 : 		break;
; 2687 : 	}
; 2688 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00134	6a 00		 push	 0
  00136	6a 00		 push	 0
  00138	56		 push	 esi
  00139	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00141	5f		 pop	 edi

; 2689 : }

  00142	5e		 pop	 esi
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
  00147	90		 npad	 1
$LN21@axe:
  00148	00 00 00 00	 DD	 $LN4@axe
  0014c	00 00 00 00	 DD	 $LN2@axe
  00150	00 00 00 00	 DD	 $LN11@axe
  00154	00 00 00 00	 DD	 $LN12@axe
  00158	00 00 00 00	 DD	 $LN18@axe
?axe@@YAXPAUaction@@@Z ENDP				; axe
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?bow@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d1$ = -4						; size = 4
_d0$ = 8						; size = 4
_a0$ = 8						; size = 4
?bow@@YAXPAUaction@@@Z PROC				; bow, COMDAT

; 2418 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2419 : 	ACTION *a1, *a2;
; 2420 : 	int d0, d1;
; 2421 : 
; 2422 : 	switch (ATR_VCT_NO(a0))

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	57		 push	 edi
  00009	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0000c	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0000f	83 e8 00	 sub	 eax, 0
  00012	74 70		 je	 SHORT $LN4@bow
  00014	83 e8 01	 sub	 eax, 1
  00017	74 2e		 je	 SHORT $LN37@bow
  00019	83 e8 01	 sub	 eax, 1
  0001c	0f 85 64 04 00
	00		 jne	 $LN2@bow

; 2611 : 		break;
; 2612 : 	case 2:
; 2613 : 		if (--ATR_STIMER(a0))

  00022	80 47 01 ff	 add	 BYTE PTR [edi+1], 255	; 000000ffH
  00026	0f 85 5a 04 00
	00		 jne	 $LN2@bow

; 2614 : 			break;
; 2615 : 		ATR_STIMER(ATR_BODY_WORK(1, a0))++;		//???Óëò

  0002c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2616 : 		DeathAction(a0);		//Óé∑?

  0002f	56		 push	 esi
  00030	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00033	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00036	fe 40 01	 inc	 BYTE PTR [eax+1]
  00039	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0003e	83 c4 04	 add	 esp, 4
  00041	5f		 pop	 edi

; 2617 : 		break;
; 2618 : 	}
; 2619 : }

  00042	5e		 pop	 esi
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN37@bow:

; 2596 : 		}
; 2597 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 2598 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 2599 : 		break;
; 2600 : 	case 1:
; 2601 : 		if (--ATR_HIT_STOP(a0))		//??????????

  00047	80 47 5c ff	 add	 BYTE PTR [edi+92], 255	; 000000ffH
  0004b	0f 85 35 04 00
	00		 jne	 $LN2@bow

; 2602 : 			break;
; 2603 : 		//???????
; 2604 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  00051	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00054	5f		 pop	 edi
  00055	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00058	24 20		 and	 al, 32			; 00000020H

; 2605 : 			ATR_STIMER(a0) = 32;
; 2606 : 		else
; 2607 : 			ATR_STIMER(a0) = 64;
; 2608 : 		ATR_VCT_NO(a0) = 2;

  0005a	f6 d8		 neg	 al
  0005c	1a c0		 sbb	 al, al
  0005e	24 e0		 and	 al, 224			; 000000e0H
  00060	04 40		 add	 al, 64			; 00000040H
  00062	88 41 01	 mov	 BYTE PTR [ecx+1], al
  00065	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00068	c6 00 02	 mov	 BYTE PTR [eax], 2

; 2609 : 		a0->atr = ACT_ATR_HIDE;

  0006b	c7 86 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+164], 2

; 2610 : 		p_missile[0] = NULL;

  00075	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0

; 2617 : 		break;
; 2618 : 	}
; 2619 : }

  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN4@bow:

; 2423 : 	{
; 2424 : 	case 0:
; 2425 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  00084	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 2426 : 		d0 = ATR_H_POS(a1);

  00087	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0008a	89 45 08	 mov	 DWORD PTR _d0$[ebp], eax

; 2427 : 		d1 = ATR_V_POS(a1);

  0008d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00090	89 45 fc	 mov	 DWORD PTR _d1$[ebp], eax

; 2428 : 		radar(a0, &d0, &d1);	//????

  00093	8d 45 fc	 lea	 eax, DWORD PTR _d1$[ebp]
  00096	50		 push	 eax
  00097	8d 45 08	 lea	 eax, DWORD PTR _d0$[ebp]
  0009a	50		 push	 eax
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 2429 : 		ATR_CRS(a0) = d0;		//??????

  000a1	8b 45 08	 mov	 eax, DWORD PTR _d0$[ebp]
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a7	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 2430 : 		//???????
; 2431 : 		if (!--ATR_GROUP_FLG(a0))

  000ad	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000b0	80 40 5e ff	 add	 BYTE PTR [eax+94], 255	; 000000ffH
  000b4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000b7	0f 85 70 03 00
	00		 jne	 $LN5@bow

; 2432 : 		{
; 2433 : 			a2 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 2434 : 			if (ATR_LIFE(a2) <= 0)		//??????

  000bd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000c0	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  000c4	7f 2c		 jg	 SHORT $LN7@bow

; 2435 : 			{
; 2436 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  000c6	c6 41 5c 08	 mov	 BYTE PTR [ecx+92], 8

; 2437 : 				ATR_VCT_NO(a0) = 1;		//????????

  000ca	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2617 : 		break;
; 2618 : 	}
; 2619 : }

  000cd	6a 00		 push	 0
  000cf	6a 00		 push	 0
  000d1	56		 push	 esi
  000d2	c6 00 01	 mov	 BYTE PTR [eax], 1
  000d5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d8	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  000de	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  000e4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
$LN7@bow:

; 2438 : 				ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 2439 : 				pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 2440 : 				break;
; 2441 : 			}
; 2442 : #ifdef _PETSKILL_ACUPUNCTURE
; 2443 : 			///////////////////////////////
; 2444 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 2445 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP | ATT_ACUPUNCTURE

  000f2	f7 41 60 00 1c
	00 4a		 test	 DWORD PTR [ecx+96], 1241521152 ; 4a001c00H
  000f9	74 09		 je	 SHORT $LN8@bow

; 2446 : #ifdef _PET_ITEM
; 2447 : 				| ATT_ATTACKBACK
; 2448 : #endif
; 2449 : 				))
; 2450 : #else
; 2451 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_ACUPUNCTURE
; 2452 : #ifdef _PET_ITEM
; 2453 : 				| ATT_ATTACKBACK
; 2454 : #endif
; 2455 : 				))
; 2456 : #endif
; 2457 : 				///////////////////////////////
; 2458 : #else
; 2459 : 			///////////////////////////////
; 2460 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 2461 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP))
; 2462 : #else
; 2463 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA))
; 2464 : #endif
; 2465 : 				///////////////////////////////
; 2466 : #endif
; 2467 : 				set_guard_mark(a0);

  000fb	56		 push	 esi
  000fc	e8 00 00 00 00	 call	 ?set_guard_mark@@YAXPAUaction@@@Z ; set_guard_mark
  00101	83 c4 04	 add	 esp, 4
$LN8@bow:

; 2468 : 			ATR_COMBO(a1) = 0;

  00104	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00107	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0

; 2469 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  0010e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00111	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00114	f6 c1 20	 test	 cl, 32			; 00000020H
  00117	74 5e		 je	 SHORT $LN9@bow

; 2470 : 			{
; 2471 : 				ATR_HIT_STOP(a0) = 32;		//??????????

  00119	c6 40 5c 20	 mov	 BYTE PTR [eax+92], 32	; 00000020H

; 2472 : 				ATR_VCT_NO(a0) = 1;		//????????

  0011d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2473 : 				ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 2474 : 				pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00120	6a 00		 push	 0
  00122	6a 00		 push	 0
  00124	56		 push	 esi
  00125	c6 00 01	 mov	 BYTE PTR [eax], 1
  00128	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0012b	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  00131	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  00137	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 2475 : 				ATR_VCT_NO(a1) = 16;		//????

  0013c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 2617 : 		break;
; 2618 : 	}
; 2619 : }

  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00142	c6 00 10	 mov	 BYTE PTR [eax], 16	; 00000010H
  00145	8b 86 38 01 00
	00		 mov	 eax, DWORD PTR [esi+312]
  0014b	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0014e	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  00154	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]
  0015a	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al
  00160	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00163	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  00167	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
$LN9@bow:

; 2476 : 				ATR_CRS(a1) = ATR_CRS(a0);		//Óò©?????????????
; 2477 : 				ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//
; 2478 : 				ATR_STIMER(a1) = 0;
; 2479 : 				ATR_FIRST_FLG(a1) = 0;		//??????????
; 2480 : 				break;
; 2481 : 			}
; 2482 : 
; 2483 : 			if (!((ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) | (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)))

  00177	f7 c1 00 18 00
	00		 test	 ecx, 6144		; 00001800H
  0017d	75 4d		 jne	 SHORT $LN11@bow

; 2484 : 			{
; 2485 : 				if ((ATR_ATTACK_POW(0, a0) == 0) && (ATR_ATTACK_PET_POW(0, a0) == 0))		//????

  0017f	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00186	75 44		 jne	 SHORT $LN11@bow
  00188	83 b8 d4 01 00
	00 00		 cmp	 DWORD PTR [eax+468], 0
  0018f	75 3b		 jne	 SHORT $LN11@bow

; 2486 : 				{
; 2487 : 					a2 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 2488 : 					set_damage_num(a2, 0, -64);		//??Óù∏Óçï

  00191	6a c0		 push	 -64			; ffffffc0H
  00193	6a 00		 push	 0
  00195	ff 70 04	 push	 DWORD PTR [eax+4]
  00198	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 2489 : 					ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  0019d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2490 : 					ATR_VCT_NO(a0) = 1;		//????????
; 2491 : 					ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?
; 2492 : 					pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	56		 push	 esi
  001a5	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8
  001a9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ac	c6 00 01	 mov	 BYTE PTR [eax], 1
  001af	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001b2	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  001b8	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  001be	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  001c3	83 c4 18	 add	 esp, 24			; 00000018H
  001c6	5f		 pop	 edi

; 2617 : 		break;
; 2618 : 	}
; 2619 : }

  001c7	5e		 pop	 esi
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
$LN11@bow:

; 2493 : 					break;
; 2494 : 				}
; 2495 : 			}
; 2496 : 			//?Óéó????????
; 2497 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_CRUSH)

  001cc	f7 c1 00 20 00
	00		 test	 ecx, 8192		; 00002000H
  001d2	74 0d		 je	 SHORT $LN12@bow

; 2498 : 				//?????Óù∏Óçï
; 2499 : 				set_damage_num(a1, 19, -112);

  001d4	6a 90		 push	 -112			; ffffff90H
  001d6	6a 13		 push	 19			; 00000013H
  001d8	57		 push	 edi
  001d9	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  001de	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@bow:

; 2500 : 			//?????????
; 2501 : 			ATR_AKO_FLG(a1) = 0;

  001e1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001e4	c6 80 21 01 00
	00 00		 mov	 BYTE PTR [eax+289], 0

; 2502 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO1)		//??????

  001eb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ee	f6 40 60 40	 test	 BYTE PTR [eax+96], 64	; 00000040H
  001f2	74 0d		 je	 SHORT $LN13@bow

; 2503 : 				ATR_AKO_FLG(a1) = 1;

  001f4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001f7	c6 80 21 01 00
	00 01		 mov	 BYTE PTR [eax+289], 1
  001fe	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN13@bow:

; 2504 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO2)		//??????

  00201	f6 40 60 80	 test	 BYTE PTR [eax+96], 128	; 00000080H
  00205	74 0d		 je	 SHORT $LN14@bow

; 2505 : 				ATR_AKO_FLG(a1) = 2;

  00207	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0020a	c6 80 21 01 00
	00 02		 mov	 BYTE PTR [eax+289], 2
  00211	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN14@bow:

; 2506 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DEATH)		//?????

  00214	f6 40 60 01	 test	 BYTE PTR [eax+96], 1
  00218	74 07		 je	 SHORT $LN47@bow

; 2507 : 				ATR_LIFE(a1) = 0;		//?Ó†å????

  0021a	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
$LN47@bow:

; 2508 : 			ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//

  00221	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00224	8a 86 54 01 00
	00		 mov	 al, BYTE PTR [esi+340]
  0022a	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 2509 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)		//?Óé™?????

  00230	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00233	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00236	f7 c1 00 08 00
	00		 test	 ecx, 2048		; 00000800H
  0023c	74 7a		 je	 SHORT $LN16@bow

; 2510 : 			{
; 2511 : 				if (!ATR_COMBO(a1))			//????????

  0023e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00241	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00248	0f 85 91 00 00
	00		 jne	 $LN22@bow

; 2512 : 				{
; 2513 : 					//??Óñ±Óù∏Óçï
; 2514 : 					ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  0024e	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  00254	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2515 : 					ATR_LIFE(a1) += ATR_DAMAGE(a1);

  00257	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]

; 2516 : 					if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???

  0025a	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]

; 2517 : 						ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???
; 2518 : 					ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);
; 2519 : 					ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);
; 2520 : 					if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))		//?Óï´Óóó???
; 2521 : 						ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);		//?Óï´???
; 2522 : 					set_damage_num(a1, 14, -64);

  00260	6a c0		 push	 -64			; ffffffc0H
  00262	6a 0e		 push	 14			; 0000000eH
  00264	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00267	01 47 78	 add	 DWORD PTR [edi+120], eax
  0026a	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  0026d	3b c1		 cmp	 eax, ecx
  0026f	57		 push	 edi
  00270	0f 4f c1	 cmovg	 eax, ecx
  00273	89 47 78	 mov	 DWORD PTR [edi+120], eax
  00276	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00279	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  0027f	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax
  00285	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00288	8b 8f b4 01 00
	00		 mov	 ecx, DWORD PTR [edi+436]
  0028e	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  00294	01 87 b0 01 00
	00		 add	 DWORD PTR [edi+432], eax
  0029a	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  002a0	3b c1		 cmp	 eax, ecx
  002a2	0f 4f c1	 cmovg	 eax, ecx
  002a5	89 87 b0 01 00
	00		 mov	 DWORD PTR [edi+432], eax
  002ab	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 2523 : 					ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?

  002b0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2524 : 					ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?
; 2525 : 				}
; 2526 : 			}

  002b6	eb 08		 jmp	 SHORT $LN50@bow
$LN16@bow:

; 2527 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA)		//????????

  002b8	f7 c1 00 10 00
	00		 test	 ecx, 4096		; 00001000H
  002be	74 19		 je	 SHORT $LN21@bow
$LN50@bow:

; 2534 : 			//?Óëû?????
; 2535 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  002c0	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0
  002ca	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002cd	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  002d7	eb 06		 jmp	 SHORT $LN22@bow
$LN21@bow:

; 2528 : 			{
; 2529 : 				ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?
; 2530 : 				ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?
; 2531 : 			}
; 2532 : 			else
; 2533 : 				ATR_VCT_NO(a1) = 10;		//?????Óëò

  002d9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  002dc	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH
$LN22@bow:

; 2534 : 			//?Óëû?????
; 2535 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  002df	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002e2	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002e5	0f b6 40 60	 movzx	 eax, BYTE PTR [eax+96]
  002e9	c0 e8 02	 shr	 al, 2
  002ec	24 01		 and	 al, 1
  002ee	88 81 01 01 00
	00		 mov	 BYTE PTR [ecx+257], al

; 2536 : 				ATR_KAISHIN(a1) = 1;		//?Óëû??????
; 2537 : 			else
; 2538 : 				ATR_KAISHIN(a1) = 0;		//Óó≠Óêπ?????
; 2539 : 			ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  002f4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002f7	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002fa	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  00300	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2540 : 			ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);

  00303	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00306	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00309	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  0030f	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 2541 : 			//?????
; 2542 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_GUARD)

  00315	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00318	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0031b	0f b6 40 60	 movzx	 eax, BYTE PTR [eax+96]
  0031f	c0 e8 03	 shr	 al, 3
  00322	24 01		 and	 al, 1
  00324	88 81 1c 01 00
	00		 mov	 BYTE PTR [ecx+284], al

; 2543 : 				ATR_GUARD_FLG(a1) = 1;
; 2544 : 			else
; 2545 : 				ATR_GUARD_FLG(a1) = 0;
; 2546 : 			if (ATR_LIFE(a1) - ATR_DAMAGE(a1) <= 0)		//?Ó†å????

  0032a	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0032d	8b d1		 mov	 edx, ecx
  0032f	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00332	2b 41 58	 sub	 eax, DWORD PTR [ecx+88]
  00335	85 c0		 test	 eax, eax
  00337	7f 13		 jg	 SHORT $LN28@bow

; 2547 : 			{
; 2548 : 				//????????
; 2549 : 				if (ATR_COMBO(a1) == 0)

  00339	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00340	75 0a		 jne	 SHORT $LN28@bow

; 2550 : 					ATR_KAISHIN(a1) = 1;		//?Óëû??????

  00342	c6 81 01 01 00
	00 01		 mov	 BYTE PTR [ecx+257], 1
  00349	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN28@bow:

; 2551 : 			}
; 2552 : 			if (ATR_KAISHIN(a1))		//?Óëû?????
; 2553 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM * 4;		//??????????
; 2554 : 			else
; 2555 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????
; 2556 : 			//???????????Óé™??
; 2557 : 			if (ATR_DAMAGE(a1) || (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) || (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION))

  0034c	80 ba 01 01 00
	00 00		 cmp	 BYTE PTR [edx+257], 0
  00353	b8 08 00 00 00	 mov	 eax, 8
  00358	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0035d	0f 44 c8	 cmove	 ecx, eax
  00360	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00363	88 48 5c	 mov	 BYTE PTR [eax+92], cl
  00366	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00369	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0036c	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00370	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  00373	75 07		 jne	 SHORT $LN32@bow
  00375	a9 00 18 00 00	 test	 eax, 6144		; 00001800H
  0037a	74 30		 je	 SHORT $LN31@bow
$LN32@bow:

; 2558 : 			{
; 2559 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER)		//???????

  0037c	a8 10		 test	 al, 16			; 00000010H
  0037e	74 16		 je	 SHORT $LN34@bow

; 2560 : 				{
; 2561 : 					//????????
; 2562 : 					if (ATR_COMBO(a1) == 0)

  00380	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00387	75 0d		 jne	 SHORT $LN34@bow

; 2563 : 						set_damage_num(a0, 1, -64 + 16);	//?????Óù∏Óçï

  00389	6a d0		 push	 -48			; ffffffd0H
  0038b	6a 01		 push	 1
  0038d	56		 push	 esi
  0038e	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00393	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN34@bow:

; 2564 : 				}
; 2565 : 				//???
; 2566 : 				play_se(12, ATR_H_POS(a0), ATR_V_POS(a0));

  00396	ff 76 1c	 push	 DWORD PTR [esi+28]
  00399	ff 76 18	 push	 DWORD PTR [esi+24]
  0039c	6a 0c		 push	 12			; 0000000cH
  0039e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 2567 : 				//?????????
; 2568 : 				set_hit_mark(a0);

  003a3	56		 push	 esi
  003a4	e8 00 00 00 00	 call	 ?set_hit_mark@@YAXPAUaction@@@Z ; set_hit_mark
  003a9	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@bow:

; 2569 : 			}
; 2570 : 			ATR_STIMER(a0) = ATR_HIT_STOP(a0) + 64;		//Óé∑??Óëò?????

  003ac	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 2571 : 			ATR_INT_WORK0(a0) = Rnd(0, 8) - 4;		//??Óù≥?????

  003af	6a 08		 push	 8
  003b1	6a 00		 push	 0
  003b3	8a 41 5c	 mov	 al, BYTE PTR [ecx+92]
  003b6	04 40		 add	 al, 64			; 00000040H
  003b8	88 41 01	 mov	 BYTE PTR [ecx+1], al
  003bb	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2572 : 			ATR_INT_WORK1(a0) = Rnd(0, 8) - 4 - 28;		//??Óù≥?????!!!

  003c0	6a 08		 push	 8
  003c2	6a 00		 push	 0
  003c4	8d 48 fc	 lea	 ecx, DWORD PTR [eax-4]
  003c7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003ca	89 88 24 01 00
	00		 mov	 DWORD PTR [eax+292], ecx
  003d0	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  003d5	83 c4 10	 add	 esp, 16			; 00000010H
  003d8	8d 48 e0	 lea	 ecx, DWORD PTR [eax-32]
  003db	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003de	89 88 28 01 00
	00		 mov	 DWORD PTR [eax+296], ecx

; 2573 : #ifdef _SHOOTCHESTNUT	// Syu ADD ÂÆ†ÊäÄÔºö‰∏¢Ê†óÂ≠ê
; 2574 : 			if (ShooterNum == 101578)

  003e4	b8 00 00 00 00	 mov	 eax, OFFSET ?stick_bow@@YAXPAUaction@@@Z ; stick_bow
  003e9	81 3d 00 00 00
	00 ca 8c 01 00	 cmp	 DWORD PTR ?ShooterNum@@3HA, 101578 ; ShooterNum, 00018ccaH
  003f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?shoot@@YAXPAUaction@@@Z ; shoot
  003f8	0f 44 c1	 cmove	 eax, ecx

; 2575 : 				ATR_NAME(a0) = shoot;		//Óåπ?????
; 2576 : 			else
; 2577 : 				ATR_NAME(a0) = stick_bow;		//Óåπ?????
; 2578 : #else
; 2579 : 			ATR_NAME(a0) = stick_bow;		//Óåπ?????
; 2580 : #endif
; 2581 : 			ATR_VCT_NO(a0) = 1;				//

  003fb	89 46 08	 mov	 DWORD PTR [esi+8], eax
  003fe	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00401	c6 00 01	 mov	 BYTE PTR [eax], 1

; 2582 : 			ATR_CHR_NO(a0) = ATR_LONG_WORK(0, a0);		//?????Óüâ?

  00404	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00407	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]

; 2583 : 			ATR_V_POS(a0) -= 28;		//!!!

  0040d	83 46 1c e4	 add	 DWORD PTR [esi+28], -28	; ffffffe4H
  00411	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax

; 2584 : 			ATR_CHR_ACT(a0) = 0;
; 2585 : 			p_missile[0] = NULL;		//???????Óåñ

  00417	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0

; 2586 : 			ATR_SPD(a0) = 40;		//?Óù≥ÓüúÓíú

  00421	c7 86 34 01 00
	00 28 00 00 00	 mov	 DWORD PTR [esi+308], 40	; 00000028H

; 2587 : 			//???
; 2588 : 		}

  0042b	eb 42		 jmp	 SHORT $LN6@bow
$LN5@bow:

; 2589 : 		else
; 2590 : 		{
; 2591 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0);		//?ÓôÆ??Óå´

  0042d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00430	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 2592 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0);		//

  00436	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00439	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 2593 : 			gemini(a0);		//?ÓôÆ

  0043c	56		 push	 esi
  0043d	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
  00443	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2594 : 			ATR_INT_WORK2(a0) = ATR_H_POS(a0) - ATR_INT_WORK2(a0);

  00448	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0044b	83 c4 04	 add	 esp, 4
  0044e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00451	2b 81 2c 01 00
	00		 sub	 eax, DWORD PTR [ecx+300]
  00457	89 81 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], eax

; 2595 : 			ATR_INT_WORK3(a0) = ATR_V_POS(a0) - ATR_INT_WORK3(a0);

  0045d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00460	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00463	2b 81 30 01 00
	00		 sub	 eax, DWORD PTR [ecx+304]
  00469	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax
$LN6@bow:

; 2617 : 		break;
; 2618 : 	}
; 2619 : }

  0046f	6a 00		 push	 0
  00471	6a 00		 push	 0
  00473	56		 push	 esi
  00474	c7 86 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+332], 4
  0047e	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00483	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@bow:
  00486	5f		 pop	 edi
  00487	5e		 pop	 esi
  00488	8b e5		 mov	 esp, ebp
  0048a	5d		 pop	 ebp
  0048b	c3		 ret	 0
?bow@@YAXPAUaction@@@Z ENDP				; bow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?shoot@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d0$ = -4						; size = 4
_d1$ = 8						; size = 4
_a0$ = 8						; size = 4
?shoot@@YAXPAUaction@@@Z PROC				; shoot, COMDAT

; 2317 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2318 : 	ACTION *a1, *a2;
; 2319 : 	int d0, d1;
; 2320 : 
; 2321 : 	a1 = ATR_BODY_WORK(0, a0);

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	57		 push	 edi
  00009	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 2322 : 	if (ATR_NAME(a1) == NULL)

  0000c	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0000f	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00013	75 1b		 jne	 SHORT $LN4@shoot

; 2323 : 	{
; 2324 : 		DeathAction(a0);

  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 2325 : 		ATR_STIMER(ATR_BODY_WORK(1, a0))++;

  0001b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001e	83 c4 04	 add	 esp, 4
  00021	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00024	5f		 pop	 edi

; 2413 : }

  00025	5e		 pop	 esi
  00026	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00029	fe 40 01	 inc	 BYTE PTR [eax+1]
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN4@shoot:

; 2326 : 		return;
; 2327 : 	}
; 2328 : 	switch (ATR_VCT_NO(a0))

  00030	8a 0a		 mov	 cl, BYTE PTR [edx]
  00032	84 c9		 test	 cl, cl
  00034	0f 84 73 01 00
	00		 je	 $LN5@shoot
  0003a	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0003d	3c 02		 cmp	 al, 2
  0003f	0f 87 fa 01 00
	00		 ja	 $LN26@shoot

; 2355 : 		break;
; 2356 : 	case 1:
; 2357 : 	case 2:
; 2358 : 	case 3:
; 2359 : 		a1 = ATR_BODY_WORK(0, a0);
; 2360 : 		if (ATR_VCT_NO(a0) == 2)

  00045	80 f9 02	 cmp	 cl, 2
  00048	75 17		 jne	 SHORT $LN12@shoot

; 2361 : 		{
; 2362 : 			if (ATR_VCT_NO(a1) >= VCT_NO_DIE + 1)

  0004a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0004d	80 38 fb	 cmp	 BYTE PTR [eax], 251	; 000000fbH
  00050	72 43		 jb	 SHORT $LN21@shoot

; 2333 : 		{
; 2334 : 			DeathAction(a0);

  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00058	83 c4 04	 add	 esp, 4
  0005b	5f		 pop	 edi

; 2413 : }

  0005c	5e		 pop	 esi
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN12@shoot:

; 2363 : 			{
; 2364 : 				DeathAction(a0);
; 2365 : 				return;
; 2366 : 			}
; 2367 : 		}
; 2368 : 		else if (ATR_VCT_NO(a0) == 3)

  00061	80 f9 03	 cmp	 cl, 3
  00064	75 1a		 jne	 SHORT $LN15@shoot

; 2369 : 		{
; 2370 : 			if (ATR_VCT_NO(ATR_BODY_WORK(1, a0)) == 0)

  00066	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00069	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0006c	80 38 00	 cmp	 BYTE PTR [eax], 0
  0006f	75 24		 jne	 SHORT $LN21@shoot

; 2333 : 		{
; 2334 : 			DeathAction(a0);

  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00077	83 c4 04	 add	 esp, 4
  0007a	5f		 pop	 edi

; 2413 : }

  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN15@shoot:

; 2371 : 			{
; 2372 : 				DeathAction(a0);
; 2373 : 				return;
; 2374 : 			}
; 2375 : 		}
; 2376 : 		else
; 2377 : 		{
; 2378 : 			if (ATR_VCT_NO(a1) >= VCT_NO_DIE || ATR_VCT_NO(a1) == 0)

  00080	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00083	8a 00		 mov	 al, BYTE PTR [eax]
  00085	3c fa		 cmp	 al, 250			; 000000faH
  00087	0f 83 e1 00 00
	00		 jae	 $LN19@shoot
  0008d	84 c0		 test	 al, al
  0008f	0f 84 d9 00 00
	00		 je	 $LN19@shoot
$LN21@shoot:

; 2390 : 					break;
; 2391 : 				}
; 2392 : 			}
; 2393 : 		}
; 2394 : 		ATR_H_POS(a0) = ATR_H_POS(a1) + ATR_INT_WORK0(a0);

  00095	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  0009b	03 47 18	 add	 eax, DWORD PTR [edi+24]

; 2395 : 		ATR_V_POS(a0) = ATR_V_POS(a1) + ATR_INT_WORK1(a0) + 32 + (a0->anim_cnt * 4);

  0009e	8b 8e 5c 01 00
	00		 mov	 ecx, DWORD PTR [esi+348]
  000a4	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000a7	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  000ad	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  000b0	83 c0 20	 add	 eax, 32			; 00000020H
  000b3	03 47 1c	 add	 eax, DWORD PTR [edi+28]
  000b6	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 2396 : 		ATR_CHR_ANG(a0) = (ATR_CHR_ANG(a1) + 4) & 7;

  000b9	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  000bf	83 e8 04	 sub	 eax, 4
  000c2	83 e0 07	 and	 eax, 7
  000c5	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax

; 2397 : 		if (a0->anim_cnt == 5)

  000cb	83 f9 05	 cmp	 ecx, 5
  000ce	75 0c		 jne	 SHORT $LN22@shoot

; 2398 : 			ATR_CHR_NO(a0) = 0;

  000d0	c7 86 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+324], 0
  000da	eb 13		 jmp	 SHORT $LN24@shoot
$LN22@shoot:

; 2399 : 		else if (ATR_CHR_NO(a0) != 0)

  000dc	83 be 44 01 00
	00 00		 cmp	 DWORD PTR [esi+324], 0
  000e3	74 0a		 je	 SHORT $LN24@shoot

; 2400 : 			ATR_CHR_NO(a0) = 101611;

  000e5	c7 86 44 01 00
	00 eb 8c 01 00	 mov	 DWORD PTR [esi+324], 101611 ; 00018cebH
$LN24@shoot:

; 2401 : 		ATR_H_MINI(a0) = 0;

  000ef	c7 86 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+316], 0

; 2402 : 		ATR_V_MINI(a0) = 0;

  000f9	c7 86 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+320], 0

; 2403 : 		ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a1)];

  00103	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]

; 2404 : 		gemini(a0);

  00109	56		 push	 esi
  0010a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  00111	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  00117	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2405 : 		gemini(a0);

  0011c	56		 push	 esi
  0011d	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2406 : 		if (ATR_CHR_ANG(a1) == 3 || ATR_CHR_ANG(a1) == 4 || ATR_CHR_ANG(a1) == 5)

  00122	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  00128	83 c4 08	 add	 esp, 8
  0012b	83 f8 03	 cmp	 eax, 3
  0012e	74 25		 je	 SHORT $LN27@shoot
  00130	83 f8 04	 cmp	 eax, 4
  00133	74 20		 je	 SHORT $LN27@shoot
  00135	83 f8 05	 cmp	 eax, 5
  00138	74 1b		 je	 SHORT $LN27@shoot

; 2408 : 		else
; 2409 : 			ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  0013a	8a 47 15	 mov	 al, BYTE PTR [edi+21]

; 2410 : 		break;
; 2411 : 	}
; 2412 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0013d	6a 00		 push	 0
  0013f	fe c0		 inc	 al
  00141	6a 00		 push	 0
  00143	56		 push	 esi
  00144	88 46 15	 mov	 BYTE PTR [esi+21], al
  00147	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0014c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014f	5f		 pop	 edi

; 2413 : }

  00150	5e		 pop	 esi
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
$LN27@shoot:

; 2407 : 			ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1);

  00155	8a 47 15	 mov	 al, BYTE PTR [edi+21]

; 2410 : 		break;
; 2411 : 	}
; 2412 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00158	6a 00		 push	 0
  0015a	6a 00		 push	 0
  0015c	56		 push	 esi
  0015d	88 46 15	 mov	 BYTE PTR [esi+21], al
  00160	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00165	83 c4 0c	 add	 esp, 12			; 0000000cH
  00168	5f		 pop	 edi

; 2413 : }

  00169	5e		 pop	 esi
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
$LN19@shoot:

; 2379 : 			{
; 2380 : 				ATR_STIMER(ATR_BODY_WORK(1, a0))++;

  0016e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00171	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00174	fe 40 01	 inc	 BYTE PTR [eax+1]

; 2381 : 				if (ATR_VCT_NO(a1) == 0)

  00177	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0017a	80 38 00	 cmp	 BYTE PTR [eax], 0
  0017d	75 15		 jne	 SHORT $LN20@shoot

; 2382 : 				{
; 2383 : 					DeathAction(a0);

  0017f	56		 push	 esi
  00180	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 2384 : 					ATR_VCT_NO(a0) = 3;

  00185	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00188	83 c4 04	 add	 esp, 4
  0018b	5f		 pop	 edi
  0018c	c6 00 03	 mov	 BYTE PTR [eax], 3

; 2413 : }

  0018f	5e		 pop	 esi
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c3		 ret	 0
$LN20@shoot:

; 2385 : 					return;
; 2386 : 				}
; 2387 : 				else
; 2388 : 				{
; 2389 : 					ATR_VCT_NO(a0) = 2;

  00194	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2410 : 		break;
; 2411 : 	}
; 2412 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	56		 push	 esi
  0019c	c6 00 02	 mov	 BYTE PTR [eax], 2
  0019f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  001a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a7	5f		 pop	 edi

; 2413 : }

  001a8	5e		 pop	 esi
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c3		 ret	 0
$LN5@shoot:

; 2329 : 	{
; 2330 : 	case 0:
; 2331 : 		a1 = ATR_BODY_WORK(1, a0);

  001ad	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 2332 : 		if (ATR_VCT_NO(a1) == 1)

  001b0	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001b3	80 38 01	 cmp	 BYTE PTR [eax], 1
  001b6	75 0f		 jne	 SHORT $LN6@shoot

; 2333 : 		{
; 2334 : 			DeathAction(a0);

  001b8	56		 push	 esi
  001b9	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  001be	83 c4 04	 add	 esp, 4
  001c1	5f		 pop	 edi

; 2413 : }

  001c2	5e		 pop	 esi
  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c3		 ret	 0
$LN6@shoot:

; 2335 : 			return;
; 2336 : 		}
; 2337 : 		ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  001c7	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  001ca	fe c0		 inc	 al
  001cc	88 46 15	 mov	 BYTE PTR [esi+21], al

; 2338 : 		a2 = ATR_BODY_WORK(0, a0);

  001cf	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 2339 : 		d0 = ATR_H_POS(a2);

  001d2	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  001d5	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 2340 : 		d1 = ATR_V_POS(a2);

  001d8	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  001db	89 45 08	 mov	 DWORD PTR _d1$[ebp], eax

; 2341 : 		radar(a1, &d0, &d1);

  001de	8d 45 08	 lea	 eax, DWORD PTR _d1$[ebp]
  001e1	50		 push	 eax
  001e2	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  001e5	50		 push	 eax
  001e6	57		 push	 edi
  001e7	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 2342 : 		ATR_STIMER(a0)++;

  001ec	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f2	fe 40 01	 inc	 BYTE PTR [eax+1]

; 2343 : 		if (ATR_CRS(a0) == 0)

  001f5	83 be 38 01 00
	00 00		 cmp	 DWORD PTR [esi+312], 0
  001fc	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  00202	75 13		 jne	 SHORT $LN7@shoot

; 2344 : 		{
; 2345 : 			if (ATR_SPD(a0) == 0)

  00204	85 c0		 test	 eax, eax
  00206	75 0c		 jne	 SHORT $LN9@shoot

; 2346 : 				ATR_CRS(a0) = 16;

  00208	c7 86 38 01 00
	00 10 00 00 00	 mov	 DWORD PTR [esi+312], 16	; 00000010H
  00212	eb 0a		 jmp	 SHORT $LN8@shoot
$LN9@shoot:

; 2347 : 			else
; 2348 : 				ATR_SPD(a0) -= 1;

  00214	48		 dec	 eax

; 2349 : 		}

  00215	eb 01		 jmp	 SHORT $LN30@shoot
$LN7@shoot:

; 2350 : 		else
; 2351 : 			ATR_SPD(a0) += 1;

  00217	40		 inc	 eax
$LN30@shoot:

; 2352 : 		gemini(a0);

  00218	89 86 34 01 00
	00		 mov	 DWORD PTR [esi+308], eax
$LN8@shoot:
  0021e	56		 push	 esi
  0021f	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2353 : 		ATR_H_POS(a0) += ATR_INT_WORK2(a1);

  00224	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00227	83 c4 04	 add	 esp, 4
  0022a	8b 80 2c 01 00
	00		 mov	 eax, DWORD PTR [eax+300]
  00230	01 46 18	 add	 DWORD PTR [esi+24], eax

; 2354 : 		ATR_V_POS(a0) += ATR_INT_WORK3(a1);

  00233	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00236	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [eax+304]
  0023c	01 46 1c	 add	 DWORD PTR [esi+28], eax
$LN26@shoot:

; 2410 : 		break;
; 2411 : 	}
; 2412 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0023f	6a 00		 push	 0
  00241	6a 00		 push	 0
  00243	56		 push	 esi
  00244	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00249	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024c	5f		 pop	 edi

; 2413 : }

  0024d	5e		 pop	 esi
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
?shoot@@YAXPAUaction@@@Z ENDP				; shoot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?stick_bow@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d0$ = -4						; size = 4
_d1$ = 8						; size = 4
_a0$ = 8						; size = 4
?stick_bow@@YAXPAUaction@@@Z PROC			; stick_bow, COMDAT

; 2192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2193 : 	ACTION *a1, *a2;
; 2194 : 	int d0, d1;
; 2195 : 
; 2196 : 	a1 = ATR_BODY_WORK(0, a0);		//Ó†¥Óïí??????

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	57		 push	 edi
  00009	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 2197 : 	if (ATR_NAME(a1) == NULL)		//ÓêçÓ°úÓé∑???

  0000c	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  0000f	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00013	75 1b		 jne	 SHORT $LN4@stick_bow

; 2198 : 	{
; 2199 : 		DeathAction(a0);		//Óé∑?

  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 2200 : 		ATR_STIMER(ATR_BODY_WORK(1, a0))++;		//???Óëò

  0001b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001e	83 c4 04	 add	 esp, 4
  00021	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00024	5f		 pop	 edi

; 2313 : }

  00025	5e		 pop	 esi
  00026	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00029	fe 40 01	 inc	 BYTE PTR [eax+1]
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN4@stick_bow:

; 2201 : 		return;
; 2202 : 	}
; 2203 : 
; 2204 : 	switch (ATR_VCT_NO(a0))

  00030	8a 11		 mov	 dl, BYTE PTR [ecx]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 49 01 00
	00		 je	 $LN5@stick_bow
  0003a	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0003d	3c 02		 cmp	 al, 2
  0003f	0f 87 d0 01 00
	00		 ja	 $LN23@stick_bow

; 2231 : 		break;
; 2232 : 	case 1:
; 2233 : 	case 2:
; 2234 : 	case 3:
; 2235 : 		a1 = ATR_BODY_WORK(0, a0);		//Óåπ???????
; 2236 : #if 0
; 2237 : 		if (ATR_VCT_NO(a0) == 2)		//?Ó†å?ÓôÆ??
; 2238 : 		{
; 2239 : 			if (ATR_VCT_NO(a1) >= VCT_NO_DIE + 1)		//Óôû?Óåø????
; 2240 : 			{
; 2241 : 				DeathAction(a0);		//Óé∑?
; 2242 : 				return;
; 2243 : 			}
; 2244 : 		}
; 2245 : 		else
; 2246 : 		{
; 2247 : 			if (ATR_VCT_NO(a1) >= VCT_NO_DIE || ATR_VCT_NO(a1) == 0)		//Óïò???????
; 2248 : 			{
; 2249 : 				if (ATR_VCT_NO(a1) == 0)		//Óïò???
; 2250 : 				{
; 2251 : 					DeathAction(a0);		//Óé∑?
; 2252 : 					ATR_STIMER(ATR_BODY_WORK(1, a0))++;		//???Óëò
; 2253 : 					return;
; 2254 : 				}
; 2255 : 				else
; 2256 : 				{
; 2257 : 					ATR_VCT_NO(a0) = 2;
; 2258 : 					break;
; 2259 : 				}
; 2260 : 			}
; 2261 : 		}
; 2262 : #else
; 2263 : 		if (ATR_VCT_NO(a0) == 2)		//?Ó†å?ÓôÆ??

  00045	80 fa 02	 cmp	 dl, 2
  00048	75 17		 jne	 SHORT $LN12@stick_bow

; 2264 : 		{
; 2265 : 			if (ATR_VCT_NO(a1) >= VCT_NO_DIE + 1)		//Óôû?Óåø????

  0004a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0004d	80 38 fb	 cmp	 BYTE PTR [eax], 251	; 000000fbH
  00050	72 43		 jb	 SHORT $LN21@stick_bow

; 2209 : 		{
; 2210 : 			DeathAction(a0);		//Óé∑?

  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00058	83 c4 04	 add	 esp, 4
  0005b	5f		 pop	 edi

; 2313 : }

  0005c	5e		 pop	 esi
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN12@stick_bow:

; 2266 : 			{
; 2267 : 				DeathAction(a0);		//Óé∑?
; 2268 : 				return;
; 2269 : 			}
; 2270 : 		}
; 2271 : 		else if (ATR_VCT_NO(a0) == 3)

  00061	80 fa 03	 cmp	 dl, 3
  00064	75 1a		 jne	 SHORT $LN15@stick_bow

; 2272 : 		{
; 2273 : 			if (ATR_VCT_NO(ATR_BODY_WORK(1, a0)) == 0)		//??Óé∑???

  00066	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00069	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0006c	80 38 00	 cmp	 BYTE PTR [eax], 0
  0006f	75 24		 jne	 SHORT $LN21@stick_bow

; 2209 : 		{
; 2210 : 			DeathAction(a0);		//Óé∑?

  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00077	83 c4 04	 add	 esp, 4
  0007a	5f		 pop	 edi

; 2313 : }

  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN15@stick_bow:

; 2274 : 			{
; 2275 : 				DeathAction(a0);		//Óé∑?
; 2276 : 				return;
; 2277 : 			}
; 2278 : 		}
; 2279 : 		else
; 2280 : 		{
; 2281 : 			if (ATR_VCT_NO(a1) >= VCT_NO_DIE || ATR_VCT_NO(a1) == 0)		//Óïò???????

  00080	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00083	8a 00		 mov	 al, BYTE PTR [eax]
  00085	3c fa		 cmp	 al, 250			; 000000faH
  00087	0f 83 c3 00 00
	00		 jae	 $LN19@stick_bow
  0008d	84 c0		 test	 al, al
  0008f	0f 84 bb 00 00
	00		 je	 $LN19@stick_bow
$LN21@stick_bow:

; 2287 : 					return;
; 2288 : 				}
; 2289 : 				else
; 2290 : 				{
; 2291 : 					ATR_VCT_NO(a0) = 2;
; 2292 : 					break;
; 2293 : 				}
; 2294 : 			}
; 2295 : 		}
; 2296 : #endif
; 2297 : 		ATR_H_POS(a0) = ATR_H_POS(a1) + ATR_INT_WORK0(a0);

  00095	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  0009b	03 47 18	 add	 eax, DWORD PTR [edi+24]
  0009e	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 2298 : 		ATR_V_POS(a0) = ATR_V_POS(a1) + ATR_INT_WORK1(a0);

  000a1	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  000a7	03 47 1c	 add	 eax, DWORD PTR [edi+28]
  000aa	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 2299 : 		ATR_CHR_ANG(a0) = (ATR_CHR_ANG(a1) + 4) & 7;		//?????

  000ad	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  000b3	83 e8 04	 sub	 eax, 4

; 2300 : 		ATR_CHR_NO(a0) = CG_ARROW_00 + stick_ang_tbl[ATR_CHR_ANG(a0)];		//
; 2301 : 		ATR_H_MINI(a0) = 0;		//?Óù≥ÓüúÓíú

  000b6	c7 86 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+316], 0
  000c0	83 e0 07	 and	 eax, 7

; 2302 : 		ATR_V_MINI(a0) = 0;

  000c3	c7 86 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+320], 0
  000cd	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax

; 2303 : 		ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a1)];
; 2304 : 		gemini(a0);

  000d3	56		 push	 esi
  000d4	0f be 80 00 00
	00 00		 movsx	 eax, BYTE PTR ?stick_ang_tbl@@3PADA[eax]
  000db	05 1e 64 00 00	 add	 eax, 25630		; 0000641eH
  000e0	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  000e6	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  000ec	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  000f3	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  000f9	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2305 : 		gemini(a0);

  000fe	56		 push	 esi
  000ff	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2306 : 		if (ATR_CHR_ANG(a1) == 3 || ATR_CHR_ANG(a1) == 4 || ATR_CHR_ANG(a1) == 5)		//??????

  00104	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  0010a	83 c4 08	 add	 esp, 8
  0010d	83 f8 03	 cmp	 eax, 3
  00110	74 25		 je	 SHORT $LN24@stick_bow
  00112	83 f8 04	 cmp	 eax, 4
  00115	74 20		 je	 SHORT $LN24@stick_bow
  00117	83 f8 05	 cmp	 eax, 5
  0011a	74 1b		 je	 SHORT $LN24@stick_bow

; 2308 : 		else
; 2309 : 			ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;		//Óù∏Óçï?Óìè???

  0011c	8a 47 15	 mov	 al, BYTE PTR [edi+21]

; 2310 : 		break;
; 2311 : 	}
; 2312 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0011f	6a 00		 push	 0
  00121	fe c0		 inc	 al
  00123	6a 00		 push	 0
  00125	56		 push	 esi
  00126	88 46 15	 mov	 BYTE PTR [esi+21], al
  00129	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00131	5f		 pop	 edi

; 2313 : }

  00132	5e		 pop	 esi
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
$LN24@stick_bow:

; 2307 : 			ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1);		//Óù∏Óçï?Óìè???

  00137	8a 47 15	 mov	 al, BYTE PTR [edi+21]

; 2310 : 		break;
; 2311 : 	}
; 2312 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0013a	6a 00		 push	 0
  0013c	6a 00		 push	 0
  0013e	56		 push	 esi
  0013f	88 46 15	 mov	 BYTE PTR [esi+21], al
  00142	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014a	5f		 pop	 edi

; 2313 : }

  0014b	5e		 pop	 esi
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
$LN19@stick_bow:

; 2282 : 			{
; 2283 : 				ATR_STIMER(ATR_BODY_WORK(1, a0))++;		//???Óëò

  00150	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00153	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00156	fe 40 01	 inc	 BYTE PTR [eax+1]

; 2284 : 				if (ATR_VCT_NO(a1) == 0)		//Óïò???

  00159	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0015c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0015f	80 38 00	 cmp	 BYTE PTR [eax], 0
  00162	75 09		 jne	 SHORT $LN20@stick_bow

; 2285 : 				{
; 2286 : 					ATR_VCT_NO(a0) = 3;

  00164	5f		 pop	 edi
  00165	c6 01 03	 mov	 BYTE PTR [ecx], 3

; 2313 : }

  00168	5e		 pop	 esi
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
$LN20@stick_bow:

; 2310 : 		break;
; 2311 : 	}
; 2312 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0016d	6a 00		 push	 0
  0016f	6a 00		 push	 0
  00171	56		 push	 esi
  00172	c6 01 02	 mov	 BYTE PTR [ecx], 2
  00175	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0017a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017d	5f		 pop	 edi

; 2313 : }

  0017e	5e		 pop	 esi
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
$LN5@stick_bow:

; 2205 : 	{
; 2206 : 	case 0:
; 2207 : 		a1 = ATR_BODY_WORK(1, a0);		//?Óôπ???????

  00183	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 2208 : 		if (ATR_VCT_NO(a1) == 1)

  00186	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00189	80 38 01	 cmp	 BYTE PTR [eax], 1
  0018c	75 0f		 jne	 SHORT $LN6@stick_bow

; 2209 : 		{
; 2210 : 			DeathAction(a0);		//Óé∑?

  0018e	56		 push	 esi
  0018f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00194	83 c4 04	 add	 esp, 4
  00197	5f		 pop	 edi

; 2313 : }

  00198	5e		 pop	 esi
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c3		 ret	 0
$LN6@stick_bow:

; 2211 : 			return;
; 2212 : 		}
; 2213 : 		ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  0019d	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  001a0	fe c0		 inc	 al
  001a2	88 46 15	 mov	 BYTE PTR [esi+21], al

; 2214 : 		a2 = ATR_BODY_WORK(0, a0);		//Óò©???????

  001a5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 2215 : 		d0 = ATR_H_POS(a2);

  001a8	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  001ab	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 2216 : 		d1 = ATR_V_POS(a2);

  001ae	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  001b1	89 45 08	 mov	 DWORD PTR _d1$[ebp], eax

; 2217 : 		radar(a1, &d0, &d1);	//????

  001b4	8d 45 08	 lea	 eax, DWORD PTR _d1$[ebp]
  001b7	50		 push	 eax
  001b8	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  001bb	50		 push	 eax
  001bc	57		 push	 edi
  001bd	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 2218 : 		ATR_STIMER(a0)++;

  001c2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c8	fe 40 01	 inc	 BYTE PTR [eax+1]

; 2219 : 		if (ATR_CRS(a0) == 0)		//ÓêØÓêÑ??

  001cb	83 be 38 01 00
	00 00		 cmp	 DWORD PTR [esi+312], 0
  001d2	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  001d8	75 13		 jne	 SHORT $LN7@stick_bow

; 2220 : 		{
; 2221 : 			if (ATR_SPD(a0) == 0)		//???Óåø??

  001da	85 c0		 test	 eax, eax
  001dc	75 0c		 jne	 SHORT $LN9@stick_bow

; 2222 : 				ATR_CRS(a0) = 16;

  001de	c7 86 38 01 00
	00 10 00 00 00	 mov	 DWORD PTR [esi+312], 16	; 00000010H
  001e8	eb 0a		 jmp	 SHORT $LN8@stick_bow
$LN9@stick_bow:

; 2223 : 			else
; 2224 : 				ATR_SPD(a0) -= 1;

  001ea	48		 dec	 eax

; 2225 : 		}

  001eb	eb 01		 jmp	 SHORT $LN27@stick_bow
$LN7@stick_bow:

; 2226 : 		else
; 2227 : 			ATR_SPD(a0) += 1;

  001ed	40		 inc	 eax
$LN27@stick_bow:

; 2228 : 		gemini(a0);

  001ee	89 86 34 01 00
	00		 mov	 DWORD PTR [esi+308], eax
$LN8@stick_bow:
  001f4	56		 push	 esi
  001f5	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2229 : 		ATR_H_POS(a0) += ATR_INT_WORK2(a1);

  001fa	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001fd	83 c4 04	 add	 esp, 4
  00200	8b 80 2c 01 00
	00		 mov	 eax, DWORD PTR [eax+300]
  00206	01 46 18	 add	 DWORD PTR [esi+24], eax

; 2230 : 		ATR_V_POS(a0) += ATR_INT_WORK3(a1);

  00209	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0020c	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [eax+304]
  00212	01 46 1c	 add	 DWORD PTR [esi+28], eax
$LN23@stick_bow:

; 2310 : 		break;
; 2311 : 	}
; 2312 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00215	6a 00		 push	 0
  00217	6a 00		 push	 0
  00219	56		 push	 esi
  0021a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0021f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00222	5f		 pop	 edi

; 2313 : }

  00223	5e		 pop	 esi
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
?stick_bow@@YAXPAUaction@@@Z ENDP			; stick_bow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?boomerang@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d0$ = -8						; size = 4
_d1$ = -4						; size = 4
_a0$ = 8						; size = 4
?boomerang@@YAXPAUaction@@@Z PROC			; boomerang, COMDAT

; 1816 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1817 : 	ACTION *a1, *a2;
; 1818 : 	int d0, d1;
; 1819 : 	float dx, dy;
; 1820 : 
; 1821 : 	if (ATR_HIT_STOP(a0))

  0000b	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  0000e	57		 push	 edi
  0000f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00012	8a 41 5c	 mov	 al, BYTE PTR [ecx+92]
  00015	84 c0		 test	 al, al
  00017	74 0b		 je	 SHORT $LN5@boomerang

; 1822 : 	{
; 1823 : 		if (--ATR_HIT_STOP(a0))

  00019	2c 01		 sub	 al, 1
  0001b	88 41 5c	 mov	 BYTE PTR [ecx+92], al
  0001e	0f 85 fd 07 00
	00		 jne	 $LN1@boomerang
$LN5@boomerang:

; 1824 : 			return;
; 1825 : 	}
; 1826 : 	switch (ATR_VCT_NO(a0))

  00024	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00027	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002a	83 e8 00	 sub	 eax, 0
  0002d	0f 84 a0 06 00
	00		 je	 $LN6@boomerang
  00033	83 e8 01	 sub	 eax, 1
  00036	0f 84 d4 04 00
	00		 je	 $LN20@boomerang
  0003c	83 e8 01	 sub	 eax, 1
  0003f	0f 85 cf 07 00
	00		 jne	 $LN19@boomerang

; 1956 : 			}
; 1957 : 		}
; 1958 : 		break;
; 1959 : 	case 2:
; 1960 : 
; 1961 : 		if (ATR_SPD(a0) != 40)

  00045	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  0004b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0004e	74 07		 je	 SHORT $LN38@boomerang

; 1962 : 			ATR_SPD(a0)++;

  00050	40		 inc	 eax
  00051	89 86 34 01 00
	00		 mov	 DWORD PTR [esi+308], eax
$LN38@boomerang:

; 1963 : 		a1 = ATR_BODY_WORK(0, a0);

  00057	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]

; 1964 : 		d0 = ATR_H_POS(a1);

  0005a	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0005d	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx

; 1965 : 		d1 = ATR_V_POS(a1);

  00061	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00064	89 44 24 14	 mov	 DWORD PTR _d1$[esp+24], eax

; 1966 : 		radar2(a0, d0, d1, ATR_LONG_WORK(1, a0));

  00068	ff b2 38 01 00
	00		 push	 DWORD PTR [edx+312]
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ?radar2@@YAHPAUaction@@HHH@Z ; radar2

; 1967 : 		gemini(a0);

  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 1968 : 		dx = (float)(d0 - ATR_H_POS(a0));

  0007c	8b 44 24 24	 mov	 eax, DWORD PTR _d0$[esp+44]
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	2b 46 18	 sub	 eax, DWORD PTR [esi+24]
  00086	66 0f 6e c8	 movd	 xmm1, eax

; 1969 : 		dy = (float)(d1 - ATR_V_POS(a0));

  0008a	8b 44 24 14	 mov	 eax, DWORD PTR _d1$[esp+24]
  0008e	2b 46 1c	 sub	 eax, DWORD PTR [esi+28]
  00091	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00094	66 0f 6e c0	 movd	 xmm0, eax
  00098	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 1970 : 		d0 = (int)sqrt((double)(dx * dx + dy * dy));

  0009b	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0009f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a3	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a7	0f 57 c9	 xorps	 xmm1, xmm1
  000aa	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ad	66 0f 2e c8	 ucomisd xmm1, xmm0
  000b1	77 06		 ja	 SHORT $LN98@boomerang
  000b3	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  000b7	eb 05		 jmp	 SHORT $LN99@boomerang
$LN98@boomerang:
  000b9	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN99@boomerang:
  000be	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000c1	f2 0f 2c d0	 cvttsd2si edx, xmm0
  000c5	89 54 24 10	 mov	 DWORD PTR _d0$[esp+24], edx
  000c9	81 fa e8 03 00
	00		 cmp	 edx, 1000		; 000003e8H

; 1971 : 
; 1972 : 		if (d0 > 1000) //ÂΩìÂõûÊóãÈïñË∑ùÁ¶ªÂ§ß‰∫é1000Êó∂ÔºåÁõ¥Êé•ÁªìÊùüÂä®Áîª

  000cf	7e 55		 jle	 SHORT $LN39@boomerang

; 1973 : 		{
; 1974 : 			ATR_COUNTER_FLG(a0) = 1;

  000d1	c6 81 0c 01 00
	00 01		 mov	 BYTE PTR [ecx+268], 1

; 1975 : 			ATR_LONG_WORK(2, a0) = 0;

  000d8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000db	c7 80 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+316], 0

; 1976 : 
; 1977 : 			if (ATR_PLACE_NO(a1) == 17)

  000e5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000e8	8a 88 1f 01 00
	00		 mov	 cl, BYTE PTR [eax+287]
  000ee	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000f1	80 f9 11	 cmp	 cl, 17			; 00000011H
  000f4	75 16		 jne	 SHORT $LN40@boomerang

; 1978 : 			{
; 1979 : 				ATR_H_POS(a0) = ATR_H_POS(a1) + 128;

  000f6	83 e8 80	 sub	 eax, -128		; ffffff80H
  000f9	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 1980 : 				ATR_V_POS(a0) = ATR_V_POS(a1) - 96;

  000fc	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000ff	83 e8 60	 sub	 eax, 96			; 00000060H

; 1983 : 			{
; 1984 : 				ATR_H_POS(a0) = ATR_H_POS(a1) + 256;
; 1985 : 				ATR_V_POS(a0) = ATR_V_POS(a1) - 192;
; 1986 : 			}
; 1987 : 			else
; 1988 : 			{
; 1989 : 				ATR_H_POS(a0) = ATR_H_POS(a1) + 256;
; 1990 : 				ATR_V_POS(a0) = ATR_V_POS(a1) - 192;
; 1991 : 			}
; 1992 : 			return;

  00102	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 2186 : }

  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
$LN40@boomerang:

; 1981 : 			}
; 1982 : 			else if (ATR_PLACE_NO(a1) == 16)

  0010c	05 00 01 00 00	 add	 eax, 256		; 00000100H
  00111	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00114	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00117	2d c0 00 00 00	 sub	 eax, 192		; 000000c0H

; 1983 : 			{
; 1984 : 				ATR_H_POS(a0) = ATR_H_POS(a1) + 256;
; 1985 : 				ATR_V_POS(a0) = ATR_V_POS(a1) - 192;
; 1986 : 			}
; 1987 : 			else
; 1988 : 			{
; 1989 : 				ATR_H_POS(a0) = ATR_H_POS(a1) + 256;
; 1990 : 				ATR_V_POS(a0) = ATR_V_POS(a1) - 192;
; 1991 : 			}
; 1992 : 			return;

  0011c	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 2186 : }

  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
$LN39@boomerang:

; 1993 : 		}
; 1994 : 
; 1995 : 		if (ATR_COUNTER_FLG(a0) == 1)

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMapNo@@3HA ; BattleMapNo
  0012b	bb 02 00 00 00	 mov	 ebx, 2
  00130	05 6c ff ff ff	 add	 eax, -148		; ffffff6cH
  00135	80 b9 0c 01 00
	00 01		 cmp	 BYTE PTR [ecx+268], 1
  0013c	75 0c		 jne	 SHORT $LN44@boomerang

; 1996 : 		{
; 1997 : 			if (BattleMapNo >= 148 && BattleMapNo <= 150)
; 1998 : 				d1 = 10 + 5;
; 1999 : 			else
; 2000 : 				d1 = 10;
; 2001 : 		}

  0013e	3b d8		 cmp	 ebx, eax
  00140	1b c0		 sbb	 eax, eax
  00142	83 e0 fb	 and	 eax, -5			; fffffffbH
  00145	83 c0 0f	 add	 eax, 15			; 0000000fH
  00148	eb 0a		 jmp	 SHORT $LN48@boomerang
$LN44@boomerang:

; 2002 : 		else
; 2003 : 		{
; 2004 : 			if (BattleMapNo >= 148 && BattleMapNo <= 150)

  0014a	3b d8		 cmp	 ebx, eax
  0014c	1b c0		 sbb	 eax, eax
  0014e	83 e0 f6	 and	 eax, -10		; fffffff6H
  00151	83 c0 1e	 add	 eax, 30			; 0000001eH
$LN48@boomerang:

; 2005 : 				d1 = 20 + 10;
; 2006 : 			else
; 2007 : 				d1 = 20;
; 2008 : 		}
; 2009 : 		if (d0 < 80)

  00154	89 44 24 14	 mov	 DWORD PTR _d1$[esp+24], eax
  00158	83 fa 50	 cmp	 edx, 80			; 00000050H
  0015b	7d 40		 jge	 SHORT $LN51@boomerang

; 2010 : 		{
; 2011 : 			if (ATR_COUNTER_FLG(a0) == 1 && ATR_LONG_WORK(2, a0) == 0)

  0015d	80 b9 0c 01 00
	00 01		 cmp	 BYTE PTR [ecx+268], 1
  00164	75 37		 jne	 SHORT $LN51@boomerang
  00166	83 b9 3c 01 00
	00 00		 cmp	 DWORD PTR [ecx+316], 0
  0016d	75 2e		 jne	 SHORT $LN51@boomerang

; 2012 : 			{
; 2013 : 				ATR_LONG_WORK(2, a0) = 1;

  0016f	c7 81 3c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+316], 1

; 2014 : 				a1 = ATR_BODY_WORK(1, a0);

  00179	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0017c	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 2015 : 				ATR_VCT_NO(a1) = 72;

  0017f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00182	c6 00 48	 mov	 BYTE PTR [eax], 72	; 00000048H

; 2016 : 				play_se(14, ATR_H_POS(a0), ATR_V_POS(a0));

  00185	ff 76 1c	 push	 DWORD PTR [esi+28]
  00188	ff 76 18	 push	 DWORD PTR [esi+24]
  0018b	6a 0e		 push	 14			; 0000000eH
  0018d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00192	8b 54 24 1c	 mov	 edx, DWORD PTR _d0$[esp+36]
  00196	83 c4 0c	 add	 esp, 12			; 0000000cH
  00199	8b 44 24 14	 mov	 eax, DWORD PTR _d1$[esp+24]
$LN51@boomerang:

; 2017 : 			}
; 2018 : 		}
; 2019 : 		if (d0 < d1)

  0019d	3b d0		 cmp	 edx, eax
  0019f	0f 8d 6f 06 00
	00		 jge	 $LN19@boomerang

; 2020 : 		{
; 2021 : 			if (ATR_COUNTER_FLG(a0) == 1)

  001a5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001a8	80 b8 0c 01 00
	00 01		 cmp	 BYTE PTR [eax+268], 1
  001af	0f 84 8c 04 00
	00		 je	 $LN113@boomerang

; 2022 : 			{
; 2023 : 				DeathAction(a0);
; 2024 : 				p_missile[0] = NULL;
; 2025 : 				return;
; 2026 : 			}
; 2027 : 			ATR_LONG_WORK(2, a0) = 0;

  001b5	c7 80 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+316], 0

; 2028 : 			a2 = ATR_BODY_WORK(0, a0);

  001bf	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 2029 : 			if (ATR_LIFE(a2) <= 0)

  001c2	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001c5	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  001c9	7f 09		 jg	 SHORT $LN54@boomerang

; 2030 : 			{
; 2031 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;

  001cb	c6 41 5c 08	 mov	 BYTE PTR [ecx+92], 8

; 2159 : 			}
; 2160 : 		boomerang_200:

  001cf	e9 8b 02 00 00	 jmp	 $boomerang_200$115
$LN54@boomerang:

; 2032 : 				goto boomerang_200;
; 2033 : 			}
; 2034 : #ifdef _PETSKILL_ACUPUNCTURE
; 2035 : 			////////////////////////////////////
; 2036 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 2037 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP | ATT_ACUPUNCTURE

  001d4	f7 41 60 00 1c
	00 4a		 test	 DWORD PTR [ecx+96], 1241521152 ; 4a001c00H
  001db	74 09		 je	 SHORT $LN56@boomerang

; 2038 : #ifdef _PET_ITEM
; 2039 : 				| ATT_ATTACKBACK
; 2040 : #endif
; 2041 : 				))
; 2042 : #else
; 2043 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_ACUPUNCTURE
; 2044 : #ifdef _PET_ITEM
; 2045 : 				| ATT_ATTACKBACK
; 2046 : #endif
; 2047 : 				))
; 2048 : #endif
; 2049 : 				////////////////////////////////////
; 2050 : #else
; 2051 : 			////////////////////////////////////
; 2052 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 2053 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP))
; 2054 : #else
; 2055 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA))
; 2056 : #endif
; 2057 : 				////////////////////////////////////
; 2058 : #endif
; 2059 : 				set_guard_mark(a0);

  001dd	56		 push	 esi
  001de	e8 00 00 00 00	 call	 ?set_guard_mark@@YAXPAUaction@@@Z ; set_guard_mark
  001e3	83 c4 04	 add	 esp, 4
$LN56@boomerang:

; 2060 : 
; 2061 : 			ATR_COMBO(a1) = 0;

  001e6	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001e9	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0

; 2062 : 
; 2063 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  001f0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001f3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001f6	f6 c1 20	 test	 cl, 32			; 00000020H
  001f9	74 48		 je	 SHORT $LN57@boomerang

; 2064 : 			{
; 2065 : 				ATR_VCT_NO(a1) = 16;

  001fb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  001fe	c6 00 10	 mov	 BYTE PTR [eax], 16	; 00000010H

; 2066 : 				if (ATR_GROUP_FLG(a0) == 0)

  00201	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00204	80 78 5e 00	 cmp	 BYTE PTR [eax+94], 0

; 2067 : 					ATR_CRS(a1) = crs_change_tbl2[3];

  00208	0f b6 05 03 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+3
  0020f	74 07		 je	 SHORT $LN59@boomerang

; 2068 : 				else
; 2069 : 					ATR_CRS(a1) = crs_change_tbl2[7];

  00211	0f b6 05 07 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+7
$LN59@boomerang:

; 2070 : 				ATR_DAMAGE_ANG(a1) = crs_change_tbl[ATR_CRS(a1)];

  00218	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  0021e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00221	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  00227	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 2071 : 				ATR_STIMER(a1) = 0;

  0022d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00230	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 2072 : 				ATR_FIRST_FLG(a1) = 0;

  00234	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00237	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 2159 : 			}
; 2160 : 		boomerang_200:

  0023e	e9 1c 02 00 00	 jmp	 $boomerang_200$115
$LN57@boomerang:

; 2073 : 				goto boomerang_200;
; 2074 : 			}
; 2075 : 
; 2076 : 			if (!((ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) | (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)))

  00243	f7 c1 00 18 00
	00		 test	 ecx, 6144		; 00001800H
  00249	75 26		 jne	 SHORT $LN62@boomerang

; 2077 : 			{
; 2078 : 				if ((ATR_ATTACK_POW(0, a0) == 0) && (ATR_ATTACK_PET_POW(0, a0) == 0))

  0024b	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00252	75 1d		 jne	 SHORT $LN62@boomerang
  00254	83 b8 d4 01 00
	00 00		 cmp	 DWORD PTR [eax+468], 0
  0025b	75 14		 jne	 SHORT $LN62@boomerang

; 2079 : 				{
; 2080 : 					a2 = ATR_BODY_WORK(0, a0);
; 2081 : 
; 2082 : 					set_damage_num(a2, 0, -64);

  0025d	6a c0		 push	 -64			; ffffffc0H
  0025f	6a 00		 push	 0
  00261	ff 70 04	 push	 DWORD PTR [eax+4]
  00264	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00269	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2083 : 					goto boomerang_200;

  0026c	e9 ee 01 00 00	 jmp	 $boomerang_200$115
$LN62@boomerang:

; 2084 : 				}
; 2085 : 			}
; 2086 : 
; 2087 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_CRUSH)

  00271	f7 c1 00 20 00
	00		 test	 ecx, 8192		; 00002000H
  00277	74 0d		 je	 SHORT $LN64@boomerang

; 2088 : 				set_damage_num(a1, 19, -112);

  00279	6a 90		 push	 -112			; ffffff90H
  0027b	6a 13		 push	 19			; 00000013H
  0027d	57		 push	 edi
  0027e	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00283	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN64@boomerang:

; 2089 : 
; 2090 : 			ATR_AKO_FLG(a1) = 0;

  00286	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00289	c6 80 21 01 00
	00 00		 mov	 BYTE PTR [eax+289], 0

; 2091 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO1)

  00290	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00293	f6 40 60 40	 test	 BYTE PTR [eax+96], 64	; 00000040H
  00297	74 0d		 je	 SHORT $LN65@boomerang

; 2092 : 				ATR_AKO_FLG(a1) = 1;

  00299	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0029c	c6 80 21 01 00
	00 01		 mov	 BYTE PTR [eax+289], 1
  002a3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN65@boomerang:

; 2093 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO2)

  002a6	f6 40 60 80	 test	 BYTE PTR [eax+96], 128	; 00000080H
  002aa	74 0d		 je	 SHORT $LN66@boomerang

; 2094 : 				ATR_AKO_FLG(a1) = 2;

  002ac	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  002af	c6 80 21 01 00
	00 02		 mov	 BYTE PTR [eax+289], 2
  002b6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN66@boomerang:

; 2095 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DEATH)

  002b9	f6 40 60 01	 test	 BYTE PTR [eax+96], 1
  002bd	74 0a		 je	 SHORT $LN97@boomerang

; 2096 : 				ATR_LIFE(a1) = 0;

  002bf	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
  002c6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN97@boomerang:

; 2097 : 			if (ATR_GROUP_FLG(a0) == 0)

  002c9	80 78 5e 00	 cmp	 BYTE PTR [eax+94], 0
  002cd	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002d0	0f 95 c0	 setne	 al
  002d3	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [eax*4+1]
  002da	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 2098 : 				ATR_DAMAGE_ANG(a1) = 1;
; 2099 : 			else
; 2100 : 				ATR_DAMAGE_ANG(a1) = 5;
; 2101 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)

  002e0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002e3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  002e6	f7 c1 00 08 00
	00		 test	 ecx, 2048		; 00000800H
  002ec	74 7a		 je	 SHORT $LN70@boomerang

; 2102 : 			{
; 2103 : 				if (!ATR_COMBO(a1))

  002ee	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  002f1	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  002f8	0f 85 91 00 00
	00		 jne	 $LN76@boomerang

; 2104 : 				{
; 2105 : 
; 2106 : 					ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  002fe	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  00304	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2107 : 					ATR_LIFE(a1) += ATR_DAMAGE(a1);

  00307	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]

; 2108 : 					if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))

  0030a	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]

; 2109 : 						ATR_LIFE(a1) = ATR_MAX_LIFE(a1);
; 2110 : 					ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);
; 2111 : 					ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);
; 2112 : 					if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))
; 2113 : 						ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);
; 2114 : 					set_damage_num(a1, 14, -64);

  00310	6a c0		 push	 -64			; ffffffc0H
  00312	6a 0e		 push	 14			; 0000000eH
  00314	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00317	01 47 78	 add	 DWORD PTR [edi+120], eax
  0031a	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  0031d	3b c1		 cmp	 eax, ecx
  0031f	57		 push	 edi
  00320	0f 4f c1	 cmovg	 eax, ecx
  00323	89 47 78	 mov	 DWORD PTR [edi+120], eax
  00326	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00329	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  0032f	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax
  00335	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00338	8b 8f b4 01 00
	00		 mov	 ecx, DWORD PTR [edi+436]
  0033e	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  00344	01 87 b0 01 00
	00		 add	 DWORD PTR [edi+432], eax
  0034a	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  00350	3b c1		 cmp	 eax, ecx
  00352	0f 4f c1	 cmovg	 eax, ecx
  00355	89 87 b0 01 00
	00		 mov	 DWORD PTR [edi+432], eax
  0035b	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 2115 : 					ATR_ATTACK_POW(0, a0) = 0;

  00360	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00363	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2116 : 					ATR_ATTACK_PET_POW(0, a0) = 0;
; 2117 : 				}
; 2118 : 			}

  00366	eb 08		 jmp	 SHORT $LN104@boomerang
$LN70@boomerang:

; 2119 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA)

  00368	f7 c1 00 10 00
	00		 test	 ecx, 4096		; 00001000H
  0036e	74 19		 je	 SHORT $LN75@boomerang
$LN104@boomerang:

; 2126 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  00370	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0
  0037a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0037d	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  00387	eb 06		 jmp	 SHORT $LN76@boomerang
$LN75@boomerang:

; 2120 : 			{
; 2121 : 				ATR_ATTACK_POW(0, a0) = 0;
; 2122 : 				ATR_ATTACK_PET_POW(0, a0) = 0;
; 2123 : 			}
; 2124 : 			else
; 2125 : 				ATR_VCT_NO(a1) = 10;

  00389	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0038c	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH
$LN76@boomerang:

; 2126 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  0038f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00392	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00395	0f b6 40 60	 movzx	 eax, BYTE PTR [eax+96]
  00399	c0 e8 02	 shr	 al, 2
  0039c	24 01		 and	 al, 1
  0039e	88 81 01 01 00
	00		 mov	 BYTE PTR [ecx+257], al

; 2127 : 				ATR_KAISHIN(a1) = 1;
; 2128 : 			else
; 2129 : 				ATR_KAISHIN(a1) = 0;
; 2130 : 			ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  003a4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003a7	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  003aa	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  003b0	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 2131 : 			ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);

  003b3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003b6	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  003b9	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  003bf	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 2132 : 
; 2133 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_GUARD)

  003c5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003c8	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  003cb	0f b6 40 60	 movzx	 eax, BYTE PTR [eax+96]
  003cf	c0 e8 03	 shr	 al, 3
  003d2	24 01		 and	 al, 1
  003d4	88 81 1c 01 00
	00		 mov	 BYTE PTR [ecx+284], al

; 2134 : 				ATR_GUARD_FLG(a1) = 1;
; 2135 : 			else
; 2136 : 				ATR_GUARD_FLG(a1) = 0;
; 2137 : 			if (ATR_LIFE(a1) - ATR_DAMAGE(a1) <= 0)

  003da	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  003dd	8b d1		 mov	 edx, ecx
  003df	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  003e2	2b 41 58	 sub	 eax, DWORD PTR [ecx+88]
  003e5	85 c0		 test	 eax, eax
  003e7	7f 13		 jg	 SHORT $LN82@boomerang

; 2138 : 			{
; 2139 : 
; 2140 : 				if (ATR_COMBO(a1) == 0)

  003e9	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  003f0	75 0a		 jne	 SHORT $LN82@boomerang

; 2141 : 					ATR_KAISHIN(a1) = 1;

  003f2	c6 81 01 01 00
	00 01		 mov	 BYTE PTR [ecx+257], 1
  003f9	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN82@boomerang:

; 2142 : 			}
; 2143 : 			if (ATR_KAISHIN(a1))
; 2144 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM * 4;
; 2145 : 			else
; 2146 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;
; 2147 : 
; 2148 : 			if (ATR_DAMAGE(a1) || (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA) || (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION))

  003fc	80 ba 01 01 00
	00 00		 cmp	 BYTE PTR [edx+257], 0
  00403	b8 08 00 00 00	 mov	 eax, 8
  00408	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0040d	0f 44 c8	 cmove	 ecx, eax
  00410	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00413	88 48 5c	 mov	 BYTE PTR [eax+92], cl
  00416	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00419	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0041c	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00420	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  00423	75 07		 jne	 SHORT $LN86@boomerang
  00425	a9 00 18 00 00	 test	 eax, 6144		; 00001800H
  0042a	74 33		 je	 SHORT $boomerang_200$115
$LN86@boomerang:

; 2149 : 			{
; 2150 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER)

  0042c	a8 10		 test	 al, 16			; 00000010H
  0042e	74 16		 je	 SHORT $LN88@boomerang

; 2151 : 				{
; 2152 : 					if (ATR_COMBO(a1) == 0)

  00430	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00437	75 0d		 jne	 SHORT $LN88@boomerang

; 2153 : 						set_damage_num(a0, 1, -64 + 16);

  00439	6a d0		 push	 -48			; ffffffd0H
  0043b	6a 01		 push	 1
  0043d	56		 push	 esi
  0043e	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00443	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN88@boomerang:

; 2154 : 				}
; 2155 : 
; 2156 : 				play_se(252, ATR_H_POS(a0), ATR_V_POS(a0));

  00446	ff 76 1c	 push	 DWORD PTR [esi+28]
  00449	ff 76 18	 push	 DWORD PTR [esi+24]
  0044c	68 fc 00 00 00	 push	 252			; 000000fcH
  00451	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 2157 : 
; 2158 : 				set_hit_mark(a0);

  00456	56		 push	 esi
  00457	e8 00 00 00 00	 call	 ?set_hit_mark@@YAXPAUaction@@@Z ; set_hit_mark
  0045c	83 c4 10	 add	 esp, 16			; 00000010H
$boomerang_200$115:

; 2161 : 			ATR_HIT_STOP(a0) /= 4;

  0045f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00462	c0 68 5c 02	 shr	 BYTE PTR [eax+92], 2

; 2162 : 			d0 = get_num();

  00466	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0046b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0046e	89 44 24 10	 mov	 DWORD PTR _d0$[esp+24], eax

; 2163 : 			if (d0 == 255)

  00472	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00477	75 24		 jne	 SHORT $LN89@boomerang

; 2164 : 			{
; 2165 : 				ATR_BODY_WORK(0, a0) = ATR_BODY_WORK(1, a0);

  00479	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0047c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 2166 : 				ATR_COUNTER_FLG(a0) = 1;

  0047f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2180 : #endif
; 2181 : 			}
; 2182 : 		}
; 2183 : 		break;
; 2184 : 	}
; 2185 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00482	6a 00		 push	 0
  00484	6a 00		 push	 0
  00486	56		 push	 esi
  00487	c6 80 0c 01 00
	00 01		 mov	 BYTE PTR [eax+268], 1
  0048e	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00493	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2186 : }

  00496	5f		 pop	 edi
  00497	5e		 pop	 esi
  00498	5b		 pop	 ebx
  00499	8b e5		 mov	 esp, ebp
  0049b	5d		 pop	 ebp
  0049c	c3		 ret	 0
$LN89@boomerang:

; 2167 : 			}
; 2168 : 			else
; 2169 : 			{
; 2170 : 				ATR_BODY_WORK(0, a0) = p_party[d0];

  0049d	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  004a4	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 2171 : 				ATR_ATTACK_KIND(0, a0) = get_num();

  004a7	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  004ac	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  004af	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 2172 : 				ATR_ATTACK_POW(0, a0) = get_num();

  004b2	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  004b7	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  004ba	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 2173 : 				if (BattleCmd[command_point] == 'p')

  004c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  004c5	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  004cc	75 13		 jne	 SHORT $LN91@boomerang

; 2174 : 					ATR_ATTACK_PET_POW(0, a0) = get_num();

  004ce	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  004d3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  004d6	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  004dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN91@boomerang:

; 2175 : 
; 2176 : 				//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 2177 : #ifdef _ATTACK_EFFECT
; 2178 : 				if (BattleCmd[command_point] == 's')

  004e1	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  004e8	0f 85 26 03 00
	00		 jne	 $LN19@boomerang

; 2179 : 					ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  004ee	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  004f3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 2180 : #endif
; 2181 : 			}
; 2182 : 		}
; 2183 : 		break;
; 2184 : 	}
; 2185 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  004f6	6a 00		 push	 0
  004f8	6a 00		 push	 0
  004fa	56		 push	 esi
  004fb	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
  00501	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00506	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2186 : }

  00509	5f		 pop	 edi
  0050a	5e		 pop	 esi
  0050b	5b		 pop	 ebx
  0050c	8b e5		 mov	 esp, ebp
  0050e	5d		 pop	 ebp
  0050f	c3		 ret	 0
$LN20@boomerang:

; 1883 : 
; 1884 : 		break;
; 1885 : 	case 1:
; 1886 : 		if (ATR_SPD(a0) != 32)

  00510	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  00516	83 f8 20	 cmp	 eax, 32			; 00000020H
  00519	74 07		 je	 SHORT $LN21@boomerang

; 1887 : 			ATR_SPD(a0)--;

  0051b	48		 dec	 eax
  0051c	89 86 34 01 00
	00		 mov	 DWORD PTR [esi+308], eax
$LN21@boomerang:

; 1888 : 		if (ATR_GROUP_FLG(a0) == 0)

  00522	80 7a 5e 00	 cmp	 BYTE PTR [edx+94], 0
  00526	75 20		 jne	 SHORT $LN22@boomerang

; 1889 : 		{
; 1890 : 			d0 = boomerang_pos_tbl2[ATR_LONG_WORK(0, a0) * 2];

  00528	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0052e	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?boomerang_pos_tbl2@@3PAHA[eax*8]
  00535	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx

; 1891 : 			d1 = boomerang_pos_tbl2[ATR_LONG_WORK(0, a0) * 2 + 1];

  00539	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0053f	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl2@@3PAHA[eax*8+4]

; 1892 : 		}

  00546	eb 6f		 jmp	 SHORT $LN105@boomerang
$LN22@boomerang:

; 1893 : 		else
; 1894 : 		{
; 1895 : 			if (ATR_PLACE_NO(a0) >= 15)

  00548	80 ba 1f 01 00
	00 0f		 cmp	 BYTE PTR [edx+287], 15	; 0000000fH
  0054f	8b 8a 34 01 00
	00		 mov	 ecx, DWORD PTR [edx+308]
  00555	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ResoMode@@3HA ; ResoMode
  0055b	72 2c		 jb	 SHORT $LN24@boomerang

; 1896 : 			{
; 1897 : 				d0 = boomerang_pos_tbl4b[ATR_LONG_WORK(0, a0) * 2];

  0055d	8b 0c cd 00 00
	00 00		 mov	 ecx, DWORD PTR ?boomerang_pos_tbl4b@@3PAHA[ecx*8]
  00564	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx

; 1898 : 				d1 = boomerang_pos_tbl4b[ATR_LONG_WORK(0, a0) * 2 + 1];

  00568	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0056e	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl4b@@3PAHA[eax*8+4]
$LN108@boomerang:

; 1919 : 				else if (ResoMode == ÂàÜËæ®Áéá::mode1024)
; 1920 : 				{
; 1921 : 					d0 += 320;
; 1922 : 					d1 += 240;
; 1923 : 				}
; 1924 : 			}
; 1925 : 		}
; 1926 : 		radar2(a0, d0, d1, ATR_LONG_WORK(1, a0));

  00575	89 44 24 14	 mov	 DWORD PTR _d1$[esp+24], eax
  00579	83 ff 03	 cmp	 edi, 3
  0057c	75 25		 jne	 SHORT $LN29@boomerang
  0057e	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00584	83 c0 78	 add	 eax, 120		; 00000078H
  00587	eb 2a		 jmp	 SHORT $LN106@boomerang
$LN24@boomerang:

; 1899 : 				if (ResoMode == ÂàÜËæ®Áéá::mode800)
; 1900 : 				{
; 1901 : 					d0 += 160;
; 1902 : 					d1 += 120;
; 1903 : 				}
; 1904 : 				else if (ResoMode == ÂàÜËæ®Áéá::mode1024)
; 1905 : 				{
; 1906 : 					d0 += 320;
; 1907 : 					d1 += 240;
; 1908 : 				}
; 1909 : 			}
; 1910 : 			else
; 1911 : 			{
; 1912 : 				d0 = boomerang_pos_tbl4a[ATR_LONG_WORK(0, a0) * 2];

  00589	8b 0c cd 00 00
	00 00		 mov	 ecx, DWORD PTR ?boomerang_pos_tbl4a@@3PAHA[ecx*8]
  00590	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx

; 1913 : 				d1 = boomerang_pos_tbl4a[ATR_LONG_WORK(0, a0) * 2 + 1];

  00594	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0059a	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl4a@@3PAHA[eax*8+4]

; 1914 : 				if (ResoMode == ÂàÜËæ®Áéá::mode800)
; 1915 : 				{
; 1916 : 					d0 += 160;
; 1917 : 					d1 += 120;
; 1918 : 				}

  005a1	eb d2		 jmp	 SHORT $LN108@boomerang
$LN29@boomerang:

; 1919 : 				else if (ResoMode == ÂàÜËæ®Áéá::mode1024)
; 1920 : 				{
; 1921 : 					d0 += 320;
; 1922 : 					d1 += 240;
; 1923 : 				}
; 1924 : 			}
; 1925 : 		}
; 1926 : 		radar2(a0, d0, d1, ATR_LONG_WORK(1, a0));

  005a3	83 ff 04	 cmp	 edi, 4
  005a6	75 13		 jne	 SHORT $LN31@boomerang
  005a8	81 c1 40 01 00
	00		 add	 ecx, 320		; 00000140H
  005ae	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
$LN106@boomerang:
  005b3	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx
$LN105@boomerang:
  005b7	89 44 24 14	 mov	 DWORD PTR _d1$[esp+24], eax
$LN31@boomerang:
  005bb	ff b2 38 01 00
	00		 push	 DWORD PTR [edx+312]
  005c1	50		 push	 eax
  005c2	51		 push	 ecx
  005c3	56		 push	 esi
  005c4	e8 00 00 00 00	 call	 ?radar2@@YAHPAUaction@@HHH@Z ; radar2

; 1927 : 		gemini(a0);

  005c9	56		 push	 esi
  005ca	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 1928 : 		dx = (float)(d0 - ATR_H_POS(a0));

  005cf	8b 44 24 24	 mov	 eax, DWORD PTR _d0$[esp+44]
  005d3	83 c4 14	 add	 esp, 20			; 00000014H
  005d6	2b 46 18	 sub	 eax, DWORD PTR [esi+24]
  005d9	66 0f 6e c8	 movd	 xmm1, eax

; 1929 : 		dy = (float)(d1 - ATR_V_POS(a0));

  005dd	8b 44 24 14	 mov	 eax, DWORD PTR _d1$[esp+24]
  005e1	2b 46 1c	 sub	 eax, DWORD PTR [esi+28]
  005e4	0f 5b c9	 cvtdq2ps xmm1, xmm1
  005e7	66 0f 6e c0	 movd	 xmm0, eax
  005eb	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 1930 : 		d0 = (int)sqrt((double)(dx * dx + dy * dy));

  005ee	f3 0f 59 c9	 mulss	 xmm1, xmm1
  005f2	f3 0f 59 c0	 mulss	 xmm0, xmm0
  005f6	f3 0f 58 c1	 addss	 xmm0, xmm1
  005fa	0f 57 c9	 xorps	 xmm1, xmm1
  005fd	0f 5a c0	 cvtps2pd xmm0, xmm0
  00600	66 0f 2e c8	 ucomisd xmm1, xmm0
  00604	77 06		 ja	 SHORT $LN100@boomerang
  00606	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0060a	eb 05		 jmp	 SHORT $LN101@boomerang
$LN100@boomerang:
  0060c	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN101@boomerang:
  00611	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00615	89 44 24 10	 mov	 DWORD PTR _d0$[esp+24], eax
  00619	83 f8 28	 cmp	 eax, 40			; 00000028H

; 1931 : 		if (d0 < 40)

  0061c	0f 8d f2 01 00
	00		 jge	 $LN19@boomerang

; 1932 : 		{
; 1933 : 			d0 = get_num();

  00622	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00627	89 44 24 10	 mov	 DWORD PTR _d0$[esp+24], eax

; 1934 : 			if (d0 == 255)

  0062b	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00630	75 29		 jne	 SHORT $LN33@boomerang

; 1935 : 			{
; 1936 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);

  00632	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00637	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0063a	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  0063e	89 41 58	 mov	 DWORD PTR [ecx+88], eax
$LN113@boomerang:

; 2186 : }

  00641	56		 push	 esi
  00642	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00647	83 c4 04	 add	 esp, 4
  0064a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, 0
  00654	5f		 pop	 edi
  00655	5e		 pop	 esi
  00656	5b		 pop	 ebx
  00657	8b e5		 mov	 esp, ebp
  00659	5d		 pop	 ebp
  0065a	c3		 ret	 0
$LN33@boomerang:

; 1937 : 				DeathAction(a0);
; 1938 : 				p_missile[0] = NULL;
; 1939 : 				return;
; 1940 : 			}
; 1941 : 			else
; 1942 : 			{
; 1943 : 				ATR_BODY_WORK(0, a0) = p_party[d0];

  0065b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0065e	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00665	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1944 : 				ATR_ATTACK_KIND(0, a0) = get_num();

  00668	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0066d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00670	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 1945 : 				ATR_ATTACK_POW(0, a0) = get_num();

  00673	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00678	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0067b	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 1946 : 				if (BattleCmd[command_point] == 'p')

  00681	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  00686	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  0068d	75 13		 jne	 SHORT $LN35@boomerang

; 1947 : 					ATR_ATTACK_PET_POW(0, a0) = get_num();

  0068f	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00694	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00697	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  0069d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN35@boomerang:

; 1948 : 
; 1949 : 				//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 1950 : #ifdef _ATTACK_EFFECT
; 1951 : 				if (BattleCmd[command_point] == 's')

  006a2	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  006a9	75 0e		 jne	 SHORT $LN36@boomerang

; 1952 : 					ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  006ab	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  006b0	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  006b3	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
$LN36@boomerang:

; 1953 : #endif
; 1954 : 
; 1955 : 				ATR_VCT_NO(a0) = 2;

  006b9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 2180 : #endif
; 2181 : 			}
; 2182 : 		}
; 2183 : 		break;
; 2184 : 	}
; 2185 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  006bc	6a 00		 push	 0
  006be	6a 00		 push	 0
  006c0	56		 push	 esi
  006c1	c6 00 02	 mov	 BYTE PTR [eax], 2
  006c4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  006c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2186 : }

  006cc	5f		 pop	 edi
  006cd	5e		 pop	 esi
  006ce	5b		 pop	 ebx
  006cf	8b e5		 mov	 esp, ebp
  006d1	5d		 pop	 ebp
  006d2	c3		 ret	 0
$LN6@boomerang:

; 1827 : 	{
; 1828 : 	case 0:
; 1829 : 		if (ATR_GROUP_FLG(a0) == 0)

  006d3	80 7a 5e 00	 cmp	 BYTE PTR [edx+94], 0
  006d7	75 20		 jne	 SHORT $LN7@boomerang

; 1830 : 		{
; 1831 : 			d0 = boomerang_pos_tbl[ATR_LONG_WORK(0, a0) * 2];

  006d9	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  006df	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?boomerang_pos_tbl@@3PAHA[eax*8]
  006e6	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx

; 1832 : 			d1 = boomerang_pos_tbl[ATR_LONG_WORK(0, a0) * 2 + 1];

  006ea	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  006f0	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl@@3PAHA[eax*8+4]

; 1833 : 		}

  006f7	eb 6f		 jmp	 SHORT $LN109@boomerang
$LN7@boomerang:

; 1834 : 		else
; 1835 : 		{
; 1836 : 			if (ATR_PLACE_NO(a0) >= 15)//ËøôÈáå‰πüÊòØÔºü

  006f9	80 ba 1f 01 00
	00 0f		 cmp	 BYTE PTR [edx+287], 15	; 0000000fH
  00700	8b 8a 34 01 00
	00		 mov	 ecx, DWORD PTR [edx+308]
  00706	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ResoMode@@3HA ; ResoMode
  0070c	72 2c		 jb	 SHORT $LN9@boomerang

; 1837 : 			{
; 1838 : 				d0 = boomerang_pos_tbl3b[ATR_LONG_WORK(0, a0) * 2];

  0070e	8b 0c cd 00 00
	00 00		 mov	 ecx, DWORD PTR ?boomerang_pos_tbl3b@@3PAHA[ecx*8]
  00715	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx

; 1839 : 				d1 = boomerang_pos_tbl3b[ATR_LONG_WORK(0, a0) * 2 + 1];

  00719	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0071f	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl3b@@3PAHA[eax*8+4]
$LN112@boomerang:

; 1860 : 				else if (ResoMode == ÂàÜËæ®Áéá::mode1024)
; 1861 : 				{
; 1862 : 					d0 += 320;
; 1863 : 					d1 += 240;
; 1864 : 				}
; 1865 : 			}
; 1866 : 		}
; 1867 : 
; 1868 : 		if (ATR_FIRST_FLG(a0) == 0)

  00726	89 44 24 14	 mov	 DWORD PTR _d1$[esp+24], eax
  0072a	83 ff 03	 cmp	 edi, 3
  0072d	75 25		 jne	 SHORT $LN14@boomerang
  0072f	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00735	83 c0 78	 add	 eax, 120		; 00000078H
  00738	eb 2a		 jmp	 SHORT $LN110@boomerang
$LN9@boomerang:

; 1840 : 				if (ResoMode == ÂàÜËæ®Áéá::mode800)
; 1841 : 				{
; 1842 : 					d0 += 160;
; 1843 : 					d1 += 120;
; 1844 : 				}
; 1845 : 				else if (ResoMode == ÂàÜËæ®Áéá::mode1024)
; 1846 : 				{
; 1847 : 					d0 += 320;
; 1848 : 					d1 += 240;
; 1849 : 				}
; 1850 : 			}
; 1851 : 			else
; 1852 : 			{
; 1853 : 				d0 = boomerang_pos_tbl3a[ATR_LONG_WORK(0, a0) * 2];

  0073a	8b 0c cd 00 00
	00 00		 mov	 ecx, DWORD PTR ?boomerang_pos_tbl3a@@3PAHA[ecx*8]
  00741	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx

; 1854 : 				d1 = boomerang_pos_tbl3a[ATR_LONG_WORK(0, a0) * 2 + 1];

  00745	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0074b	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl3a@@3PAHA[eax*8+4]

; 1855 : 				if (ResoMode == ÂàÜËæ®Áéá::mode800)
; 1856 : 				{
; 1857 : 					d0 += 160;
; 1858 : 					d1 += 120;
; 1859 : 				}

  00752	eb d2		 jmp	 SHORT $LN112@boomerang
$LN14@boomerang:

; 1860 : 				else if (ResoMode == ÂàÜËæ®Áéá::mode1024)
; 1861 : 				{
; 1862 : 					d0 += 320;
; 1863 : 					d1 += 240;
; 1864 : 				}
; 1865 : 			}
; 1866 : 		}
; 1867 : 
; 1868 : 		if (ATR_FIRST_FLG(a0) == 0)

  00754	83 ff 04	 cmp	 edi, 4
  00757	75 13		 jne	 SHORT $LN16@boomerang
  00759	81 c1 40 01 00
	00		 add	 ecx, 320		; 00000140H
  0075f	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
$LN110@boomerang:
  00764	89 4c 24 10	 mov	 DWORD PTR _d0$[esp+24], ecx
$LN109@boomerang:
  00768	89 44 24 14	 mov	 DWORD PTR _d1$[esp+24], eax
$LN16@boomerang:
  0076c	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  00773	75 33		 jne	 SHORT $LN17@boomerang

; 1869 : 		{
; 1870 : 			ATR_SPD(a0) = 40;
; 1871 : 			radar(a0, &d0, &d1);

  00775	8d 44 24 14	 lea	 eax, DWORD PTR _d1$[esp+24]
  00779	c7 86 34 01 00
	00 28 00 00 00	 mov	 DWORD PTR [esi+308], 40	; 00000028H
  00783	50		 push	 eax
  00784	8d 44 24 14	 lea	 eax, DWORD PTR _d0$[esp+28]
  00788	50		 push	 eax
  00789	56		 push	 esi
  0078a	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 1872 : 			ATR_CRS(a0) = d0;

  0078f	8b 44 24 1c	 mov	 eax, DWORD PTR _d0$[esp+36]
  00793	83 c4 0c	 add	 esp, 12			; 0000000cH
  00796	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 1873 : 			ATR_FIRST_FLG(a0) = 1;

  0079c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0079f	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1

; 1874 : 		}

  007a6	eb 11		 jmp	 SHORT $LN18@boomerang
$LN17@boomerang:

; 1875 : 		else
; 1876 : 			radar2(a0, d0, d1, ATR_LONG_WORK(1, a0));

  007a8	ff b2 38 01 00
	00		 push	 DWORD PTR [edx+312]
  007ae	50		 push	 eax
  007af	51		 push	 ecx
  007b0	56		 push	 esi
  007b1	e8 00 00 00 00	 call	 ?radar2@@YAHPAUaction@@HHH@Z ; radar2
  007b6	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@boomerang:

; 1877 : 		gemini(a0);

  007b9	56		 push	 esi
  007ba	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 1878 : 		dx = (float)(d0 - ATR_H_POS(a0));

  007bf	8b 44 24 14	 mov	 eax, DWORD PTR _d0$[esp+28]
  007c3	83 c4 04	 add	 esp, 4
  007c6	2b 46 18	 sub	 eax, DWORD PTR [esi+24]
  007c9	66 0f 6e c8	 movd	 xmm1, eax

; 1879 : 		dy = (float)(d1 - ATR_V_POS(a0));

  007cd	8b 44 24 14	 mov	 eax, DWORD PTR _d1$[esp+24]
  007d1	2b 46 1c	 sub	 eax, DWORD PTR [esi+28]
  007d4	0f 5b c9	 cvtdq2ps xmm1, xmm1
  007d7	66 0f 6e c0	 movd	 xmm0, eax
  007db	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 1880 : 		d0 = (int)sqrt((double)(dx * dx + dy * dy));

  007de	f3 0f 59 c9	 mulss	 xmm1, xmm1
  007e2	f3 0f 59 c0	 mulss	 xmm0, xmm0
  007e6	f3 0f 58 c1	 addss	 xmm0, xmm1
  007ea	0f 57 c9	 xorps	 xmm1, xmm1
  007ed	0f 5a c0	 cvtps2pd xmm0, xmm0
  007f0	66 0f 2e c8	 ucomisd xmm1, xmm0
  007f4	77 06		 ja	 SHORT $LN102@boomerang
  007f6	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  007fa	eb 05		 jmp	 SHORT $LN103@boomerang
$LN102@boomerang:
  007fc	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN103@boomerang:
  00801	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00805	89 44 24 10	 mov	 DWORD PTR _d0$[esp+24], eax
  00809	83 f8 14	 cmp	 eax, 20			; 00000014H

; 1881 : 		if (d0 < 20)

  0080c	7d 06		 jge	 SHORT $LN19@boomerang

; 1882 : 			ATR_VCT_NO(a0) = 1;

  0080e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00811	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN19@boomerang:

; 2180 : #endif
; 2181 : 			}
; 2182 : 		}
; 2183 : 		break;
; 2184 : 	}
; 2185 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  00814	6a 00		 push	 0
  00816	6a 00		 push	 0
  00818	56		 push	 esi
  00819	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0081e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@boomerang:

; 2186 : }

  00821	5f		 pop	 edi
  00822	5e		 pop	 esi
  00823	5b		 pop	 ebx
  00824	8b e5		 mov	 esp, ebp
  00826	5d		 pop	 ebp
  00827	c3		 ret	 0
?boomerang@@YAXPAUaction@@@Z ENDP			; boomerang
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_attrib_reverse@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?set_attrib_reverse@@YAXPAUaction@@@Z PROC		; set_attrib_reverse, COMDAT

; 1759 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1760 : 	ACTION *a2;
; 1761 : 
; 1762 : 	a2 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  00004	68 60 02 00 00	 push	 608			; 00000260H
  00009	6a 47		 push	 71			; 00000047H
  0000b	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  00010	8b f0		 mov	 esi, eax
  00012	83 c4 08	 add	 esp, 8

; 1763 : 	if (a2 == NULL)

  00015	85 f6		 test	 esi, esi
  00017	74 3a		 je	 SHORT $LN1@set_attrib

; 1764 : 		return;
; 1765 : 	/* ÓçØ??? */
; 1766 : 	ATR_NAME(a2) = attrib_reverse;
; 1767 : 	ATR_BODY_WORK(0, a2) = a1;

  00019	8b 55 08	 mov	 edx, DWORD PTR _a1$[ebp]
  0001c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?attrib_reverse@@YAXPAUaction@@@Z ; attrib_reverse
  00026	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1768 : 	ATR_ATTRIB_WORK(a1) = a2;

  00029	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0002c	89 b1 18 01 00
	00		 mov	 DWORD PTR [ecx+280], esi

; 1769 : 	/* Óù∏Óçï?ÓìèÓôö */
; 1770 : 	ATR_DISP_PRIO(a2) = ATR_DISP_PRIO(a1) + 1;

  00032	8a 42 15	 mov	 al, BYTE PTR [edx+21]
  00035	fe c0		 inc	 al

; 1771 : 	/* ?????Óú±? */
; 1772 : 	ATR_CHR_NO(a2) = CG_ATR_ICON_EARTH_BATTLE;

  00037	c7 86 44 01 00
	00 2c 62 00 00	 mov	 DWORD PTR [esi+324], 25132 ; 0000622cH
  00041	88 46 15	 mov	 BYTE PTR [esi+21], al

; 1773 : 	/* ???Óñ∫ */
; 1774 : 	ATR_H_POS(a2) = ATR_H_POS(a1);

  00044	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00047	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 1775 : 	ATR_V_POS(a2) = ATR_V_POS(a1) - 64;

  0004a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0004d	83 e8 40	 sub	 eax, 64			; 00000040H
  00050	89 46 1c	 mov	 DWORD PTR [esi+28], eax
$LN1@set_attrib:
  00053	5e		 pop	 esi

; 1776 : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?set_attrib_reverse@@YAXPAUaction@@@Z ENDP		; set_attrib_reverse
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?attrib_reverse@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?attrib_reverse@@YAXPAUaction@@@Z PROC			; attrib_reverse, COMDAT

; 1740 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1741 : 	ACTION *a1;
; 1742 : 
; 1743 : 	a1 = ATR_BODY_WORK(0, a0);		//Óé¢ÓúöÓòøÓéÅ??????????

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _a0$[ebp]
  00006	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00009	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1744 : 	if (ATR_NAME(a1) == NULL || ATR_VCT_NO(a1) == VCT_NO_DIE + 2)		//Óé∑???

  0000c	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00010	74 38		 je	 SHORT $LN6@attrib_rev
  00012	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00015	80 38 fc	 cmp	 BYTE PTR [eax], 252	; 000000fcH
  00018	74 30		 je	 SHORT $LN6@attrib_rev

; 1748 : 		return;
; 1749 : 	}
; 1750 : 	ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  0001a	8a 42 15	 mov	 al, BYTE PTR [edx+21]
  0001d	fe c0		 inc	 al
  0001f	88 41 15	 mov	 BYTE PTR [ecx+21], al

; 1751 : 	ATR_H_POS(a0) = ATR_H_POS(a1);

  00022	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00025	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1752 : 	ATR_V_POS(a0) = ATR_V_POS(a1) - 64;

  00028	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]

; 1753 : 	ATR_CHR_NO(a0) = SPR_zokusei;
; 1754 : 	pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);		//???

  0002b	6a 00		 push	 0
  0002d	83 e8 40	 sub	 eax, 64			; 00000040H
  00030	c7 81 44 01 00
	00 cc 88 01 00	 mov	 DWORD PTR [ecx+324], 100556 ; 000188ccH
  0003a	6a 00		 push	 0
  0003c	51		 push	 ecx
  0003d	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00040	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1755 : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN6@attrib_rev:

; 1745 : 	{
; 1746 : 		ATR_ATTRIB_WORK(a1) = NULL;		//Óé∑?

  0004a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]

; 1747 : 		DeathAction(a0);		//Óé∑?

  0004d	89 4d 08	 mov	 DWORD PTR _a0$[ebp], ecx
  00050	c7 80 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+280], 0

; 1755 : }

  0005a	5d		 pop	 ebp

; 1747 : 		DeathAction(a0);		//Óé∑?

  0005b	e9 00 00 00 00	 jmp	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
?attrib_reverse@@YAXPAUaction@@@Z ENDP			; attrib_reverse
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_single_jujutsu@@YAXHPAUaction@@@Z
_TEXT	SEGMENT
_d0$ = 8						; size = 4
_a1$ = 12						; size = 4
?set_single_jujutsu@@YAXHPAUaction@@@Z PROC		; set_single_jujutsu, COMDAT

; 1557 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1558 : 	if (ATR_LIFE(a1) == 0)		//??????

  00004	8b 75 0c	 mov	 esi, DWORD PTR _a1$[ebp]
  00007	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  0000b	0f 84 e7 01 00
	00		 je	 $LN2@set_single

; 1559 : 		return;
; 1560 : 
; 1561 : 	ACTION *a2;
; 1562 : 
; 1563 : 	a2 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  00011	68 60 02 00 00	 push	 608			; 00000260H
  00016	6a 47		 push	 71			; 00000047H
  00018	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0001d	8b d0		 mov	 edx, eax
  0001f	83 c4 08	 add	 esp, 8

; 1564 : 	if (a2 == NULL)

  00022	85 d2		 test	 edx, edx
  00024	0f 84 ce 01 00
	00		 je	 $LN2@set_single

; 1565 : 		return;
; 1566 : 	/* ÓçØ??? */
; 1567 : 	ATR_NAME(a2) = katino;
; 1568 : 	ATR_BODY_WORK(0, a2) = a1;

  0002a	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0002d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?katino@@YAXPAUaction@@@Z ; katino
  00034	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 1569 : 	ATR_JUJUTSU_WORK(a1) = a2;

  00037	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0003a	89 91 10 01 00
	00		 mov	 DWORD PTR [ecx+272], edx

; 1570 : 	/* Óù∏Óçï?ÓìèÓôö */
; 1571 : 	ATR_DISP_PRIO(a2) = ATR_DISP_PRIO(a1) + 1;

  00040	8a 46 15	 mov	 al, BYTE PTR [esi+21]

; 1572 : 	/* ???Óñ∫ */
; 1573 : 	ATR_H_POS(a2) = ATR_H_POS(a1);
; 1574 : 	ATR_V_POS(a2) = ATR_V_POS(a1) - 64;
; 1575 : 	ATR_STIMER(a2) = d0;

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _d0$[ebp]
  00046	fe c0		 inc	 al
  00048	88 42 15	 mov	 BYTE PTR [edx+21], al
  0004b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0004e	89 42 18	 mov	 DWORD PTR [edx+24], eax
  00051	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00054	83 e8 40	 sub	 eax, 64			; 00000040H
  00057	89 42 1c	 mov	 DWORD PTR [edx+28], eax
  0005a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0005d	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 1576 : 	/* ?????Óú±? */
; 1577 : 	switch (d0)

  00060	49		 dec	 ecx
  00061	83 f9 27	 cmp	 ecx, 39			; 00000027H
  00064	0f 87 8e 01 00
	00		 ja	 $LN2@set_single
  0006a	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR $LN43@set_single[ecx]
  00071	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN44@set_single[eax*4]
$LN6@set_single:

; 1578 : 	{
; 1579 : 		//  "ÓöÖ", 
; 1580 : 	case 1:
; 1581 : 		ATR_CHR_NO(a2) = SPR_poison;

  00078	c7 82 44 01 00
	00 cb 88 01 00	 mov	 DWORD PTR [edx+324], 100555 ; 000188cbH
  00082	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN8@set_single:

; 1582 : 		break;
; 1583 : 		//  "??", 
; 1584 : 	case 2:
; 1585 : 		ATR_CHR_NO(a2) = SPR_shock;
; 1586 : 		break;
; 1587 : 
; 1588 : 		//  "Ó°á?", 
; 1589 : 	case 3:
; 1590 : 		ATR_CHR_NO(a2) = SPR_sleep;

  00085	c7 82 44 01 00
	00 c9 88 01 00	 mov	 DWORD PTR [edx+324], 100553 ; 000188c9H
  0008f	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN9@set_single:

; 1591 : 		break;
; 1592 : 		//  "Óí∑?", 
; 1593 : 	case 4:
; 1594 : 		ATR_CHR_NO(a2) = SPR_stone;

  00092	c7 82 44 01 00
	00 c6 88 01 00	 mov	 DWORD PTR [edx+324], 100550 ; 000188c6H
  0009c	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN10@set_single:

; 1595 : 		break;
; 1596 : 		//  "?????", 
; 1597 : 	case 5:
; 1598 : 		ATR_CHR_NO(a2) = SPR_drunk;

  0009f	c7 82 44 01 00
	00 c8 88 01 00	 mov	 DWORD PTR [edx+324], 100552 ; 000188c8H
  000a9	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN12@set_single:

; 1599 : 		break;
; 1600 : 		//  "??" 
; 1601 : 	case 6:
; 1602 : 		ATR_CHR_NO(a2) = SPR_conf;
; 1603 : 		break;
; 1604 : #ifdef _MAGIC_WEAKEN  //ËôöÂº±
; 1605 : 	case 7:
; 1606 : 		ATR_CHR_NO(a2) = SPR_weaken;

  000ac	c7 82 44 01 00
	00 2c 8c 01 00	 mov	 DWORD PTR [edx+324], 101420 ; 00018c2cH
  000b6	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$LN13@set_single:

; 1607 : 		break;
; 1608 : #endif
; 1609 : #ifdef _MAGIC_DEEPPOISION   //ÂâßÊØí
; 1610 : 	case 8:
; 1611 : 		ATR_CHR_NO(a2) = SPR_deeppoison;

  000b9	c7 82 44 01 00
	00 29 8c 01 00	 mov	 DWORD PTR [edx+324], 101417 ; 00018c29H
  000c3	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
$LN15@set_single:

; 1612 : 		break;
; 1613 : #endif
; 1614 : #ifdef _MAGIC_BARRIER
; 1615 : 	case 9:
; 1616 : 		ATR_CHR_NO(a2) = SPR_barrier; //È≠îÈöú 
; 1617 : 		break;
; 1618 : #endif
; 1619 : #ifdef _MAGIC_NOCAST
; 1620 : 	case 10:
; 1621 : 		ATR_CHR_NO(a2) = SPR_nocast; //Ê≤âÈªò 

  000c6	c7 82 44 01 00
	00 2b 8c 01 00	 mov	 DWORD PTR [edx+324], 101419 ; 00018c2bH
  000d0	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
$LN16@set_single:

; 1622 : 		break;
; 1623 : #endif
; 1624 : 
; 1625 : #ifdef _SARS						// WON ADD ÊØíÁÖûËîìÂª∂
; 1626 : 	case 11:
; 1627 : 		ATR_CHR_NO(a2) = 101702; //ÊØíÁÖûËîìÂª∂

  000d3	c7 82 44 01 00
	00 46 8d 01 00	 mov	 DWORD PTR [edx+324], 101702 ; 00018d46H
  000dd	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
$LN17@set_single:

; 1628 : 		break;
; 1629 : #endif
; 1630 : 
; 1631 : #ifdef _CHAR_PROFESSION						// WON ADD
; 1632 : 	case 12:
; 1633 : 		ATR_CHR_NO(a2) = CG_HIT_MARK_00; //ÊôïÁú©

  000e0	c7 82 44 01 00
	00 9c 63 00 00	 mov	 DWORD PTR [edx+324], 25500 ; 0000639cH
  000ea	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
$LN18@set_single:

; 1634 : 		break;
; 1635 : 	case 13:
; 1636 : 		ATR_CHR_NO(a2) = 35120; //Ê†ëÊ†πÁº†Áªï

  000ed	c7 82 44 01 00
	00 30 89 00 00	 mov	 DWORD PTR [edx+324], 35120 ; 00008930H
  000f7	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
$LN19@set_single:

; 1637 : 		break;
; 1638 : 	case 14:
; 1639 : 		ATR_CHR_NO(a2) = 35110; //Â§©ÁΩóÂú∞ÁΩë

  000fa	c7 82 44 01 00
	00 26 89 00 00	 mov	 DWORD PTR [edx+324], 35110 ; 00008926H
  00104	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
$LN21@set_single:

; 1640 : 		break;
; 1641 : 	case 15:
; 1642 : 		ATR_CHR_NO(a2) = 27692;	//ÂÜ∞ÁàÜÊúØ
; 1643 : 		break;
; 1644 : 	case 16: 
; 1645 : 		ATR_CHR_NO(a2) = 26517; //ÈÅóÂøò

  00107	c7 82 44 01 00
	00 95 67 00 00	 mov	 DWORD PTR [edx+324], 26517 ; 00006795H
  00111	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
$LN22@set_single:

; 1646 : 		break;
; 1647 : 	case 17:
; 1648 : 		ATR_CHR_NO(a2) = 27692;	//ÂÜ∞ÁÆ≠

  00114	c7 82 44 01 00
	00 2c 6c 00 00	 mov	 DWORD PTR [edx+324], 27692 ; 00006c2cH
  0011e	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
$LN24@set_single:

; 1649 : 		break;	
; 1650 : 	case 18:
; 1651 : 		ATR_CHR_NO(a2) = 27012; //ÂóúË°ÄËõä
; 1652 : 		break;	
; 1653 : 	case 19:
; 1654 : 		ATR_CHR_NO(a2) = 27012; //‰∏ÄÈíàËßÅË°Ä

  00121	c7 82 44 01 00
	00 84 69 00 00	 mov	 DWORD PTR [edx+324], 27012 ; 00006984H
  0012b	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
$LN25@set_single:

; 1655 : 		break;
; 1656 : 	case 20:
; 1657 : 		ATR_CHR_NO(a2) = SPR_conf; //ÊåëÊã®

  0012e	c7 82 44 01 00
	00 ca 88 01 00	 mov	 DWORD PTR [edx+324], 100554 ; 000188caH
  00138	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
$LN27@set_single:

; 1658 : 		break;
; 1659 : 	case 21:
; 1660 : 		ATR_CHR_NO(a2) = 0; //ÁÅ´ÈôÑ‰Ωì
; 1661 : 		break;
; 1662 : 	case 22:
; 1663 : 		ATR_CHR_NO(a2) = 0; //ÂÜ∞ÈôÑ‰Ωì

  0013b	c7 82 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+324], 0
  00145	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
$LN29@set_single:

; 1664 : 		break;
; 1665 : 	case 23:
; 1666 : 		ATR_CHR_NO(a2) = 100551;   //Èõ∑ÈôÑ‰Ωì
; 1667 : 		break;
; 1668 : #ifdef _PROFESSION_ADDSKILL
; 1669 : 	case 32:
; 1670 : 		ATR_CHR_NO(a2) = SPR_barrier; // Ê∞¥ÈôÑ‰Ωì

  00148	c7 82 44 01 00
	00 2d 8c 01 00	 mov	 DWORD PTR [edx+324], 101421 ; 00018c2dH
  00152	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
$LN30@set_single:

; 1671 : 		break;
; 1672 : 	case 33:
; 1673 : 		ATR_CHR_NO(a2) = SPR_shock; //ÊÅêÊÉß

  00155	c7 82 44 01 00
	00 c7 88 01 00	 mov	 DWORD PTR [edx+324], 100551 ; 000188c7H
  0015f	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  00160	5d		 pop	 ebp
  00161	c3		 ret	 0
$LN31@set_single:

; 1674 : 		//case 24:
; 1675 : 		//	ATR_CHR_NO(a2) = 0; // ÁÅ´ÂÜ∞Èõ∑ÈôÑ‰Ωì
; 1676 : 		break;
; 1677 : #endif
; 1678 : #endif
; 1679 : #ifdef _PETSKILL_LER
; 1680 : 	case 34:
; 1681 : 		if (ATR_CHR_NO(a1) == 101814)

  00162	8b 86 44 01 00
	00		 mov	 eax, DWORD PTR [esi+324]
  00168	3d b6 8d 01 00	 cmp	 eax, 101814		; 00018db6H
  0016d	75 3c		 jne	 SHORT $LN32@set_single

; 1682 : 		{
; 1683 : 			// Á¨¨‰∏ÄÊÆµÂèòË∫´
; 1684 : 			if (g_bUseAlpha)

  0016f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, 0 ; g_bUseAlpha
  00176	b8 e7 8d 01 00	 mov	 eax, 101863		; 00018de7H
  0017b	b9 b2 8d 01 00	 mov	 ecx, 101810		; 00018db2H
  00180	0f 45 c1	 cmovne	 eax, ecx

; 1685 : 				ATR_CHR_NO(a2) = 101810; // ÈõæÂä®Áîª1
; 1686 : 			else
; 1687 : 				ATR_CHR_NO(a2) = 101863;	// ÈõæÂä®Áîª1
; 1688 : 			ATR_V_POS(a2) = ATR_V_POS(a1);

  00183	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax
  00189	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0018c	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 1689 : 			if (ATR_CHR_ACT_OLD(a1) != ANIM_DEAD)

  0018f	83 be 50 01 00
	00 02		 cmp	 DWORD PTR [esi+336], 2
  00196	74 60		 je	 SHORT $LN2@set_single

; 1690 : 			{
; 1691 : 				ATR_VCT_NO(a1) = VCT_NO_DIE;

  00198	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0019b	c6 00 fa	 mov	 BYTE PTR [eax], 250	; 000000faH

; 1692 : 				ATR_CHR_NO(a1) = 101813;

  0019e	c7 86 44 01 00
	00 b5 8d 01 00	 mov	 DWORD PTR [esi+324], 101813 ; 00018db5H
  001a8	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
$LN32@set_single:

; 1693 : 			}
; 1694 : 		}
; 1695 : 		else if (ATR_CHR_NO(a1) == 101815)

  001ab	3d b7 8d 01 00	 cmp	 eax, 101815		; 00018db7H
  001b0	75 46		 jne	 SHORT $LN2@set_single

; 1696 : 		{
; 1697 : 			// Á¨¨‰∫åÊÆµÂèòË∫´
; 1698 : 			if (g_bUseAlpha)

  001b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, 0 ; g_bUseAlpha
  001b9	b8 e8 8d 01 00	 mov	 eax, 101864		; 00018de8H
  001be	b9 b3 8d 01 00	 mov	 ecx, 101811		; 00018db3H
  001c3	0f 45 c1	 cmovne	 eax, ecx

; 1699 : 				ATR_CHR_NO(a2) = 101811;	// ÈõæÂä®Áîª2
; 1700 : 			else 
; 1701 : 				ATR_CHR_NO(a2) = 101864; // ÈõæÂä®Áîª2
; 1702 : 			ATR_V_POS(a2) = ATR_V_POS(a1);

  001c6	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax
  001cc	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001cf	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 1703 : 			if (ATR_CHR_ACT_OLD(a1) != ANIM_DEAD)

  001d2	83 be 50 01 00
	00 02		 cmp	 DWORD PTR [esi+336], 2
  001d9	74 1d		 je	 SHORT $LN2@set_single

; 1704 : 			{
; 1705 : 				ATR_VCT_NO(a1) = VCT_NO_DIE;

  001db	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001de	c6 00 fa	 mov	 BYTE PTR [eax], 250	; 000000faH

; 1706 : 				ATR_CHR_NO(a1) = 101814;

  001e1	c7 86 44 01 00
	00 b6 8d 01 00	 mov	 DWORD PTR [esi+324], 101814 ; 00018db6H
  001eb	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  001ec	5d		 pop	 ebp
  001ed	c3		 ret	 0
$LN41@set_single:

; 1707 : 			}
; 1708 : 		}
; 1709 : 		break;
; 1710 : #endif
; 1711 : #ifdef _PRO_KILLME
; 1712 : 	case 35:
; 1713 : 		ATR_CHR_NO(a2) = 101292; // ÊÄí
; 1714 : 		break;
; 1715 : #endif
; 1716 : #ifdef _PRO_ABSOLUTE_DEFENSE 
; 1717 : 	case 36:
; 1718 : 		ATR_CHR_NO(a2) = 102043;
; 1719 : 		break;
; 1720 : #endif
; 1721 : #ifdef _PRO3_ADDSKILL
; 1722 : 	case 37:
; 1723 : 		ATR_CHR_NO(a2) = 102044;//37 ÊÅ∂È≠îËØÖÂíí
; 1724 : 		break;
; 1725 : 	case 38:
; 1726 : 		ATR_CHR_NO(a2) = 102046;//38 ÊØíÁ¥†‰πãÁΩë
; 1727 : 		break;
; 1728 : 	case 39:
; 1729 : 		ATR_CHR_NO(a2) = 101296;//39 ÊäöÊÖ∞ÂøÉÁÅµ
; 1730 : 		break;
; 1731 : #endif
; 1732 : 	case 40:
; 1733 : 		ATR_CHR_NO(a2) = 103186;//ÂÖâÁéØ

  001ee	c7 82 44 01 00
	00 12 93 01 00	 mov	 DWORD PTR [edx+324], 103186 ; 00019312H
$LN2@set_single:
  001f8	5e		 pop	 esi

; 1734 : 		break;
; 1735 : 	}
; 1736 : }

  001f9	5d		 pop	 ebp
  001fa	c3		 ret	 0
  001fb	90		 npad	 1
$LN44@set_single:
  001fc	00 00 00 00	 DD	 $LN6@set_single
  00200	00 00 00 00	 DD	 $LN30@set_single
  00204	00 00 00 00	 DD	 $LN8@set_single
  00208	00 00 00 00	 DD	 $LN9@set_single
  0020c	00 00 00 00	 DD	 $LN10@set_single
  00210	00 00 00 00	 DD	 $LN25@set_single
  00214	00 00 00 00	 DD	 $LN12@set_single
  00218	00 00 00 00	 DD	 $LN13@set_single
  0021c	00 00 00 00	 DD	 $LN29@set_single
  00220	00 00 00 00	 DD	 $LN15@set_single
  00224	00 00 00 00	 DD	 $LN16@set_single
  00228	00 00 00 00	 DD	 $LN17@set_single
  0022c	00 00 00 00	 DD	 $LN18@set_single
  00230	00 00 00 00	 DD	 $LN19@set_single
  00234	00 00 00 00	 DD	 $LN22@set_single
  00238	00 00 00 00	 DD	 $LN21@set_single
  0023c	00 00 00 00	 DD	 $LN24@set_single
  00240	00 00 00 00	 DD	 $LN27@set_single
  00244	00 00 00 00	 DD	 $LN31@set_single
  00248	00 00 00 00	 DD	 $LN41@set_single
  0024c	00 00 00 00	 DD	 $LN2@set_single
$LN43@set_single:
  00250	00		 DB	 0
  00251	01		 DB	 1
  00252	02		 DB	 2
  00253	03		 DB	 3
  00254	04		 DB	 4
  00255	05		 DB	 5
  00256	06		 DB	 6
  00257	07		 DB	 7
  00258	08		 DB	 8
  00259	09		 DB	 9
  0025a	0a		 DB	 10			; 0000000aH
  0025b	0b		 DB	 11			; 0000000bH
  0025c	0c		 DB	 12			; 0000000cH
  0025d	0d		 DB	 13			; 0000000dH
  0025e	0e		 DB	 14			; 0000000eH
  0025f	0f		 DB	 15			; 0000000fH
  00260	0e		 DB	 14			; 0000000eH
  00261	10		 DB	 16			; 00000010H
  00262	10		 DB	 16			; 00000010H
  00263	05		 DB	 5
  00264	11		 DB	 17			; 00000011H
  00265	11		 DB	 17			; 00000011H
  00266	01		 DB	 1
  00267	14		 DB	 20			; 00000014H
  00268	14		 DB	 20			; 00000014H
  00269	14		 DB	 20			; 00000014H
  0026a	14		 DB	 20			; 00000014H
  0026b	14		 DB	 20			; 00000014H
  0026c	14		 DB	 20			; 00000014H
  0026d	14		 DB	 20			; 00000014H
  0026e	14		 DB	 20			; 00000014H
  0026f	08		 DB	 8
  00270	01		 DB	 1
  00271	12		 DB	 18			; 00000012H
  00272	14		 DB	 20			; 00000014H
  00273	14		 DB	 20			; 00000014H
  00274	14		 DB	 20			; 00000014H
  00275	14		 DB	 20			; 00000014H
  00276	14		 DB	 20			; 00000014H
  00277	13		 DB	 19			; 00000013H
?set_single_jujutsu@@YAXHPAUaction@@@Z ENDP		; set_single_jujutsu
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_Œ√?@@YAXHPAUaction@@@Z
_TEXT	SEGMENT
_image$ = 8						; size = 4
_a1$ = 12						; size = 4
?set_Œ√?@@YAXHPAUaction@@@Z PROC			; set_Œ√?, COMDAT

; 1531 : void set_ÂÖâÁéØ(int image, ACTION *a1){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1532 : 	if (ATR_LIFE(a1) == 0) return;

  00004	8b 75 0c	 mov	 esi, DWORD PTR _a1$[ebp]
  00007	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  0000b	74 5b		 je	 SHORT $LN1@set_

; 1533 : 	if (ATR_halo_WORK(a1))return;  //Â¶ÇÊûúÂ∑≤ÁªèÊúâÂÖâÁéØÂàôËøîÂõû

  0000d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00010	83 b8 5c 02 00
	00 00		 cmp	 DWORD PTR [eax+604], 0
  00017	75 4f		 jne	 SHORT $LN1@set_

; 1534 : 
; 1535 : 	ACTION *a2;
; 1536 : 
; 1537 : 	a2 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  00019	68 60 02 00 00	 push	 608			; 00000260H
  0001e	6a 47		 push	 71			; 00000047H
  00020	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  00025	8b d0		 mov	 edx, eax
  00027	83 c4 08	 add	 esp, 8

; 1538 : 	if (a2 == NULL)

  0002a	85 d2		 test	 edx, edx
  0002c	74 3a		 je	 SHORT $LN1@set_

; 1539 : 		return;
; 1540 : 	ATR_NAME(a2) = Êí≠ÊîæÂÖâÁéØ;
; 1541 : 	ATR_BODY_WORK(0, a2) = a1;

  0002e	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00031	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?˜Î€ØŒ√?@@YAXPAUaction@@@Z ; ˜Î€ØŒ√?
  00038	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 1542 : 	ATR_halo_WORK(a1) = a2;

  0003b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0003e	89 91 5c 02 00
	00		 mov	 DWORD PTR [ecx+604], edx

; 1543 : 
; 1544 : 	ATR_DISP_PRIO(a2) = ATR_DISP_PRIO(a1) - 1;

  00044	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00047	fe c8		 dec	 al
  00049	88 42 15	 mov	 BYTE PTR [edx+21], al

; 1545 : 
; 1546 : 	ATR_H_POS(a2) = ATR_H_POS(a1);

  0004c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0004f	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 1547 : 	ATR_V_POS(a2) = ATR_V_POS(a1);

  00052	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00055	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 1548 : 	ATR_STIMER(a2) = 0;

  00058	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0005b	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1549 : 
; 1550 : 	ATR_CHR_NO(a2) = image;//ÂÖâÁéØ

  0005f	8b 45 08	 mov	 eax, DWORD PTR _image$[ebp]
  00062	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax
$LN1@set_:
  00068	5e		 pop	 esi

; 1551 : }

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?set_Œ√?@@YAXHPAUaction@@@Z ENDP			; set_Œ√?
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?˜Î€ØŒ√?@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?˜Î€ØŒ√?@@YAXPAUaction@@@Z PROC				; ˜Î€ØŒ√?, COMDAT

; 1419 : void Êí≠ÊîæÂÖâÁéØ(ACTION *a0){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1420 : 	ACTION *a1;
; 1421 : 	a1 = ATR_BODY_WORK(0, a0);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _a0$[ebp]
  00008	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0000b	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1422 : 	if (ATR_NAME(a1) == NULL || ATR_VCT_NO(a1) == VCT_NO_DIE + 2 || ATR_LIFE(a1) == 0){

  0000e	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00012	74 33		 je	 SHORT $LN3@
  00014	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00017	80 38 fc	 cmp	 BYTE PTR [eax], 252	; 000000fcH
  0001a	74 2b		 je	 SHORT $LN3@
  0001c	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  00020	74 25		 je	 SHORT $LN3@

; 1423 : 		ATR_halo_WORK(a1) = NULL;
; 1424 : 		DeathAction(a0);
; 1425 : 		return;
; 1426 : 	}
; 1427 : 	ATR_H_POS(a0) = ATR_H_POS(a1);

  00022	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00025	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 1428 : 	ATR_V_POS(a0) = ATR_V_POS(a1);

  00028	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0002b	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 1429 : 	ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) - 1;

  0002e	8a 46 15	 mov	 al, BYTE PTR [esi+21]

; 1430 : 
; 1431 : 	if (pattern(a0, ANM_NOMAL_SPD, ANM_LOOP)){

  00031	6a 00		 push	 0
  00033	fe c8		 dec	 al
  00035	6a 00		 push	 0
  00037	57		 push	 edi
  00038	88 47 15	 mov	 BYTE PTR [edi+21], al
  0003b	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	85 c0		 test	 eax, eax
  00045	74 16		 je	 SHORT $LN4@
$LN3@:

; 1432 : 		ATR_halo_WORK(a1) = NULL;
; 1433 : 		DeathAction(a0);
; 1434 : 	}
; 1435 : }

  00047	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004a	57		 push	 edi
  0004b	c7 80 5c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+604], 0
  00055	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0005a	83 c4 04	 add	 esp, 4
$LN4@:
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?˜Î€ØŒ√?@@YAXPAUaction@@@Z ENDP				; ˜Î€ØŒ√?
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_piyo_loop@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?set_piyo_loop@@YAXPAUaction@@@Z PROC			; set_piyo_loop, COMDAT

; 1392 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1393 : 	ACTION *a1;
; 1394 : 	int d7;
; 1395 : 
; 1396 : 	for (d7 = 0; d7 < PIYOPIYO_CNT; d7++)

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	33 db		 xor	 ebx, ebx
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL4@set_piyo_l:

; 1397 : 	{
; 1398 : 		//?????????
; 1399 : 		a1 = GetAction(T_PRIO_HIT_MARK, sizeof(ATR_EQU));

  00010	68 60 02 00 00	 push	 608			; 00000260H
  00015	6a 49		 push	 73			; 00000049H
  00017	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 08	 add	 esp, 8

; 1400 : 		if (a1 == NULL)

  00021	85 c9		 test	 ecx, ecx
  00023	74 62		 je	 SHORT $LN8@set_piyo_l

; 1401 : 			return;
; 1402 : 		/* ÓçØ??? */
; 1403 : 		ATR_NAME(a1) = piyo_loop;
; 1404 : 		ATR_CHR_NO(a1) = SPR_star;
; 1405 : 		/* ???Óñ∫ */
; 1406 : 		ATR_BODY_WORK(0, a1) = a0;

  00025	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00028	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ?piyo_loop@@YAXPAUaction@@@Z ; piyo_loop
  0002f	c7 81 44 01 00
	00 95 88 01 00	 mov	 DWORD PTR [ecx+324], 100501 ; 00018895H
  00039	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1407 : 		ATR_STIMER(a1) = d7 * (60 / PIYOPIYO_CNT);

  0003c	8a c3		 mov	 al, bl
  0003e	c0 e0 02	 shl	 al, 2
  00041	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00044	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00047	c0 e2 02	 shl	 dl, 2
  0004a	43		 inc	 ebx
  0004b	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 1408 : 		//Óë©?ÓêØ??ÓôÆ
; 1409 : #ifndef __CARYTEST
; 1410 : 		ATR_INT_WORK0(a1) = a0->anim_x + SpriteInfo[ATR_PAT_NO(a0)].width / 2;

  0004e	8b 86 9c 00 00
	00		 mov	 eax, DWORD PTR [esi+156]
  00054	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00057	0f bf 04 85 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+4]
  0005f	99		 cdq
  00060	2b c2		 sub	 eax, edx
  00062	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00065	d1 f8		 sar	 eax, 1
  00067	03 86 64 01 00
	00		 add	 eax, DWORD PTR [esi+356]
  0006d	89 82 24 01 00
	00		 mov	 DWORD PTR [edx+292], eax

; 1411 : #else
; 1412 : 		ATR_INT_WORK0(a1) = a0->anim_x + g_lpRealAdrn[ATR_PAT_NO(a0)].width / 2;
; 1413 : #endif
; 1414 : 		ATR_INT_WORK1(a1) = a0->anim_y;

  00073	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00076	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  0007c	89 81 28 01 00
	00		 mov	 DWORD PTR [ecx+296], eax
  00082	83 fb 03	 cmp	 ebx, 3
  00085	7c 89		 jl	 SHORT $LL4@set_piyo_l
$LN8@set_piyo_l:
  00087	5e		 pop	 esi

; 1415 : 	}
; 1416 : }

  00088	5b		 pop	 ebx
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?set_piyo_loop@@YAXPAUaction@@@Z ENDP			; set_piyo_loop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?piyo_loop@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?piyo_loop@@YAXPAUaction@@@Z PROC			; piyo_loop, COMDAT

; 1367 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1368 : 	ACTION *a1;
; 1369 : 	int d0;
; 1370 : 
; 1371 : 	a1 = ATR_BODY_WORK(0, a0);		//Ó†¥Óïí??????

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _a0$[ebp]
  00006	56		 push	 esi
  00007	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 1372 : 	if (ATR_NAME(a1) == NULL || ATR_LIFE(a1) != 0)		//????Óé∑???

  0000d	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00011	74 5c		 je	 SHORT $LN3@piyo_loop
  00013	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  00017	75 56		 jne	 SHORT $LN3@piyo_loop

; 1375 : 		return;
; 1376 : 	}
; 1377 : 	/* Óù∏Óçï?ÓìèÓôö */
; 1378 : 	ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  00019	8a 42 15	 mov	 al, BYTE PTR [edx+21]
  0001c	fe c0		 inc	 al
  0001e	88 41 15	 mov	 BYTE PTR [ecx+21], al

; 1379 : 	d0 = piyo_loop_h_tbl[ATR_STIMER(a0)];

  00021	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]

; 1380 : 	ATR_H_POS(a0) = ATR_H_POS(a1) + d0 + ATR_INT_WORK0(a0);

  00025	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?piyo_loop_h_tbl@@3PAHA[eax*4]
  0002c	03 86 24 01 00
	00		 add	 eax, DWORD PTR [esi+292]
  00032	03 42 18	 add	 eax, DWORD PTR [edx+24]
  00035	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1381 : 	d0 = piyo_loop_v_tbl[ATR_STIMER(a0)];

  00038	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]

; 1382 : 	ATR_V_POS(a0) = ATR_V_POS(a1) + d0 + ATR_INT_WORK1(a0);

  0003c	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?piyo_loop_v_tbl@@3PAHA[eax*4]
  00043	03 86 28 01 00
	00		 add	 eax, DWORD PTR [esi+296]
  00049	03 42 1c	 add	 eax, DWORD PTR [edx+28]
  0004c	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1383 : 	ATR_STIMER(a0)++;

  0004f	fe 46 01	 inc	 BYTE PTR [esi+1]

; 1384 : 	if (ATR_STIMER(a0) == 60)

  00052	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00055	80 78 01 3c	 cmp	 BYTE PTR [eax+1], 60	; 0000003cH
  00059	75 04		 jne	 SHORT $LN4@piyo_loop

; 1385 : 		ATR_STIMER(a0) = 0;

  0005b	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LN4@piyo_loop:

; 1386 : 	pattern(a0, 0, 0);

  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006c	5e		 pop	 esi

; 1387 : }

  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN3@piyo_loop:
  0006f	5e		 pop	 esi

; 1373 : 	{
; 1374 : 		DeathAction(a0);		//Óé∑?

  00070	89 4d 08	 mov	 DWORD PTR _a0$[ebp], ecx

; 1387 : }

  00073	5d		 pop	 ebp

; 1373 : 	{
; 1374 : 		DeathAction(a0);		//Óé∑?

  00074	e9 00 00 00 00	 jmp	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
?piyo_loop@@YAXPAUaction@@@Z ENDP			; piyo_loop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?set_jujutsu_hit_mark@@YAXPAUaction@@@Z PROC		; set_jujutsu_hit_mark, COMDAT

; 1333 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1334 : 	ACTION *a1;
; 1335 : 
; 1336 : 	//?????????
; 1337 : 	a1 = GetAction(T_PRIO_HIT_MARK, sizeof(ATR_EQU));

  00003	68 60 02 00 00	 push	 608			; 00000260H
  00008	6a 49		 push	 73			; 00000049H
  0000a	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0000f	8b d0		 mov	 edx, eax
  00011	83 c4 08	 add	 esp, 8

; 1338 : 	if (a1 == NULL)

  00014	85 d2		 test	 edx, edx
  00016	74 38		 je	 SHORT $LN1@set_jujuts

; 1339 : 		return;
; 1340 : 	/* ÓçØ??? */
; 1341 : 	ATR_NAME(a1) = hit_mark;
; 1342 : 	/* Óù∏Óçï?ÓìèÓôö */
; 1343 : 	ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;
; 1344 : 	/* ?????Óú±? */
; 1345 : 	ATR_CHR_NO(a1) = CG_HIT_MARK_32;		//?Óëë
; 1346 : 	/* ???Óñ∫ */
; 1347 : 	ATR_H_POS(a1) = ATR_H_POS(a0);

  00018	8b 45 08	 mov	 eax, DWORD PTR _a0$[ebp]
  0001b	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?hit_mark@@YAXPAUaction@@@Z ; hit_mark
  00022	c6 42 15 58	 mov	 BYTE PTR [edx+21], 88	; 00000058H
  00026	c7 82 44 01 00
	00 a6 63 00 00	 mov	 DWORD PTR [edx+324], 25510 ; 000063a6H
  00030	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00033	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 1348 : 	ATR_V_POS(a1) = ATR_V_POS(a0) - 32;

  00036	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00039	83 e8 20	 sub	 eax, 32			; 00000020H
  0003c	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 1349 : 	ATR_FIRST_FLG(a1) = ATR_STIMER(a1) = HIT_STOP_TIM;		//Óù∏Óçï?????

  0003f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00042	c6 40 01 08	 mov	 BYTE PTR [eax+1], 8
  00046	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00049	c6 80 1e 01 00
	00 08		 mov	 BYTE PTR [eax+286], 8
$LN1@set_jujuts:

; 1350 : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ENDP		; set_jujutsu_hit_mark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_guard_mark@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?set_guard_mark@@YAXPAUaction@@@Z PROC			; set_guard_mark, COMDAT

; 1285 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 	ACTION *a1;
; 1287 : 
; 1288 : 	a1 = GetAction(T_PRIO_HIT_MARK, sizeof(ATR_EQU));

  00003	68 60 02 00 00	 push	 608			; 00000260H
  00008	6a 49		 push	 73			; 00000049H
  0000a	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0000f	8b c8		 mov	 ecx, eax
  00011	83 c4 08	 add	 esp, 8

; 1289 : 	if (a1 == NULL)

  00014	85 c9		 test	 ecx, ecx
  00016	0f 84 f3 00 00
	00		 je	 $LN1@set_guard_

; 1290 : 		return;
; 1291 : 	ATR_NAME(a1) = disp_guard_mark;

  0001c	56		 push	 esi

; 1292 : 	ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;
; 1293 : 	if (ATR_ATTACK_KIND(0, a0) & ATT_REFLEX)

  0001d	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00020	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ?disp_guard_mark@@YAXPAUaction@@@Z ; disp_guard_mark
  00027	c6 41 15 58	 mov	 BYTE PTR [ecx+21], 88	; 00000058H
  0002b	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0002e	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00031	a9 00 04 00 00	 test	 eax, 1024		; 00000400H
  00036	74 19		 je	 SHORT $LN3@set_guard_

; 1294 : 		ATR_CHR_NO(a1) = SPR_mirror;

  00038	c7 81 44 01 00
	00 2a 89 01 00	 mov	 DWORD PTR [ecx+324], 100650 ; 0001892aH

; 1328 : 
; 1329 : 	ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);

  00042	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00045	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00048	5e		 pop	 esi
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1330 : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN3@set_guard_:

; 1295 : 	else if (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA)

  00051	a9 00 10 00 00	 test	 eax, 4096		; 00001000H
  00056	74 19		 je	 SHORT $LN5@set_guard_

; 1296 : 		ATR_CHR_NO(a1) = SPR_barrior;

  00058	c7 81 44 01 00
	00 2b 89 01 00	 mov	 DWORD PTR [ecx+324], 100651 ; 0001892bH

; 1328 : 
; 1329 : 	ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);

  00062	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00065	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00068	5e		 pop	 esi
  00069	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1330 : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN5@set_guard_:

; 1297 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 1298 : 	else if (ATR_ATTACK_KIND(0, a0) & ATT_TRAP)

  00071	a9 00 00 00 02	 test	 eax, 33554432		; 02000000H
  00076	74 5a		 je	 SHORT $LN7@set_guard_

; 1299 : 	{		//Èô∑Èò±
; 1300 : 		if ( a0->hitDispNo >= 10 && a0->hitDispNo <= 19 )

  00078	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0007b	8d 42 f6	 lea	 eax, DWORD PTR [edx-10]
  0007e	83 f8 09	 cmp	 eax, 9
  00081	77 0c		 ja	 SHORT $LN9@set_guard_

; 1301 : 			ATR_CHR_NO(a1) = 101630;

  00083	c7 81 44 01 00
	00 fe 8c 01 00	 mov	 DWORD PTR [ecx+324], 101630 ; 00018cfeH
  0008d	eb 0f		 jmp	 SHORT $LN11@set_guard_
$LN9@set_guard_:

; 1302 : 		else if ( a0->hitDispNo >= 0 && a0->hitDispNo <= 9 )

  0008f	83 fa 09	 cmp	 edx, 9
  00092	77 0a		 ja	 SHORT $LN11@set_guard_

; 1303 : 			ATR_CHR_NO(a1) = 101696;

  00094	c7 81 44 01 00
	00 40 8d 01 00	 mov	 DWORD PTR [ecx+324], 101696 ; 00018d40H
$LN11@set_guard_:

; 1304 : #ifdef _PETSKILL_BATTLE_MODEL
; 1305 : 		if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL)

  0009e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000a1	83 ba 24 01 00
	00 62		 cmp	 DWORD PTR [edx+292], 98	; 00000062H
  000a8	75 58		 jne	 SHORT $LN18@set_guard_

; 1306 : 		{
; 1307 : 			if (ATR_GROUP_FLG(a0) == 0) ATR_CHR_NO(a1) = 101696;

  000aa	80 7a 5e 00	 cmp	 BYTE PTR [edx+94], 0
  000ae	b8 fe 8c 01 00	 mov	 eax, 101630		; 00018cfeH
  000b3	57		 push	 edi
  000b4	bf 40 8d 01 00	 mov	 edi, 101696		; 00018d40H
  000b9	0f 44 c7	 cmove	 eax, edi
  000bc	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 1328 : 
; 1329 : 	ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);

  000c2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c5	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cd	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1330 : }

  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
$LN7@set_guard_:

; 1308 : 			else ATR_CHR_NO(a1) = 101630;
; 1309 : 		}
; 1310 : #endif
; 1311 : 	}
; 1312 : #endif
; 1313 : #ifdef _PETSKILL_ACUPUNCTURE
; 1314 : 	else if (ATR_ATTACK_KIND(0, a0) & ATT_ACUPUNCTURE)

  000d2	a9 00 00 00 08	 test	 eax, 134217728		; 08000000H
  000d7	75 07		 jne	 SHORT $LN20@set_guard_

; 1315 : 		//ÁõÆÂâç‰∏çÊòæÁ§∫ÊïàÊûúÂõæ
; 1316 : #ifdef _FIX_ACUPUNCTURE
; 1317 : 		ATR_DAMAGE(a0) = ATR_ATTACK_POW(1, a0);
; 1318 : #else
; 1319 : 		ATR_DAMAGE(a0) = ATR_ATTACK_POW(0, a0)*2;//ËÆæÂÆö‰º§ÂÆ≥ÂÄº
; 1320 : #endif
; 1321 : #endif
; 1322 : #ifdef _PET_ITEM
; 1323 : 	else if (ATR_ATTACK_KIND(0, a0) & ATT_ATTACKBACK)

  000d9	a9 00 00 00 40	 test	 eax, 1073741824		; 40000000H
  000de	74 18		 je	 SHORT $LN17@set_guard_
$LN20@set_guard_:

; 1328 : 
; 1329 : 	ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);

  000e0	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  000e6	89 42 58	 mov	 DWORD PTR [edx+88], eax
  000e9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ec	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000ef	5e		 pop	 esi
  000f0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f3	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1330 : }

  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
$LN17@set_guard_:

; 1324 : 		ATR_DAMAGE(a0) = ATR_ATTACK_POW(1, a0);
; 1325 : #endif
; 1326 : 	else
; 1327 : 		ATR_CHR_NO(a1) = SPR_kyusyu;

  000f8	c7 81 44 01 00
	00 2c 89 01 00	 mov	 DWORD PTR [ecx+324], 100652 ; 0001892cH
$LN18@set_guard_:

; 1328 : 
; 1329 : 	ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);

  00102	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00105	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00108	5e		 pop	 esi
  00109	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN1@set_guard_:

; 1330 : }

  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
?set_guard_mark@@YAXPAUaction@@@Z ENDP			; set_guard_mark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?disp_guard_mark@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?disp_guard_mark@@YAXPAUaction@@@Z PROC			; disp_guard_mark, COMDAT

; 1275 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1276 : 	ACTION *a1;
; 1277 : 	a1 = ATR_BODY_WORK(0, a0);

  00004	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]

; 1278 : 	ATR_H_POS(a0) = ATR_H_POS(a1);
; 1279 : 	ATR_V_POS(a0) = ATR_V_POS(a1) - 32;
; 1280 : 	if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))	//???Óé∑???

  00007	6a 01		 push	 1
  00009	6a 00		 push	 0
  0000b	56		 push	 esi
  0000c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00015	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00018	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0001b	83 e8 20	 sub	 eax, 32			; 00000020H
  0001e	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00021	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	85 c0		 test	 eax, eax
  0002b	74 09		 je	 SHORT $LN2@disp_guard

; 1281 : 		DeathAction(a0);		//Óé∑?

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00033	83 c4 04	 add	 esp, 4
$LN2@disp_guard:
  00036	5e		 pop	 esi

; 1282 : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?disp_guard_mark@@YAXPAUaction@@@Z ENDP			; disp_guard_mark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_hit_mark@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?set_hit_mark@@YAXPAUaction@@@Z PROC			; set_hit_mark, COMDAT

; 1226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1227 : 	ACTION *a1, *a2;
; 1228 : 	int d0;
; 1229 : 
; 1230 : 	//ÂøÖÊùÄÊó∂‰∫ßÁîü‰∫îÈ¢óÊòüÊòüÔºå‰∏çÁÆ°ÊòØ‰∏çÊòØÂøÖÊùÄÈÉΩÂÖàÂÅöÔºå‰∏çÊòØÊâçbreak
; 1231 : 	for (d0 = 5; d0 > 0; d0--)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _a0$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	bf 1e 00 00 00	 mov	 edi, 30			; 0000001eH
  0000e	66 90		 npad	 2
$LL4@set_hit_ma:

; 1232 : 	{
; 1233 : 		//ËÆæÂÆöHIT_MARK
; 1234 : 		a1 = GetAction(T_PRIO_HIT_MARK, sizeof(ATR_EQU));

  00010	68 60 02 00 00	 push	 608			; 00000260H
  00015	6a 49		 push	 73			; 00000049H
  00017	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0001c	8b f0		 mov	 esi, eax
  0001e	83 c4 08	 add	 esp, 8

; 1235 : 		if (a1 == NULL)

  00021	85 f6		 test	 esi, esi
  00023	0f 84 af 00 00
	00		 je	 $LN14@set_hit_ma

; 1236 : 			return;
; 1237 : 		/* ÓçØ??? */
; 1238 : 		ATR_NAME(a1) = hit_mark;

  00029	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?hit_mark@@YAXPAUaction@@@Z ; hit_mark

; 1239 : 		//Ë°®Á§∫‰ºòÂÖàÂ∫¶
; 1240 : 		ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;
; 1241 : 		//ÂÅáËÆæË¢´ÊîªÂáªÂØπË±°Èò≤Âæ°Áî®ÈùíËâ≤Âõæ
; 1242 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_GUARD)
; 1243 : 			//ËÆæÂÆöÂõæÂè∑
; 1244 : 			ATR_CHR_NO(a1) = CG_HIT_MARK_12;		//ÈùíËâ≤
; 1245 : 		else
; 1246 : 			//ËÆæÂÆöÂõæÂè∑
; 1247 : 			ATR_CHR_NO(a1) = CG_HIT_MARK_22;		//Á∫¢Ëâ≤
; 1248 : 		//ÂàùÊúü‰ΩçÁΩÆÈÖçÁΩÆ
; 1249 : 		a2 = ATR_BODY_WORK(0, a0);

  00030	b9 a3 63 00 00	 mov	 ecx, 25507		; 000063a3H
  00035	c6 46 15 58	 mov	 BYTE PTR [esi+21], 88	; 00000058H
  00039	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 1250 : 		ATR_H_POS(a1) = ATR_H_POS(a2);
; 1251 : 		ATR_V_POS(a1) = ATR_V_POS(a2) - 32;
; 1252 : 		ATR_SPD(a1) = Rnd(4, 7);

  0003c	6a 07		 push	 7
  0003e	6a 04		 push	 4
  00040	f6 40 60 08	 test	 BYTE PTR [eax+96], 8
  00044	b8 a0 63 00 00	 mov	 eax, 25504		; 000063a0H
  00049	0f 44 c1	 cmove	 eax, ecx
  0004c	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  00052	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00055	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00058	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0005b	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0005e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00061	83 e8 20	 sub	 eax, 32			; 00000020H
  00064	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00067	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  0006c	89 86 34 01 00
	00		 mov	 DWORD PTR [esi+308], eax
  00072	83 c4 08	 add	 esp, 8

; 1253 : 		ATR_CRS(a1) = d0 * 6;

  00075	89 be 38 01 00
	00		 mov	 DWORD PTR [esi+312], edi

; 1254 : 		if (ATR_HIT_STOP(a0) == HIT_STOP_TIM)		//??????????

  0007b	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0007e	8a 48 5c	 mov	 cl, BYTE PTR [eax+92]
  00081	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00084	80 f9 08	 cmp	 cl, 8
  00087	75 11		 jne	 SHORT $LN8@set_hit_ma

; 1255 : 			ATR_FIRST_FLG(a1) = ATR_STIMER(a1) = ATR_HIT_STOP(a0);		//Ë°®Á§∫Êó∂Èó¥ËÆæÂÆö

  00089	88 48 01	 mov	 BYTE PTR [eax+1], cl
  0008c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0008f	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00092	88 81 1e 01 00
	00		 mov	 BYTE PTR [ecx+286], al
  00098	eb 19		 jmp	 SHORT $LN9@set_hit_ma
$LN8@set_hit_ma:

; 1256 : 		else
; 1257 : 		{
; 1258 : 			ATR_FIRST_FLG(a1) = ATR_STIMER(a1) = ATR_HIT_STOP(a0);		//Ë°®Á§∫Êó∂Èó¥ËÆæÂÆö

  0009a	88 48 01	 mov	 BYTE PTR [eax+1], cl
  0009d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000a0	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000a3	88 81 1e 01 00
	00		 mov	 BYTE PTR [ecx+286], al

; 1259 : 			ATR_KAISHIN(a1) = 1;

  000a9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ac	c6 80 01 01 00
	00 01		 mov	 BYTE PTR [eax+257], 1
$LN9@set_hit_ma:

; 1260 : 		}
; 1261 : 		//ÂøÖÊùÄÊó∂Â§ÑÁêÜ‰∏ã‰∏ÄÈ¢óÊòüÊòüÔºåÈùûÂøÖÊùÄË∑≥Âá∫
; 1262 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  000b3	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  000b6	f6 40 60 04	 test	 BYTE PTR [eax+96], 4
  000ba	74 1c		 je	 SHORT $LN14@set_hit_ma

; 1263 : 		{
; 1264 : 			ATR_NAME(a1) = hit_mark_critical;

  000bc	83 ef 06	 sub	 edi, 6
  000bf	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?hit_mark_critical@@YAXPAUaction@@@Z ; hit_mark_critical

; 1265 : 			ATR_CHR_NO(a1) = CG_HIT_MARK_01;

  000c6	c7 86 44 01 00
	00 9d 63 00 00	 mov	 DWORD PTR [esi+324], 25501 ; 0000639dH
  000d0	85 ff		 test	 edi, edi
  000d2	0f 8f 38 ff ff
	ff		 jg	 $LL4@set_hit_ma
$LN14@set_hit_ma:
  000d8	5f		 pop	 edi

; 1266 : 
; 1267 : 		}
; 1268 : 		else
; 1269 : 			break;
; 1270 : 	}
; 1271 : }

  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
?set_hit_mark@@YAXPAUaction@@@Z ENDP			; set_hit_mark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?hit_mark@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?hit_mark@@YAXPAUaction@@@Z PROC			; hit_mark, COMDAT

; 1200 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1201 : 	//ÂØπË±°Ê≠ª‰∫°ATR_KAISHIN‰∏∫TRUE
; 1202 : 	if (ATR_KAISHIN(a0))

  00005	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00008	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0000d	57		 push	 edi
  0000e	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00011	8a 9f 1e 01 00
	00		 mov	 bl, BYTE PTR [edi+286]
  00017	8a 7f 01	 mov	 bh, BYTE PTR [edi+1]
  0001a	0f b6 cb	 movzx	 ecx, bl
  0001d	f7 e1		 mul	 ecx
  0001f	0f b6 c7	 movzx	 eax, bh
  00022	d1 ea		 shr	 edx, 1

; 1203 : 	{
; 1204 : 		if (ATR_STIMER(a0) == ATR_FIRST_FLG(a0) * 1 / 3)		//?????
; 1205 : 			ATR_CHR_NO(a0)--;
; 1206 : 		if (ATR_STIMER(a0) == ATR_FIRST_FLG(a0) * 2 / 3)		//?????
; 1207 : 			ATR_CHR_NO(a0)--;
; 1208 : 	}
; 1209 : 	else
; 1210 : 	{
; 1211 : 		if (ATR_STIMER(a0) == ATR_FIRST_FLG(a0) * 1 / 3)		//?????
; 1212 : 			ATR_CHR_NO(a0)--;
; 1213 : 		if (ATR_STIMER(a0) == ATR_FIRST_FLG(a0) * 2 / 3)		//?????
; 1214 : 			ATR_CHR_NO(a0)--;
; 1215 : 	}
; 1216 : 	if (--ATR_STIMER(a0))

  00024	3b c2		 cmp	 eax, edx
  00026	75 0f		 jne	 SHORT $LN14@hit_mark
  00028	ff 8e 44 01 00
	00		 dec	 DWORD PTR [esi+324]
  0002e	8a 9f 1e 01 00
	00		 mov	 bl, BYTE PTR [edi+286]
  00034	8a 7f 01	 mov	 bh, BYTE PTR [edi+1]
$LN14@hit_mark:
  00037	0f b6 cb	 movzx	 ecx, bl
  0003a	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  0003f	03 c9		 add	 ecx, ecx
  00041	f7 e9		 imul	 ecx
  00043	0f b6 c7	 movzx	 eax, bh
  00046	8b ca		 mov	 ecx, edx
  00048	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004b	03 ca		 add	 ecx, edx
  0004d	3b c1		 cmp	 eax, ecx
  0004f	75 06		 jne	 SHORT $LN7@hit_mark
  00051	ff 8e 44 01 00
	00		 dec	 DWORD PTR [esi+324]
$LN7@hit_mark:
  00057	80 47 01 ff	 add	 BYTE PTR [edi+1], 255	; 000000ffH
  0005b	74 12		 je	 SHORT $LN8@hit_mark

; 1217 : 		pattern(a0, 0, 0);

  0005d	6a 00		 push	 0
  0005f	6a 00		 push	 0
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	5f		 pop	 edi

; 1221 : 		return;
; 1222 : 	}
; 1223 : }

  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN8@hit_mark:

; 1218 : 	else
; 1219 : 	{
; 1220 : 		DeathAction(a0);		//Áªà‰∫Ü

  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi

; 1221 : 		return;
; 1222 : 	}
; 1223 : }

  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?hit_mark@@YAXPAUaction@@@Z ENDP			; hit_mark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?hit_mark_critical@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?hit_mark_critical@@YAXPAUaction@@@Z PROC		; hit_mark_critical, COMDAT

; 1184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1185 : 	if (ATR_STIMER(a0) == ATR_FIRST_FLG(a0) >> 1)		//?????

  00004	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00007	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0000a	8a 82 1e 01 00
	00		 mov	 al, BYTE PTR [edx+286]
  00010	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  00013	d0 e8		 shr	 al, 1
  00015	3a c8		 cmp	 cl, al
  00017	75 09		 jne	 SHORT $LN2@hit_mark_c

; 1186 : 		ATR_CHR_NO(a0)--;

  00019	ff 8e 44 01 00
	00		 dec	 DWORD PTR [esi+324]
  0001f	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
$LN2@hit_mark_c:

; 1187 : 	if (--ATR_STIMER(a0))

  00022	80 e9 01	 sub	 cl, 1
  00025	88 4a 01	 mov	 BYTE PTR [edx+1], cl
  00028	56		 push	 esi
  00029	74 15		 je	 SHORT $LN3@hit_mark_c

; 1188 : 	{
; 1189 : 		gemini(a0);

  0002b	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 1190 : 		pattern(a0, 0, 0);

  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	5e		 pop	 esi

; 1195 : 		return;
; 1196 : 	}
; 1197 : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN3@hit_mark_c:

; 1191 : 	}
; 1192 : 	else
; 1193 : 	{
; 1194 : 		DeathAction(a0);		//Áªà‰∫Ü

  00040	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00045	83 c4 04	 add	 esp, 4
  00048	5e		 pop	 esi

; 1195 : 		return;
; 1196 : 	}
; 1197 : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?hit_mark_critical@@YAXPAUaction@@@Z ENDP		; hit_mark_critical
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?magic_effect@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?magic_effect@@YAXPAUaction@@@Z PROC			; magic_effect, COMDAT

; 1149 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1150 : 	ACTION *a1;
; 1151 : 
; 1152 : 	switch (ATR_VCT_NO(a0))

  00004	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00007	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0000d	83 e8 00	 sub	 eax, 0
  00010	74 26		 je	 SHORT $LN4@magic_effe
  00012	83 e8 01	 sub	 eax, 1
  00015	74 21		 je	 SHORT $LN4@magic_effe
  00017	83 e8 01	 sub	 eax, 1
  0001a	75 38		 jne	 SHORT $LN5@magic_effe

; 1153 : 	{
; 1154 : 	case 0:
; 1155 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))	//???Óé∑???
; 1156 : 		{
; 1157 : 			ATR_VCT_NO(a0)++;
; 1158 : 			ATR_CHR_ACT(a0)++;
; 1159 : 		}
; 1160 : 		break;
; 1161 : 	case 1:
; 1162 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))	//???Óé∑???
; 1163 : 		{
; 1164 : 			ATR_VCT_NO(a0)++;
; 1165 : 			ATR_CHR_ACT(a0)++;
; 1166 : 		}
; 1167 : 		break;
; 1168 : 	case 2:
; 1169 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))	//???Óé∑???

  0001c	6a 01		 push	 1
  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	85 c0		 test	 eax, eax
  0002a	74 28		 je	 SHORT $LN5@magic_effe

; 1170 : 		{
; 1171 : 			DeathAction(a0);		//Óé∑?

  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00032	83 c4 04	 add	 esp, 4
  00035	5e		 pop	 esi

; 1180 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN4@magic_effe:

; 1172 : 			return;
; 1173 : 		}
; 1174 : 		break;
; 1175 : 	}
; 1176 : 	a1 = ATR_BODY_WORK(0, a0);		//?Óù≥ÓüúÓíú

  00038	6a 01		 push	 1
  0003a	6a 00		 push	 0
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	85 c0		 test	 eax, eax
  00047	74 0b		 je	 SHORT $LN5@magic_effe
  00049	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004c	fe 00		 inc	 BYTE PTR [eax]
  0004e	ff 86 4c 01 00
	00		 inc	 DWORD PTR [esi+332]
$LN5@magic_effe:
  00054	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00057	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1177 : 	ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  0005a	8a 41 15	 mov	 al, BYTE PTR [ecx+21]
  0005d	fe c0		 inc	 al
  0005f	88 46 15	 mov	 BYTE PTR [esi+21], al

; 1178 : 	ATR_H_POS(a0) = ATR_H_POS(a1);

  00062	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00065	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 1179 : 	ATR_V_POS(a0) = ATR_V_POS(a1);

  00068	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0006b	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0006e	5e		 pop	 esi

; 1180 : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?magic_effect@@YAXPAUaction@@@Z ENDP			; magic_effect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?disp_kanji@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?disp_kanji@@YAXPAUaction@@@Z PROC			; disp_kanji, COMDAT

; 1122 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1123 : 	int d1, d7;
; 1124 : 
; 1125 : 	ACTION *a1;
; 1126 : 	a1 = ATR_BODY_WORK(0, a0);		//?????

  00004	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00007	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1127 : 	if (!--ATR_INT_WORK0(a0))		//Óù∏Óçï??ÓìÅ???

  0000d	83 80 24 01 00
	00 ff		 add	 DWORD PTR [eax+292], -1
  00014	75 2b		 jne	 SHORT $LN5@disp_kanji

; 1128 : 	{
; 1129 : 		DeathAction(a1);		//????Óåñ

  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 1130 : 		DeathAction(a0);		//Óé∑?

  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 1131 : 		p_kanji = NULL;
; 1132 : 		ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00027	83 c4 08	 add	 esp, 8
  0002a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_kanji@@3PAUaction@@A, 0
  00034	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00037	5e		 pop	 esi
  00038	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  0003c	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 1142 : 			}
; 1143 : 		}
; 1144 : 	}
; 1145 : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN5@disp_kanji:

; 1133 : 	}
; 1134 : 	else
; 1135 : 	{
; 1136 : 		if (ATR_LIFE(a1))		//Óù∏Óçï????

  00041	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  00045	74 34		 je	 SHORT $LN3@disp_kanji

; 1137 : 		{
; 1138 : 			for (d1 = 4 + 13, d7 = 0; d7 < 4; d1 += 18, d7++)

  00047	57		 push	 edi
  00048	bf 11 00 00 00	 mov	 edi, 17			; 00000011H
  0004d	be 00 00 00 00	 mov	 esi, OFFSET ?kanji_buf@@3PAY0IA@DA
$LL4@disp_kanji:

; 1139 : 			{
; 1140 : 				if (kanji_buf[d7][0])		//Óû∞??????

  00052	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00055	74 15		 je	 SHORT $LN2@disp_kanji

; 1141 : 					StockFontBuffer(640 - 4 + -64 * 4 + 24, d1, FONT_PRIO_FRONT, FONT_PAL_WHITE, kanji_buf[d7], 0);

  00057	6a 00		 push	 0
  00059	56		 push	 esi
  0005a	6a 00		 push	 0
  0005c	6a 01		 push	 1
  0005e	57		 push	 edi
  0005f	68 94 01 00 00	 push	 404			; 00000194H
  00064	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00069	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@disp_kanji:

; 1137 : 		{
; 1138 : 			for (d1 = 4 + 13, d7 = 0; d7 < 4; d1 += 18, d7++)

  0006c	83 ee 80	 sub	 esi, -128		; ffffff80H
  0006f	83 c7 12	 add	 edi, 18			; 00000012H
  00072	81 fe 00 02 00
	00		 cmp	 esi, OFFSET ?kanji_buf@@3PAY0IA@DA+512
  00078	7c d8		 jl	 SHORT $LL4@disp_kanji
  0007a	5f		 pop	 edi
$LN3@disp_kanji:
  0007b	5e		 pop	 esi

; 1142 : 			}
; 1143 : 		}
; 1144 : 	}
; 1145 : }

  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?disp_kanji@@YAXPAUaction@@@Z ENDP			; disp_kanji
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?play_damage@@YAXHH@Z
_TEXT	SEGMENT
_no$ = 8						; size = 4
_x$ = 12						; size = 4
?play_damage@@YAXHH@Z PROC				; play_damage, COMDAT

; 1083 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1084 : 	if (no >= 10100)
; 1085 : 		no -= 100;
; 1086 : 	//ÊïàÊûúÈü≥ÂàÜÁ±ª
; 1087 : 	switch (no)

  00003	8b 45 08	 mov	 eax, DWORD PTR _no$[ebp]
  00006	3d 74 27 00 00	 cmp	 eax, 10100		; 00002774H
  0000b	8d 48 9c	 lea	 ecx, DWORD PTR [eax-100]
  0000e	0f 4c c8	 cmovl	 ecx, eax
  00011	81 c1 f0 d8 ff
	ff		 add	 ecx, -10000		; ffffd8f0H
  00017	83 f9 07	 cmp	 ecx, 7
  0001a	77 4f		 ja	 SHORT $LN13@play_damag
  0001c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN17@play_damag[ecx*4]
$LN6@play_damag:

; 1088 : 	{
; 1089 : 	case 10000:		//Á©∫Êâã
; 1090 : 		no = 250;
; 1091 : 		break;
; 1092 : 	case 10001:		//Áà™
; 1093 : 		no = 254;
; 1094 : 		break;
; 1095 : 	case 10002:		//Êñß
; 1096 : 		no = 251;
; 1097 : 		break;
; 1098 : 	case 10003:		//Ê£çÊ£í
; 1099 : 		no = 251;
; 1100 : 		break;
; 1101 : 	case 10004:		//Êû™
; 1102 : 		no = 252;
; 1103 : 		break;
; 1104 : 	case 10005:		//Âºì
; 1105 : 		no = -1;
; 1106 : 		break;
; 1107 : 	case 10006:		//ÊäïÊé∑Êñß
; 1108 : 		no = -1;
; 1109 : 		break;
; 1110 : 	case 10007:		//ÂííÊúØ
; 1111 : 		no = 254;
; 1112 : 		break;
; 1113 : 	default:
; 1114 : 		no = 250;
; 1115 : 	}
; 1116 : 	if (no != -1)
; 1117 : 		play_se(no, x, 240);

  00023	68 f0 00 00 00	 push	 240			; 000000f0H
  00028	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0002b	b8 fe 00 00 00	 mov	 eax, 254		; 000000feH
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1118 : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN7@play_damag:

; 1088 : 	{
; 1089 : 	case 10000:		//Á©∫Êâã
; 1090 : 		no = 250;
; 1091 : 		break;
; 1092 : 	case 10001:		//Áà™
; 1093 : 		no = 254;
; 1094 : 		break;
; 1095 : 	case 10002:		//Êñß
; 1096 : 		no = 251;
; 1097 : 		break;
; 1098 : 	case 10003:		//Ê£çÊ£í
; 1099 : 		no = 251;
; 1100 : 		break;
; 1101 : 	case 10004:		//Êû™
; 1102 : 		no = 252;
; 1103 : 		break;
; 1104 : 	case 10005:		//Âºì
; 1105 : 		no = -1;
; 1106 : 		break;
; 1107 : 	case 10006:		//ÊäïÊé∑Êñß
; 1108 : 		no = -1;
; 1109 : 		break;
; 1110 : 	case 10007:		//ÂííÊúØ
; 1111 : 		no = 254;
; 1112 : 		break;
; 1113 : 	default:
; 1114 : 		no = 250;
; 1115 : 	}
; 1116 : 	if (no != -1)
; 1117 : 		play_se(no, x, 240);

  0003b	68 f0 00 00 00	 push	 240			; 000000f0H
  00040	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  00043	b8 fb 00 00 00	 mov	 eax, 251		; 000000fbH
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1118 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@play_damag:

; 1088 : 	{
; 1089 : 	case 10000:		//Á©∫Êâã
; 1090 : 		no = 250;
; 1091 : 		break;
; 1092 : 	case 10001:		//Áà™
; 1093 : 		no = 254;
; 1094 : 		break;
; 1095 : 	case 10002:		//Êñß
; 1096 : 		no = 251;
; 1097 : 		break;
; 1098 : 	case 10003:		//Ê£çÊ£í
; 1099 : 		no = 251;
; 1100 : 		break;
; 1101 : 	case 10004:		//Êû™
; 1102 : 		no = 252;
; 1103 : 		break;
; 1104 : 	case 10005:		//Âºì
; 1105 : 		no = -1;
; 1106 : 		break;
; 1107 : 	case 10006:		//ÊäïÊé∑Êñß
; 1108 : 		no = -1;
; 1109 : 		break;
; 1110 : 	case 10007:		//ÂííÊúØ
; 1111 : 		no = 254;
; 1112 : 		break;
; 1113 : 	default:
; 1114 : 		no = 250;
; 1115 : 	}
; 1116 : 	if (no != -1)
; 1117 : 		play_se(no, x, 240);

  00053	68 f0 00 00 00	 push	 240			; 000000f0H
  00058	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0005b	b8 fc 00 00 00	 mov	 eax, 252		; 000000fcH
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1118 : }

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN13@play_damag:

; 1088 : 	{
; 1089 : 	case 10000:		//Á©∫Êâã
; 1090 : 		no = 250;
; 1091 : 		break;
; 1092 : 	case 10001:		//Áà™
; 1093 : 		no = 254;
; 1094 : 		break;
; 1095 : 	case 10002:		//Êñß
; 1096 : 		no = 251;
; 1097 : 		break;
; 1098 : 	case 10003:		//Ê£çÊ£í
; 1099 : 		no = 251;
; 1100 : 		break;
; 1101 : 	case 10004:		//Êû™
; 1102 : 		no = 252;
; 1103 : 		break;
; 1104 : 	case 10005:		//Âºì
; 1105 : 		no = -1;
; 1106 : 		break;
; 1107 : 	case 10006:		//ÊäïÊé∑Êñß
; 1108 : 		no = -1;
; 1109 : 		break;
; 1110 : 	case 10007:		//ÂííÊúØ
; 1111 : 		no = 254;
; 1112 : 		break;
; 1113 : 	default:
; 1114 : 		no = 250;
; 1115 : 	}
; 1116 : 	if (no != -1)
; 1117 : 		play_se(no, x, 240);

  0006b	68 f0 00 00 00	 push	 240			; 000000f0H
  00070	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  00073	b8 fa 00 00 00	 mov	 eax, 250		; 000000faH
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@play_damag:

; 1118 : }

  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	90		 npad	 1
$LN17@play_damag:
  00084	00 00 00 00	 DD	 $LN13@play_damag
  00088	00 00 00 00	 DD	 $LN6@play_damag
  0008c	00 00 00 00	 DD	 $LN7@play_damag
  00090	00 00 00 00	 DD	 $LN7@play_damag
  00094	00 00 00 00	 DD	 $LN9@play_damag
  00098	00 00 00 00	 DD	 $LN14@play_damag
  0009c	00 00 00 00	 DD	 $LN14@play_damag
  000a0	00 00 00 00	 DD	 $LN6@play_damag
?play_damage@@YAXHH@Z ENDP				; play_damage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?set_damage_num@@YAXPAUaction@@HH@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
_color$ = 12						; size = 4
_v_pos$ = 16						; size = 4
?set_damage_num@@YAXPAUaction@@HH@Z PROC		; set_damage_num, COMDAT

; 975  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 976  : 	ACTION *a1;
; 977  : 	a1 = GetAction(T_PRIO_DAMAGE_NUM, sizeof(ATR_EQU));

  00004	68 60 02 00 00	 push	 608			; 00000260H
  00009	6a 4a		 push	 74			; 0000004aH
  0000b	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  00010	8b f8		 mov	 edi, eax
  00012	83 c4 08	 add	 esp, 8

; 978  : 	if (a1 == NULL)

  00015	85 ff		 test	 edi, edi
  00017	0f 84 8c 01 00
	00		 je	 $LN12@set_damage

; 979  : 		return;
; 980  : 	/* ÓçØ??? */
; 981  : #ifdef _WAVETRACK					// (‰∏çÂèØÂºÄ) Syu ADD Èü≥Ê≥¢ËΩ®ÈÅì
; 982  : 	BeAttNum = a0->hitDispNo ; 

  0001d	53		 push	 ebx

; 983  : #endif
; 984  : 	ATR_NAME(a1) = damage_num;
; 985  : 	//Ë°®Á§∫‰ºòÂÖàÂ∫¶
; 986  : 	ATR_DISP_PRIO(a1) = D_PRIO_DAMAGE_NUM;
; 987  : 	/* ???Óñ∫ */
; 988  : 	ATR_H_POS(a1) = ATR_H_POS(a0);
; 989  : 	ATR_V_POS(a1) = ATR_V_POS(a0) + v_pos;
; 990  : 	ATR_SPD(a1) = DAMAGE_SPD;
; 991  : 	ATR_ATTRIB(a1) = ACT_ATR_HIDE;
; 992  : 	//Syu mark ‰∏ãÈù¢ËøôË°åË∑üÈ¢úËâ≤Ê†πÊú¨Ê≤°ÂÖ≥Á≥ªÔºåÊòØdamage_numÁöÑ‰ª£Á†ÅÔºådamage_numÁöÑswitchÊâç‰ºö??Ëâ≤Á†Å
; 993  : 	ATR_INT_WORK1(a1) = color;		//ÊñáÂ≠óÈ¢úËâ≤ËÆæÂÆö

  0001e	8b 5d 0c	 mov	 ebx, DWORD PTR _color$[ebp]
  00021	56		 push	 esi
  00022	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]
  00025	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00028	89 0d 00 00 00
	00		 mov	 DWORD PTR ?BeAttNum@@3HA, ecx ; BeAttNum
  0002e	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ?damage_num@@YAXPAUaction@@@Z ; damage_num
  00035	c6 47 15 59	 mov	 BYTE PTR [edi+21], 89	; 00000059H
  00039	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0003c	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0003f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00042	03 45 10	 add	 eax, DWORD PTR _v_pos$[ebp]
  00045	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00048	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0004b	c7 87 34 01 00
	00 18 00 00 00	 mov	 DWORD PTR [edi+308], 24	; 00000018H
  00055	c7 87 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [edi+164], 2
  0005f	89 98 28 01 00
	00		 mov	 DWORD PTR [eax+296], ebx

; 994  : 	if (ATR_ADDHPFLG(a0) == 1)

  00065	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00068	83 b8 3c 02 00
	00 01		 cmp	 DWORD PTR [eax+572], 1
  0006f	75 24		 jne	 SHORT $LN5@set_damage

; 995  : 	{
; 996  : 		ATR_ADDHP(a1) = ATR_ADDHP(a0);

  00071	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00074	8b 80 34 02 00
	00		 mov	 eax, DWORD PTR [eax+564]
  0007a	89 81 34 02 00
	00		 mov	 DWORD PTR [ecx+564], eax

; 997  : 		ATR_ADDHPFLG(a1) = ATR_ADDHPFLG(a0);

  00080	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00083	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00086	8b 80 3c 02 00
	00		 mov	 eax, DWORD PTR [eax+572]
  0008c	89 81 3c 02 00
	00		 mov	 DWORD PTR [ecx+572], eax
  00092	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN5@set_damage:

; 998  : 	}
; 999  : 	int dddd = ATR_DAMAGE(a0);
; 1000 : 	ATR_INT_WORK0(a1) = ATR_DAMAGE(a0);		//‰º§ÂÆ≥ËÆæÂÆö

  00095	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  00098	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0009b	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 1001 : 	ATR_INT_WORKp(a1) = ATR_PET_DAMAGE(a0);		//‰º§ÂÆ≥ËÆæÂÆö

  000a1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000a4	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000a7	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  000ad	89 81 28 02 00
	00		 mov	 DWORD PTR [ecx+552], eax

; 1002 : 	ATR_RIDE_FLAG(a1) = ATR_RIDE(a0);

  000b3	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000b6	8b 86 94 01 00
	00		 mov	 eax, DWORD PTR [esi+404]
  000bc	89 81 2c 02 00
	00		 mov	 DWORD PTR [ecx+556], eax

; 1003 : 	//andy_mp
; 1004 : 	ATR_MPDAMAGE(a1) = ATR_MPDAMAGE(a0);

  000c2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c5	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000c8	8b 80 30 02 00
	00		 mov	 eax, DWORD PTR [eax+560]
  000ce	89 81 30 02 00
	00		 mov	 DWORD PTR [ecx+560], eax

; 1005 : 	ATR_MPDFLG(a1) = ATR_MPDFLG(a0);

  000d4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d7	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000da	8b 80 38 02 00
	00		 mov	 eax, DWORD PTR [eax+568]
  000e0	89 81 38 02 00
	00		 mov	 DWORD PTR [ecx+568], eax

; 1006 : 
; 1007 : 	switch (ATR_INT_WORK1(a1))

  000e6	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000e9	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  000ef	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  000f2	77 0e		 ja	 SHORT $LN7@set_damage
  000f4	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN15@set_damage[eax]
  000fb	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@set_damage[eax*4]
$LN7@set_damage:

; 1008 : 	{
; 1009 : 	case 0:
; 1010 : 	case 36:
; 1011 : 	case 37:
; 1012 : 	case 38:
; 1013 : 	case 40:
; 1014 : #ifdef _SKILL_ADDBARRIER
; 1015 : 	case 43:
; 1016 : #endif
; 1017 : #ifdef _PETSKILL_PEEL
; 1018 : 	case 44:
; 1019 : #endif
; 1020 : #ifdef _PETSKILL_JUSTICE
; 1021 : 	case 45:
; 1022 : #endif
; 1023 : #ifdef _PETSKILL_ADDATTCRAZED
; 1024 : 	case 46:
; 1025 : 	case 47:
; 1026 : #endif
; 1027 : #ifdef _PETSKILL_PROVOKEFIGHT
; 1028 : 	case 48:
; 1029 : #endif
; 1030 : #ifdef _PRO3_ADDSKILL
; 1031 : 	case 49:
; 1032 : 	case 50:
; 1033 : 	case 51:
; 1034 : #endif
; 1035 : 	case 6:
; 1036 : 	case 14:
; 1037 : 	case 15:
; 1038 : 	case 16:
; 1039 : 	case 19:
; 1040 : 		break;
; 1041 : 	default:
; 1042 : #ifdef _SKILL_SELFEXPLODE //Ëá™ÁàÜ
; 1043 : 		if (ATR_SELFEXPLODE(a0) == 1)

  00102	83 be d8 01 00
	00 01		 cmp	 DWORD PTR [esi+472], 1
  00109	75 23		 jne	 SHORT $LN8@set_damage

; 1044 : 			ATR_V_POS(a1) = ATR_V_POS(a0) - SpriteInfo[a0->bmpNo].height / 2 + 20;

  0010b	8b 86 9c 00 00
	00		 mov	 eax, DWORD PTR [esi+156]
  00111	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00114	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00117	0f bf 04 85 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  0011f	99		 cdq
  00120	2b c2		 sub	 eax, edx
  00122	d1 f8		 sar	 eax, 1
  00124	2b c8		 sub	 ecx, eax
  00126	83 c1 14	 add	 ecx, 20			; 00000014H
  00129	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx
  0012c	eb 09		 jmp	 SHORT $LN9@set_damage
$LN8@set_damage:

; 1045 : 		else
; 1046 : #endif
; 1047 : #ifdef _SYUTEST
; 1048 : 		if (color == 41)
; 1049 : 			ATR_V_POS(a1) = ATR_V_POS(a0) + v_pos;
; 1050 : 		else
; 1051 : 			ATR_V_POS(a1) = ATR_V_POS(a0) - 80;
; 1052 : #else
; 1053 : 			ATR_V_POS(a1) = ATR_V_POS(a0) - 80;

  0012e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00131	83 e8 50	 sub	 eax, 80			; 00000050H
  00134	89 47 1c	 mov	 DWORD PTR [edi+28], eax
$LN9@set_damage:

; 1054 : #endif
; 1055 : 	}
; 1056 : #ifdef _PETSKILL_LER
; 1057 : 	// Èõ∑Â∞îÈò≤Âæ°Êó∂ÁöÑÈò≤Êä§Áõæ
; 1058 : 	if (color == 3 && ATR_CHR_NO(a0) == 101815)

  00137	83 fb 03	 cmp	 ebx, 3
  0013a	75 6b		 jne	 SHORT $LN17@set_damage
  0013c	81 be 44 01 00
	00 b7 8d 01 00	 cmp	 DWORD PTR [esi+324], 101815 ; 00018db7H
  00146	75 5f		 jne	 SHORT $LN17@set_damage

; 1059 : 	{
; 1060 : 		ACTION *a2;
; 1061 : 		a2 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  00148	68 60 02 00 00	 push	 608			; 00000260H
  0014d	6a 47		 push	 71			; 00000047H
  0014f	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  00154	8b d0		 mov	 edx, eax
  00156	83 c4 08	 add	 esp, 8

; 1062 : 		if (a2 == NULL)

  00159	85 d2		 test	 edx, edx
  0015b	74 4a		 je	 SHORT $LN17@set_damage

; 1063 : 			return;
; 1064 : 		ATR_NAME(a2) = katino;
; 1065 : 		ATR_BODY_WORK(0, a2) = a0;

  0015d	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00160	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?katino@@YAXPAUaction@@@Z ; katino
  00167	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 1066 : 		ATR_JUJUTSU_WORK(a0) = a2;

  0016a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0016d	89 91 10 01 00
	00		 mov	 DWORD PTR [ecx+272], edx

; 1067 : 		ATR_DISP_PRIO(a2) = ATR_DISP_PRIO(a0) + 1;

  00173	8a 4e 15	 mov	 cl, BYTE PTR [esi+21]
  00176	fe c1		 inc	 cl
  00178	88 4a 15	 mov	 BYTE PTR [edx+21], cl

; 1068 : 		ATR_H_POS(a2) = ATR_H_POS(a0) + 10;
; 1069 : 		ATR_V_POS(a2) = ATR_V_POS(a0) + 10;
; 1070 : 		if (g_bUseAlpha)

  0017b	b9 ad 8d 01 00	 mov	 ecx, 101805		; 00018dadH
  00180	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00183	83 c0 0a	 add	 eax, 10			; 0000000aH
  00186	89 42 18	 mov	 DWORD PTR [edx+24], eax
  00189	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0018c	83 c0 0a	 add	 eax, 10			; 0000000aH
  0018f	89 42 1c	 mov	 DWORD PTR [edx+28], eax
  00192	b8 e2 8d 01 00	 mov	 eax, 101858		; 00018de2H
  00197	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, 0 ; g_bUseAlpha
  0019e	0f 45 c1	 cmovne	 eax, ecx
  001a1	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax
$LN17@set_damage:
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
$LN12@set_damage:
  001a9	5f		 pop	 edi

; 1071 : 			ATR_CHR_NO(a2) = 101805;
; 1072 : 		else
; 1073 : 			ATR_CHR_NO(a2) = 101858;
; 1074 : 	}
; 1075 : #endif
; 1076 : #ifdef _PETSKILL_RIDE
; 1077 : 	//petrideChangeGraph( a0 );
; 1078 : #endif
; 1079 : }

  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
$LN16@set_damage:
  001ac	00 00 00 00	 DD	 $LN9@set_damage
  001b0	00 00 00 00	 DD	 $LN7@set_damage
$LN15@set_damage:
  001b4	00		 DB	 0
  001b5	01		 DB	 1
  001b6	01		 DB	 1
  001b7	01		 DB	 1
  001b8	01		 DB	 1
  001b9	01		 DB	 1
  001ba	00		 DB	 0
  001bb	01		 DB	 1
  001bc	01		 DB	 1
  001bd	01		 DB	 1
  001be	01		 DB	 1
  001bf	01		 DB	 1
  001c0	01		 DB	 1
  001c1	01		 DB	 1
  001c2	00		 DB	 0
  001c3	00		 DB	 0
  001c4	00		 DB	 0
  001c5	01		 DB	 1
  001c6	01		 DB	 1
  001c7	00		 DB	 0
  001c8	01		 DB	 1
  001c9	01		 DB	 1
  001ca	01		 DB	 1
  001cb	01		 DB	 1
  001cc	01		 DB	 1
  001cd	01		 DB	 1
  001ce	01		 DB	 1
  001cf	01		 DB	 1
  001d0	01		 DB	 1
  001d1	01		 DB	 1
  001d2	01		 DB	 1
  001d3	01		 DB	 1
  001d4	01		 DB	 1
  001d5	01		 DB	 1
  001d6	01		 DB	 1
  001d7	01		 DB	 1
  001d8	00		 DB	 0
  001d9	00		 DB	 0
  001da	00		 DB	 0
  001db	01		 DB	 1
  001dc	00		 DB	 0
  001dd	01		 DB	 1
  001de	01		 DB	 1
  001df	00		 DB	 0
  001e0	00		 DB	 0
?set_damage_num@@YAXPAUaction@@HH@Z ENDP		; set_damage_num
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ PROC		; sprintf_s<256>, COMDAT

; 1858 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1503 :     }
; 1504 :     #endif
; 1505 : 
; 1506 :     #if __STDC_WANT_SECURE_LIB__
; 1507 : 
; 1508 :         _Success_(return >= 0)
; 1509 :         _Check_return_opt_
; 1510 :         _CRT_STDIO_INLINE int __CRTDECL vsprintf_s(
; 1511 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1512 :             _In_                                          size_t      const _BufferCount,
; 1513 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1514 :                                                           va_list           _ArgList
; 1515 :             )
; 1516 :     #if defined _NO_CRT_STDIO_INLINE
; 1517 :     ;
; 1518 :     #else
; 1519 :         {
; 1520 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1521 :         }
; 1522 :     #endif
; 1523 : 
; 1524 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(
; 1525 :             _Success_(return >= 0)
; 1526 :             int, vsprintf_s,
; 1527 :             _Always_(_Post_z_)            char,        _Buffer,
; 1528 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1529 :                                           va_list,     _ArgList
; 1530 :             )
; 1531 : 
; 1532 :     #endif
; 1533 : 
; 1534 :     _Success_(return >= 0)
; 1535 :     _Check_return_opt_
; 1536 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p_l(
; 1537 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1538 :         _In_                                          size_t      const _BufferCount,
; 1539 :         _In_z_ _Printf_format_string_params_(2)       char const* const _Format,
; 1540 :         _In_opt_                                      _locale_t   const _Locale,
; 1541 :                                                       va_list           _ArgList
; 1542 :         )
; 1543 :     #if defined _NO_CRT_STDIO_INLINE
; 1544 :     ;
; 1545 :     #else
; 1546 :     {
; 1547 :         int const _Result = __stdio_common_vsprintf_p(
; 1548 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1549 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1550 : 
; 1551 :         return _Result < 0 ? -1 : _Result;
; 1552 :     }
; 1553 :     #endif
; 1554 : 
; 1555 :     _Success_(return >= 0)
; 1556 :     _Check_return_opt_
; 1557 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p(
; 1558 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1559 :         _In_                                          size_t      const _BufferCount,
; 1560 :         _In_z_ _Printf_format_string_                 char const* const _Format,
; 1561 :                                                       va_list           _ArgList
; 1562 :         )
; 1563 :     #if defined _NO_CRT_STDIO_INLINE
; 1564 :     ;
; 1565 :     #else
; 1566 :     {
; 1567 :         return _vsprintf_p_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1568 :     }
; 1569 :     #endif
; 1570 : 
; 1571 :     _Success_(return >= 0)
; 1572 :     _Check_return_opt_
; 1573 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s_l(
; 1574 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1575 :         _In_                                              size_t      const _BufferCount,
; 1576 :         _In_                                              size_t      const _MaxCount,
; 1577 :         _In_z_ _Printf_format_string_params_(2)           char const* const _Format,
; 1578 :         _In_opt_                                          _locale_t   const _Locale,
; 1579 :                                                           va_list          _ArgList
; 1580 :         )
; 1581 :     #if defined _NO_CRT_STDIO_INLINE
; 1582 :     ;
; 1583 :     #else
; 1584 :     {
; 1585 :         int const _Result = __stdio_common_vsnprintf_s(
; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;
; 1590 :     }
; 1591 :     #endif
; 1592 : 
; 1593 :     _Success_(return >= 0)
; 1594 :     _Check_return_opt_
; 1595 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s(
; 1596 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1597 :         _In_                                              size_t      const _BufferCount,
; 1598 :         _In_                                              size_t      const _MaxCount,
; 1599 :         _In_z_ _Printf_format_string_                     char const* const _Format,
; 1600 :                                                           va_list           _ArgList
; 1601 :         )
; 1602 :     #if defined _NO_CRT_STDIO_INLINE
; 1603 :     ;
; 1604 :     #else
; 1605 :     {
; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1607 :     }
; 1608 :     #endif
; 1609 : 
; 1610 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1611 :         _Success_(return >= 0)
; 1612 :         int, _vsnprintf_s,
; 1613 :         _Always_(_Post_z_)            char,        _Buffer,
; 1614 :         _In_                          size_t,      _BufferCount,
; 1615 :         _In_z_ _Printf_format_string_ char const*, _Format,
; 1616 :                                       va_list,     _ArgList
; 1617 :         )
; 1618 : 
; 1619 :     #if __STDC_WANT_SECURE_LIB__
; 1620 : 
; 1621 :         _Success_(return >= 0)
; 1622 :         _Check_return_opt_
; 1623 :         _CRT_STDIO_INLINE int __CRTDECL vsnprintf_s(
; 1624 :             _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1625 :             _In_                                              size_t      const _BufferCount,
; 1626 :             _In_                                              size_t      const _MaxCount,
; 1627 :             _In_z_ _Printf_format_string_                     char const* const _Format,
; 1628 :                                                               va_list           _ArgList
; 1629 :             )
; 1630 :     #if defined _NO_CRT_STDIO_INLINE
; 1631 :     ;
; 1632 :     #else
; 1633 :         {
; 1634 :             return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1635 :         }
; 1636 :     #endif
; 1637 : 
; 1638 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1639 :             _Success_(return >= 0)
; 1640 :             int, vsnprintf_s,
; 1641 :             _Always_(_Post_z_)            char,        _Buffer,
; 1642 :             _In_                          size_t,      _BufferCount,
; 1643 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1644 :                                           va_list,     _ArgList
; 1645 :             )
; 1646 : 
; 1647 :     #endif
; 1648 : 
; 1649 :     _Check_return_opt_
; 1650 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_l(
; 1651 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1652 :         _In_opt_                                _locale_t   const _Locale,
; 1653 :                                                 va_list           _ArgList
; 1654 :         )
; 1655 :     #if defined _NO_CRT_STDIO_INLINE
; 1656 :     ;
; 1657 :     #else
; 1658 :     {
; 1659 :         int const _Result = __stdio_common_vsprintf(
; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;
; 1664 :     }
; 1665 :     #endif
; 1666 : 
; 1667 :     _Check_return_
; 1668 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf(
; 1669 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1670 :                                       va_list           _ArgList
; 1671 :         )
; 1672 :     #if defined _NO_CRT_STDIO_INLINE
; 1673 :     ;
; 1674 :     #else
; 1675 :     {
; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);
; 1677 :     }
; 1678 :     #endif
; 1679 : 
; 1680 :     _Check_return_opt_
; 1681 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p_l(
; 1682 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1683 :         _In_opt_                                _locale_t   const _Locale,
; 1684 :                                                 va_list           _ArgList
; 1685 :         )
; 1686 :     #if defined _NO_CRT_STDIO_INLINE
; 1687 :     ;
; 1688 :     #else
; 1689 :     {
; 1690 :         int const _Result = __stdio_common_vsprintf_p(
; 1691 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1692 :             NULL, 0, _Format, _Locale, _ArgList);
; 1693 : 
; 1694 :         return _Result < 0 ? -1 : _Result;
; 1695 :     }
; 1696 :     #endif
; 1697 : 
; 1698 :     _Check_return_
; 1699 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p(
; 1700 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1701 :                                       va_list           _ArgList
; 1702 :         )
; 1703 :     #if defined _NO_CRT_STDIO_INLINE
; 1704 :     ;
; 1705 :     #else
; 1706 :     {
; 1707 :         return _vscprintf_p_l(_Format, NULL, _ArgList);
; 1708 :     }
; 1709 :     #endif
; 1710 : 
; 1711 :     _Check_return_opt_
; 1712 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c_l(
; 1713 :         _Out_writes_opt_(_BufferCount)          char*       const _Buffer,
; 1714 :         _In_                                    size_t      const _BufferCount,
; 1715 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1716 :         _In_opt_                                _locale_t   const _Locale,
; 1717 :                                                 va_list           _ArgList
; 1718 :         )
; 1719 :     #if defined _NO_CRT_STDIO_INLINE
; 1720 :     ;
; 1721 :     #else
; 1722 :     {
; 1723 :         int const _Result = __stdio_common_vsprintf(
; 1724 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1725 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1726 : 
; 1727 :         return _Result < 0 ? -1 : _Result;
; 1728 :     }
; 1729 :     #endif
; 1730 : 
; 1731 :     _Success_(return >= 0)
; 1732 :     _Check_return_opt_
; 1733 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c(
; 1734 :         _Out_writes_opt_(_BufferCount) char*       const _Buffer,
; 1735 :         _In_                           size_t      const _BufferCount,
; 1736 :         _In_z_ _Printf_format_string_  char const* const _Format,
; 1737 :                                        va_list           _ArgList
; 1738 :         )
; 1739 :     #if defined _NO_CRT_STDIO_INLINE
; 1740 :     ;
; 1741 :     #else
; 1742 :     {
; 1743 :         return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1744 :     }
; 1745 :     #endif
; 1746 : 
; 1747 :     _Success_(return >= 0)
; 1748 :     _Check_return_opt_ _CRT_INSECURE_DEPRECATE(_sprintf_s_l)
; 1749 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_l(
; 1750 :         _Pre_notnull_ _Always_(_Post_z_)        char*       const _Buffer,
; 1751 :         _In_z_ _Printf_format_string_params_(0) char const* const _Format,
; 1752 :         _In_opt_                                _locale_t   const _Locale,
; 1753 :         ...)
; 1754 :     #if defined _NO_CRT_STDIO_INLINE
; 1755 :     ;
; 1756 :     #else
; 1757 :     {
; 1758 :         int _Result;
; 1759 :         va_list _ArgList;
; 1760 :         __crt_va_start(_ArgList, _Locale);
; 1761 : 
; 1762 :         #pragma warning(push)
; 1763 :         #pragma warning(disable: 4996) // Deprecation
; 1764 :         _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
; 1765 :         #pragma warning(pop)
; 1766 : 
; 1767 :         __crt_va_end(_ArgList);
; 1768 :         return _Result;
; 1769 :     }
; 1770 :     #endif
; 1771 : 
; 1772 :     _Success_(return >= 0)
; 1773 :     _Check_return_opt_
; 1774 :     _CRT_STDIO_INLINE int __CRTDECL sprintf(
; 1775 :         _Pre_notnull_ _Always_(_Post_z_) char*       const _Buffer,
; 1776 :         _In_z_ _Printf_format_string_    char const* const _Format,
; 1777 :         ...)
; 1778 :     #if defined _NO_CRT_STDIO_INLINE
; 1779 :     ;
; 1780 :     #else
; 1781 :     {
; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }
; 1794 :     #endif
; 1795 : 
; 1796 :     #pragma warning(push)
; 1797 :     #pragma warning(disable: 4996)
; 1798 :     #pragma warning(disable: 28719) // __WARNING_BANNED_API_USAGE
; 1799 :     #pragma warning(disable: 28726) // __WARNING_BANNED_API_USAGEL2
; 1800 :     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(
; 1801 :         _Success_(return >= 0)
; 1802 :         int, __RETURN_POLICY_SAME, __EMPTY_DECLSPEC, __CRTDECL, sprintf, vsprintf,
; 1803 :         _Pre_notnull_ _Always_(_Post_z_), char,        _Buffer,
; 1804 :         _In_z_ _Printf_format_string_     char const*, _Format
; 1805 :         )
; 1806 :     #pragma warning(pop)
; 1807 : 
; 1808 :     _Success_(return >= 0)
; 1809 :     _Check_return_opt_
; 1810 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_s_l(
; 1811 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1812 :         _In_                                          size_t      const _BufferCount,
; 1813 :         _In_z_ _Printf_format_string_params_(0)       char const* const _Format,
; 1814 :         _In_opt_                                      _locale_t   const _Locale,
; 1815 :         ...)
; 1816 :     #if defined _NO_CRT_STDIO_INLINE
; 1817 :     ;
; 1818 :     #else
; 1819 :     {
; 1820 :         int _Result;
; 1821 :         va_list _ArgList;
; 1822 :         __crt_va_start(_ArgList, _Locale);
; 1823 :         _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1824 :         __crt_va_end(_ArgList);
; 1825 :         return _Result;
; 1826 :     }
; 1827 :     #endif
; 1828 : 
; 1829 :     #if __STDC_WANT_SECURE_LIB__
; 1830 : 
; 1831 :         _Success_(return >= 0)
; 1832 :         _Check_return_opt_
; 1833 :         _CRT_STDIO_INLINE int __CRTDECL sprintf_s(
; 1834 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1835 :             _In_                                          size_t      const _BufferCount,
; 1836 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1837 :             ...)
; 1838 :     #if defined _NO_CRT_STDIO_INLINE
; 1839 :     ;
; 1840 :     #else
; 1841 :         {
; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);
; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1846 :             __crt_va_end(_ArgList);
; 1847 :             return _Result;
; 1848 :         }
; 1849 :     #endif
; 1850 : 
; 1851 :     #endif
; 1852 : 
; 1853 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ENDP		; sprintf_s<256>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?damage_num@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d0$1$ = -1068						; size = 4
_d1_color$ = -1068					; size = 4
_tempstr$1 = -1064					; size = 36
_szMojHp$ = -1028					; size = 256
_szMojMp$ = -772					; size = 256
_szMojiP$ = -516					; size = 256
_szMoji$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_a0$ = 8						; size = 4
?damage_num@@YAXPAUaction@@@Z PROC			; damage_num, COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 04 00
	00		 sub	 esp, 1068		; 0000042cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx

; 356  : 	int d0, d1_color, dx, d2 = 0;

  00014	33 db		 xor	 ebx, ebx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _a0$[ebp]

; 357  : 	char szMoji[256];
; 358  : 	char szMojiP[256];
; 359  : 	//andy_mp
; 360  : 	char szMojMp[256];
; 361  : 	char szMojHp[256];
; 362  : 
; 363  : 	d0 = 0; dx = 0;

  0001a	89 9d d4 fb ff
	ff		 mov	 DWORD PTR _d0$1$[ebp], ebx

; 364  : 	if (slow_flg)		//ÂÅáÂ¶ÇÂú®slowÁä∂ÊÄÅ

  00020	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?slow_flg@@3HA, ebx ; slow_flg
  00026	74 18		 je	 SHORT $LN106@damage_num

; 365  : 	{
; 366  : 		if (s_timer & 3)		//‰∏çÁßªÂä®

  00028	f6 05 00 00 00
	00 03		 test	 BYTE PTR ?s_timer@@3GA, 3
  0002f	74 0f		 je	 SHORT $LN106@damage_num

; 367  : 			d0 = 1;

  00031	c7 85 d4 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _d0$1$[ebp], 1

; 368  : 	}
; 369  : 	if (d0 == 0)		//ÁßªÂä®ÊÉÖÂÜµ‰∏ã

  0003b	e9 91 00 00 00	 jmp	 $LN4@damage_num
$LN106@damage_num:

; 370  : 	{
; 371  : 		switch (ATR_INT_WORK1(a0))

  00040	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00043	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  00049	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  0004c	77 1a		 ja	 SHORT $LN2@damage_num
  0004e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN107@damage_num[eax]
  00055	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN108@damage_num[eax*4]
$LN13@damage_num:

; 372  : 		{
; 373  : 		case 0:
; 374  : 		case 36:
; 375  : 		case 37:
; 376  : 		case 38:
; 377  : 		case 39:
; 378  : 		case 40:
; 379  : #ifdef _SKILL_ADDBARRIER
; 380  : 		case 43:
; 381  : #endif 
; 382  : #ifdef _PETSKILL_PEEL
; 383  : 		case 44:
; 384  : #endif
; 385  : #ifdef _PETSKILL_JUSTICE
; 386  : 		case 45:
; 387  : #endif
; 388  : #ifdef _PETSKILL_ADDATTCRAZED
; 389  : 		case 46:
; 390  : 		case 47:
; 391  : #endif
; 392  : #ifdef _PETSKILL_PROVOKEFIGHT
; 393  : 		case 48:
; 394  : #endif
; 395  : #ifdef _PRO3_ADDSKILL
; 396  : 		case 49:
; 397  : 		case 50:
; 398  : 		case 51:
; 399  : #endif
; 400  : 		case 6:
; 401  : 		case 14:
; 402  : 		case 15:
; 403  : 		case 16:
; 404  : 			gemini(a0);

  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  00062	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00065	83 c4 04	 add	 esp, 4
$LN2@damage_num:

; 405  : 		}
; 406  : 		switch (ATR_VCT_NO(a0))

  00068	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0006b	83 e8 00	 sub	 eax, 0
  0006e	74 4b		 je	 SHORT $LN14@damage_num
  00070	83 e8 01	 sub	 eax, 1
  00073	74 2a		 je	 SHORT $LN16@damage_num
  00075	83 e8 01	 sub	 eax, 1
  00078	75 57		 jne	 SHORT $LN4@damage_num

; 424  : 
; 425  : 		case 2:
; 426  : 			ATR_SPD(a0) = 0;		//?ÓôÆÓòÖÓçè

  0007a	89 9e 34 01 00
	00		 mov	 DWORD PTR [esi+308], ebx

; 427  : 			if (--ATR_STIMER(a0))		//Óé∑???

  00080	80 41 01 ff	 add	 BYTE PTR [ecx+1], 255	; 000000ffH
  00084	75 4b		 jne	 SHORT $LN4@damage_num

; 428  : 				break;
; 429  : 			DeathAction(a0);		//Óé∑?

  00086	56		 push	 esi
  00087	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0008c	83 c4 04	 add	 esp, 4
  0008f	5e		 pop	 esi

; 970  : 	}
; 971  : }

  00090	5b		 pop	 ebx
  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN16@damage_num:

; 414  : 			break;
; 415  : 
; 416  : 		case 1:
; 417  : 			ATR_SPD(a0) += 2;

  0009f	83 86 34 01 00
	00 02		 add	 DWORD PTR [esi+308], 2

; 418  : 			if (ATR_SPD(a0) >= DAMAGE_SPD)		//Óé∑???

  000a6	83 be 34 01 00
	00 18		 cmp	 DWORD PTR [esi+308], 24	; 00000018H
  000ad	7c 22		 jl	 SHORT $LN4@damage_num

; 419  : 			{
; 420  : 				ATR_STIMER(a0) = 60;

  000af	c6 41 01 3c	 mov	 BYTE PTR [ecx+1], 60	; 0000003cH

; 421  : 				ATR_VCT_NO(a0) = 2;

  000b3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000b6	c6 00 02	 mov	 BYTE PTR [eax], 2

; 422  : 			}
; 423  : 			break;

  000b9	eb 16		 jmp	 SHORT $LN4@damage_num
$LN14@damage_num:

; 407  : 		{
; 408  : 		case 0:
; 409  : 			ATR_SPD(a0) -= 2;		//Óüµ?Óòø??????

  000bb	83 86 34 01 00
	00 fe		 add	 DWORD PTR [esi+308], -2	; fffffffeH

; 410  : 			if (ATR_SPD(a0))		//Óüµ?Óòø??????

  000c2	75 0d		 jne	 SHORT $LN4@damage_num

; 411  : 				break;
; 412  : 			ATR_CRS(a0) = 16;

  000c4	c7 86 38 01 00
	00 10 00 00 00	 mov	 DWORD PTR [esi+312], 16	; 00000010H

; 413  : 			ATR_VCT_NO(a0) = 1;

  000ce	c6 01 01	 mov	 BYTE PTR [ecx], 1
$LN4@damage_num:

; 430  : 			return;
; 431  : 		}
; 432  : 	}
; 433  : 
; 434  : 	switch (ATR_INT_WORK1(a0))

  000d1	57		 push	 edi
  000d2	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  000d5	8b 87 28 01 00
	00		 mov	 eax, DWORD PTR [edi+296]
  000db	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  000de	0f 87 39 0a 00
	00		 ja	 $LN112@damage_num
  000e4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN109@damage_num[eax*4]
$LN20@damage_num:

; 435  : 	{
; 436  : 	case 0:		//MissÂ§ÑÁêÜ
; 437  : 		sprintf_s(szMoji, "Miss");

  000eb	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_04INDFNAKP@Miss@
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  000fc	83 c4 08	 add	 esp, 8

; 438  : 		d1_color = 0;		//ÁôΩËâ≤Set
; 439  : 		ATR_ATTRIB(a0) = 0;

  000ff	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00105	33 ff		 xor	 edi, edi

; 440  : 		ATR_CHR_NO(a0) = CG_ICON_MISS;

  00107	c7 86 44 01 00
	00 88 67 00 00	 mov	 DWORD PTR [esi+324], 26504 ; 00006788H

; 441  : 		break;

  00111	e9 0d 0a 00 00	 jmp	 $LN6@damage_num
$LN21@damage_num:

; 442  : 	case 1:		//ÂèçÂáªÂ§ÑÁêÜ
; 443  : 		sprintf_s(szMoji, "Counter");

  00116	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_07IKJEKJLO@Counter@
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00127	83 c4 08	 add	 esp, 8

; 444  : 		d1_color = 1;		//Ê∞¥Ëâ≤Set
; 445  : 		ATR_ATTRIB(a0) = 0;

  0012a	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00130	bf 01 00 00 00	 mov	 edi, 1

; 446  : 		ATR_CHR_NO(a0) = CG_ICON_COUNTER;

  00135	c7 86 44 01 00
	00 8b 67 00 00	 mov	 DWORD PTR [esi+324], 26507 ; 0000678bH

; 447  : 		break;

  0013f	e9 df 09 00 00	 jmp	 $LN6@damage_num
$LN22@damage_num:

; 781  : 			   d1_color = FONT_PAL_GREEN;
; 782  : 	}
; 783  : 		break;
; 784  : #endif
; 785  : #ifdef _PETSKILL_JUSTICE
; 786  : 	case 45:
; 787  : 	{
; 788  : 			   sprintf_s(szMoji, "ÂÆ°Âà§ %d ÂõûÂêà", ATR_INT_WORK0(a0));
; 789  : 			   d1 = FONT_PAL_GREEN;
; 790  : 	}
; 791  : 		break;
; 792  : #endif
; 793  : #ifdef _PETSKILL_ADDATTCRAZED
; 794  : 	case 46:
; 795  : 	{
; 796  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅø‰∏ãÈôç", ATR_INT_WORK0(a0));
; 797  : 			   d1 = FONT_PAL_GREEN;
; 798  : 	}
; 799  : 		break;
; 800  : 	case 47:
; 801  : 	{
; 802  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅøÂõûÂ§ç", ATR_INT_WORK0(a0));
; 803  : 			   d1 = FONT_PAL_GREEN;
; 804  : 	}
; 805  : 		break;
; 806  : #endif
; 807  : #ifdef _PETSKILL_PROVOKEFIGHT
; 808  : 	case 48:
; 809  : 	{
; 810  : 			   d1 = FONT_PAL_GREEN;
; 811  : 			   switch(ATR_INT_WORK0(a0)){
; 812  : 			   case 0:
; 813  : 				   sprintf_s(szMoji, "Âêº!", ATR_INT_WORK0(a0));
; 814  : 				   break;
; 815  : 			   case 1:
; 816  : 				   sprintf_s(szMoji, "ÂèóÂà∞ÊåëË°Ö!", ATR_INT_WORK0(a0));
; 817  : 				   break;
; 818  : 			   case 2:
; 819  : 				   sprintf_s(szMoji, "Ë¢´ÈªèÊ∂≤Èªè‰Ωè!", ATR_INT_WORK0(a0));
; 820  : 				   break;
; 821  : 			   case 3:
; 822  : 				   sprintf_s(szMoji, "ÊîªÂáªÊ¨°Êï∞ÂáèÂ∞ë!", ATR_INT_WORK0(a0));
; 823  : 				   break;
; 824  : 			   case 4:
; 825  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÖâ‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 826  : 				   break;
; 827  : 			   case 5:
; 828  : 				   sprintf_s(szMoji, "Âê∏Êî∂Èïú‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 829  : 				   break;
; 830  : 			   case 6:
; 831  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÆà‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 832  : 				   break;
; 833  : 			   case 7:
; 834  : 				   sprintf_s(szMoji, "ÂÖâ‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 835  : 				   break;
; 836  : 			   case 8:
; 837  : 				   sprintf_s(szMoji, "Èïú‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 838  : 				   break;
; 839  : 			   case 9:
; 840  : 				   sprintf_s(szMoji, "ÂÆà‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 841  : 				   break;
; 842  : 			   case 10:
; 843  : 				   sprintf_s(szMoji, "Ëß£Èô§ÈªèÊ∂≤ÊïàÊûú!", ATR_INT_WORK0(a0));
; 844  : 				   break;
; 845  : #ifdef _PRO3_ADDSKILL
; 846  : 			   case 11:
; 847  : 				   sprintf_s(szMoji, "Ëß£Èô§Ë£ÇÈ™®Êñ≠Á≠ã!");
; 848  : 				   break;
; 849  : 			   case 12:
; 850  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊØíÁ¥†‰πãÁΩë!");
; 851  : 				   break;
; 852  : 			   case 13:
; 853  : 				   sprintf_s(szMoji, "ÊØíÁ¥†‰πãÁΩëËß£Èô§!");
; 854  : 				   break;
; 855  : 			   case 14:
; 856  : 				   sprintf_s(szMoji, "ÊäöÊÖ∞ÂøÉÁÅµËß£Èô§!");
; 857  : 				   break;
; 858  : 			   case 15:
; 859  : 				   sprintf_s(szMoji, "Â∞ÅÂç∞ÈóáÁÅµÊ≥ïÊúØ!");
; 860  : 				   break;
; 861  : 			   case 16:
; 862  : 				   sprintf_s(szMoji, "ÂõûÂ§çÈóáÁÅµÊ≥ïÊúØ!");
; 863  : 				   break;
; 864  : 			   case 17:
; 865  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊÅ∂È≠îËØÖÂíí!");
; 866  : 				   break;
; 867  : 			   case 18:
; 868  : 				   sprintf_s(szMoji, "Ëß£Èô§ÊÅ∂È≠îËØÖÂíí!");
; 869  : 				   break;
; 870  : 			   case 19:
; 871  : 				   sprintf_s(szMoji, "ÂèóÂà∞‰∫ÜÊÉäÂêì!");
; 872  : 				   break;
; 873  : #endif
; 874  : 			   }
; 875  : 			   break;
; 876  : 	}
; 877  : #endif
; 878  : #ifdef _PRO3_ADDSKILL
; 879  : 	case 49: //ÊäöÊÖ∞ÂøÉÁÅµ
; 880  : 	{
; 881  : 				 sprintf_s(szMoji, "Âø†ËØöÂ∫¶ %d ", ATR_INT_WORK0(a0));
; 882  : 				 d1 = FONT_PAL_GREEN;
; 883  : 	}
; 884  : 		break;
; 885  : 	case 50: //ÈóáÁÅµÂ∞ÅÂç∞
; 886  : 	{
; 887  : 				 char *tempstr[] = { "", "ÁÅ´Â±±Ê≥â", "ÈíàÈíàÁõ∏ÂØπ", "‰∏ñÁïåÊú´Êó•", "ÂÜ∞ÁàÜÊúØ", "ÈôÑË∫´ÊúØ", "Âè¨Èõ∑ÊúØ", "Êö¥È£éÈõ®", "ÁîµÊµÅÊúØ", "ÁÅ´ÊòüÁêÉ",
; 888  : 					 "ÂóúË°ÄËõä", "ÂóúË°ÄÊàêÊÄß", "ÂÜ∞ÁÆ≠ÊúØ", "ÁÅ´ÈæôÊû™", "ÂÜ∞ÈïúÊúØ", "ÁÅ´ÈôÑ‰Ωì", "Èõ∑ÈôÑ‰Ωì", "ÂÜ∞ÈôÑ‰Ωì", "ÁÅ´ÁÜüÁªÉÂ∫¶", "Èõ∑ÁÜüÁªÉÂ∫¶", "ÂÜ∞ÁÜüÁªÉÂ∫¶", 
; 889  : 					 "ÁßªÂΩ¢Êç¢‰Ωç", "Êö¥Âáª", "ËøûÁéØÊîªÂáª", "ÂèåÈáçÊîªÂáª", "ÂõûÈÅø", "Êû™ÁÜüÁªÉÂ∫¶", "ÊñßÁÜüÁªÉÂ∫¶", "Ê£çÁÜüÁªÉÂ∫¶", "ÂºìÁÜüÁªÉÂ∫¶",
; 890  : 					 "Á≤æÈÄöÂõûÂäõÈïñ", "Á≤æÈÄöÊäïÊé∑Áü≥", "Á≤æÈÄöÊäïÊé∑Êñß", "Áä∂ÊÄÅÂõûÂ§ç", "ËàçÂ∑≤‰∏∫Âèã", "ÊøÄÂåñÊîªÂáª", "ËÉΩÈáèËÅöÈõÜ", "‰∏ìÊ≥®ÊàòÊñó", 
; 891  : 					 "ÁõæÂáª", "Ë¥ØÁ©øÊîªÂáª", "ÊøíÊ≠ªÊîªÂáª", "ÂõûÊóãÊîªÂáª", "Ê∑∑‰π±ÊîªÂáª", "‰∫åÂàÄÊµÅ", "ËøΩÂØªÊïåË∏™", "ÂõûÈÅøÊàòÊñó", "Ê†ëÊ†πÁº†Áªï", 
; 892  : 					 "Èô∑Èò±", "Â§©ÁΩóÂú∞ÁΩë", "Â∞∏‰ΩìÊé†Â§∫", "ÊØíÁ¥†Ê≠¶Âô®", "Âº±ÁÇπÊîªÂáª", "ÊåëÊã®", "Ê†ºÊ°£", "Â∫ßÈ™ëÊîªÂáª", "Âä†Â∑•", "È©ØÊúçÂÆ†Áâ©", "ÊøÄÊÄíÂÆ†Áâ©", 
; 893  : 					 "Ëá™ÁªôËá™Ë∂≥", "Èõ∑ÊäóÊÄß", "ÁÅ´ÊäóÊÄß", "ÂÜ∞ÊäóÊÄß", "ÈÅóÂøò", "Ëá™ÊàëÂº∫Âåñ", "Ê∞îÂäõÂÖÖÊ≤õ", "Ë¥üÈáçÂ¢ûÂä†", "Ëá™ÁÑ∂Â®ÅËÉΩ", "Âè∑Âè¨Ëá™ÁÑ∂", 
; 894  : 					 "Âú∞ÁªìÁïå", "Ê∞¥ÁªìÁïå", "ÁÅ´ÁªìÁïå", "È£éÁªìÁïå", "Á†¥Èô§ÁªìÁïå", "ËØ±Êïå", "ÈáéÊÄßÂæÅÊúç", 
; 895  : 					 "ÂõõÊñπÈò≤Âæ°", "Ë£ÇÈ™®Êñ≠Á≠ã", "ÊàòÁãºÊÄíÂêº", "ÊñóÊ∞îÂØºÂºï", 
; 896  : 					 "È≠îÂäõÂííÂç∞", "ÊÅ∂È≠îËØÖÂíí", "Á•ûÁÅµ‰πãËµê", "Â§öÈáçÂÜ∞ÁÆ≠", 
; 897  : 					 "Â§öÈáçÂÜ∞ÁÆ≠", "ÊØíÁ¥†‰πãÁΩë", "ÊäöÊÖ∞ÂøÉÁÅµ", 
; 898  : 					 "ÊàòÂú∫ÊÄ•Êïë", "Âà∂ËçØÂ≠¶" };
; 899  : 				 memset(szMoji, 0, sizeof(szMoji));
; 900  : 				 sprintf_s(szMoji, "%s Ë¢´Â∞ÅÂç∞", tempstr[ATR_INT_WORK0(a0)]);
; 901  : 				 d1 = FONT_PAL_GREEN;
; 902  : 	}
; 903  : 		break;
; 904  : 	case 51:
; 905  : 	{
; 906  : 			   sprintf_s(szMoji, "Êîª‰∏ãÈôç%d", ATR_INT_WORK0(a0) );
; 907  : 			   d1 = FONT_PAL_GREEN;
; 908  : 	}
; 909  : 		break;
; 910  : #endif
; 911  : 	}
; 912  : 
; 913  : 	switch (ATR_INT_WORK1(a0))

  00144	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_05LICMIJMM@Guard@
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00155	83 c4 08	 add	 esp, 8
  00158	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  0015e	bf 03 00 00 00	 mov	 edi, 3
  00163	c7 86 44 01 00
	00 8e 67 00 00	 mov	 DWORD PTR [esi+324], 26510 ; 0000678eH
  0016d	e9 b1 09 00 00	 jmp	 $LN6@damage_num
$LN23@damage_num:

; 448  : 	case 3:		//Èò≤Âæ°Â§ÑÁêÜ
; 449  : 		sprintf_s(szMoji, "Guard");
; 450  : 		d1_color = 3;		//ÈùíËâ≤Set
; 451  : 		ATR_ATTRIB(a0) = 0;
; 452  : 		ATR_CHR_NO(a0) = CG_ICON_GUARD;
; 453  : 		break;
; 454  : 	case 5:		//ÊçïÊçâÂ§ÑÁêÜ
; 455  : 		sprintf_s(szMoji, "Capture");

  00172	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_07EGAJKHF@Capture@
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00183	83 c4 08	 add	 esp, 8

; 456  : 		d1_color = 5;		//ÁªøËâ≤Set
; 457  : 		ATR_ATTRIB(a0) = 0;

  00186	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  0018c	bf 05 00 00 00	 mov	 edi, 5

; 458  : 		ATR_CHR_NO(a0) = CG_ICON_CAPTURE;

  00191	c7 86 44 01 00
	00 90 67 00 00	 mov	 DWORD PTR [esi+324], 26512 ; 00006790H

; 459  : 		break;

  0019b	e9 83 09 00 00	 jmp	 $LN6@damage_num
$LN24@damage_num:

; 460  : 
; 461  : 	case 6:		//Âèó‰º§Â§ÑÁêÜ
; 462  : 		sprintf_s(szMoji, "%d", ATR_INT_WORK0(a0));

  001a0	ff b7 24 01 00
	00		 push	 DWORD PTR [edi+292]
  001a6	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 463  : 		sprintf_s(szMojiP, "%d", ATR_INT_WORKp(a0));

  001b7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ba	ff b0 28 02 00
	00		 push	 DWORD PTR [eax+552]
  001c0	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 464  : 		//andy_mp
; 465  : 		if (ATR_MPDFLG(a0) == 1)

  001d1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001d4	83 c4 18	 add	 esp, 24			; 00000018H
  001d7	83 b8 38 02 00
	00 01		 cmp	 DWORD PTR [eax+568], 1
  001de	75 1d		 jne	 SHORT $LN25@damage_num

; 466  : 			sprintf_s(szMojMp, "%d", ATR_MPDAMAGE(a0));

  001e0	ff b0 30 02 00
	00		 push	 DWORD PTR [eax+560]
  001e6	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _szMojMp$[ebp]
  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  001f7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@damage_num:

; 467  : 		if (ATR_ADDHPFLG(a0) == 1)

  001fd	83 b8 3c 02 00
	00 01		 cmp	 DWORD PTR [eax+572], 1
  00204	75 1a		 jne	 SHORT $LN26@damage_num

; 468  : 			sprintf_s(szMojHp, "%d", ATR_ADDHP(a0));

  00206	ff b0 34 02 00
	00		 push	 DWORD PTR [eax+564]
  0020c	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szMojHp$[ebp]
  00212	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0021d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@damage_num:

; 469  : 		d1_color = 6;		//Á∫¢Ëâ≤Set

  00220	bf 06 00 00 00	 mov	 edi, 6

; 470  : 		break;

  00225	e9 f9 08 00 00	 jmp	 $LN6@damage_num
$LN27@damage_num:

; 471  : 	case 7:		//ÊçïÊçâÊàêÂäüÂ§ÑÁêÜ
; 472  : 		sprintf_s(szMoji, "Success");

  0022a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00230	68 00 00 00 00	 push	 OFFSET ??_C@_07PBILKAFL@Success@
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0023b	83 c4 08	 add	 esp, 8

; 473  : 		d1_color = 5;		//ÁªøËâ≤Set
; 474  : 		ATR_ATTRIB(a0) = 0;

  0023e	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00244	bf 05 00 00 00	 mov	 edi, 5

; 475  : 		ATR_CHR_NO(a0) = CG_ICON_GET;

  00249	c7 86 44 01 00
	00 8a 67 00 00	 mov	 DWORD PTR [esi+324], 26506 ; 0000678aH

; 476  : 		break;

  00253	e9 cb 08 00 00	 jmp	 $LN6@damage_num
$LN28@damage_num:

; 477  : 	case 8:		//ÊçïÊçâÂ§±Ë¥•Â§ÑÁêÜ
; 478  : 		sprintf_s(szMoji, "Fail");

  00258	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_04ODLKOBGJ@Fail@
  00263	50		 push	 eax
  00264	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00269	83 c4 08	 add	 esp, 8

; 479  : 		d1_color = 6;		//Á∫¢Ëâ≤Set
; 480  : 		ATR_ATTRIB(a0) = 0;

  0026c	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00272	bf 06 00 00 00	 mov	 edi, 6

; 481  : 		ATR_CHR_NO(a0) = CG_ICON_FAIL;

  00277	c7 86 44 01 00
	00 89 67 00 00	 mov	 DWORD PTR [esi+324], 26505 ; 00006789H

; 482  : 		break;

  00281	e9 9d 08 00 00	 jmp	 $LN6@damage_num
$LN29@damage_num:

; 483  : 	case 9:		//ÈÄÉË∑ëÂ§ÑÁêÜ
; 484  : 		sprintf_s(szMoji, "Escape");

  00286	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_06OIGFGPHJ@Escape@
  00291	50		 push	 eax
  00292	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00297	83 c4 08	 add	 esp, 8

; 485  : 		d1_color = 5;		//ÁªøËâ≤Set
; 486  : 		ATR_ATTRIB(a0) = 0;

  0029a	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  002a0	bf 05 00 00 00	 mov	 edi, 5

; 487  : 		ATR_CHR_NO(a0) = CG_ICON_ESCAPE;

  002a5	c7 86 44 01 00
	00 8f 67 00 00	 mov	 DWORD PTR [esi+324], 26511 ; 0000678fH

; 488  : 		break;

  002af	e9 6f 08 00 00	 jmp	 $LN6@damage_num
$LN30@damage_num:

; 489  : 	case 10:		//Êî∂ÂõûÂÆ†Áâ©Â§ÑÁêÜ
; 490  : 		sprintf_s(szMoji, "Come!");

  002b4	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  002ba	68 00 00 00 00	 push	 OFFSET ??_C@_05NHFMPFPE@Come?$CB@
  002bf	50		 push	 eax
  002c0	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  002c5	83 c4 08	 add	 esp, 8

; 491  : 		d1_color = 5;		//ÁªøËâ≤Set
; 492  : 		ATR_ATTRIB(a0) = 0;

  002c8	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  002ce	bf 05 00 00 00	 mov	 edi, 5

; 493  : 		ATR_CHR_NO(a0) = CG_ICON_COME_ON;

  002d3	c7 86 44 01 00
	00 85 67 00 00	 mov	 DWORD PTR [esi+324], 26501 ; 00006785H

; 494  : 		break;

  002dd	e9 41 08 00 00	 jmp	 $LN6@damage_num
$LN31@damage_num:

; 495  : 	case 11:		//ÊîæÂá∫ÂÆ†Áâ©Â§ÑÁêÜ
; 496  : 		sprintf_s(szMoji, "Go!");

  002e2	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  002e8	68 00 00 00 00	 push	 OFFSET ??_C@_03BHGMNJJJ@Go?$CB@
  002ed	50		 push	 eax
  002ee	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  002f3	83 c4 08	 add	 esp, 8

; 497  : 		d1_color = 5;		//ÁªøËâ≤Set
; 498  : 		ATR_ATTRIB(a0) = 0;

  002f6	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  002fc	bf 05 00 00 00	 mov	 edi, 5

; 499  : 		ATR_CHR_NO(a0) = CG_ICON_GO;

  00301	c7 86 44 01 00
	00 86 67 00 00	 mov	 DWORD PTR [esi+324], 26502 ; 00006786H

; 500  : 		break;

  0030b	e9 13 08 00 00	 jmp	 $LN6@damage_num
$LN32@damage_num:

; 501  : 	case 12:		//Á†¥Èô§Èò≤Âæ°Â§ÑÁêÜ
; 502  : 		sprintf_s(szMoji, "Guard break");

  00310	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00316	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DBACIDCK@Guard?5break@
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00321	83 c4 08	 add	 esp, 8

; 503  : 		d1_color = 5;		//ÁªøËâ≤Set
; 504  : 		ATR_ATTRIB(a0) = 0;

  00324	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  0032a	bf 05 00 00 00	 mov	 edi, 5

; 505  : 		ATR_CHR_NO(a0) = CG_ICON_GUARD_BREAK;

  0032f	c7 86 44 01 00
	00 92 67 00 00	 mov	 DWORD PTR [esi+324], 26514 ; 00006792H

; 506  : 		break;

  00339	e9 e5 07 00 00	 jmp	 $LN6@damage_num
$LN33@damage_num:

; 507  : 	case 13:		//Óë≤Óï©???
; 508  : 		sprintf_s(szMoji, "Danger");

  0033e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00344	68 00 00 00 00	 push	 OFFSET ??_C@_06MCJJLJDN@Danger@
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0034f	83 c4 08	 add	 esp, 8

; 509  : 		d1_color = 6;		//ÓíΩÓëë???
; 510  : 		ATR_ATTRIB(a0) = 0;

  00352	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00358	bf 06 00 00 00	 mov	 edi, 6

; 511  : 		ATR_CHR_NO(a0) = CG_ICON_DANGER;

  0035d	c7 86 44 01 00
	00 8c 67 00 00	 mov	 DWORD PTR [esi+324], 26508 ; 0000678cH

; 512  : 		break;

  00367	e9 b7 07 00 00	 jmp	 $LN6@damage_num
$LN34@damage_num:

; 513  : 	case 14:		//ÂõûÂ§ç
; 514  : 		sprintf_s(szMoji, "%d", ATR_INT_WORK0(a0));

  0036c	ff b7 24 01 00
	00		 push	 DWORD PTR [edi+292]
  00372	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00378	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0037d	50		 push	 eax
  0037e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 515  : 		sprintf_s(szMojiP, "%d", ATR_INT_WORKp(a0));

  00383	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00386	ff b0 28 02 00
	00		 push	 DWORD PTR [eax+552]
  0038c	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00397	50		 push	 eax
  00398	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0039d	83 c4 18	 add	 esp, 24			; 00000018H

; 516  : 		d1_color = 5;		//ÁªøËâ≤Set

  003a0	bf 05 00 00 00	 mov	 edi, 5

; 517  : 		break;

  003a5	e9 79 07 00 00	 jmp	 $LN6@damage_num
$LN35@damage_num:

; 518  : 	case 15:		//MPÂõûÂ§ç
; 519  : 		sprintf_s(szMoji, "%d", ATR_INT_WORK0(a0));

  003aa	ff b7 24 01 00
	00		 push	 DWORD PTR [edi+292]
  003b0	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  003b6	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003bb	50		 push	 eax
  003bc	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 520  : 		sprintf_s(szMojiP, "%d", ATR_INT_WORKp(a0));

  003c1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003c4	ff b0 28 02 00
	00		 push	 DWORD PTR [eax+552]
  003ca	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  003d0	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003d5	50		 push	 eax
  003d6	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  003db	83 c4 18	 add	 esp, 24			; 00000018H

; 521  : 		d1_color = 4;		//ÈªÑËâ≤Set

  003de	bf 04 00 00 00	 mov	 edi, 4

; 522  : 		break;

  003e3	e9 3b 07 00 00	 jmp	 $LN6@damage_num
$LN36@damage_num:

; 523  : 	case 16:		//MP‰∏ãÈôç
; 524  : 		sprintf_s(szMoji, "%d", ATR_INT_WORK0(a0));

  003e8	ff b7 24 01 00
	00		 push	 DWORD PTR [edi+292]
  003ee	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  003f4	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003f9	50		 push	 eax
  003fa	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 525  : 		sprintf_s(szMojiP, "%d", ATR_INT_WORKp(a0));

  003ff	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00402	ff b0 28 02 00
	00		 push	 DWORD PTR [eax+552]
  00408	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  0040e	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00413	50		 push	 eax
  00414	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00419	83 c4 18	 add	 esp, 24			; 00000018H

; 526  : 		d1_color = 3;		//ÈùíËâ≤Set

  0041c	bf 03 00 00 00	 mov	 edi, 3

; 527  : 		break;

  00421	e9 fd 06 00 00	 jmp	 $LN6@damage_num
$LN37@damage_num:

; 528  : 	case 17:		//ÂÆ†Áâ©ÈÄÉË∑ë
; 529  : 		sprintf_s(szMoji, "Leave");

  00426	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0042c	68 00 00 00 00	 push	 OFFSET ??_C@_05KMBJHHBA@Leave@
  00431	50		 push	 eax
  00432	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00437	83 c4 08	 add	 esp, 8

; 530  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 531  : 		ATR_ATTRIB(a0) = 0;

  0043a	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00440	bf 02 00 00 00	 mov	 edi, 2

; 532  : 		ATR_CHR_NO(a0) = CG_ICON_LEAVE;

  00445	c7 86 44 01 00
	00 91 67 00 00	 mov	 DWORD PTR [esi+324], 26513 ; 00006791H

; 533  : 		break;

  0044f	e9 cf 06 00 00	 jmp	 $LN6@damage_num
$LN38@damage_num:

; 534  : 	case 18:		//ÂÆ†Áâ©NONO
; 535  : 		sprintf_s(szMoji, "No");

  00454	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0045a	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  0045f	50		 push	 eax
  00460	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00465	83 c4 08	 add	 esp, 8

; 536  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 537  : 		ATR_ATTRIB(a0) = 0;

  00468	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  0046e	bf 02 00 00 00	 mov	 edi, 2

; 538  : 		ATR_CHR_NO(a0) = CG_ICON_NO;

  00473	c7 86 44 01 00
	00 8d 67 00 00	 mov	 DWORD PTR [esi+324], 26509 ; 0000678dH

; 539  : 		break;

  0047d	e9 a1 06 00 00	 jmp	 $LN6@damage_num
$LN39@damage_num:

; 540  : 	case 19:		//CRUSH
; 541  : 		sprintf_s(szMoji, "No");

  00482	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00488	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  0048d	50		 push	 eax
  0048e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00493	83 c4 08	 add	 esp, 8

; 542  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 543  : 		ATR_ATTRIB(a0) = 0;

  00496	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  0049c	bf 02 00 00 00	 mov	 edi, 2

; 544  : 		ATR_CHR_NO(a0) = CG_ICON_CRUSH;

  004a1	c7 86 44 01 00
	00 93 67 00 00	 mov	 DWORD PTR [esi+324], 26515 ; 00006793H

; 545  : 		break;

  004ab	e9 73 06 00 00	 jmp	 $LN6@damage_num
$LN40@damage_num:

; 546  : 	case 20:		//?????????
; 547  : 		sprintf_s(szMoji, "No");

  004b0	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  004b6	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  004bb	50		 push	 eax
  004bc	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  004c1	83 c4 08	 add	 esp, 8

; 548  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 549  : 		ATR_ATTRIB(a0) = 0;

  004c4	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  004ca	bf 02 00 00 00	 mov	 edi, 2

; 550  : 		ATR_CHR_NO(a0) = CG_ICON_CAPTURE_UP;

  004cf	c7 86 44 01 00
	00 94 67 00 00	 mov	 DWORD PTR [esi+324], 26516 ; 00006794H

; 551  : 		break;

  004d9	e9 45 06 00 00	 jmp	 $LN6@damage_num
$LN41@damage_num:

; 552  : 
; 553  : #ifdef _SKILL_ROAR  //ÂÆ†ÊäÄ:Â§ßÂêº(ÂÖãÂπ¥ÂÖΩ)
; 554  : 	case 22:
; 555  : 		sprintf_s(szMoji, "Roar");

  004de	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  004e4	68 00 00 00 00	 push	 OFFSET ??_C@_04EMFHMJHP@Roar@
  004e9	50		 push	 eax
  004ea	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  004ef	83 c4 08	 add	 esp, 8

; 556  : 		d1_color = 5;		//ÁªøËâ≤Set
; 557  : 		ATR_ATTRIB(a0) = 0;

  004f2	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  004f8	bf 05 00 00 00	 mov	 edi, 5

; 558  : 		ATR_CHR_NO(a0) = CG_ICON_ROAR;

  004fd	c7 86 44 01 00
	00 0d 65 00 00	 mov	 DWORD PTR [esi+324], 25869 ; 0000650dH

; 559  : 		break;

  00507	e9 17 06 00 00	 jmp	 $LN6@damage_num
$LN42@damage_num:

; 560  : #endif
; 561  : 
; 562  : #ifdef _SKILL_SELFEXPLODE //Ëá™ÁàÜ
; 563  : 	case 23:
; 564  : 		sprintf_s(szMoji, "SelfExplode");

  0050c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00512	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NHOFEJMF@SelfExplode@
  00517	50		 push	 eax
  00518	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0051d	83 c4 08	 add	 esp, 8

; 565  : 		d1_color = 5;		//ÁªøËâ≤Set
; 566  : 		ATR_ATTRIB(a0) = 0;

  00520	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00526	bf 05 00 00 00	 mov	 edi, 5

; 567  : 		ATR_CHR_NO(a0) = SPR_selfexplod; //Âä®Áîª

  0052b	c7 86 44 01 00
	00 2a 8c 01 00	 mov	 DWORD PTR [esi+324], 101418 ; 00018c2aH

; 568  : 		break;

  00535	e9 e9 05 00 00	 jmp	 $LN6@damage_num
$LN43@damage_num:

; 569  : #endif
; 570  : 
; 571  : #ifdef _ATTDOUBLE_ATTACK	//	andy_add
; 572  : 	case 25:
; 573  : 		sprintf_s(szMoji, "No");

  0053a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00540	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  00545	50		 push	 eax
  00546	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0054b	83 c4 08	 add	 esp, 8

; 574  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 575  : 		ATR_ATTRIB(a0) = 0;

  0054e	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00554	bf 02 00 00 00	 mov	 edi, 2

; 576  : 		ATR_CHR_NO(a0) = SPR_land_att;

  00559	c7 86 44 01 00
	00 1b 8c 01 00	 mov	 DWORD PTR [esi+324], 101403 ; 00018c1bH

; 577  : 		break;

  00563	e9 bb 05 00 00	 jmp	 $LN6@damage_num
$LN44@damage_num:

; 578  : 	case 26:
; 579  : 		sprintf_s(szMoji, "No");

  00568	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0056e	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  00573	50		 push	 eax
  00574	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00579	83 c4 08	 add	 esp, 8

; 580  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 581  : 		ATR_ATTRIB(a0) = 0;

  0057c	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00582	bf 02 00 00 00	 mov	 edi, 2

; 582  : 		ATR_CHR_NO(a0) = SPR_water_att;

  00587	c7 86 44 01 00
	00 1c 8c 01 00	 mov	 DWORD PTR [esi+324], 101404 ; 00018c1cH

; 583  : 		break;

  00591	e9 8d 05 00 00	 jmp	 $LN6@damage_num
$LN45@damage_num:

; 584  : 	case 27:
; 585  : 		sprintf_s(szMoji, "No");

  00596	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0059c	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  005a1	50		 push	 eax
  005a2	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  005a7	83 c4 08	 add	 esp, 8

; 586  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 587  : 		ATR_ATTRIB(a0) = 0;

  005aa	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  005b0	bf 02 00 00 00	 mov	 edi, 2

; 588  : 		ATR_CHR_NO(a0) = SPR_fire_att;

  005b5	c7 86 44 01 00
	00 1a 8c 01 00	 mov	 DWORD PTR [esi+324], 101402 ; 00018c1aH

; 589  : 		break;

  005bf	e9 5f 05 00 00	 jmp	 $LN6@damage_num
$LN46@damage_num:

; 590  : 	case 28:
; 591  : 		sprintf_s(szMoji, "No");

  005c4	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  005ca	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  005cf	50		 push	 eax
  005d0	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  005d5	83 c4 08	 add	 esp, 8

; 592  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 593  : 		ATR_ATTRIB(a0) = 0;

  005d8	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  005de	bf 02 00 00 00	 mov	 edi, 2

; 594  : 		ATR_CHR_NO(a0) = SPR_wind_att;

  005e3	c7 86 44 01 00
	00 1d 8c 01 00	 mov	 DWORD PTR [esi+324], 101405 ; 00018c1dH

; 595  : 		break;

  005ed	e9 31 05 00 00	 jmp	 $LN6@damage_num
$LN47@damage_num:

; 596  : #endif
; 597  : 	case 29:
; 598  : 		sprintf_s(szMoji, "No");

  005f2	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  005f8	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  005fd	50		 push	 eax
  005fe	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00603	83 c4 08	 add	 esp, 8

; 599  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 600  : 		ATR_ATTRIB(a0) = 0;

  00606	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  0060c	bf 02 00 00 00	 mov	 edi, 2

; 601  : 		ATR_CHR_NO(a0) = SPR_tooth;

  00611	c7 86 44 01 00
	00 27 8c 01 00	 mov	 DWORD PTR [esi+324], 101415 ; 00018c27H

; 602  : 		break;

  0061b	e9 03 05 00 00	 jmp	 $LN6@damage_num
$LN48@damage_num:

; 603  : 	case 30:
; 604  : 		sprintf_s(szMoji, "No");

  00620	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00626	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  0062b	50		 push	 eax
  0062c	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00631	83 c4 08	 add	 esp, 8

; 605  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 606  : 		ATR_ATTRIB(a0) = 0;

  00634	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  0063a	bf 02 00 00 00	 mov	 edi, 2

; 607  : 		ATR_CHR_NO(a0) = SPR_mic_def;

  0063f	c7 86 44 01 00
	00 23 8c 01 00	 mov	 DWORD PTR [esi+324], 101411 ; 00018c23H

; 608  : 		break;

  00649	e9 d5 04 00 00	 jmp	 $LN6@damage_num
$LN49@damage_num:

; 609  : 	case 31:
; 610  : 		sprintf_s(szMoji, "No");

  0064e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00654	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  00659	50		 push	 eax
  0065a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0065f	83 c4 08	 add	 esp, 8

; 611  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 612  : 		ATR_ATTRIB(a0) = 0;

  00662	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00668	bf 02 00 00 00	 mov	 edi, 2

; 613  : 		ATR_CHR_NO(a0) = SPR_ironwall;

  0066d	c7 86 44 01 00
	00 28 8c 01 00	 mov	 DWORD PTR [esi+324], 101416 ; 00018c28H

; 614  : 		break;

  00677	e9 a7 04 00 00	 jmp	 $LN6@damage_num
$LN50@damage_num:

; 615  : 
; 616  : 	case 32:	//Â±ûÊÄßËΩ¨Êç¢
; 617  : 		sprintf_s(szMoji, "No");

  0067c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00682	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  00687	50		 push	 eax
  00688	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0068d	83 c4 08	 add	 esp, 8

; 618  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 619  : 		ATR_ATTRIB(a0) = 0;

  00690	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00696	bf 02 00 00 00	 mov	 edi, 2

; 620  : 		ATR_CHR_NO(a0) = SPR_ch_earth;

  0069b	c7 86 44 01 00
	00 20 8c 01 00	 mov	 DWORD PTR [esi+324], 101408 ; 00018c20H

; 621  : 		break;

  006a5	e9 79 04 00 00	 jmp	 $LN6@damage_num
$LN51@damage_num:

; 622  : 	case 33:
; 623  : 		sprintf_s(szMoji, "No");

  006aa	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  006b0	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  006b5	50		 push	 eax
  006b6	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  006bb	83 c4 08	 add	 esp, 8

; 624  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 625  : 		ATR_ATTRIB(a0) = 0;

  006be	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  006c4	bf 02 00 00 00	 mov	 edi, 2

; 626  : 		ATR_CHR_NO(a0) = SPR_ch_water;

  006c9	c7 86 44 01 00
	00 21 8c 01 00	 mov	 DWORD PTR [esi+324], 101409 ; 00018c21H

; 627  : 		break;

  006d3	e9 4b 04 00 00	 jmp	 $LN6@damage_num
$LN52@damage_num:

; 628  : 	case 34:
; 629  : 		sprintf_s(szMoji, "No");

  006d8	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  006de	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  006e3	50		 push	 eax
  006e4	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  006e9	83 c4 08	 add	 esp, 8

; 630  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 631  : 		ATR_ATTRIB(a0) = 0;

  006ec	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  006f2	bf 02 00 00 00	 mov	 edi, 2

; 632  : 		ATR_CHR_NO(a0) = SPR_ch_fire;

  006f7	c7 86 44 01 00
	00 1f 8c 01 00	 mov	 DWORD PTR [esi+324], 101407 ; 00018c1fH

; 633  : 		break;

  00701	e9 1d 04 00 00	 jmp	 $LN6@damage_num
$LN53@damage_num:

; 634  : 	case 35:
; 635  : 		sprintf_s(szMoji, "No");

  00706	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0070c	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  00711	50		 push	 eax
  00712	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00717	83 c4 08	 add	 esp, 8

; 636  : 		d1_color = 2;		//Á¥´Ëâ≤Set
; 637  : 		ATR_ATTRIB(a0) = 0;

  0071a	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  00720	bf 02 00 00 00	 mov	 edi, 2

; 638  : 		ATR_CHR_NO(a0) = SPR_ch_wind;

  00725	c7 86 44 01 00
	00 22 8c 01 00	 mov	 DWORD PTR [esi+324], 101410 ; 00018c22H

; 639  : 		break;

  0072f	e9 ef 03 00 00	 jmp	 $LN6@damage_num
$LN54@damage_num:

; 640  : 	case 36:	//andy_add ÂõûÂêàË°•Ë°Ä
; 641  : 		memset(szMoji, 0, sizeof(szMoji));

  00734	68 00 01 00 00	 push	 256			; 00000100H
  00739	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0073f	6a 00		 push	 0
  00741	50		 push	 eax
  00742	e8 00 00 00 00	 call	 _memset

; 642  : 		memset(szMojiP, 0, sizeof(szMojiP));

  00747	68 00 01 00 00	 push	 256			; 00000100H
  0074c	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  00752	6a 00		 push	 0
  00754	50		 push	 eax
  00755	e8 00 00 00 00	 call	 _memset

; 643  : 		if (ATR_INT_WORK0(a0) != 0)

  0075a	8b 87 24 01 00
	00		 mov	 eax, DWORD PTR [edi+292]
  00760	83 c4 18	 add	 esp, 24			; 00000018H
  00763	85 c0		 test	 eax, eax
  00765	74 32		 je	 SHORT $LN55@damage_num

; 644  : 		{
; 645  : 			sprintf_s(szMoji, "%4d", ATR_INT_WORK0(a0));

  00767	50		 push	 eax
  00768	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0076e	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  00773	50		 push	 eax
  00774	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 646  : 			sprintf_s(szMojiP, "%4d", ATR_INT_WORKp(a0));

  00779	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0077c	ff b0 28 02 00
	00		 push	 DWORD PTR [eax+552]
  00782	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  00788	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  0078d	50		 push	 eax
  0078e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00793	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00796	83 c4 18	 add	 esp, 24			; 00000018H
$LN55@damage_num:

; 647  : 		}
; 648  : 		if (ATR_MPDAMAGE(a0) != 0)

  00799	8b 87 30 02 00
	00		 mov	 eax, DWORD PTR [edi+560]
  0079f	85 c0		 test	 eax, eax
  007a1	74 15		 je	 SHORT $LN56@damage_num

; 649  : 			sprintf_s(szMojMp, "%4d", ATR_MPDAMAGE(a0));

  007a3	50		 push	 eax
  007a4	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _szMojMp$[ebp]
  007aa	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  007af	50		 push	 eax
  007b0	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  007b5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN56@damage_num:

; 650  : 		d2 = FONT_PAL_YELLOW;

  007b8	bb 04 00 00 00	 mov	 ebx, 4

; 651  : 		d1_color = FONT_PAL_GREEN;

  007bd	8d 7b 01	 lea	 edi, DWORD PTR [ebx+1]

; 652  : 		break;

  007c0	e9 5e 03 00 00	 jmp	 $LN6@damage_num
$LN57@damage_num:

; 653  : 	case 37:
; 654  : 		memset(szMoji, 0, sizeof(szMoji));

  007c5	68 00 01 00 00	 push	 256			; 00000100H
  007ca	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  007d0	6a 00		 push	 0
  007d2	50		 push	 eax
  007d3	e8 00 00 00 00	 call	 _memset

; 655  : 		sprintf_s(szMoji, "ÂõûÈÅø %s", (ATR_INT_WORK0(a0) > 0) ? "‰∏äÂçá" : "‰∏ãÈôç");

  007d8	39 9f 24 01 00
	00		 cmp	 DWORD PTR [edi+292], ebx
  007de	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04HKBLFKAB@?y?$LL?K?$LN@
  007e3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04FEPFCGFN@?$NP?$LO?c?$KO@
  007e8	0f 4e c1	 cmovle	 eax, ecx
  007eb	50		 push	 eax
  007ec	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  007f2	68 00 00 00 00	 push	 OFFSET ??_C@_07OJGJELHN@?$PM?$NO?y?$KN?5?$CFs@
  007f7	50		 push	 eax
  007f8	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  007fd	83 c4 18	 add	 esp, 24			; 00000018H

; 656  : 		d1_color = FONT_PAL_GREEN;

  00800	bf 05 00 00 00	 mov	 edi, 5

; 657  : 		break;

  00805	e9 19 03 00 00	 jmp	 $LN6@damage_num
$LN58@damage_num:

; 658  : 	case 38:
; 659  : 		memset(szMoji, 0, sizeof(szMoji));

  0080a	68 00 01 00 00	 push	 256			; 00000100H
  0080f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00815	6a 00		 push	 0
  00817	50		 push	 eax
  00818	e8 00 00 00 00	 call	 _memset

; 660  : 		sprintf_s(szMoji, "Êîª %s%dÔºÖ", (ATR_INT_WORK0(a0) > 0) ? "‰∏äÂçá" : "‰∏ãÈôç", ATR_INT_WORK0(a0));

  0081d	8b 87 24 01 00
	00		 mov	 eax, DWORD PTR [edi+292]
  00823	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04FEPFCGFN@?$NP?$LO?c?$KO@
  00828	85 c0		 test	 eax, eax
  0082a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_04HKBLFKAB@?y?$LL?K?$LN@
  0082f	50		 push	 eax
  00830	0f 4e ca	 cmovle	 ecx, edx
  00833	51		 push	 ecx
  00834	68 00 00 00 00	 push	 OFFSET ??_C@_09GEAOALJ@?M?t?5?$CFs?$CFd?$KD?$KF@
$LN114@damage_num:

; 781  : 			   d1_color = FONT_PAL_GREEN;
; 782  : 	}
; 783  : 		break;
; 784  : #endif
; 785  : #ifdef _PETSKILL_JUSTICE
; 786  : 	case 45:
; 787  : 	{
; 788  : 			   sprintf_s(szMoji, "ÂÆ°Âà§ %d ÂõûÂêà", ATR_INT_WORK0(a0));
; 789  : 			   d1 = FONT_PAL_GREEN;
; 790  : 	}
; 791  : 		break;
; 792  : #endif
; 793  : #ifdef _PETSKILL_ADDATTCRAZED
; 794  : 	case 46:
; 795  : 	{
; 796  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅø‰∏ãÈôç", ATR_INT_WORK0(a0));
; 797  : 			   d1 = FONT_PAL_GREEN;
; 798  : 	}
; 799  : 		break;
; 800  : 	case 47:
; 801  : 	{
; 802  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅøÂõûÂ§ç", ATR_INT_WORK0(a0));
; 803  : 			   d1 = FONT_PAL_GREEN;
; 804  : 	}
; 805  : 		break;
; 806  : #endif
; 807  : #ifdef _PETSKILL_PROVOKEFIGHT
; 808  : 	case 48:
; 809  : 	{
; 810  : 			   d1 = FONT_PAL_GREEN;
; 811  : 			   switch(ATR_INT_WORK0(a0)){
; 812  : 			   case 0:
; 813  : 				   sprintf_s(szMoji, "Âêº!", ATR_INT_WORK0(a0));
; 814  : 				   break;
; 815  : 			   case 1:
; 816  : 				   sprintf_s(szMoji, "ÂèóÂà∞ÊåëË°Ö!", ATR_INT_WORK0(a0));
; 817  : 				   break;
; 818  : 			   case 2:
; 819  : 				   sprintf_s(szMoji, "Ë¢´ÈªèÊ∂≤Èªè‰Ωè!", ATR_INT_WORK0(a0));
; 820  : 				   break;
; 821  : 			   case 3:
; 822  : 				   sprintf_s(szMoji, "ÊîªÂáªÊ¨°Êï∞ÂáèÂ∞ë!", ATR_INT_WORK0(a0));
; 823  : 				   break;
; 824  : 			   case 4:
; 825  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÖâ‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 826  : 				   break;
; 827  : 			   case 5:
; 828  : 				   sprintf_s(szMoji, "Âê∏Êî∂Èïú‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 829  : 				   break;
; 830  : 			   case 6:
; 831  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÆà‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 832  : 				   break;
; 833  : 			   case 7:
; 834  : 				   sprintf_s(szMoji, "ÂÖâ‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 835  : 				   break;
; 836  : 			   case 8:
; 837  : 				   sprintf_s(szMoji, "Èïú‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 838  : 				   break;
; 839  : 			   case 9:
; 840  : 				   sprintf_s(szMoji, "ÂÆà‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 841  : 				   break;
; 842  : 			   case 10:
; 843  : 				   sprintf_s(szMoji, "Ëß£Èô§ÈªèÊ∂≤ÊïàÊûú!", ATR_INT_WORK0(a0));
; 844  : 				   break;
; 845  : #ifdef _PRO3_ADDSKILL
; 846  : 			   case 11:
; 847  : 				   sprintf_s(szMoji, "Ëß£Èô§Ë£ÇÈ™®Êñ≠Á≠ã!");
; 848  : 				   break;
; 849  : 			   case 12:
; 850  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊØíÁ¥†‰πãÁΩë!");
; 851  : 				   break;
; 852  : 			   case 13:
; 853  : 				   sprintf_s(szMoji, "ÊØíÁ¥†‰πãÁΩëËß£Èô§!");
; 854  : 				   break;
; 855  : 			   case 14:
; 856  : 				   sprintf_s(szMoji, "ÊäöÊÖ∞ÂøÉÁÅµËß£Èô§!");
; 857  : 				   break;
; 858  : 			   case 15:
; 859  : 				   sprintf_s(szMoji, "Â∞ÅÂç∞ÈóáÁÅµÊ≥ïÊúØ!");
; 860  : 				   break;
; 861  : 			   case 16:
; 862  : 				   sprintf_s(szMoji, "ÂõûÂ§çÈóáÁÅµÊ≥ïÊúØ!");
; 863  : 				   break;
; 864  : 			   case 17:
; 865  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊÅ∂È≠îËØÖÂíí!");
; 866  : 				   break;
; 867  : 			   case 18:
; 868  : 				   sprintf_s(szMoji, "Ëß£Èô§ÊÅ∂È≠îËØÖÂíí!");
; 869  : 				   break;
; 870  : 			   case 19:
; 871  : 				   sprintf_s(szMoji, "ÂèóÂà∞‰∫ÜÊÉäÂêì!");
; 872  : 				   break;
; 873  : #endif
; 874  : 			   }
; 875  : 			   break;
; 876  : 	}
; 877  : #endif
; 878  : #ifdef _PRO3_ADDSKILL
; 879  : 	case 49: //ÊäöÊÖ∞ÂøÉÁÅµ
; 880  : 	{
; 881  : 				 sprintf_s(szMoji, "Âø†ËØöÂ∫¶ %d ", ATR_INT_WORK0(a0));
; 882  : 				 d1 = FONT_PAL_GREEN;
; 883  : 	}
; 884  : 		break;
; 885  : 	case 50: //ÈóáÁÅµÂ∞ÅÂç∞
; 886  : 	{
; 887  : 				 char *tempstr[] = { "", "ÁÅ´Â±±Ê≥â", "ÈíàÈíàÁõ∏ÂØπ", "‰∏ñÁïåÊú´Êó•", "ÂÜ∞ÁàÜÊúØ", "ÈôÑË∫´ÊúØ", "Âè¨Èõ∑ÊúØ", "Êö¥È£éÈõ®", "ÁîµÊµÅÊúØ", "ÁÅ´ÊòüÁêÉ",
; 888  : 					 "ÂóúË°ÄËõä", "ÂóúË°ÄÊàêÊÄß", "ÂÜ∞ÁÆ≠ÊúØ", "ÁÅ´ÈæôÊû™", "ÂÜ∞ÈïúÊúØ", "ÁÅ´ÈôÑ‰Ωì", "Èõ∑ÈôÑ‰Ωì", "ÂÜ∞ÈôÑ‰Ωì", "ÁÅ´ÁÜüÁªÉÂ∫¶", "Èõ∑ÁÜüÁªÉÂ∫¶", "ÂÜ∞ÁÜüÁªÉÂ∫¶", 
; 889  : 					 "ÁßªÂΩ¢Êç¢‰Ωç", "Êö¥Âáª", "ËøûÁéØÊîªÂáª", "ÂèåÈáçÊîªÂáª", "ÂõûÈÅø", "Êû™ÁÜüÁªÉÂ∫¶", "ÊñßÁÜüÁªÉÂ∫¶", "Ê£çÁÜüÁªÉÂ∫¶", "ÂºìÁÜüÁªÉÂ∫¶",
; 890  : 					 "Á≤æÈÄöÂõûÂäõÈïñ", "Á≤æÈÄöÊäïÊé∑Áü≥", "Á≤æÈÄöÊäïÊé∑Êñß", "Áä∂ÊÄÅÂõûÂ§ç", "ËàçÂ∑≤‰∏∫Âèã", "ÊøÄÂåñÊîªÂáª", "ËÉΩÈáèËÅöÈõÜ", "‰∏ìÊ≥®ÊàòÊñó", 
; 891  : 					 "ÁõæÂáª", "Ë¥ØÁ©øÊîªÂáª", "ÊøíÊ≠ªÊîªÂáª", "ÂõûÊóãÊîªÂáª", "Ê∑∑‰π±ÊîªÂáª", "‰∫åÂàÄÊµÅ", "ËøΩÂØªÊïåË∏™", "ÂõûÈÅøÊàòÊñó", "Ê†ëÊ†πÁº†Áªï", 
; 892  : 					 "Èô∑Èò±", "Â§©ÁΩóÂú∞ÁΩë", "Â∞∏‰ΩìÊé†Â§∫", "ÊØíÁ¥†Ê≠¶Âô®", "Âº±ÁÇπÊîªÂáª", "ÊåëÊã®", "Ê†ºÊ°£", "Â∫ßÈ™ëÊîªÂáª", "Âä†Â∑•", "È©ØÊúçÂÆ†Áâ©", "ÊøÄÊÄíÂÆ†Áâ©", 
; 893  : 					 "Ëá™ÁªôËá™Ë∂≥", "Èõ∑ÊäóÊÄß", "ÁÅ´ÊäóÊÄß", "ÂÜ∞ÊäóÊÄß", "ÈÅóÂøò", "Ëá™ÊàëÂº∫Âåñ", "Ê∞îÂäõÂÖÖÊ≤õ", "Ë¥üÈáçÂ¢ûÂä†", "Ëá™ÁÑ∂Â®ÅËÉΩ", "Âè∑Âè¨Ëá™ÁÑ∂", 
; 894  : 					 "Âú∞ÁªìÁïå", "Ê∞¥ÁªìÁïå", "ÁÅ´ÁªìÁïå", "È£éÁªìÁïå", "Á†¥Èô§ÁªìÁïå", "ËØ±Êïå", "ÈáéÊÄßÂæÅÊúç", 
; 895  : 					 "ÂõõÊñπÈò≤Âæ°", "Ë£ÇÈ™®Êñ≠Á≠ã", "ÊàòÁãºÊÄíÂêº", "ÊñóÊ∞îÂØºÂºï", 
; 896  : 					 "È≠îÂäõÂííÂç∞", "ÊÅ∂È≠îËØÖÂíí", "Á•ûÁÅµ‰πãËµê", "Â§öÈáçÂÜ∞ÁÆ≠", 
; 897  : 					 "Â§öÈáçÂÜ∞ÁÆ≠", "ÊØíÁ¥†‰πãÁΩë", "ÊäöÊÖ∞ÂøÉÁÅµ", 
; 898  : 					 "ÊàòÂú∫ÊÄ•Êïë", "Âà∂ËçØÂ≠¶" };
; 899  : 				 memset(szMoji, 0, sizeof(szMoji));
; 900  : 				 sprintf_s(szMoji, "%s Ë¢´Â∞ÅÂç∞", tempstr[ATR_INT_WORK0(a0)]);
; 901  : 				 d1 = FONT_PAL_GREEN;
; 902  : 	}
; 903  : 		break;
; 904  : 	case 51:
; 905  : 	{
; 906  : 			   sprintf_s(szMoji, "Êîª‰∏ãÈôç%d", ATR_INT_WORK0(a0) );
; 907  : 			   d1 = FONT_PAL_GREEN;
; 908  : 	}
; 909  : 		break;
; 910  : #endif
; 911  : 	}
; 912  : 
; 913  : 	switch (ATR_INT_WORK1(a0))

  00839	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0083f	50		 push	 eax
  00840	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00845	83 c4 1c	 add	 esp, 28			; 0000001cH
  00848	bf 05 00 00 00	 mov	 edi, 5
  0084d	e9 d1 02 00 00	 jmp	 $LN6@damage_num
$LN59@damage_num:

; 661  : 		d1_color = FONT_PAL_GREEN;
; 662  : 		break;
; 663  : 	case 39:
; 664  : 		memset(szMoji, 0, sizeof(szMoji));

  00852	68 00 01 00 00	 push	 256			; 00000100H
  00857	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0085d	6a 00		 push	 0
  0085f	50		 push	 eax
  00860	e8 00 00 00 00	 call	 _memset

; 665  : 		sprintf_s(szMoji, "Èò≤ %s%dÔºÖ", (ATR_INT_WORK0(a0) > 0) ? "‰∏äÂçá" : "‰∏ãÈôç", ATR_INT_WORK0(a0));

  00865	8b 87 24 01 00
	00		 mov	 eax, DWORD PTR [edi+292]
  0086b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04FEPFCGFN@?$NP?$LO?c?$KO@
  00870	85 c0		 test	 eax, eax
  00872	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_04HKBLFKAB@?y?$LL?K?$LN@
  00877	50		 push	 eax
  00878	0f 4e ca	 cmovle	 ecx, edx
  0087b	51		 push	 ecx
  0087c	68 00 00 00 00	 push	 OFFSET ??_C@_09EIFGJEIL@?$NL?A?5?$CFs?$CFd?$KD?$KF@

; 666  : 		d1_color = FONT_PAL_GREEN;
; 667  : 		break;

  00881	eb b6		 jmp	 SHORT $LN114@damage_num
$LN60@damage_num:

; 668  : 	case 40:
; 669  : 		memset(szMoji, 0, sizeof(szMoji));

  00883	68 00 01 00 00	 push	 256			; 00000100H
  00888	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  0088e	6a 00		 push	 0
  00890	50		 push	 eax
  00891	e8 00 00 00 00	 call	 _memset

; 670  : 		sprintf_s(szMoji, "Êïè %s%dÔºÖ", (ATR_INT_WORK0(a0) > 0) ? "‰∏äÂçá" : "‰∏ãÈôç", ATR_INT_WORK0(a0));

  00896	8b 87 24 01 00
	00		 mov	 eax, DWORD PTR [edi+292]
  0089c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04FEPFCGFN@?$NP?$LO?c?$KO@
  008a1	85 c0		 test	 eax, eax
  008a3	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_04HKBLFKAB@?y?$LL?K?$LN@
  008a8	50		 push	 eax
  008a9	0f 4e ca	 cmovle	 ecx, edx
  008ac	51		 push	 ecx
  008ad	68 00 00 00 00	 push	 OFFSET ??_C@_09JOBJMDHA@?Z?B?5?$CFs?$CFd?$KD?$KF@

; 671  : 		d1_color = FONT_PAL_GREEN;
; 672  : 		break;

  008b2	eb 85		 jmp	 SHORT $LN114@damage_num
$LN61@damage_num:

; 673  : #ifdef _SYUTEST
; 674  : 	case 41:
; 675  : 		sprintf_s(szMoji, "LightTake");
; 676  : 		d1 = 5;		
; 677  : 		ATR_ATTRIB(a0) = 0;
; 678  : 		ATR_CHR_NO(a0) = SPR_lightget;//Âä®Áîª
; 679  : 		break;
; 680  : #endif
; 681  : 		//#ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 682  : 	case 41:
; 683  : 		sprintf_s(szMoji, "LightTake");

  008b4	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  008ba	68 00 00 00 00	 push	 OFFSET ??_C@_09IIPGOBOB@LightTake@
  008bf	50		 push	 eax
  008c0	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 684  : 		d1_color = 5;
; 685  : 		ATR_ATTRIB(a0) = 0;

  008c5	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  008cb	83 c4 08	 add	 esp, 8

; 686  : 		ATR_CHR_NO(a0) = AttNextMagicNum;//Âä®Áîª

  008ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AttNextMagicNum@@3HA ; AttNextMagicNum
  008d3	bf 05 00 00 00	 mov	 edi, 5
  008d8	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax

; 687  : #ifdef _WAVETRACK					// (‰∏çÂèØÂºÄ) Syu ADD Èü≥Ê≥¢ËΩ®ÈÅì
; 688  : 		if (AttNextMagicNum == 101703 && BeAttNum >= 15 && BeAttNum <= 19)

  008de	81 3d 00 00 00
	00 47 8d 01 00	 cmp	 DWORD PTR ?AttNextMagicNum@@3HA, 101703 ; AttNextMagicNum, 00018d47H
  008e8	75 3e		 jne	 SHORT $LN69@damage_num
  008ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BeAttNum@@3HA ; BeAttNum
  008f0	8d 41 f1	 lea	 eax, DWORD PTR [ecx-15]
  008f3	83 f8 04	 cmp	 eax, 4
  008f6	0f 87 27 02 00
	00		 ja	 $LN6@damage_num

; 689  : 		{
; 690  : 			if (BeAttNum == 15)

  008fc	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  008ff	75 05		 jne	 SHORT $LN63@damage_num

; 691  : 				ATR_H_POS(a0) = ATR_H_POS(a0) - 1 ; 

  00901	ff 4e 18	 dec	 DWORD PTR [esi+24]
  00904	eb 22		 jmp	 SHORT $LN69@damage_num
$LN63@damage_num:

; 692  : 			else if (BeAttNum == 17)

  00906	83 f9 11	 cmp	 ecx, 17			; 00000011H
  00909	75 06		 jne	 SHORT $LN65@damage_num

; 693  : 				ATR_H_POS(a0) = ATR_H_POS(a0) - 2  ; 

  0090b	83 46 18 fe	 add	 DWORD PTR [esi+24], -2	; fffffffeH
  0090f	eb 17		 jmp	 SHORT $LN69@damage_num
$LN65@damage_num:

; 694  : 			else if (BeAttNum == 19)

  00911	83 f9 13	 cmp	 ecx, 19			; 00000013H
  00914	75 06		 jne	 SHORT $LN67@damage_num

; 695  : 				ATR_H_POS(a0) = ATR_H_POS(a0) - 3  ; 

  00916	83 46 18 fd	 add	 DWORD PTR [esi+24], -3	; fffffffdH
  0091a	eb 0c		 jmp	 SHORT $LN69@damage_num
$LN67@damage_num:

; 696  : 			else if (BeAttNum == 18)

  0091c	83 f9 12	 cmp	 ecx, 18			; 00000012H
  0091f	0f 85 fe 01 00
	00		 jne	 $LN6@damage_num

; 697  : 				ATR_V_POS(a0) = ATR_V_POS(a0) - 1  ; 

  00925	ff 4e 1c	 dec	 DWORD PTR [esi+28]
$LN69@damage_num:

; 698  : 		}
; 699  : 		if (AttNextMagicNum == 101704 && BeAttNum >= 5 && BeAttNum <= 9)

  00928	81 3d 00 00 00
	00 48 8d 01 00	 cmp	 DWORD PTR ?AttNextMagicNum@@3HA, 101704 ; AttNextMagicNum, 00018d48H
  00932	0f 85 eb 01 00
	00		 jne	 $LN6@damage_num
  00938	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BeAttNum@@3HA ; BeAttNum
  0093e	8d 41 fb	 lea	 eax, DWORD PTR [ecx-5]
  00941	83 f8 04	 cmp	 eax, 4
  00944	0f 87 d9 01 00
	00		 ja	 $LN6@damage_num

; 700  : 		{
; 701  : 			if (BeAttNum == 5)

  0094a	3b cf		 cmp	 ecx, edi
  0094c	75 23		 jne	 SHORT $LN71@damage_num

; 702  : 			{
; 703  : 				if (ATR_CHR_CNT(a0) == 0)

  0094e	39 9e 5c 01 00
	00		 cmp	 DWORD PTR [esi+348], ebx
  00954	75 13		 jne	 SHORT $LN73@damage_num

; 704  : 				{
; 705  : 					ATR_H_POS(a0) = 441;

  00956	c7 46 18 b9 01
	00 00		 mov	 DWORD PTR [esi+24], 441	; 000001b9H

; 706  : 					ATR_V_POS(a0) = 322;

  0095d	c7 46 1c 42 01
	00 00		 mov	 DWORD PTR [esi+28], 322	; 00000142H

; 707  : 				}

  00964	e9 ba 01 00 00	 jmp	 $LN6@damage_num
$LN73@damage_num:

; 708  : 				else
; 709  : 					ATR_H_POS(a0) = ATR_H_POS(a0) + 1;

  00969	ff 46 18	 inc	 DWORD PTR [esi+24]

; 710  : 			}

  0096c	e9 b2 01 00 00	 jmp	 $LN6@damage_num
$LN71@damage_num:

; 711  : 			else if (BeAttNum == 6)

  00971	83 f9 06	 cmp	 ecx, 6
  00974	75 24		 jne	 SHORT $LN75@damage_num

; 712  : 			{
; 713  : 				if (ATR_CHR_CNT(a0) == 0)

  00976	39 9e 5c 01 00
	00		 cmp	 DWORD PTR [esi+348], ebx
  0097c	75 13		 jne	 SHORT $LN77@damage_num

; 714  : 				{
; 715  : 					ATR_H_POS(a0) = 377;

  0097e	c7 46 18 79 01
	00 00		 mov	 DWORD PTR [esi+24], 377	; 00000179H

; 716  : 					ATR_V_POS(a0) = 370;

  00985	c7 46 1c 72 01
	00 00		 mov	 DWORD PTR [esi+28], 370	; 00000172H

; 717  : 				}

  0098c	e9 92 01 00 00	 jmp	 $LN6@damage_num
$LN77@damage_num:

; 718  : 				else
; 719  : 					ATR_H_POS(a0) = ATR_H_POS(a0) + 2;

  00991	83 46 18 02	 add	 DWORD PTR [esi+24], 2

; 720  : 			}

  00995	e9 89 01 00 00	 jmp	 $LN6@damage_num
$LN75@damage_num:

; 721  : 			else if (BeAttNum == 7)

  0099a	83 f9 07	 cmp	 ecx, 7
  0099d	75 1f		 jne	 SHORT $LN79@damage_num

; 722  : 			{
; 723  : 				if (ATR_CHR_CNT(a0) == 0)

  0099f	39 9e 5c 01 00
	00		 cmp	 DWORD PTR [esi+348], ebx
  009a5	0f 85 78 01 00
	00		 jne	 $LN6@damage_num

; 724  : 				{
; 725  : 					ATR_H_POS(a0) = 505;

  009ab	c7 46 18 f9 01
	00 00		 mov	 DWORD PTR [esi+24], 505	; 000001f9H

; 726  : 					ATR_V_POS(a0) = 274;

  009b2	c7 46 1c 12 01
	00 00		 mov	 DWORD PTR [esi+28], 274	; 00000112H

; 727  : 				}
; 728  : 			}

  009b9	e9 65 01 00 00	 jmp	 $LN6@damage_num
$LN79@damage_num:

; 729  : 			else if (BeAttNum == 8)

  009be	83 f9 08	 cmp	 ecx, 8
  009c1	75 24		 jne	 SHORT $LN82@damage_num

; 730  : 			{
; 731  : 				if (ATR_CHR_CNT(a0) == 0)

  009c3	39 9e 5c 01 00
	00		 cmp	 DWORD PTR [esi+348], ebx
  009c9	75 13		 jne	 SHORT $LN84@damage_num

; 732  : 				{
; 733  : 					ATR_H_POS(a0) = 313;

  009cb	c7 46 18 39 01
	00 00		 mov	 DWORD PTR [esi+24], 313	; 00000139H

; 734  : 					ATR_V_POS(a0) = 418;

  009d2	c7 46 1c a2 01
	00 00		 mov	 DWORD PTR [esi+28], 418	; 000001a2H

; 735  : 				}

  009d9	e9 45 01 00 00	 jmp	 $LN6@damage_num
$LN84@damage_num:

; 736  : 				else
; 737  : 					ATR_H_POS(a0) = ATR_H_POS(a0) + 3;

  009de	83 46 18 03	 add	 DWORD PTR [esi+24], 3

; 738  : 			}

  009e2	e9 3c 01 00 00	 jmp	 $LN6@damage_num
$LN82@damage_num:

; 739  : 			else if (BeAttNum == 9)

  009e7	83 f9 09	 cmp	 ecx, 9
  009ea	0f 85 33 01 00
	00		 jne	 $LN6@damage_num

; 740  : 			{
; 741  : 				if (ATR_CHR_CNT(a0) == 0)

  009f0	39 9e 5c 01 00
	00		 cmp	 DWORD PTR [esi+348], ebx
  009f6	75 13		 jne	 SHORT $LN87@damage_num

; 742  : 				{
; 743  : 					ATR_H_POS(a0) = 569;

  009f8	c7 46 18 39 02
	00 00		 mov	 DWORD PTR [esi+24], 569	; 00000239H

; 744  : 					ATR_V_POS(a0) = 226;

  009ff	c7 46 1c e2 00
	00 00		 mov	 DWORD PTR [esi+28], 226	; 000000e2H

; 745  : 				}

  00a06	e9 18 01 00 00	 jmp	 $LN6@damage_num
$LN87@damage_num:

; 746  : 				else
; 747  : 					ATR_V_POS(a0) = ATR_V_POS(a0) + 1;

  00a0b	ff 46 1c	 inc	 DWORD PTR [esi+28]

; 748  : 			}
; 749  : 		}
; 750  : #endif
; 751  : 		break;

  00a0e	e9 10 01 00 00	 jmp	 $LN6@damage_num
$LN90@damage_num:

; 752  : 		//#endif
; 753  : 
; 754  : #ifdef _EQUIT_ARRANGE
; 755  : 	case 42:		//Êå°Ê†ºÂ§ÑÁêÜ
; 756  : 		sprintf_s(szMoji, "Guard");
; 757  : 		d1_color = 3;		//ÈùíËâ≤Set
; 758  : 		ATR_ATTRIB(a0) = 0;
; 759  : 		ATR_CHR_NO(a0) = CG_ICON_GUARD;
; 760  : 		break;
; 761  : #endif
; 762  : 
; 763  : #ifdef _SKILL_ADDBARRIER		// Change ÂÆ†ÊäÄ:‰∏∫È≠îÈöúÂ¢ûÂä†ÂºÇÂ∏∏ÊäóÊÄßÂäüËÉΩ
; 764  : 	case 43:
; 765  : 		memset(szMoji, 0, sizeof(szMoji));

  00a13	68 00 01 00 00	 push	 256			; 00000100H
  00a18	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00a1e	6a 00		 push	 0
  00a20	50		 push	 eax
  00a21	e8 00 00 00 00	 call	 _memset

; 766  : 		if (ATR_INT_WORK0(a0) == 0)

  00a26	8b 8f 24 01 00
	00		 mov	 ecx, DWORD PTR [edi+292]
  00a2c	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a2f	85 c9		 test	 ecx, ecx
  00a31	75 1e		 jne	 SHORT $LN91@damage_num

; 767  : 			sprintf_s(szMoji, "ÂºÇÂ∏∏ÊäóÊÄßÂõûÂ§ç");

  00a33	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00a39	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EGPLNANN@?$DP?$NP?H?y?w?$OA?u?$PM?$NO?$DP@
  00a3e	50		 push	 eax
  00a3f	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a44	83 c4 08	 add	 esp, 8

; 781  : 			   d1_color = FONT_PAL_GREEN;
; 782  : 	}
; 783  : 		break;
; 784  : #endif
; 785  : #ifdef _PETSKILL_JUSTICE
; 786  : 	case 45:
; 787  : 	{
; 788  : 			   sprintf_s(szMoji, "ÂÆ°Âà§ %d ÂõûÂêà", ATR_INT_WORK0(a0));
; 789  : 			   d1 = FONT_PAL_GREEN;
; 790  : 	}
; 791  : 		break;
; 792  : #endif
; 793  : #ifdef _PETSKILL_ADDATTCRAZED
; 794  : 	case 46:
; 795  : 	{
; 796  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅø‰∏ãÈôç", ATR_INT_WORK0(a0));
; 797  : 			   d1 = FONT_PAL_GREEN;
; 798  : 	}
; 799  : 		break;
; 800  : 	case 47:
; 801  : 	{
; 802  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅøÂõûÂ§ç", ATR_INT_WORK0(a0));
; 803  : 			   d1 = FONT_PAL_GREEN;
; 804  : 	}
; 805  : 		break;
; 806  : #endif
; 807  : #ifdef _PETSKILL_PROVOKEFIGHT
; 808  : 	case 48:
; 809  : 	{
; 810  : 			   d1 = FONT_PAL_GREEN;
; 811  : 			   switch(ATR_INT_WORK0(a0)){
; 812  : 			   case 0:
; 813  : 				   sprintf_s(szMoji, "Âêº!", ATR_INT_WORK0(a0));
; 814  : 				   break;
; 815  : 			   case 1:
; 816  : 				   sprintf_s(szMoji, "ÂèóÂà∞ÊåëË°Ö!", ATR_INT_WORK0(a0));
; 817  : 				   break;
; 818  : 			   case 2:
; 819  : 				   sprintf_s(szMoji, "Ë¢´ÈªèÊ∂≤Èªè‰Ωè!", ATR_INT_WORK0(a0));
; 820  : 				   break;
; 821  : 			   case 3:
; 822  : 				   sprintf_s(szMoji, "ÊîªÂáªÊ¨°Êï∞ÂáèÂ∞ë!", ATR_INT_WORK0(a0));
; 823  : 				   break;
; 824  : 			   case 4:
; 825  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÖâ‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 826  : 				   break;
; 827  : 			   case 5:
; 828  : 				   sprintf_s(szMoji, "Âê∏Êî∂Èïú‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 829  : 				   break;
; 830  : 			   case 6:
; 831  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÆà‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 832  : 				   break;
; 833  : 			   case 7:
; 834  : 				   sprintf_s(szMoji, "ÂÖâ‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 835  : 				   break;
; 836  : 			   case 8:
; 837  : 				   sprintf_s(szMoji, "Èïú‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 838  : 				   break;
; 839  : 			   case 9:
; 840  : 				   sprintf_s(szMoji, "ÂÆà‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 841  : 				   break;
; 842  : 			   case 10:
; 843  : 				   sprintf_s(szMoji, "Ëß£Èô§ÈªèÊ∂≤ÊïàÊûú!", ATR_INT_WORK0(a0));
; 844  : 				   break;
; 845  : #ifdef _PRO3_ADDSKILL
; 846  : 			   case 11:
; 847  : 				   sprintf_s(szMoji, "Ëß£Èô§Ë£ÇÈ™®Êñ≠Á≠ã!");
; 848  : 				   break;
; 849  : 			   case 12:
; 850  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊØíÁ¥†‰πãÁΩë!");
; 851  : 				   break;
; 852  : 			   case 13:
; 853  : 				   sprintf_s(szMoji, "ÊØíÁ¥†‰πãÁΩëËß£Èô§!");
; 854  : 				   break;
; 855  : 			   case 14:
; 856  : 				   sprintf_s(szMoji, "ÊäöÊÖ∞ÂøÉÁÅµËß£Èô§!");
; 857  : 				   break;
; 858  : 			   case 15:
; 859  : 				   sprintf_s(szMoji, "Â∞ÅÂç∞ÈóáÁÅµÊ≥ïÊúØ!");
; 860  : 				   break;
; 861  : 			   case 16:
; 862  : 				   sprintf_s(szMoji, "ÂõûÂ§çÈóáÁÅµÊ≥ïÊúØ!");
; 863  : 				   break;
; 864  : 			   case 17:
; 865  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊÅ∂È≠îËØÖÂíí!");
; 866  : 				   break;
; 867  : 			   case 18:
; 868  : 				   sprintf_s(szMoji, "Ëß£Èô§ÊÅ∂È≠îËØÖÂíí!");
; 869  : 				   break;
; 870  : 			   case 19:
; 871  : 				   sprintf_s(szMoji, "ÂèóÂà∞‰∫ÜÊÉäÂêì!");
; 872  : 				   break;
; 873  : #endif
; 874  : 			   }
; 875  : 			   break;
; 876  : 	}
; 877  : #endif
; 878  : #ifdef _PRO3_ADDSKILL
; 879  : 	case 49: //ÊäöÊÖ∞ÂøÉÁÅµ
; 880  : 	{
; 881  : 				 sprintf_s(szMoji, "Âø†ËØöÂ∫¶ %d ", ATR_INT_WORK0(a0));
; 882  : 				 d1 = FONT_PAL_GREEN;
; 883  : 	}
; 884  : 		break;
; 885  : 	case 50: //ÈóáÁÅµÂ∞ÅÂç∞
; 886  : 	{
; 887  : 				 char *tempstr[] = { "", "ÁÅ´Â±±Ê≥â", "ÈíàÈíàÁõ∏ÂØπ", "‰∏ñÁïåÊú´Êó•", "ÂÜ∞ÁàÜÊúØ", "ÈôÑË∫´ÊúØ", "Âè¨Èõ∑ÊúØ", "Êö¥È£éÈõ®", "ÁîµÊµÅÊúØ", "ÁÅ´ÊòüÁêÉ",
; 888  : 					 "ÂóúË°ÄËõä", "ÂóúË°ÄÊàêÊÄß", "ÂÜ∞ÁÆ≠ÊúØ", "ÁÅ´ÈæôÊû™", "ÂÜ∞ÈïúÊúØ", "ÁÅ´ÈôÑ‰Ωì", "Èõ∑ÈôÑ‰Ωì", "ÂÜ∞ÈôÑ‰Ωì", "ÁÅ´ÁÜüÁªÉÂ∫¶", "Èõ∑ÁÜüÁªÉÂ∫¶", "ÂÜ∞ÁÜüÁªÉÂ∫¶", 
; 889  : 					 "ÁßªÂΩ¢Êç¢‰Ωç", "Êö¥Âáª", "ËøûÁéØÊîªÂáª", "ÂèåÈáçÊîªÂáª", "ÂõûÈÅø", "Êû™ÁÜüÁªÉÂ∫¶", "ÊñßÁÜüÁªÉÂ∫¶", "Ê£çÁÜüÁªÉÂ∫¶", "ÂºìÁÜüÁªÉÂ∫¶",
; 890  : 					 "Á≤æÈÄöÂõûÂäõÈïñ", "Á≤æÈÄöÊäïÊé∑Áü≥", "Á≤æÈÄöÊäïÊé∑Êñß", "Áä∂ÊÄÅÂõûÂ§ç", "ËàçÂ∑≤‰∏∫Âèã", "ÊøÄÂåñÊîªÂáª", "ËÉΩÈáèËÅöÈõÜ", "‰∏ìÊ≥®ÊàòÊñó", 
; 891  : 					 "ÁõæÂáª", "Ë¥ØÁ©øÊîªÂáª", "ÊøíÊ≠ªÊîªÂáª", "ÂõûÊóãÊîªÂáª", "Ê∑∑‰π±ÊîªÂáª", "‰∫åÂàÄÊµÅ", "ËøΩÂØªÊïåË∏™", "ÂõûÈÅøÊàòÊñó", "Ê†ëÊ†πÁº†Áªï", 
; 892  : 					 "Èô∑Èò±", "Â§©ÁΩóÂú∞ÁΩë", "Â∞∏‰ΩìÊé†Â§∫", "ÊØíÁ¥†Ê≠¶Âô®", "Âº±ÁÇπÊîªÂáª", "ÊåëÊã®", "Ê†ºÊ°£", "Â∫ßÈ™ëÊîªÂáª", "Âä†Â∑•", "È©ØÊúçÂÆ†Áâ©", "ÊøÄÊÄíÂÆ†Áâ©", 
; 893  : 					 "Ëá™ÁªôËá™Ë∂≥", "Èõ∑ÊäóÊÄß", "ÁÅ´ÊäóÊÄß", "ÂÜ∞ÊäóÊÄß", "ÈÅóÂøò", "Ëá™ÊàëÂº∫Âåñ", "Ê∞îÂäõÂÖÖÊ≤õ", "Ë¥üÈáçÂ¢ûÂä†", "Ëá™ÁÑ∂Â®ÅËÉΩ", "Âè∑Âè¨Ëá™ÁÑ∂", 
; 894  : 					 "Âú∞ÁªìÁïå", "Ê∞¥ÁªìÁïå", "ÁÅ´ÁªìÁïå", "È£éÁªìÁïå", "Á†¥Èô§ÁªìÁïå", "ËØ±Êïå", "ÈáéÊÄßÂæÅÊúç", 
; 895  : 					 "ÂõõÊñπÈò≤Âæ°", "Ë£ÇÈ™®Êñ≠Á≠ã", "ÊàòÁãºÊÄíÂêº", "ÊñóÊ∞îÂØºÂºï", 
; 896  : 					 "È≠îÂäõÂííÂç∞", "ÊÅ∂È≠îËØÖÂíí", "Á•ûÁÅµ‰πãËµê", "Â§öÈáçÂÜ∞ÁÆ≠", 
; 897  : 					 "Â§öÈáçÂÜ∞ÁÆ≠", "ÊØíÁ¥†‰πãÁΩë", "ÊäöÊÖ∞ÂøÉÁÅµ", 
; 898  : 					 "ÊàòÂú∫ÊÄ•Êïë", "Âà∂ËçØÂ≠¶" };
; 899  : 				 memset(szMoji, 0, sizeof(szMoji));
; 900  : 				 sprintf_s(szMoji, "%s Ë¢´Â∞ÅÂç∞", tempstr[ATR_INT_WORK0(a0)]);
; 901  : 				 d1 = FONT_PAL_GREEN;
; 902  : 	}
; 903  : 		break;
; 904  : 	case 51:
; 905  : 	{
; 906  : 			   sprintf_s(szMoji, "Êîª‰∏ãÈôç%d", ATR_INT_WORK0(a0) );
; 907  : 			   d1 = FONT_PAL_GREEN;
; 908  : 	}
; 909  : 		break;
; 910  : #endif
; 911  : 	}
; 912  : 
; 913  : 	switch (ATR_INT_WORK1(a0))

  00a47	bf 05 00 00 00	 mov	 edi, 5
  00a4c	e9 d2 00 00 00	 jmp	 $LN6@damage_num
$LN91@damage_num:

; 768  : 		else
; 769  : 			sprintf_s(szMoji, "ÂºÇÂ∏∏ÊäóÊÄß %s%dÔºÖ", (ATR_INT_WORK0(a0) > 0) ? "‰∏äÂçá":"‰∏ãÈôç", ATR_INT_WORK0(a0));

  00a51	85 c9		 test	 ecx, ecx
  00a53	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_04HKBLFKAB@?y?$LL?K?$LN@
  00a58	51		 push	 ecx
  00a59	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04FEPFCGFN@?$NP?$LO?c?$KO@
  00a5e	0f 4e c2	 cmovle	 eax, edx
  00a61	50		 push	 eax
  00a62	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00a68	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MLDKCEHF@?$DP?$NP?H?y?w?$OA?u?5?$CFs?$CFd?$KD?$KF@
  00a6d	50		 push	 eax
  00a6e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a73	83 c4 10	 add	 esp, 16			; 00000010H

; 781  : 			   d1_color = FONT_PAL_GREEN;
; 782  : 	}
; 783  : 		break;
; 784  : #endif
; 785  : #ifdef _PETSKILL_JUSTICE
; 786  : 	case 45:
; 787  : 	{
; 788  : 			   sprintf_s(szMoji, "ÂÆ°Âà§ %d ÂõûÂêà", ATR_INT_WORK0(a0));
; 789  : 			   d1 = FONT_PAL_GREEN;
; 790  : 	}
; 791  : 		break;
; 792  : #endif
; 793  : #ifdef _PETSKILL_ADDATTCRAZED
; 794  : 	case 46:
; 795  : 	{
; 796  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅø‰∏ãÈôç", ATR_INT_WORK0(a0));
; 797  : 			   d1 = FONT_PAL_GREEN;
; 798  : 	}
; 799  : 		break;
; 800  : 	case 47:
; 801  : 	{
; 802  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅøÂõûÂ§ç", ATR_INT_WORK0(a0));
; 803  : 			   d1 = FONT_PAL_GREEN;
; 804  : 	}
; 805  : 		break;
; 806  : #endif
; 807  : #ifdef _PETSKILL_PROVOKEFIGHT
; 808  : 	case 48:
; 809  : 	{
; 810  : 			   d1 = FONT_PAL_GREEN;
; 811  : 			   switch(ATR_INT_WORK0(a0)){
; 812  : 			   case 0:
; 813  : 				   sprintf_s(szMoji, "Âêº!", ATR_INT_WORK0(a0));
; 814  : 				   break;
; 815  : 			   case 1:
; 816  : 				   sprintf_s(szMoji, "ÂèóÂà∞ÊåëË°Ö!", ATR_INT_WORK0(a0));
; 817  : 				   break;
; 818  : 			   case 2:
; 819  : 				   sprintf_s(szMoji, "Ë¢´ÈªèÊ∂≤Èªè‰Ωè!", ATR_INT_WORK0(a0));
; 820  : 				   break;
; 821  : 			   case 3:
; 822  : 				   sprintf_s(szMoji, "ÊîªÂáªÊ¨°Êï∞ÂáèÂ∞ë!", ATR_INT_WORK0(a0));
; 823  : 				   break;
; 824  : 			   case 4:
; 825  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÖâ‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 826  : 				   break;
; 827  : 			   case 5:
; 828  : 				   sprintf_s(szMoji, "Âê∏Êî∂Èïú‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 829  : 				   break;
; 830  : 			   case 6:
; 831  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÆà‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 832  : 				   break;
; 833  : 			   case 7:
; 834  : 				   sprintf_s(szMoji, "ÂÖâ‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 835  : 				   break;
; 836  : 			   case 8:
; 837  : 				   sprintf_s(szMoji, "Èïú‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 838  : 				   break;
; 839  : 			   case 9:
; 840  : 				   sprintf_s(szMoji, "ÂÆà‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 841  : 				   break;
; 842  : 			   case 10:
; 843  : 				   sprintf_s(szMoji, "Ëß£Èô§ÈªèÊ∂≤ÊïàÊûú!", ATR_INT_WORK0(a0));
; 844  : 				   break;
; 845  : #ifdef _PRO3_ADDSKILL
; 846  : 			   case 11:
; 847  : 				   sprintf_s(szMoji, "Ëß£Èô§Ë£ÇÈ™®Êñ≠Á≠ã!");
; 848  : 				   break;
; 849  : 			   case 12:
; 850  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊØíÁ¥†‰πãÁΩë!");
; 851  : 				   break;
; 852  : 			   case 13:
; 853  : 				   sprintf_s(szMoji, "ÊØíÁ¥†‰πãÁΩëËß£Èô§!");
; 854  : 				   break;
; 855  : 			   case 14:
; 856  : 				   sprintf_s(szMoji, "ÊäöÊÖ∞ÂøÉÁÅµËß£Èô§!");
; 857  : 				   break;
; 858  : 			   case 15:
; 859  : 				   sprintf_s(szMoji, "Â∞ÅÂç∞ÈóáÁÅµÊ≥ïÊúØ!");
; 860  : 				   break;
; 861  : 			   case 16:
; 862  : 				   sprintf_s(szMoji, "ÂõûÂ§çÈóáÁÅµÊ≥ïÊúØ!");
; 863  : 				   break;
; 864  : 			   case 17:
; 865  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊÅ∂È≠îËØÖÂíí!");
; 866  : 				   break;
; 867  : 			   case 18:
; 868  : 				   sprintf_s(szMoji, "Ëß£Èô§ÊÅ∂È≠îËØÖÂíí!");
; 869  : 				   break;
; 870  : 			   case 19:
; 871  : 				   sprintf_s(szMoji, "ÂèóÂà∞‰∫ÜÊÉäÂêì!");
; 872  : 				   break;
; 873  : #endif
; 874  : 			   }
; 875  : 			   break;
; 876  : 	}
; 877  : #endif
; 878  : #ifdef _PRO3_ADDSKILL
; 879  : 	case 49: //ÊäöÊÖ∞ÂøÉÁÅµ
; 880  : 	{
; 881  : 				 sprintf_s(szMoji, "Âø†ËØöÂ∫¶ %d ", ATR_INT_WORK0(a0));
; 882  : 				 d1 = FONT_PAL_GREEN;
; 883  : 	}
; 884  : 		break;
; 885  : 	case 50: //ÈóáÁÅµÂ∞ÅÂç∞
; 886  : 	{
; 887  : 				 char *tempstr[] = { "", "ÁÅ´Â±±Ê≥â", "ÈíàÈíàÁõ∏ÂØπ", "‰∏ñÁïåÊú´Êó•", "ÂÜ∞ÁàÜÊúØ", "ÈôÑË∫´ÊúØ", "Âè¨Èõ∑ÊúØ", "Êö¥È£éÈõ®", "ÁîµÊµÅÊúØ", "ÁÅ´ÊòüÁêÉ",
; 888  : 					 "ÂóúË°ÄËõä", "ÂóúË°ÄÊàêÊÄß", "ÂÜ∞ÁÆ≠ÊúØ", "ÁÅ´ÈæôÊû™", "ÂÜ∞ÈïúÊúØ", "ÁÅ´ÈôÑ‰Ωì", "Èõ∑ÈôÑ‰Ωì", "ÂÜ∞ÈôÑ‰Ωì", "ÁÅ´ÁÜüÁªÉÂ∫¶", "Èõ∑ÁÜüÁªÉÂ∫¶", "ÂÜ∞ÁÜüÁªÉÂ∫¶", 
; 889  : 					 "ÁßªÂΩ¢Êç¢‰Ωç", "Êö¥Âáª", "ËøûÁéØÊîªÂáª", "ÂèåÈáçÊîªÂáª", "ÂõûÈÅø", "Êû™ÁÜüÁªÉÂ∫¶", "ÊñßÁÜüÁªÉÂ∫¶", "Ê£çÁÜüÁªÉÂ∫¶", "ÂºìÁÜüÁªÉÂ∫¶",
; 890  : 					 "Á≤æÈÄöÂõûÂäõÈïñ", "Á≤æÈÄöÊäïÊé∑Áü≥", "Á≤æÈÄöÊäïÊé∑Êñß", "Áä∂ÊÄÅÂõûÂ§ç", "ËàçÂ∑≤‰∏∫Âèã", "ÊøÄÂåñÊîªÂáª", "ËÉΩÈáèËÅöÈõÜ", "‰∏ìÊ≥®ÊàòÊñó", 
; 891  : 					 "ÁõæÂáª", "Ë¥ØÁ©øÊîªÂáª", "ÊøíÊ≠ªÊîªÂáª", "ÂõûÊóãÊîªÂáª", "Ê∑∑‰π±ÊîªÂáª", "‰∫åÂàÄÊµÅ", "ËøΩÂØªÊïåË∏™", "ÂõûÈÅøÊàòÊñó", "Ê†ëÊ†πÁº†Áªï", 
; 892  : 					 "Èô∑Èò±", "Â§©ÁΩóÂú∞ÁΩë", "Â∞∏‰ΩìÊé†Â§∫", "ÊØíÁ¥†Ê≠¶Âô®", "Âº±ÁÇπÊîªÂáª", "ÊåëÊã®", "Ê†ºÊ°£", "Â∫ßÈ™ëÊîªÂáª", "Âä†Â∑•", "È©ØÊúçÂÆ†Áâ©", "ÊøÄÊÄíÂÆ†Áâ©", 
; 893  : 					 "Ëá™ÁªôËá™Ë∂≥", "Èõ∑ÊäóÊÄß", "ÁÅ´ÊäóÊÄß", "ÂÜ∞ÊäóÊÄß", "ÈÅóÂøò", "Ëá™ÊàëÂº∫Âåñ", "Ê∞îÂäõÂÖÖÊ≤õ", "Ë¥üÈáçÂ¢ûÂä†", "Ëá™ÁÑ∂Â®ÅËÉΩ", "Âè∑Âè¨Ëá™ÁÑ∂", 
; 894  : 					 "Âú∞ÁªìÁïå", "Ê∞¥ÁªìÁïå", "ÁÅ´ÁªìÁïå", "È£éÁªìÁïå", "Á†¥Èô§ÁªìÁïå", "ËØ±Êïå", "ÈáéÊÄßÂæÅÊúç", 
; 895  : 					 "ÂõõÊñπÈò≤Âæ°", "Ë£ÇÈ™®Êñ≠Á≠ã", "ÊàòÁãºÊÄíÂêº", "ÊñóÊ∞îÂØºÂºï", 
; 896  : 					 "È≠îÂäõÂííÂç∞", "ÊÅ∂È≠îËØÖÂíí", "Á•ûÁÅµ‰πãËµê", "Â§öÈáçÂÜ∞ÁÆ≠", 
; 897  : 					 "Â§öÈáçÂÜ∞ÁÆ≠", "ÊØíÁ¥†‰πãÁΩë", "ÊäöÊÖ∞ÂøÉÁÅµ", 
; 898  : 					 "ÊàòÂú∫ÊÄ•Êïë", "Âà∂ËçØÂ≠¶" };
; 899  : 				 memset(szMoji, 0, sizeof(szMoji));
; 900  : 				 sprintf_s(szMoji, "%s Ë¢´Â∞ÅÂç∞", tempstr[ATR_INT_WORK0(a0)]);
; 901  : 				 d1 = FONT_PAL_GREEN;
; 902  : 	}
; 903  : 		break;
; 904  : 	case 51:
; 905  : 	{
; 906  : 			   sprintf_s(szMoji, "Êîª‰∏ãÈôç%d", ATR_INT_WORK0(a0) );
; 907  : 			   d1 = FONT_PAL_GREEN;
; 908  : 	}
; 909  : 		break;
; 910  : #endif
; 911  : 	}
; 912  : 
; 913  : 	switch (ATR_INT_WORK1(a0))

  00a76	bf 05 00 00 00	 mov	 edi, 5
  00a7b	e9 a3 00 00 00	 jmp	 $LN6@damage_num
$LN93@damage_num:

; 770  : 		d1_color = FONT_PAL_GREEN;
; 771  : 		break;
; 772  : #endif
; 773  : #ifdef _PETSKILL_PEEL
; 774  : 	case 44:
; 775  : 	{
; 776  : 			   char *tempstr[] = { "Â§¥ÈÉ®", "Èì†ÈÉ®", "Âè≥Êâã", "Â∑¶È•∞ÂìÅ", "Âè≥È•∞ÂìÅ", "ËÖ∞Â∏¶", "Â∑¶Êâã", "ÈûãÂ≠ê", "ÊâãÂ•ó"};
; 777  : 			   memset(szMoji, 0, sizeof(szMoji));

  00a80	68 00 01 00 00	 push	 256			; 00000100H
  00a85	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00a8b	c7 85 d8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp], OFFSET ??_C@_03PEJDBJAE@?$DP?$NN?$LL@
  00a95	6a 00		 push	 0
  00a97	50		 push	 eax
  00a98	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp+4], OFFSET ??_C@_03PEJDBJAE@?$DP?$NN?$LL@
  00aa2	c7 85 e0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp+8], OFFSET ??_C@_04BOKPGBJO@?i?S?b?$KC@
  00aac	c7 85 e4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp+12], OFFSET ??_C@_05PHLFPKGG@?q?$KH?$DP?y?$KB@
  00ab6	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp+16], OFFSET ??_C@_05BEGCDMJP@?i?S?$DP?y?$KB@
  00ac0	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp+20], OFFSET ??_C@_03PAOHCFLP@?i?$KG?$DP@
  00aca	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp+24], OFFSET ??_C@_04KKGCIKBG@?q?$KH?b?$KC@
  00ad4	c7 85 f4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp+28], OFFSET ??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@
  00ade	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _tempstr$1[ebp+32], OFFSET ??_C@_04DKIAPBFG@?b?$KC?w?$NP@
  00ae8	e8 00 00 00 00	 call	 _memset

; 778  : 			   if (ATR_INT_WORK0(a0) > 8)

  00aed	8b 87 24 01 00
	00		 mov	 eax, DWORD PTR [edi+292]
  00af3	83 c4 0c	 add	 esp, 12			; 0000000cH
  00af6	83 f8 08	 cmp	 eax, 8
  00af9	7f 22		 jg	 SHORT $LN112@damage_num

; 779  : 				   break;
; 780  : 			   sprintf_s(szMoji, "Âç∏‰∏ã %s Ë£ÖÂ§á", tempstr[ATR_INT_WORK0(a0)]);

  00afb	ff b4 85 d8 fb
	ff ff		 push	 DWORD PTR _tempstr$1[ebp+eax*4]
  00b02	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00b08	68 00 00 00 00	 push	 OFFSET ??_C@_09MFDBOBKF@?$DP?y?$LL?5?$CFs?5?$DP?$DP@
  00b0d	50		 push	 eax
  00b0e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00b13	83 c4 0c	 add	 esp, 12			; 0000000cH

; 781  : 			   d1_color = FONT_PAL_GREEN;
; 782  : 	}
; 783  : 		break;
; 784  : #endif
; 785  : #ifdef _PETSKILL_JUSTICE
; 786  : 	case 45:
; 787  : 	{
; 788  : 			   sprintf_s(szMoji, "ÂÆ°Âà§ %d ÂõûÂêà", ATR_INT_WORK0(a0));
; 789  : 			   d1 = FONT_PAL_GREEN;
; 790  : 	}
; 791  : 		break;
; 792  : #endif
; 793  : #ifdef _PETSKILL_ADDATTCRAZED
; 794  : 	case 46:
; 795  : 	{
; 796  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅø‰∏ãÈôç", ATR_INT_WORK0(a0));
; 797  : 			   d1 = FONT_PAL_GREEN;
; 798  : 	}
; 799  : 		break;
; 800  : 	case 47:
; 801  : 	{
; 802  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅøÂõûÂ§ç", ATR_INT_WORK0(a0));
; 803  : 			   d1 = FONT_PAL_GREEN;
; 804  : 	}
; 805  : 		break;
; 806  : #endif
; 807  : #ifdef _PETSKILL_PROVOKEFIGHT
; 808  : 	case 48:
; 809  : 	{
; 810  : 			   d1 = FONT_PAL_GREEN;
; 811  : 			   switch(ATR_INT_WORK0(a0)){
; 812  : 			   case 0:
; 813  : 				   sprintf_s(szMoji, "Âêº!", ATR_INT_WORK0(a0));
; 814  : 				   break;
; 815  : 			   case 1:
; 816  : 				   sprintf_s(szMoji, "ÂèóÂà∞ÊåëË°Ö!", ATR_INT_WORK0(a0));
; 817  : 				   break;
; 818  : 			   case 2:
; 819  : 				   sprintf_s(szMoji, "Ë¢´ÈªèÊ∂≤Èªè‰Ωè!", ATR_INT_WORK0(a0));
; 820  : 				   break;
; 821  : 			   case 3:
; 822  : 				   sprintf_s(szMoji, "ÊîªÂáªÊ¨°Êï∞ÂáèÂ∞ë!", ATR_INT_WORK0(a0));
; 823  : 				   break;
; 824  : 			   case 4:
; 825  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÖâ‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 826  : 				   break;
; 827  : 			   case 5:
; 828  : 				   sprintf_s(szMoji, "Âê∏Êî∂Èïú‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 829  : 				   break;
; 830  : 			   case 6:
; 831  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÆà‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 832  : 				   break;
; 833  : 			   case 7:
; 834  : 				   sprintf_s(szMoji, "ÂÖâ‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 835  : 				   break;
; 836  : 			   case 8:
; 837  : 				   sprintf_s(szMoji, "Èïú‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 838  : 				   break;
; 839  : 			   case 9:
; 840  : 				   sprintf_s(szMoji, "ÂÆà‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 841  : 				   break;
; 842  : 			   case 10:
; 843  : 				   sprintf_s(szMoji, "Ëß£Èô§ÈªèÊ∂≤ÊïàÊûú!", ATR_INT_WORK0(a0));
; 844  : 				   break;
; 845  : #ifdef _PRO3_ADDSKILL
; 846  : 			   case 11:
; 847  : 				   sprintf_s(szMoji, "Ëß£Èô§Ë£ÇÈ™®Êñ≠Á≠ã!");
; 848  : 				   break;
; 849  : 			   case 12:
; 850  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊØíÁ¥†‰πãÁΩë!");
; 851  : 				   break;
; 852  : 			   case 13:
; 853  : 				   sprintf_s(szMoji, "ÊØíÁ¥†‰πãÁΩëËß£Èô§!");
; 854  : 				   break;
; 855  : 			   case 14:
; 856  : 				   sprintf_s(szMoji, "ÊäöÊÖ∞ÂøÉÁÅµËß£Èô§!");
; 857  : 				   break;
; 858  : 			   case 15:
; 859  : 				   sprintf_s(szMoji, "Â∞ÅÂç∞ÈóáÁÅµÊ≥ïÊúØ!");
; 860  : 				   break;
; 861  : 			   case 16:
; 862  : 				   sprintf_s(szMoji, "ÂõûÂ§çÈóáÁÅµÊ≥ïÊúØ!");
; 863  : 				   break;
; 864  : 			   case 17:
; 865  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊÅ∂È≠îËØÖÂíí!");
; 866  : 				   break;
; 867  : 			   case 18:
; 868  : 				   sprintf_s(szMoji, "Ëß£Èô§ÊÅ∂È≠îËØÖÂíí!");
; 869  : 				   break;
; 870  : 			   case 19:
; 871  : 				   sprintf_s(szMoji, "ÂèóÂà∞‰∫ÜÊÉäÂêì!");
; 872  : 				   break;
; 873  : #endif
; 874  : 			   }
; 875  : 			   break;
; 876  : 	}
; 877  : #endif
; 878  : #ifdef _PRO3_ADDSKILL
; 879  : 	case 49: //ÊäöÊÖ∞ÂøÉÁÅµ
; 880  : 	{
; 881  : 				 sprintf_s(szMoji, "Âø†ËØöÂ∫¶ %d ", ATR_INT_WORK0(a0));
; 882  : 				 d1 = FONT_PAL_GREEN;
; 883  : 	}
; 884  : 		break;
; 885  : 	case 50: //ÈóáÁÅµÂ∞ÅÂç∞
; 886  : 	{
; 887  : 				 char *tempstr[] = { "", "ÁÅ´Â±±Ê≥â", "ÈíàÈíàÁõ∏ÂØπ", "‰∏ñÁïåÊú´Êó•", "ÂÜ∞ÁàÜÊúØ", "ÈôÑË∫´ÊúØ", "Âè¨Èõ∑ÊúØ", "Êö¥È£éÈõ®", "ÁîµÊµÅÊúØ", "ÁÅ´ÊòüÁêÉ",
; 888  : 					 "ÂóúË°ÄËõä", "ÂóúË°ÄÊàêÊÄß", "ÂÜ∞ÁÆ≠ÊúØ", "ÁÅ´ÈæôÊû™", "ÂÜ∞ÈïúÊúØ", "ÁÅ´ÈôÑ‰Ωì", "Èõ∑ÈôÑ‰Ωì", "ÂÜ∞ÈôÑ‰Ωì", "ÁÅ´ÁÜüÁªÉÂ∫¶", "Èõ∑ÁÜüÁªÉÂ∫¶", "ÂÜ∞ÁÜüÁªÉÂ∫¶", 
; 889  : 					 "ÁßªÂΩ¢Êç¢‰Ωç", "Êö¥Âáª", "ËøûÁéØÊîªÂáª", "ÂèåÈáçÊîªÂáª", "ÂõûÈÅø", "Êû™ÁÜüÁªÉÂ∫¶", "ÊñßÁÜüÁªÉÂ∫¶", "Ê£çÁÜüÁªÉÂ∫¶", "ÂºìÁÜüÁªÉÂ∫¶",
; 890  : 					 "Á≤æÈÄöÂõûÂäõÈïñ", "Á≤æÈÄöÊäïÊé∑Áü≥", "Á≤æÈÄöÊäïÊé∑Êñß", "Áä∂ÊÄÅÂõûÂ§ç", "ËàçÂ∑≤‰∏∫Âèã", "ÊøÄÂåñÊîªÂáª", "ËÉΩÈáèËÅöÈõÜ", "‰∏ìÊ≥®ÊàòÊñó", 
; 891  : 					 "ÁõæÂáª", "Ë¥ØÁ©øÊîªÂáª", "ÊøíÊ≠ªÊîªÂáª", "ÂõûÊóãÊîªÂáª", "Ê∑∑‰π±ÊîªÂáª", "‰∫åÂàÄÊµÅ", "ËøΩÂØªÊïåË∏™", "ÂõûÈÅøÊàòÊñó", "Ê†ëÊ†πÁº†Áªï", 
; 892  : 					 "Èô∑Èò±", "Â§©ÁΩóÂú∞ÁΩë", "Â∞∏‰ΩìÊé†Â§∫", "ÊØíÁ¥†Ê≠¶Âô®", "Âº±ÁÇπÊîªÂáª", "ÊåëÊã®", "Ê†ºÊ°£", "Â∫ßÈ™ëÊîªÂáª", "Âä†Â∑•", "È©ØÊúçÂÆ†Áâ©", "ÊøÄÊÄíÂÆ†Áâ©", 
; 893  : 					 "Ëá™ÁªôËá™Ë∂≥", "Èõ∑ÊäóÊÄß", "ÁÅ´ÊäóÊÄß", "ÂÜ∞ÊäóÊÄß", "ÈÅóÂøò", "Ëá™ÊàëÂº∫Âåñ", "Ê∞îÂäõÂÖÖÊ≤õ", "Ë¥üÈáçÂ¢ûÂä†", "Ëá™ÁÑ∂Â®ÅËÉΩ", "Âè∑Âè¨Ëá™ÁÑ∂", 
; 894  : 					 "Âú∞ÁªìÁïå", "Ê∞¥ÁªìÁïå", "ÁÅ´ÁªìÁïå", "È£éÁªìÁïå", "Á†¥Èô§ÁªìÁïå", "ËØ±Êïå", "ÈáéÊÄßÂæÅÊúç", 
; 895  : 					 "ÂõõÊñπÈò≤Âæ°", "Ë£ÇÈ™®Êñ≠Á≠ã", "ÊàòÁãºÊÄíÂêº", "ÊñóÊ∞îÂØºÂºï", 
; 896  : 					 "È≠îÂäõÂííÂç∞", "ÊÅ∂È≠îËØÖÂíí", "Á•ûÁÅµ‰πãËµê", "Â§öÈáçÂÜ∞ÁÆ≠", 
; 897  : 					 "Â§öÈáçÂÜ∞ÁÆ≠", "ÊØíÁ¥†‰πãÁΩë", "ÊäöÊÖ∞ÂøÉÁÅµ", 
; 898  : 					 "ÊàòÂú∫ÊÄ•Êïë", "Âà∂ËçØÂ≠¶" };
; 899  : 				 memset(szMoji, 0, sizeof(szMoji));
; 900  : 				 sprintf_s(szMoji, "%s Ë¢´Â∞ÅÂç∞", tempstr[ATR_INT_WORK0(a0)]);
; 901  : 				 d1 = FONT_PAL_GREEN;
; 902  : 	}
; 903  : 		break;
; 904  : 	case 51:
; 905  : 	{
; 906  : 			   sprintf_s(szMoji, "Êîª‰∏ãÈôç%d", ATR_INT_WORK0(a0) );
; 907  : 			   d1 = FONT_PAL_GREEN;
; 908  : 	}
; 909  : 		break;
; 910  : #endif
; 911  : 	}
; 912  : 
; 913  : 	switch (ATR_INT_WORK1(a0))

  00b16	bf 05 00 00 00	 mov	 edi, 5
  00b1b	eb 06		 jmp	 SHORT $LN6@damage_num
$LN112@damage_num:

; 430  : 			return;
; 431  : 		}
; 432  : 	}
; 433  : 
; 434  : 	switch (ATR_INT_WORK1(a0))

  00b1d	8b bd d4 fb ff
	ff		 mov	 edi, DWORD PTR _d1_color$[ebp]
$LN6@damage_num:

; 781  : 			   d1_color = FONT_PAL_GREEN;
; 782  : 	}
; 783  : 		break;
; 784  : #endif
; 785  : #ifdef _PETSKILL_JUSTICE
; 786  : 	case 45:
; 787  : 	{
; 788  : 			   sprintf_s(szMoji, "ÂÆ°Âà§ %d ÂõûÂêà", ATR_INT_WORK0(a0));
; 789  : 			   d1 = FONT_PAL_GREEN;
; 790  : 	}
; 791  : 		break;
; 792  : #endif
; 793  : #ifdef _PETSKILL_ADDATTCRAZED
; 794  : 	case 46:
; 795  : 	{
; 796  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅø‰∏ãÈôç", ATR_INT_WORK0(a0));
; 797  : 			   d1 = FONT_PAL_GREEN;
; 798  : 	}
; 799  : 		break;
; 800  : 	case 47:
; 801  : 	{
; 802  : 			   sprintf_s(szMoji, "ÊïèÊç∑ÂõûÈÅøÂõûÂ§ç", ATR_INT_WORK0(a0));
; 803  : 			   d1 = FONT_PAL_GREEN;
; 804  : 	}
; 805  : 		break;
; 806  : #endif
; 807  : #ifdef _PETSKILL_PROVOKEFIGHT
; 808  : 	case 48:
; 809  : 	{
; 810  : 			   d1 = FONT_PAL_GREEN;
; 811  : 			   switch(ATR_INT_WORK0(a0)){
; 812  : 			   case 0:
; 813  : 				   sprintf_s(szMoji, "Âêº!", ATR_INT_WORK0(a0));
; 814  : 				   break;
; 815  : 			   case 1:
; 816  : 				   sprintf_s(szMoji, "ÂèóÂà∞ÊåëË°Ö!", ATR_INT_WORK0(a0));
; 817  : 				   break;
; 818  : 			   case 2:
; 819  : 				   sprintf_s(szMoji, "Ë¢´ÈªèÊ∂≤Èªè‰Ωè!", ATR_INT_WORK0(a0));
; 820  : 				   break;
; 821  : 			   case 3:
; 822  : 				   sprintf_s(szMoji, "ÊîªÂáªÊ¨°Êï∞ÂáèÂ∞ë!", ATR_INT_WORK0(a0));
; 823  : 				   break;
; 824  : 			   case 4:
; 825  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÖâ‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 826  : 				   break;
; 827  : 			   case 5:
; 828  : 				   sprintf_s(szMoji, "Âê∏Êî∂Èïú‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 829  : 				   break;
; 830  : 			   case 6:
; 831  : 				   sprintf_s(szMoji, "Âê∏Êî∂ÂÆà‰πãÁ≤æÁÅµ", ATR_INT_WORK0(a0));
; 832  : 				   break;
; 833  : 			   case 7:
; 834  : 				   sprintf_s(szMoji, "ÂÖâ‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 835  : 				   break;
; 836  : 			   case 8:
; 837  : 				   sprintf_s(szMoji, "Èïú‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 838  : 				   break;
; 839  : 			   case 9:
; 840  : 				   sprintf_s(szMoji, "ÂÆà‰πãÁ≤æÁÅµÂ§±Êïà", ATR_INT_WORK0(a0));
; 841  : 				   break;
; 842  : 			   case 10:
; 843  : 				   sprintf_s(szMoji, "Ëß£Èô§ÈªèÊ∂≤ÊïàÊûú!", ATR_INT_WORK0(a0));
; 844  : 				   break;
; 845  : #ifdef _PRO3_ADDSKILL
; 846  : 			   case 11:
; 847  : 				   sprintf_s(szMoji, "Ëß£Èô§Ë£ÇÈ™®Êñ≠Á≠ã!");
; 848  : 				   break;
; 849  : 			   case 12:
; 850  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊØíÁ¥†‰πãÁΩë!");
; 851  : 				   break;
; 852  : 			   case 13:
; 853  : 				   sprintf_s(szMoji, "ÊØíÁ¥†‰πãÁΩëËß£Èô§!");
; 854  : 				   break;
; 855  : 			   case 14:
; 856  : 				   sprintf_s(szMoji, "ÊäöÊÖ∞ÂøÉÁÅµËß£Èô§!");
; 857  : 				   break;
; 858  : 			   case 15:
; 859  : 				   sprintf_s(szMoji, "Â∞ÅÂç∞ÈóáÁÅµÊ≥ïÊúØ!");
; 860  : 				   break;
; 861  : 			   case 16:
; 862  : 				   sprintf_s(szMoji, "ÂõûÂ§çÈóáÁÅµÊ≥ïÊúØ!");
; 863  : 				   break;
; 864  : 			   case 17:
; 865  : 				   sprintf_s(szMoji, "‰∏≠‰∫ÜÊÅ∂È≠îËØÖÂíí!");
; 866  : 				   break;
; 867  : 			   case 18:
; 868  : 				   sprintf_s(szMoji, "Ëß£Èô§ÊÅ∂È≠îËØÖÂíí!");
; 869  : 				   break;
; 870  : 			   case 19:
; 871  : 				   sprintf_s(szMoji, "ÂèóÂà∞‰∫ÜÊÉäÂêì!");
; 872  : 				   break;
; 873  : #endif
; 874  : 			   }
; 875  : 			   break;
; 876  : 	}
; 877  : #endif
; 878  : #ifdef _PRO3_ADDSKILL
; 879  : 	case 49: //ÊäöÊÖ∞ÂøÉÁÅµ
; 880  : 	{
; 881  : 				 sprintf_s(szMoji, "Âø†ËØöÂ∫¶ %d ", ATR_INT_WORK0(a0));
; 882  : 				 d1 = FONT_PAL_GREEN;
; 883  : 	}
; 884  : 		break;
; 885  : 	case 50: //ÈóáÁÅµÂ∞ÅÂç∞
; 886  : 	{
; 887  : 				 char *tempstr[] = { "", "ÁÅ´Â±±Ê≥â", "ÈíàÈíàÁõ∏ÂØπ", "‰∏ñÁïåÊú´Êó•", "ÂÜ∞ÁàÜÊúØ", "ÈôÑË∫´ÊúØ", "Âè¨Èõ∑ÊúØ", "Êö¥È£éÈõ®", "ÁîµÊµÅÊúØ", "ÁÅ´ÊòüÁêÉ",
; 888  : 					 "ÂóúË°ÄËõä", "ÂóúË°ÄÊàêÊÄß", "ÂÜ∞ÁÆ≠ÊúØ", "ÁÅ´ÈæôÊû™", "ÂÜ∞ÈïúÊúØ", "ÁÅ´ÈôÑ‰Ωì", "Èõ∑ÈôÑ‰Ωì", "ÂÜ∞ÈôÑ‰Ωì", "ÁÅ´ÁÜüÁªÉÂ∫¶", "Èõ∑ÁÜüÁªÉÂ∫¶", "ÂÜ∞ÁÜüÁªÉÂ∫¶", 
; 889  : 					 "ÁßªÂΩ¢Êç¢‰Ωç", "Êö¥Âáª", "ËøûÁéØÊîªÂáª", "ÂèåÈáçÊîªÂáª", "ÂõûÈÅø", "Êû™ÁÜüÁªÉÂ∫¶", "ÊñßÁÜüÁªÉÂ∫¶", "Ê£çÁÜüÁªÉÂ∫¶", "ÂºìÁÜüÁªÉÂ∫¶",
; 890  : 					 "Á≤æÈÄöÂõûÂäõÈïñ", "Á≤æÈÄöÊäïÊé∑Áü≥", "Á≤æÈÄöÊäïÊé∑Êñß", "Áä∂ÊÄÅÂõûÂ§ç", "ËàçÂ∑≤‰∏∫Âèã", "ÊøÄÂåñÊîªÂáª", "ËÉΩÈáèËÅöÈõÜ", "‰∏ìÊ≥®ÊàòÊñó", 
; 891  : 					 "ÁõæÂáª", "Ë¥ØÁ©øÊîªÂáª", "ÊøíÊ≠ªÊîªÂáª", "ÂõûÊóãÊîªÂáª", "Ê∑∑‰π±ÊîªÂáª", "‰∫åÂàÄÊµÅ", "ËøΩÂØªÊïåË∏™", "ÂõûÈÅøÊàòÊñó", "Ê†ëÊ†πÁº†Áªï", 
; 892  : 					 "Èô∑Èò±", "Â§©ÁΩóÂú∞ÁΩë", "Â∞∏‰ΩìÊé†Â§∫", "ÊØíÁ¥†Ê≠¶Âô®", "Âº±ÁÇπÊîªÂáª", "ÊåëÊã®", "Ê†ºÊ°£", "Â∫ßÈ™ëÊîªÂáª", "Âä†Â∑•", "È©ØÊúçÂÆ†Áâ©", "ÊøÄÊÄíÂÆ†Áâ©", 
; 893  : 					 "Ëá™ÁªôËá™Ë∂≥", "Èõ∑ÊäóÊÄß", "ÁÅ´ÊäóÊÄß", "ÂÜ∞ÊäóÊÄß", "ÈÅóÂøò", "Ëá™ÊàëÂº∫Âåñ", "Ê∞îÂäõÂÖÖÊ≤õ", "Ë¥üÈáçÂ¢ûÂä†", "Ëá™ÁÑ∂Â®ÅËÉΩ", "Âè∑Âè¨Ëá™ÁÑ∂", 
; 894  : 					 "Âú∞ÁªìÁïå", "Ê∞¥ÁªìÁïå", "ÁÅ´ÁªìÁïå", "È£éÁªìÁïå", "Á†¥Èô§ÁªìÁïå", "ËØ±Êïå", "ÈáéÊÄßÂæÅÊúç", 
; 895  : 					 "ÂõõÊñπÈò≤Âæ°", "Ë£ÇÈ™®Êñ≠Á≠ã", "ÊàòÁãºÊÄíÂêº", "ÊñóÊ∞îÂØºÂºï", 
; 896  : 					 "È≠îÂäõÂííÂç∞", "ÊÅ∂È≠îËØÖÂíí", "Á•ûÁÅµ‰πãËµê", "Â§öÈáçÂÜ∞ÁÆ≠", 
; 897  : 					 "Â§öÈáçÂÜ∞ÁÆ≠", "ÊØíÁ¥†‰πãÁΩë", "ÊäöÊÖ∞ÂøÉÁÅµ", 
; 898  : 					 "ÊàòÂú∫ÊÄ•Êïë", "Âà∂ËçØÂ≠¶" };
; 899  : 				 memset(szMoji, 0, sizeof(szMoji));
; 900  : 				 sprintf_s(szMoji, "%s Ë¢´Â∞ÅÂç∞", tempstr[ATR_INT_WORK0(a0)]);
; 901  : 				 d1 = FONT_PAL_GREEN;
; 902  : 	}
; 903  : 		break;
; 904  : 	case 51:
; 905  : 	{
; 906  : 			   sprintf_s(szMoji, "Êîª‰∏ãÈôç%d", ATR_INT_WORK0(a0) );
; 907  : 			   d1 = FONT_PAL_GREEN;
; 908  : 	}
; 909  : 		break;
; 910  : #endif
; 911  : 	}
; 912  : 
; 913  : 	switch (ATR_INT_WORK1(a0))

  00b23	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00b26	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  00b2c	83 c0 fa	 add	 eax, -6			; fffffffaH
  00b2f	83 f8 26	 cmp	 eax, 38			; 00000026H
  00b32	0f 87 88 01 00
	00		 ja	 $LN104@damage_num
  00b38	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN110@damage_num[eax]
  00b3f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN111@damage_num[eax*4]
$LN95@damage_num:

; 914  : 	{
; 915  : 	case 36:	//andy_add ÂõûÂêàË°•Ë°Ä
; 916  : 		if (ATR_RIDE_FLAG(a0) == 1)

  00b46	83 b9 2c 02 00
	00 01		 cmp	 DWORD PTR [ecx+556], 1
  00b4d	75 22		 jne	 SHORT $LN96@damage_num

; 917  : 			StockFontBuffer(ATR_H_POS(a0) - 20, ATR_V_POS(a0) + 32, FONT_PRIO_BACK, d1_color, szMojiP, 0);

  00b4f	6a 00		 push	 0
  00b51	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  00b57	50		 push	 eax
  00b58	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00b5b	57		 push	 edi
  00b5c	83 c0 20	 add	 eax, 32			; 00000020H
  00b5f	6a 00		 push	 0
  00b61	50		 push	 eax
  00b62	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00b65	83 e8 14	 sub	 eax, 20			; 00000014H
  00b68	50		 push	 eax
  00b69	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00b6e	83 c4 18	 add	 esp, 24			; 00000018H
$LN96@damage_num:

; 918  : 	case 37:
; 919  : 	case 38:
; 920  : 	case 39:
; 921  : 	case 40:
; 922  : #ifdef _SKILL_ADDBARRIER
; 923  : 	case 43:
; 924  : #endif
; 925  : #ifdef _PETSKILL_PEEL
; 926  : 	case 44:
; 927  : #endif
; 928  : #ifdef _PETSKILL_JUSTICE
; 929  : 	case 45:
; 930  : #endif
; 931  : #ifdef _PETSKILL_ADDATTCRAZED
; 932  : 	case 46:
; 933  : 	case 47:
; 934  : #endif
; 935  : #ifdef _PETSKILL_PROVOKEFIGHT
; 936  : 	case 48:
; 937  : #endif
; 938  : #ifdef _PRO3_ADDSKILL
; 939  : 	case 49:
; 940  : 	case 50:
; 941  : 	case 51:
; 942  : #endif
; 943  : 		StockFontBuffer(ATR_H_POS(a0) - 20, ATR_V_POS(a0), FONT_PRIO_BACK, d1_color, szMoji, 0);

  00b71	6a 00		 push	 0
  00b73	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00b79	50		 push	 eax
  00b7a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00b7d	57		 push	 edi
  00b7e	6a 00		 push	 0
  00b80	ff 76 1c	 push	 DWORD PTR [esi+28]
  00b83	83 e8 14	 sub	 eax, 20			; 00000014H
  00b86	50		 push	 eax
  00b87	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 944  : 		if (ATR_MPDAMAGE(a0) != 0)

  00b8c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00b8f	83 c4 18	 add	 esp, 24			; 00000018H
  00b92	83 b8 30 02 00
	00 00		 cmp	 DWORD PTR [eax+560], 0
  00b99	0f 84 2e 01 00
	00		 je	 $LN113@damage_num

; 945  : 			StockFontBuffer(ATR_H_POS(a0) - 20, ATR_V_POS(a0) + 12, FONT_PRIO_BACK, d2, szMojMp, 0);

  00b9f	6a 00		 push	 0
  00ba1	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _szMojMp$[ebp]
  00ba7	50		 push	 eax
  00ba8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00bab	53		 push	 ebx
  00bac	83 c0 0c	 add	 eax, 12			; 0000000cH
  00baf	6a 00		 push	 0
  00bb1	50		 push	 eax
  00bb2	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00bb5	83 e8 14	 sub	 eax, 20			; 00000014H
  00bb8	50		 push	 eax
  00bb9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00bbe	83 c4 18	 add	 esp, 24			; 00000018H
  00bc1	5f		 pop	 edi
  00bc2	5e		 pop	 esi

; 970  : 	}
; 971  : }

  00bc3	5b		 pop	 ebx
  00bc4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bc7	33 cd		 xor	 ecx, ebp
  00bc9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bce	8b e5		 mov	 esp, ebp
  00bd0	5d		 pop	 ebp
  00bd1	c3		 ret	 0
$LN99@damage_num:

; 946  : 		break;
; 947  : 	case 6:
; 948  : 	case 14:
; 949  : 	case 15:
; 950  : 	case 16:
; 951  : 		//andy_mp
; 952  : 		if (ATR_ADDHPFLG(a0) == 1)//ÂóúË°ÄÊäÄ

  00bd2	83 b9 3c 02 00
	00 01		 cmp	 DWORD PTR [ecx+572], 1
  00bd9	75 33		 jne	 SHORT $LN100@damage_num

; 953  : 		{
; 954  : 			StockFontBuffer(ATR_H_POS(a0) - d0, ATR_V_POS(a0), FONT_PRIO_BACK, FONT_PAL_GREEN, szMojHp, 0);

  00bdb	6a 00		 push	 0
  00bdd	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szMojHp$[ebp]
  00be3	50		 push	 eax
  00be4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00be7	2b 85 d4 fb ff
	ff		 sub	 eax, DWORD PTR _d0$1$[ebp]
  00bed	6a 05		 push	 5
  00bef	6a 00		 push	 0
  00bf1	ff 76 1c	 push	 DWORD PTR [esi+28]
  00bf4	50		 push	 eax
  00bf5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00bfa	83 c4 18	 add	 esp, 24			; 00000018H
  00bfd	5f		 pop	 edi
  00bfe	5e		 pop	 esi

; 970  : 	}
; 971  : }

  00bff	5b		 pop	 ebx
  00c00	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c03	33 cd		 xor	 ecx, ebp
  00c05	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c0a	8b e5		 mov	 esp, ebp
  00c0c	5d		 pop	 ebp
  00c0d	c3		 ret	 0
$LN100@damage_num:

; 955  : 			break;
; 956  : 		}
; 957  : 		d0 = GetStrWidth(szMoji) >> 1;

  00c0e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00c14	50		 push	 eax
  00c15	e8 00 00 00 00	 call	 ?GetStrWidth@@YAHPAD@Z	; GetStrWidth
  00c1a	8b d8		 mov	 ebx, eax

; 958  : 		StockFontBuffer(ATR_H_POS(a0) - d0, ATR_V_POS(a0), FONT_PRIO_BACK, d1_color, szMoji, 0);

  00c1c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szMoji$[ebp]
  00c22	6a 00		 push	 0
  00c24	50		 push	 eax
  00c25	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00c28	57		 push	 edi
  00c29	6a 00		 push	 0
  00c2b	ff 76 1c	 push	 DWORD PTR [esi+28]
  00c2e	d1 fb		 sar	 ebx, 1
  00c30	2b c3		 sub	 eax, ebx
  00c32	50		 push	 eax
  00c33	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 959  : 
; 960  : 		if (ATR_MPDAMAGE(a0) != 0 || ATR_MPDFLG(a0) == 1)//‰º§ÂÆ≥

  00c38	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00c3b	83 c4 1c	 add	 esp, 28			; 0000001cH
  00c3e	83 b8 30 02 00
	00 00		 cmp	 DWORD PTR [eax+560], 0
  00c45	75 09		 jne	 SHORT $LN102@damage_num
  00c47	83 b8 38 02 00
	00 01		 cmp	 DWORD PTR [eax+568], 1
  00c4e	75 25		 jne	 SHORT $LN101@damage_num
$LN102@damage_num:

; 961  : 			StockFontBuffer(ATR_H_POS(a0) - d0, ATR_V_POS(a0) + 12, FONT_PRIO_BACK, FONT_PAL_YELLOW, szMojMp, 0);

  00c50	6a 00		 push	 0
  00c52	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _szMojMp$[ebp]
  00c58	50		 push	 eax
  00c59	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00c5c	6a 04		 push	 4
  00c5e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00c61	6a 00		 push	 0
  00c63	50		 push	 eax
  00c64	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00c67	2b c3		 sub	 eax, ebx
  00c69	50		 push	 eax
  00c6a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00c6f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00c72	83 c4 18	 add	 esp, 24			; 00000018H
$LN101@damage_num:

; 962  : 		if (ATR_RIDE_FLAG(a0) == 1)

  00c75	83 b8 2c 02 00
	00 01		 cmp	 DWORD PTR [eax+556], 1
  00c7c	75 4f		 jne	 SHORT $LN113@damage_num

; 963  : 		{
; 964  : 			dx = GetStrWidth(szMojiP) >> 1;

  00c7e	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  00c84	50		 push	 eax
  00c85	e8 00 00 00 00	 call	 ?GetStrWidth@@YAHPAD@Z	; GetStrWidth

; 965  : 			StockFontBuffer(ATR_H_POS(a0) - dx, ATR_V_POS(a0) + 60, FONT_PRIO_BACK, d1_color, szMojiP, 0);

  00c8a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00c8d	8b d0		 mov	 edx, eax
  00c8f	6a 00		 push	 0
  00c91	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szMojiP$[ebp]
  00c97	d1 fa		 sar	 edx, 1
  00c99	50		 push	 eax
  00c9a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00c9d	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00ca0	57		 push	 edi
  00ca1	6a 00		 push	 0
  00ca3	51		 push	 ecx
  00ca4	2b c2		 sub	 eax, edx
  00ca6	50		 push	 eax
  00ca7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00cac	83 c4 1c	 add	 esp, 28			; 0000001cH
  00caf	5f		 pop	 edi
  00cb0	5e		 pop	 esi

; 970  : 	}
; 971  : }

  00cb1	5b		 pop	 ebx
  00cb2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00cb5	33 cd		 xor	 ecx, ebp
  00cb7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00cbc	8b e5		 mov	 esp, ebp
  00cbe	5d		 pop	 ebp
  00cbf	c3		 ret	 0
$LN104@damage_num:

; 966  : 		}
; 967  : 		break;
; 968  : 	default:
; 969  : 		pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP);

  00cc0	6a 01		 push	 1
  00cc2	6a 00		 push	 0
  00cc4	56		 push	 esi
  00cc5	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00cca	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN113@damage_num:

; 970  : 	}
; 971  : }

  00ccd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00cd0	5f		 pop	 edi
  00cd1	5e		 pop	 esi
  00cd2	33 cd		 xor	 ecx, ebp
  00cd4	5b		 pop	 ebx
  00cd5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00cda	8b e5		 mov	 esp, ebp
  00cdc	5d		 pop	 ebp
  00cdd	c3		 ret	 0
  00cde	66 90		 npad	 2
$LN108@damage_num:
  00ce0	00 00 00 00	 DD	 $LN13@damage_num
  00ce4	00 00 00 00	 DD	 $LN2@damage_num
$LN107@damage_num:
  00ce8	00		 DB	 0
  00ce9	01		 DB	 1
  00cea	01		 DB	 1
  00ceb	01		 DB	 1
  00cec	01		 DB	 1
  00ced	01		 DB	 1
  00cee	00		 DB	 0
  00cef	01		 DB	 1
  00cf0	01		 DB	 1
  00cf1	01		 DB	 1
  00cf2	01		 DB	 1
  00cf3	01		 DB	 1
  00cf4	01		 DB	 1
  00cf5	01		 DB	 1
  00cf6	00		 DB	 0
  00cf7	00		 DB	 0
  00cf8	00		 DB	 0
  00cf9	01		 DB	 1
  00cfa	01		 DB	 1
  00cfb	01		 DB	 1
  00cfc	01		 DB	 1
  00cfd	01		 DB	 1
  00cfe	01		 DB	 1
  00cff	01		 DB	 1
  00d00	01		 DB	 1
  00d01	01		 DB	 1
  00d02	01		 DB	 1
  00d03	01		 DB	 1
  00d04	01		 DB	 1
  00d05	01		 DB	 1
  00d06	01		 DB	 1
  00d07	01		 DB	 1
  00d08	01		 DB	 1
  00d09	01		 DB	 1
  00d0a	01		 DB	 1
  00d0b	01		 DB	 1
  00d0c	00		 DB	 0
  00d0d	00		 DB	 0
  00d0e	00		 DB	 0
  00d0f	00		 DB	 0
  00d10	00		 DB	 0
  00d11	01		 DB	 1
  00d12	01		 DB	 1
  00d13	00		 DB	 0
  00d14	00		 DB	 0
  00d15	0f 1f 00	 npad	 3
$LN109@damage_num:
  00d18	00 00 00 00	 DD	 $LN20@damage_num
  00d1c	00 00 00 00	 DD	 $LN21@damage_num
  00d20	00 00 00 00	 DD	 $LN112@damage_num
  00d24	00 00 00 00	 DD	 $LN22@damage_num
  00d28	00 00 00 00	 DD	 $LN112@damage_num
  00d2c	00 00 00 00	 DD	 $LN23@damage_num
  00d30	00 00 00 00	 DD	 $LN24@damage_num
  00d34	00 00 00 00	 DD	 $LN27@damage_num
  00d38	00 00 00 00	 DD	 $LN28@damage_num
  00d3c	00 00 00 00	 DD	 $LN29@damage_num
  00d40	00 00 00 00	 DD	 $LN30@damage_num
  00d44	00 00 00 00	 DD	 $LN31@damage_num
  00d48	00 00 00 00	 DD	 $LN32@damage_num
  00d4c	00 00 00 00	 DD	 $LN33@damage_num
  00d50	00 00 00 00	 DD	 $LN34@damage_num
  00d54	00 00 00 00	 DD	 $LN35@damage_num
  00d58	00 00 00 00	 DD	 $LN36@damage_num
  00d5c	00 00 00 00	 DD	 $LN37@damage_num
  00d60	00 00 00 00	 DD	 $LN38@damage_num
  00d64	00 00 00 00	 DD	 $LN39@damage_num
  00d68	00 00 00 00	 DD	 $LN40@damage_num
  00d6c	00 00 00 00	 DD	 $LN112@damage_num
  00d70	00 00 00 00	 DD	 $LN41@damage_num
  00d74	00 00 00 00	 DD	 $LN42@damage_num
  00d78	00 00 00 00	 DD	 $LN112@damage_num
  00d7c	00 00 00 00	 DD	 $LN43@damage_num
  00d80	00 00 00 00	 DD	 $LN44@damage_num
  00d84	00 00 00 00	 DD	 $LN45@damage_num
  00d88	00 00 00 00	 DD	 $LN46@damage_num
  00d8c	00 00 00 00	 DD	 $LN47@damage_num
  00d90	00 00 00 00	 DD	 $LN48@damage_num
  00d94	00 00 00 00	 DD	 $LN49@damage_num
  00d98	00 00 00 00	 DD	 $LN50@damage_num
  00d9c	00 00 00 00	 DD	 $LN51@damage_num
  00da0	00 00 00 00	 DD	 $LN52@damage_num
  00da4	00 00 00 00	 DD	 $LN53@damage_num
  00da8	00 00 00 00	 DD	 $LN54@damage_num
  00dac	00 00 00 00	 DD	 $LN57@damage_num
  00db0	00 00 00 00	 DD	 $LN58@damage_num
  00db4	00 00 00 00	 DD	 $LN59@damage_num
  00db8	00 00 00 00	 DD	 $LN60@damage_num
  00dbc	00 00 00 00	 DD	 $LN61@damage_num
  00dc0	00 00 00 00	 DD	 $LN22@damage_num
  00dc4	00 00 00 00	 DD	 $LN90@damage_num
  00dc8	00 00 00 00	 DD	 $LN93@damage_num
$LN111@damage_num:
  00dcc	00 00 00 00	 DD	 $LN99@damage_num
  00dd0	00 00 00 00	 DD	 $LN95@damage_num
  00dd4	00 00 00 00	 DD	 $LN96@damage_num
  00dd8	00 00 00 00	 DD	 $LN104@damage_num
$LN110@damage_num:
  00ddc	00		 DB	 0
  00ddd	03		 DB	 3
  00dde	03		 DB	 3
  00ddf	03		 DB	 3
  00de0	03		 DB	 3
  00de1	03		 DB	 3
  00de2	03		 DB	 3
  00de3	03		 DB	 3
  00de4	00		 DB	 0
  00de5	00		 DB	 0
  00de6	00		 DB	 0
  00de7	03		 DB	 3
  00de8	03		 DB	 3
  00de9	03		 DB	 3
  00dea	03		 DB	 3
  00deb	03		 DB	 3
  00dec	03		 DB	 3
  00ded	03		 DB	 3
  00dee	03		 DB	 3
  00def	03		 DB	 3
  00df0	03		 DB	 3
  00df1	03		 DB	 3
  00df2	03		 DB	 3
  00df3	03		 DB	 3
  00df4	03		 DB	 3
  00df5	03		 DB	 3
  00df6	03		 DB	 3
  00df7	03		 DB	 3
  00df8	03		 DB	 3
  00df9	03		 DB	 3
  00dfa	01		 DB	 1
  00dfb	02		 DB	 2
  00dfc	02		 DB	 2
  00dfd	02		 DB	 2
  00dfe	02		 DB	 2
  00dff	03		 DB	 3
  00e00	03		 DB	 3
  00e01	02		 DB	 2
  00e02	02		 DB	 2
?damage_num@@YAXPAUaction@@@Z ENDP			; damage_num
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?kakushi_command@@YAXXZ
_TEXT	SEGMENT
?kakushi_command@@YAXXZ PROC				; kakushi_command, COMDAT

; 340  : 	//??????
; 341  : 	if (LowResoCmdFlag)		// ??ÓôöÓüâ????????

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?LowResoCmdFlag@@3HA, 0 ; LowResoCmdFlag
  00007	75 32		 jne	 SHORT $LN3@kakushi_co

; 342  : 		return;
; 343  : 	//Óöº?Óíï???
; 344  : 	if ((joy_con[0] & JOY_LEFT) && (joy_con[0] & JOY_RIGHT))

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?joy_con@@3PAKA
  0000e	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00013	3d 00 c0 00 00	 cmp	 eax, 49152		; 0000c000H
  00018	75 21		 jne	 SHORT $LN3@kakushi_co

; 345  : 	{
; 346  : 		LowResoCmdFlag = 1;		// ??ÓôöÓüâ??????????
; 347  : 		//???????
; 348  : 		play_se(211, 320, 240);

  0001a	68 f0 00 00 00	 push	 240			; 000000f0H
  0001f	68 40 01 00 00	 push	 320			; 00000140H
  00024	68 d3 00 00 00	 push	 211			; 000000d3H
  00029	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?LowResoCmdFlag@@3HA, 1 ; LowResoCmdFlag
  00033	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@kakushi_co:

; 349  : 	}
; 350  : }

  0003b	c3		 ret	 0
?kakushi_command@@YAXXZ ENDP				; kakushi_command
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?SetDisplayAttackEffect@@YAXPAUaction@@H@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
_iEffectNumber$ = 12					; size = 4
?SetDisplayAttackEffect@@YAXPAUaction@@H@Z PROC		; SetDisplayAttackEffect, COMDAT

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 324  : 	ACTION *a1, *a2;
; 325  : 
; 326  : 	a2 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));	// Âª∫Á´ãÊñ∞ÁöÑ ACTION (ÊîªÂáªÊó∂ÁâπÊïà)

  00003	68 60 02 00 00	 push	 608			; 00000260H
  00008	6a 47		 push	 71			; 00000047H
  0000a	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0000f	8b d0		 mov	 edx, eax
  00011	83 c4 08	 add	 esp, 8

; 327  : 	if (a2 == NULL)

  00014	85 d2		 test	 edx, edx
  00016	74 2d		 je	 SHORT $LN1@SetDisplay

; 328  : 		return;
; 329  : 	ATR_NAME(a2) = DisplayAttackEffect;
; 330  : 	ATR_CHR_NO(a2) = iEffectNumber;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _iEffectNumber$[ebp]
  0001b	89 8a 44 01 00
	00		 mov	 DWORD PTR [edx+324], ecx

; 331  : 	a1 = ATR_BODY_WORK(0, a0);							// ÂèñÂá∫Ë¢´ÊîªÂáªÊñπ

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _a0$[ebp]
  00024	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?DisplayAttackEffect@@YAXPAUaction@@@Z ; DisplayAttackEffect
  0002b	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0002e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 332  : 	ATR_DISP_PRIO(a2) = ATR_DISP_PRIO(a1) + 1;			// ÊòæÁ§∫Âú®Ë¢´ÊîªÂáªÊñπÂõæÁöÑ‰∏äÂ±Ç

  00031	8a 41 15	 mov	 al, BYTE PTR [ecx+21]
  00034	fe c0		 inc	 al
  00036	88 42 15	 mov	 BYTE PTR [edx+21], al

; 333  : 	ATR_H_POS(a2) = ATR_H_POS(a1);						// ÊòæÁ§∫Âú®Ë¢´ÊîªÂáªÊñπÁöÑ‰ΩçÁΩÆ‰∏ä

  00039	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0003c	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 334  : 	ATR_V_POS(a2) = ATR_V_POS(a1);

  0003f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00042	89 42 1c	 mov	 DWORD PTR [edx+28], eax
$LN1@SetDisplay:

; 335  : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?SetDisplayAttackEffect@@YAXPAUaction@@H@Z ENDP		; SetDisplayAttackEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?DisplayAttackEffect@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?DisplayAttackEffect@@YAXPAUaction@@@Z PROC		; DisplayAttackEffect, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 318  : 	if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  00003	6a 01		 push	 1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR _a0$[ebp]
  0000a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00012	85 c0		 test	 eax, eax
  00014	74 06		 je	 SHORT $LN2@DisplayAtt

; 320  : }

  00016	5d		 pop	 ebp

; 319  : 		DeathAction(a0);

  00017	e9 00 00 00 00	 jmp	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
$LN2@DisplayAtt:

; 320  : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?DisplayAttackEffect@@YAXPAUaction@@@Z ENDP		; DisplayAttackEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?RunTimeMagicBoundary@@YAXH@Z
_TEXT	SEGMENT
_state$ = 8						; size = 4
?RunTimeMagicBoundary@@YAXH@Z PROC			; RunTimeMagicBoundary, COMDAT

; 4851 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4852 : 	int stateno[] = { 101774, 101797};
; 4853 : 
; 4854 : 	if (!g_bUseAlpha)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, 0 ; g_bUseAlpha
  0000a	ba 8e 8d 01 00	 mov	 edx, 101774		; 00018d8eH
  0000f	8d 4a 17	 lea	 ecx, DWORD PTR [edx+23]
  00012	75 06		 jne	 SHORT $LN2@RunTimeMag

; 4855 : 	{
; 4856 : 		stateno[0] = 101829;

  00014	8d 51 20	 lea	 edx, DWORD PTR [ecx+32]

; 4857 : 		stateno[1] = 101852;

  00017	8d 4a 17	 lea	 ecx, DWORD PTR [edx+23]
$LN2@RunTimeMag:

; 4858 : 	}
; 4859 : 	if (boundary_2 == NULL && state >= stateno[0] && state <= stateno[1])

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?boundary_2@@3PAUaction@@A, 0 ; boundary_2
  00021	75 48		 jne	 SHORT $LN3@RunTimeMag
  00023	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00026	3b c2		 cmp	 eax, edx
  00028	7c 41		 jl	 SHORT $LN3@RunTimeMag
  0002a	3b c1		 cmp	 eax, ecx
  0002c	7f 3d		 jg	 SHORT $LN3@RunTimeMag

; 4860 : 	{
; 4861 : 		int mark = state + 1;
; 4862 : 		//101845 101833 101839 101851
; 4863 : #ifdef _CAX_SKILL_XY_FIX
; 4864 : 		//printf("\n ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]=%d",ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]);
; 4865 : 		if (ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum] == 10 ){
; 4866 : 			//printf("\n 111111");
; 4867 : 		  boundary_2 = MakeAnimDisp(320, 240, mark, 0);
; 4868 : 		}else{
; 4869 : 			//printf("\n 222222");
; 4870 : 		  boundary_2 = MakeAnimDisp(320+160, 240+120, mark, 0);
; 4871 : 		}
; 4872 : #else
; 4873 : 		boundary_2 = MakeAnimDisp(320, 240, mark, 0);

  0002e	6a 00		 push	 0
  00030	40		 inc	 eax
  00031	50		 push	 eax
  00032	68 f0 00 00 00	 push	 240			; 000000f0H
  00037	68 40 01 00 00	 push	 320			; 00000140H
  0003c	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  00041	a3 00 00 00 00	 mov	 DWORD PTR ?boundary_2@@3PAUaction@@A, eax ; boundary_2
  00046	83 c4 10	 add	 esp, 16			; 00000010H

; 4874 : #endif
; 4875 : 		boundary_2->actNo = 0;

  00049	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+172], 0

; 4876 : 		boundary_2->anim_ang = 3;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?boundary_2@@3PAUaction@@A ; boundary_2
  00058	c7 80 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+340], 3

; 4877 : 		boundary_2->dispPrio = DISP_PRIO_TILE + 1;//ÂõæÂ±Ç

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?boundary_2@@3PAUaction@@A ; boundary_2
  00067	c6 40 15 02	 mov	 BYTE PTR [eax+21], 2
$LN3@RunTimeMag:

; 4878 : 	}
; 4879 : 
; 4880 : 	/*if ( boundary_r->anim_cnt == 10 ){//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 4881 : 			DeathAction(boundary_r);
; 4882 : 			boundary_r = NULL;
; 4883 : 			bRunBoundaryMgc = FALSE;
; 4884 : 			}*/
; 4885 : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?RunTimeMagicBoundary@@YAXH@Z ENDP			; RunTimeMagicBoundary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?BuildBoundaryMagicData@@YAHH@Z
_TEXT	SEGMENT
_stateno$ = -32						; size = 32
_state$ = 8						; size = 4
?BuildBoundaryMagicData@@YAHH@Z PROC			; BuildBoundaryMagicData, COMDAT

; 4767 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 4768 : 	int stateno[] = {101789,101777,101783,101795,101786,101774,101780,101792};
; 4769 : 	int mark=-1;
; 4770 : 
; 4771 : 	if (!g_bUseAlpha)

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, 0 ; g_bUseAlpha
  0000d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00018da300018d9700018d9100018d9d
  00014	0f 11 45 e0	 movups	 XMMWORD PTR _stateno$[ebp], xmm0
  00018	56		 push	 esi
  00019	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00018da000018d9400018d8e00018d9a
  00020	0f 11 45 f0	 movups	 XMMWORD PTR _stateno$[ebp+16], xmm0
  00024	75 24		 jne	 SHORT $LN22@BuildBound

; 4772 : 	{
; 4773 : 		if (state > 1)
; 4774 : 			state += 55;
; 4775 : 		stateno[0] = 101844, stateno[1] = 101832, stateno[2] = 101838, stateno[3] = 101850,

  00026	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00029	83 f8 01	 cmp	 eax, 1
  0002c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00018dda00018dce00018dc800018dd4
  00033	0f 11 45 e0	 movups	 XMMWORD PTR _stateno$[ebp], xmm0
  00037	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00018dd700018dcb00018dc500018dd1
  0003e	8d 70 37	 lea	 esi, DWORD PTR [eax+55]
  00041	0f 11 45 f0	 movups	 XMMWORD PTR _stateno$[ebp+16], xmm0
  00045	0f 4e f0	 cmovle	 esi, eax
  00048	eb 03		 jmp	 SHORT $LN2@BuildBound
$LN22@BuildBound:

; 4768 : 	int stateno[] = {101789,101777,101783,101795,101786,101774,101780,101792};
; 4769 : 	int mark=-1;
; 4770 : 
; 4771 : 	if (!g_bUseAlpha)

  0004a	8b 75 08	 mov	 esi, DWORD PTR _state$[ebp]
$LN2@BuildBound:

; 4776 : 			stateno[4] = 101841, stateno[5] = 101829, stateno[6] = 101835, stateno[7] = 101847;
; 4777 : 	}
; 4778 : 	if (state == 0)//Â∑¶Ê∏ÖÈô§

  0004d	85 f6		 test	 esi, esi
  0004f	75 27		 jne	 SHORT $LN4@BuildBound

; 4779 : 	{
; 4780 : 		if (boundary_mark[0])

  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?boundary_mark@@3PAPAUaction@@A
  00057	85 c9		 test	 ecx, ecx
  00059	74 11		 je	 SHORT $LN5@BuildBound

; 4781 : 		{
; 4782 : 			DeathAction(boundary_mark[0]);

  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00061	83 c4 04	 add	 esp, 4

; 4783 : 			boundary_mark[0] = NULL;

  00064	33 c9		 xor	 ecx, ecx
  00066	89 0d 00 00 00
	00		 mov	 DWORD PTR ?boundary_mark@@3PAPAUaction@@A, ecx
$LN5@BuildBound:

; 4784 : 		}
; 4785 : 		bRunBoundaryMgc_l = 0;    

  0006c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bRunBoundaryMgc_l@@3HA, 0

; 4786 : 	}
; 4787 : 	if (state == 1)//Âè≥Ê∏ÖÈô§

  00076	eb 36		 jmp	 SHORT $LN24@BuildBound
$LN4@BuildBound:
  00078	83 fe 01	 cmp	 esi, 1
  0007b	75 2b		 jne	 SHORT $LN23@BuildBound

; 4788 : 	{
; 4789 : 		if (boundary_mark[1])

  0007d	a1 04 00 00 00	 mov	 eax, DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4
  00082	85 c0		 test	 eax, eax
  00084	74 10		 je	 SHORT $LN7@BuildBound

; 4790 : 		{
; 4791 : 			DeathAction(boundary_mark[1]);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0008c	83 c4 04	 add	 esp, 4

; 4792 : 			boundary_mark[1] = NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	a3 04 00 00 00	 mov	 DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4, eax
$LN7@BuildBound:

; 4793 : 		}
; 4794 : 		bRunBoundaryMgc_r = 0;

  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?boundary_mark@@3PAPAUaction@@A
  0009c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bRunBoundaryMgc_r@@3HA, 0
  000a6	eb 0b		 jmp	 SHORT $LN6@BuildBound
$LN23@BuildBound:

; 4786 : 	}
; 4787 : 	if (state == 1)//Âè≥Ê∏ÖÈô§

  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?boundary_mark@@3PAPAUaction@@A
$LN24@BuildBound:

; 4795 : 	}
; 4796 : 	if (state == stateno[0] //Â∑¶Âú∞
; 4797 : 		|| state == stateno[1]
; 4798 : 		|| state == stateno[2]
; 4799 : 		|| state == stateno[3])

  000ae	a1 04 00 00 00	 mov	 eax, DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4
$LN6@BuildBound:
  000b3	3b 75 e0	 cmp	 esi, DWORD PTR _stateno$[ebp]
  000b6	74 0f		 je	 SHORT $LN9@BuildBound
  000b8	3b 75 e4	 cmp	 esi, DWORD PTR _stateno$[ebp+4]
  000bb	74 0a		 je	 SHORT $LN9@BuildBound
  000bd	3b 75 e8	 cmp	 esi, DWORD PTR _stateno$[ebp+8]
  000c0	74 05		 je	 SHORT $LN9@BuildBound
  000c2	3b 75 ec	 cmp	 esi, DWORD PTR _stateno$[ebp+12]
  000c5	75 6f		 jne	 SHORT $LN12@BuildBound
$LN9@BuildBound:

; 4800 : 	{
; 4801 : 		if (bRunBoundaryMgc_l != state)

  000c7	39 35 00 00 00
	00		 cmp	 DWORD PTR ?bRunBoundaryMgc_l@@3HA, esi
  000cd	74 67		 je	 SHORT $LN12@BuildBound

; 4802 : 		{
; 4803 : 			if (boundary_mark[0])

  000cf	85 c9		 test	 ecx, ecx
  000d1	74 16		 je	 SHORT $LN11@BuildBound

; 4804 : 			{
; 4805 : 				DeathAction(boundary_mark[0]);

  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 4806 : 				boundary_mark[0] = NULL;

  000d9	a1 04 00 00 00	 mov	 eax, DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4
  000de	83 c4 04	 add	 esp, 4
  000e1	33 c9		 xor	 ecx, ecx
  000e3	89 0d 00 00 00
	00		 mov	 DWORD PTR ?boundary_mark@@3PAPAUaction@@A, ecx
$LN11@BuildBound:

; 4807 : 			}
; 4808 : 			bRunBoundaryMgc_l = state;

  000e9	89 35 00 00 00
	00		 mov	 DWORD PTR ?bRunBoundaryMgc_l@@3HA, esi

; 4809 : 			if (boundary_mark[0] == NULL)

  000ef	85 c9		 test	 ecx, ecx
  000f1	75 43		 jne	 SHORT $LN12@BuildBound

; 4810 : 			{
; 4811 : 				boundary_mark[0] = MakeAnimDisp(320, 240, state + 2, 0);

  000f3	51		 push	 ecx
  000f4	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  000f7	50		 push	 eax
  000f8	68 f0 00 00 00	 push	 240			; 000000f0H
  000fd	68 40 01 00 00	 push	 320			; 00000140H
  00102	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  00107	a3 00 00 00 00	 mov	 DWORD PTR ?boundary_mark@@3PAPAUaction@@A, eax
  0010c	83 c4 10	 add	 esp, 16			; 00000010H

; 4812 : 				boundary_mark[0]->actNo = 0;

  0010f	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+172], 0

; 4813 : 				boundary_mark[0]->anim_ang = 3;

  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?boundary_mark@@3PAPAUaction@@A
  0011e	c7 80 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+340], 3

; 4814 : 				boundary_mark[0]->dispPrio = DISP_PRIO_TILE + 1;//ÂõæÂ±Ç

  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR ?boundary_mark@@3PAPAUaction@@A
  0012d	c6 40 15 02	 mov	 BYTE PTR [eax+21], 2
  00131	a1 04 00 00 00	 mov	 eax, DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4
$LN12@BuildBound:

; 4815 : 			}
; 4816 : 		}
; 4817 : 	}
; 4818 : 
; 4819 : 	if (state == stateno[4] //Âè≥Âú∞
; 4820 : 		|| state == stateno[5]
; 4821 : 		|| state == stateno[6]
; 4822 : 		|| state == stateno[7])

  00136	3b 75 f0	 cmp	 esi, DWORD PTR _stateno$[ebp+16]
  00139	74 0f		 je	 SHORT $LN14@BuildBound
  0013b	3b 75 f4	 cmp	 esi, DWORD PTR _stateno$[ebp+20]
  0013e	74 0a		 je	 SHORT $LN14@BuildBound
  00140	3b 75 f8	 cmp	 esi, DWORD PTR _stateno$[ebp+24]
  00143	74 05		 je	 SHORT $LN14@BuildBound
  00145	3b 75 fc	 cmp	 esi, DWORD PTR _stateno$[ebp+28]
  00148	75 64		 jne	 SHORT $LN20@BuildBound
$LN14@BuildBound:

; 4823 : 	{
; 4824 : 		if (bRunBoundaryMgc_l != state)

  0014a	39 35 00 00 00
	00		 cmp	 DWORD PTR ?bRunBoundaryMgc_l@@3HA, esi
  00150	74 5c		 je	 SHORT $LN20@BuildBound

; 4825 : 		{
; 4826 : 			if (boundary_mark[1])

  00152	85 c0		 test	 eax, eax
  00154	74 10		 je	 SHORT $LN16@BuildBound

; 4827 : 			{
; 4828 : 				DeathAction(boundary_mark[1]);

  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0015c	83 c4 04	 add	 esp, 4

; 4829 : 				boundary_mark[1] = NULL;

  0015f	33 c0		 xor	 eax, eax
  00161	a3 04 00 00 00	 mov	 DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4, eax
$LN16@BuildBound:

; 4830 : 			}
; 4831 : 			bRunBoundaryMgc_r = state;

  00166	89 35 00 00 00
	00		 mov	 DWORD PTR ?bRunBoundaryMgc_r@@3HA, esi

; 4832 : 			if (boundary_mark[1] == NULL)

  0016c	85 c0		 test	 eax, eax
  0016e	75 3e		 jne	 SHORT $LN20@BuildBound

; 4833 : 			{
; 4834 : #ifdef _CAX_SKILL_XY_FIX
; 4835 : 				boundary_mark[1] = MakeAnimDisp(320+160, 240+120, state + 2, 0);
; 4836 : #else
; 4837 : 				boundary_mark[1] = MakeAnimDisp(320, 240, state + 2, 0);

  00170	50		 push	 eax
  00171	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00174	50		 push	 eax
  00175	68 f0 00 00 00	 push	 240			; 000000f0H
  0017a	68 40 01 00 00	 push	 320			; 00000140H
  0017f	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  00184	a3 04 00 00 00	 mov	 DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4, eax
  00189	83 c4 10	 add	 esp, 16			; 00000010H

; 4838 : #endif
; 4839 : 				boundary_mark[1]->actNo = 0;

  0018c	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+172], 0

; 4840 : 				boundary_mark[1]->anim_ang = 3;

  00196	a1 04 00 00 00	 mov	 eax, DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4
  0019b	c7 80 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+340], 3

; 4841 : 				boundary_mark[1]->dispPrio = DISP_PRIO_TILE + 1;//ÂõæÂ±Ç

  001a5	a1 04 00 00 00	 mov	 eax, DWORD PTR ?boundary_mark@@3PAPAUaction@@A+4
  001aa	c6 40 15 02	 mov	 BYTE PTR [eax+21], 2
$LN20@BuildBound:

; 4842 : 			}
; 4843 : 		}
; 4844 : 	}
; 4845 : //printf("\n ToCallMgc.iCurMgcNum=%d",ToCallMgc.iCurMgcNum);
; 4846 : //printf("\n ToCallMgc.wScreenY=%d",ToCallMgc.wScreenY);
; 4847 : 	return TRUE;
; 4848 : }

  001ae	b8 01 00 00 00	 mov	 eax, 1
  001b3	5e		 pop	 esi
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
?BuildBoundaryMagicData@@YAHH@Z ENDP			; BuildBoundaryMagicData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?BuildToCallMagicData@@YAHPAUaction@@0@Z
_TEXT	SEGMENT
_pMaster$GSCopy$1$ = -88				; size = 4
?ToCallMgc@@3UTOCALL_MAGIC@@A$8 = -84			; size = 4
?ToCallMgc@@3UTOCALL_MAGIC@@A$7 = -80			; size = 4
_pAttacker$GSCopy$1$ = -76				; size = 4
?ToCallMgc@@3UTOCALL_MAGIC@@A$5 = -70			; size = 2
_charidx$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_pMaster$ = 8						; size = 4
_pAttacker$ = 12					; size = 4
?BuildToCallMagicData@@YAHPAUaction@@0@Z PROC		; BuildToCallMagicData, COMDAT

; 4512 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pMaster$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4513 : 	int	i, idx = 0, midx, midy, count = 0;
; 4514 : 	int	charidx[MAX_NUM_ATTACKED];
; 4515 : 
; 4516 : 	memset(&ToCallMgc, 0, sizeof(ToCallMgc));

  00016	68 cc 00 00 00	 push	 204			; 000000ccH
  0001b	33 ff		 xor	 edi, edi
  0001d	89 45 a8	 mov	 DWORD PTR _pMaster$GSCopy$1$[ebp], eax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _pAttacker$[ebp]
  00023	33 f6		 xor	 esi, esi
  00025	57		 push	 edi
  00026	68 00 00 00 00	 push	 OFFSET ?ToCallMgc@@3UTOCALL_MAGIC@@A
  0002b	89 45 b4	 mov	 DWORD PTR _pAttacker$GSCopy$1$[ebp], eax
  0002e	e8 00 00 00 00	 call	 _memset

; 4517 : 	memset(charidx, 0, sizeof(charidx));

  00033	6a 40		 push	 64			; 00000040H
  00035	8d 45 bc	 lea	 eax, DWORD PTR _charidx$[ebp]
  00038	57		 push	 edi
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _memset

; 4518 : 
; 4519 : 	iAttackedNum = 0;
; 4520 : 	iCurAttackedFinishNum = 0;
; 4521 : 
; 4522 : 	// B$|Attacker's No( 0 - 19 )|5711438|Attacker's MP|
; 4523 : 
; 4524 : 	ATR_VCT_NO(pAttacker) = TOCALL_MAGIC_CASE;

  0003f	8b 45 b4	 mov	 eax, DWORD PTR _pAttacker$GSCopy$1$[ebp]
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	33 db		 xor	 ebx, ebx
  00047	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iAttackedNum@@3HA, ebx
  0004d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iCurAttackedFinishNum@@3HA, ebx
  00053	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00056	c6 00 d2	 mov	 BYTE PTR [eax], 210	; 000000d2H

; 4525 : 	ATR_MP(pAttacker) = get_num();

  00059	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0005e	8b 4d b4	 mov	 ecx, DWORD PTR _pAttacker$GSCopy$1$[ebp]
  00061	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 4526 : 	//	ToCallMgc.iPreMgcNum			= get_num();
; 4527 : 	//	ToCallMgc.iCurMgcNum			= get_num();
; 4528 : 	ToCallMgc.iPreMgcNum = get_num();

  00067	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0006c	a3 1c 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+28, eax

; 4529 : #ifdef _PETSKILL_LER			// Èõ∑Â∞îÊäÄËÉΩ
; 4530 : 	if (ToCallMgc.iPreMgcNum == 101808 || ToCallMgc.iPreMgcNum == 101809)

  00071	3d b0 8d 01 00	 cmp	 eax, 101808		; 00018db0H
  00076	74 07		 je	 SHORT $LN20@BuildToCal
  00078	3d b1 8d 01 00	 cmp	 eax, 101809		; 00018db1H
  0007d	75 10		 jne	 SHORT $LN21@BuildToCal
$LN20@BuildToCal:

; 4531 : 	{
; 4532 : 		if (!g_bUseAlpha)

  0007f	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, ebx ; g_bUseAlpha
  00085	75 08		 jne	 SHORT $LN21@BuildToCal

; 4533 : 			ToCallMgc.iPreMgcNum += 53;

  00087	83 c0 35	 add	 eax, 53			; 00000035H
  0008a	a3 1c 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+28, eax
$LN21@BuildToCal:

; 4534 : 	}
; 4535 : #endif
; 4536 : 	ToCallMgc.iCurMgcNum = get_num();

  0008f	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00094	a3 20 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32, eax

; 4537 : #ifdef _PROFESSION_ADDSKILL
; 4538 : 	if (ToCallMgc.iCurMgcNum >= 101770 && ToCallMgc.iCurMgcNum <= 101797)

  00099	8d 88 76 72 fe
	ff		 lea	 ecx, DWORD PTR [eax-101770]
  0009f	83 f9 1b	 cmp	 ecx, 27			; 0000001bH
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_bUseAlpha@@3HA ; g_bUseAlpha
  000a8	77 0c		 ja	 SHORT $LN23@BuildToCal

; 4539 : 	{
; 4540 : 		if (!g_bUseAlpha)

  000aa	85 c9		 test	 ecx, ecx
  000ac	75 08		 jne	 SHORT $LN23@BuildToCal

; 4541 : 			ToCallMgc.iCurMgcNum += 55;

  000ae	83 c0 37	 add	 eax, 55			; 00000037H
  000b1	a3 20 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32, eax
$LN23@BuildToCal:

; 4542 : 	}
; 4543 : #endif
; 4544 : #ifdef _PETSKILL_LER			// Èõ∑Â∞îÊäÄËÉΩ
; 4545 : 	if (ToCallMgc.iCurMgcNum == 101798)

  000b6	3d a6 8d 01 00	 cmp	 eax, 101798		; 00018da6H
  000bb	75 10		 jne	 SHORT $LN25@BuildToCal

; 4546 : 	{
; 4547 : 		if (!g_bUseAlpha)

  000bd	85 c9		 test	 ecx, ecx
  000bf	75 3d		 jne	 SHORT $LN30@BuildToCal

; 4548 : 			ToCallMgc.iCurMgcNum = 101853;

  000c1	c7 05 20 00 00
	00 dd 8d 01 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32, 101853 ; 00018dddH

; 4549 : 	}
; 4550 : 	if (ToCallMgc.iCurMgcNum == 101800)

  000cb	eb 31		 jmp	 SHORT $LN30@BuildToCal
$LN25@BuildToCal:
  000cd	3d a8 8d 01 00	 cmp	 eax, 101800		; 00018da8H
  000d2	75 10		 jne	 SHORT $LN27@BuildToCal

; 4551 : 	{
; 4552 : 		if (!g_bUseAlpha)

  000d4	85 c9		 test	 ecx, ecx
  000d6	75 26		 jne	 SHORT $LN30@BuildToCal

; 4553 : 			ToCallMgc.iCurMgcNum = 101854;

  000d8	c7 05 20 00 00
	00 de 8d 01 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32, 101854 ; 00018ddeH

; 4554 : 	}
; 4555 : 	if (ToCallMgc.iCurMgcNum == 101806 || ToCallMgc.iCurMgcNum == 101807)

  000e2	eb 1a		 jmp	 SHORT $LN30@BuildToCal
$LN27@BuildToCal:
  000e4	3d ae 8d 01 00	 cmp	 eax, 101806		; 00018daeH
  000e9	74 07		 je	 SHORT $LN29@BuildToCal
  000eb	3d af 8d 01 00	 cmp	 eax, 101807		; 00018dafH
  000f0	75 0c		 jne	 SHORT $LN30@BuildToCal
$LN29@BuildToCal:

; 4556 : 	{
; 4557 : 		if (!g_bUseAlpha)

  000f2	85 c9		 test	 ecx, ecx
  000f4	75 08		 jne	 SHORT $LN30@BuildToCal

; 4558 : 			ToCallMgc.iCurMgcNum += 53;

  000f6	83 c0 35	 add	 eax, 53			; 00000035H
  000f9	a3 20 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32, eax
$LN30@BuildToCal:

; 4559 : 	}
; 4560 : #endif
; 4561 : 	ToCallMgc.iPostMgcNum = get_num();

  000fe	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00103	a3 24 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+36, eax

; 4562 : 	ToCallMgc.wAttackType = (WORD)get_num();

  00108	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0010d	66 a3 2a 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+42, ax

; 4563 : 	ToCallMgc.wAttackTimeSlice = (WORD)get_num();

  00113	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00118	66 a3 2c 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+44, ax

; 4564 : 	ToCallMgc.wShowType = (WORD)get_num();

  0011e	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00123	66 a3 2e 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+46, ax

; 4565 : 	//	ToCallMgc.wShowType =0;
; 4566 : 	ToCallMgc.wScreenX = (WORD)get_num();

  00129	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0012e	66 89 45 ba	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A$5[ebp], ax
  00132	66 a3 30 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+48, ax

; 4567 : 	//	ToCallMgc.wScreenX				= 0;//-150;
; 4568 : 	ToCallMgc.wScreenY = (WORD)get_num();

  00138	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0013d	66 a3 32 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+50, ax

; 4569 : #ifdef _SHANZHU_TMPSKILL41//ÂõûÊóãÂíåÁïåÈù¢‰∏çÁõ∏Á¨¶
; 4570 : 		if(ToCallMgc.wScreenY >250 && (ToCallMgc.iCurMgcNum > 101654 && ToCallMgc.iCurMgcNum < 101658  ))
; 4571 : 		ToCallMgc.wScreenY				+=  220;//ÊµãËØï‰∏ãÂºÄÂêØÁúãÁúã Êâì‰∏ãÈù¢ÂØπ‰∫Ü ‰ΩÜÊòØÊâì‰∏äÈù¢ÁöÑ‰πüÂêë‰∏ãÁßª‰Ωç‰∫Ü210 Ë¶ÅÊ£ÄÊµã‰∏ãÊòØ
; 4572 : #endif
; 4573 : 	//	ToCallMgc.wScreenY				= 0;//-20;
; 4574 : 	ToCallMgc.wPreMgcX = (WORD)get_num();

  00143	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00148	66 a3 34 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+52, ax

; 4575 : 	ToCallMgc.wPreMgcY = (WORD)get_num();

  0014e	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00153	66 a3 36 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+54, ax

; 4576 : 	ToCallMgc.wPostMgcX = (WORD)get_num();

  00159	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0015e	66 a3 38 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+56, ax

; 4577 : 	ToCallMgc.wPostMgcY = (WORD)get_num();

  00164	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00169	66 a3 3a 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+58, ax

; 4578 : 	ToCallMgc.wPreMgcOnChar = (WORD)get_num();

  0016f	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00174	66 a3 3c 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+60, ax

; 4579 : 	ToCallMgc.wCurMgcOnChar = (WORD)get_num();

  0017a	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0017f	66 a3 3e 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+62, ax

; 4580 : 	ToCallMgc.wPostMgcOnChar = (WORD)get_num();

  00185	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0018a	66 a3 40 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+64, ax

; 4581 : 	ToCallMgc.dwEQuake = (DWORD)get_num();

  00190	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00195	a3 08 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+8, eax

; 4582 : 	//	ToCallMgc.dwEQuake = 1;
; 4583 : 	ToCallMgc.dwEQuakeSTime = (DWORD)get_num();

  0019a	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0019f	89 45 b0	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A$7[ebp], eax
  001a2	a3 0c 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+12, eax

; 4584 : 	//	ToCallMgc.dwEQuakeSTime			= 1000;
; 4585 : 	ToCallMgc.dwEQuakeETime = (DWORD)get_num();

  001a7	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  001ac	89 45 ac	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A$8[ebp], eax
  001af	a3 10 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+16, eax

; 4586 : 	//	ToCallMgc.dwEQuakeETime			= 4000;
; 4587 : 	ToCallMgc.wIsPostDisappear = (WORD)get_num();

  001b4	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  001b9	66 a3 c8 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+200, ax

; 4588 : 	ToCallMgc.wToCallMagicNo = (WORD)get_num();

  001bf	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  001c4	66 a3 ca 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+202, ax
  001ca	66 0f 1f 44 00
	00		 npad	 6
$LL4@BuildToCal:

; 4589 : 
; 4590 : 	do
; 4591 : 	{
; 4592 : 		charidx[idx] = get_num();

  001d0	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  001d5	89 44 b5 bc	 mov	 DWORD PTR _charidx$[ebp+esi*4], eax

; 4593 : 	} while (0XFF != charidx[idx] && ++idx);

  001d9	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  001de	74 18		 je	 SHORT $LN31@BuildToCal
  001e0	83 c6 01	 add	 esi, 1
  001e3	75 eb		 jne	 SHORT $LL4@BuildToCal

; 4666 : 	ATR_BODY_CNT(pMaster) = 1;
; 4667 : 	bRunToCallMgc = TRUE;
; 4668 : 
; 4669 : 	return TRUE;
; 4670 : }

  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	33 c0		 xor	 eax, eax
  001e9	5b		 pop	 ebx
  001ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ed	33 cd		 xor	 ecx, ebp
  001ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c3		 ret	 0
$LN31@BuildToCal:

; 4594 : 
; 4595 : 	if (0 == idx)

  001f8	85 f6		 test	 esi, esi
  001fa	75 13		 jne	 SHORT $LN42@BuildToCal

; 4666 : 	ATR_BODY_CNT(pMaster) = 1;
; 4667 : 	bRunToCallMgc = TRUE;
; 4668 : 
; 4669 : 	return TRUE;
; 4670 : }

  001fc	5f		 pop	 edi
  001fd	5e		 pop	 esi
  001fe	33 c0		 xor	 eax, eax
  00200	5b		 pop	 ebx
  00201	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00204	33 cd		 xor	 ecx, ebp
  00206	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c3		 ret	 0
$LN42@BuildToCal:

; 4596 : 		return FALSE;
; 4597 : 
; 4598 : 	while (0X5711438 != (AttackedInfo[iAttackedNum * 4] = get_num()))

  0020f	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00214	a3 00 00 00 00	 mov	 DWORD PTR ?AttackedInfo@@3PAHA, eax
  00219	3d 38 14 71 05	 cmp	 eax, 91296824		; 05711438H
  0021e	74 43		 je	 SHORT $LN6@BuildToCal
  00220	33 ff		 xor	 edi, edi
$LL5@BuildToCal:

; 4599 : 	{
; 4600 : 		AttackedInfo[iAttackedNum * 4 + 1] = get_num();

  00222	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00227	89 87 04 00 00
	00		 mov	 DWORD PTR ?AttackedInfo@@3PAHA[edi+4], eax

; 4601 : 		AttackedInfo[iAttackedNum * 4 + 2] = get_num();

  0022d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00232	89 87 08 00 00
	00		 mov	 DWORD PTR ?AttackedInfo@@3PAHA[edi+8], eax

; 4602 : 		AttackedInfo[iAttackedNum * 4 + 3] = get_num();

  00238	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0023d	89 87 0c 00 00
	00		 mov	 DWORD PTR ?AttackedInfo@@3PAHA[edi+12], eax

; 4603 : 		iAttackedNum++;

  00243	43		 inc	 ebx
  00244	8b fb		 mov	 edi, ebx
  00246	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0024b	c1 e7 04	 shl	 edi, 4
  0024e	89 87 00 00 00
	00		 mov	 DWORD PTR ?AttackedInfo@@3PAHA[edi], eax
  00254	3d 38 14 71 05	 cmp	 eax, 91296824		; 05711438H
  00259	75 c7		 jne	 SHORT $LL5@BuildToCal
  0025b	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iAttackedNum@@3HA, ebx
  00261	33 ff		 xor	 edi, edi
$LN6@BuildToCal:

; 4604 : 	}
; 4605 : 	ToCallMgc.dwCurFrame1 = 0;
; 4606 : 	ToCallMgc.dwCurFrame2 = 0;
; 4607 : 	ToCallMgc.dwEQuakeSFrame = ToCallMgc.dwEQuakeSTime >> 4;

  00263	8b 45 b0	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A$7[ebp]

; 4608 : 	ToCallMgc.dwEQuakeEFrame = ToCallMgc.dwEQuakeETime >> 4;
; 4609 : 
; 4610 : 	// ÊòØÂê¶ÊúâÂâçÁΩÆÂííÊúØ
; 4611 : 	(0XFFFFFFFF == ToCallMgc.iPreMgcNum) ? ToCallMgc.wRunPreMgc = TRUE : ToCallMgc.wRunPreMgc = FALSE;

  00266	bb 01 00 00 00	 mov	 ebx, 1
  0026b	c1 e8 04	 shr	 eax, 4
  0026e	a3 14 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+20, eax
  00273	8b 45 ac	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A$8[ebp]
  00276	c1 e8 04	 shr	 eax, 4
  00279	83 3d 1c 00 00
	00 ff		 cmp	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+28, -1
  00280	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A, 0
  0028a	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+4, 0
  00294	a3 18 00 00 00	 mov	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+24, eax
  00299	75 09		 jne	 SHORT $LN39@BuildToCal
  0029b	66 89 1d 28 00
	00 00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+40, bx
  002a2	eb 08		 jmp	 SHORT $LN40@BuildToCal
$LN39@BuildToCal:
  002a4	33 c0		 xor	 eax, eax
  002a6	66 a3 28 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+40, ax
$LN40@BuildToCal:

; 4612 : 
; 4613 : 	// ÁªùÂØπ‰ΩçÁΩÆÊòæÁ§∫Ê≥ï
; 4614 : 	if (1 == ToCallMgc.wShowType)

  002ac	66 3b 1d 2e 00
	00 00		 cmp	 bx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+46
  002b3	75 6f		 jne	 SHORT $LN33@BuildToCal

; 4615 : 	{
; 4616 : 		ToCallMgc.wNumAttacks = 1;
; 4617 : 		ToCallMgc.wCurAttackNum = 0;
; 4618 : 		ToCallMgc.posAttacked[0].x = ToCallMgc.wScreenX;
; 4619 : 		ToCallMgc.posAttacked[0].y = ToCallMgc.wScreenY;

  002b5	66 8b 0d 32 00
	00 00		 mov	 cx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+50
  002bc	33 c0		 xor	 eax, eax
  002be	66 a3 c6 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198, ax
  002c4	66 8b 45 ba	 mov	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A$5[ebp]
  002c8	66 a3 82 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+130, ax

; 4620 : 		ToCallMgc.wAttackedIndex[0] = 20;		// ÂÖ®ÈÉ®‰∫∫ÂëòÁöÜÂêåÊó∂ÂëàÂèó‰º§Áä∂ÊÄÅ

  002ce	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  002d3	66 89 0d 84 00
	00 00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+132, cx

; 4621 : 		ToCallMgc.wMgcFrameCount[0] = 0;
; 4622 : 
; 4623 : 		// Ë¢´ÊîªÂáªÁöÑÊïå‰∫∫Á¥¢ÂºïÂè∑
; 4624 : 		for (i = 0; i < idx; i++)

  002da	33 c9		 xor	 ecx, ecx
  002dc	66 a3 62 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+98, ax
  002e2	33 c0		 xor	 eax, eax
  002e4	66 89 1d c2 00
	00 00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+194, bx
  002eb	66 a3 42 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+66, ax
  002f1	85 f6		 test	 esi, esi
  002f3	7e 1d		 jle	 SHORT $LN8@BuildToCal
  002f5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL9@BuildToCal:

; 4625 : 			ToCallMgc.wAttackedIndex[i + 1] = charidx[i];

  00300	66 8b 44 8d bc	 mov	 ax, WORD PTR _charidx$[ebp+ecx*4]
  00305	66 89 04 4d 64
	00 00 00	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[ecx*2+100], ax
  0030d	41		 inc	 ecx
  0030e	3b ce		 cmp	 ecx, esi
  00310	7c ee		 jl	 SHORT $LL9@BuildToCal
$LN8@BuildToCal:

; 4626 : 
; 4627 : 		ToCallMgc.wAttackedIndex[i + 1] = 0XFF;

  00312	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00317	66 89 04 4d 64
	00 00 00	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[ecx*2+100], ax

; 4628 : 	}

  0031f	e9 0c 01 00 00	 jmp	 $LN17@BuildToCal
$LN33@BuildToCal:

; 4629 : 	// Â±Ö‰∏≠‰ΩçÁΩÆÊòæÁ§∫Ê≥ï
; 4630 : 	else{
; 4631 : 		// ÂííÊúØÁöÑÊñπÂºè‰∏∫ÂÖ®‰ΩìÂêåÊó∂ÊîªÂáª
; 4632 : 		if (2 == ToCallMgc.wAttackType || 4 == ToCallMgc.wAttackType){

  00324	66 a1 2a 00 00
	00		 mov	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+42
  0032a	b9 02 00 00 00	 mov	 ecx, 2
  0032f	66 3b c8	 cmp	 cx, ax
  00332	74 6c		 je	 SHORT $LN37@BuildToCal
  00334	b9 04 00 00 00	 mov	 ecx, 4
  00339	66 3b c8	 cmp	 cx, ax
  0033c	74 62		 je	 SHORT $LN37@BuildToCal

; 4653 : 		}else{// ÂçïÁã¨ÊîªÂáª
; 4654 : 			// Ë¢´ÊîªÂáªÁöÑÊïå‰∫∫Á¥¢ÂºïÂè∑
; 4655 : 			for (i = 0; i < idx; i++){

  0033e	33 c9		 xor	 ecx, ecx
  00340	85 f6		 test	 esi, esi
  00342	0f 8e e8 00 00
	00		 jle	 $LN17@BuildToCal
  00348	66 8b 45 ba	 mov	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A$5[ebp]
  0034c	0f 1f 40 00	 npad	 4
$LL18@BuildToCal:

; 4656 : 				ToCallMgc.wNumAttacks++;

  00350	66 ff 05 c2 00
	00 00		 inc	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+194

; 4657 : 				ToCallMgc.posAttacked[i].x = ToCallMgc.wScreenX;

  00357	66 89 04 8d 82
	00 00 00	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[ecx*4+130], ax

; 4658 : 				ToCallMgc.posAttacked[i].y = ToCallMgc.wScreenY;

  0035f	0f b7 05 32 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+50
  00366	66 89 04 8d 84
	00 00 00	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[ecx*4+132], ax

; 4659 : 				ToCallMgc.wAttackedIndex[i] = charidx[i];

  0036e	0f b7 44 8d bc	 movzx	 eax, WORD PTR _charidx$[ebp+ecx*4]
  00373	66 89 04 4d 62
	00 00 00	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[ecx*2+98], ax

; 4660 : 				ToCallMgc.wMgcFrameCount[i] = count;

  0037b	66 89 3c 4d 42
	00 00 00	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[ecx*2+66], di
  00383	41		 inc	 ecx

; 4661 : 				count += ToCallMgc.wAttackTimeSlice >> 4;

  00384	0f b7 05 2c 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+44
  0038b	c1 e8 04	 shr	 eax, 4
  0038e	03 f8		 add	 edi, eax
  00390	3b ce		 cmp	 ecx, esi
  00392	0f 8d 98 00 00
	00		 jge	 $LN17@BuildToCal

; 4653 : 		}else{// ÂçïÁã¨ÊîªÂáª
; 4654 : 			// Ë¢´ÊîªÂáªÁöÑÊïå‰∫∫Á¥¢ÂºïÂè∑
; 4655 : 			for (i = 0; i < idx; i++){

  00398	66 a1 30 00 00
	00		 mov	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+48
  0039e	eb b0		 jmp	 SHORT $LL18@BuildToCal
$LN37@BuildToCal:

; 4633 : 			midx = 0;

  003a0	33 d2		 xor	 edx, edx

; 4634 : 			midy = 0;

  003a2	33 ff		 xor	 edi, edi
  003a4	33 c9		 xor	 ecx, ecx

; 4635 : 
; 4636 : 			for (i = 0; i < idx; i++){

  003a6	85 f6		 test	 esi, esi
  003a8	7e 1c		 jle	 SHORT $LN11@BuildToCal
  003aa	66 0f 1f 44 00
	00		 npad	 6
$LL12@BuildToCal:

; 4637 : 				midx += p_party[charidx[i]]->x;

  003b0	8b 44 8d bc	 mov	 eax, DWORD PTR _charidx$[ebp+ecx*4]
  003b4	41		 inc	 ecx
  003b5	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  003bc	03 50 18	 add	 edx, DWORD PTR [eax+24]

; 4638 : 				midy += p_party[charidx[i]]->y;

  003bf	03 78 1c	 add	 edi, DWORD PTR [eax+28]
  003c2	3b ce		 cmp	 ecx, esi
  003c4	7c ea		 jl	 SHORT $LL12@BuildToCal
$LN11@BuildToCal:

; 4639 : 			}
; 4640 : 			midx = int(midx / idx);
; 4641 : 			midy = int(midy / idx);
; 4642 : 			ToCallMgc.wNumAttacks = 1;
; 4643 : 			ToCallMgc.wCurAttackNum = 0;

  003c6	33 c0		 xor	 eax, eax
  003c8	66 89 1d c2 00
	00 00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+194, bx
  003cf	66 a3 c6 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+198, ax

; 4644 : 			ToCallMgc.posAttacked[0].x = midx + ToCallMgc.wScreenX;
; 4645 : 			ToCallMgc.posAttacked[0].y = midy + ToCallMgc.wScreenY;
; 4646 : 			ToCallMgc.wAttackedIndex[0] = 20;		// ÂÖ®ÈÉ®‰∫∫ÂëòÁöÜÂêåÊó∂ÂëàÂèó‰º§Áä∂ÊÄÅ
; 4647 : 			ToCallMgc.wMgcFrameCount[0] = 0;
; 4648 : 
; 4649 : 			// Ë¢´ÊîªÂáªÁöÑÊïå‰∫∫Á¥¢ÂºïÂè∑
; 4650 : 			for (i = 0; i < idx; i++)

  003d5	33 c9		 xor	 ecx, ecx
  003d7	8b c2		 mov	 eax, edx
  003d9	99		 cdq
  003da	f7 fe		 idiv	 esi
  003dc	03 05 30 00 00
	00		 add	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+48
  003e2	66 a3 82 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+130, ax
  003e8	8b c7		 mov	 eax, edi
  003ea	99		 cdq
  003eb	f7 fe		 idiv	 esi
  003ed	66 03 05 32 00
	00 00		 add	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+50
  003f4	66 a3 84 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+132, ax
  003fa	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  003ff	66 a3 62 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+98, ax
  00405	33 c0		 xor	 eax, eax
  00407	66 a3 42 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+66, ax
  0040d	85 f6		 test	 esi, esi
  0040f	7e 12		 jle	 SHORT $LN14@BuildToCal
$LL15@BuildToCal:

; 4651 : 				ToCallMgc.wAttackedIndex[i + 1] = charidx[i];

  00411	66 8b 44 8d bc	 mov	 ax, WORD PTR _charidx$[ebp+ecx*4]
  00416	66 89 04 4d 64
	00 00 00	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[ecx*2+100], ax
  0041e	41		 inc	 ecx
  0041f	3b ce		 cmp	 ecx, esi
  00421	7c ee		 jl	 SHORT $LL15@BuildToCal
$LN14@BuildToCal:

; 4652 : 			ToCallMgc.wAttackedIndex[i + 1] = 0XFF;

  00423	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00428	66 89 14 4d 64
	00 00 00	 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A[ecx*2+100], dx
$LN17@BuildToCal:

; 4662 : 			}
; 4663 : 		}
; 4664 : 	}
; 4665 : 	ATR_VCT_NO(pAttacker) = TOCALL_MAGIC_CASE;

  00430	8b 45 b4	 mov	 eax, DWORD PTR _pAttacker$GSCopy$1$[ebp]
  00433	5f		 pop	 edi

; 4666 : 	ATR_BODY_CNT(pMaster) = 1;
; 4667 : 	bRunToCallMgc = TRUE;
; 4668 : 
; 4669 : 	return TRUE;
; 4670 : }

  00434	5e		 pop	 esi
  00435	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bRunToCallMgc@@3HA, ebx
  0043b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0043e	8b c3		 mov	 eax, ebx
  00440	c6 01 d2	 mov	 BYTE PTR [ecx], 210	; 000000d2H
  00443	8b 4d a8	 mov	 ecx, DWORD PTR _pMaster$GSCopy$1$[ebp]
  00446	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00449	88 59 54	 mov	 BYTE PTR [ecx+84], bl
  0044c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044f	33 cd		 xor	 ecx, ebp
  00451	5b		 pop	 ebx
  00452	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00457	8b e5		 mov	 esp, ebp
  00459	5d		 pop	 ebp
  0045a	c3		 ret	 0
?BuildToCallMagicData@@YAHPAUaction@@0@Z ENDP		; BuildToCallMagicData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?RunTimeMagic@@YAHXZ
_TEXT	SEGMENT
?RunTimeMagic@@YAHXZ PROC				; RunTimeMagic, COMDAT

; 5024 : 	// ÂºÄÂßãÂú∞Èúá
; 5025 : 	if (AttMgc.dwEQuakeSFrame == AttMgc.dwCurFrame1)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A
  00006	56		 push	 esi
  00007	8b 35 14 00 00
	00		 mov	 esi, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+20
  0000d	57		 push	 edi
  0000e	8b 3d 18 00 00
	00		 mov	 edi, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+24
  00014	3b f1		 cmp	 esi, ecx
  00016	75 10		 jne	 SHORT $LN20@RunTimeMag

; 5026 : 	{
; 5027 : 		g_iRunEarthQuake = 1;
; 5028 : 		g_iNumRunEarthQuake = AttMgc.dwEQuakeEFrame - AttMgc.dwEQuakeSFrame;

  00018	8b c7		 mov	 eax, edi
  0001a	ba 01 00 00 00	 mov	 edx, 1
  0001f	2b c6		 sub	 eax, esi
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?g_iNumRunEarthQuake@@3HA, eax ; g_iNumRunEarthQuake
  00026	eb 06		 jmp	 SHORT $LN4@RunTimeMag
$LN20@RunTimeMag:

; 5024 : 	// ÂºÄÂßãÂú∞Èúá
; 5025 : 	if (AttMgc.dwEQuakeSFrame == AttMgc.dwCurFrame1)

  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_iRunEarthQuake@@3HA ; g_iRunEarthQuake
$LN4@RunTimeMag:

; 5029 : 	}
; 5030 : 	// ÁªìÊùüÂú∞Èúá
; 5031 : 	if (AttMgc.dwEQuakeEFrame == AttMgc.dwCurFrame1)

  0002e	3b f9		 cmp	 edi, ecx
  00030	b8 03 00 00 00	 mov	 eax, 3
  00035	0f 44 d0	 cmove	 edx, eax

; 5032 : 		g_iRunEarthQuake = 3;
; 5033 : 	AttMgc.dwCurFrame1++;

  00038	41		 inc	 ecx

; 5034 : 	// ÂâçÁΩÆÈ≠îÊ≥ïÊòØÂê¶Â∑≤ÁªèÊí≠ÂÆå‰∫Ü
; 5035 : 	if (FALSE == AttMgc.wRunPreMgc)

  00039	33 c0		 xor	 eax, eax
  0003b	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_iRunEarthQuake@@3HA, edx ; g_iRunEarthQuake
  00041	89 0d 00 00 00
	00		 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A, ecx
  00047	66 3b 05 28 00
	00 00		 cmp	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+40
  0004e	75 08		 jne	 SHORT $LN6@RunTimeMag

; 5036 : 		return TRUE;

  00050	5f		 pop	 edi
  00051	b8 01 00 00 00	 mov	 eax, 1

; 5063 : }

  00056	5e		 pop	 esi
  00057	c3		 ret	 0
$LN6@RunTimeMag:

; 5037 : 	// ÊòØÂê¶‰ªçÊúâÂ∞öÊú™Êí≠ÊîæÁöÑÂííÊúØ
; 5038 : 	if (AttMgc.wCurAttackNum < AttMgc.wNumAttacks)

  00058	66 8b 0d c6 00
	00 00		 mov	 cx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+198
  0005f	66 8b 35 c2 00
	00 00		 mov	 si, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+194
  00066	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+4
  0006c	53		 push	 ebx
  0006d	bb 01 00 00 00	 mov	 ebx, 1
  00072	66 3b ce	 cmp	 cx, si
  00075	0f 83 fb 00 00
	00		 jae	 $LN17@RunTimeMag
  0007b	8d 7b 13	 lea	 edi, DWORD PTR [ebx+19]
  0007e	66 90		 npad	 2
$LL2@RunTimeMag:

; 5039 : 	{
; 5040 : 		while (1)
; 5041 : 		{
; 5042 : 			if (AttMgc.dwCurFrame2 == AttMgc.wMgcFrameCount[AttMgc.wCurAttackNum])

  00080	0f b7 c1	 movzx	 eax, cx
  00083	0f b7 04 45 42
	00 00 00	 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[eax*2+66]
  0008b	3b d0		 cmp	 edx, eax
  0008d	0f 85 cb 00 00
	00		 jne	 $LN8@RunTimeMag

; 5043 : 			{
; 5044 : 				ACTION	*a0;
; 5045 : 
; 5046 : 				a0 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  00093	68 60 02 00 00	 push	 608			; 00000260H
  00098	6a 47		 push	 71			; 00000047H
  0009a	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0009f	8b d0		 mov	 edx, eax
  000a1	83 c4 08	 add	 esp, 8

; 5047 : 				ATR_NAME(a0) = monster;
; 5048 : 				ATR_VCT_NO(a0) = ATTACK_MAGIC_CASE + 2;		// ÂííÊúØÁöÑÊâßË°å
; 5049 : 				ATR_DISP_PRIO(a0) = (1 == AttMgc.wCurMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  000a4	b8 58 00 00 00	 mov	 eax, 88			; 00000058H
  000a9	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  000ac	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster
  000b3	c6 01 ca	 mov	 BYTE PTR [ecx], 202	; 000000caH
  000b6	b9 02 00 00 00	 mov	 ecx, 2
  000bb	66 3b 1d 3e 00
	00 00		 cmp	 bx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+62
  000c2	0f 44 c8	 cmove	 ecx, eax
  000c5	88 4a 15	 mov	 BYTE PTR [edx+21], cl

; 5050 : 				ATR_CHR_NO(a0) = AttMgc.iCurMgcNum;

  000c8	a1 20 00 00 00	 mov	 eax, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+32
  000cd	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax

; 5051 : 				ATR_LONG_WORK(0, a0) = AttMgc.wAttackedIndex[AttMgc.wCurAttackNum];

  000d3	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+198
  000da	0f b7 0c 45 62
	00 00 00	 movzx	 ecx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[eax*2+98]
  000e2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000e5	89 88 34 01 00
	00		 mov	 DWORD PTR [eax+308], ecx

; 5052 : 				ATR_H_POS(a0) = (20 == AttMgc.wAttackedIndex[AttMgc.wCurAttackNum]) ? AttMgc.posAttacked[AttMgc.wCurAttackNum].x : ATR_H_POS(p_party[AttMgc.wAttackedIndex[AttMgc.wCurAttackNum]]) + AttMgc.posAttacked[AttMgc.wCurAttackNum].x;

  000eb	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+198
  000f2	0f b7 34 45 62
	00 00 00	 movzx	 esi, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[eax*2+98]
  000fa	0f b7 0c 85 82
	00 00 00	 movzx	 ecx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[eax*4+130]
  00102	66 3b fe	 cmp	 di, si
  00105	74 0c		 je	 SHORT $LN13@RunTimeMag
  00107	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  0010e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00111	03 c8		 add	 ecx, eax
$LN13@RunTimeMag:
  00113	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 5053 : 				ATR_V_POS(a0) = (20 == AttMgc.wAttackedIndex[AttMgc.wCurAttackNum]) ? AttMgc.posAttacked[AttMgc.wCurAttackNum].y : ATR_V_POS(p_party[AttMgc.wAttackedIndex[AttMgc.wCurAttackNum]]) + AttMgc.posAttacked[AttMgc.wCurAttackNum].y;

  00116	0f b7 05 c6 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+198
  0011d	0f b7 34 45 62
	00 00 00	 movzx	 esi, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[eax*2+98]
  00125	0f b7 0c 85 84
	00 00 00	 movzx	 ecx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[eax*4+132]
  0012d	66 3b fe	 cmp	 di, si
  00130	74 0c		 je	 SHORT $LN15@RunTimeMag
  00132	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  00139	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0013c	03 c8		 add	 ecx, eax
$LN15@RunTimeMag:
  0013e	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 5054 : 				AttMgc.wCurAttackNum++;

  00141	66 8b 0d c6 00
	00 00		 mov	 cx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+198
  00148	66 8b 35 c2 00
	00 00		 mov	 si, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+194
  0014f	66 41		 inc	 cx
  00151	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+4
  00157	66 89 0d c6 00
	00 00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+198, cx
$LN8@RunTimeMag:

; 5055 : 			}
; 5056 : 			if (AttMgc.wCurAttackNum >= AttMgc.wNumAttacks || AttMgc.wMgcFrameCount[AttMgc.wCurAttackNum] > AttMgc.dwCurFrame2)

  0015e	66 3b ce	 cmp	 cx, si
  00161	73 13		 jae	 SHORT $LN17@RunTimeMag
  00163	0f b7 c1	 movzx	 eax, cx
  00166	0f b7 04 45 42
	00 00 00	 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[eax*2+66]
  0016e	3b c2		 cmp	 eax, edx
  00170	0f 86 0a ff ff
	ff		 jbe	 $LL2@RunTimeMag
$LN17@RunTimeMag:

; 5057 : 				break;
; 5058 : 		}
; 5059 : 	}
; 5060 : 	AttMgc.dwCurFrame2++;
; 5061 : 
; 5062 : 	return TRUE;

  00176	8b c3		 mov	 eax, ebx
  00178	42		 inc	 edx
  00179	5b		 pop	 ebx
  0017a	5f		 pop	 edi
  0017b	89 15 04 00 00
	00		 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+4, edx

; 5063 : }

  00181	5e		 pop	 esi
  00182	c3		 ret	 0
?RunTimeMagic@@YAHXZ ENDP				; RunTimeMagic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?BuildAttackMagicData@@YAHPAUaction@@0@Z
_TEXT	SEGMENT
_pMaster$GSCopy$1$ = -88				; size = 4
?AttMgc@@3UATTACK_MAGIC@@A$7 = -84			; size = 4
?AttMgc@@3UATTACK_MAGIC@@A$6 = -80			; size = 4
_pAttacker$GSCopy$1$ = -76				; size = 4
?AttMgc@@3UATTACK_MAGIC@@A$4 = -70			; size = 2
_charidx$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_pMaster$ = 8						; size = 4
_pAttacker$ = 12					; size = 4
?BuildAttackMagicData@@YAHPAUaction@@0@Z PROC		; BuildAttackMagicData, COMDAT

; 4905 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pMaster$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 4906 : 	int	i, idx = 0, midx, midy, count = 0;
; 4907 : 	int	charidx[MAX_NUM_ATTACKED];
; 4908 : 
; 4909 : 	memset(&AttMgc, 0, sizeof(AttMgc));

  00016	68 c8 00 00 00	 push	 200			; 000000c8H
  0001b	33 ff		 xor	 edi, edi
  0001d	89 45 a8	 mov	 DWORD PTR _pMaster$GSCopy$1$[ebp], eax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _pAttacker$[ebp]
  00023	33 f6		 xor	 esi, esi
  00025	57		 push	 edi
  00026	68 00 00 00 00	 push	 OFFSET ?AttMgc@@3UATTACK_MAGIC@@A
  0002b	89 45 b4	 mov	 DWORD PTR _pAttacker$GSCopy$1$[ebp], eax
  0002e	e8 00 00 00 00	 call	 _memset

; 4910 : 	memset(charidx, 0, sizeof(charidx));

  00033	6a 40		 push	 64			; 00000040H
  00035	8d 45 bc	 lea	 eax, DWORD PTR _charidx$[ebp]
  00038	57		 push	 edi
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _memset

; 4911 : 
; 4912 : 	iAttackedNum = 0;
; 4913 : 	iCurAttackedFinishNum = 0;
; 4914 : 
; 4915 : 	// BJ|Attacker's No( 0 - 19 )|12345678|Attacker's MP|
; 4916 : 
; 4917 : 	ATR_VCT_NO(pAttacker) = ATTACK_MAGIC_CASE;

  0003f	8b 45 b4	 mov	 eax, DWORD PTR _pAttacker$GSCopy$1$[ebp]
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	33 db		 xor	 ebx, ebx
  00047	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iAttackedNum@@3HA, ebx
  0004d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iCurAttackedFinishNum@@3HA, ebx
  00053	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00056	c6 00 c8	 mov	 BYTE PTR [eax], 200	; 000000c8H

; 4918 : 	ATR_MP(pAttacker) = get_num();

  00059	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0005e	8b 4d b4	 mov	 ecx, DWORD PTR _pAttacker$GSCopy$1$[ebp]
  00061	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 4919 : 	AttMgc.iPreMgcNum = get_num();

  00067	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0006c	a3 1c 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+28, eax

; 4920 : 	AttMgc.iCurMgcNum = get_num();

  00071	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00076	a3 20 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+32, eax

; 4921 : 	AttMgc.iPostMgcNum = get_num();

  0007b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00080	a3 24 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+36, eax

; 4922 : 	AttMgc.wAttackType = (WORD)get_num();

  00085	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0008a	66 a3 2a 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+42, ax

; 4923 : 	AttMgc.wAttackTimeSlice = (WORD)get_num();

  00090	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00095	66 a3 2c 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+44, ax

; 4924 : 	AttMgc.wShowType = (WORD)get_num();

  0009b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000a0	66 a3 2e 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+46, ax

; 4925 : 	AttMgc.wScreenX = (WORD)get_num();

  000a6	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000ab	66 89 45 ba	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A$4[ebp], ax
  000af	66 a3 30 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+48, ax

; 4926 : 	AttMgc.wScreenY = (WORD)get_num();

  000b5	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000ba	66 a3 32 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+50, ax

; 4927 : 	AttMgc.wPreMgcX = (WORD)get_num();

  000c0	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000c5	66 a3 34 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+52, ax

; 4928 : 	AttMgc.wPreMgcY = (WORD)get_num();

  000cb	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000d0	66 a3 36 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+54, ax

; 4929 : 	AttMgc.wPostMgcX = (WORD)get_num();

  000d6	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000db	66 a3 38 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+56, ax

; 4930 : 	AttMgc.wPostMgcY = (WORD)get_num();

  000e1	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000e6	66 a3 3a 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+58, ax

; 4931 : 	AttMgc.wPreMgcOnChar = (WORD)get_num();

  000ec	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000f1	66 a3 3c 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+60, ax

; 4932 : 	AttMgc.wCurMgcOnChar = (WORD)get_num();

  000f7	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  000fc	66 a3 3e 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+62, ax

; 4933 : 	AttMgc.wPostMgcOnChar = (WORD)get_num();

  00102	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00107	66 a3 40 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+64, ax

; 4934 : 	AttMgc.dwEQuake = (DWORD)get_num();

  0010d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00112	a3 08 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+8, eax

; 4935 : 	AttMgc.dwEQuakeSTime = (DWORD)get_num();

  00117	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0011c	89 45 b0	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A$6[ebp], eax
  0011f	a3 0c 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+12, eax

; 4936 : 	AttMgc.dwEQuakeETime = (DWORD)get_num();

  00124	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00129	89 45 ac	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A$7[ebp], eax
  0012c	a3 10 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+16, eax
$LL4@BuildAttac:

; 4937 : 
; 4938 : 	do
; 4939 : 	{
; 4940 : 		charidx[idx] = get_num();

  00131	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00136	89 44 b5 bc	 mov	 DWORD PTR _charidx$[ebp+esi*4], eax

; 4941 : 	} while (0XFF != charidx[idx] && ++idx);

  0013a	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0013f	74 18		 je	 SHORT $LN19@BuildAttac
  00141	83 c6 01	 add	 esi, 1
  00144	75 eb		 jne	 SHORT $LL4@BuildAttac

; 5015 : 	ATR_BODY_CNT(pMaster) = 1;
; 5016 : 	bRunAttMgc = TRUE;
; 5017 : 
; 5018 : 	return TRUE;
; 5019 : }

  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	33 c0		 xor	 eax, eax
  0014a	5b		 pop	 ebx
  0014b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014e	33 cd		 xor	 ecx, ebp
  00150	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c3		 ret	 0
$LN19@BuildAttac:

; 4942 : 
; 4943 : 	if (0 == idx)

  00159	85 f6		 test	 esi, esi
  0015b	75 13		 jne	 SHORT $LN30@BuildAttac

; 5015 : 	ATR_BODY_CNT(pMaster) = 1;
; 5016 : 	bRunAttMgc = TRUE;
; 5017 : 
; 5018 : 	return TRUE;
; 5019 : }

  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	33 c0		 xor	 eax, eax
  00161	5b		 pop	 ebx
  00162	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00165	33 cd		 xor	 ecx, ebp
  00167	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
$LN30@BuildAttac:

; 4944 : 		return FALSE;
; 4945 : 
; 4946 : 	while (0X12345678 != (AttackedInfo[iAttackedNum * 4] = get_num()))

  00170	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00175	a3 00 00 00 00	 mov	 DWORD PTR ?AttackedInfo@@3PAHA, eax
  0017a	3d 78 56 34 12	 cmp	 eax, 305419896		; 12345678H
  0017f	74 43		 je	 SHORT $LN6@BuildAttac
  00181	33 ff		 xor	 edi, edi
$LL5@BuildAttac:

; 4947 : 	{
; 4948 : 		AttackedInfo[iAttackedNum * 4 + 1] = get_num();

  00183	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00188	89 87 04 00 00
	00		 mov	 DWORD PTR ?AttackedInfo@@3PAHA[edi+4], eax

; 4949 : 		AttackedInfo[iAttackedNum * 4 + 2] = get_num();

  0018e	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00193	89 87 08 00 00
	00		 mov	 DWORD PTR ?AttackedInfo@@3PAHA[edi+8], eax

; 4950 : 		AttackedInfo[iAttackedNum * 4 + 3] = get_num();

  00199	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0019e	89 87 0c 00 00
	00		 mov	 DWORD PTR ?AttackedInfo@@3PAHA[edi+12], eax

; 4951 : 		iAttackedNum++;

  001a4	43		 inc	 ebx
  001a5	8b fb		 mov	 edi, ebx
  001a7	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  001ac	c1 e7 04	 shl	 edi, 4
  001af	89 87 00 00 00
	00		 mov	 DWORD PTR ?AttackedInfo@@3PAHA[edi], eax
  001b5	3d 78 56 34 12	 cmp	 eax, 305419896		; 12345678H
  001ba	75 c7		 jne	 SHORT $LL5@BuildAttac
  001bc	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iAttackedNum@@3HA, ebx
  001c2	33 ff		 xor	 edi, edi
$LN6@BuildAttac:

; 4952 : 	}
; 4953 : 
; 4954 : 	AttMgc.dwCurFrame1 = 0;
; 4955 : 	AttMgc.dwCurFrame2 = 0;
; 4956 : 	AttMgc.dwEQuakeSFrame = AttMgc.dwEQuakeSTime >> 4;

  001c4	8b 45 b0	 mov	 eax, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A$6[ebp]

; 4957 : 	AttMgc.dwEQuakeEFrame = AttMgc.dwEQuakeETime >> 4;
; 4958 : 
; 4959 : 	// ÊòØÂê¶ÊúâÂâçÁΩÆÂííÊúØ
; 4960 : 	(0XFFFFFFFF == AttMgc.iPreMgcNum) ? AttMgc.wRunPreMgc = TRUE : AttMgc.wRunPreMgc = FALSE;

  001c7	bb 01 00 00 00	 mov	 ebx, 1
  001cc	c1 e8 04	 shr	 eax, 4
  001cf	a3 14 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+20, eax
  001d4	8b 45 ac	 mov	 eax, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A$7[ebp]
  001d7	c1 e8 04	 shr	 eax, 4
  001da	83 3d 1c 00 00
	00 ff		 cmp	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+28, -1
  001e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A, 0
  001eb	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+4, 0
  001f5	a3 18 00 00 00	 mov	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+24, eax
  001fa	75 09		 jne	 SHORT $LN27@BuildAttac
  001fc	66 89 1d 28 00
	00 00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+40, bx
  00203	eb 08		 jmp	 SHORT $LN28@BuildAttac
$LN27@BuildAttac:
  00205	33 c0		 xor	 eax, eax
  00207	66 a3 28 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+40, ax
$LN28@BuildAttac:

; 4961 : 
; 4962 : 	// ÁªùÂØπ‰ΩçÁΩÆÊòæÁ§∫Ê≥ï
; 4963 : 	if (1 == AttMgc.wShowType)

  0020d	66 3b 1d 2e 00
	00 00		 cmp	 bx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+46
  00214	75 6e		 jne	 SHORT $LN21@BuildAttac

; 4964 : 	{
; 4965 : 		AttMgc.wNumAttacks = 1;
; 4966 : 		AttMgc.wCurAttackNum = 0;
; 4967 : 		AttMgc.posAttacked[0].x = AttMgc.wScreenX;
; 4968 : 		AttMgc.posAttacked[0].y = AttMgc.wScreenY;

  00216	66 8b 0d 32 00
	00 00		 mov	 cx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+50
  0021d	33 c0		 xor	 eax, eax
  0021f	66 a3 c6 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+198, ax
  00225	66 8b 45 ba	 mov	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A$4[ebp]
  00229	66 a3 82 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+130, ax

; 4969 : 		AttMgc.wAttackedIndex[0] = 20;		// ÂÖ®ÈÉ®‰∫∫ÂëòÁöÜÂêåÊó∂ÂëàÂèó‰º§Áä∂ÊÄÅ

  0022f	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00234	66 89 0d 84 00
	00 00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+132, cx

; 4970 : 		AttMgc.wMgcFrameCount[0] = 0;
; 4971 : 
; 4972 : 		// Ë¢´ÊîªÂáªÁöÑÊïå‰∫∫Á¥¢ÂºïÂè∑
; 4973 : 		for (i = 0; i < idx; i++)

  0023b	33 c9		 xor	 ecx, ecx
  0023d	66 a3 62 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+98, ax
  00243	33 c0		 xor	 eax, eax
  00245	66 89 1d c2 00
	00 00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+194, bx
  0024c	66 a3 42 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+66, ax
  00252	85 f6		 test	 esi, esi
  00254	7e 1c		 jle	 SHORT $LN8@BuildAttac
  00256	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL9@BuildAttac:

; 4974 : 			AttMgc.wAttackedIndex[i + 1] = charidx[i];

  00260	66 8b 44 8d bc	 mov	 ax, WORD PTR _charidx$[ebp+ecx*4]
  00265	66 89 04 4d 64
	00 00 00	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[ecx*2+100], ax
  0026d	41		 inc	 ecx
  0026e	3b ce		 cmp	 ecx, esi
  00270	7c ee		 jl	 SHORT $LL9@BuildAttac
$LN8@BuildAttac:

; 4975 : 
; 4976 : 		AttMgc.wAttackedIndex[i + 1] = 0XFF;

  00272	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00277	66 89 04 4d 64
	00 00 00	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[ecx*2+100], ax

; 4977 : 	}

  0027f	e9 0c 01 00 00	 jmp	 $LN17@BuildAttac
$LN21@BuildAttac:

; 4978 : 	// Â±Ö‰∏≠‰ΩçÁΩÆÊòæÁ§∫Ê≥ï
; 4979 : 	else{
; 4980 : 		// ÂííÊúØÁöÑÊñπÂºè‰∏∫ÂÖ®‰ΩìÂêåÊó∂ÊîªÂáª
; 4981 : 		if (2 == AttMgc.wAttackType || 4 == AttMgc.wAttackType){

  00284	66 a1 2a 00 00
	00		 mov	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+42
  0028a	b9 02 00 00 00	 mov	 ecx, 2
  0028f	66 3b c8	 cmp	 cx, ax
  00292	74 6c		 je	 SHORT $LN25@BuildAttac
  00294	b9 04 00 00 00	 mov	 ecx, 4
  00299	66 3b c8	 cmp	 cx, ax
  0029c	74 62		 je	 SHORT $LN25@BuildAttac

; 5001 : 		}else{// ÂçïÁã¨ÊîªÂáª
; 5002 : 			// Ë¢´ÊîªÂáªÁöÑÊïå‰∫∫Á¥¢ÂºïÂè∑
; 5003 : 			for (i = 0; i < idx; i++){

  0029e	33 c9		 xor	 ecx, ecx
  002a0	85 f6		 test	 esi, esi
  002a2	0f 8e e8 00 00
	00		 jle	 $LN17@BuildAttac
  002a8	66 8b 45 ba	 mov	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A$4[ebp]
  002ac	0f 1f 40 00	 npad	 4
$LL18@BuildAttac:

; 5004 : 				AttMgc.wNumAttacks++;

  002b0	66 ff 05 c2 00
	00 00		 inc	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+194

; 5005 : 				AttMgc.posAttacked[i].x = AttMgc.wScreenX;

  002b7	66 89 04 8d 82
	00 00 00	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[ecx*4+130], ax

; 5006 : 				AttMgc.posAttacked[i].y = AttMgc.wScreenY;

  002bf	0f b7 05 32 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+50
  002c6	66 89 04 8d 84
	00 00 00	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[ecx*4+132], ax

; 5007 : 				AttMgc.wAttackedIndex[i] = charidx[i];

  002ce	0f b7 44 8d bc	 movzx	 eax, WORD PTR _charidx$[ebp+ecx*4]
  002d3	66 89 04 4d 62
	00 00 00	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[ecx*2+98], ax

; 5008 : 				AttMgc.wMgcFrameCount[i] = count;

  002db	66 89 3c 4d 42
	00 00 00	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[ecx*2+66], di
  002e3	41		 inc	 ecx

; 5009 : 				count += AttMgc.wAttackTimeSlice >> 4;

  002e4	0f b7 05 2c 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+44
  002eb	c1 e8 04	 shr	 eax, 4
  002ee	03 f8		 add	 edi, eax
  002f0	3b ce		 cmp	 ecx, esi
  002f2	0f 8d 98 00 00
	00		 jge	 $LN17@BuildAttac

; 5001 : 		}else{// ÂçïÁã¨ÊîªÂáª
; 5002 : 			// Ë¢´ÊîªÂáªÁöÑÊïå‰∫∫Á¥¢ÂºïÂè∑
; 5003 : 			for (i = 0; i < idx; i++){

  002f8	66 a1 30 00 00
	00		 mov	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+48
  002fe	eb b0		 jmp	 SHORT $LL18@BuildAttac
$LN25@BuildAttac:

; 4982 : 			midx = 0;

  00300	33 d2		 xor	 edx, edx

; 4983 : 			midy = 0;

  00302	33 ff		 xor	 edi, edi
  00304	33 c9		 xor	 ecx, ecx

; 4984 : 			for (i = 0; i < idx; i++){

  00306	85 f6		 test	 esi, esi
  00308	7e 1c		 jle	 SHORT $LN11@BuildAttac
  0030a	66 0f 1f 44 00
	00		 npad	 6
$LL12@BuildAttac:

; 4985 : 				midx += p_party[charidx[i]]->x;

  00310	8b 44 8d bc	 mov	 eax, DWORD PTR _charidx$[ebp+ecx*4]
  00314	41		 inc	 ecx
  00315	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0031c	03 50 18	 add	 edx, DWORD PTR [eax+24]

; 4986 : 				midy += p_party[charidx[i]]->y;

  0031f	03 78 1c	 add	 edi, DWORD PTR [eax+28]
  00322	3b ce		 cmp	 ecx, esi
  00324	7c ea		 jl	 SHORT $LL12@BuildAttac
$LN11@BuildAttac:

; 4987 : 			}
; 4988 : 			midx = int(midx / idx);
; 4989 : 			midy = int(midy / idx);
; 4990 : 			AttMgc.wNumAttacks = 1;
; 4991 : 			AttMgc.wCurAttackNum = 0;

  00326	33 c0		 xor	 eax, eax
  00328	66 89 1d c2 00
	00 00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+194, bx
  0032f	66 a3 c6 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+198, ax

; 4992 : 			AttMgc.posAttacked[0].x = midx + AttMgc.wScreenX;
; 4993 : 			AttMgc.posAttacked[0].y = midy + AttMgc.wScreenY;
; 4994 : 			AttMgc.wAttackedIndex[0] = 20;		// ÂÖ®ÈÉ®‰∫∫ÂëòÁöÜÂêåÊó∂ÂëàÂèó‰º§Áä∂ÊÄÅ
; 4995 : 			AttMgc.wMgcFrameCount[0] = 0;
; 4996 : 			// Ë¢´ÊîªÂáªÁöÑÊïå‰∫∫Á¥¢ÂºïÂè∑
; 4997 : 			for (i = 0; i < idx; i++)

  00335	33 c9		 xor	 ecx, ecx
  00337	8b c2		 mov	 eax, edx
  00339	99		 cdq
  0033a	f7 fe		 idiv	 esi
  0033c	03 05 30 00 00
	00		 add	 eax, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+48
  00342	66 a3 82 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+130, ax
  00348	8b c7		 mov	 eax, edi
  0034a	99		 cdq
  0034b	f7 fe		 idiv	 esi
  0034d	66 03 05 32 00
	00 00		 add	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+50
  00354	66 a3 84 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+132, ax
  0035a	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0035f	66 a3 62 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+98, ax
  00365	33 c0		 xor	 eax, eax
  00367	66 a3 42 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+66, ax
  0036d	85 f6		 test	 esi, esi
  0036f	7e 12		 jle	 SHORT $LN14@BuildAttac
$LL15@BuildAttac:

; 4998 : 				AttMgc.wAttackedIndex[i + 1] = charidx[i];

  00371	66 8b 44 8d bc	 mov	 ax, WORD PTR _charidx$[ebp+ecx*4]
  00376	66 89 04 4d 64
	00 00 00	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[ecx*2+100], ax
  0037e	41		 inc	 ecx
  0037f	3b ce		 cmp	 ecx, esi
  00381	7c ee		 jl	 SHORT $LL15@BuildAttac
$LN14@BuildAttac:

; 4999 : 
; 5000 : 			AttMgc.wAttackedIndex[i + 1] = 0XFF;

  00383	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00388	66 89 14 4d 64
	00 00 00	 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A[ecx*2+100], dx
$LN17@BuildAttac:

; 5010 : 			}
; 5011 : 		}
; 5012 : 	}
; 5013 : 
; 5014 : 	ATR_VCT_NO(pAttacker) = ATTACK_MAGIC_CASE;

  00390	8b 45 b4	 mov	 eax, DWORD PTR _pAttacker$GSCopy$1$[ebp]
  00393	5f		 pop	 edi

; 5015 : 	ATR_BODY_CNT(pMaster) = 1;
; 5016 : 	bRunAttMgc = TRUE;
; 5017 : 
; 5018 : 	return TRUE;
; 5019 : }

  00394	5e		 pop	 esi
  00395	89 1d 00 00 00
	00		 mov	 DWORD PTR ?bRunAttMgc@@3HA, ebx
  0039b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0039e	8b c3		 mov	 eax, ebx
  003a0	c6 01 c8	 mov	 BYTE PTR [ecx], 200	; 000000c8H
  003a3	8b 4d a8	 mov	 ecx, DWORD PTR _pMaster$GSCopy$1$[ebp]
  003a6	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  003a9	88 59 54	 mov	 BYTE PTR [ecx+84], bl
  003ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003af	33 cd		 xor	 ecx, ebp
  003b1	5b		 pop	 ebx
  003b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b7	8b e5		 mov	 esp, ebp
  003b9	5d		 pop	 ebp
  003ba	c3		 ret	 0
?BuildAttackMagicData@@YAHPAUaction@@0@Z ENDP		; BuildAttackMagicData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?get_num@@YAHXZ
_TEXT	SEGMENT
tv278 = -4						; size = 4
?get_num@@YAHXZ PROC					; get_num, COMDAT

; 4137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4138 : 	int d0 = 0;
; 4139 : 	int d1 = 0;
; 4140 : 
; 4141 : 	while (1)
; 4142 : 	{
; 4143 : 		d0 = BattleCmd[command_point++];

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_point@@3HA
  0000a	56		 push	 esi
  0000b	0f be 81 00 00
	00 00		 movsx	 eax, BYTE PTR ?BattleCmd@@3PADA[ecx]
  00012	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00015	89 15 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, edx

; 4144 : 		if (d0 == NULL)

  0001b	85 c0		 test	 eax, eax
  0001d	74 2a		 je	 SHORT $LN22@get_num
  0001f	8b f2		 mov	 esi, edx
$LL2@get_num:

; 4146 : 		if (d0 >= '0' && d0 <= '9')		//???

  00021	83 f8 30	 cmp	 eax, 48			; 00000030H
  00024	7c 05		 jl	 SHORT $LN7@get_num
  00026	83 f8 39	 cmp	 eax, 57			; 00000039H
  00029	7e 26		 jle	 SHORT $LN23@get_num
$LN7@get_num:

; 4147 : 			break;						//??????
; 4148 : 		if (d0 >= 'A' && d0 <= 'F')		//?????

  0002b	83 f8 41	 cmp	 eax, 65			; 00000041H
  0002e	7c 05		 jl	 SHORT $LN8@get_num
  00030	83 f8 46	 cmp	 eax, 70			; 00000046H
  00033	7e 1c		 jle	 SHORT $LN23@get_num
$LN8@get_num:

; 4138 : 	int d0 = 0;
; 4139 : 	int d1 = 0;
; 4140 : 
; 4141 : 	while (1)
; 4142 : 	{
; 4143 : 		d0 = BattleCmd[command_point++];

  00035	0f be 82 00 00
	00 00		 movsx	 eax, BYTE PTR ?BattleCmd@@3PADA[edx]
  0003c	42		 inc	 edx
  0003d	89 15 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, edx
  00043	8b f2		 mov	 esi, edx

; 4144 : 		if (d0 == NULL)

  00045	85 c0		 test	 eax, eax
  00047	75 d8		 jne	 SHORT $LL2@get_num
$LN22@get_num:

; 4145 : 			return -1;

  00049	83 c8 ff	 or	 eax, -1
  0004c	5e		 pop	 esi

; 4175 : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN23@get_num:

; 4149 : 			break;						//??????
; 4150 : 	}
; 4151 : 	if (d0 >= 'A')		//?????
; 4152 : 		d1 = d0 - 'A' + 10;
; 4153 : 	else
; 4154 : 		d1 = d0 - '0';
; 4155 : 	while (1)
; 4156 : 	{
; 4157 : 		d0 = BattleCmd[command_point++];		//?Óû∞????Óéï?Óèù?

  00051	0f be 92 00 00
	00 00		 movsx	 edx, BYTE PTR ?BattleCmd@@3PADA[edx]
  00058	83 f8 41	 cmp	 eax, 65			; 00000041H
  0005b	53		 push	 ebx
  0005c	bb 30 00 00 00	 mov	 ebx, 48			; 00000030H
  00061	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00066	0f 4c cb	 cmovl	 ecx, ebx
  00069	89 5d fc	 mov	 DWORD PTR tv278[ebp], ebx
  0006c	46		 inc	 esi
  0006d	2b c1		 sub	 eax, ecx
  0006f	89 35 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, esi
  00075	8b de		 mov	 ebx, esi
  00077	57		 push	 edi

; 4158 : 		if (d0 == NULL)		//Óé∑???

  00078	85 d2		 test	 edx, edx
  0007a	74 3f		 je	 SHORT $LN25@get_num
  0007c	0f 1f 40 00	 npad	 4
$LL4@get_num:

; 4161 : 			break;
; 4162 : 		}
; 4163 : 		if (d0 < '0' || d0 > '9')		//??????

  00080	8b fa		 mov	 edi, edx
  00082	83 fa 30	 cmp	 edx, 48			; 00000030H
  00085	7c 05		 jl	 SHORT $LN13@get_num
  00087	83 fa 39	 cmp	 edx, 57			; 00000039H
  0008a	7e 08		 jle	 SHORT $LN14@get_num
$LN13@get_num:

; 4164 : 		{
; 4165 : 			if (d0 < 'A' || d0 > 'F')		//????????

  0008c	8d 4a bf	 lea	 ecx, DWORD PTR [edx-65]
  0008f	83 f9 05	 cmp	 ecx, 5
  00092	77 30		 ja	 SHORT $LN26@get_num
$LN14@get_num:

; 4149 : 			break;						//??????
; 4150 : 	}
; 4151 : 	if (d0 >= 'A')		//?????
; 4152 : 		d1 = d0 - 'A' + 10;
; 4153 : 	else
; 4154 : 		d1 = d0 - '0';
; 4155 : 	while (1)
; 4156 : 	{
; 4157 : 		d0 = BattleCmd[command_point++];		//?Óû∞????Óéï?Óèù?

  00094	0f be 96 00 00
	00 00		 movsx	 edx, BYTE PTR ?BattleCmd@@3PADA[esi]
  0009b	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  000a0	46		 inc	 esi
  000a1	83 ff 41	 cmp	 edi, 65			; 00000041H
  000a4	89 35 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, esi
  000aa	8b de		 mov	 ebx, esi
  000ac	0f 4c 4d fc	 cmovl	 ecx, DWORD PTR tv278[ebp]

; 4166 : 				break;						//Óé∑?
; 4167 : 		}
; 4168 : 		d1 = d1 << 4;		//???????

  000b0	c1 e0 04	 shl	 eax, 4
  000b3	2b c1		 sub	 eax, ecx
  000b5	03 c7		 add	 eax, edi
  000b7	85 d2		 test	 edx, edx
  000b9	75 c5		 jne	 SHORT $LL4@get_num
$LN25@get_num:

; 4159 : 		{
; 4160 : 			command_point--;

  000bb	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  000be	89 0d 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, ecx
$LN26@get_num:

; 4169 : 		if (d0 >= 'A')		//?????
; 4170 : 			d1 += d0 - 'A' + 10;
; 4171 : 		else
; 4172 : 			d1 += d0 - '0';
; 4173 : 	}
; 4174 : 	return d1;

  000c4	5f		 pop	 edi
  000c5	5b		 pop	 ebx
  000c6	5e		 pop	 esi

; 4175 : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
?get_num@@YAHXZ ENDP					; get_num
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?monster@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_d2$1 = -24						; size = 4
_charahurt$1$ = -20					; size = 4
_charahurt$1$ = -20					; size = 4
_idx$3$ = -20						; size = 4
_idx$1$ = -20						; size = 4
_a1$18$ = -20						; size = 4
_a3$2$ = -16						; size = 4
_d6$3$ = -12						; size = 4
_a1$17$ = -12						; size = 4
tv22917 = -12						; size = 4
_d1$ = -8						; size = 4
_d0$ = -4						; size = 4
$T2 = 8							; size = 4
_charahurt$1$ = 8					; size = 4
_j$1$ = 8						; size = 4
_charahurt$1$ = 8					; size = 4
_idx$4$ = 8						; size = 4
_idx$2$ = 8						; size = 4
_d6$2$ = 8						; size = 4
_i$1$ = 8						; size = 4
_a2$5$ = 8						; size = 4
tv22948 = 8						; size = 4
tv22938 = 8						; size = 4
tv22895 = 8						; size = 4
tv22443 = 8						; size = 4
tv21591 = 8						; size = 4
tv21436 = 8						; size = 4
tv20538 = 8						; size = 4
_dx$3 = 8						; size = 4
_a0$ = 8						; size = 4
?monster@@YAXPAUaction@@@Z PROC				; monster, COMDAT

; 6324 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _a0$[ebp]

; 6325 : 	int d0, d1, d6, d7, sav_command_point, idx;
; 6326 : 	ACTION *a1, *a2, *a3;
; 6327 : 	static ACTION *a0tmp[10];
; 6328 : 	static int a0mark[10];				// 0:Â∑≤Â∞Üaction release 1:Êú™
; 6329 : 	static int a0tmpcount;
; 6330 : 
; 6331 : 	static int ÂàùÂßãÂåñ = 0;
; 6332 : 	//JL HOOK
; 6333 : 	void JL_Âç°Ê°£Â§ç‰Ωç(ACTION *a0);
; 6334 : 	JL_Âç°Ê°£Â§ç‰Ωç(a0);

  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 ?JL_???Í»@@YAXPAUaction@@@Z ; JL_???Í»

; 6335 : 
; 6336 : 	switch (ATR_VCT_NO(a0))  //((ATR_EQU *)a->pYobi)->vct_no

  00012	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00015	83 c4 04	 add	 esp, 4
  00018	8a 0a		 mov	 cl, BYTE PTR [edx]
  0001a	0f b6 c1	 movzx	 eax, cl
  0001d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN1220@monster[eax]
  00024	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1221@monster[eax*4]
$LN99@monster:

; 6337 : 	{
; 6338 : 	case 0:		//ÂæÖÊú∫
; 6339 : 		ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????

  0002b	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3

; 6340 : 		if (ATR_VCT_NO(p_master) == 1)

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  0003a	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  0003d	80 3e 01	 cmp	 BYTE PTR [esi], 1
  00040	0f 85 b3 00 00
	00		 jne	 $LN1226@monster

; 6341 : 		{
; 6342 : 			a1 = ATR_COUNTER(p_master);		//??ÓéÅ???????

  00046	8b b6 08 01 00
	00		 mov	 esi, DWORD PTR [esi+264]

; 6343 : 			if (a1 != NULL && ATR_GROUP_FLG(a0) != ATR_GROUP_FLG(a1) && ATR_NAME(a1) != NULL)

  0004c	85 f6		 test	 esi, esi
  0004e	0f 84 a5 00 00
	00		 je	 $LN1226@monster
  00054	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00057	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  0005a	3a 41 5e	 cmp	 al, BYTE PTR [ecx+94]
  0005d	0f 84 96 00 00
	00		 je	 $LN1226@monster
  00063	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00067	0f 84 8c 00 00
	00		 je	 $LN1226@monster

; 6344 : 			{
; 6345 : 				//?Ó°°Óö†??
; 6346 : 				if (ATR_H_POS(a1) < lpDraw->xSize && ATR_H_POS(a1) > 64 && ATR_V_POS(a1) < lpDraw->ySize && ATR_V_POS(a1) > 0 - 64)

  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00072	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00075	3b 88 84 00 00
	00		 cmp	 ecx, DWORD PTR [eax+132]
  0007b	7d 7c		 jge	 SHORT $LN1226@monster
  0007d	83 f9 40	 cmp	 ecx, 64			; 00000040H
  00080	7e 77		 jle	 SHORT $LN1226@monster
  00082	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00085	3b 90 88 00 00
	00		 cmp	 edx, DWORD PTR [eax+136]
  0008b	7d 6c		 jge	 SHORT $LN1226@monster
  0008d	83 fa c0	 cmp	 edx, -64		; ffffffc0H
  00090	7e 67		 jle	 SHORT $LN1226@monster

; 6347 : 				{
; 6348 : 					if (ATR_STATUS(a1) <= JUJUTSU_1)		//??????ÓíúÓêπ?ÓöÖ??

  00092	83 be 90 00 00
	00 01		 cmp	 DWORD PTR [esi+144], 1
  00099	7f 5e		 jg	 SHORT $LN1226@monster

; 6349 : 					{
; 6350 : 						a1 = ATR_COUNTER(p_master);		//Óò©????????
; 6351 : 						d0 = ATR_H_POS(a1);				//Óò©?Óüµ??
; 6352 : 						d1 = ATR_V_POS(a1);
; 6353 : 						radar2(a0, d0, d1, 2);	//????

  0009b	6a 02		 push	 2
  0009d	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
  000a0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000a3	50		 push	 eax
  000a4	51		 push	 ecx
  000a5	57		 push	 edi
  000a6	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  000a9	e8 00 00 00 00	 call	 ?radar2@@YAHPAUaction@@HHH@Z ; radar2

; 6354 : 						//??Óüâ??????
; 6355 : 						d0 = ATR_CRS(a0) - ATR_CRS_OLD(a0);

  000ae	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	8b 9f 38 01 00
	00		 mov	 ebx, DWORD PTR [edi+312]
  000ba	8b d3		 mov	 edx, ebx
  000bc	0f b6 86 22 01
	00 00		 movzx	 eax, BYTE PTR [esi+290]
  000c3	2b d0		 sub	 edx, eax
  000c5	8b ca		 mov	 ecx, edx
  000c7	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 6356 : 						if (d0 < 0)

  000ca	79 05		 jns	 SHORT $LN104@monster

; 6357 : 							d0 = 0 - d0;

  000cc	f7 d9		 neg	 ecx
  000ce	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
$LN104@monster:

; 6358 : 						if (d0 >= 2)

  000d1	0f b6 c3	 movzx	 eax, bl
  000d4	85 d2		 test	 edx, edx
  000d6	89 45 08	 mov	 DWORD PTR tv20538[ebp], eax
  000d9	8b d0		 mov	 edx, eax
  000db	0f b6 c3	 movzx	 eax, bl
  000de	0f 49 d0	 cmovns	 edx, eax
  000e1	83 f9 02	 cmp	 ecx, 2
  000e4	7c 13		 jl	 SHORT $LN1226@monster

; 6359 : 						{
; 6360 : 							ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  000e6	0f b6 83 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[ebx]
  000ed	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 6361 : 							ATR_CRS_OLD(a0) = ATR_CRS(a0);

  000f3	88 96 22 01 00
	00		 mov	 BYTE PTR [esi+290], dl
$LN1226@monster:

; 6362 : 						}
; 6363 : 					}
; 6364 : 				}
; 6365 : 			}
; 6366 : 		}
; 6367 : 		//Ó°á???Óí∑???????
; 6368 : 		d0 = ATR_STATUS(a0);

  000f9	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  000ff	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 6369 : 		if (ATR_STATUS(a0) != 3 && ATR_STATUS(a0) != 4)

  00102	83 f8 03	 cmp	 eax, 3
  00105	74 30		 je	 SHORT $LN107@monster
  00107	83 f8 04	 cmp	 eax, 4
  0010a	74 2b		 je	 SHORT $LN107@monster

; 6370 : 		{
; 6371 : 			//?Óìñ??????Óòã????
; 6372 : 			if (BattleMyNo >= 20 || (ATR_ATTRIB(a0) & ACT_ATR_BTL_CMD_END)
; 6373 : #ifdef _PETSKILL_BATTLE_MODEL
; 6374 : 				|| ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL

  0010c	83 3d 00 00 00
	00 14		 cmp	 DWORD PTR ?BattleMyNo@@3HA, 20 ; BattleMyNo, 00000014H
  00113	7d 15		 jge	 SHORT $LN108@monster
  00115	f6 87 a4 00 00
	00 40		 test	 BYTE PTR [edi+164], 64	; 00000040H
  0011c	75 0c		 jne	 SHORT $LN108@monster
  0011e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00121	83 b8 24 01 00
	00 62		 cmp	 DWORD PTR [eax+292], 98	; 00000062H
  00128	75 0d		 jne	 SHORT $LN107@monster
$LN108@monster:

; 6375 : #endif
; 6376 : 				){
; 6377 : 				pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0012a	6a 00		 push	 0
  0012c	6a 00		 push	 0
  0012e	57		 push	 edi
  0012f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN107@monster:

; 6378 : 			}
; 6379 : 			//ËøôÈáåÂ∞ÜÂõæÁâáÈáçÊñ∞Âä†ËΩΩÂíåÊ∏≤Êüì wxy
; 6380 : 			//pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 6381 : 		}
; 6382 : #ifdef _PETSKILL_BATTLE_MODEL
; 6383 : 		// Ê£ÄÊü•Êç¢ÊàëÊîªÂáª‰∫ÜÊ≤°
; 6384 : 		if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL)

  00137	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0013a	83 be 24 01 00
	00 62		 cmp	 DWORD PTR [esi+292], 98	; 00000062H
  00141	0f 85 02 6e 00
	00		 jne	 $LN1058@monster

; 6385 : 		{
; 6386 : 			a1 = ATR_BODY_WORK(0, a0);	// ÂèñÂá∫Ë¢´ÊîªÂáªÁõÆÊ†á
; 6387 : 			// ÁÖßÂÖàÂêéÈ°∫Â∫èÊâßË°å
; 6388 : 			if (ATR_LONG_WORK(ATR_PLACE_NO(a0), a1) == ATR_INT_WORK2(p_master))

  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  0014c	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0014f	0f b6 96 1f 01
	00 00		 movzx	 edx, BYTE PTR [esi+287]
  00156	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00159	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0015c	8b 84 90 34 01
	00 00		 mov	 eax, DWORD PTR [eax+edx*4+308]
  00163	3b 81 2c 01 00
	00		 cmp	 eax, DWORD PTR [ecx+300]
  00169	0f 85 da 6d 00
	00		 jne	 $LN1058@monster

; 6389 : 			{
; 6390 : 				// ÂΩìÁõÆÊ†áÂõûÂà∞ÂæÖÊú∫Êó∂ÂÜçÊîªÂáª
; 6391 : 				if (ATR_VCT_NO(a1) == 0)

  0016f	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00172	8a 00		 mov	 al, BYTE PTR [eax]
  00174	84 c0		 test	 al, al
  00176	75 08		 jne	 SHORT $LN111@monster

; 6392 : 					ATR_VCT_NO(a0) = 2; // ÂºÄÂßãÊîªÂáª

  00178	c6 06 02	 mov	 BYTE PTR [esi], 2
  0017b	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0017e	8a 00		 mov	 al, BYTE PTR [eax]
$LN111@monster:

; 6393 : 				// ÂΩìÁõÆÊ†áÁ¶ªÂºÄÊàòÂú∫ÊàñÊ≠ª‰∫°Êó∂ÁªìÊùüÊîªÂáª
; 6394 : 				if (ATR_VCT_NO(a1) == VCT_NO_APPEAR || ATR_LIFE(a1) <= 0)

  00180	3c f9		 cmp	 al, 249			; 000000f9H
  00182	74 0a		 je	 SHORT $LN113@monster
  00184	83 7b 78 00	 cmp	 DWORD PTR [ebx+120], 0
  00188	0f 8f bb 6d 00
	00		 jg	 $LN1058@monster
$LN113@monster:

; 6395 : 				{
; 6396 : 					ATR_VCT_NO(a0) = 3; // ÁªìÊùüÊîªÂáª

  0018e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00191	c6 00 03	 mov	 BYTE PTR [eax], 3

; 6397 : 					ATR_BODY_WORK(0, a0) = NULL;	// Ê∏ÖÁ©∫

  00194	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00197	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c3		 ret	 0
$LN114@monster:

; 6398 : 				}
; 6399 : 			}
; 6400 : 		}
; 6401 : #endif
; 6402 : 		break;
; 6403 : 	case 1:		//ÂâçËøõ
; 6404 : 		ATR_SPD(a0) = 32;		//ÁßªÂä®ÈÄüÂ∫¶

  001a5	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H

; 6405 : 		a1 = ATR_BODY_WORK(0, a0);		//ÊïåÊñπÁöÑ‰ΩçÁΩÆ

  001af	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 6406 : 		d0 = ATR_H_POS(a1);

  001b2	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  001b5	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 6407 : 		d1 = ATR_V_POS(a1);

  001b8	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  001bb	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 6408 : 		radar(a0, &d0, &d1);	//????

  001be	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  001c1	50		 push	 eax
  001c2	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  001c5	50		 push	 eax
  001c6	57		 push	 edi
  001c7	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 6409 : 		ATR_CRS(a0) = d0;		//??????

  001cc	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  001cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d2	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 6410 : 		//??Óüâ??????
; 6411 : 		d0 = ATR_CRS(a0) - ATR_CRS_OLD(a0);

  001d8	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  001db	8b 75 fc	 mov	 esi, DWORD PTR _d0$[ebp]
  001de	8b ce		 mov	 ecx, esi
  001e0	0f b6 82 22 01
	00 00		 movzx	 eax, BYTE PTR [edx+290]
  001e7	2b c8		 sub	 ecx, eax
  001e9	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 6412 : 		if (d0 < 0)

  001ec	79 05		 jns	 SHORT $LN115@monster

; 6413 : 			d0 = 0 - d0;

  001ee	f7 d9		 neg	 ecx
  001f0	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
$LN115@monster:

; 6414 : 		if (d0 >= 2)

  001f3	83 f9 02	 cmp	 ecx, 2
  001f6	7c 19		 jl	 SHORT $LN116@monster

; 6415 : 		{
; 6416 : 			ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  001f8	0f b6 86 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[esi]
  001ff	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 6417 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0);

  00205	8a 87 38 01 00
	00		 mov	 al, BYTE PTR [edi+312]
  0020b	88 82 22 01 00
	00		 mov	 BYTE PTR [edx+290], al
$LN116@monster:

; 6418 : 		}
; 6419 : 		if (d1 <= 32 * 2)

  00211	83 7d f8 40	 cmp	 DWORD PTR _d1$[ebp], 64	; 00000040H
  00215	8b 87 44 01 00
	00		 mov	 eax, DWORD PTR [edi+324]
  0021b	0f 8f bf 00 00
	00		 jg	 $LN117@monster

; 6420 : 		{	//Âà∞Ëææ
; 6421 : #ifdef _PIRATE_ANM			
; 6422 : 			if (ATR_CHR_NO(a0) == 101491)

  00221	3d 73 8c 01 00	 cmp	 eax, 101491		; 00018c73H
  00226	75 0a		 jne	 SHORT $LN119@monster

; 6423 : 				ATR_CHR_NO(a0) = 101490;

  00228	c7 87 44 01 00
	00 72 8c 01 00	 mov	 DWORD PTR [edi+324], 101490 ; 00018c72H
$LN119@monster:

; 6424 : #endif
; 6425 : 			ATR_FIRST_FLG(a0) = 0;		//????????

  00232	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00235	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 6426 : 			ATR_HIT_STOP(a0) = 0;		//??????????

  0023c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0023f	c6 40 5c 00	 mov	 BYTE PTR [eax+92], 0

; 6427 : #ifdef _PETSKILL_BATTLE_MODEL
; 6428 : 			if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL)

  00243	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00246	83 b8 24 01 00
	00 62		 cmp	 DWORD PTR [eax+292], 98	; 00000062H
  0024d	75 08		 jne	 SHORT $LN120@monster

; 6429 : 				ATR_VCT_NO(a0) = 0; // Âà∞Ëææ‰πãÂêéÂÖàÂæÖÊú∫

  0024f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00252	e9 99 00 00 00	 jmp	 $LN127@monster
$LN120@monster:

; 6430 : 			else
; 6431 : #endif
; 6432 : 			{
; 6433 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_VICARIOUS)

  00257	f7 40 60 00 02
	00 00		 test	 DWORD PTR [eax+96], 512	; 00000200H
  0025e	74 5e		 je	 SHORT $LN122@monster

; 6434 : 				{	//Óë≤Óï©??????
; 6435 : 					ATR_VCT_NO(a0) = 65;		//Óë≤Óï©??????Óïò?

  00260	c6 00 41	 mov	 BYTE PTR [eax], 65	; 00000041H

; 6436 : 					ATR_BODY_WORK(1, a0) = ATR_BODY_WORK(0, a0);		//Óò©????Óï§Óùç

  00263	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00266	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00269	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 6437 : 					a1 = ATR_BODY_WORK(0, a0);	//??Óéî???ÓéÅ???
; 6438 : 					ATR_BODY_WORK(1, a1) = a0;	//

  0026c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0026f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00272	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00275	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 6439 : 					a1 = p_party[get_num()];	//Óë≤Óï©??????????

  00278	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0027d	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 6440 : #ifdef _ATTACK_EFFECT
; 6441 : 					//‰øÆÊ≠£Âø†Áä¨  xiezi
; 6442 : 					if (BattleCmd[command_point] == 's')

  00284	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  00289	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  00290	75 0e		 jne	 SHORT $LN124@monster

; 6443 : 						ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  00292	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00297	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0029a	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
$LN124@monster:

; 6444 : #endif
; 6445 : 					ATR_VCT_NO(a1) = 69;		//??????Óù∏Óçï?

  002a0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002a3	c6 00 45	 mov	 BYTE PTR [eax], 69	; 00000045H

; 6446 : 					ATR_FIRST_FLG(a1) = 0;		//

  002a6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002a9	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 6447 : 					ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);		//?ÓôÆÓìè??????

  002b0	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  002b3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  002b6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002b9	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 6448 : 				}

  002bc	eb 32		 jmp	 SHORT $LN127@monster
$LN122@monster:

; 6449 : 				else if (ATR_SYNC_FLG(a0))		//ÓôØ?????

  002be	80 b8 23 01 00
	00 00		 cmp	 BYTE PTR [eax+291], 0
  002c5	74 14		 je	 SHORT $LN125@monster

; 6450 : 				{
; 6451 : 					ATR_VCT_NO(a0) = 19;		//ÓôØ???Óïò??

  002c7	c6 00 13	 mov	 BYTE PTR [eax], 19	; 00000013H

; 6452 : 					a1 = ATR_BODY_WORK(0, a0);		//??ÓéÅÓéï?Óèù?
; 6453 : 					ATR_LONG_WORK(0, a1)--;		//???Óëò

  002ca	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  002cd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002d0	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  002d3	ff 88 34 01 00
	00		 dec	 DWORD PTR [eax+308]

; 6454 : 				}

  002d9	eb 15		 jmp	 SHORT $LN127@monster
$LN125@monster:

; 6455 : 				else	//andy_bug
; 6456 : 					ATR_VCT_NO(a0) = 2;		//???

  002db	c6 00 02	 mov	 BYTE PTR [eax], 2

; 6457 : 			}
; 6458 : 		}

  002de	eb 10		 jmp	 SHORT $LN127@monster
$LN117@monster:

; 6459 : 		else
; 6460 : 		{
; 6461 : #ifndef _PIRATE_ANM			
; 6462 : 			gemini(a0);		//?ÓôÆ
; 6463 : #else
; 6464 : 			if (ATR_CHR_NO(a0) != 101490)

  002e0	3d 72 8c 01 00	 cmp	 eax, 101490		; 00018c72H
  002e5	74 09		 je	 SHORT $LN127@monster

; 6465 : 				gemini(a0);		//?ÓôÆ

  002e7	57		 push	 edi
  002e8	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  002ed	83 c4 04	 add	 esp, 4
$LN127@monster:

; 6466 : #endif
; 6467 : 		}
; 6468 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  002f0	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 6469 : #ifndef _PIRATE_ANM
; 6470 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 6471 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);	
; 6472 : #else		
; 6473 : 		if (ATR_CHR_NO(a0) == 101490)

  002fa	81 bf 44 01 00
	00 72 8c 01 00	 cmp	 DWORD PTR [edi+324], 101490 ; 00018c72H
  00304	0f 85 e4 4e 00
	00		 jne	 $LN839@monster

; 6474 : 		{
; 6475 : 			pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP);

  0030a	6a 01		 push	 1
  0030c	6a 00		 push	 0
  0030e	57		 push	 edi
  0030f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00314	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6476 : 			if (a0->bmpNo == 301137)

  00317	81 bf 9c 00 00
	00 51 98 04 00	 cmp	 DWORD PTR [edi+156], 301137 ; 00049851H
  00321	0f 85 22 6c 00
	00		 jne	 $LN1058@monster

; 6477 : 				ATR_CHR_NO(a0) = 101491;

  00327	c7 87 44 01 00
	00 73 8c 01 00	 mov	 DWORD PTR [edi+324], 101491 ; 00018c73H
  00331	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  00332	5e		 pop	 esi
  00333	5b		 pop	 ebx
  00334	8b e5		 mov	 esp, ebp
  00336	5d		 pop	 ebp
  00337	c3		 ret	 0
$LN131@monster:

; 6478 : 		}
; 6479 : 		else
; 6480 : 		{
; 6481 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 6482 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 6483 : 		}
; 6484 : #endif
; 6485 : 		break;
; 6486 : 	case 2:		//ÊîªÂáª
; 6487 : 		if (ATR_HIT_STOP(a0))			//??????????

  00338	8a 42 5c	 mov	 al, BYTE PTR [edx+92]
  0033b	84 c0		 test	 al, al
  0033d	74 0b		 je	 SHORT $LN133@monster

; 6488 : 		{
; 6489 : 			if (--ATR_HIT_STOP(a0))		//??????????

  0033f	2c 01		 sub	 al, 1
  00341	88 42 5c	 mov	 BYTE PTR [edx+92], al
  00344	0f 85 ff 6b 00
	00		 jne	 $LN1058@monster
$LN133@monster:

; 6490 : 				break;
; 6491 : 		}
; 6492 : 		a1 = ATR_BODY_WORK(0, a0);

  0034a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 6493 : #ifdef _PETSKILL_BATTLE_MODEL
; 6494 : 		if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL && ATR_FIRST_FLG(a0) == 0 && ATR_INT_WORK3(a0) == 0)

  0034d	8b c8		 mov	 ecx, eax
  0034f	8b d0		 mov	 edx, eax
  00351	83 b8 24 01 00
	00 62		 cmp	 DWORD PTR [eax+292], 98	; 00000062H
  00358	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0035b	75 73		 jne	 SHORT $LN134@monster
  0035d	80 b8 1e 01 00
	00 00		 cmp	 BYTE PTR [eax+286], 0
  00364	75 6a		 jne	 SHORT $LN134@monster
  00366	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [eax+304], 0
  0036d	75 61		 jne	 SHORT $LN134@monster

; 6495 : 		{
; 6496 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_VICARIOUS)			// Âø†Áä¨

  0036f	f7 40 60 00 02
	00 00		 test	 DWORD PTR [eax+96], 512	; 00000200H
  00376	74 49		 je	 SHORT $LN135@monster

; 6497 : 			{
; 6498 : 				ATR_VCT_NO(a0) = 65;							// ÊîªÂáªÁâ©‰ª∂ÂÖàËøõË°åÁ≠âÂæÖ

  00378	c6 00 41	 mov	 BYTE PTR [eax], 65	; 00000041H

; 6499 : 				ATR_BODY_WORK(1, a1) = a0;						// ÊääÊîªÂáªÁâ©‰ª∂ËÆ∞ÂΩïÂà∞‰∏ª‰∫∫Ë∫´‰∏ä,‰πãÂêé‰ºöÁî®Âà∞

  0037b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0037e	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 6500 : 				a1 = p_party[ATR_LONG_WORK(0, a0)];				// ÂèñÂá∫ÂÆ†Áâ©ÁöÑ action

  00381	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00384	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  0038a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 6501 : 				ATR_VCT_NO(a1) = 69;							// ÊòæÁ§∫ damage ÁöÑÂ≠ó

  00391	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00394	c6 00 45	 mov	 BYTE PTR [eax], 69	; 00000045H

; 6502 : 				ATR_FIRST_FLG(a1) = 0;

  00397	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0039a	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 6503 : 				ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);	// ÂÆ†Áâ©ÁöÑÂâçËøõÁõÆÊ†áÊòØ‰∏ª‰∫∫

  003a1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  003a4	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  003a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003aa	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 6504 : 				ATR_INT_WORK3(a0) = 1;

  003ad	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  003b0	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  003b1	5e		 pop	 esi
  003b2	5b		 pop	 ebx
  003b3	c7 80 30 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+304], 1
  003bd	8b e5		 mov	 esp, ebp
  003bf	5d		 pop	 ebp
  003c0	c3		 ret	 0
$LN135@monster:

; 6505 : 				break;
; 6506 : 			}
; 6507 : 			ATR_SYNC_FLG(a1) = 1;

  003c1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003c4	c6 80 23 01 00
	00 01		 mov	 BYTE PTR [eax+291], 1
  003cb	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  003ce	8b d1		 mov	 edx, ecx
$LN134@monster:

; 6508 : 		}
; 6509 : #endif
; 6510 : 		if (ATR_FIRST_FLG(a0) == 0)			//???????

  003d0	80 b9 1e 01 00
	00 00		 cmp	 BYTE PTR [ecx+286], 0
  003d7	0f 85 57 02 00
	00		 jne	 $LN136@monster

; 6511 : 		{
; 6512 : 			ATR_HIT(a0) = 0;				//?????????

  003dd	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0

; 6513 : 			ATR_HIT_TIMING(a0) = 0;			//???Óé∑???????

  003e7	c6 42 5d 00	 mov	 BYTE PTR [edx+93], 0

; 6514 : 
; 6515 : 			d0 = ATR_H_POS(a1);				//Óò©?Óüµ??

  003eb	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  003ee	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 6516 : 			d1 = ATR_V_POS(a1);

  003f1	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003f4	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 6517 : 			radar(a0, &d0, &d1);	//????

  003f7	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  003fa	50		 push	 eax
  003fb	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  003fe	50		 push	 eax
  003ff	57		 push	 edi
  00400	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 6518 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = d0;		//???ÓüïÓîº

  00405	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00408	83 c4 0c	 add	 esp, 12			; 0000000cH
  0040b	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  00411	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00414	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  00417	88 81 22 01 00
	00		 mov	 BYTE PTR [ecx+290], al

; 6519 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];		/* ????? */

  0041d	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00420	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  00427	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 6520 : 			//??????????
; 6521 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_G_CRASH)

  0042d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00430	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00433	a9 00 01 00 00	 test	 eax, 256		; 00000100H
  00438	74 12		 je	 SHORT $LN137@monster

; 6522 : 				//????????Óù∏Óçï
; 6523 : 				set_damage_num(a0, 12, -64 + 16);

  0043a	6a d0		 push	 -48			; ffffffd0H
  0043c	6a 0c		 push	 12			; 0000000cH
  0043e	57		 push	 edi
  0043f	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00444	83 c4 0c	 add	 esp, 12			; 0000000cH
  00447	e9 5d 01 00 00	 jmp	 $LN160@monster
$LN137@monster:

; 6524 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_TOOEH)

  0044c	a9 00 80 00 00	 test	 eax, 32768		; 00008000H
  00451	74 12		 je	 SHORT $LN139@monster

; 6525 : 				set_damage_num(a0, 29, -64 + 16);

  00453	6a d0		 push	 -48			; ffffffd0H
  00455	6a 1d		 push	 29			; 0000001dH
  00457	57		 push	 edi
  00458	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  0045d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00460	e9 44 01 00 00	 jmp	 $LN160@monster
$LN139@monster:

; 6526 : #ifdef _ATTDOUBLE_ATTACK
; 6527 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_ATTDOUBLE)

  00465	a9 00 00 01 00	 test	 eax, 65536		; 00010000H
  0046a	74 61		 je	 SHORT $LN141@monster

; 6528 : 			{
; 6529 : 				int skill = ATR_BATTLEGRANO(a0);
; 6530 : 				switch (skill)

  0046c	8b 81 44 02 00
	00		 mov	 eax, DWORD PTR [ecx+580]
  00472	83 c0 ba	 add	 eax, -70		; ffffffbaH
  00475	83 f8 03	 cmp	 eax, 3
  00478	0f 87 2b 01 00
	00		 ja	 $LN160@monster
  0047e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1222@monster[eax*4]
$LN143@monster:

; 6531 : 				{
; 6532 : 				case 70:
; 6533 : 					set_damage_num(a0, 25, -64 + 16);

  00485	6a d0		 push	 -48			; ffffffd0H
  00487	6a 19		 push	 25			; 00000019H
  00489	57		 push	 edi
  0048a	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  0048f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6534 : 					break;

  00492	e9 12 01 00 00	 jmp	 $LN160@monster
$LN144@monster:

; 6535 : 				case 71:
; 6536 : 					set_damage_num(a0, 26, -64 + 16);

  00497	6a d0		 push	 -48			; ffffffd0H
  00499	6a 1a		 push	 26			; 0000001aH
  0049b	57		 push	 edi
  0049c	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  004a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6537 : 					break;

  004a4	e9 00 01 00 00	 jmp	 $LN160@monster
$LN145@monster:

; 6538 : 				case 72:
; 6539 : 					set_damage_num(a0, 27, -64 + 16);

  004a9	6a d0		 push	 -48			; ffffffd0H
  004ab	6a 1b		 push	 27			; 0000001bH
  004ad	57		 push	 edi
  004ae	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  004b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6540 : 					break;

  004b6	e9 ee 00 00 00	 jmp	 $LN160@monster
$LN146@monster:

; 6541 : 				case 73:
; 6542 : 					set_damage_num(a0, 28, -64 + 16);

  004bb	6a d0		 push	 -48			; ffffffd0H
  004bd	6a 1c		 push	 28			; 0000001cH
  004bf	57		 push	 edi
  004c0	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  004c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6543 : 					break;
; 6544 : 				}
; 6545 : 			}

  004c8	e9 dc 00 00 00	 jmp	 $LN160@monster
$LN141@monster:

; 6546 : 			else if (ATR_ATTACK_KIND(0, a0) & BCF_MODIFY)

  004cd	a9 00 00 20 00	 test	 eax, 2097152		; 00200000H
  004d2	74 5e		 je	 SHORT $LN147@monster

; 6547 : 			{
; 6548 : 				int skill = ATR_BATTLEGRANO(a0);
; 6549 : 
; 6550 : 				switch (skill)

  004d4	8b 81 44 02 00
	00		 mov	 eax, DWORD PTR [ecx+580]
  004da	83 c0 b6	 add	 eax, -74		; ffffffb6H
  004dd	83 f8 03	 cmp	 eax, 3
  004e0	0f 87 c3 00 00
	00		 ja	 $LN160@monster
  004e6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1223@monster[eax*4]
$LN149@monster:

; 6551 : 				{
; 6552 : 				case 74://74
; 6553 : 					set_damage_num(a0, 32, -64 + 16);

  004ed	6a d0		 push	 -48			; ffffffd0H
  004ef	6a 20		 push	 32			; 00000020H
  004f1	57		 push	 edi
  004f2	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  004f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6554 : 					break;

  004fa	e9 aa 00 00 00	 jmp	 $LN160@monster
$LN150@monster:

; 6555 : 				case 75://75
; 6556 : 					set_damage_num(a0, 33, -64 + 16);

  004ff	6a d0		 push	 -48			; ffffffd0H
  00501	6a 21		 push	 33			; 00000021H
  00503	57		 push	 edi
  00504	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00509	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6557 : 					break;

  0050c	e9 98 00 00 00	 jmp	 $LN160@monster
$LN151@monster:

; 6558 : 				case 76://76
; 6559 : 					set_damage_num(a0, 34, -64 + 16);

  00511	6a d0		 push	 -48			; ffffffd0H
  00513	6a 22		 push	 34			; 00000022H
  00515	57		 push	 edi
  00516	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  0051b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6560 : 					break;

  0051e	e9 86 00 00 00	 jmp	 $LN160@monster
$LN152@monster:

; 6561 : 				case 77://77
; 6562 : 					set_damage_num(a0, 35, -64 + 16);

  00523	6a d0		 push	 -48			; ffffffd0H
  00525	6a 23		 push	 35			; 00000023H
  00527	57		 push	 edi
  00528	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  0052d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6563 : 					break;
; 6564 : 				}
; 6565 : 			}

  00530	eb 77		 jmp	 SHORT $LN160@monster
$LN147@monster:

; 6566 : #endif
; 6567 : #ifdef _SKILL_ROAR  //ÂÆ†ÊäÄ:Â§ßÂêº(ÂÖãÂπ¥ÂÖΩ)
; 6568 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_ATTROAR)

  00532	a9 00 00 02 00	 test	 eax, 131072		; 00020000H
  00537	74 19		 je	 SHORT $LN153@monster

; 6569 : 			{
; 6570 : 				set_damage_num(a0, 22, -64 + 16);

  00539	6a d0		 push	 -48			; ffffffd0H
  0053b	6a 16		 push	 22			; 00000016H
  0053d	57		 push	 edi
  0053e	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00543	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6571 : 				ATR_ROAR(a1) = 2;

  00546	c7 86 d4 01 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+468], 2

; 6572 : 			}

  00550	eb 57		 jmp	 SHORT $LN160@monster
$LN153@monster:

; 6573 : #endif
; 6574 : #ifdef _SKILL_SELFEXPLODE //Ëá™ÁàÜ
; 6575 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_ATTSELFEXPLODE)

  00552	a9 00 00 04 00	 test	 eax, 262144		; 00040000H
  00557	74 19		 je	 SHORT $LN155@monster

; 6576 : 			{
; 6577 : 				ATR_SELFEXPLODE(a0) = 1;
; 6578 : 				set_damage_num(a0, 23, -64 + 16);

  00559	6a d0		 push	 -48			; ffffffd0H
  0055b	6a 17		 push	 23			; 00000017H
  0055d	57		 push	 edi
  0055e	c7 87 d8 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+472], 1
  00568	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  0056d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6579 : 			}

  00570	eb 37		 jmp	 SHORT $LN160@monster
$LN155@monster:

; 6580 : #endif
; 6581 : #ifdef _PETSKILL_EXPLODE //ÁàÜÂºπ
; 6582 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_EXPLODE)

  00572	a9 00 00 00 20	 test	 eax, 536870912		; 20000000H
  00577	74 16		 je	 SHORT $LN157@monster

; 6583 : 			{
; 6584 : 				//ATR_SELFEXPLODE(a0) = 1;
; 6585 : 				ATR_LIFE(a0) = 1;
; 6586 : 				set_damage_num(a0, 23, -64 + 16);

  00579	6a d0		 push	 -48			; ffffffd0H
  0057b	6a 17		 push	 23			; 00000017H
  0057d	57		 push	 edi
  0057e	c7 47 78 01 00
	00 00		 mov	 DWORD PTR [edi+120], 1
  00585	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  0058a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6587 : 			}

  0058d	eb 1a		 jmp	 SHORT $LN160@monster
$LN157@monster:

; 6588 : #endif
; 6589 : 			else
; 6590 : 			{
; 6591 : 				//andy_fall
; 6592 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_FALL)

  0058f	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  00594	74 13		 je	 SHORT $LN160@monster

; 6593 : 				{
; 6594 : 					if (ATR_RIDE(a1) == 1)

  00596	83 be 94 01 00
	00 01		 cmp	 DWORD PTR [esi+404], 1
  0059d	75 0a		 jne	 SHORT $LN160@monster

; 6595 : 					{
; 6596 : 						//set_damage_num(a0, 12, -64+16); //ËêΩÈ©¨ÊúØÊöÇ‰∏çËÆæÂõæ
; 6597 : 						ATR_PETFALL(a1) = 1;

  0059f	c7 86 bc 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+444], 1
$LN160@monster:

; 6598 : 					}
; 6599 : 				}
; 6600 : 			}
; 6601 : 			//#ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6602 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ATTPREPROSKILL)

  005a9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  005ac	8b c8		 mov	 ecx, eax
  005ae	f7 40 60 00 00
	40 00		 test	 DWORD PTR [eax+96], 4194304 ; 00400000H
  005b5	74 12		 je	 SHORT $LN161@monster

; 6603 : 				set_damage_num(a1, 41, -64 + 25);

  005b7	6a d9		 push	 -39			; ffffffd9H
  005b9	6a 29		 push	 41			; 00000029H
  005bb	56		 push	 esi
  005bc	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  005c1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  005c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  005c7	8b c8		 mov	 ecx, eax
$LN161@monster:

; 6604 : 			//#endif
; 6605 : 			//ÓôØ????Óë≤Óï©????
; 6606 : 			if (ATR_SYNC_FLG(a0))

  005c9	80 b8 23 01 00
	00 00		 cmp	 BYTE PTR [eax+291], 0
  005d0	74 07		 je	 SHORT $LN162@monster

; 6607 : 				d0 = 0;

  005d2	33 c0		 xor	 eax, eax
  005d4	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  005d7	eb 1b		 jmp	 SHORT $LN165@monster
$LN162@monster:

; 6608 : 			else
; 6609 : 			{
; 6610 : #ifdef _PETSKILL_BATTLE_MODEL
; 6611 : 				if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL)

  005d9	83 b8 24 01 00
	00 62		 cmp	 DWORD PTR [eax+292], 98	; 00000062H
  005e0	75 07		 jne	 SHORT $LN164@monster

; 6612 : 					d0 = 0;

  005e2	33 c0		 xor	 eax, eax
  005e4	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  005e7	eb 0b		 jmp	 SHORT $LN165@monster
$LN164@monster:

; 6613 : 				else
; 6614 : #endif
; 6615 : 					d0 = get_next_flg();		//?????Óöá?????

  005e9	e8 00 00 00 00	 call	 ?get_next_flg@@YAHXZ	; get_next_flg
  005ee	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  005f1	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN165@monster:

; 6616 : 			}
; 6617 : 			if (d0 & ATT_COUNTER)			//??????????

  005f4	a8 10		 test	 al, 16			; 00000010H
  005f6	74 1a		 je	 SHORT $LN166@monster

; 6618 : 			{
; 6619 : 				ATR_COUNTER_FLG(a0) = 1;

  005f8	c6 81 0c 01 00
	00 01		 mov	 BYTE PTR [ecx+268], 1

; 6620 : 				ATR_COUNTER_FLG(a1) = 1;

  005ff	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00602	c6 80 0c 01 00
	00 01		 mov	 BYTE PTR [eax+268], 1

; 6621 : 				ATR_STIMER(a0) = 255;

  00609	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0060c	c6 40 01 ff	 mov	 BYTE PTR [eax+1], 255	; 000000ffH

; 6622 : 			}

  00610	eb 18		 jmp	 SHORT $LN167@monster
$LN166@monster:

; 6623 : 			else
; 6624 : 			{
; 6625 : 				ATR_COUNTER_FLG(a0) = 0;

  00612	c6 81 0c 01 00
	00 00		 mov	 BYTE PTR [ecx+268], 0

; 6626 : 				ATR_COUNTER_FLG(a1) = 0;

  00619	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0061c	c6 80 0c 01 00
	00 00		 mov	 BYTE PTR [eax+268], 0

; 6627 : 				ATR_STIMER(a0) = 20;

  00623	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00626	c6 40 01 14	 mov	 BYTE PTR [eax+1], 20	; 00000014H
$LN167@monster:

; 6628 : 			}
; 6629 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  0062a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0062d	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
$LN136@monster:

; 6630 : 		}
; 6631 : 		//ATT_AKO1				
; 6632 : #ifdef _PETSKILL_ANTINTER
; 6633 : 		if (ATR_VCT_NO(a1) >= VCT_NO_DIE && (ATR_ATTACK_KIND(0, a1) & (1 << 28)))		//Óò©?Ó†å??

  00634	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00637	80 38 fa	 cmp	 BYTE PTR [eax], 250	; 000000faH
  0063a	72 5c		 jb	 SHORT $LN168@monster
  0063c	f7 40 60 00 00
	00 10		 test	 DWORD PTR [eax+96], 268435456 ; 10000000H
  00643	74 53		 je	 SHORT $LN168@monster

; 6634 : #else
; 6635 : 		if (ATR_VCT_NO(a1) >= VCT_NO_DIE)		//Óò©?Ó†å??
; 6636 : #endif
; 6637 : 		{
; 6638 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER && ATR_COUNTER(p_master) != a0)		//???????

  00645	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00648	f6 41 60 10	 test	 BYTE PTR [ecx+96], 16	; 00000010H
  0064c	74 14		 je	 SHORT $LN169@monster
  0064e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00653	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00656	39 b8 08 01 00
	00		 cmp	 DWORD PTR [eax+264], edi
  0065c	0f 85 8a 17 00
	00		 jne	 $LN405@monster
$LN169@monster:

; 6639 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 6640 : 			else
; 6641 : 			{
; 6642 : 				ATR_VCT_NO(a0) = 3;

  00662	c6 01 03	 mov	 BYTE PTR [ecx], 3

; 6643 : 				ATR_STIMER(a0) = 20;

  00665	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00668	c6 40 01 14	 mov	 BYTE PTR [eax+1], 20	; 00000014H
$LN1255@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0066c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0066f	83 b8 24 01 00
	00 62		 cmp	 DWORD PTR [eax+292], 98	; 00000062H
  00676	0f 85 cd 68 00
	00		 jne	 $LN1058@monster
  0067c	0f b6 88 1f 01
	00 00		 movzx	 ecx, BYTE PTR [eax+287]
  00683	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00686	5f		 pop	 edi
  00687	5e		 pop	 esi
  00688	5b		 pop	 ebx
  00689	c7 84 88 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+ecx*4+308], 0
  00694	8b e5		 mov	 esp, ebp
  00696	5d		 pop	 ebp
  00697	c3		 ret	 0
$LN168@monster:

; 6644 : #ifdef _PETSKILL_BATTLE_MODEL
; 6645 : 				// ÊîªÂáªÂÆåÊØï
; 6646 : 				if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL)
; 6647 : 					ATR_LONG_WORK(ATR_PLACE_NO(a0), a1) = 0;
; 6648 : #endif
; 6649 : 			}
; 6650 : 			break;
; 6651 : 		}
; 6652 : #ifdef _SKILL_SELFEXPLODE //Ëá™ÁàÜ
; 6653 : 		if (ATR_SELFEXPLODE(a0) == 1)

  00698	83 bf d8 01 00
	00 01		 cmp	 DWORD PTR [edi+472], 1
  0069f	75 07		 jne	 SHORT $LN172@monster

; 6654 : 		{
; 6655 : 			ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  006a1	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2
$LN172@monster:

; 6656 : 			ATR_CHR_ACT(a0) = ANIM_ATTACK;
; 6657 : 		}
; 6658 : 		else
; 6659 : #endif
; 6660 : 			ATR_CHR_ACT(a0) = ANIM_ATTACK;		//?????????
; 6661 : 		
; 6662 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  006a8	6a 01		 push	 1
  006aa	6a 00		 push	 0
  006ac	57		 push	 edi
  006ad	c7 87 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+332], 0
  006b7	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  006bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  006bf	85 c0		 test	 eax, eax
  006c1	74 22		 je	 SHORT $LN174@monster

; 6663 : 		{	
; 6664 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER && ATR_COUNTER(p_master) != a0)		//???????

  006c3	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  006c6	f6 41 60 10	 test	 BYTE PTR [ecx+96], 16	; 00000010H
  006ca	74 14		 je	 SHORT $LN175@monster
  006cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  006d1	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  006d4	39 b8 08 01 00
	00		 cmp	 DWORD PTR [eax+264], edi
  006da	0f 85 0c 17 00
	00		 jne	 $LN405@monster
$LN175@monster:

; 6665 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 6666 : 			else
; 6667 : 			{
; 6668 : 				ATR_VCT_NO(a0) = 3;

  006e0	c6 01 03	 mov	 BYTE PTR [ecx], 3

; 6669 : #ifdef _PETSKILL_BATTLE_MODEL
; 6670 : 				// ÊîªÂáªÂÆåÊØï
; 6671 : 				if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL)
; 6672 : 					ATR_LONG_WORK(ATR_PLACE_NO(a0), a1) = 0;
; 6673 : #endif
; 6674 : 			}
; 6675 : 			break;

  006e3	eb 87		 jmp	 SHORT $LN1255@monster
$LN174@monster:

; 6676 : 		}
; 6677 : 
; 6678 : 
; 6679 : 		if (ATR_HIT(a0))

  006e5	83 bf 6c 01 00
	00 00		 cmp	 DWORD PTR [edi+364], 0
  006ec	0f 84 57 68 00
	00		 je	 $LN1058@monster

; 6680 : 		{
; 6681 : #ifdef _ATTACK_EFFECT
; 6682 : 			if (ATR_LONG_WORK(0, a0) > 0)	// ÊîæÁâπÊïà

  006f2	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  006f5	8b 81 34 01 00
	00		 mov	 eax, DWORD PTR [ecx+308]
  006fb	85 c0		 test	 eax, eax
  006fd	7e 1a		 jle	 SHORT $LN179@monster

; 6683 : 			{
; 6684 : 				SetDisplayAttackEffect(a0, ATR_LONG_WORK(0, a0));

  006ff	50		 push	 eax
  00700	57		 push	 edi
  00701	e8 00 00 00 00	 call	 ?SetDisplayAttackEffect@@YAXPAUaction@@H@Z ; SetDisplayAttackEffect

; 6685 : 				ATR_LONG_WORK(0, a0) = 0;

  00706	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00709	83 c4 08	 add	 esp, 8
  0070c	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  00716	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN179@monster:

; 6686 : 			}
; 6687 : #endif
; 6688 : 			//andy_mp
; 6689 : 			if (ATR_SHOWADDHP(a0) == 1)

  00719	83 b9 40 02 00
	00 01		 cmp	 DWORD PTR [ecx+576], 1
  00720	75 26		 jne	 SHORT $LN180@monster

; 6690 : 			{
; 6691 : 				set_damage_num(a0, 6, -64);

  00722	6a c0		 push	 -64			; ffffffc0H
  00724	6a 06		 push	 6
  00726	57		 push	 edi
  00727	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 6692 : 				ATR_SHOWADDHP(a0) = 0;

  0072c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0072f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00732	c7 80 40 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+576], 0

; 6693 : 				ATR_LIFE(a0) += ATR_ADDHP(a0);

  0073c	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0073f	8b 81 34 02 00
	00		 mov	 eax, DWORD PTR [ecx+564]
  00745	01 47 78	 add	 DWORD PTR [edi+120], eax
$LN180@monster:

; 6694 : 			}
; 6695 : 			ATR_ATTACK_KIND(1, a1) = ATR_ATTACK_KIND(0, a0) & ATT_DEATH;

  00748	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0074b	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
  0074e	83 e1 01	 and	 ecx, 1
  00751	89 48 64	 mov	 DWORD PTR [eax+100], ecx

; 6696 : #ifdef _PET_ITEM
; 6697 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ATTACKBACK)

  00754	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00757	f7 40 60 00 00
	00 40		 test	 DWORD PTR [eax+96], 1073741824 ; 40000000H
  0075e	74 0d		 je	 SHORT $LN181@monster

; 6698 : 				ATR_ATTACK_KIND(1, a1) = 0;

  00760	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00763	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0
  0076a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN181@monster:

; 6699 : #endif
; 6700 : #ifdef _PETSKILL_ACUPUNCTURE
; 6701 : 			//////////////////////
; 6702 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6703 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP | ATT_ACUPUNCTURE

  0076d	f7 40 60 00 1c
	00 4a		 test	 DWORD PTR [eax+96], 1241521152 ; 4a001c00H
  00774	0f 84 97 00 00
	00		 je	 $LN186@monster

; 6704 : #ifdef _PET_ITEM
; 6705 : 				| ATT_ATTACKBACK
; 6706 : #endif
; 6707 : 				))
; 6708 : #else
; 6709 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA  | ATT_ACUPUNCTURE
; 6710 : #ifdef _PET_ITEM
; 6711 : 				| ATT_ATTACKBACK
; 6712 : #endif
; 6713 : 				))
; 6714 : #endif
; 6715 : 				//////////////////////
; 6716 : #else
; 6717 : 			//////////////////////
; 6718 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6719 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA | ATT_TRAP))
; 6720 : #else
; 6721 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ABSORPTION | ATT_BALLIA))
; 6722 : #endif
; 6723 : 				//////////////////////
; 6724 : #endif
; 6725 : 			{
; 6726 : 				set_guard_mark(a0);

  0077a	57		 push	 edi
  0077b	e8 00 00 00 00	 call	 ?set_guard_mark@@YAXPAUaction@@@Z ; set_guard_mark

; 6727 : #ifdef _PETSKILL_ACUPUNCTURE
; 6728 : 				if (ATR_ATTACK_KIND(0, a0) & (ATT_ACUPUNCTURE

  00780	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00783	83 c4 04	 add	 esp, 4
  00786	8b c1		 mov	 eax, ecx
  00788	f7 41 60 00 00
	00 48		 test	 DWORD PTR [ecx+96], 1207959552 ; 48000000H
  0078f	74 64		 je	 SHORT $LN184@monster

; 6729 : #ifdef _PET_ITEM
; 6730 : 					| ATT_ATTACKBACK
; 6731 : #endif
; 6732 : 					))
; 6733 : 				{
; 6734 : #ifdef _PETSKILL_BATTLE_MODEL
; 6735 : 					if (ATR_INT_WORK0(a0) != ATT_BATTLE_MODEL)

  00791	83 b9 24 01 00
	00 62		 cmp	 DWORD PTR [ecx+292], 98	; 00000062H
  00798	74 5b		 je	 SHORT $LN184@monster

; 6736 : #endif
; 6737 : 					{
; 6738 : 						ATR_VCT_NO(a1) = 10; //ËÆæÂÆöËá™Â∑±Âèó‰º§

  0079a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0079d	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH

; 6739 : 						ATR_DAMAGE(a1) = ATR_DAMAGE(a0);//ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0)*2;

  007a0	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  007a3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  007a6	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  007a9	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  007ac	66 0f 6e 86 80
	00 00 00	 movd	 xmm0, DWORD PTR [esi+128]

; 6740 : 						//ATR_ATTACK_KIND(0, a1) &= ATT_AKO2;
; 6741 : 						if ((float)ATR_DAMAGE(a1) >= (float)(ATR_MAX_LIFE(a1) * 1.2 + 20.0))

  007b4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  007b7	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  007bb	66 0f 6e 48 58	 movd	 xmm1, DWORD PTR [eax+88]
  007c0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff3333333333333
  007c8	0f 5b c9	 cvtdq2ps xmm1, xmm1
  007cb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4034000000000000
  007d3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  007d7	0f 2f c8	 comiss	 xmm1, xmm0
  007da	72 0e		 jb	 SHORT $LN185@monster

; 6742 : 						{
; 6743 : 							ATR_LIFE(a1) = 0;

  007dc	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 6744 : 							ATR_AKO_FLG(a1) = 2; //ÊâìÈ£û

  007e3	c6 80 21 01 00
	00 02		 mov	 BYTE PTR [eax+289], 2
$LN185@monster:

; 6745 : 						}
; 6746 : 						a1 = ATR_BODY_WORK(0, a0) = a0;

  007ea	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  007ed	8b f7		 mov	 esi, edi
  007ef	89 78 04	 mov	 DWORD PTR [eax+4], edi
  007f2	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN184@monster:

; 6747 : 					}
; 6748 : 				}
; 6749 : #endif
; 6750 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_VICARIOUS)

  007f5	f7 40 60 00 02
	00 00		 test	 DWORD PTR [eax+96], 512	; 00000200H
  007fc	74 13		 je	 SHORT $LN186@monster

; 6751 : 				{
; 6752 : 					a1 = ATR_BODY_WORK(0, a0);

  007fe	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 6753 : 					ATR_VCT_NO(a1) = 6;

  00801	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00804	c6 00 06	 mov	 BYTE PTR [eax], 6

; 6754 : 					ATR_STIMER(a1) = 60;

  00807	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0080a	c6 40 01 3c	 mov	 BYTE PTR [eax+1], 60	; 0000003cH
  0080e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN186@monster:

; 6755 : 				}
; 6756 : 			}
; 6757 : #ifdef _PETSKILL_ACUPUNCTURE
; 6758 : 			///////////////////
; 6759 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6760 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP | ATT_ACUPUNCTURE

  00811	f7 40 60 00 04
	00 4a		 test	 DWORD PTR [eax+96], 1241515008 ; 4a000400H
  00818	74 10		 je	 SHORT $LN187@monster

; 6761 : #ifdef _PET_ITEM
; 6762 : 				| ATT_ATTACKBACK
; 6763 : #endif
; 6764 : 				))
; 6765 : #else
; 6766 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ACUPUNCTURE
; 6767 : #ifdef _PET_ITEM
; 6768 : 				| ATT_ATTACKBACK
; 6769 : #endif
; 6770 : 				))
; 6771 : #endif
; 6772 : 				///////////////////
; 6773 : #else
; 6774 : 			///////////////////
; 6775 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6776 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP) )
; 6777 : #else
; 6778 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_REFLEX)
; 6779 : #endif
; 6780 : 				///////////////////
; 6781 : #endif
; 6782 : 			{
; 6783 : #ifdef _PETSKILL_BATTLE_MODEL
; 6784 : 				// Ê£ÄÊü•ÊòØ‰∏çÊòØÊîªÂáªÁâ©‰ª∂
; 6785 : 				if (ATR_INT_WORK0(a0) != ATT_BATTLE_MODEL)

  0081a	83 b8 24 01 00
	00 62		 cmp	 DWORD PTR [eax+292], 98	; 00000062H
  00821	74 0a		 je	 SHORT $LN188@monster

; 6786 : #endif
; 6787 : 					a1 = ATR_BODY_WORK(0, a0) = a0;

  00823	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00826	8b f7		 mov	 esi, edi

; 6788 : 			}

  00828	eb 03		 jmp	 SHORT $LN188@monster
$LN187@monster:

; 6789 : 			else
; 6790 : 				a1 = ATR_BODY_WORK(0, a0);		//Óò©????????xxx

  0082a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
$LN188@monster:

; 6791 : 			//?????????
; 6792 : 			ATR_COMBO(a1) = 0;

  0082d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00830	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0

; 6793 : 			//?Óéó??????
; 6794 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_DODGE)

  00837	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0083a	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0083d	f6 c1 20	 test	 cl, 32			; 00000020H
  00840	74 79		 je	 SHORT $LN190@monster

; 6795 : 			{
; 6796 : 				//???????????
; 6797 : 				if (ATR_HIT_TIMING(a0) == 0)

  00842	80 78 5d 00	 cmp	 BYTE PTR [eax+93], 0
  00846	75 52		 jne	 SHORT $LN192@monster

; 6798 : 				{
; 6799 : 					ATR_HIT_TIMING(a0) = 1;		//???Óé∑???????

  00848	c6 40 5d 01	 mov	 BYTE PTR [eax+93], 1

; 6800 : 					ATR_VCT_NO(a1) = 16;		//????

  0084c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0084f	c6 00 10	 mov	 BYTE PTR [eax], 16	; 00000010H

; 6801 : 					ATR_CRS(a1) = ATR_CRS(a0);		//Óò©?????????????

  00852	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  00858	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 6802 : 					ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//

  0085e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00861	8a 87 54 01 00
	00		 mov	 al, BYTE PTR [edi+340]
  00867	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 6803 : 					ATR_STIMER(a1) = 0;

  0086d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00870	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 6804 : 					ATR_FIRST_FLG(a1) = 1;		//?????????

  00874	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00877	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1

; 6805 : 					ATR_BODY_WORK(0, a1) = a0;	//

  0087e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00881	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 6806 : 					if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER)		//???????

  00884	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00887	f6 40 60 10	 test	 BYTE PTR [eax+96], 16	; 00000010H
  0088b	74 0d		 je	 SHORT $LN192@monster

; 6807 : 						//?????Óù∏Óçï
; 6808 : 						set_damage_num(a0, 1, -64 + 16);

  0088d	6a d0		 push	 -48			; ffffffd0H
  0088f	6a 01		 push	 1
  00891	57		 push	 edi
  00892	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00897	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN192@monster:

; 6809 : 				}
; 6810 : 				ATR_HIT(a0) = 0;

  0089a	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0
$LN1256@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  008a4	ff 77 1c	 push	 DWORD PTR [edi+28]
  008a7	ff 77 18	 push	 DWORD PTR [edi+24]
  008aa	6a 08		 push	 8
  008ac	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  008b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  008b4	5f		 pop	 edi
  008b5	5e		 pop	 esi
  008b6	5b		 pop	 ebx
  008b7	8b e5		 mov	 esp, ebp
  008b9	5d		 pop	 ebp
  008ba	c3		 ret	 0
$LN190@monster:

; 6811 : 				play_se(8, ATR_H_POS(a0), ATR_V_POS(a0));
; 6812 : 				break;
; 6813 : 			}
; 6814 : 
; 6815 : 			//????????
; 6816 : 			if (ATR_HIT(a0) >= 10000 && ATR_HIT(a0) < 10100)

  008bb	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  008c1	2d 10 27 00 00	 sub	 eax, 10000		; 00002710H
  008c6	83 f8 63	 cmp	 eax, 99			; 00000063H
  008c9	77 15		 ja	 SHORT $LN194@monster

; 6817 : 			{
; 6818 : 				//?Óéó????????
; 6819 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_CRUSH)

  008cb	f7 c1 00 20 00
	00		 test	 ecx, 8192		; 00002000H
  008d1	74 0d		 je	 SHORT $LN194@monster

; 6820 : 					//?????Óù∏Óçï
; 6821 : 					set_damage_num(a1, 19, -112);

  008d3	6a 90		 push	 -112			; ffffff90H
  008d5	6a 13		 push	 19			; 00000013H
  008d7	56		 push	 esi
  008d8	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  008dd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN194@monster:

; 6822 : 			}
; 6823 : 			//?????????//knock out
; 6824 : 			ATR_AKO_FLG(a1) = 0;

  008e0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  008e3	c6 80 21 01 00
	00 00		 mov	 BYTE PTR [eax+289], 0

; 6825 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO1)		//??????

  008ea	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  008ed	8b c8		 mov	 ecx, eax
  008ef	f6 40 60 40	 test	 BYTE PTR [eax+96], 64	; 00000040H
  008f3	74 0f		 je	 SHORT $LN195@monster

; 6826 : 				ATR_AKO_FLG(a1) = 1;

  008f5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  008f8	c6 80 21 01 00
	00 01		 mov	 BYTE PTR [eax+289], 1
  008ff	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00902	8b c8		 mov	 ecx, eax
$LN195@monster:

; 6827 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_AKO2)		//??????

  00904	f6 40 60 80	 test	 BYTE PTR [eax+96], 128	; 00000080H
  00908	74 0d		 je	 SHORT $LN196@monster

; 6828 : 				ATR_AKO_FLG(a1) = 2;

  0090a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0090d	c6 80 21 01 00
	00 02		 mov	 BYTE PTR [eax+289], 2
  00914	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN196@monster:

; 6829 : 			//ËøûÂáª ?????
; 6830 : 			if (ATR_HIT(a0) >= 10100)

  00917	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  0091d	3d 74 27 00 00	 cmp	 eax, 10100		; 00002774H
  00922	7c 29		 jl	 SHORT $LN197@monster

; 6831 : 			{
; 6832 : #ifdef _PETSKILL_ACUPUNCTURE
; 6833 : 				///////////////////////
; 6834 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6835 : 				if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP | ATT_ACUPUNCTURE

  00924	f7 41 60 00 04
	00 4a		 test	 DWORD PTR [ecx+96], 1241515008 ; 4a000400H
  0092b	74 14		 je	 SHORT $LN199@monster

; 6836 : #ifdef _PET_ITEM
; 6837 : 					| ATT_ATTACKBACK
; 6838 : #endif
; 6839 : 					))
; 6840 : #else
; 6841 : 				if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ACUPUNCTURE
; 6842 : #ifdef _PET_ITEM
; 6843 : 					| ATT_ATTACKBACK
; 6844 : #endif
; 6845 : 					))
; 6846 : #endif
; 6847 : 					///////////////////////
; 6848 : #else
; 6849 : 				///////////////////////
; 6850 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6851 : 				if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP) )
; 6852 : #else
; 6853 : 
; 6854 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_REFLEX)
; 6855 : #endif
; 6856 : 					///////////////////////
; 6857 : #endif
; 6858 : 				{
; 6859 : 					ATR_HIT(a0) -= 100;

  0092d	83 c0 9c	 add	 eax, -100		; ffffff9cH
  00930	89 87 6c 01 00
	00		 mov	 DWORD PTR [edi+364], eax

; 6860 : 					if (ATR_SYNC_FLG(a0) == 1)

  00936	80 b9 23 01 00
	00 01		 cmp	 BYTE PTR [ecx+291], 1
  0093d	75 44		 jne	 SHORT $LN202@monster

; 6861 : 					{
; 6862 : 						a2 = ATR_BODY_WORK(1, a0);
; 6863 : 						ATR_VCT_NO(a2) = 2;
; 6864 : 						ATR_COUNTER(p_master) = a2;
; 6865 : 					}
; 6866 : 				}

  0093f	eb 2b		 jmp	 SHORT $LN203@monster
$LN199@monster:

; 6867 : 				else
; 6868 : 					//?????????
; 6869 : 					ATR_COMBO(a1) = 1;

  00941	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00944	c6 80 00 01 00
	00 01		 mov	 BYTE PTR [eax+256], 1

; 6870 : 			}

  0094b	eb 36		 jmp	 SHORT $LN202@monster
$LN197@monster:

; 6871 : 			else if (ATR_SYNC_FLG(a0) == 1)

  0094d	80 b9 23 01 00
	00 01		 cmp	 BYTE PTR [ecx+291], 1
  00954	75 2d		 jne	 SHORT $LN202@monster

; 6872 : 			{
; 6873 : #ifdef _PETSKILL_ACUPUNCTURE
; 6874 : 				//////////////////////
; 6875 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6876 : 				if (!(ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP | ATT_ACUPUNCTURE

  00956	f7 41 60 00 04
	00 4a		 test	 DWORD PTR [ecx+96], 1241515008 ; 4a000400H
  0095d	75 0d		 jne	 SHORT $LN203@monster

; 6877 : #ifdef _PET_ITEM
; 6878 : 					| ATT_ATTACKBACK
; 6879 : #endif
; 6880 : 					)))
; 6881 : #else
; 6882 : 				if (!(ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ACUPUNCTURE
; 6883 : #ifdef _PET_ITEM
; 6884 : 					| ATT_ATTACKBACK
; 6885 : #endif
; 6886 : 					)))
; 6887 : #endif
; 6888 : 					/////////////////////
; 6889 : #else
; 6890 : 				//////////////////////
; 6891 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6892 : 				if (!(ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP) ))
; 6893 : #else
; 6894 : 				if (!(ATR_ATTACK_KIND(0, a0) & ATT_REFLEX))
; 6895 : #endif
; 6896 : 					/////////////////////
; 6897 : #endif
; 6898 : 					ATR_COMBO(a1) = 1;

  0095f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00962	c6 80 00 01 00
	00 01		 mov	 BYTE PTR [eax+256], 1
  00969	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN203@monster:

; 6899 : 				a2 = ATR_BODY_WORK(1, a0);		//????ÓéÅÓéï?Óèù?
; 6900 : 				ATR_VCT_NO(a2) = 2;		//???
; 6901 : 				ATR_COUNTER(p_master) = a2;		//?????Óüâ?
; 6902 : 			}
; 6903 : #ifdef _PETSKILL_ACUPUNCTURE
; 6904 : 			/////////////////////
; 6905 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6906 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP | ATT_ACUPUNCTURE

  0096c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0096f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00972	c6 00 02	 mov	 BYTE PTR [eax], 2
  00975	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  0097a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0097d	89 88 08 01 00
	00		 mov	 DWORD PTR [eax+264], ecx
$LN202@monster:
  00983	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00986	f7 40 60 00 04
	00 4a		 test	 DWORD PTR [eax+96], 1241515008 ; 4a000400H
  0098d	74 45		 je	 SHORT $LN204@monster

; 6907 : #ifdef _PET_ITEM
; 6908 : 				| ATT_ATTACKBACK
; 6909 : #endif
; 6910 : 				))
; 6911 : #else
; 6912 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ACUPUNCTURE
; 6913 : #ifdef _PET_ITEM
; 6914 : 				| ATT_ATTACKBACK
; 6915 : #endif
; 6916 : 				))
; 6917 : #endif
; 6918 : 				////////////////////
; 6919 : #else
; 6920 : 			/////////////////////
; 6921 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6922 : 			if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP) )
; 6923 : #else
; 6924 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_REFLEX)
; 6925 : #endif
; 6926 : 				////////////////////
; 6927 : #endif
; 6928 : 			{
; 6929 : #ifdef _PETSKILL_BATTLE_MODEL
; 6930 : 				// Ê£ÄÊü•ÊòØ‰∏çÊòØÊîªÂáªÁâ©‰ª∂
; 6931 : 				if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL)

  0098f	83 b8 24 01 00
	00 62		 cmp	 DWORD PTR [eax+292], 98	; 00000062H
  00996	75 25		 jne	 SHORT $LN206@monster

; 6932 : 				{
; 6933 : 					ATR_ATTACK_POW(0, a0) = 0;		// Êó†‰º§ÂÆ≥

  00998	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 6934 : 					ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);

  009a2	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  009a5	8a 87 54 01 00
	00		 mov	 al, BYTE PTR [edi+340]
  009ab	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al

; 6935 : 					ATR_ATTACK_KIND(0, a0) |= ATT_NOMISS;

  009b1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  009b4	81 48 60 00 00
	00 04		 or	 DWORD PTR [eax+96], 67108864 ; 04000000H

; 6936 : 				}

  009bb	eb 26		 jmp	 SHORT $LN205@monster
$LN206@monster:

; 6937 : 				else
; 6938 : #endif
; 6939 : 					ATR_DAMAGE_ANG(a1) = (ATR_CHR_ANG(a0) + 4) & 7;

  009bd	8a 8f 54 01 00
	00		 mov	 cl, BYTE PTR [edi+340]
  009c3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  009c6	80 e9 04	 sub	 cl, 4
  009c9	80 e1 07	 and	 cl, 7
  009cc	88 88 1d 01 00
	00		 mov	 BYTE PTR [eax+285], cl

; 6940 : 			}

  009d2	eb 0f		 jmp	 SHORT $LN205@monster
$LN204@monster:

; 6941 : 			else
; 6942 : 				ATR_DAMAGE_ANG(a1) = ATR_CHR_ANG(a0);		//

  009d4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  009d7	8a 87 54 01 00
	00		 mov	 al, BYTE PTR [edi+340]
  009dd	88 81 1d 01 00
	00		 mov	 BYTE PTR [ecx+285], al
$LN205@monster:

; 6943 : 			if (ATR_ATTACK_KIND(0, a0) & BCF_DEFMAGICATT)

  009e3	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  009e6	f7 42 60 00 00
	08 00		 test	 DWORD PTR [edx+96], 524288 ; 00080000H
  009ed	74 10		 je	 SHORT $LN208@monster

; 6944 : 				set_damage_num(a1, 30, -64);

  009ef	6a c0		 push	 -64			; ffffffc0H
  009f1	6a 1e		 push	 30			; 0000001eH
  009f3	56		 push	 esi
  009f4	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  009f9	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  009fc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN208@monster:

; 6945 : 			if (ATR_ATTACK_KIND(0, a0) & BCF_SUPERWALL)

  009ff	f7 42 60 00 00
	10 00		 test	 DWORD PTR [edx+96], 1048576 ; 00100000H
  00a06	74 10		 je	 SHORT $LN209@monster

; 6946 : 				set_damage_num(a1, 31, -64);

  00a08	6a c0		 push	 -64			; ffffffc0H
  00a0a	6a 1f		 push	 31			; 0000001fH
  00a0c	56		 push	 esi
  00a0d	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00a12	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00a15	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN209@monster:

; 6947 : 			//#ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 6948 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ATTNEXTPROSKILL)

  00a18	f7 42 60 00 00
	80 00		 test	 DWORD PTR [edx+96], 8388608 ; 00800000H
  00a1f	74 10		 je	 SHORT $LN210@monster

; 6949 : 				set_damage_num(a1, 41, -64 + 25);

  00a21	6a d9		 push	 -39			; ffffffd9H
  00a23	6a 29		 push	 41			; 00000029H
  00a25	56		 push	 esi
  00a26	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00a2b	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00a2e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN210@monster:

; 6950 : 			//#endif
; 6951 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ABSORPTION)	//?Óé™?????

  00a31	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00a34	a9 00 08 00 00	 test	 eax, 2048		; 00000800H
  00a39	0f 84 b3 00 00
	00		 je	 $LN211@monster

; 6952 : 			{
; 6953 : 				if (ATR_SYNC_FLG(a0) == 0)		//ÓôØ????????

  00a3f	80 ba 23 01 00
	00 00		 cmp	 BYTE PTR [edx+291], 0
  00a46	75 12		 jne	 SHORT $LN213@monster

; 6954 : 				{
; 6955 : 					if (!ATR_COMBO(a1))			//????????

  00a48	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00a4b	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00a52	0f 85 dc 00 00
	00		 jne	 $LN224@monster

; 6956 : 					{
; 6957 : 						//??Óñ±Óù∏Óçï
; 6958 : #ifdef _SYUTEST
; 6959 : 						ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);
; 6960 : 						ATR_LIFE(a1) -= ATR_DAMAGE(a1);
; 6961 : 						if (Light1 == NULL)
; 6962 : 							Light1 = MakeAnimDisp(ATR_H_POS(a0), ATR_V_POS(a0), 101581, 0);
; 6963 : 						set_damage_num(a1, 41, -64 + 25);
; 6964 : 						// ÈááÂÖâÊúØÈ¢ÑÂ§á
; 6965 : #else
; 6966 : 						ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);
; 6967 : 						ATR_LIFE(a1) += ATR_DAMAGE(a1);
; 6968 : 						if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???
; 6969 : 							ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???
; 6970 : #endif
; 6971 : 						ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);
; 6972 : 						ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);
; 6973 : 						if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))		//?Óï´Óóó???
; 6974 : 							ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);		//?Óï´???
; 6975 : 						set_damage_num(a1, 14, -64);
; 6976 : 						ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?
; 6977 : 						ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?
; 6978 : 					}
; 6979 : 				}

  00a58	eb 17		 jmp	 SHORT $LN1242@monster
$LN213@monster:

; 6980 : 				else
; 6981 : 				{
; 6982 : 					//????????
; 6983 : 					if (ATR_HIT(a0) >= 10000 && ATR_HIT(a0) < 10100)

  00a5a	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  00a60	2d 10 27 00 00	 sub	 eax, 10000		; 00002710H
  00a65	83 f8 63	 cmp	 eax, 99			; 00000063H
  00a68	0f 87 c6 00 00
	00		 ja	 $LN224@monster

; 6984 : 					{
; 6985 : 						//??Óñ±Óù∏Óçï
; 6986 : 						ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  00a6e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
$LN1242@monster:

; 7017 : #endif
; 7018 : 			}
; 7019 : 			//?Óëû?????
; 7020 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  00a71	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00a77	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  00a7a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00a7d	6a c0		 push	 -64			; ffffffc0H
  00a7f	6a 0e		 push	 14			; 0000000eH
  00a81	56		 push	 esi
  00a82	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  00a85	01 46 78	 add	 DWORD PTR [esi+120], eax
  00a88	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  00a8e	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00a91	3b c1		 cmp	 eax, ecx
  00a93	0f 4f c1	 cmovg	 eax, ecx
  00a96	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00a99	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00a9c	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  00aa2	89 82 24 02 00
	00		 mov	 DWORD PTR [edx+548], eax
  00aa8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00aab	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  00ab1	01 86 b0 01 00
	00		 add	 DWORD PTR [esi+432], eax
  00ab7	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  00abd	8b 86 b0 01 00
	00		 mov	 eax, DWORD PTR [esi+432]
  00ac3	3b c1		 cmp	 eax, ecx
  00ac5	0f 4f c1	 cmovg	 eax, ecx
  00ac8	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax
  00ace	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00ad3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00ad6	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ad9	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0
  00ae3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00ae6	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  00af0	eb 42		 jmp	 SHORT $LN224@monster
$LN211@monster:

; 6987 : #ifdef _SYUTEST
; 6988 : 						// ÈááÂÖâÊúØÈ¢ÑÂ§á
; 6989 : #endif
; 6990 : 						ATR_LIFE(a1) += ATR_DAMAGE(a1);
; 6991 : 						if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))		//?Óï´Óóó???
; 6992 : 							ATR_LIFE(a1) = ATR_MAX_LIFE(a1);		//?Óï´???
; 6993 : 						ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);
; 6994 : 						ATR_PET_LIFE(a1) += ATR_PET_DAMAGE(a1);
; 6995 : 						if (ATR_PET_LIFE(a1) > ATR_PET_MAX_LIFE(a1))		//?Óï´Óóó???
; 6996 : 							ATR_PET_LIFE(a1) = ATR_PET_MAX_LIFE(a1);		//?Óï´???
; 6997 : 						set_damage_num(a1, 14, -64);
; 6998 : 						ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?
; 6999 : 						ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?
; 7000 : 					}
; 7001 : 				}
; 7002 : 			}
; 7003 : 			else if (ATR_ATTACK_KIND(0, a0) & ATT_BALLIA)		//????????

  00af2	a9 00 10 00 00	 test	 eax, 4096		; 00001000H
  00af7	74 19		 je	 SHORT $LN221@monster

; 7004 : 			{
; 7005 : 				ATR_ATTACK_POW(0, a0) = 0;		//????Ó°ä?

  00af9	c7 82 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+176], 0

; 7006 : 				ATR_ATTACK_PET_POW(0, a0) = 0;		//????Ó°ä?

  00b03	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00b06	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0

; 7007 : 			}

  00b10	eb 22		 jmp	 SHORT $LN224@monster
$LN221@monster:

; 7008 : 			else
; 7009 : 			{
; 7010 : 				ATR_VCT_NO(a1) = 10;		//?????Óëò

  00b12	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00b15	c6 00 0a	 mov	 BYTE PTR [eax], 10	; 0000000aH

; 7011 : 
; 7012 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 7013 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_NOMISS)

  00b18	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00b1b	f7 40 60 00 00
	00 04		 test	 DWORD PTR [eax+96], 67108864 ; 04000000H
  00b22	74 07		 je	 SHORT $LN223@monster

; 7014 : 					NoMiss = 1 ; 

  00b24	b8 01 00 00 00	 mov	 eax, 1
  00b29	eb 03		 jmp	 SHORT $LN1241@monster
$LN223@monster:

; 7015 : 				else
; 7016 : 					NoMiss = -1 ;

  00b2b	83 c8 ff	 or	 eax, -1
$LN1241@monster:

; 7017 : #endif
; 7018 : 			}
; 7019 : 			//?Óëû?????
; 7020 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_SATISFACTORY)

  00b2e	66 a3 00 00 00
	00		 mov	 WORD PTR ?NoMiss@@3FA, ax ; NoMiss
$LN224@monster:
  00b34	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00b37	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]

; 7021 : 				ATR_KAISHIN(a1) = 1;		//?Óëû??????
; 7022 : 			else
; 7023 : 				ATR_KAISHIN(a1) = 0;		//Óó≠Óêπ?????
; 7024 : 			ATR_DAMAGE(a1) = ATR_ATTACK_POW(0, a0);

  00b3a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00b3d	c1 e9 02	 shr	 ecx, 2
  00b40	80 e1 01	 and	 cl, 1
  00b43	88 88 01 01 00
	00		 mov	 BYTE PTR [eax+257], cl
  00b49	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00b4c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00b4f	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  00b55	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 7025 : 			ATR_PET_DAMAGE(a1) = ATR_ATTACK_PET_POW(0, a0);

  00b58	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00b5b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00b5e	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  00b64	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax

; 7026 : 			//andy_mp
; 7027 : 			ATR_MPDAMAGE(a1) = ATR_MPDAMAGE(a0);

  00b6a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00b6d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00b70	8b 80 30 02 00
	00		 mov	 eax, DWORD PTR [eax+560]
  00b76	89 81 30 02 00
	00		 mov	 DWORD PTR [ecx+560], eax

; 7028 : 			ATR_MPDFLG(a1) = ATR_MPDFLG(a0);

  00b7c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00b7f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00b82	8b 80 38 02 00
	00		 mov	 eax, DWORD PTR [eax+568]
  00b88	89 81 38 02 00
	00		 mov	 DWORD PTR [ecx+568], eax

; 7029 : 			//?????
; 7030 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_GUARD)

  00b8e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00b91	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]

; 7031 : 				ATR_GUARD_FLG(a1) = 1;
; 7032 : 			else
; 7033 : 				ATR_GUARD_FLG(a1) = 0;
; 7034 : #ifdef _EQUIT_ARRANGE
; 7035 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ARRANGE)

  00b94	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00b97	c1 e9 03	 shr	 ecx, 3
  00b9a	80 e1 01	 and	 cl, 1
  00b9d	88 88 1c 01 00
	00		 mov	 BYTE PTR [eax+284], cl
  00ba3	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00ba6	8b d3		 mov	 edx, ebx
  00ba8	f7 43 60 00 00
	00 01		 test	 DWORD PTR [ebx+96], 16777216 ; 01000000H
  00baf	74 1c		 je	 SHORT $LN229@monster

; 7036 : 			{
; 7037 : 				set_damage_num(a1, 42, -64);

  00bb1	6a c0		 push	 -64			; ffffffc0H
  00bb3	6a 2a		 push	 42			; 0000002aH
  00bb5	56		 push	 esi
  00bb6	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 7038 : 				ATR_CHR_ACT(a1) = ANIM_GUARD;

  00bbb	c7 86 4c 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [esi+332], 10	; 0000000aH
  00bc5	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bc8	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00bcb	8b d3		 mov	 edx, ebx
$LN229@monster:

; 7039 : 			}
; 7040 : #endif
; 7041 : 			if (ATR_LIFE(a1) - ATR_DAMAGE(a1) <= 0 || (ATR_ATTACK_KIND(0, a0) & ATT_DEATH))

  00bcd	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00bd0	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00bd3	2b 41 58	 sub	 eax, DWORD PTR [ecx+88]
  00bd6	85 c0		 test	 eax, eax
  00bd8	7e 09		 jle	 SHORT $LN231@monster
  00bda	f6 43 60 01	 test	 BYTE PTR [ebx+96], 1
  00bde	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  00be1	74 1c		 je	 SHORT $LN232@monster
$LN231@monster:

; 7042 : 			{
; 7043 : 				if (ATR_COMBO(a1) == 0)

  00be3	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00bea	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  00bed	75 10		 jne	 SHORT $LN232@monster

; 7044 : 					ATR_KAISHIN(a1) = 1;

  00bef	c6 81 01 01 00
	00 01		 mov	 BYTE PTR [ecx+257], 1
  00bf6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00bf9	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00bfc	89 45 08	 mov	 DWORD PTR $T2[ebp], eax
$LN232@monster:

; 7045 : 			}
; 7046 : 			if (ATR_KAISHIN(a1))
; 7047 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM * 4;
; 7048 : 			else
; 7049 : 				ATR_HIT_STOP(a0) = HIT_STOP_TIM;
; 7050 : 			if (ATR_DAMAGE(a1) || (ATR_ATTACK_KIND(0, a0) & (ATT_BALLIA | ATT_ABSORPTION)))

  00bff	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
  00c02	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00c07	bb 08 00 00 00	 mov	 ebx, 8
  00c0c	80 b9 01 01 00
	00 00		 cmp	 BYTE PTR [ecx+257], 0
  00c13	0f 44 c3	 cmove	 eax, ebx
  00c16	88 42 5c	 mov	 BYTE PTR [edx+92], al
  00c19	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00c1c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00c1f	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00c23	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  00c26	75 07		 jne	 SHORT $LN236@monster
  00c28	a9 00 18 00 00	 test	 eax, 6144		; 00001800H
  00c2d	74 43		 je	 SHORT $LN239@monster
$LN236@monster:

; 7051 : 			{
; 7052 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_COUNTER)		//???????

  00c2f	a8 10		 test	 al, 16			; 00000010H
  00c31	74 16		 je	 SHORT $LN238@monster

; 7053 : 				{
; 7054 : 					//????????
; 7055 : 					if (ATR_COMBO(a1) == 0)

  00c33	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  00c3a	75 0d		 jne	 SHORT $LN238@monster

; 7056 : 						//?????Óù∏Óçï
; 7057 : 						set_damage_num(a0, 1, -64 + 16);

  00c3c	6a d0		 push	 -48			; ffffffd0H
  00c3e	6a 01		 push	 1
  00c40	57		 push	 edi
  00c41	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  00c46	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN238@monster:

; 7058 : 				}
; 7059 : 				//Âèó‰º§ÊïàÊûúÈü≥
; 7060 : 				play_damage(ATR_HIT(a0), ATR_H_POS(a0));

  00c49	ff 77 18	 push	 DWORD PTR [edi+24]
  00c4c	ff b7 6c 01 00
	00		 push	 DWORD PTR [edi+364]
  00c52	e8 00 00 00 00	 call	 ?play_damage@@YAXHH@Z	; play_damage

; 7061 : 				//ÂøÖÊùÄÊòüÊòü
; 7062 : 				set_hit_mark(a0);

  00c57	57		 push	 edi
  00c58	e8 00 00 00 00	 call	 ?set_hit_mark@@YAXPAUaction@@@Z ; set_hit_mark

; 7063 : 				if (ATR_COMBO(a1))		//Â∞èÈòü

  00c5d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00c60	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c63	80 b8 00 01 00
	00 00		 cmp	 BYTE PTR [eax+256], 0
  00c6a	74 06		 je	 SHORT $LN239@monster

; 7064 : 					ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//Âä®‰ΩúÂÅúÊ≠¢

  00c6c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00c6f	88 58 5c	 mov	 BYTE PTR [eax+92], bl
$LN239@monster:

; 7065 : 			}
; 7066 : 			ATR_HIT(a0) = 0;				//ÊîªÂáªÊóóÊ†áÊ∏ÖÈô§

  00c72	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0

; 7067 : 			if (!(ATR_ATTACK_POW(0, a0) || ATR_ATTACK_PET_POW(0, a0)))		//????

  00c7c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00c7f	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00c86	0f 85 bd 62 00
	00		 jne	 $LN1058@monster
  00c8c	83 b8 d4 01 00
	00 00		 cmp	 DWORD PTR [eax+468], 0
  00c93	0f 85 b0 62 00
	00		 jne	 $LN1058@monster

; 7068 : 			{
; 7069 : 				ATR_HIT_STOP(a0) = 0;		//Âä®‰ΩúÂÅúÊ≠¢

  00c99	c6 40 5c 00	 mov	 BYTE PTR [eax+92], 0

; 7070 : 				play_se(8, ATR_H_POS(a0), ATR_V_POS(a0));
; 7071 : 			}
; 7072 : 		}
; 7073 : 		break;

  00c9d	e9 02 fc ff ff	 jmp	 $LN1256@monster
$LN241@monster:

; 7074 : 
; 7075 : 	case 3:		//ÊîªÂáªÁ≠âÂæÖ
; 7076 : #ifdef _PETSKILL_BATTLE_MODEL
; 7077 : 		// Ê£ÄÊü•ÊòØ‰∏çÊòØÊîªÂáªÁâ©‰ª∂
; 7078 : 		if (ATR_INT_WORK0(a0) == ATT_BATTLE_MODEL)

  00ca2	83 ba 24 01 00
	00 62		 cmp	 DWORD PTR [edx+292], 98	; 00000062H
  00ca9	0f 85 1a 02 00
	00		 jne	 $LN242@monster

; 7079 : 		{
; 7080 : 			// Ê£ÄÊü•Ê≠§ÊîªÂáªÁâ©‰ª∂ËøòÊúâÊ≤°ÊúâÁõÆÊ†á
; 7081 : 			if (ATR_INT_WORK1(a0) > 1)

  00caf	83 ba 28 01 00
	00 01		 cmp	 DWORD PTR [edx+296], 1
  00cb6	0f 8e df 00 00
	00		 jle	 $LN243@monster

; 7082 : 			{
; 7083 : 				// ÊâæÂá∫‰∏ã‰∏Ä‰∏™ÁõÆÊ†á
; 7084 : 				for (d0 = 1; d0 < ATR_INT_WORK1(a0); d0++)

  00cbc	b8 01 00 00 00	 mov	 eax, 1
  00cc1	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  00cc4	3b 82 28 01 00
	00		 cmp	 eax, DWORD PTR [edx+296]
  00cca	0f 8d b4 00 00
	00		 jge	 $LN1243@monster
$LL10@monster:

; 7085 : 				{
; 7086 : 					if (ATR_BODY_WORK(d0, a0) != NULL)	// ÊâæÂà∞ÁõÆÊ†á

  00cd0	8b 4c 82 04	 mov	 ecx, DWORD PTR [edx+eax*4+4]
  00cd4	85 c9		 test	 ecx, ecx
  00cd6	74 19		 je	 SHORT $LN8@monster

; 7087 : 					{
; 7088 : 						a1 = ATR_BODY_WORK(d0, a0);		// ÂèñÂá∫ÁõÆÊ†á
; 7089 : 						ATR_BODY_WORK(d0, a0) = NULL;	// Ê∏ÖÈô§

  00cd8	c7 44 82 04 00
	00 00 00	 mov	 DWORD PTR [edx+eax*4+4], 0

; 7090 : 						if (ATR_LIFE(a1) <= 0)			// Ê£ÄÊü•ÁõÆÊ†áÊúâÊó†Ê≠ª‰∫°

  00ce0	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  00ce4	7e 08		 jle	 SHORT $LN1227@monster

; 7091 : 							continue;
; 7092 : 						if (ATR_VCT_NO(a1) == VCT_NO_APPEAR)	// ÁõÆÊ†áÁ¶ªÂºÄÊàòÂú∫

  00ce6	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00ce9	80 38 f9	 cmp	 BYTE PTR [eax], 249	; 000000f9H
  00cec	75 14		 jne	 SHORT $LN247@monster
$LN1227@monster:
  00cee	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
$LN8@monster:

; 7082 : 			{
; 7083 : 				// ÊâæÂá∫‰∏ã‰∏Ä‰∏™ÁõÆÊ†á
; 7084 : 				for (d0 = 1; d0 < ATR_INT_WORK1(a0); d0++)

  00cf1	40		 inc	 eax
  00cf2	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  00cf5	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00cf8	3b 82 28 01 00
	00		 cmp	 eax, DWORD PTR [edx+296]
  00cfe	7c d0		 jl	 SHORT $LL10@monster
  00d00	eb 7c		 jmp	 SHORT $LN1219@monster
$LN247@monster:

; 7093 : 							continue;
; 7094 : 						else
; 7095 : 						{
; 7096 : 							ATR_INT_WORK3(a0) = 0;

  00d02	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00d05	c7 80 30 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+304], 0

; 7097 : 							ATR_BODY_WORK(0, a0) = a1;								// Ë¢´ÊîªÊñπ

  00d0f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00d12	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 7098 : 							ATR_ATTACK_KIND(0, a0) = ATR_ATTACK_KIND(d0, a0);		// ÊîªÂáªÁßçÁ±ª

  00d15	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00d18	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00d1b	8b 44 81 60	 mov	 eax, DWORD PTR [ecx+eax*4+96]
  00d1f	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 7099 : 							ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(d0, a0);			// ÊîªÂáªÂäõ

  00d22	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00d25	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00d28	8b 84 81 b0 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+176]
  00d2f	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 7100 : 							ATR_ATTACK_PET_POW(0, a0) = ATR_ATTACK_PET_POW(d0, a0);	// petÊîªÂáªÂäõ

  00d35	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00d38	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00d3b	8b 84 81 d4 01
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+468]
  00d42	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax

; 7101 : 							ATR_LONG_WORK(0, a0) = ATR_LONG_WORK(d0, a0);			// ËÆæÂÆö‰ΩøÁî®Âø†Áä¨ÁöÑÁõÆÊ†á

  00d48	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00d4b	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00d4e	8b 84 81 34 01
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+308]
  00d55	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax

; 7102 : 							ATR_VCT_NO(a0) = 1;										// ÂâçËøõ‰∏ã‰∏Ä‰∏™ÁõÆÊ†á

  00d5b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00d5e	c6 00 01	 mov	 BYTE PTR [eax], 1

; 7103 : 							ATR_INT_WORK2(p_master)++;								// Êç¢‰∏ã‰∏Ä‰∏™ÊîªÂáªÁâ©‰ª∂ÊîªÂáª

  00d61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00d66	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00d69	ff 80 2c 01 00
	00		 inc	 DWORD PTR [eax+300]

; 7104 : 							ATR_INT_WORK1(a0)--;

  00d6f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00d72	ff 88 28 01 00
	00		 dec	 DWORD PTR [eax+296]
  00d78	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00d7b	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
$LN1219@monster:

; 7105 : 							break;
; 7106 : 						}
; 7107 : 					}
; 7108 : 				}
; 7109 : 				if (d0 == ATR_INT_WORK1(a0))

  00d7e	3b 82 28 01 00
	00		 cmp	 eax, DWORD PTR [edx+296]
$LN1243@monster:
  00d84	0f 85 bf 61 00
	00		 jne	 $LN1058@monster

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  00d8a	5f		 pop	 edi
  00d8b	5e		 pop	 esi
  00d8c	c7 82 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+296], 0
  00d96	5b		 pop	 ebx
  00d97	8b e5		 mov	 esp, ebp
  00d99	5d		 pop	 ebp
  00d9a	c3		 ret	 0
$LN243@monster:

; 7110 : 					ATR_INT_WORK1(a0) = 0;
; 7111 : 			}
; 7112 : 			// Ê≤°ÁõÆÊ†á‰∫Ü,Á¶ªÂºÄ
; 7113 : 			else
; 7114 : 			{
; 7115 : 				// ËÆæÂÆöÁ¶ªÂºÄ
; 7116 : 				if (ATR_INT_WORK2(a0) == 0)	// Á¨¨‰∏ÄÊ¨°ÊâßË°å

  00d9b	83 ba 2c 01 00
	00 00		 cmp	 DWORD PTR [edx+300], 0
  00da2	75 56		 jne	 SHORT $LN250@monster

; 7117 : 				{
; 7118 : 					ATR_SPD(a0) = 16;

  00da4	c7 87 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [edi+308], 16	; 00000010H

; 7119 : 					// ÂæÄÂ∑¶‰∏äÁ¶ªÂºÄ
; 7120 : 					if (ATR_GROUP_FLG(a0) == 0)

  00dae	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  00db1	84 c0		 test	 al, al
  00db3	75 0c		 jne	 SHORT $LN251@monster

; 7121 : 						ATR_CHR_ANG(a0) = 3;

  00db5	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  00dbf	eb 0e		 jmp	 SHORT $LN253@monster
$LN251@monster:

; 7122 : 					else if (ATR_GROUP_FLG(a0) == 1)

  00dc1	3c 01		 cmp	 al, 1
  00dc3	75 0a		 jne	 SHORT $LN253@monster

; 7123 : 						ATR_CHR_ANG(a0) = 7;

  00dc5	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN253@monster:

; 7124 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 7125 : 					else if (ATR_GROUP_FLG(a0) == 2)
; 7126 : 						ATR_CHR_ANG(a0) = 5;
; 7127 : 					else if (ATR_GROUP_FLG(a0) == 3)	
; 7128 : 						ATR_CHR_ANG(a0) = 1;
; 7129 : #endif
; 7130 : 					ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  00dcf	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  00dd5	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  00ddc	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 7131 : 					ATR_INT_WORK2(a0) = 1;

  00de2	c7 82 2c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+300], 1

; 7132 : 					ATR_INT_WORK2(p_master)++;	// Êç¢‰∏ã‰∏Ä‰∏™ÊîªÂáªÁâ©‰ª∂ÊîªÂáª

  00dec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00df1	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00df4	ff 80 2c 01 00
	00		 inc	 DWORD PTR [eax+300]
$LN250@monster:

; 7133 : 				}
; 7134 : 				gemini(a0);		// ÁßªÂä®

  00dfa	57		 push	 edi
  00dfb	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 7135 : 				ATR_CHR_ACT(a0) = ANIM_WALK;
; 7136 : 				pattern(a0, 1, ANM_LOOP);

  00e00	6a 00		 push	 0
  00e02	6a 01		 push	 1
  00e04	57		 push	 edi
  00e05	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  00e0f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7137 : 				// ÁßªÂä®Ë∂ÖÂá∫ËçßÂπï
; 7138 : 				if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT)

  00e14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00e19	83 c4 10	 add	 esp, 16			; 00000010H
  00e1c	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00e1f	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  00e25	83 c0 6a	 add	 eax, 106		; 0000006aH
  00e28	3b c8		 cmp	 ecx, eax
  00e2a	7f 05		 jg	 SHORT $LN255@monster
  00e2c	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  00e2f	7d 42		 jge	 SHORT $LN257@monster
$LN255@monster:

; 7139 : 				{
; 7140 : 					DeathAction(a0);

  00e31	57		 push	 edi
  00e32	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 7141 : 					p_missile[ATR_PLACE_NO(a0)] = NULL;

  00e37	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00e3a	83 c4 04	 add	 esp, 4
  00e3d	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]
  00e44	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A[eax*4], 0

; 7142 : 					// Ê£ÄÊü•ÊòØÂê¶ÊâÄÊúâÁöÑ p_missile ÈÉΩÊ∏ÖÁ©∫‰∫Ü
; 7143 : 					for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  00e4f	33 c0		 xor	 eax, eax
$LL13@monster:

; 7144 : 					{
; 7145 : 						if (p_missile[d7] != NULL)

  00e51	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?p_missile@@3PAPAUaction@@A[eax*4], 0
  00e59	75 18		 jne	 SHORT $LN257@monster

; 7142 : 					// Ê£ÄÊü•ÊòØÂê¶ÊâÄÊúâÁöÑ p_missile ÈÉΩÊ∏ÖÁ©∫‰∫Ü
; 7143 : 					for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  00e5b	40		 inc	 eax
  00e5c	83 f8 14	 cmp	 eax, 20			; 00000014H
  00e5f	7c f0		 jl	 SHORT $LL13@monster

; 7146 : 							break;
; 7147 : 					}
; 7148 : 					if (d7 >= BATTLKPKPLYAERNUM)
; 7149 : 						ATR_INT_WORK1(p_master) = 1;	// ÊâÄÊúâÁöÑÊîªÂáªÁâ©‰ª∂ÈÉΩË°åÂä®ÂÆå‰∫Ü

  00e61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00e66	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00e69	c7 80 28 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+296], 1
$LN257@monster:

; 7150 : 				}
; 7151 : 				// ÊâÄÊúâÁöÑÊîªÂáªÁâ©‰ª∂ÈÉΩË°åÂä®ÂÆå‰∫Ü
; 7152 : 				if (ATR_INT_WORK1(p_master))

  00e73	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00e78	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00e7b	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [eax+296], 0
  00e82	0f 84 c1 60 00
	00		 je	 $LN1058@monster

; 7153 : 				{
; 7154 : 					ATR_DAMAGE(p_master) = 0;

  00e88	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 7155 : 					ATR_BODY_CNT(p_master) = 1;

  00e8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00e94	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00e97	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 7156 : 					if (ATR_BODY_WORK(0, a0) == NULL)	// Ëøô‰∏™ËõãÁöÑÁõÆÊ†á‰∏çÂú®Âú∫‰∏äÊàñÂ∑≤Ê≠ª‰∫°

  00e9b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00e9e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00ea1	85 c9		 test	 ecx, ecx
  00ea3	74 12		 je	 SHORT $LN262@monster

; 7157 : 						ATR_DAMAGE(p_master)++;
; 7158 : 					else // Â¶ÇÊûúÊúÄÂêé‰∏Ä‰∏™ÊîªÂáªÁâ©‰ª∂ÊâìÁöÑÁõÆÊ†áÁöÑÁä∂ÊÄÅÊòØÂæÖÊú∫ÊàñÊ≠ª‰∫°
; 7159 : 					if (ATR_VCT_NO(ATR_BODY_WORK(0, a0)) == 0 || ATR_LIFE(ATR_BODY_WORK(0, a0)) <= 0)

  00ea5	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00ea8	80 38 00	 cmp	 BYTE PTR [eax], 0
  00eab	74 0a		 je	 SHORT $LN262@monster
  00ead	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  00eb1	0f 8f 92 60 00
	00		 jg	 $LN1058@monster
$LN262@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  00eb7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  00ebc	5f		 pop	 edi
  00ebd	5e		 pop	 esi
  00ebe	5b		 pop	 ebx
  00ebf	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00ec2	ff 40 58	 inc	 DWORD PTR [eax+88]
  00ec5	8b e5		 mov	 esp, ebp
  00ec7	5d		 pop	 ebp
  00ec8	c3		 ret	 0
$LN242@monster:

; 7160 : 						ATR_DAMAGE(p_master)++;
; 7161 : 				}
; 7162 : 			}
; 7163 : 			break;
; 7164 : 		}
; 7165 : #endif
; 7166 : 		if (--ATR_STIMER(a0))		//??Óïò???

  00ec9	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  00ecd	0f 85 76 60 00
	00		 jne	 $LN1058@monster

; 7167 : 			break;
; 7168 : 		if (ATR_SYNC_FLG(a0))

  00ed3	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00ed6	80 b9 23 01 00
	00 00		 cmp	 BYTE PTR [ecx+291], 0
  00edd	74 4a		 je	 SHORT $LN264@monster

; 7169 : 		{	//ÓôØ?????
; 7170 : 			d0 = ATR_INT_WORK0(a0);

  00edf	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  00ee5	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7171 : 			d1 = ATR_INT_WORK1(a0);

  00ee8	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  00eee	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 7172 : 			radar(a0, &d0, &d1);	//????

  00ef1	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  00ef4	50		 push	 eax
  00ef5	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  00ef8	50		 push	 eax
  00ef9	57		 push	 edi
  00efa	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 7173 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];

  00eff	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00f02	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f05	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  00f0c	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 7174 : 			ATR_VCT_NO(a0) = 4;		//?Óï§?

  00f12	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00f15	c6 00 04	 mov	 BYTE PTR [eax], 4

; 7175 : 			ATR_SPD(a0) = 32;

  00f18	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H
  00f22	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  00f23	5e		 pop	 esi
  00f24	5b		 pop	 ebx
  00f25	8b e5		 mov	 esp, ebp
  00f27	5d		 pop	 ebp
  00f28	c3		 ret	 0
$LN264@monster:

; 7176 : 			break;
; 7177 : 		}
; 7178 : 		d0 = get_num();		//???ÓôÆÓéï?Óèù?

  00f29	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00f2e	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  00f31	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 7179 : 		if (d0 == 255)

  00f34	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00f39	75 5d		 jne	 SHORT $LN265@monster

; 7180 : 		{	//Óé∑???
; 7181 : 			d0 = ATR_INT_WORK0(a0);

  00f3b	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  00f41	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7182 : 			d1 = ATR_INT_WORK1(a0);

  00f44	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  00f4a	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 7183 : 			radar(a0, &d0, &d1);	//????

  00f4d	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  00f50	50		 push	 eax
  00f51	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  00f54	50		 push	 eax
  00f55	57		 push	 edi
  00f56	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 7184 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];

  00f5b	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  00f5e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7185 : #ifdef _SKILL_SELFEXPLODE //Ëá™ÁàÜ
; 7186 : 			if (ATR_SELFEXPLODE(a0) == 1)
; 7187 : 				ATR_VCT_NO(a0) = 114;
; 7188 : 			else
; 7189 : #endif
; 7190 : 				ATR_VCT_NO(a0) = 4;		//?Óï§?
; 7191 : 			ATR_SPD(a0) = 32;

  00f61	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00f66	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  00f6d	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  00f73	b8 04 00 00 00	 mov	 eax, 4
  00f78	83 bf d8 01 00
	00 01		 cmp	 DWORD PTR [edi+472], 1
  00f7f	0f 45 c8	 cmovne	 ecx, eax
  00f82	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00f85	88 08		 mov	 BYTE PTR [eax], cl
  00f87	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H
  00f91	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  00f92	5e		 pop	 esi
  00f93	5b		 pop	 ebx
  00f94	8b e5		 mov	 esp, ebp
  00f96	5d		 pop	 ebp
  00f97	c3		 ret	 0
$LN265@monster:

; 7192 : 			break;
; 7193 : 		}
; 7194 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_VICARIOUS)		//Óë≤Óï©?????????

  00f98	f7 41 60 00 02
	00 00		 test	 DWORD PTR [ecx+96], 512	; 00000200H
  00f9f	74 05		 je	 SHORT $LN268@monster

; 7195 : 			a2 = ATR_BODY_WORK(1, a0);

  00fa1	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00fa4	eb 03		 jmp	 SHORT $LN269@monster
$LN268@monster:

; 7196 : 		else
; 7197 : 			a2 = ATR_BODY_WORK(0, a0);		//??Óò©ÓüïÓîº

  00fa6	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
$LN269@monster:

; 7198 : 		a1 = ATR_BODY_WORK(0, a0) = p_party[d0];		//Óîá?Óò©???

  00fa9	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00fb0	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00fb3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00fb6	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 7199 : 
; 7200 : 		ATR_ATTACK_KIND(0, a0) = get_num();		//??Óéú????

  00fb9	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00fbe	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00fc1	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 7201 : 		ATR_ATTACK_POW(0, a0) = get_num();		//??????

  00fc4	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  00fc9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00fcc	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 7202 : #ifdef _PET_ITEM
; 7203 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_ATTACKBACK)

  00fd2	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00fd5	8b d1		 mov	 edx, ecx
  00fd7	f7 41 60 00 00
	00 40		 test	 DWORD PTR [ecx+96], 1073741824 ; 40000000H
  00fde	74 1e		 je	 SHORT $LN270@monster

; 7204 : 		{
; 7205 : 			ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  00fe0	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  00fe7	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 7206 : 			ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  00fed	33 c9		 xor	 ecx, ecx
  00fef	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00ff2	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  00ff9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00ffc	8b d1		 mov	 edx, ecx
$LN270@monster:

; 7207 : 		}
; 7208 : #endif
; 7209 : #ifdef _FIX_ACUPUNCTURE
; 7210 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_ACUPUNCTURE)

  00ffe	f7 41 60 00 00
	00 08		 test	 DWORD PTR [ecx+96], 134217728 ; 08000000H
  01005	74 1c		 je	 SHORT $LN271@monster

; 7211 : 		{
; 7212 : 			ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  01007	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  0100e	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 7213 : 			ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  01014	33 c9		 xor	 ecx, ecx
  01016	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01019	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  01020	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN271@monster:

; 7214 : 		}
; 7215 : #endif
; 7216 : 		if (BattleCmd[command_point] == 'p')

  01023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  01028	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  0102f	75 16		 jne	 SHORT $LN272@monster

; 7217 : 			ATR_ATTACK_PET_POW(0, a0) = get_num();		//pet??????

  01031	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01036	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01039	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  0103f	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  01042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN272@monster:

; 7218 : 		else
; 7219 : 			LogToBattleError(BattleCmd, __LINE__);
; 7220 : 
; 7221 : #ifdef _ATTACK_EFFECT
; 7222 : 		if (BattleCmd[command_point] == 's')

  01047	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  0104e	75 11		 jne	 SHORT $LN274@monster

; 7223 : 			ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  01050	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01055	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01058	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
  0105e	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN274@monster:

; 7224 : #endif
; 7225 : 
; 7226 : 		if (a1 == a2)		//??ÓôØ?Óò©??
; 7227 : 			ATR_VCT_NO(a0) = 5;		//Óòã?Óñ∫Óïò??
; 7228 : 		else
; 7229 : 			ATR_VCT_NO(a0) = 1;		//?ÓôÆ?
; 7230 : 		d0 = ATR_H_POS(a1);

  01061	3b f3		 cmp	 esi, ebx
  01063	0f 94 c0	 sete	 al
  01066	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [eax*4+1]
  0106d	88 02		 mov	 BYTE PTR [edx], al
  0106f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  01072	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7231 : 		d1 = ATR_V_POS(a1);

  01075	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  01078	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 7232 : 		radar(a0, &d0, &d1);	//????

  0107b	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  0107e	50		 push	 eax
  0107f	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  01082	50		 push	 eax
  01083	57		 push	 edi
  01084	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 7233 : 		ATR_CRS_OLD(a0) = ATR_CRS(a0) = d0;		//??????

  01089	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  0108c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0108f	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  01095	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01098	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  0109b	88 81 22 01 00
	00		 mov	 BYTE PTR [ecx+290], al

; 7234 : 		ATR_CHR_ANG(a0) = crs_change_tbl[d0];		/* ????? */

  010a1	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  010a4	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  010ab	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  010b1	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  010b2	5e		 pop	 esi
  010b3	5b		 pop	 ebx
  010b4	8b e5		 mov	 esp, ebp
  010b6	5d		 pop	 ebp
  010b7	c3		 ret	 0
$LN277@monster:

; 7235 : 		break;
; 7236 : 	case 5:		//Óòã?Óñ∫Óïò??
; 7237 : 		a1 = ATR_BODY_WORK(0, a0);
; 7238 : 		if (ATR_VCT_NO(a1) == 0)		//Óò©?Óòã?Óñ∫??????

  010b8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  010bb	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  010be	80 38 00	 cmp	 BYTE PTR [eax], 0
  010c1	0f 85 82 5e 00
	00		 jne	 $LN1058@monster

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  010c7	5f		 pop	 edi
  010c8	5e		 pop	 esi
  010c9	c6 02 01	 mov	 BYTE PTR [edx], 1
  010cc	5b		 pop	 ebx
  010cd	8b e5		 mov	 esp, ebp
  010cf	5d		 pop	 ebp
  010d0	c3		 ret	 0
$LN279@monster:

; 7239 : 			ATR_VCT_NO(a0) = 1;		//?ÓôÆ?
; 7240 : 		break;
; 7241 : 	case 4:		//ÂêéÈÄÄ
; 7242 : 		d0 = ATR_INT_WORK0(a0);

  010d1	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  010d7	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7243 : 		d1 = ATR_INT_WORK1(a0);

  010da	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  010e0	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 7244 : 		radar(a0, &d0, &d1);	//????

  010e3	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  010e6	50		 push	 eax
  010e7	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  010ea	50		 push	 eax
  010eb	57		 push	 edi
  010ec	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 7245 : 		ATR_CRS_OLD(a0) = ATR_CRS(a0) = d0;		//??????

  010f1	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  010f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  010f7	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  010fd	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01100	8a 45 fc	 mov	 al, BYTE PTR _d0$[ebp]
  01103	88 81 22 01 00
	00		 mov	 BYTE PTR [ecx+290], al

; 7246 : #ifndef _PIRATE_ANM			
; 7247 : 		gemini(a0);		//?ÓôÆ
; 7248 : #else
; 7249 : 		if (ATR_CHR_NO(a0) != 101490)

  01109	8b 8f 44 01 00
	00		 mov	 ecx, DWORD PTR [edi+324]
  0110f	81 f9 72 8c 01
	00		 cmp	 ecx, 101490		; 00018c72H
  01115	74 0f		 je	 SHORT $LN280@monster

; 7250 : 			gemini(a0);		//?ÓôÆ

  01117	57		 push	 edi
  01118	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  0111d	8b 8f 44 01 00
	00		 mov	 ecx, DWORD PTR [edi+324]
  01123	83 c4 04	 add	 esp, 4
$LN280@monster:

; 7251 : #endif			
; 7252 : 		if (d1 <= (ATR_SPD(a0) >> 2))

  01126	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  0112c	c1 f8 02	 sar	 eax, 2
  0112f	39 45 f8	 cmp	 DWORD PTR _d1$[ebp], eax
  01132	0f 8f 8c 00 00
	00		 jg	 $LN281@monster

; 7253 : 		{	//????
; 7254 : 			if (ATR_DAMAGE(p_master) != ATR_BODY_CNT(p_master))		//???Óëò???

  01138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  0113d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01140	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  01144	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  01147	3b d0		 cmp	 edx, eax
  01149	74 06		 je	 SHORT $LN282@monster

; 7255 : 				ATR_DAMAGE(p_master)++;		//???Óëò???

  0114b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0114e	89 41 58	 mov	 DWORD PTR [ecx+88], eax
$LN282@monster:

; 7256 : 			if (ATR_GROUP_FLG(a0) == 0)

  01151	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  01154	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  01157	84 c0		 test	 al, al
  01159	75 0c		 jne	 SHORT $LN283@monster

; 7257 : 				ATR_CHR_ANG(a0) = 3;

  0115b	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  01165	eb 0e		 jmp	 SHORT $LN285@monster
$LN283@monster:

; 7258 : 			else if (ATR_GROUP_FLG(a0) == 1)

  01167	3c 01		 cmp	 al, 1
  01169	75 0a		 jne	 SHORT $LN285@monster

; 7259 : 				ATR_CHR_ANG(a0) = 7;

  0116b	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN285@monster:

; 7260 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 7261 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 7262 : 				ATR_CHR_ANG(a0) = 5;
; 7263 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 7264 : 				ATR_CHR_ANG(a0) = 1;
; 7265 : #endif//
; 7266 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  01175	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  0117b	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  01181	0f b6 c1	 movzx	 eax, cl
  01184	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  0118a	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl

; 7267 : 			ATR_H_POS(a0) = ATR_INT_WORK0(a0);		//?Óù≥ÓüúÓíú

  01190	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01193	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  01199	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 7268 : 			ATR_V_POS(a0) = ATR_INT_WORK1(a0);

  0119c	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  011a2	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 7269 : #ifdef _PIRATE_ANM			
; 7270 : 			if (ATR_CHR_NO(a0) == 101492)

  011a5	81 bf 44 01 00
	00 74 8c 01 00	 cmp	 DWORD PTR [edi+324], 101492 ; 00018c74H
  011af	75 0a		 jne	 SHORT $LN286@monster

; 7271 : 				ATR_CHR_NO(a0) = 101490;

  011b1	c7 87 44 01 00
	00 72 8c 01 00	 mov	 DWORD PTR [edi+324], 101490 ; 00018c72H
$LN286@monster:

; 7272 : #endif
; 7273 : 			ATR_VCT_NO(a0) = 0;		//Óïò??

  011bb	c6 01 00	 mov	 BYTE PTR [ecx], 0
  011be	8b 8f 44 01 00
	00		 mov	 ecx, DWORD PTR [edi+324]
$LN281@monster:

; 7274 : 		}
; 7275 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  011c4	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 7276 : #ifndef _PIRATE_ANM
; 7277 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 7278 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);	
; 7279 : #else		
; 7280 : 		if (ATR_CHR_NO(a0) == 101490)

  011ce	81 f9 72 8c 01
	00		 cmp	 ecx, 101490		; 00018c72H
  011d4	0f 85 14 40 00
	00		 jne	 $LN839@monster

; 7281 : 		{
; 7282 : 			pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP);

  011da	6a 01		 push	 1
  011dc	6a 00		 push	 0
  011de	57		 push	 edi
  011df	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7283 : 			if (a0->bmpNo == 301026 || a0->bmpNo == 301138)

  011e4	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  011ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  011ed	3d e2 97 04 00	 cmp	 eax, 301026		; 000497e2H
  011f2	74 0b		 je	 SHORT $LN290@monster
  011f4	3d 52 98 04 00	 cmp	 eax, 301138		; 00049852H
  011f9	0f 85 4a 5d 00
	00		 jne	 $LN1058@monster
$LN290@monster:

; 7284 : 				ATR_CHR_NO(a0) = 101492;

  011ff	c7 87 44 01 00
	00 74 8c 01 00	 mov	 DWORD PTR [edi+324], 101492 ; 00018c74H
  01209	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0120a	5e		 pop	 esi
  0120b	5b		 pop	 ebx
  0120c	8b e5		 mov	 esp, ebp
  0120e	5d		 pop	 ebp
  0120f	c3		 ret	 0
$LN291@monster:

; 7285 : 		}
; 7286 : 		else
; 7287 : 		{
; 7288 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 7289 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 7290 : 		}
; 7291 : #endif	
; 7292 : 		break;
; 7293 : 	case 6:		//Óë≤Óï©?Ó†°?Óé£Óèû
; 7294 : 		if (--ATR_STIMER(a0))

  01210	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  01214	0f 85 2f 5d 00
	00		 jne	 $LN1058@monster

; 7295 : 			break;
; 7296 : 		ATR_SPD(a0) = 10;

  0121a	c7 87 34 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [edi+308], 10	; 0000000aH

; 7297 : 		ATR_VCT_NO(a0) = 14;		//???????Óï§?

  01224	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN1258@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01227	c6 00 0e	 mov	 BYTE PTR [eax], 14	; 0000000eH
  0122a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0122d	5f		 pop	 edi
  0122e	5e		 pop	 esi
  0122f	5b		 pop	 ebx
  01230	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  01237	8b e5		 mov	 esp, ebp
  01239	5d		 pop	 ebp
  0123a	c3		 ret	 0
$LN293@monster:

; 7298 : 		ATR_FIRST_FLG(a0) = 0;		//?Óï§?
; 7299 : 		break;
; 7300 : 	case 10:		//Ë¢´ÊîªÂáª
; 7301 : 		if (!ATR_DAMAGE(a0) && ATR_LIFE(a0) > 0 && !ATR_PET_DAMAGE(a0))	//???Óíü?????

  0123b	83 7a 58 00	 cmp	 DWORD PTR [edx+88], 0
  0123f	75 73		 jne	 SHORT $LN294@monster
  01241	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  01245	7e 6d		 jle	 SHORT $LN294@monster
  01247	83 ba 24 02 00
	00 00		 cmp	 DWORD PTR [edx+548], 0
  0124e	75 64		 jne	 SHORT $LN294@monster

; 7302 : 		{
; 7303 : 			//????????
; 7304 : 			if (!ATR_COMBO(a0))

  01250	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  01257	75 41		 jne	 SHORT $LN295@monster

; 7305 : 			{
; 7306 : 				//??Óù∏Óçï
; 7307 : #ifdef _SKILL_ROAR  //ÂÆ†ÊäÄ:Â§ßÂêº(ÂÖãÂπ¥ÂÖΩ)//tuen "miss"  off
; 7308 : 				if (ATR_ROAR(a0) == 2){

  01259	83 bf d4 01 00
	00 02		 cmp	 DWORD PTR [edi+468], 2
  01260	74 1f		 je	 SHORT $LN301@monster

; 7309 : 					//	set_damage_num(a0, 18, -64);
; 7310 : 				}
; 7311 : 				else
; 7312 : 				{
; 7313 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 7314 : 					if (NoMiss == 1);//set_damage_num(a0, 1, -64);

  01262	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?NoMiss@@3FA ; NoMiss
  01268	66 83 f8 01	 cmp	 ax, 1
  0126c	74 13		 je	 SHORT $LN301@monster

; 7315 : 					else if (NoMiss == -1)

  0126e	66 83 f8 ff	 cmp	 ax, -1
  01272	75 0d		 jne	 SHORT $LN301@monster

; 7316 : 						set_damage_num(a0, 0, -64);

  01274	6a c0		 push	 -64			; ffffffc0H
  01276	6a 00		 push	 0
  01278	57		 push	 edi
  01279	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  0127e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN301@monster:

; 7317 : #else
; 7318 : 					set_damage_num(a0, 0, -64);
; 7319 : #endif
; 7320 : 				}
; 7321 : #else
; 7322 : 				set_damage_num(a0, 0, -64);
; 7323 : #endif
; 7324 : 				d0 = get_next_flg();		//?????Óöá?????

  01281	e8 00 00 00 00	 call	 ?get_next_flg@@YAHXZ	; get_next_flg
  01286	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7325 : 				if (d0 & ATT_COUNTER)		//???????

  01289	a8 10		 test	 al, 16			; 00000010H
  0128b	74 0d		 je	 SHORT $LN295@monster

; 7326 : 					ATR_VCT_NO(a0) = 11;		//?????

  0128d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01290	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01291	5e		 pop	 esi
  01292	5b		 pop	 ebx
  01293	c6 00 0b	 mov	 BYTE PTR [eax], 11	; 0000000bH
  01296	8b e5		 mov	 esp, ebp
  01298	5d		 pop	 ebp
  01299	c3		 ret	 0
$LN295@monster:
  0129a	6a 00		 push	 0
  0129c	6a 00		 push	 0
  0129e	57		 push	 edi
  0129f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  012a4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  012a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  012aa	5f		 pop	 edi
  012ab	5e		 pop	 esi
  012ac	c6 00 00	 mov	 BYTE PTR [eax], 0
  012af	5b		 pop	 ebx
  012b0	8b e5		 mov	 esp, ebp
  012b2	5d		 pop	 ebp
  012b3	c3		 ret	 0
$LN294@monster:

; 7327 : 				else
; 7328 : 				{
; 7329 : 					pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 7330 : 					ATR_VCT_NO(a0) = 0;		//Óïò??
; 7331 : 				}
; 7332 : 			}
; 7333 : 			else
; 7334 : 			{
; 7335 : 				pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 7336 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 7337 : 			}
; 7338 : 			break;
; 7339 : 		}
; 7340 : 		if (ATR_GUARD_FLG(a0))

  012b4	80 ba 1c 01 00
	00 00		 cmp	 BYTE PTR [edx+284], 0
  012bb	74 20		 je	 SHORT $LN304@monster

; 7341 : 		{	//?????
; 7342 : 			//????????
; 7343 : 			if (!ATR_COMBO(a0))

  012bd	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  012c4	75 10		 jne	 SHORT $LN306@monster

; 7344 : 				//???Óù∏Óçï
; 7345 : 				set_damage_num(a0, 3, -64 + 16);

  012c6	6a d0		 push	 -48			; ffffffd0H
  012c8	6a 03		 push	 3
  012ca	57		 push	 edi
  012cb	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  012d0	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  012d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN306@monster:

; 7346 : 			ATR_CHR_ACT(a0) = ANIM_GUARD;		//??????????//Èò≤

  012d6	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH

; 7347 : 		}

  012db	eb 05		 jmp	 SHORT $LN305@monster
$LN304@monster:

; 7348 : 		else
; 7349 : 			ATR_CHR_ACT(a0) = ANIM_DAMAGE;		//???????????//Âèó‰º§

  012dd	b8 01 00 00 00	 mov	 eax, 1
$LN305@monster:

; 7350 : 		ATR_CHR_ANG(a0) = (ATR_DAMAGE_ANG(a0) + 4) & 7;

  012e2	89 87 4c 01 00
	00		 mov	 DWORD PTR [edi+332], eax
  012e8	0f b6 82 1d 01
	00 00		 movzx	 eax, BYTE PTR [edx+285]
  012ef	83 e8 04	 sub	 eax, 4
  012f2	83 e0 07	 and	 eax, 7
  012f5	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 7351 : 		//??????????????????
; 7352 : 		if (!ATR_COMBO(a0) || ATR_CHR_ACT_OLD(a0) != ANIM_DAMAGE)

  012fb	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  01302	74 09		 je	 SHORT $LN308@monster
  01304	83 bf 50 01 00
	00 01		 cmp	 DWORD PTR [edi+336], 1
  0130b	74 1c		 je	 SHORT $LN307@monster
$LN308@monster:

; 7353 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_DAMAGE_ANG(a0)];

  0130d	0f b6 82 1d 01
	00 00		 movzx	 eax, BYTE PTR [edx+285]
  01314	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  0131a	0f b6 c1	 movzx	 eax, cl
  0131d	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  01323	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl
$LN307@monster:

; 7354 : 		pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP);

  01329	6a 01		 push	 1
  0132b	6a 00		 push	 0
  0132d	57		 push	 edi
  0132e	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7355 : 		ATR_VCT_NO(a0) = 11;

  01333	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01336	83 c4 0c	 add	 esp, 12			; 0000000cH
  01339	c6 00 0b	 mov	 BYTE PTR [eax], 11	; 0000000bH

; 7356 : 		//?????
; 7357 : 		if (ATR_COMBO(a0))

  0133c	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0133f	80 b9 00 01 00
	00 00		 cmp	 BYTE PTR [ecx+256], 0
  01346	74 06		 je	 SHORT $LN309@monster

; 7358 : 			ATR_STIMER(a0) = 255;

  01348	c6 41 01 ff	 mov	 BYTE PTR [ecx+1], 255	; 000000ffH
  0134c	eb 17		 jmp	 SHORT $LN311@monster
$LN309@monster:

; 7359 : 		else
; 7360 : 		{
; 7361 : 			if (ATR_KAISHIN(a0))		//?Óëû?????

  0134e	80 b9 01 01 00
	00 00		 cmp	 BYTE PTR [ecx+257], 0
  01355	b8 08 00 00 00	 mov	 eax, 8
  0135a	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0135f	0f 45 c2	 cmovne	 eax, edx
  01362	88 41 01	 mov	 BYTE PTR [ecx+1], al
$LN311@monster:

; 7362 : 				ATR_STIMER(a0) = HIT_STOP_TIM * 4;
; 7363 : 			else
; 7364 : 				ATR_STIMER(a0) = HIT_STOP_TIM;
; 7365 : 		}
; 7366 : #ifdef _PETSKILL_ACUPUNCTURE
; 7367 : 		/////////////////////////
; 7368 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 7369 : 		if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP | ATT_ACUPUNCTURE
; 7370 : #ifdef _PET_ITEM
; 7371 : 			| ATT_ATTACKBACK
; 7372 : #endif
; 7373 : 			) && ATR_SYNC_FLG(a0) == 0)

  01365	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01368	8b c1		 mov	 eax, ecx
  0136a	f7 41 60 00 04
	00 4a		 test	 DWORD PTR [ecx+96], 1241515008 ; 4a000400H
  01371	74 10		 je	 SHORT $LN313@monster
  01373	80 b9 23 01 00
	00 00		 cmp	 BYTE PTR [ecx+291], 0
  0137a	75 07		 jne	 SHORT $LN313@monster

; 7374 : #else		
; 7375 : 		if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ACUPUNCTURE
; 7376 : #ifdef _PET_ITEM
; 7377 : 			| ATT_ATTACKBACK
; 7378 : #endif
; 7379 : 			) && ATR_SYNC_FLG(a0) == 0)
; 7380 : #endif
; 7381 : 			/////////////////////////
; 7382 : #else
; 7383 : 		/////////////////////////
; 7384 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 7385 : 		if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP) && ATR_SYNC_FLG(a0) == 0)
; 7386 : #else		
; 7387 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_REFLEX && ATR_SYNC_FLG(a0) == 0)
; 7388 : #endif
; 7389 : 			/////////////////////////
; 7390 : #endif
; 7391 : 			ATR_STIMER(a0) = HIT_STOP_TIM * 4;//817333333

  0137c	c6 41 01 20	 mov	 BYTE PTR [ecx+1], 32	; 00000020H
  01380	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN313@monster:

; 7392 : 		ATR_SPD(a0) = 16;

  01383	c7 87 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [edi+308], 16	; 00000010H

; 7393 : #ifdef _MAGIC_DEEPPOISION   //ÂâßÊØí
; 7394 : 		if ((ATR_DEEPPOISION(a0) == 1))

  0138d	83 bf dc 01 00
	00 01		 cmp	 DWORD PTR [edi+476], 1
  01394	75 07		 jne	 SHORT $LN314@monster

; 7395 : 			ATR_STIMER(a0) = 50;

  01396	c6 40 01 32	 mov	 BYTE PTR [eax+1], 50	; 00000032H
  0139a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN314@monster:

; 7396 : #endif
; 7397 : 		//????????
; 7398 : 		if (!ATR_COMBO(a0))

  0139d	80 b8 00 01 00
	00 00		 cmp	 BYTE PTR [eax+256], 0
  013a4	0f 85 9f 5b 00
	00		 jne	 $LN1058@monster

; 7399 : 		{
; 7400 : 			//????Óñ±Óù∏Óçï
; 7401 : 			set_damage_num(a0, 6, -64);

  013aa	6a c0		 push	 -64			; ffffffc0H
  013ac	6a 06		 push	 6
  013ae	57		 push	 edi
  013af	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 7402 : 			ATR_LIFE(a0) -= ATR_DAMAGE(a0);		//?????Óå´

  013b4	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  013b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  013ba	8b 57 78	 mov	 edx, DWORD PTR [edi+120]
  013bd	2b 51 58	 sub	 edx, DWORD PTR [ecx+88]
  013c0	89 57 78	 mov	 DWORD PTR [edi+120], edx

; 7403 : 			//andy_mp
; 7404 : 			ATR_MP(a0) -= ATR_MPDAMAGE(a0);

  013c3	8b 81 30 02 00
	00		 mov	 eax, DWORD PTR [ecx+560]
  013c9	29 87 84 00 00
	00		 sub	 DWORD PTR [edi+132], eax

; 7405 : 			ATR_PET_LIFE(a0) -= ATR_PET_DAMAGE(a0);

  013cf	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  013d5	2b 81 24 02 00
	00		 sub	 eax, DWORD PTR [ecx+548]

; 7406 : 			//andy_fall
; 7407 : 			if (ATR_PETFALL(a0) == 1)

  013db	8b ca		 mov	 ecx, edx
  013dd	89 87 b0 01 00
	00		 mov	 DWORD PTR [edi+432], eax
  013e3	83 bf bc 01 00
	00 01		 cmp	 DWORD PTR [edi+444], 1
  013ea	75 16		 jne	 SHORT $LN317@monster

; 7408 : 			{
; 7409 : 				if (ATR_LIFE(a0) > 0)

  013ec	85 d2		 test	 edx, edx
  013ee	7e 12		 jle	 SHORT $LN317@monster

; 7410 : 					petfallChangeGraph(a0);

  013f0	57		 push	 edi
  013f1	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  013f6	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  013fc	83 c4 04	 add	 esp, 4
  013ff	8b 4f 78	 mov	 ecx, DWORD PTR [edi+120]
$LN317@monster:

; 7411 : 			}
; 7412 : 			if (ATR_PET_LIFE(a0) <= 0 && ATR_RIDE(a0))

  01402	8b d1		 mov	 edx, ecx
  01404	85 c0		 test	 eax, eax
  01406	7f 23		 jg	 SHORT $LN319@monster
  01408	83 bf 94 01 00
	00 00		 cmp	 DWORD PTR [edi+404], 0
  0140f	74 1a		 je	 SHORT $LN319@monster

; 7413 : 			{	//?Ó†å??????
; 7414 : 				ATR_PET_LIFE(a0) = 0;

  01411	c7 87 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+432], 0

; 7415 : 				if (ATR_LIFE(a0) > 0)

  0141b	85 c9		 test	 ecx, ecx
  0141d	7e 0c		 jle	 SHORT $LN319@monster

; 7416 : 					petfallChangeGraph(a0);

  0141f	57		 push	 edi
  01420	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  01425	8b 57 78	 mov	 edx, DWORD PTR [edi+120]
  01428	83 c4 04	 add	 esp, 4
$LN319@monster:

; 7417 : 			}
; 7418 : 			if (ATR_LIFE(a0) <= 0 || (ATR_ATTACK_KIND(1, a0) & ATT_DEATH))

  0142b	85 d2		 test	 edx, edx
  0142d	7e 0d		 jle	 SHORT $LN321@monster
  0142f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01432	f6 40 64 01	 test	 BYTE PTR [eax+100], 1
  01436	0f 84 0d 5b 00
	00		 je	 $LN1058@monster
$LN321@monster:

; 7419 : 			{	//?Ó†å??????
; 7420 : 				ATR_LIFE(a0) = 0;

  0143c	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0

; 7421 : 				slow_flg++;		//????Óåø

  01443	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
  01449	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0144a	5e		 pop	 esi
  0144b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?flash_vct_no@@3HA, 1 ; flash_vct_no
  01455	5b		 pop	 ebx
  01456	8b e5		 mov	 esp, ebp
  01458	5d		 pop	 ebp
  01459	c3		 ret	 0
$LN322@monster:

; 7422 : 				flash_vct_no = 1;		//?????????
; 7423 : 			}
; 7424 : 		}
; 7425 : 		break;
; 7426 : 	case 11:		//????Óïò?
; 7427 : 		if (ATR_DAMAGE(a0))

  0145a	83 7a 58 00	 cmp	 DWORD PTR [edx+88], 0
  0145e	74 31		 je	 SHORT $LN324@monster

; 7428 : 		{	//???????
; 7429 : 			gemini(a0);		//??????

  01460	57		 push	 edi
  01461	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 7430 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = (ATR_CRS(a0) + 16) & 31;

  01466	8b 8f 38 01 00
	00		 mov	 ecx, DWORD PTR [edi+312]
  0146c	83 c4 04	 add	 esp, 4
  0146f	83 e9 10	 sub	 ecx, 16			; 00000010H
  01472	83 e1 1f	 and	 ecx, 31			; 0000001fH
  01475	89 8f 38 01 00
	00		 mov	 DWORD PTR [edi+312], ecx
  0147b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0147e	88 88 22 01 00
	00		 mov	 BYTE PTR [eax+290], cl

; 7431 : 			if (--ATR_STIMER(a0))		//??Óïò???

  01484	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01487	80 40 01 ff	 add	 BYTE PTR [eax+1], 255	; 000000ffH
  0148b	0f 85 b8 5a 00
	00		 jne	 $LN1058@monster
$LN324@monster:

; 7432 : 				break;
; 7433 : 		}
; 7434 : #ifdef _PETSKILL_ACUPUNCTURE
; 7435 : 		//////////////////////
; 7436 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 7437 : 		if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP | ATT_ACUPUNCTURE
; 7438 : #ifdef _PET_ITEM
; 7439 : 			| ATT_ATTACKBACK
; 7440 : #endif
; 7441 : 			) && ATR_SYNC_FLG(a0) == 0 )

  01491	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01494	f7 40 60 00 04
	00 4a		 test	 DWORD PTR [eax+96], 1241515008 ; 4a000400H
  0149b	0f 84 1a 01 00
	00		 je	 $LN326@monster
  014a1	80 b8 23 01 00
	00 00		 cmp	 BYTE PTR [eax+291], 0
  014a8	0f 85 0d 01 00
	00		 jne	 $LN326@monster

; 7442 : #else		
; 7443 : 		if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ACUPUNCTURE
; 7444 : #ifdef _PET_ITEM
; 7445 : 			| ATT_ATTACKBACK
; 7446 : #endif
; 7447 : 			) && ATR_SYNC_FLG(a0) == 0)
; 7448 : #endif
; 7449 : 			//////////////////////
; 7450 : #else
; 7451 : 		//////////////////////
; 7452 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 7453 : 		if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP) && ATR_SYNC_FLG(a0) == 0)
; 7454 : #else		
; 7455 : 		if (ATR_ATTACK_KIND(0, a0) & ATT_REFLEX && ATR_SYNC_FLG(a0) == 0)
; 7456 : #endif
; 7457 : 			//////////////////////
; 7458 : #endif
; 7459 : 		{
; 7460 : 			sav_command_point = command_point;		//?????Óí∂?????Óï§Óùç

  014ae	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?command_point@@3HA

; 7461 : 			d0 = get_num();

  014b4	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  014b9	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7462 : 			command_point = sav_command_point;		//?????Óí∂???????

  014bc	89 35 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, esi

; 7463 : 			if (d0 != 255)

  014c2	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  014c7	0f 84 ee 00 00
	00		 je	 $LN326@monster

; 7464 : 			{	//??ÓçòÓû§??
; 7465 : 				a1 = ATR_BODY_WORK(0, a0) = p_party[get_num()];		//Óîá?Óò©???

  014cd	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  014d2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  014d9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  014dc	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 7466 : 				ATR_ATTACK_KIND(0, a0) = get_num();		//??Óéú????

  014df	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  014e4	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  014e7	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 7467 : 				ATR_ATTACK_POW(0, a0) = get_num();		//??????

  014ea	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  014ef	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  014f2	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 7468 : #ifdef _PET_ITEM
; 7469 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_ATTACKBACK)

  014f8	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  014fb	f7 41 60 00 00
	00 40		 test	 DWORD PTR [ecx+96], 1073741824 ; 40000000H
  01502	74 1c		 je	 SHORT $LN327@monster

; 7470 : 				{
; 7471 : 					ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  01504	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  0150b	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 7472 : 					ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  01511	33 c9		 xor	 ecx, ecx
  01513	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01516	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  0151d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN327@monster:

; 7473 : 				}
; 7474 : #endif
; 7475 : #ifdef _FIX_ACUPUNCTURE
; 7476 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_ACUPUNCTURE)

  01520	f7 41 60 00 00
	00 08		 test	 DWORD PTR [ecx+96], 134217728 ; 08000000H
  01527	74 1c		 je	 SHORT $LN328@monster

; 7477 : 				{
; 7478 : 					ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  01529	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  01530	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 7479 : 					ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  01536	33 c9		 xor	 ecx, ecx
  01538	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0153b	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  01542	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN328@monster:

; 7480 : 				}
; 7481 : #endif
; 7482 : 				if (BattleCmd[command_point] == 'p')

  01545	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  0154a	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  01551	75 16		 jne	 SHORT $LN329@monster

; 7483 : 					ATR_ATTACK_PET_POW(0, a0) = get_num();		//pet??????

  01553	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01558	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0155b	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  01561	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01564	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN329@monster:

; 7484 : 				else
; 7485 : 					LogToBattleError(BattleCmd, __LINE__);
; 7486 : 
; 7487 : 				//‰øÆÊ≠£ÊàòÊñóÁâπÊïà  xiezi
; 7488 : #ifdef _ATTACK_EFFECT
; 7489 : 				if (BattleCmd[command_point] == 's')

  01569	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  01570	75 11		 jne	 SHORT $LN331@monster

; 7490 : 					ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  01572	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01577	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0157a	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
  01580	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN331@monster:

; 7491 : #endif
; 7492 : 
; 7493 : 				ATR_HIT_STOP(a0) = 0;		//??????????

  01583	c6 41 5c 00	 mov	 BYTE PTR [ecx+92], 0

; 7494 : 				ATR_VCT_NO(a0) = 2;		//???

  01587	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0158a	c6 00 02	 mov	 BYTE PTR [eax], 2

; 7495 : 				ATR_FIRST_FLG(a0) = 0;		//????????

  0158d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01590	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 7496 : 				ATR_CHR_ACT_OLD(a0) = -1;

  01597	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1

; 7497 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_VICARIOUS)		//Óë≤Óï©??????

  015a1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  015a4	f7 40 60 00 02
	00 00		 test	 DWORD PTR [eax+96], 512	; 00000200H
  015ab	0f 84 98 59 00
	00		 je	 $LN1058@monster

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  015b1	5f		 pop	 edi
  015b2	5e		 pop	 esi
  015b3	c6 00 01	 mov	 BYTE PTR [eax], 1
  015b6	5b		 pop	 ebx
  015b7	8b e5		 mov	 esp, ebp
  015b9	5d		 pop	 ebp
  015ba	c3		 ret	 0
$LN326@monster:

; 7498 : 					ATR_VCT_NO(a0) = 1;		//Óì∑Óë¥?
; 7499 : 				break;
; 7500 : 			}
; 7501 : 		}
; 7502 : 		if (ATR_COUNTER_FLG(a0))

  015bb	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  015be	80 b9 0c 01 00
	00 00		 cmp	 BYTE PTR [ecx+268], 0
  015c5	0f 84 11 01 00
	00		 je	 $LN333@monster

; 7503 : 		{	//???????//counter
; 7504 : 			a1 = ATR_BODY_WORK(0, a0) = p_party[get_num()];		//Óîá?Óò©???

  015cb	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  015d0	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  015d7	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  015da	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  015dd	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  015e0	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 7505 : 			ATR_ATTACK_KIND(0, a0) = get_num();		//??Óéú????

  015e3	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  015e8	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  015eb	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 7506 : 			ATR_ATTACK_POW(0, a0) = get_num();		//??????

  015ee	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  015f3	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  015f6	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 7507 : #ifdef _PET_ITEM
; 7508 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ATTACKBACK)

  015fc	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  015ff	f7 41 60 00 00
	00 40		 test	 DWORD PTR [ecx+96], 1073741824 ; 40000000H
  01606	74 1c		 je	 SHORT $LN334@monster

; 7509 : 			{
; 7510 : 				ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  01608	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  0160f	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 7511 : 				ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  01615	33 c9		 xor	 ecx, ecx
  01617	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0161a	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  01621	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN334@monster:

; 7512 : 			}
; 7513 : #endif
; 7514 : #ifdef _FIX_ACUPUNCTURE
; 7515 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ACUPUNCTURE)

  01624	f7 41 60 00 00
	00 08		 test	 DWORD PTR [ecx+96], 134217728 ; 08000000H
  0162b	74 1c		 je	 SHORT $LN335@monster

; 7516 : 			{
; 7517 : 				ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  0162d	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  01634	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 7518 : 				ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  0163a	33 c9		 xor	 ecx, ecx
  0163c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0163f	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  01646	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN335@monster:

; 7519 : 			}
; 7520 : #endif
; 7521 : 			if (BattleCmd[command_point] == 'p')

  01649	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  0164e	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  01655	75 16		 jne	 SHORT $LN336@monster

; 7522 : 				ATR_ATTACK_PET_POW(0, a0) = get_num();		//pet??????

  01657	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0165c	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0165f	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  01665	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01668	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN336@monster:

; 7523 : 			else
; 7524 : 				LogToBattleError(BattleCmd, __LINE__);
; 7525 : 
; 7526 : 			//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 7527 : #ifdef _ATTACK_EFFECT
; 7528 : 			if (BattleCmd[command_point] == 's')

  0166d	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  01674	75 11		 jne	 SHORT $LN338@monster

; 7529 : 				ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  01676	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0167b	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0167e	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
  01684	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN338@monster:

; 7530 : #endif
; 7531 : 
; 7532 : 			ATR_CHR_ANG(a0) = (ATR_DAMAGE_ANG(a0) + 4) & 7;

  01687	0f b6 81 1d 01
	00 00		 movzx	 eax, BYTE PTR [ecx+285]

; 7533 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0168e	6a 00		 push	 0
  01690	83 e8 04	 sub	 eax, 4
  01693	83 e0 07	 and	 eax, 7
  01696	6a 00		 push	 0
  01698	57		 push	 edi
  01699	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  0169f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7534 : 			ATR_BODY_CNT(a0) = 1;			//

  016a4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  016a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  016aa	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 7535 : 			ATR_BODY_WORK(0, a0) = a1;		//Óîá?Óò©

  016ae	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  016b1	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 7536 : 			ATR_HIT_STOP(a0) = HIT_STOP_TIM;		//??????????

  016b4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  016b7	c6 40 5c 08	 mov	 BYTE PTR [eax+92], 8

; 7537 : 			ATR_VCT_NO(a0) = 2;		//???

  016bb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  016be	c6 00 02	 mov	 BYTE PTR [eax], 2

; 7538 : 			ATR_FIRST_FLG(a0) = 0;		//????????

  016c1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  016c4	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 7539 : 			//?????Óù∏Óçï
; 7540 : 			ATR_CHR_ACT_OLD(a0) = -1;

  016cb	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  016d5	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  016d6	5e		 pop	 esi
  016d7	5b		 pop	 ebx
  016d8	8b e5		 mov	 esp, ebp
  016da	5d		 pop	 ebp
  016db	c3		 ret	 0
$LN333@monster:

; 7541 : 			break;
; 7542 : 		}
; 7543 : 		if (ATR_LIFE(a0) <= 0)		//?Ó†å??

  016dc	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  016e0	8b d1		 mov	 edx, ecx
  016e2	7f 0b		 jg	 SHORT $LN339@monster

; 7544 : 			slow_flg--;		//?????

  016e4	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?slow_flg@@3HA ; slow_flg
  016ea	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  016ed	8b d1		 mov	 edx, ecx
$LN339@monster:

; 7545 : 		//ÊâìÈ£û ?????
; 7546 : 		if (ATR_AKO_FLG(a0))

  016ef	80 b9 21 01 00
	00 00		 cmp	 BYTE PTR [ecx+289], 0
  016f6	0f 84 ca 00 00
	00		 je	 $LN340@monster

; 7547 : 		{
; 7548 : 			//????
; 7549 : 			ATR_FIRST_FLG(a0) = 0;

  016fc	c6 81 1e 01 00
	00 00		 mov	 BYTE PTR [ecx+286], 0

; 7550 : 			ATR_VCT_NO(a0) = 55;

  01703	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01706	c6 00 37	 mov	 BYTE PTR [eax], 55	; 00000037H

; 7551 : 			//???Óèù?Óöº?ÔºØÔº´??
; 7552 : 			if (ATR_PET_OK(a0))

  01709	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0170c	80 b9 20 01 00
	00 00		 cmp	 BYTE PTR [ecx+288], 0
  01713	74 2b		 je	 SHORT $LN341@monster

; 7553 : 			{
; 7554 : 				a1 = p_party[ATR_PLACE_NO(a0) + 5];		//???Óèù?????

  01715	0f b6 81 1f 01
	00 00		 movzx	 eax, BYTE PTR [ecx+287]
  0171c	8b 14 85 14 00
	00 00		 mov	 edx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4+20]

; 7555 : 				if (ATR_NAME(a1) != NULL)

  01723	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  01727	74 17		 je	 SHORT $LN341@monster

; 7556 : 				{
; 7557 : 					ATR_BODY_WORK(0, a0) = a1;		//?????????

  01729	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 7558 : 					if (ATR_LIFE(a1) > 0)		//???Óíü?????

  0172c	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  01730	7e 15		 jle	 SHORT $LN342@monster

; 7559 : 					{
; 7560 : 						ATR_VCT_NO(a1) = 56;		//????????

  01732	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01735	c6 00 38	 mov	 BYTE PTR [eax], 56	; 00000038H

; 7561 : 						ATR_BODY_WORK(0, a1) = a0;		//??Óéî??????

  01738	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0173b	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 7562 : 					}
; 7563 : 				}

  0173e	eb 07		 jmp	 SHORT $LN342@monster
$LN341@monster:

; 7564 : 				else
; 7565 : 					ATR_BODY_WORK(0, a0) = NULL;		//pet work clear?????????
; 7566 : 			}
; 7567 : 			else
; 7568 : 				ATR_BODY_WORK(0, a0) = NULL;		//?????????
; 7569 : 			//ÓçòÓû§??????
; 7570 : 			if (BattleMyNo + 5 == ATR_PLACE_NO(a0))

  01740	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN342@monster:
  01747	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0174a	0f b6 88 1f 01
	00 00		 movzx	 ecx, BYTE PTR [eax+287]
  01751	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  01756	83 c0 05	 add	 eax, 5
  01759	3b c1		 cmp	 eax, ecx
  0175b	0f 85 e8 57 00
	00		 jne	 $LN1058@monster

; 7571 : 			{
; 7572 : 				// ??????Óé∑??????
; 7573 : 				if (att_select_flg == TRUE)

  01761	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?att_select_flg@@3DA, 1 ; att_select_flg
  01768	75 21		 jne	 SHORT $LN347@monster

; 7574 : 				{
; 7575 : 					//????
; 7576 : 					pc.selectPetNo[pc.battlePetNo] = FALSE;

  0176a	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  01771	33 c9		 xor	 ecx, ecx
  01773	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01774	5e		 pop	 esi
  01775	5b		 pop	 ebx
  01776	66 89 0c 45 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[eax*2+172], cx
  0177e	83 c8 ff	 or	 eax, -1
  01781	66 a3 aa 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+170, ax
  01787	8b e5		 mov	 esp, ebp
  01789	5d		 pop	 ebp
  0178a	c3		 ret	 0
$LN347@monster:

; 7577 : 					pc.battlePetNo = -1;
; 7578 : 				}
; 7579 : 				else
; 7580 : 				{
; 7581 : 					// ÓôØ?????
; 7582 : 					if (battlePetNoBak2 == pc.battlePetNo)

  0178b	0f bf 0d aa 00
	00 00		 movsx	 ecx, WORD PTR ?pc@@3UPC@@A+170
  01792	a1 00 00 00 00	 mov	 eax, DWORD PTR ?battlePetNoBak2@@3HA ; battlePetNoBak2
  01797	3b c1		 cmp	 eax, ecx
  01799	75 1a		 jne	 SHORT $LN349@monster

; 7583 : 					{
; 7584 : 						//????
; 7585 : 						pc.selectPetNo[pc.battlePetNo] = FALSE;

  0179b	33 c0		 xor	 eax, eax
  0179d	5f		 pop	 edi
  0179e	66 89 04 4d ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[ecx*2+172], ax

; 7586 : 						pc.battlePetNo = -1;

  017a6	83 c8 ff	 or	 eax, -1

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  017a9	5e		 pop	 esi
  017aa	66 a3 aa 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+170, ax
  017b0	5b		 pop	 ebx
  017b1	8b e5		 mov	 esp, ebp
  017b3	5d		 pop	 ebp
  017b4	c3		 ret	 0
$LN349@monster:
  017b5	5f		 pop	 edi
  017b6	33 c9		 xor	 ecx, ecx
  017b8	5e		 pop	 esi
  017b9	66 89 0c 45 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[eax*2+172], cx
  017c1	5b		 pop	 ebx
  017c2	8b e5		 mov	 esp, ebp
  017c4	5d		 pop	 ebp
  017c5	c3		 ret	 0
$LN340@monster:

; 7587 : 					}
; 7588 : 					else
; 7589 : 						//????
; 7590 : 						pc.selectPetNo[battlePetNoBak2] = FALSE;
; 7591 : 				}
; 7592 : 			}
; 7593 : 			break;
; 7594 : 		}
; 7595 : 		if (ATR_KAISHIN(a0))		//?Óëû?????
; 7596 : 			ATR_SPD(a0) = 35;//ÂêéÈÄÄË∑ùÁ¶ª
; 7597 : 		else
; 7598 : 			ATR_SPD(a0) = 28;
; 7599 : #ifdef _MAGIC_DEEPPOISION   //ÂâßÊØí
; 7600 : 		if (ATR_DEEPPOISION(a0) == 1)

  017c6	80 b9 01 01 00
	00 00		 cmp	 BYTE PTR [ecx+257], 0
  017cd	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  017d2	be 1c 00 00 00	 mov	 esi, 28			; 0000001cH
  017d7	0f 44 c6	 cmove	 eax, esi
  017da	89 87 34 01 00
	00		 mov	 DWORD PTR [edi+308], eax
  017e0	83 bf dc 01 00
	00 01		 cmp	 DWORD PTR [edi+476], 1
  017e7	75 11		 jne	 SHORT $LN353@monster

; 7601 : 		{
; 7602 : 			ATR_SPD(a0) = 0;

  017e9	c7 87 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+308], 0

; 7603 : 			ATR_LIFE(a0) = 0;

  017f3	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
$LN353@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  017fa	5f		 pop	 edi
  017fb	5e		 pop	 esi
  017fc	c6 02 0c	 mov	 BYTE PTR [edx], 12	; 0000000cH
  017ff	5b		 pop	 ebx
  01800	8b e5		 mov	 esp, ebp
  01802	5d		 pop	 ebp
  01803	c3		 ret	 0
$LN354@monster:

; 7604 : 		}
; 7605 : #endif
; 7606 : 		ATR_VCT_NO(a0) = 12;		//???????
; 7607 : 		break;
; 7608 : 	case 12:		//??????
; 7609 : 		//??Óí∑??
; 7610 : 		if ((ATR_CHR_NO(a0) >= SPR_mwood1 && ATR_CHR_NO(a0) <= SPR_mstone3) ||
; 7611 : 			(ATR_CHR_NO(a0) == 15323) || (ATR_CHR_NO(a0) == 10812) || (ATR_CHR_NO(a0) == 15527) ||
; 7612 : 			(ATR_CHR_NO(a0) == 15543) || (ATR_CHR_NO(a0) == 15575) || (ATR_CHR_NO(a0) == 15607)

  01804	8b 87 44 01 00
	00		 mov	 eax, DWORD PTR [edi+324]
  0180a	3d 72 88 01 00	 cmp	 eax, 100466		; 00018872H
  0180f	7c 07		 jl	 SHORT $LN358@monster
  01811	3d 77 88 01 00	 cmp	 eax, 100471		; 00018877H
  01816	7e 76		 jle	 SHORT $LN357@monster
$LN358@monster:
  01818	3d db 3b 00 00	 cmp	 eax, 15323		; 00003bdbH
  0181d	74 6f		 je	 SHORT $LN357@monster
  0181f	3d 3c 2a 00 00	 cmp	 eax, 10812		; 00002a3cH
  01824	74 68		 je	 SHORT $LN357@monster
  01826	3d a7 3c 00 00	 cmp	 eax, 15527		; 00003ca7H
  0182b	74 61		 je	 SHORT $LN357@monster
  0182d	3d b7 3c 00 00	 cmp	 eax, 15543		; 00003cb7H
  01832	74 5a		 je	 SHORT $LN357@monster
  01834	3d d7 3c 00 00	 cmp	 eax, 15575		; 00003cd7H
  01839	74 53		 je	 SHORT $LN357@monster
  0183b	3d f7 3c 00 00	 cmp	 eax, 15607		; 00003cf7H
  01840	74 4c		 je	 SHORT $LN357@monster

; 7613 : 			)
; 7614 : 			ATR_SPD(a0) -= 2;
; 7615 : 		else
; 7616 : 		{
; 7617 : 			//ÂêéÈÄÄÂä®Áîª
; 7618 : 			if (ATR_CHR_ACT(a0) == ANIM_DAMAGE && ATR_CHR_NO(a0) >= SPR_pet061 && ATR_CHR_NO(a0) <= SPR_pet064 || ATR_CHR_NO(a0) == SPR_pet065)

  01842	83 bf 4c 01 00
	00 01		 cmp	 DWORD PTR [edi+332], 1
  01849	75 0e		 jne	 SHORT $LN362@monster
  0184b	3d b3 87 01 00	 cmp	 eax, 100275		; 000187b3H
  01850	7c 07		 jl	 SHORT $LN362@monster
  01852	3d b6 87 01 00	 cmp	 eax, 100278		; 000187b6H
  01857	7e 07		 jle	 SHORT $LN361@monster
$LN362@monster:
  01859	3d 29 88 01 00	 cmp	 eax, 100393		; 00018829H
  0185e	75 1b		 jne	 SHORT $LN359@monster
$LN361@monster:

; 7619 : 			{
; 7620 : 				pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  01860	6a 00		 push	 0
  01862	6a 00		 push	 0
  01864	57		 push	 edi
  01865	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7621 : 				gemini(a0);

  0186a	57		 push	 edi
  0186b	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  01870	83 c4 10	 add	 esp, 16			; 00000010H

; 7622 : 				ATR_SPD(a0) -= 1;

  01873	ff 8f 34 01 00
	00		 dec	 DWORD PTR [edi+308]

; 7623 : 			}

  01879	eb 1a		 jmp	 SHORT $LN1245@monster
$LN359@monster:

; 7624 : 			else
; 7625 : 			{
; 7626 : 				pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP);

  0187b	6a 01		 push	 1
  0187d	6a 00		 push	 0
  0187f	57		 push	 edi
  01880	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7627 : 				gemini(a0);		//?ÓôÆ

  01885	57		 push	 edi
  01886	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  0188b	83 c4 10	 add	 esp, 16			; 00000010H
$LN357@monster:

; 7628 : 				ATR_SPD(a0) -= 2;
; 7629 : 			}
; 7630 : 		}
; 7631 : 		if (ATR_SPD(a0) < 0)		//??????Óé∑???

  0188e	83 87 34 01 00
	00 fe		 add	 DWORD PTR [edi+308], -2	; fffffffeH
$LN1245@monster:
  01895	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  0189b	85 c0		 test	 eax, eax
  0189d	0f 89 a6 56 00
	00		 jns	 $LN1058@monster

; 7632 : 		{
; 7633 : 			ATR_SPD(a0) = 10;

  018a3	c7 87 34 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [edi+308], 10	; 0000000aH

; 7634 : 			ATR_VCT_NO(a0) = 13;		//??????Óïò?

  018ad	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  018b0	c6 00 0d	 mov	 BYTE PTR [eax], 13	; 0000000dH

; 7635 : 			ATR_STIMER(a0) = 16;

  018b3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  018b6	c6 40 01 10	 mov	 BYTE PTR [eax+1], 16	; 00000010H

; 7636 : #ifdef _SHOOTCHESTNUT	// Syu ADD ÂÆ†ÊäÄÔºö‰∏¢Ê†óÂ≠ê
; 7637 : 			a1 = ATR_COUNTER(p_master);
; 7638 : 			if (a1->anim_chr_no_bak == 101578)

  018ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  018bf	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  018c2	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [eax+264]
  018c8	81 b8 48 01 00
	00 ca 8c 01 00	 cmp	 DWORD PTR [eax+328], 101578 ; 00018ccaH
  018d2	0f 85 71 56 00
	00		 jne	 $LN1058@monster

; 7639 : 				ATR_STIMER(a0) = 26;

  018d8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  018db	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  018dc	5e		 pop	 esi
  018dd	5b		 pop	 ebx
  018de	c6 40 01 1a	 mov	 BYTE PTR [eax+1], 26	; 0000001aH
  018e2	8b e5		 mov	 esp, ebp
  018e4	5d		 pop	 ebp
  018e5	c3		 ret	 0
$LN365@monster:

; 7640 : #endif
; 7641 : 		}
; 7642 : 		break;
; 7643 : 	case 13:		//??????Óïò?
; 7644 : 		if (--ATR_STIMER(a0))		//??Óïò???

  018e6	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  018ea	0f 85 59 56 00
	00		 jne	 $LN1058@monster

; 7645 : 			break;
; 7646 : #ifdef _SHOOTCHESTNUT	// Syu ADD ÂÆ†ÊäÄÔºö‰∏¢Ê†óÂ≠ê
; 7647 : 		a1 = ATR_COUNTER(p_master);
; 7648 : 		if (a1->anim_chr_no_bak == 101578)

  018f0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?p_master@@3PAUaction@@A
  018f6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  018f9	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [eax+264]
  018ff	81 b8 48 01 00
	00 ca 8c 01 00	 cmp	 DWORD PTR [eax+328], 101578 ; 00018ccaH
  01909	75 40		 jne	 SHORT $LN368@monster

; 7649 : 		{
; 7650 : 			if ((abs(ATR_H_POS(a0) - ATR_INT_WORK0(a0)) + abs(ATR_V_POS(a0) - ATR_INT_WORK1(a0)) > 80))

  0190b	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  0190e	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  01911	2b 83 24 01 00
	00		 sub	 eax, DWORD PTR [ebx+292]
  01917	99		 cdq
  01918	8b c8		 mov	 ecx, eax
  0191a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0191d	2b 83 28 01 00
	00		 sub	 eax, DWORD PTR [ebx+296]
  01923	33 ca		 xor	 ecx, edx
  01925	2b ca		 sub	 ecx, edx
  01927	99		 cdq
  01928	33 c2		 xor	 eax, edx
  0192a	2b c2		 sub	 eax, edx
  0192c	03 c8		 add	 ecx, eax
  0192e	83 f9 50	 cmp	 ecx, 80			; 00000050H
  01931	7e 18		 jle	 SHORT $LN368@monster

; 7651 : 			{
; 7652 : 				ATR_H_POS(a0) = ATR_INT_WORK0(a0);

  01933	8b 83 24 01 00
	00		 mov	 eax, DWORD PTR [ebx+292]
  01939	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 7653 : 				ATR_V_POS(a0) = ATR_INT_WORK1(a0);

  0193c	8b 83 28 01 00
	00		 mov	 eax, DWORD PTR [ebx+296]
  01942	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  01945	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?p_master@@3PAUaction@@A
$LN368@monster:

; 7654 : 			}
; 7655 : 		}
; 7656 : #endif
; 7657 : 		if (ATR_LIFE(a0) > 0)			//Óíü?????

  0194b	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  0194f	7e 68		 jle	 SHORT $LN369@monster

; 7658 : 		{
; 7659 : 			if (ATR_COUNTER(p_master) == a0 || ATR_SYNC_FLG(a0) == 1)		//ÓçòÓû§????ÓôØ??????

  01951	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01954	39 b8 08 01 00
	00		 cmp	 DWORD PTR [eax+264], edi
  0195a	74 10		 je	 SHORT $LN1209@monster
  0195c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0195f	80 b8 23 01 00
	00 01		 cmp	 BYTE PTR [eax+291], 1
  01966	0f 85 bb f8 ff
	ff		 jne	 $LN1258@monster
$LN1209@monster:

; 7660 : 			{
; 7661 : 				d0 = ATR_INT_WORK0(a0);		//Óë†???

  0196c	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN848@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0196f	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  01975	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  01978	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  0197e	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  01981	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  01984	50		 push	 eax
  01985	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  01988	50		 push	 eax
  01989	57		 push	 edi
  0198a	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar
  0198f	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  01992	83 c4 0c	 add	 esp, 12			; 0000000cH
  01995	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  0199c	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  019a2	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H
  019ac	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  019af	5f		 pop	 edi
  019b0	5e		 pop	 esi
  019b1	5b		 pop	 ebx
  019b2	c6 00 04	 mov	 BYTE PTR [eax], 4
  019b5	8b e5		 mov	 esp, ebp
  019b7	5d		 pop	 ebp
  019b8	c3		 ret	 0
$LN369@monster:

; 7662 : 				d1 = ATR_INT_WORK1(a0);
; 7663 : 				radar(a0, &d0, &d1);	//????
; 7664 : 				ATR_CHR_ANG(a0) = crs_change_tbl[d0];
; 7665 : 				ATR_SPD(a0) = 32;
; 7666 : 				ATR_VCT_NO(a0) = 4;		//?Óï§?
; 7667 : 			}
; 7668 : 			else
; 7669 : 			{
; 7670 : 				ATR_VCT_NO(a0) = 14;		//???
; 7671 : 				ATR_FIRST_FLG(a0) = 0;		//??????
; 7672 : 			}
; 7673 : 		}
; 7674 : 		else
; 7675 : 		{
; 7676 : #ifdef _PETSKILL_ACUPUNCTURE
; 7677 : 			////////////////////
; 7678 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 7679 : 			if (ATR_COUNTER(p_master) == a0 || ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP | ATT_ACUPUNCTURE

  019b9	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  019bc	39 b9 08 01 00
	00		 cmp	 DWORD PTR [ecx+264], edi
  019c2	74 0c		 je	 SHORT $LN1210@monster
  019c4	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  019c7	f7 42 60 00 04
	00 4a		 test	 DWORD PTR [edx+96], 1241515008 ; 4a000400H
  019ce	74 5a		 je	 SHORT $LN374@monster
$LN1210@monster:

; 7680 : #ifdef _PET_ITEM
; 7681 : 				| ATT_ATTACKBACK
; 7682 : #endif
; 7683 : 				))
; 7684 : 			{
; 7685 : 				if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP | ATT_ACUPUNCTURE

  019d0	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  019d3	f7 40 60 00 04
	00 4a		 test	 DWORD PTR [eax+96], 1241515008 ; 4a000400H
  019da	74 05		 je	 SHORT $LN376@monster

; 7686 : #ifdef _PET_ITEM
; 7687 : 					| ATT_ATTACKBACK
; 7688 : #endif
; 7689 : 					))
; 7690 : #else
; 7691 : 			if (ATR_COUNTER(p_master) == a0 || ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ACUPUNCTURE
; 7692 : #ifdef _PET_ITEM
; 7693 : 				| ATT_ATTACKBACK
; 7694 : #endif
; 7695 : 				))
; 7696 : 			{
; 7697 : 				if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_ACUPUNCTURE
; 7698 : #ifdef _PET_ITEM
; 7699 : 					| ATT_ATTACKBACK
; 7700 : #endif
; 7701 : 					))
; 7702 : #endif
; 7703 : 					////////////////////
; 7704 : #else
; 7705 : 			////////////////////
; 7706 : #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 7707 : 			if (ATR_COUNTER(p_master) == a0 || ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP))
; 7708 : 			{
; 7709 : 				if (ATR_ATTACK_KIND(0, a0) & (ATT_REFLEX | ATT_TRAP))
; 7710 : #else
; 7711 : 			if (ATR_COUNTER(p_master) == a0 || ATR_ATTACK_KIND(0, a0) & ATT_REFLEX)
; 7712 : 			{
; 7713 : 				if (ATR_ATTACK_KIND(0, a0) & ATT_REFLEX)
; 7714 : #endif
; 7715 : 					////////////////////
; 7716 : #endif
; 7717 : 					ATR_DAMAGE(p_master)++;		//??Óé∑?

  019dc	ff 41 58	 inc	 DWORD PTR [ecx+88]
  019df	eb 10		 jmp	 SHORT $LN378@monster
$LN376@monster:

; 7718 : 				else
; 7719 : 				{
; 7720 : #ifdef _PETSKILL_BATTLE_MODEL
; 7721 : 					if (ATR_BATTLE_MODEL(a0) != ATT_BATTLE_MODEL)	//ÊàëÊòØ‰∏çÊòØË¢´ÊîªÂáªÁâ©‰ª∂ÊîªÂáª

  019e1	83 b8 58 02 00
	00 62		 cmp	 DWORD PTR [eax+600], 98	; 00000062H
  019e8	74 07		 je	 SHORT $LN378@monster

; 7722 : #endif
; 7723 : 						ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//??Óé∑?

  019ea	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  019ee	89 41 58	 mov	 DWORD PTR [ecx+88], eax
$LN378@monster:

; 7724 : 				}
; 7725 : 				d0 = ATR_INT_WORK0(a0);		//Óë†???

  019f1	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  019f4	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  019fa	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7726 : 				d1 = ATR_INT_WORK1(a0);

  019fd	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  01a03	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 7727 : 				radar(a0, &d0, &d1);	//????

  01a06	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  01a09	50		 push	 eax
  01a0a	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  01a0d	50		 push	 eax
  01a0e	57		 push	 edi
  01a0f	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 7728 : 				ATR_CHR_ANG(a0) = crs_change_tbl[d0];

  01a14	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  01a17	83 c4 0c	 add	 esp, 12			; 0000000cH
  01a1a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  01a21	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  01a27	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN374@monster:

; 7729 : 			}
; 7730 : #ifdef _MAGIC_DEEPPOISION   //ÂâßÊØí
; 7731 : 			if (ATR_DEEPPOISION(a0) == 1)

  01a2a	83 bf dc 01 00
	00 01		 cmp	 DWORD PTR [edi+476], 1
  01a31	5f		 pop	 edi
  01a32	0f 94 c0	 sete	 al
  01a35	04 fa		 add	 al, 250			; 000000faH

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01a37	5e		 pop	 esi
  01a38	88 02		 mov	 BYTE PTR [edx], al
  01a3a	5b		 pop	 ebx
  01a3b	8b e5		 mov	 esp, ebp
  01a3d	5d		 pop	 ebp
  01a3e	c3		 ret	 0
$LN381@monster:

; 7732 : 				ATR_VCT_NO(a0) = VCT_NO_DIE + 1;
; 7733 : 			else
; 7734 : #endif
; 7735 : 				ATR_VCT_NO(a0) = VCT_NO_DIE;		//?Ó†å?
; 7736 : 		}
; 7737 : 		break;
; 7738 : 	case 14:		//????????
; 7739 : 		d0 = ATR_INT_WORK0(a0);

  01a3f	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  01a45	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7740 : 		d1 = ATR_INT_WORK1(a0);

  01a48	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  01a4e	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 7741 : 		radar(a0, &d0, &d1);	//????

  01a51	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  01a54	50		 push	 eax
  01a55	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  01a58	50		 push	 eax
  01a59	57		 push	 edi
  01a5a	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 7742 : 		if (ATR_FIRST_FLG(a0) == 0)

  01a5f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01a62	83 c4 0c	 add	 esp, 12			; 0000000cH
  01a65	80 b9 1e 01 00
	00 00		 cmp	 BYTE PTR [ecx+286], 0
  01a6c	75 17		 jne	 SHORT $LN382@monster

; 7743 : 		{
; 7744 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];

  01a6e	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  01a71	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  01a78	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 7745 : 			ATR_FIRST_FLG(a0) = 1;

  01a7e	c6 81 1e 01 00
	00 01		 mov	 BYTE PTR [ecx+286], 1
$LN382@monster:

; 7746 : 		}
; 7747 : 		ATR_CRS(a0) = d0;		//??????

  01a85	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  01a88	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 7748 : 		//??Óí∑??
; 7749 : 		if ((ATR_CHR_NO(a0) >= SPR_mwood1 && ATR_CHR_NO(a0) <= SPR_mstone3) ||
; 7750 : 			(ATR_CHR_NO(a0) == 15323) || (ATR_CHR_NO(a0) == 10812) || (ATR_CHR_NO(a0) == 15527) ||
; 7751 : 			(ATR_CHR_NO(a0) == 15543) || (ATR_CHR_NO(a0) == 15575) || (ATR_CHR_NO(a0) == 15607)

  01a8e	8b 87 44 01 00
	00		 mov	 eax, DWORD PTR [edi+324]
  01a94	3d 72 88 01 00	 cmp	 eax, 100466		; 00018872H
  01a99	7c 07		 jl	 SHORT $LN386@monster
  01a9b	3d 77 88 01 00	 cmp	 eax, 100471		; 00018877H
  01aa0	7e 3e		 jle	 SHORT $LN385@monster
$LN386@monster:
  01aa2	3d db 3b 00 00	 cmp	 eax, 15323		; 00003bdbH
  01aa7	74 37		 je	 SHORT $LN385@monster
  01aa9	3d 3c 2a 00 00	 cmp	 eax, 10812		; 00002a3cH
  01aae	74 30		 je	 SHORT $LN385@monster
  01ab0	3d a7 3c 00 00	 cmp	 eax, 15527		; 00003ca7H
  01ab5	74 29		 je	 SHORT $LN385@monster
  01ab7	3d b7 3c 00 00	 cmp	 eax, 15543		; 00003cb7H
  01abc	74 22		 je	 SHORT $LN385@monster
  01abe	3d d7 3c 00 00	 cmp	 eax, 15575		; 00003cd7H
  01ac3	74 1b		 je	 SHORT $LN385@monster
  01ac5	3d f7 3c 00 00	 cmp	 eax, 15607		; 00003cf7H
  01aca	74 14		 je	 SHORT $LN385@monster

; 7754 : 		else
; 7755 : 			gemini(a0);		//?ÓôÆ

  01acc	57		 push	 edi
  01acd	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  01ad2	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  01ad8	83 c4 04	 add	 esp, 4
  01adb	8b 4d f8	 mov	 ecx, DWORD PTR _d1$[ebp]
  01ade	eb 11		 jmp	 SHORT $LN384@monster
$LN385@monster:

; 7752 : 			)
; 7753 : 			d1 = ATR_SPD(a0) = 0;		//????

  01ae0	33 c9		 xor	 ecx, ecx
  01ae2	c7 87 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+308], 0
  01aec	89 4d f8	 mov	 DWORD PTR _d1$[ebp], ecx
  01aef	33 c0		 xor	 eax, eax
$LN384@monster:

; 7756 : 		if (d1 <= (ATR_SPD(a0) >> 2))

  01af1	c1 f8 02	 sar	 eax, 2
  01af4	3b c8		 cmp	 ecx, eax
  01af6	0f 8f 3c 25 00
	00		 jg	 $LN693@monster

; 7757 : 		{	//????
; 7758 : 			ATR_H_POS(a0) = ATR_INT_WORK0(a0);		//?Óù≥ÓüúÓíú

  01afc	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01aff	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  01b05	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 7759 : 			ATR_V_POS(a0) = ATR_INT_WORK1(a0);

  01b08	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  01b0e	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 7760 : 			ATR_VCT_NO(a0) = 0;		//Óïò??

  01b11	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 7761 : 			ATR_SPD(a0) = 32;

  01b14	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H

; 7762 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  01b1e	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  01b24	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  01b2a	0f b6 c1	 movzx	 eax, cl
  01b2d	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  01b33	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01b36	88 88 22 01 00
	00		 mov	 BYTE PTR [eax+290], cl

; 11396: 					a0mark[i] = 0;

  01b3c	e9 f7 24 00 00	 jmp	 $LN693@monster
$LN388@monster:

; 7763 : 		}
; 7764 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 7765 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 7766 : 		break;
; 7767 : 	case 15:		//??
; 7768 : 		ATR_VCT_NO(a0) = 0;		//Óïò??
; 7769 : 		//??Óñ±Óù∏Óçï
; 7770 : 		ATR_DAMAGE(a0) = Rnd(1, 500);

  01b41	68 f4 01 00 00	 push	 500			; 000001f4H
  01b46	6a 01		 push	 1
  01b48	c6 02 00	 mov	 BYTE PTR [edx], 0
  01b4b	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  01b50	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 7771 : 		ATR_PET_DAMAGE(a0) = Rnd(1, 500);

  01b53	68 f4 01 00 00	 push	 500			; 000001f4H
  01b58	6a 01		 push	 1
  01b5a	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  01b5d	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  01b62	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 7772 : 		set_damage_num(a0, 5, -64);

  01b65	6a c0		 push	 -64			; ffffffc0H
  01b67	6a 05		 push	 5
  01b69	57		 push	 edi
  01b6a	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax
  01b70	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 7773 : 		ATR_LIFE(a0) += ATR_DAMAGE(a0);		//???Óå´

  01b75	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01b78	83 c4 1c	 add	 esp, 28			; 0000001cH
  01b7b	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  01b7e	01 47 78	 add	 DWORD PTR [edi+120], eax

; 7774 : 		ATR_PET_LIFE(a0) += ATR_PET_DAMAGE(a0);		//???Óå´

  01b81	8b 81 24 02 00
	00		 mov	 eax, DWORD PTR [ecx+548]
  01b87	01 87 b0 01 00
	00		 add	 DWORD PTR [edi+432], eax
  01b8d	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01b8e	5e		 pop	 esi
  01b8f	5b		 pop	 ebx
  01b90	8b e5		 mov	 esp, ebp
  01b92	5d		 pop	 ebp
  01b93	c3		 ret	 0
$LN389@monster:

; 7775 : 		break;
; 7776 : 	case 16:		//????
; 7777 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  01b94	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 7778 : 		ATR_SPD(a0) = 16;

  01b9e	c7 87 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [edi+308], 16	; 00000010H

; 7779 : 		ATR_CHR_ANG(a0) = (ATR_DAMAGE_ANG(a0) + 4) & 7;

  01ba8	0f b6 82 1d 01
	00 00		 movzx	 eax, BYTE PTR [edx+285]
  01baf	83 e8 04	 sub	 eax, 4
  01bb2	83 e0 07	 and	 eax, 7

; 7780 : 		gemini(a0);

  01bb5	57		 push	 edi
  01bb6	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  01bbc	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 7781 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  01bc1	6a 00		 push	 0
  01bc3	6a 00		 push	 0
  01bc5	57		 push	 edi
  01bc6	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7782 : 		ATR_STIMER(a0)++;

  01bcb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01bce	83 c4 10	 add	 esp, 16			; 00000010H
  01bd1	fe 40 01	 inc	 BYTE PTR [eax+1]

; 7783 : 		if (ATR_STIMER(a0) == 20)

  01bd4	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01bd7	80 79 01 14	 cmp	 BYTE PTR [ecx+1], 20	; 00000014H
  01bdb	0f 85 68 53 00
	00		 jne	 $LN1058@monster

; 7784 : 		{
; 7785 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = (ATR_CRS(a0) + 16) & 31;		//Óüµ?Óòø?

  01be1	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  01be7	83 e8 10	 sub	 eax, 16			; 00000010H
  01bea	83 e0 1f	 and	 eax, 31			; 0000001fH
  01bed	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  01bf3	88 81 22 01 00
	00		 mov	 BYTE PTR [ecx+290], al
$LN1211@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01bf9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01bfc	fe 00		 inc	 BYTE PTR [eax]
  01bfe	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01c01	5f		 pop	 edi
  01c02	5e		 pop	 esi
  01c03	5b		 pop	 ebx
  01c04	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  01c08	8b e5		 mov	 esp, ebp
  01c0a	5d		 pop	 ebp
  01c0b	c3		 ret	 0
$LN391@monster:

; 7786 : 			ATR_VCT_NO(a0)++;		//?????
; 7787 : 			ATR_STIMER(a0) = 0;
; 7788 : 		}
; 7789 : 		break;
; 7790 : 	case 17:		//????
; 7791 : 		ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????
; 7792 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  01c0c	6a 00		 push	 0
  01c0e	6a 00		 push	 0
  01c10	57		 push	 edi
  01c11	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  01c1b	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7793 : 		ATR_STIMER(a0)++;

  01c20	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 7794 : 		d0 = 0;

  01c23	33 c9		 xor	 ecx, ecx
  01c25	83 c4 0c	 add	 esp, 12			; 0000000cH
  01c28	fe 40 01	 inc	 BYTE PTR [eax+1]
  01c2b	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 7795 : 		if (ATR_FIRST_FLG(a0) == 0)

  01c2e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01c31	38 88 1e 01 00
	00		 cmp	 BYTE PTR [eax+286], cl
  01c37	75 18		 jne	 SHORT $LN392@monster

; 7796 : 		{	//????????
; 7797 : 			if (ATR_STIMER(a0) == 10)		//????

  01c39	8a 40 01	 mov	 al, BYTE PTR [eax+1]
  01c3c	ba 01 00 00 00	 mov	 edx, 1
  01c41	3c 0a		 cmp	 al, 10			; 0000000aH
  01c43	0f 44 ca	 cmove	 ecx, edx
  01c46	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 7805 : 		}
; 7806 : 		if (d0)		//???Óé∑???

  01c49	0f 85 fa 52 00
	00		 jne	 $LN1058@monster
  01c4f	eb 16		 jmp	 SHORT $LN1207@monster
$LN392@monster:

; 7798 : 				d0 = 1;
; 7799 : 		}
; 7800 : 		else
; 7801 : 		{
; 7802 : 			a1 = ATR_BODY_WORK(0, a0);		//Óò©?????
; 7803 : 			if (ATR_VCT_NO(a1) != 2)		//???????Óé∑???

  01c51	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01c54	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01c57	80 38 02	 cmp	 BYTE PTR [eax], 2
  01c5a	0f 84 e9 52 00
	00		 je	 $LN1058@monster

; 7804 : 				d0 = 1;

  01c60	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _d0$[ebp], 1
$LN1207@monster:

; 7807 : 		{
; 7808 : 			if (ATR_COUNTER(p_master) == a0)

  01c67	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  01c6c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01c6f	39 b8 08 01 00
	00		 cmp	 DWORD PTR [eax+264], edi
  01c75	75 82		 jne	 SHORT $LN1211@monster

; 7809 : 			{		//ÓçòÓû§?????
; 7810 : 				sav_command_point = command_point;		//?????Óí∂?????Óï§Óùç

  01c77	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?command_point@@3HA

; 7811 : 				d0 = get_num();

  01c7d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01c82	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7812 : 				command_point = sav_command_point;		//?????Óí∂???????

  01c85	89 35 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, esi

; 7813 : 				if (d0 == 255)		//Óé∑???

  01c8b	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  01c90	0f 85 63 ff ff
	ff		 jne	 $LN1211@monster

; 7814 : 				{
; 7815 : 					ATR_STIMER(a0) = 1;		//?Óî≤

  01c96	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01c99	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 7816 : 					ATR_VCT_NO(a0) = 3;		//??Óïò??

  01c9d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01ca0	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01ca1	5e		 pop	 esi
  01ca2	5b		 pop	 ebx
  01ca3	c6 00 03	 mov	 BYTE PTR [eax], 3
  01ca6	8b e5		 mov	 esp, ebp
  01ca8	5d		 pop	 ebp
  01ca9	c3		 ret	 0
$LN399@monster:

; 7817 : 					break;
; 7818 : 				}
; 7819 : 			}
; 7820 : 			ATR_VCT_NO(a0)++;		//?????
; 7821 : 			ATR_STIMER(a0) = 0;
; 7822 : 		}
; 7823 : 		break;
; 7824 : 	case 18:		//????
; 7825 : 		gemini(a0);

  01caa	57		 push	 edi
  01cab	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 7826 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 7827 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  01cb0	6a 00		 push	 0
  01cb2	6a 00		 push	 0
  01cb4	57		 push	 edi
  01cb5	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  01cbf	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 7828 : 		ATR_STIMER(a0)++;

  01cc4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01cc7	83 c4 10	 add	 esp, 16			; 00000010H
  01cca	fe 40 01	 inc	 BYTE PTR [eax+1]

; 7829 : 		if (ATR_STIMER(a0) == 20)

  01ccd	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01cd0	80 79 01 14	 cmp	 BYTE PTR [ecx+1], 20	; 00000014H
  01cd4	0f 85 6f 52 00
	00		 jne	 $LN1058@monster

; 7830 : 		{
; 7831 : #ifdef _PETSKILL_BATTLE_MODEL
; 7832 : 			a1 = ATR_BODY_WORK(0, a0);

  01cda	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 7833 : 			if (a1 && ATR_INT_WORK0(a1) == ATT_BATTLE_MODEL)

  01cdd	85 c0		 test	 eax, eax
  01cdf	74 16		 je	 SHORT $LN401@monster
  01ce1	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01ce4	83 b8 24 01 00
	00 62		 cmp	 DWORD PTR [eax+292], 98	; 00000062H
  01ceb	75 0a		 jne	 SHORT $LN401@monster

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01ced	5f		 pop	 edi
  01cee	5e		 pop	 esi
  01cef	c6 01 04	 mov	 BYTE PTR [ecx], 4
  01cf2	5b		 pop	 ebx
  01cf3	8b e5		 mov	 esp, ebp
  01cf5	5d		 pop	 ebp
  01cf6	c3		 ret	 0
$LN401@monster:

; 7834 : 				ATR_VCT_NO(a0) = 4;
; 7835 : 			else
; 7836 : #endif
; 7837 : 			if (ATR_COUNTER(p_master) == a0)

  01cf7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  01cfc	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01cff	39 b8 08 01 00
	00		 cmp	 DWORD PTR [eax+264], edi
  01d05	75 11		 jne	 SHORT $LN403@monster

; 7838 : 			{	//ÓçòÓû§?????
; 7839 : 				ATR_STIMER(a0) = 1;		//?Óî≤

  01d07	c6 41 01 01	 mov	 BYTE PTR [ecx+1], 1

; 7840 : 				ATR_VCT_NO(a0) = 3;		//??Óïò??

  01d0b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01d0e	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01d0f	5e		 pop	 esi
  01d10	5b		 pop	 ebx
  01d11	c6 00 03	 mov	 BYTE PTR [eax], 3
  01d14	8b e5		 mov	 esp, ebp
  01d16	5d		 pop	 ebp
  01d17	c3		 ret	 0
$LN403@monster:

; 7841 : 			}
; 7842 : 			else
; 7843 : 			{
; 7844 : 				if (ATR_COUNTER_FLG(a0))

  01d18	80 b9 0c 01 00
	00 00		 cmp	 BYTE PTR [ecx+268], 0
  01d1f	0f 84 c7 00 00
	00		 je	 $LN405@monster

; 7845 : 				{	//???????
; 7846 : 					ATR_VCT_NO(a0) = 2;		//???

  01d25	c6 01 02	 mov	 BYTE PTR [ecx], 2

; 7847 : 					ATR_BODY_WORK(0, a0) = p_party[get_num()];		//Óîá?Óò©???

  01d28	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01d2d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  01d34	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01d37	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 7848 : 					ATR_ATTACK_KIND(0, a0) = get_num();		//??Óéú????

  01d3a	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01d3f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01d42	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 7849 : 					ATR_ATTACK_POW(0, a0) = get_num();		//??????

  01d45	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01d4a	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01d4d	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 7850 : #ifdef _PET_ITEM
; 7851 : 					if (ATR_ATTACK_KIND(0, a0) & ATT_ATTACKBACK)

  01d53	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01d56	f7 41 60 00 00
	00 40		 test	 DWORD PTR [ecx+96], 1073741824 ; 40000000H
  01d5d	74 1c		 je	 SHORT $LN407@monster

; 7852 : 					{
; 7853 : 						ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  01d5f	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  01d66	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 7854 : 						ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  01d6c	33 c9		 xor	 ecx, ecx
  01d6e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01d71	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  01d78	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN407@monster:

; 7855 : 					}
; 7856 : #endif
; 7857 : #ifdef _FIX_ACUPUNCTURE
; 7858 : 					if (ATR_ATTACK_KIND(0, a0) & ATT_ACUPUNCTURE)

  01d7b	f7 41 60 00 00
	00 08		 test	 DWORD PTR [ecx+96], 134217728 ; 08000000H
  01d82	74 1c		 je	 SHORT $LN408@monster

; 7859 : 					{
; 7860 : 						ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  01d84	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  01d8b	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 7861 : 						ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  01d91	33 c9		 xor	 ecx, ecx
  01d93	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01d96	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  01d9d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN408@monster:

; 7862 : 					}
; 7863 : #endif
; 7864 : 					if (BattleCmd[command_point] == 'p')

  01da0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  01da5	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  01dac	75 16		 jne	 SHORT $LN409@monster

; 7865 : 						ATR_ATTACK_PET_POW(0, a0) = get_num();		//pet??????

  01dae	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01db3	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01db6	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  01dbc	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01dbf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN409@monster:

; 7866 : 					else
; 7867 : 						LogToBattleError(BattleCmd, __LINE__);
; 7868 : #ifdef _ATTACK_EFFECT
; 7869 : 					if (BattleCmd[command_point] == 's')

  01dc4	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  01dcb	75 11		 jne	 SHORT $LN411@monster

; 7870 : 						ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  01dcd	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01dd2	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01dd5	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
  01ddb	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN411@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01dde	5f		 pop	 edi
  01ddf	5e		 pop	 esi
  01de0	c6 81 1e 01 00
	00 00		 mov	 BYTE PTR [ecx+286], 0
  01de7	5b		 pop	 ebx
  01de8	8b e5		 mov	 esp, ebp
  01dea	5d		 pop	 ebp
  01deb	c3		 ret	 0
$LN405@monster:
  01dec	5f		 pop	 edi
  01ded	5e		 pop	 esi
  01dee	c6 01 00	 mov	 BYTE PTR [ecx], 0
  01df1	5b		 pop	 ebx
  01df2	8b e5		 mov	 esp, ebp
  01df4	5d		 pop	 ebp
  01df5	c3		 ret	 0
$LN412@monster:

; 7871 : #endif
; 7872 : 					ATR_FIRST_FLG(a0) = 0;		//????????
; 7873 : 				}
; 7874 : 				else
; 7875 : 					ATR_VCT_NO(a0) = 0;		//Óïò??
; 7876 : 			}
; 7877 : 		}
; 7878 : 		break;
; 7879 : 	case 19:		//ÓôØ???Óïò?
; 7880 : 		a1 = ATR_BODY_WORK(0, a0);		//??ÓéÅÓéï?Óèù?
; 7881 : 		if (!ATR_LONG_WORK(0, a1))		//???Óåø??

  01df6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01df9	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01dfc	83 b8 34 01 00
	00 00		 cmp	 DWORD PTR [eax+308], 0
  01e03	75 0f		 jne	 SHORT $LN414@monster

; 7882 : 		{
; 7883 : 			if (ATR_BODY_WORK(1, a1) == a0)		//ÓçòÓû§????Óú±??

  01e05	39 78 08	 cmp	 DWORD PTR [eax+8], edi
  01e08	75 0a		 jne	 SHORT $LN414@monster

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01e0a	5f		 pop	 edi
  01e0b	5e		 pop	 esi
  01e0c	c6 02 02	 mov	 BYTE PTR [edx], 2
  01e0f	5b		 pop	 ebx
  01e10	8b e5		 mov	 esp, ebp
  01e12	5d		 pop	 ebp
  01e13	c3		 ret	 0
$LN414@monster:

; 7884 : 			{
; 7885 : 				ATR_VCT_NO(a0) = 2;		//???
; 7886 : 				break;
; 7887 : 			}
; 7888 : 		}
; 7889 : 		ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????
; 7890 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  01e14	6a 00		 push	 0
  01e16	6a 00		 push	 0
  01e18	57		 push	 edi
  01e19	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  01e23	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01e28	83 c4 0c	 add	 esp, 12			; 0000000cH
  01e2b	5f		 pop	 edi
  01e2c	5e		 pop	 esi
  01e2d	5b		 pop	 ebx
  01e2e	8b e5		 mov	 esp, ebp
  01e30	5d		 pop	 ebp
  01e31	c3		 ret	 0
$LN415@monster:

; 7891 : 		break;
; 7892 : 	case 20:		//??????
; 7893 : 		if (ATR_BODY_CNT(a0) == 1 && ATR_FIRST_FLG(a0) == 0)		//ÓñïÓúä????????

  01e32	80 7a 54 01	 cmp	 BYTE PTR [edx+84], 1
  01e36	75 43		 jne	 SHORT $LN416@monster
  01e38	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  01e3f	75 3a		 jne	 SHORT $LN416@monster

; 7894 : 		{
; 7895 : 			a2 = ATR_BODY_WORK(0, a0);		//Óò©?Óüµ??

  01e41	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 7896 : 			d0 = ATR_H_POS(a2);

  01e44	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  01e47	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7897 : 			d1 = ATR_V_POS(a2);

  01e4a	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  01e4d	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 7898 : 			radar(a0, &d0, &d1);	//????

  01e50	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  01e53	50		 push	 eax
  01e54	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  01e57	50		 push	 eax
  01e58	57		 push	 edi
  01e59	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 7899 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];		/* ????? */

  01e5e	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  01e61	83 c4 0c	 add	 esp, 12			; 0000000cH
  01e64	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  01e6b	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 7900 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  01e71	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01e74	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
$LN416@monster:

; 7901 : 		}
; 7902 : 		ATR_CHR_ACT(a0) = ANIM_ATTACK;		//?????????
; 7903 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  01e7b	6a 01		 push	 1
  01e7d	6a 00		 push	 0
  01e7f	57		 push	 edi
  01e80	c7 87 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+332], 0
  01e8a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  01e8f	83 c4 0c	 add	 esp, 12			; 0000000cH
  01e92	85 c0		 test	 eax, eax
  01e94	74 17		 je	 SHORT $LN417@monster
$LN1259@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01e96	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  01ea0	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01ea3	5f		 pop	 edi
  01ea4	5e		 pop	 esi
  01ea5	5b		 pop	 ebx
  01ea6	c6 00 00	 mov	 BYTE PTR [eax], 0
  01ea9	8b e5		 mov	 esp, ebp
  01eab	5d		 pop	 ebp
  01eac	c3		 ret	 0
$LN417@monster:

; 7904 : 		{	//?????Óé∑???
; 7905 : 			ATR_CHR_ACT_OLD(a0) = -1;
; 7906 : 			ATR_VCT_NO(a0) = 0;		//Óïò??
; 7907 : 			break;
; 7908 : 		}
; 7909 : 		//????ÓúäÓç∫????
; 7910 : 		if (ATR_CHR_CNT(a0) == ATR_HIT_TIMING(a0) && ATR_CHR_TIM(a0) == 0)

  01ead	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  01eb0	0f b6 41 5d	 movzx	 eax, BYTE PTR [ecx+93]
  01eb4	39 87 5c 01 00
	00		 cmp	 DWORD PTR [edi+348], eax
  01eba	0f 85 89 50 00
	00		 jne	 $LN1058@monster
  01ec0	83 bf 60 01 00
	00 00		 cmp	 DWORD PTR [edi+352], 0
  01ec7	0f 85 7c 50 00
	00		 jne	 $LN1058@monster

; 7911 : 		{
; 7912 : 			if (ATR_BODY_CNT(a0) == 1)		//ÓñïÓúä??

  01ecd	8a 41 54	 mov	 al, BYTE PTR [ecx+84]
  01ed0	3c 01		 cmp	 al, 1
  01ed2	0f 85 1d 01 00
	00		 jne	 $LN419@monster

; 7913 : 			{
; 7914 : 				//???????
; 7915 : 				a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  01ed8	68 60 02 00 00	 push	 608			; 00000260H
  01edd	6a 47		 push	 71			; 00000047H
  01edf	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  01ee4	8b f0		 mov	 esi, eax
  01ee6	83 c4 08	 add	 esp, 8

; 7916 : 				if (a1 == NULL)

  01ee9	85 f6		 test	 esi, esi
  01eeb	75 1c		 jne	 SHORT $LN421@monster

; 7917 : 				{
; 7918 : 					ATR_DAMAGE(p_master) = 1;		//???Óëò

  01eed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  01ef2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  01ef5	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01efc	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01eff	5f		 pop	 edi
  01f00	5e		 pop	 esi
  01f01	5b		 pop	 ebx
  01f02	c6 00 00	 mov	 BYTE PTR [eax], 0
  01f05	8b e5		 mov	 esp, ebp
  01f07	5d		 pop	 ebp
  01f08	c3		 ret	 0
$LN421@monster:

; 7919 : 					ATR_VCT_NO(a0) = 0;		//Óïò??
; 7920 : 					return;
; 7921 : 				}
; 7922 : 				/* ÓçØ??? */
; 7923 : 				ATR_NAME(a1) = missile;

  01f09	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?missile@@YAXPAUaction@@@Z ; missile

; 7924 : 				/* Óù∏Óçï?ÓìèÓôö */
; 7925 : 				ATR_DISP_PRIO(a1) = D_PRIO_MISSILE;
; 7926 : 				/* ?????Óú±? */
; 7927 : 				if (ATR_CHR_NO(a0) >= 31027)		//??????
; 7928 : 					ATR_CHR_NO(a1) = 32053;
; 7929 : 				else
; 7930 : 					ATR_CHR_NO(a1) = 32055;
; 7931 : 				ATR_ATTACK_KIND(0, a1) = get_num();		//??Óéú????

  01f10	33 c0		 xor	 eax, eax
  01f12	c6 46 15 56	 mov	 BYTE PTR [esi+21], 86	; 00000056H
  01f16	81 bf 44 01 00
	00 33 79 00 00	 cmp	 DWORD PTR [edi+324], 31027 ; 00007933H
  01f20	0f 9c c0	 setl	 al
  01f23	8d 04 45 35 7d
	00 00		 lea	 eax, DWORD PTR [eax*2+32053]
  01f2a	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  01f30	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01f35	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01f38	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 7932 : 				ATR_ATTACK_POW(0, a1) = get_num();		//??????

  01f3b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01f40	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01f43	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 7933 : 				if (BattleCmd[command_point] == 'p')

  01f49	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  01f4e	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  01f55	75 13		 jne	 SHORT $LN424@monster

; 7934 : 					ATR_ATTACK_PET_POW(0, a1) = get_num();		//pet??????

  01f57	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01f5c	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01f5f	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  01f65	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN424@monster:

; 7935 : 				else
; 7936 : 					LogToBattleError(BattleCmd, __LINE__);
; 7937 : 
; 7938 : 				//‰øÆÊ≠£ÊàòÊñóÁâπÊïà   xiezi
; 7939 : #ifdef _ATTACK_EFFECT
; 7940 : 				if (BattleCmd[command_point] == 's')

  01f6a	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  01f71	75 0e		 jne	 SHORT $LN426@monster

; 7941 : 					ATR_LONG_WORK(0, a1) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  01f73	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  01f78	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  01f7b	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
$LN426@monster:

; 7942 : #endif
; 7943 : 
; 7944 : 				/* ???Óñ∫ */
; 7945 : 				ATR_CHR_ANG(a1) = ATR_CHR_ANG(a0);

  01f81	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  01f87	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax

; 7946 : 				ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);

  01f8d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  01f90	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 7947 : 				ATR_H_POS(a1) = ATR_H_POS(a0);
; 7948 : 				ATR_V_POS(a1) = ATR_V_POS(a0);
; 7949 : 				ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];
; 7950 : 				ATR_SPD(a1) = 32;
; 7951 : 				gemini(a1);

  01f93	56		 push	 esi
  01f94	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  01f97	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  01f9a	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  01f9d	89 46 18	 mov	 DWORD PTR [esi+24], eax
  01fa0	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  01fa3	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  01fa6	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  01fac	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  01fb3	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  01fb9	c7 86 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+308], 32	; 00000020H
  01fc3	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 7952 : 				gemini(a1);

  01fc8	56		 push	 esi
  01fc9	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 7953 : 				gemini(a1);

  01fce	56		 push	 esi
  01fcf	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 7954 : 				ATR_BODY_CNT(a1) = 0;

  01fd4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  01fd7	83 c4 0c	 add	 esp, 12			; 0000000cH
  01fda	c6 40 54 00	 mov	 BYTE PTR [eax+84], 0
  01fde	5f		 pop	 edi

; 7955 : 				p_missile[0] = a1;

  01fdf	89 35 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, esi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  01fe5	5e		 pop	 esi
  01fe6	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0
  01ff0	5b		 pop	 ebx
  01ff1	8b e5		 mov	 esp, ebp
  01ff3	5d		 pop	 ebp
  01ff4	c3		 ret	 0
$LN419@monster:

; 7956 : 				p_missile[1] = NULL;
; 7957 : 			}
; 7958 : 			else
; 7959 : 			{
; 7960 : 				for (d7 = 0; d7 < ATR_BODY_CNT(a0); d7++)

  01ff5	33 db		 xor	 ebx, ebx
  01ff7	84 c0		 test	 al, al
  01ff9	0f 84 38 01 00
	00		 je	 $LN15@monster
  01fff	90		 npad	 1
$LL16@monster:

; 7961 : 				{
; 7962 : 					//???????
; 7963 : 					a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  02000	68 60 02 00 00	 push	 608			; 00000260H
  02005	6a 47		 push	 71			; 00000047H
  02007	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0200c	8b f0		 mov	 esi, eax
  0200e	83 c4 08	 add	 esp, 8

; 7964 : 					if (a1 == NULL)

  02011	85 f6		 test	 esi, esi
  02013	0f 84 30 01 00
	00		 je	 $LN1097@monster

; 7967 : 						ATR_VCT_NO(a0) = 0;		//Óïò??
; 7968 : 						return;
; 7969 : 					}
; 7970 : 					/* ÓçØ??? */
; 7971 : 					ATR_NAME(a1) = missile;

  02019	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?missile@@YAXPAUaction@@@Z ; missile

; 7972 : 					/* Óù∏Óçï?ÓìèÓôö */
; 7973 : 					ATR_DISP_PRIO(a1) = D_PRIO_MISSILE;
; 7974 : 					/* ?????Óú±? */
; 7975 : 					if (ATR_CHR_NO(a0) >= 31027)		//??????
; 7976 : 						ATR_CHR_NO(a1) = 32053;
; 7977 : 					else
; 7978 : 						ATR_CHR_NO(a1) = 32055;
; 7979 : 					/* ???Óñ∫ */
; 7980 : 					a2 = ATR_BODY_WORK(0, a1) = p_party[get_num()];		//Óîá?Óò©

  02020	33 c9		 xor	 ecx, ecx
  02022	c6 46 15 56	 mov	 BYTE PTR [esi+21], 86	; 00000056H
  02026	81 bf 44 01 00
	00 33 79 00 00	 cmp	 DWORD PTR [edi+324], 31027 ; 00007933H
  02030	0f 9c c1	 setl	 cl
  02033	8d 0c 4d 35 7d
	00 00		 lea	 ecx, DWORD PTR [ecx*2+32053]
  0203a	89 8e 44 01 00
	00		 mov	 DWORD PTR [esi+324], ecx
  02040	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02045	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0204c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0204f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  02052	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  02055	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02058	89 45 08	 mov	 DWORD PTR _a2$5$[ebp], eax

; 7981 : 					ATR_ATTACK_KIND(0, a1) = get_num();		//??Óéú????

  0205b	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02060	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  02063	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 7982 : 					ATR_ATTACK_POW(0, a1) = get_num();		//??????

  02066	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0206b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0206e	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 7983 : 					if (BattleCmd[command_point] == 'p')

  02074	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  02079	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  02080	75 13		 jne	 SHORT $LN430@monster

; 7984 : 						ATR_ATTACK_PET_POW(0, a1) = get_num();		//pet??????

  02082	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02087	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0208a	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  02090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN430@monster:

; 7985 : 					else
; 7986 : 						LogToBattleError(BattleCmd, __LINE__);
; 7987 : 
; 7988 : 					//‰øÆÊ≠£ÊàòÊñóÁâπÊïà   xiezi
; 7989 : #ifdef _ATTACK_EFFECT
; 7990 : 					if (BattleCmd[command_point] == 's')

  02095	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  0209c	75 0e		 jne	 SHORT $LN432@monster

; 7991 : 						ATR_LONG_WORK(0, a1) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑

  0209e	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  020a3	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  020a6	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
$LN432@monster:

; 7992 : #endif
; 7993 : 
; 7994 : 					ATR_H_POS(a1) = ATR_H_POS(a0);

  020ac	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 7995 : 					ATR_V_POS(a1) = ATR_V_POS(a0);
; 7996 : 					d0 = ATR_H_POS(a2);

  020af	8b 4d 08	 mov	 ecx, DWORD PTR _a2$5$[ebp]
  020b2	89 46 18	 mov	 DWORD PTR [esi+24], eax
  020b5	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  020b8	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  020bb	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  020be	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 7997 : 					d1 = ATR_V_POS(a2);

  020c1	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  020c4	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 7998 : 					radar(a1, &d0, &d1);

  020c7	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  020ca	50		 push	 eax
  020cb	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  020ce	50		 push	 eax
  020cf	56		 push	 esi
  020d0	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 7999 : 					ATR_CHR_ANG(a1) = crs_change_tbl[d0];		/* ????? */

  020d5	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 8000 : 					ATR_SPD(a1) = 32;		//ÓúäÓç∫?Óñ∫???
; 8001 : 					ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];
; 8002 : 					gemini(a1);

  020d8	56		 push	 esi
  020d9	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  020e0	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  020e6	c7 86 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+308], 32	; 00000020H
  020f0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  020f7	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  020fd	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8003 : 					gemini(a1);

  02102	56		 push	 esi
  02103	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8004 : 					gemini(a1);

  02108	56		 push	 esi
  02109	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8005 : 					ATR_CRS(a1) = d0;

  0210e	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  02111	83 c4 18	 add	 esp, 24			; 00000018H
  02114	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 8006 : 					ATR_BODY_CNT(a1) = d7;

  0211a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0211d	88 58 54	 mov	 BYTE PTR [eax+84], bl

; 8007 : 					p_missile[d7] = a1;

  02120	89 34 9d 00 00
	00 00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A[ebx*4], esi
  02127	43		 inc	 ebx
  02128	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0212b	0f b6 40 54	 movzx	 eax, BYTE PTR [eax+84]
  0212f	3b d8		 cmp	 ebx, eax
  02131	0f 8c c9 fe ff
	ff		 jl	 $LL16@monster
$LN15@monster:
  02137	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02138	5e		 pop	 esi
  02139	c7 04 9d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A[ebx*4], 0
  02144	5b		 pop	 ebx
  02145	8b e5		 mov	 esp, ebp
  02147	5d		 pop	 ebp
  02148	c3		 ret	 0
$LN1097@monster:

; 7965 : 					{
; 7966 : 						ATR_DAMAGE(p_master) = ATR_BODY_CNT(a0);		//???Óëò

  02149	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0214c	0f b6 48 54	 movzx	 ecx, BYTE PTR [eax+84]
  02150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  02155	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  02158	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0215b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0215e	5f		 pop	 edi
  0215f	5e		 pop	 esi
  02160	5b		 pop	 ebx
  02161	c6 00 00	 mov	 BYTE PTR [eax], 0
  02164	8b e5		 mov	 esp, ebp
  02166	5d		 pop	 ebp
  02167	c3		 ret	 0
$LN433@monster:

; 8008 : 				}
; 8009 : 				p_missile[d7] = NULL;
; 8010 : 			}
; 8011 : 		}
; 8012 : 		break;
; 8013 : 	case 25:		//??Óñ™
; 8014 : 		if (ATR_GROUP_FLG(a0) == 0)

  02168	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  0216b	84 c0		 test	 al, al
  0216d	75 0c		 jne	 SHORT $LN434@monster

; 8015 : 			ATR_CHR_ANG(a0) = 3;

  0216f	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  02179	eb 0e		 jmp	 SHORT $LN436@monster
$LN434@monster:

; 8016 : 		else if (ATR_GROUP_FLG(a0) == 1)

  0217b	3c 01		 cmp	 al, 1
  0217d	75 0a		 jne	 SHORT $LN436@monster

; 8017 : 			ATR_CHR_ANG(a0) = 7;

  0217f	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN436@monster:

; 8018 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 8019 : 		else if (ATR_GROUP_FLG(a0) == 2)
; 8020 : 			ATR_CHR_ANG(a0) = 5;
; 8021 : 		else if (ATR_GROUP_FLG(a0) == 3)	
; 8022 : 			ATR_CHR_ANG(a0) = 1;
; 8023 : #endif
; 8024 : 		ATR_CHR_ACT(a0) = ANIM_ATTACK;		//?????????
; 8025 : 		ATR_HIT(a0) = 0;		//?????????
; 8026 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  02189	6a 01		 push	 1
  0218b	6a 00		 push	 0
  0218d	c7 87 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+332], 0
  02197	57		 push	 edi
  02198	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0
  021a2	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  021a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  021aa	85 c0		 test	 eax, eax
  021ac	0f 85 e4 fc ff
	ff		 jne	 $LN1259@monster

; 8027 : 		{	//?????Óé∑???
; 8028 : 			ATR_CHR_ACT_OLD(a0) = -1;
; 8029 : 			ATR_VCT_NO(a0) = 0;		//Óïò??
; 8030 : 			break;
; 8031 : 		}
; 8032 : 		//???????
; 8033 : 		if (ATR_HIT(a0) >= 10000 && ATR_HIT(a0) < 10100)

  021b2	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  021b8	2d 10 27 00 00	 sub	 eax, 10000		; 00002710H
  021bd	83 f8 63	 cmp	 eax, 99			; 00000063H
  021c0	0f 87 83 4d 00
	00		 ja	 $LN1058@monster

; 8034 : 		{
; 8035 : 			//???Óüπ?ÓèùÓù∏Óçï
; 8036 : 			a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  021c6	68 60 02 00 00	 push	 608			; 00000260H
  021cb	6a 47		 push	 71			; 00000047H
  021cd	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  021d2	8b f0		 mov	 esi, eax
  021d4	83 c4 08	 add	 esp, 8

; 8037 : 			if (a1 == NULL)

  021d7	85 f6		 test	 esi, esi
  021d9	0f 84 ff 04 00
	00		 je	 $LN1260@monster

; 8038 : 			{
; 8039 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8040 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 8041 : 				return;
; 8042 : 			}
; 8043 : 			/* ÓçØ??? */
; 8044 : 			ATR_NAME(a1) = monster;

  021df	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 8045 : 			ATR_VCT_NO(a1) = 26;

  021e6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  021e9	c6 00 1a	 mov	 BYTE PTR [eax], 26	; 0000001aH

; 8046 : 			/* Óù∏Óçï?ÓìèÓôö */
; 8047 : 			ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;

  021ec	c6 46 15 58	 mov	 BYTE PTR [esi+21], 88	; 00000058H

; 8048 : 			/* ?????Óú±? */
; 8049 : 			ATR_CHR_NO(a1) = SPR_effect01;

  021f0	c7 86 44 01 00
	00 f8 88 01 00	 mov	 DWORD PTR [esi+324], 100600 ; 000188f8H

; 8050 : 			/* ???Óñ∫ */
; 8051 : 			LoadBmp(ATR_PAT_NO(a0));

  021fa	ff b7 9c 00 00
	00		 push	 DWORD PTR [edi+156]
  02200	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp

; 8052 : #ifndef __CARYTEST
; 8053 : 			ATR_V_POS(a1) = ATR_V_POS(a0) + a0->anim_y + SpriteInfo[ATR_PAT_NO(a0)].height / 2;

  02205	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  0220b	83 c4 04	 add	 esp, 4
  0220e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  02211	0f bf 04 85 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  02219	99		 cdq
  0221a	2b c2		 sub	 eax, edx
  0221c	d1 f8		 sar	 eax, 1
  0221e	03 87 68 01 00
	00		 add	 eax, DWORD PTR [edi+360]
  02224	03 47 1c	 add	 eax, DWORD PTR [edi+28]
  02227	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 8054 : #else
; 8055 : 			ATR_V_POS(a1) = ATR_V_POS(a0) + a0->anim_y + g_lpRealAdrn[ATR_PAT_NO(a0)].height / 2;
; 8056 : #endif
; 8057 : 			ATR_H_POS(a1) = ATR_H_POS(a0);

  0222a	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0222d	5f		 pop	 edi
  0222e	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02231	5e		 pop	 esi
  02232	5b		 pop	 ebx
  02233	8b e5		 mov	 esp, ebp
  02235	5d		 pop	 ebp
  02236	c3		 ret	 0
$LN440@monster:

; 8058 : 		}
; 8059 : 		break;
; 8060 : 	case 26:		//???Óüπ?ÓèùÓù∏Óçï
; 8061 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  02237	6a 01		 push	 1
  02239	6a 00		 push	 0
  0223b	57		 push	 edi
  0223c	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  02241	83 c4 0c	 add	 esp, 12			; 0000000cH
  02244	85 c0		 test	 eax, eax
  02246	0f 84 fd 4c 00
	00		 je	 $LN1058@monster

; 8062 : 		{	//???Óé∑???
; 8063 : 			//??????Óù∏Óçï
; 8064 : 			while (1)
; 8065 : 			{
; 8066 : 				int dx;
; 8067 : 
; 8068 : 				d0 = get_num();		//??ÓéÅ??Óéï?Óèù?

  0224c	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02251	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8069 : 				if (d0 == 255)		//Óé∑???

  02254	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  02259	0f 84 79 29 00
	00		 je	 $LN18@monster
  0225f	90		 npad	 1
$LL17@monster:

; 8070 : 					break;
; 8071 : 				a2 = p_party[d0];		//??ÓéÅ??????????

  02260	8b 1c 85 00 00
	00 00		 mov	 ebx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 8072 : 				d0 = get_num();		//??????Óéï?Óèù?

  02267	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0226c	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8073 : 				if (BattleCmd[command_point] == 'p')

  0226f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  02274	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  0227b	75 08		 jne	 SHORT $LN443@monster

; 8074 : 					dx = get_num();		//pet??????Óéï?Óèù?

  0227d	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02282	89 45 08	 mov	 DWORD PTR _dx$3[ebp], eax
$LN443@monster:

; 8075 : 				else
; 8076 : 					LogToBattleError(BattleCmd, __LINE__);
; 8077 : 
; 8078 : 				//???????ÓèùÓù∏Óçï
; 8079 : 				a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  02285	68 60 02 00 00	 push	 608			; 00000260H
  0228a	6a 47		 push	 71			; 00000047H
  0228c	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  02291	8b f0		 mov	 esi, eax
  02293	83 c4 08	 add	 esp, 8

; 8080 : 				if (a1 == NULL)

  02296	85 f6		 test	 esi, esi
  02298	0f 84 2b 29 00
	00		 je	 $LN1099@monster

; 8081 : 				{
; 8082 : 					ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8083 : 					break;
; 8084 : 				}
; 8085 : 				/* ÓçØ??? */
; 8086 : 				ATR_NAME(a1) = monster;

  0229e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 8087 : 				ATR_VCT_NO(a1) = 27;

  022a5	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  022a8	c6 01 1b	 mov	 BYTE PTR [ecx], 27	; 0000001bH

; 8088 : 				ATR_BODY_WORK(0, a1) = a2;

  022ab	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  022ae	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 8089 : 				ATR_INT_WORK0(a1) = d0;		//?????

  022b1	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  022b4	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  022b7	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 8090 : 				if (BattleCmd[command_point] == 'p')

  022bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  022c2	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  022c9	75 0c		 jne	 SHORT $LN446@monster

; 8091 : 					ATR_INT_WORKp(a1) = dx;		//pet?????

  022cb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  022ce	8b 4d 08	 mov	 ecx, DWORD PTR _dx$3[ebp]
  022d1	89 88 28 02 00
	00		 mov	 DWORD PTR [eax+552], ecx
$LN446@monster:

; 8092 : 				else
; 8093 : 					LogToBattleError(BattleCmd, __LINE__);
; 8094 : 				/* Óù∏Óçï?ÓìèÓôö */
; 8095 : 				ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;

  022d7	c6 46 15 58	 mov	 BYTE PTR [esi+21], 88	; 00000058H

; 8096 : 				/* ?????Óú±? */
; 8097 : 				d0 = get_num();

  022db	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 8098 : 				d0 = 0;

  022e0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _d0$[ebp], 0

; 8099 : 				ATR_CHR_NO(a1) = SPR_heal + d0;

  022e7	c7 86 44 01 00
	00 f9 88 01 00	 mov	 DWORD PTR [esi+324], 100601 ; 000188f9H

; 8100 : 				/* ???Óñ∫ */
; 8101 : 				LoadBmp(ATR_PAT_NO(a2));

  022f1	ff b3 9c 00 00
	00		 push	 DWORD PTR [ebx+156]
  022f7	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp

; 8102 : 				ATR_H_POS(a1) = ATR_H_POS(a2);

  022fc	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  022ff	83 c4 04	 add	 esp, 4
  02302	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 8103 : #ifndef __CARYTEST
; 8104 : 				ATR_V_POS(a1) = ATR_V_POS(a2) + a2->anim_y + SpriteInfo[ATR_PAT_NO(a2)].height / 2;

  02305	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [ebx+156]
  0230b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0230e	0f bf 04 85 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  02316	99		 cdq
  02317	2b c2		 sub	 eax, edx
  02319	d1 f8		 sar	 eax, 1
  0231b	03 83 68 01 00
	00		 add	 eax, DWORD PTR [ebx+360]
  02321	03 43 1c	 add	 eax, DWORD PTR [ebx+28]
  02324	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  02327	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0232c	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  0232f	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  02334	0f 85 26 ff ff
	ff		 jne	 $LL17@monster

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0233a	57		 push	 edi
  0233b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  02340	83 c4 04	 add	 esp, 4
  02343	5f		 pop	 edi
  02344	5e		 pop	 esi
  02345	5b		 pop	 ebx
  02346	8b e5		 mov	 esp, ebp
  02348	5d		 pop	 ebp
  02349	c3		 ret	 0
$LN448@monster:

; 8105 : #else
; 8106 : 				ATR_V_POS(a1) = ATR_V_POS(a2) + a2->anim_y + g_lpRealAdrn[ATR_PAT_NO(a2)].height / 2;
; 8107 : #endif
; 8108 : 			}
; 8109 : 			DeathAction(a0);		//Óé∑?
; 8110 : 			return;
; 8111 : 		}
; 8112 : 		break;
; 8113 : 	case 27:		//??????Óù∏Óçï
; 8114 : 		if (ATR_HIT_STOP(a0))

  0234a	8a 42 5c	 mov	 al, BYTE PTR [edx+92]
  0234d	84 c0		 test	 al, al
  0234f	74 0c		 je	 SHORT $LN449@monster

; 8115 : 		{
; 8116 : 			ATR_HIT_STOP(a0)--;

  02351	5f		 pop	 edi
  02352	fe c8		 dec	 al

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02354	5e		 pop	 esi
  02355	88 42 5c	 mov	 BYTE PTR [edx+92], al
  02358	5b		 pop	 ebx
  02359	8b e5		 mov	 esp, ebp
  0235b	5d		 pop	 ebp
  0235c	c3		 ret	 0
$LN449@monster:

; 8117 : 			break;
; 8118 : 		}
; 8119 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  0235d	6a 01		 push	 1
  0235f	6a 00		 push	 0
  02361	57		 push	 edi
  02362	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  02367	83 c4 0c	 add	 esp, 12			; 0000000cH
  0236a	85 c0		 test	 eax, eax
  0236c	0f 85 57 28 00
	00		 jne	 $LN1099@monster

; 8120 : 		{	//???Óé∑???
; 8121 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8122 : 			DeathAction(a0);		//Óé∑?
; 8123 : 			return;
; 8124 : 		}
; 8125 : 		if (ATR_CHR_CNT(a0) == 9 && ATR_CHR_TIM(a0) == 0)

  02372	83 bf 5c 01 00
	00 09		 cmp	 DWORD PTR [edi+348], 9
  02379	0f 85 ca 4b 00
	00		 jne	 $LN1058@monster
  0237f	39 87 60 01 00
	00		 cmp	 DWORD PTR [edi+352], eax
  02385	0f 85 be 4b 00
	00		 jne	 $LN1058@monster

; 8126 : 		{
; 8127 : 			a2 = ATR_BODY_WORK(0, a0);

  0238b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 8128 : 			ATR_DAMAGE(a2) = ATR_INT_WORK0(a0);		//?????
; 8129 : 			ATR_LIFE(a2) += ATR_DAMAGE(a2);		//
; 8130 : 			ATR_HIT_STOP(a0) = 40;
; 8131 : 			//??Óñ±Óù∏Óçï
; 8132 : 			if (ATR_LIFE(a2) > ATR_MAX_LIFE(a2))		//?Óï´Óóó???
; 8133 : 				ATR_LIFE(a2) = ATR_MAX_LIFE(a2);		//?Óï´???
; 8134 : 			ATR_PET_DAMAGE(a2) = ATR_INT_WORKp(a0);		//?????
; 8135 : 			ATR_PET_LIFE(a2) += ATR_PET_DAMAGE(a2);		//
; 8136 : 			//??Óñ±Óù∏Óçï
; 8137 : 			if (ATR_PET_LIFE(a2) > ATR_PET_MAX_LIFE(a2))		//?Óï´Óóó???
; 8138 : 				ATR_PET_LIFE(a2) = ATR_PET_MAX_LIFE(a2);		//?Óï´???
; 8139 : 			set_damage_num(a2, 14, -64);

  0238e	6a c0		 push	 -64			; ffffffc0H
  02390	6a 0e		 push	 14			; 0000000eH
  02392	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  02395	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  0239b	52		 push	 edx
  0239c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0239f	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  023a2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  023a5	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  023a8	01 42 78	 add	 DWORD PTR [edx+120], eax
  023ab	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  023ae	c6 40 5c 28	 mov	 BYTE PTR [eax+92], 40	; 00000028H
  023b2	8b 8a 80 00 00
	00		 mov	 ecx, DWORD PTR [edx+128]
  023b8	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  023bb	3b c1		 cmp	 eax, ecx
  023bd	0f 4f c1	 cmovg	 eax, ecx
  023c0	89 42 78	 mov	 DWORD PTR [edx+120], eax
  023c3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  023c6	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  023c9	8b 80 28 02 00
	00		 mov	 eax, DWORD PTR [eax+552]
  023cf	89 81 24 02 00
	00		 mov	 DWORD PTR [ecx+548], eax
  023d5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  023d8	8b 80 24 02 00
	00		 mov	 eax, DWORD PTR [eax+548]
  023de	01 82 b0 01 00
	00		 add	 DWORD PTR [edx+432], eax
  023e4	8b 8a b4 01 00
	00		 mov	 ecx, DWORD PTR [edx+436]
  023ea	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  023f0	3b c1		 cmp	 eax, ecx
  023f2	0f 4f c1	 cmovg	 eax, ecx
  023f5	89 82 b0 01 00
	00		 mov	 DWORD PTR [edx+432], eax
  023fb	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02400	83 c4 0c	 add	 esp, 12			; 0000000cH
  02403	5f		 pop	 edi
  02404	5e		 pop	 esi
  02405	5b		 pop	 ebx
  02406	8b e5		 mov	 esp, ebp
  02408	5d		 pop	 ebp
  02409	c3		 ret	 0
$LN454@monster:

; 8140 : 		}
; 8141 : 		break;
; 8142 : #ifdef _FIREHUNTER_SKILL				// (‰∏çÂèØÂºÄ) ROG ADD Êú±ÈõÄÊäÄËÉΩ_ÁÅ´Á∫øÁåéÊùÄ
; 8143 : 	case FIRE_HUNTER_SKILL:
; 8144 : 		if (ATR_FIRST_FLG(a0) == 0)

  0240a	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  02411	75 43		 jne	 SHORT $LN1212@monster

; 8145 : 		{	//ÊúÄÂàùÁöÑ‰∏ÄÂõûÂêà
; 8146 : 			a2 = ATR_BODY_WORK(0, a0);		//Êïå‰∫∫‰ΩçÂùÄ

  02413	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 8147 : 			d0 = ATR_H_POS(a2);

  02416	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  02419	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8148 : 			d1 = ATR_V_POS(a2);

  0241c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0241f	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8149 : 			radar(a0, &d0, &d1);	//Èõ∑Ëææ

  02422	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  02425	50		 push	 eax
  02426	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02429	50		 push	 eax
  0242a	57		 push	 edi
  0242b	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8150 : 			ATR_CRS(a0) = d0;		//Ë∑ØÁ∫øÂÇ®Â≠ò

  02430	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  02433	83 c4 0c	 add	 esp, 12			; 0000000cH
  02436	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 8151 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];		//ÊñπÂêë

  0243c	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  0243f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  02446	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 8152 : 			ATR_CHR_ACT(a0) = ANIM_ATTACK;		//ÊîªÂáªÂä®‰Ωú

  0244c	c7 87 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+332], 0
$LN1212@monster:

; 8153 : 		}
; 8154 : 		ATR_HIT(a0) = 30;		//ÊîªÂáªÊ∏ÖÈô§
; 8155 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  02456	6a 01		 push	 1
  02458	6a 00		 push	 0
  0245a	57		 push	 edi
  0245b	c7 87 6c 01 00
	00 1e 00 00 00	 mov	 DWORD PTR [edi+364], 30	; 0000001eH
  02465	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0246a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0246d	85 c0		 test	 eax, eax
  0246f	74 21		 je	 SHORT $LN456@monster

; 8156 : 		{	//ÊîªÂáªÂä®ÁîªÁªà‰∫Ü
; 8157 : 			ATR_CHR_ACT_OLD(a0) = -1;

  02471	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1

; 8158 : 			//Change fix ÂéüÊú¨‰∏∫ 31 ÊîπÊàê FIRE_HUNTER_SKILL+1
; 8159 : 			ATR_VCT_NO(a0) = FIRE_HUNTER_SKILL+1;	//ÊîªÂáªÁªà‰∫ÜÂæÖÊú∫

  0247b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0247e	c6 00 f1	 mov	 BYTE PTR [eax], 241	; 000000f1H

; 8160 : 			ATR_FIRST_FLG(a0) = 0;		//ËÆæÂÆö‰∏∫ÊúÄÂàù‰∏ÄÂõûÂêà

  02481	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02484	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02485	5e		 pop	 esi
  02486	5b		 pop	 ebx
  02487	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  0248e	8b e5		 mov	 esp, ebp
  02490	5d		 pop	 ebp
  02491	c3		 ret	 0
$LN456@monster:

; 8161 : 			break;
; 8162 : 		}
; 8163 : 		if (ATR_HIT(a0) >= 10000 && ATR_HIT(a0) < 10100)

  02492	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  02498	2d 10 27 00 00	 sub	 eax, 10000		; 00002710H
  0249d	83 f8 63	 cmp	 eax, 99			; 00000063H
  024a0	0f 87 a3 4a 00
	00		 ja	 $LN1058@monster

; 8164 : 		{
; 8165 : 			a1 = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));		//ÁÅ´ÁÑ∞

  024a6	68 60 02 00 00	 push	 608			; 00000260H
  024ab	6a 65		 push	 101			; 00000065H
  024ad	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  024b2	8b f0		 mov	 esi, eax
  024b4	83 c4 08	 add	 esp, 8

; 8166 : 			if (a1 == NULL)

  024b7	85 f6		 test	 esi, esi
  024b9	0f 84 1f 02 00
	00		 je	 $LN1260@monster

; 8167 : 			{
; 8168 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//Âà∞ËææÁöÑËÆØÊÅØ
; 8169 : 				ATR_VCT_NO(a0) = 0;		//ÂæÖÊú∫
; 8170 : 				return;
; 8171 : 			}
; 8172 : 			ATR_STIMER(a0) = 0;		//?Óöç???????

  024bf	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 8173 : 			ATR_NAME(a1) = fireHunter;   //ÁÅ´ÁÑ∞ÁöÑfunction
; 8174 : 			ATR_CHR_NO(a1) = 101734;	 //ÂõæÂè∑
; 8175 : 			ATR_DISP_PRIO(a1) = D_PRIO_MISSILE;  //‰ºòÂÖàÂ∫¶
; 8176 : 			/*ÂàùÂßã‰ΩçÁΩÆ*/
; 8177 : 			ATR_CHR_ANG(a1) = ATR_CHR_ANG(a0);						//ÊñπÂêë
; 8178 : 			ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);				//Êïå‰∫∫‰ΩçÂùÄ
; 8179 : 			ATR_BODY_WORK(1, a1) = a0;								//ÂèëÂ∞ÑÁÅ´ÁÑ∞ÁöÑÂÆ†
; 8180 : 			for (int i = 2; i < ATR_BODY_CNT(a0) + 2; i++)

  024c2	c7 45 08 02 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 2
  024c9	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  024cd	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?fireHunter@@YAXPAUaction@@@Z ; fireHunter
  024d4	c7 86 44 01 00
	00 66 8d 01 00	 mov	 DWORD PTR [esi+324], 101734 ; 00018d66H
  024de	c6 46 15 56	 mov	 BYTE PTR [esi+21], 86	; 00000056H
  024e2	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  024e8	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  024ee	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  024f1	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  024f4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  024f7	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  024fa	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  024fd	89 78 08	 mov	 DWORD PTR [eax+8], edi
  02500	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  02503	0f b6 43 54	 movzx	 eax, BYTE PTR [ebx+84]
  02507	83 c0 02	 add	 eax, 2
  0250a	83 f8 02	 cmp	 eax, 2
  0250d	76 5c		 jbe	 SHORT $LN20@monster

; 8167 : 			{
; 8168 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//Âà∞ËææÁöÑËÆØÊÅØ
; 8169 : 				ATR_VCT_NO(a0) = 0;		//ÂæÖÊú∫
; 8170 : 				return;
; 8171 : 			}
; 8172 : 			ATR_STIMER(a0) = 0;		//?Óöç???????

  0250f	ba dc 01 00 00	 mov	 edx, 476		; 000001dcH
  02514	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL21@monster:

; 8181 : 			{
; 8182 : 				ATR_BODY_WORK(i, a1) = ATR_BODY_WORK(i, a0);			//Êïå‰∫∫‰ΩçÂùÄ

  02520	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  02523	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  02526	8b 84 13 2c fe
	ff ff		 mov	 eax, DWORD PTR [ebx+edx-468]
  0252d	89 84 11 2c fe
	ff ff		 mov	 DWORD PTR [ecx+edx-468], eax

; 8183 : 				ATR_ATTACK_POW(i, a1) = ATR_ATTACK_POW(i, a0);			//ÊîªÂáªÂäõ

  02534	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02537	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0253a	8b 84 02 d8 fe
	ff ff		 mov	 eax, DWORD PTR [edx+eax-296]
  02541	89 84 0a d8 fe
	ff ff		 mov	 DWORD PTR [edx+ecx-296], eax

; 8184 : 				ATR_ATTACK_PET_POW(i, a1) = ATR_ATTACK_PET_POW(i, a0);	//ÂÆ†Áâ©ÊîªÂáªÂäõ

  02548	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0254b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0254e	8b 44 02 fc	 mov	 eax, DWORD PTR [edx+eax-4]
  02552	89 44 0a fc	 mov	 DWORD PTR [edx+ecx-4], eax
  02556	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  02559	8b 4d 08	 mov	 ecx, DWORD PTR _i$1$[ebp]
  0255c	41		 inc	 ecx
  0255d	89 4d 08	 mov	 DWORD PTR _i$1$[ebp], ecx
  02560	0f b6 43 54	 movzx	 eax, BYTE PTR [ebx+84]
  02564	83 c0 02	 add	 eax, 2
  02567	3b c8		 cmp	 ecx, eax
  02569	7c b5		 jl	 SHORT $LL21@monster
$LN20@monster:

; 8185 : 			}
; 8186 : 			ATR_ATTACK_POW(0, a1) = ATR_ATTACK_POW(0, a0);			//ÊîªÂáªÂäõ

  0256b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0256e	8b 83 b0 00 00
	00		 mov	 eax, DWORD PTR [ebx+176]

; 8187 : 			ATR_ATTACK_PET_POW(0, a1) = ATR_ATTACK_PET_POW(0, a0);	//ÂÆ†Áâ©ÊîªÂáªÂäõ
; 8188 : 			ATR_ATTACK_KIND(0, a1) = ATR_ATTACK_KIND(0, a0);			//ÊîªÂáªÁßçÁ±ª
; 8189 : 			ATR_SPD(a1) = 60;										//ÈÄüÂ∫¶	
; 8190 : 			ATR_H_POS(a1) = ATR_H_POS(a0) ;								
; 8191 : 			ATR_V_POS(a1) = ATR_V_POS(a0) - 50;
; 8192 : 			ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];			//Ë∑ØÂæÑ
; 8193 : 			ATR_COUNTER_FLG(a1) = ATR_CRS(a1);						//Êïå‰∫∫ÊîªÂáªË∑ØÁ∫øËÆæÂÆö
; 8194 : 			ATR_BODY_CNT(a1) = ATR_BODY_CNT(a0);									//Âà∞ËææÊóóÊ†á
; 8195 : 			bFireInit = TRUE;
; 8196 : 			FireSkillEnd = TRUE;
; 8197 : 			p_missile[0] = a1;
; 8198 : 			p_missile[1] = NULL;
; 8199 : 			d6 = 0;		//ËÆ°ÁÆóÂà∞ËææÊó∂Èó¥

  02574	33 db		 xor	 ebx, ebx
  02576	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax
  0257c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0257f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  02582	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  02588	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  0258e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02591	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  02594	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  02597	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  0259a	c7 86 34 01 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+308], 60	; 0000003cH
  025a4	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  025a7	89 46 18	 mov	 DWORD PTR [esi+24], eax
  025aa	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  025ad	83 e8 32	 sub	 eax, 50			; 00000032H
  025b0	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  025b3	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  025b9	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  025bf	0f b6 c1	 movzx	 eax, cl
  025c2	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  025c8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  025cb	88 88 0c 01 00
	00		 mov	 BYTE PTR [eax+268], cl
  025d1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  025d4	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  025d7	8a 40 54	 mov	 al, BYTE PTR [eax+84]
  025da	88 41 54	 mov	 BYTE PTR [ecx+84], al
  025dd	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bFireInit@@3HA, 1 ; bFireInit
  025e7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?FireSkillEnd@@3HA, 1 ; FireSkillEnd
  025f1	89 35 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, esi
  025f7	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0

; 8200 : 			while (1)
; 8201 : 			{
; 8202 : 				d0 = ATR_H_POS(ATR_BODY_WORK(0, a1));

  02601	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  02604	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02607	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0260a	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8203 : 				d1 = ATR_V_POS(ATR_BODY_WORK(0, a1));

  0260d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  02610	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02613	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  02616	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8204 : 				radar(a1, &d0, &d1);	//Èõ∑Ëææ

  02619	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  0261c	50		 push	 eax
  0261d	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02620	50		 push	 eax
  02621	56		 push	 esi
  02622	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar
  02627	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8205 : 				//Âà∞Ëææ
; 8206 : 				if (d1 <= 10)

  0262a	83 7d f8 0a	 cmp	 DWORD PTR _d1$[ebp], 10	; 0000000aH
  0262e	7e 3f		 jle	 SHORT $LN1100@monster
$LL22@monster:

; 8207 : 					break;
; 8208 : 				ATR_CRS(a1) = d0;

  02630	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 8209 : 				gemini(a1);

  02633	56		 push	 esi
  02634	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  0263a	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  0263f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 8210 : 				d6++;

  02642	43		 inc	 ebx
  02643	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02646	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  02649	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  0264c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0264f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02652	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  02655	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  02658	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  0265b	50		 push	 eax
  0265c	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  0265f	50		 push	 eax
  02660	56		 push	 esi
  02661	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar
  02666	83 c4 10	 add	 esp, 16			; 00000010H
  02669	83 7d f8 0a	 cmp	 DWORD PTR _d1$[ebp], 10	; 0000000aH
  0266d	7f c1		 jg	 SHORT $LL22@monster
$LN1100@monster:

; 8211 : 			}
; 8212 : 			if (!(ATR_GROUP_FLG(a1) = d6))		//Âà∞ËææÊó∂Èó¥ÂÇ®Â≠ò

  0266f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  02672	88 58 5e	 mov	 BYTE PTR [eax+94], bl
  02675	84 db		 test	 bl, bl
  02677	75 07		 jne	 SHORT $LN460@monster

; 8213 : 				ATR_GROUP_FLG(a1) = 1;

  02679	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0267c	c6 40 5e 01	 mov	 BYTE PTR [eax+94], 1
$LN460@monster:

; 8214 : 			ATR_H_POS(a1) = ATR_H_POS(a0) ;								

  02680	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  02683	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 8215 : 			ATR_V_POS(a1) = ATR_V_POS(a0) - 30;

  02686	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  02689	83 e8 1e	 sub	 eax, 30			; 0000001eH
  0268c	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 8216 : 			ATR_CHR_ANG(a1) = ATR_CHR_ANG(a0);						//ÊñπÂêë

  0268f	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  02695	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  0269b	5f		 pop	 edi

; 8217 : 			ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];			//Ë∑ØÂæÑ

  0269c	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  026a2	0f b6 c1	 movzx	 eax, cl
  026a5	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 8218 : 			ATR_COUNTER_FLG(a1) = ATR_CRS(a1);						//Êïå‰∫∫ÊîªÂáªË∑ØÁ∫øËÆæÂÆö

  026ab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  026ae	5e		 pop	 esi
  026af	5b		 pop	 ebx
  026b0	88 88 0c 01 00
	00		 mov	 BYTE PTR [eax+268], cl
  026b6	8b e5		 mov	 esp, ebp
  026b8	5d		 pop	 ebp
  026b9	c3		 ret	 0
$LN461@monster:

; 8219 : 		}
; 8220 : 		break;
; 8221 : 		//Change fix ÊïåÊñπÁù°Áú†ÂêéÂÜçÁÅ´Á∫ø,‰ºöË∑ëÂéª 31 (ATR_VCT_NO(a0) = 31;),ÁªìÊûú‰ºöÂ∞ÑÁÆ≠Âá∫Âéª,Êîπ‰∏∫ ATR_VCT_NO(a0) = FIRE_HUNTER_SKILL+1; ÊîπÊàêËøô‰∏ÄÊÆµ
; 8222 : 	case FIRE_HUNTER_SKILL + 1:
; 8223 : 		ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????
; 8224 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  026ba	6a 00		 push	 0
  026bc	6a 00		 push	 0
  026be	57		 push	 edi
  026bf	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  026c9	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 8225 : 		if (!ATR_STIMER(a0))		//?Óöç??????

  026ce	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  026d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  026d4	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  026d8	0f 84 6b 48 00
	00		 je	 $LN1058@monster
$LN1260@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  026de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  026e3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  026e6	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  026ea	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  026ed	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  026f0	5f		 pop	 edi
  026f1	5e		 pop	 esi
  026f2	5b		 pop	 ebx
  026f3	c6 00 00	 mov	 BYTE PTR [eax], 0
  026f6	8b e5		 mov	 esp, ebp
  026f8	5d		 pop	 ebp
  026f9	c3		 ret	 0
$LN463@monster:

; 8226 : 			break;
; 8227 : 		ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8228 : 		ATR_VCT_NO(a0) = 0;		//Óïò??
; 8229 : 		break;
; 8230 : #endif
; 8231 : 	case 30:		//?????
; 8232 : 		if (ATR_FIRST_FLG(a0) == 0)

  026fa	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  02701	75 56		 jne	 SHORT $LN464@monster

; 8233 : 		{	//???????
; 8234 : 			a2 = ATR_BODY_WORK(0, a0);		//Óò©?Óüµ??

  02703	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 8235 : 			d0 = ATR_H_POS(a2);

  02706	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  02709	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8236 : 			d1 = ATR_V_POS(a2);

  0270c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0270f	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8237 : 			radar(a0, &d0, &d1);	//????

  02712	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  02715	50		 push	 eax
  02716	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02719	50		 push	 eax
  0271a	57		 push	 edi
  0271b	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8238 : 			ATR_CRS(a0) = d0;		//???ÓüïÓîº

  02720	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  02723	83 c4 0c	 add	 esp, 12			; 0000000cH
  02726	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 8239 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];		/* ????? */

  0272c	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  0272f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  02736	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 8240 : 			if (ATR_LONG_WORK(0, a0) == 0)		//?????

  0273c	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 8241 : 				ATR_CHR_ACT(a0) = ANIM_ATTACK;		//?????????
; 8242 : 			else
; 8243 : 				ATR_CHR_ACT(a0) = ANIM_THROW;		//?????????
; 8244 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  0273f	8b 81 34 01 00
	00		 mov	 eax, DWORD PTR [ecx+308]
  02745	f7 d8		 neg	 eax
  02747	1b c0		 sbb	 eax, eax
  02749	83 e0 0c	 and	 eax, 12			; 0000000cH
  0274c	89 87 4c 01 00
	00		 mov	 DWORD PTR [edi+332], eax
  02752	c6 81 1e 01 00
	00 01		 mov	 BYTE PTR [ecx+286], 1
$LN464@monster:

; 8245 : 		}
; 8246 : 
; 8247 : 		ATR_HIT(a0) = 0;		//?????????
; 8248 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  02759	6a 01		 push	 1
  0275b	6a 00		 push	 0
  0275d	57		 push	 edi
  0275e	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0
  02768	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0276d	83 c4 0c	 add	 esp, 12			; 0000000cH
  02770	85 c0		 test	 eax, eax
  02772	0f 85 ca 03 00
	00		 jne	 $__end$1274

; 8257 : 			}
; 8258 : 			ÂàùÂßãÂåñ = 0;
; 8259 : 			break;
; 8260 : 		}
; 8261 : 
; 8262 : 		if (ÂàùÂßãÂåñ== 2)

  02778	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA
  0277d	83 f8 02	 cmp	 eax, 2
  02780	0f 84 bc 03 00
	00		 je	 $__end$1274

; 8263 : 		{
; 8264 : 			goto __end;
; 8265 : 		}
; 8266 : 		
; 8267 : 		if (ÂàùÂßãÂåñ == 0)

  02786	85 c0		 test	 eax, eax
  02788	75 2a		 jne	 SHORT $LN476@monster

; 8268 : 		{
; 8269 : 			ÂàùÂßãÂåñ = 1;

  0278a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 1

; 8270 : 			if (ATR_HIT(a0) == 0)

  02794	39 87 6c 01 00
	00		 cmp	 DWORD PTR [edi+364], eax
  0279a	75 18		 jne	 SHORT $LN476@monster

; 8271 : 			{
; 8272 : 				if (ATR_LONG_WORK(0, a0) == 1)goto __test;  //ÊäïÊñß

  0279c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0279f	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  027a5	83 f8 01	 cmp	 eax, 1
  027a8	74 1e		 je	 SHORT $__test$1275

; 8273 : 				if (ATR_LONG_WORK(0, a0) == 2)goto __test;  //ÊäïÁü≥

  027aa	83 f8 02	 cmp	 eax, 2
  027ad	74 19		 je	 SHORT $__test$1275

; 8274 : 				if (ATR_LONG_WORK(0, a0) == 3)goto __test;  //Èû≠ÁÇÆ

  027af	83 f8 03	 cmp	 eax, 3
  027b2	74 14		 je	 SHORT $__test$1275
$LN476@monster:

; 8275 : 			}
; 8276 : 		}
; 8277 : 
; 8278 : 	
; 8279 : 		if (ATR_HIT(a0) >= 10000 && ATR_HIT(a0) < 10100)

  027b4	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  027ba	2d 10 27 00 00	 sub	 eax, 10000		; 00002710H
  027bf	83 f8 63	 cmp	 eax, 99			; 00000063H
  027c2	0f 87 72 03 00
	00		 ja	 $LN478@monster
$__test$1275:

; 8280 : 		{
; 8281 : 		__test:;
; 8282 : 			//??????
; 8283 : 			a1 = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  027c8	68 60 02 00 00	 push	 608			; 00000260H
  027cd	6a 65		 push	 101			; 00000065H
  027cf	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  027d4	8b d8		 mov	 ebx, eax
  027d6	83 c4 08	 add	 esp, 8
  027d9	89 5d f4	 mov	 DWORD PTR _a1$17$[ebp], ebx

; 8284 : 			if (a1 == NULL)

  027dc	85 db		 test	 ebx, ebx
  027de	0f 84 fa fe ff
	ff		 je	 $LN1260@monster

; 8285 : 			{
; 8286 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8287 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 8288 : 				return;
; 8289 : 			}
; 8290 : 			ATR_STIMER(a0) = 0;		//?Óöç???????

  027e4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  027e7	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 8291 : 			/* ÓçØ??? */
; 8292 : 			switch (ATR_LONG_WORK(0, a0))

  027eb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  027ee	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  027f4	83 f8 03	 cmp	 eax, 3
  027f7	0f 87 d4 00 00
	00		 ja	 $LN491@monster
  027fd	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1224@monster[eax*4]
$LN481@monster:

; 8293 : 			{
; 8294 : 			case 0:		//?
; 8295 : 				ATR_NAME(a1) = bow;

  02804	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ?bow@@YAXPAUaction@@@Z ; bow

; 8296 : 				ATR_CHR_NO(a1) = CG_ARROW_00 + ATR_CRS(a0) / 2 + 20;

  0280b	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  02811	99		 cdq
  02812	2b c2		 sub	 eax, edx
  02814	d1 f8		 sar	 eax, 1
  02816	05 32 64 00 00	 add	 eax, 25650		; 00006432H
  0281b	89 83 44 01 00
	00		 mov	 DWORD PTR [ebx+324], eax

; 8297 : 				break;

  02821	e9 b2 00 00 00	 jmp	 $LN24@monster
$LN482@monster:

; 8298 : 			case 1:		//ÊäïÊñß
; 8299 : 
; 8300 : 				if (ÂàùÂßãÂåñ == 1)

  02826	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 1
  0282d	75 1d		 jne	 SHORT $LN483@monster

; 8301 : 				{
; 8302 : 					if (ATR_HIT(a0) == 0) ATR_HIT(a0) = 10006;

  0282f	83 bf 6c 01 00
	00 00		 cmp	 DWORD PTR [edi+364], 0
  02836	75 0a		 jne	 SHORT $LN484@monster
  02838	c7 87 6c 01 00
	00 16 27 00 00	 mov	 DWORD PTR [edi+364], 10006 ; 00002716H
$LN484@monster:

; 8303 : 					ÂàùÂßãÂåñ = 2;

  02842	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 2
$LN483@monster:

; 8304 : 				}
; 8305 : 				
; 8306 : 
; 8307 : 				ATR_NAME(a1) = axe_shadow;

  0284c	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ?axe_shadow@@YAXPAUaction@@@Z ; axe_shadow

; 8308 : 				ATR_CHR_NO(a1) = SPR_onokage;

  02853	c7 83 44 01 00
	00 99 88 01 00	 mov	 DWORD PTR [ebx+324], 100505 ; 00018899H

; 8309 : 				break;

  0285d	eb 79		 jmp	 SHORT $LN24@monster
$LN485@monster:

; 8310 : 			case 2:		//Óí∑ÊäïÁü≥
; 8311 : 				if (ÂàùÂßãÂåñ == 1)

  0285f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 1
  02866	75 1d		 jne	 SHORT $LN486@monster

; 8312 : 				{
; 8313 : 					if (ATR_HIT(a0) == 0) ATR_HIT(a0) = 10006;

  02868	83 bf 6c 01 00
	00 00		 cmp	 DWORD PTR [edi+364], 0
  0286f	75 0a		 jne	 SHORT $LN487@monster
  02871	c7 87 6c 01 00
	00 16 27 00 00	 mov	 DWORD PTR [edi+364], 10006 ; 00002716H
$LN487@monster:

; 8314 : 					ÂàùÂßãÂåñ = 2;

  0287b	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 2
$LN486@monster:

; 8315 : 				}
; 8316 : 				ATR_NAME(a1) = stone_shadow;

  02885	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ?stone_shadow@@YAXPAUaction@@@Z ; stone_shadow

; 8317 : 				ATR_CHR_NO(a1) = 25786;

  0288c	c7 83 44 01 00
	00 ba 64 00 00	 mov	 DWORD PTR [ebx+324], 25786 ; 000064baH

; 8318 : 				break;

  02896	eb 40		 jmp	 SHORT $LN24@monster
$LN488@monster:

; 8319 : 				//Terry add 2001/12/28
; 8320 : #ifdef _ITEM_FIRECREAKER
; 8321 : 			case 3:		//Èû≠ÁÇÆ
; 8322 : 				if (ÂàùÂßãÂåñ == 1)

  02898	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 1
  0289f	75 1d		 jne	 SHORT $LN489@monster

; 8323 : 				{
; 8324 : 					if (ATR_HIT(a0) == 0) ATR_HIT(a0) = 10006;

  028a1	83 bf 6c 01 00
	00 00		 cmp	 DWORD PTR [edi+364], 0
  028a8	75 0a		 jne	 SHORT $LN490@monster
  028aa	c7 87 6c 01 00
	00 16 27 00 00	 mov	 DWORD PTR [edi+364], 10006 ; 00002716H
$LN490@monster:

; 8325 : 					ÂàùÂßãÂåñ = 2;

  028b4	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 2
$LN489@monster:

; 8326 : 				}
; 8327 : 				ATR_NAME(a1) = firecracker_shadow;

  028be	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ?firecracker_shadow@@YAXPAUaction@@@Z ; firecracker_shadow

; 8328 : 				ATR_CHR_NO(a1) = 25786;

  028c5	c7 83 44 01 00
	00 ba 64 00 00	 mov	 DWORD PTR [ebx+324], 25786 ; 000064baH

; 8329 : 				break;

  028cf	eb 07		 jmp	 SHORT $LN24@monster
$LN491@monster:

; 8330 : #endif
; 8331 : 				//Terry end
; 8332 : 			default:
; 8333 : 				ATR_NAME(a1) = bow;

  028d1	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ?bow@@YAXPAUaction@@@Z ; bow
$LN24@monster:

; 8334 : 			}
; 8335 : 			/* Óù∏Óçï?ÓìèÓôö */
; 8336 : 			ATR_DISP_PRIO(a1) = D_PRIO_MISSILE;

  028d8	c6 43 15 56	 mov	 BYTE PTR [ebx+21], 86	; 00000056H

; 8337 : 			/* ???Óñ∫ */
; 8338 : 			ATR_CHR_ANG(a1) = ATR_CHR_ANG(a0);

  028dc	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  028e2	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax

; 8339 : 			ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);		//Óò©?????

  028e8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  028eb	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]

; 8340 : 			ATR_BODY_WORK(1, a1) = a0;		//ÓúäÓç∫?????
; 8341 : 			ATR_ATTACK_POW(0, a1) = ATR_ATTACK_POW(0, a0);		//???
; 8342 : 			ATR_ATTACK_PET_POW(0, a1) = ATR_ATTACK_PET_POW(0, a0);		//???
; 8343 : 			ATR_ATTACK_KIND(0, a1) = ATR_ATTACK_KIND(0, a0);		//?????
; 8344 : 			ATR_H_POS(a1) = ATR_H_POS(a0);
; 8345 : 			ATR_V_POS(a1) = ATR_V_POS(a0);
; 8346 : 			ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];
; 8347 : 			ATR_SPD(a1) = 32;
; 8348 : 			gemini(a1);

  028ee	53		 push	 ebx
  028ef	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  028f2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  028f5	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  028f8	89 78 08	 mov	 DWORD PTR [eax+8], edi
  028fb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  028fe	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  02901	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  02907	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax
  0290d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02910	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  02913	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  02919	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  0291f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02922	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  02925	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  02928	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  0292b	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0292e	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  02931	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  02934	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
  02937	8b 83 54 01 00
	00		 mov	 eax, DWORD PTR [ebx+340]
  0293d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  02944	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  0294a	c7 83 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [ebx+308], 32	; 00000020H
  02954	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8349 : 			gemini(a1);

  02959	53		 push	 ebx
  0295a	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8350 : 			gemini(a1);

  0295f	53		 push	 ebx
  02960	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8351 : 			ATR_BODY_CNT(a1) = 0;

  02965	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 8352 : 			ATR_COUNTER_FLG(a1) = ATR_CRS(a0);		//Óò©?????????????
; 8353 : 			p_missile[0] = a1;
; 8354 : 			p_missile[1] = NULL;
; 8355 : 			//????
; 8356 : 			a2 = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  02968	68 60 02 00 00	 push	 608			; 00000260H
  0296d	6a 65		 push	 101			; 00000065H
  0296f	c6 40 54 00	 mov	 BYTE PTR [eax+84], 0
  02973	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  02976	8a 87 38 01 00
	00		 mov	 al, BYTE PTR [edi+312]
  0297c	88 81 0c 01 00
	00		 mov	 BYTE PTR [ecx+268], al
  02982	89 1d 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, ebx
  02988	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0
  02992	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  02997	8b f0		 mov	 esi, eax
  02999	83 c4 14	 add	 esp, 20			; 00000014H

; 8357 : 			if (a2 == NULL)

  0299c	85 f6		 test	 esi, esi
  0299e	0f 84 3a fd ff
	ff		 je	 $LN1260@monster

; 8358 : 			{
; 8359 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8360 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 8361 : 				return;
; 8362 : 			}
; 8363 : 			/* ÓçØ??? */
; 8364 : 			switch (ATR_LONG_WORK(0, a0))

  029a4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  029a7	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  029ad	83 f8 03	 cmp	 eax, 3
  029b0	77 6f		 ja	 SHORT $LN497@monster
  029b2	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN1225@monster[eax*4]
$LN493@monster:

; 8365 : 			{
; 8366 : 			case 0:		//?
; 8367 : 				ATR_NAME(a2) = stick_bow;

  029b9	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?stick_bow@@YAXPAUaction@@@Z ; stick_bow

; 8368 : 				ATR_CHR_NO(a2) = CG_ARROW_00 + ATR_CRS(a0) / 2;

  029c0	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  029c6	99		 cdq
  029c7	2b c2		 sub	 eax, edx
  029c9	d1 f8		 sar	 eax, 1
  029cb	8d 88 1e 64 00
	00		 lea	 ecx, DWORD PTR [eax+25630]
  029d1	89 8e 44 01 00
	00		 mov	 DWORD PTR [esi+324], ecx

; 8369 : 				break;

  029d7	eb 55		 jmp	 SHORT $LN26@monster
$LN494@monster:

; 8370 : 			case 1:		//???
; 8371 : 				ATR_NAME(a2) = axe;

  029d9	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?axe@@YAXPAUaction@@@Z ; axe

; 8372 : 				ATR_CHR_NO(a2) = SPR_ono;

  029e0	b9 98 88 01 00	 mov	 ecx, 100504		; 00018898H
  029e5	c7 86 44 01 00
	00 98 88 01 00	 mov	 DWORD PTR [esi+324], 100504 ; 00018898H

; 8373 : 				break;

  029ef	eb 3d		 jmp	 SHORT $LN26@monster
$LN495@monster:

; 8374 : 			case 2:		//Óí∑??
; 8375 : 				ATR_NAME(a2) = stone;

  029f1	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?stone@@YAXPAUaction@@@Z ; stone

; 8376 : 				ATR_CHR_NO(a2) = 25785;

  029f8	b9 b9 64 00 00	 mov	 ecx, 25785		; 000064b9H
  029fd	c7 86 44 01 00
	00 b9 64 00 00	 mov	 DWORD PTR [esi+324], 25785 ; 000064b9H

; 8377 : 				break;

  02a07	eb 25		 jmp	 SHORT $LN26@monster
$LN496@monster:

; 8378 : 				//Terry add 2001/12/28
; 8379 : #ifdef _ITEM_FIRECREAKER
; 8380 : 			case 3:		//Èû≠ÁÇÆ
; 8381 : 				ATR_NAME(a2) = stone;

  02a09	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?stone@@YAXPAUaction@@@Z ; stone

; 8382 : 				ATR_CHR_NO(a2) = 24350;

  02a10	b9 1e 5f 00 00	 mov	 ecx, 24350		; 00005f1eH
  02a15	c7 86 44 01 00
	00 1e 5f 00 00	 mov	 DWORD PTR [esi+324], 24350 ; 00005f1eH

; 8383 : 				break;

  02a1f	eb 0d		 jmp	 SHORT $LN26@monster
$LN497@monster:

; 8384 : #endif
; 8385 : 				//Terry end
; 8386 : 			default:
; 8387 : 				ATR_NAME(a2) = stick_bow;

  02a21	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?stick_bow@@YAXPAUaction@@@Z ; stick_bow
  02a28	8b 8e 44 01 00
	00		 mov	 ecx, DWORD PTR [esi+324]
$LN26@monster:

; 8388 : 			}
; 8389 : 			/* Óù∏Óçï?ÓìèÓôö */
; 8390 : 			ATR_DISP_PRIO(a2) = D_PRIO_MISSILE;

  02a2e	c6 46 15 56	 mov	 BYTE PTR [esi+21], 86	; 00000056H

; 8391 : 			//?????????
; 8392 : 			ATR_LONG_WORK(0, a1) = ATR_CHR_NO(a2);

  02a32	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 8393 : 			ATR_BODY_WORK(2, a1) = a2;
; 8394 : 			/* ???Óñ∫ */
; 8395 : 			ATR_CHR_ANG(a2) = ATR_CHR_ANG(a1);
; 8396 : 			a3 = ATR_BODY_WORK(0, a2) = ATR_BODY_WORK(0, a1);		//Óò©?????
; 8397 : 			ATR_BODY_WORK(1, a2) = a1;		//?Óôπ?????
; 8398 : 			ATR_H_POS(a2) = ATR_H_POS(a1);
; 8399 : 			ATR_V_POS(a2) = ATR_V_POS(a1);
; 8400 : 
; 8401 : 			d6 = 0;		//Óöç????Óå´

  02a35	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _d6$2$[ebp], 0
  02a3c	89 88 34 01 00
	00		 mov	 DWORD PTR [eax+308], ecx
  02a42	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02a45	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  02a48	8b 83 54 01 00
	00		 mov	 eax, DWORD PTR [ebx+340]
  02a4e	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  02a54	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02a57	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  02a5a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02a5d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  02a60	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  02a63	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  02a66	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  02a69	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  02a6c	89 46 18	 mov	 DWORD PTR [esi+24], eax
  02a6f	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  02a72	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 8402 : 			ATR_SPD(a2) = 32;

  02a75	c7 86 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+308], 32	; 00000020H

; 8403 : 			while (1){
; 8404 : 				d0 = ATR_H_POS(a3);

  02a7f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  02a82	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8405 : 				d1 = ATR_V_POS(a3);

  02a85	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  02a88	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8406 : 				radar(a2, &d0, &d1);	//????

  02a8b	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  02a8e	50		 push	 eax
  02a8f	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02a92	50		 push	 eax
  02a93	56		 push	 esi
  02a94	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8407 : 				//???????
; 8408 : 				if (d1 <= 20){

  02a99	8b 4d f8	 mov	 ecx, DWORD PTR _d1$[ebp]
  02a9c	83 c4 0c	 add	 esp, 12			; 0000000cH
  02a9f	83 f9 14	 cmp	 ecx, 20			; 00000014H
  02aa2	7e 3d		 jle	 SHORT $LN1101@monster
  02aa4	33 db		 xor	 ebx, ebx
$LL28@monster:

; 8409 : 					break;
; 8410 : 				}
; 8411 : 				ATR_CRS(a2) = d0;

  02aa6	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 8412 : 				gemini(a2);

  02aa9	56		 push	 esi
  02aaa	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  02ab0	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  02ab5	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 8413 : 				d6++;

  02ab8	43		 inc	 ebx
  02ab9	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  02abc	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  02abf	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  02ac2	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  02ac5	50		 push	 eax
  02ac6	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02ac9	50		 push	 eax
  02aca	56		 push	 esi
  02acb	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar
  02ad0	8b 4d f8	 mov	 ecx, DWORD PTR _d1$[ebp]
  02ad3	83 c4 10	 add	 esp, 16			; 00000010H
  02ad6	83 f9 14	 cmp	 ecx, 20			; 00000014H
  02ad9	7f cb		 jg	 SHORT $LL28@monster
  02adb	89 5d 08	 mov	 DWORD PTR _d6$2$[ebp], ebx
  02ade	8b 5d f4	 mov	 ebx, DWORD PTR _a1$17$[ebp]
$LN1101@monster:

; 8414 : 			}
; 8415 : 			ATR_INT_WORK0(a2) = d1;		//Óò©?????ÓüïÓîº

  02ae1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  02ae4	89 88 24 01 00
	00		 mov	 DWORD PTR [eax+292], ecx

; 8416 : 			if (!(ATR_GROUP_FLG(a1) = d6)){		//???????ÓüïÓîº

  02aea	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02aed	8b 4d 08	 mov	 ecx, DWORD PTR _d6$2$[ebp]
  02af0	88 48 5e	 mov	 BYTE PTR [eax+94], cl
  02af3	84 c9		 test	 cl, cl
  02af5	75 07		 jne	 SHORT $LN499@monster

; 8417 : 				ATR_GROUP_FLG(a1) = 1;

  02af7	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02afa	c6 40 5e 01	 mov	 BYTE PTR [eax+94], 1
$LN499@monster:

; 8418 : 			}
; 8419 : 			d6 = d6 >> 1;

  02afe	d1 f9		 sar	 ecx, 1

; 8420 : 			ATR_SPD(a2) = d6;		//

  02b00	89 8e 34 01 00
	00		 mov	 DWORD PTR [esi+308], ecx

; 8421 : 			ATR_CRS(a2) = 0;		//

  02b06	c7 86 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+312], 0

; 8422 : 			ATR_H_MINI(a2) = 0;		//

  02b10	c7 86 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+316], 0

; 8423 : 			ATR_V_MINI(a2) = 0;		//

  02b1a	c7 86 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+320], 0

; 8424 : 			ATR_H_POS(a2) = ATR_H_POS(a1);		//?Óù≥ÓüúÓíú

  02b24	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  02b27	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 8425 : 			ATR_V_POS(a2) = ATR_V_POS(a1) - 28;		//

  02b2a	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  02b2d	83 e8 1c	 sub	 eax, 28			; 0000001cH
  02b30	5f		 pop	 edi
  02b31	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02b34	5e		 pop	 esi
  02b35	5b		 pop	 ebx
  02b36	8b e5		 mov	 esp, ebp
  02b38	5d		 pop	 ebp
  02b39	c3		 ret	 0
$LN478@monster:

; 8426 : 		}
; 8427 : 		else
; 8428 : 		{
; 8429 : 			__asm nop;

  02b3a	90		 npad	 1
  02b3b	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02b3c	5e		 pop	 esi
  02b3d	5b		 pop	 ebx
  02b3e	8b e5		 mov	 esp, ebp
  02b40	5d		 pop	 ebp
  02b41	c3		 ret	 0
$__end$1274:

; 8249 : 		{	//?????Óé∑???
; 8250 : 		__end:;
; 8251 : 			ATR_CHR_ACT_OLD(a0) = -1;

  02b42	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1

; 8252 : 			ATR_VCT_NO(a0) = 31;		//???Óé∑?Óïò??

  02b4c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02b4f	c6 00 1f	 mov	 BYTE PTR [eax], 31	; 0000001fH

; 8253 : 			ATR_FIRST_FLG(a0) = 0;		//????????

  02b52	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02b55	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 8254 : 			if (ÂàùÂßãÂåñ==0) //Â¶ÇÊûúÂõæÊ°£ÂéãÊ†πÂ∞±Ê≤°Âä®ÁîªÔºåÂàùÂßãÂåñÂπ∂Ê≤°ËøõË°å

  02b5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 0
  02b63	75 07		 jne	 SHORT $LN468@monster

; 8255 : 			{
; 8256 : 				ATR_STIMER(a0) = 20;

  02b65	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02b68	c6 40 01 14	 mov	 BYTE PTR [eax+1], 20	; 00000014H
$LN468@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02b6c	5f		 pop	 edi
  02b6d	5e		 pop	 esi
  02b6e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Ù¯„∑˚˘@?1??monster@@YAXPAUaction@@@Z@4HA, 0
  02b78	5b		 pop	 ebx
  02b79	8b e5		 mov	 esp, ebp
  02b7b	5d		 pop	 ebp
  02b7c	c3		 ret	 0
$LN500@monster:

; 8430 : 		}
; 8431 : 		break;
; 8432 : 
; 8433 : 	case 31:		//?????Óé∑?Óïò?
; 8434 : 		ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????
; 8435 : 
; 8436 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  02b7d	6a 00		 push	 0
  02b7f	6a 00		 push	 0
  02b81	57		 push	 edi
  02b82	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  02b8c	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 8437 : 		if (!ATR_STIMER(a0)){		//?Óöç??????

  02b91	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02b94	83 c4 0c	 add	 esp, 12			; 0000000cH
  02b97	80 78 01 00	 cmp	 BYTE PTR [eax+1], 0
  02b9b	0f 84 a8 43 00
	00		 je	 $LN1058@monster

; 8438 : 			break;
; 8439 : 		}
; 8440 : 		d0 = get_num();		//???ÓôÆÓéï?Óèù?

  02ba1	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02ba6	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8441 : 		if (d0 == 255){		//Óé∑???

  02ba9	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  02bae	0f 84 2a fb ff
	ff		 je	 $LN1260@monster

; 8442 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8443 : 			ATR_VCT_NO(a0) = 0;		//Óïò??
; 8444 : 		}
; 8445 : 		else {
; 8446 : 			ATR_VCT_NO(a0) = 30;		//???Óúä

  02bb4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02bb7	c6 00 1e	 mov	 BYTE PTR [eax], 30	; 0000001eH

; 8447 : 			ATR_FIRST_FLG(a0) = 0;		//

  02bba	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02bbd	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 8448 : 			ATR_BODY_WORK(0, a0) = p_party[d0];		//Óîá?Óò©???

  02bc4	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  02bc7	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  02bca	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  02bd1	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 8449 : 			ATR_ATTACK_KIND(0, a0) = get_num();		//??Óéú????

  02bd4	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02bd9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  02bdc	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 8450 : 			ATR_ATTACK_POW(0, a0) = get_num();		//??????

  02bdf	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02be4	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  02be7	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 8451 : #ifdef _PET_ITEM
; 8452 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ATTACKBACK)

  02bed	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  02bf0	f7 41 60 00 00
	00 40		 test	 DWORD PTR [ecx+96], 1073741824 ; 40000000H
  02bf7	74 1c		 je	 SHORT $LN504@monster

; 8453 : 			{
; 8454 : 				ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  02bf9	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  02c00	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 8455 : 				ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  02c06	33 c9		 xor	 ecx, ecx
  02c08	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02c0b	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
  02c12	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN504@monster:

; 8456 : 			}
; 8457 : #endif
; 8458 : #ifdef _FIX_ACUPUNCTURE
; 8459 : 			if (ATR_ATTACK_KIND(0, a0) & ATT_ACUPUNCTURE)

  02c15	f7 41 60 00 00
	00 08		 test	 DWORD PTR [ecx+96], 134217728 ; 08000000H
  02c1c	74 19		 je	 SHORT $LN505@monster

; 8460 : 			{
; 8461 : 				ATR_ATTACK_POW(1, a0) = ATR_ATTACK_POW(0, a0) >> 16;

  02c1e	0f bf 81 b2 00
	00 00		 movsx	 eax, WORD PTR [ecx+178]
  02c25	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax

; 8462 : 				ATR_ATTACK_POW(0, a0) = ATR_ATTACK_POW(0, a0) & 0x0000ffff;

  02c2b	33 c9		 xor	 ecx, ecx
  02c2d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02c30	66 89 88 b2 00
	00 00		 mov	 WORD PTR [eax+178], cx
$LN505@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02c37	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
  02c3c	80 b8 00 00 00
	00 70		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 112 ; 00000070H
  02c43	75 13		 jne	 SHORT $LN506@monster
  02c45	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02c4a	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  02c4d	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  02c53	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_point@@3HA
$LN506@monster:
  02c58	80 b8 00 00 00
	00 73		 cmp	 BYTE PTR ?BattleCmd@@3PADA[eax], 115 ; 00000073H
  02c5f	0f 85 e4 42 00
	00		 jne	 $LN1058@monster
  02c65	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  02c6a	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  02c6d	5f		 pop	 edi
  02c6e	5e		 pop	 esi
  02c6f	5b		 pop	 ebx
  02c70	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
  02c76	8b e5		 mov	 esp, ebp
  02c78	5d		 pop	 ebp
  02c79	c3		 ret	 0
$LN509@monster:

; 8463 : 			}
; 8464 : #endif
; 8465 : 			if (BattleCmd[command_point] == 'p')
; 8466 : 				ATR_ATTACK_PET_POW(0, a0) = get_num();		//pet??????
; 8467 : 			else
; 8468 : 				LogToBattleError(BattleCmd, __LINE__);
; 8469 : 
; 8470 : 			//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 8471 : #ifdef _ATTACK_EFFECT
; 8472 : 			if (BattleCmd[command_point] == 's')
; 8473 : 				ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑
; 8474 : #endif
; 8475 : 
; 8476 : 		}
; 8477 : 		break;
; 8478 : 
; 8479 : 	case 32:		//ÂºìÊîªÂáª
; 8480 : 		// a2‰∏∫‰∏ª„ÄÅa1‰∏∫ÂΩ±
; 8481 : 		if (ATR_FIRST_FLG(a0) == 0){		//???????

  02c7a	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  02c81	75 58		 jne	 SHORT $LN510@monster

; 8482 : 			a2 = ATR_BODY_WORK(0, a0);		//Óò©?Óüµ??

  02c83	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 8483 : 			d0 = ATR_H_POS(a2);

  02c86	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  02c89	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8484 : 			d1 = ATR_V_POS(a2);

  02c8c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  02c8f	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8485 : 			radar(a0, &d0, &d1);	//????

  02c92	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  02c95	50		 push	 eax
  02c96	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02c99	50		 push	 eax
  02c9a	57		 push	 edi
  02c9b	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8486 : 			ATR_CRS(a0) = d0;		//???ÓüïÓîº

  02ca0	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  02ca3	83 c4 0c	 add	 esp, 12			; 0000000cH
  02ca6	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 8487 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];		/* ????? */

  02cac	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  02caf	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  02cb6	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 8488 : 			if (ATR_LONG_WORK(0, a0) == 0){		//?????

  02cbc	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 8489 : 				ATR_CHR_ACT(a0) = ANIM_ATTACK;		//?????????
; 8490 : 			}
; 8491 : 			else {
; 8492 : 				ATR_CHR_ACT(a0) = ANIM_THROW;		//?????????
; 8493 : 			}
; 8494 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  02cbf	8b 81 34 01 00
	00		 mov	 eax, DWORD PTR [ecx+308]
  02cc5	f7 d8		 neg	 eax
  02cc7	1b c0		 sbb	 eax, eax
  02cc9	83 e0 0c	 and	 eax, 12			; 0000000cH
  02ccc	89 87 4c 01 00
	00		 mov	 DWORD PTR [edi+332], eax
  02cd2	c6 81 1e 01 00
	00 01		 mov	 BYTE PTR [ecx+286], 1

; 8495 : 		}

  02cd9	eb 3e		 jmp	 SHORT $LN514@monster
$LN510@monster:

; 8496 : 
; 8497 : #ifdef _SHOOTCHESTNUT	// Syu ADD ÂÆ†ÊäÄÔºö‰∏¢Ê†óÂ≠ê
; 8498 : 		else if (ShooterNum == 101578) {

  02cdb	81 3d 00 00 00
	00 ca 8c 01 00	 cmp	 DWORD PTR ?ShooterNum@@3HA, 101578 ; ShooterNum, 00018ccaH
  02ce5	75 32		 jne	 SHORT $LN514@monster

; 8499 : 			a2 = ATR_BODY_WORK(0, a0);		//Óò©?Óüµ??

  02ce7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 8500 : 			//‰∏çÂÆöÁÇπ	
; 8501 : 			//d0 = /*ATR_H_POS(a2) =*/ nutx[ a2->hitDispNo ] ;
; 8502 : 			//d1 = /*ATR_V_POS(a2) =*/ nuty[ a2->hitDispNo ] ;
; 8503 : 			//ÂÆöÁÇπ
; 8504 : 			d0 = ATR_H_POS(a2) = ATR_INT_WORK0(a2);

  02cea	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  02ced	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  02cf3	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  02cf6	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8505 : 			d1 = ATR_V_POS(a2) = ATR_INT_WORK1(a2);

  02cf9	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  02cfc	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  02d02	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  02d05	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8506 : 
; 8507 : 			radar(a0, &d0, &d1);	//????

  02d08	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  02d0b	50		 push	 eax
  02d0c	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02d0f	50		 push	 eax
  02d10	57		 push	 edi
  02d11	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar
  02d16	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN514@monster:

; 8508 : 			//			ATR_CRS(a0) = d0;		//???ÓüïÓîº
; 8509 : 			//			ATR_CHR_ANG(a0) = crs_change_tbl[ d0 ];		/* ????? */
; 8510 : 		}
; 8511 : #endif
; 8512 : 
; 8513 : 
; 8514 : 		ATR_HIT(a0) = 0;		//?????????
; 8515 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP)){	//?????Óé∑???

  02d19	6a 01		 push	 1
  02d1b	6a 00		 push	 0
  02d1d	57		 push	 edi
  02d1e	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0
  02d28	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  02d2d	83 c4 0c	 add	 esp, 12			; 0000000cH
  02d30	85 c0		 test	 eax, eax
  02d32	74 0d		 je	 SHORT $LN515@monster

; 8516 : 			ATR_VCT_NO(a0) = 33;		//???Óé∑?Óïò??

  02d34	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02d37	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  02d38	5e		 pop	 esi
  02d39	5b		 pop	 ebx
  02d3a	c6 00 21	 mov	 BYTE PTR [eax], 33	; 00000021H
  02d3d	8b e5		 mov	 esp, ebp
  02d3f	5d		 pop	 ebp
  02d40	c3		 ret	 0
$LN515@monster:

; 8517 : 			break;
; 8518 : 		}
; 8519 : 		//???????
; 8520 : 		//?ÓúäÓç∫????
; 8521 : 		if (ATR_HIT(a0) >= 10000 && ATR_HIT(a0) < 10100){

  02d41	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  02d47	2d 10 27 00 00	 sub	 eax, 10000		; 00002710H
  02d4c	83 f8 63	 cmp	 eax, 99			; 00000063H
  02d4f	0f 87 f4 41 00
	00		 ja	 $LN1058@monster

; 8522 : 			//??????
; 8523 : 			a1 = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  02d55	68 60 02 00 00	 push	 608			; 00000260H
  02d5a	6a 65		 push	 101			; 00000065H
  02d5c	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  02d61	8b d8		 mov	 ebx, eax
  02d63	83 c4 08	 add	 esp, 8
  02d66	89 5d ec	 mov	 DWORD PTR _a1$18$[ebp], ebx

; 8524 : 			if (a1 == NULL){

  02d69	85 db		 test	 ebx, ebx
  02d6b	0f 84 6d f9 ff
	ff		 je	 $LN1260@monster

; 8525 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8526 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 8527 : 				return;
; 8528 : 			}
; 8529 : 			/* ÓçØ??? */
; 8530 : 			switch (ATR_LONG_WORK(0, a0)){

  02d71	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02d74	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  02d7a	83 e8 00	 sub	 eax, 0
  02d7d	74 18		 je	 SHORT $LN518@monster
  02d7f	83 e8 01	 sub	 eax, 1
  02d82	74 0c		 je	 SHORT $LN519@monster
  02d84	83 e8 01	 sub	 eax, 1
  02d87	75 0e		 jne	 SHORT $LN518@monster

; 8537 : 			case 2:		//Óí∑??
; 8538 : 				ATR_NAME(a1) = stone_shadow;

  02d89	b8 00 00 00 00	 mov	 eax, OFFSET ?stone_shadow@@YAXPAUaction@@@Z ; stone_shadow

; 8539 : 				break;

  02d8e	eb 0c		 jmp	 SHORT $LN30@monster
$LN519@monster:

; 8531 : 			case 0:		//?
; 8532 : 				ATR_NAME(a1) = bow;
; 8533 : 				break;
; 8534 : 			case 1:		//???
; 8535 : 				ATR_NAME(a1) = axe_shadow;

  02d90	b8 00 00 00 00	 mov	 eax, OFFSET ?axe_shadow@@YAXPAUaction@@@Z ; axe_shadow

; 8536 : 				break;

  02d95	eb 05		 jmp	 SHORT $LN30@monster
$LN518@monster:

; 8540 : 			default:
; 8541 : 				ATR_NAME(a1) = bow;
; 8542 : 			}
; 8543 : 			/* Óù∏Óçï?ÓìèÓôö */
; 8544 : 			ATR_DISP_PRIO(a1) = D_PRIO_MISSILE;

  02d97	b8 00 00 00 00	 mov	 eax, OFFSET ?bow@@YAXPAUaction@@@Z ; bow
$LN30@monster:
  02d9c	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  02d9f	c6 43 15 56	 mov	 BYTE PTR [ebx+21], 86	; 00000056H

; 8545 : 			/* ?????Óú±? */
; 8546 : #ifdef _SHOOTCHESTNUT	// Syu ADD ÂÆ†ÊäÄÔºö‰∏¢Ê†óÂ≠ê
; 8547 : 			if (ShooterNum == 101578)

  02da3	81 3d 00 00 00
	00 ca 8c 01 00	 cmp	 DWORD PTR ?ShooterNum@@3HA, 101578 ; ShooterNum, 00018ccaH
  02dad	75 07		 jne	 SHORT $LN522@monster

; 8548 : 				ATR_CHR_NO(a1) = 27001;

  02daf	b8 79 69 00 00	 mov	 eax, 27001		; 00006979H
  02db4	eb 10		 jmp	 SHORT $LN523@monster
$LN522@monster:

; 8549 : 			else
; 8550 : 				ATR_CHR_NO(a1) = CG_ARROW_00 + ATR_CRS(a0) / 2 + 20;

  02db6	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  02dbc	99		 cdq
  02dbd	2b c2		 sub	 eax, edx
  02dbf	d1 f8		 sar	 eax, 1
  02dc1	05 32 64 00 00	 add	 eax, 25650		; 00006432H
$LN523@monster:

; 8551 : #else
; 8552 : 			ATR_CHR_NO(a1) = CG_ARROW_00 + ATR_CRS(a0) / 2 + 20;
; 8553 : #endif
; 8554 : 			/* ???Óñ∫ */
; 8555 : 			ATR_CHR_ANG(a1) = ATR_CHR_ANG(a0);

  02dc6	89 83 44 01 00
	00		 mov	 DWORD PTR [ebx+324], eax
  02dcc	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  02dd2	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax

; 8556 : 			ATR_BODY_WORK(0, a1) = ATR_BODY_WORK(0, a0);		//Óò©?????

  02dd8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02ddb	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]

; 8557 : 			ATR_BODY_WORK(1, a1) = a0;		//ÓúäÓç∫?????
; 8558 : 			ATR_ATTACK_POW(0, a1) = ATR_ATTACK_POW(0, a0);		//???
; 8559 : 			ATR_ATTACK_PET_POW(0, a1) = ATR_ATTACK_PET_POW(0, a0);		//???
; 8560 : 			ATR_ATTACK_KIND(0, a1) = ATR_ATTACK_KIND(0, a0);		//?????
; 8561 : 			ATR_H_POS(a1) = ATR_H_POS(a0);
; 8562 : 			ATR_V_POS(a1) = ATR_V_POS(a0);
; 8563 : 			ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];
; 8564 : 			ATR_SPD(a1) = 32;
; 8565 : 			gemini(a1);

  02dde	53		 push	 ebx
  02ddf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02de2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  02de5	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02de8	89 78 08	 mov	 DWORD PTR [eax+8], edi
  02deb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02dee	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  02df1	8b 80 b0 00 00
	00		 mov	 eax, DWORD PTR [eax+176]
  02df7	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax
  02dfd	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02e00	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  02e03	8b 80 d4 01 00
	00		 mov	 eax, DWORD PTR [eax+468]
  02e09	89 81 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], eax
  02e0f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02e12	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  02e15	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  02e18	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  02e1b	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  02e1e	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  02e21	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  02e24	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
  02e27	8b 83 54 01 00
	00		 mov	 eax, DWORD PTR [ebx+340]
  02e2d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  02e34	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  02e3a	c7 83 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [ebx+308], 32	; 00000020H
  02e44	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8566 : 			gemini(a1);

  02e49	53		 push	 ebx
  02e4a	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8567 : 			gemini(a1);

  02e4f	53		 push	 ebx
  02e50	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8568 : 			ATR_BODY_CNT(a1) = 0;

  02e55	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 8569 : 			ATR_COUNTER_FLG(a1) = ATR_CRS(a0);		//Óò©?????????????
; 8570 : 			p_missile[0] = a1;
; 8571 : 			p_missile[1] = NULL;
; 8572 : 
; 8573 : 			//????
; 8574 : 			a2 = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  02e58	68 60 02 00 00	 push	 608			; 00000260H
  02e5d	6a 65		 push	 101			; 00000065H
  02e5f	c6 40 54 00	 mov	 BYTE PTR [eax+84], 0
  02e63	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  02e66	8a 87 38 01 00
	00		 mov	 al, BYTE PTR [edi+312]
  02e6c	88 81 0c 01 00
	00		 mov	 BYTE PTR [ecx+268], al
  02e72	89 1d 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, ebx
  02e78	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0
  02e82	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  02e87	8b f0		 mov	 esi, eax
  02e89	83 c4 14	 add	 esp, 20			; 00000014H

; 8575 : 			if (a2 == NULL){

  02e8c	85 f6		 test	 esi, esi
  02e8e	0f 84 4a f8 ff
	ff		 je	 $LN1260@monster

; 8576 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8577 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 8578 : 				return;
; 8579 : 			}
; 8580 : 			/* ÓçØ??? */
; 8581 : 			switch (ATR_LONG_WORK(0, a0)){

  02e94	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  02e97	8b 80 34 01 00
	00		 mov	 eax, DWORD PTR [eax+308]
  02e9d	83 e8 00	 sub	 eax, 0
  02ea0	74 18		 je	 SHORT $LN525@monster
  02ea2	83 e8 01	 sub	 eax, 1
  02ea5	74 0c		 je	 SHORT $LN526@monster
  02ea7	83 e8 01	 sub	 eax, 1
  02eaa	75 0e		 jne	 SHORT $LN525@monster

; 8588 : 			case 2:		//Óí∑??
; 8589 : 				ATR_NAME(a2) = stone;

  02eac	b8 00 00 00 00	 mov	 eax, OFFSET ?stone@@YAXPAUaction@@@Z ; stone

; 8590 : 				break;

  02eb1	eb 0c		 jmp	 SHORT $LN32@monster
$LN526@monster:

; 8582 : 			case 0:		//?
; 8583 : 				ATR_NAME(a2) = stick_bow;
; 8584 : 				break;
; 8585 : 			case 1:		//???
; 8586 : 				ATR_NAME(a2) = axe;

  02eb3	b8 00 00 00 00	 mov	 eax, OFFSET ?axe@@YAXPAUaction@@@Z ; axe

; 8587 : 				break;

  02eb8	eb 05		 jmp	 SHORT $LN32@monster
$LN525@monster:

; 8591 : 			default:
; 8592 : 				ATR_NAME(a2) = stick_bow;
; 8593 : 			}
; 8594 : 			/* Óù∏Óçï?ÓìèÓôö */
; 8595 : 			ATR_DISP_PRIO(a2) = D_PRIO_MISSILE;

  02eba	b8 00 00 00 00	 mov	 eax, OFFSET ?stick_bow@@YAXPAUaction@@@Z ; stick_bow
$LN32@monster:
  02ebf	89 46 08	 mov	 DWORD PTR [esi+8], eax
  02ec2	c6 46 15 56	 mov	 BYTE PTR [esi+21], 86	; 00000056H

; 8596 : 			/* ?????Óú±? */
; 8597 : #ifdef _SHOOTCHESTNUT	// Syu ADD ÂÆ†ÊäÄÔºö‰∏¢Ê†óÂ≠ê
; 8598 : 			//ÂºìÁöÑÈÉ®ÂàÜ
; 8599 : 			if (ShooterNum == 101578)

  02ec6	81 3d 00 00 00
	00 ca 8c 01 00	 cmp	 DWORD PTR ?ShooterNum@@3HA, 101578 ; ShooterNum, 00018ccaH
  02ed0	75 07		 jne	 SHORT $LN529@monster

; 8600 : 				ATR_CHR_NO(a2) = 26995;

  02ed2	b8 73 69 00 00	 mov	 eax, 26995		; 00006973H
  02ed7	eb 10		 jmp	 SHORT $LN530@monster
$LN529@monster:

; 8601 : 			else
; 8602 : 				ATR_CHR_NO(a2) = CG_ARROW_00 + ATR_CRS(a0) / 2;

  02ed9	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  02edf	99		 cdq
  02ee0	2b c2		 sub	 eax, edx
  02ee2	d1 f8		 sar	 eax, 1
  02ee4	05 1e 64 00 00	 add	 eax, 25630		; 0000641eH
$LN530@monster:

; 8603 : #else
; 8604 : 			ATR_CHR_NO(a2) = CG_ARROW_00 + ATR_CRS(a0) / 2;
; 8605 : #endif
; 8606 : 			//?????????
; 8607 : 			ATR_LONG_WORK(0, a1) = ATR_CHR_NO(a2);

  02ee9	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
  02eef	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]

; 8608 : 			ATR_BODY_WORK(2, a1) = a2;
; 8609 : 			/* ???Óñ∫ */
; 8610 : 			ATR_CHR_ANG(a2) = ATR_CHR_ANG(a1);
; 8611 : 			a3 = ATR_BODY_WORK(0, a2) = ATR_BODY_WORK(0, a1);		//Óò©?????
; 8612 : 			ATR_BODY_WORK(1, a2) = a1;		//?Óôπ?????
; 8613 : 			ATR_H_POS(a2) = ATR_H_POS(a1);
; 8614 : 			ATR_V_POS(a2) = ATR_V_POS(a1);
; 8615 : 
; 8616 : 
; 8617 : 			d6 = 0;		//Óöç????Óå´

  02ef2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _d6$3$[ebp], 0
  02ef9	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
  02eff	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02f02	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  02f05	8b 83 54 01 00
	00		 mov	 eax, DWORD PTR [ebx+340]
  02f0b	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  02f11	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02f14	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  02f17	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  02f1a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  02f1d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  02f20	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02f23	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  02f26	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  02f29	89 46 18	 mov	 DWORD PTR [esi+24], eax
  02f2c	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  02f2f	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 8618 : 			ATR_SPD(a2) = 32;

  02f32	c7 86 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+308], 32	; 00000020H

; 8619 : 			while (1)
; 8620 : 			{
; 8621 : 				d0 = ATR_H_POS(a3);

  02f3c	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  02f3f	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8622 : 				d1 = ATR_V_POS(a3);

  02f42	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  02f45	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8623 : 				radar(a2, &d0, &d1);	//????

  02f48	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  02f4b	50		 push	 eax
  02f4c	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02f4f	89 4d f0	 mov	 DWORD PTR _a3$2$[ebp], ecx
  02f52	50		 push	 eax
  02f53	56		 push	 esi
  02f54	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8624 : 				//???????
; 8625 : 				if (d1 <= 20)

  02f59	8b 4d f8	 mov	 ecx, DWORD PTR _d1$[ebp]
  02f5c	83 c4 0c	 add	 esp, 12			; 0000000cH
  02f5f	83 f9 14	 cmp	 ecx, 20			; 00000014H
  02f62	7e 4a		 jle	 SHORT $LN1102@monster
  02f64	8b 7d f0	 mov	 edi, DWORD PTR _a3$2$[ebp]
  02f67	33 db		 xor	 ebx, ebx
  02f69	0f 1f 80 00 00
	00 00		 npad	 7
$LL34@monster:

; 8626 : 					break;
; 8627 : 				ATR_CRS(a2) = d0;

  02f70	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 8628 : 				gemini(a2);

  02f73	56		 push	 esi
  02f74	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  02f7a	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  02f7f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 8629 : 				d6++;

  02f82	43		 inc	 ebx
  02f83	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  02f86	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  02f89	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  02f8c	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  02f8f	50		 push	 eax
  02f90	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  02f93	50		 push	 eax
  02f94	56		 push	 esi
  02f95	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar
  02f9a	8b 4d f8	 mov	 ecx, DWORD PTR _d1$[ebp]
  02f9d	83 c4 10	 add	 esp, 16			; 00000010H
  02fa0	83 f9 14	 cmp	 ecx, 20			; 00000014H
  02fa3	7f cb		 jg	 SHORT $LL34@monster
  02fa5	8b 7d 08	 mov	 edi, DWORD PTR _a0$[ebp]
  02fa8	89 5d f4	 mov	 DWORD PTR _d6$3$[ebp], ebx
  02fab	8b 5d ec	 mov	 ebx, DWORD PTR _a1$18$[ebp]
$LN1102@monster:

; 8630 : 			}
; 8631 : 			ATR_INT_WORK0(a2) = d1;		//Óò©?????ÓüïÓîº

  02fae	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  02fb1	89 88 24 01 00
	00		 mov	 DWORD PTR [eax+292], ecx

; 8632 : 			if (!(ATR_GROUP_FLG(a1) = d6))		//???????ÓüïÓîº

  02fb7	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02fba	8b 4d f4	 mov	 ecx, DWORD PTR _d6$3$[ebp]
  02fbd	88 48 5e	 mov	 BYTE PTR [eax+94], cl
  02fc0	84 c9		 test	 cl, cl
  02fc2	75 07		 jne	 SHORT $LN532@monster

; 8633 : 				ATR_GROUP_FLG(a1) = 1;

  02fc4	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  02fc7	c6 40 5e 01	 mov	 BYTE PTR [eax+94], 1
$LN532@monster:

; 8634 : 			d6 = d6 >> 1;

  02fcb	d1 f9		 sar	 ecx, 1

; 8635 : 			ATR_SPD(a2) = d6;		//

  02fcd	89 8e 34 01 00
	00		 mov	 DWORD PTR [esi+308], ecx

; 8636 : 			ATR_CRS(a2) = 0;		//

  02fd3	c7 86 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+312], 0

; 8637 : 			ATR_H_MINI(a2) = 0;		//

  02fdd	c7 86 3c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+316], 0

; 8638 : 			ATR_V_MINI(a2) = 0;		//

  02fe7	c7 86 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+320], 0

; 8639 : 			ATR_H_POS(a2) = ATR_H_POS(a1);		//?Óù≥ÓüúÓíú

  02ff1	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  02ff4	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 8640 : 			ATR_V_POS(a2) = ATR_V_POS(a1) - 28;		//

  02ff7	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  02ffa	83 e8 1c	 sub	 eax, 28			; 0000001cH
  02ffd	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 8641 : 
; 8642 : 			d0 = get_num();		//???ÓôÆÓéï?Óèù?

  03000	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  03005	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8643 : 			if (d0 != 255)

  03008	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0300d	0f 84 36 3f 00
	00		 je	 $LN1058@monster

; 8644 : 			{	//Óé∑??????
; 8645 : 				if (ATR_CHR_CNT(a0) >= 3)		//???Óúä

  03013	8b 87 5c 01 00
	00		 mov	 eax, DWORD PTR [edi+348]
  03019	83 f8 03	 cmp	 eax, 3
  0301c	7c 0b		 jl	 SHORT $LN534@monster

; 8646 : 					ATR_CHR_CNT(a0) -= 3;

  0301e	83 c0 fd	 add	 eax, -3			; fffffffdH
  03021	89 87 5c 01 00
	00		 mov	 DWORD PTR [edi+348], eax
  03027	eb 0a		 jmp	 SHORT $LN535@monster
$LN534@monster:

; 8647 : 				else
; 8648 : 					ATR_CHR_ACT_OLD(a0) = -1;		//???Óúä

  03029	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
$LN535@monster:

; 8649 : 				ATR_DAMAGE(a0)++;

  03033	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03036	ff 40 58	 inc	 DWORD PTR [eax+88]

; 8650 : 				ATR_FIRST_FLG(a0) = 0;

  03039	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0303c	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 8651 : 				ATR_BODY_WORK(0, a0) = p_party[d0];		//ÊîªÂáªÂØπË±°ËÆæÂÆö

  03043	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  03046	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  03049	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  03050	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 8652 : 				ATR_ATTACK_KIND(0, a0) = get_num();		//ÊîªÂáªÁßçÁ±ªËÆæÂÆö

  03053	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  03058	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0305b	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 8653 : 				ATR_ATTACK_POW(0, a0) = get_num();		//ÊîªÂáªÂäõËÆæÂÆö

  0305e	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  03063	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  03066	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax

; 8654 : 				if (BattleCmd[command_point] == 'p')
; 8655 : 					ATR_ATTACK_PET_POW(0, a0) = get_num();		//ÂÆ†Áâ©ÊîªÂáªÂäõËÆæÂÆö
; 8656 : 				else
; 8657 : 					LogToBattleError(BattleCmd, __LINE__);
; 8658 : 
; 8659 : 				//‰øÆÊ≠£ÊäÄËÉΩÁâπÊïà xiezi
; 8660 : #ifdef _ATTACK_EFFECT
; 8661 : 				if (BattleCmd[command_point] == 's')
; 8662 : 					ATR_LONG_WORK(0, a0) = get_num();	// ËÆ∞ÂΩïÁâπÊïàÁºñÂè∑
; 8663 : #endif
; 8664 : 			}
; 8665 : 		}
; 8666 : 		break;

  0306c	e9 c6 fb ff ff	 jmp	 $LN505@monster
$LN539@monster:

; 8667 : 	case 33:		//ÂºìÊîªÂáªÁªìÊùüÁ≠âÂæÖ
; 8668 : 		ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????
; 8669 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  03071	6a 00		 push	 0
  03073	6a 00		 push	 0
  03075	57		 push	 edi
  03076	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  03080	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 8670 : 		if (ATR_STIMER(a0) == ATR_DAMAGE(a0))

  03085	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  03088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0308b	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  0308f	3b 41 58	 cmp	 eax, DWORD PTR [ecx+88]
  03092	0f 85 b1 3e 00
	00		 jne	 $LN1058@monster

; 8671 : 		{	//?Óöç????
; 8672 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8673 : 			ATR_VCT_NO(a0) = 0;		//ÂæÖÊú∫
; 8674 : 		}
; 8675 : 		break;

  03098	e9 41 f6 ff ff	 jmp	 $LN1260@monster
$LN541@monster:

; 8676 : 	case 35:		//ÊçïËé∑ÁßªÂä®
; 8677 : 		ATR_SPD(a0) = 32;		//ÈÄüÂ∫¶

  0309d	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H

; 8678 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  030a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 8679 : 		d0 = ATR_H_POS(a1);

  030aa	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  030ad	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8680 : 		d1 = ATR_V_POS(a1);

  030b0	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  030b3	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8681 : 		radar(a0, &d0, &d1);	//????

  030b6	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  030b9	50		 push	 eax
  030ba	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  030bd	50		 push	 eax
  030be	57		 push	 edi
  030bf	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8682 : 		ATR_CRS(a0) = d0;		//??????

  030c4	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  030c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  030ca	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 8683 : 		if (ATR_FIRST_FLG(a0) == 0)

  030d0	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  030d3	80 b9 1e 01 00
	00 00		 cmp	 BYTE PTR [ecx+286], 0
  030da	75 17		 jne	 SHORT $LN542@monster

; 8684 : 		{	//???????
; 8685 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];

  030dc	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  030df	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  030e6	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 8686 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  030ec	c6 81 1e 01 00
	00 01		 mov	 BYTE PTR [ecx+286], 1
$LN542@monster:

; 8687 : 		}
; 8688 : 		if (d1 <= 32 * 2)

  030f3	83 7d f8 40	 cmp	 DWORD PTR _d1$[ebp], 64	; 00000040H
  030f7	0f 8f 5a 1b 00
	00		 jg	 $LN798@monster

; 8689 : 		{	//????
; 8690 : 			ATR_VCT_NO(a0)++;		//?Óüï?Óåø?

  030fd	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03100	fe 00		 inc	 BYTE PTR [eax]

; 8691 : 			ATR_FIRST_FLG(a0) = 0;		//????????

  03102	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03105	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 8692 : 		}

  0310c	e9 d9 22 00 00	 jmp	 $LN862@monster
$LN545@monster:

; 8693 : 		else
; 8694 : 			gemini(a0);		//?ÓôÆ
; 8695 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 8696 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 8697 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 8698 : 		break;
; 8699 : 	case 36:		//Óüô??Óåø
; 8700 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 8701 : 		if (ATR_FIRST_FLG(a0) == 0)

  03111	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  03118	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0311b	75 4a		 jne	 SHORT $LN546@monster

; 8702 : 		{	//???????
; 8703 : 			ATR_HIT(a0) = 0;				//?????????

  0311d	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0

; 8704 : 			d0 = ATR_H_POS(a1);				//Óò©?Óüµ??

  03127	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0312a	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8705 : 			d1 = ATR_V_POS(a1);

  0312d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  03130	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8706 : 			radar(a0, &d0, &d1);	//????

  03133	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  03136	50		 push	 eax
  03137	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  0313a	50		 push	 eax
  0313b	57		 push	 edi
  0313c	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8707 : 			ATR_CRS(a0) = d0;		//???ÓüïÓîº

  03141	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  03144	83 c4 0c	 add	 esp, 12			; 0000000cH
  03147	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 8708 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];		/* ????? */

  0314d	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  03150	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  03157	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 8709 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  0315d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03160	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
$LN546@monster:

; 8710 : 		}
; 8711 : 		ATR_CHR_ACT(a0) = ANIM_ATTACK;		//?????????
; 8712 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  03167	6a 01		 push	 1
  03169	6a 00		 push	 0
  0316b	57		 push	 edi
  0316c	c7 87 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+332], 0
  03176	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0317b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0317e	85 c0		 test	 eax, eax
  03180	74 1d		 je	 SHORT $LN547@monster

; 8713 : 		{	//?????Óé∑???
; 8714 : 			ATR_VCT_NO(a0)++;		//????Óïò??

  03182	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03185	fe 00		 inc	 BYTE PTR [eax]

; 8715 : 			ATR_FIRST_FLG(a0) = 0;		//????????

  03187	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0318a	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 8716 : 			ATR_STIMER(a0) = 60;

  03191	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03194	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03195	5e		 pop	 esi
  03196	5b		 pop	 ebx
  03197	c6 40 01 3c	 mov	 BYTE PTR [eax+1], 60	; 0000003cH
  0319b	8b e5		 mov	 esp, ebp
  0319d	5d		 pop	 ebp
  0319e	c3		 ret	 0
$LN547@monster:

; 8717 : 			break;
; 8718 : 		}
; 8719 : 		//???????
; 8720 : 		if (ATR_HIT(a0) != 0 && ATR_HIT(a0) < 10100)

  0319f	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  031a5	85 c0		 test	 eax, eax
  031a7	0f 84 9c 3d 00
	00		 je	 $LN1058@monster
  031ad	3d 74 27 00 00	 cmp	 eax, 10100		; 00002774H
  031b2	0f 8d 91 3d 00
	00		 jge	 $LN1058@monster

; 8721 : 		{
; 8722 : 			//?????
; 8723 : 			play_damage(ATR_HIT(a0), ATR_H_POS(a0));

  031b8	ff 77 18	 push	 DWORD PTR [edi+24]
  031bb	50		 push	 eax
  031bc	e8 00 00 00 00	 call	 ?play_damage@@YAXHH@Z	; play_damage

; 8724 : 			//?ÓüïÓù∏Óçï
; 8725 : 			set_damage_num(a0, 5, -64);

  031c1	6a c0		 push	 -64			; ffffffc0H
  031c3	6a 05		 push	 5
  031c5	57		 push	 edi
  031c6	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 8726 : 			//??????Óòø?
; 8727 : 			ATR_VCT_NO(a1) = 45;

  031cb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  031ce	83 c4 14	 add	 esp, 20			; 00000014H
  031d1	c6 00 2d	 mov	 BYTE PTR [eax], 45	; 0000002dH

; 8728 : 			//??Óéî???????
; 8729 : 			ATR_BODY_WORK(0, a1) = a0;

  031d4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  031d7	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 8730 : 			//?ÓôÆÓî≤Óôö
; 8731 : 			ATR_SPD(a1) = ATR_SPD(a0) = 8;

  031da	c7 87 34 01 00
	00 08 00 00 00	 mov	 DWORD PTR [edi+308], 8
  031e4	c7 86 34 01 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+308], 8

; 8732 : 			//?????????
; 8733 : 			ATR_HIT(a0) = 0;

  031ee	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0
  031f8	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  031f9	5e		 pop	 esi
  031fa	5b		 pop	 ebx
  031fb	8b e5		 mov	 esp, ebp
  031fd	5d		 pop	 ebp
  031fe	c3		 ret	 0
$LN549@monster:

; 8734 : 		}
; 8735 : 		break;
; 8736 : 	case 37:		//????Óïò?
; 8737 : 		if (ATR_STIMER(a0))

  031ff	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  03202	84 c0		 test	 al, al
  03204	74 0c		 je	 SHORT $LN550@monster
$LN1263@monster:
  03206	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03207	fe c8		 dec	 al
  03209	5e		 pop	 esi
  0320a	88 42 01	 mov	 BYTE PTR [edx+1], al
  0320d	5b		 pop	 ebx
  0320e	8b e5		 mov	 esp, ebp
  03210	5d		 pop	 ebp
  03211	c3		 ret	 0
$LN550@monster:
  03212	5f		 pop	 edi

; 8738 : 		{
; 8739 : 			ATR_STIMER(a0)--;
; 8740 : 			break;
; 8741 : 		}
; 8742 : 		ATR_VCT_NO(a0)++;		//?????

  03213	fe c1		 inc	 cl

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03215	5e		 pop	 esi
  03216	88 0a		 mov	 BYTE PTR [edx], cl
  03218	5b		 pop	 ebx
  03219	8b e5		 mov	 esp, ebp
  0321b	5d		 pop	 ebp
  0321c	c3		 ret	 0
$LN551@monster:

; 8743 : 		break;
; 8744 : 	case 38:		//????
; 8745 : 		d0 = ATR_INT_WORK0(a0);

  0321d	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  03223	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8746 : 		d1 = ATR_INT_WORK1(a0);

  03226	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  0322c	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8747 : 		radar(a0, &d0, &d1);	//????

  0322f	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  03232	50		 push	 eax
  03233	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  03236	50		 push	 eax
  03237	57		 push	 edi
  03238	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8748 : 		ATR_CRS(a0) = d0;		//??????

  0323d	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 8749 : 		gemini(a0);		//?ÓôÆ

  03240	57		 push	 edi
  03241	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  03247	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8750 : 		if (ATR_FIRST_FLG(a0) == 0)

  0324c	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0324f	83 c4 10	 add	 esp, 16			; 00000010H
  03252	80 b9 1e 01 00
	00 00		 cmp	 BYTE PTR [ecx+286], 0
  03259	75 17		 jne	 SHORT $LN552@monster

; 8751 : 		{	//???????
; 8752 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];

  0325b	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  0325e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  03265	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 8753 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  0326b	c6 81 1e 01 00
	00 01		 mov	 BYTE PTR [ecx+286], 1
$LN552@monster:

; 8754 : 		}
; 8755 : 		if (d1 <= (ATR_SPD(a0) >> 2))

  03272	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  03278	c1 f8 02	 sar	 eax, 2
  0327b	39 45 f8	 cmp	 DWORD PTR _d1$[ebp], eax
  0327e	0f 8f 97 00 00
	00		 jg	 $LN558@monster

; 8756 : 		{	//????
; 8757 : 			if (ATR_GROUP_FLG(a0) == 0)

  03284	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  03287	8a 41 5e	 mov	 al, BYTE PTR [ecx+94]
  0328a	84 c0		 test	 al, al
  0328c	75 0c		 jne	 SHORT $LN554@monster

; 8758 : 				ATR_CHR_ANG(a0) = 3;

  0328e	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  03298	eb 0e		 jmp	 SHORT $LN556@monster
$LN554@monster:

; 8759 : 			else if (ATR_GROUP_FLG(a0) == 1)

  0329a	3c 01		 cmp	 al, 1
  0329c	75 0a		 jne	 SHORT $LN556@monster

; 8760 : 				ATR_CHR_ANG(a0) = 7;

  0329e	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN556@monster:

; 8761 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 8762 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 8763 : 				ATR_CHR_ANG(a0) = 5;
; 8764 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 8765 : 				ATR_CHR_ANG(a0) = 1;
; 8766 : #endif
; 8767 : 			ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  032a8	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  032ae	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  032b5	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 8768 : 			ATR_H_POS(a0) = ATR_INT_WORK0(a0);		//?Óù≥ÓüúÓíú

  032bb	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  032c1	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 8769 : 			ATR_V_POS(a0) = ATR_INT_WORK1(a0);

  032c4	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  032ca	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 8770 : 			a1 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 8771 : 			if (ATR_ATTACK_KIND(0, a0) == 0)

  032cd	83 79 60 00	 cmp	 DWORD PTR [ecx+96], 0
  032d1	75 1f		 jne	 SHORT $LN557@monster

; 8772 : 			{	//ÓçßÓõ≤??
; 8773 : 				if (ATR_VCT_NO(a1) == 45)

  032d3	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  032d6	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  032d9	80 38 2d	 cmp	 BYTE PTR [eax], 45	; 0000002dH
  032dc	75 0f		 jne	 SHORT $LN559@monster

; 8774 : 				{	//?????ÓñäÓèù??
; 8775 : 					ATR_VCT_NO(a0) = 40;		//ÓçßÓõ≤????????

  032de	c6 01 28	 mov	 BYTE PTR [ecx], 40	; 00000028H

; 8776 : 					ATR_DAMAGE(a0) = 0;		//?????

  032e1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  032e4	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 8777 : 				}

  032eb	eb 2e		 jmp	 SHORT $LN558@monster
$LN559@monster:

; 8778 : 				else
; 8779 : 					ATR_VCT_NO(a0) = 42;		//ÓçßÓõ≤?

  032ed	c6 01 2a	 mov	 BYTE PTR [ecx], 42	; 0000002aH

; 8780 : 			}

  032f0	eb 29		 jmp	 SHORT $LN558@monster
$LN557@monster:

; 8781 : 			else
; 8782 : 			{
; 8783 : 				ATR_VCT_NO(a0) = 44;		//Óíï??
; 8784 : 				//Óíï?Óù∏Óçï
; 8785 : 				set_damage_num(a0, 7, -64);

  032f2	6a c0		 push	 -64			; ffffffc0H
  032f4	6a 07		 push	 7
  032f6	57		 push	 edi
  032f7	c6 01 2c	 mov	 BYTE PTR [ecx], 44	; 0000002cH
  032fa	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 8786 : 				ATR_STIMER(a0) = 255;

  032ff	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 8787 : 				ATR_DAMAGE(a0) = t_music_bgm_no;		//???Óú±?Óï§Óùç
; 8788 : 				play_bgm(0);		//???????????

  03302	6a 00		 push	 0
  03304	c6 40 01 ff	 mov	 BYTE PTR [eax+1], 255	; 000000ffH
  03308	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0330b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t_music_bgm_no@@3HA ; t_music_bgm_no
  03310	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  03313	e8 00 00 00 00	 call	 ?play_bgm@@YAHH@Z	; play_bgm
  03318	83 c4 10	 add	 esp, 16			; 00000010H
$LN558@monster:

; 8789 : 			}
; 8790 : 		}
; 8791 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????
; 8792 : 		if (ATR_ATTACK_KIND(0, a0) == 0 && ATR_VCT_NO(a1) == 45)

  0331b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0331e	83 78 60 00	 cmp	 DWORD PTR [eax+96], 0
  03322	75 2b		 jne	 SHORT $LN562@monster
  03324	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  03327	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0332a	80 38 2d	 cmp	 BYTE PTR [eax], 45	; 0000002dH
  0332d	75 20		 jne	 SHORT $LN562@monster

; 8793 : 		{	//ÓçßÓõ≤??
; 8794 : 			if (!Rnd(0, 100))

  0332f	6a 64		 push	 100			; 00000064H
  03331	6a 00		 push	 0
  03333	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  03338	83 c4 08	 add	 esp, 8
  0333b	85 c0		 test	 eax, eax
  0333d	75 10		 jne	 SHORT $LN562@monster

; 8795 : 			{	//Óô¶??????
; 8796 : 				ATR_VCT_NO(a0) = 40;		//ÓçßÓõ≤????????

  0333f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03342	c6 00 28	 mov	 BYTE PTR [eax], 40	; 00000028H

; 8797 : 				ATR_DAMAGE(a0) = 1;		//?????

  03345	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03348	c7 40 58 01 00
	00 00		 mov	 DWORD PTR [eax+88], 1
$LN562@monster:

; 8798 : 			}
; 8799 : 		}
; 8800 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 8801 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0334f	6a 00		 push	 0
  03351	6a 00		 push	 0
  03353	57		 push	 edi
  03354	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  0335e	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  03363	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8802 : 		if (ATR_SPD(a0) == 32)		//??????

  03366	83 bf 34 01 00
	00 20		 cmp	 DWORD PTR [edi+308], 32	; 00000020H
  0336d	0f 85 d6 3b 00
	00		 jne	 $LN1058@monster

; 8803 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  03373	6a 00		 push	 0
  03375	6a 00		 push	 0
  03377	57		 push	 edi
  03378	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0337d	83 c4 0c	 add	 esp, 12			; 0000000cH
  03380	5f		 pop	 edi
  03381	5e		 pop	 esi
  03382	5b		 pop	 ebx
  03383	8b e5		 mov	 esp, ebp
  03385	5d		 pop	 ebp
  03386	c3		 ret	 0
$LN564@monster:

; 8804 : 		break;
; 8805 : 	case 40:		//ÓçßÓõ≤???????
; 8806 : 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  03387	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 8807 : 		ATR_VCT_NO(a1)++;		//?????ÓñäÓèù
; 8808 : 		ATR_FIRST_FLG(a1) = 0;		//????????
; 8809 : 		//ÓçßÓõ≤Óù∏Óçï
; 8810 : 		set_damage_num(a0, 8, -64);

  0338a	6a c0		 push	 -64			; ffffffc0H
  0338c	6a 08		 push	 8
  0338e	57		 push	 edi
  0338f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  03392	fe 00		 inc	 BYTE PTR [eax]
  03394	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  03397	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  0339e	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 8811 : 		ATR_STIMER(a0) = 100;		//????????

  033a3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  033a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  033a9	c6 40 01 64	 mov	 BYTE PTR [eax+1], 100	; 00000064H

; 8812 : 		if (ATR_DAMAGE(a0) == 1)		//????

  033ad	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  033b0	83 79 58 01	 cmp	 DWORD PTR [ecx+88], 1
  033b4	75 12		 jne	 SHORT $LN565@monster

; 8813 : 			ATR_CHR_ANG(a0) = (ATR_CHR_ANG(a0) + 4) & 7;		//Óüµ?Óòø?

  033b6	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  033bc	83 e8 04	 sub	 eax, 4
  033bf	83 e0 07	 and	 eax, 7
  033c2	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
$LN565@monster:

; 8814 : 		ATR_VCT_NO(a0)++;		//ÓçßÓõ≤?????

  033c8	fe 01		 inc	 BYTE PTR [ecx]
  033ca	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  033cb	5e		 pop	 esi
  033cc	5b		 pop	 ebx
  033cd	8b e5		 mov	 esp, ebp
  033cf	5d		 pop	 ebp
  033d0	c3		 ret	 0
$LN566@monster:

; 8815 : 		break;
; 8816 : 	case 41:		//ÓçßÓõ≤????
; 8817 : 		if (!--ATR_STIMER(a0))

  033d1	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  033d5	75 38		 jne	 SHORT $LN567@monster

; 8818 : 		{
; 8819 : 			if (ATR_DAMAGE(a0) == 1)

  033d7	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  033da	83 78 58 01	 cmp	 DWORD PTR [eax+88], 1
  033de	75 26		 jne	 SHORT $LN569@monster

; 8820 : 			{		//????
; 8821 : 				ATR_VCT_NO(a0) = 38;		//????

  033e0	c6 00 26	 mov	 BYTE PTR [eax], 38	; 00000026H

; 8822 : 				ATR_CHR_ANG(a0) = (ATR_CHR_ANG(a0) + 4) & 7;		//Óüµ?Óòø?

  033e3	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  033e9	83 e8 04	 sub	 eax, 4
  033ec	83 e0 07	 and	 eax, 7
  033ef	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 8827 : 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  033f5	b8 04 00 00 00	 mov	 eax, 4
  033fa	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H

; 8828 : 		}

  03404	eb 0e		 jmp	 SHORT $LN568@monster
$LN569@monster:

; 8823 : 				ATR_SPD(a0) = 32;		//?????
; 8824 : 			}
; 8825 : 			else
; 8826 : 				ATR_VCT_NO(a0)++;		//ÓçßÓõ≤?

  03406	fe 00		 inc	 BYTE PTR [eax]

; 8827 : 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  03408	b8 04 00 00 00	 mov	 eax, 4

; 8828 : 		}

  0340d	eb 05		 jmp	 SHORT $LN568@monster
$LN567@monster:

; 8829 : 		else
; 8830 : 			ATR_CHR_ACT(a0) = ANIM_ANGRY;		//Â§Ç????????

  0340f	b8 08 00 00 00	 mov	 eax, 8
$LN568@monster:

; 8831 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  03414	6a 00		 push	 0
  03416	6a 00		 push	 0
  03418	57		 push	 edi
  03419	89 87 4c 01 00
	00		 mov	 DWORD PTR [edi+332], eax
  0341f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03424	83 c4 0c	 add	 esp, 12			; 0000000cH
  03427	5f		 pop	 edi
  03428	5e		 pop	 esi
  03429	5b		 pop	 ebx
  0342a	8b e5		 mov	 esp, ebp
  0342c	5d		 pop	 ebp
  0342d	c3		 ret	 0
$LN571@monster:

; 8832 : 		break;
; 8833 : 	case 42:		//Â§±Ë¥•
; 8834 : 		ATR_CHR_ACT(a0) = ANIM_STAND;		//ÂÅúÊ≠¢Âä®‰Ωú
; 8835 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0342e	6a 00		 push	 0
  03430	6a 00		 push	 0
  03432	57		 push	 edi
  03433	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  0343d	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 8836 : 		a1 = ATR_BODY_WORK(0, a0);		//ÂèñÂá∫ÊïåÊñπÊåáÊ†á
; 8837 : 		if (ATR_VCT_NO(a1) == 0)

  03442	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03445	83 c4 0c	 add	 esp, 12			; 0000000cH
  03448	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0344b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0344e	80 38 00	 cmp	 BYTE PTR [eax], 0
  03451	0f 85 f2 3a 00
	00		 jne	 $LN1058@monster

; 8838 : 		{	//?????Óô¶?ÓìÅ????
; 8839 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 8840 : 			ATR_VCT_NO(a0) = 0;		//Óïò??
; 8841 : 		}
; 8842 : 		break;

  03457	e9 82 f2 ff ff	 jmp	 $LN1260@monster
$LN573@monster:

; 8843 : 	case 44:		//ÊàêÂäü
; 8844 : 		if (!--ATR_STIMER(a0))

  0345c	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  03460	75 23		 jne	 SHORT $LN574@monster

; 8845 : 		{	//Êó∂Èó¥Âà∞
; 8846 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???

  03462	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  03467	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0346a	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  0346e	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 8847 : 			ATR_VCT_NO(a0) = 0;		//ÂæÖÊú∫

  03471	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03474	c6 00 00	 mov	 BYTE PTR [eax], 0

; 8848 : 			play_bgm(ATR_DAMAGE(a0));		//?????

  03477	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0347a	ff 70 58	 push	 DWORD PTR [eax+88]
  0347d	e8 00 00 00 00	 call	 ?play_bgm@@YAHH@Z	; play_bgm
  03482	83 c4 04	 add	 esp, 4
$LN574@monster:

; 8849 : 		}
; 8850 : 		ATR_CHR_ACT(a0) = ANIM_HAPPY;		//???????????
; 8851 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  03485	6a 00		 push	 0
  03487	6a 00		 push	 0
  03489	57		 push	 edi
  0348a	c7 87 4c 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+332], 7
  03494	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03499	83 c4 0c	 add	 esp, 12			; 0000000cH
  0349c	5f		 pop	 edi
  0349d	5e		 pop	 esi
  0349e	5b		 pop	 ebx
  0349f	8b e5		 mov	 esp, ebp
  034a1	5d		 pop	 ebp
  034a2	c3		 ret	 0
$LN575@monster:

; 8852 : 		break;
; 8853 : 	case 45:		//??????Óòø
; 8854 : 		a1 = ATR_BODY_WORK(0, a0);		//??Óéî????????

  034a3	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 8855 : 		if (ATR_VCT_NO(a1) == 38)

  034a6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  034a9	8a 00		 mov	 al, BYTE PTR [eax]
  034ab	3c 26		 cmp	 al, 38			; 00000026H
  034ad	75 31		 jne	 SHORT $LN576@monster

; 8856 : 		{	//??Óéî?????
; 8857 : 			d0 = ATR_H_POS(a1);				//Óò©?Óüµ??

  034af	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  034b2	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8858 : 			d1 = ATR_V_POS(a1);

  034b5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  034b8	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8859 : 			radar(a0, &d0, &d1);	//????

  034bb	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  034be	50		 push	 eax
  034bf	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  034c2	50		 push	 eax
  034c3	57		 push	 edi
  034c4	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8860 : 			ATR_CRS(a0) = d0;		//???ÓüïÓîº

  034c9	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 8861 : 			gemini(a0);

  034cc	57		 push	 edi
  034cd	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  034d3	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  034d8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  034db	83 c4 10	 add	 esp, 16			; 00000010H
  034de	8a 00		 mov	 al, BYTE PTR [eax]
$LN576@monster:

; 8862 : 		}
; 8863 : 		if (ATR_VCT_NO(a1) == 0)

  034e0	84 c0		 test	 al, al
  034e2	75 18		 jne	 SHORT $LN577@monster

; 8864 : 		{	//??Óéî?????
; 8865 : 			ATR_ATTRIB(a0) = ACT_ATR_HIDE;		//Óù∏Óçï??

  034e4	c7 87 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [edi+164], 2

; 8866 : 			ATR_NAME(a0) = NULL;

  034ee	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  034f5	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  034f6	5e		 pop	 esi
  034f7	5b		 pop	 ebx
  034f8	8b e5		 mov	 esp, ebp
  034fa	5d		 pop	 ebp
  034fb	c3		 ret	 0
$LN577@monster:

; 8867 : 			return;
; 8868 : 		}
; 8869 : 		ATR_CHR_ACT(a0) = ANIM_DAMAGE;		//???????????

  034fc	c7 87 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+332], 1

; 8870 : 		ATR_CHR_ANG(a0) = (ATR_CHR_ANG(a0) + 1) & 7;

  03506	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]

; 8871 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0350c	6a 00		 push	 0
  0350e	40		 inc	 eax
  0350f	83 e0 07	 and	 eax, 7
  03512	6a 00		 push	 0
  03514	57		 push	 edi
  03515	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  0351b	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03520	83 c4 0c	 add	 esp, 12			; 0000000cH
  03523	5f		 pop	 edi
  03524	5e		 pop	 esi
  03525	5b		 pop	 ebx
  03526	8b e5		 mov	 esp, ebp
  03528	5d		 pop	 ebp
  03529	c3		 ret	 0
$LN578@monster:

; 8872 : 		break;
; 8873 : 	case 46:		//??????????
; 8874 : 		d0 = ATR_INT_WORK0(a0);

  0352a	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  03530	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 8875 : 		d1 = ATR_INT_WORK1(a0);

  03533	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  03539	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 8876 : 		radar(a0, &d0, &d1);	//????

  0353c	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  0353f	50		 push	 eax
  03540	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  03543	50		 push	 eax
  03544	57		 push	 edi
  03545	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 8877 : 		ATR_CRS(a0) = d0;		//??????

  0354a	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  0354d	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 8878 : 		ATR_SPD(a0) = 16;
; 8879 : 		gemini(a0);		//?ÓôÆ

  03553	57		 push	 edi
  03554	c7 87 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [edi+308], 16	; 00000010H
  0355e	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 8880 : 		if (ATR_FIRST_FLG(a0) == 0)

  03563	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  03566	83 c4 10	 add	 esp, 16			; 00000010H
  03569	80 b9 1e 01 00
	00 00		 cmp	 BYTE PTR [ecx+286], 0
  03570	75 17		 jne	 SHORT $LN579@monster

; 8881 : 		{		//???????
; 8882 : 			ATR_CHR_ANG(a0) = crs_change_tbl[d0];

  03572	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  03575	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  0357c	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 8883 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  03582	c6 81 1e 01 00
	00 01		 mov	 BYTE PTR [ecx+286], 1
$LN579@monster:

; 8884 : 		}
; 8885 : 		if (d1 <= (ATR_SPD(a0) >> 2))

  03589	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  0358f	c1 f8 02	 sar	 eax, 2
  03592	39 45 f8	 cmp	 DWORD PTR _d1$[ebp], eax
  03595	0f 8f 9d 0a 00
	00		 jg	 $LN693@monster

; 8886 : 		{	//????
; 8887 : 			a1 = ATR_BODY_WORK(0, a0);		//??Óéî????????
; 8888 : 			if (ATR_GROUP_FLG(a0) == 0)

  0359b	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0359e	8a 41 5e	 mov	 al, BYTE PTR [ecx+94]
  035a1	84 c0		 test	 al, al
  035a3	75 0c		 jne	 SHORT $LN581@monster

; 8889 : 				ATR_CHR_ANG(a0) = 3;

  035a5	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  035af	eb 0e		 jmp	 SHORT $LN583@monster
$LN581@monster:

; 8890 : 			else if (ATR_GROUP_FLG(a0) == 1)

  035b1	3c 01		 cmp	 al, 1
  035b3	75 0a		 jne	 SHORT $LN583@monster

; 8891 : 				ATR_CHR_ANG(a0) = 7;

  035b5	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN583@monster:

; 8892 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 8893 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 8894 : 				ATR_CHR_ANG(a0) = 5;
; 8895 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 8896 : 				ATR_CHR_ANG(a0) = 1;
; 8897 : #endif
; 8898 : 			ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  035bf	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  035c5	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  035cc	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 8899 : 			ATR_H_POS(a0) = ATR_INT_WORK0(a0);		//?Óù≥ÓüúÓíú

  035d2	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  035d8	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 8900 : 			ATR_V_POS(a0) = ATR_INT_WORK1(a0);

  035db	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  035e1	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 8901 : 			ATR_VCT_NO(a0) = 0;		//Óïò??

  035e4	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 11396: 					a0mark[i] = 0;

  035e7	e9 4c 0a 00 00	 jmp	 $LN693@monster
$LN584@monster:

; 8902 : 		}
; 8903 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 8904 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 8905 : 		break;
; 8906 : 	case 50:		//ÓìñÓô¨ÓñäÓèùÓíï?
; 8907 : 		if (ATR_FIRST_FLG(a0) == 0)

  035ec	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  035f3	75 61		 jne	 SHORT $LN585@monster

; 8908 : 		{	//???????
; 8909 : 			ATR_SPD(a0) = 16;

  035f5	c7 87 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [edi+308], 16	; 00000010H

; 8910 : 			if (ATR_LIFE(a0) <= 0)

  035ff	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  03603	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  03606	7f 16		 jg	 SHORT $LN586@monster

; 8911 : 			{	//??????
; 8912 : 				if (ATR_GROUP_FLG(a0) == 0)		//????????

  03608	84 c0		 test	 al, al
  0360a	75 09		 jne	 SHORT $LN588@monster

; 8913 : 					//Óüµ????
; 8914 : 					ATR_CRS(a0) = crs_change_tbl2[7];

  0360c	0f b6 05 07 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+7
  03613	eb 34		 jmp	 SHORT $LN587@monster
$LN588@monster:

; 8915 : 				else
; 8916 : 					ATR_CRS(a0) = crs_change_tbl2[3];

  03615	0f b6 05 03 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+3

; 8917 : 			}

  0361c	eb 2b		 jmp	 SHORT $LN587@monster
$LN586@monster:

; 8918 : 			else
; 8919 : 			{
; 8920 : 				if (ATR_GROUP_FLG(a0) == 0)

  0361e	84 c0		 test	 al, al
  03620	75 0c		 jne	 SHORT $LN590@monster

; 8921 : 					ATR_CHR_ANG(a0) = 7;

  03622	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
  0362c	eb 0e		 jmp	 SHORT $LN592@monster
$LN590@monster:

; 8922 : 				else if (ATR_GROUP_FLG(a0) == 1)

  0362e	3c 01		 cmp	 al, 1
  03630	75 0a		 jne	 SHORT $LN592@monster

; 8923 : 					ATR_CHR_ANG(a0) = 3;

  03632	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
$LN592@monster:

; 8924 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 8925 : 				else if (ATR_GROUP_FLG(a0) == 2)
; 8926 : 					ATR_CHR_ANG(a0) = 1;
; 8927 : 				else if (ATR_GROUP_FLG(a0) == 3)	
; 8928 : 					ATR_CHR_ANG(a0) = 5;
; 8929 : #endif
; 8930 : 				ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  0363c	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  03642	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
$LN587@monster:

; 8931 : 			}
; 8932 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  03649	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  0364f	c6 82 1e 01 00
	00 01		 mov	 BYTE PTR [edx+286], 1
$LN585@monster:

; 8933 : 		}
; 8934 : 		gemini(a0);		//?ÓôÆ

  03656	57		 push	 edi
  03657	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  0365c	83 c4 04	 add	 esp, 4

; 8935 : 		if (ATR_LIFE(a0) > 0)

  0365f	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  03663	7e 17		 jle	 SHORT $LN593@monster

; 8936 : 		{		//Óíü?????
; 8937 : 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 8938 : 			pattern(a0, 1, ANM_LOOP);

  03665	6a 00		 push	 0
  03667	6a 01		 push	 1
  03669	57		 push	 edi
  0366a	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  03674	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  03679	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN593@monster:

; 8939 : 		}
; 8940 : 		if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT)

  0367c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  03681	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  03684	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  0368a	83 c0 6a	 add	 eax, 106		; 0000006aH
  0368d	3b c8		 cmp	 ecx, eax
  0368f	7f 09		 jg	 SHORT $LN595@monster
  03691	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  03694	0f 8d af 38 00
	00		 jge	 $LN1058@monster
$LN595@monster:

; 8941 : 		{	//?Ó°°???
; 8942 : 			ATR_NAME(a0) = NULL;

  0369a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 8943 : 			ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  036a1	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2

; 8944 : 			ATR_VCT_NO(a0) = VCT_NO_APPEAR;

  036a8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  036ab	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H

; 8945 : 			ATR_DAMAGE(p_master)++;		//ÓñäÓèù?Óëò

  036ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  036b3	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  036b6	ff 40 58	 inc	 DWORD PTR [eax+88]

; 8946 : 			if (ATR_DAMAGE(p_master) == ATR_BODY_CNT(p_master) && ATR_GUARD_FLG(a0) == 1)

  036b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  036be	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  036c1	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  036c5	39 41 58	 cmp	 DWORD PTR [ecx+88], eax
  036c8	0f 85 7b 38 00
	00		 jne	 $LN1058@monster
  036ce	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  036d1	80 b8 1c 01 00
	00 01		 cmp	 BYTE PTR [eax+284], 1
  036d8	0f 85 6b 38 00
	00		 jne	 $LN1058@monster
$LN1264@monster:
  036de	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  036df	5e		 pop	 esi
  036e0	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?action_inf@@3HA, 2 ; action_inf
  036ea	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?command_point@@3HA, 0
  036f4	5b		 pop	 ebx
  036f5	8b e5		 mov	 esp, ebp
  036f7	5d		 pop	 ebp
  036f8	c3		 ret	 0
$LN597@monster:

; 8947 : 			{	//ACTION_INFÓìÜÓòã??
; 8948 : 				action_inf = 2;
; 8949 : 				command_point = 0;		//?????Óí∂????????
; 8950 : 			}
; 8951 : 		}
; 8952 : 		break;
; 8953 : 	case 52:		//ÊàòÊñóÈÄÉË∑ëÂ§±Ë¥•(Âä®ÁîªÂä†ÈÄü)
; 8954 : 		if (ATR_FIRST_FLG(a0) == 0)

  036f9	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  03700	0f 85 96 00 00
	00		 jne	 $LN598@monster

; 8955 : 		{	//???????
; 8956 : 			if (ATR_LIFE(a0) <= 0)

  03706	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  0370a	7f 3a		 jg	 SHORT $LN599@monster

; 8957 : 			{	//??????
; 8958 : 				//???Óèù?Óöº?ÔºØÔº´??
; 8959 : 				if (ATR_PET_OK(a0))

  0370c	80 ba 20 01 00
	00 00		 cmp	 BYTE PTR [edx+288], 0
  03713	74 27		 je	 SHORT $LN601@monster

; 8960 : 				{
; 8961 : 					a2 = p_party[ATR_PLACE_NO(a0) + 5];		//???Óèù?????

  03715	0f b6 82 1f 01
	00 00		 movzx	 eax, BYTE PTR [edx+287]
  0371c	8b 0c 85 14 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4+20]

; 8962 : 					if (ATR_NAME(a2) != NULL)

  03723	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  03727	74 13		 je	 SHORT $LN601@monster

; 8963 : 					{
; 8964 : 						ATR_VCT_NO(a2) = 50;		//????Óô¶??

  03729	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0372c	c6 00 32	 mov	 BYTE PTR [eax], 50	; 00000032H

; 8965 : 						ATR_FIRST_FLG(a2) = 0;		//????????

  0372f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  03732	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  03739	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN601@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0373c	5f		 pop	 edi
  0373d	5e		 pop	 esi
  0373e	c6 02 32	 mov	 BYTE PTR [edx], 50	; 00000032H
  03741	5b		 pop	 ebx
  03742	8b e5		 mov	 esp, ebp
  03744	5d		 pop	 ebp
  03745	c3		 ret	 0
$LN599@monster:

; 8966 : 					}
; 8967 : 				}
; 8968 : 				ATR_VCT_NO(a0) = 50;		//ÈÄÉË∑ëÊàêÂäü
; 8969 : 				break;
; 8970 : 			}
; 8971 : 			//ÊòæÁ§∫ÈÄÉË∑ë
; 8972 : 			set_damage_num(a0, 9, -64);

  03746	6a c0		 push	 -64			; ffffffc0H
  03748	6a 09		 push	 9
  0374a	57		 push	 edi
  0374b	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 8973 : 			if (ATR_GROUP_FLG(a0) == 0)

  03750	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  03753	83 c4 0c	 add	 esp, 12			; 0000000cH
  03756	8a 41 5e	 mov	 al, BYTE PTR [ecx+94]
  03759	84 c0		 test	 al, al
  0375b	75 0c		 jne	 SHORT $LN602@monster

; 8974 : 				ATR_CHR_ANG(a0) = 7;

  0375d	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
  03767	eb 0e		 jmp	 SHORT $LN604@monster
$LN602@monster:

; 8975 : 			else if (ATR_GROUP_FLG(a0) == 1)

  03769	3c 01		 cmp	 al, 1
  0376b	75 0a		 jne	 SHORT $LN604@monster

; 8976 : 				ATR_CHR_ANG(a0) = 3;

  0376d	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
$LN604@monster:

; 8977 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 8978 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 8979 : 				ATR_CHR_ANG(a0) = 1;
; 8980 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 8981 : 				ATR_CHR_ANG(a0) = 5;
; 8982 : #endif
; 8983 : 			ATR_STIMER(a0) = 12;		//???????

  03777	c6 41 01 0c	 mov	 BYTE PTR [ecx+1], 12	; 0000000cH

; 8984 : 			ATR_COUNTER_FLG(a0) = 0;		//

  0377b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0377e	c6 80 0c 01 00
	00 00		 mov	 BYTE PTR [eax+268], 0

; 8985 : 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  03785	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 8986 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  0378f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03792	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  03799	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN598@monster:

; 8987 : 		}
; 8988 : 		pattern(a0, ATR_STIMER(a0), ANM_LOOP);

  0379c	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  037a0	6a 00		 push	 0
  037a2	50		 push	 eax
  037a3	57		 push	 edi
  037a4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 8989 : 		//???????Óî≤ÓôöÓüâ???
; 8990 : 		ATR_COUNTER_FLG(a0) = (ATR_COUNTER_FLG(a0) + 1) & 7;

  037a9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  037ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  037af	8a 81 0c 01 00
	00		 mov	 al, BYTE PTR [ecx+268]
  037b5	fe c0		 inc	 al
  037b7	24 07		 and	 al, 7
  037b9	88 81 0c 01 00
	00		 mov	 BYTE PTR [ecx+268], al

; 8991 : 		if (!ATR_COUNTER_FLG(a0))

  037bf	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  037c2	80 b8 0c 01 00
	00 00		 cmp	 BYTE PTR [eax+268], 0
  037c9	0f 85 7a 37 00
	00		 jne	 $LN1058@monster

; 8992 : 		{
; 8993 : 			ATR_STIMER(a0)--;

  037cf	fe 48 01	 dec	 BYTE PTR [eax+1]

; 8994 : 			if (ATR_STIMER(a0) == 1)

  037d2	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  037d5	80 78 01 01	 cmp	 BYTE PTR [eax+1], 1
  037d9	0f 85 6a 37 00
	00		 jne	 $LN1058@monster

; 8995 : 			{	//????Óî≤??
; 8996 : 				if (ATR_ATTACK_KIND(0, a0) == 0)		//ÓñäÓèùÓçßÓõ≤??

  037df	83 78 60 00	 cmp	 DWORD PTR [eax+96], 0
  037e3	75 09		 jne	 SHORT $LN607@monster

; 8997 : 					ATR_VCT_NO(a0)++;		//ÓñäÓèùÓçßÓõ≤?

  037e5	fe 00		 inc	 BYTE PTR [eax]
  037e7	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  037e8	5e		 pop	 esi
  037e9	5b		 pop	 ebx
  037ea	8b e5		 mov	 esp, ebp
  037ec	5d		 pop	 ebp
  037ed	c3		 ret	 0
$LN607@monster:

; 8998 : 				else
; 8999 : 				{
; 9000 : 					ATR_VCT_NO(a0) = 50;		//ÓñäÓèùÓíï??

  037ee	c6 00 32	 mov	 BYTE PTR [eax], 50	; 00000032H

; 9001 : 					ATR_FIRST_FLG(a0) = 0;		//????????

  037f1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  037f4	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 9002 : 					//???Óèù?Óöº?ÔºØÔº´??
; 9003 : 					if (ATR_PET_OK(a0))

  037fb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  037fe	80 b8 20 01 00
	00 00		 cmp	 BYTE PTR [eax+288], 0
  03805	0f 84 3e 37 00
	00		 je	 $LN1058@monster

; 9004 : 					{
; 9005 : 						a2 = p_party[ATR_PLACE_NO(a0) + 5];		//???Óèù?????

  0380b	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]
  03812	8b 0c 85 14 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4+20]

; 9006 : 						if (ATR_NAME(a2) != NULL)

  03819	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0381d	0f 84 26 37 00
	00		 je	 $LN1058@monster

; 9007 : 						{
; 9008 : 							ATR_VCT_NO(a2) = 50;		//????Óô¶??

  03823	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  03826	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03827	5e		 pop	 esi
  03828	5b		 pop	 ebx
  03829	c6 00 32	 mov	 BYTE PTR [eax], 50	; 00000032H
  0382c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0382f	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  03836	8b e5		 mov	 esp, ebp
  03838	5d		 pop	 ebp
  03839	c3		 ret	 0
$LN611@monster:

; 9009 : 							ATR_FIRST_FLG(a2) = 0;		//????????
; 9010 : 						}
; 9011 : 					}
; 9012 : 				}
; 9013 : 			}
; 9014 : 		}
; 9015 : 		break;
; 9016 : 	case 53:		//ÊàòÊñóÈÄÉË∑ëÂ§±Ë¥•(Âä®ÁîªÂáèÈÄü)
; 9017 : 		pattern(a0, ATR_STIMER(a0), ANM_LOOP);

  0383a	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0383e	6a 00		 push	 0
  03840	50		 push	 eax
  03841	57		 push	 edi
  03842	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 9018 : 		//???????Óî≤ÓôöÓüâ???
; 9019 : 		ATR_COUNTER_FLG(a0) = (ATR_COUNTER_FLG(a0) + 1) & 7;

  03847	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0384a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0384d	8a 81 0c 01 00
	00		 mov	 al, BYTE PTR [ecx+268]
  03853	fe c0		 inc	 al
  03855	24 07		 and	 al, 7
  03857	88 81 0c 01 00
	00		 mov	 BYTE PTR [ecx+268], al

; 9020 : 		if (!ATR_COUNTER_FLG(a0))

  0385d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03860	80 b8 0c 01 00
	00 00		 cmp	 BYTE PTR [eax+268], 0
  03867	0f 85 dc 36 00
	00		 jne	 $LN1058@monster

; 9021 : 		{
; 9022 : 			ATR_STIMER(a0)++;

  0386d	fe 40 01	 inc	 BYTE PTR [eax+1]

; 9023 : 			if (ATR_STIMER(a0) == 12)

  03870	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03873	80 78 01 0c	 cmp	 BYTE PTR [eax+1], 12	; 0000000cH
  03877	0f 85 cc 36 00
	00		 jne	 $LN1058@monster

; 9024 : 			{	//????????
; 9025 : 				ATR_STIMER(a0) = 60;

  0387d	c6 40 01 3c	 mov	 BYTE PTR [eax+1], 60	; 0000003cH

; 9026 : 				ATR_VCT_NO(a0)++;

  03881	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 9027 : 				//ÊòæÁ§∫Â§±Ë¥•
; 9028 : 				set_damage_num(a0, 8, -64);

  03884	6a c0		 push	 -64			; ffffffc0H
  03886	6a 08		 push	 8
  03888	57		 push	 edi
  03889	fe 00		 inc	 BYTE PTR [eax]
  0388b	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03890	83 c4 0c	 add	 esp, 12			; 0000000cH
  03893	5f		 pop	 edi
  03894	5e		 pop	 esi
  03895	5b		 pop	 ebx
  03896	8b e5		 mov	 esp, ebp
  03898	5d		 pop	 ebp
  03899	c3		 ret	 0
$LN614@monster:

; 9029 : 			}
; 9030 : 		}
; 9031 : 		break;
; 9032 : 	case 54:		//ÓìñÓô¨ÓñäÓèùÓçßÓõ≤??????
; 9033 : 		ATR_CHR_ACT(a0) = ANIM_SAD;		//???????????
; 9034 : 		pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP);

  0389a	6a 01		 push	 1
  0389c	6a 00		 push	 0
  0389e	57		 push	 edi
  0389f	c7 87 4c 01 00
	00 09 00 00 00	 mov	 DWORD PTR [edi+332], 9
  038a9	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 9035 : 		if (!--ATR_STIMER(a0))

  038ae	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  038b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  038b4	80 40 01 ff	 add	 BYTE PTR [eax+1], 255	; 000000ffH
  038b8	0f 85 8b 36 00
	00		 jne	 $LN1058@monster

; 9036 : 		{	//???Óé∑???
; 9037 : 			ATR_DAMAGE(p_master)++;		//ÓñäÓèùÓçßÓõ≤?Óëò

  038be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  038c3	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  038c6	ff 40 58	 inc	 DWORD PTR [eax+88]

; 9038 : 			//???Óèù?Óöº?ÔºØÔº´??
; 9039 : 			if (ATR_PET_OK(a0))

  038c9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  038cc	8b c8		 mov	 ecx, eax
  038ce	8b d0		 mov	 edx, eax
  038d0	80 b8 20 01 00
	00 00		 cmp	 BYTE PTR [eax+288], 0
  038d7	74 24		 je	 SHORT $LN617@monster

; 9040 : 			{
; 9041 : 				a2 = p_party[ATR_PLACE_NO(a0) + 5];		//???Óèù?????

  038d9	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]

; 9042 : 				if (ATR_NAME(a2) != NULL)		//

  038e0	8b 04 85 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4+20]
  038e7	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  038eb	74 10		 je	 SHORT $LN617@monster

; 9043 : 					ATR_DAMAGE(p_master)++;		//???ÓñäÓèùÓçßÓõ≤?Óëò

  038ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  038f2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  038f5	ff 40 58	 inc	 DWORD PTR [eax+88]
  038f8	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  038fb	8b d1		 mov	 edx, ecx
$LN617@monster:

; 9044 : 			}
; 9045 : 			if (ATR_GROUP_FLG(a0) == 0)

  038fd	8a 41 5e	 mov	 al, BYTE PTR [ecx+94]
  03900	84 c0		 test	 al, al
  03902	75 13		 jne	 SHORT $LN618@monster

; 9046 : 				ATR_CHR_ANG(a0) = 3;

  03904	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  0390e	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0390f	5e		 pop	 esi
  03910	88 02		 mov	 BYTE PTR [edx], al
  03912	5b		 pop	 ebx
  03913	8b e5		 mov	 esp, ebp
  03915	5d		 pop	 ebp
  03916	c3		 ret	 0
$LN618@monster:

; 9047 : 			else if (ATR_GROUP_FLG(a0) == 1)

  03917	3c 01		 cmp	 al, 1
  03919	75 0a		 jne	 SHORT $LN620@monster

; 9048 : 				ATR_CHR_ANG(a0) = 7;

  0391b	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN620@monster:
  03925	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03926	5e		 pop	 esi
  03927	c6 02 00	 mov	 BYTE PTR [edx], 0
  0392a	5b		 pop	 ebx
  0392b	8b e5		 mov	 esp, ebp
  0392d	5d		 pop	 ebp
  0392e	c3		 ret	 0
$LN621@monster:

; 9049 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9050 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 9051 : 				ATR_CHR_ANG(a0) = 5;
; 9052 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 9053 : 				ATR_CHR_ANG(a0) = 1;
; 9054 : #endif
; 9055 : 			ATR_VCT_NO(a0) = 0;		//Óïò??
; 9056 : 		}
; 9057 : 		break;
; 9058 : 	case 55:		//ÊâìÈ£û
; 9059 : 		if (ATR_FIRST_FLG(a0) == 0)

  0392f	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  03936	75 43		 jne	 SHORT $LN622@monster

; 9060 : 		{	//???????
; 9061 : 			ATR_SPD(a0) = 63;		//?ÓôÆÓî≤Óôö???

  03938	c7 87 34 01 00
	00 3f 00 00 00	 mov	 DWORD PTR [edi+308], 63	; 0000003fH

; 9062 : 			if (ATR_AKO_FLG(a0) == 2)		//??????

  03942	80 ba 21 01 00
	00 02		 cmp	 BYTE PTR [edx+289], 2
  03949	75 0c		 jne	 SHORT $LN623@monster

; 9063 : 				ATR_LONG_WORK(0, a0) = 0;		//Óóò?Óüé??????

  0394b	c7 82 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+308], 0
  03955	eb 1a		 jmp	 SHORT $LN624@monster
$LN623@monster:

; 9064 : 			else
; 9065 : 			{
; 9066 : 				ATR_LONG_WORK(0, a0) = 3;		//Óóò?Óüé??????

  03957	c7 82 34 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+308], 3

; 9067 : 				//ÊâìÈ£ûÁöÑÂ£∞Èü≥
; 9068 : 				play_se(11, ATR_H_POS(a0), ATR_V_POS(a0));

  03961	ff 77 1c	 push	 DWORD PTR [edi+28]
  03964	ff 77 18	 push	 DWORD PTR [edi+24]
  03967	6a 0b		 push	 11			; 0000000bH
  03969	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0396e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN624@monster:

; 9069 : 			}
; 9070 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  03971	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03974	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
$LN622@monster:

; 9071 : 		}
; 9072 : 		gemini(a0);

  0397b	57		 push	 edi
  0397c	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 9073 : 		if (ATR_LONG_WORK(0, a0) < 3)

  03981	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  03984	83 c4 04	 add	 esp, 4
  03987	83 b9 34 01 00
	00 03		 cmp	 DWORD PTR [ecx+308], 3
  0398e	0f 8d 96 00 00
	00		 jge	 $LN625@monster

; 9074 : 		{	//Óóò?Óüé???
; 9075 : 			if (ATR_CRS(a0) < 8 || ATR_CRS(a0) > 24)

  03994	8b 97 38 01 00
	00		 mov	 edx, DWORD PTR [edi+312]
  0399a	83 fa 08	 cmp	 edx, 8
  0399d	7c 05		 jl	 SHORT $LN628@monster
  0399f	83 fa 18	 cmp	 edx, 24			; 00000018H
  039a2	7e 0a		 jle	 SHORT $LN1213@monster
$LN628@monster:

; 9076 : 			{
; 9077 : 				if (ATR_V_POS(a0) <= 0)

  039a4	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  039a8	7f 04		 jg	 SHORT $LN1213@monster

; 9078 : 				{		//ÓêØÓñ†?
; 9079 : 					d0 = 0;

  039aa	33 c0		 xor	 eax, eax

; 9104 : 					goto monster_case55_100;		//??????
; 9105 : 				}
; 9106 : 			}
; 9107 : 			goto monster_case55_200;		//??????
; 9108 : 
; 9109 : 		monster_case55_100:

  039ac	eb 4a		 jmp	 SHORT $LN1246@monster
$LN1213@monster:

; 9080 : 					goto monster_case55_100;		//??????
; 9081 : 				}
; 9082 : 			}
; 9083 : 			if (ATR_CRS(a0) < 16 && ATR_CRS(a0) > 0)

  039ae	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  039b4	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  039b7	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  039ba	77 12		 ja	 SHORT $LN1214@monster

; 9084 : 			{
; 9085 : 				if (ATR_H_POS(a0) >= lpDraw->xSize)

  039bc	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  039bf	3b 86 84 00 00
	00		 cmp	 eax, DWORD PTR [esi+132]
  039c5	7c 07		 jl	 SHORT $LN1214@monster

; 9086 : 				{		//?Óñ†?
; 9087 : 					d0 = 1;

  039c7	b8 01 00 00 00	 mov	 eax, 1

; 9104 : 					goto monster_case55_100;		//??????
; 9105 : 				}
; 9106 : 			}
; 9107 : 			goto monster_case55_200;		//??????
; 9108 : 
; 9109 : 		monster_case55_100:

  039cc	eb 2a		 jmp	 SHORT $LN1246@monster
$LN1214@monster:

; 9088 : 					goto monster_case55_100;		//??????
; 9089 : 				}
; 9090 : 			}
; 9091 : 			if (ATR_CRS(a0) > 8 && ATR_CRS(a0) < 24)

  039ce	8d 42 f7	 lea	 eax, DWORD PTR [edx-9]
  039d1	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  039d4	77 12		 ja	 SHORT $LN1215@monster

; 9092 : 			{
; 9093 : 				if (ATR_V_POS(a0) >= lpDraw->ySize)

  039d6	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  039d9	3b 86 88 00 00
	00		 cmp	 eax, DWORD PTR [esi+136]
  039df	7c 07		 jl	 SHORT $LN1215@monster

; 9094 : 				{		//?Óñ†?
; 9095 : 					d0 = 2;

  039e1	b8 02 00 00 00	 mov	 eax, 2

; 9104 : 					goto monster_case55_100;		//??????
; 9105 : 				}
; 9106 : 			}
; 9107 : 			goto monster_case55_200;		//??????
; 9108 : 
; 9109 : 		monster_case55_100:

  039e6	eb 10		 jmp	 SHORT $LN1246@monster
$LN1215@monster:

; 9096 : 					goto monster_case55_100;		//??????
; 9097 : 				}
; 9098 : 			}
; 9099 : 			if (ATR_CRS(a0) > 16)

  039e8	83 fa 10	 cmp	 edx, 16			; 00000010H
  039eb	7e 38		 jle	 SHORT $monster_case55_200$1276

; 9100 : 			{
; 9101 : 				if (ATR_H_POS(a0) <= 0)

  039ed	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  039f1	7f 32		 jg	 SHORT $monster_case55_200$1276

; 9102 : 				{		//?Óñ†?
; 9103 : 					d0 = 3;

  039f3	b8 03 00 00 00	 mov	 eax, 3
$LN1246@monster:

; 9110 : 			d1 = ATR_CRS(a0);
; 9111 : 			d1 = ATR_CRS(a0) = crs_bound_tbl[d0][ATR_CRS(a0)];		//Óóò?Óüé?

  039f8	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
$monster_case55_100$1277:
  039fb	c1 e0 05	 shl	 eax, 5
  039fe	0f b6 84 10 00
	00 00 00	 movzx	 eax, BYTE PTR ?crs_bound_tbl@@3PAY0CA@EA[eax+edx]
  03a06	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  03a0c	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9112 : 			ATR_LONG_WORK(0, a0)++;

  03a0f	ff 81 34 01 00
	00		 inc	 DWORD PTR [ecx+308]

; 9113 : 			//Óóò?Óüé??
; 9114 : 			play_se(66, ATR_H_POS(a0), ATR_V_POS(a0));

  03a15	ff 77 1c	 push	 DWORD PTR [edi+28]
  03a18	ff 77 18	 push	 DWORD PTR [edi+24]
  03a1b	6a 42		 push	 66			; 00000042H
  03a1d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  03a22	83 c4 0c	 add	 esp, 12			; 0000000cH
$monster_case55_200$1276:

; 9115 : 
; 9116 : 		monster_case55_200:
; 9117 : 			;
; 9118 : 		}

  03a25	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  03a28	eb 30		 jmp	 SHORT $LN641@monster
$LN625@monster:

; 9119 : 		else
; 9120 : 		{
; 9121 : 			if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT || ATR_V_POS(a0) > lpDraw->ySize + SCREEN_OUT || ATR_V_POS(a0) < 0 - SCREEN_OUT)

  03a2a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  03a30	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  03a33	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  03a39	83 c0 6a	 add	 eax, 106		; 0000006aH
  03a3c	3b d0		 cmp	 edx, eax
  03a3e	7f 59		 jg	 SHORT $LN642@monster
  03a40	83 fa 96	 cmp	 edx, -106		; ffffff96H
  03a43	7c 54		 jl	 SHORT $LN642@monster
  03a45	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  03a4b	8b 57 1c	 mov	 edx, DWORD PTR [edi+28]
  03a4e	83 c0 6a	 add	 eax, 106		; 0000006aH
  03a51	3b d0		 cmp	 edx, eax
  03a53	7f 44		 jg	 SHORT $LN642@monster
  03a55	83 fa 96	 cmp	 edx, -106		; ffffff96H
  03a58	7c 3f		 jl	 SHORT $LN642@monster
$LN641@monster:

; 9163 : 					}
; 9164 : 				}
; 9165 : 				break;
; 9166 : 			}
; 9167 : 		}
; 9168 : 		if (ATR_AKO_FLG(a0) == 2)

  03a5a	80 b9 21 01 00
	00 02		 cmp	 BYTE PTR [ecx+289], 2
  03a61	0f 85 e2 34 00
	00		 jne	 $LN1058@monster

; 9169 : 		{	//??????
; 9170 : 			if (ATR_LONG_WORK(0, a0) & 1)
; 9171 : 				ATR_CHR_ANG(a0)--;		//??Óòø
; 9172 : 			else
; 9173 : 				ATR_CHR_ANG(a0)++;		//??Óòø
; 9174 : 			ATR_CHR_ANG(a0) &= 7;		//?Óòø

  03a67	8b 89 34 01 00
	00		 mov	 ecx, DWORD PTR [ecx+308]
  03a6d	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  03a73	f7 d1		 not	 ecx
  03a75	83 e1 01	 and	 ecx, 1

; 9175 : 			pattern(a0, 1, ANM_NO_LOOP);

  03a78	6a 01		 push	 1
  03a7a	6a 01		 push	 1
  03a7c	57		 push	 edi
  03a7d	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  03a80	48		 dec	 eax
  03a81	83 e0 07	 and	 eax, 7
  03a84	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  03a8a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03a8f	83 c4 0c	 add	 esp, 12			; 0000000cH
  03a92	5f		 pop	 edi
  03a93	5e		 pop	 esi
  03a94	5b		 pop	 ebx
  03a95	8b e5		 mov	 esp, ebp
  03a97	5d		 pop	 ebp
  03a98	c3		 ret	 0
$LN642@monster:

; 9122 : 			{		//?Ó°°???
; 9123 : 				ATR_NAME(a0) = NULL;

  03a99	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 9124 : 				ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  03aa0	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2

; 9125 : 				ATR_VCT_NO(a0) = VCT_NO_APPEAR;

  03aa7	c6 01 f9	 mov	 BYTE PTR [ecx], 249	; 000000f9H

; 9126 : 				if (BattleMyNo == ATR_PLACE_NO(a0))

  03aaa	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  03aad	0f b6 82 1f 01
	00 00		 movzx	 eax, BYTE PTR [edx+287]
  03ab4	39 05 00 00 00
	00		 cmp	 DWORD PTR ?BattleMyNo@@3HA, eax ; BattleMyNo
  03aba	0f 84 1e fc ff
	ff		 je	 $LN1264@monster

; 9127 : 				{	//ÓçòÓû§??
; 9128 : 					action_inf = 2;		////ACTION_INFÓìÜÓòã
; 9129 : 					command_point = 0;		//?????Óí∂????????
; 9130 : 					break;
; 9131 : 				}
; 9132 : 				//???Óèù?????
; 9133 : 				a1 = ATR_BODY_WORK(0, a0);

  03ac0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 9134 : 				if (a1 != NULL)

  03ac3	85 c0		 test	 eax, eax
  03ac5	74 3b		 je	 SHORT $LN644@monster

; 9135 : 				{
; 9136 : 					//?????
; 9137 : 					if (ATR_ATTACK_KIND(2, a1) == 1)

  03ac7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03aca	83 79 68 01	 cmp	 DWORD PTR [ecx+104], 1
  03ace	75 1e		 jne	 SHORT $LN646@monster

; 9138 : 					{
; 9139 : 						//????Óåñ
; 9140 : 						ATR_ATTRIB(a1) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  03ad0	83 88 a4 00 00
	00 02		 or	 DWORD PTR [eax+164], 2

; 9141 : 						ATR_NAME(a1) = NULL;

  03ad7	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 9142 : 						ATR_VCT_NO(a1) = VCT_NO_APPEAR;

  03ade	c6 01 f9	 mov	 BYTE PTR [ecx], 249	; 000000f9H

; 9143 : 						if (ATR_COUNTER(p_master) == a0)		//ÓçòÓû§?????

  03ae1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  03ae6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]

; 9144 : #ifdef _PETSKILL_BATTLE_MODEL
; 9145 : 						if (ATR_BATTLE_MODEL(a0) != ATT_BATTLE_MODEL)
; 9146 : #endif
; 9147 : 							ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//??Óé∑?
; 9148 : 					}

  03ae9	e9 cb 01 00 00	 jmp	 $LN1265@monster
$LN646@monster:

; 9149 : 					else
; 9150 : 					{
; 9151 : 						ATR_VCT_NO(a1) = 57;		//???Óô¶??

  03aee	c6 01 39	 mov	 BYTE PTR [ecx], 57	; 00000039H

; 9152 : 						ATR_FIRST_FLG(a1) = 0;

  03af1	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  03af4	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03af5	5e		 pop	 esi
  03af6	5b		 pop	 ebx
  03af7	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  03afe	8b e5		 mov	 esp, ebp
  03b00	5d		 pop	 ebp
  03b01	c3		 ret	 0
$LN644@monster:

; 9153 : 					}
; 9154 : 				}
; 9155 : 				else
; 9156 : 				{
; 9157 : 					if (ATR_COUNTER(p_master) == a0)		//ÓçòÓû§?????

  03b02	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  03b07	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03b0a	39 b9 08 01 00
	00		 cmp	 DWORD PTR [ecx+264], edi
  03b10	0f 85 33 34 00
	00		 jne	 $LN1058@monster

; 9158 : 					{
; 9159 : #ifdef _PETSKILL_BATTLE_MODEL
; 9160 : 						if (ATR_BATTLE_MODEL(a0) != ATT_BATTLE_MODEL)

  03b16	83 ba 58 02 00
	00 62		 cmp	 DWORD PTR [edx+600], 98	; 00000062H
  03b1d	0f 84 26 34 00
	00		 je	 $LN1058@monster

; 9161 : #endif
; 9162 : 							ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//??Óé∑?

  03b23	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  03b27	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03b28	5e		 pop	 esi
  03b29	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  03b2c	5b		 pop	 ebx
  03b2d	8b e5		 mov	 esp, ebp
  03b2f	5d		 pop	 ebp
  03b30	c3		 ret	 0
$LN655@monster:

; 9176 : 		}
; 9177 : 		break;
; 9178 : 	case 56:		//?????????
; 9179 : 		a1 = ATR_BODY_WORK(0, a0);		//??Óéî??????

  03b31	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 9180 : 		//?Ó°°Óö†??
; 9181 : 		if (ATR_H_POS(a1) < lpDraw->xSize && ATR_H_POS(a1) > 64 && ATR_V_POS(a1) < lpDraw->ySize && ATR_V_POS(a1) > 0 - 64)

  03b34	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  03b3a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  03b3d	3b 8e 84 00 00
	00		 cmp	 ecx, DWORD PTR [esi+132]
  03b43	0f 8d 65 26 00
	00		 jge	 $LN955@monster
  03b49	83 f9 40	 cmp	 ecx, 64			; 00000040H
  03b4c	0f 8e 5c 26 00
	00		 jle	 $LN955@monster
  03b52	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  03b55	3b 96 88 00 00
	00		 cmp	 edx, DWORD PTR [esi+136]
  03b5b	0f 8d 4d 26 00
	00		 jge	 $LN955@monster
  03b61	83 fa c0	 cmp	 edx, -64		; ffffffc0H
  03b64	0f 8e 44 26 00
	00		 jle	 $LN955@monster

; 9182 : 		{
; 9183 : 			d0 = ATR_H_POS(a1);				//??Óéî?Óüµ??
; 9184 : 			d1 = ATR_V_POS(a1);
; 9185 : 			radar2(a0, d0, d1, 2);	//????

  03b6a	6a 02		 push	 2
  03b6c	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
  03b6f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  03b72	50		 push	 eax
  03b73	51		 push	 ecx
  03b74	57		 push	 edi
  03b75	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  03b78	e8 00 00 00 00	 call	 ?radar2@@YAHPAUaction@@HHH@Z ; radar2

; 9186 : 			//??Óüâ??????
; 9187 : 			d0 = ATR_CRS(a0) - ATR_CRS_OLD(a0);

  03b7d	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  03b80	83 c4 10	 add	 esp, 16			; 00000010H
  03b83	8b 9f 38 01 00
	00		 mov	 ebx, DWORD PTR [edi+312]
  03b89	8b d3		 mov	 edx, ebx
  03b8b	0f b6 86 22 01
	00 00		 movzx	 eax, BYTE PTR [esi+290]
  03b92	2b d0		 sub	 edx, eax
  03b94	8b ca		 mov	 ecx, edx
  03b96	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 9188 : 			if (d0 < 0)

  03b99	79 05		 jns	 SHORT $LN657@monster

; 9189 : 				d0 = 0 - d0;

  03b9b	f7 d9		 neg	 ecx
  03b9d	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
$LN657@monster:

; 9190 : 			if (d0 >= 2)

  03ba0	0f b6 c3	 movzx	 eax, bl
  03ba3	85 d2		 test	 edx, edx
  03ba5	89 45 08	 mov	 DWORD PTR tv21436[ebp], eax
  03ba8	8b d0		 mov	 edx, eax

; 11396: 					a0mark[i] = 0;

  03baa	e9 71 09 00 00	 jmp	 $LN1270@monster
$LN659@monster:

; 9191 : 			{
; 9192 : 				ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */
; 9193 : 				ATR_CRS_OLD(a0) = ATR_CRS(a0);
; 9194 : 			}
; 9195 : 		}
; 9196 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 9197 : 		break;
; 9198 : 	case 57:		//?Ó†å??????
; 9199 : 		if (ATR_FIRST_FLG(a0) == 0)		//???????

  03baf	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  03bb6	75 61		 jne	 SHORT $LN660@monster

; 9200 : 		{
; 9201 : 			ATR_SPD(a0) = 16;

  03bb8	c7 87 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [edi+308], 16	; 00000010H

; 9202 : 			if (ATR_LIFE(a0) <= 0)

  03bc2	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  03bc6	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  03bc9	7f 16		 jg	 SHORT $LN661@monster

; 9203 : 			{		//??????
; 9204 : 				if (ATR_GROUP_FLG(a0) == 0)		//????????

  03bcb	84 c0		 test	 al, al
  03bcd	75 09		 jne	 SHORT $LN663@monster

; 9205 : 					//Óüµ????
; 9206 : 					ATR_CRS(a0) = crs_change_tbl2[7];

  03bcf	0f b6 05 07 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+7
  03bd6	eb 34		 jmp	 SHORT $LN662@monster
$LN663@monster:

; 9207 : 				else
; 9208 : 					ATR_CRS(a0) = crs_change_tbl2[3];

  03bd8	0f b6 05 03 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+3

; 9209 : 			}

  03bdf	eb 2b		 jmp	 SHORT $LN662@monster
$LN661@monster:

; 9210 : 			else
; 9211 : 			{
; 9212 : 				if (ATR_GROUP_FLG(a0) == 0)

  03be1	84 c0		 test	 al, al
  03be3	75 0c		 jne	 SHORT $LN665@monster

; 9213 : 					ATR_CHR_ANG(a0) = 7;

  03be5	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
  03bef	eb 0e		 jmp	 SHORT $LN667@monster
$LN665@monster:

; 9214 : 				else if (ATR_GROUP_FLG(a0) == 1)

  03bf1	3c 01		 cmp	 al, 1
  03bf3	75 0a		 jne	 SHORT $LN667@monster

; 9215 : 					ATR_CHR_ANG(a0) = 3;

  03bf5	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
$LN667@monster:

; 9216 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9217 : 				else if (ATR_GROUP_FLG(a0) == 2)
; 9218 : 					ATR_CHR_ANG(a0) = 1;
; 9219 : 				else if (ATR_GROUP_FLG(a0) == 3)	
; 9220 : 					ATR_CHR_ANG(a0) = 5;
; 9221 : #endif
; 9222 : 				ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  03bff	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  03c05	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
$LN662@monster:

; 9223 : 			}
; 9224 : 			//????????????Óöº??
; 9225 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  03c0c	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  03c12	c6 82 1e 01 00
	00 01		 mov	 BYTE PTR [edx+286], 1
$LN660@monster:

; 9226 : 		}
; 9227 : 		gemini(a0);		//?ÓôÆ

  03c19	57		 push	 edi
  03c1a	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  03c1f	83 c4 04	 add	 esp, 4

; 9228 : 		//????????????Óöº??
; 9229 : 		if (ATR_LIFE(a0) > 0)		//Óíü?????

  03c22	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  03c26	7e 17		 jle	 SHORT $LN668@monster

; 9230 : 		{
; 9231 : 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 9232 : 			pattern(a0, 1, ANM_LOOP);

  03c28	6a 00		 push	 0
  03c2a	6a 01		 push	 1
  03c2c	57		 push	 edi
  03c2d	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  03c37	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  03c3c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN668@monster:

; 9233 : 		}
; 9234 : 		if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT)		//?Ó°°???

  03c3f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  03c44	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  03c47	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  03c4d	83 c0 6a	 add	 eax, 106		; 0000006aH
  03c50	3b c8		 cmp	 ecx, eax
  03c52	7f 09		 jg	 SHORT $LN670@monster
  03c54	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  03c57	0f 8d ec 32 00
	00		 jge	 $LN1058@monster
$LN670@monster:

; 9235 : 		{
; 9236 : 			ATR_NAME(a0) = NULL;

  03c5d	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 9237 : 			ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  03c64	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2

; 9238 : 			ATR_VCT_NO(a0) = VCT_NO_APPEAR;

  03c6b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03c6e	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H

; 9239 : 			//??????????????????????????????????????????????
; 9240 : 			if (check_all_dead())

  03c71	e8 00 00 00 00	 call	 ?check_all_dead@@YAHXZ	; check_all_dead
  03c76	85 c0		 test	 eax, eax
  03c78	74 0f		 je	 SHORT $LN671@monster

; 9241 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//??Óé∑?

  03c7a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  03c7f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03c82	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  03c86	89 41 58	 mov	 DWORD PTR [ecx+88], eax
$LN671@monster:

; 9242 : 			if (ATR_COUNTER(p_master) == ATR_BODY_WORK(0, a0))		//ÓçòÓû§???Óéî?????

  03c89	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?p_master@@3PAUaction@@A
  03c8f	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  03c92	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  03c95	8b 82 08 01 00
	00		 mov	 eax, DWORD PTR [edx+264]
  03c9b	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  03c9e	75 16		 jne	 SHORT $LN673@monster

; 9243 : 			{
; 9244 : #ifdef _PETSKILL_BATTLE_MODEL
; 9245 : 				if (ATR_BATTLE_MODEL(a0) != ATT_BATTLE_MODEL)

  03ca0	83 be 58 02 00
	00 62		 cmp	 DWORD PTR [esi+600], 98	; 00000062H
  03ca7	74 0d		 je	 SHORT $LN673@monster

; 9246 : #endif
; 9247 : 					ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//??Óé∑?

  03ca9	0f b6 42 54	 movzx	 eax, BYTE PTR [edx+84]
  03cad	89 42 58	 mov	 DWORD PTR [edx+88], eax
  03cb0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?p_master@@3PAUaction@@A
$LN673@monster:

; 9248 : 			}
; 9249 : 			if (ATR_COUNTER(p_master) == a0)		//ÓçòÓû§?????

  03cb6	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
$LN1265@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03cb9	39 b9 08 01 00
	00		 cmp	 DWORD PTR [ecx+264], edi
  03cbf	0f 85 84 32 00
	00		 jne	 $LN1058@monster
  03cc5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03cc8	83 b8 58 02 00
	00 62		 cmp	 DWORD PTR [eax+600], 98	; 00000062H
  03ccf	0f 84 74 32 00
	00		 je	 $LN1058@monster
  03cd5	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  03cd9	5f		 pop	 edi
  03cda	5e		 pop	 esi
  03cdb	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  03cde	5b		 pop	 ebx
  03cdf	8b e5		 mov	 esp, ebp
  03ce1	5d		 pop	 ebp
  03ce2	c3		 ret	 0
$LN676@monster:

; 9250 : 			{
; 9251 : #ifdef _PETSKILL_BATTLE_MODEL
; 9252 : 				if (ATR_BATTLE_MODEL(a0) != ATT_BATTLE_MODEL)
; 9253 : #endif
; 9254 : 					ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//??Óé∑?
; 9255 : 			}
; 9256 : 		}
; 9257 : 		break;
; 9258 : 	case 60:		//?????
; 9259 : 		if (ATR_FIRST_FLG(a0) == 0)

  03ce3	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  03cea	0f 85 96 02 00
	00		 jne	 $LN687@monster

; 9260 : 		{	//???????
; 9261 : 			a1 = ATR_BODY_WORK(0, a0);		//??Óéî??????

  03cf0	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 9262 : 			set_damage_num(a1, 10, -64);		//??Óù∏Óçï

  03cf3	6a c0		 push	 -64			; ffffffc0H
  03cf5	6a 0a		 push	 10			; 0000000aH
  03cf7	56		 push	 esi
  03cf8	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 9263 : 			ATR_STIMER(a0) = 40;

  03cfd	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 9264 : 			play_se(216, ATR_H_POS(a0), 240);		//??????

  03d00	68 f0 00 00 00	 push	 240			; 000000f0H
  03d05	c6 40 01 28	 mov	 BYTE PTR [eax+1], 40	; 00000028H
  03d09	ff 77 18	 push	 DWORD PTR [edi+24]
  03d0c	68 d8 00 00 00	 push	 216			; 000000d8H
  03d11	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 9265 : 			if (ATR_GROUP_FLG(a1) == 0)

  03d16	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  03d19	83 c4 18	 add	 esp, 24			; 00000018H
  03d1c	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  03d1f	84 c0		 test	 al, al
  03d21	75 0c		 jne	 SHORT $LN678@monster

; 9266 : 				ATR_CHR_ANG(a1) = 3;

  03d23	c7 86 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+340], 3
  03d2d	eb 0e		 jmp	 SHORT $LN680@monster
$LN678@monster:

; 9267 : 			else if (ATR_GROUP_FLG(a1) == 1)

  03d2f	3c 01		 cmp	 al, 1
  03d31	75 0a		 jne	 SHORT $LN680@monster

; 9268 : 				ATR_CHR_ANG(a1) = 7;

  03d33	c7 86 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+340], 7
$LN680@monster:

; 9269 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9270 : 			else if (ATR_GROUP_FLG(a1) == 2)
; 9271 : 				ATR_CHR_ANG(a1) = 5;
; 9272 : 			else if (ATR_GROUP_FLG(a1) == 3)	
; 9273 : 				ATR_CHR_ANG(a1) = 1;
; 9274 : #endif
; 9275 : 			ATR_CRS_OLD(a1) = ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];

  03d3d	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  03d43	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  03d49	0f b6 c1	 movzx	 eax, cl
  03d4c	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  03d52	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl

; 11396: 					a0mark[i] = 0;

  03d58	e9 1c 02 00 00	 jmp	 $LN1253@monster
$LN682@monster:

; 9276 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?
; 9277 : 		}
; 9278 : 		//????
; 9279 : 		if (!--ATR_STIMER(a0))
; 9280 : 		{
; 9281 : 			ATR_FIRST_FLG(a0) = 0;		//??????
; 9282 : 			ATR_VCT_NO(a0)++;		//??
; 9283 : 		}
; 9284 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 9285 : 		break;
; 9286 : 
; 9287 : 	case 61:		//?????
; 9288 : 		a1 = ATR_BODY_WORK(0, a0);		//??Óéî??????
; 9289 : 		if (ATR_FIRST_FLG(a0) == 0)

  03d5d	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  03d64	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  03d67	75 66		 jne	 SHORT $LN683@monster

; 9290 : 		{	//???????
; 9291 : 			ATR_SPD(a0) = 12;

  03d69	c7 87 34 01 00
	00 0c 00 00 00	 mov	 DWORD PTR [edi+308], 12	; 0000000cH

; 9292 : 			if (ATR_LIFE(a0) > 0)

  03d73	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  03d77	7e 4f		 jle	 SHORT $LN684@monster

; 9293 : 			{	//Óíü?????
; 9294 : 				d0 = ATR_INT_WORK0(a1);

  03d79	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  03d7c	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  03d82	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 9295 : 				d1 = ATR_INT_WORK1(a1);

  03d85	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  03d88	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  03d8e	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9296 : 				radar(a0, &d0, &d1);	//????

  03d91	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  03d94	50		 push	 eax
  03d95	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  03d98	50		 push	 eax
  03d99	57		 push	 edi
  03d9a	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 9297 : 				ATR_CRS(a0) = d0;		//??????

  03d9f	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  03da2	83 c4 0c	 add	 esp, 12			; 0000000cH
  03da5	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 9298 : 				ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  03dab	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  03dae	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  03db5	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 9299 : 				ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  03dbb	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  03dc5	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN684@monster:

; 9300 : 			}
; 9301 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  03dc8	c6 82 1e 01 00
	00 01		 mov	 BYTE PTR [edx+286], 1
$LN683@monster:

; 9302 : 		}
; 9303 : 		d0 = ATR_INT_WORK0(a1);

  03dcf	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  03dd2	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  03dd8	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 9304 : 		d1 = ATR_INT_WORK1(a1);

  03ddb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  03dde	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  03de4	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9305 : 		radar(a0, &d0, &d1);	//????

  03de7	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  03dea	50		 push	 eax
  03deb	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  03dee	50		 push	 eax
  03def	57		 push	 edi
  03df0	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 9306 : 		ATR_CRS(a0) = d0;		//??????

  03df5	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 9307 : 		gemini(a0);		//?ÓôÆ

  03df8	57		 push	 edi
  03df9	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  03dff	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 9308 : 		if (d1 <= (ATR_SPD(a0) >> 2))

  03e04	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  03e0a	83 c4 10	 add	 esp, 16			; 00000010H
  03e0d	c1 f8 02	 sar	 eax, 2
  03e10	39 45 f8	 cmp	 DWORD PTR _d1$[ebp], eax
  03e13	0f 8f 95 23 00
	00		 jg	 $LN955@monster

; 9309 : 		{	//????
; 9310 : 			//???Óêç?
; 9311 : 			ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  03e19	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2

; 9312 : 			ATR_NAME(a0) = NULL;

  03e20	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 9313 : 			ATR_VCT_NO(a0) = VCT_NO_APPEAR;

  03e27	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03e2a	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H
$LN1104@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03e2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  03e32	5f		 pop	 edi
  03e33	5e		 pop	 esi
  03e34	5b		 pop	 ebx
  03e35	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03e38	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  03e3c	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  03e3f	8b e5		 mov	 esp, ebp
  03e41	5d		 pop	 ebp
  03e42	c3		 ret	 0
$LN686@monster:

; 9314 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//??Óé∑?
; 9315 : 			break;
; 9316 : 		}
; 9317 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 9318 : 		break;
; 9319 : 	case 62:		//???Óèù?
; 9320 : 		if (ATR_FIRST_FLG(a0) == 0)

  03e43	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  03e4a	0f 85 36 01 00
	00		 jne	 $LN687@monster

; 9321 : 		{	//???????
; 9322 : 			a1 = ATR_BODY_WORK(0, a0);		//??Óéî??????

  03e50	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 9323 : 			set_damage_num(a1, 11, -64);		//??Óù∏Óçï

  03e53	6a c0		 push	 -64			; ffffffc0H
  03e55	6a 0b		 push	 11			; 0000000bH
  03e57	56		 push	 esi
  03e58	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 9324 : 			if (ATR_GROUP_FLG(a1) == 0)

  03e5d	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  03e60	83 c4 0c	 add	 esp, 12			; 0000000cH
  03e63	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  03e66	84 c0		 test	 al, al
  03e68	75 0c		 jne	 SHORT $LN688@monster

; 9325 : 				ATR_CHR_ANG(a1) = 3;

  03e6a	c7 86 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+340], 3
  03e74	eb 0e		 jmp	 SHORT $LN690@monster
$LN688@monster:

; 9326 : 			else if (ATR_GROUP_FLG(a1) == 1)

  03e76	3c 01		 cmp	 al, 1
  03e78	75 0a		 jne	 SHORT $LN690@monster

; 9327 : 				ATR_CHR_ANG(a1) = 7;

  03e7a	c7 86 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+340], 7
$LN690@monster:

; 9328 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9329 : 			else if (ATR_GROUP_FLG(a1) == 2)
; 9330 : 				ATR_CHR_ANG(a1) = 5;
; 9331 : 			else if (ATR_GROUP_FLG(a1) == 3)	
; 9332 : 				ATR_CHR_ANG(a1) = 1;
; 9333 : #endif
; 9334 : 			ATR_CRS_OLD(a1) = ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];

  03e84	8b 86 54 01 00
	00		 mov	 eax, DWORD PTR [esi+340]
  03e8a	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  03e90	0f b6 c1	 movzx	 eax, cl
  03e93	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax
  03e99	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl

; 9335 : 			ATR_STIMER(a0) = 40;

  03e9f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03ea2	c6 40 01 28	 mov	 BYTE PTR [eax+1], 40	; 00000028H

; 9336 : 			//???Óú±?Óöá???
; 9337 : 			ATR_CHR_NO(a0) = get_num();

  03ea6	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  03eab	89 87 44 01 00
	00		 mov	 DWORD PTR [edi+324], eax

; 9338 : 			//???Óöá???
; 9339 : 			ATR_LEVEL(a0) = get_num();

  03eb1	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  03eb6	89 87 8c 00 00
	00		 mov	 DWORD PTR [edi+140], eax

; 9340 : 			//??Óöá???
; 9341 : 			ATR_LIFE(a0) = get_num();

  03ebc	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 9342 : 			//Ó°ìÓì∑Óöá???
; 9343 : 			get_name(a0);

  03ec1	57		 push	 edi
  03ec2	89 47 78	 mov	 DWORD PTR [edi+120], eax
  03ec5	e8 00 00 00 00	 call	 ?get_name@@YAXPAUaction@@@Z ; get_name

; 9344 : 			//?Óï´??Óöá???
; 9345 : 			ATR_MAX_LIFE(a0) = get_num();

  03eca	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  03ecf	89 87 80 00 00
	00		 mov	 DWORD PTR [edi+128], eax

; 9346 : 			//??Óéî??????
; 9347 : 			a1 = ATR_BODY_WORK(0, a0);

  03ed5	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  03ed8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 9348 : 			//?Óù≥???
; 9349 : 			ATR_H_POS(a0) = ATR_H_POS(a1);

  03edb	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  03ede	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 9350 : 			ATR_V_POS(a0) = ATR_V_POS(a1) - 1;

  03ee1	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  03ee4	48		 dec	 eax
  03ee5	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 9351 : 			//Óù∏Óçï??
; 9352 : 			ATR_ATTRIB(a0) &= ~ACT_ATR_HIDE;

  03ee8	83 a7 a4 00 00
	00 fd		 and	 DWORD PTR [edi+164], -3	; fffffffdH

; 9353 : 			ATR_SPD(a0) = 12;

  03eef	c7 87 34 01 00
	00 0c 00 00 00	 mov	 DWORD PTR [edi+308], 12	; 0000000cH

; 9354 : 			d0 = ATR_INT_WORK0(a0);

  03ef9	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  03eff	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 9355 : 			d1 = ATR_INT_WORK1(a0);

  03f02	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  03f08	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9356 : 			radar(a0, &d0, &d1);	//????

  03f0b	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  03f0e	50		 push	 eax
  03f0f	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  03f12	50		 push	 eax
  03f13	57		 push	 edi
  03f14	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 9357 : 			ATR_CRS(a0) = d0;		//??????

  03f19	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  03f1c	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 9358 : 			ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  03f22	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 9359 : 			ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????
; 9360 : 			ATR_CHR_ACT_OLD(a0) = -1;
; 9361 : 			ATR_AKO_FLG(a0) = 0;		//?????????
; 9362 : 			ATR_ATTACK_KIND(2, a0) = 0;
; 9363 : 			ATR_STATUS(a0) = 0;		//??????Óêπ???
; 9364 : 			play_se(216, ATR_H_POS(a0), 240);		//??????

  03f25	68 f0 00 00 00	 push	 240			; 000000f0H
  03f2a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  03f31	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  03f37	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  03f41	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  03f4b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03f4e	c6 80 21 01 00
	00 00		 mov	 BYTE PTR [eax+289], 0
  03f55	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03f58	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0
  03f5f	c7 87 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+144], 0
  03f69	ff 77 18	 push	 DWORD PTR [edi+24]
  03f6c	68 d8 00 00 00	 push	 216			; 000000d8H
  03f71	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  03f76	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1253@monster:

; 10853: #endif
; 10854: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  03f79	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03f7c	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  03f83	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN687@monster:
  03f86	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  03f8a	0f 85 1e 22 00
	00		 jne	 $LN955@monster
  03f90	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03f93	6a 00		 push	 0
  03f95	6a 00		 push	 0
  03f97	57		 push	 edi
  03f98	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  03f9f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  03fa2	fe 00		 inc	 BYTE PTR [eax]
  03fa4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  03fa9	83 c4 0c	 add	 esp, 12			; 0000000cH
  03fac	5f		 pop	 edi
  03fad	5e		 pop	 esi
  03fae	5b		 pop	 ebx
  03faf	8b e5		 mov	 esp, ebp
  03fb1	5d		 pop	 ebp
  03fb2	c3		 ret	 0
$LN692@monster:

; 9365 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?
; 9366 : 		}
; 9367 : 		//????
; 9368 : 		if (!--ATR_STIMER(a0))
; 9369 : 		{
; 9370 : 			ATR_FIRST_FLG(a0) = 0;		//??????
; 9371 : 			ATR_VCT_NO(a0)++;		//??
; 9372 : 		}
; 9373 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 9374 : 		break;
; 9375 : 	case 63:		//???Óèù?
; 9376 : 		d0 = ATR_INT_WORK0(a0);

  03fb3	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  03fb9	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 9377 : 		d1 = ATR_INT_WORK1(a0);

  03fbc	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  03fc2	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9378 : 		radar(a0, &d0, &d1);	//????

  03fc5	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  03fc8	50		 push	 eax
  03fc9	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  03fcc	50		 push	 eax
  03fcd	57		 push	 edi
  03fce	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 9379 : 		ATR_CRS(a0) = d0;		//??????

  03fd3	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 9380 : 		gemini(a0);		//?ÓôÆ

  03fd6	57		 push	 edi
  03fd7	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  03fdd	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 9381 : 		if (d1 <= (ATR_SPD(a0) >> 2))

  03fe2	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  03fe8	83 c4 10	 add	 esp, 16			; 00000010H
  03feb	c1 f8 02	 sar	 eax, 2
  03fee	39 45 f8	 cmp	 DWORD PTR _d1$[ebp], eax
  03ff1	7f 45		 jg	 SHORT $LN693@monster

; 9382 : 		{		//????
; 9383 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  03ff3	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  03ff9	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  03fff	0f b6 c1	 movzx	 eax, cl
  04002	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  04008	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0400b	88 88 22 01 00
	00		 mov	 BYTE PTR [eax+290], cl

; 9384 : 			ATR_H_POS(a0) = ATR_INT_WORK0(a0);		//?Óù≥ÓüúÓíú

  04011	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  04014	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  0401a	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 9385 : 			ATR_V_POS(a0) = ATR_INT_WORK1(a0);

  0401d	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  04023	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 9386 : 			ATR_VCT_NO(a0) = 0;		//Óïò??

  04026	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 9387 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//??Óé∑????

  04029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  0402e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  04031	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  04035	89 41 58	 mov	 DWORD PTR [ecx+88], eax
$LN693@monster:

; 9388 : 		}
; 9389 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 9390 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  04038	6a 00		 push	 0
  0403a	6a 00		 push	 0
  0403c	57		 push	 edi
  0403d	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  04047	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0404c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0404f	5f		 pop	 edi
  04050	5e		 pop	 esi
  04051	5b		 pop	 ebx
  04052	8b e5		 mov	 esp, ebp
  04054	5d		 pop	 ebp
  04055	c3		 ret	 0
$LN694@monster:

; 9391 : 		break;
; 9392 : 	case 64:		//Óë≤Óï©????Óé∑?Óïò?
; 9393 : 		a1 = ATR_BODY_WORK(1, a0);		//??ÓéÅ???
; 9394 : 		//??ÓéÅ???Óé∑?????
; 9395 : 		if (ATR_VCT_NO(a1) != 2)

  04056	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  04059	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0405c	80 38 02	 cmp	 BYTE PTR [eax], 2
  0405f	0f 84 e4 2e 00
	00		 je	 $LN1058@monster

; 9396 : 		{
; 9397 : 			ATR_VCT_NO(a0) = 13;		//??????Óïò?

  04065	c6 02 0d	 mov	 BYTE PTR [edx], 13	; 0000000dH

; 9398 : 			ATR_STIMER(a0) = 30;

  04068	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0406b	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0406c	5e		 pop	 esi
  0406d	5b		 pop	 ebx
  0406e	c6 40 01 1e	 mov	 BYTE PTR [eax+1], 30	; 0000001eH
  04072	8b e5		 mov	 esp, ebp
  04074	5d		 pop	 ebp
  04075	c3		 ret	 0
$LN697@monster:

; 9399 : 		}
; 9400 : 		break;
; 9401 : 	case 65:		//Óë≤Óï©????
; 9402 : 		break;
; 9403 : 	case 66:		//Óë≤Óï©???ÓôÆ
; 9404 : 		a1 = ATR_BODY_WORK(0, a0);		//??Óéî??????
; 9405 : 		if (ATR_FIRST_FLG(a0) == 0)		//???????

  04076	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  0407d	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  04080	75 11		 jne	 SHORT $LN698@monster

; 9406 : 		{
; 9407 : 			ATR_SPD(a0) = 28;

  04082	c7 87 34 01 00
	00 1c 00 00 00	 mov	 DWORD PTR [edi+308], 28	; 0000001cH

; 9408 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  0408c	c6 82 1e 01 00
	00 01		 mov	 BYTE PTR [edx+286], 1
$LN698@monster:

; 9409 : 		}
; 9410 : 		d0 = ATR_INT_WORK0(a1);

  04093	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  04096	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  0409c	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 9411 : 		d1 = ATR_INT_WORK1(a1);

  0409f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  040a2	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  040a8	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9412 : 		radar(a0, &d0, &d1);	//????

  040ab	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  040ae	50		 push	 eax
  040af	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  040b2	50		 push	 eax
  040b3	57		 push	 edi
  040b4	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 9413 : 		ATR_CRS(a0) = d0;		//??????

  040b9	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 9414 : 		gemini(a0);		//?ÓôÆ

  040bc	57		 push	 edi
  040bd	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  040c3	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 9415 : 		if (d1 <= (ATR_SPD(a0) >> 1))		//????

  040c8	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  040ce	83 c4 10	 add	 esp, 16			; 00000010H
  040d1	d1 f8		 sar	 eax, 1
  040d3	39 45 f8	 cmp	 DWORD PTR _d1$[ebp], eax
  040d6	0f 8f d2 20 00
	00		 jg	 $LN955@monster

; 9416 : 		{
; 9417 : 			//??ÓéîÓöã?Óùè??
; 9418 : 			ATR_VCT_NO(a1) = 67;

  040dc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  040df	c6 00 43	 mov	 BYTE PTR [eax], 67	; 00000043H

; 9419 : 			ATR_CRS(a1) = ATR_CRS(a0);		//??Óùè?Óüµ????

  040e2	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  040e8	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 9420 : 			ATR_SPD(a1) = 40;

  040ee	c7 86 34 01 00
	00 28 00 00 00	 mov	 DWORD PTR [esi+308], 40	; 00000028H

; 9421 : 			ATR_STIMER(a1) = 8;

  040f8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  040fb	c6 40 01 08	 mov	 BYTE PTR [eax+1], 8

; 9422 : 			//??ÓéÅÓüâ?
; 9423 : #ifdef _PETSKILL_BATTLE_MODEL
; 9424 : 			// Ëã•ÊòØË¢´ÊîªÂáªÁâ©‰ª∂ÊîªÂáª
; 9425 : 			if (ATR_BATTLE_MODEL(a1) == ATT_BATTLE_MODEL)

  040ff	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  04102	83 b8 58 02 00
	00 62		 cmp	 DWORD PTR [eax+600], 98	; 00000062H
  04109	75 05		 jne	 SHORT $LN700@monster

; 9426 : 				a1 = ATR_BODY_WORK(1, a1);	// ‰ªé ATR_BODY_WORK(1,a1) ÂèñÂá∫ÊîªÂáªÁâ©‰ª∂ÁöÑ action

  0410b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0410e	eb 0e		 jmp	 SHORT $LN701@monster
$LN700@monster:

; 9427 : 			else 
; 9428 : #endif
; 9429 : 				a1 = ATR_COUNTER(p_master);

  04110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  04115	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  04118	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [eax+264]
$LN701@monster:

; 9430 : 			ATR_BODY_WORK(0, a1) = a0;		//Óò©????Óüâ?

  0411e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 9431 : 			//???????ÓòÖÓçè
; 9432 : 			ATR_VCT_NO(a0) = 65;
; 9433 : 			//????
; 9434 : 			play_se(5, ATR_H_POS(a0), 240);

  04121	68 f0 00 00 00	 push	 240			; 000000f0H
  04126	89 78 04	 mov	 DWORD PTR [eax+4], edi
  04129	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0412c	c6 00 41	 mov	 BYTE PTR [eax], 65	; 00000041H
  0412f	ff 77 18	 push	 DWORD PTR [edi+24]
  04132	6a 05		 push	 5
  04134	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  04139	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10853: #endif
; 10854: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0413c	6a 00		 push	 0
  0413e	6a 00		 push	 0
  04140	57		 push	 edi
  04141	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04146	83 c4 0c	 add	 esp, 12			; 0000000cH
  04149	5f		 pop	 edi
  0414a	5e		 pop	 esi
  0414b	5b		 pop	 ebx
  0414c	8b e5		 mov	 esp, ebp
  0414e	5d		 pop	 ebp
  0414f	c3		 ret	 0
$LN702@monster:

; 9435 : 		}
; 9436 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 9437 : 		break;
; 9438 : 	case 67:		//Óöã?Óùè?????
; 9439 : 		gemini(a0);		//??????

  04150	57		 push	 edi
  04151	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 9440 : 		ATR_CRS(a0) = (ATR_CRS(a0) + 16) & 31;

  04156	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  0415c	83 c4 04	 add	 esp, 4
  0415f	83 e8 10	 sub	 eax, 16			; 00000010H
  04162	83 e0 1f	 and	 eax, 31			; 0000001fH
  04165	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 9441 : 		if (--ATR_STIMER(a0))		//??Óïò???

  0416b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0416e	80 40 01 ff	 add	 BYTE PTR [eax+1], 255	; 000000ffH
  04172	0f 85 d1 2d 00
	00		 jne	 $LN1058@monster

; 9442 : 			break;
; 9443 : 		ATR_VCT_NO(a0) = 68;

  04178	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0417b	c6 00 44	 mov	 BYTE PTR [eax], 68	; 00000044H

; 9444 : 		//????
; 9445 : #ifdef _PETSKILL_BATTLE_MODEL
; 9446 : 		// Ëã•ÊòØË¢´ÊîªÂáªÁâ©‰ª∂ÊîªÂáª
; 9447 : 		if (ATR_BATTLE_MODEL(a0) == ATT_BATTLE_MODEL)

  0417e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04181	83 b8 58 02 00
	00 62		 cmp	 DWORD PTR [eax+600], 98	; 00000062H
  04188	75 10		 jne	 SHORT $LN704@monster

; 9448 : 			a1 = ATR_BODY_WORK(1, a0);	// ‰ªé ATR_BODY_WORK(1, a0) ÂèñÂá∫ÊîªÂáªÁâ©‰ª∂ÁöÑ action

  0418a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0418d	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0418e	5e		 pop	 esi
  0418f	5b		 pop	 ebx
  04190	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  04193	c6 00 02	 mov	 BYTE PTR [eax], 2
  04196	8b e5		 mov	 esp, ebp
  04198	5d		 pop	 ebp
  04199	c3		 ret	 0
$LN704@monster:

; 9449 : 		else 
; 9450 : #endif
; 9451 : 			a1 = ATR_COUNTER(p_master);		//??ÓéÅ???????

  0419a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  0419f	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  041a0	5e		 pop	 esi
  041a1	5b		 pop	 ebx
  041a2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  041a5	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [eax+264]
  041ab	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  041ae	c6 00 02	 mov	 BYTE PTR [eax], 2
  041b1	8b e5		 mov	 esp, ebp
  041b3	5d		 pop	 ebp
  041b4	c3		 ret	 0
$LN706@monster:

; 9452 : 		ATR_VCT_NO(a1) = 2;
; 9453 : 		break;
; 9454 : 	case 68:		//Óöã?Óùè?????
; 9455 : 		gemini(a0);		//?ÓôÆ

  041b5	57		 push	 edi
  041b6	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  041bb	83 c4 04	 add	 esp, 4

; 9456 : 		ATR_SPD(a0) -= 2;

  041be	83 87 34 01 00
	00 fe		 add	 DWORD PTR [edi+308], -2	; fffffffeH

; 9457 : 		if (ATR_SPD(a0) < 0)		//??????Óé∑???

  041c5	0f 89 7e 2d 00
	00		 jns	 $LN1058@monster

; 9458 : 		{
; 9459 : 			ATR_SPD(a0) = 10;

  041cb	c7 87 34 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [edi+308], 10	; 0000000aH

; 9460 : 			ATR_VCT_NO(a0) = 64;		//Óë≤Óï©????Óé∑?Óïò??

  041d5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  041d8	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  041d9	5e		 pop	 esi
  041da	5b		 pop	 ebx
  041db	c6 00 40	 mov	 BYTE PTR [eax], 64	; 00000040H
  041de	8b e5		 mov	 esp, ebp
  041e0	5d		 pop	 ebp
  041e1	c3		 ret	 0
$LN708@monster:

; 9461 : 		}
; 9462 : 		break;
; 9463 : 	case 69:		//??????Óù∏Óçï
; 9464 : 		if (ATR_FIRST_FLG(a0) == 0)

  041e2	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  041e9	75 77		 jne	 SHORT $LN709@monster

; 9465 : 		{		//???????
; 9466 : 			a1 = ATR_BODY_WORK(0, a0);		//??Óéî??????

  041eb	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 9467 : 			d0 = ATR_INT_WORK0(a1);

  041ee	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  041f1	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  041f7	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 9468 : 			d1 = ATR_INT_WORK1(a1);

  041fa	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  041fd	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  04203	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9469 : 			radar(a0, &d0, &d1);	//????

  04206	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  04209	50		 push	 eax
  0420a	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  0420d	50		 push	 eax
  0420e	57		 push	 edi
  0420f	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 9470 : 			ATR_CRS(a0) = d0;		//??????

  04214	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  04217	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 9471 : 			ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  0421d	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 9472 : 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 9473 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  04220	6a 00		 push	 0
  04222	6a 00		 push	 0
  04224	57		 push	 edi
  04225	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  0422c	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  04232	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  0423c	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 9474 : 			//??Óù∏Óçï
; 9475 : 			set_damage_num(a0, 13, -64);

  04241	6a c0		 push	 -64			; ffffffc0H
  04243	6a 0d		 push	 13			; 0000000dH
  04245	57		 push	 edi
  04246	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 9476 : 			ATR_STIMER(a0) = 35;

  0424b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0424e	83 c4 24	 add	 esp, 36			; 00000024H
  04251	c6 40 01 23	 mov	 BYTE PTR [eax+1], 35	; 00000023H

; 9477 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  04255	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04258	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  0425f	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN709@monster:

; 9478 : 		}
; 9479 : 		if (--ATR_STIMER(a0))		//??Óïò???

  04262	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  04266	0f 85 dd 2c 00
	00		 jne	 $LN1058@monster

; 9480 : 			break;
; 9481 : 		ATR_VCT_NO(a0) = 66;		//Óë≤Óï©??ÓôÆ?

  0426c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0426f	c6 00 42	 mov	 BYTE PTR [eax], 66	; 00000042H

; 9482 : 		ATR_FIRST_FLG(a0) = 0;		//??????

  04272	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04275	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04276	5e		 pop	 esi
  04277	5b		 pop	 ebx
  04278	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  0427f	8b e5		 mov	 esp, ebp
  04281	5d		 pop	 ebp
  04282	c3		 ret	 0
$LN711@monster:

; 9483 : 		break;
; 9484 : 	case 70:		//???????
; 9485 : 		if (ATR_FIRST_FLG(a0) == 0)		//???????

  04283	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  0428a	0f 85 cb 00 00
	00		 jne	 $LN712@monster

; 9486 : 		{
; 9487 : 			int d2;
; 9488 : 
; 9489 : 			d1 = command_point;		//?????????Óï§Óùç

  04290	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?command_point@@3HA
  04296	89 75 f8	 mov	 DWORD PTR _d1$[ebp], esi

; 9490 : 			d0 = get_num();		//Óò©Óéï?Óèù?

  04299	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0429e	8b c8		 mov	 ecx, eax

; 9491 : 			command_point = d1;		//???????????

  042a0	89 35 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, esi

; 9492 : 			d0 /= 5;

  042a6	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  042ab	f7 e9		 imul	 ecx
  042ad	d1 fa		 sar	 edx, 1
  042af	8b ca		 mov	 ecx, edx
  042b1	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  042b4	03 ca		 add	 ecx, edx
  042b6	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 9493 : 			if (ATR_GROUP_FLG(a0) == 0)		//????????

  042b9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  042bc	80 78 5e 00	 cmp	 BYTE PTR [eax+94], 0
  042c0	75 13		 jne	 SHORT $LN713@monster

; 9494 : 			{
; 9495 : 				d1 = boomerang_pos_tbl[d0 * 2];

  042c2	8b 04 cd 00 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl@@3PAHA[ecx*8]
  042c9	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9496 : 				d2 = boomerang_pos_tbl[d0 * 2 + 1];

  042cc	8b 04 cd 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl@@3PAHA[ecx*8+4]

; 9497 : 			}

  042d3	eb 2d		 jmp	 SHORT $LN716@monster
$LN713@monster:

; 9498 : 			else
; 9499 : 			{
; 9500 : 				//?ÓêØ?????Óì∑???
; 9501 : 				if (ATR_PLACE_NO(a0) >= 15)

  042d5	80 b8 1f 01 00
	00 0f		 cmp	 BYTE PTR [eax+287], 15	; 0000000fH
  042dc	72 13		 jb	 SHORT $LN715@monster

; 9502 : 				{
; 9503 : 					d1 = boomerang_pos_tbl3b[d0 * 2];

  042de	8b 04 cd 00 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl3b@@3PAHA[ecx*8]
  042e5	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9504 : 					d2 = boomerang_pos_tbl3b[d0 * 2 + 1];

  042e8	8b 04 cd 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl3b@@3PAHA[ecx*8+4]

; 9505 : 				}

  042ef	eb 11		 jmp	 SHORT $LN716@monster
$LN715@monster:

; 9506 : 				else
; 9507 : 				{
; 9508 : 					d1 = boomerang_pos_tbl3a[d0 * 2];

  042f1	8b 04 cd 00 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl3a@@3PAHA[ecx*8]
  042f8	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9509 : 					d2 = boomerang_pos_tbl3a[d0 * 2 + 1];

  042fb	8b 04 cd 04 00
	00 00		 mov	 eax, DWORD PTR ?boomerang_pos_tbl3a@@3PAHA[ecx*8+4]
$LN716@monster:

; 9510 : 				}
; 9511 : 			}
; 9512 : 			radar(a0, &d1, &d2);	//????

  04302	89 45 e8	 mov	 DWORD PTR _d2$1[ebp], eax
  04305	8d 45 e8	 lea	 eax, DWORD PTR _d2$1[ebp]
  04308	50		 push	 eax
  04309	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  0430c	50		 push	 eax
  0430d	57		 push	 edi
  0430e	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 9513 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = d1;

  04313	8b 45 f8	 mov	 eax, DWORD PTR _d1$[ebp]
  04316	83 c4 0c	 add	 esp, 12			; 0000000cH
  04319	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  0431f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  04322	8a 45 f8	 mov	 al, BYTE PTR _d1$[ebp]
  04325	88 81 22 01 00
	00		 mov	 BYTE PTR [ecx+290], al

; 9514 : 			ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  0432b	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  04331	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  04338	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 9515 : #if 0
; 9516 : 			ATR_CHR_ACT(a0) = ANIM_THROW;	//?????????
; 9517 : #else
; 9518 : 			if (ATR_LONG_WORK(0, a0) == 0)		//?????

  0433e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 9519 : 				ATR_CHR_ACT(a0) = ANIM_ATTACK;		//?????????
; 9520 : 			else
; 9521 : 				ATR_CHR_ACT(a0) = ANIM_THROW;		//?????????
; 9522 : #endif
; 9523 : 
; 9524 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  04341	8b 81 34 01 00
	00		 mov	 eax, DWORD PTR [ecx+308]
  04347	f7 d8		 neg	 eax
  04349	1b c0		 sbb	 eax, eax
  0434b	83 e0 0c	 and	 eax, 12			; 0000000cH
  0434e	89 87 4c 01 00
	00		 mov	 DWORD PTR [edi+332], eax
  04354	c6 81 1e 01 00
	00 01		 mov	 BYTE PTR [ecx+286], 1
$LN712@monster:

; 9525 : 		}
; 9526 : 		ATR_HIT(a0) = 0;		//?????????
; 9527 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))	//?????Óé∑???

  0435b	6a 01		 push	 1
  0435d	6a 00		 push	 0
  0435f	57		 push	 edi
  04360	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0
  0436a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0436f	83 c4 0c	 add	 esp, 12			; 0000000cH
  04372	85 c0		 test	 eax, eax
  04374	74 17		 je	 SHORT $LN719@monster

; 9528 : 		{
; 9529 : 			ATR_CHR_ACT_OLD(a0) = -1;

  04376	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1

; 9530 : 			ATR_VCT_NO(a0) = 71;		//?????????

  04380	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04383	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04384	5e		 pop	 esi
  04385	5b		 pop	 ebx
  04386	c6 00 47	 mov	 BYTE PTR [eax], 71	; 00000047H
  04389	8b e5		 mov	 esp, ebp
  0438b	5d		 pop	 ebp
  0438c	c3		 ret	 0
$LN719@monster:

; 9531 : 			break;
; 9532 : 		}
; 9533 : 		//???????
; 9534 : 		//?????ÓúäÓç∫????
; 9535 : 		if(ATR_HIT(a0) >= 10000 && ATR_HIT(a0) < 10100)

  0438d	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  04393	2d 10 27 00 00	 sub	 eax, 10000		; 00002710H
  04398	83 f8 63	 cmp	 eax, 99			; 00000063H
  0439b	0f 87 a8 2b 00
	00		 ja	 $LN1058@monster

; 9536 : 		{
; 9537 : 			//????????
; 9538 : 			a1 = GetAction(T_PRIO_BOW, sizeof(ATR_EQU));

  043a1	68 60 02 00 00	 push	 608			; 00000260H
  043a6	6a 65		 push	 101			; 00000065H
  043a8	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  043ad	8b d8		 mov	 ebx, eax
  043af	83 c4 08	 add	 esp, 8

; 9539 : 			if (a1 == NULL)

  043b2	85 db		 test	 ebx, ebx
  043b4	0f 84 24 e3 ff
	ff		 je	 $LN1260@monster

; 9540 : 			{
; 9541 : 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9542 : 				ATR_VCT_NO(a0) = 0;		//Óïò??
; 9543 : 				return;
; 9544 : 			}
; 9545 : 			//??????Óüµ???
; 9546 : 			ATR_BODY_WORK(0, a0) = a1;		//?????????

  043ba	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  043bd	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 9547 : 			/* ÓçØ??? */
; 9548 : 			ATR_NAME(a1) = boomerang;

  043c0	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], OFFSET ?boomerang@@YAXPAUaction@@@Z ; boomerang

; 9549 : 			/* Óù∏Óçï?ÓìèÓôö */
; 9550 : 			ATR_DISP_PRIO(a1) = D_PRIO_MISSILE;

  043c7	c6 43 15 56	 mov	 BYTE PTR [ebx+21], 86	; 00000056H

; 9551 : 			/* ?????Óú±? */
; 9552 : 			ATR_CHR_NO(a1) = SPR_boomerang;//SPR_ono;//

  043cb	c7 83 44 01 00
	00 96 88 01 00	 mov	 DWORD PTR [ebx+324], 100502 ; 00018896H

; 9553 : 			/* ???Óñ∫ */
; 9554 : 			ATR_CHR_ANG(a1) = ATR_CHR_ANG(a0);

  043d5	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  043db	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax

; 9555 : 			ATR_BODY_WORK(1, a1) = a0;		//ÓúäÓç∫?????

  043e1	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  043e4	89 79 08	 mov	 DWORD PTR [ecx+8], edi

; 9556 : 			d1 = command_point;		//?????????Óï§Óùç

  043e7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?command_point@@3HA
  043ed	89 75 f8	 mov	 DWORD PTR _d1$[ebp], esi

; 9557 : 			d0 = get_num();		//Óò©Óéï?Óèù?

  043f0	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  043f5	8b c8		 mov	 ecx, eax

; 9558 : 			command_point = d1;		//???????????

  043f7	89 35 00 00 00
	00		 mov	 DWORD PTR ?command_point@@3HA, esi

; 9559 : 			//?Óú±????
; 9560 : 			ATR_LONG_WORK(0, a1) = d0 / 5;

  043fd	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  04402	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
  04405	f7 e9		 imul	 ecx
  04407	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0440a	d1 fa		 sar	 edx, 1
  0440c	8b ca		 mov	 ecx, edx
  0440e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  04411	03 ca		 add	 ecx, edx
  04413	89 88 34 01 00
	00		 mov	 DWORD PTR [eax+308], ecx

; 9561 : 			//?Óòø?Óôö???
; 9562 : 			if (ATR_GROUP_FLG(a0) == 0)

  04419	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0441c	8b 90 34 01 00
	00		 mov	 edx, DWORD PTR [eax+308]
  04422	8d 88 38 01 00
	00		 lea	 ecx, DWORD PTR [eax+312]
  04428	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0442b	80 78 5e 00	 cmp	 BYTE PTR [eax+94], 0
  0442f	75 0b		 jne	 SHORT $LN722@monster

; 9563 : 			{
; 9564 : 				if (ATR_LONG_WORK(0, a1) <= 1)
; 9565 : 					ATR_LONG_WORK(1, a1) = 1;
; 9566 : 				else
; 9567 : 					ATR_LONG_WORK(1, a1) = 2;
; 9568 : 			}

  04431	33 c0		 xor	 eax, eax
  04433	83 fa 01	 cmp	 edx, 1
  04436	0f 9f c0	 setg	 al
  04439	40		 inc	 eax
  0443a	eb 0f		 jmp	 SHORT $LN727@monster
$LN722@monster:

; 9569 : 			else
; 9570 : 			{
; 9571 : 				if (ATR_LONG_WORK(0, a1) <= 1)
; 9572 : 					ATR_LONG_WORK(1, a1) = 2;

  0443c	b8 02 00 00 00	 mov	 eax, 2
  04441	83 fa 01	 cmp	 edx, 1
  04444	7e 05		 jle	 SHORT $LN727@monster

; 9573 : 				else
; 9574 : 					ATR_LONG_WORK(1, a1) = 1;

  04446	b8 01 00 00 00	 mov	 eax, 1
$LN727@monster:

; 9575 : 			}
; 9576 : 			ATR_GROUP_FLG(a1) = ATR_GROUP_FLG(a0);

  0444b	89 01		 mov	 DWORD PTR [ecx], eax
  0444d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04450	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]

; 9577 : 			ATR_PLACE_NO(a1) = ATR_PLACE_NO(a0);
; 9578 : 			ATR_H_POS(a1) = ATR_H_POS(a0);
; 9579 : 			ATR_V_POS(a1) = ATR_V_POS(a0);
; 9580 : 			ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];
; 9581 : 			ATR_SPD(a1) = 32;
; 9582 : 			gemini(a1);

  04453	53		 push	 ebx
  04454	0f b6 40 5e	 movzx	 eax, BYTE PTR [eax+94]
  04458	88 41 5e	 mov	 BYTE PTR [ecx+94], al
  0445b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0445e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  04461	0f b6 80 1f 01
	00 00		 movzx	 eax, BYTE PTR [eax+287]
  04468	88 81 1f 01 00
	00		 mov	 BYTE PTR [ecx+287], al
  0446e	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  04471	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  04474	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  04477	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
  0447a	8b 83 54 01 00
	00		 mov	 eax, DWORD PTR [ebx+340]
  04480	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  04487	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  0448d	c7 83 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [ebx+308], 32	; 00000020H
  04497	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 9583 : 			gemini(a1);

  0449c	53		 push	 ebx
  0449d	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 9584 : 			gemini(a1);

  044a2	53		 push	 ebx
  044a3	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  044a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9585 : 			p_missile[0] = a1;

  044ab	89 1d 00 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A, ebx

; 9586 : 			p_missile[1] = NULL;

  044b1	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+4, 0
  044bb	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  044bc	5e		 pop	 esi
  044bd	5b		 pop	 ebx
  044be	8b e5		 mov	 esp, ebp
  044c0	5d		 pop	 ebp
  044c1	c3		 ret	 0
$LN728@monster:

; 9587 : 		}
; 9588 : 		break;
; 9589 : 	case 71:		//????????
; 9590 : 		ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????

  044c2	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3

; 9591 : 		a1 = ATR_BODY_WORK(0, a0);		//????????????

  044cc	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 9592 : 
; 9593 : 		//JL fix È™ëËçâÊ≥•È©¨Âú®‰∏ãÊñπÊâîÂÆåÂõûÊóãÈïñÔºå‰ºöÂá∫Áé∞a1‰∏∫NULLÔºåÂØºËá¥Âç°‰ΩèÔºåÂº∫Ë°åÂ§ç‰ΩçÊù•‰øÆÂ§ç„ÄÇ
; 9594 : 		if (a1 == NULL)

  044cf	85 c0		 test	 eax, eax
  044d1	75 0a		 jne	 SHORT $LN729@monster

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  044d3	5f		 pop	 edi
  044d4	5e		 pop	 esi
  044d5	c6 02 04	 mov	 BYTE PTR [edx], 4
  044d8	5b		 pop	 ebx
  044d9	8b e5		 mov	 esp, ebp
  044db	5d		 pop	 ebp
  044dc	c3		 ret	 0
$LN729@monster:

; 9595 : 		{
; 9596 : 			ATR_VCT_NO(a0) = 4;   //
; 9597 : 			break;
; 9598 : 		}
; 9599 : 
; 9600 : 		//?Ó°°Óö†??
; 9601 : 		d0 = ATR_H_POS(a1);				//Óò©?Óüµ??

  044dd	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]

; 9602 : 		d1 = ATR_V_POS(a1);
; 9603 : 		radar2(a0, d0, d1, 2);	//????

  044e0	6a 02		 push	 2
  044e2	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
  044e5	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  044e8	50		 push	 eax
  044e9	51		 push	 ecx
  044ea	57		 push	 edi
  044eb	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  044ee	e8 00 00 00 00	 call	 ?radar2@@YAHPAUaction@@HHH@Z ; radar2

; 9604 : 		//??Óüâ??????
; 9605 : 		d0 = ATR_CRS(a0) - ATR_CRS_OLD(a0);

  044f3	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  044f6	83 c4 10	 add	 esp, 16			; 00000010H
  044f9	8b 9f 38 01 00
	00		 mov	 ebx, DWORD PTR [edi+312]
  044ff	8b d3		 mov	 edx, ebx
  04501	0f b6 86 22 01
	00 00		 movzx	 eax, BYTE PTR [esi+290]
  04508	2b d0		 sub	 edx, eax
  0450a	8b ca		 mov	 ecx, edx
  0450c	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 9606 : 		if (d0 < 0)

  0450f	79 05		 jns	 SHORT $LN730@monster

; 9607 : 			d0 = 0 - d0;

  04511	f7 d9		 neg	 ecx
  04513	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
$LN730@monster:

; 9608 : 		if (d0 >= 2)

  04516	0f b6 c3	 movzx	 eax, bl
  04519	85 d2		 test	 edx, edx
  0451b	89 45 08	 mov	 DWORD PTR tv21591[ebp], eax
  0451e	8b d0		 mov	 edx, eax
$LN1270@monster:

; 10853: #endif
; 10854: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  04520	0f b6 c3	 movzx	 eax, bl
  04523	0f 49 d0	 cmovns	 edx, eax
  04526	83 f9 02	 cmp	 ecx, 2
  04529	0f 8c 7f 1c 00
	00		 jl	 $LN955@monster
  0452f	0f b6 83 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[ebx]
  04536	6a 00		 push	 0
  04538	6a 00		 push	 0
  0453a	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  04540	57		 push	 edi
  04541	88 96 22 01 00
	00		 mov	 BYTE PTR [esi+290], dl
  04547	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0454c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0454f	5f		 pop	 edi
  04550	5e		 pop	 esi
  04551	5b		 pop	 ebx
  04552	8b e5		 mov	 esp, ebp
  04554	5d		 pop	 ebp
  04555	c3		 ret	 0
$LN732@monster:

; 9609 : 		{
; 9610 : 			ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */
; 9611 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0);
; 9612 : 		}
; 9613 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 9614 : 		break;
; 9615 : 	case 72:		//??????Óé¢?Óéï?
; 9616 : 		ATR_CHR_ACT(a0) = ANIM_HAND;		//Óé¢?Óéï????????
; 9617 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  04556	6a 00		 push	 0
  04558	6a 00		 push	 0
  0455a	57		 push	 edi
  0455b	c7 87 4c 01 00
	00 06 00 00 00	 mov	 DWORD PTR [edi+332], 6
  04565	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 9618 : 		ATR_VCT_NO(a0) = 73;		//??????Óé¢?Óéï???

  0456a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0456d	83 c4 0c	 add	 esp, 12			; 0000000cH
  04570	c6 00 49	 mov	 BYTE PTR [eax], 73	; 00000049H

; 9619 : 		ATR_STIMER(a0) = 16;

  04573	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04576	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04577	5e		 pop	 esi
  04578	5b		 pop	 ebx
  04579	c6 40 01 10	 mov	 BYTE PTR [eax+1], 16	; 00000010H
  0457d	8b e5		 mov	 esp, ebp
  0457f	5d		 pop	 ebp
  04580	c3		 ret	 0
$LN733@monster:
  04581	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  04585	0f 85 be 29 00
	00		 jne	 $LN1058@monster
  0458b	e9 4e e1 ff ff	 jmp	 $LN1260@monster
$LN735@monster:

; 9620 : 		break;
; 9621 : 	case 73:		//??????Óé¢?Óéï??
; 9622 : 		if (!(--ATR_STIMER(a0)))		//Óé∑???
; 9623 : 		{
; 9624 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9625 : 			ATR_VCT_NO(a0) = 0;		//ÓòÖÓçè?
; 9626 : 		}
; 9627 : 		break;
; 9628 : 	case 75:		//?Ó°áÓé£Óèû
; 9629 : 		if (ATR_GROUP_FLG(a0) == 0)

  04590	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  04593	84 c0		 test	 al, al
  04595	75 0c		 jne	 SHORT $LN736@monster

; 9630 : 			ATR_CHR_ANG(a0) = 3;

  04597	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  045a1	eb 0e		 jmp	 SHORT $LN738@monster
$LN736@monster:

; 9631 : 		else if (ATR_GROUP_FLG(a0) == 1)

  045a3	3c 01		 cmp	 al, 1
  045a5	75 0a		 jne	 SHORT $LN738@monster

; 9632 : 			ATR_CHR_ANG(a0) = 7;

  045a7	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN738@monster:

; 9633 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9634 : 		else if (ATR_GROUP_FLG(a0) == 2)
; 9635 : 			ATR_CHR_ANG(a0) = 5;
; 9636 : 		else if (ATR_GROUP_FLG(a0) == 3)	
; 9637 : 			ATR_CHR_ANG(a0) = 1;
; 9638 : #endif
; 9639 : 		ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  045b1	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]

; 9640 : 		//Óé£Óèû?????ÓèùÓù∏Óçï
; 9641 : 		a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  045b7	68 60 02 00 00	 push	 608			; 00000260H
  045bc	6a 47		 push	 71			; 00000047H
  045be	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  045c4	0f b6 c1	 movzx	 eax, cl
  045c7	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  045cd	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl
  045d3	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  045d8	8b f0		 mov	 esi, eax
  045da	83 c4 08	 add	 esp, 8

; 9642 : 		if (a1 == NULL)

  045dd	85 f6		 test	 esi, esi
  045df	0f 84 f9 e0 ff
	ff		 je	 $LN1260@monster

; 9643 : 		{
; 9644 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9645 : 			ATR_VCT_NO(a0) = 0;		//Óïò??
; 9646 : 			return;
; 9647 : 		}
; 9648 : 		/* ÓçØ??? */
; 9649 : 		ATR_NAME(a1) = monster;

  045e5	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 9650 : 		ATR_VCT_NO(a1) = 76;

  045ec	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  045ef	c6 00 4c	 mov	 BYTE PTR [eax], 76	; 0000004cH

; 9651 : 		/* Óù∏Óçï?ÓìèÓôö */
; 9652 : 		ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;

  045f2	c6 46 15 58	 mov	 BYTE PTR [esi+21], 88	; 00000058H

; 9653 : 		/* ?????Óú±? */
; 9654 : 		ATR_CHR_NO(a1) = get_num();		//?????????

  045f6	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  045fb	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax

; 9655 : #ifdef _VARY_WOLF
; 9656 : 		if (ATR_CHR_NO(a1) == 101120)

  04601	3d 00 8b 01 00	 cmp	 eax, 101120		; 00018b00H
  04606	75 08		 jne	 SHORT $LN740@monster

; 9657 : 			ATR_DISP_PRIO(a1) = ATR_DISP_PRIO(a0) - 1;

  04608	8a 4f 15	 mov	 cl, BYTE PTR [edi+21]
  0460b	fe c9		 dec	 cl
  0460d	88 4e 15	 mov	 BYTE PTR [esi+21], cl
$LN740@monster:

; 9658 : #endif
; 9659 : #ifdef _PROFESSION_ADDSKILL
; 9660 : 		if ( !g_bUseAlpha ){

  04610	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, 0 ; g_bUseAlpha
  04617	75 3c		 jne	 SHORT $LN744@monster

; 9661 : 			if ( ATR_CHR_NO(a1) == 101769 || ATR_CHR_NO(a1) == 101772 || ATR_CHR_NO(a1) == 101773 )

  04619	3d 89 8d 01 00	 cmp	 eax, 101769		; 00018d89H
  0461e	74 0e		 je	 SHORT $LN743@monster
  04620	3d 8c 8d 01 00	 cmp	 eax, 101772		; 00018d8cH
  04625	74 07		 je	 SHORT $LN743@monster
  04627	3d 8d 8d 01 00	 cmp	 eax, 101773		; 00018d8dH
  0462c	75 09		 jne	 SHORT $LN742@monster
$LN743@monster:

; 9662 : 				ATR_CHR_NO(a1) += 55;

  0462e	83 c0 37	 add	 eax, 55			; 00000037H
  04631	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
$LN742@monster:

; 9663 : 			if ( ATR_CHR_NO(a1) == 101802 || ATR_CHR_NO(a1) == 101803 || ATR_CHR_NO(a1) == 101804 )

  04637	3d aa 8d 01 00	 cmp	 eax, 101802		; 00018daaH
  0463c	74 0e		 je	 SHORT $LN745@monster
  0463e	3d ab 8d 01 00	 cmp	 eax, 101803		; 00018dabH
  04643	74 07		 je	 SHORT $LN745@monster
  04645	3d ac 8d 01 00	 cmp	 eax, 101804		; 00018dacH
  0464a	75 09		 jne	 SHORT $LN744@monster
$LN745@monster:

; 9664 : 				ATR_CHR_NO(a1) += 53;

  0464c	83 c0 35	 add	 eax, 53			; 00000035H
  0464f	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax
$LN744@monster:

; 9665 : 		}
; 9666 : #endif
; 9667 : 		/* ???Óñ∫ */
; 9668 : 		LoadBmp(ATR_PAT_NO(a0));

  04655	ff b7 9c 00 00
	00		 push	 DWORD PTR [edi+156]
  0465b	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp

; 9669 : 		//??Óù≥?????
; 9670 : #ifndef __CARYTEST
; 9671 : 		ATR_INT_WORK0(a1) = a0->anim_y + SpriteInfo[ATR_PAT_NO(a0)].height / 2;

  04660	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  04666	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 9672 : #else
; 9673 : 		ATR_INT_WORK0(a1) = a0->anim_y + g_lpRealAdrn[ATR_PAT_NO(a0)].height / 2;
; 9674 : #endif
; 9675 : 		//???????????
; 9676 : 		ATR_BODY_WORK(0, a1) = a0;
; 9677 : 		ATR_V_POS(a1) = ATR_V_POS(a0) + ATR_INT_WORK0(a1);
; 9678 : 		ATR_H_POS(a1) = ATR_H_POS(a0);
; 9679 : 		//Óïò??
; 9680 : 		ATR_VCT_NO(a0) = 0;
; 9681 : 		ATR_CHR_ACT_OLD(a0) = -1;
; 9682 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);	//???

  04669	6a 00		 push	 0
  0466b	6a 00		 push	 0
  0466d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  04670	0f bf 04 85 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  04678	99		 cdq
  04679	2b c2		 sub	 eax, edx
  0467b	d1 f8		 sar	 eax, 1
  0467d	03 87 68 01 00
	00		 add	 eax, DWORD PTR [edi+360]
  04683	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax
  04689	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0468c	57		 push	 edi
  0468d	89 78 04	 mov	 DWORD PTR [eax+4], edi
  04690	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  04693	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  04699	03 47 1c	 add	 eax, DWORD PTR [edi+28]
  0469c	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0469f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  046a2	89 46 18	 mov	 DWORD PTR [esi+24], eax
  046a5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  046a8	c6 00 00	 mov	 BYTE PTR [eax], 0
  046ab	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  046b5	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  046ba	83 c4 10	 add	 esp, 16			; 00000010H
  046bd	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  046be	5e		 pop	 esi
  046bf	5b		 pop	 ebx
  046c0	8b e5		 mov	 esp, ebp
  046c2	5d		 pop	 ebp
  046c3	c3		 ret	 0
$LN746@monster:

; 9683 : 		break;
; 9684 : 	case 76:		//?Ó°á?ÓèùÓù∏Óçï
; 9685 : 		//Óù∏Óçï?Óñ∫
; 9686 : 		a1 = ATR_BODY_WORK(0, a0);

  046c4	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 9687 : 		ATR_V_POS(a0) = ATR_V_POS(a1) + ATR_INT_WORK0(a0);

  046c7	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]

; 9688 : 		//?Óëë??Óòø??????
; 9689 : 		if (ATR_CHR_NO(a0) == SPR_effect01)

  046cd	6a 01		 push	 1
  046cf	03 46 1c	 add	 eax, DWORD PTR [esi+28]
  046d2	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  046d5	81 bf 44 01 00
	00 f8 88 01 00	 cmp	 DWORD PTR [edi+324], 100600 ; 000188f8H
  046df	75 04		 jne	 SHORT $LN747@monster

; 9690 : 			d0 = pattern(a0, 5, ANM_NO_LOOP);

  046e1	6a 05		 push	 5
  046e3	eb 02		 jmp	 SHORT $LN1247@monster
$LN747@monster:

; 9691 : 		else
; 9692 : 			d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP);

  046e5	6a 00		 push	 0
$LN1247@monster:

; 9693 : 		if (d0)

  046e7	57		 push	 edi
  046e8	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  046ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  046f0	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  046f3	85 c0		 test	 eax, eax
  046f5	0f 84 4e 28 00
	00		 je	 $LN1058@monster

; 9694 : 		{	//???Óé∑???
; 9695 : 			DeathAction(a0);		//Óé∑?

  046fb	57		 push	 edi
  046fc	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  04701	83 c4 04	 add	 esp, 4

; 9696 : 			d0 = get_num();		//?????????

  04704	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num

; 9697 : 			d6 = 0;		//Óë∑?????????

  04709	33 db		 xor	 ebx, ebx
  0470b	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 9698 : #ifdef _VARY_WOLF
; 9699 : 			if (d0 >= 101429 && d0 <= 101436)

  0470e	8d 88 cb 73 fe
	ff		 lea	 ecx, DWORD PTR [eax-101429]
  04714	83 f9 07	 cmp	 ecx, 7
  04717	77 09		 ja	 SHORT $LN750@monster

; 9700 : 				a1->anim_chr_no = 0;

  04719	89 9e 44 01 00
	00		 mov	 DWORD PTR [esi+324], ebx
  0471f	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
$LN750@monster:

; 9701 : #endif
; 9702 : #ifdef _PROFESSION_ADDSKILL
; 9703 : 			if (!g_bUseAlpha)

  04722	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?g_bUseAlpha@@3HA, ebx ; g_bUseAlpha
  04728	75 36		 jne	 SHORT $LN1074@monster

; 9704 : 			{
; 9705 : 				if (d0 == 101769 || d0 == 101772 || d0 == 101773)

  0472a	3d 89 8d 01 00	 cmp	 eax, 101769		; 00018d89H
  0472f	74 0e		 je	 SHORT $LN753@monster
  04731	3d 8c 8d 01 00	 cmp	 eax, 101772		; 00018d8cH
  04736	74 07		 je	 SHORT $LN753@monster
  04738	3d 8d 8d 01 00	 cmp	 eax, 101773		; 00018d8dH
  0473d	75 06		 jne	 SHORT $LN752@monster
$LN753@monster:

; 9706 : 					d0 += 55;

  0473f	83 c0 37	 add	 eax, 55			; 00000037H
  04742	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
$LN752@monster:

; 9707 : 				if (d0 == 101802 || d0 == 101803 || d0 == 101804)

  04745	3d aa 8d 01 00	 cmp	 eax, 101802		; 00018daaH
  0474a	74 0e		 je	 SHORT $LN755@monster
  0474c	3d ab 8d 01 00	 cmp	 eax, 101803		; 00018dabH
  04751	74 07		 je	 SHORT $LN755@monster
  04753	3d ac 8d 01 00	 cmp	 eax, 101804		; 00018dacH
  04758	75 06		 jne	 SHORT $LN1074@monster
$LN755@monster:

; 9708 : 					d0 += 53;

  0475a	83 c0 35	 add	 eax, 53			; 00000035H
  0475d	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
$LN1074@monster:

; 9709 : 			}
; 9710 : #endif
; 9711 : 			while (1)
; 9712 : 			{
; 9713 : 				d1 = get_num();		//Óé¢Óé£ÓèûÓéÅÓú±?Óéï?Óèù?

  04760	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  04765	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9714 : 				if (d1 == 255)

  04768	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0476d	0f 84 ba f6 ff
	ff		 je	 $LN1104@monster
$LL36@monster:

; 9717 : 						ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9718 : 					break;
; 9719 : 				}
; 9720 : 				a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  04773	68 60 02 00 00	 push	 608			; 00000260H
  04778	6a 47		 push	 71			; 00000047H
  0477a	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0477f	8b f8		 mov	 edi, eax
  04781	83 c4 08	 add	 esp, 8

; 9721 : 				if (a1 == NULL)

  04784	85 ff		 test	 edi, edi
  04786	0f 84 a1 f6 ff
	ff		 je	 $LN1104@monster

; 9722 : 				{
; 9723 : 					ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9724 : 					return;
; 9725 : 				}
; 9726 : 				//Óò©??Óé£Óèû?????ÓèùÓù∏Óçï
; 9727 : 				if (d1 < 0 || d1 >= BATTLKPKPLYAERNUM)

  0478c	8b 75 f8	 mov	 esi, DWORD PTR _d1$[ebp]
  0478f	83 fe 13	 cmp	 esi, 19			; 00000013H
  04792	0f 87 b1 27 00
	00		 ja	 $LN1058@monster

; 9728 : 				{
; 9729 : 					return;
; 9730 : 				}
; 9731 : 				a2 = p_party[d1];		//Óé¢Óé£ÓèûÓéÅ??????????

  04798	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]

; 9732 : 				ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;

  0479f	c6 47 15 58	 mov	 BYTE PTR [edi+21], 88	; 00000058H

; 9733 : 				ATR_NAME(a1) = monster;

  047a3	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 9734 : 				ATR_VCT_NO(a1) = 77;

  047aa	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  047ad	c6 00 4d	 mov	 BYTE PTR [eax], 77	; 0000004dH

; 9735 : 				ATR_CHR_NO(a1) = d0;		//??????

  047b0	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  047b3	89 87 44 01 00
	00		 mov	 DWORD PTR [edi+324], eax

; 9736 : 				/* ???Óñ∫ */
; 9737 : 				LoadBmp(ATR_PAT_NO(a2));

  047b9	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  047bf	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp

; 9738 : 				//??Óù≥?????
; 9739 : #ifndef __CARYTEST
; 9740 : 				ATR_INT_WORK0(a1) = a2->anim_y + SpriteInfo[ATR_PAT_NO(a2)].height / 2;

  047c4	8b 86 9c 00 00
	00		 mov	 eax, DWORD PTR [esi+156]
  047ca	83 c4 04	 add	 esp, 4
  047cd	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 9741 : #else
; 9742 : 				ATR_INT_WORK0(a1) = a2->anim_y + g_lpRealAdrn[ATR_PAT_NO(a2)].height / 2;
; 9743 : #endif
; 9744 : 				//???????????
; 9745 : 				ATR_BODY_WORK(0, a1) = a2;
; 9746 : 				ATR_V_POS(a1) = ATR_V_POS(a2) + ATR_INT_WORK0(a1);
; 9747 : 				ATR_H_POS(a1) = ATR_H_POS(a2);
; 9748 : 				d6++;		//Óë∑???????Óë°

  047d0	43		 inc	 ebx
  047d1	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  047d4	0f bf 04 85 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  047dc	99		 cdq
  047dd	2b c2		 sub	 eax, edx
  047df	d1 f8		 sar	 eax, 1
  047e1	03 86 68 01 00
	00		 add	 eax, DWORD PTR [esi+360]
  047e7	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax
  047ed	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  047f0	89 70 04	 mov	 DWORD PTR [eax+4], esi
  047f3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  047f6	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  047fc	03 46 1c	 add	 eax, DWORD PTR [esi+28]
  047ff	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  04802	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  04805	89 47 18	 mov	 DWORD PTR [edi+24], eax
  04808	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  0480d	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  04810	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  04815	0f 85 58 ff ff
	ff		 jne	 $LL36@monster

; 9715 : 				{	//Óé∑???
; 9716 : 					if (d6 == 0)		//?Óë∑??

  0481b	85 db		 test	 ebx, ebx
  0481d	0f 85 26 27 00
	00		 jne	 $LN1058@monster
  04823	e9 05 f6 ff ff	 jmp	 $LN1104@monster
$LN761@monster:

; 9749 : 			}
; 9750 : 			return;
; 9751 : 		}
; 9752 : 		break;
; 9753 : 	case 77:		//?Ó°á?ÓèùÓù∏Óçï
; 9754 : 		//Óù∏Óçï?Óñ∫
; 9755 : 		a1 = ATR_BODY_WORK(0, a0);

  04828	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 9756 : 		ATR_V_POS(a0) = ATR_V_POS(a1) + ATR_INT_WORK0(a0);

  0482b	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]

; 9757 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  04831	6a 01		 push	 1
  04833	6a 00		 push	 0
  04835	03 46 1c	 add	 eax, DWORD PTR [esi+28]
  04838	57		 push	 edi
  04839	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  0483c	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  04841	83 c4 0c	 add	 esp, 12			; 0000000cH
  04844	85 c0		 test	 eax, eax
  04846	0f 84 fd 26 00
	00		 je	 $LN1058@monster

; 9758 : 		{	//???Óé∑???
; 9759 : 			DeathAction(a0);		//Óé∑?

  0484c	57		 push	 edi
  0484d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 9760 : #ifdef _VARY_WOLF
; 9761 : 			if (a0->anim_chr_no_bak >= 101429 && a0->anim_chr_no_bak <= 101436)

  04852	8b 87 48 01 00
	00		 mov	 eax, DWORD PTR [edi+328]
  04858	83 c4 04	 add	 esp, 4
  0485b	2d 35 8c 01 00	 sub	 eax, 101429		; 00018c35H
  04860	83 f8 07	 cmp	 eax, 7
  04863	77 0a		 ja	 SHORT $LN763@monster

; 9762 : 				a1->anim_chr_no = 101428;

  04865	c7 86 44 01 00
	00 34 8c 01 00	 mov	 DWORD PTR [esi+324], 101428 ; 00018c34H
$LN763@monster:

; 9763 : #endif
; 9764 : #ifdef _PETSKILL_EVOLUTION
; 9765 : 			if ( a0->anim_chr_no_bak==101863 ){ //Á¢∞Âà∞ÁÉüÈõæÂõæÊ°àÂ∞±Áõ¥Êé•ÂèòË∫´
; 9766 : 				if( a1->anim_chr_no == 102009 )
; 9767 : 					a1->anim_chr_no = 102011;
; 9768 : 				else if( a1->anim_chr_no == 102010 )
; 9769 : 					a1->anim_chr_no = 102012;
; 9770 : 			}
; 9771 : #endif
; 9772 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???

  0486f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  04874	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04875	5e		 pop	 esi
  04876	5b		 pop	 ebx
  04877	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0487a	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  0487e	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  04881	8b e5		 mov	 esp, ebp
  04883	5d		 pop	 ebp
  04884	c3		 ret	 0
$LN764@monster:

; 9773 : 			return;
; 9774 : 		}
; 9775 : 		break;
; 9776 : 	case 78:		//???????
; 9777 : 		ATR_FIRST_FLG(a0)++;

  04885	fe 82 1e 01 00
	00		 inc	 BYTE PTR [edx+286]

; 9778 : 		if (ATR_FIRST_FLG(a0) == 60)

  0488b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0488e	80 b8 1e 01 00
	00 3c		 cmp	 BYTE PTR [eax+286], 60	; 0000003cH
  04895	0f 85 ae 26 00
	00		 jne	 $LN1058@monster

; 9779 : 		{
; 9780 : 			ATR_FIRST_FLG(a0) = 0;

  0489b	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 9781 : 			if (ATR_LIFE(a0) <= 0)

  048a2	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  048a6	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  048a9	0f 8f e9 01 00
	00		 jg	 $LN766@monster

; 9782 : 			{	//??????
; 9783 : 				ATR_VCT_NO(a0) = VCT_NO_DIE + 1;		//?Ó†å?

  048af	c6 00 fb	 mov	 BYTE PTR [eax], 251	; 000000fbH

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  048b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  048b7	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?slow_flg@@3HA ; slow_flg
  048bd	5f		 pop	 edi
  048be	5e		 pop	 esi
  048bf	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  048c2	5b		 pop	 ebx
  048c3	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  048c7	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  048ca	8b e5		 mov	 esp, ebp
  048cc	5d		 pop	 ebp
  048cd	c3		 ret	 0
$LN768@monster:

; 9784 : 				slow_flg--;		//?????
; 9785 : 			}
; 9786 : 			else
; 9787 : 				ATR_VCT_NO(a0) = 0;
; 9788 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9789 : 		}
; 9790 : 		break;
; 9791 : 	case 79:		//?ÓùæÓïò?
; 9792 : 		ATR_LONG_WORK(0, a0)++;

  048ce	ff 82 34 01 00
	00		 inc	 DWORD PTR [edx+308]

; 9793 : 		if (ATR_LONG_WORK(0, a0) == 60)

  048d4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  048d7	83 b8 34 01 00
	00 3c		 cmp	 DWORD PTR [eax+308], 60	; 0000003cH
  048de	0f 85 ca 18 00
	00		 jne	 $LN955@monster

; 11396: 					a0mark[i] = 0;

  048e4	e9 8d 00 00 00	 jmp	 $LN1251@monster
$LN770@monster:

; 9794 : 		{
; 9795 : 			ATR_VCT_NO(a0) = 0;
; 9796 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9797 : 		}
; 9798 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);	//???
; 9799 : 		break;
; 9800 : 	case 80:		//‰Ωã??Óé´
; 9801 : 		if (ATR_FIRST_FLG(a0) == 0)

  048e9	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  048f0	75 5a		 jne	 SHORT $LN771@monster

; 9802 : 		{	//???????
; 9803 : 			if (ATR_GROUP_FLG(a0) == 0)

  048f2	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  048f5	84 c0		 test	 al, al
  048f7	75 0c		 jne	 SHORT $LN772@monster

; 9804 : 				ATR_CHR_ANG(a0) = 7;

  048f9	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
  04903	eb 0e		 jmp	 SHORT $LN774@monster
$LN772@monster:

; 9805 : 			else if (ATR_GROUP_FLG(a0) == 1)

  04905	3c 01		 cmp	 al, 1
  04907	75 0a		 jne	 SHORT $LN774@monster

; 9806 : 				ATR_CHR_ANG(a0) = 3;

  04909	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
$LN774@monster:

; 9807 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9808 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 9809 : 				ATR_CHR_ANG(a0) = 1;
; 9810 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 9811 : 				ATR_CHR_ANG(a0) = 5;
; 9812 : #endif
; 9813 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  04913	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  04919	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  0491f	0f b6 c1	 movzx	 eax, cl
  04922	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  04928	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl

; 9814 : 			ATR_SPD(a0) = 32;

  0492e	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H

; 9815 : 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  04938	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 9816 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  04942	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04945	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
$LN771@monster:

; 9817 : 		}
; 9818 : 		gemini(a0);		//?ÓôÆ

  0494c	57		 push	 edi
  0494d	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 9819 : 		if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT)

  04952	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  04957	83 c4 04	 add	 esp, 4
  0495a	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0495d	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  04963	83 c0 6a	 add	 eax, 106		; 0000006aH
  04966	3b c8		 cmp	 ecx, eax
  04968	7f 09		 jg	 SHORT $LN776@monster
  0496a	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  0496d	0f 8d 3b 18 00
	00		 jge	 $LN955@monster
$LN776@monster:

; 9820 : 		{	//?Ó°°???
; 9821 : 			ATR_VCT_NO(a0) = 0;		//ÓòÖÓçè?

  04973	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN1251@monster:

; 10853: #endif
; 10854: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  04976	c6 00 00	 mov	 BYTE PTR [eax], 0
  04979	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  0497e	6a 00		 push	 0
  04980	6a 00		 push	 0
  04982	57		 push	 edi
  04983	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  04986	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  0498a	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  0498d	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04992	83 c4 0c	 add	 esp, 12			; 0000000cH
  04995	5f		 pop	 edi
  04996	5e		 pop	 esi
  04997	5b		 pop	 ebx
  04998	8b e5		 mov	 esp, ebp
  0499a	5d		 pop	 ebp
  0499b	c3		 ret	 0
$LN777@monster:

; 9822 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9823 : 		}
; 9824 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);	//???
; 9825 : 		break;
; 9826 : 	case 82:		//??Óüâ?
; 9827 : 		if (ATR_FIRST_FLG(a0) == 0)

  0499c	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  049a3	75 71		 jne	 SHORT $LN778@monster

; 9828 : 		{	//???????
; 9829 : 			if (ATR_GROUP_FLG(a0) == 0)

  049a5	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  049a8	84 c0		 test	 al, al
  049aa	75 0c		 jne	 SHORT $LN779@monster

; 9830 : 				ATR_CHR_ANG(a0) = 7;

  049ac	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
  049b6	eb 0e		 jmp	 SHORT $LN781@monster
$LN779@monster:

; 9831 : 			else if (ATR_GROUP_FLG(a0) == 1)

  049b8	3c 01		 cmp	 al, 1
  049ba	75 0a		 jne	 SHORT $LN781@monster

; 9832 : 				ATR_CHR_ANG(a0) = 3;

  049bc	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
$LN781@monster:

; 9833 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9834 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 9835 : 				ATR_CHR_ANG(a0) = 1;
; 9836 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 9837 : 				ATR_CHR_ANG(a0) = 5;
; 9838 : #endif
; 9839 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  049c6	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]

; 9840 : 			ATR_CHR_ACT(a0) = ANIM_SIT;		//?????????
; 9841 : 			ATR_CHR_ACT_OLD(a0) = -1;
; 9842 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);	//???

  049cc	6a 00		 push	 0
  049ce	6a 00		 push	 0
  049d0	57		 push	 edi
  049d1	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  049d7	0f b6 c1	 movzx	 eax, cl
  049da	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  049e0	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl
  049e6	c7 87 4c 01 00
	00 05 00 00 00	 mov	 DWORD PTR [edi+332], 5
  049f0	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  049fa	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 9843 : 			ATR_STIMER(a0) = 60;

  049ff	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04a02	83 c4 0c	 add	 esp, 12			; 0000000cH
  04a05	c6 40 01 3c	 mov	 BYTE PTR [eax+1], 60	; 0000003cH

; 9844 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  04a09	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04a0c	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  04a13	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN778@monster:

; 9845 : 		}
; 9846 : 		if (!--ATR_STIMER(a0))

  04a16	80 42 01 ff	 add	 BYTE PTR [edx+1], 255	; 000000ffH
  04a1a	0f 85 29 25 00
	00		 jne	 $LN1058@monster

; 9847 : 		{	//Óé∑???
; 9848 : 			ATR_CHR_NO(a0) = get_num();

  04a20	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  04a25	89 87 44 01 00
	00		 mov	 DWORD PTR [edi+324], eax

; 9849 : 			ATR_CHR_ACT_OLD(a0) = -1;

  04a2b	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1

; 9850 : 			if (ATR_GROUP_FLG(a0) == 0)

  04a35	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  04a38	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  04a3b	84 c0		 test	 al, al
  04a3d	75 0c		 jne	 SHORT $LN783@monster

; 9851 : 				ATR_CHR_ANG(a0) = 3;

  04a3f	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  04a49	eb 0e		 jmp	 SHORT $LN785@monster
$LN783@monster:

; 9852 : 			else if (ATR_GROUP_FLG(a0) == 1)

  04a4b	3c 01		 cmp	 al, 1
  04a4d	75 0a		 jne	 SHORT $LN785@monster

; 9853 : 				ATR_CHR_ANG(a0) = 7;

  04a4f	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN785@monster:

; 9854 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9855 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 9856 : 				ATR_CHR_ANG(a0) = 5;
; 9857 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 9858 : 				ATR_CHR_ANG(a0) = 1;
; 9859 : #endif
; 9860 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  04a59	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]

; 9861 : 			ATR_CHR_ACT(a0) = ANIM_STAND;
; 9862 : 			ATR_CHR_ACT_OLD(a0) = -1;
; 9863 : 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);	//???

  04a5f	6a 00		 push	 0
  04a61	6a 00		 push	 0
  04a63	57		 push	 edi
  04a64	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  04a6a	0f b6 c1	 movzx	 eax, cl
  04a6d	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  04a73	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl
  04a79	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  04a83	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  04a8d	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 9864 : 			ATR_VCT_NO(a0) = 0;

  04a92	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04a95	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN766@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04a98	c6 00 00	 mov	 BYTE PTR [eax], 0
  04a9b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  04aa0	5f		 pop	 edi
  04aa1	5e		 pop	 esi
  04aa2	5b		 pop	 ebx
  04aa3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  04aa6	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  04aaa	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  04aad	8b e5		 mov	 esp, ebp
  04aaf	5d		 pop	 ebp
  04ab0	c3		 ret	 0
$LN786@monster:

; 9865 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9866 : 		}
; 9867 : 		break;
; 9868 : 	case 85:		//?????Óî¥ÓíîÓüâ?
; 9869 : 		if (ATR_GROUP_FLG(a0) == 0)

  04ab1	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  04ab4	84 c0		 test	 al, al
  04ab6	75 0c		 jne	 SHORT $LN787@monster

; 9870 : 			ATR_CHR_ANG(a0) = 3;

  04ab8	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  04ac2	eb 0e		 jmp	 SHORT $LN789@monster
$LN787@monster:

; 9871 : 		else if (ATR_GROUP_FLG(a0) == 1)

  04ac4	3c 01		 cmp	 al, 1
  04ac6	75 0a		 jne	 SHORT $LN789@monster

; 9872 : 			ATR_CHR_ANG(a0) = 7;

  04ac8	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN789@monster:

; 9873 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9874 : 		else if (ATR_GROUP_FLG(a0) == 2)
; 9875 : 			ATR_CHR_ANG(a0) = 5;
; 9876 : 		else if (ATR_GROUP_FLG(a0) == 3)	
; 9877 : 			ATR_CHR_ANG(a0) = 1;
; 9878 : #endif
; 9879 : 		ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  04ad2	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]

; 9880 : 		//Óé£Óèû?????ÓèùÓù∏Óçï
; 9881 : 		a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  04ad8	68 60 02 00 00	 push	 608			; 00000260H
  04add	6a 47		 push	 71			; 00000047H
  04adf	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  04ae5	0f b6 c1	 movzx	 eax, cl
  04ae8	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  04aee	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl
  04af4	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  04af9	8b f0		 mov	 esi, eax
  04afb	83 c4 08	 add	 esp, 8

; 9882 : 		if (a1 == NULL)

  04afe	85 f6		 test	 esi, esi
  04b00	0f 84 d8 db ff
	ff		 je	 $LN1260@monster

; 9883 : 		{
; 9884 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???
; 9885 : 			ATR_VCT_NO(a0) = 0;		//Óïò??
; 9886 : 			return;
; 9887 : 		}
; 9888 : 		/* ÓçØ??? */
; 9889 : 		ATR_NAME(a1) = monster;

  04b06	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 9890 : 		ATR_VCT_NO(a1) = 86;

  04b0d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  04b10	c6 00 56	 mov	 BYTE PTR [eax], 86	; 00000056H

; 9891 : 		/* Óù∏Óçï?ÓìèÓôö */
; 9892 : 		ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;

  04b13	c6 46 15 58	 mov	 BYTE PTR [esi+21], 88	; 00000058H

; 9893 : 		/* ?????Óú±? */
; 9894 : 		ATR_CHR_NO(a1) = SPR_effect01;

  04b17	c7 86 44 01 00
	00 f8 88 01 00	 mov	 DWORD PTR [esi+324], 100600 ; 000188f8H

; 9895 : 		/* ???Óñ∫ */
; 9896 : 		LoadBmp(ATR_PAT_NO(a0));

  04b21	ff b7 9c 00 00
	00		 push	 DWORD PTR [edi+156]
  04b27	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp

; 9897 : 		//??Óù≥?????
; 9898 : #ifndef __CARYTEST
; 9899 : 		ATR_INT_WORK0(a1) = a0->anim_y + SpriteInfo[ATR_PAT_NO(a0)].height / 2;

  04b2c	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  04b32	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 9900 : #else
; 9901 : 		ATR_INT_WORK0(a1) = a0->anim_y + g_lpRealAdrn[ATR_PAT_NO(a0)].height / 2;
; 9902 : #endif
; 9903 : 		//???????????
; 9904 : 		ATR_BODY_WORK(0, a1) = a0;
; 9905 : 		ATR_V_POS(a1) = ATR_V_POS(a0) + ATR_INT_WORK0(a1);
; 9906 : 		ATR_H_POS(a1) = ATR_H_POS(a0);
; 9907 : 		//Óïò??
; 9908 : 		ATR_VCT_NO(a0) = 0;
; 9909 : 		ATR_CHR_ACT_OLD(a0) = -1;
; 9910 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);	//???

  04b35	6a 00		 push	 0
  04b37	6a 00		 push	 0
  04b39	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  04b3c	0f bf 04 85 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  04b44	99		 cdq
  04b45	2b c2		 sub	 eax, edx
  04b47	d1 f8		 sar	 eax, 1
  04b49	03 87 68 01 00
	00		 add	 eax, DWORD PTR [edi+360]
  04b4f	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax
  04b55	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  04b58	57		 push	 edi
  04b59	89 78 04	 mov	 DWORD PTR [eax+4], edi
  04b5c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  04b5f	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  04b65	03 47 1c	 add	 eax, DWORD PTR [edi+28]
  04b68	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  04b6b	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  04b6e	89 46 18	 mov	 DWORD PTR [esi+24], eax
  04b71	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04b74	c6 00 00	 mov	 BYTE PTR [eax], 0
  04b77	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  04b81	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  04b86	83 c4 10	 add	 esp, 16			; 00000010H
  04b89	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04b8a	5e		 pop	 esi
  04b8b	5b		 pop	 ebx
  04b8c	8b e5		 mov	 esp, ebp
  04b8e	5d		 pop	 ebp
  04b8f	c3		 ret	 0
$LN791@monster:

; 9911 : 		break;
; 9912 : 	case 86:		//?????Óî¥ÓíîÓüâ??ÓèùÓù∏Óçï
; 9913 : 		//?Óëë??Óòø??????
; 9914 : 		if (ATR_CHR_NO(a0) == SPR_effect01)

  04b90	81 bf 44 01 00
	00 f8 88 01 00	 cmp	 DWORD PTR [edi+324], 100600 ; 000188f8H
  04b9a	6a 01		 push	 1
  04b9c	75 04		 jne	 SHORT $LN792@monster

; 9915 : 			d0 = pattern(a0, 5, ANM_NO_LOOP);

  04b9e	6a 05		 push	 5
  04ba0	eb 02		 jmp	 SHORT $LN1248@monster
$LN792@monster:

; 9916 : 		else
; 9917 : 			d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP);

  04ba2	6a 00		 push	 0
$LN1248@monster:

; 9918 : 		if (d0)

  04ba4	57		 push	 edi
  04ba5	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  04baa	83 c4 0c	 add	 esp, 12			; 0000000cH
  04bad	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  04bb0	85 c0		 test	 eax, eax
  04bb2	0f 84 91 23 00
	00		 je	 $LN1058@monster

; 9919 : 		{	//???Óé∑???
; 9920 : 			//Óî¥ÓíîÓüâ?
; 9921 : 			ATR_ATTRIB(p_master) = get_num();		//Óî¥ÓíîÓéï?Óèù?

  04bb8	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  04bbd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?p_master@@3PAUaction@@A
  04bc3	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax
$LN1099@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04bc9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  04bce	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  04bd1	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  04bd5	89 41 58	 mov	 DWORD PTR [ecx+88], eax
$LN18@monster:
  04bd8	57		 push	 edi
  04bd9	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  04bde	83 c4 04	 add	 esp, 4
  04be1	5f		 pop	 edi
  04be2	5e		 pop	 esi
  04be3	5b		 pop	 ebx
  04be4	8b e5		 mov	 esp, ebp
  04be6	5d		 pop	 ebp
  04be7	c3		 ret	 0
$LN795@monster:

; 9922 : 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò
; 9923 : 			DeathAction(a0);		//Óé∑?
; 9924 : 			return;
; 9925 : 		}
; 9926 : 		break;
; 9927 : 	case 87:		//???Óô¶??Óì∑
; 9928 : 		ATR_SPD(a0) = 32;		//?ÓôÆÓî≤Óôöspeed

  04be8	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H

; 9929 : 		a1 = p_party[ATR_PLACE_NO(a0) - 5];		//Óîá?Óò©???//ÊïåÊñπ

  04bf2	0f b6 82 1f 01
	00 00		 movzx	 eax, BYTE PTR [edx+287]
  04bf9	8b 0c 85 ec ff
	ff ff		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4-20]

; 9930 : 		d0 = ATR_H_POS(a1);//y

  04c00	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  04c03	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 9931 : 		d1 = ATR_V_POS(a1);//x

  04c06	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  04c09	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 9932 : 		radar(a0, &d0, &d1);	//????//d0:course1  d1:distance

  04c0c	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  04c0f	50		 push	 eax
  04c10	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  04c13	50		 push	 eax
  04c14	57		 push	 edi
  04c15	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 9933 : 		ATR_CRS(a0) = d0;		//??????

  04c1a	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  04c1d	83 c4 0c	 add	 esp, 12			; 0000000cH
  04c20	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 9934 : 		//??Óüâ??????
; 9935 : 		d0 = ATR_CRS(a0) - ATR_CRS_OLD(a0);

  04c26	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  04c29	8b 4d fc	 mov	 ecx, DWORD PTR _d0$[ebp]
  04c2c	0f b6 82 22 01
	00 00		 movzx	 eax, BYTE PTR [edx+290]
  04c33	2b c8		 sub	 ecx, eax
  04c35	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx

; 9936 : 		if (d0 < 0)

  04c38	79 05		 jns	 SHORT $LN796@monster

; 9937 : 			d0 = 0 - d0;

  04c3a	f7 d9		 neg	 ecx
  04c3c	89 4d fc	 mov	 DWORD PTR _d0$[ebp], ecx
$LN796@monster:

; 9938 : 		if (d0 >= 2)
; 9939 : 		{
; 9940 : #ifdef _SKILL_ROAR  //ÂÆ†ÊäÄ:Â§ßÂêº(ÂÖãÂπ¥ÂÖΩ)//‰øÆÊ≠£ÈÄÉË∑ëÊñπÂêë
; 9941 : #else
; 9942 : 			ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */
; 9943 : 			ATR_CRS_OLD(a0) = ATR_CRS(a0);
; 9944 : #endif
; 9945 : 		}
; 9946 : 		if (d1 <= 32 * 2)

  04c3f	83 7d f8 40	 cmp	 DWORD PTR _d1$[ebp], 64	; 00000040H
  04c43	7f 12		 jg	 SHORT $LN798@monster

; 9947 : 		{	//????
; 9948 : 			ATR_FIRST_FLG(a0) = 0;		//????????

  04c45	c6 82 1e 01 00
	00 00		 mov	 BYTE PTR [edx+286], 0

; 9949 : 			ATR_VCT_NO(a0) = 88;		//???Óô¶???

  04c4c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04c4f	c6 00 58	 mov	 BYTE PTR [eax], 88	; 00000058H

; 9950 : 		}

  04c52	e9 93 07 00 00	 jmp	 $LN862@monster
$LN798@monster:

; 10303: 		}
; 10304: 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  04c57	57		 push	 edi
  04c58	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  04c5d	83 c4 04	 add	 esp, 4
  04c60	e9 85 07 00 00	 jmp	 $LN862@monster
$LN800@monster:

; 9951 : 		else
; 9952 : 			gemini(a0);		//?ÓôÆ
; 9953 : 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 9954 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 9955 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 9956 : 		break;
; 9957 : 	case 88:		//???Óô¶??
; 9958 : 		if (ATR_FIRST_FLG(a0) == 0)

  04c65	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  04c6c	75 25		 jne	 SHORT $LN801@monster

; 9959 : 		{	//???????
; 9960 : 			ATR_STIMER(a0) = 40;

  04c6e	c6 42 01 28	 mov	 BYTE PTR [edx+1], 40	; 00000028H

; 9961 : #ifdef _SKILL_ROAR  //ÂÆ†ÊäÄ:Â§ßÂêº(ÂÖãÂπ¥ÂÖΩ)//‰øÆÊ≠£ÈÄÉË∑ëÊñπÂêë
; 9962 : 			//?ÓôÆÓî≤Óôö???
; 9963 : 			ATR_SPD(a0) = 60;

  04c72	c7 87 34 01 00
	00 3c 00 00 00	 mov	 DWORD PTR [edi+308], 60	; 0000003cH

; 9964 : 			ATR_CHR_ACT(a0) = ANIM_DAMAGE;		//ÓòÖÓçè???????

  04c7c	c7 87 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+332], 1

; 9965 : #else
; 9966 : 			//?ÓôÆÓî≤Óôö???
; 9967 : 			ATR_SPD(a0) = 40;
; 9968 : 			ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????
; 9969 : #endif
; 9970 : 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  04c86	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04c89	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  04c90	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN801@monster:

; 9971 : 		}
; 9972 : 		//?ÓôÆ?Óåø??
; 9973 : 		if (!ATR_STIMER(a0)--)

  04c93	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  04c96	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  04c99	88 42 01	 mov	 BYTE PTR [edx+1], al
  04c9c	84 c9		 test	 cl, cl
  04c9e	0f 85 0a 15 00
	00		 jne	 $LN955@monster

; 9974 : 		{
; 9975 : 			ATR_VCT_NO(a0) = 89;		//???Óô¶????

  04ca4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 9976 : 			ATR_STIMER(a0) = 40;
; 9977 : 			//???Óô¶?Óù∏Óçï
; 9978 : 			set_damage_num(a0, 17, -64);

  04ca7	6a c0		 push	 -64			; ffffffc0H
  04ca9	6a 11		 push	 17			; 00000011H
  04cab	57		 push	 edi
  04cac	c6 00 59	 mov	 BYTE PTR [eax], 89	; 00000059H
  04caf	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04cb2	c6 40 01 28	 mov	 BYTE PTR [eax+1], 40	; 00000028H
  04cb6	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 9979 : #ifdef _SKILL_ROAR  //ÂÆ†ÊäÄ:Â§ßÂêº(ÂÖãÂπ¥ÂÖΩ)‰øÆÊ≠£ÈÄÉË∑ëÊñπÂêë
; 9980 : 			if (ATR_GROUP_FLG(a0) == 0)

  04cbb	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  04cbe	83 c4 0c	 add	 esp, 12			; 0000000cH
  04cc1	8a 41 5e	 mov	 al, BYTE PTR [ecx+94]
  04cc4	84 c0		 test	 al, al
  04cc6	75 0c		 jne	 SHORT $LN803@monster

; 9981 : 				ATR_CHR_ANG(a0) = 7;

  04cc8	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
  04cd2	eb 0e		 jmp	 SHORT $LN805@monster
$LN803@monster:

; 9982 : 			else if (ATR_GROUP_FLG(a0) == 1)

  04cd4	3c 01		 cmp	 al, 1
  04cd6	75 0a		 jne	 SHORT $LN805@monster

; 9983 : 				ATR_CHR_ANG(a0) = 3;

  04cd8	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
$LN805@monster:

; 9984 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9985 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 9986 : 				ATR_CHR_ANG(a0) = 1;
; 9987 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 9988 : 				ATR_CHR_ANG(a0) = 5;
; 9989 : #endif
; 9990 : #else
; 9991 : 			if (ATR_GROUP_FLG(a0) == 0)
; 9992 : 				ATR_CHR_ANG(a0) = 3;
; 9993 : 			else if (ATR_GROUP_FLG(a0) == 1)
; 9994 : 				ATR_CHR_ANG(a0) = 7;
; 9995 : #ifdef _BATTLE_PK_PLAYER_FOR_40
; 9996 : 			else if (ATR_GROUP_FLG(a0) == 2)
; 9997 : 				ATR_CHR_ANG(a0) = 5;
; 9998 : 			else if (ATR_GROUP_FLG(a0) == 3)	
; 9999 : 				ATR_CHR_ANG(a0) = 1;
; 10000: #endif
; 10001: #endif
; 10002: 			//Óüµ????
; 10003: 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = (crs_change_tbl2[ATR_CHR_ANG(a0)]) & 31;

  04ce2	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]

; 10853: #endif
; 10854: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  04ce8	6a 00		 push	 0
  04cea	6a 00		 push	 0
  04cec	57		 push	 edi
  04ced	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  04cf4	83 e0 1f	 and	 eax, 31			; 0000001fH
  04cf7	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  04cfd	88 81 22 01 00
	00		 mov	 BYTE PTR [ecx+290], al
  04d03	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04d08	83 c4 0c	 add	 esp, 12			; 0000000cH
  04d0b	5f		 pop	 edi
  04d0c	5e		 pop	 esi
  04d0d	5b		 pop	 ebx
  04d0e	8b e5		 mov	 esp, ebp
  04d10	5d		 pop	 ebp
  04d11	c3		 ret	 0
$LN806@monster:

; 10004: 		}
; 10005: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 10006: 		break;
; 10007: 	case 89:		//???Óô¶???
; 10008: 		if (ATR_STIMER(a0))

  04d12	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  04d15	84 c0		 test	 al, al
  04d17	0f 85 e9 e4 ff
	ff		 jne	 $LN1263@monster

; 10009: 		{
; 10010: 			ATR_STIMER(a0)--;
; 10011: 			break;
; 10012: 		}
; 10013: 		gemini(a0);

  04d1d	57		 push	 edi
  04d1e	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 10014: 		if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT)

  04d23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  04d28	83 c4 04	 add	 esp, 4
  04d2b	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  04d2e	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  04d34	83 c0 6a	 add	 eax, 106		; 0000006aH
  04d37	3b c8		 cmp	 ecx, eax
  04d39	7f 09		 jg	 SHORT $LN809@monster
  04d3b	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  04d3e	0f 8d 0f 06 00
	00		 jge	 $LN854@monster
$LN809@monster:

; 10015: 		{	//?Ó°°???
; 10016: 			ATR_NAME(a0) = NULL;

  04d44	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 10017: 			ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  04d4b	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2

; 10018: 			ATR_VCT_NO(a0) = VCT_NO_APPEAR;

  04d52	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04d55	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H

; 10019: 			ATR_DAMAGE(p_master)++;		//ÓñäÓèù?Óëò

  04d58	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  04d5d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  04d60	ff 40 58	 inc	 DWORD PTR [eax+88]

; 10020: 			//ÓçòÓû§??????
; 10021: 			if (BattleMyNo + 5 == ATR_PLACE_NO(a0))

  04d63	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04d66	0f b6 88 1f 01
	00 00		 movzx	 ecx, BYTE PTR [eax+287]
  04d6d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  04d72	83 c0 05	 add	 eax, 5
  04d75	3b c1		 cmp	 eax, ecx
  04d77	0f 85 d6 05 00
	00		 jne	 $LN854@monster

; 10022: 			{
; 10023: 				// ??????Óé∑??????
; 10024: 				if (att_select_flg == TRUE)

  04d7d	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?att_select_flg@@3DA, 1 ; att_select_flg
  04d84	75 1f		 jne	 SHORT $LN811@monster

; 10025: 				{
; 10026: 					//????
; 10027: 					pc.selectPetNo[pc.battlePetNo] = FALSE;

  04d86	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  04d8d	33 c9		 xor	 ecx, ecx
  04d8f	66 89 0c 45 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[eax*2+172], cx

; 10028: 					pc.battlePetNo = -1;

  04d97	83 c8 ff	 or	 eax, -1
  04d9a	66 a3 aa 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+170, ax

; 10029: 				}

  04da0	e9 ae 05 00 00	 jmp	 $LN854@monster
$LN811@monster:

; 10030: 				else
; 10031: 				{
; 10032: 					// ÓôØ?????
; 10033: 					if (battlePetNoBak2 == pc.battlePetNo)

  04da5	0f bf 0d aa 00
	00 00		 movsx	 ecx, WORD PTR ?pc@@3UPC@@A+170
  04dac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?battlePetNoBak2@@3HA ; battlePetNoBak2
  04db1	3b c1		 cmp	 eax, ecx
  04db3	75 18		 jne	 SHORT $LN813@monster

; 10034: 					{
; 10035: 						//????
; 10036: 						pc.selectPetNo[pc.battlePetNo] = FALSE;

  04db5	33 c0		 xor	 eax, eax
  04db7	66 89 04 4d ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[ecx*2+172], ax

; 10037: 						pc.battlePetNo = -1;

  04dbf	83 c8 ff	 or	 eax, -1
  04dc2	66 a3 aa 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+170, ax

; 10038: 					}

  04dc8	e9 86 05 00 00	 jmp	 $LN854@monster
$LN813@monster:

; 10039: 					else
; 10040: 						//????
; 10041: 						pc.selectPetNo[battlePetNoBak2] = FALSE;

  04dcd	33 c9		 xor	 ecx, ecx
  04dcf	66 89 0c 45 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[eax*2+172], cx

; 11396: 					a0mark[i] = 0;

  04dd7	e9 77 05 00 00	 jmp	 $LN854@monster
$LN815@monster:

; 10042: 				}
; 10043: 			}
; 10044: 		}
; 10045: 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 10046: 		pattern(a0, 1, ANM_LOOP);
; 10047: 		break;
; 10048: 	case 90:		//????Óú∏
; 10049: 		if (ATR_FIRST_FLG(a0) == 0)

  04ddc	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  04de3	8b ca		 mov	 ecx, edx
  04de5	75 2d		 jne	 SHORT $LN816@monster

; 10050: 		{	//???????
; 10051: 			//????Óú∏Óù∏Óçï
; 10052: 			set_damage_num(a0, 18, -64);

  04de7	6a c0		 push	 -64			; ffffffc0H
  04de9	6a 12		 push	 18			; 00000012H
  04deb	57		 push	 edi
  04dec	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 10053: 			ATR_STIMER(a0) = 0;		//????????

  04df1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04df4	83 c4 0c	 add	 esp, 12			; 0000000cH
  04df7	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 10054: 			ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????

  04dfb	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3

; 10055: 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  04e05	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04e08	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  04e0f	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  04e12	8b ca		 mov	 ecx, edx
$LN816@monster:

; 10056: 		}
; 10057: 		//Óüµ?Óéï?Óèù?
; 10058: 		d0 = pet_nix_tbl[ATR_STIMER(a0)++];

  04e14	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  04e18	0f be 80 00 00
	00 00		 movsx	 eax, BYTE PTR ?pet_nix_tbl@@3PADA[eax]
  04e1f	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  04e22	fe 41 01	 inc	 BYTE PTR [ecx+1]

; 10059: 		if (d0 == -2)

  04e25	8b 4d fc	 mov	 ecx, DWORD PTR _d0$[ebp]
  04e28	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  04e2b	75 18		 jne	 SHORT $LN817@monster

; 10060: 		{	//Óé∑???
; 10061: 			ATR_VCT_NO(a0) = 0;		//ÓòÖÓçè?

  04e2d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04e30	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04e31	5e		 pop	 esi
  04e32	5b		 pop	 ebx
  04e33	c6 00 00	 mov	 BYTE PTR [eax], 0
  04e36	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  04e3b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  04e3e	ff 40 58	 inc	 DWORD PTR [eax+88]
  04e41	8b e5		 mov	 esp, ebp
  04e43	5d		 pop	 ebp
  04e44	c3		 ret	 0
$LN817@monster:

; 10062: 			ATR_DAMAGE(p_master)++;		//ÓñäÓèù?Óëò
; 10063: 			break;
; 10064: 		}
; 10065: 		ATR_CHR_ANG(a0) = (ATR_CHR_ANG(a0) + d0) & 7;		//??Óüâ?

  04e45	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]

; 10066: 		pattern(a0, 1, ANM_LOOP);

  04e4b	6a 00		 push	 0
  04e4d	03 c1		 add	 eax, ecx
  04e4f	83 e0 07	 and	 eax, 7
  04e52	6a 01		 push	 1
  04e54	57		 push	 edi
  04e55	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  04e5b	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  04e60	83 c4 0c	 add	 esp, 12			; 0000000cH
  04e63	5f		 pop	 edi
  04e64	5e		 pop	 esi
  04e65	5b		 pop	 ebx
  04e66	8b e5		 mov	 esp, ebp
  04e68	5d		 pop	 ebp
  04e69	c3		 ret	 0
$LN818@monster:

; 10067: 		break;
; 10068: 	case 95:		//Óôπ?????Óåø
; 10069: 		if (ATR_FIRST_FLG(a0) == 0)

  04e6a	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  04e71	0f 85 98 00 00
	00		 jne	 $LN819@monster

; 10070: 		{	//???????
; 10071: 			ATR_LONG_WORK(0, a0) = get_num();		//Óîá?Óò©???

  04e77	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  04e7c	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  04e7f	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax

; 10072: 			ATR_LONG_WORK(1, a0) = get_num();		//Óíï???????

  04e85	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  04e8a	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  04e8d	89 81 38 01 00
	00		 mov	 DWORD PTR [ecx+312], eax

; 10073: 			a1 = ATR_BODY_WORK(0, a0) = p_party[ATR_LONG_WORK(0, a0)];		//Óîá?Óò©???

  04e93	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  04e96	8b 81 34 01 00
	00		 mov	 eax, DWORD PTR [ecx+308]
  04e9c	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  04ea3	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  04ea6	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04ea9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 10074: 			d0 = ATR_INT_WORK0(a1);

  04eac	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  04eaf	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  04eb5	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 10075: 			d1 = ATR_INT_WORK1(a1);

  04eb8	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  04ebb	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  04ec1	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 10076: 			radar(a0, &d0, &d1);	//????

  04ec4	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  04ec7	50		 push	 eax
  04ec8	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  04ecb	50		 push	 eax
  04ecc	57		 push	 edi
  04ecd	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 10077: 			ATR_CRS(a0) = d0;		//??????

  04ed2	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  04ed5	83 c4 0c	 add	 esp, 12			; 0000000cH
  04ed8	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 10078: 			ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  04ede	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  04ee1	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  04ee8	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 10079: 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  04eee	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 10080: 			ATR_SPD(a0) = 32;		//?ÓôÆÓî≤Óôö

  04ef8	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H

; 10081: 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  04f02	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04f05	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  04f0c	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN819@monster:

; 10082: 		}
; 10083: 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  04f0f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 10084: 		d0 = ATR_H_POS(a1);

  04f12	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  04f15	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 10085: 		d1 = ATR_V_POS(a1);

  04f18	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  04f1b	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 10086: 		radar(a0, &d0, &d1);	//????

  04f1e	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  04f21	50		 push	 eax
  04f22	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  04f25	50		 push	 eax
  04f26	57		 push	 edi
  04f27	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 10087: 		ATR_CRS(a0) = d0;		//??????

  04f2c	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 10088: 		gemini(a0);

  04f2f	57		 push	 edi
  04f30	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  04f36	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  04f3b	83 c4 10	 add	 esp, 16			; 00000010H

; 10089: 		if (d1 <= 32 * 2)

  04f3e	83 7d f8 40	 cmp	 DWORD PTR _d1$[ebp], 64	; 00000040H
  04f42	0f 8f a6 02 00
	00		 jg	 $LN839@monster

; 10090: 		{	//????
; 10091: 			ATR_VCT_NO(a0) = 96;		//Óôπ????Óíï??

  04f48	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04f4b	c6 00 60	 mov	 BYTE PTR [eax], 96	; 00000060H

; 10092: 			if (ATR_LONG_WORK(1, a0))

  04f4e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  04f51	83 b9 38 01 00
	00 00		 cmp	 DWORD PTR [ecx+312], 0
  04f58	0f 84 90 02 00
	00		 je	 $LN839@monster

; 10093: 			{	//Óíï???
; 10094: 				a1 = ATR_BODY_WORK(0, a0);		//Óò©????????ÓòÖÓçè

  04f5e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 10095: 				ATR_VCT_NO(a1) = 98;			//

  04f61	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  04f64	c6 00 62	 mov	 BYTE PTR [eax], 98	; 00000062H

; 10096: 				ATR_SPD(a1) = ATR_SPD(a0);

  04f67	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  04f6d	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax

; 10097: 				ATR_CRS(a1) = ATR_CRS(a0);

  04f73	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  04f79	89 81 38 01 00
	00		 mov	 DWORD PTR [ecx+312], eax

; 11396: 					a0mark[i] = 0;

  04f7f	e9 6a 02 00 00	 jmp	 $LN839@monster
$LN822@monster:

; 10098: 			}
; 10099: 		}
; 10100: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 10101: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 10102: 		break;
; 10103: 	case 96:		//Óôπ????Óíï?
; 10104: 		gemini(a0);

  04f84	57		 push	 edi
  04f85	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 10105: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  04f8a	6a 00		 push	 0
  04f8c	6a 00		 push	 0
  04f8e	57		 push	 edi
  04f8f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 10106: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  04f94	6a 00		 push	 0
  04f96	6a 00		 push	 0
  04f98	57		 push	 edi
  04f99	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 10107: 		if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT		//?Ó°°???
; 10108: 			|| ATR_V_POS(a0) > lpDraw->ySize + SCREEN_OUT || ATR_V_POS(a0) < 0 - SCREEN_OUT)

  04f9e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  04fa4	83 c4 1c	 add	 esp, 28			; 0000001cH
  04fa7	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  04faa	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  04fb0	83 c0 6a	 add	 eax, 106		; 0000006aH
  04fb3	3b c8		 cmp	 ecx, eax
  04fb5	7f 1e		 jg	 SHORT $LN824@monster
  04fb7	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  04fba	7c 19		 jl	 SHORT $LN824@monster
  04fbc	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  04fc2	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  04fc5	83 c0 6a	 add	 eax, 106		; 0000006aH
  04fc8	3b c8		 cmp	 ecx, eax
  04fca	7f 09		 jg	 SHORT $LN824@monster
  04fcc	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  04fcf	0f 8d 74 1f 00
	00		 jge	 $LN1058@monster
$LN824@monster:

; 10109: 		{	//?Ó°°???
; 10110: 			ATR_NAME(a0) = NULL;

  04fd5	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 10111: 			ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??
; 10112: 			ATR_VCT_NO(a0) = VCT_NO_APPEAR;
; 10113: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò
; 10114: 			//ÓçòÓû§??????
; 10115: 			if (BattleMyNo + 5 == ATR_PLACE_NO(a0))

  04fdc	83 ca ff	 or	 edx, -1
  04fdf	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2
  04fe6	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04fe9	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H
  04fec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  04ff1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  04ff4	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  04ff8	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  04ffb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  04ffe	0f b6 88 1f 01
	00 00		 movzx	 ecx, BYTE PTR [eax+287]
  05005	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  0500a	83 c0 05	 add	 eax, 5
  0500d	3b c1		 cmp	 eax, ecx
  0500f	75 50		 jne	 SHORT $LN829@monster

; 10116: 			{
; 10117: 				// ??????Óé∑??????
; 10118: 				if (att_select_flg == TRUE)

  05011	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?att_select_flg@@3DA, 1 ; att_select_flg
  05018	75 1a		 jne	 SHORT $LN826@monster

; 10119: 				{
; 10120: 					//????
; 10121: 					pc.selectPetNo[pc.battlePetNo] = FALSE;

  0501a	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  05021	33 c9		 xor	 ecx, ecx
  05023	66 89 0c 45 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[eax*2+172], cx

; 10122: 					pc.battlePetNo = -1;

  0502b	66 89 15 aa 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+170, dx

; 10123: 				}

  05032	eb 2d		 jmp	 SHORT $LN829@monster
$LN826@monster:

; 10124: 				else
; 10125: 				{
; 10126: 					// ÓôØ?????
; 10127: 					if (battlePetNoBak2 == pc.battlePetNo)

  05034	0f bf 0d aa 00
	00 00		 movsx	 ecx, WORD PTR ?pc@@3UPC@@A+170
  0503b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?battlePetNoBak2@@3HA ; battlePetNoBak2
  05040	3b c1		 cmp	 eax, ecx
  05042	75 13		 jne	 SHORT $LN828@monster

; 10128: 					{
; 10129: 						//????
; 10130: 						pc.selectPetNo[pc.battlePetNo] = FALSE;

  05044	33 c0		 xor	 eax, eax
  05046	66 89 04 4d ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[ecx*2+172], ax

; 10131: 						pc.battlePetNo = -1;

  0504e	66 89 15 aa 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+170, dx

; 10132: 					}

  05055	eb 0a		 jmp	 SHORT $LN829@monster
$LN828@monster:

; 10133: 					else
; 10134: 						//????
; 10135: 						pc.selectPetNo[battlePetNoBak2] = FALSE;

  05057	33 c9		 xor	 ecx, ecx
  05059	66 89 0c 45 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[eax*2+172], cx
$LN829@monster:

; 10136: 				}
; 10137: 			}
; 10138: 			if (ATR_LONG_WORK(1, a0))

  05061	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  05064	83 b8 38 01 00
	00 00		 cmp	 DWORD PTR [eax+312], 0
  0506b	0f 84 d8 1e 00
	00		 je	 $LN1058@monster

; 10139: 			{	//Óíï???
; 10140: 				a1 = ATR_BODY_WORK(0, a0);		//Óò©?????

  05071	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 10141: 				ATR_NAME(a1) = NULL;

  05074	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 10142: 				ATR_ATTRIB(a1) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  0507b	83 88 a4 00 00
	00 02		 or	 DWORD PTR [eax+164], 2

; 10143: 				ATR_VCT_NO(a1) = VCT_NO_APPEAR;

  05082	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  05085	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H

; 10144: 				//ÓçòÓû§??????
; 10145: 				if (BattleMyNo + 5 == ATR_LONG_WORK(0, a0))

  05088	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0508b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  05091	83 c1 05	 add	 ecx, 5
  05094	3b 88 34 01 00
	00		 cmp	 ecx, DWORD PTR [eax+308]
  0509a	0f 85 a9 1e 00
	00		 jne	 $LN1058@monster

; 10146: 				{
; 10147: 					// ??????Óé∑??????
; 10148: 					if (att_select_flg == TRUE)

  050a0	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?att_select_flg@@3DA, 1 ; att_select_flg
  050a7	75 1f		 jne	 SHORT $LN832@monster

; 10149: 					{
; 10150: 						//????
; 10151: 						pc.selectPetNo[pc.battlePetNo] = FALSE;

  050a9	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  050b0	33 c9		 xor	 ecx, ecx
  050b2	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  050b3	5e		 pop	 esi
  050b4	5b		 pop	 ebx
  050b5	66 89 0c 45 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[eax*2+172], cx
  050bd	66 89 15 aa 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+170, dx
  050c4	8b e5		 mov	 esp, ebp
  050c6	5d		 pop	 ebp
  050c7	c3		 ret	 0
$LN832@monster:

; 10152: 						pc.battlePetNo = -1;
; 10153: 					}
; 10154: 					else
; 10155: 					{
; 10156: 						// ÓôØ?????
; 10157: 						if (battlePetNoBak2 == pc.battlePetNo)

  050c8	0f bf 0d aa 00
	00 00		 movsx	 ecx, WORD PTR ?pc@@3UPC@@A+170
  050cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?battlePetNoBak2@@3HA ; battlePetNoBak2
  050d4	3b c1		 cmp	 eax, ecx
  050d6	0f 85 d9 c6 ff
	ff		 jne	 $LN349@monster

; 10158: 						{
; 10159: 							//????
; 10160: 							pc.selectPetNo[pc.battlePetNo] = FALSE;

  050dc	5f		 pop	 edi
  050dd	33 c0		 xor	 eax, eax

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  050df	5e		 pop	 esi
  050e0	66 89 04 4d ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[ecx*2+172], ax
  050e8	66 89 15 aa 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+170, dx
  050ef	5b		 pop	 ebx
  050f0	8b e5		 mov	 esp, ebp
  050f2	5d		 pop	 ebp
  050f3	c3		 ret	 0
$LN836@monster:

; 10161: 							pc.battlePetNo = -1;
; 10162: 						}
; 10163: 						else
; 10164: 							//????
; 10165: 							pc.selectPetNo[battlePetNoBak2] = FALSE;
; 10166: 					}
; 10167: 				}
; 10168: 			}
; 10169: 		}
; 10170: 		break;
; 10171: 	case 98:		//Óôπ????Óò©????????ÓòÖÓçè
; 10172: 		gemini(a0);

  050f4	57		 push	 edi
  050f5	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  050fa	83 c4 04	 add	 esp, 4
  050fd	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  050fe	5e		 pop	 esi
  050ff	5b		 pop	 ebx
  05100	8b e5		 mov	 esp, ebp
  05102	5d		 pop	 ebp
  05103	c3		 ret	 0
$LN837@monster:

; 10173: 		break;
; 10174: 	case 100:		//?????Óåø
; 10175: 		if (ATR_FIRST_FLG(a0) == 0)

  05104	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  0510b	0f 85 98 00 00
	00		 jne	 $LN838@monster

; 10176: 		{	//???????
; 10177: 			ATR_LONG_WORK(0, a0) = get_num();		//Óîá?Óò©???

  05111	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  05116	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  05119	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax

; 10178: 			ATR_LONG_WORK(1, a0) = get_num();		//Óíï???????

  0511f	e8 00 00 00 00	 call	 ?get_num@@YAHXZ		; get_num
  05124	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  05127	89 81 38 01 00
	00		 mov	 DWORD PTR [ecx+312], eax

; 10179: 			a1 = ATR_BODY_WORK(0, a0) = p_party[ATR_LONG_WORK(0, a0)];		//Óîá?Óò©???

  0512d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  05130	8b 81 34 01 00
	00		 mov	 eax, DWORD PTR [ecx+308]
  05136	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0513d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  05140	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  05143	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 10180: 			d0 = ATR_INT_WORK0(a1);

  05146	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  05149	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  0514f	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 10181: 			d1 = ATR_INT_WORK1(a1);

  05152	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  05155	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [eax+296]
  0515b	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 10182: 			radar(a0, &d0, &d1);	//????

  0515e	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  05161	50		 push	 eax
  05162	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  05165	50		 push	 eax
  05166	57		 push	 edi
  05167	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 10183: 			ATR_CRS(a0) = d0;		//??????

  0516c	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  0516f	83 c4 0c	 add	 esp, 12			; 0000000cH
  05172	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax

; 10184: 			ATR_CHR_ANG(a0) = crs_change_tbl[ATR_CRS(a0)];		/* ????? */

  05178	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]
  0517b	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  05182	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 10185: 			ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  05188	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 10186: 			ATR_SPD(a0) = 32;		//?ÓôÆÓî≤Óôö

  05192	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H

; 10187: 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  0519c	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0519f	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  051a6	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN838@monster:

; 10188: 		}
; 10189: 		a1 = ATR_BODY_WORK(0, a0);		//Óò©????????

  051a9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 10190: 		d0 = ATR_H_POS(a1);

  051ac	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  051af	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 10191: 		d1 = ATR_V_POS(a1);

  051b2	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  051b5	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 10192: 		radar(a0, &d0, &d1);	//????

  051b8	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  051bb	50		 push	 eax
  051bc	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  051bf	50		 push	 eax
  051c0	57		 push	 edi
  051c1	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 10193: 		ATR_CRS(a0) = d0;		//??????

  051c6	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 10194: 		gemini(a0);

  051c9	57		 push	 edi
  051ca	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  051d0	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  051d5	83 c4 10	 add	 esp, 16			; 00000010H

; 10195: 		if (d1 <= 32 * 2)

  051d8	83 7d f8 40	 cmp	 DWORD PTR _d1$[ebp], 64	; 00000040H
  051dc	7f 10		 jg	 SHORT $LN839@monster

; 10196: 		{	//????
; 10197: 			ATR_VCT_NO(a0) = 101;		//?????

  051de	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  051e1	c6 00 65	 mov	 BYTE PTR [eax], 101	; 00000065H

; 10198: 			ATR_FIRST_FLG(a0) = 0;		//???????

  051e4	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  051e7	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
$LN839@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  051ee	6a 00		 push	 0
  051f0	6a 00		 push	 0
  051f2	57		 push	 edi
  051f3	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  051f8	6a 00		 push	 0
  051fa	6a 00		 push	 0
  051fc	57		 push	 edi
  051fd	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05202	83 c4 18	 add	 esp, 24			; 00000018H
  05205	5f		 pop	 edi
  05206	5e		 pop	 esi
  05207	5b		 pop	 ebx
  05208	8b e5		 mov	 esp, ebp
  0520a	5d		 pop	 ebp
  0520b	c3		 ret	 0
$LN840@monster:

; 10199: 		}
; 10200: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 10201: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 10202: 		break;
; 10203: 	case 101:		//????
; 10204: 		if (ATR_FIRST_FLG(a0) == 0)

  0520c	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  05213	75 11		 jne	 SHORT $LN841@monster

; 10205: 		{	//???????
; 10206: 			ATR_CHR_ACT(a0) = ANIM_ATTACK;		//?????????

  05215	c7 87 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+332], 0

; 10207: 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  0521f	c6 82 1e 01 00
	00 01		 mov	 BYTE PTR [edx+286], 1
$LN841@monster:

; 10208: 		}
; 10209: 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  05226	6a 01		 push	 1
  05228	6a 00		 push	 0
  0522a	57		 push	 edi
  0522b	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05230	83 c4 0c	 add	 esp, 12			; 0000000cH
  05233	85 c0		 test	 eax, eax
  05235	0f 84 0e 1d 00
	00		 je	 $LN1058@monster

; 10210: 		{	//?????Óé∑???
; 10211: 			ATR_CHR_ACT_OLD(a0) = -1;

  0523b	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1

; 10212: 			ATR_VCT_NO(a0) = 102;		//????Óïò??

  05245	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  05248	c6 00 66	 mov	 BYTE PTR [eax], 102	; 00000066H

; 10213: 			ATR_FIRST_FLG(a0) = 0;		//???????

  0524b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0524e	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0524f	5e		 pop	 esi
  05250	5b		 pop	 ebx
  05251	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0
  05258	8b e5		 mov	 esp, ebp
  0525a	5d		 pop	 ebp
  0525b	c3		 ret	 0
$LN843@monster:

; 10214: 		}
; 10215: 		break;
; 10216: 	case 102:		//????Óïò?
; 10217: 		if (ATR_FIRST_FLG(a0) == 0)

  0525c	80 ba 1e 01 00
	00 00		 cmp	 BYTE PTR [edx+286], 0
  05263	75 2d		 jne	 SHORT $LN844@monster

; 10218: 		{	//???????
; 10219: 			ATR_STIMER(a0) = 30;		//‰º°?????

  05265	c6 42 01 1e	 mov	 BYTE PTR [edx+1], 30	; 0000001eH

; 10220: 			if (ATR_LONG_WORK(1, a0))		//Óíï???
; 10221: 				//Óíï?Óù∏Óçï
; 10222: 				set_damage_num(a0, 7, -64);
; 10223: 			else
; 10224: 				//ÓçßÓõ≤Óù∏Óçï
; 10225: 				set_damage_num(a0, 8, -64);
; 10226: 			ATR_FIRST_FLG(a0) = 1;		//?????Óé∑?

  05269	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0526c	6a c0		 push	 -64			; ffffffc0H
  0526e	8b 80 38 01 00
	00		 mov	 eax, DWORD PTR [eax+312]
  05274	f7 d8		 neg	 eax
  05276	1b c0		 sbb	 eax, eax
  05278	83 c0 08	 add	 eax, 8
  0527b	50		 push	 eax
  0527c	57		 push	 edi
  0527d	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num
  05282	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  05285	83 c4 0c	 add	 esp, 12			; 0000000cH
  05288	c6 80 1e 01 00
	00 01		 mov	 BYTE PTR [eax+286], 1
  0528f	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN844@monster:

; 10227: 		}
; 10228: 		ATR_STIMER(a0)--;

  05292	fe 4a 01	 dec	 BYTE PTR [edx+1]

; 10229: 		if (ATR_STIMER(a0) == 0)

  05295	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  05298	80 79 01 00	 cmp	 BYTE PTR [ecx+1], 0
  0529c	0f 85 a7 1c 00
	00		 jne	 $LN1058@monster

; 10230: 		{	//Óé∑???
; 10231: 			if (ATR_LONG_WORK(1, a0))

  052a2	83 b9 38 01 00
	00 00		 cmp	 DWORD PTR [ecx+312], 0
  052a9	0f 84 c0 c6 ff
	ff		 je	 $LN848@monster

; 10232: 			{	//Óíï???
; 10233: 				ATR_VCT_NO(a0) = 103;		//Óô¶??Óåø??

  052af	c6 01 67	 mov	 BYTE PTR [ecx], 103	; 00000067H

; 10234: 				if (ATR_GROUP_FLG(a0) == 0)

  052b2	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  052b5	8a 41 5e	 mov	 al, BYTE PTR [ecx+94]
  052b8	84 c0		 test	 al, al
  052ba	75 0c		 jne	 SHORT $LN850@monster

; 10235: 					ATR_CHR_ANG(a0) = 7;

  052bc	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
  052c6	eb 0e		 jmp	 SHORT $LN852@monster
$LN850@monster:

; 10236: 				else if (ATR_GROUP_FLG(a0) == 1)

  052c8	3c 01		 cmp	 al, 1
  052ca	75 0a		 jne	 SHORT $LN852@monster

; 10237: 					ATR_CHR_ANG(a0) = 3;

  052cc	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
$LN852@monster:

; 10238: #ifdef _BATTLE_PK_PLAYER_FOR_40
; 10239: 				else if (ATR_GROUP_FLG(a0) == 2)
; 10240: 					ATR_CHR_ANG(a0) = 1;
; 10241: 				else if (ATR_GROUP_FLG(a0) == 3)	
; 10242: 					ATR_CHR_ANG(a0) = 5;
; 10243: #endif
; 10244: 				//Óüµ????
; 10245: 				ATR_CRS_OLD(a0) = ATR_CRS(a0) = (crs_change_tbl2[ATR_CHR_ANG(a0)]) & 31;

  052d6	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  052dc	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  052e3	83 e0 1f	 and	 eax, 31			; 0000001fH
  052e6	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  052ec	88 81 22 01 00
	00		 mov	 BYTE PTR [ecx+290], al

; 10246: 				a1 = ATR_BODY_WORK(0, a0);		//?????????
; 10247: 				ATR_VCT_NO(a1) = 104;

  052f2	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  052f5	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  052f6	5e		 pop	 esi
  052f7	5b		 pop	 ebx
  052f8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  052fb	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  052fe	c6 00 68	 mov	 BYTE PTR [eax], 104	; 00000068H
  05301	8b e5		 mov	 esp, ebp
  05303	5d		 pop	 ebp
  05304	c3		 ret	 0
$LN853@monster:

; 10248: 			}
; 10249: 			else
; 10250: 			{
; 10251: 				d0 = ATR_INT_WORK0(a0);		//Óë†???
; 10252: 				d1 = ATR_INT_WORK1(a0);
; 10253: 				radar(a0, &d0, &d1);	//????
; 10254: 				ATR_CHR_ANG(a0) = crs_change_tbl[d0];
; 10255: 				ATR_SPD(a0) = 32;
; 10256: 				ATR_VCT_NO(a0) = 4;		//?Óï§?
; 10257: 			}
; 10258: 		}
; 10259: 		break;
; 10260: 	case 103:		//Óô¶??Óåø?
; 10261: 		gemini(a0);

  05305	57		 push	 edi
  05306	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 10262: 		if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT)

  0530b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  05310	83 c4 04	 add	 esp, 4
  05313	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  05316	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  0531c	83 c0 6a	 add	 eax, 106		; 0000006aH
  0531f	3b c8		 cmp	 ecx, eax
  05321	7f 05		 jg	 SHORT $LN855@monster
  05323	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  05326	7d 2b		 jge	 SHORT $LN854@monster
$LN855@monster:

; 10263: 		{	//?Ó°°???
; 10264: 			ATR_NAME(a0) = NULL;

  05328	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 10265: 			ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  0532f	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2

; 10266: 			ATR_VCT_NO(a0) = VCT_NO_APPEAR;

  05336	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  05339	c6 00 f9	 mov	 BYTE PTR [eax], 249	; 000000f9H

; 10267: 			ATR_DAMAGE(p_master)++;		//ÓñäÓèù?Óëò

  0533c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  05341	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  05344	ff 40 58	 inc	 DWORD PTR [eax+88]

; 10268: 			a1 = ATR_BODY_WORK(0, a0);		//?????ÓòÖÓçè?
; 10269: 			ATR_VCT_NO(a1) = 0;

  05347	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0534a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0534d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  05350	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN854@monster:

; 10270: 		}
; 10271: 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????
; 10272: 		pattern(a0, 1, ANM_LOOP);

  05353	6a 00		 push	 0
  05355	6a 01		 push	 1
  05357	57		 push	 edi
  05358	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  05362	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  05367	83 c4 0c	 add	 esp, 12			; 0000000cH
  0536a	5f		 pop	 edi
  0536b	5e		 pop	 esi
  0536c	5b		 pop	 ebx
  0536d	8b e5		 mov	 esp, ebp
  0536f	5d		 pop	 ebp
  05370	c3		 ret	 0
$LN856@monster:

; 10273: 		break;
; 10274: 	case 104:		//Óô¶?????
; 10275: 		ATR_CHR_ACT(a0) = ANIM_ANGRY;		//Â§Ç????????
; 10276: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  05371	6a 00		 push	 0
  05373	6a 00		 push	 0
  05375	57		 push	 edi
  05376	c7 87 4c 01 00
	00 08 00 00 00	 mov	 DWORD PTR [edi+332], 8
  05380	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  05385	83 c4 0c	 add	 esp, 12			; 0000000cH
  05388	5f		 pop	 edi
  05389	5e		 pop	 esi
  0538a	5b		 pop	 ebx
  0538b	8b e5		 mov	 esp, ebp
  0538d	5d		 pop	 ebp
  0538e	c3		 ret	 0
$LN861@monster:

; 10277: 		break;
; 10278: 	case 105:		//??Óïò?
; 10279: 		if (!--ATR_STIMER(a0))
; 10280: 		{
; 10281: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò
; 10282: 			ATR_VCT_NO(a0) = 0;		//ÓòÖÓçè?
; 10283: 		}
; 10284: 		break;
; 10285: 	case 110:		//????
; 10286: 		if (!--ATR_STIMER(a0))
; 10287: 		{
; 10288: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò
; 10289: 			ATR_VCT_NO(a0) = 0;		//ÓòÖÓçè?
; 10290: 		}
; 10291: 		break;
; 10292: #ifdef _SKILL_SELFEXPLODE //Ëá™ÁàÜ
; 10293: 	case 114:		//Ëá™ÁàÜ
; 10294: 		ATR_SPD(a0) = 63;

  0538f	c7 87 34 01 00
	00 3f 00 00 00	 mov	 DWORD PTR [edi+308], 63	; 0000003fH

; 10295: 		ATR_ATTRIB(a0) |= ACT_ATR_HIDE;		//Óù∏Óçï??

  05399	83 8f a4 00 00
	00 02		 or	 DWORD PTR [edi+164], 2

; 10296: 		d0 = ATR_INT_WORK0(a0);

  053a0	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  053a6	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 10297: 		d1 = ATR_INT_WORK1(a0);

  053a9	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]

; 10298: 		gemini(a0);		//?ÓôÆ

  053af	57		 push	 edi
  053b0	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax
  053b3	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 10299: 		if (ATR_H_POS(a0) > lpDraw->xSize + SCREEN_OUT || ATR_H_POS(a0) < 0 - SCREEN_OUT)

  053b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  053bd	83 c4 04	 add	 esp, 4
  053c0	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  053c3	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  053c9	83 c0 6a	 add	 eax, 106		; 0000006aH
  053cc	3b c8		 cmp	 ecx, eax
  053ce	7f 05		 jg	 SHORT $LN863@monster
  053d0	83 f9 96	 cmp	 ecx, -106		; ffffff96H
  053d3	7d 15		 jge	 SHORT $LN862@monster
$LN863@monster:

; 10300: 		{	//?Ó°°???
; 10301: 			ATR_VCT_NO(a0) = 0;		//ÓòÖÓçè?

  053d5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  053d8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 10302: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);		//???Óëò???

  053db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  053e0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  053e3	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  053e7	89 41 58	 mov	 DWORD PTR [ecx+88], eax
$LN862@monster:

; 10305: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  053ea	6a 00		 push	 0
  053ec	6a 00		 push	 0
  053ee	57		 push	 edi
  053ef	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4
  053f9	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 10306: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  053fe	6a 00		 push	 0
  05400	6a 00		 push	 0
  05402	57		 push	 edi
  05403	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05408	83 c4 18	 add	 esp, 24			; 00000018H
  0540b	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0540c	5e		 pop	 esi
  0540d	5b		 pop	 ebx
  0540e	8b e5		 mov	 esp, ebp
  05410	5d		 pop	 ebp
  05411	c3		 ret	 0
$LN864@monster:

; 10307: 		break;
; 10308: #endif
; 10309: 		//249:
; 10310: 	case VCT_NO_APPEAR:		//ÓôëÓê∂
; 10311: 		if (ATR_GROUP_FLG(a0) == 0)

  05412	8a 42 5e	 mov	 al, BYTE PTR [edx+94]
  05415	84 c0		 test	 al, al
  05417	75 0c		 jne	 SHORT $LN865@monster

; 10312: 			ATR_CHR_ANG(a0) = 3;

  05419	c7 87 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+340], 3
  05423	eb 0e		 jmp	 SHORT $LN867@monster
$LN865@monster:

; 10313: 		else if (ATR_GROUP_FLG(a0) == 1)

  05425	3c 01		 cmp	 al, 1
  05427	75 0a		 jne	 SHORT $LN867@monster

; 10314: 			ATR_CHR_ANG(a0) = 7;

  05429	c7 87 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edi+340], 7
$LN867@monster:

; 10315: #ifdef _BATTLE_PK_PLAYER_FOR_40
; 10316: 		else if (ATR_GROUP_FLG(a0) == 2)
; 10317: 			ATR_CHR_ANG(a0) = 5;
; 10318: 		else if (ATR_GROUP_FLG(a0) == 3)	
; 10319: 			ATR_CHR_ANG(a0) = 1;
; 10320: #endif
; 10321: 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  05433	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 10322: 		ATR_SPD(a0) = 12;

  0543d	c7 87 34 01 00
	00 0c 00 00 00	 mov	 DWORD PTR [edi+308], 12	; 0000000cH

; 10323: 		d0 = ATR_INT_WORK0(a0);

  05447	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  0544d	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 10324: 		d1 = ATR_INT_WORK1(a0);

  05450	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  05456	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 10325: 		radar(a0, &d0, &d1);	//????

  05459	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  0545c	50		 push	 eax
  0545d	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  05460	50		 push	 eax
  05461	57		 push	 edi
  05462	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 10326: 		ATR_CRS(a0) = d0;		//??????

  05467	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 10327: 		gemini(a0);		//?ÓôÆ

  0546a	57		 push	 edi
  0546b	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  05471	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 10328: 		if (d1 <= (ATR_SPD(a0) >> 2) || ATR_CHR_NO(a0) == 101490)

  05476	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  0547c	83 c4 10	 add	 esp, 16			; 00000010H
  0547f	c1 f8 02	 sar	 eax, 2
  05482	39 45 f8	 cmp	 DWORD PTR _d1$[ebp], eax
  05485	7e 10		 jle	 SHORT $LN869@monster
  05487	81 bf 44 01 00
	00 72 8c 01 00	 cmp	 DWORD PTR [edi+324], 101490 ; 00018c72H
  05491	0f 85 17 0d 00
	00		 jne	 $LN955@monster
$LN869@monster:

; 10329: 		{	//????
; 10330: 			ATR_H_POS(a0) = ATR_INT_WORK0(a0);		//?Óù≥ÓüúÓíú

  05497	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 10853: #endif
; 10854: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0549a	6a 00		 push	 0
  0549c	6a 00		 push	 0
  0549e	57		 push	 edi
  0549f	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  054a5	89 47 18	 mov	 DWORD PTR [edi+24], eax
  054a8	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  054ae	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  054b1	c6 01 00	 mov	 BYTE PTR [ecx], 0
  054b4	c7 87 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edi+332], 3
  054be	c7 87 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+308], 32	; 00000020H
  054c8	8b 87 54 01 00
	00		 mov	 eax, DWORD PTR [edi+340]
  054ce	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  054d4	0f b6 c1	 movzx	 eax, cl
  054d7	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  054dd	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  054e0	88 88 22 01 00
	00		 mov	 BYTE PTR [eax+290], cl
  054e6	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  054eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  054ee	5f		 pop	 edi
  054ef	5e		 pop	 esi
  054f0	5b		 pop	 ebx
  054f1	8b e5		 mov	 esp, ebp
  054f3	5d		 pop	 ebp
  054f4	c3		 ret	 0
$LN870@monster:

; 10331: 			ATR_V_POS(a0) = ATR_INT_WORK1(a0);
; 10332: 			ATR_VCT_NO(a0) = 0;		//Óïò??
; 10333: 			ATR_CHR_ACT(a0) = ANIM_STAND;		//ÓòÖÓçè???????
; 10334: 			ATR_SPD(a0) = 32;
; 10335: 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];
; 10336: 		}
; 10337: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);
; 10338: 		break;
; 10339: 	case VCT_NO_DIE:		//?Ó†å
; 10340: 		ATR_SPD(a0) = 4;

  054f5	c7 87 34 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+308], 4

; 10341: 		d0 = ATR_INT_WORK0(a0);

  054ff	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  05505	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax

; 10342: 		d1 = ATR_INT_WORK1(a0);

  05508	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  0550e	89 45 f8	 mov	 DWORD PTR _d1$[ebp], eax

; 10343: 		radar(a0, &d0, &d1);	//????

  05511	8d 45 f8	 lea	 eax, DWORD PTR _d1$[ebp]
  05514	50		 push	 eax
  05515	8d 45 fc	 lea	 eax, DWORD PTR _d0$[ebp]
  05518	50		 push	 eax
  05519	57		 push	 edi
  0551a	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 10344: 		ATR_CRS(a0) = d0;		//??????

  0551f	8b 45 fc	 mov	 eax, DWORD PTR _d0$[ebp]

; 10345: 		gemini(a0);		//?ÓôÆ

  05522	57		 push	 edi
  05523	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  05529	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 10346: 		if (d1 <= (ATR_SPD(a0) >> 2))

  0552e	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  05534	83 c4 10	 add	 esp, 16			; 00000010H
  05537	c1 f8 02	 sar	 eax, 2
  0553a	39 45 f8	 cmp	 DWORD PTR _d1$[ebp], eax
  0553d	7f 18		 jg	 SHORT $LN871@monster

; 10347: 		{	//????
; 10348: 			ATR_H_POS(a0) = ATR_INT_WORK0(a0);		//?Óù≥ÓüúÓíú

  0553f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  05542	8b 81 24 01 00
	00		 mov	 eax, DWORD PTR [ecx+292]
  05548	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 10349: 			ATR_V_POS(a0) = ATR_INT_WORK1(a0);

  0554b	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]
  05551	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 10350: 			ATR_VCT_NO(a0) = VCT_NO_DIE + 1;		//?Ó†å????

  05554	c6 01 fb	 mov	 BYTE PTR [ecx], 251	; 000000fbH
$LN871@monster:

; 10351: 		}
; 10352: 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  05557	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 10353: 		if (s_timer & 1)

  05561	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?s_timer@@3GA, 1
  05568	0f 84 db 19 00
	00		 je	 $LN1058@monster

; 10354: 			pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  0556e	6a 00		 push	 0
  05570	6a 00		 push	 0
  05572	57		 push	 edi
  05573	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  05578	83 c4 0c	 add	 esp, 12			; 0000000cH
  0557b	5f		 pop	 edi
  0557c	5e		 pop	 esi
  0557d	5b		 pop	 ebx
  0557e	8b e5		 mov	 esp, ebp
  05580	5d		 pop	 ebp
  05581	c3		 ret	 0
$LN873@monster:

; 10355: 		break;
; 10356: 	case VCT_NO_DIE + 1:		//?Ó†å
; 10357: 		ATR_CHR_ACT(a0) = ANIM_DEAD;		//?Ó†å???????
; 10358: 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  05582	6a 01		 push	 1
  05584	6a 00		 push	 0
  05586	57		 push	 edi
  05587	c7 87 4c 01 00
	00 02 00 00 00	 mov	 DWORD PTR [edi+332], 2
  05591	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05596	83 c4 0c	 add	 esp, 12			; 0000000cH
  05599	85 c0		 test	 eax, eax
  0559b	0f 84 a8 19 00
	00		 je	 $LN1058@monster

; 10359: 		{	//???Óé∑???
; 10360: #ifdef __NEW_BATTLE_EFFECT
; 10361: 			int effect = ATR_EFFECT_FLAG(a0);
; 10362: 			int effect_anim = ATR_EFFECT_ANIM(a0);

  055a1	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 10363: 
; 10364: 			switch (effect)

  055a4	8b 81 48 02 00
	00		 mov	 eax, DWORD PTR [ecx+584]
  055aa	8b 99 4c 02 00
	00		 mov	 ebx, DWORD PTR [ecx+588]
  055b0	83 e8 01	 sub	 eax, 1
  055b3	0f 85 9f 00 00
	00		 jne	 $LN38@monster

; 10365: 			{
; 10366: 			case 1:	//ÊõøË∫´Â®ÉÂ®É
; 10367: 				a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  055b9	68 60 02 00 00	 push	 608			; 00000260H
  055be	6a 47		 push	 71			; 00000047H
  055c0	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  055c5	8b f0		 mov	 esi, eax
  055c7	83 c4 08	 add	 esp, 8

; 10368: 				if (a1 == NULL)

  055ca	85 f6		 test	 esi, esi
  055cc	75 22		 jne	 SHORT $LN876@monster

; 10369: 				{
; 10370: 					ATR_EFFECT_FLAG(a0) = 0;

  055ce	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  055d1	89 b0 48 02 00
	00		 mov	 DWORD PTR [eax+584], esi

; 10371: 					ATR_EFFECT_ANIM(a0) = 0;

  055d7	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  055da	89 b0 4c 02 00
	00		 mov	 DWORD PTR [eax+588], esi

; 10372: 					ATR_EFFECT_PARAM(a0) = 0;

  055e0	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  055e3	5f		 pop	 edi
  055e4	89 b0 50 02 00
	00		 mov	 DWORD PTR [eax+592], esi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  055ea	5e		 pop	 esi
  055eb	5b		 pop	 ebx
  055ec	8b e5		 mov	 esp, ebp
  055ee	5d		 pop	 ebp
  055ef	c3		 ret	 0
$LN876@monster:

; 10373: 					return;
; 10374: 				}
; 10375: 				ATR_DISP_PRIO(a1) = D_PRIO_HIT_MARK;

  055f0	c6 46 15 58	 mov	 BYTE PTR [esi+21], 88	; 00000058H

; 10376: 				ATR_NAME(a1) = monster;

  055f4	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 10377: 				ATR_VCT_NO(a1) = VCT_NO_EFFECT;

  055fb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  055fe	c6 00 ff	 mov	 BYTE PTR [eax], 255	; 000000ffH

; 10378: 				ATR_CHR_NO(a1) = effect_anim;

  05601	89 9e 44 01 00
	00		 mov	 DWORD PTR [esi+324], ebx

; 10379: 				LoadBmp(ATR_PAT_NO(a0));

  05607	ff b7 9c 00 00
	00		 push	 DWORD PTR [edi+156]
  0560d	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp

; 10380: #ifndef __CARYTEST
; 10381: 				ATR_INT_WORK0(a1) = a0->anim_y + SpriteInfo[ATR_PAT_NO(a0)].height / 2;

  05612	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  05618	83 c4 04	 add	 esp, 4
  0561b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0561e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  05621	0f bf 04 85 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  05629	99		 cdq
  0562a	2b c2		 sub	 eax, edx
  0562c	d1 f8		 sar	 eax, 1
  0562e	03 87 68 01 00
	00		 add	 eax, DWORD PTR [edi+360]
  05634	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 10382: #else
; 10383: 				ATR_INT_WORK0(a1) = a0->anim_y + g_lpRealAdrn[ATR_PAT_NO(a0)].height / 2;
; 10384: #endif
; 10385: 				ATR_BODY_WORK(0, a1) = a0;

  0563a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0563d	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 10386: 				ATR_V_POS(a1) = ATR_V_POS(a0) + ATR_INT_WORK0(a1);

  05640	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05643	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  05649	03 47 1c	 add	 eax, DWORD PTR [edi+28]
  0564c	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 10387: 				ATR_H_POS(a1) = ATR_H_POS(a0);

  0564f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  05652	89 46 18	 mov	 DWORD PTR [esi+24], eax
  05655	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
$LN38@monster:

; 10388: 				break;
; 10389: 			}
; 10390: #endif
; 10391: 			ATR_VCT_NO(a0) = VCT_NO_DIE + 2;
; 10392: 			set_piyo_loop(a0);

  05658	57		 push	 edi
  05659	c6 01 fc	 mov	 BYTE PTR [ecx], 252	; 000000fcH
  0565c	e8 00 00 00 00	 call	 ?set_piyo_loop@@YAXPAUaction@@@Z ; set_piyo_loop

; 10393: 			play_se(6, ATR_H_POS(a0), 240);

  05661	68 f0 00 00 00	 push	 240			; 000000f0H
  05666	ff 77 18	 push	 DWORD PTR [edi+24]
  05669	6a 06		 push	 6
  0566b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  05670	83 c4 10	 add	 esp, 16			; 00000010H
  05673	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  05674	5e		 pop	 esi
  05675	5b		 pop	 ebx
  05676	8b e5		 mov	 esp, ebp
  05678	5d		 pop	 ebp
  05679	c3		 ret	 0
$LN878@monster:

; 10394: 		}
; 10395: 		break;
; 10396: 	case VCT_NO_DIE + 2:
; 10397: 		break;
; 10398: #ifdef __NEW_BATTLE_EFFECT
; 10399: 		//	case VCT_NO_PAUSE:
; 10400: 		//		break;
; 10401: 	case VCT_NO_EFFECT:
; 10402: 	{
; 10403: 						  a1 = ATR_BODY_WORK(0, a0);

  0567a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 10404: 						  int effect = ATR_EFFECT_FLAG(a1);

  0567d	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 10405: 
; 10406: 						  switch (effect)

  05680	8b 81 48 02 00
	00		 mov	 eax, DWORD PTR [ecx+584]
  05686	83 e8 01	 sub	 eax, 1
  05689	74 3f		 je	 SHORT $LN879@monster

; 10423: 							  }
; 10424: 							  return;
; 10425: 						  default:
; 10426: 							  ATR_EFFECT_FLAG(a1) = 0;

  0568b	c7 81 48 02 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+584], 0

; 10427: 							  ATR_EFFECT_ANIM(a1) = 0;

  05695	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 10428: 							  ATR_EFFECT_PARAM(a1) = 0;
; 10429: 							  DeathAction(a0);

  05698	57		 push	 edi
  05699	c7 80 4c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+588], 0
  056a3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  056a6	c7 80 50 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+592], 0
  056b0	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10430: 							  ATR_DAMAGE(p_master)++;

  056b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  056ba	83 c4 04	 add	 esp, 4
  056bd	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  056c0	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  056c1	5e		 pop	 esi
  056c2	5b		 pop	 ebx
  056c3	ff 40 58	 inc	 DWORD PTR [eax+88]
  056c6	8b e5		 mov	 esp, ebp
  056c8	5d		 pop	 ebp
  056c9	c3		 ret	 0
$LN879@monster:

; 10407: 						  {
; 10408: 						  case 1:			//ÊõøË∫´Â®ÉÂ®É
; 10409: 							  ATR_V_POS(a0) = ATR_V_POS(a1) + ATR_INT_WORK0(a0);

  056ca	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  056d0	03 46 1c	 add	 eax, DWORD PTR [esi+28]

; 10410: 							  if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  056d3	6a 01		 push	 1
  056d5	6a 00		 push	 0
  056d7	57		 push	 edi
  056d8	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  056db	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  056e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  056e3	85 c0		 test	 eax, eax
  056e5	0f 84 5e 18 00
	00		 je	 $LN1058@monster

; 10411: 							  {
; 10412: 								  ATR_LIFE(a1) = ATR_EFFECT_PARAM(a1);

  056eb	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 10413: 								  if (ATR_LIFE(a1) > ATR_MAX_LIFE(a1))

  056ee	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]

; 10414: 									  ATR_LIFE(a1) = ATR_MAX_LIFE(a1);
; 10415: 								  ATR_VCT_NO(a1) = 0;
; 10416: 								  ATR_CHR_ACT(a1) = ANIM_STAND;
; 10417: 								  pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  056f4	6a 00		 push	 0
  056f6	6a 00		 push	 0
  056f8	8b 8a 50 02 00
	00		 mov	 ecx, DWORD PTR [edx+592]
  056fe	3b c8		 cmp	 ecx, eax
  05700	56		 push	 esi
  05701	0f 4f c8	 cmovg	 ecx, eax
  05704	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
  05707	c6 02 00	 mov	 BYTE PTR [edx], 0
  0570a	c7 86 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+332], 3
  05714	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 10418: 								  ATR_EFFECT_FLAG(a1) = 0;

  05719	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 10419: 								  ATR_EFFECT_ANIM(a1) = 0;
; 10420: 								  ATR_EFFECT_PARAM(a1) = 0;
; 10421: 								  DeathAction(a0);

  0571c	57		 push	 edi
  0571d	c7 80 48 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+584], 0
  05727	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0572a	c7 80 4c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+588], 0
  05734	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05737	c7 80 50 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+592], 0
  05741	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10422: 								  ATR_DAMAGE(p_master)++;

  05746	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  0574b	83 c4 10	 add	 esp, 16			; 00000010H
  0574e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  05751	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  05752	5e		 pop	 esi
  05753	5b		 pop	 ebx
  05754	ff 40 58	 inc	 DWORD PTR [eax+88]
  05757	8b e5		 mov	 esp, ebp
  05759	5d		 pop	 ebp
  0575a	c3		 ret	 0
$LN883@monster:

; 10431: 							  break;
; 10432: 						  }
; 10433: 	}
; 10434: 		break;
; 10435: #endif
; 10436: #ifdef __ATTACK_MAGIC
; 10437: 		// ‰∫ßÁîüÂâçÁΩÆÂä®Áîª
; 10438: 	case ATTACK_MAGIC_CASE:
; 10439: 		// ÊòØÂê¶Âú®Âè≥‰∏ãÊñπ
; 10440: 		(0 == ATR_GROUP_FLG(a0)) ? ATR_CHR_ANG(a0) = 3 : ATR_CHR_ANG(a0) = 7;
; 10441: 		ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  0575b	33 c0		 xor	 eax, eax
  0575d	38 42 5e	 cmp	 BYTE PTR [edx+94], al
  05760	0f 95 c0	 setne	 al
  05763	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [eax*4+3]
  0576a	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  05770	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  05776	0f b6 c1	 movzx	 eax, cl
  05779	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  0577f	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl

; 10442: 		if (0XFFFFFFFF != AttMgc.iPreMgcNum)

  05785	83 3d 1c 00 00
	00 ff		 cmp	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+28, -1
  0578c	0f 84 80 00 00
	00		 je	 $LN884@monster

; 10443: 		{
; 10444: 			if (NULL == (a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU))))

  05792	68 60 02 00 00	 push	 608			; 00000260H
  05797	6a 47		 push	 71			; 00000047H
  05799	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0579e	8b c8		 mov	 ecx, eax
  057a0	83 c4 08	 add	 esp, 8
  057a3	85 c9		 test	 ecx, ecx
  057a5	0f 84 33 cf ff
	ff		 je	 $LN1260@monster

; 10445: 			{
; 10446: 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 10447: 				ATR_VCT_NO(a0) = 0;
; 10448: 				return;
; 10449: 			}
; 10450: 			ATR_NAME(a1) = monster;

  057ab	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 10451: 			ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 1;		// ÂâçÁΩÆÂä®Áîª

  057b2	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  057b5	c6 00 c9	 mov	 BYTE PTR [eax], 201	; 000000c9H

; 10452: #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 10453: 			if (AttMgc.iPreMgcNum == 101120)

  057b8	81 3d 1c 00 00
	00 00 8b 01 00	 cmp	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+28, 101120 ; 00018b00H
  057c2	75 1b		 jne	 SHORT $LN886@monster

; 10454: 				ATR_DISP_PRIO(a1)	= (1 == AttMgc.wPreMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  057c4	be 01 00 00 00	 mov	 esi, 1
  057c9	b8 02 00 00 00	 mov	 eax, 2
  057ce	66 3b 35 3c 00
	00 00		 cmp	 si, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+60
  057d5	ba 58 00 00 00	 mov	 edx, 88			; 00000058H
  057da	0f 44 c2	 cmove	 eax, edx
  057dd	eb 05		 jmp	 SHORT $LN887@monster
$LN886@monster:

; 10455: 			else 
; 10456: 				ATR_DISP_PRIO(a1)	= ATR_DISP_PRIO(a0) + 1;

  057df	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  057e2	fe c0		 inc	 al
$LN887@monster:

; 10457: #else
; 10458: 			ATR_DISP_PRIO(a1) = (1 == AttMgc.wPreMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;
; 10459: #endif
; 10460: 			ATR_CHR_NO(a1) = AttMgc.iPreMgcNum;

  057e4	88 41 15	 mov	 BYTE PTR [ecx+21], al
  057e7	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+28
  057ec	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 10461: 			ATR_BODY_WORK(0, a1) = a0;

  057f2	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  057f5	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 10462: 			ATR_H_POS(a1) = ATR_H_POS(a0) + AttMgc.wPreMgcX;

  057f8	0f b7 05 34 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+52
  057ff	03 47 18	 add	 eax, DWORD PTR [edi+24]
  05802	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 10463: 			ATR_V_POS(a1) = ATR_V_POS(a0) + AttMgc.wPreMgcY;

  05805	0f b7 05 36 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+54
  0580c	03 47 1c	 add	 eax, DWORD PTR [edi+28]
  0580f	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$LN884@monster:

; 10464: 		}
; 10465: 		ATR_VCT_NO(a0) = 0;

  05812	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 10466: 		ATR_CHR_ACT_OLD(a0) = -1;
; 10467: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  05815	6a 00		 push	 0
  05817	6a 00		 push	 0
  05819	57		 push	 edi
  0581a	c6 00 00	 mov	 BYTE PTR [eax], 0
  0581d	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  05827	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0582c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0582f	5f		 pop	 edi
  05830	5e		 pop	 esi
  05831	5b		 pop	 ebx
  05832	8b e5		 mov	 esp, ebp
  05834	5d		 pop	 ebp
  05835	c3		 ret	 0
$LN888@monster:

; 10468: 		break;
; 10469: 		// ÊâßË°åÂâçÁΩÆÂä®Áîª
; 10470: 	case ATTACK_MAGIC_CASE + 1:
; 10471: 		a1 = ATR_BODY_WORK(0, a0);

  05836	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 10472: 		ATR_H_POS(a0) = ATR_H_POS(a1) + AttMgc.wPreMgcX;

  05839	0f b7 05 34 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+52

; 10473: 		ATR_V_POS(a0) = ATR_V_POS(a1) + AttMgc.wPreMgcY;
; 10474: 		if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  05840	6a 01		 push	 1
  05842	6a 00		 push	 0
  05844	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  05847	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0584a	0f b7 05 36 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+54
  05851	03 41 1c	 add	 eax, DWORD PTR [ecx+28]
  05854	57		 push	 edi
  05855	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  05858	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0585d	83 c4 0c	 add	 esp, 12			; 0000000cH
  05860	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  05863	85 c0		 test	 eax, eax
  05865	0f 84 de 16 00
	00		 je	 $LN1058@monster

; 10475: 		{
; 10476: 			DeathAction(a0);

  0586b	57		 push	 edi
  0586c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  05871	83 c4 04	 add	 esp, 4

; 10477: 			AttMgc.wRunPreMgc = TRUE;

  05874	b8 01 00 00 00	 mov	 eax, 1
  05879	66 a3 28 00 00
	00		 mov	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+40, ax
  0587f	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  05880	5e		 pop	 esi
  05881	5b		 pop	 ebx
  05882	8b e5		 mov	 esp, ebp
  05884	5d		 pop	 ebp
  05885	c3		 ret	 0
$LN890@monster:

; 10478: 			//ToCallMgc.wRunPreMgc = TRUE;
; 10479: 		}
; 10480: 		break;
; 10481: 		// ÊâßË°åÁõÆÂâçÁöÑÂííÊúØ
; 10482: 	case ATTACK_MAGIC_CASE + 2:
; 10483: 	{
; 10484: 								  idx = ATR_LONG_WORK(0, a0);

  05886	8b b2 34 01 00
	00		 mov	 esi, DWORD PTR [edx+308]
  0588c	89 75 ec	 mov	 DWORD PTR _idx$1$[ebp], esi

; 10485: 
; 10486: 								  // Êí≠ÊîæÁöÑÊòØÁõ∏ÂØπ‰∫é‰∫∫Áâ©ÁöÑ‰ΩçÁΩÆ
; 10487: 								  if (20 != idx)

  0588f	83 fe 14	 cmp	 esi, 20			; 00000014H
  05892	74 20		 je	 SHORT $LN891@monster

; 10488: 								  {
; 10489: 									  a1 = p_party[idx];

  05894	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]

; 10490: 									  ATR_H_POS(a0) = ATR_H_POS(a1) + AttMgc.posAttacked[0].x;

  0589b	0f b7 05 82 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+130
  058a2	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  058a5	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 10491: 									  ATR_V_POS(a0) = ATR_V_POS(a1) + AttMgc.posAttacked[0].y;

  058a8	0f b7 05 84 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+132
  058af	03 41 1c	 add	 eax, DWORD PTR [ecx+28]

; 10492: 								  }

  058b2	eb 2c		 jmp	 SHORT $LN892@monster
$LN891@monster:

; 10493: 								  // Êí≠ÊîæÁªùÂØπÂ∫ßÊ†áÁöÑÂííÊúØ
; 10494: 								  else
; 10495: 								  {
; 10496: 									  int value = 0;

  058b4	33 c9		 xor	 ecx, ecx

; 10497: 
; 10498: 									  // ÁõÆÂâçÊ≠£Âú®Âú∞Èúá‰∏≠
; 10499: 									  if (2 == g_iRunEarthQuake)

  058b6	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_iRunEarthQuake@@3HA, 2 ; g_iRunEarthQuake
  058bd	75 18		 jne	 SHORT $LN893@monster

; 10500: 										  value = piyo_tbl[(piyo_point + g_iCurRunEarthQuake) & 63] + 12;

  058bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iCurRunEarthQuake@@3HA ; g_iCurRunEarthQuake
  058c4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?piyo_point@@3HA ; piyo_point
  058ca	83 e0 3f	 and	 eax, 63			; 0000003fH
  058cd	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?piyo_tbl@@3PAHA[eax*4]
  058d4	83 c1 0c	 add	 ecx, 12			; 0000000cH
$LN893@monster:

; 10501: #ifdef _CAX_SKILL_XY_FIX	//ÊôÆÈÄöÊîªÂáªÊÄßÂííÊúØ 
; 10502: 			(0 == ATR_GROUP_FLG(a0)) ? ATR_CHR_ANG(a0) = 3 : ATR_CHR_ANG(a0) = 7;
; 10503: 			if(ATR_CHR_ANG(a0) == 3){
; 10504: 				 ATR_H_POS(a0) = (0 == AttMgc.wAttackedIndex[AttMgc.wCurAttackNum]) ? AttMgc.posAttacked[0].x + value + 160 : AttMgc.posAttacked[0].x;
; 10505: 		         ATR_V_POS(a0) = (0 == AttMgc.wAttackedIndex[AttMgc.wCurAttackNum]) ? AttMgc.posAttacked[0].y + value + 120: AttMgc.posAttacked[0].y + value;
; 10506: 			}
; 10507: #else
; 10508: 									  ATR_V_POS(a0) = AttMgc.posAttacked[0].y + value;

  058d7	0f b7 05 84 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+132
  058de	03 c1		 add	 eax, ecx
$LN892@monster:

; 10509: #endif
; 10510: 									  //ATR_V_POS(a0) = AttMgc.posAttacked[0].y + value;
; 10511: 								  }
; 10512: 
; 10513: 								  if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP)){

  058e0	6a 01		 push	 1
  058e2	6a 00		 push	 0
  058e4	57		 push	 edi
  058e5	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  058e8	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  058ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  058f0	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  058f3	85 c0		 test	 eax, eax
  058f5	0f 84 ef 03 00
	00		 je	 $LN1228@monster

; 10514: 									  DeathAction(a0);

  058fb	57		 push	 edi
  058fc	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  05901	83 c4 04	 add	 esp, 4

; 10515: 									  // Â¶ÇÊûúÊ≤°ÊúâÂêéÁΩÆÂä®Áîª
; 10516: 									  if (0XFFFFFFFF == AttMgc.iPostMgcNum){

  05904	83 3d 24 00 00
	00 ff		 cmp	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+36, -1
  0590b	0f 85 b4 02 00
	00		 jne	 $LN895@monster

; 10517: 										  AttMgc.wNumAttackeds++;

  05911	66 ff 05 c4 00
	00 00		 inc	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+196

; 10518: 										  if (20 == idx){

  05918	83 fe 14	 cmp	 esi, 20			; 00000014H
  0591b	0f 85 68 01 00
	00		 jne	 $LN897@monster

; 10519: 											  // wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 10520: 											  // wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 10521: 											  int i = 0, j, charahurt, pethurt;
; 10522: 
; 10523: 											  while (++i && 0XFF != AttMgc.wAttackedIndex[i]){

  05921	b9 64 00 00 00	 mov	 ecx, OFFSET ?AttMgc@@3UATTACK_MAGIC@@A+100
  05926	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0592b	89 4d 08	 mov	 DWORD PTR tv22948[ebp], ecx
  0592e	66 90		 npad	 2
$LL42@monster:
  05930	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  05933	0f 84 b1 03 00
	00		 je	 $LN1228@monster

; 10524: 												  for (j = 0; j < iAttackedNum; j++){

  05939	33 db		 xor	 ebx, ebx
  0593b	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, ebx
  05941	0f 8e 2b 01 00
	00		 jle	 $LN45@monster
  05947	bf 04 00 00 00	 mov	 edi, OFFSET ?AttackedInfo@@3PAHA+4
  0594c	0f 1f 40 00	 npad	 4
$LL46@monster:

; 10525: 													  if (AttMgc.wAttackedIndex[i] == AttackedInfo[j * 4]){

  05950	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  05953	3b 47 fc	 cmp	 eax, DWORD PTR [edi-4]
  05956	0f 85 01 01 00
	00		 jne	 $LN44@monster

; 10526: 														  a1 = p_party[AttackedInfo[j * 4 + 1]];

  0595c	8b 07		 mov	 eax, DWORD PTR [edi]

; 10527: 														  charahurt = AttackedInfo[j * 4 + 2];

  0595e	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 10528: 														  pethurt = AttackedInfo[j * 4 + 3];

  05961	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  05964	89 55 ec	 mov	 DWORD PTR _charahurt$1$[ebp], edx
  05967	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 10529: 														  ATR_LONG_WORK(0, a1) = 0;
; 10530: 														  ATR_DAMAGE(a1) = charahurt;
; 10531: 														  ATR_PET_DAMAGE(a1) = pethurt;
; 10532: 														  if (charahurt == 0){

  0596e	6a c0		 push	 -64			; ffffffc0H
  05970	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05973	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  0597d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05980	89 50 58	 mov	 DWORD PTR [eax+88], edx
  05983	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05986	89 88 24 02 00
	00		 mov	 DWORD PTR [eax+548], ecx
  0598c	85 d2		 test	 edx, edx
  0598e	75 0f		 jne	 SHORT $LN900@monster

; 10533: 															  set_damage_num(a1, 0, -64);

  05990	52		 push	 edx
  05991	56		 push	 esi
  05992	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 10534: 															  ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 5;

  05997	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0599a	c6 00 cd	 mov	 BYTE PTR [eax], 205	; 000000cdH

; 10535: 														  }else{

  0599d	eb 0e		 jmp	 SHORT $LN1249@monster
$LN900@monster:

; 10536: 															  set_damage_num(a1, 6, -64);

  0599f	6a 06		 push	 6
  059a1	56		 push	 esi
  059a2	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 10537: 															  ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 4;

  059a7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  059aa	c6 00 cc	 mov	 BYTE PTR [eax], 204	; 000000ccH
$LN1249@monster:

; 10538: 														  }
; 10539: 														  ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  059ad	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  059b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  059b3	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  059b6	29 46 78	 sub	 DWORD PTR [esi+120], eax

; 10540: 														  set_jujutsu_hit_mark(a1);

  059b9	56		 push	 esi
  059ba	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  059bf	83 c4 04	 add	 esp, 4

; 10541: 														  if (ATR_LIFE(a1) <= 0){

  059c2	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  059c6	7f 0d		 jg	 SHORT $LN902@monster

; 10542: 															  ATR_LIFE(a1) = 0;

  059c8	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 10543: 															  slow_flg++;

  059cf	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN902@monster:

; 10544: 														  }
; 10545: 														  ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  059d5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  059d8	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  059de	2b 88 24 02 00
	00		 sub	 ecx, DWORD PTR [eax+548]
  059e4	89 8e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ecx

; 10546: 														  //andy_fall
; 10547: 														  if (ATR_PETFALL(a1) == 1){

  059ea	83 be bc 01 00
	00 01		 cmp	 DWORD PTR [esi+444], 1
  059f1	75 15		 jne	 SHORT $LN904@monster

; 10548: 															  if (ATR_LIFE(a1) > 0)

  059f3	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  059f7	7e 0f		 jle	 SHORT $LN904@monster

; 10549: 																  petfallChangeGraph(a1);

  059f9	56		 push	 esi
  059fa	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  059ff	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  05a05	83 c4 04	 add	 esp, 4
$LN904@monster:

; 10550: 														  }
; 10551: 														  if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1)){

  05a08	85 c9		 test	 ecx, ecx
  05a0a	7f 22		 jg	 SHORT $LN906@monster
  05a0c	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  05a13	74 19		 je	 SHORT $LN906@monster

; 10552: 															  ATR_PET_LIFE(a1) = 0;

  05a15	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0

; 10553: 															  if (ATR_LIFE(a1) > 0)

  05a1f	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05a23	7e 09		 jle	 SHORT $LN906@monster

; 10554: 																  petfallChangeGraph(a1);

  05a25	56		 push	 esi
  05a26	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  05a2b	83 c4 04	 add	 esp, 4
$LN906@monster:

; 10555: 														  }
; 10556: 														  if (charahurt == 0)
; 10557: 															  ATR_CHR_ACT(a1) = ANIM_STAND;
; 10558: 														  else
; 10559: 															  ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 10560: 														  ATR_CHR_ACT_OLD(a1) = -1;

  05a2e	33 c0		 xor	 eax, eax
  05a30	39 45 ec	 cmp	 DWORD PTR _charahurt$1$[ebp], eax

; 10561: 														  pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  05a33	6a 00		 push	 0
  05a35	0f 94 c0	 sete	 al
  05a38	6a 00		 push	 0
  05a3a	56		 push	 esi
  05a3b	8d 04 45 01 00
	00 00		 lea	 eax, DWORD PTR [eax*2+1]
  05a42	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
  05a48	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  05a52	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05a57	8b 4d 08	 mov	 ecx, DWORD PTR tv22948[ebp]
  05a5a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN44@monster:

; 10524: 												  for (j = 0; j < iAttackedNum; j++){

  05a5d	43		 inc	 ebx
  05a5e	83 c7 10	 add	 edi, 16			; 00000010H
  05a61	3b 1d 00 00 00
	00		 cmp	 ebx, DWORD PTR ?iAttackedNum@@3HA
  05a67	0f 8c e3 fe ff
	ff		 jl	 $LL46@monster
  05a6d	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN45@monster:

; 10519: 											  // wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 10520: 											  // wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 10521: 											  int i = 0, j, charahurt, pethurt;
; 10522: 
; 10523: 											  while (++i && 0XFF != AttMgc.wAttackedIndex[i]){

  05a72	83 c1 02	 add	 ecx, 2
  05a75	89 4d 08	 mov	 DWORD PTR tv22948[ebp], ecx
  05a78	81 f9 62 00 00
	00		 cmp	 ecx, OFFSET ?AttMgc@@3UATTACK_MAGIC@@A+98
  05a7e	0f 85 ac fe ff
	ff		 jne	 $LL42@monster

; 10562: 													  }
; 10563: 												  }
; 10564: 											  }
; 10565: 										  }else{

  05a84	e9 61 02 00 00	 jmp	 $LN1228@monster
$LN897@monster:

; 10566: 											  int j, charahurt, pethurt;
; 10567: 
; 10568: 											  for (j = 0; j < iAttackedNum; j++){

  05a89	33 db		 xor	 ebx, ebx
  05a8b	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, ebx
  05a91	0f 8e 53 02 00
	00		 jle	 $LN1228@monster
  05a97	bf 04 00 00 00	 mov	 edi, OFFSET ?AttackedInfo@@3PAHA+4
  05a9c	0f 1f 40 00	 npad	 4
$LL49@monster:

; 10569: 												  if (idx == AttackedInfo[j * 4]){

  05aa0	3b 77 fc	 cmp	 esi, DWORD PTR [edi-4]
  05aa3	0f 85 07 01 00
	00		 jne	 $LN47@monster

; 10570: 													  a1 = p_party[AttackedInfo[j * 4 + 1]];

  05aa9	8b 07		 mov	 eax, DWORD PTR [edi]

; 10571: 													  charahurt = AttackedInfo[j * 4 + 2];

  05aab	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 10572: 													  pethurt = AttackedInfo[j * 4 + 3];

  05aae	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  05ab1	89 55 08	 mov	 DWORD PTR _charahurt$1$[ebp], edx
  05ab4	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 10573: 													  ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 4;
; 10574: 													  ATR_LONG_WORK(0, a1) = 0;
; 10575: 													  ATR_DAMAGE(a1) = charahurt;
; 10576: 													  ATR_PET_DAMAGE(a1) = pethurt;
; 10577: 													  if (charahurt == 0){

  05abb	6a c0		 push	 -64			; ffffffc0H
  05abd	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05ac0	c6 00 cc	 mov	 BYTE PTR [eax], 204	; 000000ccH
  05ac3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05ac6	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  05ad0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05ad3	89 50 58	 mov	 DWORD PTR [eax+88], edx
  05ad6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05ad9	89 88 24 02 00
	00		 mov	 DWORD PTR [eax+548], ecx
  05adf	85 d2		 test	 edx, edx
  05ae1	75 0f		 jne	 SHORT $LN910@monster

; 10578: 														  set_damage_num(a1, 0, -64);

  05ae3	52		 push	 edx
  05ae4	56		 push	 esi
  05ae5	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 10579: 														  ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 5;

  05aea	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05aed	c6 00 cd	 mov	 BYTE PTR [eax], 205	; 000000cdH

; 10580: 													  }else{

  05af0	eb 0e		 jmp	 SHORT $LN1250@monster
$LN910@monster:

; 10581: 														  set_damage_num(a1, 6, -64);

  05af2	6a 06		 push	 6
  05af4	56		 push	 esi
  05af5	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 10582: 														  ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 4;

  05afa	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05afd	c6 00 cc	 mov	 BYTE PTR [eax], 204	; 000000ccH
$LN1250@monster:

; 10583: 													  }
; 10584: 													  ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  05b00	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05b03	83 c4 0c	 add	 esp, 12			; 0000000cH
  05b06	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  05b09	29 46 78	 sub	 DWORD PTR [esi+120], eax

; 10585: 													  set_jujutsu_hit_mark(a1);

  05b0c	56		 push	 esi
  05b0d	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  05b12	83 c4 04	 add	 esp, 4

; 10586: 													  if (ATR_LIFE(a1) <= 0){

  05b15	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05b19	7f 0d		 jg	 SHORT $LN912@monster

; 10587: 														  ATR_LIFE(a1) = 0;

  05b1b	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 10588: 														  slow_flg++;

  05b22	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN912@monster:

; 10589: 													  }
; 10590: 													  ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  05b28	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05b2b	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  05b31	2b 88 24 02 00
	00		 sub	 ecx, DWORD PTR [eax+548]
  05b37	89 8e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ecx

; 10591: 													  //andy_fall
; 10592: 													  if (ATR_PETFALL(a1) == 1){

  05b3d	83 be bc 01 00
	00 01		 cmp	 DWORD PTR [esi+444], 1
  05b44	75 15		 jne	 SHORT $LN914@monster

; 10593: 														  if (ATR_LIFE(a1) > 0)

  05b46	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05b4a	7e 0f		 jle	 SHORT $LN914@monster

; 10594: 															  petfallChangeGraph(a1);

  05b4c	56		 push	 esi
  05b4d	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  05b52	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  05b58	83 c4 04	 add	 esp, 4
$LN914@monster:

; 10595: 													  }
; 10596: 													  if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1)){

  05b5b	85 c9		 test	 ecx, ecx
  05b5d	7f 22		 jg	 SHORT $LN916@monster
  05b5f	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  05b66	74 19		 je	 SHORT $LN916@monster

; 10597: 														  ATR_PET_LIFE(a1) = 0;

  05b68	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0

; 10598: 														  if (ATR_LIFE(a1) > 0)

  05b72	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05b76	7e 09		 jle	 SHORT $LN916@monster

; 10599: 															  petfallChangeGraph(a1);

  05b78	56		 push	 esi
  05b79	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  05b7e	83 c4 04	 add	 esp, 4
$LN916@monster:

; 10600: 													  }
; 10601: 													  if (charahurt == 0)
; 10602: 														  ATR_CHR_ACT(a1) = ANIM_STAND;
; 10603: 													  else
; 10604: 														  ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 10605: 													  ATR_CHR_ACT_OLD(a1) = -1;

  05b81	33 c0		 xor	 eax, eax
  05b83	39 45 08	 cmp	 DWORD PTR _charahurt$1$[ebp], eax

; 10606: 													  pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  05b86	6a 00		 push	 0
  05b88	0f 94 c0	 sete	 al
  05b8b	6a 00		 push	 0
  05b8d	56		 push	 esi
  05b8e	8d 04 45 01 00
	00 00		 lea	 eax, DWORD PTR [eax*2+1]
  05b95	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
  05b9b	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  05ba5	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05baa	8b 75 ec	 mov	 esi, DWORD PTR _idx$1$[ebp]
  05bad	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@monster:

; 10566: 											  int j, charahurt, pethurt;
; 10567: 
; 10568: 											  for (j = 0; j < iAttackedNum; j++){

  05bb0	43		 inc	 ebx
  05bb1	83 c7 10	 add	 edi, 16			; 00000010H
  05bb4	3b 1d 00 00 00
	00		 cmp	 ebx, DWORD PTR ?iAttackedNum@@3HA
  05bba	0f 8c e0 fe ff
	ff		 jl	 $LL49@monster

; 10607: 												  }
; 10608: 											  }
; 10609: 										  }
; 10610: 									  }

  05bc0	e9 25 01 00 00	 jmp	 $LN1228@monster
$LN895@monster:

; 10611: 									  // Êã•ÊúâÂêéÁΩÆÂä®Áîª
; 10612: 									  else{
; 10613: 										  // ÈíàÂØπÊâÄÊúâÁöÑÊïå‰∫∫ÊñΩÂêéÁΩÆÂä®Áîª
; 10614: 										  if (20 == idx) // idx = wAttackedIndex[0]

  05bc5	83 fe 14	 cmp	 esi, 20			; 00000014H
  05bc8	0f 85 a6 00 00
	00		 jne	 $LN919@monster

; 10615: 										  {
; 10616: 											  // wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 10617: 											  // wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 10618: 											  int i = 0;
; 10619: 
; 10620: 											  while (++i && 0XFF != AttMgc.wAttackedIndex[i])

  05bce	bf 01 00 00 00	 mov	 edi, 1
  05bd3	be 64 00 00 00	 mov	 esi, OFFSET ?AttMgc@@3UATTACK_MAGIC@@A+100
  05bd8	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  05bdd	8d 5f 57	 lea	 ebx, DWORD PTR [edi+87]
$LL50@monster:
  05be0	66 3b 06	 cmp	 ax, WORD PTR [esi]
  05be3	0f 84 01 01 00
	00		 je	 $LN1228@monster

; 10621: 											  {
; 10622: 												  a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  05be9	68 60 02 00 00	 push	 608			; 00000260H
  05bee	6a 47		 push	 71			; 00000047H
  05bf0	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  05bf5	8b d0		 mov	 edx, eax
  05bf7	83 c4 08	 add	 esp, 8

; 10623: 
; 10624: 												  ATR_NAME(a1) = monster;

  05bfa	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 10625: 												  ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 3;		// ÂêéÁΩÆÂä®Áîª

  05c01	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  05c04	c6 01 cb	 mov	 BYTE PTR [ecx], 203	; 000000cbH

; 10626: 												  ATR_DISP_PRIO(a1) = (1 == AttMgc.wPostMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  05c07	b9 02 00 00 00	 mov	 ecx, 2
  05c0c	66 3b 3d 40 00
	00 00		 cmp	 di, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+64
  05c13	0f 44 cb	 cmove	 ecx, ebx
  05c16	88 4a 15	 mov	 BYTE PTR [edx+21], cl

; 10627: 												  ATR_CHR_NO(a1) = AttMgc.iPostMgcNum;

  05c19	a1 24 00 00 00	 mov	 eax, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+36
  05c1e	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax

; 10628: 												  ATR_LONG_WORK(0, a1) = AttMgc.wAttackedIndex[i];

  05c24	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  05c27	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  05c2a	89 88 34 01 00
	00		 mov	 DWORD PTR [eax+308], ecx

; 10629: 												  ATR_H_POS(a1) = ATR_H_POS(p_party[AttMgc.wAttackedIndex[i]]) + AttMgc.wPostMgcX;

  05c30	0f b7 06	 movzx	 eax, WORD PTR [esi]
  05c33	0f b7 0d 38 00
	00 00		 movzx	 ecx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+56
  05c3a	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  05c41	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  05c44	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 10630: 												  ATR_V_POS(a1) = ATR_V_POS(p_party[AttMgc.wAttackedIndex[i]]) + AttMgc.wPostMgcY;

  05c47	0f b7 06	 movzx	 eax, WORD PTR [esi]
  05c4a	83 c6 02	 add	 esi, 2
  05c4d	0f b7 0d 3a 00
	00 00		 movzx	 ecx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+58
  05c54	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  05c5b	03 48 1c	 add	 ecx, DWORD PTR [eax+28]
  05c5e	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  05c63	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
  05c66	81 fe 62 00 00
	00		 cmp	 esi, OFFSET ?AttMgc@@3UATTACK_MAGIC@@A+98
  05c6c	0f 85 6e ff ff
	ff		 jne	 $LL50@monster

; 10631: 											  }
; 10632: 										  }

  05c72	eb 76		 jmp	 SHORT $LN1228@monster
$LN919@monster:

; 10633: 										  // ÈíàÂØπÊüê‰∏Ä‰∏™Êïå‰∫∫ÊñΩÂêéÁΩÆÂä®Áîª
; 10634: 										  else
; 10635: 										  {
; 10636: 											  a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  05c74	68 60 02 00 00	 push	 608			; 00000260H
  05c79	6a 47		 push	 71			; 00000047H
  05c7b	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  05c80	8b d0		 mov	 edx, eax
  05c82	83 c4 08	 add	 esp, 8

; 10637: 
; 10638: 											  ATR_NAME(a1) = monster;
; 10639: 											  ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 3;		// ÂêéÁΩÆÂä®Áîª
; 10640: 											  ATR_DISP_PRIO(a1) = (1 == AttMgc.wPostMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  05c85	bf 01 00 00 00	 mov	 edi, 1
  05c8a	b8 58 00 00 00	 mov	 eax, 88			; 00000058H
  05c8f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster
  05c96	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  05c99	c6 01 cb	 mov	 BYTE PTR [ecx], 203	; 000000cbH
  05c9c	b9 02 00 00 00	 mov	 ecx, 2
  05ca1	66 3b 3d 40 00
	00 00		 cmp	 di, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+64
  05ca8	0f 44 c8	 cmove	 ecx, eax
  05cab	88 4a 15	 mov	 BYTE PTR [edx+21], cl

; 10641: 											  ATR_CHR_NO(a1) = AttMgc.iPostMgcNum;

  05cae	a1 24 00 00 00	 mov	 eax, DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+36
  05cb3	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax

; 10642: 											  ATR_LONG_WORK(0, a1) = idx;

  05cb9	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  05cbc	89 b0 34 01 00
	00		 mov	 DWORD PTR [eax+308], esi

; 10643: 											  ATR_H_POS(a1) = ATR_H_POS(p_party[idx]) + AttMgc.wPostMgcX;

  05cc2	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  05cc9	0f b7 0d 38 00
	00 00		 movzx	 ecx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+56
  05cd0	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  05cd3	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 10644: 											  ATR_V_POS(a1) = ATR_V_POS(p_party[idx]) + AttMgc.wPostMgcY;

  05cd6	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  05cdd	0f b7 0d 3a 00
	00 00		 movzx	 ecx, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+58
  05ce4	03 48 1c	 add	 ecx, DWORD PTR [eax+28]
  05ce7	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN1228@monster:

; 10645: 										  }
; 10646: 									  }
; 10647: 								  }
; 10648: 
; 10649: 								  // Â∑±ÁªèÊí≠ÊîæÊâÄÊúâÁöÑÂä®Áîª‰∫Ü
; 10650: 								  if (AttMgc.wNumAttackeds == AttMgc.wNumAttacks && 0 == iAttackedNum)

  05cea	66 a1 c4 00 00
	00		 mov	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+196
  05cf0	66 3b 05 c2 00
	00 00		 cmp	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+194
  05cf7	0f 85 4c 12 00
	00		 jne	 $LN1058@monster
  05cfd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, 0
$LN1266@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  05d04	0f 85 3f 12 00
	00		 jne	 $LN1058@monster
$LN1267@monster:
  05d0a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  05d0f	5f		 pop	 edi
  05d10	5e		 pop	 esi
  05d11	5b		 pop	 ebx
  05d12	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  05d15	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  05d19	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  05d1c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bRunAttMgc@@3HA, 0
  05d26	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_iRunEarthQuake@@3HA, 0 ; g_iRunEarthQuake
  05d30	8b e5		 mov	 esp, ebp
  05d32	5d		 pop	 ebp
  05d33	c3		 ret	 0
$LN922@monster:

; 10651: 								  {
; 10652: 									  ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 10653: 									  bRunAttMgc = FALSE;
; 10654: 									  g_iRunEarthQuake = 0;
; 10655: 								  }
; 10656: 								  break;
; 10657: 	}
; 10658: 		// ÊâßË°åÂêéÁΩÆÂä®Áîª
; 10659: 	case ATTACK_MAGIC_CASE + 3:
; 10660: 		idx = ATR_LONG_WORK(0, a0);

  05d34	8b b2 34 01 00
	00		 mov	 esi, DWORD PTR [edx+308]

; 10661: 		a1 = p_party[idx];
; 10662: 		ATR_H_POS(a0) = ATR_H_POS(a1) + AttMgc.wPostMgcX;

  05d3a	0f b7 05 38 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+56

; 10663: 		ATR_V_POS(a0) = ATR_V_POS(a1) + AttMgc.wPostMgcY;
; 10664: 
; 10665: 		if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  05d41	6a 01		 push	 1
  05d43	6a 00		 push	 0
  05d45	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  05d4c	57		 push	 edi
  05d4d	89 75 08	 mov	 DWORD PTR _idx$2$[ebp], esi
  05d50	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  05d53	89 47 18	 mov	 DWORD PTR [edi+24], eax
  05d56	0f b7 05 3a 00
	00 00		 movzx	 eax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+58
  05d5d	03 41 1c	 add	 eax, DWORD PTR [ecx+28]
  05d60	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  05d63	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05d68	83 c4 0c	 add	 esp, 12			; 0000000cH
  05d6b	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  05d6e	85 c0		 test	 eax, eax
  05d70	0f 84 6a 02 00
	00		 je	 $LN1231@monster

; 10666: 		{
; 10667: 			DeathAction(a0);

  05d76	57		 push	 edi
  05d77	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10668: 			AttMgc.wNumAttackeds++;

  05d7c	66 ff 05 c4 00
	00 00		 inc	 WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+196
  05d83	83 c4 04	 add	 esp, 4

; 10669: 			if (20 == idx)

  05d86	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iAttackedNum@@3HA
  05d8c	83 fe 14	 cmp	 esi, 20			; 00000014H
  05d8f	0f 85 42 01 00
	00		 jne	 $LN924@monster

; 10670: 			{
; 10671: 				// wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 10672: 				// wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 10673: 				int i = 0, j, charahurt, pethurt;
; 10674: 
; 10675: 				while (++i && 0XFF != AttMgc.wAttackedIndex[i])

  05d95	ba 64 00 00 00	 mov	 edx, OFFSET ?AttMgc@@3UATTACK_MAGIC@@A+100
  05d9a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  05d9f	89 55 08	 mov	 DWORD PTR tv22938[ebp], edx
$LL52@monster:
  05da2	66 3b 02	 cmp	 ax, WORD PTR [edx]
  05da5	0f 84 3b 02 00
	00		 je	 $LN58@monster

; 10676: 				{
; 10677: 					for (j = 0; j < iAttackedNum; j++)

  05dab	33 db		 xor	 ebx, ebx
  05dad	85 c9		 test	 ecx, ecx
  05daf	0f 8e 0b 01 00
	00		 jle	 $LN55@monster
  05db5	bf 04 00 00 00	 mov	 edi, OFFSET ?AttackedInfo@@3PAHA+4
  05dba	66 0f 1f 44 00
	00		 npad	 6
$LL56@monster:

; 10678: 					{
; 10679: 						if (AttMgc.wAttackedIndex[i] == AttackedInfo[j * 4])

  05dc0	0f b7 02	 movzx	 eax, WORD PTR [edx]
  05dc3	3b 47 fc	 cmp	 eax, DWORD PTR [edi-4]
  05dc6	0f 85 e3 00 00
	00		 jne	 $LN54@monster

; 10680: 						{
; 10681: 							a1 = p_party[AttackedInfo[j * 4 + 1]];

  05dcc	8b 07		 mov	 eax, DWORD PTR [edi]

; 10682: 							charahurt = AttackedInfo[j * 4 + 2];

  05dce	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 10683: 							pethurt = AttackedInfo[j * 4 + 3];

  05dd1	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 10684: 
; 10685: 							ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 4;
; 10686: 							ATR_LONG_WORK(0, a1) = 0;
; 10687: 							ATR_DAMAGE(a1) = charahurt;
; 10688: 							ATR_PET_DAMAGE(a1) = pethurt;
; 10689: 							set_damage_num(a1, 6, -64);

  05dd4	6a c0		 push	 -64			; ffffffc0H
  05dd6	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  05ddd	6a 06		 push	 6
  05ddf	56		 push	 esi
  05de0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05de3	c6 00 cc	 mov	 BYTE PTR [eax], 204	; 000000ccH
  05de6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05de9	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  05df3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05df6	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  05df9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05dfc	89 90 24 02 00
	00		 mov	 DWORD PTR [eax+548], edx
  05e02	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 10690: 							ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  05e07	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 10691: 							set_jujutsu_hit_mark(a1);

  05e0a	56		 push	 esi
  05e0b	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  05e0e	29 46 78	 sub	 DWORD PTR [esi+120], eax
  05e11	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  05e16	83 c4 10	 add	 esp, 16			; 00000010H

; 10692: 							if (ATR_LIFE(a1) <= 0)

  05e19	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05e1d	7f 0d		 jg	 SHORT $LN927@monster

; 10693: 							{
; 10694: 								ATR_LIFE(a1) = 0;

  05e1f	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 10695: 								slow_flg++;

  05e26	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN927@monster:

; 10696: 							}
; 10697: 
; 10698: 							ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  05e2c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05e2f	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  05e35	2b 88 24 02 00
	00		 sub	 ecx, DWORD PTR [eax+548]
  05e3b	89 8e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ecx

; 10699: 							//andy_fall
; 10700: 							if (ATR_PETFALL(a1) == 1)

  05e41	83 be bc 01 00
	00 01		 cmp	 DWORD PTR [esi+444], 1
  05e48	75 15		 jne	 SHORT $LN929@monster

; 10701: 							{
; 10702: 								if (ATR_LIFE(a1) > 0)

  05e4a	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05e4e	7e 0f		 jle	 SHORT $LN929@monster

; 10703: 									petfallChangeGraph(a1);

  05e50	56		 push	 esi
  05e51	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  05e56	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  05e5c	83 c4 04	 add	 esp, 4
$LN929@monster:

; 10704: 							}
; 10705: 							if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1))

  05e5f	85 c9		 test	 ecx, ecx
  05e61	7f 22		 jg	 SHORT $LN931@monster
  05e63	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  05e6a	74 19		 je	 SHORT $LN931@monster

; 10706: 							{
; 10707: 								ATR_PET_LIFE(a1) = 0;

  05e6c	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0

; 10708: 
; 10709: 								if (ATR_LIFE(a1) > 0)

  05e76	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05e7a	7e 09		 jle	 SHORT $LN931@monster

; 10710: 									petfallChangeGraph(a1);

  05e7c	56		 push	 esi
  05e7d	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  05e82	83 c4 04	 add	 esp, 4
$LN931@monster:

; 10711: 							}
; 10712: 							ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 10713: 							ATR_CHR_ACT_OLD(a1) = -1;
; 10714: 							pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  05e85	6a 00		 push	 0
  05e87	6a 00		 push	 0
  05e89	c7 86 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+332], 1
  05e93	56		 push	 esi
  05e94	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  05e9e	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05ea3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iAttackedNum@@3HA
  05ea9	83 c4 0c	 add	 esp, 12			; 0000000cH
  05eac	8b 55 08	 mov	 edx, DWORD PTR tv22938[ebp]
$LN54@monster:

; 10676: 				{
; 10677: 					for (j = 0; j < iAttackedNum; j++)

  05eaf	43		 inc	 ebx
  05eb0	83 c7 10	 add	 edi, 16			; 00000010H
  05eb3	3b d9		 cmp	 ebx, ecx
  05eb5	0f 8c 05 ff ff
	ff		 jl	 $LL56@monster
  05ebb	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN55@monster:

; 10670: 			{
; 10671: 				// wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 10672: 				// wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 10673: 				int i = 0, j, charahurt, pethurt;
; 10674: 
; 10675: 				while (++i && 0XFF != AttMgc.wAttackedIndex[i])

  05ec0	83 c2 02	 add	 edx, 2
  05ec3	89 55 08	 mov	 DWORD PTR tv22938[ebp], edx
  05ec6	81 fa 62 00 00
	00		 cmp	 edx, OFFSET ?AttMgc@@3UATTACK_MAGIC@@A+98
  05ecc	0f 85 d0 fe ff
	ff		 jne	 $LL52@monster

; 10715: 						}
; 10716: 					}
; 10717: 				}
; 10718: 			}

  05ed2	e9 0f 01 00 00	 jmp	 $LN58@monster
$LN924@monster:

; 10719: 			else
; 10720: 			{
; 10721: 				int j, charahurt, pethurt;
; 10722: 
; 10723: 				for (j = 0; j < iAttackedNum; j++)

  05ed7	33 db		 xor	 ebx, ebx
  05ed9	85 c9		 test	 ecx, ecx
  05edb	0f 8e 05 01 00
	00		 jle	 $LN58@monster
  05ee1	bf 04 00 00 00	 mov	 edi, OFFSET ?AttackedInfo@@3PAHA+4
$LL59@monster:

; 10724: 				{
; 10725: 					if (idx == AttackedInfo[j * 4])

  05ee6	3b 77 fc	 cmp	 esi, DWORD PTR [edi-4]
  05ee9	0f 85 e3 00 00
	00		 jne	 $LN57@monster

; 10726: 					{
; 10727: 						a1 = p_party[AttackedInfo[j * 4 + 1]];

  05eef	8b 07		 mov	 eax, DWORD PTR [edi]

; 10728: 						charahurt = AttackedInfo[j * 4 + 2];

  05ef1	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 10729: 						pethurt = AttackedInfo[j * 4 + 3];

  05ef4	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 10730: 
; 10731: 						ATR_VCT_NO(a1) = ATTACK_MAGIC_CASE + 4;
; 10732: 						ATR_LONG_WORK(0, a1) = 0;
; 10733: 						ATR_DAMAGE(a1) = charahurt;
; 10734: 
; 10735: 						ATR_PET_DAMAGE(a1) = pethurt;
; 10736: 						set_damage_num(a1, 6, -64);

  05ef7	6a c0		 push	 -64			; ffffffc0H
  05ef9	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  05f00	6a 06		 push	 6
  05f02	56		 push	 esi
  05f03	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05f06	c6 00 cc	 mov	 BYTE PTR [eax], 204	; 000000ccH
  05f09	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05f0c	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  05f16	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05f19	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  05f1c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05f1f	89 90 24 02 00
	00		 mov	 DWORD PTR [eax+548], edx
  05f25	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 10737: 						ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  05f2a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 10738: 						set_jujutsu_hit_mark(a1);

  05f2d	56		 push	 esi
  05f2e	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  05f31	29 46 78	 sub	 DWORD PTR [esi+120], eax
  05f34	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  05f39	83 c4 10	 add	 esp, 16			; 00000010H

; 10739: 						if (ATR_LIFE(a1) <= 0)

  05f3c	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05f40	7f 0d		 jg	 SHORT $LN933@monster

; 10740: 						{
; 10741: 							ATR_LIFE(a1) = 0;

  05f42	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 10742: 							slow_flg++;

  05f49	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN933@monster:

; 10743: 						}
; 10744: 						ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  05f4f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  05f52	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  05f58	2b 88 24 02 00
	00		 sub	 ecx, DWORD PTR [eax+548]
  05f5e	89 8e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ecx

; 10745: 						//andy_fall
; 10746: 						if (ATR_PETFALL(a1) == 1)

  05f64	83 be bc 01 00
	00 01		 cmp	 DWORD PTR [esi+444], 1
  05f6b	75 15		 jne	 SHORT $LN935@monster

; 10747: 						{
; 10748: 							if (ATR_LIFE(a1) > 0)

  05f6d	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05f71	7e 0f		 jle	 SHORT $LN935@monster

; 10749: 								petfallChangeGraph(a1);

  05f73	56		 push	 esi
  05f74	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  05f79	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  05f7f	83 c4 04	 add	 esp, 4
$LN935@monster:

; 10750: 						}
; 10751: 						if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1))

  05f82	85 c9		 test	 ecx, ecx
  05f84	7f 22		 jg	 SHORT $LN937@monster
  05f86	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  05f8d	74 19		 je	 SHORT $LN937@monster

; 10752: 						{
; 10753: 							ATR_PET_LIFE(a1) = 0;

  05f8f	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0

; 10754: 							if (ATR_LIFE(a1) > 0)

  05f99	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  05f9d	7e 09		 jle	 SHORT $LN937@monster

; 10755: 								petfallChangeGraph(a1);

  05f9f	56		 push	 esi
  05fa0	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  05fa5	83 c4 04	 add	 esp, 4
$LN937@monster:

; 10756: 						}
; 10757: 						ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 10758: 						ATR_CHR_ACT_OLD(a1) = -1;
; 10759: 						pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  05fa8	6a 00		 push	 0
  05faa	6a 00		 push	 0
  05fac	c7 86 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+332], 1
  05fb6	56		 push	 esi
  05fb7	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  05fc1	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  05fc6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iAttackedNum@@3HA
  05fcc	83 c4 0c	 add	 esp, 12			; 0000000cH
  05fcf	8b 75 08	 mov	 esi, DWORD PTR _idx$2$[ebp]
$LN57@monster:

; 10719: 			else
; 10720: 			{
; 10721: 				int j, charahurt, pethurt;
; 10722: 
; 10723: 				for (j = 0; j < iAttackedNum; j++)

  05fd2	43		 inc	 ebx
  05fd3	83 c7 10	 add	 edi, 16			; 00000010H
  05fd6	3b d9		 cmp	 ebx, ecx
  05fd8	0f 8c 08 ff ff
	ff		 jl	 $LL59@monster

; 10663: 		ATR_V_POS(a0) = ATR_V_POS(a1) + AttMgc.wPostMgcY;
; 10664: 
; 10665: 		if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  05fde	eb 06		 jmp	 SHORT $LN58@monster
$LN1231@monster:
  05fe0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iAttackedNum@@3HA
$LN58@monster:

; 10760: 					}
; 10761: 				}
; 10762: 			}
; 10763: 		}
; 10764: 		// Â∑±ÁªèÊí≠ÊîæÊâÄÊúâÁöÑÂä®Áîª‰∫Ü
; 10765: 		if (AttMgc.wNumAttackeds == AttMgc.wNumAttacks && 0 == iAttackedNum)

  05fe6	66 a1 c4 00 00
	00		 mov	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+196
  05fec	66 3b 05 c2 00
	00 00		 cmp	 ax, WORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+194
  05ff3	0f 85 50 0f 00
	00		 jne	 $LN1058@monster
  05ff9	85 c9		 test	 ecx, ecx

; 10766: 		{
; 10767: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 10768: 			bRunAttMgc = FALSE;
; 10769: 			g_iRunEarthQuake = 0;
; 10770: 		}
; 10771: 		break;

  05ffb	e9 04 fd ff ff	 jmp	 $LN1266@monster
$LN939@monster:

; 10772: 		// Â∏¶‰∫∫Áâ©Âèó‰º§ÁöÑÂõæ
; 10773: 	case ATTACK_MAGIC_CASE + 4:
; 10774: 		if (ATR_FIRST_FLG(a0) > 40)

  06000	80 ba 1e 01 00
	00 28		 cmp	 BYTE PTR [edx+286], 40	; 00000028H
  06007	76 0a		 jbe	 SHORT $LN940@monster

; 10775: 			ATR_FIRST_FLG(a0) = 0;

  06009	c6 82 1e 01 00
	00 00		 mov	 BYTE PTR [edx+286], 0
  06010	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN940@monster:

; 10776: 		ATR_FIRST_FLG(a0)++;

  06013	fe 82 1e 01 00
	00		 inc	 BYTE PTR [edx+286]

; 10777: 		ATR_CRS(a0) = (ATR_CRS(a0) + 16) & 31;

  06019	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  0601f	83 e8 10	 sub	 eax, 16			; 00000010H
  06022	83 e0 1f	 and	 eax, 31			; 0000001fH

; 10778: 		gemini(a0);

  06025	57		 push	 edi
  06026	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  0602c	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 10779: 		if (40 == ATR_FIRST_FLG(a0))

  06031	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06034	83 c4 04	 add	 esp, 4
  06037	80 b8 1e 01 00
	00 28		 cmp	 BYTE PTR [eax+286], 40	; 00000028H
  0603e	75 50		 jne	 SHORT $LN1233@monster

; 10780: 		{
; 10781: 			if (ATR_LIFE(a0) <= 0)

  06040	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  06044	7f 0b		 jg	 SHORT $LN942@monster

; 10782: 			{
; 10783: 				ATR_VCT_NO(a0) = VCT_NO_DIE + 1;

  06046	c6 00 fb	 mov	 BYTE PTR [eax], 251	; 000000fbH

; 10784: 				slow_flg--;

  06049	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?slow_flg@@3HA ; slow_flg

; 10785: 			}

  0604f	eb 03		 jmp	 SHORT $LN943@monster
$LN942@monster:

; 10786: 			else
; 10787: 				ATR_VCT_NO(a0) = 0;

  06051	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN943@monster:

; 10788: 
; 10789: 			if (ATR_GROUP_FLG(a0) == 1)

  06054	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06057	80 78 5e 01	 cmp	 BYTE PTR [eax+94], 1

; 10790: 				ATR_CRS(a0) = crs_change_tbl2[7];

  0605b	0f b6 05 07 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+7
  06062	74 07		 je	 SHORT $LN945@monster

; 10791: 			else
; 10792: 				ATR_CRS(a0) = crs_change_tbl2[3];

  06064	0f b6 05 03 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+3
$LN945@monster:

; 10793: 			gemini(a0);

  0606b	57		 push	 edi
  0606c	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  06072	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 10794: 			++iCurAttackedFinishNum;

  06077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCurAttackedFinishNum@@3HA
  0607c	83 c4 04	 add	 esp, 4
  0607f	40		 inc	 eax

; 10795: 		}
; 10796: 		// Â∑±ÁªèÊí≠ÊîæÊâÄÊúâÁöÑÂä®Áîª‰∫Ü
; 10797: 		if (iAttackedNum == iCurAttackedFinishNum)

  06080	39 05 00 00 00
	00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, eax
  06086	a3 00 00 00 00	 mov	 DWORD PTR ?iCurAttackedFinishNum@@3HA, eax

; 10798: 		{
; 10799: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 10800: 			bRunAttMgc = FALSE;
; 10801: 			g_iRunEarthQuake = 0;
; 10802: 		}
; 10803: 		break;

  0608b	e9 74 fc ff ff	 jmp	 $LN1266@monster
$LN1233@monster:

; 10779: 		if (40 == ATR_FIRST_FLG(a0))

  06090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCurAttackedFinishNum@@3HA

; 10795: 		}
; 10796: 		// Â∑±ÁªèÊí≠ÊîæÊâÄÊúâÁöÑÂä®Áîª‰∫Ü
; 10797: 		if (iAttackedNum == iCurAttackedFinishNum)

  06095	39 05 00 00 00
	00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, eax

; 10798: 		{
; 10799: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 10800: 			bRunAttMgc = FALSE;
; 10801: 			g_iRunEarthQuake = 0;
; 10802: 		}
; 10803: 		break;

  0609b	e9 64 fc ff ff	 jmp	 $LN1266@monster
$LN947@monster:

; 10804: 	case ATTACK_MAGIC_CASE + 5:
; 10805: 		if (ATR_FIRST_FLG(a0) > 60)

  060a0	80 ba 1e 01 00
	00 3c		 cmp	 BYTE PTR [edx+286], 60	; 0000003cH
  060a7	76 0a		 jbe	 SHORT $LN948@monster

; 10806: 			ATR_FIRST_FLG(a0) = 0;

  060a9	c6 82 1e 01 00
	00 00		 mov	 BYTE PTR [edx+286], 0
  060b0	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN948@monster:

; 10807: 		ATR_FIRST_FLG(a0)++;

  060b3	fe 82 1e 01 00
	00		 inc	 BYTE PTR [edx+286]

; 10808: 		if (ATR_FIRST_FLG(a0) == 60)

  060b9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  060bc	80 b8 1e 01 00
	00 3c		 cmp	 BYTE PTR [eax+286], 60	; 0000003cH
  060c3	0f 85 80 0e 00
	00		 jne	 $LN1058@monster

; 10809: 		{
; 10810: 			ATR_VCT_NO(a0) = 0;

  060c9	c6 00 00	 mov	 BYTE PTR [eax], 0

; 10811: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 10812: 			bRunAttMgc = FALSE;
; 10813: 			g_iRunEarthQuake = 0;
; 10814: 		}
; 10815: 		break;

  060cc	e9 39 fc ff ff	 jmp	 $LN1267@monster
$LN950@monster:

; 10816: #endif
; 10817: #ifdef __TOCALL_MAGIC
; 10818: 		// ‰∫ßÁîüÂâçÁΩÆÂä®Áîª
; 10819: 	case TOCALL_MAGIC_CASE:
; 10820: 		// ÊòØÂê¶Âú®Âè≥‰∏ãÊñπ
; 10821: 		(0 == ATR_GROUP_FLG(a0)) ? ATR_CHR_ANG(a0) = 3 : ATR_CHR_ANG(a0) = 7;
; 10822: 
; 10823: 		ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  060d1	33 c0		 xor	 eax, eax
  060d3	38 42 5e	 cmp	 BYTE PTR [edx+94], al
  060d6	0f 95 c0	 setne	 al
  060d9	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [eax*4+3]
  060e0	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  060e6	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  060ec	0f b6 c1	 movzx	 eax, cl
  060ef	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  060f5	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl

; 10824: 
; 10825: 		if (0XFFFFFFFF != ToCallMgc.iPreMgcNum)

  060fb	83 3d 1c 00 00
	00 ff		 cmp	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+28, -1
  06102	0f 84 80 00 00
	00		 je	 $LN951@monster

; 10826: 		{
; 10827: 			if (NULL == (a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU))))

  06108	68 60 02 00 00	 push	 608			; 00000260H
  0610d	6a 47		 push	 71			; 00000047H
  0610f	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  06114	8b c8		 mov	 ecx, eax
  06116	83 c4 08	 add	 esp, 8
  06119	85 c9		 test	 ecx, ecx
  0611b	0f 84 bd c5 ff
	ff		 je	 $LN1260@monster

; 10828: 			{
; 10829: 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 10830: 				ATR_VCT_NO(a0) = 0;
; 10831: 				return;
; 10832: 			}
; 10833: 			ATR_NAME(a1) = monster;

  06121	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 10834: 			ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 1;		// ÂâçÁΩÆÂä®Áîª

  06128	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0612b	c6 00 d3	 mov	 BYTE PTR [eax], 211	; 000000d3H

; 10835: #ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 10836: 			if (ToCallMgc.iPreMgcNum == 101120)

  0612e	81 3d 1c 00 00
	00 00 8b 01 00	 cmp	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+28, 101120 ; 00018b00H
  06138	75 1b		 jne	 SHORT $LN953@monster

; 10837: 				ATR_DISP_PRIO(a1) = (1 == ToCallMgc.wPreMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  0613a	be 01 00 00 00	 mov	 esi, 1
  0613f	b8 02 00 00 00	 mov	 eax, 2
  06144	66 3b 35 3c 00
	00 00		 cmp	 si, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+60
  0614b	ba 58 00 00 00	 mov	 edx, 88			; 00000058H
  06150	0f 44 c2	 cmove	 eax, edx
  06153	eb 05		 jmp	 SHORT $LN954@monster
$LN953@monster:

; 10838: 			else 
; 10839: 				ATR_DISP_PRIO(a1) = ATR_DISP_PRIO(a0) + 1;

  06155	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  06158	fe c0		 inc	 al
$LN954@monster:

; 10840: #else
; 10841: 			ATR_DISP_PRIO(a1) = (1 == ToCallMgc.wPreMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;
; 10842: #endif
; 10843: 			ATR_CHR_NO(a1) = ToCallMgc.iPreMgcNum;

  0615a	88 41 15	 mov	 BYTE PTR [ecx+21], al
  0615d	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+28
  06162	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 10844: 			ATR_BODY_WORK(0, a1) = a0;

  06168	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0616b	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 10845: 			ATR_H_POS(a1) = ATR_H_POS(a0) + ToCallMgc.wPreMgcX;

  0616e	0f b7 05 34 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+52
  06175	03 47 18	 add	 eax, DWORD PTR [edi+24]
  06178	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 10846: 			ATR_V_POS(a1) = ATR_V_POS(a0) + ToCallMgc.wPreMgcY;

  0617b	0f b7 05 36 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+54
  06182	03 47 1c	 add	 eax, DWORD PTR [edi+28]
  06185	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$LN951@monster:

; 10847: 		}
; 10848: 		ATR_VCT_NO(a0) = 0;

  06188	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0618b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 10849: 		ATR_CHR_ACT_OLD(a0) = -1;

  0618e	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1

; 10850: #ifdef _PETSKILL_LER			// Èõ∑Â∞îÊäÄËÉΩ
; 10851: 		if (ATR_CHR_NO(a0) == 101815)

  06198	81 bf 44 01 00
	00 b7 8d 01 00	 cmp	 DWORD PTR [edi+324], 101815 ; 00018db7H
  061a2	75 0a		 jne	 SHORT $LN955@monster

; 10852: 			ATR_CHR_NO(a0) = ATR_CHR_NO(a0) * -1;

  061a4	c7 87 44 01 00
	00 49 72 fe ff	 mov	 DWORD PTR [edi+324], -101815 ; fffe7249H
$LN955@monster:

; 10853: #endif
; 10854: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  061ae	6a 00		 push	 0
  061b0	6a 00		 push	 0
  061b2	57		 push	 edi
  061b3	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  061b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  061bb	5f		 pop	 edi
  061bc	5e		 pop	 esi
  061bd	5b		 pop	 ebx
  061be	8b e5		 mov	 esp, ebp
  061c0	5d		 pop	 ebp
  061c1	c3		 ret	 0
$LN956@monster:

; 10855: 		break;
; 10856: 		// ÊâßË°åÂâçÁΩÆÂä®Áîª
; 10857: 	case TOCALL_MAGIC_CASE + 1:
; 10858: 
; 10859: 		a1 = ATR_BODY_WORK(0, a0);

  061c2	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 10860: 		ATR_H_POS(a0) = ATR_H_POS(a1) + ToCallMgc.wPreMgcX;

  061c5	0f b7 05 34 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+52

; 10861: 		ATR_V_POS(a0) = ATR_V_POS(a1) + ToCallMgc.wPreMgcY;
; 10862: 
; 10863: 		if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  061cc	6a 01		 push	 1
  061ce	6a 00		 push	 0
  061d0	03 46 18	 add	 eax, DWORD PTR [esi+24]
  061d3	89 47 18	 mov	 DWORD PTR [edi+24], eax
  061d6	0f b7 05 36 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+54
  061dd	03 46 1c	 add	 eax, DWORD PTR [esi+28]
  061e0	57		 push	 edi
  061e1	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  061e4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  061e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  061ec	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  061ef	85 c0		 test	 eax, eax
  061f1	0f 84 52 0d 00
	00		 je	 $LN1058@monster

; 10864: 		{
; 10865: 			DeathAction(a0);

  061f7	57		 push	 edi
  061f8	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10866: 			ToCallMgc.wRunPreMgc = TRUE;

  061fd	b8 01 00 00 00	 mov	 eax, 1
  06202	83 c4 04	 add	 esp, 4
  06205	66 a3 28 00 00
	00		 mov	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+40, ax

; 10867: #ifdef _PETSKILL_LER			// Èõ∑Â∞îÊäÄËÉΩ
; 10868: 			if (ATR_CHR_NO_OLD(a1) < 0)

  0620b	83 be 48 01 00
	00 00		 cmp	 DWORD PTR [esi+328], 0
  06212	0f 8d 31 0d 00
	00		 jge	 $LN1058@monster

; 10869: 			{
; 10870: 				int side;
; 10871: 
; 10872: 				ATR_CHR_NO(a1) = ATR_CHR_NO(a1) * -1;

  06218	8b 96 44 01 00
	00		 mov	 edx, DWORD PTR [esi+324]
  0621e	f7 da		 neg	 edx
  06220	89 96 44 01 00
	00		 mov	 DWORD PTR [esi+324], edx

; 10873: 				if (ToCallMgc.iCurMgcNum == 101798 || ToCallMgc.iCurMgcNum == 101800 || ToCallMgc.iCurMgcNum == 101853 || ToCallMgc.iCurMgcNum == 101854)

  06226	a1 20 00 00 00	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32
  0622b	3d a6 8d 01 00	 cmp	 eax, 101798		; 00018da6H
  06230	74 19		 je	 SHORT $LN960@monster
  06232	3d a8 8d 01 00	 cmp	 eax, 101800		; 00018da8H
  06237	74 12		 je	 SHORT $LN960@monster
  06239	3d dd 8d 01 00	 cmp	 eax, 101853		; 00018dddH
  0623e	74 0b		 je	 SHORT $LN960@monster
  06240	3d de 8d 01 00	 cmp	 eax, 101854		; 00018ddeH
  06245	0f 85 fe 0c 00
	00		 jne	 $LN1058@monster
$LN960@monster:

; 10874: 				{
; 10875: 					int i;
; 10876: 					for (i = 0; i < BATTLKPKPLYAERNUM; i++)

  0624b	33 c9		 xor	 ecx, ecx
  0624d	0f 1f 00	 npad	 3
$LL62@monster:

; 10877: 					{
; 10878: 						// ÂÖàÊâæÂà∞Èõ∑Â∞î‰ΩçÁΩÆ
; 10879: 						if (ATR_CHR_NO(p_party[i]) == ATR_CHR_NO(a1))

  06250	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  06257	39 90 44 01 00
	00		 cmp	 DWORD PTR [eax+324], edx
  0625d	74 06		 je	 SHORT $LN1106@monster

; 10874: 				{
; 10875: 					int i;
; 10876: 					for (i = 0; i < BATTLKPKPLYAERNUM; i++)

  0625f	41		 inc	 ecx
  06260	83 f9 14	 cmp	 ecx, 20			; 00000014H
  06263	7c eb		 jl	 SHORT $LL62@monster
$LN1106@monster:

; 10880: 							break;
; 10881: 					}
; 10882: 					side = i = (i < 10 ? 0:10);

  06265	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  06268	1b d2		 sbb	 edx, edx
  0626a	83 e2 f6	 and	 edx, -10		; fffffff6H
  0626d	83 c2 0a	 add	 edx, 10			; 0000000aH

; 10883: 					// Èõ∑Â∞î‰æßÁöÑ‰∫∫ÂÖ®ÈÉΩÊ∂àÂ§±
; 10884: 					for (; i < side + 10; i++)

  06270	8d 72 0a	 lea	 esi, DWORD PTR [edx+10]
$LL65@monster:

; 10885: 						ATR_H_POS(p_party[i]) += -lpDraw->xSize;

  06273	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  06278	8b 0c 95 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[edx*4]
  0627f	42		 inc	 edx
  06280	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  06286	29 41 18	 sub	 DWORD PTR [ecx+24], eax
  06289	3b d6		 cmp	 edx, esi
  0628b	7c e6		 jl	 SHORT $LL65@monster

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  0628d	5f		 pop	 edi
  0628e	5e		 pop	 esi
  0628f	5b		 pop	 ebx
  06290	8b e5		 mov	 esp, ebp
  06292	5d		 pop	 ebp
  06293	c3		 ret	 0
$LN962@monster:

; 10886: 				}
; 10887: 			}
; 10888: #endif
; 10889: 		}
; 10890: 		break;
; 10891: 		// ÊâßË°åÁõÆÂâçÁöÑÂííÊúØ
; 10892: 	case TOCALL_MAGIC_CASE + 2:
; 10893: 	{
; 10894: 								  idx = ATR_LONG_WORK(0, a0);

  06294	8b b2 34 01 00
	00		 mov	 esi, DWORD PTR [edx+308]

; 10895: #ifdef _PROFESSION_ADDSKILL
; 10896: 								  RunTimeMagicBoundary(ATR_CHR_NO(a0));

  0629a	ff b7 44 01 00
	00		 push	 DWORD PTR [edi+324]
  062a0	89 75 ec	 mov	 DWORD PTR _idx$3$[ebp], esi
  062a3	e8 00 00 00 00	 call	 ?RunTimeMagicBoundary@@YAXH@Z ; RunTimeMagicBoundary
  062a8	83 c4 04	 add	 esp, 4

; 10897: #endif
; 10898: 								  // Êí≠ÊîæÁöÑÊòØÁõ∏ÂØπ‰∫é‰∫∫Áâ©ÁöÑ‰ΩçÁΩÆ
; 10899: 								  if (20 != idx)

  062ab	83 fe 14	 cmp	 esi, 20			; 00000014H
  062ae	74 3a		 je	 SHORT $LN963@monster

; 10900: 								  {
; 10901: 									  a1 = p_party[idx];

  062b0	8b 14 b5 00 00
	00 00		 mov	 edx, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]

; 10902: 									  if (idx < 10)

  062b7	0f b7 05 82 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+130
  062be	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  062c1	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  062c4	7d 13		 jge	 SHORT $LN965@monster

; 10903: 									  {
; 10904: 										 // printf("\n 333333333");
; 10905: 										  ATR_H_POS(a0) = ATR_H_POS(a1) - ToCallMgc.posAttacked[0].x;

  062c6	2b c8		 sub	 ecx, eax
  062c8	89 4f 18	 mov	 DWORD PTR [edi+24], ecx

; 10906: 										  ATR_V_POS(a0) = ATR_V_POS(a1) - ToCallMgc.posAttacked[0].y;

  062cb	0f b7 05 84 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+132
  062d2	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  062d5	2b c8		 sub	 ecx, eax

; 10907: 									  }

  062d7	eb 3d		 jmp	 SHORT $LN964@monster
$LN965@monster:

; 10908: 									  else
; 10909: 									  {
; 10910: 										  //printf("\n 444444444");
; 10911: 										  ATR_H_POS(a0) = ATR_H_POS(a1) + ToCallMgc.posAttacked[0].x;

  062d9	03 c1		 add	 eax, ecx
  062db	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 10912: 										  ATR_V_POS(a0) = ATR_V_POS(a1) + ToCallMgc.posAttacked[0].y;

  062de	0f b7 0d 84 00
	00 00		 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+132
  062e5	03 4a 1c	 add	 ecx, DWORD PTR [edx+28]

; 10913: 									  }
; 10914: 								  }

  062e8	eb 2c		 jmp	 SHORT $LN964@monster
$LN963@monster:

; 10915: 								  // Êí≠ÊîæÁªùÂØπÂ∫ßÊ†áÁöÑÂííÊúØ
; 10916: 								  else
; 10917: 								  {
; 10918: 									  int value = 0;

  062ea	33 c0		 xor	 eax, eax

; 10919: 
; 10920: 									  // ÁõÆÂâçÊ≠£Âú®Âú∞Èúá‰∏≠
; 10921: 									  if (2 == g_iRunEarthQuake)

  062ec	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_iRunEarthQuake@@3HA, 2 ; g_iRunEarthQuake
  062f3	75 18		 jne	 SHORT $LN967@monster

; 10922: 										  value = piyo_tbl[(piyo_point + g_iCurRunEarthQuake) & 63] + 12;

  062f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iCurRunEarthQuake@@3HA ; g_iCurRunEarthQuake
  062fa	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?piyo_point@@3HA ; piyo_point
  06300	83 e0 3f	 and	 eax, 63			; 0000003fH
  06303	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?piyo_tbl@@3PAHA[eax*4]
  0630a	83 c0 0c	 add	 eax, 12			; 0000000cH
$LN967@monster:

; 10923: 
; 10924: #ifdef _CAX_SKILL_XY_FIX	//ÊôÆÈÄöÊîªÂáªÊÄßÂííÊúØ 
; 10925: 	if(ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum] == 5 ){
; 10926: 		//ATR_H_POS(a0) =ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].y;
; 10927: 		ATR_V_POS(a0) =ATR_V_POS(p_party[ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]]) + ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].y+value-50;
; 10928: 		ATR_H_POS(a0) =ATR_V_POS(p_party[ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]]) + ToCallMgc.posAttacked[ToCallMgc.wCurAttackNum].x+30;
; 10929: 	}else{
; 10930: 		ATR_H_POS(a0) = (0 == ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]) ? ToCallMgc.posAttacked[0].x + value + 160 : ToCallMgc.posAttacked[0].x;
; 10931: 	    ATR_V_POS(a0) = (0 == ToCallMgc.wAttackedIndex[ToCallMgc.wCurAttackNum]) ? ToCallMgc.posAttacked[0].y + value + 120: ToCallMgc.posAttacked[0].y + value;
; 10932: 	}
; 10933: #else
; 10934: 		ATR_V_POS(a0) = ToCallMgc.posAttacked[0].y + value;

  0630d	0f b7 0d 84 00
	00 00		 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+132
  06314	03 c8		 add	 ecx, eax
$LN964@monster:

; 10935: #endif
; 10936: 
; 10937: 								  }
; 10938: 								  if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  06316	6a 01		 push	 1
  06318	6a 00		 push	 0
  0631a	57		 push	 edi
  0631b	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx
  0631e	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  06323	83 c4 0c	 add	 esp, 12			; 0000000cH
  06326	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  06329	85 c0		 test	 eax, eax
  0632b	0f 84 a9 05 00
	00		 je	 $LN1234@monster

; 10939: 								  {
; 10940: #ifdef _PETSKILL_LER			// Èõ∑Â∞îÊäÄËÉΩ
; 10941: 									  int side;
; 10942: 
; 10943: 									  if (ATR_CHR_NO(a0) == 101798 || ATR_CHR_NO(a0) == 101800 || ATR_CHR_NO(a0) == 101853 || ATR_CHR_NO(a0) == 101854)

  06331	8b 87 44 01 00
	00		 mov	 eax, DWORD PTR [edi+324]
  06337	3d a6 8d 01 00	 cmp	 eax, 101798		; 00018da6H
  0633c	74 19		 je	 SHORT $LN970@monster
  0633e	3d a8 8d 01 00	 cmp	 eax, 101800		; 00018da8H
  06343	74 12		 je	 SHORT $LN970@monster
  06345	3d dd 8d 01 00	 cmp	 eax, 101853		; 00018dddH
  0634a	74 0b		 je	 SHORT $LN970@monster
  0634c	3d de 8d 01 00	 cmp	 eax, 101854		; 00018ddeH
  06351	0f 85 b3 00 00
	00		 jne	 $LN70@monster
$LN970@monster:

; 10944: 									  {
; 10945: 										  int i;
; 10946: 										  for (i = 0; i < BATTLKPKPLYAERNUM; i++)

  06357	33 c9		 xor	 ecx, ecx
  06359	0f 1f 80 00 00
	00 00		 npad	 7
$LL68@monster:

; 10947: 										  {
; 10948: 											  // ÂÖàÊâæÂà∞Èõ∑Â∞î‰ΩçÁΩÆ
; 10949: 											  if (ATR_CHR_NO(p_party[i]) == 101815)

  06360	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  06367	81 b8 44 01 00
	00 b7 8d 01 00	 cmp	 DWORD PTR [eax+324], 101815 ; 00018db7H
  06371	74 66		 je	 SHORT $LN1107@monster
  06373	8b 04 8d 04 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4+4]
  0637a	81 b8 44 01 00
	00 b7 8d 01 00	 cmp	 DWORD PTR [eax+324], 101815 ; 00018db7H
  06384	74 52		 je	 SHORT $LN1164@monster
  06386	8b 04 8d 08 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4+8]
  0638d	81 b8 44 01 00
	00 b7 8d 01 00	 cmp	 DWORD PTR [eax+324], 101815 ; 00018db7H
  06397	74 3a		 je	 SHORT $LN1165@monster
  06399	8b 04 8d 0c 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4+12]
  063a0	81 b8 44 01 00
	00 b7 8d 01 00	 cmp	 DWORD PTR [eax+324], 101815 ; 00018db7H
  063aa	74 22		 je	 SHORT $LN1166@monster
  063ac	8b 04 8d 10 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4+16]
  063b3	81 b8 44 01 00
	00 b7 8d 01 00	 cmp	 DWORD PTR [eax+324], 101815 ; 00018db7H
  063bd	74 0a		 je	 SHORT $LN1167@monster

; 10944: 									  {
; 10945: 										  int i;
; 10946: 										  for (i = 0; i < BATTLKPKPLYAERNUM; i++)

  063bf	83 c1 05	 add	 ecx, 5
  063c2	83 f9 14	 cmp	 ecx, 20			; 00000014H
  063c5	7c 99		 jl	 SHORT $LL68@monster
  063c7	eb 10		 jmp	 SHORT $LN1107@monster
$LN1167@monster:

; 10947: 										  {
; 10948: 											  // ÂÖàÊâæÂà∞Èõ∑Â∞î‰ΩçÁΩÆ
; 10949: 											  if (ATR_CHR_NO(p_party[i]) == 101815)

  063c9	83 c1 04	 add	 ecx, 4
  063cc	eb 0b		 jmp	 SHORT $LN1107@monster
$LN1166@monster:
  063ce	83 c1 03	 add	 ecx, 3
  063d1	eb 06		 jmp	 SHORT $LN1107@monster
$LN1165@monster:
  063d3	83 c1 02	 add	 ecx, 2
  063d6	eb 01		 jmp	 SHORT $LN1107@monster
$LN1164@monster:
  063d8	41		 inc	 ecx
$LN1107@monster:

; 10950: 												  break;
; 10951: 										  }
; 10952: 										  side = i = (i < 10 ? 0:10);

  063d9	ba 0a 00 00 00	 mov	 edx, 10			; 0000000aH
  063de	33 c0		 xor	 eax, eax
  063e0	3b ca		 cmp	 ecx, edx
  063e2	0f 4c d0	 cmovl	 edx, eax

; 10953: 										  // Èõ∑Â∞î‰æßÁöÑ‰∫∫Âá∫Áé∞
; 10954: 										  for (; i < side + 10; i++)

  063e5	8d 5a 0a	 lea	 ebx, DWORD PTR [edx+10]
  063e8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL71@monster:

; 10955: 											  ATR_H_POS(p_party[i]) += lpDraw->xSize;

  063f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  063f5	8b 0c 95 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[edx*4]
  063fc	42		 inc	 edx
  063fd	8b 80 84 00 00
	00		 mov	 eax, DWORD PTR [eax+132]
  06403	01 41 18	 add	 DWORD PTR [ecx+24], eax
  06406	3b d3		 cmp	 edx, ebx
  06408	7c e6		 jl	 SHORT $LL71@monster
$LN70@monster:

; 10956: 									  }
; 10957: #endif
; 10958: 									  // Terry add fix ‰øÆÊ≠£Âè¨Èõ∑Âä®Áîª
; 10959: 									  if (ToCallMgc.wCurAttackNum == 101628)
; 10960: 										  DeathAction(a0);
; 10961: 									  else
; 10962: 										  // end
; 10963: 									  if (ToCallMgc.wIsPostDisappear)

  0640a	66 83 3d c8 00
	00 00 00	 cmp	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+200, 0
  06412	74 1f		 je	 SHORT $LN974@monster

; 10964: 									  {
; 10965: 										  a0tmp[a0tmpcount] = a0;

  06414	a1 00 00 00 00	 mov	 eax, DWORD PTR ?a0tmpcount@?1??monster@@YAXPAUaction@@@Z@4HA
  06419	89 3c 85 00 00
	00 00		 mov	 DWORD PTR ?a0tmp@?1??monster@@YAXPAUaction@@@Z@4PAPAU2@A[eax*4], edi

; 10966: 										  a0mark[a0tmpcount] = 1;

  06420	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA[eax*4], 1

; 10967: 										  a0tmpcount++;

  0642b	40		 inc	 eax
  0642c	a3 00 00 00 00	 mov	 DWORD PTR ?a0tmpcount@?1??monster@@YAXPAUaction@@@Z@4HA, eax

; 10968: 									  }

  06431	eb 25		 jmp	 SHORT $LN976@monster
$LN974@monster:

; 10969: 									  else
; 10970: 									  {
; 10971: 										  DeathAction(a0);

  06433	57		 push	 edi
  06434	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10972: #ifdef _PROFESSION_ADDSKILL
; 10973: 										  if (boundary_2)

  06439	a1 00 00 00 00	 mov	 eax, DWORD PTR ?boundary_2@@3PAUaction@@A ; boundary_2
  0643e	83 c4 04	 add	 esp, 4
  06441	85 c0		 test	 eax, eax
  06443	74 13		 je	 SHORT $LN976@monster

; 10974: 										  {
; 10975: 											  DeathAction(boundary_2);

  06445	50		 push	 eax
  06446	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0644b	83 c4 04	 add	 esp, 4

; 10976: 											  boundary_2 = NULL;

  0644e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?boundary_2@@3PAUaction@@A, 0 ; boundary_2
$LN976@monster:

; 10977: 										  }
; 10978: #endif
; 10979: 									  }
; 10980: 									  // Â¶ÇÊûúÊ≤°ÊúâÂêéÁΩÆÂä®Áîª
; 10981: 									  if (0XFFFFFFFF == ToCallMgc.iPostMgcNum)

  06458	83 3d 24 00 00
	00 ff		 cmp	 DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+36, -1
  0645f	0f 85 50 03 00
	00		 jne	 $LN977@monster

; 10982: 									  {
; 10983: 										  ToCallMgc.wNumAttackeds++;

  06465	66 ff 05 c4 00
	00 00		 inc	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+196

; 10984: 										  if (20 == idx)

  0646c	83 fe 14	 cmp	 esi, 20			; 00000014H
  0646f	0f 85 01 02 00
	00		 jne	 $LN979@monster

; 10985: 										  {
; 10986: 											  // wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 10987: 											  // wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 10988: 											  int i = 0, j, charahurt, pethurt;
; 10989: 
; 10990: 											  while (++i && 0XFF != ToCallMgc.wAttackedIndex[i])

  06475	ba 64 00 00 00	 mov	 edx, OFFSET ?ToCallMgc@@3UTOCALL_MAGIC@@A+100
  0647a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0647f	89 55 f4	 mov	 DWORD PTR tv22917[ebp], edx
$LL72@monster:
  06482	66 3b 02	 cmp	 ax, WORD PTR [edx]
  06485	0f 84 4f 04 00
	00		 je	 $LN1234@monster

; 10991: 											  {
; 10992: 												  for (j = 0; j < iAttackedNum; j++)

  0648b	33 c9		 xor	 ecx, ecx
  0648d	89 4d 08	 mov	 DWORD PTR _j$1$[ebp], ecx
  06490	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, ecx
  06496	0f 8e c3 01 00
	00		 jle	 $LN75@monster
  0649c	bb 04 00 00 00	 mov	 ebx, OFFSET ?AttackedInfo@@3PAHA+4
$LL76@monster:

; 10993: 												  {
; 10994: 													  if (ToCallMgc.wAttackedIndex[i] == AttackedInfo[j * 4])

  064a1	0f b7 02	 movzx	 eax, WORD PTR [edx]
  064a4	3b 43 fc	 cmp	 eax, DWORD PTR [ebx-4]
  064a7	0f 85 9a 01 00
	00		 jne	 $LN74@monster

; 10995: 													  {
; 10996: 														  a1 = p_party[AttackedInfo[j * 4 + 1]];

  064ad	8b 03		 mov	 eax, DWORD PTR [ebx]

; 10997: 														  charahurt = AttackedInfo[j * 4 + 2];

  064af	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]

; 10998: 														  pethurt = AttackedInfo[j * 4 + 3];

  064b2	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  064b5	89 55 ec	 mov	 DWORD PTR _charahurt$1$[ebp], edx
  064b8	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 10999: 														  ATR_LONG_WORK(0, a1) = 0;

  064bf	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  064c2	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0

; 11000: 														  ATR_DAMAGE(a1) = charahurt;

  064cc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  064cf	89 50 58	 mov	 DWORD PTR [eax+88], edx

; 11001: 														  ATR_PET_DAMAGE(a1) = pethurt;

  064d2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  064d5	89 88 24 02 00
	00		 mov	 DWORD PTR [eax+548], ecx

; 11002: 														  if (charahurt == 0)//‰º§ÂÆ≥ÂÄº‰∏∫0 

  064db	85 d2		 test	 edx, edx
  064dd	0f 85 a1 00 00
	00		 jne	 $LN982@monster

; 11003: 														  {
; 11004: #ifdef _BATTLESKILL				// (ÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 11005: 															  if (a0->anim_chr_no == 101651 || a0->anim_chr_no == 101650) //ÂÜ∞ÁàÜÊúØÁ¨¨‰∏Ä‰∏ãMiss‰∏çÁßÄ

  064e3	8b 87 44 01 00
	00		 mov	 eax, DWORD PTR [edi+324]
  064e9	3d 13 8d 01 00	 cmp	 eax, 101651		; 00018d13H
  064ee	0f 84 88 00 00
	00		 je	 $LN986@monster
  064f4	3d 12 8d 01 00	 cmp	 eax, 101650		; 00018d12H
  064f9	0f 84 7d 00 00
	00		 je	 $LN986@monster

; 11007: 															  else
; 11008: 															  {
; 11009: 																  set_damage_num(a1, 0, -64);

  064ff	6a c0		 push	 -64			; ffffffc0H
  06501	52		 push	 edx
  06502	56		 push	 esi
  06503	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 11010: 																  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 5;

  06508	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0650b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0650e	c6 00 d7	 mov	 BYTE PTR [eax], 215	; 000000d7H

; 11011: 																  if ( ToCallMgc.iCurMgcNum == 101676 //Ë¥ØÁ©øÊîªÂáªÁöÑ‰º§ÂÆ≥Ëã•‰∏∫0,Ë¢´ÊâìÁöÑ‰∫∫Ë¶ÅÊúâÈó™ÈÅøÁöÑÂä®‰Ωú
; 11012: 																	  || ToCallMgc.iCurMgcNum == 101675
; 11013: 																	  || ToCallMgc.iCurMgcNum == 101674
; 11014: 																	  || ToCallMgc.iCurMgcNum == 101673
; 11015: 																	  || ToCallMgc.iCurMgcNum == 101672
; 11016: 																	  || ToCallMgc.iCurMgcNum == 101665
; 11017: 																	  || ToCallMgc.iCurMgcNum == 101664
; 11018: 																	  || ToCallMgc.iCurMgcNum == 101663
; 11019: 																	  || ToCallMgc.iCurMgcNum == 101662
; 11020: 																	  || ToCallMgc.iCurMgcNum == 101661
; 11021: 																	  || ToCallMgc.iCurMgcNum == 101656)

  06511	a1 20 00 00 00	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+32
  06516	3d 2c 8d 01 00	 cmp	 eax, 101676		; 00018d2cH
  0651b	74 46		 je	 SHORT $LN988@monster
  0651d	3d 2b 8d 01 00	 cmp	 eax, 101675		; 00018d2bH
  06522	74 3f		 je	 SHORT $LN988@monster
  06524	3d 2a 8d 01 00	 cmp	 eax, 101674		; 00018d2aH
  06529	74 38		 je	 SHORT $LN988@monster
  0652b	3d 29 8d 01 00	 cmp	 eax, 101673		; 00018d29H
  06530	74 31		 je	 SHORT $LN988@monster
  06532	3d 28 8d 01 00	 cmp	 eax, 101672		; 00018d28H
  06537	74 2a		 je	 SHORT $LN988@monster
  06539	3d 21 8d 01 00	 cmp	 eax, 101665		; 00018d21H
  0653e	74 23		 je	 SHORT $LN988@monster
  06540	3d 20 8d 01 00	 cmp	 eax, 101664		; 00018d20H
  06545	74 1c		 je	 SHORT $LN988@monster
  06547	3d 1f 8d 01 00	 cmp	 eax, 101663		; 00018d1fH
  0654c	74 15		 je	 SHORT $LN988@monster
  0654e	3d 1e 8d 01 00	 cmp	 eax, 101662		; 00018d1eH
  06553	74 0e		 je	 SHORT $LN988@monster
  06555	3d 1d 8d 01 00	 cmp	 eax, 101661		; 00018d1dH
  0655a	74 07		 je	 SHORT $LN988@monster
  0655c	3d 18 8d 01 00	 cmp	 eax, 101656		; 00018d18H
  06561	75 34		 jne	 SHORT $LN983@monster
$LN988@monster:

; 11022: 																  {	//ÂõûÊóãÊîªÂáª
; 11023: 																	  ATR_STIMER(a1) = 0;

  06563	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06566	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 11024: 																	  ATR_FIRST_FLG(a1) = 0;		//?????????

  0656a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0656d	c6 80 1e 01 00
	00 00		 mov	 BYTE PTR [eax+286], 0

; 11025: 																	  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 6;

  06574	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06577	c6 00 d8	 mov	 BYTE PTR [eax], 216	; 000000d8H
  0657a	eb 1b		 jmp	 SHORT $LN983@monster
$LN986@monster:

; 11006: 																  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 5;

  0657c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0657f	c6 00 d7	 mov	 BYTE PTR [eax], 215	; 000000d7H

; 11026: 																  }
; 11027: 															  }
; 11028: #else
; 11029: 															  set_damage_num(a1, 0, -64);
; 11030: 															  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 5;
; 11031: #endif
; 11032: 														  }

  06582	eb 13		 jmp	 SHORT $LN983@monster
$LN982@monster:

; 11033: 														  else
; 11034: 														  {
; 11035: 															  set_damage_num(a1, 6, -64);

  06584	6a c0		 push	 -64			; ffffffc0H
  06586	6a 06		 push	 6
  06588	56		 push	 esi
  06589	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 11036: 															  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 4;

  0658e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06591	83 c4 0c	 add	 esp, 12			; 0000000cH
  06594	c6 00 d6	 mov	 BYTE PTR [eax], 214	; 000000d6H
$LN983@monster:

; 11037: 														  }
; 11038: 														  ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  06597	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 11039: 														  set_jujutsu_hit_mark(a1);

  0659a	56		 push	 esi
  0659b	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  0659e	29 46 78	 sub	 DWORD PTR [esi+120], eax
  065a1	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  065a6	83 c4 04	 add	 esp, 4

; 11040: 														  if (ATR_LIFE(a1) <= 0)

  065a9	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  065ad	7f 0d		 jg	 SHORT $LN989@monster

; 11041: 														  {
; 11042: 															  ATR_LIFE(a1) = 0;

  065af	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 11043: 															  slow_flg++;

  065b6	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN989@monster:

; 11044: 														  }
; 11045: 														  ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  065bc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  065bf	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  065c5	2b 88 24 02 00
	00		 sub	 ecx, DWORD PTR [eax+548]
  065cb	89 8e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ecx

; 11046: 														  //andy_fall
; 11047: 														  if (ATR_PETFALL(a1) == 1)

  065d1	83 be bc 01 00
	00 01		 cmp	 DWORD PTR [esi+444], 1
  065d8	75 15		 jne	 SHORT $LN991@monster

; 11048: 														  {
; 11049: 															  if (ATR_LIFE(a1) > 0)

  065da	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  065de	7e 0f		 jle	 SHORT $LN991@monster

; 11050: 																  petfallChangeGraph(a1);

  065e0	56		 push	 esi
  065e1	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  065e6	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  065ec	83 c4 04	 add	 esp, 4
$LN991@monster:

; 11051: 														  }
; 11052: 														  if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1))

  065ef	85 c9		 test	 ecx, ecx
  065f1	7f 22		 jg	 SHORT $LN993@monster
  065f3	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  065fa	74 19		 je	 SHORT $LN993@monster

; 11053: 														  {
; 11054: 															  ATR_PET_LIFE(a1) = 0;

  065fc	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0

; 11055: 															  if (ATR_LIFE(a1) > 0)

  06606	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  0660a	7e 09		 jle	 SHORT $LN993@monster

; 11056: 																  petfallChangeGraph(a1);

  0660c	56		 push	 esi
  0660d	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  06612	83 c4 04	 add	 esp, 4
$LN993@monster:

; 11057: 														  }
; 11058: 														  if (charahurt == 0)
; 11059: 															  ATR_CHR_ACT(a1) = ANIM_STAND;
; 11060: 														  else
; 11061: 															  ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 11062: 														  ATR_CHR_ACT_OLD(a1) = -1;

  06615	33 c0		 xor	 eax, eax
  06617	39 45 ec	 cmp	 DWORD PTR _charahurt$1$[ebp], eax

; 11063: 														  pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  0661a	6a 00		 push	 0
  0661c	0f 94 c0	 sete	 al
  0661f	6a 00		 push	 0
  06621	56		 push	 esi
  06622	8d 04 45 01 00
	00 00		 lea	 eax, DWORD PTR [eax*2+1]
  06629	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
  0662f	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  06639	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0663e	8b 4d 08	 mov	 ecx, DWORD PTR _j$1$[ebp]
  06641	83 c4 0c	 add	 esp, 12			; 0000000cH
  06644	8b 55 f4	 mov	 edx, DWORD PTR tv22917[ebp]
$LN74@monster:

; 10991: 											  {
; 10992: 												  for (j = 0; j < iAttackedNum; j++)

  06647	41		 inc	 ecx
  06648	83 c3 10	 add	 ebx, 16			; 00000010H
  0664b	89 4d 08	 mov	 DWORD PTR _j$1$[ebp], ecx
  0664e	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?iAttackedNum@@3HA
  06654	0f 8c 47 fe ff
	ff		 jl	 $LL76@monster
  0665a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN75@monster:

; 10985: 										  {
; 10986: 											  // wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 10987: 											  // wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 10988: 											  int i = 0, j, charahurt, pethurt;
; 10989: 
; 10990: 											  while (++i && 0XFF != ToCallMgc.wAttackedIndex[i])

  0665f	83 c2 02	 add	 edx, 2
  06662	89 55 f4	 mov	 DWORD PTR tv22917[ebp], edx
  06665	81 fa 62 00 00
	00		 cmp	 edx, OFFSET ?ToCallMgc@@3UTOCALL_MAGIC@@A+98
  0666b	0f 85 11 fe ff
	ff		 jne	 $LL72@monster

; 11064: 													  }
; 11065: 												  }
; 11066: 											  }
; 11067: 										  }

  06671	e9 64 02 00 00	 jmp	 $LN1234@monster
$LN979@monster:

; 11068: 										  else
; 11069: 										  {
; 11070: 											  int j, charahurt, pethurt;
; 11071: 
; 11072: 											  for (j = 0; j < iAttackedNum; j++)

  06676	33 db		 xor	 ebx, ebx
  06678	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, ebx
  0667e	0f 8e 56 02 00
	00		 jle	 $LN1234@monster
  06684	bf 04 00 00 00	 mov	 edi, OFFSET ?AttackedInfo@@3PAHA+4
  06689	0f 1f 80 00 00
	00 00		 npad	 7
$LL79@monster:

; 11073: 											  {
; 11074: 												  if (idx == AttackedInfo[j * 4])

  06690	3b 77 fc	 cmp	 esi, DWORD PTR [edi-4]
  06693	0f 85 07 01 00
	00		 jne	 $LN77@monster

; 11075: 												  {
; 11076: 													  a1 = p_party[AttackedInfo[j * 4 + 1]];

  06699	8b 07		 mov	 eax, DWORD PTR [edi]

; 11077: 													  charahurt = AttackedInfo[j * 4 + 2];

  0669b	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 11078: 													  pethurt = AttackedInfo[j * 4 + 3];

  0669e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  066a1	89 55 08	 mov	 DWORD PTR _charahurt$1$[ebp], edx
  066a4	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]

; 11079: 													  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 4;
; 11080: 													  ATR_LONG_WORK(0, a1) = 0;
; 11081: 													  ATR_DAMAGE(a1) = charahurt;
; 11082: 													  ATR_PET_DAMAGE(a1) = pethurt;
; 11083: 													  if (charahurt == 0)

  066ab	6a c0		 push	 -64			; ffffffc0H
  066ad	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  066b0	c6 00 d6	 mov	 BYTE PTR [eax], 214	; 000000d6H
  066b3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  066b6	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  066c0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  066c3	89 50 58	 mov	 DWORD PTR [eax+88], edx
  066c6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  066c9	89 88 24 02 00
	00		 mov	 DWORD PTR [eax+548], ecx
  066cf	85 d2		 test	 edx, edx
  066d1	75 0f		 jne	 SHORT $LN997@monster

; 11084: 													  {
; 11085: 														  //#ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 11086: 														  //								if ( a0->anim_chr_no == 101651 || a0->anim_chr_no == 101650 ) //ÂÜ∞ÁàÜÊúØÁ¨¨‰∏Ä‰∏ãMiss‰∏çÁßÄ
; 11087: 														  //									ATR_VCT_NO(a1)		= TOCALL_MAGIC_CASE + 5;
; 11088: 														  //								else {
; 11089: 														  //									set_damage_num( a1 , 0 , -64 );
; 11090: 														  //									ATR_VCT_NO(a1)		= TOCALL_MAGIC_CASE + 5;
; 11091: 														  //								}
; 11092: 														  //#else
; 11093: 														  set_damage_num(a1, 0, -64);

  066d3	52		 push	 edx
  066d4	56		 push	 esi
  066d5	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 11094: 														  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 5;

  066da	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  066dd	c6 00 d7	 mov	 BYTE PTR [eax], 215	; 000000d7H

; 11095: 														  //#endif
; 11096: 													  }

  066e0	eb 0e		 jmp	 SHORT $LN1254@monster
$LN997@monster:

; 11097: 													  else
; 11098: 													  {
; 11099: 														  set_damage_num(a1, 6, -64);

  066e2	6a 06		 push	 6
  066e4	56		 push	 esi
  066e5	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 11100: 														  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 4;

  066ea	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  066ed	c6 00 d6	 mov	 BYTE PTR [eax], 214	; 000000d6H
$LN1254@monster:

; 11101: 													  }
; 11102: 													  ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  066f0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  066f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  066f6	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  066f9	29 46 78	 sub	 DWORD PTR [esi+120], eax

; 11103: 													  set_jujutsu_hit_mark(a1);

  066fc	56		 push	 esi
  066fd	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  06702	83 c4 04	 add	 esp, 4

; 11104: 													  if (ATR_LIFE(a1) <= 0)

  06705	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  06709	7f 0d		 jg	 SHORT $LN999@monster

; 11105: 													  {
; 11106: 														  ATR_LIFE(a1) = 0;

  0670b	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 11107: 														  slow_flg++;

  06712	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN999@monster:

; 11108: 													  }
; 11109: 													  ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  06718	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0671b	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  06721	2b 88 24 02 00
	00		 sub	 ecx, DWORD PTR [eax+548]
  06727	89 8e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ecx

; 11110: 													  //andy_fall
; 11111: 													  if (ATR_PETFALL(a1) == 1)

  0672d	83 be bc 01 00
	00 01		 cmp	 DWORD PTR [esi+444], 1
  06734	75 15		 jne	 SHORT $LN1001@monster

; 11112: 													  {
; 11113: 														  if (ATR_LIFE(a1) > 0)

  06736	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  0673a	7e 0f		 jle	 SHORT $LN1001@monster

; 11114: 															  petfallChangeGraph(a1);

  0673c	56		 push	 esi
  0673d	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  06742	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  06748	83 c4 04	 add	 esp, 4
$LN1001@monster:

; 11115: 													  }
; 11116: 													  if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1))

  0674b	85 c9		 test	 ecx, ecx
  0674d	7f 22		 jg	 SHORT $LN1003@monster
  0674f	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  06756	74 19		 je	 SHORT $LN1003@monster

; 11117: 													  {
; 11118: 														  ATR_PET_LIFE(a1) = 0;

  06758	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0

; 11119: 														  if (ATR_LIFE(a1) > 0)

  06762	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  06766	7e 09		 jle	 SHORT $LN1003@monster

; 11120: 															  petfallChangeGraph(a1);

  06768	56		 push	 esi
  06769	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  0676e	83 c4 04	 add	 esp, 4
$LN1003@monster:

; 11121: 													  }
; 11122: 													  if (charahurt == 0)
; 11123: 														  ATR_CHR_ACT(a1) = ANIM_STAND;
; 11124: 													  else
; 11125: 														  ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 11126: 													  ATR_CHR_ACT_OLD(a1) = -1;

  06771	33 c0		 xor	 eax, eax
  06773	39 45 08	 cmp	 DWORD PTR _charahurt$1$[ebp], eax

; 11127: 													  pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  06776	6a 00		 push	 0
  06778	0f 94 c0	 sete	 al
  0677b	6a 00		 push	 0
  0677d	56		 push	 esi
  0677e	8d 04 45 01 00
	00 00		 lea	 eax, DWORD PTR [eax*2+1]
  06785	89 86 4c 01 00
	00		 mov	 DWORD PTR [esi+332], eax
  0678b	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  06795	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0679a	8b 75 ec	 mov	 esi, DWORD PTR _idx$3$[ebp]
  0679d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN77@monster:

; 11068: 										  else
; 11069: 										  {
; 11070: 											  int j, charahurt, pethurt;
; 11071: 
; 11072: 											  for (j = 0; j < iAttackedNum; j++)

  067a0	43		 inc	 ebx
  067a1	83 c7 10	 add	 edi, 16			; 00000010H
  067a4	3b 1d 00 00 00
	00		 cmp	 ebx, DWORD PTR ?iAttackedNum@@3HA
  067aa	0f 8c e0 fe ff
	ff		 jl	 $LL79@monster

; 11128: 												  }
; 11129: 											  }
; 11130: 										  }
; 11131: 									  }

  067b0	e9 25 01 00 00	 jmp	 $LN1234@monster
$LN977@monster:

; 11132: 									  // Êã•ÊúâÂêéÁΩÆÂä®Áîª
; 11133: 									  else
; 11134: 									  {
; 11135: 										  // ÈíàÂØπÊâÄÊúâÁöÑÊïå‰∫∫ÊñΩÂêéÁΩÆÂä®Áîª
; 11136: 										  if (20 == idx) // idx = wAttackedIndex[0]

  067b5	83 fe 14	 cmp	 esi, 20			; 00000014H
  067b8	0f 85 a6 00 00
	00		 jne	 $LN1006@monster

; 11137: 										  {
; 11138: 											  // wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 11139: 											  // wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 11140: 											  int i = 0;
; 11141: 
; 11142: 											  while (++i && 0XFF != ToCallMgc.wAttackedIndex[i])

  067be	bf 01 00 00 00	 mov	 edi, 1
  067c3	be 64 00 00 00	 mov	 esi, OFFSET ?ToCallMgc@@3UTOCALL_MAGIC@@A+100
  067c8	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  067cd	8d 5f 57	 lea	 ebx, DWORD PTR [edi+87]
$LL80@monster:
  067d0	66 3b 06	 cmp	 ax, WORD PTR [esi]
  067d3	0f 84 01 01 00
	00		 je	 $LN1234@monster

; 11143: 											  {
; 11144: 												  a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  067d9	68 60 02 00 00	 push	 608			; 00000260H
  067de	6a 47		 push	 71			; 00000047H
  067e0	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  067e5	8b d0		 mov	 edx, eax
  067e7	83 c4 08	 add	 esp, 8

; 11145: 
; 11146: 												  ATR_NAME(a1) = monster;

  067ea	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 11147: 												  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 3;		// ÂêéÁΩÆÂä®Áîª

  067f1	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  067f4	c6 01 d5	 mov	 BYTE PTR [ecx], 213	; 000000d5H

; 11148: 												  ATR_DISP_PRIO(a1) = (1 == ToCallMgc.wPostMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  067f7	b9 02 00 00 00	 mov	 ecx, 2
  067fc	66 3b 3d 40 00
	00 00		 cmp	 di, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+64
  06803	0f 44 cb	 cmove	 ecx, ebx
  06806	88 4a 15	 mov	 BYTE PTR [edx+21], cl

; 11149: 												  ATR_CHR_NO(a1) = ToCallMgc.iPostMgcNum;

  06809	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+36
  0680e	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax

; 11150: 												  ATR_LONG_WORK(0, a1) = ToCallMgc.wAttackedIndex[i];

  06814	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  06817	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  0681a	89 88 34 01 00
	00		 mov	 DWORD PTR [eax+308], ecx

; 11151: 												  ATR_H_POS(a1) = ATR_H_POS(p_party[ToCallMgc.wAttackedIndex[i]]) + ToCallMgc.wPostMgcX;

  06820	0f b7 06	 movzx	 eax, WORD PTR [esi]
  06823	0f b7 0d 38 00
	00 00		 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+56
  0682a	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  06831	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  06834	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 11152: 												  ATR_V_POS(a1) = ATR_V_POS(p_party[ToCallMgc.wAttackedIndex[i]]) + ToCallMgc.wPostMgcY;

  06837	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0683a	83 c6 02	 add	 esi, 2
  0683d	0f b7 0d 3a 00
	00 00		 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+58
  06844	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0684b	03 48 1c	 add	 ecx, DWORD PTR [eax+28]
  0684e	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  06853	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
  06856	81 fe 62 00 00
	00		 cmp	 esi, OFFSET ?ToCallMgc@@3UTOCALL_MAGIC@@A+98
  0685c	0f 85 6e ff ff
	ff		 jne	 $LL80@monster

; 11153: 											  }
; 11154: 										  }

  06862	eb 76		 jmp	 SHORT $LN1234@monster
$LN1006@monster:

; 11155: 										  // ÈíàÂØπÊüê‰∏Ä‰∏™Êïå‰∫∫ÊñΩÂêéÁΩÆÂä®Áîª
; 11156: 										  else
; 11157: 										  {
; 11158: 											  a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU));

  06864	68 60 02 00 00	 push	 608			; 00000260H
  06869	6a 47		 push	 71			; 00000047H
  0686b	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  06870	8b d0		 mov	 edx, eax
  06872	83 c4 08	 add	 esp, 8

; 11159: 
; 11160: 											  ATR_NAME(a1) = monster;
; 11161: 											  ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 3;		// ÂêéÁΩÆÂä®Áîª
; 11162: 											  ATR_DISP_PRIO(a1) = (1 == ToCallMgc.wPostMgcOnChar) ? D_PRIO_HIT_MARK : DISP_PRIO_TILE + 1;

  06875	bf 01 00 00 00	 mov	 edi, 1
  0687a	b8 58 00 00 00	 mov	 eax, 88			; 00000058H
  0687f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster
  06886	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  06889	c6 01 d5	 mov	 BYTE PTR [ecx], 213	; 000000d5H
  0688c	b9 02 00 00 00	 mov	 ecx, 2
  06891	66 3b 3d 40 00
	00 00		 cmp	 di, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+64
  06898	0f 44 c8	 cmove	 ecx, eax
  0689b	88 4a 15	 mov	 BYTE PTR [edx+21], cl

; 11163: 											  ATR_CHR_NO(a1) = ToCallMgc.iPostMgcNum;

  0689e	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+36
  068a3	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax

; 11164: 											  ATR_LONG_WORK(0, a1) = idx;

  068a9	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  068ac	89 b0 34 01 00
	00		 mov	 DWORD PTR [eax+308], esi

; 11165: 											  ATR_H_POS(a1) = ATR_H_POS(p_party[idx]) + ToCallMgc.wPostMgcX;

  068b2	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  068b9	0f b7 0d 38 00
	00 00		 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+56
  068c0	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  068c3	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 11166: 											  ATR_V_POS(a1) = ATR_V_POS(p_party[idx]) + ToCallMgc.wPostMgcY;

  068c6	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  068cd	0f b7 0d 3a 00
	00 00		 movzx	 ecx, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+58
  068d4	03 48 1c	 add	 ecx, DWORD PTR [eax+28]
  068d7	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN1234@monster:

; 11167: 										  }
; 11168: 									  }
; 11169: 								  }
; 11170: 
; 11171: 								  // Â∑±ÁªèÊí≠ÊîæÊâÄÊúâÁöÑÂä®Áîª‰∫Ü
; 11172: 								  if (ToCallMgc.wNumAttackeds == ToCallMgc.wNumAttacks && 0 == iAttackedNum)

  068da	66 a1 c4 00 00
	00		 mov	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+196
  068e0	66 3b 05 c2 00
	00 00		 cmp	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+194
  068e7	0f 85 5c 06 00
	00		 jne	 $LN1058@monster
  068ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, 0
$LN1271@monster:

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  068f4	0f 85 4f 06 00
	00		 jne	 $LN1058@monster
$LN1272@monster:
  068fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?p_master@@3PAUaction@@A
  068ff	5f		 pop	 edi
  06900	5e		 pop	 esi
  06901	5b		 pop	 ebx
  06902	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  06905	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  06909	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  0690c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bRunToCallMgc@@3HA, 0
  06916	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_iRunEarthQuake@@3HA, 0 ; g_iRunEarthQuake
  06920	8b e5		 mov	 esp, ebp
  06922	5d		 pop	 ebp
  06923	c3		 ret	 0
$LN1009@monster:

; 11173: 								  {
; 11174: 									  ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 11175: 									  bRunToCallMgc = FALSE;
; 11176: 									  g_iRunEarthQuake = 0;
; 11177: 								  }
; 11178: 
; 11179: 								  break;
; 11180: 	}
; 11181: 		// ÊâßË°åÂêéÁΩÆÂä®Áîª
; 11182: 	case TOCALL_MAGIC_CASE + 3:
; 11183: 
; 11184: 		idx = ATR_LONG_WORK(0, a0);

  06924	8b b2 34 01 00
	00		 mov	 esi, DWORD PTR [edx+308]

; 11185: 		a1 = p_party[idx];
; 11186: 		ATR_H_POS(a0) = ATR_H_POS(a1) + ToCallMgc.wPostMgcX;

  0692a	0f b7 05 38 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+56

; 11187: 		ATR_V_POS(a0) = ATR_V_POS(a1) + ToCallMgc.wPostMgcY;
; 11188: 
; 11189: 		if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  06931	6a 01		 push	 1
  06933	6a 00		 push	 0
  06935	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  0693c	57		 push	 edi
  0693d	89 75 08	 mov	 DWORD PTR _idx$4$[ebp], esi
  06940	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  06943	89 47 18	 mov	 DWORD PTR [edi+24], eax
  06946	0f b7 05 3a 00
	00 00		 movzx	 eax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+58
  0694d	03 41 1c	 add	 eax, DWORD PTR [ecx+28]
  06950	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  06953	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  06958	83 c4 0c	 add	 esp, 12			; 0000000cH
  0695b	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  0695e	85 c0		 test	 eax, eax
  06960	0f 84 6a 02 00
	00		 je	 $LN1237@monster

; 11190: 		{
; 11191: 			DeathAction(a0);

  06966	57		 push	 edi
  06967	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11192: 			ToCallMgc.wNumAttackeds++;

  0696c	66 ff 05 c4 00
	00 00		 inc	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+196
  06973	83 c4 04	 add	 esp, 4

; 11193: 
; 11194: 			if (20 == idx)

  06976	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iAttackedNum@@3HA
  0697c	83 fe 14	 cmp	 esi, 20			; 00000014H
  0697f	0f 85 42 01 00
	00		 jne	 $LN1011@monster

; 11195: 			{
; 11196: 				// wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 11197: 				// wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 11198: 				int i = 0, j, charahurt, pethurt;
; 11199: 
; 11200: 				while (++i && 0XFF != ToCallMgc.wAttackedIndex[i])

  06985	ba 64 00 00 00	 mov	 edx, OFFSET ?ToCallMgc@@3UTOCALL_MAGIC@@A+100
  0698a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0698f	89 55 08	 mov	 DWORD PTR tv22895[ebp], edx
$LL82@monster:
  06992	66 3b 02	 cmp	 ax, WORD PTR [edx]
  06995	0f 84 3b 02 00
	00		 je	 $LN88@monster

; 11201: 				{
; 11202: 					for (j = 0; j < iAttackedNum; j++)

  0699b	33 db		 xor	 ebx, ebx
  0699d	85 c9		 test	 ecx, ecx
  0699f	0f 8e 0b 01 00
	00		 jle	 $LN85@monster
  069a5	bf 04 00 00 00	 mov	 edi, OFFSET ?AttackedInfo@@3PAHA+4
  069aa	66 0f 1f 44 00
	00		 npad	 6
$LL86@monster:

; 11203: 					{
; 11204: 						if (ToCallMgc.wAttackedIndex[i] == AttackedInfo[j * 4])

  069b0	0f b7 02	 movzx	 eax, WORD PTR [edx]
  069b3	3b 47 fc	 cmp	 eax, DWORD PTR [edi-4]
  069b6	0f 85 e3 00 00
	00		 jne	 $LN84@monster

; 11205: 						{
; 11206: 							a1 = p_party[AttackedInfo[j * 4 + 1]];

  069bc	8b 07		 mov	 eax, DWORD PTR [edi]

; 11207: 							charahurt = AttackedInfo[j * 4 + 2];

  069be	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 11208: 							pethurt = AttackedInfo[j * 4 + 3];

  069c1	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 11209: 
; 11210: 							ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 4;
; 11211: 							ATR_LONG_WORK(0, a1) = 0;
; 11212: 							ATR_DAMAGE(a1) = charahurt;
; 11213: 
; 11214: 
; 11215: 							ATR_PET_DAMAGE(a1) = pethurt;
; 11216: 
; 11217: 							set_damage_num(a1, 6, -64);

  069c4	6a c0		 push	 -64			; ffffffc0H
  069c6	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  069cd	6a 06		 push	 6
  069cf	56		 push	 esi
  069d0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  069d3	c6 00 d6	 mov	 BYTE PTR [eax], 214	; 000000d6H
  069d6	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  069d9	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  069e3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  069e6	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  069e9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  069ec	89 90 24 02 00
	00		 mov	 DWORD PTR [eax+548], edx
  069f2	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 11218: 							ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  069f7	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 11219: 							set_jujutsu_hit_mark(a1);

  069fa	56		 push	 esi
  069fb	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  069fe	29 46 78	 sub	 DWORD PTR [esi+120], eax
  06a01	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  06a06	83 c4 10	 add	 esp, 16			; 00000010H

; 11220: 							if (ATR_LIFE(a1) <= 0)

  06a09	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  06a0d	7f 0d		 jg	 SHORT $LN1014@monster

; 11221: 							{
; 11222: 								ATR_LIFE(a1) = 0;

  06a0f	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 11223: 								slow_flg++;

  06a16	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN1014@monster:

; 11224: 							}
; 11225: 
; 11226: 
; 11227: 							ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  06a1c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06a1f	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  06a25	2b 88 24 02 00
	00		 sub	 ecx, DWORD PTR [eax+548]
  06a2b	89 8e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ecx

; 11228: 							//andy_fall
; 11229: 							if (ATR_PETFALL(a1) == 1)	{

  06a31	83 be bc 01 00
	00 01		 cmp	 DWORD PTR [esi+444], 1
  06a38	75 15		 jne	 SHORT $LN1016@monster

; 11230: 								if (ATR_LIFE(a1) > 0)	{

  06a3a	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  06a3e	7e 0f		 jle	 SHORT $LN1016@monster

; 11231: 									petfallChangeGraph(a1);

  06a40	56		 push	 esi
  06a41	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  06a46	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  06a4c	83 c4 04	 add	 esp, 4
$LN1016@monster:

; 11232: 								}
; 11233: 							}
; 11234: 							if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1)){

  06a4f	85 c9		 test	 ecx, ecx
  06a51	7f 22		 jg	 SHORT $LN1018@monster
  06a53	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  06a5a	74 19		 je	 SHORT $LN1018@monster

; 11235: 								ATR_PET_LIFE(a1) = 0;

  06a5c	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0

; 11236: 
; 11237: 								if (ATR_LIFE(a1) > 0)

  06a66	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  06a6a	7e 09		 jle	 SHORT $LN1018@monster

; 11238: 									petfallChangeGraph(a1);

  06a6c	56		 push	 esi
  06a6d	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  06a72	83 c4 04	 add	 esp, 4
$LN1018@monster:

; 11239: 							}
; 11240: 
; 11241: 							ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 11242: 							ATR_CHR_ACT_OLD(a1) = -1;
; 11243: 							pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  06a75	6a 00		 push	 0
  06a77	6a 00		 push	 0
  06a79	c7 86 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+332], 1
  06a83	56		 push	 esi
  06a84	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  06a8e	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  06a93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iAttackedNum@@3HA
  06a99	83 c4 0c	 add	 esp, 12			; 0000000cH
  06a9c	8b 55 08	 mov	 edx, DWORD PTR tv22895[ebp]
$LN84@monster:

; 11201: 				{
; 11202: 					for (j = 0; j < iAttackedNum; j++)

  06a9f	43		 inc	 ebx
  06aa0	83 c7 10	 add	 edi, 16			; 00000010H
  06aa3	3b d9		 cmp	 ebx, ecx
  06aa5	0f 8c 05 ff ff
	ff		 jl	 $LL86@monster
  06aab	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN85@monster:

; 11195: 			{
; 11196: 				// wAttackedIndex[0] ÊîæÁΩÆ  20 -- ‰ª£Ë°®ÂÖ®‰ΩìÊîªÂáª
; 11197: 				// wAttackedIndex[n] ÊîæÁΩÆ0XFF -- ‰ª£Ë°®ÁªìÊùü
; 11198: 				int i = 0, j, charahurt, pethurt;
; 11199: 
; 11200: 				while (++i && 0XFF != ToCallMgc.wAttackedIndex[i])

  06ab0	83 c2 02	 add	 edx, 2
  06ab3	89 55 08	 mov	 DWORD PTR tv22895[ebp], edx
  06ab6	81 fa 62 00 00
	00		 cmp	 edx, OFFSET ?ToCallMgc@@3UTOCALL_MAGIC@@A+98
  06abc	0f 85 d0 fe ff
	ff		 jne	 $LL82@monster

; 11244: 						}
; 11245: 					}
; 11246: 				}
; 11247: 			}

  06ac2	e9 0f 01 00 00	 jmp	 $LN88@monster
$LN1011@monster:

; 11248: 			else
; 11249: 			{
; 11250: 				int j, charahurt, pethurt;
; 11251: 
; 11252: 				for (j = 0; j < iAttackedNum; j++)

  06ac7	33 db		 xor	 ebx, ebx
  06ac9	85 c9		 test	 ecx, ecx
  06acb	0f 8e 05 01 00
	00		 jle	 $LN88@monster
  06ad1	bf 04 00 00 00	 mov	 edi, OFFSET ?AttackedInfo@@3PAHA+4
$LL89@monster:

; 11253: 				{
; 11254: 					if (idx == AttackedInfo[j * 4])

  06ad6	3b 77 fc	 cmp	 esi, DWORD PTR [edi-4]
  06ad9	0f 85 e3 00 00
	00		 jne	 $LN87@monster

; 11255: 					{
; 11256: 						a1 = p_party[AttackedInfo[j * 4 + 1]];

  06adf	8b 07		 mov	 eax, DWORD PTR [edi]

; 11257: 						charahurt = AttackedInfo[j * 4 + 2];

  06ae1	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 11258: 						pethurt = AttackedInfo[j * 4 + 3];

  06ae4	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 11259: 						ATR_VCT_NO(a1) = TOCALL_MAGIC_CASE + 4;
; 11260: 						ATR_LONG_WORK(0, a1) = 0;
; 11261: 						ATR_DAMAGE(a1) = charahurt;
; 11262: 						ATR_PET_DAMAGE(a1) = pethurt;
; 11263: 						set_damage_num(a1, 6, -64);

  06ae7	6a c0		 push	 -64			; ffffffc0H
  06ae9	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  06af0	6a 06		 push	 6
  06af2	56		 push	 esi
  06af3	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06af6	c6 00 d6	 mov	 BYTE PTR [eax], 214	; 000000d6H
  06af9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06afc	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0
  06b06	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06b09	89 48 58	 mov	 DWORD PTR [eax+88], ecx
  06b0c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06b0f	89 90 24 02 00
	00		 mov	 DWORD PTR [eax+548], edx
  06b15	e8 00 00 00 00	 call	 ?set_damage_num@@YAXPAUaction@@HH@Z ; set_damage_num

; 11264: 						ATR_LIFE(a1) -= ATR_DAMAGE(a1);

  06b1a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 11265: 						set_jujutsu_hit_mark(a1);

  06b1d	56		 push	 esi
  06b1e	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  06b21	29 46 78	 sub	 DWORD PTR [esi+120], eax
  06b24	e8 00 00 00 00	 call	 ?set_jujutsu_hit_mark@@YAXPAUaction@@@Z ; set_jujutsu_hit_mark
  06b29	83 c4 10	 add	 esp, 16			; 00000010H

; 11266: 						if (ATR_LIFE(a1) <= 0)

  06b2c	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  06b30	7f 0d		 jg	 SHORT $LN1020@monster

; 11267: 						{
; 11268: 							ATR_LIFE(a1) = 0;

  06b32	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 11269: 							slow_flg++;

  06b39	ff 05 00 00 00
	00		 inc	 DWORD PTR ?slow_flg@@3HA ; slow_flg
$LN1020@monster:

; 11270: 						}
; 11271: 						ATR_PET_LIFE(a1) -= ATR_PET_DAMAGE(a1);

  06b3f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  06b42	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  06b48	2b 88 24 02 00
	00		 sub	 ecx, DWORD PTR [eax+548]
  06b4e	89 8e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ecx

; 11272: 						//andy_fall
; 11273: 						if (ATR_PETFALL(a1) == 1)

  06b54	83 be bc 01 00
	00 01		 cmp	 DWORD PTR [esi+444], 1
  06b5b	75 15		 jne	 SHORT $LN1022@monster

; 11274: 						{
; 11275: 							if (ATR_LIFE(a1) > 0)

  06b5d	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  06b61	7e 0f		 jle	 SHORT $LN1022@monster

; 11276: 								petfallChangeGraph(a1);

  06b63	56		 push	 esi
  06b64	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  06b69	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  06b6f	83 c4 04	 add	 esp, 4
$LN1022@monster:

; 11277: 						}
; 11278: 						if (ATR_PET_LIFE(a1) <= 0 && ATR_RIDE(a1))

  06b72	85 c9		 test	 ecx, ecx
  06b74	7f 22		 jg	 SHORT $LN1024@monster
  06b76	83 be 94 01 00
	00 00		 cmp	 DWORD PTR [esi+404], 0
  06b7d	74 19		 je	 SHORT $LN1024@monster

; 11279: 						{
; 11280: 							ATR_PET_LIFE(a1) = 0;

  06b7f	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0

; 11281: 							if (ATR_LIFE(a1) > 0)

  06b89	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  06b8d	7e 09		 jle	 SHORT $LN1024@monster

; 11282: 								petfallChangeGraph(a1);

  06b8f	56		 push	 esi
  06b90	e8 00 00 00 00	 call	 ?petfallChangeGraph@@YAXPAUaction@@@Z ; petfallChangeGraph
  06b95	83 c4 04	 add	 esp, 4
$LN1024@monster:

; 11283: 						}
; 11284: 						ATR_CHR_ACT(a1) = ANIM_DAMAGE;
; 11285: 						ATR_CHR_ACT_OLD(a1) = -1;
; 11286: 						pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  06b98	6a 00		 push	 0
  06b9a	6a 00		 push	 0
  06b9c	c7 86 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+332], 1
  06ba6	56		 push	 esi
  06ba7	c7 86 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+336], -1
  06bb1	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  06bb6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iAttackedNum@@3HA
  06bbc	83 c4 0c	 add	 esp, 12			; 0000000cH
  06bbf	8b 75 08	 mov	 esi, DWORD PTR _idx$4$[ebp]
$LN87@monster:

; 11248: 			else
; 11249: 			{
; 11250: 				int j, charahurt, pethurt;
; 11251: 
; 11252: 				for (j = 0; j < iAttackedNum; j++)

  06bc2	43		 inc	 ebx
  06bc3	83 c7 10	 add	 edi, 16			; 00000010H
  06bc6	3b d9		 cmp	 ebx, ecx
  06bc8	0f 8c 08 ff ff
	ff		 jl	 $LL89@monster

; 11187: 		ATR_V_POS(a0) = ATR_V_POS(a1) + ToCallMgc.wPostMgcY;
; 11188: 
; 11189: 		if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  06bce	eb 06		 jmp	 SHORT $LN88@monster
$LN1237@monster:
  06bd0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iAttackedNum@@3HA
$LN88@monster:

; 11287: 					}
; 11288: 				}
; 11289: 			}
; 11290: 
; 11291: 		}
; 11292: 
; 11293: 		// Â∑±ÁªèÊí≠ÊîæÊâÄÊúâÁöÑÂä®Áîª‰∫Ü
; 11294: 		if (ToCallMgc.wNumAttackeds == ToCallMgc.wNumAttacks && 0 == iAttackedNum)

  06bd6	66 a1 c4 00 00
	00		 mov	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+196
  06bdc	66 3b 05 c2 00
	00 00		 cmp	 ax, WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+194
  06be3	0f 85 60 03 00
	00		 jne	 $LN1058@monster
  06be9	85 c9		 test	 ecx, ecx

; 11295: 		{
; 11296: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 11297: 			bRunToCallMgc = FALSE;
; 11298: 			g_iRunEarthQuake = 0;
; 11299: 		}
; 11300: 		break;

  06beb	e9 04 fd ff ff	 jmp	 $LN1271@monster
$LN1026@monster:

; 11301: 		// Â∏¶‰∫∫Áâ©Âèó‰º§ÁöÑÂõæ
; 11302: 	case TOCALL_MAGIC_CASE + 4:
; 11303: 		if (ATR_FIRST_FLG(a0) > 40)

  06bf0	80 ba 1e 01 00
	00 28		 cmp	 BYTE PTR [edx+286], 40	; 00000028H
  06bf7	76 0a		 jbe	 SHORT $LN1027@monster

; 11304: 			ATR_FIRST_FLG(a0) = 0;

  06bf9	c6 82 1e 01 00
	00 00		 mov	 BYTE PTR [edx+286], 0
  06c00	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN1027@monster:

; 11305: 		ATR_FIRST_FLG(a0)++;

  06c03	fe 82 1e 01 00
	00		 inc	 BYTE PTR [edx+286]

; 11306: 		if (ATR_LIFE(a0) <= 0)

  06c09	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  06c0d	7f 1b		 jg	 SHORT $LN1028@monster

; 11307: 		{
; 11308: 			ATR_CRS(a0) = (ATR_CRS(a0) + 16) & 31;

  06c0f	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  06c15	83 e8 10	 sub	 eax, 16			; 00000010H
  06c18	83 e0 1f	 and	 eax, 31			; 0000001fH

; 11309: 			gemini(a0);

  06c1b	57		 push	 edi
  06c1c	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  06c22	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  06c27	83 c4 04	 add	 esp, 4
$LN1028@monster:

; 11310: 		}
; 11311: 		if (40 == ATR_FIRST_FLG(a0))		// ‰ª£Ë°®‰ºöÊåØÂä®40Ê¨°

  06c2a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06c2d	80 b8 1e 01 00
	00 28		 cmp	 BYTE PTR [eax+286], 40	; 00000028H
  06c34	75 47		 jne	 SHORT $LN1239@monster

; 11312: 		{
; 11313: 			if (ATR_LIFE(a0) <= 0)

  06c36	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  06c3a	7f 0b		 jg	 SHORT $LN1030@monster

; 11314: 			{
; 11315: 				ATR_VCT_NO(a0) = VCT_NO_DIE + 1;

  06c3c	c6 00 fb	 mov	 BYTE PTR [eax], 251	; 000000fbH

; 11316: 				slow_flg--;

  06c3f	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?slow_flg@@3HA ; slow_flg

; 11317: 			}

  06c45	eb 03		 jmp	 SHORT $LN1031@monster
$LN1030@monster:

; 11318: 			else
; 11319: 				ATR_VCT_NO(a0) = 0;

  06c47	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN1031@monster:

; 11320: 
; 11321: 			if (ATR_GROUP_FLG(a0) == 1)

  06c4a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06c4d	80 78 5e 01	 cmp	 BYTE PTR [eax+94], 1

; 11322: 				ATR_CRS(a0) = crs_change_tbl2[7];

  06c51	0f b6 05 07 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+7
  06c58	74 07		 je	 SHORT $LN1033@monster

; 11323: 			else
; 11324: 				ATR_CRS(a0) = crs_change_tbl2[3];

  06c5a	0f b6 05 03 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+3
$LN1033@monster:

; 11325: 			gemini(a0);

  06c61	57		 push	 edi
  06c62	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  06c68	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 11326: 			++iCurAttackedFinishNum;

  06c6d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCurAttackedFinishNum@@3HA
  06c72	83 c4 04	 add	 esp, 4
  06c75	40		 inc	 eax
  06c76	a3 00 00 00 00	 mov	 DWORD PTR ?iCurAttackedFinishNum@@3HA, eax
  06c7b	eb 05		 jmp	 SHORT $LN1029@monster
$LN1239@monster:

; 11310: 		}
; 11311: 		if (40 == ATR_FIRST_FLG(a0))		// ‰ª£Ë°®‰ºöÊåØÂä®40Ê¨°

  06c7d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCurAttackedFinishNum@@3HA
$LN1029@monster:

; 11327: 		}
; 11328: 		// Â∑±ÁªèÊí≠ÊîæÊâÄÊúâÁöÑÂä®Áîª‰∫Ü
; 11329: 		if (iAttackedNum == iCurAttackedFinishNum)

  06c82	39 05 00 00 00
	00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, eax
  06c88	0f 85 bb 02 00
	00		 jne	 $LN1058@monster

; 11330: 		{
; 11331: 			for (int i = 0; i < 10; i++)

  06c8e	33 f6		 xor	 esi, esi
$LL92@monster:

; 11332: 			{
; 11333: 				if (a0mark[i] != 0)

  06c90	83 be 00 00 00
	00 00		 cmp	 DWORD PTR ?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA[esi], 0
  06c97	74 18		 je	 SHORT $LN90@monster

; 11334: 				{
; 11335: 					DeathAction(a0tmp[i]);

  06c99	ff b6 00 00 00
	00		 push	 DWORD PTR ?a0tmp@?1??monster@@YAXPAUaction@@@Z@4PAPAU2@A[esi]
  06c9f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  06ca4	83 c4 04	 add	 esp, 4

; 11336: 					a0mark[i] = 0;

  06ca7	c7 86 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA[esi], 0
$LN90@monster:

; 11330: 		{
; 11331: 			for (int i = 0; i < 10; i++)

  06cb1	83 c6 04	 add	 esi, 4
  06cb4	83 fe 28	 cmp	 esi, 40			; 00000028H
  06cb7	7c d7		 jl	 SHORT $LL92@monster

; 11337: 				}
; 11338: 			}
; 11339: 			a0tmpcount = 0;

  06cb9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?a0tmpcount@?1??monster@@YAXPAUaction@@@Z@4HA, 0

; 11340: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 11341: 			bRunToCallMgc = FALSE;
; 11342: 			g_iRunEarthQuake = 0;
; 11343: 		}
; 11344: 		break;

  06cc3	e9 32 fc ff ff	 jmp	 $LN1272@monster
$LN1036@monster:

; 11345: 	case TOCALL_MAGIC_CASE + 5:
; 11346: 		if (ATR_FIRST_FLG(a0) > 60)

  06cc8	80 ba 1e 01 00
	00 3c		 cmp	 BYTE PTR [edx+286], 60	; 0000003cH
  06ccf	76 0a		 jbe	 SHORT $LN1037@monster

; 11347: 			ATR_FIRST_FLG(a0) = 0;

  06cd1	c6 82 1e 01 00
	00 00		 mov	 BYTE PTR [edx+286], 0
  06cd8	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
$LN1037@monster:

; 11348: 		ATR_FIRST_FLG(a0)++;

  06cdb	fe 82 1e 01 00
	00		 inc	 BYTE PTR [edx+286]

; 11349: 		if (ATR_FIRST_FLG(a0) == 60)

  06ce1	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06ce4	80 b8 1e 01 00
	00 3c		 cmp	 BYTE PTR [eax+286], 60	; 0000003cH
  06ceb	0f 85 58 02 00
	00		 jne	 $LN1058@monster

; 11350: 		{
; 11351: 			if (ToCallMgc.wIsPostDisappear)

  06cf1	66 83 3d c8 00
	00 00 00	 cmp	 WORD PTR ?ToCallMgc@@3UTOCALL_MAGIC@@A+200, 0
  06cf9	74 31		 je	 SHORT $LN94@monster

; 11352: 			{
; 11353: 				for (int i = 0; i < 10; i++)

  06cfb	33 f6		 xor	 esi, esi
  06cfd	0f 1f 00	 npad	 3
$LL95@monster:

; 11354: 				{
; 11355: 					if (a0mark[i] != 0)

  06d00	83 be 00 00 00
	00 00		 cmp	 DWORD PTR ?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA[esi], 0
  06d07	74 18		 je	 SHORT $LN93@monster

; 11356: 					{
; 11357: 						DeathAction(a0tmp[i]);

  06d09	ff b6 00 00 00
	00		 push	 DWORD PTR ?a0tmp@?1??monster@@YAXPAUaction@@@Z@4PAPAU2@A[esi]
  06d0f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  06d14	83 c4 04	 add	 esp, 4

; 11358: 						a0mark[i] = 0;

  06d17	c7 86 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA[esi], 0
$LN93@monster:

; 11352: 			{
; 11353: 				for (int i = 0; i < 10; i++)

  06d21	83 c6 04	 add	 esi, 4
  06d24	83 fe 28	 cmp	 esi, 40			; 00000028H
  06d27	7c d7		 jl	 SHORT $LL95@monster

; 11358: 						a0mark[i] = 0;

  06d29	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
$LN94@monster:

; 11359: 					}
; 11360: 				}
; 11361: 			}
; 11362: 			a0tmpcount = 0;

  06d2c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?a0tmpcount@?1??monster@@YAXPAUaction@@@Z@4HA, 0

; 11363: 			ATR_VCT_NO(a0) = 0;

  06d36	c6 00 00	 mov	 BYTE PTR [eax], 0

; 11364: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 11365: 			bRunToCallMgc = FALSE;
; 11366: 			g_iRunEarthQuake = 0;
; 11367: 		}
; 11368: 		break;

  06d39	e9 bc fb ff ff	 jmp	 $LN1272@monster
$LN1041@monster:

; 11369: 		//‰∫∫Áâ©Èó™ÈÅø
; 11370: 	case TOCALL_MAGIC_CASE + 6:
; 11371: 		ATR_CHR_ACT(a0) = ANIM_WALK;		//?ÓôÆ???????

  06d3e	c7 87 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [edi+332], 4

; 11372: 		ATR_SPD(a0) = 16;

  06d48	c7 87 34 01 00
	00 10 00 00 00	 mov	 DWORD PTR [edi+308], 16	; 00000010H

; 11373: 		ATR_CHR_ANG(a0) = (ATR_DAMAGE_ANG(a0) + 4) & 7;

  06d52	0f b6 82 1d 01
	00 00		 movzx	 eax, BYTE PTR [edx+285]
  06d59	83 e8 04	 sub	 eax, 4
  06d5c	83 e0 07	 and	 eax, 7
  06d5f	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax

; 11374: 		if (ATR_GROUP_FLG(a0) == 1)

  06d65	80 7a 5e 01	 cmp	 BYTE PTR [edx+94], 1

; 11375: 			ATR_CRS(a0) = crs_change_tbl2[3];

  06d69	0f b6 05 03 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+3
  06d70	74 07		 je	 SHORT $LN1043@monster

; 11376: 		else
; 11377: 			ATR_CRS(a0) = crs_change_tbl2[7];

  06d72	0f b6 05 07 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+7
$LN1043@monster:

; 11378: 		gemini(a0);

  06d79	57		 push	 edi
  06d7a	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  06d80	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 11379: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  06d85	6a 00		 push	 0
  06d87	6a 00		 push	 0
  06d89	57		 push	 edi
  06d8a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11380: 		ATR_STIMER(a0)++;

  06d8f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06d92	83 c4 10	 add	 esp, 16			; 00000010H
  06d95	fe 40 01	 inc	 BYTE PTR [eax+1]

; 11381: 		if (ATR_STIMER(a0) == 20)

  06d98	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  06d9b	80 79 01 14	 cmp	 BYTE PTR [ecx+1], 20	; 00000014H
  06d9f	75 32		 jne	 SHORT $LN1240@monster

; 11382: 		{
; 11383: 			ATR_CRS_OLD(a0) = ATR_CRS(a0) = (ATR_CRS(a0) + 16) & 31;//Óüµ?Óòø?

  06da1	8b 87 38 01 00
	00		 mov	 eax, DWORD PTR [edi+312]
  06da7	83 e8 10	 sub	 eax, 16			; 00000010H
  06daa	83 e0 1f	 and	 eax, 31			; 0000001fH
  06dad	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  06db3	88 81 22 01 00
	00		 mov	 BYTE PTR [ecx+290], al

; 11384: 			ATR_VCT_NO(a0) = 17;		//?????

  06db9	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06dbc	c6 00 11	 mov	 BYTE PTR [eax], 17	; 00000011H

; 11385: 			ATR_STIMER(a0) = 0;

  06dbf	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06dc2	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 11386: 			++iCurAttackedFinishNum;

  06dc6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCurAttackedFinishNum@@3HA
  06dcb	40		 inc	 eax
  06dcc	a3 00 00 00 00	 mov	 DWORD PTR ?iCurAttackedFinishNum@@3HA, eax
  06dd1	eb 05		 jmp	 SHORT $LN1044@monster
$LN1240@monster:

; 11381: 		if (ATR_STIMER(a0) == 20)

  06dd3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCurAttackedFinishNum@@3HA
$LN1044@monster:

; 11387: 		}
; 11388: 		// Â∑±ÁªèÊí≠ÊîæÊâÄÊúâÁöÑÂä®Áîª‰∫Ü
; 11389: 		if (iAttackedNum == iCurAttackedFinishNum)

  06dd8	39 05 00 00 00
	00		 cmp	 DWORD PTR ?iAttackedNum@@3HA, eax
  06dde	0f 85 65 01 00
	00		 jne	 $LN1058@monster

; 11390: 		{
; 11391: 			for (int i = 0; i < 10; i++)

  06de4	33 f6		 xor	 esi, esi
$LL98@monster:

; 11392: 			{
; 11393: 				if (a0mark[i] != 0)

  06de6	83 be 00 00 00
	00 00		 cmp	 DWORD PTR ?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA[esi], 0
  06ded	74 18		 je	 SHORT $LN96@monster

; 11394: 				{
; 11395: 					DeathAction(a0tmp[i]);

  06def	ff b6 00 00 00
	00		 push	 DWORD PTR ?a0tmp@?1??monster@@YAXPAUaction@@@Z@4PAPAU2@A[esi]
  06df5	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  06dfa	83 c4 04	 add	 esp, 4

; 11396: 					a0mark[i] = 0;

  06dfd	c7 86 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?a0mark@?1??monster@@YAXPAUaction@@@Z@4PAHA[esi], 0
$LN96@monster:

; 11390: 		{
; 11391: 			for (int i = 0; i < 10; i++)

  06e07	83 c6 04	 add	 esi, 4
  06e0a	83 fe 28	 cmp	 esi, 40			; 00000028H
  06e0d	7c d7		 jl	 SHORT $LL98@monster

; 11397: 				}
; 11398: 			}
; 11399: 			a0tmpcount = 0;

  06e0f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?a0tmpcount@?1??monster@@YAXPAUaction@@@Z@4HA, 0

; 11400: 			ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 11401: 			bRunToCallMgc = FALSE;
; 11402: 			g_iRunEarthQuake = 0;
; 11403: 		}
; 11404: 		break;

  06e19	e9 dc fa ff ff	 jmp	 $LN1272@monster
$LN1047@monster:

; 11405: #endif
; 11406: 		//#ifdef _BATTLESKILL				// (‰∏çÂèØÂºÄ) Syu ADD ÊàòÊñóÊäÄËÉΩ‰ªãÈù¢
; 11407: 	case PROSKILL:
; 11408: 		// ÊòØÂê¶Âú®Âè≥‰∏ãÊñπ
; 11409: 		(0 == ATR_GROUP_FLG(a0)) ? ATR_CHR_ANG(a0) = 3 : ATR_CHR_ANG(a0) = 7;
; 11410: 
; 11411: 		ATR_CRS_OLD(a0) = ATR_CRS(a0) = crs_change_tbl2[ATR_CHR_ANG(a0)];

  06e1e	33 c0		 xor	 eax, eax
  06e20	38 42 5e	 cmp	 BYTE PTR [edx+94], al
  06e23	0f 95 c0	 setne	 al
  06e26	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [eax*4+3]
  06e2d	89 87 54 01 00
	00		 mov	 DWORD PTR [edi+340], eax
  06e33	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  06e39	0f b6 c1	 movzx	 eax, cl
  06e3c	89 87 38 01 00
	00		 mov	 DWORD PTR [edi+312], eax
  06e42	88 8a 22 01 00
	00		 mov	 BYTE PTR [edx+290], cl

; 11412: 
; 11413: 		if (0XFFFFFFFF != AttMgc.iPreMgcNum)

  06e48	83 3d 1c 00 00
	00 ff		 cmp	 DWORD PTR ?AttMgc@@3UATTACK_MAGIC@@A+28, -1
  06e4f	74 61		 je	 SHORT $LN1048@monster

; 11414: 		{
; 11415: 			if (NULL == (a1 = GetAction(T_PRIO_MISSILE, sizeof(ATR_EQU))))

  06e51	68 60 02 00 00	 push	 608			; 00000260H
  06e56	6a 47		 push	 71			; 00000047H
  06e58	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  06e5d	8b c8		 mov	 ecx, eax
  06e5f	83 c4 08	 add	 esp, 8
  06e62	85 c9		 test	 ecx, ecx
  06e64	0f 84 74 b8 ff
	ff		 je	 $LN1260@monster

; 11416: 			{
; 11417: 				ATR_DAMAGE(p_master) = ATR_BODY_CNT(p_master);
; 11418: 				ATR_VCT_NO(a0) = 0;
; 11419: 				return;
; 11420: 			}
; 11421: 			if (AttPreMagicNum == 0)

  06e6a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AttPreMagicNum@@3HA, 0 ; AttPreMagicNum
  06e71	75 0d		 jne	 SHORT $LN1050@monster

; 11422: 			{
; 11423: 				ATR_VCT_NO(a0) = 1;

  06e73	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06e76	5f		 pop	 edi

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  06e77	5e		 pop	 esi
  06e78	5b		 pop	 ebx
  06e79	c6 00 01	 mov	 BYTE PTR [eax], 1
  06e7c	8b e5		 mov	 esp, ebp
  06e7e	5d		 pop	 ebp
  06e7f	c3		 ret	 0
$LN1050@monster:

; 11424: 				return;
; 11425: 			}
; 11426: 			ATR_NAME(a1) = monster;

  06e80	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ?monster@@YAXPAUaction@@@Z ; monster

; 11427: 			ATR_VCT_NO(a1) = PROSKILL + 1;		// ÂâçÁΩÆÂä®Áîª

  06e87	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  06e8a	c6 00 e7	 mov	 BYTE PTR [eax], 231	; 000000e7H

; 11428: 			ATR_CHR_NO(a1) = AttPreMagicNum;

  06e8d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AttPreMagicNum@@3HA ; AttPreMagicNum
  06e92	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 11429: 			ATR_DISP_PRIO(a1) = ATR_DISP_PRIO(a0) + 1;

  06e98	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  06e9b	fe c0		 inc	 al
  06e9d	88 41 15	 mov	 BYTE PTR [ecx+21], al

; 11430: 			ATR_BODY_WORK(0, a1) = a0;

  06ea0	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  06ea3	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 11431: 			ATR_H_POS(a1) = ATR_H_POS(a0);

  06ea6	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  06ea9	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 11432: 			ATR_V_POS(a1) = ATR_V_POS(a0);

  06eac	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  06eaf	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$LN1048@monster:

; 11433: 		}
; 11434: 		if (ATR_WARRIOR_EFFECT(a0) == 1)

  06eb2	8b 87 e4 01 00
	00		 mov	 eax, DWORD PTR [edi+484]
  06eb8	83 f8 01	 cmp	 eax, 1
  06ebb	75 08		 jne	 SHORT $LN1051@monster

; 11435: 			ATR_VCT_NO(a0) = 0;

  06ebd	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06ec0	c6 00 00	 mov	 BYTE PTR [eax], 0
  06ec3	eb 0b		 jmp	 SHORT $LN1053@monster
$LN1051@monster:

; 11436: 		else if (ATR_WARRIOR_EFFECT(a0) == 2)

  06ec5	83 f8 02	 cmp	 eax, 2
  06ec8	75 06		 jne	 SHORT $LN1053@monster

; 11437: 			ATR_VCT_NO(a0) = 1;

  06eca	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  06ecd	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN1053@monster:

; 11438: 		ATR_CHR_ACT_OLD(a0) = -1;
; 11439: 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);

  06ed0	6a 00		 push	 0
  06ed2	6a 00		 push	 0
  06ed4	57		 push	 edi
  06ed5	c7 87 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+336], -1
  06edf	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  06ee4	83 c4 0c	 add	 esp, 12			; 0000000cH
  06ee7	5f		 pop	 edi
  06ee8	5e		 pop	 esi
  06ee9	5b		 pop	 ebx
  06eea	8b e5		 mov	 esp, ebp
  06eec	5d		 pop	 ebp
  06eed	c3		 ret	 0
$LN1054@monster:

; 11440: 		break;
; 11441: 	case PROSKILL + 1:
; 11442: 		a1 = ATR_BODY_WORK(0, a0);

  06eee	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 11443: 		ATR_H_POS(a0) = ATR_H_POS(a1);

  06ef1	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  06ef4	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 11444: 		ATR_V_POS(a0) = ATR_V_POS(a1) - 35;

  06ef7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  06efa	83 e8 23	 sub	 eax, 35			; 00000023H
  06efd	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 11445: 		if (ATR_CHR_NO(a0) == 101631 || ATR_CHR_NO(a0) == 101632)

  06f00	8b 87 44 01 00
	00		 mov	 eax, DWORD PTR [edi+324]
  06f06	3d ff 8c 01 00	 cmp	 eax, 101631		; 00018cffH
  06f0b	74 07		 je	 SHORT $LN1056@monster
  06f0d	3d 00 8d 01 00	 cmp	 eax, 101632		; 00018d00H
  06f12	75 09		 jne	 SHORT $LN1055@monster
$LN1056@monster:

; 11446: 			ATR_V_POS(a0) = ATR_V_POS(a1) - 65;

  06f14	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  06f17	83 e8 41	 sub	 eax, 65			; 00000041H
  06f1a	89 47 1c	 mov	 DWORD PTR [edi+28], eax
$LN1055@monster:

; 11447: 		if (d0 = pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  06f1d	6a 01		 push	 1
  06f1f	6a 00		 push	 0
  06f21	57		 push	 edi
  06f22	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  06f27	83 c4 0c	 add	 esp, 12			; 0000000cH
  06f2a	89 45 fc	 mov	 DWORD PTR _d0$[ebp], eax
  06f2d	85 c0		 test	 eax, eax
  06f2f	74 18		 je	 SHORT $LN1058@monster

; 11448: 		{
; 11449: 			DeathAction(a0);

  06f31	57		 push	 edi
  06f32	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  06f37	83 c4 04	 add	 esp, 4

; 11450: 			if (ATR_WARRIOR_EFFECT(a1) == 1)

  06f3a	83 be e4 01 00
	00 01		 cmp	 DWORD PTR [esi+484], 1
  06f41	75 06		 jne	 SHORT $LN1058@monster

; 11451: 				ATR_VCT_NO(a1) = 1;

  06f43	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 11452: 		}
; 11453: 		break;
; 11454: 		//#endif
; 11455: 	}
; 11456: #ifdef _SYUTEST
; 11457: 	if (Light1 != NULL)
; 11458: 	{
; 11459: 		if (Light1->anim_cnt == 5)
; 11460: 		{	//Êã®ÊîæÂà∞ÊúÄÂêé‰∏ÄÂº†
; 11461: 			DeathAction(Light1);
; 11462: 			Light1 = NULL;
; 11463: 		}
; 11464: 	}
; 11465: #endif
; 11466: }

  06f46	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN1058@monster:
  06f49	5f		 pop	 edi
  06f4a	5e		 pop	 esi
  06f4b	5b		 pop	 ebx
  06f4c	8b e5		 mov	 esp, ebp
  06f4e	5d		 pop	 ebp
  06f4f	c3		 ret	 0
$LN1221@monster:
  06f50	00 00 00 00	 DD	 $LN99@monster
  06f54	00 00 00 00	 DD	 $LN114@monster
  06f58	00 00 00 00	 DD	 $LN131@monster
  06f5c	00 00 00 00	 DD	 $LN241@monster
  06f60	00 00 00 00	 DD	 $LN279@monster
  06f64	00 00 00 00	 DD	 $LN277@monster
  06f68	00 00 00 00	 DD	 $LN291@monster
  06f6c	00 00 00 00	 DD	 $LN293@monster
  06f70	00 00 00 00	 DD	 $LN322@monster
  06f74	00 00 00 00	 DD	 $LN354@monster
  06f78	00 00 00 00	 DD	 $LN365@monster
  06f7c	00 00 00 00	 DD	 $LN381@monster
  06f80	00 00 00 00	 DD	 $LN388@monster
  06f84	00 00 00 00	 DD	 $LN389@monster
  06f88	00 00 00 00	 DD	 $LN391@monster
  06f8c	00 00 00 00	 DD	 $LN399@monster
  06f90	00 00 00 00	 DD	 $LN412@monster
  06f94	00 00 00 00	 DD	 $LN415@monster
  06f98	00 00 00 00	 DD	 $LN433@monster
  06f9c	00 00 00 00	 DD	 $LN440@monster
  06fa0	00 00 00 00	 DD	 $LN448@monster
  06fa4	00 00 00 00	 DD	 $LN463@monster
  06fa8	00 00 00 00	 DD	 $LN500@monster
  06fac	00 00 00 00	 DD	 $LN509@monster
  06fb0	00 00 00 00	 DD	 $LN539@monster
  06fb4	00 00 00 00	 DD	 $LN541@monster
  06fb8	00 00 00 00	 DD	 $LN545@monster
  06fbc	00 00 00 00	 DD	 $LN549@monster
  06fc0	00 00 00 00	 DD	 $LN551@monster
  06fc4	00 00 00 00	 DD	 $LN564@monster
  06fc8	00 00 00 00	 DD	 $LN566@monster
  06fcc	00 00 00 00	 DD	 $LN571@monster
  06fd0	00 00 00 00	 DD	 $LN573@monster
  06fd4	00 00 00 00	 DD	 $LN575@monster
  06fd8	00 00 00 00	 DD	 $LN578@monster
  06fdc	00 00 00 00	 DD	 $LN584@monster
  06fe0	00 00 00 00	 DD	 $LN597@monster
  06fe4	00 00 00 00	 DD	 $LN611@monster
  06fe8	00 00 00 00	 DD	 $LN614@monster
  06fec	00 00 00 00	 DD	 $LN621@monster
  06ff0	00 00 00 00	 DD	 $LN655@monster
  06ff4	00 00 00 00	 DD	 $LN659@monster
  06ff8	00 00 00 00	 DD	 $LN676@monster
  06ffc	00 00 00 00	 DD	 $LN682@monster
  07000	00 00 00 00	 DD	 $LN686@monster
  07004	00 00 00 00	 DD	 $LN692@monster
  07008	00 00 00 00	 DD	 $LN694@monster
  0700c	00 00 00 00	 DD	 $LN697@monster
  07010	00 00 00 00	 DD	 $LN702@monster
  07014	00 00 00 00	 DD	 $LN706@monster
  07018	00 00 00 00	 DD	 $LN708@monster
  0701c	00 00 00 00	 DD	 $LN711@monster
  07020	00 00 00 00	 DD	 $LN728@monster
  07024	00 00 00 00	 DD	 $LN732@monster
  07028	00 00 00 00	 DD	 $LN733@monster
  0702c	00 00 00 00	 DD	 $LN735@monster
  07030	00 00 00 00	 DD	 $LN746@monster
  07034	00 00 00 00	 DD	 $LN761@monster
  07038	00 00 00 00	 DD	 $LN764@monster
  0703c	00 00 00 00	 DD	 $LN768@monster
  07040	00 00 00 00	 DD	 $LN770@monster
  07044	00 00 00 00	 DD	 $LN777@monster
  07048	00 00 00 00	 DD	 $LN786@monster
  0704c	00 00 00 00	 DD	 $LN791@monster
  07050	00 00 00 00	 DD	 $LN795@monster
  07054	00 00 00 00	 DD	 $LN800@monster
  07058	00 00 00 00	 DD	 $LN806@monster
  0705c	00 00 00 00	 DD	 $LN815@monster
  07060	00 00 00 00	 DD	 $LN818@monster
  07064	00 00 00 00	 DD	 $LN822@monster
  07068	00 00 00 00	 DD	 $LN836@monster
  0706c	00 00 00 00	 DD	 $LN837@monster
  07070	00 00 00 00	 DD	 $LN840@monster
  07074	00 00 00 00	 DD	 $LN843@monster
  07078	00 00 00 00	 DD	 $LN853@monster
  0707c	00 00 00 00	 DD	 $LN856@monster
  07080	00 00 00 00	 DD	 $LN861@monster
  07084	00 00 00 00	 DD	 $LN883@monster
  07088	00 00 00 00	 DD	 $LN888@monster
  0708c	00 00 00 00	 DD	 $LN890@monster
  07090	00 00 00 00	 DD	 $LN922@monster
  07094	00 00 00 00	 DD	 $LN939@monster
  07098	00 00 00 00	 DD	 $LN947@monster
  0709c	00 00 00 00	 DD	 $LN950@monster
  070a0	00 00 00 00	 DD	 $LN956@monster
  070a4	00 00 00 00	 DD	 $LN962@monster
  070a8	00 00 00 00	 DD	 $LN1009@monster
  070ac	00 00 00 00	 DD	 $LN1026@monster
  070b0	00 00 00 00	 DD	 $LN1036@monster
  070b4	00 00 00 00	 DD	 $LN1041@monster
  070b8	00 00 00 00	 DD	 $LN1047@monster
  070bc	00 00 00 00	 DD	 $LN1054@monster
  070c0	00 00 00 00	 DD	 $LN454@monster
  070c4	00 00 00 00	 DD	 $LN461@monster
  070c8	00 00 00 00	 DD	 $LN864@monster
  070cc	00 00 00 00	 DD	 $LN870@monster
  070d0	00 00 00 00	 DD	 $LN873@monster
  070d4	00 00 00 00	 DD	 $LN878@monster
  070d8	00 00 00 00	 DD	 $LN1058@monster
$LN1220@monster:
  070dc	00		 DB	 0
  070dd	01		 DB	 1
  070de	02		 DB	 2
  070df	03		 DB	 3
  070e0	04		 DB	 4
  070e1	05		 DB	 5
  070e2	06		 DB	 6
  070e3	62		 DB	 98			; 00000062H
  070e4	62		 DB	 98			; 00000062H
  070e5	62		 DB	 98			; 00000062H
  070e6	07		 DB	 7
  070e7	08		 DB	 8
  070e8	09		 DB	 9
  070e9	0a		 DB	 10			; 0000000aH
  070ea	0b		 DB	 11			; 0000000bH
  070eb	0c		 DB	 12			; 0000000cH
  070ec	0d		 DB	 13			; 0000000dH
  070ed	0e		 DB	 14			; 0000000eH
  070ee	0f		 DB	 15			; 0000000fH
  070ef	10		 DB	 16			; 00000010H
  070f0	11		 DB	 17			; 00000011H
  070f1	62		 DB	 98			; 00000062H
  070f2	62		 DB	 98			; 00000062H
  070f3	62		 DB	 98			; 00000062H
  070f4	62		 DB	 98			; 00000062H
  070f5	12		 DB	 18			; 00000012H
  070f6	13		 DB	 19			; 00000013H
  070f7	14		 DB	 20			; 00000014H
  070f8	62		 DB	 98			; 00000062H
  070f9	62		 DB	 98			; 00000062H
  070fa	15		 DB	 21			; 00000015H
  070fb	16		 DB	 22			; 00000016H
  070fc	17		 DB	 23			; 00000017H
  070fd	18		 DB	 24			; 00000018H
  070fe	62		 DB	 98			; 00000062H
  070ff	19		 DB	 25			; 00000019H
  07100	1a		 DB	 26			; 0000001aH
  07101	1b		 DB	 27			; 0000001bH
  07102	1c		 DB	 28			; 0000001cH
  07103	62		 DB	 98			; 00000062H
  07104	1d		 DB	 29			; 0000001dH
  07105	1e		 DB	 30			; 0000001eH
  07106	1f		 DB	 31			; 0000001fH
  07107	62		 DB	 98			; 00000062H
  07108	20		 DB	 32			; 00000020H
  07109	21		 DB	 33			; 00000021H
  0710a	22		 DB	 34			; 00000022H
  0710b	62		 DB	 98			; 00000062H
  0710c	62		 DB	 98			; 00000062H
  0710d	62		 DB	 98			; 00000062H
  0710e	23		 DB	 35			; 00000023H
  0710f	62		 DB	 98			; 00000062H
  07110	24		 DB	 36			; 00000024H
  07111	25		 DB	 37			; 00000025H
  07112	26		 DB	 38			; 00000026H
  07113	27		 DB	 39			; 00000027H
  07114	28		 DB	 40			; 00000028H
  07115	29		 DB	 41			; 00000029H
  07116	62		 DB	 98			; 00000062H
  07117	62		 DB	 98			; 00000062H
  07118	2a		 DB	 42			; 0000002aH
  07119	2b		 DB	 43			; 0000002bH
  0711a	2c		 DB	 44			; 0000002cH
  0711b	2d		 DB	 45			; 0000002dH
  0711c	2e		 DB	 46			; 0000002eH
  0711d	62		 DB	 98			; 00000062H
  0711e	2f		 DB	 47			; 0000002fH
  0711f	30		 DB	 48			; 00000030H
  07120	31		 DB	 49			; 00000031H
  07121	32		 DB	 50			; 00000032H
  07122	33		 DB	 51			; 00000033H
  07123	34		 DB	 52			; 00000034H
  07124	35		 DB	 53			; 00000035H
  07125	36		 DB	 54			; 00000036H
  07126	62		 DB	 98			; 00000062H
  07127	37		 DB	 55			; 00000037H
  07128	38		 DB	 56			; 00000038H
  07129	39		 DB	 57			; 00000039H
  0712a	3a		 DB	 58			; 0000003aH
  0712b	3b		 DB	 59			; 0000003bH
  0712c	3c		 DB	 60			; 0000003cH
  0712d	62		 DB	 98			; 00000062H
  0712e	3d		 DB	 61			; 0000003dH
  0712f	62		 DB	 98			; 00000062H
  07130	62		 DB	 98			; 00000062H
  07131	3e		 DB	 62			; 0000003eH
  07132	3f		 DB	 63			; 0000003fH
  07133	40		 DB	 64			; 00000040H
  07134	41		 DB	 65			; 00000041H
  07135	42		 DB	 66			; 00000042H
  07136	43		 DB	 67			; 00000043H
  07137	62		 DB	 98			; 00000062H
  07138	62		 DB	 98			; 00000062H
  07139	62		 DB	 98			; 00000062H
  0713a	62		 DB	 98			; 00000062H
  0713b	44		 DB	 68			; 00000044H
  0713c	45		 DB	 69			; 00000045H
  0713d	62		 DB	 98			; 00000062H
  0713e	46		 DB	 70			; 00000046H
  0713f	62		 DB	 98			; 00000062H
  07140	47		 DB	 71			; 00000047H
  07141	48		 DB	 72			; 00000048H
  07142	49		 DB	 73			; 00000049H
  07143	4a		 DB	 74			; 0000004aH
  07144	4b		 DB	 75			; 0000004bH
  07145	36		 DB	 54			; 00000036H
  07146	62		 DB	 98			; 00000062H
  07147	62		 DB	 98			; 00000062H
  07148	62		 DB	 98			; 00000062H
  07149	62		 DB	 98			; 00000062H
  0714a	36		 DB	 54			; 00000036H
  0714b	62		 DB	 98			; 00000062H
  0714c	62		 DB	 98			; 00000062H
  0714d	62		 DB	 98			; 00000062H
  0714e	4c		 DB	 76			; 0000004cH
  0714f	62		 DB	 98			; 00000062H
  07150	62		 DB	 98			; 00000062H
  07151	62		 DB	 98			; 00000062H
  07152	62		 DB	 98			; 00000062H
  07153	62		 DB	 98			; 00000062H
  07154	62		 DB	 98			; 00000062H
  07155	62		 DB	 98			; 00000062H
  07156	62		 DB	 98			; 00000062H
  07157	62		 DB	 98			; 00000062H
  07158	62		 DB	 98			; 00000062H
  07159	62		 DB	 98			; 00000062H
  0715a	62		 DB	 98			; 00000062H
  0715b	62		 DB	 98			; 00000062H
  0715c	62		 DB	 98			; 00000062H
  0715d	62		 DB	 98			; 00000062H
  0715e	62		 DB	 98			; 00000062H
  0715f	62		 DB	 98			; 00000062H
  07160	62		 DB	 98			; 00000062H
  07161	62		 DB	 98			; 00000062H
  07162	62		 DB	 98			; 00000062H
  07163	62		 DB	 98			; 00000062H
  07164	62		 DB	 98			; 00000062H
  07165	62		 DB	 98			; 00000062H
  07166	62		 DB	 98			; 00000062H
  07167	62		 DB	 98			; 00000062H
  07168	62		 DB	 98			; 00000062H
  07169	62		 DB	 98			; 00000062H
  0716a	62		 DB	 98			; 00000062H
  0716b	62		 DB	 98			; 00000062H
  0716c	62		 DB	 98			; 00000062H
  0716d	62		 DB	 98			; 00000062H
  0716e	62		 DB	 98			; 00000062H
  0716f	62		 DB	 98			; 00000062H
  07170	62		 DB	 98			; 00000062H
  07171	62		 DB	 98			; 00000062H
  07172	62		 DB	 98			; 00000062H
  07173	62		 DB	 98			; 00000062H
  07174	62		 DB	 98			; 00000062H
  07175	62		 DB	 98			; 00000062H
  07176	62		 DB	 98			; 00000062H
  07177	62		 DB	 98			; 00000062H
  07178	62		 DB	 98			; 00000062H
  07179	62		 DB	 98			; 00000062H
  0717a	62		 DB	 98			; 00000062H
  0717b	62		 DB	 98			; 00000062H
  0717c	62		 DB	 98			; 00000062H
  0717d	62		 DB	 98			; 00000062H
  0717e	62		 DB	 98			; 00000062H
  0717f	62		 DB	 98			; 00000062H
  07180	62		 DB	 98			; 00000062H
  07181	62		 DB	 98			; 00000062H
  07182	62		 DB	 98			; 00000062H
  07183	62		 DB	 98			; 00000062H
  07184	62		 DB	 98			; 00000062H
  07185	62		 DB	 98			; 00000062H
  07186	62		 DB	 98			; 00000062H
  07187	62		 DB	 98			; 00000062H
  07188	62		 DB	 98			; 00000062H
  07189	62		 DB	 98			; 00000062H
  0718a	62		 DB	 98			; 00000062H
  0718b	62		 DB	 98			; 00000062H
  0718c	62		 DB	 98			; 00000062H
  0718d	62		 DB	 98			; 00000062H
  0718e	62		 DB	 98			; 00000062H
  0718f	62		 DB	 98			; 00000062H
  07190	62		 DB	 98			; 00000062H
  07191	62		 DB	 98			; 00000062H
  07192	62		 DB	 98			; 00000062H
  07193	62		 DB	 98			; 00000062H
  07194	62		 DB	 98			; 00000062H
  07195	62		 DB	 98			; 00000062H
  07196	62		 DB	 98			; 00000062H
  07197	62		 DB	 98			; 00000062H
  07198	62		 DB	 98			; 00000062H
  07199	62		 DB	 98			; 00000062H
  0719a	62		 DB	 98			; 00000062H
  0719b	62		 DB	 98			; 00000062H
  0719c	62		 DB	 98			; 00000062H
  0719d	62		 DB	 98			; 00000062H
  0719e	62		 DB	 98			; 00000062H
  0719f	62		 DB	 98			; 00000062H
  071a0	62		 DB	 98			; 00000062H
  071a1	62		 DB	 98			; 00000062H
  071a2	62		 DB	 98			; 00000062H
  071a3	62		 DB	 98			; 00000062H
  071a4	4d		 DB	 77			; 0000004dH
  071a5	4e		 DB	 78			; 0000004eH
  071a6	4f		 DB	 79			; 0000004fH
  071a7	50		 DB	 80			; 00000050H
  071a8	51		 DB	 81			; 00000051H
  071a9	52		 DB	 82			; 00000052H
  071aa	62		 DB	 98			; 00000062H
  071ab	62		 DB	 98			; 00000062H
  071ac	62		 DB	 98			; 00000062H
  071ad	62		 DB	 98			; 00000062H
  071ae	53		 DB	 83			; 00000053H
  071af	54		 DB	 84			; 00000054H
  071b0	55		 DB	 85			; 00000055H
  071b1	56		 DB	 86			; 00000056H
  071b2	57		 DB	 87			; 00000057H
  071b3	58		 DB	 88			; 00000058H
  071b4	59		 DB	 89			; 00000059H
  071b5	62		 DB	 98			; 00000062H
  071b6	62		 DB	 98			; 00000062H
  071b7	62		 DB	 98			; 00000062H
  071b8	62		 DB	 98			; 00000062H
  071b9	62		 DB	 98			; 00000062H
  071ba	62		 DB	 98			; 00000062H
  071bb	62		 DB	 98			; 00000062H
  071bc	62		 DB	 98			; 00000062H
  071bd	62		 DB	 98			; 00000062H
  071be	62		 DB	 98			; 00000062H
  071bf	62		 DB	 98			; 00000062H
  071c0	62		 DB	 98			; 00000062H
  071c1	62		 DB	 98			; 00000062H
  071c2	5a		 DB	 90			; 0000005aH
  071c3	5b		 DB	 91			; 0000005bH
  071c4	62		 DB	 98			; 00000062H
  071c5	62		 DB	 98			; 00000062H
  071c6	62		 DB	 98			; 00000062H
  071c7	62		 DB	 98			; 00000062H
  071c8	62		 DB	 98			; 00000062H
  071c9	62		 DB	 98			; 00000062H
  071ca	62		 DB	 98			; 00000062H
  071cb	62		 DB	 98			; 00000062H
  071cc	5c		 DB	 92			; 0000005cH
  071cd	5d		 DB	 93			; 0000005dH
  071ce	62		 DB	 98			; 00000062H
  071cf	62		 DB	 98			; 00000062H
  071d0	62		 DB	 98			; 00000062H
  071d1	62		 DB	 98			; 00000062H
  071d2	62		 DB	 98			; 00000062H
  071d3	62		 DB	 98			; 00000062H
  071d4	62		 DB	 98			; 00000062H
  071d5	5e		 DB	 94			; 0000005eH
  071d6	5f		 DB	 95			; 0000005fH
  071d7	60		 DB	 96			; 00000060H
  071d8	62		 DB	 98			; 00000062H
  071d9	62		 DB	 98			; 00000062H
  071da	62		 DB	 98			; 00000062H
  071db	61		 DB	 97			; 00000061H
$LN1222@monster:
  071dc	00 00 00 00	 DD	 $LN143@monster
  071e0	00 00 00 00	 DD	 $LN144@monster
  071e4	00 00 00 00	 DD	 $LN145@monster
  071e8	00 00 00 00	 DD	 $LN146@monster
$LN1223@monster:
  071ec	00 00 00 00	 DD	 $LN149@monster
  071f0	00 00 00 00	 DD	 $LN150@monster
  071f4	00 00 00 00	 DD	 $LN151@monster
  071f8	00 00 00 00	 DD	 $LN152@monster
$LN1224@monster:
  071fc	00 00 00 00	 DD	 $LN481@monster
  07200	00 00 00 00	 DD	 $LN482@monster
  07204	00 00 00 00	 DD	 $LN485@monster
  07208	00 00 00 00	 DD	 $LN488@monster
$LN1225@monster:
  0720c	00 00 00 00	 DD	 $LN493@monster
  07210	00 00 00 00	 DD	 $LN494@monster
  07214	00 00 00 00	 DD	 $LN495@monster
  07218	00 00 00 00	 DD	 $LN496@monster
?monster@@YAXPAUaction@@@Z ENDP				; monster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?oft_test@@YAPAUaction@@XZ
_TEXT	SEGMENT
tv1633 = -8						; size = 4
_d1$4$ = -8						; size = 4
_d1$3$ = -8						; size = 4
_d1$2$ = -8						; size = 4
tv1632 = -4						; size = 4
_d1$1$ = -4						; size = 4
?oft_test@@YAPAUaction@@XZ PROC				; oft_test, COMDAT

; 11469: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 11470: 	int d0, d1, d2, d7;
; 11471: 	int id_no = 0;
; 11472: 	ACTION *a1;
; 11473: 
; 11474: 	p_kanji = NULL;

  00009	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?p_missile@@3PAPAUaction@@A, xmm0
  00010	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?p_missile@@3PAPAUaction@@A+16, xmm0
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	33 f6		 xor	 esi, esi

; 11475: 	for (d7 = 0; d7 < BATTLKPKPLYAERNUM + 1; d7++)		//Ê∏ÖÈô§
; 11476: 		p_missile[d7] = NULL;
; 11477: 	for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)		//Ê∏ÖÈô§
; 11478: 		p_party[d7] = NULL;
; 11479: 
; 11480: 	// ‰∫ßÁîü master action list /* ?????????????Óôë? */
; 11481: 	a1 = GetAction(T_PRIO_MASTER, sizeof(ATR_EQU));

  0001c	68 60 02 00 00	 push	 608			; 00000260H
  00021	6a 64		 push	 100			; 00000064H
  00023	89 35 00 00 00
	00		 mov	 DWORD PTR ?p_kanji@@3PAUaction@@A, esi
  00029	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?p_missile@@3PAPAUaction@@A+32, xmm0
  00030	89 35 50 00 00
	00		 mov	 DWORD PTR ?p_missile@@3PAPAUaction@@A+80, esi
  00036	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?p_missile@@3PAPAUaction@@A+48, xmm0
  0003d	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?p_missile@@3PAPAUaction@@A+64, xmm0
  00044	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?p_party@@3PAPAUaction@@A, xmm0
  0004b	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?p_party@@3PAPAUaction@@A+16, xmm0
  00052	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?p_party@@3PAPAUaction@@A+32, xmm0
  00059	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?p_party@@3PAPAUaction@@A+48, xmm0
  00060	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?p_party@@3PAPAUaction@@A+64, xmm0
  00067	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0006c	83 c4 08	 add	 esp, 8

; 11482: 	if (a1 == NULL)

  0006f	85 c0		 test	 eax, eax
  00071	0f 84 f4 04 00
	00		 je	 $LN40@oft_test

; 11483: 		return NULL;
; 11484: 	//Ë¶ÅÊâßË°åÁöÑFunc
; 11485: 	ATR_NAME(a1) = master;
; 11486: 	//Âá∫Âú∫ÂÖàÁªô‰∫àÁ≠âÂæÖ
; 11487: 	ATR_VCT_NO(a1) = 3;

  00077	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET ?master@@YAXPAUaction@@@Z ; master

; 11488: 	//Ë°®Á§∫‰ºòÂÖàÈ°∫Â∫è
; 11489: 	ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11490: 	// sprite ÁºñÂè∑/* ?????Óú±? */
; 11491: 	ATR_CHR_NO(a1) = 31027;
; 11492: 	ATR_CHR_ANG(a1) = 3;		//Â∑¶‰∏ä
; 11493: 	//ÂàùÊúü‰ΩçÁΩÆ
; 11494: 	ATR_H_POS(a1) = 320;
; 11495: 	ATR_V_POS(a1) = 240;
; 11496: 	// ÊîªÂáªÁßçÁ±ª
; 11497: 	ATR_CHR_ACT(a1) = ANIM_ATTACK;		// ÁßªÂä®Âä®Áîª
; 11498: 	// ËÆ∞ÂΩï a1 ‰∫é p_master/* ???????ÓüïÓîº */
; 11499: 	p_master = a1;
; 11500: 	// ‰∫ßÁîü field Âú®Â∑¶‰∏ãÁöÑ action list/* ?????Óî¥Óíî???????????Óôë? */
; 11501: 	a1 = GetAction(T_PRIO_MASTER, sizeof(ATR_EQU));

  00081	68 60 02 00 00	 push	 608			; 00000260H
  00086	6a 64		 push	 100			; 00000064H
  00088	c6 01 03	 mov	 BYTE PTR [ecx], 3
  0008b	c6 40 15 50	 mov	 BYTE PTR [eax+21], 80	; 00000050H
  0008f	c7 80 44 01 00
	00 33 79 00 00	 mov	 DWORD PTR [eax+324], 31027 ; 00007933H
  00099	c7 80 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+340], 3
  000a3	c7 40 18 40 01
	00 00		 mov	 DWORD PTR [eax+24], 320	; 00000140H
  000aa	c7 40 1c f0 00
	00 00		 mov	 DWORD PTR [eax+28], 240	; 000000f0H
  000b1	89 b0 4c 01 00
	00		 mov	 DWORD PTR [eax+332], esi
  000b7	a3 00 00 00 00	 mov	 DWORD PTR ?p_master@@3PAUaction@@A, eax
  000bc	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  000c1	8b d0		 mov	 edx, eax
  000c3	83 c4 08	 add	 esp, 8

; 11502: 	if (a1 == NULL)

  000c6	85 d2		 test	 edx, edx
  000c8	0f 84 9d 04 00
	00		 je	 $LN40@oft_test

; 11503: 		return NULL;
; 11504: 	ATR_ATTRIB(a1) = ACT_ATR_HIDE;	// ‰∏çÊòæÁ§∫	//Óù∏Óçï??

  000ce	c7 82 a4 00 00
	00 02 00 00 00	 mov	 DWORD PTR [edx+164], 2

; 11505: 	//Ë°®Á§∫‰ºòÂÖàÈ°∫Â∫è
; 11506: 	ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11507: 	//ÂàùÊúü‰ΩçÁΩÆ
; 11508: 	ATR_H_POS(a1) = lpDraw->xSize - 32;
; 11509: 	ATR_V_POS(a1) = lpDraw->ySize - 64;
; 11510: 	// ËÆ∞ÂΩï a1 ‰∫é p_attrib/* ???????ÓüïÓîº */
; 11511: 	p_attrib = a1;
; 11512: 
; 11513: #ifdef _BATTLE_PK_PLAYER_FOR_6VS6
; 11514: 	//XÂ∫ßÊ†á
; 11515: 	d0 = 416 + 5 + DISPLACEMENT_X;
; 11516: 	//YÂ∫ßÊ†á
; 11517: 	d1 = 408 + 24 + DISPLACEMENT_Y;
; 11518: #else
; 11519: 	//XÂ∫ßÊ†á
; 11520: 	d0 = 416 + 32 + 5 + DISPLACEMENT_X;
; 11521: 	//YÂ∫ßÊ†á
; 11522: 	d1 = 408 + 24 + DISPLACEMENT_Y;
; 11523: #endif
; 11524: 	// È¢ÑËÆæ‰∏∫ÂõæÂè∑‰∏∫ SPR_021em
; 11525: 	d2 = SPR_021em;		/*?????*/
; 11526: 
; 11527: 	//_BATTLE_PK_PLAYER_FOR_6VS6  XIEZI  ‰øÆÊîπ
; 11528: 	for (d7 = 0; d7 < MAX_BATTLE_ROW_CHARS; d7++)

  000d8	33 db		 xor	 ebx, ebx
  000da	c6 42 15 50	 mov	 BYTE PTR [edx+21], 80	; 00000050H
  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  000e4	89 15 00 00 00
	00		 mov	 DWORD PTR ?p_attrib@@3PAUaction@@A, edx
  000ea	8b 89 84 00 00
	00		 mov	 ecx, DWORD PTR [ecx+132]
  000f0	83 e9 20	 sub	 ecx, 32			; 00000020H
  000f3	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  000fb	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [eax+136]
  00101	83 e8 40	 sub	 eax, 64			; 00000040H
  00104	89 42 1c	 mov	 DWORD PTR [edx+28], eax
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  0010c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?DISPLACEMENT_X@@3HA ; DISPLACEMENT_X
  00112	05 b0 01 00 00	 add	 eax, 432		; 000001b0H
  00117	81 c7 c5 01 00
	00		 add	 edi, 453		; 000001c5H
  0011d	89 45 fc	 mov	 DWORD PTR _d1$1$[ebp], eax
  00120	05 2c 01 00 00	 add	 eax, 300		; 0000012cH
  00125	89 45 f8	 mov	 DWORD PTR tv1633[ebp], eax
  00128	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL10@oft_test:

; 11529: 	{	//ÊàëÊñπ‰∫∫Áâ©
; 11530: 		// ‰∫ßÁîüÊàëÊñπÁöÑ monster action list /* ??????????????Óôë? */
; 11531: 		a1 = GetAction(T_PRIO_JIKI, sizeof(ATR_EQU));

  00130	68 60 02 00 00	 push	 608			; 00000260H
  00135	6a 14		 push	 20			; 00000014H
  00137	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0013c	8b d0		 mov	 edx, eax
  0013e	83 c4 08	 add	 esp, 8

; 11532: 		if (a1 == NULL)

  00141	85 d2		 test	 edx, edx
  00143	0f 84 22 04 00
	00		 je	 $LN40@oft_test

; 11533: 			return NULL;
; 11534: 		//Ë¶ÅÊâßË°åÁöÑFunc /* ÓçØ??? */
; 11535: 		ATR_NAME(a1) = NULL;
; 11536: 		// Âä®‰Ωú‰∏∫ÁôªÂú∫
; 11537: 		ATR_VCT_NO(a1) = VCT_NO_APPEAR;

  00149	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0014c	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 11538: 		/* Óù∏Óçï?ÓìèÓôö */
; 11539: 		ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11540: 		// ÊòæÁ§∫Âá∫Áõ∏ÂÖ≥ËÆØÊÅØ // ??????Óù∏Óçï????
; 11541: 		a1->atr |= ACT_ATR_INFO;
; 11542: 		// ÂèØ‰ª•Ë¢´ÁÇπÈÄâ // ???ÓúòÓòã??
; 11543: 		a1->atr |= ACT_ATR_HIT;
; 11544: 		// sprite ÁºñÂè∑ /* ?????Óú±? */
; 11545: 		ATR_CHR_NO(a1) = d2;
; 11546: 		ATR_CHR_ANG(a1) = 3;		//Â∑¶‰∏ä
; 11547: 		ATR_HIT_TIMING(a1) = 5;
; 11548: 		// ÂàùÊúü‰ΩçÁΩÆ /* ???Óñ∫ */
; 11549: 		monster_place_pos[id_no] = ATR_H_POS(a1) = ATR_INT_WORK0(a1) = d0;
; 11550: 		monster_place_pos[id_no + 1] = ATR_V_POS(a1) = ATR_INT_WORK1(a1) = d1;
; 11551: 		ATR_H_POS(a1) += 300;
; 11552: 		ATR_V_POS(a1) += 300;
; 11553: 		// ‰∏ÄÂºÄÂßãÂú®ÁîªÈù¢Â§ñÁöÑ‰ΩçÁΩÆ
; 11554: 		monster_start_pos[id_no++] = ATR_H_POS(a1);
; 11555: 		monster_start_pos[id_no++] = ATR_V_POS(a1);
; 11556: 		/* ???Óéú? */
; 11557: 		ATR_CHR_ACT(a1) = ANIM_STAND;		//?ÓôÆ???????
; 11558: 		ATR_SPD(a1) = 32;		//ÁßªÂä®ÈÄüÂ∫¶
; 11559: 		ATR_GROUP_FLG(a1) = 0;		// Âè≥‰∏ã group set //?????????
; 11560: 		ATR_PLACE_NO(a1) = d7;		// ËÆ∞ÂΩïÂºÄÂßã‰ΩçÁΩÆ //Óê∂?Óú±?ÓüïÓîº
; 11561: 		// ËÆ∞ÂΩï a1 ‰∫é Èòü‰ºçÂàóË°®‰∏≠/* ???????ÓüïÓîº */
; 11562: 		p_party[d7] = a1;
; 11563: 		pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00153	6a 00		 push	 0
  00155	6a 00		 push	 0
  00157	c6 01 f9	 mov	 BYTE PTR [ecx], 249	; 000000f9H
  0015a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0015d	83 8a a4 00 00
	00 14		 or	 DWORD PTR [edx+164], 20	; 00000014H
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _d1$1$[ebp]
  00167	c6 42 15 50	 mov	 BYTE PTR [edx+21], 80	; 00000050H
  0016b	c7 82 44 01 00
	00 c8 86 01 00	 mov	 DWORD PTR [edx+324], 100040 ; 000186c8H
  00175	c7 82 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+340], 3
  0017f	c6 40 5d 05	 mov	 BYTE PTR [eax+93], 5
  00183	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00186	89 0c b5 04 00
	00 00		 mov	 DWORD PTR ?monster_place_pos@@3PAHA[esi*4+4], ecx
  0018d	89 3c b5 00 00
	00 00		 mov	 DWORD PTR ?monster_place_pos@@3PAHA[esi*4], edi
  00194	52		 push	 edx
  00195	89 b8 24 01 00
	00		 mov	 DWORD PTR [eax+292], edi
  0019b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0019e	89 7a 18	 mov	 DWORD PTR [edx+24], edi
  001a1	89 88 28 01 00
	00		 mov	 DWORD PTR [eax+296], ecx
  001a7	81 42 18 2c 01
	00 00		 add	 DWORD PTR [edx+24], 300	; 0000012cH
  001ae	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001b1	8b 4d f8	 mov	 ecx, DWORD PTR tv1633[ebp]
  001b4	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?monster_start_pos@@3PAHA[esi*4], eax
  001bb	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001be	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
  001c1	c7 82 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+332], 3
  001cb	c7 82 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edx+308], 32	; 00000020H
  001d5	c6 40 5e 00	 mov	 BYTE PTR [eax+94], 0
  001d9	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001dc	89 0c b5 04 00
	00 00		 mov	 DWORD PTR ?monster_start_pos@@3PAHA[esi*4+4], ecx
  001e3	83 c6 02	 add	 esi, 2
  001e6	88 98 1f 01 00
	00		 mov	 BYTE PTR [eax+287], bl
  001ec	89 14 9d 00 00
	00 00		 mov	 DWORD PTR ?p_party@@3PAPAUaction@@A[ebx*4], edx
  001f3	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11564: 		/* ?Óù≥?Óë° */
; 11565: 		d0 += 32;
; 11566: 		d1 -= 24;

  001f8	83 6d fc 18	 sub	 DWORD PTR _d1$1$[ebp], 24 ; 00000018H
  001fc	43		 inc	 ebx
  001fd	83 6d f8 18	 sub	 DWORD PTR tv1633[ebp], 24 ; 00000018H
  00201	83 c4 0c	 add	 esp, 12			; 0000000cH
  00204	83 c7 20	 add	 edi, 32			; 00000020H
  00207	83 fb 05	 cmp	 ebx, 5
  0020a	0f 8c 20 ff ff
	ff		 jl	 $LL10@oft_test

; 11686: 		if (a1 == NULL)

  00210	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00215	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?DISPLACEMENT_X@@3HA ; DISPLACEMENT_X
  0021b	05 98 01 00 00	 add	 eax, 408		; 00000198H
  00220	89 45 f8	 mov	 DWORD PTR _d1$2$[ebp], eax
  00223	05 2c 01 00 00	 add	 eax, 300		; 0000012cH
  00228	89 45 fc	 mov	 DWORD PTR tv1632[ebp], eax
  0022b	81 c7 25 01 00
	00		 add	 edi, 293		; 00000125H
$LL13@oft_test:

; 11567: 	}
; 11568: 
; 11569: #ifdef _BATTLE_PK_PLAYER_FOR_6VS6
; 11570: 	//XÂ∫ßÊ†á
; 11571: 	d0 = 320 - 64 + 5 + DISPLACEMENT_X;
; 11572: 	//YÂ∫ßÊ†á
; 11573: 	d1 = 432 - 24 + DISPLACEMENT_Y;
; 11574: #else
; 11575: 	d0 = 320 - 32 + 5 + DISPLACEMENT_X;		//??Óù≥
; 11576: 	d1 = 432 - 24 + DISPLACEMENT_Y;		//??Óù≥
; 11577: #endif
; 11578: 	d2 = SPR_pet001;		/*???*/
; 11579: 
; 11580: 	//_BATTLE_PK_PLAYER_FOR_6VS6  XIEZI  ‰øÆÊîπ
; 11581: 	for (; d7 < 2 * MAX_BATTLE_ROW_CHARS; d7++)
; 11582: 	{	//ÊàëÊñπÂÆ†Áâ©
; 11583: 		/* ??????????????Óôë? */
; 11584: 		a1 = GetAction(T_PRIO_JIKI, sizeof(ATR_EQU));

  00231	68 60 02 00 00	 push	 608			; 00000260H
  00236	6a 14		 push	 20			; 00000014H
  00238	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0023d	8b d0		 mov	 edx, eax
  0023f	83 c4 08	 add	 esp, 8

; 11585: 		if (a1 == NULL)

  00242	85 d2		 test	 edx, edx
  00244	0f 84 21 03 00
	00		 je	 $LN40@oft_test

; 11586: 			return NULL;
; 11587: 		ATR_NAME(a1) = NULL;
; 11588: 		ATR_VCT_NO(a1) = VCT_NO_APPEAR;

  0024a	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0024d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 11589: 		/* Óù∏Óçï?ÓìèÓôö */
; 11590: 		ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11591: 		// ??????Óù∏Óçï????
; 11592: 		a1->atr |= ACT_ATR_INFO;
; 11593: 		// ???ÓúòÓòã??
; 11594: 		a1->atr |= ACT_ATR_HIT;
; 11595: 		/* ?????Óú±? */
; 11596: 		ATR_CHR_NO(a1) = d2;
; 11597: 		ATR_CHR_ANG(a1) = 3;		//?ÓêØ
; 11598: 		ATR_HIT_TIMING(a1) = 3 + 2;
; 11599: 		/* ???Óñ∫ */
; 11600: 		monster_place_pos[id_no] = ATR_H_POS(a1) = ATR_INT_WORK0(a1) = d0;
; 11601: 		monster_place_pos[id_no + 1] = ATR_V_POS(a1) = ATR_INT_WORK1(a1) = d1;
; 11602: 		ATR_H_POS(a1) += 300;
; 11603: 		ATR_V_POS(a1) += 300;
; 11604: 		monster_start_pos[id_no++] = ATR_H_POS(a1);
; 11605: 		monster_start_pos[id_no++] = ATR_V_POS(a1);
; 11606: 		/* ???Óéú? */
; 11607: 		ATR_CHR_ACT(a1) = ANIM_STAND;		//?ÓôÆ???????
; 11608: 		ATR_SPD(a1) = 32;		//?ÓôÆÓî≤Óôö
; 11609: 		ATR_GROUP_FLG(a1) = 0;		//?????????
; 11610: 		ATR_PLACE_NO(a1) = d7;		//Óê∂?Óú±?ÓüïÓîº
; 11611: 		/* ???????ÓüïÓîº */
; 11612: 		p_party[d7] = a1;
; 11613: 		pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00254	6a 00		 push	 0
  00256	6a 00		 push	 0
  00258	c6 01 f9	 mov	 BYTE PTR [ecx], 249	; 000000f9H
  0025b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0025e	83 8a a4 00 00
	00 14		 or	 DWORD PTR [edx+164], 20	; 00000014H
  00265	8b 4d f8	 mov	 ecx, DWORD PTR _d1$2$[ebp]
  00268	c6 42 15 50	 mov	 BYTE PTR [edx+21], 80	; 00000050H
  0026c	c7 82 44 01 00
	00 9a 87 01 00	 mov	 DWORD PTR [edx+324], 100250 ; 0001879aH
  00276	c7 82 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+340], 3
  00280	c6 40 5d 05	 mov	 BYTE PTR [eax+93], 5
  00284	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00287	89 0c b5 04 00
	00 00		 mov	 DWORD PTR ?monster_place_pos@@3PAHA[esi*4+4], ecx
  0028e	89 3c b5 00 00
	00 00		 mov	 DWORD PTR ?monster_place_pos@@3PAHA[esi*4], edi
  00295	52		 push	 edx
  00296	89 b8 24 01 00
	00		 mov	 DWORD PTR [eax+292], edi
  0029c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0029f	89 7a 18	 mov	 DWORD PTR [edx+24], edi
  002a2	89 88 28 01 00
	00		 mov	 DWORD PTR [eax+296], ecx
  002a8	81 42 18 2c 01
	00 00		 add	 DWORD PTR [edx+24], 300	; 0000012cH
  002af	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  002b2	8b 4d fc	 mov	 ecx, DWORD PTR tv1632[ebp]
  002b5	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?monster_start_pos@@3PAHA[esi*4], eax
  002bc	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002bf	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
  002c2	c7 82 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+332], 3
  002cc	c7 82 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edx+308], 32	; 00000020H
  002d6	c6 40 5e 00	 mov	 BYTE PTR [eax+94], 0
  002da	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002dd	89 0c b5 04 00
	00 00		 mov	 DWORD PTR ?monster_start_pos@@3PAHA[esi*4+4], ecx
  002e4	83 c6 02	 add	 esi, 2
  002e7	88 98 1f 01 00
	00		 mov	 BYTE PTR [eax+287], bl
  002ed	89 14 9d 00 00
	00 00		 mov	 DWORD PTR ?p_party@@3PAPAUaction@@A[ebx*4], edx
  002f4	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11614: 		/* ?Óù≥?Óë° */
; 11615: 		d0 += 32 * 2;
; 11616: 		d1 -= 24 * 2;

  002f9	83 6d f8 30	 sub	 DWORD PTR _d1$2$[ebp], 48 ; 00000030H
  002fd	43		 inc	 ebx
  002fe	83 6d fc 30	 sub	 DWORD PTR tv1632[ebp], 48 ; 00000030H
  00302	83 c4 0c	 add	 esp, 12			; 0000000cH
  00305	83 c7 40	 add	 edi, 64			; 00000040H
  00308	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  0030b	0f 8c 20 ff ff
	ff		 jl	 $LL13@oft_test

; 11617: 	}
; 11618: 	/* Óé∑???? */
; 11619: 	p_party[d7] = NULL;

  00311	c7 04 9d 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?p_party@@3PAPAUaction@@A[ebx*4], 0

; 11620: #ifdef _BATTLE_PK_PLAYER_FOR_6VS6
; 11621: 	//XÂ∫ßÊ†á
; 11622: 	d0 = 64 - 32 + 5;
; 11623: 	//YÂ∫ßÊ†á
; 11624: 	d1 = 192 + 30;
; 11625: #else
; 11626: 	d0 = 64 - 32 + 5;		//??Óù≥

  0031c	bf 25 00 00 00	 mov	 edi, 37			; 00000025H

; 11627: 	d1 = 192 - 24 + 30;		//??Óù≥

  00321	c7 45 f8 c6 00
	00 00		 mov	 DWORD PTR _d1$3$[ebp], 198 ; 000000c6H

; 11628: #endif
; 11629: 	d2 = SPR_021em;		/*?????*/
; 11630: 
; 11631: 	//_BATTLE_PK_PLAYER_FOR_6VS6  XIEZI  ‰øÆÊîπ
; 11632: 	for (; d7 < 3 * MAX_BATTLE_ROW_CHARS; d7++)

  00328	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0032b	0f 83 df 00 00
	00		 jae	 $LN15@oft_test
$LL16@oft_test:

; 11633: 	{	//ÊïåÊñπ‰∫∫Áâ©
; 11634: 		/* ??????????????Óôë? */
; 11635: 		a1 = GetAction(T_PRIO_JIKI, sizeof(ATR_EQU));

  00331	68 60 02 00 00	 push	 608			; 00000260H
  00336	6a 14		 push	 20			; 00000014H
  00338	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0033d	8b d0		 mov	 edx, eax
  0033f	83 c4 08	 add	 esp, 8

; 11636: 		if (a1 == NULL)

  00342	85 d2		 test	 edx, edx
  00344	0f 84 21 02 00
	00		 je	 $LN40@oft_test

; 11637: 			return NULL;
; 11638: 		ATR_NAME(a1) = NULL;
; 11639: 		ATR_VCT_NO(a1) = VCT_NO_APPEAR;

  0034a	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0034d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 11640: 		/* Óù∏Óçï?ÓìèÓôö */
; 11641: 		ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11642: 		// ??????Óù∏Óçï????
; 11643: 		a1->atr |= ACT_ATR_INFO;
; 11644: 		// ???ÓúòÓòã??
; 11645: 		a1->atr |= ACT_ATR_HIT;
; 11646: 		/* ?????Óú±? */
; 11647: 		ATR_CHR_NO(a1) = d2;
; 11648: 		ATR_CHR_ANG(a1) = 7;		//??
; 11649: 		ATR_HIT_TIMING(a1) = 5;
; 11650: 		/* ???Óñ∫ */
; 11651: 		monster_place_pos[id_no] = ATR_H_POS(a1) = ATR_INT_WORK0(a1) = d0;
; 11652: 		monster_place_pos[id_no + 1] = ATR_V_POS(a1) = ATR_INT_WORK1(a1) = d1;
; 11653: 		ATR_H_POS(a1) -= 300;
; 11654: 		ATR_V_POS(a1) -= 300;
; 11655: 		monster_start_pos[id_no++] = ATR_H_POS(a1);
; 11656: 		monster_start_pos[id_no++] = ATR_V_POS(a1);
; 11657: 		/* ???Óéú? */
; 11658: 		ATR_CHR_ACT(a1) = ANIM_STAND;		//?ÓôÆ???????
; 11659: 		ATR_SPD(a1) = 32;		//?ÓôÆÓî≤Óôö
; 11660: 		ATR_GROUP_FLG(a1) = 1;		//?ÓêØ???????
; 11661: 		ATR_PLACE_NO(a1) = d7;		//Óê∂?Óú±?ÓüïÓîº
; 11662: 		/* ???????ÓüïÓîº */
; 11663: 		p_party[d7] = a1;
; 11664: 		pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00354	6a 00		 push	 0
  00356	6a 00		 push	 0
  00358	c6 01 f9	 mov	 BYTE PTR [ecx], 249	; 000000f9H
  0035b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0035e	83 8a a4 00 00
	00 14		 or	 DWORD PTR [edx+164], 20	; 00000014H
  00365	8b 4d f8	 mov	 ecx, DWORD PTR _d1$3$[ebp]
  00368	c6 42 15 50	 mov	 BYTE PTR [edx+21], 80	; 00000050H
  0036c	c7 82 44 01 00
	00 c8 86 01 00	 mov	 DWORD PTR [edx+324], 100040 ; 000186c8H
  00376	c7 82 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [edx+340], 7
  00380	c6 40 5d 05	 mov	 BYTE PTR [eax+93], 5
  00384	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00387	89 0c b5 04 00
	00 00		 mov	 DWORD PTR ?monster_place_pos@@3PAHA[esi*4+4], ecx
  0038e	89 3c b5 00 00
	00 00		 mov	 DWORD PTR ?monster_place_pos@@3PAHA[esi*4], edi
  00395	52		 push	 edx
  00396	89 b8 24 01 00
	00		 mov	 DWORD PTR [eax+292], edi
  0039c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0039f	89 7a 18	 mov	 DWORD PTR [edx+24], edi
  003a2	89 88 28 01 00
	00		 mov	 DWORD PTR [eax+296], ecx
  003a8	81 c1 d4 fe ff
	ff		 add	 ecx, -300		; fffffed4H
  003ae	81 42 18 d4 fe
	ff ff		 add	 DWORD PTR [edx+24], -300 ; fffffed4H
  003b5	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  003b8	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?monster_start_pos@@3PAHA[esi*4], eax
  003bf	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003c2	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
  003c5	c7 82 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+332], 3
  003cf	c7 82 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edx+308], 32	; 00000020H
  003d9	c6 40 5e 01	 mov	 BYTE PTR [eax+94], 1
  003dd	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003e0	89 0c b5 04 00
	00 00		 mov	 DWORD PTR ?monster_start_pos@@3PAHA[esi*4+4], ecx
  003e7	83 c6 02	 add	 esi, 2
  003ea	88 98 1f 01 00
	00		 mov	 BYTE PTR [eax+287], bl
  003f0	89 14 9d 00 00
	00 00		 mov	 DWORD PTR ?p_party@@3PAPAUaction@@A[ebx*4], edx
  003f7	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11665: 		/* ?Óù≥?Óë° */
; 11666: 		d0 += 32;
; 11667: 		d1 -= 24;

  003fc	83 6d f8 18	 sub	 DWORD PTR _d1$3$[ebp], 24 ; 00000018H
  00400	43		 inc	 ebx
  00401	83 c4 0c	 add	 esp, 12			; 0000000cH
  00404	83 c7 20	 add	 edi, 32			; 00000020H
  00407	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0040a	0f 8c 21 ff ff
	ff		 jl	 $LL16@oft_test
$LN15@oft_test:

; 11668: 	}
; 11669: 
; 11670: #ifdef _BATTLE_PK_PLAYER_FOR_6VS6
; 11671: 	//XÂ∫ßÊ†á
; 11672: 	d0 = 32 + 32 + 5;
; 11673: 	//YÂ∫ßÊ†á
; 11674: 	d1 = 264 + 48 + 10;
; 11675: #else
; 11676: 	d0 = 32 + 32 + 5;		//??Óù≥
; 11677: 	d1 = 264 + 24 + 10;	//??Óù≥

  00410	b8 2a 01 00 00	 mov	 eax, 298		; 0000012aH
  00415	bf 45 00 00 00	 mov	 edi, 69			; 00000045H
  0041a	89 45 f8	 mov	 DWORD PTR _d1$4$[ebp], eax

; 11678: #endif
; 11679: 	d2 = SPR_pet001;		/*???*/
; 11680: 
; 11681: 	//_BATTLE_PK_PLAYER_FOR_6VS6  XIEZI  ‰øÆÊîπ
; 11682: 	for (; d7 < 4 *	MAX_BATTLE_ROW_CHARS; d7++)

  0041d	83 fb 14	 cmp	 ebx, 20			; 00000014H
  00420	0f 83 e7 00 00
	00		 jae	 $LN18@oft_test
  00426	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL19@oft_test:

; 11683: 	{	//ÊïåÊñπÂÆ†Áâ©
; 11684: 		/* ??????????????Óôë? */
; 11685: 		a1 = GetAction(T_PRIO_JIKI, sizeof(ATR_EQU));

  00430	68 60 02 00 00	 push	 608			; 00000260H
  00435	6a 14		 push	 20			; 00000014H
  00437	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0043c	83 c4 08	 add	 esp, 8

; 11686: 		if (a1 == NULL)

  0043f	85 c0		 test	 eax, eax
  00441	0f 84 24 01 00
	00		 je	 $LN40@oft_test

; 11687: 			return NULL;
; 11688: 		ATR_NAME(a1) = NULL;
; 11689: 		ATR_VCT_NO(a1) = VCT_NO_APPEAR;

  00447	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]

; 11690: 		/* Óù∏Óçï?ÓìèÓôö */
; 11691: 		ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11692: 		// ??????Óù∏Óçï????
; 11693: 		a1->atr |= ACT_ATR_INFO;
; 11694: 		// ???ÓúòÓòã??
; 11695: 		a1->atr |= ACT_ATR_HIT;
; 11696: 		/* ?????Óú±? */
; 11697: 		ATR_CHR_NO(a1) = d2;
; 11698: 		ATR_CHR_ANG(a1) = 7;		//??
; 11699: 		ATR_HIT_TIMING(a1) = 3 + 2;
; 11700: 		/* ???Óñ∫ */
; 11701: 		monster_place_pos[id_no] = ATR_H_POS(a1) = ATR_INT_WORK0(a1) = d0;
; 11702: 		monster_place_pos[id_no + 1] = ATR_V_POS(a1) = ATR_INT_WORK1(a1) = d1;

  0044a	8b 55 f8	 mov	 edx, DWORD PTR _d1$4$[ebp]
  0044d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00454	89 14 b5 04 00
	00 00		 mov	 DWORD PTR ?monster_place_pos@@3PAHA[esi*4+4], edx
  0045b	c6 01 f9	 mov	 BYTE PTR [ecx], 249	; 000000f9H
  0045e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00461	83 88 a4 00 00
	00 14		 or	 DWORD PTR [eax+164], 20	; 00000014H
  00468	c6 40 15 50	 mov	 BYTE PTR [eax+21], 80	; 00000050H
  0046c	c7 80 44 01 00
	00 9a 87 01 00	 mov	 DWORD PTR [eax+324], 100250 ; 0001879aH
  00476	c7 80 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [eax+340], 7
  00480	c6 41 5d 05	 mov	 BYTE PTR [ecx+93], 5
  00484	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]

; 11703: 		ATR_H_POS(a1) -= 300;
; 11704: 		ATR_V_POS(a1) -= 300;
; 11705: 		monster_start_pos[id_no++] = ATR_H_POS(a1);
; 11706: 		monster_start_pos[id_no++] = ATR_V_POS(a1);
; 11707: 		/* ???Óéú? */
; 11708: 		ATR_CHR_ACT(a1) = ANIM_STAND;		//?ÓôÆ???????
; 11709: 		ATR_SPD(a1) = 32;		//?ÓôÆÓî≤Óôö
; 11710: 		ATR_GROUP_FLG(a1) = 1;		//?ÓêØ???????
; 11711: 		ATR_PLACE_NO(a1) = d7;		//Óê∂?Óú±?ÓüïÓîº
; 11712: 		/* ???????ÓüïÓîº */
; 11713: 		p_party[d7] = a1;
; 11714: 		pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);

  00487	6a 00		 push	 0
  00489	6a 00		 push	 0
  0048b	50		 push	 eax
  0048c	89 b9 24 01 00
	00		 mov	 DWORD PTR [ecx+292], edi
  00492	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00495	89 78 18	 mov	 DWORD PTR [eax+24], edi
  00498	89 3c b5 00 00
	00 00		 mov	 DWORD PTR ?monster_place_pos@@3PAHA[esi*4], edi
  0049f	89 91 28 01 00
	00		 mov	 DWORD PTR [ecx+296], edx
  004a5	81 c2 d4 fe ff
	ff		 add	 edx, -300		; fffffed4H
  004ab	81 40 18 d4 fe
	ff ff		 add	 DWORD PTR [eax+24], -300 ; fffffed4H
  004b2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  004b5	89 0c b5 00 00
	00 00		 mov	 DWORD PTR ?monster_start_pos@@3PAHA[esi*4], ecx
  004bc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  004bf	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  004c2	c7 80 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+332], 3
  004cc	c7 80 34 01 00
	00 20 00 00 00	 mov	 DWORD PTR [eax+308], 32	; 00000020H
  004d6	c6 41 5e 01	 mov	 BYTE PTR [ecx+94], 1
  004da	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  004dd	89 14 b5 04 00
	00 00		 mov	 DWORD PTR ?monster_start_pos@@3PAHA[esi*4+4], edx
  004e4	88 99 1f 01 00
	00		 mov	 BYTE PTR [ecx+287], bl
  004ea	89 04 9d 00 00
	00 00		 mov	 DWORD PTR ?p_party@@3PAPAUaction@@A[ebx*4], eax
  004f1	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 11715: 		/* ?Óù≥?Óë° */
; 11716: 		d0 += 32 * 2;
; 11717: 		d1 -= 24 * 2;

  004f6	83 6d f8 30	 sub	 DWORD PTR _d1$4$[ebp], 48 ; 00000030H
  004fa	43		 inc	 ebx
  004fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  004fe	83 c7 40	 add	 edi, 64			; 00000040H
  00501	83 c6 02	 add	 esi, 2
  00504	83 fb 14	 cmp	 ebx, 20			; 00000014H
  00507	0f 8c 23 ff ff
	ff		 jl	 $LL19@oft_test
$LN18@oft_test:

; 11718: 	}
; 11719: #ifdef _BATTLE_PK_PLAYER_FOR_40
; 11720: 	p_party[d7] = NULL;
; 11721: 	d0 = 128 + 32 + 5;
; 11722: 	d1 = 408 + 24 + DISPLACEMENT_Y;
; 11723: 	d2 = SPR_021em;		/*?????*/
; 11724: 	for (d7 = 20; d7 < 25; d7++)
; 11725: 	{	//ÊïåÊñπ‰∫∫Áâ©
; 11726: 		/* ??????????????Óôë? */
; 11727: 		a1 = GetAction(T_PRIO_JIKI, sizeof(ATR_EQU));
; 11728: 		if (a1 == NULL)
; 11729: 			return NULL;
; 11730: 		ATR_NAME(a1) = NULL;
; 11731: 		ATR_VCT_NO(a1) = VCT_NO_APPEAR;
; 11732: 		/* Óù∏Óçï?ÓìèÓôö */
; 11733: 		ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11734: 		// ??????Óù∏Óçï????
; 11735: 		a1->atr |= ACT_ATR_INFO;
; 11736: 		// ???ÓúòÓòã??
; 11737: 		a1->atr |= ACT_ATR_HIT;
; 11738: 		/* ?????Óú±? */
; 11739: 		ATR_CHR_NO(a1) = d2;
; 11740: 		ATR_CHR_ANG(a1) = 5;		//??
; 11741: 		ATR_HIT_TIMING(a1) = 5;
; 11742: 		/* ???Óñ∫ */
; 11743: 		monster_place_pos[id_no] = ATR_H_POS(a1) = ATR_INT_WORK0(a1) = d0;
; 11744: 		monster_place_pos[id_no + 1] = ATR_V_POS(a1) = ATR_INT_WORK1(a1) = d1;
; 11745: 		ATR_H_POS(a1) -= 300;
; 11746: 		ATR_V_POS(a1) += 300;
; 11747: 		monster_start_pos[id_no++] = ATR_H_POS(a1);
; 11748: 		monster_start_pos[id_no++] = ATR_V_POS(a1);
; 11749: 		/* ???Óéú? */
; 11750: 		ATR_CHR_ACT(a1) = ANIM_STAND;		//?ÓôÆ???????
; 11751: 		ATR_SPD(a1) = 32;		//?ÓôÆÓî≤Óôö
; 11752: 		ATR_GROUP_FLG(a1) = 2;		//?ÓêØ???????
; 11753: 		ATR_PLACE_NO(a1) = d7;		//Óê∂?Óú±?ÓüïÓîº
; 11754: 		/* ???????ÓüïÓîº */
; 11755: 		p_party[d7] = a1;
; 11756: 		pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 11757: 		/* ?Óù≥?Óë° */
; 11758: 		d0 -= 32;
; 11759: 		d1 -= 24;
; 11760: 	}
; 11761: 	d0 = 288 + 32 + 5;		//??Óù≥
; 11762: 	d1 = 432 - 24 + DISPLACEMENT_Y;		//??Óù≥
; 11763: 	d2 = SPR_pet001;		/*???*/
; 11764: 	for (d7 = 25; d7 < 30; d7++)
; 11765: 	{	//ÊïåÊñπÂÆ†Áâ©
; 11766: 		/* ??????????????Óôë? */
; 11767: 		a1 = GetAction(T_PRIO_JIKI, sizeof(ATR_EQU));
; 11768: 		if (a1 == NULL)
; 11769: 			return NULL;
; 11770: 		ATR_NAME(a1) = NULL;
; 11771: 		ATR_VCT_NO(a1) = VCT_NO_APPEAR;
; 11772: 		/* Óù∏Óçï?ÓìèÓôö */
; 11773: 		ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11774: 		// ??????Óù∏Óçï????
; 11775: 		a1->atr |= ACT_ATR_INFO;
; 11776: 		// ???ÓúòÓòã??
; 11777: 		a1->atr |= ACT_ATR_HIT;
; 11778: 		/* ?????Óú±? */
; 11779: 		ATR_CHR_NO(a1) = d2;
; 11780: 		ATR_CHR_ANG(a1) = 5;		//??
; 11781: 		ATR_HIT_TIMING(a1) = 3 + 2;
; 11782: 		/* ???Óñ∫ */
; 11783: 		monster_place_pos[id_no] = ATR_H_POS(a1) = ATR_INT_WORK0(a1) = d0;
; 11784: 		monster_place_pos[id_no + 1] = ATR_V_POS(a1) = ATR_INT_WORK1(a1) = d1;
; 11785: 		ATR_H_POS(a1) -= 300;
; 11786: 		ATR_V_POS(a1) += 300;
; 11787: 		monster_start_pos[id_no++] = ATR_H_POS(a1);
; 11788: 		monster_start_pos[id_no++] = ATR_V_POS(a1);
; 11789: 		/* ???Óéú? */
; 11790: 		ATR_CHR_ACT(a1) = ANIM_STAND;		//?ÓôÆ???????
; 11791: 		ATR_SPD(a1) = 32;		//?ÓôÆÓî≤Óôö
; 11792: 		ATR_GROUP_FLG(a1) = 2;		//?ÓêØ???????
; 11793: 		ATR_PLACE_NO(a1) = d7;		//Óê∂?Óú±?ÓüïÓîº
; 11794: 		/* ???????ÓüïÓîº */
; 11795: 		p_party[d7] = a1;
; 11796: 		pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 11797: 		/* ?Óù≥?Óë° */
; 11798: 		d0 -= 32 * 2;
; 11799: 		d1 -= 24 * 2;
; 11800: 	}
; 11801: 
; 11802: 	//XÂ∫ßÊ†á
; 11803: 	d0 = 608 - 32 + 5 + DISPLACEMENT_X;
; 11804: 	//YÂ∫ßÊ†á
; 11805: 	d1 = 190 - 24 + 30;
; 11806: 	d2 = SPR_021em;		/*?????*/
; 11807: 	for (d7 = 30; d7 < 35; d7++)
; 11808: 	{	//Â∑¶‰∏äËßíÊïåÊñπ‰∫∫Áâ©
; 11809: 		/* ??????????????Óôë? */
; 11810: 		a1 = GetAction(T_PRIO_JIKI, sizeof(ATR_EQU));
; 11811: 		if (a1 == NULL)
; 11812: 			return NULL;
; 11813: 		ATR_NAME(a1) = NULL;
; 11814: 		ATR_VCT_NO(a1) = VCT_NO_APPEAR;
; 11815: 		/* Óù∏Óçï?ÓìèÓôö */
; 11816: 		ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11817: 		// ??????Óù∏Óçï????
; 11818: 		a1->atr |= ACT_ATR_INFO;
; 11819: 		// ???ÓúòÓòã??
; 11820: 		a1->atr |= ACT_ATR_HIT;
; 11821: 		/* ?????Óú±? */
; 11822: 		ATR_CHR_NO(a1) = d2;
; 11823: 		ATR_CHR_ANG(a1) = 1;		//??
; 11824: 		ATR_HIT_TIMING(a1) = 5;
; 11825: 		/* ???Óñ∫ */
; 11826: 		monster_place_pos[id_no] = ATR_H_POS(a1) = ATR_INT_WORK0(a1) = d0;
; 11827: 		monster_place_pos[id_no + 1] = ATR_V_POS(a1) = ATR_INT_WORK1(a1) = d1;
; 11828: 		ATR_H_POS(a1) += 300;
; 11829: 		ATR_V_POS(a1) -= 300;
; 11830: 		monster_start_pos[id_no++] = ATR_H_POS(a1);
; 11831: 		monster_start_pos[id_no++] = ATR_V_POS(a1);
; 11832: 		/* ???Óéú? */
; 11833: 		ATR_CHR_ACT(a1) = ANIM_STAND;		//?ÓôÆ???????
; 11834: 		ATR_SPD(a1) = 32;		//?ÓôÆÓî≤Óôö
; 11835: 		ATR_GROUP_FLG(a1) = 3;		//?ÓêØ???????
; 11836: 		ATR_PLACE_NO(a1) = d7;		//Óê∂?Óú±?ÓüïÓîº
; 11837: 		/* ???????ÓüïÓîº */
; 11838: 		p_party[d7] = a1;
; 11839: 		pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 11840: 		/* ?Óù≥?Óë° */
; 11841: 		d0 -= 32;
; 11842: 		d1 -= 24;
; 11843: 	}
; 11844: 	d0 = 608 - 32 + 5 + DISPLACEMENT_X;		//??Óù≥
; 11845: 	d1 = 236 + 24 + 30;		//??Óù≥
; 11846: 	d2 = SPR_pet001;		/*???*/
; 11847: 	for (d7 = 35; d7 < 40; d7++)
; 11848: 	{	//Â∑¶‰∏äËßíÊïåÊñπÂÆ†Áâ©
; 11849: 		/* ??????????????Óôë? */
; 11850: 		a1 = GetAction(T_PRIO_JIKI, sizeof(ATR_EQU));
; 11851: 		if (a1 == NULL)
; 11852: 			return NULL;
; 11853: 		ATR_NAME(a1) = NULL;
; 11854: 		ATR_VCT_NO(a1) = VCT_NO_APPEAR;
; 11855: 		/* Óù∏Óçï?ÓìèÓôö */
; 11856: 		ATR_DISP_PRIO(a1) = D_PRIO_MASTER;
; 11857: 		// ??????Óù∏Óçï????
; 11858: 		a1->atr |= ACT_ATR_INFO;
; 11859: 		// ???ÓúòÓòã??
; 11860: 		a1->atr |= ACT_ATR_HIT;
; 11861: 		/* ?????Óú±? */
; 11862: 		ATR_CHR_NO(a1) = d2;
; 11863: 		ATR_CHR_ANG(a1) = 1;		//??
; 11864: 		ATR_HIT_TIMING(a1) = 3 + 2;
; 11865: 		/* ???Óñ∫ */
; 11866: 		monster_place_pos[id_no] = ATR_H_POS(a1) = ATR_INT_WORK0(a1) = d0;
; 11867: 		monster_place_pos[id_no + 1] = ATR_V_POS(a1) = ATR_INT_WORK1(a1) = d1;
; 11868: 		ATR_H_POS(a1) += 300;
; 11869: 		ATR_V_POS(a1) -= 300;
; 11870: 		monster_start_pos[id_no++] = ATR_H_POS(a1);
; 11871: 		monster_start_pos[id_no++] = ATR_V_POS(a1);
; 11872: 		/* ???Óéú? */
; 11873: 		ATR_CHR_ACT(a1) = ANIM_STAND;		//?ÓôÆ???????
; 11874: 		ATR_SPD(a1) = 32;		//?ÓôÆÓî≤Óôö
; 11875: 		ATR_GROUP_FLG(a1) = 3;		//?ÓêØ???????
; 11876: 		ATR_PLACE_NO(a1) = d7;		//Óê∂?Óú±?ÓüïÓîº
; 11877: 		/* ???????ÓüïÓîº */
; 11878: 		p_party[d7] = a1;
; 11879: 		pattern(a1, ANM_NOMAL_SPD, ANM_LOOP);
; 11880: 		/* ?Óù≥?Óë° */
; 11881: 		d0 -= 32 * 2;
; 11882: 		d1 -= 24 * 2;
; 11883: 	}
; 11884: 
; 11885: #endif
; 11886: 	// ÂàùÊúü‰ΩçÁΩÆÂÜçÈÖçÁΩÆ //???Óñ∫?ÓõπÓñ∫
; 11887: 	for (d7 = 0; d7 < BATTLKPKPLYAERNUM; d7++)

  0050d	33 ff		 xor	 edi, edi
  0050f	90		 npad	 1
$LL22@oft_test:

; 11888: 	{
; 11889: 		a1 = p_party[d7];

  00510	8b 9f 00 00 00
	00		 mov	 ebx, DWORD PTR ?p_party@@3PAPAUaction@@A[edi]

; 11890: 		ATR_H_POS(a1) = monster_start_pos[monster_place_no[d7] * 2];

  00516	8b b7 00 00 00
	00		 mov	 esi, DWORD PTR ?monster_place_no@@3PAHA[edi]
  0051c	83 c7 04	 add	 edi, 4

; 11891: 		ATR_V_POS(a1) = monster_start_pos[monster_place_no[d7] * 2 + 1];
; 11892: 		ATR_INT_WORK0(a1) = monster_place_pos[monster_place_no[d7] * 2];

  0051f	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00522	8b 04 f5 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_start_pos@@3PAHA[esi*8]
  00529	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  0052c	8b 04 f5 04 00
	00 00		 mov	 eax, DWORD PTR ?monster_start_pos@@3PAHA[esi*8+4]
  00533	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
  00536	8b 04 f5 00 00
	00 00		 mov	 eax, DWORD PTR ?monster_place_pos@@3PAHA[esi*8]
  0053d	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 11893: 		ATR_INT_WORK1(a1) = monster_place_pos[monster_place_no[d7] * 2 + 1];

  00543	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  00546	8b 0c f5 04 00
	00 00		 mov	 ecx, DWORD PTR ?monster_place_pos@@3PAHA[esi*8+4]
  0054d	89 8a 28 01 00
	00		 mov	 DWORD PTR [edx+296], ecx
  00553	83 ff 50	 cmp	 edi, 80			; 00000050H
  00556	7c b8		 jl	 SHORT $LL22@oft_test

; 11894: 	}
; 11895: 	command_point = 0;		// clear command point //?????Óí∂????????
; 11896: 	return a1;
; 11897: }

  00558	5f		 pop	 edi
  00559	5e		 pop	 esi
  0055a	8b c3		 mov	 eax, ebx
  0055c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?command_point@@3HA, 0
  00566	5b		 pop	 ebx
  00567	8b e5		 mov	 esp, ebp
  00569	5d		 pop	 ebp
  0056a	c3		 ret	 0
$LN40@oft_test:
  0056b	5f		 pop	 edi
  0056c	5e		 pop	 esi
  0056d	33 c0		 xor	 eax, eax
  0056f	5b		 pop	 ebx
  00570	8b e5		 mov	 esp, ebp
  00572	5d		 pop	 ebp
  00573	c3		 ret	 0
?oft_test@@YAPAUaction@@XZ ENDP				; oft_test
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?katino@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?katino@@YAXPAUaction@@@Z PROC				; katino, COMDAT

; 1440 : void katino(ACTION *a0){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1441 : 	ACTION *a1;
; 1442 : 
; 1443 : 	a1 = ATR_BODY_WORK(0, a0);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _a0$[ebp]
  00008	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0000b	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1444 : 	if (ATR_NAME(a1) == NULL || ATR_VCT_NO(a1) == VCT_NO_DIE + 2 || ATR_LIFE(a1) == 0){

  0000e	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00012	0f 84 62 02 00
	00		 je	 $LN6@katino
  00018	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001b	80 38 fc	 cmp	 BYTE PTR [eax], 252	; 000000fcH
  0001e	0f 84 56 02 00
	00		 je	 $LN6@katino
  00024	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  00028	0f 84 4c 02 00
	00		 je	 $LN6@katino

; 1447 : 		return;
; 1448 : 	}
; 1449 : 	ATR_DISP_PRIO(a0) = ATR_DISP_PRIO(a1) + 1;

  0002e	8a 46 15	 mov	 al, BYTE PTR [esi+21]

; 1450 : 	ATR_H_POS(a0) = ATR_H_POS(a1);
; 1451 : #ifdef _FIXSTATUS					// (‰∏çÂèØÂºÄ) Syu ADD ‰øÆÊ≠£ÊàòÊñóÁä∂ÊÄÅÊòæÁ§∫ÊñπÂºè
; 1452 : 	if (ATR_CHR_NO(a0) == SPR_shock)			//È∫ªÁóπ

  00031	8b 8f 44 01 00
	00		 mov	 ecx, DWORD PTR [edi+324]
  00037	fe c0		 inc	 al
  00039	88 47 15	 mov	 BYTE PTR [edi+21], al
  0003c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0003f	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00042	81 f9 c7 88 01
	00		 cmp	 ecx, 100551		; 000188c7H
  00048	75 17		 jne	 SHORT $LN7@katino

; 1453 : 		ATR_V_POS(a0) = ATR_V_POS(a1);

  0004a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 1523 : 		}
; 1524 : 	}
; 1525 : 	else 
; 1526 : #endif
; 1527 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);		//???

  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	57		 push	 edi
  00052	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00055	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	5f		 pop	 edi

; 1528 : }

  0005e	5e		 pop	 esi
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN7@katino:

; 1454 : 	else if (ATR_CHR_NO(a0) == 35120)		//Ê†ëÊ†πÁº†Áªï

  00061	81 f9 30 89 00
	00		 cmp	 ecx, 35120		; 00008930H
  00067	75 1a		 jne	 SHORT $LN9@katino
$LN64@katino:

; 1523 : 		}
; 1524 : 	}
; 1525 : 	else 
; 1526 : #endif
; 1527 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);		//???

  00069	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0006c	6a 00		 push	 0
  0006e	83 e8 22	 sub	 eax, 34			; 00000022H
  00071	6a 00		 push	 0
  00073	57		 push	 edi
  00074	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00077	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	5f		 pop	 edi

; 1528 : }

  00080	5e		 pop	 esi
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN9@katino:

; 1455 : 		ATR_V_POS(a0) = ATR_V_POS(a1) - 34 ;
; 1456 : 	else if (ATR_CHR_NO(a0) == 101702)	//ÊØíSarsËîìÂª∂

  00083	81 f9 46 8d 01
	00		 cmp	 ecx, 101702		; 00018d46H
  00089	74 de		 je	 SHORT $LN64@katino

; 1457 : 		ATR_V_POS(a0) = ATR_V_POS(a1) - 34 ;
; 1458 : 	else if (ATR_CHR_NO(a0) == 27692)		//ÂÜ∞ÁÆ≠ÊúØ„ÄÅÂÜ∞ÁàÜÊúØ

  0008b	81 f9 2c 6c 00
	00		 cmp	 ecx, 27692		; 00006c2cH
  00091	74 d6		 je	 SHORT $LN64@katino

; 1459 : 		ATR_V_POS(a0) = ATR_V_POS(a1) - 34 ;
; 1460 : 	else if (ATR_CHR_NO(a0) == 35110)		//Â§©ÁΩóÂú∞ÁΩë

  00093	81 f9 26 89 00
	00		 cmp	 ecx, 35110		; 00008926H
  00099	74 ce		 je	 SHORT $LN64@katino

; 1461 : 		ATR_V_POS(a0) = ATR_V_POS(a1) - 34 ;
; 1462 : 	else if (ATR_CHR_NO(a0) == 26517)		//ÈÅóÂøò

  0009b	81 f9 95 67 00
	00		 cmp	 ecx, 26517		; 00006795H
  000a1	74 c6		 je	 SHORT $LN64@katino

; 1463 : 		ATR_V_POS(a0) = ATR_V_POS(a1) - 34 ;
; 1464 : 	else if (ATR_CHR_NO(a0) == CG_HIT_MARK_00)

  000a3	81 f9 9c 63 00
	00		 cmp	 ecx, 25500		; 0000639cH
  000a9	0f 85 bf 00 00
	00		 jne	 $LN19@katino

; 1465 : 	{	//ÊôïÁú©
; 1466 : 		StarLoop++; 

  000af	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?StarLoop@@3FA ; StarLoop
  000b5	66 40		 inc	 ax
  000b7	0f b7 c8	 movzx	 ecx, ax
  000ba	66 a3 00 00 00
	00		 mov	 WORD PTR ?StarLoop@@3FA, ax ; StarLoop
  000c0	66 83 f8 14	 cmp	 ax, 20			; 00000014H

; 1467 : 		if (StarLoop <= 20 && StarLoop > 0) 

  000c4	7f 0d		 jg	 SHORT $LN21@katino
  000c6	66 85 c9	 test	 cx, cx
  000c9	7e 08		 jle	 SHORT $LN21@katino

; 1468 : 			ATR_V_POS(a0) = ATR_V_POS(a1) - 46;

  000cb	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000ce	83 e8 2e	 sub	 eax, 46			; 0000002eH
  000d1	eb 35		 jmp	 SHORT $LN62@katino
$LN21@katino:

; 1469 : 		else if (StarLoop <= 40 && StarLoop > 20)

  000d3	8d 41 eb	 lea	 eax, DWORD PTR [ecx-21]
  000d6	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  000da	77 08		 ja	 SHORT $LN23@katino

; 1470 : 			ATR_V_POS(a0) = ATR_V_POS(a1) - 56;

  000dc	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000df	83 e8 38	 sub	 eax, 56			; 00000038H
  000e2	eb 24		 jmp	 SHORT $LN62@katino
$LN23@katino:

; 1471 : 		else if (StarLoop <= 60 && StarLoop > 40){

  000e4	8d 41 d7	 lea	 eax, DWORD PTR [ecx-41]
  000e7	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  000eb	77 08		 ja	 SHORT $LN25@katino

; 1472 : 			ATR_V_POS(a0) = ATR_V_POS(a1) - 56;

  000ed	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000f0	83 e8 38	 sub	 eax, 56			; 00000038H

; 1473 : 			ATR_H_POS(a0) = ATR_H_POS(a0) + 16;

  000f3	eb 0f		 jmp	 SHORT $LN63@katino
$LN25@katino:

; 1474 : 		}else if (StarLoop <= 80 && StarLoop > 60){

  000f5	8d 41 c3	 lea	 eax, DWORD PTR [ecx-61]
  000f8	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  000fc	77 0d		 ja	 SHORT $LN27@katino

; 1475 : 			ATR_V_POS(a0) = ATR_V_POS(a1) - 46;

  000fe	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00101	83 e8 2e	 sub	 eax, 46			; 0000002eH
$LN63@katino:

; 1476 : 			ATR_H_POS(a0) = ATR_H_POS(a0) + 16;
; 1477 : 		}
; 1478 : 		if (StarLoop >= 80)

  00104	83 47 18 10	 add	 DWORD PTR [edi+24], 16	; 00000010H
$LN62@katino:
  00108	89 47 1c	 mov	 DWORD PTR [edi+28], eax
$LN27@katino:
  0010b	66 83 3d 00 00
	00 00 50	 cmp	 WORD PTR ?StarLoop@@3FA, 80 ; StarLoop, 00000050H
  00113	7c 08		 jl	 SHORT $LN28@katino

; 1479 : 			StarLoop = 0 ; 

  00115	33 c0		 xor	 eax, eax
  00117	66 a3 00 00 00
	00		 mov	 WORD PTR ?StarLoop@@3FA, ax ; StarLoop
$LN28@katino:

; 1480 : 	}

  0011d	8b 87 44 01 00
	00		 mov	 eax, DWORD PTR [edi+324]
$LN31@katino:

; 1493 : #else
; 1494 : 	if (ATR_CHR_NO(a0) == SPR_shock)		//????
; 1495 : 		ATR_V_POS(a0) = ATR_V_POS(a1);
; 1496 : 	else
; 1497 : 		ATR_V_POS(a0) = ATR_V_POS(a1) - 64;
; 1498 : #endif
; 1499 : #ifdef _PETSKILL_LER
; 1500 : 	// ÂΩìÂä®Áîª‰∏∫ÈõæÊàñÈò≤Êä§ÁõæÊó∂
; 1501 : 	if (ATR_CHR_NO(a0) == 101810 || ATR_CHR_NO(a0) == 101811 || ATR_CHR_NO(a0) == 101805 ||
; 1502 : 		ATR_CHR_NO(a0) == 101863 || ATR_CHR_NO(a0) == 101864 || ATR_CHR_NO(a0) == 101858)

  00123	3d b2 8d 01 00	 cmp	 eax, 101810		; 00018db2H
  00128	0f 84 a5 00 00
	00		 je	 $LN37@katino
$LN57@katino:
  0012e	3d b3 8d 01 00	 cmp	 eax, 101811		; 00018db3H
  00133	0f 84 9a 00 00
	00		 je	 $LN37@katino
$LN58@katino:
  00139	3d ad 8d 01 00	 cmp	 eax, 101805		; 00018dadH
  0013e	0f 84 8f 00 00
	00		 je	 $LN37@katino
  00144	3d e7 8d 01 00	 cmp	 eax, 101863		; 00018de7H
  00149	0f 84 84 00 00
	00		 je	 $LN37@katino
  0014f	3d e8 8d 01 00	 cmp	 eax, 101864		; 00018de8H
  00154	74 7d		 je	 SHORT $LN37@katino
  00156	3d e2 8d 01 00	 cmp	 eax, 101858		; 00018de2H
  0015b	74 76		 je	 SHORT $LN37@katino

; 1523 : 		}
; 1524 : 	}
; 1525 : 	else 
; 1526 : #endif
; 1527 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);		//???

  0015d	6a 00		 push	 0
  0015f	6a 00		 push	 0
  00161	57		 push	 edi
  00162	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016a	5f		 pop	 edi

; 1528 : }

  0016b	5e		 pop	 esi
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
$LN19@katino:

; 1481 : #ifdef _PETSKILL_LER
; 1482 : 	// Èõ∑Â∞îÂèòË∫´Êó∂ÁöÑÈõæÂä®ÁîªÁöÑ‰ΩçÁΩÆ‰∏çÂä®
; 1483 : 	else if (ATR_CHR_NO(a0) == 101810 || ATR_CHR_NO(a0) == 101811 || ATR_CHR_NO(a0) == 101863 || ATR_CHR_NO(a0) == 101864);

  0016e	8b c1		 mov	 eax, ecx
  00170	81 f9 b2 8d 01
	00		 cmp	 ecx, 101810		; 00018db2H
  00176	74 ab		 je	 SHORT $LN31@katino
  00178	81 f9 b3 8d 01
	00		 cmp	 ecx, 101811		; 00018db3H
  0017e	74 ae		 je	 SHORT $LN57@katino
  00180	81 f9 e7 8d 01
	00		 cmp	 ecx, 101863		; 00018de7H
  00186	74 b1		 je	 SHORT $LN58@katino
  00188	81 f9 e8 8d 01
	00		 cmp	 ecx, 101864		; 00018de8H
  0018e	74 a9		 je	 SHORT $LN58@katino

; 1484 : 	// Èõ∑Â∞îÈò≤Âæ°Êó∂ÁöÑÈò≤Êä§ÁõæÂä®Áîª‰ΩçÁΩÆË¶ÅÂèò
; 1485 : 	else if (ATR_CHR_NO(a0) == 101805 || ATR_CHR_NO(a0) == 101858)

  00190	81 f9 ad 8d 01
	00		 cmp	 ecx, 101805		; 00018dadH
  00196	74 22		 je	 SHORT $LN34@katino
  00198	81 f9 e2 8d 01
	00		 cmp	 ecx, 101858		; 00018de2H
  0019e	74 1a		 je	 SHORT $LN34@katino

; 1489 : 	}
; 1490 : #endif
; 1491 : 	else 
; 1492 : 		ATR_V_POS(a0) = ATR_V_POS(a1) - 64;

  001a0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 1523 : 		}
; 1524 : 	}
; 1525 : 	else 
; 1526 : #endif
; 1527 : 		pattern(a0, ANM_NOMAL_SPD, ANM_LOOP);		//???

  001a3	6a 00		 push	 0
  001a5	83 e8 40	 sub	 eax, 64			; 00000040H
  001a8	6a 00		 push	 0
  001aa	57		 push	 edi
  001ab	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  001ae	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b6	5f		 pop	 edi

; 1528 : }

  001b7	5e		 pop	 esi
  001b8	5d		 pop	 ebp
  001b9	c3		 ret	 0
$LN34@katino:

; 1486 : 	{
; 1487 : 		ATR_H_POS(a0) = ATR_H_POS(a1) + 10;

  001ba	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  001bd	83 c0 0a	 add	 eax, 10			; 0000000aH
  001c0	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 1488 : 		ATR_V_POS(a0) = ATR_V_POS(a1) + 10;

  001c3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001c6	83 c0 0a	 add	 eax, 10			; 0000000aH
  001c9	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  001cc	8b c1		 mov	 eax, ecx
  001ce	e9 66 ff ff ff	 jmp	 $LN58@katino
$LN37@katino:

; 1503 : 	{
; 1504 : 		// Âä®ÁîªÊí≠ÊîæÂÆå‰∫Ü,Ê∏ÖÈô§Âä®Áîª
; 1505 : 		if (pattern(a0, ANM_NOMAL_SPD, ANM_NO_LOOP))

  001d3	6a 01		 push	 1
  001d5	6a 00		 push	 0
  001d7	57		 push	 edi
  001d8	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  001dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e0	85 c0		 test	 eax, eax
  001e2	0f 84 a8 00 00
	00		 je	 $LN36@katino

; 1506 : 		{
; 1507 : 			ATR_JUJUTSU_WORK(a1) = NULL;

  001e8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 1508 : 			DeathAction(a0);

  001eb	57		 push	 edi
  001ec	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0
  001f6	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  001fb	83 c4 04	 add	 esp, 4

; 1509 : 			if (ATR_CHR_ACT(a1) == ANIM_DEAD && ATR_CHR_NO(a1) == 101813)

  001fe	83 be 4c 01 00
	00 02		 cmp	 DWORD PTR [esi+332], 2
  00205	75 2a		 jne	 SHORT $LN41@katino
  00207	8b 86 44 01 00
	00		 mov	 eax, DWORD PTR [esi+324]
  0020d	3d b5 8d 01 00	 cmp	 eax, 101813		; 00018db5H
  00212	75 0c		 jne	 SHORT $LN50@katino

; 1510 : 				ATR_CHR_NO(a1) = 101814;

  00214	c7 86 44 01 00
	00 b6 8d 01 00	 mov	 DWORD PTR [esi+324], 101814 ; 00018db6H
  0021e	eb 11		 jmp	 SHORT $LN41@katino
$LN50@katino:

; 1511 : 			else if (ATR_CHR_ACT(a1) == ANIM_DEAD && ATR_CHR_NO(a1) == 101814)

  00220	3d b6 8d 01 00	 cmp	 eax, 101814		; 00018db6H
  00225	75 0a		 jne	 SHORT $LN41@katino

; 1512 : 				ATR_CHR_NO(a1) = 101815;

  00227	c7 86 44 01 00
	00 b7 8d 01 00	 mov	 DWORD PTR [esi+324], 101815 ; 00018db7H
$LN41@katino:

; 1513 : 			ATR_VCT_NO(a1) = 0;

  00231	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 1514 : 			int i;
; 1515 : 			for (i = 0; i < BATTLKPKPLYAERNUM; i++)

  00234	33 c9		 xor	 ecx, ecx
  00236	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1516 : 			{
; 1517 : 				// ÊâæÂá∫Èõ∑Â∞îÂú®ÈÇ£‰∏ÄËæπ
; 1518 : 				if (ATR_CHR_NO(p_party[i]) == ATR_CHR_NO(a1))

  00239	8b 96 44 01 00
	00		 mov	 edx, DWORD PTR [esi+324]
  0023f	90		 npad	 1
$LL4@katino:
  00240	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  00247	39 90 44 01 00
	00		 cmp	 DWORD PTR [eax+324], edx
  0024d	74 06		 je	 SHORT $LN45@katino

; 1514 : 			int i;
; 1515 : 			for (i = 0; i < BATTLKPKPLYAERNUM; i++)

  0024f	41		 inc	 ecx
  00250	83 f9 14	 cmp	 ecx, 20			; 00000014H
  00253	7c eb		 jl	 SHORT $LL4@katino
$LN45@katino:

; 1519 : 					break;
; 1520 : 			}
; 1521 : 			a1->dir = ATR_CHR_ANG(a1) = i < 10 ? 3:7;

  00255	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00258	5f		 pop	 edi
  00259	1b c0		 sbb	 eax, eax
  0025b	83 e0 fc	 and	 eax, -4			; fffffffcH
  0025e	83 c0 07	 add	 eax, 7
  00261	89 86 54 01 00
	00		 mov	 DWORD PTR [esi+340], eax
  00267	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 1522 : 			ATR_CRS(a1) = crs_change_tbl2[ATR_CHR_ANG(a1)];

  0026a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  00271	89 86 38 01 00
	00		 mov	 DWORD PTR [esi+312], eax

; 1528 : }

  00277	5e		 pop	 esi
  00278	5d		 pop	 ebp
  00279	c3		 ret	 0
$LN6@katino:

; 1445 : 		ATR_JUJUTSU_WORK(a1) = NULL;

  0027a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 1446 : 		DeathAction(a0);

  0027d	57		 push	 edi
  0027e	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0
  00288	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0028d	83 c4 04	 add	 esp, 4
$LN36@katino:

; 1528 : }

  00290	5f		 pop	 edi
  00291	5e		 pop	 esi
  00292	5d		 pop	 ebp
  00293	c3		 ret	 0
?katino@@YAXPAUaction@@@Z ENDP				; katino
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?LogToBattleError@@YAXPADH@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_line$ = 12						; size = 4
?LogToBattleError@@YAXPADH@Z PROC			; LogToBattleError, COMDAT

; 12507: #ifdef _STONDEBUG_
; 12508: 	FILE *rfp;
; 12509: 	rfp = fopen("battleerror.txt", "a+");
; 12510: 	if (rfp)
; 12511: 	{
; 12512: 		fprintf(rfp, "%d: %s\n", line, data);
; 12513: 		fclose(rfp);
; 12514: 	}
; 12515: #endif
; 12516: }

  00000	c2 00 00	 ret	 0
?LogToBattleError@@YAXPADH@Z ENDP			; LogToBattleError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?petrideChangeGraph@@YAXPAUaction@@H@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
_ridebmp$ = 12						; size = 4
?petrideChangeGraph@@YAXPAUaction@@H@Z PROC		; petrideChangeGraph, COMDAT

; 12486: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 12487: 	//andy_fall
; 12488: 	//if (ATR_PETFALL(a0) != 2)
; 12489: 	//	return;
; 12490: 	//if (ATR_RIDE(a0) != 0)
; 12491: 	//	return;
; 12492: 
; 12493: 	//if( a0->saveride == -1 )
; 12494: 	//	return;
; 12495: 
; 12496: 	ATR_CHR_NO(a0) = ridebmp;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _a0$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _ridebmp$[ebp]
  00009	89 81 44 01 00
	00		 mov	 DWORD PTR [ecx+324], eax

; 12497: 
; 12498: 	ATR_PETFALL(a0) = 0;
; 12499: 	//andy_fall
; 12500: 	ATR_RIDE(a0) = 1;
; 12501: 	ATR_RIDE_FLAG(a0) = 1;

  0000f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00012	c7 81 bc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+444], 0
  0001c	c7 81 94 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+404], 1
  00026	c7 80 2c 02 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+556], 1

; 12502: }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?petrideChangeGraph@@YAXPAUaction@@H@Z ENDP		; petrideChangeGraph
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\oft\oft.cpp
;	COMDAT ?petfallChangeGraph@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?petfallChangeGraph@@YAXPAUaction@@@Z PROC		; petfallChangeGraph, COMDAT

; 12460: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 12461: 	//andy_fall
; 12462: 	if (ATR_PETFALL(a0) != 1)

  00003	8b 55 08	 mov	 edx, DWORD PTR _a0$[ebp]
  00006	83 ba bc 01 00
	00 01		 cmp	 DWORD PTR [edx+444], 1
  0000d	75 56		 jne	 SHORT $LN1@petfallCha

; 12463: 		return;
; 12464: 	if (ATR_RIDE(a0) != 1)

  0000f	83 ba 94 01 00
	00 01		 cmp	 DWORD PTR [edx+404], 1
  00016	75 4d		 jne	 SHORT $LN1@petfallCha

; 12465: 		return;
; 12466: 
; 12467: #ifdef _PETSKILL_RIDE
; 12468: 	a0->saveride = ATR_CHR_NO(a0);

  00018	56		 push	 esi
  00019	8b b2 44 01 00
	00		 mov	 esi, DWORD PTR [edx+324]

; 12469: #endif
; 12470: 
; 12471: 	for (int j = 0; j < sizeof(ridePetTable) / sizeof(tagRidePetTable); j++)

  0001f	33 c0		 xor	 eax, eax
  00021	89 b2 30 02 00
	00		 mov	 DWORD PTR [edx+560], esi
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?ridePetTable@@3PAUtagRidePetTable@@A
  0002c	0f 1f 40 00	 npad	 4
$LL4@petfallCha:

; 12472: 	{
; 12473: 		if (ridePetTable[j].rideNo == ATR_CHR_NO(a0))

  00030	39 31		 cmp	 DWORD PTR [ecx], esi
  00032	74 0d		 je	 SHORT $LN10@petfallCha

; 12469: #endif
; 12470: 
; 12471: 	for (int j = 0; j < sizeof(ridePetTable) / sizeof(tagRidePetTable); j++)

  00034	40		 inc	 eax
  00035	83 c1 10	 add	 ecx, 16			; 00000010H
  00038	3d 92 00 00 00	 cmp	 eax, 146		; 00000092H
  0003d	72 f1		 jb	 SHORT $LL4@petfallCha

; 12472: 	{
; 12473: 		if (ridePetTable[j].rideNo == ATR_CHR_NO(a0))

  0003f	eb 0f		 jmp	 SHORT $LN3@petfallCha
$LN10@petfallCha:

; 12474: 		{
; 12475: 			ATR_CHR_NO(a0) = ridePetTable[j].charNo;

  00041	c1 e0 04	 shl	 eax, 4
  00044	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?ridePetTable@@3PAUtagRidePetTable@@A[eax+4]
  0004a	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax
$LN3@petfallCha:

; 12476: 			break;
; 12477: 		}
; 12478: 	}
; 12479: 	ATR_PETFALL(a0) = 2;

  00050	c7 82 bc 01 00
	00 02 00 00 00	 mov	 DWORD PTR [edx+444], 2

; 12480: 	//andy_fall
; 12481: 	ATR_RIDE(a0) = 0;

  0005a	c7 82 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+404], 0
  00064	5e		 pop	 esi
$LN1@petfallCha:

; 12482: }

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?petfallChangeGraph@@YAXPAUaction@@@Z ENDP		; petfallChangeGraph
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
