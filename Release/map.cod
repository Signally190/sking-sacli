; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	\\VBOXSVR\_stoneage\repos\ssm-sacli\Release\map.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?nowFloorName@@3PADA				; nowFloorName
PUBLIC	?nowFloor@@3HA					; nowFloor
PUBLIC	?nowFloorGxSize@@3HA				; nowFloorGxSize
PUBLIC	?nowFloorGySize@@3HA				; nowFloorGySize
PUBLIC	?nowGx@@3HA					; nowGx
PUBLIC	?nowGy@@3HA					; nowGy
PUBLIC	?nowVx@@3MA					; nowVx
PUBLIC	?nowVy@@3MA					; nowVy
PUBLIC	?nowSpdRate@@3MA				; nowSpdRate
PUBLIC	?nextGx@@3HA					; nextGx
PUBLIC	?nextGy@@3HA					; nextGy
PUBLIC	?oldGx@@3HA					; oldGx
PUBLIC	?oldGy@@3HA					; oldGy
PUBLIC	?oldNextGx@@3HA					; oldNextGx
PUBLIC	?oldNextGy@@3HA					; oldNextGy
PUBLIC	?mouseMapGx@@3HA				; mouseMapGx
PUBLIC	?mouseMapGy@@3HA				; mouseMapGy
PUBLIC	?mouseMapX@@3HA					; mouseMapX
PUBLIC	?mouseMapY@@3HA					; mouseMapY
PUBLIC	?moveRouteCnt@@3FA				; moveRouteCnt
PUBLIC	?mapEmptyFlag@@3HA				; mapEmptyFlag
PUBLIC	?viewPointX@@3MA				; viewPointX
PUBLIC	?viewPointY@@3MA				; viewPointY
PUBLIC	?moveAddTbl@@3PAY01FA				; moveAddTbl
PUBLIC	?mouseLeftCrick@@3HA				; mouseLeftCrick
PUBLIC	?mouseLeftOn@@3HA				; mouseLeftOn
PUBLIC	?mouseRightCrick@@3HA				; mouseRightCrick
PUBLIC	?mouseRightOn@@3HA				; mouseRightOn
PUBLIC	?mouseDblRightOn@@3HA				; mouseDblRightOn
PUBLIC	?mouseLeftPushTime@@3IA				; mouseLeftPushTime
PUBLIC	?beforeMouseLeftPushTime@@3IA			; beforeMouseLeftPushTime
PUBLIC	?nowEncountPercentage@@3FA			; nowEncountPercentage
PUBLIC	?nowEncountExtra@@3FA				; nowEncountExtra
PUBLIC	?minEncountPercentage@@3FA			; minEncountPercentage
PUBLIC	?maxEncountPercentage@@3FA			; maxEncountPercentage
PUBLIC	?sendEnFlag@@3FA				; sendEnFlag
PUBLIC	?encountNowFlag@@3FA				; encountNowFlag
PUBLIC	?eventWarpSendFlag@@3FA				; eventWarpSendFlag
PUBLIC	?eventWarpSendId@@3FA				; eventWarpSendId
PUBLIC	?eventEnemySendFlag@@3FA			; eventEnemySendFlag
PUBLIC	?eventEnemySendId@@3FA				; eventEnemySendId
PUBLIC	?eventEnemyFlag@@3FA				; eventEnemyFlag
PUBLIC	?loginFlag@@3HA					; loginFlag
PUBLIC	?vsLookFlag@@3FA				; vsLookFlag
PUBLIC	?floorChangeFlag@@3HA				; floorChangeFlag
PUBLIC	?warpEffectFlag@@3HA				; warpEffectFlag
PUBLIC	?warpEffectStart@@3HA				; warpEffectStart
PUBLIC	?warpEffectOk@@3HA				; warpEffectOk
PUBLIC	?transmigrationEffectFlag@@3HA			; transmigrationEffectFlag
PUBLIC	?transEffectPaletteStatus@@3HA			; transEffectPaletteStatus
PUBLIC	?useBufMapEffect@@3PAU_MAP_EFFECT@@A		; useBufMapEffect
PUBLIC	?mapEffectRainLevel@@3FA			; mapEffectRainLevel
PUBLIC	?oldMapEffectRainLevel@@3FA			; oldMapEffectRainLevel
PUBLIC	?mapEffectSnowLevel@@3FA			; mapEffectSnowLevel
PUBLIC	?oldMapEffectSnowLevel@@3FA			; oldMapEffectSnowLevel
PUBLIC	?mapEffectMoveDir@@3FA				; mapEffectMoveDir
PUBLIC	?mapEffectKamiFubukiLevel@@3FA			; mapEffectKamiFubukiLevel
PUBLIC	?mapEffectHalloween@@3HA			; mapEffectHalloween
PUBLIC	?fastDrawTile@@3FB				; fastDrawTile
PUBLIC	?fastDrawTileFlag@@3FA				; fastDrawTileFlag
PUBLIC	?amountXFastDraw@@3HA				; amountXFastDraw
PUBLIC	?amountYFastDraw@@3HA				; amountYFastDraw
PUBLIC	?nowXFastDraw@@3HA				; nowXFastDraw
PUBLIC	?nowYFastDraw@@3HA				; nowYFastDraw
PUBLIC	?baseXFastDraw@@3HA				; baseXFastDraw
PUBLIC	?baseYFastDraw@@3HA				; baseYFastDraw
PUBLIC	?amountXFastDraw2@@3HA				; amountXFastDraw2
PUBLIC	?amountYFastDraw2@@3HA				; amountYFastDraw2
PUBLIC	?nowXFastDraw2@@3HA				; nowXFastDraw2
PUBLIC	?nowYFastDraw2@@3HA				; nowYFastDraw2
PUBLIC	?baseXFastDraw2@@3HA				; baseXFastDraw2
PUBLIC	?baseYFastDraw2@@3HA				; baseYFastDraw2
PUBLIC	?ITEMPATHFLAG@@3HA				; ITEMPATHFLAG
PUBLIC	?mouseCursorMode@@3FA				; mouseCursorMode
PUBLIC	?mapAreaX1@@3HA					; mapAreaX1
PUBLIC	?mapAreaY1@@3HA					; mapAreaY1
PUBLIC	?mapAreaX2@@3HA					; mapAreaX2
PUBLIC	?mapAreaY2@@3HA					; mapAreaY2
PUBLIC	?mapAreaWidth@@3HA				; mapAreaWidth
PUBLIC	?mapAreaHeight@@3HA				; mapAreaHeight
PUBLIC	?tile@@3PAGA					; tile
PUBLIC	?parts@@3PAGA					; parts
PUBLIC	?event@@3PAGA					; event
PUBLIC	?hitMap@@3PAGA					; hitMap
PUBLIC	?mapEmptyDir@@3FA				; mapEmptyDir
PUBLIC	?mapEmptyGx@@3HA				; mapEmptyGx
PUBLIC	?mapEmptyGy@@3HA				; mapEmptyGy
PUBLIC	?getMapAreaX1@@3PAFA				; getMapAreaX1
PUBLIC	?getMapAreaY1@@3PAFA				; getMapAreaY1
PUBLIC	?getMapAreaX2@@3PAFA				; getMapAreaX2
PUBLIC	?getMapAreaY2@@3PAFA				; getMapAreaY2
PUBLIC	?getMapAreaCnt@@3FA				; getMapAreaCnt
PUBLIC	?mapEmptyStartTime@@3IA				; mapEmptyStartTime
PUBLIC	?moveStackFlag@@3HA				; moveStackFlag
PUBLIC	?moveStackGx@@3HA				; moveStackGx
PUBLIC	?moveStackGy@@3HA				; moveStackGy
PUBLIC	?moveRoute@@3PAFA				; moveRoute
PUBLIC	?moveRouteGx@@3PAFA				; moveRouteGx
PUBLIC	?moveRouteGy@@3PAFA				; moveRouteGy
PUBLIC	?moveRouteDir@@3PADA				; moveRouteDir
PUBLIC	?moveRouteCnt2@@3FA				; moveRouteCnt2
PUBLIC	?moveRoute2@@3PAFA				; moveRoute2
PUBLIC	?moveLastDir@@3FA				; moveLastDir
PUBLIC	?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A	; charPrioBufTop
PUBLIC	?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A	; charPrioBuf
PUBLIC	?charPrioCnt@@3HA				; charPrioCnt
PUBLIC	?eventId@@3HA					; eventId
PUBLIC	?etcEventFlag@@3FA				; etcEventFlag
PUBLIC	?autoMappingInitFlag@@3HA			; autoMappingInitFlag
PUBLIC	?autoMappingBuf@@3PAY0DG@EA			; autoMappingBuf
PUBLIC	?transEffectPaletteAfterWaitTime@@3IA		; transEffectPaletteAfterWaitTime
PUBLIC	?g_bTradesystemOpen@@3_NA			; g_bTradesystemOpen
PUBLIC	?_encountFlag@@3FA				; _encountFlag
PUBLIC	?_warpEventFlag@@3FA				; _warpEventFlag
PUBLIC	?_enemyEventFlag@@3FA				; _enemyEventFlag
PUBLIC	?_enemyEventDir@@3HA				; _enemyEventDir
PUBLIC	?justGoalFlag@@3FA				; justGoalFlag
PUBLIC	?_partyTbl@@3PAFA				; _partyTbl
PUBLIC	?fastWalkFlag@@3HA				; fastWalkFlag
PUBLIC	?_etcEventFlag@@3HA				; _etcEventFlag
PUBLIC	?_etcEventStep@@3FA				; _etcEventStep
PUBLIC	?_etcEventMode@@3FA				; _etcEventMode
PUBLIC	?_eventWarpNo@@3FA				; _eventWarpNo
PUBLIC	?masterBufMapEffect@@3PAU_MAP_EFFECT@@A		; masterBufMapEffect
PUBLIC	?emptyBufMapEffect@@3PAU_MAP_EFFECT@@A		; emptyBufMapEffect
PUBLIC	?mapEffectDrawFlag@@3FA				; mapEffectDrawFlag
PUBLIC	?mapEffectRainCnt@@3FA				; mapEffectRainCnt
PUBLIC	?mapEffectSnowCnt@@3FA				; mapEffectSnowCnt
PUBLIC	?mapEffectStarFlag@@3FA				; mapEffectStarFlag
PUBLIC	?mapEffectFallingStarFlag@@3FA			; mapEffectFallingStarFlag
PUBLIC	?mapEffectFallingStarTime@@3HA			; mapEffectFallingStarTime
PUBLIC	?mapEffectKamiFubukiCnt@@3FA			; mapEffectKamiFubukiCnt
_BSS	SEGMENT
?nowFloorName@@3PADA DB 019H DUP (?)			; nowFloorName
	ALIGN	4

?nowFloor@@3HA DD 01H DUP (?)				; nowFloor
?nowFloorGxSize@@3HA DD 01H DUP (?)			; nowFloorGxSize
?nowFloorGySize@@3HA DD 01H DUP (?)			; nowFloorGySize
?nowGx@@3HA DD	01H DUP (?)				; nowGx
?nowGy@@3HA DD	01H DUP (?)				; nowGy
?nowVx@@3MA DD	01H DUP (?)				; nowVx
?nowVy@@3MA DD	01H DUP (?)				; nowVy
?nowSpdRate@@3MA DD 01H DUP (?)				; nowSpdRate
?nextGx@@3HA DD	01H DUP (?)				; nextGx
?nextGy@@3HA DD	01H DUP (?)				; nextGy
?mouseMapGx@@3HA DD 01H DUP (?)				; mouseMapGx
?mouseMapGy@@3HA DD 01H DUP (?)				; mouseMapGy
?mouseMapX@@3HA DD 01H DUP (?)				; mouseMapX
?mouseMapY@@3HA DD 01H DUP (?)				; mouseMapY
?moveRouteCnt@@3FA DW 01H DUP (?)			; moveRouteCnt
	ALIGN	4

?mapEmptyFlag@@3HA DD 01H DUP (?)			; mapEmptyFlag
?viewPointX@@3MA DD 01H DUP (?)				; viewPointX
?viewPointY@@3MA DD 01H DUP (?)				; viewPointY
?mouseLeftCrick@@3HA DD 01H DUP (?)			; mouseLeftCrick
?mouseLeftOn@@3HA DD 01H DUP (?)			; mouseLeftOn
?mouseRightCrick@@3HA DD 01H DUP (?)			; mouseRightCrick
?mouseRightOn@@3HA DD 01H DUP (?)			; mouseRightOn
?mouseDblRightOn@@3HA DD 01H DUP (?)			; mouseDblRightOn
?mouseLeftPushTime@@3IA DD 01H DUP (?)			; mouseLeftPushTime
?beforeMouseLeftPushTime@@3IA DD 01H DUP (?)		; beforeMouseLeftPushTime
?nowEncountPercentage@@3FA DW 01H DUP (?)		; nowEncountPercentage
	ALIGN	4

?nowEncountExtra@@3FA DW 01H DUP (?)			; nowEncountExtra
	ALIGN	4

?minEncountPercentage@@3FA DW 01H DUP (?)		; minEncountPercentage
	ALIGN	4

?maxEncountPercentage@@3FA DW 01H DUP (?)		; maxEncountPercentage
	ALIGN	4

?sendEnFlag@@3FA DW 01H DUP (?)				; sendEnFlag
	ALIGN	4

?encountNowFlag@@3FA DW 01H DUP (?)			; encountNowFlag
	ALIGN	4

?eventWarpSendFlag@@3FA DW 01H DUP (?)			; eventWarpSendFlag
	ALIGN	4

?eventWarpSendId@@3FA DW 01H DUP (?)			; eventWarpSendId
	ALIGN	4

?eventEnemySendFlag@@3FA DW 01H DUP (?)			; eventEnemySendFlag
	ALIGN	4

?eventEnemySendId@@3FA DW 01H DUP (?)			; eventEnemySendId
	ALIGN	4

?eventEnemyFlag@@3FA DW 01H DUP (?)			; eventEnemyFlag
	ALIGN	4

?loginFlag@@3HA DD 01H DUP (?)				; loginFlag
?vsLookFlag@@3FA DW 01H DUP (?)				; vsLookFlag
	ALIGN	4

?floorChangeFlag@@3HA DD 01H DUP (?)			; floorChangeFlag
?warpEffectFlag@@3HA DD 01H DUP (?)			; warpEffectFlag
?warpEffectStart@@3HA DD 01H DUP (?)			; warpEffectStart
?warpEffectOk@@3HA DD 01H DUP (?)			; warpEffectOk
?transmigrationEffectFlag@@3HA DD 01H DUP (?)		; transmigrationEffectFlag
?transEffectPaletteStatus@@3HA DD 01H DUP (?)		; transEffectPaletteStatus
?useBufMapEffect@@3PAU_MAP_EFFECT@@A DD 01H DUP (?)	; useBufMapEffect
?mapEffectRainLevel@@3FA DW 01H DUP (?)			; mapEffectRainLevel
	ALIGN	4

?oldMapEffectRainLevel@@3FA DW 01H DUP (?)		; oldMapEffectRainLevel
	ALIGN	4

?mapEffectSnowLevel@@3FA DW 01H DUP (?)			; mapEffectSnowLevel
	ALIGN	4

?oldMapEffectSnowLevel@@3FA DW 01H DUP (?)		; oldMapEffectSnowLevel
	ALIGN	4

?mapEffectKamiFubukiLevel@@3FA DW 01H DUP (?)		; mapEffectKamiFubukiLevel
	ALIGN	4

?mapEffectHalloween@@3HA DD 01H DUP (?)			; mapEffectHalloween
?amountXFastDraw@@3HA DD 01H DUP (?)			; amountXFastDraw
?amountYFastDraw@@3HA DD 01H DUP (?)			; amountYFastDraw
?nowXFastDraw@@3HA DD 01H DUP (?)			; nowXFastDraw
?nowYFastDraw@@3HA DD 01H DUP (?)			; nowYFastDraw
?baseXFastDraw@@3HA DD 01H DUP (?)			; baseXFastDraw
?baseYFastDraw@@3HA DD 01H DUP (?)			; baseYFastDraw
?amountXFastDraw2@@3HA DD 01H DUP (?)			; amountXFastDraw2
?amountYFastDraw2@@3HA DD 01H DUP (?)			; amountYFastDraw2
?nowXFastDraw2@@3HA DD 01H DUP (?)			; nowXFastDraw2
?nowYFastDraw2@@3HA DD 01H DUP (?)			; nowYFastDraw2
?baseXFastDraw2@@3HA DD 01H DUP (?)			; baseXFastDraw2
?baseYFastDraw2@@3HA DD 01H DUP (?)			; baseYFastDraw2
?ITEMPATHFLAG@@3HA DD 01H DUP (?)			; ITEMPATHFLAG
?mouseCursorMode@@3FA DW 01H DUP (?)			; mouseCursorMode
	ALIGN	4

?mapAreaX1@@3HA DD 01H DUP (?)				; mapAreaX1
?mapAreaY1@@3HA DD 01H DUP (?)				; mapAreaY1
?mapAreaX2@@3HA DD 01H DUP (?)				; mapAreaX2
?mapAreaY2@@3HA DD 01H DUP (?)				; mapAreaY2
?mapAreaWidth@@3HA DD 01H DUP (?)			; mapAreaWidth
?mapAreaHeight@@3HA DD 01H DUP (?)			; mapAreaHeight
?tile@@3PAGA DW	0559H DUP (?)				; tile
	ALIGN	4

?parts@@3PAGA DW 0559H DUP (?)				; parts
	ALIGN	4

?event@@3PAGA DW 0559H DUP (?)				; event
	ALIGN	4

?hitMap@@3PAGA DW 0559H DUP (?)				; hitMap
	ALIGN	4

?mapEmptyDir@@3FA DW 01H DUP (?)			; mapEmptyDir
	ALIGN	4

?mapEmptyGx@@3HA DD 01H DUP (?)				; mapEmptyGx
?mapEmptyGy@@3HA DD 01H DUP (?)				; mapEmptyGy
?getMapAreaX1@@3PAFA DW 02H DUP (?)			; getMapAreaX1
?getMapAreaY1@@3PAFA DW 02H DUP (?)			; getMapAreaY1
?getMapAreaX2@@3PAFA DW 02H DUP (?)			; getMapAreaX2
?getMapAreaY2@@3PAFA DW 02H DUP (?)			; getMapAreaY2
?getMapAreaCnt@@3FA DW 01H DUP (?)			; getMapAreaCnt
	ALIGN	4

?mapEmptyStartTime@@3IA DD 01H DUP (?)			; mapEmptyStartTime
?moveStackFlag@@3HA DD 01H DUP (?)			; moveStackFlag
?moveStackGx@@3HA DD 01H DUP (?)			; moveStackGx
?moveStackGy@@3HA DD 01H DUP (?)			; moveStackGy
?moveRoute@@3PAFA DW 064H DUP (?)			; moveRoute
?moveRouteGx@@3PAFA DW 064H DUP (?)			; moveRouteGx
?moveRouteGy@@3PAFA DW 064H DUP (?)			; moveRouteGy
?moveRouteDir@@3PADA DB 064H DUP (?)			; moveRouteDir
?moveRouteCnt2@@3FA DW 01H DUP (?)			; moveRouteCnt2
	ALIGN	4

?moveRoute2@@3PAFA DW 01H DUP (?)			; moveRoute2
	ALIGN	4

?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A DB 02cH DUP (?) ; charPrioBufTop
?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A DB 016000H DUP (?) ; charPrioBuf
?charPrioCnt@@3HA DD 01H DUP (?)			; charPrioCnt
?eventId@@3HA DD 01H DUP (?)				; eventId
?etcEventFlag@@3FA DW 01H DUP (?)			; etcEventFlag
	ALIGN	4

?autoMappingBuf@@3PAY0DG@EA DB 0b64H DUP (?)		; autoMappingBuf
?transEffectPaletteAfterWaitTime@@3IA DD 01H DUP (?)	; transEffectPaletteAfterWaitTime
?g_bTradesystemOpen@@3_NA DB 01H DUP (?)		; g_bTradesystemOpen
	ALIGN	4

?_encountFlag@@3FA DW 01H DUP (?)			; _encountFlag
	ALIGN	4

?_warpEventFlag@@3FA DW 01H DUP (?)			; _warpEventFlag
	ALIGN	4

?_enemyEventFlag@@3FA DW 01H DUP (?)			; _enemyEventFlag
	ALIGN	4

?_enemyEventDir@@3HA DD 01H DUP (?)			; _enemyEventDir
?justGoalFlag@@3FA DW 01H DUP (?)			; justGoalFlag
	ALIGN	4

?_partyTbl@@3PAFA DW 05H DUP (?)			; _partyTbl
	ALIGN	4

?_etcEventFlag@@3HA DD 01H DUP (?)			; _etcEventFlag
?_etcEventStep@@3FA DW 01H DUP (?)			; _etcEventStep
	ALIGN	4

?_etcEventMode@@3FA DW 01H DUP (?)			; _etcEventMode
	ALIGN	4

?_eventWarpNo@@3FA DW 01H DUP (?)			; _eventWarpNo
	ALIGN	4

?masterBufMapEffect@@3PAU_MAP_EFFECT@@A DB 08ca0H DUP (?) ; masterBufMapEffect
?emptyBufMapEffect@@3PAU_MAP_EFFECT@@A DD 01H DUP (?)	; emptyBufMapEffect
?mapEffectDrawFlag@@3FA DW 01H DUP (?)			; mapEffectDrawFlag
	ALIGN	4

?mapEffectRainCnt@@3FA DW 01H DUP (?)			; mapEffectRainCnt
	ALIGN	4

?mapEffectSnowCnt@@3FA DW 01H DUP (?)			; mapEffectSnowCnt
	ALIGN	4

?mapEffectStarFlag@@3FA DW 01H DUP (?)			; mapEffectStarFlag
	ALIGN	4

?mapEffectFallingStarFlag@@3FA DW 01H DUP (?)		; mapEffectFallingStarFlag
	ALIGN	4

?mapEffectFallingStarTime@@3HA DD 01H DUP (?)		; mapEffectFallingStarTime
?mapEffectKamiFubukiCnt@@3FA DW 01H DUP (?)		; mapEffectKamiFubukiCnt
_BSS	ENDS
CONST	SEGMENT
?fastDrawTile@@3FB DW 01H				; fastDrawTile
CONST	ENDS
_DATA	SEGMENT
?oldGx@@3HA DD	0ffffffffH				; oldGx
?oldGy@@3HA DD	0ffffffffH				; oldGy
?oldNextGx@@3HA DD 0ffffffffH				; oldNextGx
?oldNextGy@@3HA DD 0ffffffffH				; oldNextGy
?moveAddTbl@@3PAY01FA DW 0ffffH				; moveAddTbl
	DW	01H
	DW	0ffffH
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	0ffffH
	DW	01H
	DW	0ffffH
	DW	01H
	DW	00H
	DW	01H
	DW	01H
	DW	00H
	DW	01H
?mapEffectMoveDir@@3FA DW 0ffffH			; mapEffectMoveDir
	ORG $+2
?fastDrawTileFlag@@3FA DW 01H				; fastDrawTileFlag
	ORG $+2
?moveLastDir@@3FA DW 0ffffH				; moveLastDir
	ORG $+2
?autoMappingInitFlag@@3HA DD 01H			; autoMappingInitFlag
?fastWalkFlag@@3HA DD 075H				; fastWalkFlag
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?initMap@@YAXXZ					; initMap
PUBLIC	?resetMap@@YAXXZ				; resetMap
PUBLIC	?createMap@@YAXHHH@Z				; createMap
PUBLIC	?writeMap@@YAHHHHHHPAG00@Z			; writeMap
PUBLIC	?setMap@@YAXHHH@Z				; setMap
PUBLIC	?setWarpMap@@YAXHH@Z				; setWarpMap
PUBLIC	?mapCheckSum@@YAHHHHHHHHH@Z			; mapCheckSum
PUBLIC	?ddrawBattleMap@@YAXXZ				; ddrawBattleMap
PUBLIC	?drawMap@@YAXXZ					; drawMap
PUBLIC	?drawMap2@@YAXXZ				; drawMap2
PUBLIC	?drawTile@@YAXXZ				; drawTile
PUBLIC	?redrawMap@@YAXXZ				; redrawMap
PUBLIC	?drawGrid@@YAXXZ				; drawGrid
PUBLIC	?moveProc@@YAXXZ				; moveProc
PUBLIC	?checkEmptyMap@@YAHH@Z				; checkEmptyMap
PUBLIC	?setMapMovePoint@@YAXHH@Z			; setMapMovePoint
PUBLIC	?setMapMovePoint2@@YAXHH@Z			; setMapMovePoint2
PUBLIC	?mapMove2@@YAXXZ				; mapMove2
PUBLIC	?updateMapArea@@YAXXZ				; updateMapArea
PUBLIC	?getRouteData@@YAXHPAH0@Z			; getRouteData
PUBLIC	?cnvServDir@@YADHH@Z				; cnvServDir
PUBLIC	?goFrontPartyCharacter@@YAXHHH@Z		; goFrontPartyCharacter
PUBLIC	?initCharPartsPrio@@YAXXZ			; initCharPartsPrio
PUBLIC	?setPartsPrio@@YAXHHHHHMMH@Z			; setPartsPrio
PUBLIC	?setCharPrio@@YAXHHHHHMM@Z			; setCharPrio
PUBLIC	?stockCharParts@@YAXXZ				; stockCharParts
PUBLIC	?drawAutoMap@@YAXHH@Z				; drawAutoMap
PUBLIC	?checkHitMap@@YAHHH@Z				; checkHitMap
PUBLIC	?camMapToGamen@@YAXMMPAM0@Z			; camMapToGamen
PUBLIC	?camGamenToMap@@YAXMMPAM0@Z			; camGamenToMap
PUBLIC	?initMapEffect@@YAXH@Z				; initMapEffect
PUBLIC	?drawMapEffect@@YAXXZ				; drawMapEffect
PUBLIC	?mapEffectProc@@YAXXZ				; mapEffectProc
PUBLIC	?mapEffectRain@@YAXXZ				; mapEffectRain
PUBLIC	?mapEffectSnow@@YAXXZ				; mapEffectSnow
PUBLIC	?mapEffectStar@@YAXXZ				; mapEffectStar
PUBLIC	?mapEffectFallingStar@@YAXXZ			; mapEffectFallingStar
PUBLIC	?mapEffectKamiFubuki@@YAXXZ			; mapEffectKamiFubuki
PUBLIC	?mapEffectHalloweenProc@@YAXXZ			; mapEffectHalloweenProc
PUBLIC	?mapEffectProc2@@YAXH@Z				; mapEffectProc2
PUBLIC	?mapEffectRain2@@YAXH@Z				; mapEffectRain2
PUBLIC	?mapEffectSnow2@@YAXH@Z				; mapEffectSnow2
PUBLIC	?_checkEmptyMap@@YAXXZ				; _checkEmptyMap
PUBLIC	?onceMoveProc@@YAXXZ				; onceMoveProc
PUBLIC	?partyMoveProc@@YAXXZ				; partyMoveProc
PUBLIC	?getPartyTbl@@YAXXZ				; getPartyTbl
PUBLIC	?readMap@@YAHHHHHHPAG00@Z			; readMap
PUBLIC	?readHitMap@@YAXHHHHPAG000@Z			; readHitMap
PUBLIC	?getRouteMap@@YAXXZ				; getRouteMap
PUBLIC	?shiftRouteMap@@YAXXZ				; shiftRouteMap
PUBLIC	?shiftRouteMap2@@YAXXZ				; shiftRouteMap2
PUBLIC	?getDirData@@YAHHHHH@Z				; getDirData
PUBLIC	?checkAreaLimit@@YAXPAF000@Z			; checkAreaLimit
PUBLIC	?turnAround@@YAXXZ				; turnAround
PUBLIC	?turnAround2@@YAXH@Z				; turnAround2
PUBLIC	?checkPrioPartsVsChar@@YAHPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; checkPrioPartsVsChar
PUBLIC	?insertCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; insertCharPartsPrio
PUBLIC	?addCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; addCharPartsPrio
PUBLIC	?delCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@@Z ; delCharPartsPrio
PUBLIC	?createAutoMap@@YAHHHH@Z			; createAutoMap
PUBLIC	?setEventMemory@@YAXHHG@Z			; setEventMemory
PUBLIC	?sort_parts@@YAHPAUPARTS@@0@Z			; sort_parts
PUBLIC	?CheckCRC@@YAGPAEH@Z				; CheckCRC
PUBLIC	?_etcEventCheck@@YAXXZ				; _etcEventCheck
PUBLIC	?_execEtcEvent@@YAHXZ				; _execEtcEvent
PUBLIC	?_getMoveRoute2@@YAXXZ				; _getMoveRoute2
PUBLIC	?setPcMovePointToChar@@YAXHH@Z			; setPcMovePointToChar
PUBLIC	?setPartyMovePoint@@YAXXZ			; setPartyMovePoint
PUBLIC	?_mapMove@@YAXXZ				; _mapMove
PUBLIC	?_partyMapMove@@YAXXZ				; _partyMapMove
PUBLIC	?_setMapMovePoint@@YAXHH@Z			; _setMapMovePoint
PUBLIC	?_checkEncount@@YAHXZ				; _checkEncount
PUBLIC	?_sendEncount@@YAXXZ				; _sendEncount
PUBLIC	?_sendMoveRoute@@YAXXZ				; _sendMoveRoute
PUBLIC	?_checkWarpEvent@@YAHHH@Z			; _checkWarpEvent
PUBLIC	?_sendWarpEvent@@YAXXZ				; _sendWarpEvent
PUBLIC	?_checkEnemyEvent@@YAHHH@Z			; _checkEnemyEvent
PUBLIC	?_sendEnemyEvent@@YAXXZ				; _sendEnemyEvent
PUBLIC	?checkEmptyMapData@@YAHHHH@Z			; checkEmptyMapData
PUBLIC	?checkGridAround@@YAHHHHH@Z			; checkGridAround
PUBLIC	?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ		; getMapEffectBuf
PUBLIC	?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z		; delMapEffectBuf
PUBLIC	?mapEffectDirHosei@@YAXPAH0@Z			; mapEffectDirHosei
PUBLIC	?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z	; setEffectStar
PUBLIC	?calEffectStar@@YAXPAU_MAP_EFFECT@@@Z		; calEffectStar
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?nowX@@3MA					; nowX
PUBLIC	?nowY@@3MA					; nowY
PUBLIC	??_C@_0L@FCEGIJN@map?2?$CFd?4dat@		; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_03HBNNNHNM@map@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_03CCKOKKND@rb?$CL@			; `string'
PUBLIC	__real@3c800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f99999a
PUBLIC	__real@3faaaaab
PUBLIC	__real@3fcccccd
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@41b40000
PUBLIC	__real@41c00000
PUBLIC	__real@42000000
PUBLIC	__real@42340000
PUBLIC	__real@42800000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_fwrite:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_rand:PROC
EXTRN	__mkdir:PROC
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?DrawAutoMapping@@YAXHHPAEHH@Z:PROC		; DrawAutoMapping
EXTRN	?DrawMapEffect@@YAXXZ:PROC			; DrawMapEffect
EXTRN	?warpEffectProc@@YAXXZ:PROC			; warpEffectProc
EXTRN	?DeathAction@@YAXPAUaction@@@Z:PROC		; DeathAction
EXTRN	?SortDispBuffer@@YAXXZ:PROC			; SortDispBuffer
EXTRN	?StockDispBuffer@@YAHHHEHH@Z:PROC		; StockDispBuffer
EXTRN	?StockDispBuffer2@@YAHHHEHH@Z:PROC		; StockDispBuffer2
EXTRN	?AdjustDir@@YAXPAM@Z:PROC			; AdjustDir
EXTRN	?Atan@@YAMMM@Z:PROC				; Atan
EXTRN	?rand2@@YAHXZ:PROC				; rand2
EXTRN	?pointLen2@@YAMMMMM@Z:PROC			; pointLen2
EXTRN	?setPcPoint@@YAXXZ:PROC				; setPcPoint
EXTRN	?setPcDir@@YAXH@Z:PROC				; setPcDir
EXTRN	?setPcAction@@YAXH@Z:PROC			; setPcAction
EXTRN	?setPcWalkFlag@@YAXXZ:PROC			; setPcWalkFlag
EXTRN	?delPcWalkFlag@@YAXXZ:PROC			; delPcWalkFlag
EXTRN	?checkPcWalkFlag@@YAHXZ:PROC			; checkPcWalkFlag
EXTRN	?getItem@@YAXXZ:PROC				; getItem
EXTRN	?lookAtAround@@YAHXZ:PROC			; lookAtAround
EXTRN	?walkSendForServer@@YAXHHPAD@Z:PROC		; walkSendForServer
EXTRN	?charMove2@@YAXPAUaction@@@Z:PROC		; charMove2
EXTRN	?_charMove@@YAXPAUaction@@@Z:PROC		; _charMove
EXTRN	?shiftBufCount@@YAXPAUaction@@@Z:PROC		; shiftBufCount
EXTRN	?stockCharMovePoint@@YAXPAUaction@@HH@Z:PROC	; stockCharMovePoint
EXTRN	?setCharMovePoint@@YAXPAUaction@@HH@Z:PROC	; setCharMovePoint
EXTRN	?_setCharMovePoint@@YAXPAUaction@@HH@Z:PROC	; _setCharMovePoint
EXTRN	?realGetPos@@YAHKPAF0@Z:PROC			; realGetPos
EXTRN	?realGetWH@@YAHKPAF0@Z:PROC			; realGetWH
EXTRN	?realGetHitPoints@@YAHKPAF0@Z:PROC		; realGetHitPoints
EXTRN	?realGetHitFlag@@YAHKPAF@Z:PROC			; realGetHitFlag
EXTRN	?realGetPrioType@@YAHKPAF@Z:PROC		; realGetPrioType
EXTRN	?realGetNo@@YAHKPAK@Z:PROC			; realGetNo
EXTRN	?lssproto_EV_send@@YAXHHHHHH@Z:PROC		; lssproto_EV_send
EXTRN	?lssproto_EN_send@@YAXHHH@Z:PROC		; lssproto_EN_send
EXTRN	?lssproto_M_send@@YAXHHHHHH@Z:PROC		; lssproto_M_send
EXTRN	?old_lssproto_EV_send@@YAXHHHHHH@Z:PROC		; old_lssproto_EV_send
EXTRN	?old_lssproto_EN_send@@YAXHHH@Z:PROC		; old_lssproto_EN_send
EXTRN	?old_lssproto_M_send@@YAXHHHHHH@Z:PROC		; old_lssproto_M_send
EXTRN	?play_environment@@YAHHHH@Z:PROC		; play_environment
EXTRN	?play_map_bgm@@YAHH@Z:PROC			; play_map_bgm
EXTRN	?closeCharActionAnimeChange@@YAXXZ:PROC		; closeCharActionAnimeChange
EXTRN	?closeEtcSwitch@@YAXXZ:PROC			; closeEtcSwitch
EXTRN	?closeJoinChannelWN@@YAXXZ:PROC			; closeJoinChannelWN
EXTRN	?ReleaseSpecAnim@@YAXXZ:PROC			; ReleaseSpecAnim
EXTRN	?MakeAnimDisp@@YAPAUaction@@HHHH@Z:PROC		; MakeAnimDisp
EXTRN	?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z:PROC ; getLSTime
EXTRN	?crossAniRelease@@YAXXZ:PROC			; crossAniRelease
EXTRN	?TalkToNPC@@YAHXZ:PROC				; TalkToNPC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?DEF_APPSIZEX@@3HA:DWORD			; DEF_APPSIZEX
EXTRN	?DEF_APPSIZEY@@3HA:DWORD			; DEF_APPSIZEY
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?SubProcNo@@3IA:DWORD				; SubProcNo
EXTRN	?mouse@@3UMOUSE@@A:BYTE				; mouse
EXTRN	?HitDispNo@@3HA:DWORD				; HitDispNo
EXTRN	?viewOffsetX@@3HA:DWORD				; viewOffsetX
EXTRN	?viewOffsetY@@3HA:DWORD				; viewOffsetY
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?party@@3PAUPARTY@@A:BYTE			; party
EXTRN	?partyModeFlag@@3FA:WORD			; partyModeFlag
EXTRN	?autoMapColorTbl@@3PAEA:BYTE			; autoMapColorTbl
EXTRN	?sockfd@@3IA:DWORD				; sockfd
EXTRN	?bNewServer@@3HA:DWORD				; bNewServer
EXTRN	?EncountOffFlag@@3HA:DWORD			; EncountOffFlag
EXTRN	?draw_map_bgm_flg@@3HA:DWORD			; draw_map_bgm_flg
EXTRN	?map_bgm_no@@3HA:DWORD				; map_bgm_no
EXTRN	?etcSendFlag@@3FA:WORD				; etcSendFlag
EXTRN	?wnCloseFlag@@3FA:WORD				; wnCloseFlag
EXTRN	?MenuToggleFlag@@3IA:DWORD			; MenuToggleFlag
EXTRN	?MapWmdFlagBak@@3HA:DWORD			; MapWmdFlagBak
EXTRN	?BattleResultWndFlag@@3HA:DWORD			; BattleResultWndFlag
EXTRN	?SaTime@@3UtagLSTIME@@A:BYTE			; SaTime
EXTRN	?fMapBgm@@3HA:DWORD				; fMapBgm
EXTRN	?mapWndFontNo@@3PAHA:BYTE			; mapWndFontNo
EXTRN	?resultWndFontNo@@3PAHA:BYTE			; resultWndFontNo
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?nowX@@3MA DD	01H DUP (?)				; nowX
?nowY@@3MA DD	01H DUP (?)				; nowY
_BSS	ENDS
;	COMDAT ?turnSendTime@?1??turnAround@@YAXXZ@4IA
_BSS	SEGMENT
?turnSendTime@?1??turnAround@@YAXXZ@4IA DD 01H DUP (?)	; `turnAround'::`2'::turnSendTime
_BSS	ENDS
;	COMDAT ?turnSendTime@?1??turnAround2@@YAXH@Z@4IA
_BSS	SEGMENT
?turnSendTime@?1??turnAround2@@YAXH@Z@4IA DD 01H DUP (?) ; `turnAround2'::`2'::turnSendTime
_BSS	ENDS
;	COMDAT ?time@?1??mapEffectRain@@YAXXZ@4IA
_BSS	SEGMENT
?time@?1??mapEffectRain@@YAXXZ@4IA DD 01H DUP (?)	; `mapEffectRain'::`2'::time
_BSS	ENDS
;	COMDAT ?$TSS0@?1??mapEffectRain@@YAXXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??mapEffectRain@@YAXXZ@4HA DD 01H DUP (?)	; `mapEffectRain'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?time@?1??mapEffectSnow@@YAXXZ@4IA
_BSS	SEGMENT
?time@?1??mapEffectSnow@@YAXXZ@4IA DD 01H DUP (?)	; `mapEffectSnow'::`2'::time
_BSS	ENDS
;	COMDAT ?$TSS0@?1??mapEffectSnow@@YAXXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??mapEffectSnow@@YAXXZ@4HA DD 01H DUP (?)	; `mapEffectSnow'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A
_BSS	SEGMENT
?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A DD 01eH DUP (?) ; `mapEffectStar'::`2'::buf
_BSS	ENDS
;	COMDAT ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
_BSS	SEGMENT
?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A DD 01H DUP (?) ; `mapEffectFallingStar'::`2'::buf
_BSS	ENDS
;	COMDAT ?time@?1??mapEffectKamiFubuki@@YAXXZ@4IA
_BSS	SEGMENT
?time@?1??mapEffectKamiFubuki@@YAXXZ@4IA DD 01H DUP (?)	; `mapEffectKamiFubuki'::`2'::time
_BSS	ENDS
;	COMDAT ?$TSS0@?1??mapEffectKamiFubuki@@YAXXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??mapEffectKamiFubuki@@YAXXZ@4HA DD 01H DUP (?) ; `mapEffectKamiFubuki'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?time@?1??mapEffectHalloweenProc@@YAXXZ@4IA
_BSS	SEGMENT
?time@?1??mapEffectHalloweenProc@@YAXXZ@4IA DD 01H DUP (?) ; `mapEffectHalloweenProc'::`2'::time
_BSS	ENDS
;	COMDAT ?$TSS0@?1??mapEffectHalloweenProc@@YAXXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??mapEffectHalloweenProc@@YAXXZ@4HA DD 01H DUP (?) ; `mapEffectHalloweenProc'::`2'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
?nowX$initializer$@@3P6AXXZA DD FLAT:??__EnowX@@YAXXZ	; nowX$initializer$
CRT$XCU	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@41b40000
CONST	SEGMENT
__real@41b40000 DD 041b40000r			; 22.5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fcccccd
CONST	SEGMENT
__real@3fcccccd DD 03fcccccdr			; 1.6
CONST	ENDS
;	COMDAT __real@3faaaaab
CONST	SEGMENT
__real@3faaaaab DD 03faaaaabr			; 1.33333
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c800000
CONST	SEGMENT
__real@3c800000 DD 03c800000r			; 0.015625
CONST	ENDS
;	COMDAT ?befortime@?1??moveProc@@YAXXZ@4IA
_DATA	SEGMENT
?befortime@?1??moveProc@@YAXXZ@4IA DD 0ffffffffH	; `moveProc'::`2'::befortime
_DATA	ENDS
_DATA	SEGMENT
	ORG $+4
?BitTable@@3PAEA DB 00H					; BitTable
	DB	080H
	DB	040H
	DB	0c0H
	DB	020H
	DB	0a0H
	DB	060H
	DB	0e0H
	DB	010H
	DB	090H
	DB	050H
	DB	0d0H
	DB	030H
	DB	0b0H
	DB	070H
	DB	0f0H
	DB	08H
	DB	088H
	DB	048H
	DB	0c8H
	DB	028H
	DB	0a8H
	DB	068H
	DB	0e8H
	DB	018H
	DB	098H
	DB	058H
	DB	0d8H
	DB	038H
	DB	0b8H
	DB	078H
	DB	0f8H
	DB	04H
	DB	084H
	DB	044H
	DB	0c4H
	DB	024H
	DB	0a4H
	DB	064H
	DB	0e4H
	DB	014H
	DB	094H
	DB	054H
	DB	0d4H
	DB	034H
	DB	0b4H
	DB	074H
	DB	0f4H
	DB	0cH
	DB	08cH
	DB	04cH
	DB	0ccH
	DB	02cH
	DB	0acH
	DB	06cH
	DB	0ecH
	DB	01cH
	DB	09cH
	DB	05cH
	DB	0dcH
	DB	03cH
	DB	0bcH
	DB	07cH
	DB	0fcH
	DB	02H
	DB	082H
	DB	042H
	DB	0c2H
	DB	022H
	DB	0a2H
	DB	062H
	DB	0e2H
	DB	012H
	DB	092H
	DB	052H
	DB	0d2H
	DB	032H
	DB	0b2H
	DB	072H
	DB	0f2H
	DB	0aH
	DB	08aH
	DB	04aH
	DB	0caH
	DB	02aH
	DB	0aaH
	DB	06aH
	DB	0eaH
	DB	01aH
	DB	09aH
	DB	05aH
	DB	0daH
	DB	03aH
	DB	0baH
	DB	07aH
	DB	0faH
	DB	06H
	DB	086H
	DB	046H
	DB	0c6H
	DB	026H
	DB	0a6H
	DB	066H
	DB	0e6H
	DB	016H
	DB	096H
	DB	056H
	DB	0d6H
	DB	036H
	DB	0b6H
	DB	076H
	DB	0f6H
	DB	0eH
	DB	08eH
	DB	04eH
	DB	0ceH
	DB	02eH
	DB	0aeH
	DB	06eH
	DB	0eeH
	DB	01eH
	DB	09eH
	DB	05eH
	DB	0deH
	DB	03eH
	DB	0beH
	DB	07eH
	DB	0feH
	DB	01H
	DB	081H
	DB	041H
	DB	0c1H
	DB	021H
	DB	0a1H
	DB	061H
	DB	0e1H
	DB	011H
	DB	091H
	DB	051H
	DB	0d1H
	DB	031H
	DB	0b1H
	DB	071H
	DB	0f1H
	DB	09H
	DB	089H
	DB	049H
	DB	0c9H
	DB	029H
	DB	0a9H
	DB	069H
	DB	0e9H
	DB	019H
	DB	099H
	DB	059H
	DB	0d9H
	DB	039H
	DB	0b9H
	DB	079H
	DB	0f9H
	DB	05H
	DB	085H
	DB	045H
	DB	0c5H
	DB	025H
	DB	0a5H
	DB	065H
	DB	0e5H
	DB	015H
	DB	095H
	DB	055H
	DB	0d5H
	DB	035H
	DB	0b5H
	DB	075H
	DB	0f5H
	DB	0dH
	DB	08dH
	DB	04dH
	DB	0cdH
	DB	02dH
	DB	0adH
	DB	06dH
	DB	0edH
	DB	01dH
	DB	09dH
	DB	05dH
	DB	0ddH
	DB	03dH
	DB	0bdH
	DB	07dH
	DB	0fdH
	DB	03H
	DB	083H
	DB	043H
	DB	0c3H
	DB	023H
	DB	0a3H
	DB	063H
	DB	0e3H
	DB	013H
	DB	093H
	DB	053H
	DB	0d3H
	DB	033H
	DB	0b3H
	DB	073H
	DB	0f3H
	DB	0bH
	DB	08bH
	DB	04bH
	DB	0cbH
	DB	02bH
	DB	0abH
	DB	06bH
	DB	0ebH
	DB	01bH
	DB	09bH
	DB	05bH
	DB	0dbH
	DB	03bH
	DB	0bbH
	DB	07bH
	DB	0fbH
	DB	07H
	DB	087H
	DB	047H
	DB	0c7H
	DB	027H
	DB	0a7H
	DB	067H
	DB	0e7H
	DB	017H
	DB	097H
	DB	057H
	DB	0d7H
	DB	037H
	DB	0b7H
	DB	077H
	DB	0f7H
	DB	0fH
	DB	08fH
	DB	04fH
	DB	0cfH
	DB	02fH
	DB	0afH
	DB	06fH
	DB	0efH
	DB	01fH
	DB	09fH
	DB	05fH
	DB	0dfH
	DB	03fH
	DB	0bfH
	DB	07fH
	DB	0ffH
?crctab16@@3PAGA DW 00H					; crctab16
	DW	01021H
	DW	02042H
	DW	03063H
	DW	04084H
	DW	050a5H
	DW	060c6H
	DW	070e7H
	DW	08108H
	DW	09129H
	DW	0a14aH
	DW	0b16bH
	DW	0c18cH
	DW	0d1adH
	DW	0e1ceH
	DW	0f1efH
	DW	01231H
	DW	0210H
	DW	03273H
	DW	02252H
	DW	052b5H
	DW	04294H
	DW	072f7H
	DW	062d6H
	DW	09339H
	DW	08318H
	DW	0b37bH
	DW	0a35aH
	DW	0d3bdH
	DW	0c39cH
	DW	0f3ffH
	DW	0e3deH
	DW	02462H
	DW	03443H
	DW	0420H
	DW	01401H
	DW	064e6H
	DW	074c7H
	DW	044a4H
	DW	05485H
	DW	0a56aH
	DW	0b54bH
	DW	08528H
	DW	09509H
	DW	0e5eeH
	DW	0f5cfH
	DW	0c5acH
	DW	0d58dH
	DW	03653H
	DW	02672H
	DW	01611H
	DW	0630H
	DW	076d7H
	DW	066f6H
	DW	05695H
	DW	046b4H
	DW	0b75bH
	DW	0a77aH
	DW	09719H
	DW	08738H
	DW	0f7dfH
	DW	0e7feH
	DW	0d79dH
	DW	0c7bcH
	DW	048c4H
	DW	058e5H
	DW	06886H
	DW	078a7H
	DW	0840H
	DW	01861H
	DW	02802H
	DW	03823H
	DW	0c9ccH
	DW	0d9edH
	DW	0e98eH
	DW	0f9afH
	DW	08948H
	DW	09969H
	DW	0a90aH
	DW	0b92bH
	DW	05af5H
	DW	04ad4H
	DW	07ab7H
	DW	06a96H
	DW	01a71H
	DW	0a50H
	DW	03a33H
	DW	02a12H
	DW	0dbfdH
	DW	0cbdcH
	DW	0fbbfH
	DW	0eb9eH
	DW	09b79H
	DW	08b58H
	DW	0bb3bH
	DW	0ab1aH
	DW	06ca6H
	DW	07c87H
	DW	04ce4H
	DW	05cc5H
	DW	02c22H
	DW	03c03H
	DW	0c60H
	DW	01c41H
	DW	0edaeH
	DW	0fd8fH
	DW	0cdecH
	DW	0ddcdH
	DW	0ad2aH
	DW	0bd0bH
	DW	08d68H
	DW	09d49H
	DW	07e97H
	DW	06eb6H
	DW	05ed5H
	DW	04ef4H
	DW	03e13H
	DW	02e32H
	DW	01e51H
	DW	0e70H
	DW	0ff9fH
	DW	0efbeH
	DW	0dfddH
	DW	0cffcH
	DW	0bf1bH
	DW	0af3aH
	DW	09f59H
	DW	08f78H
	DW	09188H
	DW	081a9H
	DW	0b1caH
	DW	0a1ebH
	DW	0d10cH
	DW	0c12dH
	DW	0f14eH
	DW	0e16fH
	DW	01080H
	DW	0a1H
	DW	030c2H
	DW	020e3H
	DW	05004H
	DW	04025H
	DW	07046H
	DW	06067H
	DW	083b9H
	DW	09398H
	DW	0a3fbH
	DW	0b3daH
	DW	0c33dH
	DW	0d31cH
	DW	0e37fH
	DW	0f35eH
	DW	02b1H
	DW	01290H
	DW	022f3H
	DW	032d2H
	DW	04235H
	DW	05214H
	DW	06277H
	DW	07256H
	DW	0b5eaH
	DW	0a5cbH
	DW	095a8H
	DW	08589H
	DW	0f56eH
	DW	0e54fH
	DW	0d52cH
	DW	0c50dH
	DW	034e2H
	DW	024c3H
	DW	014a0H
	DW	0481H
	DW	07466H
	DW	06447H
	DW	05424H
	DW	04405H
	DW	0a7dbH
	DW	0b7faH
	DW	08799H
	DW	097b8H
	DW	0e75fH
	DW	0f77eH
	DW	0c71dH
	DW	0d73cH
	DW	026d3H
	DW	036f2H
	DW	0691H
	DW	016b0H
	DW	06657H
	DW	07676H
	DW	04615H
	DW	05634H
	DW	0d94cH
	DW	0c96dH
	DW	0f90eH
	DW	0e92fH
	DW	099c8H
	DW	089e9H
	DW	0b98aH
	DW	0a9abH
	DW	05844H
	DW	04865H
	DW	07806H
	DW	06827H
	DW	018c0H
	DW	08e1H
	DW	03882H
	DW	028a3H
	DW	0cb7dH
	DW	0db5cH
	DW	0eb3fH
	DW	0fb1eH
	DW	08bf9H
	DW	09bd8H
	DW	0abbbH
	DW	0bb9aH
	DW	04a75H
	DW	05a54H
	DW	06a37H
	DW	07a16H
	DW	0af1H
	DW	01ad0H
	DW	02ab3H
	DW	03a92H
	DW	0fd2eH
	DW	0ed0fH
	DW	0dd6cH
	DW	0cd4dH
	DW	0bdaaH
	DW	0ad8bH
	DW	09de8H
	DW	08dc9H
	DW	07c26H
	DW	06c07H
	DW	05c64H
	DW	04c45H
	DW	03ca2H
	DW	02c83H
	DW	01ce0H
	DW	0cc1H
	DW	0ef1fH
	DW	0ff3eH
	DW	0cf5dH
	DW	0df7cH
	DW	0af9bH
	DW	0bfbaH
	DW	08fd9H
	DW	09ff8H
	DW	06e17H
	DW	07e36H
	DW	04e55H
	DW	05e74H
	DW	02e93H
	DW	03eb2H
	DW	0ed1H
	DW	01ef0H
_DATA	ENDS
;	COMDAT ??_C@_03CCKOKKND@rb?$CL@
CONST	SEGMENT
??_C@_03CCKOKKND@rb?$CL@ DB 'rb+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map@
CONST	SEGMENT
??_C@_03HBNNNHNM@map@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCEGIJN@map?2?$CFd?4dat@
CONST	SEGMENT
??_C@_0L@FCEGIJN@map?2?$CFd?4dat@ DB 'map\%d.dat', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?mapEffectHalloweenProc@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?mapEffectHalloweenProc@@YAXXZ$0
__ehfuncinfo$?mapEffectHalloweenProc@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?mapEffectHalloweenProc@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?mapEffectKamiFubuki@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?mapEffectKamiFubuki@@YAXXZ$0
__ehfuncinfo$?mapEffectKamiFubuki@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?mapEffectKamiFubuki@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?mapEffectSnow@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?mapEffectSnow@@YAXXZ$0
__ehfuncinfo$?mapEffectSnow@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?mapEffectSnow@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?mapEffectRain@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?mapEffectRain@@YAXXZ$0
__ehfuncinfo$?mapEffectRain@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?mapEffectRain@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
CRT$XCU	SEGMENT
?nowY$initializer$@@3P6AXXZA DD FLAT:??__EnowY@@YAXXZ	; nowY$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?calEffectStar@@YAXPAU_MAP_EFFECT@@@Z
_TEXT	SEGMENT
_my$ = -8						; size = 4
_mx$ = -4						; size = 4
_buf$ = 8						; size = 4
?calEffectStar@@YAXPAU_MAP_EFFECT@@@Z PROC		; calEffectStar, COMDAT

; 5021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 5022 : 	float mx, my;
; 5023 : 	// ??
; 5024 : 	camMapToGamen((float)buf->gx * GRID_SIZE, (float)buf->gy * GRID_SIZE, &mx, &my);

  00007	8b 75 08	 mov	 esi, DWORD PTR _buf$[ebp]
  0000a	8d 45 f8	 lea	 eax, DWORD PTR _my$[ebp]
  0000d	50		 push	 eax
  0000e	8d 45 fc	 lea	 eax, DWORD PTR _mx$[ebp]
  00011	50		 push	 eax
  00012	66 0f 6e 46 14	 movd	 xmm0, DWORD PTR [esi+20]
  00017	83 ec 08	 sub	 esp, 8
  0001a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0001d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00025	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002b	66 0f 6e 46 10	 movd	 xmm0, DWORD PTR [esi+16]
  00030	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00033	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	e8 00 00 00 00	 call	 ?camMapToGamen@@YAXMMPAM0@Z ; camMapToGamen
  00045	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _mx$[ebp]
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 5025 : 	buf->x = (int)(mx + .5) + buf->ggx;

  0004d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00050	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00058	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0005c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _my$[ebp]
  00061	03 46 18	 add	 eax, DWORD PTR [esi+24]

; 5026 : 	buf->y = (int)(my + .5) + buf->ggy;

  00064	0f 5a c0	 cvtps2pd xmm0, xmm0
  00067	89 06		 mov	 DWORD PTR [esi], eax
  00069	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00071	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00075	03 4e 1c	 add	 ecx, DWORD PTR [esi+28]
  00078	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 5027 : 	//???????????????
; 5028 : 	if (ResoMode == 1)

  0007b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  00082	75 09		 jne	 SHORT $LN2@calEffectS

; 5029 : 	{
; 5030 : 		buf->x >>= 1;

  00084	d1 f8		 sar	 eax, 1

; 5031 : 		buf->y >>= 1;

  00086	d1 f9		 sar	 ecx, 1
  00088	89 06		 mov	 DWORD PTR [esi], eax
  0008a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN2@calEffectS:
  0008d	5e		 pop	 esi

; 5032 : 	}
; 5033 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?calEffectStar@@YAXPAU_MAP_EFFECT@@@Z ENDP		; calEffectStar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_gx$ = 12						; size = 4
_gy$ = 16						; size = 4
_ggx$ = 20						; size = 4
_ggy$ = 24						; size = 4
_type$ = 28						; size = 4
?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z PROC		; setEffectStar, COMDAT

; 5008 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5009 : 	if (buf)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 29		 je	 SHORT $LN2@setEffectS

; 5010 : 	{
; 5011 : 		buf->type = MAP_EFFECT_TYPE_STAR;

  0000a	b8 03 00 00 00	 mov	 eax, 3
  0000f	66 89 41 3c	 mov	 WORD PTR [ecx+60], ax

; 5012 : 		buf->gx = gx;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _gx$[ebp]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 5013 : 		buf->gy = gy;

  00019	8b 45 10	 mov	 eax, DWORD PTR _gy$[ebp]
  0001c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 5014 : 		buf->ggx = ggx;

  0001f	8b 45 14	 mov	 eax, DWORD PTR _ggx$[ebp]
  00022	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 5015 : 		buf->ggy = ggy;

  00025	8b 45 18	 mov	 eax, DWORD PTR _ggy$[ebp]
  00028	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 5016 : 		buf->type2 = type;

  0002b	66 8b 45 1c	 mov	 ax, WORD PTR _type$[ebp]
  0002f	66 89 41 3e	 mov	 WORD PTR [ecx+62], ax
$LN2@setEffectS:

; 5017 : 	}
; 5018 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ENDP		; setEffectStar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectDirHosei@@YAXPAH0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?mapEffectDirHosei@@YAXPAH0@Z PROC			; mapEffectDirHosei, COMDAT

; 4744 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4745 : 	if (mapEffectMoveDir < 0)

  00003	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?mapEffectMoveDir@@3FA ; mapEffectMoveDir
  00009	66 85 c0	 test	 ax, ax
  0000c	78 7a		 js	 SHORT $LN17@mapEffectD

; 4746 : 		return;
; 4747 : 	if (mapEffectMoveDir == 0)

  0000e	75 08		 jne	 SHORT $LN3@mapEffectD

; 4748 : 		(*y) -= 2;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00013	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH

; 4773 : 		(*y)--;
; 4774 : 	}
; 4775 : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN3@mapEffectD:

; 4749 : 	else if (mapEffectMoveDir == 1)

  00018	66 83 f8 01	 cmp	 ax, 1
  0001c	75 0c		 jne	 SHORT $LN5@mapEffectD

; 4750 : 	{
; 4751 : 		(*x)++;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00021	ff 00		 inc	 DWORD PTR [eax]

; 4773 : 		(*y)--;
; 4774 : 	}
; 4775 : }

  00023	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00026	ff 08		 dec	 DWORD PTR [eax]
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN5@mapEffectD:

; 4752 : 		(*y)--;
; 4753 : 	}
; 4754 : 	else if (mapEffectMoveDir == 2)

  0002a	66 83 f8 02	 cmp	 ax, 2
  0002e	75 08		 jne	 SHORT $LN7@mapEffectD

; 4755 : 		(*x) += 2;

  00030	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00033	83 00 02	 add	 DWORD PTR [eax], 2

; 4773 : 		(*y)--;
; 4774 : 	}
; 4775 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN7@mapEffectD:

; 4756 : 	else if (mapEffectMoveDir == 3)

  00038	66 83 f8 03	 cmp	 ax, 3
  0003c	75 0c		 jne	 SHORT $LN9@mapEffectD

; 4757 : 	{
; 4758 : 		(*x)++;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00041	ff 00		 inc	 DWORD PTR [eax]

; 4759 : 		(*y)++;

  00043	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00046	ff 00		 inc	 DWORD PTR [eax]

; 4773 : 		(*y)--;
; 4774 : 	}
; 4775 : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN9@mapEffectD:

; 4760 : 	}
; 4761 : 	else if (mapEffectMoveDir == 4)

  0004a	66 83 f8 04	 cmp	 ax, 4
  0004e	75 08		 jne	 SHORT $LN11@mapEffectD

; 4762 : 		(*y) += 2;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00053	83 00 02	 add	 DWORD PTR [eax], 2

; 4773 : 		(*y)--;
; 4774 : 	}
; 4775 : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN11@mapEffectD:

; 4763 : 	else if (mapEffectMoveDir == 5)

  00058	66 83 f8 05	 cmp	 ax, 5
  0005c	75 0c		 jne	 SHORT $LN13@mapEffectD

; 4764 : 	{
; 4765 : 		(*x)--;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00061	ff 08		 dec	 DWORD PTR [eax]

; 4766 : 		(*y)++;

  00063	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00066	ff 00		 inc	 DWORD PTR [eax]

; 4773 : 		(*y)--;
; 4774 : 	}
; 4775 : }

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN13@mapEffectD:

; 4767 : 	}
; 4768 : 	else if (mapEffectMoveDir == 6)

  0006a	66 83 f8 06	 cmp	 ax, 6
  0006e	75 08		 jne	 SHORT $LN15@mapEffectD

; 4769 : 		(*x) -= 2;

  00070	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00073	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH

; 4773 : 		(*y)--;
; 4774 : 	}
; 4775 : }

  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
$LN15@mapEffectD:

; 4770 : 	else if (mapEffectMoveDir == 7)

  00078	66 83 f8 07	 cmp	 ax, 7
  0007c	75 0a		 jne	 SHORT $LN17@mapEffectD

; 4771 : 	{
; 4772 : 		(*x)--;

  0007e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00081	ff 08		 dec	 DWORD PTR [eax]

; 4773 : 		(*y)--;
; 4774 : 	}
; 4775 : }

  00083	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00086	ff 08		 dec	 DWORD PTR [eax]
$LN17@mapEffectD:
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?mapEffectDirHosei@@YAXPAH0@Z ENDP			; mapEffectDirHosei
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z PROC		; delMapEffectBuf, COMDAT

; 4727 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4728 : 	if (buf == (MAP_EFFECT*)NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 45		 je	 SHORT $LN1@delMapEffe

; 4729 : 		return;
; 4730 : 	if (buf->pre != (MAP_EFFECT*)NULL)

  0000a	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0000d	85 d2		 test	 edx, edx
  0000f	74 06		 je	 SHORT $LN3@delMapEffe

; 4731 : 		buf->pre->next = buf->next;

  00011	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00014	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN3@delMapEffe:

; 4732 : 	if (buf->next != (MAP_EFFECT*)NULL)

  00017	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0001a	85 d2		 test	 edx, edx
  0001c	74 06		 je	 SHORT $LN4@delMapEffe

; 4733 : 		buf->next->pre = buf->pre;

  0001e	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00021	89 42 34	 mov	 DWORD PTR [edx+52], eax
$LN4@delMapEffe:

; 4734 : 	if (useBufMapEffect == buf)

  00024	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A, ecx ; useBufMapEffect
  0002a	75 08		 jne	 SHORT $LN5@delMapEffe

; 4735 : 		useBufMapEffect = buf->next;

  0002c	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  0002f	a3 00 00 00 00	 mov	 DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A, eax ; useBufMapEffect
$LN5@delMapEffe:

; 4736 : 	buf->next = emptyBufMapEffect;

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?emptyBufMapEffect@@3PAU_MAP_EFFECT@@A ; emptyBufMapEffect
  00039	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 4737 : 	buf->pre = (MAP_EFFECT*)NULL;
; 4738 : 	emptyBufMapEffect = buf;
; 4739 : 	buf->type = MAP_EFFECT_TYPE_NONE;

  0003c	33 c0		 xor	 eax, eax
  0003e	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  00045	89 0d 00 00 00
	00		 mov	 DWORD PTR ?emptyBufMapEffect@@3PAU_MAP_EFFECT@@A, ecx ; emptyBufMapEffect
  0004b	66 89 41 3c	 mov	 WORD PTR [ecx+60], ax
$LN1@delMapEffe:

; 4740 : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ENDP		; delMapEffectBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ
_TEXT	SEGMENT
?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ PROC		; getMapEffectBuf, COMDAT

; 4709 : 	MAP_EFFECT *buf;
; 4710 : 
; 4711 : 	if (emptyBufMapEffect == (MAP_EFFECT *)NULL)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?emptyBufMapEffect@@3PAU_MAP_EFFECT@@A ; emptyBufMapEffect
  00006	85 c9		 test	 ecx, ecx
  00008	75 03		 jne	 SHORT $LN2@getMapEffe

; 4712 : 		return (MAP_EFFECT*)NULL;

  0000a	33 c0		 xor	 eax, eax

; 4723 : }

  0000c	c3		 ret	 0
$LN2@getMapEffe:

; 4713 : 	buf = emptyBufMapEffect;
; 4714 : 	emptyBufMapEffect = emptyBufMapEffect->next;

  0000d	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00010	a3 00 00 00 00	 mov	 DWORD PTR ?emptyBufMapEffect@@3PAU_MAP_EFFECT@@A, eax ; emptyBufMapEffect
  00015	85 c0		 test	 eax, eax

; 4715 : 	if (emptyBufMapEffect != (MAP_EFFECT*)NULL)

  00017	74 07		 je	 SHORT $LN3@getMapEffe

; 4716 : 		emptyBufMapEffect->pre = (MAP_EFFECT*)NULL;

  00019	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
$LN3@getMapEffe:

; 4717 : 	buf->next = useBufMapEffect;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A ; useBufMapEffect
  00025	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 4718 : 	buf->pre  = (MAP_EFFECT*)NULL;

  00028	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 4719 : 	if (useBufMapEffect != (MAP_EFFECT*)NULL)

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A ; useBufMapEffect
  00034	85 c0		 test	 eax, eax
  00036	74 03		 je	 SHORT $LN4@getMapEffe

; 4720 : 		useBufMapEffect->pre = buf;

  00038	89 48 34	 mov	 DWORD PTR [eax+52], ecx
$LN4@getMapEffe:

; 4721 : 	useBufMapEffect = buf;

  0003b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A, ecx ; useBufMapEffect

; 4722 : 	return buf;

  00041	8b c1		 mov	 eax, ecx

; 4723 : }

  00043	c3		 ret	 0
?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ENDP		; getMapEffectBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?checkGridAround@@YAHHHHH@Z
_TEXT	SEGMENT
_gx1$ = 8						; size = 4
_gy1$ = 12						; size = 4
_gx2$ = 16						; size = 4
_gy2$ = 20						; size = 4
?checkGridAround@@YAHHHHH@Z PROC			; checkGridAround, COMDAT

; 3501 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3502 : 	if (((gx1 == gx2) && ABS(gy2 - gy1) == 1) || (ABS(gx2 - gx1) == 1 && (gy1 == gy2)) || (ABS(gx2 - gx1) == 1 && ABS(gy2 - gy1) == 1))

  00003	8b 45 08	 mov	 eax, DWORD PTR _gx1$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR _gx2$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 14	 mov	 edi, DWORD PTR _gy2$[ebp]
  0000e	8b cf		 mov	 ecx, edi
  00010	2b 4d 0c	 sub	 ecx, DWORD PTR _gy1$[ebp]
  00013	3b c6		 cmp	 eax, esi
  00015	75 0f		 jne	 SHORT $LN7@checkGridA
  00017	8b c1		 mov	 eax, ecx
  00019	99		 cdq
  0001a	33 c2		 xor	 eax, edx
  0001c	2b c2		 sub	 eax, edx
  0001e	83 f8 01	 cmp	 eax, 1
  00021	74 22		 je	 SHORT $LN3@checkGridA
  00023	8b 45 08	 mov	 eax, DWORD PTR _gx1$[ebp]
$LN7@checkGridA:
  00026	2b f0		 sub	 esi, eax
  00028	8b c6		 mov	 eax, esi
  0002a	99		 cdq
  0002b	33 c2		 xor	 eax, edx
  0002d	2b c2		 sub	 eax, edx
  0002f	83 f8 01	 cmp	 eax, 1
  00032	75 1a		 jne	 SHORT $LN2@checkGridA
  00034	39 7d 0c	 cmp	 DWORD PTR _gy1$[ebp], edi
  00037	74 0c		 je	 SHORT $LN3@checkGridA
  00039	8b c1		 mov	 eax, ecx
  0003b	99		 cdq
  0003c	33 c2		 xor	 eax, edx
  0003e	2b c2		 sub	 eax, edx
  00040	83 f8 01	 cmp	 eax, 1
  00043	75 09		 jne	 SHORT $LN2@checkGridA
$LN3@checkGridA:
  00045	5f		 pop	 edi

; 3503 : 		return TRUE;

  00046	b8 01 00 00 00	 mov	 eax, 1

; 3506 : }

  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN2@checkGridA:
  0004e	5f		 pop	 edi

; 3504 : 
; 3505 : 	return FALSE;

  0004f	33 c0		 xor	 eax, eax

; 3506 : }

  00051	5e		 pop	 esi
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?checkGridAround@@YAHHHHH@Z ENDP			; checkGridAround
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?checkEmptyMapData@@YAHHHH@Z
_TEXT	SEGMENT
_egy$3$ = -20						; size = 4
_egx$4$ = -20						; size = 4
_egy$1$ = -16						; size = 4
_egx$2$ = -16						; size = 4
tv1360 = -16						; size = 4
_egx$3$ = -12						; size = 4
tv1361 = -12						; size = 4
_flag$1$ = -8						; size = 4
tv1293 = -4						; size = 4
__gx$ = 8						; size = 4
__gy$ = 12						; size = 4
_dir$ = 16						; size = 4
?checkEmptyMapData@@YAHHHH@Z PROC			; checkEmptyMapData, COMDAT

; 3050 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 3051 : 	// ????????11??????????????TRUE??
; 3052 : 	int i, gx, gy, tx, ty, len, egx, egy;
; 3053 : 	BOOL flag = FALSE;
; 3054 : 
; 3055 : 	if (mapAreaWidth < MAP_X_SIZE || mapAreaHeight < MAP_Y_SIZE)

  00006	83 3d 00 00 00
	00 25		 cmp	 DWORD PTR ?mapAreaWidth@@3HA, 37 ; mapAreaWidth, 00000025H
  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _flag$1$[ebp], 0
  00014	0f 8c 31 03 00
	00		 jl	 $LN15@checkEmpty
  0001a	83 3d 00 00 00
	00 25		 cmp	 DWORD PTR ?mapAreaHeight@@3HA, 37 ; mapAreaHeight, 00000025H
  00021	0f 8c 24 03 00
	00		 jl	 $LN15@checkEmpty

; 3057 : 
; 3058 : 	getMapAreaCnt = 0;

  00027	53		 push	 ebx

; 3059 : 	if (dir == 0 || dir == 1 || dir == 2)

  00028	8b 5d 10	 mov	 ebx, DWORD PTR _dir$[ebp]
  0002b	33 c9		 xor	 ecx, ecx
  0002d	89 4d fc	 mov	 DWORD PTR tv1293[ebp], ecx
  00030	66 89 0d 00 00
	00 00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, cx ; getMapAreaCnt
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  0003f	85 db		 test	 ebx, ebx
  00041	74 0e		 je	 SHORT $LN17@checkEmpty
  00043	83 fb 01	 cmp	 ebx, 1
  00046	74 09		 je	 SHORT $LN17@checkEmpty
  00048	83 fb 02	 cmp	 ebx, 2
  0004b	0f 85 ab 00 00
	00		 jne	 $LN55@checkEmpty
$LN17@checkEmpty:

; 3060 : 	{
; 3061 : 		gx = _gx - SEARCH_AREA;
; 3062 : 		gy = _gy - SEARCH_AREA;

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR __gy$[ebp]
  00054	8b 75 08	 mov	 esi, DWORD PTR __gx$[ebp]
  00057	83 c1 f5	 add	 ecx, -11		; fffffff5H
  0005a	83 c6 f5	 add	 esi, -11		; fffffff5H
  0005d	33 d2		 xor	 edx, edx

; 3063 : 		tx = -SEARCH_AREA - MAP_TILE_GRID_X1;
; 3064 : 		ty = -SEARCH_AREA - MAP_TILE_GRID_Y1;
; 3065 : 		len = (SEARCH_AREA << 1) + 1;
; 3066 : 		egx = gx + 1;
; 3067 : 		egy = gy + (SEARCH_AREA << 1) + 1;

  0005f	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]
  00062	89 45 f0	 mov	 DWORD PTR _egy$1$[ebp], eax
  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  0006a	8d 1c 00	 lea	 ebx, DWORD PTR [eax+eax]
  0006d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00070	89 5d f4	 mov	 DWORD PTR tv1361[ebp], ebx
  00073	8b 5d 10	 mov	 ebx, DWORD PTR _dir$[ebp]
  00076	8d 04 45 12 00
	00 00		 lea	 eax, DWORD PTR ?event@@3PAGA[eax*2+18]
  0007d	0f 1f 00	 npad	 3
$LL4@checkEmpty:

; 3069 : 		{
; 3070 : 			if ((0 <= gx && gx < nowFloorGxSize) && (0 <= gy && gy < nowFloorGySize))

  00080	85 f6		 test	 esi, esi
  00082	78 16		 js	 SHORT $LN19@checkEmpty
  00084	3b f7		 cmp	 esi, edi
  00086	7d 12		 jge	 SHORT $LN19@checkEmpty
  00088	85 c9		 test	 ecx, ecx
  0008a	78 0e		 js	 SHORT $LN19@checkEmpty
  0008c	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  00092	7d 06		 jge	 SHORT $LN19@checkEmpty

; 3071 : 			{
; 3072 : 				if ((event[ty*mapAreaWidth+tx] & MAP_READ_FLAG) == 0)

  00094	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00098	7d 0c		 jge	 SHORT $LN37@checkEmpty
$LN19@checkEmpty:

; 3081 : 					break;
; 3082 : 				}
; 3083 : 			}
; 3084 : 			gy++;

  0009a	03 45 f4	 add	 eax, DWORD PTR tv1361[ebp]
  0009d	42		 inc	 edx
  0009e	41		 inc	 ecx
  0009f	83 fa 17	 cmp	 edx, 23			; 00000017H
  000a2	7c dc		 jl	 SHORT $LL4@checkEmpty

; 3068 : 		for (i = 0; i < len; i++)

  000a4	eb 51		 jmp	 SHORT $LN56@checkEmpty
$LN37@checkEmpty:

; 3073 : 				{
; 3074 : 					getMapAreaX1[getMapAreaCnt] = gx - 1;

  000a6	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  000a9	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaX1@@3PAFA, ax

; 3075 : 					getMapAreaY1[getMapAreaCnt] = gy - 1;

  000af	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]

; 3076 : 					getMapAreaX2[getMapAreaCnt] = egx;
; 3077 : 					getMapAreaY2[getMapAreaCnt] = egy;
; 3078 : 					checkAreaLimit(&getMapAreaX1[getMapAreaCnt], &getMapAreaY1[getMapAreaCnt], &getMapAreaX2[getMapAreaCnt], &getMapAreaY2[getMapAreaCnt]);

  000b2	68 00 00 00 00	 push	 OFFSET ?getMapAreaY2@@3PAFA ; getMapAreaY2
  000b7	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaY1@@3PAFA, ax
  000bd	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000c0	68 00 00 00 00	 push	 OFFSET ?getMapAreaX2@@3PAFA ; getMapAreaX2
  000c5	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaX2@@3PAFA, ax
  000cb	8b 45 f0	 mov	 eax, DWORD PTR _egy$1$[ebp]
  000ce	68 00 00 00 00	 push	 OFFSET ?getMapAreaY1@@3PAFA ; getMapAreaY1
  000d3	68 00 00 00 00	 push	 OFFSET ?getMapAreaX1@@3PAFA ; getMapAreaX1
  000d8	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaY2@@3PAFA, ax
  000de	e8 00 00 00 00	 call	 ?checkAreaLimit@@YAXPAF000@Z ; checkAreaLimit

; 3079 : 					getMapAreaCnt++;

  000e3	b8 01 00 00 00	 mov	 eax, 1
  000e8	83 c4 10	 add	 esp, 16			; 00000010H
  000eb	89 45 fc	 mov	 DWORD PTR tv1293[ebp], eax
  000ee	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, ax ; getMapAreaCnt

; 3080 : 					flag = TRUE;

  000f4	89 45 f8	 mov	 DWORD PTR _flag$1$[ebp], eax
$LN56@checkEmpty:

; 3085 : 			ty++;
; 3086 : 		}
; 3087 : 	}
; 3088 : 	if (dir == 2 || dir == 3 || dir == 4)

  000f7	83 fb 02	 cmp	 ebx, 2
  000fa	74 0e		 je	 SHORT $LN21@checkEmpty
$LN55@checkEmpty:
  000fc	83 fb 03	 cmp	 ebx, 3
  000ff	74 09		 je	 SHORT $LN21@checkEmpty
  00101	83 fb 04	 cmp	 ebx, 4
  00104	0f 85 b6 00 00
	00		 jne	 $LN54@checkEmpty
$LN21@checkEmpty:

; 3089 : 	{
; 3090 : 		gx = _gx - SEARCH_AREA;

  0010a	8b 4d 08	 mov	 ecx, DWORD PTR __gx$[ebp]
  0010d	ba 09 00 00 00	 mov	 edx, 9

; 3091 : 		gy = _gy - SEARCH_AREA;

  00112	8b 5d 0c	 mov	 ebx, DWORD PTR __gy$[ebp]
  00115	83 c1 f5	 add	 ecx, -11		; fffffff5H
  00118	83 c3 f5	 add	 ebx, -11		; fffffff5H

; 3092 : 		tx = -SEARCH_AREA - MAP_TILE_GRID_X1;
; 3093 : 		ty = -SEARCH_AREA - MAP_TILE_GRID_Y1;
; 3094 : 		len = (SEARCH_AREA << 1) + 1;
; 3095 : 		egx = gx + (SEARCH_AREA << 1) + 1;

  0011b	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]
  0011e	89 45 f0	 mov	 DWORD PTR _egx$2$[ebp], eax
$LL7@checkEmpty:

; 3098 : 		{
; 3099 : 			if ((0 <= gx && gx < nowFloorGxSize) && (0 <= gy && gy < nowFloorGySize))

  00121	85 c9		 test	 ecx, ecx
  00123	78 26		 js	 SHORT $LN23@checkEmpty
  00125	3b cf		 cmp	 ecx, edi
  00127	7d 22		 jge	 SHORT $LN23@checkEmpty
  00129	85 db		 test	 ebx, ebx
  0012b	78 1e		 js	 SHORT $LN23@checkEmpty
  0012d	3b 1d 00 00 00
	00		 cmp	 ebx, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  00133	7d 16		 jge	 SHORT $LN23@checkEmpty

; 3100 : 			{
; 3101 : 				if ((event[ty*mapAreaWidth+tx] & MAP_READ_FLAG) == 0)

  00135	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  0013b	8d 04 b2	 lea	 eax, DWORD PTR [edx+esi*4]
  0013e	03 c6		 add	 eax, esi
  00140	66 83 3c 45 00
	00 00 00 00	 cmp	 WORD PTR ?event@@3PAGA[eax*2], 0
  00149	7d 0c		 jge	 SHORT $LN38@checkEmpty
$LN23@checkEmpty:

; 3110 : 					break;
; 3111 : 				}
; 3112 : 			}
; 3113 : 			gx++;

  0014b	42		 inc	 edx
  0014c	41		 inc	 ecx
  0014d	8d 42 f7	 lea	 eax, DWORD PTR [edx-9]
  00150	83 f8 17	 cmp	 eax, 23			; 00000017H
  00153	7c cc		 jl	 SHORT $LL7@checkEmpty

; 3096 : 		egy = gy + 1;
; 3097 : 		for (i = 0; i < len; i++)

  00155	eb 61		 jmp	 SHORT $LN57@checkEmpty
$LN38@checkEmpty:

; 3102 : 				{
; 3103 : 					getMapAreaX1[getMapAreaCnt] = gx - 1;

  00157	8b 45 fc	 mov	 eax, DWORD PTR tv1293[ebp]
  0015a	0f bf f0	 movsx	 esi, ax
  0015d	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00160	8d 3c 75 00 00
	00 00		 lea	 edi, DWORD PTR ?getMapAreaX1@@3PAFA[esi*2]
  00167	66 89 07	 mov	 WORD PTR [edi], ax

; 3104 : 					getMapAreaY1[getMapAreaCnt] = gy - 1;

  0016a	8d 14 75 00 00
	00 00		 lea	 edx, DWORD PTR ?getMapAreaY1@@3PAFA[esi*2]
  00171	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]

; 3105 : 					getMapAreaX2[getMapAreaCnt] = egx;

  00174	8d 0c 75 00 00
	00 00		 lea	 ecx, DWORD PTR ?getMapAreaX2@@3PAFA[esi*2]
  0017b	66 89 02	 mov	 WORD PTR [edx], ax
  0017e	8b 45 f0	 mov	 eax, DWORD PTR _egx$2$[ebp]
  00181	66 89 01	 mov	 WORD PTR [ecx], ax

; 3106 : 					getMapAreaY2[getMapAreaCnt] = egy;

  00184	8d 04 75 00 00
	00 00		 lea	 eax, DWORD PTR ?getMapAreaY2@@3PAFA[esi*2]

; 3107 : 					checkAreaLimit(&getMapAreaX1[getMapAreaCnt], &getMapAreaY1[getMapAreaCnt], &getMapAreaX2[getMapAreaCnt], &getMapAreaY2[getMapAreaCnt]);

  0018b	50		 push	 eax
  0018c	51		 push	 ecx
  0018d	52		 push	 edx
  0018e	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]
  00191	57		 push	 edi
  00192	66 89 30	 mov	 WORD PTR [eax], si
  00195	e8 00 00 00 00	 call	 ?checkAreaLimit@@YAXPAF000@Z ; checkAreaLimit

; 3108 : 					getMapAreaCnt++;

  0019a	8b 45 fc	 mov	 eax, DWORD PTR tv1293[ebp]
  0019d	83 c4 10	 add	 esp, 16			; 00000010H

; 3109 : 					flag = TRUE;

  001a0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  001a6	66 40		 inc	 ax
  001a8	89 45 fc	 mov	 DWORD PTR tv1293[ebp], eax
  001ab	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, ax ; getMapAreaCnt
  001b1	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _flag$1$[ebp], 1
$LN57@checkEmpty:

; 3114 : 			tx++;
; 3115 : 		}
; 3116 : 	}
; 3117 : 	if (dir == 4 || dir == 5 || dir == 6)

  001b8	8b 5d 10	 mov	 ebx, DWORD PTR _dir$[ebp]
  001bb	83 fb 04	 cmp	 ebx, 4
  001be	74 0e		 je	 SHORT $LN25@checkEmpty
$LN54@checkEmpty:
  001c0	83 fb 05	 cmp	 ebx, 5
  001c3	74 09		 je	 SHORT $LN25@checkEmpty
  001c5	83 fb 06	 cmp	 ebx, 6
  001c8	0f 85 bb 00 00
	00		 jne	 $LN53@checkEmpty
$LN25@checkEmpty:

; 3118 : 	{
; 3119 : 		gx = _gx + SEARCH_AREA;

  001ce	8b 75 08	 mov	 esi, DWORD PTR __gx$[ebp]

; 3120 : 		gy = _gy - SEARCH_AREA;

  001d1	8b 4d 0c	 mov	 ecx, DWORD PTR __gy$[ebp]
  001d4	83 c6 0b	 add	 esi, 11			; 0000000bH
  001d7	83 c1 f5	 add	 ecx, -11		; fffffff5H
  001da	33 d2		 xor	 edx, edx

; 3121 : 		tx = SEARCH_AREA - MAP_TILE_GRID_X1;
; 3122 : 		ty = -SEARCH_AREA - MAP_TILE_GRID_Y1;
; 3123 : 		len = (SEARCH_AREA << 1) + 1;
; 3124 : 		egx = gx + 2;

  001dc	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  001df	89 45 f4	 mov	 DWORD PTR _egx$3$[ebp], eax

; 3125 : 		egy = gy + (SEARCH_AREA << 1) + 1;

  001e2	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]
  001e5	89 45 ec	 mov	 DWORD PTR _egy$3$[ebp], eax
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  001ed	8d 1c 00	 lea	 ebx, DWORD PTR [eax+eax]
  001f0	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001f3	89 5d f0	 mov	 DWORD PTR tv1360[ebp], ebx
  001f6	8b 5d 10	 mov	 ebx, DWORD PTR _dir$[ebp]
  001f9	8d 04 45 3e 00
	00 00		 lea	 eax, DWORD PTR ?event@@3PAGA[eax*2+62]
$LL10@checkEmpty:

; 3127 : 		{
; 3128 : 			if ((0 <= gx && gx < nowFloorGxSize) && (0 <= gy && gy < nowFloorGySize))

  00200	85 f6		 test	 esi, esi
  00202	78 16		 js	 SHORT $LN27@checkEmpty
  00204	3b f7		 cmp	 esi, edi
  00206	7d 12		 jge	 SHORT $LN27@checkEmpty
  00208	85 c9		 test	 ecx, ecx
  0020a	78 0e		 js	 SHORT $LN27@checkEmpty
  0020c	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  00212	7d 06		 jge	 SHORT $LN27@checkEmpty

; 3129 : 			{
; 3130 : 				if ((event[ty*mapAreaWidth+tx] & MAP_READ_FLAG) == 0)

  00214	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00218	7d 0c		 jge	 SHORT $LN39@checkEmpty
$LN27@checkEmpty:

; 3139 : 					break;
; 3140 : 				}
; 3141 : 			}
; 3142 : 			gy++;

  0021a	03 45 f0	 add	 eax, DWORD PTR tv1360[ebp]
  0021d	42		 inc	 edx
  0021e	41		 inc	 ecx
  0021f	83 fa 17	 cmp	 edx, 23			; 00000017H
  00222	7c dc		 jl	 SHORT $LL10@checkEmpty

; 3126 : 		for (i = 0; i < len; i++)

  00224	eb 5e		 jmp	 SHORT $LN58@checkEmpty
$LN39@checkEmpty:

; 3131 : 				{
; 3132 : 					getMapAreaX1[getMapAreaCnt] = gx;

  00226	8b 45 fc	 mov	 eax, DWORD PTR tv1293[ebp]
  00229	0f bf f0	 movsx	 esi, ax
  0022c	8b 45 08	 mov	 eax, DWORD PTR __gx$[ebp]
  0022f	8d 3c 75 00 00
	00 00		 lea	 edi, DWORD PTR ?getMapAreaX1@@3PAFA[esi*2]
  00236	83 c0 0b	 add	 eax, 11			; 0000000bH

; 3133 : 					getMapAreaY1[getMapAreaCnt] = gy - 1;

  00239	8d 14 75 00 00
	00 00		 lea	 edx, DWORD PTR ?getMapAreaY1@@3PAFA[esi*2]
  00240	66 89 07	 mov	 WORD PTR [edi], ax
  00243	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]

; 3134 : 					getMapAreaX2[getMapAreaCnt] = egx;

  00246	8d 0c 75 00 00
	00 00		 lea	 ecx, DWORD PTR ?getMapAreaX2@@3PAFA[esi*2]
  0024d	66 89 02	 mov	 WORD PTR [edx], ax
  00250	8b 45 f4	 mov	 eax, DWORD PTR _egx$3$[ebp]
  00253	66 89 01	 mov	 WORD PTR [ecx], ax

; 3135 : 					getMapAreaY2[getMapAreaCnt] = egy;

  00256	8d 04 75 00 00
	00 00		 lea	 eax, DWORD PTR ?getMapAreaY2@@3PAFA[esi*2]
  0025d	8b 75 ec	 mov	 esi, DWORD PTR _egy$3$[ebp]

; 3136 : 					checkAreaLimit(&getMapAreaX1[getMapAreaCnt], &getMapAreaY1[getMapAreaCnt], &getMapAreaX2[getMapAreaCnt], &getMapAreaY2[getMapAreaCnt]);

  00260	50		 push	 eax
  00261	51		 push	 ecx
  00262	52		 push	 edx
  00263	57		 push	 edi
  00264	66 89 30	 mov	 WORD PTR [eax], si
  00267	e8 00 00 00 00	 call	 ?checkAreaLimit@@YAXPAF000@Z ; checkAreaLimit

; 3137 : 					getMapAreaCnt++;

  0026c	8b 45 fc	 mov	 eax, DWORD PTR tv1293[ebp]
  0026f	83 c4 10	 add	 esp, 16			; 00000010H
  00272	66 40		 inc	 ax

; 3138 : 					flag = TRUE;

  00274	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _flag$1$[ebp], 1
  0027b	89 45 fc	 mov	 DWORD PTR tv1293[ebp], eax
  0027e	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, ax ; getMapAreaCnt
$LN58@checkEmpty:

; 3143 : 			ty++;
; 3144 : 		}
; 3145 : 	}
; 3146 : 	if (dir == 6 || dir == 7 || dir == 0)

  00284	83 fb 06	 cmp	 ebx, 6
  00287	74 09		 je	 SHORT $LN29@checkEmpty
$LN53@checkEmpty:
  00289	83 fb 07	 cmp	 ebx, 7
  0028c	74 04		 je	 SHORT $LN29@checkEmpty
  0028e	85 db		 test	 ebx, ebx
  00290	75 50		 jne	 SHORT $LN61@checkEmpty
$LN29@checkEmpty:

; 3147 : 	{
; 3148 : 		gx = _gx - SEARCH_AREA;

  00292	8b 4d 08	 mov	 ecx, DWORD PTR __gx$[ebp]
  00295	ba 09 00 00 00	 mov	 edx, 9

; 3149 : 		gy = _gy + SEARCH_AREA;

  0029a	8b 5d 0c	 mov	 ebx, DWORD PTR __gy$[ebp]
  0029d	83 c1 f5	 add	 ecx, -11		; fffffff5H
  002a0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  002a6	83 c3 0b	 add	 ebx, 11			; 0000000bH

; 3150 : 		tx = -SEARCH_AREA - MAP_TILE_GRID_X1;
; 3151 : 		ty = SEARCH_AREA - MAP_TILE_GRID_Y1;
; 3152 : 		len = (SEARCH_AREA << 1) + 1;
; 3153 : 		egx = gx + (SEARCH_AREA << 1) + 1;

  002a9	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]
  002ac	89 45 ec	 mov	 DWORD PTR _egx$4$[ebp], eax
  002af	90		 npad	 1
$LL13@checkEmpty:

; 3154 : 		egy = gy + 2;
; 3155 : 		for (i = 0; i < len; i++)
; 3156 : 		{
; 3157 : 			if ((0 <= gx && gx < nowFloorGxSize) && (0 <= gy && gy < nowFloorGySize))

  002b0	85 c9		 test	 ecx, ecx
  002b2	78 24		 js	 SHORT $LN31@checkEmpty
  002b4	3b ce		 cmp	 ecx, esi
  002b6	7d 20		 jge	 SHORT $LN31@checkEmpty
  002b8	85 db		 test	 ebx, ebx
  002ba	78 1c		 js	 SHORT $LN31@checkEmpty
  002bc	3b 1d 00 00 00
	00		 cmp	 ebx, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  002c2	7d 14		 jge	 SHORT $LN31@checkEmpty

; 3158 : 			{
; 3159 : 				if ((event[ty*mapAreaWidth+tx] & MAP_READ_FLAG) == 0)

  002c4	6b 05 00 00 00
	00 1b		 imul	 eax, DWORD PTR ?mapAreaWidth@@3HA, 27 ; mapAreaWidth
  002cb	03 c2		 add	 eax, edx
  002cd	66 83 3c 45 00
	00 00 00 00	 cmp	 WORD PTR ?event@@3PAGA[eax*2], 0
  002d6	7d 14		 jge	 SHORT $LN40@checkEmpty
$LN31@checkEmpty:

; 3168 : 					break;
; 3169 : 				}
; 3170 : 			}
; 3171 : 			gx++;

  002d8	42		 inc	 edx
  002d9	41		 inc	 ecx
  002da	8d 42 f7	 lea	 eax, DWORD PTR [edx-9]
  002dd	83 f8 17	 cmp	 eax, 23			; 00000017H
  002e0	7c ce		 jl	 SHORT $LL13@checkEmpty
$LN61@checkEmpty:

; 3172 : 			tx++;
; 3173 : 		}
; 3174 : 	}
; 3175 : 
; 3176 : 	return flag;

  002e2	8b 45 f8	 mov	 eax, DWORD PTR _flag$1$[ebp]
  002e5	5f		 pop	 edi
  002e6	5e		 pop	 esi
  002e7	5b		 pop	 ebx

; 3177 : }

  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c3		 ret	 0
$LN40@checkEmpty:

; 3160 : 				{
; 3161 : 					getMapAreaX1[getMapAreaCnt] = gx - 1;

  002ec	8b 45 fc	 mov	 eax, DWORD PTR tv1293[ebp]
  002ef	0f bf f0	 movsx	 esi, ax
  002f2	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  002f5	8d 3c 75 00 00
	00 00		 lea	 edi, DWORD PTR ?getMapAreaX1@@3PAFA[esi*2]

; 3162 : 					getMapAreaY1[getMapAreaCnt] = gy;

  002fc	66 89 1c 75 00
	00 00 00	 mov	 WORD PTR ?getMapAreaY1@@3PAFA[esi*2], bx

; 3163 : 					getMapAreaX2[getMapAreaCnt] = egx;

  00304	8d 0c 75 00 00
	00 00		 lea	 ecx, DWORD PTR ?getMapAreaX2@@3PAFA[esi*2]
  0030b	66 89 07	 mov	 WORD PTR [edi], ax
  0030e	8b 45 ec	 mov	 eax, DWORD PTR _egx$4$[ebp]
  00311	8d 14 75 00 00
	00 00		 lea	 edx, DWORD PTR ?getMapAreaY1@@3PAFA[esi*2]
  00318	66 89 01	 mov	 WORD PTR [ecx], ax

; 3164 : 					getMapAreaY2[getMapAreaCnt] = egy;

  0031b	8d 04 75 00 00
	00 00		 lea	 eax, DWORD PTR ?getMapAreaY2@@3PAFA[esi*2]

; 3165 : 					checkAreaLimit(&getMapAreaX1[getMapAreaCnt], &getMapAreaY1[getMapAreaCnt], &getMapAreaX2[getMapAreaCnt], &getMapAreaY2[getMapAreaCnt]);

  00322	50		 push	 eax
  00323	51		 push	 ecx
  00324	52		 push	 edx
  00325	8d 73 02	 lea	 esi, DWORD PTR [ebx+2]
  00328	57		 push	 edi
  00329	66 89 30	 mov	 WORD PTR [eax], si
  0032c	e8 00 00 00 00	 call	 ?checkAreaLimit@@YAXPAF000@Z ; checkAreaLimit

; 3166 : 					getMapAreaCnt++;

  00331	8b 45 fc	 mov	 eax, DWORD PTR tv1293[ebp]
  00334	83 c4 10	 add	 esp, 16			; 00000010H
  00337	66 40		 inc	 ax
  00339	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, ax ; getMapAreaCnt

; 3167 : 					flag = TRUE;

  0033f	b8 01 00 00 00	 mov	 eax, 1

; 3172 : 			tx++;
; 3173 : 		}
; 3174 : 	}
; 3175 : 
; 3176 : 	return flag;

  00344	5f		 pop	 edi
  00345	5e		 pop	 esi
  00346	5b		 pop	 ebx

; 3177 : }

  00347	8b e5		 mov	 esp, ebp
  00349	5d		 pop	 ebp
  0034a	c3		 ret	 0
$LN15@checkEmpty:

; 3056 : 		return FALSE;

  0034b	33 c0		 xor	 eax, eax

; 3177 : }

  0034d	8b e5		 mov	 esp, ebp
  0034f	5d		 pop	 ebp
  00350	c3		 ret	 0
?checkEmptyMapData@@YAHHHH@Z ENDP			; checkEmptyMapData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_sendEnemyEvent@@YAXXZ
_TEXT	SEGMENT
?_sendEnemyEvent@@YAXXZ PROC				; _sendEnemyEvent, COMDAT

; 3006 : {

  00000	56		 push	 esi

; 3007 : 	resetMap();

  00001	e8 00 00 00 00	 call	 ?resetMap@@YAXXZ	; resetMap

; 3008 : 
; 3009 : //	eventEnemySendFlag = 1;
; 3010 : //JL fix 快速战斗打百人后人物不能移动
; 3011 : 	eventEnemySendFlag = 0;
; 3012 : 	etcEventFlag = 1;
; 3013 : 	eventEnemySendId = eventId;
; 3014 : 	if (bNewServer)

  00006	ff 35 00 00 00
	00		 push	 DWORD PTR ?_enemyEventDir@@3HA ; _enemyEventDir
  0000c	33 c0		 xor	 eax, eax
  0000e	be 01 00 00 00	 mov	 esi, 1
  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0001a	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  00020	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventEnemySendFlag@@3FA, ax ; eventEnemySendFlag
  00026	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eventId@@3HA ; eventId
  00031	50		 push	 eax
  00032	6a 02		 push	 2
  00034	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0003a	66 89 35 00 00
	00 00		 mov	 WORD PTR ?etcEventFlag@@3FA, si ; etcEventFlag
  00041	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventEnemySendId@@3FA, ax ; eventEnemySendId
  00047	74 07		 je	 SHORT $LN2@sendEnemyE

; 3015 : 		lssproto_EV_send(sockfd, EVENT_ENEMY, eventId,	nowGx, nowGy, _enemyEventDir);

  00049	e8 00 00 00 00	 call	 ?lssproto_EV_send@@YAXHHHHHH@Z ; lssproto_EV_send
  0004e	eb 05		 jmp	 SHORT $LN5@sendEnemyE
$LN2@sendEnemyE:

; 3016 : 	else
; 3017 : 		old_lssproto_EV_send(sockfd, EVENT_ENEMY, eventId,	nowGx, nowGy, _enemyEventDir);

  00050	e8 00 00 00 00	 call	 ?old_lssproto_EV_send@@YAXHHHHHH@Z ; old_lssproto_EV_send
$LN5@sendEnemyE:

; 3018 : 	eventId++;

  00055	ff 05 00 00 00
	00		 inc	 DWORD PTR ?eventId@@3HA	; eventId
  0005b	83 c4 18	 add	 esp, 24			; 00000018H

; 3019 : 	wnCloseFlag = 1;

  0005e	66 89 35 00 00
	00 00		 mov	 WORD PTR ?wnCloseFlag@@3FA, si ; wnCloseFlag

; 3020 : 	eventEnemyFlag = 1;

  00065	66 89 35 00 00
	00 00		 mov	 WORD PTR ?eventEnemyFlag@@3FA, si ; eventEnemyFlag
  0006c	5e		 pop	 esi

; 3021 : }

  0006d	c3		 ret	 0
?_sendEnemyEvent@@YAXXZ ENDP				; _sendEnemyEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_checkEnemyEvent@@YAHHH@Z
_TEXT	SEGMENT
_gx$ = 8						; size = 4
_gy$ = 12						; size = 4
?_checkEnemyEvent@@YAHHH@Z PROC				; _checkEnemyEvent, COMDAT

; 2991 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2992 : 	int x, y, ev;
; 2993 : 
; 2994 : 	x = gx - mapAreaX1;
; 2995 : 	y = gy - mapAreaY1;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _gy$[ebp]

; 2996 : 
; 2997 : 	ev = (event[y * mapAreaWidth + x] & 0x0fff);

  00006	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  0000b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1

; 2998 : 	// ??????
; 2999 : 	if (ev == EVENT_ENEMY)

  00011	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00018	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  0001e	03 45 08	 add	 eax, DWORD PTR _gx$[ebp]
  00021	66 23 0c 45 00
	00 00 00	 and	 cx, WORD PTR ?event@@3PAGA[eax*2]
  00029	33 c0		 xor	 eax, eax
  0002b	66 83 f9 02	 cmp	 cx, 2
  0002f	0f 94 c0	 sete	 al

; 3000 : 		return TRUE;
; 3001 : 
; 3002 : 	return FALSE;
; 3003 : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?_checkEnemyEvent@@YAHHH@Z ENDP				; _checkEnemyEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_sendWarpEvent@@YAXXZ
_TEXT	SEGMENT
?_sendWarpEvent@@YAXXZ PROC				; _sendWarpEvent, COMDAT

; 2955 : {

  00000	56		 push	 esi

; 2956 : 	resetMap();

  00001	e8 00 00 00 00	 call	 ?resetMap@@YAXXZ	; resetMap

; 2957 : 	eventWarpSendFlag = 1;
; 2958 : 	etcEventFlag = 1;
; 2959 : 	eventWarpSendId = eventId;
; 2960 : 	if (bNewServer)

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eventId@@3HA ; eventId
  00017	6a ff		 push	 -1
  00019	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  0001f	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventWarpSendId@@3FA, ax ; eventWarpSendId
  00025	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  0002b	66 89 35 00 00
	00 00		 mov	 WORD PTR ?eventWarpSendFlag@@3FA, si ; eventWarpSendFlag
  00032	50		 push	 eax
  00033	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?_eventWarpNo@@3FA ; _eventWarpNo
  0003a	50		 push	 eax
  0003b	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00041	66 89 35 00 00
	00 00		 mov	 WORD PTR ?etcEventFlag@@3FA, si ; etcEventFlag
  00048	74 07		 je	 SHORT $LN2@sendWarpEv

; 2961 : 		lssproto_EV_send(sockfd, _eventWarpNo, eventId, nowGx, nowGy, -1);

  0004a	e8 00 00 00 00	 call	 ?lssproto_EV_send@@YAXHHHHHH@Z ; lssproto_EV_send
  0004f	eb 05		 jmp	 SHORT $LN6@sendWarpEv
$LN2@sendWarpEv:

; 2962 : 	else
; 2963 : 		old_lssproto_EV_send(sockfd, _eventWarpNo, eventId, nowGx, nowGy, -1);

  00051	e8 00 00 00 00	 call	 ?old_lssproto_EV_send@@YAXHHHHHH@Z ; old_lssproto_EV_send
$LN6@sendWarpEv:

; 2964 : 	eventId++;

  00056	ff 05 00 00 00
	00		 inc	 DWORD PTR ?eventId@@3HA	; eventId
  0005c	83 c4 18	 add	 esp, 24			; 00000018H

; 2965 : 	wnCloseFlag = 1;	// ?????????

  0005f	66 89 35 00 00
	00 00		 mov	 WORD PTR ?wnCloseFlag@@3FA, si ; wnCloseFlag

; 2966 : #ifdef __AI
; 2967 : 	void AI_CloseWnd();
; 2968 : //			AI_CloseWnd();
; 2969 : #endif
; 2970 : 	closeEtcSwitch();	// ????????

  00066	e8 00 00 00 00	 call	 ?closeEtcSwitch@@YAXXZ	; closeEtcSwitch

; 2971 : 	closeCharActionAnimeChange();	// ?????????????

  0006b	e8 00 00 00 00	 call	 ?closeCharActionAnimeChange@@YAXXZ ; closeCharActionAnimeChange

; 2972 : 	closeJoinChannelWN();

  00070	e8 00 00 00 00	 call	 ?closeJoinChannelWN@@YAXXZ ; closeJoinChannelWN

; 2973 : 	// ?????
; 2974 : 	SubProcNo = 200;

  00075	c7 05 00 00 00
	00 c8 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, 200 ; SubProcNo, 000000c8H

; 2975 : 	//void JL_关闭地图特效();
; 2976 : 	//JL_关闭地图特效();		//JL 地图特效关闭
; 2977 : 	// ???????
; 2978 : 	warpEffectProc();

  0007f	e8 00 00 00 00	 call	 ?warpEffectProc@@YAXXZ	; warpEffectProc

; 2979 : 	warpEffectFlag = TRUE;
; 2980 : 	floorChangeFlag = TRUE;
; 2981 : 	// ?????????????????
; 2982 : 	if (MenuToggleFlag & JOY_CTRL_M)

  00084	f7 05 00 00 00
	00 00 00 00 40	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 1073741824 ; MenuToggleFlag, 40000000H
  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MapWmdFlagBak@@3HA ; MapWmdFlagBak
  00093	0f 45 c6	 cmovne	 eax, esi
  00096	89 35 00 00 00
	00		 mov	 DWORD PTR ?warpEffectFlag@@3HA, esi ; warpEffectFlag
  0009c	89 35 00 00 00
	00		 mov	 DWORD PTR ?floorChangeFlag@@3HA, esi ; floorChangeFlag
  000a2	a3 00 00 00 00	 mov	 DWORD PTR ?MapWmdFlagBak@@3HA, eax ; MapWmdFlagBak
  000a7	5e		 pop	 esi

; 2983 : 		MapWmdFlagBak = TRUE;
; 2984 : }

  000a8	c3		 ret	 0
?_sendWarpEvent@@YAXXZ ENDP				; _sendWarpEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_checkWarpEvent@@YAHHH@Z
_TEXT	SEGMENT
_gx$ = 8						; size = 4
_gy$ = 12						; size = 4
?_checkWarpEvent@@YAHHH@Z PROC				; _checkWarpEvent, COMDAT

; 2931 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2932 : 	int x, y, timeZoneNo;
; 2933 : 
; 2934 : 	x = gx - mapAreaX1;

  00004	8b 75 08	 mov	 esi, DWORD PTR _gx$[ebp]
  00007	2b 35 00 00 00
	00		 sub	 esi, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  0000d	57		 push	 edi

; 2935 : 	y = gy - mapAreaY1;

  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _gy$[ebp]
  00011	2b 3d 00 00 00
	00		 sub	 edi, DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1

; 2936 : 	timeZoneNo = getLSTime (&SaTime);

  00017	68 00 00 00 00	 push	 OFFSET ?SaTime@@3UtagLSTIME@@A ; SaTime
  0001c	e8 00 00 00 00	 call	 ?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z ; getLSTime

; 2937 : 	_eventWarpNo = (event[y * mapAreaWidth + x] & 0x0fff);

  00021	0f af 3d 00 00
	00 00		 imul	 edi, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00028	83 c4 04	 add	 esp, 4
  0002b	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  00030	03 fe		 add	 edi, esi
  00032	66 23 0c 7d 00
	00 00 00	 and	 cx, WORD PTR ?event@@3PAGA[edi*2]
  0003a	66 89 0d 00 00
	00 00		 mov	 WORD PTR ?_eventWarpNo@@3FA, cx ; _eventWarpNo
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	66 83 f9 03	 cmp	 cx, 3

; 2938 : 	// ???
; 2939 : 	if (_eventWarpNo == EVENT_WARP)

  00047	74 0b		 je	 SHORT $LN11@checkWarpE

; 2940 : 		return TRUE;
; 2941 : 	// ?????
; 2942 : 	else if (_eventWarpNo == EVENT_WARP_MONING && timeZoneNo == LS_MORNING)

  00049	66 83 f9 06	 cmp	 cx, 6
  0004d	75 0c		 jne	 SHORT $LN4@checkWarpE
  0004f	83 f8 03	 cmp	 eax, 3
$LN12@checkWarpE:

; 2949 : 		return TRUE;

  00052	75 21		 jne	 SHORT $LN9@checkWarpE
$LN11@checkWarpE:
  00054	b8 01 00 00 00	 mov	 eax, 1

; 2952 : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN4@checkWarpE:

; 2943 : 		return TRUE;
; 2944 : 	// ??????
; 2945 : 	else if (_eventWarpNo == EVENT_WARP_NOON && (timeZoneNo == LS_NOON || timeZoneNo == LS_EVENING))

  0005b	66 83 f9 07	 cmp	 cx, 7
  0005f	75 09		 jne	 SHORT $LN6@checkWarpE
  00061	85 c0		 test	 eax, eax
  00063	74 ef		 je	 SHORT $LN11@checkWarpE
  00065	83 f8 01	 cmp	 eax, 1
  00068	eb e8		 jmp	 SHORT $LN12@checkWarpE
$LN6@checkWarpE:

; 2946 : 		return TRUE;
; 2947 : 	// ??????
; 2948 : 	else if (_eventWarpNo == EVENT_WARP_NIGHT && timeZoneNo == LS_NIGHT)

  0006a	66 83 f9 08	 cmp	 cx, 8
  0006e	75 05		 jne	 SHORT $LN9@checkWarpE
  00070	83 f8 02	 cmp	 eax, 2
  00073	74 df		 je	 SHORT $LN11@checkWarpE
$LN9@checkWarpE:

; 2950 : 
; 2951 : 	return FALSE;

  00075	33 c0		 xor	 eax, eax

; 2952 : }

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?_checkWarpEvent@@YAHHH@Z ENDP				; _checkWarpEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_sendMoveRoute@@YAXXZ
_TEXT	SEGMENT
?_sendMoveRoute@@YAXXZ PROC				; _sendMoveRoute, COMDAT

; 2865 : 	int i;
; 2866 : 	if (moveRouteCnt2 <= 0)

  00000	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?moveRouteCnt2@@3FA ; moveRouteCnt2
  00006	66 85 c0	 test	 ax, ax
  00009	7e 70		 jle	 SHORT $LN6@sendMoveRo

; 2867 : 		return;
; 2868 : 
; 2869 : 	for (i = 0; i < moveRouteCnt2; i++)

  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	0f bf f8	 movsx	 edi, ax
  00010	33 f6		 xor	 esi, esi
  00012	85 ff		 test	 edi, edi
  00014	7e 28		 jle	 SHORT $LN3@sendMoveRo
  00016	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@sendMoveRo:

; 2870 : 		moveRouteDir[i] = cnvServDir(moveRoute2[i], 0);

  00020	0f bf 04 75 00
	00 00 00	 movsx	 eax, WORD PTR ?moveRoute2@@3PAFA[esi*2]
  00028	6a 00		 push	 0
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?cnvServDir@@YADHH@Z	; cnvServDir
  00030	88 86 00 00 00
	00		 mov	 BYTE PTR ?moveRouteDir@@3PADA[esi], al
  00036	83 c4 08	 add	 esp, 8
  00039	46		 inc	 esi
  0003a	3b f7		 cmp	 esi, edi
  0003c	7c e2		 jl	 SHORT $LL4@sendMoveRo
$LN3@sendMoveRo:

; 2871 : #ifdef  _STONDEBUG_
; 2872 : 	if (!offlineFlag)
; 2873 : #endif
; 2874 : 	{
; 2875 : 		if (partyModeFlag == 0 || (pc.status & CHR_STATUS_LEADER) != 0)

  0003e	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?partyModeFlag@@3FA, 0 ; partyModeFlag
  00046	74 0c		 je	 SHORT $LN7@sendMoveRo
  00048	f7 05 a4 00 00
	00 00 01 00 00	 test	 DWORD PTR ?pc@@3UPC@@A+164, 256 ; 00000100H
  00052	74 25		 je	 SHORT $LN15@sendMoveRo
$LN7@sendMoveRo:

; 2876 : 		{
; 2877 : 			moveRouteDir[i] = '\0';

  00054	83 fe 64	 cmp	 esi, 100		; 00000064H
  00057	73 23		 jae	 SHORT $LN9@sendMoveRo

; 2878 : 
; 2879 : #ifdef MAP_CACHE_PROC
; 2880 : 			if (checkMapCache(nowGx, nowGy, moveRoute2, moveRouteCnt2, nowFloor, nowFloorGxSize, nowFloorGySize))
; 2881 : 				noChecksumWalkSendForServer(nowGx, nowGy, moveRouteDir);
; 2882 : 			else
; 2883 : 				walkSendForServer(nowGx, nowGy, moveRouteDir);
; 2884 : #else
; 2885 : 			walkSendForServer(nowGx, nowGy, moveRouteDir);

  00059	68 00 00 00 00	 push	 OFFSET ?moveRouteDir@@3PADA ; moveRouteDir
  0005e	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  00064	c6 86 00 00 00
	00 00		 mov	 BYTE PTR ?moveRouteDir@@3PADA[esi], 0
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  00071	e8 00 00 00 00	 call	 ?walkSendForServer@@YAXHHPAD@Z ; walkSendForServer
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@sendMoveRo:
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
$LN6@sendMoveRo:

; 2886 : #endif
; 2887 : 		}
; 2888 : 	}
; 2889 : }

  0007b	c3		 ret	 0
$LN9@sendMoveRo:

; 2876 : 		{
; 2877 : 			moveRouteDir[i] = '\0';

  0007c	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN16@sendMoveRo:
  00081	cc		 int	 3
?_sendMoveRoute@@YAXXZ ENDP				; _sendMoveRoute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_sendEncount@@YAXXZ
_TEXT	SEGMENT
?_sendEncount@@YAXXZ PROC				; _sendEncount, COMDAT

; 2919 : 	resetMap();

  00000	e8 00 00 00 00	 call	 ?resetMap@@YAXXZ	; resetMap

; 2920 : 	sendEnFlag = 1;
; 2921 : 	etcEventFlag = 1;
; 2922 : 	eventEnemyFlag = 0;
; 2923 : 
; 2924 : 	if (bNewServer)

  00005	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  0000b	b8 01 00 00 00	 mov	 eax, 1
  00010	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  00016	66 a3 00 00 00
	00		 mov	 WORD PTR ?sendEnFlag@@3FA, ax ; sendEnFlag
  0001c	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00022	66 a3 00 00 00
	00		 mov	 WORD PTR ?etcEventFlag@@3FA, ax ; etcEventFlag
  00028	33 c0		 xor	 eax, eax
  0002a	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventEnemyFlag@@3FA, ax ; eventEnemyFlag
  00030	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bNewServer@@3HA, eax ; bNewServer
  00036	74 09		 je	 SHORT $LN2@sendEncoun

; 2925 : 		lssproto_EN_send(sockfd, nowGx, nowGy);

  00038	e8 00 00 00 00	 call	 ?lssproto_EN_send@@YAXHHH@Z ; lssproto_EN_send

; 2928 : }

  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	c3		 ret	 0
$LN2@sendEncoun:

; 2926 : 	else
; 2927 : 		old_lssproto_EN_send(sockfd, nowGx, nowGy);

  00041	e8 00 00 00 00	 call	 ?old_lssproto_EN_send@@YAXHHH@Z ; old_lssproto_EN_send

; 2928 : }

  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
  00049	c3		 ret	 0
?_sendEncount@@YAXXZ ENDP				; _sendEncount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_checkEncount@@YAHXZ
_TEXT	SEGMENT
?_checkEncount@@YAHXZ PROC				; _checkEncount, COMDAT

; 2892 : {

  00000	56		 push	 esi

; 2893 : 	BOOL ret = FALSE;

  00001	33 f6		 xor	 esi, esi

; 2894 : 
; 2895 : 	if (EncountOffFlag)

  00003	39 35 00 00 00
	00		 cmp	 DWORD PTR ?EncountOffFlag@@3HA, esi ; EncountOffFlag
  00009	74 04		 je	 SHORT $LN2@checkEncou

; 2896 : 		return FALSE;

  0000b	33 c0		 xor	 eax, eax
  0000d	5e		 pop	 esi

; 2915 : }

  0000e	c3		 ret	 0
$LN2@checkEncou:

; 2897 : 
; 2898 : 	if (partyModeFlag == 0 || (pc.status & CHR_STATUS_LEADER) != 0)

  0000f	66 39 35 00 00
	00 00		 cmp	 WORD PTR ?partyModeFlag@@3FA, si ; partyModeFlag
  00016	74 2f		 je	 SHORT $LN4@checkEncou
  00018	f7 05 a4 00 00
	00 00 01 00 00	 test	 DWORD PTR ?pc@@3UPC@@A+164, 256 ; 00000100H
  00022	75 23		 jne	 SHORT $LN4@checkEncou
  00024	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ?nowEncountPercentage@@3FA ; nowEncountPercentage
$LN5@checkEncou:

; 2904 : 		}
; 2905 : 	}
; 2906 : 	if (6 > nowEncountExtra)

  0002b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?nowEncountExtra@@3FA ; nowEncountExtra
  00031	b9 06 00 00 00	 mov	 ecx, 6
  00036	66 3b c8	 cmp	 cx, ax
  00039	7e 32		 jle	 SHORT $LN6@checkEncou

; 2907 : 		nowEncountExtra++;

  0003b	66 40		 inc	 ax
  0003d	66 a3 00 00 00
	00		 mov	 WORD PTR ?nowEncountExtra@@3FA, ax ; nowEncountExtra

; 2912 : 	}
; 2913 : 
; 2914 : 	return ret;

  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi

; 2915 : }

  00046	c3		 ret	 0
$LN4@checkEncou:

; 2899 : 	{
; 2900 : 		if (nowEncountPercentage > rand2())

  00047	e8 00 00 00 00	 call	 ?rand2@@YAHXZ		; rand2
  0004c	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ?nowEncountPercentage@@3FA ; nowEncountPercentage
  00053	0f bf ca	 movsx	 ecx, dx
  00056	3b c8		 cmp	 ecx, eax
  00058	7e d1		 jle	 SHORT $LN5@checkEncou

; 2901 : 		{
; 2902 : 			ret = TRUE;
; 2903 : 			nowEncountExtra = 0;

  0005a	33 c0		 xor	 eax, eax
  0005c	be 01 00 00 00	 mov	 esi, 1

; 2907 : 		nowEncountExtra++;

  00061	66 40		 inc	 ax
  00063	66 a3 00 00 00
	00		 mov	 WORD PTR ?nowEncountExtra@@3FA, ax ; nowEncountExtra

; 2912 : 	}
; 2913 : 
; 2914 : 	return ret;

  00069	8b c6		 mov	 eax, esi
  0006b	5e		 pop	 esi

; 2915 : }

  0006c	c3		 ret	 0
$LN6@checkEncou:

; 2908 : 	else
; 2909 : 	{
; 2910 : 		if (maxEncountPercentage > nowEncountPercentage)

  0006d	66 39 15 00 00
	00 00		 cmp	 WORD PTR ?maxEncountPercentage@@3FA, dx ; maxEncountPercentage
  00074	7e 09		 jle	 SHORT $LN8@checkEncou

; 2911 : 			nowEncountPercentage++;

  00076	66 42		 inc	 dx
  00078	66 89 15 00 00
	00 00		 mov	 WORD PTR ?nowEncountPercentage@@3FA, dx ; nowEncountPercentage
$LN8@checkEncou:

; 2912 : 	}
; 2913 : 
; 2914 : 	return ret;

  0007f	8b c6		 mov	 eax, esi
  00081	5e		 pop	 esi

; 2915 : }

  00082	c3		 ret	 0
?_checkEncount@@YAHXZ ENDP				; _checkEncount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_setMapMovePoint@@YAXHH@Z
_TEXT	SEGMENT
_dx$2$ = -8						; size = 4
_dir1$ = -8						; size = 4
_dy$2$ = -4						; size = 4
__nextGx$ = 8						; size = 4
__nextGy$ = 12						; size = 4
?_setMapMovePoint@@YAXHH@Z PROC				; _setMapMovePoint, COMDAT

; 2552 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8

; 2553 : 	float dx, dy, len, dir1;
; 2554 : 	int dir;
; 2555 : 
; 2556 : 	nextGx = _nextGx;
; 2557 : 	nextGy = _nextGy;

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __nextGy$[ebp]
  0000c	8b 45 08	 mov	 eax, DWORD PTR __nextGx$[ebp]
  0000f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nextGy@@3HA, ecx ; nextGy

; 2558 : 	// ??????
; 2559 : 	dx = nextGx * GRID_SIZE - nowX;

  00015	c1 e1 06	 shl	 ecx, 6
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?nextGx@@3HA, eax ; nextGx
  0001d	c1 e0 06	 shl	 eax, 6
  00020	66 0f 6e c1	 movd	 xmm0, ecx

; 2560 : 	dy = nextGy * GRID_SIZE - nowY;

  00024	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00027	66 0f 6e d0	 movd	 xmm2, eax
  0002b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?nowY@@3MA
  00033	0f 5b d2	 cvtdq2ps xmm2, xmm2

; 2561 : 	len = (float)sqrt((double)(dx * dx + dy * dy));

  00036	0f 28 c8	 movaps	 xmm1, xmm0
  00039	f3 0f 11 44 24
	04		 movss	 DWORD PTR _dy$2$[esp+8], xmm0
  0003f	f3 0f 5c 15 00
	00 00 00	 subss	 xmm2, DWORD PTR ?nowX@@3MA
  00047	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0004b	0f 28 c2	 movaps	 xmm0, xmm2
  0004e	f3 0f 11 14 24	 movss	 DWORD PTR _dx$2$[esp+8], xmm2
  00053	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00057	f3 0f 58 c8	 addss	 xmm1, xmm0
  0005b	0f 5a c1	 cvtps2pd xmm0, xmm1
  0005e	0f 57 c9	 xorps	 xmm1, xmm1
  00061	66 0f 2e c8	 ucomisd xmm1, xmm0
  00065	77 06		 ja	 SHORT $LN7@setMapMove
  00067	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0006b	eb 05		 jmp	 SHORT $LN8@setMapMove
$LN7@setMapMove:
  0006d	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN8@setMapMove:
  00072	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00076	0f 57 e4	 xorps	 xmm4, xmm4

; 2562 : 	if (len > 0)

  00079	0f 2f c4	 comiss	 xmm0, xmm4
  0007c	76 15		 jbe	 SHORT $LN2@setMapMove

; 2563 : 	{
; 2564 : 		dx /= len;

  0007e	f3 0f 10 1c 24	 movss	 xmm3, DWORD PTR _dx$2$[esp+8]

; 2565 : 		dy /= len;

  00083	f3 0f 10 54 24
	04		 movss	 xmm2, DWORD PTR _dy$2$[esp+8]
  00089	f3 0f 5e d8	 divss	 xmm3, xmm0
  0008d	f3 0f 5e d0	 divss	 xmm2, xmm0

; 2566 : 	}

  00091	eb 06		 jmp	 SHORT $LN3@setMapMove
$LN2@setMapMove:
  00093	0f 57 db	 xorps	 xmm3, xmm3
  00096	0f 57 d2	 xorps	 xmm2, xmm2
$LN3@setMapMove:

; 2567 : 	else
; 2568 : 	{
; 2569 : 		dx = 0;
; 2570 : 		dy = 0;
; 2571 : 	}
; 2572 : 	nowVx = dx * MOVE_SPEED;

  00099	0f 28 c3	 movaps	 xmm0, xmm3
  0009c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000

; 2573 : 	nowVy = dy * MOVE_SPEED;
; 2574 : 	// PC?????
; 2575 : 	if (dx != 0 || dy != 0)

  000a4	0f 2e dc	 ucomiss xmm3, xmm4
  000a7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowVx@@3MA, xmm0
  000af	0f 28 c2	 movaps	 xmm0, xmm2
  000b2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  000ba	9f		 lahf
  000bb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowVy@@3MA, xmm0
  000c3	f6 c4 44	 test	 ah, 68			; 00000044H
  000c6	7a 09		 jp	 SHORT $LN5@setMapMove
  000c8	0f 2e d4	 ucomiss xmm2, xmm4
  000cb	9f		 lahf
  000cc	f6 c4 44	 test	 ah, 68			; 00000044H
  000cf	7b 47		 jnp	 SHORT $LN4@setMapMove
$LN5@setMapMove:

; 2576 : 	{
; 2577 : 		dir1 = Atan(dx, dy) + 22.5F;

  000d1	83 ec 08	 sub	 esp, 8
  000d4	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  000da	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  000df	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  000e4	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 2578 : 		AdjustDir(&dir1);

  000ea	8d 44 24 08	 lea	 eax, DWORD PTR _dir1$[esp+16]
  000ee	50		 push	 eax
  000ef	d9 5c 24 0c	 fstp	 DWORD PTR _dir1$[esp+20]
  000f3	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 2579 : 		dir = (int)(dir1 / 45);

  000f8	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR _dir1$[esp+20]
  000fe	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000
  00106	f3 0f 2c c0	 cvttss2si eax, xmm0

; 2580 : 		setPcDir(dir);

  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?setPcDir@@YAXH@Z	; setPcDir
  00110	83 c4 10	 add	 esp, 16			; 00000010H

; 2581 : 		setPcWalkFlag();

  00113	e8 00 00 00 00	 call	 ?setPcWalkFlag@@YAXXZ	; setPcWalkFlag
$LN4@setMapMove:

; 2582 : 	}
; 2583 : 	// PC?????????????
; 2584 : 	setPcPoint();

  00118	e8 00 00 00 00	 call	 ?setPcPoint@@YAXXZ	; setPcPoint

; 2585 : }

  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
?_setMapMovePoint@@YAXHH@Z ENDP				; _setMapMovePoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_partyMapMove@@YAXXZ
_TEXT	SEGMENT
?_partyMapMove@@YAXXZ PROC				; _partyMapMove, COMDAT

; 2701 : 	int i;
; 2702 : 
; 2703 : 	// ??????????????????????
; 2704 : 	if (partyModeFlag != 0 && (pc.status & CHR_STATUS_LEADER) != 0)

  00000	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?partyModeFlag@@3FA, 0 ; partyModeFlag
  00008	74 3f		 je	 SHORT $LN13@partyMapMo
  0000a	f7 05 a4 00 00
	00 00 01 00 00	 test	 DWORD PTR ?pc@@3UPC@@A+164, 256 ; 00000100H
  00014	74 33		 je	 SHORT $LN13@partyMapMo

; 2705 : 	{
; 2706 : 		for (i = 1; i < MAX_PARTY; i++)

  00016	56		 push	 esi
  00017	be 02 00 00 00	 mov	 esi, OFFSET ?_partyTbl@@3PAFA+2
  0001c	0f 1f 40 00	 npad	 4
$LL4@partyMapMo:

; 2707 : 		{
; 2708 : 			if (_partyTbl[i] >= 0)

  00020	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00023	66 85 c0	 test	 ax, ax
  00026	78 20		 js	 SHORT $LN14@partyMapMo

; 2709 : 				charMove2(party[_partyTbl[i]].ptAct);

  00028	98		 cwde
  00029	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002c	c1 e0 04	 shl	 eax, 4
  0002f	ff b0 2c 00 00
	00		 push	 DWORD PTR ?party@@3PAUPARTY@@A[eax+44]
  00035	e8 00 00 00 00	 call	 ?charMove2@@YAXPAUaction@@@Z ; charMove2
  0003a	83 c6 02	 add	 esi, 2
  0003d	83 c4 04	 add	 esp, 4
  00040	81 fe 0a 00 00
	00		 cmp	 esi, OFFSET ?_partyTbl@@3PAFA+10
  00046	7c d8		 jl	 SHORT $LL4@partyMapMo
$LN14@partyMapMo:
  00048	5e		 pop	 esi
$LN13@partyMapMo:

; 2710 : 			else
; 2711 : 				break;
; 2712 : 		}
; 2713 : 	}
; 2714 : }

  00049	c3		 ret	 0
?_partyMapMove@@YAXXZ ENDP				; _partyMapMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_mapMove@@YAXXZ
_TEXT	SEGMENT
_nGx$1$ = -20						; size = 4
_nGy$1$ = -16						; size = 4
tv190 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
?_mapMove@@YAXXZ PROC					; _mapMove, COMDAT

; 2640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2641 : 	float nGx, nGy, vx, vy;
; 2642 : 	if (nowVx != 0 || nowVy != 0)

  00003	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR ?nowVx@@3MA
  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR ?nowVy@@3MA
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	0f 2e e8	 ucomiss xmm5, xmm0
  0001c	9f		 lahf
  0001d	f6 c4 44	 test	 ah, 68			; 00000044H
  00020	7a 2a		 jp	 SHORT $LN4@mapMove
  00022	0f 2e e0	 ucomiss xmm4, xmm0
  00025	9f		 lahf
  00026	f6 c4 44	 test	 ah, 68			; 00000044H
  00029	7a 21		 jp	 SHORT $LN4@mapMove

; 2677 : 	}
; 2678 : 	else
; 2679 : 	{
; 2680 : 		// PC????????????WALK???????????STAND???
; 2681 : 		if (checkPcWalkFlag() == 1)

  0002b	e8 00 00 00 00	 call	 ?checkPcWalkFlag@@YAHXZ	; checkPcWalkFlag
  00030	83 f8 01	 cmp	 eax, 1
  00033	75 0f		 jne	 SHORT $LN10@mapMove

; 2682 : 		{
; 2683 : 			setPcAction(ANIM_STAND);

  00035	6a 03		 push	 3
  00037	e8 00 00 00 00	 call	 ?setPcAction@@YAXH@Z	; setPcAction
  0003c	83 c4 04	 add	 esp, 4

; 2684 : 			delPcWalkFlag();

  0003f	e8 00 00 00 00	 call	 ?delPcWalkFlag@@YAXXZ	; delPcWalkFlag
$LN10@mapMove:

; 2685 : 		}
; 2686 : 		mapEffectMoveDir = -1;

  00044	83 c8 ff	 or	 eax, -1
  00047	e9 1a 01 00 00	 jmp	 $LN13@mapMove
$LN4@mapMove:

; 2643 : 	{
; 2644 : 		nGx = (float)nextGx * GRID_SIZE;
; 2645 : 		nGy = (float)nextGy * GRID_SIZE;
; 2646 : 
; 2647 : 		vx = nowVx * nowSpdRate;
; 2648 : 		vy = nowVy * nowSpdRate;
; 2649 : 
; 2650 : 		//JL 2016.8.25
; 2651 : 		if (fastWalkFlag == 0x74)	//74 75与wg匹配

  0004c	83 3d 00 00 00
	00 74		 cmp	 DWORD PTR ?fastWalkFlag@@3HA, 116 ; fastWalkFlag, 00000074H
  00053	66 0f 6e 15 00
	00 00 00	 movd	 xmm2, DWORD PTR ?nextGx@@3HA ; nextGx
  0005b	66 0f 6e 1d 00
	00 00 00	 movd	 xmm3, DWORD PTR ?nextGy@@3HA ; nextGy
  00063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowSpdRate@@3MA
  0006b	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0006e	0f 5b db	 cvtdq2ps xmm3, xmm3
  00071	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@42800000
  00079	0f 28 c8	 movaps	 xmm1, xmm0
  0007c	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@42800000
  00084	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00088	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0008c	f3 0f 11 55 ec	 movss	 DWORD PTR _nGx$1$[ebp], xmm2
  00091	f3 0f 11 5d f0	 movss	 DWORD PTR _nGy$1$[ebp], xmm3
  00096	f3 0f 11 4d f8	 movss	 DWORD PTR $T1[ebp], xmm1
  0009b	f3 0f 11 45 fc	 movss	 DWORD PTR $T2[ebp], xmm0
  000a0	74 6e		 je	 SHORT $reachDest$15

; 2652 : 			goto reachDest;
; 2653 : 
; 2654 : 		if (pointLen2(nowX, nowY, nGx, nGy) <= vx * vx + vy * vy)

  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowY@@3MA
  000aa	83 ec 10	 sub	 esp, 16			; 00000010H
  000ad	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR [esp+12], xmm3
  000b3	f3 0f 11 54 24
	08		 movss	 DWORD PTR [esp+8], xmm2
  000b9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowX@@3MA
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	e8 00 00 00 00	 call	 ?pointLen2@@YAMMMMM@Z	; pointLen2
  000d1	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR $T2[ebp]
  000d6	83 c4 10	 add	 esp, 16			; 00000010H
  000d9	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR $T1[ebp]
  000de	0f 28 ca	 movaps	 xmm1, xmm2
  000e1	0f 28 c3	 movaps	 xmm0, xmm3
  000e4	f3 0f 59 ca	 mulss	 xmm1, xmm2
  000e8	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000ec	d9 5d f4	 fstp	 DWORD PTR tv190[ebp]
  000ef	f3 0f 58 c8	 addss	 xmm1, xmm0
  000f3	0f 2f 4d f4	 comiss	 xmm1, DWORD PTR tv190[ebp]
  000f7	73 12		 jae	 SHORT $LN12@mapMove

; 2662 : 		}
; 2663 : 		else
; 2664 : 		{
; 2665 : 			// ?
; 2666 : 			nowX += vx;
; 2667 : 			nowY += vy;

  000f9	f3 0f 58 15 00
	00 00 00	 addss	 xmm2, DWORD PTR ?nowY@@3MA
  00101	f3 0f 58 1d 00
	00 00 00	 addss	 xmm3, DWORD PTR ?nowX@@3MA
  00109	eb 2c		 jmp	 SHORT $LN8@mapMove
$LN12@mapMove:

; 2652 : 			goto reachDest;
; 2653 : 
; 2654 : 		if (pointLen2(nowX, nowY, nGx, nGy) <= vx * vx + vy * vy)

  0010b	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _nGy$1$[ebp]
$reachDest$15:

; 2655 : 		{
; 2656 : 		reachDest:
; 2657 : 			nowX = nGx;
; 2658 : 			nowY = nGy;
; 2659 : 			nowVx = 0;
; 2660 : 			nowVy = 0;
; 2661 : 			justGoalFlag = 1;	// JL注释 到达目的地

  00110	b8 01 00 00 00	 mov	 eax, 1
  00115	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVx@@3MA, 0
  0011f	0f 28 d3	 movaps	 xmm2, xmm3
  00122	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVy@@3MA, 0
  0012c	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _nGx$1$[ebp]
  00131	66 a3 00 00 00
	00		 mov	 WORD PTR ?justGoalFlag@@3FA, ax ; justGoalFlag
$LN8@mapMove:

; 2668 : 		}
; 2669 : 
; 2670 : 
; 2671 : 
; 2672 : 		setPcAction(ANIM_WALK);

  00137	6a 04		 push	 4
  00139	f3 0f 11 1d 00
	00 00 00	 movss	 DWORD PTR ?nowX@@3MA, xmm3
  00141	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?nowY@@3MA, xmm2
  00149	e8 00 00 00 00	 call	 ?setPcAction@@YAXH@Z	; setPcAction
  0014e	83 c4 04	 add	 esp, 4

; 2673 : 		setPcWalkFlag();

  00151	e8 00 00 00 00	 call	 ?setPcWalkFlag@@YAXXZ	; setPcWalkFlag

; 2674 : 
; 2675 : 		if (pc.ptAct != NULL)

  00156	a1 ec 50 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+20716
  0015b	85 c0		 test	 eax, eax
  0015d	74 0d		 je	 SHORT $LN9@mapMove

; 2676 : 			mapEffectMoveDir = pc.ptAct->anim_ang;

  0015f	66 8b 80 54 01
	00 00		 mov	 ax, WORD PTR [eax+340]
$LN13@mapMove:

; 2687 : 	}
; 2688 : 
; 2689 : 	{
; 2690 : 		nowGx = (int)(nowX / GRID_SIZE);

  00166	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectMoveDir@@3FA, ax ; mapEffectMoveDir
$LN9@mapMove:
  0016c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowX@@3MA
  00174	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  0017c	f3 0f 2c c0	 cvttss2si eax, xmm0

; 2691 : 		nowGy = (int)(nowY / GRID_SIZE);

  00180	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowY@@3MA
  00188	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  00190	a3 00 00 00 00	 mov	 DWORD PTR ?nowGx@@3HA, eax ; nowGx
  00195	f3 0f 2c c0	 cvttss2si eax, xmm0
  00199	a3 00 00 00 00	 mov	 DWORD PTR ?nowGy@@3HA, eax ; nowGy

; 2692 : 	}
; 2693 : 	// PC?????????????
; 2694 : 	setPcPoint();

  0019e	e8 00 00 00 00	 call	 ?setPcPoint@@YAXXZ	; setPcPoint

; 2695 : }

  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c3		 ret	 0
?_mapMove@@YAXXZ ENDP					; _mapMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setPartyMovePoint@@YAXXZ
_TEXT	SEGMENT
?setPartyMovePoint@@YAXXZ PROC				; setPartyMovePoint, COMDAT

; 2603 : 	int i;
; 2604 : 	ACTION *ptAct, *ptActNext;
; 2605 : 
; 2606 : 	if (partyModeFlag != 0 && (pc.status & CHR_STATUS_LEADER) != 0)

  00000	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?partyModeFlag@@3FA, 0 ; partyModeFlag
  00008	0f 84 ed 00 00
	00		 je	 $LN16@setPartyMo
  0000e	f7 05 a4 00 00
	00 00 01 00 00	 test	 DWORD PTR ?pc@@3UPC@@A+164, 256 ; 00000100H
  00018	0f 84 dd 00 00
	00		 je	 $LN16@setPartyMo

; 2607 : 	{
; 2608 : 		for (i = 1; i < MAX_PARTY; i++)

  0001e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42800000
  00026	57		 push	 edi
  00027	bf 01 00 00 00	 mov	 edi, 1
  0002c	56		 push	 esi
  0002d	0f 1f 00	 npad	 3
$LL4@setPartyMo:

; 2609 : 		{
; 2610 : 			if (_partyTbl[i] >= 0)

  00030	0f b7 04 7d 00
	00 00 00	 movzx	 eax, WORD PTR ?_partyTbl@@3PAFA[edi*2]
  00038	66 85 c0	 test	 ax, ax
  0003b	0f 88 b8 00 00
	00		 js	 $LN20@setPartyMo

; 2611 : 			{
; 2612 : 				ptAct = party[_partyTbl[i]].ptAct;

  00041	98		 cwde
  00042	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00045	c1 e0 04	 shl	 eax, 4
  00048	8b b0 2c 00 00
	00		 mov	 esi, DWORD PTR ?party@@3PAUPARTY@@A[eax+44]
  0004e	66 0f 6e 86 bc
	00 00 00	 movd	 xmm0, DWORD PTR [esi+188]

; 2613 : 
; 2614 : 				// ???????????
; 2615 : 				if ((float)ptAct->nextGx * GRID_SIZE == ptAct->mx && (float)ptAct->nextGy * GRID_SIZE == ptAct->my)

  00056	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00059	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0005d	0f 2e 86 18 01
	00 00		 ucomiss xmm0, DWORD PTR [esi+280]
  00064	9f		 lahf
  00065	f6 c4 44	 test	 ah, 68			; 00000044H
  00068	0f 8a 81 00 00
	00		 jp	 $LN2@setPartyMo
  0006e	66 0f 6e 86 c0
	00 00 00	 movd	 xmm0, DWORD PTR [esi+192]
  00076	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00079	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0007d	0f 2e 86 1c 01
	00 00		 ucomiss xmm0, DWORD PTR [esi+284]
  00084	9f		 lahf
  00085	f6 c4 44	 test	 ah, 68			; 00000044H
  00088	7a 65		 jp	 SHORT $LN2@setPartyMo

; 2616 : 				{
; 2617 : 					// ?????????????
; 2618 : 					if (ptAct->bufCount > 0)

  0008a	66 83 be 14 01
	00 00 00	 cmp	 WORD PTR [esi+276], 0
  00092	7e 5b		 jle	 SHORT $LN2@setPartyMo

; 2619 : 					{
; 2620 : 						setCharMovePoint(ptAct, ptAct->bufGx[0], ptAct->bufGy[0]);

  00094	ff b6 ec 00 00
	00		 push	 DWORD PTR [esi+236]
  0009a	ff b6 c4 00 00
	00		 push	 DWORD PTR [esi+196]
  000a0	56		 push	 esi
  000a1	e8 00 00 00 00	 call	 ?setCharMovePoint@@YAXPAUaction@@HH@Z ; setCharMovePoint

; 2621 : 						shiftBufCount(ptAct);

  000a6	56		 push	 esi
  000a7	e8 00 00 00 00	 call	 ?shiftBufCount@@YAXPAUaction@@@Z ; shiftBufCount

; 2622 : 						// ??????????
; 2623 : 						if (_partyTbl[i + 1] >= 0 && (i + 1) < MAX_PARTY)

  000ac	0f b7 0c 7d 02
	00 00 00	 movzx	 ecx, WORD PTR ?_partyTbl@@3PAFA[edi*2+2]
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
  000b7	66 85 c9	 test	 cx, cx
  000ba	78 2b		 js	 SHORT $LN18@setPartyMo
  000bc	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000bf	83 f8 05	 cmp	 eax, 5
  000c2	7d 23		 jge	 SHORT $LN18@setPartyMo

; 2624 : 						{
; 2625 : 							ptActNext = party[_partyTbl[i + 1]].ptAct;
; 2626 : 							stockCharMovePoint(ptActNext, ptAct->gx, ptAct->gy);

  000c4	ff b6 b8 00 00
	00		 push	 DWORD PTR [esi+184]
  000ca	0f bf c1	 movsx	 eax, cx
  000cd	ff b6 b4 00 00
	00		 push	 DWORD PTR [esi+180]
  000d3	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d6	c1 e0 04	 shl	 eax, 4
  000d9	ff b0 2c 00 00
	00		 push	 DWORD PTR ?party@@3PAUPARTY@@A[eax+44]
  000df	e8 00 00 00 00	 call	 ?stockCharMovePoint@@YAXPAUaction@@HH@Z ; stockCharMovePoint
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@setPartyMo:

; 2607 : 	{
; 2608 : 		for (i = 1; i < MAX_PARTY; i++)

  000e7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42800000
$LN2@setPartyMo:
  000ef	47		 inc	 edi
  000f0	83 ff 05	 cmp	 edi, 5
  000f3	0f 8c 37 ff ff
	ff		 jl	 $LL4@setPartyMo
$LN20@setPartyMo:
  000f9	5e		 pop	 esi
  000fa	5f		 pop	 edi
$LN16@setPartyMo:

; 2627 : 						}
; 2628 : 					}
; 2629 : 				}
; 2630 : 			}
; 2631 : 			else
; 2632 : 				break;
; 2633 : 		}
; 2634 : 	}
; 2635 : }

  000fb	c3		 ret	 0
?setPartyMovePoint@@YAXXZ ENDP				; setPartyMovePoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setPcMovePointToChar@@YAXHH@Z
_TEXT	SEGMENT
_gx$ = 8						; size = 4
_gy$ = 12						; size = 4
?setPcMovePointToChar@@YAXHH@Z PROC			; setPcMovePointToChar, COMDAT

; 2591 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2592 : 	if (partyModeFlag != 0 && (pc.status & CHR_STATUS_LEADER) != 0)

  00003	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?partyModeFlag@@3FA, 0 ; partyModeFlag
  0000b	74 32		 je	 SHORT $LN3@setPcMoveP
  0000d	f7 05 a4 00 00
	00 00 01 00 00	 test	 DWORD PTR ?pc@@3UPC@@A+164, 256 ; 00000100H
  00017	74 26		 je	 SHORT $LN3@setPcMoveP

; 2593 : 	{
; 2594 : 		if (_partyTbl[1] >= 0)

  00019	66 a1 02 00 00
	00		 mov	 ax, WORD PTR ?_partyTbl@@3PAFA+2
  0001f	66 85 c0	 test	 ax, ax
  00022	78 1b		 js	 SHORT $LN3@setPcMoveP

; 2595 : 			stockCharMovePoint(party[_partyTbl[1]].ptAct, gx, gy);

  00024	ff 75 0c	 push	 DWORD PTR _gy$[ebp]
  00027	98		 cwde
  00028	ff 75 08	 push	 DWORD PTR _gx$[ebp]
  0002b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002e	c1 e0 04	 shl	 eax, 4
  00031	ff b0 2c 00 00
	00		 push	 DWORD PTR ?party@@3PAUPARTY@@A[eax+44]
  00037	e8 00 00 00 00	 call	 ?stockCharMovePoint@@YAXPAUaction@@HH@Z ; stockCharMovePoint
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@setPcMoveP:

; 2596 : 	}
; 2597 : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?setPcMovePointToChar@@YAXHH@Z ENDP			; setPcMovePointToChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_getMoveRoute2@@YAXXZ
_TEXT	SEGMENT
?_getMoveRoute2@@YAXXZ PROC				; _getMoveRoute2, COMDAT

; 2852 : {

  00000	56		 push	 esi

; 2853 : 	int i;
; 2854 : 
; 2855 : 	for (i = 0; i < MOVE_MAX2 && moveRouteCnt > 0; i++)

  00001	66 8b 35 00 00
	00 00		 mov	 si, WORD PTR ?moveRouteCnt2@@3FA ; moveRouteCnt2
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@getMoveRou:
  00010	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?moveRouteCnt@@3FA, 0 ; moveRouteCnt
  00018	7e 1e		 jle	 SHORT $LN3@getMoveRou

; 2856 : 	{
; 2857 : 		moveRoute2[moveRouteCnt2] = moveRoute[0];

  0001a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?moveRoute@@3PAFA
  00020	0f bf ce	 movsx	 ecx, si

; 2858 : 		moveRouteCnt2++;

  00023	66 46		 inc	 si
  00025	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?moveRoute2@@3PAFA[ecx*2], ax

; 2859 : 		shiftRouteMap();

  0002d	e8 00 00 00 00	 call	 ?shiftRouteMap@@YAXXZ	; shiftRouteMap
  00032	47		 inc	 edi
  00033	83 ff 01	 cmp	 edi, 1
  00036	7c d8		 jl	 SHORT $LL4@getMoveRou
$LN3@getMoveRou:

; 2858 : 		moveRouteCnt2++;

  00038	5f		 pop	 edi
  00039	66 89 35 00 00
	00 00		 mov	 WORD PTR ?moveRouteCnt2@@3FA, si ; moveRouteCnt2
  00040	5e		 pop	 esi

; 2860 : 	}
; 2861 : }

  00041	c3		 ret	 0
?_getMoveRoute2@@YAXXZ ENDP				; _getMoveRoute2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_execEtcEvent@@YAHXZ
_TEXT	SEGMENT
?_execEtcEvent@@YAHXZ PROC				; _execEtcEvent, COMDAT

; 2819 : 	if (_etcEventFlag)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?_etcEventFlag@@3HA, 0 ; _etcEventFlag
  00007	74 6c		 je	 SHORT $LN7@execEtcEve

; 2820 : 	{
; 2821 : 		if (justGoalFlag)

  00009	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?justGoalFlag@@3FA, 0 ; justGoalFlag
  00011	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?_etcEventStep@@3FA ; _etcEventStep
  00017	74 0d		 je	 SHORT $LN6@execEtcEve

; 2822 : 		{
; 2823 : 			if (_etcEventStep > 0)

  00019	66 85 c0	 test	 ax, ax
  0001c	7e 0d		 jle	 SHORT $LN13@execEtcEve

; 2824 : 				_etcEventStep--;

  0001e	66 48		 dec	 ax
  00020	66 a3 00 00 00
	00		 mov	 WORD PTR ?_etcEventStep@@3FA, ax ; _etcEventStep
$LN6@execEtcEve:

; 2825 : 		}
; 2826 : 		if (_etcEventStep <= 0)

  00026	66 85 c0	 test	 ax, ax
  00029	7f 4a		 jg	 SHORT $LN7@execEtcEve
$LN13@execEtcEve:

; 2827 : 		{
; 2828 : 			switch (_etcEventMode)

  0002b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?_etcEventMode@@3FA ; _etcEventMode
  00032	83 e8 01	 sub	 eax, 1
  00035	74 21		 je	 SHORT $LN8@execEtcEve
  00037	83 e8 01	 sub	 eax, 1
  0003a	74 0c		 je	 SHORT $LN9@execEtcEve
  0003c	83 e8 01	 sub	 eax, 1
  0003f	75 1c		 jne	 SHORT $LN2@execEtcEve

; 2839 : 				case etcEventMode_Enemy:
; 2840 : 					_sendEnemyEvent();

  00041	e8 00 00 00 00	 call	 ?_sendEnemyEvent@@YAXXZ	; _sendEnemyEvent
  00046	eb 15		 jmp	 SHORT $LN2@execEtcEve
$LN9@execEtcEve:

; 2832 : 					break;
; 2833 : 				case etcEventMode_LocalEncount:
; 2834 : 					//cary 旧版遇敌
; 2835 : 					if (!bNewServer)

  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0004f	75 0c		 jne	 SHORT $LN2@execEtcEve

; 2836 : 						_sendEncount();

  00051	e8 00 00 00 00	 call	 ?_sendEncount@@YAXXZ	; _sendEncount

; 2837 : 					//end test
; 2838 : 					break;

  00056	eb 05		 jmp	 SHORT $LN2@execEtcEve
$LN8@execEtcEve:

; 2829 : 			{
; 2830 : 				case etcEventMode_Warp:
; 2831 : 					_sendWarpEvent();

  00058	e8 00 00 00 00	 call	 ?_sendWarpEvent@@YAXXZ	; _sendWarpEvent
$LN2@execEtcEve:

; 2841 : 					break;
; 2842 : 			}
; 2843 : 			_etcEventFlag = FALSE;
; 2844 : 			_etcEventStep = 0;

  0005d	33 c0		 xor	 eax, eax
  0005f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?_etcEventFlag@@3HA, 0 ; _etcEventFlag
  00069	66 a3 00 00 00
	00		 mov	 WORD PTR ?_etcEventStep@@3FA, ax ; _etcEventStep

; 2845 : 			return TRUE;

  0006f	b8 01 00 00 00	 mov	 eax, 1

; 2849 : }

  00074	c3		 ret	 0
$LN7@execEtcEve:

; 2846 : 		}
; 2847 : 	}
; 2848 : 	return FALSE;

  00075	33 c0		 xor	 eax, eax

; 2849 : }

  00077	c3		 ret	 0
?_execEtcEvent@@YAHXZ ENDP				; _execEtcEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_etcEventCheck@@YAXXZ
_TEXT	SEGMENT
_dir$1$ = -8						; size = 4
_ogy$1$ = -8						; size = 4
_tmpDir$ = -4						; size = 4
?_etcEventCheck@@YAXXZ PROC				; _etcEventCheck, COMDAT

; 2755 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2756 : 	int i, dir, gx, gy, ogx, ogy;
; 2757 : 	BOOL breakFlag;
; 2758 : 	float tmpDir;
; 2759 : 
; 2760 : 	gx = nowGx;
; 2761 : 	gy = nowGy;

  00007	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowGy@@3HA ; nowGy

; 2762 : 	ogx = gx;
; 2763 : 	ogy = gy;
; 2764 : 	breakFlag = FALSE;
; 2765 : 
; 2766 : 	for (i = 0; i < moveRouteCnt2; i++)

  0000d	33 c0		 xor	 eax, eax
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowGx@@3HA ; nowGx
  00017	33 f6		 xor	 esi, esi
  00019	8b d7		 mov	 edx, edi
  0001b	89 5d f8	 mov	 DWORD PTR _ogy$1$[ebp], ebx
  0001e	66 3b 05 00 00
	00 00		 cmp	 ax, WORD PTR ?moveRouteCnt2@@3FA ; moveRouteCnt2
  00025	0f 8d cb 00 00
	00		 jge	 $LN12@etcEventCh
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@etcEventCh:

; 2767 : 	{
; 2768 : 		gx += moveAddTbl[moveRoute2[i]][0];

  00030	0f bf 0c 75 00
	00 00 00	 movsx	 ecx, WORD PTR ?moveRoute2@@3PAFA[esi*2]

; 2769 : 		gy += moveAddTbl[moveRoute2[i]][1];
; 2770 : 		tmpDir = Atan((float)(gx - ogx), (float)(gy - ogy)) + 22.5F;

  00038	83 ec 08	 sub	 esp, 8
  0003b	0f bf 04 8d 00
	00 00 00	 movsx	 eax, WORD PTR ?moveAddTbl@@3PAY01FA[ecx*4]
  00043	03 f8		 add	 edi, eax
  00045	0f bf 04 8d 02
	00 00 00	 movsx	 eax, WORD PTR ?moveAddTbl@@3PAY01FA[ecx*4+2]
  0004d	03 d8		 add	 ebx, eax
  0004f	8b c3		 mov	 eax, ebx
  00051	2b 45 f8	 sub	 eax, DWORD PTR _ogy$1$[ebp]
  00054	66 0f 6e c0	 movd	 xmm0, eax
  00058	8b c7		 mov	 eax, edi
  0005a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0005d	2b c2		 sub	 eax, edx
  0005f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00065	66 0f 6e c0	 movd	 xmm0, eax
  00069	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  00076	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 2771 : 		AdjustDir(&tmpDir);

  0007c	8d 45 fc	 lea	 eax, DWORD PTR _tmpDir$[ebp]
  0007f	50		 push	 eax
  00080	d9 5d fc	 fstp	 DWORD PTR _tmpDir$[ebp]
  00083	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 2772 : 		dir = (int)(tmpDir / 45);

  00088	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _tmpDir$[ebp]
  0008d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000

; 2773 : 
; 2774 : 		if (_checkEnemyEvent(gx, gy))

  00095	53		 push	 ebx
  00096	57		 push	 edi
  00097	f3 0f 2c c0	 cvttss2si eax, xmm0
  0009b	89 45 f8	 mov	 DWORD PTR _dir$1$[ebp], eax
  0009e	e8 00 00 00 00	 call	 ?_checkEnemyEvent@@YAHHH@Z ; _checkEnemyEvent
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	85 c0		 test	 eax, eax
  000a8	0f 85 9d 00 00
	00		 jne	 $LN15@etcEventCh

; 2784 : 			break;
; 2785 : 		}
; 2786 : 		else if (_checkWarpEvent(gx, gy))

  000ae	53		 push	 ebx
  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?_checkWarpEvent@@YAHHH@Z ; _checkWarpEvent
  000b5	83 c4 08	 add	 esp, 8
  000b8	85 c0		 test	 eax, eax
  000ba	75 6f		 jne	 SHORT $LN16@etcEventCh

; 2793 : 		}
; 2794 : 		else if (_checkEncount())

  000bc	e8 00 00 00 00	 call	 ?_checkEncount@@YAHXZ	; _checkEncount
  000c1	85 c0		 test	 eax, eax
  000c3	75 38		 jne	 SHORT $LN17@etcEventCh

; 2762 : 	ogx = gx;
; 2763 : 	ogy = gy;
; 2764 : 	breakFlag = FALSE;
; 2765 : 
; 2766 : 	for (i = 0; i < moveRouteCnt2; i++)

  000c5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?moveRouteCnt2@@3FA ; moveRouteCnt2
  000cc	46		 inc	 esi

; 2803 : 			}
; 2804 : 			break;
; 2805 : 			//end cary
; 2806 : 		}
; 2807 : 		ogx = gx;
; 2808 : 		ogy = gy;

  000cd	89 5d f8	 mov	 DWORD PTR _ogy$1$[ebp], ebx
  000d0	8b d7		 mov	 edx, edi
  000d2	3b f0		 cmp	 esi, eax
  000d4	0f 8c 56 ff ff
	ff		 jl	 $LL4@etcEventCh
$LN22@etcEventCh:

; 2809 : 	}
; 2810 : 	if (i < MOVE_MAX2 && breakFlag)

  000da	33 c0		 xor	 eax, eax
$LN11@etcEventCh:
  000dc	83 fe 01	 cmp	 esi, 1
  000df	7d 15		 jge	 SHORT $LN12@etcEventCh
  000e1	85 c0		 test	 eax, eax
  000e3	74 11		 je	 SHORT $LN12@etcEventCh

; 2811 : 	{
; 2812 : 		moveRouteCnt2 = i + 1;

  000e5	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000e8	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt2@@3FA, ax ; moveRouteCnt2

; 2813 : 		moveRouteCnt = 0;

  000ee	33 c0		 xor	 eax, eax
  000f0	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt@@3FA, ax ; moveRouteCnt
$LN12@etcEventCh:

; 2814 : 	}
; 2815 : }

  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN17@etcEventCh:

; 2795 : 		{
; 2796 : 			//cary 旧版遇敌
; 2797 : 			if (!bNewServer)

  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  00104	75 d4		 jne	 SHORT $LN22@etcEventCh

; 2798 : 			{
; 2799 : 				_etcEventFlag = TRUE;
; 2800 : 				_etcEventStep = i + 1;

  00106	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00109	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?_etcEventFlag@@3HA, 1 ; _etcEventFlag
  00113	66 a3 00 00 00
	00		 mov	 WORD PTR ?_etcEventStep@@3FA, ax ; _etcEventStep

; 2801 : 				_etcEventMode = etcEventMode_LocalEncount;

  00119	b8 02 00 00 00	 mov	 eax, 2
  0011e	66 a3 00 00 00
	00		 mov	 WORD PTR ?_etcEventMode@@3FA, ax ; _etcEventMode

; 2802 : 				breakFlag = TRUE;

  00124	b8 01 00 00 00	 mov	 eax, 1
  00129	eb b1		 jmp	 SHORT $LN11@etcEventCh
$LN16@etcEventCh:

; 2787 : 		{
; 2788 : 			_etcEventFlag = TRUE;
; 2789 : 			_etcEventStep = i + 1;

  0012b	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0012e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?_etcEventFlag@@3HA, 1 ; _etcEventFlag
  00138	66 a3 00 00 00
	00		 mov	 WORD PTR ?_etcEventStep@@3FA, ax ; _etcEventStep

; 2790 : 			_etcEventMode = etcEventMode_Warp;

  0013e	b8 01 00 00 00	 mov	 eax, 1
  00143	66 a3 00 00 00
	00		 mov	 WORD PTR ?_etcEventMode@@3FA, ax ; _etcEventMode

; 2791 : 			breakFlag = TRUE;
; 2792 : 			break;

  00149	eb 91		 jmp	 SHORT $LN11@etcEventCh
$LN15@etcEventCh:

; 2775 : 		{
; 2776 : 			_etcEventFlag = TRUE;
; 2777 : 			_etcEventStep = i;
; 2778 : 			_etcEventMode = etcEventMode_Enemy;

  0014b	b8 03 00 00 00	 mov	 eax, 3
  00150	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?_etcEventFlag@@3HA, 1 ; _etcEventFlag
  0015a	66 a3 00 00 00
	00		 mov	 WORD PTR ?_etcEventMode@@3FA, ax ; _etcEventMode

; 2779 : 			_enemyEventDir = dir - 3;

  00160	8b 45 f8	 mov	 eax, DWORD PTR _dir$1$[ebp]
  00163	83 c0 fd	 add	 eax, -3			; fffffffdH
  00166	66 89 35 00 00
	00 00		 mov	 WORD PTR ?_etcEventStep@@3FA, si ; _etcEventStep
  0016d	a3 00 00 00 00	 mov	 DWORD PTR ?_enemyEventDir@@3HA, eax ; _enemyEventDir

; 2780 : 			if (_enemyEventDir < 0)

  00172	79 08		 jns	 SHORT $LN7@etcEventCh

; 2781 : 				_enemyEventDir += 8;

  00174	83 c0 08	 add	 eax, 8
  00177	a3 00 00 00 00	 mov	 DWORD PTR ?_enemyEventDir@@3HA, eax ; _enemyEventDir
$LN7@etcEventCh:

; 2782 : 			i--;

  0017c	4e		 dec	 esi

; 2783 : 			breakFlag = TRUE;

  0017d	b8 01 00 00 00	 mov	 eax, 1

; 2795 : 		{
; 2796 : 			//cary 旧版遇敌
; 2797 : 			if (!bNewServer)

  00182	e9 55 ff ff ff	 jmp	 $LN11@etcEventCh
?_etcEventCheck@@YAXXZ ENDP				; _etcEventCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?CheckCRC@@YAGPAEH@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_size$ = 12						; size = 4
?CheckCRC@@YAGPAEH@Z PROC				; CheckCRC, COMDAT

; 1443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1444 : 	unsigned short	crc = 0;
; 1445 : 	int		i;
; 1446 : 	
; 1447 : 	for (i = 0; i < size; i ++)

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	33 f6		 xor	 esi, esi
  0000c	85 ff		 test	 edi, edi
  0000e	7e 2c		 jle	 SHORT $LN3@CheckCRC
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _p$[ebp]
$LL4@CheckCRC:

; 1448 : 	{
; 1449 : 		crc = (crctab16[(crc >> 8) & 0xFF] ^ (crc << 8) ^ BitTable[p[i]]);

  00014	0f b6 0c 1e	 movzx	 ecx, BYTE PTR [esi+ebx]
  00018	46		 inc	 esi
  00019	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR ?BitTable@@3PAEA[ecx]
  00020	0f b7 c8	 movzx	 ecx, ax
  00023	c1 e9 08	 shr	 ecx, 8
  00026	c1 e0 08	 shl	 eax, 8
  00029	66 33 14 4d 00
	00 00 00	 xor	 dx, WORD PTR ?crctab16@@3PAGA[ecx*2]
  00031	66 33 d0	 xor	 dx, ax
  00034	0f b7 c2	 movzx	 eax, dx
  00037	3b f7		 cmp	 esi, edi
  00039	7c d9		 jl	 SHORT $LL4@CheckCRC

; 1450 : 	}
; 1451 : 	return crc;

  0003b	5b		 pop	 ebx
$LN3@CheckCRC:
  0003c	5f		 pop	 edi

; 1452 : }

  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?CheckCRC@@YAGPAEH@Z ENDP				; CheckCRC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?sort_parts@@YAHPAUPARTS@@0@Z
_TEXT	SEGMENT
_w$ = 8							; size = 2
_ptc$ = 8						; size = 4
_h$ = 12						; size = 2
_ptp$ = 12						; size = 4
?sort_parts@@YAHPAUPARTS@@0@Z PROC			; sort_parts, COMDAT

; 738  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 739  : 	S2 w, h;
; 740  : 	if (ptc->mx > ptp->mx && ptc->my < ptp->my)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _ptp$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _ptc$[ebp]
  0000b	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00010	0f 2f 46 08	 comiss	 xmm0, DWORD PTR [esi+8]
  00014	76 0b		 jbe	 SHORT $LN2@sort_parts
  00016	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0001b	0f 2f 47 0c	 comiss	 xmm0, DWORD PTR [edi+12]
  0001f	77 66		 ja	 SHORT $LN10@sort_parts
$LN2@sort_parts:

; 741  : 		return 1;
; 742  : 	else
; 743  : 	{
; 744  : 		realGetHitPoints(ptp->bmpNO, &w, &h);

  00021	8d 45 0c	 lea	 eax, DWORD PTR _h$[ebp]
  00024	50		 push	 eax
  00025	8d 45 08	 lea	 eax, DWORD PTR _w$[ebp]
  00028	50		 push	 eax
  00029	ff 76 10	 push	 DWORD PTR [esi+16]
  0002c	e8 00 00 00 00	 call	 ?realGetHitPoints@@YAHKPAF0@Z ; realGetHitPoints

; 745  : 		if (ptc->x > ptp->x)

  00031	8b 07		 mov	 eax, DWORD PTR [edi]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00038	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0003b	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  0003e	3b c1		 cmp	 eax, ecx
  00040	7e 1c		 jle	 SHORT $LN4@sort_parts

; 746  : 		{
; 747  : 			if (ptp->y - (w - 1) * SURFACE_HEIGHT / 2 <= ptc->y)

  00042	0f bf 45 08	 movsx	 eax, WORD PTR _w$[ebp]
  00046	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00049	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  0004e	c1 e1 04	 shl	 ecx, 4
  00051	2b c1		 sub	 eax, ecx
  00053	99		 cdq
  00054	2b c2		 sub	 eax, edx
  00056	d1 f8		 sar	 eax, 1
  00058	03 c6		 add	 eax, esi
  0005a	3b c7		 cmp	 eax, edi
  0005c	eb 20		 jmp	 SHORT $LN13@sort_parts
$LN4@sort_parts:

; 748  : 				return -1;
; 749  : 		}
; 750  : 		else if (ptc->x < ptp->x)

  0005e	7d 1c		 jge	 SHORT $LN7@sort_parts

; 751  : 		{
; 752  : 			if (ptp->y - (h - 1) * SURFACE_HEIGHT / 2 <= ptc->y)

  00060	0f bf 45 0c	 movsx	 eax, WORD PTR _h$[ebp]
  00064	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00067	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  0006c	c1 e1 04	 shl	 ecx, 4
  0006f	2b c1		 sub	 eax, ecx
  00071	99		 cdq
  00072	2b c2		 sub	 eax, edx
  00074	d1 f8		 sar	 eax, 1
  00076	03 c6		 add	 eax, esi
  00078	3b c7		 cmp	 eax, edi
  0007a	eb 02		 jmp	 SHORT $LN13@sort_parts
$LN7@sort_parts:

; 753  : 				return -1;
; 754  : 		}
; 755  : 		else
; 756  : 		{
; 757  : 			if (ptp->y <= ptc->y)

  0007c	3b f7		 cmp	 esi, edi
$LN13@sort_parts:

; 758  : 				return -1;

  0007e	7f 07		 jg	 SHORT $LN10@sort_parts
  00080	5f		 pop	 edi
  00081	83 c8 ff	 or	 eax, -1

; 762  : 
; 763  : }

  00084	5e		 pop	 esi
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN10@sort_parts:
  00087	5f		 pop	 edi

; 759  : 		}
; 760  : 	}
; 761  : 	return 1;

  00088	b8 01 00 00 00	 mov	 eax, 1

; 762  : 
; 763  : }

  0008d	5e		 pop	 esi
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?sort_parts@@YAHPAUPARTS@@0@Z ENDP			; sort_parts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setEventMemory@@YAXHHG@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_ev$ = 16						; size = 2
?setEventMemory@@YAXHHG@Z PROC				; setEventMemory, COMDAT

; 472  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 473  : 	event[(y - mapAreaY1) * mapAreaWidth + (x - mapAreaX1)] = ev;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00006	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  0000c	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00013	66 8b 45 10	 mov	 ax, WORD PTR _ev$[ebp]
  00017	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  0001d	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  00020	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?event@@3PAGA[ecx*2], ax

; 474  : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?setEventMemory@@YAXHHG@Z ENDP				; setEventMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?createAutoMap@@YAHHHH@Z
_TEXT	SEGMENT
tv1404 = -17804						; size = 4
_fHeight$ = -17800					; size = 4
tv1402 = -17796						; size = 4
_len2$1$ = -17796					; size = 4
_fWidth$ = -17792					; size = 4
_height$2$ = -17788					; size = 4
_hitY$1 = -17788					; size = 2
_len$3$ = -17784					; size = 4
_y1$1$ = -17784						; size = 4
_bmpNo$2 = -17784					; size = 4
tv1394 = -17780						; size = 4
_i$1$ = -17780						; size = 4
tv1428 = -17773						; size = 1
tv1353 = -17772						; size = 4
$T3 = -17772						; size = 4
_fOffset$2$ = -17772					; size = 4
_fOffset$1$ = -17772					; size = 4
tv1434 = -17768						; size = 4
tv1433 = -17768						; size = 4
tv1405 = -17768						; size = 4
tv1421 = -17764						; size = 4
_x1$1$ = -17764						; size = 4
_hit$4 = -17764						; size = 2
tv1429 = -17760						; size = 4
_width$2$ = -17760					; size = 4
_hitX$5 = -17760					; size = 2
_parts$ = -17756					; size = 5832
_tile$ = -11924						; size = 5832
_event$ = -6092						; size = 5832
_filename$ = -260					; size = 255
__$ArrayPad$ = -4					; size = 4
_floor$ = 8						; size = 4
_gx$ = 12						; size = 4
_gy$ = 16						; size = 4
?createAutoMap@@YAHHHH@Z PROC				; createAutoMap, COMDAT

; 4029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 8c 45 00 00	 mov	 eax, 17804		; 0000458cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 4030 : 	FILE *fp;
; 4031 : 	char filename[255];
; 4032 : 	int fWidth, fHeight, fOffset, mWidth, width, height, fx, fy, mx, my, len, len2, i, j;
; 4033 : 	int x1, y1, x2, y2, index;
; 4034 : 	unsigned short tile[AUTO_MAPPING_W*AUTO_MAPPING_H];
; 4035 : 	unsigned short parts[AUTO_MAPPING_W*AUTO_MAPPING_H];
; 4036 : 	unsigned short event[AUTO_MAPPING_W*AUTO_MAPPING_H];
; 4037 : 
; 4038 : 	memset(autoMappingBuf, 0, sizeof(autoMappingBuf));

  00018	68 64 0b 00 00	 push	 2916			; 00000b64H
  0001d	6a 00		 push	 0
  0001f	68 00 00 00 00	 push	 OFFSET ?autoMappingBuf@@3PAY0DG@EA ; autoMappingBuf
  00024	e8 00 00 00 00	 call	 _memset

; 4039 : 	// ????????
; 4040 : 	sprintf(filename, "map\\%d.dat", floor);

  00029	ff 75 08	 push	 DWORD PTR _floor$[ebp]
  0002c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FCEGIJN@map?2?$CFd?4dat@
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _sprintf

; 4041 : 	// ????????
; 4042 : 	if ((fp = fopen(filename, "rb"))==NULL)

  0003d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _fopen
  0004e	8b f0		 mov	 esi, eax
  00050	83 c4 20	 add	 esp, 32			; 00000020H
  00053	85 f6		 test	 esi, esi
  00055	75 4a		 jne	 SHORT $LN30@createAuto

; 4043 : 	{
; 4044 : 		// ??????????????????
; 4045 : 		// ??????????
; 4046 : 		_mkdir("map");

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map@
  0005c	e8 00 00 00 00	 call	 __mkdir

; 4047 : 		// ?????????
; 4048 : 		fp = fopen(filename, "wb");

  00061	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _fopen

; 4049 : 		fclose(fp);

  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _fclose

; 4050 : 		// ??????????????
; 4051 : 		if ((fp = fopen(filename, "rb")) == NULL)

  00078	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _fopen
  00089	8b f0		 mov	 esi, eax
  0008b	83 c4 18	 add	 esp, 24			; 00000018H
  0008e	85 f6		 test	 esi, esi
  00090	75 0f		 jne	 SHORT $LN30@createAuto
  00092	5e		 pop	 esi

; 4166 : 				}
; 4167 : 			}
; 4168 : 		}
; 4169 : 	}
; 4170 : 
; 4171 : 	return TRUE;
; 4172 : }

  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	33 cd		 xor	 ecx, ebp
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
$LN30@createAuto:
  000a1	53		 push	 ebx
  000a2	57		 push	 edi

; 4052 : 			return FALSE;
; 4053 : 	}
; 4054 : 
; 4055 : 	memset(tile, 0, sizeof(tile));

  000a3	68 c8 16 00 00	 push	 5832			; 000016c8H
  000a8	8d 85 6c d1 ff
	ff		 lea	 eax, DWORD PTR _tile$[ebp]
  000ae	6a 00		 push	 0
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _memset

; 4056 : 	memset(parts, 0, sizeof(parts));

  000b6	68 c8 16 00 00	 push	 5832			; 000016c8H
  000bb	8d 85 a4 ba ff
	ff		 lea	 eax, DWORD PTR _parts$[ebp]
  000c1	6a 00		 push	 0
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memset

; 4057 : 	memset(event, 0, sizeof(event));

  000c9	68 c8 16 00 00	 push	 5832			; 000016c8H
  000ce	8d 85 34 e8 ff
	ff		 lea	 eax, DWORD PTR _event$[ebp]
  000d4	6a 00		 push	 0
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _memset

; 4058 : 	fseek(fp, 0, SEEK_SET);

  000dc	6a 00		 push	 0
  000de	6a 00		 push	 0
  000e0	56		 push	 esi
  000e1	e8 00 00 00 00	 call	 _fseek

; 4059 : 	fread(&fWidth,  sizeof(int), 1, fp);

  000e6	56		 push	 esi
  000e7	6a 01		 push	 1
  000e9	8d 85 80 ba ff
	ff		 lea	 eax, DWORD PTR _fWidth$[ebp]
  000ef	6a 04		 push	 4
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _fread
  000f7	83 c4 40	 add	 esp, 64			; 00000040H

; 4060 : 	fread(&fHeight, sizeof(int), 1, fp);

  000fa	8d 85 78 ba ff
	ff		 lea	 eax, DWORD PTR _fHeight$[ebp]
  00100	56		 push	 esi
  00101	6a 01		 push	 1
  00103	6a 04		 push	 4
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _fread
  0010b	8b 4d 0c	 mov	 ecx, DWORD PTR _gx$[ebp]
  0010e	83 c4 10	 add	 esp, 16			; 00000010H
  00111	8d 41 e5	 lea	 eax, DWORD PTR [ecx-27]
  00114	89 85 9c ba ff
	ff		 mov	 DWORD PTR _x1$1$[ebp], eax

; 4061 : 	x1 = gx - (AUTO_MAPPING_W >> 1);
; 4062 : 	y1 = gy - (AUTO_MAPPING_H >> 1);
; 4063 : 	x2 = x1 + AUTO_MAPPING_W;

  0011a	8d 79 1b	 lea	 edi, DWORD PTR [ecx+27]
  0011d	8b 45 10	 mov	 eax, DWORD PTR _gy$[ebp]
  00120	8d 50 e5	 lea	 edx, DWORD PTR [eax-27]
  00123	89 95 88 ba ff
	ff		 mov	 DWORD PTR _y1$1$[ebp], edx

; 4064 : 	y2 = y1 + AUTO_MAPPING_H;

  00129	8d 58 1b	 lea	 ebx, DWORD PTR [eax+27]

; 4065 : 	mWidth = x2 - x1;
; 4066 : 	width = mWidth;
; 4067 : 	height = y2 - y1;
; 4068 : 	mx = 0;
; 4069 : 	fx = x1;
; 4070 : 	if (x1 < 0)

  0012c	8b 85 9c ba ff
	ff		 mov	 eax, DWORD PTR _x1$1$[ebp]
  00132	ba 36 00 00 00	 mov	 edx, 54			; 00000036H
  00137	85 c0		 test	 eax, eax
  00139	8b ca		 mov	 ecx, edx
  0013b	0f 48 d7	 cmovs	 edx, edi
  0013e	89 95 a0 ba ff
	ff		 mov	 DWORD PTR _width$2$[ebp], edx

; 4071 : 	{
; 4072 : 		width += x1;
; 4073 : 		fx = 0;
; 4074 : 		mx -= x1;
; 4075 : 	}
; 4076 : 	if (x2 > fWidth)

  00144	33 d2		 xor	 edx, edx
  00146	85 c0		 test	 eax, eax
  00148	0f 49 d0	 cmovns	 edx, eax
  0014b	8b 85 80 ba ff
	ff		 mov	 eax, DWORD PTR _fWidth$[ebp]
  00151	89 95 8c ba ff
	ff		 mov	 DWORD PTR tv1394[ebp], edx
  00157	3b f8		 cmp	 edi, eax
  00159	7e 08		 jle	 SHORT $LN32@createAuto

; 4077 : 		width -= (x2 - fWidth);

  0015b	2b c7		 sub	 eax, edi
  0015d	01 85 a0 ba ff
	ff		 add	 DWORD PTR _width$2$[ebp], eax
$LN32@createAuto:

; 4078 : 	my = 0;
; 4079 : 	fy = y1;
; 4080 : 	if (y1 < 0)

  00163	8b 95 88 ba ff
	ff		 mov	 edx, DWORD PTR _y1$1$[ebp]
  00169	85 d2		 test	 edx, edx

; 4081 : 	{
; 4082 : 		height += y1;
; 4083 : 		fy = 0;
; 4084 : 		my -= y1;
; 4085 : 	}
; 4086 : 	if (y2 > fHeight)

  0016b	8b 85 78 ba ff
	ff		 mov	 eax, DWORD PTR _fHeight$[ebp]
  00171	0f 48 cb	 cmovs	 ecx, ebx
  00174	33 ff		 xor	 edi, edi
  00176	85 d2		 test	 edx, edx
  00178	89 8d 84 ba ff
	ff		 mov	 DWORD PTR _height$2$[ebp], ecx
  0017e	0f 49 fa	 cmovns	 edi, edx
  00181	89 bd 88 ba ff
	ff		 mov	 DWORD PTR _len$3$[ebp], edi
  00187	3b d8		 cmp	 ebx, eax
  00189	7e 0a		 jle	 SHORT $LN34@createAuto

; 4087 : 		height -= (y2 - fHeight);

  0018b	2b c3		 sub	 eax, ebx
  0018d	03 c8		 add	 ecx, eax
  0018f	89 8d 84 ba ff
	ff		 mov	 DWORD PTR _height$2$[ebp], ecx
$LN34@createAuto:

; 4088 : 
; 4089 : 	fOffset = sizeof(int) << 1;
; 4090 : 	len = fy * fWidth + fx;

  00195	8b df		 mov	 ebx, edi

; 4091 : 	len2 = my * mWidth + mx;

  00197	6b c2 ca	 imul	 eax, edx, -54
  0019a	0f af 9d 80 ba
	ff ff		 imul	 ebx, DWORD PTR _fWidth$[ebp]
  001a1	c7 85 94 ba ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1353[ebp], 0
  001ab	03 9d 8c ba ff
	ff		 add	 ebx, DWORD PTR tv1394[ebp]
  001b1	85 d2		 test	 edx, edx
  001b3	0f 49 85 94 ba
	ff ff		 cmovns	 eax, DWORD PTR tv1353[ebp]
  001ba	8b d0		 mov	 edx, eax
  001bc	2b 95 9c ba ff
	ff		 sub	 edx, DWORD PTR _x1$1$[ebp]
  001c2	83 bd 9c ba ff
	ff 00		 cmp	 DWORD PTR _x1$1$[ebp], 0
  001c9	0f 4d d0	 cmovge	 edx, eax
  001cc	8b 85 a0 ba ff
	ff		 mov	 eax, DWORD PTR _width$2$[ebp]
  001d2	03 c0		 add	 eax, eax
  001d4	89 95 7c ba ff
	ff		 mov	 DWORD PTR _len2$1$[ebp], edx
  001da	89 85 a0 ba ff
	ff		 mov	 DWORD PTR tv1429[ebp], eax

; 4092 : 	for (i = 0; i < height; i++)

  001e0	85 c9		 test	 ecx, ecx
  001e2	0f 8e 3e 01 00
	00		 jle	 $LN9@createAuto
  001e8	8d bd 6c d1 ff
	ff		 lea	 edi, DWORD PTR _tile$[ebp]
  001ee	89 8d 98 ba ff
	ff		 mov	 DWORD PTR tv1433[ebp], ecx
  001f4	8d 3c 57	 lea	 edi, DWORD PTR [edi+edx*2]
  001f7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@createAuto:

; 4093 : 	{
; 4094 : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  00200	6a 00		 push	 0
  00202	8d 04 5d 08 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+8]
  00209	50		 push	 eax
  0020a	56		 push	 esi
  0020b	e8 00 00 00 00	 call	 _fseek

; 4095 : 		fread(&tile[len2], sizeof(short) * width, 1, fp);

  00210	56		 push	 esi
  00211	6a 01		 push	 1
  00213	ff b5 a0 ba ff
	ff		 push	 DWORD PTR tv1429[ebp]
  00219	57		 push	 edi
  0021a	e8 00 00 00 00	 call	 _fread

; 4096 : 		len  += fWidth;

  0021f	8b 8d 80 ba ff
	ff		 mov	 ecx, DWORD PTR _fWidth$[ebp]
  00225	83 c4 1c	 add	 esp, 28			; 0000001cH
  00228	03 d9		 add	 ebx, ecx

; 4097 : 		len2 += mWidth;

  0022a	83 c7 6c	 add	 edi, 108		; 0000006cH
  0022d	83 ad 98 ba ff
	ff 01		 sub	 DWORD PTR tv1433[ebp], 1
  00234	75 ca		 jne	 SHORT $LL4@createAuto

; 4098 : 	}
; 4099 : 
; 4100 : 	fOffset += sizeof(short) * (fWidth * fHeight);

  00236	8b 85 78 ba ff
	ff		 mov	 eax, DWORD PTR _fHeight$[ebp]
  0023c	8d 9d a4 ba ff
	ff		 lea	 ebx, DWORD PTR _parts$[ebp]
  00242	8b bd a0 ba ff
	ff		 mov	 edi, DWORD PTR tv1429[ebp]
  00248	0f af c1	 imul	 eax, ecx
  0024b	8d 14 45 08 00
	00 00		 lea	 edx, DWORD PTR [eax*2+8]
  00252	8b 85 7c ba ff
	ff		 mov	 eax, DWORD PTR _len2$1$[ebp]
  00258	89 95 94 ba ff
	ff		 mov	 DWORD PTR _fOffset$1$[ebp], edx
  0025e	8d 04 43	 lea	 eax, DWORD PTR [ebx+eax*2]
  00261	8b 9d 88 ba ff
	ff		 mov	 ebx, DWORD PTR _len$3$[ebp]
  00267	0f af d9	 imul	 ebx, ecx
  0026a	89 85 9c ba ff
	ff		 mov	 DWORD PTR tv1421[ebp], eax
  00270	8b 85 84 ba ff
	ff		 mov	 eax, DWORD PTR _height$2$[ebp]
  00276	89 85 98 ba ff
	ff		 mov	 DWORD PTR tv1434[ebp], eax
  0027c	03 9d 8c ba ff
	ff		 add	 ebx, DWORD PTR tv1394[ebp]
$LL7@createAuto:

; 4101 : 	len = fy * fWidth + fx;
; 4102 : 	len2 = my * mWidth + mx;
; 4103 : 	for (i = 0; i < height; i++)
; 4104 : 	{
; 4105 : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  00282	6a 00		 push	 0
  00284	8d 04 5a	 lea	 eax, DWORD PTR [edx+ebx*2]
  00287	50		 push	 eax
  00288	56		 push	 esi
  00289	e8 00 00 00 00	 call	 _fseek

; 4106 : 		fread(&parts[len2], sizeof(short) * width, 1, fp);

  0028e	56		 push	 esi
  0028f	6a 01		 push	 1
  00291	57		 push	 edi
  00292	ff b5 9c ba ff
	ff		 push	 DWORD PTR tv1421[ebp]
  00298	e8 00 00 00 00	 call	 _fread

; 4107 : 		len  += fWidth;

  0029d	8b 8d 80 ba ff
	ff		 mov	 ecx, DWORD PTR _fWidth$[ebp]
  002a3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4108 : 		len2 += mWidth;

  002a6	83 85 9c ba ff
	ff 6c		 add	 DWORD PTR tv1421[ebp], 108 ; 0000006cH
  002ad	03 d9		 add	 ebx, ecx
  002af	83 ad 98 ba ff
	ff 01		 sub	 DWORD PTR tv1434[ebp], 1
  002b6	8b 95 94 ba ff
	ff		 mov	 edx, DWORD PTR _fOffset$1$[ebp]
  002bc	75 c4		 jne	 SHORT $LL7@createAuto

; 4109 : 	}
; 4110 : 	fOffset += sizeof(short) * (fWidth * fHeight);

  002be	8b 85 7c ba ff
	ff		 mov	 eax, DWORD PTR _len2$1$[ebp]
  002c4	8d 9d 34 e8 ff
	ff		 lea	 ebx, DWORD PTR _event$[ebp]
  002ca	8b bd 88 ba ff
	ff		 mov	 edi, DWORD PTR _len$3$[ebp]
  002d0	0f af f9	 imul	 edi, ecx
  002d3	8d 1c 43	 lea	 ebx, DWORD PTR [ebx+eax*2]
  002d6	8b 85 78 ba ff
	ff		 mov	 eax, DWORD PTR _fHeight$[ebp]
  002dc	0f af c1	 imul	 eax, ecx
  002df	03 bd 8c ba ff
	ff		 add	 edi, DWORD PTR tv1394[ebp]
  002e5	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  002e8	89 85 94 ba ff
	ff		 mov	 DWORD PTR _fOffset$2$[ebp], eax
  002ee	66 90		 npad	 2
$LL10@createAuto:

; 4111 : 	len = fy * fWidth + fx;
; 4112 : 	len2 = my * mWidth + mx;
; 4113 : 	for (i = 0; i < height; i++)
; 4114 : 	{
; 4115 : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  002f0	6a 00		 push	 0
  002f2	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
  002f5	50		 push	 eax
  002f6	56		 push	 esi
  002f7	e8 00 00 00 00	 call	 _fseek

; 4116 : 		fread(&event[len2], sizeof(short) * width, 1, fp);

  002fc	56		 push	 esi
  002fd	6a 01		 push	 1
  002ff	ff b5 a0 ba ff
	ff		 push	 DWORD PTR tv1429[ebp]
  00305	53		 push	 ebx
  00306	e8 00 00 00 00	 call	 _fread

; 4117 : 		len  += fWidth;

  0030b	03 bd 80 ba ff
	ff		 add	 edi, DWORD PTR _fWidth$[ebp]
  00311	83 c4 1c	 add	 esp, 28			; 0000001cH
  00314	8b 85 94 ba ff
	ff		 mov	 eax, DWORD PTR _fOffset$2$[ebp]

; 4118 : 		len2 += mWidth;

  0031a	83 c3 6c	 add	 ebx, 108		; 0000006cH
  0031d	83 ad 84 ba ff
	ff 01		 sub	 DWORD PTR _height$2$[ebp], 1
  00324	75 ca		 jne	 SHORT $LL10@createAuto
$LN9@createAuto:

; 4119 : 	}
; 4120 : 	fclose (fp);

  00326	56		 push	 esi
  00327	e8 00 00 00 00	 call	 _fclose
  0032c	83 c4 04	 add	 esp, 4
  0032f	ba 00 00 00 00	 mov	 edx, OFFSET ?autoMappingBuf@@3PAY0DG@EA ; autoMappingBuf
  00334	33 c9		 xor	 ecx, ecx
  00336	bb 00 40 00 00	 mov	 ebx, 16384		; 00004000H
  0033b	0f 1f 44 00 00	 npad	 5
$LL13@createAuto:

; 4123 : 	{
; 4124 : 		for (j = 0; j < AUTO_MAPPING_W; j++)

  00340	be 36 00 00 00	 mov	 esi, 54			; 00000036H
$LL60@createAuto:

; 4125 : 		{
; 4126 : 			// ???????????????????
; 4127 : 			if (event[i * AUTO_MAPPING_W + j] & MAP_SEE_FLAG)

  00345	66 85 9c 0d 34
	e8 ff ff	 test	 WORD PTR _event$[ebp+ecx], bx
  0034d	74 10		 je	 SHORT $LN61@createAuto

; 4128 : 			{
; 4129 : 				autoMappingBuf[i][j] = autoMapColorTbl[tile[i * AUTO_MAPPING_W + j]];

  0034f	0f b7 84 0d 6c
	d1 ff ff	 movzx	 eax, WORD PTR _tile$[ebp+ecx]
  00357	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?autoMapColorTbl@@3PAEA[eax]
  0035d	88 02		 mov	 BYTE PTR [edx], al
$LN61@createAuto:

; 4123 : 	{
; 4124 : 		for (j = 0; j < AUTO_MAPPING_W; j++)

  0035f	83 c1 02	 add	 ecx, 2
  00362	42		 inc	 edx
  00363	83 ee 01	 sub	 esi, 1
  00366	75 dd		 jne	 SHORT $LL60@createAuto

; 4121 : 	// ???
; 4122 : 	for (i = 0; i < AUTO_MAPPING_H; i++)

  00368	81 fa 64 0b 00
	00		 cmp	 edx, OFFSET ?autoMappingBuf@@3PAY0DG@EA+2916
  0036e	7c d0		 jl	 SHORT $LL13@createAuto

; 4130 : 			}
; 4131 : 		}
; 4132 : 	}
; 4133 : 	// ???
; 4134 : 	for (i = 0; i < AUTO_MAPPING_H; i++)

  00370	33 c0		 xor	 eax, eax
  00372	89 b5 8c ba ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
  00378	89 85 98 ba ff
	ff		 mov	 DWORD PTR tv1405[ebp], eax
  0037e	33 ff		 xor	 edi, edi
$LL19@createAuto:

; 4135 : 	{
; 4136 : 		for (j = 0; j < AUTO_MAPPING_W; j++)

  00380	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?autoMappingBuf@@3PAY0DG@EA[eax]
  00386	89 bd 7c ba ff
	ff		 mov	 DWORD PTR tv1402[ebp], edi
  0038c	33 f6		 xor	 esi, esi
  0038e	89 85 74 ba ff
	ff		 mov	 DWORD PTR tv1404[ebp], eax
  00394	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL22@createAuto:

; 4137 : 		{
; 4138 : 			// ???????????????????
; 4139 : 			if (event[i*AUTO_MAPPING_W+j] & MAP_SEE_FLAG)

  003a0	66 85 9c 3d 34
	e8 ff ff	 test	 WORD PTR _event$[ebp+edi], bx
  003a8	0f 84 eb 00 00
	00		 je	 $LN20@createAuto

; 4140 : 			{
; 4141 : 				index = autoMapColorTbl[parts[i * AUTO_MAPPING_W + j]];

  003ae	0f b7 84 3d a4
	ba ff ff	 movzx	 eax, WORD PTR _parts$[ebp+edi]
  003b6	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR ?autoMapColorTbl@@3PAEA[eax]
  003bc	88 9d 93 ba ff
	ff		 mov	 BYTE PTR tv1428[ebp], bl

; 4142 : 				if (index != 0)

  003c2	84 db		 test	 bl, bl
  003c4	0f 84 ca 00 00
	00		 je	 $LN89@createAuto

; 4143 : 				{
; 4144 : 					U4 bmpNo;
; 4145 : 					S2 hit, hitX, hitY;
; 4146 : 					int k, l;
; 4147 : 
; 4148 : 					realGetNo(parts[i * AUTO_MAPPING_W + j], &bmpNo);

  003ca	8d 8d 88 ba ff
	ff		 lea	 ecx, DWORD PTR _bmpNo$2[ebp]
  003d0	51		 push	 ecx
  003d1	50		 push	 eax
  003d2	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 4149 : 					// ?????
; 4150 : 					realGetHitFlag(bmpNo, &hit);

  003d7	8d 85 9c ba ff
	ff		 lea	 eax, DWORD PTR _hit$4[ebp]
  003dd	50		 push	 eax
  003de	ff b5 88 ba ff
	ff		 push	 DWORD PTR _bmpNo$2[ebp]
  003e4	e8 00 00 00 00	 call	 ?realGetHitFlag@@YAHKPAF@Z ; realGetHitFlag
  003e9	83 c4 10	 add	 esp, 16			; 00000010H

; 4151 : 					// ????????????
; 4152 : 					if (hit == 0)

  003ec	66 83 bd 9c ba
	ff ff 00	 cmp	 WORD PTR _hit$4[ebp], 0
  003f4	0f 85 91 00 00
	00		 jne	 $LN38@createAuto

; 4153 : 					{
; 4154 : 						realGetHitPoints(bmpNo, &hitX, &hitY);

  003fa	8d 85 84 ba ff
	ff		 lea	 eax, DWORD PTR _hitY$1[ebp]
  00400	50		 push	 eax
  00401	8d 85 a0 ba ff
	ff		 lea	 eax, DWORD PTR _hitX$5[ebp]
  00407	50		 push	 eax
  00408	ff b5 88 ba ff
	ff		 push	 DWORD PTR _bmpNo$2[ebp]
  0040e	e8 00 00 00 00	 call	 ?realGetHitPoints@@YAHKPAF0@Z ; realGetHitPoints

; 4155 : 						for (k = 0; k < hitY; k++)

  00413	0f bf 8d 84 ba
	ff ff		 movsx	 ecx, WORD PTR _hitY$1[ebp]
  0041a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0041d	89 8d 94 ba ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  00423	85 c9		 test	 ecx, ecx
  00425	7e 6d		 jle	 SHORT $LN89@createAuto

; 4153 : 					{
; 4154 : 						realGetHitPoints(bmpNo, &hitX, &hitY);

  00427	0f bf 9d a0 ba
	ff ff		 movsx	 ebx, WORD PTR _hitX$5[ebp]
  0042e	8b 95 8c ba ff
	ff		 mov	 edx, DWORD PTR _i$1$[ebp]
  00434	8b bd 98 ba ff
	ff		 mov	 edi, DWORD PTR tv1405[ebp]
  0043a	66 0f 1f 44 00
	00		 npad	 6
$LL25@createAuto:

; 4156 : 						{
; 4157 : 							for (l = 0; l < hitX; l++)

  00440	33 c0		 xor	 eax, eax
  00442	85 db		 test	 ebx, ebx
  00444	7e 2e		 jle	 SHORT $LN23@createAuto
$LL63@createAuto:

; 4158 : 							{
; 4159 : 								if ((i - k) >= 0 && (j + l) < AUTO_MAPPING_W)

  00446	85 d2		 test	 edx, edx
  00448	78 1f		 js	 SHORT $LN64@createAuto
  0044a	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  0044d	83 f9 36	 cmp	 ecx, 54			; 00000036H
  00450	7d 17		 jge	 SHORT $LN64@createAuto

; 4160 : 									autoMappingBuf[i - k][j + l] = index;

  00452	8a 9d 93 ba ff
	ff		 mov	 bl, BYTE PTR tv1428[ebp]
  00458	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  0045b	88 9c 31 00 00
	00 00		 mov	 BYTE PTR ?autoMappingBuf@@3PAY0DG@EA[ecx+esi], bl
  00462	0f bf 9d a0 ba
	ff ff		 movsx	 ebx, WORD PTR _hitX$5[ebp]
$LN64@createAuto:

; 4156 : 						{
; 4157 : 							for (l = 0; l < hitX; l++)

  00469	40		 inc	 eax
  0046a	3b c3		 cmp	 eax, ebx
  0046c	7c d8		 jl	 SHORT $LL63@createAuto
  0046e	8b 8d 94 ba ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
$LN23@createAuto:

; 4155 : 						for (k = 0; k < hitY; k++)

  00474	83 ef 36	 sub	 edi, 54			; 00000036H
  00477	4a		 dec	 edx
  00478	83 e9 01	 sub	 ecx, 1
  0047b	89 8d 94 ba ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  00481	75 bd		 jne	 SHORT $LL25@createAuto

; 4161 : 							}
; 4162 : 						}
; 4163 : 					}

  00483	8b bd 7c ba ff
	ff		 mov	 edi, DWORD PTR tv1402[ebp]
  00489	eb 09		 jmp	 SHORT $LN89@createAuto
$LN38@createAuto:

; 4164 : 					else
; 4165 : 						autoMappingBuf[i][j] = index;

  0048b	8b 85 74 ba ff
	ff		 mov	 eax, DWORD PTR tv1404[ebp]
  00491	88 1c 30	 mov	 BYTE PTR [eax+esi], bl
$LN89@createAuto:

; 4135 : 	{
; 4136 : 		for (j = 0; j < AUTO_MAPPING_W; j++)

  00494	bb 00 40 00 00	 mov	 ebx, 16384		; 00004000H
$LN20@createAuto:
  00499	46		 inc	 esi
  0049a	83 c7 02	 add	 edi, 2
  0049d	89 bd 7c ba ff
	ff		 mov	 DWORD PTR tv1402[ebp], edi
  004a3	83 fe 36	 cmp	 esi, 54			; 00000036H
  004a6	0f 8c f4 fe ff
	ff		 jl	 $LL22@createAuto

; 4130 : 			}
; 4131 : 		}
; 4132 : 	}
; 4133 : 	// ???
; 4134 : 	for (i = 0; i < AUTO_MAPPING_H; i++)

  004ac	8b 85 98 ba ff
	ff		 mov	 eax, DWORD PTR tv1405[ebp]
  004b2	ff 85 8c ba ff
	ff		 inc	 DWORD PTR _i$1$[ebp]
  004b8	83 c0 36	 add	 eax, 54			; 00000036H
  004bb	89 85 98 ba ff
	ff		 mov	 DWORD PTR tv1405[ebp], eax
  004c1	81 ff c8 16 00
	00		 cmp	 edi, 5832		; 000016c8H
  004c7	0f 8c b3 fe ff
	ff		 jl	 $LL19@createAuto

; 4166 : 				}
; 4167 : 			}
; 4168 : 		}
; 4169 : 	}
; 4170 : 
; 4171 : 	return TRUE;
; 4172 : }

  004cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d0	b8 01 00 00 00	 mov	 eax, 1
  004d5	5f		 pop	 edi
  004d6	5b		 pop	 ebx
  004d7	33 cd		 xor	 ecx, ebp
  004d9	5e		 pop	 esi
  004da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004df	8b e5		 mov	 esp, ebp
  004e1	5d		 pop	 ebp
  004e2	c3		 ret	 0
?createAutoMap@@YAHHHH@Z ENDP				; createAutoMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?delCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@@Z
_TEXT	SEGMENT
_pt1$ = 8						; size = 4
?delCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@@Z PROC ; delCharPartsPrio, COMDAT

; 3948 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3949 : 	if (pt1 == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pt1$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1a		 je	 SHORT $LN4@delCharPar

; 3950 : 		return;
; 3951 : 	// ????????????
; 3952 : 	if (pt1->pre == NULL)

  0000a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0000d	85 d2		 test	 edx, edx
  0000f	74 13		 je	 SHORT $LN4@delCharPar

; 3953 : 		return;
; 3954 : 	(pt1->pre)->next = pt1->next;

  00011	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00014	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 3955 : 	if (pt1->next != NULL)

  00017	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0001a	85 d2		 test	 edx, edx
  0001c	74 06		 je	 SHORT $LN4@delCharPar

; 3956 : 		(pt1->next)->pre = pt1->pre;

  0001e	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00021	89 42 24	 mov	 DWORD PTR [edx+36], eax
$LN4@delCharPar:

; 3957 : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?delCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@@Z ENDP ; delCharPartsPrio
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?addCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z
_TEXT	SEGMENT
_pt1$ = 8						; size = 4
_pt2$ = 12						; size = 4
?addCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z PROC ; addCharPartsPrio, COMDAT

; 3935 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3936 : 	if (pt1 == NULL || pt2 == NULL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pt1$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 1d		 je	 SHORT $LN3@addCharPar
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _pt2$[ebp]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 16		 je	 SHORT $LN3@addCharPar

; 3937 : 		return;
; 3938 : 
; 3939 : 	pt2->pre = pt1;

  00011	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 3940 : 	pt2->next = pt1->next;

  00014	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00017	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 3941 : 	if (pt1->next != NULL)

  0001a	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0001d	85 c0		 test	 eax, eax
  0001f	74 03		 je	 SHORT $LN4@addCharPar

; 3942 : 		(pt1->next)->pre = pt2;

  00021	89 48 24	 mov	 DWORD PTR [eax+36], ecx
$LN4@addCharPar:

; 3943 : 	pt1->next = pt2;

  00024	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$LN3@addCharPar:

; 3944 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?addCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ENDP ; addCharPartsPrio
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?insertCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z
_TEXT	SEGMENT
_pt1$ = 8						; size = 4
_pt2$ = 12						; size = 4
?insertCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z PROC ; insertCharPartsPrio, COMDAT

; 3923 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3924 : 	if (pt1 == NULL || pt2 == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pt1$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 19		 je	 SHORT $LN3@insertChar
  0000a	8b 55 0c	 mov	 edx, DWORD PTR _pt2$[ebp]
  0000d	85 d2		 test	 edx, edx
  0000f	74 12		 je	 SHORT $LN3@insertChar

; 3925 : 		return;
; 3926 : 
; 3927 : 	pt2->pre = pt1->pre;

  00011	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00014	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 3928 : 	pt2->next = pt1;

  00017	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 3929 : 	(pt1->pre)->next = pt2;

  0001a	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  0001d	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 3930 : 	pt1->pre = pt2;

  00020	89 51 24	 mov	 DWORD PTR [ecx+36], edx
$LN3@insertChar:

; 3931 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?insertCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ENDP ; insertCharPartsPrio
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?checkPrioPartsVsChar@@YAHPAUTAG_CHAR_PARTS_PRIORITY@@0@Z
_TEXT	SEGMENT
_h$ = -12						; size = 2
_w$ = -8						; size = 2
_prioType$ = -4						; size = 2
_ptc$ = 8						; size = 4
_hit$ = 12						; size = 2
_ptp$ = 12						; size = 4
?checkPrioPartsVsChar@@YAHPAUTAG_CHAR_PARTS_PRIORITY@@0@Z PROC ; checkPrioPartsVsChar, COMDAT

; 3843 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 3844 : 	short hit, prioType;
; 3845 : 	S2 w, h;
; 3846 : 
; 3847 : 	// ???????????
; 3848 : 	realGetPrioType(ptp->graNo, &prioType);

  00007	8b 75 0c	 mov	 esi, DWORD PTR _ptp$[ebp]
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _prioType$[ebp]
  0000d	57		 push	 edi
  0000e	50		 push	 eax
  0000f	ff 36		 push	 DWORD PTR [esi]
  00011	e8 00 00 00 00	 call	 ?realGetPrioType@@YAHKPAF@Z ; realGetPrioType

; 3849 : 	// ?????
; 3850 : 	realGetHitFlag(ptp->graNo, &hit);

  00016	8d 45 0c	 lea	 eax, DWORD PTR _hit$[ebp]
  00019	50		 push	 eax
  0001a	ff 36		 push	 DWORD PTR [esi]
  0001c	e8 00 00 00 00	 call	 ?realGetHitFlag@@YAHKPAF@Z ; realGetHitFlag

; 3851 : 	// ??? prioType == 3 ??????
; 3852 : 	if (hit != 0 && prioType == 3)

  00021	66 8b 45 fc	 mov	 ax, WORD PTR _prioType$[ebp]
  00025	83 c4 10	 add	 esp, 16			; 00000010H
  00028	66 83 7d 0c 00	 cmp	 WORD PTR _hit$[ebp], 0
  0002d	74 0a		 je	 SHORT $LN2@checkPrioP
  0002f	66 83 f8 03	 cmp	 ax, 3
  00033	0f 84 a2 00 00
	00		 je	 $LN17@checkPrioP
$LN2@checkPrioP:

; 3853 : 		return FALSE;
; 3854 : 	// ????
; 3855 : 	//  ????????
; 3856 : /*	if (329585 <= ptp->graNo && ptp->graNo <= 329590)
; 3857 : 		return FALSE;*/
; 3858 : 	if (prioType == 1)

  00039	8b 7d 08	 mov	 edi, DWORD PTR _ptc$[ebp]
  0003c	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  00041	f3 0f 10 4f 18	 movss	 xmm1, DWORD PTR [edi+24]
  00046	66 83 f8 01	 cmp	 ax, 1
  0004a	75 1f		 jne	 SHORT $LN5@checkPrioP

; 3859 : 	{
; 3860 : 		if (ptc->mx <= ptp->mx || ptc->my >= ptp->my)

  0004c	0f 2f c1	 comiss	 xmm0, xmm1
  0004f	0f 83 86 00 00
	00		 jae	 $LN17@checkPrioP
  00055	f3 0f 10 47 1c	 movss	 xmm0, DWORD PTR [edi+28]
  0005a	0f 2f 46 1c	 comiss	 xmm0, DWORD PTR [esi+28]
  0005e	73 7b		 jae	 SHORT $LN17@checkPrioP
$LN15@checkPrioP:
  00060	5f		 pop	 edi

; 3900 : 		}
; 3901 : 	}
; 3902 : #else
; 3903 : 	realGetHitPoints(ptp->graNo, &w, &h);
; 3904 : 	if (ptc->x >= ptp->x)
; 3905 : 	{
; 3906 : 		// PC???????
; 3907 : 		if (ptp->y - (w - 1) * SURFACE_HEIGHT / 2 < ptc->y)
; 3908 : 			return FALSE;
; 3909 : 	}
; 3910 : 	else
; 3911 : 	{
; 3912 : 		// PC???????
; 3913 : 		if (ptp->y - (h - 1) * SURFACE_HEIGHT / 2 < ptc->y)
; 3914 : 			return FALSE;
; 3915 : 	}
; 3916 : #endif
; 3917 : 
; 3918 : 	return TRUE;

  00061	b8 01 00 00 00	 mov	 eax, 1

; 3919 : }

  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN5@checkPrioP:

; 3861 : 			return FALSE;
; 3862 : 		else
; 3863 : 			return TRUE;
; 3864 : 	}
; 3865 : #if 0
; 3866 : 	// ????
; 3867 : 	//  ??????????
; 3868 : 	else if (prioType == 2)
; 3869 : 	{
; 3870 : 		// ????????????
; 3871 : 		if ((ptc->mx <= ptp->mx && ptc->my >= ptp->my) || (ptc->mx < ptp->mx-GRID_SIZE || ptc->my > ptp->my+GRID_SIZE))
; 3872 : 			return FALSE;
; 3873 : 		else
; 3874 : 			return TRUE;
; 3875 : 	}
; 3876 : #endif
; 3877 : 	// ??????????????
; 3878 : #if 1
; 3879 : 	if (ptc->mx > ptp->mx && ptc->my < ptp->my)

  0006b	0f 2f c8	 comiss	 xmm1, xmm0
  0006e	76 0b		 jbe	 SHORT $LN7@checkPrioP
  00070	f3 0f 10 46 1c	 movss	 xmm0, DWORD PTR [esi+28]
  00075	0f 2f 47 1c	 comiss	 xmm0, DWORD PTR [edi+28]
  00079	77 e5		 ja	 SHORT $LN15@checkPrioP
$LN7@checkPrioP:

; 3880 : 		return TRUE;
; 3881 : 	else
; 3882 : 	{
; 3883 : 		realGetHitPoints(ptp->graNo, &w, &h);

  0007b	8d 45 f4	 lea	 eax, DWORD PTR _h$[ebp]
  0007e	50		 push	 eax
  0007f	8d 45 f8	 lea	 eax, DWORD PTR _w$[ebp]
  00082	50		 push	 eax
  00083	ff 36		 push	 DWORD PTR [esi]
  00085	e8 00 00 00 00	 call	 ?realGetHitPoints@@YAHKPAF0@Z ; realGetHitPoints

; 3884 : 		if (ptc->x > ptp->x)

  0008a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00090	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00093	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00096	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
  00099	3b c1		 cmp	 eax, ecx
  0009b	7e 1c		 jle	 SHORT $LN9@checkPrioP

; 3885 : 		{
; 3886 : 			// PC???????
; 3887 : 			if (ptp->y - (w - 1) * SURFACE_HEIGHT / 2 <= ptc->y)

  0009d	0f bf 45 f8	 movsx	 eax, WORD PTR _w$[ebp]
  000a1	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000a4	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  000a9	c1 e1 04	 shl	 ecx, 4
  000ac	2b c1		 sub	 eax, ecx
  000ae	99		 cdq
  000af	2b c2		 sub	 eax, edx
  000b1	d1 f8		 sar	 eax, 1
  000b3	03 c6		 add	 eax, esi
  000b5	3b c7		 cmp	 eax, edi
  000b7	eb 20		 jmp	 SHORT $LN18@checkPrioP
$LN9@checkPrioP:

; 3888 : 				return FALSE;
; 3889 : 		}
; 3890 : 		else if (ptc->x < ptp->x)

  000b9	7d 1c		 jge	 SHORT $LN12@checkPrioP

; 3891 : 		{
; 3892 : 			// PC???????
; 3893 : 			if (ptp->y - (h - 1) * SURFACE_HEIGHT / 2 <= ptc->y)

  000bb	0f bf 45 f4	 movsx	 eax, WORD PTR _h$[ebp]
  000bf	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c2	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  000c7	c1 e1 04	 shl	 ecx, 4
  000ca	2b c1		 sub	 eax, ecx
  000cc	99		 cdq
  000cd	2b c2		 sub	 eax, edx
  000cf	d1 f8		 sar	 eax, 1
  000d1	03 c6		 add	 eax, esi
  000d3	3b c7		 cmp	 eax, edi
  000d5	eb 02		 jmp	 SHORT $LN18@checkPrioP
$LN12@checkPrioP:

; 3894 : 				return FALSE;
; 3895 : 		}
; 3896 : 		else
; 3897 : 		{
; 3898 : 			if (ptp->y <= ptc->y)

  000d7	3b f7		 cmp	 esi, edi
$LN18@checkPrioP:

; 3899 : 				return FALSE;

  000d9	7f 85		 jg	 SHORT $LN15@checkPrioP
$LN17@checkPrioP:
  000db	5f		 pop	 edi
  000dc	33 c0		 xor	 eax, eax

; 3919 : }

  000de	5e		 pop	 esi
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
?checkPrioPartsVsChar@@YAHPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ENDP ; checkPrioPartsVsChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?turnAround2@@YAXH@Z
_TEXT	SEGMENT
_dir2$ = 8						; size = 2
_dir$ = 8						; size = 4
?turnAround2@@YAXH@Z PROC				; turnAround2, COMDAT

; 3399 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3400 : 	char dir2[2];
; 3401 : 	static unsigned int turnSendTime = 0;
; 3402 : 
; 3403 : 	// ??????????????
; 3404 : 	if (dir < 0 || 7 < dir)

  00004	8b 75 08	 mov	 esi, DWORD PTR _dir$[ebp]
  00007	83 fe 07	 cmp	 esi, 7
  0000a	0f 87 9b 00 00
	00		 ja	 $LN8@turnAround

; 3405 : 		return;
; 3406 : 	// PC?????????????
; 3407 : 	if (pc.ptAct == NULL)

  00010	8b 0d ec 50 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+20716
  00016	85 c9		 test	 ecx, ecx
  00018	0f 84 8d 00 00
	00		 je	 $LN8@turnAround

; 3408 : 		return;
; 3409 : 	// ??????????
; 3410 : 	if (nowVx != 0 || nowVy != 0)

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowVx@@3MA
  00026	0f 57 c9	 xorps	 xmm1, xmm1
  00029	0f 2e c1	 ucomiss xmm0, xmm1
  0002c	9f		 lahf
  0002d	f6 c4 44	 test	 ah, 68			; 00000044H
  00030	7a 79		 jp	 SHORT $LN8@turnAround
  00032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowVy@@3MA
  0003a	0f 2e c1	 ucomiss xmm0, xmm1
  0003d	9f		 lahf
  0003e	f6 c4 44	 test	 ah, 68			; 00000044H
  00041	7a 68		 jp	 SHORT $LN8@turnAround

; 3411 : 		return;
; 3412 : 	// ???????????????????
; 3413 : 	if (etcSendFlag != 0 || etcEventFlag != 0)

  00043	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?etcSendFlag@@3FA, 0 ; etcSendFlag
  0004b	75 5e		 jne	 SHORT $LN8@turnAround
  0004d	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?etcEventFlag@@3FA, 0 ; etcEventFlag
  00055	75 54		 jne	 SHORT $LN8@turnAround

; 3414 : 		return;
; 3415 : 	// ???????????
; 3416 : 	if (pc.ptAct->anim_ang == dir)

  00057	39 b1 54 01 00
	00		 cmp	 DWORD PTR [ecx+340], esi
  0005d	74 4c		 je	 SHORT $LN8@turnAround

; 3417 : 		return;
; 3418 : 	// ??
; 3419 : 	if (turnSendTime + FIELD_BTN_PUSH_WAIT < TimeGetTime())

  0005f	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?turnSendTime@?1??turnAround2@@YAXH@Z@4IA
  0006a	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  00070	3b c8		 cmp	 ecx, eax
  00072	73 37		 jae	 SHORT $LN8@turnAround

; 3420 : 	{
; 3421 : 		setPcDir(dir);

  00074	56		 push	 esi
  00075	e8 00 00 00 00	 call	 ?setPcDir@@YAXH@Z	; setPcDir

; 3422 : 		dir2[0] = cnvServDir(dir, 1);

  0007a	6a 01		 push	 1
  0007c	56		 push	 esi
  0007d	e8 00 00 00 00	 call	 ?cnvServDir@@YADHH@Z	; cnvServDir
  00082	88 45 08	 mov	 BYTE PTR _dir2$[ebp], al

; 3423 : 		dir2[1] = '\0';
; 3424 : 		walkSendForServer(nowGx, nowGy, dir2);

  00085	8d 45 08	 lea	 eax, DWORD PTR _dir2$[ebp]
  00088	50		 push	 eax
  00089	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  0008f	c6 45 09 00	 mov	 BYTE PTR _dir2$[ebp+1], 0
  00093	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  00099	e8 00 00 00 00	 call	 ?walkSendForServer@@YAXHHPAD@Z ; walkSendForServer
  0009e	83 c4 18	 add	 esp, 24			; 00000018H

; 3425 : 		turnSendTime = TimeGetTime();

  000a1	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000a6	a3 00 00 00 00	 mov	 DWORD PTR ?turnSendTime@?1??turnAround2@@YAXH@Z@4IA, eax
$LN8@turnAround:
  000ab	5e		 pop	 esi

; 3426 : 	}
; 3427 : }

  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
?turnAround2@@YAXH@Z ENDP				; turnAround2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?turnAround@@YAXXZ
_TEXT	SEGMENT
_tmpDir$ = -8						; size = 4
_dir2$ = -4						; size = 2
?turnAround@@YAXXZ PROC					; turnAround, COMDAT

; 3362 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3363 : 	float tmpDir, tmpX, tmpY;
; 3364 : 	int dir;
; 3365 : 	char dir2[2];
; 3366 : 	static unsigned int turnSendTime = 0;
; 3367 : 
; 3368 : 	// PC?????????????
; 3369 : 	if (pc.ptAct == NULL)

  00006	83 3d ec 50 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20716, 0
  0000d	0f 84 01 01 00
	00		 je	 $LN6@turnAround

; 3370 : 		return;
; 3371 : 	// ??????????
; 3372 : 	if (nowVx != 0 || nowVy != 0)

  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowVx@@3MA
  0001b	0f 57 c9	 xorps	 xmm1, xmm1
  0001e	0f 2e c1	 ucomiss xmm0, xmm1
  00021	9f		 lahf
  00022	f6 c4 44	 test	 ah, 68			; 00000044H
  00025	0f 8a e9 00 00
	00		 jp	 $LN6@turnAround
  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowVy@@3MA
  00033	0f 2e c1	 ucomiss xmm0, xmm1
  00036	9f		 lahf
  00037	f6 c4 44	 test	 ah, 68			; 00000044H
  0003a	0f 8a d4 00 00
	00		 jp	 $LN6@turnAround

; 3373 : 		return;
; 3374 : 	// ???????????????????
; 3375 : 	if (etcSendFlag != 0 || etcEventFlag != 0)

  00040	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?etcSendFlag@@3FA, 0 ; etcSendFlag
  00048	0f 85 c6 00 00
	00		 jne	 $LN6@turnAround
  0004e	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?etcEventFlag@@3FA, 0 ; etcEventFlag
  00056	0f 85 b8 00 00
	00		 jne	 $LN6@turnAround

; 3376 : 		return;
; 3377 : 	{
; 3378 : 		tmpX = (float)(mouseMapGx - nowGx);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouseMapGx@@3HA ; mouseMapGx
  00061	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?nowGx@@3HA ; nowGx
  00067	56		 push	 esi

; 3379 : 		tmpY = (float)(mouseMapGy - nowGy);
; 3380 : 	}
; 3381 : 	tmpDir = Atan(tmpX, tmpY) + 22.5F;

  00068	83 ec 08	 sub	 esp, 8
  0006b	66 0f 6e c8	 movd	 xmm1, eax
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouseMapGy@@3HA ; mouseMapGy
  00074	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  0007a	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0007d	66 0f 6e c0	 movd	 xmm0, eax
  00081	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00084	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008a	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0008f	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  00094	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 3382 : 	AdjustDir(&tmpDir);

  0009a	8d 45 f8	 lea	 eax, DWORD PTR _tmpDir$[ebp]
  0009d	50		 push	 eax
  0009e	d9 5d f8	 fstp	 DWORD PTR _tmpDir$[ebp]
  000a1	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 3383 : 	dir = (int)(tmpDir / 45);

  000a6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _tmpDir$[ebp]
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000

; 3384 : 	// ???????????
; 3385 : 	if (pc.ptAct->anim_ang == dir)

  000b6	a1 ec 50 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+20716
  000bb	f3 0f 2c f0	 cvttss2si esi, xmm0
  000bf	39 b0 54 01 00
	00		 cmp	 DWORD PTR [eax+340], esi
  000c5	74 4c		 je	 SHORT $LN12@turnAround

; 3386 : 		return;
; 3387 : 	// ??
; 3388 : 	if (turnSendTime+FIELD_BTN_PUSH_WAIT < TimeGetTime())

  000c7	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?turnSendTime@?1??turnAround@@YAXXZ@4IA
  000d2	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  000d8	3b c8		 cmp	 ecx, eax
  000da	73 37		 jae	 SHORT $LN12@turnAround

; 3389 : 	{
; 3390 : 		setPcDir(dir);

  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 ?setPcDir@@YAXH@Z	; setPcDir

; 3391 : 		dir2[0] = cnvServDir(dir, 1);

  000e2	6a 01		 push	 1
  000e4	56		 push	 esi
  000e5	e8 00 00 00 00	 call	 ?cnvServDir@@YADHH@Z	; cnvServDir
  000ea	88 45 fc	 mov	 BYTE PTR _dir2$[ebp], al

; 3392 : 		dir2[1] = '\0';
; 3393 : 		walkSendForServer(nowGx, nowGy, dir2);

  000ed	8d 45 fc	 lea	 eax, DWORD PTR _dir2$[ebp]
  000f0	50		 push	 eax
  000f1	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  000f7	c6 45 fd 00	 mov	 BYTE PTR _dir2$[ebp+1], 0
  000fb	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  00101	e8 00 00 00 00	 call	 ?walkSendForServer@@YAXHHPAD@Z ; walkSendForServer
  00106	83 c4 18	 add	 esp, 24			; 00000018H

; 3394 : 		turnSendTime = TimeGetTime();

  00109	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0010e	a3 00 00 00 00	 mov	 DWORD PTR ?turnSendTime@?1??turnAround@@YAXXZ@4IA, eax
$LN12@turnAround:
  00113	5e		 pop	 esi
$LN6@turnAround:

; 3395 : 	}
; 3396 : }

  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
?turnAround@@YAXXZ ENDP					; turnAround
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?checkAreaLimit@@YAXPAF000@Z
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?checkAreaLimit@@YAXPAF000@Z PROC			; checkAreaLimit, COMDAT

; 2032 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2033 : 	if (*x1 < 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _x1$[ebp]
  00006	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0000a	7d 05		 jge	 SHORT $LN2@checkAreaL

; 2034 : 		*x1 = 0;

  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 89 08	 mov	 WORD PTR [eax], cx
$LN2@checkAreaL:

; 2035 : 	if (*y1 < 0)

  00011	8b 45 0c	 mov	 eax, DWORD PTR _y1$[ebp]
  00014	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00018	7d 05		 jge	 SHORT $LN3@checkAreaL

; 2036 : 		*y1 = 0;

  0001a	33 c9		 xor	 ecx, ecx
  0001c	66 89 08	 mov	 WORD PTR [eax], cx
$LN3@checkAreaL:

; 2037 : 	if (*x2 > nowFloorGxSize)

  0001f	8b 55 10	 mov	 edx, DWORD PTR _x2$[ebp]
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  00028	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0002b	3b c1		 cmp	 eax, ecx
  0002d	7e 03		 jle	 SHORT $LN4@checkAreaL

; 2038 : 		*x2 = nowFloorGxSize;

  0002f	66 89 0a	 mov	 WORD PTR [edx], cx
$LN4@checkAreaL:

; 2039 : 	if (*y2 > nowFloorGySize)

  00032	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  0003b	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0003e	3b c1		 cmp	 eax, ecx
  00040	7e 03		 jle	 SHORT $LN5@checkAreaL

; 2040 : 		*y2 = nowFloorGySize;

  00042	66 89 0a	 mov	 WORD PTR [edx], cx
$LN5@checkAreaL:

; 2041 : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?checkAreaLimit@@YAXPAF000@Z ENDP			; checkAreaLimit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?getDirData@@YAHHHHH@Z
_TEXT	SEGMENT
_gx1$ = 8						; size = 4
_gy1$ = 12						; size = 4
_gx2$ = 16						; size = 4
_tmpDir$ = 20						; size = 4
_gy2$ = 20						; size = 4
?getDirData@@YAHHHHH@Z PROC				; getDirData, COMDAT

; 3486 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3487 : 	float tmpDir, tmpX, tmpY;
; 3488 : 
; 3489 : 	// ?佋?????
; 3490 : 	tmpX = (float)(gx2 - gx1);
; 3491 : 	tmpY = (float)(gy2 - gy1);

  00003	8b 45 14	 mov	 eax, DWORD PTR _gy2$[ebp]

; 3492 : 	tmpDir = Atan(tmpX, tmpY) + 22.5F;

  00006	83 ec 08	 sub	 esp, 8
  00009	2b 45 0c	 sub	 eax, DWORD PTR _gy1$[ebp]
  0000c	66 0f 6e c0	 movd	 xmm0, eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _gx2$[ebp]
  00013	2b 45 08	 sub	 eax, DWORD PTR _gx1$[ebp]
  00016	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00019	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0001f	66 0f 6e c0	 movd	 xmm0, eax
  00023	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002b	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  00030	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 3493 : 	AdjustDir(&tmpDir);

  00036	8d 45 14	 lea	 eax, DWORD PTR _tmpDir$[ebp]
  00039	50		 push	 eax
  0003a	d9 5d 14	 fstp	 DWORD PTR _tmpDir$[ebp]
  0003d	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 3494 : 
; 3495 : 	return (int)(tmpDir / 45);

  00042	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _tmpDir$[ebp]
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000
  00052	f3 0f 2c c0	 cvttss2si eax, xmm0

; 3496 : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?getDirData@@YAHHHHH@Z ENDP				; getDirData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?shiftRouteMap2@@YAXXZ
_TEXT	SEGMENT
?shiftRouteMap2@@YAXXZ PROC				; shiftRouteMap2, COMDAT

; 3698 : 	int i;
; 3699 : 
; 3700 : 	if (moveRouteCnt2 <= 0)

  00000	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?moveRouteCnt2@@3FA ; moveRouteCnt2
  00006	66 85 c0	 test	 ax, ax
  00009	7e 20		 jle	 SHORT $LN9@shiftRoute

; 3701 : 		return;
; 3702 : 
; 3703 : 	moveRouteCnt2--;

  0000b	66 48		 dec	 ax
  0000d	0f bf c8	 movsx	 ecx, ax
  00010	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt2@@3FA, ax ; moveRouteCnt2

; 3704 : 	for (i = 0; i < moveRouteCnt2; i++)

  00016	85 c9		 test	 ecx, ecx
  00018	7e 11		 jle	 SHORT $LN9@shiftRoute

; 3701 : 		return;
; 3702 : 
; 3703 : 	moveRouteCnt2--;

  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	be 02 00 00 00	 mov	 esi, OFFSET ?moveRoute2@@3PAFA+2
  00021	bf 00 00 00 00	 mov	 edi, OFFSET ?moveRoute2@@3PAFA ; moveRoute2
  00026	66 f3 a5	 rep movsw
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
$LN9@shiftRoute:

; 3705 : 	{
; 3706 : 		moveRoute2[i] = moveRoute2[i + 1];
; 3707 : 	}
; 3708 : }

  0002b	c3		 ret	 0
?shiftRouteMap2@@YAXXZ ENDP				; shiftRouteMap2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?shiftRouteMap@@YAXXZ
_TEXT	SEGMENT
?shiftRouteMap@@YAXXZ PROC				; shiftRouteMap, COMDAT

; 3682 : 	int i;
; 3683 : 
; 3684 : 	if (moveRouteCnt <= 0)

  00000	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  00006	66 85 c0	 test	 ax, ax
  00009	7e 46		 jle	 SHORT $LN9@shiftRoute

; 3685 : 		return;
; 3686 : 
; 3687 : 	moveRouteCnt--;

  0000b	66 48		 dec	 ax
  0000d	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt@@3FA, ax ; moveRouteCnt
  00013	98		 cwde

; 3688 : 	for (i = 0; i < moveRouteCnt; i++)

  00014	85 c0		 test	 eax, eax
  00016	7e 39		 jle	 SHORT $LN9@shiftRoute

; 3685 : 		return;
; 3686 : 
; 3687 : 	moveRouteCnt--;

  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	03 c0		 add	 eax, eax
  0001c	be 02 00 00 00	 mov	 esi, OFFSET ?moveRouteGy@@3PAFA+2
  00021	8b c8		 mov	 ecx, eax
  00023	bf 00 00 00 00	 mov	 edi, OFFSET ?moveRouteGy@@3PAFA ; moveRouteGy
  00028	d1 e9		 shr	 ecx, 1
  0002a	66 f3 a5	 rep movsw
  0002d	8b c8		 mov	 ecx, eax
  0002f	be 02 00 00 00	 mov	 esi, OFFSET ?moveRouteGx@@3PAFA+2
  00034	d1 e9		 shr	 ecx, 1
  00036	bf 00 00 00 00	 mov	 edi, OFFSET ?moveRouteGx@@3PAFA ; moveRouteGx
  0003b	66 f3 a5	 rep movsw
  0003e	d1 e8		 shr	 eax, 1
  00040	be 02 00 00 00	 mov	 esi, OFFSET ?moveRoute@@3PAFA+2
  00045	8b c8		 mov	 ecx, eax
  00047	bf 00 00 00 00	 mov	 edi, OFFSET ?moveRoute@@3PAFA ; moveRoute
  0004c	66 f3 a5	 rep movsw
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
$LN9@shiftRoute:

; 3689 : 	{
; 3690 : 		moveRoute[i] = moveRoute[i + 1];
; 3691 : 		moveRouteGx[i] = moveRouteGx[i + 1];
; 3692 : 		moveRouteGy[i] = moveRouteGy[i + 1];
; 3693 : 	}
; 3694 : }

  00051	c3		 ret	 0
?shiftRouteMap@@YAXXZ ENDP				; shiftRouteMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?getRouteMap@@YAXXZ
_TEXT	SEGMENT
tv925 = -84						; size = 4
tv924 = -80						; size = 4
_dir2$1$ = -76						; size = 4
tv923 = -72						; size = 4
_dy2$1 = -68						; size = 4
_dx2$2 = -64						; size = 4
_dy3$3 = -60						; size = 4
_dx3$4 = -56						; size = 4
_dir3$1$ = -52						; size = 4
tv926 = -52						; size = 4
_targetDir$1$ = -48					; size = 4
_mx$1$ = -44						; size = 4
_dx$ = -40						; size = 4
_my$1$ = -36						; size = 4
_tmpDir$ = -32						; size = 4
_dy$ = -28						; size = 4
_nowx$1$ = -24						; size = 4
tv922 = -20						; size = 4
_dx$2$ = -20						; size = 4
_dy$2$ = -20						; size = 4
_nowDir$1$ = -20					; size = 4
_dirTbl$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?getRouteMap@@YAXXZ PROC				; getRouteMap, COMDAT

; 3509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3510 : 	int mx = moveStackGx, my = moveStackGy, nowx = nowGx, nowy = nowGy, dir, dx, dy, targetDir, nowDir, checkDir1, checkDir2, i;

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?moveStackGx@@3HA ; moveStackGx

; 3511 : 	int dirTbl[] = { 0, 1, -1 };
; 3512 : 	float tmpDir;
; 3513 : 	float tmpX, tmpY;
; 3514 : 	BOOL flag;
; 3515 : 
; 3516 : 	moveLastDir = -1;

  00016	83 ca ff	 or	 edx, -1
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?moveStackGy@@3HA ; moveStackGy
  0001e	53		 push	 ebx
  0001f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowGx@@3HA ; nowGx
  00025	89 4d d4	 mov	 DWORD PTR _mx$1$[ebp], ecx
  00028	89 45 dc	 mov	 DWORD PTR _my$1$[ebp], eax
  0002b	89 5d e8	 mov	 DWORD PTR _nowx$1$[ebp], ebx
  0002e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dirTbl$[ebp], 0
  00035	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dirTbl$[ebp+4], 1
  0003c	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _dirTbl$[ebp+8], -1
  00043	66 89 15 00 00
	00 00		 mov	 WORD PTR ?moveLastDir@@3FA, dx ; moveLastDir
  0004a	57		 push	 edi
  0004b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowGy@@3HA ; nowGy

; 3517 : 	if (nowx == mx && nowy == my)

  00051	3b d9		 cmp	 ebx, ecx
  00053	75 08		 jne	 SHORT $LN11@getRouteMa
  00055	3b f8		 cmp	 edi, eax
  00057	0f 84 77 04 00
	00		 je	 $LN34@getRouteMa
$LN11@getRouteMa:

; 3518 : 		return;
; 3519 : 	tmpX = (float)(mx - nowx);
; 3520 : 	tmpY = (float)(my - nowy);

  0005d	2b c7		 sub	 eax, edi
  0005f	56		 push	 esi

; 3521 : 	tmpDir = Atan(tmpX, tmpY) + 22.5F;

  00060	83 ec 08	 sub	 esp, 8
  00063	66 0f 6e c0	 movd	 xmm0, eax
  00067	8b c1		 mov	 eax, ecx
  00069	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006c	2b c3		 sub	 eax, ebx
  0006e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00074	66 0f 6e c0	 movd	 xmm0, eax
  00078	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  00085	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 3522 : 	AdjustDir(&tmpDir);

  0008b	8d 45 e0	 lea	 eax, DWORD PTR _tmpDir$[ebp]
  0008e	50		 push	 eax
  0008f	d9 5d e0	 fstp	 DWORD PTR _tmpDir$[ebp]
  00092	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 3523 : 	targetDir = (int)(tmpDir / 45);

  00097	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tmpDir$[ebp]
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000

; 3524 : 
; 3525 : 	moveRouteCnt = 0;

  000a7	33 f6		 xor	 esi, esi
  000a9	33 d2		 xor	 edx, edx
  000ab	f3 0f 2c c0	 cvttss2si eax, xmm0
  000af	89 45 d0	 mov	 DWORD PTR _targetDir$1$[ebp], eax
$LN73@getRouteMa:

; 3526 : 
; 3527 : 	while (nowx != mx || nowy != my)

  000b2	8b 4d d4	 mov	 ecx, DWORD PTR _mx$1$[ebp]
  000b5	8b 45 dc	 mov	 eax, DWORD PTR _my$1$[ebp]
  000b8	66 89 35 00 00
	00 00		 mov	 WORD PTR ?moveRouteCnt@@3FA, si ; moveRouteCnt
  000bf	3b d9		 cmp	 ebx, ecx
  000c1	75 08		 jne	 SHORT $LN12@getRouteMa
  000c3	3b f8		 cmp	 edi, eax
  000c5	0f 84 04 01 00
	00		 je	 $LN43@getRouteMa
$LN12@getRouteMa:

; 3528 : 	{
; 3529 : 		if (moveRouteCnt >= MOVE_MAX)

  000cb	66 83 fa 64	 cmp	 dx, 100			; 00000064H
  000cf	0f 8d f6 03 00
	00		 jge	 $LN42@getRouteMa

; 3532 : 			return;
; 3533 : 		}
; 3534 : 
; 3535 : 		tmpX = (float)(mx - nowx);
; 3536 : 		tmpY = (float)(my - nowy);

  000d5	2b c7		 sub	 eax, edi

; 3537 : 		tmpDir = Atan(tmpX, tmpY) + 22.5F;

  000d7	83 ec 08	 sub	 esp, 8
  000da	66 0f 6e c0	 movd	 xmm0, eax
  000de	8b c1		 mov	 eax, ecx
  000e0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000e3	2b c3		 sub	 eax, ebx
  000e5	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000eb	66 0f 6e c0	 movd	 xmm0, eax
  000ef	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f7	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  000fc	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 3538 : 		AdjustDir(&tmpDir);

  00102	8d 45 e0	 lea	 eax, DWORD PTR _tmpDir$[ebp]
  00105	50		 push	 eax
  00106	d9 5d e0	 fstp	 DWORD PTR _tmpDir$[ebp]
  00109	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 3539 : 		nowDir = (int)(tmpDir / 45);

  0010e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tmpDir$[ebp]
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
  00116	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000

; 3544 : 		if (nowDir != targetDir && nowDir != checkDir1 && nowDir != checkDir2)

  0011e	8b 4d d0	 mov	 ecx, DWORD PTR _targetDir$1$[ebp]
  00121	f3 0f 2c d0	 cvttss2si edx, xmm0
  00125	89 55 ec	 mov	 DWORD PTR _nowDir$1$[ebp], edx
  00128	3b d1		 cmp	 edx, ecx
  0012a	74 18		 je	 SHORT $LN14@getRouteMa

; 3540 : 		checkDir1 = targetDir + 1;
; 3541 : 		checkDir1 &= 7;

  0012c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0012f	83 e0 07	 and	 eax, 7

; 3544 : 		if (nowDir != targetDir && nowDir != checkDir1 && nowDir != checkDir2)

  00132	3b d0		 cmp	 edx, eax
  00134	74 0e		 je	 SHORT $LN14@getRouteMa

; 3542 : 		checkDir2 = targetDir - 1;
; 3543 : 		checkDir2 &= 7;

  00136	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00139	83 e0 07	 and	 eax, 7

; 3544 : 		if (nowDir != targetDir && nowDir != checkDir1 && nowDir != checkDir2)

  0013c	3b d0		 cmp	 edx, eax
  0013e	0f 85 81 00 00
	00		 jne	 $LN60@getRouteMa
$LN14@getRouteMa:

; 3545 : 			break;
; 3546 : 		flag = TRUE;
; 3547 : 		for (i = 0; i < sizeof(dirTbl) / sizeof(int); i++)

  00144	33 f6		 xor	 esi, esi
$LL6@getRouteMa:

; 3548 : 		{
; 3549 : 			dir = nowDir + dirTbl[i];

  00146	8b 5c b5 f0	 mov	 ebx, DWORD PTR _dirTbl$[ebp+esi*4]
  0014a	03 da		 add	 ebx, edx

; 3550 : 			dir &= 7;

  0014c	83 e3 07	 and	 ebx, 7

; 3555 : 			if (dir != targetDir && dir != checkDir1 && dir != checkDir2)

  0014f	3b d9		 cmp	 ebx, ecx
  00151	74 14		 je	 SHORT $LN15@getRouteMa

; 3551 : 			checkDir1 = targetDir + 1;
; 3552 : 			checkDir1 &= 7;

  00153	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00156	83 e0 07	 and	 eax, 7

; 3555 : 			if (dir != targetDir && dir != checkDir1 && dir != checkDir2)

  00159	3b d8		 cmp	 ebx, eax
  0015b	74 0a		 je	 SHORT $LN15@getRouteMa

; 3553 : 			checkDir2 = targetDir - 1;
; 3554 : 			checkDir2 &= 7;

  0015d	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00160	83 e0 07	 and	 eax, 7

; 3555 : 			if (dir != targetDir && dir != checkDir1 && dir != checkDir2)

  00163	3b d8		 cmp	 ebx, eax
  00165	75 55		 jne	 SHORT $LN4@getRouteMa
$LN15@getRouteMa:

; 3556 : 				continue;
; 3557 : 			getRouteData(dir, &dx, &dy);

  00167	8d 45 e4	 lea	 eax, DWORD PTR _dy$[ebp]
  0016a	50		 push	 eax
  0016b	8d 45 d8	 lea	 eax, DWORD PTR _dx$[ebp]
  0016e	50		 push	 eax
  0016f	53		 push	 ebx
  00170	e8 00 00 00 00	 call	 ?getRouteData@@YAXHPAH0@Z ; getRouteData

; 3558 : 			//CC FIX 
; 3559 : 			//这个判断可能涉及穿墙行走
; 3560 : 			//强制这个if false 冰城可以走路
; 3561 : 			if (_checkWarpEvent(nowx + dx, nowy + dy))

  00175	8b 4d e4	 mov	 ecx, DWORD PTR _dy$[ebp]
  00178	8b 45 e8	 mov	 eax, DWORD PTR _nowx$1$[ebp]
  0017b	03 cf		 add	 ecx, edi
  0017d	03 45 d8	 add	 eax, DWORD PTR _dx$[ebp]
  00180	51		 push	 ecx
  00181	50		 push	 eax
  00182	89 45 cc	 mov	 DWORD PTR tv926[ebp], eax
  00185	e8 00 00 00 00	 call	 ?_checkWarpEvent@@YAHHH@Z ; _checkWarpEvent

; 3562 : 			{
; 3563 : 				flag = TRUE;
; 3564 : 		//		break;
; 3565 : 			}
; 3566 : 			if (checkHitMap(nowx + dx, nowy + dy))

  0018a	8b 45 e4	 mov	 eax, DWORD PTR _dy$[ebp]
  0018d	03 c7		 add	 eax, edi
  0018f	50		 push	 eax
  00190	ff 75 cc	 push	 DWORD PTR tv926[ebp]
  00193	e8 00 00 00 00	 call	 ?checkHitMap@@YAHHH@Z	; checkHitMap
  00198	83 c4 1c	 add	 esp, 28			; 0000001cH
  0019b	85 c0		 test	 eax, eax
  0019d	74 44		 je	 SHORT $LN19@getRouteMa

; 3567 : 			{
; 3568 : 				if ((nowx + dx) == mx && (nowy + dy) == my)

  0019f	8b 45 d4	 mov	 eax, DWORD PTR _mx$1$[ebp]
  001a2	39 45 cc	 cmp	 DWORD PTR tv926[ebp], eax
  001a5	75 0f		 jne	 SHORT $LN69@getRouteMa
  001a7	8b 45 e4	 mov	 eax, DWORD PTR _dy$[ebp]
  001aa	03 c7		 add	 eax, edi
  001ac	3b 45 dc	 cmp	 eax, DWORD PTR _my$1$[ebp]
  001af	75 05		 jne	 SHORT $LN69@getRouteMa

; 3569 : 				{
; 3570 : 
; 3571 : 					if ((dir % 2) == 0)

  001b1	f6 c3 01	 test	 bl, 1
  001b4	75 0c		 jne	 SHORT $LN67@getRouteMa
$LN69@getRouteMa:

; 3545 : 			break;
; 3546 : 		flag = TRUE;
; 3547 : 		for (i = 0; i < sizeof(dirTbl) / sizeof(int); i++)

  001b6	8b 4d d0	 mov	 ecx, DWORD PTR _targetDir$1$[ebp]
  001b9	8b 55 ec	 mov	 edx, DWORD PTR _nowDir$1$[ebp]
$LN4@getRouteMa:
  001bc	46		 inc	 esi
  001bd	83 fe 03	 cmp	 esi, 3
  001c0	72 84		 jb	 SHORT $LL6@getRouteMa
$LN67@getRouteMa:

; 3544 : 		if (nowDir != targetDir && nowDir != checkDir1 && nowDir != checkDir2)

  001c2	8b 5d e8	 mov	 ebx, DWORD PTR _nowx$1$[ebp]
$LN60@getRouteMa:
  001c5	66 8b 35 00 00
	00 00		 mov	 si, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  001cc	8b 4d d4	 mov	 ecx, DWORD PTR _mx$1$[ebp]
$LN43@getRouteMa:

; 3636 : 	dx = 0;
; 3637 : 	if (mx - nowx > 0)

  001cf	2b cb		 sub	 ecx, ebx
  001d1	85 c9		 test	 ecx, ecx
  001d3	0f 8e 89 01 00
	00		 jle	 $LN74@getRouteMa

; 3638 : 		dx = 1;

  001d9	b8 01 00 00 00	 mov	 eax, 1
  001de	e9 84 01 00 00	 jmp	 $LN75@getRouteMa
$LN19@getRouteMa:

; 3572 : 						continue;
; 3573 : 					flag = TRUE;
; 3574 : 					break;
; 3575 : 				}
; 3576 : 				else
; 3577 : 					continue;
; 3578 : 			}
; 3579 : 			
; 3580 : 			if ((dir % 2) == 0)

  001e3	f6 c3 01	 test	 bl, 1
  001e6	0f 85 39 01 00
	00		 jne	 $LN63@getRouteMa

; 3581 : 			{
; 3582 : 				int dir2, dx2, dy2, dir3, dx3, dy3;
; 3583 : 				BOOL flag2, flag3;
; 3584 : 
; 3585 : 				dir2 = dir + 1;
; 3586 : 				dir2 &= 7;
; 3587 : 				getRouteData(dir2, &dx2, &dy2);

  001ec	8d 4d bc	 lea	 ecx, DWORD PTR _dy2$1[ebp]
  001ef	51		 push	 ecx
  001f0	8d 4d c0	 lea	 ecx, DWORD PTR _dx2$2[ebp]
  001f3	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  001f6	83 e0 07	 and	 eax, 7
  001f9	51		 push	 ecx
  001fa	50		 push	 eax
  001fb	89 45 b4	 mov	 DWORD PTR _dir2$1$[ebp], eax
  001fe	e8 00 00 00 00	 call	 ?getRouteData@@YAXHPAH0@Z ; getRouteData

; 3588 : 				dir3 = dir - 1;
; 3589 : 				dir3 &= 7;
; 3590 : 				getRouteData(dir3, &dx3, &dy3);

  00203	8d 4d c4	 lea	 ecx, DWORD PTR _dy3$3[ebp]
  00206	51		 push	 ecx
  00207	8d 4d c8	 lea	 ecx, DWORD PTR _dx3$4[ebp]
  0020a	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0020d	83 e0 07	 and	 eax, 7
  00210	51		 push	 ecx
  00211	50		 push	 eax
  00212	89 45 cc	 mov	 DWORD PTR _dir3$1$[ebp], eax
  00215	e8 00 00 00 00	 call	 ?getRouteData@@YAXHPAH0@Z ; getRouteData

; 3591 : 				flag2 = checkHitMap(nowx + dx2, nowy + dy2);

  0021a	8b 55 bc	 mov	 edx, DWORD PTR _dy2$1[ebp]
  0021d	8b 45 e8	 mov	 eax, DWORD PTR _nowx$1$[ebp]
  00220	03 d7		 add	 edx, edi
  00222	03 45 c0	 add	 eax, DWORD PTR _dx2$2[ebp]
  00225	52		 push	 edx
  00226	50		 push	 eax
  00227	89 55 ac	 mov	 DWORD PTR tv925[ebp], edx
  0022a	89 45 b0	 mov	 DWORD PTR tv924[ebp], eax
  0022d	e8 00 00 00 00	 call	 ?checkHitMap@@YAHHH@Z	; checkHitMap

; 3592 : 				flag3 = checkHitMap(nowx + dx3, nowy + dy3);

  00232	8b 55 c4	 mov	 edx, DWORD PTR _dy3$3[ebp]
  00235	8b f0		 mov	 esi, eax
  00237	8b 45 e8	 mov	 eax, DWORD PTR _nowx$1$[ebp]
  0023a	03 d7		 add	 edx, edi
  0023c	03 45 c8	 add	 eax, DWORD PTR _dx3$4[ebp]
  0023f	52		 push	 edx
  00240	50		 push	 eax
  00241	89 55 b8	 mov	 DWORD PTR tv923[ebp], edx
  00244	89 45 ec	 mov	 DWORD PTR tv922[ebp], eax
  00247	e8 00 00 00 00	 call	 ?checkHitMap@@YAHHH@Z	; checkHitMap
  0024c	83 c4 28	 add	 esp, 40			; 00000028H

; 3593 : 				if (flag2 && flag3)

  0024f	85 f6		 test	 esi, esi
  00251	74 6b		 je	 SHORT $LN23@getRouteMa
  00253	85 c0		 test	 eax, eax
  00255	0f 85 67 ff ff
	ff		 jne	 $LN67@getRouteMa

; 3594 : 					break;
; 3595 : 				if (flag2)
; 3596 : 				{
; 3597 : 					moveRoute[moveRouteCnt] = dir3;

  0025b	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  00262	8b 45 cc	 mov	 eax, DWORD PTR _dir3$1$[ebp]

; 3598 : 					moveRouteGx[moveRouteCnt] = nowx + dx3;
; 3599 : 					moveRouteGy[moveRouteCnt] = nowy + dy3;

  00265	8b 5d c4	 mov	 ebx, DWORD PTR _dy3$3[ebp]

; 3600 : 					moveRouteCnt++;
; 3601 : 					dx = (nowx + dx) - (nowx + dx3);
; 3602 : 					dy = (nowy + dy) - (nowy + dy3);

  00268	8b 75 e4	 mov	 esi, DWORD PTR _dy$[ebp]
  0026b	0f bf ca	 movsx	 ecx, dx
  0026e	2b f3		 sub	 esi, ebx

; 3603 : 					dir = getDirData(0, 0, dx, dy);

  00270	56		 push	 esi
  00271	66 42		 inc	 dx
  00273	89 75 e4	 mov	 DWORD PTR _dy$[ebp], esi
  00276	66 89 15 00 00
	00 00		 mov	 WORD PTR ?moveRouteCnt@@3FA, dx ; moveRouteCnt
  0027d	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?moveRoute@@3PAFA[ecx*2], ax
  00285	8b 45 e8	 mov	 eax, DWORD PTR _nowx$1$[ebp]
  00288	03 45 c8	 add	 eax, DWORD PTR _dx3$4[ebp]
  0028b	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?moveRouteGx@@3PAFA[ecx*2], ax
  00293	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00296	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?moveRouteGy@@3PAFA[ecx*2], ax
  0029e	8b 45 d8	 mov	 eax, DWORD PTR _dx$[ebp]
  002a1	2b 45 c8	 sub	 eax, DWORD PTR _dx3$4[ebp]
  002a4	50		 push	 eax
  002a5	6a 00		 push	 0
  002a7	6a 00		 push	 0
  002a9	89 45 d8	 mov	 DWORD PTR _dx$[ebp], eax
  002ac	e8 00 00 00 00	 call	 ?getDirData@@YAHHHHH@Z	; getDirData

; 3604 : 					nowx += dx3;
; 3605 : 					nowy += dy3;

  002b1	8b 7d b8	 mov	 edi, DWORD PTR tv923[ebp]
  002b4	8b d8		 mov	 ebx, eax
  002b6	8b 45 ec	 mov	 eax, DWORD PTR tv922[ebp]
  002b9	83 c4 10	 add	 esp, 16			; 00000010H

; 3606 : 					flag = FALSE;
; 3607 : 					break;

  002bc	eb 6d		 jmp	 SHORT $LN24@getRouteMa
$LN23@getRouteMa:

; 3608 : 				}
; 3609 : 				if (flag3)

  002be	8b 75 e4	 mov	 esi, DWORD PTR _dy$[ebp]
  002c1	85 c0		 test	 eax, eax
  002c3	74 63		 je	 SHORT $LN64@getRouteMa

; 3610 : 				{
; 3611 : 					moveRoute[moveRouteCnt] = dir2;

  002c5	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  002cc	8b 45 b4	 mov	 eax, DWORD PTR _dir2$1$[ebp]

; 3612 : 					moveRouteGx[moveRouteCnt] = nowx + dx2;
; 3613 : 					moveRouteGy[moveRouteCnt] = nowy + dy2;

  002cf	8b 5d bc	 mov	 ebx, DWORD PTR _dy2$1[ebp]

; 3614 : 					moveRouteCnt++;
; 3615 : 					dx = (nowx + dx) - (nowx + dx2);
; 3616 : 					dy = (nowy + dy) - (nowy + dy2);

  002d2	2b f3		 sub	 esi, ebx
  002d4	0f bf ca	 movsx	 ecx, dx
  002d7	66 42		 inc	 dx

; 3617 : 					dir = getDirData(0, 0, dx, dy);

  002d9	56		 push	 esi
  002da	66 89 15 00 00
	00 00		 mov	 WORD PTR ?moveRouteCnt@@3FA, dx ; moveRouteCnt
  002e1	89 75 e4	 mov	 DWORD PTR _dy$[ebp], esi
  002e4	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?moveRoute@@3PAFA[ecx*2], ax
  002ec	8b 45 e8	 mov	 eax, DWORD PTR _nowx$1$[ebp]
  002ef	03 45 c0	 add	 eax, DWORD PTR _dx2$2[ebp]
  002f2	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?moveRouteGx@@3PAFA[ecx*2], ax
  002fa	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  002fd	66 89 04 4d 00
	00 00 00	 mov	 WORD PTR ?moveRouteGy@@3PAFA[ecx*2], ax
  00305	8b 45 d8	 mov	 eax, DWORD PTR _dx$[ebp]
  00308	2b 45 c0	 sub	 eax, DWORD PTR _dx2$2[ebp]
  0030b	50		 push	 eax
  0030c	6a 00		 push	 0
  0030e	6a 00		 push	 0
  00310	89 45 d8	 mov	 DWORD PTR _dx$[ebp], eax
  00313	e8 00 00 00 00	 call	 ?getDirData@@YAHHHHH@Z	; getDirData

; 3618 : 					nowx += dx2;
; 3619 : 					nowy += dy2;

  00318	8b 7d ac	 mov	 edi, DWORD PTR tv925[ebp]
  0031b	8b d8		 mov	 ebx, eax
  0031d	8b 45 b0	 mov	 eax, DWORD PTR tv924[ebp]
  00320	83 c4 10	 add	 esp, 16			; 00000010H
  00323	eb 06		 jmp	 SHORT $LN24@getRouteMa
$LN63@getRouteMa:

; 3572 : 						continue;
; 3573 : 					flag = TRUE;
; 3574 : 					break;
; 3575 : 				}
; 3576 : 				else
; 3577 : 					continue;
; 3578 : 			}
; 3579 : 			
; 3580 : 			if ((dir % 2) == 0)

  00325	8b 75 e4	 mov	 esi, DWORD PTR _dy$[ebp]
$LN64@getRouteMa:

; 3620 : 					flag = FALSE;
; 3621 : 					break;
; 3622 : 				}
; 3623 : 			}
; 3624 : 			flag = FALSE;
; 3625 : 			break;
; 3626 : 		}
; 3627 : 		if (flag)
; 3628 : 			break;
; 3629 : 		nowx += dx;

  00328	8b 45 e8	 mov	 eax, DWORD PTR _nowx$1$[ebp]
$LN24@getRouteMa:
  0032b	03 45 d8	 add	 eax, DWORD PTR _dx$[ebp]

; 3630 : 		nowy += dy;

  0032e	03 fe		 add	 edi, esi

; 3631 : 		moveRoute[moveRouteCnt] = dir;

  00330	66 8b 35 00 00
	00 00		 mov	 si, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  00337	89 45 e8	 mov	 DWORD PTR _nowx$1$[ebp], eax
  0033a	0f bf c6	 movsx	 eax, si

; 3632 : 		moveRouteGx[moveRouteCnt] = nowx;
; 3633 : 		moveRouteGy[moveRouteCnt] = nowy;
; 3634 : 		moveRouteCnt++;

  0033d	66 46		 inc	 si
  0033f	0f b7 d6	 movzx	 edx, si
  00342	66 89 1c 45 00
	00 00 00	 mov	 WORD PTR ?moveRoute@@3PAFA[eax*2], bx
  0034a	8b 5d e8	 mov	 ebx, DWORD PTR _nowx$1$[ebp]
  0034d	66 89 1c 45 00
	00 00 00	 mov	 WORD PTR ?moveRouteGx@@3PAFA[eax*2], bx
  00355	66 89 3c 45 00
	00 00 00	 mov	 WORD PTR ?moveRouteGy@@3PAFA[eax*2], di

; 3635 : 	}

  0035d	e9 50 fd ff ff	 jmp	 $LN73@getRouteMa
$LN74@getRouteMa:

; 3639 : 	else if (mx - nowx < 0)

  00362	79 70		 jns	 SHORT $LN61@getRouteMa

; 3640 : 		dx = -1;

  00364	83 c8 ff	 or	 eax, -1
$LN75@getRouteMa:

; 3641 : 	if (dx != 0)
; 3642 : 	{
; 3643 : 		while (!checkHitMap(nowx + dx, nowy) && mx != nowx)

  00367	89 45 ec	 mov	 DWORD PTR _dx$2$[ebp], eax
  0036a	03 c3		 add	 eax, ebx
  0036c	57		 push	 edi
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 ?checkHitMap@@YAHHH@Z	; checkHitMap
  00373	83 c4 08	 add	 esp, 8
  00376	85 c0		 test	 eax, eax
  00378	75 5a		 jne	 SHORT $LN61@getRouteMa
  0037a	66 0f 1f 44 00
	00		 npad	 6
$LL7@getRouteMa:
  00380	39 5d d4	 cmp	 DWORD PTR _mx$1$[ebp], ebx
  00383	74 4f		 je	 SHORT $LN61@getRouteMa

; 3644 : 		{
; 3645 : 			nowx += dx;

  00385	8b 45 ec	 mov	 eax, DWORD PTR _dx$2$[ebp]
  00388	03 d8		 add	 ebx, eax

; 3646 : 			moveRoute[moveRouteCnt] = getDirData(0, 0, dx, 0);

  0038a	6a 00		 push	 0
  0038c	50		 push	 eax
  0038d	6a 00		 push	 0
  0038f	6a 00		 push	 0
  00391	0f bf f6	 movsx	 esi, si
  00394	e8 00 00 00 00	 call	 ?getDirData@@YAHHHHH@Z	; getDirData
  00399	66 89 04 75 00
	00 00 00	 mov	 WORD PTR ?moveRoute@@3PAFA[esi*2], ax
  003a1	8b 45 ec	 mov	 eax, DWORD PTR _dx$2$[ebp]

; 3647 : 			moveRouteGx[moveRouteCnt] = nowx;

  003a4	66 89 1c 75 00
	00 00 00	 mov	 WORD PTR ?moveRouteGx@@3PAFA[esi*2], bx
  003ac	03 c3		 add	 eax, ebx

; 3648 : 			moveRouteGy[moveRouteCnt] = nowy;

  003ae	66 89 3c 75 00
	00 00 00	 mov	 WORD PTR ?moveRouteGy@@3PAFA[esi*2], di

; 3649 : 			moveRouteCnt++;

  003b6	66 8b 35 00 00
	00 00		 mov	 si, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  003bd	57		 push	 edi
  003be	66 46		 inc	 si
  003c0	50		 push	 eax
  003c1	66 89 35 00 00
	00 00		 mov	 WORD PTR ?moveRouteCnt@@3FA, si ; moveRouteCnt
  003c8	e8 00 00 00 00	 call	 ?checkHitMap@@YAHHH@Z	; checkHitMap
  003cd	83 c4 18	 add	 esp, 24			; 00000018H
  003d0	85 c0		 test	 eax, eax
  003d2	74 ac		 je	 SHORT $LL7@getRouteMa
$LN61@getRouteMa:

; 3650 : 		}
; 3651 : 	}
; 3652 : 	dy = 0;
; 3653 : 	if (my - nowy > 0)

  003d4	8b 45 dc	 mov	 eax, DWORD PTR _my$1$[ebp]
  003d7	8b c8		 mov	 ecx, eax
  003d9	2b cf		 sub	 ecx, edi
  003db	85 c9		 test	 ecx, ecx
  003dd	7e 07		 jle	 SHORT $LN76@getRouteMa

; 3654 : 		dy = 1;

  003df	b8 01 00 00 00	 mov	 eax, 1
  003e4	eb 05		 jmp	 SHORT $LN77@getRouteMa
$LN76@getRouteMa:

; 3655 :  	else if (my - nowy < 0)

  003e6	79 71		 jns	 SHORT $LN10@getRouteMa

; 3656 : 		dy = -1;

  003e8	83 c8 ff	 or	 eax, -1
$LN77@getRouteMa:

; 3657 : 	if (dy != 0)
; 3658 : 	{
; 3659 : 		while (!checkHitMap(nowx, nowy + dy) && my != nowy)

  003eb	89 45 ec	 mov	 DWORD PTR _dy$2$[ebp], eax
  003ee	03 c7		 add	 eax, edi
  003f0	50		 push	 eax
  003f1	53		 push	 ebx
  003f2	e8 00 00 00 00	 call	 ?checkHitMap@@YAHHH@Z	; checkHitMap
  003f7	83 c4 08	 add	 esp, 8
  003fa	85 c0		 test	 eax, eax
  003fc	75 58		 jne	 SHORT $LN71@getRouteMa
  003fe	66 90		 npad	 2
$LL9@getRouteMa:
  00400	8b 45 dc	 mov	 eax, DWORD PTR _my$1$[ebp]
  00403	3b c7		 cmp	 eax, edi
  00405	74 52		 je	 SHORT $LN10@getRouteMa

; 3660 : 		{
; 3661 : 			nowy += dy;

  00407	8b 45 ec	 mov	 eax, DWORD PTR _dy$2$[ebp]
  0040a	03 f8		 add	 edi, eax

; 3662 : 			moveRoute[moveRouteCnt] = getDirData(0, 0, 0, dy);

  0040c	50		 push	 eax
  0040d	6a 00		 push	 0
  0040f	6a 00		 push	 0
  00411	6a 00		 push	 0
  00413	0f bf f6	 movsx	 esi, si
  00416	e8 00 00 00 00	 call	 ?getDirData@@YAHHHHH@Z	; getDirData
  0041b	66 89 04 75 00
	00 00 00	 mov	 WORD PTR ?moveRoute@@3PAFA[esi*2], ax
  00423	8b 45 ec	 mov	 eax, DWORD PTR _dy$2$[ebp]

; 3663 : 			moveRouteGx[moveRouteCnt] = nowx;

  00426	66 89 1c 75 00
	00 00 00	 mov	 WORD PTR ?moveRouteGx@@3PAFA[esi*2], bx
  0042e	03 c7		 add	 eax, edi

; 3664 : 			moveRouteGy[moveRouteCnt] = nowy;

  00430	66 89 3c 75 00
	00 00 00	 mov	 WORD PTR ?moveRouteGy@@3PAFA[esi*2], di

; 3665 : 			moveRouteCnt++;

  00438	66 8b 35 00 00
	00 00		 mov	 si, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  0043f	50		 push	 eax
  00440	66 46		 inc	 si
  00442	53		 push	 ebx
  00443	66 89 35 00 00
	00 00		 mov	 WORD PTR ?moveRouteCnt@@3FA, si ; moveRouteCnt
  0044a	e8 00 00 00 00	 call	 ?checkHitMap@@YAHHH@Z	; checkHitMap
  0044f	83 c4 18	 add	 esp, 24			; 00000018H
  00452	85 c0		 test	 eax, eax
  00454	74 aa		 je	 SHORT $LL9@getRouteMa
$LN71@getRouteMa:

; 3666 : 		}
; 3667 : 	}
; 3668 : 	if (moveRouteCnt > 0 && (nowx != mx || nowy != my))

  00456	8b 45 dc	 mov	 eax, DWORD PTR _my$1$[ebp]
$LN10@getRouteMa:
  00459	66 85 f6	 test	 si, si
  0045c	7e 75		 jle	 SHORT $LN72@getRouteMa
  0045e	8b 4d d4	 mov	 ecx, DWORD PTR _mx$1$[ebp]
  00461	3b d9		 cmp	 ebx, ecx
  00463	75 04		 jne	 SHORT $LN35@getRouteMa
  00465	3b f8		 cmp	 edi, eax
  00467	74 6a		 je	 SHORT $LN72@getRouteMa
$LN35@getRouteMa:

; 3669 : 	{
; 3670 : 		tmpX = (float)(mx - nowx);
; 3671 : 		tmpY = (float)(my - nowy);

  00469	2b c7		 sub	 eax, edi

; 3672 : 		tmpDir = Atan(tmpX, tmpY) + 22.5F;

  0046b	83 ec 08	 sub	 esp, 8
  0046e	2b cb		 sub	 ecx, ebx
  00470	66 0f 6e c0	 movd	 xmm0, eax
  00474	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00477	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0047d	66 0f 6e c1	 movd	 xmm0, ecx
  00481	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00484	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00489	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  0048e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 3673 : 		AdjustDir(&tmpDir);

  00494	8d 45 e0	 lea	 eax, DWORD PTR _tmpDir$[ebp]
  00497	50		 push	 eax
  00498	d9 5d e0	 fstp	 DWORD PTR _tmpDir$[ebp]
  0049b	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 3674 : 		moveLastDir = (int)(tmpDir / 45);

  004a0	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tmpDir$[ebp]
  004a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a8	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000
  004b0	5e		 pop	 esi
  004b1	5f		 pop	 edi

; 3675 : 	}
; 3676 : 
; 3677 : 	return;
; 3678 : }

  004b2	5b		 pop	 ebx
  004b3	f3 0f 2c c0	 cvttss2si eax, xmm0
  004b7	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveLastDir@@3FA, ax ; moveLastDir
  004bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004c0	33 cd		 xor	 ecx, ebp
  004c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c7	8b e5		 mov	 esp, ebp
  004c9	5d		 pop	 ebp
  004ca	c3		 ret	 0
$LN42@getRouteMa:

; 3530 : 		{
; 3531 : 			moveRouteCnt = 0;

  004cb	33 c0		 xor	 eax, eax
  004cd	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt@@3FA, ax ; moveRouteCnt
$LN72@getRouteMa:
  004d3	5e		 pop	 esi
$LN34@getRouteMa:

; 3675 : 	}
; 3676 : 
; 3677 : 	return;
; 3678 : }

  004d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d7	5f		 pop	 edi
  004d8	33 cd		 xor	 ecx, ebp
  004da	5b		 pop	 ebx
  004db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004e0	8b e5		 mov	 esp, ebp
  004e2	5d		 pop	 ebp
  004e3	c3		 ret	 0
?getRouteMap@@YAXXZ ENDP				; getRouteMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?readHitMap@@YAXHHHHPAG000@Z
_TEXT	SEGMENT
tv1337 = -44						; size = 4
tv1338 = -40						; size = 4
tv1354 = -36						; size = 4
tv1333 = -36						; size = 4
tv1336 = -32						; size = 4
tv1351 = -28						; size = 4
tv1340 = -28						; size = 4
tv1359 = -24						; size = 4
tv1334 = -24						; size = 4
_i$1$ = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -16						; size = 4
_bmpNo$ = -16						; size = 4
tv1339 = -12						; size = 4
_j$1$ = -8						; size = 4
_hit$ = -4						; size = 2
_hitX$ = 8						; size = 2
_x1$ = 8						; size = 4
_hitY$ = 12						; size = 2
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_tile$ = 24						; size = 4
_parts$ = 28						; size = 4
_event$ = 32						; size = 4
_hitMap$ = 36						; size = 4
?readHitMap@@YAXHHHHPAG000@Z PROC			; readHitMap, COMDAT

; 1553 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi

; 1554 : 	int width, height, i, j, k, l;
; 1555 : 	S2 hit, hitX, hitY;
; 1556 : 	U4 bmpNo = 0;
; 1557 : 
; 1558 : 	memset(hitMap, 0, MAP_X_SIZE * MAP_Y_SIZE * sizeof(short));

  00007	8b 7d 24	 mov	 edi, DWORD PTR _hitMap$[ebp]
  0000a	68 b2 0a 00 00	 push	 2738			; 00000ab2H
  0000f	6a 00		 push	 0
  00011	57		 push	 edi
  00012	e8 00 00 00 00	 call	 _memset

; 1559 : 
; 1560 : 	width = x2 - x1;

  00017	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1561 : 	height = y2 - y1;

  0001d	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00020	2b 4d 08	 sub	 ecx, DWORD PTR _x1$[ebp]
  00023	2b 55 0c	 sub	 edx, DWORD PTR _y1$[ebp]
  00026	89 4d 10	 mov	 DWORD PTR _x2$[ebp], ecx
  00029	89 55 14	 mov	 DWORD PTR _y2$[ebp], edx

; 1562 : 	if (width < 1 || height < 1)

  0002c	83 f9 01	 cmp	 ecx, 1
  0002f	0f 8c 4b 02 00
	00		 jl	 $LN37@readHitMap
  00035	83 fa 01	 cmp	 edx, 1
  00038	0f 8c 42 02 00
	00		 jl	 $LN37@readHitMap

; 1563 : 		return;
; 1564 : 
; 1565 : 	// ???
; 1566 : 	for (i = 0; i < height; i++)

  0003e	53		 push	 ebx
  0003f	8b c7		 mov	 eax, edi
  00041	89 55 e8	 mov	 DWORD PTR tv1359[ebp], edx
  00044	8b 55 20	 mov	 edx, DWORD PTR _event$[ebp]
  00047	56		 push	 esi
  00048	89 45 e4	 mov	 DWORD PTR tv1351[ebp], eax
  0004b	eb 05		 jmp	 SHORT $LN4@readHitMap
  0004d	0f 1f 00	 npad	 3
$LL136@readHitMap:
  00050	8b ce		 mov	 ecx, esi
$LN4@readHitMap:

; 1569 : 		{
; 1570 : 			// ???????
; 1571 : 			bmpNo = 0;
; 1572 : 			if (tile[i * width + j] > CG_INVISIBLE || (60 <= tile[i * width + j] && tile[i * width + j] <= 79))

  00052	8b 5d 18	 mov	 ebx, DWORD PTR _tile$[ebp]
  00055	8b f0		 mov	 esi, eax
  00057	8b c2		 mov	 eax, edx
  00059	2b da		 sub	 ebx, edx
  0005b	2b c7		 sub	 eax, edi
  0005d	8b f9		 mov	 edi, ecx
  0005f	89 45 dc	 mov	 DWORD PTR tv1354[ebp], eax
$LL7@readHitMap:
  00062	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00065	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bmpNo$[ebp], 0
  0006c	0f b7 04 19	 movzx	 eax, WORD PTR [ecx+ebx]
  00070	83 f8 63	 cmp	 eax, 99			; 00000063H
  00073	77 39		 ja	 SHORT $LN40@readHitMap
  00075	ba 3c 00 00 00	 mov	 edx, 60			; 0000003cH
  0007a	66 3b d0	 cmp	 dx, ax
  0007d	77 05		 ja	 SHORT $LN38@readHitMap
  0007f	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00082	76 2a		 jbe	 SHORT $LN40@readHitMap
$LN38@readHitMap:

; 1589 : 			}
; 1590 : 			else
; 1591 : 			{
; 1592 : 				// 0??11??????????????
; 1593 : 				switch (tile[i * width + j])

  00084	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00087	77 62		 ja	 SHORT $LN5@readHitMap
  00089	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN125@readHitMap[eax]
  00090	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN126@readHitMap[eax*4]
$LN45@readHitMap:

; 1594 : 				{
; 1595 : 					case 0:	// 0.bmp(???)????????????
; 1596 : 						// ????????????????????
; 1597 : 						if ((event[i * width + j] & MAP_SEE_FLAG) == 0)

  00097	b8 00 40 00 00	 mov	 eax, 16384		; 00004000H
  0009c	66 85 01	 test	 WORD PTR [ecx], ax
  0009f	74 4a		 je	 SHORT $LN5@readHitMap
$LN46@readHitMap:

; 1598 : 							break;
; 1599 : 					case 1:
; 1600 : 					case 2:
; 1601 : 					case 5:
; 1602 : 					case 6:
; 1603 : 					case 9:
; 1604 : 					case 10:
; 1605 : 						// ?????????????
; 1606 : 						if (hitMap[i * width + j] != 2)

  000a1	66 83 3e 02	 cmp	 WORD PTR [esi], 2
  000a5	74 44		 je	 SHORT $LN5@readHitMap

; 1607 : 							hitMap[i * width + j] = 1;

  000a7	b8 01 00 00 00	 mov	 eax, 1

; 1608 : 						break;

  000ac	eb 3a		 jmp	 SHORT $LN139@readHitMap
$LN40@readHitMap:

; 1573 : 			{
; 1574 : 				realGetNo(tile[i * width + j], &bmpNo);

  000ae	8d 4d f0	 lea	 ecx, DWORD PTR _bmpNo$[ebp]
  000b1	51		 push	 ecx
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 1575 : 				// ?????
; 1576 : 				realGetHitFlag(bmpNo, &hit);

  000b8	8d 45 fc	 lea	 eax, DWORD PTR _hit$[ebp]
  000bb	50		 push	 eax
  000bc	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  000bf	e8 00 00 00 00	 call	 ?realGetHitFlag@@YAHKPAF@Z ; realGetHitFlag

; 1577 : 				//CC FIX
; 1578 : 				//20170812
; 1579 : 				//修复 realGetHitFlag对于 hit 值 = 0的情况
; 1580 : 				//似乎正常的均为1
; 1581 : 				if (bmpNo > 300000)	//冰城的bmpNo大约都是300000以后？
; 1582 : 				{
; 1583 : 					//if (hit == 0) hit = 1;
; 1584 : 				}
; 1585 : 				if (hit == 0 && hitMap[i * width + j] != 2)

  000c4	66 8b 45 fc	 mov	 ax, WORD PTR _hit$[ebp]
  000c8	83 c4 10	 add	 esp, 16			; 00000010H
  000cb	66 85 c0	 test	 ax, ax
  000ce	75 0d		 jne	 SHORT $LN110@readHitMap
  000d0	66 83 3e 02	 cmp	 WORD PTR [esi], 2
  000d4	74 15		 je	 SHORT $LN5@readHitMap

; 1586 : 					hitMap[i * width + j] = 1;

  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	eb 0b		 jmp	 SHORT $LN139@readHitMap
$LN110@readHitMap:

; 1587 : 				else if (hit == 2) // hit?2?????????

  000dd	66 83 f8 02	 cmp	 ax, 2
  000e1	75 08		 jne	 SHORT $LN5@readHitMap
$LN124@readHitMap:

; 1588 : 					hitMap[i * width + j] = 2;

  000e3	b8 02 00 00 00	 mov	 eax, 2
$LN139@readHitMap:

; 1567 : 	{
; 1568 : 		for (j = 0; j < width; j++)

  000e8	66 89 06	 mov	 WORD PTR [esi], ax
$LN5@readHitMap:
  000eb	8b 45 dc	 mov	 eax, DWORD PTR tv1354[ebp]
  000ee	83 c6 02	 add	 esi, 2
  000f1	83 ef 01	 sub	 edi, 1
  000f4	0f 85 68 ff ff
	ff		 jne	 $LL7@readHitMap

; 1563 : 		return;
; 1564 : 
; 1565 : 	// ???
; 1566 : 	for (i = 0; i < height; i++)

  000fa	83 6d e8 01	 sub	 DWORD PTR tv1359[ebp], 1
  000fe	8b 45 e4	 mov	 eax, DWORD PTR tv1351[ebp]
  00101	8b 75 10	 mov	 esi, DWORD PTR _x2$[ebp]
  00104	8b 7d 24	 mov	 edi, DWORD PTR _hitMap$[ebp]
  00107	8b 55 20	 mov	 edx, DWORD PTR _event$[ebp]
  0010a	8d 04 70	 lea	 eax, DWORD PTR [eax+esi*2]
  0010d	89 45 e4	 mov	 DWORD PTR tv1351[ebp], eax
  00110	0f 85 3a ff ff
	ff		 jne	 $LL136@readHitMap

; 1609 : 
; 1610 : 					case 4:
; 1611 : 						hitMap[i * width + j] = 2;
; 1612 : 						break;
; 1613 : 				}
; 1614 : 			}
; 1615 : //#define SHOW_DEBUG_HIT 
; 1616 : #ifdef SHOW_DEBUG_HIT
; 1617 : 			char buf[100];
; 1618 : 			wsprintfA(buf, "%d,%3d,%-3d bmpNo:%-6d  hit:%d  tile:%d\n", nowFloor, x1 + j, y1 + i, bmpNo, hitMap[i * width + j], tile[i * width + j]);
; 1619 : 			OutputDebugString(buf);
; 1620 : #endif
; 1621 : 		}
; 1622 : 	}
; 1623 : #ifdef SHOW_DEBUG_HIT
; 1624 : 	OutputDebugString("---------------图层加上建筑物是否可hit----------------\n");
; 1625 : #endif
; 1626 : 	// ???
; 1627 : 	for (i = 0; i < height; i++)

  00116	33 c9		 xor	 ecx, ecx
  00118	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv1334[ebp], 0
  0011f	89 4d dc	 mov	 DWORD PTR tv1333[ebp], ecx
  00122	8b df		 mov	 ebx, edi
  00124	89 4d ec	 mov	 DWORD PTR _i$1$[ebp], ecx
$LL12@readHitMap:

; 1628 : 	{
; 1629 : 		for (j = 0; j < width; j++)

  00127	8b 45 20	 mov	 eax, DWORD PTR _event$[ebp]
  0012a	33 d2		 xor	 edx, edx
  0012c	2b 45 1c	 sub	 eax, DWORD PTR _parts$[ebp]
  0012f	8b f9		 mov	 edi, ecx
  00131	89 45 d8	 mov	 DWORD PTR tv1338[ebp], eax
  00134	8b 45 1c	 mov	 eax, DWORD PTR _parts$[ebp]
  00137	89 4d e4	 mov	 DWORD PTR tv1340[ebp], ecx
  0013a	03 cb		 add	 ecx, ebx
  0013c	2b c3		 sub	 eax, ebx
  0013e	89 55 f8	 mov	 DWORD PTR _j$1$[ebp], edx
  00141	89 4d f4	 mov	 DWORD PTR tv1339[ebp], ecx
  00144	89 45 d4	 mov	 DWORD PTR tv1337[ebp], eax
  00147	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL15@readHitMap:

; 1630 : 		{ 
; 1631 : 			// ???????
; 1632 : 			bmpNo = 0;
; 1633 : 			if (parts[i * width + j] > CG_INVISIBLE)

  00150	03 c1		 add	 eax, ecx
  00152	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bmpNo$[ebp], 0
  00159	89 45 e0	 mov	 DWORD PTR tv1336[ebp], eax
  0015c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0015f	8b c8		 mov	 ecx, eax
  00161	83 f8 63	 cmp	 eax, 99			; 00000063H
  00164	0f 86 05 02 00
	00		 jbe	 $LN55@readHitMap

; 1634 : 			{
; 1635 : 				realGetNo(parts[i * width + j], &bmpNo);

  0016a	8d 45 f0	 lea	 eax, DWORD PTR _bmpNo$[ebp]
  0016d	50		 push	 eax
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 1636 : 				// ?????
; 1637 : 				realGetHitFlag(bmpNo, &hit);

  00174	8d 45 fc	 lea	 eax, DWORD PTR _hit$[ebp]
  00177	50		 push	 eax
  00178	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  0017b	e8 00 00 00 00	 call	 ?realGetHitFlag@@YAHKPAF@Z ; realGetHitFlag

; 1638 : 				// ????????????
; 1639 : 				if (hit == 0)

  00180	66 8b 45 fc	 mov	 ax, WORD PTR _hit$[ebp]
  00184	83 c4 10	 add	 esp, 16			; 00000010H
  00187	66 85 c0	 test	 ax, ax
  0018a	0f 85 f5 00 00
	00		 jne	 $LN57@readHitMap

; 1640 : 				{
; 1641 : 					realGetHitPoints(bmpNo, &hitX, &hitY);

  00190	8d 45 0c	 lea	 eax, DWORD PTR _hitY$[ebp]
  00193	50		 push	 eax
  00194	8d 45 08	 lea	 eax, DWORD PTR _hitX$[ebp]
  00197	50		 push	 eax
  00198	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  0019b	e8 00 00 00 00	 call	 ?realGetHitPoints@@YAHKPAF0@Z ; realGetHitPoints

; 1642 : 					for (k = 0; k < hitY; k++)

  001a0	0f bf 5d 0c	 movsx	 ebx, WORD PTR _hitY$[ebp]
  001a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a7	89 5d f0	 mov	 DWORD PTR $T1[ebp], ebx
  001aa	85 db		 test	 ebx, ebx
  001ac	7e 70		 jle	 SHORT $LN135@readHitMap

; 1640 : 				{
; 1641 : 					realGetHitPoints(bmpNo, &hitX, &hitY);

  001ae	0f bf 7d 08	 movsx	 edi, WORD PTR _hitX$[ebp]
  001b2	8b 75 ec	 mov	 esi, DWORD PTR _i$1$[ebp]
  001b5	8b 55 e8	 mov	 edx, DWORD PTR tv1334[ebp]
  001b8	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  001bb	0f 1f 44 00 00	 npad	 5
$LL18@readHitMap:

; 1643 : 					{
; 1644 : 						for (l = 0; l < hitX; l++)

  001c0	33 c9		 xor	 ecx, ecx
  001c2	85 ff		 test	 edi, edi
  001c4	7e 47		 jle	 SHORT $LN16@readHitMap
  001c6	8b 5d f8	 mov	 ebx, DWORD PTR _j$1$[ebp]
  001c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL21@readHitMap:

; 1645 : 						{
; 1646 : 							if ((i - k) >= 0 && (j + l) < width && hitMap[(i - k) * width + j + l] != 2)

  001d0	85 f6		 test	 esi, esi
  001d2	78 2e		 js	 SHORT $LN19@readHitMap
  001d4	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  001d7	3b 45 10	 cmp	 eax, DWORD PTR _x2$[ebp]
  001da	7d 26		 jge	 SHORT $LN19@readHitMap
  001dc	8b 7d 24	 mov	 edi, DWORD PTR _hitMap$[ebp]
  001df	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  001e2	03 c3		 add	 eax, ebx
  001e4	66 83 3c 47 02	 cmp	 WORD PTR [edi+eax*2], 2
  001e9	0f bf 7d 08	 movsx	 edi, WORD PTR _hitX$[ebp]
  001ed	74 13		 je	 SHORT $LN19@readHitMap

; 1647 : 								hitMap[(i - k) * width + j + l] = 1;

  001ef	8b 5d 24	 mov	 ebx, DWORD PTR _hitMap$[ebp]
  001f2	bf 01 00 00 00	 mov	 edi, 1
  001f7	66 89 3c 43	 mov	 WORD PTR [ebx+eax*2], di
  001fb	0f bf 7d 08	 movsx	 edi, WORD PTR _hitX$[ebp]
  001ff	8b 5d f8	 mov	 ebx, DWORD PTR _j$1$[ebp]
$LN19@readHitMap:

; 1643 : 					{
; 1644 : 						for (l = 0; l < hitX; l++)

  00202	41		 inc	 ecx
  00203	3b cf		 cmp	 ecx, edi
  00205	7c c9		 jl	 SHORT $LL21@readHitMap
  00207	8b 5d f0	 mov	 ebx, DWORD PTR $T1[ebp]
  0020a	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
$LN16@readHitMap:

; 1642 : 					for (k = 0; k < hitY; k++)

  0020d	2b d0		 sub	 edx, eax
  0020f	4e		 dec	 esi
  00210	83 eb 01	 sub	 ebx, 1
  00213	89 5d f0	 mov	 DWORD PTR $T1[ebp], ebx
  00216	75 a8		 jne	 SHORT $LL18@readHitMap
$LN142@readHitMap:

; 1710 : 						break;
; 1711 : 				}
; 1712 : 			}
; 1713 : 
; 1714 : 			// ???????????????
; 1715 : 			if ((event[i * width + j] & 0x0fff) == EVENT_NPC)

  00218	8b 7d e4	 mov	 edi, DWORD PTR tv1340[ebp]
$LN131@readHitMap:
  0021b	8b 75 10	 mov	 esi, DWORD PTR _x2$[ebp]
$LN135@readHitMap:
  0021e	8b 55 f8	 mov	 edx, DWORD PTR _j$1$[ebp]
$LN138@readHitMap:
  00221	8b 4d f4	 mov	 ecx, DWORD PTR tv1339[ebp]
$LN34@readHitMap:
  00224	8b 5d d8	 mov	 ebx, DWORD PTR tv1338[ebp]
  00227	8b 45 e0	 mov	 eax, DWORD PTR tv1336[ebp]
  0022a	66 8b 04 18	 mov	 ax, WORD PTR [eax+ebx]
  0022e	bb ff 0f 00 00	 mov	 ebx, 4095		; 00000fffH
  00233	66 23 c3	 and	 ax, bx
  00236	8b 5d 24	 mov	 ebx, DWORD PTR _hitMap$[ebp]
  00239	66 83 f8 01	 cmp	 ax, 1
  0023d	75 08		 jne	 SHORT $LN13@readHitMap

; 1716 : 				hitMap[i * width + j] = 1;

  0023f	b8 01 00 00 00	 mov	 eax, 1
  00244	66 89 01	 mov	 WORD PTR [ecx], ax
$LN13@readHitMap:

; 1628 : 	{
; 1629 : 		for (j = 0; j < width; j++)

  00247	8b 45 d4	 mov	 eax, DWORD PTR tv1337[ebp]
  0024a	42		 inc	 edx
  0024b	83 c7 02	 add	 edi, 2
  0024e	89 55 f8	 mov	 DWORD PTR _j$1$[ebp], edx
  00251	83 c1 02	 add	 ecx, 2
  00254	89 7d e4	 mov	 DWORD PTR tv1340[ebp], edi
  00257	89 4d f4	 mov	 DWORD PTR tv1339[ebp], ecx
  0025a	3b d6		 cmp	 edx, esi
  0025c	0f 8c ee fe ff
	ff		 jl	 $LL15@readHitMap

; 1609 : 
; 1610 : 					case 4:
; 1611 : 						hitMap[i * width + j] = 2;
; 1612 : 						break;
; 1613 : 				}
; 1614 : 			}
; 1615 : //#define SHOW_DEBUG_HIT 
; 1616 : #ifdef SHOW_DEBUG_HIT
; 1617 : 			char buf[100];
; 1618 : 			wsprintfA(buf, "%d,%3d,%-3d bmpNo:%-6d  hit:%d  tile:%d\n", nowFloor, x1 + j, y1 + i, bmpNo, hitMap[i * width + j], tile[i * width + j]);
; 1619 : 			OutputDebugString(buf);
; 1620 : #endif
; 1621 : 		}
; 1622 : 	}
; 1623 : #ifdef SHOW_DEBUG_HIT
; 1624 : 	OutputDebugString("---------------图层加上建筑物是否可hit----------------\n");
; 1625 : #endif
; 1626 : 	// ???
; 1627 : 	for (i = 0; i < height; i++)

  00262	8b 4d dc	 mov	 ecx, DWORD PTR tv1333[ebp]
  00265	8b 45 ec	 mov	 eax, DWORD PTR _i$1$[ebp]
  00268	01 75 e8	 add	 DWORD PTR tv1334[ebp], esi
  0026b	40		 inc	 eax
  0026c	89 45 ec	 mov	 DWORD PTR _i$1$[ebp], eax
  0026f	8d 0c 71	 lea	 ecx, DWORD PTR [ecx+esi*2]
  00272	89 4d dc	 mov	 DWORD PTR tv1333[ebp], ecx
  00275	3b 45 14	 cmp	 eax, DWORD PTR _y2$[ebp]
  00278	0f 8c a9 fe ff
	ff		 jl	 $LL12@readHitMap
  0027e	5e		 pop	 esi
  0027f	5b		 pop	 ebx
$LN37@readHitMap:
  00280	5f		 pop	 edi

; 1717 : 		
; 1718 : #ifdef SHOW_DEBUG_HIT	
; 1719 : 			char buf[100];
; 1720 : 
; 1721 : 			wsprintfA(buf, "%d,%3d,%-3d bmpNo:%-6d  hit:%d  parts:%d\n", nowFloor, x1 + j, y1 + i, bmpNo, hitMap[i * width + j], parts[i * width + j]);
; 1722 : 			OutputDebugString(buf);
; 1723 : #endif
; 1724 : 		}
; 1725 : 	
; 1726 : 
; 1727 : 	
; 1728 : 	}
; 1729 : }

  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c3		 ret	 0
$LN57@readHitMap:

; 1648 : 						}
; 1649 : 					}
; 1650 : 				}
; 1651 : 				// ?????????????????
; 1652 : 				// ?????????
; 1653 : 				else if (hit == 2)

  00285	66 83 f8 02	 cmp	 ax, 2
  00289	75 72		 jne	 SHORT $LN60@readHitMap

; 1654 : 				{
; 1655 : 					realGetHitPoints(bmpNo, &hitX, &hitY);

  0028b	8d 45 0c	 lea	 eax, DWORD PTR _hitY$[ebp]
  0028e	50		 push	 eax
  0028f	8d 45 08	 lea	 eax, DWORD PTR _hitX$[ebp]
  00292	50		 push	 eax
  00293	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  00296	e8 00 00 00 00	 call	 ?realGetHitPoints@@YAHKPAF0@Z ; realGetHitPoints

; 1656 : 					for (k = 0; k < hitY; k++)

  0029b	0f bf 5d 0c	 movsx	 ebx, WORD PTR _hitY$[ebp]
  0029f	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a2	89 5d f0	 mov	 DWORD PTR $T2[ebp], ebx
  002a5	85 db		 test	 ebx, ebx
  002a7	0f 8e 71 ff ff
	ff		 jle	 $LN135@readHitMap

; 1654 : 				{
; 1655 : 					realGetHitPoints(bmpNo, &hitX, &hitY);

  002ad	0f bf 7d 08	 movsx	 edi, WORD PTR _hitX$[ebp]
  002b1	8b 75 ec	 mov	 esi, DWORD PTR _i$1$[ebp]
  002b4	8b 55 e8	 mov	 edx, DWORD PTR tv1334[ebp]
$LL24@readHitMap:

; 1657 : 					{
; 1658 : 						for (l = 0; l < hitX; l++)

  002b7	33 c0		 xor	 eax, eax
  002b9	85 ff		 test	 edi, edi
  002bb	7e 2f		 jle	 SHORT $LN22@readHitMap
  002bd	8b 5d f8	 mov	 ebx, DWORD PTR _j$1$[ebp]
$LL27@readHitMap:

; 1659 : 						{
; 1660 : 							if ((i - k) >= 0 && (j + l) < width)

  002c0	85 f6		 test	 esi, esi
  002c2	78 20		 js	 SHORT $LN25@readHitMap
  002c4	8d 0c 18	 lea	 ecx, DWORD PTR [eax+ebx]
  002c7	3b 4d 10	 cmp	 ecx, DWORD PTR _x2$[ebp]
  002ca	7d 18		 jge	 SHORT $LN25@readHitMap

; 1661 : 								hitMap[(i - k) * width + j + l] = 2;

  002cc	8b 7d 24	 mov	 edi, DWORD PTR _hitMap$[ebp]
  002cf	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  002d2	03 cb		 add	 ecx, ebx
  002d4	bb 02 00 00 00	 mov	 ebx, 2
  002d9	66 89 1c 4f	 mov	 WORD PTR [edi+ecx*2], bx
  002dd	0f bf 7d 08	 movsx	 edi, WORD PTR _hitX$[ebp]
  002e1	8b 5d f8	 mov	 ebx, DWORD PTR _j$1$[ebp]
$LN25@readHitMap:

; 1657 : 					{
; 1658 : 						for (l = 0; l < hitX; l++)

  002e4	40		 inc	 eax
  002e5	3b c7		 cmp	 eax, edi
  002e7	7c d7		 jl	 SHORT $LL27@readHitMap
  002e9	8b 5d f0	 mov	 ebx, DWORD PTR $T2[ebp]
$LN22@readHitMap:

; 1656 : 					for (k = 0; k < hitY; k++)

  002ec	2b 55 10	 sub	 edx, DWORD PTR _x2$[ebp]
  002ef	4e		 dec	 esi
  002f0	83 eb 01	 sub	 ebx, 1
  002f3	89 5d f0	 mov	 DWORD PTR $T2[ebp], ebx
  002f6	75 bf		 jne	 SHORT $LL24@readHitMap

; 1662 : 						}
; 1663 : 					}
; 1664 : 				}

  002f8	e9 1b ff ff ff	 jmp	 $LN142@readHitMap
$LN60@readHitMap:

; 1665 : 				else if (hit == 1 && parts[i * width + j] >= 15680 && parts[i * width + j] <= 15732)

  002fd	66 83 f8 01	 cmp	 ax, 1
  00301	0f 85 17 ff ff
	ff		 jne	 $LN135@readHitMap
  00307	8b 45 e0	 mov	 eax, DWORD PTR tv1336[ebp]
  0030a	b9 40 3d 00 00	 mov	 ecx, 15680		; 00003d40H
  0030f	66 8b 00	 mov	 ax, WORD PTR [eax]
  00312	66 2b c1	 sub	 ax, cx
  00315	66 83 f8 34	 cmp	 ax, 52			; 00000034H
  00319	0f 87 ff fe ff
	ff		 ja	 $LN135@readHitMap

; 1666 : 				{
; 1667 : 					realGetHitPoints(bmpNo, &hitX, &hitY);

  0031f	8d 45 0c	 lea	 eax, DWORD PTR _hitY$[ebp]
  00322	50		 push	 eax
  00323	8d 45 08	 lea	 eax, DWORD PTR _hitX$[ebp]
  00326	50		 push	 eax
  00327	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  0032a	e8 00 00 00 00	 call	 ?realGetHitPoints@@YAHKPAF0@Z ; realGetHitPoints

; 1668 : 					for (k = 0; k < hitY; k++)

  0032f	0f bf 75 0c	 movsx	 esi, WORD PTR _hitY$[ebp]
  00333	83 c4 0c	 add	 esp, 12			; 0000000cH
  00336	33 c9		 xor	 ecx, ecx
  00338	85 f6		 test	 esi, esi
  0033a	0f 8e db fe ff
	ff		 jle	 $LN131@readHitMap
  00340	0f bf 55 08	 movsx	 edx, WORD PTR _hitX$[ebp]
$LL30@readHitMap:

; 1669 : 					{
; 1670 : 						for (l = 0; l < hitX; l++)

  00344	33 c0		 xor	 eax, eax
  00346	85 d2		 test	 edx, edx
  00348	7e 1b		 jle	 SHORT $LN28@readHitMap
  0034a	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0034d	0f 1f 00	 npad	 3
$LL33@readHitMap:

; 1671 : 						{
; 1672 : 							//if ((i - k) >= 0 && (j + l) < width)
; 1673 : 								//hitMap[(i-k)*width+j+l] = 0;
; 1674 : 							if (k == 0 && l == 0)

  00350	85 c9		 test	 ecx, ecx
  00352	75 08		 jne	 SHORT $LN31@readHitMap
  00354	85 c0		 test	 eax, eax
  00356	75 04		 jne	 SHORT $LN31@readHitMap

; 1675 : 								hitMap[(i - k) * width + j + l] = 1;

  00358	66 89 34 1f	 mov	 WORD PTR [edi+ebx], si
$LN31@readHitMap:

; 1669 : 					{
; 1670 : 						for (l = 0; l < hitX; l++)

  0035c	40		 inc	 eax
  0035d	3b c2		 cmp	 eax, edx
  0035f	7c ef		 jl	 SHORT $LL33@readHitMap
  00361	0f bf 75 0c	 movsx	 esi, WORD PTR _hitY$[ebp]
$LN28@readHitMap:

; 1668 : 					for (k = 0; k < hitY; k++)

  00365	41		 inc	 ecx
  00366	3b ce		 cmp	 ecx, esi
  00368	7c da		 jl	 SHORT $LL30@readHitMap

; 1710 : 						break;
; 1711 : 				}
; 1712 : 			}
; 1713 : 
; 1714 : 			// ???????????????
; 1715 : 			if ((event[i * width + j] & 0x0fff) == EVENT_NPC)

  0036a	e9 ac fe ff ff	 jmp	 $LN131@readHitMap
$LN55@readHitMap:

; 1676 : 						}
; 1677 : 					}					
; 1678 : 				}	
; 1679 : 			}
; 1680 : 			else if (60 <= parts[i * width + j] && parts[i * width + j] <= 79)

  0036f	83 c0 c4	 add	 eax, -60		; ffffffc4H
  00372	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  00376	77 3f		 ja	 SHORT $LN65@readHitMap

; 1681 : 			{
; 1682 : 				realGetNo(parts[i * width + j], &bmpNo);

  00378	8d 45 f0	 lea	 eax, DWORD PTR _bmpNo$[ebp]
  0037b	50		 push	 eax
  0037c	51		 push	 ecx
  0037d	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 1683 : 				// ?????
; 1684 : 				realGetHitFlag(bmpNo, &hit);

  00382	8d 45 fc	 lea	 eax, DWORD PTR _hit$[ebp]
  00385	50		 push	 eax
  00386	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  00389	e8 00 00 00 00	 call	 ?realGetHitFlag@@YAHKPAF@Z ; realGetHitFlag

; 1685 : 				// ????????????
; 1686 : 				if (hit == 0 && hitMap[i * width + j] != 2)

  0038e	66 8b 45 fc	 mov	 ax, WORD PTR _hit$[ebp]
  00392	83 c4 10	 add	 esp, 16			; 00000010H
  00395	8b 4d f4	 mov	 ecx, DWORD PTR tv1339[ebp]
  00398	8b 55 f8	 mov	 edx, DWORD PTR _j$1$[ebp]
  0039b	66 85 c0	 test	 ax, ax
  0039e	74 32		 je	 SHORT $LN140@readHitMap

; 1687 : 					hitMap[i * width + j] = 1;
; 1688 : 				// hit?2?????????
; 1689 : 				else if (hit == 2)

  003a0	66 83 f8 02	 cmp	 ax, 2
  003a4	0f 85 7a fe ff
	ff		 jne	 $LN34@readHitMap

; 1690 : 					hitMap[i * width + j] = 2;

  003aa	b8 02 00 00 00	 mov	 eax, 2
  003af	66 89 01	 mov	 WORD PTR [ecx], ax

; 1691 : 			}

  003b2	e9 6d fe ff ff	 jmp	 $LN34@readHitMap
$LN65@readHitMap:

; 1692 : 			else
; 1693 : 			{
; 1694 : 				// 0??11??????????????
; 1695 : 				switch (parts[i * width + j])

  003b7	49		 dec	 ecx
  003b8	83 f9 09	 cmp	 ecx, 9
  003bb	0f 87 60 fe ff
	ff		 ja	 $LN138@readHitMap
  003c1	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR $LN127@readHitMap[ecx]
  003c8	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN128@readHitMap[eax*4]
$LN70@readHitMap:

; 1696 : 				{	
; 1697 : 					case 1:
; 1698 : 					case 2:
; 1699 : 					case 5:
; 1700 : 					case 6:
; 1701 : 					case 9:
; 1702 : 					case 10:
; 1703 : 						// ?????????????
; 1704 : 						if (hitMap[i * width + j] != 2)

  003cf	8b 4d f4	 mov	 ecx, DWORD PTR tv1339[ebp]
$LN140@readHitMap:

; 1710 : 						break;
; 1711 : 				}
; 1712 : 			}
; 1713 : 
; 1714 : 			// ???????????????
; 1715 : 			if ((event[i * width + j] & 0x0fff) == EVENT_NPC)

  003d2	66 83 39 02	 cmp	 WORD PTR [ecx], 2
  003d6	0f 84 48 fe ff
	ff		 je	 $LN34@readHitMap
  003dc	b8 01 00 00 00	 mov	 eax, 1
  003e1	66 89 01	 mov	 WORD PTR [ecx], ax
  003e4	e9 3b fe ff ff	 jmp	 $LN34@readHitMap
$LN77@readHitMap:

; 1705 : 							hitMap[i * width + j] = 1;
; 1706 : 						break;
; 1707 : 
; 1708 : 					case 4:
; 1709 : 						hitMap[i * width + j] = 2;

  003e9	8b 4d f4	 mov	 ecx, DWORD PTR tv1339[ebp]
  003ec	b8 02 00 00 00	 mov	 eax, 2

; 1710 : 						break;
; 1711 : 				}
; 1712 : 			}
; 1713 : 
; 1714 : 			// ???????????????
; 1715 : 			if ((event[i * width + j] & 0x0fff) == EVENT_NPC)

  003f1	66 89 01	 mov	 WORD PTR [ecx], ax
  003f4	e9 2b fe ff ff	 jmp	 $LN34@readHitMap
  003f9	0f 1f 00	 npad	 3
$LN126@readHitMap:

; 1717 : 		
; 1718 : #ifdef SHOW_DEBUG_HIT	
; 1719 : 			char buf[100];
; 1720 : 
; 1721 : 			wsprintfA(buf, "%d,%3d,%-3d bmpNo:%-6d  hit:%d  parts:%d\n", nowFloor, x1 + j, y1 + i, bmpNo, hitMap[i * width + j], parts[i * width + j]);
; 1722 : 			OutputDebugString(buf);
; 1723 : #endif
; 1724 : 		}
; 1725 : 	
; 1726 : 
; 1727 : 	
; 1728 : 	}
; 1729 : }

  003fc	00 00 00 00	 DD	 $LN45@readHitMap
  00400	00 00 00 00	 DD	 $LN46@readHitMap
  00404	00 00 00 00	 DD	 $LN124@readHitMap
  00408	00 00 00 00	 DD	 $LN5@readHitMap
$LN125@readHitMap:
  0040c	00		 DB	 0
  0040d	01		 DB	 1
  0040e	01		 DB	 1
  0040f	03		 DB	 3
  00410	02		 DB	 2
  00411	01		 DB	 1
  00412	01		 DB	 1
  00413	03		 DB	 3
  00414	03		 DB	 3
  00415	01		 DB	 1
  00416	01		 DB	 1
  00417	90		 npad	 1
$LN128@readHitMap:
  00418	00 00 00 00	 DD	 $LN70@readHitMap
  0041c	00 00 00 00	 DD	 $LN77@readHitMap
  00420	00 00 00 00	 DD	 $LN138@readHitMap
$LN127@readHitMap:
  00424	00		 DB	 0
  00425	00		 DB	 0
  00426	02		 DB	 2
  00427	01		 DB	 1
  00428	00		 DB	 0
  00429	00		 DB	 0
  0042a	02		 DB	 2
  0042b	02		 DB	 2
  0042c	00		 DB	 0
  0042d	00		 DB	 0
?readHitMap@@YAXHHHHPAG000@Z ENDP			; readHitMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?readMap@@YAHHHHHHPAG00@Z
_TEXT	SEGMENT
_len$3$ = -324						; size = 4
_event$GSCopy$1$ = -320					; size = 4
_parts$GSCopy$1$ = -316					; size = 4
_fOffset$2$ = -316					; size = 4
tv619 = -312						; size = 4
tv614 = -308						; size = 4
_height$1$ = -304					; size = 4
_mWidth$1$ = -300					; size = 4
_fHeight$ = -296					; size = 4
_fWidth$ = -292						; size = 4
_len$1$ = -288						; size = 4
_fOffset$1$ = -288					; size = 4
tv566 = -288						; size = 4
tv621 = -284						; size = 4
tv618 = -284						; size = 4
tv568 = -284						; size = 4
_len2$1$ = -280						; size = 4
_tile$GSCopy$1$ = -276					; size = 4
tv608 = -276						; size = 4
tv604 = -276						; size = 4
_filename$ = -272					; size = 255
_list$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_floor$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_tile$ = 28						; size = 4
_parts$ = 32						; size = 4
_event$ = 36						; size = 4
?readMap@@YAHHHHHHPAG00@Z PROC				; readMap, COMDAT

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 24	 mov	 eax, DWORD PTR _event$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 1c	 mov	 ebx, DWORD PTR _tile$[ebp]
  0001a	56		 push	 esi
  0001b	57		 push	 edi

; 583  : 	FILE *fp;
; 584  : 	char filename[255];
; 585  : #ifdef _FIX_DEL_MAP           // WON 修正玩家抽地图
; 586  : 	char list[10];
; 587  : #endif
; 588  : 	int fWidth, fHeight, fOffset, mWidth, width, height, fx, fy, mx, my, len, len2, i;    
; 589  : 
; 590  : 	// 读取文件名创建
; 591  : 	sprintf(filename, "map\\%d.dat", floor);

  0001c	ff 75 08	 push	 DWORD PTR _floor$[ebp]
  0001f	8b 7d 20	 mov	 edi, DWORD PTR _parts$[ebp]
  00022	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _event$GSCopy$1$[ebp], eax
  00028	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FCEGIJN@map?2?$CFd?4dat@
  00033	50		 push	 eax
  00034	89 9d ec fe ff
	ff		 mov	 DWORD PTR _tile$GSCopy$1$[ebp], ebx
  0003a	89 bd c4 fe ff
	ff		 mov	 DWORD PTR _parts$GSCopy$1$[ebp], edi
  00040	e8 00 00 00 00	 call	 _sprintf

; 592  : 
; 593  : 	//文件打开
; 594  : 	if ((fp = fopen(filename, "rb")) == NULL)

  00045	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _fopen
  00056	8b f0		 mov	 esi, eax
  00058	83 c4 14	 add	 esp, 20			; 00000014H
  0005b	85 f6		 test	 esi, esi
  0005d	75 3b		 jne	 SHORT $LN12@readMap

; 595  : 	{
; 596  : #ifdef _FIX_DEL_MAP	//andy_add
; 597  : 		memset(tile, 193, MAP_X_SIZE * MAP_Y_SIZE * sizeof(short));

  0005f	68 b2 0a 00 00	 push	 2738			; 00000ab2H
  00064	68 c1 00 00 00	 push	 193			; 000000c1H
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 _memset

; 598  : 		//memset(parts, 193, MAP_X_SIZE * MAP_Y_SIZE * sizeof(short));
; 599  : #else
; 600  : 		// 所以做一个文件夹
; 601  : 		_mkdir("map");
; 602  : 		// 也读取数据
; 603  : 		fp = fopen(filename, "wb");     
; 604  : 		fclose(fp);
; 605  : 		// 在读取模式下再次打开
; 606  : #endif
; 607  : 		// ??????????????
; 608  : 		if ((fp = fopen(filename, "rb")) == NULL)

  0006f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _fopen
  00080	8b f0		 mov	 esi, eax
  00082	83 c4 14	 add	 esp, 20			; 00000014H
  00085	85 f6		 test	 esi, esi
  00087	75 11		 jne	 SHORT $LN12@readMap

; 682  : 
; 683  : 	return TRUE;
; 684  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008f	33 cd		 xor	 ecx, ebp
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN12@readMap:

; 609  : 			return FALSE;
; 610  : 	}
; 611  : 
; 612  : #ifdef _FIX_DEL_MAP           // WON 修正玩家抽地图    
; 613  :     fseek(fp, 0, SEEK_SET);

  0009a	6a 00		 push	 0
  0009c	6a 00		 push	 0
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 _fseek

; 614  : 	if (!fread(list, sizeof(char), 1, fp)) {   // 玩家抽掉地图送监狱

  000a4	56		 push	 esi
  000a5	6a 01		 push	 1
  000a7	8d 45 f0	 lea	 eax, DWORD PTR _list$[ebp]
  000aa	6a 01		 push	 1
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 _fread
  000b2	83 c4 1c	 add	 esp, 28			; 0000001cH
  000b5	68 b2 0a 00 00	 push	 2738			; 00000ab2H
  000ba	85 c0		 test	 eax, eax
  000bc	75 19		 jne	 SHORT $LN13@readMap

; 615  : 		//andy_add
; 616  : 		memset(tile, 193, MAP_X_SIZE * MAP_Y_SIZE * sizeof(short));

  000be	68 c1 00 00 00	 push	 193			; 000000c1H
  000c3	53		 push	 ebx
  000c4	e8 00 00 00 00	 call	 _memset

; 617  : 		//memset(parts, 193, MAP_X_SIZE * MAP_Y_SIZE * sizeof(short));
; 618  :          fclose(fp);

  000c9	56		 push	 esi
  000ca	e8 00 00 00 00	 call	 _fclose
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 619  :          //lssproto_DM_send(sockfd);
; 620  :          return TRUE;

  000d2	e9 ae 02 00 00	 jmp	 $LN34@readMap
$LN13@readMap:

; 621  : 	}
; 622  : #endif
; 623  : 
; 624  : 	memset(tile, 0, MAP_X_SIZE * MAP_Y_SIZE * sizeof(short));

  000d7	6a 00		 push	 0
  000d9	53		 push	 ebx
  000da	e8 00 00 00 00	 call	 _memset

; 625  : 	memset(parts, 0, MAP_X_SIZE * MAP_Y_SIZE * sizeof(short));

  000df	68 b2 0a 00 00	 push	 2738			; 00000ab2H
  000e4	6a 00		 push	 0
  000e6	57		 push	 edi
  000e7	e8 00 00 00 00	 call	 _memset

; 626  : 	memset(event, 0, MAP_X_SIZE * MAP_Y_SIZE * sizeof(short));

  000ec	68 b2 0a 00 00	 push	 2738			; 00000ab2H
  000f1	6a 00		 push	 0
  000f3	ff b5 c0 fe ff
	ff		 push	 DWORD PTR _event$GSCopy$1$[ebp]
  000f9	e8 00 00 00 00	 call	 _memset

; 627  : 	fseek(fp, 0, SEEK_SET);

  000fe	6a 00		 push	 0
  00100	6a 00		 push	 0
  00102	56		 push	 esi
  00103	e8 00 00 00 00	 call	 _fseek

; 628  : 	fread(&fWidth,  sizeof(int), 1, fp);

  00108	56		 push	 esi
  00109	6a 01		 push	 1
  0010b	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _fWidth$[ebp]
  00111	6a 04		 push	 4
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 _fread
  00119	83 c4 40	 add	 esp, 64			; 00000040H

; 629  : 	fread(&fHeight, sizeof(int), 1, fp);

  0011c	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _fHeight$[ebp]
  00122	56		 push	 esi
  00123	6a 01		 push	 1
  00125	6a 04		 push	 4
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 _fread

; 630  : 	mWidth = x2 - x1;
; 631  : 	width = mWidth;

  0012d	8b 5d 18	 mov	 ebx, DWORD PTR _y2$[ebp]
  00130	83 c4 10	 add	 esp, 16			; 00000010H
  00133	8b 55 14	 mov	 edx, DWORD PTR _x2$[ebp]
  00136	8b cb		 mov	 ecx, ebx
  00138	2b 4d 10	 sub	 ecx, DWORD PTR _y1$[ebp]
  0013b	8b fa		 mov	 edi, edx
  0013d	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  00140	2b f8		 sub	 edi, eax
  00142	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv568[ebp], ecx

; 632  : 	height = y2 - y1;
; 633  : 	mx = 0;
; 634  : 	fx = x1;
; 635  : 	if (x1 < 0){
; 636  : 		width += x1;
; 637  : 		fx = 0;
; 638  : 		mx -= x1;
; 639  : 	}
; 640  : 	if (x2 > fWidth)

  00148	33 c9		 xor	 ecx, ecx
  0014a	85 c0		 test	 eax, eax
  0014c	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _mWidth$1$[ebp], edi
  00152	0f 49 c8	 cmovns	 ecx, eax
  00155	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _fWidth$[ebp]
  0015b	89 8d cc fe ff
	ff		 mov	 DWORD PTR tv614[ebp], ecx
  00161	8b ca		 mov	 ecx, edx
  00163	0f 49 cf	 cmovns	 ecx, edi
  00166	3b d0		 cmp	 edx, eax
  00168	7e 04		 jle	 SHORT $LN15@readMap

; 641  : 		width -= (x2 - fWidth);

  0016a	2b ca		 sub	 ecx, edx
  0016c	03 c8		 add	 ecx, eax
$LN15@readMap:

; 642  : 	my = 0;
; 643  : 	fy = y1;
; 644  : 	if (y1 < 0){
; 645  : 		height += y1;
; 646  : 		fy = 0;
; 647  : 		my -= y1;
; 648  : 	}
; 649  : 	if (y2 > fHeight)

  0016e	8b 45 10	 mov	 eax, DWORD PTR _y1$[ebp]
  00171	33 ff		 xor	 edi, edi
  00173	85 c0		 test	 eax, eax
  00175	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv566[ebp], 0
  0017f	8b d0		 mov	 edx, eax
  00181	0f 49 f8	 cmovns	 edi, eax
  00184	f7 da		 neg	 edx
  00186	85 c0		 test	 eax, eax
  00188	89 bd bc fe ff
	ff		 mov	 DWORD PTR _len$3$[ebp], edi
  0018e	8b 45 18	 mov	 eax, DWORD PTR _y2$[ebp]
  00191	0f 49 9d e4 fe
	ff ff		 cmovns	 ebx, DWORD PTR tv568[ebp]
  00198	0f 49 95 e0 fe
	ff ff		 cmovns	 edx, DWORD PTR tv566[ebp]
  0019f	89 9d d0 fe ff
	ff		 mov	 DWORD PTR _height$1$[ebp], ebx
  001a5	3b 85 d8 fe ff
	ff		 cmp	 eax, DWORD PTR _fHeight$[ebp]
  001ab	7e 0e		 jle	 SHORT $LN17@readMap

; 650  : 		height -= (y2 - fHeight);

  001ad	2b d8		 sub	 ebx, eax
  001af	03 9d d8 fe ff
	ff		 add	 ebx, DWORD PTR _fHeight$[ebp]
  001b5	89 9d d0 fe ff
	ff		 mov	 DWORD PTR _height$1$[ebp], ebx
$LN17@readMap:

; 651  : 
; 652  : 	fOffset = sizeof(int) * 2;
; 653  : 	len = fy * fWidth + fx;
; 654  : 	len2 = my * mWidth + mx;

  001bb	0f af 95 d4 fe
	ff ff		 imul	 edx, DWORD PTR _mWidth$1$[ebp]
  001c2	8b c7		 mov	 eax, edi
  001c4	0f af 85 dc fe
	ff ff		 imul	 eax, DWORD PTR _fWidth$[ebp]
  001cb	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _len2$1$[ebp], edx
  001d1	03 85 cc fe ff
	ff		 add	 eax, DWORD PTR tv614[ebp]
  001d7	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _len$1$[ebp], eax
  001dd	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  001e0	29 85 e8 fe ff
	ff		 sub	 DWORD PTR _len2$1$[ebp], eax
  001e6	85 c0		 test	 eax, eax
  001e8	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _len2$1$[ebp]
  001ee	0f 49 c2	 cmovns	 eax, edx
  001f1	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _len2$1$[ebp], eax

; 655  : 	for (i = 0; i < height; i++){

  001f7	85 db		 test	 ebx, ebx
  001f9	0f 8e 7d 01 00
	00		 jle	 $LN9@readMap
  001ff	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  00202	89 9d e4 fe ff
	ff		 mov	 DWORD PTR tv621[ebp], ebx
  00208	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _len2$1$[ebp]
  0020e	8b 9d e0 fe ff
	ff		 mov	 ebx, DWORD PTR _len$1$[ebp]
  00214	89 85 c8 fe ff
	ff		 mov	 DWORD PTR tv619[ebp], eax
  0021a	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _tile$GSCopy$1$[ebp]
  00220	8b bd c8 fe ff
	ff		 mov	 edi, DWORD PTR tv619[ebp]
  00226	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00229	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv608[ebp], eax
  0022f	90		 npad	 1
$LL4@readMap:

; 656  : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  00230	6a 00		 push	 0
  00232	8d 04 5d 08 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+8]
  00239	50		 push	 eax
  0023a	56		 push	 esi
  0023b	e8 00 00 00 00	 call	 _fseek

; 657  : 		fread(&tile[len2], sizeof(short) * width, 1, fp);

  00240	56		 push	 esi
  00241	6a 01		 push	 1
  00243	57		 push	 edi
  00244	ff b5 ec fe ff
	ff		 push	 DWORD PTR tv608[ebp]
  0024a	e8 00 00 00 00	 call	 _fread

; 658  : 		len  += fWidth;
; 659  : 		len2 += mWidth;

  0024f	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _mWidth$1$[ebp]
  00255	83 c4 1c	 add	 esp, 28			; 0000001cH
  00258	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _fWidth$[ebp]
  0025e	03 d9		 add	 ebx, ecx
  00260	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00263	01 85 ec fe ff
	ff		 add	 DWORD PTR tv608[ebp], eax
  00269	83 ad e4 fe ff
	ff 01		 sub	 DWORD PTR tv621[ebp], 1
  00270	75 be		 jne	 SHORT $LL4@readMap

; 660  : 	}
; 661  : 	fOffset += sizeof(short) * (fWidth * fHeight);

  00272	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _fHeight$[ebp]
  00278	8b 9d d0 fe ff
	ff		 mov	 ebx, DWORD PTR _height$1$[ebp]
  0027e	8b bd c4 fe ff
	ff		 mov	 edi, DWORD PTR _parts$GSCopy$1$[ebp]
  00284	0f af c1	 imul	 eax, ecx
  00287	89 9d e4 fe ff
	ff		 mov	 DWORD PTR tv618[ebp], ebx
  0028d	8b 9d bc fe ff
	ff		 mov	 ebx, DWORD PTR _len$3$[ebp]
  00293	0f af d9	 imul	 ebx, ecx
  00296	03 9d cc fe ff
	ff		 add	 ebx, DWORD PTR tv614[ebp]
  0029c	8d 14 45 08 00
	00 00		 lea	 edx, DWORD PTR [eax*2+8]
  002a3	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _len2$1$[ebp]
  002a9	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _fOffset$1$[ebp], edx
  002af	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  002b2	8b bd c8 fe ff
	ff		 mov	 edi, DWORD PTR tv619[ebp]
  002b8	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv604[ebp], eax
  002be	66 90		 npad	 2
$LL7@readMap:

; 662  : 	len = fy * fWidth + fx;
; 663  : 	len2 = my * mWidth + mx;
; 664  : 	for (i = 0; i < height; i++)
; 665  : 	{
; 666  : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  002c0	6a 00		 push	 0
  002c2	8d 04 5a	 lea	 eax, DWORD PTR [edx+ebx*2]
  002c5	50		 push	 eax
  002c6	56		 push	 esi
  002c7	e8 00 00 00 00	 call	 _fseek

; 667  : 		fread(&parts[len2], sizeof(short) * width, 1, fp);

  002cc	56		 push	 esi
  002cd	6a 01		 push	 1
  002cf	57		 push	 edi
  002d0	ff b5 ec fe ff
	ff		 push	 DWORD PTR tv604[ebp]
  002d6	e8 00 00 00 00	 call	 _fread

; 668  : 		len  += fWidth;
; 669  : 		len2 += mWidth;

  002db	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _mWidth$1$[ebp]
  002e1	83 c4 1c	 add	 esp, 28			; 0000001cH
  002e4	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _fWidth$[ebp]
  002ea	03 d9		 add	 ebx, ecx
  002ec	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  002ef	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _fOffset$1$[ebp]
  002f5	01 85 ec fe ff
	ff		 add	 DWORD PTR tv604[ebp], eax
  002fb	83 ad e4 fe ff
	ff 01		 sub	 DWORD PTR tv618[ebp], 1
  00302	75 bc		 jne	 SHORT $LL7@readMap

; 670  : 	}
; 671  : 	fOffset += sizeof(short) * (fWidth * fHeight);

  00304	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _len2$1$[ebp]
  0030a	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _event$GSCopy$1$[ebp]
  00310	8b bd bc fe ff
	ff		 mov	 edi, DWORD PTR _len$3$[ebp]
  00316	0f af f9	 imul	 edi, ecx
  00319	8d 1c 42	 lea	 ebx, DWORD PTR [edx+eax*2]
  0031c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _fHeight$[ebp]
  00322	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _fOffset$1$[ebp]
  00328	0f af c1	 imul	 eax, ecx
  0032b	03 bd cc fe ff
	ff		 add	 edi, DWORD PTR tv614[ebp]
  00331	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00334	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _fOffset$2$[ebp], eax
  0033a	66 0f 1f 44 00
	00		 npad	 6
$LL10@readMap:

; 672  : 	len = fy * fWidth + fx;
; 673  : 	len2 = my * mWidth + mx;
; 674  : 	for (i = 0; i < height; i++)
; 675  : 	{
; 676  : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  00340	6a 00		 push	 0
  00342	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
  00345	50		 push	 eax
  00346	56		 push	 esi
  00347	e8 00 00 00 00	 call	 _fseek

; 677  : 		fread(&event[len2], sizeof(short) * width, 1, fp);

  0034c	56		 push	 esi
  0034d	6a 01		 push	 1
  0034f	ff b5 c8 fe ff
	ff		 push	 DWORD PTR tv619[ebp]
  00355	53		 push	 ebx
  00356	e8 00 00 00 00	 call	 _fread

; 678  : 		len  += fWidth;
; 679  : 		len2 += mWidth;

  0035b	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _mWidth$1$[ebp]
  00361	83 c4 1c	 add	 esp, 28			; 0000001cH
  00364	03 bd dc fe ff
	ff		 add	 edi, DWORD PTR _fWidth$[ebp]
  0036a	83 ad d0 fe ff
	ff 01		 sub	 DWORD PTR _height$1$[ebp], 1
  00371	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _fOffset$2$[ebp]
  00377	8d 1c 4b	 lea	 ebx, DWORD PTR [ebx+ecx*2]
  0037a	75 c4		 jne	 SHORT $LL10@readMap
$LN9@readMap:

; 680  : 	}
; 681  : 	fclose (fp);

  0037c	56		 push	 esi
  0037d	e8 00 00 00 00	 call	 _fclose
  00382	83 c4 04	 add	 esp, 4
$LN34@readMap:

; 682  : 
; 683  : 	return TRUE;
; 684  : }

  00385	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00388	b8 01 00 00 00	 mov	 eax, 1
  0038d	5f		 pop	 edi
  0038e	5e		 pop	 esi
  0038f	33 cd		 xor	 ecx, ebp
  00391	5b		 pop	 ebx
  00392	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00397	8b e5		 mov	 esp, ebp
  00399	5d		 pop	 ebp
  0039a	c3		 ret	 0
?readMap@@YAHHHHHHPAG00@Z ENDP				; readMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?getPartyTbl@@YAXXZ
_TEXT	SEGMENT
?getPartyTbl@@YAXXZ PROC				; getPartyTbl, COMDAT

; 2720 : 	int i, j;
; 2721 : 
; 2722 : 	if (partyModeFlag != 0)

  00000	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?partyModeFlag@@3FA, 0 ; partyModeFlag
  00008	74 43		 je	 SHORT $LN6@getPartyTb

; 2723 : 	{
; 2724 : 		// ???????
; 2725 : 		for (i = 0; i < MAX_PARTY; i++)

  0000a	83 c8 ff	 or	 eax, -1

; 2726 : 			_partyTbl[i] = -1;
; 2727 : 		// ????????????
; 2728 : 		for (i = 0, j = 0; i < MAX_PARTY; i++)

  0000d	ba 00 00 00 00	 mov	 edx, OFFSET ?_partyTbl@@3PAFA ; _partyTbl
  00012	a3 00 00 00 00	 mov	 DWORD PTR ?_partyTbl@@3PAFA, eax
  00017	33 c9		 xor	 ecx, ecx
  00019	a3 04 00 00 00	 mov	 DWORD PTR ?_partyTbl@@3PAFA+4, eax
  0001e	66 a3 08 00 00
	00		 mov	 WORD PTR ?_partyTbl@@3PAFA+8, ax
  00024	b8 2c 00 00 00	 mov	 eax, OFFSET ?party@@3PAUPARTY@@A+44
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@getPartyTb:

; 2729 : 		{
; 2730 : 			if (party[i].useFlag != 0 && party[i].ptAct != NULL)

  00030	66 83 78 d4 00	 cmp	 WORD PTR [eax-44], 0
  00035	74 0b		 je	 SHORT $LN5@getPartyTb
  00037	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003a	74 06		 je	 SHORT $LN5@getPartyTb

; 2731 : 			{
; 2732 : 				_partyTbl[j] = i;

  0003c	66 89 0a	 mov	 WORD PTR [edx], cx

; 2733 : 				j++;

  0003f	83 c2 02	 add	 edx, 2
$LN5@getPartyTb:

; 2726 : 			_partyTbl[i] = -1;
; 2727 : 		// ????????????
; 2728 : 		for (i = 0, j = 0; i < MAX_PARTY; i++)

  00042	83 c0 30	 add	 eax, 48			; 00000030H
  00045	41		 inc	 ecx
  00046	3d 1c 01 00 00	 cmp	 eax, OFFSET ?party@@3PAUPARTY@@A+284
  0004b	7c e3		 jl	 SHORT $LL7@getPartyTb
$LN6@getPartyTb:

; 2734 : 			}
; 2735 : 		}
; 2736 : 	}
; 2737 : }

  0004d	c3		 ret	 0
?getPartyTbl@@YAXXZ ENDP				; getPartyTbl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?partyMoveProc@@YAXXZ
_TEXT	SEGMENT
?partyMoveProc@@YAXXZ PROC				; partyMoveProc, COMDAT

; 2464 : 	int i;
; 2465 : 	ACTION *ptAct, *ptActNext;
; 2466 : 
; 2467 : 	// ??????????????????????
; 2468 : 	// ????????????????????????
; 2469 : 	for (i = 0; i < MAX_PARTY; i++)

  00000	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42800000
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	33 ff		 xor	 edi, edi
  0000c	0f 1f 40 00	 npad	 4
$LL4@partyMoveP:

; 2470 : 	{
; 2471 : 		if (_partyTbl[i] >= 0)

  00010	0f b7 04 7d 00
	00 00 00	 movzx	 eax, WORD PTR ?_partyTbl@@3PAFA[edi*2]
  00018	66 85 c0	 test	 ax, ax
  0001b	0f 88 7d 01 00
	00		 js	 $LN8@partyMoveP

; 2472 : 		{
; 2473 : 			ptAct = party[_partyTbl[i]].ptAct;

  00021	98		 cwde
  00022	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00025	c1 e0 04	 shl	 eax, 4
  00028	8b b0 2c 00 00
	00		 mov	 esi, DWORD PTR ?party@@3PAUPARTY@@A[eax+44]

; 2474 : 
; 2475 : 			// ?????
; 2476 : 			if (party[_partyTbl[i]].id != pc.id)

  0002e	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?party@@3PAUPARTY@@A[eax+4]
  00034	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?pc@@3UPC@@A+8
  0003a	0f 84 b4 00 00
	00		 je	 $LN10@partyMoveP

; 2477 : 			{
; 2478 : 				// ????????????????
; 2479 : 				if ((float)ptAct->nextGx * GRID_SIZE == ptAct->mx && (float)ptAct->nextGy * GRID_SIZE == ptAct->my)

  00040	66 0f 6e 86 bc
	00 00 00	 movd	 xmm0, DWORD PTR [esi+188]
  00048	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0004b	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0004f	0f 2e 86 18 01
	00 00		 ucomiss xmm0, DWORD PTR [esi+280]
  00056	9f		 lahf
  00057	f6 c4 44	 test	 ah, 68			; 00000044H
  0005a	0f 8a 34 01 00
	00		 jp	 $LN2@partyMoveP
  00060	66 0f 6e 86 c0
	00 00 00	 movd	 xmm0, DWORD PTR [esi+192]
  00068	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006b	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0006f	0f 2e 86 1c 01
	00 00		 ucomiss xmm0, DWORD PTR [esi+284]
  00076	9f		 lahf
  00077	f6 c4 44	 test	 ah, 68			; 00000044H
  0007a	0f 8a 14 01 00
	00		 jp	 $LN2@partyMoveP

; 2480 : 				{
; 2481 : 					// ?????????????
; 2482 : 					if (ptAct->bufCount > 0)

  00080	66 83 be 14 01
	00 00 00	 cmp	 WORD PTR [esi+276], 0
  00088	0f 8e 06 01 00
	00		 jle	 $LN2@partyMoveP

; 2483 : 					{
; 2484 : 						// ??????????????
; 2485 : 						if (i == 0)

  0008e	85 ff		 test	 edi, edi
  00090	75 45		 jne	 SHORT $LN19@partyMoveP

; 2486 : 						{
; 2487 : 							nowSpdRate = 1.0F;

  00092	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?nowSpdRate@@3MA, 1065353216 ; 3f800000H

; 2488 : 							if (ptAct->bufCount > 5)

  0009c	0f b7 86 14 01
	00 00		 movzx	 eax, WORD PTR [esi+276]
  000a3	66 83 f8 05	 cmp	 ax, 5
  000a7	7e 0c		 jle	 SHORT $LN15@partyMoveP

; 2489 : 								nowSpdRate = 2.0F;

  000a9	c7 05 00 00 00
	00 00 00 00 40	 mov	 DWORD PTR ?nowSpdRate@@3MA, 1073741824 ; 40000000H
  000b3	eb 22		 jmp	 SHORT $LN19@partyMoveP
$LN15@partyMoveP:

; 2490 : 							else if (ptAct->bufCount >= 4)

  000b5	66 83 f8 04	 cmp	 ax, 4
  000b9	7c 0c		 jl	 SHORT $LN17@partyMoveP

; 2491 : 								nowSpdRate = 1.6F;

  000bb	c7 05 00 00 00
	00 cd cc cc 3f	 mov	 DWORD PTR ?nowSpdRate@@3MA, 1070386381 ; 3fcccccdH
  000c5	eb 10		 jmp	 SHORT $LN19@partyMoveP
$LN17@partyMoveP:

; 2492 : 							else if (ptAct->bufCount >= 2)

  000c7	66 83 f8 02	 cmp	 ax, 2
  000cb	7c 0a		 jl	 SHORT $LN19@partyMoveP

; 2493 : 								nowSpdRate = 1.2F;

  000cd	c7 05 00 00 00
	00 9a 99 99 3f	 mov	 DWORD PTR ?nowSpdRate@@3MA, 1067030938 ; 3f99999aH
$LN19@partyMoveP:

; 2494 : 						}
; 2495 : 						_setCharMovePoint(ptAct, ptAct->bufGx[0], ptAct->bufGy[0]);

  000d7	ff b6 ec 00 00
	00		 push	 DWORD PTR [esi+236]
  000dd	ff b6 c4 00 00
	00		 push	 DWORD PTR [esi+196]
  000e3	56		 push	 esi
  000e4	e8 00 00 00 00	 call	 ?_setCharMovePoint@@YAXPAUaction@@HH@Z ; _setCharMovePoint

; 2496 : 						shiftBufCount(ptAct);

  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ?shiftBufCount@@YAXPAUaction@@@Z ; shiftBufCount
  000ef	83 c4 10	 add	 esp, 16			; 00000010H

; 2497 : 						if (_partyTbl[i + 1] >= 0 && (i + 1) < MAX_PARTY)
; 2498 : 						{
; 2499 : 							ptActNext = party[_partyTbl[i + 1]].ptAct;
; 2500 : 							stockCharMovePoint(ptActNext, ptAct->gx, ptAct->gy);
; 2501 : 						}
; 2502 : 					}
; 2503 : 				}
; 2504 : 			}

  000f2	eb 60		 jmp	 SHORT $LN47@partyMoveP
$LN10@partyMoveP:
  000f4	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?nextGx@@3HA ; nextGx

; 2505 : 			// ????
; 2506 : 			else
; 2507 : 			{
; 2508 : 				// ????????????????
; 2509 : 				if ((float)nextGx * GRID_SIZE == nowX && (float)nextGy * GRID_SIZE == nowY)

  000fc	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ff	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00103	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?nowX@@3MA
  0010a	9f		 lahf
  0010b	f6 c4 44	 test	 ah, 68			; 00000044H
  0010e	0f 8a 80 00 00
	00		 jp	 $LN2@partyMoveP
  00114	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?nextGy@@3HA ; nextGy
  0011c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0011f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00123	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?nowY@@3MA
  0012a	9f		 lahf
  0012b	f6 c4 44	 test	 ah, 68			; 00000044H
  0012e	7a 64		 jp	 SHORT $LN2@partyMoveP

; 2510 : 				{
; 2511 : 					// ?????????????
; 2512 : 					if (ptAct->bufCount > 0)

  00130	66 83 be 14 01
	00 00 00	 cmp	 WORD PTR [esi+276], 0
  00138	7e 5a		 jle	 SHORT $LN2@partyMoveP

; 2513 : 					{
; 2514 : 						_setMapMovePoint(ptAct->bufGx[0], ptAct->bufGy[0]);

  0013a	ff b6 ec 00 00
	00		 push	 DWORD PTR [esi+236]
  00140	ff b6 c4 00 00
	00		 push	 DWORD PTR [esi+196]
  00146	e8 00 00 00 00	 call	 ?_setMapMovePoint@@YAXHH@Z ; _setMapMovePoint

; 2515 : 						shiftBufCount(ptAct);

  0014b	56		 push	 esi
  0014c	e8 00 00 00 00	 call	 ?shiftBufCount@@YAXPAUaction@@@Z ; shiftBufCount
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@partyMoveP:

; 2464 : 	int i;
; 2465 : 	ACTION *ptAct, *ptActNext;
; 2466 : 
; 2467 : 	// ??????????????????????
; 2468 : 	// ????????????????????????
; 2469 : 	for (i = 0; i < MAX_PARTY; i++)

  00154	0f b7 0c 7d 02
	00 00 00	 movzx	 ecx, WORD PTR ?_partyTbl@@3PAFA[edi*2+2]
  0015c	66 85 c9	 test	 cx, cx
  0015f	78 2b		 js	 SHORT $LN44@partyMoveP
  00161	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00164	83 f8 05	 cmp	 eax, 5
  00167	7d 23		 jge	 SHORT $LN44@partyMoveP
  00169	ff b6 b8 00 00
	00		 push	 DWORD PTR [esi+184]
  0016f	0f bf c1	 movsx	 eax, cx
  00172	ff b6 b4 00 00
	00		 push	 DWORD PTR [esi+180]
  00178	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0017b	c1 e0 04	 shl	 eax, 4
  0017e	ff b0 2c 00 00
	00		 push	 DWORD PTR ?party@@3PAUPARTY@@A[eax+44]
  00184	e8 00 00 00 00	 call	 ?stockCharMovePoint@@YAXPAUaction@@HH@Z ; stockCharMovePoint
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN44@partyMoveP:
  0018c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42800000
$LN2@partyMoveP:
  00194	47		 inc	 edi
  00195	83 ff 05	 cmp	 edi, 5
  00198	0f 8c 72 fe ff
	ff		 jl	 $LL4@partyMoveP
$LN8@partyMoveP:

; 2516 : 						if (_partyTbl[i + 1] >= 0 && (i + 1) < MAX_PARTY)
; 2517 : 						{
; 2518 : 							ptActNext = party[_partyTbl[i + 1]].ptAct;
; 2519 : 							stockCharMovePoint(ptActNext, ptAct->gx, ptAct->gy);
; 2520 : 						}
; 2521 : 					}
; 2522 : 				}
; 2523 : 			}
; 2524 : 		}
; 2525 : 		else
; 2526 : 			break;
; 2527 : 	}
; 2528 : 	// ???
; 2529 : 	for (i = 0; i < MAX_PARTY; i++)

  0019e	be 00 00 00 00	 mov	 esi, OFFSET ?_partyTbl@@3PAFA ; _partyTbl
$LL7@partyMoveP:

; 2530 : 	{
; 2531 : 		if (_partyTbl[i] >= 0)

  001a3	0f b7 06	 movzx	 eax, WORD PTR [esi]
  001a6	66 85 c0	 test	 ax, ax
  001a9	78 35		 js	 SHORT $LN40@partyMoveP

; 2532 : 		{
; 2533 : 			if (party[_partyTbl[i]].id != pc.id)

  001ab	98		 cwde
  001ac	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  001af	c1 e1 04	 shl	 ecx, 4
  001b2	8b 81 04 00 00
	00		 mov	 eax, DWORD PTR ?party@@3PAUPARTY@@A[ecx+4]
  001b8	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?pc@@3UPC@@A+8
  001be	74 10		 je	 SHORT $LN26@partyMoveP

; 2534 : 				_charMove(party[_partyTbl[i]].ptAct);

  001c0	ff b1 2c 00 00
	00		 push	 DWORD PTR ?party@@3PAUPARTY@@A[ecx+44]
  001c6	e8 00 00 00 00	 call	 ?_charMove@@YAXPAUaction@@@Z ; _charMove
  001cb	83 c4 04	 add	 esp, 4
  001ce	eb 05		 jmp	 SHORT $LN5@partyMoveP
$LN26@partyMoveP:

; 2535 : 			else
; 2536 : 			{
; 2537 : 				//mapMove2();
; 2538 : 				_mapMove();

  001d0	e8 00 00 00 00	 call	 ?_mapMove@@YAXXZ	; _mapMove
$LN5@partyMoveP:

; 2516 : 						if (_partyTbl[i + 1] >= 0 && (i + 1) < MAX_PARTY)
; 2517 : 						{
; 2518 : 							ptActNext = party[_partyTbl[i + 1]].ptAct;
; 2519 : 							stockCharMovePoint(ptActNext, ptAct->gx, ptAct->gy);
; 2520 : 						}
; 2521 : 					}
; 2522 : 				}
; 2523 : 			}
; 2524 : 		}
; 2525 : 		else
; 2526 : 			break;
; 2527 : 	}
; 2528 : 	// ???
; 2529 : 	for (i = 0; i < MAX_PARTY; i++)

  001d5	83 c6 02	 add	 esi, 2
  001d8	81 fe 0a 00 00
	00		 cmp	 esi, OFFSET ?_partyTbl@@3PAFA+10
  001de	7c c3		 jl	 SHORT $LL7@partyMoveP
$LN40@partyMoveP:

; 2539 : 			}
; 2540 : 		}
; 2541 : 		else
; 2542 : 			break;
; 2543 : 	}
; 2544 : 	updateMapArea();

  001e0	e8 00 00 00 00	 call	 ?updateMapArea@@YAXXZ	; updateMapArea

; 2545 : 	viewPointX = nowX;

  001e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowX@@3MA
  001ed	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?viewPointX@@3MA, xmm0

; 2546 : 	viewPointY = nowY;

  001f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowY@@3MA
  001fd	5f		 pop	 edi
  001fe	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?viewPointY@@3MA, xmm0
  00206	5e		 pop	 esi

; 2547 : }

  00207	c3		 ret	 0
?partyMoveProc@@YAXXZ ENDP				; partyMoveProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?onceMoveProc@@YAXXZ
_TEXT	SEGMENT
?onceMoveProc@@YAXXZ PROC				; onceMoveProc, COMDAT

; 2403 : 	int dir;
; 2404 : 	// ???????????????
; 2405 : 	nowSpdRate = 1.0F;
; 2406 : 	// ??????????????
; 2407 : 	if (mapEmptyFlag)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapEmptyFlag@@3HA, 0 ; mapEmptyFlag
  00007	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?nowSpdRate@@3MA, 1065353216 ; 3f800000H
  00011	0f 85 a4 01 00
	00		 jne	 $LN1@onceMovePr

; 2408 : 		return;
; 2409 : 	if (sendEnFlag == 0	&& eventWarpSendFlag == 0 && eventEnemySendFlag == 0)

  00017	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?sendEnFlag@@3FA, 0 ; sendEnFlag
  0001f	0f 85 52 01 00
	00		 jne	 $LN11@onceMovePr
  00025	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  0002d	0f 85 44 01 00
	00		 jne	 $LN11@onceMovePr
  00033	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventEnemySendFlag@@3FA, 0 ; eventEnemySendFlag
  0003b	0f 85 36 01 00
	00		 jne	 $LN11@onceMovePr

; 2410 : 	{
; 2411 : 		//cary say 所有event的执行，送给server
; 2412 : 		if (_execEtcEvent())

  00041	e8 00 00 00 00	 call	 ?_execEtcEvent@@YAHXZ	; _execEtcEvent
  00046	85 c0		 test	 eax, eax
  00048	0f 85 6d 01 00
	00		 jne	 $LN1@onceMovePr

; 2413 : 			return;
; 2414 : 		if ((float)nextGx * GRID_SIZE == nowX && (float)nextGy * GRID_SIZE == nowY)

  0004e	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?nextGx@@3HA ; nextGx
  00056	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42800000
  0005e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00061	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00065	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?nowX@@3MA
  0006c	9f		 lahf
  0006d	f6 c4 44	 test	 ah, 68			; 00000044H
  00070	0f 8a 01 01 00
	00		 jp	 $LN11@onceMovePr
  00076	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?nextGy@@3HA ; nextGy
  0007e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00081	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00085	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?nowY@@3MA
  0008c	9f		 lahf
  0008d	f6 c4 44	 test	 ah, 68			; 00000044H
  00090	0f 8a e1 00 00
	00		 jp	 $LN11@onceMovePr

; 2415 : 		{
; 2416 : 			if (moveStackFlag && moveRouteCnt2 == 0)

  00096	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?moveStackFlag@@3HA, 0 ; moveStackFlag
  0009d	74 29		 je	 SHORT $LN14@onceMovePr
  0009f	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?moveRouteCnt2@@3FA, 0 ; moveRouteCnt2
  000a7	75 1f		 jne	 SHORT $LN14@onceMovePr

; 2417 : 			{
; 2418 : 				moveStackFlag = FALSE;

  000a9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?moveStackFlag@@3HA, 0 ; moveStackFlag

; 2419 : 				getRouteMap();

  000b3	e8 00 00 00 00	 call	 ?getRouteMap@@YAXXZ	; getRouteMap

; 2420 : 				if (moveRouteCnt == 0)

  000b8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  000be	66 85 c0	 test	 ax, ax
  000c1	75 3b		 jne	 SHORT $LN16@onceMovePr

; 2421 : 					turnAround();

  000c3	e8 00 00 00 00	 call	 ?turnAround@@YAXXZ	; turnAround
$LN14@onceMovePr:

; 2422 : 			}
; 2423 : 			if (moveRouteCnt == 0 && moveRouteCnt2 == 0)

  000c8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt
  000ce	66 85 c0	 test	 ax, ax
  000d1	75 2b		 jne	 SHORT $LN16@onceMovePr
  000d3	66 39 05 00 00
	00 00		 cmp	 WORD PTR ?moveRouteCnt2@@3FA, ax ; moveRouteCnt2
  000da	75 4f		 jne	 SHORT $LN17@onceMovePr

; 2424 : 			{
; 2425 : 				turnAround2(moveLastDir);

  000dc	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?moveLastDir@@3FA ; moveLastDir
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ?turnAround2@@YAXH@Z	; turnAround2

; 2426 : 				moveLastDir = -1;

  000e9	83 c8 ff	 or	 eax, -1
  000ec	83 c4 04	 add	 esp, 4
  000ef	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveLastDir@@3FA, ax ; moveLastDir
  000f5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?moveRouteCnt@@3FA ; moveRouteCnt

; 2427 : 			}
; 2428 : 			if (moveRouteCnt > 0 && moveRouteCnt2 == 0)

  000fb	66 85 c0	 test	 ax, ax
$LN16@onceMovePr:
  000fe	7e 23		 jle	 SHORT $LN9@onceMovePr
  00100	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?moveRouteCnt2@@3FA, 0 ; moveRouteCnt2
  00108	75 21		 jne	 SHORT $LN17@onceMovePr

; 2429 : 			{
; 2430 : 				_getMoveRoute2();

  0010a	e8 00 00 00 00	 call	 ?_getMoveRoute2@@YAXXZ	; _getMoveRoute2

; 2431 : 				if (moveRouteCnt2 > 0)

  0010f	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?moveRouteCnt2@@3FA, 0 ; moveRouteCnt2
  00117	7e 05		 jle	 SHORT $LN10@onceMovePr

; 2432 : 					_etcEventCheck();

  00119	e8 00 00 00 00	 call	 ?_etcEventCheck@@YAXXZ	; _etcEventCheck
$LN10@onceMovePr:

; 2433 : 				_sendMoveRoute();

  0011e	e8 00 00 00 00	 call	 ?_sendMoveRoute@@YAXXZ	; _sendMoveRoute
$LN9@onceMovePr:

; 2434 : 			}
; 2435 : 			if (moveRouteCnt2 > 0)

  00123	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?moveRouteCnt2@@3FA, 0 ; moveRouteCnt2
$LN17@onceMovePr:
  0012b	7e 4a		 jle	 SHORT $LN11@onceMovePr

; 2436 : 			{
; 2437 : 				_checkEmptyMap();

  0012d	56		 push	 esi
  0012e	e8 00 00 00 00	 call	 ?_checkEmptyMap@@YAXXZ	; _checkEmptyMap

; 2438 : 				dir = moveRoute2[0];

  00133	0f bf 35 00 00
	00 00		 movsx	 esi, WORD PTR ?moveRoute2@@3PAFA ; moveRoute2

; 2439 : 				shiftRouteMap2();

  0013a	e8 00 00 00 00	 call	 ?shiftRouteMap2@@YAXXZ	; shiftRouteMap2

; 2440 : 				setMapMovePoint(nowGx + moveAddTbl[dir][0], nowGy + moveAddTbl[dir][1]);

  0013f	0f bf 04 b5 02
	00 00 00	 movsx	 eax, WORD PTR ?moveAddTbl@@3PAY01FA[esi*4+2]
  00147	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  0014d	50		 push	 eax
  0014e	0f bf 04 b5 00
	00 00 00	 movsx	 eax, WORD PTR ?moveAddTbl@@3PAY01FA[esi*4]
  00156	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?nowGx@@3HA ; nowGx
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 ?setMapMovePoint@@YAXHH@Z ; setMapMovePoint

; 2441 : 				setPcMovePointToChar(nowGx, nowGy);

  00162	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  00168	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  0016e	e8 00 00 00 00	 call	 ?setPcMovePointToChar@@YAXHH@Z ; setPcMovePointToChar
  00173	83 c4 10	 add	 esp, 16			; 00000010H
  00176	5e		 pop	 esi
$LN11@onceMovePr:

; 2442 : 			}
; 2443 : 		}
; 2444 : 	}
; 2445 : 	// ?????????????????????
; 2446 : 	setPartyMovePoint();

  00177	e8 00 00 00 00	 call	 ?setPartyMovePoint@@YAXXZ ; setPartyMovePoint

; 2447 : 	// ???????????????????????
; 2448 : 	justGoalFlag = 0;

  0017c	33 c0		 xor	 eax, eax
  0017e	66 a3 00 00 00
	00		 mov	 WORD PTR ?justGoalFlag@@3FA, ax ; justGoalFlag

; 2449 : 	// ??????????????
; 2450 : 	if (mapEmptyFlag)

  00184	39 05 00 00 00
	00		 cmp	 DWORD PTR ?mapEmptyFlag@@3HA, eax ; mapEmptyFlag
  0018a	75 2f		 jne	 SHORT $LN1@onceMovePr

; 2451 : 		return;
; 2452 : 	// ???????????????
; 2453 : 	_mapMove();

  0018c	e8 00 00 00 00	 call	 ?_mapMove@@YAXXZ	; _mapMove

; 2454 : 	// ?????????
; 2455 : 	_partyMapMove();

  00191	e8 00 00 00 00	 call	 ?_partyMapMove@@YAXXZ	; _partyMapMove

; 2456 : 	updateMapArea();

  00196	e8 00 00 00 00	 call	 ?updateMapArea@@YAXXZ	; updateMapArea

; 2457 : 	viewPointX = nowX;

  0019b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowX@@3MA
  001a3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?viewPointX@@3MA, xmm0

; 2458 : 	viewPointY = nowY;

  001ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowY@@3MA
  001b3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?viewPointY@@3MA, xmm0
$LN1@onceMovePr:

; 2459 : }

  001bb	c3		 ret	 0
?onceMoveProc@@YAXXZ ENDP				; onceMoveProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ??__EnowY@@YAXXZ
text$di	SEGMENT
??__EnowY@@YAXXZ PROC					; `dynamic initializer for 'nowY'', COMDAT

; 51   : float nowX = (float)nowGx*GRID_SIZE, nowY = (float)nowGy * GRID_SIZE;

  00000	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?nowGy@@3HA ; nowGy
  00008	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0000b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00013	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowY@@3MA, xmm0
  0001b	c3		 ret	 0
??__EnowY@@YAXXZ ENDP					; `dynamic initializer for 'nowY''
text$di	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ??__EnowX@@YAXXZ
text$di	SEGMENT
??__EnowX@@YAXXZ PROC					; `dynamic initializer for 'nowX'', COMDAT

; 51   : float nowX = (float)nowGx*GRID_SIZE, nowY = (float)nowGy * GRID_SIZE;

  00000	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?nowGx@@3HA ; nowGx
  00008	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0000b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00013	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowX@@3MA, xmm0
  0001b	c3		 ret	 0
??__EnowX@@YAXXZ ENDP					; `dynamic initializer for 'nowX''
text$di	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?_checkEmptyMap@@YAXXZ
_TEXT	SEGMENT
_dir$1$ = -4						; size = 4
?_checkEmptyMap@@YAXXZ PROC				; _checkEmptyMap, COMDAT

; 3024 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3025 : 	int dir, i, j, gx, gy;
; 3026 : 	
; 3027 : 	i = 0;
; 3028 : 	gx = nowGx;
; 3029 : 	gy = nowGy;
; 3030 : 	
; 3031 : 	dir = moveRoute2[i];

  00004	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?moveRoute2@@3PAFA ; moveRoute2
  0000b	53		 push	 ebx

; 3032 : 	if (checkEmptyMapData(gx, gy, dir))

  0000c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowGx@@3HA ; nowGx
  00012	57		 push	 edi
  00013	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowGy@@3HA ; nowGy
  00019	50		 push	 eax
  0001a	57		 push	 edi
  0001b	53		 push	 ebx
  0001c	89 45 fc	 mov	 DWORD PTR _dir$1$[ebp], eax
  0001f	e8 00 00 00 00	 call	 ?checkEmptyMapData@@YAHHHH@Z ; checkEmptyMapData
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	85 c0		 test	 eax, eax
  00029	0f 84 9b 00 00
	00		 je	 $LN5@checkEmpty

; 3033 : 	{
; 3034 : 		for (j = 0; j < getMapAreaCnt; j++)

  0002f	56		 push	 esi
  00030	33 c0		 xor	 eax, eax
  00032	33 f6		 xor	 esi, esi
  00034	66 3b 05 00 00
	00 00		 cmp	 ax, WORD PTR ?getMapAreaCnt@@3FA ; getMapAreaCnt
  0003b	7d 63		 jge	 SHORT $LN3@checkEmpty
  0003d	0f 1f 00	 npad	 3
$LL4@checkEmpty:

; 3035 : 		{
; 3036 : 			if (bNewServer)

  00040	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  00047	0f bf 04 75 00
	00 00 00	 movsx	 eax, WORD PTR ?getMapAreaY2@@3PAFA[esi*2]
  0004f	0f bf 0c 75 00
	00 00 00	 movsx	 ecx, WORD PTR ?getMapAreaX2@@3PAFA[esi*2]
  00057	0f bf 14 75 00
	00 00 00	 movsx	 edx, WORD PTR ?getMapAreaY1@@3PAFA[esi*2]
  0005f	0f bf 3c 75 00
	00 00 00	 movsx	 edi, WORD PTR ?getMapAreaX1@@3PAFA[esi*2]
  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	52		 push	 edx
  0006a	57		 push	 edi
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowFloor@@3HA ; nowFloor
  00071	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00077	74 07		 je	 SHORT $LN6@checkEmpty

; 3037 : 				lssproto_M_send(sockfd, nowFloor, getMapAreaX1[j], getMapAreaY1[j], getMapAreaX2[j], getMapAreaY2[j]);

  00079	e8 00 00 00 00	 call	 ?lssproto_M_send@@YAXHHHHHH@Z ; lssproto_M_send
  0007e	eb 05		 jmp	 SHORT $LN13@checkEmpty
$LN6@checkEmpty:

; 3038 : 			else
; 3039 : 				old_lssproto_M_send(sockfd, nowFloor, getMapAreaX1[j], getMapAreaY1[j], getMapAreaX2[j], getMapAreaY2[j]);

  00080	e8 00 00 00 00	 call	 ?old_lssproto_M_send@@YAXHHHHHH@Z ; old_lssproto_M_send
$LN13@checkEmpty:

; 3033 : 	{
; 3034 : 		for (j = 0; j < getMapAreaCnt; j++)

  00085	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?getMapAreaCnt@@3FA ; getMapAreaCnt
  0008c	46		 inc	 esi
  0008d	83 c4 18	 add	 esp, 24			; 00000018H
  00090	3b f0		 cmp	 esi, eax
  00092	7c ac		 jl	 SHORT $LL4@checkEmpty
  00094	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowGx@@3HA ; nowGx
  0009a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowGy@@3HA ; nowGy
$LN3@checkEmpty:

; 3040 : 		}
; 3041 : 		mapEmptyFlag = TRUE;
; 3042 : 		mapEmptyDir = dir;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _dir$1$[ebp]
  000a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mapEmptyFlag@@3HA, 1 ; mapEmptyFlag
  000ad	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEmptyDir@@3FA, ax ; mapEmptyDir

; 3043 : 		mapEmptyGx = nowGx;

  000b3	89 1d 00 00 00
	00		 mov	 DWORD PTR ?mapEmptyGx@@3HA, ebx ; mapEmptyGx

; 3044 : 		mapEmptyGy = nowGy;

  000b9	89 3d 00 00 00
	00		 mov	 DWORD PTR ?mapEmptyGy@@3HA, edi ; mapEmptyGy

; 3045 : 		mapEmptyStartTime = TimeGetTime();

  000bf	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000c4	a3 00 00 00 00	 mov	 DWORD PTR ?mapEmptyStartTime@@3IA, eax ; mapEmptyStartTime
  000c9	5e		 pop	 esi
$LN5@checkEmpty:

; 3046 : 	}
; 3047 : }

  000ca	5f		 pop	 edi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
?_checkEmptyMap@@YAXXZ ENDP				; _checkEmptyMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectSnow2@@YAXH@Z
_TEXT	SEGMENT
_hh$1$ = -20						; size = 4
_ww$1$ = -16						; size = 4
_hosei1$1$ = -12					; size = 4
_hosei2$1$ = -8						; size = 4
_time$1$ = -4						; size = 4
_n$ = 8							; size = 4
?mapEffectSnow2@@YAXH@Z PROC				; mapEffectSnow2, COMDAT

; 5589 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 5590 : 	short mapEffectSnowWaitTime = 0;
; 5591 : 	short mapEffectSnowFrameMax = 0;
; 5592 : 	int hosei1 = 940, hosei2 = -200, ww = DEF_APPSIZEX, hh = DEF_APPSIZEY, time = 0, i, j, k;

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00011	53		 push	 ebx
  00012	57		 push	 edi
  00013	33 db		 xor	 ebx, ebx
  00015	c7 45 f8 38 ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -200 ; ffffff38H

; 5593 : 	MAP_EFFECT *buf;
; 5594 : 	
; 5595 : 	// ???????????????
; 5596 : 	if (ResoMode == 1)

  0001c	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  00023	bf ac 03 00 00	 mov	 edi, 940		; 000003acH
  00028	89 7d f4	 mov	 DWORD PTR _hosei1$1$[ebp], edi
  0002b	89 4d f0	 mov	 DWORD PTR _ww$1$[ebp], ecx
  0002e	89 45 ec	 mov	 DWORD PTR _hh$1$[ebp], eax
  00031	89 5d fc	 mov	 DWORD PTR _time$1$[ebp], ebx
  00034	75 19		 jne	 SHORT $LN10@mapEffectS

; 5597 : 	{
; 5598 : 		ww >>= 1;

  00036	d1 f9		 sar	 ecx, 1

; 5599 : 		hh >>= 1;
; 5600 : 		hosei1 = 420;

  00038	bf a4 01 00 00	 mov	 edi, 420		; 000001a4H
  0003d	d1 f8		 sar	 eax, 1
  0003f	89 4d f0	 mov	 DWORD PTR _ww$1$[ebp], ecx
  00042	89 45 ec	 mov	 DWORD PTR _hh$1$[ebp], eax
  00045	89 7d f4	 mov	 DWORD PTR _hosei1$1$[ebp], edi

; 5601 : 		hosei2 = -50;

  00048	c7 45 f8 ce ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -50 ; ffffffceH
$LN10@mapEffectS:

; 5602 : 	}
; 5603 : 	for (k = 0; k < n; k++)

  0004f	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00052	85 c0		 test	 eax, eax
  00054	0f 8e 4f 02 00
	00		 jle	 $LN3@mapEffectS
  0005a	ba 02 00 00 00	 mov	 edx, 2
  0005f	56		 push	 esi
$LL4@mapEffectS:

; 5604 : 	{
; 5605 : 		// 
; 5606 : 		if (mapEffectSnowLevel)

  00060	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?mapEffectSnowLevel@@3FA ; mapEffectSnowLevel
  00067	66 85 c9	 test	 cx, cx
  0006a	0f 84 b8 01 00
	00		 je	 $LN6@mapEffectS

; 5607 : 		{
; 5608 : 			if (mapEffectSnowLevel < 3)

  00070	66 83 f9 03	 cmp	 cx, 3
  00074	0f 8d cd 00 00
	00		 jge	 $LN12@mapEffectS

; 5609 : 			{
; 5610 : 				mapEffectSnowWaitTime = (2 - mapEffectSnowLevel) << 1;

  0007a	8b c2		 mov	 eax, edx
  0007c	66 2b c1	 sub	 ax, cx
  0007f	66 03 c0	 add	 ax, ax

; 5611 : 				if (time >= mapEffectSnowWaitTime)

  00082	98		 cwde
  00083	3b d8		 cmp	 ebx, eax
  00085	0f 8c 9a 01 00
	00		 jl	 $LN45@mapEffectS

; 5612 : 				{
; 5613 : 					MAP_EFFECT *buf = getMapEffectBuf();

  0008b	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  00090	8b f0		 mov	 esi, eax

; 5614 : 					if (buf != (MAP_EFFECT*)NULL)

  00092	85 f6		 test	 esi, esi
  00094	0f 84 8b 01 00
	00		 je	 $LN45@mapEffectS

; 5615 : 					{
; 5616 : 						buf->type = MAP_EFFECT_TYPE_SNOW;

  0009a	b8 02 00 00 00	 mov	 eax, 2
  0009f	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 5617 : 						buf->x = (rand() % hosei1) + hosei2;

  000a3	e8 00 00 00 00	 call	 _rand
  000a8	99		 cdq
  000a9	f7 ff		 idiv	 edi

; 5618 : 						buf->y = 0;

  000ab	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000b2	03 55 f8	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  000b5	89 16		 mov	 DWORD PTR [esi], edx

; 5619 : 						buf->mode = (rand() % 2);

  000b7	e8 00 00 00 00	 call	 _rand
  000bc	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000c1	79 05		 jns	 SHORT $LN46@mapEffectS
  000c3	48		 dec	 eax
  000c4	83 c8 fe	 or	 eax, -2			; fffffffeH
  000c7	40		 inc	 eax
$LN46@mapEffectS:
  000c8	66 89 46 40	 mov	 WORD PTR [esi+64], ax

; 5620 : 						j = (rand() % 2);

  000cc	e8 00 00 00 00	 call	 _rand
  000d1	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000d6	79 07		 jns	 SHORT $LN47@mapEffectS
  000d8	48		 dec	 eax
  000d9	83 c8 fe	 or	 eax, -2			; fffffffeH
  000dc	83 c0 01	 add	 eax, 1
$LN47@mapEffectS:

; 5621 : 						if (j == 0)

  000df	75 39		 jne	 SHORT $LN16@mapEffectS

; 5622 : 						{
; 5623 : 							buf->dx = 0 + (rand() % 2);

  000e1	e8 00 00 00 00	 call	 _rand
  000e6	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000eb	79 05		 jns	 SHORT $LN48@mapEffectS
  000ed	48		 dec	 eax
  000ee	83 c8 fe	 or	 eax, -2			; fffffffeH
  000f1	40		 inc	 eax
$LN48@mapEffectS:
  000f2	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5624 : 							buf->dy = 3 + (rand() % 2);

  000f5	e8 00 00 00 00	 call	 _rand
  000fa	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000ff	79 05		 jns	 SHORT $LN49@mapEffectS
  00101	48		 dec	 eax
  00102	83 c8 fe	 or	 eax, -2			; fffffffeH
  00105	40		 inc	 eax
$LN49@mapEffectS:
  00106	83 c0 03	 add	 eax, 3

; 5630 : 						}
; 5631 : 						time = 0;

  00109	33 db		 xor	 ebx, ebx
  0010b	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 5632 : 						mapEffectSnowCnt++;

  0010e	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectSnowCnt@@3FA ; mapEffectSnowCnt

; 5633 : 					}
; 5634 : 				}
; 5635 : 			}

  00115	e9 08 01 00 00	 jmp	 $LN58@mapEffectS
$LN16@mapEffectS:

; 5625 : 						}
; 5626 : 						else if (j == 1)

  0011a	83 f8 01	 cmp	 eax, 1
  0011d	75 1a		 jne	 SHORT $LN18@mapEffectS

; 5627 : 						{
; 5628 : 							buf->dx = 1;

  0011f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5629 : 							buf->dy = 4 + (rand() % 2);

  00122	e8 00 00 00 00	 call	 _rand
  00127	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0012c	79 05		 jns	 SHORT $LN50@mapEffectS
  0012e	48		 dec	 eax
  0012f	83 c8 fe	 or	 eax, -2			; fffffffeH
  00132	40		 inc	 eax
$LN50@mapEffectS:
  00133	83 c0 04	 add	 eax, 4

; 5630 : 						}
; 5631 : 						time = 0;

  00136	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN18@mapEffectS:
  00139	33 db		 xor	 ebx, ebx

; 5632 : 						mapEffectSnowCnt++;

  0013b	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectSnowCnt@@3FA ; mapEffectSnowCnt

; 5633 : 					}
; 5634 : 				}
; 5635 : 			}

  00142	e9 db 00 00 00	 jmp	 $LN58@mapEffectS
$LN12@mapEffectS:

; 5636 : 			else
; 5637 : 			{
; 5638 : 				mapEffectSnowFrameMax = (mapEffectSnowLevel - 2) << 1;

  00147	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?mapEffectSnowLevel@@3FA ; mapEffectSnowLevel
  0014e	66 83 e9 02	 sub	 cx, 2

; 5639 : 				if (ResoMode == 1)

  00152	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  00159	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  0015c	0f b7 c0	 movzx	 eax, ax
  0015f	75 03		 jne	 SHORT $LN19@mapEffectS

; 5640 : 					mapEffectSnowFrameMax >>= 1;

  00161	0f b7 c1	 movzx	 eax, cx
$LN19@mapEffectS:

; 5641 : 				for (i = 0; i < mapEffectSnowFrameMax; i++)

  00164	0f bf f8	 movsx	 edi, ax
  00167	85 ff		 test	 edi, edi
  00169	0f 8e b6 00 00
	00		 jle	 $LN45@mapEffectS
  0016f	90		 npad	 1
$LL7@mapEffectS:

; 5642 : 				{
; 5643 : 					MAP_EFFECT *buf = getMapEffectBuf();

  00170	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  00175	8b f0		 mov	 esi, eax

; 5644 : 					if (buf != (MAP_EFFECT*)NULL)

  00177	85 f6		 test	 esi, esi
  00179	0f 84 9a 00 00
	00		 je	 $LN5@mapEffectS

; 5645 : 					{
; 5646 : 						buf->type = MAP_EFFECT_TYPE_SNOW;

  0017f	b8 02 00 00 00	 mov	 eax, 2
  00184	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 5647 : 						buf->x = (rand() % hosei1) + hosei2;

  00188	e8 00 00 00 00	 call	 _rand
  0018d	99		 cdq
  0018e	f7 7d f4	 idiv	 DWORD PTR _hosei1$1$[ebp]

; 5648 : 						buf->y = 0;

  00191	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00198	03 55 f8	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  0019b	89 16		 mov	 DWORD PTR [esi], edx

; 5649 : 						buf->mode = (rand() % 2);

  0019d	e8 00 00 00 00	 call	 _rand
  001a2	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001a7	79 05		 jns	 SHORT $LN51@mapEffectS
  001a9	48		 dec	 eax
  001aa	83 c8 fe	 or	 eax, -2			; fffffffeH
  001ad	40		 inc	 eax
$LN51@mapEffectS:
  001ae	66 89 46 40	 mov	 WORD PTR [esi+64], ax

; 5650 : 						j = (rand() % 2);

  001b2	e8 00 00 00 00	 call	 _rand
  001b7	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001bc	79 07		 jns	 SHORT $LN52@mapEffectS
  001be	48		 dec	 eax
  001bf	83 c8 fe	 or	 eax, -2			; fffffffeH
  001c2	83 c0 01	 add	 eax, 1
$LN52@mapEffectS:

; 5651 : 						if (j == 0)

  001c5	75 2a		 jne	 SHORT $LN21@mapEffectS

; 5652 : 						{
; 5653 : 							buf->dx = 0 + (rand() % 2);

  001c7	e8 00 00 00 00	 call	 _rand
  001cc	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001d1	79 05		 jns	 SHORT $LN53@mapEffectS
  001d3	48		 dec	 eax
  001d4	83 c8 fe	 or	 eax, -2			; fffffffeH
  001d7	40		 inc	 eax
$LN53@mapEffectS:
  001d8	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5654 : 							buf->dy = 3 + (rand() % 2);

  001db	e8 00 00 00 00	 call	 _rand
  001e0	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001e5	79 05		 jns	 SHORT $LN54@mapEffectS
  001e7	48		 dec	 eax
  001e8	83 c8 fe	 or	 eax, -2			; fffffffeH
  001eb	40		 inc	 eax
$LN54@mapEffectS:
  001ec	83 c0 03	 add	 eax, 3

; 5655 : 						}

  001ef	eb 1c		 jmp	 SHORT $LN57@mapEffectS
$LN21@mapEffectS:

; 5656 : 						else if (j == 1)

  001f1	83 f8 01	 cmp	 eax, 1
  001f4	75 1a		 jne	 SHORT $LN23@mapEffectS

; 5657 : 						{
; 5658 : 							buf->dx = 1;

  001f6	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5659 : 							buf->dy = 4 + (rand() % 2);

  001f9	e8 00 00 00 00	 call	 _rand
  001fe	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00203	79 05		 jns	 SHORT $LN55@mapEffectS
  00205	48		 dec	 eax
  00206	83 c8 fe	 or	 eax, -2			; fffffffeH
  00209	40		 inc	 eax
$LN55@mapEffectS:
  0020a	83 c0 04	 add	 eax, 4
$LN57@mapEffectS:

; 5660 : 						}
; 5661 : 						time = 0;

  0020d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN23@mapEffectS:
  00210	33 db		 xor	 ebx, ebx

; 5662 : 						mapEffectSnowCnt++;

  00212	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectSnowCnt@@3FA ; mapEffectSnowCnt
$LN5@mapEffectS:

; 5641 : 				for (i = 0; i < mapEffectSnowFrameMax; i++)

  00219	83 ef 01	 sub	 edi, 1
  0021c	0f 85 4e ff ff
	ff		 jne	 $LL7@mapEffectS
$LN58@mapEffectS:

; 5663 : 					}
; 5664 : 				}
; 5665 : 			}
; 5666 : 		}
; 5667 : 		// ???
; 5668 : 		i = 0;
; 5669 : 		buf = useBufMapEffect;

  00222	89 5d fc	 mov	 DWORD PTR _time$1$[ebp], ebx
$LN45@mapEffectS:
  00225	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
$LN6@mapEffectS:
  00228	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A ; useBufMapEffect

; 5670 : 		while (buf != (MAP_EFFECT*)NULL)

  0022e	85 f6		 test	 esi, esi
  00230	74 5e		 je	 SHORT $LN9@mapEffectS
  00232	8b 5d f0	 mov	 ebx, DWORD PTR _ww$1$[ebp]
$LL8@mapEffectS:

; 5671 : 		{
; 5672 : 			if (buf->type == MAP_EFFECT_TYPE_SNOW)

  00235	66 83 7e 3c 02	 cmp	 WORD PTR [esi+60], 2
  0023a	75 3c		 jne	 SHORT $LN25@mapEffectS

; 5673 : 			{
; 5674 : 				buf->x += buf->dx;

  0023c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 5675 : 				buf->y += buf->dy;

  0023f	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00242	01 06		 add	 DWORD PTR [esi], eax
  00244	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00247	01 07		 add	 DWORD PTR [edi], eax

; 5676 : 				mapEffectDirHosei(&buf->x, &buf->y);

  00249	57		 push	 edi
  0024a	56		 push	 esi
  0024b	e8 00 00 00 00	 call	 ?mapEffectDirHosei@@YAXPAH0@Z ; mapEffectDirHosei

; 5677 : 				if (ww + 100 <= buf->x || hh <= buf->y)

  00250	8d 43 64	 lea	 eax, DWORD PTR [ebx+100]
  00253	83 c4 08	 add	 esp, 8
  00256	3b 06		 cmp	 eax, DWORD PTR [esi]
  00258	7e 07		 jle	 SHORT $LN42@mapEffectS
  0025a	8b 45 ec	 mov	 eax, DWORD PTR _hh$1$[ebp]
  0025d	3b 07		 cmp	 eax, DWORD PTR [edi]
  0025f	7f 17		 jg	 SHORT $LN25@mapEffectS
$LN42@mapEffectS:

; 5678 : 				{
; 5679 : 					// ??
; 5680 : 					MAP_EFFECT *buf2 = buf->next;

  00261	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]

; 5681 : 					delMapEffectBuf(buf);

  00264	56		 push	 esi
  00265	e8 00 00 00 00	 call	 ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ; delMapEffectBuf
  0026a	83 c4 04	 add	 esp, 4

; 5682 : 					buf = buf2;

  0026d	8b f7		 mov	 esi, edi

; 5683 : 					mapEffectSnowCnt--;

  0026f	66 ff 0d 00 00
	00 00		 dec	 WORD PTR ?mapEffectSnowCnt@@3FA ; mapEffectSnowCnt

; 5684 : 					continue;

  00276	eb 0e		 jmp	 SHORT $LN33@mapEffectS
$LN25@mapEffectS:

; 5685 : 				}
; 5686 : 			}
; 5687 : 			buf = buf->next;

  00278	8b 76 38	 mov	 esi, DWORD PTR [esi+56]

; 5688 : 			mapEffectDrawFlag = 1;

  0027b	b8 01 00 00 00	 mov	 eax, 1
  00280	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, ax ; mapEffectDrawFlag
$LN33@mapEffectS:

; 5670 : 		while (buf != (MAP_EFFECT*)NULL)

  00286	85 f6		 test	 esi, esi
  00288	75 ab		 jne	 SHORT $LL8@mapEffectS
  0028a	8b 5d fc	 mov	 ebx, DWORD PTR _time$1$[ebp]
  0028d	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
$LN9@mapEffectS:

; 5602 : 	}
; 5603 : 	for (k = 0; k < n; k++)

  00290	8b 7d f4	 mov	 edi, DWORD PTR _hosei1$1$[ebp]

; 5689 : 			i++;
; 5690 : 		}
; 5691 : 		time++;

  00293	43		 inc	 ebx
  00294	83 e8 01	 sub	 eax, 1
  00297	89 5d fc	 mov	 DWORD PTR _time$1$[ebp], ebx
  0029a	89 45 08	 mov	 DWORD PTR _n$[ebp], eax
  0029d	ba 02 00 00 00	 mov	 edx, 2
  002a2	0f 85 b8 fd ff
	ff		 jne	 $LL4@mapEffectS
  002a8	5e		 pop	 esi
$LN3@mapEffectS:
  002a9	5f		 pop	 edi

; 5692 : 	}
; 5693 : }

  002aa	5b		 pop	 ebx
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c3		 ret	 0
?mapEffectSnow2@@YAXH@Z ENDP				; mapEffectSnow2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectRain2@@YAXH@Z
_TEXT	SEGMENT
_ww$1$ = -20						; size = 4
_hh$1$ = -16						; size = 4
_mapEffectRainFrameMax$ = -12				; size = 2
_hosei1$1$ = -8						; size = 4
_hosei2$1$ = -4						; size = 4
_n$ = 8							; size = 4
?mapEffectRain2@@YAXH@Z PROC				; mapEffectRain2, COMDAT

; 5697 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 5698 : 	short mapEffectRainWaitTime = 0;
; 5699 : 	short mapEffectRainFrameMax = 0;
; 5700 : 	int hosei1 = 840, hosei2 = -200, ww = DEF_APPSIZEX, hh = DEF_APPSIZEY, time = 0, i, k;
; 5701 : 	MAP_EFFECT *buf;
; 5702 : 
; 5703 : 	// ???????????????
; 5704 : 	if (ResoMode == 1)

  00006	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  00012	53		 push	 ebx
  00013	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00019	57		 push	 edi
  0001a	bf 48 03 00 00	 mov	 edi, 840		; 00000348H
  0001f	c7 45 fc 38 ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -200 ; ffffff38H
  00026	89 7d f8	 mov	 DWORD PTR _hosei1$1$[ebp], edi
  00029	89 45 ec	 mov	 DWORD PTR _ww$1$[ebp], eax
  0002c	89 5d f0	 mov	 DWORD PTR _hh$1$[ebp], ebx
  0002f	75 19		 jne	 SHORT $LN10@mapEffectR

; 5705 : 	{
; 5706 : 		ww >>= 1;

  00031	d1 f8		 sar	 eax, 1

; 5707 : 		hh >>= 1;
; 5708 : 		hosei1 = 370;

  00033	bf 72 01 00 00	 mov	 edi, 370		; 00000172H
  00038	d1 fb		 sar	 ebx, 1
  0003a	89 45 ec	 mov	 DWORD PTR _ww$1$[ebp], eax
  0003d	89 5d f0	 mov	 DWORD PTR _hh$1$[ebp], ebx
  00040	89 7d f8	 mov	 DWORD PTR _hosei1$1$[ebp], edi

; 5709 : 		hosei2 = -50;

  00043	c7 45 fc ce ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -50 ; ffffffceH
$LN10@mapEffectR:

; 5710 : 	}
; 5711 : 	for (k = 0; k < n; k++)

  0004a	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0004d	85 c0		 test	 eax, eax
  0004f	0f 8e 82 01 00
	00		 jle	 $LN3@mapEffectR
  00055	56		 push	 esi
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@mapEffectR:

; 5712 : 	{
; 5713 : 		// ?
; 5714 : 		if (mapEffectRainLevel)

  00060	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?mapEffectRainLevel@@3FA ; mapEffectRainLevel
  00067	66 85 c9	 test	 cx, cx
  0006a	0f 84 f8 00 00
	00		 je	 $LN6@mapEffectR

; 5715 : 		{
; 5716 : 			if (mapEffectRainLevel < 3)

  00070	66 83 f9 03	 cmp	 cx, 3
  00074	7d 6c		 jge	 SHORT $LN12@mapEffectR

; 5717 : 			{
; 5718 : 				mapEffectRainWaitTime = (2 - mapEffectRainLevel) << 1;

  00076	b8 02 00 00 00	 mov	 eax, 2
  0007b	66 2b c1	 sub	 ax, cx

; 5719 : 				if (time >= mapEffectRainWaitTime)

  0007e	33 c9		 xor	 ecx, ecx
  00080	66 03 c0	 add	 ax, ax
  00083	66 3b c8	 cmp	 cx, ax
  00086	0f 8c d9 00 00
	00		 jl	 $LN40@mapEffectR

; 5720 : 				{
; 5721 : 					MAP_EFFECT *buf = getMapEffectBuf();

  0008c	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  00091	8b f0		 mov	 esi, eax

; 5722 : 					if (buf != (MAP_EFFECT*)NULL)

  00093	85 f6		 test	 esi, esi
  00095	0f 84 ca 00 00
	00		 je	 $LN40@mapEffectR

; 5723 : 					{
; 5724 : 						buf->type = MAP_EFFECT_TYPE_RAIN;

  0009b	b8 01 00 00 00	 mov	 eax, 1
  000a0	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 5725 : 						buf->x = (rand() % hosei1) + hosei2;

  000a4	e8 00 00 00 00	 call	 _rand
  000a9	99		 cdq
  000aa	f7 ff		 idiv	 edi

; 5726 : 						buf->y = 0;

  000ac	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000b3	03 55 fc	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  000b6	89 16		 mov	 DWORD PTR [esi], edx

; 5727 : 						buf->dx = 2 + (rand() % 2);

  000b8	e8 00 00 00 00	 call	 _rand
  000bd	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000c2	79 05		 jns	 SHORT $LN41@mapEffectR
  000c4	48		 dec	 eax
  000c5	83 c8 fe	 or	 eax, -2			; fffffffeH
  000c8	40		 inc	 eax
$LN41@mapEffectR:
  000c9	83 c0 02	 add	 eax, 2

; 5728 : 						buf->dy = 9;

  000cc	c7 46 0c 09 00
	00 00		 mov	 DWORD PTR [esi+12], 9
  000d3	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5729 : 						time = 0;
; 5730 : 						mapEffectRainCnt++;

  000d6	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectRainCnt@@3FA ; mapEffectRainCnt

; 5731 : 					}
; 5732 : 				}
; 5733 : 			}

  000dd	e9 83 00 00 00	 jmp	 $LN40@mapEffectR
$LN12@mapEffectR:

; 5734 : 			else
; 5735 : 			{
; 5736 : 				mapEffectRainFrameMax = (mapEffectRainLevel - 2) << 2;

  000e2	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?mapEffectRainLevel@@3FA ; mapEffectRainLevel
  000e8	66 83 e8 02	 sub	 ax, 2
  000ec	66 c1 e0 02	 shl	 ax, 2

; 5737 : 				if (ResoMode == 1)

  000f0	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  000f7	0f b7 c0	 movzx	 eax, ax
  000fa	89 45 f4	 mov	 DWORD PTR _mapEffectRainFrameMax$[ebp], eax
  000fd	75 03		 jne	 SHORT $LN16@mapEffectR

; 5738 : 					mapEffectRainFrameMax >>= 1;

  000ff	66 d1 f8	 sar	 ax, 1
$LN16@mapEffectR:

; 5739 : 				for (i = 0; i < mapEffectRainFrameMax; i++)

  00102	0f bf f8	 movsx	 edi, ax
  00105	85 ff		 test	 edi, edi
  00107	7e 5c		 jle	 SHORT $LN40@mapEffectR
  00109	8b 5d f8	 mov	 ebx, DWORD PTR _hosei1$1$[ebp]
  0010c	0f 1f 40 00	 npad	 4
$LL7@mapEffectR:

; 5740 : 				{
; 5741 : 					MAP_EFFECT *buf = getMapEffectBuf();

  00110	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  00115	8b f0		 mov	 esi, eax

; 5742 : 					if (buf != (MAP_EFFECT*)NULL)

  00117	85 f6		 test	 esi, esi
  00119	74 42		 je	 SHORT $LN5@mapEffectR

; 5743 : 					{
; 5744 : 						buf->type = MAP_EFFECT_TYPE_RAIN;

  0011b	b8 01 00 00 00	 mov	 eax, 1
  00120	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 5745 : 						buf->x = (rand() % hosei1) + hosei2;

  00124	e8 00 00 00 00	 call	 _rand
  00129	99		 cdq
  0012a	f7 fb		 idiv	 ebx

; 5746 : 						buf->y = 0;

  0012c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00133	03 55 fc	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  00136	89 16		 mov	 DWORD PTR [esi], edx

; 5747 : 						buf->dx = 2 + (rand() % 2);

  00138	e8 00 00 00 00	 call	 _rand
  0013d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00142	79 05		 jns	 SHORT $LN42@mapEffectR
  00144	48		 dec	 eax
  00145	83 c8 fe	 or	 eax, -2			; fffffffeH
  00148	40		 inc	 eax
$LN42@mapEffectR:
  00149	83 c0 02	 add	 eax, 2

; 5748 : 						buf->dy = 9;

  0014c	c7 46 0c 09 00
	00 00		 mov	 DWORD PTR [esi+12], 9
  00153	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 5749 : 						time = 0;
; 5750 : 						mapEffectRainCnt++;

  00156	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectRainCnt@@3FA ; mapEffectRainCnt
$LN5@mapEffectR:

; 5739 : 				for (i = 0; i < mapEffectRainFrameMax; i++)

  0015d	83 ef 01	 sub	 edi, 1
  00160	75 ae		 jne	 SHORT $LL7@mapEffectR
  00162	8b 5d f0	 mov	 ebx, DWORD PTR _hh$1$[ebp]
$LN40@mapEffectR:

; 5751 : 					}
; 5752 : 				}
; 5753 : 			}
; 5754 : 		}
; 5755 : 		// ???
; 5756 : 		i = 0;
; 5757 : 		buf = useBufMapEffect;

  00165	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
$LN6@mapEffectR:
  00168	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A ; useBufMapEffect

; 5758 : 		while (buf != (MAP_EFFECT*)NULL)

  0016e	85 f6		 test	 esi, esi
  00170	74 55		 je	 SHORT $LN2@mapEffectR
$LL8@mapEffectR:

; 5759 : 		{
; 5760 : 			if (buf->type == MAP_EFFECT_TYPE_RAIN)

  00172	66 83 7e 3c 01	 cmp	 WORD PTR [esi+60], 1
  00177	75 39		 jne	 SHORT $LN19@mapEffectR

; 5761 : 			{
; 5762 : 				buf->x += buf->dx;

  00179	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 5763 : 				buf->y += buf->dy;

  0017c	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0017f	01 06		 add	 DWORD PTR [esi], eax
  00181	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00184	01 07		 add	 DWORD PTR [edi], eax

; 5764 : 				mapEffectDirHosei(&buf->x, &buf->y);

  00186	57		 push	 edi
  00187	56		 push	 esi
  00188	e8 00 00 00 00	 call	 ?mapEffectDirHosei@@YAXPAH0@Z ; mapEffectDirHosei

; 5765 : 				if (ww <= buf->x || hh <= buf->y)

  0018d	8b 45 ec	 mov	 eax, DWORD PTR _ww$1$[ebp]
  00190	83 c4 08	 add	 esp, 8
  00193	3b 06		 cmp	 eax, DWORD PTR [esi]
  00195	7e 04		 jle	 SHORT $LN36@mapEffectR
  00197	3b 1f		 cmp	 ebx, DWORD PTR [edi]
  00199	7f 17		 jg	 SHORT $LN19@mapEffectR
$LN36@mapEffectR:

; 5766 : 				{
; 5767 : 					// ??
; 5768 : 					MAP_EFFECT *buf2 = buf->next;

  0019b	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]

; 5769 : 					delMapEffectBuf(buf);

  0019e	56		 push	 esi
  0019f	e8 00 00 00 00	 call	 ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ; delMapEffectBuf
  001a4	83 c4 04	 add	 esp, 4

; 5770 : 					buf = buf2;

  001a7	8b f7		 mov	 esi, edi

; 5771 : 					mapEffectRainCnt--;

  001a9	66 ff 0d 00 00
	00 00		 dec	 WORD PTR ?mapEffectRainCnt@@3FA ; mapEffectRainCnt

; 5772 : 					continue;

  001b0	eb 0e		 jmp	 SHORT $LN27@mapEffectR
$LN19@mapEffectR:

; 5773 : 				}
; 5774 : 			}
; 5775 : 			buf = buf->next;

  001b2	8b 76 38	 mov	 esi, DWORD PTR [esi+56]

; 5776 : 			mapEffectDrawFlag = 1;

  001b5	b8 01 00 00 00	 mov	 eax, 1
  001ba	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, ax ; mapEffectDrawFlag
$LN27@mapEffectR:

; 5758 : 		while (buf != (MAP_EFFECT*)NULL)

  001c0	85 f6		 test	 esi, esi
  001c2	75 ae		 jne	 SHORT $LL8@mapEffectR
  001c4	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
$LN2@mapEffectR:

; 5710 : 	}
; 5711 : 	for (k = 0; k < n; k++)

  001c7	8b 7d f8	 mov	 edi, DWORD PTR _hosei1$1$[ebp]
  001ca	83 e8 01	 sub	 eax, 1
  001cd	89 45 08	 mov	 DWORD PTR _n$[ebp], eax
  001d0	0f 85 8a fe ff
	ff		 jne	 $LL4@mapEffectR
  001d6	5e		 pop	 esi
$LN3@mapEffectR:
  001d7	5f		 pop	 edi

; 5777 : 			i++;
; 5778 : 		}
; 5779 : 	}
; 5780 : }

  001d8	5b		 pop	 ebx
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
?mapEffectRain2@@YAXH@Z ENDP				; mapEffectRain2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectProc2@@YAXH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?mapEffectProc2@@YAXH@Z PROC				; mapEffectProc2, COMDAT

; 4812 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4813 : 	mapEffectRain2(n);

  00003	ff 75 08	 push	 DWORD PTR _n$[ebp]
  00006	e8 00 00 00 00	 call	 ?mapEffectRain2@@YAXH@Z	; mapEffectRain2
  0000b	83 c4 04	 add	 esp, 4

; 4815 : }

  0000e	5d		 pop	 ebp

; 4814 : 	mapEffectSnow2(n);

  0000f	e9 00 00 00 00	 jmp	 ?mapEffectSnow2@@YAXH@Z	; mapEffectSnow2
?mapEffectProc2@@YAXH@Z ENDP				; mapEffectProc2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectHalloweenProc@@YAXXZ
_TEXT	SEGMENT
_hosei2$1$ = -20					; size = 4
_ww$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?mapEffectHalloweenProc@@YAXXZ PROC			; mapEffectHalloweenProc, COMDAT

; 6000 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?mapEffectHalloweenProc@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 6001 : 	int hosei1 = 940, hosei2 = -200, ww = DEF_APPSIZEX, hh = DEF_APPSIZEY, j;
; 6002 : 	static unsigned int time = TimeGetTime();

  00028	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002e	bf ac 03 00 00	 mov	 edi, 940		; 000003acH
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  0003f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00045	c7 45 ec 38 ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -200 ; ffffff38H
  0004c	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??mapEffectHalloweenProc@@YAXXZ@4HA
  00054	89 55 f0	 mov	 DWORD PTR _ww$1$[ebp], edx
  00057	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0005d	0f 8f b1 01 00
	00		 jg	 $LN35@mapEffectH
  00063	eb 03		 jmp	 SHORT $LN2@mapEffectH
$LN25@mapEffectH:

; 6003 : 	MAP_EFFECT *buf;
; 6004 : 
; 6005 : 	if (ResoMode == 1)

  00065	8b 55 f0	 mov	 edx, DWORD PTR _ww$1$[ebp]
$LN2@mapEffectH:
  00068	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  0006f	75 13		 jne	 SHORT $LN5@mapEffectH

; 6006 : 	{
; 6007 : 		ww >>= 1;

  00071	d1 fa		 sar	 edx, 1

; 6008 : 		hh >>= 1;
; 6009 : 		hosei1 = 370;

  00073	bf 72 01 00 00	 mov	 edi, 370		; 00000172H
  00078	89 55 f0	 mov	 DWORD PTR _ww$1$[ebp], edx
  0007b	d1 fb		 sar	 ebx, 1

; 6010 : 		hosei2 = -50;

  0007d	c7 45 ec ce ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -50 ; ffffffceH
$LN5@mapEffectH:

; 6011 : 	}
; 6012 : 	if (mapEffectHalloween)

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapEffectHalloween@@3HA, 0 ; mapEffectHalloween
  0008b	0f 84 e9 00 00
	00		 je	 $LN7@mapEffectH

; 6013 : 	{
; 6014 : 		if (time + 100 < TimeGetTime())

  00091	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?time@?1??mapEffectHalloweenProc@@YAXXZ@4IA
  0009c	83 c1 64	 add	 ecx, 100		; 00000064H
  0009f	3b c8		 cmp	 ecx, eax
  000a1	0f 83 d3 00 00
	00		 jae	 $LN7@mapEffectH

; 6015 : 		{
; 6016 : 			MAP_EFFECT *buf = getMapEffectBuf();

  000a7	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  000ac	8b f0		 mov	 esi, eax

; 6017 : 			if (buf != (MAP_EFFECT*)NULL)

  000ae	85 f6		 test	 esi, esi
  000b0	0f 84 ba 00 00
	00		 je	 $LN12@mapEffectH

; 6018 : 			{
; 6019 : 				buf->type = MAP_EFFECT_TYPE_HALLOWEEN;

  000b6	b8 06 00 00 00	 mov	 eax, 6
  000bb	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 6020 : 				buf->x = (rand() % hosei1) + hosei2;

  000bf	e8 00 00 00 00	 call	 _rand
  000c4	99		 cdq
  000c5	f7 ff		 idiv	 edi

; 6021 : 				buf->y = 0;

  000c7	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000ce	03 55 ec	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  000d1	89 16		 mov	 DWORD PTR [esi], edx

; 6022 : 				buf->mode = (rand() % 2);

  000d3	e8 00 00 00 00	 call	 _rand
  000d8	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000dd	79 05		 jns	 SHORT $LN28@mapEffectH
  000df	48		 dec	 eax
  000e0	83 c8 fe	 or	 eax, -2			; fffffffeH
  000e3	40		 inc	 eax
$LN28@mapEffectH:

; 6023 : 				buf->pAction = MakeAnimDisp(buf->x, buf->y, mapEffectHalloween, 0);

  000e4	6a 00		 push	 0
  000e6	66 89 46 40	 mov	 WORD PTR [esi+64], ax
  000ea	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapEffectHalloween@@3HA ; mapEffectHalloween
  000f0	ff 76 04	 push	 DWORD PTR [esi+4]
  000f3	ff 36		 push	 DWORD PTR [esi]
  000f5	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  000fa	83 c4 10	 add	 esp, 16			; 00000010H
  000fd	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 6024 : 				if (buf->pAction != NULL)

  00100	85 c0		 test	 eax, eax
  00102	74 6c		 je	 SHORT $LN12@mapEffectH

; 6025 : 				{
; 6026 : 					buf->pAction->hitDispNo = 0;

  00104	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 6027 : 					buf->pAction->dispPrio = DISP_PRIO_GRID;

  0010b	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0010e	c6 40 15 64	 mov	 BYTE PTR [eax+21], 100	; 00000064H

; 6028 : 					j = (rand() % 2);

  00112	e8 00 00 00 00	 call	 _rand
  00117	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0011c	79 07		 jns	 SHORT $LN29@mapEffectH
  0011e	48		 dec	 eax
  0011f	83 c8 fe	 or	 eax, -2			; fffffffeH
  00122	83 c0 01	 add	 eax, 1
$LN29@mapEffectH:

; 6029 : 					if (j == 0)

  00125	75 2a		 jne	 SHORT $LN10@mapEffectH

; 6030 : 					{
; 6031 : 						buf->dx = rand() % 2;

  00127	e8 00 00 00 00	 call	 _rand
  0012c	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00131	79 05		 jns	 SHORT $LN30@mapEffectH
  00133	48		 dec	 eax
  00134	83 c8 fe	 or	 eax, -2			; fffffffeH
  00137	40		 inc	 eax
$LN30@mapEffectH:
  00138	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 6032 : 						buf->dy = 3 + (rand() % 2);

  0013b	e8 00 00 00 00	 call	 _rand
  00140	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00145	79 05		 jns	 SHORT $LN31@mapEffectH
  00147	48		 dec	 eax
  00148	83 c8 fe	 or	 eax, -2			; fffffffeH
  0014b	40		 inc	 eax
$LN31@mapEffectH:
  0014c	83 c0 03	 add	 eax, 3

; 6033 : 					}

  0014f	eb 1c		 jmp	 SHORT $LN33@mapEffectH
$LN10@mapEffectH:

; 6034 : 					else if (j == 1)

  00151	83 f8 01	 cmp	 eax, 1
  00154	75 1a		 jne	 SHORT $LN12@mapEffectH

; 6035 : 					{
; 6036 : 						buf->dx = 1;

  00156	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 6037 : 						buf->dy = 4 + (rand() % 2);

  00159	e8 00 00 00 00	 call	 _rand
  0015e	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00163	79 05		 jns	 SHORT $LN32@mapEffectH
  00165	48		 dec	 eax
  00166	83 c8 fe	 or	 eax, -2			; fffffffeH
  00169	40		 inc	 eax
$LN32@mapEffectH:
  0016a	83 c0 04	 add	 eax, 4
$LN33@mapEffectH:

; 6038 : 					}
; 6039 : 				}
; 6040 : 			}
; 6041 : 			time = TimeGetTime();

  0016d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN12@mapEffectH:
  00170	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00175	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectHalloweenProc@@YAXXZ@4IA, eax
$LN7@mapEffectH:

; 6042 : 		}
; 6043 : 	}
; 6044 : 	buf = useBufMapEffect;

  0017a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A ; useBufMapEffect

; 6045 : 	while (buf != (MAP_EFFECT*)NULL)

  00180	85 f6		 test	 esi, esi
  00182	74 7e		 je	 SHORT $LN4@mapEffectH
  00184	b8 01 00 00 00	 mov	 eax, 1
  00189	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@mapEffectH:

; 6046 : 	{
; 6047 : 		if (buf->type == MAP_EFFECT_TYPE_HALLOWEEN)

  00190	66 83 7e 3c 06	 cmp	 WORD PTR [esi+60], 6
  00195	75 5e		 jne	 SHORT $LN14@mapEffectH

; 6048 : 		{
; 6049 : 			buf->pAction->x = buf->x += buf->dx;

  00197	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 6050 : 			buf->pAction->y = buf->y += buf->dy;

  0019a	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0019d	01 06		 add	 DWORD PTR [esi], eax
  0019f	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001a2	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 6051 : 			mapEffectDirHosei(&buf->x, &buf->y);

  001a4	57		 push	 edi
  001a5	56		 push	 esi
  001a6	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  001a9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001ac	01 07		 add	 DWORD PTR [edi], eax
  001ae	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001b1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001b3	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  001b6	e8 00 00 00 00	 call	 ?mapEffectDirHosei@@YAXPAH0@Z ; mapEffectDirHosei

; 6052 : 			if (ww + 100 <= buf->x || hh <= buf->y)

  001bb	8b 45 f0	 mov	 eax, DWORD PTR _ww$1$[ebp]
  001be	83 c4 08	 add	 esp, 8
  001c1	83 c0 64	 add	 eax, 100		; 00000064H
  001c4	3b 06		 cmp	 eax, DWORD PTR [esi]
  001c6	7e 04		 jle	 SHORT $LN24@mapEffectH
  001c8	3b 1f		 cmp	 ebx, DWORD PTR [edi]
  001ca	7f 24		 jg	 SHORT $LN26@mapEffectH
$LN24@mapEffectH:

; 6053 : 			{
; 6054 : 				MAP_EFFECT *buf2 = buf->next;
; 6055 : 				DeathAction(buf->pAction);

  001cc	ff 76 44	 push	 DWORD PTR [esi+68]
  001cf	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]
  001d2	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 6056 : 				buf->pAction = NULL;
; 6057 : 				delMapEffectBuf(buf);

  001d7	56		 push	 esi
  001d8	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  001df	e8 00 00 00 00	 call	 ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ; delMapEffectBuf
  001e4	83 c4 08	 add	 esp, 8

; 6058 : 				buf = buf2;

  001e7	8b f7		 mov	 esi, edi

; 6059 : 				continue;

  001e9	b8 01 00 00 00	 mov	 eax, 1
  001ee	eb 0e		 jmp	 SHORT $LN20@mapEffectH
$LN26@mapEffectH:

; 6052 : 			if (ww + 100 <= buf->x || hh <= buf->y)

  001f0	b8 01 00 00 00	 mov	 eax, 1
$LN14@mapEffectH:

; 6060 : 			}
; 6061 : 		}
; 6062 : 		buf = buf->next;

  001f5	8b 76 38	 mov	 esi, DWORD PTR [esi+56]

; 6063 : 		mapEffectDrawFlag = 1;

  001f8	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, ax ; mapEffectDrawFlag
$LN20@mapEffectH:

; 6045 : 	while (buf != (MAP_EFFECT*)NULL)

  001fe	85 f6		 test	 esi, esi
  00200	75 8e		 jne	 SHORT $LL3@mapEffectH
$LN4@mapEffectH:

; 6064 : 	}
; 6065 : }

  00202	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00205	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020c	59		 pop	 ecx
  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
  0020f	5b		 pop	 ebx
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
$LN35@mapEffectH:

; 6001 : 	int hosei1 = 940, hosei2 = -200, ww = DEF_APPSIZEX, hh = DEF_APPSIZEY, j;
; 6002 : 	static unsigned int time = TimeGetTime();

  00214	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectHalloweenProc@@YAXXZ@4HA
  00219	e8 00 00 00 00	 call	 __Init_thread_header
  0021e	83 c4 04	 add	 esp, 4
  00221	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??mapEffectHalloweenProc@@YAXXZ@4HA, -1
  00228	0f 85 37 fe ff
	ff		 jne	 $LN25@mapEffectH
  0022e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00235	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0023a	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectHalloweenProc@@YAXXZ@4IA, eax
  0023f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00246	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectHalloweenProc@@YAXXZ@4HA
  0024b	e8 00 00 00 00	 call	 __Init_thread_footer
  00250	83 c4 04	 add	 esp, 4
  00253	e9 0d fe ff ff	 jmp	 $LN25@mapEffectH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?mapEffectHalloweenProc@@YAXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectHalloweenProc@@YAXXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?mapEffectHalloweenProc@@YAXXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?mapEffectHalloweenProc@@YAXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?mapEffectHalloweenProc@@YAXXZ ENDP			; mapEffectHalloweenProc
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectKamiFubuki@@YAXXZ
_TEXT	SEGMENT
_hh$1$ = -24						; size = 4
_hosei1$1$ = -20					; size = 4
_hosei2$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?mapEffectKamiFubuki@@YAXXZ PROC			; mapEffectKamiFubuki, COMDAT

; 5784 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?mapEffectKamiFubuki@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 5785 : 	short mapEffectKamiFubukiWaitTime = 0;
; 5786 : 	short mapEffectKamiFubukiFrameMax = 0;
; 5787 : 	int hosei1 = 1240, hosei2 = -100, ww = DEF_APPSIZEX, hh = DEF_APPSIZEY, i, j;
; 5788 : 	static unsigned int time = TimeGetTime();

  00028	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002e	bf d8 04 00 00	 mov	 edi, 1240		; 000004d8H
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00039	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  0003f	89 7d ec	 mov	 DWORD PTR _hosei1$1$[ebp], edi
  00042	c7 45 f0 9c ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -100 ; ffffff9cH
  00049	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??mapEffectKamiFubuki@@YAXXZ@4HA
  00051	89 5d e8	 mov	 DWORD PTR _hh$1$[ebp], ebx
  00054	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0005a	0f 8f 92 02 00
	00		 jg	 $LN48@mapEffectK
$LN2@mapEffectK:

; 5789 : 	MAP_EFFECT *buf;
; 5790 : 
; 5791 : 	// ???????????????
; 5792 : 	if (ResoMode == 1)

  00060	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00066	83 fa 01	 cmp	 edx, 1
  00069	75 14		 jne	 SHORT $LN8@mapEffectK

; 5793 : 	{
; 5794 : 		ww >>= 1;
; 5795 : 		hh >>= 1;

  0006b	d1 fb		 sar	 ebx, 1

; 5796 : 		hosei1 = 470;

  0006d	bf d6 01 00 00	 mov	 edi, 470		; 000001d6H
  00072	89 5d e8	 mov	 DWORD PTR _hh$1$[ebp], ebx
  00075	89 7d ec	 mov	 DWORD PTR _hosei1$1$[ebp], edi

; 5797 : 		hosei2 = -50;

  00078	c7 45 f0 ce ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -50 ; ffffffceH
$LN8@mapEffectK:

; 5798 : 	}
; 5799 : 	// ????
; 5800 : 	if (mapEffectKamiFubukiLevel)

  0007f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?mapEffectKamiFubukiLevel@@3FA ; mapEffectKamiFubukiLevel
  00085	66 85 c0	 test	 ax, ax
  00088	0f 84 74 01 00
	00		 je	 $LN4@mapEffectK

; 5801 : 	{
; 5802 : 		if (mapEffectKamiFubukiLevel < 3)

  0008e	66 83 f8 03	 cmp	 ax, 3
  00092	0f 8d b4 00 00
	00		 jge	 $LN10@mapEffectK

; 5803 : 		{
; 5804 : 			mapEffectKamiFubukiWaitTime = (51 - 25 * mapEffectKamiFubukiLevel);

  00098	98		 cwde
  00099	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  0009e	6b c0 19	 imul	 eax, eax, 25
  000a1	66 2b c8	 sub	 cx, ax
  000a4	0f b7 f1	 movzx	 esi, cx

; 5805 : 			if (time + mapEffectKamiFubukiWaitTime < TimeGetTime())

  000a7	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000ac	0f bf ce	 movsx	 ecx, si
  000af	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?time@?1??mapEffectKamiFubuki@@YAXXZ@4IA
  000b5	3b c8		 cmp	 ecx, eax
  000b7	0f 83 45 01 00
	00		 jae	 $LN4@mapEffectK

; 5806 : 			{
; 5807 : 				MAP_EFFECT *buf = getMapEffectBuf();

  000bd	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  000c2	8b f0		 mov	 esi, eax

; 5808 : 				if (buf != (MAP_EFFECT*)NULL)

  000c4	85 f6		 test	 esi, esi
  000c6	0f 84 36 01 00
	00		 je	 $LN4@mapEffectK

; 5809 : 				{
; 5810 : 					buf->type = MAP_EFFECT_TYPE_KAMIFUBUKI;

  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 5811 : 					buf->x = (rand() % hosei1) + hosei2;

  000d5	e8 00 00 00 00	 call	 _rand
  000da	99		 cdq
  000db	f7 ff		 idiv	 edi

; 5812 : 					buf->y = 0;

  000dd	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000e4	03 55 f0	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  000e7	89 16		 mov	 DWORD PTR [esi], edx

; 5813 : 					buf->mode = (rand() % 4);

  000e9	e8 00 00 00 00	 call	 _rand
  000ee	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  000f3	79 05		 jns	 SHORT $LN39@mapEffectK
  000f5	48		 dec	 eax
  000f6	83 c8 fc	 or	 eax, -4			; fffffffcH
  000f9	40		 inc	 eax
$LN39@mapEffectK:
  000fa	66 89 46 40	 mov	 WORD PTR [esi+64], ax

; 5814 : 					buf->cnt = 4;

  000fe	c7 46 30 04 00
	00 00		 mov	 DWORD PTR [esi+48], 4

; 5815 : 					j = (rand() % 2);

  00105	e8 00 00 00 00	 call	 _rand
  0010a	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0010f	79 07		 jns	 SHORT $LN40@mapEffectK
  00111	48		 dec	 eax
  00112	83 c8 fe	 or	 eax, -2			; fffffffeH
  00115	83 c0 01	 add	 eax, 1
$LN40@mapEffectK:

; 5816 : 					if (j == 0)

  00118	75 09		 jne	 SHORT $LN14@mapEffectK

; 5817 : 					{
; 5818 : 						buf->dx = -1;
; 5819 : 						buf->dy = 2;

  0011a	c7 46 0c 02 00
	00 00		 mov	 DWORD PTR [esi+12], 2

; 5820 : 					}

  00121	eb 0c		 jmp	 SHORT $LN45@mapEffectK
$LN14@mapEffectK:

; 5821 : 					else if (j == 1)

  00123	83 f8 01	 cmp	 eax, 1
  00126	75 0e		 jne	 SHORT $LN16@mapEffectK

; 5822 : 					{
; 5823 : 						buf->dx = -1;
; 5824 : 						buf->dy = 3;

  00128	c7 46 0c 03 00
	00 00		 mov	 DWORD PTR [esi+12], 3
$LN45@mapEffectK:

; 5825 : 					}
; 5826 : 					time = TimeGetTime();

  0012f	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1
$LN16@mapEffectK:
  00136	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 5827 : 					mapEffectKamiFubukiCnt++;

  0013b	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectKamiFubukiCnt@@3FA ; mapEffectKamiFubukiCnt
  00142	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectKamiFubuki@@YAXXZ@4IA, eax

; 5828 : 				}
; 5829 : 			}
; 5830 : 		}

  00147	e9 b6 00 00 00	 jmp	 $LN4@mapEffectK
$LN10@mapEffectK:

; 5831 : 		else
; 5832 : 		{
; 5833 : 			mapEffectKamiFubukiFrameMax = (mapEffectKamiFubukiLevel - 2) << 1;

  0014c	0f b7 c8	 movzx	 ecx, ax
  0014f	66 83 e9 02	 sub	 cx, 2
  00153	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  00156	0f b7 c0	 movzx	 eax, ax

; 5834 : 			if (ResoMode == 1)

  00159	83 fa 01	 cmp	 edx, 1
  0015c	75 03		 jne	 SHORT $LN17@mapEffectK

; 5835 : 				mapEffectKamiFubukiFrameMax >>= 1;

  0015e	0f b7 c1	 movzx	 eax, cx
$LN17@mapEffectK:

; 5836 : 			for (i = 0; i < mapEffectKamiFubukiFrameMax; i++)

  00161	0f bf f8	 movsx	 edi, ax
  00164	85 ff		 test	 edi, edi
  00166	0f 8e 96 00 00
	00		 jle	 $LN4@mapEffectK
  0016c	8b 5d ec	 mov	 ebx, DWORD PTR _hosei1$1$[ebp]
  0016f	90		 npad	 1
$LL5@mapEffectK:

; 5837 : 			{
; 5838 : 				MAP_EFFECT *buf = getMapEffectBuf();

  00170	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  00175	8b f0		 mov	 esi, eax

; 5839 : 				if (buf != (MAP_EFFECT*)NULL)

  00177	85 f6		 test	 esi, esi
  00179	74 7b		 je	 SHORT $LN3@mapEffectK

; 5840 : 				{
; 5841 : 					buf->type = MAP_EFFECT_TYPE_KAMIFUBUKI;

  0017b	b8 04 00 00 00	 mov	 eax, 4
  00180	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 5842 : 					buf->x = (rand() % hosei1) + hosei2;

  00184	e8 00 00 00 00	 call	 _rand
  00189	99		 cdq
  0018a	f7 fb		 idiv	 ebx

; 5843 : 					buf->y = 0;

  0018c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00193	03 55 f0	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  00196	89 16		 mov	 DWORD PTR [esi], edx

; 5844 : 					buf->mode = (rand() % 4);

  00198	e8 00 00 00 00	 call	 _rand
  0019d	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  001a2	79 05		 jns	 SHORT $LN41@mapEffectK
  001a4	48		 dec	 eax
  001a5	83 c8 fc	 or	 eax, -4			; fffffffcH
  001a8	40		 inc	 eax
$LN41@mapEffectK:
  001a9	66 89 46 40	 mov	 WORD PTR [esi+64], ax

; 5845 : 					buf->cnt = 4;

  001ad	c7 46 30 04 00
	00 00		 mov	 DWORD PTR [esi+48], 4

; 5846 : 					j = (rand() % 2);

  001b4	e8 00 00 00 00	 call	 _rand
  001b9	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001be	79 07		 jns	 SHORT $LN42@mapEffectK
  001c0	48		 dec	 eax
  001c1	83 c8 fe	 or	 eax, -2			; fffffffeH
  001c4	83 c0 01	 add	 eax, 1
$LN42@mapEffectK:

; 5847 : 					if (j == 0)

  001c7	75 09		 jne	 SHORT $LN19@mapEffectK

; 5848 : 					{
; 5849 : 						buf->dx = -1;
; 5850 : 						buf->dy = 2;

  001c9	c7 46 0c 02 00
	00 00		 mov	 DWORD PTR [esi+12], 2

; 5851 : 					}

  001d0	eb 0c		 jmp	 SHORT $LN46@mapEffectK
$LN19@mapEffectK:

; 5852 : 					else if (j == 1)

  001d2	83 f8 01	 cmp	 eax, 1
  001d5	75 0e		 jne	 SHORT $LN21@mapEffectK

; 5853 : 					{
; 5854 : 						buf->dx = -1;
; 5855 : 						buf->dy = 3;

  001d7	c7 46 0c 03 00
	00 00		 mov	 DWORD PTR [esi+12], 3
$LN46@mapEffectK:

; 5856 : 					}
; 5857 : 					time = TimeGetTime();

  001de	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1
$LN21@mapEffectK:
  001e5	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 5858 : 					mapEffectKamiFubukiCnt++;

  001ea	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectKamiFubukiCnt@@3FA ; mapEffectKamiFubukiCnt
  001f1	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectKamiFubuki@@YAXXZ@4IA, eax
$LN3@mapEffectK:

; 5836 : 			for (i = 0; i < mapEffectKamiFubukiFrameMax; i++)

  001f6	83 ef 01	 sub	 edi, 1
  001f9	0f 85 71 ff ff
	ff		 jne	 $LL5@mapEffectK
  001ff	8b 5d e8	 mov	 ebx, DWORD PTR _hh$1$[ebp]
$LN4@mapEffectK:

; 5859 : 				}
; 5860 : 			}
; 5861 : 		}
; 5862 : 	}
; 5863 : 	// ???
; 5864 : 	i = 0;
; 5865 : 	buf = useBufMapEffect;

  00202	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A ; useBufMapEffect

; 5866 : 	while (buf != (MAP_EFFECT*)NULL)

  00208	85 f6		 test	 esi, esi
  0020a	0f 84 d0 00 00
	00		 je	 $LN7@mapEffectK
  00210	bf 03 00 00 00	 mov	 edi, 3
  00215	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]
  00218	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL6@mapEffectK:

; 5867 : 	{
; 5868 : 		if (buf->type == MAP_EFFECT_TYPE_KAMIFUBUKI)

  00220	66 83 7e 3c 04	 cmp	 WORD PTR [esi+60], 4
  00225	0f 85 9f 00 00
	00		 jne	 $LN25@mapEffectK

; 5869 : 		{
; 5870 : 			buf->x += (buf->dx + (rand() % 3) - 1);

  0022b	e8 00 00 00 00	 call	 _rand
  00230	99		 cdq
  00231	f7 ff		 idiv	 edi
  00233	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00236	4a		 dec	 edx
  00237	03 c2		 add	 eax, edx
  00239	01 06		 add	 DWORD PTR [esi], eax

; 5871 : 			buf->y += (buf->dy + (rand() % 3) - 1);

  0023b	e8 00 00 00 00	 call	 _rand
  00240	99		 cdq
  00241	f7 ff		 idiv	 edi
  00243	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00246	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00249	48		 dec	 eax
  0024a	03 c2		 add	 eax, edx
  0024c	01 07		 add	 DWORD PTR [edi], eax

; 5872 : 			if (buf->cnt <= 0)

  0024e	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00251	85 c0		 test	 eax, eax
  00253	7f 42		 jg	 SHORT $LN23@mapEffectK

; 5873 : 			{
; 5874 : 				buf->type2 = (rand() % 3);

  00255	e8 00 00 00 00	 call	 _rand
  0025a	99		 cdq
  0025b	b9 03 00 00 00	 mov	 ecx, 3
  00260	f7 f9		 idiv	 ecx
  00262	66 89 56 3e	 mov	 WORD PTR [esi+62], dx

; 5875 : 				buf->w = (rand() % 8) + 1;

  00266	e8 00 00 00 00	 call	 _rand
  0026b	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00270	79 05		 jns	 SHORT $LN43@mapEffectK
  00272	48		 dec	 eax
  00273	83 c8 f8	 or	 eax, -8			; fffffff8H
  00276	40		 inc	 eax
$LN43@mapEffectK:
  00277	40		 inc	 eax
  00278	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 5876 : 				buf->h = (rand() % 8) + 1;

  0027b	e8 00 00 00 00	 call	 _rand
  00280	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00285	79 05		 jns	 SHORT $LN44@mapEffectK
  00287	48		 dec	 eax
  00288	83 c8 f8	 or	 eax, -8			; fffffff8H
  0028b	40		 inc	 eax
$LN44@mapEffectK:
  0028c	40		 inc	 eax
  0028d	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 5877 : 				buf->cnt = 4;

  00290	b8 04 00 00 00	 mov	 eax, 4

; 5878 : 			}

  00295	eb 01		 jmp	 SHORT $LN24@mapEffectK
$LN23@mapEffectK:

; 5879 : 			else
; 5880 : 				buf->cnt--;

  00297	48		 dec	 eax
$LN24@mapEffectK:

; 5881 : 			mapEffectDirHosei(&buf->x, &buf->y);

  00298	57		 push	 edi
  00299	56		 push	 esi
  0029a	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0029d	e8 00 00 00 00	 call	 ?mapEffectDirHosei@@YAXPAH0@Z ; mapEffectDirHosei
  002a2	83 c4 08	 add	 esp, 8

; 5882 : 			if (hh <= buf->y)

  002a5	3b 1f		 cmp	 ebx, DWORD PTR [edi]
  002a7	7f 1c		 jg	 SHORT $LN37@mapEffectK

; 5883 : 			{
; 5884 : 				// ??
; 5885 : 				MAP_EFFECT *buf2 = buf->next;

  002a9	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]

; 5886 : 				delMapEffectBuf(buf);

  002ac	56		 push	 esi
  002ad	e8 00 00 00 00	 call	 ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ; delMapEffectBuf
  002b2	83 c4 04	 add	 esp, 4

; 5887 : 				buf = buf2;

  002b5	8b f7		 mov	 esi, edi

; 5888 : 				mapEffectKamiFubukiCnt--;

  002b7	66 ff 0d 00 00
	00 00		 dec	 WORD PTR ?mapEffectKamiFubukiCnt@@3FA ; mapEffectKamiFubukiCnt

; 5889 : 				continue;

  002be	b8 01 00 00 00	 mov	 eax, 1
  002c3	eb 0e		 jmp	 SHORT $LN32@mapEffectK
$LN37@mapEffectK:

; 5882 : 			if (hh <= buf->y)

  002c5	b8 01 00 00 00	 mov	 eax, 1
$LN25@mapEffectK:

; 5890 : 			}
; 5891 : 		}
; 5892 : 		buf = buf->next;

  002ca	8b 76 38	 mov	 esi, DWORD PTR [esi+56]

; 5893 : 		mapEffectDrawFlag = 1;

  002cd	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, ax ; mapEffectDrawFlag
$LN32@mapEffectK:

; 5866 : 	while (buf != (MAP_EFFECT*)NULL)

  002d3	bf 03 00 00 00	 mov	 edi, 3
  002d8	85 f6		 test	 esi, esi
  002da	0f 85 40 ff ff
	ff		 jne	 $LL6@mapEffectK
$LN7@mapEffectK:

; 5894 : 		i++;
; 5895 : 	}
; 5896 : }

  002e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ea	59		 pop	 ecx
  002eb	5f		 pop	 edi
  002ec	5e		 pop	 esi
  002ed	5b		 pop	 ebx
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c3		 ret	 0
$LN48@mapEffectK:

; 5785 : 	short mapEffectKamiFubukiWaitTime = 0;
; 5786 : 	short mapEffectKamiFubukiFrameMax = 0;
; 5787 : 	int hosei1 = 1240, hosei2 = -100, ww = DEF_APPSIZEX, hh = DEF_APPSIZEY, i, j;
; 5788 : 	static unsigned int time = TimeGetTime();

  002f2	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectKamiFubuki@@YAXXZ@4HA
  002f7	e8 00 00 00 00	 call	 __Init_thread_header
  002fc	83 c4 04	 add	 esp, 4
  002ff	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??mapEffectKamiFubuki@@YAXXZ@4HA, -1
  00306	0f 85 54 fd ff
	ff		 jne	 $LN2@mapEffectK
  0030c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00313	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00318	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectKamiFubuki@@YAXXZ@4IA, eax
  0031d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00324	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectKamiFubuki@@YAXXZ@4HA
  00329	e8 00 00 00 00	 call	 __Init_thread_footer
  0032e	83 c4 04	 add	 esp, 4
  00331	e9 2a fd ff ff	 jmp	 $LN2@mapEffectK
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?mapEffectKamiFubuki@@YAXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectKamiFubuki@@YAXXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?mapEffectKamiFubuki@@YAXXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?mapEffectKamiFubuki@@YAXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?mapEffectKamiFubuki@@YAXXZ ENDP			; mapEffectKamiFubuki
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectFallingStar@@YAXXZ
_TEXT	SEGMENT
?mapEffectFallingStar@@YAXXZ PROC			; mapEffectFallingStar, COMDAT

; 5353 : 	static MAP_EFFECT *buf = NULL;
; 5354 : 
; 5355 : 	if (mapEffectFallingStarFlag != 0 && (SaTime.hour < EVENING_TO_NIGHT || NIGHT_TO_MORNING < SaTime.hour))

  00000	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?mapEffectFallingStarFlag@@3FA ; mapEffectFallingStarFlag
  00007	a1 08 00 00 00	 mov	 eax, DWORD PTR ?SaTime@@3UtagLSTIME@@A+8
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	bf 01 00 00 00	 mov	 edi, 1
  00013	66 85 c9	 test	 cx, cx
  00016	74 44		 je	 SHORT $LN58@mapEffectF
  00018	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  0001d	7c 07		 jl	 SHORT $LN11@mapEffectF
  0001f	3d bc 02 00 00	 cmp	 eax, 700		; 000002bcH
  00024	7e 2d		 jle	 SHORT $LN10@mapEffectF
$LN11@mapEffectF:

; 5356 : 	{
; 5357 : 		mapEffectFallingStarFlag = 0;

  00026	33 c0		 xor	 eax, eax
  00028	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectFallingStarFlag@@3FA, ax ; mapEffectFallingStarFlag

; 5358 : 		mapEffectFallingStarTime = (rand() % 300) + 400;

  0002e	e8 00 00 00 00	 call	 _rand
  00033	99		 cdq
  00034	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00039	f7 f9		 idiv	 ecx
  0003b	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?mapEffectFallingStarFlag@@3FA ; mapEffectFallingStarFlag
  00042	a1 08 00 00 00	 mov	 eax, DWORD PTR ?SaTime@@3UtagLSTIME@@A+8
  00047	81 c2 90 01 00
	00		 add	 edx, 400		; 00000190H
  0004d	89 15 00 00 00
	00		 mov	 DWORD PTR ?mapEffectFallingStarTime@@3HA, edx ; mapEffectFallingStarTime
$LN10@mapEffectF:

; 5359 : 	}
; 5360 : 	if (!mapEffectFallingStarFlag && mapEffectFallingStarTime == SaTime.hour)

  00053	66 85 c9	 test	 cx, cx
  00056	0f 85 3c 02 00
	00		 jne	 $LN62@mapEffectF
$LN58@mapEffectF:
  0005c	39 05 00 00 00
	00		 cmp	 DWORD PTR ?mapEffectFallingStarTime@@3HA, eax ; mapEffectFallingStarTime
  00062	0f 85 30 02 00
	00		 jne	 $LN62@mapEffectF

; 5361 : 	{
; 5362 : 		if (nowFloor == 10920)

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowFloor@@3HA ; nowFloor
  0006d	3d a8 2a 00 00	 cmp	 eax, 10920		; 00002aa8H
  00072	0f 85 ff 00 00
	00		 jne	 $LN13@mapEffectF

; 5363 : 		{
; 5364 : 			buf = getMapEffectBuf();

  00078	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  0007d	8b c8		 mov	 ecx, eax
  0007f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A, ecx

; 5365 : 			if (buf)

  00085	85 c9		 test	 ecx, ecx
  00087	0f 84 02 02 00
	00		 je	 $LN53@mapEffectF

; 5366 : 			{
; 5367 : 				int i = (rand() % 5);

  0008d	e8 00 00 00 00	 call	 _rand
  00092	99		 cdq
  00093	b9 05 00 00 00	 mov	 ecx, 5
  00098	f7 f9		 idiv	 ecx

; 5368 : 
; 5369 : 				switch (i)

  0009a	83 fa 04	 cmp	 edx, 4
  0009d	0f 87 be 01 00
	00		 ja	 $LN2@mapEffectF
  000a3	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN59@mapEffectF[edx*4]
$LN16@mapEffectF:

; 5370 : 				{
; 5371 : 					case 0:
; 5372 : 						setEffectStar(buf, 76, 6, 0, 0, 0);

  000aa	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  000b0	6a 00		 push	 0
  000b2	6a 00		 push	 0
  000b4	6a 00		 push	 0
  000b6	6a 06		 push	 6
  000b8	6a 4c		 push	 76			; 0000004cH
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5373 : 						buf->dx = 10;
; 5374 : 						buf->dy = 6;

  000c0	c7 46 0c 06 00
	00 00		 mov	 DWORD PTR [esi+12], 6

; 5375 : 						buf->ey = 120;
; 5376 : 						break;

  000c7	e9 84 01 00 00	 jmp	 $LN67@mapEffectF
$LN17@mapEffectF:

; 5377 : 					case 1:
; 5378 : 						setEffectStar(buf, 77, 7, 0, 0, 0);

  000cc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  000d2	6a 00		 push	 0
  000d4	6a 00		 push	 0
  000d6	6a 00		 push	 0
  000d8	6a 07		 push	 7
  000da	6a 4d		 push	 77			; 0000004dH
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5379 : 						buf->dx = 8;

  000e2	c7 46 08 08 00
	00 00		 mov	 DWORD PTR [esi+8], 8

; 5398 : 						buf->dy = 7;
; 5399 : 						buf->ey = 120;
; 5400 : 						break;
; 5401 : 				}
; 5402 : 				// ??
; 5403 : 				if ((rand() % 10) < 6)

  000e9	c7 46 0c 07 00
	00 00		 mov	 DWORD PTR [esi+12], 7

; 5404 : 					buf->mode = 8;

  000f0	e9 62 01 00 00	 jmp	 $LN63@mapEffectF
$LN18@mapEffectF:

; 5380 : 						buf->dy = 7;
; 5381 : 						buf->ey = 120;
; 5382 : 						break;
; 5383 : 					case 2:
; 5384 : 						setEffectStar(buf, 80, 13, 0, 0, 0);

  000f5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  000fb	6a 00		 push	 0
  000fd	6a 00		 push	 0
  000ff	6a 00		 push	 0
  00101	6a 0d		 push	 13			; 0000000dH
  00103	6a 50		 push	 80			; 00000050H
  00105	56		 push	 esi
  00106	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5385 : 						buf->dx = -10;

  0010b	c7 46 08 f6 ff
	ff ff		 mov	 DWORD PTR [esi+8], -10	; fffffff6H

; 5386 : 						buf->dy = 9;

  00112	c7 46 0c 09 00
	00 00		 mov	 DWORD PTR [esi+12], 9

; 5387 : 						buf->ey = 120;
; 5388 : 						break;

  00119	e9 39 01 00 00	 jmp	 $LN63@mapEffectF
$LN19@mapEffectF:

; 5389 : 					case 3:
; 5390 : 						setEffectStar(buf, 84, 19, 0, 0, 0);

  0011e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  00124	6a 00		 push	 0
  00126	6a 00		 push	 0
  00128	6a 00		 push	 0
  0012a	6a 13		 push	 19			; 00000013H
  0012c	6a 54		 push	 84			; 00000054H
  0012e	56		 push	 esi
  0012f	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5391 : 						buf->dx = 12;

  00134	c7 46 08 0c 00
	00 00		 mov	 DWORD PTR [esi+8], 12	; 0000000cH

; 5392 : 						buf->dy = 7;

  0013b	c7 46 0c 07 00
	00 00		 mov	 DWORD PTR [esi+12], 7

; 5393 : 						buf->ey = 90;

  00142	c7 46 24 5a 00
	00 00		 mov	 DWORD PTR [esi+36], 90	; 0000005aH

; 5394 : 						break;

  00149	e9 10 01 00 00	 jmp	 $LN65@mapEffectF
$LN20@mapEffectF:

; 5395 : 					case 4:
; 5396 : 						setEffectStar(buf, 95, 26, 0, 0, 0);

  0014e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  00154	6a 00		 push	 0
  00156	6a 00		 push	 0
  00158	6a 00		 push	 0
  0015a	6a 1a		 push	 26			; 0000001aH
  0015c	6a 5f		 push	 95			; 0000005fH
  0015e	56		 push	 esi
  0015f	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5397 : 						buf->dx = -10;

  00164	c7 46 08 f6 ff
	ff ff		 mov	 DWORD PTR [esi+8], -10	; fffffff6H

; 5398 : 						buf->dy = 7;
; 5399 : 						buf->ey = 120;
; 5400 : 						break;
; 5401 : 				}
; 5402 : 				// ??
; 5403 : 				if ((rand() % 10) < 6)

  0016b	c7 46 0c 07 00
	00 00		 mov	 DWORD PTR [esi+12], 7

; 5404 : 					buf->mode = 8;

  00172	e9 e0 00 00 00	 jmp	 $LN63@mapEffectF
$LN13@mapEffectF:

; 5405 : 				else
; 5406 : 					buf->mode = 1;
; 5407 : 			}
; 5408 : 			mapEffectFallingStarFlag = 1;
; 5409 : 		}
; 5410 : 		else if (nowFloor == 20105)

  00177	3d 89 4e 00 00	 cmp	 eax, 20105		; 00004e89H
  0017c	75 4a		 jne	 SHORT $LN23@mapEffectF

; 5411 : 		{
; 5412 : 			buf = getMapEffectBuf();

  0017e	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  00183	8b c8		 mov	 ecx, eax
  00185	89 0d 00 00 00
	00		 mov	 DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A, ecx

; 5413 : 			if (buf)

  0018b	85 c9		 test	 ecx, ecx
  0018d	0f 84 fc 00 00
	00		 je	 $LN53@mapEffectF

; 5414 : 			{
; 5415 : 				int i = (rand() % 8);

  00193	e8 00 00 00 00	 call	 _rand

; 5416 : 
; 5417 : 				i = 7;
; 5418 : 				switch (i)
; 5419 : 				{
; 5420 : 					case 0:
; 5421 : 						setEffectStar(buf, 22, 9, 0, 0, 0);
; 5422 : 						buf->dx = 10;
; 5423 : 						buf->dy = 7;
; 5424 : 						buf->ey = 120;
; 5425 : 						break;
; 5426 : 					case 1:
; 5427 : 						setEffectStar(buf, 27, 15, 0, 0, 0);
; 5428 : 						buf->dx = -8;
; 5429 : 						buf->dy = 9;
; 5430 : 						buf->ey = 120;
; 5431 : 						break;
; 5432 : 					case 2:
; 5433 : 						setEffectStar(buf, 31, 14, 0, 0, 0);
; 5434 : 						buf->dx = -10;
; 5435 : 						buf->dy = 6;
; 5436 : 						buf->ey = 120;
; 5437 : 						break;
; 5438 : 					case 3:
; 5439 : 						setEffectStar(buf, 33, 18, 0, 0, 0);
; 5440 : 						buf->dx = 12;
; 5441 : 						buf->dy = 8;
; 5442 : 						buf->ey = 120;
; 5443 : 						break;
; 5444 : 					case 4:
; 5445 : 						setEffectStar(buf, 38, 22, 0, 0, 0);
; 5446 : 						buf->dx = -11;
; 5447 : 						buf->dy = 7;
; 5448 : 						buf->ey = 120;
; 5449 : 						break;
; 5450 : 					case 5:
; 5451 : 						setEffectStar(buf, 43, 27, 0, 0, 0);
; 5452 : 						buf->dx = -9;
; 5453 : 						buf->dy = 6;
; 5454 : 						buf->ey = 120;
; 5455 : 						break;
; 5456 : 					case 6:
; 5457 : 						setEffectStar(buf, 41, 29, 0, 0, 0);
; 5458 : 						buf->dx = 12;
; 5459 : 						buf->dy = 6;
; 5460 : 						buf->ey = 120;
; 5461 : 						break;
; 5462 : 					case 7:
; 5463 : 						setEffectStar(buf, 43, 33, 0, 0, 0);

  00198	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	6a 21		 push	 33			; 00000021H
  001a6	6a 2b		 push	 43			; 0000002bH
  001a8	56		 push	 esi
  001a9	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5464 : 						buf->dx = 14;

  001ae	c7 46 08 0e 00
	00 00		 mov	 DWORD PTR [esi+8], 14	; 0000000eH

; 5465 : 						buf->dy = 8;

  001b5	c7 46 0c 08 00
	00 00		 mov	 DWORD PTR [esi+12], 8

; 5466 : 						buf->ey = 80;

  001bc	c7 46 24 50 00
	00 00		 mov	 DWORD PTR [esi+36], 80	; 00000050H

; 5467 : 						break;
; 5468 : 				}
; 5469 : 				// ??
; 5470 : 				if ((rand() % 10) < 6)
; 5471 : 					buf->mode = 8;

  001c3	e9 96 00 00 00	 jmp	 $LN65@mapEffectF
$LN23@mapEffectF:

; 5472 : 				else
; 5473 : 					buf->mode = 1;
; 5474 : 			}
; 5475 : 			mapEffectFallingStarFlag = 1;
; 5476 : 		}
; 5477 : 		else if (nowFloor == 1200)

  001c8	3d b0 04 00 00	 cmp	 eax, 1200		; 000004b0H
  001cd	75 47		 jne	 SHORT $LN36@mapEffectF

; 5478 : 		{
; 5479 : 			buf = getMapEffectBuf();

  001cf	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  001d4	8b c8		 mov	 ecx, eax
  001d6	89 0d 00 00 00
	00		 mov	 DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A, ecx

; 5480 : 			if (buf)

  001dc	85 c9		 test	 ecx, ecx
  001de	0f 84 ab 00 00
	00		 je	 $LN53@mapEffectF

; 5481 : 			{
; 5482 : 				int i = (rand() % 3);

  001e4	e8 00 00 00 00	 call	 _rand

; 5483 : 
; 5484 : 				i = 2;
; 5485 : 				switch (i)
; 5486 : 				{
; 5487 : 					case 0:
; 5488 : 						setEffectStar(buf, 63, 26, 0, 0, 0);
; 5489 : 						buf->dx = 10;
; 5490 : 						buf->dy = 7;
; 5491 : 						buf->ey = 80;
; 5492 : 						break;
; 5493 : 					case 1:
; 5494 : 						setEffectStar(buf, 66, 30, 0, 0, 0);
; 5495 : 						buf->dx = -10;
; 5496 : 						buf->dy = 6;
; 5497 : 						buf->ey = 70;
; 5498 : 						break;
; 5499 : 					case 2:
; 5500 : 						setEffectStar(buf, 70, 35, 0, 0, 0);

  001e9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  001ef	6a 00		 push	 0
  001f1	6a 00		 push	 0
  001f3	6a 00		 push	 0
  001f5	6a 23		 push	 35			; 00000023H
  001f7	6a 46		 push	 70			; 00000046H
  001f9	56		 push	 esi
  001fa	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5501 : 						buf->dx = 8;

  001ff	c7 46 08 08 00
	00 00		 mov	 DWORD PTR [esi+8], 8

; 5502 : 						buf->dy = 6;

  00206	c7 46 0c 06 00
	00 00		 mov	 DWORD PTR [esi+12], 6

; 5503 : 						buf->ey = 40;

  0020d	c7 46 24 28 00
	00 00		 mov	 DWORD PTR [esi+36], 40	; 00000028H

; 5504 : 						break;
; 5505 : 				}
; 5506 : 				// ??
; 5507 : 				if ((rand() % 10) < 6)
; 5508 : 					buf->mode = 8;

  00214	eb 48		 jmp	 SHORT $LN65@mapEffectF
$LN36@mapEffectF:

; 5509 : 				else
; 5510 : 					buf->mode = 1;
; 5511 : 			}
; 5512 : 			mapEffectFallingStarFlag = 1;
; 5513 : 		}
; 5514 : 		else if (nowFloor == 20406)

  00216	3d b6 4f 00 00	 cmp	 eax, 20406		; 00004fb6H
  0021b	75 7b		 jne	 SHORT $LN62@mapEffectF

; 5515 : 		{
; 5516 : 			buf = getMapEffectBuf();

  0021d	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  00222	8b c8		 mov	 ecx, eax
  00224	89 0d 00 00 00
	00		 mov	 DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A, ecx

; 5517 : 			if (buf)

  0022a	85 c9		 test	 ecx, ecx
  0022c	74 61		 je	 SHORT $LN53@mapEffectF

; 5518 : 			{
; 5519 : 				int i = (rand() % 6);

  0022e	e8 00 00 00 00	 call	 _rand

; 5520 : 
; 5521 : 				i = 5;
; 5522 : 				switch (i)
; 5523 : 				{
; 5524 : 					case 0:
; 5525 : 						setEffectStar(buf, 20, 11, 0, 0, 0);
; 5526 : 						buf->dx = -12;
; 5527 : 						buf->dy = 9;
; 5528 : 						buf->ey = 80;
; 5529 : 						break;
; 5530 : 					case 1:
; 5531 : 						setEffectStar(buf, 23, 11, 0, 0, 0);
; 5532 : 						buf->dx = 10;
; 5533 : 						buf->dy = 8;
; 5534 : 						buf->ey = 120;
; 5535 : 						break;
; 5536 : 					case 2:
; 5537 : 						setEffectStar(buf, 32, 14, 0, 0, 0);
; 5538 : 						buf->dx = -9;
; 5539 : 						buf->dy = 6;
; 5540 : 						buf->ey = 120;
; 5541 : 						break;
; 5542 : 					case 3:
; 5543 : 						setEffectStar(buf, 36, 20, 0, 0, 0);
; 5544 : 						buf->dx = -10;
; 5545 : 						buf->dy = 9;
; 5546 : 						buf->ey = 120;
; 5547 : 						break;
; 5548 : 					case 4:
; 5549 : 						setEffectStar(buf, 41, 24, 0, 0, 0);
; 5550 : 						buf->dx = 11;
; 5551 : 						buf->dy = 7;
; 5552 : 						buf->ey = 120;
; 5553 : 						break;
; 5554 : 					case 5:
; 5555 : 						setEffectStar(buf, 44, 32, 0, 0, 0);

  00233	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  00239	6a 00		 push	 0
  0023b	6a 00		 push	 0
  0023d	6a 00		 push	 0
  0023f	6a 20		 push	 32			; 00000020H
  00241	6a 2c		 push	 44			; 0000002cH
  00243	56		 push	 esi
  00244	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5556 : 						buf->dx = 10;
; 5557 : 						buf->dy = 8;

  00249	c7 46 0c 08 00
	00 00		 mov	 DWORD PTR [esi+12], 8
$LN67@mapEffectF:

; 5558 : 						buf->ey = 120;
; 5559 : 						break;
; 5560 : 				}
; 5561 : 				// ??
; 5562 : 				if ((rand() % 10) < 6)
; 5563 : 					buf->mode = 8;
; 5564 : 				else
; 5565 : 					buf->mode = 1;
; 5566 : 			}
; 5567 : 			mapEffectFallingStarFlag = 1;

  00250	c7 46 08 0a 00
	00 00		 mov	 DWORD PTR [esi+8], 10	; 0000000aH
$LN63@mapEffectF:
  00257	c7 46 24 78 00
	00 00		 mov	 DWORD PTR [esi+36], 120	; 00000078H
$LN65@mapEffectF:
  0025e	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@mapEffectF:
  00261	e8 00 00 00 00	 call	 _rand
  00266	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0026b	99		 cdq
  0026c	f7 f9		 idiv	 ecx
  0026e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
  00274	83 fa 06	 cmp	 edx, 6
  00277	7d 12		 jge	 SHORT $LN21@mapEffectF
  00279	b8 08 00 00 00	 mov	 eax, 8
  0027e	66 89 41 40	 mov	 WORD PTR [ecx+64], ax
  00282	66 89 3d 00 00
	00 00		 mov	 WORD PTR ?mapEffectFallingStarFlag@@3FA, di ; mapEffectFallingStarFlag
  00289	eb 13		 jmp	 SHORT $LN44@mapEffectF
$LN21@mapEffectF:
  0028b	66 89 79 40	 mov	 WORD PTR [ecx+64], di
$LN53@mapEffectF:
  0028f	66 89 3d 00 00
	00 00		 mov	 WORD PTR ?mapEffectFallingStarFlag@@3FA, di ; mapEffectFallingStarFlag
  00296	eb 06		 jmp	 SHORT $LN44@mapEffectF
$LN62@mapEffectF:

; 5509 : 				else
; 5510 : 					buf->mode = 1;
; 5511 : 			}
; 5512 : 			mapEffectFallingStarFlag = 1;
; 5513 : 		}
; 5514 : 		else if (nowFloor == 20406)

  00298	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A
$LN44@mapEffectF:

; 5568 : 		}
; 5569 : 	}
; 5570 : 	if (buf)

  0029e	85 c9		 test	 ecx, ecx
  002a0	74 39		 je	 SHORT $LN56@mapEffectF

; 5571 : 	{
; 5572 : 		buf->ggx += buf->dx;

  002a2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  002a5	01 41 18	 add	 DWORD PTR [ecx+24], eax

; 5573 : 		buf->ggy += buf->dy;

  002a8	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  002ab	01 41 1c	 add	 DWORD PTR [ecx+28], eax
  002ae	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 5574 : 		if (buf->ggy > buf->ey)

  002b1	51		 push	 ecx
  002b2	3b 41 24	 cmp	 eax, DWORD PTR [ecx+36]
  002b5	7e 15		 jle	 SHORT $LN55@mapEffectF

; 5575 : 		{
; 5576 : 			delMapEffectBuf(buf);

  002b7	e8 00 00 00 00	 call	 ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ; delMapEffectBuf

; 5583 : 		}
; 5584 : 	}
; 5585 : }

  002bc	83 c4 04	 add	 esp, 4
  002bf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectFallingStar@@YAXXZ@4PAU_MAP_EFFECT@@A, 0
  002c9	5f		 pop	 edi
  002ca	5e		 pop	 esi
  002cb	c3		 ret	 0
$LN55@mapEffectF:

; 5577 : 			buf = NULL;
; 5578 : 		}
; 5579 : 		else
; 5580 : 		{
; 5581 : 			calEffectStar(buf);

  002cc	e8 00 00 00 00	 call	 ?calEffectStar@@YAXPAU_MAP_EFFECT@@@Z ; calEffectStar

; 5582 : 			mapEffectDrawFlag = 1;

  002d1	66 89 3d 00 00
	00 00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, di ; mapEffectDrawFlag

; 5583 : 		}
; 5584 : 	}
; 5585 : }

  002d8	83 c4 04	 add	 esp, 4
$LN56@mapEffectF:
  002db	5f		 pop	 edi
  002dc	5e		 pop	 esi
  002dd	c3		 ret	 0
  002de	66 90		 npad	 2
$LN59@mapEffectF:
  002e0	00 00 00 00	 DD	 $LN16@mapEffectF
  002e4	00 00 00 00	 DD	 $LN17@mapEffectF
  002e8	00 00 00 00	 DD	 $LN18@mapEffectF
  002ec	00 00 00 00	 DD	 $LN19@mapEffectF
  002f0	00 00 00 00	 DD	 $LN20@mapEffectF
?mapEffectFallingStar@@YAXXZ ENDP			; mapEffectFallingStar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectStar@@YAXXZ
_TEXT	SEGMENT
?mapEffectStar@@YAXXZ PROC				; mapEffectStar, COMDAT

; 5037 : 	static MAP_EFFECT *buf[30];
; 5038 : 	int i;
; 5039 : 
; 5040 : 	if ((nowFloor == 1200 || nowFloor == 20105 || nowFloor == 10920 || nowFloor == 20406)
; 5041 : 	 && NOON_TO_EVENING + 10 <= SaTime.hour && SaTime.hour < NIGHT_TO_MORNING + 80)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nowFloor@@3HA ; nowFloor
  00006	56		 push	 esi
  00007	81 f9 b0 04 00
	00		 cmp	 ecx, 1200		; 000004b0H
  0000d	74 1c		 je	 SHORT $LN22@mapEffectS
  0000f	81 f9 89 4e 00
	00		 cmp	 ecx, 20105		; 00004e89H
  00015	74 14		 je	 SHORT $LN22@mapEffectS
  00017	81 f9 a8 2a 00
	00		 cmp	 ecx, 10920		; 00002aa8H
  0001d	74 0c		 je	 SHORT $LN22@mapEffectS
  0001f	81 f9 b6 4f 00
	00		 cmp	 ecx, 20406		; 00004fb6H
  00025	0f 85 65 0d 00
	00		 jne	 $LN20@mapEffectS
$LN22@mapEffectS:
  0002b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?SaTime@@3UtagLSTIME@@A+8
  00030	05 2e ff ff ff	 add	 eax, -210		; ffffff2eH
  00035	3d 39 02 00 00	 cmp	 eax, 569		; 00000239H
  0003a	0f 87 50 0d 00
	00		 ja	 $LN20@mapEffectS

; 5042 : 	{
; 5043 : 		if (nowFloor == 1200 && mapEffectStarFlag == 0)

  00040	53		 push	 ebx
  00041	bb 01 00 00 00	 mov	 ebx, 1
  00046	57		 push	 edi
  00047	81 f9 b0 04 00
	00		 cmp	 ecx, 1200		; 000004b0H
  0004d	0f 85 12 02 00
	00		 jne	 $LN23@mapEffectS
  00053	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectStarFlag@@3FA, 0 ; mapEffectStarFlag
  0005b	0f 85 2d 0c 00
	00		 jne	 $LN29@mapEffectS

; 5044 : 		{
; 5045 : 			for (i = 0; i < sizeof(buf) / sizeof(void*); i++)

  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A, xmm0
  0006b	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+16, xmm0
  00072	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+32, xmm0
  00079	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+48, xmm0
  00080	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+64, xmm0
  00087	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+80, xmm0
  0008e	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+96, xmm0
  00095	66 0f d6 05 70
	00 00 00	 movq	 QWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+112, xmm0

; 5046 : 				buf[i] = NULL;
; 5047 : 			buf[0] = getMapEffectBuf();

  0009d	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5048 : 			setEffectStar(buf[0], 62, 28,   0,   0, 0);

  000a2	6a 00		 push	 0
  000a4	6a 00		 push	 0
  000a6	6a 00		 push	 0
  000a8	6a 1c		 push	 28			; 0000001cH
  000aa	6a 3e		 push	 62			; 0000003eH
  000ac	50		 push	 eax
  000ad	a3 00 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A, eax
  000b2	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5049 : 			buf[1] = getMapEffectBuf();

  000b7	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5050 : 			setEffectStar(buf[1], 63, 27,  -5,  -5, 1);

  000bc	53		 push	 ebx
  000bd	6a fb		 push	 -5			; fffffffbH
  000bf	6a fb		 push	 -5			; fffffffbH
  000c1	6a 1b		 push	 27			; 0000001bH
  000c3	6a 3f		 push	 63			; 0000003fH
  000c5	50		 push	 eax
  000c6	a3 04 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+4, eax
  000cb	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5051 : 			buf[2] = getMapEffectBuf();

  000d0	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5052 : 			setEffectStar(buf[2], 63, 28,  16, -10, 0);

  000d5	6a 00		 push	 0
  000d7	6a f6		 push	 -10			; fffffff6H
  000d9	6a 10		 push	 16			; 00000010H
  000db	6a 1c		 push	 28			; 0000001cH
  000dd	6a 3f		 push	 63			; 0000003fH
  000df	50		 push	 eax
  000e0	a3 08 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+8, eax
  000e5	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  000ea	83 c4 48	 add	 esp, 72			; 00000048H

; 5053 : 			buf[3] = getMapEffectBuf();

  000ed	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5054 : 			setEffectStar(buf[3], 63, 29,  10,   5, 1);

  000f2	53		 push	 ebx
  000f3	6a 05		 push	 5
  000f5	6a 0a		 push	 10			; 0000000aH
  000f7	6a 1d		 push	 29			; 0000001dH
  000f9	6a 3f		 push	 63			; 0000003fH
  000fb	50		 push	 eax
  000fc	a3 0c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+12, eax
  00101	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5055 : 			buf[4] = getMapEffectBuf();

  00106	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5056 : 			setEffectStar(buf[4], 64, 29,   0,  -8, 1);

  0010b	53		 push	 ebx
  0010c	6a f8		 push	 -8			; fffffff8H
  0010e	6a 00		 push	 0
  00110	6a 1d		 push	 29			; 0000001dH
  00112	6a 40		 push	 64			; 00000040H
  00114	50		 push	 eax
  00115	a3 10 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+16, eax
  0011a	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5057 : 
; 5058 : 			buf[5] = getMapEffectBuf();

  0011f	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5059 : 			setEffectStar(buf[5], 65, 29,  -8,   5, 0);

  00124	6a 00		 push	 0
  00126	6a 05		 push	 5
  00128	6a f8		 push	 -8			; fffffff8H
  0012a	6a 1d		 push	 29			; 0000001dH
  0012c	6a 41		 push	 65			; 00000041H
  0012e	50		 push	 eax
  0012f	a3 14 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+20, eax
  00134	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00139	83 c4 48	 add	 esp, 72			; 00000048H

; 5060 : 			buf[6] = getMapEffectBuf();

  0013c	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5061 : 			setEffectStar(buf[6], 65, 30,  16,  10, 0);

  00141	6a 00		 push	 0
  00143	6a 0a		 push	 10			; 0000000aH
  00145	6a 10		 push	 16			; 00000010H
  00147	6a 1e		 push	 30			; 0000001eH
  00149	6a 41		 push	 65			; 00000041H
  0014b	50		 push	 eax
  0014c	a3 18 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+24, eax
  00151	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5062 : 			buf[7] = getMapEffectBuf();

  00156	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5063 : 			setEffectStar(buf[7], 66, 31,   0,   0, 1);

  0015b	53		 push	 ebx
  0015c	6a 00		 push	 0
  0015e	6a 00		 push	 0
  00160	6a 1f		 push	 31			; 0000001fH
  00162	a3 1c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+28, eax
  00167	6a 42		 push	 66			; 00000042H
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5064 : 			buf[8] = getMapEffectBuf();

  0016f	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5065 : 			setEffectStar(buf[8], 66, 30,   8, -12, 1);

  00174	53		 push	 ebx
  00175	6a f4		 push	 -12			; fffffff4H
  00177	6a 08		 push	 8
  00179	6a 1e		 push	 30			; 0000001eH
  0017b	6a 42		 push	 66			; 00000042H
  0017d	50		 push	 eax
  0017e	a3 20 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+32, eax
  00183	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00188	83 c4 48	 add	 esp, 72			; 00000048H

; 5066 : 			buf[9] = getMapEffectBuf();

  0018b	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5067 : 			setEffectStar(buf[9], 67, 31,  20,   0, 0);

  00190	6a 00		 push	 0
  00192	6a 00		 push	 0
  00194	6a 14		 push	 20			; 00000014H
  00196	6a 1f		 push	 31			; 0000001fH
  00198	6a 43		 push	 67			; 00000043H
  0019a	50		 push	 eax
  0019b	a3 24 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+36, eax
  001a0	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5068 : 
; 5069 : 			buf[10] = getMapEffectBuf();

  001a5	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5070 : 			setEffectStar(buf[10], 69, 34,  -8,  -8, 0);

  001aa	6a 00		 push	 0
  001ac	6a f8		 push	 -8			; fffffff8H
  001ae	6a f8		 push	 -8			; fffffff8H
  001b0	6a 22		 push	 34			; 00000022H
  001b2	6a 45		 push	 69			; 00000045H
  001b4	50		 push	 eax
  001b5	a3 28 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+40, eax
  001ba	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5071 : 			buf[11] = getMapEffectBuf();

  001bf	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5072 : 			setEffectStar(buf[11], 70, 34,   5,  10, 1);

  001c4	53		 push	 ebx
  001c5	6a 0a		 push	 10			; 0000000aH
  001c7	6a 05		 push	 5
  001c9	6a 22		 push	 34			; 00000022H
  001cb	6a 46		 push	 70			; 00000046H
  001cd	50		 push	 eax
  001ce	a3 2c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+44, eax
  001d3	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  001d8	83 c4 48	 add	 esp, 72			; 00000048H

; 5073 : 			buf[12] = getMapEffectBuf();

  001db	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5074 : 			setEffectStar(buf[12], 70, 35,   2,  24, 0);

  001e0	6a 00		 push	 0
  001e2	6a 18		 push	 24			; 00000018H
  001e4	6a 02		 push	 2
  001e6	6a 23		 push	 35			; 00000023H
  001e8	6a 46		 push	 70			; 00000046H
  001ea	50		 push	 eax
  001eb	a3 30 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+48, eax
  001f0	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5075 : 			buf[13] = getMapEffectBuf();

  001f5	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5076 : 			setEffectStar(buf[13], 70, 36, -20, -16, 1);

  001fa	53		 push	 ebx
  001fb	6a f0		 push	 -16			; fffffff0H
  001fd	6a ec		 push	 -20			; ffffffecH
  001ff	6a 24		 push	 36			; 00000024H
  00201	6a 46		 push	 70			; 00000046H
  00203	50		 push	 eax
  00204	a3 34 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+52, eax
  00209	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5077 : 			buf[14] = getMapEffectBuf();

  0020e	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5078 : 			setEffectStar(buf[14], 71, 36,   2,   4, 1);

  00213	53		 push	 ebx
  00214	6a 04		 push	 4
  00216	6a 02		 push	 2
  00218	6a 24		 push	 36			; 00000024H
  0021a	6a 47		 push	 71			; 00000047H
  0021c	50		 push	 eax
  0021d	a3 38 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+56, eax
  00222	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00227	83 c4 48	 add	 esp, 72			; 00000048H

; 5079 : 
; 5080 : 			buf[15] = getMapEffectBuf();

  0022a	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5081 : 			setEffectStar(buf[15], 71, 37,   5, -10, 1);

  0022f	53		 push	 ebx
  00230	6a f6		 push	 -10			; fffffff6H
  00232	6a 05		 push	 5
  00234	6a 25		 push	 37			; 00000025H
  00236	6a 47		 push	 71			; 00000047H
  00238	50		 push	 eax
  00239	a3 3c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+60, eax
  0023e	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5082 : 			buf[16] = getMapEffectBuf();

  00243	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5083 : 			setEffectStar(buf[16], 72, 37,   0,  12, 0);

  00248	6a 00		 push	 0
  0024a	a3 40 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+64, eax
  0024f	6a 0c		 push	 12			; 0000000cH
  00251	6a 00		 push	 0
  00253	6a 25		 push	 37			; 00000025H
  00255	6a 48		 push	 72			; 00000048H
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  0025d	83 c4 30	 add	 esp, 48			; 00000030H

; 5084 : 
; 5085 : 			mapEffectStarFlag = 1;
; 5086 : 		}

  00260	e9 22 0a 00 00	 jmp	 $LN80@mapEffectS
$LN23@mapEffectS:

; 5087 : 		else if (nowFloor == 20105 && mapEffectStarFlag == 0)

  00265	81 f9 89 4e 00
	00		 cmp	 ecx, 20105		; 00004e89H
  0026b	0f 85 6b 03 00
	00		 jne	 $LN25@mapEffectS
  00271	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectStarFlag@@3FA, 0 ; mapEffectStarFlag
  00279	0f 85 0f 0a 00
	00		 jne	 $LN29@mapEffectS

; 5088 : 		{
; 5089 : 			for (i = 0; i < sizeof(buf) / sizeof(void*); i++)

  0027f	0f 57 c0	 xorps	 xmm0, xmm0
  00282	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A, xmm0
  00289	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+16, xmm0
  00290	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+32, xmm0
  00297	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+48, xmm0
  0029e	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+64, xmm0
  002a5	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+80, xmm0
  002ac	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+96, xmm0
  002b3	66 0f d6 05 70
	00 00 00	 movq	 QWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+112, xmm0

; 5090 : 				buf[i] = NULL;
; 5091 : 			buf[0] = getMapEffectBuf();

  002bb	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5092 : 			setEffectStar(buf[0], 21,  8,   5,   0, 1);

  002c0	6a 01		 push	 1
  002c2	6a 00		 push	 0
  002c4	6a 05		 push	 5
  002c6	6a 08		 push	 8
  002c8	6a 15		 push	 21			; 00000015H
  002ca	50		 push	 eax
  002cb	a3 00 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A, eax
  002d0	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5093 : 			buf[1] = getMapEffectBuf();

  002d5	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5094 : 			setEffectStar(buf[1], 20, 10,  -5,   5, 1);

  002da	6a 01		 push	 1
  002dc	6a 05		 push	 5
  002de	6a fb		 push	 -5			; fffffffbH
  002e0	6a 0a		 push	 10			; 0000000aH
  002e2	6a 14		 push	 20			; 00000014H
  002e4	50		 push	 eax
  002e5	a3 04 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+4, eax
  002ea	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5095 : 			buf[2] = getMapEffectBuf();

  002ef	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5096 : 			setEffectStar(buf[2], 18, 11,   5,  10, 0);

  002f4	6a 00		 push	 0
  002f6	6a 0a		 push	 10			; 0000000aH
  002f8	6a 05		 push	 5
  002fa	6a 0b		 push	 11			; 0000000bH
  002fc	6a 12		 push	 18			; 00000012H
  002fe	50		 push	 eax
  002ff	a3 08 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+8, eax
  00304	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00309	83 c4 48	 add	 esp, 72			; 00000048H

; 5097 : 			buf[3] = getMapEffectBuf();

  0030c	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5098 : 			setEffectStar(buf[3], 20, 12,   0,  -5, 1);

  00311	6a 01		 push	 1
  00313	6a fb		 push	 -5			; fffffffbH
  00315	6a 00		 push	 0
  00317	6a 0c		 push	 12			; 0000000cH
  00319	6a 14		 push	 20			; 00000014H
  0031b	50		 push	 eax
  0031c	a3 0c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+12, eax
  00321	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5099 : 			buf[4] = getMapEffectBuf();

  00326	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5100 : 			setEffectStar(buf[4], 23, 11,   0,   0, 0);

  0032b	6a 00		 push	 0
  0032d	6a 00		 push	 0
  0032f	6a 00		 push	 0
  00331	6a 0b		 push	 11			; 0000000bH
  00333	6a 17		 push	 23			; 00000017H
  00335	50		 push	 eax
  00336	a3 10 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+16, eax
  0033b	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5101 : 
; 5102 : 			buf[5] = getMapEffectBuf();

  00340	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5103 : 			setEffectStar(buf[5], 23, 14,   0,   0, 0);

  00345	6a 00		 push	 0
  00347	6a 00		 push	 0
  00349	6a 00		 push	 0
  0034b	6a 0e		 push	 14			; 0000000eH
  0034d	6a 17		 push	 23			; 00000017H
  0034f	50		 push	 eax
  00350	a3 14 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+20, eax
  00355	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  0035a	83 c4 48	 add	 esp, 72			; 00000048H

; 5104 : 			buf[6] = getMapEffectBuf();

  0035d	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5105 : 			setEffectStar(buf[6], 25, 13,   8,   6, 1);

  00362	6a 01		 push	 1
  00364	6a 06		 push	 6
  00366	6a 08		 push	 8
  00368	6a 0d		 push	 13			; 0000000dH
  0036a	6a 19		 push	 25			; 00000019H
  0036c	50		 push	 eax
  0036d	a3 18 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+24, eax
  00372	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5106 : 			buf[7] = getMapEffectBuf();

  00377	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5107 : 			setEffectStar(buf[7], 25, 16,   0,   0, 1);

  0037c	6a 01		 push	 1
  0037e	6a 00		 push	 0
  00380	6a 00		 push	 0
  00382	6a 10		 push	 16			; 00000010H
  00384	a3 1c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+28, eax
  00389	6a 19		 push	 25			; 00000019H
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5108 : 			buf[8] = getMapEffectBuf();

  00391	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5109 : 			setEffectStar(buf[8], 26, 18,   4,  -8, 0);

  00396	6a 00		 push	 0
  00398	6a f8		 push	 -8			; fffffff8H
  0039a	6a 04		 push	 4
  0039c	6a 12		 push	 18			; 00000012H
  0039e	6a 1a		 push	 26			; 0000001aH
  003a0	50		 push	 eax
  003a1	a3 20 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+32, eax
  003a6	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  003ab	83 c4 48	 add	 esp, 72			; 00000048H

; 5110 : 			buf[9] = getMapEffectBuf();

  003ae	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5111 : 			setEffectStar(buf[9], 28, 16, -16,   0, 0);

  003b3	6a 00		 push	 0
  003b5	6a 00		 push	 0
  003b7	6a f0		 push	 -16			; fffffff0H
  003b9	6a 10		 push	 16			; 00000010H
  003bb	6a 1c		 push	 28			; 0000001cH
  003bd	50		 push	 eax
  003be	a3 24 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+36, eax
  003c3	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5112 : 
; 5113 : 			buf[10] = getMapEffectBuf();

  003c8	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5114 : 			setEffectStar(buf[10], 21, 14,  -5,   0, 1);

  003cd	6a 01		 push	 1
  003cf	6a 00		 push	 0
  003d1	6a fb		 push	 -5			; fffffffbH
  003d3	6a 0e		 push	 14			; 0000000eH
  003d5	6a 15		 push	 21			; 00000015H
  003d7	50		 push	 eax
  003d8	a3 28 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+40, eax
  003dd	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5115 : 			buf[11] = getMapEffectBuf();

  003e2	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5116 : 			setEffectStar(buf[11], 27, 14,   0,   0, 1);

  003e7	6a 01		 push	 1
  003e9	6a 00		 push	 0
  003eb	6a 00		 push	 0
  003ed	6a 0e		 push	 14			; 0000000eH
  003ef	6a 1b		 push	 27			; 0000001bH
  003f1	50		 push	 eax
  003f2	a3 2c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+44, eax
  003f7	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  003fc	83 c4 48	 add	 esp, 72			; 00000048H

; 5117 : 			buf[12] = getMapEffectBuf();

  003ff	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5118 : 			setEffectStar(buf[12], 24, 15,   4, -10, 1);

  00404	6a 01		 push	 1
  00406	6a f6		 push	 -10			; fffffff6H
  00408	6a 04		 push	 4
  0040a	6a 0f		 push	 15			; 0000000fH
  0040c	6a 18		 push	 24			; 00000018H
  0040e	50		 push	 eax
  0040f	a3 30 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+48, eax
  00414	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5119 : 			buf[13] = getMapEffectBuf();

  00419	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5120 : 			setEffectStar(buf[13], 28, 12,   5,  -8, 0);

  0041e	6a 00		 push	 0
  00420	6a f8		 push	 -8			; fffffff8H
  00422	6a 05		 push	 5
  00424	6a 0c		 push	 12			; 0000000cH
  00426	6a 1c		 push	 28			; 0000001cH
  00428	50		 push	 eax
  00429	a3 34 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+52, eax
  0042e	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5121 : 			buf[14] = getMapEffectBuf();

  00433	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5122 : 			setEffectStar(buf[14], 32, 14,   0,   0, 0);

  00438	6a 00		 push	 0
  0043a	6a 00		 push	 0
  0043c	6a 00		 push	 0
  0043e	6a 0e		 push	 14			; 0000000eH
  00440	6a 20		 push	 32			; 00000020H
  00442	50		 push	 eax
  00443	a3 38 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+56, eax
  00448	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  0044d	83 c4 48	 add	 esp, 72			; 00000048H

; 5123 : 
; 5124 : 			buf[15] = getMapEffectBuf();

  00450	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5125 : 			setEffectStar(buf[15], 30, 17,   0,   0, 0);

  00455	6a 00		 push	 0
  00457	6a 00		 push	 0
  00459	6a 00		 push	 0
  0045b	6a 11		 push	 17			; 00000011H
  0045d	6a 1e		 push	 30			; 0000001eH
  0045f	50		 push	 eax
  00460	a3 3c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+60, eax
  00465	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5126 : 			buf[16] = getMapEffectBuf();

  0046a	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5127 : 			setEffectStar(buf[16], 32, 19,   0,   0, 1);

  0046f	6a 01		 push	 1
  00471	a3 40 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+64, eax
  00476	6a 00		 push	 0
  00478	6a 00		 push	 0
  0047a	6a 13		 push	 19			; 00000013H
  0047c	6a 20		 push	 32			; 00000020H
  0047e	50		 push	 eax
  0047f	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5128 : 			buf[17] = getMapEffectBuf();

  00484	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5129 : 			setEffectStar(buf[17], 36, 19,   5,   2, 1);

  00489	6a 01		 push	 1
  0048b	6a 02		 push	 2
  0048d	6a 05		 push	 5
  0048f	6a 13		 push	 19			; 00000013H
  00491	6a 24		 push	 36			; 00000024H
  00493	50		 push	 eax
  00494	a3 44 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+68, eax
  00499	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  0049e	83 c4 48	 add	 esp, 72			; 00000048H

; 5130 : 			buf[18] = getMapEffectBuf();

  004a1	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5131 : 			setEffectStar(buf[18], 34, 22,  -4,   4, 0);

  004a6	6a 00		 push	 0
  004a8	6a 04		 push	 4
  004aa	6a fc		 push	 -4			; fffffffcH
  004ac	6a 16		 push	 22			; 00000016H
  004ae	6a 22		 push	 34			; 00000022H
  004b0	50		 push	 eax
  004b1	a3 48 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+72, eax
  004b6	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5132 : 			buf[19] = getMapEffectBuf();

  004bb	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5133 : 			setEffectStar(buf[19], 36, 25,   1,   1, 0);

  004c0	6a 00		 push	 0
  004c2	6a 01		 push	 1
  004c4	6a 01		 push	 1
  004c6	6a 19		 push	 25			; 00000019H
  004c8	6a 24		 push	 36			; 00000024H
  004ca	50		 push	 eax
  004cb	a3 4c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+76, eax
  004d0	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5134 : 
; 5135 : 			buf[20] = getMapEffectBuf();

  004d5	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5136 : 			setEffectStar(buf[20], 39, 23,   0,   0, 0);

  004da	6a 00		 push	 0
  004dc	6a 00		 push	 0
  004de	6a 00		 push	 0
  004e0	6a 17		 push	 23			; 00000017H
  004e2	6a 27		 push	 39			; 00000027H
  004e4	50		 push	 eax
  004e5	a3 50 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+80, eax
  004ea	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  004ef	83 c4 48	 add	 esp, 72			; 00000048H

; 5137 : 			buf[21] = getMapEffectBuf();

  004f2	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5138 : 			setEffectStar(buf[21], 38, 25,  -8,   2, 1);

  004f7	6a 01		 push	 1
  004f9	6a 02		 push	 2
  004fb	6a f8		 push	 -8			; fffffff8H
  004fd	6a 19		 push	 25			; 00000019H
  004ff	6a 26		 push	 38			; 00000026H
  00501	50		 push	 eax
  00502	a3 54 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+84, eax
  00507	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5139 : 			buf[22] = getMapEffectBuf();

  0050c	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5140 : 			setEffectStar(buf[22], 40, 24,  -5,  -5, 1);

  00511	6a 01		 push	 1
  00513	6a fb		 push	 -5			; fffffffbH
  00515	6a fb		 push	 -5			; fffffffbH
  00517	6a 18		 push	 24			; 00000018H
  00519	6a 28		 push	 40			; 00000028H
  0051b	50		 push	 eax
  0051c	a3 58 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+88, eax
  00521	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5141 : 			buf[23] = getMapEffectBuf();

  00526	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5142 : 			setEffectStar(buf[23], 39, 27,   0,   0, 0);

  0052b	6a 00		 push	 0
  0052d	6a 00		 push	 0
  0052f	6a 00		 push	 0
  00531	6a 1b		 push	 27			; 0000001bH
  00533	6a 27		 push	 39			; 00000027H
  00535	50		 push	 eax
  00536	a3 5c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+92, eax
  0053b	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00540	83 c4 48	 add	 esp, 72			; 00000048H

; 5143 : 			buf[24] = getMapEffectBuf();

  00543	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5144 : 			setEffectStar(buf[24], 39, 30,   0,   0, 1);

  00548	6a 01		 push	 1
  0054a	6a 00		 push	 0
  0054c	6a 00		 push	 0
  0054e	6a 1e		 push	 30			; 0000001eH
  00550	6a 27		 push	 39			; 00000027H
  00552	50		 push	 eax
  00553	a3 60 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+96, eax
  00558	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5145 : 
; 5146 : 			buf[25] = getMapEffectBuf();

  0055d	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5147 : 			setEffectStar(buf[25], 43, 29,   0,   0, 0);

  00562	6a 00		 push	 0
  00564	6a 00		 push	 0
  00566	6a 00		 push	 0
  00568	6a 1d		 push	 29			; 0000001dH
  0056a	6a 2b		 push	 43			; 0000002bH
  0056c	50		 push	 eax
  0056d	a3 64 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+100, eax
  00572	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5148 : 			buf[26] = getMapEffectBuf();

  00577	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5149 : 			setEffectStar(buf[26], 42, 32,   2,   0, 0);

  0057c	6a 00		 push	 0
  0057e	6a 00		 push	 0
  00580	6a 02		 push	 2
  00582	6a 20		 push	 32			; 00000020H
  00584	6a 2a		 push	 42			; 0000002aH
  00586	50		 push	 eax
  00587	a3 68 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+104, eax
  0058c	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00591	83 c4 48	 add	 esp, 72			; 00000048H

; 5150 : 			buf[27] = getMapEffectBuf();

  00594	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5151 : 			setEffectStar(buf[27], 44, 33,   0,   0, 1);

  00599	6a 01		 push	 1
  0059b	6a 00		 push	 0
  0059d	6a 00		 push	 0
  0059f	6a 21		 push	 33			; 00000021H
  005a1	6a 2c		 push	 44			; 0000002cH
  005a3	50		 push	 eax
  005a4	a3 6c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+108, eax
  005a9	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5152 : 			buf[28] = getMapEffectBuf();

  005ae	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5153 : 			setEffectStar(buf[28], 43, 34,   8,   2, 0);

  005b3	6a 00		 push	 0
  005b5	6a 02		 push	 2
  005b7	6a 08		 push	 8
  005b9	6a 22		 push	 34			; 00000022H
  005bb	6a 2b		 push	 43			; 0000002bH
  005bd	50		 push	 eax
  005be	a3 70 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+112, eax
  005c3	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5154 : 			buf[29] = getMapEffectBuf();

  005c8	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5155 : 			setEffectStar(buf[29], 45, 36,   0,   0, 0);

  005cd	6a 00		 push	 0
  005cf	6a 00		 push	 0
  005d1	6a 00		 push	 0
  005d3	6a 24		 push	 36			; 00000024H
  005d5	6a 2d		 push	 45			; 0000002dH

; 5156 : 
; 5157 : 			mapEffectStarFlag = 1;
; 5158 : 		}

  005d7	e9 9d 06 00 00	 jmp	 $LN81@mapEffectS
$LN25@mapEffectS:

; 5159 : 		else if (nowFloor == 10920 && mapEffectStarFlag == 0)

  005dc	81 f9 a8 2a 00
	00		 cmp	 ecx, 10920		; 00002aa8H
  005e2	0f 85 1f 03 00
	00		 jne	 $LN27@mapEffectS
  005e8	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectStarFlag@@3FA, 0 ; mapEffectStarFlag
  005f0	0f 85 98 06 00
	00		 jne	 $LN29@mapEffectS

; 5160 : 		{
; 5161 : 			for (i = 0; i < sizeof(buf) / sizeof(void *); i++)

  005f6	0f 57 c0	 xorps	 xmm0, xmm0
  005f9	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A, xmm0
  00600	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+16, xmm0
  00607	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+32, xmm0
  0060e	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+48, xmm0
  00615	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+64, xmm0
  0061c	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+80, xmm0
  00623	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+96, xmm0
  0062a	66 0f d6 05 70
	00 00 00	 movq	 QWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+112, xmm0

; 5162 : 				buf[i] = NULL;
; 5163 : 			buf[0] = getMapEffectBuf();

  00632	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5164 : 			setEffectStar(buf[0], 71,  2,   0,   0, 1);

  00637	6a 01		 push	 1
  00639	6a 00		 push	 0
  0063b	6a 00		 push	 0
  0063d	6a 02		 push	 2
  0063f	6a 47		 push	 71			; 00000047H
  00641	50		 push	 eax
  00642	a3 00 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A, eax
  00647	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5165 : 			buf[1] = getMapEffectBuf();

  0064c	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5166 : 			setEffectStar(buf[1], 71,  5,   0,   0, 0);

  00651	6a 00		 push	 0
  00653	6a 00		 push	 0
  00655	6a 00		 push	 0
  00657	6a 05		 push	 5
  00659	6a 47		 push	 71			; 00000047H
  0065b	50		 push	 eax
  0065c	a3 04 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+4, eax
  00661	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5167 : 			buf[2] = getMapEffectBuf();

  00666	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5168 : 			setEffectStar(buf[2], 70,  7,   0,   0, 1);

  0066b	6a 01		 push	 1
  0066d	6a 00		 push	 0
  0066f	6a 00		 push	 0
  00671	6a 07		 push	 7
  00673	6a 46		 push	 70			; 00000046H
  00675	50		 push	 eax
  00676	a3 08 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+8, eax
  0067b	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00680	83 c4 48	 add	 esp, 72			; 00000048H

; 5169 : 			buf[3] = getMapEffectBuf();

  00683	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5170 : 			setEffectStar(buf[3], 73,  7,   0,   0, 1);

  00688	6a 01		 push	 1
  0068a	6a 00		 push	 0
  0068c	6a 00		 push	 0
  0068e	6a 07		 push	 7
  00690	6a 49		 push	 73			; 00000049H
  00692	50		 push	 eax
  00693	a3 0c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+12, eax
  00698	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5171 : 			buf[4] = getMapEffectBuf();

  0069d	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5172 : 			setEffectStar(buf[4], 75,  6,   0,   0, 0);

  006a2	6a 00		 push	 0
  006a4	6a 00		 push	 0
  006a6	6a 00		 push	 0
  006a8	6a 06		 push	 6
  006aa	6a 4b		 push	 75			; 0000004bH
  006ac	50		 push	 eax
  006ad	a3 10 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+16, eax
  006b2	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5173 : 
; 5174 : 			buf[5] = getMapEffectBuf();

  006b7	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5175 : 			setEffectStar(buf[5], 75,  9,   0,   0, 0);

  006bc	6a 00		 push	 0
  006be	6a 00		 push	 0
  006c0	6a 00		 push	 0
  006c2	6a 09		 push	 9
  006c4	6a 4b		 push	 75			; 0000004bH
  006c6	50		 push	 eax
  006c7	a3 14 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+20, eax
  006cc	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  006d1	83 c4 48	 add	 esp, 72			; 00000048H

; 5176 : 			buf[6] = getMapEffectBuf();

  006d4	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5177 : 			setEffectStar(buf[6], 75, 11,   0,   0, 1);

  006d9	6a 01		 push	 1
  006db	6a 00		 push	 0
  006dd	6a 00		 push	 0
  006df	6a 0b		 push	 11			; 0000000bH
  006e1	6a 4b		 push	 75			; 0000004bH
  006e3	50		 push	 eax
  006e4	a3 18 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+24, eax
  006e9	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5178 : 			buf[7] = getMapEffectBuf();

  006ee	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5179 : 			setEffectStar(buf[7], 77,  9,   0,   0, 1);

  006f3	6a 01		 push	 1
  006f5	6a 00		 push	 0
  006f7	6a 00		 push	 0
  006f9	6a 09		 push	 9
  006fb	a3 1c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+28, eax
  00700	6a 4d		 push	 77			; 0000004dH
  00702	50		 push	 eax
  00703	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5180 : 			buf[8] = getMapEffectBuf();

  00708	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5181 : 			setEffectStar(buf[8], 76, 13,   0,   0, 0);

  0070d	6a 00		 push	 0
  0070f	6a 00		 push	 0
  00711	6a 00		 push	 0
  00713	6a 0d		 push	 13			; 0000000dH
  00715	6a 4c		 push	 76			; 0000004cH
  00717	50		 push	 eax
  00718	a3 20 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+32, eax
  0071d	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00722	83 c4 48	 add	 esp, 72			; 00000048H

; 5182 : 			buf[9] = getMapEffectBuf();

  00725	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5183 : 			setEffectStar(buf[9], 79, 12,   0,   0, 0);

  0072a	6a 00		 push	 0
  0072c	6a 00		 push	 0
  0072e	6a 00		 push	 0
  00730	6a 0c		 push	 12			; 0000000cH
  00732	6a 4f		 push	 79			; 0000004fH
  00734	50		 push	 eax
  00735	a3 24 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+36, eax
  0073a	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5184 : 
; 5185 : 			buf[10] = getMapEffectBuf();

  0073f	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5186 : 			setEffectStar(buf[10], 78, 15,   0,   0, 1);

  00744	6a 01		 push	 1
  00746	6a 00		 push	 0
  00748	6a 00		 push	 0
  0074a	6a 0f		 push	 15			; 0000000fH
  0074c	6a 4e		 push	 78			; 0000004eH
  0074e	50		 push	 eax
  0074f	a3 28 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+40, eax
  00754	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5187 : 			buf[11] = getMapEffectBuf();

  00759	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5188 : 			setEffectStar(buf[11], 80, 14,   0,   0, 0);

  0075e	6a 00		 push	 0
  00760	6a 00		 push	 0
  00762	6a 00		 push	 0
  00764	6a 0e		 push	 14			; 0000000eH
  00766	6a 50		 push	 80			; 00000050H
  00768	50		 push	 eax
  00769	a3 2c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+44, eax
  0076e	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00773	83 c4 48	 add	 esp, 72			; 00000048H

; 5189 : 			buf[12] = getMapEffectBuf();

  00776	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5190 : 			setEffectStar(buf[12], 79, 16,   0,   0, 1);

  0077b	6a 01		 push	 1
  0077d	6a 00		 push	 0
  0077f	6a 00		 push	 0
  00781	6a 10		 push	 16			; 00000010H
  00783	6a 4f		 push	 79			; 0000004fH
  00785	50		 push	 eax
  00786	a3 30 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+48, eax
  0078b	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5191 : 			buf[13] = getMapEffectBuf();

  00790	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5192 : 			setEffectStar(buf[13], 80, 18,   0,   0, 0);

  00795	6a 00		 push	 0
  00797	6a 00		 push	 0
  00799	6a 00		 push	 0
  0079b	6a 12		 push	 18			; 00000012H
  0079d	6a 50		 push	 80			; 00000050H
  0079f	50		 push	 eax
  007a0	a3 34 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+52, eax
  007a5	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5193 : 			buf[14] = getMapEffectBuf();

  007aa	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5194 : 			setEffectStar(buf[14], 83, 18,   0,   0, 0);

  007af	6a 00		 push	 0
  007b1	6a 00		 push	 0
  007b3	6a 00		 push	 0
  007b5	6a 12		 push	 18			; 00000012H
  007b7	6a 53		 push	 83			; 00000053H
  007b9	50		 push	 eax
  007ba	a3 38 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+56, eax
  007bf	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  007c4	83 c4 48	 add	 esp, 72			; 00000048H

; 5195 : 
; 5196 : 			buf[15] = getMapEffectBuf();

  007c7	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5197 : 			setEffectStar(buf[15], 83, 20,   0,   0, 1);

  007cc	6a 01		 push	 1
  007ce	6a 00		 push	 0
  007d0	6a 00		 push	 0
  007d2	6a 14		 push	 20			; 00000014H
  007d4	6a 53		 push	 83			; 00000053H
  007d6	50		 push	 eax
  007d7	a3 3c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+60, eax
  007dc	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5198 : 			buf[16] = getMapEffectBuf();

  007e1	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5199 : 			setEffectStar(buf[16], 84, 20,   0,   0, 1);

  007e6	6a 01		 push	 1
  007e8	a3 40 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+64, eax
  007ed	6a 00		 push	 0
  007ef	6a 00		 push	 0
  007f1	6a 14		 push	 20			; 00000014H
  007f3	6a 54		 push	 84			; 00000054H
  007f5	50		 push	 eax
  007f6	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5200 : 			buf[17] = getMapEffectBuf();

  007fb	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5201 : 			setEffectStar(buf[17], 84, 22,   0,   0, 0);

  00800	6a 00		 push	 0
  00802	6a 00		 push	 0
  00804	6a 00		 push	 0
  00806	6a 16		 push	 22			; 00000016H
  00808	6a 54		 push	 84			; 00000054H
  0080a	50		 push	 eax
  0080b	a3 44 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+68, eax
  00810	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00815	83 c4 48	 add	 esp, 72			; 00000048H

; 5202 : 			buf[18] = getMapEffectBuf();

  00818	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5203 : 			setEffectStar(buf[18], 85, 19,   0,   0, 0);

  0081d	6a 00		 push	 0
  0081f	6a 00		 push	 0
  00821	6a 00		 push	 0
  00823	6a 13		 push	 19			; 00000013H
  00825	6a 55		 push	 85			; 00000055H
  00827	50		 push	 eax
  00828	a3 48 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+72, eax
  0082d	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5204 : 			buf[19] = getMapEffectBuf();

  00832	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5205 : 			setEffectStar(buf[19], 87, 20,   0,   0, 1);

  00837	6a 01		 push	 1
  00839	6a 00		 push	 0
  0083b	6a 00		 push	 0
  0083d	6a 14		 push	 20			; 00000014H
  0083f	6a 57		 push	 87			; 00000057H
  00841	50		 push	 eax
  00842	a3 4c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+76, eax
  00847	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5206 : 
; 5207 : 			buf[20] = getMapEffectBuf();

  0084c	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5208 : 			setEffectStar(buf[20], 89, 21,   0,   0, 0);

  00851	6a 00		 push	 0
  00853	6a 00		 push	 0
  00855	6a 00		 push	 0
  00857	6a 15		 push	 21			; 00000015H
  00859	6a 59		 push	 89			; 00000059H
  0085b	50		 push	 eax
  0085c	a3 50 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+80, eax
  00861	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00866	83 c4 48	 add	 esp, 72			; 00000048H

; 5209 : 			buf[21] = getMapEffectBuf();

  00869	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5210 : 			setEffectStar(buf[21], 89, 23,   0,   0, 1);

  0086e	6a 01		 push	 1
  00870	6a 00		 push	 0
  00872	6a 00		 push	 0
  00874	6a 17		 push	 23			; 00000017H
  00876	6a 59		 push	 89			; 00000059H
  00878	50		 push	 eax
  00879	a3 54 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+84, eax
  0087e	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5211 : 			buf[22] = getMapEffectBuf();

  00883	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5212 : 			setEffectStar(buf[22], 89, 26,   0,   0, 1);

  00888	6a 01		 push	 1
  0088a	6a 00		 push	 0
  0088c	6a 00		 push	 0
  0088e	6a 1a		 push	 26			; 0000001aH
  00890	6a 59		 push	 89			; 00000059H
  00892	50		 push	 eax
  00893	a3 58 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+88, eax
  00898	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5213 : 			buf[23] = getMapEffectBuf();

  0089d	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5214 : 			setEffectStar(buf[23], 91, 25,   0,   0, 0);

  008a2	6a 00		 push	 0
  008a4	6a 00		 push	 0
  008a6	6a 00		 push	 0
  008a8	6a 19		 push	 25			; 00000019H
  008aa	6a 5b		 push	 91			; 0000005bH
  008ac	50		 push	 eax
  008ad	a3 5c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+92, eax
  008b2	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  008b7	83 c4 48	 add	 esp, 72			; 00000048H

; 5215 : 			buf[24] = getMapEffectBuf();

  008ba	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5216 : 			setEffectStar(buf[24], 91, 27,   0,   0, 1);

  008bf	6a 01		 push	 1
  008c1	6a 00		 push	 0
  008c3	6a 00		 push	 0
  008c5	6a 1b		 push	 27			; 0000001bH
  008c7	6a 5b		 push	 91			; 0000005bH
  008c9	50		 push	 eax
  008ca	a3 60 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+96, eax
  008cf	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5217 : 
; 5218 : 			buf[25] = getMapEffectBuf();

  008d4	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5219 : 			setEffectStar(buf[25], 93, 26,   0,   0, 1);

  008d9	6a 01		 push	 1
  008db	6a 00		 push	 0
  008dd	6a 00		 push	 0
  008df	6a 1a		 push	 26			; 0000001aH
  008e1	6a 5d		 push	 93			; 0000005dH
  008e3	50		 push	 eax
  008e4	a3 64 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+100, eax
  008e9	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5220 : 			buf[26] = getMapEffectBuf();

  008ee	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5221 : 			setEffectStar(buf[26], 93, 30,   0,   0, 0);

  008f3	6a 00		 push	 0
  008f5	6a 00		 push	 0
  008f7	6a 00		 push	 0
  008f9	6a 1e		 push	 30			; 0000001eH
  008fb	a3 68 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+104, eax
  00900	6a 5d		 push	 93			; 0000005dH

; 5222 : 
; 5223 : 			mapEffectStarFlag = 1;
; 5224 : 		}

  00902	e9 77 03 00 00	 jmp	 $LN82@mapEffectS
$LN27@mapEffectS:

; 5225 : 		else if (nowFloor == 20406 && mapEffectStarFlag == 0)

  00907	81 f9 b6 4f 00
	00		 cmp	 ecx, 20406		; 00004fb6H
  0090d	0f 85 7b 03 00
	00		 jne	 $LN29@mapEffectS
  00913	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectStarFlag@@3FA, 0 ; mapEffectStarFlag
  0091b	0f 85 6d 03 00
	00		 jne	 $LN29@mapEffectS

; 5226 : 		{
; 5227 : 			for (i = 0; i < sizeof(buf) / sizeof(void *); i++)

  00921	0f 57 c0	 xorps	 xmm0, xmm0
  00924	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A, xmm0
  0092b	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+16, xmm0
  00932	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+32, xmm0
  00939	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+48, xmm0
  00940	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+64, xmm0
  00947	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+80, xmm0
  0094e	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+96, xmm0
  00955	66 0f d6 05 70
	00 00 00	 movq	 QWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+112, xmm0

; 5228 : 				buf[i] = NULL;
; 5229 : 			buf[0] = getMapEffectBuf();

  0095d	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5230 : 			setEffectStar(buf[0], 16,  8,   0,   0, 1);

  00962	6a 01		 push	 1
  00964	6a 00		 push	 0
  00966	6a 00		 push	 0
  00968	6a 08		 push	 8
  0096a	6a 10		 push	 16			; 00000010H
  0096c	50		 push	 eax
  0096d	a3 00 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A, eax
  00972	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5231 : 			buf[1] = getMapEffectBuf();

  00977	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5232 : 			setEffectStar(buf[1], 16, 10,   0,   0, 0);

  0097c	6a 00		 push	 0
  0097e	6a 00		 push	 0
  00980	6a 00		 push	 0
  00982	6a 0a		 push	 10			; 0000000aH
  00984	6a 10		 push	 16			; 00000010H
  00986	50		 push	 eax
  00987	a3 04 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+4, eax
  0098c	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5233 : 			buf[2] = getMapEffectBuf();

  00991	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5234 : 			setEffectStar(buf[2], 18, 10,   0,   0, 0);

  00996	6a 00		 push	 0
  00998	6a 00		 push	 0
  0099a	6a 00		 push	 0
  0099c	6a 0a		 push	 10			; 0000000aH
  0099e	6a 12		 push	 18			; 00000012H
  009a0	50		 push	 eax
  009a1	a3 08 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+8, eax
  009a6	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  009ab	83 c4 48	 add	 esp, 72			; 00000048H

; 5235 : 			buf[3] = getMapEffectBuf();

  009ae	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5236 : 			setEffectStar(buf[3], 19, 12,   0,   0, 1);

  009b3	6a 01		 push	 1
  009b5	6a 00		 push	 0
  009b7	6a 00		 push	 0
  009b9	6a 0c		 push	 12			; 0000000cH
  009bb	6a 13		 push	 19			; 00000013H
  009bd	50		 push	 eax
  009be	a3 0c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+12, eax
  009c3	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5237 : 			buf[4] = getMapEffectBuf();

  009c8	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5238 : 			setEffectStar(buf[4], 20, 12,   0,   0, 1);

  009cd	6a 01		 push	 1
  009cf	6a 00		 push	 0
  009d1	6a 00		 push	 0
  009d3	6a 0c		 push	 12			; 0000000cH
  009d5	6a 14		 push	 20			; 00000014H
  009d7	50		 push	 eax
  009d8	a3 10 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+16, eax
  009dd	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5239 : 
; 5240 : 			buf[5] = getMapEffectBuf();

  009e2	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5241 : 			setEffectStar(buf[5], 21, 14,   0,   0, 0);

  009e7	6a 00		 push	 0
  009e9	6a 00		 push	 0
  009eb	6a 00		 push	 0
  009ed	6a 0e		 push	 14			; 0000000eH
  009ef	6a 15		 push	 21			; 00000015H
  009f1	50		 push	 eax
  009f2	a3 14 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+20, eax
  009f7	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  009fc	83 c4 48	 add	 esp, 72			; 00000048H

; 5242 : 			buf[6] = getMapEffectBuf();

  009ff	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5243 : 			setEffectStar(buf[6], 22, 16,   0,   0, 0);

  00a04	6a 00		 push	 0
  00a06	6a 00		 push	 0
  00a08	6a 00		 push	 0
  00a0a	6a 10		 push	 16			; 00000010H
  00a0c	6a 16		 push	 22			; 00000016H
  00a0e	50		 push	 eax
  00a0f	a3 18 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+24, eax
  00a14	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5244 : 			buf[7] = getMapEffectBuf();

  00a19	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5245 : 			setEffectStar(buf[7], 23, 16,   0,   0, 1);

  00a1e	6a 01		 push	 1
  00a20	6a 00		 push	 0
  00a22	6a 00		 push	 0
  00a24	6a 10		 push	 16			; 00000010H
  00a26	a3 1c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+28, eax
  00a2b	6a 17		 push	 23			; 00000017H
  00a2d	50		 push	 eax
  00a2e	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5246 : 			buf[8] = getMapEffectBuf();

  00a33	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5247 : 			setEffectStar(buf[8], 22, 11,   0,   0, 0);

  00a38	6a 00		 push	 0
  00a3a	6a 00		 push	 0
  00a3c	6a 00		 push	 0
  00a3e	6a 0b		 push	 11			; 0000000bH
  00a40	6a 16		 push	 22			; 00000016H
  00a42	50		 push	 eax
  00a43	a3 20 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+32, eax
  00a48	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00a4d	83 c4 48	 add	 esp, 72			; 00000048H

; 5248 : 			buf[9] = getMapEffectBuf();

  00a50	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5249 : 			setEffectStar(buf[9], 26, 15,   0,   0, 0);

  00a55	6a 00		 push	 0
  00a57	6a 00		 push	 0
  00a59	6a 00		 push	 0
  00a5b	6a 0f		 push	 15			; 0000000fH
  00a5d	6a 1a		 push	 26			; 0000001aH
  00a5f	50		 push	 eax
  00a60	a3 24 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+36, eax
  00a65	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5250 : 
; 5251 : 			buf[10] = getMapEffectBuf();

  00a6a	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5252 : 			setEffectStar(buf[10], 25, 18,   0,   0, 1);

  00a6f	6a 01		 push	 1
  00a71	6a 00		 push	 0
  00a73	6a 00		 push	 0
  00a75	6a 12		 push	 18			; 00000012H
  00a77	6a 19		 push	 25			; 00000019H
  00a79	50		 push	 eax
  00a7a	a3 28 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+40, eax
  00a7f	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5253 : 			buf[11] = getMapEffectBuf();

  00a84	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5254 : 			setEffectStar(buf[11], 26, 17,   0,   0, 1);

  00a89	6a 01		 push	 1
  00a8b	6a 00		 push	 0
  00a8d	6a 00		 push	 0
  00a8f	6a 11		 push	 17			; 00000011H
  00a91	6a 1a		 push	 26			; 0000001aH
  00a93	50		 push	 eax
  00a94	a3 2c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+44, eax
  00a99	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00a9e	83 c4 48	 add	 esp, 72			; 00000048H

; 5255 : 			buf[12] = getMapEffectBuf();

  00aa1	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5256 : 			setEffectStar(buf[12], 27, 13,   0,   0, 0);

  00aa6	6a 00		 push	 0
  00aa8	6a 00		 push	 0
  00aaa	6a 00		 push	 0
  00aac	6a 0d		 push	 13			; 0000000dH
  00aae	6a 1b		 push	 27			; 0000001bH
  00ab0	50		 push	 eax
  00ab1	a3 30 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+48, eax
  00ab6	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5257 : 			buf[13] = getMapEffectBuf();

  00abb	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5258 : 			setEffectStar(buf[13], 29, 14,   0,   0, 1);

  00ac0	6a 01		 push	 1
  00ac2	6a 00		 push	 0
  00ac4	6a 00		 push	 0
  00ac6	6a 0e		 push	 14			; 0000000eH
  00ac8	6a 1d		 push	 29			; 0000001dH
  00aca	50		 push	 eax
  00acb	a3 34 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+52, eax
  00ad0	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5259 : 			buf[14] = getMapEffectBuf();

  00ad5	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5260 : 			setEffectStar(buf[14], 29, 12,   0,   0, 1);

  00ada	6a 01		 push	 1
  00adc	6a 00		 push	 0
  00ade	6a 00		 push	 0
  00ae0	6a 0c		 push	 12			; 0000000cH
  00ae2	6a 1d		 push	 29			; 0000001dH
  00ae4	50		 push	 eax
  00ae5	a3 38 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+56, eax
  00aea	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00aef	83 c4 48	 add	 esp, 72			; 00000048H

; 5261 : 
; 5262 : 			buf[15] = getMapEffectBuf();

  00af2	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5263 : 			setEffectStar(buf[15], 31, 17,   0,   0, 0);

  00af7	6a 00		 push	 0
  00af9	6a 00		 push	 0
  00afb	6a 00		 push	 0
  00afd	6a 11		 push	 17			; 00000011H
  00aff	6a 1f		 push	 31			; 0000001fH
  00b01	50		 push	 eax
  00b02	a3 3c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+60, eax
  00b07	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5264 : 			buf[16] = getMapEffectBuf();

  00b0c	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5265 : 			setEffectStar(buf[16], 31, 19,   0,   0, 1);

  00b11	6a 01		 push	 1
  00b13	a3 40 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+64, eax
  00b18	6a 00		 push	 0
  00b1a	6a 00		 push	 0
  00b1c	6a 13		 push	 19			; 00000013H
  00b1e	6a 1f		 push	 31			; 0000001fH
  00b20	50		 push	 eax
  00b21	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5266 : 			buf[17] = getMapEffectBuf();

  00b26	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5267 : 			setEffectStar(buf[17], 34, 18,   0,   0, 1);

  00b2b	6a 01		 push	 1
  00b2d	6a 00		 push	 0
  00b2f	6a 00		 push	 0
  00b31	6a 12		 push	 18			; 00000012H
  00b33	6a 22		 push	 34			; 00000022H
  00b35	50		 push	 eax
  00b36	a3 44 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+68, eax
  00b3b	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00b40	83 c4 48	 add	 esp, 72			; 00000048H

; 5268 : 			buf[18] = getMapEffectBuf();

  00b43	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5269 : 			setEffectStar(buf[18], 33, 21,   0,   0, 1);

  00b48	6a 01		 push	 1
  00b4a	6a 00		 push	 0
  00b4c	6a 00		 push	 0
  00b4e	6a 15		 push	 21			; 00000015H
  00b50	6a 21		 push	 33			; 00000021H
  00b52	50		 push	 eax
  00b53	a3 48 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+72, eax
  00b58	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5270 : 			buf[19] = getMapEffectBuf();

  00b5d	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5271 : 			setEffectStar(buf[19], 34, 23,   0,   0, 0);

  00b62	6a 00		 push	 0
  00b64	6a 00		 push	 0
  00b66	6a 00		 push	 0
  00b68	6a 17		 push	 23			; 00000017H
  00b6a	6a 22		 push	 34			; 00000022H
  00b6c	50		 push	 eax
  00b6d	a3 4c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+76, eax
  00b72	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5272 : 
; 5273 : 			buf[20] = getMapEffectBuf();

  00b77	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5274 : 			setEffectStar(buf[20], 38, 26,   0,   0, 0);

  00b7c	6a 00		 push	 0
  00b7e	6a 00		 push	 0
  00b80	6a 00		 push	 0
  00b82	6a 1a		 push	 26			; 0000001aH
  00b84	6a 26		 push	 38			; 00000026H
  00b86	50		 push	 eax
  00b87	a3 50 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+80, eax
  00b8c	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00b91	83 c4 48	 add	 esp, 72			; 00000048H

; 5275 : 			buf[21] = getMapEffectBuf();

  00b94	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5276 : 			setEffectStar(buf[21], 41, 25,   0,   0, 1);

  00b99	6a 01		 push	 1
  00b9b	6a 00		 push	 0
  00b9d	6a 00		 push	 0
  00b9f	6a 19		 push	 25			; 00000019H
  00ba1	6a 29		 push	 41			; 00000029H
  00ba3	50		 push	 eax
  00ba4	a3 54 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+84, eax
  00ba9	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5277 : 			buf[22] = getMapEffectBuf();

  00bae	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5278 : 			setEffectStar(buf[22], 41, 26,   0,   0, 1);

  00bb3	6a 01		 push	 1
  00bb5	6a 00		 push	 0
  00bb7	6a 00		 push	 0
  00bb9	6a 1a		 push	 26			; 0000001aH
  00bbb	6a 29		 push	 41			; 00000029H
  00bbd	50		 push	 eax
  00bbe	a3 58 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+88, eax
  00bc3	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5279 : 			buf[23] = getMapEffectBuf();

  00bc8	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5280 : 			setEffectStar(buf[23], 41, 32,   0,   0, 0);

  00bcd	6a 00		 push	 0
  00bcf	6a 00		 push	 0
  00bd1	6a 00		 push	 0
  00bd3	6a 20		 push	 32			; 00000020H
  00bd5	6a 29		 push	 41			; 00000029H
  00bd7	50		 push	 eax
  00bd8	a3 5c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+92, eax
  00bdd	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00be2	83 c4 48	 add	 esp, 72			; 00000048H

; 5281 : 			buf[24] = getMapEffectBuf();

  00be5	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5282 : 			setEffectStar(buf[24], 44, 31,   0,   0, 0);

  00bea	6a 00		 push	 0
  00bec	6a 00		 push	 0
  00bee	6a 00		 push	 0
  00bf0	6a 1f		 push	 31			; 0000001fH
  00bf2	6a 2c		 push	 44			; 0000002cH
  00bf4	50		 push	 eax
  00bf5	a3 60 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+96, eax
  00bfa	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5283 : 
; 5284 : 			buf[25] = getMapEffectBuf();

  00bff	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5285 : 			setEffectStar(buf[25], 44, 33,   0,   0, 0);

  00c04	6a 00		 push	 0
  00c06	6a 00		 push	 0
  00c08	6a 00		 push	 0
  00c0a	6a 21		 push	 33			; 00000021H
  00c0c	6a 2c		 push	 44			; 0000002cH
  00c0e	50		 push	 eax
  00c0f	a3 64 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+100, eax
  00c14	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5286 : 			buf[26] = getMapEffectBuf();

  00c19	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5287 : 			setEffectStar(buf[26], 42, 43,   0,   0, 1);

  00c1e	6a 01		 push	 1
  00c20	6a 00		 push	 0
  00c22	6a 00		 push	 0
  00c24	6a 2b		 push	 43			; 0000002bH
  00c26	6a 2a		 push	 42			; 0000002aH
  00c28	50		 push	 eax
  00c29	a3 68 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+104, eax
  00c2e	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00c33	83 c4 48	 add	 esp, 72			; 00000048H

; 5288 : 			buf[27] = getMapEffectBuf();

  00c36	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5289 : 			setEffectStar(buf[27], 45, 36,   0,   0, 0);

  00c3b	6a 00		 push	 0
  00c3d	6a 00		 push	 0
  00c3f	6a 00		 push	 0
  00c41	6a 24		 push	 36			; 00000024H
  00c43	6a 2d		 push	 45			; 0000002dH
  00c45	50		 push	 eax
  00c46	a3 6c 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+108, eax
  00c4b	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5290 : 			buf[28] = getMapEffectBuf();

  00c50	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5291 : 			setEffectStar(buf[28], 38, 21,   0,   0, 0);

  00c55	6a 00		 push	 0
  00c57	6a 00		 push	 0
  00c59	6a 00		 push	 0
  00c5b	6a 15		 push	 21			; 00000015H
  00c5d	6a 26		 push	 38			; 00000026H
  00c5f	50		 push	 eax
  00c60	a3 70 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+112, eax
  00c65	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar

; 5292 : 			buf[29] = getMapEffectBuf();

  00c6a	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf

; 5293 : 			setEffectStar(buf[29], 37, 19,   0,   0, 1);

  00c6f	6a 01		 push	 1
  00c71	6a 00		 push	 0
  00c73	6a 00		 push	 0
  00c75	6a 13		 push	 19			; 00000013H
  00c77	6a 25		 push	 37			; 00000025H
$LN81@mapEffectS:

; 5294 : 
; 5295 : 			mapEffectStarFlag = 1;
; 5296 : 		}
; 5297 : 		for (i = 0; i < sizeof(buf) / sizeof(void*); i++)

  00c79	a3 74 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A+116, eax
$LN82@mapEffectS:
  00c7e	50		 push	 eax
  00c7f	e8 00 00 00 00	 call	 ?setEffectStar@@YAXPAU_MAP_EFFECT@@HHHHH@Z ; setEffectStar
  00c84	83 c4 48	 add	 esp, 72			; 00000048H
$LN80@mapEffectS:
  00c87	66 89 1d 00 00
	00 00		 mov	 WORD PTR ?mapEffectStarFlag@@3FA, bx ; mapEffectStarFlag
$LN29@mapEffectS:
  00c8e	33 ff		 xor	 edi, edi
  00c90	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  00c93	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL16@mapEffectS:

; 5298 : 		{
; 5299 : 			if (buf[i])

  00ca0	8b b7 00 00 00
	00		 mov	 esi, DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A[edi]
  00ca6	85 f6		 test	 esi, esi
  00ca8	0f 84 c7 00 00
	00		 je	 $LN78@mapEffectS

; 5300 : 			{
; 5301 : 				calEffectStar(buf[i]);

  00cae	56		 push	 esi
  00caf	e8 00 00 00 00	 call	 ?calEffectStar@@YAXPAU_MAP_EFFECT@@@Z ; calEffectStar

; 5302 : 				// ????
; 5303 : 				// ???
; 5304 : 				if (SaTime.hour < NOON_TO_EVENING + 20 || NIGHT_TO_MORNING + 70 < SaTime.hour)

  00cb4	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?SaTime@@3UtagLSTIME@@A+8
  00cba	83 c4 04	 add	 esp, 4
  00cbd	8d 81 24 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-220]
  00cc3	3d 26 02 00 00	 cmp	 eax, 550		; 00000226H
  00cc8	0f 87 9e 00 00
	00		 ja	 $LN33@mapEffectS

; 5306 : 				// ????
; 5307 : 				// ???
; 5308 : 				else if ((NOON_TO_EVENING + 20 <= SaTime.hour && SaTime.hour < NOON_TO_EVENING +30) || NIGHT_TO_MORNING + 60 < SaTime.hour)

  00cce	81 f9 dc 00 00
	00		 cmp	 ecx, 220		; 000000dcH
  00cd4	7c 08		 jl	 SHORT $LN37@mapEffectS
  00cd6	81 f9 e6 00 00
	00		 cmp	 ecx, 230		; 000000e6H
  00cdc	7c 08		 jl	 SHORT $LN36@mapEffectS
$LN37@mapEffectS:
  00cde	81 f9 f8 02 00
	00		 cmp	 ecx, 760		; 000002f8H
  00ce4	7e 0a		 jle	 SHORT $LN34@mapEffectS
$LN36@mapEffectS:

; 5309 : 					buf[i]->mode = 6;

  00ce6	b8 06 00 00 00	 mov	 eax, 6
  00ceb	e9 81 00 00 00	 jmp	 $LN83@mapEffectS
$LN34@mapEffectS:

; 5310 : 				// ????
; 5311 : 				// ???
; 5312 : 				else if ((NOON_TO_EVENING + 30 <= SaTime.hour && SaTime.hour < NOON_TO_EVENING + 40) || NIGHT_TO_MORNING + 40 < SaTime.hour)

  00cf0	81 f9 e6 00 00
	00		 cmp	 ecx, 230		; 000000e6H
  00cf6	7c 08		 jl	 SHORT $LN41@mapEffectS
  00cf8	81 f9 f0 00 00
	00		 cmp	 ecx, 240		; 000000f0H
  00cfe	7c 08		 jl	 SHORT $LN40@mapEffectS
$LN41@mapEffectS:
  00d00	81 f9 e4 02 00
	00		 cmp	 ecx, 740		; 000002e4H
  00d06	7e 06		 jle	 SHORT $LN38@mapEffectS
$LN40@mapEffectS:

; 5313 : 					buf[i]->mode = 8;

  00d08	66 89 5e 40	 mov	 WORD PTR [esi+64], bx
  00d0c	eb 67		 jmp	 SHORT $LN78@mapEffectS
$LN38@mapEffectS:

; 5314 : 				else
; 5315 : 				{
; 5316 : 					if (buf[i]->type2 == 0)

  00d0e	0f b7 46 3e	 movzx	 eax, WORD PTR [esi+62]
  00d12	66 85 c0	 test	 ax, ax
  00d15	75 49		 jne	 SHORT $LN42@mapEffectS

; 5317 : 					{
; 5318 : 						// ???：??????
; 5319 : 						// ??：????????
; 5320 : 						if (SaTime.hour < NOON_TO_EVENING + 50 || NIGHT_TO_MORNING + 30 < SaTime.hour)

  00d17	8d 81 06 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-250]
  00d1d	3d e0 01 00 00	 cmp	 eax, 480		; 000001e0H
  00d22	77 35		 ja	 SHORT $LN46@mapEffectS

; 5322 : 						// ???：????????
; 5323 : 						// ??：??????
; 5324 : 						else if (SaTime.hour < NOON_TO_EVENING + 80 || NIGHT_TO_MORNING + 20 < SaTime.hour)

  00d24	8d 81 e8 fe ff
	ff		 lea	 eax, DWORD PTR [ecx-280]
  00d2a	3d b8 01 00 00	 cmp	 eax, 440		; 000001b8H
  00d2f	77 1d		 ja	 SHORT $LN49@mapEffectS

; 5326 : 						else
; 5327 : 							buf[i]->mode = (rand() % 2);

  00d31	e8 00 00 00 00	 call	 _rand
  00d36	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00d3b	79 05		 jns	 SHORT $LN79@mapEffectS
  00d3d	48		 dec	 eax
  00d3e	83 c8 fe	 or	 eax, -2			; fffffffeH
  00d41	40		 inc	 eax
$LN79@mapEffectS:
  00d42	8b 8f 00 00 00
	00		 mov	 ecx, DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A[edi]
  00d48	66 89 41 40	 mov	 WORD PTR [ecx+64], ax
  00d4c	eb 27		 jmp	 SHORT $LN78@mapEffectS
$LN49@mapEffectS:

; 5325 : 							buf[i]->mode = 1;

  00d4e	b8 01 00 00 00	 mov	 eax, 1
  00d53	66 89 46 40	 mov	 WORD PTR [esi+64], ax
  00d57	eb 21		 jmp	 SHORT $LN14@mapEffectS
$LN46@mapEffectS:

; 5321 : 							buf[i]->mode = 4;

  00d59	b8 04 00 00 00	 mov	 eax, 4

; 5328 : 					}

  00d5e	eb 11		 jmp	 SHORT $LN83@mapEffectS
$LN42@mapEffectS:

; 5329 : 					else if (buf[i]->type2 == 1)

  00d60	66 83 f8 01	 cmp	 ax, 1
  00d64	75 0f		 jne	 SHORT $LN78@mapEffectS

; 5330 : 						buf[i]->mode = 8;

  00d66	66 89 5e 40	 mov	 WORD PTR [esi+64], bx
  00d6a	eb 09		 jmp	 SHORT $LN78@mapEffectS
$LN33@mapEffectS:

; 5305 : 					buf[i]->mode = 5;

  00d6c	b8 05 00 00 00	 mov	 eax, 5
$LN83@mapEffectS:

; 5294 : 
; 5295 : 			mapEffectStarFlag = 1;
; 5296 : 		}
; 5297 : 		for (i = 0; i < sizeof(buf) / sizeof(void*); i++)

  00d71	66 89 46 40	 mov	 WORD PTR [esi+64], ax
$LN78@mapEffectS:
  00d75	b8 01 00 00 00	 mov	 eax, 1
$LN14@mapEffectS:
  00d7a	83 c7 04	 add	 edi, 4
  00d7d	83 ff 78	 cmp	 edi, 120		; 00000078H
  00d80	0f 82 1a ff ff
	ff		 jb	 $LL16@mapEffectS

; 5331 : 				}
; 5332 : 			}
; 5333 : 		}
; 5334 : 		mapEffectDrawFlag = 1;

  00d86	5f		 pop	 edi
  00d87	5b		 pop	 ebx
  00d88	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, ax ; mapEffectDrawFlag
  00d8e	5e		 pop	 esi

; 5346 : 		}
; 5347 : 	}
; 5348 : }

  00d8f	c3		 ret	 0
$LN20@mapEffectS:

; 5335 : 	}
; 5336 : 	else
; 5337 : 	{
; 5338 : 		if (mapEffectStarFlag)

  00d90	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectStarFlag@@3FA, 0 ; mapEffectStarFlag
  00d98	74 2e		 je	 SHORT $LN51@mapEffectS

; 5339 : 		{
; 5340 : 			for (i = 0; i < sizeof(buf) / sizeof(void*); i++)

  00d9a	33 f6		 xor	 esi, esi
  00d9c	0f 1f 40 00	 npad	 4
$LL19@mapEffectS:

; 5341 : 			{
; 5342 : 				delMapEffectBuf(buf[i]);

  00da0	ff b6 00 00 00
	00		 push	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A[esi]
  00da6	e8 00 00 00 00	 call	 ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ; delMapEffectBuf

; 5343 : 				buf[i] = NULL;

  00dab	c7 86 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?buf@?1??mapEffectStar@@YAXXZ@4PAPAU_MAP_EFFECT@@A[esi], 0
  00db5	83 c4 04	 add	 esp, 4
  00db8	83 c6 04	 add	 esi, 4
  00dbb	83 fe 78	 cmp	 esi, 120		; 00000078H
  00dbe	72 e0		 jb	 SHORT $LL19@mapEffectS

; 5344 : 			}
; 5345 : 			mapEffectStarFlag = 0;

  00dc0	33 c0		 xor	 eax, eax
  00dc2	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectStarFlag@@3FA, ax ; mapEffectStarFlag
$LN51@mapEffectS:

; 5346 : 		}
; 5347 : 	}
; 5348 : }

  00dc8	5e		 pop	 esi
  00dc9	c3		 ret	 0
?mapEffectStar@@YAXXZ ENDP				; mapEffectStar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectSnow@@YAXXZ
_TEXT	SEGMENT
_hh$1$ = -28						; size = 4
_hosei1$1$ = -24					; size = 4
_hosei2$1$ = -20					; size = 4
_ww$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?mapEffectSnow@@YAXXZ PROC				; mapEffectSnow, COMDAT

; 4902 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?mapEffectSnow@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 4903 : 	short mapEffectSnowWaitTime = 0;
; 4904 : 	short mapEffectSnowFrameMax = 0;
; 4905 : 	int hosei1 = 940;
; 4906 : 	int hosei2 = -200;
; 4907 : 	int ww = DEF_APPSIZEX;
; 4908 : 	int hh = DEF_APPSIZEY;
; 4909 : 	static unsigned int time = TimeGetTime();

  00028	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002e	bf ac 03 00 00	 mov	 edi, 940		; 000003acH
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  0003f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00045	89 7d e8	 mov	 DWORD PTR _hosei1$1$[ebp], edi
  00048	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??mapEffectSnow@@YAXXZ@4HA
  00050	c7 45 ec 38 ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -200 ; ffffff38H
  00057	89 55 f0	 mov	 DWORD PTR _ww$1$[ebp], edx
  0005a	89 5d e4	 mov	 DWORD PTR _hh$1$[ebp], ebx
  0005d	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00063	0f 8f 76 02 00
	00		 jg	 $LN54@mapEffectS
  00069	eb 03		 jmp	 SHORT $LN2@mapEffectS
$LN38@mapEffectS:

; 4910 : 	MAP_EFFECT *buf;
; 4911 : 	int i, j;
; 4912 : 	// ???????????????
; 4913 : 	if (ResoMode == 1)

  0006b	8b 55 f0	 mov	 edx, DWORD PTR _ww$1$[ebp]
$LN2@mapEffectS:
  0006e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00074	83 fe 01	 cmp	 esi, 1
  00077	75 19		 jne	 SHORT $LN8@mapEffectS

; 4914 : 	{
; 4915 : 		ww >>= 1;

  00079	d1 fa		 sar	 edx, 1

; 4916 : 		hh >>= 1;
; 4917 : 		hosei1 = 370;

  0007b	bf 72 01 00 00	 mov	 edi, 370		; 00000172H
  00080	d1 fb		 sar	 ebx, 1
  00082	89 55 f0	 mov	 DWORD PTR _ww$1$[ebp], edx
  00085	89 5d e4	 mov	 DWORD PTR _hh$1$[ebp], ebx
  00088	89 7d e8	 mov	 DWORD PTR _hosei1$1$[ebp], edi

; 4918 : 		hosei2 = -50;

  0008b	c7 45 ec ce ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -50 ; ffffffceH
$LN8@mapEffectS:

; 4919 : 	}
; 4920 : 	// 
; 4921 : 	if (mapEffectSnowLevel)

  00092	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?mapEffectSnowLevel@@3FA ; mapEffectSnowLevel
  00098	66 85 c0	 test	 ax, ax
  0009b	0f 84 c3 01 00
	00		 je	 $LN4@mapEffectS

; 4922 : 	{
; 4923 : 		if (mapEffectSnowLevel < 3)

  000a1	66 83 f8 03	 cmp	 ax, 3
  000a5	0f 8d da 00 00
	00		 jge	 $LN10@mapEffectS

; 4924 : 		{
; 4925 : 			mapEffectSnowWaitTime = (51 - 25 * mapEffectSnowLevel);

  000ab	98		 cwde
  000ac	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  000b1	6b c0 19	 imul	 eax, eax, 25
  000b4	66 2b c8	 sub	 cx, ax
  000b7	0f b7 f1	 movzx	 esi, cx

; 4926 : 			if (time + mapEffectSnowWaitTime < TimeGetTime())

  000ba	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000bf	0f bf ce	 movsx	 ecx, si
  000c2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?time@?1??mapEffectSnow@@YAXXZ@4IA
  000c8	3b c8		 cmp	 ecx, eax
  000ca	0f 83 94 01 00
	00		 jae	 $LN4@mapEffectS

; 4927 : 			{
; 4928 : 				MAP_EFFECT *buf = getMapEffectBuf();

  000d0	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  000d5	8b f0		 mov	 esi, eax

; 4929 : 				if (buf != (MAP_EFFECT*)NULL)

  000d7	85 f6		 test	 esi, esi
  000d9	0f 84 85 01 00
	00		 je	 $LN4@mapEffectS

; 4930 : 				{
; 4931 : 					buf->type = MAP_EFFECT_TYPE_SNOW;

  000df	b8 02 00 00 00	 mov	 eax, 2
  000e4	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 4932 : 					buf->x = (rand() % hosei1) + hosei2;

  000e8	e8 00 00 00 00	 call	 _rand
  000ed	99		 cdq
  000ee	f7 ff		 idiv	 edi

; 4933 : 					buf->y = 0;

  000f0	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000f7	03 55 ec	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  000fa	89 16		 mov	 DWORD PTR [esi], edx

; 4934 : 					buf->mode = (rand() % 2);

  000fc	e8 00 00 00 00	 call	 _rand
  00101	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00106	79 05		 jns	 SHORT $LN41@mapEffectS
  00108	48		 dec	 eax
  00109	83 c8 fe	 or	 eax, -2			; fffffffeH
  0010c	40		 inc	 eax
$LN41@mapEffectS:
  0010d	66 89 46 40	 mov	 WORD PTR [esi+64], ax

; 4935 : 					j = (rand() % 2);

  00111	e8 00 00 00 00	 call	 _rand
  00116	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0011b	79 07		 jns	 SHORT $LN42@mapEffectS
  0011d	48		 dec	 eax
  0011e	83 c8 fe	 or	 eax, -2			; fffffffeH
  00121	83 c0 01	 add	 eax, 1
$LN42@mapEffectS:

; 4936 : 					if (j == 0)

  00124	75 2a		 jne	 SHORT $LN14@mapEffectS

; 4937 : 					{
; 4938 : 						buf->dx = 0 + (rand() % 2);

  00126	e8 00 00 00 00	 call	 _rand
  0012b	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00130	79 05		 jns	 SHORT $LN43@mapEffectS
  00132	48		 dec	 eax
  00133	83 c8 fe	 or	 eax, -2			; fffffffeH
  00136	40		 inc	 eax
$LN43@mapEffectS:
  00137	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 4939 : 						buf->dy = 3 + (rand() % 2);

  0013a	e8 00 00 00 00	 call	 _rand
  0013f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00144	79 05		 jns	 SHORT $LN44@mapEffectS
  00146	48		 dec	 eax
  00147	83 c8 fe	 or	 eax, -2			; fffffffeH
  0014a	40		 inc	 eax
$LN44@mapEffectS:
  0014b	83 c0 03	 add	 eax, 3

; 4940 : 					}

  0014e	eb 1c		 jmp	 SHORT $LN51@mapEffectS
$LN14@mapEffectS:

; 4941 : 					else if (j == 1)

  00150	83 f8 01	 cmp	 eax, 1
  00153	75 1a		 jne	 SHORT $LN16@mapEffectS

; 4942 : 					{
; 4943 : 						buf->dx = 1;

  00155	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 4944 : 						buf->dy = 4 + (rand() % 2);

  00158	e8 00 00 00 00	 call	 _rand
  0015d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00162	79 05		 jns	 SHORT $LN45@mapEffectS
  00164	48		 dec	 eax
  00165	83 c8 fe	 or	 eax, -2			; fffffffeH
  00168	40		 inc	 eax
$LN45@mapEffectS:
  00169	83 c0 04	 add	 eax, 4
$LN51@mapEffectS:

; 4945 : 					}
; 4946 : 					time = TimeGetTime();

  0016c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN16@mapEffectS:
  0016f	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 4947 : 					mapEffectSnowCnt++;

  00174	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectSnowCnt@@3FA ; mapEffectSnowCnt
  0017b	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectSnow@@YAXXZ@4IA, eax

; 4948 : 				}
; 4949 : 			}
; 4950 : 		}

  00180	e9 df 00 00 00	 jmp	 $LN4@mapEffectS
$LN10@mapEffectS:

; 4951 : 		else
; 4952 : 		{
; 4953 : 			mapEffectSnowFrameMax = (mapEffectSnowLevel - 2) << 1;

  00185	0f b7 c8	 movzx	 ecx, ax
  00188	66 83 e9 02	 sub	 cx, 2
  0018c	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  0018f	0f b7 c0	 movzx	 eax, ax

; 4954 : 			if (ResoMode == 1)

  00192	83 fe 01	 cmp	 esi, 1
  00195	75 03		 jne	 SHORT $LN17@mapEffectS

; 4955 : 				mapEffectSnowFrameMax >>= 1;

  00197	0f b7 c1	 movzx	 eax, cx
$LN17@mapEffectS:

; 4956 : 			for (i = 0; i < mapEffectSnowFrameMax; i++)

  0019a	0f bf f8	 movsx	 edi, ax
  0019d	85 ff		 test	 edi, edi
  0019f	0f 8e bf 00 00
	00		 jle	 $LN4@mapEffectS
  001a5	8b 5d e8	 mov	 ebx, DWORD PTR _hosei1$1$[ebp]
$LL5@mapEffectS:

; 4957 : 			{
; 4958 : 				MAP_EFFECT *buf = getMapEffectBuf();

  001a8	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  001ad	8b f0		 mov	 esi, eax

; 4959 : 				if (buf != (MAP_EFFECT*)NULL)

  001af	85 f6		 test	 esi, esi
  001b1	0f 84 a1 00 00
	00		 je	 $LN3@mapEffectS

; 4960 : 				{
; 4961 : 					buf->type = MAP_EFFECT_TYPE_SNOW;

  001b7	b8 02 00 00 00	 mov	 eax, 2
  001bc	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 4962 : 					buf->x = (rand() % hosei1) + hosei2;

  001c0	e8 00 00 00 00	 call	 _rand
  001c5	99		 cdq
  001c6	f7 fb		 idiv	 ebx

; 4963 : 					buf->y = 0;

  001c8	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  001cf	03 55 ec	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  001d2	89 16		 mov	 DWORD PTR [esi], edx

; 4964 : 					buf->mode = (rand() % 2);

  001d4	e8 00 00 00 00	 call	 _rand
  001d9	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001de	79 05		 jns	 SHORT $LN46@mapEffectS
  001e0	48		 dec	 eax
  001e1	83 c8 fe	 or	 eax, -2			; fffffffeH
  001e4	40		 inc	 eax
$LN46@mapEffectS:
  001e5	66 89 46 40	 mov	 WORD PTR [esi+64], ax

; 4965 : 					j = (rand() % 2);

  001e9	e8 00 00 00 00	 call	 _rand
  001ee	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001f3	79 07		 jns	 SHORT $LN47@mapEffectS
  001f5	48		 dec	 eax
  001f6	83 c8 fe	 or	 eax, -2			; fffffffeH
  001f9	83 c0 01	 add	 eax, 1
$LN47@mapEffectS:

; 4966 : 					if (j == 0)

  001fc	75 2a		 jne	 SHORT $LN19@mapEffectS

; 4967 : 					{
; 4968 : 						buf->dx = 0 + (rand() % 2);

  001fe	e8 00 00 00 00	 call	 _rand
  00203	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00208	79 05		 jns	 SHORT $LN48@mapEffectS
  0020a	48		 dec	 eax
  0020b	83 c8 fe	 or	 eax, -2			; fffffffeH
  0020e	40		 inc	 eax
$LN48@mapEffectS:
  0020f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 4969 : 						buf->dy = 3 + (rand() % 2);

  00212	e8 00 00 00 00	 call	 _rand
  00217	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0021c	79 05		 jns	 SHORT $LN49@mapEffectS
  0021e	48		 dec	 eax
  0021f	83 c8 fe	 or	 eax, -2			; fffffffeH
  00222	40		 inc	 eax
$LN49@mapEffectS:
  00223	83 c0 03	 add	 eax, 3

; 4970 : 					}

  00226	eb 1c		 jmp	 SHORT $LN52@mapEffectS
$LN19@mapEffectS:

; 4971 : 					else if (j == 1)

  00228	83 f8 01	 cmp	 eax, 1
  0022b	75 1a		 jne	 SHORT $LN21@mapEffectS

; 4972 : 					{
; 4973 : 						buf->dx = 1;

  0022d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 4974 : 						buf->dy = 4 + (rand() % 2);

  00230	e8 00 00 00 00	 call	 _rand
  00235	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0023a	79 05		 jns	 SHORT $LN50@mapEffectS
  0023c	48		 dec	 eax
  0023d	83 c8 fe	 or	 eax, -2			; fffffffeH
  00240	40		 inc	 eax
$LN50@mapEffectS:
  00241	83 c0 04	 add	 eax, 4
$LN52@mapEffectS:

; 4975 : 					}
; 4976 : 					time = TimeGetTime();

  00244	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN21@mapEffectS:
  00247	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 4977 : 					mapEffectSnowCnt++;

  0024c	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectSnowCnt@@3FA ; mapEffectSnowCnt
  00253	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectSnow@@YAXXZ@4IA, eax
$LN3@mapEffectS:

; 4956 : 			for (i = 0; i < mapEffectSnowFrameMax; i++)

  00258	83 ef 01	 sub	 edi, 1
  0025b	0f 85 47 ff ff
	ff		 jne	 $LL5@mapEffectS
  00261	8b 5d e4	 mov	 ebx, DWORD PTR _hh$1$[ebp]
$LN4@mapEffectS:

; 4978 : 				}
; 4979 : 			}
; 4980 : 		}
; 4981 : 	}
; 4982 : 	// ???
; 4983 : 	buf = useBufMapEffect;

  00264	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A ; useBufMapEffect

; 4984 : 	while (buf != (MAP_EFFECT*)NULL)

  0026a	85 f6		 test	 esi, esi
  0026c	74 5f		 je	 SHORT $LN7@mapEffectS
  0026e	b8 01 00 00 00	 mov	 eax, 1
$LL6@mapEffectS:

; 4985 : 	{
; 4986 : 		if (buf->type == MAP_EFFECT_TYPE_SNOW)

  00273	66 83 7e 3c 02	 cmp	 WORD PTR [esi+60], 2
  00278	75 46		 jne	 SHORT $LN23@mapEffectS

; 4987 : 		{
; 4988 : 			buf->x += buf->dx;

  0027a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 4989 : 			buf->y += buf->dy;

  0027d	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00280	01 06		 add	 DWORD PTR [esi], eax
  00282	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00285	01 07		 add	 DWORD PTR [edi], eax

; 4990 : 			mapEffectDirHosei(&buf->x, &buf->y);

  00287	57		 push	 edi
  00288	56		 push	 esi
  00289	e8 00 00 00 00	 call	 ?mapEffectDirHosei@@YAXPAH0@Z ; mapEffectDirHosei

; 4991 : 			if (ww + 100 <= buf->x || hh <= buf->y)

  0028e	8b 45 f0	 mov	 eax, DWORD PTR _ww$1$[ebp]
  00291	83 c4 08	 add	 esp, 8
  00294	83 c0 64	 add	 eax, 100		; 00000064H
  00297	3b 06		 cmp	 eax, DWORD PTR [esi]
  00299	7e 04		 jle	 SHORT $LN37@mapEffectS
  0029b	3b 1f		 cmp	 ebx, DWORD PTR [edi]
  0029d	7f 1c		 jg	 SHORT $LN39@mapEffectS
$LN37@mapEffectS:

; 4992 : 			{
; 4993 : 				// ??
; 4994 : 				MAP_EFFECT *buf2 = buf->next;

  0029f	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]

; 4995 : 				delMapEffectBuf(buf);

  002a2	56		 push	 esi
  002a3	e8 00 00 00 00	 call	 ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ; delMapEffectBuf
  002a8	83 c4 04	 add	 esp, 4

; 4996 : 				buf = buf2;

  002ab	8b f7		 mov	 esi, edi

; 4997 : 				mapEffectSnowCnt--;

  002ad	66 ff 0d 00 00
	00 00		 dec	 WORD PTR ?mapEffectSnowCnt@@3FA ; mapEffectSnowCnt

; 4998 : 				continue;

  002b4	b8 01 00 00 00	 mov	 eax, 1
  002b9	eb 0e		 jmp	 SHORT $LN31@mapEffectS
$LN39@mapEffectS:

; 4991 : 			if (ww + 100 <= buf->x || hh <= buf->y)

  002bb	b8 01 00 00 00	 mov	 eax, 1
$LN23@mapEffectS:

; 4999 : 			}
; 5000 : 		}
; 5001 : 		buf = buf->next;

  002c0	8b 76 38	 mov	 esi, DWORD PTR [esi+56]

; 5002 : 		mapEffectDrawFlag = 1;

  002c3	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, ax ; mapEffectDrawFlag
$LN31@mapEffectS:

; 4984 : 	while (buf != (MAP_EFFECT*)NULL)

  002c9	85 f6		 test	 esi, esi
  002cb	75 a6		 jne	 SHORT $LL6@mapEffectS
$LN7@mapEffectS:

; 5003 : 	}
; 5004 : }

  002cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d7	59		 pop	 ecx
  002d8	5f		 pop	 edi
  002d9	5e		 pop	 esi
  002da	5b		 pop	 ebx
  002db	8b e5		 mov	 esp, ebp
  002dd	5d		 pop	 ebp
  002de	c3		 ret	 0
$LN54@mapEffectS:

; 4903 : 	short mapEffectSnowWaitTime = 0;
; 4904 : 	short mapEffectSnowFrameMax = 0;
; 4905 : 	int hosei1 = 940;
; 4906 : 	int hosei2 = -200;
; 4907 : 	int ww = DEF_APPSIZEX;
; 4908 : 	int hh = DEF_APPSIZEY;
; 4909 : 	static unsigned int time = TimeGetTime();

  002df	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectSnow@@YAXXZ@4HA
  002e4	e8 00 00 00 00	 call	 __Init_thread_header
  002e9	83 c4 04	 add	 esp, 4
  002ec	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??mapEffectSnow@@YAXXZ@4HA, -1
  002f3	0f 85 72 fd ff
	ff		 jne	 $LN38@mapEffectS
  002f9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00300	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00305	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectSnow@@YAXXZ@4IA, eax
  0030a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00311	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectSnow@@YAXXZ@4HA
  00316	e8 00 00 00 00	 call	 __Init_thread_footer
  0031b	83 c4 04	 add	 esp, 4
  0031e	e9 48 fd ff ff	 jmp	 $LN38@mapEffectS
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?mapEffectSnow@@YAXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectSnow@@YAXXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?mapEffectSnow@@YAXXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?mapEffectSnow@@YAXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?mapEffectSnow@@YAXXZ ENDP				; mapEffectSnow
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectRain@@YAXXZ
_TEXT	SEGMENT
_hh$1$ = -32						; size = 4
_hosei1$1$ = -28					; size = 4
_mapEffectRainFrameMax$ = -24				; size = 2
_hosei2$1$ = -20					; size = 4
_ww$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?mapEffectRain@@YAXXZ PROC				; mapEffectRain, COMDAT

; 4819 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?mapEffectRain@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 4820 : 	short mapEffectRainWaitTime = 0;
; 4821 : 	short mapEffectRainFrameMax = 0;
; 4822 : 	int hosei1 = 840, hosei2 = -200, ww = DEF_APPSIZEX, hh = DEF_APPSIZEY, i;
; 4823 : 	static unsigned int time = TimeGetTime();

  00028	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002e	bf 48 03 00 00	 mov	 edi, 840		; 00000348H
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  0003f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00045	89 7d e4	 mov	 DWORD PTR _hosei1$1$[ebp], edi
  00048	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??mapEffectRain@@YAXXZ@4HA
  00050	c7 45 ec 38 ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -200 ; ffffff38H
  00057	89 55 f0	 mov	 DWORD PTR _ww$1$[ebp], edx
  0005a	89 5d e0	 mov	 DWORD PTR _hh$1$[ebp], ebx
  0005d	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00063	0f 8f bb 01 00
	00		 jg	 $LN38@mapEffectR
  00069	eb 03		 jmp	 SHORT $LN2@mapEffectR
$LN33@mapEffectR:

; 4824 : 	MAP_EFFECT *buf;
; 4825 : 
; 4826 : 	// ???????????????
; 4827 : 	if (ResoMode == 1)

  0006b	8b 55 f0	 mov	 edx, DWORD PTR _ww$1$[ebp]
$LN2@mapEffectR:
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00074	83 f9 01	 cmp	 ecx, 1
  00077	75 19		 jne	 SHORT $LN8@mapEffectR

; 4828 : 	{
; 4829 : 		ww >>= 1;

  00079	d1 fa		 sar	 edx, 1

; 4830 : 		hh >>= 1;
; 4831 : 		hosei1 = 370;

  0007b	bf 72 01 00 00	 mov	 edi, 370		; 00000172H
  00080	d1 fb		 sar	 ebx, 1
  00082	89 55 f0	 mov	 DWORD PTR _ww$1$[ebp], edx
  00085	89 5d e0	 mov	 DWORD PTR _hh$1$[ebp], ebx
  00088	89 7d e4	 mov	 DWORD PTR _hosei1$1$[ebp], edi

; 4832 : 		hosei2 = -50;

  0008b	c7 45 ec ce ff
	ff ff		 mov	 DWORD PTR _hosei2$1$[ebp], -50 ; ffffffceH
$LN8@mapEffectR:

; 4833 : 	}
; 4834 : 	// ?
; 4835 : 	if (mapEffectRainLevel)

  00092	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?mapEffectRainLevel@@3FA ; mapEffectRainLevel
  00098	66 85 c0	 test	 ax, ax
  0009b	0f 84 0e 01 00
	00		 je	 $LN4@mapEffectR

; 4836 : 	{
; 4837 : 		if (mapEffectRainLevel < 3)

  000a1	66 83 f8 03	 cmp	 ax, 3
  000a5	0f 8d 85 00 00
	00		 jge	 $LN10@mapEffectR

; 4838 : 		{
; 4839 : 			mapEffectRainWaitTime = (51 - 25 * mapEffectRainLevel);

  000ab	98		 cwde
  000ac	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  000b1	6b c0 19	 imul	 eax, eax, 25
  000b4	66 2b c8	 sub	 cx, ax
  000b7	0f b7 f1	 movzx	 esi, cx

; 4840 : 			if (time + mapEffectRainWaitTime < TimeGetTime())

  000ba	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000bf	0f bf ce	 movsx	 ecx, si
  000c2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?time@?1??mapEffectRain@@YAXXZ@4IA
  000c8	3b c8		 cmp	 ecx, eax
  000ca	0f 83 df 00 00
	00		 jae	 $LN4@mapEffectR

; 4841 : 			{
; 4842 : 				MAP_EFFECT *buf = getMapEffectBuf();

  000d0	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  000d5	8b f0		 mov	 esi, eax

; 4843 : 				if (buf != (MAP_EFFECT*)NULL)

  000d7	85 f6		 test	 esi, esi
  000d9	0f 84 d0 00 00
	00		 je	 $LN4@mapEffectR

; 4844 : 				{
; 4845 : 					buf->type = MAP_EFFECT_TYPE_RAIN;

  000df	b8 01 00 00 00	 mov	 eax, 1
  000e4	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 4846 : 					buf->x = (rand() % hosei1) + hosei2;

  000e8	e8 00 00 00 00	 call	 _rand
  000ed	99		 cdq
  000ee	f7 ff		 idiv	 edi

; 4847 : 					buf->y = 0;

  000f0	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000f7	03 55 ec	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  000fa	89 16		 mov	 DWORD PTR [esi], edx

; 4848 : 					buf->dx = 2 + (rand() % 2);

  000fc	e8 00 00 00 00	 call	 _rand
  00101	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00106	79 05		 jns	 SHORT $LN35@mapEffectR
  00108	48		 dec	 eax
  00109	83 c8 fe	 or	 eax, -2			; fffffffeH
  0010c	40		 inc	 eax
$LN35@mapEffectR:
  0010d	83 c0 02	 add	 eax, 2

; 4849 : 					buf->dy = 9;

  00110	c7 46 0c 09 00
	00 00		 mov	 DWORD PTR [esi+12], 9
  00117	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 4850 : 					time = TimeGetTime();

  0011a	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 4851 : 					mapEffectRainCnt++;

  0011f	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectRainCnt@@3FA ; mapEffectRainCnt
  00126	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectRain@@YAXXZ@4IA, eax

; 4852 : 				}
; 4853 : 			}
; 4854 : 		}

  0012b	e9 7f 00 00 00	 jmp	 $LN4@mapEffectR
$LN10@mapEffectR:

; 4855 : 		else
; 4856 : 		{
; 4857 : 			mapEffectRainFrameMax = (mapEffectRainLevel - 2) << 2;

  00130	66 83 e8 02	 sub	 ax, 2
  00134	66 c1 e0 02	 shl	 ax, 2
  00138	0f b7 c0	 movzx	 eax, ax
  0013b	89 45 e8	 mov	 DWORD PTR _mapEffectRainFrameMax$[ebp], eax

; 4858 : 			if (ResoMode == 1)

  0013e	83 f9 01	 cmp	 ecx, 1
  00141	75 03		 jne	 SHORT $LN14@mapEffectR

; 4859 : 				mapEffectRainFrameMax >>= 1;

  00143	66 d1 f8	 sar	 ax, 1
$LN14@mapEffectR:

; 4860 : 			for (i = 0; i < mapEffectRainFrameMax; i++)

  00146	0f bf f8	 movsx	 edi, ax
  00149	85 ff		 test	 edi, edi
  0014b	7e 62		 jle	 SHORT $LN4@mapEffectR
  0014d	8b 5d e4	 mov	 ebx, DWORD PTR _hosei1$1$[ebp]
$LL5@mapEffectR:

; 4861 : 			{
; 4862 : 				MAP_EFFECT *buf = getMapEffectBuf();

  00150	e8 00 00 00 00	 call	 ?getMapEffectBuf@@YAPAU_MAP_EFFECT@@XZ ; getMapEffectBuf
  00155	8b f0		 mov	 esi, eax

; 4863 : 				if (buf != (MAP_EFFECT*)NULL)

  00157	85 f6		 test	 esi, esi
  00159	74 4c		 je	 SHORT $LN3@mapEffectR

; 4864 : 				{
; 4865 : 					buf->type = MAP_EFFECT_TYPE_RAIN;

  0015b	b8 01 00 00 00	 mov	 eax, 1
  00160	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 4866 : 					buf->x = (rand() % hosei1) + hosei2;

  00164	e8 00 00 00 00	 call	 _rand
  00169	99		 cdq
  0016a	f7 fb		 idiv	 ebx

; 4867 : 					buf->y = 0;

  0016c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00173	03 55 ec	 add	 edx, DWORD PTR _hosei2$1$[ebp]
  00176	89 16		 mov	 DWORD PTR [esi], edx

; 4868 : 					buf->dx = 2 + (rand() % 2);

  00178	e8 00 00 00 00	 call	 _rand
  0017d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00182	79 05		 jns	 SHORT $LN36@mapEffectR
  00184	48		 dec	 eax
  00185	83 c8 fe	 or	 eax, -2			; fffffffeH
  00188	40		 inc	 eax
$LN36@mapEffectR:
  00189	83 c0 02	 add	 eax, 2

; 4869 : 					buf->dy = 9;

  0018c	c7 46 0c 09 00
	00 00		 mov	 DWORD PTR [esi+12], 9
  00193	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 4870 : 					time = TimeGetTime();

  00196	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 4871 : 					mapEffectRainCnt++;

  0019b	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?mapEffectRainCnt@@3FA ; mapEffectRainCnt
  001a2	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectRain@@YAXXZ@4IA, eax
$LN3@mapEffectR:

; 4860 : 			for (i = 0; i < mapEffectRainFrameMax; i++)

  001a7	83 ef 01	 sub	 edi, 1
  001aa	75 a4		 jne	 SHORT $LL5@mapEffectR
  001ac	8b 5d e0	 mov	 ebx, DWORD PTR _hh$1$[ebp]
$LN4@mapEffectR:

; 4872 : 				}
; 4873 : 			}
; 4874 : 		}
; 4875 : 	}
; 4876 : 	// ???
; 4877 : 	buf = useBufMapEffect;

  001af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A ; useBufMapEffect

; 4878 : 	while (buf != (MAP_EFFECT *)NULL)

  001b5	85 f6		 test	 esi, esi
  001b7	74 59		 je	 SHORT $LN7@mapEffectR
  001b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@mapEffectR:

; 4879 : 	{
; 4880 : 		if (buf->type == MAP_EFFECT_TYPE_RAIN)

  001c0	66 83 7e 3c 01	 cmp	 WORD PTR [esi+60], 1
  001c5	75 39		 jne	 SHORT $LN17@mapEffectR

; 4881 : 		{
; 4882 : 			buf->x += buf->dx;

  001c7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 4883 : 			buf->y += buf->dy;

  001ca	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  001cd	01 06		 add	 DWORD PTR [esi], eax
  001cf	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001d2	01 07		 add	 DWORD PTR [edi], eax

; 4884 : 			mapEffectDirHosei(&buf->x, &buf->y);

  001d4	57		 push	 edi
  001d5	56		 push	 esi
  001d6	e8 00 00 00 00	 call	 ?mapEffectDirHosei@@YAXPAH0@Z ; mapEffectDirHosei

; 4885 : 			if (ww <= buf->x || hh <= buf->y)

  001db	8b 45 f0	 mov	 eax, DWORD PTR _ww$1$[ebp]
  001de	83 c4 08	 add	 esp, 8
  001e1	3b 06		 cmp	 eax, DWORD PTR [esi]
  001e3	7e 04		 jle	 SHORT $LN31@mapEffectR
  001e5	3b 1f		 cmp	 ebx, DWORD PTR [edi]
  001e7	7f 17		 jg	 SHORT $LN17@mapEffectR
$LN31@mapEffectR:

; 4886 : 			{
; 4887 : 				// ??
; 4888 : 				MAP_EFFECT *buf2 = buf->next;

  001e9	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]

; 4889 : 				delMapEffectBuf(buf);

  001ec	56		 push	 esi
  001ed	e8 00 00 00 00	 call	 ?delMapEffectBuf@@YAXPAU_MAP_EFFECT@@@Z ; delMapEffectBuf
  001f2	83 c4 04	 add	 esp, 4

; 4890 : 				buf = buf2;

  001f5	8b f7		 mov	 esi, edi

; 4891 : 				mapEffectRainCnt--;

  001f7	66 ff 0d 00 00
	00 00		 dec	 WORD PTR ?mapEffectRainCnt@@3FA ; mapEffectRainCnt

; 4892 : 				continue;

  001fe	eb 0e		 jmp	 SHORT $LN25@mapEffectR
$LN17@mapEffectR:

; 4893 : 			}
; 4894 : 		}
; 4895 : 		buf = buf->next;

  00200	8b 76 38	 mov	 esi, DWORD PTR [esi+56]

; 4896 : 		mapEffectDrawFlag = 1;

  00203	b8 01 00 00 00	 mov	 eax, 1
  00208	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, ax ; mapEffectDrawFlag
$LN25@mapEffectR:

; 4878 : 	while (buf != (MAP_EFFECT *)NULL)

  0020e	85 f6		 test	 esi, esi
  00210	75 ae		 jne	 SHORT $LL6@mapEffectR
$LN7@mapEffectR:

; 4897 : 	}
; 4898 : }

  00212	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00215	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0021c	59		 pop	 ecx
  0021d	5f		 pop	 edi
  0021e	5e		 pop	 esi
  0021f	5b		 pop	 ebx
  00220	8b e5		 mov	 esp, ebp
  00222	5d		 pop	 ebp
  00223	c3		 ret	 0
$LN38@mapEffectR:

; 4820 : 	short mapEffectRainWaitTime = 0;
; 4821 : 	short mapEffectRainFrameMax = 0;
; 4822 : 	int hosei1 = 840, hosei2 = -200, ww = DEF_APPSIZEX, hh = DEF_APPSIZEY, i;
; 4823 : 	static unsigned int time = TimeGetTime();

  00224	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectRain@@YAXXZ@4HA
  00229	e8 00 00 00 00	 call	 __Init_thread_header
  0022e	83 c4 04	 add	 esp, 4
  00231	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??mapEffectRain@@YAXXZ@4HA, -1
  00238	0f 85 2d fe ff
	ff		 jne	 $LN33@mapEffectR
  0023e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00245	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0024a	a3 00 00 00 00	 mov	 DWORD PTR ?time@?1??mapEffectRain@@YAXXZ@4IA, eax
  0024f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00256	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectRain@@YAXXZ@4HA
  0025b	e8 00 00 00 00	 call	 __Init_thread_footer
  00260	83 c4 04	 add	 esp, 4
  00263	e9 03 fe ff ff	 jmp	 $LN33@mapEffectR
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?mapEffectRain@@YAXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??mapEffectRain@@YAXXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?mapEffectRain@@YAXXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?mapEffectRain@@YAXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?mapEffectRain@@YAXXZ ENDP				; mapEffectRain
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapEffectProc@@YAXXZ
_TEXT	SEGMENT
?mapEffectProc@@YAXXZ PROC				; mapEffectProc, COMDAT

; 4790 : 	mapEffectRain();

  00000	e8 00 00 00 00	 call	 ?mapEffectRain@@YAXXZ	; mapEffectRain

; 4791 : 	mapEffectSnow();

  00005	e8 00 00 00 00	 call	 ?mapEffectSnow@@YAXXZ	; mapEffectSnow

; 4792 : 	mapEffectStar();

  0000a	e8 00 00 00 00	 call	 ?mapEffectStar@@YAXXZ	; mapEffectStar

; 4793 : 	mapEffectFallingStar();

  0000f	e8 00 00 00 00	 call	 ?mapEffectFallingStar@@YAXXZ ; mapEffectFallingStar

; 4794 : 	mapEffectKamiFubuki();	

  00014	e8 00 00 00 00	 call	 ?mapEffectKamiFubuki@@YAXXZ ; mapEffectKamiFubuki

; 4795 : #ifdef __EDEN_DICE
; 4796 : 	mapEffectDice();
; 4797 : #endif
; 4798 : #ifdef _HALLOWEEN_EFFECT
; 4799 : 	mapEffectHalloweenProc();

  00019	e8 00 00 00 00	 call	 ?mapEffectHalloweenProc@@YAXXZ ; mapEffectHalloweenProc

; 4800 : #endif
; 4801 : 	if (transEffectPaletteStatus == 2 && transEffectPaletteAfterWaitTime == 0)

  0001e	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?transEffectPaletteStatus@@3HA, 2 ; transEffectPaletteStatus
  00025	75 3c		 jne	 SHORT $LN4@mapEffectP
  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?transEffectPaletteAfterWaitTime@@3IA, 0 ; transEffectPaletteAfterWaitTime
  0002e	75 0c		 jne	 SHORT $LN6@mapEffectP

; 4802 : 		transEffectPaletteAfterWaitTime = GetTickCount();

  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?transEffectPaletteAfterWaitTime@@3IA, eax ; transEffectPaletteAfterWaitTime

; 4808 : 	}
; 4809 : }

  0003b	c3		 ret	 0
$LN6@mapEffectP:

; 4803 : 	// ??????????????????????
; 4804 : 	else if (transEffectPaletteStatus == 2 && (GetTickCount() - transEffectPaletteAfterWaitTime) > 2500)

  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00042	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?transEffectPaletteAfterWaitTime@@3IA ; transEffectPaletteAfterWaitTime
  00048	3d c4 09 00 00	 cmp	 eax, 2500		; 000009c4H
  0004d	76 14		 jbe	 SHORT $LN4@mapEffectP

; 4805 : 	{
; 4806 : 		transEffectPaletteStatus = 0;

  0004f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transEffectPaletteStatus@@3HA, 0 ; transEffectPaletteStatus

; 4807 : 		transEffectPaletteAfterWaitTime = 0;

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transEffectPaletteAfterWaitTime@@3IA, 0 ; transEffectPaletteAfterWaitTime
$LN4@mapEffectP:

; 4808 : 	}
; 4809 : }

  00063	c3		 ret	 0
?mapEffectProc@@YAXXZ ENDP				; mapEffectProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?drawMapEffect@@YAXXZ
_TEXT	SEGMENT
?drawMapEffect@@YAXXZ PROC				; drawMapEffect, COMDAT

; 4780 : 	if (mapEffectDrawFlag)

  00000	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectDrawFlag@@3FA, 0 ; mapEffectDrawFlag
  00008	74 0d		 je	 SHORT $LN2@drawMapEff

; 4781 : 	{
; 4782 : 		DrawMapEffect();

  0000a	e8 00 00 00 00	 call	 ?DrawMapEffect@@YAXXZ	; DrawMapEffect

; 4783 : 		mapEffectDrawFlag = 0;

  0000f	33 c0		 xor	 eax, eax
  00011	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectDrawFlag@@3FA, ax ; mapEffectDrawFlag
$LN2@drawMapEff:

; 4784 : 	}
; 4785 : }

  00017	c3		 ret	 0
?drawMapEffect@@YAXXZ ENDP				; drawMapEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?initMapEffect@@YAXH@Z
_TEXT	SEGMENT
_bFirstRun$ = 8						; size = 4
?initMapEffect@@YAXH@Z PROC				; initMapEffect, COMDAT

; 4665 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 4666 : 	int i;
; 4667 : 
; 4668 : 	emptyBufMapEffect = &masterBufMapEffect[0];
; 4669 : 	masterBufMapEffect[0].pre = (MAP_EFFECT *)NULL;

  00005	8b 7d 08	 mov	 edi, DWORD PTR _bFirstRun$[ebp]
  00008	be 44 00 00 00	 mov	 esi, OFFSET ?masterBufMapEffect@@3PAU_MAP_EFFECT@@A+68
  0000d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?emptyBufMapEffect@@3PAU_MAP_EFFECT@@A, OFFSET ?masterBufMapEffect@@3PAU_MAP_EFFECT@@A ; emptyBufMapEffect
  00017	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?masterBufMapEffect@@3PAU_MAP_EFFECT@@A+52, 0
$LL4@initMapEff:

; 4671 : 	{
; 4672 : 		masterBufMapEffect[i - 1].next = &masterBufMapEffect[i];

  00021	8d 4e bc	 lea	 ecx, DWORD PTR [esi-68]

; 4673 : 		masterBufMapEffect[i].pre = &masterBufMapEffect[i - 1];

  00024	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00027	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0002a	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 4674 : #ifdef _HALLOWEEN_EFFECT
; 4675 : 		if (bFirstRun)

  0002d	85 ff		 test	 edi, edi
  0002f	75 0f		 jne	 SHORT $LN13@initMapEff

; 4676 : 			masterBufMapEffect[i - 1].pAction = NULL;
; 4677 : 		else
; 4678 : 		{
; 4679 : 			if (masterBufMapEffect[i - 1].pAction)

  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@initMapEff

; 4680 : 			{
; 4681 : 				DeathAction(masterBufMapEffect[i - 1].pAction);

  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0003d	83 c4 04	 add	 esp, 4
$LN13@initMapEff:

; 4670 : 	for (i = 1; i < MAX_MAP_EFFECT_BUF; i++)

  00040	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN2@initMapEff:
  00046	83 c6 48	 add	 esi, 72			; 00000048H
  00049	81 fe 9c 8c 00
	00		 cmp	 esi, OFFSET ?masterBufMapEffect@@3PAU_MAP_EFFECT@@A+35996
  0004f	7c d0		 jl	 SHORT $LL4@initMapEff

; 4682 : 				masterBufMapEffect[i - 1].pAction = NULL;
; 4683 : 			}
; 4684 : 		}
; 4685 : #endif
; 4686 : 	}
; 4687 : 	masterBufMapEffect[i - 1].next = (MAP_EFFECT*)NULL;
; 4688 : 	useBufMapEffect = (MAP_EFFECT*)NULL;
; 4689 : 	mapEffectRainLevel = 0;

  00051	33 c0		 xor	 eax, eax
  00053	c7 05 90 8c 00
	00 00 00 00 00	 mov	 DWORD PTR ?masterBufMapEffect@@3PAU_MAP_EFFECT@@A+35984, 0
  0005d	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectRainLevel@@3FA, ax ; mapEffectRainLevel

; 4690 : 	mapEffectRainCnt = 0;

  00063	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectRainCnt@@3FA, ax ; mapEffectRainCnt

; 4691 : 	mapEffectSnowLevel = 0;

  00069	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectSnowLevel@@3FA, ax ; mapEffectSnowLevel

; 4692 : 	mapEffectSnowCnt = 0;

  0006f	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectSnowCnt@@3FA, ax ; mapEffectSnowCnt

; 4693 : 	mapEffectMoveDir = -1;

  00075	83 c8 ff	 or	 eax, -1
  00078	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectMoveDir@@3FA, ax ; mapEffectMoveDir

; 4694 : 	mapEffectStarFlag = 0;

  0007e	33 c0		 xor	 eax, eax
  00080	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectStarFlag@@3FA, ax ; mapEffectStarFlag

; 4695 : 	mapEffectFallingStarFlag = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectFallingStarFlag@@3FA, ax ; mapEffectFallingStarFlag

; 4696 : 	mapEffectKamiFubukiLevel = 0;

  00091	33 c0		 xor	 eax, eax

; 4697 : 	mapEffectKamiFubukiCnt = 0;
; 4698 : #ifdef __EDEN_DICE
; 4699 : 	bMapEffectDice = FALSE;
; 4700 : #endif
; 4701 : #ifdef _HALLOWEEN_EFFECT
; 4702 : 	mapEffectHalloween = 0;

  00093	5f		 pop	 edi
  00094	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?useBufMapEffect@@3PAU_MAP_EFFECT@@A, 0 ; useBufMapEffect
  0009e	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectKamiFubukiLevel@@3FA, ax ; mapEffectKamiFubukiLevel
  000a4	66 a3 00 00 00
	00		 mov	 WORD PTR ?mapEffectKamiFubukiCnt@@3FA, ax ; mapEffectKamiFubukiCnt
  000aa	a3 00 00 00 00	 mov	 DWORD PTR ?mapEffectHalloween@@3HA, eax ; mapEffectHalloween
  000af	5e		 pop	 esi

; 4703 : #endif
; 4704 : }

  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
?initMapEffect@@YAXH@Z ENDP				; initMapEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?camGamenToMap@@YAXMMPAM0@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?camGamenToMap@@YAXMMPAM0@Z PROC			; camGamenToMap, COMDAT

; 5918 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?viewOffsetX@@3HA ; viewOffsetX

; 5919 : 	float x0, y0, x, y;
; 5920 : 
; 5921 : 	// ??
; 5922 : 	x0 = sx - viewOffsetX; 

  0000b	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _sx$[ebp]

; 5923 : 	y0 = sy - viewOffsetY; 

  00010	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  00015	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 5924 : 	x = x0 - (float)SURFACE_WIDTH / (float)SURFACE_HEIGHT * y0;
; 5925 : 	y = x0 + (float)SURFACE_WIDTH / (float)SURFACE_HEIGHT * y0;
; 5926 : 	*ex = x + viewPointX;

  00018	8b 45 10	 mov	 eax, DWORD PTR _ex$[ebp]
  0001b	f3 0f 5c d0	 subss	 xmm2, xmm0
  0001f	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?viewOffsetY@@3HA ; viewOffsetY
  00027	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0002a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0002e	0f 28 c2	 movaps	 xmm0, xmm2
  00031	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3faaaaab
  00039	f3 0f 5c c1	 subss	 xmm0, xmm1
  0003d	f3 0f 58 ca	 addss	 xmm1, xmm2
  00041	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?viewPointX@@3MA
  00049	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 5927 : 	*ey = y + viewPointY;

  0004d	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?viewPointY@@3MA
  00055	8b 45 14	 mov	 eax, DWORD PTR _ey$[ebp]
  00058	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 5928 : }

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?camGamenToMap@@YAXMMPAM0@Z ENDP			; camGamenToMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?camMapToGamen@@YAXMMPAM0@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?camMapToGamen@@YAXMMPAM0@Z PROC			; camMapToGamen, COMDAT

; 5902 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5903 : 	float x0, y0, x, y, tx = (float)(SURFACE_WIDTH >> 1), ty = (float)(SURFACE_HEIGHT >> 1);
; 5904 : 
; 5905 : 	x0 = (sx - viewPointX) / GRID_SIZE;

  00003	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _sx$[ebp]
  00008	f3 0f 5c 25 00
	00 00 00	 subss	 xmm4, DWORD PTR ?viewPointX@@3MA

; 5906 : 	y0 = (sy - viewPointY) / GRID_SIZE;

  00010	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _sy$[ebp]
  00015	f3 0f 5c 1d 00
	00 00 00	 subss	 xmm3, DWORD PTR ?viewPointY@@3MA

; 5907 : 	x = + x0 * tx + y0 * tx;
; 5908 : 	y = - x0 * ty + y0 * ty;
; 5909 : 	//??
; 5910 : 	*ex = x + viewOffsetX;

  0001d	8b 45 10	 mov	 eax, DWORD PTR _ex$[ebp]
  00020	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@3c800000
  00028	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3c800000
  00030	0f 28 c4	 movaps	 xmm0, xmm4
  00033	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@41c00000
  0003b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42000000
  00043	0f 28 d3	 movaps	 xmm2, xmm3
  00046	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@42000000
  0004e	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@41c00000
  00056	f3 0f 58 d0	 addss	 xmm2, xmm0
  0005a	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?viewOffsetX@@3HA ; viewOffsetX
  00062	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00065	f3 0f 5c dc	 subss	 xmm3, xmm4
  00069	f3 0f 58 d0	 addss	 xmm2, xmm0
  0006d	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00071	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?viewOffsetY@@3HA ; viewOffsetY

; 5911 : 	*ey = y + viewOffsetY;

  00079	8b 45 14	 mov	 eax, DWORD PTR _ey$[ebp]
  0007c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007f	f3 0f 58 d8	 addss	 xmm3, xmm0
  00083	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3

; 5912 : }

  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?camMapToGamen@@YAXMMPAM0@Z ENDP			; camMapToGamen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?checkHitMap@@YAHHH@Z
_TEXT	SEGMENT
_gx$ = 8						; size = 4
_gy$ = 12						; size = 4
?checkHitMap@@YAHHH@Z PROC				; checkHitMap, COMDAT

; 1878 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1879 : 	int x, y;
; 1880 : 
; 1881 : 	x = gx - mapAreaX1;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _gx$[ebp]

; 1882 : 	y = gy - mapAreaY1;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _gy$[ebp]
  00009	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  0000f	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1

; 1883 : 
; 1884 : 	if (pc.skywalker)

  00015	83 3d bc a1 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+41404, 0
  0001c	75 2d		 jne	 SHORT $LN8@checkHitMa

; 1885 : 		return FALSE;
; 1886 : 
; 1887 : 	// ????????
; 1888 : 	if (x < 0 || mapAreaWidth <= x || y < 0 || mapAreaHeight <= y)

  0001e	85 c9		 test	 ecx, ecx
  00020	78 3d		 js	 SHORT $LN4@checkHitMa
  00022	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00028	3b d1		 cmp	 edx, ecx
  0002a	7e 33		 jle	 SHORT $LN4@checkHitMa
  0002c	85 c0		 test	 eax, eax
  0002e	78 2f		 js	 SHORT $LN4@checkHitMa
  00030	39 05 00 00 00
	00		 cmp	 DWORD PTR ?mapAreaHeight@@3HA, eax ; mapAreaHeight
  00036	7e 27		 jle	 SHORT $LN4@checkHitMa

; 1890 : #ifdef _ITEM_PATH
; 1891 : 	if (ITEMPATHFLAG)

  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ITEMPATHFLAG@@3HA, 0 ; ITEMPATHFLAG
  0003f	74 0e		 je	 SHORT $LN5@checkHitMa

; 1892 : 	{
; 1893 : 		ITEMPATHFLAG = FALSE;

  00041	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ITEMPATHFLAG@@3HA, 0 ; ITEMPATHFLAG
$LN8@checkHitMa:

; 1899 : 		return TRUE;
; 1900 : 
; 1901 : 	return FALSE;
; 1902 : }

  0004b	33 c0		 xor	 eax, eax
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN5@checkHitMa:

; 1894 : 		return FALSE;
; 1895 : 	}
; 1896 : #endif
; 1897 : 	// ????????
; 1898 : 	if (hitMap[y * mapAreaWidth + x] == 1)

  0004f	0f af c2	 imul	 eax, edx
  00052	03 c1		 add	 eax, ecx
  00054	66 83 3c 45 00
	00 00 00 01	 cmp	 WORD PTR ?hitMap@@3PAGA[eax*2], 1
  0005d	75 ec		 jne	 SHORT $LN8@checkHitMa
$LN4@checkHitMa:

; 1889 : 		return TRUE;

  0005f	b8 01 00 00 00	 mov	 eax, 1

; 1899 : 		return TRUE;
; 1900 : 
; 1901 : 	return FALSE;
; 1902 : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?checkHitMap@@YAHHH@Z ENDP				; checkHitMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?drawAutoMap@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?drawAutoMap@@YAXHH@Z PROC				; drawAutoMap, COMDAT

; 4017 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4018 : 	if (autoMappingInitFlag)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?autoMappingInitFlag@@3HA, 0 ; autoMappingInitFlag
  0000a	74 24		 je	 SHORT $LN2@drawAutoMa

; 4019 : 	{
; 4020 : 		createAutoMap(nowFloor, nowGx, nowGy);

  0000c	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  00012	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowFloor@@3HA ; nowFloor
  0001e	e8 00 00 00 00	 call	 ?createAutoMap@@YAHHHH@Z ; createAutoMap
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4021 : 		autoMappingInitFlag = FALSE;

  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?autoMappingInitFlag@@3HA, 0 ; autoMappingInitFlag
$LN2@drawAutoMa:

; 4022 : 	}
; 4023 : 	DrawAutoMapping(x, y, (unsigned char *)autoMappingBuf, AUTO_MAPPING_W, AUTO_MAPPING_H);

  00030	6a 36		 push	 54			; 00000036H
  00032	6a 36		 push	 54			; 00000036H
  00034	68 00 00 00 00	 push	 OFFSET ?autoMappingBuf@@3PAY0DG@EA ; autoMappingBuf
  00039	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  0003c	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0003f	e8 00 00 00 00	 call	 ?DrawAutoMapping@@YAXHHPAEHH@Z ; DrawAutoMapping
  00044	83 c4 14	 add	 esp, 20			; 00000014H

; 4024 : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?drawAutoMap@@YAXHH@Z ENDP				; drawAutoMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?stockCharParts@@YAXXZ
_TEXT	SEGMENT
?stockCharParts@@YAXXZ PROC				; stockCharParts, COMDAT

; 3961 : {

  00000	56		 push	 esi

; 3962 : 	int i;
; 3963 : 	CHAR_PARTS_PRIORITY *pt;
; 3964 : 
; 3965 : 	pt = charPrioBufTop.next;

  00001	8b 35 28 00 00
	00		 mov	 esi, DWORD PTR ?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A+40

; 3966 : 	if (pt == NULL)

  00007	85 f6		 test	 esi, esi
  00009	74 46		 je	 SHORT $LN13@stockCharP

; 3967 : 		return;
; 3968 : 
; 3969 : 	for (i = 0; i < charPrioCnt && pt != NULL; i++, pt = pt->next)

  0000b	57		 push	 edi
  0000c	33 ff		 xor	 edi, edi
  0000e	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?charPrioCnt@@3HA, edi ; charPrioCnt
  00014	7e 3a		 jle	 SHORT $LN14@stockCharP
$LL4@stockCharP:
  00016	85 f6		 test	 esi, esi
  00018	74 36		 je	 SHORT $LN14@stockCharP
  0001a	66 83 7e 20 02	 cmp	 WORD PTR [esi+32], 2
  0001f	6a 00		 push	 0
  00021	ff 36		 push	 DWORD PTR [esi]
  00023	0f 94 c0	 sete	 al
  00026	fe c8		 dec	 al
  00028	24 0a		 and	 al, 10			; 0000000aH
  0002a	0f b6 c0	 movzx	 eax, al
  0002d	50		 push	 eax
  0002e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00031	03 46 08	 add	 eax, DWORD PTR [esi+8]
  00034	50		 push	 eax
  00035	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00038	03 46 04	 add	 eax, DWORD PTR [esi+4]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?StockDispBuffer2@@YAHHHEHH@Z ; StockDispBuffer2
  00041	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
  00044	47		 inc	 edi
  00045	83 c4 14	 add	 esp, 20			; 00000014H
  00048	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
  0004e	7c c6		 jl	 SHORT $LL4@stockCharP
$LN14@stockCharP:
  00050	5f		 pop	 edi
$LN13@stockCharP:
  00051	5e		 pop	 esi

; 3970 : 	{
; 3971 : 		if (pt->type == CHAR_PARTS_PRIO_TYPE_ANI)
; 3972 : 			StockDispBuffer2(pt->x + pt->dx, pt->y + pt->dy, 0, pt->graNo, 0);
; 3973 : 		else
; 3974 : 			StockDispBuffer2(pt->x + pt->dx, pt->y + pt->dy, DISP_PRIO_PARTS, pt->graNo, 0);
; 3975 : #if 0
; 3976 : 		// ?????
; 3977 : 		if (pt->type == CHAR_PARTS_PRIO_TYPE_CHAR)
; 3978 : 			break;
; 3979 : #endif
; 3980 : 	}
; 3981 : }

  00052	c3		 ret	 0
?stockCharParts@@YAXXZ ENDP				; stockCharParts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setCharPrio@@YAXHHHHHMM@Z
_TEXT	SEGMENT
_prePtc$ = -4						; size = 4
_graNo$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dx$ = 20						; size = 4
_dy$ = 24						; size = 4
_mx$ = 28						; size = 4
_my$ = 32						; size = 4
?setCharPrio@@YAXHHHHHMM@Z PROC				; setCharPrio, COMDAT

; 3797 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3798 : 	int i;
; 3799 : 	CHAR_PARTS_PRIORITY *ptc, *prePtc;
; 3800 : 	BOOL flag;
; 3801 : 
; 3802 : 	// ??????????
; 3803 : 	if (charPrioCnt >= MAX_CHAR_PRIO_BUF)

  00005	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
  0000b	81 fe 00 08 00
	00		 cmp	 esi, 2048		; 00000800H
  00011	0f 8d c0 00 00
	00		 jge	 $LN1@setCharPri

; 3804 : 		return;
; 3805 : 	// ?????????????
; 3806 : 	charPrioBuf[charPrioCnt].graNo = graNo;

  00017	8b 45 08	 mov	 eax, DWORD PTR _graNo$[ebp]

; 3807 : 	charPrioBuf[charPrioCnt].x     = x;
; 3808 : 	charPrioBuf[charPrioCnt].y     = y;

  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]

; 3809 : 	charPrioBuf[charPrioCnt].dx    = dx;
; 3810 : 	charPrioBuf[charPrioCnt].dy    = dy;
; 3811 : 	charPrioBuf[charPrioCnt].mx    = mx;

  0001d	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _mx$[ebp]
  00022	6b d6 2c	 imul	 edx, esi, 44
  00025	89 82 00 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx], eax
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0002e	57		 push	 edi
  0002f	8d ba 00 00 00
	00		 lea	 edi, DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx]
  00035	89 82 04 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+4], eax
  0003b	8b 45 14	 mov	 eax, DWORD PTR _dx$[ebp]
  0003e	89 8a 08 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+8], ecx
  00044	89 82 0c 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+12], eax
  0004a	8b 45 18	 mov	 eax, DWORD PTR _dy$[ebp]
  0004d	89 82 10 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+16], eax

; 3812 : 	charPrioBuf[charPrioCnt].my    = my;
; 3813 : 	charPrioBuf[charPrioCnt].type  = CHAR_PARTS_PRIO_TYPE_CHAR;

  00053	33 c0		 xor	 eax, eax
  00055	f3 0f 11 82 18
	00 00 00	 movss	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+24], xmm0
  0005d	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _my$[ebp]
  00062	f3 0f 11 82 1c
	00 00 00	 movss	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+28], xmm0
  0006a	66 89 82 20 00
	00 00		 mov	 WORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+32], ax

; 3814 : 	charPrioBuf[charPrioCnt].pre   = NULL;

  00071	89 82 24 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+36], eax

; 3815 : 	charPrioBuf[charPrioCnt].next  = NULL;

  00077	89 82 28 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+40], eax

; 3816 : 	charPrioBuf[charPrioCnt].depth = y;

  0007d	89 8a 14 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+20], ecx

; 3817 : 	if (charPrioCnt == 0)

  00083	85 f6		 test	 esi, esi
  00085	75 1a		 jne	 SHORT $LN6@setCharPri

; 3818 : 		addCharPartsPrio(&charPrioBufTop, &charPrioBuf[charPrioCnt]);

  00087	57		 push	 edi
  00088	68 00 00 00 00	 push	 OFFSET ?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A ; charPrioBufTop

; 3836 : 	}
; 3837 : 	charPrioCnt++;

  0008d	e8 00 00 00 00	 call	 ?addCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; addCharPartsPrio
  00092	83 c4 08	 add	 esp, 8
  00095	ff 05 00 00 00
	00		 inc	 DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi

; 3838 : }

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
$LN6@setCharPri:

; 3819 : 	else
; 3820 : 	{
; 3821 : 		// ?????????????
; 3822 : 		flag = FALSE;
; 3823 : 		ptc = charPrioBufTop.next;

  000a1	8b 0d 28 00 00
	00		 mov	 ecx, DWORD PTR ?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A+40

; 3824 : 		for (i = 0; i < charPrioCnt && ptc != NULL; i++, ptc = ptc->next)

  000a7	33 d2		 xor	 edx, edx
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _prePtc$[ebp]
  000ac	85 f6		 test	 esi, esi
  000ae	7e 16		 jle	 SHORT $LN16@setCharPri
$LL4@setCharPri:
  000b0	85 c9		 test	 ecx, ecx
  000b2	74 12		 je	 SHORT $LN16@setCharPri

; 3825 : 		{
; 3826 : 			if (charPrioBuf[charPrioCnt].depth > ptc->depth)

  000b4	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000b7	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  000ba	7f 20		 jg	 SHORT $LN12@setCharPri

; 3829 : 				flag = TRUE;
; 3830 : 				break;
; 3831 : 			}
; 3832 : 			prePtc = ptc;

  000bc	42		 inc	 edx
  000bd	8b c1		 mov	 eax, ecx
  000bf	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  000c2	3b d6		 cmp	 edx, esi
  000c4	7c ea		 jl	 SHORT $LL4@setCharPri
$LN16@setCharPri:

; 3833 : 		}
; 3834 : 		if (!flag)
; 3835 : 			addCharPartsPrio(prePtc, &charPrioBuf[charPrioCnt]);

  000c6	57		 push	 edi
  000c7	50		 push	 eax

; 3836 : 	}
; 3837 : 	charPrioCnt++;

  000c8	e8 00 00 00 00	 call	 ?addCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; addCharPartsPrio
  000cd	83 c4 08	 add	 esp, 8
  000d0	ff 05 00 00 00
	00		 inc	 DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
  000d6	5f		 pop	 edi
$LN1@setCharPri:
  000d7	5e		 pop	 esi

; 3838 : }

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN12@setCharPri:

; 3827 : 			{
; 3828 : 				insertCharPartsPrio(ptc, &charPrioBuf[charPrioCnt]);

  000dc	57		 push	 edi
  000dd	51		 push	 ecx
  000de	e8 00 00 00 00	 call	 ?insertCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; insertCharPartsPrio

; 3836 : 	}
; 3837 : 	charPrioCnt++;

  000e3	83 c4 08	 add	 esp, 8
  000e6	ff 05 00 00 00
	00		 inc	 DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi

; 3838 : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
?setCharPrio@@YAXHHHHHMM@Z ENDP				; setCharPrio
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setPartsPrio@@YAXHHHHHMMH@Z
_TEXT	SEGMENT
_prePtc$ = -4						; size = 4
_graNo$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dx$ = 20						; size = 4
_dy$ = 24						; size = 4
_mx$ = 28						; size = 4
_my$ = 32						; size = 4
_dispPrio$ = 36						; size = 4
?setPartsPrio@@YAXHHHHHMMH@Z PROC			; setPartsPrio, COMDAT

; 3744 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 24	 mov	 esi, DWORD PTR _dispPrio$[ebp]
  00008	57		 push	 edi

; 3745 : 	int i;
; 3746 : 	CHAR_PARTS_PRIORITY *ptc, *prePtc;
; 3747 : 	BOOL flag;
; 3748 : 
; 3749 : 	// ??????????
; 3750 : 	if (charPrioCnt >= MAX_CHAR_PRIO_BUF)

  00009	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
  0000f	81 ff 00 08 00
	00		 cmp	 edi, 2048		; 00000800H
  00015	0f 8d df 00 00
	00		 jge	 $LN1@setPartsPr

; 3751 : 		return;
; 3752 : 
; 3753 : 	// ?????????????
; 3754 : 	charPrioBuf[charPrioCnt].graNo = graNo;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _graNo$[ebp]

; 3755 : 	charPrioBuf[charPrioCnt].x     = x;
; 3756 : 	charPrioBuf[charPrioCnt].y     = y;

  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]

; 3757 : 	charPrioBuf[charPrioCnt].dx    = dx;
; 3758 : 	charPrioBuf[charPrioCnt].dy    = dy;
; 3759 : 	charPrioBuf[charPrioCnt].mx    = mx;

  00021	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _mx$[ebp]
  00026	6b d7 2c	 imul	 edx, edi, 44

; 3760 : 	charPrioBuf[charPrioCnt].my    = my;
; 3761 : 	if (dispPrio == 0)
; 3762 : 		charPrioBuf[charPrioCnt].type = CHAR_PARTS_PRIO_TYPE_ANI;
; 3763 : 	else
; 3764 : 		charPrioBuf[charPrioCnt].type  = CHAR_PARTS_PRIO_TYPE_PARTS;
; 3765 : 	charPrioBuf[charPrioCnt].pre   = NULL;

  00029	f7 de		 neg	 esi
  0002b	89 82 00 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx], eax
  00031	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00034	1b f6		 sbb	 esi, esi
  00036	53		 push	 ebx
  00037	8d 9a 00 00 00
	00		 lea	 ebx, DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx]
  0003d	83 c6 02	 add	 esi, 2
  00040	89 82 04 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+4], eax
  00046	8b 45 14	 mov	 eax, DWORD PTR _dx$[ebp]
  00049	89 8a 08 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+8], ecx
  0004f	89 82 0c 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+12], eax
  00055	8b 45 18	 mov	 eax, DWORD PTR _dy$[ebp]
  00058	89 82 10 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+16], eax
  0005e	f3 0f 11 82 18
	00 00 00	 movss	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+24], xmm0
  00066	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _my$[ebp]
  0006b	f3 0f 11 82 1c
	00 00 00	 movss	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+28], xmm0
  00073	66 89 b2 20 00
	00 00		 mov	 WORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+32], si
  0007a	c7 82 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+36], 0

; 3766 : 	charPrioBuf[charPrioCnt].next  = NULL;

  00084	c7 82 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+40], 0

; 3767 : 	charPrioBuf[charPrioCnt].depth = y;

  0008e	89 8a 14 00 00
	00		 mov	 DWORD PTR ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A[edx+20], ecx

; 3768 : 
; 3769 : 	if (charPrioCnt == 0)

  00094	85 ff		 test	 edi, edi
  00096	75 08		 jne	 SHORT $LN8@setPartsPr

; 3770 : 		addCharPartsPrio(&charPrioBufTop, &charPrioBuf[charPrioCnt]);

  00098	53		 push	 ebx
  00099	68 00 00 00 00	 push	 OFFSET ?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A ; charPrioBufTop
  0009e	eb 4b		 jmp	 SHORT $LN22@setPartsPr
$LN8@setPartsPr:

; 3771 : 	else
; 3772 : 	{
; 3773 : 		// ?????????????
; 3774 : 		flag = FALSE;
; 3775 : 		ptc = charPrioBufTop.next;

  000a0	8b 35 28 00 00
	00		 mov	 esi, DWORD PTR ?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A+40

; 3776 : 		for (i = 0; i < charPrioCnt && ptc != NULL; i++, ptc = ptc->next)

  000a6	33 db		 xor	 ebx, ebx
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _prePtc$[ebp]
  000ab	85 ff		 test	 edi, edi
  000ad	7e 32		 jle	 SHORT $LN20@setPartsPr
  000af	90		 npad	 1
$LL4@setPartsPr:
  000b0	85 f6		 test	 esi, esi
  000b2	74 2d		 je	 SHORT $LN20@setPartsPr

; 3777 : 		{
; 3778 : 			if (ptc->type == CHAR_PARTS_PRIO_TYPE_CHAR)

  000b4	66 83 7e 20 00	 cmp	 WORD PTR [esi+32], 0
  000b9	75 1c		 jne	 SHORT $LN11@setPartsPr

; 3779 : 			{
; 3780 : 				if (checkPrioPartsVsChar(ptc, &charPrioBuf[charPrioCnt]))

  000bb	6b c7 2c	 imul	 eax, edi, 44
  000be	05 00 00 00 00	 add	 eax, OFFSET ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A ; charPrioBuf
  000c3	50		 push	 eax
  000c4	56		 push	 esi
  000c5	e8 00 00 00 00	 call	 ?checkPrioPartsVsChar@@YAHPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; checkPrioPartsVsChar
  000ca	83 c4 08	 add	 esp, 8
  000cd	85 c0		 test	 eax, eax
  000cf	75 2f		 jne	 SHORT $LN15@setPartsPr
  000d1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
$LN11@setPartsPr:

; 3776 : 		for (i = 0; i < charPrioCnt && ptc != NULL; i++, ptc = ptc->next)

  000d7	43		 inc	 ebx

; 3783 : 					flag = TRUE;
; 3784 : 					break;
; 3785 : 				}
; 3786 : 			}
; 3787 : 			prePtc = ptc;

  000d8	8b ce		 mov	 ecx, esi
  000da	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
  000dd	3b df		 cmp	 ebx, edi
  000df	7c cf		 jl	 SHORT $LL4@setPartsPr
$LN20@setPartsPr:

; 3788 : 		}
; 3789 : 		if (!flag)
; 3790 : 			addCharPartsPrio(prePtc, &charPrioBuf[charPrioCnt]);

  000e1	6b c7 2c	 imul	 eax, edi, 44
  000e4	05 00 00 00 00	 add	 eax, OFFSET ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A ; charPrioBuf
  000e9	50		 push	 eax
  000ea	51		 push	 ecx
$LN22@setPartsPr:

; 3791 : 	}
; 3792 : 	charPrioCnt++;

  000eb	e8 00 00 00 00	 call	 ?addCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; addCharPartsPrio
  000f0	83 c4 08	 add	 esp, 8
  000f3	ff 05 00 00 00
	00		 inc	 DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
  000f9	5b		 pop	 ebx
$LN1@setPartsPr:

; 3793 : }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
$LN15@setPartsPr:

; 3781 : 				{
; 3782 : 					insertCharPartsPrio(ptc, &charPrioBuf[charPrioCnt]);

  00100	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?charPrioCnt@@3HA, 44 ; charPrioCnt
  00107	05 00 00 00 00	 add	 eax, OFFSET ?charPrioBuf@@3PAUTAG_CHAR_PARTS_PRIORITY@@A ; charPrioBuf
  0010c	50		 push	 eax
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 ?insertCharPartsPrio@@YAXPAUTAG_CHAR_PARTS_PRIORITY@@0@Z ; insertCharPartsPrio

; 3791 : 	}
; 3792 : 	charPrioCnt++;

  00113	83 c4 08	 add	 esp, 8
  00116	ff 05 00 00 00
	00		 inc	 DWORD PTR ?charPrioCnt@@3HA ; charPrioCnt
  0011c	5b		 pop	 ebx
  0011d	5f		 pop	 edi

; 3793 : }

  0011e	5e		 pop	 esi
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
?setPartsPrio@@YAXHHHHHMMH@Z ENDP			; setPartsPrio
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?initCharPartsPrio@@YAXXZ
_TEXT	SEGMENT
?initCharPartsPrio@@YAXXZ PROC				; initCharPartsPrio, COMDAT

; 3737 : 	charPrioCnt = 0;

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?charPrioCnt@@3HA, 0 ; charPrioCnt

; 3738 : 	charPrioBufTop.pre = NULL;

  0000a	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A+36, 0

; 3739 : 	charPrioBufTop.next = NULL;

  00014	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?charPrioBufTop@@3UTAG_CHAR_PARTS_PRIORITY@@A+40, 0

; 3740 : }

  0001e	c3		 ret	 0
?initCharPartsPrio@@YAXXZ ENDP				; initCharPartsPrio
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?goFrontPartyCharacter@@YAXHHH@Z
_TEXT	SEGMENT
_no$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?goFrontPartyCharacter@@YAXHHH@Z PROC			; goFrontPartyCharacter, COMDAT

; 3183 : 	int i, ox, oy;
; 3184 : 	ACTION *ptAct;
; 3185 : 
; 3186 : 	// ??????????????????
; 3187 : 	if (party[0].ptAct == NULL)
; 3188 : 		return;
; 3189 : 	// ??????????
; 3190 : 	ptAct = party[0].ptAct;
; 3191 : 	if (ptAct->bufCount > 0 || (float)ptAct->nextGx*GRID_SIZE != ptAct->mx || (float)ptAct->nextGy*GRID_SIZE != ptAct->my)
; 3192 : 		return;
; 3193 : 	// ??????????????????
; 3194 : 	for (i = no - 1; i >= 0; i--)
; 3195 : 	{
; 3196 : 		//jl fix
; 3197 : 		if (i >= 0 && i < MAX_PARTY) {
; 3198 : 			if (party[i].useFlag && party[i].ptAct != NULL)
; 3199 : 			{
; 3200 : 				if (ABS(party[i].ptAct->nextGx - party[no].ptAct->nextGx) < 2 && ABS(party[i].ptAct->nextGy - party[no].ptAct->nextGy) < 2)
; 3201 : 					return;
; 3202 : 				i = -1;
; 3203 : 				break;
; 3204 : 			}
; 3205 : 		}
; 3206 : 
; 3207 : 		if (i >= 0)
; 3208 : 			return;
; 3209 : 		nowSpdRate = 1.0F;
; 3210 : 		i = no;
; 3211 : 		while (i < MAX_PARTY)
; 3212 : 		{
; 3213 : 			if (i >= 0)
; 3214 : 			{
; 3215 : 				if (party[i].useFlag && party[i].ptAct != NULL)
; 3216 : 				{
; 3217 : 					ptAct = party[i].ptAct;
; 3218 : 					ox = party[i].ptAct->nextGx;
; 3219 : 					oy = party[i].ptAct->nextGy;
; 3220 : 					stockCharMovePoint(ptAct, x, y);
; 3221 : 					x = ox;
; 3222 : 					y = oy;
; 3223 : 				}
; 3224 : 			}
; 3225 : 			i++;
; 3226 : 		}
; 3227 : 	}
; 3228 : }

  00000	c2 00 00	 ret	 0
?goFrontPartyCharacter@@YAXHHH@Z ENDP			; goFrontPartyCharacter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?cnvServDir@@YADHH@Z
_TEXT	SEGMENT
_dir$ = 8						; size = 4
_mode$ = 12						; size = 4
?cnvServDir@@YADHH@Z PROC				; cnvServDir, COMDAT

; 3711 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3712 : 	char ret = 'f';
; 3713 : 
; 3714 : 	if (0 <= dir && dir <= 2)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _dir$[ebp]
  00006	b0 66		 mov	 al, 102			; 00000066H
  00008	85 c9		 test	 ecx, ecx
  0000a	78 1a		 js	 SHORT $LN2@cnvServDir
  0000c	83 f9 02	 cmp	 ecx, 2
  0000f	7f 15		 jg	 SHORT $LN2@cnvServDir

; 3715 : 	{
; 3716 : 		if (mode == 0)
; 3717 : 			ret = 'f' + dir;
; 3718 : 		else
; 3719 : 			ret = 'F' + dir;
; 3720 : 	}

  00011	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00015	b8 66 00 00 00	 mov	 eax, 102		; 00000066H
  0001a	ba 46 00 00 00	 mov	 edx, 70			; 00000046H
  0001f	0f 45 c2	 cmovne	 eax, edx
  00022	02 c1		 add	 al, cl

; 3727 : 	}
; 3728 : 
; 3729 : 	return ret;
; 3730 : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN2@cnvServDir:

; 3721 : 	else if (dir < 8)

  00026	83 f9 08	 cmp	 ecx, 8
  00029	7d 0c		 jge	 SHORT $LN8@cnvServDir

; 3722 : 	{
; 3723 : 		if (mode == 0)

  0002b	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0

; 3724 : 			ret = 'a' + dir - 3;

  0002f	8d 41 5e	 lea	 eax, DWORD PTR [ecx+94]
  00032	74 03		 je	 SHORT $LN8@cnvServDir

; 3725 : 		else
; 3726 : 			ret = 'A' + dir - 3;

  00034	8d 41 3e	 lea	 eax, DWORD PTR [ecx+62]
$LN8@cnvServDir:

; 3727 : 	}
; 3728 : 
; 3729 : 	return ret;
; 3730 : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?cnvServDir@@YADHH@Z ENDP				; cnvServDir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?getRouteData@@YAXHPAH0@Z
_TEXT	SEGMENT
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?getRouteData@@YAXHPAH0@Z PROC				; getRouteData, COMDAT

; 3434 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3435 : 	switch (dir)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  00006	83 f8 07	 cmp	 eax, 7
  00009	0f 87 a7 00 00
	00		 ja	 $LN12@getRouteDa
  0000f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@getRouteDa[eax*4]
$LN4@getRouteDa:

; 3436 : 	{
; 3437 : 		case 0:
; 3438 : 			*x = -1;

  00016	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00019	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 3439 : 			*y = 1;

  0001f	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00022	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN5@getRouteDa:

; 3440 : 			break;
; 3441 : 
; 3442 : 		case 1:
; 3443 : 			*x = -1;

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0002d	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  00033	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN6@getRouteDa:

; 3444 : 			*y = 0;
; 3445 : 			break;
; 3446 : 
; 3447 : 		case 2:
; 3448 : 			*x = -1;

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00041	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 3449 : 			*y = -1;

  00047	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0004a	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN7@getRouteDa:

; 3450 : 			break;
; 3451 : 
; 3452 : 		case 3:
; 3453 : 			*x = 0;

  00052	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 3454 : 			*y = -1;

  0005b	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0005e	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN8@getRouteDa:

; 3455 : 			break;
; 3456 : 
; 3457 : 		case 4:
; 3458 : 			*x = 1;

  00066	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00069	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 3459 : 			*y = -1;

  0006f	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00072	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN9@getRouteDa:

; 3460 : 			break;
; 3461 : 
; 3462 : 		case 5:
; 3463 : 			*x = 1;

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0007d	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  00083	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00086	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
$LN10@getRouteDa:

; 3464 : 			*y = 0;
; 3465 : 			break;
; 3466 : 
; 3467 : 		case 6:
; 3468 : 			*x = 1;

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00091	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 3469 : 			*y = 1;

  00097	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0009a	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
$LN11@getRouteDa:

; 3470 : 			break;
; 3471 : 
; 3472 : 		case 7:
; 3473 : 			*x = 0;

  000a2	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  000a5	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 3474 : 			*y = 1;

  000ab	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000ae	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
$LN12@getRouteDa:

; 3475 : 			break;
; 3476 : 
; 3477 : 		default:
; 3478 : 			*x = 0;

  000b6	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  000b9	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 3479 : 			*y = 0;
; 3480 : 			break;
; 3481 : 	}
; 3482 : }

  000bf	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000c2	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
  000ca	66 90		 npad	 2
$LN14@getRouteDa:
  000cc	00 00 00 00	 DD	 $LN4@getRouteDa
  000d0	00 00 00 00	 DD	 $LN5@getRouteDa
  000d4	00 00 00 00	 DD	 $LN6@getRouteDa
  000d8	00 00 00 00	 DD	 $LN7@getRouteDa
  000dc	00 00 00 00	 DD	 $LN8@getRouteDa
  000e0	00 00 00 00	 DD	 $LN9@getRouteDa
  000e4	00 00 00 00	 DD	 $LN10@getRouteDa
  000e8	00 00 00 00	 DD	 $LN11@getRouteDa
?getRouteData@@YAXHPAH0@Z ENDP				; getRouteData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?updateMapArea@@YAXXZ
_TEXT	SEGMENT
?updateMapArea@@YAXXZ PROC				; updateMapArea, COMDAT

; 2383 : 	mapAreaX1 = nowGx+MAP_TILE_GRID_X1;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nowGx@@3HA ; nowGx

; 2384 : 	mapAreaY1 = nowGy+MAP_TILE_GRID_Y1;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8d 71 ec	 lea	 esi, DWORD PTR [ecx-20]

; 2385 : 	mapAreaX2 = nowGx+MAP_TILE_GRID_X2;

  00010	83 c1 11	 add	 ecx, 17			; 00000011H
  00013	89 35 00 00 00
	00		 mov	 DWORD PTR ?mapAreaX1@@3HA, esi ; mapAreaX1
  00019	8d 50 f0	 lea	 edx, DWORD PTR [eax-16]
  0001c	89 15 00 00 00
	00		 mov	 DWORD PTR ?mapAreaY1@@3HA, edx ; mapAreaY1

; 2386 : 	mapAreaY2 = nowGy+MAP_TILE_GRID_Y2;

  00022	8d 78 15	 lea	 edi, DWORD PTR [eax+21]
  00025	85 f6		 test	 esi, esi

; 2387 : 
; 2388 : 	if (mapAreaX1 < 0)

  00027	79 0c		 jns	 SHORT $LN2@updateMapA

; 2389 : 		mapAreaX1 = 0;

  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaX1@@3HA, 0 ; mapAreaX1
  00033	33 f6		 xor	 esi, esi
$LN2@updateMapA:

; 2390 : 	if (mapAreaY1 < 0)

  00035	85 d2		 test	 edx, edx
  00037	79 0c		 jns	 SHORT $LN3@updateMapA

; 2391 : 		mapAreaY1 = 0;

  00039	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaY1@@3HA, 0 ; mapAreaY1
  00043	33 d2		 xor	 edx, edx
$LN3@updateMapA:

; 2392 : 	if (mapAreaX2 > nowFloorGxSize)

  00045	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  0004b	0f 4f 0d 00 00
	00 00		 cmovg	 ecx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize

; 2393 : 		mapAreaX2 = nowFloorGxSize;
; 2394 : 	if (mapAreaY2 > nowFloorGySize)

  00052	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  00058	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mapAreaX2@@3HA, ecx ; mapAreaX2
  0005e	0f 4f 3d 00 00
	00 00		 cmovg	 edi, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize

; 2395 : 		mapAreaY2 = nowFloorGySize;
; 2396 : 
; 2397 : 	mapAreaWidth  = mapAreaX2 - mapAreaX1;

  00065	2b ce		 sub	 ecx, esi
  00067	89 3d 00 00 00
	00		 mov	 DWORD PTR ?mapAreaY2@@3HA, edi ; mapAreaY2
  0006d	2b fa		 sub	 edi, edx

; 2398 : 	mapAreaHeight = mapAreaY2 - mapAreaY1;

  0006f	89 3d 00 00 00
	00		 mov	 DWORD PTR ?mapAreaHeight@@3HA, edi ; mapAreaHeight
  00075	5f		 pop	 edi
  00076	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mapAreaWidth@@3HA, ecx ; mapAreaWidth
  0007c	5e		 pop	 esi

; 2399 : }

  0007d	c3		 ret	 0
?updateMapArea@@YAXXZ ENDP				; updateMapArea
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapMove2@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
tv178 = -4						; size = 4
?mapMove2@@YAXXZ PROC					; mapMove2, COMDAT

; 3317 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3318 : 	float dx, dy;
; 3319 : 
; 3320 : 	// ????
; 3321 : 	if (nowVx != 0 || nowVy != 0)

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowVx@@3MA
  0000b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000e	0f 57 c9	 xorps	 xmm1, xmm1
  00011	0f 2e c1	 ucomiss xmm0, xmm1
  00014	9f		 lahf
  00015	f6 c4 44	 test	 ah, 68			; 00000044H
  00018	7a 33		 jp	 SHORT $LN4@mapMove2
  0001a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowVy@@3MA
  00022	0f 2e c1	 ucomiss xmm0, xmm1
  00025	9f		 lahf
  00026	f6 c4 44	 test	 ah, 68			; 00000044H
  00029	7a 22		 jp	 SHORT $LN4@mapMove2

; 3341 : 	}
; 3342 : 	else
; 3343 : 	{
; 3344 : 		// PC????????????WALK???????????STAND???
; 3345 : 		if (checkPcWalkFlag() == 1)

  0002b	e8 00 00 00 00	 call	 ?checkPcWalkFlag@@YAHXZ	; checkPcWalkFlag
  00030	83 f8 01	 cmp	 eax, 1
  00033	0f 85 f8 00 00
	00		 jne	 $LN7@mapMove2

; 3346 : 		{
; 3347 : 			setPcAction(ANIM_STAND);

  00039	6a 03		 push	 3
  0003b	e8 00 00 00 00	 call	 ?setPcAction@@YAXH@Z	; setPcAction
  00040	83 c4 04	 add	 esp, 4

; 3348 : 			delPcWalkFlag();

  00043	e8 00 00 00 00	 call	 ?delPcWalkFlag@@YAXXZ	; delPcWalkFlag
  00048	e9 e4 00 00 00	 jmp	 $LN7@mapMove2
$LN4@mapMove2:
  0004d	66 0f 6e 0d 00
	00 00 00	 movd	 xmm1, DWORD PTR ?nextGy@@3HA ; nextGy

; 3322 : 	{
; 3323 : 		// ?佋?????????????
; 3324 : 		dx = (float)nextGx * GRID_SIZE;
; 3325 : 		dy = (float)nextGy * GRID_SIZE;
; 3326 : 		if (pointLen2(nowX, nowY, dx, dy) <= nowVx * nowVx + nowVy * nowVy)

  00055	83 ec 10	 sub	 esp, 16			; 00000010H
  00058	66 0f 6e 15 00
	00 00 00	 movd	 xmm2, DWORD PTR ?nextGx@@3HA ; nextGx
  00060	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowY@@3MA
  00068	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0006b	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0006e	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42800000
  00076	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@42800000
  0007e	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  00084	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp], xmm1
  00089	f3 0f 11 54 24
	08		 movss	 DWORD PTR [esp+8], xmm2
  0008f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowX@@3MA
  0009d	f3 0f 11 55 f4	 movss	 DWORD PTR $T1[ebp], xmm2
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	e8 00 00 00 00	 call	 ?pointLen2@@YAMMMMM@Z	; pointLen2
  000ac	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?nowVy@@3MA
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
  000b7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR ?nowVx@@3MA
  000bf	0f 28 ca	 movaps	 xmm1, xmm2
  000c2	0f 28 c3	 movaps	 xmm0, xmm3
  000c5	f3 0f 59 ca	 mulss	 xmm1, xmm2
  000c9	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000cd	d9 5d fc	 fstp	 DWORD PTR tv178[ebp]
  000d0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000d4	0f 2f 4d fc	 comiss	 xmm1, DWORD PTR tv178[ebp]
  000d8	72 20		 jb	 SHORT $LN5@mapMove2

; 3327 : 		{
; 3328 : 			nowX = dx;
; 3329 : 			nowY = dy;
; 3330 : 			nowVx = 0;
; 3331 : 			nowVy = 0;
; 3332 : 		}

  000da	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR $T2[ebp]
  000df	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR $T1[ebp]
  000e4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVx@@3MA, 0
  000ee	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVy@@3MA, 0
  000f8	eb 18		 jmp	 SHORT $LN6@mapMove2
$LN5@mapMove2:

; 3333 : 		// ?
; 3334 : 		else
; 3335 : 		{
; 3336 : 			nowX += nowVx;
; 3337 : 			nowY += nowVy;

  000fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowY@@3MA
  00102	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?nowX@@3MA
  0010a	f3 0f 58 c2	 addss	 xmm0, xmm2
  0010e	f3 0f 58 cb	 addss	 xmm1, xmm3
$LN6@mapMove2:

; 3338 : 		}
; 3339 : 		setPcAction(ANIM_WALK);

  00112	6a 04		 push	 4
  00114	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?nowX@@3MA, xmm1
  0011c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowY@@3MA, xmm0
  00124	e8 00 00 00 00	 call	 ?setPcAction@@YAXH@Z	; setPcAction
  00129	83 c4 04	 add	 esp, 4

; 3340 : 		setPcWalkFlag();

  0012c	e8 00 00 00 00	 call	 ?setPcWalkFlag@@YAXXZ	; setPcWalkFlag
$LN7@mapMove2:

; 3349 : 		}
; 3350 : 	}
; 3351 : 
; 3352 : 	nowGx = (int)(nowX / GRID_SIZE);

  00131	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowX@@3MA
  00139	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  00141	f3 0f 2c c0	 cvttss2si eax, xmm0

; 3353 : 	nowGy = (int)(nowY / GRID_SIZE);

  00145	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowY@@3MA
  0014d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  00155	a3 00 00 00 00	 mov	 DWORD PTR ?nowGx@@3HA, eax ; nowGx
  0015a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0015e	a3 00 00 00 00	 mov	 DWORD PTR ?nowGy@@3HA, eax ; nowGy

; 3354 : 	// PC?????????????
; 3355 : 	setPcPoint();

  00163	e8 00 00 00 00	 call	 ?setPcPoint@@YAXXZ	; setPcPoint

; 3356 : }

  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
?mapMove2@@YAXXZ ENDP					; mapMove2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setMapMovePoint2@@YAXHH@Z
_TEXT	SEGMENT
_rate$1$ = -12						; size = 4
_dir1$ = -12						; size = 4
_dx$2$ = -8						; size = 4
_dy$2$ = -4						; size = 4
__nextGx$ = 8						; size = 4
__nextGy$ = 12						; size = 4
?setMapMovePoint2@@YAXHH@Z PROC				; setMapMovePoint2, COMDAT

; 3270 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 10	 sub	 esp, 16			; 00000010H

; 3271 : 	float dx, dy, len, dir1, rate = 1.0F;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000

; 3272 : 	int dir;
; 3273 : 
; 3274 : 	if (pc.ptAct != NULL)

  00011	a1 ec 50 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+20716
  00016	f3 0f 11 44 24
	04		 movss	 DWORD PTR _rate$1$[esp+16], xmm0
  0001c	85 c0		 test	 eax, eax
  0001e	74 3b		 je	 SHORT $LN7@setMapMove

; 3275 : 	{
; 3276 : 		if (pc.ptAct->bufCount > 5)

  00020	0f b7 80 14 01
	00 00		 movzx	 eax, WORD PTR [eax+276]
  00027	66 83 f8 05	 cmp	 ax, 5
  0002b	7e 0a		 jle	 SHORT $LN3@setMapMove

; 3277 : 			rate = 2.0F;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00035	eb 1e		 jmp	 SHORT $LN15@setMapMove
$LN3@setMapMove:

; 3278 : 		else if (pc.ptAct->bufCount >= 4)

  00037	66 83 f8 04	 cmp	 ax, 4
  0003b	7c 0a		 jl	 SHORT $LN5@setMapMove

; 3279 : 			rate = 1.6F;

  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fcccccd
  00045	eb 0e		 jmp	 SHORT $LN15@setMapMove
$LN5@setMapMove:

; 3280 : 		else if (pc.ptAct->bufCount >= 2)

  00047	66 83 f8 02	 cmp	 ax, 2
  0004b	7c 0e		 jl	 SHORT $LN7@setMapMove

; 3281 : 			rate = 1.2F;

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f99999a
$LN15@setMapMove:

; 3282 : 	}
; 3283 : 
; 3284 : 	nextGx = _nextGx;

  00055	f3 0f 11 44 24
	04		 movss	 DWORD PTR _rate$1$[esp+16], xmm0
$LN7@setMapMove:

; 3285 : 	nextGy = _nextGy;

  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR __nextGy$[ebp]
  0005e	8b 45 08	 mov	 eax, DWORD PTR __nextGx$[ebp]
  00061	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nextGy@@3HA, ecx ; nextGy

; 3286 : 	// ??????
; 3287 : 	dx = nextGx * GRID_SIZE - nowX;

  00067	c1 e1 06	 shl	 ecx, 6
  0006a	a3 00 00 00 00	 mov	 DWORD PTR ?nextGx@@3HA, eax ; nextGx
  0006f	c1 e0 06	 shl	 eax, 6
  00072	66 0f 6e c1	 movd	 xmm0, ecx

; 3288 : 	dy = nextGy * GRID_SIZE - nowY;

  00076	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00079	66 0f 6e d0	 movd	 xmm2, eax
  0007d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?nowY@@3MA
  00085	0f 5b d2	 cvtdq2ps xmm2, xmm2

; 3289 : 	len = (float)sqrt((double)(dx * dx + dy * dy));

  00088	0f 28 c8	 movaps	 xmm1, xmm0
  0008b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR _dy$2$[esp+16], xmm0
  00091	f3 0f 5c 15 00
	00 00 00	 subss	 xmm2, DWORD PTR ?nowX@@3MA
  00099	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0009d	0f 28 c2	 movaps	 xmm0, xmm2
  000a0	f3 0f 11 54 24
	08		 movss	 DWORD PTR _dx$2$[esp+16], xmm2
  000a6	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000aa	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ae	0f 5a c1	 cvtps2pd xmm0, xmm1
  000b1	0f 57 c9	 xorps	 xmm1, xmm1
  000b4	66 0f 2e c8	 ucomisd xmm1, xmm0
  000b8	77 06		 ja	 SHORT $LN13@setMapMove
  000ba	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  000be	eb 05		 jmp	 SHORT $LN14@setMapMove
$LN13@setMapMove:
  000c0	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN14@setMapMove:
  000c5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c9	0f 57 ed	 xorps	 xmm5, xmm5

; 3290 : 	if (len > 0)

  000cc	0f 2f c5	 comiss	 xmm0, xmm5
  000cf	76 16		 jbe	 SHORT $LN8@setMapMove

; 3291 : 	{
; 3292 : 		dx /= len;

  000d1	f3 0f 10 64 24
	08		 movss	 xmm4, DWORD PTR _dx$2$[esp+16]

; 3293 : 		dy /= len;

  000d7	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR _dy$2$[esp+16]
  000dd	f3 0f 5e e0	 divss	 xmm4, xmm0
  000e1	f3 0f 5e d0	 divss	 xmm2, xmm0

; 3294 : 	}

  000e5	eb 06		 jmp	 SHORT $LN9@setMapMove
$LN8@setMapMove:
  000e7	0f 57 e4	 xorps	 xmm4, xmm4
  000ea	0f 57 d2	 xorps	 xmm2, xmm2
$LN9@setMapMove:

; 3295 : 	else
; 3296 : 	{
; 3297 : 		dx = 0;
; 3298 : 		dy = 0;
; 3299 : 	}
; 3300 : 	nowVx = dx * MOVE_SPEED * rate;

  000ed	0f 28 c4	 movaps	 xmm0, xmm4
  000f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000

; 3301 : 	nowVy = dy * MOVE_SPEED * rate;
; 3302 : 	// PC?????
; 3303 : 	if (dx != 0 || dy != 0)

  000f8	0f 2e e5	 ucomiss xmm4, xmm5
  000fb	f3 0f 59 44 24
	04		 mulss	 xmm0, DWORD PTR _rate$1$[esp+16]
  00101	9f		 lahf
  00102	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowVx@@3MA, xmm0
  0010a	0f 28 c2	 movaps	 xmm0, xmm2
  0010d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  00115	f3 0f 59 44 24
	04		 mulss	 xmm0, DWORD PTR _rate$1$[esp+16]
  0011b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowVy@@3MA, xmm0
  00123	f6 c4 44	 test	 ah, 68			; 00000044H
  00126	7a 09		 jp	 SHORT $LN11@setMapMove
  00128	0f 2e d5	 ucomiss xmm2, xmm5
  0012b	9f		 lahf
  0012c	f6 c4 44	 test	 ah, 68			; 00000044H
  0012f	7b 47		 jnp	 SHORT $LN10@setMapMove
$LN11@setMapMove:

; 3304 : 	{
; 3305 : 		dir1 = Atan(dx, dy) + 22.5F;

  00131	83 ec 08	 sub	 esp, 8
  00134	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  0013a	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  0013f	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  00144	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 3306 : 		AdjustDir(&dir1);

  0014a	8d 44 24 0c	 lea	 eax, DWORD PTR _dir1$[esp+24]
  0014e	50		 push	 eax
  0014f	d9 5c 24 10	 fstp	 DWORD PTR _dir1$[esp+28]
  00153	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 3307 : 		dir = (int)(dir1 / 45);

  00158	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR _dir1$[esp+28]
  0015e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000
  00166	f3 0f 2c c0	 cvttss2si eax, xmm0

; 3308 : 		setPcDir(dir);

  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 ?setPcDir@@YAXH@Z	; setPcDir
  00170	83 c4 10	 add	 esp, 16			; 00000010H

; 3309 : 		setPcWalkFlag();

  00173	e8 00 00 00 00	 call	 ?setPcWalkFlag@@YAXXZ	; setPcWalkFlag
$LN10@setMapMove:

; 3310 : 	}
; 3311 : 	// PC?????????????
; 3312 : 	setPcPoint();

  00178	e8 00 00 00 00	 call	 ?setPcPoint@@YAXXZ	; setPcPoint

; 3313 : }

  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c3		 ret	 0
?setMapMovePoint2@@YAXHH@Z ENDP				; setMapMovePoint2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setMapMovePoint@@YAXHH@Z
_TEXT	SEGMENT
_dx$2$ = -8						; size = 4
_dir1$ = -8						; size = 4
_dy$2$ = -4						; size = 4
__nextGx$ = 8						; size = 4
__nextGy$ = 12						; size = 4
?setMapMovePoint@@YAXHH@Z PROC				; setMapMovePoint, COMDAT

; 3232 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8

; 3233 : 	float dx, dy, len, dir1, rate = 1.0F;
; 3234 : 	int dir;
; 3235 : 
; 3236 : 	nextGx = _nextGx;
; 3237 : 	nextGy = _nextGy;

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __nextGy$[ebp]
  0000c	8b 45 08	 mov	 eax, DWORD PTR __nextGx$[ebp]
  0000f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nextGy@@3HA, ecx ; nextGy

; 3238 : 	// ??????
; 3239 : 	dx = nextGx * GRID_SIZE - nowX;

  00015	c1 e1 06	 shl	 ecx, 6
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?nextGx@@3HA, eax ; nextGx
  0001d	c1 e0 06	 shl	 eax, 6
  00020	66 0f 6e c1	 movd	 xmm0, ecx

; 3240 : 	dy = nextGy * GRID_SIZE - nowY;

  00024	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00027	66 0f 6e d0	 movd	 xmm2, eax
  0002b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?nowY@@3MA
  00033	0f 5b d2	 cvtdq2ps xmm2, xmm2

; 3241 : 	len = (float)sqrt((double)(dx * dx + dy * dy));

  00036	0f 28 c8	 movaps	 xmm1, xmm0
  00039	f3 0f 11 44 24
	04		 movss	 DWORD PTR _dy$2$[esp+8], xmm0
  0003f	f3 0f 5c 15 00
	00 00 00	 subss	 xmm2, DWORD PTR ?nowX@@3MA
  00047	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0004b	0f 28 c2	 movaps	 xmm0, xmm2
  0004e	f3 0f 11 14 24	 movss	 DWORD PTR _dx$2$[esp+8], xmm2
  00053	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00057	f3 0f 58 c8	 addss	 xmm1, xmm0
  0005b	0f 5a c1	 cvtps2pd xmm0, xmm1
  0005e	0f 57 c9	 xorps	 xmm1, xmm1
  00061	66 0f 2e c8	 ucomisd xmm1, xmm0
  00065	77 06		 ja	 SHORT $LN7@setMapMove
  00067	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0006b	eb 05		 jmp	 SHORT $LN8@setMapMove
$LN7@setMapMove:
  0006d	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN8@setMapMove:
  00072	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00076	0f 57 e4	 xorps	 xmm4, xmm4

; 3242 : 	if (len > 0)

  00079	0f 2f c4	 comiss	 xmm0, xmm4
  0007c	76 15		 jbe	 SHORT $LN2@setMapMove

; 3243 : 	{
; 3244 : 		dx /= len;

  0007e	f3 0f 10 1c 24	 movss	 xmm3, DWORD PTR _dx$2$[esp+8]

; 3245 : 		dy /= len;

  00083	f3 0f 10 54 24
	04		 movss	 xmm2, DWORD PTR _dy$2$[esp+8]
  00089	f3 0f 5e d8	 divss	 xmm3, xmm0
  0008d	f3 0f 5e d0	 divss	 xmm2, xmm0

; 3246 : 	}

  00091	eb 06		 jmp	 SHORT $LN3@setMapMove
$LN2@setMapMove:
  00093	0f 57 db	 xorps	 xmm3, xmm3
  00096	0f 57 d2	 xorps	 xmm2, xmm2
$LN3@setMapMove:

; 3247 : 	else
; 3248 : 	{
; 3249 : 		dx = 0;
; 3250 : 		dy = 0;
; 3251 : 	}
; 3252 : 	nowVx = dx * MOVE_SPEED * rate;

  00099	0f 28 c3	 movaps	 xmm0, xmm3
  0009c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000

; 3253 : 	nowVy = dy * MOVE_SPEED * rate;
; 3254 : 
; 3255 : 	// PC?????
; 3256 : 	if (dx != 0 || dy != 0)

  000a4	0f 2e dc	 ucomiss xmm3, xmm4
  000a7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowVx@@3MA, xmm0
  000af	0f 28 c2	 movaps	 xmm0, xmm2
  000b2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  000ba	9f		 lahf
  000bb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?nowVy@@3MA, xmm0
  000c3	f6 c4 44	 test	 ah, 68			; 00000044H
  000c6	7a 09		 jp	 SHORT $LN5@setMapMove
  000c8	0f 2e d4	 ucomiss xmm2, xmm4
  000cb	9f		 lahf
  000cc	f6 c4 44	 test	 ah, 68			; 00000044H
  000cf	7b 47		 jnp	 SHORT $LN4@setMapMove
$LN5@setMapMove:

; 3257 : 	{
; 3258 : 		dir1 = Atan(dx, dy) + 22.5F;

  000d1	83 ec 08	 sub	 esp, 8
  000d4	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  000da	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  000df	e8 00 00 00 00	 call	 ?Atan@@YAMMM@Z		; Atan
  000e4	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41b40000

; 3259 : 		AdjustDir(&dir1);

  000ea	8d 44 24 08	 lea	 eax, DWORD PTR _dir1$[esp+16]
  000ee	50		 push	 eax
  000ef	d9 5c 24 0c	 fstp	 DWORD PTR _dir1$[esp+20]
  000f3	e8 00 00 00 00	 call	 ?AdjustDir@@YAXPAM@Z	; AdjustDir

; 3260 : 		dir = (int)(dir1 / 45);

  000f8	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR _dir1$[esp+20]
  000fe	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42340000
  00106	f3 0f 2c c0	 cvttss2si eax, xmm0

; 3261 : 		setPcDir(dir);

  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?setPcDir@@YAXH@Z	; setPcDir
  00110	83 c4 10	 add	 esp, 16			; 00000010H

; 3262 : 		setPcWalkFlag();

  00113	e8 00 00 00 00	 call	 ?setPcWalkFlag@@YAXXZ	; setPcWalkFlag
$LN4@setMapMove:

; 3263 : 	}
; 3264 : 	// PC?????????????
; 3265 : 	setPcPoint();

  00118	e8 00 00 00 00	 call	 ?setPcPoint@@YAXXZ	; setPcPoint

; 3266 : }

  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
?setMapMovePoint@@YAXHH@Z ENDP				; setMapMovePoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?checkEmptyMap@@YAHH@Z
_TEXT	SEGMENT
tv1322 = -12						; size = 4
tv1321 = -12						; size = 4
_flag$1$ = -8						; size = 4
tv1250 = -4						; size = 4
_dir$ = 8						; size = 4
?checkEmptyMap@@YAHH@Z PROC				; checkEmptyMap, COMDAT

; 1908 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1909 : 	// ????????11??????????????TRUE??
; 1910 : 	int i, gx, gy, tx, ty, len;
; 1911 : 	BOOL flag = FALSE;
; 1912 : 
; 1913 : 	if (mapAreaWidth < MAP_X_SIZE || mapAreaHeight < MAP_Y_SIZE)

  00006	83 3d 00 00 00
	00 25		 cmp	 DWORD PTR ?mapAreaWidth@@3HA, 37 ; mapAreaWidth, 00000025H
  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _flag$1$[ebp], 0
  00014	0f 8c 73 03 00
	00		 jl	 $LN15@checkEmpty
  0001a	83 3d 00 00 00
	00 25		 cmp	 DWORD PTR ?mapAreaHeight@@3HA, 37 ; mapAreaHeight, 00000025H
  00021	0f 8c 66 03 00
	00		 jl	 $LN15@checkEmpty

; 1915 : 
; 1916 : 	getMapAreaCnt = 0;
; 1917 : 
; 1918 : 	if (dir == 0 || dir == 1 || dir == 2)

  00027	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  0002a	33 c9		 xor	 ecx, ecx
  0002c	89 4d fc	 mov	 DWORD PTR tv1250[ebp], ecx
  0002f	66 89 0d 00 00
	00 00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, cx ; getMapAreaCnt
  00036	53		 push	 ebx
  00037	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  0003d	56		 push	 esi
  0003e	57		 push	 edi
  0003f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  00045	85 c0		 test	 eax, eax
  00047	74 0e		 je	 SHORT $LN17@checkEmpty
  00049	83 f8 01	 cmp	 eax, 1
  0004c	74 09		 je	 SHORT $LN17@checkEmpty
  0004e	83 f8 02	 cmp	 eax, 2
  00051	0f 85 bf 00 00
	00		 jne	 $LN55@checkEmpty
$LN17@checkEmpty:

; 1919 : 	{
; 1920 : 		gx = nowGx - SEARCH_AREA;
; 1921 : 		gy = nowGy - SEARCH_AREA;

  00057	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nowGy@@3HA ; nowGy
  0005d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?nowGx@@3HA ; nowGx
  00063	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00069	83 c6 f5	 add	 esi, -11		; fffffff5H
  0006c	8d 4a f5	 lea	 ecx, DWORD PTR [edx-11]
  0006f	8b c1		 mov	 eax, ecx
  00071	2b c2		 sub	 eax, edx
  00073	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  00076	89 5d f4	 mov	 DWORD PTR tv1322[ebp], ebx
  00079	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  0007f	8d 50 0b	 lea	 edx, DWORD PTR [eax+11]
  00082	83 c0 10	 add	 eax, 16			; 00000010H
  00085	0f af c7	 imul	 eax, edi
  00088	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  0008e	8d 04 45 12 00
	00 00		 lea	 eax, DWORD PTR ?event@@3PAGA[eax*2+18]
$LL4@checkEmpty:

; 1926 : 		{
; 1927 : 			if ((0 <= gx && gx < nowFloorGxSize) && (0 <= gy && gy < nowFloorGySize))

  00095	85 f6		 test	 esi, esi
  00097	78 12		 js	 SHORT $LN19@checkEmpty
  00099	3b f3		 cmp	 esi, ebx
  0009b	7d 0e		 jge	 SHORT $LN19@checkEmpty
  0009d	85 c9		 test	 ecx, ecx
  0009f	78 0a		 js	 SHORT $LN19@checkEmpty
  000a1	3b cf		 cmp	 ecx, edi
  000a3	7d 06		 jge	 SHORT $LN19@checkEmpty

; 1928 : 			{
; 1929 : 				if (event[ty * mapAreaWidth + tx] == 0)

  000a5	66 83 38 00	 cmp	 WORD PTR [eax], 0
  000a9	74 0c		 je	 SHORT $LN37@checkEmpty
$LN19@checkEmpty:

; 1938 : 					break;
; 1939 : 				}
; 1940 : 			}
; 1941 : 			gy++;

  000ab	03 45 f4	 add	 eax, DWORD PTR tv1322[ebp]
  000ae	42		 inc	 edx
  000af	41		 inc	 ecx
  000b0	83 fa 17	 cmp	 edx, 23			; 00000017H
  000b3	7c e0		 jl	 SHORT $LL4@checkEmpty

; 1922 : 		tx = -SEARCH_AREA - MAP_TILE_GRID_X1;
; 1923 : 		ty = -SEARCH_AREA - MAP_TILE_GRID_Y1;
; 1924 : 		len = (SEARCH_AREA << 1) + 1;
; 1925 : 		for (i = 0; i < len; i++)

  000b5	eb 57		 jmp	 SHORT $LN56@checkEmpty
$LN37@checkEmpty:

; 1930 : 				{
; 1931 : 					getMapAreaX1[getMapAreaCnt] = gx - 1;

  000b7	0f b7 d6	 movzx	 edx, si

; 1932 : 					getMapAreaY1[getMapAreaCnt] = gy - 1;

  000ba	0f b7 c9	 movzx	 ecx, cx

; 1933 : 					getMapAreaX2[getMapAreaCnt] = gx + 1;
; 1934 : 					getMapAreaY2[getMapAreaCnt] = gy + (SEARCH_AREA << 1) + 1;
; 1935 : 					checkAreaLimit(&getMapAreaX1[getMapAreaCnt], &getMapAreaY1[getMapAreaCnt], &getMapAreaX2[getMapAreaCnt], &getMapAreaY2[getMapAreaCnt]);

  000bd	68 00 00 00 00	 push	 OFFSET ?getMapAreaY2@@3PAFA ; getMapAreaY2
  000c2	68 00 00 00 00	 push	 OFFSET ?getMapAreaX2@@3PAFA ; getMapAreaX2
  000c7	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  000ca	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaX1@@3PAFA, ax
  000d0	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  000d3	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaY1@@3PAFA, ax
  000d9	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000dc	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaX2@@3PAFA, ax
  000e2	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]
  000e5	68 00 00 00 00	 push	 OFFSET ?getMapAreaY1@@3PAFA ; getMapAreaY1
  000ea	68 00 00 00 00	 push	 OFFSET ?getMapAreaX1@@3PAFA ; getMapAreaX1
  000ef	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaY2@@3PAFA, ax
  000f5	e8 00 00 00 00	 call	 ?checkAreaLimit@@YAXPAF000@Z ; checkAreaLimit

; 1936 : 					getMapAreaCnt++;

  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	83 c4 10	 add	 esp, 16			; 00000010H
  00102	89 45 fc	 mov	 DWORD PTR tv1250[ebp], eax
  00105	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, ax ; getMapAreaCnt

; 1937 : 					flag = TRUE;

  0010b	89 45 f8	 mov	 DWORD PTR _flag$1$[ebp], eax
$LN56@checkEmpty:

; 1942 : 			ty++;
; 1943 : 		}
; 1944 : 	}
; 1945 : 	if (dir == 2 || dir == 3 || dir == 4)

  0010e	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  00111	83 f8 02	 cmp	 eax, 2
  00114	74 0e		 je	 SHORT $LN21@checkEmpty
$LN55@checkEmpty:
  00116	83 f8 03	 cmp	 eax, 3
  00119	74 09		 je	 SHORT $LN21@checkEmpty
  0011b	83 f8 04	 cmp	 eax, 4
  0011e	0f 85 c5 00 00
	00		 jne	 $LN54@checkEmpty
$LN21@checkEmpty:

; 1946 : 	{
; 1947 : 		gx = nowGx - SEARCH_AREA;

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGx@@3HA ; nowGx

; 1948 : 		gy = nowGy - SEARCH_AREA;

  00129	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?nowGy@@3HA ; nowGy
  0012f	83 c6 f5	 add	 esi, -11		; fffffff5H
  00132	8d 50 f5	 lea	 edx, DWORD PTR [eax-11]
  00135	8b ca		 mov	 ecx, edx
  00137	2b c8		 sub	 ecx, eax
  00139	83 c1 14	 add	 ecx, 20			; 00000014H
  0013c	0f 1f 40 00	 npad	 4
$LL7@checkEmpty:

; 1953 : 		{
; 1954 : 			if ((0 <= gx && gx < nowFloorGxSize) && (0 <= gy && gy < nowFloorGySize))

  00140	85 d2		 test	 edx, edx
  00142	78 2b		 js	 SHORT $LN23@checkEmpty
  00144	3b d3		 cmp	 edx, ebx
  00146	7d 27		 jge	 SHORT $LN23@checkEmpty
  00148	85 f6		 test	 esi, esi
  0014a	78 23		 js	 SHORT $LN23@checkEmpty
  0014c	3b f7		 cmp	 esi, edi
  0014e	7d 1f		 jge	 SHORT $LN23@checkEmpty

; 1955 : 			{
; 1956 : 				if (event[ty * mapAreaWidth + tx] == 0)

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00155	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  0015b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0015e	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00164	66 83 3c 45 00
	00 00 00 00	 cmp	 WORD PTR ?event@@3PAGA[eax*2], 0
  0016d	74 0c		 je	 SHORT $LN38@checkEmpty
$LN23@checkEmpty:

; 1965 : 					break;
; 1966 : 				}
; 1967 : 			}
; 1968 : 			gx++;

  0016f	41		 inc	 ecx
  00170	42		 inc	 edx
  00171	8d 41 f7	 lea	 eax, DWORD PTR [ecx-9]
  00174	83 f8 17	 cmp	 eax, 23			; 00000017H
  00177	7c c7		 jl	 SHORT $LL7@checkEmpty

; 1949 : 		tx = -SEARCH_AREA - MAP_TILE_GRID_X1;
; 1950 : 		ty = -SEARCH_AREA - MAP_TILE_GRID_Y1;
; 1951 : 		len = (SEARCH_AREA << 1) + 1;
; 1952 : 		for (i = 0; i < len; i++)

  00179	eb 66		 jmp	 SHORT $LN57@checkEmpty
$LN38@checkEmpty:

; 1957 : 				{
; 1958 : 					getMapAreaX1[getMapAreaCnt] = gx - 1;

  0017b	8b 45 fc	 mov	 eax, DWORD PTR tv1250[ebp]
  0017e	0f bf d8	 movsx	 ebx, ax
  00181	0f b7 ca	 movzx	 ecx, dx

; 1959 : 					getMapAreaY1[getMapAreaCnt] = gy - 1;

  00184	8d 3c 5d 00 00
	00 00		 lea	 edi, DWORD PTR ?getMapAreaY1@@3PAFA[ebx*2]
  0018b	0f b7 f6	 movzx	 esi, si

; 1960 : 					getMapAreaX2[getMapAreaCnt] = gx + (SEARCH_AREA << 1) + 1;

  0018e	8d 14 5d 00 00
	00 00		 lea	 edx, DWORD PTR ?getMapAreaX2@@3PAFA[ebx*2]
  00195	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00198	66 89 04 5d 00
	00 00 00	 mov	 WORD PTR ?getMapAreaX1@@3PAFA[ebx*2], ax
  001a0	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  001a3	66 89 07	 mov	 WORD PTR [edi], ax
  001a6	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]

; 1961 : 					getMapAreaY2[getMapAreaCnt] = gy + 1;

  001a9	8d 0c 5d 00 00
	00 00		 lea	 ecx, DWORD PTR ?getMapAreaY2@@3PAFA[ebx*2]
  001b0	66 89 02	 mov	 WORD PTR [edx], ax

; 1962 : 					checkAreaLimit(&getMapAreaX1[getMapAreaCnt], &getMapAreaY1[getMapAreaCnt], &getMapAreaX2[getMapAreaCnt], &getMapAreaY2[getMapAreaCnt]);

  001b3	51		 push	 ecx
  001b4	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001b7	52		 push	 edx
  001b8	66 89 01	 mov	 WORD PTR [ecx], ax
  001bb	8d 04 5d 00 00
	00 00		 lea	 eax, DWORD PTR ?getMapAreaX1@@3PAFA[ebx*2]
  001c2	57		 push	 edi
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 ?checkAreaLimit@@YAXPAF000@Z ; checkAreaLimit

; 1963 : 					getMapAreaCnt++;

  001c9	8b 45 fc	 mov	 eax, DWORD PTR tv1250[ebp]
  001cc	83 c4 10	 add	 esp, 16			; 00000010H
  001cf	66 40		 inc	 ax

; 1964 : 					flag = TRUE;

  001d1	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _flag$1$[ebp], 1
  001d8	89 45 fc	 mov	 DWORD PTR tv1250[ebp], eax
  001db	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, ax ; getMapAreaCnt
$LN57@checkEmpty:

; 1969 : 			tx++;
; 1970 : 		}
; 1971 : 	}
; 1972 : 	if (dir == 4 || dir == 5 || dir == 6)

  001e1	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  001e4	83 f8 04	 cmp	 eax, 4
  001e7	74 0e		 je	 SHORT $LN25@checkEmpty
$LN54@checkEmpty:
  001e9	83 f8 05	 cmp	 eax, 5
  001ec	74 09		 je	 SHORT $LN25@checkEmpty
  001ee	83 f8 06	 cmp	 eax, 6
  001f1	0f 85 cb 00 00
	00		 jne	 $LN53@checkEmpty
$LN25@checkEmpty:

; 1973 : 	{
; 1974 : 		gx = nowGx + SEARCH_AREA;
; 1975 : 		gy = nowGy - SEARCH_AREA;

  001f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nowGy@@3HA ; nowGy
  001fd	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?nowGx@@3HA ; nowGx
  00203	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00209	83 c6 0b	 add	 esi, 11			; 0000000bH
  0020c	8d 51 f5	 lea	 edx, DWORD PTR [ecx-11]
  0020f	8b c2		 mov	 eax, edx
  00211	2b c1		 sub	 eax, ecx
  00213	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  00216	89 5d f4	 mov	 DWORD PTR tv1321[ebp], ebx
  00219	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  0021f	8d 48 0b	 lea	 ecx, DWORD PTR [eax+11]
  00222	83 c0 10	 add	 eax, 16			; 00000010H
  00225	0f af c7	 imul	 eax, edi
  00228	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  0022e	8d 04 45 3e 00
	00 00		 lea	 eax, DWORD PTR ?event@@3PAGA[eax*2+62]
$LL10@checkEmpty:

; 1980 : 		{
; 1981 : 			if ((0 <= gx && gx < nowFloorGxSize) && (0 <= gy && gy < nowFloorGySize))

  00235	85 f6		 test	 esi, esi
  00237	78 12		 js	 SHORT $LN27@checkEmpty
  00239	3b f3		 cmp	 esi, ebx
  0023b	7d 0e		 jge	 SHORT $LN27@checkEmpty
  0023d	85 d2		 test	 edx, edx
  0023f	78 0a		 js	 SHORT $LN27@checkEmpty
  00241	3b d7		 cmp	 edx, edi
  00243	7d 06		 jge	 SHORT $LN27@checkEmpty

; 1982 : 			{
; 1983 : 				if (event[ty * mapAreaWidth + tx] == 0)

  00245	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00249	74 0c		 je	 SHORT $LN39@checkEmpty
$LN27@checkEmpty:

; 1992 : 					break;
; 1993 : 				}
; 1994 : 			}
; 1995 : 			gy++;

  0024b	03 45 f4	 add	 eax, DWORD PTR tv1321[ebp]
  0024e	41		 inc	 ecx
  0024f	42		 inc	 edx
  00250	83 f9 17	 cmp	 ecx, 23			; 00000017H
  00253	7c e0		 jl	 SHORT $LL10@checkEmpty

; 1976 : 		tx = SEARCH_AREA - MAP_TILE_GRID_X1;
; 1977 : 		ty = -SEARCH_AREA - MAP_TILE_GRID_Y1;
; 1978 : 		len = (SEARCH_AREA << 1) + 1;
; 1979 : 		for (i = 0; i < len; i++)

  00255	eb 63		 jmp	 SHORT $LN58@checkEmpty
$LN39@checkEmpty:

; 1984 : 				{
; 1985 : 					getMapAreaX1[getMapAreaCnt] = gx;

  00257	8b 45 fc	 mov	 eax, DWORD PTR tv1250[ebp]
  0025a	0f bf d8	 movsx	 ebx, ax
  0025d	0f b7 ce	 movzx	 ecx, si

; 1986 : 					getMapAreaY1[getMapAreaCnt] = gy - 1;

  00260	8d 3c 5d 00 00
	00 00		 lea	 edi, DWORD PTR ?getMapAreaY1@@3PAFA[ebx*2]
  00267	0f b7 f2	 movzx	 esi, dx

; 1987 : 					getMapAreaX2[getMapAreaCnt] = gx + 2;

  0026a	8d 14 5d 00 00
	00 00		 lea	 edx, DWORD PTR ?getMapAreaX2@@3PAFA[ebx*2]
  00271	66 89 0c 5d 00
	00 00 00	 mov	 WORD PTR ?getMapAreaX1@@3PAFA[ebx*2], cx
  00279	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0027c	66 89 07	 mov	 WORD PTR [edi], ax
  0027f	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]

; 1988 : 					getMapAreaY2[getMapAreaCnt] = gy + (SEARCH_AREA << 1) + 1;

  00282	8d 0c 5d 00 00
	00 00		 lea	 ecx, DWORD PTR ?getMapAreaY2@@3PAFA[ebx*2]
  00289	66 89 02	 mov	 WORD PTR [edx], ax

; 1989 : 					checkAreaLimit(&getMapAreaX1[getMapAreaCnt], &getMapAreaY1[getMapAreaCnt], &getMapAreaX2[getMapAreaCnt], &getMapAreaY2[getMapAreaCnt]);

  0028c	51		 push	 ecx
  0028d	8d 46 17	 lea	 eax, DWORD PTR [esi+23]
  00290	52		 push	 edx
  00291	66 89 01	 mov	 WORD PTR [ecx], ax
  00294	8d 04 5d 00 00
	00 00		 lea	 eax, DWORD PTR ?getMapAreaX1@@3PAFA[ebx*2]
  0029b	57		 push	 edi
  0029c	50		 push	 eax
  0029d	e8 00 00 00 00	 call	 ?checkAreaLimit@@YAXPAF000@Z ; checkAreaLimit

; 1990 : 					getMapAreaCnt++;

  002a2	8b 45 fc	 mov	 eax, DWORD PTR tv1250[ebp]
  002a5	83 c4 10	 add	 esp, 16			; 00000010H
  002a8	66 40		 inc	 ax

; 1991 : 					flag = TRUE;

  002aa	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _flag$1$[ebp], 1
  002b1	89 45 fc	 mov	 DWORD PTR tv1250[ebp], eax
  002b4	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, ax ; getMapAreaCnt
$LN58@checkEmpty:

; 1996 : 			ty++;
; 1997 : 		}
; 1998 : 	}
; 1999 : 	if (dir == 6 || dir == 7 || dir == 0)

  002ba	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  002bd	83 f8 06	 cmp	 eax, 6
  002c0	74 09		 je	 SHORT $LN29@checkEmpty
$LN53@checkEmpty:
  002c2	83 f8 07	 cmp	 eax, 7
  002c5	74 04		 je	 SHORT $LN29@checkEmpty
  002c7	85 c0		 test	 eax, eax
  002c9	75 53		 jne	 SHORT $LN61@checkEmpty
$LN29@checkEmpty:

; 2000 : 	{
; 2001 : 		gx = nowGx - SEARCH_AREA;

  002cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGx@@3HA ; nowGx

; 2002 : 		gy = nowGy + SEARCH_AREA;

  002d0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?nowGy@@3HA ; nowGy
  002d6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  002dc	83 c6 0b	 add	 esi, 11			; 0000000bH
  002df	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  002e5	8d 50 f5	 lea	 edx, DWORD PTR [eax-11]
  002e8	8b ca		 mov	 ecx, edx
  002ea	2b c8		 sub	 ecx, eax
  002ec	83 c1 14	 add	 ecx, 20			; 00000014H
  002ef	90		 npad	 1
$LL13@checkEmpty:

; 2003 : 		tx = -SEARCH_AREA - MAP_TILE_GRID_X1;
; 2004 : 		ty = SEARCH_AREA - MAP_TILE_GRID_Y1;
; 2005 : 		len = (SEARCH_AREA << 1) + 1;
; 2006 : 		for (i = 0; i < len; i++)
; 2007 : 		{
; 2008 : 			if ((0 <= gx && gx < nowFloorGxSize) && (0 <= gy && gy < nowFloorGySize))

  002f0	85 d2		 test	 edx, edx
  002f2	78 20		 js	 SHORT $LN31@checkEmpty
  002f4	3b d7		 cmp	 edx, edi
  002f6	7d 1c		 jge	 SHORT $LN31@checkEmpty
  002f8	85 f6		 test	 esi, esi
  002fa	78 18		 js	 SHORT $LN31@checkEmpty
  002fc	3b f3		 cmp	 esi, ebx
  002fe	7d 14		 jge	 SHORT $LN31@checkEmpty

; 2009 : 			{
; 2010 : 				if (event[ty * mapAreaWidth + tx] == 0)

  00300	6b 05 00 00 00
	00 1b		 imul	 eax, DWORD PTR ?mapAreaWidth@@3HA, 27 ; mapAreaWidth
  00307	03 c1		 add	 eax, ecx
  00309	66 83 3c 45 00
	00 00 00 00	 cmp	 WORD PTR ?event@@3PAGA[eax*2], 0
  00312	74 14		 je	 SHORT $LN40@checkEmpty
$LN31@checkEmpty:

; 2019 : 					break;
; 2020 : 				}
; 2021 : 			}
; 2022 : 			gx++;

  00314	41		 inc	 ecx
  00315	42		 inc	 edx
  00316	8d 41 f7	 lea	 eax, DWORD PTR [ecx-9]
  00319	83 f8 17	 cmp	 eax, 23			; 00000017H
  0031c	7c d2		 jl	 SHORT $LL13@checkEmpty
$LN61@checkEmpty:

; 2023 : 			tx++;
; 2024 : 		}
; 2025 : 	}
; 2026 : 
; 2027 : 	return flag;

  0031e	8b 45 f8	 mov	 eax, DWORD PTR _flag$1$[ebp]
  00321	5f		 pop	 edi
  00322	5e		 pop	 esi
  00323	5b		 pop	 ebx

; 2028 : }

  00324	8b e5		 mov	 esp, ebp
  00326	5d		 pop	 ebp
  00327	c3		 ret	 0
$LN40@checkEmpty:

; 2011 : 				{
; 2012 : 					getMapAreaX1[getMapAreaCnt] = gx - 1;

  00328	8b 45 fc	 mov	 eax, DWORD PTR tv1250[ebp]
  0032b	0f bf d8	 movsx	 ebx, ax
  0032e	0f b7 ca	 movzx	 ecx, dx

; 2013 : 					getMapAreaY1[getMapAreaCnt] = gy;

  00331	8d 3c 5d 00 00
	00 00		 lea	 edi, DWORD PTR ?getMapAreaY1@@3PAFA[ebx*2]
  00338	0f b7 d6	 movzx	 edx, si

; 2014 : 					getMapAreaX2[getMapAreaCnt] = gx + (SEARCH_AREA << 1) + 1;

  0033b	8d 34 5d 00 00
	00 00		 lea	 esi, DWORD PTR ?getMapAreaX2@@3PAFA[ebx*2]
  00342	66 89 17	 mov	 WORD PTR [edi], dx
  00345	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00348	66 89 04 5d 00
	00 00 00	 mov	 WORD PTR ?getMapAreaX1@@3PAFA[ebx*2], ax
  00350	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]

; 2015 : 					getMapAreaY2[getMapAreaCnt] = gy + 2;

  00353	8d 0c 5d 00 00
	00 00		 lea	 ecx, DWORD PTR ?getMapAreaY2@@3PAFA[ebx*2]
  0035a	66 89 06	 mov	 WORD PTR [esi], ax

; 2016 : 					checkAreaLimit(&getMapAreaX1[getMapAreaCnt], &getMapAreaY1[getMapAreaCnt], &getMapAreaX2[getMapAreaCnt], &getMapAreaY2[getMapAreaCnt]);

  0035d	51		 push	 ecx
  0035e	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00361	56		 push	 esi
  00362	66 89 01	 mov	 WORD PTR [ecx], ax
  00365	8d 04 5d 00 00
	00 00		 lea	 eax, DWORD PTR ?getMapAreaX1@@3PAFA[ebx*2]
  0036c	57		 push	 edi
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 ?checkAreaLimit@@YAXPAF000@Z ; checkAreaLimit

; 2017 : 					getMapAreaCnt++;

  00373	8b 45 fc	 mov	 eax, DWORD PTR tv1250[ebp]
  00376	83 c4 10	 add	 esp, 16			; 00000010H
  00379	66 40		 inc	 ax
  0037b	66 a3 00 00 00
	00		 mov	 WORD PTR ?getMapAreaCnt@@3FA, ax ; getMapAreaCnt

; 2018 : 					flag = TRUE;

  00381	b8 01 00 00 00	 mov	 eax, 1

; 2023 : 			tx++;
; 2024 : 		}
; 2025 : 	}
; 2026 : 
; 2027 : 	return flag;

  00386	5f		 pop	 edi
  00387	5e		 pop	 esi
  00388	5b		 pop	 ebx

; 2028 : }

  00389	8b e5		 mov	 esp, ebp
  0038b	5d		 pop	 ebp
  0038c	c3		 ret	 0
$LN15@checkEmpty:

; 1914 : 		return FALSE;

  0038d	33 c0		 xor	 eax, eax

; 2028 : }

  0038f	8b e5		 mov	 esp, ebp
  00391	5d		 pop	 ebp
  00392	c3		 ret	 0
?checkEmptyMap@@YAHH@Z ENDP				; checkEmptyMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?moveProc@@YAXXZ
_TEXT	SEGMENT
?moveProc@@YAXXZ PROC					; moveProc, COMDAT

; 2145 : 	static unsigned int befortime = -1;
; 2146 : 
; 2147 : #ifdef  _STONDEBUG_
; 2148 : 	{
; 2149 : 		static short tglSw = 0;
; 2150 : 
; 2151 : 		if (tglSw == 1)
; 2152 : 		{
; 2153 : 			char msg[256];
; 2154 : 			sprintf(msg, "EN send        : %d", sendEnFlag);
; 2155 : 			StockFontBuffer(240, 16, FONT_PRIO_FRONT, 0, msg, 0);
; 2156 : 			sprintf(msg, "EV (Warp) send : %d", eventWarpSendFlag);
; 2157 : 			StockFontBuffer(240, 32, FONT_PRIO_FRONT, 0, msg, 0);
; 2158 : 			sprintf(msg, "EV (Enemy) send: %d", eventEnemySendFlag);
; 2159 : 			StockFontBuffer(240, 48, FONT_PRIO_FRONT, 0, msg, 0);
; 2160 : 			sprintf(msg, "Empty          : %d", mapEmptyFlag);
; 2161 : 			StockFontBuffer(240, 64, FONT_PRIO_FRONT, 0, msg, 0);
; 2162 : 			sprintf(msg, "  nowGx      = %3d/ nowGy      = %3d", nowGx, nowGy);
; 2163 : 			StockFontBuffer(240, 80, FONT_PRIO_FRONT, 0, msg, 0);
; 2164 : 			sprintf(msg, "  mapEmptyGx = %3d/ mapEmptyGy = %3d", mapEmptyGx, mapEmptyGy);
; 2165 : 			StockFontBuffer(240, 96, FONT_PRIO_FRONT, 0, msg, 0);
; 2166 : 			sprintf(msg, "  mapEmptyDir = %3d", mapEmptyDir);
; 2167 : 			StockFontBuffer(240, 112, FONT_PRIO_FRONT, 0, msg, 0);
; 2168 : 		}
; 2169 : 		else if (tglSw == 2)
; 2170 : 		{
; 2171 : 			char msg[256];
; 2172 : 			sprintf(msg, "nowEncountPercentage : %d", nowEncountPercentage);
; 2173 : 			StockFontBuffer(240, 16, FONT_PRIO_FRONT, 0, msg, 0);
; 2174 : 			sprintf(msg, "nowEncountExtra      : %d", nowEncountExtra);
; 2175 : 			StockFontBuffer(240, 32, FONT_PRIO_FRONT, 0, msg, 0);
; 2176 : 		}
; 2177 : 		else if (tglSw == 3 || tglSw == 4)
; 2178 : 		{
; 2179 : 			// ?????????
; 2180 : 			// ??????????
; 2181 : 			char msg[256];
; 2182 : 			int x, y, xx, yy, color;
; 2183 : 
; 2184 : 			xx = -MAP_TILE_GRID_X1;
; 2185 : 			yy = -MAP_TILE_GRID_Y1;
; 2186 : 
; 2187 : 			if (MAP_X_SIZE > mapAreaWidth)
; 2188 : 			{
; 2189 : 				if (mapAreaX1 == 0)
; 2190 : 					xx -= (MAP_X_SIZE - mapAreaWidth);
; 2191 : 			}
; 2192 : 			if (MAP_Y_SIZE > mapAreaHeight)
; 2193 : 			{
; 2194 : 				if (mapAreaY1 == 0)
; 2195 : 					yy -= (MAP_Y_SIZE - mapAreaHeight);
; 2196 : 			}
; 2197 : 
; 2198 : 			for (y = 0; y < mapAreaHeight && y < 26; y++)
; 2199 : 			{
; 2200 : 				for (x = 0; x < mapAreaWidth; x++)
; 2201 : 				{
; 2202 : 					if (tglSw == 3)
; 2203 : 					{
; 2204 : 						sprintf(msg, "%d", hitMap[y * mapAreaWidth + x]);
; 2205 : 						if (x == xx && y == yy)
; 2206 : 							color = FONT_PAL_RED;
; 2207 : 						else
; 2208 : 							color = FONT_PAL_WHITE;
; 2209 : 					}
; 2210 : 					else
; 2211 : 					{
; 2212 : 						sprintf(msg, "%d", (event[y * mapAreaWidth + x] & 0xfff));
; 2213 : 						if (x == xx && y == yy)
; 2214 : 							color = FONT_PAL_RED;
; 2215 : 						else
; 2216 : 						{
; 2217 : 							if (event[y * mapAreaWidth + x] != 0)
; 2218 : 								color = FONT_PAL_YELLOW;
; 2219 : 							else
; 2220 : 								color = FONT_PAL_WHITE;
; 2221 : 						}
; 2222 : 					}
; 2223 : 					StockFontBuffer(x * 10, y * 18, FONT_PRIO_FRONT, color, msg, 0);
; 2224 : 				}
; 2225 : 			}
; 2226 : 			sprintf(msg, "gx = %5d / gy = %5d / hit = %d", mouseMapGx, mouseMapGy, checkHitMap(mouseMapGx, mouseMapGy));
; 2227 : 			StockFontBuffer(332, 40, FONT_PRIO_FRONT, 0, msg, 0);
; 2228 : 		}
; 2229 : 		else if (tglSw == 5)
; 2230 : 		{
; 2231 : 			char msg[256];
; 2232 : 			int x, y;
; 2233 : 
; 2234 : 			x = mouseMapGx - mapAreaX1;
; 2235 : 			y = mouseMapGy - mapAreaY1;
; 2236 : 			sprintf(msg, "Tile  Bmp = %d", tile[y * mapAreaWidth + x]);
; 2237 : 			StockFontBuffer(240, 34, FONT_PRIO_FRONT, 0, msg, 0);
; 2238 : 			sprintf(msg, "Parts Bmp = %d", parts[y * mapAreaWidth + x]);
; 2239 : 			StockFontBuffer(240, 54, FONT_PRIO_FRONT, 0, msg, 0);
; 2240 : 			sprintf(msg, "Gx = %d / Gy = %d", mouseMapGx, mouseMapGy);
; 2241 : 			StockFontBuffer(240, 74, FONT_PRIO_FRONT, 0, msg, 0);
; 2242 : 		}
; 2243 : 		else if (tglSw == 6)
; 2244 : 		{
; 2245 : 			char msg[256];
; 2246 : 
; 2247 : 			if ((joy_trg[ 0 ] & JOY_RIGHT) && mapEffectRainLevel < 5)
; 2248 : 				mapEffectRainLevel++;
; 2249 : 			else if ((joy_trg[ 0 ] & JOY_LEFT) && mapEffectRainLevel > 0)
; 2250 : 				mapEffectRainLevel--;
; 2251 : 			sprintf(msg, "mapEffectRainLevel = %d", mapEffectRainLevel);
; 2252 : 			StockFontBuffer(240, 34, FONT_PRIO_FRONT, 0, msg, 0);
; 2253 : 		}
; 2254 : 		else if (tglSw == 7)
; 2255 : 		{
; 2256 : 			char msg[256];
; 2257 : 
; 2258 : 			if ((joy_trg[ 0 ] & JOY_RIGHT) && mapEffectSnowLevel < 5)
; 2259 : 				mapEffectSnowLevel++;
; 2260 : 			else if ((joy_trg[ 0 ] & JOY_LEFT) && mapEffectSnowLevel > 0)
; 2261 : 				mapEffectSnowLevel--;
; 2262 : 			sprintf(msg, "mapEffectSnowLevel = %d", mapEffectSnowLevel);
; 2263 : 			StockFontBuffer(240, 34, FONT_PRIO_FRONT, 0, msg, 0);
; 2264 : 		}
; 2265 : 	}
; 2266 : #endif
; 2267 : 
; 2268 : 	// ?????????????
; 2269 : 	if (sendEnFlag == 0 && eventWarpSendFlag == 0 && eventEnemySendFlag == 0)

  00000	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?sendEnFlag@@3FA, 0 ; sendEnFlag
  00008	75 1c		 jne	 SHORT $LN24@moveProc
  0000a	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  00012	75 12		 jne	 SHORT $LN24@moveProc
  00014	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventEnemySendFlag@@3FA, 0 ; eventEnemySendFlag
  0001c	75 08		 jne	 SHORT $LN24@moveProc

; 2270 : 		etcEventFlag = 0;

  0001e	33 c0		 xor	 eax, eax
  00020	66 a3 00 00 00
	00		 mov	 WORD PTR ?etcEventFlag@@3FA, ax ; etcEventFlag
$LN24@moveProc:

; 2271 : 
; 2272 : 	// ??????????????
; 2273 : 	// ??????????????
; 2274 : 	if (mouseLeftCrick)

  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouseLeftCrick@@3HA ; mouseLeftCrick
  0002c	85 c9		 test	 ecx, ecx
  0002e	74 3b		 je	 SHORT $LN6@moveProc

; 2275 : 	{
; 2276 : 		if (lookAtAround())

  00030	e8 00 00 00 00	 call	 ?lookAtAround@@YAHXZ	; lookAtAround
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouseLeftCrick@@3HA ; mouseLeftCrick
  0003b	33 d2		 xor	 edx, edx
  0003d	85 c0		 test	 eax, eax
  0003f	0f 45 ca	 cmovne	 ecx, edx
  00042	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mouseLeftCrick@@3HA, ecx ; mouseLeftCrick

; 2277 : 			mouseLeftCrick = FALSE;
; 2278 : #ifdef __TALK_TO_NPC
; 2279 : 		BOOL TalkToNPC();
; 2280 : 		if (TalkToNPC())

  00048	e8 00 00 00 00	 call	 ?TalkToNPC@@YAHXZ	; TalkToNPC
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouseLeftCrick@@3HA ; mouseLeftCrick
  00053	33 d2		 xor	 edx, edx
  00055	85 c0		 test	 eax, eax
  00057	0f 45 ca	 cmovne	 ecx, edx

; 2281 : 			mouseLeftCrick = FALSE;
; 2282 : #endif
; 2283 : //Terry add 2003/11/25
; 2284 : 		if (g_bTradesystemOpen)

  0005a	33 c0		 xor	 eax, eax
  0005c	38 05 00 00 00
	00		 cmp	 BYTE PTR ?g_bTradesystemOpen@@3_NA, al ; g_bTradesystemOpen
  00062	0f 45 c8	 cmovne	 ecx, eax
  00065	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mouseLeftCrick@@3HA, ecx ; mouseLeftCrick
$LN6@moveProc:

; 2285 : 			mouseLeftCrick = FALSE;
; 2286 : //end
; 2287 : 	}
; 2288 : 	// ????????????
; 2289 : 	if (mouseRightCrick)

  0006b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouseRightCrick@@3HA, 0 ; mouseRightCrick
  00072	74 10		 je	 SHORT $LN7@moveProc

; 2290 : 	{
; 2291 : 		// ?????
; 2292 : 		turnAround();

  00074	e8 00 00 00 00	 call	 ?turnAround@@YAXXZ	; turnAround

; 2293 : 		// ?????
; 2294 : 		getItem();

  00079	e8 00 00 00 00	 call	 ?getItem@@YAXXZ		; getItem
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouseLeftCrick@@3HA ; mouseLeftCrick
$LN7@moveProc:

; 2295 : 	}
; 2296 : #ifdef _MOUSE_DBL_CLICK
; 2297 : 	if (mouseDblRightOn)
; 2298 : 	{
; 2299 : 	}
; 2300 : #endif
; 2301 : 	// ??
; 2302 : 	// ??????????????
; 2303 : 	// ?????????????????
; 2304 : 	if ((partyModeFlag == 0 || (pc.status & CHR_STATUS_LEADER) != 0) && etcSendFlag == 0 && etcEventFlag == 0)

  00084	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?partyModeFlag@@3FA, 0 ; partyModeFlag
  0008c	74 10		 je	 SHORT $LN10@moveProc
  0008e	f7 05 a4 00 00
	00 00 01 00 00	 test	 DWORD PTR ?pc@@3UPC@@A+164, 256 ; 00000100H
  00098	0f 84 86 00 00
	00		 je	 $LN25@moveProc
$LN10@moveProc:
  0009e	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?etcSendFlag@@3FA, 0 ; etcSendFlag
  000a6	75 7c		 jne	 SHORT $LN25@moveProc
  000a8	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?etcEventFlag@@3FA, 0 ; etcEventFlag
  000b0	75 72		 jne	 SHORT $LN25@moveProc

; 2305 : 	{
; 2306 : 		// ????????????????
; 2307 : 		if (mouseLeftPushTime >= MOVE_MODE_CHANGE_TIME)

  000b2	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?mouseLeftPushTime@@3IA, 1000 ; mouseLeftPushTime, 000003e8H
  000bc	72 0d		 jb	 SHORT $LN11@moveProc

; 2308 : 			mouseCursorMode = MOUSE_CURSOR_MODE_MOVE;

  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	66 a3 00 00 00
	00		 mov	 WORD PTR ?mouseCursorMode@@3FA, ax ; mouseCursorMode

; 2309 : 		// ???????
; 2310 : 		if (mouseCursorMode == MOUSE_CURSOR_MODE_MOVE)

  000c9	eb 0a		 jmp	 SHORT $LN23@moveProc
$LN11@moveProc:
  000cb	66 83 3d 00 00
	00 00 01	 cmp	 WORD PTR ?mouseCursorMode@@3FA, 1 ; mouseCursorMode
  000d3	75 0e		 jne	 SHORT $LN12@moveProc
$LN23@moveProc:

; 2311 : 		{
; 2312 : 			// ??????????????
; 2313 : 			if (mouseLeftCrick)

  000d5	85 c9		 test	 ecx, ecx
  000d7	74 0e		 je	 SHORT $LN14@moveProc

; 2314 : 				mouseCursorMode = MOUSE_CURSOR_MODE_NORMAL;

  000d9	33 c0		 xor	 eax, eax
  000db	66 a3 00 00 00
	00		 mov	 WORD PTR ?mouseCursorMode@@3FA, ax ; mouseCursorMode
  000e1	eb 41		 jmp	 SHORT $LN25@moveProc
$LN12@moveProc:

; 2315 : 			else
; 2316 : 			// ????????????
; 2317 : 			{
; 2318 : 				// ???????
; 2319 : 				if (befortime + MOVE_CLICK_WAIT_TIME <= TimeGetTime())
; 2320 : 				{
; 2321 : 					befortime = TimeGetTime();
; 2322 : 					moveStackGx = mouseMapGx;
; 2323 : 					moveStackGy = mouseMapGy;
; 2324 : 					moveStackFlag = TRUE;
; 2325 : 				}
; 2326 : 			}
; 2327 : 		}
; 2328 : 		else
; 2329 : 		// ??????
; 2330 : 		if (mouseLeftCrick)

  000e3	85 c9		 test	 ecx, ecx
  000e5	74 3d		 je	 SHORT $LN25@moveProc
$LN14@moveProc:

; 2331 : 		{
; 2332 : 			// ????????????
; 2333 : 			// ???????
; 2334 : 			if (befortime + MOVE_CLICK_WAIT_TIME <= TimeGetTime())
; 2335 : 			{
; 2336 : 				befortime = TimeGetTime();
; 2337 : 				moveStackGx = mouseMapGx;
; 2338 : 				moveStackGy = mouseMapGy;
; 2339 : 				moveStackFlag = TRUE;
; 2340 : 			}
; 2341 : 		}
; 2342 : 	}
; 2343 : 
; 2344 : 	// ???????????
; 2345 : 	getPartyTbl();

  000e7	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?befortime@?1??moveProc@@YAXXZ@4IA
  000f2	81 c1 fa 00 00
	00		 add	 ecx, 250		; 000000faH
  000f8	3b c8		 cmp	 ecx, eax
  000fa	77 28		 ja	 SHORT $LN25@moveProc
  000fc	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00101	a3 00 00 00 00	 mov	 DWORD PTR ?befortime@?1??moveProc@@YAXXZ@4IA, eax
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouseMapGx@@3HA ; mouseMapGx
  0010b	a3 00 00 00 00	 mov	 DWORD PTR ?moveStackGx@@3HA, eax ; moveStackGx
  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouseMapGy@@3HA ; mouseMapGy
  00115	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?moveStackFlag@@3HA, 1 ; moveStackFlag
  0011f	a3 00 00 00 00	 mov	 DWORD PTR ?moveStackGy@@3HA, eax ; moveStackGy
$LN25@moveProc:
  00124	e8 00 00 00 00	 call	 ?getPartyTbl@@YAXXZ	; getPartyTbl

; 2346 : 	// ????????????
; 2347 : 	if (partyModeFlag == 0 || (pc.status & CHR_STATUS_LEADER) != 0)

  00129	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?partyModeFlag@@3FA, 0 ; partyModeFlag
  00131	74 10		 je	 SHORT $LN21@moveProc
  00133	f7 05 a4 00 00
	00 00 01 00 00	 test	 DWORD PTR ?pc@@3UPC@@A+164, 256 ; 00000100H
  0013d	0f 84 00 00 00
	00		 je	 ?partyMoveProc@@YAXXZ	; partyMoveProc
$LN21@moveProc:

; 2348 : 		onceMoveProc();

  00143	e9 00 00 00 00	 jmp	 ?onceMoveProc@@YAXXZ	; onceMoveProc
?moveProc@@YAXXZ ENDP					; moveProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?drawGrid@@YAXXZ
_TEXT	SEGMENT
_x$ = -8						; size = 4
_y$ = -4						; size = 4
?drawGrid@@YAXXZ PROC					; drawGrid, COMDAT

; 2047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2048 : 	float x, y;
; 2049 : 	int xx, yy;
; 2050 : 	extern int mapWndFontNo[];
; 2051 : 	extern int resultWndFontNo[];
; 2052 : 
; 2053 : 	// ????????????????
; 2054 : 	if ((MenuToggleFlag & JOY_CTRL_M) == 0)

  00006	f7 05 00 00 00
	00 00 00 00 40	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 1073741824 ; MenuToggleFlag, 40000000H
  00010	b9 fe ff ff ff	 mov	 ecx, -2			; fffffffeH
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapWndFontNo@@3PAHA
  0001a	66 0f 6e 05 04
	00 00 00	 movd	 xmm0, DWORD PTR ?mouse@@3UMOUSE@@A+4
  00022	0f 44 c1	 cmove	 eax, ecx

; 2055 : 		mapWndFontNo[0] = -2;
; 2056 : 	// ???????????????
; 2057 : 	if (BattleResultWndFlag <= 0)

  00025	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  0002c	a3 00 00 00 00	 mov	 DWORD PTR ?mapWndFontNo@@3PAHA, eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resultWndFontNo@@3PAHA
  00036	0f 4e c1	 cmovle	 eax, ecx
  00039	a3 00 00 00 00	 mov	 DWORD PTR ?resultWndFontNo@@3PAHA, eax

; 2058 : 		resultWndFontNo[0] = -2;
; 2059 : 
; 2060 : 	camGamenToMap((float)mouse.nowPoint.x, (float)mouse.nowPoint.y, &x, &y);

  0003e	8d 45 fc	 lea	 eax, DWORD PTR _y$[ebp]
  00041	56		 push	 esi
  00042	50		 push	 eax
  00043	8d 45 f8	 lea	 eax, DWORD PTR _x$[ebp]
  00046	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00049	50		 push	 eax
  0004a	83 ec 08	 sub	 esp, 8
  0004d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00053	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?mouse@@3UMOUSE@@A
  0005b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	e8 00 00 00 00	 call	 ?camGamenToMap@@YAXMMPAM0@Z ; camGamenToMap
  00068	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0006d	83 c4 10	 add	 esp, 16			; 00000010H

; 2061 : 	mouseMapX = (int)(x + .5);

  00070	0f 5a c0	 cvtps2pd xmm0, xmm0
  00073	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0007b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0007f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y$[ebp]

; 2062 : 	mouseMapY = (int)(y + .5);

  00084	0f 5a c0	 cvtps2pd xmm0, xmm0
  00087	a3 00 00 00 00	 mov	 DWORD PTR ?mouseMapX@@3HA, eax ; mouseMapX
  0008c	83 c0 20	 add	 eax, 32			; 00000020H

; 2063 : 	mouseMapGx = (mouseMapX + (GRID_SIZE >> 1)) / GRID_SIZE;

  0008f	99		 cdq
  00090	83 e2 3f	 and	 edx, 63			; 0000003fH
  00093	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0009b	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  0009e	c1 fe 06	 sar	 esi, 6
  000a1	89 35 00 00 00
	00		 mov	 DWORD PTR ?mouseMapGx@@3HA, esi ; mouseMapGx

; 2064 : 	mouseMapGy = (mouseMapY + (GRID_SIZE >> 1)) / GRID_SIZE;
; 2065 : 	xx = mouseMapGx * GRID_SIZE;
; 2066 : 	yy = mouseMapGy * GRID_SIZE;
; 2067 : 	camMapToGamen((float)xx, (float)yy, &x, &y);

  000a7	c1 e6 06	 shl	 esi, 6
  000aa	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  000ae	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mouseMapY@@3HA, ecx ; mouseMapY
  000b4	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  000b7	99		 cdq
  000b8	8d 4d fc	 lea	 ecx, DWORD PTR _y$[ebp]
  000bb	83 e2 3f	 and	 edx, 63			; 0000003fH
  000be	03 c2		 add	 eax, edx
  000c0	c1 f8 06	 sar	 eax, 6
  000c3	a3 00 00 00 00	 mov	 DWORD PTR ?mouseMapGy@@3HA, eax ; mouseMapGy
  000c8	c1 e0 06	 shl	 eax, 6
  000cb	51		 push	 ecx
  000cc	8d 4d f8	 lea	 ecx, DWORD PTR _x$[ebp]
  000cf	51		 push	 ecx
  000d0	66 0f 6e c0	 movd	 xmm0, eax
  000d4	83 ec 08	 sub	 esp, 8
  000d7	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000da	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000e0	66 0f 6e c6	 movd	 xmm0, esi
  000e4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?camMapToGamen@@YAXMMPAM0@Z ; camMapToGamen

; 2068 : 
; 2069 : 	// ??????????????????????
; 2070 : #if 0
; 2071 : 	if (mouse.level < DISP_PRIO_MENU || mapWndFontNo[0] == HitDispNo || resultWndFontNo[0] == HitDispNo)
; 2072 : #else
; 2073 : 	if (mouse.level < DISP_PRIO_MENU)

  000f1	a0 44 00 00 00	 mov	 al, BYTE PTR ?mouse@@3UMOUSE@@A+68
  000f6	83 c4 10	 add	 esp, 16			; 00000010H
  000f9	3c 68		 cmp	 al, 104			; 00000068H
  000fb	73 4a		 jae	 SHORT $LN5@drawGrid

; 2074 : #endif
; 2075 : 	{
; 2076 : 		// ?????????
; 2077 : 		if (mouseCursorMode == MOUSE_CURSOR_MODE_NORMAL)

  000fd	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mouseCursorMode@@3FA, 0 ; mouseCursorMode
  00105	75 40		 jne	 SHORT $LN5@drawGrid

; 2078 : 			StockDispBuffer((int)(x + .5), (int)(y + .5), DISP_PRIO_GRID, CG_GRID_CURSOR, 0);

  00107	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y$[ebp]
  0010c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010f	6a 00		 push	 0
  00111	68 a9 61 00 00	 push	 25001			; 000061a9H
  00116	6a 64		 push	 100			; 00000064H
  00118	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00120	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00124	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00129	0f 5a c0	 cvtps2pd xmm0, xmm0
  0012c	50		 push	 eax
  0012d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00135	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0013f	a0 44 00 00 00	 mov	 al, BYTE PTR ?mouse@@3UMOUSE@@A+68
  00144	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@drawGrid:

; 2079 : 	//cary 2002.1.15	else
; 2080 : 	//	{
; 2081 : 	//		StockDispBuffer((int)(x+.5), (int)(y+.5), DISP_PRIO_GRID, 1610, 0);
; 2082 : 	//	}
; 2083 : 	}
; 2084 : 
; 2085 : 	// ?????
; 2086 : 	// fieldProc(); moveProc(); ??????????????
; 2087 : 	mouseLeftCrick = FALSE;
; 2088 : 	mouseLeftOn = FALSE;
; 2089 : 	mouseRightCrick = FALSE;
; 2090 : 	mouseRightOn = FALSE;
; 2091 : #ifdef _MOUSE_DBL_CLICK
; 2092 : 	mouseDblRightOn = FALSE;
; 2093 : #endif
; 2094 : 	if ((mouse.level < DISP_PRIO_MENU && mouse.itemNo == -1) || mapWndFontNo[0] == HitDispNo || resultWndFontNo[0] == HitDispNo)

  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0014d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouseLeftCrick@@3HA, 0 ; mouseLeftCrick
  00157	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouseLeftOn@@3HA, 0 ; mouseLeftOn
  00161	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouseRightCrick@@3HA, 0 ; mouseRightCrick
  0016b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouseRightOn@@3HA, 0 ; mouseRightOn
  00175	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouseDblRightOn@@3HA, 0 ; mouseDblRightOn
  0017f	3c 68		 cmp	 al, 104			; 00000068H
  00181	73 09		 jae	 SHORT $LN9@drawGrid
  00183	83 3d 48 00 00
	00 ff		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  0018a	74 27		 je	 SHORT $LN8@drawGrid
$LN9@drawGrid:
  0018c	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?mapWndFontNo@@3PAHA, ecx
  00192	74 1f		 je	 SHORT $LN8@drawGrid
  00194	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?resultWndFontNo@@3PAHA, ecx
  0019a	74 17		 je	 SHORT $LN8@drawGrid

; 2129 : 	}
; 2130 : 	else
; 2131 : 	{
; 2132 : 		mouseCursorMode = MOUSE_CURSOR_MODE_NORMAL;

  0019c	33 c0		 xor	 eax, eax
  0019e	66 a3 00 00 00
	00		 mov	 WORD PTR ?mouseCursorMode@@3FA, ax ; mouseCursorMode

; 2133 : 		mouseLeftPushTime = 0;

  001a4	a3 00 00 00 00	 mov	 DWORD PTR ?mouseLeftPushTime@@3IA, eax ; mouseLeftPushTime

; 2134 : 		beforeMouseLeftPushTime = 0;

  001a9	a3 00 00 00 00	 mov	 DWORD PTR ?beforeMouseLeftPushTime@@3IA, eax ; beforeMouseLeftPushTime
  001ae	5e		 pop	 esi

; 2135 : 	}
; 2136 : }

  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c3		 ret	 0
$LN8@drawGrid:

; 2095 : 	{
; 2096 : 		if ((mouse.onceState & MOUSE_LEFT_CRICK))

  001b3	8b 15 2c 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+44
  001b9	f6 c2 01	 test	 dl, 1
  001bc	74 2c		 je	 SHORT $LN20@drawGrid

; 2097 : 		{
; 2098 : 			{
; 2099 : 				mouseLeftCrick = TRUE;

  001be	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mouseLeftCrick@@3HA, 1 ; mouseLeftCrick

; 2100 : 				mouseLeftPushTime = 0;

  001c8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouseLeftPushTime@@3IA, 0 ; mouseLeftPushTime

; 2101 : 				beforeMouseLeftPushTime = TimeGetTime();

  001d2	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  001d7	8b 15 2c 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+44
  001dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  001e3	a3 00 00 00 00	 mov	 DWORD PTR ?beforeMouseLeftPushTime@@3IA, eax ; beforeMouseLeftPushTime
  001e8	eb 05		 jmp	 SHORT $LN10@drawGrid
$LN20@drawGrid:

; 2095 : 	{
; 2096 : 		if ((mouse.onceState & MOUSE_LEFT_CRICK))

  001ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?beforeMouseLeftPushTime@@3IA ; beforeMouseLeftPushTime
$LN10@drawGrid:
  001ef	53		 push	 ebx

; 2102 : 			}
; 2103 : 		}
; 2104 : 		if ((mouse.state & MOUSE_LEFT_CRICK))

  001f0	8b 1d 28 00 00
	00		 mov	 ebx, DWORD PTR ?mouse@@3UMOUSE@@A+40
  001f6	f6 c3 01	 test	 bl, 1
  001f9	74 32		 je	 SHORT $LN11@drawGrid

; 2105 : 		{
; 2106 : 			{
; 2107 : 				mouseLeftOn = TRUE;

  001fb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mouseLeftOn@@3HA, 1 ; mouseLeftOn

; 2108 : 				if (beforeMouseLeftPushTime > 0)

  00205	85 c0		 test	 eax, eax
  00207	74 38		 je	 SHORT $LN12@drawGrid

; 2109 : 					mouseLeftPushTime = TimeGetTime() - beforeMouseLeftPushTime;

  00209	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0020e	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?beforeMouseLeftPushTime@@3IA ; beforeMouseLeftPushTime

; 2110 : 			}
; 2111 : 		}

  00214	8b 15 2c 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+44
  0021a	8b 1d 28 00 00
	00		 mov	 ebx, DWORD PTR ?mouse@@3UMOUSE@@A+40
  00220	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00226	a3 00 00 00 00	 mov	 DWORD PTR ?mouseLeftPushTime@@3IA, eax ; mouseLeftPushTime
  0022b	eb 14		 jmp	 SHORT $LN12@drawGrid
$LN11@drawGrid:

; 2112 : 		else
; 2113 : 		{
; 2114 : 			mouseLeftPushTime = 0;

  0022d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouseLeftPushTime@@3IA, 0 ; mouseLeftPushTime

; 2115 : 			beforeMouseLeftPushTime = 0;

  00237	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?beforeMouseLeftPushTime@@3IA, 0 ; beforeMouseLeftPushTime
$LN12@drawGrid:

; 2116 : 		}
; 2117 : 		if ((mouse.onceState & MOUSE_RIGHT_CRICK))

  00241	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouseRightCrick@@3HA ; mouseRightCrick
  00246	f6 c2 02	 test	 dl, 2
  00249	be 01 00 00 00	 mov	 esi, 1
  0024e	0f 45 c6	 cmovne	 eax, esi

; 2118 : 			mouseRightCrick = TRUE;
; 2119 : 		if ((mouse.state & MOUSE_RIGHT_CRICK))

  00251	f6 c3 02	 test	 bl, 2
  00254	a3 00 00 00 00	 mov	 DWORD PTR ?mouseRightCrick@@3HA, eax ; mouseRightCrick
  00259	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouseRightOn@@3HA ; mouseRightOn
  0025e	0f 45 c6	 cmovne	 eax, esi

; 2120 : 			mouseRightOn = TRUE;
; 2121 : #ifdef _MOUSE_DBL_CLICK
; 2122 : 		if ((mouse.onceState & MOUSE_RIGHT_DBL_CRICK))

  00261	f6 c2 20	 test	 dl, 32			; 00000020H
  00264	a3 00 00 00 00	 mov	 DWORD PTR ?mouseRightOn@@3HA, eax ; mouseRightOn
  00269	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouseDblRightOn@@3HA ; mouseDblRightOn
  0026e	0f 45 c6	 cmovne	 eax, esi
  00271	a3 00 00 00 00	 mov	 DWORD PTR ?mouseDblRightOn@@3HA, eax ; mouseDblRightOn
  00276	5b		 pop	 ebx

; 2123 : 			mouseDblRightOn = TRUE;
; 2124 : #endif
; 2125 : 		// ??????????????????????????
; 2126 : 		// ?????????????????????????
; 2127 : 		if (mapWndFontNo[0] == HitDispNo || resultWndFontNo[0] == HitDispNo)

  00277	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?mapWndFontNo@@3PAHA, ecx
  0027d	74 08		 je	 SHORT $LN18@drawGrid
  0027f	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?resultWndFontNo@@3PAHA, ecx
  00285	75 0a		 jne	 SHORT $LN17@drawGrid
$LN18@drawGrid:

; 2128 : 			mouseLeftCrick = FALSE;

  00287	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouseLeftCrick@@3HA, 0 ; mouseLeftCrick
$LN17@drawGrid:
  00291	5e		 pop	 esi

; 2135 : 	}
; 2136 : }

  00292	8b e5		 mov	 esp, ebp
  00294	5d		 pop	 ebp
  00295	c3		 ret	 0
?drawGrid@@YAXXZ ENDP					; drawGrid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?redrawMap@@YAXXZ
_TEXT	SEGMENT
?redrawMap@@YAXXZ PROC					; redrawMap, COMDAT

; 1368 : 	oldGx = -1;

  00000	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldGx@@3HA, -1 ; oldGx

; 1369 : 	oldGy = -1;

  0000a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldGy@@3HA, -1 ; oldGy

; 1370 : }

  00014	c3		 ret	 0
?redrawMap@@YAXXZ ENDP					; redrawMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?drawTile@@YAXXZ
_TEXT	SEGMENT
tv332 = -20						; size = 4
tv337 = -16						; size = 4
_tj$1$ = -12						; size = 4
tv330 = -8						; size = 4
_ti$1$ = -4						; size = 4
?drawTile@@YAXXZ PROC					; drawTile, COMDAT

; 1308 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1309 : 	int i, j, x, y, tx, ty;
; 1310 : 
; 1311 : 	// ?????????
; 1312 : 	if (readMap(nowFloor, mapAreaX1, mapAreaY1, mapAreaX2, mapAreaY2, &tile[0], &parts[0], &event[0]))

  00006	68 00 00 00 00	 push	 OFFSET ?event@@3PAGA	; event
  0000b	68 00 00 00 00	 push	 OFFSET ?parts@@3PAGA	; parts
  00010	68 00 00 00 00	 push	 OFFSET ?tile@@3PAGA	; tile
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  00021	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  0002d	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowFloor@@3HA ; nowFloor
  00033	e8 00 00 00 00	 call	 ?readMap@@YAHHHHHHPAG00@Z ; readMap
  00038	83 c4 20	 add	 esp, 32			; 00000020H
  0003b	85 c0		 test	 eax, eax
  0003d	74 34		 je	 SHORT $LN6@drawTile

; 1313 : 		readHitMap(mapAreaX1, mapAreaY1, mapAreaX2, mapAreaY2, &tile[0], &parts[0], &event[0], &hitMap[0]);		// hitMap[]??????????

  0003f	68 00 00 00 00	 push	 OFFSET ?hitMap@@3PAGA	; hitMap
  00044	68 00 00 00 00	 push	 OFFSET ?event@@3PAGA	; event
  00049	68 00 00 00 00	 push	 OFFSET ?parts@@3PAGA	; parts
  0004e	68 00 00 00 00	 push	 OFFSET ?tile@@3PAGA	; tile
  00053	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00059	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  0005f	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  00065	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  0006b	e8 00 00 00 00	 call	 ?readHitMap@@YAXHHHHPAG000@Z ; readHitMap
  00070	83 c4 20	 add	 esp, 32			; 00000020H
$LN6@drawTile:

; 1314 : 	tx = nowXFastDraw2 + (((mapAreaX1 + mapAreaY2 - 1) * SURFACE_WIDTH) >> 1);

  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  0007e	53		 push	 ebx
  0007f	56		 push	 esi
  00080	57		 push	 edi

; 1315 : 	ty = nowYFastDraw2 + (((-mapAreaX1 + mapAreaY2 - 1) * SURFACE_HEIGHT) >> 1);
; 1316 : 	// ???????????????
; 1317 : 	//
; 1318 : 	// [map]
; 1319 : 	//               16
; 1320 : 	//            15    14
; 1321 : 	//         13    12    11
; 1322 : 	//      10     9     8     7
; 1323 : 	//          6     5     4
; 1324 : 	//             3     2
; 1325 : 	//                1
; 1326 : 
; 1327 : 	int ti, tj;
; 1328 : 
; 1329 : 	ti = mapAreaHeight - 1;

  00081	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?mapAreaHeight@@3HA ; mapAreaHeight
  00087	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  0008a	2b c8		 sub	 ecx, eax
  0008c	c1 e6 06	 shl	 esi, 6
  0008f	49		 dec	 ecx
  00090	83 ee 40	 sub	 esi, 64			; 00000040H
  00093	d1 fe		 sar	 esi, 1
  00095	4f		 dec	 edi
  00096	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?nowXFastDraw2@@3HA ; nowXFastDraw2

; 1330 : 	tj = 0;

  0009c	33 c0		 xor	 eax, eax
  0009e	89 7d fc	 mov	 DWORD PTR _ti$1$[ebp], edi
  000a1	8d 1c 49	 lea	 ebx, DWORD PTR [ecx+ecx*2]
  000a4	89 45 f4	 mov	 DWORD PTR _tj$1$[ebp], eax
  000a7	c1 e3 04	 shl	 ebx, 4
  000aa	d1 fb		 sar	 ebx, 1
  000ac	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?nowYFastDraw2@@3HA ; nowYFastDraw2

; 1331 : 	while (ti >= 0)

  000b2	85 ff		 test	 edi, edi
  000b4	0f 88 b1 00 00
	00		 js	 $LN3@drawTile
  000ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
$LL2@drawTile:

; 1332 : 	{
; 1333 : 		i = ti;

  000c0	89 45 f8	 mov	 DWORD PTR tv330[ebp], eax
  000c3	2b 45 fc	 sub	 eax, DWORD PTR _ti$1$[ebp]
  000c6	89 75 ec	 mov	 DWORD PTR tv332[ebp], esi
  000c9	89 45 f0	 mov	 DWORD PTR tv337[ebp], eax
  000cc	0f 1f 40 00	 npad	 4
$LL4@drawTile:

; 1334 : 		j = tj;
; 1335 : 		x = tx;
; 1336 : 		y = ty;
; 1337 : 		while (i >= 0 && j >= 0)

  000d0	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000d3	85 c9		 test	 ecx, ecx
  000d5	78 56		 js	 SHORT $LN5@drawTile

; 1338 : 		{
; 1339 : 			// ???
; 1340 : 			if (tile[i * mapAreaWidth + j] > CG_INVISIBLE)

  000d7	8b c7		 mov	 eax, edi
  000d9	0f af c2	 imul	 eax, edx
  000dc	03 c1		 add	 eax, ecx
  000de	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR ?tile@@3PAGA[eax*2]
  000e6	83 f9 63	 cmp	 ecx, 99			; 00000063H
  000e9	76 37		 jbe	 SHORT $LN8@drawTile

; 1341 : 			{
; 1342 : 				// ???????
; 1343 : 				if (x >= (-SURFACE_WIDTH >> 1) && x < (DEF_APPSIZEX + (SURFACE_WIDTH >> 1)) &&
; 1344 : 					y >= (-SURFACE_HEIGHT >> 1) && y < (DEF_APPSIZEY + (SURFACE_HEIGHT >> 1)))

  000eb	83 fe e0	 cmp	 esi, -32		; ffffffe0H
  000ee	7c 32		 jl	 SHORT $LN8@drawTile
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  000f5	83 c0 20	 add	 eax, 32			; 00000020H
  000f8	3b f0		 cmp	 esi, eax
  000fa	7d 26		 jge	 SHORT $LN8@drawTile
  000fc	83 fb e8	 cmp	 ebx, -24		; ffffffe8H
  000ff	7c 21		 jl	 SHORT $LN8@drawTile
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00106	83 c0 18	 add	 eax, 24			; 00000018H
  00109	3b d8		 cmp	 ebx, eax
  0010b	7d 15		 jge	 SHORT $LN8@drawTile

; 1345 : 					StockDispBuffer(x, y, DISP_PRIO_TILE, tile[i * mapAreaWidth + j], 0);

  0010d	6a 00		 push	 0
  0010f	51		 push	 ecx
  00110	6a 01		 push	 1
  00112	53		 push	 ebx
  00113	56		 push	 esi
  00114	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00119	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  0011f	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@drawTile:

; 1346 : 			}
; 1347 : 			i--;
; 1348 : 			j--;
; 1349 : 			x -= SURFACE_WIDTH;

  00122	8b 45 f0	 mov	 eax, DWORD PTR tv337[ebp]
  00125	83 ee 40	 sub	 esi, 64			; 00000040H
  00128	83 ef 01	 sub	 edi, 1
  0012b	79 a3		 jns	 SHORT $LL4@drawTile
$LN5@drawTile:

; 1331 : 	while (ti >= 0)

  0012d	8b 7d fc	 mov	 edi, DWORD PTR _ti$1$[ebp]

; 1350 : 		}
; 1351 : 		if (tj < mapAreaWidth - 1)

  00130	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  00133	39 4d f4	 cmp	 DWORD PTR _tj$1$[ebp], ecx
  00136	be 20 00 00 00	 mov	 esi, 32			; 00000020H
  0013b	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0013e	0f 4d f8	 cmovge	 edi, eax
  00141	83 eb 18	 sub	 ebx, 24			; 00000018H
  00144	39 4d f4	 cmp	 DWORD PTR _tj$1$[ebp], ecx
  00147	b8 e0 ff ff ff	 mov	 eax, -32		; ffffffe0H
  0014c	89 7d fc	 mov	 DWORD PTR _ti$1$[ebp], edi
  0014f	0f 4d f0	 cmovge	 esi, eax
  00152	8b 45 f8	 mov	 eax, DWORD PTR tv330[ebp]
  00155	03 75 ec	 add	 esi, DWORD PTR tv332[ebp]
  00158	40		 inc	 eax
  00159	39 4d f8	 cmp	 DWORD PTR tv330[ebp], ecx
  0015c	0f 4d 45 f8	 cmovge	 eax, DWORD PTR tv330[ebp]
  00160	89 45 f4	 mov	 DWORD PTR _tj$1$[ebp], eax
  00163	85 ff		 test	 edi, edi
  00165	0f 89 55 ff ff
	ff		 jns	 $LL2@drawTile
$LN3@drawTile:
  0016b	5f		 pop	 edi

; 1352 : 		{
; 1353 : 			tj++;
; 1354 : 			tx += SURFACE_WIDTH >> 1;
; 1355 : 			ty -= SURFACE_HEIGHT >> 1;
; 1356 : 		}
; 1357 : 		else
; 1358 : 		{
; 1359 : 			ti--;
; 1360 : 			tx -= SURFACE_WIDTH >> 1;
; 1361 : 			ty -= SURFACE_HEIGHT >> 1;
; 1362 : 		}
; 1363 : 	}
; 1364 : }

  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
?drawTile@@YAXXZ ENDP					; drawTile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?drawMap2@@YAXXZ
_TEXT	SEGMENT
tv879 = -40						; size = 4
tv905 = -36						; size = 4
?nowYFastDraw2@@3HA$1 = -32				; size = 4
_tj$1$ = -32						; size = 4
_dx$ = -32						; size = 4
_ti$1$ = -28						; size = 4
_dy$ = -28						; size = 4
_yy$ = -24						; size = 2
tv889 = -20						; size = 4
_bmpNo$ = -16						; size = 4
_hh$ = -12						; size = 2
_ww$ = -8						; size = 2
_xx$ = -4						; size = 2
?drawMap2@@YAXXZ PROC					; drawMap2, COMDAT

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	int i, j, x, y, tx, ty;
; 1132 : 	S2 xx, yy, ww, hh;
; 1133 : 	float dx, dy;
; 1134 : 	U4 bmpNo;
; 1135 : 	short tileDrawFlag;
; 1136 : 
; 1137 : 	if (!fastDrawTile)
; 1138 : 	{
; 1139 : 		drawMap();
; 1140 : 		return;
; 1141 : 	}
; 1142 : 	draw_map_bgm_flg = 0;
; 1143 : //	readMapAfterFrame++;
; 1144 : 	// ??????????????????????
; 1145 : 	if (nowGx != oldGx || nowGy != oldGy)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGx@@3HA ; nowGx
  00008	83 ec 28	 sub	 esp, 40			; 00000028H
  0000b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 0 ; draw_map_bgm_flg
  00015	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?oldGx@@3HA ; oldGx
  0001b	75 11		 jne	 SHORT $LN8@drawMap2
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  00022	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?oldGy@@3HA ; oldGy
  00028	0f 84 9d 00 00
	00		 je	 $LN12@drawMap2
$LN8@drawMap2:

; 1146 : 	{
; 1147 : 		if (readMap(nowFloor, mapAreaX1, mapAreaY1, mapAreaX2, mapAreaY2, &tile[0], &parts[0], &event[0]))

  0002e	68 00 00 00 00	 push	 OFFSET ?event@@3PAGA	; event
  00033	68 00 00 00 00	 push	 OFFSET ?parts@@3PAGA	; parts
  00038	68 00 00 00 00	 push	 OFFSET ?tile@@3PAGA	; tile
  0003d	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00043	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  00049	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  0004f	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowFloor@@3HA ; nowFloor
  0005b	e8 00 00 00 00	 call	 ?readMap@@YAHHHHHHPAG00@Z ; readMap
  00060	83 c4 20	 add	 esp, 32			; 00000020H
  00063	85 c0		 test	 eax, eax
  00065	0f 84 f7 03 00
	00		 je	 $LN9@drawMap2

; 1148 : 		{
; 1149 : 			// hitMap[]??????????
; 1150 : 			readHitMap(mapAreaX1, mapAreaY1, mapAreaX2, mapAreaY2, &tile[0], &parts[0], &event[0], &hitMap[0]);

  0006b	68 00 00 00 00	 push	 OFFSET ?hitMap@@3PAGA	; hitMap
  00070	68 00 00 00 00	 push	 OFFSET ?event@@3PAGA	; event
  00075	68 00 00 00 00	 push	 OFFSET ?parts@@3PAGA	; parts
  0007a	68 00 00 00 00	 push	 OFFSET ?tile@@3PAGA	; tile
  0007f	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00085	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  0008b	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  00091	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  00097	e8 00 00 00 00	 call	 ?readHitMap@@YAXHHHHPAG000@Z ; readHitMap
  0009c	83 c4 20	 add	 esp, 32			; 00000020H

; 1151 : 			if (mapEmptyFlag)

  0009f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapEmptyFlag@@3HA, 0 ; mapEmptyFlag
  000a6	74 19		 je	 SHORT $LN11@drawMap2

; 1152 : 			{
; 1153 : 				if (!checkEmptyMap(mapEmptyDir))

  000a8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?mapEmptyDir@@3FA ; mapEmptyDir
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?checkEmptyMap@@YAHH@Z	; checkEmptyMap
  000b5	83 c4 04	 add	 esp, 4
  000b8	85 c0		 test	 eax, eax
  000ba	75 0f		 jne	 SHORT $LN12@drawMap2

; 1154 : 				{
; 1155 : 					mapEmptyFlag = FALSE;

  000bc	a3 00 00 00 00	 mov	 DWORD PTR ?mapEmptyFlag@@3HA, eax ; mapEmptyFlag
$LN11@drawMap2:

; 1156 : 					autoMappingInitFlag = TRUE;	// ?????????
; 1157 : 				}
; 1158 : 			}
; 1159 : 			else
; 1160 : 				autoMappingInitFlag = TRUE;	// ?????????
; 1161 : //			readMapAfterFrame = 0;	// ????????????????????????
; 1162 : 		}
; 1163 : 		else
; 1164 : 			return;
; 1165 : 	}
; 1166 : 		camMapToGamen(0.0, 0.0, &dx, &dy);

  000c1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?autoMappingInitFlag@@3HA, 1 ; autoMappingInitFlag
$LN12@drawMap2:
  000cb	53		 push	 ebx
  000cc	56		 push	 esi
  000cd	57		 push	 edi
  000ce	8d 45 e4	 lea	 eax, DWORD PTR _dy$[ebp]
  000d1	50		 push	 eax
  000d2	8d 45 e0	 lea	 eax, DWORD PTR _dx$[ebp]
  000d5	50		 push	 eax
  000d6	83 ec 08	 sub	 esp, 8
  000d9	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  000e1	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000e8	e8 00 00 00 00	 call	 ?camMapToGamen@@YAXMMPAM0@Z ; camMapToGamen

; 1167 : 	nowXFastDraw = (int)(dx + .5);

  000ed	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _dx$[ebp]
  000f2	83 c4 10	 add	 esp, 16			; 00000010H

; 1168 : 	nowYFastDraw = (int)(dy + .5);
; 1169 : 	nowXFastDraw2 = nowXFastDraw;
; 1170 : 	nowYFastDraw2 = nowYFastDraw;
; 1171 : 	//???????????????
; 1172 : 	if (ResoMode == 1)

  000f5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  000fc	f2 0f 10 25 00
	00 00 00	 movsd	 xmm4, QWORD PTR __real@3fe0000000000000
  00104	f3 0f 10 5d e4	 movss	 xmm3, DWORD PTR _dy$[ebp]
  00109	0f 5a c2	 cvtps2pd xmm0, xmm2
  0010c	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00110	f2 0f 2c d8	 cvttsd2si ebx, xmm0
  00114	0f 5a c3	 cvtps2pd xmm0, xmm3
  00117	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nowXFastDraw@@3HA, ebx ; nowXFastDraw
  0011d	8b c3		 mov	 eax, ebx
  0011f	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nowXFastDraw2@@3HA, ebx ; nowXFastDraw2
  00125	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00129	f2 0f 2c d0	 cvttsd2si edx, xmm0
  0012d	89 55 e0	 mov	 DWORD PTR ?nowYFastDraw2@@3HA$1[ebp], edx
  00130	8b ca		 mov	 ecx, edx
  00132	89 15 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw@@3HA, edx ; nowYFastDraw
  00138	89 15 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw2@@3HA, edx ; nowYFastDraw2
  0013e	75 31		 jne	 SHORT $LN14@drawMap2

; 1173 : 	{
; 1174 : 		nowXFastDraw = (int)(dx / 2 + .5);

  00140	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000

; 1175 : 		nowYFastDraw = (int)(dy / 2 + .5);

  00148	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
  00150	0f 5a c2	 cvtps2pd xmm0, xmm2
  00153	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00157	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0015b	0f 5a c3	 cvtps2pd xmm0, xmm3
  0015e	a3 00 00 00 00	 mov	 DWORD PTR ?nowXFastDraw@@3HA, eax ; nowXFastDraw
  00163	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00167	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0016b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw@@3HA, ecx ; nowYFastDraw
$LN14@drawMap2:

; 1176 : 	}
; 1177 : 	amountXFastDraw = nowXFastDraw - baseXFastDraw;

  00171	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?baseXFastDraw@@3HA ; baseXFastDraw
  00177	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?baseYFastDraw@@3HA ; baseYFastDraw

; 1178 : 	amountYFastDraw = nowYFastDraw - baseYFastDraw;
; 1179 : 	amountXFastDraw2 = nowXFastDraw2 - baseXFastDraw2;
; 1180 : 	amountYFastDraw2 = nowYFastDraw2 - baseYFastDraw2;
; 1181 : 	tx = nowXFastDraw2 + (mapAreaX1 + mapAreaY2 - 1) * SURFACE_WIDTH / 2;

  0017d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00183	a3 00 00 00 00	 mov	 DWORD PTR ?amountXFastDraw@@3HA, eax ; amountXFastDraw
  00188	8b c3		 mov	 eax, ebx
  0018a	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?baseXFastDraw2@@3HA ; baseXFastDraw2
  00190	a3 00 00 00 00	 mov	 DWORD PTR ?amountXFastDraw2@@3HA, eax ; amountXFastDraw2
  00195	8b c2		 mov	 eax, edx
  00197	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?baseYFastDraw2@@3HA ; baseYFastDraw2
  0019d	a3 00 00 00 00	 mov	 DWORD PTR ?amountYFastDraw2@@3HA, eax ; amountYFastDraw2
  001a2	89 0d 00 00 00
	00		 mov	 DWORD PTR ?amountYFastDraw@@3HA, ecx ; amountYFastDraw
  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  001ae	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]

; 1182 : 	ty = nowYFastDraw2 + (-mapAreaX1 + mapAreaY2 - 1) * SURFACE_HEIGHT / 2;

  001b1	2b f1		 sub	 esi, ecx
  001b3	c1 e0 06	 shl	 eax, 6
  001b6	4e		 dec	 esi
  001b7	83 e8 40	 sub	 eax, 64			; 00000040H
  001ba	99		 cdq
  001bb	2b c2		 sub	 eax, edx
  001bd	8b f8		 mov	 edi, eax
  001bf	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  001c2	c1 e0 04	 shl	 eax, 4
  001c5	99		 cdq
  001c6	2b c2		 sub	 eax, edx
  001c8	d1 ff		 sar	 edi, 1

; 1183 : 	// ???????????????
; 1184 : 	//
; 1185 : 	// [map]
; 1186 : 	//               16
; 1187 : 	//            15    14
; 1188 : 	//         13    12    11
; 1189 : 	//      10     9     8     7
; 1190 : 	//          6     5     4
; 1191 : 	//             3     2
; 1192 : 	//                1
; 1193 : 	int ti, tj;
; 1194 : 
; 1195 : 	ti = mapAreaHeight - 1;

  001ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mapAreaHeight@@3HA ; mapAreaHeight
  001d0	03 fb		 add	 edi, ebx
  001d2	8b d8		 mov	 ebx, eax
  001d4	4a		 dec	 edx
  001d5	d1 fb		 sar	 ebx, 1

; 1196 : 	tj = 0;

  001d7	33 c0		 xor	 eax, eax
  001d9	03 5d e0	 add	 ebx, DWORD PTR ?nowYFastDraw2@@3HA$1[ebp]
  001dc	89 55 e4	 mov	 DWORD PTR _ti$1$[ebp], edx
  001df	89 45 e0	 mov	 DWORD PTR _tj$1$[ebp], eax

; 1197 : 	while (ti >= 0)

  001e2	85 d2		 test	 edx, edx
  001e4	0f 88 28 02 00
	00		 js	 $LN3@drawMap2
  001ea	66 0f 1f 44 00
	00		 npad	 6
$LL2@drawMap2:

; 1198 : 	{
; 1199 : 		i = ti;

  001f0	89 45 d8	 mov	 DWORD PTR tv879[ebp], eax
  001f3	8b f2		 mov	 esi, edx
  001f5	2b c2		 sub	 eax, edx
  001f7	89 7d dc	 mov	 DWORD PTR tv905[ebp], edi
  001fa	89 45 ec	 mov	 DWORD PTR tv889[ebp], eax
  001fd	0f 1f 00	 npad	 3
$LL4@drawMap2:

; 1200 : 		j = tj;
; 1201 : 		x = tx;
; 1202 : 		y = ty;
; 1203 : 		while (i >= 0 && j >= 0)

  00200	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00203	85 c9		 test	 ecx, ecx
  00205	0f 88 c5 01 00
	00		 js	 $LN5@drawMap2

; 1204 : 		{
; 1205 : 			// ???
; 1206 : 			if (tile[i * mapAreaWidth + j] > CG_INVISIBLE)

  0020b	8b c6		 mov	 eax, esi
  0020d	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00214	03 c1		 add	 eax, ecx
  00216	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR ?tile@@3PAGA[eax*2]
  0021e	83 f9 63	 cmp	 ecx, 99			; 00000063H
  00221	76 45		 jbe	 SHORT $LN15@drawMap2

; 1207 : 			{
; 1208 : 				if (amountXFastDraw2 != 0 || amountYFastDraw2 != 0)

  00223	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?amountXFastDraw2@@3HA, 0 ; amountXFastDraw2
  0022a	75 09		 jne	 SHORT $LN18@drawMap2
  0022c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?amountYFastDraw2@@3HA, 0 ; amountYFastDraw2
  00233	74 65		 je	 SHORT $LN33@drawMap2
$LN18@drawMap2:

; 1209 : 				{
; 1210 : 					// ???????????????
; 1211 : 					if ((-SURFACE_WIDTH >> 1) < x && x < DEF_APPSIZEX + (SURFACE_WIDTH >> 1) &&
; 1212 : 						(-SURFACE_HEIGHT >> 1) < y && y < DEF_APPSIZEY + (SURFACE_HEIGHT >> 1))

  00235	83 ff e0	 cmp	 edi, -32		; ffffffe0H
  00238	7e 60		 jle	 SHORT $LN33@drawMap2
  0023a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  0023f	83 c0 20	 add	 eax, 32			; 00000020H
  00242	3b f8		 cmp	 edi, eax
  00244	7d 54		 jge	 SHORT $LN33@drawMap2
  00246	83 fb e8	 cmp	 ebx, -24		; ffffffe8H
  00249	7e 4f		 jle	 SHORT $LN33@drawMap2
  0024b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00250	83 c0 18	 add	 eax, 24			; 00000018H
  00253	3b d8		 cmp	 ebx, eax
  00255	7d 43		 jge	 SHORT $LN33@drawMap2

; 1213 : 					{
; 1214 : 						tileDrawFlag = 0;
; 1215 : 						if (amountXFastDraw2 > 0)
; 1216 : 						{
; 1217 : 							if ((x - amountXFastDraw2) <= (SURFACE_WIDTH >> 1))
; 1218 : 								tileDrawFlag = 1;
; 1219 : 						}
; 1220 : 						else if (amountXFastDraw2 < 0)
; 1221 : 						{
; 1222 : 							if (DEF_APPSIZEX - (SURFACE_WIDTH >> 1) <= (x - amountXFastDraw2))
; 1223 : 								tileDrawFlag = 1;
; 1224 : 						}
; 1225 : 						if (amountYFastDraw2 > 0)
; 1226 : 						{
; 1227 : 							if ((y - amountYFastDraw2) <= (SURFACE_HEIGHT >> 1))
; 1228 : 								tileDrawFlag = 1;
; 1229 : 						}
; 1230 : 						else if (amountYFastDraw2 < 0)
; 1231 : 						{
; 1232 : 							if (DEF_APPSIZEY - (SURFACE_HEIGHT >> 1) <= (y - amountYFastDraw2))
; 1233 : 								tileDrawFlag = 1;
; 1234 : 						}
; 1235 : 						if (tileDrawFlag);
; 1236 : 							StockDispBuffer(x, y, DISP_PRIO_TILE, tile[i * mapAreaWidth + j], 0);

  00257	6a 00		 push	 0
  00259	51		 push	 ecx
  0025a	6a 01		 push	 1
  0025c	53		 push	 ebx
  0025d	57		 push	 edi
  0025e	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00263	83 c4 14	 add	 esp, 20			; 00000014H

; 1237 : 					}
; 1238 : 				}
; 1239 : 			}

  00266	eb 32		 jmp	 SHORT $LN33@drawMap2
$LN15@drawMap2:

; 1240 : 			else
; 1241 : 			{
; 1242 : 				// ?????????
; 1243 : 				// ??????????
; 1244 : 				if (20 <= tile[i * mapAreaWidth + j] && tile[i * mapAreaWidth + j] <= 39)

  00268	8d 41 ec	 lea	 eax, DWORD PTR [ecx-20]
  0026b	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  0026f	77 0d		 ja	 SHORT $LN31@drawMap2

; 1245 : 					play_environment(tile[i * mapAreaWidth + j], x, y);

  00271	53		 push	 ebx
  00272	57		 push	 edi
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 ?play_environment@@YAHHHH@Z ; play_environment
  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027c	eb 1c		 jmp	 SHORT $LN33@drawMap2
$LN31@drawMap2:

; 1246 : 				else if (40 <= tile[i * mapAreaWidth + j] && tile[i * mapAreaWidth + j] <= 59)// ???????????

  0027e	8d 41 d8	 lea	 eax, DWORD PTR [ecx-40]
  00281	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  00285	77 13		 ja	 SHORT $LN33@drawMap2

; 1247 : 				{
; 1248 : 					play_map_bgm(tile[i * mapAreaWidth + j]);

  00287	51		 push	 ecx
  00288	e8 00 00 00 00	 call	 ?play_map_bgm@@YAHH@Z	; play_map_bgm
  0028d	83 c4 04	 add	 esp, 4

; 1249 : 					draw_map_bgm_flg = 1;

  00290	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 1 ; draw_map_bgm_flg
$LN33@drawMap2:

; 1250 : 				}
; 1251 : 			}
; 1252 : 			// ???
; 1253 : 			if (parts[i * mapAreaWidth + j] > CG_INVISIBLE)

  0029a	8b 4d ec	 mov	 ecx, DWORD PTR tv889[ebp]
  0029d	8b c6		 mov	 eax, esi
  0029f	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  002a6	03 ce		 add	 ecx, esi
  002a8	03 c1		 add	 eax, ecx
  002aa	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR ?parts@@3PAGA[eax*2]
  002b2	83 f9 63	 cmp	 ecx, 99			; 00000063H
  002b5	0f 86 d4 00 00
	00		 jbe	 $LN34@drawMap2

; 1254 : 			{
; 1255 : 				realGetNo(parts[i * mapAreaWidth + j], &bmpNo);

  002bb	8d 45 f0	 lea	 eax, DWORD PTR _bmpNo$[ebp]
  002be	50		 push	 eax
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 1256 : 				// ???????
; 1257 : 				realGetPos(bmpNo, &xx, &yy);

  002c5	8d 45 e8	 lea	 eax, DWORD PTR _yy$[ebp]
  002c8	50		 push	 eax
  002c9	8d 45 fc	 lea	 eax, DWORD PTR _xx$[ebp]
  002cc	50		 push	 eax
  002cd	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  002d0	e8 00 00 00 00	 call	 ?realGetPos@@YAHKPAF0@Z	; realGetPos

; 1258 : 				realGetWH(bmpNo, &ww, &hh);

  002d5	8d 45 f4	 lea	 eax, DWORD PTR _hh$[ebp]
  002d8	50		 push	 eax
  002d9	8d 45 f8	 lea	 eax, DWORD PTR _ww$[ebp]
  002dc	50		 push	 eax
  002dd	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  002e0	e8 00 00 00 00	 call	 ?realGetWH@@YAHKPAF0@Z	; realGetWH

; 1259 : 				xx += x;

  002e5	66 8b 4d fc	 mov	 cx, WORD PTR _xx$[ebp]
  002e9	83 c4 20	 add	 esp, 32			; 00000020H

; 1260 : 				yy += y;

  002ec	8b 45 e8	 mov	 eax, DWORD PTR _yy$[ebp]
  002ef	66 03 cf	 add	 cx, di
  002f2	03 c3		 add	 eax, ebx
  002f4	66 89 4d fc	 mov	 WORD PTR _xx$[ebp], cx
  002f8	0f b7 d0	 movzx	 edx, ax
  002fb	0f bf c9	 movsx	 ecx, cx
  002fe	0f b7 c0	 movzx	 eax, ax
  00301	89 45 e8	 mov	 DWORD PTR _yy$[ebp], eax

; 1261 : 				if (xx < DEF_APPSIZEX && xx + ww - 1 >= 0 && yy < DEF_APPSIZEY && yy + hh - 1 >= 0)

  00304	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  0030a	0f 8d b1 00 00
	00		 jge	 $LN39@drawMap2
  00310	0f bf 45 f8	 movsx	 eax, WORD PTR _ww$[ebp]
  00314	03 c1		 add	 eax, ecx
  00316	85 c0		 test	 eax, eax
  00318	0f 8e a3 00 00
	00		 jle	 $LN39@drawMap2
  0031e	0f bf ca	 movsx	 ecx, dx
  00321	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00327	0f 8d 94 00 00
	00		 jge	 $LN39@drawMap2
  0032d	0f bf 45 f4	 movsx	 eax, WORD PTR _hh$[ebp]
  00331	03 c1		 add	 eax, ecx
  00333	85 c0		 test	 eax, eax
  00335	0f 8e 86 00 00
	00		 jle	 $LN39@drawMap2

; 1262 : 					// ?????????
; 1263 : 					setPartsPrio(bmpNo, x, y, 0, 0, (float)(mapAreaX1 + j) * GRID_SIZE, (float)(mapAreaY1 + i) * GRID_SIZE, -1);

  0033b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  00340	8b 4d ec	 mov	 ecx, DWORD PTR tv889[ebp]
  00343	03 c6		 add	 eax, esi
  00345	6a ff		 push	 -1
  00347	83 ec 08	 sub	 esp, 8
  0034a	03 ce		 add	 ecx, esi
  0034c	66 0f 6e c0	 movd	 xmm0, eax
  00350	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  00355	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00358	03 c1		 add	 eax, ecx
  0035a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00362	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00368	66 0f 6e c0	 movd	 xmm0, eax
  0036c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0036f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00377	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037c	6a 00		 push	 0
  0037e	6a 00		 push	 0
  00380	53		 push	 ebx
  00381	57		 push	 edi
  00382	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  00385	e8 00 00 00 00	 call	 ?setPartsPrio@@YAXHHHHHMMH@Z ; setPartsPrio
  0038a	83 c4 20	 add	 esp, 32			; 00000020H

; 1264 : 			}

  0038d	eb 32		 jmp	 SHORT $LN39@drawMap2
$LN34@drawMap2:

; 1265 : 			else
; 1266 : 			{
; 1267 : 				// ?????????
; 1268 : 				// ??????????
; 1269 : 				if (20 <= parts[i * mapAreaWidth + j] && parts[i * mapAreaWidth + j] <= 39)

  0038f	8d 41 ec	 lea	 eax, DWORD PTR [ecx-20]
  00392	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  00396	77 0d		 ja	 SHORT $LN37@drawMap2

; 1270 : 					play_environment(parts[i * mapAreaWidth + j], x, y);

  00398	53		 push	 ebx
  00399	57		 push	 edi
  0039a	51		 push	 ecx
  0039b	e8 00 00 00 00	 call	 ?play_environment@@YAHHHH@Z ; play_environment
  003a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a3	eb 1c		 jmp	 SHORT $LN39@drawMap2
$LN37@drawMap2:

; 1271 : 				else if (40 <= parts[i * mapAreaWidth + j] && parts[i * mapAreaWidth + j] <= 59)// ???????????

  003a5	8d 41 d8	 lea	 eax, DWORD PTR [ecx-40]
  003a8	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  003ac	77 13		 ja	 SHORT $LN39@drawMap2

; 1272 : 				{
; 1273 : 					play_map_bgm(parts[i * mapAreaWidth + j]);

  003ae	51		 push	 ecx
  003af	e8 00 00 00 00	 call	 ?play_map_bgm@@YAHH@Z	; play_map_bgm
  003b4	83 c4 04	 add	 esp, 4

; 1274 : 					draw_map_bgm_flg = 1;

  003b7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 1 ; draw_map_bgm_flg
$LN39@drawMap2:

; 1275 : 				}
; 1276 : 			}
; 1277 : 			i--;
; 1278 : 			j--;
; 1279 : 			x -= SURFACE_WIDTH;

  003c1	8b 45 ec	 mov	 eax, DWORD PTR tv889[ebp]
  003c4	83 ef 40	 sub	 edi, 64			; 00000040H
  003c7	83 ee 01	 sub	 esi, 1
  003ca	0f 89 30 fe ff
	ff		 jns	 $LL4@drawMap2
$LN5@drawMap2:

; 1197 : 	while (ti >= 0)

  003d0	8b 55 e4	 mov	 edx, DWORD PTR _ti$1$[ebp]
  003d3	bf 20 00 00 00	 mov	 edi, 32			; 00000020H

; 1280 : 		}
; 1281 : 		if (tj < mapAreaWidth - 1)

  003d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  003de	8b 75 d8	 mov	 esi, DWORD PTR tv879[ebp]
  003e1	49		 dec	 ecx
  003e2	39 4d e0	 cmp	 DWORD PTR _tj$1$[ebp], ecx
  003e5	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  003e8	0f 4d d0	 cmovge	 edx, eax
  003eb	83 eb 18	 sub	 ebx, 24			; 00000018H
  003ee	39 4d e0	 cmp	 DWORD PTR _tj$1$[ebp], ecx
  003f1	b8 e0 ff ff ff	 mov	 eax, -32		; ffffffe0H
  003f6	89 55 e4	 mov	 DWORD PTR _ti$1$[ebp], edx
  003f9	0f 4d f8	 cmovge	 edi, eax
  003fc	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  003ff	03 7d dc	 add	 edi, DWORD PTR tv905[ebp]
  00402	3b f1		 cmp	 esi, ecx
  00404	0f 4d c6	 cmovge	 eax, esi
  00407	89 45 e0	 mov	 DWORD PTR _tj$1$[ebp], eax
  0040a	85 d2		 test	 edx, edx
  0040c	0f 89 de fd ff
	ff		 jns	 $LL2@drawMap2
$LN3@drawMap2:

; 1282 : 		{
; 1283 : 			tj++;
; 1284 : 			tx += SURFACE_WIDTH >> 1;
; 1285 : 			ty -= SURFACE_HEIGHT >> 1;
; 1286 : 		}
; 1287 : 		else
; 1288 : 		{
; 1289 : 			ti--;
; 1290 : 			tx -= SURFACE_WIDTH >> 1;
; 1291 : 			ty -= SURFACE_HEIGHT >> 1;
; 1292 : 		}
; 1293 : 	}
; 1294 : 	// shan 2002/01/18
; 1295 : 	if (fMapBgm >= 40 && fMapBgm <= 53 && map_bgm_no == 2)

  00412	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fMapBgm@@3HA ; fMapBgm
  00418	5f		 pop	 edi
  00419	5e		 pop	 esi
  0041a	5b		 pop	 ebx
  0041b	8d 41 d8	 lea	 eax, DWORD PTR [ecx-40]
  0041e	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00421	77 26		 ja	 SHORT $LN42@drawMap2
  00423	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?map_bgm_no@@3HA, 2 ; map_bgm_no
  0042a	75 1d		 jne	 SHORT $LN42@drawMap2

; 1296 : 	{
; 1297 : 		play_map_bgm(fMapBgm);

  0042c	51		 push	 ecx
  0042d	e8 00 00 00 00	 call	 ?play_map_bgm@@YAHH@Z	; play_map_bgm
  00432	83 c4 04	 add	 esp, 4

; 1298 : 		draw_map_bgm_flg = 1;

  00435	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 1 ; draw_map_bgm_flg

; 1299 : 		fMapBgm = 0;

  0043f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fMapBgm@@3HA, 0 ; fMapBgm
$LN42@drawMap2:

; 1300 : 	}
; 1301 : 	stockCharParts();

  00449	e8 00 00 00 00	 call	 ?stockCharParts@@YAXXZ	; stockCharParts

; 1302 : 	oldGx = nowGx;

  0044e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGx@@3HA ; nowGx
  00453	a3 00 00 00 00	 mov	 DWORD PTR ?oldGx@@3HA, eax ; oldGx

; 1303 : 	oldGy = nowGy;

  00458	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  0045d	a3 00 00 00 00	 mov	 DWORD PTR ?oldGy@@3HA, eax ; oldGy
$LN9@drawMap2:

; 1304 : }

  00462	8b e5		 mov	 esp, ebp
  00464	5d		 pop	 ebp
  00465	c3		 ret	 0
?drawMap2@@YAXXZ ENDP					; drawMap2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?drawMap@@YAXXZ
_TEXT	SEGMENT
tv781 = -40						; size = 4
tv807 = -36						; size = 4
_tj$1$ = -32						; size = 4
_dx$ = -32						; size = 4
_ti$1$ = -28						; size = 4
_dy$ = -28						; size = 4
_yy$ = -24						; size = 2
tv791 = -20						; size = 4
_bmpNo$ = -16						; size = 4
_hh$ = -12						; size = 2
_ww$ = -8						; size = 2
_xx$ = -4						; size = 2
?drawMap@@YAXXZ PROC					; drawMap, COMDAT

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 897  : 	int i, j, x, y, tx, ty, rainFlag = 0, snowFlag = 0, tryFlag = 0;;
; 898  : 	S2 xx, yy, ww, hh;
; 899  : 	float dx, dy;
; 900  : 	U4 bmpNo;
; 901  : 
; 902  : 	draw_map_bgm_flg = 0;
; 903  : //	readMapAfterFrame++;
; 904  : 	// ??????????????????????
; 905  : 	if (nowGx != oldGx || nowGy != oldGy)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGx@@3HA ; nowGx
  00008	83 ec 28	 sub	 esp, 40			; 00000028H
  0000b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 0 ; draw_map_bgm_flg
  00015	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?oldGx@@3HA ; oldGx
  0001b	75 11		 jne	 SHORT $LN7@drawMap
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  00022	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?oldGy@@3HA ; oldGy
  00028	0f 84 9d 00 00
	00		 je	 $LN11@drawMap
$LN7@drawMap:

; 906  : 	{//根据地图号把数据读出来
; 907  : 		if (readMap(nowFloor, mapAreaX1, mapAreaY1, mapAreaX2, mapAreaY2, &tile[0], &parts[0], &event[0]))

  0002e	68 00 00 00 00	 push	 OFFSET ?event@@3PAGA	; event
  00033	68 00 00 00 00	 push	 OFFSET ?parts@@3PAGA	; parts
  00038	68 00 00 00 00	 push	 OFFSET ?tile@@3PAGA	; tile
  0003d	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00043	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  00049	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  0004f	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowFloor@@3HA ; nowFloor
  0005b	e8 00 00 00 00	 call	 ?readMap@@YAHHHHHHPAG00@Z ; readMap
  00060	83 c4 20	 add	 esp, 32			; 00000020H
  00063	85 c0		 test	 eax, eax
  00065	0f 84 c8 03 00
	00		 je	 $LN8@drawMap

; 908  : 		{
; 909  : 			// hitMap[]????????
; 910  : 			readHitMap(mapAreaX1, mapAreaY1, mapAreaX2, mapAreaY2, &tile[0], &parts[0], &event[0], &hitMap[0]);

  0006b	68 00 00 00 00	 push	 OFFSET ?hitMap@@3PAGA	; hitMap
  00070	68 00 00 00 00	 push	 OFFSET ?event@@3PAGA	; event
  00075	68 00 00 00 00	 push	 OFFSET ?parts@@3PAGA	; parts
  0007a	68 00 00 00 00	 push	 OFFSET ?tile@@3PAGA	; tile
  0007f	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00085	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  0008b	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  00091	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  00097	e8 00 00 00 00	 call	 ?readHitMap@@YAXHHHHPAG000@Z ; readHitMap
  0009c	83 c4 20	 add	 esp, 32			; 00000020H

; 911  : 			if (mapEmptyFlag)

  0009f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapEmptyFlag@@3HA, 0 ; mapEmptyFlag
  000a6	74 19		 je	 SHORT $LN10@drawMap

; 912  : 			{
; 913  : 				if (!checkEmptyMap(mapEmptyDir))

  000a8	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?mapEmptyDir@@3FA ; mapEmptyDir
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?checkEmptyMap@@YAHH@Z	; checkEmptyMap
  000b5	83 c4 04	 add	 esp, 4
  000b8	85 c0		 test	 eax, eax
  000ba	75 0f		 jne	 SHORT $LN11@drawMap

; 914  : 				{
; 915  : 					mapEmptyFlag = FALSE;

  000bc	a3 00 00 00 00	 mov	 DWORD PTR ?mapEmptyFlag@@3HA, eax ; mapEmptyFlag
$LN10@drawMap:

; 916  : 					autoMappingInitFlag = TRUE;	// ?????????
; 917  : 				}
; 918  : 			}
; 919  : 			else
; 920  : 				autoMappingInitFlag = TRUE;	// ?????????
; 921  : //			readMapAfterFrame = 0;	// ????????????????????????
; 922  : 		}
; 923  : 		else
; 924  : 			return;
; 925  : 	}
; 926  : 	camMapToGamen(0.0, 0.0, &dx, &dy);

  000c1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?autoMappingInitFlag@@3HA, 1 ; autoMappingInitFlag
$LN11@drawMap:
  000cb	53		 push	 ebx
  000cc	56		 push	 esi
  000cd	57		 push	 edi
  000ce	8d 45 e4	 lea	 eax, DWORD PTR _dy$[ebp]
  000d1	50		 push	 eax
  000d2	8d 45 e0	 lea	 eax, DWORD PTR _dx$[ebp]
  000d5	50		 push	 eax
  000d6	83 ec 08	 sub	 esp, 8
  000d9	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  000e1	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000e8	e8 00 00 00 00	 call	 ?camMapToGamen@@YAXMMPAM0@Z ; camMapToGamen

; 927  : 	baseXFastDraw = (int)(dx + .5);

  000ed	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _dx$[ebp]
  000f2	83 c4 10	 add	 esp, 16			; 00000010H

; 928  : 	baseYFastDraw = (int)(dy + .5);
; 929  : 	//???????????????
; 930  : 	if (ResoMode == 1)

  000f5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  000fc	f2 0f 10 25 00
	00 00 00	 movsd	 xmm4, QWORD PTR __real@3fe0000000000000
  00104	f3 0f 10 5d e4	 movss	 xmm3, DWORD PTR _dy$[ebp]
  00109	0f 5a c2	 cvtps2pd xmm0, xmm2
  0010c	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00110	f2 0f 2c d8	 cvttsd2si ebx, xmm0
  00114	0f 5a c3	 cvtps2pd xmm0, xmm3
  00117	89 1d 00 00 00
	00		 mov	 DWORD PTR ?baseXFastDraw@@3HA, ebx ; baseXFastDraw
  0011d	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00121	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00125	89 0d 00 00 00
	00		 mov	 DWORD PTR ?baseYFastDraw@@3HA, ecx ; baseYFastDraw
  0012b	75 32		 jne	 SHORT $LN13@drawMap

; 931  : 	{
; 932  : 		nowXFastDraw = (int)(dx / 2 + .5);

  0012d	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000

; 933  : 		nowYFastDraw = (int)(dy / 2 + .5);

  00135	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
  0013d	0f 5a c2	 cvtps2pd xmm0, xmm2
  00140	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00144	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00148	0f 5a c3	 cvtps2pd xmm0, xmm3
  0014b	a3 00 00 00 00	 mov	 DWORD PTR ?nowXFastDraw@@3HA, eax ; nowXFastDraw
  00150	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00154	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?nowYFastDraw@@3HA, eax ; nowYFastDraw

; 934  : 	}

  0015d	eb 0c		 jmp	 SHORT $LN14@drawMap
$LN13@drawMap:

; 935  : 	else
; 936  : 	{
; 937  : 		nowXFastDraw = baseXFastDraw;

  0015f	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nowXFastDraw@@3HA, ebx ; nowXFastDraw

; 938  : 		nowYFastDraw = baseYFastDraw;

  00165	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw@@3HA, ecx ; nowYFastDraw
$LN14@drawMap:

; 939  : 	}
; 940  : 	nowXFastDraw2 = baseXFastDraw;
; 941  : 	nowYFastDraw2 = baseYFastDraw;
; 942  : 	amountXFastDraw = 0;
; 943  : 	amountYFastDraw = 0;
; 944  : 	// 1 5 12 16 ... 
; 945  : 	tx = nowXFastDraw2 + (mapAreaX1 + mapAreaY2 - 1) * SURFACE_WIDTH / 2;

  0016b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00171	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw2@@3HA, ecx ; nowYFastDraw2
  00177	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  0017d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?nowXFastDraw2@@3HA, ebx ; nowXFastDraw2
  00183	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?amountXFastDraw@@3HA, 0 ; amountXFastDraw
  0018d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?amountYFastDraw@@3HA, 0 ; amountYFastDraw
  00197	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]

; 946  : 	ty = nowYFastDraw2 + (-mapAreaX1 + mapAreaY2 - 1) * SURFACE_HEIGHT / 2;

  0019a	2b f1		 sub	 esi, ecx
  0019c	c1 e0 06	 shl	 eax, 6
  0019f	4e		 dec	 esi
  001a0	83 e8 40	 sub	 eax, 64			; 00000040H
  001a3	99		 cdq
  001a4	2b c2		 sub	 eax, edx
  001a6	8b f8		 mov	 edi, eax
  001a8	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  001ab	c1 e0 04	 shl	 eax, 4
  001ae	99		 cdq
  001af	2b c2		 sub	 eax, edx
  001b1	d1 ff		 sar	 edi, 1

; 947  : 
; 948  : #if 1
; 949  : 	// ???????????????
; 950  : 	//
; 951  : 	// [map]
; 952  : 	//               16
; 953  : 	//            15    14
; 954  : 	//         13    12    11
; 955  : 	//      10     9     8     7
; 956  : 	//          6     5     4
; 957  : 	//             3     2
; 958  : 	//                1
; 959  : 
; 960  : 	int ti, tj;
; 961  : 
; 962  : 	ti = mapAreaHeight - 1;

  001b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mapAreaHeight@@3HA ; mapAreaHeight
  001b9	03 fb		 add	 edi, ebx
  001bb	8b d8		 mov	 ebx, eax
  001bd	4a		 dec	 edx
  001be	d1 fb		 sar	 ebx, 1

; 963  : 	tj = 0;

  001c0	33 c0		 xor	 eax, eax
  001c2	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?baseYFastDraw@@3HA ; baseYFastDraw
  001c8	89 55 e4	 mov	 DWORD PTR _ti$1$[ebp], edx
  001cb	89 45 e0	 mov	 DWORD PTR _tj$1$[ebp], eax

; 964  : 
; 965  : 	while (ti >= 0)

  001ce	85 d2		 test	 edx, edx
  001d0	0f 88 0d 02 00
	00		 js	 $LN3@drawMap
$LL2@drawMap:

; 966  : 	{
; 967  : 		i = ti;

  001d6	89 45 d8	 mov	 DWORD PTR tv781[ebp], eax
  001d9	8b f2		 mov	 esi, edx
  001db	2b c2		 sub	 eax, edx
  001dd	89 7d dc	 mov	 DWORD PTR tv807[ebp], edi
  001e0	89 45 ec	 mov	 DWORD PTR tv791[ebp], eax
$LL4@drawMap:

; 968  : 		j = tj;
; 969  : 		x = tx;
; 970  : 		y = ty;
; 971  : //		if (i==30)
; 972  : 		while (i >= 0 && j >= 0)

  001e3	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  001e6	85 c9		 test	 ecx, ecx
  001e8	0f 88 b3 01 00
	00		 js	 $LN5@drawMap

; 973  : 		{
; 974  : 			// ???
; 975  : 			if (tile[i * mapAreaWidth+j] > CG_INVISIBLE)

  001ee	8b c6		 mov	 eax, esi
  001f0	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  001f7	03 c1		 add	 eax, ecx
  001f9	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR ?tile@@3PAGA[eax*2]
  00201	83 f9 63	 cmp	 ecx, 99			; 00000063H
  00204	76 33		 jbe	 SHORT $LN15@drawMap

; 976  : 			{
; 977  : #if 0
; 978  : 				// ????????(???)
; 979  : 				if (193 <= tile[i * mapAreaWidth + j] && tile[i * mapAreaWidth+j] <= 196)
; 980  : 					play_environment(0, x, y);
; 981  : #endif
; 982  : 				// ???????
; 983  : 				if (x >= (-SURFACE_WIDTH >> 1) && x < DEF_APPSIZEX + (SURFACE_WIDTH >> 1) &&
; 984  : 					y >= (-SURFACE_HEIGHT >> 1) && y < DEF_APPSIZEY + (SURFACE_HEIGHT >> 1))

  00206	83 ff e0	 cmp	 edi, -32		; ffffffe0H
  00209	7c 60		 jl	 SHORT $LN20@drawMap
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  00210	83 c0 20	 add	 eax, 32			; 00000020H
  00213	3b f8		 cmp	 edi, eax
  00215	7d 54		 jge	 SHORT $LN20@drawMap
  00217	83 fb e8	 cmp	 ebx, -24		; ffffffe8H
  0021a	7c 4f		 jl	 SHORT $LN20@drawMap
  0021c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00221	83 c0 18	 add	 eax, 24			; 00000018H
  00224	3b d8		 cmp	 ebx, eax
  00226	7d 43		 jge	 SHORT $LN20@drawMap

; 985  : 					StockDispBuffer(x, y, DISP_PRIO_TILE, tile[i * mapAreaWidth + j], 0);

  00228	6a 00		 push	 0
  0022a	51		 push	 ecx
  0022b	6a 01		 push	 1
  0022d	53		 push	 ebx
  0022e	57		 push	 edi
  0022f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00234	83 c4 14	 add	 esp, 20			; 00000014H

; 986  : 			}

  00237	eb 32		 jmp	 SHORT $LN20@drawMap
$LN15@drawMap:

; 987  : 			else
; 988  : 			{
; 989  : 				// ?????????
; 990  : 				// ??????????
; 991  : 				if (20 <= tile[i * mapAreaWidth + j] && tile[i * mapAreaWidth + j] <= 39)

  00239	8d 41 ec	 lea	 eax, DWORD PTR [ecx-20]
  0023c	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  00240	77 0d		 ja	 SHORT $LN18@drawMap

; 992  : 					play_environment(tile[i * mapAreaWidth + j], x, y);

  00242	53		 push	 ebx
  00243	57		 push	 edi
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 ?play_environment@@YAHHHH@Z ; play_environment
  0024a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024d	eb 1c		 jmp	 SHORT $LN20@drawMap
$LN18@drawMap:

; 993  : 				else if (40 <= tile[i * mapAreaWidth + j] && tile[i * mapAreaWidth + j] <= 59)// ???????????

  0024f	8d 41 d8	 lea	 eax, DWORD PTR [ecx-40]
  00252	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  00256	77 13		 ja	 SHORT $LN20@drawMap

; 994  : 				{
; 995  : 					play_map_bgm(tile[i * mapAreaWidth + j]);

  00258	51		 push	 ecx
  00259	e8 00 00 00 00	 call	 ?play_map_bgm@@YAHH@Z	; play_map_bgm
  0025e	83 c4 04	 add	 esp, 4

; 996  : 					draw_map_bgm_flg = 1;

  00261	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 1 ; draw_map_bgm_flg
$LN20@drawMap:

; 997  : 				}
; 998  : 			}
; 999  : 			// ???
; 1000 : 			if (parts[i * mapAreaWidth+j] > CG_INVISIBLE)

  0026b	8b 4d ec	 mov	 ecx, DWORD PTR tv791[ebp]
  0026e	8b c6		 mov	 eax, esi
  00270	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00277	03 ce		 add	 ecx, esi
  00279	03 c1		 add	 eax, ecx
  0027b	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR ?parts@@3PAGA[eax*2]
  00283	83 f9 63	 cmp	 ecx, 99			; 00000063H
  00286	0f 86 d4 00 00
	00		 jbe	 $LN21@drawMap

; 1001 : 			{
; 1002 : #if 0
; 1003 : 				// ????????(???)
; 1004 : 				if (parts[i * mapAreaWidth+j] == 10011)
; 1005 : 					play_environment(2, x, y);
; 1006 : 				else if (parts[i * mapAreaWidth + j] == 10012)
; 1007 : 					play_environment(1, x, y);
; 1008 : 				else if (parts[i * mapAreaWidth + j] == 10203)
; 1009 : 					play_environment(4, x, y);
; 1010 : 				else if (parts[i * mapAreaWidth + j] == 10048)
; 1011 : 				{
; 1012 : 					play_map_bgm(2);
; 1013 : 					draw_map_bgm_flg = 1;
; 1014 : 				}
; 1015 : #endif
; 1016 : 				realGetNo(parts[i * mapAreaWidth + j], &bmpNo);

  0028c	8d 45 f0	 lea	 eax, DWORD PTR _bmpNo$[ebp]
  0028f	50		 push	 eax
  00290	51		 push	 ecx
  00291	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 1017 : 				// ???????
; 1018 : 				realGetPos(bmpNo, &xx, &yy);

  00296	8d 45 e8	 lea	 eax, DWORD PTR _yy$[ebp]
  00299	50		 push	 eax
  0029a	8d 45 fc	 lea	 eax, DWORD PTR _xx$[ebp]
  0029d	50		 push	 eax
  0029e	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  002a1	e8 00 00 00 00	 call	 ?realGetPos@@YAHKPAF0@Z	; realGetPos

; 1019 : 				realGetWH(bmpNo, &ww, &hh);

  002a6	8d 45 f4	 lea	 eax, DWORD PTR _hh$[ebp]
  002a9	50		 push	 eax
  002aa	8d 45 f8	 lea	 eax, DWORD PTR _ww$[ebp]
  002ad	50		 push	 eax
  002ae	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  002b1	e8 00 00 00 00	 call	 ?realGetWH@@YAHKPAF0@Z	; realGetWH

; 1020 : 				xx += x;

  002b6	66 8b 4d fc	 mov	 cx, WORD PTR _xx$[ebp]
  002ba	83 c4 20	 add	 esp, 32			; 00000020H

; 1021 : 				yy += y;

  002bd	8b 45 e8	 mov	 eax, DWORD PTR _yy$[ebp]
  002c0	66 03 cf	 add	 cx, di
  002c3	03 c3		 add	 eax, ebx
  002c5	66 89 4d fc	 mov	 WORD PTR _xx$[ebp], cx
  002c9	0f b7 d0	 movzx	 edx, ax
  002cc	0f bf c9	 movsx	 ecx, cx
  002cf	0f b7 c0	 movzx	 eax, ax
  002d2	89 45 e8	 mov	 DWORD PTR _yy$[ebp], eax

; 1022 : 				if (xx < DEF_APPSIZEX && xx + ww - 1 >= 0 && yy < DEF_APPSIZEY && yy + hh - 1 >= 0)

  002d5	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  002db	0f 8d b1 00 00
	00		 jge	 $LN26@drawMap
  002e1	0f bf 45 f8	 movsx	 eax, WORD PTR _ww$[ebp]
  002e5	03 c1		 add	 eax, ecx
  002e7	85 c0		 test	 eax, eax
  002e9	0f 8e a3 00 00
	00		 jle	 $LN26@drawMap
  002ef	0f bf ca	 movsx	 ecx, dx
  002f2	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  002f8	0f 8d 94 00 00
	00		 jge	 $LN26@drawMap
  002fe	0f bf 45 f4	 movsx	 eax, WORD PTR _hh$[ebp]
  00302	03 c1		 add	 eax, ecx
  00304	85 c0		 test	 eax, eax
  00306	0f 8e 86 00 00
	00		 jle	 $LN26@drawMap

; 1023 : 					// ?????????
; 1024 : 					setPartsPrio(bmpNo, x, y, 0, 0, (float)(mapAreaX1 + j) * GRID_SIZE, (float)(mapAreaY1 + i) * GRID_SIZE, -1);

  0030c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  00311	8b 4d ec	 mov	 ecx, DWORD PTR tv791[ebp]
  00314	03 c6		 add	 eax, esi
  00316	6a ff		 push	 -1
  00318	83 ec 08	 sub	 esp, 8
  0031b	03 ce		 add	 ecx, esi
  0031d	66 0f 6e c0	 movd	 xmm0, eax
  00321	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  00326	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00329	03 c1		 add	 eax, ecx
  0032b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00333	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00339	66 0f 6e c0	 movd	 xmm0, eax
  0033d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00340	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00348	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034d	6a 00		 push	 0
  0034f	6a 00		 push	 0
  00351	53		 push	 ebx
  00352	57		 push	 edi
  00353	ff 75 f0	 push	 DWORD PTR _bmpNo$[ebp]
  00356	e8 00 00 00 00	 call	 ?setPartsPrio@@YAXHHHHHMMH@Z ; setPartsPrio
  0035b	83 c4 20	 add	 esp, 32			; 00000020H

; 1025 : 			}

  0035e	eb 32		 jmp	 SHORT $LN26@drawMap
$LN21@drawMap:

; 1026 : 			else
; 1027 : 			{
; 1028 : 				// ?????????
; 1029 : 				// ??????????
; 1030 : 				if (20 <= parts[i * mapAreaWidth + j] && parts[i * mapAreaWidth + j] <= 39)

  00360	8d 41 ec	 lea	 eax, DWORD PTR [ecx-20]
  00363	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  00367	77 0d		 ja	 SHORT $LN24@drawMap

; 1031 : 					play_environment(parts[i * mapAreaWidth + j], x, y);

  00369	53		 push	 ebx
  0036a	57		 push	 edi
  0036b	51		 push	 ecx
  0036c	e8 00 00 00 00	 call	 ?play_environment@@YAHHHH@Z ; play_environment
  00371	83 c4 0c	 add	 esp, 12			; 0000000cH
  00374	eb 1c		 jmp	 SHORT $LN26@drawMap
$LN24@drawMap:

; 1032 : 				else if (40 <= parts[i * mapAreaWidth + j] && parts[i * mapAreaWidth + j] <= 59)// ???????????

  00376	8d 41 d8	 lea	 eax, DWORD PTR [ecx-40]
  00379	66 83 f8 13	 cmp	 ax, 19			; 00000013H
  0037d	77 13		 ja	 SHORT $LN26@drawMap

; 1033 : 				{
; 1034 : 					play_map_bgm(parts[i * mapAreaWidth + j]);

  0037f	51		 push	 ecx
  00380	e8 00 00 00 00	 call	 ?play_map_bgm@@YAHH@Z	; play_map_bgm
  00385	83 c4 04	 add	 esp, 4

; 1035 : 					draw_map_bgm_flg = 1;

  00388	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 1 ; draw_map_bgm_flg
$LN26@drawMap:

; 1036 : 				}
; 1037 : 			}
; 1038 : 			i--;
; 1039 : 			j--;
; 1040 : 			x -= SURFACE_WIDTH;

  00392	8b 45 ec	 mov	 eax, DWORD PTR tv791[ebp]
  00395	83 ef 40	 sub	 edi, 64			; 00000040H
  00398	83 ee 01	 sub	 esi, 1
  0039b	0f 89 42 fe ff
	ff		 jns	 $LL4@drawMap
$LN5@drawMap:

; 964  : 
; 965  : 	while (ti >= 0)

  003a1	8b 55 e4	 mov	 edx, DWORD PTR _ti$1$[ebp]
  003a4	bf 20 00 00 00	 mov	 edi, 32			; 00000020H

; 1041 : 		}
; 1042 : 		if (tj < mapAreaWidth - 1)

  003a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  003af	8b 75 d8	 mov	 esi, DWORD PTR tv781[ebp]
  003b2	49		 dec	 ecx
  003b3	39 4d e0	 cmp	 DWORD PTR _tj$1$[ebp], ecx
  003b6	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  003b9	0f 4d d0	 cmovge	 edx, eax
  003bc	83 eb 18	 sub	 ebx, 24			; 00000018H
  003bf	39 4d e0	 cmp	 DWORD PTR _tj$1$[ebp], ecx
  003c2	b8 e0 ff ff ff	 mov	 eax, -32		; ffffffe0H
  003c7	89 55 e4	 mov	 DWORD PTR _ti$1$[ebp], edx
  003ca	0f 4d f8	 cmovge	 edi, eax
  003cd	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  003d0	03 7d dc	 add	 edi, DWORD PTR tv807[ebp]
  003d3	3b f1		 cmp	 esi, ecx
  003d5	0f 4d c6	 cmovge	 eax, esi
  003d8	89 45 e0	 mov	 DWORD PTR _tj$1$[ebp], eax
  003db	85 d2		 test	 edx, edx
  003dd	0f 89 f3 fd ff
	ff		 jns	 $LL2@drawMap
$LN3@drawMap:

; 1043 : 		{
; 1044 : 			tj++;
; 1045 : 			tx += SURFACE_WIDTH >> 1;
; 1046 : 			ty -= SURFACE_HEIGHT >> 1;
; 1047 : 		}
; 1048 : 		else
; 1049 : 		{
; 1050 : 			ti--;
; 1051 : 			tx -= SURFACE_WIDTH >> 1;
; 1052 : 			ty -= SURFACE_HEIGHT >> 1;
; 1053 : 		}
; 1054 : 	}
; 1055 : #else
; 1056 : 	// ???????????????
; 1057 : 	//
; 1058 : 	// [map] 
; 1059 : 	//               16
; 1060 : 	//            15    12
; 1061 : 	//         14    11     8
; 1062 : 	//      13    10     7     4
; 1063 : 	//          9     6     3
; 1064 : 	//             5     2
; 1065 : 	//                1
; 1066 : 	x = (int)(dx + .5);
; 1067 : 	y = (int)(dy + .5);
; 1068 : 	for (i = mapAreaHeight - 1; i >= 0; i--)
; 1069 : 	{
; 1070 : 		tx = x;
; 1071 : 		ty = y;
; 1072 : 		for (j = 0; j < mapAreaWidth; j++)
; 1073 : 		{
; 1074 : 			// ???
; 1075 : 			if (tile[i * mapAreaWidth + j] > CG_INVISIBLE)
; 1076 : 			{
; 1077 : 				// ???????
; 1078 : 				if (x >= (-SURFACE_WIDTH >> 1) && x < DEF_APPSIZEX + (SURFACE_WIDTH >> 1) &&
; 1079 : 					y >= (-SURFACE_HEIGHT >> 1) && y < DEF_APPSIZEY + (SURFACE_HEIGHT >> 1))
; 1080 : 					StockDispBuffer(x, y, DISP_PRIO_TILE, tile[i * mapAreaWidth + j], 0);
; 1081 : 			}
; 1082 : 			// ???
; 1083 : 			if (parts[i * mapAreaWidth + j] > CG_INVISIBLE)
; 1084 : 			{
; 1085 : 				realGetNo(parts[i * mapAreaWidth + j], &bmpNo);
; 1086 : 				// ???????
; 1087 : 				realGetPos(bmpNo, &xx, &yy);
; 1088 : 				realGetWH(bmpNo, &ww, &hh);
; 1089 : 				xx += x;
; 1090 : 				yy += y;
; 1091 : 				if (xx < DEF_APPSIZEX && xx + ww - 1 >= 0 && yy < DEF_APPSIZEY && yy + hh - 1 >= 0)
; 1092 : 					// ?????????
; 1093 : 					setPartsPrio(bmpNo, x, y, 0, 0, (float)(mapAreaX1 + j) * GRID_SIZE, (float)(mapAreaY1 + i) * GRID_SIZE, -1);
; 1094 : 			}
; 1095 : 			x += SURFACE_WIDTH >> 1;
; 1096 : 			y -= SURFACE_HEIGHT >> 1;
; 1097 : 		}
; 1098 : 		x = tx-SURFACE_WIDTH >> 1;
; 1099 : 		y = ty-SURFACE_HEIGHT >> 1;
; 1100 : 	}
; 1101 : #endif
; 1102 : 	stockCharParts();

  003e3	e8 00 00 00 00	 call	 ?stockCharParts@@YAXXZ	; stockCharParts

; 1103 : 	oldGx = nowGx;

  003e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGx@@3HA ; nowGx

; 1104 : 	oldGy = nowGy;
; 1105 : #if 0
; 1106 : 	if (!draw_map_bgm_flg)
; 1107 : 	{
; 1108 : 		play_map_bgm(0);
; 1109 : 		draw_map_bgm_flg = 1;
; 1110 : 	}
; 1111 : #endif
; 1112 : 	// shan 2002/01/18
; 1113 : 	if (fMapBgm >= 40 && fMapBgm <= 53 && map_bgm_no == 2)

  003ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fMapBgm@@3HA ; fMapBgm
  003f3	a3 00 00 00 00	 mov	 DWORD PTR ?oldGx@@3HA, eax ; oldGx
  003f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  003fd	5f		 pop	 edi
  003fe	a3 00 00 00 00	 mov	 DWORD PTR ?oldGy@@3HA, eax ; oldGy
  00403	8d 41 d8	 lea	 eax, DWORD PTR [ecx-40]
  00406	5e		 pop	 esi
  00407	5b		 pop	 ebx
  00408	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  0040b	77 26		 ja	 SHORT $LN8@drawMap
  0040d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?map_bgm_no@@3HA, 2 ; map_bgm_no
  00414	75 1d		 jne	 SHORT $LN8@drawMap

; 1114 : 	{
; 1115 : 		play_map_bgm(fMapBgm);

  00416	51		 push	 ecx
  00417	e8 00 00 00 00	 call	 ?play_map_bgm@@YAHH@Z	; play_map_bgm
  0041c	83 c4 04	 add	 esp, 4

; 1116 : 		draw_map_bgm_flg = 1;

  0041f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 1 ; draw_map_bgm_flg

; 1117 : 		fMapBgm = 0;

  00429	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fMapBgm@@3HA, 0 ; fMapBgm
$LN8@drawMap:

; 1118 : 	}
; 1119 : 	
; 1120 : 	/*
; 1121 : 	else
; 1122 : 	{
; 1123 : 		draw_map_bgm_flg = 0;
; 1124 : 	}
; 1125 : 	*/
; 1126 : }

  00433	8b e5		 mov	 esp, ebp
  00435	5d		 pop	 ebp
  00436	c3		 ret	 0
?drawMap@@YAXXZ ENDP					; drawMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?ddrawBattleMap@@YAXXZ
_TEXT	SEGMENT
_bmpNo$ = -20516					; size = 4
tv808 = -20512						; size = 4
tv816 = -20508						; size = 4
_TilesCnt$1$ = -20504					; size = 4
_tj$1$ = -20500						; size = 4
_ti$1$ = -20496						; size = 4
_ty$1$ = -20492						; size = 4
_dx$ = -20492						; size = 4
tv834 = -20488						; size = 4
_dy$ = -20488						; size = 4
_tempTiles$ = -20484					; size = 20480
__$ArrayPad$ = -4					; size = 4
?ddrawBattleMap@@YAXXZ PROC				; ddrawBattleMap, COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 50 00 00	 mov	 eax, 20516		; 00005024H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 767  : 	int i, j , count = 0, x, y, tx, ty, partsCnt = 0, TilesCnt = 0, ti, tj;
; 768  : 	float dx, dy;
; 769  : 	U4 bmpNo;
; 770  : 	PARTS tempParts[MAX_CHAR_PRIO_BUF / 2];
; 771  : 	PARTS tempTiles[MAX_CHAR_PRIO_BUF / 2];
; 772  : 
; 773  : 	draw_map_bgm_flg = 0;
; 774  : 	// ??????????????????????
; 775  : 	if (nowGx != oldGx || nowGy != oldGy)

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGx@@3HA ; nowGx
  0001c	53		 push	 ebx
  0001d	33 db		 xor	 ebx, ebx
  0001f	89 9d e8 af ff
	ff		 mov	 DWORD PTR _TilesCnt$1$[ebp], ebx
  00025	89 1d 00 00 00
	00		 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, ebx ; draw_map_bgm_flg
  0002b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?oldGx@@3HA ; oldGx
  00031	75 11		 jne	 SHORT $LN10@ddrawBattl
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  00038	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?oldGy@@3HA ; oldGy
  0003e	0f 84 9d 00 00
	00		 je	 $LN14@ddrawBattl
$LN10@ddrawBattl:

; 776  : 	{
; 777  : 		if (readMap(nowFloor, mapAreaX1, mapAreaY1, mapAreaX2, mapAreaY2, &tile[0], &parts[0], &event[0]))

  00044	68 00 00 00 00	 push	 OFFSET ?event@@3PAGA	; event
  00049	68 00 00 00 00	 push	 OFFSET ?parts@@3PAGA	; parts
  0004e	68 00 00 00 00	 push	 OFFSET ?tile@@3PAGA	; tile
  00053	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00059	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  0005f	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  00065	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowFloor@@3HA ; nowFloor
  00071	e8 00 00 00 00	 call	 ?readMap@@YAHHHHHHPAG00@Z ; readMap
  00076	83 c4 20	 add	 esp, 32			; 00000020H
  00079	85 c0		 test	 eax, eax
  0007b	0f 84 3a 03 00
	00		 je	 $LN11@ddrawBattl

; 778  : 		{
; 779  : 			// hitMap[]????????
; 780  : 			readHitMap(mapAreaX1, mapAreaY1, mapAreaX2, mapAreaY2, &tile[0], &parts[0], &event[0], &hitMap[0]);

  00081	68 00 00 00 00	 push	 OFFSET ?hitMap@@3PAGA	; hitMap
  00086	68 00 00 00 00	 push	 OFFSET ?event@@3PAGA	; event
  0008b	68 00 00 00 00	 push	 OFFSET ?parts@@3PAGA	; parts
  00090	68 00 00 00 00	 push	 OFFSET ?tile@@3PAGA	; tile
  00095	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  0009b	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  000a1	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaY1@@3HA ; mapAreaY1
  000a7	ff 35 00 00 00
	00		 push	 DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  000ad	e8 00 00 00 00	 call	 ?readHitMap@@YAXHHHHPAG000@Z ; readHitMap
  000b2	83 c4 20	 add	 esp, 32			; 00000020H

; 781  : 			if (mapEmptyFlag)

  000b5	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?mapEmptyFlag@@3HA, ebx ; mapEmptyFlag
  000bb	74 1a		 je	 SHORT $LN13@ddrawBattl

; 782  : 			{
; 783  : 				if (!checkEmptyMap(mapEmptyDir))

  000bd	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?mapEmptyDir@@3FA ; mapEmptyDir
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?checkEmptyMap@@YAHH@Z	; checkEmptyMap
  000ca	83 c4 04	 add	 esp, 4
  000cd	85 c0		 test	 eax, eax
  000cf	75 10		 jne	 SHORT $LN14@ddrawBattl

; 784  : 				{
; 785  : 					mapEmptyFlag = FALSE;

  000d1	89 1d 00 00 00
	00		 mov	 DWORD PTR ?mapEmptyFlag@@3HA, ebx ; mapEmptyFlag
$LN13@ddrawBattl:

; 786  : 					autoMappingInitFlag = TRUE;	// ?????????
; 787  : 				}
; 788  : 			}
; 789  : 			else
; 790  : 				autoMappingInitFlag = TRUE;	// ?????????
; 791  : //			readMapAfterFrame = 0;	// ????????????????????????
; 792  : 		}
; 793  : 		else
; 794  : 			return;
; 795  : 	}
; 796  : 	camMapToGamen(0.0, 0.0, &dx, &dy);

  000d7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?autoMappingInitFlag@@3HA, 1 ; autoMappingInitFlag
$LN14@ddrawBattl:
  000e1	8d 85 f8 af ff
	ff		 lea	 eax, DWORD PTR _dy$[ebp]
  000e7	50		 push	 eax
  000e8	8d 85 f4 af ff
	ff		 lea	 eax, DWORD PTR _dx$[ebp]
  000ee	50		 push	 eax
  000ef	83 ec 08	 sub	 esp, 8
  000f2	89 5c 24 04	 mov	 DWORD PTR [esp+4], ebx
  000f6	89 1c 24	 mov	 DWORD PTR [esp], ebx
  000f9	e8 00 00 00 00	 call	 ?camMapToGamen@@YAXMMPAM0@Z ; camMapToGamen

; 797  : 	baseXFastDraw = (int)(dx + .5);

  000fe	f3 0f 10 95 f4
	af ff ff	 movss	 xmm2, DWORD PTR _dx$[ebp]
  00106	83 c4 10	 add	 esp, 16			; 00000010H

; 798  : 	baseYFastDraw = (int)(dy + .5);
; 799  : 	//???????????????
; 800  : 	if (ResoMode == 1)

  00109	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  00110	f2 0f 10 25 00
	00 00 00	 movsd	 xmm4, QWORD PTR __real@3fe0000000000000
  00118	f3 0f 10 9d f8
	af ff ff	 movss	 xmm3, DWORD PTR _dy$[ebp]
  00120	0f 5a c2	 cvtps2pd xmm0, xmm2
  00123	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00127	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0012b	0f 5a c3	 cvtps2pd xmm0, xmm3
  0012e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?baseXFastDraw@@3HA, ecx ; baseXFastDraw
  00134	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00138	f2 0f 2c d0	 cvttsd2si edx, xmm0
  0013c	89 15 00 00 00
	00		 mov	 DWORD PTR ?baseYFastDraw@@3HA, edx ; baseYFastDraw
  00142	75 32		 jne	 SHORT $LN16@ddrawBattl

; 801  : 	{
; 802  : 		nowXFastDraw = (int)(dx / 2 + .5);

  00144	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000

; 803  : 		nowYFastDraw = (int)(dy / 2 + .5);

  0014c	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
  00154	0f 5a c2	 cvtps2pd xmm0, xmm2
  00157	f2 0f 58 c4	 addsd	 xmm0, xmm4
  0015b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0015f	0f 5a c3	 cvtps2pd xmm0, xmm3
  00162	a3 00 00 00 00	 mov	 DWORD PTR ?nowXFastDraw@@3HA, eax ; nowXFastDraw
  00167	f2 0f 58 c4	 addsd	 xmm0, xmm4
  0016b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0016f	a3 00 00 00 00	 mov	 DWORD PTR ?nowYFastDraw@@3HA, eax ; nowYFastDraw

; 804  : 	}

  00174	eb 0c		 jmp	 SHORT $LN17@ddrawBattl
$LN16@ddrawBattl:

; 805  : 	else
; 806  : 	{
; 807  : 		nowXFastDraw = baseXFastDraw;

  00176	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowXFastDraw@@3HA, ecx ; nowXFastDraw

; 808  : 		nowYFastDraw = baseYFastDraw;

  0017c	89 15 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw@@3HA, edx ; nowYFastDraw
$LN17@ddrawBattl:

; 809  : 	}
; 810  : 	nowXFastDraw2 = baseXFastDraw;
; 811  : 	nowYFastDraw2 = baseYFastDraw;
; 812  : 	amountXFastDraw = 0;
; 813  : 	amountYFastDraw = 0;
; 814  : 	// 1 5 12 16 ... 
; 815  : 	tx = nowXFastDraw2 + (mapAreaX1 + mapAreaY2 - 1) * SURFACE_WIDTH / 2;

  00182	56		 push	 esi
  00183	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00189	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowXFastDraw2@@3HA, ecx ; nowXFastDraw2
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mapAreaX1@@3HA ; mapAreaX1
  00195	89 15 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw2@@3HA, edx ; nowYFastDraw2
  0019b	57		 push	 edi
  0019c	89 1d 00 00 00
	00		 mov	 DWORD PTR ?amountXFastDraw@@3HA, ebx ; amountXFastDraw
  001a2	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  001a5	89 1d 00 00 00
	00		 mov	 DWORD PTR ?amountYFastDraw@@3HA, ebx ; amountYFastDraw
  001ab	c1 e0 06	 shl	 eax, 6

; 816  : 	ty = nowYFastDraw2 + (-mapAreaX1 + mapAreaY2 - 1) * SURFACE_HEIGHT / 2;

  001ae	2b f1		 sub	 esi, ecx
  001b0	83 e8 40	 sub	 eax, 64			; 00000040H
  001b3	4e		 dec	 esi
  001b4	99		 cdq
  001b5	2b c2		 sub	 eax, edx
  001b7	8b f8		 mov	 edi, eax
  001b9	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  001bc	d1 ff		 sar	 edi, 1

; 817  : 	ti = mapAreaHeight - 1;

  001be	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?mapAreaHeight@@3HA ; mapAreaHeight
  001c4	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?baseXFastDraw@@3HA ; baseXFastDraw
  001ca	4e		 dec	 esi
  001cb	c1 e0 04	 shl	 eax, 4
  001ce	99		 cdq
  001cf	2b c2		 sub	 eax, edx
  001d1	89 b5 f0 af ff
	ff		 mov	 DWORD PTR _ti$1$[ebp], esi
  001d7	8b d0		 mov	 edx, eax

; 818  : 	tj = 0;

  001d9	33 c0		 xor	 eax, eax
  001db	d1 fa		 sar	 edx, 1
  001dd	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?baseYFastDraw@@3HA ; baseYFastDraw
  001e3	89 95 f4 af ff
	ff		 mov	 DWORD PTR _ty$1$[ebp], edx
  001e9	89 85 ec af ff
	ff		 mov	 DWORD PTR _tj$1$[ebp], eax

; 819  : 	while (ti >= 0)

  001ef	85 f6		 test	 esi, esi
  001f1	0f 88 48 01 00
	00		 js	 $LN3@ddrawBattl
  001f7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@ddrawBattl:

; 820  : 	{
; 821  : 		i = ti;

  00200	89 85 e0 af ff
	ff		 mov	 DWORD PTR tv808[ebp], eax
  00206	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  00209	8d 9d 00 b0 ff
	ff		 lea	 ebx, DWORD PTR _tempTiles$[ebp+4]
  0020f	89 bd e4 af ff
	ff		 mov	 DWORD PTR tv816[ebp], edi
  00215	8d 1c 83	 lea	 ebx, DWORD PTR [ebx+eax*4]
  00218	8b 85 ec af ff
	ff		 mov	 eax, DWORD PTR _tj$1$[ebp]
  0021e	2b 85 f0 af ff
	ff		 sub	 eax, DWORD PTR _ti$1$[ebp]
  00224	89 85 f8 af ff
	ff		 mov	 DWORD PTR tv834[ebp], eax
  0022a	66 0f 1f 44 00
	00		 npad	 6
$LL4@ddrawBattl:

; 822  : 		j = tj;
; 823  : 		x = tx;
; 824  : 		y = ty;
; 825  : 		while (i >= 0 && j >= 0)

  00230	03 c6		 add	 eax, esi
  00232	0f 88 a4 00 00
	00		 js	 $LN5@ddrawBattl

; 826  : 		{
; 827  : 		// ???
; 828  : 			if (tile[i * mapAreaWidth+j] > CG_INVISIBLE || parts[i * mapAreaWidth+j] > CG_INVISIBLE)

  00238	8b ce		 mov	 ecx, esi
  0023a	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  00241	03 c8		 add	 ecx, eax
  00243	03 c9		 add	 ecx, ecx
  00245	66 83 b9 00 00
	00 00 63	 cmp	 WORD PTR ?tile@@3PAGA[ecx], 99 ; 00000063H
  0024d	77 0a		 ja	 SHORT $LN38@ddrawBattl
  0024f	66 83 b9 00 00
	00 00 63	 cmp	 WORD PTR ?parts@@3PAGA[ecx], 99 ; 00000063H
  00257	76 71		 jbe	 SHORT $LN20@ddrawBattl
$LN38@ddrawBattl:

; 829  : 			{
; 830  : 				// ???????
; 831  : 				if (x >= (-SURFACE_WIDTH >> 1) && x < DEF_APPSIZEX + (SURFACE_WIDTH >> 1) &&
; 832  : 					y >= (-SURFACE_HEIGHT >> 1) && y < DEF_APPSIZEY + (SURFACE_HEIGHT >> 1))

  00259	83 ff e0	 cmp	 edi, -32		; ffffffe0H
  0025c	7c 6c		 jl	 SHORT $LN20@ddrawBattl
  0025e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  00263	83 c0 20	 add	 eax, 32			; 00000020H
  00266	3b f8		 cmp	 edi, eax
  00268	7d 60		 jge	 SHORT $LN20@ddrawBattl
  0026a	83 fa e8	 cmp	 edx, -24		; ffffffe8H
  0026d	7c 5b		 jl	 SHORT $LN20@ddrawBattl
  0026f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00274	83 c0 18	 add	 eax, 24			; 00000018H
  00277	3b d0		 cmp	 edx, eax
  00279	7d 4f		 jge	 SHORT $LN20@ddrawBattl

; 833  : 				{
; 834  : //ROG ADD 地上物显示
; 835  : 					if (parts[i * mapAreaWidth+j] > CG_INVISIBLE)

  0027b	0f b7 81 00 00
	00 00		 movzx	 eax, WORD PTR ?parts@@3PAGA[ecx]
  00282	83 f8 63	 cmp	 eax, 99			; 00000063H
  00285	76 2b		 jbe	 SHORT $LN21@ddrawBattl

; 836  : 					{
; 837  : 						realGetNo(parts[i * mapAreaWidth + j], &bmpNo);

  00287	8d 8d dc af ff
	ff		 lea	 ecx, DWORD PTR _bmpNo$[ebp]
  0028d	51		 push	 ecx
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 838  : 						tempParts[partsCnt].bmpNO = parts[i * mapAreaWidth + j];

  00294	8b 85 f8 af ff
	ff		 mov	 eax, DWORD PTR tv834[ebp]
  0029a	8b ce		 mov	 ecx, esi
  0029c	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  002a3	03 c6		 add	 eax, esi
  002a5	8b 95 f4 af ff
	ff		 mov	 edx, DWORD PTR _ty$1$[ebp]
  002ab	83 c4 08	 add	 esp, 8
  002ae	03 c8		 add	 ecx, eax
  002b0	03 c9		 add	 ecx, ecx
$LN21@ddrawBattl:

; 839  : 						tempParts[partsCnt].x     = x;
; 840  : 						tempParts[partsCnt].y     = y;
; 841  : 						tempParts[partsCnt].mx    = (float)(mapAreaX1 + j) * GRID_SIZE;
; 842  : 						tempParts[partsCnt].my    = (float)(mapAreaY1 + i) * GRID_SIZE;
; 843  : 						partsCnt++;
; 844  : 					}
; 845  : 					tempTiles[TilesCnt].x = x;
; 846  : 					tempTiles[TilesCnt].y = y;
; 847  : 					tempTiles[TilesCnt].bmpNO = tile[i * mapAreaWidth + j];

  002b2	0f b7 81 00 00
	00 00		 movzx	 eax, WORD PTR ?tile@@3PAGA[ecx]

; 848  : 					TilesCnt++;

  002b9	ff 85 e8 af ff
	ff		 inc	 DWORD PTR _TilesCnt$1$[ebp]
  002bf	89 7b fc	 mov	 DWORD PTR [ebx-4], edi
  002c2	89 13		 mov	 DWORD PTR [ebx], edx
  002c4	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  002c7	83 c3 14	 add	 ebx, 20			; 00000014H
$LN20@ddrawBattl:

; 849  : 					//StockDispBuffer(x, y, DISP_PRIO_TILE, tile[i*mapAreaWidth+j], 0);
; 850  : 		//			count++;
; 851  : 				}
; 852  : 			}
; 853  : //ROG ADD end			}
; 854  : 			i--;
; 855  : 			j--;
; 856  : 			x -= SURFACE_WIDTH;

  002ca	8b 85 f8 af ff
	ff		 mov	 eax, DWORD PTR tv834[ebp]
  002d0	83 ef 40	 sub	 edi, 64			; 00000040H
  002d3	83 ee 01	 sub	 esi, 1
  002d6	0f 89 54 ff ff
	ff		 jns	 $LL4@ddrawBattl
$LN5@ddrawBattl:

; 819  : 	while (ti >= 0)

  002dc	8b b5 f0 af ff
	ff		 mov	 esi, DWORD PTR _ti$1$[ebp]
  002e2	bf 20 00 00 00	 mov	 edi, 32			; 00000020H

; 857  : 		}
; 858  : 		if (tj < mapAreaWidth - 1)

  002e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mapAreaWidth@@3HA ; mapAreaWidth
  002ed	8b 9d e0 af ff
	ff		 mov	 ebx, DWORD PTR tv808[ebp]
  002f3	49		 dec	 ecx
  002f4	39 8d ec af ff
	ff		 cmp	 DWORD PTR _tj$1$[ebp], ecx
  002fa	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  002fd	0f 4d f0	 cmovge	 esi, eax
  00300	83 ea 18	 sub	 edx, 24			; 00000018H
  00303	39 8d ec af ff
	ff		 cmp	 DWORD PTR _tj$1$[ebp], ecx
  00309	b8 e0 ff ff ff	 mov	 eax, -32		; ffffffe0H
  0030e	89 b5 f0 af ff
	ff		 mov	 DWORD PTR _ti$1$[ebp], esi
  00314	0f 4d f8	 cmovge	 edi, eax
  00317	89 95 f4 af ff
	ff		 mov	 DWORD PTR _ty$1$[ebp], edx
  0031d	03 bd e4 af ff
	ff		 add	 edi, DWORD PTR tv816[ebp]
  00323	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00326	3b d9		 cmp	 ebx, ecx
  00328	0f 4d c3	 cmovge	 eax, ebx
  0032b	8b 9d e8 af ff
	ff		 mov	 ebx, DWORD PTR _TilesCnt$1$[ebp]
  00331	89 85 ec af ff
	ff		 mov	 DWORD PTR _tj$1$[ebp], eax
  00337	85 f6		 test	 esi, esi
  00339	0f 89 c1 fe ff
	ff		 jns	 $LL2@ddrawBattl
$LN3@ddrawBattl:

; 859  : 		{
; 860  : 			tj++;
; 861  : 			tx += SURFACE_WIDTH >> 1;
; 862  : 			ty -= SURFACE_HEIGHT >> 1;
; 863  : 		}
; 864  : 		else
; 865  : 		{
; 866  : 			ti--;
; 867  : 			tx -= SURFACE_WIDTH >> 1;
; 868  : 			ty -= SURFACE_HEIGHT >> 1;
; 869  : 		}
; 870  : 	}
; 871  : //ROG ADD 地上物显示
; 872  : 	//if (partsCnt > 0)
; 873  : 	//{
; 874  : 	//	qsort(tempParts, partsCnt, sizeof(PARTS), (CMPFUNC*)sort_parts);
; 875  : 	//	for (i = 0; i < partsCnt; i++)
; 876  : 	//		StockDispBuffer(tempParts[i].x , tempParts[i].y, DISP_PRIO_TILE, tempParts[i].bmpNO, 0);
; 877  : 	//}
; 878  : 	SortDispBuffer();

  0033f	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 879  : 	for (i = 0; i < TilesCnt; i++)

  00344	85 db		 test	 ebx, ebx
  00346	7e 24		 jle	 SHORT $LN7@ddrawBattl

; 859  : 		{
; 860  : 			tj++;
; 861  : 			tx += SURFACE_WIDTH >> 1;
; 862  : 			ty -= SURFACE_HEIGHT >> 1;
; 863  : 		}
; 864  : 		else
; 865  : 		{
; 866  : 			ti--;
; 867  : 			tx -= SURFACE_WIDTH >> 1;
; 868  : 			ty -= SURFACE_HEIGHT >> 1;
; 869  : 		}
; 870  : 	}
; 871  : //ROG ADD 地上物显示
; 872  : 	//if (partsCnt > 0)
; 873  : 	//{
; 874  : 	//	qsort(tempParts, partsCnt, sizeof(PARTS), (CMPFUNC*)sort_parts);
; 875  : 	//	for (i = 0; i < partsCnt; i++)
; 876  : 	//		StockDispBuffer(tempParts[i].x , tempParts[i].y, DISP_PRIO_TILE, tempParts[i].bmpNO, 0);
; 877  : 	//}
; 878  : 	SortDispBuffer();

  00348	8d b5 00 b0 ff
	ff		 lea	 esi, DWORD PTR _tempTiles$[ebp+4]
  0034e	66 90		 npad	 2
$LL8@ddrawBattl:

; 880  : 		StockDispBuffer(tempTiles[i].x, tempTiles[i].y, DISP_PRIO_TILE, tempTiles[i].bmpNO, 0);

  00350	6a 00		 push	 0
  00352	ff 76 0c	 push	 DWORD PTR [esi+12]
  00355	6a 01		 push	 1
  00357	ff 36		 push	 DWORD PTR [esi]
  00359	ff 76 fc	 push	 DWORD PTR [esi-4]
  0035c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00361	83 c4 14	 add	 esp, 20			; 00000014H
  00364	8d 76 14	 lea	 esi, DWORD PTR [esi+20]
  00367	83 eb 01	 sub	 ebx, 1
  0036a	75 e4		 jne	 SHORT $LL8@ddrawBattl
$LN7@ddrawBattl:

; 881  : 	SortDispBuffer();

  0036c	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 882  : //ROG ADD end
; 883  : //	stockCharParts();
; 884  : 	oldGx = nowGx;

  00371	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGx@@3HA ; nowGx

; 885  : 	oldGy = nowGy;
; 886  : 	if (fMapBgm >= 40 && fMapBgm <= 53 && map_bgm_no == 2)

  00376	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fMapBgm@@3HA ; fMapBgm
  0037c	a3 00 00 00 00	 mov	 DWORD PTR ?oldGx@@3HA, eax ; oldGx
  00381	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  00386	a3 00 00 00 00	 mov	 DWORD PTR ?oldGy@@3HA, eax ; oldGy
  0038b	8d 41 d8	 lea	 eax, DWORD PTR [ecx-40]
  0038e	5f		 pop	 edi
  0038f	5e		 pop	 esi
  00390	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00393	77 26		 ja	 SHORT $LN11@ddrawBattl
  00395	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?map_bgm_no@@3HA, 2 ; map_bgm_no
  0039c	75 1d		 jne	 SHORT $LN11@ddrawBattl

; 887  : 	{
; 888  : 		play_map_bgm(fMapBgm);

  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 ?play_map_bgm@@YAHH@Z	; play_map_bgm
  003a4	83 c4 04	 add	 esp, 4

; 889  : 		draw_map_bgm_flg = 1;

  003a7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 1 ; draw_map_bgm_flg

; 890  : 		fMapBgm = 0;

  003b1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fMapBgm@@3HA, 0 ; fMapBgm
$LN11@ddrawBattl:

; 891  : 	}
; 892  : }

  003bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003be	33 cd		 xor	 ecx, ebp
  003c0	5b		 pop	 ebx
  003c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c6	8b e5		 mov	 esp, ebp
  003c8	5d		 pop	 ebp
  003c9	c3		 ret	 0
?ddrawBattleMap@@YAXXZ ENDP				; ddrawBattleMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?mapCheckSum@@YAHHHHHHHHH@Z
_TEXT	SEGMENT
_width$1$ = -8228					; size = 4
_parts$ = -8224						; size = 2738
_tile$ = -5484						; size = 2738
_event$ = -2744						; size = 2738
__$ArrayPad$ = -4					; size = 4
_floor$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_tileSum$ = 28						; size = 4
_partsSum$ = 32						; size = 4
_eventSum$ = 36						; size = 4
?mapCheckSum@@YAHHHHHHHHH@Z PROC			; mapCheckSum, COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 20 00 00	 mov	 eax, 8228		; 00002024H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1456 : 	
; 1457 : 	int tilesum = 0, objsum = 0, eventsum = 0, databufferindex = 0, width = x2 - x1, height = y2 - y1, i, j;

  00017	8b 4d 18	 mov	 ecx, DWORD PTR _y2$[ebp]
  0001a	8b 55 10	 mov	 edx, DWORD PTR _y1$[ebp]
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	8b 7d 14	 mov	 edi, DWORD PTR _x2$[ebp]

; 1458 : 	unsigned short tile[MAP_X_SIZE*MAP_Y_SIZE];
; 1459 : 	unsigned short parts[MAP_X_SIZE*MAP_Y_SIZE];
; 1460 : 	unsigned short event[MAP_X_SIZE*MAP_Y_SIZE];
; 1461 : 
; 1462 : 	// ?????????????
; 1463 : 
; 1464 : 	readMap(floor, x1, y1, x2, y2, tile, parts, event);

  00026	8d 9d 48 f5 ff
	ff		 lea	 ebx, DWORD PTR _event$[ebp]
  0002c	53		 push	 ebx
  0002d	8d 9d e0 df ff
	ff		 lea	 ebx, DWORD PTR _parts$[ebp]
  00033	2b f8		 sub	 edi, eax
  00035	53		 push	 ebx
  00036	8d 9d 94 ea ff
	ff		 lea	 ebx, DWORD PTR _tile$[ebp]
  0003c	89 bd dc df ff
	ff		 mov	 DWORD PTR _width$1$[ebp], edi
  00042	53		 push	 ebx
  00043	8b 5d 14	 mov	 ebx, DWORD PTR _x2$[ebp]
  00046	8b f1		 mov	 esi, ecx
  00048	51		 push	 ecx
  00049	53		 push	 ebx
  0004a	52		 push	 edx
  0004b	50		 push	 eax
  0004c	ff 75 08	 push	 DWORD PTR _floor$[ebp]
  0004f	2b f2		 sub	 esi, edx
  00051	e8 00 00 00 00	 call	 ?readMap@@YAHHHHHHPAG00@Z ; readMap
  00056	83 c4 20	 add	 esp, 32			; 00000020H

; 1465 : 	for (i = 0; i < height; i++)

  00059	85 f6		 test	 esi, esi
  0005b	7e 34		 jle	 SHORT $LN3@mapCheckSu

; 1456 : 	
; 1457 : 	int tilesum = 0, objsum = 0, eventsum = 0, databufferindex = 0, width = x2 - x1, height = y2 - y1, i, j;

  0005d	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
  00060	8d 95 48 f5 ff
	ff		 lea	 edx, DWORD PTR _event$[ebp]
$LL4@mapCheckSu:

; 1466 : 	{
; 1467 :         for (j = 0; j < width; j++)

  00066	85 ff		 test	 edi, edi
  00068	7e 1d		 jle	 SHORT $LN2@mapCheckSu

; 1468 : 			event[i * width + j] &= 0x0fff;

  0006a	8b cf		 mov	 ecx, edi
  0006c	8b c2		 mov	 eax, edx
  0006e	bf ff 0f 00 00	 mov	 edi, 4095		; 00000fffH
$LL19@mapCheckSu:
  00073	66 21 38	 and	 WORD PTR [eax], di
  00076	8d 40 02	 lea	 eax, DWORD PTR [eax+2]
  00079	83 e9 01	 sub	 ecx, 1
  0007c	75 f5		 jne	 SHORT $LL19@mapCheckSu
  0007e	8b bd dc df ff
	ff		 mov	 edi, DWORD PTR _width$1$[ebp]
  00084	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]
$LN2@mapCheckSu:

; 1465 : 	for (i = 0; i < height; i++)

  00087	03 d3		 add	 edx, ebx
  00089	83 ee 01	 sub	 esi, 1
  0008c	75 d8		 jne	 SHORT $LL4@mapCheckSu
  0008e	8b 5d 14	 mov	 ebx, DWORD PTR _x2$[ebp]
$LN3@mapCheckSu:

; 1469 :     }
; 1470 : 
; 1471 : 	tilesum  = CheckCRC((unsigned char*)tile,  27 * 27 * sizeof(short));

  00091	8d 85 94 ea ff
	ff		 lea	 eax, DWORD PTR _tile$[ebp]
  00097	68 b2 05 00 00	 push	 1458			; 000005b2H
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?CheckCRC@@YAGPAEH@Z	; CheckCRC
  000a2	0f b7 c0	 movzx	 eax, ax
  000a5	83 c4 08	 add	 esp, 8

; 1474 : 
; 1475 : 	if (tileSum == tilesum && partsSum == objsum && eventSum == eventsum)

  000a8	39 45 1c	 cmp	 DWORD PTR _tileSum$[ebp], eax
  000ab	75 66		 jne	 SHORT $LN8@mapCheckSu

; 1472 : 	objsum   = CheckCRC((unsigned char*)parts, 27 * 27 * sizeof(short));

  000ad	8d 85 e0 df ff
	ff		 lea	 eax, DWORD PTR _parts$[ebp]
  000b3	68 b2 05 00 00	 push	 1458			; 000005b2H
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?CheckCRC@@YAGPAEH@Z	; CheckCRC
  000be	0f b7 c0	 movzx	 eax, ax
  000c1	83 c4 08	 add	 esp, 8

; 1474 : 
; 1475 : 	if (tileSum == tilesum && partsSum == objsum && eventSum == eventsum)

  000c4	39 45 20	 cmp	 DWORD PTR _partsSum$[ebp], eax
  000c7	75 4a		 jne	 SHORT $LN8@mapCheckSu

; 1473 : 	eventsum = CheckCRC((unsigned char*)event, 27 * 27 * sizeof(short));

  000c9	8d 85 48 f5 ff
	ff		 lea	 eax, DWORD PTR _event$[ebp]
  000cf	68 b2 05 00 00	 push	 1458			; 000005b2H
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?CheckCRC@@YAGPAEH@Z	; CheckCRC
  000da	0f b7 c0	 movzx	 eax, ax
  000dd	83 c4 08	 add	 esp, 8

; 1474 : 
; 1475 : 	if (tileSum == tilesum && partsSum == objsum && eventSum == eventsum)

  000e0	39 45 24	 cmp	 DWORD PTR _eventSum$[ebp], eax
  000e3	75 2e		 jne	 SHORT $LN8@mapCheckSu

; 1476 : 	{
; 1477 : 		if (loginFlag)

  000e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?loginFlag@@3HA, 0 ; loginFlag
  000ec	74 0f		 je	 SHORT $LN10@mapCheckSu

; 1478 : 		{
; 1479 : 			redrawMap();

  000ee	e8 00 00 00 00	 call	 ?redrawMap@@YAXXZ	; redrawMap

; 1480 : 			loginFlag = FALSE;

  000f3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?loginFlag@@3HA, 0 ; loginFlag
$LN10@mapCheckSu:

; 1490 : 		//修正地图异常
; 1491 : 		if (loginFlag)
; 1492 : 			loginFlag = FALSE;
; 1493 : 
; 1494 : 		return FALSE;
; 1495 : 	}
; 1496 : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	b8 01 00 00 00	 mov	 eax, 1
  00104	5b		 pop	 ebx
  00105	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00108	33 cd		 xor	 ecx, ebp
  0010a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
$LN8@mapCheckSu:

; 1481 : 		}
; 1482 : 		return TRUE;
; 1483 : 	}
; 1484 : 	else
; 1485 : 	{
; 1486 : 		if (bNewServer)

  00113	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0011a	8b 45 18	 mov	 eax, DWORD PTR _y2$[ebp]
  0011d	50		 push	 eax
  0011e	8b 45 10	 mov	 eax, DWORD PTR _y1$[ebp]
  00121	53		 push	 ebx
  00122	50		 push	 eax
  00123	8b 45 0c	 mov	 eax, DWORD PTR _x1$[ebp]
  00126	50		 push	 eax
  00127	8b 45 08	 mov	 eax, DWORD PTR _floor$[ebp]
  0012a	50		 push	 eax
  0012b	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00131	74 07		 je	 SHORT $LN11@mapCheckSu

; 1487 : 			lssproto_M_send(sockfd, floor, x1, y1, x2, y2);

  00133	e8 00 00 00 00	 call	 ?lssproto_M_send@@YAXHHHHHH@Z ; lssproto_M_send
  00138	eb 05		 jmp	 SHORT $LN25@mapCheckSu
$LN11@mapCheckSu:

; 1488 : 		else
; 1489 : 			old_lssproto_M_send(sockfd, floor, x1, y1, x2, y2);

  0013a	e8 00 00 00 00	 call	 ?old_lssproto_M_send@@YAXHHHHHH@Z ; old_lssproto_M_send
$LN25@mapCheckSu:

; 1490 : 		//修正地图异常
; 1491 : 		if (loginFlag)
; 1492 : 			loginFlag = FALSE;
; 1493 : 
; 1494 : 		return FALSE;
; 1495 : 	}
; 1496 : }

  0013f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00142	83 c4 18	 add	 esp, 24			; 00000018H
  00145	33 cd		 xor	 ecx, ebp
  00147	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?loginFlag@@3HA, 0 ; loginFlag
  00151	33 c0		 xor	 eax, eax
  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
?mapCheckSum@@YAHHHHHHHHH@Z ENDP			; mapCheckSum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setWarpMap@@YAXHH@Z
_TEXT	SEGMENT
_gx$ = 8						; size = 4
_gy$ = 12						; size = 4
?setWarpMap@@YAXHH@Z PROC				; setWarpMap, COMDAT

; 699  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 700  : 	nowGx = gx;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _gx$[ebp]

; 701  : 	nowGy = gy;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _gy$[ebp]
  00009	a3 00 00 00 00	 mov	 DWORD PTR ?nowGy@@3HA, eax ; nowGy

; 702  : 	nowX = (float)nowGx * GRID_SIZE;
; 703  : 	nowY = (float)nowGy * GRID_SIZE;
; 704  : 	nextGx = nowGx;
; 705  : 	nextGy = nowGy;

  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?nextGy@@3HA, eax ; nextGy
  00013	66 0f 6e d1	 movd	 xmm2, ecx
  00017	66 0f 6e c8	 movd	 xmm1, eax

; 706  : 	nowVx = 0;
; 707  : 	nowVy = 0;
; 708  : 	nowSpdRate = 1;
; 709  : 	oldGx = -1;
; 710  : 	oldGy = -1;
; 711  : 	oldNextGx = -1;
; 712  : 	oldNextGy = -1;
; 713  : 	viewPointX = nowX;
; 714  : 	viewPointY = nowY;
; 715  : 	wnCloseFlag = 1;	// 关闭通用窗口

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00023	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowGx@@3HA, ecx ; nowGx
  00029	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nextGx@@3HA, ecx ; nextGx
  0002f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVx@@3MA, 0
  00039	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVy@@3MA, 0
  00043	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00046	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?nowSpdRate@@3MA, 1065353216 ; 3f800000H
  00050	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldGx@@3HA, -1 ; oldGx
  0005a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldGy@@3HA, -1 ; oldGy
  00064	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldNextGx@@3HA, -1 ; oldNextGx
  0006e	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@42800000
  00076	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldNextGy@@3HA, -1 ; oldNextGy
  00080	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42800000
  00088	66 a3 00 00 00
	00		 mov	 WORD PTR ?wnCloseFlag@@3FA, ax ; wnCloseFlag
  0008e	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?nowX@@3MA, xmm2
  00096	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?viewPointX@@3MA, xmm2
  0009e	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?nowY@@3MA, xmm1
  000a6	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?viewPointY@@3MA, xmm1

; 716  : #ifdef _AniCrossFrame	   // Syu ADD 动画层游过画面生物
; 717  : 	extern void crossAniRelease();
; 718  : 	crossAniRelease();

  000ae	e8 00 00 00 00	 call	 ?crossAniRelease@@YAXXZ	; crossAniRelease

; 723  : #endif
; 724  : }

  000b3	5d		 pop	 ebp

; 719  : #endif
; 720  : #ifdef _SURFACE_ANIM       //ROG ADD 动态场景
; 721  : 	extern void ReleaseSpecAnim ();
; 722  : 	ReleaseSpecAnim();

  000b4	e9 00 00 00 00	 jmp	 ?ReleaseSpecAnim@@YAXXZ	; ReleaseSpecAnim
?setWarpMap@@YAXHH@Z ENDP				; setWarpMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?setMap@@YAXHHH@Z
_TEXT	SEGMENT
_floor$ = 8						; size = 4
_gx$ = 12						; size = 4
_gy$ = 16						; size = 4
?setMap@@YAXHHH@Z PROC					; setMap, COMDAT

; 691  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 	nowFloor = floor;
; 693  : 	setWarpMap(gx, gy);

  00003	ff 75 10	 push	 DWORD PTR _gy$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _floor$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _gx$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?nowFloor@@3HA, eax ; nowFloor
  00011	e8 00 00 00 00	 call	 ?setWarpMap@@YAXHH@Z	; setWarpMap
  00016	83 c4 08	 add	 esp, 8

; 694  : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?setMap@@YAXHHH@Z ENDP					; setMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?writeMap@@YAHHHHHHPAG00@Z
_TEXT	SEGMENT
_event$GSCopy$1$ = -316					; size = 4
_fOffset$2$ = -316					; size = 4
tv802 = -312						; size = 4
tv784 = -308						; size = 4
_fHeight$ = -304					; size = 4
_fWidth$ = -300						; size = 4
_mWidth$1$ = -296					; size = 4
_len2$1$ = -292						; size = 4
tv788 = -292						; size = 4
_fp$2$ = -288						; size = 4
_parts$GSCopy$1$ = -284					; size = 4
tv807 = -284						; size = 4
tv794 = -284						; size = 4
tv805 = -280						; size = 4
tv793 = -280						; size = 4
_width$1$ = -276					; size = 4
_tile$GSCopy$1$ = -272					; size = 4
_fOffset$1$ = -272					; size = 4
tv808 = -272						; size = 4
_len$3$ = -268						; size = 4
_height$1$ = -264					; size = 4
_filename$ = -260					; size = 255
__$ArrayPad$ = -4					; size = 4
_floor$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_tile$ = 28						; size = 4
_parts$ = 32						; size = 4
_event$ = 36						; size = 4
?writeMap@@YAHHHHHHPAG00@Z PROC				; writeMap, COMDAT

; 484  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 1c	 mov	 eax, DWORD PTR _tile$[ebp]
  00016	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _tile$GSCopy$1$[ebp], eax
  0001c	8b 45 20	 mov	 eax, DWORD PTR _parts$[ebp]
  0001f	56		 push	 esi

; 485  : 	FILE *fp;
; 486  : 	char filename[255];
; 487  : 	int fWidth, fHeight, fOffset, mWidth, width, height, fx, fy, mx, my, len, len2, i, j;
; 488  : 	
; 489  : 
; 490  : 	// 読み込みファイル名作成
; 491  : 	sprintf(filename, "map\\%d.dat", floor);

  00020	ff 75 08	 push	 DWORD PTR _floor$[ebp]
  00023	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _parts$GSCopy$1$[ebp], eax
  00029	8b 45 24	 mov	 eax, DWORD PTR _event$[ebp]
  0002c	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _event$GSCopy$1$[ebp], eax
  00032	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FCEGIJN@map?2?$CFd?4dat@
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _sprintf

; 492  : 
; 493  : 	// ????????
; 494  : 	if ((fp = fopen(filename, "rb+")) == NULL)

  00043	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_03CCKOKKND@rb?$CL@
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _fopen
  00054	8b f0		 mov	 esi, eax
  00056	83 c4 14	 add	 esp, 20			; 00000014H
  00059	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _fp$2$[ebp], esi
  0005f	85 f6		 test	 esi, esi
  00061	75 50		 jne	 SHORT $LN15@writeMap

; 495  : 	{
; 496  : 		// 失敗するのは最初でマップフォルダが無いから
; 497  : 		// だからフォルダを作る
; 498  : 		_mkdir("map");

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map@
  00068	e8 00 00 00 00	 call	 __mkdir

; 499  : 		// 読み込みデータも作る
; 500  : 		fp = fopen(filename, "wb");

  0006d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _fopen

; 501  : 		fclose(fp);

  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _fclose

; 502  : 		// 読み込みモードでもう一度オープン
; 503  : 		if ((fp = fopen(filename, "rb+")) == NULL)

  00084	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_03CCKOKKND@rb?$CL@
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _fopen
  00095	8b f0		 mov	 esi, eax
  00097	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _fp$2$[ebp], eax
  0009d	83 c4 18	 add	 esp, 24			; 00000018H
  000a0	85 f6		 test	 esi, esi
  000a2	75 0f		 jne	 SHORT $LN15@writeMap
  000a4	5e		 pop	 esi

; 572  : 
; 573  : 	return TRUE;
; 574  : }

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	33 cd		 xor	 ecx, ebp
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
$LN15@writeMap:
  000b3	53		 push	 ebx
  000b4	57		 push	 edi

; 504  : 			return FALSE;
; 505  : 	}
; 506  : 
; 507  : 	fseek(fp, 0, SEEK_SET);

  000b5	6a 00		 push	 0
  000b7	6a 00		 push	 0
  000b9	56		 push	 esi
  000ba	e8 00 00 00 00	 call	 _fseek

; 508  : 	fread(&fWidth,  sizeof(int), 1, fp);

  000bf	56		 push	 esi
  000c0	6a 01		 push	 1
  000c2	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _fWidth$[ebp]
  000c8	6a 04		 push	 4
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _fread

; 509  : 	fread(&fHeight, sizeof(int), 1, fp);

  000d0	56		 push	 esi
  000d1	6a 01		 push	 1
  000d3	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _fHeight$[ebp]
  000d9	6a 04		 push	 4
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _fread
  000e1	8b 45 14	 mov	 eax, DWORD PTR _x2$[ebp]

; 510  : 	mWidth = x2 - x1;
; 511  : 	width = mWidth;
; 512  : 	height = y2 - y1;
; 513  : 	mx = 0;
; 514  : 	fx = x1;
; 515  : 	if (x1 < 0)
; 516  : 	{
; 517  : 		width += x1;
; 518  : 		fx = 0;
; 519  : 		mx -= x1;
; 520  : 	}
; 521  : 	if (x2 > fWidth)

  000e4	33 f6		 xor	 esi, esi
  000e6	8b 4d 18	 mov	 ecx, DWORD PTR _y2$[ebp]
  000e9	8b d0		 mov	 edx, eax
  000eb	2b 55 0c	 sub	 edx, DWORD PTR _x1$[ebp]
  000ee	8b f9		 mov	 edi, ecx
  000f0	8b 5d 10	 mov	 ebx, DWORD PTR _y1$[ebp]
  000f3	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f6	2b fb		 sub	 edi, ebx
  000f8	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _mWidth$1$[ebp], edx
  000fe	39 75 0c	 cmp	 DWORD PTR _x1$[ebp], esi
  00101	0f 4d 75 0c	 cmovge	 esi, DWORD PTR _x1$[ebp]
  00105	89 b5 cc fe ff
	ff		 mov	 DWORD PTR tv784[ebp], esi
  0010b	8b f0		 mov	 esi, eax
  0010d	0f 4d f2	 cmovge	 esi, edx
  00110	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _fWidth$[ebp]
  00116	89 b5 ec fe ff
	ff		 mov	 DWORD PTR _width$1$[ebp], esi
  0011c	3b c2		 cmp	 eax, edx
  0011e	7e 0c		 jle	 SHORT $LN17@writeMap

; 522  : 		width -= (x2 - fWidth);

  00120	29 85 ec fe ff
	ff		 sub	 DWORD PTR _width$1$[ebp], eax
  00126	01 95 ec fe ff
	ff		 add	 DWORD PTR _width$1$[ebp], edx
$LN17@writeMap:

; 523  : 	my = 0;
; 524  : 	fy = y1;
; 525  : 	if (y1 < 0)
; 526  : 	{
; 527  : 		height += y1;
; 528  : 		fy = 0;
; 529  : 		my -= y1;
; 530  : 	}
; 531  : 	if (y2 > fHeight)

  0012c	33 c0		 xor	 eax, eax
  0012e	85 db		 test	 ebx, ebx
  00130	0f 49 c3	 cmovns	 eax, ebx
  00133	33 f6		 xor	 esi, esi
  00135	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _len$3$[ebp], eax
  0013b	8b c3		 mov	 eax, ebx
  0013d	f7 d8		 neg	 eax
  0013f	85 db		 test	 ebx, ebx
  00141	0f 49 c6	 cmovns	 eax, esi
  00144	8b f1		 mov	 esi, ecx
  00146	0f 49 f7	 cmovns	 esi, edi
  00149	8b bd d0 fe ff
	ff		 mov	 edi, DWORD PTR _fHeight$[ebp]
  0014f	89 b5 f8 fe ff
	ff		 mov	 DWORD PTR _height$1$[ebp], esi
  00155	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _fp$2$[ebp]
  0015b	3b cf		 cmp	 ecx, edi
  0015d	7e 0c		 jle	 SHORT $LN19@writeMap

; 532  : 		height -= (y2 - fHeight);

  0015f	29 8d f8 fe ff
	ff		 sub	 DWORD PTR _height$1$[ebp], ecx
  00165	01 bd f8 fe ff
	ff		 add	 DWORD PTR _height$1$[ebp], edi
$LN19@writeMap:

; 533  : 	fOffset = sizeof(int) * 2;
; 534  : 	len = fy * fWidth + fx;
; 535  : 	len2 = my * mWidth + mx;

  0016b	0f af 85 d8 fe
	ff ff		 imul	 eax, DWORD PTR _mWidth$1$[ebp]
  00172	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _len$3$[ebp]
  00178	0f af fa	 imul	 edi, edx
  0017b	8b c8		 mov	 ecx, eax
  0017d	2b 4d 0c	 sub	 ecx, DWORD PTR _x1$[ebp]
  00180	03 bd cc fe ff
	ff		 add	 edi, DWORD PTR tv784[ebp]
  00186	83 7d 0c 00	 cmp	 DWORD PTR _x1$[ebp], 0
  0018a	0f 4d c8	 cmovge	 ecx, eax

; 536  : 	for (i = 0; i < height; i++)

  0018d	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _height$1$[ebp], 0
  00194	89 8d dc fe ff
	ff		 mov	 DWORD PTR _len2$1$[ebp], ecx
  0019a	0f 8e 23 02 00
	00		 jle	 $LN9@writeMap
  001a0	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _width$1$[ebp]
  001a6	03 c0		 add	 eax, eax
  001a8	89 85 c8 fe ff
	ff		 mov	 DWORD PTR tv802[ebp], eax
  001ae	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _tile$GSCopy$1$[ebp]
  001b4	8d 1c 48	 lea	 ebx, DWORD PTR [eax+ecx*2]
  001b7	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _height$1$[ebp]
  001bd	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv805[ebp], eax
$LL4@writeMap:

; 537  : 	{
; 538  : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  001c3	6a 00		 push	 0
  001c5	8d 04 7d 08 00
	00 00		 lea	 eax, DWORD PTR [edi*2+8]
  001cc	50		 push	 eax
  001cd	56		 push	 esi
  001ce	e8 00 00 00 00	 call	 _fseek

; 539  : 		fwrite(&tile[len2], sizeof(short) * width, 1, fp);

  001d3	56		 push	 esi
  001d4	6a 01		 push	 1
  001d6	ff b5 c8 fe ff
	ff		 push	 DWORD PTR tv802[ebp]
  001dc	53		 push	 ebx
  001dd	e8 00 00 00 00	 call	 _fwrite

; 540  : 		len  += fWidth;
; 541  : 		len2 += mWidth;

  001e2	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _mWidth$1$[ebp]
  001e8	83 c4 1c	 add	 esp, 28			; 0000001cH
  001eb	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _fWidth$[ebp]
  001f1	03 f9		 add	 edi, ecx
  001f3	83 ad e8 fe ff
	ff 01		 sub	 DWORD PTR tv805[ebp], 1
  001fa	8d 1c 53	 lea	 ebx, DWORD PTR [ebx+edx*2]
  001fd	75 c4		 jne	 SHORT $LL4@writeMap

; 542  : 	}
; 543  : 	fOffset += sizeof(short) * (fWidth * fHeight);

  001ff	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _fHeight$[ebp]
  00205	8b bd e4 fe ff
	ff		 mov	 edi, DWORD PTR _parts$GSCopy$1$[ebp]
  0020b	8b 5d 10	 mov	 ebx, DWORD PTR _y1$[ebp]
  0020e	0f af c1	 imul	 eax, ecx
  00211	8d 14 45 08 00
	00 00		 lea	 edx, DWORD PTR [eax*2+8]
  00218	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _len2$1$[ebp]
  0021e	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _fOffset$1$[ebp], edx
  00224	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  00227	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _len$3$[ebp]
  0022d	0f af f9	 imul	 edi, ecx
  00230	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv793[ebp], eax
  00236	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _height$1$[ebp]
  0023c	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv807[ebp], eax
  00242	03 bd cc fe ff
	ff		 add	 edi, DWORD PTR tv784[ebp]
$LL7@writeMap:

; 544  : 	len = fy * fWidth + fx;
; 545  : 	len2 = my * mWidth + mx;
; 546  : 	for (i = 0; i < height; i++)
; 547  : 	{
; 548  : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  00248	6a 00		 push	 0
  0024a	8d 04 7a	 lea	 eax, DWORD PTR [edx+edi*2]
  0024d	50		 push	 eax
  0024e	56		 push	 esi
  0024f	e8 00 00 00 00	 call	 _fseek

; 549  : 		fwrite(&parts[len2], sizeof(short) * width, 1, fp);

  00254	56		 push	 esi
  00255	6a 01		 push	 1
  00257	ff b5 c8 fe ff
	ff		 push	 DWORD PTR tv802[ebp]
  0025d	ff b5 e8 fe ff
	ff		 push	 DWORD PTR tv793[ebp]
  00263	e8 00 00 00 00	 call	 _fwrite

; 550  : 		len  += fWidth;
; 551  : 		len2 += mWidth;

  00268	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _mWidth$1$[ebp]
  0026e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00271	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _fWidth$[ebp]
  00277	03 f9		 add	 edi, ecx
  00279	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  0027c	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _fOffset$1$[ebp]
  00282	01 85 e8 fe ff
	ff		 add	 DWORD PTR tv793[ebp], eax
  00288	83 ad e4 fe ff
	ff 01		 sub	 DWORD PTR tv807[ebp], 1
  0028f	75 b7		 jne	 SHORT $LL7@writeMap

; 552  : 	}	
; 553  : 	fOffset += sizeof(short) * (fWidth * fHeight);

  00291	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _mWidth$1$[ebp]
  00297	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _event$GSCopy$1$[ebp]
  0029d	03 c0		 add	 eax, eax
  0029f	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv794[ebp], eax
  002a5	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _len2$1$[ebp]
  002ab	8d 3c 42	 lea	 edi, DWORD PTR [edx+eax*2]
  002ae	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _fHeight$[ebp]
  002b4	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _fOffset$1$[ebp]
  002ba	0f af c1	 imul	 eax, ecx
  002bd	89 bd dc fe ff
	ff		 mov	 DWORD PTR tv788[ebp], edi
  002c3	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  002c6	ba 00 c0 00 00	 mov	 edx, 49152		; 0000c000H
  002cb	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _fOffset$2$[ebp], eax
  002d1	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _len$3$[ebp]
  002d7	0f af c1	 imul	 eax, ecx
  002da	03 85 cc fe ff
	ff		 add	 eax, DWORD PTR tv784[ebp]
  002e0	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _len$3$[ebp], eax
$LL10@writeMap:

; 554  : 	len = fy * fWidth + fx;
; 555  : 	len2 = my * mWidth + mx;
; 556  : 	for (i = 0; i < height; i++)
; 557  : 	{
; 558  : 		// 読み込み?見たフラグを立てる   阅读？标记观众
; 559  : 		for (j = 0; j < width; j++)

  002e6	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _width$1$[ebp]
  002ec	85 c9		 test	 ecx, ecx
  002ee	7e 7e		 jle	 SHORT $LN12@writeMap
  002f0	8b 75 0c	 mov	 esi, DWORD PTR _x1$[ebp]
  002f3	89 8d f0 fe ff
	ff		 mov	 DWORD PTR tv808[ebp], ecx
  002f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL13@writeMap:

; 560  : 		{
; 561  : 			event[len2+j] |= (MAP_SEE_FLAG | MAP_READ_FLAG);

  00300	66 8b c2	 mov	 ax, dx
  00303	66 0b 07	 or	 ax, WORD PTR [edi]
  00306	66 89 07	 mov	 WORD PTR [edi], ax
  00309	0f b7 d0	 movzx	 edx, ax

; 562  : 			if (nowFloor == floor && (mapAreaX1 <= x1 + j && x1 + j < mapAreaX2 && mapAreaY1 <= y1 + i && y1 + i < mapAreaY2))

  0030c	8b 45 08	 mov	 eax, DWORD PTR _floor$[ebp]
  0030f	39 05 00 00 00
	00		 cmp	 DWORD PTR ?nowFloor@@3HA, eax ; nowFloor
  00315	75 31		 jne	 SHORT $LN11@writeMap
  00317	39 35 00 00 00
	00		 cmp	 DWORD PTR ?mapAreaX1@@3HA, esi ; mapAreaX1
  0031d	7f 29		 jg	 SHORT $LN11@writeMap
  0031f	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR ?mapAreaX2@@3HA ; mapAreaX2
  00325	7d 21		 jge	 SHORT $LN11@writeMap
  00327	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?mapAreaY1@@3HA, ebx ; mapAreaY1
  0032d	7f 19		 jg	 SHORT $LN11@writeMap
  0032f	3b 1d 00 00 00
	00		 cmp	 ebx, DWORD PTR ?mapAreaY2@@3HA ; mapAreaY2
  00335	7d 11		 jge	 SHORT $LN11@writeMap

; 563  : 				// 当重播屏幕中的事件时，内存也被重写
; 564  : 				setEventMemory(x1 + j, y1 + i, event[len2 + j]);

  00337	52		 push	 edx
  00338	53		 push	 ebx
  00339	56		 push	 esi
  0033a	e8 00 00 00 00	 call	 ?setEventMemory@@YAXHHG@Z ; setEventMemory
  0033f	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR tv808[ebp]
  00345	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@writeMap:

; 554  : 	len = fy * fWidth + fx;
; 555  : 	len2 = my * mWidth + mx;
; 556  : 	for (i = 0; i < height; i++)
; 557  : 	{
; 558  : 		// 読み込み?見たフラグを立てる   阅读？标记观众
; 559  : 		for (j = 0; j < width; j++)

  00348	83 c7 02	 add	 edi, 2
  0034b	46		 inc	 esi
  0034c	83 e9 01	 sub	 ecx, 1
  0034f	ba 00 c0 00 00	 mov	 edx, 49152		; 0000c000H
  00354	89 8d f0 fe ff
	ff		 mov	 DWORD PTR tv808[ebp], ecx
  0035a	75 a4		 jne	 SHORT $LL13@writeMap
  0035c	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _fp$2$[ebp]
  00362	8b bd dc fe ff
	ff		 mov	 edi, DWORD PTR tv788[ebp]
  00368	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _len$3$[ebp]
$LN12@writeMap:

; 565  : 		}
; 566  : 		fseek(fp, sizeof(short) * len + fOffset, SEEK_SET);

  0036e	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _fOffset$2$[ebp]
  00374	6a 00		 push	 0
  00376	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00379	50		 push	 eax
  0037a	56		 push	 esi
  0037b	e8 00 00 00 00	 call	 _fseek

; 567  : 		fwrite(&event[len2], sizeof(short) * width, 1, fp);

  00380	56		 push	 esi
  00381	6a 01		 push	 1
  00383	ff b5 c8 fe ff
	ff		 push	 DWORD PTR tv802[ebp]
  00389	57		 push	 edi
  0038a	e8 00 00 00 00	 call	 _fwrite

; 568  : 		len  += fWidth;

  0038f	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _len$3$[ebp]
  00395	83 c4 1c	 add	 esp, 28			; 0000001cH
  00398	03 85 d4 fe ff
	ff		 add	 eax, DWORD PTR _fWidth$[ebp]
  0039e	43		 inc	 ebx

; 569  : 		len2 += mWidth;

  0039f	03 bd e4 fe ff
	ff		 add	 edi, DWORD PTR tv794[ebp]
  003a5	ba 00 c0 00 00	 mov	 edx, 49152		; 0000c000H
  003aa	83 ad f8 fe ff
	ff 01		 sub	 DWORD PTR _height$1$[ebp], 1
  003b1	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _len$3$[ebp], eax
  003b7	89 bd dc fe ff
	ff		 mov	 DWORD PTR tv788[ebp], edi
  003bd	0f 85 23 ff ff
	ff		 jne	 $LL10@writeMap
$LN9@writeMap:

; 570  : 	}
; 571  : 	fclose (fp);

  003c3	56		 push	 esi
  003c4	e8 00 00 00 00	 call	 _fclose

; 572  : 
; 573  : 	return TRUE;
; 574  : }

  003c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003cc	83 c4 04	 add	 esp, 4
  003cf	33 cd		 xor	 ecx, ebp
  003d1	b8 01 00 00 00	 mov	 eax, 1
  003d6	5f		 pop	 edi
  003d7	5b		 pop	 ebx
  003d8	5e		 pop	 esi
  003d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003de	8b e5		 mov	 esp, ebp
  003e0	5d		 pop	 ebp
  003e1	c3		 ret	 0
?writeMap@@YAHHHHHHPAG00@Z ENDP				; writeMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?createMap@@YAXHHH@Z
_TEXT	SEGMENT
_oy$ = -276						; size = 4
_ox$ = -272						; size = 4
_l$ = -268						; size = 2
tv231 = -264						; size = 4
tv230 = -264						; size = 4
_floorname$ = -260					; size = 255
__$ArrayPad$ = -4					; size = 4
_fl$ = 8						; size = 4
_maxx$ = 12						; size = 4
_maxy$ = 16						; size = 4
?createMap@@YAXHHH@Z PROC				; createMap, COMDAT

; 409  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 410  : 	FILE *fp;
; 411  : 	char floorname[255];
; 412  : 	int i = 0, j, k, ox, oy;
; 413  : 	short l = 0;
; 414  : 
; 415  : 	if (fl == 0)

  00013	8b 45 08	 mov	 eax, DWORD PTR _fl$[ebp]
  00016	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _l$[ebp], 0
  00020	85 c0		 test	 eax, eax
  00022	0f 84 c9 01 00
	00		 je	 $LN22@createMap

; 416  : 		return;
; 417  : 
; 418  : 	sprintf(floorname, "map\\%d.dat", fl);

  00028	53		 push	 ebx
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	50		 push	 eax
  0002c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _floorname$[ebp]
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FCEGIJN@map?2?$CFd?4dat@
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _sprintf

; 419  : 	if ((fp = fopen(floorname, "rb")) == NULL)

  0003d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _floorname$[ebp]
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _fopen
  0004e	8b f8		 mov	 edi, eax
  00050	83 c4 14	 add	 esp, 20			; 00000014H
  00053	85 ff		 test	 edi, edi
  00055	0f 85 af 00 00
	00		 jne	 $LN21@createMap

; 420  : 	{
; 421  : 		// ???????????
; 422  : 		// ファイルが無いので作成する
; 423  : 		_mkdir("map");

  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map@
  00060	e8 00 00 00 00	 call	 __mkdir

; 424  : 		if ((fp = fopen(floorname, "wb")) == NULL)

  00065	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _floorname$[ebp]
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _fopen
  00076	8b f8		 mov	 edi, eax
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	85 ff		 test	 edi, edi
  0007d	0f 84 6b 01 00
	00		 je	 $LN52@createMap

; 425  : 			return;
; 426  : 		fseek(fp, 0, SEEK_SET);

  00083	6a 00		 push	 0
  00085	6a 00		 push	 0
  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 _fseek

; 427  : 		fwrite(&maxx, sizeof(int), 1, fp);

  0008d	57		 push	 edi
  0008e	6a 01		 push	 1
  00090	8d 45 0c	 lea	 eax, DWORD PTR _maxx$[ebp]
  00093	6a 04		 push	 4
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _fwrite

; 428  : 		fwrite(&maxy, sizeof(int), 1, fp);

  0009b	57		 push	 edi
  0009c	6a 01		 push	 1
  0009e	8d 45 10	 lea	 eax, DWORD PTR _maxy$[ebp]
  000a1	6a 04		 push	 4
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _fwrite
  000a9	8b 45 10	 mov	 eax, DWORD PTR _maxy$[ebp]
  000ac	ba 03 00 00 00	 mov	 edx, 3
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _maxx$[ebp]
  000b4	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b7	89 95 f8 fe ff
	ff		 mov	 DWORD PTR tv231[ebp], edx
  000bd	0f 1f 00	 npad	 3
$LL4@createMap:

; 430  : 		{
; 431  : 			for (j = 0; j < maxx; j++)

  000c0	33 db		 xor	 ebx, ebx
  000c2	85 c9		 test	 ecx, ecx
  000c4	7e 34		 jle	 SHORT $LN2@createMap
$LL7@createMap:

; 432  : 			{
; 433  : 				for (k=0; k < maxy; k++)

  000c6	33 f6		 xor	 esi, esi
  000c8	85 c0		 test	 eax, eax
  000ca	7e 23		 jle	 SHORT $LN5@createMap
  000cc	0f 1f 40 00	 npad	 4
$LL10@createMap:

; 434  : 				{
; 435  : 					fwrite(&l, sizeof(short), 1, fp);

  000d0	57		 push	 edi
  000d1	6a 01		 push	 1
  000d3	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  000d9	6a 02		 push	 2
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _fwrite
  000e1	8b 45 10	 mov	 eax, DWORD PTR _maxy$[ebp]
  000e4	46		 inc	 esi
  000e5	83 c4 10	 add	 esp, 16			; 00000010H
  000e8	3b f0		 cmp	 esi, eax
  000ea	7c e4		 jl	 SHORT $LL10@createMap
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _maxx$[ebp]
$LN5@createMap:

; 430  : 		{
; 431  : 			for (j = 0; j < maxx; j++)

  000ef	43		 inc	 ebx
  000f0	3b d9		 cmp	 ebx, ecx
  000f2	7c d2		 jl	 SHORT $LL7@createMap
  000f4	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR tv231[ebp]
$LN2@createMap:

; 429  : 		for (i = 0; i < 3; i++)

  000fa	83 ea 01	 sub	 edx, 1
  000fd	89 95 f8 fe ff
	ff		 mov	 DWORD PTR tv231[ebp], edx
  00103	75 bb		 jne	 SHORT $LL4@createMap

; 436  : 				}
; 437  : 			}
; 438  : 		}
; 439  : 		fclose(fp);
; 440  : 	}

  00105	e9 db 00 00 00	 jmp	 $LN12@createMap
$LN21@createMap:

; 441  : 	else
; 442  : 	{
; 443  : 		// ファイルがある時サイズが違うならマップが変わってる
; 444  : 		fread(&ox, sizeof(int), 1, fp);

  0010a	57		 push	 edi
  0010b	6a 01		 push	 1
  0010d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _ox$[ebp]
  00113	6a 04		 push	 4
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _fread

; 445  : 		fread(&oy, sizeof(int), 1, fp);

  0011b	57		 push	 edi
  0011c	6a 01		 push	 1
  0011e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _oy$[ebp]
  00124	6a 04		 push	 4
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 _fread

; 446  : 		if (maxx != ox || maxy != oy)

  0012c	8b 45 0c	 mov	 eax, DWORD PTR _maxx$[ebp]
  0012f	83 c4 20	 add	 esp, 32			; 00000020H
  00132	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _ox$[ebp]
  00138	75 0f		 jne	 SHORT $LN25@createMap
  0013a	8b 45 10	 mov	 eax, DWORD PTR _maxy$[ebp]
  0013d	3b 85 ec fe ff
	ff		 cmp	 eax, DWORD PTR _oy$[ebp]
  00143	0f 84 9c 00 00
	00		 je	 $LN12@createMap
$LN25@createMap:

; 447  : 		{
; 448  : 			fclose(fp);

  00149	57		 push	 edi
  0014a	e8 00 00 00 00	 call	 _fclose

; 449  : 			// サイズが違うので既存ファイルを消して新規にする
; 450  : 			if ((fp = fopen(floorname, "wb")) == NULL)

  0014f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _floorname$[ebp]
  00155	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _fopen
  00160	8b f8		 mov	 edi, eax
  00162	83 c4 0c	 add	 esp, 12			; 0000000cH
  00165	85 ff		 test	 edi, edi
  00167	0f 84 81 00 00
	00		 je	 $LN52@createMap

; 451  : 				return;
; 452  : 			fwrite(&maxx, sizeof(int), 1, fp);

  0016d	57		 push	 edi
  0016e	6a 01		 push	 1
  00170	8d 45 0c	 lea	 eax, DWORD PTR _maxx$[ebp]
  00173	6a 04		 push	 4
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _fwrite

; 453  : 			fwrite(&maxy, sizeof(int), 1, fp);

  0017b	57		 push	 edi
  0017c	6a 01		 push	 1
  0017e	8d 45 10	 lea	 eax, DWORD PTR _maxy$[ebp]
  00181	6a 04		 push	 4
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 _fwrite
  00189	8b 45 10	 mov	 eax, DWORD PTR _maxy$[ebp]
  0018c	ba 03 00 00 00	 mov	 edx, 3
  00191	8b 4d 0c	 mov	 ecx, DWORD PTR _maxx$[ebp]
  00194	83 c4 20	 add	 esp, 32			; 00000020H
  00197	89 95 f8 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], edx
  0019d	0f 1f 00	 npad	 3
$LL13@createMap:

; 455  : 			{
; 456  : 				for (j = 0; j < maxx; j++)

  001a0	33 db		 xor	 ebx, ebx
  001a2	85 c9		 test	 ecx, ecx
  001a4	7e 34		 jle	 SHORT $LN11@createMap
$LL16@createMap:

; 457  : 				{
; 458  : 					for (k = 0; k < maxy; k++)

  001a6	33 f6		 xor	 esi, esi
  001a8	85 c0		 test	 eax, eax
  001aa	7e 23		 jle	 SHORT $LN14@createMap
  001ac	0f 1f 40 00	 npad	 4
$LL19@createMap:

; 459  : 					{
; 460  : 						fwrite(&l, sizeof(short), 1, fp);

  001b0	57		 push	 edi
  001b1	6a 01		 push	 1
  001b3	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  001b9	6a 02		 push	 2
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 _fwrite
  001c1	8b 45 10	 mov	 eax, DWORD PTR _maxy$[ebp]
  001c4	46		 inc	 esi
  001c5	83 c4 10	 add	 esp, 16			; 00000010H
  001c8	3b f0		 cmp	 esi, eax
  001ca	7c e4		 jl	 SHORT $LL19@createMap
  001cc	8b 4d 0c	 mov	 ecx, DWORD PTR _maxx$[ebp]
$LN14@createMap:

; 455  : 			{
; 456  : 				for (j = 0; j < maxx; j++)

  001cf	43		 inc	 ebx
  001d0	3b d9		 cmp	 ebx, ecx
  001d2	7c d2		 jl	 SHORT $LL16@createMap
  001d4	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR tv230[ebp]
$LN11@createMap:

; 454  : 			for (i = 0; i < 3; i++)

  001da	83 ea 01	 sub	 edx, 1
  001dd	89 95 f8 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], edx
  001e3	75 bb		 jne	 SHORT $LL13@createMap
$LN12@createMap:

; 461  : 					}
; 462  : 				}
; 463  : 			}
; 464  : 		}
; 465  : 		fclose (fp);

  001e5	57		 push	 edi
  001e6	e8 00 00 00 00	 call	 _fclose
  001eb	83 c4 04	 add	 esp, 4
$LN52@createMap:
  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi
  001f0	5b		 pop	 ebx
$LN22@createMap:

; 466  : 	}
; 467  : }

  001f1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f4	33 cd		 xor	 ecx, ebp
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c3		 ret	 0
?createMap@@YAXHHH@Z ENDP				; createMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?resetMap@@YAXXZ
_TEXT	SEGMENT
?resetMap@@YAXXZ PROC					; resetMap, COMDAT

; 365  : 	// ?????????????
; 366  : 	nowGx = (int)(nowX / GRID_SIZE);

  00000	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowX@@3MA
  00008	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  00010	56		 push	 esi
  00011	57		 push	 edi

; 367  : 	nowGy = (int)(nowY / GRID_SIZE);
; 368  : 	nextGx = nowGx;
; 369  : 	nextGy = nowGy;
; 370  : 	nowX = (float)nowGx * GRID_SIZE;
; 371  : 	nowY = (float)nowGy * GRID_SIZE;
; 372  : 	oldGx = -1;

  00012	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldGx@@3HA, -1 ; oldGx
  0001c	f3 0f 2c c8	 cvttss2si ecx, xmm0

; 373  : 	oldGy = -1;

  00020	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldGy@@3HA, -1 ; oldGy

; 374  : 	oldNextGx = -1;

  0002a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldNextGx@@3HA, -1 ; oldNextGx

; 375  : 	oldNextGy = -1;

  00034	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?oldNextGy@@3HA, -1 ; oldNextGy
  0003e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?nowY@@3MA
  00046	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  0004e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowGx@@3HA, ecx ; nowGx
  00054	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nextGx@@3HA, ecx ; nextGx
  0005a	66 0f 6e c9	 movd	 xmm1, ecx
  0005e	8d 71 ec	 lea	 esi, DWORD PTR [ecx-20]
  00061	f3 0f 2c c0	 cvttss2si eax, xmm0

; 376  : 	mapAreaX1 = nowGx + MAP_TILE_GRID_X1;
; 377  : 	mapAreaY1 = nowGy + MAP_TILE_GRID_Y1;

  00065	83 c1 11	 add	 ecx, 17			; 00000011H
  00068	89 35 00 00 00
	00		 mov	 DWORD PTR ?mapAreaX1@@3HA, esi ; mapAreaX1
  0006e	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00071	a3 00 00 00 00	 mov	 DWORD PTR ?nowGy@@3HA, eax ; nowGy
  00076	a3 00 00 00 00	 mov	 DWORD PTR ?nextGy@@3HA, eax ; nextGy
  0007b	8d 50 f0	 lea	 edx, DWORD PTR [eax-16]
  0007e	66 0f 6e d0	 movd	 xmm2, eax

; 378  : 	mapAreaX2 = nowGx + MAP_TILE_GRID_X2;

  00082	8d 78 15	 lea	 edi, DWORD PTR [eax+21]
  00085	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42800000
  0008d	89 15 00 00 00
	00		 mov	 DWORD PTR ?mapAreaY1@@3HA, edx ; mapAreaY1
  00093	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00096	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?nowX@@3MA, xmm1
  0009e	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@42800000
  000a6	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?nowY@@3MA, xmm2

; 379  : 	mapAreaY2 = nowGy + MAP_TILE_GRID_Y2;

  000ae	85 f6		 test	 esi, esi

; 380  : 
; 381  : 	if (mapAreaX1 < 0)

  000b0	79 0c		 jns	 SHORT $LN2@resetMap

; 382  : 		mapAreaX1 = 0;

  000b2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaX1@@3HA, 0 ; mapAreaX1
  000bc	33 f6		 xor	 esi, esi
$LN2@resetMap:

; 383  : 	if (mapAreaY1 < 0)

  000be	85 d2		 test	 edx, edx
  000c0	79 0c		 jns	 SHORT $LN3@resetMap

; 384  : 		mapAreaY1 = 0;

  000c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaY1@@3HA, 0 ; mapAreaY1
  000cc	33 d2		 xor	 edx, edx
$LN3@resetMap:

; 385  : 	if (mapAreaX2 > nowFloorGxSize)

  000ce	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize

; 386  : 		mapAreaX2 = nowFloorGxSize;
; 387  : 	if (mapAreaY2 > nowFloorGySize)
; 388  : 		mapAreaY2 = nowFloorGySize;
; 389  : 
; 390  : 	mapAreaWidth  = mapAreaX2 - mapAreaX1;
; 391  : 	mapAreaHeight = mapAreaY2 - mapAreaY1;
; 392  : 	nowVx = 0;

  000d4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVx@@3MA, 0
  000de	0f 4f 0d 00 00
	00 00		 cmovg	 ecx, DWORD PTR ?nowFloorGxSize@@3HA ; nowFloorGxSize
  000e5	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  000eb	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mapAreaX2@@3HA, ecx ; mapAreaX2
  000f1	0f 4f 3d 00 00
	00 00		 cmovg	 edi, DWORD PTR ?nowFloorGySize@@3HA ; nowFloorGySize
  000f8	2b ce		 sub	 ecx, esi
  000fa	89 3d 00 00 00
	00		 mov	 DWORD PTR ?mapAreaY2@@3HA, edi ; mapAreaY2

; 393  : 	nowVy = 0;
; 394  : 	nowSpdRate = 1;
; 395  : 	viewPointX = nowX;
; 396  : 	viewPointY = nowY;
; 397  : 	moveRouteCnt = 0;

  00100	33 c0		 xor	 eax, eax
  00102	2b fa		 sub	 edi, edx
  00104	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mapAreaWidth@@3HA, ecx ; mapAreaWidth
  0010a	89 3d 00 00 00
	00		 mov	 DWORD PTR ?mapAreaHeight@@3HA, edi ; mapAreaHeight

; 398  : 	moveRouteCnt2 = 0;
; 399  : 	moveStackFlag = FALSE;
; 400  : 	mouseCursorMode = MOUSE_CURSOR_MODE_NORMAL;
; 401  : 	mouseLeftPushTime = 0;
; 402  : 	beforeMouseLeftPushTime = 0;

  00110	5f		 pop	 edi
  00111	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVy@@3MA, 0
  0011b	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?nowSpdRate@@3MA, 1065353216 ; 3f800000H
  00125	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?viewPointX@@3MA, xmm1
  0012d	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?viewPointY@@3MA, xmm2
  00135	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt@@3FA, ax ; moveRouteCnt
  0013b	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt2@@3FA, ax ; moveRouteCnt2
  00141	a3 00 00 00 00	 mov	 DWORD PTR ?moveStackFlag@@3HA, eax ; moveStackFlag
  00146	66 a3 00 00 00
	00		 mov	 WORD PTR ?mouseCursorMode@@3FA, ax ; mouseCursorMode
  0014c	a3 00 00 00 00	 mov	 DWORD PTR ?mouseLeftPushTime@@3IA, eax ; mouseLeftPushTime
  00151	a3 00 00 00 00	 mov	 DWORD PTR ?beforeMouseLeftPushTime@@3IA, eax ; beforeMouseLeftPushTime
  00156	5e		 pop	 esi

; 403  : //	autoMapSeeFlag = FALSE;
; 404  : }

  00157	c3		 ret	 0
?resetMap@@YAXXZ ENDP					; resetMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\map.cpp
;	COMDAT ?initMap@@YAXXZ
_TEXT	SEGMENT
?initMap@@YAXXZ PROC					; initMap, COMDAT

; 259  : #ifndef _DEBUG
; 260  : 	nowFloor = 0;
; 261  : 	nowFloorGxSize = 0;
; 262  : 	nowFloorGySize = 0;
; 263  : 	nowGx = 0;
; 264  : 	nowGy = 0;
; 265  : 	nowX = 0;
; 266  : 	nowY = 0;
; 267  : 	nextGx = 0;
; 268  : 	nextGy = 0;
; 269  : 	oldGx = 0, oldGy = 0;
; 270  : 	oldNextGx = 0, oldNextGy = 0;
; 271  : 
; 272  : 	loginFlag = TRUE;
; 273  : #else
; 274  : 	if (offlineFlag)
; 275  : 	{
; 276  : 		setMap(400, 20, 20);
; 277  : 		nowFloorGxSize = 100;
; 278  : 		nowFloorGySize = 100;
; 279  : 	}
; 280  : 	else
; 281  : 	{
; 282  : 		nowFloor = 0;
; 283  : 		nowFloorGxSize = 0;
; 284  : 		nowFloorGySize = 0;
; 285  : 		nowGx = 0;
; 286  : 		nowGy = 0;
; 287  : 		nowX = 0;
; 288  : 		nowY = 0;
; 289  : 		nextGx = 0;
; 290  : 		nextGy = 0;
; 291  : 		oldGx = 0, oldGy = 0;
; 292  : 		oldNextGx = 0, oldNextGy = 0;
; 293  : 
; 294  : 		loginFlag = TRUE;
; 295  : 	}
; 296  : #endif
; 297  : 
; 298  : 	mapAreaX1 = nowGx+MAP_TILE_GRID_X1;
; 299  : 	mapAreaY1 = nowGy+MAP_TILE_GRID_Y1;
; 300  : 	mapAreaX2 = nowGx+MAP_TILE_GRID_X2;
; 301  : 	mapAreaY2 = nowGy+MAP_TILE_GRID_Y2;
; 302  : 
; 303  : 	if (mapAreaX1 < 0)
; 304  : 		mapAreaX1 = 0;
; 305  : 	if (mapAreaY1 < 0)
; 306  : 		mapAreaY1 = 0;
; 307  : 	if (mapAreaX2 > nowFloorGxSize)
; 308  : 		mapAreaX2 = nowFloorGxSize;
; 309  : 	if (mapAreaY2 > nowFloorGySize)
; 310  : 		mapAreaY2 = nowFloorGySize;
; 311  : 
; 312  : 	mapAreaWidth  = mapAreaX2 - mapAreaX1;
; 313  : 	mapAreaHeight = mapAreaY2 - mapAreaY1;
; 314  : 	nowVx = 0;
; 315  : 	nowVy = 0;
; 316  : 	nowSpdRate = 1;
; 317  : 	moveRouteCnt = 0;

  00000	33 c0		 xor	 eax, eax
  00002	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowFloor@@3HA, 0 ; nowFloor
  0000c	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt@@3FA, ax ; moveRouteCnt

; 318  : 	moveRouteCnt2 = 0;

  00012	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveRouteCnt2@@3FA, ax ; moveRouteCnt2

; 319  : 	moveStackFlag = FALSE;

  00018	a3 00 00 00 00	 mov	 DWORD PTR ?moveStackFlag@@3HA, eax ; moveStackFlag

; 320  : 	mapEmptyFlag = FALSE;

  0001d	a3 00 00 00 00	 mov	 DWORD PTR ?mapEmptyFlag@@3HA, eax ; mapEmptyFlag

; 321  : 	mouseCursorMode = MOUSE_CURSOR_MODE_NORMAL;

  00022	66 a3 00 00 00
	00		 mov	 WORD PTR ?mouseCursorMode@@3FA, ax ; mouseCursorMode

; 322  : 	nowEncountPercentage = 0;

  00028	66 a3 00 00 00
	00		 mov	 WORD PTR ?nowEncountPercentage@@3FA, ax ; nowEncountPercentage

; 323  : 	nowEncountExtra = 0;

  0002e	66 a3 00 00 00
	00		 mov	 WORD PTR ?nowEncountExtra@@3FA, ax ; nowEncountExtra

; 324  : 	sendEnFlag = 0;

  00034	66 a3 00 00 00
	00		 mov	 WORD PTR ?sendEnFlag@@3FA, ax ; sendEnFlag

; 325  : 	encountNowFlag = 0;

  0003a	66 a3 00 00 00
	00		 mov	 WORD PTR ?encountNowFlag@@3FA, ax ; encountNowFlag

; 326  : 	eventWarpSendFlag = 0;

  00040	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventWarpSendFlag@@3FA, ax ; eventWarpSendFlag

; 327  : 	eventEnemySendFlag = 0;

  00046	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventEnemySendFlag@@3FA, ax ; eventEnemySendFlag

; 328  : 	eventEnemyFlag = 0;

  0004c	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventEnemyFlag@@3FA, ax ; eventEnemyFlag

; 329  : 	etcEventFlag = 0;

  00052	66 a3 00 00 00
	00		 mov	 WORD PTR ?etcEventFlag@@3FA, ax ; etcEventFlag

; 330  : 	mouseLeftPushTime = 0;

  00058	a3 00 00 00 00	 mov	 DWORD PTR ?mouseLeftPushTime@@3IA, eax ; mouseLeftPushTime

; 331  : 	beforeMouseLeftPushTime = 0;

  0005d	a3 00 00 00 00	 mov	 DWORD PTR ?beforeMouseLeftPushTime@@3IA, eax ; beforeMouseLeftPushTime

; 332  : 	warpEffectFlag = FALSE;

  00062	a3 00 00 00 00	 mov	 DWORD PTR ?warpEffectFlag@@3HA, eax ; warpEffectFlag

; 333  : 	warpEffectStart = FALSE;

  00067	a3 00 00 00 00	 mov	 DWORD PTR ?warpEffectStart@@3HA, eax ; warpEffectStart

; 334  : 	warpEffectOk = FALSE;

  0006c	a3 00 00 00 00	 mov	 DWORD PTR ?warpEffectOk@@3HA, eax ; warpEffectOk

; 335  : //	autoMapSeeFlag = FALSE;
; 336  : 	eventWarpSendId = -1;

  00071	83 c8 ff	 or	 eax, -1
  00074	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventWarpSendId@@3FA, ax ; eventWarpSendId

; 337  : 	eventEnemySendId = -1;

  0007a	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventEnemySendId@@3FA, ax ; eventEnemySendId

; 338  : 	moveLastDir = -1;

  00080	66 a3 00 00 00
	00		 mov	 WORD PTR ?moveLastDir@@3FA, ax ; moveLastDir

; 339  : 	amountXFastDraw = 0;
; 340  : 	amountYFastDraw = 0;
; 341  : 	nowXFastDraw = 0;
; 342  : 	nowYFastDraw = 0;
; 343  : 	baseXFastDraw = 0;
; 344  : 	baseYFastDraw = 0;
; 345  : 	amountXFastDraw2 = 0;
; 346  : 	amountYFastDraw2 = 0;
; 347  : 	nowXFastDraw2 = 0;
; 348  : 	nowYFastDraw2 = 0;
; 349  : 	baseXFastDraw2 = 0;
; 350  : 	baseYFastDraw2 = 0;
; 351  : 	vsLookFlag = 0;

  00086	33 c0		 xor	 eax, eax
  00088	66 a3 00 00 00
	00		 mov	 WORD PTR ?vsLookFlag@@3FA, ax ; vsLookFlag

; 352  : 	fastDrawTileFlag = 1;

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowFloorGxSize@@3HA, 0 ; nowFloorGxSize
  0009d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowFloorGySize@@3HA, 0 ; nowFloorGySize
  000a7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowGx@@3HA, 0 ; nowGx
  000b1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowGy@@3HA, 0 ; nowGy
  000bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowX@@3MA, 0
  000c5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowY@@3MA, 0
  000cf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nextGx@@3HA, 0 ; nextGx
  000d9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nextGy@@3HA, 0 ; nextGy
  000e3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?oldGx@@3HA, 0 ; oldGx
  000ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?oldGy@@3HA, 0 ; oldGy
  000f7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?oldNextGx@@3HA, 0 ; oldNextGx
  00101	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?oldNextGy@@3HA, 0 ; oldNextGy
  0010b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?loginFlag@@3HA, 1 ; loginFlag
  00115	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaX1@@3HA, 0 ; mapAreaX1
  0011f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaY1@@3HA, 0 ; mapAreaY1
  00129	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaX2@@3HA, 0 ; mapAreaX2
  00133	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaY2@@3HA, 0 ; mapAreaY2
  0013d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaWidth@@3HA, 0 ; mapAreaWidth
  00147	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapAreaHeight@@3HA, 0 ; mapAreaHeight
  00151	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVx@@3MA, 0
  0015b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowVy@@3MA, 0
  00165	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?nowSpdRate@@3MA, 1065353216 ; 3f800000H
  0016f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?amountXFastDraw@@3HA, 0 ; amountXFastDraw
  00179	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?amountYFastDraw@@3HA, 0 ; amountYFastDraw
  00183	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowXFastDraw@@3HA, 0 ; nowXFastDraw
  0018d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowYFastDraw@@3HA, 0 ; nowYFastDraw
  00197	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?baseXFastDraw@@3HA, 0 ; baseXFastDraw
  001a1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?baseYFastDraw@@3HA, 0 ; baseYFastDraw
  001ab	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?amountXFastDraw2@@3HA, 0 ; amountXFastDraw2
  001b5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?amountYFastDraw2@@3HA, 0 ; amountYFastDraw2
  001bf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowXFastDraw2@@3HA, 0 ; nowXFastDraw2
  001c9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nowYFastDraw2@@3HA, 0 ; nowYFastDraw2
  001d3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?baseXFastDraw2@@3HA, 0 ; baseXFastDraw2
  001dd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?baseYFastDraw2@@3HA, 0 ; baseYFastDraw2
  001e7	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 353  : 	transmigrationEffectFlag = 0;

  001ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transmigrationEffectFlag@@3HA, 0 ; transmigrationEffectFlag

; 354  : 	transEffectPaletteStatus = 0;

  001f7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transEffectPaletteStatus@@3HA, 0 ; transEffectPaletteStatus

; 355  : 	transEffectPaletteAfterWaitTime = 0;

  00201	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transEffectPaletteAfterWaitTime@@3IA, 0 ; transEffectPaletteAfterWaitTime

; 356  : #ifdef MAP_CACHE_PROC
; 357  : 	initMapCache();
; 358  : #endif
; 359  : }

  0020b	c3		 ret	 0
?initMap@@YAXXZ ENDP					; initMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
