; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	\\VBOXSVR\_stoneage\repos\ssm-sacli\Release\loadrealbin.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?autoMapColorTbl@@3PAEA				; autoMapColorTbl
PUBLIC	?bitmapnumbertable@@3PAKA			; bitmapnumbertable
PUBLIC	?Realbinfp@@3PAPAU_iobuf@@A			; Realbinfp
PUBLIC	?Addrbinfp@@3PAU_iobuf@@A			; Addrbinfp
PUBLIC	?adrnbuff@@3PAUADRNBIN@@A			; adrnbuff
PUBLIC	?g_realgetimagebuf@@3PAEA			; g_realgetimagebuf
PUBLIC	?g_realgetimagebuf2@@3PAEA			; g_realgetimagebuf2
PUBLIC	?NewColor16Flg@@3HA				; NewColor16Flg
_BSS	SEGMENT
?autoMapColorTbl@@3PAEA DB 01e8480H DUP (?)		; autoMapColorTbl
?bitmapnumbertable@@3PAKA DD 01e8480H DUP (?)		; bitmapnumbertable
?Realbinfp@@3PAPAU_iobuf@@A DD 01e8480H DUP (?)		; Realbinfp
?Addrbinfp@@3PAU_iobuf@@A DD 01H DUP (?)		; Addrbinfp
?adrnbuff@@3PAUADRNBIN@@A DB 09896800H DUP (?)		; adrnbuff
?g_realgetimagebuf@@3PAEA DB 0600020H DUP (?)		; g_realgetimagebuf
?g_realgetimagebuf2@@3PAEA DB 0600020H DUP (?)		; g_realgetimagebuf2
?NewColor16Flg@@3HA DD 01H DUP (?)			; NewColor16Flg
_BSS	ENDS
PUBLIC	___local_stdio_scanf_options
PUBLIC	_sscanf_s
PUBLIC	?initAutoMapColor@@YAXPAD@Z			; initAutoMapColor
PUBLIC	?makeAutoMapColor@@YAXXZ			; makeAutoMapColor
PUBLIC	?writeAutoMapColor@@YAHPAD0@Z			; writeAutoMapColor
PUBLIC	?readAutoMapColor@@YAHPAD0@Z			; readAutoMapColor
PUBLIC	?cleanupRealbin@@YAXXZ				; cleanupRealbin
PUBLIC	?realGetImage@@YAHHPAPAEPAH1@Z			; realGetImage
PUBLIC	?realGetPos@@YAHKPAF0@Z				; realGetPos
PUBLIC	?realGetWH@@YAHKPAF0@Z				; realGetWH
PUBLIC	?realGetHitPoints@@YAHKPAF0@Z			; realGetHitPoints
PUBLIC	?realGetHitFlag@@YAHKPAF@Z			; realGetHitFlag
PUBLIC	?realGetPrioType@@YAHKPAF@Z			; realGetPrioType
PUBLIC	?realGetHeightFlag@@YAHKPAF@Z			; realGetHeightFlag
PUBLIC	?realGetNo@@YAHKPAK@Z				; realGetNo
PUBLIC	?realGetSoundEffect@@YAHK@Z			; realGetSoundEffect
PUBLIC	?realGetWalkSoundEffect@@YAHK@Z			; realGetWalkSoundEffect
PUBLIC	?realGetBitmapNo@@YAHH@Z			; realGetBitmapNo
PUBLIC	?initRealbinFileOpen@@YAHPAD0@Z			; initRealbinFileOpen
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0O@PLLALPBE@data?2auto?4dat@		; `string'
PUBLIC	??_C@_04IFMAMMFM@adrn@				; `string'
PUBLIC	??_C@_0M@GAINFBKI@adrn_?$CFd?4bin@		; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	__xmm@000000000000006f000000a4000000a4
PUBLIC	__xmm@0000003c00000070000000bd00000060
PUBLIC	__xmm@00000070000000500000003d000000a6
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_strstr:PROC
EXTRN	_fclose:PROC
EXTRN	_feof:PROC
EXTRN	__fileno:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_fwrite:PROC
EXTRN	___stdio_common_vsscanf:PROC
EXTRN	?getAutoMapColor@@YAHI@Z:PROC			; getAutoMapColor
EXTRN	?decoder@@YAPAEPAEPAPAEPAI22@Z:PROC		; decoder
EXTRN	__fstat64i32:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?MaxAdrnID@@3HA:DWORD				; MaxAdrnID
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT __xmm@00000070000000500000003d000000a6
CONST	SEGMENT
__xmm@00000070000000500000003d000000a6 DB 0a6H, 00H, 00H, 00H, '=', 00H, 00H
	DB	00H, 'P', 00H, 00H, 00H, 'p', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0000003c00000070000000bd00000060
CONST	SEGMENT
__xmm@0000003c00000070000000bd00000060 DB '`', 00H, 00H, 00H, 0bdH, 00H, 00H
	DB	00H, 'p', 00H, 00H, 00H, '<', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000000000006f000000a4000000a4
CONST	SEGMENT
__xmm@000000000000006f000000a4000000a4 DB 0a4H, 00H, 00H, 00H, 0a4H, 00H, 00H
	DB	00H, 'o', 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAINFBKI@adrn_?$CFd?4bin@
CONST	SEGMENT
??_C@_0M@GAINFBKI@adrn_?$CFd?4bin@ DB 'adrn_%d.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFMAMMFM@adrn@
CONST	SEGMENT
??_C@_04IFMAMMFM@adrn@ DB 'adrn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PLLALPBE@data?2auto?4dat@
CONST	SEGMENT
??_C@_0O@PLLALPBE@data?2auto?4dat@ DB 'data\auto.dat', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?initRealbinFileOpen@@YAHPAD0@Z
_TEXT	SEGMENT
tv200 = -88						; size = 4
_tmpadrnbuff$ = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
_realbinfilename$ = 8					; size = 4
_addrbinfilename$ = 12					; size = 4
?initRealbinFileOpen@@YAHPAD0@Z PROC			; initRealbinFileOpen, COMDAT

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _addrbinfilename$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _realbinfilename$[ebp]

; 177  : 	ADRNBIN tmpadrnbuff;
; 178  : 	if ((Addrbinfp = fopen(addrbinfilename, "rb")) == NULL)

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _fopen
  00023	83 c4 08	 add	 esp, 8
  00026	a3 00 00 00 00	 mov	 DWORD PTR ?Addrbinfp@@3PAU_iobuf@@A, eax ; Addrbinfp
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 44 01 00
	00		 je	 $LN18@initRealbi

; 179  : 		return FALSE;
; 180  : #ifdef _PTTERN_SEPARATION_BIN
; 181  : 	FILE *Realfp;
; 182  : 	if ((Realfp = fopen(realbinfilename, "rb")) == NULL)

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _fopen
  0003e	8b d8		 mov	 ebx, eax
  00040	83 c4 08	 add	 esp, 8
  00043	85 db		 test	 ebx, ebx
  00045	0f 84 2c 01 00
	00		 je	 $LN18@initRealbi

; 183  : 		return FALSE;
; 184  : #else
; 185  : 	if ((fopen_s(&Realbinfp, realbinfilename, "rb")) != NULL)
; 186  : 		return FALSE;
; 187  : #endif
; 188  : 	//adrn.bin
; 189  : 	while (!feof(Addrbinfp)) {

  0004b	ff 35 00 00 00
	00		 push	 DWORD PTR ?Addrbinfp@@3PAU_iobuf@@A ; Addrbinfp
  00051	e8 00 00 00 00	 call	 _feof
  00056	83 c4 04	 add	 esp, 4
  00059	85 c0		 test	 eax, eax
  0005b	0f 85 f3 00 00
	00		 jne	 $LN3@initRealbi
  00061	c7 45 a8 64 00
	00 00		 mov	 DWORD PTR tv200[ebp], 100 ; 00000064H
  00068	57		 push	 edi
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@initRealbi:

; 190  : 		fread(&tmpadrnbuff, sizeof(tmpadrnbuff), 1, Addrbinfp);

  00070	ff 35 00 00 00
	00		 push	 DWORD PTR ?Addrbinfp@@3PAU_iobuf@@A ; Addrbinfp
  00076	8d 45 ac	 lea	 eax, DWORD PTR _tmpadrnbuff$[ebp]
  00079	6a 01		 push	 1
  0007b	6a 50		 push	 80			; 00000050H
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _fread

; 191  : 		adrnbuff[tmpadrnbuff.bitmapno] = tmpadrnbuff;

  00083	8b 75 ac	 mov	 esi, DWORD PTR _tmpadrnbuff$[ebp]
  00086	83 c4 10	 add	 esp, 16			; 00000010H
  00089	0f 10 45 ac	 movups	 xmm0, XMMWORD PTR _tmpadrnbuff$[ebp]

; 192  : 
; 193  : #ifdef _PTTERN_SEPARATION_BIN
; 194  : 		Realbinfp[tmpadrnbuff.bitmapno] = Realfp;
; 195  : 		if ((ULONG)MaxAdrnID < tmpadrnbuff.bitmapno) {

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MaxAdrnID@@3HA ; MaxAdrnID
  00092	8d 3c b6	 lea	 edi, DWORD PTR [esi+esi*4]
  00095	89 1c b5 00 00
	00 00		 mov	 DWORD PTR ?Realbinfp@@3PAPAU_iobuf@@A[esi*4], ebx
  0009c	c1 e7 04	 shl	 edi, 4
  0009f	3b c6		 cmp	 eax, esi
  000a1	0f 42 c6	 cmovb	 eax, esi
  000a4	a3 00 00 00 00	 mov	 DWORD PTR ?MaxAdrnID@@3HA, eax ; MaxAdrnID
  000a9	0f 11 87 00 00
	00 00		 movups	 XMMWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edi], xmm0
  000b0	0f 10 45 bc	 movups	 xmm0, XMMWORD PTR _tmpadrnbuff$[ebp+16]
  000b4	0f 11 87 10 00
	00 00		 movups	 XMMWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edi+16], xmm0
  000bb	0f 10 45 cc	 movups	 xmm0, XMMWORD PTR _tmpadrnbuff$[ebp+32]
  000bf	0f 11 87 20 00
	00 00		 movups	 XMMWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edi+32], xmm0
  000c6	0f 10 45 dc	 movups	 xmm0, XMMWORD PTR _tmpadrnbuff$[ebp+48]
  000ca	0f 11 87 30 00
	00 00		 movups	 XMMWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edi+48], xmm0
  000d1	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR _tmpadrnbuff$[ebp+64]
  000d5	0f 11 87 40 00
	00 00		 movups	 XMMWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edi+64], xmm0

; 196  : 			MaxAdrnID = tmpadrnbuff.bitmapno;
; 197  : 		}
; 198  : #endif
; 199  : 		if (tmpadrnbuff.attr.bmpnumber != 0) {

  000dc	66 0f 73 d8 0c	 psrldq	 xmm0, 12		; 0000000cH
  000e1	66 0f 7e c1	 movd	 ecx, xmm0
  000e5	85 c9		 test	 ecx, ecx
  000e7	74 4a		 je	 SHORT $LN7@initRealbi

; 200  : 			if ((12802 <= tmpadrnbuff.attr.bmpnumber && tmpadrnbuff.attr.bmpnumber <= 12811)
; 201  : 				|| (10132 <= tmpadrnbuff.attr.bmpnumber && tmpadrnbuff.attr.bmpnumber <= 10136)) {

  000e9	81 f9 02 32 00
	00		 cmp	 ecx, 12802		; 00003202H
  000ef	72 08		 jb	 SHORT $LN11@initRealbi
  000f1	81 f9 0b 32 00
	00		 cmp	 ecx, 12811		; 0000320bH
  000f7	76 0b		 jbe	 SHORT $LN10@initRealbi
$LN11@initRealbi:
  000f9	8d 81 6c d8 ff
	ff		 lea	 eax, DWORD PTR [ecx-10132]
  000ff	83 f8 04	 cmp	 eax, 4
  00102	77 19		 ja	 SHORT $LN9@initRealbi
$LN10@initRealbi:

; 202  : 				adrnbuff[tmpadrnbuff.bitmapno].attr.hit =

  00104	0f b7 87 1e 00
	00 00		 movzx	 eax, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edi+30]
  0010b	33 d2		 xor	 edx, edx
  0010d	f7 75 a8	 div	 DWORD PTR tv200[ebp]
  00110	81 c2 2c 01 00
	00		 add	 edx, 300		; 0000012cH
  00116	66 89 97 1e 00
	00 00		 mov	 WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edi+30], dx
$LN9@initRealbi:

; 203  : 					300 + (adrnbuff[tmpadrnbuff.bitmapno].attr.hit % 100);
; 204  : 			}
; 205  : 			if (tmpadrnbuff.attr.bmpnumber <= 33 && tmpadrnbuff.bitmapno>230000) {//防堵魔法图号覆盖声音的bug

  0011d	83 f9 21	 cmp	 ecx, 33			; 00000021H
  00120	77 08		 ja	 SHORT $LN12@initRealbi
  00122	81 fe 70 82 03
	00		 cmp	 esi, 230000		; 00038270H
  00128	77 13		 ja	 SHORT $LN8@initRealbi
$LN12@initRealbi:

; 206  : 				continue;
; 207  : 			}
; 208  : 			bitmapnumbertable[tmpadrnbuff.attr.bmpnumber] = tmpadrnbuff.bitmapno;

  0012a	89 34 8d 00 00
	00 00		 mov	 DWORD PTR ?bitmapnumbertable@@3PAKA[ecx*4], esi

; 209  : 		}

  00131	eb 0a		 jmp	 SHORT $LN8@initRealbi
$LN7@initRealbi:

; 210  : 		else
; 211  : 			bitmapnumbertable[tmpadrnbuff.attr.bmpnumber] = 0;

  00133	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bitmapnumbertable@@3PAKA, 0
$LN8@initRealbi:

; 183  : 		return FALSE;
; 184  : #else
; 185  : 	if ((fopen_s(&Realbinfp, realbinfilename, "rb")) != NULL)
; 186  : 		return FALSE;
; 187  : #endif
; 188  : 	//adrn.bin
; 189  : 	while (!feof(Addrbinfp)) {

  0013d	ff 35 00 00 00
	00		 push	 DWORD PTR ?Addrbinfp@@3PAU_iobuf@@A ; Addrbinfp
  00143	e8 00 00 00 00	 call	 _feof
  00148	83 c4 04	 add	 esp, 4
  0014b	85 c0		 test	 eax, eax
  0014d	0f 84 1d ff ff
	ff		 je	 $LL2@initRealbi
  00153	5f		 pop	 edi
$LN3@initRealbi:

; 212  : 	}
; 213  : 	fclose(Addrbinfp);

  00154	ff 35 00 00 00
	00		 push	 DWORD PTR ?Addrbinfp@@3PAU_iobuf@@A ; Addrbinfp
  0015a	e8 00 00 00 00	 call	 _fclose
  0015f	83 c4 04	 add	 esp, 4

; 214  : 	return TRUE;

  00162	b8 01 00 00 00	 mov	 eax, 1
  00167	5e		 pop	 esi

; 215  : }

  00168	5b		 pop	 ebx
  00169	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016c	33 cd		 xor	 ecx, ebp
  0016e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
$LN18@initRealbi:
  00177	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017a	33 c0		 xor	 eax, eax
  0017c	5e		 pop	 esi
  0017d	33 cd		 xor	 ecx, ebp
  0017f	5b		 pop	 ebx
  00180	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
?initRealbinFileOpen@@YAHPAD0@Z ENDP			; initRealbinFileOpen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetBitmapNo@@YAHH@Z
_TEXT	SEGMENT
_num$ = 8						; size = 4
?realGetBitmapNo@@YAHH@Z PROC				; realGetBitmapNo, COMDAT

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 364  : #ifndef _READ16BITBMP
; 365  : 	if (num < 0 || num >= MAX_GRAPHICS) return -1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _num$[ebp]
  00006	3d 7f 84 1e 00	 cmp	 eax, 1999999		; 001e847fH
  0000b	77 0e		 ja	 SHORT $LN3@realGetBit

; 366  : 	return adrnbuff[num].attr.bmpnumber;

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	c1 e0 04	 shl	 eax, 4
  00013	8b 80 4c 00 00
	00		 mov	 eax, DWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[eax+76]

; 367  : #else
; 368  : 	if (num < 0) return -1;
; 369  : 	if (num >= OLD_GRAPHICS_START) {
; 370  : 		if (num >= MAX_GRAPHICS) return -1;
; 371  : 		return adrntruebuff[num - OLD_GRAPHICS_START].bitmapno;
; 372  : 	}
; 373  : 	else return adrnbuff[num].attr.bmpnumber;
; 374  : #endif
; 375  : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN3@realGetBit:

; 364  : #ifndef _READ16BITBMP
; 365  : 	if (num < 0 || num >= MAX_GRAPHICS) return -1;

  0001b	83 c8 ff	 or	 eax, -1

; 367  : #else
; 368  : 	if (num < 0) return -1;
; 369  : 	if (num >= OLD_GRAPHICS_START) {
; 370  : 		if (num >= MAX_GRAPHICS) return -1;
; 371  : 		return adrntruebuff[num - OLD_GRAPHICS_START].bitmapno;
; 372  : 	}
; 373  : 	else return adrnbuff[num].attr.bmpnumber;
; 374  : #endif
; 375  : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?realGetBitmapNo@@YAHH@Z ENDP				; realGetBitmapNo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetWalkSoundEffect@@YAHK@Z
_TEXT	SEGMENT
_GraphicNo$ = 8						; size = 4
?realGetWalkSoundEffect@@YAHK@Z PROC			; realGetWalkSoundEffect, COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { return FALSE; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _GraphicNo$[ebp]
  00006	3d 80 84 1e 00	 cmp	 eax, 2000000		; 001e8480H
  0000b	73 0f		 jae	 SHORT $LN3@realGetWal

; 334  : 	return adrnbuff[GraphicNo].attr.effect2;

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	c1 e0 04	 shl	 eax, 4
  00013	0f bf 80 42 00
	00 00		 movsx	 eax, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[eax+66]

; 335  : 
; 336  : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
$LN3@realGetWal:

; 333  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { return FALSE; }

  0001c	33 c0		 xor	 eax, eax

; 335  : 
; 336  : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?realGetWalkSoundEffect@@YAHK@Z ENDP			; realGetWalkSoundEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetSoundEffect@@YAHK@Z
_TEXT	SEGMENT
_GraphicNo$ = 8						; size = 4
?realGetSoundEffect@@YAHK@Z PROC			; realGetSoundEffect, COMDAT

; 325  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 326  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS)return FALSE;

  00003	8b 45 08	 mov	 eax, DWORD PTR _GraphicNo$[ebp]
  00006	3d 80 84 1e 00	 cmp	 eax, 2000000		; 001e8480H
  0000b	73 16		 jae	 SHORT $LN3@realGetSou

; 327  : 	return adrnbuff[bitmapnumbertable[GraphicNo]].attr.effect1;

  0000d	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?bitmapnumbertable@@3PAKA[eax*4]
  00014	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00017	c1 e0 04	 shl	 eax, 4
  0001a	0f bf 80 40 00
	00 00		 movsx	 eax, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[eax+64]

; 328  : 
; 329  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN3@realGetSou:

; 326  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS)return FALSE;

  00023	33 c0		 xor	 eax, eax

; 328  : 
; 329  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?realGetSoundEffect@@YAHK@Z ENDP			; realGetSoundEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetNo@@YAHKPAK@Z
_TEXT	SEGMENT
_CharAction$ = 8					; size = 4
_GraphicNo$ = 12					; size = 4
?realGetNo@@YAHKPAK@Z PROC				; realGetNo, COMDAT

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 340  : #ifndef _READ16BITBMP
; 341  : 	if (CharAction<0 || CharAction >= MAX_GRAPHICS) { *GraphicNo = 0; return FALSE; }

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _CharAction$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _GraphicNo$[ebp]
  00009	81 f9 80 84 1e
	00		 cmp	 ecx, 2000000		; 001e8480H
  0000f	73 10		 jae	 SHORT $LN3@realGetNo

; 342  : 	*GraphicNo = bitmapnumbertable[CharAction];

  00011	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?bitmapnumbertable@@3PAKA[ecx*4]
  00018	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 	return TRUE;

  0001a	b8 01 00 00 00	 mov	 eax, 1

; 344  : #else
; 345  : 	if (CharAction < 0) {
; 346  : 		*GraphicNo = 0;
; 347  : 		return FALSE;
; 348  : 	}
; 349  : 	if (CharAction >= OLD_GRAPHICS_START) {
; 350  : 		if (CharAction >= MAX_GRAPHICS) {
; 351  : 			*GraphicNo = 0;
; 352  : 			return FALSE;
; 353  : 		}
; 354  : 		*GraphicNo = CharAction;
; 355  : 		return TRUE;
; 356  : 	}
; 357  : 	else *GraphicNo = bitmapnumbertable[CharAction];
; 358  : 	return TRUE;
; 359  : #endif
; 360  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@realGetNo:

; 340  : #ifndef _READ16BITBMP
; 341  : 	if (CharAction<0 || CharAction >= MAX_GRAPHICS) { *GraphicNo = 0; return FALSE; }

  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00027	33 c0		 xor	 eax, eax

; 344  : #else
; 345  : 	if (CharAction < 0) {
; 346  : 		*GraphicNo = 0;
; 347  : 		return FALSE;
; 348  : 	}
; 349  : 	if (CharAction >= OLD_GRAPHICS_START) {
; 350  : 		if (CharAction >= MAX_GRAPHICS) {
; 351  : 			*GraphicNo = 0;
; 352  : 			return FALSE;
; 353  : 		}
; 354  : 		*GraphicNo = CharAction;
; 355  : 		return TRUE;
; 356  : 	}
; 357  : 	else *GraphicNo = bitmapnumbertable[CharAction];
; 358  : 	return TRUE;
; 359  : #endif
; 360  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?realGetNo@@YAHKPAK@Z ENDP				; realGetNo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetHeightFlag@@YAHKPAF@Z
_TEXT	SEGMENT
_GraphicNo$ = 8						; size = 4
_Height$ = 12						; size = 4
?realGetHeightFlag@@YAHKPAF@Z PROC			; realGetHeightFlag, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 318  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { *Height = 0; return FALSE; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _GraphicNo$[ebp]
  00006	3d 80 84 1e 00	 cmp	 eax, 2000000		; 001e8480H
  0000b	73 1a		 jae	 SHORT $LN3@realGetHei

; 319  : 	*Height = adrnbuff[GraphicNo].attr.height;

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	c1 e0 04	 shl	 eax, 4
  00013	66 8b 88 20 00
	00 00		 mov	 cx, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[eax+32]
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _Height$[ebp]
  0001d	66 89 08	 mov	 WORD PTR [eax], cx

; 320  : 
; 321  : 	return TRUE;

  00020	b8 01 00 00 00	 mov	 eax, 1

; 322  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN3@realGetHei:

; 318  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { *Height = 0; return FALSE; }

  00027	8b 45 0c	 mov	 eax, DWORD PTR _Height$[ebp]
  0002a	33 c9		 xor	 ecx, ecx
  0002c	66 89 08	 mov	 WORD PTR [eax], cx
  0002f	33 c0		 xor	 eax, eax

; 322  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?realGetHeightFlag@@YAHKPAF@Z ENDP			; realGetHeightFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetPrioType@@YAHKPAF@Z
_TEXT	SEGMENT
_GraphicNo$ = 8						; size = 4
_prioType$ = 12						; size = 4
?realGetPrioType@@YAHKPAF@Z PROC			; realGetPrioType, COMDAT

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 307  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _GraphicNo$[ebp]
  00006	3d 80 84 1e 00	 cmp	 eax, 2000000		; 001e8480H
  0000b	73 24		 jae	 SHORT $LN3@realGetPri

; 310  : 	}
; 311  : 
; 312  : 	*prioType = (adrnbuff[GraphicNo].attr.hit / 100);

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	c1 e0 04	 shl	 eax, 4
  00013	0f b7 88 1e 00
	00 00		 movzx	 ecx, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[eax+30]
  0001a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0001f	f7 e1		 mul	 ecx
  00021	8b 45 0c	 mov	 eax, DWORD PTR _prioType$[ebp]
  00024	c1 ea 05	 shr	 edx, 5
  00027	66 89 10	 mov	 WORD PTR [eax], dx

; 313  : 	return TRUE;

  0002a	b8 01 00 00 00	 mov	 eax, 1

; 314  : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN3@realGetPri:

; 308  : 		*prioType = 0;

  00031	8b 45 0c	 mov	 eax, DWORD PTR _prioType$[ebp]
  00034	33 c9		 xor	 ecx, ecx
  00036	66 89 08	 mov	 WORD PTR [eax], cx

; 309  : 		return FALSE;

  00039	33 c0		 xor	 eax, eax

; 314  : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?realGetPrioType@@YAHKPAF@Z ENDP			; realGetPrioType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetHitFlag@@YAHKPAF@Z
_TEXT	SEGMENT
_GraphicNo$ = 8						; size = 4
_Hit$ = 12						; size = 4
?realGetHitFlag@@YAHKPAF@Z PROC				; realGetHitFlag, COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 290  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _GraphicNo$[ebp]
  00006	81 f9 80 84 1e
	00		 cmp	 ecx, 2000000		; 001e8480H
  0000c	73 58		 jae	 SHORT $LN3@realGetHit

; 293  : 	}
; 294  : 
; 295  : 	if ((GraphicNo >= 369715 && GraphicNo <= 369847) || GraphicNo == 369941)//强制地表可走

  0000e	81 f9 33 a4 05
	00		 cmp	 ecx, 369715		; 0005a433H
  00014	72 08		 jb	 SHORT $LN7@realGetHit
  00016	81 f9 b7 a4 05
	00		 cmp	 ecx, 369847		; 0005a4b7H
  0001c	76 13		 jbe	 SHORT $LN6@realGetHit
$LN7@realGetHit:
  0001e	81 f9 15 a5 05
	00		 cmp	 ecx, 369941		; 0005a515H
  00024	74 0b		 je	 SHORT $LN6@realGetHit

; 296  : 		*Hit = 1;
; 297  : 	else if (GraphicNo >= 369641 && GraphicNo <= 369654)

  00026	8d 81 17 5c fa
	ff		 lea	 eax, DWORD PTR [ecx-369641]
  0002c	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  0002f	77 0f		 ja	 SHORT $LN8@realGetHit
$LN6@realGetHit:

; 301  : 
; 302  : 	return TRUE;

  00031	8b 45 0c	 mov	 eax, DWORD PTR _Hit$[ebp]
  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	66 89 08	 mov	 WORD PTR [eax], cx
  0003c	8b c1		 mov	 eax, ecx

; 303  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN8@realGetHit:

; 298  : 		*Hit = 1;
; 299  : 	else
; 300  : 		*Hit = (adrnbuff[GraphicNo].attr.hit % 100);

  00040	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00043	33 d2		 xor	 edx, edx
  00045	c1 e0 04	 shl	 eax, 4
  00048	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0004d	0f b7 80 1e 00
	00 00		 movzx	 eax, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[eax+30]
  00054	f7 f1		 div	 ecx

; 301  : 
; 302  : 	return TRUE;

  00056	8b 45 0c	 mov	 eax, DWORD PTR _Hit$[ebp]
  00059	0f b7 ca	 movzx	 ecx, dx
  0005c	66 89 08	 mov	 WORD PTR [eax], cx
  0005f	b8 01 00 00 00	 mov	 eax, 1

; 303  : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN3@realGetHit:

; 291  : 		*Hit = 0;

  00066	8b 45 0c	 mov	 eax, DWORD PTR _Hit$[ebp]
  00069	33 c9		 xor	 ecx, ecx
  0006b	66 89 08	 mov	 WORD PTR [eax], cx

; 292  : 		return FALSE;

  0006e	33 c0		 xor	 eax, eax

; 303  : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?realGetHitFlag@@YAHKPAF@Z ENDP				; realGetHitFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetHitPoints@@YAHKPAF0@Z
_TEXT	SEGMENT
_GraphicNo$ = 8						; size = 4
_HitX$ = 12						; size = 4
_HitY$ = 16						; size = 4
?realGetHitPoints@@YAHKPAF0@Z PROC			; realGetHitPoints, COMDAT

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { *HitX = 0; *HitY = 0; return FALSE; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _GraphicNo$[ebp]
  00006	3d 80 84 1e 00	 cmp	 eax, 2000000		; 001e8480H
  0000b	73 27		 jae	 SHORT $LN3@realGetHit

; 281  : 
; 282  : 	*HitX = adrnbuff[GraphicNo].attr.atari_x;

  0000d	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00010	8b 45 0c	 mov	 eax, DWORD PTR _HitX$[ebp]
  00013	c1 e2 04	 shl	 edx, 4
  00016	0f b6 8a 1c 00
	00 00		 movzx	 ecx, BYTE PTR ?adrnbuff@@3PAUADRNBIN@@A[edx+28]
  0001d	66 89 08	 mov	 WORD PTR [eax], cx

; 283  : 	*HitY = adrnbuff[GraphicNo].attr.atari_y;

  00020	8b 45 10	 mov	 eax, DWORD PTR _HitY$[ebp]
  00023	0f b6 8a 1d 00
	00 00		 movzx	 ecx, BYTE PTR ?adrnbuff@@3PAUADRNBIN@@A[edx+29]
  0002a	66 89 08	 mov	 WORD PTR [eax], cx

; 284  : 
; 285  : 	return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1

; 286  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN3@realGetHit:

; 280  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { *HitX = 0; *HitY = 0; return FALSE; }

  00034	8b 45 0c	 mov	 eax, DWORD PTR _HitX$[ebp]
  00037	33 c9		 xor	 ecx, ecx
  00039	66 89 08	 mov	 WORD PTR [eax], cx
  0003c	8b 45 10	 mov	 eax, DWORD PTR _HitY$[ebp]
  0003f	66 89 08	 mov	 WORD PTR [eax], cx
  00042	33 c0		 xor	 eax, eax

; 286  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?realGetHitPoints@@YAHKPAF0@Z ENDP			; realGetHitPoints
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetWH@@YAHKPAF0@Z
_TEXT	SEGMENT
_GraphicNo$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
?realGetWH@@YAHKPAF0@Z PROC				; realGetWH, COMDAT

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 258  : #ifndef _READ16BITBMP
; 259  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { *w = 0; *h = 0; return FALSE; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _GraphicNo$[ebp]
  00006	3d 80 84 1e 00	 cmp	 eax, 2000000		; 001e8480H
  0000b	73 27		 jae	 SHORT $LN3@realGetWH

; 260  : 	*w = adrnbuff[GraphicNo].width;

  0000d	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00010	8b 45 0c	 mov	 eax, DWORD PTR _w$[ebp]
  00013	c1 e2 04	 shl	 edx, 4
  00016	0f b7 8a 14 00
	00 00		 movzx	 ecx, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edx+20]
  0001d	66 89 08	 mov	 WORD PTR [eax], cx

; 261  : 	*h = adrnbuff[GraphicNo].height;

  00020	8b 45 10	 mov	 eax, DWORD PTR _h$[ebp]
  00023	0f b7 8a 18 00
	00 00		 movzx	 ecx, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edx+24]
  0002a	66 89 08	 mov	 WORD PTR [eax], cx

; 262  : #else
; 263  : 	if (GraphicNo < 0) { *w = 0; *h = 0; return FALSE; }
; 264  : 	if (GraphicNo >= OLD_GRAPHICS_START) {
; 265  : 		if (GraphicNo > MAX_GRAPHICS) { *w = 0; *h = 0; return FALSE; }
; 266  : 		*w = adrntruebuff[GraphicNo - OLD_GRAPHICS_START].width;
; 267  : 		*h = adrntruebuff[GraphicNo - OLD_GRAPHICS_START].height;
; 268  : 	}
; 269  : 	else {
; 270  : 		*w = adrnbuff[GraphicNo].width;
; 271  : 		*h = adrnbuff[GraphicNo].height;
; 272  : 	}
; 273  : #endif
; 274  : 
; 275  : 	return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1

; 276  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN3@realGetWH:

; 258  : #ifndef _READ16BITBMP
; 259  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { *w = 0; *h = 0; return FALSE; }

  00034	8b 45 0c	 mov	 eax, DWORD PTR _w$[ebp]
  00037	33 c9		 xor	 ecx, ecx
  00039	66 89 08	 mov	 WORD PTR [eax], cx
  0003c	8b 45 10	 mov	 eax, DWORD PTR _h$[ebp]
  0003f	66 89 08	 mov	 WORD PTR [eax], cx
  00042	33 c0		 xor	 eax, eax

; 276  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?realGetWH@@YAHKPAF0@Z ENDP				; realGetWH
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetPos@@YAHKPAF0@Z
_TEXT	SEGMENT
_GraphicNo$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?realGetPos@@YAHKPAF0@Z PROC				; realGetPos, COMDAT

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 237  : #ifndef _READ16BITBMP
; 238  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { *x = 0; *y = 0; return FALSE; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _GraphicNo$[ebp]
  00006	3d 80 84 1e 00	 cmp	 eax, 2000000		; 001e8480H
  0000b	73 27		 jae	 SHORT $LN3@realGetPos

; 239  : 	*x = adrnbuff[GraphicNo].xoffset;

  0000d	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00010	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00013	c1 e2 04	 shl	 edx, 4
  00016	0f b7 8a 0c 00
	00 00		 movzx	 ecx, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edx+12]
  0001d	66 89 08	 mov	 WORD PTR [eax], cx

; 240  : 	*y = adrnbuff[GraphicNo].yoffset;

  00020	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00023	0f b7 8a 10 00
	00 00		 movzx	 ecx, WORD PTR ?adrnbuff@@3PAUADRNBIN@@A[edx+16]
  0002a	66 89 08	 mov	 WORD PTR [eax], cx

; 241  : #else
; 242  : 	if (GraphicNo < 0) { *x = 0; *y = 0; return FALSE; }
; 243  : 	if (GraphicNo >= OLD_GRAPHICS_START) {
; 244  : 		if (GraphicNo > MAX_GRAPHICS) { *x = 0; *y = 0; return FALSE; }
; 245  : 		*x = adrntruebuff[GraphicNo - OLD_GRAPHICS_START].xoffset;
; 246  : 		*y = adrntruebuff[GraphicNo - OLD_GRAPHICS_START].yoffset;
; 247  : 	}
; 248  : 	else {
; 249  : 		*x = adrnbuff[GraphicNo].xoffset;
; 250  : 		*y = adrnbuff[GraphicNo].yoffset;
; 251  : 	}
; 252  : #endif
; 253  : 	return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1

; 254  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN3@realGetPos:

; 237  : #ifndef _READ16BITBMP
; 238  : 	if (GraphicNo<0 || GraphicNo >= MAX_GRAPHICS) { *x = 0; *y = 0; return FALSE; }

  00034	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00037	33 c9		 xor	 ecx, ecx
  00039	66 89 08	 mov	 WORD PTR [eax], cx
  0003c	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0003f	66 89 08	 mov	 WORD PTR [eax], cx
  00042	33 c0		 xor	 eax, eax

; 254  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?realGetPos@@YAHKPAF0@Z ENDP				; realGetPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?realGetImage@@YAHHPAPAEPAH1@Z
_TEXT	SEGMENT
_adrdata$ = -80						; size = 80
_len$ = 8						; size = 4
_graphicNo$ = 8						; size = 4
_bmpdata$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
?realGetImage@@YAHHPAPAEPAH1@Z PROC			; realGetImage, COMDAT

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H

; 386  : #ifdef _NEW_COLOR_
; 387  : 	NewColor16Flg = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?NewColor16Flg@@3HA, 0 ; NewColor16Flg
  00010	56		 push	 esi

; 388  : #endif
; 389  : 	ADRNBIN adrdata;
; 390  : 	if (graphicNo<0 || graphicNo >= MAX_GRAPHICS)return FALSE;

  00011	8b 75 08	 mov	 esi, DWORD PTR _graphicNo$[ebp]
  00014	81 fe 7f 84 1e
	00		 cmp	 esi, 1999999		; 001e847fH
  0001a	0f 87 95 00 00
	00		 ja	 $LN3@realGetIma

; 391  : 	adrdata = adrnbuff[graphicNo];

  00020	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00023	c1 e0 04	 shl	 eax, 4
  00026	05 00 00 00 00	 add	 eax, OFFSET ?adrnbuff@@3PAUADRNBIN@@A ; adrnbuff
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	0f 11 45 b0	 movups	 XMMWORD PTR _adrdata$[ebp], xmm0
  00032	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00036	0f 11 45 c0	 movups	 XMMWORD PTR _adrdata$[ebp+16], xmm0
  0003a	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  0003e	0f 11 45 d0	 movups	 XMMWORD PTR _adrdata$[ebp+32], xmm0
  00042	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  00046	0f 11 45 e0	 movups	 XMMWORD PTR _adrdata$[ebp+48], xmm0
  0004a	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [eax+64]

; 392  : #ifdef _PTTERN_SEPARATION_BIN
; 393  : 	if (Realbinfp[graphicNo] == NULL) return FALSE;

  0004e	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?Realbinfp@@3PAPAU_iobuf@@A[esi*4]
  00055	0f 11 45 f0	 movups	 XMMWORD PTR _adrdata$[ebp+64], xmm0
  00059	85 c0		 test	 eax, eax
  0005b	74 58		 je	 SHORT $LN3@realGetIma

; 394  : 	fseek(Realbinfp[graphicNo], adrdata.adder, SEEK_SET);

  0005d	6a 00		 push	 0
  0005f	ff 75 b4	 push	 DWORD PTR _adrdata$[ebp+4]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _fseek

; 395  : 	if (fread(&g_realgetimagebuf, adrdata.size, 1, Realbinfp[graphicNo]) != 1)

  00068	ff 34 b5 00 00
	00 00		 push	 DWORD PTR ?Realbinfp@@3PAPAU_iobuf@@A[esi*4]
  0006f	6a 01		 push	 1
  00071	ff 75 b8	 push	 DWORD PTR _adrdata$[ebp+8]
  00074	68 00 00 00 00	 push	 OFFSET ?g_realgetimagebuf@@3PAEA ; g_realgetimagebuf
  00079	e8 00 00 00 00	 call	 _fread
  0007e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00081	83 f8 01	 cmp	 eax, 1
  00084	75 2f		 jne	 SHORT $LN3@realGetIma

; 396  : 		return FALSE;
; 397  : #else
; 398  : 	fseek(Realbinfp, adrdata.adder, SEEK_SET);
; 399  : 	if (fread(&g_realgetimagebuf, adrdata.size, 1, Realbinfp) != 1)
; 400  : 		return FALSE;
; 401  : #endif
; 402  : 	unsigned int len;
; 403  : 	*bmpdata = g_realgetimagebuf2;

  00086	8b 45 0c	 mov	 eax, DWORD PTR _bmpdata$[ebp]

; 404  : 	if (decoder(g_realgetimagebuf, bmpdata,
; 405  : 		(unsigned int*)width, (unsigned int*)height, &len) == NULL) {

  00089	8d 4d 08	 lea	 ecx, DWORD PTR _len$[ebp]
  0008c	51		 push	 ecx
  0008d	ff 75 14	 push	 DWORD PTR _height$[ebp]
  00090	ff 75 10	 push	 DWORD PTR _width$[ebp]
  00093	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?g_realgetimagebuf2@@3PAEA ; g_realgetimagebuf2
  00099	50		 push	 eax
  0009a	68 00 00 00 00	 push	 OFFSET ?g_realgetimagebuf@@3PAEA ; g_realgetimagebuf
  0009f	e8 00 00 00 00	 call	 ?decoder@@YAPAEPAEPAPAEPAI22@Z ; decoder
  000a4	83 c4 14	 add	 esp, 20			; 00000014H
  000a7	85 c0		 test	 eax, eax
  000a9	74 0a		 je	 SHORT $LN3@realGetIma

; 406  : 		return FALSE;
; 407  : 	}
; 408  : 	return TRUE;

  000ab	b8 01 00 00 00	 mov	 eax, 1
  000b0	5e		 pop	 esi

; 409  : }

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
$LN3@realGetIma:

; 388  : #endif
; 389  : 	ADRNBIN adrdata;
; 390  : 	if (graphicNo<0 || graphicNo >= MAX_GRAPHICS)return FALSE;

  000b5	33 c0		 xor	 eax, eax
  000b7	5e		 pop	 esi

; 409  : }

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
?realGetImage@@YAHHPAPAEPAH1@Z ENDP			; realGetImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?cleanupRealbin@@YAXXZ
_TEXT	SEGMENT
?cleanupRealbin@@YAXXZ PROC				; cleanupRealbin, COMDAT

; 218  : {

  00000	56		 push	 esi

; 219  : #ifdef _PTTERN_SEPARATION_BIN
; 220  : 	for (int i = 0; i < MAX_GRAPHICS; i++) {

  00001	be 00 00 00 00	 mov	 esi, OFFSET ?Realbinfp@@3PAPAU_iobuf@@A ; Realbinfp
$LL4@cleanupRea:

; 221  : 		if (Realbinfp[i] != NULL) {

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 0f		 je	 SHORT $LN2@cleanupRea

; 222  : 			fclose(Realbinfp[i]);

  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _fclose
  00012	83 c4 04	 add	 esp, 4

; 223  : 			Realbinfp[i] = NULL;

  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN2@cleanupRea:

; 219  : #ifdef _PTTERN_SEPARATION_BIN
; 220  : 	for (int i = 0; i < MAX_GRAPHICS; i++) {

  0001b	83 c6 04	 add	 esi, 4
  0001e	81 fe 00 12 7a
	00		 cmp	 esi, OFFSET ?Realbinfp@@3PAPAU_iobuf@@A+8000000
  00024	7c e0		 jl	 SHORT $LL4@cleanupRea

; 224  : 		}
; 225  : 	}
; 226  : #else
; 227  : 	fclose(Realbinfp);
; 228  : #endif
; 229  : 
; 230  : #ifdef _READ16BITBMP
; 231  : 	CloseHandle(hRealtrueFile);
; 232  : #endif
; 233  : }

  00026	5e		 pop	 esi
  00027	c3		 ret	 0
?cleanupRealbin@@YAXXZ ENDP				; cleanupRealbin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\string.h
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?readAutoMapColor@@YAHPAD0@Z
_TEXT	SEGMENT
_rAdrnTime$ = -68					; size = 4
_rAdrnNo$ = -64						; size = 4
_rAutoMapColorVersion$ = -60				; size = 2
_adrnNo$ = -56						; size = 4
_statBuf$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_wFName$ = 8						; size = 4
_addrbinfilename$ = 12					; size = 4
?readAutoMapColor@@YAHPAD0@Z PROC			; readAutoMapColor, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _wFName$[ebp]
  00014	56		 push	 esi
  00015	8b 75 0c	 mov	 esi, DWORD PTR _addrbinfilename$[ebp]
  00018	57		 push	 edi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\string.h

; 520  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_04IFMAMMFM@adrn@
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _strstr
  00024	83 c4 08	 add	 esp, 8
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp

; 121  : 	if (tmpStr == NULL)

  00027	85 c0		 test	 eax, eax
  00029	0f 84 20 01 00
	00		 je	 $LN20@readAutoMa

; 122  : 		return 0;
; 123  : 	if (tmpStr[4] == '.')

  0002f	80 78 04 2e	 cmp	 BYTE PTR [eax+4], 46	; 0000002eH
  00033	75 09		 jne	 SHORT $LN3@readAutoMa

; 124  : 		adrnNo = 0;

  00035	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _adrnNo$[ebp], 0
  0003c	eb 23		 jmp	 SHORT $LN5@readAutoMa
$LN3@readAutoMa:

; 125  : 	else {
; 126  : 		adrnNo = -1;
; 127  : 		sscanf_s(tmpStr, "adrn_%d.bin", &adrnNo);

  0003e	8d 4d c8	 lea	 ecx, DWORD PTR _adrnNo$[ebp]
  00041	c7 45 c8 ff ff
	ff ff		 mov	 DWORD PTR _adrnNo$[ebp], -1
  00048	51		 push	 ecx
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GAINFBKI@adrn_?$CFd?4bin@
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _sscanf_s
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 		if (adrnNo < 0)

  00057	83 7d c8 00	 cmp	 DWORD PTR _adrnNo$[ebp], 0
  0005b	0f 8c ee 00 00
	00		 jl	 $LN20@readAutoMa
$LN5@readAutoMa:

; 129  : 			return 0;
; 130  : 	}
; 131  : 	if ((rfp = fopen(addrbinfilename, "rb")) == NULL)

  00061	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00066	56		 push	 esi
  00067	e8 00 00 00 00	 call	 _fopen
  0006c	8b f0		 mov	 esi, eax
  0006e	83 c4 08	 add	 esp, 8
  00071	85 f6		 test	 esi, esi
  00073	0f 84 d6 00 00
	00		 je	 $LN20@readAutoMa

; 132  : 		return 0;
; 133  : 	rfh = _fileno(rfp);

  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 __fileno

; 134  : 	if (_fstat(rfh, &statBuf) < 0) {

  0007f	8d 4d cc	 lea	 ecx, DWORD PTR _statBuf$[ebp]
  00082	51		 push	 ecx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 __fstat64i32
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	56		 push	 esi
  0008d	85 c0		 test	 eax, eax
  0008f	0f 88 b2 00 00
	00		 js	 $LN21@readAutoMa

; 135  : 		fclose(rfp);
; 136  : 		return 0;
; 137  : 	}
; 138  : 	adrnTime = (UINT)statBuf.st_ctime;

  00095	8b 7d f4	 mov	 edi, DWORD PTR _statBuf$[ebp+40]

; 139  : 	fclose(rfp);

  00098	e8 00 00 00 00	 call	 _fclose

; 140  : 	if ((rfp = fopen(wFName, "rb")) == NULL)

  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  000a2	53		 push	 ebx
  000a3	e8 00 00 00 00	 call	 _fopen
  000a8	8b f0		 mov	 esi, eax
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	85 f6		 test	 esi, esi
  000af	0f 84 9a 00 00
	00		 je	 $LN20@readAutoMa

; 141  : 		return 0;
; 142  : 
; 143  : 	if (fread(&rAutoMapColorVersion, sizeof(rAutoMapColorVersion), 1, rfp) != 1) {

  000b5	56		 push	 esi
  000b6	6a 01		 push	 1
  000b8	8d 45 c4	 lea	 eax, DWORD PTR _rAutoMapColorVersion$[ebp]
  000bb	6a 02		 push	 2
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _fread
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	83 f8 01	 cmp	 eax, 1
  000c9	75 7b		 jne	 SHORT $LN19@readAutoMa

; 144  : 		fclose(rfp);
; 145  : 		return 0;
; 146  : 	}
; 147  : 	if (autoMapColorVersion != rAutoMapColorVersion) {

  000cb	b8 04 00 00 00	 mov	 eax, 4
  000d0	66 3b 45 c4	 cmp	 ax, WORD PTR _rAutoMapColorVersion$[ebp]
  000d4	75 70		 jne	 SHORT $LN19@readAutoMa

; 148  : 		fclose(rfp);
; 149  : 		return 0;
; 150  : 	}
; 151  : 	if (fread(&rAdrnNo, sizeof(rAdrnNo), 1, rfp) != 1) {

  000d6	56		 push	 esi
  000d7	6a 01		 push	 1
  000d9	50		 push	 eax
  000da	8d 45 c0	 lea	 eax, DWORD PTR _rAdrnNo$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _fread
  000e3	83 c4 10	 add	 esp, 16			; 00000010H
  000e6	83 f8 01	 cmp	 eax, 1
  000e9	75 5b		 jne	 SHORT $LN19@readAutoMa

; 152  : 		fclose(rfp);
; 153  : 		return 0;
; 154  : 	}
; 155  : 	if (adrnNo != rAdrnNo) {

  000eb	8b 45 c8	 mov	 eax, DWORD PTR _adrnNo$[ebp]
  000ee	3b 45 c0	 cmp	 eax, DWORD PTR _rAdrnNo$[ebp]
  000f1	75 53		 jne	 SHORT $LN19@readAutoMa

; 156  : 		fclose(rfp);
; 157  : 		return 0;
; 158  : 	}
; 159  : 	if (fread(&rAdrnTime, sizeof(rAdrnTime), 1, rfp) != 1) {

  000f3	56		 push	 esi
  000f4	6a 01		 push	 1
  000f6	8d 45 bc	 lea	 eax, DWORD PTR _rAdrnTime$[ebp]
  000f9	6a 04		 push	 4
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _fread
  00101	83 c4 10	 add	 esp, 16			; 00000010H
  00104	83 f8 01	 cmp	 eax, 1
  00107	75 3d		 jne	 SHORT $LN19@readAutoMa

; 160  : 		fclose(rfp);
; 161  : 		return 0;
; 162  : 	}
; 163  : 	if (adrnTime != rAdrnTime) {

  00109	3b 7d bc	 cmp	 edi, DWORD PTR _rAdrnTime$[ebp]
  0010c	75 38		 jne	 SHORT $LN19@readAutoMa

; 164  : 		fclose(rfp);
; 165  : 		return 0;
; 166  : 	}
; 167  : 	if (fread(&autoMapColorTbl, sizeof(autoMapColorTbl), 1, rfp) != 1) {

  0010e	56		 push	 esi
  0010f	50		 push	 eax
  00110	68 80 84 1e 00	 push	 2000000			; 001e8480H
  00115	68 00 00 00 00	 push	 OFFSET ?autoMapColorTbl@@3PAEA ; autoMapColorTbl
  0011a	e8 00 00 00 00	 call	 _fread
  0011f	83 c4 10	 add	 esp, 16			; 00000010H
  00122	83 f8 01	 cmp	 eax, 1
  00125	75 1f		 jne	 SHORT $LN19@readAutoMa

; 169  : 		return 0;
; 170  : 	}
; 171  : 	fclose(rfp);

  00127	56		 push	 esi
  00128	e8 00 00 00 00	 call	 _fclose
  0012d	83 c4 04	 add	 esp, 4

; 172  : 	return TRUE;

  00130	b8 01 00 00 00	 mov	 eax, 1
  00135	5f		 pop	 edi

; 173  : }

  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx
  00138	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013b	33 cd		 xor	 ecx, ebp
  0013d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
$LN19@readAutoMa:

; 168  : 		fclose(rfp);

  00146	56		 push	 esi
$LN21@readAutoMa:

; 173  : }

  00147	e8 00 00 00 00	 call	 _fclose
  0014c	83 c4 04	 add	 esp, 4
$LN20@readAutoMa:
  0014f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00152	33 c0		 xor	 eax, eax
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	33 cd		 xor	 ecx, ebp
  00158	5b		 pop	 ebx
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c3		 ret	 0
?readAutoMapColor@@YAHPAD0@Z ENDP			; readAutoMapColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\string.h
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\string.h
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?writeAutoMapColor@@YAHPAD0@Z
_TEXT	SEGMENT
_adrnTime$ = -64					; size = 4
_autoMapColorVersion$ = -60				; size = 2
_adrnNo$ = -56						; size = 4
_statBuf$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_wFName$ = 8						; size = 4
_addrbinfilename$ = 12					; size = 4
?writeAutoMapColor@@YAHPAD0@Z PROC			; writeAutoMapColor, COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 0c	 mov	 esi, DWORD PTR _addrbinfilename$[ebp]
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _wFName$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\string.h

; 520  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_04IFMAMMFM@adrn@
  0001d	56		 push	 esi
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp

; 78   : 	unsigned short autoMapColorVersion = 4;

  0001e	c7 45 c4 04 00
	00 00		 mov	 DWORD PTR _autoMapColorVersion$[ebp], 4
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\string.h

; 520  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00025	e8 00 00 00 00	 call	 _strstr
  0002a	83 c4 08	 add	 esp, 8
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp

; 82   : 	if (tmpStr == NULL)

  0002d	85 c0		 test	 eax, eax
  0002f	74 62		 je	 SHORT $LN12@writeAutoM

; 83   : 		return 0;
; 84   : 	if (tmpStr[4] == '.')

  00031	80 78 04 2e	 cmp	 BYTE PTR [eax+4], 46	; 0000002eH
  00035	75 09		 jne	 SHORT $LN3@writeAutoM

; 85   : 		adrnNo = 0;

  00037	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _adrnNo$[ebp], 0
  0003e	eb 1f		 jmp	 SHORT $LN5@writeAutoM
$LN3@writeAutoM:

; 86   : 	else {
; 87   : 		adrnNo = -1;
; 88   : 		sscanf_s(tmpStr, "adrn_%d.bin", &adrnNo);

  00040	8d 4d c8	 lea	 ecx, DWORD PTR _adrnNo$[ebp]
  00043	c7 45 c8 ff ff
	ff ff		 mov	 DWORD PTR _adrnNo$[ebp], -1
  0004a	51		 push	 ecx
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GAINFBKI@adrn_?$CFd?4bin@
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _sscanf_s
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 89   : 		if (adrnNo < 0)

  00059	83 7d c8 00	 cmp	 DWORD PTR _adrnNo$[ebp], 0
  0005d	7c 34		 jl	 SHORT $LN12@writeAutoM
$LN5@writeAutoM:

; 90   : 			return 0;
; 91   : 	}
; 92   : 	if ((rfp = fopen(addrbinfilename, "rb")) == NULL)

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 _fopen
  0006a	8b f0		 mov	 esi, eax
  0006c	83 c4 08	 add	 esp, 8
  0006f	85 f6		 test	 esi, esi
  00071	74 20		 je	 SHORT $LN12@writeAutoM

; 93   : 		return 0;
; 94   : 	rfh = _fileno(rfp);

  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 __fileno

; 95   : 	if (_fstat(rfh, &statBuf) < 0) {

  00079	8d 4d cc	 lea	 ecx, DWORD PTR _statBuf$[ebp]
  0007c	51		 push	 ecx
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 __fstat64i32
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	56		 push	 esi
  00087	85 c0		 test	 eax, eax
  00089	79 1a		 jns	 SHORT $LN7@writeAutoM

; 96   : 		fclose(rfp);

  0008b	e8 00 00 00 00	 call	 _fclose
  00090	83 c4 04	 add	 esp, 4
$LN12@writeAutoM:

; 108  : 	return 1;
; 109  : }

  00093	5f		 pop	 edi
  00094	33 c0		 xor	 eax, eax
  00096	5e		 pop	 esi
  00097	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009a	33 cd		 xor	 ecx, ebp
  0009c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN7@writeAutoM:

; 97   : 		return 0;
; 98   : 	}
; 99   : 	adrnTime = (UINT)statBuf.st_ctime;

  000a5	8b 45 f4	 mov	 eax, DWORD PTR _statBuf$[ebp+40]
  000a8	89 45 c0	 mov	 DWORD PTR _adrnTime$[ebp], eax

; 100  : 	fclose(rfp);

  000ab	e8 00 00 00 00	 call	 _fclose

; 101  : 	if ((wfp = fopen(wFName, "wb")) == NULL)

  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 _fopen
  000bb	8b f0		 mov	 esi, eax
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	85 f6		 test	 esi, esi
  000c2	74 cf		 je	 SHORT $LN12@writeAutoM

; 102  : 		return 0;
; 103  : 	fwrite(&autoMapColorVersion, sizeof(autoMapColorVersion), 1, wfp);

  000c4	56		 push	 esi
  000c5	6a 01		 push	 1
  000c7	8d 45 c4	 lea	 eax, DWORD PTR _autoMapColorVersion$[ebp]
  000ca	6a 02		 push	 2
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _fwrite

; 104  : 	fwrite(&adrnNo, sizeof(adrnNo), 1, wfp);

  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	8d 45 c8	 lea	 eax, DWORD PTR _adrnNo$[ebp]
  000d8	6a 04		 push	 4
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _fwrite

; 105  : 	fwrite(&adrnTime, sizeof(adrnTime), 1, wfp);

  000e0	56		 push	 esi
  000e1	6a 01		 push	 1
  000e3	8d 45 c0	 lea	 eax, DWORD PTR _adrnTime$[ebp]
  000e6	6a 04		 push	 4
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _fwrite

; 106  : 	fwrite(&autoMapColorTbl, sizeof(autoMapColorTbl), 1, wfp);

  000ee	56		 push	 esi
  000ef	6a 01		 push	 1
  000f1	68 80 84 1e 00	 push	 2000000			; 001e8480H
  000f6	68 00 00 00 00	 push	 OFFSET ?autoMapColorTbl@@3PAEA ; autoMapColorTbl
  000fb	e8 00 00 00 00	 call	 _fwrite
  00100	83 c4 40	 add	 esp, 64			; 00000040H

; 107  : 	fclose(wfp);

  00103	56		 push	 esi
  00104	e8 00 00 00 00	 call	 _fclose

; 108  : 	return 1;
; 109  : }

  00109	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010c	83 c4 04	 add	 esp, 4
  0010f	33 cd		 xor	 ecx, ebp
  00111	b8 01 00 00 00	 mov	 eax, 1
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
?writeAutoMapColor@@YAHPAD0@Z ENDP			; writeAutoMapColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?makeAutoMapColor@@YAXXZ
_TEXT	SEGMENT
_chgTbl$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
?makeAutoMapColor@@YAXXZ PROC				; makeAutoMapColor, COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 49   : 	unsigned int i;
; 50   : 	int chgTbl[20] = {
; 51   : 		166,  61,  80, 112,  96, 189, 112,  60, 164, 164,

  00010	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000070000000500000003d000000a6
  00017	0f 11 45 ac	 movups	 XMMWORD PTR _chgTbl$[ebp], xmm0
  0001b	56		 push	 esi
  0001c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000003c00000070000000bd00000060
  00023	33 f6		 xor	 esi, esi
  00025	0f 11 45 bc	 movups	 XMMWORD PTR _chgTbl$[ebp+16], xmm0
  00029	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000000000000006f000000a4000000a4
  00030	0f 11 45 cc	 movups	 XMMWORD PTR _chgTbl$[ebp+32], xmm0
  00034	0f 57 c0	 xorps	 xmm0, xmm0

; 52   : 		111,   0,   0,   0,   0,   0,   0,   0,   0,   0 };

  00037	0f 11 45 dc	 movups	 XMMWORD PTR _chgTbl$[ebp+48], xmm0
  0003b	0f 11 45 ec	 movups	 XMMWORD PTR _chgTbl$[ebp+64], xmm0
  0003f	90		 npad	 1
$LL4@makeAutoMa:

; 54   : 		if (adrnbuff[i].attr.bmpnumber != 0) {

  00040	8b 86 4c 00 00
	00		 mov	 eax, DWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[esi+76]
  00046	85 c0		 test	 eax, eax
  00048	74 4e		 je	 SHORT $LN5@makeAutoMa

; 55   : 			if (100 <= adrnbuff[i].attr.bmpnumber && adrnbuff[i].attr.bmpnumber <= 19999) {

  0004a	8d 48 9c	 lea	 ecx, DWORD PTR [eax-100]
  0004d	81 f9 bb 4d 00
	00		 cmp	 ecx, 19899		; 00004dbbH
  00053	77 1c		 ja	 SHORT $LN7@makeAutoMa

; 56   : 				autoMapColorTbl[adrnbuff[i].attr.bmpnumber] = getAutoMapColor(adrnbuff[i].bitmapno);

  00055	ff b6 00 00 00
	00		 push	 DWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[esi]
  0005b	e8 00 00 00 00	 call	 ?getAutoMapColor@@YAHI@Z ; getAutoMapColor
  00060	8b 8e 4c 00 00
	00		 mov	 ecx, DWORD PTR ?adrnbuff@@3PAUADRNBIN@@A[esi+76]
  00066	83 c4 04	 add	 esp, 4
  00069	88 81 00 00 00
	00		 mov	 BYTE PTR ?autoMapColorTbl@@3PAEA[ecx], al

; 57   : 			}

  0006f	eb 2e		 jmp	 SHORT $LN2@makeAutoMa
$LN7@makeAutoMa:

; 58   : 			else if (60 <= adrnbuff[i].attr.bmpnumber && adrnbuff[i].attr.bmpnumber <= 79) {

  00071	8d 48 c4	 lea	 ecx, DWORD PTR [eax-60]
  00074	83 f9 13	 cmp	 ecx, 19			; 00000013H
  00077	77 0f		 ja	 SHORT $LN9@makeAutoMa

; 59   : 				autoMapColorTbl[adrnbuff[i].attr.bmpnumber] = (unsigned char)chgTbl[adrnbuff[i].attr.bmpnumber - 60];

  00079	8a 8c 85 bc fe
	ff ff		 mov	 cl, BYTE PTR _chgTbl$[ebp+eax*4-240]
  00080	88 88 00 00 00
	00		 mov	 BYTE PTR ?autoMapColorTbl@@3PAEA[eax], cl

; 60   : 			}

  00086	eb 17		 jmp	 SHORT $LN2@makeAutoMa
$LN9@makeAutoMa:

; 61   : 			else {
; 62   : 				autoMapColorTbl[adrnbuff[i].attr.bmpnumber] = 0;

  00088	3d 80 84 1e 00	 cmp	 eax, 2000000		; 001e8480H
  0008d	73 2a		 jae	 SHORT $LN12@makeAutoMa
  0008f	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?autoMapColorTbl@@3PAEA[eax], 0

; 63   : 			}
; 64   : 		}

  00096	eb 07		 jmp	 SHORT $LN2@makeAutoMa
$LN5@makeAutoMa:

; 65   : 		else {
; 66   : 			autoMapColorTbl[adrnbuff[i].attr.bmpnumber] = 0;

  00098	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?autoMapColorTbl@@3PAEA, 0
$LN2@makeAutoMa:

; 53   : 	for (i = 0; i < MAX_GRAPHICS; i++) {

  0009f	83 c6 50	 add	 esi, 80			; 00000050H
  000a2	81 fe 00 68 89
	09		 cmp	 esi, 160000000		; 09896800H
  000a8	72 96		 jb	 SHORT $LL4@makeAutoMa

; 67   : 		}
; 68   : 	}
; 69   : }

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	33 cd		 xor	 ecx, ebp
  000af	5e		 pop	 esi
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$LN12@makeAutoMa:

; 61   : 			else {
; 62   : 				autoMapColorTbl[adrnbuff[i].attr.bmpnumber] = 0;

  000b9	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN21@makeAutoMa:
  000be	cc		 int	 3
?makeAutoMapColor@@YAXXZ ENDP				; makeAutoMapColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\loadrealbin.cpp
;	COMDAT ?initAutoMapColor@@YAXPAD@Z
_TEXT	SEGMENT
_addrbinfilename$ = 8					; size = 4
?initAutoMapColor@@YAXPAD@Z PROC			; initAutoMapColor, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	char *filename = "data\\auto.dat";
; 41   : 	if (readAutoMapColor(filename, addrbinfilename) == 0) {

  00003	ff 75 08	 push	 DWORD PTR _addrbinfilename$[ebp]
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PLLALPBE@data?2auto?4dat@
  0000b	e8 00 00 00 00	 call	 ?readAutoMapColor@@YAHPAD0@Z ; readAutoMapColor
  00010	83 c4 08	 add	 esp, 8
  00013	85 c0		 test	 eax, eax
  00015	75 15		 jne	 SHORT $LN2@initAutoMa

; 42   : 		makeAutoMapColor();

  00017	e8 00 00 00 00	 call	 ?makeAutoMapColor@@YAXXZ ; makeAutoMapColor

; 43   : 		writeAutoMapColor(filename, addrbinfilename);

  0001c	ff 75 08	 push	 DWORD PTR _addrbinfilename$[ebp]
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PLLALPBE@data?2auto?4dat@
  00024	e8 00 00 00 00	 call	 ?writeAutoMapColor@@YAHPAD0@Z ; writeAutoMapColor
  00029	83 c4 08	 add	 esp, 8
$LN2@initAutoMa:

; 44   : 	}
; 45   : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?initAutoMapColor@@YAXPAD@Z ENDP			; initAutoMapColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sscanf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf_s PROC						; COMDAT

; 2286 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2184 :         return __stdio_common_vsscanf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2287 :             int _Result;
; 2288 :             va_list _ArgList;
; 2289 :             __crt_va_start(_ArgList, _Format);
; 2290 : 
; 2291 :             _Result = vsscanf_s(_Buffer, _Format, _ArgList);
; 2292 : 
; 2293 :             __crt_va_end(_ArgList);
; 2294 :             return _Result;
; 2295 :         }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_sscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00005	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
END
