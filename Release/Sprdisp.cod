; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?iProcessAniNum@@3HA				; iProcessAniNum
PUBLIC	?pSortTileTail@@3PAUDISP_SORT@@A		; pSortTileTail
PUBLIC	?AlphaBytes@@3PAEA				; AlphaBytes
PUBLIC	?AlphaColorBytes@@3PAEA				; AlphaColorBytes
PUBLIC	?DispBuffer@@3UDISP_BUFFER@@A			; DispBuffer
PUBLIC	?pRealBinBits@@3PADA				; pRealBinBits
PUBLIC	?RealBinWidth@@3HA				; RealBinWidth
PUBLIC	?RealBinHeight@@3HA				; RealBinHeight
PUBLIC	?SurfaceBusyFlag@@3HA				; SurfaceBusyFlag
_BSS	SEGMENT
?iProcessAniNum@@3HA DD 01H DUP (?)			; iProcessAniNum
?pSortTileTail@@3PAUDISP_SORT@@A DD 01H DUP (?)		; pSortTileTail
?AlphaBytes@@3PAEA DB 0c01H DUP (?)			; AlphaBytes
	ALIGN	4

?AlphaColorBytes@@3PAEA DB 03001H DUP (?)		; AlphaColorBytes
	ALIGN	4

?DispBuffer@@3UDISP_BUFFER@@A DB 01c022H DUP (?)	; DispBuffer
	ALIGN	4

?pRealBinBits@@3PADA DD 01H DUP (?)			; pRealBinBits
?RealBinWidth@@3HA DD 01H DUP (?)			; RealBinWidth
?RealBinHeight@@3HA DD 01H DUP (?)			; RealBinHeight
?SurfaceBusyFlag@@3HA DD 01H DUP (?)			; SurfaceBusyFlag
_BSS	ENDS
PUBLIC	?SortDispBuffer@@YAXXZ				; SortDispBuffer
PUBLIC	?PutBmp@@YAXXZ					; PutBmp
PUBLIC	?StockDispBuffer@@YAHHHEHH@Z			; StockDispBuffer
PUBLIC	?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z		; StockDispBuffer??êÈöÇ
PUBLIC	?StockDispBuffer2@@YAHHHEHH@Z			; StockDispBuffer2
PUBLIC	?StockTaskDispBuffer@@YAXXZ			; StockTaskDispBuffer
PUBLIC	?StockTaskDispBuffer2@@YAXHH@Z			; StockTaskDispBuffer2
PUBLIC	?StockBoxDispBuffer@@YAXHHHHEHH@Z		; StockBoxDispBuffer
PUBLIC	?DrawAlpha32@@YAXPAKKKK0KKKKK@Z			; DrawAlpha32
PUBLIC	?ablend_565@@YAXPAEI0III0IIIII@Z		; ablend_565
PUBLIC	??ö¢??ô©õ»@@YAHPAUaction@@PAF1@Z		; ?ö¢??ô©õ»
PUBLIC	?SortComp@@YAHPAUDISP_SORT@@0@Z			; SortComp
PUBLIC	?GetBoxDispBuffer@@YAXPAUDISP_INFO@@H@Z		; GetBoxDispBuffer
PUBLIC	?DrawAni@@YAXXZ					; DrawAni
PUBLIC	?DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z ; DrawGrayA
PUBLIC	?DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z ; DrawStaturated
PUBLIC	?DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z ; DrawGray
PUBLIC	?PutTileBmp@@YAHXZ				; PutTileBmp
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
EXTRN	__imp__wsprintfA:PROC
EXTRN	_qsort:PROC
EXTRN	?LoadBmp@@YAHH@Z:PROC				; LoadBmp
EXTRN	?ClearBackSurface@@YAXXZ:PROC			; ClearBackSurface
EXTRN	?DrawSurfaceFast@@YAJFFPAUIDirectDrawSurface@@@Z:PROC ; DrawSurfaceFast
EXTRN	?DrawBox@@YAXPAUtagRECT@@EH@Z:PROC		; DrawBox
EXTRN	?PutText@@YAXD@Z:PROC				; PutText
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?realGetPos@@YAHKPAF0@Z:PROC			; realGetPos
EXTRN	?realGetWH@@YAHKPAF0@Z:PROC			; realGetWH
EXTRN	?realGetNo@@YAHKPAK@Z:PROC			; realGetNo
EXTRN	?drawAutoMap@@YAXHH@Z:PROC			; drawAutoMap
EXTRN	?drawMapEffect@@YAXXZ:PROC			; drawMapEffect
EXTRN	?DrawBattleMap@@YAXXZ:PROC			; DrawBattleMap
EXTRN	?SkyIslandDraw@@YAXH@Z:PROC			; SkyIslandDraw
EXTRN	?SkyIslandProc@@YAXXZ:PROC			; SkyIslandProc
EXTRN	?SkyIslandDraw2@@YAXH@Z:PROC			; SkyIslandDraw2
EXTRN	?SkyIslandDraw2@@YAXH@Z:PROC			; SkyIslandDraw2
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	?lpBattleSurface@@3PAUIDirectDrawSurface@@A:DWORD ; lpBattleSurface
EXTRN	?SurfaceSizeX@@3HA:DWORD			; SurfaceSizeX
EXTRN	?SurfaceSizeY@@3HA:DWORD			; SurfaceSizeY
EXTRN	?SurfaceDate@@3IA:DWORD				; SurfaceDate
EXTRN	?SpriteInfo@@3PAUSPRITE_INFO@@A:BYTE		; SpriteInfo
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?BackBufferDrawType@@3HA:DWORD			; BackBufferDrawType
EXTRN	?DEF_APPSIZEX@@3HA:DWORD			; DEF_APPSIZEX
EXTRN	?DEF_APPSIZEY@@3HA:DWORD			; DEF_APPSIZEY
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?pActTop@@3PAUaction@@A:DWORD			; pActTop
EXTRN	?pActBtm@@3PAUaction@@A:DWORD			; pActBtm
EXTRN	?SpriteData@@3PAUSPRITEDATA@@A:BYTE		; SpriteData
EXTRN	?nowFloor@@3HA:DWORD				; nowFloor
EXTRN	?eventEnemyFlag@@3FA:WORD			; eventEnemyFlag
EXTRN	?vsLookFlag@@3FA:WORD				; vsLookFlag
EXTRN	?fastDrawTile@@3FB:WORD				; fastDrawTile
EXTRN	?fastDrawTileFlag@@3FA:WORD			; fastDrawTileFlag
EXTRN	?amountXFastDraw@@3HA:DWORD			; amountXFastDraw
EXTRN	?amountYFastDraw@@3HA:DWORD			; amountYFastDraw
EXTRN	?displayBpp@@3HA:DWORD				; displayBpp
EXTRN	?pActMenuWnd2@@3PAUaction@@A:DWORD		; pActMenuWnd2
EXTRN	?MenuToggleFlag@@3IA:DWORD			; MenuToggleFlag
EXTRN	?sky_island_no@@3KA:DWORD			; sky_island_no
EXTRN	?g_showBmpNo@@3HA:DWORD				; g_showBmpNo
EXTRN	?g_showBmpNo@@3HA:DWORD				; g_showBmpNo
EXTRN	?EncountFlag@@3HA:DWORD				; EncountFlag
EXTRN	?DuelFlag@@3HA:DWORD				; DuelFlag
EXTRN	?NoHelpFlag@@3HA:DWORD				; NoHelpFlag
EXTRN	?gBitRShift@@3HA:DWORD				; gBitRShift
EXTRN	___security_cookie:DWORD
;	COMDAT ?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A
_BSS	SEGMENT
?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A DB 06cH DUP (?) ; `DrawGray'::`2'::ddsdSource
_BSS	ENDS
;	COMDAT ?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A
_BSS	SEGMENT
?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A DB 06cH DUP (?) ; `DrawGray'::`2'::ddsdOverlayer
_BSS	ENDS
;	COMDAT ?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A
_BSS	SEGMENT
?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A DB 06cH DUP (?) ; `DrawGrayA'::`2'::ddsdSource
_BSS	ENDS
;	COMDAT ?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A
_BSS	SEGMENT
?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A DB 06cH DUP (?) ; `DrawGrayA'::`2'::ddsdOverlayer
_BSS	ENDS
;	COMDAT ?ddsdSource@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A
_BSS	SEGMENT
?ddsdSource@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A DB 06cH DUP (?) ; `DrawStaturated'::`2'::ddsdSource
_BSS	ENDS
;	COMDAT ?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A
_BSS	SEGMENT
?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A DB 06cH DUP (?) ; `DrawStaturated'::`2'::ddsdOverlayer
_BSS	ENDS
;	COMDAT ?SIXONES@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA
_DATA	SEGMENT
?SIXONES@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA DQ 003f003f003f003fH ; `ablend_565'::`2'::SIXONES
_DATA	ENDS
;	COMDAT ?FIVETWELVE@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA
_DATA	SEGMENT
?FIVETWELVE@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA DQ 0200020002000200H ; `ablend_565'::`2'::FIVETWELVE
_DATA	ENDS
;	COMDAT ?SIXTEEN@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA
_DATA	SEGMENT
?SIXTEEN@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA DQ 0010001000100010H ; `ablend_565'::`2'::SIXTEEN
_DATA	ENDS
;	COMDAT ?MASKR@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA
_DATA	SEGMENT
?MASKR@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA DQ f800f800f800f800H ; `ablend_565'::`2'::MASKR
_DATA	ENDS
;	COMDAT ?MASKSHIFTG@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA
_DATA	SEGMENT
?MASKSHIFTG@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA DQ 03f003f003f003f0H ; `ablend_565'::`2'::MASKSHIFTG
_DATA	ENDS
;	COMDAT ?MASKG@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA
_DATA	SEGMENT
?MASKG@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA DQ 07e007e007e007e0H ; `ablend_565'::`2'::MASKG
_DATA	ENDS
;	COMDAT ?MASKB@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA
_DATA	SEGMENT
?MASKB@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA DQ 001f001f001f001fH ; `ablend_565'::`2'::MASKB
_DATA	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?PutBmp@@YAXXZ$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?PutBmp@@YAXXZ$0
__unwindtable$?PutBmp@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?PutBmp@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?PutBmp@@YAXXZ$2
__ehfuncinfo$?PutBmp@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PutBmp@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?PutBmp@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?PutTileBmp@@YAHXZ
_TEXT	SEGMENT
_retainbackbuffer$1$ = -28				; size = 4
_i$1$ = -24						; size = 4
_src$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?PutTileBmp@@YAHXZ PROC					; PutTileBmp, COMDAT

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 95   : 	DISP_INFO 	*pDispInfo;
; 96   : 	int i;
; 97   : 	int bmpNo;
; 98   : 	RECT src;
; 99   : 	int sx, sy;
; 100  : 	BOOL retainbackbuffer = FALSE;
; 101  : 	pSortTileTail = DispBuffer.DispSort;
; 102  : 	SURFACE_INFO *lpSurfaceInfo;
; 103  : #ifdef _READ16BITBMP
; 104  : 	SURFACE_INFO *lpSurfaceInfoSys;
; 105  : #endif
; 106  : 	if ((ProcNo == PROC_GAME/* && SubProcNo==3*/) || ProcNo == PROC_BATTLE) {

  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ProcNo@@3IA ; ProcNo
  00017	33 d2		 xor	 edx, edx
  00019	b9 00 80 01 00	 mov	 ecx, OFFSET ?DispBuffer@@3UDISP_BUFFER@@A+98304
  0001e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pSortTileTail@@3PAUDISP_SORT@@A, ecx ; pSortTileTail
  00024	83 fe 09	 cmp	 esi, 9
  00027	74 09		 je	 SHORT $LN9@PutTileBmp
  00029	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0002c	0f 85 62 02 00
	00		 jne	 $LN45@PutTileBmp
$LN9@PutTileBmp:

; 107  : #ifdef _SURFACE_ANIM
; 108  : 		iProcessAniNum = 0;

  00032	89 15 00 00 00
	00		 mov	 DWORD PTR ?iProcessAniNum@@3HA, edx ; iProcessAniNum

; 109  : #endif
; 110  : 		if (fastDrawTile && (fastDrawTileFlag == 0 || amountXFastDraw || amountYFastDraw)) {

  00038	66 39 15 00 00
	00 00		 cmp	 WORD PTR ?fastDrawTile@@3FB, dx ; fastDrawTile
  0003f	0f 84 4a 02 00
	00		 je	 $LN31@PutTileBmp
  00045	66 39 15 00 00
	00 00		 cmp	 WORD PTR ?fastDrawTileFlag@@3FA, dx ; fastDrawTileFlag
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?amountXFastDraw@@3HA ; amountXFastDraw
  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?amountYFastDraw@@3HA ; amountYFastDraw
  00057	74 0c		 je	 SHORT $LN11@PutTileBmp
  00059	85 d2		 test	 edx, edx
  0005b	75 08		 jne	 SHORT $LN11@PutTileBmp
  0005d	85 c0		 test	 eax, eax
  0005f	0f 84 28 02 00
	00		 je	 $LN49@PutTileBmp
$LN11@PutTileBmp:

; 111  : 			retainbackbuffer = TRUE;

  00065	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _retainbackbuffer$1$[ebp], 1
  0006c	53		 push	 ebx
  0006d	57		 push	 edi

; 112  : 			// ?????????????????????????????
; 113  : 			if (ProcNo != PROC_BATTLE) {

  0006e	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00071	0f 84 9a 00 00
	00		 je	 $LN20@PutTileBmp

; 114  : 				src.top = 0;
; 115  : 				src.left = 0;
; 116  : 				src.right = DEF_APPSIZEX;

  00077	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX

; 117  : 				src.bottom = DEF_APPSIZEY;
; 118  : 				sx = 0;

  0007d	33 db		 xor	 ebx, ebx
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY

; 119  : 				sy = 0;

  00085	33 ff		 xor	 edi, edi

; 120  : 				//???????????????
; 121  : 				if (ResoMode == 1) {

  00087	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  0008e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _src$[ebp+4], 0
  00095	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _src$[ebp], 0
  0009c	89 75 f4	 mov	 DWORD PTR _src$[ebp+8], esi
  0009f	89 4d f8	 mov	 DWORD PTR _src$[ebp+12], ecx
  000a2	75 0a		 jne	 SHORT $LN13@PutTileBmp

; 122  : 					//src.right /= 2;
; 123  : 					//src.bottom /= 2;
; 124  : 					src.right >>= 1;

  000a4	d1 fe		 sar	 esi, 1

; 125  : 					src.bottom >>= 1;

  000a6	d1 f9		 sar	 ecx, 1
  000a8	89 75 f4	 mov	 DWORD PTR _src$[ebp+8], esi
  000ab	89 4d f8	 mov	 DWORD PTR _src$[ebp+12], ecx
$LN13@PutTileBmp:

; 126  : 				}
; 127  : 				if (amountXFastDraw > 0) {

  000ae	85 d2		 test	 edx, edx
  000b0	7e 09		 jle	 SHORT $LN50@PutTileBmp

; 128  : 					src.right -= amountXFastDraw;

  000b2	2b f2		 sub	 esi, edx

; 129  : 					sx += amountXFastDraw;

  000b4	8b da		 mov	 ebx, edx
  000b6	89 75 f4	 mov	 DWORD PTR _src$[ebp+8], esi

; 130  : 				}

  000b9	eb 07		 jmp	 SHORT $LN16@PutTileBmp
$LN50@PutTileBmp:

; 131  : 				else if (amountXFastDraw < 0) {

  000bb	79 05		 jns	 SHORT $LN16@PutTileBmp

; 132  : 					src.left -= amountXFastDraw;

  000bd	f7 da		 neg	 edx
  000bf	89 55 ec	 mov	 DWORD PTR _src$[ebp], edx
$LN16@PutTileBmp:

; 133  : 				}
; 134  : 				if (amountYFastDraw > 0) {

  000c2	85 c0		 test	 eax, eax
  000c4	7e 09		 jle	 SHORT $LN51@PutTileBmp

; 135  : 					src.bottom -= amountYFastDraw;

  000c6	2b c8		 sub	 ecx, eax

; 136  : 					sy += amountYFastDraw;

  000c8	8b f8		 mov	 edi, eax
  000ca	89 4d f8	 mov	 DWORD PTR _src$[ebp+12], ecx

; 137  : 				}

  000cd	eb 07		 jmp	 SHORT $LN19@PutTileBmp
$LN51@PutTileBmp:

; 138  : 				else if (amountYFastDraw < 0) {

  000cf	79 05		 jns	 SHORT $LN19@PutTileBmp

; 139  : 					src.top -= amountYFastDraw;

  000d1	f7 d8		 neg	 eax
  000d3	89 45 f0	 mov	 DWORD PTR _src$[ebp+4], eax
$LN19@PutTileBmp:

; 140  : 				}
; 141  : 				if (lpDraw->lpBACKBUFFER->BltFast(sx, sy, lpBattleSurface, &src, DDBLTFAST_WAIT) == DDERR_SURFACEBUSY)

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  000db	8d 55 ec	 lea	 edx, DWORD PTR _src$[ebp]
  000de	6a 10		 push	 16			; 00000010H
  000e0	52		 push	 edx
  000e1	ff 35 00 00 00
	00		 push	 DWORD PTR ?lpBattleSurface@@3PAUIDirectDrawSurface@@A ; lpBattleSurface
  000e7	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000ea	57		 push	 edi
  000eb	53		 push	 ebx
  000ec	50		 push	 eax
  000ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ef	ff 51 1c	 call	 DWORD PTR [ecx+28]
  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SurfaceBusyFlag@@3HA ; SurfaceBusyFlag
  000f8	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  000fd	b8 01 00 00 00	 mov	 eax, 1
  00102	0f 44 c8	 cmove	 ecx, eax
  00105	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, ecx ; SurfaceBusyFlag
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pSortTileTail@@3PAUDISP_SORT@@A ; pSortTileTail
$LN20@PutTileBmp:

; 142  : 					SurfaceBusyFlag = TRUE;
; 143  : #ifdef _READ16BITBMP
; 144  : 				if (g_bUseAlpha) {
; 145  : 					if (lpDraw->lpBACKBUFFERSYS->BltFast(sx, sy, lpBattleSurfaceSys, &src, DDBLTFAST_WAIT) == DDERR_SURFACEBUSY)
; 146  : 						SurfaceBusyFlag = TRUE;
; 147  : 				}
; 148  : #endif
; 149  : 			}
; 150  : 			// ???????????
; 151  : 			for (i = 0; i<DispBuffer.DispCnt; i++, pSortTileTail++) {

  00111	33 db		 xor	 ebx, ebx
  00113	33 c0		 xor	 eax, eax
  00115	89 5d e8	 mov	 DWORD PTR _i$1$[ebp], ebx
  00118	66 3b 05 00 c0
	01 00		 cmp	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0011f	0f 8d 27 01 00
	00		 jge	 $LN47@PutTileBmp
$LL4@PutTileBmp:

; 152  : #ifdef _SURFACE_ANIM
; 153  : 				if (pSortTileTail->dispPrio == 0) continue;

  00125	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00128	84 c0		 test	 al, al
  0012a	0f 84 f1 00 00
	00		 je	 $LN2@PutTileBmp

; 154  : #endif
; 155  : 				// å ä¸ºææåºè¿,æä»¥å¦æç®åçæ¾ç¤ºé¡ºåºæ¯å°è¡¨å¤§çè¯,è¡¨ç¤ºå°è¡¨å·²ç»å¤çå®äº
; 156  : 				if (pSortTileTail->dispPrio > DISP_PRIO_TILE) {

  00130	3c 01		 cmp	 al, 1
  00132	0f 87 07 01 00
	00		 ja	 $LN38@PutTileBmp

; 160  : #endif
; 161  : 					break;
; 162  : 				}
; 163  : 				// î¸î????î¼????????????
; 164  : 				// åå¾ç¬¬ä¸ä¸ªè¦å¤ççå¾ç DispInfo èµæ
; 165  : 				pDispInfo = DispBuffer.DispInfo + pSortTileTail->no;

  00138	0f bf 01	 movsx	 eax, WORD PTR [ecx]
  0013b	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]

; 167  : 
; 168  : 										  // ?????
; 169  : 										  // ???îî?????îî¸î?
; 170  : 				if (pDispInfo->pAct != NULL) {

  0013e	8b 04 fd 0c 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+12]
  00145	85 c0		 test	 eax, eax
  00147	74 0d		 je	 SHORT $LN24@PutTileBmp

; 171  : 					if (pDispInfo->pAct->atr & ACT_ATR_HIDE2) continue;

  00149	f6 80 a4 00 00
	00 20		 test	 BYTE PTR [eax+164], 32	; 00000020H
  00150	0f 85 cb 00 00
	00		 jne	 $LN2@PutTileBmp
$LN24@PutTileBmp:

; 166  : 				bmpNo = pDispInfo->bmpNo; // ???î±?

  00156	8b 34 fd 08 00
	00 00		 mov	 esi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+8]

; 172  : 				}
; 173  : 				// ?????????????????????????
; 174  : 				// ?????????
; 175  : 				if (LoadBmp(bmpNo) == FALSE) continue;

  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp
  00163	83 c4 04	 add	 esp, 4
  00166	85 c0		 test	 eax, eax
  00168	0f 84 ad 00 00
	00		 je	 $LN48@PutTileBmp

; 176  : #ifdef _READ16BITBMP
; 177  : 				if (g_bUseAlpha) {
; 178  : 					for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo, lpSurfaceInfoSys = SpriteInfo[bmpNo].lpSurfaceInfoSys
; 179  : 						; lpSurfaceInfo != NULL, lpSurfaceInfoSys != NULL
; 180  : 						; lpSurfaceInfo = lpSurfaceInfo->pNext, lpSurfaceInfoSys = lpSurfaceInfoSys->pNext) {
; 181  : 						if (ResoMode == 1) {
; 182  : 							if (DrawSurfaceFast((pDispInfo->x >> 1) + lpSurfaceInfo->offsetX,
; 183  : 								(pDispInfo->y >> 1) + lpSurfaceInfo->offsetY,
; 184  : 								lpSurfaceInfo->lpSurface, lpSurfaceInfoSys->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;
; 185  : 						}
; 186  : 						else {
; 187  : 							if (DrawSurfaceFast(pDispInfo->x + lpSurfaceInfo->offsetX,
; 188  : 								pDispInfo->y + lpSurfaceInfo->offsetY,
; 189  : 								lpSurfaceInfo->lpSurface, lpSurfaceInfoSys->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;
; 190  : 						}
; 191  : 						lpSurfaceInfo->date = SurfaceDate;
; 192  : 					}
; 193  : 				}
; 194  : 				else
; 195  : #endif
; 196  : 				{
; 197  : 					for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo; lpSurfaceInfo != NULL; lpSurfaceInfo = lpSurfaceInfo->pNext) {

  0016e	8d 34 76	 lea	 esi, DWORD PTR [esi+esi*2]
  00171	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[esi*4]
  00178	85 f6		 test	 esi, esi
  0017a	0f 84 9b 00 00
	00		 je	 $LN48@PutTileBmp
  00180	bb 01 00 00 00	 mov	 ebx, 1
$LL7@PutTileBmp:

; 198  : 						if (ResoMode == 1) {

  00185	8b 06		 mov	 eax, DWORD PTR [esi]
  00187	50		 push	 eax
  00188	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?ResoMode@@3HA, ebx ; ResoMode
  0018e	75 39		 jne	 SHORT $LN26@PutTileBmp

; 199  : 							if (DrawSurfaceFast((pDispInfo->x >> 1) + lpSurfaceInfo->offsetX,
; 200  : 								(pDispInfo->y >> 1) + lpSurfaceInfo->offsetY,
; 201  : 								lpSurfaceInfo->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;

  00190	8b 04 fd 04 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+4]
  00197	d1 f8		 sar	 eax, 1
  00199	66 03 46 16	 add	 ax, WORD PTR [esi+22]
  0019d	0f b7 c0	 movzx	 eax, ax
  001a0	50		 push	 eax
  001a1	8b 04 fd 00 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8]
  001a8	d1 f8		 sar	 eax, 1
  001aa	66 03 46 14	 add	 ax, WORD PTR [esi+20]
  001ae	0f b7 c0	 movzx	 eax, ax
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ?DrawSurfaceFast@@YAJFFPAUIDirectDrawSurface@@@Z ; DrawSurfaceFast
  001b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ba	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  001bf	75 44		 jne	 SHORT $LN29@PutTileBmp
  001c1	89 1d 00 00 00
	00		 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, ebx ; SurfaceBusyFlag

; 202  : 						}

  001c7	eb 3c		 jmp	 SHORT $LN29@PutTileBmp
$LN26@PutTileBmp:

; 203  : 						else {
; 204  : #ifdef _CACHE_SURFACE_
; 205  : 							DrawSurfaceFromPalette(lpSurfaceInfo);
; 206  : #endif
; 207  : 							if (DrawSurfaceFast(pDispInfo->x + lpSurfaceInfo->offsetX,
; 208  : 								pDispInfo->y + lpSurfaceInfo->offsetY,
; 209  : 								lpSurfaceInfo->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;

  001c9	0f b7 46 16	 movzx	 eax, WORD PTR [esi+22]
  001cd	66 03 04 fd 04
	00 00 00	 add	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+4]
  001d5	0f b7 c0	 movzx	 eax, ax
  001d8	50		 push	 eax
  001d9	0f b7 04 fd 00
	00 00 00	 movzx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8]
  001e1	66 03 46 14	 add	 ax, WORD PTR [esi+20]
  001e5	0f b7 c0	 movzx	 eax, ax
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 ?DrawSurfaceFast@@YAJFFPAUIDirectDrawSurface@@@Z ; DrawSurfaceFast
  001ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SurfaceBusyFlag@@3HA ; SurfaceBusyFlag
  001f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f7	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  001fc	0f 44 cb	 cmove	 ecx, ebx
  001ff	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, ecx ; SurfaceBusyFlag
$LN29@PutTileBmp:

; 210  : 						}
; 211  : 						lpSurfaceInfo->date = SurfaceDate;

  00205	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SurfaceDate@@3IA ; SurfaceDate
  0020a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0020d	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00210	85 f6		 test	 esi, esi
  00212	0f 85 6d ff ff
	ff		 jne	 $LL7@PutTileBmp
  00218	8b 5d e8	 mov	 ebx, DWORD PTR _i$1$[ebp]
$LN48@PutTileBmp:

; 142  : 					SurfaceBusyFlag = TRUE;
; 143  : #ifdef _READ16BITBMP
; 144  : 				if (g_bUseAlpha) {
; 145  : 					if (lpDraw->lpBACKBUFFERSYS->BltFast(sx, sy, lpBattleSurfaceSys, &src, DDBLTFAST_WAIT) == DDERR_SURFACEBUSY)
; 146  : 						SurfaceBusyFlag = TRUE;
; 147  : 				}
; 148  : #endif
; 149  : 			}
; 150  : 			// ???????????
; 151  : 			for (i = 0; i<DispBuffer.DispCnt; i++, pSortTileTail++) {

  0021b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pSortTileTail@@3PAUDISP_SORT@@A ; pSortTileTail
$LN2@PutTileBmp:
  00221	0f bf 05 00 c0
	01 00		 movsx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00228	43		 inc	 ebx
  00229	83 c1 04	 add	 ecx, 4
  0022c	89 5d e8	 mov	 DWORD PTR _i$1$[ebp], ebx
  0022f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pSortTileTail@@3PAUDISP_SORT@@A, ecx ; pSortTileTail
  00235	3b d8		 cmp	 ebx, eax
  00237	0f 8c e8 fe ff
	ff		 jl	 $LL4@PutTileBmp
  0023d	eb 0d		 jmp	 SHORT $LN47@PutTileBmp
$LN38@PutTileBmp:

; 157  : 					DispBuffer.DispCnt -= i;

  0023f	66 29 1d 00 c0
	01 00		 sub	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, bx

; 158  : #ifdef _SURFACE_ANIM
; 159  : 					iProcessAniNum = i;

  00246	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iProcessAniNum@@3HA, ebx ; iProcessAniNum
$LN47@PutTileBmp:

; 212  : 					}
; 213  : 				}
; 214  : 			}
; 215  : 		}
; 216  : 	}
; 217  : 	if (retainbackbuffer) {
; 218  : 		if (lpBattleSurface->BltFast(0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT) == DDERR_SURFACEBUSY)	SurfaceBusyFlag = TRUE;

  0024c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00251	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpBattleSurface@@3PAUIDirectDrawSurface@@A ; lpBattleSurface
  00257	6a 10		 push	 16			; 00000010H
  00259	6a 00		 push	 0
  0025b	ff 70 0c	 push	 DWORD PTR [eax+12]
  0025e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00260	6a 00		 push	 0
  00262	6a 00		 push	 0
  00264	51		 push	 ecx
  00265	ff 52 1c	 call	 DWORD PTR [edx+28]
  00268	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SurfaceBusyFlag@@3HA ; SurfaceBusyFlag
  0026e	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  00273	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ProcNo@@3IA ; ProcNo
  00279	b8 01 00 00 00	 mov	 eax, 1
  0027e	0f 44 c8	 cmove	 ecx, eax
  00281	8b d0		 mov	 edx, eax
  00283	5f		 pop	 edi
  00284	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, ecx ; SurfaceBusyFlag
  0028a	5b		 pop	 ebx
  0028b	eb 02		 jmp	 SHORT $LN31@PutTileBmp
$LN49@PutTileBmp:

; 109  : #endif
; 110  : 		if (fastDrawTile && (fastDrawTileFlag == 0 || amountXFastDraw || amountYFastDraw)) {

  0028d	33 d2		 xor	 edx, edx
$LN31@PutTileBmp:

; 219  : #ifdef _READ16BITBMP
; 220  : 		if (g_bUseAlpha) if (lpBattleSurfaceSys->BltFast(0, 0, lpDraw->lpBACKBUFFERSYS, NULL, DDBLTFAST_WAIT) == DDERR_SURFACEBUSY)	SurfaceBusyFlag = TRUE;
; 221  : #endif
; 222  : 	}
; 223  : 	if (ProcNo != PROC_BATTLE) {

  0028f	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00292	74 36		 je	 SHORT $LN34@PutTileBmp
$LN45@PutTileBmp:

; 224  : #ifdef _LOST_FOREST_FOG		
; 225  : 		if (nowFloor != 7450 && nowFloor != 7451

  00294	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowFloor@@3HA ; nowFloor
  00299	3d 1a 1d 00 00	 cmp	 eax, 7450		; 00001d1aH
  0029e	74 2a		 je	 SHORT $LN34@PutTileBmp
  002a0	3d 1b 1d 00 00	 cmp	 eax, 7451		; 00001d1bH
  002a5	74 23		 je	 SHORT $LN34@PutTileBmp

; 226  : #ifdef _NEW_CLOUD
; 227  : 			//&& nowFloor != 61000 && nowFloor != 61100
; 228  : #endif
; 229  : 			) {
; 230  : #endif
; 231  : 			extern DWORD sky_island_no;
; 232  : 			if (sky_island_no) {

  002a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?sky_island_no@@3KA, 0 ; sky_island_no
  002ae	74 1a		 je	 SHORT $LN34@PutTileBmp

; 233  : #ifdef _NEW_CLOUD
; 234  : 				extern void SkyIslandDraw(int floor);
; 235  : 				SkyIslandDraw(nowFloor);

  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ?SkyIslandDraw@@YAXH@Z	; SkyIslandDraw
  002b6	83 c4 04	 add	 esp, 4

; 236  : #else
; 237  : 				extern void SkyIslandDraw();
; 238  : 				SkyIslandDraw();
; 239  : #endif
; 240  : 				return FALSE;

  002b9	33 c0		 xor	 eax, eax
  002bb	5e		 pop	 esi

; 241  : 			}
; 242  : #ifdef _LOST_FOREST_FOG
; 243  : 		}
; 244  : #endif
; 245  : 	}
; 246  : 	return retainbackbuffer;
; 247  : }

  002bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002bf	33 cd		 xor	 ecx, ebp
  002c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c6	8b e5		 mov	 esp, ebp
  002c8	5d		 pop	 ebp
  002c9	c3		 ret	 0
$LN34@PutTileBmp:
  002ca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cd	8b c2		 mov	 eax, edx
  002cf	33 cd		 xor	 ecx, ebp
  002d1	5e		 pop	 esi
  002d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d7	8b e5		 mov	 esp, ebp
  002d9	5d		 pop	 ebp
  002da	c3		 ret	 0
?PutTileBmp@@YAHXZ ENDP					; PutTileBmp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z
_TEXT	SEGMENT
_surfacePitch1$2$ = -64					; size = 4
_g$ = -64						; size = 4
_lpSurface$GSCopy$1$ = -60				; size = 4
tv825 = -56						; size = 4
tv823 = -52						; size = 4
_g$1$ = -52						; size = 4
tv822 = -48						; size = 4
tv815 = -48						; size = 4
_surfacePitch1$1$ = -48					; size = 4
_oy$GSCopy$1$ = -44					; size = 4
_w$2$ = -40						; size = 4
tv824 = -36						; size = 4
_subx$2$ = -36						; size = 4
_dx$1$ = -36						; size = 4
_h$2$ = -32						; size = 4
tv816 = -28						; size = 4
_surfacePitch2$2$ = -28					; size = 4
_surfacePitch2$1$ = -28					; size = 4
_ox$GSCopy$1$ = -24					; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpSurface$ = 8						; size = 4
_ox$ = 12						; size = 4
_oy$ = 16						; size = 4
_offsetx$ = 20						; size = 4
_offsety$ = 24						; size = 4
_ow$ = 28						; size = 4
_oh$ = 32						; size = 4
_bLastOne$ = 36						; size = 1
_iGrayType$ = 40					; size = 4
?DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z PROC	; DrawGray, COMDAT

; 1108 : void DrawGray(LPDIRECTDRAWSURFACE lpSurface, int ox, int oy, int offsetx, int offsety, int ow, int oh, bool bLastOne, int iGrayType) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpSurface$[ebp]

; 1109 : 	static DDSURFACEDESC ddsdSource, ddsdOverlayer;
; 1110 : 	int surfacePitch1, surfacePitch2, nColorOverlayer;
; 1111 : 	int i, j, w = SURFACE_WIDTH, h = SURFACE_HEIGHT, subx, dx = 0, dy = 0;

  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	53		 push	 ebx

; 1112 : 	int R, G, B, Gray, g;
; 1113 : 	bool odd = false;
; 1114 : 	RECT rect;
; 1115 : 
; 1116 : 	if (ox >= lpDraw->xSize || ox + w <= 0 || oy >= lpDraw->ySize || oy + h <= 0) return;

  00019	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0001f	56		 push	 esi
  00020	8b 75 10	 mov	 esi, DWORD PTR _oy$[ebp]
  00023	8d 51 f0	 lea	 edx, DWORD PTR [ecx-16]
  00026	89 45 c4	 mov	 DWORD PTR _lpSurface$GSCopy$1$[ebp], eax
  00029	8b 45 0c	 mov	 eax, DWORD PTR _ox$[ebp]
  0002c	89 45 e8	 mov	 DWORD PTR _ox$GSCopy$1$[ebp], eax
  0002f	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [ebx+132]
  00035	57		 push	 edi
  00036	33 ff		 xor	 edi, edi
  00038	89 75 d4	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], esi
  0003b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dx$1$[ebp], 0
  00042	89 45 e4	 mov	 DWORD PTR tv816[ebp], eax
  00045	39 45 e8	 cmp	 DWORD PTR _ox$GSCopy$1$[ebp], eax
  00048	0f 8d ae 03 00
	00		 jge	 $LN15@DrawGray
  0004e	8b 45 e8	 mov	 eax, DWORD PTR _ox$GSCopy$1$[ebp]
  00051	03 c1		 add	 eax, ecx
  00053	85 c0		 test	 eax, eax
  00055	0f 8e a1 03 00
	00		 jle	 $LN15@DrawGray
  0005b	8b 83 88 00 00
	00		 mov	 eax, DWORD PTR [ebx+136]
  00061	89 45 d0	 mov	 DWORD PTR tv815[ebp], eax
  00064	3b f0		 cmp	 esi, eax
  00066	0f 8d 90 03 00
	00		 jge	 $LN15@DrawGray
  0006c	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  0006f	85 c0		 test	 eax, eax
  00071	0f 8e 85 03 00
	00		 jle	 $LN15@DrawGray

; 1117 : 	if (bLastOne) {

  00077	80 7d 24 00	 cmp	 BYTE PTR _bLastOne$[ebp], 0
  0007b	74 0c		 je	 SHORT $LN16@DrawGray

; 1118 : 		w = ow - offsetx;

  0007d	8b 4d 1c	 mov	 ecx, DWORD PTR _ow$[ebp]

; 1119 : 		h = oh - offsety;

  00080	8b 55 20	 mov	 edx, DWORD PTR _oh$[ebp]
  00083	2b 4d 14	 sub	 ecx, DWORD PTR _offsetx$[ebp]
  00086	2b 55 18	 sub	 edx, DWORD PTR _offsety$[ebp]
$LN16@DrawGray:

; 1120 : 	}
; 1121 : 	if (ox + w >= lpDraw->xSize) {

  00089	8b 45 e8	 mov	 eax, DWORD PTR _ox$GSCopy$1$[ebp]

; 1122 : 		w = lpDraw->xSize - ox;
; 1123 : 	}
; 1124 : 	if (oy + h >= lpDraw->ySize) h = lpDraw->ySize - oy;

  0008c	8b 5d e4	 mov	 ebx, DWORD PTR tv816[ebp]
  0008f	03 c1		 add	 eax, ecx
  00091	2b 5d e8	 sub	 ebx, DWORD PTR _ox$GSCopy$1$[ebp]
  00094	3b 45 e4	 cmp	 eax, DWORD PTR tv816[ebp]
  00097	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0009a	0f 4c d9	 cmovl	 ebx, ecx

; 1125 : 	if (ox < 0) {

  0009d	8b 4d d0	 mov	 ecx, DWORD PTR tv815[ebp]
  000a0	89 4d e0	 mov	 DWORD PTR _h$2$[ebp], ecx
  000a3	29 75 e0	 sub	 DWORD PTR _h$2$[ebp], esi
  000a6	3b c1		 cmp	 eax, ecx
  000a8	8b 4d e0	 mov	 ecx, DWORD PTR _h$2$[ebp]
  000ab	8b 45 e8	 mov	 eax, DWORD PTR _ox$GSCopy$1$[ebp]
  000ae	0f 4c ca	 cmovl	 ecx, edx
  000b1	89 5d d8	 mov	 DWORD PTR _w$2$[ebp], ebx
  000b4	89 4d e0	 mov	 DWORD PTR _h$2$[ebp], ecx
  000b7	85 c0		 test	 eax, eax
  000b9	79 18		 jns	 SHORT $LN19@DrawGray

; 1126 : 		w = w + ox;

  000bb	03 d8		 add	 ebx, eax
  000bd	89 5d d8	 mov	 DWORD PTR _w$2$[ebp], ebx

; 1127 : 		if (w < 0) return;

  000c0	0f 88 36 03 00
	00		 js	 $LN15@DrawGray

; 1128 : 		dx = ox * -1;

  000c6	8b c8		 mov	 ecx, eax

; 1129 : 		ox = 0;

  000c8	89 7d e8	 mov	 DWORD PTR _ox$GSCopy$1$[ebp], edi
  000cb	f7 d9		 neg	 ecx
  000cd	89 4d dc	 mov	 DWORD PTR _dx$1$[ebp], ecx
  000d0	8b 4d e0	 mov	 ecx, DWORD PTR _h$2$[ebp]
$LN19@DrawGray:

; 1130 : 	}
; 1131 : 	if (oy < 0) {

  000d3	85 f6		 test	 esi, esi
  000d5	79 14		 jns	 SHORT $LN21@DrawGray

; 1132 : 		h = h + oy;

  000d7	03 ce		 add	 ecx, esi
  000d9	89 4d e0	 mov	 DWORD PTR _h$2$[ebp], ecx

; 1133 : 		if (h < 0) return;

  000dc	0f 88 1a 03 00
	00		 js	 $LN15@DrawGray

; 1134 : 		dy = oy * -1;

  000e2	8b fe		 mov	 edi, esi
  000e4	f7 df		 neg	 edi

; 1135 : 		oy = 0;

  000e6	33 f6		 xor	 esi, esi
  000e8	89 75 d4	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], esi
$LN21@DrawGray:

; 1136 : 	}
; 1137 : 	subx = ox;
; 1138 : 
; 1139 : 	if (iGrayType == 3) g = 6;

  000eb	8b 45 28	 mov	 eax, DWORD PTR _iGrayType$[ebp]
  000ee	83 f8 03	 cmp	 eax, 3
  000f1	75 09		 jne	 SHORT $LN23@DrawGray
  000f3	c7 45 cc 06 00
	00 00		 mov	 DWORD PTR _g$1$[ebp], 6
  000fa	eb 11		 jmp	 SHORT $LN25@DrawGray
$LN23@DrawGray:

; 1140 : 	else if (iGrayType == 4)	g = 5;

  000fc	8b 4d c0	 mov	 ecx, DWORD PTR _g$[ebp]
  000ff	83 f8 04	 cmp	 eax, 4
  00102	ba 05 00 00 00	 mov	 edx, 5
  00107	0f 44 ca	 cmove	 ecx, edx
  0010a	89 4d cc	 mov	 DWORD PTR _g$1$[ebp], ecx
$LN25@DrawGray:

; 1141 : 
; 1142 : 	ZeroMemory(&ddsdSource, sizeof(DDSURFACEDESC));

  0010d	6a 68		 push	 104			; 00000068H
  0010f	6a 00		 push	 0
  00111	68 04 00 00 00	 push	 OFFSET ?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+4
  00116	e8 00 00 00 00	 call	 _memset

; 1143 : 	ddsdSource.dwSize = sizeof(DDSURFACEDESC);
; 1144 : 	ZeroMemory(&ddsdOverlayer, sizeof(DDSURFACEDESC));

  0011b	6a 68		 push	 104			; 00000068H
  0011d	6a 00		 push	 0
  0011f	68 04 00 00 00	 push	 OFFSET ?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+4
  00124	c7 05 00 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A, 108 ; 0000006cH
  0012e	e8 00 00 00 00	 call	 _memset

; 1145 : 	ddsdOverlayer.dwSize = sizeof(DDSURFACEDESC);
; 1146 : 	if (lpDraw->lpBACKBUFFER->Lock(NULL, &ddsdSource, DDLOCK_WAIT, NULL) != DD_OK) return;

  00133	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00138	83 c4 18	 add	 esp, 24			; 00000018H
  0013b	c7 05 00 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A, 108 ; 0000006cH
  00145	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00148	6a 00		 push	 0
  0014a	6a 01		 push	 1
  0014c	68 00 00 00 00	 push	 OFFSET ?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A
  00151	8b 08		 mov	 ecx, DWORD PTR [eax]
  00153	6a 00		 push	 0
  00155	50		 push	 eax
  00156	ff 51 64	 call	 DWORD PTR [ecx+100]
  00159	85 c0		 test	 eax, eax
  0015b	0f 85 9b 02 00
	00		 jne	 $LN15@DrawGray

; 1147 : 	if (lpSurface->Lock(NULL, &ddsdOverlayer, DDLOCK_WAIT, NULL) != DD_OK) {

  00161	8b 4d c4	 mov	 ecx, DWORD PTR _lpSurface$GSCopy$1$[ebp]
  00164	6a 00		 push	 0
  00166	6a 01		 push	 1
  00168	68 00 00 00 00	 push	 OFFSET ?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A
  0016d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016f	6a 00		 push	 0
  00171	51		 push	 ecx
  00172	ff 50 64	 call	 DWORD PTR [eax+100]
  00175	85 c0		 test	 eax, eax
  00177	74 24		 je	 SHORT $LN27@DrawGray

; 1148 : 		lpDraw->lpBACKBUFFER->Unlock(NULL);

  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0017e	6a 00		 push	 0
  00180	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00183	50		 push	 eax
  00184	8b 08		 mov	 ecx, DWORD PTR [eax]
  00186	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]
  0018c	5f		 pop	 edi

; 1237 : 	return;
; 1238 : }

  0018d	5e		 pop	 esi
  0018e	5b		 pop	 ebx
  0018f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00192	33 cd		 xor	 ecx, ebp
  00194	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c3		 ret	 0
$LN27@DrawGray:

; 1149 : 		return;
; 1150 : 	}
; 1151 : #ifdef _HI_COLOR_32
; 1152 : 	if (displayBpp == 32) {

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?displayBpp@@3HA ; displayBpp
  001a2	83 f8 20	 cmp	 eax, 32			; 00000020H
  001a5	0f 85 f4 00 00
	00		 jne	 $LN28@DrawGray

; 1153 : 		void *ptSourceDest, *ptOverLayerDest;
; 1154 : 		surfacePitch1 = ddsdSource.lPitch >> 2;

  001ab	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+16

; 1155 : 		surfacePitch2 = ddsdOverlayer.lPitch >> 2;

  001b1	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+16
  001b6	c1 fa 02	 sar	 edx, 2
  001b9	c1 f8 02	 sar	 eax, 2

; 1156 : 		ptSourceDest = (DWORD*)(ddsdSource.lpSurface) + oy * surfacePitch1 + ox;

  001bc	0f af f2	 imul	 esi, edx
  001bf	89 45 e4	 mov	 DWORD PTR _surfacePitch2$1$[ebp], eax

; 1157 : 		ptOverLayerDest = (DWORD*)(ddsdOverlayer.lpSurface) + dy * surfacePitch2 + dx;

  001c2	8b 4d e4	 mov	 ecx, DWORD PTR _surfacePitch2$1$[ebp]
  001c5	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+36
  001ca	0f af cf	 imul	 ecx, edi
  001cd	03 75 e8	 add	 esi, DWORD PTR _ox$GSCopy$1$[ebp]
  001d0	89 55 d0	 mov	 DWORD PTR _surfacePitch1$1$[ebp], edx
  001d3	03 4d dc	 add	 ecx, DWORD PTR _dx$1$[ebp]
  001d6	8d 34 b0	 lea	 esi, DWORD PTR [eax+esi*4]

; 1158 : 
; 1159 : 		// 565 æ¾ç¤ºæ¨¡å¼
; 1160 : 		if (gBitRShift == 0) {

  001d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gBitRShift@@3HA, 0 ; gBitRShift
  001e0	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+36
  001e5	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  001e8	0f 85 bc 01 00
	00		 jne	 $LN9@DrawGray

; 1161 : 			for (j = 0; j<h; j++) {

  001ee	8b 45 e0	 mov	 eax, DWORD PTR _h$2$[ebp]
  001f1	85 c0		 test	 eax, eax
  001f3	0f 8e b1 01 00
	00		 jle	 $LN9@DrawGray
  001f9	8b 7d e4	 mov	 edi, DWORD PTR _surfacePitch2$1$[ebp]
  001fc	89 45 cc	 mov	 DWORD PTR tv823[ebp], eax
  001ff	8b 45 d4	 mov	 eax, DWORD PTR _oy$GSCopy$1$[ebp]
$LL4@DrawGray:

; 1162 : 				if (oy >= 0) {

  00202	85 c0		 test	 eax, eax
  00204	0f 88 7c 00 00
	00		 js	 $LN31@DrawGray

; 1163 : 					for (i = 0; i<w; i++) {

  0020a	85 db		 test	 ebx, ebx
  0020c	7e 61		 jle	 SHORT $LN6@DrawGray
  0020e	8b 7d e8	 mov	 edi, DWORD PTR _ox$GSCopy$1$[ebp]
  00211	8b c3		 mov	 eax, ebx
  00213	89 5d dc	 mov	 DWORD PTR tv824[ebp], ebx
$LL52@DrawGray:

; 1164 : 						if (subx >= 0) {

  00216	85 ff		 test	 edi, edi
  00218	78 40		 js	 SHORT $LN54@DrawGray

; 1165 : 							nColorOverlayer = *(DWORD*)ptOverLayerDest;

  0021a	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 1166 : 							if (nColorOverlayer != DEF_COLORKEY) {

  0021c	85 db		 test	 ebx, ebx
  0021e	74 3b		 je	 SHORT $LN55@DrawGray

; 1167 : 								R = (nColorOverlayer & 0xff0000) >> 16;
; 1168 : 								G = (nColorOverlayer & 0x00ff00) >> 8;
; 1169 : 								B = (nColorOverlayer & 0x0000ff);

  00220	8b c3		 mov	 eax, ebx
  00222	c1 f8 10	 sar	 eax, 16			; 00000010H
  00225	0f b6 c0	 movzx	 eax, al

; 1170 : 								Gray = (R * 3 + G * 5 + B) / 10;

  00228	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0022b	8b c3		 mov	 eax, ebx
  0022d	c1 f8 08	 sar	 eax, 8
  00230	0f b6 c0	 movzx	 eax, al
  00233	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00236	03 d0		 add	 edx, eax
  00238	0f b6 c3	 movzx	 eax, bl
  0023b	03 d0		 add	 edx, eax
  0023d	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  00242	f7 e2		 mul	 edx
  00244	c1 ea 03	 shr	 edx, 3

; 1171 : 								*(DWORD*)ptSourceDest = (DWORD)(Gray << 16 | Gray << 8 | Gray);

  00247	8b c2		 mov	 eax, edx
  00249	c1 e0 08	 shl	 eax, 8
  0024c	0b c2		 or	 eax, edx
  0024e	c1 e0 08	 shl	 eax, 8
  00251	0b c2		 or	 eax, edx
  00253	89 06		 mov	 DWORD PTR [esi], eax

; 1172 : 							}
; 1173 : 						}

  00255	8b 45 dc	 mov	 eax, DWORD PTR tv824[ebp]
  00258	eb 01		 jmp	 SHORT $LN55@DrawGray
$LN54@DrawGray:

; 1174 : 						else subx++;

  0025a	47		 inc	 edi
$LN55@DrawGray:

; 1175 : 						ptSourceDest = (DWORD*)ptSourceDest + 1;

  0025b	83 c6 04	 add	 esi, 4

; 1176 : 						ptOverLayerDest = (DWORD*)ptOverLayerDest + 1;

  0025e	83 c1 04	 add	 ecx, 4
  00261	83 e8 01	 sub	 eax, 1
  00264	89 45 dc	 mov	 DWORD PTR tv824[ebp], eax
  00267	75 ad		 jne	 SHORT $LL52@DrawGray
  00269	8b 5d d8	 mov	 ebx, DWORD PTR _w$2$[ebp]
  0026c	8b 55 d0	 mov	 edx, DWORD PTR _surfacePitch1$1$[ebp]
$LN6@DrawGray:

; 1177 : 					}
; 1178 : 					ptSourceDest = (DWORD*)ptSourceDest + surfacePitch1 - w;
; 1179 : 					ptOverLayerDest = (DWORD*)ptOverLayerDest + surfacePitch2 - w;
; 1180 : 					subx = ox;
; 1181 : 				}

  0026f	8b 7d e4	 mov	 edi, DWORD PTR _surfacePitch2$1$[ebp]
  00272	8b c2		 mov	 eax, edx
  00274	2b c3		 sub	 eax, ebx
  00276	8d 34 86	 lea	 esi, DWORD PTR [esi+eax*4]
  00279	8b 45 e4	 mov	 eax, DWORD PTR _surfacePitch2$1$[ebp]
  0027c	2b c3		 sub	 eax, ebx
  0027e	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  00281	8b 45 d4	 mov	 eax, DWORD PTR _oy$GSCopy$1$[ebp]
  00284	eb 0a		 jmp	 SHORT $LN2@DrawGray
$LN31@DrawGray:

; 1182 : 				else {
; 1183 : 					ptSourceDest = (DWORD*)ptSourceDest + surfacePitch1;
; 1184 : 					ptOverLayerDest = (DWORD*)ptOverLayerDest + surfacePitch2;
; 1185 : 					oy++;

  00286	40		 inc	 eax
  00287	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  0028a	8d 0c b9	 lea	 ecx, DWORD PTR [ecx+edi*4]
  0028d	89 45 d4	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], eax
$LN2@DrawGray:

; 1161 : 			for (j = 0; j<h; j++) {

  00290	83 6d cc 01	 sub	 DWORD PTR tv823[ebp], 1
  00294	0f 85 68 ff ff
	ff		 jne	 $LL4@DrawGray

; 1186 : 				}
; 1187 : 			}
; 1188 : 		}
; 1189 : 	}

  0029a	e9 0b 01 00 00	 jmp	 $LN9@DrawGray
$LN28@DrawGray:

; 1190 : 	else
; 1191 : #endif
; 1192 : 		if (displayBpp == 16) {

  0029f	83 f8 10	 cmp	 eax, 16			; 00000010H
  002a2	0f 85 02 01 00
	00		 jne	 $LN9@DrawGray

; 1193 : 			void *ptSourceDest, *ptOverLayerDest;
; 1194 : 			surfacePitch1 = ddsdSource.lPitch >> 1;

  002a8	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+16

; 1195 : 			surfacePitch2 = ddsdOverlayer.lPitch >> 1;
; 1196 : 			ptSourceDest = (WORD*)(ddsdSource.lpSurface) + oy * surfacePitch1 + ox;

  002ae	8b ce		 mov	 ecx, esi
  002b0	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+16
  002b5	d1 fa		 sar	 edx, 1
  002b7	0f af ca	 imul	 ecx, edx
  002ba	d1 f8		 sar	 eax, 1
  002bc	89 45 e4	 mov	 DWORD PTR _surfacePitch2$2$[ebp], eax
  002bf	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdSource@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+36
  002c4	89 55 c0	 mov	 DWORD PTR _surfacePitch1$2$[ebp], edx
  002c7	03 4d e8	 add	 ecx, DWORD PTR _ox$GSCopy$1$[ebp]
  002ca	8d 1c 48	 lea	 ebx, DWORD PTR [eax+ecx*2]

; 1197 : 			ptOverLayerDest = (WORD*)(ddsdOverlayer.lpSurface) + dy * surfacePitch2 + dx;

  002cd	8b 4d e4	 mov	 ecx, DWORD PTR _surfacePitch2$2$[ebp]
  002d0	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdOverlayer@?1??DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+36
  002d5	0f af cf	 imul	 ecx, edi
  002d8	03 4d dc	 add	 ecx, DWORD PTR _dx$1$[ebp]

; 1198 : 
; 1199 : 			// 565 æ¾ç¤ºæ¨¡å¼
; 1200 : 			if (gBitRShift == 2) {

  002db	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?gBitRShift@@3HA, 2 ; gBitRShift
  002e2	8d 3c 48	 lea	 edi, DWORD PTR [eax+ecx*2]
  002e5	0f 85 bc 00 00
	00		 jne	 $LN71@DrawGray

; 1201 : 				for (j = 0; j<h; j++) {

  002eb	8b 45 e0	 mov	 eax, DWORD PTR _h$2$[ebp]
  002ee	85 c0		 test	 eax, eax
  002f0	0f 8e b1 00 00
	00		 jle	 $LN71@DrawGray
  002f6	89 45 d0	 mov	 DWORD PTR tv822[ebp], eax
  002f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@DrawGray:

; 1202 : 					if (oy >= 0) {

  00300	85 f6		 test	 esi, esi
  00302	0f 88 88 00 00
	00		 js	 $LN38@DrawGray

; 1203 : 						for (i = 0; i<w; i++) {

  00308	8b 4d d8	 mov	 ecx, DWORD PTR _w$2$[ebp]
  0030b	85 c9		 test	 ecx, ecx
  0030d	7e 73		 jle	 SHORT $LN12@DrawGray
  0030f	8b 45 e8	 mov	 eax, DWORD PTR _ox$GSCopy$1$[ebp]
  00312	89 45 dc	 mov	 DWORD PTR _subx$2$[ebp], eax
  00315	89 4d c8	 mov	 DWORD PTR tv825[ebp], ecx
$LL57@DrawGray:

; 1204 : 							if (subx >= 0) {

  00318	85 c0		 test	 eax, eax
  0031a	78 4b		 js	 SHORT $LN59@DrawGray

; 1205 : 								nColorOverlayer = *(WORD*)ptOverLayerDest;

  0031c	0f b7 17	 movzx	 edx, WORD PTR [edi]

; 1206 : 								if (nColorOverlayer != DEF_COLORKEY) {

  0031f	85 d2		 test	 edx, edx
  00321	74 48		 je	 SHORT $LN60@DrawGray

; 1207 : 									R = (nColorOverlayer & 0xf800) >> 11;
; 1208 : 									G = (nColorOverlayer & 0x07e0) >> 6;
; 1209 : 									B = nColorOverlayer & 0x001f;

  00323	8b ca		 mov	 ecx, edx
  00325	8b c2		 mov	 eax, edx
  00327	c1 e9 06	 shr	 ecx, 6
  0032a	83 e2 1f	 and	 edx, 31			; 0000001fH
  0032d	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00330	83 e1 1f	 and	 ecx, 31			; 0000001fH

; 1210 : 									Gray = (R * 3 + G * 6 + B) / 10;

  00333	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00336	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00339	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  0033e	03 ca		 add	 ecx, edx
  00340	f7 e1		 mul	 ecx

; 1211 : 									*(WORD*)ptSourceDest = (WORD)(Gray << 11 | Gray << g | Gray);

  00342	8b 4d cc	 mov	 ecx, DWORD PTR _g$1$[ebp]
  00345	c1 ea 03	 shr	 edx, 3
  00348	0f b7 d2	 movzx	 edx, dx
  0034b	66 8b f2	 mov	 si, dx
  0034e	8b c2		 mov	 eax, edx
  00350	66 d3 e6	 shl	 si, cl

; 1212 : 								}
; 1213 : 							}

  00353	8b 4d c8	 mov	 ecx, DWORD PTR tv825[ebp]
  00356	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00359	66 0b f0	 or	 si, ax
  0035c	8b 45 dc	 mov	 eax, DWORD PTR _subx$2$[ebp]
  0035f	66 0b f2	 or	 si, dx
  00362	66 89 33	 mov	 WORD PTR [ebx], si
  00365	eb 04		 jmp	 SHORT $LN60@DrawGray
$LN59@DrawGray:

; 1214 : 							else subx++;

  00367	40		 inc	 eax
  00368	89 45 dc	 mov	 DWORD PTR _subx$2$[ebp], eax
$LN60@DrawGray:

; 1215 : 							ptSourceDest = (WORD*)ptSourceDest + 1;

  0036b	83 c3 02	 add	 ebx, 2

; 1216 : 							ptOverLayerDest = (WORD*)ptOverLayerDest + 1;

  0036e	83 c7 02	 add	 edi, 2
  00371	83 e9 01	 sub	 ecx, 1
  00374	89 4d c8	 mov	 DWORD PTR tv825[ebp], ecx
  00377	75 9f		 jne	 SHORT $LL57@DrawGray
  00379	8b 4d d8	 mov	 ecx, DWORD PTR _w$2$[ebp]
  0037c	8b 75 d4	 mov	 esi, DWORD PTR _oy$GSCopy$1$[ebp]
  0037f	8b 55 c0	 mov	 edx, DWORD PTR _surfacePitch1$2$[ebp]
$LN12@DrawGray:

; 1217 : 						}
; 1218 : 						ptSourceDest = (WORD*)ptSourceDest + surfacePitch1 - w;

  00382	8b c2		 mov	 eax, edx
  00384	2b c1		 sub	 eax, ecx
  00386	8d 1c 43	 lea	 ebx, DWORD PTR [ebx+eax*2]

; 1219 : 						ptOverLayerDest = (WORD*)ptOverLayerDest + surfacePitch2 - w;

  00389	8b 45 e4	 mov	 eax, DWORD PTR _surfacePitch2$2$[ebp]
  0038c	2b c1		 sub	 eax, ecx

; 1220 : 						subx = ox;
; 1221 : 					}

  0038e	eb 0a		 jmp	 SHORT $LN72@DrawGray
$LN38@DrawGray:

; 1222 : 					else {
; 1223 : 						ptSourceDest = (WORD*)ptSourceDest + surfacePitch1;
; 1224 : 						ptOverLayerDest = (WORD*)ptOverLayerDest + surfacePitch2;

  00390	8b 45 e4	 mov	 eax, DWORD PTR _surfacePitch2$2$[ebp]
  00393	8d 1c 53	 lea	 ebx, DWORD PTR [ebx+edx*2]

; 1225 : 						oy++;

  00396	46		 inc	 esi
  00397	89 75 d4	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], esi
$LN72@DrawGray:

; 1201 : 				for (j = 0; j<h; j++) {

  0039a	83 6d d0 01	 sub	 DWORD PTR tv822[ebp], 1
  0039e	8d 3c 47	 lea	 edi, DWORD PTR [edi+eax*2]
  003a1	0f 85 59 ff ff
	ff		 jne	 $LL10@DrawGray
$LN71@DrawGray:

; 1226 : 					}
; 1227 : 				}
; 1228 : 			}
; 1229 : 		}
; 1230 : 	lpSurface->Unlock(NULL);

  003a7	8b 5d d8	 mov	 ebx, DWORD PTR _w$2$[ebp]
$LN9@DrawGray:
  003aa	8b 4d c4	 mov	 ecx, DWORD PTR _lpSurface$GSCopy$1$[ebp]
  003ad	6a 00		 push	 0
  003af	51		 push	 ecx
  003b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  003b2	ff 90 80 00 00
	00		 call	 DWORD PTR [eax+128]

; 1231 : 	lpDraw->lpBACKBUFFER->Unlock(NULL);

  003b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  003bd	6a 00		 push	 0
  003bf	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  003c2	50		 push	 eax
  003c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c5	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]

; 1232 : 	rect.left = ox;

  003cb	8b 75 e8	 mov	 esi, DWORD PTR _ox$GSCopy$1$[ebp]

; 1233 : 	rect.top = oy;
; 1234 : 	rect.right = ox + w;
; 1235 : 	rect.bottom = oy + h;
; 1236 : 	lpDraw->lpBACKBUFFER->BltFast(ox, oy, lpDraw->lpBACKBUFFER, &rect, DDBLTFAST_WAIT);

  003ce	8d 7d ec	 lea	 edi, DWORD PTR _rect$[ebp]
  003d1	8b 55 d4	 mov	 edx, DWORD PTR _oy$GSCopy$1$[ebp]
  003d4	6a 10		 push	 16			; 00000010H
  003d6	57		 push	 edi
  003d7	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  003da	89 75 ec	 mov	 DWORD PTR _rect$[ebp], esi
  003dd	89 45 f4	 mov	 DWORD PTR _rect$[ebp+8], eax
  003e0	8b 45 e0	 mov	 eax, DWORD PTR _h$2$[ebp]
  003e3	03 c2		 add	 eax, edx
  003e5	89 55 f0	 mov	 DWORD PTR _rect$[ebp+4], edx
  003e8	89 45 f8	 mov	 DWORD PTR _rect$[ebp+12], eax
  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  003f0	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  003f3	50		 push	 eax
  003f4	52		 push	 edx
  003f5	56		 push	 esi
  003f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f8	50		 push	 eax
  003f9	ff 51 1c	 call	 DWORD PTR [ecx+28]
$LN15@DrawGray:

; 1237 : 	return;
; 1238 : }

  003fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ff	5f		 pop	 edi
  00400	5e		 pop	 esi
  00401	33 cd		 xor	 ecx, ebp
  00403	5b		 pop	 ebx
  00404	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00409	8b e5		 mov	 esp, ebp
  0040b	5d		 pop	 ebp
  0040c	c3		 ret	 0
?DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z ENDP	; DrawGray
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z
_TEXT	SEGMENT
_lpSurface$GSCopy$1$ = -84				; size = 4
tv1284 = -80						; size = 4
_ptOverLayerDest32$ = -80				; size = 4
_ptSourceDest32$ = -80					; size = 4
_nColorOverlayer$4$ = -76				; size = 4
tv1282 = -76						; size = 4
_nColorOverlayer$2$ = -72				; size = 4
tv1285 = -72						; size = 4
_nColorOverlayer$3$ = -68				; size = 4
tv1279 = -68						; size = 4
tv1250 = -68						; size = 4
_w$2$ = -64						; size = 4
_ox$GSCopy$1$ = -60					; size = 4
_surfacePitch1$1$ = -56					; size = 4
tv1315 = -52						; size = 4
tv1304 = -52						; size = 4
tv1303 = -52						; size = 4
tv1313 = -48						; size = 4
tv1312 = -48						; size = 4
tv1311 = -48						; size = 4
_oy$GSCopy$1$ = -44					; size = 4
tv1314 = -40						; size = 4
_ptSourceDest$ = -40					; size = 4
_h$2$ = -36						; size = 4
_surfacePitch2$1$ = -32					; size = 4
_dy$1$ = -28						; size = 4
tv1316 = -28						; size = 4
_ptOverLayerDest$ = -28					; size = 4
_nColorSource$4$ = -24					; size = 4
_nColorSource$2$ = -24					; size = 4
_nColorSource$1$ = -24					; size = 4
_ptOverLayerDest32$1$ = -24				; size = 4
_dx$1$ = -24						; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpSurface$ = 8						; size = 4
_ox$ = 12						; size = 4
_oy$ = 16						; size = 4
_offsetx$ = 20						; size = 4
_offsety$ = 24						; size = 4
_ow$ = 28						; size = 4
_oh$ = 32						; size = 4
_bLastOne$ = 36						; size = 1
?DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z PROC ; DrawStaturated, COMDAT

; 1382 : void DrawStaturated(LPDIRECTDRAWSURFACE lpSurface, int ox, int oy, int offsetx, int offsety, int ow, int oh, bool bLastOne) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpSurface$[ebp]

; 1383 : 	static DDSURFACEDESC ddsdSource, ddsdOverlayer;
; 1384 : 	int surfacePitch1, surfacePitch2;
; 1385 : 	int w = SURFACE_WIDTH, h = SURFACE_HEIGHT, dx = 0, dy = 0;

  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	89 45 ac	 mov	 DWORD PTR _lpSurface$GSCopy$1$[ebp], eax
  0001d	33 db		 xor	 ebx, ebx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _ox$[ebp]
  00022	8d 51 f0	 lea	 edx, DWORD PTR [ecx-16]
  00025	57		 push	 edi

; 1386 : 	DWORD Is4Multiple;
; 1387 : 	RECT rect;
; 1388 : 
; 1389 : 	if (ox >= lpDraw->xSize || ox + w <= 0 || oy >= lpDraw->ySize || oy + h <= 0) return;

  00026	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0002c	89 45 c4	 mov	 DWORD PTR _ox$GSCopy$1$[ebp], eax
  0002f	8b 45 10	 mov	 eax, DWORD PTR _oy$[ebp]
  00032	89 45 d4	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], eax
  00035	8b b7 84 00 00
	00		 mov	 esi, DWORD PTR [edi+132]
  0003b	8b 45 c4	 mov	 eax, DWORD PTR _ox$GSCopy$1$[ebp]
  0003e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dx$1$[ebp], 0
  00045	89 5d e4	 mov	 DWORD PTR _dy$1$[ebp], ebx
  00048	3b c6		 cmp	 eax, esi
  0004a	0f 8d 4a 05 00
	00		 jge	 $LN27@DrawStatur
  00050	03 c1		 add	 eax, ecx
  00052	85 c0		 test	 eax, eax
  00054	0f 8e 40 05 00
	00		 jle	 $LN27@DrawStatur
  0005a	8b 45 d4	 mov	 eax, DWORD PTR _oy$GSCopy$1$[ebp]
  0005d	3b 87 88 00 00
	00		 cmp	 eax, DWORD PTR [edi+136]
  00063	0f 8d 31 05 00
	00		 jge	 $LN27@DrawStatur
  00069	03 c2		 add	 eax, edx
  0006b	85 c0		 test	 eax, eax
  0006d	0f 8e 27 05 00
	00		 jle	 $LN27@DrawStatur

; 1390 : 	if (bLastOne) {

  00073	38 5d 24	 cmp	 BYTE PTR _bLastOne$[ebp], bl
  00076	74 0c		 je	 SHORT $LN28@DrawStatur

; 1391 : 		w = ow - offsetx;

  00078	8b 4d 1c	 mov	 ecx, DWORD PTR _ow$[ebp]

; 1392 : 		h = oh - offsety;

  0007b	8b 55 20	 mov	 edx, DWORD PTR _oh$[ebp]
  0007e	2b 4d 14	 sub	 ecx, DWORD PTR _offsetx$[ebp]
  00081	2b 55 18	 sub	 edx, DWORD PTR _offsety$[ebp]
$LN28@DrawStatur:

; 1393 : 	}
; 1394 : 	if (ox + w >= lpDraw->xSize) {

  00084	8b 5d c4	 mov	 ebx, DWORD PTR _ox$GSCopy$1$[ebp]

; 1395 : 		w = lpDraw->xSize - ox;
; 1396 : 	}
; 1397 : 	if (oy + h >= lpDraw->ySize) h = lpDraw->ySize - oy;

  00087	2b f3		 sub	 esi, ebx
  00089	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  0008c	3b 87 84 00 00
	00		 cmp	 eax, DWORD PTR [edi+132]
  00092	8b 45 d4	 mov	 eax, DWORD PTR _oy$GSCopy$1$[ebp]
  00095	0f 4c f1	 cmovl	 esi, ecx

; 1398 : 	if (ox < 0) {

  00098	8b 8f 88 00 00
	00		 mov	 ecx, DWORD PTR [edi+136]
  0009e	8b d9		 mov	 ebx, ecx
  000a0	89 75 c0	 mov	 DWORD PTR _w$2$[ebp], esi
  000a3	2b 5d d4	 sub	 ebx, DWORD PTR _oy$GSCopy$1$[ebp]
  000a6	03 c2		 add	 eax, edx
  000a8	3b c1		 cmp	 eax, ecx
  000aa	8b cb		 mov	 ecx, ebx
  000ac	bb 00 00 00 00	 mov	 ebx, 0
  000b1	0f 4c ca	 cmovl	 ecx, edx
  000b4	8b 55 c4	 mov	 edx, DWORD PTR _ox$GSCopy$1$[ebp]
  000b7	89 4d dc	 mov	 DWORD PTR _h$2$[ebp], ecx
  000ba	85 d2		 test	 edx, edx
  000bc	79 18		 jns	 SHORT $LN31@DrawStatur

; 1399 : 		w = w + ox;

  000be	03 f2		 add	 esi, edx
  000c0	89 75 c0	 mov	 DWORD PTR _w$2$[ebp], esi

; 1400 : 		if (w < 0) return;

  000c3	0f 88 d1 04 00
	00		 js	 $LN27@DrawStatur

; 1401 : 		dx = ox * -1;

  000c9	8b ca		 mov	 ecx, edx

; 1402 : 		ox = 0;

  000cb	89 5d c4	 mov	 DWORD PTR _ox$GSCopy$1$[ebp], ebx
  000ce	f7 d9		 neg	 ecx
  000d0	89 4d e8	 mov	 DWORD PTR _dx$1$[ebp], ecx
  000d3	8b 4d dc	 mov	 ecx, DWORD PTR _h$2$[ebp]
$LN31@DrawStatur:

; 1403 : 	}
; 1404 : 	if (oy < 0) {

  000d6	8b 45 d4	 mov	 eax, DWORD PTR _oy$GSCopy$1$[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	79 19		 jns	 SHORT $LN33@DrawStatur

; 1405 : 		h = h + oy;

  000dd	03 c8		 add	 ecx, eax
  000df	89 4d dc	 mov	 DWORD PTR _h$2$[ebp], ecx

; 1406 : 		if (h < 0) return;

  000e2	0f 88 b2 04 00
	00		 js	 $LN27@DrawStatur

; 1407 : 		dy = oy * -1;

  000e8	8b d8		 mov	 ebx, eax

; 1408 : 		oy = 0;

  000ea	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _oy$GSCopy$1$[ebp], 0
  000f1	f7 db		 neg	 ebx
  000f3	89 5d e4	 mov	 DWORD PTR _dy$1$[ebp], ebx
$LN33@DrawStatur:

; 1409 : 	}
; 1410 : 	Is4Multiple = w % 4;
; 1411 : 
; 1412 : 	ZeroMemory(&ddsdSource, sizeof(DDSURFACEDESC));

  000f6	6a 68		 push	 104			; 00000068H
  000f8	6a 00		 push	 0
  000fa	68 04 00 00 00	 push	 OFFSET ?ddsdSource@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A+4
  000ff	e8 00 00 00 00	 call	 _memset

; 1413 : 	ddsdSource.dwSize = sizeof(DDSURFACEDESC);
; 1414 : 	ZeroMemory(&ddsdOverlayer, sizeof(DDSURFACEDESC));

  00104	6a 68		 push	 104			; 00000068H
  00106	6a 00		 push	 0
  00108	68 04 00 00 00	 push	 OFFSET ?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A+4
  0010d	c7 05 00 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ddsdSource@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A, 108 ; 0000006cH
  00117	e8 00 00 00 00	 call	 _memset
  0011c	83 c4 18	 add	 esp, 24			; 00000018H

; 1415 : 	ddsdOverlayer.dwSize = sizeof(DDSURFACEDESC);

  0011f	c7 05 00 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A, 108 ; 0000006cH

; 1416 : 	if (lpDraw->lpBACKBUFFER->Lock(NULL, &ddsdSource, DDLOCK_WAIT, NULL) != DD_OK) return;

  00129	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0012c	6a 00		 push	 0
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	6a 01		 push	 1
  00132	68 00 00 00 00	 push	 OFFSET ?ddsdSource@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A
  00137	6a 00		 push	 0
  00139	50		 push	 eax
  0013a	ff 51 64	 call	 DWORD PTR [ecx+100]
  0013d	85 c0		 test	 eax, eax
  0013f	0f 85 55 04 00
	00		 jne	 $LN27@DrawStatur

; 1417 : 	if (lpSurface->Lock(NULL, &ddsdOverlayer, DDLOCK_WAIT, NULL) != DD_OK) {

  00145	8b 4d ac	 mov	 ecx, DWORD PTR _lpSurface$GSCopy$1$[ebp]
  00148	6a 00		 push	 0
  0014a	6a 01		 push	 1
  0014c	68 00 00 00 00	 push	 OFFSET ?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A
  00151	8b 01		 mov	 eax, DWORD PTR [ecx]
  00153	6a 00		 push	 0
  00155	51		 push	 ecx
  00156	ff 50 64	 call	 DWORD PTR [eax+100]
  00159	85 c0		 test	 eax, eax
  0015b	74 24		 je	 SHORT $LN36@DrawStatur

; 1418 : 		lpDraw->lpBACKBUFFER->Unlock(NULL);

  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00162	6a 00		 push	 0
  00164	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00167	50		 push	 eax
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]
  00170	5f		 pop	 edi

; 1572 : 
; 1573 : 	return;
; 1574 : }

  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00176	33 cd		 xor	 ecx, ebp
  00178	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c3		 ret	 0
$LN36@DrawStatur:

; 1419 : 		return;
; 1420 : 	}
; 1421 : 
; 1422 : 	void *ptSourceDest, *ptOverLayerDest;
; 1423 : #ifdef _HI_COLOR_32
; 1424 : 	void *ptSourceDest32, *ptOverLayerDest32;
; 1425 : 	if (displayBpp == 32) {

  00181	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?displayBpp@@3HA, 32 ; displayBpp, 00000020H
  00188	8b 3d 10 00 00
	00		 mov	 edi, DWORD PTR ?ddsdSource@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A+16
  0018e	8b 4d d4	 mov	 ecx, DWORD PTR _oy$GSCopy$1$[ebp]
  00191	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdSource@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A+36
  00196	75 2f		 jne	 SHORT $LN37@DrawStatur

; 1426 : 		surfacePitch1 = ddsdSource.lPitch >> 2;
; 1427 : 		surfacePitch2 = ddsdOverlayer.lPitch >> 2;

  00198	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A+16
  0019e	c1 ff 02	 sar	 edi, 2

; 1428 : 		ptSourceDest32 = (DWORD *)(ddsdSource.lpSurface) + oy * surfacePitch1 + ox;

  001a1	0f af cf	 imul	 ecx, edi
  001a4	c1 fa 02	 sar	 edx, 2
  001a7	89 55 e0	 mov	 DWORD PTR _surfacePitch2$1$[ebp], edx

; 1429 : 		ptOverLayerDest32 = (DWORD *)(ddsdOverlayer.lpSurface) + dy * surfacePitch2 + dx;

  001aa	0f af d3	 imul	 edx, ebx
  001ad	03 4d c4	 add	 ecx, DWORD PTR _ox$GSCopy$1$[ebp]
  001b0	03 55 e8	 add	 edx, DWORD PTR _dx$1$[ebp]
  001b3	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  001b6	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR ?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A+36
  001bc	8d 1c 91	 lea	 ebx, DWORD PTR [ecx+edx*4]

; 1430 : 	}

  001bf	8b 55 d8	 mov	 edx, DWORD PTR _ptSourceDest$[ebp]
  001c2	8b 4d e4	 mov	 ecx, DWORD PTR _ptOverLayerDest$[ebp]
  001c5	eb 31		 jmp	 SHORT $LN107@DrawStatur
$LN37@DrawStatur:

; 1431 : 	else
; 1432 : #endif
; 1433 : 	{
; 1434 : 		surfacePitch1 = ddsdSource.lPitch >> 1;
; 1435 : 		surfacePitch2 = ddsdOverlayer.lPitch >> 1;

  001c7	8b 1d 10 00 00
	00		 mov	 ebx, DWORD PTR ?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A+16
  001cd	d1 ff		 sar	 edi, 1

; 1436 : 		ptSourceDest = (WORD*)(ddsdSource.lpSurface) + oy * surfacePitch1 + ox;

  001cf	0f af cf	 imul	 ecx, edi
  001d2	d1 fb		 sar	 ebx, 1
  001d4	89 5d e0	 mov	 DWORD PTR _surfacePitch2$1$[ebp], ebx

; 1437 : 		ptOverLayerDest = (WORD*)(ddsdOverlayer.lpSurface) + dy * surfacePitch2 + dx;

  001d7	0f af 5d e4	 imul	 ebx, DWORD PTR _dy$1$[ebp]
  001db	03 4d c4	 add	 ecx, DWORD PTR _ox$GSCopy$1$[ebp]
  001de	03 5d e8	 add	 ebx, DWORD PTR _dx$1$[ebp]
  001e1	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  001e4	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdOverlayer@?1??DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z@4U_DDSURFACEDESC@@A+36
  001e9	89 55 d8	 mov	 DWORD PTR _ptSourceDest$[ebp], edx
  001ec	8d 0c 58	 lea	 ecx, DWORD PTR [eax+ebx*2]
  001ef	8b 45 b0	 mov	 eax, DWORD PTR _ptSourceDest32$[ebp]
  001f2	8b 5d b0	 mov	 ebx, DWORD PTR _ptOverLayerDest32$[ebp]
  001f5	89 4d e4	 mov	 DWORD PTR _ptOverLayerDest$[ebp], ecx
$LN107@DrawStatur:

; 1448 : 				for (j = 0; j<h; j++) {

  001f8	83 7d dc 00	 cmp	 DWORD PTR _h$2$[ebp], 0
  001fc	89 5d e8	 mov	 DWORD PTR _ptOverLayerDest32$1$[ebp], ebx
  001ff	0f 8e 43 03 00
	00		 jle	 $LN21@DrawStatur

; 1438 : 	}
; 1439 : 
; 1440 : 	{
; 1441 : 		int i, j, nColorSource, nColorOverlayer;
; 1442 : 		DWORD SR, SG, SB, OR, OG, OB;
; 1443 : 
; 1444 : 		// 565 æ¾ç¤ºæ¨¡å¼
; 1445 : 		if (gBitRShift == 2) {

  00205	2b fe		 sub	 edi, esi
  00207	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?gBitRShift@@3HA, 2 ; gBitRShift
  0020e	0f 85 bf 01 00
	00		 jne	 $LN39@DrawStatur

; 1446 : #ifdef _HI_COLOR_32
; 1447 : 			if (displayBpp == 32) {

  00214	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?displayBpp@@3HA, 32 ; displayBpp, 00000020H
  0021b	0f 85 b5 00 00
	00		 jne	 $LN41@DrawStatur

; 1448 : 				for (j = 0; j<h; j++) {

  00221	8b 4d e0	 mov	 ecx, DWORD PTR _surfacePitch2$1$[ebp]
  00224	8b 55 dc	 mov	 edx, DWORD PTR _h$2$[ebp]
  00227	2b ce		 sub	 ecx, esi
  00229	c1 e7 02	 shl	 edi, 2
  0022c	c1 e1 02	 shl	 ecx, 2
  0022f	89 7d c8	 mov	 DWORD PTR _surfacePitch1$1$[ebp], edi
  00232	89 4d e0	 mov	 DWORD PTR _surfacePitch2$1$[ebp], ecx
  00235	89 55 d8	 mov	 DWORD PTR tv1314[ebp], edx
$LL4@DrawStatur:

; 1449 : 					for (i = 0; i<w; i++) {

  00238	85 f6		 test	 esi, esi
  0023a	0f 8e 81 00 00
	00		 jle	 $LN6@DrawStatur
  00240	89 75 e4	 mov	 DWORD PTR tv1316[ebp], esi
$LL66@DrawStatur:

; 1450 : 						nColorSource = *(DWORD*)ptSourceDest32;
; 1451 : 						nColorOverlayer = *(DWORD*)ptOverLayerDest32;

  00243	8b 13		 mov	 edx, DWORD PTR [ebx]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	89 4d e8	 mov	 DWORD PTR _nColorSource$1$[ebp], ecx

; 1452 : 						if (nColorOverlayer != DEF_COLORKEY) {

  0024a	85 d2		 test	 edx, edx
  0024c	74 59		 je	 SHORT $LN103@DrawStatur

; 1453 : 							SR = (nColorSource & 0xff0000) >> 8; // åæ¬è¦å³ç§»11å·¦ç§»3,ç®åæå³ç§»8

  0024e	8b f9		 mov	 edi, ecx

; 1454 : 							SG = (nColorSource & 0x00ff00) >> 3; // åæ¬è¦å³ç§»5å·¦ç§»2,ç®åæå³ç§»3

  00250	8b f1		 mov	 esi, ecx
  00252	c1 ff 08	 sar	 edi, 8

; 1455 : 							SB = (nColorSource & 0x0000ff) << 3;
; 1456 : 							OR = (nColorOverlayer & 0xff0000) >> 8;

  00255	8b ca		 mov	 ecx, edx
  00257	c1 f9 08	 sar	 ecx, 8
  0025a	81 e7 00 ff 00
	00		 and	 edi, 65280		; 0000ff00H
  00260	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H

; 1457 : 							OG = (nColorOverlayer & 0x00ff00) >> 3;

  00266	c1 fa 03	 sar	 edx, 3
  00269	c1 fe 03	 sar	 esi, 3
  0026c	81 e2 e0 1f 00
	00		 and	 edx, 8160		; 00001fe0H
  00272	81 e6 e0 1f 00
	00		 and	 esi, 8160		; 00001fe0H

; 1458 : 							OB = (nColorOverlayer & 0x0000ff) << 3;
; 1459 : 							//								SR = (((SR + OR) > 0x00ff ? 0x00ff:SR+OR) << 8) & 0xf800;
; 1460 : 							//								SG = (((SG + OG) > 0x00ff ? 0x00ff:SG+OG) << 3) & 0x07e0;
; 1461 : 							//								SB = (((SB + OB) > 0x00ff ? 0x00ff:SB+OB) >> 3) & 0x001f;
; 1462 : 							SR = ((OR > SR ? OR : SR) << 8) & 0xff0000;

  00278	3b cf		 cmp	 ecx, edi
  0027a	0f 47 f9	 cmova	 edi, ecx

; 1463 : 							SG = ((OG > SG ? OG : SG) << 3) & 0x00ff00;
; 1464 : 							SB = ((OB > SB ? OB : SB) >> 3) & 0x0000ff;

  0027d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0027f	c1 e7 05	 shl	 edi, 5
  00282	3b d6		 cmp	 edx, esi
  00284	0f 47 f2	 cmova	 esi, edx
  00287	0f b6 d1	 movzx	 edx, cl
  0028a	8b 4d e8	 mov	 ecx, DWORD PTR _nColorSource$1$[ebp]

; 1465 : 							*(DWORD*)ptSourceDest32 = (DWORD)(SB | SG | SR);

  0028d	0b fe		 or	 edi, esi
  0028f	8b 75 e4	 mov	 esi, DWORD PTR tv1316[ebp]
  00292	0f b6 c9	 movzx	 ecx, cl
  00295	c1 e7 03	 shl	 edi, 3
  00298	3b d1		 cmp	 edx, ecx
  0029a	8b 55 e8	 mov	 edx, DWORD PTR _nColorSource$1$[ebp]
  0029d	0f 47 13	 cmova	 edx, DWORD PTR [ebx]
  002a0	0f b6 ca	 movzx	 ecx, dl
  002a3	0b f9		 or	 edi, ecx
  002a5	89 38		 mov	 DWORD PTR [eax], edi
$LN103@DrawStatur:

; 1466 : 						}
; 1467 : 						ptSourceDest32 = (DWORD*)ptSourceDest32 + 1;

  002a7	83 c0 04	 add	 eax, 4

; 1468 : 						ptOverLayerDest32 = (DWORD*)ptOverLayerDest32 + 1;

  002aa	83 c3 04	 add	 ebx, 4
  002ad	83 ee 01	 sub	 esi, 1
  002b0	89 75 e4	 mov	 DWORD PTR tv1316[ebp], esi
  002b3	75 8e		 jne	 SHORT $LL66@DrawStatur
  002b5	8b 75 c0	 mov	 esi, DWORD PTR _w$2$[ebp]
  002b8	8b 7d c8	 mov	 edi, DWORD PTR _surfacePitch1$1$[ebp]
  002bb	8b 4d e0	 mov	 ecx, DWORD PTR _surfacePitch2$1$[ebp]
  002be	8b 55 d8	 mov	 edx, DWORD PTR tv1314[ebp]
$LN6@DrawStatur:

; 1469 : 					}
; 1470 : 					ptSourceDest32 = (DWORD*)ptSourceDest32 + surfacePitch1 - w;

  002c1	03 c7		 add	 eax, edi

; 1471 : 					ptOverLayerDest32 = (DWORD*)ptOverLayerDest32 + surfacePitch2 - w;

  002c3	03 d9		 add	 ebx, ecx
  002c5	83 ea 01	 sub	 edx, 1
  002c8	89 55 d8	 mov	 DWORD PTR tv1314[ebp], edx
  002cb	0f 85 67 ff ff
	ff		 jne	 $LL4@DrawStatur

; 1472 : 				}
; 1473 : 			}

  002d1	e9 72 02 00 00	 jmp	 $LN21@DrawStatur
$LN41@DrawStatur:
  002d6	8b 45 e0	 mov	 eax, DWORD PTR _surfacePitch2$1$[ebp]
  002d9	03 ff		 add	 edi, edi

; 1474 : 			else
; 1475 : #endif
; 1476 : 			{
; 1477 : 				for (j = 0; j<h; j++) {

  002db	8b 5d dc	 mov	 ebx, DWORD PTR _h$2$[ebp]
  002de	2b c6		 sub	 eax, esi
  002e0	03 c0		 add	 eax, eax
  002e2	89 7d c8	 mov	 DWORD PTR _surfacePitch1$1$[ebp], edi
  002e5	89 45 e0	 mov	 DWORD PTR _surfacePitch2$1$[ebp], eax
  002e8	89 5d cc	 mov	 DWORD PTR tv1315[ebp], ebx
  002eb	0f 1f 44 00 00	 npad	 5
$LL10@DrawStatur:

; 1478 : 					for (i = 0; i<w; i++) {

  002f0	85 f6		 test	 esi, esi
  002f2	0f 8e c0 00 00
	00		 jle	 $LN12@DrawStatur
  002f8	8b de		 mov	 ebx, esi
  002fa	89 75 d0	 mov	 DWORD PTR tv1312[ebp], esi
  002fd	0f 1f 00	 npad	 3
$LL69@DrawStatur:

; 1479 : 						nColorSource = *(WORD*)ptSourceDest;

  00300	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00303	8b f0		 mov	 esi, eax
  00305	89 45 e8	 mov	 DWORD PTR _nColorSource$2$[ebp], eax

; 1480 : 						nColorOverlayer = *(WORD*)ptOverLayerDest;

  00308	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  0030b	89 75 b4	 mov	 DWORD PTR tv1282[ebp], esi
  0030e	8b f0		 mov	 esi, eax
  00310	89 75 bc	 mov	 DWORD PTR tv1279[ebp], esi
  00313	89 45 b8	 mov	 DWORD PTR _nColorOverlayer$2$[ebp], eax

; 1481 : 						if (nColorOverlayer != DEF_COLORKEY) {

  00316	85 c0		 test	 eax, eax
  00318	74 7a		 je	 SHORT $LN104@DrawStatur

; 1482 : 							SR = (nColorSource & 0xf800) >> 8; // åæ¬è¦å³ç§»11å·¦ç§»3,ç®åæå³ç§»8

  0031a	8b 75 e8	 mov	 esi, DWORD PTR _nColorSource$2$[ebp]

; 1483 : 							SG = (nColorSource & 0x07e0) >> 3; // åæ¬è¦å³ç§»5å·¦ç§»2,ç®åæå³ç§»3
; 1484 : 							SB = (nColorSource & 0x001f) << 3;
; 1485 : 							OR = (nColorOverlayer & 0xf800) >> 8;

  0031d	8b c8		 mov	 ecx, eax
  0031f	8b 7d e8	 mov	 edi, DWORD PTR _nColorSource$2$[ebp]

; 1486 : 							OG = (nColorOverlayer & 0x07e0) >> 3;

  00322	8b d0		 mov	 edx, eax
  00324	c1 e9 08	 shr	 ecx, 8
  00327	81 e1 f8 00 00
	00		 and	 ecx, 248		; 000000f8H
  0032d	c1 ea 03	 shr	 edx, 3
  00330	c1 ee 08	 shr	 esi, 8
  00333	81 e2 fc 00 00
	00		 and	 edx, 252		; 000000fcH
  00339	c1 ef 03	 shr	 edi, 3
  0033c	81 e6 f8 00 00
	00		 and	 esi, 248		; 000000f8H

; 1487 : 							OB = (nColorOverlayer & 0x001f) << 3;
; 1488 : 							//								SR = (((SR + OR) > 0x00ff ? 0x00ff:SR+OR) << 8) & 0xf800;
; 1489 : 							//								SG = (((SG + OG) > 0x00ff ? 0x00ff:SG+OG) << 3) & 0x07e0;
; 1490 : 							//								SB = (((SB + OB) > 0x00ff ? 0x00ff:SB+OB) >> 3) & 0x001f;
; 1491 : 							SR = ((OR > SR ? OR : SR) << 8) & 0xf800;

  00342	8b c1		 mov	 eax, ecx
  00344	81 e7 fc 00 00
	00		 and	 edi, 252		; 000000fcH
  0034a	3b ce		 cmp	 ecx, esi
  0034c	8b de		 mov	 ebx, esi

; 1492 : 							SG = ((OG > SG ? OG : SG) << 3) & 0x07e0;

  0034e	8b cf		 mov	 ecx, edi
  00350	0f 47 d8	 cmova	 ebx, eax
  00353	8b c2		 mov	 eax, edx

; 1493 : 							SB = ((OB > SB ? OB : SB) >> 3) & 0x001f;

  00355	66 c1 e3 05	 shl	 bx, 5
  00359	3b d7		 cmp	 edx, edi
  0035b	8b 55 b8	 mov	 edx, DWORD PTR _nColorOverlayer$2$[ebp]
  0035e	0f 47 c8	 cmova	 ecx, eax
  00361	8b 45 b4	 mov	 eax, DWORD PTR tv1282[ebp]
  00364	83 65 e8 1f	 and	 DWORD PTR _nColorSource$2$[ebp], 31 ; 0000001fH

; 1494 : 							*(WORD*)ptSourceDest = (WORD)(SB | SG | SR);

  00368	66 0b d9	 or	 bx, cx
  0036b	83 e2 1f	 and	 edx, 31			; 0000001fH
  0036e	0f b7 c8	 movzx	 ecx, ax
  00371	8b 45 bc	 mov	 eax, DWORD PTR tv1279[ebp]
  00374	66 c1 e3 03	 shl	 bx, 3
  00378	3a 55 e8	 cmp	 dl, BYTE PTR _nColorSource$2$[ebp]
  0037b	8b 55 d8	 mov	 edx, DWORD PTR _ptSourceDest$[ebp]
  0037e	0f b7 c0	 movzx	 eax, ax
  00381	0f 47 c8	 cmova	 ecx, eax
  00384	66 83 e1 1f	 and	 cx, 31			; 0000001fH
  00388	66 0b d9	 or	 bx, cx
  0038b	8b 4d e4	 mov	 ecx, DWORD PTR _ptOverLayerDest$[ebp]
  0038e	66 89 1a	 mov	 WORD PTR [edx], bx
  00391	8b 5d d0	 mov	 ebx, DWORD PTR tv1312[ebp]
$LN104@DrawStatur:

; 1495 : 						}
; 1496 : 						ptSourceDest = (WORD*)ptSourceDest + 1;

  00394	83 c2 02	 add	 edx, 2

; 1497 : 						ptOverLayerDest = (WORD*)ptOverLayerDest + 1;

  00397	83 c1 02	 add	 ecx, 2
  0039a	83 eb 01	 sub	 ebx, 1
  0039d	89 55 d8	 mov	 DWORD PTR _ptSourceDest$[ebp], edx
  003a0	89 4d e4	 mov	 DWORD PTR _ptOverLayerDest$[ebp], ecx
  003a3	89 5d d0	 mov	 DWORD PTR tv1312[ebp], ebx
  003a6	0f 85 54 ff ff
	ff		 jne	 $LL69@DrawStatur
  003ac	8b 75 c0	 mov	 esi, DWORD PTR _w$2$[ebp]
  003af	8b 7d c8	 mov	 edi, DWORD PTR _surfacePitch1$1$[ebp]
  003b2	8b 45 e0	 mov	 eax, DWORD PTR _surfacePitch2$1$[ebp]
  003b5	8b 5d cc	 mov	 ebx, DWORD PTR tv1315[ebp]
$LN12@DrawStatur:

; 1498 : 					}
; 1499 : 					ptSourceDest = (WORD*)ptSourceDest + surfacePitch1 - w;

  003b8	03 d7		 add	 edx, edi

; 1500 : 					ptOverLayerDest = (WORD*)ptOverLayerDest + surfacePitch2 - w;

  003ba	03 c8		 add	 ecx, eax
  003bc	83 eb 01	 sub	 ebx, 1
  003bf	89 55 d8	 mov	 DWORD PTR _ptSourceDest$[ebp], edx
  003c2	89 4d e4	 mov	 DWORD PTR _ptOverLayerDest$[ebp], ecx
  003c5	89 5d cc	 mov	 DWORD PTR tv1315[ebp], ebx
  003c8	0f 85 22 ff ff
	ff		 jne	 $LL10@DrawStatur

; 1501 : 				}
; 1502 : 			}
; 1503 : 		}

  003ce	e9 75 01 00 00	 jmp	 $LN21@DrawStatur
$LN39@DrawStatur:

; 1504 : 		// 555 æ¾ç¤ºæ¨¡å¼
; 1505 : 		else {
; 1506 : #ifdef _HI_COLOR_32
; 1507 : 			if (displayBpp == 32) {

  003d3	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?displayBpp@@3HA, 32 ; displayBpp, 00000020H
  003da	75 7a		 jne	 SHORT $LN45@DrawStatur

; 1508 : 				for (j = 0; j<h; j++) {

  003dc	8b 4d dc	 mov	 ecx, DWORD PTR _h$2$[ebp]
  003df	c1 e7 02	 shl	 edi, 2
  003e2	89 7d c8	 mov	 DWORD PTR _surfacePitch1$1$[ebp], edi
  003e5	89 4d d0	 mov	 DWORD PTR tv1313[ebp], ecx
$LL16@DrawStatur:

; 1509 : 					for (i = 0; i<w; i++) {

  003e8	85 f6		 test	 esi, esi
  003ea	7e 5b		 jle	 SHORT $LN18@DrawStatur
  003ec	8b 4d e8	 mov	 ecx, DWORD PTR _ptOverLayerDest32$1$[ebp]
  003ef	89 75 cc	 mov	 DWORD PTR tv1304[ebp], esi
$LL19@DrawStatur:

; 1510 : 						nColorSource = *(DWORD*)ptSourceDest32;
; 1511 : 						nColorOverlayer = *(DWORD*)ptOverLayerDest32;

  003f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f4	8b 18		 mov	 ebx, DWORD PTR [eax]
  003f6	89 55 bc	 mov	 DWORD PTR _nColorOverlayer$3$[ebp], edx

; 1512 : 						if (nColorOverlayer != DEF_COLORKEY) {

  003f9	85 d2		 test	 edx, edx
  003fb	74 36		 je	 SHORT $LN105@DrawStatur

; 1513 : 							SR = (nColorSource & 0xff0000) >> 7;							// åæ¬è¦å³ç§»10å·¦ç§»3,ç®åæå³ç§»7
; 1514 : 							SG = (nColorSource & 0x00ff00) >> 2;	// åæ¬è¦å³ç§»5å·¦ç§»3,ç®åæå³ç§»2

  003fd	8b 4d e8	 mov	 ecx, DWORD PTR _ptOverLayerDest32$1$[ebp]
  00400	8b fb		 mov	 edi, ebx
  00402	c1 ff 02	 sar	 edi, 2

; 1515 : 							SB = (nColorSource & 0x0000ff) << 3;
; 1516 : 							OR = (nColorSource & 0xff0000) >> 7;
; 1517 : 							OG = (nColorOverlayer & 0x00ff00) >> 2;

  00405	8b f2		 mov	 esi, edx
  00407	c1 fe 02	 sar	 esi, 2
  0040a	81 e7 c0 3f 00
	00		 and	 edi, 16320		; 00003fc0H
  00410	81 e6 c0 3f 00
	00		 and	 esi, 16320		; 00003fc0H

; 1518 : 							OB = (nColorOverlayer & 0x0000ff) << 3;
; 1519 : 							//								SR = ((SR + OR) & 0x00ff)<< 7;
; 1520 : 							//								SG = (((SG + OG) & 0x00ff)<< 2) & 0x03e0;
; 1521 : 							//								SB = (((SB + OB) & 0x00ff)>> 3) & 0x001f;
; 1522 : 							SR = (((OR > SR ? OR : SR) & 0x00ff) << 7) & 0xff0000;
; 1523 : 							SG = (((OG > SG ? OG : SG) & 0x00ff) << 2) & 0x00ff00;

  00416	3a d3		 cmp	 dl, bl
  00418	0f 47 da	 cmova	 ebx, edx

; 1524 : 							SB = (((OB > SB ? OB : SB) & 0x00ff) >> 3) & 0x0000ff;

  0041b	83 e3 1f	 and	 ebx, 31			; 0000001fH
  0041e	3b f7		 cmp	 esi, edi
  00420	0f 47 fe	 cmova	 edi, esi
  00423	8b 75 cc	 mov	 esi, DWORD PTR tv1304[ebp]
  00426	81 e7 c0 00 00
	00		 and	 edi, 192		; 000000c0H
  0042c	c1 e7 02	 shl	 edi, 2

; 1525 : 							*(DWORD*)ptSourceDest32 = (DWORD)(SB | SG | SR);

  0042f	0b df		 or	 ebx, edi
  00431	89 18		 mov	 DWORD PTR [eax], ebx
$LN105@DrawStatur:

; 1526 : 						}
; 1527 : 						ptSourceDest32 = (DWORD*)ptSourceDest32 + 1;

  00433	83 c0 04	 add	 eax, 4
  00436	83 ee 01	 sub	 esi, 1
  00439	89 75 cc	 mov	 DWORD PTR tv1304[ebp], esi
  0043c	75 b4		 jne	 SHORT $LL19@DrawStatur
  0043e	8b 75 c0	 mov	 esi, DWORD PTR _w$2$[ebp]
  00441	8b 7d c8	 mov	 edi, DWORD PTR _surfacePitch1$1$[ebp]
  00444	8b 4d d0	 mov	 ecx, DWORD PTR tv1313[ebp]
$LN18@DrawStatur:

; 1528 : 						ptOverLayerDest = (DWORD*)ptOverLayerDest32 + 1;
; 1529 : 					}
; 1530 : 					ptSourceDest32 = (DWORD*)ptSourceDest32 + surfacePitch1 - w;

  00447	03 c7		 add	 eax, edi
  00449	83 e9 01	 sub	 ecx, 1
  0044c	89 4d d0	 mov	 DWORD PTR tv1313[ebp], ecx
  0044f	75 97		 jne	 SHORT $LL16@DrawStatur

; 1531 : 					ptOverLayerDest = (DWORD*)ptOverLayerDest32 + surfacePitch2 - w;
; 1532 : 				}
; 1533 : 			}

  00451	e9 f2 00 00 00	 jmp	 $LN21@DrawStatur
$LN45@DrawStatur:
  00456	8b 45 e0	 mov	 eax, DWORD PTR _surfacePitch2$1$[ebp]
  00459	03 ff		 add	 edi, edi

; 1534 : 			else
; 1535 : #endif
; 1536 : 			{
; 1537 : 				for (j = 0; j<h; j++) {

  0045b	8b 5d dc	 mov	 ebx, DWORD PTR _h$2$[ebp]
  0045e	2b c6		 sub	 eax, esi
  00460	03 c0		 add	 eax, eax
  00462	89 7d c8	 mov	 DWORD PTR _surfacePitch1$1$[ebp], edi
  00465	89 45 e0	 mov	 DWORD PTR _surfacePitch2$1$[ebp], eax
  00468	89 5d d0	 mov	 DWORD PTR tv1311[ebp], ebx
  0046b	c7 45 bc ff 00
	00 00		 mov	 DWORD PTR tv1250[ebp], 255 ; 000000ffH
$LL22@DrawStatur:

; 1538 : 					for (i = 0; i<w; i++) {

  00472	85 f6		 test	 esi, esi
  00474	0f 8e b8 00 00
	00		 jle	 $LN24@DrawStatur
  0047a	8b de		 mov	 ebx, esi
  0047c	89 75 cc	 mov	 DWORD PTR tv1303[ebp], esi
  0047f	90		 npad	 1
$LL76@DrawStatur:

; 1539 : 						nColorSource = *(WORD*)ptSourceDest;

  00480	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00483	8b f0		 mov	 esi, eax
  00485	89 45 e8	 mov	 DWORD PTR _nColorSource$4$[ebp], eax

; 1540 : 						nColorOverlayer = *(WORD*)ptOverLayerDest;

  00488	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  0048b	89 75 b8	 mov	 DWORD PTR tv1285[ebp], esi
  0048e	8b f0		 mov	 esi, eax
  00490	89 75 b0	 mov	 DWORD PTR tv1284[ebp], esi
  00493	89 45 b4	 mov	 DWORD PTR _nColorOverlayer$4$[ebp], eax

; 1541 : 						if (nColorOverlayer != DEF_COLORKEY) {

  00496	85 c0		 test	 eax, eax
  00498	74 74		 je	 SHORT $LN106@DrawStatur

; 1542 : 							SR = nColorSource >> 7;							// åæ¬è¦å³ç§»10å·¦ç§»3,ç®åæå³ç§»7
; 1543 : 							SG = (nColorSource & 0x03e0) >> 2;	// åæ¬è¦å³ç§»5å·¦ç§»3,ç®åæå³ç§»2

  0049a	8b 7d e8	 mov	 edi, DWORD PTR _nColorSource$4$[ebp]

; 1544 : 							SB = (nColorSource & 0x001f) << 3;
; 1545 : 							OR = nColorOverlayer >> 7;
; 1546 : 							OG = (nColorOverlayer & 0x03e0) >> 2;

  0049d	8b d0		 mov	 edx, eax
  0049f	8b 75 e8	 mov	 esi, DWORD PTR _nColorSource$4$[ebp]
  004a2	8b c8		 mov	 ecx, eax
  004a4	c1 e9 07	 shr	 ecx, 7
  004a7	c1 ea 02	 shr	 edx, 2
  004aa	81 e2 f8 00 00
	00		 and	 edx, 248		; 000000f8H
  004b0	c1 ef 02	 shr	 edi, 2
  004b3	c1 ee 07	 shr	 esi, 7
  004b6	81 e7 f8 00 00
	00		 and	 edi, 248		; 000000f8H

; 1547 : 							OB = (nColorOverlayer & 0x001f) << 3;
; 1548 : 							//								SR = ((SR + OR) & 0x00ff)<< 7;
; 1549 : 							//								SG = (((SG + OG) & 0x00ff)<< 2) & 0x03e0;
; 1550 : 							//								SB = (((SB + OB) & 0x00ff)>> 3) & 0x001f;
; 1551 : 							SR = ((OR > SR ? OR : SR) & 0x00ff) << 7;

  004bc	3b ce		 cmp	 ecx, esi
  004be	0f b7 c1	 movzx	 eax, cx
  004c1	0f b7 de	 movzx	 ebx, si

; 1552 : 							SG = (((OG > SG ? OG : SG) & 0x00ff) << 2) & 0x03e0;

  004c4	8b cf		 mov	 ecx, edi
  004c6	0f 47 d8	 cmova	 ebx, eax
  004c9	8b c2		 mov	 eax, edx

; 1553 : 							SB = (((OB > SB ? OB : SB) & 0x00ff) >> 3) & 0x001f;

  004cb	66 23 5d bc	 and	 bx, WORD PTR tv1250[ebp]
  004cf	66 c1 e3 05	 shl	 bx, 5
  004d3	3b d7		 cmp	 edx, edi
  004d5	8b 55 b4	 mov	 edx, DWORD PTR _nColorOverlayer$4$[ebp]
  004d8	0f 47 c8	 cmova	 ecx, eax
  004db	8b 45 b8	 mov	 eax, DWORD PTR tv1285[ebp]
  004de	83 65 e8 1f	 and	 DWORD PTR _nColorSource$4$[ebp], 31 ; 0000001fH

; 1554 : 							*(WORD*)ptSourceDest = (WORD)(SB | SG | SR);

  004e2	66 0b d9	 or	 bx, cx
  004e5	83 e2 1f	 and	 edx, 31			; 0000001fH
  004e8	0f b7 c8	 movzx	 ecx, ax
  004eb	8b 45 b0	 mov	 eax, DWORD PTR tv1284[ebp]
  004ee	66 c1 e3 02	 shl	 bx, 2
  004f2	3a 55 e8	 cmp	 dl, BYTE PTR _nColorSource$4$[ebp]
  004f5	8b 55 d8	 mov	 edx, DWORD PTR _ptSourceDest$[ebp]
  004f8	0f b7 c0	 movzx	 eax, ax
  004fb	0f 47 c8	 cmova	 ecx, eax
  004fe	66 83 e1 1f	 and	 cx, 31			; 0000001fH
  00502	66 0b d9	 or	 bx, cx
  00505	8b 4d e4	 mov	 ecx, DWORD PTR _ptOverLayerDest$[ebp]
  00508	66 89 1a	 mov	 WORD PTR [edx], bx
  0050b	8b 5d cc	 mov	 ebx, DWORD PTR tv1303[ebp]
$LN106@DrawStatur:

; 1555 : 						}
; 1556 : 						ptSourceDest = (WORD*)ptSourceDest + 1;

  0050e	83 c2 02	 add	 edx, 2

; 1557 : 						ptOverLayerDest = (WORD*)ptOverLayerDest + 1;

  00511	83 c1 02	 add	 ecx, 2
  00514	83 eb 01	 sub	 ebx, 1
  00517	89 55 d8	 mov	 DWORD PTR _ptSourceDest$[ebp], edx
  0051a	89 4d e4	 mov	 DWORD PTR _ptOverLayerDest$[ebp], ecx
  0051d	89 5d cc	 mov	 DWORD PTR tv1303[ebp], ebx
  00520	0f 85 5a ff ff
	ff		 jne	 $LL76@DrawStatur
  00526	8b 75 c0	 mov	 esi, DWORD PTR _w$2$[ebp]
  00529	8b 7d c8	 mov	 edi, DWORD PTR _surfacePitch1$1$[ebp]
  0052c	8b 45 e0	 mov	 eax, DWORD PTR _surfacePitch2$1$[ebp]
  0052f	8b 5d d0	 mov	 ebx, DWORD PTR tv1311[ebp]
$LN24@DrawStatur:

; 1558 : 					}
; 1559 : 					ptSourceDest = (WORD*)ptSourceDest + surfacePitch1 - w;

  00532	03 d7		 add	 edx, edi

; 1560 : 					ptOverLayerDest = (WORD*)ptOverLayerDest + surfacePitch2 - w;

  00534	03 c8		 add	 ecx, eax
  00536	83 eb 01	 sub	 ebx, 1
  00539	89 55 d8	 mov	 DWORD PTR _ptSourceDest$[ebp], edx
  0053c	89 4d e4	 mov	 DWORD PTR _ptOverLayerDest$[ebp], ecx
  0053f	89 5d d0	 mov	 DWORD PTR tv1311[ebp], ebx
  00542	0f 85 2a ff ff
	ff		 jne	 $LL22@DrawStatur
$LN21@DrawStatur:

; 1561 : 				}
; 1562 : 			}
; 1563 : 		}
; 1564 : 	}
; 1565 : 	lpDraw->lpBACKBUFFER->Unlock(NULL);

  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0054d	6a 00		 push	 0
  0054f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00552	50		 push	 eax
  00553	8b 08		 mov	 ecx, DWORD PTR [eax]
  00555	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]

; 1566 : 	lpSurface->Unlock(NULL);

  0055b	8b 4d ac	 mov	 ecx, DWORD PTR _lpSurface$GSCopy$1$[ebp]
  0055e	6a 00		 push	 0
  00560	51		 push	 ecx
  00561	8b 01		 mov	 eax, DWORD PTR [ecx]
  00563	ff 90 80 00 00
	00		 call	 DWORD PTR [eax+128]

; 1567 : 	rect.left = ox;

  00569	8b 5d c4	 mov	 ebx, DWORD PTR _ox$GSCopy$1$[ebp]

; 1568 : 	rect.top = oy;

  0056c	8b 55 d4	 mov	 edx, DWORD PTR _oy$GSCopy$1$[ebp]

; 1569 : 	rect.right = ox + w;
; 1570 : 	rect.bottom = oy + h;
; 1571 : 	lpDraw->lpBACKBUFFER->BltFast(ox, oy, lpDraw->lpBACKBUFFER, &rect, DDBLTFAST_WAIT);

  0056f	6a 10		 push	 16			; 00000010H
  00571	89 5d ec	 mov	 DWORD PTR _rect$[ebp], ebx
  00574	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  00577	89 55 f0	 mov	 DWORD PTR _rect$[ebp+4], edx
  0057a	89 45 f4	 mov	 DWORD PTR _rect$[ebp+8], eax
  0057d	8d 75 ec	 lea	 esi, DWORD PTR _rect$[ebp]
  00580	8b 45 dc	 mov	 eax, DWORD PTR _h$2$[ebp]
  00583	03 c2		 add	 eax, edx
  00585	89 45 f8	 mov	 DWORD PTR _rect$[ebp+12], eax
  00588	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0058d	56		 push	 esi
  0058e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00591	50		 push	 eax
  00592	52		 push	 edx
  00593	53		 push	 ebx
  00594	8b 08		 mov	 ecx, DWORD PTR [eax]
  00596	50		 push	 eax
  00597	ff 51 1c	 call	 DWORD PTR [ecx+28]
$LN27@DrawStatur:

; 1572 : 
; 1573 : 	return;
; 1574 : }

  0059a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0059d	5f		 pop	 edi
  0059e	5e		 pop	 esi
  0059f	33 cd		 xor	 ecx, ebp
  005a1	5b		 pop	 ebx
  005a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005a7	8b e5		 mov	 esp, ebp
  005a9	5d		 pop	 ebp
  005aa	c3		 ret	 0
?DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z ENDP ; DrawStaturated
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z
_TEXT	SEGMENT
_lpSurface$GSCopy$1$ = -68				; size = 4
tv1008 = -64						; size = 4
_surfacePitch1$2$ = -64					; size = 4
_ox$GSCopy$1$ = -60					; size = 4
tv1011 = -56						; size = 4
tv969 = -56						; size = 4
tv1010 = -52						; size = 4
_surfacePitch1$1$ = -52					; size = 4
_oy$GSCopy$1$ = -48					; size = 4
tv1009 = -44						; size = 4
_w$2$ = -44						; size = 4
tv1017 = -40						; size = 4
_dy$1$ = -40						; size = 4
_surfacePitch2$2$ = -36					; size = 4
_surfacePitch2$1$ = -36					; size = 4
_h$2$ = -32						; size = 4
_nColorOverlayer$1$ = -28				; size = 4
tv1018 = -28						; size = 4
_dx$1$ = -28						; size = 4
_ptSourceDest$1$ = -24					; size = 4
_ptSourceDest$1$ = -24					; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpSurface$ = 8						; size = 4
_ox$ = 12						; size = 4
_oy$ = 16						; size = 4
_offsetx$ = 20						; size = 4
_offsety$ = 24						; size = 4
_ow$ = 28						; size = 4
_oh$ = 32						; size = 4
_bLastOne$ = 36						; size = 1
_iGrayType$ = 40					; size = 4
?DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z PROC	; DrawGrayA, COMDAT

; 1240 : void DrawGrayA(LPDIRECTDRAWSURFACE lpSurface, int ox, int oy, int offsetx, int offsety, int ow, int oh, bool bLastOne, int iGrayType) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpSurface$[ebp]

; 1241 : 	static DDSURFACEDESC ddsdSource, ddsdOverlayer;
; 1242 : 	int surfacePitch1, surfacePitch2, nColorOverlayer;
; 1243 : 	int i, j, w = SURFACE_WIDTH, h = SURFACE_HEIGHT, subx, dx = 0, dy = 0;

  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	53		 push	 ebx
  00019	8b 5d 10	 mov	 ebx, DWORD PTR _oy$[ebp]
  0001c	56		 push	 esi

; 1244 : 	int R, G, B, Gray, g;
; 1245 : 	bool odd = false;
; 1246 : 	RECT rect;
; 1247 : 
; 1248 : 	if (ox >= lpDraw->xSize || ox + w <= 0 || oy >= lpDraw->ySize || oy + h <= 0) return;

  0001d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00023	8d 51 f0	 lea	 edx, DWORD PTR [ecx-16]
  00026	57		 push	 edi
  00027	8b 7d 0c	 mov	 edi, DWORD PTR _ox$[ebp]
  0002a	89 45 bc	 mov	 DWORD PTR _lpSurface$GSCopy$1$[ebp], eax
  0002d	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00033	89 7d c4	 mov	 DWORD PTR _ox$GSCopy$1$[ebp], edi
  00036	89 5d d0	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], ebx
  00039	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dx$1$[ebp], 0
  00040	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _dy$1$[ebp], 0
  00047	89 45 d4	 mov	 DWORD PTR tv1009[ebp], eax
  0004a	3b f8		 cmp	 edi, eax
  0004c	0f 8d 66 04 00
	00		 jge	 $LN15@DrawGrayA
  00052	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00055	85 c0		 test	 eax, eax
  00057	0f 8e 5b 04 00
	00		 jle	 $LN15@DrawGrayA
  0005d	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  00063	89 45 c0	 mov	 DWORD PTR tv1008[ebp], eax
  00066	3b d8		 cmp	 ebx, eax
  00068	0f 8d 4a 04 00
	00		 jge	 $LN15@DrawGrayA
  0006e	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
  00071	85 c0		 test	 eax, eax
  00073	0f 8e 3f 04 00
	00		 jle	 $LN15@DrawGrayA

; 1249 : 	if (bLastOne) {

  00079	80 7d 24 00	 cmp	 BYTE PTR _bLastOne$[ebp], 0
  0007d	74 0c		 je	 SHORT $LN16@DrawGrayA

; 1250 : 		w = ow - offsetx;

  0007f	8b 4d 1c	 mov	 ecx, DWORD PTR _ow$[ebp]

; 1251 : 		h = oh - offsety;

  00082	8b 55 20	 mov	 edx, DWORD PTR _oh$[ebp]
  00085	2b 4d 14	 sub	 ecx, DWORD PTR _offsetx$[ebp]
  00088	2b 55 18	 sub	 edx, DWORD PTR _offsety$[ebp]
$LN16@DrawGrayA:

; 1252 : 	}
; 1253 : 	if (ox + w >= lpDraw->xSize) {
; 1254 : 		w = lpDraw->xSize - ox;
; 1255 : 	}
; 1256 : 	if (oy + h >= lpDraw->ySize) h = lpDraw->ySize - oy;

  0008b	8b 75 d4	 mov	 esi, DWORD PTR tv1009[ebp]
  0008e	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00091	2b f7		 sub	 esi, edi
  00093	3b 45 d4	 cmp	 eax, DWORD PTR tv1009[ebp]
  00096	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  00099	0f 4c f1	 cmovl	 esi, ecx

; 1257 : 	if (ox < 0) {

  0009c	8b 4d c0	 mov	 ecx, DWORD PTR tv1008[ebp]
  0009f	89 4d e0	 mov	 DWORD PTR _h$2$[ebp], ecx
  000a2	29 5d e0	 sub	 DWORD PTR _h$2$[ebp], ebx
  000a5	3b c1		 cmp	 eax, ecx
  000a7	8b 45 e0	 mov	 eax, DWORD PTR _h$2$[ebp]
  000aa	0f 4c c2	 cmovl	 eax, edx
  000ad	89 75 d4	 mov	 DWORD PTR _w$2$[ebp], esi
  000b0	89 45 e0	 mov	 DWORD PTR _h$2$[ebp], eax
  000b3	85 ff		 test	 edi, edi
  000b5	79 17		 jns	 SHORT $LN19@DrawGrayA

; 1258 : 		w = w + ox;

  000b7	03 f7		 add	 esi, edi
  000b9	89 75 d4	 mov	 DWORD PTR _w$2$[ebp], esi

; 1259 : 		if (w < 0) return;

  000bc	0f 88 f6 03 00
	00		 js	 $LN15@DrawGrayA

; 1260 : 		dx = ox * -1;

  000c2	8b cf		 mov	 ecx, edi
  000c4	f7 d9		 neg	 ecx

; 1261 : 		ox = 0;

  000c6	33 ff		 xor	 edi, edi
  000c8	89 4d e4	 mov	 DWORD PTR _dx$1$[ebp], ecx
  000cb	89 7d c4	 mov	 DWORD PTR _ox$GSCopy$1$[ebp], edi
$LN19@DrawGrayA:

; 1262 : 	}
; 1263 : 	if (oy < 0) {

  000ce	85 db		 test	 ebx, ebx
  000d0	79 17		 jns	 SHORT $LN21@DrawGrayA

; 1264 : 		h = h + oy;

  000d2	03 c3		 add	 eax, ebx
  000d4	89 45 e0	 mov	 DWORD PTR _h$2$[ebp], eax

; 1265 : 		if (h < 0) return;

  000d7	0f 88 db 03 00
	00		 js	 $LN15@DrawGrayA

; 1266 : 		dy = oy * -1;

  000dd	8b c3		 mov	 eax, ebx
  000df	f7 d8		 neg	 eax

; 1267 : 		oy = 0;

  000e1	33 db		 xor	 ebx, ebx
  000e3	89 45 d8	 mov	 DWORD PTR _dy$1$[ebp], eax
  000e6	89 5d d0	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], ebx
$LN21@DrawGrayA:

; 1268 : 	}
; 1269 : 	subx = ox;
; 1270 : 
; 1271 : 	if (iGrayType == 3) g = 6;
; 1272 : 	else if (iGrayType == 4)	g = 5;
; 1273 : 
; 1274 : 	ZeroMemory(&ddsdSource, sizeof(DDSURFACEDESC));

  000e9	6a 68		 push	 104			; 00000068H
  000eb	6a 00		 push	 0
  000ed	68 04 00 00 00	 push	 OFFSET ?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+4
  000f2	e8 00 00 00 00	 call	 _memset

; 1275 : 	ddsdSource.dwSize = sizeof(DDSURFACEDESC);
; 1276 : 	ZeroMemory(&ddsdOverlayer, sizeof(DDSURFACEDESC));

  000f7	6a 68		 push	 104			; 00000068H
  000f9	6a 00		 push	 0
  000fb	68 04 00 00 00	 push	 OFFSET ?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+4
  00100	c7 05 00 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A, 108 ; 0000006cH
  0010a	e8 00 00 00 00	 call	 _memset

; 1277 : 	ddsdOverlayer.dwSize = sizeof(DDSURFACEDESC);
; 1278 : 	if (lpDraw->lpBACKBUFFER->Lock(NULL, &ddsdSource, DDLOCK_WAIT, NULL) != DD_OK) return;

  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00114	83 c4 18	 add	 esp, 24			; 00000018H
  00117	c7 05 00 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A, 108 ; 0000006cH
  00121	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00124	6a 00		 push	 0
  00126	6a 01		 push	 1
  00128	68 00 00 00 00	 push	 OFFSET ?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A
  0012d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012f	6a 00		 push	 0
  00131	50		 push	 eax
  00132	ff 51 64	 call	 DWORD PTR [ecx+100]
  00135	85 c0		 test	 eax, eax
  00137	0f 85 7b 03 00
	00		 jne	 $LN15@DrawGrayA

; 1279 : 	if (lpSurface->Lock(NULL, &ddsdOverlayer, DDLOCK_WAIT, NULL) != DD_OK) {

  0013d	8b 4d bc	 mov	 ecx, DWORD PTR _lpSurface$GSCopy$1$[ebp]
  00140	6a 00		 push	 0
  00142	6a 01		 push	 1
  00144	68 00 00 00 00	 push	 OFFSET ?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A
  00149	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014b	6a 00		 push	 0
  0014d	51		 push	 ecx
  0014e	ff 50 64	 call	 DWORD PTR [eax+100]
  00151	85 c0		 test	 eax, eax
  00153	74 24		 je	 SHORT $LN27@DrawGrayA

; 1280 : 		lpDraw->lpBACKBUFFER->Unlock(NULL);

  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0015a	6a 00		 push	 0
  0015c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0015f	50		 push	 eax
  00160	8b 08		 mov	 ecx, DWORD PTR [eax]
  00162	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]
  00168	5f		 pop	 edi

; 1379 : 	return;
; 1380 : }

  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016e	33 cd		 xor	 ecx, ebp
  00170	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
$LN27@DrawGrayA:

; 1281 : 		return;
; 1282 : 	}
; 1283 : 
; 1284 : 	unsigned char ALPHA = 150, RED = 250, GREEN = 0, BLUE = 250;
; 1285 : #ifdef _HI_COLOR_32
; 1286 : 	if (displayBpp == 32) {

  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?displayBpp@@3HA ; displayBpp
  0017e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00181	0f 85 63 01 00
	00		 jne	 $LN28@DrawGrayA

; 1287 : 		void *ptSourceDest, *ptOverLayerDest;
; 1288 : 		surfacePitch1 = ddsdSource.lPitch >> 2;
; 1289 : 		surfacePitch2 = ddsdOverlayer.lPitch >> 2;

  00187	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+16
  0018d	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+16
  00192	c1 f9 02	 sar	 ecx, 2
  00195	89 4d dc	 mov	 DWORD PTR _surfacePitch2$1$[ebp], ecx

; 1290 : 		ptSourceDest = (DWORD*)(ddsdSource.lpSurface) + oy * surfacePitch1 + ox;

  00198	8b cb		 mov	 ecx, ebx
  0019a	c1 f8 02	 sar	 eax, 2
  0019d	0f af c8	 imul	 ecx, eax
  001a0	89 45 cc	 mov	 DWORD PTR _surfacePitch1$1$[ebp], eax
  001a3	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+36
  001a8	03 cf		 add	 ecx, edi
  001aa	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]

; 1291 : 		ptOverLayerDest = (DWORD*)(ddsdOverlayer.lpSurface) + dy * surfacePitch2 + dx;

  001ad	8b 4d dc	 mov	 ecx, DWORD PTR _surfacePitch2$1$[ebp]
  001b0	0f af 4d d8	 imul	 ecx, DWORD PTR _dy$1$[ebp]
  001b4	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+36
  001b9	89 55 e8	 mov	 DWORD PTR _ptSourceDest$1$[ebp], edx
  001bc	03 4d e4	 add	 ecx, DWORD PTR _dx$1$[ebp]

; 1292 : 		// 565 æ¾ç¤ºæ¨¡å¼
; 1293 : 		if (gBitRShift == 0) {

  001bf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gBitRShift@@3HA, 0 ; gBitRShift
  001c6	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  001c9	0f 85 9a 02 00
	00		 jne	 $LN9@DrawGrayA

; 1294 : 			for (j = 0; j<h; j++) {

  001cf	8b 45 e0	 mov	 eax, DWORD PTR _h$2$[ebp]
  001d2	85 c0		 test	 eax, eax
  001d4	0f 8e 8f 02 00
	00		 jle	 $LN9@DrawGrayA
  001da	89 45 c8	 mov	 DWORD PTR tv1011[ebp], eax
  001dd	0f 1f 00	 npad	 3
$LL4@DrawGrayA:

; 1295 : 				if (oy >= 0) {

  001e0	85 db		 test	 ebx, ebx
  001e2	0f 88 e0 00 00
	00		 js	 $LN31@DrawGrayA

; 1296 : 					for (i = 0; i<w; i++) {

  001e8	85 f6		 test	 esi, esi
  001ea	0f 8e c9 00 00
	00		 jle	 $LN6@DrawGrayA
  001f0	8b df		 mov	 ebx, edi
  001f2	89 75 d8	 mov	 DWORD PTR tv1017[ebp], esi
$LL52@DrawGrayA:

; 1297 : 						if (subx >= 0) {

  001f5	85 db		 test	 ebx, ebx
  001f7	0f 88 9d 00 00
	00		 js	 $LN54@DrawGrayA

; 1298 : 							nColorOverlayer = *(DWORD*)ptOverLayerDest;

  001fd	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ff	89 45 e4	 mov	 DWORD PTR _nColorOverlayer$1$[ebp], eax

; 1299 : 							if (nColorOverlayer != DEF_COLORKEY) {

  00202	85 c0		 test	 eax, eax
  00204	0f 84 91 00 00
	00		 je	 $LN55@DrawGrayA

; 1300 : 								R = (nColorOverlayer & 0xff0000) >> 16;
; 1301 : 								G = (nColorOverlayer & 0x00ff00) >> 8;

  0020a	c1 f8 10	 sar	 eax, 16			; 00000010H
  0020d	0f b6 c0	 movzx	 eax, al

; 1302 : 								B = (nColorOverlayer & 0x0000ff);
; 1303 : 
; 1304 : 								R = RED + (R - RED) * ALPHA / 0xff;

  00210	2d fa 00 00 00	 sub	 eax, 250		; 000000faH
  00215	69 f0 96 00 00
	00		 imul	 esi, eax, 150
  0021b	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  00220	f7 ee		 imul	 esi
  00222	8b 45 e4	 mov	 eax, DWORD PTR _nColorOverlayer$1$[ebp]
  00225	0f b6 c0	 movzx	 eax, al
  00228	03 d6		 add	 edx, esi

; 1305 : 								G = GREEN + (G - GREEN) * ALPHA / 0xff;
; 1306 : 								B = BLUE + (B - BLUE) * ALPHA / 0xff;

  0022a	2d fa 00 00 00	 sub	 eax, 250		; 000000faH
  0022f	c1 fa 07	 sar	 edx, 7
  00232	69 f0 96 00 00
	00		 imul	 esi, eax, 150
  00238	8b fa		 mov	 edi, edx
  0023a	81 c2 fa ff 00
	00		 add	 edx, 65530		; 0000fffaH
  00240	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00243	03 fa		 add	 edi, edx
  00245	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  0024a	c1 e7 10	 shl	 edi, 16			; 00000010H
  0024d	f7 ee		 imul	 esi
  0024f	03 d6		 add	 edx, esi
  00251	c1 fa 07	 sar	 edx, 7
  00254	8b c2		 mov	 eax, edx
  00256	81 c2 fa 00 00
	00		 add	 edx, 250		; 000000faH
  0025c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0025f	03 c2		 add	 eax, edx

; 1307 : 								Gray = 0xff;
; 1308 : 								*(DWORD*)ptSourceDest = (DWORD)(Gray << 24 | R << 16 | G << 8 | B);

  00261	0b f8		 or	 edi, eax
  00263	8b 45 e4	 mov	 eax, DWORD PTR _nColorOverlayer$1$[ebp]
  00266	c1 f8 08	 sar	 eax, 8
  00269	0f b6 c0	 movzx	 eax, al
  0026c	69 f0 96 00 00
	00		 imul	 esi, eax, 150
  00272	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  00277	f7 ee		 imul	 esi
  00279	03 d6		 add	 edx, esi

; 1309 : 							}
; 1310 : 						}

  0027b	8b 75 d8	 mov	 esi, DWORD PTR tv1017[ebp]
  0027e	c1 fa 07	 sar	 edx, 7
  00281	8b c2		 mov	 eax, edx
  00283	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00286	03 c2		 add	 eax, edx
  00288	8b 55 e8	 mov	 edx, DWORD PTR _ptSourceDest$1$[ebp]
  0028b	c1 e0 08	 shl	 eax, 8
  0028e	0b f8		 or	 edi, eax
  00290	81 cf 00 00 00
	ff		 or	 edi, -16777216		; ff000000H
  00296	89 3a		 mov	 DWORD PTR [edx], edi
  00298	eb 01		 jmp	 SHORT $LN55@DrawGrayA
$LN54@DrawGrayA:

; 1311 : 						else subx++;

  0029a	43		 inc	 ebx
$LN55@DrawGrayA:

; 1312 : 						ptSourceDest = (DWORD*)ptSourceDest + 1;

  0029b	83 c2 04	 add	 edx, 4

; 1313 : 						ptOverLayerDest = (DWORD*)ptOverLayerDest + 1;

  0029e	83 c1 04	 add	 ecx, 4
  002a1	83 ee 01	 sub	 esi, 1
  002a4	89 55 e8	 mov	 DWORD PTR _ptSourceDest$1$[ebp], edx
  002a7	89 75 d8	 mov	 DWORD PTR tv1017[ebp], esi
  002aa	0f 85 45 ff ff
	ff		 jne	 $LL52@DrawGrayA
  002b0	8b 75 d4	 mov	 esi, DWORD PTR _w$2$[ebp]
  002b3	8b 5d d0	 mov	 ebx, DWORD PTR _oy$GSCopy$1$[ebp]
  002b6	8b 7d c4	 mov	 edi, DWORD PTR _ox$GSCopy$1$[ebp]
$LN6@DrawGrayA:

; 1314 : 					}
; 1315 : 					ptSourceDest = (DWORD*)ptSourceDest + surfacePitch1 - w;

  002b9	8b 45 cc	 mov	 eax, DWORD PTR _surfacePitch1$1$[ebp]
  002bc	2b c6		 sub	 eax, esi
  002be	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]

; 1316 : 					ptOverLayerDest = (DWORD*)ptOverLayerDest + surfacePitch2 - w;

  002c1	8b 45 dc	 mov	 eax, DWORD PTR _surfacePitch2$1$[ebp]
  002c4	2b c6		 sub	 eax, esi

; 1317 : 					subx = ox;
; 1318 : 				}

  002c6	eb 0d		 jmp	 SHORT $LN70@DrawGrayA
$LN31@DrawGrayA:

; 1319 : 				else {
; 1320 : 					ptSourceDest = (DWORD*)ptSourceDest + surfacePitch1;

  002c8	8b 45 cc	 mov	 eax, DWORD PTR _surfacePitch1$1$[ebp]

; 1321 : 					ptOverLayerDest = (DWORD*)ptOverLayerDest + surfacePitch2;
; 1322 : 					oy++;

  002cb	43		 inc	 ebx
  002cc	89 5d d0	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], ebx
  002cf	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  002d2	8b 45 dc	 mov	 eax, DWORD PTR _surfacePitch2$1$[ebp]
$LN70@DrawGrayA:

; 1294 : 			for (j = 0; j<h; j++) {

  002d5	83 6d c8 01	 sub	 DWORD PTR tv1011[ebp], 1
  002d9	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  002dc	89 55 e8	 mov	 DWORD PTR _ptSourceDest$1$[ebp], edx
  002df	0f 85 fb fe ff
	ff		 jne	 $LL4@DrawGrayA

; 1323 : 				}
; 1324 : 			}
; 1325 : 		}
; 1326 : 	}

  002e5	e9 7f 01 00 00	 jmp	 $LN9@DrawGrayA
$LN28@DrawGrayA:

; 1327 : 	else
; 1328 : #endif
; 1329 : 		if (displayBpp == 16) {

  002ea	83 f8 10	 cmp	 eax, 16			; 00000010H
  002ed	0f 85 76 01 00
	00		 jne	 $LN9@DrawGrayA

; 1330 : 			void *ptSourceDest, *ptOverLayerDest;
; 1331 : 			surfacePitch1 = ddsdSource.lPitch >> 1;
; 1332 : 			surfacePitch2 = ddsdOverlayer.lPitch >> 1;

  002f3	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+16
  002f9	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+16
  002fe	d1 f9		 sar	 ecx, 1
  00300	89 4d dc	 mov	 DWORD PTR _surfacePitch2$2$[ebp], ecx

; 1333 : 			ptSourceDest = (WORD*)(ddsdSource.lpSurface) + oy * surfacePitch1 + ox;

  00303	8b cb		 mov	 ecx, ebx
  00305	d1 f8		 sar	 eax, 1
  00307	0f af c8	 imul	 ecx, eax
  0030a	89 45 c0	 mov	 DWORD PTR _surfacePitch1$2$[ebp], eax
  0030d	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdSource@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+36
  00312	03 cf		 add	 ecx, edi
  00314	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]

; 1334 : 			ptOverLayerDest = (WORD*)(ddsdOverlayer.lpSurface) + dy * surfacePitch2 + dx;

  00317	8b 4d dc	 mov	 ecx, DWORD PTR _surfacePitch2$2$[ebp]
  0031a	0f af 4d d8	 imul	 ecx, DWORD PTR _dy$1$[ebp]
  0031e	a1 24 00 00 00	 mov	 eax, DWORD PTR ?ddsdOverlayer@?1??DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z@4U_DDSURFACEDESC@@A+36
  00323	89 55 e8	 mov	 DWORD PTR _ptSourceDest$1$[ebp], edx
  00326	03 4d e4	 add	 ecx, DWORD PTR _dx$1$[ebp]

; 1335 : 
; 1336 : 			// 565 æ¾ç¤ºæ¨¡å¼
; 1337 : 			if (gBitRShift == 2) {

  00329	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?gBitRShift@@3HA, 2 ; gBitRShift
  00330	8d 3c 48	 lea	 edi, DWORD PTR [eax+ecx*2]
  00333	0f 85 30 01 00
	00		 jne	 $LN9@DrawGrayA

; 1338 : 				for (j = 0; j<h; j++) {

  00339	8b 45 e0	 mov	 eax, DWORD PTR _h$2$[ebp]
  0033c	85 c0		 test	 eax, eax
  0033e	0f 8e 25 01 00
	00		 jle	 $LN9@DrawGrayA
  00344	8b c8		 mov	 ecx, eax
  00346	89 45 e4	 mov	 DWORD PTR tv1018[ebp], eax
  00349	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@DrawGrayA:

; 1339 : 					if (oy >= 0) {

  00350	85 db		 test	 ebx, ebx
  00352	0f 88 f2 00 00
	00		 js	 $LN38@DrawGrayA

; 1340 : 						for (i = 0; i<w; i++) {

  00358	85 f6		 test	 esi, esi
  0035a	0f 8e db 00 00
	00		 jle	 $LN12@DrawGrayA
  00360	8b 5d c4	 mov	 ebx, DWORD PTR _ox$GSCopy$1$[ebp]
  00363	8b ce		 mov	 ecx, esi
  00365	89 75 cc	 mov	 DWORD PTR tv1010[ebp], esi
$LL57@DrawGrayA:

; 1341 : 							if (subx >= 0) {

  00368	85 db		 test	 ebx, ebx
  0036a	0f 88 ac 00 00
	00		 js	 $LN59@DrawGrayA

; 1342 : 								nColorOverlayer = *(WORD*)ptOverLayerDest;

  00370	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00373	89 45 c8	 mov	 DWORD PTR tv969[ebp], eax

; 1343 : 								if (nColorOverlayer != DEF_COLORKEY) {

  00376	85 c0		 test	 eax, eax
  00378	0f 84 9f 00 00
	00		 je	 $LN60@DrawGrayA

; 1344 : 									R = (nColorOverlayer & 0xf800) >> 8;
; 1345 : 									G = (nColorOverlayer & 0x07e0) >> 3;
; 1346 : 									B = (nColorOverlayer & 0x001f) << 3;

  0037e	c1 e8 08	 shr	 eax, 8
  00381	25 f8 00 00 00	 and	 eax, 248		; 000000f8H

; 1347 : 									R = RED + (R - RED) * ALPHA / 0xff;

  00386	2d fa 00 00 00	 sub	 eax, 250		; 000000faH
  0038b	69 c8 96 00 00
	00		 imul	 ecx, eax, 150
  00391	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  00396	f7 e9		 imul	 ecx
  00398	8b 45 c8	 mov	 eax, DWORD PTR tv969[ebp]
  0039b	c1 e8 03	 shr	 eax, 3
  0039e	03 d1		 add	 edx, ecx
  003a0	25 fc 00 00 00	 and	 eax, 252		; 000000fcH
  003a5	c1 fa 07	 sar	 edx, 7

; 1348 : 									G = GREEN + (G - GREEN) * ALPHA / 0xff;

  003a8	69 c8 96 00 00
	00		 imul	 ecx, eax, 150
  003ae	8b f2		 mov	 esi, edx

; 1349 : 									B = BLUE + (B - BLUE) * ALPHA / 0xff;

  003b0	81 c2 fa 00 00
	00		 add	 edx, 250		; 000000faH
  003b6	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  003b9	03 f2		 add	 esi, edx
  003bb	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  003c0	c1 e6 08	 shl	 esi, 8
  003c3	81 e6 00 f8 00
	00		 and	 esi, 63488		; 0000f800H
  003c9	f7 e9		 imul	 ecx
  003cb	03 d1		 add	 edx, ecx
  003cd	c1 fa 07	 sar	 edx, 7
  003d0	8b c2		 mov	 eax, edx
  003d2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003d5	03 c2		 add	 eax, edx
  003d7	c1 e0 03	 shl	 eax, 3
  003da	25 e0 07 00 00	 and	 eax, 2016		; 000007e0H

; 1350 : 									Gray = 0xff;
; 1351 : 
; 1352 : 									//Gray = (R*3+G*6+B)/10;
; 1353 : 									*(WORD*)ptSourceDest = (WORD)((R & 0xf8) << 8 | (G & 0xfc) << 3 | B >> 3);

  003df	0b f0		 or	 esi, eax
  003e1	8b 45 c8	 mov	 eax, DWORD PTR tv969[ebp]
  003e4	83 e0 1f	 and	 eax, 31			; 0000001fH
  003e7	69 c8 b0 04 00
	00		 imul	 ecx, eax, 1200
  003ed	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  003f2	81 e9 7c 92 00
	00		 sub	 ecx, 37500		; 0000927cH
  003f8	f7 e9		 imul	 ecx
  003fa	03 d1		 add	 edx, ecx

; 1354 : 								}
; 1355 : 							}

  003fc	8b 4d cc	 mov	 ecx, DWORD PTR tv1010[ebp]
  003ff	c1 fa 07	 sar	 edx, 7
  00402	8b c2		 mov	 eax, edx
  00404	81 c2 fa 00 00
	00		 add	 edx, 250		; 000000faH
  0040a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0040d	03 c2		 add	 eax, edx
  0040f	8b 55 e8	 mov	 edx, DWORD PTR _ptSourceDest$1$[ebp]
  00412	c1 f8 03	 sar	 eax, 3
  00415	0b f0		 or	 esi, eax
  00417	66 89 32	 mov	 WORD PTR [edx], si
  0041a	eb 01		 jmp	 SHORT $LN60@DrawGrayA
$LN59@DrawGrayA:

; 1356 : 							else subx++;

  0041c	43		 inc	 ebx
$LN60@DrawGrayA:

; 1357 : 							ptSourceDest = (WORD*)ptSourceDest + 1;

  0041d	83 c2 02	 add	 edx, 2

; 1358 : 							ptOverLayerDest = (WORD*)ptOverLayerDest + 1;

  00420	83 c7 02	 add	 edi, 2
  00423	83 e9 01	 sub	 ecx, 1
  00426	89 55 e8	 mov	 DWORD PTR _ptSourceDest$1$[ebp], edx
  00429	89 4d cc	 mov	 DWORD PTR tv1010[ebp], ecx
  0042c	0f 85 36 ff ff
	ff		 jne	 $LL57@DrawGrayA
  00432	8b 75 d4	 mov	 esi, DWORD PTR _w$2$[ebp]
  00435	8b 5d d0	 mov	 ebx, DWORD PTR _oy$GSCopy$1$[ebp]
  00438	8b 4d e4	 mov	 ecx, DWORD PTR tv1018[ebp]
$LN12@DrawGrayA:

; 1359 : 						}
; 1360 : 						ptSourceDest = (WORD*)ptSourceDest + surfacePitch1 - w;

  0043b	8b 45 c0	 mov	 eax, DWORD PTR _surfacePitch1$2$[ebp]
  0043e	2b c6		 sub	 eax, esi
  00440	8d 14 42	 lea	 edx, DWORD PTR [edx+eax*2]

; 1361 : 						ptOverLayerDest = (WORD*)ptOverLayerDest + surfacePitch2 - w;

  00443	8b 45 dc	 mov	 eax, DWORD PTR _surfacePitch2$2$[ebp]
  00446	2b c6		 sub	 eax, esi

; 1362 : 						subx = ox;
; 1363 : 					}

  00448	eb 0d		 jmp	 SHORT $LN71@DrawGrayA
$LN38@DrawGrayA:

; 1364 : 					else {
; 1365 : 						ptSourceDest = (WORD*)ptSourceDest + surfacePitch1;

  0044a	8b 45 c0	 mov	 eax, DWORD PTR _surfacePitch1$2$[ebp]

; 1366 : 						ptOverLayerDest = (WORD*)ptOverLayerDest + surfacePitch2;
; 1367 : 						oy++;

  0044d	43		 inc	 ebx
  0044e	89 5d d0	 mov	 DWORD PTR _oy$GSCopy$1$[ebp], ebx
  00451	8d 14 42	 lea	 edx, DWORD PTR [edx+eax*2]
  00454	8b 45 dc	 mov	 eax, DWORD PTR _surfacePitch2$2$[ebp]
$LN71@DrawGrayA:

; 1338 : 				for (j = 0; j<h; j++) {

  00457	83 e9 01	 sub	 ecx, 1
  0045a	89 55 e8	 mov	 DWORD PTR _ptSourceDest$1$[ebp], edx
  0045d	8d 3c 47	 lea	 edi, DWORD PTR [edi+eax*2]
  00460	89 4d e4	 mov	 DWORD PTR tv1018[ebp], ecx
  00463	0f 85 e7 fe ff
	ff		 jne	 $LL10@DrawGrayA
$LN9@DrawGrayA:

; 1368 : 					}
; 1369 : 				}
; 1370 : 			}
; 1371 : 		}
; 1372 : 	lpSurface->Unlock(NULL);

  00469	8b 4d bc	 mov	 ecx, DWORD PTR _lpSurface$GSCopy$1$[ebp]
  0046c	6a 00		 push	 0
  0046e	51		 push	 ecx
  0046f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00471	ff 90 80 00 00
	00		 call	 DWORD PTR [eax+128]

; 1373 : 	lpDraw->lpBACKBUFFER->Unlock(NULL);

  00477	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0047c	6a 00		 push	 0
  0047e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00481	50		 push	 eax
  00482	8b 08		 mov	 ecx, DWORD PTR [eax]
  00484	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]

; 1374 : 	rect.left = ox;

  0048a	8b 55 c4	 mov	 edx, DWORD PTR _ox$GSCopy$1$[ebp]

; 1375 : 	rect.top = oy;
; 1376 : 	rect.right = ox + w;
; 1377 : 	rect.bottom = oy + h;
; 1378 : 	lpDraw->lpBACKBUFFER->BltFast(ox, oy, lpDraw->lpBACKBUFFER, &rect, DDBLTFAST_WAIT);

  0048d	6a 10		 push	 16			; 00000010H
  0048f	89 55 ec	 mov	 DWORD PTR _rect$[ebp], edx
  00492	89 5d f0	 mov	 DWORD PTR _rect$[ebp+4], ebx
  00495	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00498	89 45 f4	 mov	 DWORD PTR _rect$[ebp+8], eax
  0049b	8d 75 ec	 lea	 esi, DWORD PTR _rect$[ebp]
  0049e	8b 45 e0	 mov	 eax, DWORD PTR _h$2$[ebp]
  004a1	03 c3		 add	 eax, ebx
  004a3	89 45 f8	 mov	 DWORD PTR _rect$[ebp+12], eax
  004a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  004ab	56		 push	 esi
  004ac	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  004af	50		 push	 eax
  004b0	53		 push	 ebx
  004b1	52		 push	 edx
  004b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  004b4	50		 push	 eax
  004b5	ff 51 1c	 call	 DWORD PTR [ecx+28]
$LN15@DrawGrayA:

; 1379 : 	return;
; 1380 : }

  004b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004bb	5f		 pop	 edi
  004bc	5e		 pop	 esi
  004bd	33 cd		 xor	 ecx, ebp
  004bf	5b		 pop	 ebx
  004c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c5	8b e5		 mov	 esp, ebp
  004c7	5d		 pop	 ebp
  004c8	c3		 ret	 0
?DrawGrayA@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z ENDP	; DrawGrayA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?DrawAni@@YAXXZ
_TEXT	SEGMENT
_i$1$ = -4						; size = 4
?DrawAni@@YAXXZ PROC					; DrawAni, COMDAT

; 1026 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1027 : 	DISP_INFO 	*pDispInfo;
; 1028 : 	int bmpNo;
; 1029 : 	SURFACE_INFO *lpSurfaceInfo;
; 1030 : #ifdef _READ16BITBMP
; 1031 : 	SURFACE_INFO *lpSurfaceInfoSys;
; 1032 : #endif
; 1033 : 
; 1034 : 	if (ProcNo != PROC_BATTLE) {

  00004	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  0000b	0f 84 a8 01 00
	00		 je	 $LN18@DrawAni

; 1035 : 		pSortTileTail = DispBuffer.DispSort;
; 1036 : 		DispBuffer.DispCnt += iProcessAniNum;

  00011	66 8b 15 00 c0
	01 00		 mov	 dx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688

; 1037 : 		for (int i = 0; i<DispBuffer.DispCnt; i++, pSortTileTail++) {

  00018	33 c0		 xor	 eax, eax
  0001a	66 03 15 00 00
	00 00		 add	 dx, WORD PTR ?iProcessAniNum@@3HA
  00021	b9 00 80 01 00	 mov	 ecx, OFFSET ?DispBuffer@@3UDISP_BUFFER@@A+98304
  00026	53		 push	 ebx
  00027	33 db		 xor	 ebx, ebx
  00029	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pSortTileTail@@3PAUDISP_SORT@@A, ecx ; pSortTileTail
  0002f	66 89 15 00 c0
	01 00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, dx
  00036	89 5d fc	 mov	 DWORD PTR _i$1$[ebp], ebx
  00039	56		 push	 esi
  0003a	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]
  0003d	66 3b c2	 cmp	 ax, dx
  00040	0f 8d 37 01 00
	00		 jge	 $LN30@DrawAni
  00046	57		 push	 edi
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@DrawAni:

; 1038 : 			if (pSortTileTail->dispPrio == DISP_PRIO_TILE) continue;

  00050	80 79 02 01	 cmp	 BYTE PTR [ecx+2], 1
  00054	0f 84 f9 00 00
	00		 je	 $LN2@DrawAni

; 1039 : 			// å ä¸ºææåºè¿,æä»¥å¦æç®åçæ¾ç¤ºé¡ºåºæ¯å°è¡¨å¤§çè¯,è¡¨ç¤ºå°è¡¨å·²ç»å¤çå®äº
; 1040 : 			if (pSortTileTail->dispPrio > DISP_PRIO_TILE) {

  0005a	0f 87 0d 01 00
	00		 ja	 $LN22@DrawAni

; 1042 : 				break;
; 1043 : 			}
; 1044 : 			// åå¾ç¬¬ä¸ä¸ªè¦å¤ççå¾ç DispInfo èµæ
; 1045 : 			pDispInfo = DispBuffer.DispInfo + pSortTileTail->no;

  00060	0f bf 01	 movsx	 eax, WORD PTR [ecx]
  00063	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]

; 1047 : 
; 1048 : 			if (pDispInfo->pAct != NULL) {

  00066	8b 04 fd 0c 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+12]
  0006d	85 c0		 test	 eax, eax
  0006f	74 0d		 je	 SHORT $LN27@DrawAni

; 1049 : 				if (pDispInfo->pAct->atr & ACT_ATR_HIDE2) continue;

  00071	f6 80 a4 00 00
	00 20		 test	 BYTE PTR [eax+164], 32	; 00000020H
  00078	0f 85 d5 00 00
	00		 jne	 $LN2@DrawAni
$LN27@DrawAni:

; 1046 : 			bmpNo = pDispInfo->bmpNo; // ???î±?

  0007e	8b 34 fd 08 00
	00 00		 mov	 esi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+8]

; 1050 : 			}
; 1051 : 			if (LoadBmp(bmpNo) == FALSE) continue;

  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp
  0008b	83 c4 04	 add	 esp, 4
  0008e	85 c0		 test	 eax, eax
  00090	0f 84 b0 00 00
	00		 je	 $LN31@DrawAni

; 1052 : #ifdef _READ16BITBMP
; 1053 : 			if (g_bUseAlpha) {
; 1054 : 				for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo, lpSurfaceInfoSys = SpriteInfo[bmpNo].lpSurfaceInfoSys
; 1055 : 					; lpSurfaceInfo != NULL, lpSurfaceInfoSys != NULL
; 1056 : 					; lpSurfaceInfo = lpSurfaceInfo->pNext, lpSurfaceInfoSys = lpSurfaceInfoSys->pNext) {
; 1057 : 					if (ResoMode == 1) {
; 1058 : 						if (DrawSurfaceFast((pDispInfo->x >> 1) + lpSurfaceInfo->offsetX, (pDispInfo->y >> 1) + lpSurfaceInfo->offsetY,
; 1059 : 							lpSurfaceInfo->lpSurface, lpSurfaceInfoSys->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;
; 1060 : 					}
; 1061 : 					else {
; 1062 : 						if (DrawSurfaceFast(pDispInfo->x + lpSurfaceInfo->offsetX,
; 1063 : 							pDispInfo->y + lpSurfaceInfo->offsetY,
; 1064 : 							lpSurfaceInfo->lpSurface, lpSurfaceInfoSys->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;
; 1065 : 					}
; 1066 : 					lpSurfaceInfo->date = SurfaceDate;
; 1067 : 				}
; 1068 : 			}
; 1069 : 			else
; 1070 : #endif
; 1071 : 			{
; 1072 : 				for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo; lpSurfaceInfo != NULL; lpSurfaceInfo = lpSurfaceInfo->pNext) {

  00096	8d 34 76	 lea	 esi, DWORD PTR [esi+esi*2]
  00099	8b 34 b5 00 00
	00 00		 mov	 esi, DWORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[esi*4]
  000a0	85 f6		 test	 esi, esi
  000a2	0f 84 9e 00 00
	00		 je	 $LN31@DrawAni
  000a8	bb 01 00 00 00	 mov	 ebx, 1
  000ad	0f 1f 00	 npad	 3
$LL7@DrawAni:

; 1073 : 					if (ResoMode == 1) {

  000b0	8b 06		 mov	 eax, DWORD PTR [esi]
  000b2	50		 push	 eax
  000b3	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?ResoMode@@3HA, ebx ; ResoMode
  000b9	75 39		 jne	 SHORT $LN14@DrawAni

; 1074 : 						if (DrawSurfaceFast((pDispInfo->x >> 1) + lpSurfaceInfo->offsetX,
; 1075 : 							(pDispInfo->y >> 1) + lpSurfaceInfo->offsetY,
; 1076 : 							lpSurfaceInfo->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;

  000bb	8b 04 fd 04 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+4]
  000c2	d1 f8		 sar	 eax, 1
  000c4	66 03 46 16	 add	 ax, WORD PTR [esi+22]
  000c8	0f b7 c0	 movzx	 eax, ax
  000cb	50		 push	 eax
  000cc	8b 04 fd 00 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8]
  000d3	d1 f8		 sar	 eax, 1
  000d5	66 03 46 14	 add	 ax, WORD PTR [esi+20]
  000d9	0f b7 c0	 movzx	 eax, ax
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ?DrawSurfaceFast@@YAJFFPAUIDirectDrawSurface@@@Z ; DrawSurfaceFast
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e5	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  000ea	75 44		 jne	 SHORT $LN17@DrawAni
  000ec	89 1d 00 00 00
	00		 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, ebx ; SurfaceBusyFlag

; 1077 : 					}

  000f2	eb 3c		 jmp	 SHORT $LN17@DrawAni
$LN14@DrawAni:

; 1078 : 					else {
; 1079 : #ifdef _CACHE_SURFACE_
; 1080 : 						DrawSurfaceFromPalette(lpSurfaceInfo);
; 1081 : #endif
; 1082 : 						if (DrawSurfaceFast(pDispInfo->x + lpSurfaceInfo->offsetX,
; 1083 : 							pDispInfo->y + lpSurfaceInfo->offsetY,
; 1084 : 							lpSurfaceInfo->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;

  000f4	0f b7 46 16	 movzx	 eax, WORD PTR [esi+22]
  000f8	66 03 04 fd 04
	00 00 00	 add	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+4]
  00100	0f b7 c0	 movzx	 eax, ax
  00103	50		 push	 eax
  00104	0f b7 46 14	 movzx	 eax, WORD PTR [esi+20]
  00108	66 03 04 fd 00
	00 00 00	 add	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8]
  00110	0f b7 c0	 movzx	 eax, ax
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?DrawSurfaceFast@@YAJFFPAUIDirectDrawSurface@@@Z ; DrawSurfaceFast
  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SurfaceBusyFlag@@3HA ; SurfaceBusyFlag
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00122	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  00127	0f 44 cb	 cmove	 ecx, ebx
  0012a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, ecx ; SurfaceBusyFlag
$LN17@DrawAni:

; 1085 : 					}
; 1086 : 					lpSurfaceInfo->date = SurfaceDate;

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SurfaceDate@@3IA ; SurfaceDate
  00135	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00138	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  0013b	85 f6		 test	 esi, esi
  0013d	0f 85 6d ff ff
	ff		 jne	 $LL7@DrawAni
  00143	8b 5d fc	 mov	 ebx, DWORD PTR _i$1$[ebp]
$LN31@DrawAni:

; 1037 : 		for (int i = 0; i<DispBuffer.DispCnt; i++, pSortTileTail++) {

  00146	66 8b 15 00 c0
	01 00		 mov	 dx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0014d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pSortTileTail@@3PAUDISP_SORT@@A ; pSortTileTail
$LN2@DrawAni:
  00153	43		 inc	 ebx
  00154	0f bf c2	 movsx	 eax, dx
  00157	83 c1 04	 add	 ecx, 4
  0015a	89 5d fc	 mov	 DWORD PTR _i$1$[ebp], ebx
  0015d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pSortTileTail@@3PAUDISP_SORT@@A, ecx ; pSortTileTail
  00163	3b d8		 cmp	 ebx, eax
  00165	0f 8c e5 fe ff
	ff		 jl	 $LL4@DrawAni
  0016b	eb 0a		 jmp	 SHORT $LN32@DrawAni
$LN22@DrawAni:

; 1041 : 				DispBuffer.DispCnt -= i;

  0016d	66 2b d3	 sub	 dx, bx
  00170	66 89 15 00 c0
	01 00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, dx
$LN32@DrawAni:

; 1037 : 		for (int i = 0; i<DispBuffer.DispCnt; i++, pSortTileTail++) {

  00177	be 01 00 00 00	 mov	 esi, 1
  0017c	5f		 pop	 edi
$LN30@DrawAni:

; 1087 : 				}
; 1088 : 			}
; 1089 : 		}
; 1090 : 		if (fastDrawTile && lpDraw->lpBACKBUFFER->BltFast(0, 0, lpBattleSurface, NULL, DDBLTFAST_WAIT | DDBLTFAST_SRCCOLORKEY) == DDERR_SURFACEBUSY) {

  0017d	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?fastDrawTile@@3FB, 0 ; fastDrawTile
  00185	74 30		 je	 SHORT $LN33@DrawAni
  00187	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0018c	6a 11		 push	 17			; 00000011H
  0018e	6a 00		 push	 0
  00190	ff 35 00 00 00
	00		 push	 DWORD PTR ?lpBattleSurface@@3PAUIDirectDrawSurface@@A ; lpBattleSurface
  00196	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00199	6a 00		 push	 0
  0019b	6a 00		 push	 0
  0019d	50		 push	 eax
  0019e	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a0	ff 51 1c	 call	 DWORD PTR [ecx+28]
  001a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SurfaceBusyFlag@@3HA ; SurfaceBusyFlag
  001a9	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  001ae	0f 44 ce	 cmove	 ecx, esi
  001b1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, ecx ; SurfaceBusyFlag
$LN33@DrawAni:
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx
$LN18@DrawAni:

; 1091 : 			SurfaceBusyFlag = TRUE;
; 1092 : 			return;
; 1093 : 		}
; 1094 : 
; 1095 : #ifdef _READ16BITBMP
; 1096 : 		if (g_bUseAlpha) {
; 1097 : 			if (fastDrawTile && lpDraw->lpBACKBUFFERSYS->BltFast(0, 0, lpBattleSurfaceSys, NULL, DDBLTFAST_WAIT | DDBLTFAST_SRCCOLORKEY) == DDERR_SURFACEBUSY) {
; 1098 : 				SurfaceBusyFlag = TRUE;
; 1099 : 				return;
; 1100 : 			}
; 1101 : 		}
; 1102 : #endif
; 1103 : 	}
; 1104 : }

  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
?DrawAni@@YAXXZ ENDP					; DrawAni
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?GetBoxDispBuffer@@YAXPAUDISP_INFO@@H@Z
_TEXT	SEGMENT
_DispInfoY$ = -28					; size = 4
_DispInfoX$ = -24					; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_pDispInfo$ = 8						; size = 4
_bmpNo$ = 12						; size = 4
?GetBoxDispBuffer@@YAXPAUDISP_INFO@@H@Z PROC		; GetBoxDispBuffer, COMDAT

; 958  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pDispInfo$[ebp]

; 959  : 	// ??????
; 960  : 	RECT rect;
; 961  : 	int color; // î
; 962  : 	BOOL fill = FALSE; // î???????
; 963  : 	int DispInfoX = pDispInfo->x;

  00013	8b 08		 mov	 ecx, DWORD PTR [eax]

; 964  : 	int DispInfoY = pDispInfo->y;

  00015	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 965  : 
; 966  : 	// ?î³?î?î?
; 967  : 	rect.right = (LONG)(pDispInfo->x & 0xffff);

  00018	0f b7 c1	 movzx	 eax, cx
  0001b	89 45 f4	 mov	 DWORD PTR _rect$[ebp+8], eax

; 968  : 	rect.bottom = (LONG)(pDispInfo->y & 0xffff);

  0001e	0f b7 c2	 movzx	 eax, dx
  00021	89 4d e8	 mov	 DWORD PTR _DispInfoX$[ebp], ecx
  00024	89 55 e4	 mov	 DWORD PTR _DispInfoY$[ebp], edx
  00027	89 45 f8	 mov	 DWORD PTR _rect$[ebp+12], eax

; 969  : 
; 970  : 	// ??????????
; 971  : 	_asm {
; 972  : 		// rect.left ?î?î?
; 973  : 		mov		cl, 16				// ??????????

  0002a	b1 10		 mov	 cl, 16			; 00000010H

; 974  : 		mov		eax, [DispInfoX]

  0002c	8b 45 e8	 mov	 eax, DWORD PTR _DispInfoX$[ebp]

; 975  : 		sar		eax, cl				// ??î????

  0002f	d3 f8		 sar	 eax, cl

; 976  : 		mov[rect.left], eax

  00031	89 45 ec	 mov	 DWORD PTR _rect$[ebp], eax

; 977  : 		// rect.top ?î?î?
; 978  : 		mov		eax, [DispInfoY]

  00034	8b 45 e4	 mov	 eax, DWORD PTR _DispInfoY$[ebp]

; 979  : 		sar		eax, cl

  00037	d3 f8		 sar	 eax, cl

; 980  : 		mov[rect.top], eax

  00039	89 45 f0	 mov	 DWORD PTR _rect$[ebp+4], eax

; 981  : 	}
; 982  : 
; 983  : 
; 984  : 	// ???????
; 985  : 	if (bmpNo & STOCK_DISP_BUFFER_BOX) {

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _bmpNo$[ebp]
  0003f	a9 00 00 00 20	 test	 eax, 536870912		; 20000000H
  00044	74 04		 je	 SHORT $LN2@GetBoxDisp

; 986  : 		color = bmpNo & 0xff; 			// î????î?î?
; 987  : 		DrawBox(&rect, color, 0);	// ????î¼?

  00046	6a 00		 push	 0

; 988  : 
; 989  : 									// î???????
; 990  : 	}

  00048	eb 14		 jmp	 SHORT $LN8@GetBoxDisp
$LN2@GetBoxDisp:

; 991  : 	else if (bmpNo & STOCK_DISP_BUFFER_BOX_FILL) {

  0004a	a9 00 00 00 10	 test	 eax, 268435456		; 10000000H
  0004f	74 04		 je	 SHORT $LN4@GetBoxDisp

; 992  : 		color = color = bmpNo & 0xff;	// îîî
; 993  : 		DrawBox(&rect, color, 1);	// ????î¼?

  00051	6a 01		 push	 1

; 994  : 
; 995  : 	}

  00053	eb 09		 jmp	 SHORT $LN8@GetBoxDisp
$LN4@GetBoxDisp:

; 996  : 	else if (bmpNo & STOCK_DISP_BUFFER_LINE) {

  00055	a9 00 00 00 40	 test	 eax, 1073741824		; 40000000H
  0005a	74 0f		 je	 SHORT $LN6@GetBoxDisp

; 997  : 		color = color = bmpNo & 0xff;	// îîî
; 998  : 		DrawBox(&rect, color, 2);	// ???î¼?

  0005c	6a 02		 push	 2
$LN8@GetBoxDisp:

; 999  : 	}
; 1000 : }

  0005e	50		 push	 eax
  0005f	8d 45 ec	 lea	 eax, DWORD PTR _rect$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?DrawBox@@YAXPAUtagRECT@@EH@Z ; DrawBox
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@GetBoxDisp:
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?GetBoxDispBuffer@@YAXPAUDISP_INFO@@H@Z ENDP		; GetBoxDispBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?SortComp@@YAHPAUDISP_SORT@@0@Z
_TEXT	SEGMENT
_pDisp1$ = 8						; size = 4
_pDisp2$ = 12						; size = 4
?SortComp@@YAHPAUDISP_SORT@@0@Z PROC			; SortComp, COMDAT

; 1004 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1005 : 	// pDisp1 ?î¸î?îî?îµ?î«????î¼?î?
; 1006 : 	if (pDisp1->dispPrio > pDisp2->dispPrio) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _pDisp1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pDisp2$[ebp]
  00009	53		 push	 ebx
  0000a	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0000d	3a 51 02	 cmp	 dl, BYTE PTR [ecx+2]
  00010	77 12		 ja	 SHORT $LN4@SortComp

; 1007 : 		return 1;
; 1008 : 	}
; 1009 : 
; 1010 : 	// pDisp2 ?î¸î?îî?îµ?î«????????
; 1011 : 	if (pDisp1->dispPrio < pDisp2->dispPrio) {

  00012	72 08		 jb	 SHORT $LN6@SortComp

; 1012 : 		return -1;
; 1013 : 	}
; 1014 : 	// ?????î????
; 1015 : 	// pDisp1 ?îµ?????????????????
; 1016 : 	if (pDisp1->no > pDisp2->no) {

  00014	66 8b 00	 mov	 ax, WORD PTR [eax]
  00017	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  0001a	7e 08		 jle	 SHORT $LN4@SortComp
$LN6@SortComp:

; 1017 : 		return -1;

  0001c	b8 ff ff ff ff	 mov	 eax, -1
  00021	5b		 pop	 ebx

; 1021 : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN4@SortComp:

; 1018 : 	}
; 1019 : 	// ????????î¼?î???????
; 1020 : 	return 1;

  00024	b8 01 00 00 00	 mov	 eax, 1
  00029	5b		 pop	 ebx

; 1021 : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?SortComp@@YAHPAUDISP_SORT@@0@Z ENDP			; SortComp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ??ö¢??ô©õ»@@YAHPAUaction@@PAF1@Z
_TEXT	SEGMENT
_BmpNo$1 = 8						; size = 4
_a0$ = 8						; size = 4
_wx$ = 12						; size = 4
_wy$ = 16						; size = 4
??ö¢??ô©õ»@@YAHPAUaction@@PAF1@Z PROC			; ?ö¢??ô©õ», COMDAT

; 3050 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3051 : 	int chrNo = ATR_CHR_NO(a0) - SPRSTART;

  00003	8b 45 08	 mov	 eax, DWORD PTR _a0$[ebp]
  00006	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  0000c	8d 81 60 79 fe
	ff		 lea	 eax, DWORD PTR [ecx-100000]

; 3052 : 	if (chrNo < 0) {

  00012	85 c0		 test	 eax, eax
  00014	79 1d		 jns	 SHORT $LN2@

; 3053 : 		int BmpNo;
; 3054 : 		realGetNo(ATR_CHR_NO(a0), (U4 *)&BmpNo);

  00016	8d 45 08	 lea	 eax, DWORD PTR _BmpNo$1[ebp]
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 3055 : 		if (realGetWH(BmpNo, wx, wy)) return TRUE;

  00020	ff 75 10	 push	 DWORD PTR _wy$[ebp]
  00023	ff 75 0c	 push	 DWORD PTR _wx$[ebp]
  00026	ff 75 08	 push	 DWORD PTR _BmpNo$1[ebp]
  00029	e8 00 00 00 00	 call	 ?realGetWH@@YAHKPAF0@Z	; realGetWH
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 25		 jmp	 SHORT $LN13@
$LN2@:

; 3056 : 		else return FALSE;
; 3057 : 	}
; 3058 : 	else {
; 3059 : 		if (chrNo >= mxSPRITE) return FALSE;

  00033	3d 40 9c 00 00	 cmp	 eax, 40000		; 00009c40H
  00038	7d 29		 jge	 SHORT $LN9@

; 3060 : 		ANIMLIST * ptAnimlist = SpriteData[chrNo].ptAnimlist;

  0003a	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?SpriteData@@3PAUSPRITEDATA@@A[eax*8+4]

; 3061 : 		if (ptAnimlist) {

  00041	85 c0		 test	 eax, eax
  00043	74 1e		 je	 SHORT $LN9@

; 3062 : 			FRAMELIST * ptFramelist = ptAnimlist[0].ptFramelist;
; 3063 : 			if (realGetWH(ptFramelist[0].BmpNo, wx, wy)) return TRUE;

  00045	ff 75 10	 push	 DWORD PTR _wy$[ebp]
  00048	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0004b	ff 75 0c	 push	 DWORD PTR _wx$[ebp]
  0004e	ff 30		 push	 DWORD PTR [eax]
  00050	e8 00 00 00 00	 call	 ?realGetWH@@YAHKPAF0@Z	; realGetWH
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@:
  00058	85 c0		 test	 eax, eax
  0005a	74 07		 je	 SHORT $LN9@
  0005c	b8 01 00 00 00	 mov	 eax, 1

; 3068 : }

  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN9@:

; 3064 : 			else return FALSE;
; 3065 : 		}
; 3066 : 	}
; 3067 : 	return FALSE;

  00063	33 c0		 xor	 eax, eax

; 3068 : }

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??ö¢??ô©õ»@@YAHPAUaction@@PAF1@Z ENDP			; ?ö¢??ô©õ»
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?ablend_565@@YAXPAEI0III0IIIII@Z
_TEXT	SEGMENT
_lpAlpha$ = 8						; size = 4
_iAlpPitch$ = 12					; size = 4
_lpSrc$ = 16						; size = 4
_iSrcX$ = 20						; size = 4
_iSrcY$ = 24						; size = 4
_iSrcPitch$ = 28					; size = 4
_lpLinearSrcBp$ = 32					; size = 4
_lpDst$ = 32						; size = 4
_lpLinearDstBp$ = 36					; size = 4
_iDstX$ = 36						; size = 4
_lpLinearAlpBp$ = 40					; size = 4
_iDstY$ = 40						; size = 4
_iDstW$ = 44						; size = 4
_iDstH$ = 48						; size = 4
_iDstPitch$ = 52					; size = 4
?ablend_565@@YAXPAEI0III0IIIII@Z PROC			; ablend_565, COMDAT

; 2663 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2664 : 	//Mask for isolating the red,green, and blue components
; 2665 : 	static __int64 MASKB = 0x001F001F001F001F;
; 2666 : 	static __int64 MASKG = 0x07E007E007E007E0;
; 2667 : 	static __int64 MASKSHIFTG = 0x03F003F003F003F0;
; 2668 : 	static __int64 MASKR = 0xF800F800F800F800;
; 2669 : 	static __int64 SIXTEEN = 0x0010001000100010;
; 2670 : 	static __int64 FIVETWELVE = 0x0200020002000200;
; 2671 : 	static __int64 SIXONES = 0x003F003F003F003F;
; 2672 : 	unsigned char *lpLinearDstBp = (iDstX << 1) + (iDstY*iDstPitch) + lpDst;

  00003	8b 4d 28	 mov	 ecx, DWORD PTR _iDstY$[ebp]
  00006	0f af 4d 34	 imul	 ecx, DWORD PTR _iDstPitch$[ebp]
  0000a	8b 45 24	 mov	 eax, DWORD PTR _iDstX$[ebp]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	03 4d 20	 add	 ecx, DWORD PTR _lpDst$[ebp]
  00013	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 2673 : 	unsigned char *lpLinearSrcBp = (iSrcX << 1) + (iSrcY*iSrcPitch) + lpSrc;

  00016	8b 4d 14	 mov	 ecx, DWORD PTR _iSrcX$[ebp]
  00019	89 45 24	 mov	 DWORD PTR _lpLinearDstBp$[ebp], eax
  0001c	8b 45 18	 mov	 eax, DWORD PTR _iSrcY$[ebp]
  0001f	0f af 45 1c	 imul	 eax, DWORD PTR _iSrcPitch$[ebp]
  00023	03 45 10	 add	 eax, DWORD PTR _lpSrc$[ebp]
  00026	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00029	89 45 20	 mov	 DWORD PTR _lpLinearSrcBp$[ebp], eax

; 2674 : 	unsigned char *lpLinearAlpBp = iSrcX + (iSrcY*iAlpPitch) + lpAlpha;

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _iAlpPitch$[ebp]
  0002f	0f af 45 18	 imul	 eax, DWORD PTR _iSrcY$[ebp]
  00033	03 45 08	 add	 eax, DWORD PTR _lpAlpha$[ebp]
  00036	03 c1		 add	 eax, ecx
  00038	89 45 28	 mov	 DWORD PTR _lpLinearAlpBp$[ebp], eax

; 2676 : 		mov esi, lpLinearSrcBp;

  0003b	8b 75 20	 mov	 esi, DWORD PTR _lpLinearSrcBp$[ebp]

; 2677 : 		mov edi, lpLinearDstBp;

  0003e	8b 7d 24	 mov	 edi, DWORD PTR _lpLinearDstBp$[ebp]

; 2678 : 		mov eax, lpLinearAlpBp;

  00041	8b 45 28	 mov	 eax, DWORD PTR _lpLinearAlpBp$[ebp]

; 2679 : 		mov ecx, iDstH;

  00044	8b 4d 30	 mov	 ecx, DWORD PTR _iDstH$[ebp]

; 2680 : 		mov ebx, iDstW;

  00047	8b 5d 2c	 mov	 ebx, DWORD PTR _iDstW$[ebp]

; 2681 : 		test esi, 6;

  0004a	f7 c6 06 00 00
	00		 test	 esi, 6

; 2682 : 		jnz done;

  00050	0f 85 50 02 00
	00		 jne	 $done$4
$primeloop$5:

; 2683 : 	primeloop:
; 2684 : 		movd mm1, [eax];

  00056	0f 6e 08	 movd	 mm1, DWORD PTR [eax]

; 2685 : 		pxor mm2, mm2;

  00059	0f ef d2	 pxor	 mm2, mm2

; 2686 : 		movq mm4, [esi];

  0005c	0f 6f 26	 movq	 mm4, MMWORD PTR [esi]

; 2687 : 		punpcklbw mm1, mm2;

  0005f	0f 60 ca	 punpcklbw mm1, mm2
$loopqword$6:

; 2688 : 	loopqword:
; 2689 : 		mov edx, [eax];

  00062	8b 10		 mov	 edx, DWORD PTR [eax]

; 2690 : 		test ebx, 0xFFFFFFFC;

  00064	f7 c3 fc ff ff
	ff		 test	 ebx, -4			; fffffffcH

; 2691 : 		jz checkback;

  0006a	0f 84 17 01 00
	00		 je	 $checkback$7

; 2692 : 		cmp edx, 0xffffffff;

  00070	83 fa ff	 cmp	 edx, -1

; 2693 : 		je copyback;

  00073	0f 84 fa 00 00
	00		 je	 $copyback$8

; 2694 : 		test edx, 0xffffffff;

  00079	f7 c2 ff ff ff
	ff		 test	 edx, -1

; 2695 : 		jz leavefront;

  0007f	0f 84 f1 00 00
	00		 je	 $leavefront$9

; 2696 : 		movq mm5, [edi];

  00085	0f 6f 2f	 movq	 mm5, MMWORD PTR [edi]

; 2697 : 		psrlw mm1, 2;

  00088	0f 71 d1 02	 psrlw	 mm1, 2

; 2698 : 		movq mm7, MASKSHIFTG;

  0008c	0f 6f 3d 00 00
	00 00		 movq	 mm7, MMWORD PTR ?MASKSHIFTG@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2699 : 		psrlw mm4, 1;

  00093	0f 71 d4 01	 psrlw	 mm4, 1

; 2700 : 		movq mm0, mm1;

  00097	0f 6f c1	 movq	 mm0, mm1

; 2701 : 		psrlw mm5, 1;

  0009a	0f 71 d5 01	 psrlw	 mm5, 1

; 2702 : 		psrlw mm1, 1;

  0009e	0f 71 d1 01	 psrlw	 mm1, 1

; 2703 : 		pand mm4, mm7;

  000a2	0f db e7	 pand	 mm4, mm7

; 2704 : 		movq mm2, SIXONES;

  000a5	0f 6f 15 00 00
	00 00		 movq	 mm2, MMWORD PTR ?SIXONES@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2705 : 		pand mm5, mm7;

  000ac	0f db ef	 pand	 mm5, mm7

; 2706 : 		movq mm3, [esi];

  000af	0f 6f 1e	 movq	 mm3, MMWORD PTR [esi]

; 2707 : 		psubsb mm2, mm0;

  000b2	0f e8 d0	 psubsb	 mm2, mm0

; 2708 : 		movq mm7, MASKB;

  000b5	0f 6f 3d 00 00
	00 00		 movq	 mm7, MMWORD PTR ?MASKB@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2709 : 		pmullw mm4, mm0;

  000bc	0f d5 e0	 pmullw	 mm4, mm0

; 2710 : 		movq mm0, [edi];

  000bf	0f 6f 07	 movq	 mm0, MMWORD PTR [edi]

; 2711 : 		pmullw mm5, mm2;

  000c2	0f d5 ea	 pmullw	 mm5, mm2

; 2712 : 		movq mm2, mm7;

  000c5	0f 6f d7	 movq	 mm2, mm7

; 2713 : 		pand mm3, mm7;

  000c8	0f db df	 pand	 mm3, mm7

; 2714 : 		pmullw mm3, mm1;

  000cb	0f d5 d9	 pmullw	 mm3, mm1

; 2715 : 		pand mm0, mm7;

  000ce	0f db c7	 pand	 mm0, mm7

; 2716 : 		movq mm7, [esi];

  000d1	0f 6f 3e	 movq	 mm7, MMWORD PTR [esi]

; 2717 : 		paddw mm4, mm5;

  000d4	0f fd e5	 paddw	 mm4, mm5

; 2718 : 		pand mm7, MASKR;

  000d7	0f db 3d 00 00
	00 00		 pand	 mm7, MMWORD PTR ?MASKR@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2719 : 		psubsb mm2, mm1;

  000de	0f e8 d1	 psubsb	 mm2, mm1

; 2720 : 		paddw mm4, FIVETWELVE;

  000e1	0f fd 25 00 00
	00 00		 paddw	 mm4, MMWORD PTR ?FIVETWELVE@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2721 : 		pmullw mm0, mm2;

  000e8	0f d5 c2	 pmullw	 mm0, mm2

; 2722 : 		movq mm5, mm4;

  000eb	0f 6f ec	 movq	 mm5, mm4

; 2723 : 		psrlw mm7, 11;

  000ee	0f 71 d7 0b	 psrlw	 mm7, 11			; 0000000bH

; 2724 : 		psrlw mm4, 6;

  000f2	0f 71 d4 06	 psrlw	 mm4, 6

; 2725 : 		paddw mm4, mm5;

  000f6	0f fd e5	 paddw	 mm4, mm5

; 2726 : 		paddw mm0, mm3;

  000f9	0f fd c3	 paddw	 mm0, mm3

; 2727 : 		movq mm5, [edi];

  000fc	0f 6f 2f	 movq	 mm5, MMWORD PTR [edi]

; 2728 : 		paddw mm0, SIXTEEN;

  000ff	0f fd 05 00 00
	00 00		 paddw	 mm0, MMWORD PTR ?SIXTEEN@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2729 : 		pand mm5, MASKR;

  00106	0f db 2d 00 00
	00 00		 pand	 mm5, MMWORD PTR ?MASKR@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2730 : 		psrlw mm4, 5;

  0010d	0f 71 d4 05	 psrlw	 mm4, 5

; 2731 : 		movq mm3, mm0;

  00111	0f 6f d8	 movq	 mm3, mm0

; 2732 : 		psrlw mm0, 5;

  00114	0f 71 d0 05	 psrlw	 mm0, 5

; 2733 : 		psrlw mm5, 11;

  00118	0f 71 d5 0b	 psrlw	 mm5, 11			; 0000000bH

; 2734 : 		paddw mm0, mm3;

  0011c	0f fd c3	 paddw	 mm0, mm3

; 2735 : 		psrlw mm0, 5;

  0011f	0f 71 d0 05	 psrlw	 mm0, 5

; 2736 : 		pmullw mm7, mm1; //mm7=sr?*a?

  00123	0f d5 f9	 pmullw	 mm7, mm1

; 2737 : 
; 2738 : 		pand mm4, MASKG; //g16: mm4=00g0 00g0 00g0 00g0 green

  00126	0f db 25 00 00
	00 00		 pand	 mm4, MMWORD PTR ?MASKG@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2739 : 
; 2740 : 		pmullw mm5, mm2; //r7: mm5=dr?*(31-a?)

  0012d	0f d5 ea	 pmullw	 mm5, mm2

; 2741 : 
; 2742 : 		por mm0, mm4; //mm0=00gb 00gb 00gb 00gb

  00130	0f eb c4	 por	 mm0, mm4

; 2743 : 
; 2744 : 		add eax, 4; //move to next 4 alphas

  00133	83 c0 04	 add	 eax, 4

; 2745 : 
; 2746 : 		add esi, 8; //move to next 4 pixels in src

  00136	83 c6 08	 add	 esi, 8

; 2747 : 
; 2748 : 		add edi, 8; //move to next 4 pixels in dst

  00139	83 c7 08	 add	 edi, 8

; 2749 : 
; 2750 : 		movd mm1, [eax]; //mm1=00 00 00 00 a3 a2 a1 a0

  0013c	0f 6e 08	 movd	 mm1, DWORD PTR [eax]

; 2751 : 
; 2752 : 		paddw mm5, mm7; //r8: mm5=sr?*a?+dr?*(31-a?)

  0013f	0f fd ef	 paddw	 mm5, mm7

; 2753 : 
; 2754 : 		paddw mm5, SIXTEEN; //r9: mm5=(mm5+16) red

  00142	0f fd 2d 00 00
	00 00		 paddw	 mm5, MMWORD PTR ?SIXTEEN@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2755 : 
; 2756 : 		pxor mm2, mm2; //mm2=0;

  00149	0f ef d2	 pxor	 mm2, mm2

; 2757 : 
; 2758 : 		movq mm7, mm5; //r10: mm7=mm5 red

  0014c	0f 6f fd	 movq	 mm7, mm5

; 2759 : 
; 2760 : 		psrlw mm5, 5; //r11: mm5=mm5>>5 red

  0014f	0f 71 d5 05	 psrlw	 mm5, 5

; 2761 : 
; 2762 : 		movq mm4, [esi]; //g1: mm4=src3 src2 src1 src0

  00153	0f 6f 26	 movq	 mm4, MMWORD PTR [esi]

; 2763 : 
; 2764 : 		paddw mm5, mm7; //r12: mm5=mm7+mm5 red

  00156	0f fd ef	 paddw	 mm5, mm7

; 2765 : 
; 2766 : 		punpcklbw mm1, mm2; //mm1=00a3 00a2 00a1 00a0

  00159	0f 60 ca	 punpcklbw mm1, mm2

; 2767 : 
; 2768 : 		psrlw mm5, 5; //r13: mm5=mm5>>5 red

  0015c	0f 71 d5 05	 psrlw	 mm5, 5

; 2769 : 
; 2770 : 		psllw mm5, 11; //r14: mm5=mm5<<10 red

  00160	0f 71 f5 0b	 psllw	 mm5, 11			; 0000000bH

; 2771 : 
; 2772 : 		por mm0, mm5; //mm0=0rgb 0rgb 0rgb 0rgb

  00164	0f eb c5	 por	 mm0, mm5

; 2773 : 
; 2774 : 		sub ebx, 4; //polished off 4 pixels

  00167	83 eb 04	 sub	 ebx, 4

; 2775 : 
; 2776 : 		movq[edi - 8], mm0; //dst=0rgb 0rgb 0rgb 0rgb

  0016a	0f 7f 47 f8	 movq	 MMWORD PTR [edi-8], mm0

; 2777 : 
; 2778 : 		jmp loopqword; //go back to start

  0016e	e9 ef fe ff ff	 jmp	 $loopqword$6
$copyback$8:

; 2779 : 
; 2780 : 	copyback:
; 2781 : 
; 2782 : 		movq[edi], mm4; //copy source to destination

  00173	0f 7f 27	 movq	 MMWORD PTR [edi], mm4
$leavefront$9:

; 2783 : 
; 2784 : 	leavefront:
; 2785 : 
; 2786 : 		add edi, 8; //advance destination by 4 pixels

  00176	83 c7 08	 add	 edi, 8

; 2787 : 
; 2788 : 		add eax, 4; //advance alpha by 4

  00179	83 c0 04	 add	 eax, 4

; 2789 : 
; 2790 : 		add esi, 8; //advance source by 4 pixels

  0017c	83 c6 08	 add	 esi, 8

; 2791 : 
; 2792 : 		sub ebx, 4; //decrease pixel count by 4

  0017f	83 eb 04	 sub	 ebx, 4

; 2793 : 
; 2794 : 		jmp primeloop;

  00182	e9 cf fe ff ff	 jmp	 $primeloop$5
$checkback$7:

; 2795 : 
; 2796 : 	checkback:
; 2797 : 
; 2798 : 		test ebx, 0xFF; //check if 0 pixels left

  00187	f7 c3 ff 00 00
	00		 test	 ebx, 255		; 000000ffH

; 2799 : 
; 2800 : 		jz nextline; //done with this span

  0018d	0f 84 ed 00 00
	00		 je	 $nextline$10

; 2801 : 
; 2802 : 					 //backalign: //work out back end pixels
; 2803 : 
; 2804 : 		movq mm5, [edi]; //g2: mm5=dst3 dst2 dst1 dst0

  00193	0f 6f 2f	 movq	 mm5, MMWORD PTR [edi]

; 2805 : 
; 2806 : 		psrlw mm1, 2; //mm1=a?>>2 nuke out lower 2 bits

  00196	0f 71 d1 02	 psrlw	 mm1, 2

; 2807 : 
; 2808 : 		movq mm7, MASKSHIFTG; //g3: mm7=shift 1 bit green mask

  0019a	0f 6f 3d 00 00
	00 00		 movq	 mm7, MMWORD PTR ?MASKSHIFTG@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2809 : 
; 2810 : 		psrlw mm4, 1; //g3a: move src green down by 1 so that we won't overflow

  001a1	0f 71 d4 01	 psrlw	 mm4, 1

; 2811 : 
; 2812 : 		movq mm0, mm1; //mm0=00a3 00a2 00a1 00a0

  001a5	0f 6f c1	 movq	 mm0, mm1

; 2813 : 
; 2814 : 		psrlw mm5, 1; //g3b: move dst green down by 1 so that we won't overflow

  001a8	0f 71 d5 01	 psrlw	 mm5, 1

; 2815 : 
; 2816 : 		psrlw mm1, 1; //mm1=a?>>1 nuke out lower 1 bits

  001ac	0f 71 d1 01	 psrlw	 mm1, 1

; 2817 : 
; 2818 : 		pand mm4, mm7; //g5: mm4=sg3 sg2 sg1 sg0

  001b0	0f db e7	 pand	 mm4, mm7

; 2819 : 
; 2820 : 		movq mm2, SIXONES;//g4: mm2=63

  001b3	0f 6f 15 00 00
	00 00		 movq	 mm2, MMWORD PTR ?SIXONES@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2821 : 
; 2822 : 		pand mm5, mm7; //g7: mm5=dg3 dg2 dg1 dg0

  001ba	0f db ef	 pand	 mm5, mm7

; 2823 : 
; 2824 : 		movq mm3, [esi]; //b1: mm3=src3 src2 src1 src0

  001bd	0f 6f 1e	 movq	 mm3, MMWORD PTR [esi]

; 2825 : 
; 2826 : 		psubsb mm2, mm0; //g6: mm2=63-a3 63-a2 63-a1 63-a0

  001c0	0f e8 d0	 psubsb	 mm2, mm0

; 2827 : 
; 2828 : 		movq mm7, MASKB; //b2: mm7=BLUE MASK

  001c3	0f 6f 3d 00 00
	00 00		 movq	 mm7, MMWORD PTR ?MASKB@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2829 : 
; 2830 : 		pmullw mm4, mm0; //g8: mm4=sg?*a?

  001ca	0f d5 e0	 pmullw	 mm4, mm0

; 2831 : 
; 2832 : 		movq mm0, [edi]; //b3: mm0=dst3 dst2 dst1 dst0

  001cd	0f 6f 07	 movq	 mm0, MMWORD PTR [edi]

; 2833 : 
; 2834 : 		pmullw mm5, mm2; //g9: mm5=dg?*(1-a?)

  001d0	0f d5 ea	 pmullw	 mm5, mm2

; 2835 : 
; 2836 : 		movq mm2, mm7; //b4: mm2=fiveones

  001d3	0f 6f d7	 movq	 mm2, mm7

; 2837 : 
; 2838 : 		pand mm3, mm7; //b4: mm3=sr3 sr2 sr1 sr0

  001d6	0f db df	 pand	 mm3, mm7

; 2839 : 
; 2840 : 		pmullw mm3, mm1; //b6: mm3=sb?*a?

  001d9	0f d5 d9	 pmullw	 mm3, mm1

; 2841 : 
; 2842 : 		pand mm0, mm7; //b5: mm0=db3 db2 db1 db0

  001dc	0f db c7	 pand	 mm0, mm7

; 2843 : 
; 2844 : 		movq mm7, [esi]; //r1: mm7=src3 src2 src1 src0

  001df	0f 6f 3e	 movq	 mm7, MMWORD PTR [esi]

; 2845 : 
; 2846 : 		paddw mm4, mm5; //g10: mm4=sg?*a?+dg?*(1-a?)

  001e2	0f fd e5	 paddw	 mm4, mm5

; 2847 : 
; 2848 : 		pand mm7, MASKR; //r2: mm7=sr3 sr2 sr1 sr0

  001e5	0f db 3d 00 00
	00 00		 pand	 mm7, MMWORD PTR ?MASKR@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2849 : 
; 2850 : 		psubsb mm2, mm1; //b5a: mm2=31-a3 31-a2 31-a1 31-a0

  001ec	0f e8 d1	 psubsb	 mm2, mm1

; 2851 : 
; 2852 : 		paddw mm4, FIVETWELVE; //g11: mm4=(i+512) green

  001ef	0f fd 25 00 00
	00 00		 paddw	 mm4, MMWORD PTR ?FIVETWELVE@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2853 : 
; 2854 : 		pmullw mm0, mm2; //b7: mm0=db?*(1-a?)

  001f6	0f d5 c2	 pmullw	 mm0, mm2

; 2855 : 
; 2856 : 		movq mm5, mm4; //g12: mm5=(i+512) green

  001f9	0f 6f ec	 movq	 mm5, mm4

; 2857 : 
; 2858 : 		psrlw mm7, 11; //r4: shift src red down to position 0

  001fc	0f 71 d7 0b	 psrlw	 mm7, 11			; 0000000bH

; 2859 : 
; 2860 : 		psrlw mm4, 6; //g13: mm4=(i+512)>>6

  00200	0f 71 d4 06	 psrlw	 mm4, 6

; 2861 : 
; 2862 : 		paddw mm4, mm5; //g14: mm4=(i+512)+((i+512)>>6) green

  00204	0f fd e5	 paddw	 mm4, mm5

; 2863 : 
; 2864 : 		paddw mm0, mm3; //b8: mm0=sb?*a?+db?*(1-a?)

  00207	0f fd c3	 paddw	 mm0, mm3

; 2865 : 
; 2866 : 		movq mm5, [edi]; //r3: mm5=dst3 dst2 dst1 dst0

  0020a	0f 6f 2f	 movq	 mm5, MMWORD PTR [edi]

; 2867 : 
; 2868 : 		paddw mm0, SIXTEEN; //b9: mm0=(i+16) blue

  0020d	0f fd 05 00 00
	00 00		 paddw	 mm0, MMWORD PTR ?SIXTEEN@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2869 : 
; 2870 : 		pand mm5, MASKR; //r5: mm5=dr3 dr2 dr1 dr0

  00214	0f db 2d 00 00
	00 00		 pand	 mm5, MMWORD PTR ?MASKR@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2871 : 
; 2872 : 		psrlw mm4, 5; //g15: mm4=0?g0 0?g0 0?g0 0?g0 green

  0021b	0f 71 d4 05	 psrlw	 mm4, 5

; 2873 : 
; 2874 : 		movq mm3, mm0; //b10: mm3=(i+16) blue

  0021f	0f 6f d8	 movq	 mm3, mm0

; 2875 : 
; 2876 : 		psrlw mm0, 5; //b11: mm0=(i+16)>>5 blue

  00222	0f 71 d0 05	 psrlw	 mm0, 5

; 2877 : 
; 2878 : 		psrlw mm5, 11; //r6: shift dst red down to position 0

  00226	0f 71 d5 0b	 psrlw	 mm5, 11			; 0000000bH

; 2879 : 
; 2880 : 		paddw mm0, mm3; //b12: mm0=(i+16)+(i+16)>>5 blue

  0022a	0f fd c3	 paddw	 mm0, mm3

; 2881 : 
; 2882 : 		psrlw mm0, 5; //b13: mm0=000r 000r 000r 000r blue

  0022d	0f 71 d0 05	 psrlw	 mm0, 5

; 2883 : 
; 2884 : 		pmullw mm7, mm1; //mm7=sr?*a?

  00231	0f d5 f9	 pmullw	 mm7, mm1

; 2885 : 
; 2886 : 		pand mm4, MASKG; //g16: mm4=00g0 00g0 00g0 00g0 green

  00234	0f db 25 00 00
	00 00		 pand	 mm4, MMWORD PTR ?MASKG@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2887 : 
; 2888 : 		pmullw mm5, mm2; //r7: mm5=dr?*(31-a?)

  0023b	0f d5 ea	 pmullw	 mm5, mm2

; 2889 : 
; 2890 : 		por mm0, mm4; //mm0=00gb 00gb 00gb 00gb

  0023e	0f eb c4	 por	 mm0, mm4

; 2891 : 
; 2892 : 		add eax, 4; //move to next 4 alphas

  00241	83 c0 04	 add	 eax, 4

; 2893 : 
; 2894 : 					//stall
; 2895 : 
; 2896 : 		paddw mm5, mm7; //r8: mm5=sr?*a?+dr?*(31-a?)

  00244	0f fd ef	 paddw	 mm5, mm7

; 2897 : 
; 2898 : 		paddw mm5, SIXTEEN; //r9: mm5=(i+16) red

  00247	0f fd 2d 00 00
	00 00		 paddw	 mm5, MMWORD PTR ?SIXTEEN@?1??ablend_565@@YAXPAEI0III0IIIII@Z@4_JA

; 2899 : 
; 2900 : 		movq mm7, mm5; //r10: mm7=(i+16) red

  0024e	0f 6f fd	 movq	 mm7, mm5

; 2901 : 
; 2902 : 		psrlw mm5, 5; //r11: mm5=(i+16)>>5 red

  00251	0f 71 d5 05	 psrlw	 mm5, 5

; 2903 : 
; 2904 : 		paddw mm5, mm7; //r12: mm5=(i+16)+((i+16)>>5) red

  00255	0f fd ef	 paddw	 mm5, mm7

; 2905 : 
; 2906 : 		psrlw mm5, 5; //r13: mm5=(i+16)+((i+16)>>5)>>5 red

  00258	0f 71 d5 05	 psrlw	 mm5, 5

; 2907 : 
; 2908 : 		psllw mm5, 11; //r14: mm5=mm5<<10 red

  0025c	0f 71 f5 0b	 psllw	 mm5, 11			; 0000000bH

; 2909 : 
; 2910 : 		por mm0, mm5; //mm0=0rgb 0rgb 0rgb 0rgb

  00260	0f eb c5	 por	 mm0, mm5

; 2911 : 
; 2912 : 		test ebx, 2; //check if there are 2 pixels

  00263	f7 c3 02 00 00
	00		 test	 ebx, 2

; 2913 : 
; 2914 : 		jz oneendpixel; //goto one pixel if that's it

  00269	74 0f		 je	 SHORT $oneendpixel$11

; 2915 : 
; 2916 : 		movd[edi], mm0; //dst=0000 0000 0rgb 0rgb

  0026b	0f 7e 07	 movd	 DWORD PTR [edi], mm0

; 2917 : 
; 2918 : 		psrlq mm0, 32; //mm0>>32

  0026e	0f 73 d0 20	 psrlq	 mm0, 32			; 00000020H

; 2919 : 
; 2920 : 		add edi, 4; //edi=edi+4

  00272	83 c7 04	 add	 edi, 4

; 2921 : 
; 2922 : 		sub ebx, 2; //saved 2 pixels

  00275	83 eb 02	 sub	 ebx, 2

; 2923 : 
; 2924 : 		jz nextline; //all done goto next line

  00278	74 06		 je	 SHORT $nextline$10
$oneendpixel$11:

; 2925 : 
; 2926 : 	oneendpixel: //work on last pixel
; 2927 : 
; 2928 : 		movd edx, mm0; //edx=0rgb

  0027a	0f 7e c2	 movd	 edx, mm0

; 2929 : 
; 2930 : 		mov[edi], dx; //dst=0rgb

  0027d	66 89 17	 mov	 WORD PTR [edi], dx
$nextline$10:

; 2931 : 
; 2932 : 	nextline: //goto next line
; 2933 : 
; 2934 : 		dec ecx; //nuke one line

  00280	49		 dec	 ecx

; 2935 : 
; 2936 : 		jz done; //all done

  00281	74 23		 je	 SHORT $done$4

; 2937 : 
; 2938 : 		mov eax, lpLinearAlpBp; //alpha

  00283	8b 45 28	 mov	 eax, DWORD PTR _lpLinearAlpBp$[ebp]

; 2939 : 
; 2940 : 		mov esi, lpLinearSrcBp; //src

  00286	8b 75 20	 mov	 esi, DWORD PTR _lpLinearSrcBp$[ebp]

; 2941 : 
; 2942 : 		mov edi, lpLinearDstBp; //dst

  00289	8b 7d 24	 mov	 edi, DWORD PTR _lpLinearDstBp$[ebp]

; 2943 : 
; 2944 : 		add eax, iAlpPitch; //inc alpha ptr by 1 line

  0028c	03 45 0c	 add	 eax, DWORD PTR _iAlpPitch$[ebp]

; 2945 : 
; 2946 : 		add esi, iSrcPitch; //inc src ptr by 1 line

  0028f	03 75 1c	 add	 esi, DWORD PTR _iSrcPitch$[ebp]

; 2947 : 
; 2948 : 		add edi, iDstPitch; //inc dst ptr by 1 line

  00292	03 7d 34	 add	 edi, DWORD PTR _iDstPitch$[ebp]

; 2949 : 
; 2950 : 		mov lpLinearAlpBp, eax; //save new alpha base ptr

  00295	89 45 28	 mov	 DWORD PTR _lpLinearAlpBp$[ebp], eax

; 2951 : 
; 2952 : 		mov ebx, iDstW; //ebx=span width to copy

  00298	8b 5d 2c	 mov	 ebx, DWORD PTR _iDstW$[ebp]

; 2953 : 
; 2954 : 		mov lpLinearSrcBp, esi; //save new src base ptr

  0029b	89 75 20	 mov	 DWORD PTR _lpLinearSrcBp$[ebp], esi

; 2955 : 
; 2956 : 		mov lpLinearDstBp, edi; //save new dst base ptr

  0029e	89 7d 24	 mov	 DWORD PTR _lpLinearDstBp$[ebp], edi

; 2957 : 
; 2958 : 		jmp primeloop; //start the next span

  002a1	e9 b0 fd ff ff	 jmp	 $primeloop$5
$done$4:

; 2959 : 
; 2960 : 	done:
; 2961 : 		emms

  002a6	0f 77		 emms

; 2675 : 	_asm {

  002a8	5f		 pop	 edi
  002a9	5e		 pop	 esi
  002aa	5b		 pop	 ebx

; 2962 : 	}
; 2963 : 
; 2964 : }

  002ab	5d		 pop	 ebp
  002ac	c3		 ret	 0
?ablend_565@@YAXPAEI0III0IIIII@Z ENDP			; ablend_565
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?DrawAlpha32@@YAXPAKKKK0KKKKK@Z
_TEXT	SEGMENT
_lpDst$ = 8						; size = 4
_lpLinearDstBp$ = 12					; size = 4
_iDstX$ = 12						; size = 4
_lpLinearSrcBp$ = 16					; size = 4
_iDstY$ = 16						; size = 4
_iDstPitch$ = 20					; size = 4
_lpSrc$ = 24						; size = 4
_iSrcX$ = 28						; size = 4
_iSrcY$ = 32						; size = 4
_iSrcW$ = 36						; size = 4
_iSrcH$ = 40						; size = 4
_iSrcPitch$ = 44					; size = 4
?DrawAlpha32@@YAXPAKKKK0KKKKK@Z PROC			; DrawAlpha32, COMDAT

; 2980 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2981 : 	unsigned long *lpLinearDstBp = (iDstX)+(iDstY*iDstPitch / sizeof(DWORD)) + lpDst; //base pointer for linear destination

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _iDstY$[ebp]
  00006	0f af 4d 14	 imul	 ecx, DWORD PTR _iDstPitch$[ebp]
  0000a	8b 45 08	 mov	 eax, DWORD PTR _lpDst$[ebp]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	c1 e9 02	 shr	 ecx, 2
  00013	03 4d 0c	 add	 ecx, DWORD PTR _iDstX$[ebp]
  00016	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 2982 : 	unsigned long *lpLinearSrcBp = (iSrcX)+(iSrcY*iSrcPitch / sizeof(DWORD)) + lpSrc; //base pointer for linear source

  00019	8b 4d 20	 mov	 ecx, DWORD PTR _iSrcY$[ebp]
  0001c	0f af 4d 2c	 imul	 ecx, DWORD PTR _iSrcPitch$[ebp]
  00020	89 45 0c	 mov	 DWORD PTR _lpLinearDstBp$[ebp], eax
  00023	8b 45 18	 mov	 eax, DWORD PTR _lpSrc$[ebp]
  00026	c1 e9 02	 shr	 ecx, 2
  00029	03 4d 1c	 add	 ecx, DWORD PTR _iSrcX$[ebp]
  0002c	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0002f	89 45 10	 mov	 DWORD PTR _lpLinearSrcBp$[ebp], eax

; 2985 : 		mov edx, 0xFFFFFFFF; //255-Alpha mask 

  00032	ba ff ff ff ff	 mov	 edx, -1

; 2986 : 		pxor mm7, mm7;	//MM7æ¸0

  00037	0f ef ff	 pxor	 mm7, mm7

; 2987 : 		movd mm6, edx;	//MM6=FFFFFFFF

  0003a	0f 6e f2	 movd	 mm6, edx

; 2988 : 
; 2989 : 		mov esi, lpLinearSrcBp;                    // ç§»å¥æºåç´ ç¼å²å°å

  0003d	8b 75 10	 mov	 esi, DWORD PTR _lpLinearSrcBp$[ebp]

; 2990 : 		mov edi, lpLinearDstBp;                    // ç§»å¥ç®æ åç´ ç¼å²å°å

  00040	8b 7d 0c	 mov	 edi, DWORD PTR _lpLinearDstBp$[ebp]

; 2991 : 		mov ecx, iSrcH;                            // ä¸é¢ä¸¤æ­¥æä½æ¯ç§»å¥åç¼å²çé«åº¦åå®½åº¦

  00043	8b 4d 28	 mov	 ecx, DWORD PTR _iSrcH$[ebp]

; 2992 : 		mov ebx, iSrcW;

  00046	8b 5d 24	 mov	 ebx, DWORD PTR _iSrcW$[ebp]
$MainLoop$4:

; 2993 : 
; 2994 : 	MainLoop:
; 2995 : 		//ç®æ ï¼0xFF585C58     æºï¼0x71000008
; 2996 : 		movd mm0, [esi];	//mm0=SRC        MM0=0000 0000 7100 0008

  00049	0f 6e 06	 movd	 mm0, DWORD PTR [esi]

; 2997 : 		punpcklbw mm0, mm7;	//SRC:32ä½Bitå°64ä½Bit   MM0=0071 0000 0000 0008

  0004c	0f 60 c7	 punpcklbw mm0, mm7

; 2998 : 		movq mm2, mm0;	//mm2=SRC MM2=0071 0000 0000 0008

  0004f	0f 6f d0	 movq	 mm2, mm0

; 2999 : 		punpckhwd mm0, mm0;	//é«ä½æ¯ALPHA  å0071 0000 0000 0008 ç§» 0071 0071 0000 0000

  00052	0f 69 c0	 punpckhwd mm0, mm0

; 3000 : 		punpckhdq mm0, mm0;	//åå­ç§»å¨å°åå­,ç°å¨æå«ä¸ªåç´ çAlphaäº!  0071 0071 0071 0071

  00055	0f 6a c0	 punpckhdq mm0, mm0

; 3001 : 
; 3002 : 		movd edx, mm0;

  00058	0f 7e c2	 movd	 edx, mm0

; 3003 : 		cmp edx, 0x00ff00ff;

  0005b	81 fa ff 00 ff
	00		 cmp	 edx, 16711935		; 00ff00ffH

; 3004 : 		je CopySrc;

  00061	74 2c		 je	 SHORT $CopySrc$5

; 3005 : 		test edx, 0xffffffff;						// å¦æalphaä¸º0 ï¼é£ä¹ä¼å½±åå¯å­å¨çæ å¿ä½,ZF=1

  00063	f7 c2 ff ff ff
	ff		 test	 edx, -1

; 3006 : 		jz BeginPixel;

  00069	74 2a		 je	 SHORT $BeginPixel$6

; 3007 : 
; 3008 : 		movq mm1, mm6;       //MM1=0000 0000 FFFF FFFF

  0006b	0f 6f ce	 movq	 mm1, mm6

; 3009 : 		punpckhdq mm1, mm1;

  0006e	0f 6a c9	 punpckhdq mm1, mm1

; 3010 : 		movd mm3, [edi];       //mm3=DST      MM3=0000 0000 FF58 5C58

  00071	0f 6e 1f	 movd	 mm3, DWORD PTR [edi]

; 3011 : 		punpcklbw mm3, mm7;  //mm3=32ä½Bitå°64ä½Bit    MM3=00FF 0058 005C 0058

  00074	0f 60 df	 punpcklbw mm3, mm7

; 3012 : 		psubb mm1, mm0;      //mm1=255-src alpha bit   MM1=00FF 00FF 00FF 00FF     MM0=0071 0071 0071 0071   MM1=008E 008E 008E 008E

  00077	0f f8 c8	 psubb	 mm1, mm0

; 3013 : 
; 3014 : 		pmullw mm2, mm0;     //mm2=src*srcAlpha      MM2= 0071 0000 0000 0008   MM0=0071 0071 FF71 0071    MM2= 31E1 0000 0000 0388

  0007a	0f d5 d0	 pmullw	 mm2, mm0

; 3015 : 		pmullw mm3, mm1;     //mm3=dst*(255-srcAlpha)  MM3= 00FF 0058 005C 0058  MM1=008F 008F FF8E FF8E   MM3=8E71 3128 D708 D8D0

  0007d	0f d5 d9	 pmullw	 mm3, mm1

; 3016 : 		paddusw mm3, mm2;    //mm3=src*srcAlpha+dst*(255-srcAlpha)  MM3=8E71 3128 D708 D8D0    MM2=31E1 0000 0000 0388  MM3=C052 3128 D708 DC58

  00080	0f dd da	 paddusw mm3, mm2

; 3017 : 		psrlw mm3, 8;        //mm3=src*srcAlpha/256+dst*(255-srcAlpha)/256   MM3=C052 3128 D708 DC58   MM3=00C0 0031 00D7 00DC

  00083	0f 71 d3 08	 psrlw	 mm3, 8

; 3018 : 		packuswb mm3, mm7;   //mm3=packed dst      MM3=00C0 0031 00D7 00DC     MM3=0000 0000 C031 D7DC

  00087	0f 67 df	 packuswb mm3, mm7

; 3019 : 		movd[edi], mm3;

  0008a	0f 7e 1f	 movd	 DWORD PTR [edi], mm3

; 3020 : 		jmp BeginPixel;

  0008d	eb 06		 jmp	 SHORT $BeginPixel$6
$CopySrc$5:

; 3021 : 	CopySrc:
; 3022 : 		packuswb  mm2, mm2;							// ç´§ç¼©å°ä½

  0008f	0f 67 d2	 packuswb mm2, mm2

; 3023 : 		movd[edi], mm2;

  00092	0f 7e 17	 movd	 DWORD PTR [edi], mm2
$BeginPixel$6:

; 3024 : 	BeginPixel:
; 3025 : 		add edi, 4;									// ç®æ åç´ ååç§»å¨4ä¸ªåç´ 

  00095	83 c7 04	 add	 edi, 4

; 3026 : 		add esi, 4;                                 // æºåç´ ååç§»å¨4ä¸ªåç´     

  00098	83 c6 04	 add	 esi, 4

; 3027 : 		sub ebx, 1;                                 // å®½åº¦å4

  0009b	83 eb 01	 sub	 ebx, 1

; 3028 : 		test ebx, 0xffffffff;						// check if only 0 pixels left

  0009e	f7 c3 ff ff ff
	ff		 test	 ebx, -1

; 3029 : 		jz NextLine;								// å¦æåªæ0ä¸ªåç´ ï¼è·³è½¬å°NextLineå¤ç

  000a4	74 02		 je	 SHORT $NextLine$7

; 3030 : 		jmp MainLoop;								// è·³è½¬å°å¼å§å¤ï¼éæ°è®¡ç®

  000a6	eb a1		 jmp	 SHORT $MainLoop$4
$NextLine$7:

; 3031 : 	NextLine:
; 3032 : 		dec ecx;

  000a8	49		 dec	 ecx

; 3033 : 		jz  Done;									// å¤çå®æ

  000a9	74 17		 je	 SHORT $Done$8

; 3034 : 		mov esi, lpLinearSrcBp;						// src

  000ab	8b 75 10	 mov	 esi, DWORD PTR _lpLinearSrcBp$[ebp]

; 3035 : 		mov edi, lpLinearDstBp;						// dst

  000ae	8b 7d 0c	 mov	 edi, DWORD PTR _lpLinearDstBp$[ebp]

; 3036 : 		add esi, iSrcPitch;							// inc src ptr by 1 line

  000b1	03 75 2c	 add	 esi, DWORD PTR _iSrcPitch$[ebp]

; 3037 : 		add edi, iDstPitch;							// inc dst ptr by 1 line

  000b4	03 7d 14	 add	 edi, DWORD PTR _iDstPitch$[ebp]

; 3038 : 		mov ebx, iSrcW;								// ebx=span width to copy

  000b7	8b 5d 24	 mov	 ebx, DWORD PTR _iSrcW$[ebp]

; 3039 : 		mov lpLinearSrcBp, esi;						// save new src base ptr

  000ba	89 75 10	 mov	 DWORD PTR _lpLinearSrcBp$[ebp], esi

; 3040 : 		mov lpLinearDstBp, edi;						// save new dst base ptr

  000bd	89 7d 0c	 mov	 DWORD PTR _lpLinearDstBp$[ebp], edi

; 3041 : 		jmp MainLoop;								// start the next span

  000c0	eb 87		 jmp	 SHORT $MainLoop$4
$Done$8:

; 3042 : 	Done:
; 3043 : 		emms;

  000c2	0f 77		 emms

; 2983 : 
; 2984 : 	_asm {

  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx

; 3044 : 	}
; 3045 : }

  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
?DrawAlpha32@@YAXPAKKKK0KKKKK@Z ENDP			; DrawAlpha32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?StockBoxDispBuffer@@YAXHHHHEHH@Z
_TEXT	SEGMENT
_col$ = 8						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_dispPrio$ = 24						; size = 1
_color$ = 28						; size = 4
_fill$ = 32						; size = 4
?StockBoxDispBuffer@@YAXHHHHEHH@Z PROC			; StockBoxDispBuffer, COMDAT

; 939  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 940  : 	int col;	// î?îî
; 941  : 				// int ? short ??????
; 942  : 	int x = (x1 << 16) | x2; 	// î¯????????????????

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _x1$[ebp]

; 943  : 	int y = (y1 << 16) | y2;	// î¯????????????????

  00006	8b 55 0c	 mov	 edx, DWORD PTR _y1$[ebp]

; 944  : 
; 945  : 								// ???????
; 946  : 	if (fill == 0) col = color | STOCK_DISP_BUFFER_BOX | STOCK_DISP_BUFFER_NO_BMP;

  00009	8b 45 20	 mov	 eax, DWORD PTR _fill$[ebp]
  0000c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0000f	0b 4d 10	 or	 ecx, DWORD PTR _x2$[ebp]
  00012	c1 e2 10	 shl	 edx, 16			; 00000010H
  00015	0b 55 14	 or	 edx, DWORD PTR _y2$[ebp]
  00018	85 c0		 test	 eax, eax
  0001a	75 1a		 jne	 SHORT $LN2@StockBoxDi
  0001c	8b 45 1c	 mov	 eax, DWORD PTR _color$[ebp]

; 951  : 
; 952  : 	// ?????????????
; 953  : 	StockDispBuffer(x, y, dispPrio, col, 0);

  0001f	6a 00		 push	 0
  00021	0d 00 00 00 a0	 or	 eax, -1610612736	; a0000000H
  00026	50		 push	 eax
  00027	ff 75 18	 push	 DWORD PTR _dispPrio$[ebp]
  0002a	52		 push	 edx
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00031	83 c4 14	 add	 esp, 20			; 00000014H

; 954  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN2@StockBoxDi:

; 947  : 	// î???????
; 948  : 	else if (fill == 1) col = color | STOCK_DISP_BUFFER_BOX_FILL | STOCK_DISP_BUFFER_NO_BMP;

  00036	83 f8 01	 cmp	 eax, 1
  00039	75 1a		 jne	 SHORT $LN4@StockBoxDi
  0003b	8b 45 1c	 mov	 eax, DWORD PTR _color$[ebp]

; 951  : 
; 952  : 	// ?????????????
; 953  : 	StockDispBuffer(x, y, dispPrio, col, 0);

  0003e	6a 00		 push	 0
  00040	0d 00 00 00 90	 or	 eax, -1879048192	; 90000000H
  00045	50		 push	 eax
  00046	ff 75 18	 push	 DWORD PTR _dispPrio$[ebp]
  00049	52		 push	 edx
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00050	83 c4 14	 add	 esp, 20			; 00000014H

; 954  : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN4@StockBoxDi:

; 949  : 	// ?????
; 950  : 	else if (fill == 2) col = color | STOCK_DISP_BUFFER_LINE | STOCK_DISP_BUFFER_NO_BMP;

  00055	83 f8 02	 cmp	 eax, 2
  00058	75 1a		 jne	 SHORT $LN8@StockBoxDi
  0005a	8b 45 1c	 mov	 eax, DWORD PTR _color$[ebp]

; 951  : 
; 952  : 	// ?????????????
; 953  : 	StockDispBuffer(x, y, dispPrio, col, 0);

  0005d	6a 00		 push	 0
  0005f	0d 00 00 00 c0	 or	 eax, -1073741824	; c0000000H
  00064	50		 push	 eax
  00065	ff 75 18	 push	 DWORD PTR _dispPrio$[ebp]
  00068	52		 push	 edx
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0006f	83 c4 14	 add	 esp, 20			; 00000014H

; 954  : }

  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN8@StockBoxDi:

; 949  : 	// ?????
; 950  : 	else if (fill == 2) col = color | STOCK_DISP_BUFFER_LINE | STOCK_DISP_BUFFER_NO_BMP;

  00074	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]

; 951  : 
; 952  : 	// ?????????????
; 953  : 	StockDispBuffer(x, y, dispPrio, col, 0);

  00077	6a 00		 push	 0
  00079	50		 push	 eax
  0007a	ff 75 18	 push	 DWORD PTR _dispPrio$[ebp]
  0007d	52		 push	 edx
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00084	83 c4 14	 add	 esp, 20			; 00000014H

; 954  : }

  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?StockBoxDispBuffer@@YAXHHHHEHH@Z ENDP			; StockBoxDispBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?StockTaskDispBuffer2@@YAXHH@Z
_TEXT	SEGMENT
_prio1$ = 8						; size = 4
tv410 = 12						; size = 4
_prio2$ = 12						; size = 4
?StockTaskDispBuffer2@@YAXHH@Z PROC			; StockTaskDispBuffer2, COMDAT

; 875  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 876  : 	ACTION *pActLoop; 	/* îîª????????îî¾ */
; 877  : 	DISP_SORT 	*pDispSort = DispBuffer.DispSort + DispBuffer.DispCnt;

  00003	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0000a	53		 push	 ebx

; 878  : 	DISP_INFO 	*pDispInfo = DispBuffer.DispInfo + DispBuffer.DispCnt;
; 879  : 	int tmp;
; 880  : 
; 881  : 	if (prio1 > prio2)
; 882  : 	{
; 883  : 		tmp = prio1;
; 884  : 		prio1 = prio2;
; 885  : 		prio2 = tmp;
; 886  : 	}
; 887  : 
; 888  : 	/* ??î???????? */
; 889  : 	//while( pActLoop != pActBtm ){
; 890  : 	for (pActLoop = pActTop->pNext;

  0000b	8b 5d 08	 mov	 ebx, DWORD PTR _prio1$[ebp]
  0000e	0f bf c1	 movsx	 eax, cx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8d 3c 85 00 80
	01 00		 lea	 edi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*4+98304]
  0001a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0001d	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*8]
  00024	8b 45 0c	 mov	 eax, DWORD PTR _prio2$[ebp]
  00027	3b d8		 cmp	 ebx, eax
  00029	8b f0		 mov	 esi, eax
  0002b	0f 4e f3	 cmovle	 esi, ebx
  0002e	0f 4e d8	 cmovle	 ebx, eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActTop@@3PAUaction@@A ; pActTop
  00036	89 75 0c	 mov	 DWORD PTR tv410[ebp], esi
  00039	89 5d 08	 mov	 DWORD PTR _prio1$[ebp], ebx
  0003c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 891  : 		pActLoop != pActBtm;

  0003f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?pActBtm@@3PAUaction@@A ; pActBtm
  00045	0f 84 c9 00 00
	00		 je	 $LN23@StockTaskD
  0004b	bb 00 10 00 00	 mov	 ebx, 4096		; 00001000H
$LL4@StockTaskD:

; 892  : 		/* ?????????? */
; 893  : 		pActLoop = pActLoop->pNext) {
; 894  : 
; 895  : 		// ??????????
; 896  : 		if (DispBuffer.DispCnt >= DISP_BUFFER_SIZE) break;

  00050	66 3b cb	 cmp	 cx, bx
  00053	0f 8d bb 00 00
	00		 jge	 $LN23@StockTaskD

; 897  : 
; 898  : 		// prio1??prio2?îîîª???????
; 899  : 		if (prio1 <= pActLoop->dispPrio && pActLoop->dispPrio <= prio2)

  00059	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0005c	0f b6 f3	 movzx	 esi, bl
  0005f	39 75 0c	 cmp	 DWORD PTR tv410[ebp], esi
  00062	7f 09		 jg	 SHORT $LN20@StockTaskD
  00064	3b 75 08	 cmp	 esi, DWORD PTR _prio1$[ebp]
  00067	0f 8e 93 00 00
	00		 jle	 $LN2@StockTaskD
$LN20@StockTaskD:

; 900  : 			continue;
; 901  : 
; 902  : 		// ??????????????
; 903  : 		if (-1 <= pActLoop->bmpNo && pActLoop->bmpNo <= CG_INVISIBLE) continue;

  0006d	8b b0 9c 00 00
	00		 mov	 esi, DWORD PTR [eax+156]
  00073	83 fe ff	 cmp	 esi, -1
  00076	7c 09		 jl	 SHORT $LN21@StockTaskD
  00078	83 fe 63	 cmp	 esi, 99			; 00000063H
  0007b	0f 8e 7f 00 00
	00		 jle	 $LN2@StockTaskD
$LN21@StockTaskD:

; 904  : 
; 905  : 		// ?î ???????????
; 906  : 		if (pActLoop->deathFlag == TRUE) continue;

  00081	83 78 24 01	 cmp	 DWORD PTR [eax+36], 1
  00085	74 79		 je	 SHORT $LN2@StockTaskD

; 907  : 
; 908  : 		/* îî¸î??î?? */
; 909  : 		if (pActLoop->atr & ACT_ATR_HIDE) continue;

  00087	f6 80 a4 00 00
	00 02		 test	 BYTE PTR [eax+164], 2
  0008e	75 70		 jne	 SHORT $LN2@StockTaskD

; 910  : 
; 911  : 		// î¸î?î?????î¨î
; 912  : 		pDispSort->dispPrio = pActLoop->dispPrio;

  00090	88 5f 02	 mov	 BYTE PTR [edi+2], bl

; 913  : 		pDispSort->no = DispBuffer.DispCnt;

  00093	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0009a	66 89 0f	 mov	 WORD PTR [edi], cx

; 914  : 		// î¸îîºî«?î¨î? ??????î ? ?
; 915  : 		pDispInfo->x = pActLoop->x + pActLoop->anim_x;

  0009d	8b 88 64 01 00
	00		 mov	 ecx, DWORD PTR [eax+356]
  000a3	03 48 18	 add	 ecx, DWORD PTR [eax+24]
  000a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 916  : 		pDispInfo->y = pActLoop->y + pActLoop->anim_y;

  000a8	8b 88 68 01 00
	00		 mov	 ecx, DWORD PTR [eax+360]
  000ae	03 48 1c	 add	 ecx, DWORD PTR [eax+28]
  000b1	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 917  : 		pDispInfo->bmpNo = pActLoop->bmpNo;

  000b4	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  000ba	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 918  : 		pDispInfo->pAct = pActLoop;

  000bd	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 919  : 
; 920  : 		// ???îî????
; 921  : 		if (pActLoop->atr & ACT_ATR_HIT_BOX) pDispInfo->hitFlag = 2;

  000c0	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000c6	f6 c1 08	 test	 cl, 8
  000c9	74 09		 je	 SHORT $LN11@StockTaskD
  000cb	c7 42 10 02 00
	00 00		 mov	 DWORD PTR [edx+16], 2
  000d2	eb 0c		 jmp	 SHORT $LN13@StockTaskD
$LN11@StockTaskD:

; 922  : 		else
; 923  : 			if (pActLoop->atr & ACT_ATR_HIT) pDispInfo->hitFlag = 1;

  000d4	0f b6 c9	 movzx	 ecx, cl
  000d7	c1 e9 02	 shr	 ecx, 2
  000da	83 e1 01	 and	 ecx, 1
  000dd	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN13@StockTaskD:

; 924  : 			else pDispInfo->hitFlag = FALSE;
; 925  : 			// ??????????îîî±???
; 926  : 			pActLoop->hitDispNo = DispBuffer.DispCnt;

  000e0	0f bf 0d 00 c0
	01 00		 movsx	 ecx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688

; 927  : 
; 928  : 			// î¸î????????
; 929  : 			DispBuffer.DispCnt++;
; 930  : 			// ???????
; 931  : 			pDispSort++;

  000e7	83 c7 04	 add	 edi, 4
  000ea	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  000ed	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  000f4	66 41		 inc	 cx

; 932  : 			pDispInfo++;

  000f6	83 c2 18	 add	 edx, 24			; 00000018H
  000f9	66 89 0d 00 c0
	01 00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, cx
$LN2@StockTaskD:

; 891  : 		pActLoop != pActBtm;

  00100	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00103	bb 00 10 00 00	 mov	 ebx, 4096		; 00001000H
  00108	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?pActBtm@@3PAUaction@@A ; pActBtm
  0010e	0f 85 3c ff ff
	ff		 jne	 $LL4@StockTaskD
$LN23@StockTaskD:
  00114	5f		 pop	 edi

; 933  : 	}
; 934  : 
; 935  : }

  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	5d		 pop	 ebp
  00118	c3		 ret	 0
?StockTaskDispBuffer2@@YAXHH@Z ENDP			; StockTaskDispBuffer2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?StockTaskDispBuffer@@YAXXZ
_TEXT	SEGMENT
?StockTaskDispBuffer@@YAXXZ PROC			; StockTaskDispBuffer, COMDAT

; 759  : 	ACTION *pActLoop; 	/* îîª????????îî¾ */
; 760  : 	DISP_SORT 	*pDispSort = DispBuffer.DispSort + DispBuffer.DispCnt;
; 761  : 	DISP_INFO 	*pDispInfo = DispBuffer.DispInfo + DispBuffer.DispCnt;
; 762  : 
; 763  : 	/* ??î???????? */
; 764  : 	//while( pActLoop != pActBtm ){
; 765  : 	for (pActLoop = pActTop->pNext;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActTop@@3PAUaction@@A ; pActTop
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	66 8b 35 00 c0
	01 00		 mov	 si, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0000f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00012	0f bf c6	 movsx	 eax, si
  00015	57		 push	 edi

; 766  : 		pActLoop != pActBtm;

  00016	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pActBtm@@3PAUaction@@A ; pActBtm
  0001c	8d 1c 85 00 80
	01 00		 lea	 ebx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*4+98304]
  00023	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00026	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*8]
  0002d	3b d7		 cmp	 edx, edi
  0002f	0f 84 25 02 00
	00		 je	 $LN53@StockTaskD
  00035	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL4@StockTaskD:

; 767  : 		/* ?????????? */
; 768  : 		pActLoop = pActLoop->pNext) {
; 769  : 
; 770  : 		// ??????????
; 771  : 		if (DispBuffer.DispCnt >= DISP_BUFFER_SIZE) break;

  00040	66 3b f1	 cmp	 si, cx
  00043	0f 8d 11 02 00
	00		 jge	 $LN53@StockTaskD

; 772  : 
; 773  : 		// ??????????????
; 774  : 		if (-1 <= pActLoop->bmpNo && pActLoop->bmpNo <= CG_INVISIBLE) continue;

  00049	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  0004f	83 f9 ff	 cmp	 ecx, -1
  00052	7c 09		 jl	 SHORT $LN50@StockTaskD
  00054	83 f9 63	 cmp	 ecx, 99			; 00000063H
  00057	0f 8e ed 01 00
	00		 jle	 $LN2@StockTaskD
$LN50@StockTaskD:

; 775  : 
; 776  : 		// ?î ???????????
; 777  : 		if (pActLoop->deathFlag == TRUE) continue;

  0005d	83 7a 24 01	 cmp	 DWORD PTR [edx+36], 1
  00061	0f 84 e3 01 00
	00		 je	 $LN2@StockTaskD

; 778  : 
; 779  : 		/* îî¸î??î?? */
; 780  : 		if (pActLoop->atr & ACT_ATR_HIDE) continue;

  00067	f6 82 a4 00 00
	00 02		 test	 BYTE PTR [edx+164], 2
  0006e	0f 85 d6 01 00
	00		 jne	 $LN2@StockTaskD

; 781  : 
; 782  : 		// î¸î?î?????î¨î
; 783  : 		pDispSort->dispPrio = pActLoop->dispPrio;

  00074	8a 4a 15	 mov	 cl, BYTE PTR [edx+21]
  00077	88 4b 02	 mov	 BYTE PTR [ebx+2], cl

; 784  : 		pDispSort->no = DispBuffer.DispCnt;

  0007a	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00081	66 89 0b	 mov	 WORD PTR [ebx], cx

; 785  : 		// î¸îîºî«?î¨î? ??????î ? ?
; 786  : 		pDispInfo->x = pActLoop->x + pActLoop->anim_x;

  00084	8b 8a 64 01 00
	00		 mov	 ecx, DWORD PTR [edx+356]
  0008a	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  0008d	89 08		 mov	 DWORD PTR [eax], ecx

; 787  : 		pDispInfo->y = pActLoop->y + pActLoop->anim_y;

  0008f	8b 8a 68 01 00
	00		 mov	 ecx, DWORD PTR [edx+360]
  00095	03 4a 1c	 add	 ecx, DWORD PTR [edx+28]
  00098	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 788  : 		pDispInfo->bmpNo = pActLoop->bmpNo;

  0009b	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  000a1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 789  : 		pDispInfo->pAct = pActLoop;

  000a4	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 790  : 
; 791  : 		// ???îî????
; 792  : 		// î?î±î¶??
; 793  : 
; 794  : 
; 795  : 		if (pActLoop->atr & ACT_ATR_HIT_BOX_COL1) pDispInfo->hitFlag = 7;

  000a7	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  000ad	f7 c1 00 00 04
	00		 test	 ecx, 262144		; 00040000H
  000b3	74 0c		 je	 SHORT $LN9@StockTaskD
  000b5	c7 40 10 07 00
	00 00		 mov	 DWORD PTR [eax+16], 7
  000bc	e9 e4 00 00 00	 jmp	 $LN35@StockTaskD
$LN9@StockTaskD:

; 796  : 		else
; 797  : 			if (pActLoop->atr & ACT_ATR_HIT_BOX_COL2) pDispInfo->hitFlag = 8;

  000c1	f7 c1 00 00 08
	00		 test	 ecx, 524288		; 00080000H
  000c7	74 0c		 je	 SHORT $LN11@StockTaskD
  000c9	c7 40 10 08 00
	00 00		 mov	 DWORD PTR [eax+16], 8
  000d0	e9 d0 00 00 00	 jmp	 $LN35@StockTaskD
$LN11@StockTaskD:

; 798  : 			else
; 799  : 				if (pActLoop->atr & ACT_ATR_HIT_BOX_COL3) pDispInfo->hitFlag = 9;

  000d5	f7 c1 00 00 10
	00		 test	 ecx, 1048576		; 00100000H
  000db	74 0c		 je	 SHORT $LN13@StockTaskD
  000dd	c7 40 10 09 00
	00 00		 mov	 DWORD PTR [eax+16], 9
  000e4	e9 bc 00 00 00	 jmp	 $LN35@StockTaskD
$LN13@StockTaskD:

; 800  : 				else
; 801  : 					if (pActLoop->atr & ACT_ATR_HIT_BOX_COL4) pDispInfo->hitFlag = 10;

  000e9	f7 c1 00 00 20
	00		 test	 ecx, 2097152		; 00200000H
  000ef	74 0c		 je	 SHORT $LN15@StockTaskD
  000f1	c7 40 10 0a 00
	00 00		 mov	 DWORD PTR [eax+16], 10	; 0000000aH
  000f8	e9 a8 00 00 00	 jmp	 $LN35@StockTaskD
$LN15@StockTaskD:

; 802  : 					else
; 803  : 						if (pActLoop->atr & ACT_ATR_HIT_BOX_COL5) pDispInfo->hitFlag = 11;

  000fd	f7 c1 00 00 40
	00		 test	 ecx, 4194304		; 00400000H
  00103	74 0c		 je	 SHORT $LN17@StockTaskD
  00105	c7 40 10 0b 00
	00 00		 mov	 DWORD PTR [eax+16], 11	; 0000000bH
  0010c	e9 94 00 00 00	 jmp	 $LN35@StockTaskD
$LN17@StockTaskD:

; 804  : 						else
; 805  : 							if (pActLoop->atr & ACT_ATR_HIT_BOX_COL6) pDispInfo->hitFlag = 12;

  00111	f7 c1 00 00 80
	00		 test	 ecx, 8388608		; 00800000H
  00117	74 0c		 je	 SHORT $LN19@StockTaskD
  00119	c7 40 10 0c 00
	00 00		 mov	 DWORD PTR [eax+16], 12	; 0000000cH
  00120	e9 80 00 00 00	 jmp	 $LN35@StockTaskD
$LN19@StockTaskD:

; 806  : 							else
; 807  : 								if (pActLoop->atr & ACT_ATR_HIT_BOX_COL7) pDispInfo->hitFlag = 13;

  00125	f7 c1 00 00 00
	01		 test	 ecx, 16777216		; 01000000H
  0012b	74 09		 je	 SHORT $LN21@StockTaskD
  0012d	c7 40 10 0d 00
	00 00		 mov	 DWORD PTR [eax+16], 13	; 0000000dH
  00134	eb 6f		 jmp	 SHORT $LN35@StockTaskD
$LN21@StockTaskD:

; 808  : 								else
; 809  : 									if (pActLoop->atr & ACT_ATR_HIT_BOX_COL8) pDispInfo->hitFlag = 14;

  00136	f7 c1 00 00 00
	02		 test	 ecx, 33554432		; 02000000H
  0013c	74 09		 je	 SHORT $LN23@StockTaskD
  0013e	c7 40 10 0e 00
	00 00		 mov	 DWORD PTR [eax+16], 14	; 0000000eH
  00145	eb 5e		 jmp	 SHORT $LN35@StockTaskD
$LN23@StockTaskD:

; 810  : 									else
; 811  : 										if (pActLoop->atr & ACT_ATR_HIT_BOX_ALL4) pDispInfo->hitFlag = 6;

  00147	f7 c1 00 00 01
	00		 test	 ecx, 65536		; 00010000H
  0014d	74 09		 je	 SHORT $LN25@StockTaskD
  0014f	c7 40 10 06 00
	00 00		 mov	 DWORD PTR [eax+16], 6
  00156	eb 4d		 jmp	 SHORT $LN35@StockTaskD
$LN25@StockTaskD:

; 812  : 										else
; 813  : 											if (pActLoop->atr & ACT_ATR_HIT_BOX_ALL3) pDispInfo->hitFlag = 5;

  00158	f7 c1 00 80 00
	00		 test	 ecx, 32768		; 00008000H
  0015e	74 09		 je	 SHORT $LN27@StockTaskD
  00160	c7 40 10 05 00
	00 00		 mov	 DWORD PTR [eax+16], 5
  00167	eb 3c		 jmp	 SHORT $LN35@StockTaskD
$LN27@StockTaskD:

; 814  : 											else
; 815  : 												if (pActLoop->atr & ACT_ATR_HIT_BOX_ALL2) pDispInfo->hitFlag = 4;

  00169	f7 c1 00 40 00
	00		 test	 ecx, 16384		; 00004000H
  0016f	74 09		 je	 SHORT $LN29@StockTaskD
  00171	c7 40 10 04 00
	00 00		 mov	 DWORD PTR [eax+16], 4
  00178	eb 2b		 jmp	 SHORT $LN35@StockTaskD
$LN29@StockTaskD:

; 816  : 												else
; 817  : 													if (pActLoop->atr & ACT_ATR_HIT_BOX_ALL1) pDispInfo->hitFlag = 3;

  0017a	f7 c1 00 20 00
	00		 test	 ecx, 8192		; 00002000H
  00180	74 09		 je	 SHORT $LN31@StockTaskD
  00182	c7 40 10 03 00
	00 00		 mov	 DWORD PTR [eax+16], 3
  00189	eb 1a		 jmp	 SHORT $LN35@StockTaskD
$LN31@StockTaskD:

; 818  : 													else // ????î¸î
; 819  : 														if (pActLoop->atr & ACT_ATR_HIT_BOX) pDispInfo->hitFlag = 2;

  0018b	f6 c1 08	 test	 cl, 8
  0018e	74 09		 je	 SHORT $LN33@StockTaskD
  00190	c7 40 10 02 00
	00 00		 mov	 DWORD PTR [eax+16], 2
  00197	eb 0c		 jmp	 SHORT $LN35@StockTaskD
$LN33@StockTaskD:

; 820  : 														else // îî??
; 821  : 															if (pActLoop->atr & ACT_ATR_HIT) pDispInfo->hitFlag = 1;

  00199	0f b6 c9	 movzx	 ecx, cl
  0019c	c1 e9 02	 shr	 ecx, 2
  0019f	83 e1 01	 and	 ecx, 1
  001a2	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN35@StockTaskD:

; 822  : 															else pDispInfo->hitFlag = FALSE;
; 823  : 															// 4 ç³å
; 824  : 															if (pActLoop->status == 4)	pDispInfo->DrawEffect = 3;

  001a5	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  001ab	83 f9 04	 cmp	 ecx, 4
  001ae	75 06		 jne	 SHORT $LN37@StockTaskD
  001b0	c6 40 14 03	 mov	 BYTE PTR [eax+20], 3
  001b4	eb 6e		 jmp	 SHORT $LN44@StockTaskD
$LN37@StockTaskD:

; 825  : 															// 1 æ¯
; 826  : 															else if (pActLoop->status == 1) pDispInfo->DrawEffect = 4;

  001b6	83 f9 01	 cmp	 ecx, 1
  001b9	75 06		 jne	 SHORT $LN39@StockTaskD
  001bb	c6 40 14 04	 mov	 BYTE PTR [eax+20], 4
  001bf	eb 63		 jmp	 SHORT $LN44@StockTaskD
$LN39@StockTaskD:

; 827  : 															else pDispInfo->DrawEffect = 0;
; 828  : #ifdef _PETCOLOR_
; 829  : 															extern BOOL EncountFlag, DuelFlag, NoHelpFlag;
; 830  : 															if (!pDispInfo->DrawEffect)
; 831  : 																if (ProcNo == PROC_BATTLE && !EncountFlag && !vsLookFlag && !eventEnemyFlag && !DuelFlag && !NoHelpFlag) {

  001c1	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  001c8	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  001cc	75 56		 jne	 SHORT $LN44@StockTaskD
  001ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?EncountFlag@@3HA, 0 ; EncountFlag
  001d5	75 4d		 jne	 SHORT $LN44@StockTaskD
  001d7	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?vsLookFlag@@3FA, 0 ; vsLookFlag
  001df	75 43		 jne	 SHORT $LN44@StockTaskD
  001e1	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventEnemyFlag@@3FA, 0 ; eventEnemyFlag
  001e9	75 39		 jne	 SHORT $LN44@StockTaskD
  001eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DuelFlag@@3HA, 0 ; DuelFlag
  001f2	75 30		 jne	 SHORT $LN44@StockTaskD
  001f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?NoHelpFlag@@3HA, 0 ; NoHelpFlag
  001fb	75 27		 jne	 SHORT $LN44@StockTaskD

; 832  : 																	if (pActLoop->actNo == 0) {

  001fd	83 ba ac 00 00
	00 00		 cmp	 DWORD PTR [edx+172], 0
  00204	75 1e		 jne	 SHORT $LN44@StockTaskD

; 833  : 																		if (pActLoop->level == 1 && (ATR_PLACE_NO(pActLoop) >= 2 * MAX_BATTLE_ROW_CHARS  && ATR_PLACE_NO(pActLoop)< 4 * MAX_BATTLE_ROW_CHARS)) {

  00206	83 ba 8c 00 00
	00 01		 cmp	 DWORD PTR [edx+140], 1
  0020d	75 15		 jne	 SHORT $LN44@StockTaskD
  0020f	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00212	8a 89 1f 01 00
	00		 mov	 cl, BYTE PTR [ecx+287]
  00218	80 e9 0a	 sub	 cl, 10			; 0000000aH
  0021b	80 f9 09	 cmp	 cl, 9
  0021e	77 04		 ja	 SHORT $LN44@StockTaskD

; 834  : 																			pDispInfo->DrawEffect = 5;

  00220	c6 40 14 05	 mov	 BYTE PTR [eax+20], 5
$LN44@StockTaskD:

; 835  : #ifdef _CAX_LV1_STOP_AI
; 836  : 																			if (AI_OtherSetting2[0] && AI == AI_SELECT) {
; 837  : 																				AI = AI_NONE;
; 838  : 																				//StockChatBufferLine("å³é­ï¼¡ï¼©æ¨¡å¼ï¼", FONT_PAL_RED);
; 839  : 																				pc.etcFlag &= (~PC_AI_MOD);
; 840  : 																				lssproto_FS_send(sockfd, pc.etcFlag);
; 841  : 																				petlevelcheck = 1;
; 842  : 																				StockChatBufferLine("é­éLv1çº§å® ç©å®å®ï¼èªå¨å³é­AIææï¼", FONT_PAL_YELLOW);
; 843  : 																			}
; 844  : 																			else {
; 845  : 																				petlevelcheck = 0;
; 846  : 																			}
; 847  : #endif
; 848  : 																		}
; 849  : 																	}
; 850  : 																}
; 851  : #endif
; 852  : #ifdef _READ16BITBMP
; 853  : 															if (pDispInfo->bmpNo >= OLD_GRAPHICS_START && pDispInfo->bmpNo < MAX_GRAPHICS) {
; 854  : 																if (adrntruebuff[pDispInfo->bmpNo - OLD_GRAPHICS_START].staturated == 1) pDispInfo->DrawEffect = 2;
; 855  : 															}
; 856  : #endif
; 857  : 															// ??????????îîî±???
; 858  : 															pActLoop->hitDispNo = DispBuffer.DispCnt;

  00224	0f bf 0d 00 c0
	01 00		 movsx	 ecx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688

; 859  : #ifdef _SFUMATO
; 860  : 															pDispInfo->sfumato = pActLoop->sfumato;
; 861  : #endif
; 862  : 															// î¸î????????
; 863  : 															DispBuffer.DispCnt++;
; 864  : 
; 865  : 															// ???????
; 866  : 															pDispSort++;

  0022b	83 c3 04	 add	 ebx, 4
  0022e	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
  00231	66 8b 35 00 c0
	01 00		 mov	 si, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688

; 867  : 															pDispInfo++;

  00238	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pActBtm@@3PAUaction@@A ; pActBtm
  0023e	66 46		 inc	 si
  00240	66 89 35 00 c0
	01 00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, si
  00247	83 c0 18	 add	 eax, 24			; 00000018H
$LN2@StockTaskD:

; 766  : 		pActLoop != pActBtm;

  0024a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0024d	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00252	3b d7		 cmp	 edx, edi
  00254	0f 85 e6 fd ff
	ff		 jne	 $LL4@StockTaskD
$LN53@StockTaskD:
  0025a	5f		 pop	 edi

; 868  : 	}
; 869  : 
; 870  : }

  0025b	5e		 pop	 esi
  0025c	5b		 pop	 ebx
  0025d	c3		 ret	 0
?StockTaskDispBuffer@@YAXXZ ENDP			; StockTaskDispBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?StockDispBuffer2@@YAHHHEHH@Z
_TEXT	SEGMENT
_dx$ = -8						; size = 2
_dy$ = -4						; size = 2
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_dispPrio$ = 16						; size = 1
_bmpNo$ = 20						; size = 4
_hitFlag$ = 24						; size = 4
?StockDispBuffer2@@YAHHHEHH@Z PROC			; StockDispBuffer2, COMDAT

; 712  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 713  : 	short dx, dy;
; 714  : 	int BmpNo;
; 715  : 	DISP_SORT 	*pDispSort = DispBuffer.DispSort + DispBuffer.DispCnt;
; 716  : 	DISP_INFO 	*pDispInfo = DispBuffer.DispInfo + DispBuffer.DispCnt;
; 717  : 	if (DispBuffer.DispCnt >= DISP_BUFFER_SIZE) return -2;

  00006	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	0f bf 3d 00 c0
	01 00		 movsx	 edi, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00015	8d 1c 7f	 lea	 ebx, DWORD PTR [edi+edi*2]
  00018	66 39 0d 00 c0
	01 00		 cmp	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, cx
  0001f	0f 8d 96 00 00
	00		 jge	 $LN8@StockDispB

; 718  : 	if (-1 <= bmpNo && bmpNo <= CG_INVISIBLE) return -2;

  00025	8b 75 14	 mov	 esi, DWORD PTR _bmpNo$[ebp]
  00028	83 fe ff	 cmp	 esi, -1
  0002b	7c 22		 jl	 SHORT $LN4@StockDispB
  0002d	83 fe 63	 cmp	 esi, 99			; 00000063H
  00030	0f 8e 85 00 00
	00		 jle	 $LN8@StockDispB

; 719  : 	if (bmpNo > CG_INVISIBLE) {
; 720  : 		BmpNo = bmpNo;
; 721  : 		realGetPos(BmpNo, &dx, &dy);

  00036	8d 45 fc	 lea	 eax, DWORD PTR _dy$[ebp]
  00039	50		 push	 eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR _dx$[ebp]
  0003d	50		 push	 eax
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 ?realGetPos@@YAHKPAF0@Z	; realGetPos

; 722  : 	}else {

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _dy$[ebp]
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	8b 55 f8	 mov	 edx, DWORD PTR _dx$[ebp]
  0004d	eb 04		 jmp	 SHORT $LN5@StockDispB
$LN4@StockDispB:

; 723  : 		dx = 0;

  0004f	33 d2		 xor	 edx, edx

; 724  : 		dy = 0;

  00051	33 c9		 xor	 ecx, ecx
$LN5@StockDispB:

; 725  : 		BmpNo = bmpNo;
; 726  : 	}
; 727  : 	pDispSort->dispPrio = dispPrio;

  00053	8a 45 10	 mov	 al, BYTE PTR _dispPrio$[ebp]
  00056	88 04 bd 02 80
	01 00		 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*4+98306], al

; 728  : 	pDispSort->no = DispBuffer.DispCnt;

  0005d	66 a1 00 c0 01
	00		 mov	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00063	66 89 04 bd 00
	80 01 00	 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*4+98304], ax

; 729  : 	pDispInfo->x = x + dx;

  0006b	0f bf c2	 movsx	 eax, dx
  0006e	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00071	89 04 dd 00 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*8], eax

; 730  : 	pDispInfo->y = y + dy;

  00078	0f bf c1	 movsx	 eax, cx
  0007b	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  0007e	89 04 dd 04 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*8+4], eax

; 731  : 	pDispInfo->bmpNo = BmpNo;
; 732  : 	pDispInfo->hitFlag = hitFlag;

  00085	8b 45 18	 mov	 eax, DWORD PTR _hitFlag$[ebp]
  00088	89 34 dd 08 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*8+8], esi
  0008f	89 04 dd 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*8+16], eax

; 733  : 	pDispInfo->pAct = NULL;

  00096	c7 04 dd 0c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*8+12], 0

; 734  : #ifdef _READ16BITBMP
; 735  : 	if (pDispInfo->bmpNo >= OLD_GRAPHICS_START && pDispInfo->bmpNo < MAX_GRAPHICS) {
; 736  : 		if (adrntruebuff[pDispInfo->bmpNo - OLD_GRAPHICS_START].staturated == 1) pDispInfo->DrawEffect = 2;
; 737  : 	}
; 738  : #endif
; 739  : #ifdef _SFUMATO
; 740  : 	pDispInfo->sfumato = sfumato;
; 741  : #endif
; 742  : 	return DispBuffer.DispCnt++;

  000a1	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  000a8	5f		 pop	 edi
  000a9	0f bf c1	 movsx	 eax, cx
  000ac	66 41		 inc	 cx

; 743  : }

  000ae	5e		 pop	 esi
  000af	66 89 0d 00 c0
	01 00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, cx
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN8@StockDispB:
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000c2	5b		 pop	 ebx
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
?StockDispBuffer2@@YAHHHEHH@Z ENDP			; StockDispBuffer2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z
_TEXT	SEGMENT
_dy$ = -48						; size = 2
_dx$ = -44						; size = 2
_BmpNo$ = -40						; size = 4
_buf$1 = -36						; size = 30
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_dispPrio$ = 16						; size = 1
_bmpNo$ = 20						; size = 4
_hitFlag$ = 24						; size = 4
?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z PROC			; StockDispBuffer??êÈöÇ, COMDAT

; 646  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 647  : 	short dx, dy;
; 648  : 	int BmpNo;
; 649  : 
; 650  : 	DISP_SORT 	*pDispSort = DispBuffer.DispSort + DispBuffer.DispCnt;

  00011	0f bf 1d 00 c0
	01 00		 movsx	 ebx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688

; 651  : 	DISP_INFO 	*pDispInfo = DispBuffer.DispInfo + DispBuffer.DispCnt;
; 652  : 
; 653  : 	if (DispBuffer.DispCnt >= DISP_BUFFER_SIZE) return -2;

  00018	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 34 5b	 lea	 esi, DWORD PTR [ebx+ebx*2]
  00022	66 39 0d 00 c0
	01 00		 cmp	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, cx
  00029	0f 8d 55 01 00
	00		 jge	 $LN19@StockDispB

; 654  : 
; 655  : 	if (-1 <= bmpNo && bmpNo <= CG_INVISIBLE) return -2;

  0002f	8b 7d 14	 mov	 edi, DWORD PTR _bmpNo$[ebp]
  00032	83 ff ff	 cmp	 edi, -1
  00035	7c 34		 jl	 SHORT $LN4@StockDispB
  00037	83 ff 63	 cmp	 edi, 99			; 00000063H
  0003a	0f 8e 44 01 00
	00		 jle	 $LN19@StockDispB

; 656  : 
; 657  : 	if (bmpNo > CG_INVISIBLE) {
; 658  : 		realGetNo(bmpNo, (U4 *)&BmpNo);

  00040	8d 45 d8	 lea	 eax, DWORD PTR _BmpNo$[ebp]
  00043	50		 push	 eax
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 659  : 		if (BmpNo == 0)BmpNo = bmpNo;  //jl fix ç´æ¥æ¾ç¤ºå¨ç»å·

  0004a	8b 45 d8	 mov	 eax, DWORD PTR _BmpNo$[ebp]

; 660  : 		realGetPos(BmpNo, &dx, &dy);

  0004d	8d 4d d0	 lea	 ecx, DWORD PTR _dy$[ebp]
  00050	51		 push	 ecx
  00051	85 c0		 test	 eax, eax
  00053	8d 4d d4	 lea	 ecx, DWORD PTR _dx$[ebp]
  00056	51		 push	 ecx
  00057	0f 44 c7	 cmove	 eax, edi
  0005a	50		 push	 eax
  0005b	89 45 d8	 mov	 DWORD PTR _BmpNo$[ebp], eax
  0005e	e8 00 00 00 00	 call	 ?realGetPos@@YAHKPAF0@Z	; realGetPos

; 661  : 	}

  00063	8b 4d d8	 mov	 ecx, DWORD PTR _BmpNo$[ebp]
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	eb 13		 jmp	 SHORT $LN5@StockDispB
$LN4@StockDispB:

; 662  : 	else {
; 663  : 		dx = 0;
; 664  : 		dy = 0;
; 665  : 		BmpNo = bmpNo;

  0006b	8b cf		 mov	 ecx, edi
  0006d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dx$[ebp], 0
  00074	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _dy$[ebp], 0
  0007b	89 4d d8	 mov	 DWORD PTR _BmpNo$[ebp], ecx
$LN5@StockDispB:

; 666  : 	}
; 667  : 
; 668  : 	pDispSort->dispPrio = dispPrio;

  0007e	8a 55 10	 mov	 dl, BYTE PTR _dispPrio$[ebp]
  00081	88 14 9d 02 80
	01 00		 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*4+98306], dl

; 669  : 	pDispSort->no = DispBuffer.DispCnt;

  00088	66 a1 00 c0 01
	00		 mov	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0008e	66 89 04 9d 00
	80 01 00	 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*4+98304], ax

; 670  : 	pDispInfo->hitFlag = hitFlag;

  00096	8b 45 18	 mov	 eax, DWORD PTR _hitFlag$[ebp]
  00099	89 04 f5 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16], eax

; 671  : 	if (hitFlag >= 20 && hitFlag < 30) {

  000a0	83 f8 14	 cmp	 eax, 20			; 00000014H
  000a3	7c 4b		 jl	 SHORT $LN11@StockDispB
  000a5	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  000a8	7d 14		 jge	 SHORT $LN17@StockDispB

; 672  : 		pDispInfo->DrawEffect = 2;
; 673  : 		pDispInfo->hitFlag = hitFlag - 20;

  000aa	83 c0 ec	 add	 eax, -20		; ffffffecH
  000ad	c6 04 f5 14 00
	00 00 02	 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+20], 2
  000b5	89 04 f5 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16], eax

; 674  : 	}

  000bc	eb 3a		 jmp	 SHORT $LN12@StockDispB
$LN17@StockDispB:

; 675  : 	else if (hitFlag >= 30 && hitFlag < 40) {

  000be	83 f8 28	 cmp	 eax, 40			; 00000028H
  000c1	7d 14		 jge	 SHORT $LN16@StockDispB

; 676  : 		pDispInfo->DrawEffect = 3;
; 677  : 		pDispInfo->hitFlag = hitFlag - 30;

  000c3	83 c0 e2	 add	 eax, -30		; ffffffe2H
  000c6	c6 04 f5 14 00
	00 00 03	 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+20], 3
  000ce	89 04 f5 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16], eax

; 678  : 	}

  000d5	eb 21		 jmp	 SHORT $LN12@StockDispB
$LN16@StockDispB:

; 679  : 	else if (hitFlag >= 40 && hitFlag < 50) {

  000d7	83 f8 32	 cmp	 eax, 50			; 00000032H
  000da	7d 14		 jge	 SHORT $LN11@StockDispB

; 680  : 		pDispInfo->DrawEffect = 4;
; 681  : 		pDispInfo->hitFlag = hitFlag - 40;

  000dc	83 c0 d8	 add	 eax, -40		; ffffffd8H
  000df	c6 04 f5 14 00
	00 00 04	 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+20], 4
  000e7	89 04 f5 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16], eax

; 682  : 	}

  000ee	eb 08		 jmp	 SHORT $LN12@StockDispB
$LN11@StockDispB:

; 683  : 	else pDispInfo->DrawEffect = 0;

  000f0	c6 04 f5 14 00
	00 00 00	 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+20], 0
$LN12@StockDispB:

; 684  : 
; 685  : 	pDispInfo->x = x ;
; 686  : 	pDispInfo->y = y ;
; 687  : 	pDispInfo->bmpNo = BmpNo;
; 688  : 	pDispInfo->pAct = NULL;
; 689  : 
; 690  : #ifdef _SHOW_bmpNo
; 691  : 	extern int g_showBmpNo;
; 692  : 	if (g_showBmpNo)

  000f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_showBmpNo@@3HA, 0 ; g_showBmpNo
  000ff	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00102	89 04 f5 00 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8], eax
  00109	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0010c	89 04 f5 04 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+4], eax
  00113	89 0c f5 08 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+8], ecx
  0011a	c7 04 f5 0c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12], 0
  00125	74 39		 je	 SHORT $LN14@StockDispB

; 693  : 	{
; 694  : 		if (bmpNo > 0 && dispPrio != DISP_PRIO_TILE)

  00127	85 ff		 test	 edi, edi
  00129	7e 35		 jle	 SHORT $LN14@StockDispB
  0012b	80 fa 01	 cmp	 dl, 1
  0012e	74 30		 je	 SHORT $LN14@StockDispB

; 695  : 		{
; 696  : 			char buf[30];
; 697  : 			wsprintfA(buf, "%d", bmpNo);

  00130	57		 push	 edi
  00131	8d 45 dc	 lea	 eax, DWORD PTR _buf$1[ebp]
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00139	50		 push	 eax
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 698  : 			StockFontBuffer(pDispInfo->x, pDispInfo->y, FONT_PRIO_FRONT, 6, buf, 0);

  00140	6a 00		 push	 0
  00142	8d 45 dc	 lea	 eax, DWORD PTR _buf$1[ebp]
  00145	50		 push	 eax
  00146	6a 06		 push	 6
  00148	6a 01		 push	 1
  0014a	ff 34 f5 04 00
	00 00		 push	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+4]
  00151	ff 34 f5 00 00
	00 00		 push	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8]
  00158	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0015d	83 c4 24	 add	 esp, 36			; 00000024H
$LN14@StockDispB:

; 699  : 		}
; 700  : 	}
; 701  : 
; 702  : #endif 
; 703  : 
; 704  : 	return DispBuffer.DispCnt++;

  00160	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00167	5f		 pop	 edi
  00168	0f bf c1	 movsx	 eax, cx
  0016b	66 41		 inc	 cx

; 705  : }

  0016d	5e		 pop	 esi
  0016e	66 89 0d 00 c0
	01 00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, cx
  00175	5b		 pop	 ebx
  00176	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00179	33 cd		 xor	 ecx, ebp
  0017b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
$LN19@StockDispB:
  00184	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00187	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi
  0018e	33 cd		 xor	 ecx, ebp
  00190	5b		 pop	 ebx
  00191	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ENDP			; StockDispBuffer??êÈöÇ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?StockDispBuffer@@YAHHHEHH@Z
_TEXT	SEGMENT
_dx$ = -48						; size = 2
_dy$ = -44						; size = 2
_BmpNo$ = -40						; size = 4
_buf$1 = -36						; size = 30
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_dispPrio$ = 16						; size = 1
_bmpNo$ = 20						; size = 4
_hitFlag$ = 24						; size = 4
?StockDispBuffer@@YAHHHEHH@Z PROC			; StockDispBuffer, COMDAT

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 584  : 	short dx, dy;
; 585  : 	int BmpNo;
; 586  : 
; 587  : 	DISP_SORT 	*pDispSort = DispBuffer.DispSort + DispBuffer.DispCnt;

  00011	0f bf 1d 00 c0
	01 00		 movsx	 ebx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688

; 588  : 	DISP_INFO 	*pDispInfo = DispBuffer.DispInfo + DispBuffer.DispCnt;
; 589  : 
; 590  : 	if (DispBuffer.DispCnt >= DISP_BUFFER_SIZE) return -2;

  00018	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d 3c 5b	 lea	 edi, DWORD PTR [ebx+ebx*2]
  00022	66 39 0d 00 c0
	01 00		 cmp	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, cx
  00029	0f 8d 6f 01 00
	00		 jge	 $LN22@StockDispB

; 591  : 
; 592  : 	if (-1 <= bmpNo && bmpNo <= CG_INVISIBLE) return -2;

  0002f	8b 75 14	 mov	 esi, DWORD PTR _bmpNo$[ebp]
  00032	83 fe ff	 cmp	 esi, -1
  00035	7c 48		 jl	 SHORT $LN4@StockDispB
  00037	83 fe 63	 cmp	 esi, 99			; 00000063H
  0003a	0f 8e 5e 01 00
	00		 jle	 $LN22@StockDispB

; 593  : 	//printf("bmpNo = %d\n",bmpNo);
; 594  : 	if (bmpNo > CG_INVISIBLE) {
; 595  : 		if (bmpNo > 200000 && bmpNo < 500000){

  00040	8d 86 bf f2 fc
	ff		 lea	 eax, DWORD PTR [esi-200001]
  00046	3d de 93 04 00	 cmp	 eax, 299998		; 000493deH
  0004b	76 14		 jbe	 SHORT $LN21@StockDispB

; 596  : 			BmpNo = bmpNo;
; 597  : 		}else{
; 598  : 			realGetNo(bmpNo, (U4 *)&BmpNo);

  0004d	8d 45 d8	 lea	 eax, DWORD PTR _BmpNo$[ebp]
  00050	50		 push	 eax
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?realGetNo@@YAHKPAK@Z	; realGetNo

; 599  : 			if (BmpNo == 0)BmpNo = bmpNo;  //jl fix ç´æ¥æ¾ç¤ºå¨ç»å·

  00057	8b 45 d8	 mov	 eax, DWORD PTR _BmpNo$[ebp]
  0005a	83 c4 08	 add	 esp, 8
  0005d	85 c0		 test	 eax, eax
  0005f	75 05		 jne	 SHORT $LN8@StockDispB
$LN21@StockDispB:
  00061	8b c6		 mov	 eax, esi
  00063	89 45 d8	 mov	 DWORD PTR _BmpNo$[ebp], eax
$LN8@StockDispB:

; 600  : 		}
; 601  : 		realGetPos(BmpNo, &dx, &dy);

  00066	8d 4d d4	 lea	 ecx, DWORD PTR _dy$[ebp]
  00069	51		 push	 ecx
  0006a	8d 4d d0	 lea	 ecx, DWORD PTR _dx$[ebp]
  0006d	51		 push	 ecx
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?realGetPos@@YAHKPAF0@Z	; realGetPos

; 602  : 	}else {

  00074	8b 4d d8	 mov	 ecx, DWORD PTR _BmpNo$[ebp]
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	8b 55 d4	 mov	 edx, DWORD PTR _dy$[ebp]
  0007d	eb 11		 jmp	 SHORT $LN5@StockDispB
$LN4@StockDispB:

; 603  : 		dx = 0;
; 604  : 		dy = 0;

  0007f	33 d2		 xor	 edx, edx
  00081	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _dx$[ebp], 0

; 605  : 		BmpNo = bmpNo;

  00088	8b ce		 mov	 ecx, esi
  0008a	89 55 d4	 mov	 DWORD PTR _dy$[ebp], edx
  0008d	89 4d d8	 mov	 DWORD PTR _BmpNo$[ebp], ecx
$LN5@StockDispB:

; 606  : 	}
; 607  : 
; 608  : 	pDispSort->dispPrio = dispPrio;

  00090	8a 45 10	 mov	 al, BYTE PTR _dispPrio$[ebp]
  00093	88 04 9d 02 80
	01 00		 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*4+98306], al

; 609  : 	pDispSort->no = DispBuffer.DispCnt;

  0009a	66 a1 00 c0 01
	00		 mov	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  000a0	66 89 04 9d 00
	80 01 00	 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[ebx*4+98304], ax

; 610  : 	pDispInfo->hitFlag = hitFlag;

  000a8	8b 45 18	 mov	 eax, DWORD PTR _hitFlag$[ebp]
  000ab	89 04 fd 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+16], eax

; 611  : 	if (hitFlag >= 20 && hitFlag < 30) {

  000b2	83 f8 14	 cmp	 eax, 20			; 00000014H
  000b5	7c 4b		 jl	 SHORT $LN13@StockDispB
  000b7	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  000ba	7d 14		 jge	 SHORT $LN19@StockDispB

; 612  : 		pDispInfo->DrawEffect = 2;
; 613  : 		pDispInfo->hitFlag = hitFlag - 20;

  000bc	83 c0 ec	 add	 eax, -20		; ffffffecH
  000bf	c6 04 fd 14 00
	00 00 02	 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+20], 2
  000c7	89 04 fd 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+16], eax

; 614  : 	}

  000ce	eb 3a		 jmp	 SHORT $LN14@StockDispB
$LN19@StockDispB:

; 615  : 	else if (hitFlag >= 30 && hitFlag < 40) {

  000d0	83 f8 28	 cmp	 eax, 40			; 00000028H
  000d3	7d 14		 jge	 SHORT $LN18@StockDispB

; 616  : 		pDispInfo->DrawEffect = 3;
; 617  : 		pDispInfo->hitFlag = hitFlag - 30;

  000d5	83 c0 e2	 add	 eax, -30		; ffffffe2H
  000d8	c6 04 fd 14 00
	00 00 03	 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+20], 3
  000e0	89 04 fd 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+16], eax

; 618  : 	}

  000e7	eb 21		 jmp	 SHORT $LN14@StockDispB
$LN18@StockDispB:

; 619  : 	else if (hitFlag >= 40 && hitFlag < 50) {

  000e9	83 f8 32	 cmp	 eax, 50			; 00000032H
  000ec	7d 14		 jge	 SHORT $LN13@StockDispB

; 620  : 		pDispInfo->DrawEffect = 4;
; 621  : 		pDispInfo->hitFlag = hitFlag - 40;

  000ee	83 c0 d8	 add	 eax, -40		; ffffffd8H
  000f1	c6 04 fd 14 00
	00 00 04	 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+20], 4
  000f9	89 04 fd 10 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+16], eax

; 622  : 	}

  00100	eb 08		 jmp	 SHORT $LN14@StockDispB
$LN13@StockDispB:

; 623  : 	else pDispInfo->DrawEffect = 0;

  00102	c6 04 fd 14 00
	00 00 00	 mov	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+20], 0
$LN14@StockDispB:

; 624  : 
; 625  : 	pDispInfo->x = x + dx;

  0010a	8b 45 d0	 mov	 eax, DWORD PTR _dx$[ebp]
  0010d	98		 cwde
  0010e	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00111	89 04 fd 00 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8], eax

; 626  : 	pDispInfo->y = y + dy;

  00118	0f bf c2	 movsx	 eax, dx
  0011b	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]

; 627  : 	pDispInfo->bmpNo = BmpNo;
; 628  : 	pDispInfo->pAct = NULL;
; 629  : 
; 630  : #ifdef _SHOW_bmpNo
; 631  : 	extern int g_showBmpNo;
; 632  : 	if (g_showBmpNo){

  0011e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_showBmpNo@@3HA, 0 ; g_showBmpNo
  00125	89 04 fd 04 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+4], eax
  0012c	89 0c fd 08 00
	00 00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+8], ecx
  00133	c7 04 fd 0c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+12], 0
  0013e	74 3a		 je	 SHORT $LN16@StockDispB

; 633  : 		if (bmpNo > 0 && dispPrio != DISP_PRIO_TILE){

  00140	85 f6		 test	 esi, esi
  00142	7e 36		 jle	 SHORT $LN16@StockDispB
  00144	80 7d 10 01	 cmp	 BYTE PTR _dispPrio$[ebp], 1
  00148	74 30		 je	 SHORT $LN16@StockDispB

; 634  : 			char buf[30];
; 635  : 			wsprintfA(buf, "%d", bmpNo);

  0014a	56		 push	 esi
  0014b	8d 45 dc	 lea	 eax, DWORD PTR _buf$1[ebp]
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00153	50		 push	 eax
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 636  : 			StockFontBuffer(pDispInfo->x, pDispInfo->y, FONT_PRIO_FRONT, 6, buf, 0);

  0015a	6a 00		 push	 0
  0015c	8d 45 dc	 lea	 eax, DWORD PTR _buf$1[ebp]
  0015f	50		 push	 eax
  00160	6a 06		 push	 6
  00162	6a 01		 push	 1
  00164	ff 34 fd 04 00
	00 00		 push	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8+4]
  0016b	ff 34 fd 00 00
	00 00		 push	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*8]
  00172	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00177	83 c4 24	 add	 esp, 36			; 00000024H
$LN16@StockDispB:

; 637  : 		}
; 638  : 	}
; 639  : 
; 640  : #endif 
; 641  : 
; 642  : 	return DispBuffer.DispCnt++;

  0017a	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00181	5f		 pop	 edi
  00182	0f bf c1	 movsx	 eax, cx
  00185	66 41		 inc	 cx

; 643  : }

  00187	5e		 pop	 esi
  00188	66 89 0d 00 c0
	01 00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, cx
  0018f	5b		 pop	 ebx
  00190	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00193	33 cd		 xor	 ecx, ebp
  00195	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
$LN22@StockDispB:
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a1	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	33 cd		 xor	 ecx, ebp
  001aa	5b		 pop	 ebx
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
?StockDispBuffer@@YAHHHEHH@Z ENDP			; StockDispBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?PutBmp@@YAXXZ
_TEXT	SEGMENT
_rect$2 = -308						; size = 16
_pDispSort$3 = -292					; size = 4
tv1223 = -288						; size = 4
_pDispSort$1$ = -284					; size = 4
_i$4 = -280						; size = 4
_bmpNo$1$ = -276					; size = 4
_pDispInfo$1$ = -272					; size = 4
tv1217 = -268						; size = 4
tv1224 = -264						; size = 4
tv1180 = -264						; size = 4
_rect$1$ = -260						; size = 4
_rect$2$ = -256						; size = 4
tv1216 = -252						; size = 4
_y0$1$ = -248						; size = 4
tv1179 = -244						; size = 4
_x0$1$ = -244						; size = 4
_drawMapEffectFlag$5 = -238				; size = 1
_putTextFlag$6 = -237					; size = 1
_ddsd$7 = -236						; size = 108
_ddsd2$8 = -128						; size = 108
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?PutBmp@@YAXXZ PROC					; PutBmp, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PutBmp@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 255  : 	try

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 256  : 	{
; 257  : 		if (lpDraw == 0) return;

  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0003d	85 c0		 test	 eax, eax
  0003f	0f 84 98 06 00
	00		 je	 $LN63@PutBmp

; 258  : 		if (lpDraw->lpBACKBUFFER == 0)return;

  00045	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00049	0f 84 8e 06 00
	00		 je	 $LN63@PutBmp

; 259  : 
; 260  : #ifdef __SKYISLAND
; 261  : 		// ????????î¼?îµî¹?î¤?
; 262  : 		switch (BackBufferDrawType) {//èæ¯ç±»å

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BackBufferDrawType@@3HA ; BackBufferDrawType
  00054	85 c0		 test	 eax, eax
  00056	74 71		 je	 SHORT $LN13@PutBmp
  00058	83 f8 03	 cmp	 eax, 3
  0005b	74 4c		 je	 SHORT $LN16@PutBmp

; 284  : 		default:
; 285  : 			if (!PutTileBmp()) {

  0005d	e8 00 00 00 00	 call	 ?PutTileBmp@@YAHXZ	; PutTileBmp
  00062	85 c0		 test	 eax, eax
  00064	0f 85 a3 00 00
	00		 jne	 $LN19@PutBmp

; 286  : 				if (fastDrawTile && lpDraw->lpBACKBUFFER->BltFast(0, 0, lpBattleSurface, NULL, DDBLTFAST_WAIT | DDBLTFAST_SRCCOLORKEY) == DDERR_SURFACEBUSY) {

  0006a	66 39 05 00 00
	00 00		 cmp	 WORD PTR ?fastDrawTile@@3FB, ax ; fastDrawTile
  00071	0f 84 96 00 00
	00		 je	 $LN19@PutBmp
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0007c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	6a 11		 push	 17			; 00000011H
  00083	6a 00		 push	 0
  00085	ff 35 00 00 00
	00		 push	 DWORD PTR ?lpBattleSurface@@3PAUIDirectDrawSurface@@A ; lpBattleSurface
  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	50		 push	 eax
  00090	ff 51 1c	 call	 DWORD PTR [ecx+28]
  00093	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  00098	75 73		 jne	 SHORT $LN19@PutBmp
$LN78@PutBmp:

; 568  : 
; 569  : 
; 570  : 
; 571  : }

  0009a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, 1 ; SurfaceBusyFlag
  000a4	e9 34 06 00 00	 jmp	 $LN63@PutBmp
$LN16@PutBmp:

; 277  : #endif
; 278  : 			break;
; 279  : 		case DRAW_BACK_BATTLE:	//ææèæ¯
; 280  : 			amountXFastDraw = amountYFastDraw = 0;

  000a9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?amountYFastDraw@@3HA, 0 ; amountYFastDraw
  000b3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?amountXFastDraw@@3HA, 0 ; amountXFastDraw

; 281  : 			PutTileBmp();

  000bd	e8 00 00 00 00	 call	 ?PutTileBmp@@YAHXZ	; PutTileBmp

; 282  : 			DrawBattleMap();

  000c2	e8 00 00 00 00	 call	 ?DrawBattleMap@@YAXXZ	; DrawBattleMap

; 283  : 			break;

  000c7	eb 44		 jmp	 SHORT $LN19@PutBmp
$LN13@PutBmp:

; 263  : 		case DRAW_BACK_NORMAL://æ èæ¯
; 264  : 			ClearBackSurface();	//æ¸ç©ºèæ¯æ¾ç¤º

  000c9	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 265  : 			void SkyIslandProc();
; 266  : 			SkyIslandProc();

  000ce	e8 00 00 00 00	 call	 ?SkyIslandProc@@YAXXZ	; SkyIslandProc

; 267  : 			if (!PutTileBmp()) {

  000d3	e8 00 00 00 00	 call	 ?PutTileBmp@@YAHXZ	; PutTileBmp
  000d8	85 c0		 test	 eax, eax
  000da	75 2c		 jne	 SHORT $LN15@PutBmp

; 268  : 
; 269  : 
; 270  : 				if (fastDrawTile && lpDraw->lpBACKBUFFER->BltFast(0, 0, lpBattleSurface, NULL, DDBLTFAST_WAIT | DDBLTFAST_SRCCOLORKEY) == DDERR_SURFACEBUSY) {

  000dc	66 39 05 00 00
	00 00		 cmp	 WORD PTR ?fastDrawTile@@3FB, ax ; fastDrawTile
  000e3	74 23		 je	 SHORT $LN15@PutBmp
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  000ea	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ef	6a 11		 push	 17			; 00000011H
  000f1	6a 00		 push	 0
  000f3	ff 35 00 00 00
	00		 push	 DWORD PTR ?lpBattleSurface@@3PAUIDirectDrawSurface@@A ; lpBattleSurface
  000f9	6a 00		 push	 0
  000fb	6a 00		 push	 0
  000fd	50		 push	 eax
  000fe	ff 51 1c	 call	 DWORD PTR [ecx+28]
  00101	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  00106	74 92		 je	 SHORT $LN78@PutBmp
$LN15@PutBmp:

; 271  : 					SurfaceBusyFlag = TRUE;
; 272  : 					return;
; 273  : 				}
; 274  : 			}
; 275  : #ifdef _SURFACE_ANIM
; 276  : 			DrawAni();

  00108	e8 00 00 00 00	 call	 ?DrawAni@@YAXXZ		; DrawAni
$LN19@PutBmp:

; 287  : 					SurfaceBusyFlag = TRUE;
; 288  : 					return;
; 289  : 				}
; 290  : 			}
; 291  : 			break;
; 292  : 		}
; 293  : 		DISP_SORT 	*pDispSort = pSortTileTail;

  0010d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pSortTileTail@@3PAUDISP_SORT@@A ; pSortTileTail
  00113	89 bd dc fe ff
	ff		 mov	 DWORD PTR _pDispSort$3[ebp], edi

; 294  : #else
; 295  : 		DISP_SORT 	*pDispSort = DispBuffer.DispSort;
; 296  : #endif
; 297  : 		DISP_INFO 	*pDispInfo;
; 298  : 		int i;
; 299  : 		int bmpNo;
; 300  : 		UCHAR putTextFlag = 0;

  00119	32 c9		 xor	 cl, cl
  0011b	88 8d 13 ff ff
	ff		 mov	 BYTE PTR _putTextFlag$6[ebp], cl

; 301  : 		unsigned char drawMapEffectFlag = 0;

  00121	32 c0		 xor	 al, al
  00123	88 85 12 ff ff
	ff		 mov	 BYTE PTR _drawMapEffectFlag$5[ebp], al

; 302  : 		unsigned char drawFastTileFlag = 0;
; 303  : 		unsigned char drawFastTileFlag2 = 0;
; 304  : #ifndef __CARYTEST
; 305  : 		SURFACE_INFO *lpSurfaceInfo;
; 306  : #ifdef _READ16BITBMP
; 307  : 		SURFACE_INFO *lpSurfaceInfoSys;
; 308  : #endif
; 309  : #else
; 310  : 		DDSURFACEDESC ddsd;	// ??????î¨î
; 311  : 		LPWORD surface;
; 312  : 		int pitch;
; 313  : 		BOOL locked = FALSE;
; 314  : 		int x, y;
; 315  : 		short width, height;
; 316  : 		ZeroMemory(&ddsd, sizeof(DDSURFACEDESC));
; 317  : 		ddsd.dwSize = sizeof(DDSURFACEDESC);
; 318  : 		if (lpDraw->lpBACKBUFFER->Lock(NULL, &ddsd, DDLOCK_WAIT, NULL) == DD_OK) {
; 319  : 			surface = (LPWORD)ddsd.lpSurface;
; 320  : 			pitch = ddsd.lPitch;
; 321  : 			locked = TRUE;
; 322  : 		}
; 323  : #endif
; 324  : 		// ???????????
; 325  : 		for (i = 0; i < DispBuffer.DispCnt; i++, pDispSort++) {

  00129	33 d2		 xor	 edx, edx
  0012b	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _i$4[ebp], edx
$LN77@PutBmp:
  00131	89 bd e4 fe ff
	ff		 mov	 DWORD PTR _pDispSort$1$[ebp], edi
  00137	0f bf 05 00 c0
	01 00		 movsx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0013e	3b d0		 cmp	 edx, eax
  00140	0f 8d 2e 05 00
	00		 jge	 $LN5@PutBmp

; 326  : 			pDispInfo = &DispBuffer.DispInfo[pDispSort->no];

  00146	0f bf 07	 movsx	 eax, WORD PTR [edi]
  00149	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0014c	8d 1c c5 00 00
	00 00		 lea	 ebx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*8]
  00153	89 9d f0 fe ff
	ff		 mov	 DWORD PTR _pDispInfo$1$[ebp], ebx

; 327  : 			bmpNo = pDispInfo->bmpNo;//ç§å¾ID

  00159	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  0015c	89 b5 ec fe ff
	ff		 mov	 DWORD PTR _bmpNo$1$[ebp], esi

; 328  : 			if (putTextFlag == 0) {

  00162	84 c9		 test	 cl, cl
  00164	75 21		 jne	 SHORT $LN21@PutBmp

; 329  : 				if (pDispSort->dispPrio >= DISP_PRIO_MENU) {

  00166	80 7f 02 68	 cmp	 BYTE PTR [edi+2], 104	; 00000068H
  0016a	72 57		 jb	 SHORT $LN25@PutBmp

; 330  : 					PutText(FONT_PRIO_BACK);

  0016c	6a 00		 push	 0
  0016e	e8 00 00 00 00	 call	 ?PutText@@YAXD@Z	; PutText

; 331  : #ifdef _CHANNEL_MODIFY
; 332  : 					PutText(FONT_PRIO_CHATBUFFER);

  00173	6a 03		 push	 3
  00175	e8 00 00 00 00	 call	 ?PutText@@YAXD@Z	; PutText
  0017a	83 c4 08	 add	 esp, 8

; 333  : #endif
; 334  : 					putTextFlag = 1;

  0017d	b1 01		 mov	 cl, 1
  0017f	88 8d 13 ff ff
	ff		 mov	 BYTE PTR _putTextFlag$6[ebp], cl

; 335  : 				}
; 336  : 			}
; 337  : 			if (putTextFlag == 1) {

  00185	eb 05		 jmp	 SHORT $LN71@PutBmp
$LN21@PutBmp:
  00187	80 f9 01	 cmp	 cl, 1
  0018a	75 1a		 jne	 SHORT $LN23@PutBmp
$LN71@PutBmp:

; 338  : 				if (pDispSort->dispPrio >= DISP_PRIO_YES_NO_WND) {

  0018c	80 7f 02 6d	 cmp	 BYTE PTR [edi+2], 109	; 0000006dH
  00190	72 31		 jb	 SHORT $LN25@PutBmp

; 339  : 					PutText(FONT_PRIO_FRONT);

  00192	6a 01		 push	 1
  00194	e8 00 00 00 00	 call	 ?PutText@@YAXD@Z	; PutText
  00199	83 c4 04	 add	 esp, 4

; 340  : 					putTextFlag = 2;

  0019c	b0 02		 mov	 al, 2
  0019e	88 85 13 ff ff
	ff		 mov	 BYTE PTR _putTextFlag$6[ebp], al

; 341  : 				}
; 342  : 			}
; 343  : #ifdef _TRADETALKWND				// Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 344  : 			//å¢å ä¸å±æ°çæå­æ¾ç¤ºé¡ºåº
; 345  : 			if (putTextFlag == 2) {

  001a4	eb 05		 jmp	 SHORT $LN72@PutBmp
$LN23@PutBmp:
  001a6	80 f9 02	 cmp	 cl, 2
  001a9	75 18		 jne	 SHORT $LN25@PutBmp
$LN72@PutBmp:

; 346  : 				if (pDispSort->dispPrio >= DISP_PRIO_BOX3) {

  001ab	80 7f 02 6f	 cmp	 BYTE PTR [edi+2], 111	; 0000006fH
  001af	72 12		 jb	 SHORT $LN25@PutBmp

; 347  : 					PutText(FONT_PRIO_AFRONT);

  001b1	6a 02		 push	 2
  001b3	e8 00 00 00 00	 call	 ?PutText@@YAXD@Z	; PutText
  001b8	83 c4 04	 add	 esp, 4

; 348  : 					putTextFlag = 2;

  001bb	b0 02		 mov	 al, 2
  001bd	88 85 13 ff ff
	ff		 mov	 BYTE PTR _putTextFlag$6[ebp], al
$LN25@PutBmp:

; 349  : 				}
; 350  : 			}
; 351  : #endif
; 352  : 			if (pDispSort->dispPrio > DISP_PRIO_MENU) {

  001c3	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  001c6	3c 68		 cmp	 al, 104			; 00000068H
  001c8	76 2c		 jbe	 SHORT $LN28@PutBmp

; 353  : 				if (MenuToggleFlag & JOY_CTRL_M && pActMenuWnd2 != NULL) {

  001ca	f7 05 00 00 00
	00 00 00 00 40	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 1073741824 ; MenuToggleFlag, 40000000H
  001d4	74 24		 je	 SHORT $LN74@PutBmp
  001d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  001db	85 c0		 test	 eax, eax
  001dd	74 1b		 je	 SHORT $LN74@PutBmp

; 354  : 					if (pActMenuWnd2->hp > 0) {

  001df	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  001e3	7e 15		 jle	 SHORT $LN74@PutBmp

; 355  : #ifdef _2005_ValentineDay
; 356  : 						// ä¸è®©ç©å®¶çå°å°å°å¾
; 357  : 						if (nowFloor != 17006)
; 358  : #endif
; 359  : 							//#ifdef CAX_XMAP_TZ
; 360  : 							drawAutoMap(pActMenuWnd2->x, pActMenuWnd2->y);

  001e5	ff 70 1c	 push	 DWORD PTR [eax+28]
  001e8	ff 70 18	 push	 DWORD PTR [eax+24]
  001eb	e8 00 00 00 00	 call	 ?drawAutoMap@@YAXHH@Z	; drawAutoMap
  001f0	83 c4 08	 add	 esp, 8
  001f3	8a 47 02	 mov	 al, BYTE PTR [edi+2]
$LN28@PutBmp:

; 361  : 					}
; 362  : 				}
; 363  : 			}
; 364  : 			// ?????????					
; 365  : 			if (pDispSort->dispPrio >= DISP_PRIO_RESERVE) {

  001f6	3c 14		 cmp	 al, 20			; 00000014H
  001f8	72 1a		 jb	 SHORT $LN29@PutBmp
$LN74@PutBmp:

; 366  : #ifdef __SKYISLAND
; 367  : #ifdef _NEW_CLOUD
; 368  : 				extern void SkyIslandDraw2(int fl);
; 369  : 				SkyIslandDraw2(nowFloor);

  001fa	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowFloor@@3HA ; nowFloor
  00200	e8 00 00 00 00	 call	 ?SkyIslandDraw2@@YAXH@Z	; SkyIslandDraw2
  00205	83 c4 04	 add	 esp, 4

; 370  : #else
; 371  : 				extern void SkyIslandDraw2();
; 372  : 				SkyIslandDraw2();
; 373  : #endif
; 374  : #endif
; 375  : 				drawMapEffect();

  00208	e8 00 00 00 00	 call	 ?drawMapEffect@@YAXXZ	; drawMapEffect

; 376  : 				drawMapEffectFlag = 1;

  0020d	c6 85 12 ff ff
	ff 01		 mov	 BYTE PTR _drawMapEffectFlag$5[ebp], 1
$LN29@PutBmp:

; 377  : 			}
; 378  : #ifndef __SKYISLAND
; 379  : 			// ?????î²î¼?
; 380  : 			if (fastDrawTile) {
; 381  : 				RECT src;
; 382  : 				int sx, sy;
; 383  : 				if (pDispSort->dispPrio >= DISP_PRIO_TILE && drawFastTileFlag2 == 0) {
; 384  : 					if (ProcNo == PROC_GAME && SubProcNo == 3 && fastDrawTileFlag) {
; 385  : 						// ?????????????????????????????
; 386  : 						src.top = 0;
; 387  : 						src.left = 0;
; 388  : 						src.right = DEF_APPSIZEX;
; 389  : 						src.bottom = DEF_APPSIZEY;
; 390  : 						sx = 0;
; 391  : 						sy = 0;
; 392  : 						//???????????????
; 393  : 						if (ResoMode == 1) {
; 394  : 							src.right >>= 1;
; 395  : 							src.bottom >>= 1;
; 396  : 						}
; 397  : 						if (amountXFastDraw > 0) {
; 398  : 							src.right -= amountXFastDraw;
; 399  : 							sx += amountXFastDraw;
; 400  : 						}
; 401  : 						else if (amountXFastDraw < 0) src.left -= amountXFastDraw;
; 402  : 
; 403  : 						if (amountYFastDraw > 0) {
; 404  : 							src.bottom -= amountYFastDraw;
; 405  : 							sy += amountYFastDraw;
; 406  : 						}
; 407  : 						else if (amountYFastDraw < 0) src.top -= amountYFastDraw;
; 408  : 
; 409  : 						if (lpDraw->lpBACKBUFFER->BltFast(sx, sy, lpBattleSurface, &src, DDBLTFAST_WAIT) == DDERR_SURFACEBUSY)
; 410  : 							SurfaceBusyFlag = TRUE;
; 411  : 						drawFastTileFlag2 = 1;
; 412  : 					}
; 413  : 				}
; 414  : 				if (pDispSort->dispPrio > DISP_PRIO_TILE && drawFastTileFlag == 0) {
; 415  : 					if (ProcNo == PROC_GAME && SubProcNo == 3 && fastDrawTileFlag) {
; 416  : 						// ????????????????????????????
; 417  : 						if (lpBattleSurface->BltFast(0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT) == DDERR_SURFACEBUSY)
; 418  : 							SurfaceBusyFlag = TRUE;
; 419  : 						drawFastTileFlag = 1;
; 420  : 					}
; 421  : 				}
; 422  : 			}
; 423  : #endif
; 424  : 			// ???????
; 425  : 			if (bmpNo & STOCK_DISP_BUFFER_NO_BMP) {

  00214	85 f6		 test	 esi, esi
  00216	79 1b		 jns	 SHORT $LN30@PutBmp

; 426  : 				if (bmpNo & (STOCK_DISP_BUFFER_BOX | STOCK_DISP_BUFFER_BOX_FILL | STOCK_DISP_BUFFER_LINE)) {

  00218	f7 c6 00 00 00
	70		 test	 esi, 1879048192		; 70000000H
  0021e	0f 84 2f 04 00
	00		 je	 $LN4@PutBmp

; 427  : 					GetBoxDispBuffer(pDispInfo, bmpNo);

  00224	56		 push	 esi
  00225	53		 push	 ebx
  00226	e8 00 00 00 00	 call	 ?GetBoxDispBuffer@@YAXPAUDISP_INFO@@H@Z ; GetBoxDispBuffer
  0022b	83 c4 08	 add	 esp, 8

; 428  : 				}
; 429  : 				continue;

  0022e	e9 20 04 00 00	 jmp	 $LN4@PutBmp
$LN30@PutBmp:

; 430  : 			}
; 431  : 			if (pDispInfo->pAct != NULL) {

  00233	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00236	85 c0		 test	 eax, eax
  00238	74 0d		 je	 SHORT $LN33@PutBmp

; 432  : 				if (pDispInfo->pAct->atr & ACT_ATR_HIDE2) continue;

  0023a	f6 80 a4 00 00
	00 20		 test	 BYTE PTR [eax+164], 32	; 00000020H
  00241	0f 85 0c 04 00
	00		 jne	 $LN4@PutBmp
$LN33@PutBmp:

; 433  : 			}
; 434  : 			if (LoadBmp(bmpNo) == FALSE) continue;

  00247	56		 push	 esi
  00248	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp
  0024d	83 c4 04	 add	 esp, 4
  00250	85 c0		 test	 eax, eax
  00252	0f 84 fb 03 00
	00		 je	 $LN4@PutBmp

; 435  : 			{
; 436  : 				for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo; lpSurfaceInfo != NULL; lpSurfaceInfo = lpSurfaceInfo->pNext) {

  00258	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0025b	8b 3c 85 00 00
	00 00		 mov	 edi, DWORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4]
$LL9@PutBmp:
  00262	85 ff		 test	 edi, edi
  00264	0f 84 e3 03 00
	00		 je	 $LN8@PutBmp

; 437  : #ifdef _CACHE_SURFACE_
; 438  : 					DrawSurfaceFromPalette(lpSurfaceInfo);
; 439  : #endif
; 440  : 					if (pDispInfo->DrawEffect == 2)//é¥±åå¤ç

  0026a	8a 43 14	 mov	 al, BYTE PTR [ebx+20]
  0026d	3c 02		 cmp	 al, 2
  0026f	75 50		 jne	 SHORT $LN35@PutBmp

; 441  : 						DrawStaturated(lpSurfaceInfo->lpSurface,

  00271	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00274	0f bf 57 16	 movsx	 edx, WORD PTR [edi+22]
  00278	0f bf 77 14	 movsx	 esi, WORD PTR [edi+20]
  0027c	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  00280	0f 94 c0	 sete	 al
  00283	0f b6 c0	 movzx	 eax, al
  00286	50		 push	 eax
  00287	0f bf 04 8d 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  0028f	50		 push	 eax
  00290	0f bf 04 8d 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+4]
  00298	50		 push	 eax
  00299	52		 push	 edx
  0029a	56		 push	 esi
  0029b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0029e	03 c2		 add	 eax, edx
  002a0	50		 push	 eax
  002a1	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a3	03 c6		 add	 eax, esi
  002a5	50		 push	 eax
  002a6	ff 37		 push	 DWORD PTR [edi]
  002a8	e8 00 00 00 00	 call	 ?DrawStaturated@@YAXPAUIDirectDrawSurface@@HHHHHH_N@Z ; DrawStaturated
  002ad	83 c4 20	 add	 esp, 32			; 00000020H

; 435  : 			{
; 436  : 				for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo; lpSurfaceInfo != NULL; lpSurfaceInfo = lpSurfaceInfo->pNext) {

  002b0	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
  002b3	8b 9d f0 fe ff
	ff		 mov	 ebx, DWORD PTR _pDispInfo$1$[ebp]
  002b9	8b b5 ec fe ff
	ff		 mov	 esi, DWORD PTR _bmpNo$1$[ebp]
  002bf	eb a1		 jmp	 SHORT $LL9@PutBmp
$LN35@PutBmp:

; 442  : 							pDispInfo->x + lpSurfaceInfo->offsetX, pDispInfo->y + lpSurfaceInfo->offsetY,
; 443  : 							lpSurfaceInfo->offsetX, lpSurfaceInfo->offsetY,
; 444  : 							SpriteInfo[bmpNo].width, SpriteInfo[bmpNo].height, (lpSurfaceInfo->pNext == NULL ? true : false));
; 445  : 					else if (pDispInfo->DrawEffect == 3 || pDispInfo->DrawEffect == 4)//ç³ååä¸­æ¯å¤ç

  002c1	3c 03		 cmp	 al, 3
  002c3	0f 84 2d 03 00
	00		 je	 $LN39@PutBmp
  002c9	3c 04		 cmp	 al, 4
  002cb	0f 84 25 03 00
	00		 je	 $LN39@PutBmp

; 447  : 							pDispInfo->x + lpSurfaceInfo->offsetX, pDispInfo->y + lpSurfaceInfo->offsetY,
; 448  : 							lpSurfaceInfo->offsetX, lpSurfaceInfo->offsetY,
; 449  : 							SpriteInfo[bmpNo].width, SpriteInfo[bmpNo].height, (lpSurfaceInfo->pNext == NULL ? true : false), pDispInfo->DrawEffect);
; 450  : #ifdef _PETCOLOR_
; 451  : 					else if (pDispInfo->DrawEffect == 5) {

  002d1	8d 34 76	 lea	 esi, DWORD PTR [esi+esi*2]
  002d4	3c 05		 cmp	 al, 5
  002d6	75 41		 jne	 SHORT $LN40@PutBmp

; 452  : 						DrawGray(lpSurfaceInfo->lpSurface,

  002d8	0f bf 4f 16	 movsx	 ecx, WORD PTR [edi+22]
  002dc	0f bf 57 14	 movsx	 edx, WORD PTR [edi+20]
  002e0	6a 03		 push	 3
  002e2	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  002e6	0f 94 c0	 sete	 al
  002e9	0f b6 c0	 movzx	 eax, al
  002ec	50		 push	 eax
  002ed	0f bf 04 b5 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[esi*4+6]
  002f5	50		 push	 eax
  002f6	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _bmpNo$1$[ebp]
  002fc	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  002ff	0f bf 04 85 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+4]
  00307	50		 push	 eax
  00308	51		 push	 ecx
  00309	52		 push	 edx
  0030a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0030d	03 c1		 add	 eax, ecx
  0030f	50		 push	 eax
  00310	8b 03		 mov	 eax, DWORD PTR [ebx]
  00312	03 c2		 add	 eax, edx

; 453  : 							pDispInfo->x + lpSurfaceInfo->offsetX, pDispInfo->y + lpSurfaceInfo->offsetY,
; 454  : 							lpSurfaceInfo->offsetX, lpSurfaceInfo->offsetY,
; 455  : 							SpriteInfo[bmpNo].width, SpriteInfo[bmpNo].height, (lpSurfaceInfo->pNext == NULL ? true : false), 3);
; 456  : 					}

  00314	e9 15 03 00 00	 jmp	 $LN76@PutBmp
$LN40@PutBmp:

; 457  : #endif
; 458  : #ifdef _NEW_COLOR_
; 459  : 					else {
; 460  : 						extern int NewColor16Flg;
; 461  : 						if (SpriteInfo[bmpNo].AlphaFlg) {

  00319	83 3c b5 08 00
	00 00 00	 cmp	 DWORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[esi*4+8], 0
  00321	0f 84 79 02 00
	00		 je	 $LN42@PutBmp

; 462  : 							DDSURFACEDESC ddsd;
; 463  : 							DDSURFACEDESC ddsd2;
; 464  : 							short bx, by;
; 465  : 							short x0, y0;
; 466  : 							long w, h;
; 467  : 							int  Dstpitch, Srcpitch;
; 468  : 							RECT rect = { 0, 0, SurfaceSizeX, SurfaceSizeY };

  00327	33 c0		 xor	 eax, eax
  00329	89 85 fc fe ff
	ff		 mov	 DWORD PTR _rect$1$[ebp], eax
  0032f	89 85 cc fe ff
	ff		 mov	 DWORD PTR _rect$2[ebp], eax
  00335	89 85 00 ff ff
	ff		 mov	 DWORD PTR _rect$2$[ebp], eax
  0033b	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _rect$2[ebp+4], eax
  00341	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?SurfaceSizeX@@3HA ; SurfaceSizeX
  00347	89 9d d4 fe ff
	ff		 mov	 DWORD PTR _rect$2[ebp+8], ebx
  0034d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?SurfaceSizeY@@3HA ; SurfaceSizeY
  00353	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _rect$2[ebp+12], esi

; 469  : 							bx = x0 = pDispInfo->x + lpSurfaceInfo->offsetX;

  00359	0f b7 47 14	 movzx	 eax, WORD PTR [edi+20]
  0035d	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pDispInfo$1$[ebp]
  00363	66 03 01	 add	 ax, WORD PTR [ecx]
  00366	0f b7 c0	 movzx	 eax, ax
  00369	89 85 0c ff ff
	ff		 mov	 DWORD PTR _x0$1$[ebp], eax

; 470  : 							by = y0 = pDispInfo->y + lpSurfaceInfo->offsetY;

  0036f	0f b7 41 04	 movzx	 eax, WORD PTR [ecx+4]
  00373	66 03 47 16	 add	 ax, WORD PTR [edi+22]
  00377	0f b7 d0	 movzx	 edx, ax
  0037a	89 95 08 ff ff
	ff		 mov	 DWORD PTR _y0$1$[ebp], edx

; 471  : 							w = rect.right - rect.left;
; 472  : 							h = rect.bottom - rect.top;
; 473  : 							if (bx >= lpDraw->xSize || bx + w <= 0 || by >= lpDraw->ySize || by + h <= 0)	continue;

  00380	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _x0$1$[ebp]
  00386	98		 cwde
  00387	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv1217[ebp], eax
  0038d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00393	8b 89 84 00 00
	00		 mov	 ecx, DWORD PTR [ecx+132]
  00399	3b c1		 cmp	 eax, ecx
  0039b	0f 8d 98 02 00
	00		 jge	 $LN7@PutBmp
  003a1	03 c3		 add	 eax, ebx
  003a3	89 85 f8 fe ff
	ff		 mov	 DWORD PTR tv1224[ebp], eax
  003a9	85 c0		 test	 eax, eax
  003ab	0f 8e 88 02 00
	00		 jle	 $LN7@PutBmp
  003b1	0f bf c2	 movsx	 eax, dx
  003b4	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv1216[ebp], eax
  003ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  003bf	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [eax+136]
  003c5	39 85 04 ff ff
	ff		 cmp	 DWORD PTR tv1216[ebp], eax
  003cb	0f 8d 68 02 00
	00		 jge	 $LN7@PutBmp
  003d1	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv1216[ebp]
  003d7	03 d6		 add	 edx, esi
  003d9	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv1223[ebp], edx
  003df	85 d2		 test	 edx, edx
  003e1	0f 8e 52 02 00
	00		 jle	 $LN7@PutBmp

; 474  : 							if (bx < 0) {

  003e7	66 83 bd 0c ff
	ff ff 00	 cmp	 WORD PTR _x0$1$[ebp], 0
  003ef	7d 1e		 jge	 SHORT $LN46@PutBmp

; 475  : 								rect.left -= bx;

  003f1	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR tv1217[ebp]
  003f7	f7 da		 neg	 edx
  003f9	89 95 fc fe ff
	ff		 mov	 DWORD PTR _rect$1$[ebp], edx
  003ff	89 95 cc fe ff
	ff		 mov	 DWORD PTR _rect$2[ebp], edx

; 476  : 								x0 = 0;

  00405	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x0$1$[ebp], 0
$LN46@PutBmp:

; 477  : 							}
; 478  : 							if (bx + w > lpDraw->xSize)	rect.right -= bx + w - lpDraw->xSize;

  0040f	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _x0$1$[ebp]
  00415	0f b7 d2	 movzx	 edx, dx
  00418	89 95 0c ff ff
	ff		 mov	 DWORD PTR tv1179[ebp], edx
  0041e	39 8d f8 fe ff
	ff		 cmp	 DWORD PTR tv1224[ebp], ecx
  00424	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR _y0$1$[ebp]
  0042a	7e 10		 jle	 SHORT $LN47@PutBmp
  0042c	2b 8d f4 fe ff
	ff		 sub	 ecx, DWORD PTR tv1217[ebp]
  00432	2b cb		 sub	 ecx, ebx
  00434	03 d9		 add	 ebx, ecx
  00436	89 9d d4 fe ff
	ff		 mov	 DWORD PTR _rect$2[ebp+8], ebx
$LN47@PutBmp:

; 479  : 							if (by < 0) {

  0043c	66 85 d2	 test	 dx, dx
  0043f	79 16		 jns	 SHORT $LN48@PutBmp

; 480  : 								rect.top -= by;

  00441	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR tv1216[ebp]
  00447	f7 d9		 neg	 ecx
  00449	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _rect$2$[ebp], ecx
  0044f	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _rect$2[ebp+4], ecx

; 481  : 								y0 = 0;

  00455	33 d2		 xor	 edx, edx
$LN48@PutBmp:

; 482  : 							}
; 483  : 							if (by + h > lpDraw->ySize)	rect.bottom -= by + h - lpDraw->ySize;

  00457	0f b7 ca	 movzx	 ecx, dx
  0045a	89 8d f8 fe ff
	ff		 mov	 DWORD PTR tv1180[ebp], ecx
  00460	39 85 e0 fe ff
	ff		 cmp	 DWORD PTR tv1223[ebp], eax
  00466	7e 10		 jle	 SHORT $LN49@PutBmp
  00468	2b 85 04 ff ff
	ff		 sub	 eax, DWORD PTR tv1216[ebp]
  0046e	2b c6		 sub	 eax, esi
  00470	03 f0		 add	 esi, eax
  00472	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _rect$2[ebp+12], esi
$LN49@PutBmp:

; 484  : 							ZeroMemory(&ddsd, sizeof(DDSURFACEDESC));

  00478	6a 6c		 push	 108			; 0000006cH
  0047a	6a 00		 push	 0
  0047c	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _ddsd$7[ebp]
  00482	50		 push	 eax
  00483	e8 00 00 00 00	 call	 _memset

; 485  : 							ddsd.dwSize = sizeof(DDSURFACEDESC);

  00488	c7 85 14 ff ff
	ff 6c 00 00 00	 mov	 DWORD PTR _ddsd$7[ebp], 108 ; 0000006cH

; 486  : 							ZeroMemory(&ddsd2, sizeof(DDSURFACEDESC));

  00492	6a 6c		 push	 108			; 0000006cH
  00494	6a 00		 push	 0
  00496	8d 45 80	 lea	 eax, DWORD PTR _ddsd2$8[ebp]
  00499	50		 push	 eax
  0049a	e8 00 00 00 00	 call	 _memset
  0049f	83 c4 18	 add	 esp, 24			; 00000018H

; 487  : 							ddsd2.dwSize = sizeof(DDSURFACEDESC);

  004a2	c7 45 80 6c 00
	00 00		 mov	 DWORD PTR _ddsd2$8[ebp], 108 ; 0000006cH

; 488  : 							if (lpDraw->lpBACKBUFFER->Lock(NULL, &ddsd, DDLOCK_WAIT, NULL) != DD_OK)	continue;

  004a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  004ae	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  004b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004b3	6a 00		 push	 0
  004b5	6a 01		 push	 1
  004b7	8d 95 14 ff ff
	ff		 lea	 edx, DWORD PTR _ddsd$7[ebp]
  004bd	52		 push	 edx
  004be	6a 00		 push	 0
  004c0	50		 push	 eax
  004c1	ff 51 64	 call	 DWORD PTR [ecx+100]
  004c4	85 c0		 test	 eax, eax
  004c6	0f 85 6d 01 00
	00		 jne	 $LN7@PutBmp

; 489  : 							if (lpSurfaceInfo->lpSurface->Lock(NULL, &ddsd2, DDLOCK_WAIT, NULL) != DD_OK)	continue;

  004cc	8b 07		 mov	 eax, DWORD PTR [edi]
  004ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d0	6a 00		 push	 0
  004d2	6a 01		 push	 1
  004d4	8d 55 80	 lea	 edx, DWORD PTR _ddsd2$8[ebp]
  004d7	52		 push	 edx
  004d8	6a 00		 push	 0
  004da	50		 push	 eax
  004db	ff 51 64	 call	 DWORD PTR [ecx+100]
  004de	85 c0		 test	 eax, eax
  004e0	0f 85 53 01 00
	00		 jne	 $LN7@PutBmp

; 490  : 							unsigned char *Dst, *Src;
; 491  : 							Dst = (unsigned char *)ddsd.lpSurface;
; 492  : 							Dstpitch = ddsd.lPitch;
; 493  : 							Src = (unsigned char *)ddsd2.lpSurface;
; 494  : 							Srcpitch = ddsd2.lPitch;

  004e6	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv1180[ebp]
  004ec	0f b7 c8	 movzx	 ecx, ax
  004ef	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv1179[ebp]
  004f5	0f b7 d0	 movzx	 edx, ax

; 495  : 							if (displayBpp == 16) {

  004f8	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _rect$2$[ebp]
  004fe	2b f0		 sub	 esi, eax
  00500	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?displayBpp@@3HA, 16 ; displayBpp, 00000010H
  00507	75 2f		 jne	 SHORT $LN52@PutBmp

; 496  : 								ablend_565(lpSurfaceInfo->lpAlphaData, 64, Src, rect.left, rect.top, Srcpitch, Dst, x0, y0, rect.right - rect.left, rect.bottom - rect.top, Dstpitch);

  00509	ff b5 24 ff ff
	ff		 push	 DWORD PTR _ddsd$7[ebp+16]
  0050f	56		 push	 esi
  00510	8b b5 fc fe ff
	ff		 mov	 esi, DWORD PTR _rect$1$[ebp]
  00516	2b de		 sub	 ebx, esi
  00518	53		 push	 ebx
  00519	51		 push	 ecx
  0051a	52		 push	 edx
  0051b	ff b5 38 ff ff
	ff		 push	 DWORD PTR _ddsd$7[ebp+36]
  00521	ff 75 90	 push	 DWORD PTR _ddsd2$8[ebp+16]
  00524	50		 push	 eax
  00525	56		 push	 esi
  00526	ff 75 a4	 push	 DWORD PTR _ddsd2$8[ebp+36]
  00529	6a 40		 push	 64			; 00000040H
  0052b	ff 77 08	 push	 DWORD PTR [edi+8]
  0052e	e8 00 00 00 00	 call	 ?ablend_565@@YAXPAEI0III0IIIII@Z ; ablend_565
  00533	83 c4 30	 add	 esp, 48			; 00000030H

; 497  : 							}

  00536	eb 28		 jmp	 SHORT $LN53@PutBmp
$LN52@PutBmp:

; 498  : 							else {
; 499  : 								DrawAlpha32((unsigned long *)Dst, x0, y0, Dstpitch, (unsigned long *)Src, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, Srcpitch);

  00538	ff 75 90	 push	 DWORD PTR _ddsd2$8[ebp+16]
  0053b	56		 push	 esi
  0053c	8b b5 fc fe ff
	ff		 mov	 esi, DWORD PTR _rect$1$[ebp]
  00542	2b de		 sub	 ebx, esi
  00544	53		 push	 ebx
  00545	50		 push	 eax
  00546	56		 push	 esi
  00547	ff 75 a4	 push	 DWORD PTR _ddsd2$8[ebp+36]
  0054a	ff b5 24 ff ff
	ff		 push	 DWORD PTR _ddsd$7[ebp+16]
  00550	51		 push	 ecx
  00551	52		 push	 edx
  00552	ff b5 38 ff ff
	ff		 push	 DWORD PTR _ddsd$7[ebp+36]
  00558	e8 00 00 00 00	 call	 ?DrawAlpha32@@YAXPAKKKK0KKKKK@Z ; DrawAlpha32
  0055d	83 c4 28	 add	 esp, 40			; 00000028H
$LN53@PutBmp:

; 500  : 							}
; 501  : 							if (lpSurfaceInfo->lpSurface->Unlock(NULL) != DD_OK)	continue;

  00560	8b 07		 mov	 eax, DWORD PTR [edi]
  00562	8b 08		 mov	 ecx, DWORD PTR [eax]
  00564	6a 00		 push	 0
  00566	50		 push	 eax
  00567	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]
  0056d	85 c0		 test	 eax, eax
  0056f	0f 85 c4 00 00
	00		 jne	 $LN7@PutBmp

; 502  : 							if (lpDraw->lpBACKBUFFER->Unlock(NULL) != DD_OK)	continue;

  00575	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0057a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0057d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0057f	6a 00		 push	 0
  00581	50		 push	 eax
  00582	ff 91 80 00 00
	00		 call	 DWORD PTR [ecx+128]
  00588	85 c0		 test	 eax, eax
  0058a	74 4e		 je	 SHORT $LN56@PutBmp

; 435  : 			{
; 436  : 				for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo; lpSurfaceInfo != NULL; lpSurfaceInfo = lpSurfaceInfo->pNext) {

  0058c	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
  0058f	8b 9d f0 fe ff
	ff		 mov	 ebx, DWORD PTR _pDispInfo$1$[ebp]
  00595	8b b5 ec fe ff
	ff		 mov	 esi, DWORD PTR _bmpNo$1$[ebp]
  0059b	e9 c2 fc ff ff	 jmp	 $LL9@PutBmp
$LN42@PutBmp:

; 503  : 						}
; 504  : 						else
; 505  : #endif
; 506  : 						{
; 507  : 							if (DrawSurfaceFast(pDispInfo->x + lpSurfaceInfo->offsetX,
; 508  : 								pDispInfo->y + lpSurfaceInfo->offsetY,
; 509  : 								lpSurfaceInfo->lpSurface) == DDERR_SURFACEBUSY) SurfaceBusyFlag = TRUE;

  005a0	ff 37		 push	 DWORD PTR [edi]
  005a2	0f b7 43 04	 movzx	 eax, WORD PTR [ebx+4]
  005a6	66 03 47 16	 add	 ax, WORD PTR [edi+22]
  005aa	0f b7 c0	 movzx	 eax, ax
  005ad	50		 push	 eax
  005ae	0f b7 47 14	 movzx	 eax, WORD PTR [edi+20]
  005b2	66 03 03	 add	 ax, WORD PTR [ebx]
  005b5	0f b7 c0	 movzx	 eax, ax
  005b8	50		 push	 eax
  005b9	e8 00 00 00 00	 call	 ?DrawSurfaceFast@@YAJFFPAUIDirectDrawSurface@@@Z ; DrawSurfaceFast
  005be	83 c4 0c	 add	 esp, 12			; 0000000cH
  005c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SurfaceBusyFlag@@3HA ; SurfaceBusyFlag
  005c7	3d ae 01 76 88	 cmp	 eax, -2005532242	; 887601aeH
  005cc	b8 01 00 00 00	 mov	 eax, 1
  005d1	0f 44 c8	 cmove	 ecx, eax
  005d4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, ecx ; SurfaceBusyFlag
$LN56@PutBmp:

; 510  : 						}
; 511  : 						lpSurfaceInfo->date = SurfaceDate;

  005da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SurfaceDate@@3IA ; SurfaceDate
  005df	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 435  : 			{
; 436  : 				for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo; lpSurfaceInfo != NULL; lpSurfaceInfo = lpSurfaceInfo->pNext) {

  005e2	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
  005e5	8b 9d f0 fe ff
	ff		 mov	 ebx, DWORD PTR _pDispInfo$1$[ebp]
  005eb	8b b5 ec fe ff
	ff		 mov	 esi, DWORD PTR _bmpNo$1$[ebp]
  005f1	e9 6c fc ff ff	 jmp	 $LL9@PutBmp
$LN39@PutBmp:

; 446  : 						DrawGray(lpSurfaceInfo->lpSurface,

  005f6	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  005f9	0f bf 57 16	 movsx	 edx, WORD PTR [edi+22]
  005fd	0f bf 77 14	 movsx	 esi, WORD PTR [edi+20]
  00601	0f be c0	 movsx	 eax, al
  00604	50		 push	 eax
  00605	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  00609	0f 94 c0	 sete	 al
  0060c	0f b6 c0	 movzx	 eax, al
  0060f	50		 push	 eax
  00610	0f bf 04 8d 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  00618	50		 push	 eax
  00619	0f bf 04 8d 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+4]
  00621	50		 push	 eax
  00622	52		 push	 edx
  00623	56		 push	 esi
  00624	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00627	03 c2		 add	 eax, edx
  00629	50		 push	 eax
  0062a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0062c	03 c6		 add	 eax, esi
$LN76@PutBmp:
  0062e	50		 push	 eax
  0062f	ff 37		 push	 DWORD PTR [edi]
  00631	e8 00 00 00 00	 call	 ?DrawGray@@YAXPAUIDirectDrawSurface@@HHHHHH_NH@Z ; DrawGray
  00636	83 c4 24	 add	 esp, 36			; 00000024H
$LN7@PutBmp:

; 435  : 			{
; 436  : 				for (lpSurfaceInfo = SpriteInfo[bmpNo].lpSurfaceInfo; lpSurfaceInfo != NULL; lpSurfaceInfo = lpSurfaceInfo->pNext) {

  00639	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
  0063c	8b 9d f0 fe ff
	ff		 mov	 ebx, DWORD PTR _pDispInfo$1$[ebp]
  00642	8b b5 ec fe ff
	ff		 mov	 esi, DWORD PTR _bmpNo$1$[ebp]
  00648	e9 15 fc ff ff	 jmp	 $LL9@PutBmp
$LN8@PutBmp:
  0064d	8b bd e4 fe ff
	ff		 mov	 edi, DWORD PTR _pDispSort$1$[ebp]
$LN4@PutBmp:

; 302  : 		unsigned char drawFastTileFlag = 0;
; 303  : 		unsigned char drawFastTileFlag2 = 0;
; 304  : #ifndef __CARYTEST
; 305  : 		SURFACE_INFO *lpSurfaceInfo;
; 306  : #ifdef _READ16BITBMP
; 307  : 		SURFACE_INFO *lpSurfaceInfoSys;
; 308  : #endif
; 309  : #else
; 310  : 		DDSURFACEDESC ddsd;	// ??????î¨î
; 311  : 		LPWORD surface;
; 312  : 		int pitch;
; 313  : 		BOOL locked = FALSE;
; 314  : 		int x, y;
; 315  : 		short width, height;
; 316  : 		ZeroMemory(&ddsd, sizeof(DDSURFACEDESC));
; 317  : 		ddsd.dwSize = sizeof(DDSURFACEDESC);
; 318  : 		if (lpDraw->lpBACKBUFFER->Lock(NULL, &ddsd, DDLOCK_WAIT, NULL) == DD_OK) {
; 319  : 			surface = (LPWORD)ddsd.lpSurface;
; 320  : 			pitch = ddsd.lPitch;
; 321  : 			locked = TRUE;
; 322  : 		}
; 323  : #endif
; 324  : 		// ???????????
; 325  : 		for (i = 0; i < DispBuffer.DispCnt; i++, pDispSort++) {

  00653	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _i$4[ebp]
  00659	42		 inc	 edx
  0065a	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _i$4[ebp], edx
  00660	83 c7 04	 add	 edi, 4
  00663	89 bd dc fe ff
	ff		 mov	 DWORD PTR _pDispSort$3[ebp], edi
  00669	8a 8d 13 ff ff
	ff		 mov	 cl, BYTE PTR _putTextFlag$6[ebp]
  0066f	e9 bd fa ff ff	 jmp	 $LN77@PutBmp
$LN5@PutBmp:

; 512  : 					}
; 513  : 				}
; 514  : 			}
; 515  : 		}
; 516  : 		/*
; 517  : 		#ifdef _LOST_FOREST_FOG
; 518  : 		if(nowFloor==7450||nowFloor==7451
; 519  : 		#ifdef _NEW_CLOUD
; 520  : 		//|| nowFloor==61000 || nowFloor==61100
; 521  : 		#endif
; 522  : 		){
; 523  : 		extern DWORD sky_island_no;
; 524  : 		if( sky_island_no){
; 525  : 		#ifdef _NEW_CLOUD
; 526  : 		extern void SkyIslandDraw(int floor);
; 527  : 		SkyIslandDraw(nowFloor);
; 528  : 		#else
; 529  : 		extern void SkyIslandDraw();
; 530  : 		SkyIslandDraw();
; 531  : 		#endif
; 532  : 		}
; 533  : 		}
; 534  : 		#endif
; 535  : 		*/
; 536  : 
; 537  : #ifdef __SKYISLAND		
; 538  : #ifdef _NEW_CLOUD
; 539  : 		extern void SkyIslandDraw2(int fl);
; 540  : 		SkyIslandDraw2(nowFloor);

  00674	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowFloor@@3HA ; nowFloor
  0067a	e8 00 00 00 00	 call	 ?SkyIslandDraw2@@YAXH@Z	; SkyIslandDraw2
  0067f	83 c4 04	 add	 esp, 4

; 541  : #else
; 542  : 		extern void SkyIslandDraw2();
; 543  : 		SkyIslandDraw2();
; 544  : #endif
; 545  : #endif
; 546  : 		if (putTextFlag == 0) {

  00682	8a 85 13 ff ff
	ff		 mov	 al, BYTE PTR _putTextFlag$6[ebp]
  00688	84 c0		 test	 al, al
  0068a	75 1a		 jne	 SHORT $LN57@PutBmp

; 547  : 			// ?????????????????
; 548  : 			PutText(FONT_PRIO_BACK);

  0068c	6a 00		 push	 0
  0068e	e8 00 00 00 00	 call	 ?PutText@@YAXD@Z	; PutText

; 549  : 			// ?????
; 550  : #ifdef _CHANNEL_MODIFY
; 551  : 			PutText(FONT_PRIO_CHATBUFFER);

  00693	6a 03		 push	 3
  00695	e8 00 00 00 00	 call	 ?PutText@@YAXD@Z	; PutText
  0069a	83 c4 08	 add	 esp, 8

; 552  : #endif
; 553  : 			putTextFlag = 1;

  0069d	c6 85 13 ff ff
	ff 01		 mov	 BYTE PTR _putTextFlag$6[ebp], 1

; 554  : 		}
; 555  : 		// ?????î¸î( FRONT )
; 556  : 		if (putTextFlag == 1) {

  006a4	eb 04		 jmp	 SHORT $LN73@PutBmp
$LN57@PutBmp:
  006a6	3c 01		 cmp	 al, 1
  006a8	75 0a		 jne	 SHORT $LN58@PutBmp
$LN73@PutBmp:

; 557  : 			PutText(FONT_PRIO_FRONT);

  006aa	6a 01		 push	 1
  006ac	e8 00 00 00 00	 call	 ?PutText@@YAXD@Z	; PutText
  006b1	83 c4 04	 add	 esp, 4
$LN58@PutBmp:

; 558  : 		}
; 559  : 		// ?????????
; 560  : 		if (drawMapEffectFlag == 0) drawMapEffect();

  006b4	80 bd 12 ff ff
	ff 00		 cmp	 BYTE PTR _drawMapEffectFlag$5[ebp], 0
  006bb	75 05		 jne	 SHORT $LN59@PutBmp
  006bd	e8 00 00 00 00	 call	 ?drawMapEffect@@YAXXZ	; drawMapEffect
$LN59@PutBmp:

; 561  : 
; 562  : 		memset(&DispBuffer, 0, sizeof(DispBuffer));

  006c2	68 04 c0 01 00	 push	 114692			; 0001c004H
  006c7	6a 00		 push	 0
  006c9	68 00 00 00 00	 push	 OFFSET ?DispBuffer@@3UDISP_BUFFER@@A ; DispBuffer
  006ce	e8 00 00 00 00	 call	 _memset
  006d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN64@PutBmp:

; 568  : 
; 569  : 
; 570  : 
; 571  : }

  006d6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN63@PutBmp:
  006dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  006e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006e7	59		 pop	 ecx
  006e8	5f		 pop	 edi
  006e9	5e		 pop	 esi
  006ea	5b		 pop	 ebx
  006eb	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006ee	33 cd		 xor	 ecx, ebp
  006f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006f5	8b e5		 mov	 esp, ebp
  006f7	5d		 pop	 ebp
  006f8	c3		 ret	 0
__catch$?PutBmp@@YAXXZ$0:

; 563  : 	}
; 564  : 	catch (...)
; 565  : 	{
; 566  : 
; 567  : 	}

  006f9	b8 00 00 00 00	 mov	 eax, $LN64@PutBmp
  006fe	c3		 ret	 0
  006ff	cc		 int	 3
  00700	cc		 int	 3
  00701	cc		 int	 3
  00702	cc		 int	 3
  00703	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?PutBmp@@YAXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PutBmp@@YAXXZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PutBmp@@YAXXZ ENDP					; PutBmp
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\Sprdisp.cpp
;	COMDAT ?SortDispBuffer@@YAXXZ
_TEXT	SEGMENT
?SortDispBuffer@@YAXXZ PROC				; SortDispBuffer, COMDAT

; 80   : 	//???????
; 81   : 	qsort(DispBuffer.DispSort,	// ?î¨î?????

  00000	0f bf 05 00 c0
	01 00		 movsx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00007	68 00 00 00 00	 push	 OFFSET ?SortComp@@YAHPAUDISP_SORT@@0@Z ; SortComp
  0000c	6a 04		 push	 4
  0000e	50		 push	 eax
  0000f	68 00 80 01 00	 push	 OFFSET ?DispBuffer@@3UDISP_BUFFER@@A+98304
  00014	e8 00 00 00 00	 call	 _qsort
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 82   : 		DispBuffer.DispCnt,		// î?????
; 83   : 		sizeof(DISP_SORT), 	// ?î¨î????
; 84   : 		(CMPFUNC *)SortComp 	// î?????????
; 85   : 	);
; 86   : }

  0001c	c3		 ret	 0
?SortDispBuffer@@YAXXZ ENDP				; SortDispBuffer
_TEXT	ENDS
END
