; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_send_data@@3PADA				; g_send_data
PUBLIC	?g_playerAddr@@3HA				; g_playerAddr
PUBLIC	?g_pMappingRecv@@3PAHA				; g_pMappingRecv
PUBLIC	?g_mappingIndex@@3HA				; g_mappingIndex
PUBLIC	?g_WgThreadID@@3HA				; g_WgThreadID
PUBLIC	?g_WgRecvHwnd@@3HA				; g_WgRecvHwnd
PUBLIC	?g_len_decode@@3HA				; g_len_decode
PUBLIC	?g_len_encode@@3HA				; g_len_encode
PUBLIC	?g_flag_FastFight@@3HA				; g_flag_FastFight
PUBLIC	?g_flag_??ñìÔô@@3HA				; g_flag_??ñìÔô
PUBLIC	?g_flag_í»?Ôô?@@3HA				; g_flag_í»?Ôô?
PUBLIC	?g_sel_ñ«Ïõ@@3HA				; g_sel_ñ«Ïõ
PUBLIC	?g_sel_ÜùÏõ@@3HA				; g_sel_ÜùÏõ
PUBLIC	?g_sel_ìÑÚª@@3HA				; g_sel_ìÑÚª
PUBLIC	?g_bFastFight@@3HA				; g_bFastFight
PUBLIC	?g_hideSA@@3HA					; g_hideSA
PUBLIC	?g_?øÌ?ëå@@3HA					; g_?øÌ?ëå
PUBLIC	?g_showBmpNo@@3HA				; g_showBmpNo
PUBLIC	?g_CPU?ûù@@3HA					; g_CPU?ûù
PUBLIC	?g_Ü×?Ðï@@3HA					; g_Ü×?Ðï
PUBLIC	?DEF_APPSIZEX@@3HA				; DEF_APPSIZEX
PUBLIC	?DEF_APPSIZEY@@3HA				; DEF_APPSIZEY
PUBLIC	?BRAN_SIZE_X@@3HA				; BRAN_SIZE_X
PUBLIC	?BRAN_SIZE_Y@@3HA				; BRAN_SIZE_Y
PUBLIC	?ResoMode@@3HA					; ResoMode
PUBLIC	?g???êÈ@@3HA					; g???êÈ
PUBLIC	?i@@3HA						; i
PUBLIC	?DISPLACEMENT_X@@3HA				; DISPLACEMENT_X
PUBLIC	?DISPLACEMENT_Y@@3HA				; DISPLACEMENT_Y
_BSS	SEGMENT
?g_send_data@@3PADA DB 02710H DUP (?)			; g_send_data
?g_playerAddr@@3HA DD 01H DUP (?)			; g_playerAddr
?g_pMappingRecv@@3PAHA DD 01H DUP (?)			; g_pMappingRecv
?g_mappingIndex@@3HA DD 01H DUP (?)			; g_mappingIndex
?g_WgThreadID@@3HA DD 01H DUP (?)			; g_WgThreadID
?g_WgRecvHwnd@@3HA DD 01H DUP (?)			; g_WgRecvHwnd
?g_flag_FastFight@@3HA DD 01H DUP (?)			; g_flag_FastFight
?g_flag_??ñìÔô@@3HA DD 01H DUP (?)			; g_flag_??ñìÔô
?g_flag_í»?Ôô?@@3HA DD 01H DUP (?)			; g_flag_í»?Ôô?
?g_sel_ñ«Ïõ@@3HA DD 01H DUP (?)				; g_sel_ñ«Ïõ
?g_sel_ÜùÏõ@@3HA DD 01H DUP (?)				; g_sel_ÜùÏõ
?g_sel_ìÑÚª@@3HA DD 01H DUP (?)				; g_sel_ìÑÚª
?g_bFastFight@@3HA DD 01H DUP (?)			; g_bFastFight
?g_hideSA@@3HA DD 01H DUP (?)				; g_hideSA
?g_?øÌ?ëå@@3HA DD 01H DUP (?)				; g_?øÌ?ëå
?g_showBmpNo@@3HA DD 01H DUP (?)			; g_showBmpNo
?g_CPU?ûù@@3HA DD 01H DUP (?)				; g_CPU?ûù
?g_Ü×?Ðï@@3HA DD 01H DUP (?)				; g_Ü×?Ðï
?g???êÈ@@3HA DD	01H DUP (?)				; g???êÈ
?i@@3HA	DD	01H DUP (?)				; i
_BSS	ENDS
_DATA	SEGMENT
?g_len_decode@@3HA DD 08H				; g_len_decode
?g_len_encode@@3HA DD 08H				; g_len_encode
?DEF_APPSIZEX@@3HA DD 0320H				; DEF_APPSIZEX
?DEF_APPSIZEY@@3HA DD 0258H				; DEF_APPSIZEY
?BRAN_SIZE_X@@3HA DD 014H				; BRAN_SIZE_X
?BRAN_SIZE_Y@@3HA DD 0fH				; BRAN_SIZE_Y
?ResoMode@@3HA DD 03H					; ResoMode
?DISPLACEMENT_X@@3HA DD 0a0H				; DISPLACEMENT_X
?DISPLACEMENT_Y@@3HA DD 078H				; DISPLACEMENT_Y
_DATA	ENDS
PUBLIC	?DecryptBuffer@@YAXPADHPAII@Z			; DecryptBuffer
PUBLIC	?EncryptBuffer@@YAHPADHPAII@Z			; EncryptBuffer
PUBLIC	?JL_SHOP@@YAXH@Z				; JL_SHOP
PUBLIC	?JL_?Óðèâ??Ôô?øÐ@@YAXXZ				; JL_?Óðèâ??Ôô?øÐ
PUBLIC	?JL_SendAddrToWg@@YAXXZ				; JL_SendAddrToWg
PUBLIC	?JL_GetAddress@@YAHH@Z				; JL_GetAddress
PUBLIC	?JL_SetAddr@@YAXHH@Z				; JL_SetAddr
PUBLIC	?JL_savefunc@@YAXH@Z				; JL_savefunc
PUBLIC	?JL_resetRecv@@YAXXZ				; JL_resetRecv
PUBLIC	?JL_combineInt_RECV@@YAXHH@Z			; JL_combineInt_RECV
PUBLIC	?JL_combineString_RECV@@YAXPADH@Z		; JL_combineString_RECV
PUBLIC	?JL_combineInt_SEND@@YAXH@Z			; JL_combineInt_SEND
PUBLIC	?JL_combineString_SEND@@YAXPADH@Z		; JL_combineString_SEND
PUBLIC	?JL_combinePacket_SEND@@YAXHH@Z			; JL_combinePacket_SEND
PUBLIC	?JL_í»??Ôà@@YAXXZ				; JL_í»??Ôà
PUBLIC	?dw2hex@@YAXHPAD@Z				; dw2hex
PUBLIC	?PostThreadMsg@@YAXHH@Z				; PostThreadMsg
PUBLIC	?JL_SetFastFightFlag@@YAX_N@Z			; JL_SetFastFightFlag
PUBLIC	?JL_í»?Ôô???Ü×?Ðï@@YAHXZ			; JL_í»?Ôô???Ü×?Ðï
PUBLIC	?JL_í»?Ôô???ÜùÏõ@@YAHXZ				; JL_í»?Ôô???ÜùÏõ
PUBLIC	?JL_í»?Ôô???ìÑÚª@@YAHXZ				; JL_í»?Ôô???ìÑÚª
PUBLIC	?JL_í»?Ôô???ÚË?ïÃOK@@YAHXZ			; JL_í»?Ôô???ÚË?ïÃOK
PUBLIC	?JL_?ïÒìÑÚª@@YAX_N@Z				; JL_?ïÒìÑÚª
PUBLIC	?JL_??÷åüù_üÞ??ïÃ@@YAXXZ			; JL_??÷åüù_üÞ??ïÃ
PUBLIC	?JL_LuaLoadMem@@YAHPAD@Z			; JL_LuaLoadMem
PUBLIC	?GBK2GB@@YIXPAD@Z				; GBK2GB
PUBLIC	?GB2GBK@@YIXPAD@Z				; GB2GBK
PUBLIC	?GBK2BIG5@@YIXPAD@Z				; GBK2BIG5
PUBLIC	?BIG52GBK@@YIXPAD@Z				; BIG52GBK
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?MyExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; MyExceptionFilter
PUBLIC	?JL_?øÌ?ëå@@YA_NXZ				; JL_?øÌ?ëå
PUBLIC	?XSleepThread@@YGKPAX@Z				; XSleepThread
PUBLIC	?XSleep@@YAXH@Z					; XSleep
PUBLIC	?JL_??í»?ïÃOK@@YAHXZ				; JL_??í»?ïÃOK
PUBLIC	?JL_??ò¢?÷åüù@@YAXXZ				; JL_??ò¢?÷åüù
PUBLIC	?JL_Get_UsernameAndPassword@@YAXPAD0@Z		; JL_Get_UsernameAndPassword
PUBLIC	?JL_RESOMODE@@YAXH@Z				; JL_RESOMODE
PUBLIC	?JL_ShowTitle@@YAXPADHHHHH@Z			; JL_ShowTitle
PUBLIC	??$sprintf_s@$0MI@@@YAHAAY0MI@DPBDZZ		; sprintf_s<200>
PUBLIC	???@@YAXXZ					; ??
PUBLIC	?JL_??Öõ@@YAXXZ					; JL_??Öõ
PUBLIC	?JL_ê«ÔôÖõ@@YAXXZ				; JL_ê«ÔôÖõ
PUBLIC	?JL_?ð¶ñ²?ìÑÚª@@YAXXZ				; JL_?ð¶ñ²?ìÑÚª
PUBLIC	?NB???ëå@@YAXH@Z				; NB???ëå
PUBLIC	?JL???ëå@@YAXH@Z				; JL???ëå
PUBLIC	?JL_???êÈ@@YAXPAUaction@@@Z			; JL_???êÈ
PUBLIC	?Test@@YAXXZ					; Test
PUBLIC	?EncryptTEA@@YAXPAI00I@Z			; EncryptTEA
PUBLIC	?DecryptTEA@@YAXPAI00I@Z			; DecryptTEA
PUBLIC	?JL_FONT@@YAPAUHFONT__@@XZ			; JL_FONT
PUBLIC	??Ø­Ùþí®ïÃ?@@YAXXZ				; ?Ø­Ùþí®ïÃ?
PUBLIC	???ÝÂú¼@@YAPADPADHH@Z				; ??ÝÂú¼
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_1FO@NHKBMFH@?$AA?$AL?$PP?$IP?$AA?$AC?$AA8?$AA?$AA?$PP?z?$AA?$AM?$PP?w?$AAT?$PP?$PL?$AA?2?$AA?$AF?$AA?6?$AA?6?$AA?3@ ; `string'
PUBLIC	??_C@_06NJDOOGHM@sa?4dmp@			; `string'
PUBLIC	?pPrevFilter@@3P6GJPAU_EXCEPTION_POINTERS@@@ZA	; pPrevFilter
PUBLIC	?SCREEN_WIDTH_CENTER@@3HA			; SCREEN_WIDTH_CENTER
PUBLIC	?SCREEN_HEIGHT_CENTER@@3HA			; SCREEN_HEIGHT_CENTER
PUBLIC	?viewOffsetX@@3HA				; viewOffsetX
PUBLIC	?viewOffsetY@@3HA				; viewOffsetY
PUBLIC	??_C@_0CK@BNLLFNFE@StoneAge?$FL?$CFs?$FN?5?9?5?$CFs?5Lv?3?$CFd?5HP?3?$CFd?1?$CF@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0FJ@NGKOEDFH@C?3?2Users?2gg862?2OneDrive?2?$LJ?Y?E?A?5?H?$KN@ ; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_04GHJNJNPO@main@				; `string'
PUBLIC	??_C@_06MFMMLLPC@?$LB?$LM?$LI?$LC?C?$LM@	; `string'
PUBLIC	??_C@_01HCONENDN@?$HL@				; `string'
PUBLIC	??_C@_01CELHOKLL@?$HN@				; `string'
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	??2@YAPAXIHPBDH@Z:PROC				; operator new
EXTRN	??_U@YAPAXIHPBDH@Z:PROC				; operator new[]
EXTRN	_strncpy:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__MulDiv@12:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__CreateFontIndirectA@4:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__PostThreadMessageA@16:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__LCMapStringA@24:PROC
EXTRN	?util_mkint@@YAHPADH@Z:PROC			; util_mkint
EXTRN	?sunday@@YAPADPAD0@Z:PROC			; sunday
EXTRN	?DeathAction@@YAXPAUaction@@@Z:PROC		; DeathAction
EXTRN	?setPcDir@@YAXH@Z:PROC				; setPcDir
EXTRN	?clearPtActPartyParam@@YAXXZ:PROC		; clearPtActPartyParam
EXTRN	?StockChatBufferLineExt@@YAXPADEHH@Z:PROC	; StockChatBufferLineExt
EXTRN	?lssproto_SaMenu_send@@YAXHHHH@Z:PROC		; lssproto_SaMenu_send
EXTRN	?lssproto_EN_recv@@YAXHHH@Z:PROC		; lssproto_EN_recv
EXTRN	?lssproto_B_recv@@YAXHPAD@Z:PROC		; lssproto_B_recv
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	_MiniDumpWriteDump@28:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_getfield:PROC
EXTRN	_lua_pcall:PROC
EXTRN	_lua_gc:PROC
EXTRN	_luaL_loadstring:PROC
EXTRN	_luaL_newstate:PROC
EXTRN	_luaL_openlibs:PROC
EXTRN	?docall@@YAHPAUlua_State@@HH@Z:PROC		; docall
EXTRN	?luaAB_openlibs@@YAXPAUlua_State@@@Z:PROC	; luaAB_openlibs
EXTRN	?setWarpMap@@YAXHH@Z:PROC			; setWarpMap
EXTRN	??ìýserverMax@@YAXPADH@Z:PROC			; ?ìýserverMax
EXTRN	?SetResoMode@@YAXH@Z:PROC			; SetResoMode
EXTRN	?ChangeWindowMode@@YAXXZ:PROC			; ChangeWindowMode
EXTRN	?RecoverDirectDraw@@YAXXZ:PROC			; RecoverDirectDraw
EXTRN	?GB2312ToBIG5@@YAPADPBD@Z:PROC			; GB2312ToBIG5
EXTRN	?resetCharObj@@YAXXZ:PROC			; resetCharObj
EXTRN	?resetMap@@YAXXZ:PROC				; resetMap
EXTRN	?t_music_end@@YAXXZ:PROC			; t_music_end
EXTRN	?readMap@@YAHHHHHHPAG00@Z:PROC			; readMap
EXTRN	?readHitMap@@YAXHHHHPAG000@Z:PROC		; readHitMap
EXTRN	?openServerWindow@@YAXHHHHPAD@Z:PROC		; openServerWindow
EXTRN	?getStrStr@@YAXPAD0@Z:PROC			; getStrStr
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__except_handler4:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?chartable@@3PAUCHARLISTTABLE@@A:BYTE		; chartable
EXTRN	?mouse@@3UMOUSE@@A:BYTE				; mouse
EXTRN	?HitFontNo@@3HA:DWORD				; HitFontNo
EXTRN	?ChatBuffer@@3PAU_CHAT_BUFFER@@A:BYTE		; ChatBuffer
EXTRN	?MyChatBuffer@@3USTR_BUFFER@@A:BYTE		; MyChatBuffer
EXTRN	?NowChatLine@@3HA:DWORD				; NowChatLine
EXTRN	?NowMaxChatLine@@3HA:DWORD			; NowMaxChatLine
EXTRN	?sockfd@@3IA:DWORD				; sockfd
EXTRN	?gmsv@@3PAUgameserver@@A:BYTE			; gmsv
EXTRN	?nowGx@@3HA:DWORD				; nowGx
EXTRN	?nowGy@@3HA:DWORD				; nowGy
EXTRN	?fastWalkFlag@@3HA:DWORD			; fastWalkFlag
EXTRN	?NO_DRAW_MAX_CNT@@3HA:DWORD			; NO_DRAW_MAX_CNT
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?SubProcNo@@3IA:DWORD				; SubProcNo
EXTRN	?idKey@@3USTR_BUFFER@@A:BYTE			; idKey
EXTRN	?passwd@@3USTR_BUFFER@@A:BYTE			; passwd
EXTRN	??ëå??@@3HA:DWORD				; ?ëå??
EXTRN	?mapEmptyFlag@@3HA:DWORD			; mapEmptyFlag
EXTRN	?selectServerIndex@@3FA:WORD			; selectServerIndex
EXTRN	?hWnd@@3PAUHWND__@@A:DWORD			; hWnd
EXTRN	?Ûå???@@3HA:DWORD				; Ûå???
EXTRN	???@@3HA:DWORD					; ??
EXTRN	?wnCloseFlag@@3FA:WORD				; wnCloseFlag
EXTRN	?dsound_flg@@3HA:DWORD				; dsound_flg
EXTRN	?windowTypeWN@@3HA:DWORD			; windowTypeWN
EXTRN	?LUA_WINDOW_OPEN@@3_NA:BYTE			; LUA_WINDOW_OPEN
EXTRN	?SystemTime@@3KA:DWORD				; SystemTime
EXTRN	?pActMenuWnd@@3PAUaction@@A:DWORD		; pActMenuWnd
EXTRN	?MYLua@@3UtagMYLua@@A:BYTE			; MYLua
EXTRN	?hWnd@@3PAUHWND__@@A:DWORD			; hWnd
EXTRN	?ChatLineSmoothY@@3HA:DWORD			; ChatLineSmoothY
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?pPrevFilter@@3P6GJPAU_EXCEPTION_POINTERS@@@ZA DD 01H DUP (?) ; pPrevFilter
_BSS	ENDS
;	COMDAT ?time1@?1??JL_í»?Ôô???ÚË?ïÃOK@@YAHXZ@4IA
_BSS	SEGMENT
?time1@?1??JL_í»?Ôô???ÚË?ïÃOK@@YAHXZ@4IA DD 01H DUP (?)	; `JL_í»?Ôô???ÚË?ïÃOK'::`2'::time1
_BSS	ENDS
;	COMDAT ?time1@?1??JL_í»?Ôô???Ü×?Ðï@@YAHXZ@4IA
_BSS	SEGMENT
?time1@?1??JL_í»?Ôô???Ü×?Ðï@@YAHXZ@4IA DD 01H DUP (?)	; `JL_í»?Ôô???Ü×?Ðï'::`2'::time1
_BSS	ENDS
;	COMDAT ?time1@?1??JL_í»?Ôô???ÜùÏõ@@YAHXZ@4IA
_BSS	SEGMENT
?time1@?1??JL_í»?Ôô???ÜùÏõ@@YAHXZ@4IA DD 01H DUP (?)	; `JL_í»?Ôô???ÜùÏõ'::`2'::time1
_BSS	ENDS
;	COMDAT ?time1@?1??JL_í»?Ôô???ìÑÚª@@YAHXZ@4IA
_BSS	SEGMENT
?time1@?1??JL_í»?Ôô???ìÑÚª@@YAHXZ@4IA DD 01H DUP (?)	; `JL_í»?Ôô???ìÑÚª'::`2'::time1
_BSS	ENDS
_BSS	SEGMENT
?SCREEN_WIDTH_CENTER@@3HA DD 01H DUP (?)		; SCREEN_WIDTH_CENTER
?SCREEN_HEIGHT_CENTER@@3HA DD 01H DUP (?)		; SCREEN_HEIGHT_CENTER
?viewOffsetX@@3HA DD 01H DUP (?)			; viewOffsetX
?viewOffsetY@@3HA DD 01H DUP (?)			; viewOffsetY
_BSS	ENDS
;	COMDAT ?times@?1??JL_???êÈ@@YAXPAUaction@@@Z@4HA
_BSS	SEGMENT
?times@?1??JL_???êÈ@@YAXPAUaction@@@Z@4HA DD 01H DUP (?) ; `JL_???êÈ'::`2'::times
_BSS	ENDS
CRT$XCU	SEGMENT
?pPrevFilter$initializer$@@3P6AXXZA DD FLAT:??__EpPrevFilter@@YAXXZ ; pPrevFilter$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_01CELHOKLL@?$HN@
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN@ DB '}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MFMMLLPC@?$LB?$LM?$LI?$LC?C?$LM@
CONST	SEGMENT
??_C@_06MFMMLLPC@?$LB?$LM?$LI?$LC?C?$LM@ DB 0b1H, 0bcH, 0b8H, 0b2H, 0c3H, 0bcH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main@
CONST	SEGMENT
??_C@_04GHJNJNPO@main@ DB 'main', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@NGKOEDFH@C?3?2Users?2gg862?2OneDrive?2?$LJ?Y?E?A?5?H?$KN@
CONST	SEGMENT
??_C@_0FJ@NGKOEDFH@C?3?2Users?2gg862?2OneDrive?2?$LJ?Y?E?A?5?H?$KN@ DB 'C'
	DB	':\Users\gg862\OneDrive\', 0b9H, 0d9H, 0c5H, 0c1H, ' ', 0c8H, 0adH
	DB	0b8H, 0e9H, '\', 0b8H, 0beH, 0c4H, 0edH, 0bfH, 0cfH, 0b7H, 0e1H
	DB	'\Client Source Code1.31', 0c0H, 0cfH, 0baH, 0bbH, '\system\JL'
	DB	'_func.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BNLLFNFE@StoneAge?$FL?$CFs?$FN?5?9?5?$CFs?5Lv?3?$CFd?5HP?3?$CFd?1?$CF@
CONST	SEGMENT
??_C@_0CK@BNLLFNFE@StoneAge?$FL?$CFs?$FN?5?9?5?$CFs?5Lv?3?$CFd?5HP?3?$CFd?1?$CF@ DB 'S'
	DB	'toneAge[%s] - %s Lv:%d HP:%d/%d MP:%d/%d', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
?hex_table@@3PADA DB 030H				; hex_table
	DB	030H
	DB	030H
	DB	031H
	DB	030H
	DB	032H
	DB	030H
	DB	033H
	DB	030H
	DB	034H
	DB	030H
	DB	035H
	DB	030H
	DB	036H
	DB	030H
	DB	037H
	DB	030H
	DB	038H
	DB	030H
	DB	039H
	DB	030H
	DB	041H
	DB	030H
	DB	042H
	DB	030H
	DB	043H
	DB	030H
	DB	044H
	DB	030H
	DB	045H
	DB	030H
	DB	046H
	DB	031H
	DB	030H
	DB	031H
	DB	031H
	DB	031H
	DB	032H
	DB	031H
	DB	033H
	DB	031H
	DB	034H
	DB	031H
	DB	035H
	DB	031H
	DB	036H
	DB	031H
	DB	037H
	DB	031H
	DB	038H
	DB	031H
	DB	039H
	DB	031H
	DB	041H
	DB	031H
	DB	042H
	DB	031H
	DB	043H
	DB	031H
	DB	044H
	DB	031H
	DB	045H
	DB	031H
	DB	046H
	DB	032H
	DB	030H
	DB	032H
	DB	031H
	DB	032H
	DB	032H
	DB	032H
	DB	033H
	DB	032H
	DB	034H
	DB	032H
	DB	035H
	DB	032H
	DB	036H
	DB	032H
	DB	037H
	DB	032H
	DB	038H
	DB	032H
	DB	039H
	DB	032H
	DB	041H
	DB	032H
	DB	042H
	DB	032H
	DB	043H
	DB	032H
	DB	044H
	DB	032H
	DB	045H
	DB	032H
	DB	046H
	DB	033H
	DB	030H
	DB	033H
	DB	031H
	DB	033H
	DB	032H
	DB	033H
	DB	033H
	DB	033H
	DB	034H
	DB	033H
	DB	035H
	DB	033H
	DB	036H
	DB	033H
	DB	037H
	DB	033H
	DB	038H
	DB	033H
	DB	039H
	DB	033H
	DB	041H
	DB	033H
	DB	042H
	DB	033H
	DB	043H
	DB	033H
	DB	044H
	DB	033H
	DB	045H
	DB	033H
	DB	046H
	DB	034H
	DB	030H
	DB	034H
	DB	031H
	DB	034H
	DB	032H
	DB	034H
	DB	033H
	DB	034H
	DB	034H
	DB	034H
	DB	035H
	DB	034H
	DB	036H
	DB	034H
	DB	037H
	DB	034H
	DB	038H
	DB	034H
	DB	039H
	DB	034H
	DB	041H
	DB	034H
	DB	042H
	DB	034H
	DB	043H
	DB	034H
	DB	044H
	DB	034H
	DB	045H
	DB	034H
	DB	046H
	DB	035H
	DB	030H
	DB	035H
	DB	031H
	DB	035H
	DB	032H
	DB	035H
	DB	033H
	DB	035H
	DB	034H
	DB	035H
	DB	035H
	DB	035H
	DB	036H
	DB	035H
	DB	037H
	DB	035H
	DB	038H
	DB	035H
	DB	039H
	DB	035H
	DB	041H
	DB	035H
	DB	042H
	DB	035H
	DB	043H
	DB	035H
	DB	044H
	DB	035H
	DB	045H
	DB	035H
	DB	046H
	DB	036H
	DB	030H
	DB	036H
	DB	031H
	DB	036H
	DB	032H
	DB	036H
	DB	033H
	DB	036H
	DB	034H
	DB	036H
	DB	035H
	DB	036H
	DB	036H
	DB	036H
	DB	037H
	DB	036H
	DB	038H
	DB	036H
	DB	039H
	DB	036H
	DB	041H
	DB	036H
	DB	042H
	DB	036H
	DB	043H
	DB	036H
	DB	044H
	DB	036H
	DB	045H
	DB	036H
	DB	046H
	DB	037H
	DB	030H
	DB	037H
	DB	031H
	DB	037H
	DB	032H
	DB	037H
	DB	033H
	DB	037H
	DB	034H
	DB	037H
	DB	035H
	DB	037H
	DB	036H
	DB	037H
	DB	037H
	DB	037H
	DB	038H
	DB	037H
	DB	039H
	DB	037H
	DB	041H
	DB	037H
	DB	042H
	DB	037H
	DB	043H
	DB	037H
	DB	044H
	DB	037H
	DB	045H
	DB	037H
	DB	046H
	DB	038H
	DB	030H
	DB	038H
	DB	031H
	DB	038H
	DB	032H
	DB	038H
	DB	033H
	DB	038H
	DB	034H
	DB	038H
	DB	035H
	DB	038H
	DB	036H
	DB	038H
	DB	037H
	DB	038H
	DB	038H
	DB	038H
	DB	039H
	DB	038H
	DB	041H
	DB	038H
	DB	042H
	DB	038H
	DB	043H
	DB	038H
	DB	044H
	DB	038H
	DB	045H
	DB	038H
	DB	046H
	DB	039H
	DB	030H
	DB	039H
	DB	031H
	DB	039H
	DB	032H
	DB	039H
	DB	033H
	DB	039H
	DB	034H
	DB	039H
	DB	035H
	DB	039H
	DB	036H
	DB	039H
	DB	037H
	DB	039H
	DB	038H
	DB	039H
	DB	039H
	DB	039H
	DB	041H
	DB	039H
	DB	042H
	DB	039H
	DB	043H
	DB	039H
	DB	044H
	DB	039H
	DB	045H
	DB	039H
	DB	046H
	DB	041H
	DB	030H
	DB	041H
	DB	031H
	DB	041H
	DB	032H
	DB	041H
	DB	033H
	DB	041H
	DB	034H
	DB	041H
	DB	035H
	DB	041H
	DB	036H
	DB	041H
	DB	037H
	DB	041H
	DB	038H
	DB	041H
	DB	039H
	DB	041H
	DB	041H
	DB	041H
	DB	042H
	DB	041H
	DB	043H
	DB	041H
	DB	044H
	DB	041H
	DB	045H
	DB	041H
	DB	046H
	DB	042H
	DB	030H
	DB	042H
	DB	031H
	DB	042H
	DB	032H
	DB	042H
	DB	033H
	DB	042H
	DB	034H
	DB	042H
	DB	035H
	DB	042H
	DB	036H
	DB	042H
	DB	037H
	DB	042H
	DB	038H
	DB	042H
	DB	039H
	DB	042H
	DB	041H
	DB	042H
	DB	042H
	DB	042H
	DB	043H
	DB	042H
	DB	044H
	DB	042H
	DB	045H
	DB	042H
	DB	046H
	DB	043H
	DB	030H
	DB	043H
	DB	031H
	DB	043H
	DB	032H
	DB	043H
	DB	033H
	DB	043H
	DB	034H
	DB	043H
	DB	035H
	DB	043H
	DB	036H
	DB	043H
	DB	037H
	DB	043H
	DB	038H
	DB	043H
	DB	039H
	DB	043H
	DB	041H
	DB	043H
	DB	042H
	DB	043H
	DB	043H
	DB	043H
	DB	044H
	DB	043H
	DB	045H
	DB	043H
	DB	046H
	DB	044H
	DB	030H
	DB	044H
	DB	031H
	DB	044H
	DB	032H
	DB	044H
	DB	033H
	DB	044H
	DB	034H
	DB	044H
	DB	035H
	DB	044H
	DB	036H
	DB	044H
	DB	037H
	DB	044H
	DB	038H
	DB	044H
	DB	039H
	DB	044H
	DB	041H
	DB	044H
	DB	042H
	DB	044H
	DB	043H
	DB	044H
	DB	044H
	DB	044H
	DB	045H
	DB	044H
	DB	046H
	DB	045H
	DB	030H
	DB	045H
	DB	031H
	DB	045H
	DB	032H
	DB	045H
	DB	033H
	DB	045H
	DB	034H
	DB	045H
	DB	035H
	DB	045H
	DB	036H
	DB	045H
	DB	037H
	DB	045H
	DB	038H
	DB	045H
	DB	039H
	DB	045H
	DB	041H
	DB	045H
	DB	042H
	DB	045H
	DB	043H
	DB	045H
	DB	044H
	DB	045H
	DB	045H
	DB	045H
	DB	046H
	DB	046H
	DB	030H
	DB	046H
	DB	031H
	DB	046H
	DB	032H
	DB	046H
	DB	033H
	DB	046H
	DB	034H
	DB	046H
	DB	035H
	DB	046H
	DB	036H
	DB	046H
	DB	037H
	DB	046H
	DB	038H
	DB	046H
	DB	039H
	DB	046H
	DB	041H
	DB	046H
	DB	042H
	DB	046H
	DB	043H
	DB	046H
	DB	044H
	DB	046H
	DB	045H
	DB	046H
	DB	046H
	DB	044H
_DATA	ENDS
;	COMDAT ??_C@_06NJDOOGHM@sa?4dmp@
CONST	SEGMENT
??_C@_06NJDOOGHM@sa?4dmp@ DB 'sa.dmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@NHKBMFH@?$AA?$AL?$PP?$IP?$AA?$AC?$AA8?$AA?$AA?$PP?z?$AA?$AM?$PP?w?$AAT?$PP?$PL?$AA?2?$AA?$AF?$AA?6?$AA?6?$AA?3@
CONST	SEGMENT
??_C@_1FO@NHKBMFH@?$AA?$AL?$PP?$IP?$AA?$AC?$AA8?$AA?$AA?$PP?z?$AA?$AM?$PP?w?$AAT?$PP?$PL?$AA?2?$AA?$AF?$AA?6?$AA?6?$AA?3@ DB 0bH
	DB	'z', 08fH, '^', 02H, '_8^', 00H, 090H, 0faH, 'Q', 0cH, 0ffH, 0f7H
	DB	08bH, 'T', 080H, 0fbH, '|\O', 05H, 080H, 0aH, 00H, 0aH, 00H, ':'
	DB	'N', 086H, 'N', 0bfH, 'O', 08eH, 'N\O', 05H, 080H, 0e5H, 'g~b', 0eeH
	DB	095H, 098H, 098H, 0cH, 0ffH, 0f7H, 08bH, 06H, '\8n', 0fH, 'b', 0eeH
	DB	'vU_', 0bH, 'N', 084H, 'vs', 00H, 'a', 00H, '.', 00H, 'd', 00H
	DB	'm', 00H, 'p', 00H, 0aH, 'N O0R', 0baH, 08bH, '[W', 0aH, 00H, 0aH
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?BIG52GBK@@YIXPAD@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN17@BIG52GBK
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GBK2BIG5@@YIXPAD@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN17@GBK2BIG5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GB2GBK@@YIXPAD@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN18@GB2GBK
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GBK2GB@@YIXPAD@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN18@GBK2GB
xdata$x	ENDS
CRT$XCU	SEGMENT
?SCREEN_WIDTH_CENTER$initializer$@@3P6AXXZA DD FLAT:??__ESCREEN_WIDTH_CENTER@@YAXXZ ; SCREEN_WIDTH_CENTER$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?SCREEN_HEIGHT_CENTER$initializer$@@3P6AXXZA DD FLAT:??__ESCREEN_HEIGHT_CENTER@@YAXXZ ; SCREEN_HEIGHT_CENTER$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?viewOffsetX$initializer$@@3P6AXXZA DD FLAT:??__EviewOffsetX@@YAXXZ ; viewOffsetX$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?viewOffsetY$initializer$@@3P6AXXZA DD FLAT:??__EviewOffsetY@@YAXXZ ; viewOffsetY$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ???ÝÂú¼@@YAPADPADHH@Z
_TEXT	SEGMENT
_pNextStr$1$ = -1040					; size = 4
_str$GSCopy$1$ = -1036					; size = 4
_tempLen$1$ = -1032					; size = 4
_outText2$ = -1028					; size = 512
_outText$ = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 4
_curLen$ = 12						; size = 4
_maxLen$ = 16						; size = 4
???ÝÂú¼@@YAPADPADHH@Z PROC				; ??ÝÂú¼, COMDAT

; 1149 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 04 00
	00		 sub	 esp, 1040		; 00000410H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]

; 1150 : 
; 1151 : 	if (strlen(str) < maxLen) return 0;

  00016	8b ca		 mov	 ecx, edx
  00018	53		 push	 ebx
  00019	8b 5d 0c	 mov	 ebx, DWORD PTR _curLen$[ebp]
  0001c	56		 push	 esi
  0001d	8b 75 10	 mov	 esi, DWORD PTR _maxLen$[ebp]
  00020	57		 push	 edi
  00021	89 95 f4 fb ff
	ff		 mov	 DWORD PTR _str$GSCopy$1$[ebp], edx
  00027	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0002a	89 9d f8 fb ff
	ff		 mov	 DWORD PTR _tempLen$1$[ebp], ebx
$LL15@:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL15@
  00037	2b cf		 sub	 ecx, edi
  00039	3b ce		 cmp	 ecx, esi
  0003b	0f 82 14 01 00
	00		 jb	 $LN9@

; 1152 : 
; 1153 : 	char outText[512];
; 1154 : 	char outText2[512];
; 1155 : 	*outText2 = 0;
; 1156 : 
; 1157 : 	char* pNextStr = 0;
; 1158 : 
; 1159 : 	int lenTotal = curLen;
; 1160 : 
; 1161 : 	//æ¥æ¾ { 
; 1162 : 	char *temp1 = sunday(str, "{");

  00041	68 00 00 00 00	 push	 OFFSET ??_C@_01HCONENDN@?$HL@
  00046	52		 push	 edx
  00047	88 85 fc fb ff
	ff		 mov	 BYTE PTR _outText2$[ebp], al
  0004d	e8 00 00 00 00	 call	 ?sunday@@YAPADPAD0@Z	; sunday
  00052	8b f8		 mov	 edi, eax
  00054	83 c4 08	 add	 esp, 8

; 1163 : 	if (temp1 != NULL)

  00057	85 ff		 test	 edi, edi
  00059	0f 84 c2 00 00
	00		 je	 $aa$20

; 1164 : 	{
; 1165 : 		lenTotal = lenTotal + temp1 - str;
; 1166 : 		char *temp2 = sunday(temp1, "}");

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_01CELHOKLL@?$HN@
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 ?sunday@@YAPADPAD0@Z	; sunday
  0006a	8b d8		 mov	 ebx, eax
  0006c	83 c4 08	 add	 esp, 8

; 1167 : 		if (temp2 == 0) goto aa; //[í¹ìíì§ ìì ì´êµ¬/ë¹í¹ì ì´êµ¬]

  0006f	85 db		 test	 ebx, ebx
  00071	0f 84 a4 00 00
	00		 je	 $LN17@

; 1168 : 
; 1169 : 		//[ìì§ë str=ì´ ìëì§ íë¨í  íìê° ìì]
; 1170 : 
; 1171 : 		pNextStr = temp2 + 1;

  00077	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]

; 1172 : 		
; 1173 : 		int lenæ¬å·é¿åº¦ = temp2 - temp1;

  0007a	2b df		 sub	 ebx, edi
  0007c	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _pNextStr$1$[ebp], eax

; 1174 : 		memcpy(outText, temp1+1, lenæ¬å·é¿åº¦);

  00082	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00085	53		 push	 ebx
  00086	50		 push	 eax
  00087	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _outText$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _memcpy
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1175 : 		outText[lenæ¬å·é¿åº¦] = 0;

  00096	81 fb 00 02 00
	00		 cmp	 ebx, 512		; 00000200H
  0009c	0f 83 c6 00 00
	00		 jae	 $LN13@

; 1176 : 
; 1177 : 		void getStrStr(char* strIn, char* strOut);
; 1178 : 		getStrStr(outText, outText2);

  000a2	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _outText2$[ebp]
  000a8	c6 84 1d fc fd
	ff ff 00	 mov	 BYTE PTR _outText$[ebp+ebx], 0
  000b0	50		 push	 eax
  000b1	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _outText$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?getStrStr@@YAXPAD0@Z	; getStrStr
  000bd	83 c4 08	 add	 esp, 8

; 1179 : 		int lenStr = lstrlen(outText2);

  000c0	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _outText2$[ebp]
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000cd	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR _tempLen$1$[ebp]

; 1180 : 		int tempLen = lenTotal + lenStr;

  000d3	03 c7		 add	 eax, edi
  000d5	2b 8d f4 fb ff
	ff		 sub	 ecx, DWORD PTR _str$GSCopy$1$[ebp]
  000db	03 c8		 add	 ecx, eax

; 1181 : 		if (tempLen > maxLen) 

  000dd	3b ce		 cmp	 ecx, esi
  000df	7e 13		 jle	 SHORT $LN7@

; 1182 : 		{
; 1183 : 			//éè¦åè¡äºï¼åè¡çä½ç½®ä¸º{  [í êµ¬ë¶ì´ íìí¨, íì ëëë ìì¹ë ë¤ìê³¼ ê°ì]
; 1184 : 			return temp1;

  000e1	8b c7		 mov	 eax, edi
  000e3	5f		 pop	 edi

; 1202 : 		}
; 1203 : 	}
; 1204 : 
; 1205 : 	return 0;
; 1206 : 
; 1207 : }

  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
$LN7@:

; 1185 : 		}
; 1186 : 
; 1187 : 		//å¦ææ²¡æä¸ä¸ä¸ªäºï¼åä¸éè¦åè¡ [ë§ì½ ë¤ìì´ ìë¤ë©´ íì ëë íìê° ìì]
; 1188 : 		if (*pNextStr == 0) return 0;

  000f4	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pNextStr$1$[ebp]
  000fa	80 38 00	 cmp	 BYTE PTR [eax], 0
  000fd	74 56		 je	 SHORT $LN9@

; 1189 : 
; 1190 : 		//ç»§ç»­å¤çä¸ä¸ä¸ª [ê³ì ë¤ìì ì²ë¦¬í¨/ì°ì°ì ìíí¨]
; 1191 : 		return è¯´è¯åè¡(pNextStr, tempLen, maxLen);

  000ff	56		 push	 esi
  00100	51		 push	 ecx
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ???ÝÂú¼@@YAPADPADHH@Z	; ??ÝÂú¼
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	5f		 pop	 edi

; 1202 : 		}
; 1203 : 	}
; 1204 : 
; 1205 : 	return 0;
; 1206 : 
; 1207 : }

  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00110	33 cd		 xor	 ecx, ebp
  00112	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
$LN17@:

; 1167 : 		if (temp2 == 0) goto aa; //[í¹ìíì§ ìì ì´êµ¬/ë¹í¹ì ì´êµ¬]

  0011b	8b 9d f8 fb ff
	ff		 mov	 ebx, DWORD PTR _tempLen$1$[ebp]
$aa$20:

; 1192 : 
; 1193 : 	}
; 1194 : 	else
; 1195 : 	{
; 1196 : 	aa:;
; 1197 : 		int len = strlen(str);

  00121	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _str$GSCopy$1$[ebp]
  00127	8b ca		 mov	 ecx, edx
  00129	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0012c	0f 1f 40 00	 npad	 4
$LL16@:
  00130	8a 01		 mov	 al, BYTE PTR [ecx]
  00132	41		 inc	 ecx
  00133	84 c0		 test	 al, al
  00135	75 f9		 jne	 SHORT $LL16@
  00137	2b cf		 sub	 ecx, edi

; 1198 : 		if (curLen + len > maxLen)

  00139	03 cb		 add	 ecx, ebx
  0013b	3b ce		 cmp	 ecx, esi
  0013d	7e 16		 jle	 SHORT $LN9@

; 1199 : 		{
; 1200 : 			char* p = str + maxLen - curLen;
; 1201 : 			return p;

  0013f	2b f3		 sub	 esi, ebx
  00141	5f		 pop	 edi
  00142	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]

; 1202 : 		}
; 1203 : 	}
; 1204 : 
; 1205 : 	return 0;
; 1206 : 
; 1207 : }

  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014a	33 cd		 xor	 ecx, ebp
  0014c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
$LN9@:
  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	33 c0		 xor	 eax, eax
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	33 cd		 xor	 ecx, ebp
  0015e	5b		 pop	 ebx
  0015f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c3		 ret	 0
$LN13@:

; 1175 : 		outText[lenæ¬å·é¿åº¦] = 0;

  00168	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN18@:
  0016d	cc		 int	 3
???ÝÂú¼@@YAPADPADHH@Z ENDP				; ??ÝÂú¼
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ??Ø­Ùþí®ïÃ?@@YAXXZ
_TEXT	SEGMENT
_j$2$ = -16						; size = 4
_x$1$ = -12						; size = 4
_k$1$ = -8						; size = 4
tv241 = -1						; size = 1
??Ø­Ùþí®ïÃ?@@YAXXZ PROC					; ?Ø­Ùþí®ïÃ?, COMDAT

; 1110 : void å±å¹æå­ç¹å»(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1111 : 	extern int ChatLineSmoothY;
; 1112 : 	int i, j, k = 0;
; 1113 : 	j = NowChatLine - 1;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?NowChatLine@@3HA ; NowChatLine

; 1114 : 	if (j < 0)

  0000b	b9 1d 00 00 00	 mov	 ecx, 29			; 0000001dH
  00010	83 c0 ff	 add	 eax, -1
  00013	0f 48 c1	 cmovs	 eax, ecx

; 1115 : 		j = MAX_CHAT_LINE - 1;
; 1116 : 	if (ChatLineSmoothY > 0)

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ChatLineSmoothY@@3HA, 0 ; ChatLineSmoothY
  0001d	89 45 f0	 mov	 DWORD PTR _j$2$[ebp], eax
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?NowMaxChatLine@@3HA ; NowMaxChatLine
  00025	7e 01		 jle	 SHORT $LN11@

; 1117 : 		k = NowMaxChatLine + 1;

  00027	40		 inc	 eax
$LN11@:

; 1118 : 	else
; 1119 : 		k = NowMaxChatLine;
; 1120 : 
; 1121 : 	if (k > MAX_CHAT_LINE)

  00028	33 c9		 xor	 ecx, ecx
  0002a	89 45 f8	 mov	 DWORD PTR _k$1$[ebp], eax
  0002d	89 4d f4	 mov	 DWORD PTR _x$1$[ebp], ecx
  00030	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00033	7e 08		 jle	 SHORT $LN32@

; 1122 : 		k = MAX_CHAT_LINE;

  00035	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  0003a	89 45 f8	 mov	 DWORD PTR _k$1$[ebp], eax
$LN32@:

; 1123 : 
; 1124 : 	for (int x = 0; x <= j; x++){

  0003d	8b 55 f0	 mov	 edx, DWORD PTR _j$2$[ebp]
  00040	53		 push	 ebx
  00041	56		 push	 esi
  00042	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  00048	bb 00 00 00 00	 mov	 ebx, OFFSET ?ChatBuffer@@3PAU_CHAT_BUFFER@@A ; ChatBuffer
  0004d	57		 push	 edi
  0004e	66 90		 npad	 2
$LL4@:

; 1125 : 		for (i = 0; i < k; i++) {

  00050	33 ff		 xor	 edi, edi
  00052	85 c0		 test	 eax, eax
  00054	7e 41		 jle	 SHORT $LN2@

; 1126 : 			if (*ChatBuffer[x].buffer != NULL) {

  00056	8a 0b		 mov	 cl, BYTE PTR [ebx]
$LL7@:
  00058	84 c9		 test	 cl, cl
  0005a	74 30		 je	 SHORT $LN5@

; 1127 : 				CHAT_BUFFER * temp = &ChatBuffer[x];

  0005c	8b 15 2c 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00062	8b c3		 mov	 eax, ebx
  00064	83 e2 02	 and	 edx, 2
$LL8@:

; 1128 : 				while (temp) {
; 1129 : 					if( mouse.onceState & MOUSE_RIGHT_CRICK ){

  00067	85 d2		 test	 edx, edx
  00069	74 12		 je	 SHORT $LN17@

; 1130 : 						if (temp->fontID == HitFontNo){ //[ì´ë¯¸ì§ê° ìëë° ë§ì°ì¤ë¥¼ ë¹ì ìììì ì¬ë ¤ ëìì ê²½ì°]

  0006b	39 b0 44 01 00
	00		 cmp	 DWORD PTR [eax+324], esi
  00071	75 0a		 jne	 SHORT $LN17@

; 1131 : 							if (temp->image){

  00073	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [eax+320]
  00079	85 c9		 test	 ecx, ecx
  0007b	75 2f		 jne	 SHORT $LN22@
$LN17@:

; 1134 : 								//MessageBox(0, "í´ë¦­ ì±ê³µ", 0, 0);
; 1135 : 								return;
; 1136 : 							}
; 1137 : 						}
; 1138 : 					}
; 1139 : 					temp = temp->NextChatBuffer;

  0007d	8b 80 14 01 00
	00		 mov	 eax, DWORD PTR [eax+276]
  00083	85 c0		 test	 eax, eax
  00085	75 e0		 jne	 SHORT $LL8@
  00087	8b 45 f8	 mov	 eax, DWORD PTR _k$1$[ebp]
  0008a	8a 0b		 mov	 cl, BYTE PTR [ebx]
$LN5@:

; 1125 : 		for (i = 0; i < k; i++) {

  0008c	47		 inc	 edi
  0008d	3b f8		 cmp	 edi, eax
  0008f	7c c7		 jl	 SHORT $LL7@
  00091	8b 4d f4	 mov	 ecx, DWORD PTR _x$1$[ebp]
  00094	8b 55 f0	 mov	 edx, DWORD PTR _j$2$[ebp]
$LN2@:

; 1123 : 
; 1124 : 	for (int x = 0; x <= j; x++){

  00097	41		 inc	 ecx
  00098	81 c3 4c 01 00
	00		 add	 ebx, 332		; 0000014cH
  0009e	89 4d f4	 mov	 DWORD PTR _x$1$[ebp], ecx
  000a1	3b ca		 cmp	 ecx, edx
  000a3	7e ab		 jle	 SHORT $LL4@

; 1140 : 				}
; 1141 : 			}
; 1142 : 		}
; 1143 : 	}
; 1144 : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN22@:

; 1132 : 								lssproto_SaMenu_send(sockfd,5,1,temp->image);

  000ac	51		 push	 ecx
  000ad	6a 01		 push	 1
  000af	6a 05		 push	 5
  000b1	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  000b7	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send
  000bc	83 c4 10	 add	 esp, 16			; 00000010H

; 1133 : 								mouse.onceState = ~MOUSE_RIGHT_CRICK;

  000bf	c7 05 2c 00 00
	00 fd ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, -3 ; fffffffdH
  000c9	5f		 pop	 edi

; 1140 : 				}
; 1141 : 			}
; 1142 : 		}
; 1143 : 	}
; 1144 : }

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
??Ø­Ùþí®ïÃ?@@YAXXZ ENDP					; ?Ø­Ùþí®ïÃ?
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_FONT@@YAPAUHFONT__@@XZ
_TEXT	SEGMENT
_logFont$ = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
?JL_FONT@@YAPAUHFONT__@@XZ PROC				; JL_FONT, COMDAT

; 1083 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1084 : 	HFONT font;
; 1085 : 	LOGFONT logFont;
; 1086 : 	memset(&logFont, 0, sizeof(logFont));
; 1087 : 	// [ê¸ê¼´ í¬ê¸°]
; 1088 : 	extern HWND hWnd;
; 1089 : 	HDC hdc = GetDC(hWnd);

  00010	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	66 0f 13 45 c8	 movlpd	 QWORD PTR _logFont$[ebp+8], xmm0
  0001e	66 0f 13 45 dc	 movlpd	 QWORD PTR _logFont$[ebp+28], xmm0
  00023	66 0f 13 45 e4	 movlpd	 QWORD PTR _logFont$[ebp+36], xmm0
  00028	66 0f 13 45 ec	 movlpd	 QWORD PTR _logFont$[ebp+44], xmm0
  0002d	66 0f 13 45 f4	 movlpd	 QWORD PTR _logFont$[ebp+52], xmm0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 1090 : 	logFont.lfHeight = -MulDiv(10, GetDeviceCaps(hdc, LOGPIXELSY), 72);

  00038	6a 48		 push	 72			; 00000048H
  0003a	6a 5a		 push	 90			; 0000005aH
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDeviceCaps@8
  00043	50		 push	 eax
  00044	6a 0a		 push	 10			; 0000000aH
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MulDiv@12
  0004c	f7 d8		 neg	 eax

; 1091 : 	logFont.lfWidth = 0;    // [ê¸ê¼´ ëë¹(ê¸°ë³¸ê°)]

  0004e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _logFont$[ebp+4], 0

; 1092 : 	logFont.lfWeight = 0;    // [ê¸ê¼´ ëê» (ê¸°ë³¸ê°, FW_BOLDë ëê»ê²)]
; 1093 : 	logFont.lfItalic = 0;    // [ì´í¤ë¦­ì²´]
; 1094 : 	logFont.lfUnderline = 0; // [ë°ì¤]
; 1095 : 	logFont.lfStrikeOut = 0; // [ì­ì ì ]
; 1096 : 	logFont.lfCharSet = HANGUL_CHARSET;   // [ê¸ê¼´ì§(ê¸°ë³¸ê°)]
; 1097 : 	logFont.lfOutPrecision = OUT_DEFAULT_PRECIS;
; 1098 : 	logFont.lfClipPrecision = CLIP_DEFAULT_PRECIS;
; 1099 : 	logFont.lfQuality = DEFAULT_QUALITY;
; 1100 : 	logFont.lfPitchAndFamily = FIXED_PITCH | FF_ROMAN;
; 1101 : 
; 1102 : 										  // [ê¸ê¼´ ì´ë¦]
; 1103 : 	sprintf(logFont.lfFaceName, TEXT("%s"), TEXT("êµ´ë¦¼ì²´"));

  00055	68 00 00 00 00	 push	 OFFSET ??_C@_06MFMMLLPC@?$LB?$LM?$LI?$LC?C?$LM@
  0005a	89 45 c0	 mov	 DWORD PTR _logFont$[ebp], eax
  0005d	8d 45 dc	 lea	 eax, DWORD PTR _logFont$[ebp+28]
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00065	50		 push	 eax
  00066	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _logFont$[ebp+16], 0
  0006d	c7 45 d4 00 00
	00 81		 mov	 DWORD PTR _logFont$[ebp+20], -2130706432 ; 81000000H
  00074	c7 45 d8 00 00
	00 11		 mov	 DWORD PTR _logFont$[ebp+24], 285212672 ; 11000000H
  0007b	e8 00 00 00 00	 call	 _sprintf
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1104 : 	font = CreateFontIndirect(&logFont);

  00083	8d 45 c0	 lea	 eax, DWORD PTR _logFont$[ebp]
  00086	50		 push	 eax
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontIndirectA@4

; 1105 : 	return font;
; 1106 : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?JL_FONT@@YAPAUHFONT__@@XZ ENDP				; JL_FONT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?DecryptTEA@@YAXPAI00I@Z
_TEXT	SEGMENT
tv175 = -16						; size = 4
_z$1$ = -12						; size = 4
_y$1$ = -8						; size = 4
_sum$1$ = -4						; size = 4
_firstChunk$ = 8					; size = 4
_secondChunk$ = 12					; size = 4
_key$ = 16						; size = 4
_delta$ = 20						; size = 4
?DecryptTEA@@YAXPAI00I@Z PROC				; DecryptTEA, COMDAT

; 1025 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1026 : 	unsigned int  sum = 0;
; 1027 : 	unsigned int  y = *firstChunk;

  00006	8b 45 08	 mov	 eax, DWORD PTR _firstChunk$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1028 : 	unsigned int  z = *secondChunk;
; 1029 : 
; 1030 : 
; 1031 : 	sum = delta << 3; //[buffer: ìí¸í í  ìë ¥ ë°ì´í° ë²í¼ì ê²½ì° í¨ìì ë©í ë°ì´í° ë²í¼ë¥¼ ì§ì  ìí¸í í©ëë¤. size: ë²í¼ ê¸¸ì´; keyë cipher codeì]

  0000b	8b 75 14	 mov	 esi, DWORD PTR _delta$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _secondChunk$[ebp]
  00016	57		 push	 edi
  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax

; 1032 : 
; 1033 : 	for (int i = 0; i < 8; i++) //8è½®è¿ç®
; 1034 : 	{
; 1035 : 		z -= (y << 4) + key[2] ^ y + sum ^ (y >> 5) + key[3];

  0001c	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  0001f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]

; 1036 : 		y -= (z << 4) + key[0] ^ z + sum ^ (z >> 5) + key[1];

  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00027	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  0002d	89 4d f0	 mov	 DWORD PTR tv175[ebp], ecx
  00030	8b c8		 mov	 ecx, eax
  00032	c1 e0 04	 shl	 eax, 4
  00035	03 c7		 add	 eax, edi
  00037	c1 e9 05	 shr	 ecx, 5
  0003a	03 ca		 add	 ecx, edx
  0003c	33 c8		 xor	 ecx, eax
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00041	8d 04 f0	 lea	 eax, DWORD PTR [eax+esi*8]
  00044	33 c8		 xor	 ecx, eax
  00046	8b 45 f4	 mov	 eax, DWORD PTR _z$1$[ebp]
  00049	2b c1		 sub	 eax, ecx
  0004b	8b c8		 mov	 ecx, eax
  0004d	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax
  00050	c1 e0 04	 shl	 eax, 4
  00053	03 45 f0	 add	 eax, DWORD PTR tv175[ebp]
  00056	c1 e9 05	 shr	 ecx, 5
  00059	03 cb		 add	 ecx, ebx
  0005b	33 c8		 xor	 ecx, eax
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _z$1$[ebp]
  00060	8d 04 f0	 lea	 eax, DWORD PTR [eax+esi*8]
  00063	33 c8		 xor	 ecx, eax

; 1037 : 		sum -= delta;

  00065	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  0006c	29 4d f8	 sub	 DWORD PTR _y$1$[ebp], ecx
  0006f	2b c6		 sub	 eax, esi
  00071	8b 75 f8	 mov	 esi, DWORD PTR _y$1$[ebp]
  00074	8b ce		 mov	 ecx, esi
  00076	89 45 fc	 mov	 DWORD PTR _sum$1$[ebp], eax
  00079	8b c6		 mov	 eax, esi
  0007b	c1 e0 04	 shl	 eax, 4
  0007e	03 c7		 add	 eax, edi
  00080	c1 e9 05	 shr	 ecx, 5
  00083	03 ca		 add	 ecx, edx
  00085	33 c8		 xor	 ecx, eax
  00087	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  0008a	03 c6		 add	 eax, esi
  0008c	33 c8		 xor	 ecx, eax
  0008e	8b 45 f4	 mov	 eax, DWORD PTR _z$1$[ebp]
  00091	2b c1		 sub	 eax, ecx
  00093	8b c8		 mov	 ecx, eax
  00095	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax
  00098	c1 e0 04	 shl	 eax, 4
  0009b	03 45 f0	 add	 eax, DWORD PTR tv175[ebp]
  0009e	c1 e9 05	 shr	 ecx, 5
  000a1	03 cb		 add	 ecx, ebx
  000a3	33 c8		 xor	 ecx, eax
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  000a8	03 45 f4	 add	 eax, DWORD PTR _z$1$[ebp]
  000ab	33 c8		 xor	 ecx, eax
  000ad	8b c6		 mov	 eax, esi
  000af	8b 75 14	 mov	 esi, DWORD PTR _delta$[ebp]
  000b2	2b c1		 sub	 eax, ecx
  000b4	29 75 fc	 sub	 DWORD PTR _sum$1$[ebp], esi
  000b7	8b c8		 mov	 ecx, eax
  000b9	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  000bc	c1 e0 04	 shl	 eax, 4
  000bf	c1 e9 05	 shr	 ecx, 5
  000c2	03 c7		 add	 eax, edi
  000c4	03 ca		 add	 ecx, edx
  000c6	33 c8		 xor	 ecx, eax
  000c8	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  000cb	03 45 f8	 add	 eax, DWORD PTR _y$1$[ebp]
  000ce	33 c8		 xor	 ecx, eax
  000d0	8b 45 f4	 mov	 eax, DWORD PTR _z$1$[ebp]
  000d3	2b c1		 sub	 eax, ecx

; 1032 : 
; 1033 : 	for (int i = 0; i < 8; i++) //8è½®è¿ç®
; 1034 : 	{
; 1035 : 		z -= (y << 4) + key[2] ^ y + sum ^ (y >> 5) + key[3];

  000d5	8b c8		 mov	 ecx, eax
  000d7	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax

; 1036 : 		y -= (z << 4) + key[0] ^ z + sum ^ (z >> 5) + key[1];

  000da	c1 e0 04	 shl	 eax, 4
  000dd	03 45 f0	 add	 eax, DWORD PTR tv175[ebp]
  000e0	c1 e9 05	 shr	 ecx, 5
  000e3	03 cb		 add	 ecx, ebx
  000e5	33 c8		 xor	 ecx, eax
  000e7	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  000ea	03 45 f4	 add	 eax, DWORD PTR _z$1$[ebp]
  000ed	33 c8		 xor	 ecx, eax

; 1037 : 		sum -= delta;

  000ef	29 75 fc	 sub	 DWORD PTR _sum$1$[ebp], esi
  000f2	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  000f5	2b c1		 sub	 eax, ecx
  000f7	8b c8		 mov	 ecx, eax
  000f9	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  000fc	c1 e0 04	 shl	 eax, 4
  000ff	03 c7		 add	 eax, edi
  00101	c1 e9 05	 shr	 ecx, 5
  00104	03 ca		 add	 ecx, edx
  00106	33 c8		 xor	 ecx, eax
  00108	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  0010b	03 45 f8	 add	 eax, DWORD PTR _y$1$[ebp]
  0010e	33 c8		 xor	 ecx, eax
  00110	8b 45 f4	 mov	 eax, DWORD PTR _z$1$[ebp]
  00113	2b c1		 sub	 eax, ecx
  00115	8b c8		 mov	 ecx, eax
  00117	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax
  0011a	c1 e0 04	 shl	 eax, 4
  0011d	03 45 f0	 add	 eax, DWORD PTR tv175[ebp]
  00120	c1 e9 05	 shr	 ecx, 5
  00123	03 cb		 add	 ecx, ebx
  00125	33 c8		 xor	 ecx, eax
  00127	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  0012a	03 45 f4	 add	 eax, DWORD PTR _z$1$[ebp]
  0012d	33 c8		 xor	 ecx, eax
  0012f	29 75 fc	 sub	 DWORD PTR _sum$1$[ebp], esi
  00132	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00135	2b c1		 sub	 eax, ecx
  00137	8b c8		 mov	 ecx, eax
  00139	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  0013c	c1 e0 04	 shl	 eax, 4
  0013f	c1 e9 05	 shr	 ecx, 5
  00142	03 c7		 add	 eax, edi
  00144	03 ca		 add	 ecx, edx
  00146	33 c8		 xor	 ecx, eax
  00148	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  0014b	03 45 f8	 add	 eax, DWORD PTR _y$1$[ebp]
  0014e	33 c8		 xor	 ecx, eax
  00150	8b 45 f4	 mov	 eax, DWORD PTR _z$1$[ebp]
  00153	2b c1		 sub	 eax, ecx
  00155	8b c8		 mov	 ecx, eax
  00157	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax
  0015a	c1 e0 04	 shl	 eax, 4
  0015d	03 45 f0	 add	 eax, DWORD PTR tv175[ebp]
  00160	c1 e9 05	 shr	 ecx, 5
  00163	03 cb		 add	 ecx, ebx
  00165	33 c8		 xor	 ecx, eax
  00167	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  0016a	03 45 f4	 add	 eax, DWORD PTR _z$1$[ebp]
  0016d	29 75 fc	 sub	 DWORD PTR _sum$1$[ebp], esi
  00170	33 c8		 xor	 ecx, eax
  00172	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00175	2b c1		 sub	 eax, ecx
  00177	8b c8		 mov	 ecx, eax
  00179	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  0017c	c1 e9 05	 shr	 ecx, 5
  0017f	c1 e0 04	 shl	 eax, 4
  00182	03 ca		 add	 ecx, edx
  00184	03 c7		 add	 eax, edi
  00186	33 c8		 xor	 ecx, eax
  00188	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  0018b	03 45 f8	 add	 eax, DWORD PTR _y$1$[ebp]
  0018e	33 c8		 xor	 ecx, eax
  00190	8b 45 f4	 mov	 eax, DWORD PTR _z$1$[ebp]
  00193	2b c1		 sub	 eax, ecx
  00195	8b c8		 mov	 ecx, eax
  00197	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax
  0019a	c1 e9 05	 shr	 ecx, 5
  0019d	c1 e0 04	 shl	 eax, 4
  001a0	03 cb		 add	 ecx, ebx
  001a2	03 45 f0	 add	 eax, DWORD PTR tv175[ebp]

; 1036 : 		y -= (z << 4) + key[0] ^ z + sum ^ (z >> 5) + key[1];

  001a5	33 c8		 xor	 ecx, eax
  001a7	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  001aa	03 45 f4	 add	 eax, DWORD PTR _z$1$[ebp]
  001ad	33 c8		 xor	 ecx, eax

; 1037 : 		sum -= delta;

  001af	29 75 fc	 sub	 DWORD PTR _sum$1$[ebp], esi
  001b2	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  001b5	2b c1		 sub	 eax, ecx
  001b7	8b c8		 mov	 ecx, eax
  001b9	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  001bc	c1 e0 04	 shl	 eax, 4
  001bf	03 c7		 add	 eax, edi
  001c1	c1 e9 05	 shr	 ecx, 5
  001c4	03 ca		 add	 ecx, edx
  001c6	33 c8		 xor	 ecx, eax
  001c8	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  001cb	03 45 f8	 add	 eax, DWORD PTR _y$1$[ebp]
  001ce	33 c8		 xor	 ecx, eax
  001d0	8b 45 f4	 mov	 eax, DWORD PTR _z$1$[ebp]
  001d3	2b c1		 sub	 eax, ecx
  001d5	8b c8		 mov	 ecx, eax
  001d7	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax
  001da	c1 e0 04	 shl	 eax, 4
  001dd	03 45 f0	 add	 eax, DWORD PTR tv175[ebp]
  001e0	c1 e9 05	 shr	 ecx, 5
  001e3	03 cb		 add	 ecx, ebx
  001e5	33 c8		 xor	 ecx, eax
  001e7	8b 45 fc	 mov	 eax, DWORD PTR _sum$1$[ebp]
  001ea	03 45 f4	 add	 eax, DWORD PTR _z$1$[ebp]
  001ed	29 75 fc	 sub	 DWORD PTR _sum$1$[ebp], esi
  001f0	33 c8		 xor	 ecx, eax
  001f2	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  001f5	2b c1		 sub	 eax, ecx
  001f7	8b 75 f4	 mov	 esi, DWORD PTR _z$1$[ebp]
  001fa	8b c8		 mov	 ecx, eax
  001fc	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  001ff	c1 e9 05	 shr	 ecx, 5
  00202	c1 e0 04	 shl	 eax, 4
  00205	03 ca		 add	 ecx, edx
  00207	8b 55 fc	 mov	 edx, DWORD PTR _sum$1$[ebp]
  0020a	03 c7		 add	 eax, edi
  0020c	8b 7d f8	 mov	 edi, DWORD PTR _y$1$[ebp]
  0020f	33 c8		 xor	 ecx, eax
  00211	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  00214	33 c8		 xor	 ecx, eax
  00216	2b f1		 sub	 esi, ecx
  00218	8b ce		 mov	 ecx, esi
  0021a	8b c6		 mov	 eax, esi
  0021c	c1 e0 04	 shl	 eax, 4
  0021f	03 45 f0	 add	 eax, DWORD PTR tv175[ebp]
  00222	c1 e9 05	 shr	 ecx, 5
  00225	03 cb		 add	 ecx, ebx
  00227	33 c8		 xor	 ecx, eax
  00229	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  0022c	33 c8		 xor	 ecx, eax

; 1038 : 	}
; 1039 : 
; 1040 : 	*firstChunk = y;

  0022e	8b 45 08	 mov	 eax, DWORD PTR _firstChunk$[ebp]
  00231	2b f9		 sub	 edi, ecx
  00233	89 38		 mov	 DWORD PTR [eax], edi

; 1041 : 	*secondChunk = z;

  00235	8b 45 0c	 mov	 eax, DWORD PTR _secondChunk$[ebp]
  00238	5f		 pop	 edi
  00239	89 30		 mov	 DWORD PTR [eax], esi
  0023b	5e		 pop	 esi
  0023c	5b		 pop	 ebx

; 1042 : }

  0023d	8b e5		 mov	 esp, ebp
  0023f	5d		 pop	 ebp
  00240	c3		 ret	 0
?DecryptTEA@@YAXPAI00I@Z ENDP				; DecryptTEA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?EncryptTEA@@YAXPAI00I@Z
_TEXT	SEGMENT
tv375 = -16						; size = 4
tv376 = -12						; size = 4
_y$1$ = -8						; size = 4
_z$1$ = -4						; size = 4
_firstChunk$ = 8					; size = 4
_secondChunk$ = 12					; size = 4
_key$ = 16						; size = 4
_delta$ = 20						; size = 4
?EncryptTEA@@YAXPAI00I@Z PROC				; EncryptTEA, COMDAT

; 1007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1008 : 	unsigned int y = *firstChunk;

  00006	8b 45 08	 mov	 eax, DWORD PTR _firstChunk$[ebp]

; 1009 : 	unsigned int z = *secondChunk;

  00009	8b 55 0c	 mov	 edx, DWORD PTR _secondChunk$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax

; 1010 : 	unsigned int sum = 0;
; 1011 : 
; 1012 : 
; 1013 : 	for (int i = 0; i < 8; i++)//[8ë¼ì´ë ì°ì° (ìëì ë³µí¸í íµì¬ í¨ìì ë¼ì´ë ì ì¼ì¹í´ì¼ í¨)]
; 1014 : 	{
; 1015 : 		sum += delta;
; 1016 : 		y += ((z << 4) + key[0]) ^ (z + sum) ^ ((z >> 5) + key[1]);

  00013	8b 45 10	 mov	 eax, DWORD PTR _key$[ebp]
  00016	8b 12		 mov	 edx, DWORD PTR [edx]
  00018	57		 push	 edi
  00019	89 55 fc	 mov	 DWORD PTR _z$1$[ebp], edx
  0001c	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 1017 : 		z += ((y << 4) + key[2]) ^ (y + sum) ^ ((y >> 5) + key[3]);

  0001f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00022	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00025	8b 18		 mov	 ebx, DWORD PTR [eax]
  00027	8b c2		 mov	 eax, edx
  00029	89 4d f4	 mov	 DWORD PTR tv376[ebp], ecx
  0002c	8b ca		 mov	 ecx, edx
  0002e	8b 55 14	 mov	 edx, DWORD PTR _delta$[ebp]
  00031	c1 e0 04	 shl	 eax, 4
  00034	03 c3		 add	 eax, ebx
  00036	c1 e9 05	 shr	 ecx, 5
  00039	03 cf		 add	 ecx, edi
  0003b	89 75 f0	 mov	 DWORD PTR tv375[ebp], esi
  0003e	33 c8		 xor	 ecx, eax
  00040	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  00043	03 c2		 add	 eax, edx
  00045	33 c8		 xor	 ecx, eax
  00047	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  0004a	03 c1		 add	 eax, ecx
  0004c	8b c8		 mov	 ecx, eax
  0004e	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  00051	c1 e0 04	 shl	 eax, 4
  00054	03 45 f4	 add	 eax, DWORD PTR tv376[ebp]
  00057	c1 e9 05	 shr	 ecx, 5
  0005a	03 ce		 add	 ecx, esi
  0005c	8d 34 12	 lea	 esi, DWORD PTR [edx+edx]
  0005f	33 c8		 xor	 ecx, eax
  00061	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00064	03 c2		 add	 eax, edx
  00066	33 c8		 xor	 ecx, eax
  00068	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  0006b	03 c1		 add	 eax, ecx
  0006d	8b c8		 mov	 ecx, eax
  0006f	89 45 fc	 mov	 DWORD PTR _z$1$[ebp], eax
  00072	c1 e0 04	 shl	 eax, 4
  00075	c1 e9 05	 shr	 ecx, 5
  00078	03 c3		 add	 eax, ebx
  0007a	03 cf		 add	 ecx, edi
  0007c	33 c8		 xor	 ecx, eax
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  00081	03 c6		 add	 eax, esi
  00083	33 c8		 xor	 ecx, eax
  00085	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00088	03 c1		 add	 eax, ecx
  0008a	8b c8		 mov	 ecx, eax
  0008c	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  0008f	c1 e0 04	 shl	 eax, 4
  00092	03 45 f4	 add	 eax, DWORD PTR tv376[ebp]
  00095	c1 e9 05	 shr	 ecx, 5
  00098	03 4d f0	 add	 ecx, DWORD PTR tv375[ebp]
  0009b	33 c8		 xor	 ecx, eax
  0009d	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  000a0	03 c6		 add	 eax, esi
  000a2	03 f2		 add	 esi, edx
  000a4	33 c8		 xor	 ecx, eax
  000a6	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  000a9	03 c1		 add	 eax, ecx
  000ab	8b c8		 mov	 ecx, eax
  000ad	89 45 fc	 mov	 DWORD PTR _z$1$[ebp], eax
  000b0	c1 e9 05	 shr	 ecx, 5
  000b3	c1 e0 04	 shl	 eax, 4
  000b6	03 cf		 add	 ecx, edi
  000b8	03 c3		 add	 eax, ebx
  000ba	33 c8		 xor	 ecx, eax
  000bc	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  000bf	03 c6		 add	 eax, esi
  000c1	33 c8		 xor	 ecx, eax
  000c3	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  000c6	03 c1		 add	 eax, ecx
  000c8	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  000cb	8b c8		 mov	 ecx, eax
  000cd	c1 e0 04	 shl	 eax, 4
  000d0	03 45 f4	 add	 eax, DWORD PTR tv376[ebp]
  000d3	c1 e9 05	 shr	 ecx, 5
  000d6	03 4d f0	 add	 ecx, DWORD PTR tv375[ebp]
  000d9	33 c8		 xor	 ecx, eax
  000db	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  000de	03 c6		 add	 eax, esi
  000e0	03 f2		 add	 esi, edx
  000e2	33 c8		 xor	 ecx, eax
  000e4	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  000e7	03 c1		 add	 eax, ecx
  000e9	8b c8		 mov	 ecx, eax
  000eb	89 45 fc	 mov	 DWORD PTR _z$1$[ebp], eax
  000ee	c1 e0 04	 shl	 eax, 4
  000f1	03 c3		 add	 eax, ebx
  000f3	c1 e9 05	 shr	 ecx, 5
  000f6	03 cf		 add	 ecx, edi
  000f8	33 c8		 xor	 ecx, eax
  000fa	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  000fd	03 c6		 add	 eax, esi
  000ff	33 c8		 xor	 ecx, eax
  00101	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00104	03 c1		 add	 eax, ecx
  00106	8b c8		 mov	 ecx, eax
  00108	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  0010b	c1 e0 04	 shl	 eax, 4
  0010e	03 45 f4	 add	 eax, DWORD PTR tv376[ebp]
  00111	c1 e9 05	 shr	 ecx, 5
  00114	03 4d f0	 add	 ecx, DWORD PTR tv375[ebp]
  00117	33 c8		 xor	 ecx, eax
  00119	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  0011c	03 c6		 add	 eax, esi
  0011e	03 f2		 add	 esi, edx
  00120	33 c8		 xor	 ecx, eax
  00122	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  00125	03 c1		 add	 eax, ecx
  00127	8b c8		 mov	 ecx, eax
  00129	89 45 fc	 mov	 DWORD PTR _z$1$[ebp], eax
  0012c	c1 e0 04	 shl	 eax, 4
  0012f	03 c3		 add	 eax, ebx
  00131	c1 e9 05	 shr	 ecx, 5
  00134	03 cf		 add	 ecx, edi
  00136	33 c8		 xor	 ecx, eax
  00138	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  0013b	03 c6		 add	 eax, esi
  0013d	33 c8		 xor	 ecx, eax
  0013f	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00142	03 c1		 add	 eax, ecx
  00144	8b c8		 mov	 ecx, eax
  00146	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  00149	c1 e0 04	 shl	 eax, 4
  0014c	03 45 f4	 add	 eax, DWORD PTR tv376[ebp]
  0014f	c1 e9 05	 shr	 ecx, 5
  00152	03 4d f0	 add	 ecx, DWORD PTR tv375[ebp]
  00155	33 c8		 xor	 ecx, eax
  00157	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  0015a	03 c6		 add	 eax, esi
  0015c	03 f2		 add	 esi, edx
  0015e	33 c8		 xor	 ecx, eax
  00160	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  00163	03 c1		 add	 eax, ecx
  00165	8b c8		 mov	 ecx, eax
  00167	89 45 fc	 mov	 DWORD PTR _z$1$[ebp], eax
  0016a	c1 e0 04	 shl	 eax, 4
  0016d	c1 e9 05	 shr	 ecx, 5
  00170	03 c3		 add	 eax, ebx
  00172	03 cf		 add	 ecx, edi
  00174	33 c8		 xor	 ecx, eax
  00176	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  00179	03 c6		 add	 eax, esi
  0017b	33 c8		 xor	 ecx, eax
  0017d	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00180	03 c1		 add	 eax, ecx
  00182	8b c8		 mov	 ecx, eax
  00184	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  00187	c1 e0 04	 shl	 eax, 4
  0018a	03 45 f4	 add	 eax, DWORD PTR tv376[ebp]
  0018d	c1 e9 05	 shr	 ecx, 5
  00190	03 4d f0	 add	 ecx, DWORD PTR tv375[ebp]
  00193	33 c8		 xor	 ecx, eax
  00195	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  00198	03 c6		 add	 eax, esi
  0019a	03 f2		 add	 esi, edx
  0019c	33 c8		 xor	 ecx, eax
  0019e	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  001a1	03 c1		 add	 eax, ecx
  001a3	8b c8		 mov	 ecx, eax
  001a5	89 45 fc	 mov	 DWORD PTR _z$1$[ebp], eax
  001a8	c1 e0 04	 shl	 eax, 4
  001ab	03 c3		 add	 eax, ebx
  001ad	c1 e9 05	 shr	 ecx, 5
  001b0	03 cf		 add	 ecx, edi
  001b2	33 c8		 xor	 ecx, eax
  001b4	8b 45 fc	 mov	 eax, DWORD PTR _z$1$[ebp]
  001b7	03 c6		 add	 eax, esi
  001b9	33 c8		 xor	 ecx, eax
  001bb	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  001be	03 c1		 add	 eax, ecx
  001c0	8b c8		 mov	 ecx, eax
  001c2	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  001c5	c1 e9 05	 shr	 ecx, 5
  001c8	03 4d f0	 add	 ecx, DWORD PTR tv375[ebp]
  001cb	c1 e0 04	 shl	 eax, 4
  001ce	03 45 f4	 add	 eax, DWORD PTR tv376[ebp]
  001d1	33 c8		 xor	 ecx, eax
  001d3	8b 45 f8	 mov	 eax, DWORD PTR _y$1$[ebp]
  001d6	03 c6		 add	 eax, esi
  001d8	03 f2		 add	 esi, edx
  001da	33 c8		 xor	 ecx, eax
  001dc	01 4d fc	 add	 DWORD PTR _z$1$[ebp], ecx
  001df	8b 55 fc	 mov	 edx, DWORD PTR _z$1$[ebp]
  001e2	8b ca		 mov	 ecx, edx
  001e4	c1 e9 05	 shr	 ecx, 5
  001e7	8b c2		 mov	 eax, edx
  001e9	c1 e0 04	 shl	 eax, 4
  001ec	03 cf		 add	 ecx, edi
  001ee	03 c3		 add	 eax, ebx
  001f0	8b 5d f8	 mov	 ebx, DWORD PTR _y$1$[ebp]
  001f3	33 c8		 xor	 ecx, eax
  001f5	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  001f8	33 c8		 xor	 ecx, eax
  001fa	03 d9		 add	 ebx, ecx
  001fc	8b cb		 mov	 ecx, ebx
  001fe	8b c3		 mov	 eax, ebx
  00200	c1 e0 04	 shl	 eax, 4
  00203	03 45 f4	 add	 eax, DWORD PTR tv376[ebp]
  00206	c1 e9 05	 shr	 ecx, 5
  00209	03 4d f0	 add	 ecx, DWORD PTR tv375[ebp]
  0020c	33 c8		 xor	 ecx, eax
  0020e	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00211	33 c8		 xor	 ecx, eax

; 1018 : 	}
; 1019 : 
; 1020 : 	*firstChunk = y;

  00213	8b 45 08	 mov	 eax, DWORD PTR _firstChunk$[ebp]

; 1021 : 	*secondChunk = z;

  00216	5f		 pop	 edi
  00217	03 d1		 add	 edx, ecx
  00219	5e		 pop	 esi
  0021a	89 18		 mov	 DWORD PTR [eax], ebx
  0021c	8b 45 0c	 mov	 eax, DWORD PTR _secondChunk$[ebp]
  0021f	5b		 pop	 ebx
  00220	89 10		 mov	 DWORD PTR [eax], edx

; 1022 : }

  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c3		 ret	 0
?EncryptTEA@@YAXPAI00I@Z ENDP				; EncryptTEA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?Test@@YAXXZ
_TEXT	SEGMENT
?Test@@YAXXZ PROC					; Test, COMDAT

; 837  : 	extern ACTION *pActMenuWnd;
; 838  : 	DeathAction(pActMenuWnd);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  00006	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0000b	83 c4 04	 add	 esp, 4

; 839  : 	pActMenuWnd = NULL;

  0000e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 840  : }

  00018	c3		 ret	 0
?Test@@YAXXZ ENDP					; Test
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_???êÈ@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_a0$ = 8						; size = 4
?JL_???êÈ@@YAXPAUaction@@@Z PROC			; JL_???êÈ, COMDAT

; 748  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 749  : 	static int times = 0;
; 750  : 	if (gå¡æ¡£å¤ä½){

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g???êÈ@@3HA, 0 ; g???êÈ
  0000a	74 2d		 je	 SHORT $LN3@JL_

; 751  : 		ATR_VCT_NO(a0) = 4;   //

  0000c	8b 45 08	 mov	 eax, DWORD PTR _a0$[ebp]
  0000f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00012	c6 00 04	 mov	 BYTE PTR [eax], 4

; 752  : 
; 753  : 	//	ATR_VCT_NO(a0) = 0; // [ëê¸°]
; 754  : 		//ATR_BODY_WORK(0, a0) = NULL;	// [ì ë¦¬]
; 755  : 		//ATR_BODY_CNT(a0) = 1;
; 756  : 		//((ATR_EQU *)a0->pYobi)->vct_no = 0; //[ê°ì  ë¦¬ì ì¤í ê°ë¥í¨]
; 757  : 		times++;

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?times@?1??JL_???êÈ@@YAXPAUaction@@@Z@4HA
  0001a	40		 inc	 eax
  0001b	a3 00 00 00 00	 mov	 DWORD PTR ?times@?1??JL_???êÈ@@YAXPAUaction@@@Z@4HA, eax
  00020	83 f8 14	 cmp	 eax, 20			; 00000014H

; 758  : 		if (times >= 20){

  00023	7c 14		 jl	 SHORT $LN3@JL_

; 759  : 			times = 0;

  00025	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?times@?1??JL_???êÈ@@YAXPAUaction@@@Z@4HA, 0

; 760  : 			gå¡æ¡£å¤ä½ = 0;

  0002f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g???êÈ@@3HA, 0 ; g???êÈ
$LN3@JL_:

; 761  : 		}
; 762  : 	}
; 763  : 
; 764  : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?JL_???êÈ@@YAXPAUaction@@@Z ENDP			; JL_???êÈ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL???ëå@@YAXH@Z
_TEXT	SEGMENT
_b??$ = 8						; size = 4
?JL???ëå@@YAXH@Z PROC					; JL???ëå, COMDAT

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 733  : 	if (bå³é­){
; 734  : 		dsound_flg = -1;
; 735  : 	}else{
; 736  : 		dsound_flg = 0;
; 737  : 	}
; 738  : }

  00003	8b 45 08	 mov	 eax, DWORD PTR _b??$[ebp]
  00006	f7 d8		 neg	 eax
  00008	1b c0		 sbb	 eax, eax
  0000a	a3 00 00 00 00	 mov	 DWORD PTR ?dsound_flg@@3HA, eax ; dsound_flg
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?JL???ëå@@YAXH@Z ENDP					; JL???ëå
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?NB???ëå@@YAXH@Z
_TEXT	SEGMENT
_b??$ = 8						; size = 4
?NB???ëå@@YAXH@Z PROC					; NB???ëå, COMDAT

; 722  : 	if (å£°é³å¼å³){						//[ìë¦¬ on/off]

  00000	33 c0		 xor	 eax, eax
  00002	39 05 00 00 00
	00		 cmp	 DWORD PTR ??ëå??@@3HA, eax ; ?ëå??
  00008	0f 94 c0	 sete	 al

; 723  : 		å£°é³å¼å³ = FALSE;				//[ìë¦¬ on/off]
; 724  : 	}else{
; 725  : 		å£°é³å¼å³ = TRUE;				//[ìë¦¬ on/off]
; 726  : 	}
; 727  : 	//printf("%d\n",g_å±è½å£°é³);		//[ëª©ìë¦¬ ì°¨ë¨]
; 728  : }

  0000b	a3 00 00 00 00	 mov	 DWORD PTR ??ëå??@@3HA, eax ; ?ëå??
  00010	c3		 ret	 0
?NB???ëå@@YAXH@Z ENDP					; NB???ëå
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_?ð¶ñ²?ìÑÚª@@YAXXZ
_TEXT	SEGMENT
?JL_?ð¶ñ²?ìÑÚª@@YAXXZ PROC				; JL_?ð¶ñ²?ìÑÚª, COMDAT

; 709  : //	resetPc();				// PC????
; 710  : 	resetCharObj();			// ?????????????

  00000	e8 00 00 00 00	 call	 ?resetCharObj@@YAXXZ	; resetCharObj

; 711  : 	resetMap();				// ?????????

  00005	e8 00 00 00 00	 call	 ?resetMap@@YAXXZ	; resetMap

; 712  : 	clearPtActPartyParam();	// ??îºî«?????????????NULL???}

  0000a	e9 00 00 00 00	 jmp	 ?clearPtActPartyParam@@YAXXZ ; clearPtActPartyParam
?JL_?ð¶ñ²?ìÑÚª@@YAXXZ ENDP				; JL_?ð¶ñ²?ìÑÚª
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_ê«ÔôÖõ@@YAXXZ
_TEXT	SEGMENT
?JL_ê«ÔôÖõ@@YAXXZ PROC					; JL_ê«ÔôÖõ, COMDAT

; 701  : 	//PostThreadMessageA(g_WgThreadID, WM_USER + 6, g_playerAddr, 0);
; 702  : }

  00000	c2 00 00	 ret	 0
?JL_ê«ÔôÖõ@@YAXXZ ENDP					; JL_ê«ÔôÖõ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_??Öõ@@YAXXZ
_TEXT	SEGMENT
?JL_??Öõ@@YAXXZ PROC					; JL_??Öõ, COMDAT

; 696  : 	PostThreadMessageA(g_WgThreadID, WM_USER + 5, g_playerAddr,0 );

  00000	6a 00		 push	 0
  00002	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_playerAddr@@3HA ; g_playerAddr
  00008	68 05 04 00 00	 push	 1029			; 00000405H
  0000d	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_WgThreadID@@3HA ; g_WgThreadID
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16

; 697  : }

  00019	c3		 ret	 0
?JL_??Öõ@@YAXXZ ENDP					; JL_??Öõ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ???@@YAXXZ
_TEXT	SEGMENT
???@@YAXXZ PROC						; ??, COMDAT

; 690  : 	ProcNo = 11;

  00000	c7 05 00 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?ProcNo@@3IA, 11 ; ProcNo, 0000000bH

; 691  : 	SubProcNo = 0;

  0000a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, 0 ; SubProcNo

; 692  : }

  00014	c3		 ret	 0
???@@YAXXZ ENDP						; ??
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT ??$sprintf_s@$0MI@@@YAHAAY0MI@DPBDZZ
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0MI@@@YAHAAY0MI@DPBDZZ PROC		; sprintf_s<200>, COMDAT

; 1858 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	68 c8 00 00 00	 push	 200			; 000000c8H
  00011	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1503 :     }
; 1504 :     #endif
; 1505 : 
; 1506 :     #if __STDC_WANT_SECURE_LIB__
; 1507 : 
; 1508 :         _Success_(return >= 0)
; 1509 :         _Check_return_opt_
; 1510 :         _CRT_STDIO_INLINE int __CRTDECL vsprintf_s(
; 1511 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1512 :             _In_                                          size_t      const _BufferCount,
; 1513 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1514 :                                                           va_list           _ArgList
; 1515 :             )
; 1516 :     #if defined _NO_CRT_STDIO_INLINE
; 1517 :     ;
; 1518 :     #else
; 1519 :         {
; 1520 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1521 :         }
; 1522 :     #endif
; 1523 : 
; 1524 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(
; 1525 :             _Success_(return >= 0)
; 1526 :             int, vsprintf_s,
; 1527 :             _Always_(_Post_z_)            char,        _Buffer,
; 1528 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1529 :                                           va_list,     _ArgList
; 1530 :             )
; 1531 : 
; 1532 :     #endif
; 1533 : 
; 1534 :     _Success_(return >= 0)
; 1535 :     _Check_return_opt_
; 1536 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p_l(
; 1537 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1538 :         _In_                                          size_t      const _BufferCount,
; 1539 :         _In_z_ _Printf_format_string_params_(2)       char const* const _Format,
; 1540 :         _In_opt_                                      _locale_t   const _Locale,
; 1541 :                                                       va_list           _ArgList
; 1542 :         )
; 1543 :     #if defined _NO_CRT_STDIO_INLINE
; 1544 :     ;
; 1545 :     #else
; 1546 :     {
; 1547 :         int const _Result = __stdio_common_vsprintf_p(
; 1548 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1549 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1550 : 
; 1551 :         return _Result < 0 ? -1 : _Result;
; 1552 :     }
; 1553 :     #endif
; 1554 : 
; 1555 :     _Success_(return >= 0)
; 1556 :     _Check_return_opt_
; 1557 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p(
; 1558 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1559 :         _In_                                          size_t      const _BufferCount,
; 1560 :         _In_z_ _Printf_format_string_                 char const* const _Format,
; 1561 :                                                       va_list           _ArgList
; 1562 :         )
; 1563 :     #if defined _NO_CRT_STDIO_INLINE
; 1564 :     ;
; 1565 :     #else
; 1566 :     {
; 1567 :         return _vsprintf_p_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1568 :     }
; 1569 :     #endif
; 1570 : 
; 1571 :     _Success_(return >= 0)
; 1572 :     _Check_return_opt_
; 1573 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s_l(
; 1574 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1575 :         _In_                                              size_t      const _BufferCount,
; 1576 :         _In_                                              size_t      const _MaxCount,
; 1577 :         _In_z_ _Printf_format_string_params_(2)           char const* const _Format,
; 1578 :         _In_opt_                                          _locale_t   const _Locale,
; 1579 :                                                           va_list          _ArgList
; 1580 :         )
; 1581 :     #if defined _NO_CRT_STDIO_INLINE
; 1582 :     ;
; 1583 :     #else
; 1584 :     {
; 1585 :         int const _Result = __stdio_common_vsnprintf_s(
; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;
; 1590 :     }
; 1591 :     #endif
; 1592 : 
; 1593 :     _Success_(return >= 0)
; 1594 :     _Check_return_opt_
; 1595 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s(
; 1596 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1597 :         _In_                                              size_t      const _BufferCount,
; 1598 :         _In_                                              size_t      const _MaxCount,
; 1599 :         _In_z_ _Printf_format_string_                     char const* const _Format,
; 1600 :                                                           va_list           _ArgList
; 1601 :         )
; 1602 :     #if defined _NO_CRT_STDIO_INLINE
; 1603 :     ;
; 1604 :     #else
; 1605 :     {
; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1607 :     }
; 1608 :     #endif
; 1609 : 
; 1610 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1611 :         _Success_(return >= 0)
; 1612 :         int, _vsnprintf_s,
; 1613 :         _Always_(_Post_z_)            char,        _Buffer,
; 1614 :         _In_                          size_t,      _BufferCount,
; 1615 :         _In_z_ _Printf_format_string_ char const*, _Format,
; 1616 :                                       va_list,     _ArgList
; 1617 :         )
; 1618 : 
; 1619 :     #if __STDC_WANT_SECURE_LIB__
; 1620 : 
; 1621 :         _Success_(return >= 0)
; 1622 :         _Check_return_opt_
; 1623 :         _CRT_STDIO_INLINE int __CRTDECL vsnprintf_s(
; 1624 :             _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1625 :             _In_                                              size_t      const _BufferCount,
; 1626 :             _In_                                              size_t      const _MaxCount,
; 1627 :             _In_z_ _Printf_format_string_                     char const* const _Format,
; 1628 :                                                               va_list           _ArgList
; 1629 :             )
; 1630 :     #if defined _NO_CRT_STDIO_INLINE
; 1631 :     ;
; 1632 :     #else
; 1633 :         {
; 1634 :             return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1635 :         }
; 1636 :     #endif
; 1637 : 
; 1638 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1639 :             _Success_(return >= 0)
; 1640 :             int, vsnprintf_s,
; 1641 :             _Always_(_Post_z_)            char,        _Buffer,
; 1642 :             _In_                          size_t,      _BufferCount,
; 1643 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1644 :                                           va_list,     _ArgList
; 1645 :             )
; 1646 : 
; 1647 :     #endif
; 1648 : 
; 1649 :     _Check_return_opt_
; 1650 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_l(
; 1651 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1652 :         _In_opt_                                _locale_t   const _Locale,
; 1653 :                                                 va_list           _ArgList
; 1654 :         )
; 1655 :     #if defined _NO_CRT_STDIO_INLINE
; 1656 :     ;
; 1657 :     #else
; 1658 :     {
; 1659 :         int const _Result = __stdio_common_vsprintf(
; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;
; 1664 :     }
; 1665 :     #endif
; 1666 : 
; 1667 :     _Check_return_
; 1668 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf(
; 1669 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1670 :                                       va_list           _ArgList
; 1671 :         )
; 1672 :     #if defined _NO_CRT_STDIO_INLINE
; 1673 :     ;
; 1674 :     #else
; 1675 :     {
; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);
; 1677 :     }
; 1678 :     #endif
; 1679 : 
; 1680 :     _Check_return_opt_
; 1681 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p_l(
; 1682 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1683 :         _In_opt_                                _locale_t   const _Locale,
; 1684 :                                                 va_list           _ArgList
; 1685 :         )
; 1686 :     #if defined _NO_CRT_STDIO_INLINE
; 1687 :     ;
; 1688 :     #else
; 1689 :     {
; 1690 :         int const _Result = __stdio_common_vsprintf_p(
; 1691 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1692 :             NULL, 0, _Format, _Locale, _ArgList);
; 1693 : 
; 1694 :         return _Result < 0 ? -1 : _Result;
; 1695 :     }
; 1696 :     #endif
; 1697 : 
; 1698 :     _Check_return_
; 1699 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p(
; 1700 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1701 :                                       va_list           _ArgList
; 1702 :         )
; 1703 :     #if defined _NO_CRT_STDIO_INLINE
; 1704 :     ;
; 1705 :     #else
; 1706 :     {
; 1707 :         return _vscprintf_p_l(_Format, NULL, _ArgList);
; 1708 :     }
; 1709 :     #endif
; 1710 : 
; 1711 :     _Check_return_opt_
; 1712 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c_l(
; 1713 :         _Out_writes_opt_(_BufferCount)          char*       const _Buffer,
; 1714 :         _In_                                    size_t      const _BufferCount,
; 1715 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1716 :         _In_opt_                                _locale_t   const _Locale,
; 1717 :                                                 va_list           _ArgList
; 1718 :         )
; 1719 :     #if defined _NO_CRT_STDIO_INLINE
; 1720 :     ;
; 1721 :     #else
; 1722 :     {
; 1723 :         int const _Result = __stdio_common_vsprintf(
; 1724 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1725 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1726 : 
; 1727 :         return _Result < 0 ? -1 : _Result;
; 1728 :     }
; 1729 :     #endif
; 1730 : 
; 1731 :     _Success_(return >= 0)
; 1732 :     _Check_return_opt_
; 1733 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c(
; 1734 :         _Out_writes_opt_(_BufferCount) char*       const _Buffer,
; 1735 :         _In_                           size_t      const _BufferCount,
; 1736 :         _In_z_ _Printf_format_string_  char const* const _Format,
; 1737 :                                        va_list           _ArgList
; 1738 :         )
; 1739 :     #if defined _NO_CRT_STDIO_INLINE
; 1740 :     ;
; 1741 :     #else
; 1742 :     {
; 1743 :         return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1744 :     }
; 1745 :     #endif
; 1746 : 
; 1747 :     _Success_(return >= 0)
; 1748 :     _Check_return_opt_ _CRT_INSECURE_DEPRECATE(_sprintf_s_l)
; 1749 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_l(
; 1750 :         _Pre_notnull_ _Always_(_Post_z_)        char*       const _Buffer,
; 1751 :         _In_z_ _Printf_format_string_params_(0) char const* const _Format,
; 1752 :         _In_opt_                                _locale_t   const _Locale,
; 1753 :         ...)
; 1754 :     #if defined _NO_CRT_STDIO_INLINE
; 1755 :     ;
; 1756 :     #else
; 1757 :     {
; 1758 :         int _Result;
; 1759 :         va_list _ArgList;
; 1760 :         __crt_va_start(_ArgList, _Locale);
; 1761 : 
; 1762 :         #pragma warning(push)
; 1763 :         #pragma warning(disable: 4996) // Deprecation
; 1764 :         _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
; 1765 :         #pragma warning(pop)
; 1766 : 
; 1767 :         __crt_va_end(_ArgList);
; 1768 :         return _Result;
; 1769 :     }
; 1770 :     #endif
; 1771 : 
; 1772 :     _Success_(return >= 0)
; 1773 :     _Check_return_opt_
; 1774 :     _CRT_STDIO_INLINE int __CRTDECL sprintf(
; 1775 :         _Pre_notnull_ _Always_(_Post_z_) char*       const _Buffer,
; 1776 :         _In_z_ _Printf_format_string_    char const* const _Format,
; 1777 :         ...)
; 1778 :     #if defined _NO_CRT_STDIO_INLINE
; 1779 :     ;
; 1780 :     #else
; 1781 :     {
; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }
; 1794 :     #endif
; 1795 : 
; 1796 :     #pragma warning(push)
; 1797 :     #pragma warning(disable: 4996)
; 1798 :     #pragma warning(disable: 28719) // __WARNING_BANNED_API_USAGE
; 1799 :     #pragma warning(disable: 28726) // __WARNING_BANNED_API_USAGEL2
; 1800 :     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(
; 1801 :         _Success_(return >= 0)
; 1802 :         int, __RETURN_POLICY_SAME, __EMPTY_DECLSPEC, __CRTDECL, sprintf, vsprintf,
; 1803 :         _Pre_notnull_ _Always_(_Post_z_), char,        _Buffer,
; 1804 :         _In_z_ _Printf_format_string_     char const*, _Format
; 1805 :         )
; 1806 :     #pragma warning(pop)
; 1807 : 
; 1808 :     _Success_(return >= 0)
; 1809 :     _Check_return_opt_
; 1810 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_s_l(
; 1811 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1812 :         _In_                                          size_t      const _BufferCount,
; 1813 :         _In_z_ _Printf_format_string_params_(0)       char const* const _Format,
; 1814 :         _In_opt_                                      _locale_t   const _Locale,
; 1815 :         ...)
; 1816 :     #if defined _NO_CRT_STDIO_INLINE
; 1817 :     ;
; 1818 :     #else
; 1819 :     {
; 1820 :         int _Result;
; 1821 :         va_list _ArgList;
; 1822 :         __crt_va_start(_ArgList, _Locale);
; 1823 :         _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1824 :         __crt_va_end(_ArgList);
; 1825 :         return _Result;
; 1826 :     }
; 1827 :     #endif
; 1828 : 
; 1829 :     #if __STDC_WANT_SECURE_LIB__
; 1830 : 
; 1831 :         _Success_(return >= 0)
; 1832 :         _Check_return_opt_
; 1833 :         _CRT_STDIO_INLINE int __CRTDECL sprintf_s(
; 1834 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1835 :             _In_                                          size_t      const _BufferCount,
; 1836 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1837 :             ...)
; 1838 :     #if defined _NO_CRT_STDIO_INLINE
; 1839 :     ;
; 1840 :     #else
; 1841 :         {
; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);
; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1846 :             __crt_va_end(_ArgList);
; 1847 :             return _Result;
; 1848 :         }
; 1849 :     #endif
; 1850 : 
; 1851 :     #endif
; 1852 : 
; 1853 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$sprintf_s@$0MI@@@YAHAAY0MI@DPBDZZ ENDP		; sprintf_s<200>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_ShowTitle@@YAXPADHHHHH@Z
_TEXT	SEGMENT
_Ûå?$1 = -1228						; size = 1024
_title$2 = -204						; size = 200
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_lv$ = 12						; size = 4
_hp$ = 16						; size = 4
_maxhp$ = 20						; size = 4
_mp$ = 24						; size = 4
_maxmp$ = 28						; size = 4
?JL_ShowTitle@@YAXPADHHHHH@Z PROC			; JL_ShowTitle, COMDAT

; 661  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 04 00
	00		 sub	 esp, 1228		; 000004ccH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 662  : 	extern struct gameserver gmsv[150];
; 663  : 	extern short selectServerIndex;
; 664  : 
; 665  : 	extern HWND hWnd;
; 666  : 	char buf[200];
; 667  : 	if (ProcNo == 9 || ProcNo == 10){

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ProcNo@@3IA ; ProcNo
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  0001b	83 f8 09	 cmp	 eax, 9
  0001e	74 09		 je	 SHORT $LN3@JL_ShowTit
  00020	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00023	0f 85 cc 00 00
	00		 jne	 $LN6@JL_ShowTit
$LN3@JL_ShowTit:

; 668  : 		char title[200];
; 669  : 		extern int nServerGroup;
; 670  : 		sprintf_s( title, "StoneAge[%s] - %s Lv:%d HP:%d/%d MP:%d/%d", gmsv[selectServerIndex].name, name, lv, hp, maxhp, mp, maxmp);	//í´ë¼ì´ì¸í¸ ì´ë¦.

  00029	ff 75 1c	 push	 DWORD PTR _maxmp$[ebp]
  0002c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?selectServerIndex@@3FA ; selectServerIndex
  00033	ff 75 18	 push	 DWORD PTR _mp$[ebp]
  00036	c1 e0 08	 shl	 eax, 8
  00039	ff 75 14	 push	 DWORD PTR _maxhp$[ebp]
  0003c	05 c0 00 00 00	 add	 eax, OFFSET ?gmsv@@3PAUgameserver@@A+192
  00041	ff 75 10	 push	 DWORD PTR _hp$[ebp]
  00044	ff 75 0c	 push	 DWORD PTR _lv$[ebp]
  00047	51		 push	 ecx
  00048	50		 push	 eax
  00049	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _title$2[ebp]
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BNLLFNFE@StoneAge?$FL?$CFs?$FN?5?9?5?$CFs?5Lv?3?$CFd?5HP?3?$CFd?1?$CF@
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$sprintf_s@$0MI@@@YAHAAY0MI@DPBDZZ ; sprintf_s<200>
  0005a	83 c4 24	 add	 esp, 36			; 00000024H

; 671  : 		extern int ç¹ä½å¼å³;			//[íì ë²ì²´ì on/off]
; 672  : 		if(ç¹ä½å¼å³){					//[íì ë²ì²´ì on/off]

  0005d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Ûå???@@3HA, 0 ; Ûå???
  00064	74 67		 je	 SHORT $LN4@JL_ShowTit

; 673  : 			char ç¹ä½[1024]={0};		//[ë²ì²´]

  00066	68 00 04 00 00	 push	 1024			; 00000400H
  0006b	8d 85 34 fb ff
	ff		 lea	 eax, DWORD PTR _Ûå?$1[ebp]
  00071	6a 00		 push	 0
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _memset

; 674  : 			LCMapString (0x804,0x4000000,title, strlen(title),ç¹ä½,1024);		//[ë²ì²´]

  00079	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _title$2[ebp]
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL8@JL_ShowTit:
  00085	8a 01		 mov	 al, BYTE PTR [ecx]
  00087	41		 inc	 ecx
  00088	84 c0		 test	 al, al
  0008a	75 f9		 jne	 SHORT $LL8@JL_ShowTit
  0008c	68 00 04 00 00	 push	 1024			; 00000400H
  00091	8d 85 34 fb ff
	ff		 lea	 eax, DWORD PTR _Ûå?$1[ebp]
  00097	2b ca		 sub	 ecx, edx
  00099	50		 push	 eax
  0009a	51		 push	 ecx
  0009b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _title$2[ebp]
  000a1	50		 push	 eax
  000a2	68 00 00 00 04	 push	 67108864		; 04000000H
  000a7	68 04 08 00 00	 push	 2052			; 00000804H
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LCMapStringA@24

; 675  : 			sprintf(title,"%s",ç¹ä½);	//[ë²ì²´]

  000b2	8d 85 34 fb ff
	ff		 lea	 eax, DWORD PTR _Ûå?$1[ebp]
  000b8	50		 push	 eax
  000b9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _title$2[ebp]
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _sprintf
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@JL_ShowTit:

; 676  : 		}
; 677  : 
; 678  : 		extern int ç¼ç ;		//[ì½ë/ì½ë©]
; 679  : 		extern char* GB2312ToBIG5(const char* szGBString);
; 680  : 		if(ç¼ç ==950){

  000cd	81 3d 00 00 00
	00 b6 03 00 00	 cmp	 DWORD PTR ???@@3HA, 950	; ??, 000003b6H
  000d7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _title$2[ebp]
  000dd	50		 push	 eax
  000de	75 09		 jne	 SHORT $LN5@JL_ShowTit

; 681  : 			SetWindowText( hWnd, GB2312ToBIG5((const char *)title));

  000e0	e8 00 00 00 00	 call	 ?GB2312ToBIG5@@YAPADPBD@Z ; GB2312ToBIG5
  000e5	83 c4 04	 add	 esp, 4
  000e8	50		 push	 eax
$LN5@JL_ShowTit:

; 682  : 		}else{
; 683  : 			SetWindowText(hWnd,title);
; 684  : 		}
; 685  : 	}
; 686  : }

  000e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN6@JL_ShowTit:
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
?JL_ShowTitle@@YAXPADHHHHH@Z ENDP			; JL_ShowTitle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_RESOMODE@@YAXH@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?JL_RESOMODE@@YAXH@Z PROC				; JL_RESOMODE, COMDAT

; 614  : {/*

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 615  : 	if (mode == 0)
; 616  : 	{
; 617  : 		DEF_APPSIZEX = 640;
; 618  : 		DEF_APPSIZEY = 480;
; 619  : 		DISPLACEMENT_X = 0;
; 620  : 		DISPLACEMENT_Y = 0;
; 621  : 		SCREEN_WIDTH_CENTER = DEF_APPSIZEX / 2;
; 622  : 		SCREEN_HEIGHT_CENTER = DEF_APPSIZEY / 2;
; 623  : 		viewOffsetX = SCREEN_WIDTH_CENTER;
; 624  : 		viewOffsetY = SCREEN_HEIGHT_CENTER;
; 625  : 		BRAN_SIZE_X = 20;
; 626  : 		BRAN_SIZE_Y = 16;
; 627  : 		ResoMode = 0;
; 628  : 		MyChatBuffer.y = 480 - 48;
; 629  : 	}else if (mode == 4){
; 630  : 		DEF_APPSIZEX = 1024;
; 631  : 		DEF_APPSIZEY = 768;
; 632  : 		DISPLACEMENT_X = 384;
; 633  : 		DISPLACEMENT_Y = 288;
; 634  : 		SCREEN_WIDTH_CENTER = DEF_APPSIZEX / 2;
; 635  : 		SCREEN_HEIGHT_CENTER = DEF_APPSIZEY / 2;
; 636  : 		viewOffsetX = SCREEN_WIDTH_CENTER;
; 637  : 		viewOffsetY = SCREEN_HEIGHT_CENTER;
; 638  : 		BRAN_SIZE_X = 32;
; 639  : 		BRAN_SIZE_Y = 16;
; 640  : 		ResoMode = 4;
; 641  : 		MyChatBuffer.y = 768 - 48;
; 642  : 	}else */if (mode == 3){

  00003	83 7d 08 03	 cmp	 DWORD PTR _mode$[ebp], 3
  00007	75 78		 jne	 SHORT $LN2@JL_RESOMOD

; 643  : 		DEF_APPSIZEX = 800;

  00009	c7 05 00 00 00
	00 20 03 00 00	 mov	 DWORD PTR ?DEF_APPSIZEX@@3HA, 800 ; DEF_APPSIZEX, 00000320H

; 644  : 		DEF_APPSIZEY = 600;

  00013	c7 05 00 00 00
	00 58 02 00 00	 mov	 DWORD PTR ?DEF_APPSIZEY@@3HA, 600 ; DEF_APPSIZEY, 00000258H

; 645  : 		DISPLACEMENT_X = 160;

  0001d	c7 05 00 00 00
	00 a0 00 00 00	 mov	 DWORD PTR ?DISPLACEMENT_X@@3HA, 160 ; DISPLACEMENT_X, 000000a0H

; 646  : 		DISPLACEMENT_Y = 120;

  00027	c7 05 00 00 00
	00 78 00 00 00	 mov	 DWORD PTR ?DISPLACEMENT_Y@@3HA, 120 ; DISPLACEMENT_Y, 00000078H

; 647  : 		SCREEN_WIDTH_CENTER = DEF_APPSIZEX / 2;

  00031	c7 05 00 00 00
	00 90 01 00 00	 mov	 DWORD PTR ?SCREEN_WIDTH_CENTER@@3HA, 400 ; SCREEN_WIDTH_CENTER, 00000190H

; 648  : 		SCREEN_HEIGHT_CENTER = DEF_APPSIZEY / 2;

  0003b	c7 05 00 00 00
	00 2c 01 00 00	 mov	 DWORD PTR ?SCREEN_HEIGHT_CENTER@@3HA, 300 ; SCREEN_HEIGHT_CENTER, 0000012cH

; 649  : 		viewOffsetX = SCREEN_WIDTH_CENTER;

  00045	c7 05 00 00 00
	00 90 01 00 00	 mov	 DWORD PTR ?viewOffsetX@@3HA, 400 ; viewOffsetX, 00000190H

; 650  : 		viewOffsetY = SCREEN_HEIGHT_CENTER;

  0004f	c7 05 00 00 00
	00 2c 01 00 00	 mov	 DWORD PTR ?viewOffsetY@@3HA, 300 ; viewOffsetY, 0000012cH

; 651  : 		BRAN_SIZE_X = 20;

  00059	c7 05 00 00 00
	00 14 00 00 00	 mov	 DWORD PTR ?BRAN_SIZE_X@@3HA, 20 ; BRAN_SIZE_X, 00000014H

; 652  : 		BRAN_SIZE_Y = 15;

  00063	c7 05 00 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?BRAN_SIZE_Y@@3HA, 15 ; BRAN_SIZE_Y, 0000000fH

; 653  : 		ResoMode = 3;

  0006d	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?ResoMode@@3HA, 3 ; ResoMode

; 654  : 		MyChatBuffer.y = 600 - 48;

  00077	c7 05 10 01 00
	00 28 02 00 00	 mov	 DWORD PTR ?MyChatBuffer@@3USTR_BUFFER@@A+272, 552 ; 00000228H
$LN2@JL_RESOMOD:

; 655  : 	}
; 656  : 	//extern void initInputIdPassword( void );
; 657  : 	//initInputIdPassword();
; 658  : }

  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?JL_RESOMODE@@YAXH@Z ENDP				; JL_RESOMODE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ??__EviewOffsetY@@YAXXZ
text$di	SEGMENT
??__EviewOffsetY@@YAXXZ PROC				; `dynamic initializer for 'viewOffsetY'', COMDAT

; 587  : int viewOffsetY = SCREEN_HEIGHT_CENTER;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SCREEN_HEIGHT_CENTER@@3HA ; SCREEN_HEIGHT_CENTER
  00005	a3 00 00 00 00	 mov	 DWORD PTR ?viewOffsetY@@3HA, eax ; viewOffsetY
  0000a	c3		 ret	 0
??__EviewOffsetY@@YAXXZ ENDP				; `dynamic initializer for 'viewOffsetY''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ??__EviewOffsetX@@YAXXZ
text$di	SEGMENT
??__EviewOffsetX@@YAXXZ PROC				; `dynamic initializer for 'viewOffsetX'', COMDAT

; 586  : int viewOffsetX = SCREEN_WIDTH_CENTER;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SCREEN_WIDTH_CENTER@@3HA ; SCREEN_WIDTH_CENTER
  00005	a3 00 00 00 00	 mov	 DWORD PTR ?viewOffsetX@@3HA, eax ; viewOffsetX
  0000a	c3		 ret	 0
??__EviewOffsetX@@YAXXZ ENDP				; `dynamic initializer for 'viewOffsetX''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ??__ESCREEN_HEIGHT_CENTER@@YAXXZ
text$di	SEGMENT
??__ESCREEN_HEIGHT_CENTER@@YAXXZ PROC			; `dynamic initializer for 'SCREEN_HEIGHT_CENTER'', COMDAT

; 585  : int SCREEN_HEIGHT_CENTER = DEF_APPSIZEY / 2;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEY@@3HA ; DEF_APPSIZEY
  00005	99		 cdq
  00006	2b c2		 sub	 eax, edx
  00008	d1 f8		 sar	 eax, 1
  0000a	a3 00 00 00 00	 mov	 DWORD PTR ?SCREEN_HEIGHT_CENTER@@3HA, eax ; SCREEN_HEIGHT_CENTER
  0000f	c3		 ret	 0
??__ESCREEN_HEIGHT_CENTER@@YAXXZ ENDP			; `dynamic initializer for 'SCREEN_HEIGHT_CENTER''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ??__ESCREEN_WIDTH_CENTER@@YAXXZ
text$di	SEGMENT
??__ESCREEN_WIDTH_CENTER@@YAXXZ PROC			; `dynamic initializer for 'SCREEN_WIDTH_CENTER'', COMDAT

; 584  : int SCREEN_WIDTH_CENTER = DEF_APPSIZEX / 2;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DEF_APPSIZEX@@3HA ; DEF_APPSIZEX
  00005	99		 cdq
  00006	2b c2		 sub	 eax, edx
  00008	d1 f8		 sar	 eax, 1
  0000a	a3 00 00 00 00	 mov	 DWORD PTR ?SCREEN_WIDTH_CENTER@@3HA, eax ; SCREEN_WIDTH_CENTER
  0000f	c3		 ret	 0
??__ESCREEN_WIDTH_CENTER@@YAXXZ ENDP			; `dynamic initializer for 'SCREEN_WIDTH_CENTER''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_Get_UsernameAndPassword@@YAXPAD0@Z
_TEXT	SEGMENT
_username$ = 8						; size = 4
_password$ = 12						; size = 4
?JL_Get_UsernameAndPassword@@YAXPAD0@Z PROC		; JL_Get_UsernameAndPassword, COMDAT

; 561  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 562  : 
; 563  : 	PostThreadMessageA(g_WgThreadID, WM_USER + 3, g_playerAddr, (int)username);

  00003	ff 75 08	 push	 DWORD PTR _username$[ebp]
  00006	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_playerAddr@@3HA ; g_playerAddr
  0000c	68 03 04 00 00	 push	 1027			; 00000403H
  00011	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_WgThreadID@@3HA ; g_WgThreadID
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16

; 564  : 	PostThreadMessageA(g_WgThreadID, WM_USER + 4, g_playerAddr, (int)password);

  0001d	ff 75 0c	 push	 DWORD PTR _password$[ebp]
  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_playerAddr@@3HA ; g_playerAddr
  00026	68 04 04 00 00	 push	 1028			; 00000404H
  0002b	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_WgThreadID@@3HA ; g_WgThreadID
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16

; 565  : 
; 566  : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?JL_Get_UsernameAndPassword@@YAXPAD0@Z ENDP		; JL_Get_UsernameAndPassword
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_??ò¢?÷åüù@@YAXXZ
_TEXT	SEGMENT
?JL_??ò¢?÷åüù@@YAXXZ PROC				; JL_??ò¢?÷åüù, COMDAT

; 549  : 	SubProcNo = 3;

  00000	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, 3 ; SubProcNo

; 550  : }

  0000a	c3		 ret	 0
?JL_??ò¢?÷åüù@@YAXXZ ENDP				; JL_??ò¢?÷åüù
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_??í»?ïÃOK@@YAHXZ
_TEXT	SEGMENT
?JL_??í»?ïÃOK@@YAHXZ PROC				; JL_??í»?ïÃOK, COMDAT

; 436  : 
; 437  : 	if (g_flag_æ­çº¿éç»)	//[ë¡ê·¸ì¤í ì¬ ë¡ê·¸ì¸] )

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_flag_??ñìÔô@@3HA ; g_flag_??ñìÔô
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	48		 dec	 eax

; 438  : 	{
; 439  : 		return 0;
; 440  : 	}
; 441  : 
; 442  : 	return -1;
; 443  : }

  0000c	c3		 ret	 0
?JL_??í»?ïÃOK@@YAHXZ ENDP				; JL_??í»?ïÃOK
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?XSleep@@YAXH@Z
_TEXT	SEGMENT
_msg$ = -36						; size = 28
_sleep$ = -8						; size = 8
_threadId$ = 8						; size = 4
_nWaitInMSecs$ = 8					; size = 4
?XSleep@@YAXH@Z PROC					; XSleep, COMDAT

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 415  : 	XSleep_Structure sleep;
; 416  : 	sleep.time = nWaitInMSecs;

  00006	8b 45 08	 mov	 eax, DWORD PTR _nWaitInMSecs$[ebp]
  00009	56		 push	 esi

; 417  : 	sleep.eventHandle = CreateEvent(0, 1, 0, 0);

  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 01		 push	 1
  00010	6a 00		 push	 0
  00012	89 45 f8	 mov	 DWORD PTR _sleep$[ebp], eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  0001b	89 45 fc	 mov	 DWORD PTR _sleep$[ebp+4], eax

; 418  : 	DWORD threadId;
; 419  : 	CreateThread(0, 0, &XSleepThread, &sleep, 0, &threadId);

  0001e	8d 45 08	 lea	 eax, DWORD PTR _threadId$[ebp]
  00021	50		 push	 eax
  00022	6a 00		 push	 0
  00024	8d 45 f8	 lea	 eax, DWORD PTR _sleep$[ebp]
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ?XSleepThread@@YGKPAX@Z ; XSleepThread
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24

; 420  : 	MSG msg;
; 421  : 
; 422  : 	while (::WaitForSingleObject(sleep.eventHandle, 0) == WAIT_TIMEOUT)

  00037	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__WaitForSingleObject@8
  0003d	6a 00		 push	 0
  0003f	ff 75 fc	 push	 DWORD PTR _sleep$[ebp+4]
  00042	ff d6		 call	 esi
  00044	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00049	75 47		 jne	 SHORT $LN3@XSleep
  0004b	53		 push	 ebx
  0004c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__TranslateMessage@4
  00052	57		 push	 edi
  00053	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__PeekMessageA@20
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@XSleep:

; 423  : 	{
; 424  : 
; 425  : 		if (!PeekMessage(&msg, 0, 0, 0, PM_REMOVE))

  00060	6a 01		 push	 1
  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	8d 45 dc	 lea	 eax, DWORD PTR _msg$[ebp]
  0006b	50		 push	 eax
  0006c	ff d7		 call	 edi
  0006e	85 c0		 test	 eax, eax
  00070	75 10		 jne	 SHORT $LN4@XSleep

; 426  : 		{
; 427  : 			TranslateMessage(&msg);

  00072	8d 45 dc	 lea	 eax, DWORD PTR _msg$[ebp]
  00075	50		 push	 eax
  00076	ff d3		 call	 ebx

; 428  : 			DispatchMessage(&msg);

  00078	8d 45 dc	 lea	 eax, DWORD PTR _msg$[ebp]
  0007b	50		 push	 eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DispatchMessageA@4
$LN4@XSleep:

; 420  : 	MSG msg;
; 421  : 
; 422  : 	while (::WaitForSingleObject(sleep.eventHandle, 0) == WAIT_TIMEOUT)

  00082	6a 00		 push	 0
  00084	ff 75 fc	 push	 DWORD PTR _sleep$[ebp+4]
  00087	ff d6		 call	 esi
  00089	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  0008e	74 d0		 je	 SHORT $LL2@XSleep
  00090	5f		 pop	 edi
  00091	5b		 pop	 ebx
$LN3@XSleep:
  00092	5e		 pop	 esi

; 429  : 		}
; 430  : 
; 431  : 	}
; 432  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?XSleep@@YAXH@Z ENDP					; XSleep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?XSleepThread@@YGKPAX@Z
_TEXT	SEGMENT
_pWaitTime$ = 8						; size = 4
?XSleepThread@@YGKPAX@Z PROC				; XSleepThread, COMDAT

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 407  : 	XSleep_Structure *sleep = (XSleep_Structure*)pWaitTime;
; 408  : 	Sleep(sleep->time);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWaitTime$[ebp]
  00007	ff 36		 push	 DWORD PTR [esi]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 409  : 	SetEvent(sleep->eventHandle);

  0000f	ff 76 04	 push	 DWORD PTR [esi+4]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 410  : 	return 0;

  00018	33 c0		 xor	 eax, eax
  0001a	5e		 pop	 esi

; 411  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?XSleepThread@@YGKPAX@Z ENDP				; XSleepThread
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_?øÌ?ëå@@YA_NXZ
_TEXT	SEGMENT
?JL_?øÌ?ëå@@YA_NXZ PROC					; JL_?øÌ?ëå, COMDAT

; 388  : 	if (g_å±è½å£°é³){

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_?øÌ?ëå@@3HA, 0 ; g_?øÌ?ëå
  00007	0f 95 c0	 setne	 al

; 389  : 		return 1;
; 390  : 	}
; 391  : 	return 0;
; 392  : }

  0000a	c3		 ret	 0
?JL_?øÌ?ëå@@YA_NXZ ENDP					; JL_?øÌ?ëå
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ??__EpPrevFilter@@YAXXZ
text$di	SEGMENT
??__EpPrevFilter@@YAXXZ PROC				; `dynamic initializer for 'pPrevFilter'', COMDAT

; 86   : LPTOP_LEVEL_EXCEPTION_FILTER pPrevFilter = ::SetUnhandledExceptionFilter(MyExceptionFilter);

  00000	68 00 00 00 00	 push	 OFFSET ?MyExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; MyExceptionFilter
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?pPrevFilter@@3P6GJPAU_EXCEPTION_POINTERS@@@ZA, eax ; pPrevFilter
  00010	c3		 ret	 0
??__EpPrevFilter@@YAXXZ ENDP				; `dynamic initializer for 'pPrevFilter''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?MyExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
_exptInfo$1 = -12					; size = 12
_pExptInfo$ = 8						; size = 4
?MyExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z PROC	; MyExceptionFilter, COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 67   : 	MessageBoxW(0, L"ç¨åºå¼å¸¸éåºï¼è¯·èç³»ä½è\n\nä¸ºäºä¾¿äºä½èæ¥æ¾é®é¢ï¼è¯·å°æ¸¸æç®å½ä¸çsa.dmpä¸ä¼ å°è®ºå\n\n", 0, 0);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@NHKBMFH@?$AA?$AL?$PP?$IP?$AA?$AC?$AA8?$AA?$AA?$PP?z?$AA?$AM?$PP?w?$AAT?$PP?$PL?$AA?2?$AA?$AF?$AA?6?$AA?6?$AA?3@
  00010	6a 00		 push	 0
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 68   : 	// ç¨åºå´©æºæ¶ï¼å°åå¥ç¨åºç®å½ä¸çExceptionDump.dmpæä»¶  
; 69   : 
; 70   : 	HANDLE hFile = ::CreateFileA("sa.dmp", GENERIC_WRITE, FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

  00018	6a 00		 push	 0
  0001a	68 80 00 00 00	 push	 128			; 00000080H
  0001f	6a 02		 push	 2
  00021	6a 00		 push	 0
  00023	6a 02		 push	 2
  00025	68 00 00 00 40	 push	 1073741824		; 40000000H
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_06NJDOOGHM@sa?4dmp@
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00035	8b f0		 mov	 esi, eax

; 71   : 	if (hFile != INVALID_HANDLE_VALUE)

  00037	83 fe ff	 cmp	 esi, -1
  0003a	74 2d		 je	 SHORT $LN4@MyExceptio

; 72   : 	{
; 73   : 		MINIDUMP_EXCEPTION_INFORMATION exptInfo;
; 74   : 		exptInfo.ThreadId = ::GetCurrentThreadId();

  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0

; 75   : 		exptInfo.ExceptionPointers = pExptInfo;

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _pExptInfo$[ebp]

; 76   : 		//å°åå­å æ dumpå°æä»¶ä¸­
; 77   : 		//MiniDumpWriteDumpéå¼å¥dbghelpå¤´æä»¶
; 78   : 		BOOL bOK = ::MiniDumpWriteDump(::GetCurrentProcess(),

  00045	6a 00		 push	 0
  00047	6a 00		 push	 0
  00049	89 45 f4	 mov	 DWORD PTR _exptInfo$1[ebp], eax
  0004c	8d 45 f4	 lea	 eax, DWORD PTR _exptInfo$1[ebp]
  0004f	50		 push	 eax
  00050	6a 00		 push	 0
  00052	56		 push	 esi
  00053	89 4d f8	 mov	 DWORD PTR _exptInfo$1[ebp+4], ecx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  0005c	50		 push	 eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _MiniDumpWriteDump@28
$LN4@MyExceptio:

; 79   : 			::GetCurrentProcessId(), hFile, MiniDumpNormal,
; 80   : 			&exptInfo, NULL, NULL);
; 81   : 	}
; 82   : 	return EXCEPTION_EXECUTE_HANDLER;
; 83   : }

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
?MyExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ENDP	; MyExceptionFilter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?BIG52GBK@@YIXPAD@Z
_TEXT	SEGMENT
_pws$ = -32						; size = 4
_szBuf$1$ = -28						; size = 4
_bValue$2 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?BIG52GBK@@YIXPAD@Z PROC				; BIG52GBK, COMDAT
; _szBuf$ = ecx

; 844  : void __fastcall BIG52GBK(char *szBuf){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?BIG52GBK@@YIXPAD@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 4d e4	 mov	 DWORD PTR _szBuf$1$[ebp], ecx

; 845  : 	if (!strcmp(szBuf, ""))

  00033	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@@
  00038	8b c1		 mov	 eax, ecx
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL10@BIG52GBK:
  00040	8a 18		 mov	 bl, BYTE PTR [eax]
  00042	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00044	75 1a		 jne	 SHORT $LN11@BIG52GBK
  00046	84 db		 test	 bl, bl
  00048	74 12		 je	 SHORT $LN12@BIG52GBK
  0004a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0004d	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00050	75 0e		 jne	 SHORT $LN11@BIG52GBK
  00052	83 c0 02	 add	 eax, 2
  00055	83 c2 02	 add	 edx, 2
  00058	84 c9		 test	 cl, cl
  0005a	75 e4		 jne	 SHORT $LL10@BIG52GBK
$LN12@BIG52GBK:
  0005c	33 c0		 xor	 eax, eax
  0005e	eb 05		 jmp	 SHORT $LN13@BIG52GBK
$LN11@BIG52GBK:
  00060	1b c0		 sbb	 eax, eax
  00062	83 c8 01	 or	 eax, 1
$LN13@BIG52GBK:
  00065	85 c0		 test	 eax, eax
  00067	0f 84 8d 00 00
	00		 je	 $LN9@BIG52GBK

; 846  : 		return;
; 847  : 	int nStrLen = strlen(szBuf);

  0006d	8b 5d e4	 mov	 ebx, DWORD PTR _szBuf$1$[ebp]
  00070	8b f3		 mov	 esi, ebx
  00072	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL14@BIG52GBK:
  00075	8a 06		 mov	 al, BYTE PTR [esi]
  00077	46		 inc	 esi
  00078	84 c0		 test	 al, al
  0007a	75 f9		 jne	 SHORT $LL14@BIG52GBK
  0007c	2b f1		 sub	 esi, ecx

; 848  : 	wchar_t *pws = new wchar_t[nStrLen + 1];

  0007e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00081	68 50 03 00 00	 push	 848			; 00000350H
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0FJ@NGKOEDFH@C?3?2Users?2gg862?2OneDrive?2?$LJ?Y?E?A?5?H?$KN@
  0008b	6a 01		 push	 1
  0008d	33 c9		 xor	 ecx, ecx
  0008f	ba 02 00 00 00	 mov	 edx, 2
  00094	f7 e2		 mul	 edx
  00096	0f 90 c1	 seto	 cl
  00099	f7 d9		 neg	 ecx
  0009b	0b c8		 or	 ecx, eax
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ??_U@YAPAXIHPBDH@Z	; operator new[]
  000a3	83 c4 10	 add	 esp, 16			; 00000010H
  000a6	8b f8		 mov	 edi, eax
  000a8	89 7d e0	 mov	 DWORD PTR _pws$[ebp], edi

; 849  : 	__try

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 850  : 	{
; 851  : 		int nReturn = MultiByteToWideChar(950, 0, szBuf, nStrLen, pws, nStrLen + 1);

  000b2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000b5	50		 push	 eax
  000b6	57		 push	 edi
  000b7	56		 push	 esi
  000b8	53		 push	 ebx
  000b9	6a 00		 push	 0
  000bb	68 b6 03 00 00	 push	 950			; 000003b6H
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 852  : 		BOOL bValue = false;

  000c6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bValue$2[ebp], 0

; 853  : 		nReturn = WideCharToMultiByte(936, 0, pws, nReturn, szBuf, nStrLen + 1, "?", &bValue);

  000cd	8d 4d e4	 lea	 ecx, DWORD PTR _bValue$2[ebp]
  000d0	51		 push	 ecx
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_01OGPIMHDM@?$DP@
  000d6	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  000d9	51		 push	 ecx
  000da	53		 push	 ebx
  000db	50		 push	 eax
  000dc	57		 push	 edi
  000dd	6a 00		 push	 0
  000df	68 a8 03 00 00	 push	 936			; 000003a8H
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 854  : 		szBuf[nReturn] = 0;

  000ea	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 855  : 	}

  000ee	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000f5	e8 15 00 00 00	 call	 $LN8@BIG52GBK
$LN9@BIG52GBK:

; 859  : 	}
; 860  : }

  000fa	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
$LN6@BIG52GBK:
$LN17@BIG52GBK:

; 855  : 	}

  0010c	8b 7d e0	 mov	 edi, DWORD PTR _pws$[ebp]
$LN8@BIG52GBK:

; 856  : 	__finally
; 857  : 	{
; 858  : 		delete[] pws;

  0010f	57		 push	 edi
  00110	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00115	83 c4 04	 add	 esp, 4
$LN7@BIG52GBK:
$LN15@BIG52GBK:
  00118	c3		 ret	 0
?BIG52GBK@@YIXPAD@Z ENDP				; BIG52GBK
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?GBK2BIG5@@YIXPAD@Z
_TEXT	SEGMENT
_pws$ = -32						; size = 4
_szBuf$1$ = -28						; size = 4
_bValue$2 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?GBK2BIG5@@YIXPAD@Z PROC				; GBK2BIG5, COMDAT
; _szBuf$ = ecx

; 863  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GBK2BIG5@@YIXPAD@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 4d e4	 mov	 DWORD PTR _szBuf$1$[ebp], ecx

; 864  : 	if (!strcmp(szBuf, ""))

  00033	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@@
  00038	8b c1		 mov	 eax, ecx
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL10@GBK2BIG5:
  00040	8a 18		 mov	 bl, BYTE PTR [eax]
  00042	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00044	75 1a		 jne	 SHORT $LN11@GBK2BIG5
  00046	84 db		 test	 bl, bl
  00048	74 12		 je	 SHORT $LN12@GBK2BIG5
  0004a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0004d	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00050	75 0e		 jne	 SHORT $LN11@GBK2BIG5
  00052	83 c0 02	 add	 eax, 2
  00055	83 c2 02	 add	 edx, 2
  00058	84 c9		 test	 cl, cl
  0005a	75 e4		 jne	 SHORT $LL10@GBK2BIG5
$LN12@GBK2BIG5:
  0005c	33 c0		 xor	 eax, eax
  0005e	eb 05		 jmp	 SHORT $LN13@GBK2BIG5
$LN11@GBK2BIG5:
  00060	1b c0		 sbb	 eax, eax
  00062	83 c8 01	 or	 eax, 1
$LN13@GBK2BIG5:
  00065	85 c0		 test	 eax, eax
  00067	0f 84 8d 00 00
	00		 je	 $LN9@GBK2BIG5

; 865  : 		return;
; 866  : 	int nStrLen = strlen(szBuf);

  0006d	8b 5d e4	 mov	 ebx, DWORD PTR _szBuf$1$[ebp]
  00070	8b f3		 mov	 esi, ebx
  00072	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL14@GBK2BIG5:
  00075	8a 06		 mov	 al, BYTE PTR [esi]
  00077	46		 inc	 esi
  00078	84 c0		 test	 al, al
  0007a	75 f9		 jne	 SHORT $LL14@GBK2BIG5
  0007c	2b f1		 sub	 esi, ecx

; 867  : 	wchar_t *pws = new wchar_t[nStrLen + 1];

  0007e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00081	68 63 03 00 00	 push	 867			; 00000363H
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0FJ@NGKOEDFH@C?3?2Users?2gg862?2OneDrive?2?$LJ?Y?E?A?5?H?$KN@
  0008b	6a 01		 push	 1
  0008d	33 c9		 xor	 ecx, ecx
  0008f	ba 02 00 00 00	 mov	 edx, 2
  00094	f7 e2		 mul	 edx
  00096	0f 90 c1	 seto	 cl
  00099	f7 d9		 neg	 ecx
  0009b	0b c8		 or	 ecx, eax
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ??_U@YAPAXIHPBDH@Z	; operator new[]
  000a3	83 c4 10	 add	 esp, 16			; 00000010H
  000a6	8b f8		 mov	 edi, eax
  000a8	89 7d e0	 mov	 DWORD PTR _pws$[ebp], edi

; 868  : 	__try

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 869  : 	{
; 870  : 		MultiByteToWideChar(936, 0, szBuf, nStrLen, pws, nStrLen + 1);

  000b2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000b5	50		 push	 eax
  000b6	57		 push	 edi
  000b7	56		 push	 esi
  000b8	53		 push	 ebx
  000b9	6a 00		 push	 0
  000bb	68 a8 03 00 00	 push	 936			; 000003a8H
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 871  : 		BOOL bValue = false;

  000c6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bValue$2[ebp], 0

; 872  : 		WideCharToMultiByte(950, 0, pws, nStrLen, szBuf, nStrLen + 1, "?", &bValue);

  000cd	8d 45 e4	 lea	 eax, DWORD PTR _bValue$2[ebp]
  000d0	50		 push	 eax
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_01OGPIMHDM@?$DP@
  000d6	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000d9	50		 push	 eax
  000da	53		 push	 ebx
  000db	56		 push	 esi
  000dc	57		 push	 edi
  000dd	6a 00		 push	 0
  000df	68 b6 03 00 00	 push	 950			; 000003b6H
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 873  : 		szBuf[nStrLen] = 0;

  000ea	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 874  : 	}

  000ee	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000f5	e8 15 00 00 00	 call	 $LN8@GBK2BIG5
$LN9@GBK2BIG5:

; 878  : 	}
; 879  : }

  000fa	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
$LN6@GBK2BIG5:
$LN17@GBK2BIG5:

; 874  : 	}

  0010c	8b 7d e0	 mov	 edi, DWORD PTR _pws$[ebp]
$LN8@GBK2BIG5:

; 875  : 	__finally
; 876  : 	{
; 877  : 		delete[] pws;

  0010f	57		 push	 edi
  00110	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00115	83 c4 04	 add	 esp, 4
$LN7@GBK2BIG5:
$LN15@GBK2BIG5:
  00118	c3		 ret	 0
?GBK2BIG5@@YIXPAD@Z ENDP				; GBK2BIG5
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?GB2GBK@@YIXPAD@Z
_TEXT	SEGMENT
_pcBuf$ = -32						; size = 4
_szBuf$1$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?GB2GBK@@YIXPAD@Z PROC					; GB2GBK, COMDAT
; _szBuf$ = ecx

; 882  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GB2GBK@@YIXPAD@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	8b f1		 mov	 esi, ecx
  00032	89 75 e4	 mov	 DWORD PTR _szBuf$1$[ebp], esi

; 883  : 	if (!strcmp(szBuf, ""))

  00035	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@@
  0003a	8b c6		 mov	 eax, esi
  0003c	0f 1f 40 00	 npad	 4
$LL11@GB2GBK:
  00040	8a 18		 mov	 bl, BYTE PTR [eax]
  00042	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00044	75 1a		 jne	 SHORT $LN12@GB2GBK
  00046	84 db		 test	 bl, bl
  00048	74 12		 je	 SHORT $LN13@GB2GBK
  0004a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0004d	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00050	75 0e		 jne	 SHORT $LN12@GB2GBK
  00052	83 c0 02	 add	 eax, 2
  00055	83 c2 02	 add	 edx, 2
  00058	84 c9		 test	 cl, cl
  0005a	75 e4		 jne	 SHORT $LL11@GB2GBK
$LN13@GB2GBK:
  0005c	33 c0		 xor	 eax, eax
  0005e	eb 05		 jmp	 SHORT $LN14@GB2GBK
$LN12@GB2GBK:
  00060	1b c0		 sbb	 eax, eax
  00062	83 c8 01	 or	 eax, 1
$LN14@GB2GBK:
  00065	85 c0		 test	 eax, eax
  00067	74 7e		 je	 SHORT $LN10@GB2GBK

; 884  : 		return;
; 885  : 	int nStrLen = strlen(szBuf);

  00069	8b ce		 mov	 ecx, esi
  0006b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0006e	66 90		 npad	 2
$LL15@GB2GBK:
  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	41		 inc	 ecx
  00073	84 c0		 test	 al, al
  00075	75 f9		 jne	 SHORT $LL15@GB2GBK
  00077	2b ca		 sub	 ecx, edx

; 886  : 	WORD wLCID = MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED), SORT_CHINESE_PRC);
; 887  : 	int nReturn = LCMapString(wLCID, LCMAP_TRADITIONAL_CHINESE, szBuf, nStrLen, NULL, 0);

  00079	6a 00		 push	 0
  0007b	6a 00		 push	 0
  0007d	51		 push	 ecx
  0007e	56		 push	 esi
  0007f	68 00 00 00 04	 push	 67108864		; 04000000H
  00084	68 04 08 00 00	 push	 2052			; 00000804H
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LCMapStringA@24
  0008f	8b f8		 mov	 edi, eax

; 888  : 	if (!nReturn)

  00091	85 ff		 test	 edi, edi
  00093	74 52		 je	 SHORT $LN10@GB2GBK

; 889  : 		return;
; 890  : 	char *pcBuf = new char[nReturn + 1];

  00095	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00098	68 7a 03 00 00	 push	 890			; 0000037aH
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0FJ@NGKOEDFH@C?3?2Users?2gg862?2OneDrive?2?$LJ?Y?E?A?5?H?$KN@
  000a2	6a 01		 push	 1
  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ??_U@YAPAXIHPBDH@Z	; operator new[]
  000aa	83 c4 10	 add	 esp, 16			; 00000010H
  000ad	8b f0		 mov	 esi, eax
  000af	89 75 e0	 mov	 DWORD PTR _pcBuf$[ebp], esi

; 891  : 	__try

  000b2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 892  : 	{
; 893  : 		wLCID = MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED), SORT_CHINESE_PRC);
; 894  : 		LCMapString(wLCID, LCMAP_TRADITIONAL_CHINESE, szBuf, nReturn, pcBuf, nReturn + 1);

  000b9	53		 push	 ebx
  000ba	56		 push	 esi
  000bb	57		 push	 edi
  000bc	8b 5d e4	 mov	 ebx, DWORD PTR _szBuf$1$[ebp]
  000bf	53		 push	 ebx
  000c0	68 00 00 00 04	 push	 67108864		; 04000000H
  000c5	68 04 08 00 00	 push	 2052			; 00000804H
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LCMapStringA@24

; 895  : 		strncpy(szBuf, pcBuf, nReturn);

  000d0	57		 push	 edi
  000d1	56		 push	 esi
  000d2	53		 push	 ebx
  000d3	e8 00 00 00 00	 call	 _strncpy
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 896  : 	}

  000db	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000e2	e8 15 00 00 00	 call	 $LN9@GB2GBK
$LN10@GB2GBK:

; 900  : 	}
; 901  : }

  000e7	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f1	59		 pop	 ecx
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
$LN7@GB2GBK:
$LN18@GB2GBK:

; 896  : 	}

  000f9	8b 75 e0	 mov	 esi, DWORD PTR _pcBuf$[ebp]
$LN9@GB2GBK:

; 897  : 	__finally
; 898  : 	{
; 899  : 		delete[] pcBuf;

  000fc	56		 push	 esi
  000fd	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00102	83 c4 04	 add	 esp, 4
$LN8@GB2GBK:
$LN16@GB2GBK:
  00105	c3		 ret	 0
?GB2GBK@@YIXPAD@Z ENDP					; GB2GBK
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?GBK2GB@@YIXPAD@Z
_TEXT	SEGMENT
_pcBuf$ = -32						; size = 4
_szBuf$1$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?GBK2GB@@YIXPAD@Z PROC					; GBK2GB, COMDAT
; _szBuf$ = ecx

; 905  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GBK2GB@@YIXPAD@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	8b f1		 mov	 esi, ecx
  00032	89 75 e4	 mov	 DWORD PTR _szBuf$1$[ebp], esi

; 906  : 	if (!strcmp(szBuf, ""))

  00035	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@@
  0003a	8b c6		 mov	 eax, esi
  0003c	0f 1f 40 00	 npad	 4
$LL11@GBK2GB:
  00040	8a 18		 mov	 bl, BYTE PTR [eax]
  00042	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00044	75 1a		 jne	 SHORT $LN12@GBK2GB
  00046	84 db		 test	 bl, bl
  00048	74 12		 je	 SHORT $LN13@GBK2GB
  0004a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0004d	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00050	75 0e		 jne	 SHORT $LN12@GBK2GB
  00052	83 c0 02	 add	 eax, 2
  00055	83 c2 02	 add	 edx, 2
  00058	84 c9		 test	 cl, cl
  0005a	75 e4		 jne	 SHORT $LL11@GBK2GB
$LN13@GBK2GB:
  0005c	33 c0		 xor	 eax, eax
  0005e	eb 05		 jmp	 SHORT $LN14@GBK2GB
$LN12@GBK2GB:
  00060	1b c0		 sbb	 eax, eax
  00062	83 c8 01	 or	 eax, 1
$LN14@GBK2GB:
  00065	85 c0		 test	 eax, eax
  00067	74 7e		 je	 SHORT $LN10@GBK2GB

; 907  : 		return;
; 908  : 	int nStrLen = strlen(szBuf);

  00069	8b ce		 mov	 ecx, esi
  0006b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0006e	66 90		 npad	 2
$LL15@GBK2GB:
  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	41		 inc	 ecx
  00073	84 c0		 test	 al, al
  00075	75 f9		 jne	 SHORT $LL15@GBK2GB
  00077	2b ca		 sub	 ecx, edx

; 909  : 	WORD wLCID = MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED), SORT_CHINESE_BIG5);
; 910  : 	int nReturn = LCMapString(wLCID, LCMAP_SIMPLIFIED_CHINESE, szBuf, nStrLen, NULL, 0);

  00079	6a 00		 push	 0
  0007b	6a 00		 push	 0
  0007d	51		 push	 ecx
  0007e	56		 push	 esi
  0007f	68 00 00 00 02	 push	 33554432		; 02000000H
  00084	68 04 08 00 00	 push	 2052			; 00000804H
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LCMapStringA@24
  0008f	8b f8		 mov	 edi, eax

; 911  : 	if (!nReturn)

  00091	85 ff		 test	 edi, edi
  00093	74 52		 je	 SHORT $LN10@GBK2GB

; 912  : 		return;
; 913  : 	char *pcBuf = new char[nReturn + 1];

  00095	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00098	68 91 03 00 00	 push	 913			; 00000391H
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0FJ@NGKOEDFH@C?3?2Users?2gg862?2OneDrive?2?$LJ?Y?E?A?5?H?$KN@
  000a2	6a 01		 push	 1
  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ??_U@YAPAXIHPBDH@Z	; operator new[]
  000aa	83 c4 10	 add	 esp, 16			; 00000010H
  000ad	8b f0		 mov	 esi, eax
  000af	89 75 e0	 mov	 DWORD PTR _pcBuf$[ebp], esi

; 914  : 	__try

  000b2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 915  : 	{
; 916  : 		wLCID = MAKELCID(MAKELANGID(LANG_CHINESE, SUBLANG_CHINESE_SIMPLIFIED), SORT_CHINESE_BIG5);
; 917  : 		LCMapString(wLCID, LCMAP_SIMPLIFIED_CHINESE, szBuf, nReturn, pcBuf, nReturn + 1);

  000b9	53		 push	 ebx
  000ba	56		 push	 esi
  000bb	57		 push	 edi
  000bc	8b 5d e4	 mov	 ebx, DWORD PTR _szBuf$1$[ebp]
  000bf	53		 push	 ebx
  000c0	68 00 00 00 02	 push	 33554432		; 02000000H
  000c5	68 04 08 00 00	 push	 2052			; 00000804H
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LCMapStringA@24

; 918  : 		strncpy(szBuf, pcBuf, nReturn);

  000d0	57		 push	 edi
  000d1	56		 push	 esi
  000d2	53		 push	 ebx
  000d3	e8 00 00 00 00	 call	 _strncpy
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 919  : 	}

  000db	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000e2	e8 15 00 00 00	 call	 $LN9@GBK2GB
$LN10@GBK2GB:

; 923  : 	}
; 924  : }

  000e7	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f1	59		 pop	 ecx
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
$LN7@GBK2GB:
$LN18@GBK2GB:

; 919  : 	}

  000f9	8b 75 e0	 mov	 esi, DWORD PTR _pcBuf$[ebp]
$LN9@GBK2GB:

; 920  : 	__finally
; 921  : 	{
; 922  : 		delete[]pcBuf;

  000fc	56		 push	 esi
  000fd	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00102	83 c4 04	 add	 esp, 4
$LN8@GBK2GB:
$LN16@GBK2GB:
  00105	c3		 ret	 0
?GBK2GB@@YIXPAD@Z ENDP					; GBK2GB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_LuaLoadMem@@YAHPAD@Z
_TEXT	SEGMENT
_buf$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_pSrc$ = 8						; size = 4
?JL_LuaLoadMem@@YAHPAD@Z PROC				; JL_LuaLoadMem, COMDAT

; 929  : int JL_LuaLoadMem(char* pSrc){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 930  : 	i++;

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?i@@3HA	; i

; 931  : 	extern MY_Lua MYLua;
; 932  : 	MY_Lua *salua = &MYLua;
; 933  : 	while (salua->next != NULL) {

  00016	a1 08 00 00 00	 mov	 eax, DWORD PTR ?MYLua@@3UtagMYLua@@A+8
  0001b	41		 inc	 ecx
  0001c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?i@@3HA, ecx	; i
  00022	56		 push	 esi
  00023	be 00 00 00 00	 mov	 esi, OFFSET ?MYLua@@3UtagMYLua@@A ; MYLua
  00028	57		 push	 edi
  00029	8b 7d 08	 mov	 edi, DWORD PTR _pSrc$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 09		 je	 SHORT $LN3@JL_LuaLoad
$LL2@JL_LuaLoad:

; 934  : 		salua = salua->next;

  00030	8b f0		 mov	 esi, eax
  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00035	85 c0		 test	 eax, eax
  00037	75 f7		 jne	 SHORT $LL2@JL_LuaLoad
$LN3@JL_LuaLoad:

; 935  : 	}
; 936  : 	char buf[10];
; 937  : 	sprintf(buf, "%d", i);

  00039	51		 push	 ecx
  0003a	8d 45 f0	 lea	 eax, DWORD PTR _buf$[ebp]
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _sprintf

; 938  : 	salua->luapath = buf;
; 939  : 	salua->next = (tagMYLua *)new MY_Lua;

  00048	68 ab 03 00 00	 push	 939			; 000003abH
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FJ@NGKOEDFH@C?3?2Users?2gg862?2OneDrive?2?$LJ?Y?E?A?5?H?$KN@
  00052	8d 45 f0	 lea	 eax, DWORD PTR _buf$[ebp]
  00055	6a 01		 push	 1
  00057	6a 0c		 push	 12			; 0000000cH
  00059	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0005c	e8 00 00 00 00	 call	 ??2@YAPAXIHPBDH@Z	; operator new
  00061	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	83 c4 1c	 add	 esp, 28			; 0000001cH

; 940  : 	memset(salua->next, 0, sizeof(MY_Lua));

  0006a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0006e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 941  : 	if (salua->next == NULL)return EXIT_FAILURE;

  00075	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00079	0f 84 8b 00 00
	00		 je	 $LN6@JL_LuaLoad

; 942  : 
; 943  : 	salua->lua = lua_open();

  0007f	e8 00 00 00 00	 call	 _luaL_newstate
  00084	89 06		 mov	 DWORD PTR [esi], eax

; 944  : 	if (salua->lua == NULL) {

  00086	85 c0		 test	 eax, eax
  00088	75 10		 jne	 SHORT $LN5@JL_LuaLoad

; 956  : 	}
; 957  : 	return TRUE;
; 958  : 
; 959  : #if 0
; 960  : 
; 961  : 	extern MY_Lua MYLua;
; 962  : 	MY_Lua *salua = &MYLua;
; 963  : 	while (salua->next != NULL) {
; 964  : 		salua = salua->next;
; 965  : 	}
; 966  : 	salua->luapath = "mem";
; 967  : 	salua->next = (tagMYLua *)new MY_Lua;
; 968  : 	memset(salua->next, 0, sizeof(MY_Lua));
; 969  : 	if (salua->next == NULL)return EXIT_FAILURE;
; 970  : 
; 971  : 	salua->lua = lua_open();
; 972  : 	if (salua->lua == NULL) {
; 973  : 		return FALSE;
; 974  : 	}
; 975  : 	lua_gc(salua->lua, LUA_GCSTOP, 0);
; 976  : 	luaL_openlibs(salua->lua);
; 977  : 	luaAB_openlibs(salua->lua);
; 978  : 	lua_gc(salua->lua, LUA_GCRESTART, 0);
; 979  : 
; 980  : 	int status = luaL_dostring(salua->lua, (const char *)pSrc);
; 981  : 	lua_getglobal(salua->lua, "main");
; 982  : 	if (lua_isfunction(salua->lua, -1)) {
; 983  : 		docall(salua->lua, 0, 1);
; 984  : 	}
; 985  : 	return TRUE;
; 986  : #endif
; 987  : }

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008f	33 cd		 xor	 ecx, ebp
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN5@JL_LuaLoad:

; 945  : 		return FALSE;
; 946  : 	}
; 947  : 	lua_gc(salua->lua, LUA_GCSTOP, 0);

  0009a	6a 00		 push	 0
  0009c	6a 00		 push	 0
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _lua_gc

; 948  : 	luaL_openlibs(salua->lua);

  000a4	ff 36		 push	 DWORD PTR [esi]
  000a6	e8 00 00 00 00	 call	 _luaL_openlibs

; 949  : 	luaAB_openlibs(salua->lua);

  000ab	ff 36		 push	 DWORD PTR [esi]
  000ad	e8 00 00 00 00	 call	 ?luaAB_openlibs@@YAXPAUlua_State@@@Z ; luaAB_openlibs

; 950  : 	lua_gc(salua->lua, LUA_GCRESTART, 0);

  000b2	6a 00		 push	 0
  000b4	6a 01		 push	 1
  000b6	ff 36		 push	 DWORD PTR [esi]
  000b8	e8 00 00 00 00	 call	 _lua_gc

; 951  : 
; 952  : 	int status = luaL_dostring(salua->lua, (const char *)pSrc);

  000bd	57		 push	 edi
  000be	ff 36		 push	 DWORD PTR [esi]
  000c0	e8 00 00 00 00	 call	 _luaL_loadstring
  000c5	83 c4 28	 add	 esp, 40			; 00000028H
  000c8	85 c0		 test	 eax, eax
  000ca	75 0e		 jne	 SHORT $LN8@JL_LuaLoad
  000cc	50		 push	 eax
  000cd	6a ff		 push	 -1
  000cf	50		 push	 eax
  000d0	ff 36		 push	 DWORD PTR [esi]
  000d2	e8 00 00 00 00	 call	 _lua_pcall
  000d7	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@JL_LuaLoad:

; 953  : 	lua_getglobal(salua->lua, "main");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_04GHJNJNPO@main@
  000df	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  000e4	ff 36		 push	 DWORD PTR [esi]
  000e6	e8 00 00 00 00	 call	 _lua_getfield

; 954  : 	if (lua_isfunction(salua->lua, -1)) {

  000eb	6a ff		 push	 -1
  000ed	ff 36		 push	 DWORD PTR [esi]
  000ef	e8 00 00 00 00	 call	 _lua_type
  000f4	83 c4 14	 add	 esp, 20			; 00000014H
  000f7	83 f8 06	 cmp	 eax, 6
  000fa	75 0e		 jne	 SHORT $LN6@JL_LuaLoad

; 955  : 		docall(salua->lua, 0, 1);

  000fc	6a 01		 push	 1
  000fe	6a 00		 push	 0
  00100	ff 36		 push	 DWORD PTR [esi]
  00102	e8 00 00 00 00	 call	 ?docall@@YAHPAUlua_State@@HH@Z ; docall
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@JL_LuaLoad:

; 956  : 	}
; 957  : 	return TRUE;
; 958  : 
; 959  : #if 0
; 960  : 
; 961  : 	extern MY_Lua MYLua;
; 962  : 	MY_Lua *salua = &MYLua;
; 963  : 	while (salua->next != NULL) {
; 964  : 		salua = salua->next;
; 965  : 	}
; 966  : 	salua->luapath = "mem";
; 967  : 	salua->next = (tagMYLua *)new MY_Lua;
; 968  : 	memset(salua->next, 0, sizeof(MY_Lua));
; 969  : 	if (salua->next == NULL)return EXIT_FAILURE;
; 970  : 
; 971  : 	salua->lua = lua_open();
; 972  : 	if (salua->lua == NULL) {
; 973  : 		return FALSE;
; 974  : 	}
; 975  : 	lua_gc(salua->lua, LUA_GCSTOP, 0);
; 976  : 	luaL_openlibs(salua->lua);
; 977  : 	luaAB_openlibs(salua->lua);
; 978  : 	lua_gc(salua->lua, LUA_GCRESTART, 0);
; 979  : 
; 980  : 	int status = luaL_dostring(salua->lua, (const char *)pSrc);
; 981  : 	lua_getglobal(salua->lua, "main");
; 982  : 	if (lua_isfunction(salua->lua, -1)) {
; 983  : 		docall(salua->lua, 0, 1);
; 984  : 	}
; 985  : 	return TRUE;
; 986  : #endif
; 987  : }

  0010a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010d	b8 01 00 00 00	 mov	 eax, 1
  00112	5f		 pop	 edi
  00113	33 cd		 xor	 ecx, ebp
  00115	5e		 pop	 esi
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
?JL_LuaLoadMem@@YAHPAD@Z ENDP				; JL_LuaLoadMem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_??÷åüù_üÞ??ïÃ@@YAXXZ
_TEXT	SEGMENT
?JL_??÷åüù_üÞ??ïÃ@@YAXXZ PROC				; JL_??÷åüù_üÞ??ïÃ, COMDAT

; 543  : 	////[í¼ì ê°íì ìì´. ì½ë©í¸ ìì ëë²ê·¸]
; 544  : //	SubProcNo = 3;
; 545  : }

  00000	c2 00 00	 ret	 0
?JL_??÷åüù_üÞ??ïÃ@@YAXXZ ENDP				; JL_??÷åüù_üÞ??ïÃ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_?ïÒìÑÚª@@YAX_N@Z
_TEXT	SEGMENT
_bSet$ = 8						; size = 1
?JL_?ïÒìÑÚª@@YAX_N@Z PROC				; JL_?ïÒìÑÚª, COMDAT

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 	extern BOOL mapEmptyFlag;
; 538  : 	mapEmptyFlag = bSet;

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _bSet$[ebp]
  00007	a3 00 00 00 00	 mov	 DWORD PTR ?mapEmptyFlag@@3HA, eax ; mapEmptyFlag

; 539  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?JL_?ïÒìÑÚª@@YAX_N@Z ENDP				; JL_?ïÒìÑÚª
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_í»?Ôô???ÚË?ïÃOK@@YAHXZ
_TEXT	SEGMENT
?JL_í»?Ôô???ÚË?ïÃOK@@YAHXZ PROC				; JL_í»?Ôô???ÚË?ïÃOK, COMDAT

; 449  : 	static unsigned int time1 = 0;
; 450  : 	unsigned int dis = GetTickCount() - time1;

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00006	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?time1@?1??JL_í»?Ôô???ÚË?ïÃOK@@YAHXZ@4IA

; 451  : 	if (dis < 500)

  0000c	3d f4 01 00 00	 cmp	 eax, 500		; 000001f4H
  00011	72 17		 jb	 SHORT $LN3@JL_

; 452  : 	{
; 453  : 		return -1;
; 454  : 	}
; 455  : 	time1 = GetTickCount();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 456  : 
; 457  : 	if (g_flag_èªå¨ç»é)			//[ìë ë¡ê·¸ì¸]

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_flag_í»?Ôô?@@3HA, 0 ; g_flag_í»?Ôô?
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?time1@?1??JL_í»?Ôô???ÚË?ïÃOK@@YAHXZ@4IA, eax
  00025	74 03		 je	 SHORT $LN3@JL_

; 458  : 	{
; 459  : //		XSleep(2000);
; 460  : 		return 0;

  00027	33 c0		 xor	 eax, eax

; 463  : }

  00029	c3		 ret	 0
$LN3@JL_:

; 461  : 	}
; 462  : 	return -1;

  0002a	83 c8 ff	 or	 eax, -1

; 463  : }

  0002d	c3		 ret	 0
?JL_í»?Ôô???ÚË?ïÃOK@@YAHXZ ENDP				; JL_í»?Ôô???ÚË?ïÃOK
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_í»?Ôô???ìÑÚª@@YAHXZ
_TEXT	SEGMENT
?JL_í»?Ôô???ìÑÚª@@YAHXZ PROC				; JL_í»?Ôô???ìÑÚª, COMDAT

; 505  : 	static unsigned int time1 = 0;
; 506  : 	unsigned int dis = GetTickCount() - time1;

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00006	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?time1@?1??JL_í»?Ôô???ìÑÚª@@YAHXZ@4IA

; 507  : 	if (dis < 2000)

  0000c	3d d0 07 00 00	 cmp	 eax, 2000		; 000007d0H
  00011	72 34		 jb	 SHORT $LN3@JL_

; 508  : 	{
; 509  : 		return -1;
; 510  : 	}
; 511  : 	time1 = GetTickCount();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 512  : 
; 513  : 	if (g_flag_èªå¨ç»é)				//[ìë ë¡ê·¸ì¸]

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_flag_í»?Ôô?@@3HA, 0 ; g_flag_í»?Ôô?
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?time1@?1??JL_í»?Ôô???ìÑÚª@@YAHXZ@4IA, eax
  00025	74 20		 je	 SHORT $LN3@JL_

; 514  : 	{
; 515  : 		//[ì¸ë¬¼/ìºë¦­í° 1ì 3ì¼ë¡ ëìì¨ë¤]  [ì¸ë¬¼/ìºë¦­í° 2ì 4ë¡ ëìì¨ë¤]
; 516  : 		//[ì¸ë¬¼/ìºë¦­í°ë 0ëë1ëë2]   [2ë ì¸ë¬¼/ìºë¦­í°ë¥¼ ì ííì§ ìëë¤]
; 517  : 		if (g_sel_äººç© == 2)

  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_sel_ìÑÚª@@3HA ; g_sel_ìÑÚª
  0002d	83 f9 02	 cmp	 ecx, 2
  00030	74 15		 je	 SHORT $LN3@JL_

; 518  : 		{
; 519  : 			return -1;
; 520  : 		}
; 521  : 
; 522  : 		extern CHARLISTTABLE chartable[];
; 523  : 
; 524  : 		if ( *chartable[g_sel_äººç©].name == NULL )	//[ì¸ë¬¼/ìºë¦­í°], [ë§ì½ ì¸ë¬¼/ìºë¦­í°ê° ì¡´ì¬íì§ ìëë¤ë©´]

  00032	8b c1		 mov	 eax, ecx
  00034	c1 e0 04	 shl	 eax, 4
  00037	03 c1		 add	 eax, ecx
  00039	80 3c 85 00 00
	00 00 00	 cmp	 BYTE PTR ?chartable@@3PAUCHARLISTTABLE@@A[eax*4], 0
  00041	74 04		 je	 SHORT $LN3@JL_

; 525  : 		{
; 526  : 			return -1;
; 527  : 		}
; 528  : 
; 529  : 
; 530  : 		return g_sel_äººç© + 3;						//[ì¸ë¬¼/ìºë¦­í°]

  00043	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]

; 533  : }

  00046	c3		 ret	 0
$LN3@JL_:

; 531  : 	}
; 532  : 	return -1;

  00047	83 c8 ff	 or	 eax, -1

; 533  : }

  0004a	c3		 ret	 0
?JL_í»?Ôô???ìÑÚª@@YAHXZ ENDP				; JL_í»?Ôô???ìÑÚª
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_í»?Ôô???ÜùÏõ@@YAHXZ
_TEXT	SEGMENT
?JL_í»?Ôô???ÜùÏõ@@YAHXZ PROC				; JL_í»?Ôô???ÜùÏõ, COMDAT

; 487  : 	static unsigned int time1 = 0;
; 488  : 	unsigned int dis = GetTickCount() - time1;

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00006	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?time1@?1??JL_í»?Ôô???ÜùÏõ@@YAHXZ@4IA

; 489  : 	if (dis < 1500)

  0000c	3d dc 05 00 00	 cmp	 eax, 1500		; 000005dcH
  00011	72 1a		 jb	 SHORT $LN3@JL_

; 490  : 	{
; 491  : 		return -1;
; 492  : 	}
; 493  : 	time1 = GetTickCount();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 494  : 
; 495  : 	if (g_flag_èªå¨ç»é)			//[ìë ë¡ê·¸ì¸]

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_flag_í»?Ôô?@@3HA, 0 ; g_flag_í»?Ôô?
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?time1@?1??JL_í»?Ôô???ÜùÏõ@@YAHXZ@4IA, eax
  00025	74 06		 je	 SHORT $LN3@JL_

; 496  : 	{
; 497  : 		return g_sel_å¯æº;			//[ë¤ìí ìë¯¸ê° ìì: ë³´ì¡°ì²´ /ë³´ì¡° ìë²/ë³´ì¡° ì»´í¨í° ë±]

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_sel_ÜùÏõ@@3HA ; g_sel_ÜùÏõ

; 501  : }

  0002c	c3		 ret	 0
$LN3@JL_:

; 498  : 	}
; 499  : 
; 500  : 	return -1;

  0002d	83 c8 ff	 or	 eax, -1

; 501  : }

  00030	c3		 ret	 0
?JL_í»?Ôô???ÜùÏõ@@YAHXZ ENDP				; JL_í»?Ôô???ÜùÏõ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_í»?Ôô???Ü×?Ðï@@YAHXZ
_TEXT	SEGMENT
?JL_í»?Ôô???Ü×?Ðï@@YAHXZ PROC				; JL_í»?Ôô???Ü×?Ðï, COMDAT

; 469  : 	static unsigned int time1 = 0;
; 470  : 	unsigned int dis = GetTickCount() - time1;

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00006	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?time1@?1??JL_í»?Ôô???Ü×?Ðï@@YAHXZ@4IA

; 471  : 	if (dis < 1000)

  0000c	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00011	72 1a		 jb	 SHORT $LN3@JL_

; 472  : 	{
; 473  : 		return -1;
; 474  : 	}
; 475  : 	time1 = GetTickCount();

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 476  : 
; 477  : 	if (g_flag_èªå¨ç»é)					//[ìë ë¡ê·¸ì¸]

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_flag_í»?Ôô?@@3HA, 0 ; g_flag_í»?Ôô?
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?time1@?1??JL_í»?Ôô???Ü×?Ðï@@YAHXZ@4IA, eax
  00025	74 06		 je	 SHORT $LN3@JL_

; 478  : 	{
; 479  : 		return g_sel_ä¸»æº;					//[ë¤ìí ìë¯¸ê° ìì: ë³¸ì²´/ìë²/í¸ì¤í¸ ì»´í¨í° ë±]

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_sel_ñ«Ïõ@@3HA ; g_sel_ñ«Ïõ

; 483  : }

  0002c	c3		 ret	 0
$LN3@JL_:

; 480  : 	}
; 481  : 
; 482  : 	return -1;

  0002d	83 c8 ff	 or	 eax, -1

; 483  : }

  00030	c3		 ret	 0
?JL_í»?Ôô???Ü×?Ðï@@YAHXZ ENDP				; JL_í»?Ôô???Ü×?Ðï
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_SetFastFightFlag@@YAX_N@Z
_TEXT	SEGMENT
_bFastFight$ = 8					; size = 1
?JL_SetFastFightFlag@@YAX_N@Z PROC			; JL_SetFastFightFlag, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 142  : 	if (!g_pMappingRecv) return;

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv
  00009	85 c9		 test	 ecx, ecx
  0000b	74 2d		 je	 SHORT $LN4@JL_SetFast

; 143  : 
; 144  : 	char* temp = (char*)g_pMappingRecv + 64 * 1024 * g_mappingIndex;

  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex
  00012	c1 e0 10	 shl	 eax, 16			; 00000010H

; 145  : 	if (bFastFight)

  00015	80 7d 08 00	 cmp	 BYTE PTR _bFastFight$[ebp], 0
  00019	74 12		 je	 SHORT $LN3@JL_SetFast

; 146  : 	{
; 147  : 		*(WORD*)(temp+2) = 1;

  0001b	ba 01 00 00 00	 mov	 edx, 1

; 151  : 		g_bFastFight = 0;
; 152  : 	}
; 153  : }

  00020	66 89 54 08 02	 mov	 WORD PTR [eax+ecx+2], dx
  00025	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_bFastFight@@3HA, edx ; g_bFastFight
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN3@JL_SetFast:

; 148  : 		g_bFastFight = 1;
; 149  : 	}else{
; 150  : 		*(WORD*)(temp+2) = 0;

  0002d	33 d2		 xor	 edx, edx

; 151  : 		g_bFastFight = 0;
; 152  : 	}
; 153  : }

  0002f	66 89 54 08 02	 mov	 WORD PTR [eax+ecx+2], dx
  00034	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_bFastFight@@3HA, edx ; g_bFastFight
$LN4@JL_SetFast:
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?JL_SetFastFightFlag@@YAX_N@Z ENDP			; JL_SetFastFightFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?PostThreadMsg@@YAXHH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?PostThreadMsg@@YAXHH@Z PROC				; PostThreadMsg, COMDAT

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	PostThreadMessageA(g_WgThreadID, WM_USER + 2, index, value);

  00003	ff 75 0c	 push	 DWORD PTR _value$[ebp]
  00006	ff 75 08	 push	 DWORD PTR _index$[ebp]
  00009	68 02 04 00 00	 push	 1026			; 00000402H
  0000e	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_WgThreadID@@3HA ; g_WgThreadID
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16

; 364  : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?PostThreadMsg@@YAXHH@Z ENDP				; PostThreadMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?dw2hex@@YAXHPAD@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_buf$ = 12						; size = 4
?dw2hex@@YAXHPAD@Z PROC					; dw2hex, COMDAT

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 308  : 	{
; 309  : 		lea edi, a;

  00004	8d 7d 08	 lea	 edi, DWORD PTR _a$[ebp]

; 310  : 
; 311  : 		movzx ecx, BYTE PTR[edi + 0];

  00007	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]

; 312  : 		mov edx, DWORD PTR[ecx + ecx + hex_table];

  0000a	8b 94 09 00 00
	00 00		 mov	 edx, DWORD PTR ?hex_table@@3PADA[ecx+ecx]

; 313  : 		mov eax, [edi + 4]; load buffer address;

  00011	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 314  : 		shl edx, 16;

  00014	c1 e2 10	 shl	 edx, 16			; 00000010H

; 315  : 		movzx ecx, BYTE PTR[edi + 1];

  00017	0f b6 4f 01	 movzx	 ecx, BYTE PTR [edi+1]

; 316  : 		mov dx, WORD PTR[ecx + ecx + hex_table];

  0001b	66 8b 94 09 00
	00 00 00	 mov	 dx, WORD PTR ?hex_table@@3PADA[ecx+ecx]

; 317  : 
; 318  : 		movzx ecx, BYTE PTR[edi + 2];

  00023	0f b6 4f 02	 movzx	 ecx, BYTE PTR [edi+2]

; 319  : 		mov[eax + 4], edx; write 2nd DWORD;

  00027	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 320  : 		mov ecx, DWORD PTR[ecx + ecx + hex_table];

  0002a	8b 8c 09 00 00
	00 00		 mov	 ecx, DWORD PTR ?hex_table@@3PADA[ecx+ecx]

; 321  : 		movzx edx, BYTE PTR[edi + 3];

  00031	0f b6 57 03	 movzx	 edx, BYTE PTR [edi+3]

; 322  : 		shl ecx, 16;

  00035	c1 e1 10	 shl	 ecx, 16			; 00000010H

; 323  : 		mov cx, WORD PTR[edx + edx + hex_table];

  00038	66 8b 8c 12 00
	00 00 00	 mov	 cx, WORD PTR ?hex_table@@3PADA[edx+edx]

; 324  : 		xor edx, edx;

  00040	33 d2		 xor	 edx, edx

; 325  : 		mov[eax], ecx; write 1st DWORD;

  00042	89 08		 mov	 DWORD PTR [eax], ecx

; 326  : 
; 327  : 		mov BYTE PTR[eax + 8], dl;

  00044	88 50 08	 mov	 BYTE PTR [eax+8], dl

; 307  : 	__asm

  00047	5f		 pop	 edi

; 328  : 	}
; 329  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?dw2hex@@YAXHPAD@Z ENDP					; dw2hex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_í»??Ôà@@YAXXZ
_TEXT	SEGMENT
?JL_í»??Ôà@@YAXXZ PROC					; JL_í»??Ôà, COMDAT

; 396  : 	SendMessageA((HWND)g_WgRecvHwnd, WM_USER + 999, 0, g_playerAddr);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_playerAddr@@3HA ; g_playerAddr
  00006	6a 00		 push	 0
  00008	68 e7 07 00 00	 push	 2023			; 000007e7H
  0000d	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_WgRecvHwnd@@3HA ; g_WgRecvHwnd
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 397  : }

  00019	c3		 ret	 0
?JL_í»??Ôà@@YAXXZ ENDP					; JL_í»??Ôà
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_combinePacket_SEND@@YAXHH@Z
_TEXT	SEGMENT
_cds$ = -12						; size = 12
_func$ = 8						; size = 4
_addr$ = 12						; size = 4
?JL_combinePacket_SEND@@YAXHH@Z PROC			; JL_combinePacket_SEND, COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 	COPYDATASTRUCT cds;
; 208  : 
; 209  : 	if (func == 1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _func$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	83 f8 01	 cmp	 eax, 1
  0000c	74 38		 je	 SHORT $LN7@JL_combine

; 210  : 	{
; 211  : 		goto _ret;
; 212  : 	}
; 213  : 
; 214  : 	*(int*)g_send_data = func;

  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?g_send_data@@3PADA, eax

; 215  : 	*(int*)(g_send_data + 4) = addr;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _addr$[ebp]
  00016	a3 04 00 00 00	 mov	 DWORD PTR ?g_send_data@@3PADA+4, eax

; 216  : 
; 217  : 	cds.cbData = g_len_encode;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_len_encode@@3HA ; g_len_encode
  00020	89 45 f8	 mov	 DWORD PTR _cds$[ebp+4], eax

; 218  : 	cds.lpData = g_send_data;
; 219  : 	cds.dwData = g_playerAddr;

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_playerAddr@@3HA ; g_playerAddr
  00028	89 45 f4	 mov	 DWORD PTR _cds$[ebp], eax

; 220  : 	SendMessageA((HWND)g_WgRecvHwnd, WM_COPYDATA, 1, (LPARAM)&cds);

  0002b	8d 45 f4	 lea	 eax, DWORD PTR _cds$[ebp]
  0002e	50		 push	 eax
  0002f	6a 01		 push	 1
  00031	6a 4a		 push	 74			; 0000004aH
  00033	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_WgRecvHwnd@@3HA ; g_WgRecvHwnd
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cds$[ebp+8], OFFSET ?g_send_data@@3PADA ; g_send_data
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN7@JL_combine:

; 221  : 
; 222  : 	_ret:
; 223  : 	g_len_encode = 8;
; 224  : 	*g_send_data = 0;
; 225  : 
; 226  : }

  00046	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?g_send_data@@3PADA, 0
  0004d	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?g_len_encode@@3HA, 8 ; g_len_encode
$_ret$9:
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?JL_combinePacket_SEND@@YAXHH@Z ENDP			; JL_combinePacket_SEND
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_combineString_SEND@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
?JL_combineString_SEND@@YAXPADH@Z PROC			; JL_combineString_SEND, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 187  : 	__asm{
; 188  : 		mov ecx, len;

  00005	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]

; 189  : 		mov esi, s;

  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 190  : 		lea edi, g_send_data;

  0000b	8d 3d 00 00 00
	00		 lea	 edi, OFFSET ?g_send_data@@3PADA

; 191  : 		add edi, g_len_encode;

  00011	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?g_len_encode@@3HA ; g_len_encode

; 192  : 
; 193  : 		shr ecx, 2;

  00017	c1 e9 02	 shr	 ecx, 2

; 194  : 		inc ecx;

  0001a	41		 inc	 ecx

; 195  : 		rep movsd;

  0001b	f3 a5		 rep	  movsd

; 196  : 	}
; 197  : 
; 198  : 
; 199  : 	g_send_data[g_len_encode + len] = åéç¬¦;	//hexæ«å°¾æ·»å åéç¬¦

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_len_encode@@3HA ; g_len_encode
  00023	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]

; 200  : 	g_send_data[g_len_encode + len + 1] = 0;	//æ«å°¾ç½®0

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	c6 84 01 00 00
	00 00 08	 mov	 BYTE PTR ?g_send_data@@3PADA[ecx+eax], 8
  00030	40		 inc	 eax
  00031	03 c1		 add	 eax, ecx
  00033	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  00038	73 0e		 jae	 SHORT $LN3@JL_combine
  0003a	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?g_send_data@@3PADA[eax], 0

; 201  : 
; 202  : 	g_len_encode = g_len_encode + len + 1; //ææé¿åº¦å stringé¿åº¦ + åéç¬¦

  00041	a3 00 00 00 00	 mov	 DWORD PTR ?g_len_encode@@3HA, eax ; g_len_encode

; 203  : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN3@JL_combine:

; 200  : 	g_send_data[g_len_encode + len + 1] = 0;	//æ«å°¾ç½®0

  00048	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@JL_combine:
  0004d	cc		 int	 3
?JL_combineString_SEND@@YAXPADH@Z ENDP			; JL_combineString_SEND
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_combineInt_SEND@@YAXH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
?JL_combineInt_SEND@@YAXH@Z PROC			; JL_combineInt_SEND, COMDAT

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  : 	dw2hex(a, g_send_data + g_len_encode);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_len_encode@@3HA ; g_len_encode
  00008	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?g_send_data@@3PADA[eax]
  0000e	50		 push	 eax
  0000f	ff 75 08	 push	 DWORD PTR _a$[ebp]
  00012	e8 00 00 00 00	 call	 ?dw2hex@@YAXHPAD@Z	; dw2hex

; 178  : 	g_send_data[g_len_encode + 8] = åéç¬¦;	//hexæ«å°¾æ·»å åéç¬¦

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_len_encode@@3HA ; g_len_encode
  0001c	83 c4 08	 add	 esp, 8
  0001f	c6 80 08 00 00
	00 08		 mov	 BYTE PTR ?g_send_data@@3PADA[eax+8], 8

; 179  : 	g_send_data[g_len_encode + 9] = 0;	//æ«å°¾ç½®0

  00026	83 c0 09	 add	 eax, 9
  00029	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  0002e	73 0e		 jae	 SHORT $LN3@JL_combine
  00030	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?g_send_data@@3PADA[eax], 0

; 180  : 
; 181  : 	g_len_encode += 9;

  00037	a3 00 00 00 00	 mov	 DWORD PTR ?g_len_encode@@3HA, eax ; g_len_encode

; 182  : 	
; 183  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN3@JL_combine:

; 179  : 	g_send_data[g_len_encode + 9] = 0;	//æ«å°¾ç½®0

  0003e	e9 00 00 00 00	 jmp	 ___report_rangecheckfailure
?JL_combineInt_SEND@@YAXH@Z ENDP			; JL_combineInt_SEND
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_combineString_RECV@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
?JL_combineString_RECV@@YAXPADH@Z PROC			; JL_combineString_RECV, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 255  : 	if (!g_pMappingRecv) return;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMappingRecv@@3PAHA, 0 ; g_pMappingRecv
  0000a	74 54		 je	 SHORT $LN1@JL_combine

; 256  : 
; 257  : #ifdef hook_type_sendmessage
; 258  : 	__asm
; 259  : 	{
; 260  : 		mov ecx, len;
; 261  : 		mov esi, s;
; 262  : 		lea edi, g_recv_data;
; 263  : 		add edi, g_len_decode;
; 264  : 
; 265  : 		shr ecx, 2;
; 266  : 		inc ecx;
; 267  : 		rep movsd;
; 268  : 
; 269  : 	}
; 270  : 
; 271  : 	g_recv_data[g_len_decode + len] = åéç¬¦;	//hexæ«å°¾æ·»å åéç¬¦
; 272  : 	g_recv_data[g_len_decode + len + 1] = 0;	//æ«å°¾ç½®0
; 273  : 
; 274  : 	g_len_decode = g_len_decode + len +1; //ææé¿åº¦å stringé¿åº¦ + åéç¬¦
; 275  : 
; 276  : #else
; 277  : 	__asm

  0000c	56		 push	 esi
  0000d	57		 push	 edi

; 278  : 	{
; 279  : 		
; 280  : 		mov esi, s;

  0000e	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 281  : 		mov edi, g_pMappingRecv;

  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv

; 282  : 		add edi, g_len_decode;

  00017	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?g_len_decode@@3HA ; g_len_decode

; 283  : 
; 284  : 		mov ecx, g_mappingIndex;

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex

; 285  : 		imul ecx, 64 * 1024;

  00023	69 c9 00 00 01
	00		 imul	 ecx, ecx, 65536

; 286  : 		add edi, ecx;

  00029	03 f9		 add	 edi, ecx

; 287  : 
; 288  : 		mov ecx, len;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]

; 289  : 		shr ecx, 2;

  0002e	c1 e9 02	 shr	 ecx, 2

; 290  : 		inc ecx;

  00031	41		 inc	 ecx

; 291  : 		rep movsd;

  00032	f3 a5		 rep	  movsd

; 292  : 
; 293  : 	}
; 294  : 
; 295  : 	char* temp = (char*)g_pMappingRecv + 64 * 1024 * g_mappingIndex + g_len_decode + len;

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]
  0003c	c1 e0 10	 shl	 eax, 16			; 00000010H
  0003f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?g_len_decode@@3HA ; g_len_decode
  00045	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv

; 296  : 	*(temp) = åéç¬¦;	//hexæ«å°¾æ·»å åéç¬¦
; 297  : 	*(temp + 1) = 0;	//æ«å°¾ç½®0
; 298  : 
; 299  : 	g_len_decode = g_len_decode + len + 1; //ææé¿åº¦å stringé¿åº¦ + åéç¬¦

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	66 c7 04 08 08
	00		 mov	 WORD PTR [eax+ecx], 8
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_len_decode@@3HA ; g_len_decode
  00058	40		 inc	 eax
  00059	03 c1		 add	 eax, ecx
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?g_len_decode@@3HA, eax ; g_len_decode
$LN1@JL_combine:

; 300  : 
; 301  : #endif
; 302  : 
; 303  : }

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?JL_combineString_RECV@@YAXPADH@Z ENDP			; JL_combineString_RECV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_combineInt_RECV@@YAXHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_addr$ = 12						; size = 4
?JL_combineInt_RECV@@YAXHH@Z PROC			; JL_combineInt_RECV, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 230  : 	if (!g_pMappingRecv) return;

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv
  00009	85 c9		 test	 ecx, ecx
  0000b	74 6a		 je	 SHORT $LN1@JL_combine

; 231  : 
; 232  : #ifdef hook_type_sendmessage
; 233  : 	dw2hex(a, g_recv_data + g_len_decode);
; 234  : 
; 235  : 	g_recv_data[g_len_decode + 8] = åéç¬¦;	//hexæ«å°¾æ·»å åéç¬¦
; 236  : 	g_recv_data[g_len_decode + 9] = 0;	//æ«å°¾ç½®0
; 237  : 
; 238  : 	g_len_decode += 9;
; 239  : 
; 240  : #else
; 241  : 	dw2hex(a, (char*)g_pMappingRecv + 64 * 1024 * g_mappingIndex + g_len_decode);

  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex
  00012	c1 e0 10	 shl	 eax, 16			; 00000010H
  00015	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?g_len_decode@@3HA ; g_len_decode
  0001b	03 c1		 add	 eax, ecx
  0001d	50		 push	 eax
  0001e	ff 75 08	 push	 DWORD PTR _a$[ebp]
  00021	e8 00 00 00 00	 call	 ?dw2hex@@YAXHPAD@Z	; dw2hex

; 242  : 
; 243  : 	*((char*)g_pMappingRecv + 64 * 1024 * g_mappingIndex + g_len_decode + 8) = åéç¬¦;	//hexæ«å°¾æ·»å åéç¬¦

  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex
  0002c	83 c4 08	 add	 esp, 8
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv
  00034	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00037	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?g_len_decode@@3HA ; g_len_decode
  0003d	c6 44 01 08 08	 mov	 BYTE PTR [ecx+eax+8], 8

; 244  : 	*((char*)g_pMappingRecv + 64 * 1024 * g_mappingIndex + g_len_decode + 9) = 0;	//æ«å°¾ç½®0

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex
  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv
  0004d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00050	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?g_len_decode@@3HA ; g_len_decode
  00056	c6 44 01 09 00	 mov	 BYTE PTR [ecx+eax+9], 0

; 245  : 
; 246  : 	*(int*)((char*)g_pMappingRecv + 64 * 1024 * g_mappingIndex + 4) = addr;

  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex
  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _addr$[ebp]
  00069	c1 e2 10	 shl	 edx, 16			; 00000010H
  0006c	89 4c 02 04	 mov	 DWORD PTR [edx+eax+4], ecx

; 247  : 
; 248  : 	g_len_decode += 9;

  00070	83 05 00 00 00
	00 09		 add	 DWORD PTR ?g_len_decode@@3HA, 9 ; g_len_decode
$LN1@JL_combine:

; 249  : 
; 250  : #endif
; 251  : }

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?JL_combineInt_RECV@@YAXHH@Z ENDP			; JL_combineInt_RECV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_resetRecv@@YAXXZ
_TEXT	SEGMENT
?JL_resetRecv@@YAXXZ PROC				; JL_resetRecv, COMDAT

; 127  : 	if (!g_pMappingRecv) return;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv
  00006	85 c9		 test	 ecx, ecx
  00008	74 19		 je	 SHORT $LN1@JL_resetRe

; 128  : 
; 129  : #ifdef hook_type_sendmessage
; 130  : 	g_len_decode = 8;		// å°åç¼å· address åå®¹[í¨í·packetë²í¸ addressë´ì©]
; 131  : 	g_recv_data[0] = 0;
; 132  : #else
; 133  : 	g_len_decode = 8;		// å°åç¼å· address åå®¹[í¨í·packetë²í¸ addressë´ì©]
; 134  : 	char* temp = (char*)g_pMappingRecv + 64 * 1024 * g_mappingIndex;

  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex
  0000f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00012	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?g_len_decode@@3HA, 8 ; g_len_decode

; 135  : 	*(int*)temp = 0;

  0001c	c7 04 08 00 00
	00 00		 mov	 DWORD PTR [eax+ecx], 0
$LN1@JL_resetRe:

; 136  : #endif
; 137  : 
; 138  : }

  00023	c3		 ret	 0
?JL_resetRecv@@YAXXZ ENDP				; JL_resetRecv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_savefunc@@YAXH@Z
_TEXT	SEGMENT
_func$ = 8						; size = 4
?JL_savefunc@@YAXH@Z PROC				; JL_savefunc, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 157  : 	if (!g_pMappingRecv) return;

  00003	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pMappingRecv@@3PAHA ; g_pMappingRecv
  00009	85 d2		 test	 edx, edx
  0000b	74 41		 je	 SHORT $LN3@JL_savefun

; 158  : 
; 159  : #ifdef hook_type_sendmessage
; 160  : 	*(int*)g_recv_data = func;
; 161  : #else
; 162  : 	char* temp = (char*)g_pMappingRecv + 64 * 1024 * g_mappingIndex;

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex

; 163  : 	*(WORD*)temp = func;

  00013	66 8b 45 08	 mov	 ax, WORD PTR _func$[ebp]
  00017	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0001a	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax

; 164  : 
; 165  : 	PostThreadMessageA(g_WgThreadID, WM_USER + 1, g_playerAddr, g_mappingIndex);

  0001e	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex
  00024	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_playerAddr@@3HA ; g_playerAddr
  0002a	68 01 04 00 00	 push	 1025			; 00000401H
  0002f	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_WgThreadID@@3HA ; g_WgThreadID
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16

; 166  : 
; 167  : 	g_mappingIndex++;

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_mappingIndex@@3HA ; g_mappingIndex

; 168  : 	if (g_mappingIndex >= 99)

  00040	33 c9		 xor	 ecx, ecx
  00042	40		 inc	 eax
  00043	83 f8 63	 cmp	 eax, 99			; 00000063H
  00046	0f 4d c1	 cmovge	 eax, ecx
  00049	a3 00 00 00 00	 mov	 DWORD PTR ?g_mappingIndex@@3HA, eax ; g_mappingIndex
$LN3@JL_savefun:

; 169  : 	{
; 170  : 		g_mappingIndex = 0;
; 171  : 	}
; 172  : #endif
; 173  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?JL_savefunc@@YAXH@Z ENDP				; JL_savefunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_SetAddr@@YAXHH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?JL_SetAddr@@YAXHH@Z PROC				; JL_SetAddr, COMDAT

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 	switch (index)

  00003	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00006	48		 dec	 eax
  00007	83 f8 03	 cmp	 eax, 3
  0000a	77 31		 ja	 SHORT $LN8@JL_SetAddr
  0000c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@JL_SetAddr[eax*4]
$LN4@JL_SetAddr:

; 336  : 	{
; 337  : 	case JL_INDEX_hwnd_recv:
; 338  : 		g_WgRecvHwnd = value;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00016	a3 00 00 00 00	 mov	 DWORD PTR ?g_WgRecvHwnd@@3HA, eax ; g_WgRecvHwnd

; 354  : 		}
; 355  : 
; 356  : 	default:
; 357  : 		break;
; 358  : 	}
; 359  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
$LN5@JL_SetAddr:

; 339  : 		break;
; 340  : 
; 341  : 	case JL_INDEX_PLAYER_ADDRESS:
; 342  : 		g_playerAddr = value;

  0001d	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?g_playerAddr@@3HA, eax ; g_playerAddr

; 354  : 		}
; 355  : 
; 356  : 	default:
; 357  : 		break;
; 358  : 	}
; 359  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN6@JL_SetAddr:

; 343  : 		break;
; 344  : 
; 345  : 	case JL_INDEX_threadID_æ¶å:
; 346  : 		g_WgThreadID = value;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0002a	a3 00 00 00 00	 mov	 DWORD PTR ?g_WgThreadID@@3HA, eax ; g_WgThreadID

; 354  : 		}
; 355  : 
; 356  : 	default:
; 357  : 		break;
; 358  : 	}
; 359  : }

  0002f	5d		 pop	 ebp

; 347  : 		JL_SendAddrToWg();

  00030	e9 00 00 00 00	 jmp	 ?JL_SendAddrToWg@@YAXXZ	; JL_SendAddrToWg
$LN7@JL_SetAddr:

; 348  : 		break;
; 349  : 
; 350  : 	case JL_INDEX_addrOpenMapping:
; 351  : 		__asm{
; 352  : 			call value;

  00035	ff 55 0c	 call	 DWORD PTR _value$[ebp]

; 353  : 			mov g_pMappingRecv, eax;

  00038	a3 00 00 00 00	 mov	 DWORD PTR ?g_pMappingRecv@@3PAHA, eax ; g_pMappingRecv
$LN8@JL_SetAddr:

; 354  : 		}
; 355  : 
; 356  : 	default:
; 357  : 		break;
; 358  : 	}
; 359  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
  0003f	90		 npad	 1
$LN10@JL_SetAddr:
  00040	00 00 00 00	 DD	 $LN5@JL_SetAddr
  00044	00 00 00 00	 DD	 $LN6@JL_SetAddr
  00048	00 00 00 00	 DD	 $LN7@JL_SetAddr
  0004c	00 00 00 00	 DD	 $LN4@JL_SetAddr
?JL_SetAddr@@YAXHH@Z ENDP				; JL_SetAddr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_GetAddress@@YAHH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?JL_GetAddress@@YAHH@Z PROC				; JL_GetAddress, COMDAT

; 555  : 
; 556  : 
; 557  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 558  : }

  00002	c3		 ret	 0
?JL_GetAddress@@YAHH@Z ENDP				; JL_GetAddress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_SendAddrToWg@@YAXXZ
_TEXT	SEGMENT
?JL_SendAddrToWg@@YAXXZ PROC				; JL_SendAddrToWg, COMDAT

; 781  : 	PostThreadMsg(JL_INDEX_x, (int)&nowGx);

  00000	68 00 00 00 00	 push	 OFFSET ?nowGx@@3HA	; nowGx
  00005	6a 05		 push	 5
  00007	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 782  : 	PostThreadMsg(JL_INDEX_y, (int)&nowGy);

  0000c	68 00 00 00 00	 push	 OFFSET ?nowGy@@3HA	; nowGy
  00011	6a 06		 push	 6
  00013	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 783  : 	PostThreadMsg(JL_INDEX_dir, (int)&pc.dir);

  00018	68 0c 00 00 00	 push	 OFFSET ?pc@@3UPC@@A+12
  0001d	6a 07		 push	 7
  0001f	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 784  : 	PostThreadMsg(JL_INDEX_print, (int)&StockChatBufferLineExt);

  00024	68 00 00 00 00	 push	 OFFSET ?StockChatBufferLineExt@@YAXPADEHH@Z ; StockChatBufferLineExt
  00029	6a 08		 push	 8
  0002b	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 785  : 	PostThreadMsg(JL_INDEX_å¾æ¡£ç§»å¨, (int)&setWarpMap);

  00030	68 00 00 00 00	 push	 OFFSET ?setWarpMap@@YAXHH@Z ; setWarpMap
  00035	6a 09		 push	 9
  00037	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 786  : 	PostThreadMsg(JL_INDEX_å¾æ¡£è½¬å¨, (int)&setPcDir);

  0003c	68 00 00 00 00	 push	 OFFSET ?setPcDir@@YAXH@Z ; setPcDir
  00041	6a 0a		 push	 10			; 0000000aH
  00043	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 787  : 	PostThreadMsg(JL_INDEX_å¿«éèµ°è·¯, (int)&fastWalkFlag);

  00048	68 00 00 00 00	 push	 OFFSET ?fastWalkFlag@@3HA ; fastWalkFlag
  0004d	6a 0b		 push	 11			; 0000000bH
  0004f	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 788  : 	PostThreadMsg(JL_INDEX_GameFlag1, (int)&ProcNo);

  00054	68 00 00 00 00	 push	 OFFSET ?ProcNo@@3IA	; ProcNo
  00059	6a 0c		 push	 12			; 0000000cH
  0005b	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg
  00060	83 c4 40	 add	 esp, 64			; 00000040H

; 789  : 	PostThreadMsg(JL_INDEX_GameFlag2, (int)&SubProcNo);

  00063	68 00 00 00 00	 push	 OFFSET ?SubProcNo@@3IA	; SubProcNo
  00068	6a 0d		 push	 13			; 0000000dH
  0006a	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 790  : 	PostThreadMsg(JL_INDEX_mouseX, (int)&mouse.nowPoint.x);

  0006f	68 00 00 00 00	 push	 OFFSET ?mouse@@3UMOUSE@@A ; mouse
  00074	6a 0e		 push	 14			; 0000000eH
  00076	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 791  : 	PostThreadMsg(JL_INDEX_mouseY, (int)&mouse.nowPoint.y);

  0007b	68 04 00 00 00	 push	 OFFSET ?mouse@@3UMOUSE@@A+4
  00080	6a 0f		 push	 15			; 0000000fH
  00082	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 792  : 	PostThreadMsg(JL_INDEX_socket, (int)&sockfd);

  00087	68 00 00 00 00	 push	 OFFSET ?sockfd@@3IA	; sockfd
  0008c	6a 10		 push	 16			; 00000010H
  0008e	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 793  : 	PostThreadMsg(JL_INDEX_å é1, (int)&NO_DRAW_MAX_CNT);		//[ê°ì1]

  00093	68 00 00 00 00	 push	 OFFSET ?NO_DRAW_MAX_CNT@@3HA ; NO_DRAW_MAX_CNT
  00098	6a 11		 push	 17			; 00000011H
  0009a	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 794  : //	PostThreadMsg(JL_INDEX_å é2, (int)&ProcTime);				//[ê°ì2]
; 795  : 	extern DWORD SystemTime;
; 796  : 	PostThreadMsg(JL_INDEX_å é2, (int)&SystemTime);			//[ê°ì2]

  0009f	68 00 00 00 00	 push	 OFFSET ?SystemTime@@3KA	; SystemTime
  000a4	6a 12		 push	 18			; 00000012H
  000a6	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 797  : 	PostThreadMsg(JL_INDEX_å¿«éææ, (int)&g_flag_FastFight);	//[ì¾ì ì í¬/ì ì ì í¬]

  000ab	68 00 00 00 00	 push	 OFFSET ?g_flag_FastFight@@3HA ; g_flag_FastFight
  000b0	6a 13		 push	 19			; 00000013H
  000b2	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 798  : 	PostThreadMsg(JL_INDEX_èªå¨ç»é, (int)&g_flag_èªå¨ç»é);	//[ìë ë¡ê·¸ì¸]

  000b7	68 00 00 00 00	 push	 OFFSET ?g_flag_í»?Ôô?@@3HA ; g_flag_í»?Ôô?
  000bc	6a 14		 push	 20			; 00000014H
  000be	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg
  000c3	83 c4 40	 add	 esp, 64			; 00000040H

; 799  : 	PostThreadMsg(JL_INDEX_ä¸»æº, (int)&g_sel_ä¸»æº);				//[ë¤ìí ìë¯¸ê° ìì: ë³¸ì²´/ìë²/í¸ì¤í¸ ì»´í¨í° ë±]

  000c6	68 00 00 00 00	 push	 OFFSET ?g_sel_ñ«Ïõ@@3HA	; g_sel_ñ«Ïõ
  000cb	6a 15		 push	 21			; 00000015H
  000cd	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 800  : 	PostThreadMsg(JL_INDEX_å¯æº, (int)&g_sel_å¯æº);				//[ë¤ìí ìë¯¸ê° ìì : ë³´ì¡°ì²´ / ë³´ì¡° ìë² / ë³´ì¡° ì»´í¨í° ë±]

  000d2	68 00 00 00 00	 push	 OFFSET ?g_sel_ÜùÏõ@@3HA	; g_sel_ÜùÏõ
  000d7	6a 16		 push	 22			; 00000016H
  000d9	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 801  : 	PostThreadMsg(JL_INDEX_äººç©, (int)&g_sel_äººç©);				//[ì¸ë¬¼/ìºë¦­í°],  [ì¸ë¬¼/ìºë¦­í°])

  000de	68 00 00 00 00	 push	 OFFSET ?g_sel_ìÑÚª@@3HA	; g_sel_ìÑÚª
  000e3	6a 17		 push	 23			; 00000017H
  000e5	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 802  : 	PostThreadMsg(JL_INDEX_USERNAME, (int)&idKey);

  000ea	68 00 00 00 00	 push	 OFFSET ?idKey@@3USTR_BUFFER@@A ; idKey
  000ef	6a 18		 push	 24			; 00000018H
  000f1	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 803  : 	PostThreadMsg(JL_INDEX_PASSWORD, (int)&passwd);	

  000f6	68 00 00 00 00	 push	 OFFSET ?passwd@@3USTR_BUFFER@@A ; passwd
  000fb	6a 19		 push	 25			; 00000019H
  000fd	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 804  : 	PostThreadMsg(JL_INDEX_æ­çº¿éç», (int)&g_flag_æ­çº¿éç»);	//[ë¡ê·¸ì¤í ì¬ ë¡ê·¸ì¸]

  00102	68 00 00 00 00	 push	 OFFSET ?g_flag_??ñìÔô@@3HA ; g_flag_??ñìÔô
  00107	6a 1a		 push	 26			; 0000001aH
  00109	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 805  : 	PostThreadMsg(JL_INDEX_éèç³å¨, (int)&g_hideSA);

  0010e	68 00 00 00 00	 push	 OFFSET ?g_hideSA@@3HA	; g_hideSA
  00113	6a 1b		 push	 27			; 0000001bH
  00115	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 806  : 	PostThreadMsg(JL_INDEX_ç»å½MAX, (int)åå¥serverMax);

  0011a	68 00 00 00 00	 push	 OFFSET ??ìýserverMax@@YAXPADH@Z ; ?ìýserverMax
  0011f	6a 1c		 push	 28			; 0000001cH
  00121	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg
  00126	83 c4 40	 add	 esp, 64			; 00000040H

; 807  : 	PostThreadMsg(JL_INDEX_SHOWTITLE, (int)JL_ShowTitle);

  00129	68 00 00 00 00	 push	 OFFSET ?JL_ShowTitle@@YAXPADHHHHH@Z ; JL_ShowTitle
  0012e	6a 1d		 push	 29			; 0000001dH
  00130	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 808  : 	PostThreadMsg(JL_INDEX_CLOSEDLG, (int)&wnCloseFlag);

  00135	68 00 00 00 00	 push	 OFFSET ?wnCloseFlag@@3FA ; wnCloseFlag
  0013a	6a 1e		 push	 30			; 0000001eH
  0013c	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 809  : 	PostThreadMsg(JL_INDEX_RESOMODE, (int)JL_RESOMODE);

  00141	68 00 00 00 00	 push	 OFFSET ?JL_RESOMODE@@YAXH@Z ; JL_RESOMODE
  00146	6a 1f		 push	 31			; 0000001fH
  00148	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 810  : 	PostThreadMsg(JL_INDEX_SetResoMode, (int)SetResoMode);

  0014d	68 00 00 00 00	 push	 OFFSET ?SetResoMode@@YAXH@Z ; SetResoMode
  00152	6a 20		 push	 32			; 00000020H
  00154	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 811  : 	PostThreadMsg(JL_INDEX_ChangeWindowMode, (int)ChangeWindowMode);

  00159	68 00 00 00 00	 push	 OFFSET ?ChangeWindowMode@@YAXXZ ; ChangeWindowMode
  0015e	6a 21		 push	 33			; 00000021H
  00160	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 812  : 	PostThreadMsg(JL_INDEX_RecoverDirectDraw, (int)RecoverDirectDraw);

  00165	68 00 00 00 00	 push	 OFFSET ?RecoverDirectDraw@@YAXXZ ; RecoverDirectDraw
  0016a	6a 22		 push	 34			; 00000022H
  0016c	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 813  : 	PostThreadMsg(JL_INDEX_æ¸é¤å¨å´äººç©, (int)JL_æ¸é¤å¨å´äººç©);	//[ì£¼ë³ ì¸ë¬¼/ìºë¦­í° (ì¹êµ¬) ì ê±°, [ì£¼ë³ ì¸ë¬¼/ìºë¦­í° (ì¹êµ¬) 

  00171	68 00 00 00 00	 push	 OFFSET ?JL_?ð¶ñ²?ìÑÚª@@YAXXZ ; JL_?ð¶ñ²?ìÑÚª
  00176	6a 23		 push	 35			; 00000023H
  00178	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 814  : 	PostThreadMsg(JL_INDEX_music_end, (int)t_music_end);

  0017d	68 00 00 00 00	 push	 OFFSET ?t_music_end@@YAXXZ ; t_music_end
  00182	6a 24		 push	 36			; 00000024H
  00184	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg
  00189	83 c4 40	 add	 esp, 64			; 00000040H

; 815  : 	PostThreadMsg(JL_INDEX_å¡æ¡£å¤ä½, (int)&gå¡æ¡£å¤ä½);			//[ì¹´ëíì¼ card file ë¦¬ì], 

  0018c	68 00 00 00 00	 push	 OFFSET ?g???êÈ@@3HA	; g???êÈ
  00191	6a 25		 push	 37			; 00000025H
  00193	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 816  : 	PostThreadMsg(JL_INDEX_ReadMap, (int)&readMap);				//[ë¡ê·¸ì¤í]

  00198	68 00 00 00 00	 push	 OFFSET ?readMap@@YAHHHHHHPAG00@Z ; readMap
  0019d	6a 26		 push	 38			; 00000026H
  0019f	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 817  : 	PostThreadMsg(JL_INDEX_ReadHitMap, (int)&readHitMap);

  001a4	68 00 00 00 00	 push	 OFFSET ?readHitMap@@YAXHHHHPAG000@Z ; readHitMap
  001a9	6a 27		 push	 39			; 00000027H
  001ab	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 818  : 	PostThreadMsg(JL_INDEX_MakeWindow, (int)&openServerWindow);

  001b0	68 00 00 00 00	 push	 OFFSET ?openServerWindow@@YAXHHHHPAD@Z ; openServerWindow
  001b5	6a 28		 push	 40			; 00000028H
  001b7	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 819  : 	PostThreadMsg(JL_INDEX_7å·å, (int)&lssproto_EN_recv);		//[7ë² í¨í¤ì§]

  001bc	68 00 00 00 00	 push	 OFFSET ?lssproto_EN_recv@@YAXHHH@Z ; lssproto_EN_recv
  001c1	6a 29		 push	 41			; 00000029H
  001c3	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 820  : 	PostThreadMsg(JL_INDEX_15å·å, (int)&lssproto_B_recv);		//[15ë² í¨í¤ì§]

  001c8	68 00 00 00 00	 push	 OFFSET ?lssproto_B_recv@@YAXHPAD@Z ; lssproto_B_recv
  001cd	6a 2a		 push	 42			; 0000002aH
  001cf	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 821  : 	PostThreadMsg(JL_INDEX_LuaLoadMem, (int)&JL_LuaLoadMem);

  001d4	68 00 00 00 00	 push	 OFFSET ?JL_LuaLoadMem@@YAHPAD@Z ; JL_LuaLoadMem
  001d9	6a 2d		 push	 45			; 0000002dH
  001db	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 822  : 	PostThreadMsg(JL_INDEX_showBmpNo, (int)&g_showBmpNo);

  001e0	68 00 00 00 00	 push	 OFFSET ?g_showBmpNo@@3HA ; g_showBmpNo
  001e5	6a 2f		 push	 47			; 0000002fH
  001e7	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg
  001ec	83 c4 40	 add	 esp, 64			; 00000040H

; 823  : 	PostThreadMsg(JL_INDEX_CPUä¼å, (int)&g_CPUä¼å);			//[CPU ìµì í]

  001ef	68 00 00 00 00	 push	 OFFSET ?g_CPU?ûù@@3HA	; g_CPU?ûù
  001f4	6a 30		 push	 48			; 00000030H
  001f6	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 824  : 	PostThreadMsg(JL_INDEX_æ­çº¿, (int)æ­çº¿);					//[ë¡ê·¸ì¤í]

  001fb	68 00 00 00 00	 push	 OFFSET ???@@YAXXZ	; ??
  00200	6a 31		 push	 49			; 00000031H
  00202	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 825  : 
; 826  : 	
; 827  : #ifdef _Jason_ä¿®å¤å¤æåç»é®é¢					//[íµ ì¬ì©ì ë¡ê·¸ì¸ ë¬¸ì  ìì ]
; 828  : 	PostThreadMsg(JL_INDEX_windowTypeWN, (int)&windowTypeWN);

  00207	68 00 00 00 00	 push	 OFFSET ?windowTypeWN@@3HA ; windowTypeWN
  0020c	6a 32		 push	 50			; 00000032H
  0020e	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 829  : 	PostThreadMsg(JL_INDEX_LUA_WINDOW_OPEN, (int)&LUA_WINDOW_OPEN);

  00213	68 00 00 00 00	 push	 OFFSET ?LUA_WINDOW_OPEN@@3_NA ; LUA_WINDOW_OPEN
  00218	6a 33		 push	 51			; 00000033H
  0021a	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg

; 830  : 	PostThreadMsg(JL_INDEX_TestFunc, (int)Test);

  0021f	68 00 00 00 00	 push	 OFFSET ?Test@@YAXXZ	; Test
  00224	6a 34		 push	 52			; 00000034H
  00226	e8 00 00 00 00	 call	 ?PostThreadMsg@@YAXHH@Z	; PostThreadMsg
  0022b	83 c4 28	 add	 esp, 40			; 00000028H

; 831  : #endif
; 832  : 	Sleep(200);

  0022e	68 c8 00 00 00	 push	 200			; 000000c8H
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 833  : }

  00239	c3		 ret	 0
?JL_SendAddrToWg@@YAXXZ ENDP				; JL_SendAddrToWg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_?Óðèâ??Ôô?øÐ@@YAXXZ
_TEXT	SEGMENT
?JL_?Óðèâ??Ôô?øÐ@@YAXXZ PROC				; JL_?Óðèâ??Ôô?øÐ, COMDAT

; 742  : 	SendMessage((HWND)g_WgRecvHwnd, WM_USER + 2, (WPARAM)g_playerAddr, (LPARAM)sockfd);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00006	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_playerAddr@@3HA ; g_playerAddr
  0000c	68 02 04 00 00	 push	 1026			; 00000402H
  00011	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_WgRecvHwnd@@3HA ; g_WgRecvHwnd
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 743  : //	PostThreadMessageA(g_WgThreadID, WM_USER + 10, g_playerAddr, 0);
; 744  : }

  0001d	c3		 ret	 0
?JL_?Óðèâ??Ôô?øÐ@@YAXXZ ENDP				; JL_?Óðèâ??Ôô?øÐ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?JL_SHOP@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -1004					; size = 1000
__$ArrayPad$ = -4					; size = 4
_index$ = 8						; size = 4
?JL_SHOP@@YAXH@Z PROC					; JL_SHOP, COMDAT

; 995  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 03 00
	00		 sub	 esp, 1004		; 000003ecH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 996  : 	char buffer[1000];
; 997  : 	int iChecksum = 0;
; 998  : 
; 999  : 	buffer[0] = '\0';
; 1000 : 	iChecksum += util_mkint(buffer, index);

  00013	ff 75 08	 push	 DWORD PTR _index$[ebp]
  00016	8d 85 14 fc ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0001c	c6 85 14 fc ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1001 : 	util_mkint(buffer, iChecksum);  

  00029	50		 push	 eax
  0002a	8d 85 14 fc ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1002 : }

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	33 cd		 xor	 ecx, ebp
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?JL_SHOP@@YAXH@Z ENDP					; JL_SHOP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?EncryptBuffer@@YAHPADHPAII@Z
_TEXT	SEGMENT
tv193 = 8						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_key$ = 16						; size = 4
_delta$ = 20						; size = 4
?EncryptBuffer@@YAHPADHPAII@Z PROC			; EncryptBuffer, COMDAT

; 1046 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1047 : 	char *p = buffer;
; 1048 : 
; 1049 : 	int len = (size % 8 ? size / 8 + 1 : size / 8) * 8;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  00006	b9 08 00 00 00	 mov	 ecx, 8
  0000b	99		 cdq
  0000c	f7 f9		 idiv	 ecx
  0000e	53		 push	 ebx
  0000f	85 d2		 test	 edx, edx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _buffer$[ebp]
  00015	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  00018	0f 44 d8	 cmove	 ebx, eax
  0001b	c1 e3 03	 shl	 ebx, 3
  0001e	57		 push	 edi

; 1050 : 
; 1051 : 	int leftSize = len;

  0001f	8b fb		 mov	 edi, ebx

; 1052 : 
; 1053 : 	while (p < buffer + len &&

  00021	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  00024	89 45 08	 mov	 DWORD PTR tv193[ebp], eax
  00027	3b f0		 cmp	 esi, eax
  00029	73 28		 jae	 SHORT $LN11@EncryptBuf
  0002b	0f 1f 44 00 00	 npad	 5
$LL2@EncryptBuf:
  00030	83 ff 08	 cmp	 edi, 8
  00033	72 1e		 jb	 SHORT $LN11@EncryptBuf

; 1054 : 		leftSize >= sizeof(unsigned int) * 2)
; 1055 : 	{
; 1056 : 		EncryptTEA((unsigned int *)p, (unsigned int *)(p + sizeof(unsigned int)), key, delta);

  00035	ff 75 14	 push	 DWORD PTR _delta$[ebp]
  00038	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0003b	ff 75 10	 push	 DWORD PTR _key$[ebp]
  0003e	51		 push	 ecx
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?EncryptTEA@@YAXPAI00I@Z ; EncryptTEA

; 1057 : 		p += sizeof(unsigned int) * 2;

  00045	83 c6 08	 add	 esi, 8
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 1058 : 
; 1059 : 		leftSize -= sizeof(unsigned int) * 2;

  0004b	83 ef 08	 sub	 edi, 8
  0004e	3b 75 08	 cmp	 esi, DWORD PTR tv193[ebp]
  00051	72 dd		 jb	 SHORT $LL2@EncryptBuf
$LN11@EncryptBuf:
  00053	5f		 pop	 edi

; 1060 : 	}
; 1061 : 	return len;
; 1062 : }

  00054	5e		 pop	 esi
  00055	8b c3		 mov	 eax, ebx
  00057	5b		 pop	 ebx
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?EncryptBuffer@@YAHPADHPAII@Z ENDP			; EncryptBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\JL_func.cpp
;	COMDAT ?DecryptBuffer@@YAXPADHPAII@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_key$ = 16						; size = 4
_delta$ = 20						; size = 4
?DecryptBuffer@@YAXPADHPAII@Z PROC			; DecryptBuffer, COMDAT

; 1066 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1067 : 	char *p = buffer;

  00005	8b 75 08	 mov	 esi, DWORD PTR _buffer$[ebp]
  00008	57		 push	 edi

; 1068 : 
; 1069 : 	int leftSize = size;

  00009	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]

; 1070 : 
; 1071 : 	while (p < buffer + size &&

  0000c	8d 1c 3e	 lea	 ebx, DWORD PTR [esi+edi]
  0000f	3b f3		 cmp	 esi, ebx
  00011	73 22		 jae	 SHORT $LN9@DecryptBuf
$LL2@DecryptBuf:
  00013	83 ff 08	 cmp	 edi, 8
  00016	72 1d		 jb	 SHORT $LN9@DecryptBuf

; 1072 : 		leftSize >= sizeof(unsigned int) * 2)
; 1073 : 	{
; 1074 : 		DecryptTEA((unsigned int *)p, (unsigned int *)(p + sizeof(unsigned int)), key, delta);

  00018	ff 75 14	 push	 DWORD PTR _delta$[ebp]
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	ff 75 10	 push	 DWORD PTR _key$[ebp]
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ?DecryptTEA@@YAXPAI00I@Z ; DecryptTEA

; 1075 : 		p += sizeof(unsigned int) * 2;

  00028	83 c6 08	 add	 esi, 8
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 1076 : 
; 1077 : 		leftSize -= sizeof(unsigned int) * 2;

  0002e	83 ef 08	 sub	 edi, 8
  00031	3b f3		 cmp	 esi, ebx
  00033	72 de		 jb	 SHORT $LL2@DecryptBuf
$LN9@DecryptBuf:
  00035	5f		 pop	 edi

; 1078 : 	}
; 1079 : }

  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?DecryptBuffer@@YAXPADHPAII@Z ENDP			; DecryptBuffer
_TEXT	ENDS
END
