; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	\\VBOXSVR\_stoneage\repos\ssm-sacli\Release\netmain.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?net_writebuf@@3PADA				; net_writebuf
PUBLIC	?net_readbuf@@3PADA				; net_readbuf
PUBLIC	?net_readbuflen@@3HA				; net_readbuflen
PUBLIC	?net_writebuflen@@3HA				; net_writebuflen
PUBLIC	?sockfd@@3IA					; sockfd
PUBLIC	?server_choosed@@3HA				; server_choosed
PUBLIC	?init_net@@3HA					; init_net
PUBLIC	?disconnectServerFlag@@3HA			; disconnectServerFlag
PUBLIC	?oldDisconnectServerFlag@@3HA			; oldDisconnectServerFlag
PUBLIC	?isWGS7@@3HA					; isWGS7
PUBLIC	?rpc_linebuffer@@3PADA				; rpc_linebuffer
PUBLIC	?gmsv@@3PAUgameserver@@A			; gmsv
_BSS	SEGMENT
?net_writebuf@@3PADA DD 01H DUP (?)			; net_writebuf
?net_readbuf@@3PADA DD 01H DUP (?)			; net_readbuf
?net_readbuflen@@3HA DD 01H DUP (?)			; net_readbuflen
?net_writebuflen@@3HA DD 01H DUP (?)			; net_writebuflen
?sockfd@@3IA DD	01H DUP (?)				; sockfd
?server_choosed@@3HA DD 01H DUP (?)			; server_choosed
?init_net@@3HA DD 01H DUP (?)				; init_net
?disconnectServerFlag@@3HA DD 01H DUP (?)		; disconnectServerFlag
?oldDisconnectServerFlag@@3HA DD 01H DUP (?)		; oldDisconnectServerFlag
?isWGS7@@3HA DD	01H DUP (?)				; isWGS7
?rpc_linebuffer@@3PADA DB 04000H DUP (?)		; rpc_linebuffer
_BSS	ENDS
_DATA	SEGMENT
?gmsv@@3PAUgameserver@@A DB 031H			; gmsv
	DB	'222.186.51.178', 00H
	ORG $+112
	DB	'9065', 00H
	ORG $+59
	DB	0e5H, 0fdH, 0cdH, 0fdH, 0f5H, 0f3H, '???', 0cdH, 0a3H, 0d8H
	DB	0fcH, '?', 0d9H, 0a5H, 0e8H, 0e2H, '??', 0eaH, 0f3H, 0efH, 0c8H
	DB	0dfH, 0beH, ',?', 0f7H, 0eaH, 0e8H, 0e2H, '??', 0dbH, 0dcH, 0d9H
	DB	0a3H, '?', 0e6H, 0d4H, 0fdH, 0a8H, 0f1H, 0ecH, 0e3H, 0e6H, '??'
	DB	0a1H, 0a3H, 00H
	ORG $+12
	DB	031H
	DB	'amoijing.f3322.net', 00H
	ORG $+108
	DB	'9066', 00H
	ORG $+59
	DB	0e9H, 0c4H, 0ceH, 0b7H, 0d7H, 0e2H, '?', 0d9H, 0bcH, 0e3H
	DB	0d2H, '?', 0faH, 0bcH, 0e8H, 0e2H, '?,', 0dcH, 0f4H, 0faH, 0bcH
	DB	0eeH, 0dcH, '??', 0d3H, 0fcH, '?', 0d4H, 0b8H, '?', 0cbH, 0ecH
	DB	'??', 0a3H, 0acH, '?teamview??', 0a1H, 0a3H, 00H
	ORG $+12
	DB	031H
	DB	'222.186.51.178', 00H
	ORG $+112
	DB	'9095', 00H
	ORG $+59
	DB	0e5H, 0fdH, 0cdH, 0fdH, 0e3H, 0c0H, '360,?', 0d3H, 0fcH, 0d6H
	DB	0f5H, '?', 0eaH, 0f3H, 'zhudongfangyu', 0eeH, 0dcH, '?', 0efH, 0efH
	DB	0a3H, 0acH, '?', 0d3H, 0fcH, 0f1H, 0abH, '?', 0dbH, 0c1H, 0e5H
	DB	0d9H, '??', 0a1H, 0a3H, 00H
	ORG $+11
	DB	031H
	DB	'amoijing.f3322.net', 00H
	ORG $+108
	DB	'9065', 00H
	ORG $+59
	DB	0d3H, 0deH, 0caH, 0a8H, '?', 0dcH, 0f4H, 0faH, 0bcH, 0eeH
	DB	0dcH, '???', 0d4H, 0b8H, '??', 0a3H, 0acH, 0f1H, 0ecH, '?????', 0a3H
	DB	0acH, '?', 0cdH, 0a7H, '???', 0a1H, 0a3H, 00H
	ORG $+26
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	00H
	ORG $+63
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	00H
	ORG $+63
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	00H
	ORG $+63
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	00H
	ORG $+63
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	00H
	ORG $+63
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	00H
	ORG $+63
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	DB	031H
	DB	'192.168.1.25', 00H
	ORG $+114
	DB	'9065', 00H
	ORG $+59
	DB	' ', 00H
	ORG $+62
	ORG $+29952
_DATA	ENDS
PUBLIC	?getServerInfo@@YAHHPADPAF@Z			; getServerInfo
PUBLIC	?networkLoop@@YAXXZ				; networkLoop
PUBLIC	?initNet@@YAHXZ					; initNet
PUBLIC	?cleanupNetwork@@YAXXZ				; cleanupNetwork
PUBLIC	?appendReadBuf@@YAHPADH@Z			; appendReadBuf
PUBLIC	?appendWriteBuf@@YAHHPADH@Z			; appendWriteBuf
PUBLIC	?shiftReadBuf@@YAHH@Z				; shiftReadBuf
PUBLIC	?shiftWriteBuf@@YAHH@Z				; shiftWriteBuf
PUBLIC	?getLineFromReadBuf@@YAHPADH@Z			; getLineFromReadBuf
PUBLIC	?sendn@@YAHIPADH@Z				; sendn
PUBLIC	??_C@_04KGMIJBHM@hoge@				; `string'
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__VirtualProtect@16:PROC
EXTRN	___WSAFDIsSet@8:PROC
EXTRN	_closesocket@4:PROC
EXTRN	_recv@16:PROC
EXTRN	_select@20:PROC
EXTRN	_send@16:PROC
EXTRN	_WSAStartup@8:PROC
EXTRN	_WSACleanup@0:PROC
EXTRN	_WSAGetLastError@0:PROC
EXTRN	_atoi:PROC
EXTRN	?ChangeProc@@YAXH@Z:PROC			; ChangeProc
EXTRN	?JL_savefunc@@YAXH@Z:PROC			; JL_savefunc
EXTRN	?SaDispatchMessage@@YAHHPAD@Z:PROC		; SaDispatchMessage
EXTRN	?lssproto_Echo_send@@YAXHPAD@Z:PROC		; lssproto_Echo_send
EXTRN	?old_lssproto_Echo_send@@YAXHPAD@Z:PROC		; old_lssproto_Echo_send
EXTRN	?lssproto_InitClient@@YAHP6AHHPADH@ZHH@Z:PROC	; lssproto_InitClient
EXTRN	?lssproto_CleanupClient@@YAXXZ:PROC		; lssproto_CleanupClient
EXTRN	?lssproto_ClientDispatchMessage@@YAHHPAD@Z:PROC	; lssproto_ClientDispatchMessage
EXTRN	?ReadWGSMessage@@YAHPADAAH@Z:PROC		; ReadWGSMessage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?bNewServer@@3HA:DWORD				; bNewServer
EXTRN	?dwServer@@3KA:DWORD				; dwServer
EXTRN	?testCnt@@3HA:DWORD				; testCnt
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?writetime@?1??networkLoop@@YAXXZ@4IA
_BSS	SEGMENT
?writetime@?1??networkLoop@@YAXXZ@4IA DD 01H DUP (?)	; `networkLoop'::`2'::writetime
_BSS	ENDS
;	COMDAT ?$TSS0@?1??networkLoop@@YAXXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??networkLoop@@YAXXZ@4HA DD 01H DUP (?)	; `networkLoop'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_C@_04KGMIJBHM@hoge@
CONST	SEGMENT
??_C@_04KGMIJBHM@hoge@ DB 'hoge', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?networkLoop@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?networkLoop@@YAXXZ$0
__ehfuncinfo$?networkLoop@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?networkLoop@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?sendn@@YAHIPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_buffer$ = 12						; size = 4
_len$ = 16						; size = 4
?sendn@@YAHIPADH@Z PROC					; sendn, COMDAT

; 665  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 666  : 	int total = 0;

  00004	33 f6		 xor	 esi, esi

; 667  : 	int r;
; 668  : 
; 669  : 	if( server_choosed == 0 )

  00006	39 35 00 00 00
	00		 cmp	 DWORD PTR ?server_choosed@@3HA, esi ; server_choosed
  0000c	75 06		 jne	 SHORT $LN9@sendn

; 670  : 		return -100;

  0000e	8d 46 9c	 lea	 eax, DWORD PTR [esi-100]
  00011	5e		 pop	 esi

; 680  : 	}
; 681  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
$LN9@sendn:
  00014	53		 push	 ebx

; 671  : 
; 672  : 	while( 1 )
; 673  : 	{
; 674  : 		r = send( s, buffer, len, 0 );

  00015	8b 5d 0c	 mov	 ebx, DWORD PTR _buffer$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  0001c	6a 00		 push	 0
  0001e	57		 push	 edi
  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00023	e8 00 00 00 00	 call	 _send@16

; 675  : 		if( r == SOCKET_ERROR )

  00028	83 f8 ff	 cmp	 eax, -1
  0002b	74 1a		 je	 SHORT $LN10@sendn
  0002d	0f 1f 00	 npad	 3
$LL2@sendn:

; 677  : 		total += r;

  00030	03 f0		 add	 esi, eax

; 678  : 		if( total == len )

  00032	3b f7		 cmp	 esi, edi
  00034	74 19		 je	 SHORT $LN11@sendn

; 671  : 
; 672  : 	while( 1 )
; 673  : 	{
; 674  : 		r = send( s, buffer, len, 0 );

  00036	6a 00		 push	 0
  00038	57		 push	 edi
  00039	53		 push	 ebx
  0003a	ff 75 08	 push	 DWORD PTR _s$[ebp]
  0003d	e8 00 00 00 00	 call	 _send@16

; 675  : 		if( r == SOCKET_ERROR )

  00042	83 f8 ff	 cmp	 eax, -1
  00045	75 e9		 jne	 SHORT $LL2@sendn
$LN10@sendn:
  00047	5f		 pop	 edi
  00048	5b		 pop	 ebx

; 676  : 			return  SOCKET_ERROR;

  00049	83 c8 ff	 or	 eax, -1
  0004c	5e		 pop	 esi

; 680  : 	}
; 681  : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN11@sendn:
  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx

; 679  : 			return total;

  00051	8b c6		 mov	 eax, esi
  00053	5e		 pop	 esi

; 680  : 	}
; 681  : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?sendn@@YAHIPADH@Z ENDP					; sendn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?getLineFromReadBuf@@YAHPADH@Z
_TEXT	SEGMENT
_output$ = 8						; size = 4
_maxlen$ = 12						; size = 4
?getLineFromReadBuf@@YAHPADH@Z PROC			; getLineFromReadBuf, COMDAT

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 625  : 	int i;
; 626  : 
; 627  : 	if( server_choosed == 0 )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?server_choosed@@3HA, 0 ; server_choosed
  0000a	75 07		 jne	 SHORT $LN8@getLineFro

; 628  : 		return -100;

  0000c	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 657  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN8@getLineFro:

; 629  : 	int j;
; 630  : 	for( i = 0; i < net_readbuflen && i < (maxlen-1); i++ )

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?net_readbuflen@@3HA ; net_readbuflen
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	33 ff		 xor	 edi, edi
  0001d	85 c9		 test	 ecx, ecx
  0001f	7e 22		 jle	 SHORT $LN3@getLineFro
  00021	8b 55 0c	 mov	 edx, DWORD PTR _maxlen$[ebp]
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  00029	4a		 dec	 edx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@getLineFro:
  00030	3b fa		 cmp	 edi, edx
  00032	7d 0f		 jge	 SHORT $LN3@getLineFro

; 631  : 	{
; 632  : 		if( net_readbuf[i] == '\n' )

  00034	80 3c 38 0a	 cmp	 BYTE PTR [eax+edi], 10	; 0000000aH
  00038	8d 77 01	 lea	 esi, DWORD PTR [edi+1]
  0003b	74 0d		 je	 SHORT $LN14@getLineFro

; 629  : 	int j;
; 630  : 	for( i = 0; i < net_readbuflen && i < (maxlen-1); i++ )

  0003d	8b fe		 mov	 edi, esi
  0003f	3b f9		 cmp	 edi, ecx
  00041	7c ed		 jl	 SHORT $LL4@getLineFro
$LN3@getLineFro:
  00043	5f		 pop	 edi

; 654  : 		}
; 655  : 	}
; 656  : 	return -1;

  00044	83 c8 ff	 or	 eax, -1
  00047	5e		 pop	 esi

; 657  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN14@getLineFro:
  0004a	53		 push	 ebx

; 633  : 		{
; 634  : 			memcpy( output, net_readbuf, i );

  0004b	8b 5d 08	 mov	 ebx, DWORD PTR _output$[ebp]
  0004e	57		 push	 edi
  0004f	50		 push	 eax
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 635  : 			output[i] = '\0';

  00059	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 636  : 			// ?????????????? 0x0d??????
; 637  : 			for( j = i+1; j >= 0; j-- )

  0005d	85 f6		 test	 esi, esi
  0005f	78 11		 js	 SHORT $LN6@getLineFro
$LL7@getLineFro:

; 638  : 			{
; 639  : 				if( output[j] == 0x0d )

  00061	80 3c 1e 0d	 cmp	 BYTE PTR [esi+ebx], 13	; 0000000dH
  00065	74 07		 je	 SHORT $LN15@getLineFro

; 636  : 			// ?????????????? 0x0d??????
; 637  : 			for( j = i+1; j >= 0; j-- )

  00067	83 ee 01	 sub	 esi, 1
  0006a	79 f5		 jns	 SHORT $LL7@getLineFro

; 638  : 			{
; 639  : 				if( output[j] == 0x0d )

  0006c	eb 04		 jmp	 SHORT $LN6@getLineFro
$LN15@getLineFro:

; 640  : 				{
; 641  : 					output[j] = '\0';

  0006e	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
$LN6@getLineFro:

; 642  : 					break;
; 643  : 				}
; 644  : 			}
; 645  : 
; 646  : 			// ???????
; 647  : 			shiftReadBuf( i+1 );

  00072	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?shiftReadBuf@@YAHH@Z	; shiftReadBuf

; 648  : 
; 649  : 			// ????????????????????
; 650  : 			// ?????????????????????????????????
; 651  : 			net_readbuf[net_readbuflen] = '\0';

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  00080	83 c4 04	 add	 esp, 4
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?net_readbuflen@@3HA ; net_readbuflen

; 652  : 
; 653  : 			return 0;

  00089	5b		 pop	 ebx
  0008a	5f		 pop	 edi
  0008b	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  0008f	33 c0		 xor	 eax, eax
  00091	5e		 pop	 esi

; 657  : }

  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?getLineFromReadBuf@@YAHPADH@Z ENDP			; getLineFromReadBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?shiftWriteBuf@@YAHH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?shiftWriteBuf@@YAHH@Z PROC				; shiftWriteBuf, COMDAT

; 602  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 603  : 	int i;
; 604  : 
; 605  : 	if( server_choosed == 0 )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?server_choosed@@3HA, 0 ; server_choosed
  0000a	75 07		 jne	 SHORT $LN5@shiftWrite

; 606  : 		return -100;

  0000c	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 615  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN5@shiftWrite:

; 607  : 	if( size > net_writebuflen )

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_writebuflen@@3HA ; net_writebuflen
  00018	56		 push	 esi
  00019	8b 75 08	 mov	 esi, DWORD PTR _size$[ebp]
  0001c	3b f0		 cmp	 esi, eax
  0001e	7e 06		 jle	 SHORT $LN6@shiftWrite

; 608  : 		return -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 615  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN6@shiftWrite:

; 609  : 	for( i = size; i < net_writebuflen; i++ )

  00026	8b d6		 mov	 edx, esi
  00028	7d 1f		 jge	 SHORT $LN3@shiftWrite
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@shiftWrite:

; 610  : 	{
; 611  : 		net_writebuf[i-size] = net_writebuf[i];

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  00035	8b c8		 mov	 ecx, eax
  00037	2b ce		 sub	 ecx, esi
  00039	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  0003c	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0003f	42		 inc	 edx
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_writebuflen@@3HA ; net_writebuflen
  00045	3b d0		 cmp	 edx, eax
  00047	7c e7		 jl	 SHORT $LL4@shiftWrite
$LN3@shiftWrite:

; 612  : 	}
; 613  : 	net_writebuflen -= size;

  00049	2b c6		 sub	 eax, esi
  0004b	a3 00 00 00 00	 mov	 DWORD PTR ?net_writebuflen@@3HA, eax ; net_writebuflen

; 614  : 	return 0;

  00050	33 c0		 xor	 eax, eax
  00052	5e		 pop	 esi

; 615  : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?shiftWriteBuf@@YAHH@Z ENDP				; shiftWriteBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?shiftReadBuf@@YAHH@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?shiftReadBuf@@YAHH@Z PROC				; shiftReadBuf, COMDAT

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 580  : 	int i;
; 581  : 	if( server_choosed == 0 )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?server_choosed@@3HA, 0 ; server_choosed
  0000a	75 07		 jne	 SHORT $LN5@shiftReadB

; 582  : 		return -100;

  0000c	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 592  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN5@shiftReadB:

; 583  : 
; 584  : 	if( size > net_readbuflen )

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_readbuflen@@3HA ; net_readbuflen
  00018	56		 push	 esi
  00019	8b 75 08	 mov	 esi, DWORD PTR _size$[ebp]
  0001c	3b f0		 cmp	 esi, eax
  0001e	7e 06		 jle	 SHORT $LN6@shiftReadB

; 585  : 		return -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 592  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN6@shiftReadB:

; 586  : 	for( i = size; i < net_readbuflen; i++ )

  00026	8b d6		 mov	 edx, esi
  00028	7d 1f		 jge	 SHORT $LN3@shiftReadB
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@shiftReadB:

; 587  : 	{
; 588  : 		net_readbuf[i-size] = net_readbuf[i];

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  00035	8b c8		 mov	 ecx, eax
  00037	2b ce		 sub	 ecx, esi
  00039	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  0003c	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0003f	42		 inc	 edx
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_readbuflen@@3HA ; net_readbuflen
  00045	3b d0		 cmp	 edx, eax
  00047	7c e7		 jl	 SHORT $LL4@shiftReadB
$LN3@shiftReadB:

; 589  : 	}
; 590  : 	net_readbuflen -= size;

  00049	2b c6		 sub	 eax, esi
  0004b	a3 00 00 00 00	 mov	 DWORD PTR ?net_readbuflen@@3HA, eax ; net_readbuflen

; 591  : 	return 0;

  00050	33 c0		 xor	 eax, eax
  00052	5e		 pop	 esi

; 592  : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?shiftReadBuf@@YAHH@Z ENDP				; shiftReadBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?appendWriteBuf@@YAHHPADH@Z
_TEXT	SEGMENT
_oldprotect$ = -4					; size = 4
_index$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
?appendWriteBuf@@YAHHPADH@Z PROC			; appendWriteBuf, COMDAT

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 549  : 	if( server_choosed == 0 )

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?server_choosed@@3HA, 0 ; server_choosed
  0000b	75 09		 jne	 SHORT $LN2@appendWrit

; 550  : 		return -100;

  0000d	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 569  : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@appendWrit:
  00016	56		 push	 esi

; 551  : #ifndef __NEW_CLIENT_MEM
; 552  : 	if( (net_writebuflen + size) > NETBUFSIZ )
; 553  : 		return -1;
; 554  : 	memcpy( net_writebuf + net_writebuflen, buf, size );
; 555  : 	net_writebuflen += size;
; 556  : #else
; 557  : 	DWORD oldprotect;
; 558  : 	BOOL ret;
; 559  : 	ret = VirtualProtect( net_writebuf, NETBUFSIZ, PAGE_READWRITE, &oldprotect);

  00017	8d 45 fc	 lea	 eax, DWORD PTR _oldprotect$[ebp]
  0001a	50		 push	 eax
  0001b	6a 04		 push	 4
  0001d	68 00 40 00 00	 push	 16384			; 00004000H
  00022	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualProtect@16

; 560  : 
; 561  : 	if( (net_writebuflen + size) > NETBUFSIZ )

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?net_writebuflen@@3HA ; net_writebuflen
  00034	8b 75 10	 mov	 esi, DWORD PTR _size$[ebp]
  00037	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0003a	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0003f	7e 08		 jle	 SHORT $LN3@appendWrit

; 562  : 		return -1;

  00041	83 c8 ff	 or	 eax, -1
  00044	5e		 pop	 esi

; 569  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN3@appendWrit:

; 563  : 	memcpy( net_writebuf + net_writebuflen, buf, size );

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  0004e	56		 push	 esi
  0004f	ff 75 0c	 push	 DWORD PTR _buf$[ebp]
  00052	03 c1		 add	 eax, ecx
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _memcpy

; 564  : 	net_writebuflen += size;

  0005a	01 35 00 00 00
	00		 add	 DWORD PTR ?net_writebuflen@@3HA, esi ; net_writebuflen

; 565  : 
; 566  : 	ret = VirtualProtect( net_writebuf, NETBUFSIZ, PAGE_NOACCESS, &oldprotect);

  00060	8d 45 fc	 lea	 eax, DWORD PTR _oldprotect$[ebp]
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	50		 push	 eax
  00067	6a 01		 push	 1
  00069	68 00 40 00 00	 push	 16384			; 00004000H
  0006e	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualProtect@16

; 567  : #endif
; 568  : 	return 0;

  0007a	33 c0		 xor	 eax, eax
  0007c	5e		 pop	 esi

; 569  : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?appendWriteBuf@@YAHHPADH@Z ENDP			; appendWriteBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?appendReadBuf@@YAHPADH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
?appendReadBuf@@YAHPADH@Z PROC				; appendReadBuf, COMDAT

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 530  : 	if( server_choosed == 0 )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?server_choosed@@3HA, 0 ; server_choosed
  0000a	75 07		 jne	 SHORT $LN2@appendRead

; 531  : 		return -100;

  0000c	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH

; 539  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@appendRead:

; 532  : 
; 533  : 	if( (net_readbuflen + size) > NETBUFSIZ )

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?net_readbuflen@@3HA ; net_readbuflen
  00019	56		 push	 esi
  0001a	8b 75 0c	 mov	 esi, DWORD PTR _size$[ebp]
  0001d	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  00020	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  00025	7e 06		 jle	 SHORT $LN3@appendRead

; 534  :         return -1;

  00027	83 c8 ff	 or	 eax, -1
  0002a	5e		 pop	 esi

; 539  : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN3@appendRead:

; 535  : 
; 536  : 	memcpy( net_readbuf + net_readbuflen, buf, size );

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  00032	56		 push	 esi
  00033	ff 75 08	 push	 DWORD PTR _buf$[ebp]
  00036	03 c1		 add	 eax, ecx
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _memcpy

; 537  : 	net_readbuflen += size;

  0003e	01 35 00 00 00
	00		 add	 DWORD PTR ?net_readbuflen@@3HA, esi ; net_readbuflen
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 538  : 	return 0;

  00047	33 c0		 xor	 eax, eax
  00049	5e		 pop	 esi

; 539  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?appendReadBuf@@YAHPADH@Z ENDP				; appendReadBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?cleanupNetwork@@YAXXZ
_TEXT	SEGMENT
?cleanupNetwork@@YAXXZ PROC				; cleanupNetwork, COMDAT

; 504  : 	if( init_net == FALSE )

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?init_net@@3HA, 0 ; init_net
  00007	74 47		 je	 SHORT $LN1@cleanupNet

; 505  : 		return;
; 506  : 
; 507  : 	init_net = FALSE;
; 508  : 	server_choosed = 0;
; 509  : 
; 510  : 	disconnectServerFlag = FALSE;
; 511  : 	oldDisconnectServerFlag = FALSE;
; 512  : 
; 513  : 	closesocket( sockfd );

  00009	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0000f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?init_net@@3HA, 0 ; init_net
  00019	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?server_choosed@@3HA, 0 ; server_choosed
  00023	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?disconnectServerFlag@@3HA, 0 ; disconnectServerFlag
  0002d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?oldDisconnectServerFlag@@3HA, 0 ; oldDisconnectServerFlag
  00037	e8 00 00 00 00	 call	 _closesocket@4

; 514  : 	dwServer = NULL;

  0003c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwServer@@3KA, 0 ; dwServer

; 515  : 	WSACleanup();

  00046	e8 00 00 00 00	 call	 _WSACleanup@0

; 516  : 
; 517  : 	// lsrpc?????????????????????
; 518  : 	// ????????????????????????????
; 519  : 	lssproto_CleanupClient();

  0004b	e9 00 00 00 00	 jmp	 ?lssproto_CleanupClient@@YAXXZ ; lssproto_CleanupClient
$LN1@cleanupNet:

; 520  : }

  00050	c3		 ret	 0
?cleanupNetwork@@YAXXZ ENDP				; cleanupNetwork
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?initNet@@YAHXZ
_TEXT	SEGMENT
_wsadata$ = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
?initNet@@YAHXZ PROC					; initNet, COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 457  : 	int ret;
; 458  : 	WSADATA wsadata;
; 459  : 
; 460  : 	// winsock??????
; 461  :     ret = WSAStartup( MAKEWORD( 1, 1 ), &wsadata );

  00013	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _wsadata$[ebp]
  00019	50		 push	 eax
  0001a	68 01 01 00 00	 push	 257			; 00000101H
  0001f	e8 00 00 00 00	 call	 _WSAStartup@8

; 462  : 	if( ret != 0 )

  00024	85 c0		 test	 eax, eax
  00026	74 10		 je	 SHORT $LN2@initNet

; 463  : 		return FALSE;

  00028	33 c0		 xor	 eax, eax

; 468  : 
; 469  : #ifdef _LOG_MSG
; 470  : 	//??????
; 471  : 	//CC FIX
; 472  : 	//20170813
; 473  : 	//_LOG_MSG定义在工程文件里
; 474  : 	//为避免出现共同开发工程文件不同的问题，建议 _LOG_MSG里的代码先注释
; 475  : 	{
; 476  : 		// ????????????
; 477  : 		FILE *fp;
; 478  : 		fp = fopen( debugLogFileName, "w" );
; 479  : 		fclose(fp);
; 480  : 	}
; 481  : 	lssproto_SetClientLogFiles( debugLogFileName , debugLogFileName );
; 482  : #endif
; 483  : 
; 484  : #ifdef _LOG_MSG
; 485  : 		{	// ????????????????
; 486  : 			FILE *fp = fopen( "recvtime.txt", "w" );
; 487  : 			if( fp ) fclose( fp );
; 488  : 		}
; 489  : #endif	
; 490  : 
; 491  : 	init_net = TRUE;
; 492  : 	disconnectServerFlag = FALSE;
; 493  : 	oldDisconnectServerFlag = FALSE;
; 494  : 
; 495  : 	return TRUE;
; 496  : }

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002d	33 cd		 xor	 ecx, ebp
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN2@initNet:

; 464  : 
; 465  :     // lssproto????
; 466  : //cary test	lssproto_InitClient( appendWriteBuf, 65536, sockfd );
; 467  : 	lssproto_InitClient( appendWriteBuf, NETBUFSIZ, sockfd );

  00038	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0003e	68 00 40 00 00	 push	 16384			; 00004000H
  00043	68 00 00 00 00	 push	 OFFSET ?appendWriteBuf@@YAHHPADH@Z ; appendWriteBuf
  00048	e8 00 00 00 00	 call	 ?lssproto_InitClient@@YAHP6AHHPADH@ZHH@Z ; lssproto_InitClient

; 468  : 
; 469  : #ifdef _LOG_MSG
; 470  : 	//??????
; 471  : 	//CC FIX
; 472  : 	//20170813
; 473  : 	//_LOG_MSG定义在工程文件里
; 474  : 	//为避免出现共同开发工程文件不同的问题，建议 _LOG_MSG里的代码先注释
; 475  : 	{
; 476  : 		// ????????????
; 477  : 		FILE *fp;
; 478  : 		fp = fopen( debugLogFileName, "w" );
; 479  : 		fclose(fp);
; 480  : 	}
; 481  : 	lssproto_SetClientLogFiles( debugLogFileName , debugLogFileName );
; 482  : #endif
; 483  : 
; 484  : #ifdef _LOG_MSG
; 485  : 		{	// ????????????????
; 486  : 			FILE *fp = fopen( "recvtime.txt", "w" );
; 487  : 			if( fp ) fclose( fp );
; 488  : 		}
; 489  : #endif	
; 490  : 
; 491  : 	init_net = TRUE;
; 492  : 	disconnectServerFlag = FALSE;
; 493  : 	oldDisconnectServerFlag = FALSE;
; 494  : 
; 495  : 	return TRUE;
; 496  : }

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	33 cd		 xor	 ecx, ebp
  00055	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?init_net@@3HA, 1 ; init_net
  0005f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?disconnectServerFlag@@3HA, 0 ; disconnectServerFlag
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?oldDisconnectServerFlag@@3HA, 0 ; oldDisconnectServerFlag
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?initNet@@YAHXZ ENDP					; initNet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?networkLoop@@YAXXZ
_TEXT	SEGMENT
_tm$ = -548						; size = 8
_oldprotect$ = -540					; size = 4
_wfds$ = -536						; size = 260
_rfds$ = -276						; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?networkLoop@@YAXXZ PROC				; networkLoop, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?networkLoop@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 02 00
	00		 sub	 esp, 536		; 00000218H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 283  : 	if( init_net == FALSE )

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?init_net@@3HA, 0 ; init_net
  00034	0f 84 1e 03 00
	00		 je	 $LN42@networkLoo

; 284  : 		return;
; 285  : 
; 286  : 	if( disconnectServerFlag && !oldDisconnectServerFlag){

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?disconnectServerFlag@@3HA ; disconnectServerFlag
  0003f	85 c0		 test	 eax, eax
  00041	74 18		 je	 SHORT $LN15@networkLoo
  00043	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?oldDisconnectServerFlag@@3HA, 0 ; oldDisconnectServerFlag
  0004a	75 0f		 jne	 SHORT $LN15@networkLoo

; 287  : 		// ??????????
; 288  : 		ChangeProc( PROC_DISCONNECT_SERVER );

  0004c	6a 0b		 push	 11			; 0000000bH
  0004e	e8 00 00 00 00	 call	 ?ChangeProc@@YAXH@Z	; ChangeProc
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?disconnectServerFlag@@3HA ; disconnectServerFlag
  00058	83 c4 04	 add	 esp, 4
$LN15@networkLoo:

; 289  : 	}
; 290  : 	oldDisconnectServerFlag = disconnectServerFlag;

  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?oldDisconnectServerFlag@@3HA, eax ; oldDisconnectServerFlag

; 291  : 	if( disconnectServerFlag)

  00060	85 c0		 test	 eax, eax
  00062	0f 85 f0 02 00
	00		 jne	 $LN42@networkLoo

; 292  : 		return;
; 293  : 
; 294  :     if( server_choosed == 0)return;

  00068	39 05 00 00 00
	00		 cmp	 DWORD PTR ?server_choosed@@3HA, eax ; server_choosed
  0006e	0f 84 e4 02 00
	00		 je	 $LN42@networkLoo

; 295  : 	fd_set rfds , wfds, efds;
; 296  : 	
; 297  : 	struct timeval tm;
; 298  : 	tm.tv_sec = 0;

  00074	89 85 dc fd ff
	ff		 mov	 DWORD PTR _tm$[ebp], eax

; 299  : 	tm.tv_usec = 0;

  0007a	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _tm$[ebp+4], eax

; 300  : 
; 301  : 	FD_ZERO( &rfds );
; 302  : 	FD_ZERO( &wfds );
; 303  : 	FD_ZERO( &efds );
; 304  : 
; 305  : 	FD_SET( sockfd , &rfds );

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sockfd@@3IA ; sockfd
  00085	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _rfds$[ebp+4], eax

; 306  : 	FD_SET( sockfd , &wfds );

  0008b	89 85 ec fd ff
	ff		 mov	 DWORD PTR _wfds$[ebp+4], eax

; 307  : 	FD_SET( sockfd , &efds );
; 308  : 
; 309  : 	int a = select(  2 , &rfds , &wfds , (fd_set*)NULL, &tm );

  00091	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _tm$[ebp]
  00097	50		 push	 eax
  00098	6a 00		 push	 0
  0009a	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _wfds$[ebp]
  000a0	c7 85 ec fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _rfds$[ebp], 1
  000aa	50		 push	 eax
  000ab	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _rfds$[ebp]
  000b1	c7 85 e8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _wfds$[ebp], 1
  000bb	50		 push	 eax
  000bc	6a 02		 push	 2
  000be	e8 00 00 00 00	 call	 _select@20

; 310  : #if 0
; 311  : 	if( FD_ISSET( sockfd , &efds )){
; 312  : 		char buf[256]; 
; 313  : 		memset( buf , 0 , sizeof(buf));
; 314  : 		int len = recv( sockfd , buf , sizeof( buf ) -1 , 0 );
; 315  : 		if( len == SOCKET_ERROR ){
; 316  : #ifdef  _STONDEBUG_
; 317  : 			CheckNetErrror();
; 318  : #endif
; 319  : 			closesocket( sockfd );
; 320  : 			dwServer = NULL;
; 321  : 			// ??????????????
; 322  : 			disconnectServerFlag = TRUE;
; 323  : 		}
; 324  : 	}
; 325  : #endif
; 326  : 	
; 327  : 	// ???
; 328  : 	int len = SOCKET_ERROR;
; 329  : #ifdef __NEW_CLIENT_MEM
; 330  : 	BOOL ret;
; 331  : 	DWORD oldprotect;
; 332  : #ifndef __NEW_CLIENT_ONLY_WRITE
; 333  : 	ret = VirtualProtect( net_readbuf, NETBUFSIZ, PAGE_READWRITE, &oldprotect);

  000c3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__VirtualProtect@16
  000c9	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _oldprotect$[ebp]
  000cf	50		 push	 eax
  000d0	6a 04		 push	 4
  000d2	68 00 40 00 00	 push	 16384			; 00004000H
  000d7	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  000dd	ff d7		 call	 edi

; 334  : #endif
; 335  : #endif
; 336  : 	if( FD_ISSET( sockfd , &rfds) ){

  000df	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _rfds$[ebp]
  000e5	50		 push	 eax
  000e6	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  000ec	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  000f1	85 c0		 test	 eax, eax
  000f3	0f 84 91 00 00
	00		 je	 $LN29@networkLoo

; 337  : 		len = recv( sockfd , rpc_linebuffer , (NETBUFSIZ >> 1) - 1, 0 );

  000f9	6a 00		 push	 0
  000fb	68 ff 1f 00 00	 push	 8191			; 00001fffH
  00100	68 00 00 00 00	 push	 OFFSET ?rpc_linebuffer@@3PADA ; rpc_linebuffer
  00105	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0010b	e8 00 00 00 00	 call	 _recv@16

; 338  : 		if (isWGS7) {

  00110	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?isWGS7@@3HA, 0 ; isWGS7
  00117	8b f0		 mov	 esi, eax
  00119	74 3b		 je	 SHORT $LN22@networkLoo

; 339  : 			if ((len>1400)&&(len<=1460)) {

  0011b	8d 8e 87 fa ff
	ff		 lea	 ecx, DWORD PTR [esi-1401]
  00121	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  00124	77 26		 ja	 SHORT $LN23@networkLoo

; 340  : 				Sleep(500);

  00126	68 f4 01 00 00	 push	 500			; 000001f4H
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 341  : 				len += recv( sockfd , rpc_linebuffer+len , (NETBUFSIZ >> 1) - 1, 0 );

  00131	6a 00		 push	 0
  00133	68 ff 1f 00 00	 push	 8191			; 00001fffH
  00138	8d 86 00 00 00
	00		 lea	 eax, DWORD PTR ?rpc_linebuffer@@3PADA[esi]
  0013e	50		 push	 eax
  0013f	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00145	e8 00 00 00 00	 call	 _recv@16
  0014a	03 f0		 add	 esi, eax
$LN23@networkLoo:

; 342  : 			}
; 343  : 			isWGS7=0;

  0014c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?isWGS7@@3HA, 0 ; isWGS7
$LN22@networkLoo:

; 344  : 		}
; 345  : 		if( len == SOCKET_ERROR ){

  00156	83 fe ff	 cmp	 esi, -1
  00159	0f 85 cb 00 00
	00		 jne	 $LN24@networkLoo

; 346  : 			if( WSAGetLastError() != WSAEWOULDBLOCK ){

  0015f	e8 00 00 00 00	 call	 _WSAGetLastError@0
  00164	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00169	74 1f		 je	 SHORT $LN29@networkLoo

; 347  : #ifdef  _STONDEBUG_
; 348  : 				CheckNetErrror();
; 349  : #endif
; 350  :         closesocket(sockfd);

  0016b	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00171	e8 00 00 00 00	 call	 _closesocket@4

; 351  : 				dwServer = NULL;

  00176	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwServer@@3KA, 0 ; dwServer

; 352  : 				// ??????????????
; 353  : 				disconnectServerFlag = TRUE;

  00180	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?disconnectServerFlag@@3HA, 1 ; disconnectServerFlag
$LN29@networkLoo:

; 375  : 	}
; 376  : #ifdef __NEW_CLIENT_MEM
; 377  : #ifndef __NEW_CLIENT_ONLY_WRITE
; 378  : 	ret = VirtualProtect( net_readbuf, NETBUFSIZ, PAGE_NOACCESS, &oldprotect);

  0018a	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _oldprotect$[ebp]
  00190	50		 push	 eax
  00191	6a 01		 push	 1
  00193	68 00 40 00 00	 push	 16384			; 00004000H
  00198	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  0019e	ff d7		 call	 edi

; 379  : #endif
; 380  : #endif
; 381  : 
; 382  : 	static unsigned int writetime = TimeGetTime();

  001a0	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  001a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  001ac	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  001af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??networkLoop@@YAXXZ@4HA
  001b4	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  001ba	0f 8f b3 01 00
	00		 jg	 $LN56@networkLoo
$LN13@networkLoo:

; 383  : 	
; 384  : 	// ????
; 385  : 	if( FD_ISSET( sockfd , &wfds)){

  001c0	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _wfds$[ebp]
  001c6	50		 push	 eax
  001c7	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  001cd	e8 00 00 00 00	 call	 ___WSAFDIsSet@8
  001d2	85 c0		 test	 eax, eax
  001d4	0f 84 2e 01 00
	00		 je	 $LN34@networkLoo

; 386  : #ifdef __NEW_CLIENT_MEM
; 387  : 		ret = VirtualProtect( net_writebuf, NETBUFSIZ, PAGE_READWRITE, &oldprotect);

  001da	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _oldprotect$[ebp]
  001e0	50		 push	 eax
  001e1	6a 04		 push	 4
  001e3	68 00 40 00 00	 push	 16384			; 00004000H
  001e8	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  001ee	ff d7		 call	 edi

; 388  : #endif
; 389  : 		len = 0;
; 390  : 		if( net_writebuflen) len = send( sockfd, net_writebuf , net_writebuflen , 0 );

  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_writebuflen@@3HA ; net_writebuflen
  001f5	85 c0		 test	 eax, eax
  001f7	0f 84 f5 00 00
	00		 je	 $LN40@networkLoo
  001fd	6a 00		 push	 0
  001ff	50		 push	 eax
  00200	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  00206	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0020c	e8 00 00 00 00	 call	 _send@16
  00211	8b f0		 mov	 esi, eax

; 391  : 		/*???????*/
; 392  : 		if(len > 0) writetime = TimeGetTime();

  00213	85 f6		 test	 esi, esi
  00215	0f 8e 98 00 00
	00		 jle	 $LN36@networkLoo
  0021b	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00220	a3 00 00 00 00	 mov	 DWORD PTR ?writetime@?1??networkLoop@@YAXXZ@4IA, eax
  00225	e9 bf 00 00 00	 jmp	 $LN50@networkLoo
$LN24@networkLoo:

; 354  : 			}
; 355  : 		} else appendReadBuf( rpc_linebuffer , len );

  0022a	56		 push	 esi
  0022b	68 00 00 00 00	 push	 OFFSET ?rpc_linebuffer@@3PADA ; rpc_linebuffer
  00230	e8 00 00 00 00	 call	 ?appendReadBuf@@YAHPADH@Z ; appendReadBuf
$LN53@networkLoo:

; 356  : 	}
; 357  : 	while( len!=SOCKET_ERROR && net_readbuflen>0){

  00235	83 c4 08	 add	 esp, 8
  00238	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL11@networkLoo:
  00240	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?net_readbuflen@@3HA, 0 ; net_readbuflen
  00247	0f 8e 3d ff ff
	ff		 jle	 $LN29@networkLoo

; 358  : 		// get line from read buffer
; 359  : 		if(GS==dwServer){

  0024d	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?dwServer@@3KA, 3 ; dwServer
  00254	75 4b		 jne	 SHORT $LN27@networkLoo

; 360  : 		  if(!getLineFromReadBuf( rpc_linebuffer  ,sizeof(rpc_linebuffer) )){

  00256	68 00 40 00 00	 push	 16384			; 00004000H
  0025b	68 00 00 00 00	 push	 OFFSET ?rpc_linebuffer@@3PADA ; rpc_linebuffer
  00260	e8 00 00 00 00	 call	 ?getLineFromReadBuf@@YAHPADH@Z ; getLineFromReadBuf
  00265	83 c4 08	 add	 esp, 8
  00268	85 c0		 test	 eax, eax
  0026a	0f 85 1a ff ff
	ff		 jne	 $LN29@networkLoo

; 361  : 			if( bNewServer)

  00270	68 00 00 00 00	 push	 OFFSET ?rpc_linebuffer@@3PADA ; rpc_linebuffer
  00275	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0027b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bNewServer@@3HA, eax ; bNewServer
  00281	74 17		 je	 SHORT $LN31@networkLoo

; 362  : 			{ 
; 363  : 				int func = SaDispatchMessage( sockfd , rpc_linebuffer );

  00283	e8 00 00 00 00	 call	 ?SaDispatchMessage@@YAHHPAD@Z ; SaDispatchMessage
  00288	83 c4 08	 add	 esp, 8

; 364  : 
; 365  : 				//JL 2016.8.23 封包解码完毕，发送数据给wg
; 366  : 				if (func)

  0028b	85 c0		 test	 eax, eax
  0028d	74 b1		 je	 SHORT $LL11@networkLoo

; 367  : 				{
; 368  : 					JL_savefunc(func);

  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ?JL_savefunc@@YAXH@Z	; JL_savefunc
  00295	83 c4 04	 add	 esp, 4

; 369  : 				}
; 370  : 			}

  00298	eb a6		 jmp	 SHORT $LL11@networkLoo
$LN31@networkLoo:

; 371  : 			else
; 372  : 				lssproto_ClientDispatchMessage( sockfd , rpc_linebuffer );

  0029a	e8 00 00 00 00	 call	 ?lssproto_ClientDispatchMessage@@YAHHPAD@Z ; lssproto_ClientDispatchMessage

; 373  : 			}else break;

  0029f	eb 94		 jmp	 SHORT $LN53@networkLoo
$LN27@networkLoo:

; 374  : 		}else ReadWGSMessage(net_readbuf,net_readbuflen);

  002a1	68 00 00 00 00	 push	 OFFSET ?net_readbuflen@@3HA ; net_readbuflen
  002a6	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  002ac	e8 00 00 00 00	 call	 ?ReadWGSMessage@@YAHPADAAH@Z ; ReadWGSMessage
  002b1	eb 82		 jmp	 SHORT $LN53@networkLoo
$LN36@networkLoo:

; 393  : 
; 394  : 		if( len == SOCKET_ERROR ){

  002b3	83 fe ff	 cmp	 esi, -1
  002b6	75 2d		 jne	 SHORT $LN37@networkLoo

; 395  : 			if( WSAGetLastError() != WSAEWOULDBLOCK ){

  002b8	e8 00 00 00 00	 call	 _WSAGetLastError@0
  002bd	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  002c2	74 2e		 je	 SHORT $LN40@networkLoo

; 396  : #ifdef  _STONDEBUG_
; 397  : 				CheckNetErrror();
; 398  : #endif
; 399  :      		closesocket(sockfd);

  002c4	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  002ca	e8 00 00 00 00	 call	 _closesocket@4

; 400  : 				dwServer = NULL;

  002cf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwServer@@3KA, 0 ; dwServer

; 401  : 				// ??????????????
; 402  : 				disconnectServerFlag = TRUE;

  002d9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?disconnectServerFlag@@3HA, 1 ; disconnectServerFlag

; 403  : 			}
; 404  : 		} else {

  002e3	eb 0d		 jmp	 SHORT $LN40@networkLoo
$LN37@networkLoo:

; 405  : 			if( len) shiftWriteBuf( len );

  002e5	85 f6		 test	 esi, esi
  002e7	74 09		 je	 SHORT $LN40@networkLoo
$LN50@networkLoo:
  002e9	56		 push	 esi
  002ea	e8 00 00 00 00	 call	 ?shiftWriteBuf@@YAHH@Z	; shiftWriteBuf
  002ef	83 c4 04	 add	 esp, 4
$LN40@networkLoo:

; 406  : 		}
; 407  : #ifdef __NEW_CLIENT_MEM
; 408  : 		ret = VirtualProtect( net_writebuf, NETBUFSIZ, PAGE_NOACCESS, &oldprotect);

  002f2	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _oldprotect$[ebp]
  002f8	50		 push	 eax
  002f9	6a 01		 push	 1
  002fb	68 00 40 00 00	 push	 16384			; 00004000H
  00300	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  00306	ff d7		 call	 edi
$LN34@networkLoo:

; 409  : #endif
; 410  : 	}
; 411  : 	if((GS==dwServer) && (writetime + 30*1000 <TimeGetTime())){

  00308	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?dwServer@@3KA, 3 ; dwServer
  0030f	75 47		 jne	 SHORT $LN42@networkLoo
  00311	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00316	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?writetime@?1??networkLoop@@YAXXZ@4IA
  0031c	81 c1 30 75 00
	00		 add	 ecx, 30000		; 00007530H
  00322	3b c8		 cmp	 ecx, eax
  00324	73 32		 jae	 SHORT $LN42@networkLoo

; 412  : 		if(	init_net == TRUE){

  00326	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?init_net@@3HA, 1 ; init_net
  0032d	75 29		 jne	 SHORT $LN42@networkLoo

; 413  : 			if( bNewServer)

  0032f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  00336	68 00 00 00 00	 push	 OFFSET ??_C@_04KGMIJBHM@hoge@
  0033b	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00341	74 07		 je	 SHORT $LN43@networkLoo

; 414  : 				lssproto_Echo_send(sockfd, "hoge");

  00343	e8 00 00 00 00	 call	 ?lssproto_Echo_send@@YAXHPAD@Z ; lssproto_Echo_send
  00348	eb 05		 jmp	 SHORT $LN54@networkLoo
$LN43@networkLoo:

; 415  : 			else
; 416  : 				old_lssproto_Echo_send(sockfd, "hoge");

  0034a	e8 00 00 00 00	 call	 ?old_lssproto_Echo_send@@YAXHPAD@Z ; old_lssproto_Echo_send
$LN54@networkLoo:

; 417  : 			testCnt++;

  0034f	83 c4 08	 add	 esp, 8
  00352	ff 05 00 00 00
	00		 inc	 DWORD PTR ?testCnt@@3HA	; testCnt
$LN42@networkLoo:

; 418  : 		}
; 419  : 	}
; 420  : }

  00358	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00362	59		 pop	 ecx
  00363	5f		 pop	 edi
  00364	5e		 pop	 esi
  00365	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00368	33 cd		 xor	 ecx, ebp
  0036a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036f	8b e5		 mov	 esp, ebp
  00371	5d		 pop	 ebp
  00372	c3		 ret	 0
$LN56@networkLoo:

; 379  : #endif
; 380  : #endif
; 381  : 
; 382  : 	static unsigned int writetime = TimeGetTime();

  00373	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??networkLoop@@YAXXZ@4HA
  00378	e8 00 00 00 00	 call	 __Init_thread_header
  0037d	83 c4 04	 add	 esp, 4
  00380	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??networkLoop@@YAXXZ@4HA, -1
  00387	0f 85 33 fe ff
	ff		 jne	 $LN13@networkLoo
  0038d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00394	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00399	a3 00 00 00 00	 mov	 DWORD PTR ?writetime@?1??networkLoop@@YAXXZ@4IA, eax
  0039e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003a5	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??networkLoop@@YAXXZ@4HA
  003aa	e8 00 00 00 00	 call	 __Init_thread_footer
  003af	83 c4 04	 add	 esp, 4
  003b2	e9 09 fe ff ff	 jmp	 $LN13@networkLoo
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?networkLoop@@YAXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??networkLoop@@YAXXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?networkLoop@@YAXXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a dc fd ff
	ff		 mov	 ecx, DWORD PTR [edx-548]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?networkLoop@@YAXXZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?networkLoop@@YAXXZ ENDP				; networkLoop
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\netmain.cpp
;	COMDAT ?getServerInfo@@YAHHPADPAF@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_hostname$ = 12						; size = 4
_port$ = 16						; size = 4
?getServerInfo@@YAHHPADPAF@Z PROC			; getServerInfo, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 83   : 	if( index < 0 || index >= sizeof( gmsv)/sizeof( gmsv[0] ) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 3e		 js	 SHORT $LN3@getServerI
  0000a	81 fa 96 00 00
	00		 cmp	 edx, 150		; 00000096H
  00010	73 36		 jae	 SHORT $LN3@getServerI

; 85   : 
; 86   : 
; 87   : 	strcpy( hostname, gmsv[index].ipaddr );

  00012	c1 e2 08	 shl	 edx, 8
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _hostname$[ebp]
  00019	8d 82 01 00 00
	00		 lea	 eax, DWORD PTR ?gmsv@@3PAUgameserver@@A[edx+1]
  0001f	2b f0		 sub	 esi, eax
$LL5@getServerI:
  00021	8a 08		 mov	 cl, BYTE PTR [eax]
  00023	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00026	88 4c 06 ff	 mov	 BYTE PTR [esi+eax-1], cl
  0002a	84 c9		 test	 cl, cl
  0002c	75 f3		 jne	 SHORT $LL5@getServerI

; 88   : 	*port = atoi( gmsv[index].port );

  0002e	8d 82 80 00 00
	00		 lea	 eax, DWORD PTR ?gmsv@@3PAUgameserver@@A[edx+128]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _atoi
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _port$[ebp]
  0003d	83 c4 04	 add	 esp, 4
  00040	66 89 01	 mov	 WORD PTR [ecx], ax

; 89   : 
; 90   : 	return 0;

  00043	33 c0		 xor	 eax, eax
  00045	5e		 pop	 esi

; 91   : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN3@getServerI:

; 84   : 		return -1;

  00048	83 c8 ff	 or	 eax, -1

; 91   : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?getServerInfo@@YAHHPADPAF@Z ENDP			; getServerInfo
_TEXT	ENDS
END
