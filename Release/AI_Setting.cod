; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?AI_method@@3PAHA				; AI_method
PUBLIC	?AI_target@@3PAHA				; AI_target
PUBLIC	?AI_limit@@3PAHA				; AI_limit
PUBLIC	?pAIOtherFunctionWnd@@3PAUaction@@A		; pAIOtherFunctionWnd
PUBLIC	?AI_Other_State@@3HA				; AI_Other_State
PUBLIC	?AI_OtherSetting@@3PAHA				; AI_OtherSetting
PUBLIC	?bFirstFlag@@3_NA				; bFirstFlag
PUBLIC	?AI_State@@3HA					; AI_State
PUBLIC	?AI_First@@3HA					; AI_First
PUBLIC	?AI_Choosen@@3PADA				; AI_Choosen
PUBLIC	?pAISettingWnd@@3PAUaction@@A			; pAISettingWnd
PUBLIC	?g_iPSindex@@3HA				; g_iPSindex
PUBLIC	?g_bUsePS@@3_NA					; g_bUsePS
_BSS	SEGMENT
?AI_method@@3PAHA DD 05H DUP (?)			; AI_method
?AI_target@@3PAHA DD 05H DUP (?)			; AI_target
?AI_limit@@3PAHA DD 05H DUP (?)				; AI_limit
?pAIOtherFunctionWnd@@3PAUaction@@A DD 01H DUP (?)	; pAIOtherFunctionWnd
?AI_Other_State@@3HA DD 01H DUP (?)			; AI_Other_State
?AI_OtherSetting@@3PAHA DD 01H DUP (?)			; AI_OtherSetting
?bFirstFlag@@3_NA DB 01H DUP (?)			; bFirstFlag
	ALIGN	4

?AI_State@@3HA DD 01H DUP (?)				; AI_State
?AI_Choosen@@3PADA DD 01H DUP (?)			; AI_Choosen
?pAISettingWnd@@3PAUaction@@A DD 01H DUP (?)		; pAISettingWnd
?g_bUsePS@@3_NA DB 01H DUP (?)				; g_bUsePS
_BSS	ENDS
_DATA	SEGMENT
?AI_First@@3HA DD 01H					; AI_First
?g_iPSindex@@3HA DD 0ffffffffH				; g_iPSindex
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?AI_SetUpAttackMethod@@YAXH@Z			; AI_SetUpAttackMethod
PUBLIC	?AI_SetDownAttackMethod@@YAXH@Z			; AI_SetDownAttackMethod
PUBLIC	?AI_Load@@YAHPAD@Z				; AI_Load
PUBLIC	?AI_ReLoad@@YAHXZ				; AI_ReLoad
PUBLIC	?AI_Save@@YAHXZ					; AI_Save
PUBLIC	?AI_CheckSkillSetting@@YAHHHH@Z			; AI_CheckSkillSetting
PUBLIC	?AI_CheckSetting@@YAXXZ				; AI_CheckSetting
PUBLIC	?AI_Init@@YAXXZ					; AI_Init
PUBLIC	?AI_SetUpTarget@@YAXH@Z				; AI_SetUpTarget
PUBLIC	?AI_SetDownTarget@@YAXH@Z			; AI_SetDownTarget
PUBLIC	?AI_SetMethod@@YAXHH@Z				; AI_SetMethod
PUBLIC	?AI_SetUpCureMethod@@YAXH@Z			; AI_SetUpCureMethod
PUBLIC	?AI_SetDownCureMethod@@YAXH@Z			; AI_SetDownCureMethod
PUBLIC	?AI_SetUpFirstMethod@@YAXH@Z			; AI_SetUpFirstMethod
PUBLIC	?AI_SetDownFirstMethod@@YAXH@Z			; AI_SetDownFirstMethod
PUBLIC	?AI_SetUpResurrectMethod@@YAXH@Z		; AI_SetUpResurrectMethod
PUBLIC	?AI_SetDownResurrectMethod@@YAXH@Z		; AI_SetDownResurrectMethod
PUBLIC	?AI_SetUpLimit@@YAXH@Z				; AI_SetUpLimit
PUBLIC	?AI_SetDownLimit@@YAXH@Z			; AI_SetDownLimit
PUBLIC	?AI_SettingProc@@YAHXZ				; AI_SettingProc
PUBLIC	?GetResurrectTarget@@YAHH@Z			; GetResurrectTarget
PUBLIC	?GetFirstTarget@@YAHH@Z				; GetFirstTarget
PUBLIC	?GetCureTarget@@YAHH@Z				; GetCureTarget
PUBLIC	?GetDeadTarget@@YAHXZ				; GetDeadTarget
PUBLIC	?AttackAIProc@@YAHHPAD@Z			; AttackAIProc
PUBLIC	?AI_ChooseAction@@YAXXZ				; AI_ChooseAction
PUBLIC	?AI_CloseWnd@@YAXXZ				; AI_CloseWnd
PUBLIC	?AI_OtherProc@@YAXXZ				; AI_OtherProc
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_03HMFOOINA@r?$CLb@			; `string'
PUBLIC	??_C@_0BD@PDHJLAOE@data?2AISetting?4dat@	; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_02CHHAKFFB@w?$CL@				; `string'
PUBLIC	??_C@_06MPLPIMIC@?$LD?$LL?$LB?$LI?$LH?B@	; `string'
PUBLIC	??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@		; `string'
PUBLIC	??_C@_04MFANEHND@?$DP?$DP?$DP?$DP@		; `string'
PUBLIC	??_C@_03MNMCLLPK@?$PM?$NO?$DP@			; `string'
PUBLIC	??_C@_09BACHGGGK@f?$DLencor1c@			; `string'
PUBLIC	??_C@_08GGBOKOHL@?$LB?b?E?$LI?$LB?b?$LE?I@	; `string'
PUBLIC	??_C@_08LLCHMLBO@?$MA?O?$LJ?$NN?$LA?x?$LA?$NN@	; `string'
PUBLIC	??_C@_08OHKEAHAF@?$LM?R?G?$LA?$LM?$LB?E?C@	; `string'
PUBLIC	??_C@_04OCCKPHIM@?$MA?Z?$LN?E@			; `string'
PUBLIC	??_C@_04KDDDLIGD@?F?d?F?$KO@			; `string'
PUBLIC	??_C@_08OGPGECIA@?$LO?F?$LB?$LK?$MA?$PM?C?$LM@	; `string'
PUBLIC	??_C@_04LFMEPEEF@?$LL?s?$LE?k@			; `string'
PUBLIC	??_C@_04MHOBIAIL@?$MA?$PM?C?$LM@		; `string'
PUBLIC	??_C@_06LAICFDDI@?F?D?F?$LM?$KI?g@		; `string'
PUBLIC	??_C@_06DHBKEPPH@?F?D?F?$LM?$KI?h@		; `string'
PUBLIC	??_C@_06COABHOLG@?F?D?F?$LM?$KI?i@		; `string'
PUBLIC	??_C@_06FCMCNHF@?F?D?F?$LM?$KI?j@		; `string'
PUBLIC	??_C@_06BMDHBMDE@?F?D?F?$LM?$KI?k@		; `string'
PUBLIC	??_C@_06CPOHNOLJ@?$MA?$PL?$MA?$PM?C?$LM@	; `string'
PUBLIC	??_C@_0BH@KAEALDCD@?$LP?$MA?$LH?y?$LI?$KG?5?$MA?g?$LM?$LD?A?$KE?G?O?$LN?J?$LN?C?$LP?$MA?4@ ; `string'
PUBLIC	??_C@_02IPAINHI@?$KD?$KF@			; `string'
PUBLIC	??_C@_07NGDMDFPD@P?$HM?$CFX?$HM?$CFX@		; `string'
PUBLIC	??_C@_04DMFDFHBJ@H?$HM?$CFX@			; `string'
PUBLIC	??_C@_01NANMIPIL@N@				; `string'
PUBLIC	??_C@_0P@IOBJGDJM@?C?$LJ?$LJ?x?B?$LA?$LI?$LG?$LJ?$PN?$LL?g?$LP?k@ ; `string'
PUBLIC	??_C@_07DLEHBIBA@J?$HM?$CFX?$HM?$CFX@		; `string'
PUBLIC	??_C@_0BI@BOMCDLOB@MP?$NM?t?p?k?Y?i?$NL?v?$NO?E?i?D?b?O?s?$KN?n?$NM?o?q?$DP@ ; `string'
PUBLIC	??_C@_0BJ@OFNEOCJH@MP?$NM?t?p?k?Y?i?$NL?v?$NO?E?i?D?b?O?s?$KN?n?$NM?P?$PM?R?v@ ; `string'
PUBLIC	??_C@_04KFNLJMFK@?$LA?m?$LB?b@			; `string'
PUBLIC	??_C@_07LFMIBPPD@I?$HM?$CFX?$HM?$CFX@		; `string'
PUBLIC	??_C@_0CH@BEFJEOCA@?$LA?m?$LB?b?$LI?$KG?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?$MA?$LL?5?H?$LI?$LK?$LJ?G?O@ ; `string'
PUBLIC	??_C@_0BM@KCHDHJIN@?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?5?H?$LI?$LK?$LJ@ ; `string'
PUBLIC	??_C@_0DF@NHFAFANF@?H?$LI?$LK?$LJ?5?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP?k?G?R?5?$LM?v?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ ; `string'
PUBLIC	??_C@_0BO@DPKBDAMH@?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?5?H?$LI?$LK?$LJ@ ; `string'
PUBLIC	??_C@_0DB@BIHDODII@?$LO?F?$MA?L?E?$NL?$MA?L?5?$LK?N?A?$LH?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?$MA?$LI?$LH?N?5?H?$LI@ ; `string'
PUBLIC	??_C@_0BN@NFDFANHP@?$LD?$LL?$LB?$LI?$LH?B?$MA?$LL?5?H?$LI?$LK?$LJ?G?R?5?$LM?v?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ ; `string'
PUBLIC	??_C@_04IOEBOICC@?$LK?N?H?$LA@			; `string'
PUBLIC	??_C@_06NJPKHDDH@?$LA?$KC?$LM?$LK?A?$KG@	; `string'
PUBLIC	??_C@_0BB@DEPLKBFD@?$LK?N?H?$LA?5?$LO?F?$MA?L?E?$NL?5?$LL?g?$LP?k@ ; `string'
PUBLIC	??_C@_0BI@PMDJCIFK@?$LK?N?H?$LA?5?$LO?F?$MA?L?E?$NL?$MA?L?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ ; `string'
PUBLIC	??_C@_08HPGBOJPE@?$LB?b?$MA?$PN?$LL?s?E?B@	; `string'
PUBLIC	??_C@_0P@JIGIABPO@?$LK?N?H?$LA?5?A?V?$LM?z?5?$LL?g?$LP?k@ ; `string'
PUBLIC	??_C@_0DA@BIGMCAJH@?$LB?b?$LH?B?$MA?L?5?$LK?N?A?$LH?G?O?$LP?$KJ?5?$LK?N?H?$LA?5?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP@ ; `string'
PUBLIC	??_C@_0CB@GCFHCCPO@?$LK?N?H?$LA?5?$LE?k?$LL?s?$MA?L?5?$LM?$LD?A?$KE?$LF?G?A?v?5?$LO?J?$LO?R?$LN?$MA?$LE?O?$LE?Y@ ; `string'
PUBLIC	??_C@_02KIGKCDKE@?$LB?b@			; `string'
PUBLIC	??_C@_0BP@OPDADLEH@?$LB?b?$LH?B?5?H?$LI?$LK?$LJ?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LL?g?$LP?k?G?U?$LE?O?$LE?Y?4@ ; `string'
PUBLIC	??_C@_0CG@DENGHBNH@?$LB?b?$LH?B?5?H?$LI?$LK?$LJ?5?$LO?F?$MA?L?E?$NL?$MA?L?5?A?$LI?$MA?g?G?O?A?v?5?$LO?J?$LN@ ; `string'
PUBLIC	??_C@_08NOADAHE@?$MA?Z?$LF?$LP?$LA?x?$LA?$NN@	; `string'
PUBLIC	??_C@_07NMPJDMOK@W?$HM?$CFX?$HM?$CFX@		; `string'
PUBLIC	__xmm@fffffffefffffffefffffffefffffffe
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	_strstr:PROC
EXTRN	_itoa:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_fwrite:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?DeathAction@@YAXPAUaction@@@Z:PROC		; DeathAction
EXTRN	?StockDispBuffer@@YAHHHEHH@Z:PROC		; StockDispBuffer
EXTRN	?StockChatBufferLine@@YAXPADEH@Z:PROC		; StockChatBufferLine
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z:PROC	; MakeWindowDisp
EXTRN	?MakeHitBox@@YAHHHHHH@Z:PROC			; MakeHitBox
EXTRN	?play_se@@YAHHHH@Z:PROC				; play_se
EXTRN	?lssproto_B_send@@YAXHPAD@Z:PROC		; lssproto_B_send
EXTRN	?old_lssproto_B_send@@YAXHPAD@Z:PROC		; old_lssproto_B_send
EXTRN	?ecb_crypt@@YAHPAD0II@Z:PROC			; ecb_crypt
EXTRN	?selFontId@@YAHPAHH@Z:PROC			; selFontId
EXTRN	?GetBattelTarget@@YAHXZ:PROC			; GetBattelTarget
EXTRN	?InitBattleAnimFlag@@YAXXZ:PROC			; InitBattleAnimFlag
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?SubProcNo@@3IA:DWORD				; SubProcNo
EXTRN	?joy_trg@@3PAKA:QWORD				; joy_trg
EXTRN	?p_party@@3PAPAUaction@@A:BYTE			; p_party
EXTRN	?mouse@@3UMOUSE@@A:BYTE				; mouse
EXTRN	?HitDispNo@@3HA:DWORD				; HitDispNo
EXTRN	?OneLineInfoStr@@3PADA:BYTE			; OneLineInfoStr
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?magic@@3PAUMAGIC@@A:BYTE			; magic
EXTRN	?pet@@3PAUPET@@A:BYTE				; pet
EXTRN	?petSkill@@3PAY06UPET_SKILL@@A:BYTE		; petSkill
EXTRN	?profession_skill@@3PAUPROFESSION_SKILL@@A:BYTE	; profession_skill
EXTRN	?AI@@3HA:DWORD					; AI
EXTRN	?PauseAI@@3KA:DWORD				; PauseAI
EXTRN	?BattleMyNo@@3HA:DWORD				; BattleMyNo
EXTRN	?BattleBpFlag@@3HA:DWORD			; BattleBpFlag
EXTRN	?sockfd@@3IA:DWORD				; sockfd
EXTRN	?bNewServer@@3HA:DWORD				; bNewServer
EXTRN	?IdEncryptionTbl@@3PAHA:BYTE			; IdEncryptionTbl
EXTRN	?szUser@@3PADA:BYTE				; szUser
EXTRN	?battlePlayerEscFlag@@3HA:DWORD			; battlePlayerEscFlag
EXTRN	?í»?Ôô??Ï¢@@3HA:DWORD				; í»?Ôô??Ï¢
EXTRN	?pí»?Ôô??Ï¢@@3PAUaction@@A:DWORD		; pí»?Ôô??Ï¢
EXTRN	?Û°ú¾?íÂ@@3PAUaction@@A:DWORD			; Û°ú¾?íÂ
EXTRN	?ìÑÚª?íÂ@@3PAUaction@@A:DWORD			; ìÑÚª?íÂ
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?AICnt@@3HA DD	01H DUP (?)				; AICnt
_BSS	ENDS
;	COMDAT ?x@?1??AI_SettingProc@@YAHXZ@4HA
_BSS	SEGMENT
?x@?1??AI_SettingProc@@YAHXZ@4HA DD 01H DUP (?)		; `AI_SettingProc'::`2'::x
_BSS	ENDS
;	COMDAT ?y@?1??AI_SettingProc@@YAHXZ@4HA
_BSS	SEGMENT
?y@?1??AI_SettingProc@@YAHXZ@4HA DD 01H DUP (?)		; `AI_SettingProc'::`2'::y
_BSS	ENDS
;	COMDAT ?dwPressTime@?1??AI_SettingProc@@YAHXZ@4KA
_BSS	SEGMENT
?dwPressTime@?1??AI_SettingProc@@YAHXZ@4KA DD 01H DUP (?) ; `AI_SettingProc'::`2'::dwPressTime
_BSS	ENDS
;	COMDAT ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA
_BSS	SEGMENT
?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA DD 018H DUP (?)	; `AI_SettingProc'::`2'::btnId
_BSS	ENDS
;	COMDAT ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA
_BSS	SEGMENT
?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA DD 018H DUP (?) ; `AI_SettingProc'::`2'::btnState
_BSS	ENDS
;	COMDAT ?btnId@?1??AI_OtherProc@@YAXXZ@4PAHA
_BSS	SEGMENT
?btnId@?1??AI_OtherProc@@YAXXZ@4PAHA DD 02H DUP (?)	; `AI_OtherProc'::`2'::btnId
_BSS	ENDS
;	COMDAT __xmm@fffffffefffffffefffffffefffffffe
CONST	SEGMENT
__xmm@fffffffefffffffefffffffefffffffe DB 0feH, 0ffH, 0ffH, 0ffH, 0feH, 0ffH
	DB	0ffH, 0ffH, 0feH, 0ffH, 0ffH, 0ffH, 0feH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT ?szFunctionSwitch@?1??AI_OtherProc@@YAXXZ@4PAY0M@DA
_DATA	SEGMENT
?szFunctionSwitch@?1??AI_OtherProc@@YAXXZ@4PAY0M@DA DB ' ', 0a3H, 0ceH, ' '
	DB	' ', 0a3H, 0cfH, ' ', 00H			; `AI_OtherProc'::`2'::szFunctionSwitch
	ORG $+3
	DB	' ', 0a3H, 0d9H, 0a3H, 0c5H, 0a3H, 0d3H, ' ', 00H
	ORG $+3
_DATA	ENDS
;	COMDAT ?szFunctionName@?1??AI_OtherProc@@YAXXZ@4PAY0M@DA
_DATA	SEGMENT
?szFunctionName@?1??AI_OtherProc@@YAXXZ@4PAY0M@DA DB 00H ; `AI_OtherProc'::`2'::szFunctionName
	ORG $+11
	DB	0b0H, 0edH, 0b1H, 0e2H, 0b9H, 0f6H, 0b8H, 0aeH, 0b1H, 0e2H
	DB	00H
	ORG $+1
_DATA	ENDS
;	COMDAT ??_C@_07NMPJDMOK@W?$HM?$CFX?$HM?$CFX@
CONST	SEGMENT
??_C@_07NMPJDMOK@W?$HM?$CFX?$HM?$CFX@ DB 'W|%X|%X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NOADAHE@?$MA?Z?$LF?$LP?$LA?x?$LA?$NN@
CONST	SEGMENT
??_C@_08NOADAHE@?$MA?Z?$LF?$LP?$LA?x?$LA?$NN@ DB 0c0H, 0daH, 0b5H, 0bfH, 0b0H
	DB	0f8H, 0b0H, 0ddH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DENGHBNH@?$LB?b?$LH?B?5?H?$LI?$LK?$LJ?5?$LO?F?$MA?L?E?$NL?$MA?L?5?A?$LI?$MA?g?G?O?A?v?5?$LO?J?$LN@
CONST	SEGMENT
??_C@_0CG@DENGHBNH@?$LB?b?$LH?B?5?H?$LI?$LK?$LJ?5?$LO?F?$MA?L?E?$NL?$MA?L?5?A?$LI?$MA?g?G?O?A?v?5?$LO?J?$LN@ DB 0b1H
	DB	0e2H, 0b7H, 0c2H, ' ', 0c8H, 0b8H, 0baH, 0b9H, ' ', 0beH, 0c6H
	DB	0c0H, 0ccH, 0c5H, 0dbH, 0c0H, 0ccH, ' ', 0c1H, 0b8H, 0c0H, 0e7H
	DB	0c7H, 0cfH, 0c1H, 0f6H, ' ', 0beH, 0caH, 0bdH, 0c0H, 0b4H, 0cfH
	DB	0b4H, 0d9H, '.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OPDADLEH@?$LB?b?$LH?B?5?H?$LI?$LK?$LJ?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LL?g?$LP?k?G?U?$LE?O?$LE?Y?4@
CONST	SEGMENT
??_C@_0BP@OPDADLEH@?$LB?b?$LH?B?5?H?$LI?$LK?$LJ?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LL?g?$LP?k?G?U?$LE?O?$LE?Y?4@ DB 0b1H
	DB	0e2H, 0b7H, 0c2H, ' ', 0c8H, 0b8H, 0baH, 0b9H, ' ', 0beH, 0c6H
	DB	0c0H, 0ccH, 0c5H, 0dbH, 0c0H, 0bbH, ' ', 0bbH, 0e7H, 0bfH, 0ebH
	DB	0c7H, 0d5H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KIGKCDKE@?$LB?b@
CONST	SEGMENT
??_C@_02KIGKCDKE@?$LB?b@ DB 0b1H, 0e2H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GCFHCCPO@?$LK?N?H?$LA?5?$LE?k?$LL?s?$MA?L?5?$LM?$LD?A?$KE?$LF?G?A?v?5?$LO?J?$LO?R?$LN?$MA?$LE?O?$LE?Y@
CONST	SEGMENT
??_C@_0CB@GCFHCCPO@?$LK?N?H?$LA?5?$LE?k?$LL?s?$MA?L?5?$LM?$LD?A?$KE?$LF?G?A?v?5?$LO?J?$LO?R?$LN?$MA?$LE?O?$LE?Y@ DB 0baH
	DB	0ceH, 0c8H, 0b0H, ' ', 0b4H, 0ebH, 0bbH, 0f3H, 0c0H, 0ccH, ' ', 0bcH
	DB	0b3H, 0c1H, 0a4H, 0b5H, 0c7H, 0c1H, 0f6H, ' ', 0beH, 0caH, 0beH
	DB	0d2H, 0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BIGMCAJH@?$LB?b?$LH?B?$MA?L?5?$LK?N?A?$LH?G?O?$LP?$KJ?5?$LK?N?H?$LA?5?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP@
CONST	SEGMENT
??_C@_0DA@BIGMCAJH@?$LB?b?$LH?B?$MA?L?5?$LK?N?A?$LH?G?O?$LP?$KJ?5?$LK?N?H?$LA?5?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP@ DB 0b1H
	DB	0e2H, 0b7H, 0c2H, 0c0H, 0ccH, ' ', 0baH, 0ceH, 0c1H, 0b7H, 0c7H
	DB	0cfH, 0bfH, 0a9H, ' ', 0baH, 0ceH, 0c8H, 0b0H, ' ', 0c1H, 0d6H
	DB	0bcH, 0faH, 0c0H, 0bbH, ' ', 0bbH, 0e7H, 0bfH, 0ebH, 0c7H, 0d2H
	DB	' ', 0bcH, 0f6H, ' ', 0beH, 0f8H, 0bdH, 0c0H, 0b4H, 0cfH, 0b4H
	DB	0d9H, '.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JIGIABPO@?$LK?N?H?$LA?5?A?V?$LM?z?5?$LL?g?$LP?k@
CONST	SEGMENT
??_C@_0P@JIGIABPO@?$LK?N?H?$LA?5?A?V?$LM?z?5?$LL?g?$LP?k@ DB 0baH, 0ceH, 0c8H
	DB	0b0H, ' ', 0c1H, 0d6H, 0bcH, 0faH, ' ', 0bbH, 0e7H, 0bfH, 0ebH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08HPGBOJPE@?$LB?b?$MA?$PN?$LL?s?E?B@
CONST	SEGMENT
??_C@_08HPGBOJPE@?$LB?b?$MA?$PN?$LL?s?E?B@ DB 0b1H, 0e2H, 0c0H, 0fdH, 0bbH
	DB	0f3H, 0c5H, 0c2H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PMDJCIFK@?$LK?N?H?$LA?5?$LO?F?$MA?L?E?$NL?$MA?L?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
CONST	SEGMENT
??_C@_0BI@PMDJCIFK@?$LK?N?H?$LA?5?$LO?F?$MA?L?E?$NL?$MA?L?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ DB 0baH
	DB	0ceH, 0c8H, 0b0H, ' ', 0beH, 0c6H, 0c0H, 0ccH, 0c5H, 0dbH, 0c0H
	DB	0ccH, ' ', 0beH, 0f8H, 0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DEPLKBFD@?$LK?N?H?$LA?5?$LO?F?$MA?L?E?$NL?5?$LL?g?$LP?k@
CONST	SEGMENT
??_C@_0BB@DEPLKBFD@?$LK?N?H?$LA?5?$LO?F?$MA?L?E?$NL?5?$LL?g?$LP?k@ DB 0baH
	DB	0ceH, 0c8H, 0b0H, ' ', 0beH, 0c6H, 0c0H, 0ccH, 0c5H, 0dbH, ' ', 0bbH
	DB	0e7H, 0bfH, 0ebH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NJPKHDDH@?$LA?$KC?$LM?$LK?A?$KG@
CONST	SEGMENT
??_C@_06NJPKHDDH@?$LA?$KC?$LM?$LK?A?$KG@ DB 0b0H, 0a2H, 0bcH, 0baH, 0c1H, 0a6H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04IOEBOICC@?$LK?N?H?$LA@
CONST	SEGMENT
??_C@_04IOEBOICC@?$LK?N?H?$LA@ DB 0baH, 0ceH, 0c8H, 0b0H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NFDFANHP@?$LD?$LL?$LB?$LI?$LH?B?$MA?$LL?5?H?$LI?$LK?$LJ?G?R?5?$LM?v?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
CONST	SEGMENT
??_C@_0BN@NFDFANHP@?$LD?$LL?$LB?$LI?$LH?B?$MA?$LL?5?H?$LI?$LK?$LJ?G?R?5?$LM?v?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ DB 0b3H
	DB	0bbH, 0b1H, 0b8H, 0b7H, 0c2H, 0c0H, 0bbH, ' ', 0c8H, 0b8H, 0baH
	DB	0b9H, 0c7H, 0d2H, ' ', 0bcH, 0f6H, ' ', 0beH, 0f8H, 0bdH, 0c0H
	DB	0b4H, 0cfH, 0b4H, 0d9H, '.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BIHDODII@?$LO?F?$MA?L?E?$NL?$MA?L?5?$LK?N?A?$LH?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?$MA?$LI?$LH?N?5?H?$LI@
CONST	SEGMENT
??_C@_0DB@BIHDODII@?$LO?F?$MA?L?E?$NL?$MA?L?5?$LK?N?A?$LH?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?$MA?$LI?$LH?N?5?H?$LI@ DB 0beH
	DB	0c6H, 0c0H, 0ccH, 0c5H, 0dbH, 0c0H, 0ccH, ' ', 0baH, 0ceH, 0c1H
	DB	0b7H, 0c7H, 0cfH, 0bfH, 0a9H, ' ', 0b3H, 0bbH, 0b1H, 0b8H, 0b7H
	DB	0c2H, 0c0H, 0b8H, 0b7H, 0ceH, ' ', 0c8H, 0b8H, 0baH, 0b9H, 0c7H
	DB	0d2H, ' ', 0bcH, 0f6H, ' ', 0beH, 0f8H, 0bdH, 0c0H, 0b4H, 0cfH
	DB	0b4H, 0d9H, '.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DPKBDAMH@?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?5?H?$LI?$LK?$LJ@
CONST	SEGMENT
??_C@_0BO@DPKBDAMH@?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?5?H?$LI?$LK?$LJ@ DB 0beH
	DB	0c6H, 0c0H, 0ccH, 0c5H, 0dbH, 0c0H, 0bbH, ' ', 0bbH, 0e7H, 0bfH
	DB	0ebH, 0c7H, 0cfH, 0bfH, 0a9H, ' ', 0b3H, 0bbH, 0b1H, 0b8H, 0b7H
	DB	0c2H, ' ', 0c8H, 0b8H, 0baH, 0b9H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@NHFAFANF@?H?$LI?$LK?$LJ?5?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP?k?G?R?5?$LM?v?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
CONST	SEGMENT
??_C@_0DF@NHFAFANF@?H?$LI?$LK?$LJ?5?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP?k?G?R?5?$LM?v?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ DB 0c8H
	DB	0b8H, 0baH, 0b9H, ' ', 0c1H, 0d6H, 0bcH, 0faH, 0c0H, 0bbH, ' ', 0bbH
	DB	0e7H, 0bfH, 0ebH, 0c7H, 0d2H, ' ', 0bcH, 0f6H, ' ', 0beH, 0f8H
	DB	0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '. ', 0b3H, 0bbH, 0b1H, 0b8H
	DB	0beH, 0e0H, 0c0H, 0bbH, ' ', 0bbH, 0e7H, 0bfH, 0ebH, 0c7H, 0d5H
	DB	0b4H, 0cfH, 0b4H, 0d9H, '.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KCHDHJIN@?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?5?H?$LI?$LK?$LJ@
CONST	SEGMENT
??_C@_0BM@KCHDHJIN@?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?5?H?$LI?$LK?$LJ@ DB 0c1H
	DB	0d6H, 0bcH, 0faH, 0c0H, 0bbH, ' ', 0bbH, 0e7H, 0bfH, 0ebH, 0c7H
	DB	0cfH, 0bfH, 0a9H, ' ', 0b3H, 0bbH, 0b1H, 0b8H, 0b7H, 0c2H, ' ', 0c8H
	DB	0b8H, 0baH, 0b9H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BEFJEOCA@?$LA?m?$LB?b?$LI?$KG?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?$MA?$LL?5?H?$LI?$LK?$LJ?G?O@
CONST	SEGMENT
??_C@_0CH@BEFJEOCA@?$LA?m?$LB?b?$LI?$KG?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?$MA?$LL?5?H?$LI?$LK?$LJ?G?O@ DB 0b0H
	DB	0edH, 0b1H, 0e2H, 0b8H, 0a6H, ' ', 0bbH, 0e7H, 0bfH, 0ebH, 0c7H
	DB	0cfH, 0bfH, 0a9H, ' ', 0b3H, 0bbH, 0b1H, 0b8H, 0b7H, 0c2H, 0c0H
	DB	0bbH, ' ', 0c8H, 0b8H, 0baH, 0b9H, 0c7H, 0cfH, 0bdH, 0caH, 0bdH
	DB	0c3H, 0bfH, 0c0H, '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFMIBPPD@I?$HM?$CFX?$HM?$CFX@
CONST	SEGMENT
??_C@_07LFMIBPPD@I?$HM?$CFX?$HM?$CFX@ DB 'I|%X|%X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KFNLJMFK@?$LA?m?$LB?b@
CONST	SEGMENT
??_C@_04KFNLJMFK@?$LA?m?$LB?b@ DB 0b0H, 0edH, 0b1H, 0e2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OFNEOCJH@MP?$NM?t?p?k?Y?i?$NL?v?$NO?E?i?D?b?O?s?$KN?n?$NM?P?$PM?R?v@
CONST	SEGMENT
??_C@_0BJ@OFNEOCJH@MP?$NM?t?p?k?Y?i?$NL?v?$NO?E?i?D?b?O?s?$KN?n?$NM?P?$PM?R?v@ DB 'M'
	DB	'P', 0dcH, 0f4H, 0f0H, 0ebH, 0d9H, 0e9H, 0dbH, 0f6H, 0deH, 0c5H
	DB	0e9H, 0c4H, 0e2H, 0cfH, 0f3H, 0adH, 0eeH, 0dcH, 0d0H, 0fcH, 0d2H
	DB	0f6H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BOMCDLOB@MP?$NM?t?p?k?Y?i?$NL?v?$NO?E?i?D?b?O?s?$KN?n?$NM?o?q?$DP@
CONST	SEGMENT
??_C@_0BI@BOMCDLOB@MP?$NM?t?p?k?Y?i?$NL?v?$NO?E?i?D?b?O?s?$KN?n?$NM?o?q?$DP@ DB 'M'
	DB	'P', 0dcH, 0f4H, 0f0H, 0ebH, 0d9H, 0e9H, 0dbH, 0f6H, 0deH, 0c5H
	DB	0e9H, 0c4H, 0e2H, 0cfH, 0f3H, 0adH, 0eeH, 0dcH, 0efH, 0f1H, '?'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLEHBIBA@J?$HM?$CFX?$HM?$CFX@
CONST	SEGMENT
??_C@_07DLEHBIBA@J?$HM?$CFX?$HM?$CFX@ DB 'J|%X|%X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IOBJGDJM@?C?$LJ?$LJ?x?B?$LA?$LI?$LG?$LJ?$PN?$LL?g?$LP?k@
CONST	SEGMENT
??_C@_0P@IOBJGDJM@?C?$LJ?$LJ?x?B?$LA?$LI?$LG?$LJ?$PN?$LL?g?$LP?k@ DB 0c3H
	DB	0b9H, 0b9H, 0f8H, 0c2H, 0b0H, 0b8H, 0b6H, 0b9H, 0fdH, 0bbH, 0e7H
	DB	0bfH, 0ebH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NANMIPIL@N@
CONST	SEGMENT
??_C@_01NANMIPIL@N@ DB 'N', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04DMFDFHBJ@H?$HM?$CFX@
CONST	SEGMENT
??_C@_04DMFDFHBJ@H?$HM?$CFX@ DB 'H|%X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NGDMDFPD@P?$HM?$CFX?$HM?$CFX@
CONST	SEGMENT
??_C@_07NGDMDFPD@P?$HM?$CFX?$HM?$CFX@ DB 'P|%X|%X', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?Ordinal@@3PAHA DD 04H					; Ordinal
	DD	02H
	DD	00H
	DD	01H
	DD	03H
	ORG $+4
?Ordinal2@@3PAHA DD 013H				; Ordinal2
	DD	011H
	DD	0fH
	DD	010H
	DD	012H
	DD	0eH
	DD	0cH
	DD	0aH
	DD	0bH
	DD	0dH
	DD	09H
	DD	07H
	DD	05H
	DD	06H
	DD	08H
	DD	04H
	DD	02H
	DD	00H
	DD	01H
	DD	03H
_DATA	ENDS
;	COMDAT ??_C@_02IPAINHI@?$KD?$KF@
CONST	SEGMENT
??_C@_02IPAINHI@?$KD?$KF@ DB 0a3H, 0a5H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KAEALDCD@?$LP?$MA?$LH?y?$LI?$KG?5?$MA?g?$LM?$LD?A?$KE?G?O?$LN?J?$LN?C?$LP?$MA?4@
CONST	SEGMENT
??_C@_0BH@KAEALDCD@?$LP?$MA?$LH?y?$LI?$KG?5?$MA?g?$LM?$LD?A?$KE?G?O?$LN?J?$LN?C?$LP?$MA?4@ DB 0bfH
	DB	0c0H, 0b7H, 0f9H, 0b8H, 0a6H, ' ', 0c0H, 0e7H, 0bcH, 0b3H, 0c1H
	DB	0a4H, 0c7H, 0cfH, 0bdH, 0caH, 0bdH, 0c3H, 0bfH, 0c0H, '.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPOHNOLJ@?$MA?$PL?$MA?$PM?C?$LM@
CONST	SEGMENT
??_C@_06CPOHNOLJ@?$MA?$PL?$MA?$PM?C?$LM@ DB 0c0H, 0fbH, 0c0H, 0fcH, 0c3H, 0bcH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMDHBMDE@?F?D?F?$LM?$KI?k@
CONST	SEGMENT
??_C@_06BMDHBMDE@?F?D?F?$LM?$KI?k@ DB 0c6H, 0c4H, 0c6H, 0bcH, 0a8H, 0ebH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FCMCNHF@?F?D?F?$LM?$KI?j@
CONST	SEGMENT
??_C@_06FCMCNHF@?F?D?F?$LM?$KI?j@ DB 0c6H, 0c4H, 0c6H, 0bcH, 0a8H, 0eaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06COABHOLG@?F?D?F?$LM?$KI?i@
CONST	SEGMENT
??_C@_06COABHOLG@?F?D?F?$LM?$KI?i@ DB 0c6H, 0c4H, 0c6H, 0bcH, 0a8H, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHBKEPPH@?F?D?F?$LM?$KI?h@
CONST	SEGMENT
??_C@_06DHBKEPPH@?F?D?F?$LM?$KI?h@ DB 0c6H, 0c4H, 0c6H, 0bcH, 0a8H, 0e8H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LAICFDDI@?F?D?F?$LM?$KI?g@
CONST	SEGMENT
??_C@_06LAICFDDI@?F?D?F?$LM?$KI?g@ DB 0c6H, 0c4H, 0c6H, 0bcH, 0a8H, 0e7H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MHOBIAIL@?$MA?$PM?C?$LM@
CONST	SEGMENT
??_C@_04MHOBIAIL@?$MA?$PM?C?$LM@ DB 0c0H, 0fcH, 0c3H, 0bcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFMEPEEF@?$LL?s?$LE?k@
CONST	SEGMENT
??_C@_04LFMEPEEF@?$LL?s?$LE?k@ DB 0bbH, 0f3H, 0b4H, 0ebH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OGPGECIA@?$LO?F?$LB?$LK?$MA?$PM?C?$LM@
CONST	SEGMENT
??_C@_08OGPGECIA@?$LO?F?$LB?$LK?$MA?$PM?C?$LM@ DB 0beH, 0c6H, 0b1H, 0baH, 0c0H
	DB	0fcH, 0c3H, 0bcH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KDDDLIGD@?F?d?F?$KO@
CONST	SEGMENT
??_C@_04KDDDLIGD@?F?d?F?$KO@ DB 0c6H, 0e4H, 0c6H, 0aeH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCKPHIM@?$MA?Z?$LN?E@
CONST	SEGMENT
??_C@_04OCCKPHIM@?$MA?Z?$LN?E@ DB 0c0H, 0daH, 0bdH, 0c5H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OHKEAHAF@?$LM?R?G?$LA?$LM?$LB?E?C@
CONST	SEGMENT
??_C@_08OHKEAHAF@?$LM?R?G?$LA?$LM?$LB?E?C@ DB 0bcH, 0d2H, 0c7H, 0b0H, 0bcH
	DB	0b1H, 0c5H, 0c3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLCHMLBO@?$MA?O?$LJ?$NN?$LA?x?$LA?$NN@
CONST	SEGMENT
??_C@_08LLCHMLBO@?$MA?O?$LJ?$NN?$LA?x?$LA?$NN@ DB 0c0H, 0cfH, 0b9H, 0ddH, 0b0H
	DB	0f8H, 0b0H, 0ddH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GGBOKOHL@?$LB?b?E?$LI?$LB?b?$LE?I@
CONST	SEGMENT
??_C@_08GGBOKOHL@?$LB?b?E?$LI?$LB?b?$LE?I@ DB 0b1H, 0e2H, 0c5H, 0b8H, 0b1H
	DB	0e2H, 0b4H, 0c9H, 00H			; `string'
CONST	ENDS
;	COMDAT ?MethodName@?1??AI_SettingProc@@YAHXZ@4PADA
_DATA	SEGMENT
?MethodName@?1??AI_SettingProc@@YAHXZ@4PADA DB 0bdH, 0baH, 0c5H, 0b3H, 0bcH
	DB	0b3H, 0c1H, 0a4H, 00H			; `AI_SettingProc'::`2'::MethodName
_DATA	ENDS
;	COMDAT ?d_offx@?1??AI_SettingProc@@YAHXZ@4PAHA
_DATA	SEGMENT
?d_offx@?1??AI_SettingProc@@YAHXZ@4PAHA DD 061H		; `AI_SettingProc'::`2'::d_offx
	DD	0b8H
	DD	010bH
_DATA	ENDS
;	COMDAT ?u_offx@?1??AI_SettingProc@@YAHXZ@4PAHA
_DATA	SEGMENT
?u_offx@?1??AI_SettingProc@@YAHXZ@4PAHA DD 074H		; `AI_SettingProc'::`2'::u_offx
	DD	0cbH
	DD	011eH
_DATA	ENDS
;	COMDAT ?Notice@?1??AI_SettingProc@@YAHXZ@4PAY0CA@DA
_DATA	SEGMENT
?Notice@?1??AI_SettingProc@@YAHXZ@4PAY0CA@DA DB 0bcH, 0b3H, 0c1H, 0a4H, 0c0H
	DB	0faH, 0c0H, 0e5H, 00H			; `AI_SettingProc'::`2'::Notice
	ORG $+23
	DB	0bcH, 0b3H, 0c1H, 0a4H, 0c3H, 0ebH, 0bcH, 0d2H, 00H
	ORG $+23
	DB	'??', 0fcH, 0deH, '?', 0efH, 0f1H, '?', 00H
	ORG $+23
	DB	'??', 0fcH, 0deH, '?', 0efH, 0f1H, '?', 00H
	ORG $+23
	DB	'???', 0e0H, 0bbH, '?', 0dfH, 0edH, 00H
	ORG $+23
	DB	'???', 0e0H, 0bbH, '?', 0dfH, 0edH, 00H
	ORG $+23
	DB	0f1H, 0f2H, 0caH, 0a5H, 0d2H, 0b1H, 0ceH, 0f9H, 0d5H, 0f4H
	DB	0ecH, 0dbH, 0e1H, 0f4H, 0d3H, 0f8H, 00H
	ORG $+15
	DB	'?', 0e1H, 0b4H, 0d2H, 0b1H, 0ceH, 0f9H, 0d5H, 0f4H, 0ecH
	DB	0dbH, 0e1H, 0f4H, 0d3H, 0f8H, 00H
	ORG $+16
	DB	0cbH, 0efH, '??', 0efH, 0d2H, 0cdH, 0d4H, 0e9H, 0cdH, 0deH
	DB	0c5H, 0e9H, 0c4H, 0efH, 0f1H, '?', 0e1H, 0b6H, 0e2H, 0cdH, 'MP'
	DB	00H
	ORG $+8
	DB	0cbH, 0efH, '??', 0efH, 0d2H, 0cdH, 0d4H, 0e9H, 0cdH, 0deH
	DB	0c5H, 0e9H, 0c4H, 0efH, 0f1H, '?', 0e1H, 0b6H, 0e2H, 0cdH, 'MP'
	DB	00H
	ORG $+8
	DB	'??', 0e2H, 0cfH, 0f3H, 0adH, 0efH, 0f1H, '?', 00H
	ORG $+22
	DB	'??', 0e2H, 0cfH, 0f3H, 0adH, 0efH, 0f1H, '?', 00H
	ORG $+22
	DB	'??', 0deH, 0c5H, 0e9H, 0c4H, 0d9H, 0cdH, '?', 00H
	ORG $+22
	DB	'??', 0deH, 0c5H, 0e9H, 0c4H, 0d9H, 0cdH, '?', 00H
	ORG $+22
	DB	'????', 0fcH, 0deH, '?', 0dbH, 0b0H, 0e3H, 0d2H, 00H
	ORG $+20
	DB	'????', 0fcH, 0deH, '?', 0dbH, 0b0H, 0e3H, 0d2H, 00H
	ORG $+20
	DB	'??', 0deH, 0c5H, 0e9H, 0c4H, 0d9H, 0cdH, '?', 00H
	ORG $+22
	DB	'??', 0deH, 0c5H, 0e9H, 0c4H, 0d9H, 0cdH, '?', 00H
	ORG $+22
	DB	'??', 0cdH, 0f4H, '?', 0dbH, 0b0H, 0e3H, 0d2H, 00H
	ORG $+22
	DB	'??', 0cdH, 0f4H, '?', 0dbH, 0b0H, 0e3H, 0d2H, 00H
	ORG $+22
	DB	'??', 0deH, 0c5H, 0e9H, 0c4H, 0d9H, 0cdH, '?', 00H
	ORG $+22
	DB	'??', 0deH, 0c5H, 0e9H, 0c4H, 0d9H, 0cdH, '?', 00H
	ORG $+22
	DB	'??', 0fcH, 0deH, '?', 0dbH, 0b0H, 0e3H, 0d2H, 00H
	ORG $+22
	DB	'??', 0fcH, 0deH, '?', 0dbH, 0b0H, 0e3H, 0d2H, 00H
	ORG $+22
_DATA	ENDS
;	COMDAT ??_C@_09BACHGGGK@f?$DLencor1c@
CONST	SEGMENT
??_C@_09BACHGGGK@f?$DLencor1c@ DB 'f;encor1c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MNMCLLPK@?$PM?$NO?$DP@
CONST	SEGMENT
??_C@_03MNMCLLPK@?$PM?$NO?$DP@ DB 0fcH, 0deH, '?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MFANEHND@?$DP?$DP?$DP?$DP@
CONST	SEGMENT
??_C@_04MFANEHND@?$DP?$DP?$DP?$DP@ DB '????', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@
CONST	SEGMENT
??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@ DB 0c8H, 0b8H, 0baH, 0b9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPLPIMIC@?$LD?$LL?$LB?$LI?$LH?B@
CONST	SEGMENT
??_C@_06MPLPIMIC@?$LD?$LL?$LB?$LI?$LH?B@ DB 0b3H, 0bbH, 0b1H, 0b8H, 0b7H, 0c2H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02CHHAKFFB@w?$CL@
CONST	SEGMENT
??_C@_02CHHAKFFB@w?$CL@ DB 'w+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PDHJLAOE@data?2AISetting?4dat@
CONST	SEGMENT
??_C@_0BD@PDHJLAOE@data?2AISetting?4dat@ DB 'data\AISetting.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb@ DB 'r+b', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_OtherProc@@YAXXZ
_TEXT	SEGMENT
?AI_OtherProc@@YAXXZ PROC				; AI_OtherProc, COMDAT

; 2050 : void AI_OtherProc() {

  00000	57		 push	 edi

; 2051 : 	static int btnId[AI_OTHER_BTN];
; 2052 : 	int x, y, i;
; 2053 : 	static char szFunctionName[AI_OTHER_BTN][12] = { "","ê³ ê¸°ë²ë¦¬ê¸°" };
; 2054 : 	static char szFunctionSwitch[2][12] = { " ï¼®  ï¼¯ "," ï¼¹ï¼¥ï¼³ " };
; 2055 : 
; 2056 : 	if (pAIOtherFunctionWnd == NULL) {

  00001	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A ; pAIOtherFunctionWnd
  00007	85 ff		 test	 edi, edi
  00009	75 2d		 jne	 SHORT $LN7@AI_OtherPr

; 2057 : 		// è¥å¨ææä¸­
; 2058 : 		if (ProcNo == PROC_BATTLE) pAIOtherFunctionWnd = MakeWindowDisp(413, 150, 3, 2, NULL, 1);
; 2059 : 		else pAIOtherFunctionWnd = MakeWindowDisp(413, 0, 3, 2, NULL, 1);
; 2060 : 	}

  0000b	6a 01		 push	 1
  0000d	57		 push	 edi
  0000e	33 c0		 xor	 eax, eax
  00010	b9 96 00 00 00	 mov	 ecx, 150		; 00000096H
  00015	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  0001c	6a 02		 push	 2
  0001e	0f 44 c1	 cmove	 eax, ecx
  00021	6a 03		 push	 3
  00023	50		 push	 eax
  00024	68 9d 01 00 00	 push	 413			; 0000019dH
  00029	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0002e	83 c4 18	 add	 esp, 24			; 00000018H
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A, eax ; pAIOtherFunctionWnd
$LN15@AI_OtherPr:
  00036	5f		 pop	 edi

; 2093 : 				}
; 2094 : 			}
; 2095 : 		}
; 2096 : 	}
; 2097 : }

  00037	c3		 ret	 0
$LN7@AI_OtherPr:

; 2061 : 	else {
; 2062 : 		if (pAIOtherFunctionWnd->hp >= 1) {

  00038	83 7f 78 01	 cmp	 DWORD PTR [edi+120], 1
  0003c	7c f8		 jl	 SHORT $LN15@AI_OtherPr

; 2063 : 			if (joy_trg[0] & JOY_ESC) {

  0003e	f7 05 00 00 00
	00 00 00 00 80	 test	 DWORD PTR ?joy_trg@@3PAKA, -2147483648 ; 80000000H
  00048	74 1f		 je	 SHORT $LN12@AI_OtherPr

; 2064 : 				DeathAction(pAIOtherFunctionWnd);

  0004a	57		 push	 edi
  0004b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00050	83 c4 04	 add	 esp, 4

; 2065 : 				pAIOtherFunctionWnd = NULL;

  00053	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A, 0 ; pAIOtherFunctionWnd

; 2066 : 				AI_Other_State = 0;

  0005d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Other_State@@3HA, 0 ; AI_Other_State
  00067	5f		 pop	 edi

; 2093 : 				}
; 2094 : 			}
; 2095 : 		}
; 2096 : 	}
; 2097 : }

  00068	c3		 ret	 0
$LN12@AI_OtherPr:

; 2067 : 				return;
; 2068 : 			}
; 2069 : 			x = pAIOtherFunctionWnd->x;

  00069	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 2070 : 			y = pAIOtherFunctionWnd->y;

  0006c	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
  0006f	53		 push	 ebx
  00070	56		 push	 esi

; 2071 : 			for (i = 1; i < AI_OTHER_BTN; i++) {
; 2072 : 				StockFontBuffer(x + 25, y + i * 20, FONT_PRIO_FRONT, FONT_PAL_WHITE, szFunctionName[i], 0);

  00071	6a 00		 push	 0
  00073	68 0c 00 00 00	 push	 OFFSET ?szFunctionName@?1??AI_OtherProc@@YAXXZ@4PAY0M@DA+12
  00078	6a 00		 push	 0
  0007a	6a 01		 push	 1
  0007c	8d 58 64	 lea	 ebx, DWORD PTR [eax+100]
  0007f	83 c0 19	 add	 eax, 25			; 00000019H
  00082	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  00085	56		 push	 esi
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 2073 : 				btnId[i] = StockFontBuffer(x + 100, y + i * 20, FONT_PRIO_FRONT, FONT_PAL_WHITE,

  0008c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_OtherSetting@@3PAHA, 0 ; AI_OtherSetting
  00093	b9 0c 00 00 00	 mov	 ecx, OFFSET ?szFunctionSwitch@?1??AI_OtherProc@@YAXXZ@4PAY0M@DA+12
  00098	6a 02		 push	 2
  0009a	b8 00 00 00 00	 mov	 eax, OFFSET ?szFunctionSwitch@?1??AI_OtherProc@@YAXXZ@4PAY0M@DA
  0009f	0f 45 c1	 cmovne	 eax, ecx
  000a2	50		 push	 eax
  000a3	6a 00		 push	 0
  000a5	6a 01		 push	 1
  000a7	56		 push	 esi
  000a8	53		 push	 ebx
  000a9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 2074 : 					AI_OtherSetting[i - 1] ? szFunctionSwitch[1] : szFunctionSwitch[0], 2);
; 2075 : 			}
; 2076 : 			btnId[0] = StockDispBuffer(x + 100, y + (i + 1) * 20, DISP_PRIO_IME3, 26042, 2);

  000ae	6a 02		 push	 2
  000b0	68 ba 65 00 00	 push	 26042			; 000065baH
  000b5	a3 04 00 00 00	 mov	 DWORD PTR ?btnId@?1??AI_OtherProc@@YAXXZ@4PAHA+4, eax
  000ba	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  000bd	6a 69		 push	 105			; 00000069H
  000bf	50		 push	 eax
  000c0	53		 push	 ebx
  000c1	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  000c6	83 c4 44	 add	 esp, 68			; 00000044H
  000c9	a3 00 00 00 00	 mov	 DWORD PTR ?btnId@?1??AI_OtherProc@@YAXXZ@4PAHA, eax

; 2077 : 
; 2078 : 			if (mouse.onceState & MOUSE_LEFT_CRICK) {

  000ce	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	0f 84 59 ff ff
	ff		 je	 $LN15@AI_OtherPr

; 2079 : 				int id;
; 2080 : 				id = selFontId(btnId, sizeof(btnId) / sizeof(int));

  000dd	6a 02		 push	 2
  000df	68 00 00 00 00	 push	 OFFSET ?btnId@?1??AI_OtherProc@@YAXXZ@4PAHA
  000e4	e8 00 00 00 00	 call	 ?selFontId@@YAHPAHH@Z	; selFontId
  000e9	83 c4 08	 add	 esp, 8

; 2081 : 				switch (id) {

  000ec	83 e8 01	 sub	 eax, 1
  000ef	75 0e		 jne	 SHORT $LN5@AI_OtherPr

; 2082 : 					// èªå¨ä¸¢è
; 2083 : 				case 1:
; 2084 : 					AI_OtherSetting[0] = !AI_OtherSetting[0];

  000f1	39 05 00 00 00
	00		 cmp	 DWORD PTR ?AI_OtherSetting@@3PAHA, eax ; AI_OtherSetting
  000f7	0f 94 c0	 sete	 al
  000fa	a3 00 00 00 00	 mov	 DWORD PTR ?AI_OtherSetting@@3PAHA, eax ; AI_OtherSetting
$LN5@AI_OtherPr:

; 2085 : 					break;
; 2086 : 				}
; 2087 : 				// å³é­
; 2088 : 				if (HitDispNo == btnId[0]) {

  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00104	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?btnId@?1??AI_OtherProc@@YAXXZ@4PAHA
  0010a	0f 85 26 ff ff
	ff		 jne	 $LN15@AI_OtherPr

; 2089 : 					DeathAction(pAIOtherFunctionWnd);

  00110	ff 35 00 00 00
	00		 push	 DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A ; pAIOtherFunctionWnd
  00116	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0011b	83 c4 04	 add	 esp, 4

; 2090 : 					pAIOtherFunctionWnd = NULL;

  0011e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A, 0 ; pAIOtherFunctionWnd

; 2091 : 					AI_Other_State = 0;

  00128	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Other_State@@3HA, 0 ; AI_Other_State
  00132	5f		 pop	 edi

; 2092 : 					AI_Save();

  00133	e9 00 00 00 00	 jmp	 ?AI_Save@@YAHXZ		; AI_Save
?AI_OtherProc@@YAXXZ ENDP				; AI_OtherProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_CloseWnd@@YAXXZ
_TEXT	SEGMENT
?AI_CloseWnd@@YAXXZ PROC				; AI_CloseWnd, COMDAT

; 2014 : #ifdef _NB_æ­çº¿èªå¨éè¿
; 2015 : 	extern BOOL èªå¨ç»éçªå£;
; 2016 : 	extern ACTION* pèªå¨ç»éçªå£;
; 2017 : 	extern ACTION* æ¹åå¨ä½;
; 2018 : 	extern ACTION* äººç©å¨ä½;
; 2019 : 	èªå¨ç»éçªå£ = 0;
; 2020 : 	if (pèªå¨ç»éçªå£) {

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pí»?Ôô??Ï¢@@3PAUaction@@A ; pí»?Ôô??Ï¢
  00005	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?í»?Ôô??Ï¢@@3HA, 0 ; í»?Ôô??Ï¢
  0000f	85 c0		 test	 eax, eax
  00011	74 13		 je	 SHORT $LN2@AI_CloseWn

; 2021 : 		DeathAction(pèªå¨ç»éçªå£);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00019	83 c4 04	 add	 esp, 4

; 2022 : 		pèªå¨ç»éçªå£ = NULL;

  0001c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pí»?Ôô??Ï¢@@3PAUaction@@A, 0 ; pí»?Ôô??Ï¢
$LN2@AI_CloseWn:

; 2023 : 	}
; 2024 : 	if ((int)æ¹åå¨ä½) {

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A ; Û°ú¾?íÂ
  0002b	85 c0		 test	 eax, eax
  0002d	74 39		 je	 SHORT $LN3@AI_CloseWn

; 2025 : 		if ((int)æ¹åå¨ä½ > 1000)

  0002f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00034	7e 09		 jle	 SHORT $LN4@AI_CloseWn

; 2026 : 			DeathAction(æ¹åå¨ä½);

  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0003c	83 c4 04	 add	 esp, 4
$LN4@AI_CloseWn:

; 2027 : 		æ¹åå¨ä½ = NULL;
; 2028 : 		if ((int)äººç©å¨ä½ > 1000)

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A ; ìÑÚª?íÂ
  00044	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A, 0 ; Û°ú¾?íÂ
  0004e	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00053	7e 09		 jle	 SHORT $LN5@AI_CloseWn

; 2029 : 			DeathAction(äººç©å¨ä½);

  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0005b	83 c4 04	 add	 esp, 4
$LN5@AI_CloseWn:

; 2030 : 		äººç©å¨ä½ = NULL;

  0005e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A, 0 ; ìÑÚª?íÂ
$LN3@AI_CloseWn:

; 2031 : 	}
; 2032 : #endif
; 2033 : 
; 2034 : 	AI_State = 0;
; 2035 : 	if (pAISettingWnd) {

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pAISettingWnd@@3PAUaction@@A ; pAISettingWnd
  0006d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  00077	85 c0		 test	 eax, eax
  00079	74 13		 je	 SHORT $LN6@AI_CloseWn

; 2036 : 		DeathAction(pAISettingWnd);

  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00081	83 c4 04	 add	 esp, 4

; 2037 : 		pAISettingWnd = NULL;

  00084	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAISettingWnd@@3PAUaction@@A, 0 ; pAISettingWnd
$LN6@AI_CloseWn:

; 2038 : 	}
; 2039 : #ifdef _AI_OTHER
; 2040 : 	if (pAIOtherFunctionWnd) {

  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A ; pAIOtherFunctionWnd
  00093	85 c0		 test	 eax, eax
  00095	74 1d		 je	 SHORT $LN7@AI_CloseWn

; 2041 : 		DeathAction(pAIOtherFunctionWnd);

  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0009d	83 c4 04	 add	 esp, 4

; 2042 : 		pAIOtherFunctionWnd = NULL;

  000a0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A, 0 ; pAIOtherFunctionWnd

; 2043 : 		AI_Other_State = 0;

  000aa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Other_State@@3HA, 0 ; AI_Other_State
$LN7@AI_CloseWn:

; 2044 : 	}
; 2045 : #endif
; 2046 : }

  000b4	c3		 ret	 0
?AI_CloseWnd@@YAXXZ ENDP				; AI_CloseWnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_ChooseAction@@YAXXZ
_TEXT	SEGMENT
_item_id$1$ = -92					; size = 4
$T1 = -88						; size = 4
_method$1$ = -88					; size = 4
_done$1$ = -84						; size = 4
_i$1$ = -80						; size = 4
_magic_id$1$ = -80					; size = 4
_meat$1$ = -76						; size = 4
_method$1$ = -76					; size = 4
tv2242 = -76						; size = 4
tv2240 = -76						; size = 4
tv2235 = -76						; size = 4
_target$1$ = -72					; size = 4
_target$1$ = -72					; size = 4
tv2253 = -72						; size = 4
_moji$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?AI_ChooseAction@@YAXXZ PROC				; AI_ChooseAction, COMDAT

; 1583 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	57		 push	 edi

; 1584 : 	char* str;
; 1585 : 	BOOL done = 0;
; 1586 : 	int targetNo = -1;
; 1587 : 	char moji[64];
; 1588 : 	//battlePlayerEscFlag = FALSE;
; 1589 : 	//è§æä¸­
; 1590 : 	if (BattleMyNo >= 20) {

  00012	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  00018	83 cb ff	 or	 ebx, -1
  0001b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _done$1$[ebp], 0
  00022	83 ff 14	 cmp	 edi, 20			; 00000014H
  00025	7c 38		 jl	 SHORT $LN30@AI_ChooseA

; 1591 : 		if (bNewServer)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_01NANMIPIL@N@
  00033	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00039	74 12		 je	 SHORT $LN31@AI_ChooseA

; 1592 : 			lssproto_B_send(sockfd, "N");

  0003b	e8 00 00 00 00	 call	 ?lssproto_B_send@@YAXHPAD@Z ; lssproto_B_send

; 1595 : 		extern void InitBattleAnimFlag();
; 1596 : 		InitBattleAnimFlag();

  00040	83 c4 08	 add	 esp, 8
  00043	e8 00 00 00 00	 call	 ?InitBattleAnimFlag@@YAXXZ ; InitBattleAnimFlag

; 1597 : 		SubProcNo++;
; 1598 : 		return;

  00048	e9 e2 0b 00 00	 jmp	 $LN308@AI_ChooseA
$LN31@AI_ChooseA:

; 1593 : 		else
; 1594 : 			old_lssproto_B_send(sockfd, "N");

  0004d	e8 00 00 00 00	 call	 ?old_lssproto_B_send@@YAXHPAD@Z ; old_lssproto_B_send

; 1595 : 		extern void InitBattleAnimFlag();
; 1596 : 		InitBattleAnimFlag();

  00052	83 c4 08	 add	 esp, 8
  00055	e8 00 00 00 00	 call	 ?InitBattleAnimFlag@@YAXXZ ; InitBattleAnimFlag

; 1597 : 		SubProcNo++;
; 1598 : 		return;

  0005a	e9 d0 0b 00 00	 jmp	 $LN308@AI_ChooseA
$LN30@AI_ChooseA:

; 1599 : 	}
; 1600 : 	if (p_party[BattleMyNo]->hp <= 0 ||

  0005f	8b 0c bd 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  00066	56		 push	 esi
  00067	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  0006b	0f 8e a4 09 00
	00		 jle	 $LN35@AI_ChooseA
  00071	f6 05 00 00 00
	00 02		 test	 BYTE PTR ?BattleBpFlag@@3HA, 2
  00078	0f 85 a0 09 00
	00		 jne	 $LN310@AI_ChooseA

; 1605 : 			else
; 1606 : 				old_lssproto_B_send(sockfd, "N");
; 1607 : 		}
; 1608 : 	}
; 1609 : 	else {
; 1610 : 		if (AI_First) {//ç¬¬ä¸æ¬¡

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_First@@3HA, 0 ; AI_First
  00085	0f 84 98 01 00
	00		 je	 $LN245@AI_ChooseA

; 1611 : 			AI_First = 0;
; 1612 : 			int method = AI_method[2];
; 1613 : #ifdef _AI_NEW_FIRST
; 1614 : 			if (bFirstFlag == false) {

  0008b	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bFirstFlag@@3_NA, 0 ; bFirstFlag
  00092	a1 08 00 00 00	 mov	 eax, DWORD PTR ?AI_method@@3PAHA+8
  00097	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_First@@3HA, 0 ; AI_First
  000a1	89 45 b4	 mov	 DWORD PTR _method$1$[ebp], eax
  000a4	0f 85 54 01 00
	00		 jne	 $LN40@AI_ChooseA

; 1615 : #endif
; 1616 : 				if (method > -1 && method < MAX_MAGIC && magic[method].useFlag) {

  000aa	83 f8 08	 cmp	 eax, 8
  000ad	0f 87 70 01 00
	00		 ja	 $LN245@AI_ChooseA
  000b3	6b f0 70	 imul	 esi, eax, 112
  000b6	66 83 be 00 00
	00 00 00	 cmp	 WORD PTR ?magic@@3PAUMAGIC@@A[esi], 0
  000be	0f 84 5f 01 00
	00		 je	 $LN245@AI_ChooseA

; 1617 : 					BOOL mp_enough = TRUE;
; 1618 : 					if (pc.familySprite == 0) {

  000c4	83 3d 4c 51 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20812, 0
  000cb	8b 86 04 00 00
	00		 mov	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[esi+4]
  000d1	75 3e		 jne	 SHORT $LN43@AI_ChooseA

; 1619 : 						if ((magic[method].mp * 80 / 100) > p_party[BattleMyNo]->mp)

  000d3	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  000d6	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000db	c1 e1 04	 shl	 ecx, 4
  000de	f7 e9		 imul	 ecx

; 1624 : 							mp_enough = FALSE;
; 1625 : 					}
; 1626 : 					if (mp_enough) {

  000e0	8b 0c bd 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  000e7	c1 fa 05	 sar	 edx, 5
  000ea	8b c2		 mov	 eax, edx
  000ec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ef	03 c2		 add	 eax, edx
  000f1	3b 81 84 00 00
	00		 cmp	 eax, DWORD PTR [ecx+132]
  000f7	7f 20		 jg	 SHORT $LN47@AI_ChooseA
$LN246@AI_ChooseA:

; 1627 : 						switch (AI_target[2]) {

  000f9	a1 08 00 00 00	 mov	 eax, DWORD PTR ?AI_target@@3PAHA+8
  000fe	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00101	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00104	0f 87 ef 00 00
	00		 ja	 $LN73@AI_ChooseA
  0010a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN275@AI_ChooseA[ecx*4]
$LN43@AI_ChooseA:

; 1620 : 							mp_enough = FALSE;
; 1621 : 					}
; 1622 : 					else {
; 1623 : 						if (magic[method].mp > p_party[BattleMyNo]->mp)

  00111	3b 81 84 00 00
	00		 cmp	 eax, DWORD PTR [ecx+132]
  00117	7e e0		 jle	 SHORT $LN246@AI_ChooseA
$LN47@AI_ChooseA:

; 1693 : 							done = 1;
; 1694 : 						}
; 1695 : 					}
; 1696 : 					else
; 1697 : 						StockChatBufferLine("MPä¸è¶³æ æ³ä½¿ç¨é¦æ¬¡çç²¾çµ", FONT_PAL_WHITE);

  00119	6a 00		 push	 0
  0011b	6a 00		 push	 0
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BOMCDLOB@MP?$NM?t?p?k?Y?i?$NL?v?$NO?E?i?D?b?O?s?$KN?n?$NM?o?q?$DP@

; 1698 : 				}
; 1699 : 				//	else
; 1700 : 				//		StockChatBufferLine( "æ²¡æè®¾å®é¦æ¬¡çç²¾çµ", FONT_PAL_WHITE);
; 1701 : #ifdef _AI_NEW_FIRST
; 1702 : 			}

  00122	e9 f4 00 00 00	 jmp	 $LN311@AI_ChooseA
$LN49@AI_ChooseA:

; 1628 : 						case TARGET_MYSELF:
; 1629 : 							targetNo = BattleMyNo;

  00127	8b df		 mov	 ebx, edi

; 1630 : 							break;

  00129	eb 7b		 jmp	 SHORT $LN2@AI_ChooseA
$LN50@AI_ChooseA:

; 1631 : 						case TARGET_MYPET:
; 1632 : 							if (p_party[BattleMyNo + 5]->func)

  0012b	8b 04 bd 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4+20]
  00132	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00136	0f 84 e7 00 00
	00		 je	 $LN245@AI_ChooseA

; 1633 : 								targetNo = BattleMyNo + 5;

  0013c	8d 5f 05	 lea	 ebx, DWORD PTR [edi+5]

; 1634 : 							break;

  0013f	eb 65		 jmp	 SHORT $LN2@AI_ChooseA
$LN52@AI_ChooseA:

; 1635 : 						case TARGET_MYSIDE:
; 1636 : 							switch (magic[method].target) {

  00141	0f bf 86 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[esi+10]
  00148	83 e8 02	 sub	 eax, 2
  0014b	74 09		 je	 SHORT $LN56@AI_ChooseA
  0014d	83 e8 06	 sub	 eax, 6
  00150	0f 85 cd 00 00
	00		 jne	 $LN245@AI_ChooseA
$LN56@AI_ChooseA:

; 1691 : 							AI_Choosen = "ì²«ë²ì§¸ë§ë²ì¬ì©";

  00156	33 db		 xor	 ebx, ebx
  00158	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  0015b	0f 9d c3	 setge	 bl
  0015e	83 c3 14	 add	 ebx, 20			; 00000014H
  00161	eb 72		 jmp	 SHORT $LN71@AI_ChooseA
$LN59@AI_ChooseA:

; 1637 : 							case MAGIC_TARGET_WHOLEOTHERSIDE:
; 1638 : 								if (BattleMyNo < 10) targetNo = 20;
; 1639 : 								else targetNo = 21;
; 1640 : 								break;
; 1641 : 							case MAGIC_TARGET_ALLMYSIDE:
; 1642 : 								if (BattleMyNo < 10) targetNo = 20;
; 1643 : 								else targetNo = 21;
; 1644 : 								break;
; 1645 : 							}
; 1646 : 							break;
; 1647 : 						case TARGET_OTHERONE:
; 1648 : 							targetNo = GetBattelTarget();

  00163	e8 00 00 00 00	 call	 ?GetBattelTarget@@YAHXZ	; GetBattelTarget

; 1649 : 							break;

  00168	eb 3a		 jmp	 SHORT $LN312@AI_ChooseA
$LN60@AI_ChooseA:

; 1650 : 						case TARGET_OTHERSIDE:
; 1651 : 							switch (magic[method].target) {

  0016a	0f b7 86 0a 00
	00 00		 movzx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[esi+10]
  00171	66 83 f8 03	 cmp	 ax, 3
  00175	74 10		 je	 SHORT $LN61@AI_ChooseA
  00177	66 83 f8 08	 cmp	 ax, 8
  0017b	74 0a		 je	 SHORT $LN61@AI_ChooseA
  0017d	66 83 f8 0b	 cmp	 ax, 11			; 0000000bH
  00181	0f 85 9c 00 00
	00		 jne	 $LN245@AI_ChooseA
$LN61@AI_ChooseA:

; 1652 : #ifdef __ATTACK_MAGIC
; 1653 : 							case MAGIC_TARGET_ALL_ROWS:
; 1654 : #endif
; 1655 : 							case MAGIC_TARGET_WHOLEOTHERSIDE:
; 1656 : 							case MAGIC_TARGET_ALLOTHERSIDE:
; 1657 : 								if (BattleMyNo < 10) targetNo = 21;

  00187	33 db		 xor	 ebx, ebx
  00189	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  0018c	0f 9c c3	 setl	 bl
  0018f	83 c3 14	 add	 ebx, 20			; 00000014H

; 1658 : 								else targetNo = 20;
; 1659 : 								break;
; 1660 : 							}
; 1661 : 							break;

  00192	eb 41		 jmp	 SHORT $LN71@AI_ChooseA
$LN64@AI_ChooseA:

; 1662 : 						case TARGET_ALL:
; 1663 : 							targetNo = 22;

  00194	bb 16 00 00 00	 mov	 ebx, 22			; 00000016H

; 1664 : 							break;

  00199	eb 3a		 jmp	 SHORT $LN71@AI_ChooseA
$LN65@AI_ChooseA:

; 1665 : 						case TARGET_1:
; 1666 : 						case TARGET_2:
; 1667 : 						case TARGET_3:
; 1668 : 						case TARGET_4:
; 1669 : 						case TARGET_5:
; 1670 : 							targetNo = GetFirstTarget(AI_target[2]);

  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?GetFirstTarget@@YAHH@Z	; GetFirstTarget
  001a1	83 c4 04	 add	 esp, 4
$LN312@AI_ChooseA:

; 1688 : 							break;
; 1689 : 						}
; 1690 : 						if (targetNo > -1) {

  001a4	8b d8		 mov	 ebx, eax
$LN2@AI_ChooseA:
  001a6	83 fb ff	 cmp	 ebx, -1
  001a9	7e 78		 jle	 SHORT $LN245@AI_ChooseA
  001ab	eb 28		 jmp	 SHORT $LN71@AI_ChooseA
$LN66@AI_ChooseA:

; 1671 : 							break;
; 1672 : #ifdef __ATTACK_MAGIC
; 1673 : 							// 23: å·¦ä¸ç¬¬ä¸å , 24: å·¦ä¸ç¬¬äºå , 25: å³ä¸ç¬¬ä¸å , 26: å³ä¸ç¬¬äºå
; 1674 : 						case TARGET_ONE_ROW:
; 1675 : 							targetNo = GetBattelTarget();

  001ad	e8 00 00 00 00	 call	 ?GetBattelTarget@@YAHXZ	; GetBattelTarget

; 1676 : 							if (targetNo < 5)

  001b2	83 f8 05	 cmp	 eax, 5
  001b5	7d 07		 jge	 SHORT $LN67@AI_ChooseA

; 1677 : 								targetNo = 25;

  001b7	bb 19 00 00 00	 mov	 ebx, 25			; 00000019H
  001bc	eb 17		 jmp	 SHORT $LN71@AI_ChooseA
$LN67@AI_ChooseA:

; 1678 : 							else if (targetNo < 10)

  001be	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001c1	7d 07		 jge	 SHORT $LN69@AI_ChooseA

; 1679 : 								targetNo = 26;

  001c3	bb 1a 00 00 00	 mov	 ebx, 26			; 0000001aH
  001c8	eb 0b		 jmp	 SHORT $LN71@AI_ChooseA
$LN69@AI_ChooseA:

; 1680 : 							else if (targetNo < 15)

  001ca	33 db		 xor	 ebx, ebx
  001cc	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001cf	0f 9d c3	 setge	 bl
  001d2	83 c3 17	 add	 ebx, 23			; 00000017H
$LN71@AI_ChooseA:

; 1692 : 							sprintf(moji, "J|%X|%X", method, targetNo);

  001d5	53		 push	 ebx
  001d6	ff 75 b4	 push	 DWORD PTR _method$1$[ebp]
  001d9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_0P@IOBJGDJM@?C?$LJ?$LJ?x?B?$LA?$LI?$LG?$LJ?$PN?$LL?g?$LP?k@ ; AI_Choosen
$LN322@AI_ChooseA:

; 1946 : 				}
; 1947 : 			}
; 1948 : 		}
; 1949 : 		if (bNewServer)

  001e3	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  001e6	68 00 00 00 00	 push	 OFFSET ??_C@_07DLEHBIBA@J?$HM?$CFX?$HM?$CFX@
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _sprintf
  001f1	83 c4 10	 add	 esp, 16			; 00000010H
  001f4	e9 b8 07 00 00	 jmp	 $LN157@AI_ChooseA
$LN73@AI_ChooseA:

; 1681 : 								targetNo = 23;
; 1682 : 							else
; 1683 : 								targetNo = 24;
; 1684 : 							break;
; 1685 : #endif
; 1686 : 						default:
; 1687 : 							targetNo = -1;

  001f9	83 cb ff	 or	 ebx, -1

; 1688 : 							break;
; 1689 : 						}
; 1690 : 						if (targetNo > -1) {

  001fc	eb 25		 jmp	 SHORT $LN245@AI_ChooseA
$LN40@AI_ChooseA:

; 1703 : 			else {
; 1704 : 				int ret;
; 1705 : 				ret = AttackAIProc(2, moji);

  001fe	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  00201	50		 push	 eax
  00202	6a 02		 push	 2
  00204	e8 00 00 00 00	 call	 ?AttackAIProc@@YAHHPAD@Z ; AttackAIProc
  00209	83 c4 08	 add	 esp, 8

; 1706 : 				if (ret) done = 1;

  0020c	85 c0		 test	 eax, eax
  0020e	0f 85 9d 07 00
	00		 jne	 $LN157@AI_ChooseA

; 1707 : 				else if (ret == 0) StockChatBufferLine("MPä¸è¶³æ æ³ä½¿ç¨é¦æ¬¡çæè½", FONT_PAL_WHITE);

  00214	50		 push	 eax
  00215	50		 push	 eax
  00216	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OFNEOCJH@MP?$NM?t?p?k?Y?i?$NL?v?$NO?E?i?D?b?O?s?$KN?n?$NM?P?$PM?R?v@
$LN311@AI_ChooseA:

; 1708 : 				else if (ret == -1) StockChatBufferLine("æè½ä»£å·éè¯¯", FONT_PAL_WHITE);
; 1709 : 			}
; 1710 : #endif
; 1711 : 		}
; 1712 : 		if (0 == done) {
; 1713 : 			int magic_id = -1, item_id = -1, target = -1, meat = -1;

  0021b	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  00220	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN245@AI_ChooseA:
  00223	83 c8 ff	 or	 eax, -1
  00226	0b f0		 or	 esi, eax
  00228	89 45 b0	 mov	 DWORD PTR _magic_id$1$[ebp], eax
  0022b	89 75 a4	 mov	 DWORD PTR _item_id$1$[ebp], esi

; 1714 : 			//åæ¾åºæ¯å¦æèä¹ååå¤çéå·
; 1715 : 			// ìì´í
; 1716 : 			for (int i = 0; i < MAX_ITEM; i++) {

  0022e	33 ff		 xor	 edi, edi
  00230	89 45 b4	 mov	 DWORD PTR _meat$1$[ebp], eax
  00233	be d8 01 00 00	 mov	 esi, OFFSET ?pc@@3UPC@@A+472
$LL10@AI_ChooseA:

; 1717 : 				if (pc.item[i].useFlag && (str = strstr(pc.item[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  00238	66 83 7e c8 00	 cmp	 WORD PTR [esi-56], 0
  0023d	74 3c		 je	 SHORT $LN8@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_06MPLPIMIC@?$LD?$LL?$LB?$LI?$LH?B@
  00244	56		 push	 esi
  00245	e8 00 00 00 00	 call	 _strstr
  0024a	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1717 : 				if (pc.item[i].useFlag && (str = strstr(pc.item[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  0024d	85 c0		 test	 eax, eax
  0024f	74 2a		 je	 SHORT $LN8@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00251	68 00 00 00 00	 push	 OFFSET ??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 _strstr
  0025c	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1717 : 				if (pc.item[i].useFlag && (str = strstr(pc.item[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  0025f	85 c0		 test	 eax, eax
  00261	74 18		 je	 SHORT $LN8@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00263	8d 46 d2	 lea	 eax, DWORD PTR [esi-46]
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1718 : 					item_id = i;

  00266	89 7d a4	 mov	 DWORD PTR _item_id$1$[ebp], edi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00269	68 00 00 00 00	 push	 OFFSET ??_C@_04KFNLJMFK@?$LA?m?$LB?b@
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 _strstr
  00274	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1719 : 					if (strstr(pc.item[i].name, "ê³ ê¸°")) {

  00277	85 c0		 test	 eax, eax
  00279	75 11		 jne	 SHORT $LN210@AI_ChooseA
$LN8@AI_ChooseA:

; 1714 : 			//åæ¾åºæ¯å¦æèä¹ååå¤çéå·
; 1715 : 			// ìì´í
; 1716 : 			for (int i = 0; i < MAX_ITEM; i++) {

  0027b	81 c6 7c 01 00
	00		 add	 esi, 380		; 0000017cH
  00281	47		 inc	 edi
  00282	81 fe 00 52 00
	00		 cmp	 esi, OFFSET ?pc@@3UPC@@A+20992
  00288	7c ae		 jl	 SHORT $LL10@AI_ChooseA
  0028a	eb 03		 jmp	 SHORT $LN265@AI_ChooseA
$LN210@AI_ChooseA:

; 1720 : 						meat = i;

  0028c	89 7d b4	 mov	 DWORD PTR _meat$1$[ebp], edi
$LN265@AI_ChooseA:

; 1721 : 						break;
; 1722 : 					}
; 1723 : 				}
; 1724 : 			}
; 1725 : 			//åæ¾åºæ¯å¦æèä¹ååå¤çç²¾çµåmpæ¯å¦è¶³å¤
; 1726 : 			int method = AI_method[0];

  0028f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?AI_method@@3PAHA
  00295	89 75 a8	 mov	 DWORD PTR _method$1$[ebp], esi

; 1728 : 			if ((method > -1 && method < MAX_MAGIC) && magic[method].useFlag && (str = strstr(magic[method].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  00298	83 fe 08	 cmp	 esi, 8
  0029b	0f 87 9c 00 00
	00		 ja	 $LN289@AI_ChooseA
  002a1	6b c6 70	 imul	 eax, esi, 112
  002a4	89 45 b8	 mov	 DWORD PTR tv2253[ebp], eax
  002a7	66 83 b8 00 00
	00 00 00	 cmp	 WORD PTR ?magic@@3PAUMAGIC@@A[eax], 0
  002af	0f 84 88 00 00
	00		 je	 $LN289@AI_ChooseA
  002b5	8d 80 27 00 00
	00		 lea	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+39]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  002bb	68 00 00 00 00	 push	 OFFSET ??_C@_06MPLPIMIC@?$LD?$LL?$LB?$LI?$LH?B@
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 _strstr
  002c6	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1728 : 			if ((method > -1 && method < MAX_MAGIC) && magic[method].useFlag && (str = strstr(magic[method].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  002c9	85 c0		 test	 eax, eax
  002cb	74 70		 je	 SHORT $LN289@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  002cd	68 00 00 00 00	 push	 OFFSET ??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 _strstr
  002d8	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1728 : 			if ((method > -1 && method < MAX_MAGIC) && magic[method].useFlag && (str = strstr(magic[method].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  002db	85 c0		 test	 eax, eax
  002dd	74 5e		 je	 SHORT $LN289@AI_ChooseA

; 1729 : 				if (pc.familySprite == 0) {

  002df	83 3d 4c 51 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20812, 0
  002e6	8b 45 b8	 mov	 eax, DWORD PTR tv2253[ebp]
  002e9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  002ef	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+4]
  002f5	75 2e		 jne	 SHORT $LN84@AI_ChooseA

; 1730 : 					if ((magic[method].mp * 80 / 100) <= p_party[BattleMyNo]->mp)

  002f7	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  002fe	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00301	c1 e1 04	 shl	 ecx, 4
  00304	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00309	f7 e9		 imul	 ecx
  0030b	c1 fa 05	 sar	 edx, 5
  0030e	8b c2		 mov	 eax, edx
  00310	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00313	03 c2		 add	 eax, edx
  00315	3b 86 84 00 00
	00		 cmp	 eax, DWORD PTR [esi+132]
  0031b	7f 26		 jg	 SHORT $LN87@AI_ChooseA

; 1731 : 						magic_id = method;

  0031d	8b 45 a8	 mov	 eax, DWORD PTR _method$1$[ebp]
  00320	89 45 b0	 mov	 DWORD PTR _magic_id$1$[ebp], eax

; 1732 : 				}

  00323	eb 1e		 jmp	 SHORT $LN87@AI_ChooseA
$LN84@AI_ChooseA:

; 1733 : 				else {
; 1734 : 					if (magic[method].mp <= p_party[BattleMyNo]->mp)

  00325	8b 0c bd 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  0032c	83 ca ff	 or	 edx, -1
  0032f	3b 81 84 00 00
	00		 cmp	 eax, DWORD PTR [ecx+132]
  00335	0f 4e d6	 cmovle	 edx, esi
  00338	89 55 b0	 mov	 DWORD PTR _magic_id$1$[ebp], edx
  0033b	eb 06		 jmp	 SHORT $LN87@AI_ChooseA
$LN289@AI_ChooseA:

; 1735 : 						magic_id = method;
; 1736 : 				}
; 1737 : 			}
; 1738 : 			//æ¾è¡¥èä¹åçç®æ 
; 1739 : 			if (TARGET_1 <= AI_target[0] && AI_target[0] <= TARGET_5) {

  0033d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
$LN87@AI_ChooseA:
  00343	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?AI_target@@3PAHA
  00349	8d 46 f9	 lea	 eax, DWORD PTR [esi-7]
  0034c	83 f8 04	 cmp	 eax, 4
  0034f	77 15		 ja	 SHORT $LN244@AI_ChooseA

; 1740 : 				target = GetCureTarget(AI_target[0]);

  00351	56		 push	 esi
  00352	e8 00 00 00 00	 call	 ?GetCureTarget@@YAHH@Z	; GetCureTarget
  00357	83 c4 04	 add	 esp, 4
  0035a	89 45 b8	 mov	 DWORD PTR _target$1$[ebp], eax

; 1741 : 			}
; 1742 : 			if (target == -1) {

  0035d	83 f8 ff	 cmp	 eax, -1
  00360	0f 85 0f 01 00
	00		 jne	 $LN313@AI_ChooseA
$LN244@AI_ChooseA:

; 1743 : 				if (AI_target[0] == TARGET_MYSELF) {//åè¡¥èªå·±è¡

  00366	83 fe 01	 cmp	 esi, 1
  00369	0f 85 85 00 00
	00		 jne	 $LN90@AI_ChooseA

; 1744 : 					if (p_party[BattleMyNo]->maxHp * AI_limit[0] / 100 > p_party[BattleMyNo]->hp) {

  0036f	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  00376	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0037b	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  00381	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?AI_limit@@3PAHA
  00388	f7 e9		 imul	 ecx
  0038a	c1 fa 05	 sar	 edx, 5
  0038d	8b c2		 mov	 eax, edx
  0038f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00392	03 c2		 add	 eax, edx
  00394	3b 46 78	 cmp	 eax, DWORD PTR [esi+120]
  00397	0f 8f d0 00 00
	00		 jg	 $LN314@AI_ChooseA

; 1745 : 						target = BattleMyNo;
; 1746 : 					}
; 1747 : 					else if (p_party[BattleMyNo + 5]->func && pet[pc.battlePetNo].hp > 0 && pet[pc.battlePetNo].maxHp * AI_limit[0] / 100 > pet[pc.battlePetNo].hp) {

  0039d	8b 04 bd 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4+20]
  003a4	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  003a8	0f 84 b3 01 00
	00		 je	 $LN247@AI_ChooseA
  003ae	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  003b5	69 c8 78 0b 00
	00		 imul	 ecx, eax, 2936
  003bb	8b b1 08 00 00
	00		 mov	 esi, DWORD PTR ?pet@@3PAUPET@@A[ecx+8]
  003c1	85 f6		 test	 esi, esi
  003c3	0f 8e 98 01 00
	00		 jle	 $LN247@AI_ChooseA
  003c9	8b 89 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pet@@3PAUPET@@A[ecx+12]
  003cf	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003d4	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?AI_limit@@3PAHA
  003db	f7 e9		 imul	 ecx
  003dd	c1 fa 05	 sar	 edx, 5
  003e0	8b c2		 mov	 eax, edx
  003e2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003e5	03 c2		 add	 eax, edx
  003e7	3b c6		 cmp	 eax, esi
  003e9	0f 8e 72 01 00
	00		 jle	 $LN247@AI_ChooseA

; 1748 : 						target = BattleMyNo + 5;

  003ef	8d 47 05	 lea	 eax, DWORD PTR [edi+5]

; 1749 : 					}
; 1750 : 				}

  003f2	eb 7b		 jmp	 SHORT $LN315@AI_ChooseA
$LN90@AI_ChooseA:

; 1751 : 				else {// if( AI_target[0] == TARGET_MYPET){//åè¡¥å® ç©è¡
; 1752 : 					if (p_party[BattleMyNo + 5]->func && pet[pc.battlePetNo].hp > 0 && pet[pc.battlePetNo].maxHp * AI_limit[0] / 100 > pet[pc.battlePetNo].hp) {

  003f4	8b 04 bd 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4+20]
  003fb	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  003ff	74 3e		 je	 SHORT $LN95@AI_ChooseA
  00401	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  00408	69 c8 78 0b 00
	00		 imul	 ecx, eax, 2936
  0040e	8b b1 08 00 00
	00		 mov	 esi, DWORD PTR ?pet@@3PAUPET@@A[ecx+8]
  00414	85 f6		 test	 esi, esi
  00416	7e 27		 jle	 SHORT $LN95@AI_ChooseA
  00418	8b 89 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pet@@3PAUPET@@A[ecx+12]
  0041e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00423	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?AI_limit@@3PAHA
  0042a	f7 e9		 imul	 ecx
  0042c	c1 fa 05	 sar	 edx, 5
  0042f	8b c2		 mov	 eax, edx
  00431	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00434	03 c2		 add	 eax, edx
  00436	3b c6		 cmp	 eax, esi
  00438	7e 05		 jle	 SHORT $LN95@AI_ChooseA

; 1753 : 						target = BattleMyNo + 5;

  0043a	8d 47 05	 lea	 eax, DWORD PTR [edi+5]

; 1754 : 					}

  0043d	eb 30		 jmp	 SHORT $LN315@AI_ChooseA
$LN95@AI_ChooseA:

; 1755 : 					else if (p_party[BattleMyNo]->maxHp * AI_limit[0] / 100 > p_party[BattleMyNo]->hp) {

  0043f	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  00446	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0044b	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  00451	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?AI_limit@@3PAHA
  00458	f7 e9		 imul	 ecx
  0045a	c1 fa 05	 sar	 edx, 5
  0045d	8b c2		 mov	 eax, edx
  0045f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00462	03 c2		 add	 eax, edx
  00464	3b 46 78	 cmp	 eax, DWORD PTR [esi+120]
  00467	0f 8e f4 00 00
	00		 jle	 $LN247@AI_ChooseA
$LN314@AI_ChooseA:

; 1756 : 						target = BattleMyNo;
; 1757 : 					}
; 1758 : 				}
; 1759 : 			}
; 1760 : 			if (target > -1) {

  0046d	8b c7		 mov	 eax, edi
$LN315@AI_ChooseA:
  0046f	89 45 b8	 mov	 DWORD PTR _target$1$[ebp], eax
  00472	83 f8 ff	 cmp	 eax, -1
$LN313@AI_ChooseA:
  00475	0f 8e e6 00 00
	00		 jle	 $LN247@AI_ChooseA

; 1761 : 				if (item_id > -1 || magic_id > -1) {

  0047b	8b 75 a4	 mov	 esi, DWORD PTR _item_id$1$[ebp]
  0047e	8b 55 b0	 mov	 edx, DWORD PTR _magic_id$1$[ebp]
  00481	83 fe ff	 cmp	 esi, -1
  00484	7f 13		 jg	 SHORT $LN101@AI_ChooseA
  00486	83 fa ff	 cmp	 edx, -1
  00489	7f 0e		 jg	 SHORT $LN101@AI_ChooseA

; 1793 : 							}
; 1794 : 						}
; 1795 : 					}
; 1796 : 				}
; 1797 : 				else
; 1798 : 					StockChatBufferLine("ë´êµ¬ë ¥ì íë³µí  ì ììµëë¤.", FONT_PAL_WHITE);

  0048b	6a 00		 push	 0
  0048d	6a 00		 push	 0
  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NFDFANHP@?$LD?$LL?$LB?$LI?$LH?B?$MA?$LL?5?H?$LI?$LK?$LJ?G?R?5?$LM?v?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
  00494	e9 ba 00 00 00	 jmp	 $LN316@AI_ChooseA
$LN101@AI_ChooseA:

; 1762 : 					if (meat > -1) {//ä½¿ç¨èè¡¥èä¹å // ê³ ê¸° ì°ì  ì¬ì©

  00499	8b 4d b4	 mov	 ecx, DWORD PTR _meat$1$[ebp]
  0049c	83 f9 ff	 cmp	 ecx, -1
  0049f	7e 22		 jle	 SHORT $LN102@AI_ChooseA

; 1763 : 						done = 1;
; 1764 : 						sprintf(moji, "I|%X|%X", meat, target);

  004a1	50		 push	 eax
  004a2	51		 push	 ecx
  004a3	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  004a6	68 00 00 00 00	 push	 OFFSET ??_C@_07LFMIBPPD@I?$HM?$CFX?$HM?$CFX@
  004ab	50		 push	 eax
  004ac	e8 00 00 00 00	 call	 _sprintf
  004b1	83 c4 10	 add	 esp, 16			; 00000010H

; 1765 : 						AI_Choosen = "ê³ ê¸°ë¥¼ ì¬ì©íì¬ ë´êµ¬ë ¥ì íë³µíì­ìì¤.";

  004b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_0CH@BEFJEOCA@?$LA?m?$LB?b?$LI?$KG?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?$MA?$LL?5?H?$LI?$LK?$LJ?G?O@ ; AI_Choosen

; 1766 : 					}

  004be	e9 ee 04 00 00	 jmp	 $LN157@AI_ChooseA
$LN102@AI_ChooseA:

; 1767 : 					else {
; 1768 : 						if (MAX_MAGIC > AI_method[0] && AI_method[0] >= 0) {//ä½¿ç¨ç²¾çµè¡¥èä¹å // ì£¼ì  ì¬ì©

  004c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AI_method@@3PAHA
  004c9	83 f9 08	 cmp	 ecx, 8
  004cc	77 55		 ja	 SHORT $LN248@AI_ChooseA

; 1769 : 							if (magic[AI_method[0]].target != MAGIC_TARGET_MYSELF || target == BattleMyNo) {

  004ce	6b c1 70	 imul	 eax, ecx, 112
  004d1	0f b7 88 0a 00
	00 00		 movzx	 ecx, WORD PTR ?magic@@3PAUMAGIC@@A[eax+10]
  004d8	8b 45 b8	 mov	 eax, DWORD PTR _target$1$[ebp]
  004db	66 85 c9	 test	 cx, cx
  004de	75 04		 jne	 SHORT $LN106@AI_ChooseA
  004e0	3b c7		 cmp	 eax, edi
  004e2	75 3f		 jne	 SHORT $LN248@AI_ChooseA
$LN106@AI_ChooseA:

; 1770 : 								if (magic_id > -1) {

  004e4	83 fa ff	 cmp	 edx, -1
  004e7	7e 26		 jle	 SHORT $LN107@AI_ChooseA

; 1771 : 									int method = AI_method[0];
; 1772 : 									if (MAGIC_TARGET_WHOLEOTHERSIDE == magic[method].target) {

  004e9	be 08 00 00 00	 mov	 esi, 8
  004ee	66 3b f1	 cmp	 si, cx
  004f1	75 0b		 jne	 SHORT $LN110@AI_ChooseA

; 1773 : 										if (BattleMyNo < 10) target = 20;

  004f3	33 c0		 xor	 eax, eax
  004f5	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  004f8	0f 9d c0	 setge	 al
  004fb	83 c0 14	 add	 eax, 20			; 00000014H
$LN110@AI_ChooseA:

; 1774 : 										else target = 21;
; 1775 : 									}
; 1776 : 									done = 1;
; 1777 : 									AI_Choosen = "ì£¼ì ì ì¬ì©íì¬ ë´êµ¬ë ¥ íë³µ";
; 1778 : 									sprintf(moji, "J|%X|%X", magic_id, target);

  004fe	50		 push	 eax
  004ff	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_0BM@KCHDHJIN@?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?5?H?$LI?$LK?$LJ@ ; AI_Choosen
  00509	52		 push	 edx

; 1779 : 								}

  0050a	e9 d4 fc ff ff	 jmp	 $LN322@AI_ChooseA
$LN107@AI_ChooseA:

; 1780 : 								else {
; 1781 : 									StockChatBufferLine("íë³µ ì£¼ì ì ì¬ì©í  ì ììµëë¤. ë´êµ¬ì½ì ì¬ì©í©ëë¤.", FONT_PAL_WHITE);

  0050f	6a 00		 push	 0
  00511	6a 00		 push	 0
  00513	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@NHFAFANF@?H?$LI?$LK?$LJ?5?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP?k?G?R?5?$LM?v?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
  00518	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  0051d	8b 45 b8	 mov	 eax, DWORD PTR _target$1$[ebp]
  00520	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN248@AI_ChooseA:

; 1782 : 								}
; 1783 : 							}
; 1784 : 						}
; 1785 : 						if (!done) {//ä½¿ç¨éå·è¡¥èä¹å // ìì´í ì¬ì©
; 1786 : 							if (item_id > -1) {

  00523	83 fe ff	 cmp	 esi, -1
  00526	7e 22		 jle	 SHORT $LN113@AI_ChooseA

; 1787 : 								done = 1;
; 1788 : 								sprintf(moji, "I|%X|%X", item_id, target);

  00528	50		 push	 eax
  00529	56		 push	 esi
  0052a	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  0052d	68 00 00 00 00	 push	 OFFSET ??_C@_07LFMIBPPD@I?$HM?$CFX?$HM?$CFX@
  00532	50		 push	 eax
  00533	e8 00 00 00 00	 call	 _sprintf
  00538	83 c4 10	 add	 esp, 16			; 00000010H

; 1789 : 								AI_Choosen = "ìì´íì ì¬ì©íì¬ ë´êµ¬ë ¥ íë³µ";

  0053b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_0BO@DPKBDAMH@?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LL?g?$LP?k?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?5?H?$LI?$LK?$LJ@ ; AI_Choosen

; 1790 : 							}

  00545	e9 67 04 00 00	 jmp	 $LN157@AI_ChooseA
$LN113@AI_ChooseA:

; 1791 : 							else {
; 1792 : 								StockChatBufferLine("ìì´íì´ ë¶ì¡±íì¬ ë´êµ¬ë ¥ì¼ë¡ íë³µí  ì ììµëë¤.", FONT_PAL_WHITE);

  0054a	6a 00		 push	 0
  0054c	6a 00		 push	 0
  0054e	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BIHDODII@?$LO?F?$MA?L?E?$NL?$MA?L?5?$LK?N?A?$LH?G?O?$LP?$KJ?5?$LD?$LL?$LB?$LI?$LH?B?$MA?$LI?$LH?N?5?H?$LI@
$LN316@AI_ChooseA:

; 1799 : 			}
; 1800 : 		}
; 1801 : 		// ë¶í
; 1802 : 		if (0 == done) {
; 1803 : 			int start = 0, end = 10, target = -1;

  00553	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  00558	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  0055e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN247@AI_ChooseA:

; 1804 : 			switch (AI_target[3]) {

  00561	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?AI_target@@3PAHA+12
  00567	33 f6		 xor	 esi, esi
  00569	89 75 b8	 mov	 DWORD PTR _target$1$[ebp], esi
  0056c	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  0056f	8d 4e 0a	 lea	 ecx, DWORD PTR [esi+10]
  00572	83 f8 09	 cmp	 eax, 9
  00575	0f 87 55 02 00
	00		 ja	 $LN249@AI_ChooseA
  0057b	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN276@AI_ChooseA[eax]
  00582	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN277@AI_ChooseA[eax*4]
$LN116@AI_ChooseA:

; 1805 : 			case TARGET_MYSIDE:
; 1806 : 				if (p_party[BattleMyNo + 5]->func && pet[pc.battlePetNo].hp <= 0) {

  00589	8b 04 bd 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4+20]
  00590	39 70 08	 cmp	 DWORD PTR [eax+8], esi
  00593	74 1a		 je	 SHORT $LN117@AI_ChooseA
  00595	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  0059c	69 c0 78 0b 00
	00		 imul	 eax, eax, 2936
  005a2	39 b0 08 00 00
	00		 cmp	 DWORD PTR ?pet@@3PAUPET@@A[eax+8], esi
  005a8	7f 05		 jg	 SHORT $LN117@AI_ChooseA

; 1807 : 					target = BattleMyNo + 5;

  005aa	8d 77 05	 lea	 esi, DWORD PTR [edi+5]

; 1808 : 				}

  005ad	eb 75		 jmp	 SHORT $LN317@AI_ChooseA
$LN117@AI_ChooseA:

; 1809 : 				else {
; 1810 : 					if (BattleMyNo >= 10) {

  005af	3b f9		 cmp	 edi, ecx
  005b1	7c 0d		 jl	 SHORT $LL292@AI_ChooseA

; 1811 : 						start = 10;

  005b3	8b f1		 mov	 esi, ecx

; 1812 : 						end = 20;

  005b5	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  005ba	89 75 b8	 mov	 DWORD PTR _target$1$[ebp], esi
  005bd	0f 1f 00	 npad	 3
$LL292@AI_ChooseA:

; 1815 : 						if (BattleMyNo == start || (BattleMyNo + 5) == start)

  005c0	3b fe		 cmp	 edi, esi
  005c2	74 1a		 je	 SHORT $LN13@AI_ChooseA
  005c4	8d 47 05	 lea	 eax, DWORD PTR [edi+5]
  005c7	3b c6		 cmp	 eax, esi
  005c9	74 13		 je	 SHORT $LN13@AI_ChooseA

; 1816 : 							continue;
; 1817 : 						if (p_party[start]->func == NULL)

  005cb	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[esi*4]
  005d2	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  005d6	74 06		 je	 SHORT $LN13@AI_ChooseA

; 1818 : 							continue;
; 1819 : 						if (p_party[start]->hp > 0)

  005d8	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  005dc	7e 49		 jle	 SHORT $LN11@AI_ChooseA
$LN13@AI_ChooseA:

; 1813 : 					}
; 1814 : 					for (; start < end; start++) {

  005de	46		 inc	 esi
  005df	89 75 b8	 mov	 DWORD PTR _target$1$[ebp], esi
  005e2	3b f1		 cmp	 esi, ecx
  005e4	7c da		 jl	 SHORT $LL292@AI_ChooseA
  005e6	e9 e5 01 00 00	 jmp	 $LN249@AI_ChooseA
$LN124@AI_ChooseA:

; 1820 : 							continue;
; 1821 : 						target = start;
; 1822 : 						break;
; 1823 : 					}
; 1824 : 				}
; 1825 : 				break;
; 1826 : 			case TARGET_MYPET:
; 1827 : 				if (p_party[BattleMyNo + 5]->func && pet[pc.battlePetNo].hp <= 0)

  005eb	8b 04 bd 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4+20]
  005f2	39 70 08	 cmp	 DWORD PTR [eax+8], esi
  005f5	0f 84 d5 01 00
	00		 je	 $LN249@AI_ChooseA
  005fb	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  00602	69 c0 78 0b 00
	00		 imul	 eax, eax, 2936
  00608	39 b0 08 00 00
	00		 cmp	 DWORD PTR ?pet@@3PAUPET@@A[eax+8], esi
  0060e	0f 8f bc 01 00
	00		 jg	 $LN249@AI_ChooseA

; 1828 : 					target = BattleMyNo + 5;

  00614	8d 77 05	 lea	 esi, DWORD PTR [edi+5]

; 1829 : 				break;

  00617	eb 0b		 jmp	 SHORT $LN317@AI_ChooseA
$LN126@AI_ChooseA:

; 1830 : 			case TARGET_1:
; 1831 : 			case TARGET_2:
; 1832 : 			case TARGET_3:
; 1833 : 			case TARGET_4:
; 1834 : 			case TARGET_5:
; 1835 : 				target = GetResurrectTarget(AI_target[3]);

  00619	52		 push	 edx
  0061a	e8 00 00 00 00	 call	 ?GetResurrectTarget@@YAHH@Z ; GetResurrectTarget
  0061f	83 c4 04	 add	 esp, 4
  00622	8b f0		 mov	 esi, eax
$LN317@AI_ChooseA:

; 1836 : 				break;
; 1837 : 			}
; 1838 : 			if (target > -1) {//å® ç©æ­»äº

  00624	89 75 b8	 mov	 DWORD PTR _target$1$[ebp], esi
$LN11@AI_ChooseA:
  00627	83 fe ff	 cmp	 esi, -1
  0062a	0f 8e a0 01 00
	00		 jle	 $LN249@AI_ChooseA

; 1839 : 				if (MAX_MAGIC == AI_method[3]) {

  00630	8b 3d 0c 00 00
	00		 mov	 edi, DWORD PTR ?AI_method@@3PAHA+12
  00636	83 ff 09	 cmp	 edi, 9
  00639	0f 85 a6 00 00
	00		 jne	 $LN128@AI_ChooseA

; 1840 : 					int i;
; 1841 : 					for (i = 0; i < MAX_ITEM; i++) {

  0063f	33 c0		 xor	 eax, eax
  00641	bf d8 01 00 00	 mov	 edi, OFFSET ?pc@@3UPC@@A+472
  00646	89 45 b0	 mov	 DWORD PTR _i$1$[ebp], eax
  00649	0f 1f 80 00 00
	00 00		 npad	 7
$LL18@AI_ChooseA:

; 1844 : 						if (pc.item[i].useFlag && strstr(pc.item[i].memo, "ë¶í") && strstr(pc.item[i].name, "ê°ì±ì ")) {

  00650	66 83 7f c8 00	 cmp	 WORD PTR [edi-56], 0
  00655	74 2a		 je	 SHORT $LN16@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00657	68 00 00 00 00	 push	 OFFSET ??_C@_04IOEBOICC@?$LK?N?H?$LA@
  0065c	57		 push	 edi
  0065d	e8 00 00 00 00	 call	 _strstr
  00662	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1844 : 						if (pc.item[i].useFlag && strstr(pc.item[i].memo, "ë¶í") && strstr(pc.item[i].name, "ê°ì±ì ")) {

  00665	85 c0		 test	 eax, eax
  00667	74 15		 je	 SHORT $LN299@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00669	8d 47 d2	 lea	 eax, DWORD PTR [edi-46]
  0066c	68 00 00 00 00	 push	 OFFSET ??_C@_06NJPKHDDH@?$LA?$KC?$LM?$LK?A?$KG@
  00671	50		 push	 eax
  00672	e8 00 00 00 00	 call	 _strstr
  00677	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1844 : 						if (pc.item[i].useFlag && strstr(pc.item[i].memo, "ë¶í") && strstr(pc.item[i].name, "ê°ì±ì ")) {

  0067a	85 c0		 test	 eax, eax
  0067c	75 17		 jne	 SHORT $LN211@AI_ChooseA
$LN299@AI_ChooseA:

; 1840 : 					int i;
; 1841 : 					for (i = 0; i < MAX_ITEM; i++) {

  0067e	8b 45 b0	 mov	 eax, DWORD PTR _i$1$[ebp]
$LN16@AI_ChooseA:
  00681	40		 inc	 eax
  00682	81 c7 7c 01 00
	00		 add	 edi, 380		; 0000017cH
  00688	89 45 b0	 mov	 DWORD PTR _i$1$[ebp], eax
  0068b	81 ff 00 52 00
	00		 cmp	 edi, OFFSET ?pc@@3UPC@@A+20992
  00691	7c bd		 jl	 SHORT $LL18@AI_ChooseA
  00693	eb 30		 jmp	 SHORT $LN267@AI_ChooseA
$LN211@AI_ChooseA:

; 1845 : 							AI_Choosen = "ë¶í ìì´í ì¬ì©";
; 1846 : 							done = 1;
; 1847 : 							sprintf(moji, "I|%X|%X", i, target);

  00695	56		 push	 esi
  00696	8b 75 b0	 mov	 esi, DWORD PTR _i$1$[ebp]
  00699	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  0069c	56		 push	 esi
  0069d	68 00 00 00 00	 push	 OFFSET ??_C@_07LFMIBPPD@I?$HM?$CFX?$HM?$CFX@
  006a2	50		 push	 eax
  006a3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_0BB@DEPLKBFD@?$LK?N?H?$LA?5?$LO?F?$MA?L?E?$NL?5?$LL?g?$LP?k@ ; AI_Choosen
  006ad	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _done$1$[ebp], 1
  006b4	e8 00 00 00 00	 call	 _sprintf
  006b9	83 c4 10	 add	 esp, 16			; 00000010H

; 1848 : 							break;
; 1849 : 						}
; 1850 : 					}
; 1851 : 					if (i >= MAX_ITEM)

  006bc	83 fe 36	 cmp	 esi, 54			; 00000036H
  006bf	0f 8c ec 02 00
	00		 jl	 $LN157@AI_ChooseA
$LN267@AI_ChooseA:

; 1852 : 						StockChatBufferLine("ë¶í ìì´íì´ ììµëë¤.", FONT_PAL_WHITE);

  006c5	6a 00		 push	 0
  006c7	6a 00		 push	 0
  006c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PMDJCIFK@?$LK?N?H?$LA?5?$LO?F?$MA?L?E?$NL?$MA?L?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
  006ce	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  006d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1875 : 				}
; 1876 : 			}
; 1877 : 		}
; 1878 : #ifndef _ATTACK_AI
; 1879 : 		if (0 == done && (/*p_party[BattleMyNo]->maxMp*/100 * AI_limit[1] / 100 > p_party[BattleMyNo]->mp)) {//è¡¥æ°
; 1880 : #else
; 1881 : 		if (0 == done && ((p_party[BattleMyNo]->maxMp * AI_limit[1] / 100) > p_party[BattleMyNo]->mp)) {//è¡¥æ°

  006d6	83 7d ac 00	 cmp	 DWORD PTR _done$1$[ebp], 0
  006da	0f 85 d1 02 00
	00		 jne	 $LN157@AI_ChooseA
  006e0	e9 e5 00 00 00	 jmp	 $LN318@AI_ChooseA
$LN128@AI_ChooseA:

; 1857 : 					if (method > -1 && magic[method].useFlag && (str = strstr(magic[method].memo, "ê¸°ì ìí")) && strstr(str, "íë³µ")) {

  006e5	83 ff ff	 cmp	 edi, -1
  006e8	0f 8e cb 00 00
	00		 jle	 $LN132@AI_ChooseA
  006ee	6b c7 70	 imul	 eax, edi, 112
  006f1	89 45 b4	 mov	 DWORD PTR tv2242[ebp], eax
  006f4	66 83 b8 00 00
	00 00 00	 cmp	 WORD PTR ?magic@@3PAUMAGIC@@A[eax], 0
  006fc	0f 84 b7 00 00
	00		 je	 $LN132@AI_ChooseA
  00702	8d 80 27 00 00
	00		 lea	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+39]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00708	68 00 00 00 00	 push	 OFFSET ??_C@_08HPGBOJPE@?$LB?b?$MA?$PN?$LL?s?E?B@
  0070d	50		 push	 eax
  0070e	e8 00 00 00 00	 call	 _strstr
  00713	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1857 : 					if (method > -1 && magic[method].useFlag && (str = strstr(magic[method].memo, "ê¸°ì ìí")) && strstr(str, "íë³µ")) {

  00716	85 c0		 test	 eax, eax
  00718	0f 84 9b 00 00
	00		 je	 $LN132@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  0071e	68 00 00 00 00	 push	 OFFSET ??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@
  00723	50		 push	 eax
  00724	e8 00 00 00 00	 call	 _strstr
  00729	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1857 : 					if (method > -1 && magic[method].useFlag && (str = strstr(magic[method].memo, "ê¸°ì ìí")) && strstr(str, "íë³µ")) {

  0072c	85 c0		 test	 eax, eax
  0072e	0f 84 85 00 00
	00		 je	 $LN132@AI_ChooseA

; 1858 : 						if (pc.familySprite == 0) {

  00734	83 3d 4c 51 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20812, 0
  0073b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  00740	75 43		 jne	 SHORT $LN134@AI_ChooseA

; 1859 : 							if ((magic[method].mp * 80 / 100) <= p_party[BattleMyNo]->mp)

  00742	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00749	8b 45 b4	 mov	 eax, DWORD PTR tv2242[ebp]
  0074c	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+4]
  00752	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00755	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0075a	c1 e1 04	 shl	 ecx, 4
  0075d	f7 e9		 imul	 ecx
  0075f	c1 fa 05	 sar	 edx, 5
  00762	8b c2		 mov	 eax, edx
  00764	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00767	03 c2		 add	 eax, edx
  00769	3b 86 84 00 00
	00		 cmp	 eax, DWORD PTR [esi+132]
  0076f	7f 3d		 jg	 SHORT $LN138@AI_ChooseA

; 1860 : 								done = 1;
; 1861 : 						}

  00771	8b 75 b8	 mov	 esi, DWORD PTR _target$1$[ebp]

; 1864 : 								done = 1;
; 1865 : 						}
; 1866 : 						if (done == 1) {
; 1867 : 							AI_Choosen = "ë¶í ì£¼ì  ì¬ì©";
; 1868 : 							sprintf(moji, "J|%X|%X", method, target);

  00774	56		 push	 esi
  00775	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_0P@JIGIABPO@?$LK?N?H?$LA?5?A?V?$LM?z?5?$LL?g?$LP?k@ ; AI_Choosen
  0077f	57		 push	 edi

; 1869 : 						}

  00780	e9 5e fa ff ff	 jmp	 $LN322@AI_ChooseA
$LN134@AI_ChooseA:

; 1862 : 						else {
; 1863 : 							if (magic[method].mp <= p_party[BattleMyNo]->mp)

  00785	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  0078c	8b 45 b4	 mov	 eax, DWORD PTR tv2242[ebp]
  0078f	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+4]
  00795	3b 81 84 00 00
	00		 cmp	 eax, DWORD PTR [ecx+132]
  0079b	7f 11		 jg	 SHORT $LN138@AI_ChooseA

; 1864 : 								done = 1;
; 1865 : 						}
; 1866 : 						if (done == 1) {
; 1867 : 							AI_Choosen = "ë¶í ì£¼ì  ì¬ì©";
; 1868 : 							sprintf(moji, "J|%X|%X", method, target);

  0079d	56		 push	 esi
  0079e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_0P@JIGIABPO@?$LK?N?H?$LA?5?A?V?$LM?z?5?$LL?g?$LP?k@ ; AI_Choosen
  007a8	57		 push	 edi

; 1869 : 						}

  007a9	e9 35 fa ff ff	 jmp	 $LN322@AI_ChooseA
$LN138@AI_ChooseA:

; 1870 : 						else
; 1871 : 							StockChatBufferLine("ê¸°ë ¥ì´ ë¶ì¡±íì¬ ë¶í ì£¼ì ì ì¬ì©í  ì ììµëë¤.", FONT_PAL_WHITE);

  007ae	6a 00		 push	 0
  007b0	6a 00		 push	 0
  007b2	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BIGMCAJH@?$LB?b?$LH?B?$MA?L?5?$LK?N?A?$LH?G?O?$LP?$KJ?5?$LK?N?H?$LA?5?A?V?$LM?z?$MA?$LL?5?$LL?g?$LP@

; 1872 : 					}

  007b7	eb 09		 jmp	 SHORT $LN319@AI_ChooseA
$LN132@AI_ChooseA:

; 1873 : 					else
; 1874 : 						StockChatBufferLine("ë¶í ëìì´ ì¤ì ëì§ ìììµëë¤.", FONT_PAL_WHITE);

  007b9	6a 00		 push	 0
  007bb	6a 00		 push	 0
  007bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GCFHCCPO@?$LK?N?H?$LA?5?$LE?k?$LL?s?$MA?L?5?$LM?$LD?A?$KE?$LF?G?A?v?5?$LO?J?$LO?R?$LN?$MA?$LE?O?$LE?Y@
$LN319@AI_ChooseA:

; 1875 : 				}
; 1876 : 			}
; 1877 : 		}
; 1878 : #ifndef _ATTACK_AI
; 1879 : 		if (0 == done && (/*p_party[BattleMyNo]->maxMp*/100 * AI_limit[1] / 100 > p_party[BattleMyNo]->mp)) {//è¡¥æ°
; 1880 : #else
; 1881 : 		if (0 == done && ((p_party[BattleMyNo]->maxMp * AI_limit[1] / 100) > p_party[BattleMyNo]->mp)) {//è¡¥æ°

  007c2	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  007c7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN318@AI_ChooseA:
  007ca	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
$LN249@AI_ChooseA:
  007d0	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  007d7	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  007dc	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  007e2	0f af 0d 04 00
	00 00		 imul	 ecx, DWORD PTR ?AI_limit@@3PAHA+4
  007e9	f7 e9		 imul	 ecx
  007eb	c1 fa 05	 sar	 edx, 5
  007ee	8b c2		 mov	 eax, edx
  007f0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  007f3	03 c2		 add	 eax, edx
  007f5	3b 86 84 00 00
	00		 cmp	 eax, DWORD PTR [esi+132]
  007fb	0f 8e de 00 00
	00		 jle	 $LN252@AI_ChooseA

; 1882 : 			if (g_bUsePS && AI_method[1] != -1) {

  00801	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bUsePS@@3_NA, 0 ; g_bUsePS
  00808	74 3b		 je	 SHORT $LN141@AI_ChooseA
  0080a	83 3d 04 00 00
	00 ff		 cmp	 DWORD PTR ?AI_method@@3PAHA+4, -1
  00811	74 32		 je	 SHORT $LN141@AI_ChooseA

; 1883 : 				sprintf(moji, "P|%X|%X", g_iPSindex, BattleMyNo);

  00813	57		 push	 edi
  00814	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iPSindex@@3HA ; g_iPSindex
  0081a	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  0081d	68 00 00 00 00	 push	 OFFSET ??_C@_07NGDMDFPD@P?$HM?$CFX?$HM?$CFX@
  00822	50		 push	 eax
  00823	e8 00 00 00 00	 call	 _sprintf

; 1884 : 				done = 1;
; 1885 : 				AI_Choosen = profession_skill[g_iPSindex].name;

  00828	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iPSindex@@3HA ; g_iPSindex
  0082d	83 c4 10	 add	 esp, 16			; 00000010H
  00830	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00833	c1 e0 06	 shl	 eax, 6
  00836	05 08 00 00 00	 add	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+8
  0083b	a3 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, eax ; AI_Choosen

; 1886 : 			}

  00840	e9 6c 01 00 00	 jmp	 $LN157@AI_ChooseA
$LN141@AI_ChooseA:

; 1887 : 			else
; 1888 : #endif
; 1889 : 			{
; 1890 : 				int i;
; 1891 : 				for (i = 0; i < MAX_ITEM; i++) {

  00845	33 ff		 xor	 edi, edi
  00847	be d8 01 00 00	 mov	 esi, OFFSET ?pc@@3UPC@@A+472
  0084c	0f 1f 40 00	 npad	 4
$LL21@AI_ChooseA:

; 1893 : 					if (pc.item[i].useFlag && (str = strstr(pc.item[i].memo, "ê¸°")) && strstr(str, "íë³µ")) {

  00850	66 83 7e c8 00	 cmp	 WORD PTR [esi-56], 0
  00855	74 24		 je	 SHORT $LN19@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00857	68 00 00 00 00	 push	 OFFSET ??_C@_02KIGKCDKE@?$LB?b@
  0085c	56		 push	 esi
  0085d	e8 00 00 00 00	 call	 _strstr
  00862	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1893 : 					if (pc.item[i].useFlag && (str = strstr(pc.item[i].memo, "ê¸°")) && strstr(str, "íë³µ")) {

  00865	85 c0		 test	 eax, eax
  00867	74 12		 je	 SHORT $LN19@AI_ChooseA
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00869	68 00 00 00 00	 push	 OFFSET ??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@
  0086e	50		 push	 eax
  0086f	e8 00 00 00 00	 call	 _strstr
  00874	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 1893 : 					if (pc.item[i].useFlag && (str = strstr(pc.item[i].memo, "ê¸°")) && strstr(str, "íë³µ")) {

  00877	85 c0		 test	 eax, eax
  00879	75 11		 jne	 SHORT $LN212@AI_ChooseA
$LN19@AI_ChooseA:

; 1887 : 			else
; 1888 : #endif
; 1889 : 			{
; 1890 : 				int i;
; 1891 : 				for (i = 0; i < MAX_ITEM; i++) {

  0087b	81 c6 7c 01 00
	00		 add	 esi, 380		; 0000017cH
  00881	47		 inc	 edi
  00882	81 fe 00 52 00
	00		 cmp	 esi, OFFSET ?pc@@3UPC@@A+20992
  00888	7c c6		 jl	 SHORT $LL21@AI_ChooseA
  0088a	eb 32		 jmp	 SHORT $LN268@AI_ChooseA
$LN212@AI_ChooseA:

; 1894 : 						AI_Choosen = "ê¸°ë ¥ íë³µ ìì´íì ì¬ì©í©ëë¤.";
; 1895 : 						done = 1;
; 1896 : 						sprintf(moji, "I|%X|%X", i, BattleMyNo);

  0088c	ff 35 00 00 00
	00		 push	 DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  00892	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  00895	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_0BP@OPDADLEH@?$LB?b?$LH?B?5?H?$LI?$LK?$LJ?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LL?g?$LP?k?G?U?$LE?O?$LE?Y?4@ ; AI_Choosen
  0089f	57		 push	 edi
  008a0	68 00 00 00 00	 push	 OFFSET ??_C@_07LFMIBPPD@I?$HM?$CFX?$HM?$CFX@
  008a5	50		 push	 eax
  008a6	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _done$1$[ebp], 1
  008ad	e8 00 00 00 00	 call	 _sprintf
  008b2	83 c4 10	 add	 esp, 16			; 00000010H

; 1897 : 						break;
; 1898 : 					}
; 1899 : 				}
; 1900 : 				if (i >= MAX_ITEM) {

  008b5	83 ff 36	 cmp	 edi, 54			; 00000036H
  008b8	0f 8c f3 00 00
	00		 jl	 $LN157@AI_ChooseA
$LN268@AI_ChooseA:

; 1901 : #ifdef  _STONDEBUG_
; 1902 : 					extern STR_BUFFER MyChatBuffer;
; 1903 : 					sprintf(MyChatBuffer.buffer, "[additem 6 2400]");
; 1904 : 					MyChatBuffer.cnt = strlen(MyChatBuffer.buffer);
; 1905 : 					KeyboardReturn();
; 1906 : #endif
; 1907 : 					StockChatBufferLine("ê¸°ë ¥ íë³µ ìì´íì´ ì¡´ì¬íì§ ììµëë¤.", FONT_PAL_WHITE);

  008be	6a 00		 push	 0
  008c0	6a 00		 push	 0
  008c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@DENGHBNH@?$LB?b?$LH?B?5?H?$LI?$LK?$LJ?5?$LO?F?$MA?L?E?$NL?$MA?L?5?A?$LI?$MA?g?G?O?A?v?5?$LO?J?$LN@
  008c7	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  008cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1908 : 				}
; 1909 : 			}
; 1910 : 		}
; 1911 : 		if (0 == done) {

  008cf	83 7d ac 00	 cmp	 DWORD PTR _done$1$[ebp], 0
  008d3	0f 85 d8 00 00
	00		 jne	 $LN157@AI_ChooseA
  008d9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
$LN252@AI_ChooseA:

; 1912 : 			//			if( BattleBpFlag & BATTLE_BP_BOOMERANG ){
; 1913 : 			//			}
; 1914 : 						//å¦èªå·±æå® ç©æ²¡æè¡ ä¸ æ²¡ææ° å°±éè·
; 1915 : 			if (((p_party[BattleMyNo]->maxHp * AI_limit[0] / 100 > p_party[BattleMyNo]->hp) ||

  008df	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  008e6	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  008eb	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  008f1	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?AI_limit@@3PAHA
  008f8	f7 e9		 imul	 ecx
  008fa	c1 fa 05	 sar	 edx, 5
  008fd	8b c2		 mov	 eax, edx
  008ff	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00902	03 c2		 add	 eax, edx
  00904	3b 46 78	 cmp	 eax, DWORD PTR [esi+120]
  00907	7f 59		 jg	 SHORT $LN148@AI_ChooseA
  00909	8b 04 bd 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4+20]
  00910	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00914	0f 84 c6 00 00
	00		 je	 $LN253@AI_ChooseA
  0091a	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  00921	69 c8 78 0b 00
	00		 imul	 ecx, eax, 2936
  00927	8b b1 08 00 00
	00		 mov	 esi, DWORD PTR ?pet@@3PAUPET@@A[ecx+8]
  0092d	85 f6		 test	 esi, esi
  0092f	7e 2a		 jle	 SHORT $LN300@AI_ChooseA
  00931	8b 89 0c 00 00
	00		 mov	 ecx, DWORD PTR ?pet@@3PAUPET@@A[ecx+12]
  00937	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0093c	0f af 0d 00 00
	00 00		 imul	 ecx, DWORD PTR ?AI_limit@@3PAHA
  00943	f7 e9		 imul	 ecx
  00945	c1 fa 05	 sar	 edx, 5
  00948	8b c2		 mov	 eax, edx
  0094a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0094d	03 c2		 add	 eax, edx
  0094f	3b c6		 cmp	 eax, esi
  00951	7f 08		 jg	 SHORT $LN300@AI_ChooseA
  00953	85 f6		 test	 esi, esi
  00955	0f 8f 85 00 00
	00		 jg	 $LN253@AI_ChooseA
$LN300@AI_ChooseA:

; 1916 : 				(p_party[BattleMyNo + 5]->func &&
; 1917 : 					((pet[pc.battlePetNo].hp > 0 && pet[pc.battlePetNo].maxHp * AI_limit[0] / 100 > pet[pc.battlePetNo].hp) ||
; 1918 : 						pet[pc.battlePetNo].hp <= 0)))) {
; 1919 : 				int mp_enough = FALSE;
; 1920 : 				if (0 <= AI_method[0] && AI_method[0] < MAX_MAGIC) {//æè®¾å®ä½¿ç¨è¡¥è¡ç²¾çµ

  0095b	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
$LN148@AI_ChooseA:
  00962	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AI_method@@3PAHA
  00968	83 f9 08	 cmp	 ecx, 8
  0096b	77 31		 ja	 SHORT $LN254@AI_ChooseA

; 1921 : 					mp_enough = TRUE;//è®°å½MPæ¯å¦è¶³å¤
; 1922 : 					if (pc.familySprite == 0) {

  0096d	83 3d 4c 51 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20812, 0
  00974	75 55		 jne	 SHORT $LN151@AI_ChooseA

; 1923 : 						if ((magic[AI_method[0]].mp * 80 / 100) > p_party[BattleMyNo]->mp)

  00976	6b c9 70	 imul	 ecx, ecx, 112
  00979	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0097e	8b 89 04 00 00
	00		 mov	 ecx, DWORD PTR ?magic@@3PAUMAGIC@@A[ecx+4]
  00984	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00987	c1 e1 04	 shl	 ecx, 4
  0098a	f7 e9		 imul	 ecx
  0098c	c1 fa 05	 sar	 edx, 5
  0098f	8b c2		 mov	 eax, edx
  00991	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00994	03 c2		 add	 eax, edx

; 1928 : 							mp_enough = FALSE;
; 1929 : 					}
; 1930 : 				}
; 1931 : 				if (mp_enough == FALSE) {//æ²¡æè®¾å®ä½¿ç¨è¡¥è¡ç²¾çµ æ MPä¸è¶³

  00996	3b 86 84 00 00
	00		 cmp	 eax, DWORD PTR [esi+132]
  0099c	7e 42		 jle	 SHORT $LN253@AI_ChooseA
$LN254@AI_ChooseA:

; 1932 : 					battlePlayerEscFlag = TRUE;
; 1933 : 					strcpy(moji, "E");

  0099e	b8 45 00 00 00	 mov	 eax, 69			; 00000045H
  009a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?battlePlayerEscFlag@@3HA, 1 ; battlePlayerEscFlag
  009ad	66 89 45 bc	 mov	 WORD PTR _moji$[ebp], ax
$LN157@AI_ChooseA:

; 1946 : 				}
; 1947 : 			}
; 1948 : 		}
; 1949 : 		if (bNewServer)

  009b1	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  009b4	50		 push	 eax
$LN324@AI_ChooseA:

; 1950 : 			lssproto_B_send(sockfd, moji);
; 1951 : 		else
; 1952 : 			old_lssproto_B_send(sockfd, moji);
; 1953 : 		}
; 1954 : 	done = 0;
; 1955 : 	strcpy(moji, "W|FF|FF");

  009b5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  009bc	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  009c2	74 61		 je	 SHORT $LN158@AI_ChooseA
  009c4	e8 00 00 00 00	 call	 ?lssproto_B_send@@YAXHPAD@Z ; lssproto_B_send
  009c9	eb 5f		 jmp	 SHORT $LN323@AI_ChooseA
$LN151@AI_ChooseA:

; 1924 : 							mp_enough = FALSE;
; 1925 : 					}
; 1926 : 					else {
; 1927 : 						if (magic[AI_method[0]].mp > p_party[BattleMyNo]->mp)

  009cb	6b 05 00 00 00
	00 70		 imul	 eax, DWORD PTR ?AI_method@@3PAHA, 112
  009d2	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+4]
  009d8	3b 86 84 00 00
	00		 cmp	 eax, DWORD PTR [esi+132]
  009de	7f be		 jg	 SHORT $LN254@AI_ChooseA
$LN253@AI_ChooseA:

; 1934 : 					done = 1;
; 1935 : 				}
; 1936 : 			}
; 1937 : 			if (!done) {
; 1938 : 				int targetNo;
; 1939 : #ifdef _ATTACK_AI
; 1940 : 				if (AttackAIProc(4, moji) <= 0)

  009e0	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  009e3	50		 push	 eax
  009e4	6a 04		 push	 4
  009e6	e8 00 00 00 00	 call	 ?AttackAIProc@@YAHHPAD@Z ; AttackAIProc
  009eb	83 c4 08	 add	 esp, 8
  009ee	85 c0		 test	 eax, eax
  009f0	7f bf		 jg	 SHORT $LN157@AI_ChooseA

; 1941 : #endif
; 1942 : 				{
; 1943 : 					targetNo = GetBattelTarget();

  009f2	e8 00 00 00 00	 call	 ?GetBattelTarget@@YAHXZ	; GetBattelTarget

; 1944 : 					sprintf(moji, "H|%X", targetNo);

  009f7	50		 push	 eax
  009f8	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  009fb	68 00 00 00 00	 push	 OFFSET ??_C@_04DMFDFHBJ@H?$HM?$CFX@
  00a00	50		 push	 eax
  00a01	e8 00 00 00 00	 call	 _sprintf
  00a06	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1945 : 					AI_Choosen = "ìëê³µê²©";

  00a09	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, OFFSET ??_C@_08NOADAHE@?$MA?Z?$LF?$LP?$LA?x?$LA?$NN@ ; AI_Choosen
  00a13	eb 9c		 jmp	 SHORT $LN157@AI_ChooseA
$LN35@AI_ChooseA:

; 1601 : 		BattleBpFlag & BATTLE_BP_PLAYER_MENU_NON) {
; 1602 : 		if (BattleBpFlag & BATTLE_BP_PLAYER_MENU_NON) {

  00a15	f6 05 00 00 00
	00 02		 test	 BYTE PTR ?BattleBpFlag@@3HA, 2
  00a1c	74 15		 je	 SHORT $LN38@AI_ChooseA
$LN310@AI_ChooseA:

; 1603 : 			if (bNewServer)

  00a1e	68 00 00 00 00	 push	 OFFSET ??_C@_01NANMIPIL@N@

; 1604 : 				lssproto_B_send(sockfd, "N");

  00a23	eb 90		 jmp	 SHORT $LN324@AI_ChooseA
$LN158@AI_ChooseA:

; 1950 : 			lssproto_B_send(sockfd, moji);
; 1951 : 		else
; 1952 : 			old_lssproto_B_send(sockfd, moji);
; 1953 : 		}
; 1954 : 	done = 0;
; 1955 : 	strcpy(moji, "W|FF|FF");

  00a25	e8 00 00 00 00	 call	 ?old_lssproto_B_send@@YAXHPAD@Z ; old_lssproto_B_send
$LN323@AI_ChooseA:
  00a2a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  00a30	83 c4 08	 add	 esp, 8
$LN38@AI_ChooseA:

; 1956 : 	if (pc.battlePetNo > -1 && p_party[BattleMyNo + 5]->hp > 0) {

  00a33	66 8b 15 aa 00
	00 00		 mov	 dx, WORD PTR ?pc@@3UPC@@A+170
  00a3a	c7 45 bc 57 7c
	46 46		 mov	 DWORD PTR _moji$[ebp], 1179024471 ; 46467c57H
  00a41	c7 45 c0 7c 46
	46 00		 mov	 DWORD PTR _moji$[ebp+4], 4605564 ; 0046467cH
  00a48	66 83 fa ff	 cmp	 dx, -1
  00a4c	0f 8e 18 01 00
	00		 jle	 $LN163@AI_ChooseA
  00a52	8b 04 bd 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4+20]
  00a59	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  00a5d	0f 8e 07 01 00
	00		 jle	 $LN163@AI_ChooseA

; 1957 : 		if (BattleBpFlag & BATTLE_BP_PET_MENU_NON || p_party[BattleMyNo]->hp <= 0 || battlePlayerEscFlag == TRUE) {

  00a63	f6 05 00 00 00
	00 08		 test	 BYTE PTR ?BattleBpFlag@@3HA, 8
  00a6a	0f 85 fa 00 00
	00		 jne	 $LN163@AI_ChooseA
  00a70	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  00a77	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  00a7b	0f 8e e9 00 00
	00		 jle	 $LN163@AI_ChooseA
  00a81	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?battlePlayerEscFlag@@3HA, 1 ; battlePlayerEscFlag
  00a88	0f 84 dc 00 00
	00		 je	 $LN163@AI_ChooseA

; 1958 : 		}
; 1959 : 		else {
; 1960 : 			int skill_id = -1;
; 1961 : 			for (int i = 0; i < pet[pc.battlePetNo].maxSkill; i++) {

  00a8e	0f bf d2	 movsx	 edx, dx
  00a91	83 c9 ff	 or	 ecx, -1
  00a94	69 c2 78 0b 00
	00		 imul	 eax, edx, 2936
  00a9a	33 f6		 xor	 esi, esi
  00a9c	8b 80 44 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+68]
  00aa2	89 45 a8	 mov	 DWORD PTR $T1[ebp], eax
  00aa5	85 c0		 test	 eax, eax
  00aa7	0f 8e bd 00 00
	00		 jle	 $LN163@AI_ChooseA
  00aad	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  00ab4	2b c2		 sub	 eax, edx
  00ab6	89 45 b4	 mov	 DWORD PTR tv2240[ebp], eax
  00ab9	0f 1f 80 00 00
	00 00		 npad	 7
$LL24@AI_ChooseA:

; 1962 : 				if (petSkill[pc.battlePetNo][i].useFlag == TRUE &&

  00ac0	03 c6		 add	 eax, esi
  00ac2	6b d0 6a	 imul	 edx, eax, 106
  00ac5	66 83 ba 00 00
	00 00 01	 cmp	 WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[edx], 1
  00acd	75 2e		 jne	 SHORT $LN22@AI_ChooseA
  00acf	66 83 ba 04 00
	00 00 02	 cmp	 WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[edx+4], 2
  00ad7	74 24		 je	 SHORT $LN22@AI_ChooseA

; 1963 : 					petSkill[pc.battlePetNo][i].field != PETSKILL_FIELD_MAP) {
; 1964 : 					if (skill_id == -1)
; 1965 : 						skill_id = i;
; 1966 : 					if (petSkill[pc.battlePetNo][i].skillId != 2 && petSkill[pc.battlePetNo][i].skillId != 0)

  00ad9	83 f9 ff	 cmp	 ecx, -1
  00adc	8b c6		 mov	 eax, esi
  00ade	0f 45 c1	 cmovne	 eax, ecx
  00ae1	8b c8		 mov	 ecx, eax
  00ae3	0f b7 82 02 00
	00 00		 movzx	 eax, WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[edx+2]
  00aea	66 83 f8 02	 cmp	 ax, 2
  00aee	74 0d		 je	 SHORT $LN22@AI_ChooseA
  00af0	66 85 c0	 test	 ax, ax
  00af3	74 08		 je	 SHORT $LN22@AI_ChooseA

; 1967 : 						skill_id = i;

  00af5	8b ce		 mov	 ecx, esi

; 1968 : 					if (petSkill[pc.battlePetNo][i].skillId == 1) {

  00af7	66 83 f8 01	 cmp	 ax, 1
  00afb	74 12		 je	 SHORT $LN259@AI_ChooseA
$LN22@AI_ChooseA:

; 1958 : 		}
; 1959 : 		else {
; 1960 : 			int skill_id = -1;
; 1961 : 			for (int i = 0; i < pet[pc.battlePetNo].maxSkill; i++) {

  00afd	46		 inc	 esi
  00afe	3b 75 a8	 cmp	 esi, DWORD PTR $T1[ebp]
  00b01	7d 05		 jge	 SHORT $LN269@AI_ChooseA
  00b03	8b 45 b4	 mov	 eax, DWORD PTR tv2240[ebp]
  00b06	eb b8		 jmp	 SHORT $LL24@AI_ChooseA
$LN269@AI_ChooseA:

; 1969 : 						skill_id = i;
; 1970 : 						break;
; 1971 : 					}
; 1972 : 				}
; 1973 : 			}
; 1974 : 			if (skill_id > -1) {

  00b08	8b f1		 mov	 esi, ecx
  00b0a	83 f9 ff	 cmp	 ecx, -1
  00b0d	7e 5b		 jle	 SHORT $LN163@AI_ChooseA
$LN259@AI_ChooseA:

; 1975 : 				switch (petSkill[pc.battlePetNo][skill_id].target) {

  00b0f	8b 45 b4	 mov	 eax, DWORD PTR tv2240[ebp]
  00b12	03 c6		 add	 eax, esi
  00b14	6b c0 6a	 imul	 eax, eax, 106
  00b17	0f bf 80 06 00
	00 00		 movsx	 eax, WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[eax+6]
  00b1e	83 f8 06	 cmp	 eax, 6
  00b21	77 34		 ja	 SHORT $LN25@AI_ChooseA
  00b23	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN278@AI_ChooseA[eax*4]
$LN169@AI_ChooseA:

; 1976 : 				case PETSKILL_TARGET_MYSELF:
; 1977 : 					targetNo = BattleMyNo + 5;

  00b2a	8d 5f 05	 lea	 ebx, DWORD PTR [edi+5]

; 1978 : 					break;

  00b2d	eb 28		 jmp	 SHORT $LN25@AI_ChooseA
$LN170@AI_ChooseA:

; 1979 : 				case PETSKILL_TARGET_OTHER:
; 1980 : 				case PETSKILL_TARGET_OTHERWITHOUTMYSELF:
; 1981 : 					targetNo = GetBattelTarget();

  00b2f	e8 00 00 00 00	 call	 ?GetBattelTarget@@YAHXZ	; GetBattelTarget
  00b34	8b d8		 mov	 ebx, eax

; 1982 : 					break;

  00b36	eb 1f		 jmp	 SHORT $LN25@AI_ChooseA
$LN171@AI_ChooseA:

; 1983 : 				case PETSKILL_TARGET_ALLMYSIDE:
; 1984 : 					if (BattleMyNo < 10) targetNo = 20;

  00b38	33 db		 xor	 ebx, ebx
  00b3a	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  00b3d	0f 9d c3	 setge	 bl
  00b40	83 c3 14	 add	 ebx, 20			; 00000014H

; 1985 : 					else targetNo = 21;
; 1986 : 					break;

  00b43	eb 12		 jmp	 SHORT $LN25@AI_ChooseA
$LN174@AI_ChooseA:

; 1987 : 				case PETSKILL_TARGET_ALLOTHERSIDE:
; 1988 : 					if (BattleMyNo < 10) targetNo = 21;

  00b45	33 db		 xor	 ebx, ebx
  00b47	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  00b4a	0f 9c c3	 setl	 bl
  00b4d	83 c3 14	 add	 ebx, 20			; 00000014H

; 1989 : 					else targetNo = 20;
; 1990 : 					break;

  00b50	eb 05		 jmp	 SHORT $LN25@AI_ChooseA
$LN177@AI_ChooseA:

; 1991 : 				case PETSKILL_TARGET_ALL:
; 1992 : 					targetNo = 22;

  00b52	bb 16 00 00 00	 mov	 ebx, 22			; 00000016H
$LN25@AI_ChooseA:

; 1993 : 					break;
; 1994 : 				}
; 1995 : 				sprintf(moji, "W|%X|%X", skill_id, targetNo);

  00b57	53		 push	 ebx
  00b58	56		 push	 esi
  00b59	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  00b5c	68 00 00 00 00	 push	 OFFSET ??_C@_07NMPJDMOK@W?$HM?$CFX?$HM?$CFX@
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 _sprintf
  00b67	83 c4 10	 add	 esp, 16			; 00000010H
$LN163@AI_ChooseA:

; 1996 : 			}
; 1997 : 		}
; 1998 : 	}
; 1999 : 	if (bNewServer)

  00b6a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  00b71	8d 45 bc	 lea	 eax, DWORD PTR _moji$[ebp]
  00b74	5e		 pop	 esi
  00b75	50		 push	 eax
  00b76	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00b7c	74 07		 je	 SHORT $LN178@AI_ChooseA

; 2000 : 		lssproto_B_send(sockfd, moji);

  00b7e	e8 00 00 00 00	 call	 ?lssproto_B_send@@YAXHPAD@Z ; lssproto_B_send
  00b83	eb 05		 jmp	 SHORT $LN325@AI_ChooseA
$LN178@AI_ChooseA:

; 2001 : 	else
; 2002 : 		old_lssproto_B_send(sockfd, moji);

  00b85	e8 00 00 00 00	 call	 ?old_lssproto_B_send@@YAXHPAD@Z ; old_lssproto_B_send
$LN325@AI_ChooseA:

; 2003 : 	for (int i = 0; i < 20; i++) {

  00b8a	83 c4 08	 add	 esp, 8
  00b8d	b8 04 00 00 00	 mov	 eax, OFFSET ?p_party@@3PAPAUaction@@A+4
$LL29@AI_ChooseA:

; 2004 : 		if (0 == (p_party[i]->atr & p_party[i]->atr))

  00b92	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00b95	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00b9c	75 0a		 jne	 SHORT $LN27@AI_ChooseA

; 2005 : 			p_party[i]->atr = ACT_ATR_INFO | ACT_ATR_HIT;

  00b9e	c7 81 a4 00 00
	00 14 00 00 00	 mov	 DWORD PTR [ecx+164], 20	; 00000014H
$LN27@AI_ChooseA:

; 2004 : 		if (0 == (p_party[i]->atr & p_party[i]->atr))

  00ba8	8b 08		 mov	 ecx, DWORD PTR [eax]
  00baa	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00bb1	75 0a		 jne	 SHORT $LN256@AI_ChooseA

; 2005 : 			p_party[i]->atr = ACT_ATR_INFO | ACT_ATR_HIT;

  00bb3	c7 81 a4 00 00
	00 14 00 00 00	 mov	 DWORD PTR [ecx+164], 20	; 00000014H
$LN256@AI_ChooseA:

; 2004 : 		if (0 == (p_party[i]->atr & p_party[i]->atr))

  00bbd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00bc0	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00bc7	75 0a		 jne	 SHORT $LN257@AI_ChooseA

; 2005 : 			p_party[i]->atr = ACT_ATR_INFO | ACT_ATR_HIT;

  00bc9	c7 81 a4 00 00
	00 14 00 00 00	 mov	 DWORD PTR [ecx+164], 20	; 00000014H
$LN257@AI_ChooseA:

; 2004 : 		if (0 == (p_party[i]->atr & p_party[i]->atr))

  00bd3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00bd6	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00bdd	75 0a		 jne	 SHORT $LN258@AI_ChooseA

; 2005 : 			p_party[i]->atr = ACT_ATR_INFO | ACT_ATR_HIT;

  00bdf	c7 81 a4 00 00
	00 14 00 00 00	 mov	 DWORD PTR [ecx+164], 20	; 00000014H
$LN258@AI_ChooseA:

; 2004 : 		if (0 == (p_party[i]->atr & p_party[i]->atr))

  00be9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00bec	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  00bf3	75 0a		 jne	 SHORT $LN230@AI_ChooseA

; 2005 : 			p_party[i]->atr = ACT_ATR_INFO | ACT_ATR_HIT;

  00bf5	c7 81 a4 00 00
	00 14 00 00 00	 mov	 DWORD PTR [ecx+164], 20	; 00000014H
$LN230@AI_ChooseA:
  00bff	83 c0 14	 add	 eax, 20			; 00000014H

; 2003 : 	for (int i = 0; i < 20; i++) {

  00c02	3d 54 00 00 00	 cmp	 eax, OFFSET ?p_party@@3PAPAUaction@@A+84
  00c07	7c 89		 jl	 SHORT $LL29@AI_ChooseA

; 2006 : 	}
; 2007 : 	p_party[BattleMyNo]->atr |= ACT_ATR_BTL_CMD_END;

  00c09	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  00c0e	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00c15	83 88 a4 00 00
	00 40		 or	 DWORD PTR [eax+164], 64	; 00000040H

; 2008 : 	p_party[BattleMyNo + 5]->atr |= ACT_ATR_BTL_CMD_END;

  00c1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  00c21	8b 04 85 14 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4+20]
  00c28	83 88 a4 00 00
	00 40		 or	 DWORD PTR [eax+164], 64	; 00000040H
$LN308@AI_ChooseA:

; 2009 : 	SubProcNo++;
; 2010 : 	}

  00c2f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c32	ff 05 00 00 00
	00		 inc	 DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  00c38	33 cd		 xor	 ecx, ebp
  00c3a	5f		 pop	 edi
  00c3b	5b		 pop	 ebx
  00c3c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c41	8b e5		 mov	 esp, ebp
  00c43	5d		 pop	 ebp
  00c44	c3		 ret	 0
  00c45	0f 1f 00	 npad	 3
$LN275@AI_ChooseA:
  00c48	00 00 00 00	 DD	 $LN49@AI_ChooseA
  00c4c	00 00 00 00	 DD	 $LN50@AI_ChooseA
  00c50	00 00 00 00	 DD	 $LN52@AI_ChooseA
  00c54	00 00 00 00	 DD	 $LN59@AI_ChooseA
  00c58	00 00 00 00	 DD	 $LN60@AI_ChooseA
  00c5c	00 00 00 00	 DD	 $LN64@AI_ChooseA
  00c60	00 00 00 00	 DD	 $LN65@AI_ChooseA
  00c64	00 00 00 00	 DD	 $LN65@AI_ChooseA
  00c68	00 00 00 00	 DD	 $LN65@AI_ChooseA
  00c6c	00 00 00 00	 DD	 $LN65@AI_ChooseA
  00c70	00 00 00 00	 DD	 $LN65@AI_ChooseA
  00c74	00 00 00 00	 DD	 $LN66@AI_ChooseA
$LN277@AI_ChooseA:
  00c78	00 00 00 00	 DD	 $LN124@AI_ChooseA
  00c7c	00 00 00 00	 DD	 $LN116@AI_ChooseA
  00c80	00 00 00 00	 DD	 $LN126@AI_ChooseA
  00c84	00 00 00 00	 DD	 $LN249@AI_ChooseA
$LN276@AI_ChooseA:
  00c88	00		 DB	 0
  00c89	01		 DB	 1
  00c8a	03		 DB	 3
  00c8b	03		 DB	 3
  00c8c	03		 DB	 3
  00c8d	02		 DB	 2
  00c8e	02		 DB	 2
  00c8f	02		 DB	 2
  00c90	02		 DB	 2
  00c91	02		 DB	 2
  00c92	66 90		 npad	 2
$LN278@AI_ChooseA:
  00c94	00 00 00 00	 DD	 $LN169@AI_ChooseA
  00c98	00 00 00 00	 DD	 $LN170@AI_ChooseA
  00c9c	00 00 00 00	 DD	 $LN171@AI_ChooseA
  00ca0	00 00 00 00	 DD	 $LN174@AI_ChooseA
  00ca4	00 00 00 00	 DD	 $LN177@AI_ChooseA
  00ca8	00 00 00 00	 DD	 $LN25@AI_ChooseA
  00cac	00 00 00 00	 DD	 $LN170@AI_ChooseA
?AI_ChooseAction@@YAXXZ ENDP				; AI_ChooseAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AttackAIProc@@YAHHPAD@Z
_TEXT	SEGMENT
tv277 = 8						; size = 4
_no$ = 8						; size = 4
_which$ = 8						; size = 4
_moji$ = 12						; size = 4
?AttackAIProc@@YAHHPAD@Z PROC				; AttackAIProc, COMDAT

; 1516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1517 : 	int targetNo;
; 1518 : 	int method = AI_method[which];

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _which$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _no$[ebp]
  0000c	8b 34 9d 00 00
	00 00		 mov	 esi, DWORD PTR ?AI_method@@3PAHA[ebx*4]

; 1519 : 	int no;
; 1520 : 
; 1521 : 	if (method != MAX_PROFESSION_SKILL) {

  00013	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  00016	0f 84 2a 01 00
	00		 je	 $LN4@AttackAIPr

; 1522 : 		if (profession_skill[method].costmp <= p_party[BattleMyNo]->mp) {

  0001c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  00022	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00025	c1 e0 06	 shl	 eax, 6
  00028	89 45 08	 mov	 DWORD PTR tv277[ebp], eax
  0002b	8b 0c 95 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[edx*4]
  00032	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  00038	3b 81 84 00 00
	00		 cmp	 eax, DWORD PTR [ecx+132]
  0003e	0f 8f fb 00 00
	00		 jg	 $LN5@AttackAIPr

; 1523 : 			targetNo = AI_target[which];

  00044	8b 0c 9d 00 00
	00 00		 mov	 ecx, DWORD PTR ?AI_target@@3PAHA[ebx*4]

; 1524 : 			switch (profession_skill[method].target) {

  0004b	8b 5d 08	 mov	 ebx, DWORD PTR tv277[ebp]
  0004e	0f bf 83 04 00
	00 00		 movsx	 eax, WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[ebx+4]
  00055	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00058	0f 87 cc 00 00
	00		 ja	 $LN2@AttackAIPr
  0005e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN34@AttackAIPr[eax*4]
$LN6@AttackAIPr:

; 1525 : 			case PETSKILL_TARGET_NONE:
; 1526 : 			case PETSKILL_TARGET_MYSELF:
; 1527 : 				sprintf(moji, "P|%X|%X", method, BattleMyNo);

  00065	52		 push	 edx

; 1528 : 				break;

  00066	e9 ae 00 00 00	 jmp	 $LN35@AttackAIPr
$LN7@AttackAIPr:

; 1529 : 			case PETSKILL_TARGER_DEATH:
; 1530 : 				targetNo = GetDeadTarget();

  0006b	e8 00 00 00 00	 call	 ?GetDeadTarget@@YAHXZ	; GetDeadTarget

; 1531 : 				if (targetNo != -1) sprintf(moji, "P|%X|%X", method, targetNo);

  00070	83 f8 ff	 cmp	 eax, -1
  00073	75 56		 jne	 SHORT $LN37@AttackAIPr

; 1532 : 				else {
; 1533 : 					targetNo = GetBattelTarget();

  00075	e8 00 00 00 00	 call	 ?GetBattelTarget@@YAHXZ	; GetBattelTarget

; 1534 : 					sprintf(moji, "H|%X", targetNo);

  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_04DMFDFHBJ@H?$HM?$CFX@
  00080	ff 75 0c	 push	 DWORD PTR _moji$[ebp]
  00083	e8 00 00 00 00	 call	 _sprintf
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1535 : 				}
; 1536 : 				break;

  0008b	e9 9a 00 00 00	 jmp	 $LN2@AttackAIPr
$LN10@AttackAIPr:

; 1537 : 			case PETSKILL_TARGET_OTHER:
; 1538 : 			case PETSKILL_TARGET_OTHERWITHOUTMYSELF:
; 1539 : 			case PETSKILL_TARGET_WITHOUTMYSELFANDPET:
; 1540 : 			case PETSKILL_TARGET_ONE_LINE:
; 1541 : 				if (targetNo == TARGET_MYSELF)	targetNo = BattleMyNo;

  00090	83 f9 01	 cmp	 ecx, 1
  00093	74 28		 je	 SHORT $LN16@AttackAIPr

; 1542 : 				else if (targetNo == TARGET_MYPET) targetNo = BattleMyNo + 5;

  00095	83 f9 02	 cmp	 ecx, 2
  00098	75 06		 jne	 SHORT $LN13@AttackAIPr
  0009a	83 c2 05	 add	 edx, 5

; 1546 : 				sprintf(moji, "P|%X|%X", method, targetNo);

  0009d	52		 push	 edx

; 1547 : 				break;

  0009e	eb 79		 jmp	 SHORT $LN35@AttackAIPr
$LN13@AttackAIPr:

; 1543 : 				else if (targetNo < TARGET_OTHERONE || targetNo > TARGET_ALL ||

  000a0	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  000a3	83 f8 02	 cmp	 eax, 2
  000a6	77 0a		 ja	 SHORT $LN17@AttackAIPr

; 1545 : 				else targetNo = GetBattelTarget();

  000a8	e8 00 00 00 00	 call	 ?GetBattelTarget@@YAHXZ	; GetBattelTarget

; 1546 : 				sprintf(moji, "P|%X|%X", method, targetNo);

  000ad	8b d0		 mov	 edx, eax
  000af	52		 push	 edx

; 1547 : 				break;

  000b0	eb 67		 jmp	 SHORT $LN35@AttackAIPr
$LN17@AttackAIPr:

; 1544 : 					targetNo == TARGET_ONE_ROW) targetNo = GetFirstTarget(targetNo);

  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ?GetFirstTarget@@YAHH@Z	; GetFirstTarget
  000b8	83 c4 04	 add	 esp, 4

; 1546 : 				sprintf(moji, "P|%X|%X", method, targetNo);

  000bb	8b d0		 mov	 edx, eax
$LN16@AttackAIPr:
  000bd	52		 push	 edx

; 1547 : 				break;

  000be	eb 59		 jmp	 SHORT $LN35@AttackAIPr
$LN18@AttackAIPr:

; 1548 : 			case PETSKILL_TARGET_ALLMYSIDE:
; 1549 : 				if (BattleMyNo < 10) no = 20;

  000c0	33 c0		 xor	 eax, eax
  000c2	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  000c5	0f 9d c0	 setge	 al
  000c8	83 c0 14	 add	 eax, 20			; 00000014H
$LN37@AttackAIPr:

; 1571 : 				break;
; 1572 : 			}
; 1573 : 			AI_Choosen = profession_skill[method].name;

  000cb	50		 push	 eax
  000cc	eb 4b		 jmp	 SHORT $LN35@AttackAIPr
$LN21@AttackAIPr:

; 1550 : 				else no = 21;
; 1551 : 				sprintf(moji, "P|%X|%X", method, no);
; 1552 : 				break;
; 1553 : 			case PETSKILL_TARGET_ALLOTHERSIDE:
; 1554 : 				if (BattleMyNo < 10) no = 21;

  000ce	33 c0		 xor	 eax, eax
  000d0	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  000d3	0f 9c c0	 setl	 al
  000d6	83 c0 14	 add	 eax, 20			; 00000014H

; 1555 : 				else no = 20;
; 1556 : 				sprintf(moji, "P|%X|%X", method, no);

  000d9	50		 push	 eax

; 1557 : 				break;

  000da	eb 3d		 jmp	 SHORT $LN35@AttackAIPr
$LN24@AttackAIPr:

; 1558 : 			case PETSKILL_TARGET_ALL:
; 1559 : 				sprintf(moji, "P|%X|%X", method, 22);

  000dc	6a 16		 push	 22			; 00000016H

; 1560 : 				break;

  000de	eb 39		 jmp	 SHORT $LN35@AttackAIPr
$LN25@AttackAIPr:

; 1561 : 			case PETSKILL_TARGET_ONE_ROW:
; 1562 : #ifdef _SKILL_ADDBARRIER
; 1563 : 			case PETSKILL_TARGET_ONE_ROW_ALL:
; 1564 : #endif
; 1565 : 				targetNo = GetBattelTarget();

  000e0	e8 00 00 00 00	 call	 ?GetBattelTarget@@YAHXZ	; GetBattelTarget

; 1566 : 				if (targetNo >= 0 && targetNo < 5) no = 26;

  000e5	85 c0		 test	 eax, eax
  000e7	78 2f		 js	 SHORT $LN26@AttackAIPr
  000e9	83 f8 05	 cmp	 eax, 5
  000ec	7d 07		 jge	 SHORT $LN33@AttackAIPr
  000ee	bf 1a 00 00 00	 mov	 edi, 26			; 0000001aH
  000f3	eb 23		 jmp	 SHORT $LN26@AttackAIPr
$LN33@AttackAIPr:

; 1567 : 				if (targetNo >= 5 && targetNo < 10) no = 25;

  000f5	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000f8	7d 07		 jge	 SHORT $LN32@AttackAIPr
  000fa	bf 19 00 00 00	 mov	 edi, 25			; 00000019H
  000ff	eb 17		 jmp	 SHORT $LN26@AttackAIPr
$LN32@AttackAIPr:

; 1568 : 				if (targetNo >= 10 && targetNo < 15) no = 23;

  00101	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00104	7d 07		 jge	 SHORT $LN31@AttackAIPr
  00106	bf 17 00 00 00	 mov	 edi, 23			; 00000017H
  0010b	eb 0b		 jmp	 SHORT $LN26@AttackAIPr
$LN31@AttackAIPr:

; 1569 : 				if (targetNo >= 15 && targetNo < 20) no = 24;

  0010d	83 f8 14	 cmp	 eax, 20			; 00000014H
  00110	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00115	0f 4c f9	 cmovl	 edi, ecx
$LN26@AttackAIPr:

; 1570 : 				sprintf(moji, "P|%X|%X", method, no);

  00118	57		 push	 edi
$LN35@AttackAIPr:

; 1571 : 				break;
; 1572 : 			}
; 1573 : 			AI_Choosen = profession_skill[method].name;

  00119	56		 push	 esi
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_07NGDMDFPD@P?$HM?$CFX?$HM?$CFX@
  0011f	ff 75 0c	 push	 DWORD PTR _moji$[ebp]
  00122	e8 00 00 00 00	 call	 _sprintf
  00127	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@AttackAIPr:
  0012a	8d 83 08 00 00
	00		 lea	 eax, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[ebx+8]
  00130	5f		 pop	 edi

; 1574 : 			return 1;
; 1575 : 		}
; 1576 : 		return 0;
; 1577 : 	}
; 1578 : 	return -1;
; 1579 : }

  00131	5e		 pop	 esi
  00132	a3 00 00 00 00	 mov	 DWORD PTR ?AI_Choosen@@3PADA, eax ; AI_Choosen
  00137	b8 01 00 00 00	 mov	 eax, 1
  0013c	5b		 pop	 ebx
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
$LN5@AttackAIPr:
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	33 c0		 xor	 eax, eax
  00143	5b		 pop	 ebx
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
$LN4@AttackAIPr:
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	83 c8 ff	 or	 eax, -1
  0014b	5b		 pop	 ebx
  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
  0014e	66 90		 npad	 2
$LN34@AttackAIPr:
  00150	00 00 00 00	 DD	 $LN6@AttackAIPr
  00154	00 00 00 00	 DD	 $LN10@AttackAIPr
  00158	00 00 00 00	 DD	 $LN18@AttackAIPr
  0015c	00 00 00 00	 DD	 $LN21@AttackAIPr
  00160	00 00 00 00	 DD	 $LN24@AttackAIPr
  00164	00 00 00 00	 DD	 $LN6@AttackAIPr
  00168	00 00 00 00	 DD	 $LN10@AttackAIPr
  0016c	00 00 00 00	 DD	 $LN10@AttackAIPr
  00170	00 00 00 00	 DD	 $LN25@AttackAIPr
  00174	00 00 00 00	 DD	 $LN10@AttackAIPr
  00178	00 00 00 00	 DD	 $LN7@AttackAIPr
  0017c	00 00 00 00	 DD	 $LN25@AttackAIPr
?AttackAIProc@@YAHHPAD@Z ENDP				; AttackAIProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?GetDeadTarget@@YAHXZ
_TEXT	SEGMENT
?GetDeadTarget@@YAHXZ PROC				; GetDeadTarget, COMDAT

; 1499 : 	int i, index, end;
; 1500 : 	i = 10;

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	56		 push	 esi

; 1501 : 	end = 20;

  00006	8d 70 0a	 lea	 esi, DWORD PTR [eax+10]

; 1502 : 	if (BattleMyNo < 10) {

  00009	39 05 00 00 00
	00		 cmp	 DWORD PTR ?BattleMyNo@@3HA, eax ; BattleMyNo
  0000f	7d 0f		 jge	 SHORT $LL19@GetDeadTar

; 1503 : 		i = 0;

  00011	33 c0		 xor	 eax, eax

; 1504 : 		end = 10;

  00013	8d 70 0a	 lea	 esi, DWORD PTR [eax+10]
  00016	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL19@GetDeadTar:

; 1507 : 		index = Ordinal2[i];

  00020	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?Ordinal2@@3PAHA[eax*4]

; 1508 : 		if (p_party[index]->func == NULL) continue;

  00027	8b 0c 95 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[edx*4]
  0002e	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00032	74 06		 je	 SHORT $LN2@GetDeadTar

; 1509 : 		if (p_party[index]->hp > 0) continue;

  00034	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  00038	7e 0a		 jle	 SHORT $LN7@GetDeadTar
$LN2@GetDeadTar:

; 1505 : 	}
; 1506 : 	for (; i < end; i++) {

  0003a	40		 inc	 eax
  0003b	3b c6		 cmp	 eax, esi
  0003d	7c e1		 jl	 SHORT $LL19@GetDeadTar

; 1511 : 	}
; 1512 : 	return -1;

  0003f	83 c8 ff	 or	 eax, -1
  00042	5e		 pop	 esi

; 1513 : }

  00043	c3		 ret	 0
$LN7@GetDeadTar:

; 1510 : 		return index;

  00044	8b c2		 mov	 eax, edx
  00046	5e		 pop	 esi

; 1513 : }

  00047	c3		 ret	 0
?GetDeadTarget@@YAHXZ ENDP				; GetDeadTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?GetCureTarget@@YAHH@Z
_TEXT	SEGMENT
_target_flag$ = 8					; size = 4
?GetCureTarget@@YAHH@Z PROC				; GetCureTarget, COMDAT

; 1471 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1472 : 	int target = -1, start;
; 1473 : 	if (TARGET_1 <= target_flag && target_flag <= TARGET_5) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _target_flag$[ebp]
  00006	83 c1 f9	 add	 ecx, -7			; fffffff9H
  00009	83 f9 04	 cmp	 ecx, 4
  0000c	77 5c		 ja	 SHORT $LN15@GetCureTar

; 1474 : 		start = Ordinal[target_flag - TARGET_1];

  0000e	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ordinal@@3PAHA[ecx*4]
  00015	53		 push	 ebx

; 1475 : 		for (int i = 0; i < 2; i++, start += 5) {

  00016	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?AI_limit@@3PAHA
  0001c	56		 push	 esi
  0001d	33 f6		 xor	 esi, esi
  0001f	57		 push	 edi
$LL4@GetCureTar:

; 1476 : 			if (p_party[start]->func && p_party[start]->hp > 0 && p_party[start]->maxHp * AI_limit[0] / 100 > p_party[start]->hp) {

  00020	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?p_party@@3PAPAUaction@@A[ecx*4]
  00027	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0002b	74 25		 je	 SHORT $LN2@GetCureTar
  0002d	8b 7a 78	 mov	 edi, DWORD PTR [edx+120]
  00030	85 ff		 test	 edi, edi
  00032	7e 1e		 jle	 SHORT $LN2@GetCureTar
  00034	8b 92 80 00 00
	00		 mov	 edx, DWORD PTR [edx+128]
  0003a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0003f	0f af d3	 imul	 edx, ebx
  00042	f7 ea		 imul	 edx
  00044	c1 fa 05	 sar	 edx, 5
  00047	8b c2		 mov	 eax, edx
  00049	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004c	03 c2		 add	 eax, edx
  0004e	3b c7		 cmp	 eax, edi
  00050	7f 11		 jg	 SHORT $LN9@GetCureTar
$LN2@GetCureTar:

; 1475 : 		for (int i = 0; i < 2; i++, start += 5) {

  00052	46		 inc	 esi
  00053	83 c1 05	 add	 ecx, 5
  00056	83 fe 02	 cmp	 esi, 2
  00059	7c c5		 jl	 SHORT $LL4@GetCureTar

; 1477 : 				target = start;
; 1478 : 				break;
; 1479 : 			}
; 1480 : 		}
; 1481 : 	}
; 1482 : 	return target;

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	83 c8 ff	 or	 eax, -1
  00060	5b		 pop	 ebx

; 1483 : }

  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN9@GetCureTar:
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 1477 : 				target = start;
; 1478 : 				break;
; 1479 : 			}
; 1480 : 		}
; 1481 : 	}
; 1482 : 	return target;

  00065	8b c1		 mov	 eax, ecx
  00067	5b		 pop	 ebx

; 1483 : }

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN15@GetCureTar:

; 1477 : 				target = start;
; 1478 : 				break;
; 1479 : 			}
; 1480 : 		}
; 1481 : 	}
; 1482 : 	return target;

  0006a	83 c8 ff	 or	 eax, -1

; 1483 : }

  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?GetCureTarget@@YAHH@Z ENDP				; GetCureTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?GetFirstTarget@@YAHH@Z
_TEXT	SEGMENT
_target_flag$ = 8					; size = 4
?GetFirstTarget@@YAHH@Z PROC				; GetFirstTarget, COMDAT

; 1456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1457 : 	int target = -1, start;
; 1458 : 	if (TARGET_1 <= target_flag && target_flag <= TARGET_5) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _target_flag$[ebp]
  00006	83 c0 f9	 add	 eax, -7			; fffffff9H
  00009	83 f8 04	 cmp	 eax, 4
  0000c	77 28		 ja	 SHORT $LN13@GetFirstTa

; 1459 : 		start = Ordinal[target_flag - TARGET_1];

  0000e	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?Ordinal@@3PAHA[eax*4]

; 1460 : 		for (int i = 0; i < 2; i++, start += 5) {

  00015	33 d2		 xor	 edx, edx
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@GetFirstTa:

; 1461 : 			if (p_party[start]->func) {

  00020	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00027	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0002b	75 0c		 jne	 SHORT $LN3@GetFirstTa

; 1460 : 		for (int i = 0; i < 2; i++, start += 5) {

  0002d	42		 inc	 edx
  0002e	83 c0 05	 add	 eax, 5
  00031	83 fa 02	 cmp	 edx, 2
  00034	7c ea		 jl	 SHORT $LL4@GetFirstTa
$LN13@GetFirstTa:

; 1462 : 				target = start;
; 1463 : 				break;
; 1464 : 			}
; 1465 : 		}
; 1466 : 	}
; 1467 : 	return target;
; 1468 : }

  00036	83 c8 ff	 or	 eax, -1
$LN3@GetFirstTa:
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?GetFirstTarget@@YAHH@Z ENDP				; GetFirstTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?GetResurrectTarget@@YAHH@Z
_TEXT	SEGMENT
_target_flag$ = 8					; size = 4
?GetResurrectTarget@@YAHH@Z PROC			; GetResurrectTarget, COMDAT

; 1441 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1442 : 	int target = -1, start;
; 1443 : 	if (TARGET_1 <= target_flag && target_flag <= TARGET_5) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _target_flag$[ebp]
  00006	83 c0 f9	 add	 eax, -7			; fffffff9H
  00009	83 f8 04	 cmp	 eax, 4
  0000c	77 2e		 ja	 SHORT $LN15@GetResurre

; 1444 : 		start = Ordinal[target_flag - TARGET_1];

  0000e	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?Ordinal@@3PAHA[eax*4]

; 1445 : 		for (int i = 0; i < 2; i++, start += 5) {

  00015	33 c9		 xor	 ecx, ecx
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@GetResurre:

; 1446 : 			if (p_party[start]->func && p_party[start]->hp <= 0) {

  00020	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00027	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0002b	74 06		 je	 SHORT $LN2@GetResurre
  0002d	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  00031	7e 0c		 jle	 SHORT $LN13@GetResurre
$LN2@GetResurre:

; 1445 : 		for (int i = 0; i < 2; i++, start += 5) {

  00033	41		 inc	 ecx
  00034	83 c0 05	 add	 eax, 5
  00037	83 f9 02	 cmp	 ecx, 2
  0003a	7c e4		 jl	 SHORT $LL4@GetResurre
$LN15@GetResurre:

; 1447 : 				target = start;
; 1448 : 				break;
; 1449 : 			}
; 1450 : 		}
; 1451 : 	}
; 1452 : 	return target;
; 1453 : }

  0003c	83 c8 ff	 or	 eax, -1
$LN13@GetResurre:
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?GetResurrectTarget@@YAHH@Z ENDP			; GetResurrectTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SettingProc@@YAHXZ
_TEXT	SEGMENT
_limit$1 = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
?AI_SettingProc@@YAHXZ PROC				; AI_SettingProc, COMDAT

; 1062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1063 : 	static char Notice[][32] = { "ì¤ì ì ì¥", "ì¤ì ì·¨ì",
; 1064 : 		"éæ©åå¤ç²¾çµ", "éæ©åå¤ç²¾çµ", "éæ©ä¼åé¡ºåº", "éæ©ä¼åé¡ºåº", "å¢å èä¹åå¿ååº¦", "åå°èä¹åå¿ååº¦",
; 1065 : 		"å»ºè®®è®¾å®é«äºä½¿ç¨ç²¾çµæéMP", "å»ºè®®è®¾å®é«äºä½¿ç¨ç²¾çµæéMP",
; 1066 : 		"éæ©é¦æ¬¡ç²¾çµ", "éæ©é¦æ¬¡ç²¾çµ", "éæ©ä½¿ç¨ç®æ ", "éæ©ä½¿ç¨ç®æ ",
; 1067 : 		"éæ©æ°ç»åå¤æ¹å¼", "éæ©æ°ç»åå¤æ¹å¼", "éæ©ä½¿ç¨ç®æ ", "éæ©ä½¿ç¨ç®æ "
; 1068 : #ifdef _ATTACK_AI
; 1069 : 		,"éæ©æ»å»æ¹å¼","éæ©æ»å»æ¹å¼","éæ©ä½¿ç¨ç®æ ","éæ©ä½¿ç¨ç®æ ","éæ©åå¤æ¹å¼","éæ©åå¤æ¹å¼"
; 1070 : #endif
; 1071 : 	};
; 1072 : 	static int x = 0, y = 0;
; 1073 : 	static DWORD dwPressTime;
; 1074 : 	static int btnId[AIBtnNum], btnState[AIBtnNum];
; 1075 : 	static int u_offx[] = { 209 - 93, 296 - 93, 379 - 93 };
; 1076 : 	static int d_offx[] = { 209 - 112, 296 - 112, 379 - 112 };
; 1077 : 	static char MethodName[] = "ì¤í¬ì¤ì ";
; 1078 : 	char* str;
; 1079 : 	//AI_menu_state
; 1080 : 	if (pAISettingWnd == NULL) {

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pAISettingWnd@@3PAUaction@@A ; pAISettingWnd
  00015	56		 push	 esi
  00016	85 c0		 test	 eax, eax
  00018	0f 85 ad 00 00
	00		 jne	 $LN28@AI_Setting

; 1081 : #ifndef _ATTACK_AI
; 1082 : 		pAISettingWnd = MakeWindowDisp(x, y, 413, 302, 26261, -1);
; 1083 : #else
; 1084 : #ifdef _READ16BITBMP
; 1085 : 		if (g_bUseAlpha) pAISettingWnd = MakeWindowDisp(x, y, 413, 302, OLD_GRAPHICS_START + 57, -1);
; 1086 : 		else
; 1087 : #endif
; 1088 : 			pAISettingWnd = MakeWindowDisp(x, y, 413, 302, 35225, -1);

  0001e	6a ff		 push	 -1
  00020	68 99 89 00 00	 push	 35225			; 00008999H
  00025	68 2e 01 00 00	 push	 302			; 0000012eH
  0002a	68 9d 01 00 00	 push	 413			; 0000019dH
  0002f	ff 35 00 00 00
	00		 push	 DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00035	ff 35 00 00 00
	00		 push	 DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  0003b	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  00040	83 c4 18	 add	 esp, 24			; 00000018H
  00043	a3 00 00 00 00	 mov	 DWORD PTR ?pAISettingWnd@@3PAUaction@@A, eax ; pAISettingWnd

; 1089 : #endif
; 1090 : 		dwPressTime = 0;

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwPressTime@?1??AI_SettingProc@@YAHXZ@4KA, 0

; 1091 : 		AI_ReLoad();

  00052	e8 00 00 00 00	 call	 ?AI_ReLoad@@YAHXZ	; AI_ReLoad

; 1092 : 		AI_CheckSetting();

  00057	e8 00 00 00 00	 call	 ?AI_CheckSetting@@YAXXZ	; AI_CheckSetting

; 1093 : 		for (int i = 0; i < AIBtnNum; i++) {
; 1094 : 			btnId[i] = -2;

  0005c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe

; 1433 : 			}
; 1434 : 			}
; 1435 : 		}
; 1436 : 	return FALSE;

  00063	33 c0		 xor	 eax, eax
  00065	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA, xmm0
  0006c	5e		 pop	 esi
  0006d	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+16, xmm0
  00074	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+32, xmm0
  0007b	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+48, xmm0
  00082	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+64, xmm0
  00089	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+80, xmm0
  00090	0f 57 c0	 xorps	 xmm0, xmm0
  00093	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA, xmm0
  0009a	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+16, xmm0
  000a1	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+32, xmm0
  000a8	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+48, xmm0
  000af	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+64, xmm0
  000b6	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+80, xmm0

; 1437 : 	}

  000bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c0	33 cd		 xor	 ecx, ebp
  000c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
$LN28@AI_Setting:

; 1095 : 			btnState[i] = 0;
; 1096 : 		}
; 1097 : 	}
; 1098 : 	else {
; 1099 : 		if (pAISettingWnd->hp >= 1) {

  000cb	83 78 78 01	 cmp	 DWORD PTR [eax+120], 1
  000cf	0f 8c e9 0c 00
	00		 jl	 $LN24@AI_Setting

; 1100 : 			if (joy_trg[0] & JOY_ESC) {

  000d5	f7 05 00 00 00
	00 00 00 00 80	 test	 DWORD PTR ?joy_trg@@3PAKA, -2147483648 ; 80000000H
  000df	74 4d		 je	 SHORT $LN31@AI_Setting

; 1101 : 				DeathAction(pAISettingWnd);

  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 1102 : 				pAISettingWnd = NULL;
; 1103 : #ifdef _AI_OTHER
; 1104 : 				if (pAIOtherFunctionWnd) {

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A ; pAIOtherFunctionWnd
  000ec	83 c4 04	 add	 esp, 4
  000ef	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAISettingWnd@@3PAUaction@@A, 0 ; pAISettingWnd
  000f9	85 c0		 test	 eax, eax
  000fb	74 1d		 je	 SHORT $LN32@AI_Setting

; 1105 : 					DeathAction(pAIOtherFunctionWnd);

  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00103	83 c4 04	 add	 esp, 4

; 1106 : 					pAIOtherFunctionWnd = NULL;

  00106	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A, 0 ; pAIOtherFunctionWnd

; 1107 : 					AI_Other_State = 0;

  00110	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Other_State@@3HA, 0 ; AI_Other_State
$LN32@AI_Setting:

; 1108 : 				}
; 1109 : #endif
; 1110 : 				return TRUE;

  0011a	b8 01 00 00 00	 mov	 eax, 1
  0011f	5e		 pop	 esi

; 1437 : 	}

  00120	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	33 cd		 xor	 ecx, ebp
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
$LN31@AI_Setting:

; 1111 : 			}
; 1112 : 			if (dwPressTime) {

  0012e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?dwPressTime@?1??AI_SettingProc@@YAHXZ@4KA, 0
  00135	0f 84 6f 06 00
	00		 je	 $LN33@AI_Setting

; 1113 : 				if (TimeGetTime() > (dwPressTime + 100)) {

  0013b	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00140	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dwPressTime@?1??AI_SettingProc@@YAHXZ@4KA
  00146	83 c1 64	 add	 ecx, 100		; 00000064H
  00149	3b c1		 cmp	 eax, ecx
  0014b	0f 86 e0 06 00
	00		 jbe	 $LN104@AI_Setting

; 1114 : 					dwPressTime = 0;
; 1115 : 					if (btnState[0] == 1) {//æä¸"??"

  00151	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA, 1
  00158	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwPressTime@?1??AI_SettingProc@@YAHXZ@4KA, 0
  00162	75 78		 jne	 SHORT $LN36@AI_Setting

; 1116 : 						btnState[0] = 0;
; 1117 : 						DeathAction(pAISettingWnd);

  00164	ff 35 00 00 00
	00		 push	 DWORD PTR ?pAISettingWnd@@3PAUaction@@A ; pAISettingWnd
  0016a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA, 0
  00174	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 1118 : 						pAISettingWnd = NULL;
; 1119 : #ifdef _AI_OTHER
; 1120 : 						if (pAIOtherFunctionWnd) {

  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A ; pAIOtherFunctionWnd
  0017e	83 c4 04	 add	 esp, 4
  00181	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAISettingWnd@@3PAUaction@@A, 0 ; pAISettingWnd
  0018b	85 c0		 test	 eax, eax
  0018d	74 1d		 je	 SHORT $LN38@AI_Setting

; 1121 : 							DeathAction(pAIOtherFunctionWnd);

  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00195	83 c4 04	 add	 esp, 4

; 1122 : 							pAIOtherFunctionWnd = NULL;

  00198	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A, 0 ; pAIOtherFunctionWnd

; 1123 : 							AI_Other_State = 0;

  001a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Other_State@@3HA, 0 ; AI_Other_State
$LN38@AI_Setting:

; 1124 : 						}
; 1125 : #endif
; 1126 : 						play_se(217, 320, 240);

  001ac	68 f0 00 00 00	 push	 240			; 000000f0H
  001b1	68 40 01 00 00	 push	 320			; 00000140H
  001b6	68 d9 00 00 00	 push	 217			; 000000d9H
  001bb	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1127 : 						AI_Save();

  001c3	e8 00 00 00 00	 call	 ?AI_Save@@YAHXZ		; AI_Save

; 1128 : 						return TRUE;

  001c8	b8 01 00 00 00	 mov	 eax, 1
  001cd	5e		 pop	 esi

; 1437 : 	}

  001ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d1	33 cd		 xor	 ecx, ebp
  001d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c3		 ret	 0
$LN36@AI_Setting:

; 1129 : 					}
; 1130 : 					else if (btnState[1] == 1) {//æä¸"??"

  001dc	83 3d 04 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+4, 1
  001e3	75 73		 jne	 SHORT $LN39@AI_Setting

; 1131 : 						btnState[1] = 0;
; 1132 : 						DeathAction(pAISettingWnd);

  001e5	ff 35 00 00 00
	00		 push	 DWORD PTR ?pAISettingWnd@@3PAUaction@@A ; pAISettingWnd
  001eb	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+4, 0
  001f5	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 1133 : 						pAISettingWnd = NULL;
; 1134 : #ifdef _AI_OTHER
; 1135 : 						if (pAIOtherFunctionWnd) {

  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A ; pAIOtherFunctionWnd
  001ff	83 c4 04	 add	 esp, 4
  00202	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAISettingWnd@@3PAUaction@@A, 0 ; pAISettingWnd
  0020c	85 c0		 test	 eax, eax
  0020e	74 1d		 je	 SHORT $LN41@AI_Setting

; 1136 : 							DeathAction(pAIOtherFunctionWnd);

  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00216	83 c4 04	 add	 esp, 4

; 1137 : 							pAIOtherFunctionWnd = NULL;

  00219	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAIOtherFunctionWnd@@3PAUaction@@A, 0 ; pAIOtherFunctionWnd

; 1138 : 							AI_Other_State = 0;

  00223	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_Other_State@@3HA, 0 ; AI_Other_State
$LN41@AI_Setting:

; 1139 : 						}
; 1140 : #endif
; 1141 : 						play_se(203, 320, 240);

  0022d	68 f0 00 00 00	 push	 240			; 000000f0H
  00232	68 40 01 00 00	 push	 320			; 00000140H
  00237	68 cb 00 00 00	 push	 203			; 000000cbH
  0023c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00241	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1142 : 						return TRUE;

  00244	b8 01 00 00 00	 mov	 eax, 1
  00249	5e		 pop	 esi

; 1437 : 	}

  0024a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024d	33 cd		 xor	 ecx, ebp
  0024f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c3		 ret	 0
$LN39@AI_Setting:

; 1143 : 					}
; 1144 : 					else if (btnState[2] == 1) {//æä¸è¡¥è¡çç²¾çµä¸ä¸ä¸ª

  00258	83 3d 08 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+8, 1
  0025f	75 2d		 jne	 SHORT $LN42@AI_Setting

; 1145 : 						btnState[2] = 0;
; 1146 : 						play_se(217, 320, 240);

  00261	68 f0 00 00 00	 push	 240			; 000000f0H
  00266	68 40 01 00 00	 push	 320			; 00000140H
  0026b	68 d9 00 00 00	 push	 217			; 000000d9H
  00270	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+8, 0
  0027a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1147 : 						AI_SetUpCureMethod(0);

  0027f	6a 00		 push	 0
  00281	e8 00 00 00 00	 call	 ?AI_SetUpCureMethod@@YAXH@Z ; AI_SetUpCureMethod
  00286	83 c4 10	 add	 esp, 16			; 00000010H

; 1148 : 					}

  00289	e9 a3 05 00 00	 jmp	 $LN104@AI_Setting
$LN42@AI_Setting:

; 1149 : 					else  if (btnState[3] == 1) {//æä¸è¡¥è¡çç²¾çµä¸ä¸ä¸ª

  0028e	83 3d 0c 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+12, 1
  00295	75 2d		 jne	 SHORT $LN44@AI_Setting

; 1150 : 						btnState[3] = 0;
; 1151 : 						play_se(217, 320, 240);

  00297	68 f0 00 00 00	 push	 240			; 000000f0H
  0029c	68 40 01 00 00	 push	 320			; 00000140H
  002a1	68 d9 00 00 00	 push	 217			; 000000d9H
  002a6	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+12, 0
  002b0	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1152 : 						AI_SetDownCureMethod(0);

  002b5	6a 00		 push	 0
  002b7	e8 00 00 00 00	 call	 ?AI_SetDownCureMethod@@YAXH@Z ; AI_SetDownCureMethod
  002bc	83 c4 10	 add	 esp, 16			; 00000010H

; 1153 : 					}

  002bf	e9 6d 05 00 00	 jmp	 $LN104@AI_Setting
$LN44@AI_Setting:

; 1154 : 					else if (btnState[4] == 1) {//æä¸è¡¥è¡çé¡ºåºä¸ä¸ä¸ª

  002c4	83 3d 10 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+16, 1
  002cb	75 2d		 jne	 SHORT $LN46@AI_Setting

; 1155 : 						btnState[4] = 0;
; 1156 : 						play_se(217, 320, 240);

  002cd	68 f0 00 00 00	 push	 240			; 000000f0H
  002d2	68 40 01 00 00	 push	 320			; 00000140H
  002d7	68 d9 00 00 00	 push	 217			; 000000d9H
  002dc	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+16, 0
  002e6	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1157 : 						AI_SetUpTarget(0);

  002eb	6a 00		 push	 0
  002ed	e8 00 00 00 00	 call	 ?AI_SetUpTarget@@YAXH@Z	; AI_SetUpTarget
  002f2	83 c4 10	 add	 esp, 16			; 00000010H

; 1158 : 					}

  002f5	e9 37 05 00 00	 jmp	 $LN104@AI_Setting
$LN46@AI_Setting:

; 1159 : 					else if (btnState[5] == 1) {//æä¸è¡¥è¡çé¡ºåºä¸ä¸ä¸ª

  002fa	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+20, 1
  00301	75 2d		 jne	 SHORT $LN48@AI_Setting

; 1160 : 						btnState[5] = 0;
; 1161 : 						play_se(217, 320, 240);

  00303	68 f0 00 00 00	 push	 240			; 000000f0H
  00308	68 40 01 00 00	 push	 320			; 00000140H
  0030d	68 d9 00 00 00	 push	 217			; 000000d9H
  00312	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+20, 0
  0031c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1162 : 						AI_SetDownTarget(0);

  00321	6a 00		 push	 0
  00323	e8 00 00 00 00	 call	 ?AI_SetDownTarget@@YAXH@Z ; AI_SetDownTarget
  00328	83 c4 10	 add	 esp, 16			; 00000010H

; 1163 : 					}

  0032b	e9 01 05 00 00	 jmp	 $LN104@AI_Setting
$LN48@AI_Setting:

; 1164 : 					else if (btnState[6] == 1) {//æä¸è¡¥è¡çæ°å¼ä¸ä¸ä¸ª

  00330	83 3d 18 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+24, 1
  00337	75 2d		 jne	 SHORT $LN50@AI_Setting

; 1165 : 						btnState[6] = 0;
; 1166 : 						play_se(217, 320, 240);

  00339	68 f0 00 00 00	 push	 240			; 000000f0H
  0033e	68 40 01 00 00	 push	 320			; 00000140H
  00343	68 d9 00 00 00	 push	 217			; 000000d9H
  00348	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+24, 0
  00352	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1167 : 						AI_SetUpLimit(0);

  00357	6a 00		 push	 0
  00359	e8 00 00 00 00	 call	 ?AI_SetUpLimit@@YAXH@Z	; AI_SetUpLimit
  0035e	83 c4 10	 add	 esp, 16			; 00000010H

; 1168 : 					}

  00361	e9 cb 04 00 00	 jmp	 $LN104@AI_Setting
$LN50@AI_Setting:

; 1169 : 					else  if (btnState[7] == 1) {//æä¸è¡¥è¡çæ°å¼ä¸ä¸ä¸ª

  00366	83 3d 1c 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+28, 1
  0036d	75 2d		 jne	 SHORT $LN52@AI_Setting

; 1170 : 						btnState[7] = 0;
; 1171 : 						play_se(217, 320, 240);

  0036f	68 f0 00 00 00	 push	 240			; 000000f0H
  00374	68 40 01 00 00	 push	 320			; 00000140H
  00379	68 d9 00 00 00	 push	 217			; 000000d9H
  0037e	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+28, 0
  00388	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1172 : 						AI_SetDownLimit(0);

  0038d	6a 00		 push	 0
  0038f	e8 00 00 00 00	 call	 ?AI_SetDownLimit@@YAXH@Z ; AI_SetDownLimit
  00394	83 c4 10	 add	 esp, 16			; 00000010H

; 1173 : 					}

  00397	e9 95 04 00 00	 jmp	 $LN104@AI_Setting
$LN52@AI_Setting:

; 1174 : 					else if (btnState[8] == 1) {//æä¸è¡¥æ°çæ°å¼ä¸ä¸ä¸ª

  0039c	83 3d 20 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+32, 1
  003a3	75 2d		 jne	 SHORT $LN54@AI_Setting

; 1175 : 						btnState[8] = 0;
; 1176 : 						play_se(217, 320, 240);

  003a5	68 f0 00 00 00	 push	 240			; 000000f0H
  003aa	68 40 01 00 00	 push	 320			; 00000140H
  003af	68 d9 00 00 00	 push	 217			; 000000d9H
  003b4	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+32, 0
  003be	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1177 : 						AI_SetUpLimit(1);

  003c3	6a 01		 push	 1
  003c5	e8 00 00 00 00	 call	 ?AI_SetUpLimit@@YAXH@Z	; AI_SetUpLimit
  003ca	83 c4 10	 add	 esp, 16			; 00000010H

; 1178 : 					}

  003cd	e9 5f 04 00 00	 jmp	 $LN104@AI_Setting
$LN54@AI_Setting:

; 1179 : 					else  if (btnState[9] == 1) {//æä¸è¡¥æ°çæ°å¼ä¸ä¸ä¸ª

  003d2	83 3d 24 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+36, 1
  003d9	75 2d		 jne	 SHORT $LN56@AI_Setting

; 1180 : 						btnState[9] = 0;
; 1181 : 						play_se(217, 320, 240);

  003db	68 f0 00 00 00	 push	 240			; 000000f0H
  003e0	68 40 01 00 00	 push	 320			; 00000140H
  003e5	68 d9 00 00 00	 push	 217			; 000000d9H
  003ea	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+36, 0
  003f4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1182 : 						AI_SetDownLimit(1);

  003f9	6a 01		 push	 1
  003fb	e8 00 00 00 00	 call	 ?AI_SetDownLimit@@YAXH@Z ; AI_SetDownLimit
  00400	83 c4 10	 add	 esp, 16			; 00000010H

; 1183 : 					}

  00403	e9 29 04 00 00	 jmp	 $LN104@AI_Setting
$LN56@AI_Setting:

; 1184 : 					else if (btnState[10] == 1) {//æä¸é¦æ¬¡çç²¾çµä¸ä¸ä¸ª

  00408	83 3d 28 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+40, 1
  0040f	75 2d		 jne	 SHORT $LN58@AI_Setting

; 1185 : 						btnState[10] = 0;
; 1186 : 						play_se(217, 320, 240);

  00411	68 f0 00 00 00	 push	 240			; 000000f0H
  00416	68 40 01 00 00	 push	 320			; 00000140H
  0041b	68 d9 00 00 00	 push	 217			; 000000d9H
  00420	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+40, 0
  0042a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1187 : 						AI_SetUpFirstMethod(2);

  0042f	6a 02		 push	 2
  00431	e8 00 00 00 00	 call	 ?AI_SetUpFirstMethod@@YAXH@Z ; AI_SetUpFirstMethod
  00436	83 c4 10	 add	 esp, 16			; 00000010H

; 1188 : 					}

  00439	e9 f3 03 00 00	 jmp	 $LN104@AI_Setting
$LN58@AI_Setting:

; 1189 : 					else  if (btnState[11] == 1) {//æä¸é¦æ¬¡çç²¾çµä¸ä¸ä¸ª

  0043e	83 3d 2c 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+44, 1
  00445	75 2d		 jne	 SHORT $LN60@AI_Setting

; 1190 : 						btnState[11] = 0;
; 1191 : 						play_se(217, 320, 240);

  00447	68 f0 00 00 00	 push	 240			; 000000f0H
  0044c	68 40 01 00 00	 push	 320			; 00000140H
  00451	68 d9 00 00 00	 push	 217			; 000000d9H
  00456	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+44, 0
  00460	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1192 : 						AI_SetDownFirstMethod(2);

  00465	6a 02		 push	 2
  00467	e8 00 00 00 00	 call	 ?AI_SetDownFirstMethod@@YAXH@Z ; AI_SetDownFirstMethod
  0046c	83 c4 10	 add	 esp, 16			; 00000010H

; 1193 : 					}

  0046f	e9 bd 03 00 00	 jmp	 $LN104@AI_Setting
$LN60@AI_Setting:

; 1194 : 					else if (btnState[12] == 1) {//æä¸é¦æ¬¡çé¡ºåºä¸ä¸ä¸ª

  00474	83 3d 30 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+48, 1
  0047b	75 2d		 jne	 SHORT $LN62@AI_Setting

; 1195 : 						btnState[12] = 0;
; 1196 : 						play_se(217, 320, 240);

  0047d	68 f0 00 00 00	 push	 240			; 000000f0H
  00482	68 40 01 00 00	 push	 320			; 00000140H
  00487	68 d9 00 00 00	 push	 217			; 000000d9H
  0048c	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+48, 0
  00496	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1197 : 						AI_SetUpTarget(2);

  0049b	6a 02		 push	 2
  0049d	e8 00 00 00 00	 call	 ?AI_SetUpTarget@@YAXH@Z	; AI_SetUpTarget
  004a2	83 c4 10	 add	 esp, 16			; 00000010H

; 1198 : 					}

  004a5	e9 87 03 00 00	 jmp	 $LN104@AI_Setting
$LN62@AI_Setting:

; 1199 : 					else  if (btnState[13] == 1) {//æä¸é¦æ¬¡çé¡ºåºä¸ä¸ä¸ª

  004aa	83 3d 34 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+52, 1
  004b1	75 2d		 jne	 SHORT $LN64@AI_Setting

; 1200 : 						btnState[13] = 0;
; 1201 : 						play_se(217, 320, 240);

  004b3	68 f0 00 00 00	 push	 240			; 000000f0H
  004b8	68 40 01 00 00	 push	 320			; 00000140H
  004bd	68 d9 00 00 00	 push	 217			; 000000d9H
  004c2	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+52, 0
  004cc	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1202 : 						AI_SetDownTarget(2);

  004d1	6a 02		 push	 2
  004d3	e8 00 00 00 00	 call	 ?AI_SetDownTarget@@YAXH@Z ; AI_SetDownTarget
  004d8	83 c4 10	 add	 esp, 16			; 00000010H

; 1203 : 					}

  004db	e9 51 03 00 00	 jmp	 $LN104@AI_Setting
$LN64@AI_Setting:

; 1204 : 					else if (btnState[14] == 1) {//æä¸å¤æ´»çç²¾çµä¸ä¸ä¸ª

  004e0	83 3d 38 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+56, 1
  004e7	75 2d		 jne	 SHORT $LN66@AI_Setting

; 1205 : 						btnState[14] = 0;
; 1206 : 						play_se(217, 320, 240);

  004e9	68 f0 00 00 00	 push	 240			; 000000f0H
  004ee	68 40 01 00 00	 push	 320			; 00000140H
  004f3	68 d9 00 00 00	 push	 217			; 000000d9H
  004f8	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+56, 0
  00502	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1207 : 						AI_SetUpResurrectMethod(3);

  00507	6a 03		 push	 3
  00509	e8 00 00 00 00	 call	 ?AI_SetUpResurrectMethod@@YAXH@Z ; AI_SetUpResurrectMethod
  0050e	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 : 					}

  00511	e9 1b 03 00 00	 jmp	 $LN104@AI_Setting
$LN66@AI_Setting:

; 1209 : 					else  if (btnState[15] == 1) {//æä¸å¤æ´»çç²¾çµä¸ä¸ä¸ª

  00516	83 3d 3c 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+60, 1
  0051d	75 2d		 jne	 SHORT $LN68@AI_Setting

; 1210 : 						btnState[15] = 0;
; 1211 : 						play_se(217, 320, 240);

  0051f	68 f0 00 00 00	 push	 240			; 000000f0H
  00524	68 40 01 00 00	 push	 320			; 00000140H
  00529	68 d9 00 00 00	 push	 217			; 000000d9H
  0052e	c7 05 3c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+60, 0
  00538	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1212 : 						AI_SetDownResurrectMethod(3);

  0053d	6a 03		 push	 3
  0053f	e8 00 00 00 00	 call	 ?AI_SetDownResurrectMethod@@YAXH@Z ; AI_SetDownResurrectMethod
  00544	83 c4 10	 add	 esp, 16			; 00000010H

; 1213 : 					}

  00547	e9 e5 02 00 00	 jmp	 $LN104@AI_Setting
$LN68@AI_Setting:

; 1214 : 					else if (btnState[16] == 1) {//æä¸å¤æ´»çé¡ºåºä¸ä¸ä¸ª

  0054c	83 3d 40 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+64, 1
  00553	75 67		 jne	 SHORT $LN70@AI_Setting

; 1215 : 						btnState[16] = 0;
; 1216 : 						play_se(217, 320, 240);

  00555	68 f0 00 00 00	 push	 240			; 000000f0H
  0055a	68 40 01 00 00	 push	 320			; 00000140H
  0055f	68 d9 00 00 00	 push	 217			; 000000d9H
  00564	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+64, 0
  0056e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1217 : 						if (TARGET_1 <= AI_target[3] && AI_target[3] <= TARGET_5) {

  00573	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?AI_target@@3PAHA+12
  00579	83 c4 0c	 add	 esp, 12			; 0000000cH
  0057c	8d 41 f9	 lea	 eax, DWORD PTR [ecx-7]
  0057f	83 f8 04	 cmp	 eax, 4
  00582	77 1f		 ja	 SHORT $LN72@AI_Setting

; 1218 : 							AI_target[3]--;

  00584	49		 dec	 ecx
  00585	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA+12, ecx
  0058b	83 f9 07	 cmp	 ecx, 7

; 1219 : 							if (AI_target[3] < TARGET_1)

  0058e	0f 8d 9d 02 00
	00		 jge	 $LN104@AI_Setting

; 1220 : 								AI_target[3] = TARGET_MYSIDE;

  00594	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+12, 3

; 1221 : 						}

  0059e	e9 8e 02 00 00	 jmp	 $LN104@AI_Setting
$LN72@AI_Setting:

; 1222 : 						else if (AI_target[3] == TARGET_MYPET) {

  005a3	b8 02 00 00 00	 mov	 eax, 2
  005a8	ba 0b 00 00 00	 mov	 edx, 11			; 0000000bH
  005ad	3b c8		 cmp	 ecx, eax
  005af	0f 44 c2	 cmove	 eax, edx
  005b2	a3 0c 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+12, eax

; 1223 : 							AI_target[3] = TARGET_5;
; 1224 : 						}
; 1225 : 						else {
; 1226 : 							AI_target[3] = TARGET_MYPET;
; 1227 : 						}
; 1228 : 					}

  005b7	e9 75 02 00 00	 jmp	 $LN104@AI_Setting
$LN70@AI_Setting:

; 1229 : 					else  if (btnState[17] == 1) {//æä¸å¤æ´»çé¡ºåºä¸ä¸ä¸ª

  005bc	83 3d 44 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+68, 1
  005c3	75 67		 jne	 SHORT $LN77@AI_Setting

; 1230 : 						btnState[17] = 0;
; 1231 : 						play_se(217, 320, 240);

  005c5	68 f0 00 00 00	 push	 240			; 000000f0H
  005ca	68 40 01 00 00	 push	 320			; 00000140H
  005cf	68 d9 00 00 00	 push	 217			; 000000d9H
  005d4	c7 05 44 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+68, 0
  005de	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1232 : 						if (TARGET_1 <= AI_target[3] && AI_target[3] <= TARGET_5) {

  005e3	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?AI_target@@3PAHA+12
  005e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  005ec	8d 41 f9	 lea	 eax, DWORD PTR [ecx-7]
  005ef	83 f8 04	 cmp	 eax, 4
  005f2	77 1f		 ja	 SHORT $LN79@AI_Setting

; 1233 : 							AI_target[3]++;

  005f4	41		 inc	 ecx
  005f5	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA+12, ecx
  005fb	83 f9 0b	 cmp	 ecx, 11			; 0000000bH

; 1234 : 							if (AI_target[3] > TARGET_5)

  005fe	0f 8e 2d 02 00
	00		 jle	 $LN104@AI_Setting

; 1235 : 								AI_target[3] = TARGET_MYPET;

  00604	c7 05 0c 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+12, 2

; 1236 : 						}

  0060e	e9 1e 02 00 00	 jmp	 $LN104@AI_Setting
$LN79@AI_Setting:

; 1237 : 						else if (AI_target[3] == TARGET_MYPET) {

  00613	33 c0		 xor	 eax, eax
  00615	83 f9 02	 cmp	 ecx, 2
  00618	0f 95 c0	 setne	 al
  0061b	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [eax*4+3]
  00622	a3 0c 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+12, eax

; 1238 : 							AI_target[3] = TARGET_MYSIDE;
; 1239 : 						}
; 1240 : 						else {
; 1241 : 							AI_target[3] = TARGET_1;
; 1242 : 						}
; 1243 : 					}

  00627	e9 05 02 00 00	 jmp	 $LN104@AI_Setting
$LN77@AI_Setting:

; 1244 : #ifdef _ATTACK_AI
; 1245 : 					else if (btnState[18] == 1) {// æä¸æ»å»åè½åçç²¾çµæ çä¸ä¸ä¸ª

  0062c	83 3d 48 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+72, 1
  00633	75 2d		 jne	 SHORT $LN84@AI_Setting

; 1246 : 						btnState[18] = 0;
; 1247 : 						play_se(217, 320, 240);

  00635	68 f0 00 00 00	 push	 240			; 000000f0H
  0063a	68 40 01 00 00	 push	 320			; 00000140H
  0063f	68 d9 00 00 00	 push	 217			; 000000d9H
  00644	c7 05 48 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+72, 0
  0064e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1248 : 						AI_SetUpAttackMethod(4);

  00653	6a 04		 push	 4
  00655	e8 00 00 00 00	 call	 ?AI_SetUpAttackMethod@@YAXH@Z ; AI_SetUpAttackMethod
  0065a	83 c4 10	 add	 esp, 16			; 00000010H

; 1249 : 					}

  0065d	e9 cf 01 00 00	 jmp	 $LN104@AI_Setting
$LN84@AI_Setting:

; 1250 : 					else if (btnState[19] == 1) {// æä¸æ»å»åè½åçç²¾çµæ çä¸ä¸ä¸ª

  00662	83 3d 4c 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+76, 1
  00669	75 2d		 jne	 SHORT $LN86@AI_Setting

; 1251 : 						btnState[19] = 0;
; 1252 : 						play_se(217, 320, 240);

  0066b	68 f0 00 00 00	 push	 240			; 000000f0H
  00670	68 40 01 00 00	 push	 320			; 00000140H
  00675	68 d9 00 00 00	 push	 217			; 000000d9H
  0067a	c7 05 4c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+76, 0
  00684	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1253 : 						AI_SetDownAttackMethod(4);

  00689	6a 04		 push	 4
  0068b	e8 00 00 00 00	 call	 ?AI_SetDownAttackMethod@@YAXH@Z ; AI_SetDownAttackMethod
  00690	83 c4 10	 add	 esp, 16			; 00000010H

; 1254 : 					}

  00693	e9 99 01 00 00	 jmp	 $LN104@AI_Setting
$LN86@AI_Setting:

; 1255 : 					else if (btnState[20] == 1) {// æä¸æ»å»åè½åçé¡ºåºæ çä¸ä¸ä¸ª

  00698	83 3d 50 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+80, 1
  0069f	75 2d		 jne	 SHORT $LN88@AI_Setting

; 1256 : 						btnState[20] = 0;
; 1257 : 						play_se(217, 320, 240);

  006a1	68 f0 00 00 00	 push	 240			; 000000f0H
  006a6	68 40 01 00 00	 push	 320			; 00000140H
  006ab	68 d9 00 00 00	 push	 217			; 000000d9H
  006b0	c7 05 50 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+80, 0
  006ba	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1258 : 						AI_SetUpTarget(4);

  006bf	6a 04		 push	 4
  006c1	e8 00 00 00 00	 call	 ?AI_SetUpTarget@@YAXH@Z	; AI_SetUpTarget
  006c6	83 c4 10	 add	 esp, 16			; 00000010H

; 1259 : 					}

  006c9	e9 63 01 00 00	 jmp	 $LN104@AI_Setting
$LN88@AI_Setting:

; 1260 : 					else if (btnState[21] == 1) {// æä¸æ»å»åè½åçé¡ºåºæ çä¸ä¸ä¸ª

  006ce	83 3d 54 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+84, 1
  006d5	75 2d		 jne	 SHORT $LN90@AI_Setting

; 1261 : 						btnState[21] = 0;
; 1262 : 						play_se(217, 320, 240);

  006d7	68 f0 00 00 00	 push	 240			; 000000f0H
  006dc	68 40 01 00 00	 push	 320			; 00000140H
  006e1	68 d9 00 00 00	 push	 217			; 000000d9H
  006e6	c7 05 54 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+84, 0
  006f0	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1263 : 						AI_SetDownTarget(4);

  006f5	6a 04		 push	 4
  006f7	e8 00 00 00 00	 call	 ?AI_SetDownTarget@@YAXH@Z ; AI_SetDownTarget
  006fc	83 c4 10	 add	 esp, 16			; 00000010H

; 1264 : 					}

  006ff	e9 2d 01 00 00	 jmp	 $LN104@AI_Setting
$LN90@AI_Setting:

; 1265 : 					else if (btnState[22] == 1) {//æä¸è¡¥æ°çç²¾çµä¸ä¸ä¸ª

  00704	83 3d 58 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+88, 1
  0070b	75 48		 jne	 SHORT $LN92@AI_Setting

; 1266 : 						btnState[22] = 0;
; 1267 : 						play_se(217, 320, 240);

  0070d	68 f0 00 00 00	 push	 240			; 000000f0H
  00712	68 40 01 00 00	 push	 320			; 00000140H
  00717	68 d9 00 00 00	 push	 217			; 000000d9H
  0071c	c7 05 58 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+88, 0
  00726	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0072b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1268 : 						// è¥æè¡¥æ°æè½
; 1269 : 						if (g_bUsePS) {

  0072e	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bUsePS@@3_NA, 0 ; g_bUsePS
  00735	0f 84 f6 00 00
	00		 je	 $LN104@AI_Setting

; 1270 : 							if (AI_method[1] == -1) AI_method[1] = g_iPSindex;

  0073b	83 c8 ff	 or	 eax, -1
  0073e	39 05 04 00 00
	00		 cmp	 DWORD PTR ?AI_method@@3PAHA+4, eax
  00744	0f 44 05 00 00
	00 00		 cmove	 eax, DWORD PTR ?g_iPSindex@@3HA ; g_iPSindex
  0074b	a3 04 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA+4, eax

; 1271 : 							else AI_method[1] = -1;
; 1272 : 						}
; 1273 : 					}

  00750	e9 dc 00 00 00	 jmp	 $LN104@AI_Setting
$LN92@AI_Setting:

; 1274 : 					else if (btnState[23] == 1) {//æä¸è¡¥æ°çç²¾çµä¸ä¸ä¸ª

  00755	83 3d 5c 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+92, 1
  0075c	0f 85 cf 00 00
	00		 jne	 $LN104@AI_Setting

; 1275 : 						btnState[23] = 0;
; 1276 : 						play_se(217, 320, 240);

  00762	68 f0 00 00 00	 push	 240			; 000000f0H
  00767	68 40 01 00 00	 push	 320			; 00000140H
  0076c	68 d9 00 00 00	 push	 217			; 000000d9H
  00771	c7 05 5c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+92, 0
  0077b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00780	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1277 : 						// è¥æè¡¥æ°æè½
; 1278 : 						if (g_bUsePS) {

  00783	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bUsePS@@3_NA, 0 ; g_bUsePS
  0078a	0f 84 a1 00 00
	00		 je	 $LN104@AI_Setting

; 1279 : 							if (AI_method[1] == -1) AI_method[1] = g_iPSindex;

  00790	83 c8 ff	 or	 eax, -1
  00793	39 05 04 00 00
	00		 cmp	 DWORD PTR ?AI_method@@3PAHA+4, eax
  00799	0f 44 05 00 00
	00 00		 cmove	 eax, DWORD PTR ?g_iPSindex@@3HA ; g_iPSindex
  007a0	a3 04 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA+4, eax

; 1280 : 							else AI_method[1] = -1;
; 1281 : 						}
; 1282 : 					}
; 1283 : #endif
; 1284 : 				}
; 1285 : 			}

  007a5	e9 87 00 00 00	 jmp	 $LN104@AI_Setting
$LN33@AI_Setting:

; 1286 : 			else {
; 1287 : 				//æ¯å¦æä¸æé®
; 1288 : 				for (int i = 0; i < AIBtnNum; i++) {

  007aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  007af	33 f6		 xor	 esi, esi
  007b1	8b 0d 2c 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+44
$LL7@AI_Setting:

; 1289 : 					if (HitDispNo == btnId[i]) {

  007b7	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi*4]
  007be	75 05		 jne	 SHORT $LN5@AI_Setting

; 1290 : 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  007c0	f6 c1 01	 test	 cl, 1
  007c3	75 08		 jne	 SHORT $LN152@AI_Setting
$LN5@AI_Setting:

; 1286 : 			else {
; 1287 : 				//æ¯å¦æä¸æé®
; 1288 : 				for (int i = 0; i < AIBtnNum; i++) {

  007c5	46		 inc	 esi
  007c6	83 fe 18	 cmp	 esi, 24			; 00000018H
  007c9	7c ec		 jl	 SHORT $LL7@AI_Setting
  007cb	eb 15		 jmp	 SHORT $LN181@AI_Setting
$LN152@AI_Setting:

; 1291 : 							dwPressTime = TimeGetTime();

  007cd	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  007d2	a3 00 00 00 00	 mov	 DWORD PTR ?dwPressTime@?1??AI_SettingProc@@YAHXZ@4KA, eax

; 1292 : 							btnState[i] = 1;

  007d7	c7 04 b5 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi*4], 1
$LN181@AI_Setting:

; 1293 : 							break;
; 1294 : 						}
; 1295 : 					}
; 1296 : 				}
; 1297 : #ifdef _AI_OTHER
; 1298 : 				//æä¸å¶å®
; 1299 : 				if (MakeHitBox(x + 317, y + 168, x + 386, y + 193, DISP_PRIO_BOX2))

  007e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  007e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  007ee	6a 6b		 push	 107			; 0000006bH
  007f0	8d 82 c1 00 00
	00		 lea	 eax, DWORD PTR [edx+193]
  007f6	50		 push	 eax
  007f7	8d 81 82 01 00
	00		 lea	 eax, DWORD PTR [ecx+386]
  007fd	50		 push	 eax
  007fe	8d 82 a8 00 00
	00		 lea	 eax, DWORD PTR [edx+168]
  00804	50		 push	 eax
  00805	8d 81 3d 01 00
	00		 lea	 eax, DWORD PTR [ecx+317]
  0080b	50		 push	 eax
  0080c	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  00811	83 c4 14	 add	 esp, 20			; 00000014H
  00814	85 c0		 test	 eax, eax
  00816	74 19		 je	 SHORT $LN104@AI_Setting

; 1300 : 					if (mouse.onceState & MOUSE_LEFT_CRICK) AI_Other_State = 1;

  00818	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0081f	b9 01 00 00 00	 mov	 ecx, 1
  00824	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AI_Other_State@@3HA ; AI_Other_State
  00829	0f 45 c1	 cmovne	 eax, ecx
  0082c	a3 00 00 00 00	 mov	 DWORD PTR ?AI_Other_State@@3HA, eax ; AI_Other_State
$LN104@AI_Setting:

; 1301 : #endif
; 1302 : 			}
; 1303 : 			//è¯´ææå­
; 1304 : 			for (int i = 0; i < AIBtnNum; i++) {

  00831	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00837	33 c0		 xor	 eax, eax
  00839	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@AI_Setting:

; 1305 : 				if (HitDispNo == btnId[i]) {

  00840	3b 0c 85 00 00
	00 00		 cmp	 ecx, DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[eax*4]
  00847	74 08		 je	 SHORT $LN153@AI_Setting

; 1301 : #endif
; 1302 : 			}
; 1303 : 			//è¯´ææå­
; 1304 : 			for (int i = 0; i < AIBtnNum; i++) {

  00849	40		 inc	 eax
  0084a	83 f8 18	 cmp	 eax, 24			; 00000018H
  0084d	7c f1		 jl	 SHORT $LL10@AI_Setting

; 1305 : 				if (HitDispNo == btnId[i]) {

  0084f	eb 1d		 jmp	 SHORT $LN9@AI_Setting
$LN153@AI_Setting:

; 1306 : 					strcpy(OneLineInfoStr, Notice[i]);

  00851	c1 e0 05	 shl	 eax, 5
  00854	ba 00 00 00 00	 mov	 edx, OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00859	8d 88 00 00 00
	00		 lea	 ecx, DWORD PTR ?Notice@?1??AI_SettingProc@@YAHXZ@4PAY0CA@DA[eax]
  0085f	2b d1		 sub	 edx, ecx
$LL140@AI_Setting:
  00861	8a 01		 mov	 al, BYTE PTR [ecx]
  00863	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00866	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0086a	84 c0		 test	 al, al
  0086c	75 f3		 jne	 SHORT $LL140@AI_Setting
$LN9@AI_Setting:

; 1307 : 					break;
; 1308 : 				}
; 1309 : 			}
; 1310 : #ifndef _ATTACK_AI
; 1311 : 			StockDispBuffer(((WINDOW_DISP*)pAISettingWnd->pYobi)->mx, ((WINDOW_DISP*)pAISettingWnd->pYobi)->my, DISP_PRIO_MENU, 26261, 1);
; 1312 : #else
; 1313 : #ifdef _READ16BITBMP
; 1314 : 			if (g_bUseAlpha) StockDispBuffer(((WINDOW_DISP*)pAISettingWnd->pYobi)->mx, ((WINDOW_DISP*)pAISettingWnd->pYobi)->my, DISP_PRIO_MENU, OLD_GRAPHICS_START + 57, 1);
; 1315 : 			else
; 1316 : #endif
; 1317 : 				StockDispBuffer(((WINDOW_DISP*)pAISettingWnd->pYobi)->mx, ((WINDOW_DISP*)pAISettingWnd->pYobi)->my, DISP_PRIO_MENU, 35225, 1);

  0086e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pAISettingWnd@@3PAUaction@@A ; pAISettingWnd
  00873	53		 push	 ebx
  00874	57		 push	 edi
  00875	6a 01		 push	 1
  00877	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0087a	68 99 89 00 00	 push	 35225			; 00008999H
  0087f	6a 68		 push	 104			; 00000068H
  00881	ff 70 18	 push	 DWORD PTR [eax+24]
  00884	ff 70 14	 push	 DWORD PTR [eax+20]
  00887	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 1318 : #endif
; 1319 : 			btnId[0] = StockDispBuffer(x + 207, y + 152, DISP_PRIO_IME3, 26262 + btnState[0], 2);

  0088c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA
  00891	05 96 66 00 00	 add	 eax, 26262		; 00006696H
  00896	6a 02		 push	 2
  00898	50		 push	 eax
  00899	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  0089e	05 98 00 00 00	 add	 eax, 152		; 00000098H
  008a3	6a 69		 push	 105			; 00000069H
  008a5	50		 push	 eax
  008a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  008ab	05 cf 00 00 00	 add	 eax, 207		; 000000cfH
  008b0	50		 push	 eax
  008b1	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  008b6	a3 00 00 00 00	 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA, eax

; 1320 : 			btnId[1] = StockDispBuffer(x + 207, y + 152, DISP_PRIO_IME3, 26264 + btnState[1], 2);

  008bb	a1 04 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+4
  008c0	05 98 66 00 00	 add	 eax, 26264		; 00006698H
  008c5	6a 02		 push	 2
  008c7	50		 push	 eax
  008c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  008cd	05 98 00 00 00	 add	 eax, 152		; 00000098H
  008d2	6a 69		 push	 105			; 00000069H
  008d4	50		 push	 eax
  008d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  008da	05 cf 00 00 00	 add	 eax, 207		; 000000cfH
  008df	50		 push	 eax
  008e0	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  008e5	83 c4 3c	 add	 esp, 60			; 0000003cH
  008e8	a3 04 00 00 00	 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+4, eax
  008ed	33 f6		 xor	 esi, esi
  008ef	33 ff		 xor	 edi, edi
$LL13@AI_Setting:

; 1321 : 			for (int i = 0; i < 3; i++) {
; 1322 : 				btnId[2 + i * 2] = StockDispBuffer(x + u_offx[i], y + 92 + 105, DISP_PRIO_IME3, 26064 + btnState[2 + i * 2], 2);

  008f1	8b 86 08 00 00
	00		 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+8]
  008f7	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  008fc	6a 02		 push	 2
  008fe	50		 push	 eax
  008ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00904	05 c5 00 00 00	 add	 eax, 197		; 000000c5H
  00909	6a 69		 push	 105			; 00000069H
  0090b	50		 push	 eax
  0090c	8b 87 00 00 00
	00		 mov	 eax, DWORD PTR ?u_offx@?1??AI_SettingProc@@YAHXZ@4PAHA[edi]
  00912	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00918	50		 push	 eax
  00919	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0091e	89 86 08 00 00
	00		 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+8], eax

; 1323 : 				btnId[3 + i * 2] = StockDispBuffer(x + d_offx[i], y + 107 + 106, DISP_PRIO_IME3, 26066 + btnState[3 + i * 2], 2);

  00924	8b 86 0c 00 00
	00		 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+12]
  0092a	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  0092f	6a 02		 push	 2
  00931	50		 push	 eax
  00932	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00937	05 d5 00 00 00	 add	 eax, 213		; 000000d5H
  0093c	6a 69		 push	 105			; 00000069H
  0093e	50		 push	 eax
  0093f	8b 87 00 00 00
	00		 mov	 eax, DWORD PTR ?d_offx@?1??AI_SettingProc@@YAHXZ@4PAHA[edi]
  00945	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  0094b	50		 push	 eax
  0094c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00951	83 c7 04	 add	 edi, 4
  00954	89 86 0c 00 00
	00		 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+12], eax
  0095a	83 c4 28	 add	 esp, 40			; 00000028H
  0095d	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  00960	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  00963	7c 8c		 jl	 SHORT $LL13@AI_Setting

; 1324 : 			}
; 1325 : 			btnId[8] = StockDispBuffer(x + u_offx[2], y + 128 + 105, DISP_PRIO_IME3, 26064 + btnState[8], 2);

  00965	a1 20 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+32
  0096a	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  0096f	6a 02		 push	 2
  00971	50		 push	 eax
  00972	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00977	05 e9 00 00 00	 add	 eax, 233		; 000000e9H
  0097c	6a 69		 push	 105			; 00000069H
  0097e	50		 push	 eax
  0097f	a1 08 00 00 00	 mov	 eax, DWORD PTR ?u_offx@?1??AI_SettingProc@@YAHXZ@4PAHA+8
  00984	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  0098a	50		 push	 eax
  0098b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00990	a3 20 00 00 00	 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+32, eax

; 1326 : 			btnId[9] = StockDispBuffer(x + d_offx[2], y + 143 + 106, DISP_PRIO_IME3, 26066 + btnState[9], 2);

  00995	a1 24 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+36
  0099a	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  0099f	6a 02		 push	 2
  009a1	50		 push	 eax
  009a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  009a7	05 f9 00 00 00	 add	 eax, 249		; 000000f9H
  009ac	6a 69		 push	 105			; 00000069H
  009ae	50		 push	 eax
  009af	a1 08 00 00 00	 mov	 eax, DWORD PTR ?d_offx@?1??AI_SettingProc@@YAHXZ@4PAHA+8
  009b4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  009ba	50		 push	 eax
  009bb	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  009c0	83 c4 28	 add	 esp, 40			; 00000028H
  009c3	a3 24 00 00 00	 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+36, eax
  009c8	33 f6		 xor	 esi, esi
  009ca	33 ff		 xor	 edi, edi
  009cc	0f 1f 40 00	 npad	 4
$LL16@AI_Setting:

; 1327 : 			for (int i = 0; i < 2; i++) {
; 1328 : 				btnId[10 + i * 2] = StockDispBuffer(x + u_offx[i], y + 164 + 105, DISP_PRIO_IME3, 26064 + btnState[10 + i * 2], 2);

  009d0	8b 86 28 00 00
	00		 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+40]
  009d6	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  009db	6a 02		 push	 2
  009dd	50		 push	 eax
  009de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  009e3	05 0d 01 00 00	 add	 eax, 269		; 0000010dH
  009e8	6a 69		 push	 105			; 00000069H
  009ea	50		 push	 eax
  009eb	8b 87 00 00 00
	00		 mov	 eax, DWORD PTR ?u_offx@?1??AI_SettingProc@@YAHXZ@4PAHA[edi]
  009f1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  009f7	50		 push	 eax
  009f8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  009fd	89 86 28 00 00
	00		 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+40], eax

; 1329 : 				btnId[11 + i * 2] = StockDispBuffer(x + d_offx[i], y + 179 + 106, DISP_PRIO_IME3, 26066 + btnState[11 + i * 2], 2);

  00a03	8b 86 2c 00 00
	00		 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+44]
  00a09	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  00a0e	6a 02		 push	 2
  00a10	50		 push	 eax
  00a11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00a16	05 1d 01 00 00	 add	 eax, 285		; 0000011dH
  00a1b	6a 69		 push	 105			; 00000069H
  00a1d	50		 push	 eax
  00a1e	8b 87 00 00 00
	00		 mov	 eax, DWORD PTR ?d_offx@?1??AI_SettingProc@@YAHXZ@4PAHA[edi]
  00a24	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00a2a	50		 push	 eax
  00a2b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00a30	83 c7 04	 add	 edi, 4
  00a33	89 86 2c 00 00
	00		 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+44], eax
  00a39	83 c4 28	 add	 esp, 40			; 00000028H
  00a3c	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  00a3f	83 ff 08	 cmp	 edi, 8
  00a42	7c 8c		 jl	 SHORT $LL16@AI_Setting

; 1330 : 			}
; 1331 : 			for (int i = 0; i < 2; i++) {

  00a44	33 f6		 xor	 esi, esi
  00a46	33 ff		 xor	 edi, edi
  00a48	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL19@AI_Setting:

; 1332 : 				btnId[14 + i * 2] = StockDispBuffer(x + u_offx[i], y + 200 + 105, DISP_PRIO_IME3, 26064 + btnState[14 + i * 2], 2);

  00a50	8b 86 38 00 00
	00		 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+56]
  00a56	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  00a5b	6a 02		 push	 2
  00a5d	50		 push	 eax
  00a5e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00a63	05 31 01 00 00	 add	 eax, 305		; 00000131H
  00a68	6a 69		 push	 105			; 00000069H
  00a6a	50		 push	 eax
  00a6b	8b 87 00 00 00
	00		 mov	 eax, DWORD PTR ?u_offx@?1??AI_SettingProc@@YAHXZ@4PAHA[edi]
  00a71	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00a77	50		 push	 eax
  00a78	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00a7d	89 86 38 00 00
	00		 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+56], eax

; 1333 : 				btnId[15 + i * 2] = StockDispBuffer(x + d_offx[i], y + 215 + 106, DISP_PRIO_IME3, 26066 + btnState[15 + i * 2], 2);

  00a83	8b 86 3c 00 00
	00		 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+60]
  00a89	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  00a8e	6a 02		 push	 2
  00a90	50		 push	 eax
  00a91	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00a96	05 41 01 00 00	 add	 eax, 321		; 00000141H
  00a9b	6a 69		 push	 105			; 00000069H
  00a9d	50		 push	 eax
  00a9e	8b 87 00 00 00
	00		 mov	 eax, DWORD PTR ?d_offx@?1??AI_SettingProc@@YAHXZ@4PAHA[edi]
  00aa4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00aaa	50		 push	 eax
  00aab	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00ab0	83 c7 04	 add	 edi, 4
  00ab3	89 86 3c 00 00
	00		 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+60], eax
  00ab9	83 c4 28	 add	 esp, 40			; 00000028H
  00abc	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  00abf	83 ff 08	 cmp	 edi, 8
  00ac2	7c 8c		 jl	 SHORT $LL19@AI_Setting

; 1334 : 			}
; 1335 : #ifdef _ATTACK_AI
; 1336 : 			for (int i = 0; i < 2; i++) {

  00ac4	33 f6		 xor	 esi, esi
  00ac6	33 ff		 xor	 edi, edi
  00ac8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL22@AI_Setting:

; 1337 : 				btnId[18 + i * 2] = StockDispBuffer(x + u_offx[i], y + 236 + 105, DISP_PRIO_IME3, 26064 + btnState[18 + i * 2], 2);

  00ad0	8b 86 48 00 00
	00		 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+72]
  00ad6	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  00adb	6a 02		 push	 2
  00add	50		 push	 eax
  00ade	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00ae3	05 55 01 00 00	 add	 eax, 341		; 00000155H
  00ae8	6a 69		 push	 105			; 00000069H
  00aea	50		 push	 eax
  00aeb	8b 87 00 00 00
	00		 mov	 eax, DWORD PTR ?u_offx@?1??AI_SettingProc@@YAHXZ@4PAHA[edi]
  00af1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00af7	50		 push	 eax
  00af8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00afd	89 86 48 00 00
	00		 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+72], eax

; 1338 : 				btnId[19 + i * 2] = StockDispBuffer(x + d_offx[i], y + 251 + 106, DISP_PRIO_IME3, 26066 + btnState[19 + i * 2], 2);

  00b03	8b 86 4c 00 00
	00		 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+76]
  00b09	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  00b0e	6a 02		 push	 2
  00b10	50		 push	 eax
  00b11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00b16	05 65 01 00 00	 add	 eax, 357		; 00000165H
  00b1b	6a 69		 push	 105			; 00000069H
  00b1d	50		 push	 eax
  00b1e	8b 87 00 00 00
	00		 mov	 eax, DWORD PTR ?d_offx@?1??AI_SettingProc@@YAHXZ@4PAHA[edi]
  00b24	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00b2a	50		 push	 eax
  00b2b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00b30	83 c7 04	 add	 edi, 4
  00b33	89 86 4c 00 00
	00		 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA[esi+76], eax
  00b39	83 c4 28	 add	 esp, 40			; 00000028H
  00b3c	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  00b3f	83 ff 08	 cmp	 edi, 8
  00b42	7c 8c		 jl	 SHORT $LL22@AI_Setting

; 1339 : 			}
; 1340 : 			btnId[22] = StockDispBuffer(x + u_offx[0], y + 128 + 105, DISP_PRIO_IME3, 26064 + btnState[22], 2);

  00b44	a1 58 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+88
  00b49	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  00b4e	6a 02		 push	 2
  00b50	50		 push	 eax
  00b51	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00b56	05 e9 00 00 00	 add	 eax, 233		; 000000e9H
  00b5b	6a 69		 push	 105			; 00000069H
  00b5d	50		 push	 eax
  00b5e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?u_offx@?1??AI_SettingProc@@YAHXZ@4PAHA
  00b63	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00b69	50		 push	 eax
  00b6a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00b6f	a3 58 00 00 00	 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+88, eax

; 1341 : 			btnId[23] = StockDispBuffer(x + d_offx[0], y + 143 + 106, DISP_PRIO_IME3, 26066 + btnState[23], 2);

  00b74	a1 5c 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??AI_SettingProc@@YAHXZ@4PAHA+92
  00b79	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  00b7e	6a 02		 push	 2
  00b80	50		 push	 eax
  00b81	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00b86	05 f9 00 00 00	 add	 eax, 249		; 000000f9H
  00b8b	6a 69		 push	 105			; 00000069H
  00b8d	50		 push	 eax
  00b8e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d_offx@?1??AI_SettingProc@@YAHXZ@4PAHA
  00b93	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00b99	50		 push	 eax
  00b9a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 1342 : #endif
; 1343 : #ifdef _AI_OTHER
; 1344 : 			StockFontBuffer(x + 322, y + 173, FONT_PRIO_FRONT, FONT_PAL_WHITE, "ê¸°íê¸°ë¥", 0);

  00b9f	6a 00		 push	 0
  00ba1	a3 5c 00 00 00	 mov	 DWORD PTR ?btnId@?1??AI_SettingProc@@YAHXZ@4PAHA+92, eax
  00ba6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00bab	68 00 00 00 00	 push	 OFFSET ??_C@_08GGBOKOHL@?$LB?b?E?$LI?$LB?b?$LE?I@
  00bb0	6a 00		 push	 0
  00bb2	05 ad 00 00 00	 add	 eax, 173		; 000000adH
  00bb7	6a 01		 push	 1
  00bb9	50		 push	 eax
  00bba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00bbf	05 42 01 00 00	 add	 eax, 322		; 00000142H
  00bc4	50		 push	 eax
  00bc5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00bca	83 c4 40	 add	 esp, 64			; 00000040H

; 1345 : #endif
; 1346 : 			char limit[8];
; 1347 : 			int dy = 102;

  00bcd	bb 66 00 00 00	 mov	 ebx, 102		; 00000066H

; 1348 : #ifndef _ATTACK_AI
; 1349 : 			for (int i = 0; i < 4; i++, dy += 36) {
; 1350 : #else
; 1351 : 			for (int i = 0; i < 5; i++, dy += 36) {

  00bd2	33 ff		 xor	 edi, edi
$LL25@AI_Setting:

; 1352 : #endif
; 1353 : 				str = MethodName;

  00bd4	be 00 00 00 00	 mov	 esi, OFFSET ?MethodName@?1??AI_SettingProc@@YAHXZ@4PADA

; 1354 : #ifdef _ATTACK_AI
; 1355 : 				if (i == 4) {

  00bd9	83 ff 04	 cmp	 edi, 4
  00bdc	75 2e		 jne	 SHORT $LN106@AI_Setting

; 1356 : 					if (MAX_PROFESSION_SKILL > AI_method[i] && AI_method[i] >= 0) str = profession_skill[AI_method[i]].name;

  00bde	a1 10 00 00 00	 mov	 eax, DWORD PTR ?AI_method@@3PAHA+16
  00be3	83 f8 19	 cmp	 eax, 25			; 00000019H
  00be6	77 11		 ja	 SHORT $LN108@AI_Setting
  00be8	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00beb	c1 e6 06	 shl	 esi, 6
  00bee	81 c6 08 00 00
	00		 add	 esi, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+8
  00bf4	e9 a0 00 00 00	 jmp	 $LN123@AI_Setting
$LN108@AI_Setting:

; 1357 : 					else if (AI_method[i] == MAX_PROFESSION_SKILL)

  00bf9	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00bfc	0f 85 97 00 00
	00		 jne	 $LN123@AI_Setting

; 1358 : 						str = "ì¼ë°ê³µê²©";

  00c02	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_08LLCHMLBO@?$MA?O?$LJ?$NN?$LA?x?$LA?$NN@

; 1359 : 				}

  00c07	e9 8d 00 00 00	 jmp	 $LN123@AI_Setting
$LN106@AI_Setting:

; 1360 : 				else if (i == 1) {

  00c0c	83 ff 01	 cmp	 edi, 1
  00c0f	75 2c		 jne	 SHORT $LN111@AI_Setting

; 1361 : 					if (g_bUsePS && AI_method[1] != -1) str = profession_skill[g_iPSindex].name;

  00c11	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bUsePS@@3_NA, 0 ; g_bUsePS
  00c18	74 1c		 je	 SHORT $LN113@AI_Setting
  00c1a	83 3d 04 00 00
	00 ff		 cmp	 DWORD PTR ?AI_method@@3PAHA+4, -1
  00c21	74 13		 je	 SHORT $LN113@AI_Setting
  00c23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iPSindex@@3HA ; g_iPSindex
  00c28	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00c2b	c1 e6 06	 shl	 esi, 6
  00c2e	81 c6 08 00 00
	00		 add	 esi, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+8
  00c34	eb 63		 jmp	 SHORT $LN123@AI_Setting
$LN113@AI_Setting:

; 1362 : 					else str = "ìíì í";

  00c36	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_08OHKEAHAF@?$LM?R?G?$LA?$LM?$LB?E?C@

; 1363 : 				}

  00c3b	eb 5c		 jmp	 SHORT $LN123@AI_Setting
$LN111@AI_Setting:

; 1364 : 				else
; 1365 : #endif
; 1366 : #ifdef _AI_NEW_FIRST
; 1367 : 					if (i == 2) {

  00c3d	83 ff 02	 cmp	 edi, 2
  00c40	75 33		 jne	 SHORT $LN115@AI_Setting

; 1368 : 						if (bFirstFlag) {

  00c42	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bFirstFlag@@3_NA, 0 ; bFirstFlag
  00c49	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_method@@3PAHA[edi*4]
  00c50	74 13		 je	 SHORT $LN117@AI_Setting

; 1369 : 							if (MAX_PROFESSION_SKILL > AI_method[i] && AI_method[i] >= 0) str = profession_skill[AI_method[i]].name;

  00c52	83 f8 19	 cmp	 eax, 25			; 00000019H
  00c55	77 42		 ja	 SHORT $LN123@AI_Setting
  00c57	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00c5a	c1 e6 06	 shl	 esi, 6
  00c5d	81 c6 08 00 00
	00		 add	 esi, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+8

; 1370 : 						}

  00c63	eb 34		 jmp	 SHORT $LN123@AI_Setting
$LN117@AI_Setting:

; 1371 : 						else if (MAX_MAGIC > AI_method[i] && AI_method[i] >= 0) str = magic[AI_method[i]].name;

  00c65	83 f8 08	 cmp	 eax, 8
  00c68	77 2f		 ja	 SHORT $LN123@AI_Setting
  00c6a	6b f0 70	 imul	 esi, eax, 112
  00c6d	81 c6 0e 00 00
	00		 add	 esi, OFFSET ?magic@@3PAUMAGIC@@A+14

; 1372 : 					}

  00c73	eb 24		 jmp	 SHORT $LN123@AI_Setting
$LN115@AI_Setting:

; 1373 : 					else
; 1374 : #endif
; 1375 : 					{
; 1376 : 						if (MAX_MAGIC > AI_method[i] && AI_method[i] >= 0)

  00c75	8b 0c bd 00 00
	00 00		 mov	 ecx, DWORD PTR ?AI_method@@3PAHA[edi*4]
  00c7c	83 f9 08	 cmp	 ecx, 8
  00c7f	77 0b		 ja	 SHORT $LN171@AI_Setting

; 1377 : 							str = magic[AI_method[i]].name;

  00c81	6b f1 70	 imul	 esi, ecx, 112
  00c84	81 c6 0e 00 00
	00		 add	 esi, OFFSET ?magic@@3PAUMAGIC@@A+14
  00c8a	eb 0d		 jmp	 SHORT $LN123@AI_Setting
$LN171@AI_Setting:

; 1378 : 						else if (AI_method[i] == MAX_MAGIC)

  00c8c	83 f9 09	 cmp	 ecx, 9
  00c8f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08OHKEAHAF@?$LM?R?G?$LA?$LM?$LB?E?C@
  00c94	0f 45 c6	 cmovne	 eax, esi
  00c97	8b f0		 mov	 esi, eax
$LN123@AI_Setting:

; 1379 : 							str = "ìíì í";
; 1380 : 					}
; 1381 : 				StockFontBuffer(x + 85, y + dy, FONT_PRIO_FRONT, FONT_PAL_YELLOW, str, 0);

  00c99	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00c9e	6a 00		 push	 0
  00ca0	56		 push	 esi
  00ca1	6a 04		 push	 4
  00ca3	03 c3		 add	 eax, ebx
  00ca5	6a 01		 push	 1
  00ca7	50		 push	 eax
  00ca8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00cad	83 c0 55	 add	 eax, 85			; 00000055H
  00cb0	50		 push	 eax
  00cb1	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00cb6	83 c4 18	 add	 esp, 24			; 00000018H

; 1382 : 				limit[0] = 0;

  00cb9	c6 45 f4 00	 mov	 BYTE PTR _limit$1[ebp], 0

; 1383 : 				if (str != MethodName) {

  00cbd	81 fe 00 00 00
	00		 cmp	 esi, OFFSET ?MethodName@?1??AI_SettingProc@@YAHXZ@4PADA
  00cc3	0f 84 9a 00 00
	00		 je	 $LN124@AI_Setting

; 1384 : 					switch (AI_target[i]) {

  00cc9	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_target@@3PAHA[edi*4]
  00cd0	48		 dec	 eax
  00cd1	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00cd4	77 54		 ja	 SHORT $LN137@AI_Setting
  00cd6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN182@AI_Setting[eax*4]
$LN125@AI_Setting:

; 1385 : 					case TARGET_MYSELF:
; 1386 : 						str = "ìì ";

  00cdd	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04OCCKPHIM@?$MA?Z?$LN?E@

; 1387 : 						break;

  00ce2	eb 4b		 jmp	 SHORT $LN26@AI_Setting
$LN126@AI_Setting:

; 1388 : 					case TARGET_MYPET:
; 1389 : 						str = "íí¸";

  00ce4	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04KDDDLIGD@?F?d?F?$KO@

; 1390 : 						break;

  00ce9	eb 44		 jmp	 SHORT $LN26@AI_Setting
$LN127@AI_Setting:

; 1425 : 						break;
; 1426 : 					}
; 1427 : 					itoa(AI_limit[i], limit, 10);

  00ceb	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_08OGPGECIA@?$LO?F?$LB?$LK?$MA?$PM?C?$LM@
  00cf0	eb 3d		 jmp	 SHORT $LN26@AI_Setting
$LN128@AI_Setting:

; 1391 : 					case TARGET_MYSIDE:
; 1392 : 						str = "ìêµ°ì ì²´";
; 1393 : 						break;
; 1394 : 					case TARGET_OTHERONE:
; 1395 : 						str = "ìë";

  00cf2	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04LFMEPEEF@?$LL?s?$LE?k@

; 1396 : 						break;

  00cf7	eb 36		 jmp	 SHORT $LN26@AI_Setting
$LN130@AI_Setting:

; 1397 : 					case TARGET_OTHERSIDE:
; 1398 : 						str = "ìêµ°ì ì²´";
; 1399 : 						break;
; 1400 : 					case TARGET_ALL:
; 1401 : 						str = "ì ì²´";

  00cf9	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04MHOBIAIL@?$MA?$PM?C?$LM@

; 1402 : 						break;

  00cfe	eb 2f		 jmp	 SHORT $LN26@AI_Setting
$LN131@AI_Setting:

; 1403 : 					case TARGET_1:
; 1404 : 						str = "íí°â ";

  00d00	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_06LAICFDDI@?F?D?F?$LM?$KI?g@

; 1405 : 						break;

  00d05	eb 28		 jmp	 SHORT $LN26@AI_Setting
$LN132@AI_Setting:

; 1406 : 					case TARGET_2:
; 1407 : 						str = "íí°â¡";

  00d07	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_06DHBKEPPH@?F?D?F?$LM?$KI?h@

; 1408 : 						break;

  00d0c	eb 21		 jmp	 SHORT $LN26@AI_Setting
$LN133@AI_Setting:

; 1409 : 					case TARGET_3:
; 1410 : 						str = "íí°â¢";

  00d0e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_06COABHOLG@?F?D?F?$LM?$KI?i@

; 1411 : 						break;

  00d13	eb 1a		 jmp	 SHORT $LN26@AI_Setting
$LN134@AI_Setting:

; 1412 : 					case TARGET_4:
; 1413 : 						str = "íí°â£";

  00d15	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_06FCMCNHF@?F?D?F?$LM?$KI?j@

; 1414 : 						break;

  00d1a	eb 13		 jmp	 SHORT $LN26@AI_Setting
$LN135@AI_Setting:

; 1415 : 					case TARGET_5:
; 1416 : 						str = "íí°â¤";

  00d1c	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_06BMDHBMDE@?F?D?F?$LM?$KI?k@

; 1417 : 						break;

  00d21	eb 0c		 jmp	 SHORT $LN26@AI_Setting
$LN136@AI_Setting:

; 1418 : #ifdef __ATTACK_MAGIC
; 1419 : 					case TARGET_ONE_ROW:
; 1420 : 						str = "ì ì ì²´";

  00d23	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_06CPOHNOLJ@?$MA?$PL?$MA?$PM?C?$LM@

; 1421 : 						break;

  00d28	eb 05		 jmp	 SHORT $LN26@AI_Setting
$LN137@AI_Setting:

; 1422 : #endif
; 1423 : 					default:
; 1424 : 						str = "ì¤ë¥ë¥¼ ì¬ì¤ì íì­ìì¤.";

  00d2a	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BH@KAEALDCD@?$LP?$MA?$LH?y?$LI?$KG?5?$MA?g?$LM?$LD?A?$KE?G?O?$LN?J?$LN?C?$LP?$MA?4@
$LN26@AI_Setting:

; 1425 : 						break;
; 1426 : 					}
; 1427 : 					itoa(AI_limit[i], limit, 10);

  00d2f	6a 0a		 push	 10			; 0000000aH
  00d31	8d 45 f4	 lea	 eax, DWORD PTR _limit$1[ebp]
  00d34	50		 push	 eax
  00d35	ff 34 bd 00 00
	00 00		 push	 DWORD PTR ?AI_limit@@3PAHA[edi*4]
  00d3c	e8 00 00 00 00	 call	 _itoa

; 1428 : 					strcat(limit, "ï¼");

  00d41	8d 4d f4	 lea	 ecx, DWORD PTR _limit$1[ebp]
  00d44	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d47	49		 dec	 ecx
$LL183@AI_Setting:
  00d48	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00d4b	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00d4e	84 c0		 test	 al, al
  00d50	75 f6		 jne	 SHORT $LL183@AI_Setting
  00d52	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02IPAINHI@?$KD?$KF@
  00d58	66 89 01	 mov	 WORD PTR [ecx], ax
  00d5b	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_02IPAINHI@?$KD?$KF@+2
  00d60	88 41 02	 mov	 BYTE PTR [ecx+2], al
$LN124@AI_Setting:

; 1429 : 				}
; 1430 : 				StockFontBuffer(x + 236, y + dy, FONT_PRIO_FRONT, FONT_PAL_YELLOW, str, 0);

  00d63	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00d68	6a 00		 push	 0
  00d6a	56		 push	 esi
  00d6b	6a 04		 push	 4
  00d6d	03 c3		 add	 eax, ebx
  00d6f	6a 01		 push	 1
  00d71	50		 push	 eax
  00d72	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00d77	05 ec 00 00 00	 add	 eax, 236		; 000000ecH
  00d7c	50		 push	 eax
  00d7d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00d82	83 c4 18	 add	 esp, 24			; 00000018H

; 1431 : 				if (i < 2)

  00d85	83 ff 02	 cmp	 edi, 2
  00d88	73 25		 jae	 SHORT $LN23@AI_Setting

; 1432 : 					StockFontBuffer(x + 336, y + dy, FONT_PRIO_FRONT, FONT_PAL_YELLOW, limit, 0);

  00d8a	6a 00		 push	 0
  00d8c	8d 45 f4	 lea	 eax, DWORD PTR _limit$1[ebp]
  00d8f	50		 push	 eax
  00d90	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??AI_SettingProc@@YAHXZ@4HA
  00d95	6a 04		 push	 4
  00d97	03 c3		 add	 eax, ebx
  00d99	6a 01		 push	 1
  00d9b	50		 push	 eax
  00d9c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??AI_SettingProc@@YAHXZ@4HA
  00da1	05 50 01 00 00	 add	 eax, 336		; 00000150H
  00da6	50		 push	 eax
  00da7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00dac	83 c4 18	 add	 esp, 24			; 00000018H
$LN23@AI_Setting:

; 1348 : #ifndef _ATTACK_AI
; 1349 : 			for (int i = 0; i < 4; i++, dy += 36) {
; 1350 : #else
; 1351 : 			for (int i = 0; i < 5; i++, dy += 36) {

  00daf	47		 inc	 edi
  00db0	83 c3 24	 add	 ebx, 36			; 00000024H
  00db3	83 ff 05	 cmp	 edi, 5
  00db6	0f 8c 18 fe ff
	ff		 jl	 $LL25@AI_Setting
  00dbc	5f		 pop	 edi
  00dbd	5b		 pop	 ebx
$LN24@AI_Setting:

; 1437 : 	}

  00dbe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00dc1	33 c0		 xor	 eax, eax
  00dc3	33 cd		 xor	 ecx, ebp
  00dc5	5e		 pop	 esi
  00dc6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00dcb	8b e5		 mov	 esp, ebp
  00dcd	5d		 pop	 ebp
  00dce	c3		 ret	 0
  00dcf	90		 npad	 1
$LN182@AI_Setting:
  00dd0	00 00 00 00	 DD	 $LN125@AI_Setting
  00dd4	00 00 00 00	 DD	 $LN126@AI_Setting
  00dd8	00 00 00 00	 DD	 $LN127@AI_Setting
  00ddc	00 00 00 00	 DD	 $LN128@AI_Setting
  00de0	00 00 00 00	 DD	 $LN127@AI_Setting
  00de4	00 00 00 00	 DD	 $LN130@AI_Setting
  00de8	00 00 00 00	 DD	 $LN131@AI_Setting
  00dec	00 00 00 00	 DD	 $LN132@AI_Setting
  00df0	00 00 00 00	 DD	 $LN133@AI_Setting
  00df4	00 00 00 00	 DD	 $LN134@AI_Setting
  00df8	00 00 00 00	 DD	 $LN135@AI_Setting
  00dfc	00 00 00 00	 DD	 $LN136@AI_Setting
?AI_SettingProc@@YAHXZ ENDP				; AI_SettingProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetDownLimit@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetDownLimit@@YAXH@Z PROC				; AI_SetDownLimit, COMDAT

; 1013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1014 : 	AI_limit[which] -= 5;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _which$[ebp]

; 1015 : 	if (AI_limit[which] < 0)

  00006	ba 00 00 00 00	 mov	 edx, 0
  0000b	83 04 8d 00 00
	00 00 fb	 add	 DWORD PTR ?AI_limit@@3PAHA[ecx*4], -5 ; fffffffbH
  00013	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_limit@@3PAHA[ecx*4]
  0001a	0f 48 c2	 cmovs	 eax, edx
  0001d	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_limit@@3PAHA[ecx*4], eax

; 1016 : 		AI_limit[which] = 0;
; 1017 : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?AI_SetDownLimit@@YAXH@Z ENDP				; AI_SetDownLimit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetUpLimit@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetUpLimit@@YAXH@Z PROC				; AI_SetUpLimit, COMDAT

; 1006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1007 : 	AI_limit[which] += 5;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _which$[ebp]

; 1008 : 	if (AI_limit[which] > 100)

  00006	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  0000b	83 04 8d 00 00
	00 00 05	 add	 DWORD PTR ?AI_limit@@3PAHA[ecx*4], 5
  00013	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_limit@@3PAHA[ecx*4]
  0001a	3b c2		 cmp	 eax, edx
  0001c	0f 4f c2	 cmovg	 eax, edx
  0001f	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_limit@@3PAHA[ecx*4], eax

; 1009 : 		AI_limit[which] = 100;
; 1010 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?AI_SetUpLimit@@YAXH@Z ENDP				; AI_SetUpLimit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetDownResurrectMethod@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetDownResurrectMethod@@YAXH@Z PROC			; AI_SetDownResurrectMethod, COMDAT

; 990  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 991  : 	char* str;
; 992  : 	int method = AI_method[which];

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _which$[ebp]
  00007	57		 push	 edi
  00008	8b 3c 9d 00 00
	00 00		 mov	 edi, DWORD PTR ?AI_method@@3PAHA[ebx*4]
  0000f	c7 04 9d 00 00
	00 00 09 00 00
	00		 mov	 DWORD PTR ?AI_method@@3PAHA[ebx*4], 9

; 993  : 	if (method < 0)

  0001a	c7 04 9d 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ebx*4], 2
  00025	85 ff		 test	 edi, edi
  00027	79 07		 jns	 SHORT $LN5@AI_SetDown

; 994  : 		method = MAX_MAGIC;

  00029	bf 08 00 00 00	 mov	 edi, 8
  0002e	eb 05		 jmp	 SHORT $LN17@AI_SetDown
$LN5@AI_SetDown:

; 996  : 	AI_target[which] = TARGET_MYPET;
; 997  : 	for (int i = (method - 1); i >= 0; i--) {

  00030	83 c7 ff	 add	 edi, -1
  00033	78 4b		 js	 SHORT $LN18@AI_SetDown
$LN17@AI_SetDown:
  00035	56		 push	 esi

; 995  : 	AI_method[which] = MAX_MAGIC;

  00036	6b f7 70	 imul	 esi, edi, 112
  00039	81 c6 27 00 00
	00		 add	 esi, OFFSET ?magic@@3PAUMAGIC@@A+39
  0003f	90		 npad	 1
$LL4@AI_SetDown:

; 998  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "æ°ç»ç¶æ")) && strstr(str, "åå¤")) {

  00040	66 83 7e d9 00	 cmp	 WORD PTR [esi-39], 0
  00045	74 24		 je	 SHORT $LN2@AI_SetDown
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_04MFANEHND@?$DP?$DP?$DP?$DP@
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _strstr
  00052	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 998  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "æ°ç»ç¶æ")) && strstr(str, "åå¤")) {

  00055	85 c0		 test	 eax, eax
  00057	74 12		 je	 SHORT $LN2@AI_SetDown
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_03MNMCLLPK@?$PM?$NO?$DP@
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _strstr
  00064	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 998  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "æ°ç»ç¶æ")) && strstr(str, "åå¤")) {

  00067	85 c0		 test	 eax, eax
  00069	75 0d		 jne	 SHORT $LN13@AI_SetDown
$LN2@AI_SetDown:

; 996  : 	AI_target[which] = TARGET_MYPET;
; 997  : 	for (int i = (method - 1); i >= 0; i--) {

  0006b	83 ee 70	 sub	 esi, 112		; 00000070H
  0006e	83 ef 01	 sub	 edi, 1
  00071	79 cd		 jns	 SHORT $LL4@AI_SetDown

; 1000 : 			break;
; 1001 : 		}
; 1002 : 	}
; 1003 : }

  00073	5e		 pop	 esi
  00074	5f		 pop	 edi
  00075	5b		 pop	 ebx
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
$LN13@AI_SetDown:

; 999  : 			AI_method[which] = i;

  00078	89 3c 9d 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[ebx*4], edi
  0007f	5e		 pop	 esi
$LN18@AI_SetDown:

; 1000 : 			break;
; 1001 : 		}
; 1002 : 	}
; 1003 : }

  00080	5f		 pop	 edi
  00081	5b		 pop	 ebx
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?AI_SetDownResurrectMethod@@YAXH@Z ENDP			; AI_SetDownResurrectMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetUpResurrectMethod@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetUpResurrectMethod@@YAXH@Z PROC			; AI_SetUpResurrectMethod, COMDAT

; 974  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 975  : 	char* str;
; 976  : 	int method = AI_method[which] + 1;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _which$[ebp]
  00007	57		 push	 edi

; 977  : 	if (method > MAX_MAGIC)
; 978  : 		method = 0;
; 979  : 	AI_method[which] = MAX_MAGIC;

  00008	33 ff		 xor	 edi, edi
  0000a	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_method@@3PAHA[ebx*4]
  00011	40		 inc	 eax
  00012	c7 04 9d 00 00
	00 00 09 00 00
	00		 mov	 DWORD PTR ?AI_method@@3PAHA[ebx*4], 9
  0001d	83 f8 09	 cmp	 eax, 9

; 980  : 	AI_target[which] = TARGET_MYPET;

  00020	c7 04 9d 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ebx*4], 2
  0002b	0f 4e f8	 cmovle	 edi, eax

; 981  : 	for (int i = method; i < MAX_MAGIC; i++) {

  0002e	83 ff 09	 cmp	 edi, 9
  00031	7d 51		 jge	 SHORT $LN17@AI_SetUpRe

; 975  : 	char* str;
; 976  : 	int method = AI_method[which] + 1;

  00033	56		 push	 esi
  00034	6b f7 70	 imul	 esi, edi, 112
  00037	81 c6 27 00 00
	00		 add	 esi, OFFSET ?magic@@3PAUMAGIC@@A+39
  0003d	0f 1f 00	 npad	 3
$LL4@AI_SetUpRe:

; 982  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "æ°ç»ç¶æ")) && strstr(str, "åå¤")) {

  00040	66 83 7e d9 00	 cmp	 WORD PTR [esi-39], 0
  00045	74 24		 je	 SHORT $LN2@AI_SetUpRe
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_04MFANEHND@?$DP?$DP?$DP?$DP@
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _strstr
  00052	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 982  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "æ°ç»ç¶æ")) && strstr(str, "åå¤")) {

  00055	85 c0		 test	 eax, eax
  00057	74 12		 je	 SHORT $LN2@AI_SetUpRe
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_03MNMCLLPK@?$PM?$NO?$DP@
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _strstr
  00064	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 982  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "æ°ç»ç¶æ")) && strstr(str, "åå¤")) {

  00067	85 c0		 test	 eax, eax
  00069	75 11		 jne	 SHORT $LN13@AI_SetUpRe
$LN2@AI_SetUpRe:

; 981  : 	for (int i = method; i < MAX_MAGIC; i++) {

  0006b	83 c6 70	 add	 esi, 112		; 00000070H
  0006e	47		 inc	 edi
  0006f	81 fe 17 04 00
	00		 cmp	 esi, OFFSET ?magic@@3PAUMAGIC@@A+1047
  00075	7c c9		 jl	 SHORT $LL4@AI_SetUpRe

; 984  : 			break;
; 985  : 		}
; 986  : 	}
; 987  : }

  00077	5e		 pop	 esi
  00078	5f		 pop	 edi
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN13@AI_SetUpRe:

; 983  : 			AI_method[which] = i;

  0007c	89 3c 9d 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[ebx*4], edi
  00083	5e		 pop	 esi
$LN17@AI_SetUpRe:

; 984  : 			break;
; 985  : 		}
; 986  : 	}
; 987  : }

  00084	5f		 pop	 edi
  00085	5b		 pop	 ebx
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?AI_SetUpResurrectMethod@@YAXH@Z ENDP			; AI_SetUpResurrectMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetDownFirstMethod@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetDownFirstMethod@@YAXH@Z PROC			; AI_SetDownFirstMethod, COMDAT

; 926  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 927  : 	int method = AI_method[which];
; 928  : #ifndef _AI_NEW_FIRST
; 929  : 	if (method < 0)	method = MAX_MAGIC;
; 930  : 	AI_method[which] = -1;
; 931  : 	for (int i = (method - 1); i >= 0; i--) {
; 932  : 		if (magic[i].useFlag) {
; 933  : 			AI_method[which] = i;
; 934  : 			AI_SetMethod(magic[i].target, which);
; 935  : 			break;
; 936  : 		}
; 937  : 	}
; 938  : #else
; 939  : 	// é¦æ¬¡ç¨ç²¾çµ
; 940  : 	if (bFirstFlag == false) {

  00003	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bFirstFlag@@3_NA, 0 ; bFirstFlag
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _which$[ebp]
  0000e	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_method@@3PAHA[esi*4]
  00015	75 3d		 jne	 SHORT $LN5@AI_SetDown

; 941  : 		if (method < 0) {

  00017	85 c0		 test	 eax, eax
  00019	79 27		 jns	 SHORT $LN19@AI_SetDown

; 942  : 			if (pc.profession_class != 0) { // æèä¸

  0001b	83 3d 84 a1 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+41348, 0
  00022	74 4a		 je	 SHORT $LN8@AI_SetDown

; 943  : 				AI_method[which] = MAX_PROFESSION_SKILL;
; 944  : 				AI_SetUpAttackMethod(which);

  00024	56		 push	 esi
  00025	c7 04 b5 00 00
	00 00 1a 00 00
	00		 mov	 DWORD PTR ?AI_method@@3PAHA[esi*4], 26 ; 0000001aH
  00030	e8 00 00 00 00	 call	 ?AI_SetUpAttackMethod@@YAXH@Z ; AI_SetUpAttackMethod
  00035	83 c4 04	 add	 esp, 4

; 945  : 				// è®¾å®ä¸ºç¨æè½
; 946  : 				bFirstFlag = true;

  00038	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?bFirstFlag@@3_NA, 1 ; bFirstFlag
  0003f	5e		 pop	 esi

; 966  : 				break;
; 967  : 			}
; 968  : 		}
; 969  : 	}
; 970  : #endif
; 971  : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN19@AI_SetDown:

; 962  : 		for (int i = (method - 1); i >= 0; i--) {

  00042	83 c0 ff	 add	 eax, -1
  00045	c7 04 b5 00 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR ?AI_method@@3PAHA[esi*4], -1
  00050	78 61		 js	 SHORT $LN3@AI_SetDown
  00052	eb 2a		 jmp	 SHORT $LN20@AI_SetDown
$LN5@AI_SetDown:

; 947  : 				return;
; 948  : 			}
; 949  : 			else method = MAX_MAGIC;
; 950  : 		}
; 951  : 	}
; 952  : 	// é¦æ¬¡ç¨æè½
; 953  : 	else {
; 954  : 		AI_SetUpAttackMethod(which);

  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 ?AI_SetUpAttackMethod@@YAXH@Z ; AI_SetUpAttackMethod
  0005a	83 c4 04	 add	 esp, 4

; 955  : 		if (AI_method[which] == -1) {

  0005d	83 3c b5 00 00
	00 00 ff	 cmp	 DWORD PTR ?AI_method@@3PAHA[esi*4], -1
  00065	75 4c		 jne	 SHORT $LN3@AI_SetDown

; 956  : 			method = MAX_MAGIC;
; 957  : 			bFirstFlag = false;

  00067	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?bFirstFlag@@3_NA, 0 ; bFirstFlag
$LN8@AI_SetDown:

; 958  : 		}
; 959  : 	}
; 960  : 	if (bFirstFlag == false) {
; 961  : 		AI_method[which] = -1;

  0006e	b8 08 00 00 00	 mov	 eax, 8
  00073	c7 04 b5 00 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR ?AI_method@@3PAHA[esi*4], -1
$LN20@AI_SetDown:
  0007e	6b c8 70	 imul	 ecx, eax, 112
  00081	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?magic@@3PAUMAGIC@@A ; magic
$LL4@AI_SetDown:

; 963  : 			if (magic[i].useFlag) {

  00087	66 83 39 00	 cmp	 WORD PTR [ecx], 0
  0008b	75 0b		 jne	 SHORT $LN15@AI_SetDown

; 962  : 		for (int i = (method - 1); i >= 0; i--) {

  0008d	83 e9 70	 sub	 ecx, 112		; 00000070H
  00090	83 e8 01	 sub	 eax, 1
  00093	79 f2		 jns	 SHORT $LL4@AI_SetDown
  00095	5e		 pop	 esi

; 966  : 				break;
; 967  : 			}
; 968  : 		}
; 969  : 	}
; 970  : #endif
; 971  : }

  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
$LN15@AI_SetDown:

; 964  : 				AI_method[which] = i;

  00098	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[esi*4], eax

; 965  : 				AI_SetMethod(magic[i].target, which);

  0009f	6b c0 70	 imul	 eax, eax, 112
  000a2	56		 push	 esi
  000a3	0f bf 80 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[eax+10]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?AI_SetMethod@@YAXHH@Z	; AI_SetMethod
  000b0	83 c4 08	 add	 esp, 8
$LN3@AI_SetDown:
  000b3	5e		 pop	 esi

; 966  : 				break;
; 967  : 			}
; 968  : 		}
; 969  : 	}
; 970  : #endif
; 971  : }

  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
?AI_SetDownFirstMethod@@YAXH@Z ENDP			; AI_SetDownFirstMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetUpFirstMethod@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?bFirstFlag@@3_NA$1 = 11				; size = 1
?AI_SetUpFirstMethod@@YAXH@Z PROC			; AI_SetUpFirstMethod, COMDAT

; 871  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 872  : 	int method = AI_method[which] + 1;
; 873  : #ifndef _AI_NEW_FIRST
; 874  : 	if (method > MAX_MAGIC)	method = 0;
; 875  : 	AI_method[which] = -1;
; 876  : 	for (int i = method; i < MAX_MAGIC; i++) {
; 877  : 		if (magic[i].useFlag) {
; 878  : 			AI_method[which] = i;
; 879  : 			AI_SetMethod(magic[i].target, which);
; 880  : 			break;
; 881  : 		}
; 882  : 	}
; 883  : #else
; 884  : 	// é¦æ¬¡ç¨ç²¾çµ
; 885  : 	if (bFirstFlag == false) {

  00003	a0 00 00 00 00	 mov	 al, BYTE PTR ?bFirstFlag@@3_NA ; bFirstFlag
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _which$[ebp]
  0000e	88 45 0b	 mov	 BYTE PTR ?bFirstFlag@@3_NA$1[ebp], al
  00011	8b 1c bd 00 00
	00 00		 mov	 ebx, DWORD PTR ?AI_method@@3PAHA[edi*4]
  00018	43		 inc	 ebx
  00019	84 c0		 test	 al, al
  0001b	75 34		 jne	 SHORT $LN5@AI_SetUpFi

; 886  : 		if (method > MAX_MAGIC) {

  0001d	83 fb 09	 cmp	 ebx, 9
  00020	7e 4b		 jle	 SHORT $LN21@AI_SetUpFi

; 887  : 			if (pc.profession_class != 0) { // æèä¸

  00022	83 3d 84 a1 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+41348, 0
  00029	c7 04 bd 00 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR ?AI_method@@3PAHA[edi*4], -1
  00034	74 15		 je	 SHORT $LN8@AI_SetUpFi

; 888  : 				AI_method[which] = -1;
; 889  : 				AI_SetDownAttackMethod(which);

  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ?AI_SetDownAttackMethod@@YAXH@Z ; AI_SetDownAttackMethod
  0003c	83 c4 04	 add	 esp, 4

; 890  : 				// è®¾å®ä¸ºç¨æè½
; 891  : 				bFirstFlag = true;

  0003f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?bFirstFlag@@3_NA, 1 ; bFirstFlag
  00046	5f		 pop	 edi

; 922  : #endif
; 923  : }

  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN8@AI_SetUpFi:

; 892  : 				return;
; 893  : 			}
; 894  : 			else method = 0;

  0004b	33 db		 xor	 ebx, ebx
  0004d	33 f6		 xor	 esi, esi

; 895  : 		}
; 896  : 	}

  0004f	eb 2e		 jmp	 SHORT $LN23@AI_SetUpFi
$LN5@AI_SetUpFi:

; 897  : 	// é¦æ¬¡ç¨æè½
; 898  : 	else {
; 899  : 		if (method > MAX_PROFESSION_SKILL) {

  00051	83 fb 1a	 cmp	 ebx, 26			; 0000001aH
  00054	7e 07		 jle	 SHORT $LN10@AI_SetUpFi

; 900  : 			method = -1;

  00056	83 cb ff	 or	 ebx, -1

; 901  : 			// è®¾å®ä¸ºç¨ç²¾çµ
; 902  : 			bFirstFlag = false;

  00059	c6 45 0b 00	 mov	 BYTE PTR ?bFirstFlag@@3_NA$1[ebp], 0
$LN10@AI_SetUpFi:

; 903  : 		}
; 904  : 		AI_SetDownAttackMethod(which);

  0005d	57		 push	 edi
  0005e	e8 00 00 00 00	 call	 ?AI_SetDownAttackMethod@@YAXH@Z ; AI_SetDownAttackMethod

; 905  : 	}
; 906  : 	if (bFirstFlag == false) {

  00063	8a 45 0b	 mov	 al, BYTE PTR ?bFirstFlag@@3_NA$1[ebp]
  00066	83 c4 04	 add	 esp, 4
  00069	84 c0		 test	 al, al
  0006b	75 6d		 jne	 SHORT $LN13@AI_SetUpFi
$LN21@AI_SetUpFi:

; 907  : 		AI_method[which] = -1;

  0006d	c7 04 bd 00 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR ?AI_method@@3PAHA[edi*4], -1

; 908  : 		for (int i = method; i < MAX_MAGIC; i++) {

  00078	8b f3		 mov	 esi, ebx
  0007a	83 fb 09	 cmp	 ebx, 9
  0007d	7d 42		 jge	 SHORT $LN22@AI_SetUpFi
$LN23@AI_SetUpFi:

; 907  : 		AI_method[which] = -1;

  0007f	6b c3 70	 imul	 eax, ebx, 112
  00082	05 00 00 00 00	 add	 eax, OFFSET ?magic@@3PAUMAGIC@@A
$LL4@AI_SetUpFi:

; 909  : 			if (magic[i].useFlag) {

  00087	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0008b	75 14		 jne	 SHORT $LN17@AI_SetUpFi

; 908  : 		for (int i = method; i < MAX_MAGIC; i++) {

  0008d	83 c0 70	 add	 eax, 112		; 00000070H
  00090	46		 inc	 esi
  00091	3d f0 03 00 00	 cmp	 eax, OFFSET ?magic@@3PAUMAGIC@@A+1008
  00096	7c ef		 jl	 SHORT $LL4@AI_SetUpFi

; 909  : 			if (magic[i].useFlag) {

  00098	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?AI_method@@3PAHA[edi*4]
  0009f	eb 1b		 jmp	 SHORT $LN3@AI_SetUpFi
$LN17@AI_SetUpFi:

; 910  : 				AI_method[which] = i;
; 911  : 				AI_SetMethod(magic[i].target, which);

  000a1	6b c6 70	 imul	 eax, esi, 112
  000a4	57		 push	 edi
  000a5	89 34 bd 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[edi*4], esi
  000ac	0f bf 80 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[eax+10]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?AI_SetMethod@@YAXHH@Z	; AI_SetMethod
  000b9	83 c4 08	 add	 esp, 8
$LN3@AI_SetUpFi:

; 912  : 				break;
; 913  : 			}
; 914  : 		}
; 915  : 		if (AI_method[which] == -1 && pc.profession_class != 0) {

  000bc	83 fe ff	 cmp	 esi, -1
  000bf	75 16		 jne	 SHORT $LN25@AI_SetUpFi
$LN22@AI_SetUpFi:
  000c1	83 3d 84 a1 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+41348, 0
  000c8	74 0d		 je	 SHORT $LN25@AI_SetUpFi

; 916  : 			AI_SetDownAttackMethod(which);

  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 ?AI_SetDownAttackMethod@@YAXH@Z ; AI_SetDownAttackMethod
  000d0	83 c4 04	 add	 esp, 4

; 917  : 			// è®¾å®ä¸ºç¨æè½
; 918  : 			bFirstFlag = true;

  000d3	b0 01		 mov	 al, 1
  000d5	eb 03		 jmp	 SHORT $LN13@AI_SetUpFi
$LN25@AI_SetUpFi:

; 919  : 		}
; 920  : 	}
; 921  : 	if (AI_method[which] == -1) bFirstFlag = false;

  000d7	8a 45 0b	 mov	 al, BYTE PTR ?bFirstFlag@@3_NA$1[ebp]
$LN13@AI_SetUpFi:
  000da	33 c9		 xor	 ecx, ecx
  000dc	0f b6 c0	 movzx	 eax, al
  000df	83 3c bd 00 00
	00 00 ff	 cmp	 DWORD PTR ?AI_method@@3PAHA[edi*4], -1
  000e7	5f		 pop	 edi
  000e8	0f 44 c1	 cmove	 eax, ecx

; 922  : #endif
; 923  : }

  000eb	5e		 pop	 esi
  000ec	a2 00 00 00 00	 mov	 BYTE PTR ?bFirstFlag@@3_NA, al ; bFirstFlag
  000f1	5b		 pop	 ebx
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
?AI_SetUpFirstMethod@@YAXH@Z ENDP			; AI_SetUpFirstMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetDownCureMethod@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetDownCureMethod@@YAXH@Z PROC			; AI_SetDownCureMethod, COMDAT

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 846  : 	char* str;
; 847  : 	int method = AI_method[which];

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _which$[ebp]
  00007	57		 push	 edi
  00008	8b 3c 9d 00 00
	00 00		 mov	 edi, DWORD PTR ?AI_method@@3PAHA[ebx*4]
  0000f	c7 04 9d 00 00
	00 00 09 00 00
	00		 mov	 DWORD PTR ?AI_method@@3PAHA[ebx*4], 9

; 848  : 	if (method < 0)

  0001a	c7 04 9d 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ebx*4], 1
  00025	85 ff		 test	 edi, edi
  00027	79 07		 jns	 SHORT $LN5@AI_SetDown

; 849  : 		method = MAX_MAGIC;

  00029	bf 08 00 00 00	 mov	 edi, 8
  0002e	eb 05		 jmp	 SHORT $LN17@AI_SetDown
$LN5@AI_SetDown:

; 851  : 	AI_target[which] = TARGET_MYSELF;
; 852  : 	for (int i = (method - 1); i >= 0; i--) {

  00030	83 c7 ff	 add	 edi, -1
  00033	78 5f		 js	 SHORT $LN18@AI_SetDown
$LN17@AI_SetDown:
  00035	56		 push	 esi

; 850  : 	AI_method[which] = MAX_MAGIC;

  00036	6b f7 70	 imul	 esi, edi, 112
  00039	81 c6 27 00 00
	00		 add	 esi, OFFSET ?magic@@3PAUMAGIC@@A+39
  0003f	90		 npad	 1
$LL4@AI_SetDown:

; 853  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  00040	66 83 7e d9 00	 cmp	 WORD PTR [esi-39], 0
  00045	74 24		 je	 SHORT $LN2@AI_SetDown
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_06MPLPIMIC@?$LD?$LL?$LB?$LI?$LH?B@
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _strstr
  00052	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 853  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  00055	85 c0		 test	 eax, eax
  00057	74 12		 je	 SHORT $LN2@AI_SetDown
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _strstr
  00064	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 853  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  00067	85 c0		 test	 eax, eax
  00069	75 0d		 jne	 SHORT $LN13@AI_SetDown
$LN2@AI_SetDown:

; 851  : 	AI_target[which] = TARGET_MYSELF;
; 852  : 	for (int i = (method - 1); i >= 0; i--) {

  0006b	83 ee 70	 sub	 esi, 112		; 00000070H
  0006e	83 ef 01	 sub	 edi, 1
  00071	79 cd		 jns	 SHORT $LL4@AI_SetDown

; 856  : 			break;
; 857  : 		}
; 858  : 	}
; 859  : 	/*	if( i < 0){
; 860  : 			for( i = 0; i < MAX_ITEM; i++){
; 861  : 				if( pc.item[i].useFlag && (str=strstr( pc.item[i].memo, "èä¹å")) && strstr( str, "åå¤")){
; 862  : 					AI_method[which] = MAX_MAGIC;
; 863  : 					AI_target[which] &= 1;
; 864  : 					break;
; 865  : 				}
; 866  : 			}
; 867  : 		}*/
; 868  : }

  00073	5e		 pop	 esi
  00074	5f		 pop	 edi
  00075	5b		 pop	 ebx
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
$LN13@AI_SetDown:

; 854  : 			AI_method[which] = i;
; 855  : 			AI_SetMethod(magic[i].target, which);

  00078	6b c7 70	 imul	 eax, edi, 112
  0007b	53		 push	 ebx
  0007c	89 3c 9d 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[ebx*4], edi
  00083	0f bf 80 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[eax+10]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?AI_SetMethod@@YAXHH@Z	; AI_SetMethod
  00090	83 c4 08	 add	 esp, 8
  00093	5e		 pop	 esi
$LN18@AI_SetDown:

; 856  : 			break;
; 857  : 		}
; 858  : 	}
; 859  : 	/*	if( i < 0){
; 860  : 			for( i = 0; i < MAX_ITEM; i++){
; 861  : 				if( pc.item[i].useFlag && (str=strstr( pc.item[i].memo, "èä¹å")) && strstr( str, "åå¤")){
; 862  : 					AI_method[which] = MAX_MAGIC;
; 863  : 					AI_target[which] &= 1;
; 864  : 					break;
; 865  : 				}
; 866  : 			}
; 867  : 		}*/
; 868  : }

  00094	5f		 pop	 edi
  00095	5b		 pop	 ebx
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?AI_SetDownCureMethod@@YAXH@Z ENDP			; AI_SetDownCureMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetUpCureMethod@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetUpCureMethod@@YAXH@Z PROC			; AI_SetUpCureMethod, COMDAT

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 820  : 	char* str;
; 821  : 	int method = AI_method[which] + 1;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _which$[ebp]
  00007	57		 push	 edi

; 822  : 	if (method > MAX_MAGIC)
; 823  : 		method = 0;
; 824  : 	AI_method[which] = MAX_MAGIC;

  00008	33 ff		 xor	 edi, edi
  0000a	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_method@@3PAHA[ebx*4]
  00011	40		 inc	 eax
  00012	c7 04 9d 00 00
	00 00 09 00 00
	00		 mov	 DWORD PTR ?AI_method@@3PAHA[ebx*4], 9
  0001d	83 f8 09	 cmp	 eax, 9

; 825  : 	AI_target[which] = TARGET_MYSELF;

  00020	c7 04 9d 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ebx*4], 1
  0002b	0f 4e f8	 cmovle	 edi, eax

; 826  : 	for (int i = method; i < MAX_MAGIC; i++) {

  0002e	83 ff 09	 cmp	 edi, 9
  00031	7d 65		 jge	 SHORT $LN17@AI_SetUpCu

; 820  : 	char* str;
; 821  : 	int method = AI_method[which] + 1;

  00033	56		 push	 esi
  00034	6b f7 70	 imul	 esi, edi, 112
  00037	81 c6 27 00 00
	00		 add	 esi, OFFSET ?magic@@3PAUMAGIC@@A+39
  0003d	0f 1f 00	 npad	 3
$LL4@AI_SetUpCu:

; 827  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  00040	66 83 7e d9 00	 cmp	 WORD PTR [esi-39], 0
  00045	74 24		 je	 SHORT $LN2@AI_SetUpCu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_06MPLPIMIC@?$LD?$LL?$LB?$LI?$LH?B@
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 _strstr
  00052	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 827  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  00055	85 c0		 test	 eax, eax
  00057	74 12		 je	 SHORT $LN2@AI_SetUpCu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _strstr
  00064	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 827  : 		if (magic[i].useFlag && (str = strstr(magic[i].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {

  00067	85 c0		 test	 eax, eax
  00069	75 11		 jne	 SHORT $LN13@AI_SetUpCu
$LN2@AI_SetUpCu:

; 826  : 	for (int i = method; i < MAX_MAGIC; i++) {

  0006b	83 c6 70	 add	 esi, 112		; 00000070H
  0006e	47		 inc	 edi
  0006f	81 fe 17 04 00
	00		 cmp	 esi, OFFSET ?magic@@3PAUMAGIC@@A+1047
  00075	7c c9		 jl	 SHORT $LL4@AI_SetUpCu

; 830  : 			break;
; 831  : 		}
; 832  : 	}
; 833  : 	/*	if( i >= MAX_MAGIC){
; 834  : 			for( i = 0; i < MAX_ITEM; i++){
; 835  : 				if( pc.item[i].useFlag && (str=strstr( pc.item[i].memo, "èä¹å")) && strstr( str, "åå¤")){
; 836  : 					AI_method[which] = MAX_MAGIC;
; 837  : 					AI_target[which] &= 1;
; 838  : 					break;
; 839  : 				}
; 840  : 			}
; 841  : 		}*/
; 842  : }

  00077	5e		 pop	 esi
  00078	5f		 pop	 edi
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN13@AI_SetUpCu:

; 828  : 			AI_method[which] = i;
; 829  : 			AI_SetMethod(magic[i].target, which);

  0007c	6b c7 70	 imul	 eax, edi, 112
  0007f	53		 push	 ebx
  00080	89 3c 9d 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[ebx*4], edi
  00087	0f bf 80 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[eax+10]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?AI_SetMethod@@YAXHH@Z	; AI_SetMethod
  00094	83 c4 08	 add	 esp, 8
  00097	5e		 pop	 esi
$LN17@AI_SetUpCu:

; 830  : 			break;
; 831  : 		}
; 832  : 	}
; 833  : 	/*	if( i >= MAX_MAGIC){
; 834  : 			for( i = 0; i < MAX_ITEM; i++){
; 835  : 				if( pc.item[i].useFlag && (str=strstr( pc.item[i].memo, "èä¹å")) && strstr( str, "åå¤")){
; 836  : 					AI_method[which] = MAX_MAGIC;
; 837  : 					AI_target[which] &= 1;
; 838  : 					break;
; 839  : 				}
; 840  : 			}
; 841  : 		}*/
; 842  : }

  00098	5f		 pop	 edi
  00099	5b		 pop	 ebx
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?AI_SetUpCureMethod@@YAXH@Z ENDP			; AI_SetUpCureMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetMethod@@YAXHH@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
_which$ = 12						; size = 4
?AI_SetMethod@@YAXHH@Z PROC				; AI_SetMethod, COMDAT

; 781  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 	switch (target) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00006	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00009	77 65		 ja	 SHORT $LN2@AI_SetMeth
  0000b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@AI_SetMeth[eax*4]
$LN6@AI_SetMeth:

; 783  : 	case MAGIC_TARGET_MYSELF:					//èªå·±
; 784  : 		AI_target[which] = TARGET_MYSELF;
; 785  : 		break;
; 786  : 	case MAGIC_TARGET_ALLMYSIDE:				//ææ¹å¨ä½
; 787  : 		AI_target[which] = TARGET_MYSIDE;
; 788  : 		break;
; 789  : 	case MAGIC_TARGET_WHOLEOTHERSIDE:			//ä»»ä½ä¸æ¹å¨ä½
; 790  : 		AI_target[which] = TARGET_MYSIDE;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _which$[ebp]
  00015	c7 04 85 00 00
	00 00 03 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[eax*4], 3

; 813  : 		break;
; 814  : #endif
; 815  : 	}
; 816  : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN7@AI_SetMeth:

; 791  : 		break;
; 792  : 	case MAGIC_TARGET_OTHER:					//ä»»ä½ä¸ä½
; 793  : 		AI_target[which] = TARGET_MYSELF;

  00022	8b 45 0c	 mov	 eax, DWORD PTR _which$[ebp]
  00025	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[eax*4], 1

; 813  : 		break;
; 814  : #endif
; 815  : 	}
; 816  : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN9@AI_SetMeth:

; 794  : 		break;
; 795  : 	case MAGIC_TARGET_ALLOTHERSIDE:				//ææ¹ä¸ä½
; 796  : 		AI_target[which] = TARGET_OTHERSIDE;
; 797  : 		break;
; 798  : 	case MAGIC_TARGET_ALL:						//å¨ä½
; 799  : 		AI_target[which] = TARGET_ALL;

  00032	8b 45 0c	 mov	 eax, DWORD PTR _which$[ebp]
  00035	c7 04 85 00 00
	00 00 06 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[eax*4], 6

; 813  : 		break;
; 814  : #endif
; 815  : 	}
; 816  : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN10@AI_SetMeth:

; 800  : 		break;
; 801  : #ifdef __ATTACK_MAGIC
; 802  : 		// æåæä¸äºº
; 803  : 	case MAGIC_TARGET_SINGLE:
; 804  : 		AI_target[which] = TARGET_OTHERONE;

  00042	8b 45 0c	 mov	 eax, DWORD PTR _which$[ebp]
  00045	c7 04 85 00 00
	00 00 04 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[eax*4], 4

; 813  : 		break;
; 814  : #endif
; 815  : 	}
; 816  : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN11@AI_SetMeth:

; 805  : 		break;
; 806  : 		// æåä¸æ´æ
; 807  : 	case MAGIC_TARGET_ONE_ROW:
; 808  : 		AI_target[which] = TARGET_ONE_ROW;

  00052	8b 45 0c	 mov	 eax, DWORD PTR _which$[ebp]
  00055	c7 04 85 00 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[eax*4], 12 ; 0000000cH

; 813  : 		break;
; 814  : #endif
; 815  : 	}
; 816  : }

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN12@AI_SetMeth:

; 809  : 		break;
; 810  : 		// æåå¨ä½
; 811  : 	case MAGIC_TARGET_ALL_ROWS:
; 812  : 		AI_target[which] = TARGET_OTHERSIDE;

  00062	8b 45 0c	 mov	 eax, DWORD PTR _which$[ebp]
  00065	c7 04 85 00 00
	00 00 05 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[eax*4], 5
$LN2@AI_SetMeth:

; 813  : 		break;
; 814  : #endif
; 815  : 	}
; 816  : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
  00072	66 90		 npad	 2
$LN14@AI_SetMeth:
  00074	00 00 00 00	 DD	 $LN7@AI_SetMeth
  00078	00 00 00 00	 DD	 $LN7@AI_SetMeth
  0007c	00 00 00 00	 DD	 $LN6@AI_SetMeth
  00080	00 00 00 00	 DD	 $LN12@AI_SetMeth
  00084	00 00 00 00	 DD	 $LN9@AI_SetMeth
  00088	00 00 00 00	 DD	 $LN2@AI_SetMeth
  0008c	00 00 00 00	 DD	 $LN2@AI_SetMeth
  00090	00 00 00 00	 DD	 $LN2@AI_SetMeth
  00094	00 00 00 00	 DD	 $LN6@AI_SetMeth
  00098	00 00 00 00	 DD	 $LN10@AI_SetMeth
  0009c	00 00 00 00	 DD	 $LN11@AI_SetMeth
  000a0	00 00 00 00	 DD	 $LN12@AI_SetMeth
?AI_SetMethod@@YAXHH@Z ENDP				; AI_SetMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetDownTarget@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetDownTarget@@YAXH@Z PROC				; AI_SetDownTarget, COMDAT

; 674  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 675  : 	int method = AI_method[which];

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _which$[ebp]
  00006	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_method@@3PAHA[ecx*4]

; 676  : #ifdef _ATTACK_AI
; 677  : 	if (which == 4
; 678  : #ifdef _AI_NEW_FIRST
; 679  : 		|| (which == 2 && bFirstFlag == true)

  0000d	83 f9 04	 cmp	 ecx, 4
  00010	0f 84 44 01 00
	00		 je	 $LN6@AI_SetDown
  00016	83 f9 02	 cmp	 ecx, 2
  00019	75 0d		 jne	 SHORT $LN4@AI_SetDown
  0001b	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?bFirstFlag@@3_NA, 1 ; bFirstFlag
  00022	0f 84 32 01 00
	00		 je	 $LN6@AI_SetDown
$LN4@AI_SetDown:

; 684  : 	}
; 685  : 	else
; 686  : #endif
; 687  : 		if (method >= MAX_MAGIC) {

  00028	83 f8 09	 cmp	 eax, 9
  0002b	7c 49		 jl	 SHORT $LN7@AI_SetDown

; 688  : 			if (TARGET_1 <= AI_target[which] && AI_target[which] <= TARGET_5) {

  0002d	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_target@@3PAHA[ecx*4]
  00034	83 f8 07	 cmp	 eax, 7
  00037	7c 27		 jl	 SHORT $LN9@AI_SetDown
  00039	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0003c	0f 8f d7 00 00
	00		 jg	 $LN29@AI_SetDown

; 689  : 				AI_target[which]++;

  00042	40		 inc	 eax
  00043	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], eax

; 690  : 				if (AI_target[which] > TARGET_5)

  0004a	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0004d	0f 8e 1a 01 00
	00		 jle	 $LN2@AI_SetDown

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  00053	c7 04 8d 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 2
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN9@AI_SetDown:
  00060	83 f8 02	 cmp	 eax, 2
  00063	0f 85 b0 00 00
	00		 jne	 $LN29@AI_SetDown
$LN15@AI_SetDown:
  00069	c7 04 8d 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 1
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN7@AI_SetDown:

; 691  : 					AI_target[which] = TARGET_MYPET;
; 692  : 			}
; 693  : 			else if (AI_target[which] == TARGET_MYPET) {
; 694  : 				AI_target[which] = TARGET_MYSELF;
; 695  : 			}
; 696  : 			else {
; 697  : 				AI_target[which] = TARGET_1;
; 698  : 			}
; 699  : 			/*		if( AI_target[which] == TARGET_MYSELF){
; 700  : 						if( which == 2)
; 701  : 							AI_target[which] = TARGET_OTHERONE;		//ææ¹
; 702  : 						else
; 703  : 							AI_target[which] = TARGET_MYPET;		//å® ç©
; 704  : 					}else if( AI_target[which] == TARGET_OTHERONE)
; 705  : 						AI_target[which] = TARGET_MYPET;			//å® ç©
; 706  : 					else// if( AI_target[which] == TARGET_MYPET)
; 707  : 						AI_target[which] = TARGET_MYSELF;			//èªå·±*/
; 708  : 		}
; 709  : 		else if (method >= 0) {

  00076	85 c0		 test	 eax, eax
  00078	0f 88 ef 00 00
	00		 js	 $LN2@AI_SetDown

; 710  : 			switch (magic[method].target) {

  0007e	6b c0 70	 imul	 eax, eax, 112
  00081	0f bf 80 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[eax+10]
  00088	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0008b	0f 87 dc 00 00
	00		 ja	 $LN2@AI_SetDown
  00091	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN37@AI_SetDown[eax*4]
$LN16@AI_SetDown:

; 711  : 			case MAGIC_TARGET_MYSELF:
; 712  : 				AI_target[which] = TARGET_MYSELF;			//èªå·±
; 713  : 				break;
; 714  : 			case MAGIC_TARGET_ALLMYSIDE:
; 715  : 				AI_target[which] = TARGET_MYSIDE;			//ææ¹å¨ä½

  00098	c7 04 8d 00 00
	00 00 03 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 3

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN17@AI_SetDown:

; 716  : 				break;
; 717  : 			case MAGIC_TARGET_WHOLEOTHERSIDE:
; 718  : 				if (which != 0) {

  000a5	85 c9		 test	 ecx, ecx
  000a7	0f 84 c0 00 00
	00		 je	 $LN2@AI_SetDown

; 719  : 					if (AI_target[which] == TARGET_MYSIDE)

  000ad	33 c0		 xor	 eax, eax
  000af	83 3c 8d 00 00
	00 00 03	 cmp	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 3
  000b7	0f 94 c0	 sete	 al
  000ba	8d 04 45 03 00
	00 00		 lea	 eax, DWORD PTR [eax*2+3]
  000c1	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], eax

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
$LN21@AI_SetDown:

; 720  : 						AI_target[which] = TARGET_OTHERSIDE;	//ææ¹å¨ä½
; 721  : 					else
; 722  : 						AI_target[which] = TARGET_MYSIDE;		//ææ¹å¨ä½
; 723  : 				}
; 724  : 				break;
; 725  : 			case MAGIC_TARGET_OTHER:
; 726  : 				if (TARGET_1 <= AI_target[which] && AI_target[which] <= TARGET_5) {

  000ca	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_target@@3PAHA[ecx*4]
  000d1	83 f8 07	 cmp	 eax, 7
  000d4	7c 2d		 jl	 SHORT $LN22@AI_SetDown
  000d6	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000d9	7f 3e		 jg	 SHORT $LN29@AI_SetDown

; 727  : 					AI_target[which]++;

  000db	40		 inc	 eax
  000dc	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], eax

; 728  : 					if (AI_target[which] > TARGET_5) {

  000e3	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000e6	0f 8e 81 00 00
	00		 jle	 $LN2@AI_SetDown

; 729  : 						if (which != 0)

  000ec	33 c0		 xor	 eax, eax
  000ee	85 c9		 test	 ecx, ecx
  000f0	0f 95 c0	 setne	 al
  000f3	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  000fa	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], eax

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN22@AI_SetDown:

; 730  : 							AI_target[which] = TARGET_OTHERONE;
; 731  : 						else
; 732  : 							AI_target[which] = TARGET_MYPET;
; 733  : 					}
; 734  : 				}
; 735  : 				else if (AI_target[which] == TARGET_OTHERONE) {

  00103	83 f8 04	 cmp	 eax, 4
  00106	0f 85 54 ff ff
	ff		 jne	 $LN9@AI_SetDown

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  0010c	c7 04 8d 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 2
  00117	5d		 pop	 ebp
  00118	c3		 ret	 0
$LN29@AI_SetDown:
  00119	c7 04 8d 00 00
	00 00 07 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 7
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
$LN31@AI_SetDown:
  00126	c7 04 8d 00 00
	00 00 05 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 5
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
$LN32@AI_SetDown:

; 736  : 					AI_target[which] = TARGET_MYPET;
; 737  : 				}
; 738  : 				else if (AI_target[which] == TARGET_MYPET) {
; 739  : 					AI_target[which] = TARGET_MYSELF;
; 740  : 				}
; 741  : 				else {
; 742  : 					AI_target[which] = TARGET_1;
; 743  : 				}
; 744  : 				/*			if( AI_target[which] == TARGET_MYSELF){
; 745  : 								if( which == 2)
; 746  : 									AI_target[which] = TARGET_OTHERONE;	//ææ¹
; 747  : 								else
; 748  : 									AI_target[which] = TARGET_MYPET;	//å® ç©
; 749  : 							}else if( AI_target[which] == TARGET_OTHERONE)
; 750  : 								AI_target[which] = TARGET_MYPET;		//å® ç©
; 751  : 							else// if( AI_target[which] == TARGET_MYPET)
; 752  : 								AI_target[which] = TARGET_MYSELF;		//èªå·±*/
; 753  : 				break;
; 754  : 			case MAGIC_TARGET_ALLOTHERSIDE:
; 755  : 				AI_target[which] = TARGET_OTHERSIDE;		//ææ¹å¨ä½
; 756  : 				break;
; 757  : 			case MAGIC_TARGET_ALL:
; 758  : 				AI_target[which] = TARGET_ALL;				//å¨ä½

  00133	c7 04 8d 00 00
	00 00 06 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 6

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
$LN33@AI_SetDown:

; 759  : 				break;
; 760  : #ifdef __ATTACK_MAGIC
; 761  : 				// æåæä¸äºº
; 762  : 			case MAGIC_TARGET_SINGLE:
; 763  : 				AI_target[which] = TARGET_OTHERONE;

  00140	c7 04 8d 00 00
	00 00 04 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 4

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
$LN34@AI_SetDown:

; 764  : 				break;
; 765  : 				// æåä¸æ´æ
; 766  : 			case MAGIC_TARGET_ONE_ROW:
; 767  : 				AI_target[which] = TARGET_ONE_ROW;

  0014d	c7 04 8d 00 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 12 ; 0000000cH

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
$LN6@AI_SetDown:

; 680  : #endif
; 681  : 		) {
; 682  : 		AI_target[which]++;

  0015a	ff 04 8d 00 00
	00 00		 inc	 DWORD PTR ?AI_target@@3PAHA[ecx*4]

; 683  : 		AI_CheckSkillSetting(which, method, 1);

  00161	6a 01		 push	 1
  00163	50		 push	 eax
  00164	51		 push	 ecx
  00165	e8 00 00 00 00	 call	 ?AI_CheckSkillSetting@@YAHHHH@Z ; AI_CheckSkillSetting
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@AI_SetDown:

; 768  : 				break;
; 769  : 				// æåå¨ä½
; 770  : 			case MAGIC_TARGET_ALL_ROWS:
; 771  : 				AI_target[which] = TARGET_OTHERSIDE;
; 772  : 				break;
; 773  : #endif
; 774  : 			}
; 775  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 776  : 			//			AI_target[which] ^= 1;
; 777  : 		}
; 778  : }

  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
  0016f	90		 npad	 1
$LN37@AI_SetDown:
  00170	00 00 00 00	 DD	 $LN15@AI_SetDown
  00174	00 00 00 00	 DD	 $LN21@AI_SetDown
  00178	00 00 00 00	 DD	 $LN16@AI_SetDown
  0017c	00 00 00 00	 DD	 $LN31@AI_SetDown
  00180	00 00 00 00	 DD	 $LN32@AI_SetDown
  00184	00 00 00 00	 DD	 $LN2@AI_SetDown
  00188	00 00 00 00	 DD	 $LN2@AI_SetDown
  0018c	00 00 00 00	 DD	 $LN2@AI_SetDown
  00190	00 00 00 00	 DD	 $LN17@AI_SetDown
  00194	00 00 00 00	 DD	 $LN33@AI_SetDown
  00198	00 00 00 00	 DD	 $LN34@AI_SetDown
  0019c	00 00 00 00	 DD	 $LN31@AI_SetDown
?AI_SetDownTarget@@YAXH@Z ENDP				; AI_SetDownTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetUpTarget@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetUpTarget@@YAXH@Z PROC				; AI_SetUpTarget, COMDAT

; 575  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 576  : 	int method = AI_method[which];

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _which$[ebp]
  00006	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_method@@3PAHA[ecx*4]

; 577  : #ifdef _ATTACK_AI
; 578  : 	if (which == 4
; 579  : #ifdef _AI_NEW_FIRST
; 580  : 		|| (which == 2 && bFirstFlag == true)

  0000d	83 f9 04	 cmp	 ecx, 4
  00010	0f 84 37 01 00
	00		 je	 $LN6@AI_SetUpTa
  00016	83 f9 02	 cmp	 ecx, 2
  00019	75 0d		 jne	 SHORT $LN4@AI_SetUpTa
  0001b	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?bFirstFlag@@3_NA, 1 ; bFirstFlag
  00022	0f 84 25 01 00
	00		 je	 $LN6@AI_SetUpTa
$LN4@AI_SetUpTa:

; 585  : 	}
; 586  : 	else
; 587  : #endif
; 588  : 		if (method >= MAX_MAGIC) {

  00028	83 f8 09	 cmp	 eax, 9
  0002b	7c 49		 jl	 SHORT $LN7@AI_SetUpTa

; 589  : 			if (TARGET_1 <= AI_target[which] && AI_target[which] <= TARGET_5) {

  0002d	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_target@@3PAHA[ecx*4]
  00034	83 f8 07	 cmp	 eax, 7
  00037	7c 27		 jl	 SHORT $LN9@AI_SetUpTa
$LN39@AI_SetUpTa:

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  00039	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0003c	0f 8f ca 00 00
	00		 jg	 $LN29@AI_SetUpTa
  00042	48		 dec	 eax
  00043	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], eax
  0004a	83 f8 07	 cmp	 eax, 7
  0004d	0f 8d 0d 01 00
	00		 jge	 $LN2@AI_SetUpTa
  00053	c7 04 8d 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 1
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN9@AI_SetUpTa:

; 590  : 				AI_target[which]--;
; 591  : 				if (AI_target[which] < TARGET_1) AI_target[which] = TARGET_MYSELF;
; 592  : 			}
; 593  : 			else if (AI_target[which] == TARGET_MYPET)	AI_target[which] = TARGET_5;

  00060	83 f8 02	 cmp	 eax, 2
$LN38@AI_SetUpTa:

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  00063	0f 85 a3 00 00
	00		 jne	 $LN29@AI_SetUpTa
  00069	c7 04 8d 00 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 11 ; 0000000bH
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN7@AI_SetUpTa:

; 594  : 			else AI_target[which] = TARGET_MYPET;
; 595  : 		}
; 596  : 		else if (method >= 0)

  00076	85 c0		 test	 eax, eax
  00078	0f 88 e2 00 00
	00		 js	 $LN2@AI_SetUpTa

; 597  : 		{
; 598  : 			switch (magic[method].target)

  0007e	6b c0 70	 imul	 eax, eax, 112
  00081	0f bf 80 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[eax+10]
  00088	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0008b	0f 87 cf 00 00
	00		 ja	 $LN2@AI_SetUpTa
  00091	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN37@AI_SetUpTa[eax*4]
$LN15@AI_SetUpTa:

; 599  : 			{
; 600  : 			case MAGIC_TARGET_MYSELF:
; 601  : 				AI_target[which] = TARGET_MYSELF;			//èªå·±

  00098	c7 04 8d 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 1

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN16@AI_SetUpTa:

; 602  : 				break;
; 603  : 			case MAGIC_TARGET_ALLMYSIDE:
; 604  : 				AI_target[which] = TARGET_MYSIDE;			//ææ¹å¨ä½

  000a5	c7 04 8d 00 00
	00 00 03 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 3

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
$LN17@AI_SetUpTa:

; 605  : 				break;
; 606  : 			case MAGIC_TARGET_WHOLEOTHERSIDE:
; 607  : 				if (which != 0)

  000b2	85 c9		 test	 ecx, ecx
  000b4	0f 84 a6 00 00
	00		 je	 $LN2@AI_SetUpTa

; 608  : 				{
; 609  : 					if (AI_target[which] == TARGET_MYSIDE)

  000ba	33 c0		 xor	 eax, eax
  000bc	83 3c 8d 00 00
	00 00 03	 cmp	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 3
  000c4	0f 94 c0	 sete	 al
  000c7	8d 04 45 03 00
	00 00		 lea	 eax, DWORD PTR [eax*2+3]
  000ce	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], eax

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN21@AI_SetUpTa:

; 610  : 						AI_target[which] = TARGET_OTHERSIDE;	//ææ¹å¨ä½
; 611  : 					else
; 612  : 						AI_target[which] = TARGET_MYSIDE;		//ææ¹å¨ä½
; 613  : 				}
; 614  : 				break;
; 615  : 			case MAGIC_TARGET_OTHER:
; 616  : 				if (TARGET_1 <= AI_target[which] && AI_target[which] <= TARGET_5)

  000d7	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?AI_target@@3PAHA[ecx*4]
  000de	83 f8 07	 cmp	 eax, 7
  000e1	0f 8d 52 ff ff
	ff		 jge	 $LN39@AI_SetUpTa

; 617  : 				{
; 618  : 					AI_target[which]--;
; 619  : 					if (AI_target[which] < TARGET_1)
; 620  : 						AI_target[which] = TARGET_MYSELF;
; 621  : 				}
; 622  : 				else if (AI_target[which] == TARGET_MYPET)

  000e7	83 f8 02	 cmp	 eax, 2
  000ea	75 18		 jne	 SHORT $LN25@AI_SetUpTa

; 623  : 				{
; 624  : 					if (which != 0)
; 625  : 						AI_target[which] = TARGET_OTHERONE;
; 626  : 					else
; 627  : 						AI_target[which] = TARGET_5;
; 628  : 				}

  000ec	85 c9		 test	 ecx, ecx
  000ee	b8 04 00 00 00	 mov	 eax, 4
  000f3	ba 0b 00 00 00	 mov	 edx, 11			; 0000000bH
  000f8	0f 44 c2	 cmove	 eax, edx
  000fb	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], eax

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
$LN25@AI_SetUpTa:

; 629  : 				else if (AI_target[which] == TARGET_OTHERONE)

  00104	83 f8 04	 cmp	 eax, 4

; 630  : 				{
; 631  : 					AI_target[which] = TARGET_5;
; 632  : 				}

  00107	e9 57 ff ff ff	 jmp	 $LN38@AI_SetUpTa
$LN29@AI_SetUpTa:

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  0010c	c7 04 8d 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 2
  00117	5d		 pop	 ebp
  00118	c3		 ret	 0
$LN31@AI_SetUpTa:
  00119	c7 04 8d 00 00
	00 00 05 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 5
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
$LN32@AI_SetUpTa:

; 633  : 				else
; 634  : 				{
; 635  : 					AI_target[which] = TARGET_MYPET;
; 636  : 				}
; 637  : 				/*			if( AI_target[which] == TARGET_MYSELF)
; 638  : 								AI_target[which] = TARGET_MYPET;		//å® ç©
; 639  : 							else if( AI_target[which] == TARGET_MYPET){
; 640  : 								if( which == 2)
; 641  : 									AI_target[which] = TARGET_OTHERONE;	//ææ¹
; 642  : 								else
; 643  : 									AI_target[which] = TARGET_MYSELF;	//èªå·±
; 644  : 							}else// if( AI_target[which] == TARGET_OTHERONE)
; 645  : 								AI_target[which] = TARGET_MYSELF;		//èªå·±*/
; 646  : 				break;
; 647  : 			case MAGIC_TARGET_ALLOTHERSIDE:
; 648  : 				AI_target[which] = TARGET_OTHERSIDE;		//ææ¹å¨ä½
; 649  : 				break;
; 650  : 			case MAGIC_TARGET_ALL:
; 651  : 				AI_target[which] = TARGET_ALL;				//å¨ä½

  00126	c7 04 8d 00 00
	00 00 06 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 6

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
$LN33@AI_SetUpTa:

; 652  : 				break;
; 653  : #ifdef __ATTACK_MAGIC
; 654  : 				// æåæä¸äºº
; 655  : 			case MAGIC_TARGET_SINGLE:
; 656  : 				AI_target[which] = TARGET_OTHERONE;

  00133	c7 04 8d 00 00
	00 00 04 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 4

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
$LN34@AI_SetUpTa:

; 657  : 				break;
; 658  : 				// æåä¸æ´æ
; 659  : 			case MAGIC_TARGET_ONE_ROW:
; 660  : 				AI_target[which] = TARGET_ONE_ROW;

  00140	c7 04 8d 00 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[ecx*4], 12 ; 0000000cH

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
$LN6@AI_SetUpTa:

; 581  : #endif
; 582  : 		) {
; 583  : 		AI_target[which]--;

  0014d	ff 0c 8d 00 00
	00 00		 dec	 DWORD PTR ?AI_target@@3PAHA[ecx*4]

; 584  : 		AI_CheckSkillSetting(which, method, 0);

  00154	6a 00		 push	 0
  00156	50		 push	 eax
  00157	51		 push	 ecx
  00158	e8 00 00 00 00	 call	 ?AI_CheckSkillSetting@@YAHHHH@Z ; AI_CheckSkillSetting
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@AI_SetUpTa:

; 661  : 				break;
; 662  : 				// æåå¨ä½
; 663  : 			case MAGIC_TARGET_ALL_ROWS:
; 664  : 				AI_target[which] = TARGET_OTHERSIDE;
; 665  : 				break;
; 666  : #endif
; 667  : 			}
; 668  : 			//		if( magic[method].target == MAGIC_TARGET_OTHER)
; 669  : 			//			AI_target[which] ^= 1;
; 670  : 		}
; 671  : }

  00160	5d		 pop	 ebp
  00161	c3		 ret	 0
  00162	66 90		 npad	 2
$LN37@AI_SetUpTa:
  00164	00 00 00 00	 DD	 $LN15@AI_SetUpTa
  00168	00 00 00 00	 DD	 $LN21@AI_SetUpTa
  0016c	00 00 00 00	 DD	 $LN16@AI_SetUpTa
  00170	00 00 00 00	 DD	 $LN31@AI_SetUpTa
  00174	00 00 00 00	 DD	 $LN32@AI_SetUpTa
  00178	00 00 00 00	 DD	 $LN2@AI_SetUpTa
  0017c	00 00 00 00	 DD	 $LN2@AI_SetUpTa
  00180	00 00 00 00	 DD	 $LN2@AI_SetUpTa
  00184	00 00 00 00	 DD	 $LN17@AI_SetUpTa
  00188	00 00 00 00	 DD	 $LN33@AI_SetUpTa
  0018c	00 00 00 00	 DD	 $LN34@AI_SetUpTa
  00190	00 00 00 00	 DD	 $LN31@AI_SetUpTa
?AI_SetUpTarget@@YAXH@Z ENDP				; AI_SetUpTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_Init@@YAXXZ
_TEXT	SEGMENT
_id$ = -48						; size = 32
__$ArrayPad$ = -4					; size = 4
?AI_Init@@YAXXZ PROC					; AI_Init, COMDAT

; 561  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 562  : 	char id[32];
; 563  : 	AI = AI_NONE;
; 564  : 	PauseAI = 0;
; 565  : 	AICnt = 0;
; 566  : 	extern char szUser[];
; 567  : 	CopyMemory(id, szUser, 32);

  00023	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?szUser@@3PADA

; 568  : 	ecb_crypt("f;encor1c", id, 32, DES_DECRYPT);

  0002a	6a 01		 push	 1
  0002c	6a 20		 push	 32			; 00000020H
  0002e	0f 11 45 d0	 movups	 XMMWORD PTR _id$[ebp], xmm0
  00032	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00035	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI@@3HA, 0	; AI
  0003f	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ?szUser@@3PADA+16
  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_09BACHGGGK@f?$DLencor1c@
  0004c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PauseAI@@3KA, 0 ; PauseAI
  00056	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AICnt@@3HA, 0
  00060	0f 11 45 e0	 movups	 XMMWORD PTR _id$[ebp+16], xmm0
  00064	e8 00 00 00 00	 call	 ?ecb_crypt@@YAHPAD0II@Z	; ecb_crypt

; 569  : 	id[15] = strlen(id);

  00069	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL4@AI_Init:
  00072	8a 08		 mov	 cl, BYTE PTR [eax]
  00074	40		 inc	 eax
  00075	84 c9		 test	 cl, cl
  00077	75 f9		 jne	 SHORT $LL4@AI_Init
  00079	2b c2		 sub	 eax, edx
  0007b	88 45 df	 mov	 BYTE PTR _id$[ebp+15], al

; 570  : 	if (AI_Load(id))

  0007e	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?AI_Load@@YAHPAD@Z	; AI_Load
  00087	83 c4 04	 add	 esp, 4
  0008a	85 c0		 test	 eax, eax
  0008c	74 05		 je	 SHORT $LN2@AI_Init

; 571  : 		AI_CheckSetting();

  0008e	e8 00 00 00 00	 call	 ?AI_CheckSetting@@YAXXZ	; AI_CheckSetting
$LN2@AI_Init:

; 572  : }

  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	33 cd		 xor	 ecx, ebp
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	8b e3		 mov	 esp, ebx
  000a2	5b		 pop	 ebx
  000a3	c3		 ret	 0
?AI_Init@@YAXXZ ENDP					; AI_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_CheckSetting@@YAXXZ
_TEXT	SEGMENT
?AI_CheckSetting@@YAXXZ PROC				; AI_CheckSetting, COMDAT

; 391  : 	char* str;
; 392  : 	int method;
; 393  : 	if (AI)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AI@@3HA	; AI
  00005	b9 03 00 00 00	 mov	 ecx, 3
  0000a	85 c0		 test	 eax, eax
  0000c	0f 45 c1	 cmovne	 eax, ecx

; 394  : 		AI = AI_SELECT;
; 395  : 	int i;
; 396  : #ifndef _ATTACK_AI
; 397  : 	for (i = 0; i < 4; i++) {
; 398  : #else
; 399  : 	for (i = 0; i < 5; i++) {
; 400  : #endif
; 401  : 		if (AI_limit[i] > 100 || AI_limit[i] < 0)

  0000f	b9 05 00 00 00	 mov	 ecx, 5
  00014	a3 00 00 00 00	 mov	 DWORD PTR ?AI@@3HA, eax	; AI
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AI_limit@@3PAHA
  0001e	83 f8 64	 cmp	 eax, 100		; 00000064H
  00021	7f 0b		 jg	 SHORT $LN14@AI_CheckSe
  00023	85 c0		 test	 eax, eax
  00025	78 07		 js	 SHORT $LN14@AI_CheckSe

; 403  : 		else if (AI_limit[i] % 5)

  00027	99		 cdq
  00028	f7 f9		 idiv	 ecx
  0002a	85 d2		 test	 edx, edx
  0002c	74 0a		 je	 SHORT $LN2@AI_CheckSe
$LN14@AI_CheckSe:

; 402  : 			AI_limit[i] = 30;

  0002e	c7 05 00 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?AI_limit@@3PAHA, 30 ; 0000001eH
$LN2@AI_CheckSe:

; 394  : 		AI = AI_SELECT;
; 395  : 	int i;
; 396  : #ifndef _ATTACK_AI
; 397  : 	for (i = 0; i < 4; i++) {
; 398  : #else
; 399  : 	for (i = 0; i < 5; i++) {
; 400  : #endif
; 401  : 		if (AI_limit[i] > 100 || AI_limit[i] < 0)

  00038	a1 04 00 00 00	 mov	 eax, DWORD PTR ?AI_limit@@3PAHA+4
  0003d	83 f8 64	 cmp	 eax, 100		; 00000064H
  00040	7f 0b		 jg	 SHORT $LN88@AI_CheckSe
  00042	85 c0		 test	 eax, eax
  00044	78 07		 js	 SHORT $LN88@AI_CheckSe

; 403  : 		else if (AI_limit[i] % 5)

  00046	99		 cdq
  00047	f7 f9		 idiv	 ecx
  00049	85 d2		 test	 edx, edx
  0004b	74 0a		 je	 SHORT $LN89@AI_CheckSe
$LN88@AI_CheckSe:

; 402  : 			AI_limit[i] = 30;

  0004d	c7 05 04 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?AI_limit@@3PAHA+4, 30 ; 0000001eH
$LN89@AI_CheckSe:

; 394  : 		AI = AI_SELECT;
; 395  : 	int i;
; 396  : #ifndef _ATTACK_AI
; 397  : 	for (i = 0; i < 4; i++) {
; 398  : #else
; 399  : 	for (i = 0; i < 5; i++) {
; 400  : #endif
; 401  : 		if (AI_limit[i] > 100 || AI_limit[i] < 0)

  00057	a1 08 00 00 00	 mov	 eax, DWORD PTR ?AI_limit@@3PAHA+8
  0005c	83 f8 64	 cmp	 eax, 100		; 00000064H
  0005f	7f 0b		 jg	 SHORT $LN91@AI_CheckSe
  00061	85 c0		 test	 eax, eax
  00063	78 07		 js	 SHORT $LN91@AI_CheckSe

; 403  : 		else if (AI_limit[i] % 5)

  00065	99		 cdq
  00066	f7 f9		 idiv	 ecx
  00068	85 d2		 test	 edx, edx
  0006a	74 0a		 je	 SHORT $LN92@AI_CheckSe
$LN91@AI_CheckSe:

; 402  : 			AI_limit[i] = 30;

  0006c	c7 05 08 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?AI_limit@@3PAHA+8, 30 ; 0000001eH
$LN92@AI_CheckSe:

; 394  : 		AI = AI_SELECT;
; 395  : 	int i;
; 396  : #ifndef _ATTACK_AI
; 397  : 	for (i = 0; i < 4; i++) {
; 398  : #else
; 399  : 	for (i = 0; i < 5; i++) {
; 400  : #endif
; 401  : 		if (AI_limit[i] > 100 || AI_limit[i] < 0)

  00076	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?AI_limit@@3PAHA+12
  0007b	83 f8 64	 cmp	 eax, 100		; 00000064H
  0007e	7f 0b		 jg	 SHORT $LN94@AI_CheckSe
  00080	85 c0		 test	 eax, eax
  00082	78 07		 js	 SHORT $LN94@AI_CheckSe

; 403  : 		else if (AI_limit[i] % 5)

  00084	99		 cdq
  00085	f7 f9		 idiv	 ecx
  00087	85 d2		 test	 edx, edx
  00089	74 0a		 je	 SHORT $LN95@AI_CheckSe
$LN94@AI_CheckSe:

; 402  : 			AI_limit[i] = 30;

  0008b	c7 05 0c 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?AI_limit@@3PAHA+12, 30 ; 0000001eH
$LN95@AI_CheckSe:

; 394  : 		AI = AI_SELECT;
; 395  : 	int i;
; 396  : #ifndef _ATTACK_AI
; 397  : 	for (i = 0; i < 4; i++) {
; 398  : #else
; 399  : 	for (i = 0; i < 5; i++) {
; 400  : #endif
; 401  : 		if (AI_limit[i] > 100 || AI_limit[i] < 0)

  00095	a1 10 00 00 00	 mov	 eax, DWORD PTR ?AI_limit@@3PAHA+16
  0009a	83 f8 64	 cmp	 eax, 100		; 00000064H
  0009d	7f 0b		 jg	 SHORT $LN97@AI_CheckSe
  0009f	85 c0		 test	 eax, eax
  000a1	78 07		 js	 SHORT $LN97@AI_CheckSe

; 403  : 		else if (AI_limit[i] % 5)

  000a3	99		 cdq
  000a4	f7 f9		 idiv	 ecx
  000a6	85 d2		 test	 edx, edx
  000a8	74 0a		 je	 SHORT $LN98@AI_CheckSe
$LN97@AI_CheckSe:

; 402  : 			AI_limit[i] = 30;

  000aa	c7 05 10 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?AI_limit@@3PAHA+16, 30 ; 0000001eH
$LN98@AI_CheckSe:

; 404  : 			AI_limit[i] = 30;
; 405  : 	}
; 406  : #ifdef _ATTACK_AI
; 407  : 	// ç¡®è®¤ç©å®¶èº«ä¸ç åè¡ææ§ å¨é£ä¸ªä½ç½®
; 408  : 	i = 0;

  000b4	33 c9		 xor	 ecx, ecx

; 409  : 	g_iPSindex = -1;

  000b6	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?g_iPSindex@@3HA, -1 ; g_iPSindex

; 410  : 	g_bUsePS = false;

  000c0	88 0d 00 00 00
	00		 mov	 BYTE PTR ?g_bUsePS@@3_NA, cl ; g_bUsePS
  000c6	b8 02 00 00 00	 mov	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+2
  000cb	0f 1f 44 00 00	 npad	 5
$LL5@AI_CheckSe:

; 411  : 	while (1) {
; 412  : 		if (profession_skill[i].useFlag == 1 && profession_skill[i].skillId == 11) {

  000d0	66 83 78 fe 01	 cmp	 WORD PTR [eax-2], 1
  000d5	75 13		 jne	 SHORT $LN16@AI_CheckSe
  000d7	66 83 38 0b	 cmp	 WORD PTR [eax], 11	; 0000000bH
  000db	75 0d		 jne	 SHORT $LN16@AI_CheckSe

; 413  : 			g_iPSindex = i;

  000dd	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_iPSindex@@3HA, ecx ; g_iPSindex

; 414  : 			g_bUsePS = true;

  000e3	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bUsePS@@3_NA, 1 ; g_bUsePS
$LN16@AI_CheckSe:

; 415  : 		}
; 416  : 		if (++i >= MAX_PROFESSION_SKILL) break;

  000ea	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  000ef	41		 inc	 ecx
  000f0	3d 82 13 00 00	 cmp	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+4994
  000f5	7c d9		 jl	 SHORT $LL5@AI_CheckSe

; 417  : 	}
; 418  : #endif
; 419  : #ifdef _AI_OTHER
; 420  : 	if (AI_OtherSetting[0] < 0) AI_OtherSetting[0] = 0;

  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AI_OtherSetting@@3PAHA ; AI_OtherSetting
  000fc	33 c9		 xor	 ecx, ecx
  000fe	85 c0		 test	 eax, eax
  00100	56		 push	 esi
  00101	0f 48 c1	 cmovs	 eax, ecx
  00104	a3 00 00 00 00	 mov	 DWORD PTR ?AI_OtherSetting@@3PAHA, eax ; AI_OtherSetting

; 421  : #endif
; 422  : 	method = AI_method[0];

  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AI_method@@3PAHA

; 423  : 	if (method < MAX_MAGIC && method >= 0) {//ä½¿ç¨ç²¾çµ

  0010e	83 f8 08	 cmp	 eax, 8
  00111	77 68		 ja	 SHORT $LN19@AI_CheckSe

; 424  : 		if (magic[method].useFlag && (str = strstr(magic[method].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {//ä½¿ç¨èä¹ååå¤ç²¾çµ

  00113	6b f0 70	 imul	 esi, eax, 112
  00116	66 39 8e 00 00
	00 00		 cmp	 WORD PTR ?magic@@3PAUMAGIC@@A[esi], cx
  0011d	74 50		 je	 SHORT $LN28@AI_CheckSe
  0011f	8d 86 27 00 00
	00		 lea	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[esi+39]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00125	68 00 00 00 00	 push	 OFFSET ??_C@_06MPLPIMIC@?$LD?$LL?$LB?$LI?$LH?B@
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _strstr
  00130	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 424  : 		if (magic[method].useFlag && (str = strstr(magic[method].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {//ä½¿ç¨èä¹ååå¤ç²¾çµ

  00133	85 c0		 test	 eax, eax
  00135	74 38		 je	 SHORT $LN28@AI_CheckSe
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00137	68 00 00 00 00	 push	 OFFSET ??_C@_04MFLAKDLK@?H?$LI?$LK?$LJ@
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 _strstr
  00142	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 424  : 		if (magic[method].useFlag && (str = strstr(magic[method].memo, "ë´êµ¬ë ¥")) && strstr(str, "íë³µ")) {//ä½¿ç¨èä¹ååå¤ç²¾çµ

  00145	85 c0		 test	 eax, eax
  00147	74 26		 je	 SHORT $LN28@AI_CheckSe

; 425  : 			switch (magic[method].target) {

  00149	0f bf 86 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[esi+10]
  00150	83 f8 08	 cmp	 eax, 8
  00153	77 1a		 ja	 SHORT $LN28@AI_CheckSe
  00155	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN100@AI_CheckSe[eax]
  0015c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN101@AI_CheckSe[eax*4]
$LN24@AI_CheckSe:

; 426  : 			case MAGIC_TARGET_MYSELF:
; 427  : 				AI_target[0] = TARGET_MYSELF;			//èªå·±
; 428  : 				break;
; 429  : 			case MAGIC_TARGET_ALLMYSIDE:
; 430  : 			case MAGIC_TARGET_WHOLEOTHERSIDE:
; 431  : 				AI_target[0] = TARGET_MYSIDE;			//ææ¹å¨ä½

  00163	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA, 3

; 432  : 				break;

  0016d	eb 39		 jmp	 SHORT $LN29@AI_CheckSe
$LN28@AI_CheckSe:

; 453  : 		if (AI_target[0] != TARGET_MYSELF && AI_target[0] != TARGET_MYPET &&
; 454  : 			(TARGET_1 > AI_target[0] || AI_target[0] > TARGET_5)) {//ä½¿ç¨éå·ä½å¯¹è±¡ä¸å¯¹
; 455  : 			AI_target[0] = TARGET_MYSELF;
; 456  : 		}
; 457  : 	}
; 458  : #ifndef _ATTACK_AI
; 459  : 	AI_method[1] = MAX_MAGIC;
; 460  : #else
; 461  : 	if (!g_bUsePS) AI_method[1] = -1;

  0016f	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA, 9
  00179	eb 23		 jmp	 SHORT $LN30@AI_CheckSe
$LN19@AI_CheckSe:

; 433  : 			case MAGIC_TARGET_OTHER:
; 434  : 				if (AI_target[0] != TARGET_MYSELF && AI_target[0] != TARGET_MYPET &&
; 435  : 					(TARGET_1 > AI_target[0] || AI_target[0] > TARGET_5))//æ£æ¥å¯¹è±¡æ¯å¦éè¯¯
; 436  : 					AI_target[0] = TARGET_MYSELF;	//èªå·±
; 437  : 				break;
; 438  : 			default:
; 439  : 				//			case MAGIC_TARGET_ALLOTHERSIDE:				//ä¸è¯¥ä½¿ç¨è¿ç§ç²¾çµåå¤
; 440  : 				//			case MAGIC_TARGET_ALL:
; 441  : 				AI_method[0] = MAX_MAGIC;			//è®¾ä¸ºä½¿ç¨éå·
; 442  : 				AI_target[0] = TARGET_MYSELF;
; 443  : 				break;
; 444  : 			}
; 445  : 		}
; 446  : 		else {//æ²¡æèä¹ååå¤ç²¾çµ
; 447  : 			AI_method[0] = MAX_MAGIC;
; 448  : 			AI_target[0] = TARGET_MYSELF;
; 449  : 		}
; 450  : 	}
; 451  : 	else {//ä½¿ç¨éå·è¡¥èä¹å
; 452  : 		AI_method[0] = MAX_MAGIC;

  0017b	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA, 9
$LN25@AI_CheckSe:

; 453  : 		if (AI_target[0] != TARGET_MYSELF && AI_target[0] != TARGET_MYPET &&
; 454  : 			(TARGET_1 > AI_target[0] || AI_target[0] > TARGET_5)) {//ä½¿ç¨éå·ä½å¯¹è±¡ä¸å¯¹
; 455  : 			AI_target[0] = TARGET_MYSELF;
; 456  : 		}
; 457  : 	}
; 458  : #ifndef _ATTACK_AI
; 459  : 	AI_method[1] = MAX_MAGIC;
; 460  : #else
; 461  : 	if (!g_bUsePS) AI_method[1] = -1;

  00185	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AI_target@@3PAHA
  0018a	83 f8 01	 cmp	 eax, 1
  0018d	74 19		 je	 SHORT $LN29@AI_CheckSe
  0018f	83 f8 02	 cmp	 eax, 2
  00192	74 14		 je	 SHORT $LN29@AI_CheckSe
  00194	83 f8 07	 cmp	 eax, 7
  00197	7c 05		 jl	 SHORT $LN30@AI_CheckSe
  00199	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0019c	7e 0a		 jle	 SHORT $LN29@AI_CheckSe
$LN30@AI_CheckSe:
  0019e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA, 1
$LN29@AI_CheckSe:
  001a8	a1 04 00 00 00	 mov	 eax, DWORD PTR ?AI_method@@3PAHA+4
  001ad	83 ce ff	 or	 esi, -1
  001b0	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bUsePS@@3_NA, 0 ; g_bUsePS

; 462  : #endif
; 463  : 	AI_target[1] = TARGET_MYSELF;

  001b7	c7 05 04 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+4, 1
  001c1	0f 44 c6	 cmove	 eax, esi

; 464  : 
; 465  : 	method = AI_method[2];
; 466  : #ifdef _AI_NEW_FIRST
; 467  : 	// é¦æ¬¡ç²¾çµ:ä½¿ç¨ç²¾çµ
; 468  : 	if (bFirstFlag == false) {

  001c4	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bFirstFlag@@3_NA, 0 ; bFirstFlag
  001cb	a3 04 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA+4, eax
  001d0	a1 08 00 00 00	 mov	 eax, DWORD PTR ?AI_method@@3PAHA+8
  001d5	0f 85 ac 00 00
	00		 jne	 $LN32@AI_CheckSe

; 469  : #endif
; 470  : 		if (method < MAX_MAGIC && method >= 0 && magic[method].useFlag) {//ä½¿ç¨é¦æ¬¡ç²¾çµ

  001db	83 f8 08	 cmp	 eax, 8
  001de	0f 87 97 00 00
	00		 ja	 $LN34@AI_CheckSe
  001e4	6b c0 70	 imul	 eax, eax, 112
  001e7	66 83 b8 00 00
	00 00 00	 cmp	 WORD PTR ?magic@@3PAUMAGIC@@A[eax], 0
  001ef	0f 84 86 00 00
	00		 je	 $LN34@AI_CheckSe

; 471  : 			switch (magic[method].target) {

  001f5	0f bf 80 0a 00
	00 00		 movsx	 eax, WORD PTR ?magic@@3PAUMAGIC@@A[eax+10]
  001fc	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  001ff	77 7a		 ja	 SHORT $LN34@AI_CheckSe
  00201	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN102@AI_CheckSe[eax*4]
$LN36@AI_CheckSe:

; 472  : 			case MAGIC_TARGET_MYSELF:
; 473  : 				if (AI_target[2] != TARGET_MYSELF)

  00208	83 3d 08 00 00
	00 01		 cmp	 DWORD PTR ?AI_target@@3PAHA+8, 1

; 474  : 					AI_method[2] = -1;
; 475  : 				break;

  0020f	eb 68		 jmp	 SHORT $LN112@AI_CheckSe
$LN38@AI_CheckSe:

; 476  : 			case MAGIC_TARGET_ALLMYSIDE:
; 477  : 				if (AI_target[2] != TARGET_MYSIDE)

  00211	83 3d 08 00 00
	00 03		 cmp	 DWORD PTR ?AI_target@@3PAHA+8, 3

; 478  : 					AI_method[2] = -1;
; 479  : 				break;

  00218	eb 5f		 jmp	 SHORT $LN112@AI_CheckSe
$LN40@AI_CheckSe:

; 480  : 			case MAGIC_TARGET_WHOLEOTHERSIDE:
; 481  : 				if (AI_target[2] != TARGET_MYSIDE && AI_target[2] != TARGET_OTHERSIDE)

  0021a	a1 08 00 00 00	 mov	 eax, DWORD PTR ?AI_target@@3PAHA+8
  0021f	83 f8 03	 cmp	 eax, 3
  00222	0f 84 8b 00 00
	00		 je	 $LN56@AI_CheckSe
  00228	83 f8 05	 cmp	 eax, 5

; 482  : 					AI_method[2] = -1;
; 483  : 				break;

  0022b	eb 4c		 jmp	 SHORT $LN112@AI_CheckSe
$LN42@AI_CheckSe:

; 484  : 			case MAGIC_TARGET_OTHER:
; 485  : 				if (AI_target[2] != TARGET_MYSELF && AI_target[2] != TARGET_MYPET && AI_target[2] != TARGET_OTHERONE &&

  0022d	a1 08 00 00 00	 mov	 eax, DWORD PTR ?AI_target@@3PAHA+8
  00232	83 f8 01	 cmp	 eax, 1
  00235	74 7c		 je	 SHORT $LN56@AI_CheckSe
  00237	83 f8 02	 cmp	 eax, 2
  0023a	74 77		 je	 SHORT $LN56@AI_CheckSe
  0023c	83 f8 04	 cmp	 eax, 4
  0023f	74 72		 je	 SHORT $LN56@AI_CheckSe
  00241	83 f8 07	 cmp	 eax, 7
  00244	7c 35		 jl	 SHORT $LN34@AI_CheckSe
  00246	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00249	7e 68		 jle	 SHORT $LN56@AI_CheckSe

; 528  : 			AI_CheckSkillSetting(2, method, 0) == 0) AI_method[2] = -1;
; 529  : 	}
; 530  : #endif
; 531  : 	method = AI_method[3];

  0024b	c7 05 08 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?AI_method@@3PAHA+8, -1
  00255	eb 5c		 jmp	 SHORT $LN56@AI_CheckSe
$LN47@AI_CheckSe:

; 486  : 					(TARGET_1 > AI_target[2] || AI_target[2] > TARGET_5))
; 487  : 					AI_method[2] = -1;
; 488  : 				break;
; 489  : 			case MAGIC_TARGET_ALLOTHERSIDE:
; 490  : 				if (AI_target[2] != TARGET_OTHERSIDE)
; 491  : 					AI_method[2] = -1;
; 492  : 				break;
; 493  : 			case MAGIC_TARGET_ALL:
; 494  : 				if (AI_target[2] != TARGET_ALL)

  00257	83 3d 08 00 00
	00 06		 cmp	 DWORD PTR ?AI_target@@3PAHA+8, 6

; 495  : 					AI_method[2] = -1;
; 496  : 				break;

  0025e	eb 19		 jmp	 SHORT $LN112@AI_CheckSe
$LN49@AI_CheckSe:

; 497  : #ifdef __ATTACK_MAGIC
; 498  : 				// æåæä¸äºº
; 499  : 			case MAGIC_TARGET_SINGLE:
; 500  : 				if (AI_target[2] != TARGET_OTHERONE)

  00260	83 3d 08 00 00
	00 04		 cmp	 DWORD PTR ?AI_target@@3PAHA+8, 4

; 501  : 					AI_method[2] = -1;
; 502  : 				break;

  00267	eb 10		 jmp	 SHORT $LN112@AI_CheckSe
$LN51@AI_CheckSe:

; 503  : 				// æåä¸æ´æ
; 504  : 			case MAGIC_TARGET_ONE_ROW:
; 505  : 				if (AI_target[2] != TARGET_ONE_ROW)

  00269	83 3d 08 00 00
	00 0c		 cmp	 DWORD PTR ?AI_target@@3PAHA+8, 12 ; 0000000cH

; 506  : 					AI_method[2] = -1;
; 507  : 				break;

  00270	eb 07		 jmp	 SHORT $LN112@AI_CheckSe
$LN53@AI_CheckSe:

; 528  : 			AI_CheckSkillSetting(2, method, 0) == 0) AI_method[2] = -1;
; 529  : 	}
; 530  : #endif
; 531  : 	method = AI_method[3];

  00272	83 3d 08 00 00
	00 05		 cmp	 DWORD PTR ?AI_target@@3PAHA+8, 5
$LN112@AI_CheckSe:
  00279	74 38		 je	 SHORT $LN56@AI_CheckSe
$LN34@AI_CheckSe:
  0027b	c7 05 08 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?AI_method@@3PAHA+8, -1
  00285	eb 2c		 jmp	 SHORT $LN56@AI_CheckSe
$LN32@AI_CheckSe:

; 508  : 				// æåå¨ä½
; 509  : 			case MAGIC_TARGET_ALL_ROWS:
; 510  : 				if (AI_target[2] != TARGET_OTHERSIDE)
; 511  : 					AI_method[2] = -1;
; 512  : 				break;
; 513  : #endif
; 514  : 			default:
; 515  : 				AI_method[2] = -1;
; 516  : 				break;
; 517  : 			}
; 518  : 		}
; 519  : 		else {//æ²¡æè¿ä¸ªç²¾çµ
; 520  : 			AI_method[2] = -1;
; 521  : 		}
; 522  : #ifdef _AI_NEW_FIRST
; 523  : 	}
; 524  : 	// é¦æ¬¡ç²¾çµ:ä½¿ç¨æè½
; 525  : 	else {
; 526  : 		if (pc.profession_class != 0 && // æèä¸
; 527  : 			(method < MAX_PROFESSION_SKILL && method >= 0) &&

  00287	83 3d 84 a1 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+41348, 0
  0028e	74 23		 je	 SHORT $LN56@AI_CheckSe
  00290	83 f8 19	 cmp	 eax, 25			; 00000019H
  00293	77 1e		 ja	 SHORT $LN56@AI_CheckSe
  00295	6a 00		 push	 0
  00297	50		 push	 eax
  00298	6a 02		 push	 2
  0029a	e8 00 00 00 00	 call	 ?AI_CheckSkillSetting@@YAHHHH@Z ; AI_CheckSkillSetting
  0029f	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?AI_method@@3PAHA+8
  002a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a8	85 c0		 test	 eax, eax
  002aa	0f 44 ce	 cmove	 ecx, esi
  002ad	89 0d 08 00 00
	00		 mov	 DWORD PTR ?AI_method@@3PAHA+8, ecx
$LN56@AI_CheckSe:

; 528  : 			AI_CheckSkillSetting(2, method, 0) == 0) AI_method[2] = -1;
; 529  : 	}
; 530  : #endif
; 531  : 	method = AI_method[3];

  002b3	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?AI_method@@3PAHA+12
  002b8	5e		 pop	 esi

; 532  : 	if (method < MAX_MAGIC && method >= 0) {//ä½¿ç¨ç²¾çµ

  002b9	83 f8 08	 cmp	 eax, 8
  002bc	77 37		 ja	 SHORT $LN57@AI_CheckSe

; 533  : 		if (!magic[method].useFlag || !(str = strstr(magic[method].memo, "æ°ç»ç¶æ")) || !strstr(str, "åå¤")) {//æ²¡ææ°ç»ç¶æåå¤ç²¾çµ

  002be	6b c0 70	 imul	 eax, eax, 112
  002c1	66 83 b8 00 00
	00 00 00	 cmp	 WORD PTR ?magic@@3PAUMAGIC@@A[eax], 0
  002c9	74 2a		 je	 SHORT $LN57@AI_CheckSe
  002cb	8d 80 27 00 00
	00		 lea	 eax, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+39]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  002d1	68 00 00 00 00	 push	 OFFSET ??_C@_04MFANEHND@?$DP?$DP?$DP?$DP@
  002d6	50		 push	 eax
  002d7	e8 00 00 00 00	 call	 _strstr
  002dc	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 533  : 		if (!magic[method].useFlag || !(str = strstr(magic[method].memo, "æ°ç»ç¶æ")) || !strstr(str, "åå¤")) {//æ²¡ææ°ç»ç¶æåå¤ç²¾çµ

  002df	85 c0		 test	 eax, eax
  002e1	74 12		 je	 SHORT $LN57@AI_CheckSe
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_03MNMCLLPK@?$PM?$NO?$DP@
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 _strstr
  002ee	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp

; 533  : 		if (!magic[method].useFlag || !(str = strstr(magic[method].memo, "æ°ç»ç¶æ")) || !strstr(str, "åå¤")) {//æ²¡ææ°ç»ç¶æåå¤ç²¾çµ

  002f1	85 c0		 test	 eax, eax
  002f3	75 0a		 jne	 SHORT $LN58@AI_CheckSe
$LN57@AI_CheckSe:

; 534  : 			AI_method[3] = MAX_MAGIC;
; 535  : 		}
; 536  : 	}
; 537  : 	else {//ä½¿ç¨éå·åå¤æ°ç»ç¶æ
; 538  : 		AI_method[3] = MAX_MAGIC;
; 539  : 	}
; 540  : 	if (AI_target[3] != TARGET_MYSIDE && AI_target[3] != TARGET_MYPET && (TARGET_1 > AI_target[3] || AI_target[3] > TARGET_5))

  002f5	c7 05 0c 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA+12, 9
$LN58@AI_CheckSe:
  002ff	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?AI_target@@3PAHA+12
  00304	83 f8 03	 cmp	 eax, 3
  00307	74 19		 je	 SHORT $LN61@AI_CheckSe
  00309	83 f8 02	 cmp	 eax, 2
  0030c	74 14		 je	 SHORT $LN61@AI_CheckSe
  0030e	83 f8 07	 cmp	 eax, 7
  00311	7c 05		 jl	 SHORT $LN62@AI_CheckSe
  00313	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00316	7e 0a		 jle	 SHORT $LN61@AI_CheckSe
$LN62@AI_CheckSe:

; 541  : 		AI_target[3] = TARGET_MYPET;

  00318	c7 05 0c 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+12, 2
$LN61@AI_CheckSe:

; 542  : 
; 543  : #ifdef _ATTACK_AI
; 544  : 	method = AI_method[4];
; 545  : 	if (pc.profession_class != 0 && // æèä¸

  00322	83 3d 84 a1 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+41348, 0
  00329	a1 10 00 00 00	 mov	 eax, DWORD PTR ?AI_method@@3PAHA+16
  0032e	74 16		 je	 SHORT $LN63@AI_CheckSe
  00330	83 f8 19	 cmp	 eax, 25			; 00000019H
  00333	77 11		 ja	 SHORT $LN63@AI_CheckSe

; 546  : 		(method < MAX_PROFESSION_SKILL && method >= 0)) {// ä½¿ç¨èä¸æè½
; 547  : 		if (AI_CheckSkillSetting(4, method, 0) == 0) {

  00335	6a 00		 push	 0
  00337	50		 push	 eax
  00338	6a 04		 push	 4
  0033a	e8 00 00 00 00	 call	 ?AI_CheckSkillSetting@@YAHHHH@Z ; AI_CheckSkillSetting
  0033f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00342	85 c0		 test	 eax, eax
  00344	75 14		 jne	 SHORT $LN64@AI_CheckSe
$LN63@AI_CheckSe:

; 548  : 			AI_method[4] = MAX_PROFESSION_SKILL;
; 549  : 			AI_target[4] = TARGET_OTHERONE;
; 550  : 		}
; 551  : 	}
; 552  : 	else {// æ®éæ»å»
; 553  : 		AI_method[4] = MAX_PROFESSION_SKILL;
; 554  : 		AI_target[4] = TARGET_OTHERONE;
; 555  : 	}
; 556  : #endif
; 557  : 	AI_Save();

  00346	c7 05 10 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+16, 4
  00350	c7 05 10 00 00
	00 1a 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA+16, 26 ; 0000001aH
$LN64@AI_CheckSe:
  0035a	e9 00 00 00 00	 jmp	 ?AI_Save@@YAHXZ		; AI_Save
  0035f	90		 npad	 1
$LN101@AI_CheckSe:

; 558  : 	}

  00360	00 00 00 00	 DD	 $LN30@AI_CheckSe
  00364	00 00 00 00	 DD	 $LN25@AI_CheckSe
  00368	00 00 00 00	 DD	 $LN24@AI_CheckSe
  0036c	00 00 00 00	 DD	 $LN28@AI_CheckSe
$LN100@AI_CheckSe:
  00370	00		 DB	 0
  00371	01		 DB	 1
  00372	02		 DB	 2
  00373	03		 DB	 3
  00374	03		 DB	 3
  00375	03		 DB	 3
  00376	03		 DB	 3
  00377	03		 DB	 3
  00378	02		 DB	 2
  00379	0f 1f 00	 npad	 3
$LN102@AI_CheckSe:
  0037c	00 00 00 00	 DD	 $LN36@AI_CheckSe
  00380	00 00 00 00	 DD	 $LN42@AI_CheckSe
  00384	00 00 00 00	 DD	 $LN38@AI_CheckSe
  00388	00 00 00 00	 DD	 $LN53@AI_CheckSe
  0038c	00 00 00 00	 DD	 $LN47@AI_CheckSe
  00390	00 00 00 00	 DD	 $LN34@AI_CheckSe
  00394	00 00 00 00	 DD	 $LN34@AI_CheckSe
  00398	00 00 00 00	 DD	 $LN34@AI_CheckSe
  0039c	00 00 00 00	 DD	 $LN40@AI_CheckSe
  003a0	00 00 00 00	 DD	 $LN49@AI_CheckSe
  003a4	00 00 00 00	 DD	 $LN51@AI_CheckSe
  003a8	00 00 00 00	 DD	 $LN53@AI_CheckSe
?AI_CheckSetting@@YAXXZ ENDP				; AI_CheckSetting
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_CheckSkillSetting@@YAHHHH@Z
_TEXT	SEGMENT
_methodkind$ = 8					; size = 4
_method$ = 12						; size = 4
_UpDown$ = 16						; size = 4
?AI_CheckSkillSetting@@YAHHHH@Z PROC			; AI_CheckSkillSetting, COMDAT

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 270  : 	int ret = 1;
; 271  : 	if (methodkind == 4 && method == MAX_PROFESSION_SKILL) {

  00003	8b 55 08	 mov	 edx, DWORD PTR _methodkind$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _method$[ebp]
  00009	56		 push	 esi
  0000a	be 01 00 00 00	 mov	 esi, 1
  0000f	83 fa 04	 cmp	 edx, 4
  00012	75 14		 jne	 SHORT $LN4@AI_CheckSk
  00014	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00017	75 28		 jne	 SHORT $LN6@AI_CheckSk

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  00019	8b c6		 mov	 eax, esi
  0001b	c7 05 10 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+16, 4
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN4@AI_CheckSk:

; 272  : 		AI_target[methodkind] = TARGET_OTHERONE;
; 273  : 		return ret;
; 274  : 	}
; 275  : 	else if (methodkind == 2 && method == MAX_PROFESSION_SKILL) {

  00028	83 fa 02	 cmp	 edx, 2
  0002b	75 14		 jne	 SHORT $LN6@AI_CheckSk
  0002d	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00030	75 0f		 jne	 SHORT $LN6@AI_CheckSk

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  00032	8b c6		 mov	 eax, esi
  00034	c7 05 08 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?AI_method@@3PAHA+8, -1
  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN6@AI_CheckSk:

; 276  : 		AI_method[methodkind] = -1;
; 277  : 		return ret;
; 278  : 	}
; 279  : 
; 280  : 	if (profession_skill[method].costmp <= 0
; 281  : 		&& profession_skill[method].skillId != 11
; 282  : 		&& profession_skill[method].skillId != 75) return 0;

  00041	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00044	c1 e0 06	 shl	 eax, 6
  00047	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184], 0
  0004e	7f 18		 jg	 SHORT $LN7@AI_CheckSk
  00050	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+2]
  00057	66 83 f9 0b	 cmp	 cx, 11			; 0000000bH
  0005b	74 0b		 je	 SHORT $LN7@AI_CheckSk
  0005d	66 83 f9 4b	 cmp	 cx, 75			; 0000004bH
  00061	74 05		 je	 SHORT $LN7@AI_CheckSk
  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN7@AI_CheckSk:

; 283  : 
; 284  : 	if (AI_target[methodkind] == 0) AI_target[methodkind] = TARGET_ONE_ROW;

  00068	8b 0c 95 00 00
	00 00		 mov	 ecx, DWORD PTR ?AI_target@@3PAHA[edx*4]
  0006f	85 c9		 test	 ecx, ecx
  00071	75 0c		 jne	 SHORT $LN8@AI_CheckSk
  00073	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00078	89 0c 95 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[edx*4], ecx
$LN8@AI_CheckSk:

; 285  : 
; 286  : 
; 287  : 	switch (profession_skill[method].skillId) {

  0007f	0f bf 80 02 00
	00 00		 movsx	 eax, WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+2]
  00086	48		 dec	 eax
  00087	83 f8 47	 cmp	 eax, 71			; 00000047H
  0008a	0f 87 ca 00 00
	00		 ja	 $LN32@AI_CheckSk
  00090	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN36@AI_CheckSk[eax]
  00097	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN37@AI_CheckSk[eax*4]
$LN9@AI_CheckSk:

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  0009e	83 f9 04	 cmp	 ecx, 4
  000a1	0f 84 b5 00 00
	00		 je	 $LN2@AI_CheckSk
$LN15@AI_CheckSk:
  000a7	8b c6		 mov	 eax, esi
  000a9	c7 04 95 00 00
	00 00 04 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[edx*4], 4
  000b4	5e		 pop	 esi
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN11@AI_CheckSk:

; 288  : 	case 1://ç«å±±æ³			æåäººæ»å»åæ
; 289  : 	case 2://ééç¸å¯¹		æå¤äººæ»å»åæ
; 290  : 	case 3://ä¸çæ«æ¥  	æå¤äººæ»å»åæ
; 291  : 	case 4://å°çæ¯			æå¤äººæ»å»åæ
; 292  : 	case 5://éèº«æ¯			æåäººæ»å»åæ
; 293  : 	case 6://å¬é·æ¯			æåäººæ»å»åæ
; 294  : 	case 7://æ´é£é¨			æå¤äººæ»å»åæ
; 295  : 	case 8://çµæµæ¯			æå¤äººæ»å»åæ
; 296  : 	case 9://ç«æç			æå¤äººæ»å»åæ
; 297  : 	case 10://åè¡è		æåäººæ»å»åæ
; 298  : 	case 12://å°ç®­æ¯		æåäººæ»å»åæ		
; 299  : 	case 13://ç«é¾æª		æå¤äººæ»å»åæ
; 300  : 	case 14://å°éæ¯		æåäººæ»å»åæ
; 301  : 	case 22://çå»			æåäººæ»å»åæ
; 302  : 	case 23://è¿ç¯æ»å»	æåäººæ»å»åæ
; 303  : 	case 24://åéæ»å»	æåäººæ»å»åæ
; 304  : 	case 38://ç¾å»			æåäººæ»å»åæ
; 305  : 	case 39://è´¯ç©¿æ»å»	æåäººæ»å»åæ
; 306  : 	case 40://æ¿æ­»æ»å»	æåäººæ»å»åæ
; 307  : 	case 41://åææ»å»	æå¤äººæ»å»åæ
; 308  : 	case 42://æ··ä¹±æ»å»	æå¤äººæ»å»åæ
; 309  : 	case 46://æ æ ¹ç¼ ç»	æåäººæ»å»åæ
; 310  : 	case 48://å¤©ç½å°ç½	æåäººæ»å»åæ
; 311  : 	case 49://å°¸ä½æ å¤º	æåäººæ»å»åæ
; 312  : 	case 50://æ¯ç´ æ­¦å¨	æåäººæ»å»åæ
; 313  : 	case 51://å¼±ç¹æ»å»	æåäººæ»å»åæ
; 314  : 	case 54://åº§éªæ»å»	æåäººæ»å»åæ
; 315  : 	case 72://ç ´é¤ç»ç  ææåä½
; 316  : 		if (AI_target[methodkind] != TARGET_OTHERONE) AI_target[methodkind] = TARGET_OTHERONE;
; 317  : 		break;
; 318  : 	case 15://ç«éä½		æä¸æ¹ä½¿ç¨
; 319  : 	case 16://é·éä½		æä¸æ¹ä½¿ç¨
; 320  : 	case 17://å°éä½		æä¸æ¹ä½¿ç¨
; 321  : 		// down
; 322  : 		if (UpDown) {

  000b7	83 7d 10 00	 cmp	 DWORD PTR _UpDown$[ebp], 0
  000bb	74 39		 je	 SHORT $LN12@AI_CheckSk

; 323  : 			if (AI_target[methodkind] == TARGET_MYPET || AI_target[methodkind] == TARGET_MYSIDE) AI_target[methodkind] = TARGET_OTHERONE;

  000bd	83 f9 02	 cmp	 ecx, 2
  000c0	74 e5		 je	 SHORT $LN15@AI_CheckSk
  000c2	83 f9 03	 cmp	 ecx, 3
  000c5	74 e0		 je	 SHORT $LN15@AI_CheckSk

; 324  : 			if (AI_target[methodkind] == TARGET_OTHERSIDE || AI_target[methodkind] == TARGET_ALL) AI_target[methodkind] = TARGET_1;

  000c7	83 f9 05	 cmp	 ecx, 5
  000ca	74 1a		 je	 SHORT $LN17@AI_CheckSk
  000cc	83 f9 06	 cmp	 ecx, 6
  000cf	74 15		 je	 SHORT $LN17@AI_CheckSk

; 325  : 			if (AI_target[methodkind] == TARGET_ONE_ROW) AI_target[methodkind] = TARGET_MYSELF;

  000d1	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  000d4	0f 85 82 00 00
	00		 jne	 $LN2@AI_CheckSk
  000da	89 34 95 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[edx*4], esi

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  000e1	8b c6		 mov	 eax, esi
  000e3	5e		 pop	 esi
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
$LN17@AI_CheckSk:
  000e6	8b c6		 mov	 eax, esi
  000e8	c7 04 95 00 00
	00 00 07 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[edx*4], 7
  000f3	5e		 pop	 esi
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
$LN12@AI_CheckSk:

; 326  : 		}
; 327  : 		// up
; 328  : 		else {
; 329  : 			if (AI_target[methodkind] == TARGET_MYPET || AI_target[methodkind] == TARGET_MYSIDE) AI_target[methodkind] = TARGET_MYSELF;

  000f6	83 f9 02	 cmp	 ecx, 2
  000f9	74 29		 je	 SHORT $LN20@AI_CheckSk
  000fb	83 f9 03	 cmp	 ecx, 3
  000fe	74 24		 je	 SHORT $LN20@AI_CheckSk

; 330  : 			if (AI_target[methodkind] == TARGET_OTHERSIDE || AI_target[methodkind] == TARGET_ALL) AI_target[methodkind] = TARGET_OTHERONE;

  00100	83 f9 05	 cmp	 ecx, 5
  00103	74 a2		 je	 SHORT $LN15@AI_CheckSk
  00105	83 f9 06	 cmp	 ecx, 6
  00108	74 9d		 je	 SHORT $LN15@AI_CheckSk

; 331  : 			if (AI_target[methodkind] == TARGET_ONE_ROW) AI_target[methodkind] = TARGET_5;

  0010a	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  0010d	75 4d		 jne	 SHORT $LN2@AI_CheckSk

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  0010f	8b c6		 mov	 eax, esi
  00111	c7 04 95 00 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[edx*4], 11 ; 0000000bH
  0011c	5e		 pop	 esi
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
$LN24@AI_CheckSk:

; 332  : 		}
; 333  : 		break;
; 334  : 	case 21://ç§»å½¢æ¢ä½	æ¬ä½ä½¿ç¨
; 335  : 	case 35://æ¿åæ»å»	æ¬ä½ä½¿ç¨
; 336  : 	case 36://è½éèé	æ¬ä½ä½¿ç¨
; 337  : 	case 37://ä¸æ³¨ææ	æ¬ä½ä½¿ç¨
; 338  : 	case 47://é·é±			æ¬ä½ä½¿ç¨
; 339  : 	case 53://æ ¼æ¡£			æ¬ä½ä½¿ç¨
; 340  : 	case 59://çµæ			æ¬ä½ä½¿ç¨
; 341  : 	case 60://ç«æ			æ¬ä½ä½¿ç¨
; 342  : 	case 61://å°æ			æ¬ä½ä½¿ç¨
; 343  : 	case 66://èªç¶å¨è½	æ¬ä½ä½¿ç¨
; 344  : 		if (AI_target[methodkind] != TARGET_MYSELF) AI_target[methodkind] = TARGET_MYSELF;

  0011f	83 f9 01	 cmp	 ecx, 1
  00122	74 38		 je	 SHORT $LN2@AI_CheckSk
$LN20@AI_CheckSk:

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  00124	89 34 95 00 00
	00 00		 mov	 DWORD PTR ?AI_target@@3PAHA[edx*4], esi
  0012b	8b c6		 mov	 eax, esi
  0012d	5e		 pop	 esi
  0012e	5d		 pop	 ebp
  0012f	c3		 ret	 0
$LN26@AI_CheckSk:

; 345  : 		break;
; 346  : 	case 34://èå·²ä¸ºå	æä¸æ¹ä½¿ç¨
; 347  : 
; 348  : 
; 349  : 	case 68://å°ç»ç		ææ¹å¨ä½
; 350  : 	case 69://æ°´ç»ç		ææ¹å¨ä½
; 351  : 	case 70://ç«ç»ç		ææ¹å¨ä½
; 352  : 	case 71://é£ç»ç		ææ¹å¨ä½
; 353  : 		if (AI_target[methodkind] != TARGET_MYSIDE) AI_target[methodkind] = TARGET_MYSIDE;

  00130	83 f9 03	 cmp	 ecx, 3
  00133	74 27		 je	 SHORT $LN2@AI_CheckSk

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  00135	8b c6		 mov	 eax, esi
  00137	c7 04 95 00 00
	00 00 03 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[edx*4], 3
  00142	5e		 pop	 esi
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
$LN30@AI_CheckSk:

; 354  : 		break;
; 355  : 	case 52://ææ¨			æåäººæ»å»åæ(éå® ç©)
; 356  : 	case 56://é©¯æå® ç©	æä¸æ¹ä½¿ç¨
; 357  : 	case 62://éå¿			æåäººæ»å»åæ(éå® ç©)
; 358  : 		if (AI_target[methodkind] != TARGET_OTHERONE) AI_target[methodkind] = TARGET_OTHERONE;
; 359  : 		break;
; 360  : 	case 57://æ¿æå® ç©	æä¸æ¹ä½¿ç¨
; 361  : 		if (AI_target[methodkind] != TARGET_MYPET) AI_target[methodkind] = TARGET_MYPET;

  00145	83 f9 02	 cmp	 ecx, 2
  00148	74 12		 je	 SHORT $LN2@AI_CheckSk

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  0014a	8b c6		 mov	 eax, esi
  0014c	c7 04 95 00 00
	00 00 02 00 00
	00		 mov	 DWORD PTR ?AI_target@@3PAHA[edx*4], 2
  00157	5e		 pop	 esi
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
$LN32@AI_CheckSk:

; 362  : 		break;
; 363  : 	case 11://åè¡ææ§	æ¬ä½å¸æ¶
; 364  : 	case 18://ç«çç»åº¦	æ æ³ä½¿ç¨
; 365  : 	case 19://é·çç»åº¦	æ æ³ä½¿ç¨
; 366  : 	case 20://å°çç»åº¦	æ æ³ä½¿ç¨
; 367  : 	case 25://åé¿			æ æ³ä½¿ç¨
; 368  : 	case 26://ç²¾éæª		æ æ³ä½¿ç¨
; 369  : 	case 27://ç²¾éæ§		æ æ³ä½¿ç¨
; 370  : 	case 28://ç²¾éæ£		æ æ³ä½¿ç¨
; 371  : 	case 33://ç¶æåå¤	æ æ³ä½¿ç¨
; 372  : 	case 43://äºåæµ		æ æ³ä½¿ç¨
; 373  : 	case 44://è¿½å¯»æè¸ª	éææä½¿ç¨
; 374  : 	case 45://åé¿ææ	éææä½¿ç¨
; 375  : 	case 55://å å·¥			?
; 376  : 	case 58://èªç»èªè¶³	?
; 377  : 	case 29://ç²¾éå¼		æ æ³ä½¿ç¨
; 378  : 	case 30://ç²¾éååé		æ æ³ä½¿ç¨
; 379  : 	case 31://ç²¾éææ·ç³		æ æ³ä½¿ç¨
; 380  : 	case 32://ç²¾éææ·æ§		æ æ³ä½¿ç¨
; 381  : 	default:
; 382  : 		ret = 0;

  0015a	33 f6		 xor	 esi, esi
$LN2@AI_CheckSk:

; 383  : 		break;
; 384  : 	}
; 385  : 	return ret;
; 386  : }

  0015c	8b c6		 mov	 eax, esi
  0015e	5e		 pop	 esi
  0015f	5d		 pop	 ebp
  00160	c3		 ret	 0
  00161	0f 1f 00	 npad	 3
$LN37@AI_CheckSk:
  00164	00 00 00 00	 DD	 $LN9@AI_CheckSk
  00168	00 00 00 00	 DD	 $LN11@AI_CheckSk
  0016c	00 00 00 00	 DD	 $LN24@AI_CheckSk
  00170	00 00 00 00	 DD	 $LN26@AI_CheckSk
  00174	00 00 00 00	 DD	 $LN30@AI_CheckSk
  00178	00 00 00 00	 DD	 $LN32@AI_CheckSk
$LN36@AI_CheckSk:
  0017c	00		 DB	 0
  0017d	00		 DB	 0
  0017e	00		 DB	 0
  0017f	00		 DB	 0
  00180	00		 DB	 0
  00181	00		 DB	 0
  00182	00		 DB	 0
  00183	00		 DB	 0
  00184	00		 DB	 0
  00185	00		 DB	 0
  00186	05		 DB	 5
  00187	00		 DB	 0
  00188	00		 DB	 0
  00189	00		 DB	 0
  0018a	01		 DB	 1
  0018b	01		 DB	 1
  0018c	01		 DB	 1
  0018d	05		 DB	 5
  0018e	05		 DB	 5
  0018f	05		 DB	 5
  00190	02		 DB	 2
  00191	00		 DB	 0
  00192	00		 DB	 0
  00193	00		 DB	 0
  00194	05		 DB	 5
  00195	05		 DB	 5
  00196	05		 DB	 5
  00197	05		 DB	 5
  00198	05		 DB	 5
  00199	05		 DB	 5
  0019a	05		 DB	 5
  0019b	05		 DB	 5
  0019c	05		 DB	 5
  0019d	03		 DB	 3
  0019e	02		 DB	 2
  0019f	02		 DB	 2
  001a0	02		 DB	 2
  001a1	00		 DB	 0
  001a2	00		 DB	 0
  001a3	00		 DB	 0
  001a4	00		 DB	 0
  001a5	00		 DB	 0
  001a6	05		 DB	 5
  001a7	05		 DB	 5
  001a8	05		 DB	 5
  001a9	00		 DB	 0
  001aa	02		 DB	 2
  001ab	00		 DB	 0
  001ac	00		 DB	 0
  001ad	00		 DB	 0
  001ae	00		 DB	 0
  001af	00		 DB	 0
  001b0	02		 DB	 2
  001b1	00		 DB	 0
  001b2	05		 DB	 5
  001b3	00		 DB	 0
  001b4	04		 DB	 4
  001b5	05		 DB	 5
  001b6	02		 DB	 2
  001b7	02		 DB	 2
  001b8	02		 DB	 2
  001b9	00		 DB	 0
  001ba	05		 DB	 5
  001bb	05		 DB	 5
  001bc	05		 DB	 5
  001bd	02		 DB	 2
  001be	05		 DB	 5
  001bf	03		 DB	 3
  001c0	03		 DB	 3
  001c1	03		 DB	 3
  001c2	03		 DB	 3
  001c3	00		 DB	 0
?AI_CheckSkillSetting@@YAHHHH@Z ENDP			; AI_CheckSkillSetting
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_Save@@YAHXZ
_TEXT	SEGMENT
?AI_Save@@YAHXZ PROC					; AI_Save, COMDAT

; 237  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 238  : 	FILE* fp;
; 239  : 	BOOL	ret = FALSE;
; 240  : 	if (fp = fopen(AI_FILE_NAME, "w+")) {

  00002	68 00 00 00 00	 push	 OFFSET ??_C@_02CHHAKFFB@w?$CL@
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PDHJLAOE@data?2AISetting?4dat@
  0000c	33 ff		 xor	 edi, edi
  0000e	e8 00 00 00 00	 call	 _fopen
  00013	8b f0		 mov	 esi, eax
  00015	83 c4 08	 add	 esp, 8
  00018	85 f6		 test	 esi, esi
  0001a	0f 84 b5 00 00
	00		 je	 $LN7@AI_Save

; 241  : 		if (0 == fseek(fp, (16 + sizeof(AI) + sizeof(AI_method) + sizeof(AI_target) + sizeof(AI_limit)

  00020	6b 05 00 00 00
	00 55		 imul	 eax, DWORD PTR ?AICnt@@3HA, 85
  00027	57		 push	 edi
  00028	83 c0 10	 add	 eax, 16			; 00000010H
  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _fseek
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	85 c0		 test	 eax, eax
  00037	0f 85 98 00 00
	00		 jne	 $LN7@AI_Save

; 242  : #ifdef _AI_OTHER
; 243  : 			+ sizeof(AI_OtherSetting)
; 244  : #endif
; 245  : #ifdef _AI_NEW_FIRST
; 246  : 			+ sizeof(bFirstFlag)
; 247  : #endif
; 248  : 			) * AICnt + 16, SEEK_SET))
; 249  : 		{
; 250  : 			if (fwrite(&AI, sizeof(AI), 1, fp) >= 1 &&
; 251  : 				fwrite(AI_method, sizeof(AI_method), 1, fp) >= 1 &&
; 252  : 				fwrite(AI_target, sizeof(AI_target), 1, fp) >= 1 &&
; 253  : 				fwrite(AI_limit, sizeof(AI_limit), 1, fp) >= 1
; 254  : #ifdef _AI_OTHER
; 255  : 				&& fwrite(AI_OtherSetting, sizeof(AI_OtherSetting), 1, fp) >= 1
; 256  : #endif
; 257  : #ifdef _AI_NEW_FIRST
; 258  : 				&& fwrite(&bFirstFlag, sizeof(bFirstFlag), 1, fp) >= 1

  0003d	56		 push	 esi
  0003e	6a 01		 push	 1
  00040	6a 04		 push	 4
  00042	68 00 00 00 00	 push	 OFFSET ?AI@@3HA		; AI
  00047	e8 00 00 00 00	 call	 _fwrite
  0004c	83 c4 10	 add	 esp, 16			; 00000010H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	72 78		 jb	 SHORT $LN4@AI_Save
  00054	56		 push	 esi
  00055	6a 01		 push	 1
  00057	6a 14		 push	 20			; 00000014H
  00059	68 00 00 00 00	 push	 OFFSET ?AI_method@@3PAHA ; AI_method
  0005e	e8 00 00 00 00	 call	 _fwrite
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	83 f8 01	 cmp	 eax, 1
  00069	72 61		 jb	 SHORT $LN4@AI_Save
  0006b	56		 push	 esi
  0006c	6a 01		 push	 1
  0006e	6a 14		 push	 20			; 00000014H
  00070	68 00 00 00 00	 push	 OFFSET ?AI_target@@3PAHA ; AI_target
  00075	e8 00 00 00 00	 call	 _fwrite
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	83 f8 01	 cmp	 eax, 1
  00080	72 4a		 jb	 SHORT $LN4@AI_Save
  00082	56		 push	 esi
  00083	6a 01		 push	 1
  00085	6a 14		 push	 20			; 00000014H
  00087	68 00 00 00 00	 push	 OFFSET ?AI_limit@@3PAHA	; AI_limit
  0008c	e8 00 00 00 00	 call	 _fwrite
  00091	83 c4 10	 add	 esp, 16			; 00000010H
  00094	83 f8 01	 cmp	 eax, 1
  00097	72 33		 jb	 SHORT $LN4@AI_Save
  00099	56		 push	 esi
  0009a	6a 01		 push	 1
  0009c	6a 04		 push	 4
  0009e	68 00 00 00 00	 push	 OFFSET ?AI_OtherSetting@@3PAHA ; AI_OtherSetting
  000a3	e8 00 00 00 00	 call	 _fwrite
  000a8	83 c4 10	 add	 esp, 16			; 00000010H
  000ab	83 f8 01	 cmp	 eax, 1
  000ae	72 1c		 jb	 SHORT $LN4@AI_Save
  000b0	56		 push	 esi
  000b1	6a 01		 push	 1
  000b3	6a 01		 push	 1
  000b5	68 00 00 00 00	 push	 OFFSET ?bFirstFlag@@3_NA ; bFirstFlag
  000ba	e8 00 00 00 00	 call	 _fwrite
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
  000c7	3b c1		 cmp	 eax, ecx
  000c9	0f 43 f9	 cmovae	 edi, ecx
$LN4@AI_Save:

; 259  : #endif
; 260  : 				)	ret = TRUE;
; 261  : 			fclose(fp);

  000cc	56		 push	 esi
  000cd	e8 00 00 00 00	 call	 _fclose
  000d2	83 c4 04	 add	 esp, 4
$LN7@AI_Save:

; 262  : 		}
; 263  : 	}
; 264  : 	return ret;
; 265  : }

  000d5	8b c7		 mov	 eax, edi
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	c3		 ret	 0
?AI_Save@@YAHXZ ENDP					; AI_Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_ReLoad@@YAHXZ
_TEXT	SEGMENT
?AI_ReLoad@@YAHXZ PROC					; AI_ReLoad, COMDAT

; 206  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 207  : 	FILE* fp;
; 208  : 	BOOL	ret = FALSE;
; 209  : 	if (fp = fopen(AI_FILE_NAME, "rb")) {

  00002	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PDHJLAOE@data?2AISetting?4dat@
  0000c	33 ff		 xor	 edi, edi
  0000e	e8 00 00 00 00	 call	 _fopen
  00013	8b f0		 mov	 esi, eax
  00015	83 c4 08	 add	 esp, 8
  00018	85 f6		 test	 esi, esi
  0001a	0f 84 b5 00 00
	00		 je	 $LN6@AI_ReLoad

; 210  : 		if (0 == fseek(fp, (16 + sizeof(AI) + sizeof(AI_method) + sizeof(AI_target) + sizeof(AI_limit)

  00020	6b 05 00 00 00
	00 55		 imul	 eax, DWORD PTR ?AICnt@@3HA, 85
  00027	57		 push	 edi
  00028	83 c0 10	 add	 eax, 16			; 00000010H
  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _fseek
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	85 c0		 test	 eax, eax
  00037	0f 85 8f 00 00
	00		 jne	 $LN4@AI_ReLoad

; 211  : #ifdef _AI_OTHER
; 212  : 			+ sizeof(AI_OtherSetting)
; 213  : #endif
; 214  : #ifdef _AI_NEW_FIRST
; 215  : 			+ sizeof(bFirstFlag)
; 216  : #endif
; 217  : 			) * AICnt + 16, SEEK_SET))
; 218  : 		{
; 219  : 			if (fread(&AI, sizeof(AI), 1, fp) >= 1 &&
; 220  : 				fread(AI_method, sizeof(AI_method), 1, fp) >= 1 &&
; 221  : 				fread(AI_target, sizeof(AI_target), 1, fp) >= 1 &&
; 222  : 				fread(AI_limit, sizeof(AI_limit), 1, fp) >= 1
; 223  : #ifdef _AI_OTHER
; 224  : 				&& fread(AI_OtherSetting, sizeof(AI_OtherSetting), 1, fp) >= 1
; 225  : #endif
; 226  : #ifdef _AI_NEW_FIRST
; 227  : 				&& fread(&bFirstFlag, sizeof(bFirstFlag), 1, fp) >= 1

  0003d	56		 push	 esi
  0003e	6a 01		 push	 1
  00040	6a 04		 push	 4
  00042	68 00 00 00 00	 push	 OFFSET ?AI@@3HA		; AI
  00047	e8 00 00 00 00	 call	 _fread
  0004c	83 c4 10	 add	 esp, 16			; 00000010H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	72 78		 jb	 SHORT $LN4@AI_ReLoad
  00054	56		 push	 esi
  00055	6a 01		 push	 1
  00057	6a 14		 push	 20			; 00000014H
  00059	68 00 00 00 00	 push	 OFFSET ?AI_method@@3PAHA ; AI_method
  0005e	e8 00 00 00 00	 call	 _fread
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	83 f8 01	 cmp	 eax, 1
  00069	72 61		 jb	 SHORT $LN4@AI_ReLoad
  0006b	56		 push	 esi
  0006c	6a 01		 push	 1
  0006e	6a 14		 push	 20			; 00000014H
  00070	68 00 00 00 00	 push	 OFFSET ?AI_target@@3PAHA ; AI_target
  00075	e8 00 00 00 00	 call	 _fread
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	83 f8 01	 cmp	 eax, 1
  00080	72 4a		 jb	 SHORT $LN4@AI_ReLoad
  00082	56		 push	 esi
  00083	6a 01		 push	 1
  00085	6a 14		 push	 20			; 00000014H
  00087	68 00 00 00 00	 push	 OFFSET ?AI_limit@@3PAHA	; AI_limit
  0008c	e8 00 00 00 00	 call	 _fread
  00091	83 c4 10	 add	 esp, 16			; 00000010H
  00094	83 f8 01	 cmp	 eax, 1
  00097	72 33		 jb	 SHORT $LN4@AI_ReLoad
  00099	56		 push	 esi
  0009a	6a 01		 push	 1
  0009c	6a 04		 push	 4
  0009e	68 00 00 00 00	 push	 OFFSET ?AI_OtherSetting@@3PAHA ; AI_OtherSetting
  000a3	e8 00 00 00 00	 call	 _fread
  000a8	83 c4 10	 add	 esp, 16			; 00000010H
  000ab	83 f8 01	 cmp	 eax, 1
  000ae	72 1c		 jb	 SHORT $LN4@AI_ReLoad
  000b0	56		 push	 esi
  000b1	6a 01		 push	 1
  000b3	6a 01		 push	 1
  000b5	68 00 00 00 00	 push	 OFFSET ?bFirstFlag@@3_NA ; bFirstFlag
  000ba	e8 00 00 00 00	 call	 _fread
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
  000c7	3b c1		 cmp	 eax, ecx
  000c9	0f 43 f9	 cmovae	 edi, ecx
$LN4@AI_ReLoad:

; 228  : #endif
; 229  : 				) ret = TRUE;
; 230  : 		}
; 231  : 		fclose(fp);

  000cc	56		 push	 esi
  000cd	e8 00 00 00 00	 call	 _fclose
  000d2	83 c4 04	 add	 esp, 4
$LN6@AI_ReLoad:

; 232  : 	}
; 233  : 	return ret;
; 234  : }

  000d5	8b c7		 mov	 eax, edi
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	c3		 ret	 0
?AI_ReLoad@@YAHXZ ENDP					; AI_ReLoad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_Load@@YAHPAD@Z
_TEXT	SEGMENT
_id2$ = -36						; size = 16
_id$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_user$ = 8						; size = 4
?AI_Load@@YAHPAD@Z PROC					; AI_Load, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _user$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi

; 69   : 	char id[16];
; 70   : 	char id2[16];
; 71   : 	FILE* fp;
; 72   : 	BOOL ret = FALSE;

  00015	33 ff		 xor	 edi, edi

; 73   : 	int i;
; 74   : 	memcpy(id, user, 16);

  00017	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 75   : 	AI = AI_NONE;
; 76   : 	AI_method[0] = MAX_MAGIC;
; 77   : 	AI_target[0] = TARGET_MYSELF;
; 78   : 	AI_limit[0] = 30;
; 79   : #ifndef _ATTACK_AI
; 80   : 	AI_method[1] = MAX_MAGIC;
; 81   : #else
; 82   : 	AI_method[1] = -1;
; 83   : #endif
; 84   : 	AI_target[1] = TARGET_MYSELF;
; 85   : 	AI_limit[1] = 30;
; 86   : 	AI_method[2] = -1;
; 87   : 	AI_method[3] = MAX_MAGIC;
; 88   : 	AI_target[3] = TARGET_MYSELF;
; 89   : #ifdef _ATTACK_AI
; 90   : 	AI_method[4] = MAX_PROFESSION_SKILL;
; 91   : 	AI_target[4] = TARGET_OTHERONE;
; 92   : #endif
; 93   : #ifdef _AI_OTHER
; 94   : 	AI_OtherSetting[0] = 0;
; 95   : #endif
; 96   : #ifdef _AI_NEW_FIRST
; 97   : 	bFirstFlag = false;
; 98   : #endif
; 99   : 	if ((fp = fopen(AI_FILE_NAME, "r+b")) == NULL) {

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_03HMFOOINA@r?$CLb@
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PDHJLAOE@data?2AISetting?4dat@
  00024	0f 11 45 ec	 movups	 XMMWORD PTR _id$[ebp], xmm0
  00028	89 3d 00 00 00
	00		 mov	 DWORD PTR ?AI@@3HA, edi	; AI
  0002e	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA, 9
  00038	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA, 1
  00042	c7 05 00 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?AI_limit@@3PAHA, 30 ; 0000001eH
  0004c	c7 05 04 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?AI_method@@3PAHA+4, -1
  00056	c7 05 04 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+4, 1
  00060	c7 05 04 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?AI_limit@@3PAHA+4, 30 ; 0000001eH
  0006a	c7 05 08 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?AI_method@@3PAHA+8, -1
  00074	c7 05 0c 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA+12, 9
  0007e	c7 05 0c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+12, 1
  00088	c7 05 10 00 00
	00 1a 00 00 00	 mov	 DWORD PTR ?AI_method@@3PAHA+16, 26 ; 0000001aH
  00092	c7 05 10 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?AI_target@@3PAHA+16, 4
  0009c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?AI_OtherSetting@@3PAHA, edi ; AI_OtherSetting
  000a2	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?bFirstFlag@@3_NA, 0 ; bFirstFlag
  000a9	e8 00 00 00 00	 call	 _fopen
  000ae	8b f0		 mov	 esi, eax
  000b0	83 c4 08	 add	 esp, 8
  000b3	85 f6		 test	 esi, esi
  000b5	0f 85 e2 00 00
	00		 jne	 $LN26@AI_Load

; 100  : 		if ((fp = fopen(AI_FILE_NAME, "wb")) != NULL) {

  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PDHJLAOE@data?2AISetting?4dat@
  000c5	e8 00 00 00 00	 call	 _fopen
  000ca	8b f0		 mov	 esi, eax
  000cc	83 c4 08	 add	 esp, 8
  000cf	85 f6		 test	 esi, esi
  000d1	0f 84 b4 00 00
	00		 je	 $LN14@AI_Load

; 101  : 			for (i = 0; i < 16; i++)

  000d7	33 d2		 xor	 edx, edx
  000d9	33 c9		 xor	 ecx, ecx
  000db	0f 1f 44 00 00	 npad	 5
$LL4@AI_Load:

; 102  : 				id[i] ^= IdEncryptionTbl[16 - i];

  000e0	0f b6 81 40 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+64]
  000e7	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  000ea	30 44 15 e8	 xor	 BYTE PTR _id$[ebp+edx-4], al
  000ee	0f b6 81 3c 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+60]
  000f5	30 44 15 e9	 xor	 BYTE PTR _id$[ebp+edx-3], al
  000f9	0f b6 81 38 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+56]
  00100	30 44 15 ea	 xor	 BYTE PTR _id$[ebp+edx-2], al
  00104	0f b6 81 34 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+52]
  0010b	83 e9 10	 sub	 ecx, 16			; 00000010H
  0010e	30 44 15 eb	 xor	 BYTE PTR _id$[ebp+edx-1], al
  00112	83 f9 c0	 cmp	 ecx, -64		; ffffffc0H
  00115	7f c9		 jg	 SHORT $LL4@AI_Load

; 103  : 			fwrite(id, sizeof(id), 1, fp);

  00117	56		 push	 esi
  00118	6a 01		 push	 1
  0011a	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
  0011d	6a 10		 push	 16			; 00000010H
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _fwrite

; 104  : 			fwrite(&AI, sizeof(AI), 1, fp);

  00125	56		 push	 esi
  00126	6a 01		 push	 1
  00128	6a 04		 push	 4
  0012a	68 00 00 00 00	 push	 OFFSET ?AI@@3HA		; AI
  0012f	e8 00 00 00 00	 call	 _fwrite

; 105  : 			fwrite(AI_method, sizeof(AI_method), 1, fp);

  00134	56		 push	 esi
  00135	6a 01		 push	 1
  00137	6a 14		 push	 20			; 00000014H
  00139	68 00 00 00 00	 push	 OFFSET ?AI_method@@3PAHA ; AI_method
  0013e	e8 00 00 00 00	 call	 _fwrite

; 106  : 			fwrite(AI_target, sizeof(AI_target), 1, fp);

  00143	56		 push	 esi
  00144	6a 01		 push	 1
  00146	6a 14		 push	 20			; 00000014H
  00148	68 00 00 00 00	 push	 OFFSET ?AI_target@@3PAHA ; AI_target
  0014d	e8 00 00 00 00	 call	 _fwrite
  00152	83 c4 40	 add	 esp, 64			; 00000040H

; 107  : 			fwrite(AI_limit, sizeof(AI_limit), 1, fp);

  00155	56		 push	 esi
  00156	6a 01		 push	 1
  00158	6a 14		 push	 20			; 00000014H
  0015a	68 00 00 00 00	 push	 OFFSET ?AI_limit@@3PAHA	; AI_limit
  0015f	e8 00 00 00 00	 call	 _fwrite

; 108  : #ifdef _AI_OTHER
; 109  : 			fwrite(AI_OtherSetting, sizeof(AI_OtherSetting), 1, fp);

  00164	56		 push	 esi
  00165	6a 01		 push	 1
  00167	6a 04		 push	 4
  00169	68 00 00 00 00	 push	 OFFSET ?AI_OtherSetting@@3PAHA ; AI_OtherSetting
  0016e	e8 00 00 00 00	 call	 _fwrite

; 110  : #endif
; 111  : #ifdef _AI_NEW_FIRST
; 112  : 			fwrite(&bFirstFlag, sizeof(bFirstFlag), 1, fp);

  00173	56		 push	 esi
  00174	6a 01		 push	 1
  00176	6a 01		 push	 1
  00178	68 00 00 00 00	 push	 OFFSET ?bFirstFlag@@3_NA ; bFirstFlag
  0017d	e8 00 00 00 00	 call	 _fwrite

; 113  : #endif
; 114  : 			fclose(fp);

  00182	56		 push	 esi
  00183	e8 00 00 00 00	 call	 _fclose
  00188	83 c4 34	 add	 esp, 52			; 00000034H
$LN14@AI_Load:

; 115  : 		}
; 116  : 		return ret;

  0018b	5f		 pop	 edi
  0018c	33 c0		 xor	 eax, eax

; 203  : }

  0018e	5e		 pop	 esi
  0018f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00192	33 cd		 xor	 ecx, ebp
  00194	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c3		 ret	 0
$LN26@AI_Load:

; 117  : 	}
; 118  : 	while (1) {
; 119  : 		if (fread(id2, sizeof(id2), 1, fp) < 1) {

  0019d	56		 push	 esi
  0019e	6a 01		 push	 1
  001a0	8d 45 dc	 lea	 eax, DWORD PTR _id2$[ebp]
  001a3	6a 10		 push	 16			; 00000010H
  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 _fread
  001ab	83 c4 10	 add	 esp, 16			; 00000010H
  001ae	83 f8 01	 cmp	 eax, 1
  001b1	0f 82 cb 00 00
	00		 jb	 $LN29@AI_Load
  001b7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL5@AI_Load:

; 132  : #endif
; 133  : 			break;
; 134  : 		}
; 135  : 		for (i = 0; i < 16; i++)

  001c0	33 d2		 xor	 edx, edx
  001c2	33 c9		 xor	 ecx, ecx
  001c4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL12@AI_Load:

; 136  : 			id2[i] ^= IdEncryptionTbl[16 - i];

  001d0	0f b6 81 40 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+64]
  001d7	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  001da	30 44 15 d8	 xor	 BYTE PTR _id2$[ebp+edx-4], al
  001de	0f b6 81 3c 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+60]
  001e5	30 44 15 d9	 xor	 BYTE PTR _id2$[ebp+edx-3], al
  001e9	0f b6 81 38 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+56]
  001f0	30 44 15 da	 xor	 BYTE PTR _id2$[ebp+edx-2], al
  001f4	0f b6 81 34 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+52]
  001fb	83 e9 10	 sub	 ecx, 16			; 00000010H
  001fe	30 44 15 db	 xor	 BYTE PTR _id2$[ebp+edx-1], al
  00202	83 f9 c0	 cmp	 ecx, -64		; ffffffc0H
  00205	7f c9		 jg	 SHORT $LL12@AI_Load

; 137  : 		id2[15] &= 0xf;

  00207	8a 45 eb	 mov	 al, BYTE PTR _id2$[ebp+15]

; 138  : 		id2[id2[15]] = NULL;
; 139  : 		if (strcmp(id, id2) != 0) {

  0020a	8d 4d dc	 lea	 ecx, DWORD PTR _id2$[ebp]
  0020d	24 0f		 and	 al, 15			; 0000000fH
  0020f	88 45 eb	 mov	 BYTE PTR _id2$[ebp+15], al
  00212	0f b6 c0	 movzx	 eax, al
  00215	c6 44 05 dc 00	 mov	 BYTE PTR _id2$[ebp+eax], 0
  0021a	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
  0021d	0f 1f 00	 npad	 3
$LL46@AI_Load:
  00220	8a 10		 mov	 dl, BYTE PTR [eax]
  00222	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00224	75 1a		 jne	 SHORT $LN47@AI_Load
  00226	84 d2		 test	 dl, dl
  00228	74 12		 je	 SHORT $LN48@AI_Load
  0022a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0022d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00230	75 0e		 jne	 SHORT $LN47@AI_Load
  00232	83 c0 02	 add	 eax, 2
  00235	83 c1 02	 add	 ecx, 2
  00238	84 d2		 test	 dl, dl
  0023a	75 e4		 jne	 SHORT $LL46@AI_Load
$LN48@AI_Load:
  0023c	33 c0		 xor	 eax, eax
  0023e	eb 05		 jmp	 SHORT $LN49@AI_Load
$LN47@AI_Load:
  00240	1b c0		 sbb	 eax, eax
  00242	83 c8 01	 or	 eax, 1
$LN49@AI_Load:
  00245	85 c0		 test	 eax, eax
  00247	0f 84 1b 01 00
	00		 je	 $LN16@AI_Load

; 140  : 			if (fseek(fp, sizeof(AI) + sizeof(AI_method) + sizeof(AI_target) + sizeof(AI_limit)
; 141  : #ifdef _AI_OTHER
; 142  : 				+ sizeof(AI_OtherSetting)
; 143  : #endif
; 144  : #ifdef _AI_NEW_FIRST
; 145  : 				+ sizeof(bFirstFlag)
; 146  : #endif
; 147  : 				, SEEK_CUR) != 0)

  0024d	6a 01		 push	 1
  0024f	6a 45		 push	 69			; 00000045H
  00251	56		 push	 esi
  00252	e8 00 00 00 00	 call	 _fseek
  00257	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025a	56		 push	 esi
  0025b	6a 01		 push	 1
  0025d	85 c0		 test	 eax, eax
  0025f	0f 85 9a 01 00
	00		 jne	 $LN30@AI_Load

; 194  : 		}
; 195  : 		AICnt++;

  00265	ff 05 00 00 00
	00		 inc	 DWORD PTR ?AICnt@@3HA
  0026b	8d 45 dc	 lea	 eax, DWORD PTR _id2$[ebp]
  0026e	6a 10		 push	 16			; 00000010H
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 _fread
  00276	83 c4 10	 add	 esp, 16			; 00000010H
  00279	83 f8 01	 cmp	 eax, 1
  0027c	0f 83 3e ff ff
	ff		 jae	 $LL5@AI_Load
$LN29@AI_Load:

; 120  : 			for (i = 0; i < 16; i++)

  00282	33 d2		 xor	 edx, edx
  00284	33 c9		 xor	 ecx, ecx
  00286	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL9@AI_Load:

; 121  : 				id[i] ^= IdEncryptionTbl[16 - i];

  00290	0f b6 81 40 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+64]
  00297	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  0029a	30 44 15 e8	 xor	 BYTE PTR _id$[ebp+edx-4], al
  0029e	0f b6 81 3c 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+60]
  002a5	30 44 15 e9	 xor	 BYTE PTR _id$[ebp+edx-3], al
  002a9	0f b6 81 38 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+56]
  002b0	30 44 15 ea	 xor	 BYTE PTR _id$[ebp+edx-2], al
  002b4	0f b6 81 34 00
	00 00		 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx+52]
  002bb	83 e9 10	 sub	 ecx, 16			; 00000010H
  002be	30 44 15 eb	 xor	 BYTE PTR _id$[ebp+edx-1], al
  002c2	83 f9 c0	 cmp	 ecx, -64		; ffffffc0H
  002c5	7f c9		 jg	 SHORT $LL9@AI_Load

; 122  : 			fwrite(id, sizeof(id), 1, fp);

  002c7	56		 push	 esi
  002c8	6a 01		 push	 1
  002ca	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
  002cd	6a 10		 push	 16			; 00000010H
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 _fwrite

; 123  : 			fwrite(&AI, sizeof(AI), 1, fp);

  002d5	56		 push	 esi
  002d6	6a 01		 push	 1
  002d8	6a 04		 push	 4
  002da	68 00 00 00 00	 push	 OFFSET ?AI@@3HA		; AI
  002df	e8 00 00 00 00	 call	 _fwrite

; 124  : 			fwrite(AI_method, sizeof(AI_method), 1, fp);

  002e4	56		 push	 esi
  002e5	6a 01		 push	 1
  002e7	6a 14		 push	 20			; 00000014H
  002e9	68 00 00 00 00	 push	 OFFSET ?AI_method@@3PAHA ; AI_method
  002ee	e8 00 00 00 00	 call	 _fwrite

; 125  : 			fwrite(AI_target, sizeof(AI_target), 1, fp);

  002f3	56		 push	 esi
  002f4	6a 01		 push	 1
  002f6	6a 14		 push	 20			; 00000014H
  002f8	68 00 00 00 00	 push	 OFFSET ?AI_target@@3PAHA ; AI_target
  002fd	e8 00 00 00 00	 call	 _fwrite
  00302	83 c4 40	 add	 esp, 64			; 00000040H

; 126  : 			fwrite(AI_limit, sizeof(AI_limit), 1, fp);

  00305	56		 push	 esi
  00306	6a 01		 push	 1
  00308	6a 14		 push	 20			; 00000014H
  0030a	68 00 00 00 00	 push	 OFFSET ?AI_limit@@3PAHA	; AI_limit
  0030f	e8 00 00 00 00	 call	 _fwrite

; 127  : #ifdef _AI_OTHER
; 128  : 			fwrite(AI_OtherSetting, sizeof(AI_OtherSetting), 1, fp);

  00314	56		 push	 esi
  00315	6a 01		 push	 1
  00317	6a 04		 push	 4
  00319	68 00 00 00 00	 push	 OFFSET ?AI_OtherSetting@@3PAHA ; AI_OtherSetting
  0031e	e8 00 00 00 00	 call	 _fwrite

; 129  : #endif
; 130  : #ifdef _AI_NEW_FIRST
; 131  : 			fwrite(&bFirstFlag, sizeof(bFirstFlag), 1, fp);

  00323	56		 push	 esi
  00324	6a 01		 push	 1
  00326	6a 01		 push	 1
  00328	68 00 00 00 00	 push	 OFFSET ?bFirstFlag@@3_NA ; bFirstFlag
  0032d	e8 00 00 00 00	 call	 _fwrite
  00332	83 c4 30	 add	 esp, 48			; 00000030H
$LN6@AI_Load:

; 196  : 	}
; 197  : 	fclose(fp);

  00335	56		 push	 esi
  00336	e8 00 00 00 00	 call	 _fclose

; 198  : #ifdef _AI_NEW_FIRST
; 199  : 	// æ²¡æèä¸
; 200  : 	if (pc.profession_class == 0) bFirstFlag = false;

  0033b	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?bFirstFlag@@3_NA ; bFirstFlag
  00342	33 c0		 xor	 eax, eax
  00344	83 c4 04	 add	 esp, 4
  00347	39 05 84 a1 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+41348, eax
  0034d	0f 44 c8	 cmove	 ecx, eax

; 201  : #endif
; 202  : 	return ret;

  00350	8b c7		 mov	 eax, edi
  00352	88 0d 00 00 00
	00		 mov	 BYTE PTR ?bFirstFlag@@3_NA, cl ; bFirstFlag

; 203  : }

  00358	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0035b	5f		 pop	 edi
  0035c	33 cd		 xor	 ecx, ebp
  0035e	5e		 pop	 esi
  0035f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00364	8b e5		 mov	 esp, ebp
  00366	5d		 pop	 ebp
  00367	c3		 ret	 0
$LN16@AI_Load:

; 148  : 			{
; 149  : 				fwrite(&AI, sizeof(AI), 1, fp);
; 150  : 				fwrite(AI_method, sizeof(AI_method), 1, fp);
; 151  : 				fwrite(AI_target, sizeof(AI_target), 1, fp);
; 152  : 				fwrite(AI_limit, sizeof(AI_limit), 1, fp);
; 153  : #ifdef _AI_OTHER
; 154  : 				fwrite(AI_OtherSetting, sizeof(AI_OtherSetting), 1, fp);
; 155  : #endif
; 156  : #ifdef _AI_NEW_FIRST
; 157  : 				fwrite(&bFirstFlag, sizeof(bFirstFlag), 1, fp);
; 158  : #endif
; 159  : 				break;
; 160  : 			}
; 161  : 		}
; 162  : 		else {
; 163  : 			if (fread(&AI, sizeof(AI), 1, fp) < 1 ||
; 164  : #ifndef _ATTACK_AI
; 165  : 				fread(AI_method, sizeof(int), 4, fp) < 4 ||
; 166  : 				fread(AI_target, sizeof(int), 4, fp) < 4 ||
; 167  : 				fread(AI_limit, sizeof(int), 4, fp) < 4
; 168  : #else
; 169  : 				fread(AI_method, sizeof(int), 5, fp) < 5 ||
; 170  : 				fread(AI_target, sizeof(int), 5, fp) < 5 ||
; 171  : 				fread(AI_limit, sizeof(int), 5, fp) < 5
; 172  : #ifdef _AI_OTHER
; 173  : 				|| fread(AI_OtherSetting, sizeof(int), 1, fp) < 1
; 174  : #endif
; 175  : #ifdef _AI_NEW_FIRST
; 176  : 				|| fread(&bFirstFlag, sizeof(bool), 1, fp) < 1

  00368	56		 push	 esi
  00369	6a 01		 push	 1
  0036b	6a 04		 push	 4
  0036d	68 00 00 00 00	 push	 OFFSET ?AI@@3HA		; AI
  00372	e8 00 00 00 00	 call	 _fread
  00377	83 c4 10	 add	 esp, 16			; 00000010H
  0037a	83 f8 01	 cmp	 eax, 1
  0037d	72 7d		 jb	 SHORT $LN20@AI_Load
  0037f	56		 push	 esi
  00380	6a 05		 push	 5
  00382	6a 04		 push	 4
  00384	68 00 00 00 00	 push	 OFFSET ?AI_method@@3PAHA ; AI_method
  00389	e8 00 00 00 00	 call	 _fread
  0038e	83 c4 10	 add	 esp, 16			; 00000010H
  00391	83 f8 05	 cmp	 eax, 5
  00394	72 66		 jb	 SHORT $LN20@AI_Load
  00396	56		 push	 esi
  00397	6a 05		 push	 5
  00399	6a 04		 push	 4
  0039b	68 00 00 00 00	 push	 OFFSET ?AI_target@@3PAHA ; AI_target
  003a0	e8 00 00 00 00	 call	 _fread
  003a5	83 c4 10	 add	 esp, 16			; 00000010H
  003a8	83 f8 05	 cmp	 eax, 5
  003ab	72 4f		 jb	 SHORT $LN20@AI_Load
  003ad	56		 push	 esi
  003ae	6a 05		 push	 5
  003b0	6a 04		 push	 4
  003b2	68 00 00 00 00	 push	 OFFSET ?AI_limit@@3PAHA	; AI_limit
  003b7	e8 00 00 00 00	 call	 _fread
  003bc	83 c4 10	 add	 esp, 16			; 00000010H
  003bf	83 f8 05	 cmp	 eax, 5
  003c2	72 38		 jb	 SHORT $LN20@AI_Load
  003c4	56		 push	 esi
  003c5	6a 01		 push	 1
  003c7	6a 04		 push	 4
  003c9	68 00 00 00 00	 push	 OFFSET ?AI_OtherSetting@@3PAHA ; AI_OtherSetting
  003ce	e8 00 00 00 00	 call	 _fread
  003d3	83 c4 10	 add	 esp, 16			; 00000010H
  003d6	83 f8 01	 cmp	 eax, 1
  003d9	72 21		 jb	 SHORT $LN20@AI_Load
  003db	56		 push	 esi
  003dc	6a 01		 push	 1
  003de	6a 01		 push	 1
  003e0	68 00 00 00 00	 push	 OFFSET ?bFirstFlag@@3_NA ; bFirstFlag
  003e5	e8 00 00 00 00	 call	 _fread
  003ea	83 c4 10	 add	 esp, 16			; 00000010H
  003ed	83 f8 01	 cmp	 eax, 1
  003f0	72 0a		 jb	 SHORT $LN20@AI_Load

; 181  : 				fwrite(AI_method, sizeof(AI_method), 1, fp);
; 182  : 				fwrite(AI_target, sizeof(AI_target), 1, fp);
; 183  : 				fwrite(AI_limit, sizeof(AI_limit), 1, fp);
; 184  : #ifdef _AI_OTHER
; 185  : 				fwrite(AI_OtherSetting, sizeof(AI_OtherSetting), 1, fp);
; 186  : #endif
; 187  : #ifdef _AI_NEW_FIRST
; 188  : 				fwrite(&bFirstFlag, sizeof(bFirstFlag), 1, fp);
; 189  : #endif
; 190  : 				break;
; 191  : 			}
; 192  : 			ret = TRUE;

  003f2	bf 01 00 00 00	 mov	 edi, 1

; 193  : 			break;

  003f7	e9 39 ff ff ff	 jmp	 $LN6@AI_Load
$LN20@AI_Load:

; 177  : #endif
; 178  : #endif
; 179  : 				) {
; 180  : 				fwrite(&AI, sizeof(AI), 1, fp);

  003fc	56		 push	 esi
  003fd	6a 01		 push	 1
$LN30@AI_Load:

; 196  : 	}
; 197  : 	fclose(fp);

  003ff	6a 04		 push	 4
  00401	68 00 00 00 00	 push	 OFFSET ?AI@@3HA		; AI
  00406	e8 00 00 00 00	 call	 _fwrite
  0040b	56		 push	 esi
  0040c	6a 01		 push	 1
  0040e	6a 14		 push	 20			; 00000014H
  00410	68 00 00 00 00	 push	 OFFSET ?AI_method@@3PAHA ; AI_method
  00415	e8 00 00 00 00	 call	 _fwrite
  0041a	56		 push	 esi
  0041b	6a 01		 push	 1
  0041d	6a 14		 push	 20			; 00000014H
  0041f	68 00 00 00 00	 push	 OFFSET ?AI_target@@3PAHA ; AI_target
  00424	e8 00 00 00 00	 call	 _fwrite
  00429	56		 push	 esi
  0042a	6a 01		 push	 1
  0042c	6a 14		 push	 20			; 00000014H
  0042e	68 00 00 00 00	 push	 OFFSET ?AI_limit@@3PAHA	; AI_limit
  00433	e8 00 00 00 00	 call	 _fwrite
  00438	83 c4 40	 add	 esp, 64			; 00000040H
  0043b	56		 push	 esi
  0043c	6a 01		 push	 1
  0043e	6a 04		 push	 4
  00440	68 00 00 00 00	 push	 OFFSET ?AI_OtherSetting@@3PAHA ; AI_OtherSetting
  00445	e8 00 00 00 00	 call	 _fwrite
  0044a	56		 push	 esi
  0044b	6a 01		 push	 1
  0044d	6a 01		 push	 1
  0044f	68 00 00 00 00	 push	 OFFSET ?bFirstFlag@@3_NA ; bFirstFlag
  00454	e8 00 00 00 00	 call	 _fwrite
  00459	83 c4 20	 add	 esp, 32			; 00000020H
  0045c	e9 d4 fe ff ff	 jmp	 $LN6@AI_Load
?AI_Load@@YAHPAD@Z ENDP					; AI_Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetDownAttackMethod@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetDownAttackMethod@@YAXH@Z PROC			; AI_SetDownAttackMethod, COMDAT

; 1040 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1041 : 	int method = AI_method[which];

  00005	8b 7d 08	 mov	 edi, DWORD PTR _which$[ebp]
  00008	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?AI_method@@3PAHA[edi*4]
  0000f	90		 npad	 1
$LL2@AI_SetDown:

; 1042 : 	while (1) {
; 1043 : 		++method;

  00010	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 1044 : 		if (method > MAX_PROFESSION_SKILL) method = 0;
; 1045 : 		if (method == AI_method[which] || method == MAX_PROFESSION_SKILL) {

  00013	33 f6		 xor	 esi, esi
  00015	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00018	0f 4e f0	 cmovle	 esi, eax
  0001b	3b 34 bd 00 00
	00 00		 cmp	 esi, DWORD PTR ?AI_method@@3PAHA[edi*4]
  00022	74 2e		 je	 SHORT $LN6@AI_SetDown
  00024	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  00027	74 29		 je	 SHORT $LN6@AI_SetDown

; 1048 : 			else break;
; 1049 : 		}
; 1050 : 		if (profession_skill[method].useFlag == 1) {

  00029	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0002c	c1 e0 06	 shl	 eax, 6
  0002f	66 83 b8 00 00
	00 00 01	 cmp	 WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax], 1
  00037	75 d7		 jne	 SHORT $LL2@AI_SetDown

; 1051 : 			AI_method[which] = method;
; 1052 : 			if (AI_CheckSkillSetting(which, method, 1) == 0) continue;

  00039	6a 01		 push	 1
  0003b	56		 push	 esi
  0003c	57		 push	 edi
  0003d	89 34 bd 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[edi*4], esi
  00044	e8 00 00 00 00	 call	 ?AI_CheckSkillSetting@@YAHHHH@Z ; AI_CheckSkillSetting
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	85 c0		 test	 eax, eax
  0004e	75 1d		 jne	 SHORT $LN10@AI_SetDown
  00050	eb be		 jmp	 SHORT $LL2@AI_SetDown
$LN6@AI_SetDown:

; 1046 : 			AI_method[which] = MAX_PROFESSION_SKILL;
; 1047 : 			if (AI_CheckSkillSetting(which, method, 1) == 0) continue;

  00052	6a 01		 push	 1
  00054	56		 push	 esi
  00055	57		 push	 edi
  00056	c7 04 bd 00 00
	00 00 1a 00 00
	00		 mov	 DWORD PTR ?AI_method@@3PAHA[edi*4], 26 ; 0000001aH
  00061	e8 00 00 00 00	 call	 ?AI_CheckSkillSetting@@YAHHHH@Z ; AI_CheckSkillSetting
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	85 c0		 test	 eax, eax
  0006b	74 a3		 je	 SHORT $LL2@AI_SetDown
$LN10@AI_SetDown:
  0006d	5f		 pop	 edi

; 1053 : 			else break;
; 1054 : 		}
; 1055 : 	}
; 1056 : }

  0006e	5e		 pop	 esi
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?AI_SetDownAttackMethod@@YAXH@Z ENDP			; AI_SetDownAttackMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\AI_Setting.cpp
;	COMDAT ?AI_SetUpAttackMethod@@YAXH@Z
_TEXT	SEGMENT
_which$ = 8						; size = 4
?AI_SetUpAttackMethod@@YAXH@Z PROC			; AI_SetUpAttackMethod, COMDAT

; 1021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1022 : 	int method = AI_method[which];

  00006	8b 7d 08	 mov	 edi, DWORD PTR _which$[ebp]
  00009	bb 1a 00 00 00	 mov	 ebx, 26			; 0000001aH
  0000e	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?AI_method@@3PAHA[edi*4]
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL2@AI_SetUpAt:

; 1023 : 	while (1) {
; 1024 : 		--method;

  00020	83 ee 01	 sub	 esi, 1

; 1025 : 		if (method < 0) method = MAX_PROFESSION_SKILL;

  00023	0f 48 f3	 cmovs	 esi, ebx

; 1026 : 		if (method == AI_method[which] || method == MAX_PROFESSION_SKILL) {

  00026	3b 34 bd 00 00
	00 00		 cmp	 esi, DWORD PTR ?AI_method@@3PAHA[edi*4]
  0002d	74 1d		 je	 SHORT $LN6@AI_SetUpAt
  0002f	3b f3		 cmp	 esi, ebx
  00031	74 19		 je	 SHORT $LN6@AI_SetUpAt

; 1028 : 			if (AI_CheckSkillSetting(which, method, 0) == 0) continue;
; 1029 : 			else break;
; 1030 : 		}
; 1031 : 		if (profession_skill[method].useFlag == 1) {

  00033	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00036	c1 e0 06	 shl	 eax, 6
  00039	66 83 b8 00 00
	00 00 01	 cmp	 WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax], 1
  00041	75 dd		 jne	 SHORT $LL2@AI_SetUpAt

; 1032 : 			AI_method[which] = method;

  00043	89 34 bd 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[edi*4], esi

; 1033 : 			if (AI_CheckSkillSetting(which, method, 0) == 0) continue;

  0004a	eb 07		 jmp	 SHORT $LN19@AI_SetUpAt
$LN6@AI_SetUpAt:

; 1027 : 			AI_method[which] = MAX_PROFESSION_SKILL;

  0004c	89 1c bd 00 00
	00 00		 mov	 DWORD PTR ?AI_method@@3PAHA[edi*4], ebx
$LN19@AI_SetUpAt:

; 1034 : 			else break;
; 1035 : 		}
; 1036 : 	}
; 1037 : }

  00053	6a 00		 push	 0
  00055	56		 push	 esi
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?AI_CheckSkillSetting@@YAHHHH@Z ; AI_CheckSkillSetting
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	85 c0		 test	 eax, eax
  00061	74 bd		 je	 SHORT $LL2@AI_SetUpAt
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?AI_SetUpAttackMethod@@YAXH@Z ENDP			; AI_SetUpAttackMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
