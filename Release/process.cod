; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ProcNo@@3IA					; ProcNo
PUBLIC	?SubProcNo@@3IA					; SubProcNo
PUBLIC	?ProcNo2@@3HA					; ProcNo2
PUBLIC	?SubProcNo2@@3HA				; SubProcNo2
PUBLIC	?palNo@@3HA					; palNo
PUBLIC	?oldPalNo@@3HA					; oldPalNo
PUBLIC	?palTime@@3HA					; palTime
_BSS	SEGMENT
?ProcNo@@3IA DD	01H DUP (?)				; ProcNo
?SubProcNo@@3IA DD 01H DUP (?)				; SubProcNo
?ProcNo2@@3HA DD 01H DUP (?)				; ProcNo2
?SubProcNo2@@3HA DD 01H DUP (?)				; SubProcNo2
?palNo@@3HA DD	01H DUP (?)				; palNo
?oldPalNo@@3HA DD 01H DUP (?)				; oldPalNo
?palTime@@3HA DD 01H DUP (?)				; palTime
_BSS	ENDS
PUBLIC	?Process@@YAXXZ					; Process
PUBLIC	?ChangeProc@@YAXH@Z				; ChangeProc
PUBLIC	?ChangeProc@@YAXHH@Z				; ChangeProc
PUBLIC	?ChangeProc2@@YAXH@Z				; ChangeProc2
PUBLIC	?ChangeProc2@@YAXHH@Z				; ChangeProc2
PUBLIC	?GameProc@@YAXXZ				; GameProc
PUBLIC	?warpEffectProc@@YAXXZ				; warpEffectProc
PUBLIC	?repairMap@@YAXXZ				; repairMap
PUBLIC	?paletteProc@@YAXXZ				; paletteProc
PUBLIC	?AniProc@@YAXXZ					; AniProc
PUBLIC	__real@3f000000
PUBLIC	__real@3fe0000000000000
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	?ClearBackSurface@@YAXXZ:PROC			; ClearBackSurface
EXTRN	?PaletteChange@@YAXHH@Z:PROC			; PaletteChange
EXTRN	?InitProc@@YAXXZ:PROC				; InitProc
EXTRN	?RunAction@@YAXXZ:PROC				; RunAction
EXTRN	?DeathAllAction@@YAXXZ:PROC			; DeathAllAction
EXTRN	?SortDispBuffer@@YAXXZ:PROC			; SortDispBuffer
EXTRN	?PutBmp@@YAXXZ:PROC				; PutBmp
EXTRN	?StockTaskDispBuffer@@YAXXZ:PROC		; StockTaskDispBuffer
EXTRN	?ChatBufferToFontBuffer@@YAXXZ:PROC		; ChatBufferToFontBuffer
EXTRN	?ChatProc@@YAXXZ:PROC				; ChatProc
EXTRN	?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z:PROC	; GetKeyInputFocus
EXTRN	?InitChat@@YAXXZ:PROC				; InitChat
EXTRN	?FlashKeyboardCursor@@YAXXZ:PROC		; FlashKeyboardCursor
EXTRN	?initMap@@YAXXZ:PROC				; initMap
EXTRN	?resetMap@@YAXXZ:PROC				; resetMap
EXTRN	?drawMap@@YAXXZ:PROC				; drawMap
EXTRN	?drawMap2@@YAXXZ:PROC				; drawMap2
EXTRN	?drawTile@@YAXXZ:PROC				; drawTile
EXTRN	?redrawMap@@YAXXZ:PROC				; redrawMap
EXTRN	?drawGrid@@YAXXZ:PROC				; drawGrid
EXTRN	?moveProc@@YAXXZ:PROC				; moveProc
EXTRN	?updateMapArea@@YAXXZ:PROC			; updateMapArea
EXTRN	?initCharPartsPrio@@YAXXZ:PROC			; initCharPartsPrio
EXTRN	?camMapToGamen@@YAXMMPAM0@Z:PROC		; camMapToGamen
EXTRN	?initMapEffect@@YAXH@Z:PROC			; initMapEffect
EXTRN	?mapEffectProc@@YAXXZ:PROC			; mapEffectProc
EXTRN	?mapEffectProc2@@YAXH@Z:PROC			; mapEffectProc2
EXTRN	?ImeProc@@YAXXZ:PROC				; ImeProc
EXTRN	?ClearIme@@YAXXZ:PROC				; ClearIme
EXTRN	?initPcAll@@YAXXZ:PROC				; initPcAll
EXTRN	?initPc@@YAXXZ:PROC				; initPc
EXTRN	?resetPc@@YAXXZ:PROC				; resetPc
EXTRN	?clearPtActPartyParam@@YAXXZ:PROC		; clearPtActPartyParam
EXTRN	?InitMenu@@YAXXZ:PROC				; InitMenu
EXTRN	?InitMenu2@@YAXXZ:PROC				; InitMenu2
EXTRN	?MenuProc@@YAXXZ:PROC				; MenuProc
EXTRN	?InitOhtaParam@@YAXXZ:PROC			; InitOhtaParam
EXTRN	?LoadAlbum@@YAHXZ:PROC				; LoadAlbum
EXTRN	?initCharObj@@YAXXZ:PROC			; initCharObj
EXTRN	?resetCharObj@@YAXXZ:PROC			; resetCharObj
EXTRN	?restorePtActCharObjAll@@YAXXZ:PROC		; restorePtActCharObjAll
EXTRN	?initItemOverlapCheck@@YAXXZ:PROC		; initItemOverlapCheck
EXTRN	?idPasswordProc@@YAXXZ:PROC			; idPasswordProc
EXTRN	?titleProc@@YAXXZ:PROC				; titleProc
EXTRN	?selectCharacterProc@@YAXXZ:PROC		; selectCharacterProc
EXTRN	?characterLoginProc@@YAXXZ:PROC			; characterLoginProc
EXTRN	?makeCharacterProc@@YAXXZ:PROC			; makeCharacterProc
EXTRN	?characterLogoutProc@@YAXXZ:PROC		; characterLogoutProc
EXTRN	?initOpenServerWindow@@YAXXZ:PROC		; initOpenServerWindow
EXTRN	?openServerWindowProc@@YAXXZ:PROC		; openServerWindowProc
EXTRN	?BattleProc@@YAXXZ:PROC				; BattleProc
EXTRN	?CopyBackBuffer@@YAXXZ:PROC			; CopyBackBuffer
EXTRN	?DrawProduce@@YAHH@Z:PROC			; DrawProduce
EXTRN	?TitleProduce@@YAXXZ:PROC			; TitleProduce
EXTRN	?cleanupNetwork@@YAXXZ:PROC			; cleanupNetwork
EXTRN	?play_se@@YAHHHH@Z:PROC				; play_se
EXTRN	?play_bgm@@YAHH@Z:PROC				; play_bgm
EXTRN	?stop_bgm@@YAXXZ:PROC				; stop_bgm
EXTRN	?fade_out_bgm@@YAXXZ:PROC			; fade_out_bgm
EXTRN	?initFieldProc@@YAXXZ:PROC			; initFieldProc
EXTRN	?resetFieldProc@@YAXXZ:PROC			; resetFieldProc
EXTRN	?fieldProc@@YAXXZ:PROC				; fieldProc
EXTRN	?drawField@@YAXXZ:PROC				; drawField
EXTRN	?disconnectServer@@YAHXZ:PROC			; disconnectServer
EXTRN	?drawFieldInfoWin@@YAXXZ:PROC			; drawFieldInfoWin
EXTRN	?ReleaseSpecAnim@@YAXXZ:PROC			; ReleaseSpecAnim
EXTRN	?TimeZoneProc@@YAXXZ:PROC			; TimeZoneProc
EXTRN	?SkyIslandInit@@YAXXZ:PROC			; SkyIslandInit
EXTRN	?JL_Í´‘Ù÷ı@@YAXXZ:PROC				; JL_Í´‘Ù÷ı
EXTRN	?JL_??÷ı@@YAXXZ:PROC				; JL_??÷ı
EXTRN	?SkyIslandRelease@@YAXXZ:PROC			; SkyIslandRelease
EXTRN	?AniRandomRelease@@YAXXZ:PROC			; AniRandomRelease
EXTRN	?crossAniRelease@@YAXXZ:PROC			; crossAniRelease
EXTRN	?CharbubbleRelease@@YAXXZ:PROC			; CharbubbleRelease
EXTRN	?ImmobileAniRelease@@YAXXZ:PROC			; ImmobileAniRelease
EXTRN	?lpBattleSurface@@3PAUIDirectDrawSurface@@A:DWORD ; lpBattleSurface
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?BackBufferDrawType@@3HA:DWORD			; BackBufferDrawType
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?NowTime@@3KA:DWORD				; NowTime
EXTRN	?DispBuffer@@3UDISP_BUFFER@@A:BYTE		; DispBuffer
EXTRN	?MyChatBuffer@@3USTR_BUFFER@@A:BYTE		; MyChatBuffer
EXTRN	?FontCnt@@3HA:DWORD				; FontCnt
EXTRN	?nowEncountPercentage@@3FA:WORD			; nowEncountPercentage
EXTRN	?minEncountPercentage@@3FA:WORD			; minEncountPercentage
EXTRN	?sendEnFlag@@3FA:WORD				; sendEnFlag
EXTRN	?encountNowFlag@@3FA:WORD			; encountNowFlag
EXTRN	?eventEnemySendFlag@@3FA:WORD			; eventEnemySendFlag
EXTRN	?loginFlag@@3HA:DWORD				; loginFlag
EXTRN	?warpEffectStart@@3HA:DWORD			; warpEffectStart
EXTRN	?warpEffectOk@@3HA:DWORD			; warpEffectOk
EXTRN	?transmigrationEffectFlag@@3HA:DWORD		; transmigrationEffectFlag
EXTRN	?mapEffectRainLevel@@3FA:WORD			; mapEffectRainLevel
EXTRN	?oldMapEffectRainLevel@@3FA:WORD		; oldMapEffectRainLevel
EXTRN	?mapEffectSnowLevel@@3FA:WORD			; mapEffectSnowLevel
EXTRN	?oldMapEffectSnowLevel@@3FA:WORD		; oldMapEffectSnowLevel
EXTRN	?fastDrawTile@@3FB:WORD				; fastDrawTile
EXTRN	?fastDrawTileFlag@@3FA:WORD			; fastDrawTileFlag
EXTRN	?amountXFastDraw@@3HA:DWORD			; amountXFastDraw
EXTRN	?amountYFastDraw@@3HA:DWORD			; amountYFastDraw
EXTRN	?nowXFastDraw@@3HA:DWORD			; nowXFastDraw
EXTRN	?nowYFastDraw@@3HA:DWORD			; nowYFastDraw
EXTRN	?baseXFastDraw@@3HA:DWORD			; baseXFastDraw
EXTRN	?baseYFastDraw@@3HA:DWORD			; baseYFastDraw
EXTRN	?nowXFastDraw2@@3HA:DWORD			; nowXFastDraw2
EXTRN	?nowYFastDraw2@@3HA:DWORD			; nowYFastDraw2
EXTRN	?jbSendFlag@@3FA:WORD				; jbSendFlag
EXTRN	?duelSendFlag@@3FA:WORD				; duelSendFlag
EXTRN	?MenuToggleFlag@@3IA:DWORD			; MenuToggleFlag
EXTRN	?MapWmdFlagBak@@3HA:DWORD			; MapWmdFlagBak
EXTRN	?ResultWndTimer@@3HA:DWORD			; ResultWndTimer
EXTRN	?nameOverTheHeadFlag@@3FA:WORD			; nameOverTheHeadFlag
EXTRN	?logOutFlag@@3HA:DWORD				; logOutFlag
EXTRN	?EncountFlag@@3HA:DWORD				; EncountFlag
EXTRN	?ProduceInitFlag@@3HA:DWORD			; ProduceInitFlag
EXTRN	?disconnectServerFlag@@3HA:DWORD		; disconnectServerFlag
EXTRN	?oldDisconnectServerFlag@@3HA:DWORD		; oldDisconnectServerFlag
EXTRN	?BattleCmd@@3PADA:BYTE				; BattleCmd
EXTRN	?BattleStatus@@3PADA:BYTE			; BattleStatus
EXTRN	?BattleTurnReceiveFlag@@3HA:DWORD		; BattleTurnReceiveFlag
EXTRN	?t_music_bgm_no@@3HA:DWORD			; t_music_bgm_no
EXTRN	?draw_map_bgm_flg@@3HA:DWORD			; draw_map_bgm_flg
EXTRN	?map_bgm_no@@3HA:DWORD				; map_bgm_no
EXTRN	?actBtn@@3FA:WORD				; actBtn
EXTRN	?fieldInfoTime@@3IA:DWORD			; fieldInfoTime
EXTRN	?SaTimeZoneNo@@3HA:DWORD			; SaTimeZoneNo
EXTRN	?TimeZonePalChangeFlag@@3HA:DWORD		; TimeZonePalChangeFlag
EXTRN	?helpBtn@@3FA:WORD				; helpBtn
EXTRN	__fltused:DWORD
;	COMDAT ?now_bgm@?1??GameProc@@YAXXZ@4HA
_BSS	SEGMENT
?now_bgm@?1??GameProc@@YAXXZ@4HA DD 01H DUP (?)		; `GameProc'::`2'::now_bgm
_BSS	ENDS
;	COMDAT ?produceFlag@?1??GameProc@@YAXXZ@4HA
_BSS	SEGMENT
?produceFlag@?1??GameProc@@YAXXZ@4HA DD 01H DUP (?)	; `GameProc'::`2'::produceFlag
_BSS	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?AniProc@@YAXXZ
_TEXT	SEGMENT
?AniProc@@YAXXZ PROC					; AniProc, COMDAT

; 893  : 	return;
; 894  : 	float mx, my;
; 895  : 
; 896  : 	for (int i = 0; i < MAX_ANIM; i++)
; 897  : 	{
; 898  : 		if (SPACT[i] != NULL)
; 899  : 		{
; 900  : 			try
; 901  : 			{
; 902  : 				camMapToGamen(SPACT[i]->mx, SPACT[i]->my, &mx, &my);
; 903  : 				if (SPACT[i]->anim_chr_no > 102002) {
; 904  : 					SPACT[i]->x = (int)(mx - 5);
; 905  : 					SPACT[i]->y = (int)(my + 8);
; 906  : 				}
; 907  : 				else {
; 908  : 					SPACT[i]->x = (int)(mx + .5);
; 909  : 					SPACT[i]->y = (int)(my + .5);
; 910  : 				}
; 911  : 				pattern(SPACT[i], ANM_NOMAL_SPD, ANM_LOOP);
; 912  : 			}
; 913  : 			catch (...)
; 914  : 			{
; 915  : 				SPACT[i] = 0;
; 916  : 			}
; 917  : 
; 918  : 		}
; 919  : 	}
; 920  : }

  00000	c2 00 00	 ret	 0
?AniProc@@YAXXZ ENDP					; AniProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?paletteProc@@YAXXZ
_TEXT	SEGMENT
?paletteProc@@YAXXZ PROC				; paletteProc, COMDAT

; 868  : 	if (palNo == -1)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?palNo@@3HA ; palNo
  00005	83 f8 ff	 cmp	 eax, -1
  00008	75 29		 jne	 SHORT $LN2@palettePro

; 869  : 	{
; 870  : 		// ????????
; 871  : 		// the second PaletteChange( SaTimeZoneNo, 0 );
; 872  : 		PaletteChange(SaTimeZoneNo, palTime);

  0000a	ff 35 00 00 00
	00		 push	 DWORD PTR ?palTime@@3HA	; palTime
  00010	ff 35 00 00 00
	00		 push	 DWORD PTR ?SaTimeZoneNo@@3HA ; SaTimeZoneNo
  00016	e8 00 00 00 00	 call	 ?PaletteChange@@YAXHH@Z	; PaletteChange

; 873  : 		// ??Óïó????????????
; 874  : 		TimeZonePalChangeFlag = TRUE;

  0001b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?TimeZonePalChangeFlag@@3HA, 1 ; TimeZonePalChangeFlag

; 885  : 			palNo = -2;
; 886  : 		}
; 887  : }

  00025	83 c4 08	 add	 esp, 8
  00028	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?palNo@@3HA, -2 ; palNo, fffffffeH
  00032	c3		 ret	 0
$LN2@palettePro:

; 875  : 		palNo = -2;
; 876  : 	}
; 877  : 	else
; 878  : 		if (palNo >= 0)

  00033	85 c0		 test	 eax, eax
  00035	78 23		 js	 SHORT $LN4@palettePro

; 879  : 		{
; 880  : 			// ?Óòã????ÓìÜÓòã
; 881  : 			// the second PaletteChange( palNo, 0 );// ????????
; 882  : 			PaletteChange(palNo, palTime);// ????????

  00037	ff 35 00 00 00
	00		 push	 DWORD PTR ?palTime@@3HA	; palTime
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?PaletteChange@@YAXHH@Z	; PaletteChange

; 883  : 										  // ??Óïó?????????????
; 884  : 			TimeZonePalChangeFlag = FALSE;

  00043	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TimeZonePalChangeFlag@@3HA, 0 ; TimeZonePalChangeFlag

; 885  : 			palNo = -2;
; 886  : 		}
; 887  : }

  0004d	83 c4 08	 add	 esp, 8
  00050	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?palNo@@3HA, -2 ; palNo, fffffffeH
$LN4@palettePro:
  0005a	c3		 ret	 0
?paletteProc@@YAXXZ ENDP				; paletteProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?repairMap@@YAXXZ
_TEXT	SEGMENT
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
?repairMap@@YAXXZ PROC					; repairMap, COMDAT

; 813  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 814  : 	float dx, dy;
; 815  : #ifdef _MOVE_SCREEN
; 816  : 	if (pc.bMoveScreenMode)
; 817  : 	{
; 818  : 		dx = (float)(+(-nowGx) * (SURFACE_WIDTH >> 1) + -nowGy * (SURFACE_WIDTH >> 1) + viewOffsetX);
; 819  : 		dy = (float)(-(-nowGx) * (SURFACE_HEIGHT >> 1) + -nowGy * (SURFACE_HEIGHT >> 1) + viewOffsetY);
; 820  : 	}
; 821  : 	else
; 822  : #endif
; 823  : 		//
; 824  : 		camMapToGamen(0.0, 0.0, &dx, &dy);

  00009	8d 45 f8	 lea	 eax, DWORD PTR _dy$[ebp]
  0000c	50		 push	 eax
  0000d	8d 45 fc	 lea	 eax, DWORD PTR _dx$[ebp]
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  0001c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00023	e8 00 00 00 00	 call	 ?camMapToGamen@@YAXMMPAM0@Z ; camMapToGamen

; 825  : 
; 826  : 	nowXFastDraw = (int)(dx + .5);

  00028	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _dx$[ebp]
  0002d	83 c4 10	 add	 esp, 16			; 00000010H

; 827  : 	nowYFastDraw = (int)(dy + .5);
; 828  : 
; 829  : 	nowXFastDraw2 = nowXFastDraw;
; 830  : 	nowYFastDraw2 = nowYFastDraw;
; 831  : 
; 832  : 	//???????????????
; 833  : 	if (ResoMode == 1) {

  00030	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  00037	f2 0f 10 25 00
	00 00 00	 movsd	 xmm4, QWORD PTR __real@3fe0000000000000
  0003f	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _dy$[ebp]
  00044	0f 5a c2	 cvtps2pd xmm0, xmm2
  00047	f2 0f 58 c4	 addsd	 xmm0, xmm4
  0004b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0004f	0f 5a c3	 cvtps2pd xmm0, xmm3
  00052	a3 00 00 00 00	 mov	 DWORD PTR ?nowXFastDraw@@3HA, eax ; nowXFastDraw
  00057	8b d0		 mov	 edx, eax
  00059	a3 00 00 00 00	 mov	 DWORD PTR ?nowXFastDraw2@@3HA, eax ; nowXFastDraw2
  0005e	8b f8		 mov	 edi, eax
  00060	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00064	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00068	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw@@3HA, ecx ; nowYFastDraw
  0006e	8b f1		 mov	 esi, ecx
  00070	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw2@@3HA, ecx ; nowYFastDraw2
  00076	8b d9		 mov	 ebx, ecx
  00078	75 39		 jne	 SHORT $LN2@repairMap

; 834  : 		nowXFastDraw = (int)(dx / 2 + .5);

  0007a	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000

; 835  : 		nowYFastDraw = (int)(dy / 2 + .5);

  00082	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
  0008a	0f 5a c2	 cvtps2pd xmm0, xmm2
  0008d	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00091	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00095	0f 5a c3	 cvtps2pd xmm0, xmm3
  00098	a3 00 00 00 00	 mov	 DWORD PTR ?nowXFastDraw@@3HA, eax ; nowXFastDraw
  0009d	8b d0		 mov	 edx, eax
  0009f	8b f8		 mov	 edi, eax
  000a1	f2 0f 58 c4	 addsd	 xmm0, xmm4
  000a5	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  000a9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nowYFastDraw@@3HA, ecx ; nowYFastDraw
  000af	8b f1		 mov	 esi, ecx
  000b1	8b d9		 mov	 ebx, ecx
$LN2@repairMap:

; 836  : 	}
; 837  : 
; 838  : 	baseXFastDraw = nowXFastDraw;

  000b3	a3 00 00 00 00	 mov	 DWORD PTR ?baseXFastDraw@@3HA, eax ; baseXFastDraw

; 839  : 	baseYFastDraw = nowYFastDraw;

  000b8	2b d7		 sub	 edx, edi

; 840  : 	amountXFastDraw = nowXFastDraw - baseXFastDraw;
; 841  : 	amountYFastDraw = nowYFastDraw - baseYFastDraw;
; 842  : 
; 843  : 	DispBuffer.DispCnt = 0;

  000ba	33 c0		 xor	 eax, eax
  000bc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?baseYFastDraw@@3HA, ecx ; baseYFastDraw
  000c2	2b f3		 sub	 esi, ebx
  000c4	89 15 00 00 00
	00		 mov	 DWORD PTR ?amountXFastDraw@@3HA, edx ; amountXFastDraw
  000ca	89 35 00 00 00
	00		 mov	 DWORD PTR ?amountYFastDraw@@3HA, esi ; amountYFastDraw
  000d0	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 844  : 	FontCnt = 0;

  000d6	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 845  : 	drawTile();		// ???Óù∏Óçï

  000db	e8 00 00 00 00	 call	 ?drawTile@@YAXXZ	; drawTile

; 846  : 	SortDispBuffer(); 	// Óù∏Óçï???????

  000e0	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 847  : 						// ???????????????
; 848  : 						//cary 2001 11 8
; 849  : 	ClearBackSurface();

  000e5	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 850  : 
; 851  : 	// ????????????????
; 852  : 	fastDrawTileFlag = 0;

  000ea	33 c0		 xor	 eax, eax
  000ec	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 853  : 	PutBmp();

  000f2	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 854  : 	fastDrawTileFlag = 1;

  000f7	b8 01 00 00 00	 mov	 eax, 1
  000fc	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 855  : #ifndef __SKYISLAND
; 856  : 	// ??????????????????????
; 857  : 	lpBattleSurface->BltFast(0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT);
; 858  : #endif
; 859  : 	DispBuffer.DispCnt = 0;

  00102	33 c0		 xor	 eax, eax
  00104	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 860  : 	FontCnt = 0;

  0010a	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 861  : 	// ????????
; 862  : 	NowTime = TimeGetTime();

  0010f	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime
  0011b	5b		 pop	 ebx

; 863  : }

  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
?repairMap@@YAXXZ ENDP					; repairMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?warpEffectProc@@YAXXZ
_TEXT	SEGMENT
?warpEffectProc@@YAXXZ PROC				; warpEffectProc, COMDAT

; 766  : 	oldMapEffectRainLevel = mapEffectRainLevel;

  00000	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?mapEffectRainLevel@@3FA ; mapEffectRainLevel

; 767  : 	oldMapEffectSnowLevel = mapEffectSnowLevel;
; 768  : 
; 769  : 	DispBuffer.DispCnt = 0;
; 770  : 	FontCnt = 0;
; 771  : 
; 772  : 	// ?????????????????
; 773  : 	if (MenuToggleFlag & JOY_CTRL_M) MapWmdFlagBak = TRUE;

  00007	b9 01 00 00 00	 mov	 ecx, 1
  0000c	66 a3 00 00 00
	00		 mov	 WORD PTR ?oldMapEffectRainLevel@@3FA, ax ; oldMapEffectRainLevel
  00012	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?mapEffectSnowLevel@@3FA ; mapEffectSnowLevel
  00019	66 a3 00 00 00
	00		 mov	 WORD PTR ?oldMapEffectSnowLevel@@3FA, ax ; oldMapEffectSnowLevel
  0001f	33 c0		 xor	 eax, eax
  00021	f7 05 00 00 00
	00 00 00 00 40	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 1073741824 ; MenuToggleFlag, 40000000H
  0002b	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MapWmdFlagBak@@3HA ; MapWmdFlagBak
  0003b	0f 45 c1	 cmovne	 eax, ecx
  0003e	a3 00 00 00 00	 mov	 DWORD PTR ?MapWmdFlagBak@@3HA, eax ; MapWmdFlagBak

; 774  : 	InitMenu2();

  00043	e8 00 00 00 00	 call	 ?InitMenu2@@YAXXZ	; InitMenu2

; 775  : 
; 776  : 	fieldProc();			// ?????????

  00048	e8 00 00 00 00	 call	 ?fieldProc@@YAXXZ	; fieldProc

; 777  : 	initCharPartsPrio();	// ?????????Óìè???Óòã??????

  0004d	e8 00 00 00 00	 call	 ?initCharPartsPrio@@YAXXZ ; initCharPartsPrio

; 778  : 	openServerWindowProc();	// ????Óíê?????

  00052	e8 00 00 00 00	 call	 ?openServerWindowProc@@YAXXZ ; openServerWindowProc

; 779  : 
; 780  : 	fieldInfoTime = 0;		// Óê∂?Óê∫Óü´?Óèù???Óêç?

  00057	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fieldInfoTime@@3IA, 0 ; fieldInfoTime

; 781  : 	drawFieldInfoWin();		// ?????Óê∂?Óê∫Óü´

  00061	e8 00 00 00 00	 call	 ?drawFieldInfoWin@@YAXXZ ; drawFieldInfoWin

; 782  : 
; 783  : 
; 784  : 							/* ????????? */
; 785  : 	RunAction();

  00066	e8 00 00 00 00	 call	 ?RunAction@@YAXXZ	; RunAction

; 786  : 	// ???Óù∏Óçï????????????
; 787  : 	StockTaskDispBuffer();

  0006b	e8 00 00 00 00	 call	 ?StockTaskDispBuffer@@YAXXZ ; StockTaskDispBuffer

; 788  : 
; 789  : 	mapEffectProc();		// ???????????Óìä??

  00070	e8 00 00 00 00	 call	 ?mapEffectProc@@YAXXZ	; mapEffectProc

; 790  : 
; 791  : 	redrawMap();

  00075	e8 00 00 00 00	 call	 ?redrawMap@@YAXXZ	; redrawMap

; 792  : 	drawMap();		// ???Óù∏Óçï

  0007a	e8 00 00 00 00	 call	 ?drawMap@@YAXXZ		; drawMap

; 793  : 					/* ?????? */
; 794  : 	ChatProc();

  0007f	e8 00 00 00 00	 call	 ?ChatProc@@YAXXZ	; ChatProc

; 795  : 	// ??????????????????????
; 796  : 	ChatBufferToFontBuffer();

  00084	e8 00 00 00 00	 call	 ?ChatBufferToFontBuffer@@YAXXZ ; ChatBufferToFontBuffer

; 797  : 	// ??Óïó?????????????
; 798  : 	//	TimeZoneProc();
; 799  : 	SortDispBuffer(); 	// Óù∏Óçï???????

  00089	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 800  : 						// ???????????????
; 801  : 	ClearBackSurface();

  0008e	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 802  : 	// ????????????????
; 803  : 	PutBmp();

  00093	e9 00 00 00 00	 jmp	 ?PutBmp@@YAXXZ		; PutBmp
?warpEffectProc@@YAXXZ ENDP				; warpEffectProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?GameProc@@YAXXZ
_TEXT	SEGMENT
?GameProc@@YAXXZ PROC					; GameProc, COMDAT

; 326  : 	static int now_bgm;
; 327  : 	static BOOL produceFlag;
; 328  : 	switch (SubProcNo) {

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  00006	81 f9 cc 00 00
	00		 cmp	 ecx, 204		; 000000ccH
  0000c	0f 87 50 01 00
	00		 ja	 $LN2@GameProc
  00012	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR $LN55@GameProc[ecx]
  00019	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN56@GameProc[eax*4]
$LN4@GameProc:

; 329  : 	case 0:
; 330  : 		//cary Èò≤Ê≠¢ÂÜçÊ¨°ÁôªÂÖ•Êó∂ÁöÑËßÜÁ™óÊÆãÁïô
; 331  : 		extern short helpBtn, actBtn;
; 332  : 		helpBtn = 0;

  00020	33 c0		 xor	 eax, eax
  00022	66 a3 00 00 00
	00		 mov	 WORD PTR ?helpBtn@@3FA, ax ; helpBtn

; 333  : 		actBtn = 0;

  00028	66 a3 00 00 00
	00		 mov	 WORD PTR ?actBtn@@3FA, ax ; actBtn

; 334  : 		//end cary
; 335  : #ifdef _STONDEBUG___
; 336  : 		if (offlineFlag) {
; 337  : 			initMap();
; 338  : 		}
; 339  : #endif
; 340  : //		InitIme(hWnd, StrToNowStrBuffer);
; 341  : 		ClearIme();

  0002e	e8 00 00 00 00	 call	 ?ClearIme@@YAXXZ	; ClearIme

; 342  : 		InitChat();

  00033	e8 00 00 00 00	 call	 ?InitChat@@YAXXZ	; InitChat

; 343  : 		produceFlag = FALSE;

  00038	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?produceFlag@?1??GameProc@@YAXXZ@4HA, 0

; 344  : 		EncountFlag = FALSE;

  00042	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?EncountFlag@@3HA, 0 ; EncountFlag

; 345  : 		LoadAlbum();

  0004c	e8 00 00 00 00	 call	 ?LoadAlbum@@YAHXZ	; LoadAlbum

; 346  : 		//extern void AI_Init();
; 347  : 		//AI_Init();
; 348  : 		nameOverTheHeadFlag = 0;

  00051	33 c0		 xor	 eax, eax
  00053	66 a3 00 00 00
	00		 mov	 WORD PTR ?nameOverTheHeadFlag@@3FA, ax ; nameOverTheHeadFlag
$LN5@GameProc:

; 349  : 		SubProcNo++;
; 350  : 	case 150:
; 351  : 		SubProcNo = 100;

  00059	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, 100 ; SubProcNo, 00000064H
$LN6@GameProc:

; 352  : 
; 353  : 	case 100:
; 354  : 		initPc();

  00063	e8 00 00 00 00	 call	 ?initPc@@YAXXZ		; initPc

; 355  : 		resetFieldProc();

  00068	e8 00 00 00 00	 call	 ?resetFieldProc@@YAXXZ	; resetFieldProc

; 356  : 		restorePtActCharObjAll();

  0006d	e8 00 00 00 00	 call	 ?restorePtActCharObjAll@@YAXXZ ; restorePtActCharObjAll

; 357  : 		initOpenServerWindow();

  00072	e8 00 00 00 00	 call	 ?initOpenServerWindow@@YAXXZ ; initOpenServerWindow

; 358  : 		InitMenu();

  00077	e8 00 00 00 00	 call	 ?InitMenu@@YAXXZ	; InitMenu

; 359  : 		//			BattleStatusBak[ 0 ] = NULL;// ???ÓêøÓïö???
; 360  : 		//			BattleStatusReadPointer = BattleStatusWritePointer =0;
; 361  : 		GetKeyInputFocus(&MyChatBuffer);

  0007c	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  00081	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 362  : 		SubProcNo++;

  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  0008c	83 c4 04	 add	 esp, 4
  0008f	41		 inc	 ecx
  00090	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SubProcNo@@3IA, ecx ; SubProcNo
$LN7@GameProc:

; 363  : 	case 101:
; 364  : 		if (loginFlag) {

  00096	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?loginFlag@@3HA, 0 ; loginFlag
  0009d	74 0b		 je	 SHORT $LN8@GameProc

; 365  : 			BackBufferDrawType = DRAW_BACK_NORMAL;

  0009f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 757  : 					//	printf("\nImeProcÊâßË°åÂÆåÊØï");
; 758  : 		break;
; 759  : 	}
; 760  : }

  000a9	c3		 ret	 0
$LN8@GameProc:

; 366  : 			break;
; 367  : 		}
; 368  : 		SubProcNo++;

  000aa	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000ad	a3 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, eax ; SubProcNo
$LN9@GameProc:

; 369  : 	case 102:
; 370  : 		paletteProc();

  000b2	e8 00 00 00 00	 call	 ?paletteProc@@YAXXZ	; paletteProc

; 371  : 
; 372  : 		DispBuffer.DispCnt = 0;

  000b7	33 c0		 xor	 eax, eax
  000b9	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 373  : 		FontCnt = 0;

  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 374  : 		initCharPartsPrio();	// ?????????Óìè???Óòã??????

  000c4	e8 00 00 00 00	 call	 ?initCharPartsPrio@@YAXXZ ; initCharPartsPrio

; 375  : 		RunAction();			// ?????????

  000c9	e8 00 00 00 00	 call	 ?RunAction@@YAXXZ	; RunAction

; 376  : 		StockTaskDispBuffer();	// ???Óù∏Óçï????????????

  000ce	e8 00 00 00 00	 call	 ?StockTaskDispBuffer@@YAXXZ ; StockTaskDispBuffer

; 377  : 		stop_bgm();				//???ÓòÖÓçè

  000d3	e8 00 00 00 00	 call	 ?stop_bgm@@YAXXZ	; stop_bgm

; 378  : 		drawMap();				//	???Óù∏Óçï

  000d8	e8 00 00 00 00	 call	 ?drawMap@@YAXXZ		; drawMap

; 379  : 		MenuProc();				// ??????

  000dd	e8 00 00 00 00	 call	 ?MenuProc@@YAXXZ	; MenuProc

; 380  : 		ChatProc();				// ??????

  000e2	e8 00 00 00 00	 call	 ?ChatProc@@YAXXZ	; ChatProc

; 381  : 		ChatBufferToFontBuffer(); // ??????????????????????

  000e7	e8 00 00 00 00	 call	 ?ChatBufferToFontBuffer@@YAXXZ ; ChatBufferToFontBuffer

; 382  : 		ImeProc();				// ???????

  000ec	e8 00 00 00 00	 call	 ?ImeProc@@YAXXZ		; ImeProc

; 383  : 		SortDispBuffer(); 	// Óù∏Óçï???????

  000f1	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 384  : 							// ???????????????
; 385  : 		ClearBackSurface();

  000f6	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 386  : 		// ????????????????
; 387  : 		PutBmp();

  000fb	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 388  : 		// ??????????????????????
; 389  : 		lpBattleSurface->BltFast(0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT);

  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpBattleSurface@@3PAUIDirectDrawSurface@@A ; lpBattleSurface
  0010b	6a 10		 push	 16			; 00000010H
  0010d	6a 00		 push	 0
  0010f	ff 70 0c	 push	 DWORD PTR [eax+12]
  00112	8b 11		 mov	 edx, DWORD PTR [ecx]
  00114	6a 00		 push	 0
  00116	6a 00		 push	 0
  00118	51		 push	 ecx
  00119	ff 52 1c	 call	 DWORD PTR [edx+28]

; 390  : 		// ???????
; 391  : 		DispBuffer.DispCnt = 0;
; 392  : 		FontCnt = 0;
; 393  : 
; 394  : 		play_bgm(map_bgm_no);

  0011c	ff 35 00 00 00
	00		 push	 DWORD PTR ?map_bgm_no@@3HA ; map_bgm_no
  00122	33 c0		 xor	 eax, eax
  00124	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax
  0012a	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt
  0012f	e8 00 00 00 00	 call	 ?play_bgm@@YAHH@Z	; play_bgm

; 395  : 
; 396  : 		// ????????
; 397  : 		NowTime = TimeGetTime();

  00134	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 398  : 		// ????????Óùº?ÓüµÓüπÓüâ?
; 399  : 		//			BackBufferDrawType = DRAW_BACK_NORMAL; 
; 400  : 		BackBufferDrawType = DRAW_BACK_PRODUCE;
; 401  : 		// ?Óèù?
; 402  : 		ProduceInitFlag = TRUE;
; 403  : 		DrawProduce(PRODUCE_BRAN_BIG);

  00139	6a 13		 push	 19			; 00000013H
  0013b	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime
  00140	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  0014a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ProduceInitFlag@@3HA, 1 ; ProduceInitFlag
  00154	e8 00 00 00 00	 call	 ?DrawProduce@@YAHH@Z	; DrawProduce
  00159	83 c4 08	 add	 esp, 8

; 757  : 					//	printf("\nImeProcÊâßË°åÂÆåÊØï");
; 758  : 		break;
; 759  : 	}
; 760  : }

  0015c	ff 05 00 00 00
	00		 inc	 DWORD PTR ?SubProcNo@@3IA ; SubProcNo
$LN2@GameProc:
  00162	c3		 ret	 0
$LN10@GameProc:

; 404  : 		/*#ifdef __SKYISLAND
; 405  : 		ClearBackSurface();
; 406  : 		#endif*/
; 407  : 		SubProcNo++;
; 408  : 		break;
; 409  : 
; 410  : 	case 103:
; 411  : 		// ?Óèù?
; 412  : 		BackBufferDrawType = DRAW_BACK_PRODUCE;
; 413  : 		if (DrawProduce(PRODUCE_BRAN_BIG) == TRUE)

  00163	6a 13		 push	 19			; 00000013H
  00165	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  0016f	e8 00 00 00 00	 call	 ?DrawProduce@@YAHH@Z	; DrawProduce
  00174	83 c4 04	 add	 esp, 4
  00177	83 f8 01	 cmp	 eax, 1
  0017a	75 e6		 jne	 SHORT $LN2@GameProc

; 414  : 		{
; 415  : 			produceFlag = TRUE;

  0017c	a3 00 00 00 00	 mov	 DWORD PTR ?produceFlag@?1??GameProc@@YAXXZ@4HA, eax

; 416  : 			fieldInfoTime = TimeGetTime();

  00181	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00186	a3 00 00 00 00	 mov	 DWORD PTR ?fieldInfoTime@@3IA, eax ; fieldInfoTime
$LN58@GameProc:

; 757  : 					//	printf("\nImeProcÊâßË°åÂÆåÊØï");
; 758  : 		break;
; 759  : 	}
; 760  : }

  0018b	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?fastDrawTile@@3FB, 0 ; fastDrawTile
  00193	b8 03 00 00 00	 mov	 eax, 3
  00198	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0019d	0f 45 c1	 cmovne	 eax, ecx
  001a0	a3 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, eax ; SubProcNo
  001a5	c3		 ret	 0
$LN14@GameProc:

; 417  : 			if (fastDrawTile)
; 418  : 			{
; 419  : 				SubProcNo = 20;
; 420  : 			}
; 421  : 			else
; 422  : 			{
; 423  : 				SubProcNo = 3;
; 424  : 			}
; 425  : 		}
; 426  : 		break;
; 427  : 
; 428  : 		// ????Óèù
; 429  : 	case 200:
; 430  : 		ProduceInitFlag = TRUE;
; 431  : 
; 432  : 		// ???????
; 433  : 		DispBuffer.DispCnt = 0;

  001a6	33 c0		 xor	 eax, eax
  001a8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ProduceInitFlag@@3HA, 1 ; ProduceInitFlag
  001b2	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 434  : 		FontCnt = 0;

  001b8	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 435  : 
; 436  : 		// ????????
; 437  : 		NowTime = TimeGetTime();

  001bd	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 438  : 
; 439  : 		// S??????C? warpEffectProc();?????
; 440  : 		// ?Ó°°???????????????
; 441  : 		SubProcNo++;

  001c2	ff 05 00 00 00
	00		 inc	 DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  001c8	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime
$LN15@GameProc:

; 442  : 
; 443  : 	case 201:
; 444  : 		// ?Óèù?
; 445  : 		BackBufferDrawType = DRAW_BACK_PRODUCE;
; 446  : 		if (DrawProduce(PRODUCE_CENTER_PRESSIN) == TRUE)

  001cd	6a 1c		 push	 28			; 0000001cH
  001cf	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  001d9	e8 00 00 00 00	 call	 ?DrawProduce@@YAHH@Z	; DrawProduce
  001de	83 c4 04	 add	 esp, 4
  001e1	83 f8 01	 cmp	 eax, 1
  001e4	0f 85 75 01 00
	00		 jne	 $LN29@GameProc

; 447  : 		{
; 448  : 			SubProcNo++;

  001ea	ff 05 00 00 00
	00		 inc	 DWORD PTR ?SubProcNo@@3IA ; SubProcNo

; 521  : 			{
; 522  : 				SubProcNo = 20;
; 523  : 			}
; 524  : 			else
; 525  : 			{
; 526  : 				SubProcNo = 3;
; 527  : 			}
; 528  : #ifdef _NPC_DANCE
; 529  : 			if (nowFloor == 7027)
; 530  : 				play_bgm(24);
; 531  : #endif
; 532  : 		}
; 533  : 		drawField();	// ??????Ó°°?????Óù∏Óçï

  001f0	e8 00 00 00 00	 call	 ?drawField@@YAXXZ	; drawField

; 534  : 		MenuProc();	// ??????

  001f5	e8 00 00 00 00	 call	 ?MenuProc@@YAXXZ	; MenuProc

; 535  : 		ImeProc();	// ???????

  001fa	e9 00 00 00 00	 jmp	 ?ImeProc@@YAXXZ		; ImeProc
$LN17@GameProc:

; 449  : 		}
; 450  : 		drawField();	// ??????Ó°°?????Óù∏Óçï
; 451  : 		MenuProc();	// ??????
; 452  : 		ImeProc();	// ???????
; 453  : 		break;
; 454  : 
; 455  : 	case 202:
; 456  : 		if (!warpEffectStart || !warpEffectOk)

  001ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?warpEffectStart@@3HA, 0 ; warpEffectStart
  00206	0f 84 62 01 00
	00		 je	 $LN19@GameProc
  0020c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?warpEffectOk@@3HA, 0 ; warpEffectOk
  00213	0f 84 55 01 00
	00		 je	 $LN19@GameProc

; 462  : 			break;
; 463  : 		}
; 464  : 		warpEffectStart = FALSE;

  00219	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?warpEffectStart@@3HA, 0 ; warpEffectStart

; 465  : 		warpEffectOk = FALSE;

  00223	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?warpEffectOk@@3HA, 0 ; warpEffectOk

; 466  : 		SubProcNo++;

  0022d	c7 05 00 00 00
	00 cb 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, 203 ; SubProcNo, 000000cbH
$LN20@GameProc:

; 467  : 	case 203:
; 468  : 		// ?Óèù????Óíï
; 469  : 		// ???????
; 470  : 		paletteProc();

  00237	e8 00 00 00 00	 call	 ?paletteProc@@YAXXZ	; paletteProc

; 471  : 
; 472  : 		DispBuffer.DispCnt = 0;

  0023c	33 c0		 xor	 eax, eax
  0023e	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 473  : 		FontCnt = 0;

  00244	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 474  : 		initCharPartsPrio();	// ?????????Óìè???Óòã??????

  00249	e8 00 00 00 00	 call	 ?initCharPartsPrio@@YAXXZ ; initCharPartsPrio

; 475  : 		RunAction();			// ?????????

  0024e	e8 00 00 00 00	 call	 ?RunAction@@YAXXZ	; RunAction

; 476  : 		StockTaskDispBuffer();	// ???Óù∏Óçï????????????

  00253	e8 00 00 00 00	 call	 ?StockTaskDispBuffer@@YAXXZ ; StockTaskDispBuffer

; 477  : 		redrawMap();

  00258	e8 00 00 00 00	 call	 ?redrawMap@@YAXXZ	; redrawMap

; 478  : 		drawMap();				//	???Óù∏Óçï

  0025d	e8 00 00 00 00	 call	 ?drawMap@@YAXXZ		; drawMap

; 479  : 
; 480  : 								// ?????????
; 481  : 		if ((mapEffectRainLevel == 0 && oldMapEffectRainLevel != 0)
; 482  : 			|| (mapEffectSnowLevel == 0 && oldMapEffectSnowLevel != 0)

  00262	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectRainLevel@@3FA, 0 ; mapEffectRainLevel
  0026a	75 0a		 jne	 SHORT $LN23@GameProc
  0026c	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?oldMapEffectRainLevel@@3FA, 0 ; oldMapEffectRainLevel
  00274	75 14		 jne	 SHORT $LN22@GameProc
$LN23@GameProc:
  00276	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectSnowLevel@@3FA, 0 ; mapEffectSnowLevel
  0027e	75 14		 jne	 SHORT $LN21@GameProc
  00280	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?oldMapEffectSnowLevel@@3FA, 0 ; oldMapEffectSnowLevel
  00288	74 0a		 je	 SHORT $LN21@GameProc
$LN22@GameProc:

; 483  : 			)
; 484  : 			initMapEffect(FALSE);

  0028a	6a 00		 push	 0
  0028c	e8 00 00 00 00	 call	 ?initMapEffect@@YAXH@Z	; initMapEffect
  00291	83 c4 04	 add	 esp, 4
$LN21@GameProc:

; 485  : 		ChatProc();				// ??????

  00294	e8 00 00 00 00	 call	 ?ChatProc@@YAXXZ	; ChatProc

; 486  : 		ChatBufferToFontBuffer(); // ??????????????????????

  00299	e8 00 00 00 00	 call	 ?ChatBufferToFontBuffer@@YAXXZ ; ChatBufferToFontBuffer

; 487  : 		SortDispBuffer(); 	// Óù∏Óçï???????

  0029e	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 488  : 							// ???????????????
; 489  : 		ClearBackSurface();

  002a3	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 490  : 		if ((mapEffectRainLevel != 0 && oldMapEffectRainLevel == 0)
; 491  : 			|| (mapEffectSnowLevel != 0 && oldMapEffectSnowLevel == 0))

  002a8	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectRainLevel@@3FA, 0 ; mapEffectRainLevel
  002b0	74 0a		 je	 SHORT $LN26@GameProc
  002b2	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?oldMapEffectRainLevel@@3FA, 0 ; oldMapEffectRainLevel
  002ba	74 14		 je	 SHORT $LN25@GameProc
$LN26@GameProc:
  002bc	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?mapEffectSnowLevel@@3FA, 0 ; mapEffectSnowLevel
  002c4	74 14		 je	 SHORT $LN24@GameProc
  002c6	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?oldMapEffectSnowLevel@@3FA, 0 ; oldMapEffectSnowLevel
  002ce	75 0a		 jne	 SHORT $LN24@GameProc
$LN25@GameProc:

; 492  : 			mapEffectProc2(80);		// ???????????Óìä??

  002d0	6a 50		 push	 80			; 00000050H
  002d2	e8 00 00 00 00	 call	 ?mapEffectProc2@@YAXH@Z	; mapEffectProc2
  002d7	83 c4 04	 add	 esp, 4
$LN24@GameProc:

; 493  : 									// ????????????????
; 494  : 		PutBmp();

  002da	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 495  : 		// ??????????????????????
; 496  : 		lpBattleSurface->BltFast(0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT);

  002df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  002e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpBattleSurface@@3PAUIDirectDrawSurface@@A ; lpBattleSurface
  002ea	6a 10		 push	 16			; 00000010H
  002ec	6a 00		 push	 0
  002ee	ff 70 0c	 push	 DWORD PTR [eax+12]
  002f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f3	6a 00		 push	 0
  002f5	6a 00		 push	 0
  002f7	51		 push	 ecx
  002f8	ff 52 1c	 call	 DWORD PTR [edx+28]

; 497  : 		// ???????
; 498  : 		DispBuffer.DispCnt = 0;

  002fb	33 c0		 xor	 eax, eax
  002fd	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 499  : 		FontCnt = 0;

  00303	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 500  : 
; 501  : 		//			if( map_bgm_no != now_bgm )
; 502  : 		//			{
; 503  : 		//				stop_bgm();				//???ÓòÖÓçè
; 504  : 		//				play_bgm( map_bgm_no );
; 505  : 		//			}
; 506  : 
; 507  : 		// ????????
; 508  : 		NowTime = TimeGetTime();

  00308	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 509  : 
; 510  : 		ProduceInitFlag = TRUE;
; 511  : 
; 512  : 		SubProcNo++;

  0030d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  00313	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime
  00318	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ProduceInitFlag@@3HA, 1 ; ProduceInitFlag
$LN27@GameProc:

; 513  : 
; 514  : 	case 204:
; 515  : 		// ?Óèù?
; 516  : 		BackBufferDrawType = DRAW_BACK_PRODUCE;
; 517  : 		if (DrawProduce(PRODUCE_CENTER_PRESSOUT) == TRUE)

  00322	6a 1d		 push	 29			; 0000001dH
  00324	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  0032e	e8 00 00 00 00	 call	 ?DrawProduce@@YAHH@Z	; DrawProduce
  00333	83 c4 04	 add	 esp, 4
  00336	83 f8 01	 cmp	 eax, 1
  00339	75 24		 jne	 SHORT $LN29@GameProc

; 518  : 		{
; 519  : 			fieldInfoTime = TimeGetTime();

  0033b	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 520  : 			if (fastDrawTile)

  00340	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?fastDrawTile@@3FB, 0 ; fastDrawTile
  00348	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0034d	a3 00 00 00 00	 mov	 DWORD PTR ?fieldInfoTime@@3IA, eax ; fieldInfoTime
  00352	b8 03 00 00 00	 mov	 eax, 3
  00357	0f 45 c1	 cmovne	 eax, ecx
  0035a	a3 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, eax ; SubProcNo
$LN29@GameProc:

; 521  : 			{
; 522  : 				SubProcNo = 20;
; 523  : 			}
; 524  : 			else
; 525  : 			{
; 526  : 				SubProcNo = 3;
; 527  : 			}
; 528  : #ifdef _NPC_DANCE
; 529  : 			if (nowFloor == 7027)
; 530  : 				play_bgm(24);
; 531  : #endif
; 532  : 		}
; 533  : 		drawField();	// ??????Ó°°?????Óù∏Óçï

  0035f	e8 00 00 00 00	 call	 ?drawField@@YAXXZ	; drawField

; 534  : 		MenuProc();	// ??????

  00364	e8 00 00 00 00	 call	 ?MenuProc@@YAXXZ	; MenuProc

; 535  : 		ImeProc();	// ???????

  00369	e9 00 00 00 00	 jmp	 ?ImeProc@@YAXXZ		; ImeProc
$LN19@GameProc:

; 457  : 		{
; 458  : 			BackBufferDrawType = DRAW_BACK_NORMAL;

  0036e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 459  : 			drawField();	// ??????Ó°°?????Óù∏Óçï

  00378	e8 00 00 00 00	 call	 ?drawField@@YAXXZ	; drawField

; 460  : 			MenuProc();	// ??????

  0037d	e8 00 00 00 00	 call	 ?MenuProc@@YAXXZ	; MenuProc

; 461  : 			ImeProc();	// ???????

  00382	e9 00 00 00 00	 jmp	 ?ImeProc@@YAXXZ		; ImeProc
$LN31@GameProc:

; 536  : 		break;
; 537  : 
; 538  : 
; 539  : 	case 1:
; 540  : 		initPc();				// ?????????Óíï

  00387	e8 00 00 00 00	 call	 ?initPc@@YAXXZ		; initPc

; 541  : 		resetFieldProc();		// ????????????

  0038c	e8 00 00 00 00	 call	 ?resetFieldProc@@YAXXZ	; resetFieldProc

; 542  : 		restorePtActCharObjAll();	// ?????????????????

  00391	e8 00 00 00 00	 call	 ?restorePtActCharObjAll@@YAXXZ ; restorePtActCharObjAll

; 543  : 		initOpenServerWindow();	// ????ÓçàÓçï?Óù∏Óçï???????????

  00396	e8 00 00 00 00	 call	 ?initOpenServerWindow@@YAXXZ ; initOpenServerWindow

; 544  : 		InitMenu();		// ??????????

  0039b	e8 00 00 00 00	 call	 ?InitMenu@@YAXXZ	; InitMenu

; 545  : 						//			BattleStatusBak[ 0 ] = NULL;// ???ÓêøÓïö???
; 546  : 						//			BattleStatusReadPointer = BattleStatusWritePointer =0;
; 547  : 						// Óöº??????ÓéïÓôæ
; 548  : 		GetKeyInputFocus(&MyChatBuffer);

  003a0	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  003a5	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  003aa	83 c4 04	 add	 esp, 4

; 549  : 
; 550  : 		// ?Óèù???
; 551  : 		if (produceFlag == TRUE) {

  003ad	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?produceFlag@?1??GameProc@@YAXXZ@4HA, 1
  003b4	0f 85 cc 00 00
	00		 jne	 $LN32@GameProc

; 552  : 			// ÓìñÓô¨????????????
; 553  : 			//if( BattleResultWndFlag == TRUE ){
; 554  : 
; 555  : 			// ?Óèù????Óíï
; 556  : 			// ???????
; 557  : 			DispBuffer.DispCnt = 0;

  003ba	33 c0		 xor	 eax, eax
  003bc	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 558  : 			FontCnt = 0;

  003c2	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 559  : 			initCharPartsPrio();	// ?????????Óìè???Óòã??????

  003c7	e8 00 00 00 00	 call	 ?initCharPartsPrio@@YAXXZ ; initCharPartsPrio

; 560  : 			RunAction();			// ?????????

  003cc	e8 00 00 00 00	 call	 ?RunAction@@YAXXZ	; RunAction

; 561  : 			StockTaskDispBuffer();	// ???Óù∏Óçï????????????

  003d1	e8 00 00 00 00	 call	 ?StockTaskDispBuffer@@YAXXZ ; StockTaskDispBuffer

; 562  : 			stop_bgm();				//???ÓòÖÓçè

  003d6	e8 00 00 00 00	 call	 ?stop_bgm@@YAXXZ	; stop_bgm

; 563  : 			updateMapArea();

  003db	e8 00 00 00 00	 call	 ?updateMapArea@@YAXXZ	; updateMapArea

; 564  : 			redrawMap();

  003e0	e8 00 00 00 00	 call	 ?redrawMap@@YAXXZ	; redrawMap

; 565  : 			drawMap();				//	???Óù∏Óçï

  003e5	e8 00 00 00 00	 call	 ?drawMap@@YAXXZ		; drawMap

; 566  : 									//????????
; 567  : 			if (!draw_map_bgm_flg) {

  003ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_map_bgm_flg@@3HA, 0 ; draw_map_bgm_flg
  003f1	75 1d		 jne	 SHORT $LN34@GameProc

; 568  : 				//????????Óíü
; 569  : 				play_bgm(map_bgm_no = now_bgm);

  003f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?now_bgm@?1??GameProc@@YAXXZ@4HA
  003f8	50		 push	 eax
  003f9	a3 00 00 00 00	 mov	 DWORD PTR ?map_bgm_no@@3HA, eax ; map_bgm_no
  003fe	e8 00 00 00 00	 call	 ?play_bgm@@YAHH@Z	; play_bgm
  00403	83 c4 04	 add	 esp, 4

; 570  : 				draw_map_bgm_flg = 1;

  00406	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_map_bgm_flg@@3HA, 1 ; draw_map_bgm_flg
$LN34@GameProc:

; 571  : 			}
; 572  : 			MenuProc();				// ??????

  00410	e8 00 00 00 00	 call	 ?MenuProc@@YAXXZ	; MenuProc

; 573  : 									// ???????Óôä??????Óëë?
; 574  : 									//StockBoxDispBuffer( 0, 456, lpDraw->xSize, lpDraw->ySize, DISP_PRIO_MENU, 0, 1 );
; 575  : 			ChatProc();				// ??????

  00415	e8 00 00 00 00	 call	 ?ChatProc@@YAXXZ	; ChatProc

; 576  : 			ChatBufferToFontBuffer(); // ??????????????????????

  0041a	e8 00 00 00 00	 call	 ?ChatBufferToFontBuffer@@YAXXZ ; ChatBufferToFontBuffer

; 577  : 			ImeProc();				// ???????

  0041f	e8 00 00 00 00	 call	 ?ImeProc@@YAXXZ		; ImeProc

; 578  : 			SortDispBuffer(); 	// Óù∏Óçï???????

  00424	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 579  : 								// ???????????????
; 580  : 			ClearBackSurface();

  00429	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 581  : 			// ????????????????
; 582  : 			PutBmp();

  0042e	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 583  : 			// ??????????????????????
; 584  : 			lpBattleSurface->BltFast(0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT);

  00433	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00438	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpBattleSurface@@3PAUIDirectDrawSurface@@A ; lpBattleSurface
  0043e	6a 10		 push	 16			; 00000010H
  00440	6a 00		 push	 0
  00442	ff 70 0c	 push	 DWORD PTR [eax+12]
  00445	8b 11		 mov	 edx, DWORD PTR [ecx]
  00447	6a 00		 push	 0
  00449	6a 00		 push	 0
  0044b	51		 push	 ecx
  0044c	ff 52 1c	 call	 DWORD PTR [edx+28]

; 585  : 			// ???????
; 586  : 			DispBuffer.DispCnt = 0;

  0044f	33 c0		 xor	 eax, eax
  00451	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 587  : 			FontCnt = 0;

  00457	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 588  : 			// ????????
; 589  : 			NowTime = TimeGetTime();

  0045c	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 590  : 			// ????????Óùº?ÓüµÓüπÓüâ?
; 591  : 			BackBufferDrawType = DRAW_BACK_PRODUCE;
; 592  : 			// ?Óèù?
; 593  : 			DrawProduce(PRODUCE_4WAY_IN);

  00461	6a 0d		 push	 13			; 0000000dH
  00463	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime
  00468	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  00472	e8 00 00 00 00	 call	 ?DrawProduce@@YAHH@Z	; DrawProduce

; 594  : 		}

  00477	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  0047c	83 c4 04	 add	 esp, 4

; 599  : 		}
; 600  : 		SubProcNo++;

  0047f	40		 inc	 eax
  00480	a3 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, eax ; SubProcNo

; 757  : 					//	printf("\nImeProcÊâßË°åÂÆåÊØï");
; 758  : 		break;
; 759  : 	}
; 760  : }

  00485	c3		 ret	 0
$LN32@GameProc:

; 595  : 		else {
; 596  : 			// ?Óèù?????
; 597  : 			produceFlag = TRUE;
; 598  : 			SubProcNo++;

  00486	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  0048b	40		 inc	 eax
  0048c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?produceFlag@?1??GameProc@@YAXXZ@4HA, 1

; 599  : 		}
; 600  : 		SubProcNo++;

  00496	40		 inc	 eax
  00497	a3 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, eax ; SubProcNo

; 757  : 					//	printf("\nImeProcÊâßË°åÂÆåÊØï");
; 758  : 		break;
; 759  : 	}
; 760  : }

  0049c	c3		 ret	 0
$LN35@GameProc:

; 601  : 
; 602  : 		break;
; 603  : 
; 604  : 	case 2:	// ????????Óèù
; 605  : 			// ?Óèù?
; 606  : 		if (DrawProduce(PRODUCE_4WAY_IN) == TRUE) {

  0049d	6a 0d		 push	 13			; 0000000dH
  0049f	e8 00 00 00 00	 call	 ?DrawProduce@@YAHH@Z	; DrawProduce
  004a4	83 c4 04	 add	 esp, 4
  004a7	83 f8 01	 cmp	 eax, 1
  004aa	0f 85 b2 fc ff
	ff		 jne	 $LN2@GameProc

; 607  : 			warpEffectStart = FALSE;

  004b0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?warpEffectStart@@3HA, 0 ; warpEffectStart

; 608  : 			warpEffectOk = FALSE;

  004ba	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?warpEffectOk@@3HA, 0 ; warpEffectOk

; 609  : 			if (fastDrawTile)
; 610  : 			{
; 611  : 				SubProcNo = 20;
; 612  : 			}
; 613  : 			else
; 614  : 			{
; 615  : 				SubProcNo = 3;
; 616  : 			}
; 617  : 		}
; 618  : 		break;

  004c4	e9 c2 fc ff ff	 jmp	 $LN58@GameProc
$LN39@GameProc:

; 619  : 
; 620  : 
; 621  : 	case 20:
; 622  : 		BackBufferDrawType = DRAW_BACK_NORMAL;

  004c9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 623  : 		repairMap();

  004d3	e8 00 00 00 00	 call	 ?repairMap@@YAXXZ	; repairMap

; 624  : 		SubProcNo = 3;

  004d8	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, 3 ; SubProcNo
$LN40@GameProc:

; 625  : 
; 626  : 	case 3:
; 627  : 		// ????????Óùº?ÓüµÓüπÓüâ?
; 628  : 
; 629  : 		BackBufferDrawType = DRAW_BACK_NORMAL;

  004e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 630  : 		paletteProc();

  004ec	e8 00 00 00 00	 call	 ?paletteProc@@YAXXZ	; paletteProc

; 631  : 
; 632  : 		initItemOverlapCheck();	// ????Óèí????????????

  004f1	e8 00 00 00 00	 call	 ?initItemOverlapCheck@@YAXXZ ; initItemOverlapCheck

; 633  : 
; 634  : 		if (!transmigrationEffectFlag) {

  004f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?transmigrationEffectFlag@@3HA, 0 ; transmigrationEffectFlag
  004fd	75 0f		 jne	 SHORT $LN43@GameProc

; 635  : 			drawGrid();				// ????????Óù∏Óçï

  004ff	e8 00 00 00 00	 call	 ?drawGrid@@YAXXZ	; drawGrid

; 636  : 			fieldProc();			// ?????????

  00504	e8 00 00 00 00	 call	 ?fieldProc@@YAXXZ	; fieldProc

; 637  : 									// Nuke 0407
; 638  : 
; 639  : 			if (bNewServer) {
; 640  : 				moveProc();				// ?ÓôÆ??
; 641  : 			}
; 642  : 			else
; 643  : 				moveProc();				// ?ÓôÆ??

  00509	e8 00 00 00 00	 call	 ?moveProc@@YAXXZ	; moveProc
$LN43@GameProc:

; 644  : 		}
; 645  : 
; 646  : 		initCharPartsPrio();	// ?????????Óìè???Óòã??????

  0050e	e8 00 00 00 00	 call	 ?initCharPartsPrio@@YAXXZ ; initCharPartsPrio

; 647  : 								//addressBookProc();		// ?????????
; 648  : 		openServerWindowProc();	// ????Óíê?????

  00513	e8 00 00 00 00	 call	 ?openServerWindowProc@@YAXXZ ; openServerWindowProc

; 649  : 		drawFieldInfoWin();		// ?????Óê∂?Óê∫Óü´

  00518	e8 00 00 00 00	 call	 ?drawFieldInfoWin@@YAXXZ ; drawFieldInfoWin

; 650  : 
; 651  : 								/* ????????? */
; 652  : 		RunAction();

  0051d	e8 00 00 00 00	 call	 ?RunAction@@YAXXZ	; RunAction

; 653  : 		// ???Óù∏Óçï????????????
; 654  : 		// ÓçàÓòãÓú™?????????
; 655  : 		StockTaskDispBuffer();

  00522	e8 00 00 00 00	 call	 ?StockTaskDispBuffer@@YAXXZ ; StockTaskDispBuffer

; 656  : 
; 657  : 		mapEffectProc();		// ???????????Óìä??

  00527	e8 00 00 00 00	 call	 ?mapEffectProc@@YAXXZ	; mapEffectProc

; 658  : 
; 659  : 		drawMap2();		// ???Óù∏Óçï

  0052c	e8 00 00 00 00	 call	 ?drawMap2@@YAXXZ	; drawMap2

; 660  : 
; 661  : 
; 662  : 
; 663  : 		if (!transmigrationEffectFlag) {

  00531	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?transmigrationEffectFlag@@3HA, 0 ; transmigrationEffectFlag
  00538	75 1e		 jne	 SHORT $LN44@GameProc

; 664  : 			drawField();	// ??????Ó°°?????Óù∏Óçï

  0053a	e8 00 00 00 00	 call	 ?drawField@@YAXXZ	; drawField

; 665  : 
; 666  : 							/* ?????? */
; 667  : 			ChatProc();

  0053f	e8 00 00 00 00	 call	 ?ChatProc@@YAXXZ	; ChatProc

; 668  : 			// ??????????????????????
; 669  : 			ChatBufferToFontBuffer();

  00544	e8 00 00 00 00	 call	 ?ChatBufferToFontBuffer@@YAXXZ ; ChatBufferToFontBuffer

; 670  : 			// ?????????ÓôÅÓ°ú??
; 671  : 			FlashKeyboardCursor();

  00549	e8 00 00 00 00	 call	 ?FlashKeyboardCursor@@YAXXZ ; FlashKeyboardCursor

; 672  : 			// ??????
; 673  : 			MenuProc();

  0054e	e8 00 00 00 00	 call	 ?MenuProc@@YAXXZ	; MenuProc

; 674  : 			// ???????
; 675  : 			ImeProc();

  00553	e8 00 00 00 00	 call	 ?ImeProc@@YAXXZ		; ImeProc
$LN44@GameProc:

; 676  : 		}
; 677  : 		// ??Óïó?????????????
; 678  : 		TimeZoneProc();

  00558	e8 00 00 00 00	 call	 ?TimeZoneProc@@YAXXZ	; TimeZoneProc

; 679  : 
; 680  : 		/*cary
; 681  : 		#ifdef _STONDEBUG_
; 682  : 		// ?????????
; 683  : 		if( joy_trg[ 0 ] & JOY_P_DOWN ){
; 684  : 		if( pc.ptAct != NULL ){
; 685  : 		resetMap();					// ?????????
; 686  : 		// ???????Óëò
; 687  : 		if( bNewServer)
; 688  : 		lssproto_EN_send( sockfd, pc.ptAct->gx, pc.ptAct->gy );
; 689  : 		else
; 690  : 		old_lssproto_EN_send( sockfd, pc.ptAct->gx, pc.ptAct->gy );
; 691  : 		eventEnemyFlag = 0;
; 692  : 		}
; 693  : 		}
; 694  : 		#endif
; 695  : 		*/
; 696  : 		// ?????????
; 697  : 		if (EncountFlag == TRUE) {

  0055d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?EncountFlag@@3HA, 1 ; EncountFlag
  00564	0f 85 f8 fb ff
	ff		 jne	 $LN2@GameProc

; 698  : 			resetPc();				// PC????

  0056a	e8 00 00 00 00	 call	 ?resetPc@@YAXXZ		; resetPc

; 699  : 			resetCharObj();			// ?????????????

  0056f	e8 00 00 00 00	 call	 ?resetCharObj@@YAXXZ	; resetCharObj

; 700  : 			resetMap();				// ?????????

  00574	e8 00 00 00 00	 call	 ?resetMap@@YAXXZ	; resetMap

; 701  : 			clearPtActPartyParam();	// ??Óê∫Óü´?????????????NULL???

  00579	e8 00 00 00 00	 call	 ?clearPtActPartyParam@@YAXXZ ; clearPtActPartyParam

; 702  : 			fieldInfoTime = 0;		// Óê∂?Óê∫Óü´?Óèù???Óêç?

  0057e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fieldInfoTime@@3IA, 0 ; fieldInfoTime

; 703  : 			drawFieldInfoWin();		// ?????Óê∂?Óê∫Óü´

  00588	e8 00 00 00 00	 call	 ?drawFieldInfoWin@@YAXXZ ; drawFieldInfoWin

; 704  : 			resetFieldProc();		// ????????????

  0058d	e8 00 00 00 00	 call	 ?resetFieldProc@@YAXXZ	; resetFieldProc

; 705  : 			nowEncountPercentage = minEncountPercentage;// ?????????Óè∏???

  00592	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?minEncountPercentage@@3FA ; minEncountPercentage

; 706  : 			sendEnFlag = 0;
; 707  : 			encountNowFlag = 1;

  00598	b9 01 00 00 00	 mov	 ecx, 1
  0059d	66 a3 00 00 00
	00		 mov	 WORD PTR ?nowEncountPercentage@@3FA, ax ; nowEncountPercentage
  005a3	33 c0		 xor	 eax, eax

; 708  : 			eventEnemySendFlag = 0;
; 709  : 			duelSendFlag = 0;
; 710  : 			jbSendFlag = 0;
; 711  : 			if (MenuToggleFlag & JOY_CTRL_M) MapWmdFlagBak = TRUE;

  005a5	f7 05 00 00 00
	00 00 00 00 40	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 1073741824 ; MenuToggleFlag, 40000000H
  005af	66 a3 00 00 00
	00		 mov	 WORD PTR ?sendEnFlag@@3FA, ax ; sendEnFlag
  005b5	66 a3 00 00 00
	00		 mov	 WORD PTR ?eventEnemySendFlag@@3FA, ax ; eventEnemySendFlag
  005bb	66 a3 00 00 00
	00		 mov	 WORD PTR ?duelSendFlag@@3FA, ax ; duelSendFlag
  005c1	66 a3 00 00 00
	00		 mov	 WORD PTR ?jbSendFlag@@3FA, ax ; jbSendFlag
  005c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MapWmdFlagBak@@3HA ; MapWmdFlagBak
  005cc	0f 45 c1	 cmovne	 eax, ecx
  005cf	66 89 0d 00 00
	00 00		 mov	 WORD PTR ?encountNowFlag@@3FA, cx ; encountNowFlag
  005d6	a3 00 00 00 00	 mov	 DWORD PTR ?MapWmdFlagBak@@3HA, eax ; MapWmdFlagBak

; 712  : 			ResultWndTimer = RESULT_WND_CLOSE_TIME;

  005db	c7 05 00 00 00
	00 2c 01 00 00	 mov	 DWORD PTR ?ResultWndTimer@@3HA, 300 ; ResultWndTimer, 0000012cH

; 713  : 			InitMenu();			// ??????????

  005e5	e8 00 00 00 00	 call	 ?InitMenu@@YAXXZ	; InitMenu

; 714  : 			BattleCmd[0] = NULL;		// ??????????
; 715  : 										//				BattleCmdBak[ 0 ] = NULL;	// ??????????
; 716  : 										//				BattleCmdReadPointer = BattleCmdWritePointer =0;
; 717  : 			BattleStatus[0] = NULL;	// ???ÓêøÓïö???
; 718  : 									//BattleStatusBak[ 0 ] = NULL;// ???ÓêøÓïö???
; 719  : 									//				BattleStatusReadPointer = BattleStatusWritePointer =0;
; 720  : 			BattleTurnReceiveFlag = TRUE;
; 721  : 			play_se(215, 320, 240);

  005ea	68 f0 00 00 00	 push	 240			; 000000f0H
  005ef	68 40 01 00 00	 push	 320			; 00000140H
  005f4	68 d7 00 00 00	 push	 215			; 000000d7H
  005f9	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?BattleCmd@@3PADA, 0
  00600	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?BattleStatus@@3PADA, 0
  00607	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?BattleTurnReceiveFlag@@3HA, 1 ; BattleTurnReceiveFlag
  00611	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 722  : 			now_bgm = t_music_bgm_no;

  00616	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t_music_bgm_no@@3HA ; t_music_bgm_no
  0061b	a3 00 00 00 00	 mov	 DWORD PTR ?now_bgm@?1??GameProc@@YAXXZ@4HA, eax

; 723  : 			stop_bgm();

  00620	e8 00 00 00 00	 call	 ?stop_bgm@@YAXXZ	; stop_bgm

; 724  : 			//SubProcNo++;
; 725  : 			ChangeProc2(PROC_GAME, SubProcNo + 1);

  00625	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  0062a	40		 inc	 eax
  0062b	50		 push	 eax
  0062c	6a 09		 push	 9
  0062e	e8 00 00 00 00	 call	 ?ChangeProc2@@YAXHH@Z	; ChangeProc2
  00633	83 c4 14	 add	 esp, 20			; 00000014H

; 757  : 					//	printf("\nImeProcÊâßË°åÂÆåÊØï");
; 758  : 		break;
; 759  : 	}
; 760  : }

  00636	c3		 ret	 0
$LN47@GameProc:

; 726  : 			//printf("\nÊàòÊñóÈ¢ÑÂ§ÑÁêÜÊâßË°åÂÆåÊØï SubProcNo=%d",SubProcNo+1);
; 727  : 		}
; 728  : 		break;
; 729  : 
; 730  : 	case 4:	// ??????????Óèù??????????
; 731  : 			// ????????????Óíï 
; 732  : 		CopyBackBuffer();

  00637	e8 00 00 00 00	 call	 ?CopyBackBuffer@@YAXXZ	; CopyBackBuffer

; 757  : 					//	printf("\nImeProcÊâßË°åÂÆåÊØï");
; 758  : 		break;
; 759  : 	}
; 760  : }

  0063c	ff 05 00 00 00
	00		 inc	 DWORD PTR ?SubProcNo@@3IA ; SubProcNo
  00642	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  0064c	c3		 ret	 0
$LN48@GameProc:

; 733  : 		// ????????Óùº?ÓüµÓüπÓüâ?
; 734  : 		BackBufferDrawType = DRAW_BACK_PRODUCE;
; 735  : 		SubProcNo++;
; 736  : 		//	printf("\nDRAW_BACK_PRODUCEÊâßË°åÂÆåÊØï SubProcNo=%d",SubProcNo);
; 737  : 		break;
; 738  : 
; 739  : 	case 5:	// ???????Óèù
; 740  : 
; 741  : 			// ?Óèù?
; 742  : 		if (DrawProduce(PRODUCE_HAGARE_OCHI_OUT) == TRUE) {

  0064d	6a 10		 push	 16			; 00000010H
  0064f	e8 00 00 00 00	 call	 ?DrawProduce@@YAHH@Z	; DrawProduce
  00654	83 c4 04	 add	 esp, 4
  00657	83 f8 01	 cmp	 eax, 1
  0065a	75 11		 jne	 SHORT $LN49@GameProc

; 743  : 			//if( DrawProduce( PRODUCE_RIGHT_ACCELE ) == TRUE ){
; 744  : 			//if( DrawProduce( PRODUCE_LEFT_RIGHT_ACCELE ) == TRUE ){
; 745  : 			//if( GameState == GAME_ENCOUNT_TO_BATTLE ){ 
; 746  : 			// ????????
; 747  : #ifdef _HALLOWEEN_EFFECT
; 748  : 			initMapEffect(FALSE);

  0065c	6a 00		 push	 0
  0065e	e8 00 00 00 00	 call	 ?initMapEffect@@YAXH@Z	; initMapEffect

; 749  : #endif
; 750  : 			ChangeProc(PROC_BATTLE);

  00663	6a 0a		 push	 10			; 0000000aH
  00665	e8 00 00 00 00	 call	 ?ChangeProc@@YAXH@Z	; ChangeProc
  0066a	83 c4 08	 add	 esp, 8
$LN49@GameProc:

; 751  : 			//		printf("\nPROC_BATTLEÊõ¥Êç¢ÂÆåÊØï SubProcNo=%d",SubProcNo);
; 752  : 		}
; 753  : 
; 754  : 		MenuProc();	// ??????

  0066d	e8 00 00 00 00	 call	 ?MenuProc@@YAXXZ	; MenuProc

; 755  : 					//	printf("\nMenuProcÊâßË°åÂÆåÊØï");
; 756  : 		ImeProc();	// ???????

  00672	e9 00 00 00 00	 jmp	 ?ImeProc@@YAXXZ		; ImeProc
  00677	90		 npad	 1
$LN56@GameProc:

; 757  : 					//	printf("\nImeProcÊâßË°åÂÆåÊØï");
; 758  : 		break;
; 759  : 	}
; 760  : }

  00678	00 00 00 00	 DD	 $LN4@GameProc
  0067c	00 00 00 00	 DD	 $LN31@GameProc
  00680	00 00 00 00	 DD	 $LN35@GameProc
  00684	00 00 00 00	 DD	 $LN40@GameProc
  00688	00 00 00 00	 DD	 $LN47@GameProc
  0068c	00 00 00 00	 DD	 $LN48@GameProc
  00690	00 00 00 00	 DD	 $LN39@GameProc
  00694	00 00 00 00	 DD	 $LN6@GameProc
  00698	00 00 00 00	 DD	 $LN7@GameProc
  0069c	00 00 00 00	 DD	 $LN9@GameProc
  006a0	00 00 00 00	 DD	 $LN10@GameProc
  006a4	00 00 00 00	 DD	 $LN5@GameProc
  006a8	00 00 00 00	 DD	 $LN14@GameProc
  006ac	00 00 00 00	 DD	 $LN15@GameProc
  006b0	00 00 00 00	 DD	 $LN17@GameProc
  006b4	00 00 00 00	 DD	 $LN20@GameProc
  006b8	00 00 00 00	 DD	 $LN27@GameProc
  006bc	00 00 00 00	 DD	 $LN2@GameProc
$LN55@GameProc:
  006c0	00		 DB	 0
  006c1	01		 DB	 1
  006c2	02		 DB	 2
  006c3	03		 DB	 3
  006c4	04		 DB	 4
  006c5	05		 DB	 5
  006c6	11		 DB	 17			; 00000011H
  006c7	11		 DB	 17			; 00000011H
  006c8	11		 DB	 17			; 00000011H
  006c9	11		 DB	 17			; 00000011H
  006ca	11		 DB	 17			; 00000011H
  006cb	11		 DB	 17			; 00000011H
  006cc	11		 DB	 17			; 00000011H
  006cd	11		 DB	 17			; 00000011H
  006ce	11		 DB	 17			; 00000011H
  006cf	11		 DB	 17			; 00000011H
  006d0	11		 DB	 17			; 00000011H
  006d1	11		 DB	 17			; 00000011H
  006d2	11		 DB	 17			; 00000011H
  006d3	11		 DB	 17			; 00000011H
  006d4	06		 DB	 6
  006d5	11		 DB	 17			; 00000011H
  006d6	11		 DB	 17			; 00000011H
  006d7	11		 DB	 17			; 00000011H
  006d8	11		 DB	 17			; 00000011H
  006d9	11		 DB	 17			; 00000011H
  006da	11		 DB	 17			; 00000011H
  006db	11		 DB	 17			; 00000011H
  006dc	11		 DB	 17			; 00000011H
  006dd	11		 DB	 17			; 00000011H
  006de	11		 DB	 17			; 00000011H
  006df	11		 DB	 17			; 00000011H
  006e0	11		 DB	 17			; 00000011H
  006e1	11		 DB	 17			; 00000011H
  006e2	11		 DB	 17			; 00000011H
  006e3	11		 DB	 17			; 00000011H
  006e4	11		 DB	 17			; 00000011H
  006e5	11		 DB	 17			; 00000011H
  006e6	11		 DB	 17			; 00000011H
  006e7	11		 DB	 17			; 00000011H
  006e8	11		 DB	 17			; 00000011H
  006e9	11		 DB	 17			; 00000011H
  006ea	11		 DB	 17			; 00000011H
  006eb	11		 DB	 17			; 00000011H
  006ec	11		 DB	 17			; 00000011H
  006ed	11		 DB	 17			; 00000011H
  006ee	11		 DB	 17			; 00000011H
  006ef	11		 DB	 17			; 00000011H
  006f0	11		 DB	 17			; 00000011H
  006f1	11		 DB	 17			; 00000011H
  006f2	11		 DB	 17			; 00000011H
  006f3	11		 DB	 17			; 00000011H
  006f4	11		 DB	 17			; 00000011H
  006f5	11		 DB	 17			; 00000011H
  006f6	11		 DB	 17			; 00000011H
  006f7	11		 DB	 17			; 00000011H
  006f8	11		 DB	 17			; 00000011H
  006f9	11		 DB	 17			; 00000011H
  006fa	11		 DB	 17			; 00000011H
  006fb	11		 DB	 17			; 00000011H
  006fc	11		 DB	 17			; 00000011H
  006fd	11		 DB	 17			; 00000011H
  006fe	11		 DB	 17			; 00000011H
  006ff	11		 DB	 17			; 00000011H
  00700	11		 DB	 17			; 00000011H
  00701	11		 DB	 17			; 00000011H
  00702	11		 DB	 17			; 00000011H
  00703	11		 DB	 17			; 00000011H
  00704	11		 DB	 17			; 00000011H
  00705	11		 DB	 17			; 00000011H
  00706	11		 DB	 17			; 00000011H
  00707	11		 DB	 17			; 00000011H
  00708	11		 DB	 17			; 00000011H
  00709	11		 DB	 17			; 00000011H
  0070a	11		 DB	 17			; 00000011H
  0070b	11		 DB	 17			; 00000011H
  0070c	11		 DB	 17			; 00000011H
  0070d	11		 DB	 17			; 00000011H
  0070e	11		 DB	 17			; 00000011H
  0070f	11		 DB	 17			; 00000011H
  00710	11		 DB	 17			; 00000011H
  00711	11		 DB	 17			; 00000011H
  00712	11		 DB	 17			; 00000011H
  00713	11		 DB	 17			; 00000011H
  00714	11		 DB	 17			; 00000011H
  00715	11		 DB	 17			; 00000011H
  00716	11		 DB	 17			; 00000011H
  00717	11		 DB	 17			; 00000011H
  00718	11		 DB	 17			; 00000011H
  00719	11		 DB	 17			; 00000011H
  0071a	11		 DB	 17			; 00000011H
  0071b	11		 DB	 17			; 00000011H
  0071c	11		 DB	 17			; 00000011H
  0071d	11		 DB	 17			; 00000011H
  0071e	11		 DB	 17			; 00000011H
  0071f	11		 DB	 17			; 00000011H
  00720	11		 DB	 17			; 00000011H
  00721	11		 DB	 17			; 00000011H
  00722	11		 DB	 17			; 00000011H
  00723	11		 DB	 17			; 00000011H
  00724	07		 DB	 7
  00725	08		 DB	 8
  00726	09		 DB	 9
  00727	0a		 DB	 10			; 0000000aH
  00728	11		 DB	 17			; 00000011H
  00729	11		 DB	 17			; 00000011H
  0072a	11		 DB	 17			; 00000011H
  0072b	11		 DB	 17			; 00000011H
  0072c	11		 DB	 17			; 00000011H
  0072d	11		 DB	 17			; 00000011H
  0072e	11		 DB	 17			; 00000011H
  0072f	11		 DB	 17			; 00000011H
  00730	11		 DB	 17			; 00000011H
  00731	11		 DB	 17			; 00000011H
  00732	11		 DB	 17			; 00000011H
  00733	11		 DB	 17			; 00000011H
  00734	11		 DB	 17			; 00000011H
  00735	11		 DB	 17			; 00000011H
  00736	11		 DB	 17			; 00000011H
  00737	11		 DB	 17			; 00000011H
  00738	11		 DB	 17			; 00000011H
  00739	11		 DB	 17			; 00000011H
  0073a	11		 DB	 17			; 00000011H
  0073b	11		 DB	 17			; 00000011H
  0073c	11		 DB	 17			; 00000011H
  0073d	11		 DB	 17			; 00000011H
  0073e	11		 DB	 17			; 00000011H
  0073f	11		 DB	 17			; 00000011H
  00740	11		 DB	 17			; 00000011H
  00741	11		 DB	 17			; 00000011H
  00742	11		 DB	 17			; 00000011H
  00743	11		 DB	 17			; 00000011H
  00744	11		 DB	 17			; 00000011H
  00745	11		 DB	 17			; 00000011H
  00746	11		 DB	 17			; 00000011H
  00747	11		 DB	 17			; 00000011H
  00748	11		 DB	 17			; 00000011H
  00749	11		 DB	 17			; 00000011H
  0074a	11		 DB	 17			; 00000011H
  0074b	11		 DB	 17			; 00000011H
  0074c	11		 DB	 17			; 00000011H
  0074d	11		 DB	 17			; 00000011H
  0074e	11		 DB	 17			; 00000011H
  0074f	11		 DB	 17			; 00000011H
  00750	11		 DB	 17			; 00000011H
  00751	11		 DB	 17			; 00000011H
  00752	11		 DB	 17			; 00000011H
  00753	11		 DB	 17			; 00000011H
  00754	11		 DB	 17			; 00000011H
  00755	11		 DB	 17			; 00000011H
  00756	0b		 DB	 11			; 0000000bH
  00757	11		 DB	 17			; 00000011H
  00758	11		 DB	 17			; 00000011H
  00759	11		 DB	 17			; 00000011H
  0075a	11		 DB	 17			; 00000011H
  0075b	11		 DB	 17			; 00000011H
  0075c	11		 DB	 17			; 00000011H
  0075d	11		 DB	 17			; 00000011H
  0075e	11		 DB	 17			; 00000011H
  0075f	11		 DB	 17			; 00000011H
  00760	11		 DB	 17			; 00000011H
  00761	11		 DB	 17			; 00000011H
  00762	11		 DB	 17			; 00000011H
  00763	11		 DB	 17			; 00000011H
  00764	11		 DB	 17			; 00000011H
  00765	11		 DB	 17			; 00000011H
  00766	11		 DB	 17			; 00000011H
  00767	11		 DB	 17			; 00000011H
  00768	11		 DB	 17			; 00000011H
  00769	11		 DB	 17			; 00000011H
  0076a	11		 DB	 17			; 00000011H
  0076b	11		 DB	 17			; 00000011H
  0076c	11		 DB	 17			; 00000011H
  0076d	11		 DB	 17			; 00000011H
  0076e	11		 DB	 17			; 00000011H
  0076f	11		 DB	 17			; 00000011H
  00770	11		 DB	 17			; 00000011H
  00771	11		 DB	 17			; 00000011H
  00772	11		 DB	 17			; 00000011H
  00773	11		 DB	 17			; 00000011H
  00774	11		 DB	 17			; 00000011H
  00775	11		 DB	 17			; 00000011H
  00776	11		 DB	 17			; 00000011H
  00777	11		 DB	 17			; 00000011H
  00778	11		 DB	 17			; 00000011H
  00779	11		 DB	 17			; 00000011H
  0077a	11		 DB	 17			; 00000011H
  0077b	11		 DB	 17			; 00000011H
  0077c	11		 DB	 17			; 00000011H
  0077d	11		 DB	 17			; 00000011H
  0077e	11		 DB	 17			; 00000011H
  0077f	11		 DB	 17			; 00000011H
  00780	11		 DB	 17			; 00000011H
  00781	11		 DB	 17			; 00000011H
  00782	11		 DB	 17			; 00000011H
  00783	11		 DB	 17			; 00000011H
  00784	11		 DB	 17			; 00000011H
  00785	11		 DB	 17			; 00000011H
  00786	11		 DB	 17			; 00000011H
  00787	11		 DB	 17			; 00000011H
  00788	0c		 DB	 12			; 0000000cH
  00789	0d		 DB	 13			; 0000000dH
  0078a	0e		 DB	 14			; 0000000eH
  0078b	0f		 DB	 15			; 0000000fH
  0078c	10		 DB	 16			; 00000010H
?GameProc@@YAXXZ ENDP					; GameProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?ChangeProc2@@YAXHH@Z
_TEXT	SEGMENT
_procNo$ = 8						; size = 4
_subProcNo$ = 12					; size = 4
?ChangeProc2@@YAXHH@Z PROC				; ChangeProc2, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 318  : 	// ????Óú±????
; 319  : 	ProcNo2 = procNo;

  00003	8b 45 08	 mov	 eax, DWORD PTR _procNo$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ProcNo2@@3HA, eax ; ProcNo2

; 320  : 	// ??????Óú±?????
; 321  : 	SubProcNo2 = subProcNo;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _subProcNo$[ebp]
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?SubProcNo2@@3HA, eax ; SubProcNo2

; 322  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ChangeProc2@@YAXHH@Z ENDP				; ChangeProc2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?ChangeProc2@@YAXH@Z
_TEXT	SEGMENT
_procNo$ = 8						; size = 4
?ChangeProc2@@YAXH@Z PROC				; ChangeProc2, COMDAT

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  : 	// ????Óú±????
; 312  : 	ProcNo2 = procNo;

  00003	8b 45 08	 mov	 eax, DWORD PTR _procNo$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ProcNo2@@3HA, eax ; ProcNo2

; 313  : 	SubProcNo2 = 0;

  0000b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SubProcNo2@@3HA, 0 ; SubProcNo2

; 314  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ChangeProc2@@YAXH@Z ENDP				; ChangeProc2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?ChangeProc@@YAXHH@Z
_TEXT	SEGMENT
_procNo$ = 8						; size = 4
_subProcNo$ = 12					; size = 4
?ChangeProc@@YAXHH@Z PROC				; ChangeProc, COMDAT

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 303  : 	// ????Óú±????
; 304  : 	ProcNo = procNo;

  00003	8b 45 08	 mov	 eax, DWORD PTR _procNo$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ProcNo@@3IA, eax ; ProcNo

; 305  : 	// ??????Óú±?????
; 306  : 	SubProcNo = subProcNo;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _subProcNo$[ebp]
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, eax ; SubProcNo

; 307  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?ChangeProc@@YAXHH@Z ENDP				; ChangeProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?ChangeProc@@YAXH@Z
_TEXT	SEGMENT
_procNo$ = 8						; size = 4
?ChangeProc@@YAXH@Z PROC				; ChangeProc, COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : #ifdef _NEW_MUISC_
; 289  : 	if (PROC_ID_PASSWORD == procNo) {
; 290  : 		ÂàùÂßãËÉåÊôØÈü≥‰πê = TRUE;
; 291  : 		//t_music_se_volume = t_music_bgm_volume = 15;
; 292  : 	}
; 293  : #endif
; 294  : 	ProcNo = procNo;

  00003	8b 45 08	 mov	 eax, DWORD PTR _procNo$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ProcNo@@3IA, eax ; ProcNo

; 295  : 	// ??????Óú±?????
; 296  : 	SubProcNo = 0;

  0000b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, 0 ; SubProcNo

; 297  : 
; 298  : 
; 299  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ChangeProc@@YAXH@Z ENDP				; ChangeProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\process.cpp
;	COMDAT ?Process@@YAXXZ
_TEXT	SEGMENT
?Process@@YAXXZ PROC					; Process, COMDAT

; 51   : 	if (ProcNo2 >= 0)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ProcNo2@@3HA ; ProcNo2
  00006	85 c9		 test	 ecx, ecx
  00008	78 1c		 js	 SHORT $LN27@Process

; 52   : 	{
; 53   : 		ProcNo = ProcNo2;
; 54   : 		ProcNo2 = -1;
; 55   : 		SubProcNo = SubProcNo2;

  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SubProcNo2@@3HA ; SubProcNo2
  0000f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ProcNo@@3IA, ecx ; ProcNo
  00015	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?ProcNo2@@3HA, -1 ; ProcNo2
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, eax ; SubProcNo
  00024	eb 0b		 jmp	 SHORT $LN6@Process
$LN27@Process:

; 51   : 	if (ProcNo2 >= 0)

  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ProcNo@@3IA ; ProcNo
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SubProcNo@@3IA ; SubProcNo
$LN6@Process:

; 56   : 	}
; 57   : 
; 58   : 	/* ????Óû§? */
; 59   : 	switch (ProcNo)

  00031	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00034	77 16		 ja	 SHORT $LN24@Process
  00036	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN26@Process[ecx*4]
$LN8@Process:

; 60   : 	{
; 61   : 	case PROC_OPENNING:
; 62   : 		break;
; 63   : 	case PROC_INIT: 	/* ??????? */
; 64   : 		InitProc();

  0003d	e8 00 00 00 00	 call	 ?InitProc@@YAXXZ	; InitProc

; 65   : 		initMapEffect(TRUE);		// ???????????

  00042	6a 01		 push	 1
  00044	e8 00 00 00 00	 call	 ?initMapEffect@@YAXH@Z	; initMapEffect
  00049	83 c4 04	 add	 esp, 4
$LN24@Process:

; 241  : 		break;
; 242  : 
; 243  : #ifdef _STONDEBUG_		
; 244  : 		//case PROC_OHTA_TEST:     /* ÓïÑÓôÖ??????? */
; 245  : 		//	OhtaTestProc();
; 246  : 		//	break;
; 247  : 	case PROC_OHTA_TEST:     /* ÓïÑÓôÖ??????? */
; 248  : 		OhtaTestProc();
; 249  : 		break;
; 250  : 		//case PROC_TAKE_TEST:     /* ÓóÅÓö†????????? */
; 251  : 		//	TakeTestProc();
; 252  : 		//	break;
; 253  : 		//case PROC_DWAF_TEST:	// DWAF???
; 254  : 		//	dwafTestProc();
; 255  : 		//	break;
; 256  : 	case PROC_SPR_VIEW:		// ??????ÓõÖ????
; 257  : 		SprViewProc();
; 258  : 		break;
; 259  : 	case PROC_ANIM_VIEW:	// ????????ÓõÖ????
; 260  : 		AnimViewProc();
; 261  : 		break;
; 262  : 	case PROC_SE_TEST:	// ???ÓõÖ????
; 263  : 		SeTestProc();
; 264  : 		break;
; 265  : #endif
; 266  : #ifdef _80_LOGIN_PLAY
; 267  : 	case PROC_80_LOGIN:
; 268  : 		BackBufferDrawType = DRAW_BACK_NORMAL;
; 269  : 		_80LoginProc();
; 270  : 		RunAction();
; 271  : 		StockTaskDispBuffer();
; 272  : 		break;
; 273  : #endif
; 274  : #ifdef _PK2007
; 275  : 	case PROC_PKSERVER_SELECT:
; 276  : 		BackBufferDrawType = DRAW_BACK_NORMAL;
; 277  : 		selectpkProc();
; 278  : 		break;
; 279  : #endif
; 280  : 	case PROC_ENDING:
; 281  : 		break;
; 282  : 	}
; 283  : }

  0004c	c3		 ret	 0
$LN9@Process:

; 66   : 		break;
; 67   : 		// ????????Óöº???
; 68   : 	case PROC_ID_PASSWORD:
; 69   : #ifdef _NEW_MUISC_
; 70   : 		if (ÂàùÂßãËÉåÊôØÈü≥‰πê) {
; 71   : 			ÂàùÂßãËÉåÊôØÈü≥‰πê = FALSE;
; 72   : 			play_bgm(27);
; 73   : 		}
; 74   : #endif
; 75   : 		BackBufferDrawType = DRAW_BACK_NORMAL;

  0004d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 76   : 		idPasswordProc();

  00057	e8 00 00 00 00	 call	 ?idPasswordProc@@YAXXZ	; idPasswordProc

; 77   : #ifdef _PET_TRACE_MOUSE
; 78   : 		PlayPet.Proc();
; 79   : #endif
; 80   : 		RunAction();			// ?????????

  0005c	e8 00 00 00 00	 call	 ?RunAction@@YAXXZ	; RunAction

; 81   : 		StockTaskDispBuffer();	// ???Óù∏Óçï????????????

  00061	e8 00 00 00 00	 call	 ?StockTaskDispBuffer@@YAXXZ ; StockTaskDispBuffer

; 82   : 		FlashKeyboardCursor();	// ?????????ÓôÅÓ°ú??

  00066	e8 00 00 00 00	 call	 ?FlashKeyboardCursor@@YAXXZ ; FlashKeyboardCursor

; 83   : 		ImeProc();				// ???????

  0006b	e9 00 00 00 00	 jmp	 ?ImeProc@@YAXXZ		; ImeProc
$LN10@Process:

; 84   : #ifdef _LOGINKICK			
; 85   : 		extern DWORD StartTime;
; 86   : 		StartTime = -1;
; 87   : #endif
; 88   : 
; 89   : 		break;
; 90   : 		// ????Óù∏Óçï?????Óì±Óï∂
; 91   : 	case PROC_TITLE_MENU:
; 92   : 		// ????????Óùº?ÓüµÓüπÓüâ?
; 93   : 		BackBufferDrawType = DRAW_BACK_NORMAL;

  00070	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 94   : 		titleProc();

  0007a	e8 00 00 00 00	 call	 ?titleProc@@YAXXZ	; titleProc

; 95   : 		TitleProduce();			// ?????Óèù

  0007f	e8 00 00 00 00	 call	 ?TitleProduce@@YAXXZ	; TitleProduce
$LN22@Process:

; 241  : 		break;
; 242  : 
; 243  : #ifdef _STONDEBUG_		
; 244  : 		//case PROC_OHTA_TEST:     /* ÓïÑÓôÖ??????? */
; 245  : 		//	OhtaTestProc();
; 246  : 		//	break;
; 247  : 	case PROC_OHTA_TEST:     /* ÓïÑÓôÖ??????? */
; 248  : 		OhtaTestProc();
; 249  : 		break;
; 250  : 		//case PROC_TAKE_TEST:     /* ÓóÅÓö†????????? */
; 251  : 		//	TakeTestProc();
; 252  : 		//	break;
; 253  : 		//case PROC_DWAF_TEST:	// DWAF???
; 254  : 		//	dwafTestProc();
; 255  : 		//	break;
; 256  : 	case PROC_SPR_VIEW:		// ??????ÓõÖ????
; 257  : 		SprViewProc();
; 258  : 		break;
; 259  : 	case PROC_ANIM_VIEW:	// ????????ÓõÖ????
; 260  : 		AnimViewProc();
; 261  : 		break;
; 262  : 	case PROC_SE_TEST:	// ???ÓõÖ????
; 263  : 		SeTestProc();
; 264  : 		break;
; 265  : #endif
; 266  : #ifdef _80_LOGIN_PLAY
; 267  : 	case PROC_80_LOGIN:
; 268  : 		BackBufferDrawType = DRAW_BACK_NORMAL;
; 269  : 		_80LoginProc();
; 270  : 		RunAction();
; 271  : 		StockTaskDispBuffer();
; 272  : 		break;
; 273  : #endif
; 274  : #ifdef _PK2007
; 275  : 	case PROC_PKSERVER_SELECT:
; 276  : 		BackBufferDrawType = DRAW_BACK_NORMAL;
; 277  : 		selectpkProc();
; 278  : 		break;
; 279  : #endif
; 280  : 	case PROC_ENDING:
; 281  : 		break;
; 282  : 	}
; 283  : }

  00084	e8 00 00 00 00	 call	 ?RunAction@@YAXXZ	; RunAction
  00089	e9 00 00 00 00	 jmp	 ?StockTaskDispBuffer@@YAXXZ ; StockTaskDispBuffer
$LN11@Process:

; 96   : 		RunAction();			// ?????????
; 97   : 		StockTaskDispBuffer();	// ???Óù∏Óçï????????????
; 98   : 
; 99   : 								//cary 2002.1.4			kakushi_command();		// ????????
; 100  : 		break;
; 101  : 		// ???Óì±Óï∂?Óåø
; 102  : 	case PROC_CHAR_SELECT:		// ???Óì±Óï∂
; 103  : 								// ????????Óùº?ÓüµÓüπÓüâ?
; 104  : 		BackBufferDrawType = DRAW_BACK_NORMAL;

  0008e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 105  : 		selectCharacterProc();

  00098	e9 00 00 00 00	 jmp	 ?selectCharacterProc@@YAXXZ ; selectCharacterProc
$LN12@Process:

; 106  : 		break;
; 107  : 		// ????Óíï
; 108  : 	case PROC_CHAR_MAKE:
; 109  : 		// ????????Óùº?ÓüµÓüπÓüâ?
; 110  : 		BackBufferDrawType = DRAW_BACK_NORMAL;

  0009d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 111  : 		makeCharacterProc();

  000a7	e9 00 00 00 00	 jmp	 ?makeCharacterProc@@YAXXZ ; makeCharacterProc
$LN13@Process:

; 112  : 		break;
; 113  : 		// Óì±Óï∂??????????Óåø
; 114  : 	case PROC_CHAR_LOGIN_START:
; 115  : 		BackBufferDrawType = DRAW_BACK_NORMAL;

  000ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 116  : 		// charLoginStart();???????????????????
; 117  : 		initMap();		// ??????

  000b6	e8 00 00 00 00	 call	 ?initMap@@YAXXZ		; initMap

; 118  : 		initPcAll();	// PCÓê∫Óü´?????????

  000bb	e8 00 00 00 00	 call	 ?initPcAll@@YAXXZ	; initPcAll

; 119  : 		initCharObj();	// ????????????

  000c0	e8 00 00 00 00	 call	 ?initCharObj@@YAXXZ	; initCharObj

; 120  : 		initOpenServerWindow();	// ????ÓçàÓçï?Óù∏Óçï???????????

  000c5	e8 00 00 00 00	 call	 ?initOpenServerWindow@@YAXXZ ; initOpenServerWindow

; 121  : 		initFieldProc();		// ??????Óù∏ÓçïÓû¢????

  000ca	e8 00 00 00 00	 call	 ?initFieldProc@@YAXXZ	; initFieldProc

; 122  : 		initMapEffect(FALSE);		// ???????????

  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 ?initMapEffect@@YAXH@Z	; initMapEffect

; 123  : 		EncountFlag = FALSE;

  000d6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?EncountFlag@@3HA, 0 ; EncountFlag

; 124  : 		logOutFlag = FALSE;

  000e0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?logOutFlag@@3HA, 0 ; logOutFlag

; 125  : 		InitOhtaParam();	// ??????????ÓïÑÓôÖÓìì??

  000ea	e8 00 00 00 00	 call	 ?InitOhtaParam@@YAXXZ	; InitOhtaParam

; 126  : #ifdef __SKYISLAND
; 127  : 		extern void SkyIslandInit();
; 128  : 		SkyIslandInit();

  000ef	e8 00 00 00 00	 call	 ?SkyIslandInit@@YAXXZ	; SkyIslandInit

; 129  : #endif
; 130  : 		ChangeProc(PROC_CHAR_LOGIN);

  000f4	6a 06		 push	 6
  000f6	e8 00 00 00 00	 call	 ?ChangeProc@@YAXH@Z	; ChangeProc
  000fb	83 c4 08	 add	 esp, 8

; 131  : 		// ???????????Óåø
; 132  : 		fade_out_bgm();

  000fe	e9 00 00 00 00	 jmp	 ?fade_out_bgm@@YAXXZ	; fade_out_bgm
$LN14@Process:

; 133  : 		break;
; 134  : 	case PROC_CHAR_LOGIN:
; 135  : 		BackBufferDrawType = DRAW_BACK_NORMAL;

  00103	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 136  : 		characterLoginProc();

  0010d	e9 00 00 00 00	 jmp	 ?characterLoginProc@@YAXXZ ; characterLoginProc
$LN15@Process:

; 137  : 		break;
; 138  : 	case PROC_CHAR_LOGOUT:
; 139  : 		// ????????Óùº?ÓüµÓüπÓüâ?
; 140  : 		//			BackBufferDrawType = DRAW_BACK_NORMAL; 
; 141  : 
; 142  : 		//JL HOOK
; 143  : 		void JL_ÂéüÁôª‰∫Ü();
; 144  : 		JL_ÂéüÁôª‰∫Ü();

  00112	e8 00 00 00 00	 call	 ?JL_Í´‘Ù÷ı@@YAXXZ	; JL_Í´‘Ù÷ı

; 145  : 
; 146  : 		characterLogoutProc();

  00117	e9 00 00 00 00	 jmp	 ?characterLogoutProc@@YAXXZ ; characterLogoutProc
$LN16@Process:

; 147  : 		break;
; 148  : 	case PROC_GAME:     /* ??????? */
; 149  : 		GameProc();

  0011c	e9 00 00 00 00	 jmp	 ?GameProc@@YAXXZ	; GameProc
$LN17@Process:

; 150  : 		break;
; 151  : 	case PROC_DISCONNECT_SERVER:
; 152  : 		switch (SubProcNo)

  00121	83 e8 00	 sub	 eax, 0
  00124	74 20		 je	 SHORT $LN18@Process
  00126	83 e8 01	 sub	 eax, 1
  00129	75 7b		 jne	 SHORT $LN21@Process

; 205  : 			SubProcNo++;
; 206  : 			break;
; 207  : 		case 1:
; 208  : 			// ?Óèù?
; 209  : 			if (DrawProduce(PRODUCE_DOWN_ACCELE) == TRUE)

  0012b	6a 02		 push	 2
  0012d	e8 00 00 00 00	 call	 ?DrawProduce@@YAHH@Z	; DrawProduce
  00132	83 c4 04	 add	 esp, 4
  00135	83 f8 01	 cmp	 eax, 1
  00138	75 6c		 jne	 SHORT $LN21@Process

; 210  : 			{
; 211  : 				BackBufferDrawType = DRAW_BACK_NORMAL;

  0013a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 0 ; BackBufferDrawType

; 212  : 				SubProcNo++;
; 213  : 			}
; 214  : 			break;

  00144	eb 5a		 jmp	 SHORT $LN29@Process
$LN18@Process:

; 153  : 		{
; 154  : 		case 0:
; 155  : 
; 156  : 			//JL HOOK ÂèëÊ∂àÊÅØÂëäËØâwg,Êñ≠Á∫ø‰∫Ü
; 157  : 			void JL_Êñ≠Á∫ø‰∫Ü();
; 158  : 			JL_Êñ≠Á∫ø‰∫Ü();

  00146	e8 00 00 00 00	 call	 ?JL_??÷ı@@YAXXZ		; JL_??÷ı

; 159  : 
; 160  : 			//JL fix 2017.9.1 Â¢ûÂä†Êñ≠Á∫øÂêéÊ∏ÖÈô§ÁîªÈù¢ÊµÆÊ∏∏ÁîüÁâ©. ‰øÆÂ§çÊµ∑Â∫ïÊñ≠Á∫øgg
; 161  : #ifdef __SKYISLAND
; 162  : 			extern void SkyIslandRelease();
; 163  : 			SkyIslandRelease();

  0014b	e8 00 00 00 00	 call	 ?SkyIslandRelease@@YAXXZ ; SkyIslandRelease

; 164  : #endif
; 165  : 			//???Óú±????
; 166  : 
; 167  : #ifdef _AniRandom   // Syu ADD ÈöèÊú∫‰∫ßÁîüÁéØÂ¢ÉÂä®Áîª
; 168  : 			extern void AniRandomRelease();
; 169  : 			AniRandomRelease();

  00150	e8 00 00 00 00	 call	 ?AniRandomRelease@@YAXXZ ; AniRandomRelease

; 170  : #endif
; 171  : #ifdef _AniCrossFrame	   // Syu ADD Âä®ÁîªÂ±ÇÊ∏∏ËøáÁîªÈù¢ÁîüÁâ©
; 172  : 			extern void crossAniRelease();
; 173  : 			crossAniRelease();

  00155	e8 00 00 00 00	 call	 ?crossAniRelease@@YAXXZ	; crossAniRelease

; 174  : #endif
; 175  : #ifdef _AniCharBubble	   // Syu ADD Âä®ÁîªÂ±Ç‰∫∫Áâ©ÂêêÂá∫Ê∞îÊ≥°
; 176  : 			extern void CharbubbleRelease();
; 177  : 			CharbubbleRelease();

  0015a	e8 00 00 00 00	 call	 ?CharbubbleRelease@@YAXXZ ; CharbubbleRelease

; 178  : #endif
; 179  : #ifdef _AniImmobile	 // Syu ADD ÂÆöÁÇπ‰∫ßÁîüÁâπÂÆöÂä®Áîª
; 180  : 			extern void ImmobileAniRelease();
; 181  : 			ImmobileAniRelease();

  0015f	e8 00 00 00 00	 call	 ?ImmobileAniRelease@@YAXXZ ; ImmobileAniRelease

; 182  : #endif
; 183  : #ifdef _SPECIALSPACEANIM	// Syu ADD ÁâπÊÆäÂú∫ÊôØÂä®ÁîªÈÖçÁΩÆ
; 184  : 			extern void ReleaseSpecAnim();
; 185  : 			ReleaseSpecAnim();

  00164	e8 00 00 00 00	 call	 ?ReleaseSpecAnim@@YAXXZ	; ReleaseSpecAnim

; 186  : #endif
; 187  : 
; 188  : 			// ???
; 189  : 			// PC????
; 190  : 			resetPc();

  00169	e8 00 00 00 00	 call	 ?resetPc@@YAXXZ		; resetPc

; 191  : 			// ?????????????
; 192  : 			initCharObj();

  0016e	e8 00 00 00 00	 call	 ?initCharObj@@YAXXZ	; initCharObj

; 193  : 			// ??????Óåñ
; 194  : 			DeathAllAction();

  00173	e8 00 00 00 00	 call	 ?DeathAllAction@@YAXXZ	; DeathAllAction

; 195  : 			// ?Óèù????
; 196  : 			ProduceInitFlag = TRUE;

  00178	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ProduceInitFlag@@3HA, 1 ; ProduceInitFlag

; 197  : 			// ????????????Óíï 
; 198  : 			CopyBackBuffer();

  00182	e8 00 00 00 00	 call	 ?CopyBackBuffer@@YAXXZ	; CopyBackBuffer

; 199  : 			// ????????Óùº?ÓüµÓüπÓüâ?
; 200  : 			BackBufferDrawType = DRAW_BACK_PRODUCE;

  00187	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType

; 201  : 			// ???????????Óåø
; 202  : 			fade_out_bgm();

  00191	e8 00 00 00 00	 call	 ?fade_out_bgm@@YAXXZ	; fade_out_bgm

; 203  : 			// ????????
; 204  : 			NowTime = TimeGetTime();

  00196	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0019b	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime
$LN29@Process:

; 215  : 		case 2:
; 216  : 			// ?Óèù?Óé∑??
; 217  : 			break;
; 218  : 		}
; 219  : 		// ÓìÅÓñ´?????????
; 220  : 		if (disconnectServer())

  001a0	ff 05 00 00 00
	00		 inc	 DWORD PTR ?SubProcNo@@3IA ; SubProcNo
$LN21@Process:
  001a6	e8 00 00 00 00	 call	 ?disconnectServer@@YAHXZ ; disconnectServer
  001ab	85 c0		 test	 eax, eax
  001ad	0f 84 d1 fe ff
	ff		 je	 $LN22@Process

; 221  : 		{
; 222  : 			// ?????????
; 223  : 			cleanupNetwork();

  001b3	e8 00 00 00 00	 call	 ?cleanupNetwork@@YAXXZ	; cleanupNetwork

; 224  : 			// ????????????
; 225  : 			PaletteChange(DEF_PAL, 0);

  001b8	6a 00		 push	 0
  001ba	6a 00		 push	 0
  001bc	e8 00 00 00 00	 call	 ?PaletteChange@@YAXHH@Z	; PaletteChange

; 226  : 			// ?????Ó°°?
; 227  : 			//cary
; 228  : 			ChangeProc(PROC_ID_PASSWORD);

  001c1	6a 01		 push	 1
  001c3	e8 00 00 00 00	 call	 ?ChangeProc@@YAXH@Z	; ChangeProc
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 229  : 			SubProcNo = 0;

  001cb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SubProcNo@@3IA, 0 ; SubProcNo

; 230  : 			// ??????Óåñ
; 231  : 			DeathAllAction();

  001d5	e8 00 00 00 00	 call	 ?DeathAllAction@@YAXXZ	; DeathAllAction

; 232  : 			disconnectServerFlag = FALSE;

  001da	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?disconnectServerFlag@@3HA, 0 ; disconnectServerFlag

; 233  : 			oldDisconnectServerFlag = FALSE;

  001e4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?oldDisconnectServerFlag@@3HA, 0 ; oldDisconnectServerFlag

; 241  : 		break;
; 242  : 
; 243  : #ifdef _STONDEBUG_		
; 244  : 		//case PROC_OHTA_TEST:     /* ÓïÑÓôÖ??????? */
; 245  : 		//	OhtaTestProc();
; 246  : 		//	break;
; 247  : 	case PROC_OHTA_TEST:     /* ÓïÑÓôÖ??????? */
; 248  : 		OhtaTestProc();
; 249  : 		break;
; 250  : 		//case PROC_TAKE_TEST:     /* ÓóÅÓö†????????? */
; 251  : 		//	TakeTestProc();
; 252  : 		//	break;
; 253  : 		//case PROC_DWAF_TEST:	// DWAF???
; 254  : 		//	dwafTestProc();
; 255  : 		//	break;
; 256  : 	case PROC_SPR_VIEW:		// ??????ÓõÖ????
; 257  : 		SprViewProc();
; 258  : 		break;
; 259  : 	case PROC_ANIM_VIEW:	// ????????ÓõÖ????
; 260  : 		AnimViewProc();
; 261  : 		break;
; 262  : 	case PROC_SE_TEST:	// ???ÓõÖ????
; 263  : 		SeTestProc();
; 264  : 		break;
; 265  : #endif
; 266  : #ifdef _80_LOGIN_PLAY
; 267  : 	case PROC_80_LOGIN:
; 268  : 		BackBufferDrawType = DRAW_BACK_NORMAL;
; 269  : 		_80LoginProc();
; 270  : 		RunAction();
; 271  : 		StockTaskDispBuffer();
; 272  : 		break;
; 273  : #endif
; 274  : #ifdef _PK2007
; 275  : 	case PROC_PKSERVER_SELECT:
; 276  : 		BackBufferDrawType = DRAW_BACK_NORMAL;
; 277  : 		selectpkProc();
; 278  : 		break;
; 279  : #endif
; 280  : 	case PROC_ENDING:
; 281  : 		break;
; 282  : 	}
; 283  : }

  001ee	c3		 ret	 0
$LN23@Process:

; 234  : 			break;
; 235  : 		}
; 236  : 		RunAction();			// ?????????
; 237  : 		StockTaskDispBuffer();	// ???Óù∏Óçï????????????
; 238  : 		break;
; 239  : 	case PROC_BATTLE:     /* ??????? */
; 240  : 		BattleProc();

  001ef	e9 00 00 00 00	 jmp	 ?BattleProc@@YAXXZ	; BattleProc
$LN26@Process:

; 241  : 		break;
; 242  : 
; 243  : #ifdef _STONDEBUG_		
; 244  : 		//case PROC_OHTA_TEST:     /* ÓïÑÓôÖ??????? */
; 245  : 		//	OhtaTestProc();
; 246  : 		//	break;
; 247  : 	case PROC_OHTA_TEST:     /* ÓïÑÓôÖ??????? */
; 248  : 		OhtaTestProc();
; 249  : 		break;
; 250  : 		//case PROC_TAKE_TEST:     /* ÓóÅÓö†????????? */
; 251  : 		//	TakeTestProc();
; 252  : 		//	break;
; 253  : 		//case PROC_DWAF_TEST:	// DWAF???
; 254  : 		//	dwafTestProc();
; 255  : 		//	break;
; 256  : 	case PROC_SPR_VIEW:		// ??????ÓõÖ????
; 257  : 		SprViewProc();
; 258  : 		break;
; 259  : 	case PROC_ANIM_VIEW:	// ????????ÓõÖ????
; 260  : 		AnimViewProc();
; 261  : 		break;
; 262  : 	case PROC_SE_TEST:	// ???ÓõÖ????
; 263  : 		SeTestProc();
; 264  : 		break;
; 265  : #endif
; 266  : #ifdef _80_LOGIN_PLAY
; 267  : 	case PROC_80_LOGIN:
; 268  : 		BackBufferDrawType = DRAW_BACK_NORMAL;
; 269  : 		_80LoginProc();
; 270  : 		RunAction();
; 271  : 		StockTaskDispBuffer();
; 272  : 		break;
; 273  : #endif
; 274  : #ifdef _PK2007
; 275  : 	case PROC_PKSERVER_SELECT:
; 276  : 		BackBufferDrawType = DRAW_BACK_NORMAL;
; 277  : 		selectpkProc();
; 278  : 		break;
; 279  : #endif
; 280  : 	case PROC_ENDING:
; 281  : 		break;
; 282  : 	}
; 283  : }

  001f4	00 00 00 00	 DD	 $LN8@Process
  001f8	00 00 00 00	 DD	 $LN9@Process
  001fc	00 00 00 00	 DD	 $LN10@Process
  00200	00 00 00 00	 DD	 $LN11@Process
  00204	00 00 00 00	 DD	 $LN12@Process
  00208	00 00 00 00	 DD	 $LN13@Process
  0020c	00 00 00 00	 DD	 $LN14@Process
  00210	00 00 00 00	 DD	 $LN15@Process
  00214	00 00 00 00	 DD	 $LN24@Process
  00218	00 00 00 00	 DD	 $LN16@Process
  0021c	00 00 00 00	 DD	 $LN23@Process
  00220	00 00 00 00	 DD	 $LN17@Process
?Process@@YAXXZ ENDP					; Process
_TEXT	ENDS
END
