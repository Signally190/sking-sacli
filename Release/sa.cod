; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	\\VBOXSVR\_stoneage\repos\ssm-sacli\Release\sa.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SaLuaPrint@@YAHPAUlua_State@@@Z		; SaLuaPrint
PUBLIC	??_C@_04PMOCAHAA@open@				; `string'
PUBLIC	??_C@_0BM@NLALFBCK@getStringFromIndexWithDelim@	; `string'
PUBLIC	??_C@_09BCFEFPBE@strmemcpy@			; `string'
PUBLIC	??_C@_0BA@DPLOLLBI@StockFontBuffer@		; `string'
PUBLIC	??_C@_0L@DAIBAIMF@MakeHitBox@			; `string'
PUBLIC	??_C@_0M@JIDNPOHH@DeathAction@			; `string'
PUBLIC	??_C@_0P@BDLLBODD@MakeWindowDisp@		; `string'
PUBLIC	??_C@_0N@MJPPOPAH@MakeAnimDisp@			; `string'
PUBLIC	??_C@_0BA@LDAJNJEC@StockDispBuffer@		; `string'
PUBLIC	??_C@_0BD@HFFBLKCD@StockBoxDispBuffer@		; `string'
PUBLIC	??_C@_06PKGFLIPH@PlaySe@			; `string'
PUBLIC	??_C@_09OCNLBMHE@LeftShift@			; `string'
PUBLIC	??_C@_0L@NIAMFDCL@RightShift@			; `string'
PUBLIC	??_C@_09GKCMFMAI@SaD1AndD2@			; `string'
PUBLIC	??_C@_0BB@PDIFIMKJ@GetKeyInputFocus@		; `string'
PUBLIC	??_C@_0N@CNLOGDLA@getTickCount@			; `string'
PUBLIC	??_C@_0N@BFFIJKHB@ShellExecute@			; `string'
PUBLIC	??_C@_0M@BPKMLENP@ShowMessage@			; `string'
PUBLIC	??_C@_08JKJBMNEB@GetCdkey@			; `string'
PUBLIC	??_C@_05IJDJACGD@print@				; `string'
PUBLIC	??_C@_0M@DEPJBPP@timeGetTime@			; `string'
PUBLIC	??_C@_0O@MKLBEJHD@getTextLength@		; `string'
PUBLIC	??_C@_0M@GKAPEPNC@GetResoMode@			; `string'
EXTRN	?MyChatBuffer@@3USTR_BUFFER@@A:BYTE		; MyChatBuffer
EXTRN	?szUser@@3PADA:BYTE				; szUser
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
;	COMDAT ??_C@_0M@GKAPEPNC@GetResoMode@
CONST	SEGMENT
??_C@_0M@GKAPEPNC@GetResoMode@ DB 'GetResoMode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MKLBEJHD@getTextLength@
CONST	SEGMENT
??_C@_0O@MKLBEJHD@getTextLength@ DB 'getTextLength', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DEPJBPP@timeGetTime@
CONST	SEGMENT
??_C@_0M@DEPJBPP@timeGetTime@ DB 'timeGetTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print@
CONST	SEGMENT
??_C@_05IJDJACGD@print@ DB 'print', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKJBMNEB@GetCdkey@
CONST	SEGMENT
??_C@_08JKJBMNEB@GetCdkey@ DB 'GetCdkey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BPKMLENP@ShowMessage@
CONST	SEGMENT
??_C@_0M@BPKMLENP@ShowMessage@ DB 'ShowMessage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BFFIJKHB@ShellExecute@
CONST	SEGMENT
??_C@_0N@BFFIJKHB@ShellExecute@ DB 'ShellExecute', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CNLOGDLA@getTickCount@
CONST	SEGMENT
??_C@_0N@CNLOGDLA@getTickCount@ DB 'getTickCount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PDIFIMKJ@GetKeyInputFocus@
CONST	SEGMENT
??_C@_0BB@PDIFIMKJ@GetKeyInputFocus@ DB 'GetKeyInputFocus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GKCMFMAI@SaD1AndD2@
CONST	SEGMENT
??_C@_09GKCMFMAI@SaD1AndD2@ DB 'SaD1AndD2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NIAMFDCL@RightShift@
CONST	SEGMENT
??_C@_0L@NIAMFDCL@RightShift@ DB 'RightShift', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OCNLBMHE@LeftShift@
CONST	SEGMENT
??_C@_09OCNLBMHE@LeftShift@ DB 'LeftShift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKGFLIPH@PlaySe@
CONST	SEGMENT
??_C@_06PKGFLIPH@PlaySe@ DB 'PlaySe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HFFBLKCD@StockBoxDispBuffer@
CONST	SEGMENT
??_C@_0BD@HFFBLKCD@StockBoxDispBuffer@ DB 'StockBoxDispBuffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LDAJNJEC@StockDispBuffer@
CONST	SEGMENT
??_C@_0BA@LDAJNJEC@StockDispBuffer@ DB 'StockDispBuffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MJPPOPAH@MakeAnimDisp@
CONST	SEGMENT
??_C@_0N@MJPPOPAH@MakeAnimDisp@ DB 'MakeAnimDisp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BDLLBODD@MakeWindowDisp@
CONST	SEGMENT
??_C@_0P@BDLLBODD@MakeWindowDisp@ DB 'MakeWindowDisp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JIDNPOHH@DeathAction@
CONST	SEGMENT
??_C@_0M@JIDNPOHH@DeathAction@ DB 'DeathAction', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DAIBAIMF@MakeHitBox@
CONST	SEGMENT
??_C@_0L@DAIBAIMF@MakeHitBox@ DB 'MakeHitBox', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DPLOLLBI@StockFontBuffer@
CONST	SEGMENT
??_C@_0BA@DPLOLLBI@StockFontBuffer@ DB 'StockFontBuffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BCFEFPBE@strmemcpy@
CONST	SEGMENT
??_C@_09BCFEFPBE@strmemcpy@ DB 'strmemcpy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NLALFBCK@getStringFromIndexWithDelim@
CONST	SEGMENT
??_C@_0BM@NLALFBCK@getStringFromIndexWithDelim@ DB 'getStringFromIndexWit'
	DB	'hDelim', 00H				; `string'
CONST	ENDS
CONST	SEGMENT
?salib@@3QBUluaL_Reg@@B DD FLAT:??_C@_0BM@NLALFBCK@getStringFromIndexWithDelim@ ; salib
	DD	FLAT:?Lua_getStringFromIndexWithDelim_body@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_09BCFEFPBE@strmemcpy@
	DD	FLAT:?Lua_strmemcpy@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0BA@DPLOLLBI@StockFontBuffer@
	DD	FLAT:?SaStockFontBuffer@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0L@DAIBAIMF@MakeHitBox@
	DD	FLAT:?SaMakeHitBox@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0M@JIDNPOHH@DeathAction@
	DD	FLAT:?SaDeathAction@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0P@BDLLBODD@MakeWindowDisp@
	DD	FLAT:?SaMakeWindowDisp@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0N@MJPPOPAH@MakeAnimDisp@
	DD	FLAT:?SaMakeAnimDisp@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0BA@LDAJNJEC@StockDispBuffer@
	DD	FLAT:?SaStockDispBuffer@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0BD@HFFBLKCD@StockBoxDispBuffer@
	DD	FLAT:?SaStockBoxDispBuffer@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_06PKGFLIPH@PlaySe@
	DD	FLAT:?SaPlaySe@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_09OCNLBMHE@LeftShift@
	DD	FLAT:?SaLeftShift@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0L@NIAMFDCL@RightShift@
	DD	FLAT:?SaRightShift@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_09GKCMFMAI@SaD1AndD2@
	DD	FLAT:?SaD1AndD2@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0BB@PDIFIMKJ@GetKeyInputFocus@
	DD	FLAT:?SaGetKeyInputFocus@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0N@CNLOGDLA@getTickCount@
	DD	FLAT:?getTickCount@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0N@BFFIJKHB@ShellExecute@
	DD	FLAT:?SaShellExecute@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0M@BPKMLENP@ShowMessage@
	DD	FLAT:?SaShowMessage@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_08JKJBMNEB@GetCdkey@
	DD	FLAT:?SaGetCdkey@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_05IJDJACGD@print@
	DD	FLAT:?SaLuaPrint@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0M@DEPJBPP@timeGetTime@
	DD	FLAT:?SAtimeGetTime@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0O@MKLBEJHD@getTextLength@
	DD	FLAT:?Lua_getTextLength@@YAHPAUlua_State@@@Z
	DD	FLAT:??_C@_0M@GKAPEPNC@GetResoMode@
	DD	FLAT:?GetResoMode@@YAHPAUlua_State@@@Z
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open@
CONST	SEGMENT
??_C@_04PMOCAHAA@open@ DB 'open', 00H			; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_printf
PUBLIC	_sprintf
PUBLIC	?luaopen_Sa@@YAHPAUlua_State@@@Z		; luaopen_Sa
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_05GGBDHNF@?9?$CL?5?$CD0@			; `string'
PUBLIC	??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ@ ; `string'
PUBLIC	??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precis@ ; `string'
PUBLIC	??_C@_02HIBBOKEN@?2r@				; `string'
PUBLIC	??_C@_04MPDIABOK@?2000@				; `string'
PUBLIC	??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8forma@ ; `string'
PUBLIC	??_C@_02CKOPKKAC@sa@				; `string'
EXTRN	_isdigit:PROC
EXTRN	_strchr:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?DeathAction@@YAXPAUaction@@@Z:PROC		; DeathAction
EXTRN	?StockDispBuffer@@YAHHHEHH@Z:PROC		; StockDispBuffer
EXTRN	?StockChatBufferLine@@YAXPADEH@Z:PROC		; StockChatBufferLine
EXTRN	?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z:PROC	; GetKeyInputFocus
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_pushinteger:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_luaL_register:PROC
EXTRN	_luaL_checklstring:PROC
EXTRN	_luaL_checknumber:PROC
EXTRN	_luaL_checkinteger:PROC
EXTRN	_luaL_error:PROC
EXTRN	_luaL_buffinit:PROC
EXTRN	_luaL_prepbuffer:PROC
EXTRN	_luaL_addlstring:PROC
EXTRN	_luaL_addvalue:PROC
EXTRN	?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z:PROC	; MakeWindowDisp
EXTRN	?MakeHitBox@@YAHHHHHH@Z:PROC			; MakeHitBox
EXTRN	?MakeAnimDisp@@YAPAUaction@@HHHH@Z:PROC		; MakeAnimDisp
EXTRN	?play_se@@YAHHHH@Z:PROC				; play_se
EXTRN	?getTextLength@@YAHPAD@Z:PROC			; getTextLength
EXTRN	?getStringFromIndexWithDelim_body@@YAHPAD0H0H@Z:PROC ; getStringFromIndexWithDelim_body
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__ftol2:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_02CKOPKKAC@sa@
CONST	SEGMENT
??_C@_02CKOPKKAC@sa@ DB 'sa', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8forma@
CONST	SEGMENT
??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8forma@ DB 'i'
	DB	'nvalid option ''%%%c'' to ''format''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MPDIABOK@?2000@
CONST	SEGMENT
??_C@_04MPDIABOK@?2000@ DB '\000', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIBBOKEN@?2r@
CONST	SEGMENT
??_C@_02HIBBOKEN@?2r@ DB '\r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precis@
CONST	SEGMENT
??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precis@ DB 'invalid fo'
	DB	'rmat (width or precision too long)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ@
CONST	SEGMENT
??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ@ DB 'invalid '
	DB	'format (repeated flags)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGBDHNF@?9?$CL?5?$CD0@
CONST	SEGMENT
??_C@_05GGBDHNF@?9?$CL?5?$CD0@ DB '-+ #0', 00H		; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?GetResoMode@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?GetResoMode@@YAHPAUlua_State@@@Z PROC			; GetResoMode, COMDAT

; 383  : static int GetResoMode(lua_State *L){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 384  : 	size_t l;
; 385  : 	lua_pushinteger(L, ResoMode);

  00003	ff 35 00 00 00
	00		 push	 DWORD PTR ?ResoMode@@3HA ; ResoMode
  00009	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000c	e8 00 00 00 00	 call	 _lua_pushinteger
  00011	83 c4 08	 add	 esp, 8

; 386  : 	return 1;

  00014	b8 01 00 00 00	 mov	 eax, 1

; 387  : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetResoMode@@YAHPAUlua_State@@@Z ENDP			; GetResoMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?Lua_strmemcpy@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_l$ = -2056						; size = 4
_temp$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
?Lua_strmemcpy@@YAHPAUlua_State@@@Z PROC		; Lua_strmemcpy, COMDAT

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 08 00
	00		 sub	 esp, 2056		; 00000808H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]

; 370  : 	char temp[2048];
; 371  : 	memset(temp,0,2024);

  00017	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	68 e8 07 00 00	 push	 2024			; 000007e8H
  00024	6a 00		 push	 0
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memset

; 372  : 	size_t l;
; 373  : 	const char *str=luaL_checklstring(L, 1, &l);

  0002c	8d 85 f8 f7 ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  00032	50		 push	 eax
  00033	6a 01		 push	 1
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 _luaL_checklstring

; 374  : 	const int index1=luaL_checkint(L, 2);

  0003b	6a 02		 push	 2
  0003d	53		 push	 ebx
  0003e	8b f8		 mov	 edi, eax
  00040	e8 00 00 00 00	 call	 _luaL_checkinteger

; 375  : 	const int index2=luaL_checkint(L, 3);

  00045	6a 03		 push	 3
  00047	53		 push	 ebx
  00048	8b f0		 mov	 esi, eax
  0004a	e8 00 00 00 00	 call	 _luaL_checkinteger

; 376  : 	memcpy(temp,str+index1-1,index2);

  0004f	50		 push	 eax
  00050	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00053	03 c6		 add	 eax, esi
  00055	50		 push	 eax
  00056	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _memcpy

; 377  : 	lua_pushstring(L, temp);

  00062	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  00068	50		 push	 eax
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 _lua_pushstring

; 378  : 	return 1;
; 379  : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 3c	 add	 esp, 60			; 0000003cH
  00075	33 cd		 xor	 ecx, ebp
  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?Lua_strmemcpy@@YAHPAUlua_State@@@Z ENDP		; Lua_strmemcpy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?Lua_getStringFromIndexWithDelim_body@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_l$ = -2056						; size = 4
_temp$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
?Lua_getStringFromIndexWithDelim_body@@YAHPAUlua_State@@@Z PROC ; Lua_getStringFromIndexWithDelim_body, COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 08 00
	00		 sub	 esp, 2056		; 00000808H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]

; 356  : 	extern BOOL getStringFromIndexWithDelim_body( char* src ,char* delim ,int index,char* buf , int buflen);
; 357  : 	char temp[2048];
; 358  : 	memset(temp,0,2024);

  00017	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	68 e8 07 00 00	 push	 2024			; 000007e8H
  00024	6a 00		 push	 0
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memset

; 359  : 	size_t l;
; 360  : 	const char *str=luaL_checklstring(L, 1, &l);

  0002c	8d 85 f8 f7 ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  00032	50		 push	 eax
  00033	6a 01		 push	 1
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 _luaL_checklstring

; 361  : 	const int index=luaL_checkint(L, 2);

  0003b	6a 02		 push	 2
  0003d	53		 push	 ebx
  0003e	8b f8		 mov	 edi, eax
  00040	e8 00 00 00 00	 call	 _luaL_checkinteger
  00045	8b f0		 mov	 esi, eax

; 362  : 	const char *delim=luaL_checklstring(L, 3, &l);

  00047	8d 85 f8 f7 ff
	ff		 lea	 eax, DWORD PTR _l$[ebp]
  0004d	50		 push	 eax
  0004e	6a 03		 push	 3
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 _luaL_checklstring

; 363  : 	getStringFromIndexWithDelim_body((char *)str,(char *)delim,index,temp,2024);

  00056	68 e8 07 00 00	 push	 2024			; 000007e8H
  0005b	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _temp$[ebp]
  00061	51		 push	 ecx
  00062	56		 push	 esi
  00063	50		 push	 eax
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 ?getStringFromIndexWithDelim_body@@YAHPAD0H0H@Z ; getStringFromIndexWithDelim_body
  0006a	83 c4 40	 add	 esp, 64			; 00000040H

; 364  : 	lua_pushstring(L, temp);

  0006d	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  00073	50		 push	 eax
  00074	53		 push	 ebx
  00075	e8 00 00 00 00	 call	 _lua_pushstring

; 365  : 	return 1;
; 366  : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	83 c4 08	 add	 esp, 8
  00080	33 cd		 xor	 ecx, ebp
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?Lua_getStringFromIndexWithDelim_body@@YAHPAUlua_State@@@Z ENDP ; Lua_getStringFromIndexWithDelim_body
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?Lua_getTextLength@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_l$ = -4						; size = 4
_L$ = 8							; size = 4
?Lua_getTextLength@@YAHPAUlua_State@@@Z PROC		; Lua_getTextLength, COMDAT

; 326  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 327  : 	size_t l;
; 328  : 	const char *str=luaL_checklstring(L, 1, &l);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _l$[ebp]
  00007	50		 push	 eax
  00008	6a 01		 push	 1
  0000a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000d	e8 00 00 00 00	 call	 _luaL_checklstring

; 329  : 	int ret = getTextLength((char *)str);

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?getTextLength@@YAHPAD@Z ; getTextLength

; 330  : 	lua_pushinteger(L,ret);

  00018	50		 push	 eax
  00019	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0001c	e8 00 00 00 00	 call	 _lua_pushinteger
  00021	83 c4 18	 add	 esp, 24			; 00000018H

; 331  : 	return 1;

  00024	b8 01 00 00 00	 mov	 eax, 1

; 332  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?Lua_getTextLength@@YAHPAUlua_State@@@Z ENDP		; Lua_getTextLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SAtimeGetTime@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SAtimeGetTime@@YAHPAUlua_State@@@Z PROC		; SAtimeGetTime, COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 320  : 	lua_pushinteger(L, timeGetTime());

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000d	e8 00 00 00 00	 call	 _lua_pushinteger
  00012	83 c4 08	 add	 esp, 8

; 321  : 	return 1;

  00015	b8 01 00 00 00	 mov	 eax, 1

; 322  : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?SAtimeGetTime@@YAHPAUlua_State@@@Z ENDP		; SAtimeGetTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaGetCdkey@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SaGetCdkey@@YAHPAUlua_State@@@Z PROC			; SaGetCdkey, COMDAT

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 314  : 	lua_pushstring(L, szUser);

  00003	68 00 00 00 00	 push	 OFFSET ?szUser@@3PADA	; szUser
  00008	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000b	e8 00 00 00 00	 call	 _lua_pushstring
  00010	83 c4 08	 add	 esp, 8

; 315  : 	return 1;

  00013	b8 01 00 00 00	 mov	 eax, 1

; 316  : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?SaGetCdkey@@YAHPAUlua_State@@@Z ENDP			; SaGetCdkey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaShowMessage@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_l$ = -4						; size = 4
_L$ = 8							; size = 4
?SaShowMessage@@YAHPAUlua_State@@@Z PROC		; SaShowMessage, COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 305  : 	size_t l;
; 306  : 	const char *str=luaL_checklstring(L, 1, &l);

  00005	8d 45 fc	 lea	 eax, DWORD PTR _l$[ebp]
  00008	50		 push	 eax
  00009	6a 01		 push	 1
  0000b	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000e	e8 00 00 00 00	 call	 _luaL_checklstring

; 307  : 	const int color=luaL_checkint(L, 2);

  00013	6a 02		 push	 2
  00015	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00018	8b f8		 mov	 edi, eax
  0001a	e8 00 00 00 00	 call	 _luaL_checkinteger

; 308  : 	StockChatBufferLine( (char *)str, color);

  0001f	6a 00		 push	 0
  00021	50		 push	 eax
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  00028	83 c4 20	 add	 esp, 32			; 00000020H

; 309  : 	return 1;

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	5f		 pop	 edi

; 310  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?SaShowMessage@@YAHPAUlua_State@@@Z ENDP		; SaShowMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaShellExecute@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_l$ = -4						; size = 4
_L$ = 8							; size = 4
?SaShellExecute@@YAHPAUlua_State@@@Z PROC		; SaShellExecute, COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 297  : 	size_t l;
; 298  : 	const char *data=luaL_checklstring(L, 1, &l);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _l$[ebp]
  00007	50		 push	 eax
  00008	6a 01		 push	 1
  0000a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000d	e8 00 00 00 00	 call	 _luaL_checklstring
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 299  : 	ShellExecute(NULL,"open",data,NULL,NULL,SW_SHOWNORMAL);

  00015	6a 01		 push	 1
  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	50		 push	 eax
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open@
  00021	6a 00		 push	 0
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 300  : 	return 1;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 301  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?SaShellExecute@@YAHPAUlua_State@@@Z ENDP		; SaShellExecute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?getTickCount@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?getTickCount@@YAHPAUlua_State@@@Z PROC			; getTickCount, COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 290  : 	lua_pushinteger(L, GetTickCount());

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0000d	e8 00 00 00 00	 call	 _lua_pushinteger
  00012	83 c4 08	 add	 esp, 8

; 291  : 	
; 292  : 	return 1;

  00015	b8 01 00 00 00	 mov	 eax, 1

; 293  : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?getTickCount@@YAHPAUlua_State@@@Z ENDP			; getTickCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaGetKeyInputFocus@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SaGetKeyInputFocus@@YAHPAUlua_State@@@Z PROC		; SaGetKeyInputFocus, COMDAT

; 284  : 	GetKeyInputFocus(&MyChatBuffer);

  00000	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  00005	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  0000a	83 c4 04	 add	 esp, 4

; 285  : 	return 1;

  0000d	b8 01 00 00 00	 mov	 eax, 1

; 286  : }

  00012	c3		 ret	 0
?SaGetKeyInputFocus@@YAHPAUlua_State@@@Z ENDP		; SaGetKeyInputFocus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaD1AndD2@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SaD1AndD2@@YAHPAUlua_State@@@Z PROC			; SaD1AndD2, COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 275  : 	const int d1 = luaL_checkint(L, 1);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 01		 push	 1
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 _luaL_checkinteger

; 276  : 	const int d2 = luaL_checkint(L, 2);

  00010	6a 02		 push	 2
  00012	57		 push	 edi
  00013	8b f0		 mov	 esi, eax
  00015	e8 00 00 00 00	 call	 _luaL_checkinteger

; 277  : 
; 278  : 	lua_pushinteger(L, d1 & d2);

  0001a	23 c6		 and	 eax, esi
  0001c	50		 push	 eax
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _lua_pushinteger
  00023	83 c4 18	 add	 esp, 24			; 00000018H

; 279  : 	return 1;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 280  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?SaD1AndD2@@YAHPAUlua_State@@@Z ENDP			; SaD1AndD2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaRightShift@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SaRightShift@@YAHPAUlua_State@@@Z PROC			; SaRightShift, COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 266  : 	int mask = (int)luaL_checkint(L, 1);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 01		 push	 1
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 _luaL_checkinteger

; 267  : 	const int id = luaL_checkint(L, 2);

  00010	6a 02		 push	 2
  00012	57		 push	 edi
  00013	8b f0		 mov	 esi, eax
  00015	e8 00 00 00 00	 call	 _luaL_checkinteger

; 268  : 
; 269  : 	lua_pushinteger(L, mask >>= id);

  0001a	8b c8		 mov	 ecx, eax
  0001c	d3 fe		 sar	 esi, cl
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 _lua_pushinteger
  00025	83 c4 18	 add	 esp, 24			; 00000018H

; 270  : 	return 1;

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 271  : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?SaRightShift@@YAHPAUlua_State@@@Z ENDP			; SaRightShift
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaLeftShift@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SaLeftShift@@YAHPAUlua_State@@@Z PROC			; SaLeftShift, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 257  : 	int mask = (int)luaL_checkint(L, 1);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00008	6a 01		 push	 1
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 _luaL_checkinteger

; 258  : 	const int id = luaL_checkint(L, 2);

  00010	6a 02		 push	 2
  00012	57		 push	 edi
  00013	8b f0		 mov	 esi, eax
  00015	e8 00 00 00 00	 call	 _luaL_checkinteger

; 259  : 
; 260  : 	lua_pushinteger(L, mask <<= id);

  0001a	8b c8		 mov	 ecx, eax
  0001c	d3 e6		 shl	 esi, cl
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 _lua_pushinteger
  00025	83 c4 18	 add	 esp, 24			; 00000018H

; 261  : 	return 1;

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 262  : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?SaLeftShift@@YAHPAUlua_State@@@Z ENDP			; SaLeftShift
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaPlaySe@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SaPlaySe@@YAHPAUlua_State@@@Z PROC			; SaPlaySe, COMDAT

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 247  : 	const int tone = luaL_checkint(L, 1);

  00006	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]
  00009	6a 01		 push	 1
  0000b	57		 push	 edi
  0000c	e8 00 00 00 00	 call	 _luaL_checkinteger

; 248  : 	const int x = luaL_checkint(L, 2);

  00011	6a 02		 push	 2
  00013	57		 push	 edi
  00014	8b d8		 mov	 ebx, eax
  00016	e8 00 00 00 00	 call	 _luaL_checkinteger

; 249  : 	const int y = luaL_checkint(L, 3);

  0001b	6a 03		 push	 3
  0001d	57		 push	 edi
  0001e	8b f0		 mov	 esi, eax
  00020	e8 00 00 00 00	 call	 _luaL_checkinteger

; 250  : 	extern int play_se(int tone, int x, int y);
; 251  : 	play_se(tone, x, y);

  00025	50		 push	 eax
  00026	56		 push	 esi
  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0002d	83 c4 24	 add	 esp, 36			; 00000024H

; 252  : 	return 1;

  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx

; 253  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?SaPlaySe@@YAHPAUlua_State@@@Z ENDP			; SaPlaySe
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaStockBoxDispBuffer@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_dispPrio$1$ = -16					; size = 4
_col$ = -16						; size = 4
_y$1$ = -12						; size = 4
_x$1$ = -8						; size = 4
_col$1$ = -4						; size = 4
_L$ = 8							; size = 4
?SaStockBoxDispBuffer@@YAHPAUlua_State@@@Z PROC		; SaStockBoxDispBuffer, COMDAT

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 220  : #define STOCK_DISP_BUFFER_NO_BMP	( 1 << 31 ) 	// ???????
; 221  : #define STOCK_DISP_BUFFER_LINE		( 1 << 30 ) 	// ???
; 222  : #define STOCK_DISP_BUFFER_BOX		( 1 << 29 ) 	// ????
; 223  : #define STOCK_DISP_BUFFER_BOX_FILL	( 1 << 28 )		// ????????
; 224  : #define STOCK_DISP_BUFFER_CIRCLE	( 1 << 27 ) 	// ?
; 225  : 	const int x1 = luaL_checkint(L, 1);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _L$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	6a 01		 push	 1
  0000e	53		 push	 ebx
  0000f	e8 00 00 00 00	 call	 _luaL_checkinteger

; 226  : 	const int y1 = luaL_checkint(L, 2);

  00014	6a 02		 push	 2
  00016	53		 push	 ebx
  00017	89 45 f8	 mov	 DWORD PTR _x$1$[ebp], eax
  0001a	e8 00 00 00 00	 call	 _luaL_checkinteger

; 227  : 	const int x2 = luaL_checkint(L, 3);

  0001f	6a 03		 push	 3
  00021	53		 push	 ebx
  00022	89 45 f4	 mov	 DWORD PTR _y$1$[ebp], eax
  00025	e8 00 00 00 00	 call	 _luaL_checkinteger

; 228  : 	const int y2 = luaL_checkint(L, 4);

  0002a	6a 04		 push	 4
  0002c	53		 push	 ebx
  0002d	8b f8		 mov	 edi, eax
  0002f	e8 00 00 00 00	 call	 _luaL_checkinteger

; 229  : 	const int dispPrio = luaL_checkint(L, 5);

  00034	6a 05		 push	 5
  00036	53		 push	 ebx
  00037	8b f0		 mov	 esi, eax
  00039	e8 00 00 00 00	 call	 _luaL_checkinteger

; 230  : 	const int color = luaL_checkint(L, 6);

  0003e	6a 06		 push	 6
  00040	53		 push	 ebx
  00041	89 45 f0	 mov	 DWORD PTR _dispPrio$1$[ebp], eax
  00044	e8 00 00 00 00	 call	 _luaL_checkinteger

; 231  : 	const int fill = luaL_checkint(L, 7);

  00049	6a 07		 push	 7
  0004b	53		 push	 ebx
  0004c	89 45 fc	 mov	 DWORD PTR _col$1$[ebp], eax
  0004f	e8 00 00 00 00	 call	 _luaL_checkinteger

; 232  : 	
; 233  : 	int col;
; 234  : 	int x = ( x1 << 16 ) | x2;

  00054	8b 4d f8	 mov	 ecx, DWORD PTR _x$1$[ebp]
  00057	83 c4 38	 add	 esp, 56			; 00000038H

; 235  : 	int y = ( y1 << 16 ) | y2;

  0005a	8b 55 f4	 mov	 edx, DWORD PTR _y$1$[ebp]
  0005d	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00060	0b cf		 or	 ecx, edi
  00062	c1 e2 10	 shl	 edx, 16			; 00000010H
  00065	5f		 pop	 edi
  00066	0b d6		 or	 edx, esi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx

; 236  : 
; 237  : 	if( fill == 0 ) col = color | STOCK_DISP_BUFFER_BOX | STOCK_DISP_BUFFER_NO_BMP ;

  0006a	85 c0		 test	 eax, eax
  0006c	75 0a		 jne	 SHORT $LN2@SaStockBox
  0006e	8b 45 fc	 mov	 eax, DWORD PTR _col$1$[ebp]
  00071	0d 00 00 00 a0	 or	 eax, -1610612736	; a0000000H
  00076	eb 21		 jmp	 SHORT $LN6@SaStockBox
$LN2@SaStockBox:

; 238  : 	else if( fill == 1 ) col = color | STOCK_DISP_BUFFER_BOX_FILL | STOCK_DISP_BUFFER_NO_BMP ;

  00078	83 f8 01	 cmp	 eax, 1
  0007b	75 0a		 jne	 SHORT $LN4@SaStockBox
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _col$1$[ebp]
  00080	0d 00 00 00 90	 or	 eax, -1879048192	; 90000000H
  00085	eb 12		 jmp	 SHORT $LN6@SaStockBox
$LN4@SaStockBox:

; 239  : 	else if( fill == 2 ) col = color | STOCK_DISP_BUFFER_LINE | STOCK_DISP_BUFFER_NO_BMP ;

  00087	83 f8 02	 cmp	 eax, 2
  0008a	75 0a		 jne	 SHORT $LN8@SaStockBox
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _col$1$[ebp]
  0008f	0d 00 00 00 c0	 or	 eax, -1073741824	; c0000000H
  00094	eb 03		 jmp	 SHORT $LN6@SaStockBox
$LN8@SaStockBox:
  00096	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
$LN6@SaStockBox:

; 240  : 
; 241  : 	StockDispBuffer( x, y, dispPrio, col, 0 );

  00099	6a 00		 push	 0
  0009b	50		 push	 eax
  0009c	ff 75 f0	 push	 DWORD PTR _dispPrio$1$[ebp]
  0009f	52		 push	 edx
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  000a6	83 c4 14	 add	 esp, 20			; 00000014H

; 242  : 	return 1;

  000a9	b8 01 00 00 00	 mov	 eax, 1

; 243  : }

  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
?SaStockBoxDispBuffer@@YAHPAUlua_State@@@Z ENDP		; SaStockBoxDispBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaStockDispBuffer@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_x$1$ = -4						; size = 4
_L$ = 8							; size = 4
?SaStockDispBuffer@@YAHPAUlua_State@@@Z PROC		; SaStockDispBuffer, COMDAT

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 209  : 	const int x = luaL_checkint(L, 1);

  00006	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00009	57		 push	 edi
  0000a	6a 01		 push	 1
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _luaL_checkinteger

; 210  : 	const int y = luaL_checkint(L, 2);

  00012	6a 02		 push	 2
  00014	56		 push	 esi
  00015	89 45 fc	 mov	 DWORD PTR _x$1$[ebp], eax
  00018	e8 00 00 00 00	 call	 _luaL_checkinteger

; 211  : 	const int dispPrio = luaL_checkint(L, 3);

  0001d	6a 03		 push	 3
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	e8 00 00 00 00	 call	 _luaL_checkinteger

; 212  : 	const int bmpNo = luaL_checkint(L, 4);

  00027	6a 04		 push	 4
  00029	56		 push	 esi
  0002a	8b f8		 mov	 edi, eax
  0002c	e8 00 00 00 00	 call	 _luaL_checkinteger

; 213  : 	const int hitFlag = luaL_checkint(L, 5);

  00031	6a 05		 push	 5
  00033	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00036	8b f0		 mov	 esi, eax
  00038	e8 00 00 00 00	 call	 _luaL_checkinteger

; 214  : 	lua_pushinteger(L, (int)StockDispBuffer(x,y,dispPrio,bmpNo, hitFlag));

  0003d	50		 push	 eax
  0003e	56		 push	 esi
  0003f	57		 push	 edi
  00040	53		 push	 ebx
  00041	ff 75 fc	 push	 DWORD PTR _x$1$[ebp]
  00044	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00049	50		 push	 eax
  0004a	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0004d	e8 00 00 00 00	 call	 _lua_pushinteger
  00052	83 c4 44	 add	 esp, 68			; 00000044H

; 215  : 	return 1;

  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 216  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?SaStockDispBuffer@@YAHPAUlua_State@@@Z ENDP		; SaStockDispBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaMakeAnimDisp@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SaMakeAnimDisp@@YAHPAUlua_State@@@Z PROC		; SaMakeAnimDisp, COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 199  : 	const int x = luaL_checkint(L, 1);

  00005	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00008	57		 push	 edi
  00009	6a 01		 push	 1
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _luaL_checkinteger

; 200  : 	const int y = luaL_checkint(L, 2);

  00011	6a 02		 push	 2
  00013	56		 push	 esi
  00014	8b d8		 mov	 ebx, eax
  00016	e8 00 00 00 00	 call	 _luaL_checkinteger

; 201  : 	const int sprNo = luaL_checkint(L, 3);

  0001b	6a 03		 push	 3
  0001d	56		 push	 esi
  0001e	8b f8		 mov	 edi, eax
  00020	e8 00 00 00 00	 call	 _luaL_checkinteger

; 202  : 	const int mode = luaL_checkint(L, 4);

  00025	6a 04		 push	 4
  00027	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0002a	8b f0		 mov	 esi, eax
  0002c	e8 00 00 00 00	 call	 _luaL_checkinteger

; 203  : 	lua_pushinteger(L, (int)MakeAnimDisp(x,y,sprNo,mode));

  00031	50		 push	 eax
  00032	56		 push	 esi
  00033	57		 push	 edi
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  0003a	50		 push	 eax
  0003b	ff 75 08	 push	 DWORD PTR _L$[ebp]
  0003e	e8 00 00 00 00	 call	 _lua_pushinteger
  00043	83 c4 38	 add	 esp, 56			; 00000038H

; 204  : 	return 1;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 205  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?SaMakeAnimDisp@@YAHPAUlua_State@@@Z ENDP		; SaMakeAnimDisp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaMakeWindowDisp@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_x$1$ = -8						; size = 4
_y$1$ = -4						; size = 4
_L$ = 8							; size = 4
?SaMakeWindowDisp@@YAHPAUlua_State@@@Z PROC		; SaMakeWindowDisp, COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 186  : 	const int x = luaL_checkint(L, 1);

  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	57		 push	 edi
  0000c	6a 01		 push	 1
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _luaL_checkinteger

; 187  : 	const int y = luaL_checkint(L, 2);

  00014	6a 02		 push	 2
  00016	56		 push	 esi
  00017	89 45 f8	 mov	 DWORD PTR _x$1$[ebp], eax
  0001a	e8 00 00 00 00	 call	 _luaL_checkinteger

; 188  : 	const int sizeX = luaL_checkint(L, 3);

  0001f	6a 03		 push	 3
  00021	56		 push	 esi
  00022	89 45 fc	 mov	 DWORD PTR _y$1$[ebp], eax
  00025	e8 00 00 00 00	 call	 _luaL_checkinteger

; 189  : 	const int sizeY = luaL_checkint(L, 4);

  0002a	6a 04		 push	 4
  0002c	56		 push	 esi
  0002d	8b d8		 mov	 ebx, eax
  0002f	e8 00 00 00 00	 call	 _luaL_checkinteger

; 190  : 	const int titleNo = luaL_checkint(L, 5);

  00034	6a 05		 push	 5
  00036	56		 push	 esi
  00037	8b f8		 mov	 edi, eax
  00039	e8 00 00 00 00	 call	 _luaL_checkinteger

; 191  : 	const int wndType = luaL_checkint(L, 6);

  0003e	6a 06		 push	 6
  00040	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00043	8b f0		 mov	 esi, eax
  00045	e8 00 00 00 00	 call	 _luaL_checkinteger

; 192  : 	lua_pushinteger(L, (int)MakeWindowDisp(x,y,sizeX,sizeY,titleNo,wndType));

  0004a	50		 push	 eax
  0004b	56		 push	 esi
  0004c	57		 push	 edi
  0004d	53		 push	 ebx
  0004e	ff 75 fc	 push	 DWORD PTR _y$1$[ebp]
  00051	ff 75 f8	 push	 DWORD PTR _x$1$[ebp]
  00054	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  00059	83 c4 48	 add	 esp, 72			; 00000048H
  0005c	50		 push	 eax
  0005d	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00060	e8 00 00 00 00	 call	 _lua_pushinteger
  00065	83 c4 08	 add	 esp, 8

; 193  : 	return 1;

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 194  : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?SaMakeWindowDisp@@YAHPAUlua_State@@@Z ENDP		; SaMakeWindowDisp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaDeathAction@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?SaDeathAction@@YAHPAUlua_State@@@Z PROC		; SaDeathAction, COMDAT

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  : 	const int addr = luaL_checkint(L, 1);

  00003	6a 01		 push	 1
  00005	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00008	e8 00 00 00 00	 call	 _luaL_checkinteger

; 180  : 	DeathAction((ACTION *)addr);

  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  : 	return 1;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 182  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?SaDeathAction@@YAHPAUlua_State@@@Z ENDP		; SaDeathAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaMakeHitBox@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_x1$1$ = -4						; size = 4
_L$ = 8							; size = 4
?SaMakeHitBox@@YAHPAUlua_State@@@Z PROC			; SaMakeHitBox, COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 167  : 	const int x1 = luaL_checkint(L, 1);

  00006	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00009	57		 push	 edi
  0000a	6a 01		 push	 1
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _luaL_checkinteger

; 168  : 	const int y1 = luaL_checkint(L, 2);

  00012	6a 02		 push	 2
  00014	56		 push	 esi
  00015	89 45 fc	 mov	 DWORD PTR _x1$1$[ebp], eax
  00018	e8 00 00 00 00	 call	 _luaL_checkinteger

; 169  : 	const int x2 = luaL_checkint(L, 3);

  0001d	6a 03		 push	 3
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	e8 00 00 00 00	 call	 _luaL_checkinteger

; 170  : 	const int y2 = luaL_checkint(L, 4);

  00027	6a 04		 push	 4
  00029	56		 push	 esi
  0002a	8b f8		 mov	 edi, eax
  0002c	e8 00 00 00 00	 call	 _luaL_checkinteger

; 171  : 	const int dispPrio = luaL_checkint(L, 5);

  00031	6a 05		 push	 5
  00033	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00036	8b f0		 mov	 esi, eax
  00038	e8 00 00 00 00	 call	 _luaL_checkinteger

; 172  : 
; 173  : 	lua_pushinteger(L, MakeHitBox( x1, y1 - 3, x2, y2 - 3, dispPrio ));

  0003d	50		 push	 eax
  0003e	8d 46 fd	 lea	 eax, DWORD PTR [esi-3]
  00041	50		 push	 eax
  00042	57		 push	 edi
  00043	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]
  00046	50		 push	 eax
  00047	ff 75 fc	 push	 DWORD PTR _x1$1$[ebp]
  0004a	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  0004f	50		 push	 eax
  00050	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00053	e8 00 00 00 00	 call	 _lua_pushinteger
  00058	83 c4 44	 add	 esp, 68			; 00000044H

; 174  : 	return 1;

  0005b	b8 01 00 00 00	 mov	 eax, 1
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx

; 175  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?SaMakeHitBox@@YAHPAUlua_State@@@Z ENDP			; SaMakeHitBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaStockFontBuffer@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_l$ = -12						; size = 4
_winX$1$ = -8						; size = 4
_winY$1$ = -4						; size = 4
_L$ = 8							; size = 4
?SaStockFontBuffer@@YAHPAUlua_State@@@Z PROC		; SaStockFontBuffer, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 154  : 	size_t l;
; 155  : 	const int winX = luaL_checkint(L, 1);

  00008	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  0000b	57		 push	 edi
  0000c	6a 01		 push	 1
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _luaL_checkinteger

; 156  : 	const int winY = luaL_checkint(L, 2);

  00014	6a 02		 push	 2
  00016	56		 push	 esi
  00017	89 45 f8	 mov	 DWORD PTR _winX$1$[ebp], eax
  0001a	e8 00 00 00 00	 call	 _luaL_checkinteger

; 157  : 	const int fontPrio = luaL_checkint(L, 3);

  0001f	6a 03		 push	 3
  00021	56		 push	 esi
  00022	89 45 fc	 mov	 DWORD PTR _winY$1$[ebp], eax
  00025	e8 00 00 00 00	 call	 _luaL_checkinteger

; 158  : 	const int color = luaL_checkint(L, 4);

  0002a	6a 04		 push	 4
  0002c	56		 push	 esi
  0002d	8b d8		 mov	 ebx, eax
  0002f	e8 00 00 00 00	 call	 _luaL_checkinteger
  00034	8b f8		 mov	 edi, eax

; 159  : 	const char *data=luaL_checklstring(L, 5, &l);

  00036	8d 45 f4	 lea	 eax, DWORD PTR _l$[ebp]
  00039	50		 push	 eax
  0003a	6a 05		 push	 5
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _luaL_checklstring

; 160  : 	const int hitFlag = luaL_checkint(L, 6);

  00042	6a 06		 push	 6
  00044	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00047	8b f0		 mov	 esi, eax
  00049	e8 00 00 00 00	 call	 _luaL_checkinteger

; 161  : 	lua_pushinteger(L, StockFontBuffer( winX, winY, fontPrio, color, (char *)data, hitFlag ));

  0004e	50		 push	 eax
  0004f	56		 push	 esi
  00050	57		 push	 edi
  00051	53		 push	 ebx
  00052	ff 75 fc	 push	 DWORD PTR _winY$1$[ebp]
  00055	ff 75 f8	 push	 DWORD PTR _winX$1$[ebp]
  00058	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0005d	83 c4 4c	 add	 esp, 76			; 0000004cH
  00060	50		 push	 eax
  00061	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00064	e8 00 00 00 00	 call	 _lua_pushinteger
  00069	83 c4 08	 add	 esp, 8

; 162  : 	return 1;

  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 163  : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?SaStockFontBuffer@@YAHPAUlua_State@@@Z ENDP		; SaStockFontBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\string.h
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?SaLuaPrint@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_s$1$ = -1076						; size = 4
_l$1 = -1072						; size = 4
_sfl$ = -1068						; size = 4
_strfrmt_end$1$ = -1064					; size = 4
_b$ = -1060						; size = 524
_buff$2 = -536						; size = 512
_form$3 = -24						; size = 18
__$ArrayPad$ = -4					; size = 4
_L$ = 8							; size = 4
?SaLuaPrint@@YAHPAUlua_State@@@Z PROC			; SaLuaPrint, COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 04 00
	00		 sub	 esp, 1076		; 00000434H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _L$[ebp]

; 84   :   int arg = 1;
; 85   :   size_t sfl;
; 86   :   const char *strfrmt = luaL_checklstring(L, arg, &sfl);

  00019	8d 85 d4 fb ff
	ff		 lea	 eax, DWORD PTR _sfl$[ebp]
  0001f	50		 push	 eax
  00020	bb 01 00 00 00	 mov	 ebx, 1
  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _luaL_checklstring
  0002c	8b f0		 mov	 esi, eax

; 87   :   const char *strfrmt_end = strfrmt+sfl;

  0002e	8b 85 d4 fb ff
	ff		 mov	 eax, DWORD PTR _sfl$[ebp]
  00034	03 c6		 add	 eax, esi

; 88   :   luaL_Buffer b;
; 89   :   memset(b.buffer,0,LUAL_BUFFERSIZE);

  00036	68 00 02 00 00	 push	 512			; 00000200H
  0003b	89 85 d8 fb ff
	ff		 mov	 DWORD PTR _strfrmt_end$1$[ebp], eax
  00041	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _b$[ebp+12]
  00047	6a 00		 push	 0
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _memset

; 90   :   luaL_buffinit(L, &b);

  0004f	8d 85 dc fb ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00055	50		 push	 eax
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 _luaL_buffinit
  0005c	83 c4 20	 add	 esp, 32			; 00000020H

; 91   :   while (strfrmt < strfrmt_end) {

  0005f	3b b5 d8 fb ff
	ff		 cmp	 esi, DWORD PTR _strfrmt_end$1$[ebp]
  00065	0f 83 c2 01 00
	00		 jae	 $LN3@SaLuaPrint
  0006b	0f 1f 44 00 00	 npad	 5
$LL2@SaLuaPrint:

; 92   :     if (*strfrmt != L_ESC)

  00070	8a 0e		 mov	 cl, BYTE PTR [esi]
  00072	80 f9 25	 cmp	 cl, 37			; 00000025H
  00075	75 05		 jne	 SHORT $LN44@SaLuaPrint

; 93   :       luaL_addchar(&b, *strfrmt++);
; 94   :     else if (*++strfrmt == L_ESC)

  00077	46		 inc	 esi
  00078	38 0e		 cmp	 BYTE PTR [esi], cl
  0007a	75 32		 jne	 SHORT $LN8@SaLuaPrint
$LN44@SaLuaPrint:

; 91   :   while (strfrmt < strfrmt_end) {

  0007c	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _b$[ebp+524]
  00082	39 85 dc fb ff
	ff		 cmp	 DWORD PTR _b$[ebp], eax
  00088	72 11		 jb	 SHORT $LN38@SaLuaPrint
  0008a	8d 85 dc fb ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _luaL_prepbuffer
  00096	8a 0e		 mov	 cl, BYTE PTR [esi]
  00098	83 c4 04	 add	 esp, 4
$LN38@SaLuaPrint:
  0009b	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR _b$[ebp]
  000a1	88 08		 mov	 BYTE PTR [eax], cl
  000a3	ff 85 dc fb ff
	ff		 inc	 DWORD PTR _b$[ebp]
  000a9	e9 72 01 00 00	 jmp	 $LN9@SaLuaPrint
$LN8@SaLuaPrint:

; 95   :       luaL_addchar(&b, *strfrmt++);  
; 96   :     else { 
; 97   :       char form[MAX_FORMAT]; 
; 98   :       char buff[MAX_ITEM]; 
; 99   : 	  memset(form,0,MAX_FORMAT);
; 100  : 	  memset(buff,0,MAX_ITEM);

  000ae	68 00 02 00 00	 push	 512			; 00000200H
  000b3	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _buff$2[ebp]
  000b9	66 c7 45 f8 00
	00		 mov	 WORD PTR _form$3[ebp+16], 0
  000bf	0f 57 c0	 xorps	 xmm0, xmm0
  000c2	6a 00		 push	 0
  000c4	50		 push	 eax
  000c5	0f 11 45 e8	 movups	 XMMWORD PTR _form$3[ebp], xmm0
  000c9	e8 00 00 00 00	 call	 _memset

; 101  :       arg++;
; 102  :       strfrmt = scanformat(L, strfrmt, form);

  000ce	8d 45 e8	 lea	 eax, DWORD PTR _form$3[ebp]
  000d1	43		 inc	 ebx
  000d2	50		 push	 eax
  000d3	56		 push	 esi
  000d4	57		 push	 edi
  000d5	e8 00 00 00 00	 call	 ?scanformat@@YAPBDPAUlua_State@@PBDPAD@Z ; scanformat
  000da	8b f0		 mov	 esi, eax
  000dc	83 c4 18	 add	 esp, 24			; 00000018H

; 103  :       switch (*strfrmt++) {

  000df	0f be 0e	 movsx	 ecx, BYTE PTR [esi]
  000e2	8d 41 bb	 lea	 eax, DWORD PTR [ecx-69]
  000e5	83 f8 33	 cmp	 eax, 51			; 00000033H
  000e8	0f 87 64 01 00
	00		 ja	 $LN25@SaLuaPrint
  000ee	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN39@SaLuaPrint[eax]
  000f5	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN40@SaLuaPrint[eax*4]
$LN10@SaLuaPrint:

; 104  :         case 'c': {
; 105  :           sprintf(buff, form, (int)luaL_checknumber(L, arg));

  000fc	53		 push	 ebx
  000fd	57		 push	 edi
  000fe	e8 00 00 00 00	 call	 _luaL_checknumber
  00103	e8 00 00 00 00	 call	 __ftol2_sse
  00108	50		 push	 eax
  00109	8d 45 e8	 lea	 eax, DWORD PTR _form$3[ebp]
  0010c	50		 push	 eax
  0010d	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _buff$2[ebp]
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 _sprintf
  00119	83 c4 14	 add	 esp, 20			; 00000014H

; 106  :           break;

  0011c	e9 d4 00 00 00	 jmp	 $LN4@SaLuaPrint
$LN11@SaLuaPrint:

; 107  :         }
; 108  :         case 'd':  case 'i': {
; 109  :           addintlen(form);

  00121	8d 45 e8	 lea	 eax, DWORD PTR _form$3[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?addintlen@@YAXPAD@Z	; addintlen

; 110  :           sprintf(buff, form, (LUA_INTFRM_T)luaL_checknumber(L, arg));

  0012a	53		 push	 ebx
  0012b	57		 push	 edi
  0012c	e8 00 00 00 00	 call	 _luaL_checknumber
  00131	e8 00 00 00 00	 call	 __ftol2_sse
$LN43@SaLuaPrint:

; 142  :                                LUA_QL("format"), *(strfrmt - 1));
; 143  :         }
; 144  :       }
; 145  :       luaL_addlstring(&b, buff, strlen(buff));

  00136	50		 push	 eax
  00137	8d 45 e8	 lea	 eax, DWORD PTR _form$3[ebp]
  0013a	50		 push	 eax
  0013b	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _buff$2[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _sprintf
  00147	83 c4 18	 add	 esp, 24			; 00000018H
  0014a	e9 a6 00 00 00	 jmp	 $LN4@SaLuaPrint
$LN13@SaLuaPrint:

; 111  :           break;
; 112  :         }
; 113  :         case 'o':  case 'u':  case 'x':  case 'X': {
; 114  :           addintlen(form);

  0014f	8d 45 e8	 lea	 eax, DWORD PTR _form$3[ebp]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ?addintlen@@YAXPAD@Z	; addintlen

; 115  :           sprintf(buff, form, (unsigned LUA_INTFRM_T)luaL_checknumber(L, arg));

  00158	53		 push	 ebx
  00159	57		 push	 edi
  0015a	e8 00 00 00 00	 call	 _luaL_checknumber
  0015f	e8 00 00 00 00	 call	 __ftol2

; 116  :           break;

  00164	eb d0		 jmp	 SHORT $LN43@SaLuaPrint
$LN17@SaLuaPrint:

; 117  :         }
; 118  :         case 'e':  case 'E': case 'f':
; 119  :         case 'g': case 'G': {
; 120  :           sprintf(buff, form, (double)luaL_checknumber(L, arg));

  00166	53		 push	 ebx
  00167	57		 push	 edi
  00168	e8 00 00 00 00	 call	 _luaL_checknumber
  0016d	8d 45 e8	 lea	 eax, DWORD PTR _form$3[ebp]
  00170	dd 1c 24	 fstp	 QWORD PTR [esp]
  00173	50		 push	 eax
  00174	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _buff$2[ebp]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 _sprintf
  00180	83 c4 10	 add	 esp, 16			; 00000010H

; 121  :           break;

  00183	eb 70		 jmp	 SHORT $LN4@SaLuaPrint
$LN22@SaLuaPrint:

; 122  :         }
; 123  :         case 'q': {
; 124  :           addquoted(L, &b, arg);

  00185	53		 push	 ebx
  00186	8d 85 dc fb ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  0018c	50		 push	 eax
  0018d	57		 push	 edi
  0018e	e8 00 00 00 00	 call	 ?addquoted@@YAXPAUlua_State@@PAUluaL_Buffer@@H@Z ; addquoted

; 125  :           continue;  

  00193	e9 85 00 00 00	 jmp	 $LN42@SaLuaPrint
$LN23@SaLuaPrint:

; 126  :         }
; 127  :         case 's': {
; 128  :           size_t l;
; 129  :           const char *s = luaL_checklstring(L, arg, &l);

  00198	8d 85 d0 fb ff
	ff		 lea	 eax, DWORD PTR _l$1[ebp]
  0019e	50		 push	 eax
  0019f	53		 push	 ebx
  001a0	57		 push	 edi
  001a1	e8 00 00 00 00	 call	 _luaL_checklstring
  001a6	89 85 cc fb ff
	ff		 mov	 DWORD PTR _s$1$[ebp], eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\string.h

; 502  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  001ac	8d 45 e8	 lea	 eax, DWORD PTR _form$3[ebp]
  001af	6a 2e		 push	 46			; 0000002eH
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _strchr
  001b7	83 c4 14	 add	 esp, 20			; 00000014H
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp

; 130  :           if (!strchr(form, '.') && l >= 100) {

  001ba	85 c0		 test	 eax, eax
  001bc	75 1e		 jne	 SHORT $LN24@SaLuaPrint
  001be	83 bd d0 fb ff
	ff 64		 cmp	 DWORD PTR _l$1[ebp], 100 ; 00000064H
  001c5	72 15		 jb	 SHORT $LN24@SaLuaPrint

; 131  :             lua_pushvalue(L, arg);

  001c7	53		 push	 ebx
  001c8	57		 push	 edi
  001c9	e8 00 00 00 00	 call	 _lua_pushvalue

; 132  :             luaL_addvalue(&b);

  001ce	8d 85 dc fb ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  001d4	50		 push	 eax
  001d5	e8 00 00 00 00	 call	 _luaL_addvalue

; 133  :             continue; 

  001da	eb 41		 jmp	 SHORT $LN42@SaLuaPrint
$LN24@SaLuaPrint:

; 134  :           }
; 135  :           else {
; 136  :             sprintf(buff, form, s);

  001dc	ff b5 cc fb ff
	ff		 push	 DWORD PTR _s$1$[ebp]
  001e2	8d 45 e8	 lea	 eax, DWORD PTR _form$3[ebp]
  001e5	50		 push	 eax
  001e6	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _buff$2[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 _sprintf
  001f2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SaLuaPrint:

; 142  :                                LUA_QL("format"), *(strfrmt - 1));
; 143  :         }
; 144  :       }
; 145  :       luaL_addlstring(&b, buff, strlen(buff));

  001f5	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _buff$2[ebp]
  001fb	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  001fe	66 90		 npad	 2
$LL41@SaLuaPrint:
  00200	8a 01		 mov	 al, BYTE PTR [ecx]
  00202	41		 inc	 ecx
  00203	84 c0		 test	 al, al
  00205	75 f9		 jne	 SHORT $LL41@SaLuaPrint
  00207	2b ca		 sub	 ecx, edx
  00209	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _buff$2[ebp]
  0020f	51		 push	 ecx
  00210	50		 push	 eax
  00211	8d 85 dc fb ff
	ff		 lea	 eax, DWORD PTR _b$[ebp]
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 _luaL_addlstring
$LN42@SaLuaPrint:

; 91   :   while (strfrmt < strfrmt_end) {

  0021d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@SaLuaPrint:
  00220	46		 inc	 esi
  00221	3b b5 d8 fb ff
	ff		 cmp	 esi, DWORD PTR _strfrmt_end$1$[ebp]
  00227	0f 82 43 fe ff
	ff		 jb	 $LL2@SaLuaPrint
$LN3@SaLuaPrint:

; 146  :     }
; 147  :   }
; 148  :   printf(b.buffer); 

  0022d	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _b$[ebp+12]
  00233	50		 push	 eax
  00234	e8 00 00 00 00	 call	 _printf
  00239	83 c4 04	 add	 esp, 4

; 149  :   return 1;

  0023c	b8 01 00 00 00	 mov	 eax, 1
  00241	5f		 pop	 edi

; 150  : }

  00242	5e		 pop	 esi
  00243	5b		 pop	 ebx
  00244	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00247	33 cd		 xor	 ecx, ebp
  00249	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
$LN25@SaLuaPrint:

; 137  :             break;
; 138  :           }
; 139  :         }
; 140  :         default: {  
; 141  :           return luaL_error(L, "invalid option " LUA_QL("%%%c") " to "

  00252	51		 push	 ecx
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@KIPBEOBI@invalid?5option?5?8?$CF?$CF?$CFc?8?5to?5?8forma@
  00258	57		 push	 edi
  00259	e8 00 00 00 00	 call	 _luaL_error

; 150  : }

  0025e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00261	83 c4 0c	 add	 esp, 12			; 0000000cH
  00264	33 cd		 xor	 ecx, ebp
  00266	5f		 pop	 edi
  00267	5e		 pop	 esi
  00268	5b		 pop	 ebx
  00269	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026e	8b e5		 mov	 esp, ebp
  00270	5d		 pop	 ebp
  00271	c3		 ret	 0
  00272	66 90		 npad	 2
$LN40@SaLuaPrint:
  00274	00 00 00 00	 DD	 $LN17@SaLuaPrint
  00278	00 00 00 00	 DD	 $LN13@SaLuaPrint
  0027c	00 00 00 00	 DD	 $LN10@SaLuaPrint
  00280	00 00 00 00	 DD	 $LN11@SaLuaPrint
  00284	00 00 00 00	 DD	 $LN22@SaLuaPrint
  00288	00 00 00 00	 DD	 $LN23@SaLuaPrint
  0028c	00 00 00 00	 DD	 $LN25@SaLuaPrint
$LN39@SaLuaPrint:
  00290	00		 DB	 0
  00291	06		 DB	 6
  00292	00		 DB	 0
  00293	06		 DB	 6
  00294	06		 DB	 6
  00295	06		 DB	 6
  00296	06		 DB	 6
  00297	06		 DB	 6
  00298	06		 DB	 6
  00299	06		 DB	 6
  0029a	06		 DB	 6
  0029b	06		 DB	 6
  0029c	06		 DB	 6
  0029d	06		 DB	 6
  0029e	06		 DB	 6
  0029f	06		 DB	 6
  002a0	06		 DB	 6
  002a1	06		 DB	 6
  002a2	06		 DB	 6
  002a3	01		 DB	 1
  002a4	06		 DB	 6
  002a5	06		 DB	 6
  002a6	06		 DB	 6
  002a7	06		 DB	 6
  002a8	06		 DB	 6
  002a9	06		 DB	 6
  002aa	06		 DB	 6
  002ab	06		 DB	 6
  002ac	06		 DB	 6
  002ad	06		 DB	 6
  002ae	02		 DB	 2
  002af	03		 DB	 3
  002b0	00		 DB	 0
  002b1	00		 DB	 0
  002b2	00		 DB	 0
  002b3	06		 DB	 6
  002b4	03		 DB	 3
  002b5	06		 DB	 6
  002b6	06		 DB	 6
  002b7	06		 DB	 6
  002b8	06		 DB	 6
  002b9	06		 DB	 6
  002ba	01		 DB	 1
  002bb	06		 DB	 6
  002bc	04		 DB	 4
  002bd	06		 DB	 6
  002be	05		 DB	 5
  002bf	06		 DB	 6
  002c0	01		 DB	 1
  002c1	06		 DB	 6
  002c2	06		 DB	 6
  002c3	01		 DB	 1
?SaLuaPrint@@YAHPAUlua_State@@@Z ENDP			; SaLuaPrint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?addquoted@@YAXPAUlua_State@@PAUluaL_Buffer@@H@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_l$ = 12						; size = 4
_b$ = 12						; size = 4
_arg$ = 16						; size = 4
?addquoted@@YAXPAUlua_State@@PAUluaL_Buffer@@H@Z PROC	; addquoted, COMDAT

; 53   : static void addquoted (lua_State *L, luaL_Buffer *b, int arg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]

; 54   :   size_t l;
; 55   :   const char *s = luaL_checklstring(L, arg, &l);

  00008	8d 45 0c	 lea	 eax, DWORD PTR _l$[ebp]
  0000b	57		 push	 edi
  0000c	50		 push	 eax
  0000d	ff 75 10	 push	 DWORD PTR _arg$[ebp]
  00010	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00013	e8 00 00 00 00	 call	 _luaL_checklstring
  00018	8b f8		 mov	 edi, eax

; 56   :   luaL_addchar(b, '"');

  0001a	8d 9e 0c 02 00
	00		 lea	 ebx, DWORD PTR [esi+524]
  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	3b c3		 cmp	 eax, ebx
  00027	72 0b		 jb	 SHORT $LN13@addquoted
  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 _luaL_prepbuffer
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	83 c4 04	 add	 esp, 4
$LN13@addquoted:
  00034	c6 00 22	 mov	 BYTE PTR [eax], 34	; 00000022H
  00037	ff 06		 inc	 DWORD PTR [esi]

; 57   :   while (l--) {

  00039	8b 45 0c	 mov	 eax, DWORD PTR _l$[ebp]
  0003c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 92 00 00
	00		 je	 $LN19@addquoted
$LL2@addquoted:
  00046	48		 dec	 eax
  00047	89 45 0c	 mov	 DWORD PTR _l$[ebp], eax

; 58   :     switch (*s) {

  0004a	8a 0f		 mov	 cl, BYTE PTR [edi]
  0004c	0f be c1	 movsx	 eax, cl
  0004f	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00052	77 5f		 ja	 SHORT $LN11@addquoted
  00054	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN23@addquoted[eax]
  0005b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@addquoted[eax*4]
$LN6@addquoted:

; 59   :       case '"': case '\\': case '\n': {
; 60   :         luaL_addchar(b, '\\');

  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	3b c3		 cmp	 eax, ebx
  00066	72 0b		 jb	 SHORT $LN14@addquoted
  00068	56		 push	 esi
  00069	e8 00 00 00 00	 call	 _luaL_prepbuffer
  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	83 c4 04	 add	 esp, 4
$LN14@addquoted:
  00073	c6 00 5c	 mov	 BYTE PTR [eax], 92	; 0000005cH
  00076	ff 06		 inc	 DWORD PTR [esi]
  00078	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 61   :         luaL_addchar(b, *s);

  0007a	3b cb		 cmp	 ecx, ebx
  0007c	72 0b		 jb	 SHORT $LN15@addquoted
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 _luaL_prepbuffer
  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00086	83 c4 04	 add	 esp, 4
$LN15@addquoted:
  00089	8a 07		 mov	 al, BYTE PTR [edi]
  0008b	88 01		 mov	 BYTE PTR [ecx], al

; 62   :         break;

  0008d	eb 39		 jmp	 SHORT $LN26@addquoted
$LN9@addquoted:

; 63   :       }
; 64   :       case '\r': {
; 65   :         luaL_addlstring(b, "\\r", 2);

  0008f	6a 02		 push	 2
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_02HIBBOKEN@?2r@
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 _luaL_addlstring
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   :         break;

  0009f	eb 29		 jmp	 SHORT $LN4@addquoted
$LN10@addquoted:

; 67   :       }
; 68   :       case '\0': {
; 69   :         luaL_addlstring(b, "\\000", 4);

  000a1	6a 04		 push	 4
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_04MPDIABOK@?2000@
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _luaL_addlstring
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 70   :         break;

  000b1	eb 17		 jmp	 SHORT $LN4@addquoted
$LN11@addquoted:

; 71   :       }
; 72   :       default: {
; 73   :         luaL_addchar(b, *s);

  000b3	8b 06		 mov	 eax, DWORD PTR [esi]
  000b5	3b c3		 cmp	 eax, ebx
  000b7	72 0d		 jb	 SHORT $LN16@addquoted
  000b9	56		 push	 esi
  000ba	e8 00 00 00 00	 call	 _luaL_prepbuffer
  000bf	8b 06		 mov	 eax, DWORD PTR [esi]
  000c1	83 c4 04	 add	 esp, 4
  000c4	8a 0f		 mov	 cl, BYTE PTR [edi]
$LN16@addquoted:
  000c6	88 08		 mov	 BYTE PTR [eax], cl
$LN26@addquoted:

; 74   :         break;
; 75   :       }
; 76   :     }
; 77   :     s++;

  000c8	ff 06		 inc	 DWORD PTR [esi]
$LN4@addquoted:

; 57   :   while (l--) {

  000ca	8b 45 0c	 mov	 eax, DWORD PTR _l$[ebp]

; 74   :         break;
; 75   :       }
; 76   :     }
; 77   :     s++;

  000cd	47		 inc	 edi
  000ce	85 c0		 test	 eax, eax
  000d0	0f 85 70 ff ff
	ff		 jne	 $LL2@addquoted
  000d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN19@addquoted:

; 57   :   while (l--) {

  000d8	48		 dec	 eax
  000d9	89 45 0c	 mov	 DWORD PTR _l$[ebp], eax

; 78   :   }
; 79   :   luaL_addchar(b, '"');

  000dc	3b cb		 cmp	 ecx, ebx
  000de	72 15		 jb	 SHORT $LN25@addquoted
  000e0	56		 push	 esi
  000e1	e8 00 00 00 00	 call	 _luaL_prepbuffer
  000e6	8b 06		 mov	 eax, DWORD PTR [esi]
  000e8	83 c4 04	 add	 esp, 4
  000eb	5f		 pop	 edi
  000ec	c6 00 22	 mov	 BYTE PTR [eax], 34	; 00000022H

; 80   : }

  000ef	ff 06		 inc	 DWORD PTR [esi]
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
$LN25@addquoted:
  000f5	5f		 pop	 edi

; 78   :   }
; 79   :   luaL_addchar(b, '"');

  000f6	c6 01 22	 mov	 BYTE PTR [ecx], 34	; 00000022H

; 80   : }

  000f9	ff 06		 inc	 DWORD PTR [esi]
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
  000ff	90		 npad	 1
$LN24@addquoted:
  00100	00 00 00 00	 DD	 $LN10@addquoted
  00104	00 00 00 00	 DD	 $LN6@addquoted
  00108	00 00 00 00	 DD	 $LN9@addquoted
  0010c	00 00 00 00	 DD	 $LN11@addquoted
$LN23@addquoted:
  00110	00		 DB	 0
  00111	03		 DB	 3
  00112	03		 DB	 3
  00113	03		 DB	 3
  00114	03		 DB	 3
  00115	03		 DB	 3
  00116	03		 DB	 3
  00117	03		 DB	 3
  00118	03		 DB	 3
  00119	03		 DB	 3
  0011a	01		 DB	 1
  0011b	03		 DB	 3
  0011c	03		 DB	 3
  0011d	02		 DB	 2
  0011e	03		 DB	 3
  0011f	03		 DB	 3
  00120	03		 DB	 3
  00121	03		 DB	 3
  00122	03		 DB	 3
  00123	03		 DB	 3
  00124	03		 DB	 3
  00125	03		 DB	 3
  00126	03		 DB	 3
  00127	03		 DB	 3
  00128	03		 DB	 3
  00129	03		 DB	 3
  0012a	03		 DB	 3
  0012b	03		 DB	 3
  0012c	03		 DB	 3
  0012d	03		 DB	 3
  0012e	03		 DB	 3
  0012f	03		 DB	 3
  00130	03		 DB	 3
  00131	03		 DB	 3
  00132	01		 DB	 1
  00133	03		 DB	 3
  00134	03		 DB	 3
  00135	03		 DB	 3
  00136	03		 DB	 3
  00137	03		 DB	 3
  00138	03		 DB	 3
  00139	03		 DB	 3
  0013a	03		 DB	 3
  0013b	03		 DB	 3
  0013c	03		 DB	 3
  0013d	03		 DB	 3
  0013e	03		 DB	 3
  0013f	03		 DB	 3
  00140	03		 DB	 3
  00141	03		 DB	 3
  00142	03		 DB	 3
  00143	03		 DB	 3
  00144	03		 DB	 3
  00145	03		 DB	 3
  00146	03		 DB	 3
  00147	03		 DB	 3
  00148	03		 DB	 3
  00149	03		 DB	 3
  0014a	03		 DB	 3
  0014b	03		 DB	 3
  0014c	03		 DB	 3
  0014d	03		 DB	 3
  0014e	03		 DB	 3
  0014f	03		 DB	 3
  00150	03		 DB	 3
  00151	03		 DB	 3
  00152	03		 DB	 3
  00153	03		 DB	 3
  00154	03		 DB	 3
  00155	03		 DB	 3
  00156	03		 DB	 3
  00157	03		 DB	 3
  00158	03		 DB	 3
  00159	03		 DB	 3
  0015a	03		 DB	 3
  0015b	03		 DB	 3
  0015c	03		 DB	 3
  0015d	03		 DB	 3
  0015e	03		 DB	 3
  0015f	03		 DB	 3
  00160	03		 DB	 3
  00161	03		 DB	 3
  00162	03		 DB	 3
  00163	03		 DB	 3
  00164	03		 DB	 3
  00165	03		 DB	 3
  00166	03		 DB	 3
  00167	03		 DB	 3
  00168	03		 DB	 3
  00169	03		 DB	 3
  0016a	03		 DB	 3
  0016b	03		 DB	 3
  0016c	01		 DB	 1
?addquoted@@YAXPAUlua_State@@PAUluaL_Buffer@@H@Z ENDP	; addquoted
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?addintlen@@YAXPAD@Z
_TEXT	SEGMENT
_form$ = 8						; size = 4
?addintlen@@YAXPAD@Z PROC				; addintlen, COMDAT

; 45   : static void addintlen (char *form) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   :   size_t l = strlen(form);

  00003	8b 55 08	 mov	 edx, DWORD PTR _form$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL3@addintlen:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@addintlen
  00017	2b c6		 sub	 eax, esi

; 47   :   char spec = form[l - 1];

  00019	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]

; 48   :   strcpy(form + l - 1, LUA_INTFRMLEN);

  0001c	ba 6c 00 00 00	 mov	 edx, 108		; 0000006cH
  00021	8a 41 ff	 mov	 al, BYTE PTR [ecx-1]
  00024	66 89 51 ff	 mov	 WORD PTR [ecx-1], dx

; 49   :   form[l + sizeof(LUA_INTFRMLEN) - 2] = spec;

  00028	88 01		 mov	 BYTE PTR [ecx], al

; 50   :   form[l + sizeof(LUA_INTFRMLEN) - 1] = '\0';

  0002a	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0
  0002e	5e		 pop	 esi

; 51   : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?addintlen@@YAXPAD@Z ENDP				; addintlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?scanformat@@YAPBDPAUlua_State@@PBDPAD@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_strfrmt$ = 12						; size = 4
_form$ = 16						; size = 4
?scanformat@@YAPBDPAUlua_State@@PBDPAD@Z PROC		; scanformat, COMDAT

; 23   : static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 24   :   const char *p = strfrmt;

  00005	8b 75 0c	 mov	 esi, DWORD PTR _strfrmt$[ebp]
  00008	8b de		 mov	 ebx, esi
  0000a	57		 push	 edi

; 25   :   while (*p != '\0' && strchr(FLAGS, *p) != NULL) p++; 

  0000b	8a 06		 mov	 al, BYTE PTR [esi]
  0000d	84 c0		 test	 al, al
  0000f	74 1d		 je	 SHORT $LN16@scanformat
$LL2@scanformat:
  00011	0f be c0	 movsx	 eax, al
  00014	50		 push	 eax
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_05GGBDHNF@?9?$CL?5?$CD0@
  0001a	e8 00 00 00 00	 call	 _strchr
  0001f	83 c4 08	 add	 esp, 8
  00022	85 c0		 test	 eax, eax
  00024	74 08		 je	 SHORT $LN16@scanformat
  00026	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  00029	43		 inc	 ebx
  0002a	84 c0		 test	 al, al
  0002c	75 e3		 jne	 SHORT $LL2@scanformat
$LN16@scanformat:

; 26   :   if ((size_t)(p - strfrmt) >= sizeof(FLAGS))

  0002e	8b c3		 mov	 eax, ebx
  00030	2b c6		 sub	 eax, esi
  00032	8b 75 08	 mov	 esi, DWORD PTR _L$[ebp]
  00035	83 f8 06	 cmp	 eax, 6
  00038	72 0e		 jb	 SHORT $LN4@scanformat

; 27   :     luaL_error(L, "invalid format (repeated flags)");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@COOMGCAO@invalid?5format?5?$CIrepeated?5flags?$CJ@
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _luaL_error
  00045	83 c4 08	 add	 esp, 8
$LN4@scanformat:

; 28   :   if (isdigit(uchar(*p))) p++; 

  00048	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _isdigit
  00051	83 c4 04	 add	 esp, 4
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN5@scanformat
  00058	43		 inc	 ebx
$LN5@scanformat:

; 29   :   if (isdigit(uchar(*p))) p++; 

  00059	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _isdigit
  00062	83 c4 04	 add	 esp, 4
  00065	85 c0		 test	 eax, eax
  00067	74 01		 je	 SHORT $LN6@scanformat
  00069	43		 inc	 ebx
$LN6@scanformat:

; 30   :   if (*p == '.') {

  0006a	80 3b 2e	 cmp	 BYTE PTR [ebx], 46	; 0000002eH
  0006d	75 24		 jne	 SHORT $LN9@scanformat

; 31   :     p++;
; 32   :     if (isdigit(uchar(*p))) p++;

  0006f	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  00073	43		 inc	 ebx
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _isdigit
  0007a	83 c4 04	 add	 esp, 4
  0007d	85 c0		 test	 eax, eax
  0007f	74 01		 je	 SHORT $LN8@scanformat
  00081	43		 inc	 ebx
$LN8@scanformat:

; 33   :     if (isdigit(uchar(*p))) p++; 

  00082	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _isdigit
  0008b	83 c4 04	 add	 esp, 4
  0008e	85 c0		 test	 eax, eax
  00090	74 01		 je	 SHORT $LN9@scanformat
  00092	43		 inc	 ebx
$LN9@scanformat:

; 34   :   }
; 35   :   if (isdigit(uchar(*p)))

  00093	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _isdigit
  0009c	83 c4 04	 add	 esp, 4
  0009f	85 c0		 test	 eax, eax
  000a1	74 0e		 je	 SHORT $LN10@scanformat

; 36   :     luaL_error(L, "invalid format (width or precision too long)");

  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KALFEKPN@invalid?5format?5?$CIwidth?5or?5precis@
  000a8	56		 push	 esi
  000a9	e8 00 00 00 00	 call	 _luaL_error
  000ae	83 c4 08	 add	 esp, 8
$LN10@scanformat:

; 37   :   *(form++) = '%';
; 38   :   strncpy(form, strfrmt, p - strfrmt + 1);

  000b1	8b 45 0c	 mov	 eax, DWORD PTR _strfrmt$[ebp]
  000b4	8b f3		 mov	 esi, ebx
  000b6	8b 7d 10	 mov	 edi, DWORD PTR _form$[ebp]
  000b9	2b f0		 sub	 esi, eax
  000bb	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  000be	c6 07 25	 mov	 BYTE PTR [edi], 37	; 00000025H
  000c1	51		 push	 ecx
  000c2	50		 push	 eax
  000c3	47		 inc	 edi
  000c4	57		 push	 edi
  000c5	e8 00 00 00 00	 call	 _strncpy
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   :   form += p - strfrmt + 1;
; 40   :   *form = '\0';

  000cd	c6 44 3e 01 00	 mov	 BYTE PTR [esi+edi+1], 0

; 41   :   return p;

  000d2	8b c3		 mov	 eax, ebx
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx

; 42   : }

  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
?scanformat@@YAPBDPAUlua_State@@PBDPAD@Z ENDP		; scanformat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\mylua\sa.cpp
;	COMDAT ?luaopen_Sa@@YAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?luaopen_Sa@@YAHPAUlua_State@@@Z PROC			; luaopen_Sa, COMDAT

; 416  : LUALIB_API int luaopen_Sa (lua_State *L) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  : 	luaL_register(L, "sa", salib);

  00003	68 00 00 00 00	 push	 OFFSET ?salib@@3QBUluaL_Reg@@B
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_02CKOPKKAC@sa@
  0000d	ff 75 08	 push	 DWORD PTR _L$[ebp]
  00010	e8 00 00 00 00	 call	 _luaL_register
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 418  : 	return 1;

  00018	b8 01 00 00 00	 mov	 eax, 1

; 419  : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?luaopen_Sa@@YAHPAUlua_State@@@Z ENDP			; luaopen_Sa
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);
; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Format$[ebp]
  00007	6a 01		 push	 1
  00009	e8 00 00 00 00	 call	 ___acrt_iob_func
  0000e	83 c4 04	 add	 esp, 4

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Format$[ebp+4]
  00014	51		 push	 ecx
  00015	6a 00		 push	 0
  00017	56		 push	 esi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	ff 70 04	 push	 DWORD PTR [eax+4]
  00021	ff 30		 push	 DWORD PTR [eax]
  00023	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H

; 961  :         __crt_va_end(_ArgList);
; 962  :         return _Result;

  0002b	5e		 pop	 esi

; 963  :     }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
