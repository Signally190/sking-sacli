; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SaDispatchMessage@@YAHHPAD@Z			; SaDispatchMessage
PUBLIC	?lssproto_SaMenu_send@@YAXHHHH@Z		; lssproto_SaMenu_send
PUBLIC	?lssproto_GetInfo_send@@YAXH@Z			; lssproto_GetInfo_send
PUBLIC	?lssproto_Gmset_send@@YAXHHPAD@Z		; lssproto_Gmset_send
PUBLIC	?lssproto_Expup_send@@YAXH@Z			; lssproto_Expup_send
PUBLIC	?lssproto_Noenemy_send@@YAXH@Z			; lssproto_Noenemy_send
PUBLIC	?lssproto_Partyauto_send@@YAXH@Z		; lssproto_Partyauto_send
PUBLIC	?lssproto_petshopcall_send@@YAXH@Z		; lssproto_petshopcall_send
PUBLIC	?lssproto_poolitemcall_send@@YAXH@Z		; lssproto_poolitemcall_send
PUBLIC	?lssproto_W_send@@YAXHHHPAD@Z			; lssproto_W_send
PUBLIC	?lssproto_W2_send@@YAXHHHPAD@Z			; lssproto_W2_send
PUBLIC	?lssproto_EV_send@@YAXHHHHHH@Z			; lssproto_EV_send
PUBLIC	?lssproto_EN_send@@YAXHHH@Z			; lssproto_EN_send
PUBLIC	?lssproto_DU_send@@YAXHHH@Z			; lssproto_DU_send
PUBLIC	?lssproto_EO_send@@YAXHH@Z			; lssproto_EO_send
PUBLIC	?lssproto_BU_send@@YAXHH@Z			; lssproto_BU_send
PUBLIC	?lssproto_JB_send@@YAXHHH@Z			; lssproto_JB_send
PUBLIC	?lssproto_LB_send@@YAXHHH@Z			; lssproto_LB_send
PUBLIC	?lssproto_B_send@@YAXHPAD@Z			; lssproto_B_send
PUBLIC	?lssproto_SKD_send@@YAXHHH@Z			; lssproto_SKD_send
PUBLIC	?lssproto_ID_send@@YAXHHHHH@Z			; lssproto_ID_send
PUBLIC	?lssproto_PI_send@@YAXHHHH@Z			; lssproto_PI_send
PUBLIC	?lssproto_DI_send@@YAXHHHH@Z			; lssproto_DI_send
PUBLIC	?lssproto_DG_send@@YAXHHHH@Z			; lssproto_DG_send
PUBLIC	?lssproto_DP_send@@YAXHHHH@Z			; lssproto_DP_send
PUBLIC	?lssproto_MI_send@@YAXHHH@Z			; lssproto_MI_send
PUBLIC	?lssproto_MSG_send@@YAXHHPADH@Z			; lssproto_MSG_send
PUBLIC	?lssproto_PMSG_send@@YAXHHHHPADH@Z		; lssproto_PMSG_send
PUBLIC	?lssproto_AB_send@@YAXH@Z			; lssproto_AB_send
PUBLIC	?lssproto_DAB_send@@YAXHH@Z			; lssproto_DAB_send
PUBLIC	?lssproto_AAB_send@@YAXHHH@Z			; lssproto_AAB_send
PUBLIC	?lssproto_L_send@@YAXHH@Z			; lssproto_L_send
PUBLIC	?lssproto_TK_send@@YAXHHHPADHH@Z		; lssproto_TK_send
PUBLIC	?lssproto_M_send@@YAXHHHHHH@Z			; lssproto_M_send
PUBLIC	?lssproto_C_send@@YAXHH@Z			; lssproto_C_send
PUBLIC	?lssproto_S_send@@YAXHPAD@Z			; lssproto_S_send
PUBLIC	?lssproto_FS_send@@YAXHH@Z			; lssproto_FS_send
PUBLIC	?lssproto_HL_send@@YAXHH@Z			; lssproto_HL_send
PUBLIC	?lssproto_PR_send@@YAXHHHH@Z			; lssproto_PR_send
PUBLIC	?lssproto_KS_send@@YAXHH@Z			; lssproto_KS_send
PUBLIC	?lssproto_SPET_send@@YAXHH@Z			; lssproto_SPET_send
PUBLIC	?lssproto_AC_send@@YAXHHHH@Z			; lssproto_AC_send
PUBLIC	?lssproto_MU_send@@YAXHHHHH@Z			; lssproto_MU_send
PUBLIC	?lssproto_PS_send@@YAXHHHHPAD@Z			; lssproto_PS_send
PUBLIC	?lssproto_ST_send@@YAXHH@Z			; lssproto_ST_send
PUBLIC	?lssproto_DT_send@@YAXHH@Z			; lssproto_DT_send
PUBLIC	?lssproto_FT_send@@YAXHPAD@Z			; lssproto_FT_send
PUBLIC	?lssproto_SKUP_send@@YAXHH@Z			; lssproto_SKUP_send
PUBLIC	?lssproto_KN_send@@YAXHHPAD@Z			; lssproto_KN_send
PUBLIC	?lssproto_WN_send@@YAXHHHHHHPAD@Z		; lssproto_WN_send
PUBLIC	?lssproto_SP_send@@YAXHHHH@Z			; lssproto_SP_send
PUBLIC	?lssproto_ClientLogin_send@@YAXHPAD0@Z		; lssproto_ClientLogin_send
PUBLIC	?lssproto_CreateNewChar_send@@YAXHHPADHHHHHHHHHHH@Z ; lssproto_CreateNewChar_send
PUBLIC	?lssproto_CharDelete_send@@YAXHPAD@Z		; lssproto_CharDelete_send
PUBLIC	?lssproto_CharLogin_send@@YAXHPAD@Z		; lssproto_CharLogin_send
PUBLIC	?lssproto_CharList_send@@YAXH@Z			; lssproto_CharList_send
PUBLIC	?lssproto_CharLogout_send@@YAXHH@Z		; lssproto_CharLogout_send
PUBLIC	?lssproto_ProcGet_send@@YAXH@Z			; lssproto_ProcGet_send
PUBLIC	?lssproto_PlayerNumGet_send@@YAXH@Z		; lssproto_PlayerNumGet_send
PUBLIC	?lssproto_Echo_send@@YAXHPAD@Z			; lssproto_Echo_send
PUBLIC	?lssproto_Shutdown_send@@YAXHPADH@Z		; lssproto_Shutdown_send
PUBLIC	?lssproto_TD_send@@YAXHPAD@Z			; lssproto_TD_send
PUBLIC	?lssproto_FM_send@@YAXHPAD@Z			; lssproto_FM_send
PUBLIC	?lssproto_PETST_send@@YAXHHH@Z			; lssproto_PETST_send
PUBLIC	?lssproto_BM_send@@YAXHH@Z			; lssproto_BM_send
PUBLIC	?lssproto_DM_send@@YAXH@Z			; lssproto_DM_send
PUBLIC	?lssproto_MA_send@@YAXHHHH@Z			; lssproto_MA_send
PUBLIC	?lssproto_KTEAM_send@@YAXHH@Z			; lssproto_KTEAM_send
PUBLIC	?lssproto_CHATROOM_send@@YAXHPAD@Z		; lssproto_CHATROOM_send
PUBLIC	?lssproto_RESIST_send@@YAXHPAD@Z		; lssproto_RESIST_send
PUBLIC	?lssproto_ALCHEPLUS_send@@YAXHPAD@Z		; lssproto_ALCHEPLUS_send
PUBLIC	?lssproto_BATTLESKILL_send@@YAXHH@Z		; lssproto_BATTLESKILL_send
PUBLIC	?lssproto_STREET_VENDOR_send@@YAXHPAD@Z		; lssproto_STREET_VENDOR_send
PUBLIC	?lssproto_JOBDAILY_send@@YAXHPAD@Z		; lssproto_JOBDAILY_send
PUBLIC	?lssproto_TEACHER_SYSTEM_send@@YAXHPAD@Z	; lssproto_TEACHER_SYSTEM_send
PUBLIC	?lssproto_PetItemEquip_send@@YAXHHHHHH@Z	; lssproto_PetItemEquip_send
PUBLIC	?lssproto_HostName_send@@YAXH@Z			; lssproto_HostName_send
PUBLIC	?LSSPROTO_203_SEND@@YAXHPAD@Z			; LSSPROTO_203_SEND
PUBLIC	?lssproto_MAMMOTH_START_send@@YAXHH@Z		; lssproto_MAMMOTH_START_send
PUBLIC	?lssproto_PETRANK_send@@YAXHH@Z			; lssproto_PETRANK_send
PUBLIC	?LogToRecvdata@@YAXPAD@Z			; LogToRecvdata
PUBLIC	?LogToSenddata@@YAXPAD@Z			; LogToSenddata
PUBLIC	??_C@_01ICJEACDI@?$DL@				; `string'
PUBLIC	??_C@_04PMOCAHAA@open@				; `string'
PUBLIC	??_C@_08NLHEDILN@ShiQiMax@			; `string'
PUBLIC	??_C@_0CB@FCFKGMLE@dJuTNIuFKWUoFEJanPWTqgAATxHhllt@ ; `string'
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	_gethostname@8:PROC
EXTRN	?JL_?Óðèâ??Ôô?øÐ@@YAXXZ:PROC			; JL_?Óðèâ??Ôô?øÐ
EXTRN	?JL_resetRecv@@YAXXZ:PROC			; JL_resetRecv
EXTRN	?util_SplitMessage@@YAXPAD0@Z:PROC		; util_SplitMessage
EXTRN	?util_DecodeMessage@@YAXPAD0@Z:PROC		; util_DecodeMessage
EXTRN	?util_GetFunctionFromSlice@@YAHPAH0@Z:PROC	; util_GetFunctionFromSlice
EXTRN	?util_SendMesg@@YAXHHPAD@Z:PROC			; util_SendMesg
EXTRN	?util_deint@@YAHHPAH@Z:PROC			; util_deint
EXTRN	?util_mkint@@YAHPADH@Z:PROC			; util_mkint
EXTRN	?util_destring@@YAHHPAD@Z:PROC			; util_destring
EXTRN	?util_mkstring@@YAHPAD0@Z:PROC			; util_mkstring
EXTRN	?lssproto_DENGON_recv@@YAXPADHH@Z:PROC		; lssproto_DENGON_recv
EXTRN	?lssproto_XYD_recv@@YAXHHHH@Z:PROC		; lssproto_XYD_recv
EXTRN	?lssproto_EV_recv@@YAXHHH@Z:PROC		; lssproto_EV_recv
EXTRN	?lssproto_EN_recv@@YAXHHH@Z:PROC		; lssproto_EN_recv
EXTRN	?lssproto_RS_recv@@YAXHPAD@Z:PROC		; lssproto_RS_recv
EXTRN	?lssproto_RD_recv@@YAXHPAD@Z:PROC		; lssproto_RD_recv
EXTRN	?lssproto_B_recv@@YAXHPAD@Z:PROC		; lssproto_B_recv
EXTRN	?lssproto_I_recv@@YAXHPAD@Z:PROC		; lssproto_I_recv
EXTRN	?lssproto_SI_recv@@YAXHHH@Z:PROC		; lssproto_SI_recv
EXTRN	?lssproto_MSG_recv@@YAXHHPADH@Z:PROC		; lssproto_MSG_recv
EXTRN	?lssproto_PME_recv@@YAXHHHHHHHHPAD@Z:PROC	; lssproto_PME_recv
EXTRN	?lssproto_AB_recv@@YAXHPAD@Z:PROC		; lssproto_AB_recv
EXTRN	?lssproto_ABI_recv@@YAXHHPAD@Z:PROC		; lssproto_ABI_recv
EXTRN	?lssproto_TK_recv@@YAXHHPADH@Z:PROC		; lssproto_TK_recv
EXTRN	?lssproto_MC_recv@@YAXHHHHHHHHHPAD@Z:PROC	; lssproto_MC_recv
EXTRN	?lssproto_M_recv@@YAXHHHHHHPAD@Z:PROC		; lssproto_M_recv
EXTRN	?lssproto_C_recv@@YAXHPAD@Z:PROC		; lssproto_C_recv
EXTRN	?lssproto_CA_recv@@YAXHPAD@Z:PROC		; lssproto_CA_recv
EXTRN	?lssproto_CD_recv@@YAXHPAD@Z:PROC		; lssproto_CD_recv
EXTRN	?lssproto_R_recv@@YAXHPAD@Z:PROC		; lssproto_R_recv
EXTRN	?lssproto_S_recv@@YAXHPAD@Z:PROC		; lssproto_S_recv
EXTRN	?lssproto_D_recv@@YAXHHHHPAD@Z:PROC		; lssproto_D_recv
EXTRN	?lssproto_FS_recv@@YAXHH@Z:PROC			; lssproto_FS_recv
EXTRN	?lssproto_HL_recv@@YAXHH@Z:PROC			; lssproto_HL_recv
EXTRN	?lssproto_PR_recv@@YAXHHH@Z:PROC		; lssproto_PR_recv
EXTRN	?lssproto_KS_recv@@YAXHHH@Z:PROC		; lssproto_KS_recv
EXTRN	?lssproto_SPET_recv@@YAXHHH@Z:PROC		; lssproto_SPET_recv
EXTRN	?lssproto_PS_recv@@YAXHHHHH@Z:PROC		; lssproto_PS_recv
EXTRN	?lssproto_SKUP_recv@@YAXHH@Z:PROC		; lssproto_SKUP_recv
EXTRN	?lssproto_WN_recv@@YAXHHHHHPAD@Z:PROC		; lssproto_WN_recv
EXTRN	?lssproto_EF_recv@@YAXHHHPAD@Z:PROC		; lssproto_EF_recv
EXTRN	?lssproto_SE_recv@@YAXHHHHH@Z:PROC		; lssproto_SE_recv
EXTRN	?lssproto_ClientLogin_recv@@YAXHPAD@Z:PROC	; lssproto_ClientLogin_recv
EXTRN	?lssproto_CreateNewChar_recv@@YAXHPAD0@Z:PROC	; lssproto_CreateNewChar_recv
EXTRN	?lssproto_CharDelete_recv@@YAXHPAD0@Z:PROC	; lssproto_CharDelete_recv
EXTRN	?lssproto_CharLogin_recv@@YAXHPAD0@Z:PROC	; lssproto_CharLogin_recv
EXTRN	?lssproto_CharList_recv@@YAXHPAD0@Z:PROC	; lssproto_CharList_recv
EXTRN	?lssproto_CharLogout_recv@@YAXHPAD0@Z:PROC	; lssproto_CharLogout_recv
EXTRN	?lssproto_ProcGet_recv@@YAXHPAD@Z:PROC		; lssproto_ProcGet_recv
EXTRN	?lssproto_PlayerNumGet_recv@@YAXHHH@Z:PROC	; lssproto_PlayerNumGet_recv
EXTRN	?lssproto_Echo_recv@@YAXHPAD@Z:PROC		; lssproto_Echo_recv
EXTRN	?lssproto_NU_recv@@YAXHH@Z:PROC			; lssproto_NU_recv
EXTRN	?lssproto_TD_recv@@YAXHPAD@Z:PROC		; lssproto_TD_recv
EXTRN	?lssproto_FM_recv@@YAXHPAD@Z:PROC		; lssproto_FM_recv
EXTRN	?lssproto_WO_recv@@YAXHH@Z:PROC			; lssproto_WO_recv
EXTRN	?lssproto_IC_recv@@YAXHHH@Z:PROC		; lssproto_IC_recv
EXTRN	?lssproto_NC_recv@@YAXHH@Z:PROC			; lssproto_NC_recv
EXTRN	?lssproto_PETST_recv@@YAXHHH@Z:PROC		; lssproto_PETST_recv
EXTRN	?lssproto_CHATROOM_recv@@YAXHPAD@Z:PROC		; lssproto_CHATROOM_recv
EXTRN	?lssproto_RESIST_recv@@YAXHPAD@Z:PROC		; lssproto_RESIST_recv
EXTRN	?lssproto_ALCHEPLUS_recv@@YAXHPAD@Z:PROC	; lssproto_ALCHEPLUS_recv
EXTRN	?lssproto_BATTLESKILL_recv@@YAXHPAD@Z:PROC	; lssproto_BATTLESKILL_recv
EXTRN	?lssproto_STREET_VENDOR_recv@@YAXHPAD@Z:PROC	; lssproto_STREET_VENDOR_recv
EXTRN	?lssproto_JOBDAILY_recv@@YAXHPAD@Z:PROC		; lssproto_JOBDAILY_recv
EXTRN	?lssproto_TEACHER_SYSTEM_recv@@YAXHPAD@Z:PROC	; lssproto_TEACHER_SYSTEM_recv
EXTRN	?lssproto_S2_recv@@YAXHPAD@Z:PROC		; lssproto_S2_recv
EXTRN	?lssproto_Firework_recv@@YAXHHHH@Z:PROC		; lssproto_Firework_recv
EXTRN	?lssproto_CHAREFFECT_recv@@YAXHPAD@Z:PROC	; lssproto_CHAREFFECT_recv
EXTRN	?lssproto_BATTLEBUTTON_recv@@YAXHHH@Z:PROC	; lssproto_BATTLEBUTTON_recv
EXTRN	?lssproto_MAMMOTH_OPEN_recv@@YAXPAD@Z:PROC	; lssproto_MAMMOTH_OPEN_recv
EXTRN	?getMAC@@YAHPAD@Z:PROC				; getMAC
EXTRN	?getCpuId@@YAHPAD@Z:PROC			; getCpuId
EXTRN	__time64:PROC
EXTRN	?Get@Mammoth@@SAAAV1@XZ:PROC			; Mammoth::Get
EXTRN	?Receive@Mammoth@@QAEXH@Z:PROC			; Mammoth::Receive
EXTRN	?Instance@PetRanking@@SAAAV1@XZ:PROC		; PetRanking::Instance
EXTRN	?Recv@PetRanking@@QAEXPAD@Z:PROC		; PetRanking::Recv
EXTRN	?SkyIslandSetNo@@YAXH@Z:PROC			; SkyIslandSetNo
EXTRN	?lssproto_??ÎÃ?_recv@@YAXPAD@Z:PROC		; lssproto_??ÎÃ?_recv
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	?SliceCount@@3HA:DWORD				; SliceCount
EXTRN	?dwServer@@3KA:DWORD				; dwServer
EXTRN	?SelRoomBtn@@3FA:WORD				; SelRoomBtn
EXTRN	?g_Ü×?Ðï@@3HA:DWORD				; g_Ü×?Ðï
EXTRN	?SendCount@@3HA:DWORD				; SendCount
EXTRN	?g_pMappingRecv@@3PAHA:DWORD			; g_pMappingRecv
EXTRN	?passwd@@3USTR_BUFFER@@A:BYTE			; passwd
EXTRN	___security_cookie:DWORD
;	COMDAT ?old_time@?4??lssproto_CHATROOM_send@@YAXHPAD@Z@4IA
_BSS	SEGMENT
?old_time@?4??lssproto_CHATROOM_send@@YAXHPAD@Z@4IA DD 01H DUP (?) ; `lssproto_CHATROOM_send'::`5'::old_time
_BSS	ENDS
;	COMDAT ??_C@_0CB@FCFKGMLE@dJuTNIuFKWUoFEJanPWTqgAATxHhllt@
CONST	SEGMENT
??_C@_0CB@FCFKGMLE@dJuTNIuFKWUoFEJanPWTqgAATxHhllt@ DB 'dJuTNIuFKWUoFEJan'
	DB	'PWTqgAATxHhlltK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHEDILN@ShiQiMax@
CONST	SEGMENT
??_C@_08NLHEDILN@ShiQiMax@ DB 'ShiQiMax', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open@
CONST	SEGMENT
??_C@_04PMOCAHAA@open@ DB 'open', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL@ DB ';', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?LogToSenddata@@YAXPAD@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?LogToSenddata@@YAXPAD@Z PROC				; LogToSenddata, COMDAT

; 39   : #if _LOG_MSG
; 40   : 	extern char lssproto_readlogfilename[];
; 41   : 	if(lssproto_readlogfilename[0] != '\0'){
; 42   : 		FILE *rfp;
; 43   : 		rfp = fopen(lssproto_readlogfilename, "a+");
; 44   : 		if(rfp){
; 45   : 			fprintf(rfp, "%s: éåºï¼\t%s\n", pc.name, data);
; 46   : 			fclose(rfp);
; 47   : 		}
; 48   : 	}
; 49   : #endif
; 50   : }

  00000	c2 00 00	 ret	 0
?LogToSenddata@@YAXPAD@Z ENDP				; LogToSenddata
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?LogToRecvdata@@YAXPAD@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?LogToRecvdata@@YAXPAD@Z PROC				; LogToRecvdata, COMDAT

; 24   : #ifdef _LOG_MSG
; 25   : 	extern char lssproto_readlogfilename[];
; 26   : 	if(lssproto_readlogfilename[0] != '\0'){
; 27   : 		FILE *rfp;
; 28   : 		rfp = fopen(lssproto_readlogfilename, "a+");
; 29   : 		if(rfp){
; 30   : 			fprintf(rfp, "%s: æ¶å°ï¼\t%s\n", pc.name, data);
; 31   : 			fclose(rfp);
; 32   : 		}
; 33   : 	}
; 34   : #endif
; 35   : }

  00000	c2 00 00	 ret	 0
?LogToRecvdata@@YAXPAD@Z ENDP				; LogToRecvdata
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_PETRANK_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_petid$ = 12						; size = 4
?lssproto_PETRANK_send@@YAXHH@Z PROC			; lssproto_PETRANK_send, COMDAT

; 2634 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2635 : 	char buffer[16384];
; 2636 : 	int iChecksum = 0;
; 2637 : 
; 2638 : 	buffer[0] = '\0';
; 2639 : 	iChecksum += util_mkint(buffer, petid);

  00018	ff 75 0c	 push	 DWORD PTR _petid$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 2640 : 
; 2641 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_P

; 2642 : 	{
; 2643 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_P:

; 2644 : 	}
; 2645 : 	util_mkint(buffer, iChecksum);

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2646 : 	util_SendMesg(fd, LSSPROTO_PETRANK_SEND, buffer);  //0x46  70

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	68 f7 01 00 00	 push	 503			; 000001f7H
  0006b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2647 : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	83 c4 14	 add	 esp, 20			; 00000014H
  00079	33 cd		 xor	 ecx, ebp
  0007b	5e		 pop	 esi
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
?lssproto_PETRANK_send@@YAXHH@Z ENDP			; lssproto_PETRANK_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_MAMMOTH_START_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_counpon_index$ = 12					; size = 4
?lssproto_MAMMOTH_START_send@@YAXHH@Z PROC		; lssproto_MAMMOTH_START_send, COMDAT

; 2618 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2619 : 	char buffer[16384];
; 2620 : 	int iChecksum = 0;
; 2621 : 
; 2622 : 	buffer[0] = '\0';
; 2623 : 	iChecksum += util_mkint(buffer, counpon_index);

  00018	ff 75 0c	 push	 DWORD PTR _counpon_index$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 2624 : 
; 2625 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_M

; 2626 : 	{
; 2627 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_M:

; 2628 : 	}
; 2629 : 	util_mkint(buffer, iChecksum);

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2630 : 	util_SendMesg(fd, LSSPROTO_MAMMOTH_SEND, buffer);  //0x46  70

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	68 f4 01 00 00	 push	 500			; 000001f4H
  0006b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2631 : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	83 c4 14	 add	 esp, 20			; 00000014H
  00079	33 cd		 xor	 ecx, ebp
  0007b	5e		 pop	 esi
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
?lssproto_MAMMOTH_START_send@@YAXHH@Z ENDP		; lssproto_MAMMOTH_START_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?LSSPROTO_203_SEND@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?LSSPROTO_203_SEND@@YAXHPAD@Z PROC			; LSSPROTO_203_SEND, COMDAT

; 2528 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]

; 2529 : 	char buffer[16384];
; 2530 : 	int iChecksum = 0;
; 2531 : 
; 2532 : 	buffer[0] = '\0';
; 2533 : 	iChecksum += util_mkstring(buffer, data);

  0001a	50		 push	 eax
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 2534 : 	util_mkint(buffer, iChecksum);

  0002e	50		 push	 eax
  0002f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2535 : 	util_SendMesg(fd, LSSPROTO_æ¥è¯¢åç¯_SEND, buffer);

  0003b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00041	50		 push	 eax
  00042	68 d4 00 00 00	 push	 212			; 000000d4H
  00047	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0004a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2536 : }

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00052	83 c4 1c	 add	 esp, 28			; 0000001cH
  00055	33 cd		 xor	 ecx, ebp
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?LSSPROTO_203_SEND@@YAXHPAD@Z ENDP			; LSSPROTO_203_SEND
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_HostName_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -16644					; size = 16384
_MyName$ = -260						; size = 255
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_HostName_send@@YAXH@Z PROC			; lssproto_HostName_send, COMDAT

; 2510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 41 00 00	 mov	 eax, 16644		; 00004104H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2511 : 	char buffer[16384];
; 2512 : 	int iChecksum=0,i;
; 2513 : 	buffer[0] = '\0';
; 2514 : 	char MyName[255];
; 2515 : 	gethostname(MyName,255);

  00017	68 ff 00 00 00	 push	 255			; 000000ffH
  0001c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _MyName$[ebp]
  00022	c6 85 fc be ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _gethostname@8

; 2516 : 
; 2517 : 	iChecksum += util_mkstring(buffer,MyName);

  0002f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _MyName$[ebp]
  00035	50		 push	 eax
  00036	8d 85 fc be ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 2518 : 
; 2519 : 	util_mkint(buffer,iChecksum);

  00042	50		 push	 eax
  00043	8d 85 fc be ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2520 : 	util_SendMesg(fd,LSSPROTO_HOSTNAME_SEND,buffer);

  0004f	8d 85 fc be ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00055	50		 push	 eax
  00056	68 81 00 00 00	 push	 129			; 00000081H
  0005b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0005e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2521 : 
; 2522 : }

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	83 c4 1c	 add	 esp, 28			; 0000001cH
  00069	33 cd		 xor	 ecx, ebp
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?lssproto_HostName_send@@YAXH@Z ENDP			; lssproto_HostName_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_PetItemEquip_send@@YAXHHHHHH@Z
_TEXT	SEGMENT
_szBuffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_iGx$ = 12						; size = 4
_iGy$ = 16						; size = 4
_iPetNo$ = 20						; size = 4
_iItemNo$ = 24						; size = 4
_iDestNO$ = 28						; size = 4
?lssproto_PetItemEquip_send@@YAXHHHHHH@Z PROC		; lssproto_PetItemEquip_send, COMDAT

; 2493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2494 : 	char	szBuffer[16384];
; 2495 : 	int		iChecksum=0;
; 2496 : 
; 2497 : 	szBuffer[0] = '\0';
; 2498 : 	iChecksum += util_mkint(szBuffer, iGx);

  00018	ff 75 0c	 push	 DWORD PTR _iGx$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _szBuffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2499 : 	iChecksum += util_mkint(szBuffer, iGy);

  0002e	ff 75 10	 push	 DWORD PTR _iGy$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2500 : 	iChecksum += util_mkint(szBuffer, iPetNo);

  0003f	ff 75 14	 push	 DWORD PTR _iPetNo$[ebp]
  00042	03 f0		 add	 esi, eax
  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2501 : 	iChecksum += util_mkint(szBuffer, iItemNo);

  00050	ff 75 18	 push	 DWORD PTR _iItemNo$[ebp]
  00053	03 f0		 add	 esi, eax
  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2502 : 	iChecksum += util_mkint(szBuffer, iDestNO);

  00061	ff 75 1c	 push	 DWORD PTR _iDestNO$[ebp]
  00064	03 f0		 add	 esi, eax
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00072	03 f0		 add	 esi, eax

; 2503 : 	util_mkint(szBuffer, iChecksum);

  00074	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0007a	56		 push	 esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2504 : 	util_SendMesg(fd, LSSPROTO_PET_ITEM_EQUIP_SEND, szBuffer);

  00081	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00087	50		 push	 eax
  00088	6a 7f		 push	 127			; 0000007fH
  0008a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2505 : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 3c	 add	 esp, 60			; 0000003cH
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?lssproto_PetItemEquip_send@@YAXHHHHHH@Z ENDP		; lssproto_PetItemEquip_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_TEACHER_SYSTEM_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_TEACHER_SYSTEM_send@@YAXHPAD@Z PROC		; lssproto_TEACHER_SYSTEM_send, COMDAT

; 2474 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0001a	56		 push	 esi

; 2475 : 	char buffer[16384];
; 2476 : 	int iChecksum=0;
; 2477 : 
; 2478 : 	buffer[0] = '\0';
; 2479 : 	iChecksum += util_mkstring(buffer,data);

  0001b	50		 push	 eax
  0001c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0002f	83 c4 08	 add	 esp, 8
  00032	8b f0		 mov	 esi, eax

; 2480 : 
; 2481 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00034	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003b	75 16		 jne	 SHORT $LN2@lssproto_T

; 2482 : 	{
; 2483 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00043	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004e	83 c4 08	 add	 esp, 8
  00051	03 f0		 add	 esi, eax
$LN2@lssproto_T:

; 2484 : 	}
; 2485 : 
; 2486 : 	util_mkint(buffer,iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2487 : 	util_SendMesg(fd,LSSPROTO_TEACHER_SYSTEM_SEND,buffer);  //0x7a  122

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 7a		 push	 122			; 0000007aH
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2488 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	33 cd		 xor	 ecx, ebp
  00079	5e		 pop	 esi
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?lssproto_TEACHER_SYSTEM_send@@YAXHPAD@Z ENDP		; lssproto_TEACHER_SYSTEM_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_JOBDAILY_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_JOBDAILY_send@@YAXHPAD@Z PROC			; lssproto_JOBDAILY_send, COMDAT

; 2455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2456 : 	char buffer[16384];
; 2457 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 2458 : 
; 2459 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 2460 : 
; 2461 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	57		 push	 edi
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _data$[ebp]
  0002c	75 16		 jne	 SHORT $LN2@lssproto_J

; 2462 : 	{
; 2463 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00034	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 08	 add	 esp, 8
  00042	8b f0		 mov	 esi, eax
$LN2@lssproto_J:

; 2464 : 	}
; 2465 : 
; 2466 : 	iChecksum += util_mkstring(buffer, data);

  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00051	03 f0		 add	 esi, eax

; 2467 : 	util_mkint(buffer, iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2468 : 	util_SendMesg(fd, LSSPROTO_JOBDAILY_SEND, buffer);  //0x79  121

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 79		 push	 121			; 00000079H
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2469 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 1c	 add	 esp, 28			; 0000001cH
  00077	33 cd		 xor	 ecx, ebp
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?lssproto_JOBDAILY_send@@YAXHPAD@Z ENDP			; lssproto_JOBDAILY_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_STREET_VENDOR_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_STREET_VENDOR_send@@YAXHPAD@Z PROC		; lssproto_STREET_VENDOR_send, COMDAT

; 2436 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2437 : 	char buffer[16384];
; 2438 : 	int iChecksum = 0;

  00018	33 f6		 xor	 esi, esi

; 2439 : 
; 2440 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 2441 : 
; 2442 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	57		 push	 edi
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _data$[ebp]
  0002c	75 16		 jne	 SHORT $LN2@lssproto_S

; 2443 : 	{
; 2444 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00034	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 08	 add	 esp, 8
  00042	8b f0		 mov	 esi, eax
$LN2@lssproto_S:

; 2445 : 	}
; 2446 : 
; 2447 : 	iChecksum += util_mkstring(buffer, data);

  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00051	03 f0		 add	 esi, eax

; 2448 : 	util_mkint(buffer,iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2449 : 	util_SendMesg(fd,LSSPROTO_STREET_VENDOR_SEND,buffer); //0x74 116

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 74		 push	 116			; 00000074H
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2450 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 1c	 add	 esp, 28			; 0000001cH
  00077	33 cd		 xor	 ecx, ebp
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?lssproto_STREET_VENDOR_send@@YAXHPAD@Z ENDP		; lssproto_STREET_VENDOR_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_BATTLESKILL_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_SkillNum$ = 12						; size = 4
?lssproto_BATTLESKILL_send@@YAXHH@Z PROC		; lssproto_BATTLESKILL_send, COMDAT

; 2330 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2331 : 	char buffer[16384];
; 2332 : 	int iChecksum=0;
; 2333 : 	buffer[0] = '\0';
; 2334 : 	iChecksum += util_mkint(buffer, SkillNum);	

  00018	ff 75 0c	 push	 DWORD PTR _SkillNum$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 2335 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_B

; 2336 : 	{
; 2337 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_B:

; 2338 : 	}
; 2339 : 	util_mkint(buffer, iChecksum);	

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2340 : 	util_SendMesg(fd, LSSPROTO_BATTLESKILL_SEND, buffer); //6E 110

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	6a 6e		 push	 110			; 0000006eH
  00068	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2341 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?lssproto_BATTLESKILL_send@@YAXHH@Z ENDP		; lssproto_BATTLESKILL_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_ALCHEPLUS_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_ALCHEPLUS_send@@YAXHPAD@Z PROC		; lssproto_ALCHEPLUS_send, COMDAT

; 2317 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]

; 2318 : 	char buffer[16384];
; 2319 : 	int iChecksum=0;
; 2320 : 
; 2321 : 	buffer[0] = '\0';
; 2322 : 	iChecksum += util_mkstring(buffer, data);

  0001a	50		 push	 eax
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 2323 : 	util_mkint(buffer, iChecksum);

  0002e	50		 push	 eax
  0002f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2324 : 	util_SendMesg(fd, LSSPROTO_ALCHEPLUS_SEND, buffer);

  0003b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00041	50		 push	 eax
  00042	68 87 00 00 00	 push	 135			; 00000087H
  00047	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0004a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2325 : }

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00052	83 c4 1c	 add	 esp, 28			; 0000001cH
  00055	33 cd		 xor	 ecx, ebp
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?lssproto_ALCHEPLUS_send@@YAXHPAD@Z ENDP		; lssproto_ALCHEPLUS_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_RESIST_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_RESIST_send@@YAXHPAD@Z PROC			; lssproto_RESIST_send, COMDAT

; 2304 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]

; 2305 : 	char buffer[16384];
; 2306 : 	int iChecksum=0;
; 2307 : 
; 2308 : 	buffer[0] = '\0';
; 2309 : 	iChecksum += util_mkstring(buffer, data);

  0001a	50		 push	 eax
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 2310 : 	util_mkint(buffer, iChecksum);

  0002e	50		 push	 eax
  0002f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2311 : 	util_SendMesg(fd, LSSPROTO_RESIST_SEND, buffer);

  0003b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00041	50		 push	 eax
  00042	6a 6c		 push	 108			; 0000006cH
  00044	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00047	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2312 : }

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00052	33 cd		 xor	 ecx, ebp
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?lssproto_RESIST_send@@YAXHPAD@Z ENDP			; lssproto_RESIST_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_CHATROOM_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_CHATROOM_send@@YAXHPAD@Z PROC			; lssproto_CHATROOM_send, COMDAT

; 2276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _data$[ebp]

; 2277 : 	char buffer[16384] = {0};

  0001c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	68 00 40 00 00	 push	 16384			; 00004000H
  00027	6a 00		 push	 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _memset
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2278 : 	int iChecksum=0;

  00032	33 f6		 xor	 esi, esi

; 2279 : 
; 2280 : 	// WON FIX	é²æ­¢ä¼ éå¤ªé¢ç¹
; 2281 : 	if( data[0] == 'B' ){

  00034	80 3f 42	 cmp	 BYTE PTR [edi], 66	; 00000042H
  00037	75 34		 jne	 SHORT $LN2@lssproto_C
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h

; 536  :             return _time64(_Time);

  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 __time64
  0003f	83 c4 04	 add	 esp, 4
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp

; 2285 : 		if( now_time < old_time ){

  00042	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?old_time@?4??lssproto_CHATROOM_send@@YAXHPAD@Z@4IA
  00048	73 1b		 jae	 SHORT $LN3@lssproto_C

; 2286 : 			SelRoomBtn = 1;	

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	5f		 pop	 edi
  00050	66 a3 00 00 00
	00		 mov	 WORD PTR ?SelRoomBtn@@3FA, ax ; SelRoomBtn

; 2299 : }

  00056	5e		 pop	 esi
  00057	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005a	33 cd		 xor	 ecx, ebp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN3@lssproto_C:

; 2287 : 			return;
; 2288 : 		}
; 2289 : 		old_time = now_time + 2; // delay 2 ç§

  00065	83 c0 02	 add	 eax, 2
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?old_time@?4??lssproto_CHATROOM_send@@YAXHPAD@Z@4IA, eax
$LN2@lssproto_C:

; 2290 : 	}
; 2291 : 
; 2292 : 	if (g_æå¡å¨ == SERVER_å°æ)

  0006d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00074	75 16		 jne	 SHORT $LN4@lssproto_C

; 2293 : 	{
; 2294 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00076	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007c	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00087	83 c4 08	 add	 esp, 8
  0008a	8b f0		 mov	 esi, eax
$LN4@lssproto_C:

; 2295 : 	}
; 2296 : 	iChecksum += util_mkstring(buffer, data);

  0008c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00092	57		 push	 edi
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00099	03 f0		 add	 esi, eax

; 2297 : 	util_mkint(buffer, iChecksum);

  0009b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a1	56		 push	 esi
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2298 : 	util_SendMesg(fd, LSSPROTO_CHATROOM_SEND, buffer); // 0x70 112

  000a8	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ae	50		 push	 eax
  000af	6a 70		 push	 112			; 00000070H
  000b1	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000b4	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2299 : }

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bc	83 c4 1c	 add	 esp, 28			; 0000001cH
  000bf	33 cd		 xor	 ecx, ebp
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
?lssproto_CHATROOM_send@@YAXHPAD@Z ENDP			; lssproto_CHATROOM_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_KTEAM_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_si$ = 12						; size = 4
?lssproto_KTEAM_send@@YAXHH@Z PROC			; lssproto_KTEAM_send, COMDAT

; 1644 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1645 : 	char buffer[16384];
; 1646 : 	int iChecksum=0;
; 1647 : 	buffer[0] = '\0';
; 1648 : 	iChecksum += util_mkint(buffer, si);

  00017	ff 75 0c	 push	 DWORD PTR _si$[ebp]
  0001a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00020	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1649 : 	util_mkint(buffer, iChecksum);

  0002d	50		 push	 eax
  0002e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1650 : 	util_SendMesg(fd, LSSPROTO_KTEAM_SEND, buffer);

  0003a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00040	50		 push	 eax
  00041	6a 6a		 push	 106			; 0000006aH
  00043	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00046	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1651 : }

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?lssproto_KTEAM_send@@YAXHH@Z ENDP			; lssproto_KTEAM_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_MA_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_nMind$ = 20						; size = 4
?lssproto_MA_send@@YAXHHHH@Z PROC			; lssproto_MA_send, COMDAT

; 2416 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2417 : 	char buffer[16384];
; 2418 : 	int iChecksum=0;
; 2419 : 	buffer[0] = '\0';
; 2420 : 	iChecksum += util_mkint(buffer, nMind);	

  00018	ff 75 14	 push	 DWORD PTR _nMind$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2421 : 	iChecksum += util_mkint(buffer, x);	

  0002e	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	03 f0		 add	 esi, eax

; 2422 : 
; 2423 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00044	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0004b	75 16		 jne	 SHORT $LN2@lssproto_M

; 2424 : 	{
; 2425 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0004d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00053	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0005e	83 c4 08	 add	 esp, 8
  00061	03 f0		 add	 esi, eax
$LN2@lssproto_M:

; 2426 : 	}
; 2427 : 
; 2428 : 	iChecksum += util_mkint(buffer, y);	

  00063	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00072	03 f0		 add	 esi, eax

; 2429 : 	util_mkint(buffer, iChecksum);	

  00074	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	56		 push	 esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2430 : 	util_SendMesg(fd, LSSPROTO_MA_SEND, buffer);  //0x62  98

  00081	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00087	50		 push	 eax
  00088	6a 62		 push	 98			; 00000062H
  0008a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2431 : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 1c	 add	 esp, 28			; 0000001cH
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?lssproto_MA_send@@YAXHHHH@Z ENDP			; lssproto_MA_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_DM_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -4						; size = 2
_fd$ = 8						; size = 4
?lssproto_DM_send@@YAXH@Z PROC				; lssproto_DM_send, COMDAT

; 2386 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2387 : 	char buffer[2];
; 2388 : 	buffer[0] = '\0';
; 2389 : 	util_SendMesg(fd, LSSPROTO_DM_SEND, buffer);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _buffer$[ebp]
  00007	c6 45 fc 00	 mov	 BYTE PTR _buffer$[ebp], 0
  0000b	50		 push	 eax
  0000c	6a 63		 push	 99			; 00000063H
  0000e	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00011	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2390 : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?lssproto_DM_send@@YAXH@Z ENDP				; lssproto_DM_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_BM_send@@YAXHH@Z
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_iindex$ = 12						; size = 4
?lssproto_BM_send@@YAXHH@Z PROC				; lssproto_BM_send, COMDAT

; 2404 : #ifdef _BLACK_MARKET
; 2405 : 	char buffer[16384];
; 2406 : 	int iChecksum=0;
; 2407 : 	buffer[0] = '\0';
; 2408 : 	iChecksum += util_mkint(buffer, iindex);	
; 2409 : 	util_mkint(buffer, iChecksum);	
; 2410 : 	util_SendMesg(fd, LSSPROTO_BM_SEND, buffer);
; 2411 : #endif
; 2412 : }

  00000	c2 00 00	 ret	 0
?lssproto_BM_send@@YAXHH@Z ENDP				; lssproto_BM_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_PETST_send@@YAXHHH@Z
_TEXT	SEGMENT
_buffer$1 = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_nPet$ = 12						; size = 4
_sPet$ = 16						; size = 4
?lssproto_PETST_send@@YAXHHH@Z PROC			; lssproto_PETST_send, COMDAT

; 2363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2364 : 	//cary
; 2365 : 	if( dwServer == GS){

  00017	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?dwServer@@3KA, 3 ; dwServer
  0001e	75 6d		 jne	 SHORT $LN2@lssproto_P

; 2366 : 		char buffer[16384];
; 2367 : 	    int iChecksum=0;

  00020	56		 push	 esi
  00021	33 f6		 xor	 esi, esi

; 2368 : 
; 2369 : 	    buffer[0] = '\0';

  00023	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$1[ebp], 0

; 2370 : 
; 2371 : 		if (g_æå¡å¨ == SERVER_å°æ)

  0002a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00031	75 16		 jne	 SHORT $LN3@lssproto_P

; 2372 : 		{
; 2373 : 			iChecksum += util_mkint(buffer, intå°æåå);

  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00039	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00044	83 c4 08	 add	 esp, 8
  00047	8b f0		 mov	 esi, eax
$LN3@lssproto_P:

; 2374 : 		}
; 2375 : 
; 2376 : 	    iChecksum += util_mkint(buffer, nPet);

  00049	ff 75 0c	 push	 DWORD PTR _nPet$[ebp]
  0004c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2377 : 	    iChecksum += util_mkint(buffer, sPet);	

  00058	ff 75 10	 push	 DWORD PTR _sPet$[ebp]
  0005b	03 f0		 add	 esi, eax
  0005d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00069	03 f0		 add	 esi, eax

; 2378 : 	    util_mkint(buffer, iChecksum);	

  0006b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  00071	56		 push	 esi
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2379 : 		util_SendMesg(fd, LSSPROTO_PETST_SEND, buffer);  //0x60 96

  00078	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  0007e	50		 push	 eax
  0007f	6a 60		 push	 96			; 00000060H
  00081	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00084	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00089	83 c4 24	 add	 esp, 36			; 00000024H
  0008c	5e		 pop	 esi
$LN2@lssproto_P:

; 2380 : 	}
; 2381 : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?lssproto_PETST_send@@YAXHHH@Z ENDP			; lssproto_PETST_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_FM_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_FM_send@@YAXHPAD@Z PROC			; lssproto_FM_send, COMDAT

; 2345 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0001a	56		 push	 esi

; 2346 : 	char buffer[16384];
; 2347 : 	int iChecksum=0;
; 2348 : 
; 2349 : 	buffer[0] = '\0';
; 2350 : 	iChecksum += util_mkstring(buffer, data);

  0001b	50		 push	 eax
  0001c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0002f	83 c4 08	 add	 esp, 8
  00032	8b f0		 mov	 esi, eax

; 2351 : 
; 2352 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00034	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003b	75 16		 jne	 SHORT $LN2@lssproto_F

; 2353 : 	{
; 2354 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00043	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004e	83 c4 08	 add	 esp, 8
  00051	03 f0		 add	 esi, eax
$LN2@lssproto_F:

; 2355 : 	}
; 2356 : 
; 2357 : 	util_mkint(buffer, iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2358 : 	util_SendMesg(fd, LSSPROTO_FM_SEND, buffer);  //0x5e  94

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 5e		 push	 94			; 0000005eH
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2359 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	33 cd		 xor	 ecx, ebp
  00079	5e		 pop	 esi
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?lssproto_FM_send@@YAXHPAD@Z ENDP			; lssproto_FM_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_TD_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_TD_send@@YAXHPAD@Z PROC			; lssproto_TD_send, COMDAT

; 2259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0001a	56		 push	 esi

; 2260 : 	char buffer[16384];
; 2261 : 	int iChecksum=0;
; 2262 : 
; 2263 : 	buffer[0] = '\0';
; 2264 : 	iChecksum += util_mkstring(buffer, data);

  0001b	50		 push	 eax
  0001c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0002f	83 c4 08	 add	 esp, 8
  00032	8b f0		 mov	 esi, eax

; 2265 : 
; 2266 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00034	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003b	75 16		 jne	 SHORT $LN2@lssproto_T

; 2267 : 	{
; 2268 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00043	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004e	83 c4 08	 add	 esp, 8
  00051	03 f0		 add	 esi, eax
$LN2@lssproto_T:

; 2269 : 	}
; 2270 : 
; 2271 : 	util_mkint(buffer, iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2272 : 	util_SendMesg(fd, LSSPROTO_TD_SEND, buffer);  //0x5b  91

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 5b		 push	 91			; 0000005bH
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2273 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	33 cd		 xor	 ecx, ebp
  00079	5e		 pop	 esi
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?lssproto_TD_send@@YAXHPAD@Z ENDP			; lssproto_TD_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_Shutdown_send@@YAXHPADH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_passwd$ = 12						; size = 4
_min$ = 16						; size = 4
?lssproto_Shutdown_send@@YAXHPADH@Z PROC		; lssproto_Shutdown_send, COMDAT

; 2241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2242 : 	char buffer[16384];
; 2243 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 2244 : 
; 2245 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 2246 : 
; 2247 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	57		 push	 edi
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _passwd$[ebp]
  0002c	75 16		 jne	 SHORT $LN2@lssproto_S

; 2248 : 	{
; 2249 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00034	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 08	 add	 esp, 8
  00042	8b f0		 mov	 esi, eax
$LN2@lssproto_S:

; 2250 : 	}
; 2251 : 
; 2252 : 	iChecksum += util_mkstring(buffer, passwd);

  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 2253 : 	iChecksum += util_mkint(buffer, min);

  00051	ff 75 10	 push	 DWORD PTR _min$[ebp]
  00054	03 f0		 add	 esi, eax
  00056	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00062	03 f0		 add	 esi, eax

; 2254 : 	util_mkint(buffer, iChecksum);

  00064	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006a	56		 push	 esi
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2255 : 	util_SendMesg(fd, LSSPROTO_SHUTDOWN_SEND, buffer);  //0x59  89

  00071	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	6a 59		 push	 89			; 00000059H
  0007a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2256 : }

  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	83 c4 24	 add	 esp, 36			; 00000024H
  00088	33 cd		 xor	 ecx, ebp
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?lssproto_Shutdown_send@@YAXHPADH@Z ENDP		; lssproto_Shutdown_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_Echo_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_test$ = 12						; size = 4
?lssproto_Echo_send@@YAXHPAD@Z PROC			; lssproto_Echo_send, COMDAT

; 2224 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2225 : 	char buffer[16384];
; 2226 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 2227 : 
; 2228 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 2229 : 
; 2230 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	57		 push	 edi
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _test$[ebp]
  0002c	75 16		 jne	 SHORT $LN2@lssproto_E

; 2231 : 	{
; 2232 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00034	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 08	 add	 esp, 8
  00042	8b f0		 mov	 esi, eax
$LN2@lssproto_E:

; 2233 : 	}
; 2234 : 
; 2235 : 	iChecksum += util_mkstring(buffer, test);

  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00051	03 f0		 add	 esi, eax

; 2236 : 	util_mkint(buffer, iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2237 : 	util_SendMesg(fd, LSSPROTO_ECHO_SEND, buffer);  //0x57  87

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 57		 push	 87			; 00000057H
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2238 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 1c	 add	 esp, 28			; 0000001cH
  00077	33 cd		 xor	 ecx, ebp
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?lssproto_Echo_send@@YAXHPAD@Z ENDP			; lssproto_Echo_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_PlayerNumGet_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_PlayerNumGet_send@@YAXH@Z PROC		; lssproto_PlayerNumGet_send, COMDAT

; 2214 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2215 : 	char buffer[16384];
; 2216 : 	int iChecksum=0;
; 2217 : 
; 2218 : 	buffer[0] = '\0';
; 2219 : 	util_mkint(buffer, iChecksum);

  00017	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0001d	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00024	6a 00		 push	 0
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2220 : 	util_SendMesg(fd, LSSPROTO_PLAYERNUMGET_SEND, buffer);

  0002c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00032	50		 push	 eax
  00033	6a 55		 push	 85			; 00000055H
  00035	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00038	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2221 : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	83 c4 14	 add	 esp, 20			; 00000014H
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?lssproto_PlayerNumGet_send@@YAXH@Z ENDP		; lssproto_PlayerNumGet_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_ProcGet_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_ProcGet_send@@YAXH@Z PROC			; lssproto_ProcGet_send, COMDAT

; 2204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2205 : 	char buffer[16384];
; 2206 : 	int iChecksum=0;
; 2207 : 
; 2208 : 	buffer[0] = '\0';
; 2209 : 	util_mkint(buffer, iChecksum);

  00017	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0001d	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00024	6a 00		 push	 0
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2210 : 	util_SendMesg(fd, LSSPROTO_PROCGET_SEND, buffer);

  0002c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00032	50		 push	 eax
  00033	6a 53		 push	 83			; 00000053H
  00035	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00038	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2211 : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	83 c4 14	 add	 esp, 20			; 00000014H
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?lssproto_ProcGet_send@@YAXH@Z ENDP			; lssproto_ProcGet_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_CharLogout_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_Flg$ = 12						; size = 4
?lssproto_CharLogout_send@@YAXHH@Z PROC			; lssproto_CharLogout_send, COMDAT

; 2186 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2187 : 	char buffer[16384];
; 2188 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 2189 : 
; 2190 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 2191 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_C

; 2192 : 	{
; 2193 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_C:

; 2194 : 	}
; 2195 : 
; 2196 : #ifdef _CHAR_NEWLOGOUT
; 2197 : 	iChecksum += util_mkint( buffer, Flg);

  00040	ff 75 0c	 push	 DWORD PTR _Flg$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004f	03 f0		 add	 esi, eax

; 2198 : #endif
; 2199 : 	util_mkint(buffer, iChecksum);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	56		 push	 esi
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2200 : 	util_SendMesg(fd, LSSPROTO_CHARLOGOUT_SEND, buffer);  //0x51  81

  0005e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00064	50		 push	 eax
  00065	6a 51		 push	 81			; 00000051H
  00067	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2201 : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 1c	 add	 esp, 28			; 0000001cH
  00075	33 cd		 xor	 ecx, ebp
  00077	5e		 pop	 esi
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?lssproto_CharLogout_send@@YAXHH@Z ENDP			; lssproto_CharLogout_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_CharList_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_CharList_send@@YAXH@Z PROC			; lssproto_CharList_send, COMDAT

; 2163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2164 : 	char buffer[16384];
; 2165 : 	int iChecksum=0;
; 2166 : 
; 2167 : 	buffer[0] = '\0';
; 2168 : 	//if (g_æå¡å¨ == SERVER_å°æ)
; 2169 : 	//{
; 2170 : 	//	util_mkint(buffer, intå°æåå);
; 2171 : 	//}
; 2172 : 	util_mkint(buffer, iChecksum);

  00017	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0001d	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00024	6a 00		 push	 0
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2173 : 	util_SendMesg(fd, LSSPROTO_CHARLIST_SEND, buffer);

  0002c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00032	50		 push	 eax
  00033	6a 4f		 push	 79			; 0000004fH
  00035	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00038	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2174 : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	83 c4 14	 add	 esp, 20			; 00000014H
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?lssproto_CharList_send@@YAXH@Z ENDP			; lssproto_CharList_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_CharLogin_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_charname$ = 12						; size = 4
?lssproto_CharLogin_send@@YAXHPAD@Z PROC		; lssproto_CharLogin_send, COMDAT

; 2153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _charname$[ebp]

; 2154 : 	char buffer[16384];
; 2155 : 	int iChecksum=0;
; 2156 : 	buffer[0] = '\0';
; 2157 : 	iChecksum += util_mkstring(buffer, charname);

  0001a	50		 push	 eax
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 2158 : 	util_mkint(buffer, iChecksum);

  0002e	50		 push	 eax
  0002f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2159 : 	util_SendMesg(fd, LSSPROTO_CHARLOGIN_SEND, buffer); //0x4D 77

  0003b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00041	50		 push	 eax
  00042	6a 4d		 push	 77			; 0000004dH
  00044	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00047	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2160 : }

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00052	33 cd		 xor	 ecx, ebp
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?lssproto_CharLogin_send@@YAXHPAD@Z ENDP		; lssproto_CharLogin_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_CharDelete_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_charname$ = 12						; size = 4
?lssproto_CharDelete_send@@YAXHPAD@Z PROC		; lssproto_CharDelete_send, COMDAT

; 2132 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _charname$[ebp]
  0001a	56		 push	 esi

; 2133 : 	char buffer[16384];
; 2134 : 	int iChecksum=0;
; 2135 : 
; 2136 : 	buffer[0] = '\0';
; 2137 : 	iChecksum += util_mkstring(buffer, charname);

  0001b	50		 push	 eax
  0001c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0002f	8b f0		 mov	 esi, eax

; 2138 : #ifdef _NB_DELCHARTWOPASS
; 2139 : 	iChecksum += util_mkstring(buffer, passwd.buffer);

  00031	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00037	68 00 00 00 00	 push	 OFFSET ?passwd@@3USTR_BUFFER@@A ; passwd
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00042	03 f0		 add	 esi, eax

; 2140 : #endif
; 2141 : 	util_mkint(buffer, iChecksum);

  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	56		 push	 esi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2142 : 
; 2143 : 	passwd.cnt = 0;
; 2144 : 	passwd.cursor=0;
; 2145 : 	ZeroMemory(passwd.buffer,sizeof(passwd.buffer));

  00051	68 04 01 00 00	 push	 260			; 00000104H
  00056	6a 00		 push	 0
  00058	68 00 00 00 00	 push	 OFFSET ?passwd@@3USTR_BUFFER@@A ; passwd
  0005d	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?passwd@@3USTR_BUFFER@@A+263, 0
  00064	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?passwd@@3USTR_BUFFER@@A+265, 0
  0006b	e8 00 00 00 00	 call	 _memset

; 2146 : 
; 2147 : 	util_SendMesg(fd, LSSPROTO_CHARDELETE_SEND, buffer); //0x4b 75

  00070	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00076	50		 push	 eax
  00077	6a 4b		 push	 75			; 0000004bH
  00079	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2148 : }

  00081	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00084	83 c4 30	 add	 esp, 48			; 00000030H
  00087	33 cd		 xor	 ecx, ebp
  00089	5e		 pop	 esi
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?lssproto_CharDelete_send@@YAXHPAD@Z ENDP		; lssproto_CharDelete_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_CreateNewChar_send@@YAXHHPADHHHHHHHHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dataplacenum$ = 12					; size = 4
_charname$ = 16						; size = 4
_imgno$ = 20						; size = 4
_faceimgno$ = 24					; size = 4
_vital$ = 28						; size = 4
_str$ = 32						; size = 4
_tgh$ = 36						; size = 4
_dex$ = 40						; size = 4
_earth$ = 44						; size = 4
_water$ = 48						; size = 4
_fire$ = 52						; size = 4
_wind$ = 56						; size = 4
_hometown$ = 60						; size = 4
?lssproto_CreateNewChar_send@@YAXHHPADHHHHHHHHHHH@Z PROC ; lssproto_CreateNewChar_send, COMDAT

; 2100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	8b 75 10	 mov	 esi, DWORD PTR _charname$[ebp]

; 2101 : 	char buffer[16384];
; 2102 : 	int iChecksum=0;
; 2103 : 
; 2104 : 	buffer[0] = '\0';
; 2105 : 	iChecksum += util_mkint(buffer, dataplacenum);

  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	57		 push	 edi
  00022	ff 75 0c	 push	 DWORD PTR _dataplacenum$[ebp]
  00025	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00032	8b f8		 mov	 edi, eax

; 2106 : 	iChecksum += util_mkstring(buffer, charname);

  00034	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003a	56		 push	 esi
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 2107 : 	iChecksum += util_mkint(buffer, imgno);

  00041	ff 75 14	 push	 DWORD PTR _imgno$[ebp]
  00044	03 f8		 add	 edi, eax
  00046	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2108 : 	iChecksum += util_mkint(buffer, faceimgno);

  00052	ff 75 18	 push	 DWORD PTR _faceimgno$[ebp]
  00055	03 f8		 add	 edi, eax
  00057	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2109 : 	iChecksum += util_mkint(buffer, vital);

  00063	ff 75 1c	 push	 DWORD PTR _vital$[ebp]
  00066	03 f8		 add	 edi, eax
  00068	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2110 : 	iChecksum += util_mkint(buffer, str);

  00074	ff 75 20	 push	 DWORD PTR _str$[ebp]
  00077	03 f8		 add	 edi, eax
  00079	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2111 : 	iChecksum += util_mkint(buffer, tgh);

  00085	ff 75 24	 push	 DWORD PTR _tgh$[ebp]
  00088	03 f8		 add	 edi, eax
  0008a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00096	83 c4 38	 add	 esp, 56			; 00000038H
  00099	03 f8		 add	 edi, eax

; 2112 : 
; 2113 : 	if (g_æå¡å¨ == SERVER_å°æ)

  0009b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  000a2	75 16		 jne	 SHORT $LN2@lssproto_C

; 2114 : 	{
; 2115 : 		iChecksum += util_mkint(buffer, intå°æåå);

  000a4	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000aa	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000b5	83 c4 08	 add	 esp, 8
  000b8	03 f8		 add	 edi, eax
$LN2@lssproto_C:

; 2116 : 	}
; 2117 : 
; 2118 : 	iChecksum += util_mkint(buffer, dex);

  000ba	ff 75 28	 push	 DWORD PTR _dex$[ebp]
  000bd	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2119 : 	iChecksum += util_mkint(buffer, earth);

  000c9	ff 75 2c	 push	 DWORD PTR _earth$[ebp]
  000cc	03 f8		 add	 edi, eax
  000ce	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2120 : 	iChecksum += util_mkint(buffer, water);

  000da	ff 75 30	 push	 DWORD PTR _water$[ebp]
  000dd	03 f8		 add	 edi, eax
  000df	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2121 : 	iChecksum += util_mkint(buffer, fire);

  000eb	ff 75 34	 push	 DWORD PTR _fire$[ebp]
  000ee	03 f8		 add	 edi, eax
  000f0	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2122 : 	iChecksum += util_mkint(buffer, wind);

  000fc	ff 75 38	 push	 DWORD PTR _wind$[ebp]
  000ff	03 f8		 add	 edi, eax
  00101	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2123 : 	iChecksum += util_mkint(buffer, hometown);

  0010d	ff 75 3c	 push	 DWORD PTR _hometown$[ebp]
  00110	03 f8		 add	 edi, eax
  00112	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011e	03 f8		 add	 edi, eax

; 2124 : 	util_mkint(buffer, iChecksum);

  00120	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00126	57		 push	 edi
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2125 : 	util_SendMesg(fd, LSSPROTO_CREATENEWCHAR_SEND, buffer);  //0x49  73

  0012d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00133	50		 push	 eax
  00134	6a 49		 push	 73			; 00000049H
  00136	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00139	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2126 : }

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00141	83 c4 44	 add	 esp, 68			; 00000044H
  00144	33 cd		 xor	 ecx, ebp
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
?lssproto_CreateNewChar_send@@YAXHHPADHHHHHHHHHHH@Z ENDP ; lssproto_CreateNewChar_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_ClientLogin_send@@YAXHPAD0@Z
_TEXT	SEGMENT
_buffer$ = -16516					; size = 16384
_CpuCode$ = -132					; size = 64
_MacCode$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_cdkey$ = 12						; size = 4
_passwd$ = 16						; size = 4
?lssproto_ClientLogin_send@@YAXHPAD0@Z PROC		; lssproto_ClientLogin_send, COMDAT

; 2070 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 84 40 00 00	 mov	 eax, 16516		; 00004084H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2071 : 	extern int* g_pMappingRecv;
; 2072 : 
; 2073 : 	if (g_pMappingRecv)

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMappingRecv@@3PAHA, 0 ; g_pMappingRecv
  0001e	56		 push	 esi
  0001f	8b 75 0c	 mov	 esi, DWORD PTR _cdkey$[ebp]
  00022	57		 push	 edi
  00023	8b 7d 10	 mov	 edi, DWORD PTR _passwd$[ebp]
  00026	74 15		 je	 SHORT $LN2@lssproto_C

; 2074 : 	{
; 2075 : 		JL_è½¬å°å¤æåç»éå();

  00028	e8 00 00 00 00	 call	 ?JL_?Óðèâ??Ôô?øÐ@@YAXXZ	; JL_?Óðèâ??Ôô?øÐ
  0002d	5f		 pop	 edi

; 2097 : }

  0002e	5e		 pop	 esi
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00032	33 cd		 xor	 ecx, ebp
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN2@lssproto_C:

; 2076 : 		return;
; 2077 : 	}
; 2078 : 
; 2079 : 	char buffer[16384];
; 2080 : 	int iChecksum=0;
; 2081 : 	
; 2082 : 	char MacCode[64];
; 2083 : 	char CpuCode[64];
; 2084 : 	getMAC(MacCode);

  0003d	8d 45 bc	 lea	 eax, DWORD PTR _MacCode$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?getMAC@@YAHPAD@Z	; getMAC

; 2085 : 	getCpuId(CpuCode);

  00046	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _CpuCode$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?getCpuId@@YAHPAD@Z	; getCpuId

; 2086 : 
; 2087 : 	buffer[0] = '\0';
; 2088 : 	//extern char PersonalKey[32];
; 2089 : 	iChecksum += util_mkstring(buffer, cdkey);

  00052	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	c6 85 7c bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0005f	56		 push	 esi
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00066	8b f0		 mov	 esi, eax

; 2090 : 	iChecksum += util_mkstring(buffer, passwd);

  00068	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006e	57		 push	 edi
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	03 f0		 add	 esi, eax

; 2091 : 	iChecksum += util_mkstring(buffer, MacCode);

  00077	8d 45 bc	 lea	 eax, DWORD PTR _MacCode$[ebp]
  0007a	50		 push	 eax
  0007b	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00087	03 f0		 add	 esi, eax

; 2092 : 	iChecksum += util_mkstring(buffer, CpuCode);

  00089	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _CpuCode$[ebp]
  0008f	50		 push	 eax
  00090	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0009c	03 f0		 add	 esi, eax

; 2093 : 	iChecksum += util_mkstring(buffer, _æå¡å¨æ è¯);

  0009e	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHEDILN@ShiQiMax@
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000af	03 f0		 add	 esi, eax

; 2094 : 	util_mkint(buffer, iChecksum);

  000b1	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	56		 push	 esi
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2095 : 
; 2096 : 	util_SendMesg(fd, LSSPROTO_CLIENTLOGIN_SEND, buffer);   //0x47  71

  000be	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c4	50		 push	 eax
  000c5	6a 47		 push	 71			; 00000047H
  000c7	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000ca	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2097 : }

  000cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	83 c4 44	 add	 esp, 68			; 00000044H
  000d5	33 cd		 xor	 ecx, ebp
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
?lssproto_ClientLogin_send@@YAXHPAD0@Z ENDP		; lssproto_ClientLogin_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_SP_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dir$ = 20						; size = 4
?lssproto_SP_send@@YAXHHHH@Z PROC			; lssproto_SP_send, COMDAT

; 2048 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2049 : 	char buffer[16384];
; 2050 : 	int iChecksum=0;
; 2051 : 
; 2052 : 	buffer[0] = '\0';
; 2053 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 2054 : 
; 2055 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_S

; 2056 : 	{
; 2057 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_S:

; 2058 : 	}
; 2059 : 
; 2060 : 	iChecksum += util_mkint(buffer, y);

  00052	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2061 : 	iChecksum += util_mkint(buffer, dir);

  00061	ff 75 14	 push	 DWORD PTR _dir$[ebp]
  00064	03 f0		 add	 esi, eax
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00072	03 f0		 add	 esi, eax

; 2062 : 	util_mkint(buffer, iChecksum);

  00074	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	56		 push	 esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2063 : 	util_SendMesg(fd, LSSPROTO_SP_SEND, buffer);  //0x46  70

  00081	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00087	50		 push	 eax
  00088	6a 46		 push	 70			; 00000046H
  0008a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2064 : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 24	 add	 esp, 36			; 00000024H
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?lssproto_SP_send@@YAXHHHH@Z ENDP			; lssproto_SP_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_WN_send@@YAXHHHHHHPAD@Z
_TEXT	SEGMENT
_buffer$ = -60004					; size = 60000
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_seqno$ = 20						; size = 4
_objindex$ = 24						; size = 4
_select$ = 28						; size = 4
_data$ = 32						; size = 4
?lssproto_WN_send@@YAXHHHHHHPAD@Z PROC			; lssproto_WN_send, COMDAT

; 2021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 64 ea 00 00	 mov	 eax, 60004		; 0000ea64H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi

; 2022 : //	char buffer[16384];
; 2023 : 	char buffer[60000];
; 2024 : 	int iChecksum=0;
; 2025 : 
; 2026 : 	buffer[0] = '\0';
; 2027 : 	iChecksum += util_mkint(buffer, x);

  00019	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001c	8b 7d 20	 mov	 edi, DWORD PTR _data$[ebp]
  0001f	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00025	50		 push	 eax
  00026	c6 85 9c 15 ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0002d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2028 : 	iChecksum += util_mkint(buffer, y);

  00032	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00035	8b f0		 mov	 esi, eax
  00037	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2029 : 	iChecksum += util_mkint(buffer, seqno);

  00043	ff 75 14	 push	 DWORD PTR _seqno$[ebp]
  00046	03 f0		 add	 esi, eax
  00048	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00054	83 c4 18	 add	 esp, 24			; 00000018H
  00057	03 f0		 add	 esi, eax

; 2030 : 
; 2031 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00059	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00060	75 16		 jne	 SHORT $LN2@lssproto_W

; 2032 : 	{
; 2033 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00062	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00068	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00073	83 c4 08	 add	 esp, 8
  00076	03 f0		 add	 esi, eax
$LN2@lssproto_W:

; 2034 : 	}
; 2035 : 
; 2036 : 	iChecksum += util_mkint(buffer, objindex);

  00078	ff 75 18	 push	 DWORD PTR _objindex$[ebp]
  0007b	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2037 : 	iChecksum += util_mkint(buffer, select);

  00087	ff 75 1c	 push	 DWORD PTR _select$[ebp]
  0008a	03 f0		 add	 esi, eax
  0008c	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00098	03 f0		 add	 esi, eax

; 2038 : 	//char* data2 = new char[5000];
; 2039 : 	//memset(data2, 0, 5000);
; 2040 : 	//memset(data2, 97, 1000);
; 2041 : 	//iChecksum += util_mkstring(buffer, data2);
; 2042 : 	iChecksum += util_mkstring(buffer, data);

  0009a	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	57		 push	 edi
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000a7	03 f0		 add	 esi, eax

; 2043 : 	util_mkint(buffer, iChecksum);

  000a9	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000af	56		 push	 esi
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2044 : 	util_SendMesg(fd, LSSPROTO_WN_SEND, buffer);  //0x43  67

  000b6	8d 85 9c 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000bc	50		 push	 eax
  000bd	6a 43		 push	 67			; 00000043H
  000bf	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000c2	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2045 : }

  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	83 c4 2c	 add	 esp, 44			; 0000002cH
  000cd	33 cd		 xor	 ecx, ebp
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?lssproto_WN_send@@YAXHHHHHHPAD@Z ENDP			; lssproto_WN_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_KN_send@@YAXHHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_havepetindex$ = 12					; size = 4
_data$ = 16						; size = 4
?lssproto_KN_send@@YAXHHPAD@Z PROC			; lssproto_KN_send, COMDAT

; 2003 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi

; 2004 : 	char buffer[16384];
; 2005 : 	int iChecksum=0;
; 2006 : 
; 2007 : 	buffer[0] = '\0';
; 2008 : 	iChecksum += util_mkint(buffer, havepetindex);

  00019	ff 75 0c	 push	 DWORD PTR _havepetindex$[ebp]
  0001c	8b 7d 10	 mov	 edi, DWORD PTR _data$[ebp]
  0001f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00025	50		 push	 eax
  00026	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0002d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00032	83 c4 08	 add	 esp, 8
  00035	8b f0		 mov	 esi, eax

; 2009 : 
; 2010 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00037	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003e	75 16		 jne	 SHORT $LN2@lssproto_K

; 2011 : 	{
; 2012 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00040	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00046	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00051	83 c4 08	 add	 esp, 8
  00054	03 f0		 add	 esi, eax
$LN2@lssproto_K:

; 2013 : 	}
; 2014 : 
; 2015 : 	iChecksum += util_mkstring(buffer, data);

  00056	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005c	57		 push	 edi
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00063	03 f0		 add	 esi, eax

; 2016 : 	util_mkint(buffer, iChecksum);

  00065	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006b	56		 push	 esi
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2017 : 	util_SendMesg(fd, LSSPROTO_KN_SEND, buffer);  //0x41  65

  00072	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00078	50		 push	 eax
  00079	6a 41		 push	 65			; 00000041H
  0007b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2018 : }

  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	83 c4 1c	 add	 esp, 28			; 0000001cH
  00089	33 cd		 xor	 ecx, ebp
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
?lssproto_KN_send@@YAXHHPAD@Z ENDP			; lssproto_KN_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_SKUP_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_skillid$ = 12						; size = 4
?lssproto_SKUP_send@@YAXHH@Z PROC			; lssproto_SKUP_send, COMDAT

; 1986 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1987 : 	char buffer[16384];
; 1988 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1989 : 
; 1990 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1991 : 
; 1992 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_S

; 1993 : 	{
; 1994 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_S:

; 1995 : 	}
; 1996 : 
; 1997 : 	iChecksum += util_mkint(buffer, skillid);

  00040	ff 75 0c	 push	 DWORD PTR _skillid$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004f	03 f0		 add	 esi, eax

; 1998 : 	util_mkint(buffer, iChecksum);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	56		 push	 esi
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1999 : 	util_SendMesg(fd, LSSPROTO_SKUP_SEND, buffer);//0x40  64

  0005e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00064	50		 push	 eax
  00065	6a 40		 push	 64			; 00000040H
  00067	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2000 : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 1c	 add	 esp, 28			; 0000001cH
  00075	33 cd		 xor	 ecx, ebp
  00077	5e		 pop	 esi
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?lssproto_SKUP_send@@YAXHH@Z ENDP			; lssproto_SKUP_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_FT_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_FT_send@@YAXHPAD@Z PROC			; lssproto_FT_send, COMDAT

; 1969 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1970 : 	char buffer[16384];
; 1971 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1972 : 
; 1973 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1974 : 
; 1975 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	57		 push	 edi
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _data$[ebp]
  0002c	75 16		 jne	 SHORT $LN2@lssproto_F

; 1976 : 	{
; 1977 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00034	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 08	 add	 esp, 8
  00042	8b f0		 mov	 esi, eax
$LN2@lssproto_F:

; 1978 : 	}
; 1979 : 
; 1980 : 	iChecksum += util_mkstring(buffer, data);

  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00051	03 f0		 add	 esi, eax

; 1981 : 	util_mkint(buffer, iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1982 : 	util_SendMesg(fd, LSSPROTO_FT_SEND, buffer);  //0x3e  62

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 3e		 push	 62			; 0000003eH
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1983 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 1c	 add	 esp, 28			; 0000001cH
  00077	33 cd		 xor	 ecx, ebp
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?lssproto_FT_send@@YAXHPAD@Z ENDP			; lssproto_FT_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_DT_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_titleindex$ = 12					; size = 4
?lssproto_DT_send@@YAXHH@Z PROC				; lssproto_DT_send, COMDAT

; 1954 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1955 : 	char buffer[16384];
; 1956 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1957 : 
; 1958 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1959 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_D

; 1960 : 	{
; 1961 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_D:

; 1962 : 	}
; 1963 : 	iChecksum += util_mkint(buffer, titleindex);

  00040	ff 75 0c	 push	 DWORD PTR _titleindex$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004f	03 f0		 add	 esi, eax

; 1964 : 	util_mkint(buffer, iChecksum);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	56		 push	 esi
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1965 : 	util_SendMesg(fd, LSSPROTO_DT_SEND, buffer);  //0x3d  61

  0005e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00064	50		 push	 eax
  00065	6a 3d		 push	 61			; 0000003dH
  00067	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1966 : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 1c	 add	 esp, 28			; 0000001cH
  00075	33 cd		 xor	 ecx, ebp
  00077	5e		 pop	 esi
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?lssproto_DT_send@@YAXHH@Z ENDP				; lssproto_DT_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_ST_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_titleindex$ = 12					; size = 4
?lssproto_ST_send@@YAXHH@Z PROC				; lssproto_ST_send, COMDAT

; 1937 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1938 : 	char buffer[16384];
; 1939 : 	int iChecksum=0;
; 1940 : 
; 1941 : 	buffer[0] = '\0';
; 1942 : 	iChecksum += util_mkint(buffer, titleindex);

  00018	ff 75 0c	 push	 DWORD PTR _titleindex$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1943 : 
; 1944 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_S

; 1945 : 	{
; 1946 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_S:

; 1947 : 	}
; 1948 : 
; 1949 : 	util_mkint(buffer, iChecksum);

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1950 : 	util_SendMesg(fd, LSSPROTO_ST_SEND, buffer); //0x3c 60

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	6a 3c		 push	 60			; 0000003cH
  00068	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1951 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?lssproto_ST_send@@YAXHH@Z ENDP				; lssproto_ST_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_PS_send@@YAXHHHHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_havepetindex$ = 12					; size = 4
_havepetskill$ = 16					; size = 4
_toindex$ = 20						; size = 4
_data$ = 24						; size = 4
?lssproto_PS_send@@YAXHHHHPAD@Z PROC			; lssproto_PS_send, COMDAT

; 1917 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi

; 1918 : 	char buffer[16384];
; 1919 : 	int iChecksum=0;
; 1920 : 
; 1921 : 	buffer[0] = '\0';
; 1922 : 	iChecksum += util_mkint(buffer, havepetindex);

  00019	ff 75 0c	 push	 DWORD PTR _havepetindex$[ebp]
  0001c	8b 7d 18	 mov	 edi, DWORD PTR _data$[ebp]
  0001f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00025	50		 push	 eax
  00026	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0002d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1923 : 	iChecksum += util_mkint(buffer, havepetskill);

  00032	ff 75 10	 push	 DWORD PTR _havepetskill$[ebp]
  00035	8b f0		 mov	 esi, eax
  00037	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	03 f0		 add	 esi, eax

; 1924 : 
; 1925 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00048	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0004f	75 16		 jne	 SHORT $LN2@lssproto_P

; 1926 : 	{
; 1927 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00062	83 c4 08	 add	 esp, 8
  00065	03 f0		 add	 esi, eax
$LN2@lssproto_P:

; 1928 : 	}
; 1929 : 
; 1930 : 	iChecksum += util_mkint(buffer, toindex);

  00067	ff 75 14	 push	 DWORD PTR _toindex$[ebp]
  0006a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00076	03 f0		 add	 esi, eax

; 1931 : 	iChecksum += util_mkstring(buffer, data);

  00078	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007e	57		 push	 edi
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00085	03 f0		 add	 esi, eax

; 1932 : 	util_mkint(buffer, iChecksum);

  00087	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0008d	56		 push	 esi
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1933 : 	util_SendMesg(fd, LSSPROTO_PS_SEND, buffer); //0x3a  58

  00094	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0009a	50		 push	 eax
  0009b	6a 3a		 push	 58			; 0000003aH
  0009d	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000a0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1934 : }

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	83 c4 24	 add	 esp, 36			; 00000024H
  000ab	33 cd		 xor	 ecx, ebp
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?lssproto_PS_send@@YAXHHHHPAD@Z ENDP			; lssproto_PS_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_MU_send@@YAXHHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_array$ = 20						; size = 4
_toindex$ = 24						; size = 4
?lssproto_MU_send@@YAXHHHHH@Z PROC			; lssproto_MU_send, COMDAT

; 1897 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1898 : 	char buffer[16384];
; 1899 : 	int iChecksum=0;
; 1900 : 
; 1901 : 	buffer[0] = '\0';
; 1902 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1903 : 	iChecksum += util_mkint(buffer, y);

  0002e	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	03 f0		 add	 esi, eax

; 1904 : 
; 1905 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00044	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0004b	75 16		 jne	 SHORT $LN2@lssproto_M

; 1906 : 	{
; 1907 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0004d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00053	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0005e	83 c4 08	 add	 esp, 8
  00061	03 f0		 add	 esi, eax
$LN2@lssproto_M:

; 1908 : 	}
; 1909 : 
; 1910 : 	iChecksum += util_mkint(buffer, array);

  00063	ff 75 14	 push	 DWORD PTR _array$[ebp]
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1911 : 	iChecksum += util_mkint(buffer, toindex);

  00072	ff 75 18	 push	 DWORD PTR _toindex$[ebp]
  00075	03 f0		 add	 esi, eax
  00077	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00083	03 f0		 add	 esi, eax

; 1912 : 	util_mkint(buffer, iChecksum);

  00085	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0008b	56		 push	 esi
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1913 : 	util_SendMesg(fd, LSSPROTO_MU_SEND, buffer);  //0x39  57

  00092	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	6a 39		 push	 57			; 00000039H
  0009b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0009e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1914 : }

  000a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a6	83 c4 24	 add	 esp, 36			; 00000024H
  000a9	33 cd		 xor	 ecx, ebp
  000ab	5e		 pop	 esi
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?lssproto_MU_send@@YAXHHHHH@Z ENDP			; lssproto_MU_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_AC_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_actionno$ = 20						; size = 4
?lssproto_AC_send@@YAXHHHH@Z PROC			; lssproto_AC_send, COMDAT

; 1880 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1881 : 	char buffer[16384];
; 1882 : 	int iChecksum=0;
; 1883 : 
; 1884 : 	buffer[0] = '\0';
; 1885 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1886 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_A

; 1887 : 	{
; 1888 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_A:

; 1889 : 	}
; 1890 : 	iChecksum += util_mkint(buffer, y);

  00052	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1891 : 	iChecksum += util_mkint(buffer, actionno);

  00061	ff 75 14	 push	 DWORD PTR _actionno$[ebp]
  00064	03 f0		 add	 esi, eax
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00072	03 f0		 add	 esi, eax

; 1892 : 	util_mkint(buffer, iChecksum);

  00074	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	56		 push	 esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1893 : 	util_SendMesg(fd, LSSPROTO_AC_SEND, buffer);  //0x38  56

  00081	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00087	50		 push	 eax
  00088	6a 38		 push	 56			; 00000038H
  0008a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1894 : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 24	 add	 esp, 36			; 00000024H
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?lssproto_AC_send@@YAXHHHH@Z ENDP			; lssproto_AC_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_SPET_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_standbypet$ = 12					; size = 4
?lssproto_SPET_send@@YAXHH@Z PROC			; lssproto_SPET_send, COMDAT

; 1862 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1863 : 	char buffer[16384];
; 1864 : 	int iChecksum=0;
; 1865 : 
; 1866 : 	buffer[0] = '\0';
; 1867 : 	iChecksum += util_mkint(buffer, standbypet);

  00018	ff 75 0c	 push	 DWORD PTR _standbypet$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1868 : 
; 1869 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_S

; 1870 : 	{
; 1871 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_S:

; 1872 : 	}
; 1873 : 
; 1874 : 	util_mkint(buffer, iChecksum);

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1875 : 	util_SendMesg(fd, LSSPROTO_SPET_SEND, buffer);  //0x72  114

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	6a 72		 push	 114			; 00000072H
  00068	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1876 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?lssproto_SPET_send@@YAXHH@Z ENDP			; lssproto_SPET_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_KS_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_petarray$ = 12						; size = 4
?lssproto_KS_send@@YAXHH@Z PROC				; lssproto_KS_send, COMDAT

; 1844 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1845 : 	char buffer[16384];
; 1846 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1847 : 
; 1848 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1849 : 
; 1850 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_K

; 1851 : 	{
; 1852 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_K:

; 1853 : 	}
; 1854 : 
; 1855 : 	iChecksum += util_mkint(buffer, petarray);

  00040	ff 75 0c	 push	 DWORD PTR _petarray$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004f	03 f0		 add	 esi, eax

; 1856 : 	util_mkint(buffer, iChecksum);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	56		 push	 esi
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1857 : 	util_SendMesg(fd, LSSPROTO_KS_SEND, buffer); //0x36  54

  0005e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00064	50		 push	 eax
  00065	6a 36		 push	 54			; 00000036H
  00067	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1858 : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 1c	 add	 esp, 28			; 0000001cH
  00075	33 cd		 xor	 ecx, ebp
  00077	5e		 pop	 esi
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?lssproto_KS_send@@YAXHH@Z ENDP				; lssproto_KS_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_PR_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_request$ = 20						; size = 4
?lssproto_PR_send@@YAXHHHH@Z PROC			; lssproto_PR_send, COMDAT

; 1825 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1826 : 	char buffer[16384];
; 1827 : 	int iChecksum=0;
; 1828 : 
; 1829 : 	buffer[0] = '\0';
; 1830 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1831 : 	iChecksum += util_mkint(buffer, y);

  0002e	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	03 f0		 add	 esi, eax

; 1832 : 
; 1833 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00044	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0004b	75 16		 jne	 SHORT $LN2@lssproto_P

; 1834 : 	{
; 1835 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0004d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00053	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0005e	83 c4 08	 add	 esp, 8
  00061	03 f0		 add	 esi, eax
$LN2@lssproto_P:

; 1836 : 	}
; 1837 : 
; 1838 : 	iChecksum += util_mkint(buffer, request);

  00063	ff 75 14	 push	 DWORD PTR _request$[ebp]
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00072	03 f0		 add	 esi, eax

; 1839 : 	util_mkint(buffer, iChecksum);

  00074	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	56		 push	 esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1840 : 	util_SendMesg(fd, LSSPROTO_PR_SEND, buffer); //0x34  52

  00081	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00087	50		 push	 eax
  00088	6a 34		 push	 52			; 00000034H
  0008a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1841 : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 1c	 add	 esp, 28			; 0000001cH
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?lssproto_PR_send@@YAXHHHH@Z ENDP			; lssproto_PR_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_HL_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_flg$ = 12						; size = 4
?lssproto_HL_send@@YAXHH@Z PROC				; lssproto_HL_send, COMDAT

; 1808 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1809 : 	char buffer[16384];
; 1810 : 	int iChecksum=0;
; 1811 : 
; 1812 : 	buffer[0] = '\0';
; 1813 : 	iChecksum += util_mkint(buffer, flg);

  00018	ff 75 0c	 push	 DWORD PTR _flg$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1814 : 
; 1815 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_H

; 1816 : 	{
; 1817 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_H:

; 1818 : 	}
; 1819 : 
; 1820 : 	util_mkint(buffer, iChecksum);

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1821 : 	util_SendMesg(fd, LSSPROTO_HL_SEND, buffer); //0x32  50

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	6a 32		 push	 50			; 00000032H
  00068	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1822 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?lssproto_HL_send@@YAXHH@Z ENDP				; lssproto_HL_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_FS_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_flg$ = 12						; size = 4
?lssproto_FS_send@@YAXHH@Z PROC				; lssproto_FS_send, COMDAT

; 1791 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1792 : 	char buffer[16384];
; 1793 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1794 : 
; 1795 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1796 : 
; 1797 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_F

; 1798 : 	{
; 1799 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_F:

; 1800 : 	}
; 1801 : 
; 1802 : 	iChecksum += util_mkint(buffer, flg);

  00040	ff 75 0c	 push	 DWORD PTR _flg$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004f	03 f0		 add	 esi, eax

; 1803 : 	util_mkint(buffer, iChecksum);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	56		 push	 esi
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1804 : 	util_SendMesg(fd, LSSPROTO_FS_SEND, buffer); //0x30  48

  0005e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00064	50		 push	 eax
  00065	6a 30		 push	 48			; 00000030H
  00067	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1805 : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 1c	 add	 esp, 28			; 0000001cH
  00075	33 cd		 xor	 ecx, ebp
  00077	5e		 pop	 esi
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?lssproto_FS_send@@YAXHH@Z ENDP				; lssproto_FS_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_S_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_category$ = 12						; size = 4
?lssproto_S_send@@YAXHPAD@Z PROC			; lssproto_S_send, COMDAT

; 1774 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1775 : 	char buffer[16384];
; 1776 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1777 : 
; 1778 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1779 : 
; 1780 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	57		 push	 edi
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _category$[ebp]
  0002c	75 16		 jne	 SHORT $LN2@lssproto_S

; 1781 : 	{
; 1782 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00034	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 08	 add	 esp, 8
  00042	8b f0		 mov	 esi, eax
$LN2@lssproto_S:

; 1783 : 	}
; 1784 : 
; 1785 : 	iChecksum += util_mkstring(buffer, category);

  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	57		 push	 edi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00051	03 f0		 add	 esi, eax

; 1786 : 	util_mkint(buffer, iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1787 : 	util_SendMesg(fd, LSSPROTO_S_SEND, buffer);  //0x2d  45

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 2d		 push	 45			; 0000002dH
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1788 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 1c	 add	 esp, 28			; 0000001cH
  00077	33 cd		 xor	 ecx, ebp
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?lssproto_S_send@@YAXHPAD@Z ENDP			; lssproto_S_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_C_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
?lssproto_C_send@@YAXHH@Z PROC				; lssproto_C_send, COMDAT

; 1759 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1760 : 	char buffer[16384];
; 1761 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1762 : 
; 1763 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1764 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_C

; 1765 : 	{
; 1766 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_C:

; 1767 : 	}
; 1768 : 	iChecksum += util_mkint(buffer, index);

  00040	ff 75 0c	 push	 DWORD PTR _index$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004f	03 f0		 add	 esi, eax

; 1769 : 	util_mkint(buffer, iChecksum);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	56		 push	 esi
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1770 : 	util_SendMesg(fd, LSSPROTO_C_SEND, buffer); // 0x28  40

  0005e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00064	50		 push	 eax
  00065	6a 28		 push	 40			; 00000028H
  00067	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1771 : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 1c	 add	 esp, 28			; 0000001cH
  00075	33 cd		 xor	 ecx, ebp
  00077	5e		 pop	 esi
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?lssproto_C_send@@YAXHH@Z ENDP				; lssproto_C_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_M_send@@YAXHHHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_fl$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
?lssproto_M_send@@YAXHHHHHH@Z PROC			; lssproto_M_send, COMDAT

; 1738 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1739 : 	char buffer[16384];
; 1740 : 	int iChecksum=0;
; 1741 : 
; 1742 : 	buffer[0] = '\0';
; 1743 : 	iChecksum += util_mkint(buffer, fl);

  00018	ff 75 0c	 push	 DWORD PTR _fl$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1744 : 	iChecksum += util_mkint(buffer, x1);

  0002e	ff 75 10	 push	 DWORD PTR _x1$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1745 : 	iChecksum += util_mkint(buffer, y1);

  0003f	ff 75 14	 push	 DWORD PTR _y1$[ebp]
  00042	03 f0		 add	 esi, eax
  00044	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00050	83 c4 18	 add	 esp, 24			; 00000018H
  00053	03 f0		 add	 esi, eax

; 1746 : 
; 1747 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00055	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0005c	75 16		 jne	 SHORT $LN2@lssproto_M

; 1748 : 	{
; 1749 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0005e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00064	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0006f	83 c4 08	 add	 esp, 8
  00072	03 f0		 add	 esi, eax
$LN2@lssproto_M:

; 1750 : 	}
; 1751 : 
; 1752 : 	iChecksum += util_mkint(buffer, x2);

  00074	ff 75 18	 push	 DWORD PTR _x2$[ebp]
  00077	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1753 : 	iChecksum += util_mkint(buffer, y2);

  00083	ff 75 1c	 push	 DWORD PTR _y2$[ebp]
  00086	03 f0		 add	 esi, eax
  00088	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	03 f0		 add	 esi, eax

; 1754 : 	util_mkint(buffer, iChecksum);

  00096	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0009c	56		 push	 esi
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1755 : 	util_SendMesg(fd, LSSPROTO_M_SEND, buffer); //0x26  38

  000a3	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a9	50		 push	 eax
  000aa	6a 26		 push	 38			; 00000026H
  000ac	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000af	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1756 : }

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	83 c4 24	 add	 esp, 36			; 00000024H
  000ba	33 cd		 xor	 ecx, ebp
  000bc	5e		 pop	 esi
  000bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
?lssproto_M_send@@YAXHHHHHH@Z ENDP			; lssproto_M_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_TK_send@@YAXHHHPADHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_message$ = 20						; size = 4
_color$ = 24						; size = 4
_area$ = 28						; size = 4
?lssproto_TK_send@@YAXHHHPADHH@Z PROC			; lssproto_TK_send, COMDAT

; 1717 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR _message$[ebp]

; 1718 : 	char buffer[16384];
; 1719 : 	int iChecksum=0;
; 1720 : 
; 1721 : 	buffer[0] = '\0';
; 1722 : 	iChecksum += util_mkint(buffer, x);

  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	57		 push	 edi
  00022	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  00025	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1723 : 	iChecksum += util_mkint(buffer, y);

  00032	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00035	8b f8		 mov	 edi, eax
  00037	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00043	03 f8		 add	 edi, eax

; 1724 : 	iChecksum += util_mkstring(buffer, message);

  00045	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004b	56		 push	 esi
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00052	83 c4 18	 add	 esp, 24			; 00000018H
  00055	03 f8		 add	 edi, eax

; 1725 : 
; 1726 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00057	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0005e	75 16		 jne	 SHORT $LN2@lssproto_T

; 1727 : 	{
; 1728 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00071	83 c4 08	 add	 esp, 8
  00074	03 f8		 add	 edi, eax
$LN2@lssproto_T:

; 1729 : 	}
; 1730 : 
; 1731 : 	iChecksum += util_mkint(buffer, color);

  00076	ff 75 18	 push	 DWORD PTR _color$[ebp]
  00079	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1732 : 	iChecksum += util_mkint(buffer, area);

  00085	ff 75 1c	 push	 DWORD PTR _area$[ebp]
  00088	03 f8		 add	 edi, eax
  0008a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00096	03 f8		 add	 edi, eax

; 1733 : 	util_mkint(buffer, iChecksum);

  00098	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0009e	57		 push	 edi
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1734 : 	util_SendMesg(fd, LSSPROTO_TK_SEND, buffer);  //0x23  35

  000a5	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ab	50		 push	 eax
  000ac	6a 23		 push	 35			; 00000023H
  000ae	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000b1	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1735 : }

  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	83 c4 24	 add	 esp, 36			; 00000024H
  000bc	33 cd		 xor	 ecx, ebp
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
?lssproto_TK_send@@YAXHHHPADHH@Z ENDP			; lssproto_TK_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_L_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dir$ = 12						; size = 4
?lssproto_L_send@@YAXHH@Z PROC				; lssproto_L_send, COMDAT

; 1700 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1701 : 	char buffer[16384];
; 1702 : 	int iChecksum=0;
; 1703 : 
; 1704 : 	buffer[0] = '\0';
; 1705 : 	iChecksum += util_mkint(buffer, dir);

  00018	ff 75 0c	 push	 DWORD PTR _dir$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1706 : 
; 1707 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_L

; 1708 : 	{
; 1709 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_L:

; 1710 : 	}
; 1711 : 
; 1712 : 	util_mkint(buffer, iChecksum);

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1713 : 	util_SendMesg(fd, LSSPROTO_L_SEND, buffer); //0x22 34

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	6a 22		 push	 34			; 00000022H
  00068	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1714 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?lssproto_L_send@@YAXHH@Z ENDP				; lssproto_L_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_AAB_send@@YAXHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_AAB_send@@YAXHHH@Z PROC			; lssproto_AAB_send, COMDAT

; 1684 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1685 : 	char buffer[16384];
; 1686 : 	int iChecksum=0;
; 1687 : 
; 1688 : 	buffer[0] = '\0';
; 1689 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1690 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_A

; 1691 : 	{
; 1692 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_A:

; 1693 : 	}
; 1694 : 	iChecksum += util_mkint(buffer, y);

  00052	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00061	03 f0		 add	 esi, eax

; 1695 : 	util_mkint(buffer, iChecksum);

  00063	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00069	56		 push	 esi
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1696 : 	util_SendMesg(fd, LSSPROTO_AAB_SEND, buffer);   //0x21  33

  00070	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00076	50		 push	 eax
  00077	6a 21		 push	 33			; 00000021H
  00079	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1697 : }

  00081	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00084	83 c4 1c	 add	 esp, 28			; 0000001cH
  00087	33 cd		 xor	 ecx, ebp
  00089	5e		 pop	 esi
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?lssproto_AAB_send@@YAXHHH@Z ENDP			; lssproto_AAB_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_DAB_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
?lssproto_DAB_send@@YAXHH@Z PROC			; lssproto_DAB_send, COMDAT

; 1669 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1670 : 	char buffer[16384];
; 1671 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1672 : 
; 1673 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1674 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_D

; 1675 : 	{
; 1676 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_D:

; 1677 : 	}
; 1678 : 	iChecksum += util_mkint(buffer, index);

  00040	ff 75 0c	 push	 DWORD PTR _index$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004f	03 f0		 add	 esi, eax

; 1679 : 	util_mkint(buffer, iChecksum);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	56		 push	 esi
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1680 : 	util_SendMesg(fd, LSSPROTO_DAB_SEND, buffer);  //0x20 32

  0005e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00064	50		 push	 eax
  00065	6a 20		 push	 32			; 00000020H
  00067	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1681 : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 1c	 add	 esp, 28			; 0000001cH
  00075	33 cd		 xor	 ecx, ebp
  00077	5e		 pop	 esi
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?lssproto_DAB_send@@YAXHH@Z ENDP			; lssproto_DAB_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_AB_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_AB_send@@YAXH@Z PROC				; lssproto_AB_send, COMDAT

; 1655 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1656 : 	char buffer[16384];
; 1657 : 	int iChecksum=0;

  00017	33 c0		 xor	 eax, eax

; 1658 : 
; 1659 : 	buffer[0] = '\0';
; 1660 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00019	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00020	88 85 fc bf ff
	ff		 mov	 BYTE PTR _buffer$[ebp], al
  00026	75 14		 jne	 SHORT $LN2@lssproto_A

; 1661 : 	{
; 1662 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00028	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0002e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00039	83 c4 08	 add	 esp, 8
$LN2@lssproto_A:

; 1663 : 	}
; 1664 : 	util_mkint(buffer, iChecksum);

  0003c	50		 push	 eax
  0003d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1665 : 	util_SendMesg(fd, LSSPROTO_AB_SEND, buffer); //1D  29

  00049	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004f	50		 push	 eax
  00050	6a 1d		 push	 29			; 0000001dH
  00052	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00055	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1666 : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
  00060	33 cd		 xor	 ecx, ebp
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?lssproto_AB_send@@YAXH@Z ENDP				; lssproto_AB_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_PMSG_send@@YAXHHHHPADH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
_petindex$ = 16						; size = 4
_itemindex$ = 20					; size = 4
_message$ = 24						; size = 4
_color$ = 28						; size = 4
?lssproto_PMSG_send@@YAXHHHHPADH@Z PROC			; lssproto_PMSG_send, COMDAT

; 1622 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi

; 1623 : 	char buffer[16384];
; 1624 : 	int iChecksum=0;
; 1625 : 
; 1626 : 	buffer[0] = '\0';
; 1627 : 	iChecksum += util_mkint(buffer, index);

  00019	ff 75 0c	 push	 DWORD PTR _index$[ebp]
  0001c	8b 7d 18	 mov	 edi, DWORD PTR _message$[ebp]
  0001f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00025	50		 push	 eax
  00026	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0002d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1628 : 	iChecksum += util_mkint(buffer, petindex);

  00032	ff 75 10	 push	 DWORD PTR _petindex$[ebp]
  00035	8b f0		 mov	 esi, eax
  00037	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1629 : 	iChecksum += util_mkint(buffer, itemindex);

  00043	ff 75 14	 push	 DWORD PTR _itemindex$[ebp]
  00046	03 f0		 add	 esi, eax
  00048	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00054	83 c4 18	 add	 esp, 24			; 00000018H
  00057	03 f0		 add	 esi, eax

; 1630 : 
; 1631 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00059	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00060	75 16		 jne	 SHORT $LN2@lssproto_P

; 1632 : 	{
; 1633 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00062	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00068	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00073	83 c4 08	 add	 esp, 8
  00076	03 f0		 add	 esi, eax
$LN2@lssproto_P:

; 1634 : 	}
; 1635 : 
; 1636 : 	iChecksum += util_mkstring(buffer, message);

  00078	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007e	57		 push	 edi
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 1637 : 	iChecksum += util_mkint(buffer, color);

  00085	ff 75 1c	 push	 DWORD PTR _color$[ebp]
  00088	03 f0		 add	 esi, eax
  0008a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00096	03 f0		 add	 esi, eax

; 1638 : 	util_mkint(buffer, iChecksum);

  00098	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0009e	56		 push	 esi
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1639 : 	util_SendMesg(fd, LSSPROTO_PMSG_SEND, buffer);  //0x1b  27

  000a5	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ab	50		 push	 eax
  000ac	6a 1b		 push	 27			; 0000001bH
  000ae	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000b1	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1640 : }

  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	83 c4 24	 add	 esp, 36			; 00000024H
  000bc	33 cd		 xor	 ecx, ebp
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
?lssproto_PMSG_send@@YAXHHHHPADH@Z ENDP			; lssproto_PMSG_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_MSG_send@@YAXHHPADH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
_message$ = 16						; size = 4
_color$ = 20						; size = 4
?lssproto_MSG_send@@YAXHHPADH@Z PROC			; lssproto_MSG_send, COMDAT

; 1603 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1604 : 	char buffer[16384];
; 1605 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1606 : 
; 1607 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1608 : 
; 1609 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	57		 push	 edi
  00029	8b 7d 10	 mov	 edi, DWORD PTR _message$[ebp]
  0002c	75 16		 jne	 SHORT $LN2@lssproto_M

; 1610 : 	{
; 1611 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00034	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 08	 add	 esp, 8
  00042	8b f0		 mov	 esi, eax
$LN2@lssproto_M:

; 1612 : 	}
; 1613 : 
; 1614 : 	iChecksum += util_mkint(buffer, index);

  00044	ff 75 0c	 push	 DWORD PTR _index$[ebp]
  00047	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00053	03 f0		 add	 esi, eax

; 1615 : 	iChecksum += util_mkstring(buffer, message);

  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005b	57		 push	 edi
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring

; 1616 : 	iChecksum += util_mkint(buffer, color);

  00062	ff 75 14	 push	 DWORD PTR _color$[ebp]
  00065	03 f0		 add	 esi, eax
  00067	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00073	03 f0		 add	 esi, eax

; 1617 : 	util_mkint(buffer, iChecksum);

  00075	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007b	56		 push	 esi
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1618 : 	util_SendMesg(fd, LSSPROTO_MSG_SEND, buffer); //0x19 25

  00082	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00088	50		 push	 eax
  00089	6a 19		 push	 25			; 00000019H
  0008b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1619 : }

  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	83 c4 2c	 add	 esp, 44			; 0000002cH
  00099	33 cd		 xor	 ecx, ebp
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?lssproto_MSG_send@@YAXHHPADH@Z ENDP			; lssproto_MSG_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_MI_send@@YAXHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_fromindex$ = 12					; size = 4
_toindex$ = 16						; size = 4
?lssproto_MI_send@@YAXHHH@Z PROC			; lssproto_MI_send, COMDAT

; 1585 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1586 : 	char buffer[16384];
; 1587 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1588 : 
; 1589 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1590 : 
; 1591 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_M

; 1592 : 	{
; 1593 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_M:

; 1594 : 	}
; 1595 : 
; 1596 : 	iChecksum += util_mkint(buffer, fromindex);

  00040	ff 75 0c	 push	 DWORD PTR _fromindex$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1597 : 	iChecksum += util_mkint(buffer, toindex);

  0004f	ff 75 10	 push	 DWORD PTR _toindex$[ebp]
  00052	03 f0		 add	 esi, eax
  00054	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00060	03 f0		 add	 esi, eax

; 1598 : 	util_mkint(buffer, iChecksum);

  00062	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00068	56		 push	 esi
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1599 : 	util_SendMesg(fd, LSSPROTO_MI_SEND, buffer);  //0x17  23

  0006f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00075	50		 push	 eax
  00076	6a 17		 push	 23			; 00000017H
  00078	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1600 : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	83 c4 24	 add	 esp, 36			; 00000024H
  00086	33 cd		 xor	 ecx, ebp
  00088	5e		 pop	 esi
  00089	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?lssproto_MI_send@@YAXHHH@Z ENDP			; lssproto_MI_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_DP_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_petindex$ = 20						; size = 4
?lssproto_DP_send@@YAXHHHH@Z PROC			; lssproto_DP_send, COMDAT

; 1566 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1567 : 	char buffer[16384];
; 1568 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1569 : 
; 1570 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1571 : 
; 1572 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_D

; 1573 : 	{
; 1574 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_D:

; 1575 : 	}
; 1576 : 
; 1577 : 	iChecksum += util_mkint(buffer, x);

  00040	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1578 : 	iChecksum += util_mkint(buffer, y);

  0004f	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00052	03 f0		 add	 esi, eax
  00054	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1579 : 	iChecksum += util_mkint(buffer, petindex);

  00060	ff 75 14	 push	 DWORD PTR _petindex$[ebp]
  00063	03 f0		 add	 esi, eax
  00065	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00071	03 f0		 add	 esi, eax

; 1580 : 	util_mkint(buffer, iChecksum);

  00073	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	56		 push	 esi
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1581 : 	util_SendMesg(fd, LSSPROTO_DP_SEND, buffer); //0x15  21

  00080	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00086	50		 push	 eax
  00087	6a 15		 push	 21			; 00000015H
  00089	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1582 : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	83 c4 2c	 add	 esp, 44			; 0000002cH
  00097	33 cd		 xor	 ecx, ebp
  00099	5e		 pop	 esi
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
?lssproto_DP_send@@YAXHHHH@Z ENDP			; lssproto_DP_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_DG_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_amount$ = 20						; size = 4
?lssproto_DG_send@@YAXHHHH@Z PROC			; lssproto_DG_send, COMDAT

; 1547 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1548 : 	char buffer[16384];
; 1549 : 	int iChecksum=0;
; 1550 : 
; 1551 : 	buffer[0] = '\0';
; 1552 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1553 : 	iChecksum += util_mkint(buffer, y);

  0002e	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	03 f0		 add	 esi, eax

; 1554 : 
; 1555 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00044	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0004b	75 16		 jne	 SHORT $LN2@lssproto_D

; 1556 : 	{
; 1557 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0004d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00053	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0005e	83 c4 08	 add	 esp, 8
  00061	03 f0		 add	 esi, eax
$LN2@lssproto_D:

; 1558 : 	}
; 1559 : 
; 1560 : 	iChecksum += util_mkint(buffer, amount);

  00063	ff 75 14	 push	 DWORD PTR _amount$[ebp]
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00072	03 f0		 add	 esi, eax

; 1561 : 	util_mkint(buffer, iChecksum);

  00074	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	56		 push	 esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1562 : 	util_SendMesg(fd, LSSPROTO_DG_SEND, buffer);  //0x14  20

  00081	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00087	50		 push	 eax
  00088	6a 14		 push	 20			; 00000014H
  0008a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1563 : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 1c	 add	 esp, 28			; 0000001cH
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?lssproto_DG_send@@YAXHHHH@Z ENDP			; lssproto_DG_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_DI_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_itemindex$ = 20					; size = 4
?lssproto_DI_send@@YAXHHHH@Z PROC			; lssproto_DI_send, COMDAT

; 1528 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1529 : 	char buffer[16384];
; 1530 : 	int iChecksum=0;
; 1531 : 
; 1532 : 	buffer[0] = '\0';
; 1533 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1534 : 
; 1535 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_D

; 1536 : 	{
; 1537 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_D:

; 1538 : 	}
; 1539 : 
; 1540 : 	iChecksum += util_mkint(buffer, y);

  00052	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1541 : 	iChecksum += util_mkint(buffer, itemindex);

  00061	ff 75 14	 push	 DWORD PTR _itemindex$[ebp]
  00064	03 f0		 add	 esi, eax
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00072	03 f0		 add	 esi, eax

; 1542 : 	util_mkint(buffer, iChecksum);

  00074	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	56		 push	 esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1543 : 	util_SendMesg(fd, LSSPROTO_DI_SEND, buffer);  //0x13  19

  00081	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00087	50		 push	 eax
  00088	6a 13		 push	 19			; 00000013H
  0008a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1544 : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 24	 add	 esp, 36			; 00000024H
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?lssproto_DI_send@@YAXHHHH@Z ENDP			; lssproto_DI_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_PI_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dir$ = 20						; size = 4
?lssproto_PI_send@@YAXHHHH@Z PROC			; lssproto_PI_send, COMDAT

; 1509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1510 : 	char buffer[16384];
; 1511 : 	int iChecksum=0;
; 1512 : 
; 1513 : 	buffer[0] = '\0';
; 1514 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1515 : 	iChecksum += util_mkint(buffer, y);

  0002e	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	03 f0		 add	 esi, eax

; 1516 : 
; 1517 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00044	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0004b	75 16		 jne	 SHORT $LN2@lssproto_P

; 1518 : 	{
; 1519 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0004d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00053	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0005e	83 c4 08	 add	 esp, 8
  00061	03 f0		 add	 esi, eax
$LN2@lssproto_P:

; 1520 : 	}
; 1521 : 
; 1522 : 	iChecksum += util_mkint(buffer, dir);

  00063	ff 75 14	 push	 DWORD PTR _dir$[ebp]
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00072	03 f0		 add	 esi, eax

; 1523 : 	util_mkint(buffer, iChecksum);

  00074	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007a	56		 push	 esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1524 : 	util_SendMesg(fd, LSSPROTO_PI_SEND, buffer); //0x12  18

  00081	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00087	50		 push	 eax
  00088	6a 12		 push	 18			; 00000012H
  0008a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1525 : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	83 c4 1c	 add	 esp, 28			; 0000001cH
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?lssproto_PI_send@@YAXHHHH@Z ENDP			; lssproto_PI_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_ID_send@@YAXHHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_haveitemindex$ = 20					; size = 4
_toindex$ = 24						; size = 4
?lssproto_ID_send@@YAXHHHHH@Z PROC			; lssproto_ID_send, COMDAT

; 1491 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1492 : 	char buffer[16384];
; 1493 : 	int iChecksum=0;
; 1494 : 
; 1495 : 	buffer[0] = '\0';
; 1496 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1497 : 	iChecksum += util_mkint(buffer, y);

  0002e	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	03 f0		 add	 esi, eax

; 1498 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00044	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0004b	75 16		 jne	 SHORT $LN2@lssproto_I

; 1499 : 	{
; 1500 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0004d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00053	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0005e	83 c4 08	 add	 esp, 8
  00061	03 f0		 add	 esi, eax
$LN2@lssproto_I:

; 1501 : 	}
; 1502 : 	iChecksum += util_mkint(buffer, haveitemindex);

  00063	ff 75 14	 push	 DWORD PTR _haveitemindex$[ebp]
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1503 : 	iChecksum += util_mkint(buffer, toindex);

  00072	ff 75 18	 push	 DWORD PTR _toindex$[ebp]
  00075	03 f0		 add	 esi, eax
  00077	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00083	03 f0		 add	 esi, eax

; 1504 : 	util_mkint(buffer, iChecksum);

  00085	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0008b	56		 push	 esi
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1505 : 	util_SendMesg(fd, LSSPROTO_ID_SEND, buffer); //0x11 17

  00092	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	6a 11		 push	 17			; 00000011H
  0009b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0009e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1506 : }

  000a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a6	83 c4 24	 add	 esp, 36			; 00000024H
  000a9	33 cd		 xor	 ecx, ebp
  000ab	5e		 pop	 esi
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?lssproto_ID_send@@YAXHHHHH@Z ENDP			; lssproto_ID_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_SKD_send@@YAXHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dir$ = 12						; size = 4
_index$ = 16						; size = 4
?lssproto_SKD_send@@YAXHHH@Z PROC			; lssproto_SKD_send, COMDAT

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1474 : 	char buffer[16384];
; 1475 : 	int iChecksum=0;
; 1476 : 
; 1477 : 	buffer[0] = '\0';
; 1478 : 	iChecksum += util_mkint(buffer, dir);

  00018	ff 75 0c	 push	 DWORD PTR _dir$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1479 : 
; 1480 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_S

; 1481 : 	{
; 1482 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_S:

; 1483 : 	}
; 1484 : 
; 1485 : 	iChecksum += util_mkint(buffer, index);

  00052	ff 75 10	 push	 DWORD PTR _index$[ebp]
  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00061	03 f0		 add	 esi, eax

; 1486 : 	util_mkint(buffer, iChecksum);

  00063	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00069	56		 push	 esi
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1487 : 	util_SendMesg(fd, LSSPROTO_SKD_SEND, buffer);  //0x10  16

  00070	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00076	50		 push	 eax
  00077	6a 10		 push	 16			; 00000010H
  00079	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1488 : }

  00081	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00084	83 c4 1c	 add	 esp, 28			; 0000001cH
  00087	33 cd		 xor	 ecx, ebp
  00089	5e		 pop	 esi
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?lssproto_SKD_send@@YAXHHH@Z ENDP			; lssproto_SKD_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_B_send@@YAXHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_command$ = 12						; size = 4
?lssproto_B_send@@YAXHPAD@Z PROC			; lssproto_B_send, COMDAT

; 1456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _command$[ebp]
  0001a	56		 push	 esi

; 1457 : 	char buffer[16384];
; 1458 : 	int iChecksum=0;
; 1459 : 
; 1460 : 	LogToSenddata( command );
; 1461 : 
; 1462 : 	buffer[0] = '\0';
; 1463 : 	iChecksum += util_mkstring(buffer, command);

  0001b	50		 push	 eax
  0001c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0002f	83 c4 08	 add	 esp, 8
  00032	8b f0		 mov	 esi, eax

; 1464 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00034	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003b	75 16		 jne	 SHORT $LN2@lssproto_B

; 1465 : 	{
; 1466 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00043	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004e	83 c4 08	 add	 esp, 8
  00051	03 f0		 add	 esi, eax
$LN2@lssproto_B:

; 1467 : 	}
; 1468 : 	util_mkint(buffer, iChecksum);

  00053	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1469 : 	util_SendMesg(fd, LSSPROTO_B_SEND, buffer);  //E 14

  00060	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00066	50		 push	 eax
  00067	6a 0e		 push	 14			; 0000000eH
  00069	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1470 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	33 cd		 xor	 ecx, ebp
  00079	5e		 pop	 esi
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?lssproto_B_send@@YAXHPAD@Z ENDP			; lssproto_B_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_LB_send@@YAXHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_LB_send@@YAXHHH@Z PROC			; lssproto_LB_send, COMDAT

; 1438 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1439 : 	char buffer[16384];
; 1440 : 	int iChecksum=0;
; 1441 : 
; 1442 : 	buffer[0] = '\0';
; 1443 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1444 : 
; 1445 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_L

; 1446 : 	{
; 1447 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_L:

; 1448 : 	}
; 1449 : 
; 1450 : 	iChecksum += util_mkint(buffer, y);

  00052	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00061	03 f0		 add	 esi, eax

; 1451 : 	util_mkint(buffer, iChecksum);

  00063	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00069	56		 push	 esi
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1452 : 	util_SendMesg(fd, LSSPROTO_LB_SEND, buffer);  //0xB 11

  00070	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00076	50		 push	 eax
  00077	6a 0b		 push	 11			; 0000000bH
  00079	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1453 : }

  00081	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00084	83 c4 1c	 add	 esp, 28			; 0000001cH
  00087	33 cd		 xor	 ecx, ebp
  00089	5e		 pop	 esi
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?lssproto_LB_send@@YAXHHH@Z ENDP			; lssproto_LB_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_JB_send@@YAXHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_JB_send@@YAXHHH@Z PROC			; lssproto_JB_send, COMDAT

; 1420 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1421 : 	char buffer[16384];
; 1422 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1423 : 
; 1424 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1425 : 
; 1426 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_J

; 1427 : 	{
; 1428 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_J:

; 1429 : 	}
; 1430 : 
; 1431 : 	iChecksum += util_mkint(buffer, x);

  00040	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1432 : 	iChecksum += util_mkint(buffer, y);

  0004f	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00052	03 f0		 add	 esi, eax
  00054	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00060	03 f0		 add	 esi, eax

; 1433 : 	util_mkint(buffer, iChecksum);

  00062	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00068	56		 push	 esi
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1434 : 	util_SendMesg(fd, LSSPROTO_JB_SEND, buffer); //0xA  10

  0006f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00075	50		 push	 eax
  00076	6a 0a		 push	 10			; 0000000aH
  00078	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1435 : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	83 c4 24	 add	 esp, 36			; 00000024H
  00086	33 cd		 xor	 ecx, ebp
  00088	5e		 pop	 esi
  00089	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?lssproto_JB_send@@YAXHHH@Z ENDP			; lssproto_JB_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_BU_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dummy$ = 12						; size = 4
?lssproto_BU_send@@YAXHH@Z PROC				; lssproto_BU_send, COMDAT

; 1405 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1406 : 	char buffer[16384];
; 1407 : 	int iChecksum=0;
; 1408 : 
; 1409 : 	buffer[0] = '\0';
; 1410 : 	iChecksum += util_mkint(buffer, dummy);

  00018	ff 75 0c	 push	 DWORD PTR _dummy$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1411 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_B

; 1412 : 	{
; 1413 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_B:

; 1414 : 	}
; 1415 : 	util_mkint(buffer, iChecksum);

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1416 : 	util_SendMesg(fd, LSSPROTO_BU_SEND, buffer); //9

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	6a 09		 push	 9
  00068	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1417 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?lssproto_BU_send@@YAXHH@Z ENDP				; lssproto_BU_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_EO_send@@YAXHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dummy$ = 12						; size = 4
?lssproto_EO_send@@YAXHH@Z PROC				; lssproto_EO_send, COMDAT

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1389 : 	char buffer[16384];
; 1390 : 	int iChecksum=0;
; 1391 : 
; 1392 : 	buffer[0] = '\0';
; 1393 : 	iChecksum += util_mkint(buffer, dummy);

  00018	ff 75 0c	 push	 DWORD PTR _dummy$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1394 : 
; 1395 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_E

; 1396 : 	{
; 1397 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_E:

; 1398 : 	}
; 1399 : 
; 1400 : 	util_mkint(buffer, iChecksum);

  00052	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1401 : 	util_SendMesg(fd, LSSPROTO_EO_SEND, buffer); //8

  0005f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	6a 08		 push	 8
  00068	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1402 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	33 cd		 xor	 ecx, ebp
  00078	5e		 pop	 esi
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?lssproto_EO_send@@YAXHH@Z ENDP				; lssproto_EO_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_DU_send@@YAXHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_DU_send@@YAXHHH@Z PROC			; lssproto_DU_send, COMDAT

; 1370 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1371 : 	char buffer[16384];
; 1372 : 	int iChecksum=0;

  00018	33 f6		 xor	 esi, esi

; 1373 : 
; 1374 : 	buffer[0] = '\0';

  0001a	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0

; 1375 : 
; 1376 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00021	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  00028	75 16		 jne	 SHORT $LN2@lssproto_D

; 1377 : 	{
; 1378 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0002a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003b	83 c4 08	 add	 esp, 8
  0003e	8b f0		 mov	 esi, eax
$LN2@lssproto_D:

; 1379 : 	}
; 1380 : 
; 1381 : 	iChecksum += util_mkint(buffer, x);

  00040	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  00043	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1382 : 	iChecksum += util_mkint(buffer, y);

  0004f	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00052	03 f0		 add	 esi, eax
  00054	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00060	03 f0		 add	 esi, eax

; 1383 : 	util_mkint(buffer, iChecksum);

  00062	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00068	56		 push	 esi
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1384 : 	util_SendMesg(fd, LSSPROTO_DU_SEND, buffer); //6

  0006f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00075	50		 push	 eax
  00076	6a 06		 push	 6
  00078	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1385 : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	83 c4 24	 add	 esp, 36			; 00000024H
  00086	33 cd		 xor	 ecx, ebp
  00088	5e		 pop	 esi
  00089	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?lssproto_DU_send@@YAXHHH@Z ENDP			; lssproto_DU_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_EN_send@@YAXHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_EN_send@@YAXHHH@Z PROC			; lssproto_EN_send, COMDAT

; 1358 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1359 : 	char buffer[16384];
; 1360 : 	int iChecksum=0;
; 1361 : 
; 1362 : 	buffer[0] = '\0';
; 1363 : 	iChecksum += util_mkint(buffer, x);

  00018	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1364 : 	iChecksum += util_mkint(buffer, y);

  0002e	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003f	03 f0		 add	 esi, eax

; 1365 : 	util_mkint(buffer, iChecksum);

  00041	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00047	56		 push	 esi
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1366 : 	util_SendMesg(fd, LSSPROTO_EN_SEND, buffer);

  0004e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00054	50		 push	 eax
  00055	6a 05		 push	 5
  00057	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0005a	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1367 : }

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00062	83 c4 24	 add	 esp, 36			; 00000024H
  00065	33 cd		 xor	 ecx, ebp
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?lssproto_EN_send@@YAXHHH@Z ENDP			; lssproto_EN_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_EV_send@@YAXHHHHHH@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_event$ = 12						; size = 4
_seqno$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_dir$ = 28						; size = 4
?lssproto_EV_send@@YAXHHHHHH@Z PROC			; lssproto_EV_send, COMDAT

; 1337 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 1338 : 	char buffer[16384];
; 1339 : 	int iChecksum=0;
; 1340 : 
; 1341 : 	buffer[0] = '\0';
; 1342 : 	iChecksum += util_mkint(buffer, event);

  00018	ff 75 0c	 push	 DWORD PTR _event$[ebp]
  0001b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0002e	83 c4 08	 add	 esp, 8
  00031	8b f0		 mov	 esi, eax

; 1343 : 
; 1344 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003a	75 16		 jne	 SHORT $LN2@lssproto_E

; 1345 : 	{
; 1346 : 		iChecksum += util_mkint(buffer, intå°æåå);

  0003c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00042	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0004d	83 c4 08	 add	 esp, 8
  00050	03 f0		 add	 esi, eax
$LN2@lssproto_E:

; 1347 : 	}
; 1348 : 
; 1349 : 	iChecksum += util_mkint(buffer, seqno);

  00052	ff 75 10	 push	 DWORD PTR _seqno$[ebp]
  00055	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1350 : 	iChecksum += util_mkint(buffer, x);

  00061	ff 75 14	 push	 DWORD PTR _x$[ebp]
  00064	03 f0		 add	 esi, eax
  00066	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1351 : 	iChecksum += util_mkint(buffer, y);

  00072	ff 75 18	 push	 DWORD PTR _y$[ebp]
  00075	03 f0		 add	 esi, eax
  00077	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1352 : 	iChecksum += util_mkint(buffer, dir);

  00083	ff 75 1c	 push	 DWORD PTR _dir$[ebp]
  00086	03 f0		 add	 esi, eax
  00088	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	03 f0		 add	 esi, eax

; 1353 : 	util_mkint(buffer, iChecksum);

  00096	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0009c	56		 push	 esi
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1354 : 	util_SendMesg(fd, LSSPROTO_EV_SEND, buffer);  // 3

  000a3	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a9	50		 push	 eax
  000aa	6a 03		 push	 3
  000ac	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000af	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1355 : }

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	83 c4 34	 add	 esp, 52			; 00000034H
  000ba	33 cd		 xor	 ecx, ebp
  000bc	5e		 pop	 esi
  000bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
?lssproto_EV_send@@YAXHHHHHH@Z ENDP			; lssproto_EV_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_W2_send@@YAXHHHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_direction$ = 20					; size = 4
?lssproto_W2_send@@YAXHHHPAD@Z PROC			; lssproto_W2_send, COMDAT

; 1318 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi

; 1319 : 	char buffer[16384];
; 1320 : 	int iChecksum=0;
; 1321 : 
; 1322 : 	buffer[0] = '\0';
; 1323 : 	iChecksum += util_mkint(buffer, x);

  00019	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001c	8b 7d 14	 mov	 edi, DWORD PTR _direction$[ebp]
  0001f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00025	50		 push	 eax
  00026	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0002d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1324 : 	iChecksum += util_mkint(buffer, y);

  00032	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00035	8b f0		 mov	 esi, eax
  00037	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	03 f0		 add	 esi, eax

; 1325 : 
; 1326 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00048	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0004f	75 16		 jne	 SHORT $LN2@lssproto_W

; 1327 : 	{
; 1328 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00051	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00062	83 c4 08	 add	 esp, 8
  00065	03 f0		 add	 esi, eax
$LN2@lssproto_W:

; 1329 : 	}
; 1330 : 
; 1331 : 	iChecksum += util_mkstring(buffer, direction);

  00067	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006d	57		 push	 edi
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00074	03 f0		 add	 esi, eax

; 1332 : 	util_mkint(buffer, iChecksum);

  00076	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007c	56		 push	 esi
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1333 : 	util_SendMesg(fd, LSSPROTO_W2_SEND, buffer);  //1

  00083	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00089	50		 push	 eax
  0008a	6a 01		 push	 1
  0008c	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008f	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1334 : }

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009a	33 cd		 xor	 ecx, ebp
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?lssproto_W2_send@@YAXHHHPAD@Z ENDP			; lssproto_W2_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_W_send@@YAXHHHPAD@Z
_TEXT	SEGMENT
_buffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_direction$ = 20					; size = 4
?lssproto_W_send@@YAXHHHPAD@Z PROC			; lssproto_W_send, COMDAT

; 1296 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 40 00 00	 mov	 eax, 16388		; 00004004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi

; 1297 : 	char buffer[16384];
; 1298 : 	int iChecksum=0;
; 1299 : 
; 1300 : 	buffer[0] = '\0';
; 1301 : 	iChecksum += util_mkint(buffer, x);

  00019	ff 75 0c	 push	 DWORD PTR _x$[ebp]
  0001c	8b 7d 14	 mov	 edi, DWORD PTR _direction$[ebp]
  0001f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00025	50		 push	 eax
  00026	c6 85 fc bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  0002d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00032	83 c4 08	 add	 esp, 8
  00035	8b f0		 mov	 esi, eax

; 1302 : 
; 1303 : 	if (g_æå¡å¨ == SERVER_å°æ)

  00037	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_Ü×?Ðï@@3HA, 1 ; g_Ü×?Ðï
  0003e	75 16		 jne	 SHORT $LN2@lssproto_W

; 1304 : 	{
; 1305 : 		iChecksum += util_mkint(buffer, intå°æåå);

  00040	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00046	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00051	83 c4 08	 add	 esp, 8
  00054	03 f0		 add	 esi, eax
$LN2@lssproto_W:

; 1306 : 	}
; 1307 : 
; 1308 : 	iChecksum += util_mkint(buffer, y);

  00056	ff 75 10	 push	 DWORD PTR _y$[ebp]
  00059	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00065	03 f0		 add	 esi, eax

; 1309 : 	iChecksum += util_mkstring(buffer, direction);

  00067	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006d	57		 push	 edi
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00074	03 f0		 add	 esi, eax

; 1310 : 	util_mkint(buffer, iChecksum);

  00076	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0007c	56		 push	 esi
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1311 : 	util_SendMesg(fd, LSSPROTO_W_SEND, buffer);  // 0

  00083	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00089	50		 push	 eax
  0008a	6a 00		 push	 0
  0008c	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0008f	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1312 : 	// Nuke 0407
; 1313 : 	extern int SendCount;
; 1314 : 	SendCount--;
; 1315 : }

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	83 c4 24	 add	 esp, 36			; 00000024H
  0009a	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?SendCount@@3HA ; SendCount
  000a0	33 cd		 xor	 ecx, ebp
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
?lssproto_W_send@@YAXHHHPAD@Z ENDP			; lssproto_W_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_poolitemcall_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_poolitemcall_send@@YAXH@Z PROC		; lssproto_poolitemcall_send, COMDAT

; 2608 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2609 : 	char buffer[1024 * 64];
; 2610 : 	strcpy(buffer, "");
; 2611 : 	memset(buffer, 0, 1024 * 64);

  00017	68 00 00 01 00	 push	 65536			; 00010000H
  0001c	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset

; 2612 : 
; 2613 : 	util_SendMesg(fd, LSSPROTO_POOLITEMCALL_SEND, buffer);

  0002a	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	50		 push	 eax
  00031	68 c3 01 00 00	 push	 451			; 000001c3H
  00036	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00039	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2614 : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	33 cd		 xor	 ecx, ebp
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?lssproto_poolitemcall_send@@YAXH@Z ENDP		; lssproto_poolitemcall_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_petshopcall_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_petshopcall_send@@YAXH@Z PROC			; lssproto_petshopcall_send, COMDAT

; 2600 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2601 : 	char buffer[1024 * 64];
; 2602 : 	strcpy(buffer, "");
; 2603 : 	memset(buffer, 0, 1024 * 64);

  00017	68 00 00 01 00	 push	 65536			; 00010000H
  0001c	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset

; 2604 : 
; 2605 : 	util_SendMesg(fd, LSSPROTO_PETSHOPCALL_SEND, buffer);

  0002a	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	50		 push	 eax
  00031	68 c2 01 00 00	 push	 450			; 000001c2H
  00036	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00039	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2606 : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	33 cd		 xor	 ecx, ebp
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?lssproto_petshopcall_send@@YAXH@Z ENDP			; lssproto_petshopcall_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_Partyauto_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_Partyauto_send@@YAXH@Z PROC			; lssproto_Partyauto_send, COMDAT

; 2590 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2591 : 	char buffer[1024 * 64];
; 2592 : 	strcpy(buffer, "");
; 2593 : 	memset(buffer, 0, 1024 * 64);

  00017	68 00 00 01 00	 push	 65536			; 00010000H
  0001c	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset

; 2594 : 
; 2595 : 	util_SendMesg(fd, LSSPROTO_PARTYAUTO_SEND, buffer);

  0002a	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	50		 push	 eax
  00031	68 92 01 00 00	 push	 402			; 00000192H
  00036	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00039	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2596 : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	33 cd		 xor	 ecx, ebp
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?lssproto_Partyauto_send@@YAXH@Z ENDP			; lssproto_Partyauto_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_Noenemy_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_Noenemy_send@@YAXH@Z PROC			; lssproto_Noenemy_send, COMDAT

; 2579 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2580 : 	char buffer[1024 * 64];
; 2581 : 	strcpy(buffer, "");
; 2582 : 	memset(buffer, 0, 1024 * 64);

  00017	68 00 00 01 00	 push	 65536			; 00010000H
  0001c	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset

; 2583 : 
; 2584 : 	util_SendMesg(fd, LSSPROTO_NOENEMY_SEND, buffer);

  0002a	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	50		 push	 eax
  00031	68 91 01 00 00	 push	 401			; 00000191H
  00036	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00039	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2585 : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	33 cd		 xor	 ecx, ebp
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?lssproto_Noenemy_send@@YAXH@Z ENDP			; lssproto_Noenemy_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_Expup_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_Expup_send@@YAXH@Z PROC			; lssproto_Expup_send, COMDAT

; 2568 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2569 : 	char buffer[1024 * 64];
; 2570 : 	strcpy(buffer, "");
; 2571 : 	memset(buffer, 0, 1024 * 64);

  00017	68 00 00 01 00	 push	 65536			; 00010000H
  0001c	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset

; 2572 : 
; 2573 : 	util_SendMesg(fd, LSSPROTO_EXPUP_SEND, buffer);

  0002a	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00030	50		 push	 eax
  00031	68 90 01 00 00	 push	 400			; 00000190H
  00036	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00039	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2574 : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	33 cd		 xor	 ecx, ebp
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?lssproto_Expup_send@@YAXH@Z ENDP			; lssproto_Expup_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_Gmset_send@@YAXHHPAD@Z
_TEXT	SEGMENT
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
_data$ = 16						; size = 4
?lssproto_Gmset_send@@YAXHHPAD@Z PROC			; lssproto_Gmset_send, COMDAT

; 2553 : void lssproto_Gmset_send(int fd,int index,char* data){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 10	 mov	 edi, DWORD PTR _data$[ebp]

; 2554 : 	char buffer[1024 * 64];
; 2555 : 	int checksum = 0;
; 2556 : 	strcpy(buffer,"");
; 2557 : 	memset(buffer, 0, 1024*64);

  0001c	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00022	68 00 00 01 00	 push	 65536			; 00010000H
  00027	6a 00		 push	 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _memset

; 2558 : 	checksum += util_mkint(buffer,index);

  0002f	ff 75 0c	 push	 DWORD PTR _index$[ebp]
  00032	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0003e	8b f0		 mov	 esi, eax

; 2559 : 	checksum += util_mkstring(buffer,data);//çæ¬å

  00040	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00046	57		 push	 edi
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0004d	03 f0		 add	 esi, eax

; 2560 : 	checksum += util_mkstring(buffer,"dJuTNIuFKWUoFEJanPWTqgAATxHhlltK");//å¯é¥

  0004f	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FCFKGMLE@dJuTNIuFKWUoFEJanPWTqgAATxHhllt@
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00060	03 f0		 add	 esi, eax

; 2561 : 	util_mkint(buffer,checksum);

  00062	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00068	56		 push	 esi
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2562 : 	util_SendMesg(fd, LSSPROTO_GMSET_SEND, buffer);

  0006f	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00075	50		 push	 eax
  00076	68 2d 01 00 00	 push	 301			; 0000012dH
  0007b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0007e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2563 : }

  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	83 c4 38	 add	 esp, 56			; 00000038H
  00089	33 cd		 xor	 ecx, ebp
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
?lssproto_Gmset_send@@YAXHHPAD@Z ENDP			; lssproto_Gmset_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_GetInfo_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -16516					; size = 16384
_CpuCode$ = -132					; size = 64
_MacCode$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_GetInfo_send@@YAXH@Z PROC			; lssproto_GetInfo_send, COMDAT

; 1278 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 84 40 00 00	 mov	 eax, 16516		; 00004084H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1279 : 	char buffer[16384];
; 1280 : 	int iChecksum=0;
; 1281 : 
; 1282 : 	buffer[0] = '\0';
; 1283 : 
; 1284 : 	char MacCode[64];
; 1285 : 	char CpuCode[64];
; 1286 : 	getMAC(MacCode);

  00017	8d 45 bc	 lea	 eax, DWORD PTR _MacCode$[ebp]
  0001a	c6 85 7c bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00021	56		 push	 esi
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?getMAC@@YAHPAD@Z	; getMAC

; 1287 : 	getCpuId(CpuCode);

  00028	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _CpuCode$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?getCpuId@@YAHPAD@Z	; getCpuId

; 1288 : 	iChecksum += util_mkstring(buffer, MacCode);

  00034	8d 45 bc	 lea	 eax, DWORD PTR _MacCode$[ebp]
  00037	50		 push	 eax
  00038	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00044	8b f0		 mov	 esi, eax

; 1289 : 	iChecksum += util_mkstring(buffer, CpuCode);

  00046	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _CpuCode$[ebp]
  0004c	50		 push	 eax
  0004d	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00059	03 f0		 add	 esi, eax

; 1290 : 	util_mkint(buffer, iChecksum);

  0005b	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00061	56		 push	 esi
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 1291 : 	util_SendMesg(fd, LSSPROTO_GETINFO_SEND, buffer);

  00068	8d 85 7c bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0006e	50		 push	 eax
  0006f	68 d2 00 00 00	 push	 210			; 000000d2H
  00074	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00077	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 1292 : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	83 c4 2c	 add	 esp, 44			; 0000002cH
  00082	33 cd		 xor	 ecx, ebp
  00084	5e		 pop	 esi
  00085	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
?lssproto_GetInfo_send@@YAXH@Z ENDP			; lssproto_GetInfo_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?lssproto_SaMenu_send@@YAXHHHH@Z
_TEXT	SEGMENT
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index1$ = 12						; size = 4
_index2$ = 16						; size = 4
_index3$ = 20						; size = 4
?lssproto_SaMenu_send@@YAXHHHH@Z PROC			; lssproto_SaMenu_send, COMDAT

; 2539 : void lssproto_SaMenu_send(int fd, int index1,int index2,int index3){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2540 : 	char buffer[1024 * 64];
; 2541 : 	int checksum = 0;
; 2542 : 	strcpy(buffer,"");
; 2543 : 
; 2544 : 	checksum += util_mkint(buffer,index1);

  00018	ff 75 0c	 push	 DWORD PTR _index1$[ebp]
  0001b	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00021	c6 85 fc ff fe
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2545 : 	checksum += util_mkint(buffer,index2);

  0002e	ff 75 10	 push	 DWORD PTR _index2$[ebp]
  00031	8b f0		 mov	 esi, eax
  00033	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2546 : 	checksum += util_mkint(buffer,index3);

  0003f	ff 75 14	 push	 DWORD PTR _index3$[ebp]
  00042	03 f0		 add	 esi, eax
  00044	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00050	03 f0		 add	 esi, eax

; 2547 : 	util_mkint(buffer,checksum);

  00052	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00058	56		 push	 esi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint

; 2548 : 	util_SendMesg(fd, LSSPROTO_SAMENU_SEND, buffer);

  0005f	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00065	50		 push	 eax
  00066	68 ca 00 00 00	 push	 202			; 000000caH
  0006b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0006e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg

; 2549 : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	83 c4 2c	 add	 esp, 44			; 0000002cH
  00079	33 cd		 xor	 ecx, ebp
  0007b	5e		 pop	 esi
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
?lssproto_SaMenu_send@@YAXHHHH@Z ENDP			; lssproto_SaMenu_send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\NewProto\protocol.cpp
;	COMDAT ?SaDispatchMessage@@YAHHPAD@Z
_TEXT	SEGMENT
_fieldcount$ = -98352					; size = 4
_fl$1 = -98348						; size = 4
_y2$2 = -98348						; size = 4
_y$3 = -98348						; size = 4
_fl$4 = -98344						; size = 4
_dir$5 = -98344						; size = 4
_dir$6 = -98344						; size = 4
_iCharaindex$7 = -98340					; size = 4
_x$8 = -98340						; size = 4
_windowtype$9 = -98340					; size = 4
_result$10 = -98340					; size = 4
_x1$11 = -98340						; size = 4
_tilesum$12 = -98340					; size = 4
_x$13 = -98340						; size = 4
_x2$14 = -98336						; size = 4
_no$15 = -98336						; size = 4
_color$16 = -98336					; size = 4
_toindex$17 = -98336					; size = 4
_field$18 = -98336					; size = 4
_result$19 = -98336					; size = 4
_x$20 = -98336						; size = 4
_y1$21 = -98332						; size = 4
_flg$22 = -98332					; size = 4
_aindex$23 = -98332					; size = 4
_fromindex$24 = -98332					; size = 4
_result$25 = -98332					; size = 4
_seqno$26 = -98332					; size = 4
_y$27 = -98332						; size = 4
_iType$28 = -98328					; size = 4
_y$29 = -98328						; size = 4
_buttontype$30 = -98328					; size = 4
_havepetindex$31 = -98328				; size = 4
_category$32 = -98328					; size = 4
_y1$33 = -98328						; size = 4
_objsum$34 = -98328					; size = 4
_index$35 = -98328					; size = 4
_graphicsno$36 = -98328					; size = 4
_coloer$ = -98324					; size = 4
_iActionNum$37 = -98324					; size = 4
_help$38 = -98324					; size = 4
_x$39 = -98324						; size = 4
_logincount$40 = -98324					; size = 4
_senumber$41 = -98324					; size = 4
_effect$42 = -98324					; size = 4
_seqno$43 = -98324					; size = 4
_havepetskill$44 = -98324				; size = 4
_petarray$45 = -98324					; size = 4
_standbypet$46 = -98324					; size = 4
_petarray$47 = -98324					; size = 4
_request$48 = -98324					; size = 4
_dx$49 = -98324						; size = 4
_x2$50 = -98324						; size = 4
_eventsum$51 = -98324					; size = 4
_color$52 = -98324					; size = 4
_num$53 = -98324					; size = 4
_objindex$54 = -98324					; size = 4
_prizeindex$ = -98320					; size = 4
_num$ = -98320						; size = 4
_hostnametamp$55 = -98320				; size = 4
_iChecksumrecv$56 = -98320				; size = 4
_effect$57 = -98320					; size = 4
_escp$58 = -98320					; size = 4
_flg$59 = -98320					; size = 4
_y$60 = -98320						; size = 4
_AddCount$61 = -98320					; size = 4
_player$62 = -98320					; size = 4
_sw$63 = -98320						; size = 4
_level$64 = -98320					; size = 4
_objindex$65 = -98320					; size = 4
_point$66 = -98320					; size = 4
_toindex$67 = -98320					; size = 4
_result$68 = -98320					; size = 4
_result$69 = -98320					; size = 4
_result$70 = -98320					; size = 4
_result$71 = -98320					; size = 4
_flg$72 = -98320					; size = 4
_flg$73 = -98320					; size = 4
_dy$74 = -98320						; size = 4
_y2$75 = -98320						; size = 4
_x1$76 = -98320						; size = 4
_func$ = -98316						; size = 4
_iChecksumrecv$ = -98312				; size = 4
_data$ = -98308						; size = 65536
_data$ = -98308						; size = 65536
_data$77 = -49156					; size = 16384
_data$78 = -49156					; size = 16384
_data$79 = -49156					; size = 16384
_data$80 = -49156					; size = 16384
_data$81 = -49156					; size = 16384
_data$82 = -49156					; size = 16384
_data$83 = -49156					; size = 16384
_data$84 = -49156					; size = 16384
_data$85 = -49156					; size = 16384
_data$86 = -49156					; size = 16384
_data$87 = -49156					; size = 16384
_data$88 = -49156					; size = 16384
_test$89 = -49156					; size = 16384
_data$90 = -49156					; size = 16384
_data$91 = -49156					; size = 16384
_data$92 = -49156					; size = 16384
_data$93 = -49156					; size = 16384
_data$94 = -49156					; size = 16384
_result$95 = -49156					; size = 16384
_raw$ = -32772						; size = 16384
_result$96 = -16388					; size = 16384
_result$97 = -16388					; size = 16384
_result$98 = -16388					; size = 16384
_result$99 = -16388					; size = 16384
_data$100 = -16388					; size = 16384
_result$101 = -16388					; size = 16384
_option$102 = -16388					; size = 16384
_data$103 = -16388					; size = 16384
_data$104 = -16388					; size = 16384
_data$105 = -16388					; size = 16384
_data$106 = -16388					; size = 16384
_data$107 = -16388					; size = 16384
_data$108 = -16388					; size = 16384
_data$109 = -16388					; size = 16384
_data$110 = -16388					; size = 16384
_data$111 = -16388					; size = 16384
_message$112 = -16388					; size = 16384
_data$113 = -16388					; size = 16384
_data$114 = -16388					; size = 16384
_cdata$115 = -16388					; size = 16384
_text$116 = -16388					; size = 16384
_data$117 = -16388					; size = 16384
_command$118 = -16388					; size = 16384
_data$119 = -16388					; size = 16384
_data$120 = -16388					; size = 16384
_data$ = -516						; size = 512
_data$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_encoded$ = 12						; size = 4
?SaDispatchMessage@@YAHHPAD@Z PROC			; SaDispatchMessage, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 30 80 01 00	 mov	 eax, 98352		; 00018030H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _encoded$[ebp]
  0001a	56		 push	 esi

; 54   : 	int		func,fieldcount;
; 55   : 	int		iChecksum = 0, iChecksumrecv;
; 56   : 	char	raw[16384];
; 57   : 
; 58   : 	util_DecodeMessage(raw,encoded);

  0001b	50		 push	 eax
  0001c	8d 85 fc 7f ff
	ff		 lea	 eax, DWORD PTR _raw$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?util_DecodeMessage@@YAXPAD0@Z ; util_DecodeMessage

; 59   : #ifdef _LOG_MSG
; 60   : 	FILE *fp = fopen( "recvtime.txt", "a+" );
; 61   : 	if( fp ) fprintf( fp, "%u RECV %d  %s\n", TimeGetTime(), strlen(raw), raw);
; 62   : 	if( fp ) fclose( fp );
; 63   : #endif	
; 64   : 
; 65   : 	util_SplitMessage(raw,SEPARATOR);

  00028	8d 85 fc 7f ff
	ff		 lea	 eax, DWORD PTR _raw$[ebp]
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_01ICJEACDI@?$DL@
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?util_SplitMessage@@YAXPAD0@Z ; util_SplitMessage

; 66   : 	if (util_GetFunctionFromSlice(&func, &fieldcount)){

  00039	8d 85 d0 7f fe
	ff		 lea	 eax, DWORD PTR _fieldcount$[ebp]
  0003f	50		 push	 eax
  00040	8d 85 f4 7f fe
	ff		 lea	 eax, DWORD PTR _func$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?util_GetFunctionFromSlice@@YAHPAH0@Z ; util_GetFunctionFromSlice
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 10 18 00
	00		 je	 $LN2@SaDispatch

; 67   : 
; 68   : #ifdef _LOG_MSG
; 69   : 		FILE *fp=fopen("recvtime.txt","a+");
; 70   : 		if( fp ) fprintf( fp, "%u DISPATCH  func: %d\n", TimeGetTime(), func );
; 71   : 		if( fp ) fclose( fp );
; 72   : #endif		
; 73   : 
; 74   : 		//JL 2016.8.23
; 75   : 		JL_resetRecv();

  00057	e8 00 00 00 00	 call	 ?JL_resetRecv@@YAXXZ	; JL_resetRecv

; 76   : 
; 77   : 	if (func==LSSPROTO_XYD_RECV) {

  0005c	8b 85 f4 7f fe
	ff		 mov	 eax, DWORD PTR _func$[ebp]
  00062	83 f8 02	 cmp	 eax, 2
  00065	0f 85 89 00 00
	00		 jne	 $LN3@SaDispatch

; 78   : 		int x;
; 79   : 		int y;
; 80   : 		int dir;
; 81   : 
; 82   : 		iChecksum += util_deint(2, &x);

  0006b	8d 85 e0 7f fe
	ff		 lea	 eax, DWORD PTR _x$20[ebp]
  00071	50		 push	 eax
  00072	6a 02		 push	 2
  00074	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00079	8b f0		 mov	 esi, eax

; 83   : 		iChecksum += util_deint(3, &y);

  0007b	8d 85 e4 7f fe
	ff		 lea	 eax, DWORD PTR _y$27[ebp]
  00081	50		 push	 eax
  00082	6a 03		 push	 3
  00084	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00089	03 f0		 add	 esi, eax

; 84   : 		iChecksum += util_deint(4, &dir);

  0008b	8d 85 d8 7f fe
	ff		 lea	 eax, DWORD PTR _dir$6[ebp]
  00091	50		 push	 eax
  00092	6a 04		 push	 4
  00094	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00099	03 f0		 add	 esi, eax

; 85   : 		util_deint(5, &iChecksumrecv);

  0009b	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  000a1	50		 push	 eax
  000a2	6a 05		 push	 5
  000a4	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  000a9	83 c4 20	 add	 esp, 32			; 00000020H

; 86   : 		if (iChecksum != iChecksumrecv) {

  000ac	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  000b2	0f 85 a5 17 00
	00		 jne	 $LN195@SaDispatch

; 87   : 			SliceCount=0;
; 88   : 			return 0;
; 89   : 		}
; 90   : 		lssproto_XYD_recv(fd, x, y, dir);

  000b8	ff b5 d8 7f fe
	ff		 push	 DWORD PTR _dir$6[ebp]
  000be	ff b5 e4 7f fe
	ff		 push	 DWORD PTR _y$27[ebp]
  000c4	ff b5 e0 7f fe
	ff		 push	 DWORD PTR _x$20[ebp]
  000ca	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  000cd	e8 00 00 00 00	 call	 ?lssproto_XYD_recv@@YAXHHHH@Z ; lssproto_XYD_recv
$LN200@SaDispatch:

; 1251 : 	}
; 1252 : 
; 1253 : #ifdef _PK2007
; 1254 : 	else if( func == LSSPROTO_PKLIST_RECV )
; 1255 : 	{
; 1256 : 		int count;
; 1257 : 		char data[16384];
; 1258 : 		iChecksum += util_deint(2, &count);
; 1259 : 		iChecksum += util_destring(3, data);
; 1260 : 		util_deint(4, &iChecksumrecv);
; 1261 : 		if (iChecksum!=iChecksumrecv) {
; 1262 : 			SliceCount=0;
; 1263 : 			return 0;
; 1264 : 		}
; 1265 : 		lssproto_pkList_recv(fd, count, data);
; 1266 : 		SliceCount=0;
; 1267 : 		return func;
; 1268 : 	}
; 1269 : #endif
; 1270 : 	SliceCount=0;
; 1271 : 	}
; 1272 : 	return 0;
; 1273 : }

  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$LN201@SaDispatch:
  000d5	8b 85 f4 7f fe
	ff		 mov	 eax, DWORD PTR _func$[ebp]
  000db	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount
  000e5	5e		 pop	 esi
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
$LN3@SaDispatch:

; 91   : #ifdef _NB_FUNRECV_DEBUG
; 92   : 		printf("\næ¥æ¶[%d]fun:%s|x:%d|y:%d|dir:%d",func,"LSSPROTO_XYD_RECV",x,y,dir);
; 93   : #endif
; 94   : 		SliceCount=0;
; 95   : 		return func;
; 96   : 	}
; 97   : 	else if (func==LSSPROTO_EV_RECV)

  000f4	83 f8 04	 cmp	 eax, 4
  000f7	75 73		 jne	 SHORT $LN6@SaDispatch

; 98   : 	{
; 99   : 		int seqno;
; 100  : 		int result;
; 101  : 
; 102  : 		iChecksum += util_deint(2, &seqno);

  000f9	8d 85 e4 7f fe
	ff		 lea	 eax, DWORD PTR _seqno$26[ebp]
  000ff	50		 push	 eax
  00100	6a 02		 push	 2
  00102	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00107	8b f0		 mov	 esi, eax

; 103  : 		iChecksum += util_deint(3, &result);

  00109	8d 85 e0 7f fe
	ff		 lea	 eax, DWORD PTR _result$19[ebp]
  0010f	50		 push	 eax
  00110	6a 03		 push	 3
  00112	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00117	03 f0		 add	 esi, eax

; 104  : 		util_deint(4, &iChecksumrecv);

  00119	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0011f	50		 push	 eax
  00120	6a 04		 push	 4
  00122	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00127	83 c4 18	 add	 esp, 24			; 00000018H

; 105  : 		if (iChecksum!=iChecksumrecv) {

  0012a	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00130	0f 85 27 17 00
	00		 jne	 $LN195@SaDispatch

; 106  : 			SliceCount=0;
; 107  : 			return 0;
; 108  : 		}
; 109  : 		lssproto_EV_recv(fd, seqno, result);

  00136	ff b5 e0 7f fe
	ff		 push	 DWORD PTR _result$19[ebp]
  0013c	ff b5 e4 7f fe
	ff		 push	 DWORD PTR _seqno$26[ebp]
  00142	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00145	e8 00 00 00 00	 call	 ?lssproto_EV_recv@@YAXHHH@Z ; lssproto_EV_recv
$LN202@SaDispatch:

; 1251 : 	}
; 1252 : 
; 1253 : #ifdef _PK2007
; 1254 : 	else if( func == LSSPROTO_PKLIST_RECV )
; 1255 : 	{
; 1256 : 		int count;
; 1257 : 		char data[16384];
; 1258 : 		iChecksum += util_deint(2, &count);
; 1259 : 		iChecksum += util_destring(3, data);
; 1260 : 		util_deint(4, &iChecksumrecv);
; 1261 : 		if (iChecksum!=iChecksumrecv) {
; 1262 : 			SliceCount=0;
; 1263 : 			return 0;
; 1264 : 		}
; 1265 : 		lssproto_pkList_recv(fd, count, data);
; 1266 : 		SliceCount=0;
; 1267 : 		return func;
; 1268 : 	}
; 1269 : #endif
; 1270 : 	SliceCount=0;
; 1271 : 	}
; 1272 : 	return 0;
; 1273 : }

  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN203@SaDispatch:
  0014d	8b 85 f4 7f fe
	ff		 mov	 eax, DWORD PTR _func$[ebp]
  00153	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount
  0015d	5e		 pop	 esi
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
$LN6@SaDispatch:

; 110  : #ifdef _NB_FUNRECV_DEBUG
; 111  : 		printf("\næ¥æ¶[%d]fun:%s|seqno:%d|result:%d",func,"LSSPROTO_EV_RECV",seqno,result);
; 112  : #endif
; 113  : 		SliceCount=0;
; 114  : 		return func;
; 115  : 	}
; 116  : 	else if (func==LSSPROTO_EN_RECV)	//JL 7å·å  ææå

  0016c	83 f8 07	 cmp	 eax, 7
  0016f	75 53		 jne	 SHORT $LN9@SaDispatch

; 117  : 	{
; 118  : 		int result;
; 119  : 		int field;
; 120  : 
; 121  : 		iChecksum += util_deint(2, &result);

  00171	8d 85 e4 7f fe
	ff		 lea	 eax, DWORD PTR _result$25[ebp]
  00177	50		 push	 eax
  00178	6a 02		 push	 2
  0017a	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0017f	8b f0		 mov	 esi, eax

; 122  : 		iChecksum += util_deint(3, &field);

  00181	8d 85 e0 7f fe
	ff		 lea	 eax, DWORD PTR _field$18[ebp]
  00187	50		 push	 eax
  00188	6a 03		 push	 3
  0018a	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0018f	03 f0		 add	 esi, eax

; 123  : 		util_deint(4, &iChecksumrecv);

  00191	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00197	50		 push	 eax
  00198	6a 04		 push	 4
  0019a	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0019f	83 c4 18	 add	 esp, 24			; 00000018H

; 124  : 		if (iChecksum!=iChecksumrecv) {

  001a2	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  001a8	0f 85 af 16 00
	00		 jne	 $LN195@SaDispatch

; 125  : 			SliceCount=0;
; 126  : 			return 0;
; 127  : 		}
; 128  : 		lssproto_EN_recv(fd, result, field);

  001ae	ff b5 e0 7f fe
	ff		 push	 DWORD PTR _field$18[ebp]
  001b4	ff b5 e4 7f fe
	ff		 push	 DWORD PTR _result$25[ebp]
  001ba	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  001bd	e8 00 00 00 00	 call	 ?lssproto_EN_recv@@YAXHHH@Z ; lssproto_EN_recv

; 129  : #ifdef _NB_FUNRECV_DEBUG
; 130  : 		printf("\næ¥æ¶[%d]fun:%s|result:%d|field:%d",func,"LSSPROTO_EN_RECV",result,field);
; 131  : #endif
; 132  : 		SliceCount=0;
; 133  : 		return func;

  001c2	eb 86		 jmp	 SHORT $LN202@SaDispatch
$LN9@SaDispatch:

; 134  : 	}
; 135  : 	else if (func==LSSPROTO_RS_RECV)

  001c4	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  001c7	75 44		 jne	 SHORT $LN12@SaDispatch

; 136  : 	{
; 137  : 		char data[16384];
; 138  : 
; 139  : 		iChecksum += util_destring(2, data);

  001c9	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$120[ebp]
  001cf	50		 push	 eax
  001d0	6a 02		 push	 2
  001d2	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  001d7	8b f0		 mov	 esi, eax

; 140  : 		util_deint(3, &iChecksumrecv);

  001d9	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  001df	50		 push	 eax
  001e0	6a 03		 push	 3
  001e2	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  001e7	83 c4 10	 add	 esp, 16			; 00000010H

; 141  : 		if (iChecksum!=iChecksumrecv) {

  001ea	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  001f0	0f 85 67 16 00
	00		 jne	 $LN195@SaDispatch

; 142  : 			SliceCount=0;
; 143  : 			return 0;
; 144  : 		}
; 145  : 		lssproto_RS_recv(fd, data);

  001f6	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$120[ebp]
  001fc	50		 push	 eax
  001fd	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00200	e8 00 00 00 00	 call	 ?lssproto_RS_recv@@YAXHPAD@Z ; lssproto_RS_recv
  00205	83 c4 08	 add	 esp, 8

; 146  : #ifdef _NB_FUNRECV_DEBUG
; 147  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"LSSPROTO_RS_RECV",data);
; 148  : #endif
; 149  : 		SliceCount=0;
; 150  : 		return func;

  00208	e9 40 ff ff ff	 jmp	 $LN203@SaDispatch
$LN12@SaDispatch:

; 151  : 	}
; 152  : 	else if (func==LSSPROTO_RD_RECV) 

  0020d	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00210	75 44		 jne	 SHORT $LN15@SaDispatch

; 153  : 	{
; 154  : 		char data[16384];
; 155  : 
; 156  : 		iChecksum += util_destring(2, data);

  00212	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$119[ebp]
  00218	50		 push	 eax
  00219	6a 02		 push	 2
  0021b	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00220	8b f0		 mov	 esi, eax

; 157  : 		util_deint(3, &iChecksumrecv);

  00222	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00228	50		 push	 eax
  00229	6a 03		 push	 3
  0022b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00230	83 c4 10	 add	 esp, 16			; 00000010H

; 158  : 		if (iChecksum!=iChecksumrecv) {

  00233	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00239	0f 85 1e 16 00
	00		 jne	 $LN195@SaDispatch

; 159  : 			SliceCount=0;
; 160  : 			return 0;
; 161  : 		}
; 162  : 		lssproto_RD_recv(fd, data);

  0023f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$119[ebp]
  00245	50		 push	 eax
  00246	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00249	e8 00 00 00 00	 call	 ?lssproto_RD_recv@@YAXHPAD@Z ; lssproto_RD_recv
  0024e	83 c4 08	 add	 esp, 8

; 163  : #ifdef _NB_FUNRECV_DEBUG
; 164  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"LSSPROTO_RD_RECV",data);
; 165  : #endif
; 166  : 		SliceCount=0;
; 167  : 		return func;

  00251	e9 f7 fe ff ff	 jmp	 $LN203@SaDispatch
$LN15@SaDispatch:

; 168  : 	}
; 169  : 	else if (func==LSSPROTO_B_RECV)

  00256	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00259	75 44		 jne	 SHORT $LN18@SaDispatch

; 170  : 	{
; 171  : 		char command[16384];
; 172  : 
; 173  : 		iChecksum += util_destring(2, command);

  0025b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _command$118[ebp]
  00261	50		 push	 eax
  00262	6a 02		 push	 2
  00264	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00269	8b f0		 mov	 esi, eax

; 174  : 		util_deint(3, &iChecksumrecv);

  0026b	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00271	50		 push	 eax
  00272	6a 03		 push	 3
  00274	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00279	83 c4 10	 add	 esp, 16			; 00000010H

; 175  : 		if (iChecksum!=iChecksumrecv) {

  0027c	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00282	0f 85 d5 15 00
	00		 jne	 $LN195@SaDispatch

; 176  : 			SliceCount=0;
; 177  : 			return 0;
; 178  : 		}
; 179  : 
; 180  : 		LogToRecvdata( command );
; 181  : 
; 182  : 		lssproto_B_recv(fd, command);

  00288	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _command$118[ebp]
  0028e	50		 push	 eax
  0028f	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00292	e8 00 00 00 00	 call	 ?lssproto_B_recv@@YAXHPAD@Z ; lssproto_B_recv
  00297	83 c4 08	 add	 esp, 8

; 183  : #ifdef _NB_FUNRECV_DEBUG
; 184  : 		printf("\næ¥æ¶[%d]fun:%s|command:%s",func,"LSSPROTO_B_RECV",command);
; 185  : #endif
; 186  : 		SliceCount=0;
; 187  : 		return func;

  0029a	e9 ae fe ff ff	 jmp	 $LN203@SaDispatch
$LN18@SaDispatch:

; 188  : 	}
; 189  : 	else if (func==LSSPROTO_I_RECV)   // 22 éå·å

  0029f	83 f8 16	 cmp	 eax, 22			; 00000016H
  002a2	75 44		 jne	 SHORT $LN21@SaDispatch

; 190  : 	{
; 191  : 		char data[16384];
; 192  : 
; 193  : 		iChecksum += util_destring(2, data);

  002a4	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$117[ebp]
  002aa	50		 push	 eax
  002ab	6a 02		 push	 2
  002ad	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  002b2	8b f0		 mov	 esi, eax

; 194  : 		util_deint(3, &iChecksumrecv);

  002b4	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  002ba	50		 push	 eax
  002bb	6a 03		 push	 3
  002bd	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  002c2	83 c4 10	 add	 esp, 16			; 00000010H

; 195  : 		if (iChecksum!=iChecksumrecv) {

  002c5	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  002cb	0f 85 8c 15 00
	00		 jne	 $LN195@SaDispatch

; 196  : 			SliceCount=0;
; 197  : 			return 0;
; 198  : 		}
; 199  : 		lssproto_I_recv(fd, data);

  002d1	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$117[ebp]
  002d7	50		 push	 eax
  002d8	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  002db	e8 00 00 00 00	 call	 ?lssproto_I_recv@@YAXHPAD@Z ; lssproto_I_recv
  002e0	83 c4 08	 add	 esp, 8

; 200  : #ifdef _NB_FUNRECV_DEBUG
; 201  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"LSSPROTO_I_RECV",data);
; 202  : #endif
; 203  : 		SliceCount=0;
; 204  : 		return func;

  002e3	e9 65 fe ff ff	 jmp	 $LN203@SaDispatch
$LN21@SaDispatch:

; 205  : 	}else if (func==LSSPROTO_SI_RECV){

  002e8	83 f8 18	 cmp	 eax, 24			; 00000018H
  002eb	75 56		 jne	 SHORT $LN24@SaDispatch

; 206  : 		int fromindex;
; 207  : 		int toindex;
; 208  : 
; 209  : 		iChecksum += util_deint(2, &fromindex);

  002ed	8d 85 e4 7f fe
	ff		 lea	 eax, DWORD PTR _fromindex$24[ebp]
  002f3	50		 push	 eax
  002f4	6a 02		 push	 2
  002f6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  002fb	8b f0		 mov	 esi, eax

; 210  : 		iChecksum += util_deint(3, &toindex);

  002fd	8d 85 e0 7f fe
	ff		 lea	 eax, DWORD PTR _toindex$17[ebp]
  00303	50		 push	 eax
  00304	6a 03		 push	 3
  00306	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0030b	03 f0		 add	 esi, eax

; 211  : 		util_deint(4, &iChecksumrecv);

  0030d	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00313	50		 push	 eax
  00314	6a 04		 push	 4
  00316	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0031b	83 c4 18	 add	 esp, 24			; 00000018H

; 212  : 		if (iChecksum!=iChecksumrecv) {

  0031e	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00324	0f 85 33 15 00
	00		 jne	 $LN195@SaDispatch

; 213  : 			SliceCount=0;
; 214  : 			return 0;
; 215  : 		}
; 216  : 		lssproto_SI_recv(fd, fromindex, toindex);

  0032a	ff b5 e0 7f fe
	ff		 push	 DWORD PTR _toindex$17[ebp]
  00330	ff b5 e4 7f fe
	ff		 push	 DWORD PTR _fromindex$24[ebp]
  00336	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00339	e8 00 00 00 00	 call	 ?lssproto_SI_recv@@YAXHHH@Z ; lssproto_SI_recv

; 217  : #ifdef _NB_FUNRECV_DEBUG
; 218  : 		printf("\næ¥æ¶[%d]fun:%s|fromindex:%d|toindex:%d",func,"LSSPROTO_SI_RECV",fromindex,toindex);
; 219  : #endif
; 220  : 		SliceCount=0;
; 221  : 		return func;

  0033e	e9 07 fe ff ff	 jmp	 $LN202@SaDispatch
$LN24@SaDispatch:

; 222  : 	}
; 223  : 	else if (func==LSSPROTO_MSG_RECV)

  00343	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00346	75 6d		 jne	 SHORT $LN27@SaDispatch

; 224  : 	{
; 225  : 		int aindex;
; 226  : 		char text[16384];
; 227  : 		int color;
; 228  : 
; 229  : 		iChecksum += util_deint(2, &aindex);

  00348	8d 85 e4 7f fe
	ff		 lea	 eax, DWORD PTR _aindex$23[ebp]
  0034e	50		 push	 eax
  0034f	6a 02		 push	 2
  00351	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00356	8b f0		 mov	 esi, eax

; 230  : 		iChecksum += util_destring(3, text);

  00358	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _text$116[ebp]
  0035e	50		 push	 eax
  0035f	6a 03		 push	 3
  00361	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00366	03 f0		 add	 esi, eax

; 231  : 		iChecksum += util_deint(4, &color);

  00368	8d 85 e0 7f fe
	ff		 lea	 eax, DWORD PTR _color$16[ebp]
  0036e	50		 push	 eax
  0036f	6a 04		 push	 4
  00371	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00376	03 f0		 add	 esi, eax

; 232  : 		util_deint(5, &iChecksumrecv);

  00378	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0037e	50		 push	 eax
  0037f	6a 05		 push	 5
  00381	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00386	83 c4 20	 add	 esp, 32			; 00000020H

; 233  : 		if (iChecksum!=iChecksumrecv) {

  00389	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0038f	0f 85 c8 14 00
	00		 jne	 $LN195@SaDispatch

; 234  : 			SliceCount=0;
; 235  : 			return 0;
; 236  : 		}
; 237  : 		lssproto_MSG_recv(fd, aindex, text, color);

  00395	ff b5 e0 7f fe
	ff		 push	 DWORD PTR _color$16[ebp]
  0039b	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _text$116[ebp]
  003a1	50		 push	 eax
  003a2	ff b5 e4 7f fe
	ff		 push	 DWORD PTR _aindex$23[ebp]
  003a8	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  003ab	e8 00 00 00 00	 call	 ?lssproto_MSG_recv@@YAXHHPADH@Z ; lssproto_MSG_recv

; 238  : #ifdef _NB_FUNRECV_DEBUG
; 239  : 		printf("\næ¥æ¶[%d]fun:%s|aindex:%d|text:%s|color:%d",func,"LSSPROTO_MSG_RECV",aindex,text,color);
; 240  : #endif
; 241  : 		SliceCount=0;
; 242  : 		return func;

  003b0	e9 1d fd ff ff	 jmp	 $LN200@SaDispatch
$LN27@SaDispatch:

; 243  : 	}
; 244  : 	else if (func==LSSPROTO_PME_RECV)

  003b5	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  003b8	0f 85 e1 00 00
	00		 jne	 $LN30@SaDispatch

; 245  : 	{
; 246  : 		int objindex;
; 247  : 		int graphicsno;
; 248  : 		int x;
; 249  : 		int y;
; 250  : 		int dir;
; 251  : 		int flg;
; 252  : 		int no;
; 253  : 		char cdata[16384];
; 254  : 
; 255  : 		iChecksum += util_deint(2, &objindex);

  003be	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _objindex$54[ebp]
  003c4	50		 push	 eax
  003c5	6a 02		 push	 2
  003c7	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  003cc	8b f0		 mov	 esi, eax

; 256  : 		iChecksum += util_deint(3, &graphicsno);

  003ce	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _graphicsno$36[ebp]
  003d4	50		 push	 eax
  003d5	6a 03		 push	 3
  003d7	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  003dc	03 f0		 add	 esi, eax

; 257  : 		iChecksum += util_deint(4, &x);

  003de	8d 85 dc 7f fe
	ff		 lea	 eax, DWORD PTR _x$13[ebp]
  003e4	50		 push	 eax
  003e5	6a 04		 push	 4
  003e7	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  003ec	03 f0		 add	 esi, eax

; 258  : 		iChecksum += util_deint(5, &y);

  003ee	8d 85 d4 7f fe
	ff		 lea	 eax, DWORD PTR _y$3[ebp]
  003f4	50		 push	 eax
  003f5	6a 05		 push	 5
  003f7	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  003fc	03 f0		 add	 esi, eax

; 259  : 		iChecksum += util_deint(6, &dir);

  003fe	8d 85 d8 7f fe
	ff		 lea	 eax, DWORD PTR _dir$5[ebp]
  00404	50		 push	 eax
  00405	6a 06		 push	 6
  00407	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0040c	03 f0		 add	 esi, eax

; 260  : 		iChecksum += util_deint(7, &flg);

  0040e	8d 85 e4 7f fe
	ff		 lea	 eax, DWORD PTR _flg$22[ebp]
  00414	50		 push	 eax
  00415	6a 07		 push	 7
  00417	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0041c	03 f0		 add	 esi, eax

; 261  : 		iChecksum += util_deint(8, &no);

  0041e	8d 85 e0 7f fe
	ff		 lea	 eax, DWORD PTR _no$15[ebp]
  00424	50		 push	 eax
  00425	6a 08		 push	 8
  00427	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0042c	03 f0		 add	 esi, eax

; 262  : 		iChecksum += util_destring(9, cdata);

  0042e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _cdata$115[ebp]
  00434	50		 push	 eax
  00435	6a 09		 push	 9
  00437	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0043c	83 c4 40	 add	 esp, 64			; 00000040H
  0043f	03 f0		 add	 esi, eax

; 263  : 		util_deint(10, &iChecksumrecv);

  00441	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00447	50		 push	 eax
  00448	6a 0a		 push	 10			; 0000000aH
  0044a	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0044f	83 c4 08	 add	 esp, 8

; 264  : 		if (iChecksum!=iChecksumrecv) {

  00452	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00458	0f 85 ff 13 00
	00		 jne	 $LN195@SaDispatch

; 265  : 			SliceCount=0;
; 266  : 			return 0;
; 267  : 		}
; 268  : 		lssproto_PME_recv(fd, objindex, graphicsno, x, y, dir, flg, no, cdata);

  0045e	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _cdata$115[ebp]
  00464	50		 push	 eax
  00465	ff b5 e0 7f fe
	ff		 push	 DWORD PTR _no$15[ebp]
  0046b	ff b5 e4 7f fe
	ff		 push	 DWORD PTR _flg$22[ebp]
  00471	ff b5 d8 7f fe
	ff		 push	 DWORD PTR _dir$5[ebp]
  00477	ff b5 d4 7f fe
	ff		 push	 DWORD PTR _y$3[ebp]
  0047d	ff b5 dc 7f fe
	ff		 push	 DWORD PTR _x$13[ebp]
  00483	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _graphicsno$36[ebp]
  00489	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _objindex$54[ebp]
  0048f	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00492	e8 00 00 00 00	 call	 ?lssproto_PME_recv@@YAXHHHHHHHHPAD@Z ; lssproto_PME_recv
  00497	83 c4 24	 add	 esp, 36			; 00000024H

; 269  : #ifdef _NB_FUNRECV_DEBUG
; 270  : 		printf("\næ¥æ¶[%d]fun:%s|objindex:%d|graphicsno:%d|x:%d|y:%d|dir:%d|flg:%d|no:%d|cdata:%s",func,"LSSPROTO_PME_RECV",objindex, graphicsno, x, y, dir, flg, no, cdata);
; 271  : #endif
; 272  : 		SliceCount=0;
; 273  : 		return func;

  0049a	e9 36 fc ff ff	 jmp	 $LN201@SaDispatch
$LN30@SaDispatch:

; 274  : 	}
; 275  : 	else if (func==LSSPROTO_AB_RECV)

  0049f	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  004a2	75 44		 jne	 SHORT $LN33@SaDispatch

; 276  : 	{
; 277  : 		char data[16384];
; 278  : 
; 279  : 		iChecksum += util_destring(2, data);

  004a4	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$114[ebp]
  004aa	50		 push	 eax
  004ab	6a 02		 push	 2
  004ad	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  004b2	8b f0		 mov	 esi, eax

; 280  : 		util_deint(3, &iChecksumrecv);

  004b4	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  004ba	50		 push	 eax
  004bb	6a 03		 push	 3
  004bd	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  004c2	83 c4 10	 add	 esp, 16			; 00000010H

; 281  : 		if (iChecksum!=iChecksumrecv) {

  004c5	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  004cb	0f 85 8c 13 00
	00		 jne	 $LN195@SaDispatch

; 282  : 			SliceCount=0;
; 283  : 			return 0;
; 284  : 		}
; 285  : 		lssproto_AB_recv(fd, data);

  004d1	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$114[ebp]
  004d7	50		 push	 eax
  004d8	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  004db	e8 00 00 00 00	 call	 ?lssproto_AB_recv@@YAXHPAD@Z ; lssproto_AB_recv
  004e0	83 c4 08	 add	 esp, 8

; 286  : #ifdef _NB_FUNRECV_DEBUG
; 287  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"LSSPROTO_AB_RECV",data);
; 288  : #endif
; 289  : 		SliceCount=0;
; 290  : 		return func;

  004e3	e9 ed fb ff ff	 jmp	 $LN201@SaDispatch
$LN33@SaDispatch:

; 291  : 	}
; 292  : 	else if (func==LSSPROTO_ABI_RECV)

  004e8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004eb	75 5a		 jne	 SHORT $LN36@SaDispatch

; 293  : 	{
; 294  : 		int num;
; 295  : 		char data[16384];
; 296  : 
; 297  : 		iChecksum += util_deint(2, &num);

  004ed	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _num$53[ebp]
  004f3	50		 push	 eax
  004f4	6a 02		 push	 2
  004f6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  004fb	8b f0		 mov	 esi, eax

; 298  : 		iChecksum += util_destring(3, data);

  004fd	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$113[ebp]
  00503	50		 push	 eax
  00504	6a 03		 push	 3
  00506	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0050b	03 f0		 add	 esi, eax

; 299  : 		util_deint(4, &iChecksumrecv);

  0050d	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00513	50		 push	 eax
  00514	6a 04		 push	 4
  00516	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0051b	83 c4 18	 add	 esp, 24			; 00000018H

; 300  : 		if (iChecksum!=iChecksumrecv) {

  0051e	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00524	0f 85 33 13 00
	00		 jne	 $LN195@SaDispatch

; 301  : 			SliceCount=0;
; 302  : 			return 0;
; 303  : 		}
; 304  : 		lssproto_ABI_recv(fd, num, data);

  0052a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$113[ebp]
  00530	50		 push	 eax
  00531	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _num$53[ebp]
  00537	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0053a	e8 00 00 00 00	 call	 ?lssproto_ABI_recv@@YAXHHPAD@Z ; lssproto_ABI_recv
  0053f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : #ifdef _NB_FUNRECV_DEBUG
; 306  : 		printf("\næ¥æ¶[%d]fun:%s|num:%d|data:%s",func,"LSSPROTO_ABI_RECV",num,data);
; 307  : #endif
; 308  : 		SliceCount=0;
; 309  : 		return func;

  00542	e9 8e fb ff ff	 jmp	 $LN201@SaDispatch
$LN36@SaDispatch:

; 310  : 	}
; 311  : 	else if (func==LSSPROTO_TK_RECV)

  00547	83 f8 24	 cmp	 eax, 36			; 00000024H
  0054a	75 6d		 jne	 SHORT $LN39@SaDispatch

; 312  : 	{
; 313  : 		int index;
; 314  : 		char message[16384];
; 315  : 		int color;
; 316  : 
; 317  : 		iChecksum += util_deint(2, &index);

  0054c	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _index$35[ebp]
  00552	50		 push	 eax
  00553	6a 02		 push	 2
  00555	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0055a	8b f0		 mov	 esi, eax

; 318  : 		iChecksum += util_destring(3, message);

  0055c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _message$112[ebp]
  00562	50		 push	 eax
  00563	6a 03		 push	 3
  00565	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0056a	03 f0		 add	 esi, eax

; 319  : 		iChecksum += util_deint(4, &color);

  0056c	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _color$52[ebp]
  00572	50		 push	 eax
  00573	6a 04		 push	 4
  00575	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0057a	03 f0		 add	 esi, eax

; 320  : 		util_deint(5, &iChecksumrecv);

  0057c	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00582	50		 push	 eax
  00583	6a 05		 push	 5
  00585	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0058a	83 c4 20	 add	 esp, 32			; 00000020H

; 321  : 		if (iChecksum!=iChecksumrecv) {

  0058d	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00593	0f 85 c4 12 00
	00		 jne	 $LN195@SaDispatch

; 322  : 			SliceCount=0;
; 323  : 			return 0;
; 324  : 		}
; 325  : 		lssproto_TK_recv(fd, index, message, color);

  00599	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _color$52[ebp]
  0059f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _message$112[ebp]
  005a5	50		 push	 eax
  005a6	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _index$35[ebp]
  005ac	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  005af	e8 00 00 00 00	 call	 ?lssproto_TK_recv@@YAXHHPADH@Z ; lssproto_TK_recv

; 326  : #ifdef _NB_FUNRECV_DEBUG
; 327  : 		printf("\næ¥æ¶[%d]fun:%s|index:%d|message:%s|color:%d",func,"LSSPROTO_TK_RECV",index,message,color);
; 328  : #endif
; 329  : 		SliceCount=0;
; 330  : 		return func;

  005b4	e9 19 fb ff ff	 jmp	 $LN200@SaDispatch
$LN39@SaDispatch:

; 331  : 	}
; 332  : 	else if (func==LSSPROTO_MC_RECV)

  005b9	83 f8 25	 cmp	 eax, 37			; 00000025H
  005bc	0f 85 02 01 00
	00		 jne	 $LN42@SaDispatch

; 333  : 	{
; 334  : 		int fl;
; 335  : 		int x1;
; 336  : 		int y1;
; 337  : 		int x2;
; 338  : 		int y2;
; 339  : 		int tilesum;
; 340  : 		int objsum;
; 341  : 		int eventsum;
; 342  : 		char data[16384];
; 343  : 
; 344  : 		iChecksum += util_deint(2, &fl);

  005c2	8d 85 d8 7f fe
	ff		 lea	 eax, DWORD PTR _fl$4[ebp]
  005c8	50		 push	 eax
  005c9	6a 02		 push	 2
  005cb	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  005d0	8b f0		 mov	 esi, eax

; 345  : 		iChecksum += util_deint(3, &x1);

  005d2	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _x1$76[ebp]
  005d8	50		 push	 eax
  005d9	6a 03		 push	 3
  005db	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  005e0	03 f0		 add	 esi, eax

; 346  : 		iChecksum += util_deint(4, &y1);

  005e2	8d 85 e4 7f fe
	ff		 lea	 eax, DWORD PTR _y1$21[ebp]
  005e8	50		 push	 eax
  005e9	6a 04		 push	 4
  005eb	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  005f0	03 f0		 add	 esi, eax

; 347  : 		iChecksum += util_deint(5, &x2);

  005f2	8d 85 e0 7f fe
	ff		 lea	 eax, DWORD PTR _x2$14[ebp]
  005f8	50		 push	 eax
  005f9	6a 05		 push	 5
  005fb	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00600	03 f0		 add	 esi, eax

; 348  : 		iChecksum += util_deint(6, &y2);

  00602	8d 85 d4 7f fe
	ff		 lea	 eax, DWORD PTR _y2$2[ebp]
  00608	50		 push	 eax
  00609	6a 06		 push	 6
  0060b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00610	03 f0		 add	 esi, eax

; 349  : 		iChecksum += util_deint(7, &tilesum);

  00612	8d 85 dc 7f fe
	ff		 lea	 eax, DWORD PTR _tilesum$12[ebp]
  00618	50		 push	 eax
  00619	6a 07		 push	 7
  0061b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00620	03 f0		 add	 esi, eax

; 350  : 		iChecksum += util_deint(8, &objsum);

  00622	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _objsum$34[ebp]
  00628	50		 push	 eax
  00629	6a 08		 push	 8
  0062b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00630	03 f0		 add	 esi, eax

; 351  : 		iChecksum += util_deint(9, &eventsum);

  00632	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _eventsum$51[ebp]
  00638	50		 push	 eax
  00639	6a 09		 push	 9
  0063b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00640	83 c4 40	 add	 esp, 64			; 00000040H
  00643	03 f0		 add	 esi, eax

; 352  : 		iChecksum += util_destring(10, data);

  00645	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$111[ebp]
  0064b	50		 push	 eax
  0064c	6a 0a		 push	 10			; 0000000aH
  0064e	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00653	03 f0		 add	 esi, eax

; 353  : 		util_deint(11, &iChecksumrecv);

  00655	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0065b	50		 push	 eax
  0065c	6a 0b		 push	 11			; 0000000bH
  0065e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00663	83 c4 10	 add	 esp, 16			; 00000010H

; 354  : 		if (iChecksum!=iChecksumrecv) {

  00666	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0066c	0f 85 eb 11 00
	00		 jne	 $LN195@SaDispatch

; 355  : 			SliceCount=0;
; 356  : 			return 0;
; 357  : 		}
; 358  : #ifdef __SKYISLAND
; 359  : 		extern void SkyIslandSetNo( int fl);
; 360  : 		SkyIslandSetNo( fl);

  00672	ff b5 d8 7f fe
	ff		 push	 DWORD PTR _fl$4[ebp]
  00678	e8 00 00 00 00	 call	 ?SkyIslandSetNo@@YAXH@Z	; SkyIslandSetNo

; 361  : #endif
; 362  : 		
; 363  : 		LogToRecvdata(data);
; 364  : 
; 365  : 		lssproto_MC_recv(fd, fl, x1, y1, x2, y2, tilesum, objsum, eventsum, data);

  0067d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$111[ebp]
  00683	50		 push	 eax
  00684	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _eventsum$51[ebp]
  0068a	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _objsum$34[ebp]
  00690	ff b5 dc 7f fe
	ff		 push	 DWORD PTR _tilesum$12[ebp]
  00696	ff b5 d4 7f fe
	ff		 push	 DWORD PTR _y2$2[ebp]
  0069c	ff b5 e0 7f fe
	ff		 push	 DWORD PTR _x2$14[ebp]
  006a2	ff b5 e4 7f fe
	ff		 push	 DWORD PTR _y1$21[ebp]
  006a8	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _x1$76[ebp]
  006ae	ff b5 d8 7f fe
	ff		 push	 DWORD PTR _fl$4[ebp]
  006b4	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  006b7	e8 00 00 00 00	 call	 ?lssproto_MC_recv@@YAXHHHHHHHHHPAD@Z ; lssproto_MC_recv
  006bc	83 c4 2c	 add	 esp, 44			; 0000002cH

; 366  : #ifdef _NB_FUNRECV_DEBUG
; 367  : 		printf("\næ¥æ¶[%d]fun:%s|fl:%d|x1:%d|y1:%d|x2:%d|y2:%d|tilesum:%d|objsum:%d|eventsum:%d|data:%s",func,"LSSPROTO_MC_RECV",fl, x1, y1, x2, y2, tilesum, objsum, eventsum, data);
; 368  : #endif
; 369  : 		SliceCount=0;
; 370  : 		return func;

  006bf	e9 11 fa ff ff	 jmp	 $LN201@SaDispatch
$LN42@SaDispatch:

; 371  : 	}
; 372  : 	else if (func==LSSPROTO_M_RECV)

  006c4	83 f8 27	 cmp	 eax, 39			; 00000027H
  006c7	0f 85 b2 00 00
	00		 jne	 $LN45@SaDispatch

; 373  : 	{
; 374  : 		int fl;
; 375  : 		int x1;
; 376  : 		int y1;
; 377  : 		int x2;
; 378  : 		int y2;
; 379  : 		char data[16384];
; 380  : 
; 381  : 		iChecksum += util_deint(2, &fl);

  006cd	8d 85 d4 7f fe
	ff		 lea	 eax, DWORD PTR _fl$1[ebp]
  006d3	50		 push	 eax
  006d4	6a 02		 push	 2
  006d6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  006db	8b f0		 mov	 esi, eax

; 382  : 		iChecksum += util_deint(3, &x1);

  006dd	8d 85 dc 7f fe
	ff		 lea	 eax, DWORD PTR _x1$11[ebp]
  006e3	50		 push	 eax
  006e4	6a 03		 push	 3
  006e6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  006eb	03 f0		 add	 esi, eax

; 383  : 		iChecksum += util_deint(4, &y1);

  006ed	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _y1$33[ebp]
  006f3	50		 push	 eax
  006f4	6a 04		 push	 4
  006f6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  006fb	03 f0		 add	 esi, eax

; 384  : 		iChecksum += util_deint(5, &x2);

  006fd	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _x2$50[ebp]
  00703	50		 push	 eax
  00704	6a 05		 push	 5
  00706	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0070b	03 f0		 add	 esi, eax

; 385  : 		iChecksum += util_deint(6, &y2);

  0070d	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _y2$75[ebp]
  00713	50		 push	 eax
  00714	6a 06		 push	 6
  00716	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0071b	03 f0		 add	 esi, eax

; 386  : 		iChecksum += util_destring(7, data);

  0071d	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$110[ebp]
  00723	50		 push	 eax
  00724	6a 07		 push	 7
  00726	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0072b	03 f0		 add	 esi, eax

; 387  : 		util_deint(8, &iChecksumrecv);

  0072d	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00733	50		 push	 eax
  00734	6a 08		 push	 8
  00736	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0073b	83 c4 38	 add	 esp, 56			; 00000038H

; 388  : 		if (iChecksum!=iChecksumrecv) {

  0073e	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00744	0f 85 13 11 00
	00		 jne	 $LN195@SaDispatch

; 389  : 			SliceCount=0;
; 390  : 			return 0;
; 391  : 		}
; 392  : 
; 393  : 		LogToRecvdata(data);
; 394  : 
; 395  : 		lssproto_M_recv(fd, fl, x1, y1, x2, y2, data);

  0074a	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$110[ebp]
  00750	50		 push	 eax
  00751	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _y2$75[ebp]
  00757	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _x2$50[ebp]
  0075d	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _y1$33[ebp]
  00763	ff b5 dc 7f fe
	ff		 push	 DWORD PTR _x1$11[ebp]
  00769	ff b5 d4 7f fe
	ff		 push	 DWORD PTR _fl$1[ebp]
  0076f	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00772	e8 00 00 00 00	 call	 ?lssproto_M_recv@@YAXHHHHHHPAD@Z ; lssproto_M_recv
  00777	83 c4 1c	 add	 esp, 28			; 0000001cH

; 396  : #ifdef _NB_FUNRECV_DEBUG
; 397  : 		printf("\næ¥æ¶[%d]fun:%s|fl:%d|x1:%d|y1:%d|x2:%d|y2:%d|data:%s",func,"LSSPROTO_M_RECV",fl, x1, y1, x2, y2, data);
; 398  : #endif
; 399  : 		SliceCount=0;
; 400  : 		return func;

  0077a	e9 56 f9 ff ff	 jmp	 $LN201@SaDispatch
$LN45@SaDispatch:

; 401  : 	}
; 402  : 	else if (func==LSSPROTO_C_RECV)

  0077f	83 f8 29	 cmp	 eax, 41			; 00000029H
  00782	75 44		 jne	 SHORT $LN48@SaDispatch

; 403  : 	{
; 404  : 		char data[16384];
; 405  : 
; 406  : 		iChecksum += util_destring(2, data);

  00784	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$109[ebp]
  0078a	50		 push	 eax
  0078b	6a 02		 push	 2
  0078d	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00792	8b f0		 mov	 esi, eax

; 407  : 		util_deint(3, &iChecksumrecv);

  00794	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0079a	50		 push	 eax
  0079b	6a 03		 push	 3
  0079d	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  007a2	83 c4 10	 add	 esp, 16			; 00000010H

; 408  : 		if (iChecksum!=iChecksumrecv) {

  007a5	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  007ab	0f 85 ac 10 00
	00		 jne	 $LN195@SaDispatch

; 409  : 			SliceCount=0;
; 410  : 			return 0;
; 411  : 		}
; 412  : 		lssproto_C_recv(fd, data);

  007b1	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$109[ebp]
  007b7	50		 push	 eax
  007b8	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  007bb	e8 00 00 00 00	 call	 ?lssproto_C_recv@@YAXHPAD@Z ; lssproto_C_recv
  007c0	83 c4 08	 add	 esp, 8

; 413  : #ifdef _NB_FUNRECV_DEBUG
; 414  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"LSSPROTO_C_RECV",data);
; 415  : #endif
; 416  : 		SliceCount=0;
; 417  : 		return func;

  007c3	e9 0d f9 ff ff	 jmp	 $LN201@SaDispatch
$LN48@SaDispatch:

; 418  : 	}
; 419  : 	else if (func==LSSPROTO_CA_RECV)

  007c8	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  007cb	75 44		 jne	 SHORT $LN51@SaDispatch

; 420  : 	{
; 421  : 		char data[16384];
; 422  : 
; 423  : 		iChecksum += util_destring(2, data);

  007cd	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$108[ebp]
  007d3	50		 push	 eax
  007d4	6a 02		 push	 2
  007d6	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  007db	8b f0		 mov	 esi, eax

; 424  : 		util_deint(3, &iChecksumrecv);

  007dd	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  007e3	50		 push	 eax
  007e4	6a 03		 push	 3
  007e6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  007eb	83 c4 10	 add	 esp, 16			; 00000010H

; 425  : 		if (iChecksum!=iChecksumrecv) {

  007ee	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  007f4	0f 85 63 10 00
	00		 jne	 $LN195@SaDispatch

; 426  : 			SliceCount=0;
; 427  : 			return 0;
; 428  : 		}
; 429  : 		lssproto_CA_recv(fd, data);

  007fa	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$108[ebp]
  00800	50		 push	 eax
  00801	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00804	e8 00 00 00 00	 call	 ?lssproto_CA_recv@@YAXHPAD@Z ; lssproto_CA_recv
  00809	83 c4 08	 add	 esp, 8

; 430  : #ifdef _NB_FUNRECV_DEBUG
; 431  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"LSSPROTO_CA_RECV",data);
; 432  : #endif
; 433  : 		SliceCount=0;
; 434  : 		return func;

  0080c	e9 c4 f8 ff ff	 jmp	 $LN201@SaDispatch
$LN51@SaDispatch:

; 435  : 	}
; 436  : 	else if (func==LSSPROTO_CD_RECV)

  00811	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00814	75 44		 jne	 SHORT $LN54@SaDispatch

; 437  : 	{
; 438  : 		char data[16384];
; 439  : 
; 440  : 		iChecksum += util_destring(2, data);

  00816	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$107[ebp]
  0081c	50		 push	 eax
  0081d	6a 02		 push	 2
  0081f	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00824	8b f0		 mov	 esi, eax

; 441  : 		util_deint(3, &iChecksumrecv);

  00826	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0082c	50		 push	 eax
  0082d	6a 03		 push	 3
  0082f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00834	83 c4 10	 add	 esp, 16			; 00000010H

; 442  : 		if (iChecksum!=iChecksumrecv) {

  00837	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0083d	0f 85 1a 10 00
	00		 jne	 $LN195@SaDispatch

; 443  : 			SliceCount=0;
; 444  : 			return 0;
; 445  : 		}
; 446  : 		lssproto_CD_recv(fd, data);

  00843	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$107[ebp]
  00849	50		 push	 eax
  0084a	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0084d	e8 00 00 00 00	 call	 ?lssproto_CD_recv@@YAXHPAD@Z ; lssproto_CD_recv
  00852	83 c4 08	 add	 esp, 8

; 447  : #ifdef _NB_FUNRECV_DEBUG
; 448  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"lssproto_CD_recv",data);
; 449  : #endif
; 450  : 		SliceCount=0;
; 451  : 		return func;

  00855	e9 7b f8 ff ff	 jmp	 $LN201@SaDispatch
$LN54@SaDispatch:

; 452  : 	}
; 453  : 	else if (func==LSSPROTO_R_RECV)

  0085a	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  0085d	75 44		 jne	 SHORT $LN57@SaDispatch

; 454  : 	{
; 455  : 		char data[16384];
; 456  : 
; 457  : 		iChecksum += util_destring(2, data);

  0085f	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$106[ebp]
  00865	50		 push	 eax
  00866	6a 02		 push	 2
  00868	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0086d	8b f0		 mov	 esi, eax

; 458  : 		util_deint(3, &iChecksumrecv);

  0086f	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00875	50		 push	 eax
  00876	6a 03		 push	 3
  00878	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0087d	83 c4 10	 add	 esp, 16			; 00000010H

; 459  : 		if (iChecksum!=iChecksumrecv) {

  00880	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00886	0f 85 d1 0f 00
	00		 jne	 $LN195@SaDispatch

; 460  : 			SliceCount=0;
; 461  : 			return 0;
; 462  : 		}
; 463  : 		lssproto_R_recv(fd, data);

  0088c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$106[ebp]
  00892	50		 push	 eax
  00893	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00896	e8 00 00 00 00	 call	 ?lssproto_R_recv@@YAXHPAD@Z ; lssproto_R_recv
  0089b	83 c4 08	 add	 esp, 8

; 464  : #ifdef _NB_FUNRECV_DEBUG
; 465  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"LSSPROTO_R_RECV",data);
; 466  : #endif
; 467  : 		SliceCount=0;
; 468  : 		return func;

  0089e	e9 32 f8 ff ff	 jmp	 $LN201@SaDispatch
$LN57@SaDispatch:

; 469  : 	}
; 470  : 	else if (func==LSSPROTO_S_RECV)

  008a3	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  008a6	75 44		 jne	 SHORT $LN60@SaDispatch

; 471  : 	{
; 472  : 		char data[16384];
; 473  : 
; 474  : 		iChecksum += util_destring(2, data);

  008a8	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$105[ebp]
  008ae	50		 push	 eax
  008af	6a 02		 push	 2
  008b1	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  008b6	8b f0		 mov	 esi, eax

; 475  : 		util_deint(3, &iChecksumrecv);

  008b8	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  008be	50		 push	 eax
  008bf	6a 03		 push	 3
  008c1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  008c6	83 c4 10	 add	 esp, 16			; 00000010H

; 476  : 		if (iChecksum!=iChecksumrecv) {

  008c9	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  008cf	0f 85 88 0f 00
	00		 jne	 $LN195@SaDispatch

; 477  : 			SliceCount=0;
; 478  : 			return 0;
; 479  : 		}
; 480  : 
; 481  : 		LogToRecvdata(data);
; 482  : 
; 483  : 		lssproto_S_recv(fd, data);

  008d5	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$105[ebp]
  008db	50		 push	 eax
  008dc	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  008df	e8 00 00 00 00	 call	 ?lssproto_S_recv@@YAXHPAD@Z ; lssproto_S_recv
  008e4	83 c4 08	 add	 esp, 8

; 484  : #ifdef _NB_FUNRECV_DEBUG
; 485  : 		printf("\næ¥æ¶[%d]fun:%s|data:%s",func,"LSSPROTO_S_RECV",data);
; 486  : #endif
; 487  : 		SliceCount=0;
; 488  : 		return func;

  008e7	e9 e9 f7 ff ff	 jmp	 $LN201@SaDispatch
$LN60@SaDispatch:

; 489  : 	}
; 490  : 	else if (func==LSSPROTO_D_RECV)

  008ec	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  008ef	0f 85 86 00 00
	00		 jne	 $LN63@SaDispatch

; 491  : 	{
; 492  : 		int category;
; 493  : 		int dx;
; 494  : 		int dy;
; 495  : 		char data[16384];
; 496  : 
; 497  : 		iChecksum += util_deint(2, &category);

  008f5	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _category$32[ebp]
  008fb	50		 push	 eax
  008fc	6a 02		 push	 2
  008fe	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00903	8b f0		 mov	 esi, eax

; 498  : 		iChecksum += util_deint(3, &dx);

  00905	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _dx$49[ebp]
  0090b	50		 push	 eax
  0090c	6a 03		 push	 3
  0090e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00913	03 f0		 add	 esi, eax

; 499  : 		iChecksum += util_deint(4, &dy);

  00915	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _dy$74[ebp]
  0091b	50		 push	 eax
  0091c	6a 04		 push	 4
  0091e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00923	03 f0		 add	 esi, eax

; 500  : 		iChecksum += util_destring(5, data);

  00925	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$104[ebp]
  0092b	50		 push	 eax
  0092c	6a 05		 push	 5
  0092e	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00933	03 f0		 add	 esi, eax

; 501  : 		util_deint(6, &iChecksumrecv);

  00935	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0093b	50		 push	 eax
  0093c	6a 06		 push	 6
  0093e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00943	83 c4 28	 add	 esp, 40			; 00000028H

; 502  : 		if (iChecksum!=iChecksumrecv) {

  00946	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0094c	0f 85 0b 0f 00
	00		 jne	 $LN195@SaDispatch

; 503  : 			SliceCount=0;
; 504  : 			return 0;
; 505  : 		}
; 506  : 		lssproto_D_recv(fd, category, dx, dy, data);

  00952	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$104[ebp]
  00958	50		 push	 eax
  00959	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _dy$74[ebp]
  0095f	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _dx$49[ebp]
  00965	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _category$32[ebp]
  0096b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0096e	e8 00 00 00 00	 call	 ?lssproto_D_recv@@YAXHHHHPAD@Z ; lssproto_D_recv
  00973	83 c4 14	 add	 esp, 20			; 00000014H

; 507  : #ifdef _NB_FUNRECV_DEBUG
; 508  : 		printf("\næ¥æ¶[%d]fun:%s|category:%d|dx:%d|dy:%d|data:%s",func,"LSSPROTO_D_RECV", category, dx, dy, data);
; 509  : #endif
; 510  : 		SliceCount=0;
; 511  : 		return func;

  00976	e9 5a f7 ff ff	 jmp	 $LN201@SaDispatch
$LN63@SaDispatch:

; 512  : 	}
; 513  : 	else if (func==LSSPROTO_FS_RECV)

  0097b	83 f8 31	 cmp	 eax, 49			; 00000031H
  0097e	75 43		 jne	 SHORT $LN66@SaDispatch

; 514  : 	{
; 515  : 		int flg;
; 516  : 
; 517  : 		iChecksum += util_deint(2, &flg);

  00980	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _flg$73[ebp]
  00986	50		 push	 eax
  00987	6a 02		 push	 2
  00989	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0098e	8b f0		 mov	 esi, eax

; 518  : 		util_deint(3, &iChecksumrecv);

  00990	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00996	50		 push	 eax
  00997	6a 03		 push	 3
  00999	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0099e	83 c4 10	 add	 esp, 16			; 00000010H

; 519  : 		if (iChecksum!=iChecksumrecv) {

  009a1	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  009a7	0f 85 b0 0e 00
	00		 jne	 $LN195@SaDispatch

; 520  : 			SliceCount=0;
; 521  : 			return 0;
; 522  : 		}
; 523  : 		lssproto_FS_recv(fd, flg);

  009ad	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _flg$73[ebp]
  009b3	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  009b6	e8 00 00 00 00	 call	 ?lssproto_FS_recv@@YAXHH@Z ; lssproto_FS_recv
  009bb	83 c4 08	 add	 esp, 8

; 524  : #ifdef _NB_FUNRECV_DEBUG
; 525  : 		printf("\næ¥æ¶[%d]fun:%s|flg:%d",func,"LSSPROTO_FS_RECV", flg);
; 526  : #endif
; 527  : 		SliceCount=0;
; 528  : 		return func;

  009be	e9 12 f7 ff ff	 jmp	 $LN201@SaDispatch
$LN66@SaDispatch:

; 529  : 	}
; 530  : 	else if (func==LSSPROTO_HL_RECV)

  009c3	83 f8 33	 cmp	 eax, 51			; 00000033H
  009c6	75 43		 jne	 SHORT $LN69@SaDispatch

; 531  : 	{
; 532  : 		int flg;
; 533  : 
; 534  : 		iChecksum += util_deint(2, &flg);

  009c8	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _flg$72[ebp]
  009ce	50		 push	 eax
  009cf	6a 02		 push	 2
  009d1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  009d6	8b f0		 mov	 esi, eax

; 535  : 		util_deint(3, &iChecksumrecv);

  009d8	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  009de	50		 push	 eax
  009df	6a 03		 push	 3
  009e1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  009e6	83 c4 10	 add	 esp, 16			; 00000010H

; 536  : 		if (iChecksum!=iChecksumrecv) {

  009e9	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  009ef	0f 85 68 0e 00
	00		 jne	 $LN195@SaDispatch

; 537  : 			SliceCount=0;
; 538  : 			return 0;
; 539  : 		}
; 540  : 		lssproto_HL_recv(fd, flg);

  009f5	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _flg$72[ebp]
  009fb	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  009fe	e8 00 00 00 00	 call	 ?lssproto_HL_recv@@YAXHH@Z ; lssproto_HL_recv
  00a03	83 c4 08	 add	 esp, 8

; 541  : #ifdef _NB_FUNRECV_DEBUG
; 542  : 		printf("\næ¥æ¶[%d]fun:%s|flg:%d",func,"LSSPROTO_HL_RECV", flg);
; 543  : #endif
; 544  : 		SliceCount=0;
; 545  : 		return func;

  00a06	e9 ca f6 ff ff	 jmp	 $LN201@SaDispatch
$LN69@SaDispatch:

; 546  : 	}
; 547  : 	else if (func==LSSPROTO_PR_RECV)

  00a0b	83 f8 35	 cmp	 eax, 53			; 00000035H
  00a0e	75 59		 jne	 SHORT $LN72@SaDispatch

; 548  : 	{
; 549  : 		int request;
; 550  : 		int result;
; 551  : 
; 552  : 		iChecksum += util_deint(2, &request);

  00a10	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _request$48[ebp]
  00a16	50		 push	 eax
  00a17	6a 02		 push	 2
  00a19	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a1e	8b f0		 mov	 esi, eax

; 553  : 		iChecksum += util_deint(3, &result);

  00a20	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _result$71[ebp]
  00a26	50		 push	 eax
  00a27	6a 03		 push	 3
  00a29	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a2e	03 f0		 add	 esi, eax

; 554  : 		util_deint(4, &iChecksumrecv);

  00a30	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00a36	50		 push	 eax
  00a37	6a 04		 push	 4
  00a39	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a3e	83 c4 18	 add	 esp, 24			; 00000018H

; 555  : 		if (iChecksum!=iChecksumrecv) {

  00a41	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00a47	0f 85 10 0e 00
	00		 jne	 $LN195@SaDispatch

; 556  : 			SliceCount=0;
; 557  : 			return 0;
; 558  : 		}
; 559  : 		lssproto_PR_recv(fd, request, result);

  00a4d	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _result$71[ebp]
  00a53	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _request$48[ebp]
  00a59	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00a5c	e8 00 00 00 00	 call	 ?lssproto_PR_recv@@YAXHHH@Z ; lssproto_PR_recv
  00a61	83 c4 0c	 add	 esp, 12			; 0000000cH

; 560  : #ifdef _NB_FUNRECV_DEBUG
; 561  : 		printf("\næ¥æ¶[%d]fun:%s|request:%d|result:%d",func,"LSSPROTO_PR_RECV", request,result);
; 562  : #endif
; 563  : 		SliceCount=0;
; 564  : 		return func;

  00a64	e9 6c f6 ff ff	 jmp	 $LN201@SaDispatch
$LN72@SaDispatch:

; 565  : 	}
; 566  : 	else if (func==LSSPROTO_KS_RECV)

  00a69	83 f8 37	 cmp	 eax, 55			; 00000037H
  00a6c	75 59		 jne	 SHORT $LN75@SaDispatch

; 567  : 	{
; 568  : 		int petarray;
; 569  : 		int result;
; 570  : 
; 571  : 		iChecksum += util_deint(2, &petarray);

  00a6e	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _petarray$47[ebp]
  00a74	50		 push	 eax
  00a75	6a 02		 push	 2
  00a77	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a7c	8b f0		 mov	 esi, eax

; 572  : 		iChecksum += util_deint(3, &result);

  00a7e	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _result$70[ebp]
  00a84	50		 push	 eax
  00a85	6a 03		 push	 3
  00a87	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a8c	03 f0		 add	 esi, eax

; 573  : 		util_deint(4, &iChecksumrecv);

  00a8e	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00a94	50		 push	 eax
  00a95	6a 04		 push	 4
  00a97	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a9c	83 c4 18	 add	 esp, 24			; 00000018H

; 574  : 		if (iChecksum!=iChecksumrecv) {

  00a9f	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00aa5	0f 85 b2 0d 00
	00		 jne	 $LN195@SaDispatch

; 575  : 			SliceCount=0;
; 576  : 			return 0;
; 577  : 		}
; 578  : 		lssproto_KS_recv(fd, petarray, result);

  00aab	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _result$70[ebp]
  00ab1	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _petarray$47[ebp]
  00ab7	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00aba	e8 00 00 00 00	 call	 ?lssproto_KS_recv@@YAXHHH@Z ; lssproto_KS_recv
  00abf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 579  : 		SliceCount=0;
; 580  : 		return func;

  00ac2	e9 0e f6 ff ff	 jmp	 $LN201@SaDispatch
$LN75@SaDispatch:

; 581  : 	}
; 582  : #ifdef _STANDBYPET
; 583  : 	else if (func==LSSPROTO_SPET_RECV)

  00ac7	83 f8 73	 cmp	 eax, 115		; 00000073H
  00aca	75 59		 jne	 SHORT $LN78@SaDispatch

; 584  : 	{
; 585  : 		int standbypet;
; 586  : 		int result;
; 587  : 
; 588  : 		iChecksum += util_deint(2, &standbypet);

  00acc	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _standbypet$46[ebp]
  00ad2	50		 push	 eax
  00ad3	6a 02		 push	 2
  00ad5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00ada	8b f0		 mov	 esi, eax

; 589  : 		iChecksum += util_deint(3, &result);

  00adc	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _result$69[ebp]
  00ae2	50		 push	 eax
  00ae3	6a 03		 push	 3
  00ae5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00aea	03 f0		 add	 esi, eax

; 590  : 		util_deint(4, &iChecksumrecv);

  00aec	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00af2	50		 push	 eax
  00af3	6a 04		 push	 4
  00af5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00afa	83 c4 18	 add	 esp, 24			; 00000018H

; 591  : 		if (iChecksum!=iChecksumrecv) {

  00afd	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00b03	0f 85 54 0d 00
	00		 jne	 $LN195@SaDispatch

; 592  : 			SliceCount=0;
; 593  : 			return 0;
; 594  : 		}
; 595  : 		lssproto_SPET_recv(fd, standbypet, result);

  00b09	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _result$69[ebp]
  00b0f	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _standbypet$46[ebp]
  00b15	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00b18	e8 00 00 00 00	 call	 ?lssproto_SPET_recv@@YAXHHH@Z ; lssproto_SPET_recv
  00b1d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 596  : 		SliceCount=0;
; 597  : 		return func;

  00b20	e9 b0 f5 ff ff	 jmp	 $LN201@SaDispatch
$LN78@SaDispatch:

; 598  : 	}
; 599  : #endif
; 600  : 
; 601  : #ifdef _PETS_SELECTCON
; 602  : 	else if (func==LSSPROTO_PETST_RECV)

  00b25	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00b28	75 59		 jne	 SHORT $LN81@SaDispatch

; 603  : 	{
; 604  : 		int petarray;
; 605  : 		int result;
; 606  : 
; 607  : 		iChecksum += util_deint(2, &petarray);

  00b2a	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _petarray$45[ebp]
  00b30	50		 push	 eax
  00b31	6a 02		 push	 2
  00b33	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00b38	8b f0		 mov	 esi, eax

; 608  : 		iChecksum += util_deint(3, &result);

  00b3a	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _result$68[ebp]
  00b40	50		 push	 eax
  00b41	6a 03		 push	 3
  00b43	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00b48	03 f0		 add	 esi, eax

; 609  : 		util_deint(4, &iChecksumrecv);

  00b4a	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00b50	50		 push	 eax
  00b51	6a 04		 push	 4
  00b53	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00b58	83 c4 18	 add	 esp, 24			; 00000018H

; 610  : 		if (iChecksum!=iChecksumrecv) {

  00b5b	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00b61	0f 85 f6 0c 00
	00		 jne	 $LN195@SaDispatch

; 611  : 			SliceCount=0;
; 612  : 			return 0;
; 613  : 		}
; 614  : 		lssproto_PETST_recv(fd, petarray, result);

  00b67	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _result$68[ebp]
  00b6d	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _petarray$45[ebp]
  00b73	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00b76	e8 00 00 00 00	 call	 ?lssproto_PETST_recv@@YAXHHH@Z ; lssproto_PETST_recv
  00b7b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 615  : 		SliceCount=0;
; 616  : 		return func;

  00b7e	e9 52 f5 ff ff	 jmp	 $LN201@SaDispatch
$LN81@SaDispatch:

; 617  : 	}
; 618  : #endif
; 619  : 	else if (func==LSSPROTO_PS_RECV)

  00b83	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00b86	0f 85 85 00 00
	00		 jne	 $LN84@SaDispatch

; 620  : 	{
; 621  : 		int result;
; 622  : 		int havepetindex;
; 623  : 		int havepetskill;
; 624  : 		int toindex;
; 625  : 
; 626  : 		iChecksum += util_deint(2, &result);

  00b8c	8d 85 dc 7f fe
	ff		 lea	 eax, DWORD PTR _result$10[ebp]
  00b92	50		 push	 eax
  00b93	6a 02		 push	 2
  00b95	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00b9a	8b f0		 mov	 esi, eax

; 627  : 		iChecksum += util_deint(3, &havepetindex);

  00b9c	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _havepetindex$31[ebp]
  00ba2	50		 push	 eax
  00ba3	6a 03		 push	 3
  00ba5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00baa	03 f0		 add	 esi, eax

; 628  : 		iChecksum += util_deint(4, &havepetskill);

  00bac	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _havepetskill$44[ebp]
  00bb2	50		 push	 eax
  00bb3	6a 04		 push	 4
  00bb5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00bba	03 f0		 add	 esi, eax

; 629  : 		iChecksum += util_deint(5, &toindex);

  00bbc	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _toindex$67[ebp]
  00bc2	50		 push	 eax
  00bc3	6a 05		 push	 5
  00bc5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00bca	03 f0		 add	 esi, eax

; 630  : 		util_deint(6, &iChecksumrecv);

  00bcc	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00bd2	50		 push	 eax
  00bd3	6a 06		 push	 6
  00bd5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00bda	83 c4 28	 add	 esp, 40			; 00000028H

; 631  : 		if (iChecksum!=iChecksumrecv) {

  00bdd	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00be3	0f 85 74 0c 00
	00		 jne	 $LN195@SaDispatch

; 632  : 			SliceCount=0;
; 633  : 			return 0;
; 634  : 		}
; 635  : 		lssproto_PS_recv(fd, result, havepetindex, havepetskill, toindex);

  00be9	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _toindex$67[ebp]
  00bef	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _havepetskill$44[ebp]
  00bf5	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _havepetindex$31[ebp]
  00bfb	ff b5 dc 7f fe
	ff		 push	 DWORD PTR _result$10[ebp]
  00c01	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00c04	e8 00 00 00 00	 call	 ?lssproto_PS_recv@@YAXHHHHH@Z ; lssproto_PS_recv
  00c09	83 c4 14	 add	 esp, 20			; 00000014H

; 636  : 		SliceCount=0;
; 637  : 		return func;

  00c0c	e9 c4 f4 ff ff	 jmp	 $LN201@SaDispatch
$LN84@SaDispatch:

; 638  : 	}
; 639  : 	else if (func==LSSPROTO_SKUP_RECV)

  00c11	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  00c14	75 43		 jne	 SHORT $LN87@SaDispatch

; 640  : 	{
; 641  : 		int point;
; 642  : 
; 643  : 		iChecksum += util_deint(2, &point);

  00c16	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _point$66[ebp]
  00c1c	50		 push	 eax
  00c1d	6a 02		 push	 2
  00c1f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00c24	8b f0		 mov	 esi, eax

; 644  : 		util_deint(3, &iChecksumrecv);

  00c26	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00c2c	50		 push	 eax
  00c2d	6a 03		 push	 3
  00c2f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00c34	83 c4 10	 add	 esp, 16			; 00000010H

; 645  : 		if (iChecksum!=iChecksumrecv) {

  00c37	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00c3d	0f 85 1a 0c 00
	00		 jne	 $LN195@SaDispatch

; 646  : 			SliceCount=0;
; 647  : 			return 0;
; 648  : 		}
; 649  : 		lssproto_SKUP_recv(fd, point);

  00c43	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _point$66[ebp]
  00c49	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00c4c	e8 00 00 00 00	 call	 ?lssproto_SKUP_recv@@YAXHH@Z ; lssproto_SKUP_recv
  00c51	83 c4 08	 add	 esp, 8

; 650  : 		SliceCount=0;
; 651  : 		return func;

  00c54	e9 7c f4 ff ff	 jmp	 $LN201@SaDispatch
$LN87@SaDispatch:

; 652  : 	}
; 653  : 	else if (func==LSSPROTO_WN_RECV)

  00c59	83 f8 42	 cmp	 eax, 66			; 00000042H
  00c5c	0f 85 9c 00 00
	00		 jne	 $LN90@SaDispatch

; 654  : 	{
; 655  : 		int windowtype;
; 656  : 		int buttontype;
; 657  : 		int seqno;
; 658  : 		int objindex;
; 659  : 		char data[16384];
; 660  : 
; 661  : 		iChecksum += util_deint(2, &windowtype);

  00c62	8d 85 dc 7f fe
	ff		 lea	 eax, DWORD PTR _windowtype$9[ebp]
  00c68	50		 push	 eax
  00c69	6a 02		 push	 2
  00c6b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00c70	8b f0		 mov	 esi, eax

; 662  : 		iChecksum += util_deint(3, &buttontype);

  00c72	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _buttontype$30[ebp]
  00c78	50		 push	 eax
  00c79	6a 03		 push	 3
  00c7b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00c80	03 f0		 add	 esi, eax

; 663  : 		iChecksum += util_deint(4, &seqno);

  00c82	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _seqno$43[ebp]
  00c88	50		 push	 eax
  00c89	6a 04		 push	 4
  00c8b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00c90	03 f0		 add	 esi, eax

; 664  : 		iChecksum += util_deint(5, &objindex);

  00c92	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _objindex$65[ebp]
  00c98	50		 push	 eax
  00c99	6a 05		 push	 5
  00c9b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00ca0	03 f0		 add	 esi, eax

; 665  : 		iChecksum += util_destring(6, data);

  00ca2	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$103[ebp]
  00ca8	50		 push	 eax
  00ca9	6a 06		 push	 6
  00cab	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00cb0	03 f0		 add	 esi, eax

; 666  : 		util_deint(7, &iChecksumrecv);

  00cb2	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00cb8	50		 push	 eax
  00cb9	6a 07		 push	 7
  00cbb	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00cc0	83 c4 30	 add	 esp, 48			; 00000030H

; 667  : 		if (iChecksum!=iChecksumrecv) {

  00cc3	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00cc9	0f 85 8e 0b 00
	00		 jne	 $LN195@SaDispatch

; 668  : 			SliceCount=0;
; 669  : 			return 0;
; 670  : 		}
; 671  : 		lssproto_WN_recv(fd, windowtype, buttontype, seqno, objindex, data);

  00ccf	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$103[ebp]
  00cd5	50		 push	 eax
  00cd6	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _objindex$65[ebp]
  00cdc	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _seqno$43[ebp]
  00ce2	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _buttontype$30[ebp]
  00ce8	ff b5 dc 7f fe
	ff		 push	 DWORD PTR _windowtype$9[ebp]
  00cee	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00cf1	e8 00 00 00 00	 call	 ?lssproto_WN_recv@@YAXHHHHHPAD@Z ; lssproto_WN_recv
  00cf6	83 c4 18	 add	 esp, 24			; 00000018H

; 672  : 		SliceCount=0;
; 673  : 		return func;

  00cf9	e9 d7 f3 ff ff	 jmp	 $LN201@SaDispatch
$LN90@SaDispatch:

; 674  : 	}
; 675  : 	else if (func==LSSPROTO_EF_RECV)

  00cfe	83 f8 44	 cmp	 eax, 68			; 00000044H
  00d01	75 6d		 jne	 SHORT $LN93@SaDispatch

; 676  : 	{
; 677  : 		int effect;
; 678  : 		int level;
; 679  : 		char option[16384];
; 680  : 
; 681  : 		iChecksum += util_deint(2, &effect);

  00d03	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _effect$42[ebp]
  00d09	50		 push	 eax
  00d0a	6a 02		 push	 2
  00d0c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d11	8b f0		 mov	 esi, eax

; 682  : 		iChecksum += util_deint(3, &level);

  00d13	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _level$64[ebp]
  00d19	50		 push	 eax
  00d1a	6a 03		 push	 3
  00d1c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d21	03 f0		 add	 esi, eax

; 683  : 		iChecksum += util_destring(4, option);

  00d23	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _option$102[ebp]
  00d29	50		 push	 eax
  00d2a	6a 04		 push	 4
  00d2c	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00d31	03 f0		 add	 esi, eax

; 684  : 		util_deint(5, &iChecksumrecv);

  00d33	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00d39	50		 push	 eax
  00d3a	6a 05		 push	 5
  00d3c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d41	83 c4 20	 add	 esp, 32			; 00000020H

; 685  : 		if (iChecksum!=iChecksumrecv) {

  00d44	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00d4a	0f 85 0d 0b 00
	00		 jne	 $LN195@SaDispatch

; 686  : 			SliceCount=0;
; 687  : 			return 0;
; 688  : 		}
; 689  : 		lssproto_EF_recv(fd, effect, level, option);

  00d50	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _option$102[ebp]
  00d56	50		 push	 eax
  00d57	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _level$64[ebp]
  00d5d	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _effect$42[ebp]
  00d63	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00d66	e8 00 00 00 00	 call	 ?lssproto_EF_recv@@YAXHHHPAD@Z ; lssproto_EF_recv

; 690  : 		SliceCount=0;
; 691  : 		return func;

  00d6b	e9 62 f3 ff ff	 jmp	 $LN200@SaDispatch
$LN93@SaDispatch:

; 692  : 	}
; 693  : 	else if (func==LSSPROTO_SE_RECV)

  00d70	83 f8 45	 cmp	 eax, 69			; 00000045H
  00d73	0f 85 85 00 00
	00		 jne	 $LN96@SaDispatch

; 694  : 	{
; 695  : 		int x;
; 696  : 		int y;
; 697  : 		int senumber;
; 698  : 		int sw;
; 699  : 
; 700  : 		iChecksum += util_deint(2, &x);

  00d79	8d 85 dc 7f fe
	ff		 lea	 eax, DWORD PTR _x$8[ebp]
  00d7f	50		 push	 eax
  00d80	6a 02		 push	 2
  00d82	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d87	8b f0		 mov	 esi, eax

; 701  : 		iChecksum += util_deint(3, &y);

  00d89	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _y$29[ebp]
  00d8f	50		 push	 eax
  00d90	6a 03		 push	 3
  00d92	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d97	03 f0		 add	 esi, eax

; 702  : 		iChecksum += util_deint(4, &senumber);

  00d99	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _senumber$41[ebp]
  00d9f	50		 push	 eax
  00da0	6a 04		 push	 4
  00da2	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00da7	03 f0		 add	 esi, eax

; 703  : 		iChecksum += util_deint(5, &sw);

  00da9	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _sw$63[ebp]
  00daf	50		 push	 eax
  00db0	6a 05		 push	 5
  00db2	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00db7	03 f0		 add	 esi, eax

; 704  : 		util_deint(6, &iChecksumrecv);

  00db9	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00dbf	50		 push	 eax
  00dc0	6a 06		 push	 6
  00dc2	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00dc7	83 c4 28	 add	 esp, 40			; 00000028H

; 705  : 		if (iChecksum!=iChecksumrecv) {

  00dca	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00dd0	0f 85 87 0a 00
	00		 jne	 $LN195@SaDispatch

; 706  : 			SliceCount=0;
; 707  : 			return 0;
; 708  : 		}
; 709  : 		lssproto_SE_recv(fd, x, y, senumber, sw);

  00dd6	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _sw$63[ebp]
  00ddc	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _senumber$41[ebp]
  00de2	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _y$29[ebp]
  00de8	ff b5 dc 7f fe
	ff		 push	 DWORD PTR _x$8[ebp]
  00dee	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00df1	e8 00 00 00 00	 call	 ?lssproto_SE_recv@@YAXHHHHH@Z ; lssproto_SE_recv
  00df6	83 c4 14	 add	 esp, 20			; 00000014H

; 710  : 		SliceCount=0;
; 711  : 		return func;

  00df9	e9 d7 f2 ff ff	 jmp	 $LN201@SaDispatch
$LN96@SaDispatch:

; 712  : 	}
; 713  : 	else if (func==LSSPROTO_CLIENTLOGIN_RECV)

  00dfe	83 f8 48	 cmp	 eax, 72			; 00000048H
  00e01	75 44		 jne	 SHORT $LN99@SaDispatch

; 714  : 	{
; 715  : 		char result[16384];
; 716  : 
; 717  : 		iChecksum += util_destring(2, result);

  00e03	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$101[ebp]
  00e09	50		 push	 eax
  00e0a	6a 02		 push	 2
  00e0c	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00e11	8b f0		 mov	 esi, eax

; 718  : 		util_deint(3, &iChecksumrecv);

  00e13	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00e19	50		 push	 eax
  00e1a	6a 03		 push	 3
  00e1c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00e21	83 c4 10	 add	 esp, 16			; 00000010H

; 719  : 		if (iChecksum!=iChecksumrecv) {

  00e24	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00e2a	0f 85 2d 0a 00
	00		 jne	 $LN195@SaDispatch

; 720  : 			SliceCount=0;
; 721  : 			return 0;
; 722  : 		}
; 723  : 		lssproto_ClientLogin_recv(fd, result);

  00e30	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$101[ebp]
  00e36	50		 push	 eax
  00e37	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00e3a	e8 00 00 00 00	 call	 ?lssproto_ClientLogin_recv@@YAXHPAD@Z ; lssproto_ClientLogin_recv
  00e3f	83 c4 08	 add	 esp, 8

; 724  : 		SliceCount=0;
; 725  : 		return func;

  00e42	e9 8e f2 ff ff	 jmp	 $LN201@SaDispatch
$LN99@SaDispatch:

; 726  : 	}
; 727  : 	else if (func==LSSPROTO_CREATENEWCHAR_RECV) 

  00e47	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00e4a	75 5b		 jne	 SHORT $LN102@SaDispatch

; 728  : 	{
; 729  : 		char result[16384];
; 730  : 		char data[16384];
; 731  : 
; 732  : 		iChecksum += util_destring(2, result);

  00e4c	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _result$95[ebp]
  00e52	50		 push	 eax
  00e53	6a 02		 push	 2
  00e55	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00e5a	8b f0		 mov	 esi, eax

; 733  : 		iChecksum += util_destring(3, data);

  00e5c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$100[ebp]
  00e62	50		 push	 eax
  00e63	6a 03		 push	 3
  00e65	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00e6a	03 f0		 add	 esi, eax

; 734  : 		util_deint(4, &iChecksumrecv);

  00e6c	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00e72	50		 push	 eax
  00e73	6a 04		 push	 4
  00e75	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00e7a	83 c4 18	 add	 esp, 24			; 00000018H

; 735  : 		if (iChecksum!=iChecksumrecv) {

  00e7d	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00e83	0f 85 d4 09 00
	00		 jne	 $LN195@SaDispatch

; 736  : 			SliceCount=0;
; 737  : 			return 0;
; 738  : 		}
; 739  : 		lssproto_CreateNewChar_recv(fd, result, data);

  00e89	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _data$100[ebp]
  00e8f	50		 push	 eax
  00e90	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _result$95[ebp]
  00e96	50		 push	 eax
  00e97	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00e9a	e8 00 00 00 00	 call	 ?lssproto_CreateNewChar_recv@@YAXHPAD0@Z ; lssproto_CreateNewChar_recv
  00e9f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 740  : 		SliceCount=0;
; 741  : 		return func;

  00ea2	e9 2e f2 ff ff	 jmp	 $LN201@SaDispatch
$LN102@SaDispatch:

; 742  : 	}
; 743  : 	else if (func==LSSPROTO_CHARDELETE_RECV) 

  00ea7	83 f8 4c	 cmp	 eax, 76			; 0000004cH
  00eaa	75 5b		 jne	 SHORT $LN105@SaDispatch

; 744  : 	{
; 745  : 		char result[16384];
; 746  : 		char data[16384];
; 747  : 
; 748  : 		iChecksum += util_destring(2, result);

  00eac	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$99[ebp]
  00eb2	50		 push	 eax
  00eb3	6a 02		 push	 2
  00eb5	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00eba	8b f0		 mov	 esi, eax

; 749  : 		iChecksum += util_destring(3, data);

  00ebc	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$94[ebp]
  00ec2	50		 push	 eax
  00ec3	6a 03		 push	 3
  00ec5	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00eca	03 f0		 add	 esi, eax

; 750  : 		util_deint(4, &iChecksumrecv);

  00ecc	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00ed2	50		 push	 eax
  00ed3	6a 04		 push	 4
  00ed5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00eda	83 c4 18	 add	 esp, 24			; 00000018H

; 751  : 		if (iChecksum!=iChecksumrecv) {

  00edd	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00ee3	0f 85 74 09 00
	00		 jne	 $LN195@SaDispatch

; 752  : 			SliceCount=0;
; 753  : 			return 0;
; 754  : 		}
; 755  : 		lssproto_CharDelete_recv(fd, result, data);

  00ee9	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$94[ebp]
  00eef	50		 push	 eax
  00ef0	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$99[ebp]
  00ef6	50		 push	 eax
  00ef7	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00efa	e8 00 00 00 00	 call	 ?lssproto_CharDelete_recv@@YAXHPAD0@Z ; lssproto_CharDelete_recv
  00eff	83 c4 0c	 add	 esp, 12			; 0000000cH

; 756  : 		SliceCount=0;
; 757  : 		return func;

  00f02	e9 ce f1 ff ff	 jmp	 $LN201@SaDispatch
$LN105@SaDispatch:

; 758  : 	}
; 759  : 	else if (func==LSSPROTO_CHARLOGIN_RECV) 

  00f07	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00f0a	75 5b		 jne	 SHORT $LN108@SaDispatch

; 760  : 	{
; 761  : 		char result[16384];
; 762  : 		char data[16384];
; 763  : 
; 764  : 		iChecksum += util_destring(2, result);

  00f0c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$98[ebp]
  00f12	50		 push	 eax
  00f13	6a 02		 push	 2
  00f15	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00f1a	8b f0		 mov	 esi, eax

; 765  : 		iChecksum += util_destring(3, data);

  00f1c	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$93[ebp]
  00f22	50		 push	 eax
  00f23	6a 03		 push	 3
  00f25	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00f2a	03 f0		 add	 esi, eax

; 766  : 		util_deint(4, &iChecksumrecv);

  00f2c	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00f32	50		 push	 eax
  00f33	6a 04		 push	 4
  00f35	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00f3a	83 c4 18	 add	 esp, 24			; 00000018H

; 767  : 		if (iChecksum!=iChecksumrecv) {

  00f3d	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00f43	0f 85 14 09 00
	00		 jne	 $LN195@SaDispatch

; 768  : 			SliceCount=0;
; 769  : 			return 0;
; 770  : 		}
; 771  : 		lssproto_CharLogin_recv(fd, result, data);

  00f49	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$93[ebp]
  00f4f	50		 push	 eax
  00f50	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$98[ebp]
  00f56	50		 push	 eax
  00f57	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00f5a	e8 00 00 00 00	 call	 ?lssproto_CharLogin_recv@@YAXHPAD0@Z ; lssproto_CharLogin_recv
  00f5f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 772  : 		SliceCount=0;
; 773  : 		return func;

  00f62	e9 6e f1 ff ff	 jmp	 $LN201@SaDispatch
$LN108@SaDispatch:

; 774  : 	}
; 775  : 	else if (func==LSSPROTO_CHARLIST_RECV) 

  00f67	83 f8 50	 cmp	 eax, 80			; 00000050H
  00f6a	75 5b		 jne	 SHORT $LN111@SaDispatch

; 776  : 	{
; 777  : 		char result[16384];
; 778  : 		char data[16384];
; 779  : 
; 780  : 		iChecksum += util_destring(2, result);

  00f6c	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$97[ebp]
  00f72	50		 push	 eax
  00f73	6a 02		 push	 2
  00f75	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00f7a	8b f0		 mov	 esi, eax

; 781  : 		iChecksum += util_destring(3, data);

  00f7c	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$92[ebp]
  00f82	50		 push	 eax
  00f83	6a 03		 push	 3
  00f85	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00f8a	03 f0		 add	 esi, eax

; 782  : 		util_deint(4, &iChecksumrecv);

  00f8c	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00f92	50		 push	 eax
  00f93	6a 04		 push	 4
  00f95	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00f9a	83 c4 18	 add	 esp, 24			; 00000018H

; 783  : 		if (iChecksum!=iChecksumrecv) {

  00f9d	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  00fa3	0f 85 b4 08 00
	00		 jne	 $LN195@SaDispatch

; 784  : 			SliceCount=0;
; 785  : 			return 0;
; 786  : 		}
; 787  : 		lssproto_CharList_recv(fd, result, data);

  00fa9	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$92[ebp]
  00faf	50		 push	 eax
  00fb0	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$97[ebp]
  00fb6	50		 push	 eax
  00fb7	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  00fba	e8 00 00 00 00	 call	 ?lssproto_CharList_recv@@YAXHPAD0@Z ; lssproto_CharList_recv
  00fbf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 788  : 		SliceCount=0;
; 789  : 		return func;

  00fc2	e9 0e f1 ff ff	 jmp	 $LN201@SaDispatch
$LN111@SaDispatch:

; 790  : 	}
; 791  : 	else if (func==LSSPROTO_CHARLOGOUT_RECV) 

  00fc7	83 f8 52	 cmp	 eax, 82			; 00000052H
  00fca	75 5b		 jne	 SHORT $LN114@SaDispatch

; 792  : 	{
; 793  : 		char result[16384];
; 794  : 		char data[16384];
; 795  : 
; 796  : 		iChecksum += util_destring(2, result);

  00fcc	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$96[ebp]
  00fd2	50		 push	 eax
  00fd3	6a 02		 push	 2
  00fd5	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00fda	8b f0		 mov	 esi, eax

; 797  : 		iChecksum += util_destring(3, data);

  00fdc	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$91[ebp]
  00fe2	50		 push	 eax
  00fe3	6a 03		 push	 3
  00fe5	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00fea	03 f0		 add	 esi, eax

; 798  : 		util_deint(4, &iChecksumrecv);

  00fec	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00ff2	50		 push	 eax
  00ff3	6a 04		 push	 4
  00ff5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00ffa	83 c4 18	 add	 esp, 24			; 00000018H

; 799  : 		if (iChecksum!=iChecksumrecv) {

  00ffd	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01003	0f 85 54 08 00
	00		 jne	 $LN195@SaDispatch

; 800  : 			SliceCount=0;
; 801  : 			return 0;
; 802  : 		}
; 803  : 		lssproto_CharLogout_recv(fd, result, data);

  01009	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$91[ebp]
  0100f	50		 push	 eax
  01010	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _result$96[ebp]
  01016	50		 push	 eax
  01017	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0101a	e8 00 00 00 00	 call	 ?lssproto_CharLogout_recv@@YAXHPAD0@Z ; lssproto_CharLogout_recv
  0101f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 804  : 		SliceCount=0;
; 805  : 		return func;

  01022	e9 ae f0 ff ff	 jmp	 $LN201@SaDispatch
$LN114@SaDispatch:

; 806  : 	}
; 807  : 	else if (func==LSSPROTO_PROCGET_RECV) 

  01027	83 f8 54	 cmp	 eax, 84			; 00000054H
  0102a	75 44		 jne	 SHORT $LN117@SaDispatch

; 808  : 	{
; 809  : 		char data[16384];
; 810  : 
; 811  : 		iChecksum += util_destring(2, data);

  0102c	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$90[ebp]
  01032	50		 push	 eax
  01033	6a 02		 push	 2
  01035	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0103a	8b f0		 mov	 esi, eax

; 812  : 		util_deint(3, &iChecksumrecv);

  0103c	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01042	50		 push	 eax
  01043	6a 03		 push	 3
  01045	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0104a	83 c4 10	 add	 esp, 16			; 00000010H

; 813  : 		if (iChecksum!=iChecksumrecv) {

  0104d	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01053	0f 85 04 08 00
	00		 jne	 $LN195@SaDispatch

; 814  : 			SliceCount=0;
; 815  : 			return 0;
; 816  : 		}
; 817  : 		lssproto_ProcGet_recv(fd, data);

  01059	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$90[ebp]
  0105f	50		 push	 eax
  01060	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01063	e8 00 00 00 00	 call	 ?lssproto_ProcGet_recv@@YAXHPAD@Z ; lssproto_ProcGet_recv
  01068	83 c4 08	 add	 esp, 8

; 818  : 		SliceCount=0;
; 819  : 		return func;

  0106b	e9 65 f0 ff ff	 jmp	 $LN201@SaDispatch
$LN117@SaDispatch:

; 820  : 	}
; 821  : 	else if (func==LSSPROTO_PLAYERNUMGET_RECV) 

  01070	83 f8 56	 cmp	 eax, 86			; 00000056H
  01073	75 59		 jne	 SHORT $LN120@SaDispatch

; 822  : 	{
; 823  : 		int logincount;
; 824  : 		int player;
; 825  : 
; 826  : 		iChecksum += util_deint(2, &logincount);

  01075	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _logincount$40[ebp]
  0107b	50		 push	 eax
  0107c	6a 02		 push	 2
  0107e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01083	8b f0		 mov	 esi, eax

; 827  : 		iChecksum += util_deint(3, &player);

  01085	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _player$62[ebp]
  0108b	50		 push	 eax
  0108c	6a 03		 push	 3
  0108e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01093	03 f0		 add	 esi, eax

; 828  : 		util_deint(4, &iChecksumrecv);

  01095	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0109b	50		 push	 eax
  0109c	6a 04		 push	 4
  0109e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  010a3	83 c4 18	 add	 esp, 24			; 00000018H

; 829  : 		if (iChecksum!=iChecksumrecv) {

  010a6	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  010ac	0f 85 ab 07 00
	00		 jne	 $LN195@SaDispatch

; 830  : 			SliceCount=0;
; 831  : 			return 0;
; 832  : 		}
; 833  : 		lssproto_PlayerNumGet_recv(fd, logincount, player);

  010b2	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _player$62[ebp]
  010b8	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _logincount$40[ebp]
  010be	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  010c1	e8 00 00 00 00	 call	 ?lssproto_PlayerNumGet_recv@@YAXHHH@Z ; lssproto_PlayerNumGet_recv
  010c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 834  : 		SliceCount=0;
; 835  : 		return func;

  010c9	e9 07 f0 ff ff	 jmp	 $LN201@SaDispatch
$LN120@SaDispatch:

; 836  : 	}
; 837  : 	else if (func==LSSPROTO_ECHO_RECV) 

  010ce	83 f8 58	 cmp	 eax, 88			; 00000058H
  010d1	75 44		 jne	 SHORT $LN123@SaDispatch

; 838  : 	{
; 839  : 		char test[16384];
; 840  : 
; 841  : 		iChecksum += util_destring(2, test);

  010d3	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _test$89[ebp]
  010d9	50		 push	 eax
  010da	6a 02		 push	 2
  010dc	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  010e1	8b f0		 mov	 esi, eax

; 842  : 		util_deint(3, &iChecksumrecv);

  010e3	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  010e9	50		 push	 eax
  010ea	6a 03		 push	 3
  010ec	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  010f1	83 c4 10	 add	 esp, 16			; 00000010H

; 843  : 		if (iChecksum!=iChecksumrecv) {

  010f4	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  010fa	0f 85 5d 07 00
	00		 jne	 $LN195@SaDispatch

; 844  : 			SliceCount=0;
; 845  : 			return 0;
; 846  : 		}
; 847  : 		lssproto_Echo_recv(fd, test);

  01100	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _test$89[ebp]
  01106	50		 push	 eax
  01107	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0110a	e8 00 00 00 00	 call	 ?lssproto_Echo_recv@@YAXHPAD@Z ; lssproto_Echo_recv
  0110f	83 c4 08	 add	 esp, 8

; 848  : 		SliceCount=0;
; 849  : 		return func;

  01112	e9 be ef ff ff	 jmp	 $LN201@SaDispatch
$LN123@SaDispatch:

; 850  : 	}
; 851  : 	else if (func==LSSPROTO_NU_RECV)

  01117	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0111a	75 43		 jne	 SHORT $LN126@SaDispatch

; 852  : 	{
; 853  : 		int AddCount;
; 854  : 
; 855  : 		iChecksum += util_deint(2, &AddCount);

  0111c	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _AddCount$61[ebp]
  01122	50		 push	 eax
  01123	6a 02		 push	 2
  01125	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0112a	8b f0		 mov	 esi, eax

; 856  : 		util_deint(3, &iChecksumrecv);

  0112c	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01132	50		 push	 eax
  01133	6a 03		 push	 3
  01135	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0113a	83 c4 10	 add	 esp, 16			; 00000010H

; 857  : 		if (iChecksum!=iChecksumrecv) {

  0113d	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01143	0f 85 14 07 00
	00		 jne	 $LN195@SaDispatch

; 858  : 			SliceCount=0;
; 859  : 			return 0;
; 860  : 		}
; 861  : 		lssproto_NU_recv(fd, AddCount);

  01149	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _AddCount$61[ebp]
  0114f	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01152	e8 00 00 00 00	 call	 ?lssproto_NU_recv@@YAXHH@Z ; lssproto_NU_recv
  01157	83 c4 08	 add	 esp, 8

; 862  : 		SliceCount=0;
; 863  : 		return func;

  0115a	e9 76 ef ff ff	 jmp	 $LN201@SaDispatch
$LN126@SaDispatch:

; 864  : 	}
; 865  : 	else if (func==LSSPROTO_TD_RECV) 

  0115f	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  01162	75 44		 jne	 SHORT $LN129@SaDispatch

; 866  : 	{
; 867  : 		char data[16384];
; 868  : 
; 869  : 		iChecksum += util_destring(2, data);

  01164	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$88[ebp]
  0116a	50		 push	 eax
  0116b	6a 02		 push	 2
  0116d	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01172	8b f0		 mov	 esi, eax

; 870  : 		util_deint(3, &iChecksumrecv);

  01174	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0117a	50		 push	 eax
  0117b	6a 03		 push	 3
  0117d	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01182	83 c4 10	 add	 esp, 16			; 00000010H

; 871  : 		if (iChecksum!=iChecksumrecv) {

  01185	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0118b	0f 85 cc 06 00
	00		 jne	 $LN195@SaDispatch

; 872  : 			SliceCount=0;
; 873  : 			return 0;
; 874  : 		}
; 875  : 		lssproto_TD_recv(fd, data);

  01191	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$88[ebp]
  01197	50		 push	 eax
  01198	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0119b	e8 00 00 00 00	 call	 ?lssproto_TD_recv@@YAXHPAD@Z ; lssproto_TD_recv
  011a0	83 c4 08	 add	 esp, 8

; 876  : 		SliceCount=0;
; 877  : 		return func;

  011a3	e9 2d ef ff ff	 jmp	 $LN201@SaDispatch
$LN129@SaDispatch:

; 878  : 	}
; 879  : 	else if (func==LSSPROTO_FM_RECV) 

  011a8	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  011ab	75 44		 jne	 SHORT $LN132@SaDispatch

; 880  : 	{
; 881  : 		char data[16384];
; 882  : 
; 883  : 		iChecksum += util_destring(2, data);

  011ad	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$87[ebp]
  011b3	50		 push	 eax
  011b4	6a 02		 push	 2
  011b6	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  011bb	8b f0		 mov	 esi, eax

; 884  : 		util_deint(3, &iChecksumrecv);

  011bd	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  011c3	50		 push	 eax
  011c4	6a 03		 push	 3
  011c6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  011cb	83 c4 10	 add	 esp, 16			; 00000010H

; 885  : 		if (iChecksum!=iChecksumrecv) {

  011ce	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  011d4	0f 85 83 06 00
	00		 jne	 $LN195@SaDispatch

; 886  : 			SliceCount=0;
; 887  : 			return 0;
; 888  : 		}
; 889  : 
; 890  : 		LogToRecvdata( data );
; 891  : 
; 892  : 		lssproto_FM_recv(fd, data);

  011da	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$87[ebp]
  011e0	50		 push	 eax
  011e1	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  011e4	e8 00 00 00 00	 call	 ?lssproto_FM_recv@@YAXHPAD@Z ; lssproto_FM_recv
  011e9	83 c4 08	 add	 esp, 8

; 893  : 		SliceCount=0;
; 894  : 		return func;

  011ec	e9 e4 ee ff ff	 jmp	 $LN201@SaDispatch
$LN132@SaDispatch:

; 895  : 	}
; 896  : 
; 897  : #ifdef _ITEM_CRACKER
; 898  : 	else if(func==LSSPROTO_IC_RECV)

  011f1	83 f8 64	 cmp	 eax, 100		; 00000064H
  011f4	75 59		 jne	 SHORT $LN135@SaDispatch

; 899  : 	{
; 900  : 		int x, y;		
; 901  : 		iChecksum += util_deint( 2, &x);

  011f6	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _x$39[ebp]
  011fc	50		 push	 eax
  011fd	6a 02		 push	 2
  011ff	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01204	8b f0		 mov	 esi, eax

; 902  : 		iChecksum += util_deint( 3, &y);

  01206	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _y$60[ebp]
  0120c	50		 push	 eax
  0120d	6a 03		 push	 3
  0120f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01214	03 f0		 add	 esi, eax

; 903  : 		util_deint( 4, &iChecksumrecv);

  01216	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0121c	50		 push	 eax
  0121d	6a 04		 push	 4
  0121f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01224	83 c4 18	 add	 esp, 24			; 00000018H

; 904  : 		if(iChecksum!=iChecksumrecv){

  01227	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0122d	0f 85 2a 06 00
	00		 jne	 $LN195@SaDispatch

; 905  : 			SliceCount=0;
; 906  : 			return 0;
; 907  : 		}		
; 908  : 		lssproto_IC_recv(fd, x, y);

  01233	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _y$60[ebp]
  01239	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _x$39[ebp]
  0123f	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01242	e8 00 00 00 00	 call	 ?lssproto_IC_recv@@YAXHHH@Z ; lssproto_IC_recv
  01247	83 c4 0c	 add	 esp, 12			; 0000000cH

; 909  : 		SliceCount=0;
; 910  : 		return func;

  0124a	e9 86 ee ff ff	 jmp	 $LN201@SaDispatch
$LN135@SaDispatch:

; 911  : 	}
; 912  : #endif
; 913  : #ifdef _CHECK_GAMESPEED
; 914  : 	else if ( func == LSSPROTO_CS_RECV ) 
; 915  : 	{
; 916  : 		int deltimes=0;
; 917  : 		iChecksum += util_deint(2, &deltimes);
; 918  : 		util_deint(3, &iChecksumrecv);
; 919  : 		if (iChecksum!=iChecksumrecv) {
; 920  : 			SliceCount=0;
; 921  : 			return 0;
; 922  : 		}
; 923  : 		lssproto_CS_recv(fd, deltimes);
; 924  : 		SliceCount=0;
; 925  : 		return func;
; 926  : 	}
; 927  : #endif
; 928  : 
; 929  : #ifdef _MAGIC_NOCAST//æ²é»
; 930  : 	else if (func==LSSPROTO_NC_RECV) 

  0124f	83 f8 65	 cmp	 eax, 101		; 00000065H
  01252	75 43		 jne	 SHORT $LN138@SaDispatch

; 931  : 	{
; 932  : 		int flg;
; 933  : 
; 934  : 		iChecksum += util_deint(2, &flg);

  01254	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _flg$59[ebp]
  0125a	50		 push	 eax
  0125b	6a 02		 push	 2
  0125d	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01262	8b f0		 mov	 esi, eax

; 935  : 		util_deint(3, &iChecksumrecv);

  01264	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0126a	50		 push	 eax
  0126b	6a 03		 push	 3
  0126d	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01272	83 c4 10	 add	 esp, 16			; 00000010H

; 936  : 		if (iChecksum!=iChecksumrecv) {

  01275	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0127b	0f 85 dc 05 00
	00		 jne	 $LN195@SaDispatch

; 937  : 			SliceCount=0;
; 938  : 			return 0;
; 939  : 		}
; 940  : 		lssproto_NC_recv(fd, flg);

  01281	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _flg$59[ebp]
  01287	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0128a	e8 00 00 00 00	 call	 ?lssproto_NC_recv@@YAXHH@Z ; lssproto_NC_recv
  0128f	83 c4 08	 add	 esp, 8

; 941  : 		SliceCount=0;
; 942  : 		return func;

  01292	e9 3e ee ff ff	 jmp	 $LN201@SaDispatch
$LN138@SaDispatch:

; 943  : 	}
; 944  : #endif
; 945  : #ifdef _CHATROOMPROTOCOL			// (ä¸å¯å¼) Syu ADD èå¤©å®¤é¢é
; 946  : 	else if ( func == LSSPROTO_CHATROOM_RECV ) 

  01297	83 f8 71	 cmp	 eax, 113		; 00000071H
  0129a	75 44		 jne	 SHORT $LN141@SaDispatch

; 947  : 	{
; 948  : 		char data[16384];
; 949  : 
; 950  : 		iChecksum += util_destring(2, data);

  0129c	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$86[ebp]
  012a2	50		 push	 eax
  012a3	6a 02		 push	 2
  012a5	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  012aa	8b f0		 mov	 esi, eax

; 951  : 		util_deint(3, &iChecksumrecv);

  012ac	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  012b2	50		 push	 eax
  012b3	6a 03		 push	 3
  012b5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  012ba	83 c4 10	 add	 esp, 16			; 00000010H

; 952  : 		if (iChecksum!=iChecksumrecv) {

  012bd	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  012c3	0f 85 94 05 00
	00		 jne	 $LN195@SaDispatch

; 953  : 			SliceCount=0;
; 954  : 			return 0;
; 955  : 		}
; 956  : 		lssproto_CHATROOM_recv(fd, data);

  012c9	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$86[ebp]
  012cf	50		 push	 eax
  012d0	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  012d3	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_recv@@YAXHPAD@Z ; lssproto_CHATROOM_recv
  012d8	83 c4 08	 add	 esp, 8

; 957  : 		SliceCount=0;
; 958  : 		return func;

  012db	e9 f5 ed ff ff	 jmp	 $LN201@SaDispatch
$LN141@SaDispatch:

; 959  : 	}
; 960  : #endif
; 961  : #ifdef _NEWREQUESTPROTOCOL			// (ä¸å¯å¼) Syu ADD æ°å¢Protocolè¦æ±ç»é¡¹
; 962  : 	else if ( func == LSSPROTO_RESIST_RECV ) 

  012e0	83 f8 6d	 cmp	 eax, 109		; 0000006dH
  012e3	75 44		 jne	 SHORT $LN144@SaDispatch

; 963  : 	{
; 964  : 		char data[16384];
; 965  : 
; 966  : 		iChecksum += util_destring(2, data);

  012e5	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$85[ebp]
  012eb	50		 push	 eax
  012ec	6a 02		 push	 2
  012ee	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  012f3	8b f0		 mov	 esi, eax

; 967  : 		util_deint(3, &iChecksumrecv);

  012f5	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  012fb	50		 push	 eax
  012fc	6a 03		 push	 3
  012fe	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01303	83 c4 10	 add	 esp, 16			; 00000010H

; 968  : 		if (iChecksum!=iChecksumrecv) {

  01306	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0130c	0f 85 4b 05 00
	00		 jne	 $LN195@SaDispatch

; 969  : 			SliceCount=0;
; 970  : 			return 0;
; 971  : 		}
; 972  : 		lssproto_RESIST_recv(fd, data);

  01312	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$85[ebp]
  01318	50		 push	 eax
  01319	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0131c	e8 00 00 00 00	 call	 ?lssproto_RESIST_recv@@YAXHPAD@Z ; lssproto_RESIST_recv
  01321	83 c4 08	 add	 esp, 8

; 973  : 		SliceCount=0;
; 974  : 		return func;

  01324	e9 ac ed ff ff	 jmp	 $LN201@SaDispatch
$LN144@SaDispatch:

; 975  : 	}
; 976  : #endif
; 977  : 
; 978  : #ifdef _ALCHEPLUS
; 979  : 	else if ( func == LSSPROTO_ALCHEPLUS_RECV ) 

  01329	3d 88 00 00 00	 cmp	 eax, 136		; 00000088H
  0132e	75 44		 jne	 SHORT $LN147@SaDispatch

; 980  : 	{
; 981  : 		char data[16384];
; 982  : 
; 983  : 		iChecksum += util_destring(2, data);

  01330	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$84[ebp]
  01336	50		 push	 eax
  01337	6a 02		 push	 2
  01339	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0133e	8b f0		 mov	 esi, eax

; 984  : 		util_deint(3, &iChecksumrecv);

  01340	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01346	50		 push	 eax
  01347	6a 03		 push	 3
  01349	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0134e	83 c4 10	 add	 esp, 16			; 00000010H

; 985  : 		if (iChecksum!=iChecksumrecv) {

  01351	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01357	0f 85 00 05 00
	00		 jne	 $LN195@SaDispatch

; 986  : 			SliceCount=0;
; 987  : 			return 0;
; 988  : 		}
; 989  : 		lssproto_ALCHEPLUS_recv(fd, data);

  0135d	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$84[ebp]
  01363	50		 push	 eax
  01364	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01367	e8 00 00 00 00	 call	 ?lssproto_ALCHEPLUS_recv@@YAXHPAD@Z ; lssproto_ALCHEPLUS_recv
  0136c	83 c4 08	 add	 esp, 8

; 990  : 		SliceCount=0;
; 991  : 		return func;

  0136f	e9 61 ed ff ff	 jmp	 $LN201@SaDispatch
$LN147@SaDispatch:

; 992  : 	}
; 993  : #endif
; 994  : 
; 995  : 	else if (func == LSSPROTO_BATTLEBUTTON_RECV)

  01374	3d 96 00 00 00	 cmp	 eax, 150		; 00000096H
  01379	75 59		 jne	 SHORT $LN150@SaDispatch

; 996  : 	{
; 997  : 		int help, escp;
; 998  : 		iChecksum += util_deint(2, &help);

  0137b	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _help$38[ebp]
  01381	50		 push	 eax
  01382	6a 02		 push	 2
  01384	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01389	8b f0		 mov	 esi, eax

; 999  : 		iChecksum += util_deint(3, &escp);

  0138b	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _escp$58[ebp]
  01391	50		 push	 eax
  01392	6a 03		 push	 3
  01394	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01399	03 f0		 add	 esi, eax

; 1000 : 		util_deint(4, &iChecksumrecv);

  0139b	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  013a1	50		 push	 eax
  013a2	6a 04		 push	 4
  013a4	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  013a9	83 c4 18	 add	 esp, 24			; 00000018H

; 1001 : 		if (iChecksum != iChecksumrecv) {

  013ac	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  013b2	0f 85 93 00 00
	00		 jne	 $LN199@SaDispatch

; 1002 : 			SliceCount = 0;
; 1003 : 			return 1;
; 1004 : 		}
; 1005 : 
; 1006 : 		lssproto_BATTLEBUTTON_recv(fd, help, escp);

  013b8	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _escp$58[ebp]
  013be	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _help$38[ebp]
  013c4	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  013c7	e8 00 00 00 00	 call	 ?lssproto_BATTLEBUTTON_recv@@YAXHHH@Z ; lssproto_BATTLEBUTTON_recv
  013cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1007 : 		SliceCount = 0;
; 1008 : 		return func;

  013cf	e9 01 ed ff ff	 jmp	 $LN201@SaDispatch
$LN150@SaDispatch:

; 1009 : 	}
; 1010 : 	else if (func == LSSPROTO_CHAREFFECT_RECV)

  013d4	3d d6 00 00 00	 cmp	 eax, 214		; 000000d6H
  013d9	75 40		 jne	 SHORT $LN153@SaDispatch

; 1011 : 	{
; 1012 : 		char data[16384];
; 1013 : 
; 1014 : 		iChecksum += util_destring(2, data);

  013db	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$83[ebp]
  013e1	50		 push	 eax
  013e2	6a 02		 push	 2
  013e4	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  013e9	8b f0		 mov	 esi, eax

; 1015 : 		util_deint(3, &iChecksumrecv);

  013eb	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  013f1	50		 push	 eax
  013f2	6a 03		 push	 3
  013f4	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  013f9	83 c4 10	 add	 esp, 16			; 00000010H

; 1016 : 		if (iChecksum != iChecksumrecv) {

  013fc	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01402	75 47		 jne	 SHORT $LN199@SaDispatch

; 1017 : 			SliceCount = 0;
; 1018 : 			return 1;
; 1019 : 		}
; 1020 : 
; 1021 : 		lssproto_CHAREFFECT_recv(fd, data);

  01404	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$83[ebp]
  0140a	50		 push	 eax
  0140b	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0140e	e8 00 00 00 00	 call	 ?lssproto_CHAREFFECT_recv@@YAXHPAD@Z ; lssproto_CHAREFFECT_recv
  01413	83 c4 08	 add	 esp, 8

; 1022 : 		SliceCount = 0;
; 1023 : 		return func;

  01416	e9 ba ec ff ff	 jmp	 $LN201@SaDispatch
$LN153@SaDispatch:

; 1024 : 	}
; 1025 : 
; 1026 : 	else if (func == LSSPROTO_æ¥è¯¢åç¯_RECV)

  0141b	3d d5 00 00 00	 cmp	 eax, 213		; 000000d5H
  01420	75 5b		 jne	 SHORT $LN156@SaDispatch

; 1027 : 	{
; 1028 : 		char data[16384];
; 1029 : 
; 1030 : 		iChecksum += util_destring(2, data);

  01422	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$82[ebp]
  01428	50		 push	 eax
  01429	6a 02		 push	 2
  0142b	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01430	8b f0		 mov	 esi, eax

; 1031 : 		util_deint(3, &iChecksumrecv);

  01432	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01438	50		 push	 eax
  01439	6a 03		 push	 3
  0143b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01440	83 c4 10	 add	 esp, 16			; 00000010H

; 1032 : 		if (iChecksum != iChecksumrecv) {

  01443	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01449	74 1e		 je	 SHORT $LN158@SaDispatch
$LN199@SaDispatch:

; 1033 : 			SliceCount = 0;

  0144b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1034 : 			return 1;

  01455	b8 01 00 00 00	 mov	 eax, 1
  0145a	5e		 pop	 esi

; 1251 : 	}
; 1252 : 
; 1253 : #ifdef _PK2007
; 1254 : 	else if( func == LSSPROTO_PKLIST_RECV )
; 1255 : 	{
; 1256 : 		int count;
; 1257 : 		char data[16384];
; 1258 : 		iChecksum += util_deint(2, &count);
; 1259 : 		iChecksum += util_destring(3, data);
; 1260 : 		util_deint(4, &iChecksumrecv);
; 1261 : 		if (iChecksum!=iChecksumrecv) {
; 1262 : 			SliceCount=0;
; 1263 : 			return 0;
; 1264 : 		}
; 1265 : 		lssproto_pkList_recv(fd, count, data);
; 1266 : 		SliceCount=0;
; 1267 : 		return func;
; 1268 : 	}
; 1269 : #endif
; 1270 : 	SliceCount=0;
; 1271 : 	}
; 1272 : 	return 0;
; 1273 : }

  0145b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0145e	33 cd		 xor	 ecx, ebp
  01460	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01465	8b e5		 mov	 esp, ebp
  01467	5d		 pop	 ebp
  01468	c3		 ret	 0
$LN158@SaDispatch:

; 1035 : 		}
; 1036 : 
; 1037 : 		void lssproto_æ¥è¯¢åç¯_recv(char* data);
; 1038 : 		lssproto_æ¥è¯¢åç¯_recv(data);

  01469	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$82[ebp]
  0146f	50		 push	 eax
  01470	e8 00 00 00 00	 call	 ?lssproto_??ÎÃ?_recv@@YAXPAD@Z ; lssproto_??ÎÃ?_recv
  01475	83 c4 04	 add	 esp, 4

; 1039 : 
; 1040 : 		SliceCount = 0;
; 1041 : 		return func;

  01478	e9 58 ec ff ff	 jmp	 $LN201@SaDispatch
$LN156@SaDispatch:

; 1042 : 	}
; 1043 : 
; 1044 : #ifdef _OUTOFBATTLESKILL			// (ä¸å¯å¼) Syu ADD éæææ¶æè½Protocol
; 1045 : 	else if ( func == LSSPROTO_BATTLESKILL_RECV ) 

  0147d	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  01480	75 44		 jne	 SHORT $LN159@SaDispatch

; 1046 : 	{
; 1047 : 		char data[16384];
; 1048 : 
; 1049 : 		iChecksum += util_destring(2, data);

  01482	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$81[ebp]
  01488	50		 push	 eax
  01489	6a 02		 push	 2
  0148b	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01490	8b f0		 mov	 esi, eax

; 1050 : 		util_deint(3, &iChecksumrecv);

  01492	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01498	50		 push	 eax
  01499	6a 03		 push	 3
  0149b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  014a0	83 c4 10	 add	 esp, 16			; 00000010H

; 1051 : 		if (iChecksum!=iChecksumrecv) {

  014a3	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  014a9	0f 85 ae 03 00
	00		 jne	 $LN195@SaDispatch

; 1052 : 			SliceCount=0;
; 1053 : 			return 0;
; 1054 : 		}
; 1055 : 		lssproto_BATTLESKILL_recv(fd, data);

  014af	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$81[ebp]
  014b5	50		 push	 eax
  014b6	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  014b9	e8 00 00 00 00	 call	 ?lssproto_BATTLESKILL_recv@@YAXHPAD@Z ; lssproto_BATTLESKILL_recv
  014be	83 c4 08	 add	 esp, 8

; 1056 : 		SliceCount=0;
; 1057 : 		return func;

  014c1	e9 0f ec ff ff	 jmp	 $LN201@SaDispatch
$LN159@SaDispatch:

; 1058 : 	}
; 1059 : #endif
; 1060 : 	else if( func==LSSPROTO_WO_RECV)

  014c6	83 f8 5f	 cmp	 eax, 95			; 0000005fH
  014c9	75 43		 jne	 SHORT $LN162@SaDispatch

; 1061 : 	{
; 1062 : 		int effect;
; 1063 : 
; 1064 : 		iChecksum += util_deint(2, &effect);

  014cb	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _effect$57[ebp]
  014d1	50		 push	 eax
  014d2	6a 02		 push	 2
  014d4	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  014d9	8b f0		 mov	 esi, eax

; 1065 : 		util_deint(3, &iChecksumrecv);

  014db	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  014e1	50		 push	 eax
  014e2	6a 03		 push	 3
  014e4	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  014e9	83 c4 10	 add	 esp, 16			; 00000010H

; 1066 : 		if (iChecksum!=iChecksumrecv) {

  014ec	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  014f2	0f 85 65 03 00
	00		 jne	 $LN195@SaDispatch

; 1067 : 			SliceCount=0;
; 1068 : 			return 0;
; 1069 : 		}
; 1070 : 		lssproto_WO_recv( fd, effect );

  014f8	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _effect$57[ebp]
  014fe	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01501	e8 00 00 00 00	 call	 ?lssproto_WO_recv@@YAXHH@Z ; lssproto_WO_recv
  01506	83 c4 08	 add	 esp, 8

; 1071 : 		SliceCount=0;
; 1072 : 		return func;

  01509	e9 c7 eb ff ff	 jmp	 $LN201@SaDispatch
$LN162@SaDispatch:

; 1073 : 	}
; 1074 : #ifdef _STREET_VENDOR
; 1075 : 	else if (func == LSSPROTO_STREET_VENDOR_RECV)

  0150e	83 f8 75	 cmp	 eax, 117		; 00000075H
  01511	75 44		 jne	 SHORT $LN165@SaDispatch

; 1076 : 	{
; 1077 : 		char data[16384];
; 1078 : 
; 1079 : 		iChecksum += util_destring(2,data);

  01513	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$80[ebp]
  01519	50		 push	 eax
  0151a	6a 02		 push	 2
  0151c	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01521	8b f0		 mov	 esi, eax

; 1080 : 		util_deint(3,&iChecksumrecv);

  01523	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01529	50		 push	 eax
  0152a	6a 03		 push	 3
  0152c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01531	83 c4 10	 add	 esp, 16			; 00000010H

; 1081 : 		if(iChecksum != iChecksumrecv){

  01534	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  0153a	0f 85 1d 03 00
	00		 jne	 $LN195@SaDispatch

; 1082 : 			SliceCount=0;
; 1083 : 			return 0;
; 1084 : 		}
; 1085 : 		lssproto_STREET_VENDOR_recv(fd,data);

  01540	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$80[ebp]
  01546	50		 push	 eax
  01547	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  0154a	e8 00 00 00 00	 call	 ?lssproto_STREET_VENDOR_recv@@YAXHPAD@Z ; lssproto_STREET_VENDOR_recv
  0154f	83 c4 08	 add	 esp, 8

; 1086 : 		SliceCount=0;
; 1087 : 		return func;

  01552	e9 7e eb ff ff	 jmp	 $LN201@SaDispatch
$LN165@SaDispatch:

; 1088 : 	}
; 1089 : #endif
; 1090 : #ifdef _JOBDAILY
; 1091 : 	else if (func == LSSPROTO_JOBDAILY_RECV)

  01557	83 f8 78	 cmp	 eax, 120		; 00000078H
  0155a	75 44		 jne	 SHORT $LN168@SaDispatch

; 1092 : 	{
; 1093 : 		char data[16384];
; 1094 : 
; 1095 : 		iChecksum += util_destring(2,data);

  0155c	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$79[ebp]
  01562	50		 push	 eax
  01563	6a 02		 push	 2
  01565	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0156a	8b f0		 mov	 esi, eax

; 1096 : 		util_deint(3,&iChecksumrecv);

  0156c	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01572	50		 push	 eax
  01573	6a 03		 push	 3
  01575	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0157a	83 c4 10	 add	 esp, 16			; 00000010H

; 1097 : 		if(iChecksum != iChecksumrecv){

  0157d	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01583	0f 85 d4 02 00
	00		 jne	 $LN195@SaDispatch

; 1098 : 			SliceCount=0;
; 1099 : 			return 0;
; 1100 : 		}
; 1101 : 		lssproto_JOBDAILY_recv(fd,data);

  01589	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$79[ebp]
  0158f	50		 push	 eax
  01590	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01593	e8 00 00 00 00	 call	 ?lssproto_JOBDAILY_recv@@YAXHPAD@Z ; lssproto_JOBDAILY_recv
  01598	83 c4 08	 add	 esp, 8

; 1102 : 		SliceCount=0;
; 1103 : 		return func;

  0159b	e9 35 eb ff ff	 jmp	 $LN201@SaDispatch
$LN168@SaDispatch:

; 1104 : 	}
; 1105 : #endif
; 1106 : #ifdef _TEACHER_SYSTEM
; 1107 : 	else if (func == LSSPROTO_TEACHER_SYSTEM_RECV)

  015a0	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  015a3	75 44		 jne	 SHORT $LN171@SaDispatch

; 1108 : 	{
; 1109 : 		char data[16384];
; 1110 : 
; 1111 : 		iChecksum += util_destring(2,data);

  015a5	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$78[ebp]
  015ab	50		 push	 eax
  015ac	6a 02		 push	 2
  015ae	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  015b3	8b f0		 mov	 esi, eax

; 1112 : 		util_deint(3,&iChecksumrecv);

  015b5	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  015bb	50		 push	 eax
  015bc	6a 03		 push	 3
  015be	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  015c3	83 c4 10	 add	 esp, 16			; 00000010H

; 1113 : 		if(iChecksum != iChecksumrecv){

  015c6	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  015cc	0f 85 8b 02 00
	00		 jne	 $LN195@SaDispatch

; 1114 : 			SliceCount=0;
; 1115 : 			return 0;
; 1116 : 		}
; 1117 : 		lssproto_TEACHER_SYSTEM_recv(fd,data);

  015d2	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$78[ebp]
  015d8	50		 push	 eax
  015d9	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  015dc	e8 00 00 00 00	 call	 ?lssproto_TEACHER_SYSTEM_recv@@YAXHPAD@Z ; lssproto_TEACHER_SYSTEM_recv
  015e1	83 c4 08	 add	 esp, 8

; 1118 : 		SliceCount=0;
; 1119 : 		return func;

  015e4	e9 ec ea ff ff	 jmp	 $LN201@SaDispatch
$LN171@SaDispatch:

; 1120 : 	}
; 1121 : #endif
; 1122 : #ifdef _ADD_STATUS_2
; 1123 : 	else if (func == LSSPROTO_S2_RECV)

  015e9	83 f8 7d	 cmp	 eax, 125		; 0000007dH
  015ec	75 44		 jne	 SHORT $LN174@SaDispatch

; 1124 : 	{
; 1125 : 		char data[16384];
; 1126 : 
; 1127 : 		iChecksum += util_destring(2,data);

  015ee	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$77[ebp]
  015f4	50		 push	 eax
  015f5	6a 02		 push	 2
  015f7	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  015fc	8b f0		 mov	 esi, eax

; 1128 : 		util_deint(3,&iChecksumrecv);

  015fe	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01604	50		 push	 eax
  01605	6a 03		 push	 3
  01607	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0160c	83 c4 10	 add	 esp, 16			; 00000010H

; 1129 : 		if(iChecksum != iChecksumrecv){

  0160f	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01615	0f 85 42 02 00
	00		 jne	 $LN195@SaDispatch

; 1130 : 			SliceCount=0;
; 1131 : 			return 0;
; 1132 : 		}
; 1133 : 		LogToRecvdata(data);
; 1134 : 		lssproto_S2_recv(fd,data);

  0161b	8d 85 fc 3f ff
	ff		 lea	 eax, DWORD PTR _data$77[ebp]
  01621	50		 push	 eax
  01622	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01625	e8 00 00 00 00	 call	 ?lssproto_S2_recv@@YAXHPAD@Z ; lssproto_S2_recv
  0162a	83 c4 08	 add	 esp, 8

; 1135 : 		SliceCount = 0;
; 1136 : 		return func;

  0162d	e9 a3 ea ff ff	 jmp	 $LN201@SaDispatch
$LN174@SaDispatch:

; 1137 : 	}
; 1138 : #endif
; 1139 : #ifdef _ITEM_FIREWORK
; 1140 : 	else if (func == LSSPROTO_FIREWORK_RECV)

  01632	83 f8 7e	 cmp	 eax, 126		; 0000007eH
  01635	75 6c		 jne	 SHORT $LN177@SaDispatch

; 1141 : 	{
; 1142 : 		int		iChecksum = 0, iChecksumrecv, iCharaindex, iType, iActionNum;
; 1143 : 		char	szData[16384];
; 1144 : 
; 1145 : 		iChecksum += util_deint(2, &iCharaindex);

  01637	8d 85 dc 7f fe
	ff		 lea	 eax, DWORD PTR _iCharaindex$7[ebp]
  0163d	50		 push	 eax
  0163e	6a 02		 push	 2
  01640	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01645	8b f0		 mov	 esi, eax

; 1146 : 		iChecksum += util_deint(3, &iType);

  01647	8d 85 e8 7f fe
	ff		 lea	 eax, DWORD PTR _iType$28[ebp]
  0164d	50		 push	 eax
  0164e	6a 03		 push	 3
  01650	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01655	03 f0		 add	 esi, eax

; 1147 : 		iChecksum += util_deint(4, &iActionNum);

  01657	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _iActionNum$37[ebp]
  0165d	50		 push	 eax
  0165e	6a 04		 push	 4
  01660	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01665	03 f0		 add	 esi, eax

; 1148 : 		util_deint(5, &iChecksumrecv);

  01667	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$56[ebp]
  0166d	50		 push	 eax
  0166e	6a 05		 push	 5
  01670	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01675	83 c4 20	 add	 esp, 32			; 00000020H

; 1149 : 		if(iChecksum != iChecksumrecv){

  01678	3b b5 f0 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$56[ebp]
  0167e	0f 85 d9 01 00
	00		 jne	 $LN195@SaDispatch

; 1150 : 			SliceCount = 0;
; 1151 : 			return 0;
; 1152 : 		}
; 1153 : 		LogToRecvdata(szData);
; 1154 : 		lssproto_Firework_recv(fd, iCharaindex, iType, iActionNum);

  01684	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _iActionNum$37[ebp]
  0168a	ff b5 e8 7f fe
	ff		 push	 DWORD PTR _iType$28[ebp]
  01690	ff b5 dc 7f fe
	ff		 push	 DWORD PTR _iCharaindex$7[ebp]
  01696	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01699	e8 00 00 00 00	 call	 ?lssproto_Firework_recv@@YAXHHHH@Z ; lssproto_Firework_recv

; 1155 : 		SliceCount = 0;
; 1156 : 		return func;

  0169e	e9 2f ea ff ff	 jmp	 $LN200@SaDispatch
$LN177@SaDispatch:

; 1157 : 	}
; 1158 : #endif
; 1159 : 
; 1160 : #ifdef _GET_HOSTNAME
; 1161 : 	else if( func == LSSPROTO_HOSTNAME_RECV )

  016a3	3d 82 00 00 00	 cmp	 eax, 130		; 00000082H
  016a8	75 3d		 jne	 SHORT $LN180@SaDispatch

; 1162 : 	{
; 1163 : 		int		hostnametamp;
; 1164 : 
; 1165 : 		iChecksum += util_deint(2, &hostnametamp);

  016aa	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _hostnametamp$55[ebp]
  016b0	50		 push	 eax
  016b1	6a 02		 push	 2
  016b3	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  016b8	8b f0		 mov	 esi, eax

; 1166 : 		util_deint(3, &iChecksumrecv);

  016ba	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  016c0	50		 push	 eax
  016c1	6a 03		 push	 3
  016c3	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  016c8	83 c4 10	 add	 esp, 16			; 00000010H

; 1167 : 		if(iChecksum != iChecksumrecv){

  016cb	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  016d1	0f 85 86 01 00
	00		 jne	 $LN195@SaDispatch

; 1168 : 			SliceCount = 0;
; 1169 : 			return 0;
; 1170 : 		}
; 1171 : 		lssproto_HostName_send(fd);

  016d7	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  016da	e8 00 00 00 00	 call	 ?lssproto_HostName_send@@YAXH@Z ; lssproto_HostName_send
  016df	83 c4 04	 add	 esp, 4

; 1172 : 		SliceCount = 0;
; 1173 : 		return func;

  016e2	e9 ee e9 ff ff	 jmp	 $LN201@SaDispatch
$LN180@SaDispatch:

; 1174 : 	}
; 1175 : #endif
; 1176 : #ifdef _NB_å¬åç³»ç»
; 1177 : 	else if( func == LSSPROTO_DENGON_RECV )

  016e7	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  016ec	75 4a		 jne	 SHORT $LN183@SaDispatch

; 1178 : 	{
; 1179 : 		char data[512];
; 1180 : 		int coloer;
; 1181 : 		int num;
; 1182 : 
; 1183 : 		util_destring(2, data);

  016ee	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  016f4	50		 push	 eax
  016f5	6a 02		 push	 2
  016f7	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring

; 1184 : 		util_deint(3, &coloer);

  016fc	8d 85 ec 7f fe
	ff		 lea	 eax, DWORD PTR _coloer$[ebp]
  01702	50		 push	 eax
  01703	6a 03		 push	 3
  01705	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint

; 1185 : 		util_deint(4, &num);

  0170a	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _num$[ebp]
  01710	50		 push	 eax
  01711	6a 04		 push	 4
  01713	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint

; 1186 : 		lssproto_DENGON_recv(data, coloer, num);

  01718	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _num$[ebp]
  0171e	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  01724	ff b5 ec 7f fe
	ff		 push	 DWORD PTR _coloer$[ebp]
  0172a	50		 push	 eax
  0172b	e8 00 00 00 00	 call	 ?lssproto_DENGON_recv@@YAXPADHH@Z ; lssproto_DENGON_recv
  01730	83 c4 24	 add	 esp, 36			; 00000024H

; 1187 : 		SliceCount = 0;
; 1188 : 		return func;

  01733	e9 9d e9 ff ff	 jmp	 $LN201@SaDispatch
$LN183@SaDispatch:

; 1189 : 	}
; 1190 : #endif
; 1191 : #ifdef _NB_DIY_SEND
; 1192 : 	else if( func == LSSPROTO_SAMENU_RECV )

  01738	3d c9 00 00 00	 cmp	 eax, 201		; 000000c9H
  0173d	75 30		 jne	 SHORT $LN185@SaDispatch

; 1193 : 	{
; 1194 : 		char data[512];
; 1195 : 		util_destring(2, data);

  0173f	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  01745	50		 push	 eax
  01746	6a 02		 push	 2
  01748	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0174d	83 c4 08	 add	 esp, 8

; 1196 : 		ShellExecute(NULL,"open",data,NULL,NULL,SW_SHOWNORMAL);

  01750	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  01756	6a 01		 push	 1
  01758	6a 00		 push	 0
  0175a	6a 00		 push	 0
  0175c	50		 push	 eax
  0175d	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open@
  01762	6a 00		 push	 0
  01764	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 1197 : 		SliceCount = 0;
; 1198 : 		return func;

  0176a	e9 66 e9 ff ff	 jmp	 $LN201@SaDispatch
$LN185@SaDispatch:

; 1199 : 	}
; 1200 : #endif
; 1201 : #ifdef _NB_è·åæºå¨ä¿¡æ¯å
; 1202 : 	else if( func == LSSPROTO_GETINFO_RECV )

  0176f	3d d1 00 00 00	 cmp	 eax, 209		; 000000d1H
  01774	75 10		 jne	 SHORT $LN187@SaDispatch

; 1203 : 	{
; 1204 : 		lssproto_GetInfo_send(fd);

  01776	ff 75 08	 push	 DWORD PTR _fd$[ebp]
  01779	e8 00 00 00 00	 call	 ?lssproto_GetInfo_send@@YAXH@Z ; lssproto_GetInfo_send
  0177e	83 c4 04	 add	 esp, 4

; 1205 : 		SliceCount = 0;
; 1206 : 		return func;

  01781	e9 4f e9 ff ff	 jmp	 $LN201@SaDispatch
$LN187@SaDispatch:

; 1207 : 	}
; 1208 : #endif
; 1209 : 
; 1210 : 	else if (func == LSSPROTO_MAMMOTH_RECV)

  01786	3d f5 01 00 00	 cmp	 eax, 501		; 000001f5H
  0178b	75 44		 jne	 SHORT $LN189@SaDispatch

; 1211 : 	{
; 1212 : 		int		prizeindex;
; 1213 : 
; 1214 : 		iChecksum += util_deint(2, &prizeindex);

  0178d	8d 85 f0 7f fe
	ff		 lea	 eax, DWORD PTR _prizeindex$[ebp]
  01793	50		 push	 eax
  01794	6a 02		 push	 2
  01796	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0179b	8b f0		 mov	 esi, eax

; 1215 : 		util_deint(3, &iChecksumrecv);

  0179d	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  017a3	50		 push	 eax
  017a4	6a 03		 push	 3
  017a6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  017ab	83 c4 10	 add	 esp, 16			; 00000010H

; 1216 : 		if (iChecksum != iChecksumrecv) {

  017ae	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  017b4	0f 85 a3 00 00
	00		 jne	 $LN195@SaDispatch

; 1217 : 			SliceCount = 0;
; 1218 : 			return 0;
; 1219 : 		}
; 1220 : 		Mammoth::Get().Receive(prizeindex);

  017ba	ff b5 f0 7f fe
	ff		 push	 DWORD PTR _prizeindex$[ebp]
  017c0	e8 00 00 00 00	 call	 ?Get@Mammoth@@SAAAV1@XZ	; Mammoth::Get
  017c5	8b c8		 mov	 ecx, eax
  017c7	e8 00 00 00 00	 call	 ?Receive@Mammoth@@QAEXH@Z ; Mammoth::Receive

; 1221 : 		SliceCount = 0;
; 1222 : 		return func;

  017cc	e9 04 e9 ff ff	 jmp	 $LN201@SaDispatch
$LN189@SaDispatch:

; 1223 : 	}
; 1224 : 	else if (func == LSSPROTO_MAMMOTH_OPEN_RECV)

  017d1	3d f6 01 00 00	 cmp	 eax, 502		; 000001f6H
  017d6	75 3d		 jne	 SHORT $LN192@SaDispatch

; 1225 : 	{
; 1226 : 		char data[1024 * 64];
; 1227 : 
; 1228 : 		iChecksum += util_destring(2, data);

  017d8	8d 85 fc 7f fe
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  017de	50		 push	 eax
  017df	6a 02		 push	 2
  017e1	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  017e6	8b f0		 mov	 esi, eax

; 1229 : 		util_deint(3, &iChecksumrecv);

  017e8	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  017ee	50		 push	 eax
  017ef	6a 03		 push	 3
  017f1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  017f6	83 c4 10	 add	 esp, 16			; 00000010H

; 1230 : 		if (iChecksum != iChecksumrecv) {

  017f9	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  017ff	75 5c		 jne	 SHORT $LN195@SaDispatch

; 1231 : 			SliceCount = 0;
; 1232 : 			return 0;
; 1233 : 		}
; 1234 : 		lssproto_MAMMOTH_OPEN_recv(data);

  01801	8d 85 fc 7f fe
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  01807	50		 push	 eax
  01808	e8 00 00 00 00	 call	 ?lssproto_MAMMOTH_OPEN_recv@@YAXPAD@Z ; lssproto_MAMMOTH_OPEN_recv
  0180d	83 c4 04	 add	 esp, 4

; 1235 : 		SliceCount = 0;
; 1236 : 		return func;

  01810	e9 c0 e8 ff ff	 jmp	 $LN201@SaDispatch
$LN192@SaDispatch:

; 1237 : 	}
; 1238 : 	else if (func == LSSPROTO_PETRANK_RECV)

  01815	3d f8 01 00 00	 cmp	 eax, 504		; 000001f8H
  0181a	75 41		 jne	 SHORT $LN195@SaDispatch

; 1239 : 	{
; 1240 : 		char data[1024 * 64];
; 1241 : 
; 1242 : 		iChecksum += util_destring(2,data);

  0181c	8d 85 fc 7f fe
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  01822	50		 push	 eax
  01823	6a 02		 push	 2
  01825	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0182a	8b f0		 mov	 esi, eax

; 1243 : 		util_deint(3,&iChecksumrecv);

  0182c	8d 85 f8 7f fe
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01832	50		 push	 eax
  01833	6a 03		 push	 3
  01835	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0183a	83 c4 10	 add	 esp, 16			; 00000010H

; 1244 : 		if(iChecksum != iChecksumrecv){

  0183d	3b b5 f8 7f fe
	ff		 cmp	 esi, DWORD PTR _iChecksumrecv$[ebp]
  01843	75 18		 jne	 SHORT $LN195@SaDispatch

; 1245 : 			SliceCount=0;
; 1246 : 			return 0;
; 1247 : 		}
; 1248 : 		PetRanking::Instance().Recv(data);

  01845	8d 85 fc 7f fe
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  0184b	50		 push	 eax
  0184c	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  01851	8b c8		 mov	 ecx, eax
  01853	e8 00 00 00 00	 call	 ?Recv@PetRanking@@QAEXPAD@Z ; PetRanking::Recv

; 1249 : 		SliceCount=0;
; 1250 : 		return func;

  01858	e9 78 e8 ff ff	 jmp	 $LN201@SaDispatch
$LN195@SaDispatch:

; 1251 : 	}
; 1252 : 
; 1253 : #ifdef _PK2007
; 1254 : 	else if( func == LSSPROTO_PKLIST_RECV )
; 1255 : 	{
; 1256 : 		int count;
; 1257 : 		char data[16384];
; 1258 : 		iChecksum += util_deint(2, &count);
; 1259 : 		iChecksum += util_destring(3, data);
; 1260 : 		util_deint(4, &iChecksumrecv);
; 1261 : 		if (iChecksum!=iChecksumrecv) {
; 1262 : 			SliceCount=0;
; 1263 : 			return 0;
; 1264 : 		}
; 1265 : 		lssproto_pkList_recv(fd, count, data);
; 1266 : 		SliceCount=0;
; 1267 : 		return func;
; 1268 : 	}
; 1269 : #endif
; 1270 : 	SliceCount=0;
; 1271 : 	}
; 1272 : 	return 0;
; 1273 : }

  0185d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount
$LN2@SaDispatch:
  01867	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0186a	33 c0		 xor	 eax, eax
  0186c	33 cd		 xor	 ecx, ebp
  0186e	5e		 pop	 esi
  0186f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01874	8b e5		 mov	 esp, ebp
  01876	5d		 pop	 ebp
  01877	c3		 ret	 0
?SaDispatchMessage@@YAHHPAD@Z ENDP			; SaDispatchMessage
_TEXT	ENDS
END
