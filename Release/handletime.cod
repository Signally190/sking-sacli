; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	\\VBOXSVR\_stoneage\repos\ssm-sacli\Release\handletime.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SaTime@@3UtagLSTIME@@A				; SaTime
PUBLIC	?serverTime@@3JA				; serverTime
PUBLIC	?FirstTime@@3JA					; FirstTime
PUBLIC	?SaTimeZoneNo@@3HA				; SaTimeZoneNo
PUBLIC	?TimeZonePalChangeFlag@@3HA			; TimeZonePalChangeFlag
_BSS	SEGMENT
?SaTime@@3UtagLSTIME@@A DB 0cH DUP (?)			; SaTime
?serverTime@@3JA DD 01H DUP (?)				; serverTime
?FirstTime@@3JA DD 01H DUP (?)				; FirstTime
?SaTimeZoneNo@@3HA DD 01H DUP (?)			; SaTimeZoneNo
?TimeZonePalChangeFlag@@3HA DD 01H DUP (?)		; TimeZonePalChangeFlag
_BSS	ENDS
PUBLIC	?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z		; RealTimeToSATime
PUBLIC	?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z ; getLSTime
PUBLIC	?TimeZoneProc@@YAXXZ				; TimeZoneProc
PUBLIC	?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z	; LSTimeToRealTime
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	?PaletteChange@@YAXHH@Z:PROC			; PaletteChange
_DATA	SEGMENT
?era@@3JA DD	03667cae1H				; era
_DATA	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\handletime.cpp
;	COMDAT ?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z
_TEXT	SEGMENT
_lstime$ = 8						; size = 4
_t$ = 12						; size = 4
?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z PROC		; LSTimeToRealTime, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   : 	*t=(long)(

  00003	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  00006	6b 48 08 64	 imul	 ecx, DWORD PTR [eax+8], 100
  0000a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0000d	c1 e1 0a	 shl	 ecx, 10			; 0000000aH
  00010	03 08		 add	 ecx, DWORD PTR [eax]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  00015	69 c9 c2 01 00
	00		 imul	 ecx, ecx, 450
  0001b	89 08		 mov	 DWORD PTR [eax], ecx

; 100  :         ( lstime->hour*LSTIME_DAYS_PER_YEAR+lstime->day) /* ?? */
; 101  :                *LSTIME_HOURS_PER_DAY
; 102  : 
; 103  :         +     lstime->year)
; 104  :         /*??????????????????nakamura      */
; 105  : 
; 106  : 
; 107  :         *450;
; 108  : 	return;
; 109  : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z ENDP		; LSTimeToRealTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\handletime.cpp
;	COMDAT ?TimeZoneProc@@YAXXZ
_TEXT	SEGMENT
?TimeZoneProc@@YAXXZ PROC				; TimeZoneProc, COMDAT

; 134  : 	int	timeZoneNo;
; 135  : 	//????????????
; 136  : 	timeZoneNo = getLSTime ( &SaTime );

  00000	68 00 00 00 00	 push	 OFFSET ?SaTime@@3UtagLSTIME@@A ; SaTime
  00005	e8 00 00 00 00	 call	 ?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z ; getLSTime
  0000a	83 c4 04	 add	 esp, 4

; 137  : 	// ???????
; 138  : 	if( SaTimeZoneNo != timeZoneNo ){

  0000d	39 05 00 00 00
	00		 cmp	 DWORD PTR ?SaTimeZoneNo@@3HA, eax ; SaTimeZoneNo
  00013	74 1c		 je	 SHORT $LN3@TimeZonePr

; 139  : 		SaTimeZoneNo = timeZoneNo;	// ???
; 140  : 		// ??????????????
; 141  : 		if( TimeZonePalChangeFlag == TRUE ){

  00015	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TimeZonePalChangeFlag@@3HA, 1 ; TimeZonePalChangeFlag
  0001c	a3 00 00 00 00	 mov	 DWORD PTR ?SaTimeZoneNo@@3HA, eax ; SaTimeZoneNo
  00021	75 0e		 jne	 SHORT $LN3@TimeZonePr

; 142  : 			PaletteChange( SaTimeZoneNo, PAL_CHANGE_TIME );// ????????

  00023	68 10 0e 00 00	 push	 3600			; 00000e10H
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?PaletteChange@@YAXHH@Z	; PaletteChange
  0002e	83 c4 08	 add	 esp, 8
$LN3@TimeZonePr:

; 143  : 		}
; 144  : 	}
; 145  : }

  00031	c3		 ret	 0
?TimeZoneProc@@YAXXZ ENDP				; TimeZoneProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\handletime.cpp
;	COMDAT ?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z
_TEXT	SEGMENT
_lstime$ = 8						; size = 4
?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z PROC	; getLSTime, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 118  : 	if (NIGHT_TO_MORNING < lstime->hour
; 119  :         && lstime->hour <= MORNING_TO_NOON)

  00003	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	8d 81 43 fd ff
	ff		 lea	 eax, DWORD PTR [ecx-701]
  0000f	3d e5 00 00 00	 cmp	 eax, 229		; 000000e5H
  00014	77 07		 ja	 SHORT $LN2@getLSTime

; 120  : 		return LS_MORNING;

  00016	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
$LN2@getLSTime:

; 121  : 	else if(NOON_TO_EVENING < lstime->hour
; 122  :             && lstime->hour <= EVENING_TO_NIGHT)

  0001d	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  00023	7e 1e		 jle	 SHORT $LN6@getLSTime
  00025	81 f9 2c 01 00
	00		 cmp	 ecx, 300		; 0000012cH
  0002b	7f 07		 jg	 SHORT $LN9@getLSTime

; 123  : 		return LS_EVENING;

  0002d	b8 01 00 00 00	 mov	 eax, 1

; 129  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN9@getLSTime:

; 124  : 	else if(EVENING_TO_NIGHT < lstime->hour
; 125  :             && lstime->hour <= NIGHT_TO_MORNING)

  00034	81 f9 bc 02 00
	00		 cmp	 ecx, 700		; 000002bcH
  0003a	7f 07		 jg	 SHORT $LN6@getLSTime

; 126  : 		return LS_NIGHT;

  0003c	b8 02 00 00 00	 mov	 eax, 2

; 129  : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN6@getLSTime:

; 127  : 	else
; 128  : 		return LS_NOON;

  00043	33 c0		 xor	 eax, eax

; 129  : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z ENDP	; getLSTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\handletime.cpp
;	COMDAT ?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z
_TEXT	SEGMENT
_lstime$ = 8						; size = 4
?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z PROC		; RealTimeToSATime, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 68   : 	long lsseconds; /* LS????? */
; 69   :     long lsdays; /* LS????? */
; 70   : 
; 71   : 	//cary 十五
; 72   : 	lsseconds = (TimeGetTime()-FirstTime)/1000 + serverTime - era;

  00006	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0000b	8b c8		 mov	 ecx, eax

; 73   : 
; 74   :     /* ??????1???????????? */
; 75   : 	lstime->year = (int)( lsseconds/(LSTIME_SECONDS_PER_DAY*LSTIME_DAYS_PER_YEAR) );

  0000d	8b 7d 08	 mov	 edi, DWORD PTR _lstime$[ebp]
  00010	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?FirstTime@@3JA ; FirstTime
  00016	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0001b	f7 e1		 mul	 ecx
  0001d	b8 a5 a4 11 1f	 mov	 eax, 521249957		; 1f11a4a5H
  00022	8b da		 mov	 ebx, edx
  00024	c1 eb 06	 shr	 ebx, 6
  00027	2b 1d 00 00 00
	00		 sub	 ebx, DWORD PTR ?era@@3JA
  0002d	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?serverTime@@3JA ; serverTime
  00033	f7 eb		 imul	 ebx
  00035	c1 fa 10	 sar	 edx, 16			; 00000010H
  00038	8b c2		 mov	 eax, edx
  0003a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003d	03 c2		 add	 eax, edx
  0003f	89 07		 mov	 DWORD PTR [edi], eax

; 76   : 
; 77   :     lsdays = lsseconds/LSTIME_SECONDS_PER_DAY;/* ??????????? */

  00041	b8 07 45 2e c2	 mov	 eax, -1037155065	; c22e4507H
  00046	f7 eb		 imul	 ebx

; 78   : 	lstime->day  = lsdays % LSTIME_DAYS_PER_YEAR;/* ?????????????*/

  00048	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0004d	03 d3		 add	 edx, ebx
  0004f	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00052	8b f2		 mov	 esi, edx
  00054	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00057	03 f2		 add	 esi, edx
  00059	f7 ee		 imul	 esi

; 79   : 
; 80   : 
; 81   : 
; 82   :     /*(750*12)?1*/
; 83   :     lstime->hour = (int)(lsseconds % LSTIME_SECONDS_PER_DAY )

  0005b	b8 07 45 2e c2	 mov	 eax, -1037155065	; c22e4507H
  00060	c1 fa 05	 sar	 edx, 5
  00063	8b ca		 mov	 ecx, edx
  00065	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00068	03 ca		 add	 ecx, edx
  0006a	8b d6		 mov	 edx, esi
  0006c	6b c9 64	 imul	 ecx, ecx, 100
  0006f	2b d1		 sub	 edx, ecx
  00071	69 ce 18 15 00
	00		 imul	 ecx, esi, 5400
  00077	89 57 04	 mov	 DWORD PTR [edi+4], edx
  0007a	2b d9		 sub	 ebx, ecx
  0007c	c1 e3 0a	 shl	 ebx, 10			; 0000000aH
  0007f	f7 eb		 imul	 ebx
  00081	03 d3		 add	 edx, ebx
  00083	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00086	8b c2		 mov	 eax, edx
  00088	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008b	03 c2		 add	 eax, edx
  0008d	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx

; 84   : /* ??????????????????? */
; 85   :         * LSTIME_HOURS_PER_DAY / LSTIME_SECONDS_PER_DAY;
; 86   :     /* ?????????????????????????????
; 87   :      ????????*/
; 88   : 
; 89   : 	return;
; 90   : }

  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z ENDP		; RealTimeToSATime
_TEXT	ENDS
END
