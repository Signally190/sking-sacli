; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	\\VBOXSVR\_stoneage\repos\ssm-sacli\Release\WMIInfo.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z		; MD5Update
PUBLIC	?MD5String@@YAPADPAEH@Z				; MD5String
PUBLIC	?MD5Int@@YAHPAEH@Z				; MD5Int
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?MD5Init@@YAXPAUMD5_CTX@@@Z			; MD5Init
PUBLIC	?MD5Final@@YAXQAEPAUMD5_CTX@@@Z			; MD5Final
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_04NOJCDH@?$CF02x@				; `string'
EXTRN	_malloc:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_04NOJCDH@?$CF02x@
CONST	SEGMENT
??_C@_04NOJCDH@?$CF02x@ DB '%02x', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?PADDING@@3PAEA DB 080H					; PADDING
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?MD5Final@@YAXQAEPAUMD5_CTX@@@Z
_TEXT	SEGMENT
_bits$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_digest$ = 8						; size = 4
_context$ = 12						; size = 4
?MD5Final@@YAXQAEPAUMD5_CTX@@@Z PROC			; MD5Final, COMDAT

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _context$[ebp]

; 127  :   unsigned char bits[8];
; 128  :   unsigned int index, padLen;
; 129  : 
; 130  :   /* Save number of bits */
; 131  :   Encode (bits, context->count, 8);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _bits$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _digest$[ebp]
  0001c	6a 08		 push	 8
  0001e	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
  00021	56		 push	 esi
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?Encode@@YAXPAEPAKI@Z	; Encode

; 132  : 
; 133  :   /* Pad out to 56 mod 64.*/
; 134  :   index = (unsigned int)((context->count[0] >> 3) & 0x3f);

  00028	8b 16		 mov	 edx, DWORD PTR [esi]

; 135  :   padLen = (index < 56) ? (56 - index) : (120 - index);
; 136  :   MD5Update (context, PADDING, padLen);

  0002a	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  0002f	c1 ea 03	 shr	 edx, 3
  00032	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00037	83 e2 3f	 and	 edx, 63			; 0000003fH
  0003a	2b ca		 sub	 ecx, edx
  0003c	2b c2		 sub	 eax, edx
  0003e	83 fa 38	 cmp	 edx, 56			; 00000038H
  00041	0f 43 c1	 cmovae	 eax, ecx
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ?PADDING@@3PAEA
  0004a	53		 push	 ebx
  0004b	e8 00 00 00 00	 call	 ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ; MD5Update

; 137  : 
; 138  :   /* Append length (before padding) */
; 139  :   MD5Update (context, bits, 8);

  00050	6a 08		 push	 8
  00052	8d 45 f4	 lea	 eax, DWORD PTR _bits$[ebp]
  00055	50		 push	 eax
  00056	53		 push	 ebx
  00057	e8 00 00 00 00	 call	 ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ; MD5Update

; 140  : 
; 141  :   /* Store state in digest */
; 142  :   Encode (digest, context->state, 16);

  0005c	6a 10		 push	 16			; 00000010H
  0005e	53		 push	 ebx
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ?Encode@@YAXPAEPAKI@Z	; Encode

; 143  : 
; 144  :   /* Zeroize sensitive information.*/
; 145  :   MD5_memset ((POINTER)context, 0, sizeof (*context));

  00065	6a 58		 push	 88			; 00000058H
  00067	6a 00		 push	 0
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 ?MD5_memset@@YAXPAEHI@Z	; MD5_memset

; 146  : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	83 c4 3c	 add	 esp, 60			; 0000003cH
  00075	33 cd		 xor	 ecx, ebp
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?MD5Final@@YAXQAEPAUMD5_CTX@@@Z ENDP			; MD5Final
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?MD5Init@@YAXPAUMD5_CTX@@@Z
_TEXT	SEGMENT
_context$ = 8						; size = 4
?MD5Init@@YAXPAUMD5_CTX@@@Z PROC			; MD5Init, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   :   context->count[0] = context->count[1] = 0;

  00003	8b 45 08	 mov	 eax, DWORD PTR _context$[ebp]
  00006	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  0000d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 76   :   /* Load magic initialization constants.*/
; 77   :   context->state[0] = 0x67452301;

  00014	c7 00 01 23 45
	67		 mov	 DWORD PTR [eax], 1732584193 ; 67452301H

; 78   :   context->state[1] = 0xefcdab89;

  0001a	c7 40 04 89 ab
	cd ef		 mov	 DWORD PTR [eax+4], -271733879 ; efcdab89H

; 79   :   context->state[2] = 0x98badcfe;

  00021	c7 40 08 fe dc
	ba 98		 mov	 DWORD PTR [eax+8], -1732584194 ; 98badcfeH

; 80   :   context->state[3] = 0x10325476;

  00028	c7 40 0c 76 54
	32 10		 mov	 DWORD PTR [eax+12], 271733878 ; 10325476H

; 81   : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?MD5Init@@YAXPAUMD5_CTX@@@Z ENDP			; MD5Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?MD5_memset@@YAXPAEHI@Z
_TEXT	SEGMENT
_output$ = 8						; size = 4
_value$ = 12						; size = 4
_len$ = 16						; size = 4
?MD5_memset@@YAXPAEHI@Z PROC				; MD5_memset, COMDAT

; 271  : static void MD5_memset (POINTER output, int value, unsigned int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  :   unsigned int i;
; 273  :   for (i = 0; i < len; i++)

  00003	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN3@MD5_memset
  0000a	89 45 10	 mov	 DWORD PTR _len$[ebp], eax

; 274  :  ((char *)output)[i] = (char)value;
; 275  : }

  0000d	5d		 pop	 ebp

; 272  :   unsigned int i;
; 273  :   for (i = 0; i < len; i++)

  0000e	e9 00 00 00 00	 jmp	 _memset
$LN3@MD5_memset:

; 274  :  ((char *)output)[i] = (char)value;
; 275  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?MD5_memset@@YAXPAEHI@Z ENDP				; MD5_memset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?MD5_memcpy@@YAXPAE0I@Z
_TEXT	SEGMENT
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?MD5_memcpy@@YAXPAE0I@Z PROC				; MD5_memcpy, COMDAT

; 262  : static void MD5_memcpy (POINTER output, POINTER input, unsigned int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 263  :   unsigned int i;
; 264  : 
; 265  :   for (i = 0; i < len; i++)

  00003	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 18		 je	 SHORT $LN3@MD5_memcpy
  0000a	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  0000d	56		 push	 esi
  0000e	8b 75 0c	 mov	 esi, DWORD PTR _input$[ebp]
  00011	2b f0		 sub	 esi, eax
$LL8@MD5_memcpy:

; 266  : 
; 267  :  output[i] = input[i];

  00013	8a 0c 06	 mov	 cl, BYTE PTR [esi+eax]
  00016	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00019	88 48 ff	 mov	 BYTE PTR [eax-1], cl
  0001c	83 ea 01	 sub	 edx, 1
  0001f	75 f2		 jne	 SHORT $LL8@MD5_memcpy
  00021	5e		 pop	 esi
$LN3@MD5_memcpy:

; 268  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?MD5_memcpy@@YAXPAE0I@Z ENDP				; MD5_memcpy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?Decode@@YAXPAKPAEI@Z
_TEXT	SEGMENT
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?Decode@@YAXPAKPAEI@Z PROC				; Decode, COMDAT

; 252  : static void Decode (UINT4 *output, unsigned char *input, unsigned int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 253  :   unsigned int i, j;
; 254  : 
; 255  :   for (i = 0, j = 0; j < len; i++, j += 4)

  00004	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 42		 je	 SHORT $LN3@Decode
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _input$[ebp]
  0000e	4f		 dec	 edi
  0000f	c1 ef 02	 shr	 edi, 2
  00012	83 c0 02	 add	 eax, 2
  00015	56		 push	 esi
  00016	8b 75 08	 mov	 esi, DWORD PTR _output$[ebp]
  00019	47		 inc	 edi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Decode:

; 256  :  output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1]) << 8) |

  00020	0f b6 50 01	 movzx	 edx, BYTE PTR [eax+1]
  00024	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  00027	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0002a	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  0002d	c1 e2 08	 shl	 edx, 8
  00030	0b d1		 or	 edx, ecx
  00032	0f b6 48 fb	 movzx	 ecx, BYTE PTR [eax-5]
  00036	c1 e2 08	 shl	 edx, 8
  00039	0b d1		 or	 edx, ecx
  0003b	0f b6 48 fa	 movzx	 ecx, BYTE PTR [eax-6]
  0003f	c1 e2 08	 shl	 edx, 8
  00042	0b d1		 or	 edx, ecx
  00044	89 56 fc	 mov	 DWORD PTR [esi-4], edx
  00047	83 ef 01	 sub	 edi, 1
  0004a	75 d4		 jne	 SHORT $LL4@Decode
  0004c	5e		 pop	 esi
$LN3@Decode:
  0004d	5f		 pop	 edi

; 257  :    (((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3]) << 24);
; 258  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?Decode@@YAXPAKPAEI@Z ENDP				; Decode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?Encode@@YAXPAEPAKI@Z
_TEXT	SEGMENT
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?Encode@@YAXPAEPAKI@Z PROC				; Encode, COMDAT

; 239  : static void Encode (unsigned char *output, UINT4 *input,unsigned int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 240  :   unsigned int i, j;
; 241  : 
; 242  :   for (i = 0, j = 0; j < len; i++, j += 4) {

  00004	8b 75 10	 mov	 esi, DWORD PTR _len$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 3c		 je	 SHORT $LN3@Encode
  0000b	8b 55 08	 mov	 edx, DWORD PTR _output$[ebp]
  0000e	4e		 dec	 esi
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _input$[ebp]
  00012	83 c2 02	 add	 edx, 2
  00015	c1 ee 02	 shr	 esi, 2
  00018	83 c0 02	 add	 eax, 2
  0001b	46		 inc	 esi
  0001c	0f 1f 40 00	 npad	 4
$LL4@Encode:

; 243  :  output[j] = (unsigned char)(input[i] & 0xff);

  00020	0f b6 48 fe	 movzx	 ecx, BYTE PTR [eax-2]
  00024	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00027	88 4a fe	 mov	 BYTE PTR [edx-2], cl
  0002a	8d 52 04	 lea	 edx, DWORD PTR [edx+4]

; 244  :  output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);

  0002d	0f b6 48 fb	 movzx	 ecx, BYTE PTR [eax-5]
  00031	88 4a fb	 mov	 BYTE PTR [edx-5], cl

; 245  :  output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);

  00034	0f b6 48 fc	 movzx	 ecx, BYTE PTR [eax-4]
  00038	88 4a fc	 mov	 BYTE PTR [edx-4], cl

; 246  :  output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);

  0003b	0f b6 48 fd	 movzx	 ecx, BYTE PTR [eax-3]
  0003f	88 4a fd	 mov	 BYTE PTR [edx-3], cl
  00042	83 ee 01	 sub	 esi, 1
  00045	75 d9		 jne	 SHORT $LL4@Encode
$LN3@Encode:
  00047	5e		 pop	 esi

; 247  :   }
; 248  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Encode@@YAXPAEPAKI@Z ENDP				; Encode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?MD5Transform@@YAXQAKQAE@Z
_TEXT	SEGMENT
_c$4$ = -88						; size = 4
_a$4$ = -84						; size = 4
_b$8$ = -80						; size = 4
_b$4$ = -80						; size = 4
_state$GSCopy$1$ = -76					; size = 4
_d$8$ = -72						; size = 4
_d$5$ = -72						; size = 4
_b$16$ = -72						; size = 4
_a$11$ = -72						; size = 4
_x$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_block$ = 12						; size = 4
?MD5Transform@@YAXQAKQAE@Z PROC				; MD5Transform, COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _block$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi

; 151  :   UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];

  00018	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0001b	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  0001e	57		 push	 edi
  0001f	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 152  : 
; 153  :   Decode (x, block, 64);

  00022	6a 40		 push	 64			; 00000040H
  00024	50		 push	 eax
  00025	8d 45 bc	 lea	 eax, DWORD PTR _x$[ebp]
  00028	89 4d b4	 mov	 DWORD PTR _state$GSCopy$1$[ebp], ecx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?Decode@@YAXPAKPAEI@Z	; Decode

; 154  : 
; 155  :   /* Round 1 */
; 156  :   FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */

  00031	8b 55 b4	 mov	 edx, DWORD PTR _state$GSCopy$1$[ebp]
  00034	8b cf		 mov	 ecx, edi
  00036	f7 d1		 not	 ecx
  00038	8b c6		 mov	 eax, esi
  0003a	23 cb		 and	 ecx, ebx
  0003c	23 c7		 and	 eax, edi
  0003e	0b c8		 or	 ecx, eax
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	8b 12		 mov	 edx, DWORD PTR [edx]

; 157  :   FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */

  00045	8b c7		 mov	 eax, edi
  00047	03 ca		 add	 ecx, edx
  00049	8b 55 bc	 mov	 edx, DWORD PTR _x$[ebp]
  0004c	81 c2 78 a4 6a
	d7		 add	 edx, -680876936		; d76aa478H
  00052	03 d1		 add	 edx, ecx
  00054	c1 c2 07	 rol	 edx, 7
  00057	03 d7		 add	 edx, edi
  00059	23 c2		 and	 eax, edx
  0005b	8b ca		 mov	 ecx, edx
  0005d	f7 d1		 not	 ecx
  0005f	23 ce		 and	 ecx, esi
  00061	8d b3 56 b7 c7
	e8		 lea	 esi, DWORD PTR [ebx-389564586]
  00067	0b c8		 or	 ecx, eax

; 158  :   FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */

  00069	8b 5d b4	 mov	 ebx, DWORD PTR _state$GSCopy$1$[ebp]
  0006c	03 4d c0	 add	 ecx, DWORD PTR _x$[ebp+4]
  0006f	03 f1		 add	 esi, ecx
  00071	c1 c6 0c	 rol	 esi, 12			; 0000000cH
  00074	03 f2		 add	 esi, edx
  00076	8b ce		 mov	 ecx, esi
  00078	8b c6		 mov	 eax, esi
  0007a	f7 d1		 not	 ecx
  0007c	23 c2		 and	 eax, edx
  0007e	23 cf		 and	 ecx, edi
  00080	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  00083	0b c8		 or	 ecx, eax

; 159  :   FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */

  00085	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  00088	03 4d c4	 add	 ecx, DWORD PTR _x$[ebp+8]
  0008b	81 c7 db 70 20
	24		 add	 edi, 606105819		; 242070dbH
  00091	03 f9		 add	 edi, ecx
  00093	8b c6		 mov	 eax, esi
  00095	c1 cf 0f	 ror	 edi, 15			; 0000000fH
  00098	81 c3 ee ce bd
	c1		 add	 ebx, -1044525330	; c1bdceeeH
  0009e	03 fe		 add	 edi, esi
  000a0	8b cf		 mov	 ecx, edi
  000a2	23 c7		 and	 eax, edi
  000a4	f7 d1		 not	 ecx
  000a6	23 ca		 and	 ecx, edx
  000a8	0b c8		 or	 ecx, eax

; 160  :   FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */

  000aa	8b c7		 mov	 eax, edi
  000ac	03 4d c8	 add	 ecx, DWORD PTR _x$[ebp+12]
  000af	03 d9		 add	 ebx, ecx
  000b1	c1 cb 0a	 ror	 ebx, 10			; 0000000aH
  000b4	03 df		 add	 ebx, edi
  000b6	8b cb		 mov	 ecx, ebx
  000b8	23 c3		 and	 eax, ebx
  000ba	f7 d1		 not	 ecx
  000bc	23 ce		 and	 ecx, esi
  000be	0b c8		 or	 ecx, eax

; 161  :   FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */

  000c0	8b c3		 mov	 eax, ebx
  000c2	81 c1 af 0f 7c
	f5		 add	 ecx, -176418897		; f57c0fafH
  000c8	03 4d cc	 add	 ecx, DWORD PTR _x$[ebp+16]
  000cb	03 d1		 add	 edx, ecx
  000cd	c1 c2 07	 rol	 edx, 7
  000d0	03 d3		 add	 edx, ebx
  000d2	8b ca		 mov	 ecx, edx
  000d4	f7 d1		 not	 ecx
  000d6	23 cf		 and	 ecx, edi
  000d8	23 c2		 and	 eax, edx
  000da	0b c8		 or	 ecx, eax
  000dc	81 c1 2a c6 87
	47		 add	 ecx, 1200080426		; 4787c62aH
  000e2	03 4d d0	 add	 ecx, DWORD PTR _x$[ebp+20]
  000e5	03 f1		 add	 esi, ecx
  000e7	c1 c6 0c	 rol	 esi, 12			; 0000000cH
  000ea	03 f2		 add	 esi, edx

; 162  :   FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */

  000ec	8b ce		 mov	 ecx, esi
  000ee	8b c6		 mov	 eax, esi
  000f0	f7 d1		 not	 ecx
  000f2	23 c2		 and	 eax, edx
  000f4	23 cb		 and	 ecx, ebx
  000f6	0b c8		 or	 ecx, eax

; 163  :   FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */

  000f8	8b c6		 mov	 eax, esi
  000fa	81 c1 13 46 30
	a8		 add	 ecx, -1473231341	; a8304613H
  00100	03 4d d4	 add	 ecx, DWORD PTR _x$[ebp+24]
  00103	03 f9		 add	 edi, ecx
  00105	c1 cf 0f	 ror	 edi, 15			; 0000000fH
  00108	03 fe		 add	 edi, esi
  0010a	23 c7		 and	 eax, edi
  0010c	8b cf		 mov	 ecx, edi
  0010e	f7 d1		 not	 ecx
  00110	23 ca		 and	 ecx, edx
  00112	0b c8		 or	 ecx, eax

; 164  :   FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */

  00114	8b c7		 mov	 eax, edi
  00116	81 c1 01 95 46
	fd		 add	 ecx, -45705983		; fd469501H
  0011c	03 4d d8	 add	 ecx, DWORD PTR _x$[ebp+28]
  0011f	03 d9		 add	 ebx, ecx
  00121	c1 cb 0a	 ror	 ebx, 10			; 0000000aH
  00124	03 df		 add	 ebx, edi
  00126	23 c3		 and	 eax, ebx
  00128	8b cb		 mov	 ecx, ebx
  0012a	f7 d1		 not	 ecx
  0012c	23 ce		 and	 ecx, esi
  0012e	0b c8		 or	 ecx, eax

; 165  :   FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */

  00130	8b c3		 mov	 eax, ebx
  00132	81 c1 d8 98 80
	69		 add	 ecx, 1770035416		; 698098d8H
  00138	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp+32]
  0013b	03 d1		 add	 edx, ecx
  0013d	c1 c2 07	 rol	 edx, 7
  00140	03 d3		 add	 edx, ebx
  00142	23 c2		 and	 eax, edx
  00144	8b ca		 mov	 ecx, edx
  00146	f7 d1		 not	 ecx
  00148	23 cf		 and	 ecx, edi
  0014a	0b c8		 or	 ecx, eax
  0014c	81 c1 af f7 44
	8b		 add	 ecx, -1958414417	; 8b44f7afH
  00152	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp+36]
  00155	03 f1		 add	 esi, ecx
  00157	c1 c6 0c	 rol	 esi, 12			; 0000000cH
  0015a	03 f2		 add	 esi, edx

; 166  :   FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */

  0015c	8b ce		 mov	 ecx, esi
  0015e	8b c6		 mov	 eax, esi
  00160	f7 d1		 not	 ecx
  00162	23 c2		 and	 eax, edx
  00164	23 cb		 and	 ecx, ebx
  00166	0b c8		 or	 ecx, eax

; 167  :   FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */

  00168	8b c6		 mov	 eax, esi
  0016a	81 c1 b1 5b ff
	ff		 add	 ecx, -42063		; ffff5bb1H
  00170	03 4d e4	 add	 ecx, DWORD PTR _x$[ebp+40]
  00173	03 f9		 add	 edi, ecx
  00175	c1 cf 0f	 ror	 edi, 15			; 0000000fH
  00178	03 fe		 add	 edi, esi
  0017a	8b cf		 mov	 ecx, edi
  0017c	89 7d a8	 mov	 DWORD PTR _c$4$[ebp], edi
  0017f	f7 d1		 not	 ecx
  00181	23 c7		 and	 eax, edi
  00183	23 ca		 and	 ecx, edx
  00185	0b c8		 or	 ecx, eax

; 168  :   FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */

  00187	8b c7		 mov	 eax, edi
  00189	81 c1 be d7 5c
	89		 add	 ecx, -1990404162	; 895cd7beH
  0018f	03 4d e8	 add	 ecx, DWORD PTR _x$[ebp+44]
  00192	03 d9		 add	 ebx, ecx
  00194	c1 cb 0a	 ror	 ebx, 10			; 0000000aH
  00197	03 df		 add	 ebx, edi
  00199	8b cb		 mov	 ecx, ebx
  0019b	89 5d b0	 mov	 DWORD PTR _b$4$[ebp], ebx
  0019e	f7 d1		 not	 ecx
  001a0	23 c3		 and	 eax, ebx
  001a2	23 ce		 and	 ecx, esi
  001a4	0b c8		 or	 ecx, eax
  001a6	81 c1 22 11 90
	6b		 add	 ecx, 1804603682		; 6b901122H
  001ac	03 4d ec	 add	 ecx, DWORD PTR _x$[ebp+48]

; 169  :   FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */

  001af	8b c3		 mov	 eax, ebx
  001b1	03 d1		 add	 edx, ecx
  001b3	c1 c2 07	 rol	 edx, 7
  001b6	03 d3		 add	 edx, ebx
  001b8	23 c2		 and	 eax, edx
  001ba	89 55 ac	 mov	 DWORD PTR _a$4$[ebp], edx
  001bd	8b ca		 mov	 ecx, edx
  001bf	f7 d1		 not	 ecx
  001c1	23 cf		 and	 ecx, edi
  001c3	8d be 93 71 98
	fd		 lea	 edi, DWORD PTR [esi-40341101]
  001c9	0b c8		 or	 ecx, eax
  001cb	03 4d f0	 add	 ecx, DWORD PTR _x$[ebp+52]
  001ce	03 f9		 add	 edi, ecx
  001d0	c1 c7 0c	 rol	 edi, 12			; 0000000cH
  001d3	03 fa		 add	 edi, edx

; 170  :   FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */

  001d5	8b f7		 mov	 esi, edi
  001d7	89 7d b8	 mov	 DWORD PTR _d$5$[ebp], edi
  001da	f7 d6		 not	 esi
  001dc	8b c7		 mov	 eax, edi
  001de	23 c2		 and	 eax, edx
  001e0	8b ce		 mov	 ecx, esi
  001e2	23 cb		 and	 ecx, ebx
  001e4	8b 5d a8	 mov	 ebx, DWORD PTR _c$4$[ebp]
  001e7	0b c8		 or	 ecx, eax
  001e9	81 c3 8e 43 79
	a6		 add	 ebx, -1502002290	; a679438eH
  001ef	03 4d f4	 add	 ecx, DWORD PTR _x$[ebp+56]

; 171  :   FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

  001f2	8b c7		 mov	 eax, edi
  001f4	03 d9		 add	 ebx, ecx
  001f6	c1 cb 0f	 ror	 ebx, 15			; 0000000fH
  001f9	03 df		 add	 ebx, edi
  001fb	8b 7d b0	 mov	 edi, DWORD PTR _b$4$[ebp]
  001fe	23 c3		 and	 eax, ebx
  00200	8b d3		 mov	 edx, ebx
  00202	f7 d2		 not	 edx
  00204	81 c7 21 08 b4
	49		 add	 edi, 1236535329		; 49b40821H
  0020a	8b ca		 mov	 ecx, edx

; 172  : 
; 173  :  /* Round 2 */
; 174  :   GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */

  0020c	23 f3		 and	 esi, ebx
  0020e	23 4d ac	 and	 ecx, DWORD PTR _a$4$[ebp]
  00211	0b c8		 or	 ecx, eax
  00213	03 4d f8	 add	 ecx, DWORD PTR _x$[ebp+60]
  00216	03 f9		 add	 edi, ecx
  00218	8b 4d b8	 mov	 ecx, DWORD PTR _d$5$[ebp]
  0021b	8b c1		 mov	 eax, ecx
  0021d	c1 cf 0a	 ror	 edi, 10			; 0000000aH
  00220	03 fb		 add	 edi, ebx

; 175  :   GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */

  00222	81 c1 40 b3 40
	c0		 add	 ecx, -1069501632	; c040b340H
  00228	23 c7		 and	 eax, edi
  0022a	23 d7		 and	 edx, edi
  0022c	0b f0		 or	 esi, eax
  0022e	8b 45 ac	 mov	 eax, DWORD PTR _a$4$[ebp]
  00231	03 75 c0	 add	 esi, DWORD PTR _x$[ebp+4]
  00234	05 62 25 1e f6	 add	 eax, -165796510		; f61e2562H
  00239	03 f0		 add	 esi, eax
  0023b	8b c3		 mov	 eax, ebx
  0023d	c1 c6 05	 rol	 esi, 5
  00240	03 f7		 add	 esi, edi
  00242	23 c6		 and	 eax, esi
  00244	0b d0		 or	 edx, eax
  00246	03 55 d4	 add	 edx, DWORD PTR _x$[ebp+24]
  00249	03 d1		 add	 edx, ecx

; 176  :   GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */

  0024b	8b cf		 mov	 ecx, edi
  0024d	f7 d1		 not	 ecx
  0024f	c1 c2 09	 rol	 edx, 9
  00252	03 d6		 add	 edx, esi
  00254	23 ce		 and	 ecx, esi
  00256	8b c2		 mov	 eax, edx
  00258	23 c7		 and	 eax, edi
  0025a	0b c8		 or	 ecx, eax
  0025c	81 c1 51 5a 5e
	26		 add	 ecx, 643717713		; 265e5a51H
  00262	03 4d e8	 add	 ecx, DWORD PTR _x$[ebp+44]
  00265	03 d9		 add	 ebx, ecx

; 177  :   GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */

  00267	8b ce		 mov	 ecx, esi
  00269	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  0026c	f7 d1		 not	 ecx
  0026e	03 da		 add	 ebx, edx
  00270	23 ca		 and	 ecx, edx
  00272	8b c3		 mov	 eax, ebx
  00274	23 c6		 and	 eax, esi
  00276	0b c8		 or	 ecx, eax
  00278	81 c1 aa c7 b6
	e9		 add	 ecx, -373897302		; e9b6c7aaH
  0027e	03 4d bc	 add	 ecx, DWORD PTR _x$[ebp]

; 178  :   GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */

  00281	8b c2		 mov	 eax, edx
  00283	03 f9		 add	 edi, ecx
  00285	8b ca		 mov	 ecx, edx
  00287	f7 d1		 not	 ecx
  00289	c1 cf 0c	 ror	 edi, 12			; 0000000cH
  0028c	23 cb		 and	 ecx, ebx
  0028e	03 fb		 add	 edi, ebx
  00290	23 c7		 and	 eax, edi
  00292	0b c8		 or	 ecx, eax

; 179  :   GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */

  00294	8b c3		 mov	 eax, ebx
  00296	81 c1 5d 10 2f
	d6		 add	 ecx, -701558691		; d62f105dH
  0029c	03 4d d0	 add	 ecx, DWORD PTR _x$[ebp+20]
  0029f	03 f1		 add	 esi, ecx
  002a1	8b cb		 mov	 ecx, ebx
  002a3	f7 d1		 not	 ecx
  002a5	c1 c6 05	 rol	 esi, 5
  002a8	23 cf		 and	 ecx, edi
  002aa	03 f7		 add	 esi, edi
  002ac	23 c6		 and	 eax, esi
  002ae	0b c8		 or	 ecx, eax
  002b0	81 c1 53 14 44
	02		 add	 ecx, 38016083		; 02441453H
  002b6	03 4d e4	 add	 ecx, DWORD PTR _x$[ebp+40]
  002b9	03 d1		 add	 edx, ecx

; 180  :   GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */

  002bb	8b cf		 mov	 ecx, edi
  002bd	f7 d1		 not	 ecx
  002bf	c1 c2 09	 rol	 edx, 9
  002c2	23 ce		 and	 ecx, esi
  002c4	03 d6		 add	 edx, esi
  002c6	8b c2		 mov	 eax, edx
  002c8	23 c7		 and	 eax, edi
  002ca	0b c8		 or	 ecx, eax
  002cc	81 c1 81 e6 a1
	d8		 add	 ecx, -660478335		; d8a1e681H
  002d2	03 4d f8	 add	 ecx, DWORD PTR _x$[ebp+60]
  002d5	03 d9		 add	 ebx, ecx

; 181  :   GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */

  002d7	8b ce		 mov	 ecx, esi
  002d9	f7 d1		 not	 ecx
  002db	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  002de	23 ca		 and	 ecx, edx
  002e0	03 da		 add	 ebx, edx
  002e2	8b c3		 mov	 eax, ebx
  002e4	23 c6		 and	 eax, esi
  002e6	0b c8		 or	 ecx, eax

; 182  :   GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */

  002e8	8b c2		 mov	 eax, edx
  002ea	81 c1 c8 fb d3
	e7		 add	 ecx, -405537848		; e7d3fbc8H
  002f0	03 4d cc	 add	 ecx, DWORD PTR _x$[ebp+16]
  002f3	03 f9		 add	 edi, ecx
  002f5	8b ca		 mov	 ecx, edx
  002f7	f7 d1		 not	 ecx
  002f9	c1 cf 0c	 ror	 edi, 12			; 0000000cH
  002fc	23 cb		 and	 ecx, ebx
  002fe	03 fb		 add	 edi, ebx
  00300	23 c7		 and	 eax, edi
  00302	0b c8		 or	 ecx, eax

; 183  :   GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */

  00304	8b c3		 mov	 eax, ebx
  00306	81 c1 e6 cd e1
	21		 add	 ecx, 568446438		; 21e1cde6H
  0030c	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp+36]
  0030f	03 f1		 add	 esi, ecx
  00311	8b cb		 mov	 ecx, ebx
  00313	f7 d1		 not	 ecx
  00315	c1 c6 05	 rol	 esi, 5
  00318	23 cf		 and	 ecx, edi
  0031a	03 f7		 add	 esi, edi
  0031c	23 c6		 and	 eax, esi
  0031e	0b c8		 or	 ecx, eax
  00320	81 c1 d6 07 37
	c3		 add	 ecx, -1019803690	; c33707d6H
  00326	03 4d f4	 add	 ecx, DWORD PTR _x$[ebp+56]
  00329	03 d1		 add	 edx, ecx

; 184  :   GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */

  0032b	8b cf		 mov	 ecx, edi
  0032d	c1 c2 09	 rol	 edx, 9
  00330	f7 d1		 not	 ecx
  00332	03 d6		 add	 edx, esi
  00334	23 ce		 and	 ecx, esi
  00336	8b c2		 mov	 eax, edx
  00338	89 55 b8	 mov	 DWORD PTR _d$8$[ebp], edx
  0033b	23 c7		 and	 eax, edi
  0033d	0b c8		 or	 ecx, eax
  0033f	81 c1 87 0d d5
	f4		 add	 ecx, -187363961		; f4d50d87H
  00345	03 4d c8	 add	 ecx, DWORD PTR _x$[ebp+12]
  00348	03 d9		 add	 ebx, ecx
  0034a	c1 c3 0e	 rol	 ebx, 14			; 0000000eH
  0034d	03 da		 add	 ebx, edx

; 185  : 
; 186  :   GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */

  0034f	8b ce		 mov	 ecx, esi
  00351	f7 d1		 not	 ecx
  00353	8b c3		 mov	 eax, ebx
  00355	23 c6		 and	 eax, esi
  00357	23 ca		 and	 ecx, edx
  00359	0b c8		 or	 ecx, eax

; 187  :   GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */

  0035b	8b c2		 mov	 eax, edx
  0035d	81 c1 ed 14 5a
	45		 add	 ecx, 1163531501		; 455a14edH
  00363	03 4d dc	 add	 ecx, DWORD PTR _x$[ebp+32]
  00366	03 f9		 add	 edi, ecx
  00368	8b ca		 mov	 ecx, edx
  0036a	f7 d1		 not	 ecx
  0036c	c1 cf 0c	 ror	 edi, 12			; 0000000cH
  0036f	23 cb		 and	 ecx, ebx
  00371	8d 96 05 e9 e3
	a9		 lea	 edx, DWORD PTR [esi-1444681467]

; 188  :   GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */

  00377	8b 75 b8	 mov	 esi, DWORD PTR _d$8$[ebp]
  0037a	03 fb		 add	 edi, ebx
  0037c	23 c7		 and	 eax, edi
  0037e	89 7d b0	 mov	 DWORD PTR _b$8$[ebp], edi
  00381	0b c8		 or	 ecx, eax
  00383	81 c6 f8 a3 ef
	fc		 add	 esi, -51403784		; fcefa3f8H
  00389	03 4d f0	 add	 ecx, DWORD PTR _x$[ebp+52]
  0038c	8b c3		 mov	 eax, ebx
  0038e	03 d1		 add	 edx, ecx
  00390	8b cb		 mov	 ecx, ebx
  00392	f7 d1		 not	 ecx
  00394	c1 c2 05	 rol	 edx, 5
  00397	23 cf		 and	 ecx, edi
  00399	03 d7		 add	 edx, edi
  0039b	23 c2		 and	 eax, edx
  0039d	0b c8		 or	 ecx, eax
  0039f	03 4d c4	 add	 ecx, DWORD PTR _x$[ebp+8]
  003a2	03 f1		 add	 esi, ecx

; 189  :   GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */

  003a4	8b cf		 mov	 ecx, edi
  003a6	c1 c6 09	 rol	 esi, 9
  003a9	f7 d1		 not	 ecx
  003ab	03 f2		 add	 esi, edx
  003ad	23 ca		 and	 ecx, edx
  003af	8b c6		 mov	 eax, esi
  003b1	23 c7		 and	 eax, edi
  003b3	8d bb d9 02 6f
	67		 lea	 edi, DWORD PTR [ebx+1735328473]
  003b9	0b c8		 or	 ecx, eax

; 190  :   GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

  003bb	8b 5d b0	 mov	 ebx, DWORD PTR _b$8$[ebp]
  003be	03 4d d8	 add	 ecx, DWORD PTR _x$[ebp+28]
  003c1	81 c3 8a 4c 2a
	8d		 add	 ebx, -1926607734	; 8d2a4c8aH
  003c7	03 f9		 add	 edi, ecx
  003c9	8b ca		 mov	 ecx, edx
  003cb	c1 c7 0e	 rol	 edi, 14			; 0000000eH
  003ce	f7 d1		 not	 ecx
  003d0	03 fe		 add	 edi, esi
  003d2	23 ce		 and	 ecx, esi
  003d4	8b c7		 mov	 eax, edi
  003d6	23 c2		 and	 eax, edx
  003d8	0b c8		 or	 ecx, eax

; 191  : 
; 192  :   /* Round 3 */
; 193  :   HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */

  003da	8b c6		 mov	 eax, esi
  003dc	03 4d ec	 add	 ecx, DWORD PTR _x$[ebp+48]
  003df	33 c7		 xor	 eax, edi
  003e1	03 d9		 add	 ebx, ecx
  003e3	c1 cb 0c	 ror	 ebx, 12			; 0000000cH
  003e6	03 df		 add	 ebx, edi
  003e8	33 c3		 xor	 eax, ebx
  003ea	05 42 39 fa ff	 add	 eax, -378558		; fffa3942H
  003ef	03 45 d0	 add	 eax, DWORD PTR _x$[ebp+20]
  003f2	03 d0		 add	 edx, eax

; 194  :   HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */

  003f4	8b c7		 mov	 eax, edi
  003f6	33 c3		 xor	 eax, ebx
  003f8	c1 c2 04	 rol	 edx, 4
  003fb	03 d3		 add	 edx, ebx
  003fd	33 c2		 xor	 eax, edx
  003ff	05 81 f6 71 87	 add	 eax, -2022574463	; 8771f681H
  00404	03 45 dc	 add	 eax, DWORD PTR _x$[ebp+32]
  00407	03 f0		 add	 esi, eax
  00409	c1 c6 0b	 rol	 esi, 11			; 0000000bH
  0040c	03 f2		 add	 esi, edx

; 195  :   HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */

  0040e	8b c6		 mov	 eax, esi
  00410	33 c3		 xor	 eax, ebx
  00412	33 c2		 xor	 eax, edx
  00414	05 22 61 9d 6d	 add	 eax, 1839030562		; 6d9d6122H
  00419	03 45 e8	 add	 eax, DWORD PTR _x$[ebp+44]
  0041c	03 f8		 add	 edi, eax
  0041e	c1 c7 10	 rol	 edi, 16			; 00000010H

; 196  :   HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */

  00421	8b ce		 mov	 ecx, esi
  00423	03 fe		 add	 edi, esi
  00425	33 cf		 xor	 ecx, edi
  00427	8b c1		 mov	 eax, ecx
  00429	33 c2		 xor	 eax, edx
  0042b	05 0c 38 e5 fd	 add	 eax, -35309556		; fde5380cH
  00430	03 45 f4	 add	 eax, DWORD PTR _x$[ebp+56]
  00433	03 d8		 add	 ebx, eax

; 197  :   HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
; 198  :   HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */

  00435	8b c7		 mov	 eax, edi
  00437	c1 cb 09	 ror	 ebx, 9
  0043a	03 df		 add	 ebx, edi
  0043c	33 c3		 xor	 eax, ebx
  0043e	33 cb		 xor	 ecx, ebx
  00440	81 c1 44 ea be
	a4		 add	 ecx, -1530992060	; a4beea44H
  00446	03 4d c0	 add	 ecx, DWORD PTR _x$[ebp+4]
  00449	03 d1		 add	 edx, ecx
  0044b	c1 c2 04	 rol	 edx, 4
  0044e	03 d3		 add	 edx, ebx
  00450	33 c2		 xor	 eax, edx
  00452	05 a9 cf de 4b	 add	 eax, 1272893353		; 4bdecfa9H
  00457	03 45 cc	 add	 eax, DWORD PTR _x$[ebp+16]
  0045a	03 f0		 add	 esi, eax
  0045c	c1 c6 0b	 rol	 esi, 11			; 0000000bH
  0045f	03 f2		 add	 esi, edx

; 199  :   HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */

  00461	8b c6		 mov	 eax, esi

; 200  :   HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */

  00463	8b ce		 mov	 ecx, esi
  00465	33 c3		 xor	 eax, ebx
  00467	33 c2		 xor	 eax, edx
  00469	05 60 4b bb f6	 add	 eax, -155497632		; f6bb4b60H
  0046e	03 45 d8	 add	 eax, DWORD PTR _x$[ebp+28]
  00471	03 f8		 add	 edi, eax
  00473	c1 c7 10	 rol	 edi, 16			; 00000010H
  00476	03 fe		 add	 edi, esi
  00478	33 cf		 xor	 ecx, edi
  0047a	8b c1		 mov	 eax, ecx
  0047c	33 c2		 xor	 eax, edx
  0047e	05 70 bc bf be	 add	 eax, -1094730640	; bebfbc70H
  00483	03 45 e4	 add	 eax, DWORD PTR _x$[ebp+40]
  00486	03 d8		 add	 ebx, eax

; 201  :   HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
; 202  :   HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */

  00488	8b c7		 mov	 eax, edi
  0048a	c1 cb 09	 ror	 ebx, 9
  0048d	03 df		 add	 ebx, edi
  0048f	33 cb		 xor	 ecx, ebx
  00491	33 c3		 xor	 eax, ebx
  00493	81 c1 c6 7e 9b
	28		 add	 ecx, 681279174		; 289b7ec6H
  00499	03 4d f0	 add	 ecx, DWORD PTR _x$[ebp+52]
  0049c	03 d1		 add	 edx, ecx
  0049e	c1 c2 04	 rol	 edx, 4
  004a1	03 d3		 add	 edx, ebx
  004a3	33 c2		 xor	 eax, edx
  004a5	89 55 b8	 mov	 DWORD PTR _a$11$[ebp], edx
  004a8	05 fa 27 a1 ea	 add	 eax, -358537222		; eaa127faH
  004ad	03 45 bc	 add	 eax, DWORD PTR _x$[ebp]
  004b0	03 f0		 add	 esi, eax
  004b2	c1 c6 0b	 rol	 esi, 11			; 0000000bH
  004b5	03 f2		 add	 esi, edx

; 203  :   HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */

  004b7	8b c6		 mov	 eax, esi

; 204  :   HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */

  004b9	8b ce		 mov	 ecx, esi
  004bb	33 c3		 xor	 eax, ebx
  004bd	33 c2		 xor	 eax, edx
  004bf	05 85 30 ef d4	 add	 eax, -722521979		; d4ef3085H
  004c4	03 45 c8	 add	 eax, DWORD PTR _x$[ebp+12]
  004c7	03 f8		 add	 edi, eax

; 205  :   HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */

  004c9	8b 45 b8	 mov	 eax, DWORD PTR _a$11$[ebp]
  004cc	c1 c7 10	 rol	 edi, 16			; 00000010H
  004cf	05 39 d0 d4 d9	 add	 eax, -640364487		; d9d4d039H
  004d4	03 fe		 add	 edi, esi
  004d6	33 cf		 xor	 ecx, edi
  004d8	33 d1		 xor	 edx, ecx
  004da	81 c2 05 1d 88
	04		 add	 edx, 76029189		; 04881d05H
  004e0	03 55 d4	 add	 edx, DWORD PTR _x$[ebp+24]
  004e3	03 d3		 add	 edx, ebx
  004e5	c1 ca 09	 ror	 edx, 9
  004e8	03 d7		 add	 edx, edi
  004ea	33 ca		 xor	 ecx, edx
  004ec	03 4d e0	 add	 ecx, DWORD PTR _x$[ebp+36]
  004ef	03 c8		 add	 ecx, eax

; 206  :   HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */

  004f1	8b c7		 mov	 eax, edi
  004f3	c1 c1 04	 rol	 ecx, 4
  004f6	03 ca		 add	 ecx, edx
  004f8	33 c2		 xor	 eax, edx
  004fa	33 c1		 xor	 eax, ecx
  004fc	05 e5 99 db e6	 add	 eax, -421815835		; e6db99e5H
  00501	03 45 ec	 add	 eax, DWORD PTR _x$[ebp+48]
  00504	03 f0		 add	 esi, eax
  00506	c1 c6 0b	 rol	 esi, 11			; 0000000bH
  00509	03 f1		 add	 esi, ecx

; 207  :   HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */

  0050b	8b c6		 mov	 eax, esi
  0050d	33 c2		 xor	 eax, edx
  0050f	33 c1		 xor	 eax, ecx
  00511	05 f8 7c a2 1f	 add	 eax, 530742520		; 1fa27cf8H
  00516	03 45 f8	 add	 eax, DWORD PTR _x$[ebp+60]
  00519	03 f8		 add	 edi, eax

; 208  :   HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

  0051b	8b c6		 mov	 eax, esi
  0051d	c1 c7 10	 rol	 edi, 16			; 00000010H
  00520	03 fe		 add	 edi, esi
  00522	33 c7		 xor	 eax, edi
  00524	33 c1		 xor	 eax, ecx
  00526	05 65 56 ac c4	 add	 eax, -995338651		; c4ac5665H
  0052b	03 45 c4	 add	 eax, DWORD PTR _x$[ebp+8]
  0052e	03 d0		 add	 edx, eax

; 209  : 
; 210  :   /* Round 4 */
; 211  :   II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */

  00530	8b c6		 mov	 eax, esi
  00532	f7 d0		 not	 eax
  00534	c1 ca 09	 ror	 edx, 9
  00537	03 d7		 add	 edx, edi
  00539	0b c2		 or	 eax, edx
  0053b	33 c7		 xor	 eax, edi
  0053d	05 44 22 29 f4	 add	 eax, -198630844		; f4292244H
  00542	03 45 bc	 add	 eax, DWORD PTR _x$[ebp]
  00545	03 c8		 add	 ecx, eax

; 212  :   II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */

  00547	8b c7		 mov	 eax, edi
  00549	f7 d0		 not	 eax
  0054b	c1 c1 06	 rol	 ecx, 6
  0054e	03 ca		 add	 ecx, edx
  00550	0b c1		 or	 eax, ecx
  00552	33 c2		 xor	 eax, edx
  00554	05 97 ff 2a 43	 add	 eax, 1126891415		; 432aff97H
  00559	03 45 d8	 add	 eax, DWORD PTR _x$[ebp+28]
  0055c	03 f0		 add	 esi, eax

; 213  :   II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */

  0055e	8b c2		 mov	 eax, edx
  00560	f7 d0		 not	 eax
  00562	c1 c6 0a	 rol	 esi, 10			; 0000000aH
  00565	03 f1		 add	 esi, ecx
  00567	0b c6		 or	 eax, esi
  00569	33 c1		 xor	 eax, ecx
  0056b	05 a7 23 94 ab	 add	 eax, -1416354905	; ab9423a7H
  00570	03 45 f4	 add	 eax, DWORD PTR _x$[ebp+56]
  00573	03 f8		 add	 edi, eax

; 214  :   II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */

  00575	8b c1		 mov	 eax, ecx
  00577	f7 d0		 not	 eax
  00579	c1 c7 0f	 rol	 edi, 15			; 0000000fH
  0057c	03 fe		 add	 edi, esi
  0057e	0b c7		 or	 eax, edi
  00580	33 c6		 xor	 eax, esi
  00582	05 39 a0 93 fc	 add	 eax, -57434055		; fc93a039H
  00587	03 45 d0	 add	 eax, DWORD PTR _x$[ebp+20]
  0058a	03 d0		 add	 edx, eax

; 215  :   II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */

  0058c	8b c6		 mov	 eax, esi
  0058e	f7 d0		 not	 eax
  00590	c1 ca 0b	 ror	 edx, 11			; 0000000bH
  00593	03 d7		 add	 edx, edi
  00595	0b c2		 or	 eax, edx
  00597	33 c7		 xor	 eax, edi
  00599	05 c3 59 5b 65	 add	 eax, 1700485571		; 655b59c3H
  0059e	03 45 ec	 add	 eax, DWORD PTR _x$[ebp+48]
  005a1	03 c8		 add	 ecx, eax

; 216  :   II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */

  005a3	8b c7		 mov	 eax, edi
  005a5	f7 d0		 not	 eax
  005a7	c1 c1 06	 rol	 ecx, 6
  005aa	03 ca		 add	 ecx, edx
  005ac	0b c1		 or	 eax, ecx
  005ae	33 c2		 xor	 eax, edx
  005b0	05 92 cc 0c 8f	 add	 eax, -1894986606	; 8f0ccc92H
  005b5	03 45 c8	 add	 eax, DWORD PTR _x$[ebp+12]
  005b8	03 f0		 add	 esi, eax

; 217  :   II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */

  005ba	8b c2		 mov	 eax, edx
  005bc	c1 c6 0a	 rol	 esi, 10			; 0000000aH
  005bf	f7 d0		 not	 eax
  005c1	03 f1		 add	 esi, ecx
  005c3	0b c6		 or	 eax, esi
  005c5	33 c1		 xor	 eax, ecx
  005c7	05 7d f4 ef ff	 add	 eax, -1051523		; ffeff47dH

; 218  :   II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
; 219  :   II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
; 220  :   II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */

  005cc	8d 9e e0 e6 2c
	fe		 lea	 ebx, DWORD PTR [esi-30611744]
  005d2	03 45 e4	 add	 eax, DWORD PTR _x$[ebp+40]
  005d5	03 f8		 add	 edi, eax
  005d7	8b c1		 mov	 eax, ecx
  005d9	f7 d0		 not	 eax
  005db	c1 c7 0f	 rol	 edi, 15			; 0000000fH
  005de	03 fe		 add	 edi, esi
  005e0	0b c7		 or	 eax, edi
  005e2	33 c6		 xor	 eax, esi
  005e4	05 d1 5d 84 85	 add	 eax, -2054922799	; 85845dd1H
  005e9	03 45 c0	 add	 eax, DWORD PTR _x$[ebp+4]
  005ec	03 d0		 add	 edx, eax
  005ee	8b c6		 mov	 eax, esi
  005f0	f7 d0		 not	 eax
  005f2	c1 ca 0b	 ror	 edx, 11			; 0000000bH
  005f5	03 d7		 add	 edx, edi
  005f7	0b c2		 or	 eax, edx
  005f9	33 c7		 xor	 eax, edi
  005fb	05 4f 7e a8 6f	 add	 eax, 1873313359		; 6fa87e4fH
  00600	03 45 dc	 add	 eax, DWORD PTR _x$[ebp+32]
  00603	03 c8		 add	 ecx, eax
  00605	8b c7		 mov	 eax, edi
  00607	f7 d0		 not	 eax
  00609	c1 c1 06	 rol	 ecx, 6
  0060c	03 ca		 add	 ecx, edx
  0060e	0b c1		 or	 eax, ecx
  00610	33 c2		 xor	 eax, edx
  00612	03 45 f8	 add	 eax, DWORD PTR _x$[ebp+60]
  00615	03 d8		 add	 ebx, eax

; 221  :   II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
; 222  :   II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
; 223  :   II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */

  00617	8d b1 82 7e 53
	f7		 lea	 esi, DWORD PTR [ecx-145523070]
  0061d	8b c2		 mov	 eax, edx
  0061f	c1 c3 0a	 rol	 ebx, 10			; 0000000aH
  00622	f7 d0		 not	 eax
  00624	03 d9		 add	 ebx, ecx
  00626	0b c3		 or	 eax, ebx
  00628	33 c1		 xor	 eax, ecx
  0062a	05 14 43 01 a3	 add	 eax, -1560198380	; a3014314H
  0062f	03 45 d4	 add	 eax, DWORD PTR _x$[ebp+24]
  00632	03 f8		 add	 edi, eax
  00634	8b c1		 mov	 eax, ecx
  00636	f7 d0		 not	 eax
  00638	c1 c7 0f	 rol	 edi, 15			; 0000000fH
  0063b	03 fb		 add	 edi, ebx
  0063d	0b c7		 or	 eax, edi
  0063f	33 c3		 xor	 eax, ebx
  00641	05 a1 11 08 4e	 add	 eax, 1309151649		; 4e0811a1H
  00646	03 45 f0	 add	 eax, DWORD PTR _x$[ebp+52]

; 224  :   II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
; 225  :   II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */

  00649	8d 8f bb d2 d7
	2a		 lea	 ecx, DWORD PTR [edi+718787259]
  0064f	03 d0		 add	 edx, eax
  00651	8b c3		 mov	 eax, ebx
  00653	f7 d0		 not	 eax
  00655	c1 ca 0b	 ror	 edx, 11			; 0000000bH
  00658	03 d7		 add	 edx, edi
  0065a	0b c2		 or	 eax, edx
  0065c	89 55 b8	 mov	 DWORD PTR _b$16$[ebp], edx
  0065f	33 c7		 xor	 eax, edi
  00661	03 45 cc	 add	 eax, DWORD PTR _x$[ebp+16]
  00664	03 f0		 add	 esi, eax
  00666	8b c7		 mov	 eax, edi

; 226  :   II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */
; 227  : 
; 228  :   state[0] += a;

  00668	8b 7d b4	 mov	 edi, DWORD PTR _state$GSCopy$1$[ebp]
  0066b	f7 d0		 not	 eax
  0066d	c1 c6 06	 rol	 esi, 6
  00670	03 f2		 add	 esi, edx
  00672	0b c6		 or	 eax, esi
  00674	33 c2		 xor	 eax, edx
  00676	8d 93 35 f2 3a
	bd		 lea	 edx, DWORD PTR [ebx-1120210379]
  0067c	03 45 e8	 add	 eax, DWORD PTR _x$[ebp+44]
  0067f	8b 5d b8	 mov	 ebx, DWORD PTR _b$16$[ebp]
  00682	03 d0		 add	 edx, eax
  00684	c1 c2 0a	 rol	 edx, 10			; 0000000aH
  00687	8b c3		 mov	 eax, ebx
  00689	03 d6		 add	 edx, esi
  0068b	f7 d0		 not	 eax
  0068d	0b c2		 or	 eax, edx
  0068f	33 c6		 xor	 eax, esi
  00691	03 45 c4	 add	 eax, DWORD PTR _x$[ebp+8]
  00694	03 c8		 add	 ecx, eax
  00696	c1 c1 0f	 rol	 ecx, 15			; 0000000fH
  00699	03 ca		 add	 ecx, edx
  0069b	01 37		 add	 DWORD PTR [edi], esi

; 229  :   state[1] += b;
; 230  :   state[2] += c;

  0069d	01 4f 08	 add	 DWORD PTR [edi+8], ecx
  006a0	8d 83 91 d3 86
	eb		 lea	 eax, DWORD PTR [ebx-343485551]

; 231  :   state[3] += d;

  006a6	01 57 0c	 add	 DWORD PTR [edi+12], edx
  006a9	f7 d6		 not	 esi
  006ab	0b f1		 or	 esi, ecx
  006ad	33 f2		 xor	 esi, edx
  006af	03 75 e0	 add	 esi, DWORD PTR _x$[ebp+36]
  006b2	03 c6		 add	 eax, esi
  006b4	c1 c8 0b	 ror	 eax, 11			; 0000000bH
  006b7	03 47 04	 add	 eax, DWORD PTR [edi+4]
  006ba	03 c1		 add	 eax, ecx

; 232  : 
; 233  :   /* Zeroize sensitive information. */
; 234  :   MD5_memset ((POINTER)x, 0, sizeof (x));
; 235  : }

  006bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006bf	89 47 04	 mov	 DWORD PTR [edi+4], eax
  006c2	33 cd		 xor	 ecx, ebp
  006c4	5f		 pop	 edi
  006c5	5e		 pop	 esi
  006c6	5b		 pop	 ebx
  006c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006cc	8b e5		 mov	 esp, ebp
  006ce	5d		 pop	 ebp
  006cf	c3		 ret	 0
?MD5Transform@@YAXQAKQAE@Z ENDP				; MD5Transform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?MD5Int@@YAHPAEH@Z
_TEXT	SEGMENT
_context$ = -108					; size = 88
_digest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_strlen$ = 12						; size = 4
?MD5Int@@YAHPAEH@Z PROC					; MD5Int, COMDAT

; 295  : int MD5Int (unsigned char *string, int strlen){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _string$[ebp]

; 296  : 	int i;
; 297  : 	MD5_CTX context;
; 298  : 	unsigned char digest[16];
; 299  : 	int result = 0;
; 300  : 	MD5Init (&context);

  00014	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?MD5Init@@YAXPAUMD5_CTX@@@Z ; MD5Init

; 301  : 	MD5Update (&context, string, strlen);

  0001d	ff 75 0c	 push	 DWORD PTR _strlen$[ebp]
  00020	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  00023	56		 push	 esi
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ; MD5Update

; 302  : 	MD5Final (digest, &context);

  0002a	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  0002d	50		 push	 eax
  0002e	8d 45 ec	 lea	 eax, DWORD PTR _digest$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?MD5Final@@YAXQAEPAUMD5_CTX@@@Z ; MD5Final
  00037	83 c4 18	 add	 esp, 24			; 00000018H
  0003a	0f 57 db	 xorps	 xmm3, xmm3
  0003d	33 c0		 xor	 eax, eax
  0003f	0f 57 d2	 xorps	 xmm2, xmm2
  00042	5e		 pop	 esi
$LL4@MD5Int:

; 303  : 	for (i=0; i<16; i++){
; 304  : 		result += digest[i];

  00043	66 0f 6e 4c 05
	ec		 movd	 xmm1, DWORD PTR _digest$[ebp+eax]
  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	66 0f 60 c8	 punpcklbw xmm1, xmm0
  00050	66 0f 61 c8	 punpcklwd xmm1, xmm0
  00054	66 0f fe d9	 paddd	 xmm3, xmm1
  00058	66 0f 6e 4c 05
	f0		 movd	 xmm1, DWORD PTR _digest$[ebp+eax+4]
  0005e	66 0f 60 c8	 punpcklbw xmm1, xmm0
  00062	83 c0 08	 add	 eax, 8
  00065	66 0f 61 c8	 punpcklwd xmm1, xmm0
  00069	66 0f fe d1	 paddd	 xmm2, xmm1
  0006d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00070	7c d1		 jl	 SHORT $LL4@MD5Int

; 305  : 	}
; 306  : 
; 307  : 	return result;
; 308  : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	66 0f fe d3	 paddd	 xmm2, xmm3
  00079	0f 28 c2	 movaps	 xmm0, xmm2
  0007c	33 cd		 xor	 ecx, ebp
  0007e	66 0f 73 d8 08	 psrldq	 xmm0, 8
  00083	66 0f fe d0	 paddd	 xmm2, xmm0
  00087	0f 10 c2	 movups	 xmm0, xmm2
  0008a	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0008f	66 0f fe d0	 paddd	 xmm2, xmm0
  00093	66 0f 7e d0	 movd	 eax, xmm2
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
?MD5Int@@YAHPAEH@Z ENDP					; MD5Int
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?MD5String@@YAPADPAEH@Z
_TEXT	SEGMENT
_context$ = -108					; size = 88
_digest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_strlen$ = 12						; size = 4
?MD5String@@YAPADPAEH@Z PROC				; MD5String, COMDAT

; 278  : char *MD5String (unsigned char *string, int strlen){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _string$[ebp]
  00015	57		 push	 edi

; 279  : 	int i;
; 280  : 	MD5_CTX context;
; 281  : 	unsigned char digest[16];
; 282  : 	char *result=(char *)malloc(33);

  00016	6a 21		 push	 33			; 00000021H
  00018	e8 00 00 00 00	 call	 _malloc
  0001d	8b d8		 mov	 ebx, eax

; 283  : 
; 284  : 	MD5Init (&context);

  0001f	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?MD5Init@@YAXPAUMD5_CTX@@@Z ; MD5Init

; 285  : 	MD5Update (&context, string, strlen);

  00028	ff 75 0c	 push	 DWORD PTR _strlen$[ebp]
  0002b	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  0002e	56		 push	 esi
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ; MD5Update

; 286  : 	MD5Final (digest, &context);

  00035	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  00038	50		 push	 eax
  00039	8d 45 ec	 lea	 eax, DWORD PTR _digest$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?MD5Final@@YAXQAEPAUMD5_CTX@@@Z ; MD5Final
  00042	83 c4 1c	 add	 esp, 28			; 0000001cH
  00045	8b fb		 mov	 edi, ebx
  00047	33 f6		 xor	 esi, esi
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@MD5String:

; 287  : 
; 288  : 	for (i=0; i<16; i++)
; 289  : 		sprintf(result+2*i, "%02x", digest[i]);

  00050	0f b6 44 35 ec	 movzx	 eax, BYTE PTR _digest$[ebp+esi]
  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_04NOJCDH@?$CF02x@
  0005b	57		 push	 edi
  0005c	e8 00 00 00 00	 call	 _sprintf
  00061	46		 inc	 esi
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	83 c7 02	 add	 edi, 2
  00068	83 fe 10	 cmp	 esi, 16			; 00000010H
  0006b	7c e3		 jl	 SHORT $LL4@MD5String

; 290  : 	result[32]=0;
; 291  : 	return result;
; 292  : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	8b c3		 mov	 eax, ebx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	c6 43 20 00	 mov	 BYTE PTR [ebx+32], 0
  00078	33 cd		 xor	 ecx, ebp
  0007a	5b		 pop	 ebx
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?MD5String@@YAPADPAEH@Z ENDP				; MD5String
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\other\WMIInfo.cpp
;	COMDAT ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z
_TEXT	SEGMENT
_context$ = 8						; size = 4
_input$ = 12						; size = 4
_inputLen$ = 16						; size = 4
?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z PROC			; MD5Update, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :   unsigned int i, index, partLen;
; 90   : 
; 91   :   /* Compute number of bytes mod 64 */
; 92   :   index = (unsigned int)((context->count[0] >> 3) & 0x3F);
; 93   : 
; 94   :   /* Update number of bits */
; 95   :   if ((context->count[0] += ((UINT4)inputLen << 3))
; 96   : 
; 97   :    < ((UINT4)inputLen << 3))

  00003	8b 55 10	 mov	 edx, DWORD PTR _inputLen$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _context$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000f	8b f0		 mov	 esi, eax
  00011	c1 ee 03	 shr	 esi, 3
  00014	83 e6 3f	 and	 esi, 63			; 0000003fH
  00017	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  0001a	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  00021	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  00024	3b c8		 cmp	 ecx, eax
  00026	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00029	73 01		 jae	 SHORT $LN5@MD5Update

; 98   :  context->count[1]++;

  0002b	41		 inc	 ecx
$LN5@MD5Update:

; 99   :   context->count[1] += ((UINT4)inputLen >> 29);

  0002c	8b c2		 mov	 eax, edx

; 100  : 
; 101  :   partLen = 64 - index;

  0002e	bf 40 00 00 00	 mov	 edi, 64			; 00000040H
  00033	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00036	2b fe		 sub	 edi, esi
  00038	03 c1		 add	 eax, ecx
  0003a	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 102  : 
; 103  :   /* Transform as many times as possible.*/
; 104  :   if (inputLen >= partLen) {

  0003d	3b d7		 cmp	 edx, edi
  0003f	72 49		 jb	 SHORT $LN6@MD5Update

; 105  :  MD5_memcpy

  00041	57		 push	 edi
  00042	ff 75 0c	 push	 DWORD PTR _input$[ebp]
  00045	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
  00048	03 c6		 add	 eax, esi
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?MD5_memcpy@@YAXPAE0I@Z	; MD5_memcpy

; 106  :    ((POINTER)&context->buffer[index], (POINTER)input, partLen);
; 107  :  MD5Transform (context->state, context->buffer);

  00050	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
  00053	50		 push	 eax
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 ?MD5Transform@@YAXQAKQAE@Z ; MD5Transform

; 108  : 
; 109  :  for (i = partLen; i + 63 < inputLen; i += 64)

  0005a	8b 55 10	 mov	 edx, DWORD PTR _inputLen$[ebp]
  0005d	8d 77 3f	 lea	 esi, DWORD PTR [edi+63]
  00060	83 c4 14	 add	 esp, 20			; 00000014H
  00063	3b f2		 cmp	 esi, edx
  00065	73 1f		 jae	 SHORT $LN3@MD5Update
$LL4@MD5Update:

; 110  :    MD5Transform (context->state, &input[i]);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _input$[ebp]
  0006a	83 c0 c1	 add	 eax, -63		; ffffffc1H
  0006d	03 c6		 add	 eax, esi
  0006f	50		 push	 eax
  00070	53		 push	 ebx
  00071	e8 00 00 00 00	 call	 ?MD5Transform@@YAXQAKQAE@Z ; MD5Transform
  00076	8b 55 10	 mov	 edx, DWORD PTR _inputLen$[ebp]
  00079	83 c6 40	 add	 esi, 64			; 00000040H
  0007c	83 c4 08	 add	 esp, 8
  0007f	83 c7 40	 add	 edi, 64			; 00000040H
  00082	3b f2		 cmp	 esi, edx
  00084	72 e1		 jb	 SHORT $LL4@MD5Update
$LN3@MD5Update:

; 111  : 
; 112  :  index = 0;

  00086	33 f6		 xor	 esi, esi

; 113  :   }

  00088	eb 02		 jmp	 SHORT $LN7@MD5Update
$LN6@MD5Update:

; 114  :   else
; 115  :  i = 0;

  0008a	33 ff		 xor	 edi, edi
$LN7@MD5Update:

; 116  : 
; 117  :   /* Buffer remaining input */
; 118  :   MD5_memcpy

  0008c	8b 45 0c	 mov	 eax, DWORD PTR _input$[ebp]
  0008f	2b d7		 sub	 edx, edi
  00091	03 c7		 add	 eax, edi
  00093	52		 push	 edx
  00094	50		 push	 eax
  00095	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
  00098	03 c6		 add	 eax, esi
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?MD5_memcpy@@YAXPAE0I@Z	; MD5_memcpy
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx

; 119  :  ((POINTER)&context->buffer[index], (POINTER)&input[i],
; 120  :   inputLen-i);
; 121  : }

  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ENDP			; MD5Update
_TEXT	ENDS
END
