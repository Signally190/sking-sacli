; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\wgs\descrypt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Keys@@3PAY01KA					; Keys
PUBLIC	?Psboxes@@3PAY0EA@KA				; Psboxes
PUBLIC	?Ip_l@@3PAKA					; Ip_l
PUBLIC	?Ip_r@@3PAKA					; Ip_r
PUBLIC	?Ip_inv_l@@3PAKA				; Ip_inv_l
PUBLIC	?Ip_inv_r@@3PAKA				; Ip_inv_r
_BSS	SEGMENT
?Keys@@3PAY01KA DD 020H DUP (?)				; Keys
_BSS	ENDS
_DATA	SEGMENT
?Psboxes@@3PAY0EA@KA DD 0808200H			; Psboxes
	DD	00H
	DD	08000H
	DD	0808202H
	DD	0808002H
	DD	08202H
	DD	02H
	DD	08000H
	DD	0200H
	DD	0808200H
	DD	0808202H
	DD	0200H
	DD	0800202H
	DD	0808002H
	DD	0800000H
	DD	02H
	DD	0202H
	DD	0800200H
	DD	0800200H
	DD	08200H
	DD	08200H
	DD	0808000H
	DD	0808000H
	DD	0800202H
	DD	08002H
	DD	0800002H
	DD	0800002H
	DD	08002H
	DD	00H
	DD	0202H
	DD	08202H
	DD	0800000H
	DD	08000H
	DD	0808202H
	DD	02H
	DD	0808000H
	DD	0808200H
	DD	0800000H
	DD	0800000H
	DD	0200H
	DD	0808002H
	DD	08000H
	DD	08200H
	DD	0800002H
	DD	0200H
	DD	02H
	DD	0800202H
	DD	08202H
	DD	0808202H
	DD	08002H
	DD	0808000H
	DD	0800202H
	DD	0800002H
	DD	0202H
	DD	08202H
	DD	0808200H
	DD	0202H
	DD	0800200H
	DD	0800200H
	DD	00H
	DD	08002H
	DD	08200H
	DD	00H
	DD	0808002H
	DD	040084010H
	DD	040004000H
	DD	04000H
	DD	084010H
	DD	080000H
	DD	010H
	DD	040080010H
	DD	040004010H
	DD	040000010H
	DD	040084010H
	DD	040084000H
	DD	040000000H
	DD	040004000H
	DD	080000H
	DD	010H
	DD	040080010H
	DD	084000H
	DD	080010H
	DD	040004010H
	DD	00H
	DD	040000000H
	DD	04000H
	DD	084010H
	DD	040080000H
	DD	080010H
	DD	040000010H
	DD	00H
	DD	084000H
	DD	04010H
	DD	040084000H
	DD	040080000H
	DD	04010H
	DD	00H
	DD	084010H
	DD	040080010H
	DD	080000H
	DD	040004010H
	DD	040080000H
	DD	040084000H
	DD	04000H
	DD	040080000H
	DD	040004000H
	DD	010H
	DD	040084010H
	DD	084010H
	DD	010H
	DD	04000H
	DD	040000000H
	DD	04010H
	DD	040084000H
	DD	080000H
	DD	040000010H
	DD	080010H
	DD	040004010H
	DD	040000010H
	DD	080010H
	DD	084000H
	DD	00H
	DD	040004000H
	DD	04010H
	DD	040000000H
	DD	040080010H
	DD	040084010H
	DD	084000H
	DD	0104H
	DD	04010100H
	DD	00H
	DD	04010004H
	DD	04000100H
	DD	00H
	DD	010104H
	DD	04000100H
	DD	010004H
	DD	04000004H
	DD	04000004H
	DD	010000H
	DD	04010104H
	DD	010004H
	DD	04010000H
	DD	0104H
	DD	04000000H
	DD	04H
	DD	04010100H
	DD	0100H
	DD	010100H
	DD	04010000H
	DD	04010004H
	DD	010104H
	DD	04000104H
	DD	010100H
	DD	010000H
	DD	04000104H
	DD	04H
	DD	04010104H
	DD	0100H
	DD	04000000H
	DD	04010100H
	DD	04000000H
	DD	010004H
	DD	0104H
	DD	010000H
	DD	04010100H
	DD	04000100H
	DD	00H
	DD	0100H
	DD	010004H
	DD	04010104H
	DD	04000100H
	DD	04000004H
	DD	0100H
	DD	00H
	DD	04010004H
	DD	04000104H
	DD	010000H
	DD	04000000H
	DD	04010104H
	DD	04H
	DD	010104H
	DD	010100H
	DD	04000004H
	DD	04010000H
	DD	04000104H
	DD	0104H
	DD	04010000H
	DD	010104H
	DD	04H
	DD	04010004H
	DD	010100H
	DD	080401000H
	DD	080001040H
	DD	080001040H
	DD	040H
	DD	0401040H
	DD	080400040H
	DD	080400000H
	DD	080001000H
	DD	00H
	DD	0401000H
	DD	0401000H
	DD	080401040H
	DD	080000040H
	DD	00H
	DD	0400040H
	DD	080400000H
	DD	080000000H
	DD	01000H
	DD	0400000H
	DD	080401000H
	DD	040H
	DD	0400000H
	DD	080001000H
	DD	01040H
	DD	080400040H
	DD	080000000H
	DD	01040H
	DD	0400040H
	DD	01000H
	DD	0401040H
	DD	080401040H
	DD	080000040H
	DD	0400040H
	DD	080400000H
	DD	0401000H
	DD	080401040H
	DD	080000040H
	DD	00H
	DD	00H
	DD	0401000H
	DD	01040H
	DD	0400040H
	DD	080400040H
	DD	080000000H
	DD	080401000H
	DD	080001040H
	DD	080001040H
	DD	040H
	DD	080401040H
	DD	080000040H
	DD	080000000H
	DD	01000H
	DD	080400000H
	DD	080001000H
	DD	0401040H
	DD	080400040H
	DD	080001000H
	DD	01040H
	DD	0400000H
	DD	080401000H
	DD	040H
	DD	0400000H
	DD	01000H
	DD	0401040H
	DD	080H
	DD	01040080H
	DD	01040000H
	DD	021000080H
	DD	040000H
	DD	080H
	DD	020000000H
	DD	01040000H
	DD	020040080H
	DD	040000H
	DD	01000080H
	DD	020040080H
	DD	021000080H
	DD	021040000H
	DD	040080H
	DD	020000000H
	DD	01000000H
	DD	020040000H
	DD	020040000H
	DD	00H
	DD	020000080H
	DD	021040080H
	DD	021040080H
	DD	01000080H
	DD	021040000H
	DD	020000080H
	DD	00H
	DD	021000000H
	DD	01040080H
	DD	01000000H
	DD	021000000H
	DD	040080H
	DD	040000H
	DD	021000080H
	DD	080H
	DD	01000000H
	DD	020000000H
	DD	01040000H
	DD	021000080H
	DD	020040080H
	DD	01000080H
	DD	020000000H
	DD	021040000H
	DD	01040080H
	DD	020040080H
	DD	080H
	DD	01000000H
	DD	021040000H
	DD	021040080H
	DD	040080H
	DD	021000000H
	DD	021040080H
	DD	01040000H
	DD	00H
	DD	020040000H
	DD	021000000H
	DD	040080H
	DD	01000080H
	DD	020000080H
	DD	040000H
	DD	00H
	DD	020040000H
	DD	01040080H
	DD	020000080H
	DD	010000008H
	DD	010200000H
	DD	02000H
	DD	010202008H
	DD	010200000H
	DD	08H
	DD	010202008H
	DD	0200000H
	DD	010002000H
	DD	0202008H
	DD	0200000H
	DD	010000008H
	DD	0200008H
	DD	010002000H
	DD	010000000H
	DD	02008H
	DD	00H
	DD	0200008H
	DD	010002008H
	DD	02000H
	DD	0202000H
	DD	010002008H
	DD	08H
	DD	010200008H
	DD	010200008H
	DD	00H
	DD	0202008H
	DD	010202000H
	DD	02008H
	DD	0202000H
	DD	010202000H
	DD	010000000H
	DD	010002000H
	DD	08H
	DD	010200008H
	DD	0202000H
	DD	010202008H
	DD	0200000H
	DD	02008H
	DD	010000008H
	DD	0200000H
	DD	010002000H
	DD	010000000H
	DD	02008H
	DD	010000008H
	DD	010202008H
	DD	0202000H
	DD	010200000H
	DD	0202008H
	DD	010202000H
	DD	00H
	DD	010200008H
	DD	08H
	DD	02000H
	DD	010200000H
	DD	0202008H
	DD	02000H
	DD	0200008H
	DD	010002008H
	DD	00H
	DD	010202000H
	DD	010000000H
	DD	0200008H
	DD	010002008H
	DD	0100000H
	DD	02100001H
	DD	02000401H
	DD	00H
	DD	0400H
	DD	02000401H
	DD	0100401H
	DD	02100400H
	DD	02100401H
	DD	0100000H
	DD	00H
	DD	02000001H
	DD	01H
	DD	02000000H
	DD	02100001H
	DD	0401H
	DD	02000400H
	DD	0100401H
	DD	0100001H
	DD	02000400H
	DD	02000001H
	DD	02100000H
	DD	02100400H
	DD	0100001H
	DD	02100000H
	DD	0400H
	DD	0401H
	DD	02100401H
	DD	0100400H
	DD	01H
	DD	02000000H
	DD	0100400H
	DD	02000000H
	DD	0100400H
	DD	0100000H
	DD	02000401H
	DD	02000401H
	DD	02100001H
	DD	02100001H
	DD	01H
	DD	0100001H
	DD	02000000H
	DD	02000400H
	DD	0100000H
	DD	02100400H
	DD	0401H
	DD	0100401H
	DD	02100400H
	DD	0401H
	DD	02000001H
	DD	02100401H
	DD	02100000H
	DD	0100400H
	DD	00H
	DD	01H
	DD	02100401H
	DD	00H
	DD	0100401H
	DD	02100000H
	DD	0400H
	DD	02000001H
	DD	02000400H
	DD	0400H
	DD	0100001H
	DD	08000820H
	DD	0800H
	DD	020000H
	DD	08020820H
	DD	08000000H
	DD	08000820H
	DD	020H
	DD	08000000H
	DD	020020H
	DD	08020000H
	DD	08020820H
	DD	020800H
	DD	08020800H
	DD	020820H
	DD	0800H
	DD	020H
	DD	08020000H
	DD	08000020H
	DD	08000800H
	DD	0820H
	DD	020800H
	DD	020020H
	DD	08020020H
	DD	08020800H
	DD	0820H
	DD	00H
	DD	00H
	DD	08020020H
	DD	08000020H
	DD	08000800H
	DD	020820H
	DD	020000H
	DD	020820H
	DD	020000H
	DD	08020800H
	DD	0800H
	DD	020H
	DD	08020020H
	DD	0800H
	DD	020820H
	DD	08000800H
	DD	020H
	DD	08000020H
	DD	08020000H
	DD	08020020H
	DD	08000000H
	DD	020000H
	DD	08000820H
	DD	00H
	DD	08020820H
	DD	020020H
	DD	08000020H
	DD	08020000H
	DD	08000800H
	DD	08000820H
	DD	00H
	DD	08020820H
	DD	020800H
	DD	020800H
	DD	0820H
	DD	0820H
	DD	020020H
	DD	08000000H
	DD	08020800H
?Ip_l@@3PAKA DD	00H					; Ip_l
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
?Ip_r@@3PAKA DD	00H					; Ip_r
	DD	00H
	DD	080H
	DD	080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
?Ip_inv_l@@3PAKA DD 00H					; Ip_inv_l
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
?Ip_inv_r@@3PAKA DD 00H					; Ip_inv_r
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
_DATA	ENDS
PUBLIC	?ecb_crypt@@YAHPAD0II@Z				; ecb_crypt
PUBLIC	?cbc_crypt@@YAHPAD0II0@Z			; cbc_crypt
PUBLIC	?des_setparity@@YAXPAD@Z			; des_setparity
PUBLIC	?des_setkey@@YAXPAD@Z				; des_setkey
PUBLIC	?des_crypt@@YAXPADH@Z				; des_crypt
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?pc2_d@?1??des_setkey@@YAXPAD@Z@4PAEA
_DATA	SEGMENT
?pc2_d@?1??des_setkey@@YAXPAD@Z@4PAEA DB 0fH		; `des_setkey'::`2'::pc2_d
	DB	04H
	DB	019H
	DB	013H
	DB	09H
	DB	01H
	DB	01aH
	DB	010H
	DB	05H
	DB	0bH
	DB	017H
	DB	08H
	DB	0cH
	DB	07H
	DB	011H
	DB	00H
	DB	016H
	DB	03H
	DB	0aH
	DB	0eH
	DB	06H
	DB	014H
	DB	01bH
	DB	018H
_DATA	ENDS
;	COMDAT ?pc2_c@?1??des_setkey@@YAXPAD@Z@4PAEA
_DATA	SEGMENT
?pc2_c@?1??des_setkey@@YAXPAD@Z@4PAEA DB 0eH		; `des_setkey'::`2'::pc2_c
	DB	0bH
	DB	011H
	DB	04H
	DB	01bH
	DB	017H
	DB	019H
	DB	00H
	DB	0dH
	DB	016H
	DB	07H
	DB	012H
	DB	05H
	DB	09H
	DB	010H
	DB	018H
	DB	02H
	DB	014H
	DB	0cH
	DB	015H
	DB	01H
	DB	08H
	DB	0fH
	DB	01aH
_DATA	ENDS
;	COMDAT ?pc1@?1??des_setkey@@YAXPAD@Z@4PAEA
_DATA	SEGMENT
?pc1@?1??des_setkey@@YAXPAD@Z@4PAEA DB 030H		; `des_setkey'::`2'::pc1
	DB	028H
	DB	020H
	DB	00H
	DB	04H
	DB	0cH
	DB	014H
	DB	031H
	DB	029H
	DB	021H
	DB	01H
	DB	05H
	DB	0dH
	DB	015H
	DB	032H
	DB	02aH
	DB	022H
	DB	02H
	DB	06H
	DB	0eH
	DB	016H
	DB	033H
	DB	02bH
	DB	023H
	DB	03H
	DB	07H
	DB	0fH
	DB	017H
	DB	034H
	DB	02cH
	DB	024H
	DB	01cH
	DB	08H
	DB	010H
	DB	018H
	DB	035H
	DB	02dH
	DB	025H
	DB	01dH
	DB	09H
	DB	011H
	DB	019H
	DB	036H
	DB	02eH
	DB	026H
	DB	01eH
	DB	0aH
	DB	012H
	DB	01aH
	DB	037H
	DB	02fH
	DB	027H
	DB	01fH
	DB	0bH
	DB	013H
	DB	01bH
_DATA	ENDS
;	COMDAT ?nshifts@?1??des_setkey@@YAXPAD@Z@4PADA
_DATA	SEGMENT
?nshifts@?1??des_setkey@@YAXPAD@Z@4PADA DB 01H		; `des_setkey'::`2'::nshifts
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
_DATA	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\wgs\descrypt.cpp
;	COMDAT ?des_crypt@@YAXPADH@Z
_TEXT	SEGMENT
_block$2$ = -24						; size = 4
tv1521 = -20						; size = 4
tv1513 = -20						; size = 4
tv1522 = -16						; size = 4
tv1515 = -16						; size = 4
tv1523 = -12						; size = 4
_l2$1$ = -12						; size = 4
tv1524 = -8						; size = 4
_l$1$ = -4						; size = 4
_block$ = 8						; size = 4
tv1514 = 12						; size = 4
_dflag$ = 12						; size = 4
?des_crypt@@YAXPADH@Z PROC				; des_crypt, COMDAT

; 1436 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1437 : 	ulong l, r, l2, r2;
; 1438 : 	uchar *s;
; 1439 : 	int i;
; 1440 : 
; 1441 : 	/* Initial Transpose */
; 1442 : 	s = (uchar *)block;
; 1443 : 	l = (((((((Ip_l[s[0]] >> 1

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0000f	c1 e0 02	 shl	 eax, 2
  00012	89 45 f8	 mov	 DWORD PTR tv1524[ebp], eax
  00015	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00018	89 45 e8	 mov	 DWORD PTR _block$2$[ebp], eax
  0001b	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0001e	c1 e0 02	 shl	 eax, 2
  00021	89 45 f4	 mov	 DWORD PTR tv1523[ebp], eax
  00024	0f b6 41 02	 movzx	 eax, BYTE PTR [ecx+2]
  00028	c1 e0 02	 shl	 eax, 2
  0002b	89 45 f0	 mov	 DWORD PTR tv1522[ebp], eax
  0002e	8b 45 f8	 mov	 eax, DWORD PTR tv1524[ebp]
  00031	0f b6 59 03	 movzx	 ebx, BYTE PTR [ecx+3]
  00035	0f b6 79 04	 movzx	 edi, BYTE PTR [ecx+4]
  00039	0f b6 71 05	 movzx	 esi, BYTE PTR [ecx+5]
  0003d	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR ?Ip_l@@3PAKA[eax]
  00043	d1 e8		 shr	 eax, 1
  00045	89 45 fc	 mov	 DWORD PTR _l$1$[ebp], eax
  00048	8b 45 f4	 mov	 eax, DWORD PTR tv1523[ebp]
  0004b	c1 e3 02	 shl	 ebx, 2
  0004e	0f b6 51 06	 movzx	 edx, BYTE PTR [ecx+6]
  00052	89 5d ec	 mov	 DWORD PTR tv1521[ebp], ebx
  00055	8b 5d fc	 mov	 ebx, DWORD PTR _l$1$[ebp]
  00058	0b 98 00 00 00
	00		 or	 ebx, DWORD PTR ?Ip_l@@3PAKA[eax]
  0005e	8b 45 f0	 mov	 eax, DWORD PTR tv1522[ebp]
  00061	0f b6 49 07	 movzx	 ecx, BYTE PTR [ecx+7]
  00065	89 5d fc	 mov	 DWORD PTR _l$1$[ebp], ebx
  00068	d1 6d fc	 shr	 DWORD PTR _l$1$[ebp], 1
  0006b	8b 5d fc	 mov	 ebx, DWORD PTR _l$1$[ebp]
  0006e	0b 98 00 00 00
	00		 or	 ebx, DWORD PTR ?Ip_l@@3PAKA[eax]
  00074	89 5d fc	 mov	 DWORD PTR _l$1$[ebp], ebx
  00077	8b c3		 mov	 eax, ebx
  00079	8b 5d ec	 mov	 ebx, DWORD PTR tv1521[ebp]
  0007c	d1 e8		 shr	 eax, 1
  0007e	0b 83 00 00 00
	00		 or	 eax, DWORD PTR ?Ip_l@@3PAKA[ebx]
  00084	d1 e8		 shr	 eax, 1
  00086	0b 04 bd 00 00
	00 00		 or	 eax, DWORD PTR ?Ip_l@@3PAKA[edi*4]
  0008d	d1 e8		 shr	 eax, 1
  0008f	0b 04 b5 00 00
	00 00		 or	 eax, DWORD PTR ?Ip_l@@3PAKA[esi*4]

; 1444 : 		  | Ip_l[s[1]]) >> 1
; 1445 : 		 | Ip_l[s[2]]) >> 1
; 1446 : 		| Ip_l[s[3]]) >> 1
; 1447 : 	       | Ip_l[s[4]]) >> 1
; 1448 : 	      | Ip_l[s[5]]) >> 1
; 1449 : 	     | Ip_l[s[6]]) >> 1
; 1450 : 	     | Ip_l[s[7]]);
; 1451 : 	r = (((((((Ip_r[s[0]] >> 1

  00096	8b 5d f4	 mov	 ebx, DWORD PTR tv1523[ebp]
  00099	d1 e8		 shr	 eax, 1
  0009b	0b 04 95 00 00
	00 00		 or	 eax, DWORD PTR ?Ip_l@@3PAKA[edx*4]
  000a2	d1 e8		 shr	 eax, 1
  000a4	0b 04 8d 00 00
	00 00		 or	 eax, DWORD PTR ?Ip_l@@3PAKA[ecx*4]
  000ab	89 45 fc	 mov	 DWORD PTR _l$1$[ebp], eax
  000ae	8b 45 f8	 mov	 eax, DWORD PTR tv1524[ebp]
  000b1	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR ?Ip_r@@3PAKA[eax]
  000b7	d1 e8		 shr	 eax, 1
  000b9	0b 83 00 00 00
	00		 or	 eax, DWORD PTR ?Ip_r@@3PAKA[ebx]
  000bf	8b 5d f0	 mov	 ebx, DWORD PTR tv1522[ebp]
  000c2	d1 e8		 shr	 eax, 1
  000c4	0b 83 00 00 00
	00		 or	 eax, DWORD PTR ?Ip_r@@3PAKA[ebx]
  000ca	8b 5d ec	 mov	 ebx, DWORD PTR tv1521[ebp]
  000cd	d1 e8		 shr	 eax, 1
  000cf	0b 83 00 00 00
	00		 or	 eax, DWORD PTR ?Ip_r@@3PAKA[ebx]
  000d5	d1 e8		 shr	 eax, 1
  000d7	0b 04 bd 00 00
	00 00		 or	 eax, DWORD PTR ?Ip_r@@3PAKA[edi*4]
  000de	d1 e8		 shr	 eax, 1
  000e0	0b 04 b5 00 00
	00 00		 or	 eax, DWORD PTR ?Ip_r@@3PAKA[esi*4]
  000e7	d1 e8		 shr	 eax, 1
  000e9	0b 04 95 00 00
	00 00		 or	 eax, DWORD PTR ?Ip_r@@3PAKA[edx*4]
  000f0	d1 e8		 shr	 eax, 1
  000f2	0b 04 8d 00 00
	00 00		 or	 eax, DWORD PTR ?Ip_r@@3PAKA[ecx*4]

; 1452 : 		  | Ip_r[s[1]]) >> 1
; 1453 : 		 | Ip_r[s[2]]) >> 1
; 1454 : 		| Ip_r[s[3]]) >> 1
; 1455 : 	       | Ip_r[s[4]]) >> 1
; 1456 : 	      | Ip_r[s[5]]) >> 1
; 1457 : 	     | Ip_r[s[6]]) >> 1
; 1458 : 	     | Ip_r[s[7]]);
; 1459 : 
; 1460 : 	if (dflag == 0) {

  000f9	83 7d 0c 00	 cmp	 DWORD PTR _dflag$[ebp], 0
  000fd	0f 85 9f 00 00
	00		 jne	 $LN8@des_crypt

; 1461 : 		for (i = 0; i < 16; i++) {

  00103	bb 04 00 00 00	 mov	 ebx, OFFSET ?Keys@@3PAY01KA+4
$LL4@des_crypt:

; 1462 : 			ulong v, x1, x2;
; 1463 : 
; 1464 : 			/* E-transpose, Xor, S-box and P-transpose */
; 1465 : 			x1 = rol1(r);

  00108	8b f8		 mov	 edi, eax
  0010a	d1 c7		 rol	 edi, 1

; 1466 : 			x2 = ror4(x1) ^ Keys[i][0];

  0010c	8b f7		 mov	 esi, edi

; 1467 : 			x1 ^= Keys[i][1];

  0010e	33 3b		 xor	 edi, DWORD PTR [ebx]
  00110	c1 ce 04	 ror	 esi, 4
  00113	33 73 fc	 xor	 esi, DWORD PTR [ebx-4]
  00116	83 c3 08	 add	 ebx, 8

; 1468 : 			v = l	^ ps(7, x1 & 0x3f)

  00119	8b d6		 mov	 edx, esi
  0011b	8b ce		 mov	 ecx, esi
  0011d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00120	c1 ea 18	 shr	 edx, 24			; 00000018H
  00123	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00126	83 e2 3f	 and	 edx, 63			; 0000003fH
  00129	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx*4]
  00130	33 14 8d 00 02
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+512]
  00137	8b cf		 mov	 ecx, edi
  00139	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0013c	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0013f	33 14 8d 00 01
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+256]
  00146	8b ce		 mov	 ecx, esi
  00148	c1 e9 08	 shr	 ecx, 8
  0014b	83 e6 3f	 and	 esi, 63			; 0000003fH
  0014e	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00151	33 14 8d 00 04
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+1024]
  00158	8b cf		 mov	 ecx, edi
  0015a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0015d	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00160	33 14 8d 00 03
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+768]
  00167	8b cf		 mov	 ecx, edi
  00169	c1 e9 08	 shr	 ecx, 8
  0016c	83 e7 3f	 and	 edi, 63			; 0000003fH
  0016f	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00172	33 14 8d 00 05
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+1280]

; 1469 : 				^ ps(5, (x1 >> 8) & 0x3f)
; 1470 : 				^ ps(3, (x1 >> 16) & 0x3f)
; 1471 : 				^ ps(1, (x1 >> 24) & 0x3f)
; 1472 : 				^ ps(6, x2 & 0x3f)
; 1473 : 				^ ps(4, (x2 >> 8) & 0x3f)
; 1474 : 				^ ps(2, (x2 >> 16) & 0x3f)
; 1475 : 				^ ps(0, (x2 >> 24) & 0x3f);
; 1476 : 			l = r;

  00179	8b c8		 mov	 ecx, eax
  0017b	33 14 b5 00 06
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[esi*4+1536]
  00182	33 14 bd 00 07
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[edi*4+1792]
  00189	33 55 fc	 xor	 edx, DWORD PTR _l$1$[ebp]
  0018c	89 4d fc	 mov	 DWORD PTR _l$1$[ebp], ecx

; 1477 : 			r = v;

  0018f	8b c2		 mov	 eax, edx
  00191	81 fb 84 00 00
	00		 cmp	 ebx, OFFSET ?Keys@@3PAY01KA+132
  00197	0f 8c 6b ff ff
	ff		 jl	 $LL4@des_crypt

; 1478 : 		}
; 1479 : 	} else {

  0019d	e9 9a 00 00 00	 jmp	 $LN6@des_crypt
$LN8@des_crypt:

; 1480 : 		for (i = 16; --i >= 0; ) {

  001a2	bb 7c 00 00 00	 mov	 ebx, OFFSET ?Keys@@3PAY01KA+124
$LL5@des_crypt:

; 1481 : 			ulong v, x1, x2;
; 1482 : 
; 1483 : 			/* E-transpose, Xor, S-box and P-transpose */
; 1484 : 			x1 = rol1(r);

  001a7	8b f8		 mov	 edi, eax
  001a9	d1 c7		 rol	 edi, 1

; 1485 : 			x2 = ror4(x1) ^ Keys[i][0];

  001ab	8b f7		 mov	 esi, edi

; 1486 : 			x1 ^= Keys[i][1];

  001ad	33 3b		 xor	 edi, DWORD PTR [ebx]
  001af	c1 ce 04	 ror	 esi, 4
  001b2	33 73 fc	 xor	 esi, DWORD PTR [ebx-4]
  001b5	83 eb 08	 sub	 ebx, 8

; 1487 : 			v = l	^ ps(7, x1 & 0x3f)

  001b8	8b d6		 mov	 edx, esi
  001ba	8b ce		 mov	 ecx, esi
  001bc	c1 e9 10	 shr	 ecx, 16			; 00000010H
  001bf	c1 ea 18	 shr	 edx, 24			; 00000018H
  001c2	83 e1 3f	 and	 ecx, 63			; 0000003fH
  001c5	83 e2 3f	 and	 edx, 63			; 0000003fH
  001c8	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx*4]
  001cf	33 14 8d 00 02
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+512]
  001d6	8b cf		 mov	 ecx, edi
  001d8	c1 e9 18	 shr	 ecx, 24			; 00000018H
  001db	83 e1 3f	 and	 ecx, 63			; 0000003fH
  001de	33 14 8d 00 01
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+256]
  001e5	8b ce		 mov	 ecx, esi
  001e7	c1 e9 08	 shr	 ecx, 8
  001ea	83 e6 3f	 and	 esi, 63			; 0000003fH
  001ed	83 e1 3f	 and	 ecx, 63			; 0000003fH
  001f0	33 14 8d 00 04
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+1024]
  001f7	8b cf		 mov	 ecx, edi
  001f9	c1 e9 10	 shr	 ecx, 16			; 00000010H
  001fc	83 e1 3f	 and	 ecx, 63			; 0000003fH
  001ff	33 14 8d 00 03
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+768]
  00206	8b cf		 mov	 ecx, edi
  00208	c1 e9 08	 shr	 ecx, 8
  0020b	83 e7 3f	 and	 edi, 63			; 0000003fH
  0020e	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00211	33 14 8d 00 05
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx*4+1280]

; 1488 : 				^ ps(5, (x1 >> 8) & 0x3f)
; 1489 : 				^ ps(3, (x1 >> 16) & 0x3f)
; 1490 : 				^ ps(1, (x1 >> 24) & 0x3f)
; 1491 : 				^ ps(6, x2 & 0x3f)
; 1492 : 				^ ps(4, (x2 >> 8) & 0x3f)
; 1493 : 				^ ps(2, (x2 >> 16) & 0x3f)
; 1494 : 				^ ps(0, (x2 >> 24) & 0x3f);
; 1495 : 			l = r;

  00218	8b c8		 mov	 ecx, eax
  0021a	33 14 b5 00 06
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[esi*4+1536]
  00221	33 14 bd 00 07
	00 00		 xor	 edx, DWORD PTR ?Psboxes@@3PAY0EA@KA[edi*4+1792]
  00228	33 55 fc	 xor	 edx, DWORD PTR _l$1$[ebp]
  0022b	89 4d fc	 mov	 DWORD PTR _l$1$[ebp], ecx

; 1496 : 			r = v;

  0022e	8b c2		 mov	 eax, edx
  00230	81 fb 04 00 00
	00		 cmp	 ebx, OFFSET ?Keys@@3PAY01KA+4
  00236	0f 8d 6b ff ff
	ff		 jge	 $LL5@des_crypt
$LN6@des_crypt:

; 1497 : 		}
; 1498 : 	}
; 1499 : 	/* Final transpose */
; 1500 : 	l2 = (((((((Ip_inv_l[r & 0xff] >> 1

  0023c	0f b6 c9	 movzx	 ecx, cl
  0023f	c1 e1 02	 shl	 ecx, 2
  00242	89 4d 0c	 mov	 DWORD PTR tv1514[ebp], ecx
  00245	8b c8		 mov	 ecx, eax
  00247	c1 e9 08	 shr	 ecx, 8
  0024a	0f b6 f9	 movzx	 edi, cl
  0024d	c1 e7 02	 shl	 edi, 2
  00250	89 7d ec	 mov	 DWORD PTR tv1513[ebp], edi
  00253	8b 7d fc	 mov	 edi, DWORD PTR _l$1$[ebp]
  00256	8b cf		 mov	 ecx, edi
  00258	c1 e9 08	 shr	 ecx, 8
  0025b	0f b6 f1	 movzx	 esi, cl
  0025e	8b c8		 mov	 ecx, eax
  00260	0f b6 d8	 movzx	 ebx, al
  00263	c1 e3 02	 shl	 ebx, 2
  00266	89 5d f0	 mov	 DWORD PTR tv1515[ebp], ebx
  00269	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0026c	0f b6 d1	 movzx	 edx, cl
  0026f	8b cf		 mov	 ecx, edi
  00271	8b 9b 00 00 00
	00		 mov	 ebx, DWORD PTR ?Ip_inv_l@@3PAKA[ebx]
  00277	d1 eb		 shr	 ebx, 1
  00279	c1 ef 18	 shr	 edi, 24			; 00000018H
  0027c	c1 e7 02	 shl	 edi, 2
  0027f	89 7d fc	 mov	 DWORD PTR _l$1$[ebp], edi
  00282	8b 7d 0c	 mov	 edi, DWORD PTR tv1514[ebp]
  00285	c1 e8 18	 shr	 eax, 24			; 00000018H
  00288	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0028b	0f b6 c9	 movzx	 ecx, cl
  0028e	0b 9f 00 00 00
	00		 or	 ebx, DWORD PTR ?Ip_inv_l@@3PAKA[edi]
  00294	8b 7d ec	 mov	 edi, DWORD PTR tv1513[ebp]
  00297	d1 eb		 shr	 ebx, 1
  00299	0b 9f 00 00 00
	00		 or	 ebx, DWORD PTR ?Ip_inv_l@@3PAKA[edi]
  0029f	d1 eb		 shr	 ebx, 1
  002a1	0b 1c b5 00 00
	00 00		 or	 ebx, DWORD PTR ?Ip_inv_l@@3PAKA[esi*4]
  002a8	8b 7d fc	 mov	 edi, DWORD PTR _l$1$[ebp]
  002ab	d1 eb		 shr	 ebx, 1
  002ad	0b 1c 95 00 00
	00 00		 or	 ebx, DWORD PTR ?Ip_inv_l@@3PAKA[edx*4]
  002b4	d1 eb		 shr	 ebx, 1
  002b6	0b 1c 8d 00 00
	00 00		 or	 ebx, DWORD PTR ?Ip_inv_l@@3PAKA[ecx*4]
  002bd	d1 eb		 shr	 ebx, 1
  002bf	0b 1c 85 00 00
	00 00		 or	 ebx, DWORD PTR ?Ip_inv_l@@3PAKA[eax*4]
  002c6	d1 eb		 shr	 ebx, 1
  002c8	0b 9f 00 00 00
	00		 or	 ebx, DWORD PTR ?Ip_inv_l@@3PAKA[edi]

; 1501 : 		   | Ip_inv_l[l & 0xff]) >> 1
; 1502 : 		  | Ip_inv_l[r>>8 & 0xff]) >> 1
; 1503 : 		 | Ip_inv_l[l>>8 & 0xff]) >> 1
; 1504 : 		| Ip_inv_l[r>>16 & 0xff]) >> 1
; 1505 : 	       | Ip_inv_l[l>>16 & 0xff]) >> 1
; 1506 : 	      | Ip_inv_l[r>>24 & 0xff]) >> 1
; 1507 : 	     | Ip_inv_l[l>>24 & 0xff]);
; 1508 : 	r2 = (((((((Ip_inv_r[r & 0xff] >> 1

  002ce	8b 7d 0c	 mov	 edi, DWORD PTR tv1514[ebp]
  002d1	89 5d f4	 mov	 DWORD PTR _l2$1$[ebp], ebx
  002d4	8b 5d f0	 mov	 ebx, DWORD PTR tv1515[ebp]
  002d7	8b 9b 00 00 00
	00		 mov	 ebx, DWORD PTR ?Ip_inv_r@@3PAKA[ebx]
  002dd	d1 eb		 shr	 ebx, 1
  002df	0b 9f 00 00 00
	00		 or	 ebx, DWORD PTR ?Ip_inv_r@@3PAKA[edi]
  002e5	8b 7d ec	 mov	 edi, DWORD PTR tv1513[ebp]
  002e8	d1 eb		 shr	 ebx, 1
  002ea	0b 9f 00 00 00
	00		 or	 ebx, DWORD PTR ?Ip_inv_r@@3PAKA[edi]
  002f0	d1 eb		 shr	 ebx, 1
  002f2	0b 1c b5 00 00
	00 00		 or	 ebx, DWORD PTR ?Ip_inv_r@@3PAKA[esi*4]
  002f9	d1 eb		 shr	 ebx, 1
  002fb	0b 1c 95 00 00
	00 00		 or	 ebx, DWORD PTR ?Ip_inv_r@@3PAKA[edx*4]

; 1509 : 		   | Ip_inv_r[l & 0xff]) >> 1
; 1510 : 		  | Ip_inv_r[r>>8 & 0xff]) >> 1
; 1511 : 		 | Ip_inv_r[l>>8 & 0xff]) >> 1
; 1512 : 		| Ip_inv_r[r>>16 & 0xff]) >> 1
; 1513 : 	       | Ip_inv_r[l>>16 & 0xff]) >> 1
; 1514 : 	      | Ip_inv_r[r>>24 & 0xff]) >> 1
; 1515 : 	     | Ip_inv_r[l>>24 & 0xff]);
; 1516 : 	*block++ = (char)(l2 >> 24);

  00302	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00305	d1 eb		 shr	 ebx, 1
  00307	0b 1c 8d 00 00
	00 00		 or	 ebx, DWORD PTR ?Ip_inv_r@@3PAKA[ecx*4]
  0030e	8b 4d f4	 mov	 ecx, DWORD PTR _l2$1$[ebp]
  00311	d1 eb		 shr	 ebx, 1
  00313	0b 1c 85 00 00
	00 00		 or	 ebx, DWORD PTR ?Ip_inv_r@@3PAKA[eax*4]
  0031a	8b 45 fc	 mov	 eax, DWORD PTR _l$1$[ebp]
  0031d	d1 eb		 shr	 ebx, 1
  0031f	0b 98 00 00 00
	00		 or	 ebx, DWORD PTR ?Ip_inv_r@@3PAKA[eax]
  00325	8b c1		 mov	 eax, ecx
  00327	c1 e8 18	 shr	 eax, 24			; 00000018H
  0032a	88 02		 mov	 BYTE PTR [edx], al

; 1517 : 	*block++ = (char)(l2 >> 16);

  0032c	8b c1		 mov	 eax, ecx
  0032e	8b 55 e8	 mov	 edx, DWORD PTR _block$2$[ebp]
  00331	c1 e8 10	 shr	 eax, 16			; 00000010H
  00334	88 02		 mov	 BYTE PTR [edx], al

; 1518 : 	*block++ = (char)(l2 >> 8);

  00336	8b c1		 mov	 eax, ecx
  00338	c1 e8 08	 shr	 eax, 8
  0033b	88 42 01	 mov	 BYTE PTR [edx+1], al

; 1519 : 	*block++ = (char)l2;
; 1520 : 	*block++ = (char)(r2 >> 24);

  0033e	8b c3		 mov	 eax, ebx
  00340	c1 e8 18	 shr	 eax, 24			; 00000018H
  00343	88 42 03	 mov	 BYTE PTR [edx+3], al

; 1521 : 	*block++ = (char)(r2 >> 16);

  00346	8b c3		 mov	 eax, ebx
  00348	88 4a 02	 mov	 BYTE PTR [edx+2], cl
  0034b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0034e	88 42 04	 mov	 BYTE PTR [edx+4], al

; 1522 : 	*block++ = (char)(r2 >> 8);

  00351	8b c3		 mov	 eax, ebx

; 1523 : 	*block++ = (char)r2;

  00353	5f		 pop	 edi
  00354	c1 e8 08	 shr	 eax, 8
  00357	5e		 pop	 esi
  00358	88 5a 06	 mov	 BYTE PTR [edx+6], bl
  0035b	88 42 05	 mov	 BYTE PTR [edx+5], al
  0035e	5b		 pop	 ebx

; 1524 : }

  0035f	8b e5		 mov	 esp, ebp
  00361	5d		 pop	 ebp
  00362	c3		 ret	 0
?des_crypt@@YAXPADH@Z ENDP				; des_crypt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\wgs\descrypt.cpp
;	COMDAT ?des_setkey@@YAXPAD@Z
_TEXT	SEGMENT
_d$1$ = -28						; size = 4
_c$1$ = -24						; size = 4
_i$1$ = -20						; size = 4
tv889 = -16						; size = 4
tv888 = -16						; size = 4
tv887 = -16						; size = 4
_w$1 = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
?des_setkey@@YAXPAD@Z PROC				; des_setkey, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 40   : 	static char nshifts[]
; 41   : 		= { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };
; 42   : #define	C	28
; 43   : #define	D	0
; 44   : 	static uchar pc1[] = {
; 45   : 		C + 20, C + 12, C + 4, D + 0, D + 4, D + 12, D + 20,
; 46   : 		C + 21, C + 13, C + 5, D + 1, D + 5, D + 13, D + 21,
; 47   : 		C + 22, C + 14, C + 6, D + 2, D + 6, D + 14, D + 22,
; 48   : 		C + 23, C + 15, C + 7, D + 3, D + 7, D + 15, D + 23,
; 49   : 		C + 24, C + 16, C + 8, C + 0, D + 8, D + 16, D + 24,
; 50   : 		C + 25, C + 17, C + 9, C + 1, D + 9, D + 17, D + 25,
; 51   : 		C + 26, C + 18, C +10, C + 2, D +10, D + 18, D + 26,
; 52   : 		C + 27, C + 19, C +11, C + 3, D +11, D + 19, D + 27
; 53   : 	};
; 54   : 	static uchar pc2_c[] = {
; 55   : 		14, 11, 17,  4, 27, 23,
; 56   : 		25,  0, 13, 22,  7, 18,
; 57   : 		 5,  9, 16, 24,  2, 20,
; 58   : 		12, 21,  1,  8, 15, 26
; 59   : 	};
; 60   : 	static uchar pc2_d[] = {
; 61   : 		15,  4, 25, 19,  9,  1,
; 62   : 		26, 16,  5, 11, 23,  8,
; 63   : 		12,  7, 17,  0, 22,  3,
; 64   : 		10, 14,  6, 20, 27, 24,
; 65   : 	};
; 66   : 	ulong c, d;
; 67   : 	uchar b, *p;
; 68   : 	int i, j;
; 69   : 
; 70   : 	/* PC-1 (Permuted Choice 1) */
; 71   : 	c = d = 0;

  00013	33 ff		 xor	 edi, edi
  00015	c7 45 f0 08 00
	00 00		 mov	 DWORD PTR tv888[ebp], 8
  0001c	33 db		 xor	 ebx, ebx

; 72   : 	p = pc1;

  0001e	ba 00 00 00 00	 mov	 edx, OFFSET ?pc1@?1??des_setkey@@YAXPAD@Z@4PAEA
$LL4@des_setkey:

; 73   : 	for (i = 0; i < 8; i++) {
; 74   : 		b = *key++;

  00023	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00026	8a 08		 mov	 cl, BYTE PTR [eax]
  00028	40		 inc	 eax
  00029	89 45 08	 mov	 DWORD PTR _key$[ebp], eax

; 75   : 		for (j = 0; j < 7; j++) {
; 76   : 			if (b & 0x80) {

  0002c	84 c9		 test	 cl, cl
  0002e	79 13		 jns	 SHORT $LN25@des_setkey

; 77   : 				if (*p >= C)

  00030	80 3a 1c	 cmp	 BYTE PTR [edx], 28	; 0000001cH
  00033	0f b6 32	 movzx	 esi, BYTE PTR [edx]
  00036	72 08		 jb	 SHORT $LN24@des_setkey

; 78   : 					c |= 1L << (*p - C);

  00038	8d 46 e4	 lea	 eax, DWORD PTR [esi-28]
  0003b	0f ab c3	 bts	 ebx, eax
  0003e	eb 03		 jmp	 SHORT $LN25@des_setkey
$LN24@des_setkey:

; 79   : 				else
; 80   : 					d |= 1L << *p;

  00040	0f ab f7	 bts	 edi, esi
$LN25@des_setkey:

; 81   : 			}
; 82   : 			p++;
; 83   : 			b <<= 1;

  00043	02 c9		 add	 cl, cl
  00045	79 15		 jns	 SHORT $LN56@des_setkey

; 77   : 				if (*p >= C)

  00047	80 7a 01 1c	 cmp	 BYTE PTR [edx+1], 28	; 0000001cH
  0004b	0f b6 72 01	 movzx	 esi, BYTE PTR [edx+1]
  0004f	72 08		 jb	 SHORT $LN55@des_setkey

; 78   : 					c |= 1L << (*p - C);

  00051	8d 46 e4	 lea	 eax, DWORD PTR [esi-28]
  00054	0f ab c3	 bts	 ebx, eax
  00057	eb 03		 jmp	 SHORT $LN56@des_setkey
$LN55@des_setkey:

; 79   : 				else
; 80   : 					d |= 1L << *p;

  00059	0f ab f7	 bts	 edi, esi
$LN56@des_setkey:

; 81   : 			}
; 82   : 			p++;
; 83   : 			b <<= 1;

  0005c	02 c9		 add	 cl, cl
  0005e	79 15		 jns	 SHORT $LN59@des_setkey

; 77   : 				if (*p >= C)

  00060	80 7a 02 1c	 cmp	 BYTE PTR [edx+2], 28	; 0000001cH
  00064	0f b6 72 02	 movzx	 esi, BYTE PTR [edx+2]
  00068	72 08		 jb	 SHORT $LN58@des_setkey

; 78   : 					c |= 1L << (*p - C);

  0006a	8d 46 e4	 lea	 eax, DWORD PTR [esi-28]
  0006d	0f ab c3	 bts	 ebx, eax
  00070	eb 03		 jmp	 SHORT $LN59@des_setkey
$LN58@des_setkey:

; 79   : 				else
; 80   : 					d |= 1L << *p;

  00072	0f ab f7	 bts	 edi, esi
$LN59@des_setkey:

; 81   : 			}
; 82   : 			p++;
; 83   : 			b <<= 1;

  00075	02 c9		 add	 cl, cl
  00077	79 15		 jns	 SHORT $LN62@des_setkey

; 77   : 				if (*p >= C)

  00079	80 7a 03 1c	 cmp	 BYTE PTR [edx+3], 28	; 0000001cH
  0007d	0f b6 72 03	 movzx	 esi, BYTE PTR [edx+3]
  00081	72 08		 jb	 SHORT $LN61@des_setkey

; 78   : 					c |= 1L << (*p - C);

  00083	8d 46 e4	 lea	 eax, DWORD PTR [esi-28]
  00086	0f ab c3	 bts	 ebx, eax
  00089	eb 03		 jmp	 SHORT $LN62@des_setkey
$LN61@des_setkey:

; 79   : 				else
; 80   : 					d |= 1L << *p;

  0008b	0f ab f7	 bts	 edi, esi
$LN62@des_setkey:

; 81   : 			}
; 82   : 			p++;
; 83   : 			b <<= 1;

  0008e	02 c9		 add	 cl, cl
  00090	79 15		 jns	 SHORT $LN65@des_setkey

; 77   : 				if (*p >= C)

  00092	80 7a 04 1c	 cmp	 BYTE PTR [edx+4], 28	; 0000001cH
  00096	0f b6 72 04	 movzx	 esi, BYTE PTR [edx+4]
  0009a	72 08		 jb	 SHORT $LN64@des_setkey

; 78   : 					c |= 1L << (*p - C);

  0009c	8d 46 e4	 lea	 eax, DWORD PTR [esi-28]
  0009f	0f ab c3	 bts	 ebx, eax
  000a2	eb 03		 jmp	 SHORT $LN65@des_setkey
$LN64@des_setkey:

; 79   : 				else
; 80   : 					d |= 1L << *p;

  000a4	0f ab f7	 bts	 edi, esi
$LN65@des_setkey:

; 81   : 			}
; 82   : 			p++;
; 83   : 			b <<= 1;

  000a7	02 c9		 add	 cl, cl
  000a9	79 15		 jns	 SHORT $LN68@des_setkey

; 77   : 				if (*p >= C)

  000ab	80 7a 05 1c	 cmp	 BYTE PTR [edx+5], 28	; 0000001cH
  000af	0f b6 72 05	 movzx	 esi, BYTE PTR [edx+5]
  000b3	72 08		 jb	 SHORT $LN67@des_setkey

; 78   : 					c |= 1L << (*p - C);

  000b5	8d 46 e4	 lea	 eax, DWORD PTR [esi-28]
  000b8	0f ab c3	 bts	 ebx, eax
  000bb	eb 03		 jmp	 SHORT $LN68@des_setkey
$LN67@des_setkey:

; 79   : 				else
; 80   : 					d |= 1L << *p;

  000bd	0f ab f7	 bts	 edi, esi
$LN68@des_setkey:

; 81   : 			}
; 82   : 			p++;
; 83   : 			b <<= 1;

  000c0	02 c9		 add	 cl, cl
  000c2	79 15		 jns	 SHORT $LN71@des_setkey

; 77   : 				if (*p >= C)

  000c4	80 7a 06 1c	 cmp	 BYTE PTR [edx+6], 28	; 0000001cH
  000c8	0f b6 4a 06	 movzx	 ecx, BYTE PTR [edx+6]
  000cc	72 08		 jb	 SHORT $LN70@des_setkey

; 78   : 					c |= 1L << (*p - C);

  000ce	8d 41 e4	 lea	 eax, DWORD PTR [ecx-28]
  000d1	0f ab c3	 bts	 ebx, eax
  000d4	eb 03		 jmp	 SHORT $LN71@des_setkey
$LN70@des_setkey:

; 79   : 				else
; 80   : 					d |= 1L << *p;

  000d6	0f ab cf	 bts	 edi, ecx
$LN71@des_setkey:

; 81   : 			}
; 82   : 			p++;
; 83   : 			b <<= 1;

  000d9	83 c2 07	 add	 edx, 7
  000dc	83 6d f0 01	 sub	 DWORD PTR tv888[ebp], 1
  000e0	0f 85 3d ff ff
	ff		 jne	 $LL4@des_setkey

; 84   : 		}
; 85   : 	}
; 86   : 
; 87   : 	for (i = 0; i < 16; i++) {

  000e6	33 d2		 xor	 edx, edx
  000e8	89 55 ec	 mov	 DWORD PTR _i$1$[ebp], edx
  000eb	0f 1f 44 00 00	 npad	 5
$LL10@des_setkey:

; 88   : 		uchar *k, mask, w[8];
; 89   : 		uint n = nshifts[i];

  000f0	0f be b2 00 00
	00 00		 movsx	 esi, BYTE PTR ?nshifts@?1??des_setkey@@YAXPAD@Z@4PADA[edx]

; 90   : 		
; 91   : 		c = (c << n | c >> (28 - n)) & 0x0fffffff;

  000f7	8b c3		 mov	 eax, ebx
  000f9	ba 1c 00 00 00	 mov	 edx, 28			; 0000001cH
  000fe	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR tv889[ebp], 4
  00105	2b d6		 sub	 edx, esi
  00107	8b ca		 mov	 ecx, edx
  00109	d3 e8		 shr	 eax, cl
  0010b	8b ce		 mov	 ecx, esi
  0010d	d3 e3		 shl	 ebx, cl

; 92   : 		d = (d << n | d >> (28 - n)) & 0x0fffffff;

  0010f	8b ca		 mov	 ecx, edx
  00111	0b c3		 or	 eax, ebx
  00113	25 ff ff ff 0f	 and	 eax, 268435455		; 0fffffffH
  00118	89 45 e8	 mov	 DWORD PTR _c$1$[ebp], eax
  0011b	8b c7		 mov	 eax, edi
  0011d	d3 e8		 shr	 eax, cl
  0011f	8b ce		 mov	 ecx, esi
  00121	d3 e7		 shl	 edi, cl

; 93   : 		/* PC-2 (Permuted Choice 2) */
; 94   : 		k = w;
; 95   : 		p = pc2_c;

  00123	be 00 00 00 00	 mov	 esi, OFFSET ?pc2_c@?1??des_setkey@@YAXPAD@Z@4PAEA
  00128	0b f8		 or	 edi, eax
  0012a	8d 45 f4	 lea	 eax, DWORD PTR _w$1[ebp]
  0012d	81 e7 ff ff ff
	0f		 and	 edi, 268435455		; 0fffffffH
  00133	89 7d e4	 mov	 DWORD PTR _d$1$[ebp], edi
  00136	8b 7d e8	 mov	 edi, DWORD PTR _c$1$[ebp]
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL13@des_setkey:

; 96   : 		for (j = 0; j < 4; j++) {
; 97   : 			*k = 0;

  00140	c6 00 00	 mov	 BYTE PTR [eax], 0

; 98   : 			for (mask = 0x20; mask > 0; mask >>= 1) {

  00143	b3 20		 mov	 bl, 32			; 00000020H
$LL16@des_setkey:

; 99   : 				if ((c >> *p++) & 1)

  00145	8a 0e		 mov	 cl, BYTE PTR [esi]
  00147	8b d7		 mov	 edx, edi
  00149	d3 ea		 shr	 edx, cl
  0014b	46		 inc	 esi
  0014c	80 e2 01	 and	 dl, 1
  0014f	74 02		 je	 SHORT $LN14@des_setkey

; 100  : 					*k |= mask;

  00151	08 18		 or	 BYTE PTR [eax], bl
$LN14@des_setkey:

; 98   : 			for (mask = 0x20; mask > 0; mask >>= 1) {

  00153	d0 eb		 shr	 bl, 1
  00155	75 ee		 jne	 SHORT $LL16@des_setkey

; 101  : 			}
; 102  : 			k++;

  00157	40		 inc	 eax
  00158	83 6d f0 01	 sub	 DWORD PTR tv889[ebp], 1
  0015c	75 e2		 jne	 SHORT $LL13@des_setkey

; 103  : 		}
; 104  : 		p = pc2_d;

  0015e	8b 7d e4	 mov	 edi, DWORD PTR _d$1$[ebp]
  00161	be 00 00 00 00	 mov	 esi, OFFSET ?pc2_d@?1??des_setkey@@YAXPAD@Z@4PAEA
  00166	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR tv887[ebp], 4
  0016d	0f 1f 00	 npad	 3
$LL19@des_setkey:

; 105  : 		for (j = 0; j < 4; j++) {
; 106  : 			*k = 0;

  00170	c6 00 00	 mov	 BYTE PTR [eax], 0

; 107  : 			for (mask = 0x20; mask > 0; mask >>= 1) {

  00173	b3 20		 mov	 bl, 32			; 00000020H
$LL22@des_setkey:

; 108  : 				if ((d >> *p++) & 1)

  00175	8a 0e		 mov	 cl, BYTE PTR [esi]
  00177	8b d7		 mov	 edx, edi
  00179	d3 ea		 shr	 edx, cl
  0017b	46		 inc	 esi
  0017c	80 e2 01	 and	 dl, 1
  0017f	74 02		 je	 SHORT $LN20@des_setkey

; 109  : 					*k |= mask;

  00181	08 18		 or	 BYTE PTR [eax], bl
$LN20@des_setkey:

; 107  : 			for (mask = 0x20; mask > 0; mask >>= 1) {

  00183	d0 eb		 shr	 bl, 1
  00185	75 ee		 jne	 SHORT $LL22@des_setkey

; 110  : 			}
; 111  : 			k++;

  00187	40		 inc	 eax
  00188	83 6d f0 01	 sub	 DWORD PTR tv887[ebp], 1
  0018c	75 e2		 jne	 SHORT $LL19@des_setkey

; 112  : 		}
; 113  : 
; 114  : 		Keys[i][0] = ((ulong)w[0] << 24) | ((ulong)w[2] << 16)

  0018e	0f b6 4d f4	 movzx	 ecx, BYTE PTR _w$1[ebp]
  00192	0f b6 45 f6	 movzx	 eax, BYTE PTR _w$1[ebp+2]
  00196	8b 55 ec	 mov	 edx, DWORD PTR _i$1$[ebp]
  00199	c1 e1 08	 shl	 ecx, 8
  0019c	0b c8		 or	 ecx, eax
  0019e	8b 5d e8	 mov	 ebx, DWORD PTR _c$1$[ebp]
  001a1	0f b6 45 f8	 movzx	 eax, BYTE PTR _w$1[ebp+4]
  001a5	c1 e1 08	 shl	 ecx, 8
  001a8	0b c8		 or	 ecx, eax
  001aa	0f b6 45 fa	 movzx	 eax, BYTE PTR _w$1[ebp+6]
  001ae	c1 e1 08	 shl	 ecx, 8
  001b1	0b c8		 or	 ecx, eax

; 115  : 			   | ((ulong)w[4] << 8) | (ulong)w[6];
; 116  : 		Keys[i][1] = ((ulong)w[1] << 24) | ((ulong)w[3] << 16)

  001b3	0f b6 45 f7	 movzx	 eax, BYTE PTR _w$1[ebp+3]
  001b7	89 0c d5 00 00
	00 00		 mov	 DWORD PTR ?Keys@@3PAY01KA[edx*8], ecx
  001be	0f b6 4d f5	 movzx	 ecx, BYTE PTR _w$1[ebp+1]
  001c2	c1 e1 08	 shl	 ecx, 8
  001c5	0b c8		 or	 ecx, eax
  001c7	0f b6 45 f9	 movzx	 eax, BYTE PTR _w$1[ebp+5]
  001cb	c1 e1 08	 shl	 ecx, 8
  001ce	0b c8		 or	 ecx, eax
  001d0	0f b6 45 fb	 movzx	 eax, BYTE PTR _w$1[ebp+7]
  001d4	c1 e1 08	 shl	 ecx, 8
  001d7	0b c8		 or	 ecx, eax
  001d9	89 0c d5 04 00
	00 00		 mov	 DWORD PTR ?Keys@@3PAY01KA[edx*8+4], ecx
  001e0	42		 inc	 edx
  001e1	89 55 ec	 mov	 DWORD PTR _i$1$[ebp], edx
  001e4	83 fa 10	 cmp	 edx, 16			; 00000010H
  001e7	0f 8c 03 ff ff
	ff		 jl	 $LL10@des_setkey

; 117  : 			   | ((ulong)w[5] << 8) | (ulong)w[7];
; 118  : 
; 119  : 	}
; 120  : }

  001ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f0	5f		 pop	 edi
  001f1	5e		 pop	 esi
  001f2	33 cd		 xor	 ecx, ebp
  001f4	5b		 pop	 ebx
  001f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c3		 ret	 0
?des_setkey@@YAXPAD@Z ENDP				; des_setkey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\wgs\descrypt.cpp
;	COMDAT ?des_setparity@@YAXPAD@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
?des_setparity@@YAXPAD@Z PROC				; des_setparity, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 22   : 	int n;
; 23   : 
; 24   : 	for (n = 8; n > 0; n--) {
; 25   : 		char c;
; 26   : 
; 27   : 		c = *key &= 0x7f;

  00004	8b 75 08	 mov	 esi, DWORD PTR _key$[ebp]
  00007	8a 16		 mov	 dl, BYTE PTR [esi]
  00009	80 e2 7f	 and	 dl, 127			; 0000007fH
  0000c	8a ca		 mov	 cl, dl

; 28   : 		c ^= c << 4;

  0000e	8a c1		 mov	 al, cl
  00010	c0 e0 04	 shl	 al, 4
  00013	32 c8		 xor	 cl, al

; 29   : 		c ^= c << 2;

  00015	8a c1		 mov	 al, cl
  00017	c0 e0 02	 shl	 al, 2
  0001a	32 c8		 xor	 cl, al

; 30   : 		c ^= c << 1;

  0001c	8a c1		 mov	 al, cl
  0001e	02 c0		 add	 al, al
  00020	32 c1		 xor	 al, cl

; 31   : 		*key++ ^= ~c & 0x80;

  00022	f6 d0		 not	 al
  00024	24 80		 and	 al, -128		; ffffff80H
  00026	32 c2		 xor	 al, dl
  00028	8a 56 01	 mov	 dl, BYTE PTR [esi+1]
  0002b	88 06		 mov	 BYTE PTR [esi], al
  0002d	80 e2 7f	 and	 dl, 127			; 0000007fH
  00030	8a ca		 mov	 cl, dl
  00032	8a c1		 mov	 al, cl
  00034	c0 e0 04	 shl	 al, 4
  00037	32 c8		 xor	 cl, al
  00039	8a c1		 mov	 al, cl
  0003b	c0 e0 02	 shl	 al, 2
  0003e	32 c8		 xor	 cl, al
  00040	8a c1		 mov	 al, cl
  00042	02 c0		 add	 al, al
  00044	32 c1		 xor	 al, cl
  00046	f6 d0		 not	 al
  00048	24 80		 and	 al, -128		; ffffff80H
  0004a	32 c2		 xor	 al, dl
  0004c	8a 56 02	 mov	 dl, BYTE PTR [esi+2]
  0004f	88 46 01	 mov	 BYTE PTR [esi+1], al
  00052	80 e2 7f	 and	 dl, 127			; 0000007fH
  00055	8a ca		 mov	 cl, dl
  00057	8a c1		 mov	 al, cl
  00059	c0 e0 04	 shl	 al, 4
  0005c	32 c8		 xor	 cl, al
  0005e	8a c1		 mov	 al, cl
  00060	c0 e0 02	 shl	 al, 2
  00063	32 c8		 xor	 cl, al
  00065	8a c1		 mov	 al, cl
  00067	02 c0		 add	 al, al
  00069	32 c1		 xor	 al, cl
  0006b	f6 d0		 not	 al
  0006d	24 80		 and	 al, -128		; ffffff80H
  0006f	32 c2		 xor	 al, dl
  00071	8a 56 03	 mov	 dl, BYTE PTR [esi+3]
  00074	88 46 02	 mov	 BYTE PTR [esi+2], al
  00077	80 e2 7f	 and	 dl, 127			; 0000007fH
  0007a	8a ca		 mov	 cl, dl
  0007c	8a c1		 mov	 al, cl
  0007e	c0 e0 04	 shl	 al, 4
  00081	32 c8		 xor	 cl, al
  00083	8a c1		 mov	 al, cl
  00085	c0 e0 02	 shl	 al, 2
  00088	32 c8		 xor	 cl, al
  0008a	8a c1		 mov	 al, cl
  0008c	02 c0		 add	 al, al
  0008e	32 c1		 xor	 al, cl
  00090	f6 d0		 not	 al
  00092	24 80		 and	 al, -128		; ffffff80H
  00094	32 c2		 xor	 al, dl
  00096	8a 56 04	 mov	 dl, BYTE PTR [esi+4]
  00099	88 46 03	 mov	 BYTE PTR [esi+3], al
  0009c	80 e2 7f	 and	 dl, 127			; 0000007fH
  0009f	8a ca		 mov	 cl, dl
  000a1	8a c1		 mov	 al, cl
  000a3	c0 e0 04	 shl	 al, 4
  000a6	32 c8		 xor	 cl, al
  000a8	8a c1		 mov	 al, cl
  000aa	c0 e0 02	 shl	 al, 2
  000ad	32 c8		 xor	 cl, al
  000af	8a c1		 mov	 al, cl
  000b1	02 c0		 add	 al, al
  000b3	32 c1		 xor	 al, cl
  000b5	f6 d0		 not	 al
  000b7	24 80		 and	 al, -128		; ffffff80H
  000b9	32 c2		 xor	 al, dl
  000bb	8a 56 05	 mov	 dl, BYTE PTR [esi+5]
  000be	88 46 04	 mov	 BYTE PTR [esi+4], al
  000c1	80 e2 7f	 and	 dl, 127			; 0000007fH
  000c4	8a ca		 mov	 cl, dl
  000c6	8a c1		 mov	 al, cl
  000c8	c0 e0 04	 shl	 al, 4
  000cb	32 c8		 xor	 cl, al
  000cd	8a c1		 mov	 al, cl
  000cf	c0 e0 02	 shl	 al, 2
  000d2	32 c8		 xor	 cl, al
  000d4	8a c1		 mov	 al, cl
  000d6	02 c0		 add	 al, al
  000d8	32 c1		 xor	 al, cl
  000da	f6 d0		 not	 al
  000dc	24 80		 and	 al, -128		; ffffff80H
  000de	32 c2		 xor	 al, dl
  000e0	8a 56 06	 mov	 dl, BYTE PTR [esi+6]
  000e3	88 46 05	 mov	 BYTE PTR [esi+5], al
  000e6	80 e2 7f	 and	 dl, 127			; 0000007fH
  000e9	8a ca		 mov	 cl, dl
  000eb	8a c1		 mov	 al, cl
  000ed	c0 e0 04	 shl	 al, 4
  000f0	32 c8		 xor	 cl, al
  000f2	8a c1		 mov	 al, cl
  000f4	c0 e0 02	 shl	 al, 2
  000f7	32 c8		 xor	 cl, al
  000f9	8a c1		 mov	 al, cl
  000fb	02 c0		 add	 al, al
  000fd	32 c1		 xor	 al, cl
  000ff	f6 d0		 not	 al
  00101	24 80		 and	 al, -128		; ffffff80H
  00103	32 c2		 xor	 al, dl
  00105	8a 56 07	 mov	 dl, BYTE PTR [esi+7]
  00108	88 46 06	 mov	 BYTE PTR [esi+6], al
  0010b	80 e2 7f	 and	 dl, 127			; 0000007fH
  0010e	8a ca		 mov	 cl, dl
  00110	8a c1		 mov	 al, cl
  00112	c0 e0 04	 shl	 al, 4
  00115	32 c8		 xor	 cl, al
  00117	8a c1		 mov	 al, cl
  00119	c0 e0 02	 shl	 al, 2
  0011c	32 c8		 xor	 cl, al
  0011e	8a c1		 mov	 al, cl
  00120	02 c0		 add	 al, al
  00122	32 c1		 xor	 al, cl
  00124	f6 d0		 not	 al
  00126	24 80		 and	 al, -128		; ffffff80H
  00128	32 c2		 xor	 al, dl
  0012a	88 46 07	 mov	 BYTE PTR [esi+7], al
  0012d	5e		 pop	 esi

; 32   : 	}
; 33   : }

  0012e	5d		 pop	 ebp
  0012f	c3		 ret	 0
?des_setparity@@YAXPAD@Z ENDP				; des_setparity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\wgs\descrypt.cpp
;	COMDAT ?cbc_crypt@@YAHPAD0II0@Z
_TEXT	SEGMENT
_len$2$ = -12						; size = 4
_len$1$ = -12						; size = 4
_nvec$8$ = -6						; size = 1
_nvec$7$ = -5						; size = 1
_nvec$6$ = -4						; size = 1
_nvec$5$ = -3						; size = 1
_nvec$4$ = -2						; size = 1
_nvec$1$ = -1						; size = 1
_key$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_mode$ = 20						; size = 4
_ivec$ = 24						; size = 4
?cbc_crypt@@YAHPAD0II0@Z PROC				; cbc_crypt, COMDAT

; 1539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1540 : 	char nvec[8];
; 1541 : 
; 1542 : 	des_setkey(key);

  00009	ff 75 08	 push	 DWORD PTR _key$[ebp]
  0000c	e8 00 00 00 00	 call	 ?des_setkey@@YAXPAD@Z	; des_setkey

; 1543 : 	switch (mode & DES_DIRMASK) {

  00011	8b 5d 14	 mov	 ebx, DWORD PTR _mode$[ebp]
  00014	83 c4 04	 add	 esp, 4
  00017	8b c3		 mov	 eax, ebx
  00019	83 e0 01	 and	 eax, 1
  0001c	83 e8 00	 sub	 eax, 0
  0001f	0f 84 d4 00 00
	00		 je	 $LN10@cbc_crypt
  00025	83 e8 01	 sub	 eax, 1
  00028	0f 85 66 01 00
	00		 jne	 $LN5@cbc_crypt

; 1563 : 		} 
; 1564 : 		break;
; 1565 : 	case DES_DECRYPT:
; 1566 : 		for (len = (len + 7) & ~7; len != 0; len -= 8) {

  0002e	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00031	83 c0 07	 add	 eax, 7
  00034	83 e0 f8	 and	 eax, -8			; fffffff8H
  00037	89 45 f4	 mov	 DWORD PTR _len$1$[ebp], eax
  0003a	0f 84 54 01 00
	00		 je	 $LN5@cbc_crypt
  00040	8b 75 0c	 mov	 esi, DWORD PTR _buf$[ebp]
$LL9@cbc_crypt:

; 1567 : 			nvec[0] = buf[0];

  00043	8a 06		 mov	 al, BYTE PTR [esi]

; 1568 : 			nvec[1] = buf[1];

  00045	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 1569 : 			nvec[2] = buf[2];

  00048	8a 7e 02	 mov	 bh, BYTE PTR [esi+2]
  0004b	88 45 ff	 mov	 BYTE PTR _nvec$1$[ebp], al

; 1570 : 			nvec[3] = buf[3];

  0004e	8a 46 03	 mov	 al, BYTE PTR [esi+3]
  00051	88 45 fe	 mov	 BYTE PTR _nvec$4$[ebp], al

; 1571 : 			nvec[4] = buf[4];

  00054	8a 46 04	 mov	 al, BYTE PTR [esi+4]
  00057	88 45 fd	 mov	 BYTE PTR _nvec$5$[ebp], al

; 1572 : 			nvec[5] = buf[5];

  0005a	8a 46 05	 mov	 al, BYTE PTR [esi+5]
  0005d	88 45 fc	 mov	 BYTE PTR _nvec$6$[ebp], al

; 1573 : 			nvec[6] = buf[6];

  00060	8a 46 06	 mov	 al, BYTE PTR [esi+6]
  00063	88 45 fb	 mov	 BYTE PTR _nvec$7$[ebp], al

; 1574 : 			nvec[7] = buf[7];

  00066	8a 46 07	 mov	 al, BYTE PTR [esi+7]

; 1575 : 			des_crypt(buf, DES_DECRYPT);

  00069	6a 01		 push	 1
  0006b	56		 push	 esi
  0006c	88 45 fa	 mov	 BYTE PTR _nvec$8$[ebp], al
  0006f	e8 00 00 00 00	 call	 ?des_crypt@@YAXPADH@Z	; des_crypt

; 1576 : 			*buf++ ^= ivec[0];

  00074	8b 4d 18	 mov	 ecx, DWORD PTR _ivec$[ebp]
  00077	83 c4 08	 add	 esp, 8
  0007a	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0007d	30 06		 xor	 BYTE PTR [esi], al

; 1577 : 			*buf++ ^= ivec[1];

  0007f	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00083	30 46 01	 xor	 BYTE PTR [esi+1], al

; 1578 : 			*buf++ ^= ivec[2];

  00086	0f b6 41 02	 movzx	 eax, BYTE PTR [ecx+2]
  0008a	30 46 02	 xor	 BYTE PTR [esi+2], al

; 1579 : 			*buf++ ^= ivec[3];

  0008d	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  00091	30 46 03	 xor	 BYTE PTR [esi+3], al

; 1580 : 			*buf++ ^= ivec[4];

  00094	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  00098	30 46 04	 xor	 BYTE PTR [esi+4], al

; 1581 : 			*buf++ ^= ivec[5];

  0009b	0f b6 41 05	 movzx	 eax, BYTE PTR [ecx+5]
  0009f	30 46 05	 xor	 BYTE PTR [esi+5], al

; 1582 : 			*buf++ ^= ivec[6];

  000a2	0f b6 41 06	 movzx	 eax, BYTE PTR [ecx+6]
  000a6	30 46 06	 xor	 BYTE PTR [esi+6], al

; 1583 : 			*buf++ ^= ivec[7];

  000a9	0f b6 41 07	 movzx	 eax, BYTE PTR [ecx+7]
  000ad	30 46 07	 xor	 BYTE PTR [esi+7], al
  000b0	83 c6 08	 add	 esi, 8
  000b3	83 6d f4 08	 sub	 DWORD PTR _len$1$[ebp], 8

; 1584 : 			ivec[0] = nvec[0];

  000b7	8a 45 ff	 mov	 al, BYTE PTR _nvec$1$[ebp]
  000ba	88 01		 mov	 BYTE PTR [ecx], al

; 1585 : 			ivec[1] = nvec[1];
; 1586 : 			ivec[2] = nvec[2];
; 1587 : 			ivec[3] = nvec[3];

  000bc	8a 45 fe	 mov	 al, BYTE PTR _nvec$4$[ebp]
  000bf	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 1588 : 			ivec[4] = nvec[4];

  000c2	8a 45 fd	 mov	 al, BYTE PTR _nvec$5$[ebp]
  000c5	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 1589 : 			ivec[5] = nvec[5];

  000c8	8a 45 fc	 mov	 al, BYTE PTR _nvec$6$[ebp]
  000cb	88 41 05	 mov	 BYTE PTR [ecx+5], al

; 1590 : 			ivec[6] = nvec[6];

  000ce	8a 45 fb	 mov	 al, BYTE PTR _nvec$7$[ebp]
  000d1	88 41 06	 mov	 BYTE PTR [ecx+6], al

; 1591 : 			ivec[7] = nvec[7];

  000d4	8a 45 fa	 mov	 al, BYTE PTR _nvec$8$[ebp]
  000d7	88 59 01	 mov	 BYTE PTR [ecx+1], bl
  000da	88 79 02	 mov	 BYTE PTR [ecx+2], bh
  000dd	88 41 07	 mov	 BYTE PTR [ecx+7], al
  000e0	0f 85 5d ff ff
	ff		 jne	 $LL9@cbc_crypt

; 1592 : 		}
; 1593 : 		break;
; 1594 : 	}
; 1595 : 	return ((mode & DES_DEVMASK) == DES_SW ? DESERR_NONE

  000e6	8b 5d 14	 mov	 ebx, DWORD PTR _mode$[ebp]
  000e9	d1 eb		 shr	 ebx, 1
  000eb	f7 d3		 not	 ebx
  000ed	5f		 pop	 edi
  000ee	83 e3 01	 and	 ebx, 1
  000f1	5e		 pop	 esi
  000f2	8b c3		 mov	 eax, ebx
  000f4	5b		 pop	 ebx

; 1596 : 					       : DESERR_NOHWDEVICE);
; 1597 : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
$LN10@cbc_crypt:

; 1544 : 	case DES_ENCRYPT:
; 1545 : 		for (len = (len + 7) & ~7; len != 0; len -= 8) {

  000f9	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  000fc	83 c0 07	 add	 eax, 7
  000ff	83 e0 f8	 and	 eax, -8			; fffffff8H
  00102	89 45 f4	 mov	 DWORD PTR _len$2$[ebp], eax
  00105	0f 84 89 00 00
	00		 je	 $LN5@cbc_crypt
  0010b	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  0010e	8b 5d 18	 mov	 ebx, DWORD PTR _ivec$[ebp]
$LL6@cbc_crypt:

; 1546 : 			buf[0] ^= ivec[0];

  00111	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00114	30 07		 xor	 BYTE PTR [edi], al

; 1547 : 			buf[1] ^= ivec[1];

  00116	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  0011a	30 47 01	 xor	 BYTE PTR [edi+1], al

; 1548 : 			buf[2] ^= ivec[2];

  0011d	0f b6 43 02	 movzx	 eax, BYTE PTR [ebx+2]
  00121	30 47 02	 xor	 BYTE PTR [edi+2], al

; 1549 : 			buf[3] ^= ivec[3];

  00124	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]
  00128	30 47 03	 xor	 BYTE PTR [edi+3], al

; 1550 : 			buf[4] ^= ivec[4];

  0012b	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  0012f	30 47 04	 xor	 BYTE PTR [edi+4], al

; 1551 : 			buf[5] ^= ivec[5];

  00132	0f b6 43 05	 movzx	 eax, BYTE PTR [ebx+5]
  00136	30 47 05	 xor	 BYTE PTR [edi+5], al

; 1552 : 			buf[6] ^= ivec[6];

  00139	0f b6 43 06	 movzx	 eax, BYTE PTR [ebx+6]
  0013d	30 47 06	 xor	 BYTE PTR [edi+6], al

; 1553 : 			buf[7] ^= ivec[7];

  00140	0f b6 43 07	 movzx	 eax, BYTE PTR [ebx+7]
  00144	30 47 07	 xor	 BYTE PTR [edi+7], al

; 1554 : 			des_crypt(buf, DES_ENCRYPT);

  00147	6a 00		 push	 0
  00149	57		 push	 edi
  0014a	e8 00 00 00 00	 call	 ?des_crypt@@YAXPADH@Z	; des_crypt

; 1555 : 			ivec[0] = *buf++;

  0014f	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00152	83 c4 08	 add	 esp, 8
  00155	88 03		 mov	 BYTE PTR [ebx], al

; 1556 : 			ivec[1] = *buf++;

  00157	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  0015b	88 43 01	 mov	 BYTE PTR [ebx+1], al

; 1557 : 			ivec[2] = *buf++;

  0015e	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  00162	88 43 02	 mov	 BYTE PTR [ebx+2], al

; 1558 : 			ivec[3] = *buf++;

  00165	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  00169	88 43 03	 mov	 BYTE PTR [ebx+3], al

; 1559 : 			ivec[4] = *buf++;

  0016c	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00170	88 43 04	 mov	 BYTE PTR [ebx+4], al

; 1560 : 			ivec[5] = *buf++;

  00173	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  00177	88 43 05	 mov	 BYTE PTR [ebx+5], al

; 1561 : 			ivec[6] = *buf++;

  0017a	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  0017e	88 43 06	 mov	 BYTE PTR [ebx+6], al

; 1562 : 			ivec[7] = *buf++;

  00181	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  00185	83 c7 08	 add	 edi, 8
  00188	83 6d f4 08	 sub	 DWORD PTR _len$2$[ebp], 8
  0018c	88 43 07	 mov	 BYTE PTR [ebx+7], al
  0018f	75 80		 jne	 SHORT $LL6@cbc_crypt

; 1592 : 		}
; 1593 : 		break;
; 1594 : 	}
; 1595 : 	return ((mode & DES_DEVMASK) == DES_SW ? DESERR_NONE

  00191	8b 5d 14	 mov	 ebx, DWORD PTR _mode$[ebp]
$LN5@cbc_crypt:
  00194	d1 eb		 shr	 ebx, 1
  00196	f7 d3		 not	 ebx
  00198	5f		 pop	 edi
  00199	83 e3 01	 and	 ebx, 1
  0019c	5e		 pop	 esi
  0019d	8b c3		 mov	 eax, ebx
  0019f	5b		 pop	 ebx

; 1596 : 					       : DESERR_NOHWDEVICE);
; 1597 : }

  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c3		 ret	 0
?cbc_crypt@@YAHPAD0II0@Z ENDP				; cbc_crypt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\wgs\descrypt.cpp
;	COMDAT ?ecb_crypt@@YAHPAD0II@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
_buf$ = 12						; size = 4
tv136 = 16						; size = 4
_len$ = 16						; size = 4
_mode$ = 20						; size = 4
?ecb_crypt@@YAHPAD0II@Z PROC				; ecb_crypt, COMDAT

; 1529 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 1530 : 	des_setkey(key);

  00005	ff 75 08	 push	 DWORD PTR _key$[ebp]
  00008	e8 00 00 00 00	 call	 ?des_setkey@@YAXPAD@Z	; des_setkey

; 1531 : 	for (len = (len + 7) & ~7; len != 0; buf += 8, len -= 8)

  0000d	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  00010	83 c4 04	 add	 esp, 4
  00013	8b 5d 14	 mov	 ebx, DWORD PTR _mode$[ebp]
  00016	83 c7 07	 add	 edi, 7
  00019	83 e7 f8	 and	 edi, -8			; fffffff8H
  0001c	74 1d		 je	 SHORT $LN3@ecb_crypt
  0001e	56		 push	 esi
  0001f	8b 75 0c	 mov	 esi, DWORD PTR _buf$[ebp]
  00022	83 e3 01	 and	 ebx, 1
$LL4@ecb_crypt:

; 1532 : 		des_crypt(buf, mode & DES_DIRMASK);

  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	e8 00 00 00 00	 call	 ?des_crypt@@YAXPADH@Z	; des_crypt
  0002c	83 c4 08	 add	 esp, 8
  0002f	83 c6 08	 add	 esi, 8
  00032	83 ef 08	 sub	 edi, 8
  00035	75 ee		 jne	 SHORT $LL4@ecb_crypt
  00037	8b 5d 14	 mov	 ebx, DWORD PTR _mode$[ebp]
  0003a	5e		 pop	 esi
$LN3@ecb_crypt:

; 1533 : 	return ((mode & DES_DEVMASK) == DES_SW ? DESERR_NONE

  0003b	d1 eb		 shr	 ebx, 1
  0003d	f7 d3		 not	 ebx
  0003f	83 e3 01	 and	 ebx, 1
  00042	5f		 pop	 edi
  00043	8b c3		 mov	 eax, ebx
  00045	5b		 pop	 ebx

; 1534 : 					       : DESERR_NOHWDEVICE);
; 1535 : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?ecb_crypt@@YAHPAD0II@Z ENDP				; ecb_crypt
_TEXT	ENDS
END
