; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\ime.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?dwInfo@@3KA					; dwInfo
_BSS	SEGMENT
?dwInfo@@3KA DD	01H DUP (?)				; dwInfo
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?ShowBottomLineString@@YAXHPAD@Z		; ShowBottomLineString
PUBLIC	?strstr3@@YAHPAD0@Z				; strstr3
PUBLIC	?NewShowBottomLineString@@YAXHPAD@Z		; NewShowBottomLineString
PUBLIC	?ImeProc@@YAXXZ					; ImeProc
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_08LDMKCG@?$MA?O?$LJ?$NN?C?$KE?F?C@	; `string'
PUBLIC	??_C@_08MONFNGIO@?$LB?S?5?$LM?S?5?$LI?$LL@	; `string'
PUBLIC	??_C@_08PHELNDMH@?F?D?F?$LM?C?$KE?F?C@		; `string'
PUBLIC	??_C@_08NPHMDBID@?$LK?N?A?$LH?C?$KE?F?C@	; `string'
PUBLIC	??_C@_08FDACGPGL@?$LA?f?$LH?B?C?$KE?$LD?N@	; `string'
PUBLIC	??_C@_0L@JJGIFDKI@?C?$KE?$LD?N?$LJ?f?C?$KE?$LD?N@ ; `string'
PUBLIC	??_C@_06HFMOMHB@?$LP?y?5?5?$LF?e@		; `string'
PUBLIC	??_C@_08JNNGLNCD@?$LL?g?$LP?k?$LO?H?G?T@	; `string'
PUBLIC	??_C@_0BA@LIGBPIEE@?$FL?$CFs?$FN?$LF?$LP?3?$CFd?5?$LD?$LC?3?$CFd@ ; `string'
PUBLIC	??_C@_08FBDOGKJC@?$LM?v?$LF?$LP?$LI?p?$LF?e@	; `string'
PUBLIC	??_C@_08GHCIMMED@?$LA?$KN?A?$KG?$LA?x?$LA?$NN@	; `string'
PUBLIC	??_C@_08OLNGHIAG@?G?J?$LM?v?$LJ?f?$LO?n@	; `string'
PUBLIC	??_C@_08HEDKPKHO@?$KD?A?$KD?I?$LI?p?$LF?e@	; `string'
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?GetImeString@@YAPADXZ:PROC			; GetImeString
EXTRN	?GetImeDescString@@YAPADXZ:PROC			; GetImeDescString
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?DISPLACEMENT_X@@3HA:DWORD			; DISPLACEMENT_X
EXTRN	?DISPLACEMENT_Y@@3HA:DWORD			; DISPLACEMENT_Y
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?mouse@@3UMOUSE@@A:BYTE				; mouse
EXTRN	?TaskBarFlag@@3HA:DWORD				; TaskBarFlag
EXTRN	?TalkMode@@3HA:DWORD				; TalkMode
EXTRN	?nowFloorName@@3PADA:BYTE			; nowFloorName
EXTRN	?nowGx@@3HA:DWORD				; nowGx
EXTRN	?nowGy@@3HA:DWORD				; nowGy
EXTRN	?AI@@3HA:DWORD					; AI
EXTRN	?bShowItemExplain@@3HA:DWORD			; bShowItemExplain
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_08HEDKPKHO@?$KD?A?$KD?I?$LI?p?$LF?e@
CONST	SEGMENT
??_C@_08HEDKPKHO@?$KD?A?$KD?I?$LI?p?$LF?e@ DB 0a3H, 0c1H, 0a3H, 0c9H, 0b8H
	DB	0f0H, 0b5H, 0e5H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OLNGHIAG@?G?J?$LM?v?$LJ?f?$LO?n@
CONST	SEGMENT
??_C@_08OLNGHIAG@?G?J?$LM?v?$LJ?f?$LO?n@ DB 0c7H, 0caH, 0bcH, 0f6H, 0b9H, 0e6H
	DB	0beH, 0eeH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHCIMMED@?$LA?$KN?A?$KG?$LA?x?$LA?$NN@
CONST	SEGMENT
??_C@_08GHCIMMED@?$LA?$KN?A?$KG?$LA?x?$LA?$NN@ DB 0b0H, 0adH, 0c1H, 0a6H, 0b0H
	DB	0f8H, 0b0H, 0ddH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBDOGKJC@?$LM?v?$LF?$LP?$LI?p?$LF?e@
CONST	SEGMENT
??_C@_08FBDOGKJC@?$LM?v?$LF?$LP?$LI?p?$LF?e@ DB 0bcH, 0f6H, 0b5H, 0bfH, 0b8H
	DB	0f0H, 0b5H, 0e5H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIGBPIEE@?$FL?$CFs?$FN?$LF?$LP?3?$CFd?5?$LD?$LC?3?$CFd@
CONST	SEGMENT
??_C@_0BA@LIGBPIEE@?$FL?$CFs?$FN?$LF?$LP?3?$CFd?5?$LD?$LC?3?$CFd@ DB '[%s'
	DB	']', 0b5H, 0bfH, ':%d ', 0b3H, 0b2H, ':%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JNNGLNCD@?$LL?g?$LP?k?$LO?H?G?T@
CONST	SEGMENT
??_C@_08JNNGLNCD@?$LL?g?$LP?k?$LO?H?G?T@ DB 0bbH, 0e7H, 0bfH, 0ebH, 0beH, 0c8H
	DB	0c7H, 0d4H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFMOMHB@?$LP?y?5?5?$LF?e@
CONST	SEGMENT
??_C@_06HFMOMHB@?$LP?y?5?5?$LF?e@ DB 0bfH, 0f9H, '  ', 0b5H, 0e5H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JJGIFDKI@?C?$KE?$LD?N?$LJ?f?C?$KE?$LD?N@
CONST	SEGMENT
??_C@_0L@JJGIFDKI@?C?$KE?$LD?N?$LJ?f?C?$KE?$LD?N@ DB 0c3H, 0a4H, 0b3H, 0ceH
	DB	0b9H, 0e6H, 0c3H, 0a4H, 0b3H, 0ceH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDACGPGL@?$LA?f?$LH?B?C?$KE?$LD?N@
CONST	SEGMENT
??_C@_08FDACGPGL@?$LA?f?$LH?B?C?$KE?$LD?N@ DB 0b0H, 0e6H, 0b7H, 0c2H, 0c3H
	DB	0a4H, 0b3H, 0ceH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NPHMDBID@?$LK?N?A?$LH?C?$KE?F?C@
CONST	SEGMENT
??_C@_08NPHMDBID@?$LK?N?A?$LH?C?$KE?F?C@ DB 0baH, 0ceH, 0c1H, 0b7H, 0c3H, 0a4H
	DB	0c6H, 0c3H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08PHELNDMH@?F?D?F?$LM?C?$KE?F?C@
CONST	SEGMENT
??_C@_08PHELNDMH@?F?D?F?$LM?C?$KE?F?C@ DB 0c6H, 0c4H, 0c6H, 0bcH, 0c3H, 0a4H
	DB	0c6H, 0c3H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08MONFNGIO@?$LB?S?5?$LM?S?5?$LI?$LL@
CONST	SEGMENT
??_C@_08MONFNGIO@?$LB?S?5?$LM?S?5?$LI?$LL@ DB 0b1H, 0d3H, ' ', 0bcH, 0d3H
	DB	' ', 0b8H, 0bbH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDMKCG@?$MA?O?$LJ?$NN?C?$KE?F?C@
CONST	SEGMENT
??_C@_08LDMKCG@?$MA?O?$LJ?$NN?C?$KE?F?C@ DB 0c0H, 0cfH, 0b9H, 0ddH, 0c3H, 0a4H
	DB	0c6H, 0c3H, 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\ime.cpp
;	COMDAT ?ImeProc@@YAXXZ
_TEXT	SEGMENT
_?‘≥?„∆Ÿ£$1 = -164					; size = 32
_mapname$2 = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
?ImeProc@@YAXXZ PROC					; ImeProc, COMDAT

; 96   : void ImeProc() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 97   : 	int Â±èÂπïX, Â±èÂπïY;
; 98   : 	if (ResoMode == ÂàÜËæ®Áéá::mode800) {

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	83 f8 03	 cmp	 eax, 3
  0001d	75 0c		 jne	 SHORT $LN4@ImeProc

; 99   : 		Â±èÂπïX = 800;
; 100  : 		Â±èÂπïY = 600;

  0001f	be 44 02 00 00	 mov	 esi, 580		; 00000244H
  00024	bf 0e 01 00 00	 mov	 edi, 270		; 0000010eH

; 101  : 	}

  00029	eb 1b		 jmp	 SHORT $LN7@ImeProc
$LN4@ImeProc:

; 102  : 	else if (ResoMode == ÂàÜËæ®Áéá::mode1024) {

  0002b	83 f8 04	 cmp	 eax, 4
  0002e	75 0c		 jne	 SHORT $LN6@ImeProc

; 103  : 		Â±èÂπïX = 1024;
; 104  : 		Â±èÂπïY = 768;

  00030	be ec 02 00 00	 mov	 esi, 748		; 000002ecH
  00035	bf 7e 01 00 00	 mov	 edi, 382		; 0000017eH

; 105  : 	}

  0003a	eb 0a		 jmp	 SHORT $LN7@ImeProc
$LN6@ImeProc:

; 106  : 	else {
; 107  : 		Â±èÂπïX = 640;
; 108  : 		Â±èÂπïY = 480;

  0003c	be cc 01 00 00	 mov	 esi, 460		; 000001ccH
  00041	bf be 00 00 00	 mov	 edi, 190		; 000000beH
$LN7@ImeProc:

; 109  : 	}
; 110  : 	// ÊòæÁ§∫ËæìÂÖ•Ê≥ïÁöÑÂêçÁß∞
; 111  : 	// Terry fix 2003/12/16 for ‰∫§ÊòìËßÜÁ™óÂºÄÂêØÊó∂,ÊòæÁ§∫Áâ©ÂìÅËØ¥Êòé‰∏çÊòæÁ§∫ËæìÂÖ•Ê≥ï
; 112  : 	//if( TaskBarFlag == FALSE ){ //ËøôË°åÊîπÊàê‰∏ã‰∏ÄË°å
; 113  : 	//if(bShowItemExplain == FALSE){
; 114  : 	if (TaskBarFlag == FALSE && bShowItemExplain == FALSE) {

  00046	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  0004d	0f 85 13 01 00
	00		 jne	 $LN15@ImeProc
  00053	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bShowItemExplain@@3HA, 0 ; bShowItemExplain
  0005a	0f 85 06 01 00
	00		 jne	 $LN15@ImeProc

; 115  : 		LPSTR lpstr, lpstr1;
; 116  : 		//ÂéªÊéâËæìÂÖ•Ê≥ïÁöÑÊòæÁ§∫
; 117  : 		/*
; 118  : 		LPSTR lpstr=GetImeString();
; 119  : 		if(lpstr){
; 120  : 			StockFontBuffer(‰∏¥Êó∂ÂõæÊ†áX-60,‰∏¥Êó∂ÂõæÊ†áY-60,FONT_PRIO_FRONT,FONT_PAL_WHITE,lpstr,0);
; 121  : #ifdef _TALK_WINDOW
; 122  : 			if(g_bTalkWindow) TalkWindow.Update();
; 123  : #endif
; 124  : 		}
; 125  : 		*/
; 126  : 		lpstr1 = GetImeDescString();

  00060	e8 00 00 00 00	 call	 ?GetImeDescString@@YAPADXZ ; GetImeDescString

; 127  : 		if (1 != dwInfo) {

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?dwInfo@@3KA, 1 ; dwInfo
  0006c	0f 84 f4 00 00
	00		 je	 $LN15@ImeProc

; 128  : 			//cary ÁßÄÂá∫pingÁöÑÊó∂Èó¥
; 129  : 			int FontColor = 0;
; 130  : 			char* È¢ëÈÅìÊòæÁ§∫Âêç[] = {
; 131  : 				"ÏùºÎ∞òÏ±ÑÌåÖ",
; 132  : 				"Í∑ì ÏÜç Îßê",
; 133  : 				"ÌååÌã∞Ï±ÑÌåÖ",
; 134  : 				"Î∂ÄÏ°±Ï±ÑÌåÖ",
; 135  : 				//#ifdef _CHAR_PROFESSION
; 136  : 								"Í≤ΩÎ†•Ï±ÑÎÑê",
; 137  : 								//#endif
; 138  : 								//#ifdef _CHATROOMPROTOCOL
; 139  : 												"Ï±ÑÎÑêÎ∞©Ï±ÑÎÑê",
; 140  : 												//#endif
; 141  : 												//#ifdef _CHATWORLDWIDEPROTOCOL
; 142  : 																"Ïõî  Îìú",
; 143  : 																//#endif
; 144  : 																//#ifdef _NB_CHANNEL_ALLSERV
; 145  : 																				"ÏÇ¨Ïö©ÏïàÌï®",
; 146  : 																				//#endif
; 147  : 			};
; 148  : 
; 149  : 			lpstr1 = È¢ëÈÅìÊòæÁ§∫Âêç[TalkMode];
; 150  : 			StockFontBuffer(10, Â±èÂπïY - 20, FONT_PRIO_FRONT, FontColor, lpstr1, 0);

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?TalkMode@@3HA ; TalkMode
  00077	6a 00		 push	 0
  00079	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp], OFFSET ??_C@_08LDMKCG@?$MA?O?$LJ?$NN?C?$KE?F?C@
  00083	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp+4], OFFSET ??_C@_08MONFNGIO@?$LB?S?5?$LM?S?5?$LI?$LL@
  0008d	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp+8], OFFSET ??_C@_08PHELNDMH@?F?D?F?$LM?C?$KE?F?C@
  00097	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp+12], OFFSET ??_C@_08NPHMDBID@?$LK?N?A?$LH?C?$KE?F?C@
  000a1	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp+16], OFFSET ??_C@_08FDACGPGL@?$LA?f?$LH?B?C?$KE?$LD?N@
  000ab	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp+20], OFFSET ??_C@_0L@JJGIFDKI@?C?$KE?$LD?N?$LJ?f?C?$KE?$LD?N@
  000b5	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp+24], OFFSET ??_C@_06HFMOMHB@?$LP?y?5?5?$LF?e@
  000bf	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp+28], OFFSET ??_C@_08JNNGLNCD@?$LL?g?$LP?k?$LO?H?G?T@
  000c9	ff b4 85 5c ff
	ff ff		 push	 DWORD PTR _?‘≥?„∆Ÿ£$1[ebp+eax*4]
  000d0	6a 00		 push	 0
  000d2	6a 01		 push	 1
  000d4	56		 push	 esi
  000d5	6a 0a		 push	 10			; 0000000aH
  000d7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 151  : 
; 152  : #ifdef _SHOW_mouse
; 153  : 			char buf[20];
; 154  : 			wsprintfA(buf, "Mouse:%d,%d", mouse.nowPoint.x, mouse.nowPoint.y);
; 155  : 			StockFontBuffer(150, 460 + DISPLACEMENT_Y, FONT_PRIO_FRONT, FontColor, buf, 0);
; 156  : #endif
; 157  : #ifdef _NB_SHOW_MAPNAME
; 158  : 			char mapname[128];
; 159  : #ifdef _NB_ÁÆ°ÁêÜÊ®°Âºè
; 160  : 			sprintf(mapname, "[%s]Îèô:%d ÎÇ®:%d", nowFloorName , nowGx, nowGy);

  000dc	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  000e2	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _mapname$2[ebp]
  000e8	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  000ee	68 00 00 00 00	 push	 OFFSET ?nowFloorName@@3PADA ; nowFloorName
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LIGBPIEE@?$FL?$CFs?$FN?$LF?$LP?3?$CFd?5?$LD?$LC?3?$CFd@
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _sprintf

; 161  : 			StockFontBuffer(Â±èÂπïX / 2 - 130, Â±èÂπïY - 20, FONT_PRIO_FRONT, 4, mapname, 0);

  000fe	6a 00		 push	 0
  00100	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _mapname$2[ebp]
  00106	50		 push	 eax
  00107	6a 04		 push	 4
  00109	6a 01		 push	 1
  0010b	56		 push	 esi
  0010c	57		 push	 edi
  0010d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 162  : 			//sprintf(mapname, "[%s(%d)]Îèô:%d ÎÇ®:%d Mouse:%d.%d", nowFloorName, nowFloor, nowGx, nowGy, mouse.nowPoint.x, mouse.nowPoint.y);
; 163  : 			//StockFontBuffer(Â±èÂπïX / 2 - 130, Â±èÂπïY - 20, FONT_PRIO_FRONT, 4, mapname, 0);
; 164  : #else
; 165  : 			sprintf(mapname, "[%s(%d)]Îèô:%d ÎÇ®:%d", nowFloorName, nowFloor, nowGx, nowGy);
; 166  : 			StockFontBuffer(Â±èÂπïX / 2 - 150, Â±èÂπïY - 20, FONT_PRIO_FRONT, 4, mapname, 0);
; 167  : #endif
; 168  : #endif
; 169  : 			lpstr = "ÏàòÎèôÎ™®Îìú";
; 170  : 			switch (AI) {

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AI@@3HA	; AI
  00117	83 c4 44	 add	 esp, 68			; 00000044H
  0011a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08FBDOGKJC@?$LM?v?$LF?$LP?$LI?p?$LF?e@
  0011f	83 e8 01	 sub	 eax, 1
  00122	74 18		 je	 SHORT $LN10@ImeProc
  00124	83 e8 01	 sub	 eax, 1
  00127	74 0c		 je	 SHORT $LN11@ImeProc
  00129	83 e8 01	 sub	 eax, 1
  0012c	75 13		 jne	 SHORT $LN2@ImeProc

; 177  : 			case AI_SELECT:
; 178  : 				lpstr = "Ôº°Ôº©Î™®Îìú";

  0012e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08HEDKPKHO@?$KD?A?$KD?I?$LI?p?$LF?e@
  00133	eb 0c		 jmp	 SHORT $LN2@ImeProc
$LN11@ImeProc:

; 173  : 				break;
; 174  : 			case AI_GUARD:
; 175  : 				lpstr = "ÌïÑÏàòÎ∞©Ïñ¥";

  00135	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08OLNGHIAG@?G?J?$LM?v?$LJ?f?$LO?n@

; 176  : 				break;

  0013a	eb 05		 jmp	 SHORT $LN2@ImeProc
$LN10@ImeProc:

; 171  : 			case AI_ATTACK:
; 172  : 				lpstr = "Í∞ïÏ†úÍ≥µÍ≤©";

  0013c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08GHCIMMED@?$LA?$KN?A?$KG?$LA?x?$LA?$NN@
$LN2@ImeProc:

; 179  : 				break;
; 180  : 			}
; 181  : 			StockFontBuffer(540 + DISPLACEMENT_X, 460 + DISPLACEMENT_Y, FONT_PRIO_FRONT, FontColor, lpstr, 0);

  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00146	6a 00		 push	 0
  00148	51		 push	 ecx
  00149	6a 00		 push	 0
  0014b	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  00150	6a 01		 push	 1
  00152	50		 push	 eax
  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_X@@3HA ; DISPLACEMENT_X
  00158	05 1c 02 00 00	 add	 eax, 540		; 0000021cH
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00163	83 c4 18	 add	 esp, 24			; 00000018H
$LN15@ImeProc:

; 182  : 		}
; 183  : 	}
; 184  : 	// Terry add 2003/12/16 for ‰∫§ÊòìËßÜÁ™óÂºÄÂêØÊó∂,ÊòæÁ§∫Áâ©ÂìÅËØ¥Êòé‰∏çÊòæÁ§∫ËæìÂÖ•Ê≥ï
; 185  : 	bShowItemExplain = FALSE;
; 186  : 	// end
; 187  : }

  00166	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00169	5f		 pop	 edi
  0016a	33 cd		 xor	 ecx, ebp
  0016c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bShowItemExplain@@3HA, 0 ; bShowItemExplain
  00176	5e		 pop	 esi
  00177	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
?ImeProc@@YAXXZ ENDP					; ImeProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\ime.cpp
;	COMDAT ?NewShowBottomLineString@@YAXHPAD@Z
_TEXT	SEGMENT
_iColor$ = 8						; size = 4
_lpstr$ = 12						; size = 4
?NewShowBottomLineString@@YAXHPAD@Z PROC		; NewShowBottomLineString, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	int Â±èÂπïX, Â±èÂπïY;
; 56   : 	int ÊòæÁ§∫X, ÊòæÁ§∫Y;
; 57   : 	if (ResoMode == ÂàÜËæ®Áéá::mode800) {

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	83 f8 03	 cmp	 eax, 3
  0000d	75 0a		 jne	 SHORT $LN2@NewShowBot

; 58   : 		Â±èÂπïX = 800 / 2;

  0000f	be 90 01 00 00	 mov	 esi, 400		; 00000190H

; 59   : 		Â±èÂπïY = 600 / 2;

  00014	8d 7e 9c	 lea	 edi, DWORD PTR [esi-100]

; 60   : 	}

  00017	eb 17		 jmp	 SHORT $LN5@NewShowBot
$LN2@NewShowBot:

; 61   : 	else if (ResoMode == ÂàÜËæ®Áéá::mode1024) {

  00019	83 f8 04	 cmp	 eax, 4
  0001c	75 0a		 jne	 SHORT $LN4@NewShowBot

; 62   : 		Â±èÂπïX = 1024 / 2;

  0001e	be 00 02 00 00	 mov	 esi, 512		; 00000200H

; 63   : 		Â±èÂπïY = 768 / 2;

  00023	8d 7e 80	 lea	 edi, DWORD PTR [esi-128]

; 64   : 	}

  00026	eb 08		 jmp	 SHORT $LN5@NewShowBot
$LN4@NewShowBot:

; 65   : 	else {
; 66   : 		Â±èÂπïX = 640 / 2;

  00028	be 40 01 00 00	 mov	 esi, 320		; 00000140H

; 67   : 		Â±èÂπïY = 480 / 2;

  0002d	8d 7e b0	 lea	 edi, DWORD PTR [esi-80]
$LN5@NewShowBot:

; 68   : 	}
; 69   : 	LPSTR lpstr1 = GetImeString();

  00030	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString

; 70   : 	dwInfo = 0;

  00035	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwInfo@@3KA, 0 ; dwInfo

; 71   : 	if (!lpstr1 && lpstr[0] != 0) {

  0003f	85 c0		 test	 eax, eax
  00041	75 58		 jne	 SHORT $LN6@NewShowBot
  00043	53		 push	 ebx
  00044	8b 5d 0c	 mov	 ebx, DWORD PTR _lpstr$[ebp]
  00047	38 03		 cmp	 BYTE PTR [ebx], al
  00049	74 4f		 je	 SHORT $LN13@NewShowBot

; 72   : 		dwInfo = 1;
; 73   : 		if (mouse.nowPoint.x > Â±èÂπïX) {

  0004b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A
  00051	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?dwInfo@@3KA, 1 ; dwInfo
  0005b	3b d6		 cmp	 edx, esi
  0005d	7e 15		 jle	 SHORT $LN7@NewShowBot

; 74   : 			ÊòæÁ§∫X = mouse.nowPoint.x - 40 - strlen(lpstr);

  0005f	8b cb		 mov	 ecx, ebx
  00061	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL12@NewShowBot:
  00064	8a 01		 mov	 al, BYTE PTR [ecx]
  00066	41		 inc	 ecx
  00067	84 c0		 test	 al, al
  00069	75 f9		 jne	 SHORT $LL12@NewShowBot
  0006b	2b ce		 sub	 ecx, esi
  0006d	2b d1		 sub	 edx, ecx
  0006f	83 ea 28	 sub	 edx, 40			; 00000028H

; 75   : 		}

  00072	eb 03		 jmp	 SHORT $LN8@NewShowBot
$LN7@NewShowBot:

; 76   : 		else {
; 77   : 			ÊòæÁ§∫X = mouse.nowPoint.x + 40;

  00074	83 c2 28	 add	 edx, 40			; 00000028H
$LN8@NewShowBot:

; 78   : 		}
; 79   : 		if (mouse.nowPoint.y > Â±èÂπïY) {

  00077	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  0007c	3b c7		 cmp	 eax, edi
  0007e	7e 05		 jle	 SHORT $LN9@NewShowBot

; 80   : 			ÊòæÁ§∫Y = mouse.nowPoint.y - 40;

  00080	83 c0 d8	 add	 eax, -40		; ffffffd8H

; 81   : 		}

  00083	eb 03		 jmp	 SHORT $LN10@NewShowBot
$LN9@NewShowBot:

; 82   : 		else {
; 83   : 			ÊòæÁ§∫Y = mouse.nowPoint.y + 40;

  00085	83 c0 28	 add	 eax, 40			; 00000028H
$LN10@NewShowBot:

; 84   : 		}
; 85   : 		StockFontBuffer(ÊòæÁ§∫X, ÊòæÁ§∫Y, FONT_PRIO_FRONT, iColor, lpstr, 0);

  00088	6a 00		 push	 0
  0008a	53		 push	 ebx
  0008b	ff 75 08	 push	 DWORD PTR _iColor$[ebp]
  0008e	6a 01		 push	 1
  00090	50		 push	 eax
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00097	83 c4 18	 add	 esp, 24			; 00000018H
$LN13@NewShowBot:
  0009a	5b		 pop	 ebx
$LN6@NewShowBot:
  0009b	5f		 pop	 edi

; 86   : 	}
; 87   : }

  0009c	5e		 pop	 esi
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
?NewShowBottomLineString@@YAXHPAD@Z ENDP		; NewShowBottomLineString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\ime.cpp
;	COMDAT ?strstr3@@YAHPAD0@Z
_TEXT	SEGMENT
_num$1$ = -4						; size = 4
_str$ = 8						; size = 4
_strSearch$ = 12					; size = 4
?strstr3@@YAHPAD0@Z PROC				; strstr3, COMDAT

; 28   : int strstr3(char* str, char* strSearch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 29   : 	char* strTemp;
; 30   : 	char* strSearchTemp;
; 31   : 	int num = 0;
; 32   : 	while (*str != '\0') {

  00006	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	89 55 fc	 mov	 DWORD PTR _num$1$[ebp], edx
  0000e	8a 1e		 mov	 bl, BYTE PTR [esi]
  00010	84 db		 test	 bl, bl
  00012	74 50		 je	 SHORT $LN17@strstr3
  00014	57		 push	 edi
  00015	8b 7d 0c	 mov	 edi, DWORD PTR _strSearch$[ebp]
  00018	8a 3f		 mov	 bh, BYTE PTR [edi]
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@strstr3:

; 33   : 		strTemp = str;
; 34   : 		strSearchTemp = strSearch;

  00020	8b c7		 mov	 eax, edi

; 35   : 		while ((*strTemp == *strSearchTemp) && (*strTemp != '\0') && (*strSearchTemp != '\0')) {

  00022	3a df		 cmp	 bl, bh
  00024	75 1f		 jne	 SHORT $LN5@strstr3
  00026	8b d6		 mov	 edx, esi
  00028	8a cb		 mov	 cl, bl
  0002a	2b d7		 sub	 edx, edi
  0002c	0f 1f 40 00	 npad	 4
$LL4@strstr3:
  00030	84 c9		 test	 cl, cl
  00032	74 0e		 je	 SHORT $LN18@strstr3
  00034	80 38 00	 cmp	 BYTE PTR [eax], 0
  00037	74 09		 je	 SHORT $LN18@strstr3
  00039	8a 4c 02 01	 mov	 cl, BYTE PTR [edx+eax+1]

; 36   : 			strTemp++;
; 37   : 			strSearchTemp++;

  0003d	40		 inc	 eax
  0003e	3a 08		 cmp	 cl, BYTE PTR [eax]
  00040	74 ee		 je	 SHORT $LL4@strstr3
$LN18@strstr3:
  00042	8b 55 fc	 mov	 edx, DWORD PTR _num$1$[ebp]
$LN5@strstr3:

; 38   : 		}
; 39   : 		if (*strSearchTemp == '\0') {
; 40   : 			num++;
; 41   : 		}
; 42   : 		unsigned char code = *str;
; 43   : 		//Âà§Êñ≠ÊòØÂê¶‰∏∫‰∏≠ÊñáÔºåÊòØÂàôÂú∞ÂùÄÂä†2ÔºåÂê¶ÂàôÂä†1
; 44   : 		if (code >= 0x80)

  00045	80 38 00	 cmp	 BYTE PTR [eax], 0
  00048	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0004b	0f 45 ca	 cmovne	 ecx, edx
  0004e	80 fb 80	 cmp	 bl, 128			; 00000080H
  00051	8b d1		 mov	 edx, ecx
  00053	1b c0		 sbb	 eax, eax
  00055	89 55 fc	 mov	 DWORD PTR _num$1$[ebp], edx
  00058	83 c0 02	 add	 eax, 2
  0005b	03 f0		 add	 esi, eax
  0005d	8a 1e		 mov	 bl, BYTE PTR [esi]
  0005f	84 db		 test	 bl, bl
  00061	75 bd		 jne	 SHORT $LL2@strstr3

; 45   : 			str += 2;
; 46   : 		else
; 47   : 			str++;
; 48   : 	}
; 49   : 	return num;

  00063	5f		 pop	 edi
$LN17@strstr3:
  00064	5e		 pop	 esi

; 50   : }

  00065	8b c2		 mov	 eax, edx
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?strstr3@@YAHPAD0@Z ENDP				; strstr3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\ime.cpp
;	COMDAT ?ShowBottomLineString@@YAXHPAD@Z
_TEXT	SEGMENT
_iColor$ = 8						; size = 4
_lpstr$ = 12						; size = 4
?ShowBottomLineString@@YAXHPAD@Z PROC			; ShowBottomLineString, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	LPSTR lpstr1 = GetImeString();

  00003	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString

; 21   : 	dwInfo = 0;

  00008	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwInfo@@3KA, 0 ; dwInfo

; 22   : 	if (!lpstr1 && lpstr[0] != 0) {

  00012	85 c0		 test	 eax, eax
  00014	75 2f		 jne	 SHORT $LN2@ShowBottom
  00016	8b 45 0c	 mov	 eax, DWORD PTR _lpstr$[ebp]
  00019	80 38 00	 cmp	 BYTE PTR [eax], 0
  0001c	74 27		 je	 SHORT $LN2@ShowBottom

; 23   : 		dwInfo = 1;
; 24   : 		StockFontBuffer(8, 460 + DISPLACEMENT_Y, FONT_PRIO_FRONT, iColor, lpstr, 0);

  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	ff 75 08	 push	 DWORD PTR _iColor$[ebp]
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00029	6a 01		 push	 1
  0002b	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  00030	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?dwInfo@@3KA, 1 ; dwInfo
  0003a	50		 push	 eax
  0003b	6a 08		 push	 8
  0003d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00042	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@ShowBottom:

; 25   : 	}
; 26   : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?ShowBottomLineString@@YAXHPAD@Z ENDP			; ShowBottomLineString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
