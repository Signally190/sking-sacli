; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?StoneageNg@@3PAUHINSTANCE__@@A			; StoneageNg
PUBLIC	?PcLanded@@3ULanded@@A				; PcLanded
PUBLIC	?„¿‹˙ÒÏ‘Ù@@3HA					; „¿‹˙ÒÏ‘Ù
PUBLIC	?„¿‹˙ÒÏ‘Ù?‘‡÷ı@@3HA				; „¿‹˙ÒÏ‘Ù?‘‡÷ı
PUBLIC	?„¿‹˙ÒÏ‘ÙAIŸº„“@@3HA				; „¿‹˙ÒÏ‘ÙAIŸº„“
PUBLIC	?„¿‹˙ÒÏ‘Ù??@@3HA				; „¿‹˙ÒÏ‘Ù??
PUBLIC	?„¿‹˙ÒÏ‘Ù˘‚?@@3HA				; „¿‹˙ÒÏ‘Ù˘‚?
PUBLIC	?„¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ@@3HA				; „¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ
PUBLIC	?„¿‹˙ÒÏ?‘Ù??@@3HA				; „¿‹˙ÒÏ?‘Ù??
PUBLIC	?Ìª?‘Ù?„¿‹˙??@@3HA				; Ìª?‘Ù?„¿‹˙??
PUBLIC	?hInst@@3PAUHINSTANCE__@@A			; hInst
PUBLIC	?hCheckMutex@@3PAXA				; hCheckMutex
PUBLIC	?NoDelay@@3HA					; NoDelay
PUBLIC	?g_clientRect@@3UtagRECT@@A			; g_clientRect
PUBLIC	?g_clientPoint@@3UtagPOINT@@A			; g_clientPoint
PUBLIC	?g_moveRect@@3UtagRECT@@A			; g_moveRect
PUBLIC	?g_iMallocCount@@3HA				; g_iMallocCount
PUBLIC	?wndclass@@3UtagWNDCLASSA@@A			; wndclass
PUBLIC	?hProcessSnap@@3PAXA				; hProcessSnap
PUBLIC	?hParentProcess@@3PAXA				; hParentProcess
PUBLIC	?dwPID@@3KA					; dwPID
PUBLIC	?pe32@@3UtagPROCESSENTRY32@@A			; pe32
PUBLIC	?hWnd@@3PAUHWND__@@A				; hWnd
PUBLIC	?WindowMode@@3HA				; WindowMode
PUBLIC	?LowResoCmdFlag@@3HA				; LowResoCmdFlag
PUBLIC	?CmdShow@@3HA					; CmdShow
PUBLIC	?CmdLine@@3PADA					; CmdLine
PUBLIC	?hMutex@@3PAXA					; hMutex
PUBLIC	?realBinName@@3PADA				; realBinName
PUBLIC	?adrnBinName@@3PADA				; adrnBinName
PUBLIC	?sprBinName@@3PADA				; sprBinName
PUBLIC	?sprAdrnBinName@@3PADA				; sprAdrnBinName
PUBLIC	?offlineFlag@@3HA				; offlineFlag
PUBLIC	?DebugKey0@@3PADA				; DebugKey0
PUBLIC	?DebugKey1@@3PADA				; DebugKey1
PUBLIC	?DebugKey2@@3PADA				; DebugKey2
_BSS	SEGMENT
?StoneageNg@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; StoneageNg
?PcLanded@@3ULanded@@A DB 0a0H DUP (?)			; PcLanded
?„¿‹˙ÒÏ‘Ù@@3HA DD 01H DUP (?)				; „¿‹˙ÒÏ‘Ù
?„¿‹˙ÒÏ‘Ù?‘‡÷ı@@3HA DD 01H DUP (?)			; „¿‹˙ÒÏ‘Ù?‘‡÷ı
?„¿‹˙ÒÏ‘ÙAIŸº„“@@3HA DD 01H DUP (?)			; „¿‹˙ÒÏ‘ÙAIŸº„“
?„¿‹˙ÒÏ‘Ù??@@3HA DD 01H DUP (?)				; „¿‹˙ÒÏ‘Ù??
?„¿‹˙ÒÏ‘Ù˘‚?@@3HA DD 01H DUP (?)			; „¿‹˙ÒÏ‘Ù˘‚?
?„¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ@@3HA DD 01H DUP (?)			; „¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ
?„¿‹˙ÒÏ?‘Ù??@@3HA DD 01H DUP (?)			; „¿‹˙ÒÏ?‘Ù??
?Ìª?‘Ù?„¿‹˙??@@3HA DD 01H DUP (?)			; Ìª?‘Ù?„¿‹˙??
?hInst@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; hInst
?hCheckMutex@@3PAXA DD 01H DUP (?)			; hCheckMutex
?g_clientRect@@3UtagRECT@@A DB 010H DUP (?)		; g_clientRect
	ALIGN	8

?g_clientPoint@@3UtagPOINT@@A DQ 01H DUP (?)		; g_clientPoint
?g_moveRect@@3UtagRECT@@A DB 010H DUP (?)		; g_moveRect
?g_iMallocCount@@3HA DD 01H DUP (?)			; g_iMallocCount
?wndclass@@3UtagWNDCLASSA@@A DB 028H DUP (?)		; wndclass
?hProcessSnap@@3PAXA DD 01H DUP (?)			; hProcessSnap
?hParentProcess@@3PAXA DD 01H DUP (?)			; hParentProcess
?dwPID@@3KA DD	01H DUP (?)				; dwPID
?pe32@@3UtagPROCESSENTRY32@@A DB 0128H DUP (?)		; pe32
?hWnd@@3PAUHWND__@@A DD 01H DUP (?)			; hWnd
?WindowMode@@3HA DD 01H DUP (?)				; WindowMode
?LowResoCmdFlag@@3HA DD 01H DUP (?)			; LowResoCmdFlag
?CmdShow@@3HA DD 01H DUP (?)				; CmdShow
?CmdLine@@3PADA DD 01H DUP (?)				; CmdLine
?hMutex@@3PAXA DD 01H DUP (?)				; hMutex
?realBinName@@3PADA DB 0100H DUP (?)			; realBinName
?adrnBinName@@3PADA DB 0100H DUP (?)			; adrnBinName
?sprBinName@@3PADA DB 0100H DUP (?)			; sprBinName
?sprAdrnBinName@@3PADA DB 0100H DUP (?)			; sprAdrnBinName
?offlineFlag@@3HA DD 01H DUP (?)			; offlineFlag
?DebugKey0@@3PADA DB 0100H DUP (?)			; DebugKey0
?DebugKey1@@3PADA DB 0100H DUP (?)			; DebugKey1
?DebugKey2@@3PADA DB 0100H DUP (?)			; DebugKey2
_BSS	ENDS
_DATA	SEGMENT
?NoDelay@@3HA DD 01H					; NoDelay
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?WindMsgProc@@YGJPAUHWND__@@IIJ@Z		; WindMsgProc
PUBLIC	?SystemTask@@YAHXZ				; SystemTask
PUBLIC	?AnalyzeCmdLine@@YAXXZ				; AnalyzeCmdLine
PUBLIC	?ChangeWindowMode@@YAXXZ			; ChangeWindowMode
PUBLIC	?SetResoMode@@YAXH@Z				; SetResoMode
PUBLIC	?MessageBoxNew@@YAHPAUHWND__@@PBD1I@Z		; MessageBoxNew
PUBLIC	?CreateCompatibleDEVMODE@@YAXPAU_devicemodeA@@KKKK@Z ; CreateCompatibleDEVMODE
PUBLIC	?RecoverDirectDraw@@YAXXZ			; RecoverDirectDraw
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0P@FDFFMAOB@CheckForUpdate@		; `string'
PUBLIC	??_C@_0BB@NLNMPB@?$KD?S?$KD?t?$KD?o?$KD?n?$KD?e?$KD?A?$KD?g?$KD?e@ ; `string'
PUBLIC	??_C@_04IJNKKJEO@?H?$KO?$MA?N@			; `string'
PUBLIC	??_C@_0CK@MPCLFILL@?t?x?c?$LH?$PL?y?$DP?$DP?c?w?$DP?$KD?$KB?6?$KD?$KM?$DP?$DP?z?$LM?q?l?c?f?d?L?$DP?$PL?d?$PN?g@ ; `string'
PUBLIC	??_C@_0O@DKGBMFPD@data?2real?4bin@		; `string'
PUBLIC	??_C@_0O@HIHIJMIB@data?2adrn?4bin@		; `string'
PUBLIC	??_C@_0N@LCHFCHHG@data?2spr?4bin@		; `string'
PUBLIC	??_C@_0BB@PFEKOFDI@data?2spradrn?4bin@		; `string'
PUBLIC	??_C@_08MPGDICFK@realbin?3@			; `string'
PUBLIC	??_C@_0BB@BDNGKHBG@data?2real_?$CFd?4bin@	; `string'
PUBLIC	??_C@_08INHKNLCI@adrnbin?3@			; `string'
PUBLIC	??_C@_0BB@ELLBFFLH@data?2adrn_?$CFd?4bin@	; `string'
PUBLIC	??_C@_07NALMGOPD@sprbin?3@			; `string'
PUBLIC	??_C@_0BA@ICLKDLOG@data?2spr_?$CFd?4bin@	; `string'
PUBLIC	??_C@_0M@EPOMFNLL@spradrnbin?3@			; `string'
PUBLIC	??_C@_0BE@LHBEADJK@data?2spradrn_?$CFd?4bin@	; `string'
PUBLIC	??_C@_07CGONDAHB@nodelay@			; `string'
PUBLIC	??_C@_0BD@HCDANIG@Direct?5?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BA@LIOBMBPJ@?$NP?d?$DP?5?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BH@OHJJEBKC@SurfaceBusyFlag?5error?$CB@	; `string'
PUBLIC	??_C@_0CA@DDNACEOP@HeapAlloc?5Error?5?$CI?5DIRECT_DRAW?5?$CJ@ ; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	_strstr:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	__imp__ReleaseMutex@4:PROC
EXTRN	__imp__CreateMutexA@12:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__SetTimer@16:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__AdjustWindowRectEx@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	__imp__ClientToScreen@8:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	__imp__OffsetRect@12:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	__imp__ChangeDisplaySettingsA@8:PROC
EXTRN	__imp__LCMapStringA@24:PROC
EXTRN	_exit:PROC
EXTRN	_atoi:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?InitOffScreenSurface@@YAHXZ:PROC		; InitOffScreenSurface
EXTRN	?InitDirectDraw@@YAHXZ:PROC			; InitDirectDraw
EXTRN	?InitPalette@@YAHXZ:PROC			; InitPalette
EXTRN	?ClearBackSurface@@YAXXZ:PROC			; ClearBackSurface
EXTRN	?CheckSurfaceLost@@YAHXZ:PROC			; CheckSurfaceLost
EXTRN	?ReleaseDirectDraw@@YAXXZ:PROC			; ReleaseDirectDraw
EXTRN	?GameMain@@YAHXZ:PROC				; GameMain
EXTRN	?repairMap@@YAXXZ:PROC				; repairMap
EXTRN	?JL_GetAddress@@YAHH@Z:PROC			; JL_GetAddress
EXTRN	?JL_SetAddr@@YAXHH@Z:PROC			; JL_SetAddr
EXTRN	?PutBmp@@YAXXZ:PROC				; PutBmp
EXTRN	?StockStrBufferChar@@YAXD@Z:PROC		; StockStrBufferChar
EXTRN	?ClearChatBuffer@@YAXXZ:PROC			; ClearChatBuffer
EXTRN	?KeyboardLeft@@YAXXZ:PROC			; KeyboardLeft
EXTRN	?KeyboardRight@@YAXXZ:PROC			; KeyboardRight
EXTRN	?KeyboardReturn@@YAXXZ:PROC			; KeyboardReturn
EXTRN	?KeyboardBackSpace@@YAXXZ:PROC			; KeyboardBackSpace
EXTRN	?MouseNowPoint@@YAXHH@Z:PROC			; MouseNowPoint
EXTRN	?MouseCrickLeftDownPoint@@YAXHH@Z:PROC		; MouseCrickLeftDownPoint
EXTRN	?MouseCrickLeftUpPoint@@YAXHH@Z:PROC		; MouseCrickLeftUpPoint
EXTRN	?MouseCrickRightDownPoint@@YAXHH@Z:PROC		; MouseCrickRightDownPoint
EXTRN	?MouseCrickRightUpPoint@@YAXHH@Z:PROC		; MouseCrickRightUpPoint
EXTRN	?MouseDblCrickLeftUpPoint@@YAXHH@Z:PROC		; MouseDblCrickLeftUpPoint
EXTRN	?MouseDblCrickRightUpPoint@@YAXHH@Z:PROC	; MouseDblCrickRightUpPoint
EXTRN	_CreateToolhelp32Snapshot@8:PROC
EXTRN	_Process32First@8:PROC
EXTRN	_Process32Next@8:PROC
EXTRN	?ChangeMode@@YAXH@Z:PROC			; ChangeMode
EXTRN	?ImeMessage@@YAHIIJ@Z:PROC			; ImeMessage
EXTRN	?ReadBattleMap@@YAHH@Z:PROC			; ReadBattleMap
EXTRN	?GB2312ToBIG5@@YAPADPBD@Z:PROC			; GB2312ToBIG5
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?SurfaceSizeX@@3HA:DWORD			; SurfaceSizeX
EXTRN	?SurfaceSizeY@@3HA:DWORD			; SurfaceSizeY
EXTRN	?Palette@@3PAUtagPALETTEENTRY@@A:BYTE		; Palette
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?BackBufferDrawType@@3HA:DWORD			; BackBufferDrawType
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?NowTime@@3KA:DWORD				; NowTime
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?DispBuffer@@3UDISP_BUFFER@@A:BYTE		; DispBuffer
EXTRN	?SurfaceBusyFlag@@3HA:DWORD			; SurfaceBusyFlag
EXTRN	?joy_con@@3PAKA:QWORD				; joy_con
EXTRN	?di_key@@3PAEA:BYTE				; di_key
EXTRN	?pDInputDevice@@3PAUIDirectInputDeviceA@@A:DWORD ; pDInputDevice
EXTRN	?pDInputDevice2@@3PAUIDirectInputDevice2A@@A:DWORD ; pDInputDevice2
EXTRN	?joy_flg@@3DA:BYTE				; joy_flg
EXTRN	?keyboad_flg@@3DA:BYTE				; keyboad_flg
EXTRN	?DInputActiveFlag@@3HA:DWORD			; DInputActiveFlag
EXTRN	?pNowStrBuffer@@3PAUSTR_BUFFER@@A:DWORD		; pNowStrBuffer
EXTRN	?FontCnt@@3HA:DWORD				; FontCnt
EXTRN	?mouse@@3UMOUSE@@A:BYTE				; mouse
EXTRN	?BattleMapNo@@3HA:DWORD				; BattleMapNo
EXTRN	?fastDrawTile@@3FB:WORD				; fastDrawTile
EXTRN	?fastDrawTileFlag@@3FA:WORD			; fastDrawTileFlag
EXTRN	???@@3HA:DWORD					; ??
EXTRN	?displayBpp@@3HA:DWORD				; displayBpp
EXTRN	?g_WgRecvHwnd@@3HA:DWORD			; g_WgRecvHwnd
EXTRN	?g_playerAddr@@3HA:DWORD			; g_playerAddr
EXTRN	?g_WgRecvHwnd@@3HA:DWORD			; g_WgRecvHwnd
EXTRN	?g_playerAddr@@3HA:DWORD			; g_playerAddr
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0CA@DDNACEOP@HeapAlloc?5Error?5?$CI?5DIRECT_DRAW?5?$CJ@
CONST	SEGMENT
??_C@_0CA@DDNACEOP@HeapAlloc?5Error?5?$CI?5DIRECT_DRAW?5?$CJ@ DB 'HeapAll'
	DB	'oc Error ( DIRECT_DRAW )', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OHJJEBKC@SurfaceBusyFlag?5error?$CB@
CONST	SEGMENT
??_C@_0BH@OHJJEBKC@SurfaceBusyFlag?5error?$CB@ DB 'SurfaceBusyFlag error!'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIOBMBPJ@?$NP?d?$DP?5?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@
CONST	SEGMENT
??_C@_0BA@LIOBMBPJ@?$NP?d?$DP?5?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@ DB 0dfH, 0e4H
	DB	'? ', 0f4H, 0f8H, 0e3H, 0b7H, 0fbH, 0f9H, 0e3H, 0f7H, '?', 0a3H
	DB	0a1H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HCDANIG@Direct?5?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@
CONST	SEGMENT
??_C@_0BD@HCDANIG@Direct?5?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@ DB 'Direct ', 0f4H
	DB	0f8H, 0e3H, 0b7H, 0fbH, 0f9H, 0e3H, 0f7H, '?', 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGONDAHB@nodelay@
CONST	SEGMENT
??_C@_07CGONDAHB@nodelay@ DB 'nodelay', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LHBEADJK@data?2spradrn_?$CFd?4bin@
CONST	SEGMENT
??_C@_0BE@LHBEADJK@data?2spradrn_?$CFd?4bin@ DB 'data\spradrn_%d.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EPOMFNLL@spradrnbin?3@
CONST	SEGMENT
??_C@_0M@EPOMFNLL@spradrnbin?3@ DB 'spradrnbin:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICLKDLOG@data?2spr_?$CFd?4bin@
CONST	SEGMENT
??_C@_0BA@ICLKDLOG@data?2spr_?$CFd?4bin@ DB 'data\spr_%d.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NALMGOPD@sprbin?3@
CONST	SEGMENT
??_C@_07NALMGOPD@sprbin?3@ DB 'sprbin:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ELLBFFLH@data?2adrn_?$CFd?4bin@
CONST	SEGMENT
??_C@_0BB@ELLBFFLH@data?2adrn_?$CFd?4bin@ DB 'data\adrn_%d.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08INHKNLCI@adrnbin?3@
CONST	SEGMENT
??_C@_08INHKNLCI@adrnbin?3@ DB 'adrnbin:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BDNGKHBG@data?2real_?$CFd?4bin@
CONST	SEGMENT
??_C@_0BB@BDNGKHBG@data?2real_?$CFd?4bin@ DB 'data\real_%d.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MPGDICFK@realbin?3@
CONST	SEGMENT
??_C@_08MPGDICFK@realbin?3@ DB 'realbin:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PFEKOFDI@data?2spradrn?4bin@
CONST	SEGMENT
??_C@_0BB@PFEKOFDI@data?2spradrn?4bin@ DB 'data\spradrn.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LCHFCHHG@data?2spr?4bin@
CONST	SEGMENT
??_C@_0N@LCHFCHHG@data?2spr?4bin@ DB 'data\spr.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HIHIJMIB@data?2adrn?4bin@
CONST	SEGMENT
??_C@_0O@HIHIJMIB@data?2adrn?4bin@ DB 'data\adrn.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DKGBMFPD@data?2real?4bin@
CONST	SEGMENT
??_C@_0O@DKGBMFPD@data?2real?4bin@ DB 'data\real.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MPCLFILL@?t?x?c?$LH?$PL?y?$DP?$DP?c?w?$DP?$KD?$KB?6?$KD?$KM?$DP?$DP?z?$LM?q?l?c?f?d?L?$DP?$PL?d?$PN?g@
CONST	SEGMENT
??_C@_0CK@MPCLFILL@?t?x?c?$LH?$PL?y?$DP?$DP?c?w?$DP?$KD?$KB?6?$KD?$KM?$DP?$DP?z?$LM?q?l?c?f?d?L?$DP?$PL?d?$PN?g@ DB 0f4H
	DB	0f8H, 0e3H, 0b7H, 0fbH, 0f9H, '??', 0e3H, 0f7H, '?', 0a3H, 0a1H
	DB	0aH, 0a3H, 0acH, '??', 0faH, 0bcH, 0f1H, 0ecH, 0e3H, 0e6H, 0e4H
	DB	0ccH, '?', 0fbH, 0e4H, 0fdH, 0e7H, '?', 0cbH, 0d4H, 0dcH, 0d7H
	DB	0ecH, 0d1H, '?', 0a3H, 0a1H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
CONST	SEGMENT
??_C@_04IJNKKJEO@?H?$KO?$MA?N@ DB 0c8H, 0aeH, 0c0H, 0ceH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NLNMPB@?$KD?S?$KD?t?$KD?o?$KD?n?$KD?e?$KD?A?$KD?g?$KD?e@
CONST	SEGMENT
??_C@_0BB@NLNMPB@?$KD?S?$KD?t?$KD?o?$KD?n?$KD?e?$KD?A?$KD?g?$KD?e@ DB 0a3H
	DB	0d3H, 0a3H, 0f4H, 0a3H, 0efH, 0a3H, 0eeH, 0a3H, 0e5H, 0a3H, 0c1H
	DB	0a3H, 0e7H, 0a3H, 0e5H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FDFFMAOB@CheckForUpdate@
CONST	SEGMENT
??_C@_0P@FDFFMAOB@CheckForUpdate@ DB 'CheckForUpdate', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT ?RecoverDirectDraw@@YAXXZ
_TEXT	SEGMENT
?RecoverDirectDraw@@YAXXZ PROC				; RecoverDirectDraw, COMDAT

; 540  : 	// DirectDraw ?Óü¥
; 541  : 	ReleaseDirectDraw();

  00000	e8 00 00 00 00	 call	 ?ReleaseDirectDraw@@YAXXZ ; ReleaseDirectDraw

; 542  : 	// ??Óôö???ÓìÜÓòã
; 543  : 	SetResoMode( ResoMode );

  00005	ff 35 00 00 00
	00		 push	 DWORD PTR ?ResoMode@@3HA ; ResoMode
  0000b	e8 00 00 00 00	 call	 ?SetResoMode@@YAXH@Z	; SetResoMode
  00010	83 c4 04	 add	 esp, 4

; 544  : 	// DirectDraw ???
; 545  : 	if( InitDirectDraw() == FALSE ){

  00013	e8 00 00 00 00	 call	 ?InitDirectDraw@@YAHXZ	; InitDirectDraw
  00018	85 c0		 test	 eax, eax
  0001a	75 2a		 jne	 SHORT $LN2@RecoverDir

; 546  : 		MessageBox( hWnd, "Direct ÂàùÂßãÂåñÂ§±Ë¥•ÔºÅ", "ÌôïÏù∏", MB_OK | MB_ICONSTOP );

  0001c	6a 10		 push	 16			; 00000010H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HCDANIG@Direct?5?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@
  00028	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 547  : 		// ???????? WM_CLOSE ??????????
; 548  : 		PostMessage( hWnd, WM_CLOSE, 0, 0L );

  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 10		 push	 16			; 00000010H
  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$LN2@RecoverDir:

; 549  : 	}
; 550  : 	// ????????ÓìÅ?Óïú?
; 551  : 	//ChangeWindowMode();
; 552  : 	// ??????????????Óíï 
; 553  : 	InitOffScreenSurface();

  00046	e8 00 00 00 00	 call	 ?InitOffScreenSurface@@YAHXZ ; InitOffScreenSurface

; 554  : 	// ???????
; 555  : 	if( InitPalette() == FALSE ){

  0004b	e8 00 00 00 00	 call	 ?InitPalette@@YAHXZ	; InitPalette
  00050	85 c0		 test	 eax, eax
  00052	75 2a		 jne	 SHORT $LN3@RecoverDir

; 556  : 		MessageBox( hWnd, "Ëâ≤Áõò ÂàùÂßãÂåñÂ§±Ë¥•ÔºÅ", "ÌôïÏù∏", MB_OK | MB_ICONSTOP );

  00054	6a 10		 push	 16			; 00000010H
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LIOBMBPJ@?$NP?d?$DP?5?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@
  00060	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 557  : 		PostMessage( hWnd, WM_CLOSE, 0, 0L );

  0006c	6a 00		 push	 0
  0006e	6a 00		 push	 0
  00070	6a 10		 push	 16			; 00000010H
  00072	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$LN3@RecoverDir:

; 558  : 	}
; 559  : 	// ??????Óöá????????????????Óíï
; 560  : 	if( ProcNo == PROC_BATTLE ){ 

  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ProcNo@@3IA ; ProcNo
  00083	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00086	75 51		 jne	 SHORT $LN4@RecoverDir

; 561  : 		// ???????
; 562  : 		DispBuffer.DispCnt = 0;
; 563  : 		FontCnt = 0;
; 564  : 		ReadBattleMap( BattleMapNo );

  00088	ff 35 00 00 00
	00		 push	 DWORD PTR ?BattleMapNo@@3HA ; BattleMapNo
  0008e	33 c0		 xor	 eax, eax
  00090	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax
  00096	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt
  0009b	e8 00 00 00 00	 call	 ?ReadBattleMap@@YAHH@Z	; ReadBattleMap
  000a0	83 c4 04	 add	 esp, 4

; 565  : 		// ???????????????
; 566  : 		ClearBackSurface();	

  000a3	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 567  : 		// ????????????????
; 568  : #ifdef __SKYISLAND
; 569  : 		fastDrawTileFlag = 0;

  000a8	33 c0		 xor	 eax, eax
  000aa	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 570  : 		PutBmp();

  000b0	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 571  : 		fastDrawTileFlag = 1;

  000b5	b8 01 00 00 00	 mov	 eax, 1
  000ba	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 572  : #else
; 573  : 		PutBmp();	
; 574  : 		// ??????????????????????
; 575  : 		lpBattleSurface->BltFast( 0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT );
; 576  : #endif
; 577  : 		// ???????
; 578  : 		DispBuffer.DispCnt = 0;

  000c0	33 c0		 xor	 eax, eax
  000c2	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 579  : 		FontCnt = 0;

  000c8	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 580  : 		// ????????
; 581  : 		NowTime = TimeGetTime();

  000cd	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000d2	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime

; 582  : 	}

  000d7	eb 14		 jmp	 SHORT $LN6@RecoverDir
$LN4@RecoverDir:

; 583  : 	else
; 584  : 	if( fastDrawTile && ProcNo == PROC_GAME )

  000d9	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?fastDrawTile@@3FB, 0 ; fastDrawTile
  000e1	74 0a		 je	 SHORT $LN6@RecoverDir
  000e3	83 f8 09	 cmp	 eax, 9
  000e6	75 05		 jne	 SHORT $LN6@RecoverDir

; 585  : 	{
; 586  : 		repairMap();	// ????Ó°°?Óé±?

  000e8	e8 00 00 00 00	 call	 ?repairMap@@YAXXZ	; repairMap
$LN6@RecoverDir:

; 587  : 	}
; 588  : 	// ??????????????
; 589  : 	if( lpDraw->lpPALETTE != NULL ){

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  000f2	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000f8	85 c9		 test	 ecx, ecx
  000fa	74 1d		 je	 SHORT $LN8@RecoverDir

; 590  : 		// ??????????
; 591  : 		if( WindowMode ){

  000fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?WindowMode@@3HA, 0 ; WindowMode
  00103	74 14		 je	 SHORT $LN8@RecoverDir

; 592  : 			// ?Óíï??????????Óüâ??
; 593  : 			lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );

  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	68 00 00 00 00	 push	 OFFSET ?Palette@@3PAUtagPALETTEENTRY@@A ; Palette
  0010c	68 00 01 00 00	 push	 256			; 00000100H
  00111	6a 00		 push	 0
  00113	6a 00		 push	 0
  00115	51		 push	 ecx
  00116	ff 50 18	 call	 DWORD PTR [eax+24]
$LN8@RecoverDir:

; 594  : 		}
; 595  : 	}
; 596  : 	// ???????Óöº?????
; 597  : 	mouse.state = MOUSE_NO_CRICK;

  00119	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 0

; 598  : 	mouse.onceState = MOUSE_NO_CRICK;

  00123	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 0

; 599  : 	// ???ÓñΩ?Ó†í????
; 600  : 	NowTime = TimeGetTime();

  0012d	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00132	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime

; 601  : }

  00137	c3		 ret	 0
?RecoverDirectDraw@@YAXXZ ENDP				; RecoverDirectDraw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT ?CreateCompatibleDEVMODE@@YAXPAU_devicemodeA@@KKKK@Z
_TEXT	SEGMENT
_pdm$ = 8						; size = 4
_BitsPerPixel$ = 12					; size = 4
_Width$ = 16						; size = 4
_Height$ = 20						; size = 4
_Frequency$ = 24					; size = 4
?CreateCompatibleDEVMODE@@YAXPAU_devicemodeA@@KKKK@Z PROC ; CreateCompatibleDEVMODE, COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 169  : 	ZeroMemory(pdm, sizeof(DEVMODE));

  00004	8b 75 08	 mov	 esi, DWORD PTR _pdm$[ebp]
  00007	68 9c 00 00 00	 push	 156			; 0000009cH
  0000c	6a 00		 push	 0
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memset

; 170  : 	pdm->dmSize = sizeof(DEVMODE);

  00014	b8 9c 00 00 00	 mov	 eax, 156		; 0000009cH
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	66 89 46 24	 mov	 WORD PTR [esi+36], ax

; 171  : 
; 172  : 	if (BitsPerPixel)

  00020	8b 45 0c	 mov	 eax, DWORD PTR _BitsPerPixel$[ebp]
  00023	85 c0		 test	 eax, eax
  00025	74 0a		 je	 SHORT $LN10@CreateComp

; 173  : 	{
; 174  : 		pdm->dmBitsPerPel = BitsPerPixel;
; 175  : 		pdm->dmFields |= DM_BITSPERPEL;

  00027	81 4e 28 00 00
	04 00		 or	 DWORD PTR [esi+40], 262144 ; 00040000H
  0002e	89 46 68	 mov	 DWORD PTR [esi+104], eax
$LN10@CreateComp:

; 176  : 	}
; 177  : 
; 178  : 	if (Width)

  00031	8b 45 10	 mov	 eax, DWORD PTR _Width$[ebp]
  00034	85 c0		 test	 eax, eax
  00036	74 0a		 je	 SHORT $LN11@CreateComp

; 179  : 	{
; 180  : 		pdm->dmPelsWidth = Width;
; 181  : 		pdm->dmFields |= DM_PELSWIDTH;

  00038	81 4e 28 00 00
	08 00		 or	 DWORD PTR [esi+40], 524288 ; 00080000H
  0003f	89 46 6c	 mov	 DWORD PTR [esi+108], eax
$LN11@CreateComp:

; 182  : 	}
; 183  : 
; 184  : 	if (Height)

  00042	8b 45 14	 mov	 eax, DWORD PTR _Height$[ebp]
  00045	85 c0		 test	 eax, eax
  00047	74 0a		 je	 SHORT $LN12@CreateComp

; 185  : 	{
; 186  : 		pdm->dmPelsHeight = Height;
; 187  : 		pdm->dmFields |= DM_PELSHEIGHT;

  00049	81 4e 28 00 00
	10 00		 or	 DWORD PTR [esi+40], 1048576 ; 00100000H
  00050	89 46 70	 mov	 DWORD PTR [esi+112], eax
$LN12@CreateComp:

; 188  : 	}
; 189  : 
; 190  : 	if (Frequency)

  00053	8b 45 18	 mov	 eax, DWORD PTR _Frequency$[ebp]
  00056	85 c0		 test	 eax, eax
  00058	74 0a		 je	 SHORT $LN5@CreateComp

; 191  : 	{
; 192  : 		pdm->dmDisplayFrequency = Frequency;
; 193  : 		pdm->dmFields |= DM_DISPLAYFREQUENCY;

  0005a	81 4e 28 00 00
	40 00		 or	 DWORD PTR [esi+40], 4194304 ; 00400000H
  00061	89 46 78	 mov	 DWORD PTR [esi+120], eax
$LN5@CreateComp:
  00064	5e		 pop	 esi

; 194  : 	}
; 195  : }

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?CreateCompatibleDEVMODE@@YAXPAU_devicemodeA@@KKKK@Z ENDP ; CreateCompatibleDEVMODE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT ?MessageBoxNew@@YAHPAUHWND__@@PBD1I@Z
_TEXT	SEGMENT
_€Â?$1 = -2052						; size = 1024
_€Â?1$2 = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_lpText$ = 12						; size = 4
_lpCaption$ = 16					; size = 4
_uType$ = 20						; size = 4
?MessageBoxNew@@YAHPAUHWND__@@PBD1I@Z PROC		; MessageBoxNew, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 08 00
	00		 sub	 esp, 2052		; 00000804H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 154  : 	if (ÁºñÁ†Å == 950) {

  00013	81 3d 00 00 00
	00 b6 03 00 00	 cmp	 DWORD PTR ???@@3HA, 950	; ??, 000003b6H
  0001d	53		 push	 ebx
  0001e	8b 5d 08	 mov	 ebx, DWORD PTR _hWnd$[ebp]
  00021	56		 push	 esi
  00022	8b 75 0c	 mov	 esi, DWORD PTR _lpText$[ebp]
  00025	57		 push	 edi
  00026	8b 7d 10	 mov	 edi, DWORD PTR _lpCaption$[ebp]
  00029	0f 85 a9 00 00
	00		 jne	 $LN2@MessageBox

; 155  : 		char ÁπÅ‰Ωì[1024] = { 0 };

  0002f	68 00 04 00 00	 push	 1024			; 00000400H
  00034	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _€Â?$1[ebp]
  0003a	6a 00		 push	 0
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memset

; 156  : 		char ÁπÅ‰Ωì1[1024] = { 0 };

  00042	68 00 04 00 00	 push	 1024			; 00000400H
  00047	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _€Â?1$2[ebp]
  0004d	6a 00		 push	 0
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _memset

; 157  : 		LCMapString(0x804, 0x4000000, lpText, strlen(lpText), ÁπÅ‰Ωì, 1024);

  00055	8b ce		 mov	 ecx, esi
  00057	83 c4 18	 add	 esp, 24			; 00000018H
  0005a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005d	0f 1f 00	 npad	 3
$LL5@MessageBox:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL5@MessageBox
  00067	68 00 04 00 00	 push	 1024			; 00000400H
  0006c	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _€Â?$1[ebp]
  00072	2b ca		 sub	 ecx, edx
  00074	50		 push	 eax
  00075	51		 push	 ecx
  00076	56		 push	 esi
  00077	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__LCMapStringA@24
  0007d	68 00 00 00 04	 push	 67108864		; 04000000H
  00082	68 04 08 00 00	 push	 2052			; 00000804H
  00087	ff d6		 call	 esi

; 158  : 		LCMapString(0x804, 0x4000000, lpCaption, strlen(lpCaption), ÁπÅ‰Ωì1, 1024);

  00089	8b cf		 mov	 ecx, edi
  0008b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008e	66 90		 npad	 2
$LL6@MessageBox:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL6@MessageBox
  00097	68 00 04 00 00	 push	 1024			; 00000400H
  0009c	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _€Â?1$2[ebp]
  000a2	2b ca		 sub	 ecx, edx
  000a4	50		 push	 eax
  000a5	51		 push	 ecx
  000a6	57		 push	 edi
  000a7	68 00 00 00 04	 push	 67108864		; 04000000H
  000ac	68 04 08 00 00	 push	 2052			; 00000804H
  000b1	ff d6		 call	 esi

; 159  : 		return MessageBox(hWnd, GB2312ToBIG5((const char *)ÁπÅ‰Ωì), GB2312ToBIG5((const char *)ÁπÅ‰Ωì1), uType);

  000b3	ff 75 14	 push	 DWORD PTR _uType$[ebp]
  000b6	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _€Â?1$2[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?GB2312ToBIG5@@YAPADPBD@Z ; GB2312ToBIG5
  000c2	83 c4 04	 add	 esp, 4
  000c5	50		 push	 eax
  000c6	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _€Â?$1[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?GB2312ToBIG5@@YAPADPBD@Z ; GB2312ToBIG5
  000d2	83 c4 04	 add	 esp, 4
  000d5	50		 push	 eax
  000d6	eb 05		 jmp	 SHORT $LN7@MessageBox
$LN2@MessageBox:

; 160  : 	}
; 161  : 	else {
; 162  : 		return MessageBox(hWnd, lpText, lpCaption, uType);

  000d8	ff 75 14	 push	 DWORD PTR _uType$[ebp]
  000db	57		 push	 edi
  000dc	56		 push	 esi
$LN7@MessageBox:

; 163  : 	}
; 164  : }

  000dd	53		 push	 ebx
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  000e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	33 cd		 xor	 ecx, ebp
  000eb	5b		 pop	 ebx
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
?MessageBoxNew@@YAHPAUHWND__@@PBD1I@Z ENDP		; MessageBoxNew
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT ?SetResoMode@@YAXH@Z
_TEXT	SEGMENT
_Mode$ = 8						; size = 4
?SetResoMode@@YAXH@Z PROC				; SetResoMode, COMDAT

; 1185 : void SetResoMode( int Mode ){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1186 : 	ResoMode = Mode;

  00004	8b 75 08	 mov	 esi, DWORD PTR _Mode$[ebp]

; 1187 : 	lpDraw = ( DIRECT_DRAW *)HeapAlloc( GetProcessHeap(),HEAP_ZERO_MEMORY, ( DWORD )sizeof( DIRECT_DRAW ) );

  00007	68 8c 00 00 00	 push	 140			; 0000008cH
  0000c	6a 08		 push	 8
  0000e	89 35 00 00 00
	00		 mov	 DWORD PTR ?ResoMode@@3HA, esi ; ResoMode
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A, eax ; lpDraw

; 1188 : 	if( lpDraw == NULL ){

  00026	85 c0		 test	 eax, eax
  00028	75 1b		 jne	 SHORT $LN4@SetResoMod

; 1189 : 		MessageBox( hWnd, "HeapAlloc Error ( DIRECT_DRAW )", "ÌôïÏù∏", MB_OK | MB_ICONSTOP );

  0002a	6a 10		 push	 16			; 00000010H
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DDNACEOP@HeapAlloc?5Error?5?$CI?5DIRECT_DRAW?5?$CJ@
  00036	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00042	5e		 pop	 esi

; 1224 : 		SurfaceSizeX = 64;
; 1225 : 		SurfaceSizeY = 48;
; 1226 : 		break;
; 1227 : #endif
; 1228 : 	}
; 1229 : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN4@SetResoMod:

; 1190 : 		return;
; 1191 : 	}
; 1192 : 	switch(Mode){

  00045	83 fe 04	 cmp	 esi, 4
  00048	0f 87 9a 00 00
	00		 ja	 $LN2@SetResoMod
  0004e	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN11@SetResoMod[esi*4]
$LN5@SetResoMod:

; 1224 : 		SurfaceSizeX = 64;
; 1225 : 		SurfaceSizeY = 48;
; 1226 : 		break;
; 1227 : #endif
; 1228 : 	}
; 1229 : }

  00055	c7 80 84 00 00
	00 80 02 00 00	 mov	 DWORD PTR [eax+132], 640 ; 00000280H
  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00064	c7 80 88 00 00
	00 e0 01 00 00	 mov	 DWORD PTR [eax+136], 480 ; 000001e0H
  0006e	eb 64		 jmp	 SHORT $LN12@SetResoMod
$LN6@SetResoMod:

; 1193 : 	case 0:
; 1194 : 		//460*480
; 1195 : 		lpDraw->xSize =640;
; 1196 : 		lpDraw->ySize = 480;
; 1197 : 		SurfaceSizeX = 64;
; 1198 : 		SurfaceSizeY = 48;
; 1199 : 		break;
; 1200 : 	case 1:
; 1201 : 		//320*240
; 1202 : 		lpDraw->xSize = 320;

  00070	c7 80 84 00 00
	00 40 01 00 00	 mov	 DWORD PTR [eax+132], 320 ; 00000140H

; 1203 : 		lpDraw->ySize = 240;

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0007f	5e		 pop	 esi
  00080	c7 80 88 00 00
	00 f0 00 00 00	 mov	 DWORD PTR [eax+136], 240 ; 000000f0H

; 1204 : 		SurfaceSizeX = 32;

  0008a	c7 05 00 00 00
	00 20 00 00 00	 mov	 DWORD PTR ?SurfaceSizeX@@3HA, 32 ; SurfaceSizeX, 00000020H

; 1205 : 		SurfaceSizeY = 24;

  00094	c7 05 00 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?SurfaceSizeY@@3HA, 24 ; SurfaceSizeY, 00000018H

; 1224 : 		SurfaceSizeX = 64;
; 1225 : 		SurfaceSizeY = 48;
; 1226 : 		break;
; 1227 : #endif
; 1228 : 	}
; 1229 : }

  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN8@SetResoMod:

; 1206 : 		break;
; 1207 : 	case 2:
; 1208 : 		//ÂèØÂèò
; 1209 : 		lpDraw->xSize = 640;
; 1210 : 		lpDraw->ySize = 480;
; 1211 : 		SurfaceSizeX = 64;
; 1212 : 		SurfaceSizeY = 48;
; 1213 : 		break;
; 1214 : #ifdef _NEW_RESOMODE
; 1215 : 	case 3:
; 1216 : 		lpDraw->xSize = 800;

  000a0	c7 80 84 00 00
	00 20 03 00 00	 mov	 DWORD PTR [eax+132], 800 ; 00000320H

; 1217 : 		lpDraw->ySize = 600;

  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  000af	c7 80 88 00 00
	00 58 02 00 00	 mov	 DWORD PTR [eax+136], 600 ; 00000258H

; 1218 : 		SurfaceSizeX = 64;
; 1219 : 		SurfaceSizeY = 48;
; 1220 : 		break;

  000b9	eb 19		 jmp	 SHORT $LN12@SetResoMod
$LN9@SetResoMod:

; 1221 : 	case 4:
; 1222 : 		lpDraw->xSize = 1024;

  000bb	c7 80 84 00 00
	00 00 04 00 00	 mov	 DWORD PTR [eax+132], 1024 ; 00000400H

; 1223 : 		lpDraw->ySize = 768;

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  000ca	c7 80 88 00 00
	00 00 03 00 00	 mov	 DWORD PTR [eax+136], 768 ; 00000300H
$LN12@SetResoMod:

; 1224 : 		SurfaceSizeX = 64;
; 1225 : 		SurfaceSizeY = 48;
; 1226 : 		break;
; 1227 : #endif
; 1228 : 	}
; 1229 : }

  000d4	c7 05 00 00 00
	00 30 00 00 00	 mov	 DWORD PTR ?SurfaceSizeY@@3HA, 48 ; SurfaceSizeY, 00000030H
  000de	c7 05 00 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?SurfaceSizeX@@3HA, 64 ; SurfaceSizeX, 00000040H
$LN2@SetResoMod:
  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
  000eb	90		 npad	 1
$LN11@SetResoMod:
  000ec	00 00 00 00	 DD	 $LN5@SetResoMod
  000f0	00 00 00 00	 DD	 $LN6@SetResoMod
  000f4	00 00 00 00	 DD	 $LN5@SetResoMod
  000f8	00 00 00 00	 DD	 $LN8@SetResoMod
  000fc	00 00 00 00	 DD	 $LN9@SetResoMod
?SetResoMode@@YAXH@Z ENDP				; SetResoMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT ?ChangeWindowMode@@YAXXZ
_TEXT	SEGMENT
_clientRect$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
?ChangeWindowMode@@YAXXZ PROC				; ChangeWindowMode, COMDAT

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 482  : 	RECT clientRect;		// „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆË°®Á§∫È†òÂüü
; 483  : 	DWORD windowStyle;		// „Ç¶„Ç£„É≥„Éâ„Ç¶„Çπ„Çø„Ç§„É´
; 484  : 	ChangeMode(WindowMode);

  00011	ff 35 00 00 00
	00		 push	 DWORD PTR ?WindowMode@@3HA ; WindowMode
  00017	e8 00 00 00 00	 call	 ?ChangeMode@@YAXH@Z	; ChangeMode
  0001c	83 c4 04	 add	 esp, 4

; 485  : 	// „Ç¶„Ç£„É≥„Éâ„Ç¶„É¢„Éº„Éâ„ÅÆÊôÇ
; 486  : 	if( WindowMode ){

  0001f	b8 00 00 ca 00	 mov	 eax, 13238272		; 00ca0000H
  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?WindowMode@@3HA, 0 ; WindowMode
  0002b	be 00 00 00 90	 mov	 esi, -1879048192	; 90000000H
  00030	0f 45 f0	 cmovne	 esi, eax

; 487  : 		// „Ç¶„Ç£„É≥„Éâ„Ç¶„Çπ„Çø„Ç§„É´
; 488  : 		windowStyle = WS_MINIMIZEBOX | WS_SYSMENU | 
; 489  : 						//WS_THICKFRAME |
; 490  : 						WS_CAPTION | WS_OVERLAPPED;
; 491  : 	}else{	
; 492  : 		// „Ç¶„Ç£„É≥„Éâ„Ç¶„Çπ„Çø„Ç§„É´
; 493  : 		windowStyle = WS_VISIBLE | WS_POPUP;
; 494  : 	}
; 495  : 	// „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÈ†òÂüü„ÅÆË®≠ÂÆö
; 496  : 	SetRect( &clientRect, 0, 0, lpDraw->xSize, lpDraw->ySize );

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00038	ff b0 88 00 00
	00		 push	 DWORD PTR [eax+136]
  0003e	ff b0 84 00 00
	00		 push	 DWORD PTR [eax+132]
  00044	8d 45 ec	 lea	 eax, DWORD PTR _clientRect$[ebp]
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	50		 push	 eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 497  : 	// „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÈ†òÂüü„ÅÆ„Çµ„Ç§„Ç∫„Åã„Çâ„Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫„ÇíË®àÁÆó„Åó clientRect „Å∏ÂÖ•„Çå„Çã
; 498  : 	AdjustWindowRectEx( &clientRect, windowStyle, FALSE, NULL );

  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	56		 push	 esi
  00057	8d 45 ec	 lea	 eax, DWORD PTR _clientRect$[ebp]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AdjustWindowRectEx@16

; 499  : 	if( hWnd == NULL ){	// DirectDraw„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„Å™„ÅÑ„Å®„Åç

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00066	85 c0		 test	 eax, eax
  00068	75 35		 jne	 SHORT $LN4@ChangeWind

; 500  : 		hWnd = CreateWindowEx( 	NULL, 

  0006a	50		 push	 eax
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR ?hInst@@3PAUHINSTANCE__@@A ; hInst
  00071	50		 push	 eax
  00072	50		 push	 eax
  00073	8b 45 f8	 mov	 eax, DWORD PTR _clientRect$[ebp+12]
  00076	2b 45 f0	 sub	 eax, DWORD PTR _clientRect$[ebp+4]
  00079	50		 push	 eax
  0007a	8b 45 f4	 mov	 eax, DWORD PTR _clientRect$[ebp+8]
  0007d	2b 45 ec	 sub	 eax, DWORD PTR _clientRect$[ebp]
  00080	50		 push	 eax
  00081	6a 00		 push	 0
  00083	6a 00		 push	 0
  00085	56		 push	 esi
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NLNMPB@?$KD?S?$KD?t?$KD?o?$KD?n?$KD?e?$KD?A?$KD?g?$KD?e@
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NLNMPB@?$KD?S?$KD?t?$KD?o?$KD?n?$KD?e?$KD?A?$KD?g?$KD?e@
  00090	6a 00		 push	 0
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  00098	a3 00 00 00 00	 mov	 DWORD PTR ?hWnd@@3PAUHWND__@@A, eax ; hWnd

; 501  : 								DEF_APPNAME, 
; 502  : 								DEF_APPNAME, 
; 503  : 								windowStyle,
; 504  : 								//CW_USEDEFAULT, 
; 505  : 								//CW_USEDEFAULT, 
; 506  : 								0, 
; 507  : 								0, 
; 508  : 								clientRect.right - clientRect.left, 
; 509  : 								clientRect.bottom - clientRect.top, 
; 510  : 								NULL, 
; 511  : 								NULL, 
; 512  : 								hInst, 
; 513  : 								NULL );
; 514  : 	}else{

  0009d	eb 31		 jmp	 SHORT $LN5@ChangeWind
$LN4@ChangeWind:

; 515  : 		// „Ç¶„Ç£„É≥„Éâ„Ç¶„Çπ„Çø„Ç§„É´„ÅÆÂ§âÊõ¥
; 516  : 		SetWindowLong( hWnd, GWL_STYLE, windowStyle );

  0009f	56		 push	 esi
  000a0	6a f0		 push	 -16			; fffffff0H
  000a2	50		 push	 eax
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 517  : 		// ‰ΩúÊàê„Åó„Åü„Ç¶„Ç§„É≥„Éâ„Ç¶„ÇíË°®Á§∫
; 518  : //		ShowWindow( hWnd, CmdShow );
; 519  : 		// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆ‰ΩçÁΩÆ„Å®„Çµ„Ç§„Ç∫„ÅÆÂ§âÊõ¥
; 520  : 		SetWindowPos( 	hWnd, 

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _clientRect$[ebp+12]
  000ac	2b 45 f0	 sub	 eax, DWORD PTR _clientRect$[ebp+4]
  000af	6a 20		 push	 32			; 00000020H
  000b1	50		 push	 eax
  000b2	8b 45 f4	 mov	 eax, DWORD PTR _clientRect$[ebp+8]
  000b5	2b 45 ec	 sub	 eax, DWORD PTR _clientRect$[ebp]
  000b8	50		 push	 eax
  000b9	6a 00		 push	 0
  000bb	6a 00		 push	 0
  000bd	6a fe		 push	 -2			; fffffffeH
  000bf	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
$LN5@ChangeWind:

; 521  : 						HWND_NOTOPMOST, 
; 522  : 						0, 
; 523  : 						0, 
; 524  : 						clientRect.right - clientRect.left, 
; 525  : 						clientRect.bottom - clientRect.top, 
; 526  : 						//SWP_SHOWWINDOW );
; 527  : 						SWP_FRAMECHANGED );
; 528  : 	}
; 529  : 
; 530  : 	// ‰ΩúÊàê„Åó„Åü„Ç¶„Ç§„É≥„Éâ„Ç¶„ÇíË°®Á§∫
; 531  : 	ShowWindow( hWnd, CmdShow );

  000d0	ff 35 00 00 00
	00		 push	 DWORD PTR ?CmdShow@@3HA	; CmdShow
  000d6	50		 push	 eax
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 532  : 
; 533  : 	// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíË°®Á§∫Êõ¥Êñ∞
; 534  : 	UpdateWindow( hWnd );

  000dd	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UpdateWindow@4

; 535  : }

  000e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ec	33 cd		 xor	 ecx, ebp
  000ee	5e		 pop	 esi
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
?ChangeWindowMode@@YAXXZ ENDP				; ChangeWindowMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT ?AnalyzeCmdLine@@YAXXZ
_TEXT	SEGMENT
?AnalyzeCmdLine@@YAXXZ PROC				; AnalyzeCmdLine, COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_08MPGDICFK@realbin?3@
  00005	ff 35 00 00 00
	00		 push	 DWORD PTR ?CmdLine@@3PADA ; CmdLine
  0000b	e8 00 00 00 00	 call	 _strstr
  00010	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp

; 450  : 	if( addr = strstr( CmdLine, "realbin:" ) )

  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN2@AnalyzeCmd

; 451  : 		sprintf( realBinName, "data\\real_%d.bin", atoi(addr+strlen("realbin:")) );

  00017	83 c0 08	 add	 eax, 8
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _atoi
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BDNGKHBG@data?2real_?$CFd?4bin@
  00026	68 00 00 00 00	 push	 OFFSET ?realBinName@@3PADA ; realBinName
  0002b	e8 00 00 00 00	 call	 _sprintf
  00030	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@AnalyzeCmd:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_08INHKNLCI@adrnbin?3@
  00038	ff 35 00 00 00
	00		 push	 DWORD PTR ?CmdLine@@3PADA ; CmdLine
  0003e	e8 00 00 00 00	 call	 _strstr
  00043	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp

; 452  : 	if( addr = strstr( CmdLine, "adrnbin:" ) )

  00046	85 c0		 test	 eax, eax
  00048	74 1c		 je	 SHORT $LN3@AnalyzeCmd

; 453  : 		sprintf( adrnBinName, "data\\adrn_%d.bin", atoi(addr+strlen("adrnbin:")) );

  0004a	83 c0 08	 add	 eax, 8
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _atoi
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@ELLBFFLH@data?2adrn_?$CFd?4bin@
  00059	68 00 00 00 00	 push	 OFFSET ?adrnBinName@@3PADA ; adrnBinName
  0005e	e8 00 00 00 00	 call	 _sprintf
  00063	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@AnalyzeCmd:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_07NALMGOPD@sprbin?3@
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR ?CmdLine@@3PADA ; CmdLine
  00071	e8 00 00 00 00	 call	 _strstr
  00076	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp

; 454  : 	if( addr = strstr( CmdLine, "sprbin:" ) )

  00079	85 c0		 test	 eax, eax
  0007b	74 1c		 je	 SHORT $LN4@AnalyzeCmd

; 455  : 		sprintf( sprBinName, "data\\spr_%d.bin", atoi(addr+strlen("sprbin:")) );

  0007d	83 c0 07	 add	 eax, 7
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _atoi
  00086	50		 push	 eax
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ICLKDLOG@data?2spr_?$CFd?4bin@
  0008c	68 00 00 00 00	 push	 OFFSET ?sprBinName@@3PADA ; sprBinName
  00091	e8 00 00 00 00	 call	 _sprintf
  00096	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@AnalyzeCmd:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EPOMFNLL@spradrnbin?3@
  0009e	ff 35 00 00 00
	00		 push	 DWORD PTR ?CmdLine@@3PADA ; CmdLine
  000a4	e8 00 00 00 00	 call	 _strstr
  000a9	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp

; 456  : 	if( addr = strstr( CmdLine, "spradrnbin:" ) )

  000ac	85 c0		 test	 eax, eax
  000ae	74 1c		 je	 SHORT $LN5@AnalyzeCmd

; 457  : 		sprintf( sprAdrnBinName, "data\\spradrn_%d.bin", atoi(addr+strlen("spradrnbin:")) );

  000b0	83 c0 0b	 add	 eax, 11			; 0000000bH
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _atoi
  000b9	50		 push	 eax
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LHBEADJK@data?2spradrn_?$CFd?4bin@
  000bf	68 00 00 00 00	 push	 OFFSET ?sprAdrnBinName@@3PADA ; sprAdrnBinName
  000c4	e8 00 00 00 00	 call	 _sprintf
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@AnalyzeCmd:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_07CGONDAHB@nodelay@
  000d1	ff 35 00 00 00
	00		 push	 DWORD PTR ?CmdLine@@3PADA ; CmdLine
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp

; 472  : 	WindowMode = TRUE;

  000d7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?WindowMode@@3HA, 1 ; WindowMode
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  000e1	e8 00 00 00 00	 call	 _strstr
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp

; 473  : 	if( strstr( CmdLine, "nodelay" ) )

  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?NoDelay@@3HA ; NoDelay
  000ec	33 d2		 xor	 edx, edx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  000ee	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp

; 476  : 	ProcNo = PROC_ID_PASSWORD;

  000f1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ProcNo@@3IA, 1 ; ProcNo
  000fb	85 c0		 test	 eax, eax
  000fd	0f 45 ca	 cmovne	 ecx, edx
  00100	89 0d 00 00 00
	00		 mov	 DWORD PTR ?NoDelay@@3HA, ecx ; NoDelay

; 477  : 
; 478  : }

  00106	c3		 ret	 0
?AnalyzeCmdLine@@YAXXZ ENDP				; AnalyzeCmdLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT ?SystemTask@@YAHXZ
_TEXT	SEGMENT
_msg$ = -28						; size = 28
?SystemTask@@YAHXZ PROC					; SystemTask, COMDAT

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 608  : 	MSG msg;
; 609  : 	
; 610  : 	// ‚òÜ‚òÖ‚òÜ‚òÖ‚òÜ „É°„ÉÉ„Çª„Éº„Ç∏„É´„Éº„Éó ‚òÜ‚òÖ‚òÜ‚òÖ‚òÜ
; 611  : 	// „É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„ÇãÈñì„É´„Éº„Éó
; 612  : 	while( PeekMessage( &msg, NULL, 0, 0, PM_REMOVE )){

  00006	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PeekMessageA@20
  00011	57		 push	 edi
  00012	6a 01		 push	 1
  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	50		 push	 eax
  0001b	ff d6		 call	 esi
  0001d	85 c0		 test	 eax, eax
  0001f	74 7e		 je	 SHORT $LN3@SystemTask
  00021	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__TranslateMessage@4
  00027	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__DispatchMessageA@4
  0002d	0f 1f 00	 npad	 3
$LL2@SystemTask:

; 613  : 		// „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèó„ÅëÂèñ„Çã„ÄÅWM_QUIT „ÇíÂèó„ÅëÂèñ„Çã„Å®FALSE„ÅåËøî„Å£„Å¶„Åç„Å¶ÁµÇ‰∫Ü
; 614  : 		//if( GetMessage( &msg, NULL, 0, 0 ) == FALSE ) return FALSE; 
; 615  : 		// WM_QUIT „ÇíÂèó„ÅëÂèñ„Çã„Å®ÁµÇ‰∫Ü
; 616  : 		if( msg.message == WM_QUIT )

  00030	8b 45 e8	 mov	 eax, DWORD PTR _msg$[ebp+4]
  00033	83 f8 12	 cmp	 eax, 18			; 00000012H
  00036	74 73		 je	 SHORT $LN15@SystemTask

; 617  : 			return FALSE;
; 618  : 		else if (msg.message == WM_USER + 888)

  00038	3d 78 07 00 00	 cmp	 eax, 1912		; 00000778H
  0003d	75 10		 jne	 SHORT $LN6@SystemTask

; 619  : 		{
; 620  : 			JL_SetAddr(msg.wParam, msg.lParam);

  0003f	ff 75 f0	 push	 DWORD PTR _msg$[ebp+12]
  00042	ff 75 ec	 push	 DWORD PTR _msg$[ebp+8]
  00045	e8 00 00 00 00	 call	 ?JL_SetAddr@@YAXHH@Z	; JL_SetAddr
  0004a	83 c4 08	 add	 esp, 8

; 621  : 			continue;

  0004d	eb 3e		 jmp	 SHORT $LN16@SystemTask
$LN6@SystemTask:

; 622  : 		}
; 623  : 		else if (msg.message == WM_USER + 887)

  0004f	3d 77 07 00 00	 cmp	 eax, 1911		; 00000777H
  00054	75 2b		 jne	 SHORT $LN10@SystemTask

; 624  : 		{
; 625  : 			extern int g_WgRecvHwnd, g_playerAddr;
; 626  : 			g_WgRecvHwnd = msg.wParam;
; 627  : 			g_playerAddr = msg.lParam;
; 628  : 
; 629  : 			extern HWND hWnd;
; 630  : 			if (hWnd)

  00056	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  0005c	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _msg$[ebp+12]
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?g_WgRecvHwnd@@3HA, eax ; g_WgRecvHwnd
  00067	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_playerAddr@@3HA, ecx ; g_playerAddr
  0006d	85 d2		 test	 edx, edx
  0006f	74 43		 je	 SHORT $LN9@SystemTask

; 631  : 			{
; 632  : 				SendMessage((HWND)g_WgRecvHwnd, WM_USER + 1, (WPARAM)hWnd, (LPARAM)g_playerAddr);

  00071	51		 push	 ecx
  00072	52		 push	 edx
  00073	68 01 04 00 00	 push	 1025			; 00000401H
  00078	50		 push	 eax
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 633  : 				continue;

  0007f	eb 0c		 jmp	 SHORT $LN16@SystemTask
$LN10@SystemTask:

; 639  : 			}
; 640  : 	
; 641  : 		}
; 642  : 
; 643  : 		TranslateMessage(&msg);		// Óüâ??Óùß????????Óüâ???

  00081	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00084	50		 push	 eax
  00085	ff d7		 call	 edi

; 644  : 		
; 645  : 		DispatchMessage(&msg);		// ????????????????????

  00087	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  0008a	50		 push	 eax
  0008b	ff d3		 call	 ebx
$LN16@SystemTask:

; 608  : 	MSG msg;
; 609  : 	
; 610  : 	// ‚òÜ‚òÖ‚òÜ‚òÖ‚òÜ „É°„ÉÉ„Çª„Éº„Ç∏„É´„Éº„Éó ‚òÜ‚òÖ‚òÜ‚òÖ‚òÜ
; 611  : 	// „É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„ÇãÈñì„É´„Éº„Éó
; 612  : 	while( PeekMessage( &msg, NULL, 0, 0, PM_REMOVE )){

  0008d	6a 01		 push	 1
  0008f	6a 00		 push	 0
  00091	6a 00		 push	 0
  00093	6a 00		 push	 0
  00095	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00098	50		 push	 eax
  00099	ff d6		 call	 esi
  0009b	85 c0		 test	 eax, eax
  0009d	75 91		 jne	 SHORT $LL2@SystemTask
$LN3@SystemTask:
  0009f	5f		 pop	 edi

; 646  : 			
; 647  : 	}
; 648  : 	return TRUE;
; 649  : }

  000a0	5e		 pop	 esi
  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
$LN15@SystemTask:
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	33 c0		 xor	 eax, eax
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
$LN9@SystemTask:

; 634  : 			}
; 635  : 			else
; 636  : 			{
; 637  : 				MessageBox(0, 0, 0, 0);

  000b4	6a 00		 push	 0
  000b6	6a 00		 push	 0
  000b8	6a 00		 push	 0
  000ba	6a 00		 push	 0
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 638  : 				exit(0);

  000c2	6a 00		 push	 0
  000c4	e8 00 00 00 00	 call	 _exit
$LN20@SystemTask:
  000c9	cc		 int	 3
?SystemTask@@YAHXZ ENDP					; SystemTask
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT ?WindMsgProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv195 = -28						; size = 4
_para_count$1 = -24					; size = 4
$T2 = -20						; size = 4
_p$3 = -16						; size = 4
tv178 = -12						; size = 4
_i$4 = -8						; size = 4
tv64 = -4						; size = 4
_hWnd$ = 8						; size = 4
_Message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?WindMsgProc@@YGJPAUHWND__@@IIJ@Z PROC			; WindMsgProc, COMDAT

; 662  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 663  : 
; 664  : 	switch( Message ){

  00009	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d fc 10	 cmp	 DWORD PTR tv64[ebp], 16	; 00000010H
  00013	77 27		 ja	 SHORT $LN81@WindMsgPro
  00015	83 7d fc 10	 cmp	 DWORD PTR tv64[ebp], 16	; 00000010H
  00019	0f 84 3e 03 00
	00		 je	 $LN33@WindMsgPro
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR tv64[ebp]
  00022	83 e9 01	 sub	 ecx, 1
  00025	89 4d fc	 mov	 DWORD PTR tv64[ebp], ecx
  00028	83 7d fc 05	 cmp	 DWORD PTR tv64[ebp], 5
  0002c	0f 87 eb 07 00
	00		 ja	 $LN76@WindMsgPro
  00032	8b 55 fc	 mov	 edx, DWORD PTR tv64[ebp]
  00035	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN84@WindMsgPro[edx*4]
$LN81@WindMsgPro:
  0003c	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 512 ; 00000200H
  00043	77 34		 ja	 SHORT $LN82@WindMsgPro
  00045	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 512 ; 00000200H
  0004c	0f 84 c7 05 00
	00		 je	 $LN63@WindMsgPro
  00052	8b 45 fc	 mov	 eax, DWORD PTR tv64[ebp]
  00055	83 e8 4a	 sub	 eax, 74			; 0000004aH
  00058	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0005b	81 7d fc c9 00
	00 00		 cmp	 DWORD PTR tv64[ebp], 201 ; 000000c9H
  00062	0f 87 b5 07 00
	00		 ja	 $LN76@WindMsgPro
  00068	8b 4d fc	 mov	 ecx, DWORD PTR tv64[ebp]
  0006b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN85@WindMsgPro[ecx]
  00072	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN86@WindMsgPro[edx*4]
$LN82@WindMsgPro:
  00079	81 7d fc 09 07
	00 00		 cmp	 DWORD PTR tv64[ebp], 1801 ; 00000709H
  00080	77 2c		 ja	 SHORT $LN83@WindMsgPro
  00082	81 7d fc 09 07
	00 00		 cmp	 DWORD PTR tv64[ebp], 1801 ; 00000709H
  00089	0f 84 b3 00 00
	00		 je	 $LN15@WindMsgPro
  0008f	8b 45 fc	 mov	 eax, DWORD PTR tv64[ebp]
  00092	2d 01 02 00 00	 sub	 eax, 513		; 00000201H
  00097	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0009a	83 7d fc 06	 cmp	 DWORD PTR tv64[ebp], 6
  0009e	0f 87 79 07 00
	00		 ja	 $LN76@WindMsgPro
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR tv64[ebp]
  000a7	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN87@WindMsgPro[ecx*4]
$LN83@WindMsgPro:
  000ae	81 7d fc 78 07
	00 00		 cmp	 DWORD PTR tv64[ebp], 1912 ; 00000778H
  000b5	0f 84 aa 00 00
	00		 je	 $LN16@WindMsgPro
  000bb	e9 5d 07 00 00	 jmp	 $LN76@WindMsgPro
$LN11@WindMsgPro:

; 665  : 
; 666  : 			//JL 2016.8.26 ÊøÄÊ¥ªÁü≥Âô®ÔºåÁ™óÂè£ÂàõÂª∫ÔºåÂèëÈÄÅÊ∏∏ÊàèÁ™óÂè£Âè•ÊüÑÁªôÂ§ñÊåÇ
; 667  : 			//ÊåÇÊé•ÁöÑÊÉÖÂÜµ‰∏çÁî®ËÄÉËôëËøôÁÇπÔºåÂ§ñÊåÇËá™Ë°åËé∑Âèñ
; 668  : 		case WM_CREATE:
; 669  : 			extern int g_WgRecvHwnd, g_playerAddr;
; 670  : 			__asm {
; 671  : 				jmp _Â≠óËäÇÂÆö‰πâÂÆåÊàê;

  000c0	eb 08		 jmp	 SHORT $_ÌÆ?Ô“?Ë«‡˜$90

; 672  : 				_emit 0xAA;

  000c2	aa		 DB	 -86			; ffffffaaH

; 673  : 				_emit 0xAA;

  000c3	aa		 DB	 -86			; ffffffaaH

; 674  : 				_emit 0xAA;

  000c4	aa		 DB	 -86			; ffffffaaH

; 675  : 				_emit 0xAA;

  000c5	aa		 DB	 -86			; ffffffaaH

; 676  : 				_emit 0xBB;

  000c6	bb		 DB	 -69			; ffffffbbH

; 677  : 				_emit 0xBB;

  000c7	bb		 DB	 -69			; ffffffbbH

; 678  : 				_emit 0xBB;

  000c8	bb		 DB	 -69			; ffffffbbH

; 679  : 				_emit 0xBB;

  000c9	bb		 DB	 -69			; ffffffbbH
$_ÌÆ?Ô“?Ë«‡˜$90:

; 680  : 			_Â≠óËäÇÂÆö‰πâÂÆåÊàê:;
; 681  : 				mov eax, _Â≠óËäÇÂÆö‰πâÂÆåÊàê - 8;

  000ca	b8 f8 ff ff ff	 mov	 eax, OFFSET $_ÌÆ?Ô“?Ë«‡˜$90-8

; 682  : 				mov eax, [eax];

  000cf	8b 00		 mov	 eax, DWORD PTR [eax]

; 683  : 				cmp eax, 0xAAAAAAAA;

  000d1	3d aa aa aa aa	 cmp	 eax, -1431655766	; aaaaaaaaH

; 684  : 				jz _temp;

  000d6	74 11		 je	 SHORT $_temp$91

; 685  : 				mov g_WgRecvHwnd, eax;

  000d8	a3 00 00 00 00	 mov	 DWORD PTR ?g_WgRecvHwnd@@3HA, eax ; g_WgRecvHwnd

; 686  : 				mov eax, _Â≠óËäÇÂÆö‰πâÂÆåÊàê - 4;

  000dd	b8 fc ff ff ff	 mov	 eax, OFFSET $_ÌÆ?Ô“?Ë«‡˜$90-4

; 687  : 				mov eax, [eax];

  000e2	8b 00		 mov	 eax, DWORD PTR [eax]

; 688  : 				mov g_playerAddr, eax;

  000e4	a3 00 00 00 00	 mov	 DWORD PTR ?g_playerAddr@@3HA, eax ; g_playerAddr
$_temp$91:

; 689  : 			_temp:;
; 690  : 			}
; 691  : 			if (g_WgRecvHwnd)

  000e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_WgRecvHwnd@@3HA, 0 ; g_WgRecvHwnd
  000f0	74 2f		 je	 SHORT $LN12@WindMsgPro

; 692  : 			{
; 693  : 				SetTimer(hWnd, 0, 1000 * 20, 0); //20Áßí

  000f2	6a 00		 push	 0
  000f4	68 20 4e 00 00	 push	 20000			; 00004e20H
  000f9	6a 00		 push	 0
  000fb	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  000fe	52		 push	 edx
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 694  : 				SendMessageA((HWND)g_WgRecvHwnd, WM_USER + 1, (WPARAM)hWnd, g_playerAddr);

  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_playerAddr@@3HA ; g_playerAddr
  0010a	50		 push	 eax
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  0010e	51		 push	 ecx
  0010f	68 01 04 00 00	 push	 1025			; 00000401H
  00114	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_WgRecvHwnd@@3HA ; g_WgRecvHwnd
  0011a	52		 push	 edx
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN12@WindMsgPro:

; 695  : 			}
; 696  : 
; 697  : 
; 698  : 			break;

  00121	e9 2b 07 00 00	 jmp	 $LN2@WindMsgPro
$LN13@WindMsgPro:

; 699  : 		case WM_TIMER:
; 700  : 			//JL ËÆæÁΩÆtimerÊ£ÄÊµãÂ§ñÊåÇÊòØÂê¶Â≠òÂú®Ôºå‰∏çÂ≠òÂú®ÂàôÈÄÄÂá∫
; 701  : 			if (IsWindow((HWND)g_WgRecvHwnd) == false) exit(0);

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_WgRecvHwnd@@3HA ; g_WgRecvHwnd
  0012b	50		 push	 eax
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00132	85 c0		 test	 eax, eax
  00134	75 07		 jne	 SHORT $LN14@WindMsgPro
  00136	6a 00		 push	 0
  00138	e8 00 00 00 00	 call	 _exit
$LN14@WindMsgPro:

; 702  : 			break;

  0013d	e9 0f 07 00 00	 jmp	 $LN2@WindMsgPro
$LN15@WindMsgPro:

; 703  : 
; 704  : 			//JL
; 705  : 			//wparam - wgÁöÑhwnd, lparam - ÈúÄË¶ÅËé∑ÂæóÁöÑindex
; 706  : 		case WM_USER + 777:
; 707  : 			SendMessage((HWND)wParam, WM_USER + 777, (WPARAM)JL_GetAddress(lParam), 0);

  00142	6a 00		 push	 0
  00144	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00147	51		 push	 ecx
  00148	e8 00 00 00 00	 call	 ?JL_GetAddress@@YAHH@Z	; JL_GetAddress
  0014d	83 c4 04	 add	 esp, 4
  00150	50		 push	 eax
  00151	68 09 07 00 00	 push	 1801			; 00000709H
  00156	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  00159	52		 push	 edx
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 708  : 
; 709  : 			break;

  00160	e9 ec 06 00 00	 jmp	 $LN2@WindMsgPro
$LN16@WindMsgPro:

; 710  : 
; 711  : 			//JL wgÂèëÈÄÅÊï∞ÊçÆÁªôgame
; 712  : 		case WM_USER + 888:
; 713  : 			JL_SetAddr(wParam, lParam);

  00165	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00168	50		 push	 eax
  00169	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0016c	51		 push	 ecx
  0016d	e8 00 00 00 00	 call	 ?JL_SetAddr@@YAXHH@Z	; JL_SetAddr
  00172	83 c4 08	 add	 esp, 8

; 714  : 			break;

  00175	e9 d7 06 00 00	 jmp	 $LN2@WindMsgPro
$LN17@WindMsgPro:

; 715  : 
; 716  : 		case WM_COPYDATA:
; 717  : 			if (wParam)

  0017a	83 7d 10 00	 cmp	 DWORD PTR _wParam$[ebp], 0
  0017e	74 24		 je	 SHORT $LN18@WindMsgPro

; 718  : 			{
; 719  : 				COPYDATASTRUCT* p = (COPYDATASTRUCT*)lParam;

  00180	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00183	89 55 f0	 mov	 DWORD PTR _p$3[ebp], edx

; 720  : 				memcpy((void*)wParam, p->lpData, p->dwData);

  00186	8b 45 f0	 mov	 eax, DWORD PTR _p$3[ebp]
  00189	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018b	51		 push	 ecx
  0018c	8b 55 f0	 mov	 edx, DWORD PTR _p$3[ebp]
  0018f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00192	50		 push	 eax
  00193	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00196	51		 push	 ecx
  00197	e8 00 00 00 00	 call	 _memcpy
  0019c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 721  : 				break;

  0019f	e9 ad 06 00 00	 jmp	 $LN2@WindMsgPro
$LN18@WindMsgPro:

; 722  : 			}
; 723  : 
; 724  : 			int para_count;
; 725  : 			__asm{
; 726  : 				mov esi, wParam;

  001a4	8b 75 10	 mov	 esi, DWORD PTR _wParam$[ebp]

; 727  : 				mov edi, lParam;

  001a7	8b 7d 14	 mov	 edi, DWORD PTR _lParam$[ebp]

; 728  : 				mov eax, [edi]; //dwdata

  001aa	8b 07		 mov	 eax, DWORD PTR [edi]

; 729  : 				mov para_count, eax;//‰øùÂ≠òstdcallÂèÇÊï∞‰∏™Êï∞

  001ac	89 45 e8	 mov	 DWORD PTR _para_count$1[ebp], eax

; 730  : 
; 731  : 				mov edi, [edi + 8]; //lpdata

  001af	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]

; 732  : 				mov eax, [edi + 4];//stringpos

  001b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 733  : 				cmp eax, 0;//ËøòÈúÄÈ™åËØÅeaxÊòØÂê¶ >10 or <1

  001b5	83 f8 00	 cmp	 eax, 0

; 734  : 				jz ___1;

  001b8	74 07		 je	 SHORT $___1$92

; 735  : 				lea ebx, [edi + 48];

  001ba	8d 5f 30	 lea	 ebx, DWORD PTR [edi+48]

; 736  : 				mov[edi + 4 + 4 * eax], ebx;

  001bd	89 5c 87 04	 mov	 DWORD PTR [edi+eax*4+4], ebx
$___1$92:

; 737  : 			___1:;
; 738  : 				push[edi + 11 * 4];

  001c1	ff 77 2c	 push	 DWORD PTR [edi+44]

; 739  : 				push[edi + 10 * 4];

  001c4	ff 77 28	 push	 DWORD PTR [edi+40]

; 740  : 				push[edi + 9 * 4];

  001c7	ff 77 24	 push	 DWORD PTR [edi+36]

; 741  : 				push[edi + 8 * 4];

  001ca	ff 77 20	 push	 DWORD PTR [edi+32]

; 742  : 				push[edi + 7 * 4];

  001cd	ff 77 1c	 push	 DWORD PTR [edi+28]

; 743  : 				push[edi + 6 * 4];

  001d0	ff 77 18	 push	 DWORD PTR [edi+24]

; 744  : 				push[edi + 5 * 4];

  001d3	ff 77 14	 push	 DWORD PTR [edi+20]

; 745  : 				push[edi + 4 * 4];

  001d6	ff 77 10	 push	 DWORD PTR [edi+16]

; 746  : 				push[edi + 3 * 4];

  001d9	ff 77 0c	 push	 DWORD PTR [edi+12]

; 747  : 				push[edi + 2 * 4];

  001dc	ff 77 08	 push	 DWORD PTR [edi+8]

; 748  : 				call[edi];

  001df	ff 17		 call	 DWORD PTR [edi]

; 749  : 				mov eax, para_count;

  001e1	8b 45 e8	 mov	 eax, DWORD PTR _para_count$1[ebp]

; 750  : 				mov ecx, 10;

  001e4	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH

; 751  : 				sub ecx, eax;

  001e9	2b c8		 sub	 ecx, eax

; 752  : 				shl ecx, 2;

  001eb	c1 e1 02	 shl	 ecx, 2

; 753  : 				add esp, ecx;

  001ee	03 e1		 add	 esp, ecx

; 754  : 			
; 755  : 			}
; 756  : 			break;

  001f0	e9 5c 06 00 00	 jmp	 $LN2@WindMsgPro
$LN19@WindMsgPro:

; 757  : 
; 758  : 
; 759  : 		/** „Ç∑„Çπ„ÉÜ„É†Èñ¢ÈÄ£„É°„ÉÉ„Çª„Éº„Ç∏  Á≥ªÁªüÁõ∏ÂÖ≥‰ø°ÊÅØ *****************************************************/
; 760  : 	case WM_ACTIVATE:	// „Åì„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åå„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂèà„ÅØÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´„Å™„Å£„ÅüÊôÇ  ÂΩìÊ≠§Â∫îÁî®Á®ãÂ∫èÂèò‰∏∫Ê¥ªÂä®ÊàñÈùûÊ¥ªÂä®Êó∂
; 761  : #ifdef SA_25
; 762  : 			static BOOL bInactive = FALSE;
; 763  : 			if( bInactive && (LOWORD(wParam) == WA_ACTIVE || LOWORD(wParam) == WA_CLICKACTIVE)){
; 764  : 				SetWindowPos( hWnd, NULL, 0, -100, 0, 0, NULL);
; 765  : 				ShowWindow( hWnd, SW_MINIMIZE);
; 766  : 				if( lpDraw && lpDraw->lpDD2){
; 767  : 					lpDraw->lpDD2->SetCooperativeLevel( hWnd ,DDSCL_NORMAL);
; 768  : 					ReleaseDirectDraw();
; 769  : 				}
; 770  : 			}
; 771  : 			if( LOWORD(wParam) == WA_INACTIVE){
; 772  : 				bInactive = TRUE;
; 773  : 				cleanupNetwork();
; 774  : 				PostQuitMessage( 0);
; 775  : 			}
; 776  : 			break;
; 777  : #endif
; 778  : 			// ?????????????????
; 779  : 			
; 780  : 			if( ( wParam == WA_ACTIVE || wParam == WA_CLICKACTIVE ) && lpDraw != NULL){

  001f5	83 7d 10 01	 cmp	 DWORD PTR _wParam$[ebp], 1
  001f9	74 06		 je	 SHORT $LN21@WindMsgPro
  001fb	83 7d 10 02	 cmp	 DWORD PTR _wParam$[ebp], 2
  001ff	75 5d		 jne	 SHORT $LN20@WindMsgPro
$LN21@WindMsgPro:
  00201	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A, 0 ; lpDraw
  00208	74 54		 je	 SHORT $LN20@WindMsgPro

; 781  : 				
; 782  : 				// ?????? LOST ?????
; 783  : 				if( CheckSurfaceLost() == TRUE ){

  0020a	e8 00 00 00 00	 call	 ?CheckSurfaceLost@@YAHXZ ; CheckSurfaceLost
  0020f	83 f8 01	 cmp	 eax, 1
  00212	75 05		 jne	 SHORT $LN22@WindMsgPro

; 784  : 					// ??????????????
; 785  : 					RecoverDirectDraw();

  00214	e8 00 00 00 00	 call	 ?RecoverDirectDraw@@YAXXZ ; RecoverDirectDraw
$LN22@WindMsgPro:

; 786  : 				}
; 787  : 				// ??????????????
; 788  : 			// „Éë„É¨„ÉÉ„Éà„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑÊôÇ
; 789  : 				if( lpDraw->lpPALETTE != NULL ){

  00219	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0021f	83 ba 80 00 00
	00 00		 cmp	 DWORD PTR [edx+128], 0
  00226	74 36		 je	 SHORT $LN20@WindMsgPro

; 790  : 				// „Ç¶„Ç£„É≥„Éâ„Ç¶„É¢„Éº„Éâ„ÅÆÊôÇ
; 791  : 					if( WindowMode ){

  00228	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?WindowMode@@3HA, 0 ; WindowMode
  0022f	74 2d		 je	 SHORT $LN20@WindMsgPro

; 792  : 					// ‰ΩúÊàê„Åó„Å¶„Åä„ÅÑ„Åü„Éë„É¨„ÉÉ„Éà„Å´Â§â„Åà„Çã
; 793  : 						lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );

  00231	68 00 00 00 00	 push	 OFFSET ?Palette@@3PAUtagPALETTEENTRY@@A ; Palette
  00236	68 00 01 00 00	 push	 256			; 00000100H
  0023b	6a 00		 push	 0
  0023d	6a 00		 push	 0
  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00244	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0024a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00250	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00256	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00258	50		 push	 eax
  00259	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0025c	ff d2		 call	 edx
$LN20@WindMsgPro:

; 794  : 					}
; 795  : 				}
; 796  : 			}
; 797  : 			//???????????Óé±Óíú
; 798  : 		//„ÉÄ„Ç§„É¨„ÇØ„Éà„Ç§„É≥„Éó„ÉÉ„Éà„ÅÆ‰øÆÊ≠£  ‰øÆÊ≠£Áõ¥Êé•ËæìÂÖ•
; 799  : 		//„Ç≠„Éº„Éú„Éº„ÉâÔºØÔº´„Å™„Çâ  Â¶ÇÊûúÈîÆÁõòÊ≠£Â∏∏
; 800  : 		if(keyboad_flg == TRUE){		//„Ç≠„Éº„Éú„Éº„ÉâÔºØÔº´„Å™„Çâ   Â¶ÇÊûúÈîÆÁõòÊ≠£Â∏∏

  0025e	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR ?keyboad_flg@@3DA ; keyboad_flg
  00265	83 f8 01	 cmp	 eax, 1
  00268	0f 85 8d 00 00
	00		 jne	 $LN25@WindMsgPro

; 801  : 			// „Ç≠„Éº„Éú„Éº„Éâ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„ÅÇ„Çã„Å®„Åç   ÂΩìÊúâÈîÆÁõòÂØπË±°Êó∂
; 802  : 				if(pDInputDevice != NULL){

  0026e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pDInputDevice@@3PAUIDirectInputDeviceA@@A, 0 ; pDInputDevice
  00275	0f 84 80 00 00
	00		 je	 $LN25@WindMsgPro

; 803  : 				// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅåÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´„Åï„Çå„Çã„Å®„Åç  Á™óÂè£ÂÅúÁî®Êó∂
; 804  : 					if(wParam == WA_INACTIVE){

  0027b	83 7d 10 00	 cmp	 DWORD PTR _wParam$[ebp], 0
  0027f	75 5c		 jne	 SHORT $LN27@WindMsgPro

; 805  : 					// DInput ÂÅúÊ≠¢
; 806  : 						DInputActiveFlag = FALSE;

  00281	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?DInputActiveFlag@@3HA, 0 ; DInputActiveFlag

; 807  : 					// „Ç≠„Éº„Éê„ÉÉ„Éï„Ç°„ÅÆÂàùÊúüÂåñ       ÂØÜÈí•ÁºìÂÜ≤Âå∫ÁöÑÂàùÂßãÂåñ
; 808  : 						for( int i = 0 ; i < 256 ; i++ ) di_key[ i ] = 0;

  0028b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  00292	eb 09		 jmp	 SHORT $LN6@WindMsgPro
$LN4@WindMsgPro:
  00294	8b 4d f8	 mov	 ecx, DWORD PTR _i$4[ebp]
  00297	83 c1 01	 add	 ecx, 1
  0029a	89 4d f8	 mov	 DWORD PTR _i$4[ebp], ecx
$LN6@WindMsgPro:
  0029d	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$4[ebp], 256 ; 00000100H
  002a4	7d 22		 jge	 SHORT $LN5@WindMsgPro
  002a6	8b 55 f8	 mov	 edx, DWORD PTR _i$4[ebp]
  002a9	89 55 ec	 mov	 DWORD PTR $T2[ebp], edx
  002ac	81 7d ec 00 01
	00 00		 cmp	 DWORD PTR $T2[ebp], 256	; 00000100H
  002b3	73 02		 jae	 SHORT $LN79@WindMsgPro
  002b5	eb 05		 jmp	 SHORT $LN80@WindMsgPro
$LN79@WindMsgPro:
  002b7	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN80@WindMsgPro:
  002bc	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  002bf	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?di_key@@3PAEA[eax], 0
  002c6	eb cc		 jmp	 SHORT $LN4@WindMsgPro
$LN5@WindMsgPro:

; 809  : 						pDInputDevice->Unacquire();

  002c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDInputDevice@@3PAUIDirectInputDeviceA@@A ; pDInputDevice
  002ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pDInputDevice@@3PAUIDirectInputDeviceA@@A ; pDInputDevice
  002d5	50		 push	 eax
  002d6	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  002d9	ff d1		 call	 ecx

; 810  : 					}

  002db	eb 1e		 jmp	 SHORT $LN25@WindMsgPro
$LN27@WindMsgPro:

; 811  : 					else{
; 812  : 					// DInput Âæ©Ê¥ª
; 813  : 						DInputActiveFlag = TRUE;

  002dd	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?DInputActiveFlag@@3HA, 1 ; DInputActiveFlag

; 814  : 						pDInputDevice->Acquire();

  002e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pDInputDevice@@3PAUIDirectInputDeviceA@@A ; pDInputDevice
  002ed	8b 02		 mov	 eax, DWORD PTR [edx]
  002ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDInputDevice@@3PAUIDirectInputDeviceA@@A ; pDInputDevice
  002f5	51		 push	 ecx
  002f6	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  002f9	ff d2		 call	 edx
$LN25@WindMsgPro:

; 815  : 					}
; 816  : 				}
; 817  : 			}
; 818  : 			
; 819  : 		//„Ç∏„Éß„Ç§„Çπ„ÉÜ„Ç£„ÉÉ„ÇØÔºØÔº´„Å™„Çâ  Â¶ÇÊûúÊìçÁ∫µÊùÜÊ≠£Â∏∏
; 820  : 			if(joy_flg == TRUE){		

  002fb	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR ?joy_flg@@3DA ; joy_flg
  00302	83 f8 01	 cmp	 eax, 1
  00305	75 51		 jne	 SHORT $LN29@WindMsgPro

; 821  : 			// „Ç∏„Éß„Ç§„Çπ„ÉÜ„Ç£„ÉÉ„ÇØ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„ÅÇ„Çã„Å®„Åç   ÂΩìÊúâÊìçÁ∫µÊùÜÂØπË±°Êó∂
; 822  : 				if(pDInputDevice2 == NULL)

  00307	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pDInputDevice2@@3PAUIDirectInputDevice2A@@A, 0 ; pDInputDevice2
  0030e	75 05		 jne	 SHORT $LN30@WindMsgPro

; 823  : 					break;

  00310	e9 3c 05 00 00	 jmp	 $LN2@WindMsgPro
$LN30@WindMsgPro:

; 824  : 				
; 825  : 			// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅåÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´„Åï„Çå„Çã„Å®„Åç   Á™óÂè£ÂÅúÁî®Êó∂
; 826  : 				if(wParam == WA_INACTIVE){

  00315	83 7d 10 00	 cmp	 DWORD PTR _wParam$[ebp], 0
  00319	75 1f		 jne	 SHORT $LN31@WindMsgPro

; 827  : 				// DInput ÂÅúÊ≠¢
; 828  : 					DInputActiveFlag = FALSE;

  0031b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?DInputActiveFlag@@3HA, 0 ; DInputActiveFlag

; 829  : 					pDInputDevice2->Unacquire();

  00325	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDInputDevice2@@3PAUIDirectInputDevice2A@@A ; pDInputDevice2
  0032b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0032d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pDInputDevice2@@3PAUIDirectInputDevice2A@@A ; pDInputDevice2
  00332	50		 push	 eax
  00333	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00336	ff d1		 call	 ecx

; 830  : 				}

  00338	eb 1e		 jmp	 SHORT $LN29@WindMsgPro
$LN31@WindMsgPro:

; 831  : 				else{
; 832  : 				// DInput Âæ©Ê¥ª
; 833  : 					DInputActiveFlag = TRUE;

  0033a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?DInputActiveFlag@@3HA, 1 ; DInputActiveFlag

; 834  : 					pDInputDevice2->Acquire();

  00344	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pDInputDevice2@@3PAUIDirectInputDevice2A@@A ; pDInputDevice2
  0034a	8b 02		 mov	 eax, DWORD PTR [edx]
  0034c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDInputDevice2@@3PAUIDirectInputDevice2A@@A ; pDInputDevice2
  00352	51		 push	 ecx
  00353	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00356	ff d2		 call	 edx
$LN29@WindMsgPro:

; 835  : 				}
; 836  : 			}
; 837  : 			break;

  00358	e9 f4 04 00 00	 jmp	 $LN2@WindMsgPro
$LN33@WindMsgPro:

; 838  : 	case WM_CLOSE:				// „Ç¶„Ç£„É≥„Éâ„Ç¶Èñâ„Åò„Çã„Å®„Åç
; 839  : 		DestroyWindow( hWnd );	// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÁ†¥Ê£Ñ„Åô„Çã„ÄÅÂêåÊôÇ„Å´

  0035d	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00360	50		 push	 eax
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4

; 840  : 		// WM_DESTROY „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÈÄÅ„Çâ„Çå„Çã
; 841  : 			break;

  00367	e9 e5 04 00 00	 jmp	 $LN2@WindMsgPro
$LN34@WindMsgPro:

; 842  : 			
; 843  : 	case WM_DESTROY:			// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅåÁ†¥Ê£Ñ„Åï„Çå„Åü„Å®„Åç
; 844  : 		PostQuitMessage( 0 );	// WM_QUIT „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ„Çã ( Âá¶ÁêÜ„ÅÆÁµÇ‰∫Ü )

  0036c	6a 00		 push	 0
  0036e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4

; 845  : 			break;

  00374	e9 d8 04 00 00	 jmp	 $LN2@WindMsgPro
$LN35@WindMsgPro:

; 846  : #ifdef _REMAKE_20		
; 847  : #ifndef _STONDEBUG_			
; 848  : 		case WM_ACTIVATEAPP:
; 849  : 			// Â¶ÇÊûúË¢´ÂàáÂà∞Âà´ÁöÑËßÜÁ™ó,Á¶ªÂºÄÊ∏∏Êàè
; 850  : 			if(!wParam){
; 851  : 				SendMessage(hWnd,WM_CLOSE,0,0);
; 852  : 			}
; 853  : 			break;
; 854  : #endif
; 855  : #endif
; 856  : 			
; 857  : #if 0			
; 858  : 	case WM_PALETTECHANGED:		// „Éë„É¨„ÉÉ„Éà„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç
; 859  : 		// DirectDraw„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑÊôÇ
; 860  : 			if( lpDraw == NULL ) break;
; 861  : 		// „Éë„É¨„ÉÉ„Éà„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑÊôÇ
; 862  : 			if( lpDraw->lpPALETTE == NULL ) break;
; 863  : 		// „Ç¶„Ç£„É≥„Éâ„Ç¶„É¢„Éº„Éâ„ÅÆÊôÇ
; 864  : 			//if( WindowMode ){
; 865  : 		// ‰ΩúÊàê„Åó„Å¶„Åä„ÅÑ„Åü„Éë„É¨„ÉÉ„Éà„Å´Â§â„Åà„Çã
; 866  : 			lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
; 867  : 			//}
; 868  : 			break;
; 869  : 			//if( (HWND)wParam == hWnd )  break;
; 870  : 			
; 871  : 	case WM_PALETTEISCHANGING:		// „Éë„É¨„ÉÉ„Éà„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç
; 872  : 		// DirectDraw„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑÊôÇ
; 873  : 			if( lpDraw == NULL ) break;
; 874  : 		// „Éë„É¨„ÉÉ„Éà„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑÊôÇ
; 875  : 			if( lpDraw->lpPALETTE == NULL ) break;
; 876  : 		// „Ç¶„Ç£„É≥„Éâ„Ç¶„É¢„Éº„Éâ„ÅÆÊôÇ
; 877  : 			//if( WindowMode ){
; 878  : 		// ‰ΩúÊàê„Åó„Å¶„Åä„ÅÑ„Åü„Éë„É¨„ÉÉ„Éà„Å´Â§â„Åà„Çã
; 879  : 			lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
; 880  : 			//}
; 881  : 			break;
; 882  : 			
; 883  : 	case WM_QUERYNEWPALETTE:	// „Éë„É¨„ÉÉ„ÉàÂ§âÊõ¥„Åß„Åç„Çã„Å®„ÅçÔºà„Ç¶„Ç£„É≥„Éâ„Ç¶„É¢„Éº„Éâ„ÅÆÊôÇ„ÅÆ„ÅøÔºâ
; 884  : 			
; 885  : 		// DirectDraw„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑÊôÇ
; 886  : 			if( lpDraw == NULL ) break;
; 887  : 		// „Éë„É¨„ÉÉ„Éà„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑÊôÇ
; 888  : 			if( lpDraw->lpPALETTE == NULL ) break;
; 889  : 			
; 890  : 		// „Ç¶„Ç£„É≥„Éâ„Ç¶„É¢„Éº„Éâ„ÅÆÊôÇ
; 891  : 			//if( WindowMode ){
; 892  : 		// ‰ΩúÊàê„Åó„Å¶„Åä„ÅÑ„Åü„Éë„É¨„ÉÉ„Éà„Å´Â§â„Åà„Çã
; 893  : 			lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );
; 894  : 			//}
; 895  : 			
; 896  : 			break;
; 897  : #endif			
; 898  : 
; 899  : 		/** „Ç≠„ÉºÂÖ•Âäõ„É°„ÉÉ„Çª„Éº„Ç∏ *****************************************************/
; 900  : 			
; 901  : 	case WM_KEYDOWN:
; 902  : 			if( SurfaceBusyFlag == TRUE ){

  00379	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?SurfaceBusyFlag@@3HA, 1 ; SurfaceBusyFlag
  00380	75 0f		 jne	 SHORT $LN36@WindMsgPro

; 903  : 				SurfaceBusyFlag = FALSE;

  00382	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, 0 ; SurfaceBusyFlag

; 904  : 				RecoverDirectDraw();

  0038c	e8 00 00 00 00	 call	 ?RecoverDirectDraw@@YAXXZ ; RecoverDirectDraw
$LN36@WindMsgPro:

; 905  : 			}
; 906  : 			
; 907  : 			switch( wParam ){

  00391	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00394	89 4d f4	 mov	 DWORD PTR tv178[ebp], ecx
  00397	8b 55 f4	 mov	 edx, DWORD PTR tv178[ebp]
  0039a	83 ea 08	 sub	 edx, 8
  0039d	89 55 f4	 mov	 DWORD PTR tv178[ebp], edx
  003a0	83 7d f4 26	 cmp	 DWORD PTR tv178[ebp], 38 ; 00000026H
  003a4	0f 87 85 00 00
	00		 ja	 $LN7@WindMsgPro
  003aa	8b 45 f4	 mov	 eax, DWORD PTR tv178[ebp]
  003ad	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN88@WindMsgPro[eax]
  003b4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN89@WindMsgPro[ecx*4]
$LN37@WindMsgPro:

; 908  : 			case VK_LEFT:
; 909  : 				KeyboardLeft();

  003bb	e8 00 00 00 00	 call	 ?KeyboardLeft@@YAXXZ	; KeyboardLeft

; 910  : 				break;

  003c0	eb 6d		 jmp	 SHORT $LN7@WindMsgPro
$LN38@WindMsgPro:

; 911  : 				
; 912  : 			case VK_RIGHT:
; 913  : 				KeyboardRight();

  003c2	e8 00 00 00 00	 call	 ?KeyboardRight@@YAXXZ	; KeyboardRight

; 914  : 				break;

  003c7	eb 66		 jmp	 SHORT $LN7@WindMsgPro
$LN39@WindMsgPro:

; 915  : 				
; 916  : 		case VK_RETURN:
; 917  : 				KeyboardReturn();

  003c9	e8 00 00 00 00	 call	 ?KeyboardReturn@@YAXXZ	; KeyboardReturn

; 918  : 				break;

  003ce	eb 5f		 jmp	 SHORT $LN7@WindMsgPro
$LN40@WindMsgPro:

; 919  : 		case VK_BACK:	// BS „Åß‰∏ÄÊñáÂ≠óÂâäÈô§
; 920  : 				
; 921  : 				// ????????????
; 922  : 				if( joy_con[ 1 ] & JOY_RSHIFT || joy_con[ 1 ] & JOY_LSHIFT ){

  003d0	ba 04 00 00 00	 mov	 edx, 4
  003d5	c1 e2 00	 shl	 edx, 0
  003d8	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?joy_con@@3PAKA[edx]
  003de	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  003e3	75 16		 jne	 SHORT $LN43@WindMsgPro
  003e5	b9 04 00 00 00	 mov	 ecx, 4
  003ea	c1 e1 00	 shl	 ecx, 0
  003ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?joy_con@@3PAKA[ecx]
  003f3	81 e2 00 00 00
	08		 and	 edx, 134217728		; 08000000H
  003f9	74 28		 je	 SHORT $LN41@WindMsgPro
$LN43@WindMsgPro:

; 923  : 					// Óöº?????????
; 924  : 					if( pNowStrBuffer != NULL ){

  003fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A, 0 ; pNowStrBuffer
  00402	74 1d		 je	 SHORT $LN44@WindMsgPro

; 925  : 						// Óöº?????Óû∞?????
; 926  : 						pNowStrBuffer->cnt = 0;

  00404	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A ; pNowStrBuffer
  00409	c6 80 07 01 00
	00 00		 mov	 BYTE PTR [eax+263], 0

; 927  : 						pNowStrBuffer->buffer[ 0 ] = NULL;

  00410	b9 01 00 00 00	 mov	 ecx, 1
  00415	6b d1 00	 imul	 edx, ecx, 0
  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A ; pNowStrBuffer
  0041d	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
$LN44@WindMsgPro:

; 928  : 					}
; 929  : 				}else{

  00421	eb 05		 jmp	 SHORT $LN42@WindMsgPro
$LN41@WindMsgPro:

; 930  : 			// Ôº¢Ôº≥„Ç≠„ÉºÂá¶ÁêÜ 
; 931  : 					KeyboardBackSpace();

  00423	e8 00 00 00 00	 call	 ?KeyboardBackSpace@@YAXXZ ; KeyboardBackSpace
$LN42@WindMsgPro:

; 932  : 				}
; 933  : 				
; 934  : 				break;

  00428	eb 05		 jmp	 SHORT $LN7@WindMsgPro
$LN45@WindMsgPro:

; 935  : 				
; 936  : 		case VK_DELETE:	// „ÉÅ„É£„ÉÉ„Éà„Éê„ÉÉ„Éï„Ç°„ÇØ„É™„Ç¢
; 937  : 
; 938  : 			/* „ÉÅ„É£„ÉÉ„ÉàÊñáÂ≠ó„ÇíÂÖ®„Å¶„ÇØ„É™„Ç¢„Åô„Çã */
; 939  : 				ClearChatBuffer();

  0042a	e8 00 00 00 00	 call	 ?ClearChatBuffer@@YAXXZ	; ClearChatBuffer
$LN7@WindMsgPro:

; 940  : #ifdef _TALK_WINDOW
; 941  : 				TalkWindow.ClearChatBuffer();
; 942  : 				TalkWindow.Update();
; 943  : #endif
; 944  : 				break;
; 945  : 				
; 946  : 			case VK_ESCAPE: // ???????????
; 947  : 				// ???????? WM_CLOSE ??????????
; 948  : 				//PostMessage( hWnd, WM_CLOSE, 0, 0L );
; 949  : 				break;
; 950  : 			}
; 951  : #ifdef _TALK_WINDOW
; 952  : 			if(g_bTalkWindow) TalkWindow.Update();
; 953  : #endif
; 954  : 			break;

  0042f	e9 1d 04 00 00	 jmp	 $LN2@WindMsgPro
$LN47@WindMsgPro:

; 955  : #ifdef _REMAKE_20
; 956  : 		case WM_HOTKEY:
; 957  : 				// Â¶ÇÊûúË¢´ÂàáÂà∞Âà´ÁöÑËßÜÁ™ó,Á¶ªÂºÄÊ∏∏Êàè
; 958  : 				SendMessage(hWnd,WM_CLOSE,0,0);	
; 959  : 			break;
; 960  : #endif			
; 961  : 		case WM_SYSKEYDOWN:	// ALT????????
; 962  : 				// ???????????
; 963  : 		// „Çµ„Éº„Éï„Çß„Çπ„É¥„Ç£„Ç∏„Éº„ÅÆÊôÇ
; 964  : 			if( SurfaceBusyFlag == TRUE ){

  00434	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?SurfaceBusyFlag@@3HA, 1 ; SurfaceBusyFlag
  0043b	75 25		 jne	 SHORT $LN48@WindMsgPro

; 965  : 				SurfaceBusyFlag = FALSE;

  0043d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, 0 ; SurfaceBusyFlag

; 966  : 				MessageBox( hWnd, "SurfaceBusyFlag error!", "ÌôïÏù∏", MB_OK | MB_ICONSTOP );

  00447	6a 10		 push	 16			; 00000010H
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
  0044e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OHJJEBKC@SurfaceBusyFlag?5error?$CB@
  00453	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00456	51		 push	 ecx
  00457	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 967  : 					
; 968  : 				// ??????????????
; 969  : 				RecoverDirectDraw();

  0045d	e8 00 00 00 00	 call	 ?RecoverDirectDraw@@YAXXZ ; RecoverDirectDraw
$LN48@WindMsgPro:

; 970  : 			}
; 971  : 				switch( wParam ){

  00462	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  00465	89 55 e4	 mov	 DWORD PTR tv195[ebp], edx
  00468	83 7d e4 0d	 cmp	 DWORD PTR tv195[ebp], 13 ; 0000000dH
  0046c	74 05		 je	 SHORT $LN49@WindMsgPro
  0046e	e9 6e 01 00 00	 jmp	 $LN60@WindMsgPro
$LN49@WindMsgPro:

; 972  : 				case VK_RETURN:	// ALT+RETURN ?????????Óüâ?
; 973  : #ifdef _REMAKE_20
; 974  : #ifndef _STONDEBUG_
; 975  : 					// Áº©ÊàêËßÜÁ™óÊ®°ÂºèÁ¶ªÂºÄÊ∏∏Êàè
; 976  : 					SendMessage(hWnd,WM_CLOSE,0,0);
; 977  : 					break;
; 978  : #endif
; 979  : #else
; 980  : 			// ÊºîÂá∫‰∏≠„ÅØÊäú„Åë„Çã
; 981  : 					if( BackBufferDrawType == DRAW_BACK_PRODUCE ) break; 

  00473	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  0047a	75 05		 jne	 SHORT $LN50@WindMsgPro
  0047c	e9 81 01 00 00	 jmp	 $LN9@WindMsgPro
$LN50@WindMsgPro:

; 982  : 					
; 983  : 			// DirectDraw„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑÊôÇ
; 984  : 					if( lpDraw == NULL ) break;

  00481	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A, 0 ; lpDraw
  00488	75 05		 jne	 SHORT $LN51@WindMsgPro
  0048a	e9 73 01 00 00	 jmp	 $LN9@WindMsgPro
$LN51@WindMsgPro:

; 985  : 					
; 986  : 			// „Ç¶„Ç£„É≥„Éâ„Ç¶„É¢„Éº„Éâ„Éï„É©„Ç∞Â§âÊõ¥
; 987  : 					if( WindowMode == TRUE ) WindowMode = FALSE;

  0048f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?WindowMode@@3HA, 1 ; WindowMode
  00496	75 0c		 jne	 SHORT $LN52@WindMsgPro
  00498	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?WindowMode@@3HA, 0 ; WindowMode
  004a2	eb 0a		 jmp	 SHORT $LN53@WindMsgPro
$LN52@WindMsgPro:

; 988  : 					else WindowMode = TRUE;

  004a4	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?WindowMode@@3HA, 1 ; WindowMode
$LN53@WindMsgPro:

; 989  : #ifdef _TALK_WINDOW
; 990  : 					if(g_bTalkWindow){
; 991  : 						g_bTalkWindow = FALSE;
; 992  : 						TalkWindow.Visible(FALSE);
; 993  : 					}
; 994  : #endif
; 995  : 					ChangeMode(WindowMode);

  004ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?WindowMode@@3HA ; WindowMode
  004b3	50		 push	 eax
  004b4	e8 00 00 00 00	 call	 ?ChangeMode@@YAXH@Z	; ChangeMode
  004b9	83 c4 04	 add	 esp, 4

; 996  : 					
; 997  : 			// DirectDraw ÈñãÊîæ
; 998  : 					ReleaseDirectDraw();

  004bc	e8 00 00 00 00	 call	 ?ReleaseDirectDraw@@YAXXZ ; ReleaseDirectDraw

; 999  : 					
; 1000 : 			// Ëß£ÂÉèÂ∫¶„É¢„Éº„ÉâË®≠ÂÆö
; 1001 : 					SetResoMode( ResoMode );

  004c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ResoMode@@3HA ; ResoMode
  004c7	51		 push	 ecx
  004c8	e8 00 00 00 00	 call	 ?SetResoMode@@YAXH@Z	; SetResoMode
  004cd	83 c4 04	 add	 esp, 4

; 1002 : 					
; 1003 : 			// DirectDraw ÂàùÊúüÂåñ
; 1004 : 					InitDirectDraw();

  004d0	e8 00 00 00 00	 call	 ?InitDirectDraw@@YAHXZ	; InitDirectDraw

; 1005 : 			// „Ç™„Éï„Çπ„ÇØ„É™„Éº„É≥„Çµ„Éº„Éï„Çß„Çπ„ÅÆ‰ΩúÊàê 
; 1006 : 					InitOffScreenSurface();

  004d5	e8 00 00 00 00	 call	 ?InitOffScreenSurface@@YAHXZ ; InitOffScreenSurface

; 1007 : 			// „Ç¶„Ç£„É≥„Éâ„Ç¶„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà
; 1008 : 					ChangeWindowMode();

  004da	e8 00 00 00 00	 call	 ?ChangeWindowMode@@YAXXZ ; ChangeWindowMode

; 1009 : 			// ÂÖ®„Ç¶„Ç£„É≥„Éâ„Ç¶„Å´ÂÜçÊèèÁîªË¶ÅÊ±Ç
; 1010 : 					//SendMessage( HWND_BROADCAST, WM_PAINT, NULL, NULL );
; 1011 : 					
; 1012 : 			// „Éë„É¨„ÉÉ„ÉàÂàùÊúüÂåñ
; 1013 : 					if( InitPalette() == FALSE ){

  004df	e8 00 00 00 00	 call	 ?InitPalette@@YAHXZ	; InitPalette
  004e4	85 c0		 test	 eax, eax
  004e6	75 13		 jne	 SHORT $LN54@WindMsgPro

; 1014 : 						//PostMessage( hWnd, WM_CLOSE, 0, 0L );
; 1015 : 						PostMessage( hWnd, WM_SYSKEYDOWN, VK_RETURN, 0L );

  004e8	6a 00		 push	 0
  004ea	6a 0d		 push	 13			; 0000000dH
  004ec	68 04 01 00 00	 push	 260			; 00000104H
  004f1	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  004f4	52		 push	 edx
  004f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$LN54@WindMsgPro:

; 1016 : 					}
; 1017 : 			// „Éê„Éà„É´„Éû„ÉÉ„ÉóË™≠„ÅøËæº„Åø„Å®„Éê„Éà„É´„Çµ„Éº„Éï„Çß„Çπ„ÅÆÁîªÂÉè‰ΩúÊàê
; 1018 : 					if( ProcNo == PROC_BATTLE ){ 

  004fb	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  00502	75 5e		 jne	 SHORT $LN55@WindMsgPro

; 1019 : 				// „Éê„ÉÉ„Éï„Ç°ÂàùÊúüÂåñ
; 1020 : 						DispBuffer.DispCnt = 0;

  00504	33 c0		 xor	 eax, eax
  00506	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 1021 : 						FontCnt = 0;

  0050c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, 0 ; FontCnt

; 1022 : 						ReadBattleMap( BattleMapNo );

  00516	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BattleMapNo@@3HA ; BattleMapNo
  0051c	51		 push	 ecx
  0051d	e8 00 00 00 00	 call	 ?ReadBattleMap@@YAHH@Z	; ReadBattleMap
  00522	83 c4 04	 add	 esp, 4

; 1023 : 				// „Éê„ÉÉ„ÇØ„Çµ„Éº„Éï„Çß„Çπ„ÇíÈªí„Åß„ÇØ„É™„Ç¢„Éº   Áî®ÈªëÂÆåÊàêË°®Èù¢ÁöÑË°®Èù¢ 
; 1024 : 						ClearBackSurface();	

  00525	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 1025 : 						// ????????????????
; 1026 : #ifdef __SKYISLAND
; 1027 : 						fastDrawTileFlag = 0;

  0052a	33 d2		 xor	 edx, edx
  0052c	66 89 15 00 00
	00 00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, dx ; fastDrawTileFlag

; 1028 : 				// Ôº¢Ôº≠Ôº∞„Çí„Éê„ÉÉ„ÇØ„Çµ„Éº„Éï„Çß„Çπ„Å´„Çª„ÉÉ„Éà
; 1029 : 						PutBmp();	

  00533	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 1030 : 						fastDrawTileFlag = 1;

  00538	b8 01 00 00 00	 mov	 eax, 1
  0053d	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 1031 : #else
; 1032 : 						PutBmp();	
; 1033 : 				// „Éê„ÉÉ„ÇØ„Çµ„Éº„Éï„Çß„Çπ„Åã„Çâ„Éê„Éà„É´„Çµ„Éº„Éï„Çß„Çπ„Å∏„Ç≥„Éî„Éº
; 1034 : 						lpBattleSurface->BltFast( 0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT );
; 1035 : #endif
; 1036 : 				// „Éê„ÉÉ„Éï„Ç°ÂàùÊúüÂåñ
; 1037 : 						DispBuffer.DispCnt = 0;

  00543	33 c9		 xor	 ecx, ecx
  00545	66 89 0d 00 c0
	01 00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, cx

; 1038 : 						FontCnt = 0;

  0054c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, 0 ; FontCnt

; 1039 : 				// ÁèæÂú®„ÅÆÊôÇÈñì„ÇíË®òÊÜ∂
; 1040 : 						NowTime = TimeGetTime();

  00556	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0055b	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime

; 1041 : 					}	

  00560	eb 19		 jmp	 SHORT $LN56@WindMsgPro
$LN55@WindMsgPro:

; 1042 : 					else
; 1043 : 						if( fastDrawTile && ProcNo == PROC_GAME )

  00562	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR ?fastDrawTile@@3FB ; fastDrawTile
  00569	85 d2		 test	 edx, edx
  0056b	74 0e		 je	 SHORT $LN56@WindMsgPro
  0056d	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?ProcNo@@3IA, 9 ; ProcNo
  00574	75 05		 jne	 SHORT $LN56@WindMsgPro

; 1044 : 						{
; 1045 : 							repairMap();	// ????Ó°°?Óé±?

  00576	e8 00 00 00 00	 call	 ?repairMap@@YAXXZ	; repairMap
$LN56@WindMsgPro:

; 1046 : 						}
; 1047 : 						// ??????????????
; 1048 : 						if( lpDraw->lpPALETTE != NULL ){

  0057b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00580	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [eax+128], 0
  00587	74 36		 je	 SHORT $LN58@WindMsgPro

; 1049 : 							// ??????????
; 1050 : 							if( WindowMode ){

  00589	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?WindowMode@@3HA, 0 ; WindowMode
  00590	74 2d		 je	 SHORT $LN58@WindMsgPro

; 1051 : 								// ?Óíï??????????Óüâ??
; 1052 : 								lpDraw->lpPALETTE->SetEntries( 0, 0, 256, Palette );

  00592	68 00 00 00 00	 push	 OFFSET ?Palette@@3PAUtagPALETTEENTRY@@A ; Palette
  00597	68 00 01 00 00	 push	 256			; 00000100H
  0059c	6a 00		 push	 0
  0059e	6a 00		 push	 0
  005a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  005a6	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  005ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  005b1	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  005b7	8b 12		 mov	 edx, DWORD PTR [edx]
  005b9	51		 push	 ecx
  005ba	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  005bd	ff d0		 call	 eax
$LN58@WindMsgPro:

; 1053 : 							}
; 1054 : 						}
; 1055 : 						// ???????Óöº?????
; 1056 : 						mouse.state = MOUSE_NO_CRICK;

  005bf	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 0

; 1057 : 						mouse.onceState = MOUSE_NO_CRICK;

  005c9	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 0

; 1058 : 						// ???ÓñΩ?Ó†í????
; 1059 : 						NowTime = TimeGetTime();

  005d3	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  005d8	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime

; 1060 : 						break;

  005dd	eb 23		 jmp	 SHORT $LN9@WindMsgPro

; 1061 : #endif
; 1062 : 				break;

  005df	eb 21		 jmp	 SHORT $LN9@WindMsgPro
$LN60@WindMsgPro:

; 1063 : 				default:
; 1064 : 					if( wParam != VK_F10){

  005e1	83 7d 10 79	 cmp	 DWORD PTR _wParam$[ebp], 121 ; 00000079H
  005e5	74 1b		 je	 SHORT $LN9@WindMsgPro

; 1065 : 			// Êú™Âá¶ÁêÜ„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Éá„Éï„Ç©„É´„ÉàÂá¶ÁêÜÈñ¢Êï∞„Å∏Ê∏°„Åó„Å¶Âá¶ÁêÜ„Åï„Åõ„Çã
; 1066 : 						return DefWindowProc( hWnd, Message, wParam, lParam );

  005e7	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  005ea	51		 push	 ecx
  005eb	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  005ee	52		 push	 edx
  005ef	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  005f2	50		 push	 eax
  005f3	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  005f6	51		 push	 ecx
  005f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  005fd	e9 51 02 00 00	 jmp	 $LN78@WindMsgPro
$LN9@WindMsgPro:

; 1067 : 					}
; 1068 : 					break;
; 1069 : 				}
; 1070 : 				break;

  00602	e9 4a 02 00 00	 jmp	 $LN2@WindMsgPro
$LN62@WindMsgPro:

; 1071 : 	case WM_CHAR:	// ÊñáÂ≠óÂÖ•ÂäõÂá¶ÁêÜ
; 1072 : 
; 1073 : 		// ÊñáÂ≠ó„Éê„ÉÉ„Éï„Ç°„Å´Ê∫ú„ÇÅ„Çã
; 1074 : 					StockStrBufferChar( ( char )wParam );

  00607	0f b6 55 10	 movzx	 edx, BYTE PTR _wParam$[ebp]
  0060b	52		 push	 edx
  0060c	e8 00 00 00 00	 call	 ?StockStrBufferChar@@YAXD@Z ; StockStrBufferChar
  00611	83 c4 04	 add	 esp, 4

; 1075 : 					break;

  00614	e9 38 02 00 00	 jmp	 $LN2@WindMsgPro
$LN63@WindMsgPro:

; 1076 : 		/** „Éû„Ç¶„ÇπÂÖ•Âäõ„É°„ÉÉ„Çª„Éº„Ç∏ *****************************************************/
; 1077 : 	case WM_MOUSEMOVE:		// „Éû„Ç¶„Çπ„ÇíÂãï„Åã„Åó„ÅüÊôÇ
; 1078 : 					//SetCursor( wndclass.hCursor );
; 1079 : 		// ÁèæÂú®„ÅÆ„Éû„Ç¶„Çπ„ÅÆ‰ΩçÁΩÆ„ÇíË®òÊÜ∂„Åô„Çã
; 1080 : 					MouseNowPoint( LOWORD(lParam), HIWORD(lParam) );

  00619	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0061c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0061f	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00624	0f b7 c8	 movzx	 ecx, ax
  00627	51		 push	 ecx
  00628	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  0062b	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00631	0f b7 c2	 movzx	 eax, dx
  00634	50		 push	 eax
  00635	e8 00 00 00 00	 call	 ?MouseNowPoint@@YAXHH@Z	; MouseNowPoint
  0063a	83 c4 08	 add	 esp, 8

; 1081 : #ifndef _TALK_WINDOW
; 1082 : 					if( mouse.flag == TRUE ){ 

  0063d	83 3d 4c 00 00
	00 01		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+76, 1
  00644	75 12		 jne	 SHORT $LN64@WindMsgPro

; 1083 : 			ShowCursor( FALSE ); // „Éû„Ç¶„Çπ„Ç´„Éº„ÇΩ„É´„ÇíÊ∂à„Åô

  00646	6a 00		 push	 0
  00648	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowCursor@4

; 1084 : 						mouse.flag = FALSE;

  0064e	c7 05 4c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+76, 0
$LN64@WindMsgPro:

; 1085 : 					}
; 1086 : #else
; 1087 : 					if(MouseCursorFlag == FALSE && g_iCursorCount > -1){
; 1088 : 						while(g_iCursorCount > -1) g_iCursorCount = ShowCursor( FALSE );
; 1089 : 						mouse.flag = FALSE;
; 1090 : 					}
; 1091 : 					else if(MouseCursorFlag == TRUE && g_iCursorCount < 0){
; 1092 : 						while(g_iCursorCount < 0) g_iCursorCount = ShowCursor( TRUE );
; 1093 : 					}
; 1094 : #endif
; 1095 : 					// ???????????
; 1096 : 					if( SurfaceBusyFlag == TRUE ){

  00658	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?SurfaceBusyFlag@@3HA, 1 ; SurfaceBusyFlag
  0065f	75 0f		 jne	 SHORT $LN65@WindMsgPro

; 1097 : 						SurfaceBusyFlag = FALSE;

  00661	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SurfaceBusyFlag@@3HA, 0 ; SurfaceBusyFlag

; 1098 : 						// ??????????????
; 1099 : 						RecoverDirectDraw();

  0066b	e8 00 00 00 00	 call	 ?RecoverDirectDraw@@YAXXZ ; RecoverDirectDraw
$LN65@WindMsgPro:

; 1100 : 					}
; 1101 : 					break;

  00670	e9 dc 01 00 00	 jmp	 $LN2@WindMsgPro
$LN66@WindMsgPro:

; 1102 : 	case WM_NCMOUSEMOVE:	// „Éû„Ç¶„Çπ„Åå„Ç¶„Ç£„É≥„Éâ„Ç¶„Åã„Çâ„ÅØ„ÅøÂá∫„ÅüÊôÇ
; 1103 : 
; 1104 : 		// „Éû„Ç¶„Çπ„ÇØ„É™„ÉÉ„ÇØÂÖ•Âäõ„ÅÆÂàùÊúüÂåñ
; 1105 : 					mouse.state = MOUSE_NO_CRICK;

  00675	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 0

; 1106 : 					mouse.onceState = MOUSE_NO_CRICK;

  0067f	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 0

; 1107 : 					if( mouse.flag == FALSE ){ 

  00689	83 3d 4c 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+76, 0
  00690	75 12		 jne	 SHORT $LN67@WindMsgPro

; 1108 : #ifdef _TALK_WINDOW
; 1109 : 						g_iCursorCount = ShowCursor( TRUE );
; 1110 : #else
; 1111 : 			ShowCursor( TRUE ); // „Éû„Ç¶„Çπ„Ç´„Éº„ÇΩ„É´„ÇíË°®Á§∫

  00692	6a 01		 push	 1
  00694	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowCursor@4

; 1112 : #endif
; 1113 : 						mouse.flag = TRUE;

  0069a	c7 05 4c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+76, 1
$LN67@WindMsgPro:

; 1114 : 					}
; 1115 : 					break;

  006a4	e9 a8 01 00 00	 jmp	 $LN2@WindMsgPro
$LN68@WindMsgPro:

; 1116 : 	case WM_LBUTTONDOWN:	// Â∑¶„ÇØ„É™„ÉÉ„ÇØ(Êäº„Åó„ÅüÊôÇ)
; 1117 : #ifdef _80_LOGIN_PLAY
; 1118 : 					if (ProcNo == PROC_80_LOGIN)
; 1119 : 						break;
; 1120 : #endif
; 1121 : 					
; 1122 : #ifdef _REMAKE_20
; 1123 : 					// Ê£ÄÊü•‰ΩøÁî®ËÄÖÊòØÂê¶ÁúüÁöÑÊåâ‰∏ãÊªëÈº†
; 1124 : 					if(!IsLMouseButtonDown()) mouseCursorMode = 0;
; 1125 : 					else
; 1126 : #endif
; 1127 : 		// Â∑¶„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„ÅüÊôÇ„ÅÆ„Éû„Ç¶„Çπ„ÅÆ‰ΩçÁΩÆ„ÇíË®òÊÜ∂„Åô„Çã
; 1128 : 						MouseCrickLeftDownPoint( LOWORD(lParam), HIWORD(lParam) );

  006a9	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  006ac	c1 e9 10	 shr	 ecx, 16			; 00000010H
  006af	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  006b5	0f b7 d1	 movzx	 edx, cx
  006b8	52		 push	 edx
  006b9	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  006bc	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  006c1	0f b7 c8	 movzx	 ecx, ax
  006c4	51		 push	 ecx
  006c5	e8 00 00 00 00	 call	 ?MouseCrickLeftDownPoint@@YAXHH@Z ; MouseCrickLeftDownPoint
  006ca	83 c4 08	 add	 esp, 8

; 1129 : 					break;

  006cd	e9 7f 01 00 00	 jmp	 $LN2@WindMsgPro
$LN69@WindMsgPro:

; 1130 : 	case WM_LBUTTONUP:		// Â∑¶„ÇØ„É™„ÉÉ„ÇØ(Èõ¢„Åó„ÅüÊôÇ)
; 1131 : 
; 1132 : 		// Â∑¶„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„ÅüÊôÇ„ÅÆ„Éû„Ç¶„Çπ„ÅÆ‰ΩçÁΩÆ„ÇíË®òÊÜ∂„Åô„Çã
; 1133 : 					MouseCrickLeftUpPoint( LOWORD(lParam), HIWORD(lParam) );

  006d2	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  006d5	c1 ea 10	 shr	 edx, 16			; 00000010H
  006d8	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  006de	0f b7 c2	 movzx	 eax, dx
  006e1	50		 push	 eax
  006e2	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  006e5	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  006eb	0f b7 d1	 movzx	 edx, cx
  006ee	52		 push	 edx
  006ef	e8 00 00 00 00	 call	 ?MouseCrickLeftUpPoint@@YAXHH@Z ; MouseCrickLeftUpPoint
  006f4	83 c4 08	 add	 esp, 8

; 1134 : 					break;

  006f7	e9 55 01 00 00	 jmp	 $LN2@WindMsgPro
$LN70@WindMsgPro:

; 1135 : 	case WM_LBUTTONDBLCLK:		// Â∑¶„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ
; 1136 : #ifdef _80_LOGIN_PLAY
; 1137 : 					if (ProcNo == PROC_80_LOGIN)
; 1138 : 						break;
; 1139 : #endif
; 1140 : 		// Â∑¶„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„ÅüÊôÇ„ÅÆ„Éû„Ç¶„Çπ„ÅÆ‰ΩçÁΩÆ„ÇíË®òÊÜ∂„Åô„Çã
; 1141 : 					MouseDblCrickLeftUpPoint( LOWORD(lParam), HIWORD(lParam) );

  006fc	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  006ff	c1 e8 10	 shr	 eax, 16			; 00000010H
  00702	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00707	0f b7 c8	 movzx	 ecx, ax
  0070a	51		 push	 ecx
  0070b	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  0070e	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00714	0f b7 c2	 movzx	 eax, dx
  00717	50		 push	 eax
  00718	e8 00 00 00 00	 call	 ?MouseDblCrickLeftUpPoint@@YAXHH@Z ; MouseDblCrickLeftUpPoint
  0071d	83 c4 08	 add	 esp, 8

; 1142 : 					break;

  00720	e9 2c 01 00 00	 jmp	 $LN2@WindMsgPro
$LN71@WindMsgPro:

; 1143 : 	case WM_RBUTTONDOWN:	// Âè≥„ÇØ„É™„ÉÉ„ÇØ(Êäº„Åó„ÅüÊôÇ)
; 1144 : #ifdef _REMAKE_20
; 1145 : 					// Ê£ÄÊü•‰ΩøÁî®ËÄÖÊòØÂê¶ÁúüÁöÑÊåâ‰∏ãÊªëÈº†
; 1146 : 					if(!IsRMouseButtonDown()) mouseCursorMode = 0;
; 1147 : 					else 
; 1148 : #endif				
; 1149 : 		// Â∑¶„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„ÅüÊôÇ„ÅÆ„Éû„Ç¶„Çπ„ÅÆ‰ΩçÁΩÆ„ÇíË®òÊÜ∂„Åô„Çã
; 1150 : 						MouseCrickRightDownPoint( LOWORD(lParam), HIWORD(lParam) );

  00725	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00728	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0072b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00731	0f b7 d1	 movzx	 edx, cx
  00734	52		 push	 edx
  00735	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00738	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0073d	0f b7 c8	 movzx	 ecx, ax
  00740	51		 push	 ecx
  00741	e8 00 00 00 00	 call	 ?MouseCrickRightDownPoint@@YAXHH@Z ; MouseCrickRightDownPoint
  00746	83 c4 08	 add	 esp, 8

; 1151 : 					break;

  00749	e9 03 01 00 00	 jmp	 $LN2@WindMsgPro
$LN72@WindMsgPro:

; 1152 : 	case WM_RBUTTONUP:		// Âè≥„ÇØ„É™„ÉÉ„ÇØ(Èõ¢„Åó„ÅüÊôÇ)
; 1153 : 
; 1154 : 		// Â∑¶„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„ÅüÊôÇ„ÅÆ„Éû„Ç¶„Çπ„ÅÆ‰ΩçÁΩÆ„ÇíË®òÊÜ∂„Åô„Çã
; 1155 : 					MouseCrickRightUpPoint( LOWORD(lParam), HIWORD(lParam) );

  0074e	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00751	c1 ea 10	 shr	 edx, 16			; 00000010H
  00754	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0075a	0f b7 c2	 movzx	 eax, dx
  0075d	50		 push	 eax
  0075e	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00761	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00767	0f b7 d1	 movzx	 edx, cx
  0076a	52		 push	 edx
  0076b	e8 00 00 00 00	 call	 ?MouseCrickRightUpPoint@@YAXHH@Z ; MouseCrickRightUpPoint
  00770	83 c4 08	 add	 esp, 8

; 1156 : 					break;

  00773	e9 d9 00 00 00	 jmp	 $LN2@WindMsgPro
$LN73@WindMsgPro:

; 1157 : 	case WM_RBUTTONDBLCLK:		// Âè≥„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ
; 1158 : 
; 1159 : 		// Âè≥„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„ÅüÊôÇ„ÅÆ„Éû„Ç¶„Çπ„ÅÆ‰ΩçÁΩÆ„ÇíË®òÊÜ∂„Åô„Çã
; 1160 : 					MouseDblCrickRightUpPoint( LOWORD(lParam), HIWORD(lParam) );

  00778	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0077b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0077e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00783	0f b7 c8	 movzx	 ecx, ax
  00786	51		 push	 ecx
  00787	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  0078a	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00790	0f b7 c2	 movzx	 eax, dx
  00793	50		 push	 eax
  00794	e8 00 00 00 00	 call	 ?MouseDblCrickRightUpPoint@@YAXHH@Z ; MouseDblCrickRightUpPoint
  00799	83 c4 08	 add	 esp, 8

; 1161 : 					break;

  0079c	e9 b0 00 00 00	 jmp	 $LN2@WindMsgPro
$LN74@WindMsgPro:

; 1162 : 	case WM_MBUTTONDOWN:	// ‰∏≠„ÇØ„É™„ÉÉ„ÇØ(Êäº„Åó„ÅüÊôÇ)
; 1163 : 					break;

  007a1	e9 ab 00 00 00	 jmp	 $LN2@WindMsgPro
$LN75@WindMsgPro:

; 1164 : 				case WM_MOVE:
; 1165 : 					{
; 1166 : 						g_clientPoint.x = g_clientPoint.y = 0;

  007a6	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_clientPoint@@3UtagPOINT@@A+4, 0
  007b0	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?g_clientPoint@@3UtagPOINT@@A+4
  007b6	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_clientPoint@@3UtagPOINT@@A, ecx

; 1167 : 						GetClientRect(hWnd,&g_clientRect);

  007bc	68 00 00 00 00	 push	 OFFSET ?g_clientRect@@3UtagRECT@@A ; g_clientRect
  007c1	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  007c4	52		 push	 edx
  007c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1168 : 						ClientToScreen(hWnd,&g_clientPoint); 

  007cb	68 00 00 00 00	 push	 OFFSET ?g_clientPoint@@3UtagPOINT@@A ; g_clientPoint
  007d0	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  007d3	50		 push	 eax
  007d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClientToScreen@8

; 1169 : 						OffsetRect(&g_clientRect,g_clientPoint.x,g_clientPoint.y);

  007da	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?g_clientPoint@@3UtagPOINT@@A+4
  007e0	51		 push	 ecx
  007e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_clientPoint@@3UtagPOINT@@A
  007e7	52		 push	 edx
  007e8	68 00 00 00 00	 push	 OFFSET ?g_clientRect@@3UtagRECT@@A ; g_clientRect
  007ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OffsetRect@12

; 1170 : 						SetRect(&g_moveRect,0,0,lpDraw->xSize,lpDraw->ySize);

  007f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  007f8	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  007fe	51		 push	 ecx
  007ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00805	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0080b	50		 push	 eax
  0080c	6a 00		 push	 0
  0080e	6a 00		 push	 0
  00810	68 00 00 00 00	 push	 OFFSET ?g_moveRect@@3UtagRECT@@A ; g_moveRect
  00815	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20

; 1171 : #ifdef _TALK_WINDOW
; 1172 : 						if(g_bTalkWindow) SendMessage(TalkWindow.GetTalkWindowWND(),WM_MOVE,0,0);
; 1173 : #endif
; 1174 : 					}
; 1175 : 					break;

  0081b	eb 34		 jmp	 SHORT $LN2@WindMsgPro
$LN76@WindMsgPro:

; 1176 : 
; 1177 : 				default:
; 1178 : 					if(ImeMessage(Message,wParam,lParam))

  0081d	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00820	51		 push	 ecx
  00821	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  00824	52		 push	 edx
  00825	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  00828	50		 push	 eax
  00829	e8 00 00 00 00	 call	 ?ImeMessage@@YAHIIJ@Z	; ImeMessage
  0082e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00831	85 c0		 test	 eax, eax
  00833	74 04		 je	 SHORT $LN77@WindMsgPro

; 1179 : 						return 0;

  00835	33 c0		 xor	 eax, eax
  00837	eb 1a		 jmp	 SHORT $LN78@WindMsgPro
$LN77@WindMsgPro:

; 1180 : 					return DefWindowProc( hWnd, Message, wParam, lParam );

  00839	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0083c	51		 push	 ecx
  0083d	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  00840	52		 push	 edx
  00841	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  00844	50		 push	 eax
  00845	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00848	51		 push	 ecx
  00849	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  0084f	eb 02		 jmp	 SHORT $LN78@WindMsgPro
$LN2@WindMsgPro:

; 1181 : 	}
; 1182 : 	return 0;

  00851	33 c0		 xor	 eax, eax
$LN78@WindMsgPro:

; 1183 : }

  00853	5f		 pop	 edi
  00854	5e		 pop	 esi
  00855	5b		 pop	 ebx
  00856	8b e5		 mov	 esp, ebp
  00858	5d		 pop	 ebp
  00859	c2 10 00	 ret	 16			; 00000010H
$LN84@WindMsgPro:
  0085c	00 00 00 00	 DD	 $LN11@WindMsgPro
  00860	00 00 00 00	 DD	 $LN34@WindMsgPro
  00864	00 00 00 00	 DD	 $LN75@WindMsgPro
  00868	00 00 00 00	 DD	 $LN76@WindMsgPro
  0086c	00 00 00 00	 DD	 $LN76@WindMsgPro
  00870	00 00 00 00	 DD	 $LN19@WindMsgPro
$LN86@WindMsgPro:
  00874	00 00 00 00	 DD	 $LN17@WindMsgPro
  00878	00 00 00 00	 DD	 $LN66@WindMsgPro
  0087c	00 00 00 00	 DD	 $LN35@WindMsgPro
  00880	00 00 00 00	 DD	 $LN62@WindMsgPro
  00884	00 00 00 00	 DD	 $LN47@WindMsgPro
  00888	00 00 00 00	 DD	 $LN13@WindMsgPro
  0088c	00 00 00 00	 DD	 $LN76@WindMsgPro
$LN85@WindMsgPro:
  00890	00		 DB	 0
  00891	06		 DB	 6
  00892	06		 DB	 6
  00893	06		 DB	 6
  00894	06		 DB	 6
  00895	06		 DB	 6
  00896	06		 DB	 6
  00897	06		 DB	 6
  00898	06		 DB	 6
  00899	06		 DB	 6
  0089a	06		 DB	 6
  0089b	06		 DB	 6
  0089c	06		 DB	 6
  0089d	06		 DB	 6
  0089e	06		 DB	 6
  0089f	06		 DB	 6
  008a0	06		 DB	 6
  008a1	06		 DB	 6
  008a2	06		 DB	 6
  008a3	06		 DB	 6
  008a4	06		 DB	 6
  008a5	06		 DB	 6
  008a6	06		 DB	 6
  008a7	06		 DB	 6
  008a8	06		 DB	 6
  008a9	06		 DB	 6
  008aa	06		 DB	 6
  008ab	06		 DB	 6
  008ac	06		 DB	 6
  008ad	06		 DB	 6
  008ae	06		 DB	 6
  008af	06		 DB	 6
  008b0	06		 DB	 6
  008b1	06		 DB	 6
  008b2	06		 DB	 6
  008b3	06		 DB	 6
  008b4	06		 DB	 6
  008b5	06		 DB	 6
  008b6	06		 DB	 6
  008b7	06		 DB	 6
  008b8	06		 DB	 6
  008b9	06		 DB	 6
  008ba	06		 DB	 6
  008bb	06		 DB	 6
  008bc	06		 DB	 6
  008bd	06		 DB	 6
  008be	06		 DB	 6
  008bf	06		 DB	 6
  008c0	06		 DB	 6
  008c1	06		 DB	 6
  008c2	06		 DB	 6
  008c3	06		 DB	 6
  008c4	06		 DB	 6
  008c5	06		 DB	 6
  008c6	06		 DB	 6
  008c7	06		 DB	 6
  008c8	06		 DB	 6
  008c9	06		 DB	 6
  008ca	06		 DB	 6
  008cb	06		 DB	 6
  008cc	06		 DB	 6
  008cd	06		 DB	 6
  008ce	06		 DB	 6
  008cf	06		 DB	 6
  008d0	06		 DB	 6
  008d1	06		 DB	 6
  008d2	06		 DB	 6
  008d3	06		 DB	 6
  008d4	06		 DB	 6
  008d5	06		 DB	 6
  008d6	06		 DB	 6
  008d7	06		 DB	 6
  008d8	06		 DB	 6
  008d9	06		 DB	 6
  008da	06		 DB	 6
  008db	06		 DB	 6
  008dc	06		 DB	 6
  008dd	06		 DB	 6
  008de	06		 DB	 6
  008df	06		 DB	 6
  008e0	06		 DB	 6
  008e1	06		 DB	 6
  008e2	06		 DB	 6
  008e3	06		 DB	 6
  008e4	06		 DB	 6
  008e5	06		 DB	 6
  008e6	01		 DB	 1
  008e7	06		 DB	 6
  008e8	06		 DB	 6
  008e9	06		 DB	 6
  008ea	06		 DB	 6
  008eb	06		 DB	 6
  008ec	06		 DB	 6
  008ed	06		 DB	 6
  008ee	06		 DB	 6
  008ef	06		 DB	 6
  008f0	06		 DB	 6
  008f1	06		 DB	 6
  008f2	06		 DB	 6
  008f3	06		 DB	 6
  008f4	06		 DB	 6
  008f5	06		 DB	 6
  008f6	06		 DB	 6
  008f7	06		 DB	 6
  008f8	06		 DB	 6
  008f9	06		 DB	 6
  008fa	06		 DB	 6
  008fb	06		 DB	 6
  008fc	06		 DB	 6
  008fd	06		 DB	 6
  008fe	06		 DB	 6
  008ff	06		 DB	 6
  00900	06		 DB	 6
  00901	06		 DB	 6
  00902	06		 DB	 6
  00903	06		 DB	 6
  00904	06		 DB	 6
  00905	06		 DB	 6
  00906	06		 DB	 6
  00907	06		 DB	 6
  00908	06		 DB	 6
  00909	06		 DB	 6
  0090a	06		 DB	 6
  0090b	06		 DB	 6
  0090c	06		 DB	 6
  0090d	06		 DB	 6
  0090e	06		 DB	 6
  0090f	06		 DB	 6
  00910	06		 DB	 6
  00911	06		 DB	 6
  00912	06		 DB	 6
  00913	06		 DB	 6
  00914	06		 DB	 6
  00915	06		 DB	 6
  00916	06		 DB	 6
  00917	06		 DB	 6
  00918	06		 DB	 6
  00919	06		 DB	 6
  0091a	06		 DB	 6
  0091b	06		 DB	 6
  0091c	06		 DB	 6
  0091d	06		 DB	 6
  0091e	06		 DB	 6
  0091f	06		 DB	 6
  00920	06		 DB	 6
  00921	06		 DB	 6
  00922	06		 DB	 6
  00923	06		 DB	 6
  00924	06		 DB	 6
  00925	06		 DB	 6
  00926	06		 DB	 6
  00927	06		 DB	 6
  00928	06		 DB	 6
  00929	06		 DB	 6
  0092a	06		 DB	 6
  0092b	06		 DB	 6
  0092c	06		 DB	 6
  0092d	06		 DB	 6
  0092e	06		 DB	 6
  0092f	06		 DB	 6
  00930	06		 DB	 6
  00931	06		 DB	 6
  00932	06		 DB	 6
  00933	06		 DB	 6
  00934	06		 DB	 6
  00935	06		 DB	 6
  00936	06		 DB	 6
  00937	06		 DB	 6
  00938	06		 DB	 6
  00939	06		 DB	 6
  0093a	06		 DB	 6
  0093b	06		 DB	 6
  0093c	06		 DB	 6
  0093d	06		 DB	 6
  0093e	06		 DB	 6
  0093f	06		 DB	 6
  00940	06		 DB	 6
  00941	06		 DB	 6
  00942	06		 DB	 6
  00943	06		 DB	 6
  00944	06		 DB	 6
  00945	06		 DB	 6
  00946	02		 DB	 2
  00947	06		 DB	 6
  00948	03		 DB	 3
  00949	06		 DB	 6
  0094a	04		 DB	 4
  0094b	06		 DB	 6
  0094c	06		 DB	 6
  0094d	06		 DB	 6
  0094e	06		 DB	 6
  0094f	06		 DB	 6
  00950	06		 DB	 6
  00951	06		 DB	 6
  00952	06		 DB	 6
  00953	06		 DB	 6
  00954	06		 DB	 6
  00955	06		 DB	 6
  00956	06		 DB	 6
  00957	06		 DB	 6
  00958	06		 DB	 6
  00959	05		 DB	 5
  0095a	66 90		 npad	 2
$LN87@WindMsgPro:
  0095c	00 00 00 00	 DD	 $LN68@WindMsgPro
  00960	00 00 00 00	 DD	 $LN69@WindMsgPro
  00964	00 00 00 00	 DD	 $LN70@WindMsgPro
  00968	00 00 00 00	 DD	 $LN71@WindMsgPro
  0096c	00 00 00 00	 DD	 $LN72@WindMsgPro
  00970	00 00 00 00	 DD	 $LN73@WindMsgPro
  00974	00 00 00 00	 DD	 $LN74@WindMsgPro
$LN89@WindMsgPro:
  00978	00 00 00 00	 DD	 $LN40@WindMsgPro
  0097c	00 00 00 00	 DD	 $LN39@WindMsgPro
  00980	00 00 00 00	 DD	 $LN37@WindMsgPro
  00984	00 00 00 00	 DD	 $LN38@WindMsgPro
  00988	00 00 00 00	 DD	 $LN45@WindMsgPro
  0098c	00 00 00 00	 DD	 $LN7@WindMsgPro
$LN88@WindMsgPro:
  00990	00		 DB	 0
  00991	05		 DB	 5
  00992	05		 DB	 5
  00993	05		 DB	 5
  00994	05		 DB	 5
  00995	01		 DB	 1
  00996	05		 DB	 5
  00997	05		 DB	 5
  00998	05		 DB	 5
  00999	05		 DB	 5
  0099a	05		 DB	 5
  0099b	05		 DB	 5
  0099c	05		 DB	 5
  0099d	05		 DB	 5
  0099e	05		 DB	 5
  0099f	05		 DB	 5
  009a0	05		 DB	 5
  009a1	05		 DB	 5
  009a2	05		 DB	 5
  009a3	05		 DB	 5
  009a4	05		 DB	 5
  009a5	05		 DB	 5
  009a6	05		 DB	 5
  009a7	05		 DB	 5
  009a8	05		 DB	 5
  009a9	05		 DB	 5
  009aa	05		 DB	 5
  009ab	05		 DB	 5
  009ac	05		 DB	 5
  009ad	02		 DB	 2
  009ae	05		 DB	 5
  009af	03		 DB	 3
  009b0	05		 DB	 5
  009b1	05		 DB	 5
  009b2	05		 DB	 5
  009b3	05		 DB	 5
  009b4	05		 DB	 5
  009b5	05		 DB	 5
  009b6	04		 DB	 4
?WindMsgProc@@YGJPAUHWND__@@IIJ@Z ENDP			; WindMsgProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\πŸ≈¡ »≠∏È\∏æƒÌøœ∑·\Client Source Code1.31¿œ∫ª\system\main.cpp
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_lpCmdLine$GSCopy$1$ = -164				; size = 4
_dm$1 = -160						; size = 156
__$ArrayPad$ = -4					; size = 4
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _lpCmdLine$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi

; 198  : #ifdef PATCHER_RUN
; 199  : 	if (strcmp(PARAM_ARGS, lpCmdLine) != 0)
; 200  : 	{
; 201  : 		MessageBox(NULL, "RUN PATCHER", "ERROR", MB_OK);
; 202  : 		return 0;
; 203  : 	}
; 204  : #endif
; 205  : 	 //Âä†ËΩΩÂä®ÊÄÅÁöÑÂàóË°®
; 206  : //	 ÂÜôÂÖ•serverMax();
; 207  : 	//LoadStoneAgeLUA(_LUA_PATCH_);
; 208  : #ifdef _NB_CMD_MODE
; 209  : 	extern void InitConsoleWindow(void)  ;
; 210  : 	InitConsoleWindow();
; 211  : #endif
; 212  : #ifndef SWITCH_MODE
; 213  : 	extern int displayBpp;
; 214  : 	HDC hDcDest = GetDC(hWnd);

  00019	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  0001f	8b 7d 08	 mov	 edi, DWORD PTR _hInstance$[ebp]
  00022	89 85 5c ff ff
	ff		 mov	 DWORD PTR _lpCmdLine$GSCopy$1$[ebp], eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 215  : 	displayBpp = GetDeviceCaps(hDcDest, BITSPIXEL);

  0002e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDeviceCaps@8
  00034	8b f0		 mov	 esi, eax
  00036	6a 0c		 push	 12			; 0000000cH
  00038	56		 push	 esi
  00039	ff d3		 call	 ebx

; 216  : 	ReleaseDC(hWnd, hDcDest);

  0003b	56		 push	 esi
  0003c	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?displayBpp@@3HA, eax ; displayBpp
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 217  : 	if (displayBpp != 32) {

  0004d	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?displayBpp@@3HA, 32 ; displayBpp, 00000020H
  00054	74 37		 je	 SHORT $LN5@WinMain

; 218  : 		DEVMODE dm;
; 219  : 		CreateCompatibleDEVMODE(&dm, 32, GetDeviceCaps(hDcDest, HORZRES), GetDeviceCaps(hDcDest, VERTRES), GetDeviceCaps(hDcDest, VREFRESH));

  00056	6a 74		 push	 116			; 00000074H
  00058	56		 push	 esi
  00059	ff d3		 call	 ebx
  0005b	50		 push	 eax
  0005c	6a 0a		 push	 10			; 0000000aH
  0005e	56		 push	 esi
  0005f	ff d3		 call	 ebx
  00061	50		 push	 eax
  00062	6a 08		 push	 8
  00064	56		 push	 esi
  00065	ff d3		 call	 ebx
  00067	50		 push	 eax
  00068	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _dm$1[ebp]
  0006e	6a 20		 push	 32			; 00000020H
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?CreateCompatibleDEVMODE@@YAXPAU_devicemodeA@@KKKK@Z ; CreateCompatibleDEVMODE
  00076	83 c4 14	 add	 esp, 20			; 00000014H

; 220  : 		ChangeDisplaySettings(&dm, 0);

  00079	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _dm$1[ebp]
  0007f	6a 00		 push	 0
  00081	50		 push	 eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ChangeDisplaySettingsA@8

; 221  : 		return FALSE;

  00088	e9 79 02 00 00	 jmp	 $LN17@WinMain
$LN5@WinMain:

; 222  : 	}
; 223  : #endif
; 224  : 
; 225  : 	hInst = hInstance;		// „Éë„É©„É°„Éº„Çø„Éº„Åß„ÇÇ„Çâ„Å£„Åü„Ç§„É≥„Çπ„Çø„É≥„Çπ„Éè„É≥„Éâ„É´„Çí„Ç∞„É≠„Éº„Éê„Éº„É´„Å´‰ª£ÂÖ•
; 226  : 	CmdShow = nCmdShow;		// WinMainÈñ¢Êï∞„ÅÆÂºïÊï∞„Çí„Ç∞„É≠„Éº„Éê„É´„Å´„Åô„Çã

  0008d	8b 45 14	 mov	 eax, DWORD PTR _nCmdShow$[ebp]

; 227  : 	CmdLine = lpCmdLine;	// WinMainÈñ¢Êï∞„ÅÆ„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Çí„Ç∞„É≠„Éº„Éê„É´„Å´„Åô„Çã

  00090	8b 9d 5c ff ff
	ff		 mov	 ebx, DWORD PTR _lpCmdLine$GSCopy$1$[ebp]

; 228  : 
; 229  : #ifndef _NB_ÂÆ¢Êà∑Á´ØÁõ¥Êé•ÂêØÂä®
; 230  : 	if( !strstr( CmdLine, "updated" ) ){
; 231  : 		MessageBox( NULL, "Ê≠§ÊâßË°åÊ°£‰∏çËÉΩËµ∑Âä®ÔºÅ\nÔºåËØ∑ÊâßË°å‚ÄúÂêØÂä®Áü≥Âô®Êó∂‰ª£‚Äù\nÊàñÊâßË°å‚ÄúStoneAge.exe‚ÄùÔºÅ", "ÌôïÏù∏", MB_OK | MB_ICONSTOP );
; 232  : 		return FALSE;
; 233  : 	}
; 234  : #endif
; 235  : 
; 236  : 	ÁºñÁ†Å = 949;// GetACP();
; 237  : 
; 238  : 	// Âª∫Á´ã‰∏Ä‰∏™Ê†∏ÂøÉÁâ©‰ª∂,ËÆ©Êõ¥Êñ∞Á®ãÂºèÂèØ‰ª•Âà§Êñ≠ÊòØÂê¶ÊúâÁü≥Âô®Ê≠£Âú®ÊâßË°å
; 239  : 	hCheckMutex = CreateMutex(NULL, FALSE, "CheckForUpdate");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FDFFMAOB@CheckForUpdate@
  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	89 3d 00 00 00
	00		 mov	 DWORD PTR ?hInst@@3PAUHINSTANCE__@@A, edi ; hInst
  000a5	a3 00 00 00 00	 mov	 DWORD PTR ?CmdShow@@3HA, eax ; CmdShow
  000aa	89 1d 00 00 00
	00		 mov	 DWORD PTR ?CmdLine@@3PADA, ebx ; CmdLine
  000b0	c7 05 00 00 00
	00 b5 03 00 00	 mov	 DWORD PTR ???@@3HA, 949	; ??, 000003b5H
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  000c0	a3 00 00 00 00	 mov	 DWORD PTR ?hCheckMutex@@3PAXA, eax ; hCheckMutex

; 240  : 
; 241  : #ifdef _STONDEBUG_
; 242  : 	_CrtSetDbgFlag( _CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
; 243  : #endif
; 244  : 	
; 245  : #ifdef __NEW_CLIENT
; 246  : #ifdef __KOREA
; 247  : 	//ADD jeffrey
; 248  : 	char ip[16];
; 249  : 	int startindex = 0;
; 250  : 
; 251  : 	ZeroMemory( gmsv, sizeof(gameserver)*MAX_GMSV);
; 252  : 	ZeroMemory( gmgroup, sizeof(gamegroup)*MAX_GMGROUP);
; 253  : 	char *temp = strstr(CmdLine , "&");
; 254  : 	strtok(temp , ";");
; 255  : 	char *tmp = strtok(NULL , ";");
; 256  : 	extern int nGroup;
; 257  : 	nGroup = atoi(tmp);                          //Áæ§ÁªÑÊï∞
; 258  : 	for(int z = 0 ; z < nGroup ; z++)
; 259  : 	{
; 260  : 		char *universes = strtok(NULL , ";");        //ÊòüÁ≥ªÂêçÁß∞
; 261  : 		strcpy( gmgroup[z].name, universes);
; 262  : 		char *numtmp = strtok(NULL , ";");           //ÊòüÁêÉÊï∞
; 263  : 		int num = atoi(numtmp);
; 264  : 		gmgroup[z].num = num;
; 265  : 		gmgroup[z].startindex = startindex;
; 266  : 		startindex += num;
; 267  : 		gmgroup[z].used = 1;
; 268  : 		char *szIP = strtok(NULL , ";");             //ÊòüÁ≥ªIP
; 269  : 		for(int v = gmgroup[z].startindex ; v < startindex ; v++)
; 270  : 		{
; 271  : 			char *name = strtok(NULL , ";");         //ÊòüÁêÉÂêçÁß∞
; 272  : 			strcpy( gmsv[v].name, name);
; 273  : 			char *lastip = strtok(NULL , ";");       //ÊòüÁêÉip
; 274  : 			sprintf(ip , "%s.%s" , szIP , lastip);
; 275  : 			strcpy( gmsv[v].ipaddr, ip);
; 276  : 			char *port = strtok(NULL , ";");      //port
; 277  : 			strcpy( gmsv[v].port, port);
; 278  : 			gmsv[v].used = '1';
; 279  : 		}
; 280  : 	}
; 281  : 	//END
; 282  : #endif
; 283  : 	dwPID = GetCurrentProcessId();

  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0

; 284  : 	if( INVALID_HANDLE_VALUE == (hProcessSnap=CreateToolhelp32Snapshot( TH32CS_SNAPPROCESS, NULL)))

  000cb	6a 00		 push	 0
  000cd	6a 02		 push	 2
  000cf	a3 00 00 00 00	 mov	 DWORD PTR ?dwPID@@3KA, eax ; dwPID
  000d4	e8 00 00 00 00	 call	 _CreateToolhelp32Snapshot@8
  000d9	a3 00 00 00 00	 mov	 DWORD PTR ?hProcessSnap@@3PAXA, eax ; hProcessSnap
  000de	83 f8 ff	 cmp	 eax, -1
  000e1	0f 84 1f 02 00
	00		 je	 $LN17@WinMain

; 285  : 		return 0;
; 286  : 	{
; 287  : 		pe32.dwSize = sizeof(PROCESSENTRY32);
; 288  : 		if( Process32First( hProcessSnap, &pe32)){ 

  000e7	68 00 00 00 00	 push	 OFFSET ?pe32@@3UtagPROCESSENTRY32@@A ; pe32
  000ec	50		 push	 eax
  000ed	c7 05 00 00 00
	00 28 01 00 00	 mov	 DWORD PTR ?pe32@@3UtagPROCESSENTRY32@@A, 296 ; 00000128H
  000f7	e8 00 00 00 00	 call	 _Process32First@8
  000fc	85 c0		 test	 eax, eax
  000fe	74 2d		 je	 SHORT $LN3@WinMain
$LL4@WinMain:

; 289  : 			do{
; 290  : 				if( pe32.th32ProcessID == dwPID){

  00100	a1 08 00 00 00	 mov	 eax, DWORD PTR ?pe32@@3UtagPROCESSENTRY32@@A+8
  00105	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?dwPID@@3KA ; dwPID
  0010b	74 16		 je	 SHORT $LN13@WinMain

; 292  : 					break;
; 293  : 				}
; 294  : 			}while( Process32Next( hProcessSnap, &pe32));

  0010d	68 00 00 00 00	 push	 OFFSET ?pe32@@3UtagPROCESSENTRY32@@A ; pe32
  00112	ff 35 00 00 00
	00		 push	 DWORD PTR ?hProcessSnap@@3PAXA ; hProcessSnap
  00118	e8 00 00 00 00	 call	 _Process32Next@8
  0011d	85 c0		 test	 eax, eax
  0011f	75 df		 jne	 SHORT $LL4@WinMain
  00121	eb 0a		 jmp	 SHORT $LN3@WinMain
$LN13@WinMain:

; 291  : 					dwPID = pe32.th32ParentProcessID;

  00123	a1 18 00 00 00	 mov	 eax, DWORD PTR ?pe32@@3UtagPROCESSENTRY32@@A+24
  00128	a3 00 00 00 00	 mov	 DWORD PTR ?dwPID@@3KA, eax ; dwPID
$LN3@WinMain:

; 295  : 		}
; 296  : 	}
; 297  : #endif
; 298  : 
; 299  :     if( !hPrevInstance ){

  0012d	83 7d 0c 00	 cmp	 DWORD PTR _hPrevInstance$[ebp], 0
  00131	0f 85 94 00 00
	00		 jne	 $LN10@WinMain

; 300  : 		wndclass.style = CS_BYTEALIGNCLIENT | CS_DBLCLKS;	// „ÇØ„É©„Çπ„Çπ„Çø„Ç§„É´
; 301  : 		wndclass.lpfnWndProc = WindMsgProc;		// „Ç¶„Ç§„É≥„Éâ„Ç¶„Éó„É≠„Ç∑„Éº„Ç∏„É£„Éº„Ç¢„Éâ„É¨„ÇπÂÆöÁæ©
; 302  : 		wndclass.cbClsExtra = 0;				// „ÇØ„É©„ÇπÊØé„ÅÆË£úË∂≥ÂÆöÁæ©„Å™„Åó
; 303  : 		wndclass.cbWndExtra = 0;				// „Ç¶„Ç§„É≥„Éâ„Ç¶ÊØé„ÅÆË£úË∂≥„Éá„Éº„ÇøÁÑ°„Åó
; 304  : 		wndclass.hInstance = hInstance;			// „Ç§„É≥„Çπ„Çø„É≥„Çπ„Éè„É≥„Éâ„É´ÂÆöÁæ©
; 305  : 	    wndclass.hIcon = LoadIcon( hInstance, MAKEINTRESOURCE(SA_ICON2));

  00137	6a 70		 push	 112			; 00000070H
  00139	57		 push	 edi
  0013a	c7 05 00 00 00
	00 08 10 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A, 4104 ; 00001008H
  00144	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+4, OFFSET ?WindMsgProc@@YGJPAUHWND__@@IIJ@Z ; WindMsgProc
  0014e	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+8, 0
  00158	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+12, 0
  00162	89 3d 10 00 00
	00		 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+16, edi
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8

; 306  : 		wndclass.hCursor = LoadCursor(hInstance ,MAKEINTRESOURCE(SA_MOUSE));

  0016e	6a 68		 push	 104			; 00000068H
  00170	57		 push	 edi
  00171	a3 14 00 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+20, eax
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8

; 307  : 		wndclass.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆËÉåÊôØËâ≤

  0017c	6a 04		 push	 4
  0017e	a3 18 00 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+24, eax
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4

; 308  : 		wndclass.lpszMenuName= NULL;			// „É°„Éã„É•„Éº„Å™„Åó
; 309  : 		wndclass.lpszClassName = DEF_APPNAME;	// „Çø„Ç§„Éà„É´„Éê„ÉºÊñáÂ≠óË®≠ÂÆö
; 310  : 		if( !RegisterClass(&wndclass) ){

  00189	68 00 00 00 00	 push	 OFFSET ?wndclass@@3UtagWNDCLASSA@@A ; wndclass
  0018e	a3 1c 00 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+28, eax
  00193	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+32, 0
  0019d	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?wndclass@@3UtagWNDCLASSA@@A+36, OFFSET ??_C@_0BB@NLNMPB@?$KD?S?$KD?t?$KD?o?$KD?n?$KD?e?$KD?A?$KD?g?$KD?e@
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  001ad	66 85 c0	 test	 ax, ax
  001b0	75 19		 jne	 SHORT $LN10@WinMain

; 311  : 			MessageBox( NULL, "ÂàùÂßãÂåñËßÜÁ™óÂ§±Ë¥•ÔºÅ\nÔºåËØ∑ÊâßË°åÈáçÊñ∞ÂÆâË£ÖÊàñÊ¥ΩËØ¢ÂÆ¢Êúç‰∫∫ÂëòÔºÅ",

  001b2	6a 10		 push	 16			; 00000010H
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@MPCLFILL@?t?x?c?$LH?$PL?y?$DP?$DP?c?w?$DP?$KD?$KB?6?$KD?$KM?$DP?$DP?z?$LM?q?l?c?f?d?L?$DP?$PL?d?$PN?g@
  001be	6a 00		 push	 0
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 312  : 				"ÌôïÏù∏", MB_OK | MB_ICONSTOP );
; 313  : 			return FALSE;						// ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åü„ÇâÁµÇ‰∫Ü„Åô„Çã

  001c6	e9 3b 01 00 00	 jmp	 $LN17@WinMain
$LN10@WinMain:

; 314  : 		}
; 315  : 	}
; 316  : #ifdef _TIME_GET_TIME
; 317  : 	QueryPerformanceFrequency(&tickCount);
; 318  : 	tickCount.QuadPart = tickCount.QuadPart/1000;
; 319  : #endif
; 320  : 	// Ë™≠„ÅøËæº„Åø„Éï„Ç°„Ç§„É´Âêç„ÅÆË®≠ÂÆö
; 321  : 	strcpy( realBinName, REALBIN_DIR );			// REAL.BIN„ÅÆÂ†¥ÊâÄ

  001cb	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@DKGBMFPD@data?2real?4bin@+8
  001d0	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@DKGBMFPD@data?2real?4bin@
  001d8	a3 08 00 00 00	 mov	 DWORD PTR ?realBinName@@3PADA+8, eax
  001dd	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ??_C@_0O@DKGBMFPD@data?2real?4bin@+12
  001e4	66 a3 0c 00 00
	00		 mov	 WORD PTR ?realBinName@@3PADA+12, ax

; 322  : 	strcpy( adrnBinName, ADRNBIN_DIR );			// ADRN.BIN„ÅÆÂ†¥ÊâÄ

  001ea	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@HIHIJMIB@data?2adrn?4bin@+8
  001ef	a3 08 00 00 00	 mov	 DWORD PTR ?adrnBinName@@3PADA+8, eax
  001f4	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ??_C@_0O@HIHIJMIB@data?2adrn?4bin@+12
  001fb	66 0f d6 05 00
	00 00 00	 movq	 QWORD PTR ?realBinName@@3PADA, xmm0
  00203	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@HIHIJMIB@data?2adrn?4bin@
  0020b	66 a3 0c 00 00
	00		 mov	 WORD PTR ?adrnBinName@@3PADA+12, ax

; 323  : 	strcpy( sprBinName, SPRBIN_DIR );			// SPR.BIN„ÅÆÂ†¥ÊâÄ

  00211	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@LCHFCHHG@data?2spr?4bin@+8
  00216	66 0f d6 05 00
	00 00 00	 movq	 QWORD PTR ?adrnBinName@@3PADA, xmm0
  0021e	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0N@LCHFCHHG@data?2spr?4bin@
  00226	a3 08 00 00 00	 mov	 DWORD PTR ?sprBinName@@3PADA+8, eax
  0022b	0f b6 05 0c 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_0N@LCHFCHHG@data?2spr?4bin@+12
  00232	66 0f d6 05 00
	00 00 00	 movq	 QWORD PTR ?sprBinName@@3PADA, xmm0

; 324  : 	strcpy( sprAdrnBinName, SPRADRNBIN_DIR );	// SPRADRN.BIN„ÅÆÂ†¥ÊâÄ

  0023a	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BB@PFEKOFDI@data?2spradrn?4bin@
  00241	a2 0c 00 00 00	 mov	 BYTE PTR ?sprBinName@@3PADA+12, al
  00246	0f b6 05 10 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_0BB@PFEKOFDI@data?2spradrn?4bin@+16
  0024d	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?sprAdrnBinName@@3PADA, xmm0
  00254	a2 10 00 00 00	 mov	 BYTE PTR ?sprAdrnBinName@@3PADA+16, al

; 325  : #ifdef _READ16BITBMP
; 326  : 	strcpy(realtrueBinName,REALTRUEBIN_DIR);
; 327  : 	strcpy(adrntrueBinName,ADRNTRUEBIN_DIR);
; 328  : #endif
; 329  : 	//„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥Ëß£Êûê 
; 330  : 	AnalyzeCmdLine();

  00259	e8 00 00 00 00	 call	 ?AnalyzeCmdLine@@YAXXZ	; AnalyzeCmdLine

; 331  : 	memset(lpCmdLine, 0, strlen(lpCmdLine));

  0025e	8b cb		 mov	 ecx, ebx
  00260	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL16@WinMain:
  00263	8a 01		 mov	 al, BYTE PTR [ecx]
  00265	41		 inc	 ecx
  00266	84 c0		 test	 al, al
  00268	75 f9		 jne	 SHORT $LL16@WinMain
  0026a	2b ca		 sub	 ecx, edx
  0026c	51		 push	 ecx
  0026d	6a 00		 push	 0
  0026f	53		 push	 ebx
  00270	e8 00 00 00 00	 call	 _memset

; 332  : 	// Ëß£ÂÉèÂ∫¶„É¢„Éº„ÉâË®≠ÂÆö
; 333  : 
; 334  : 	SetResoMode( ResoMode );

  00275	ff 35 00 00 00
	00		 push	 DWORD PTR ?ResoMode@@3HA ; ResoMode
  0027b	e8 00 00 00 00	 call	 ?SetResoMode@@YAXH@Z	; SetResoMode

; 335  : 	// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆ‰ΩúÊàê
; 336  : 	ChangeWindowMode();

  00280	e8 00 00 00 00	 call	 ?ChangeWindowMode@@YAXXZ ; ChangeWindowMode

; 337  : #ifdef _TALK_WINDOW
; 338  : 	TalkWindow.Init(hWnd,hInstance);
; 339  : 	if(g_bTalkWindow) TalkWindow.Create();
; 340  : #endif
; 341  : #ifdef _NB_Êñ≠Á∫øËá™Âä®ÈáçËøû
; 342  : 	PcLanded.Â§ßÂå∫ = PcLanded.‰∫∫Áâ© = PcLanded.Â∞èÂå∫ = PcLanded.ÈòüÊ®° = -1;
; 343  : 	PcLanded.ÊòØÂê¶Ëá™Âä®ÂñäËØù = PcLanded.ÊòØÂê¶Ëá™Âä®ÈÅáÊïå = PcLanded.‰∫∫Áâ©ÊñπÂêë = PcLanded.ÁôªÈôÜÂª∂Êó∂Êó∂Èó¥ = FALSE;
; 344  : 	memset(PcLanded.ÁôªÈôÜ‰∫∫Áâ©ÂêçÁß∞, 0, 4 * 32);

  00285	68 80 00 00 00	 push	 128			; 00000080H
  0028a	6a 00		 push	 0
  0028c	68 1c 00 00 00	 push	 OFFSET ?PcLanded@@3ULanded@@A+28
  00291	c7 05 04 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+4, -1
  0029b	c7 05 08 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+8, -1
  002a5	c7 05 0c 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+12, -1
  002af	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A, -1
  002b9	c7 05 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+156, 0
  002c3	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+24, 0
  002cd	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+20, 0
  002d7	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+16, 0
  002e1	e8 00 00 00 00	 call	 _memset
  002e6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 345  : #endif
; 346  : 	void SetTestServer();
; 347  : //	SetTestServer();
; 348  : 	GameMain();

  002e9	e8 00 00 00 00	 call	 ?GameMain@@YAHXZ	; GameMain

; 349  : 
; 350  : #ifdef __NEW_CLIENT
; 351  : 	CloseHandle( hProcessSnap);

  002ee	ff 35 00 00 00
	00		 push	 DWORD PTR ?hProcessSnap@@3PAXA ; hProcessSnap
  002f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 352  : #endif
; 353  : 
; 354  : #ifdef SWITCH_MODE
; 355  : 	extern DEVMODE g_OriginalMode;
; 356  : 	if( g_OriginalMode.dmSize != 0){
; 357  : 		DEVMODE	DevMode;
; 358  : 		DevMode.dmSize = sizeof(DEVMODE);
; 359  : 		EnumDisplaySettings( NULL, ENUM_CURRENT_SETTINGS, &DevMode);
; 360  : 		if( DevMode.dmPelsWidth!=g_OriginalMode.dmPelsWidth || DevMode.dmPelsHeight!=g_OriginalMode.dmPelsHeight || DevMode.dmBitsPerPel!=g_OriginalMode.dmBitsPerPel){
; 361  : 			g_OriginalMode.dmFields = DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT;
; 362  : 			ChangeDisplaySettingsEx( NULL, &g_OriginalMode, NULL, CDS_UPDATEREGISTRY, NULL);
; 363  : 		}
; 364  : 	}
; 365  : #endif
; 366  : #ifdef _REMAKE_20
; 367  : #ifndef _STONDEBUG_
; 368  : 	QuitingInputScript();
; 369  : #endif
; 370  : 	QuitRestore();
; 371  : #endif
; 372  : #ifdef _STONDEBUG_
; 373  : 	if(g_iMallocCount != 0){
; 374  : 		char MSG[256];
; 375  : 		sprintf(MSG,"g_iMallocCount = %d",g_iMallocCount);
; 376  : 		MessageBox( NULL,MSG,"ÌôïÏù∏", MB_OK | MB_ICONSTOP );
; 377  : 	}
; 378  : #endif
; 379  : 	ReleaseMutex(hCheckMutex);

  002fa	ff 35 00 00 00
	00		 push	 DWORD PTR ?hCheckMutex@@3PAXA ; hCheckMutex
  00300	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
$LN17@WinMain:

; 380  : 
; 381  : 	return FALSE;
; 382  : }

  00306	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00309	33 c0		 xor	 eax, eax
  0030b	5f		 pop	 edi
  0030c	5e		 pop	 esi
  0030d	33 cd		 xor	 ecx, ebp
  0030f	5b		 pop	 ebx
  00310	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00315	8b e5		 mov	 esp, ebp
  00317	5d		 pop	 ebp
  00318	c2 10 00	 ret	 16			; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
END
