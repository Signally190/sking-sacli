; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?TaskBarFlag@@3HA				; TaskBarFlag
PUBLIC	?MenuToggleFlag@@3IA				; MenuToggleFlag
PUBLIC	?ItemBuffer@@3PAUITEM_BUFFER@@A			; ItemBuffer
PUBLIC	?StatusUpPoint@@3HA				; StatusUpPoint
PUBLIC	?BattlePetReceiveFlag@@3HA			; BattlePetReceiveFlag
PUBLIC	?StandbyPetSendFlag@@3HA			; StandbyPetSendFlag
PUBLIC	?BattlePetReceivePetNo@@3HA			; BattlePetReceivePetNo
PUBLIC	?MailHistory@@3PAUMAIL_HISTORY@@A		; MailHistory
PUBLIC	?chatRegistryStr@@3PAUSTR_BUFFER@@A		; chatRegistryStr
PUBLIC	?MailStr@@3USTR_BUFFER@@A			; MailStr
PUBLIC	?pActMenuWnd3@@3PAUaction@@A			; pActMenuWnd3
PUBLIC	?shougouChange@@3USTR_BUFFER@@A			; shougouChange
PUBLIC	?MymoneyBuffer@@3USTR_BUFFER@@A			; MymoneyBuffer
PUBLIC	?TradeBuffer@@3USTR_BUFFER@@A			; TradeBuffer
PUBLIC	?petNameChange@@3USTR_BUFFER@@A			; petNameChange
PUBLIC	?petStatusNo@@3HA				; petStatusNo
PUBLIC	?mailHistoryWndPageNo@@3HA			; mailHistoryWndPageNo
PUBLIC	?mailHistoryWndSelectNo@@3HA			; mailHistoryWndSelectNo
PUBLIC	?MapWmdFlagBak@@3HA				; MapWmdFlagBak
PUBLIC	?ResultWndTimer@@3HA				; ResultWndTimer
PUBLIC	?ItemMixRecvFlag@@3HA				; ItemMixRecvFlag
PUBLIC	?MouseCursorFlag@@3HA				; MouseCursorFlag
PUBLIC	?TalkMode@@3HA					; TalkMode
PUBLIC	?secretName@@3PADA				; secretName
PUBLIC	?setRoomFlag@@3_NA				; setRoomFlag
PUBLIC	?secretFlag@@3_NA				; secretFlag
PUBLIC	?selChar@@3HA					; selChar
PUBLIC	?pChtChanlWnd@@3PAUaction@@A			; pChtChanlWnd
PUBLIC	?pSelChanlWnd@@3PAUaction@@A			; pSelChanlWnd
PUBLIC	?chatRoomName@@3USTR_BUFFER@@A			; chatRoomName
PUBLIC	?pSetRoomWnd@@3PAUaction@@A			; pSetRoomWnd
PUBLIC	?Ûå???@@3HA					; Ûå???
PUBLIC	?ìÑÚª?øÌ??@@3HA					; ìÑÚª?øÌ??
PUBLIC	????ãÆ??@@3HA					; ???ãÆ??
PUBLIC	?ê«ò¢éç?@@3HA					; ê«ò¢éç?
PUBLIC	?DropPetWndflag@@3_NA				; DropPetWndflag
PUBLIC	?DropI@@3FA					; DropI
PUBLIC	?ChangePetName@@3_NA				; ChangePetName
PUBLIC	?ChangePetI@@3FA				; ChangePetI
PUBLIC	?ChangeMyName@@3_NA				; ChangeMyName
PUBLIC	?UpDownflag@@3HA				; UpDownflag
PUBLIC	?systemWndNo@@3IA				; systemWndNo
PUBLIC	?talkmsg@@3PAY0BAA@DA				; talkmsg
PUBLIC	?talkwndx@@3HA					; talkwndx
PUBLIC	?talkwndy@@3HA					; talkwndy
PUBLIC	?talkwndflag@@3_NA				; talkwndflag
PUBLIC	?tradetalkwndflag@@3_NA				; tradetalkwndflag
PUBLIC	?Moneyflag@@3_NA				; Moneyflag
PUBLIC	?Tradeflag@@3_NA				; Tradeflag
PUBLIC	?TradeBtnflag@@3_NA				; TradeBtnflag
PUBLIC	?mapWndFontNo@@3PAHA				; mapWndFontNo
PUBLIC	?showindex@@3PAHA				; showindex
PUBLIC	?itemflag@@3PAHA				; itemflag
PUBLIC	?MainTradeWndflag@@3_NA				; MainTradeWndflag
PUBLIC	?SecondTradeWndflag@@3_NA			; SecondTradeWndflag
PUBLIC	?SecondTradeWnd@@3PAUaction@@A			; SecondTradeWnd
PUBLIC	?TradeTalkWnd@@3PAUaction@@A			; TradeTalkWnd
PUBLIC	?ShowPetNum@@3HA				; ShowPetNum
PUBLIC	?mytradelist@@3PAHA				; mytradelist
PUBLIC	?opptradelist@@3PAHA				; opptradelist
PUBLIC	?drag1Y@@3HA					; drag1Y
PUBLIC	?drag2Y@@3HA					; drag2Y
PUBLIC	?tmpdrag1Y@@3HA					; tmpdrag1Y
PUBLIC	?tmpdrag2Y@@3HA					; tmpdrag2Y
PUBLIC	?dragflag1@@3_NA				; dragflag1
PUBLIC	?dragflag2@@3_NA				; dragflag2
PUBLIC	?locknum@@3HA					; locknum
PUBLIC	?locknum2@@3HA					; locknum2
PUBLIC	?MultiTells@@3HA				; MultiTells
PUBLIC	?pActMsgWnd@@3PAUaction@@A			; pActMsgWnd
PUBLIC	?CharNum@@3HA					; CharNum
PUBLIC	?TellInfo@@3PAY0IA@DA				; TellInfo
PUBLIC	?name@@3PAY0CA@DA				; name
PUBLIC	?index@@3PAHA					; index
PUBLIC	?reSendMsg@@3PADA				; reSendMsg
PUBLIC	?chatInfo@@3UCHATINFO@@A			; chatInfo
PUBLIC	?BtnType@@3_NA					; BtnType
PUBLIC	?assentFlag@@3_NA				; assentFlag
PUBLIC	?scrollFlag@@3_NA				; scrollFlag
PUBLIC	?roomInfo@@3PAY0EA@DA				; roomInfo
PUBLIC	?memInfo@@3PADA					; memInfo
PUBLIC	?scrlBtnIndex@@3HA				; scrlBtnIndex
PUBLIC	?BtnNo@@3HA					; BtnNo
PUBLIC	?firMemNo@@3HA					; firMemNo
PUBLIC	?closeBtn@@3HA					; closeBtn
PUBLIC	?leaveBtn@@3HA					; leaveBtn
PUBLIC	?delBtn@@3HA					; delBtn
PUBLIC	?chaBtn@@3HA					; chaBtn
PUBLIC	?outBtn@@3HA					; outBtn
PUBLIC	?scrlHBtn@@3HA					; scrlHBtn
PUBLIC	?scrlLBtn@@3HA					; scrlLBtn
PUBLIC	?roomIndex@@3PAHA				; roomIndex
PUBLIC	?roomNum@@3HA					; roomNum
PUBLIC	?memIndex@@3HA					; memIndex
PUBLIC	?pAssentWnd@@3PAUaction@@A			; pAssentWnd
PUBLIC	?mixPetNo@@3HA					; mixPetNo
PUBLIC	?SelectWazaNo@@3HA				; SelectWazaNo
PUBLIC	?itemWndMaxBag@@3HA				; itemWndMaxBag
PUBLIC	?itemWndBagOffset@@3HA				; itemWndBagOffset
PUBLIC	?nPetItemEquipBmpNumber@@3PAY01HA		; nPetItemEquipBmpNumber
PUBLIC	?TransmigrationStr@@3PAPADA			; TransmigrationStr
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_02DLMIBHNO@?$KF?$LA@			; `string'
PUBLIC	??_C@_02CCNDCGJP@?$KF?$LB@			; `string'
PUBLIC	??_C@_02JPOHFFM@?$KF?$LC@			; `string'
PUBLIC	??_C@_02BAOFEEBN@?$KF?$LD@			; `string'
PUBLIC	??_C@_02FPKENCNK@?$KF?$LE@			; `string'
PUBLIC	??_C@_02EGLPODJL@?$KF?$LF@			; `string'
PUBLIC	??_C@_02GNJCLAFI@?$KF?$LG@			; `string'
PUBLIC	?pActLetter@@3PAPAUaction@@A			; pActLetter
PUBLIC	?pActMailItem@@3PAUaction@@A			; pActMailItem
PUBLIC	?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A		; PetAlbumTbl
PUBLIC	?PetAlbum@@3PAUPET_ALBUM@@A			; PetAlbum
PUBLIC	?AlbumIdCnt@@3HA				; AlbumIdCnt
PUBLIC	?IdEncryptionTbl@@3PAHA				; IdEncryptionTbl
PUBLIC	?resultWndFontNo@@3PAHA				; resultWndFontNo
PUBLIC	?bShowItemExplain@@3HA				; bShowItemExplain
PUBLIC	?CharDetail@@3PAY0BA@DA				; CharDetail
PUBLIC	?DetailDesc@@3PAY0EA@DA				; DetailDesc
PUBLIC	?DetailDesc1@@3PAY0EA@DA			; DetailDesc1
PUBLIC	?DetailDesc2@@3PAY0EA@DA			; DetailDesc2
PUBLIC	?iCharAlchePlus@@3PAHA				; iCharAlchePlus
PUBLIC	?sAlchePlus_list@@3PAY0BA@DA			; sAlchePlus_list
PUBLIC	?iAlchePlusIcon@@3PAHA				; iAlchePlusIcon
PUBLIC	?pActMenuWnd@@3PAUaction@@A			; pActMenuWnd
PUBLIC	?pActMenuWnd2@@3PAUaction@@A			; pActMenuWnd2
PUBLIC	?pActMenuWnd4@@3PAUaction@@A			; pActMenuWnd4
PUBLIC	?pActYesNoWnd@@3PAUaction@@A			; pActYesNoWnd
PUBLIC	?pActMenuWnd5@@3PAUaction@@A			; pActMenuWnd5
PUBLIC	?pActMenuù«?@@3PAUaction@@A			; pActMenuù«?
PUBLIC	?pActMenu??@@3PAUaction@@A			; pActMenu??
PUBLIC	?pActMenuÎÃ?@@3PAUaction@@A			; pActMenuÎÃ?
PUBLIC	?pActMenuìÑÚª@@3PAUaction@@A			; pActMenuìÑÚª
PUBLIC	??_C@_0BK@CGBENDMD@?5?5?5?5?5?5?5?$LI?p?5?5?5?5?5?5?5?$LD?k?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@DHKPLCBK@?5?5?5?5?5?5?$LN?$LK?5?E?W?5?$LH?$LJ?5?$LP?$MA?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BD@PHEKGFNN@?5?5?5?5?5?H?$LI?5?5?5?5?$LL?v?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BD@JHCIAJMC@?5?5?5?5?5?$LA?x?5?$LH?f?5?$LO?K?5?5?5?5?5@ ; `string'
PUBLIC	?WINDOW_CREATE_FRAME@@3HA			; WINDOW_CREATE_FRAME
PUBLIC	?byShowPetItemBackground@@3PAEA			; byShowPetItemBackground
PUBLIC	?charDetailPage@@3HA				; charDetailPage
PUBLIC	?SkillWndflag@@3_NA				; SkillWndflag
PUBLIC	?SkillWnd@@3FA					; SkillWnd
PUBLIC	??Ðü??äÎ?Ï£Ü·@@3HA				; ?Ðü??äÎ?Ï£Ü·
PUBLIC	??Ðü??äÎ?Ï£Ü·@@3PAHA				; ?Ðü??äÎ?Ï£Ü·
PUBLIC	?pActSkillMenuWnd@@3PAUaction@@A		; pActSkillMenuWnd
PUBLIC	?MAX_PET_TBL@@3HA				; MAX_PET_TBL
PUBLIC	?í»?Ôô??Ï¢@@3HA					; í»?Ôô??Ï¢
PUBLIC	?pí»?Ôô??Ï¢@@3PAUaction@@A			; pí»?Ôô??Ï¢
PUBLIC	?Û°ú¾?íÂ@@3PAUaction@@A				; Û°ú¾?íÂ
PUBLIC	?ìÑÚª?íÂ@@3PAUaction@@A				; ìÑÚª?íÂ
EXTRN	?DISPLACEMENT_Y@@3HA:DWORD			; DISPLACEMENT_Y
_BSS	SEGMENT
?TaskBarFlag@@3HA DD 01H DUP (?)			; TaskBarFlag
?MenuToggleFlag@@3IA DD 01H DUP (?)			; MenuToggleFlag
?ItemBuffer@@3PAUITEM_BUFFER@@A DB 06c0H DUP (?)	; ItemBuffer
?StatusUpPoint@@3HA DD 01H DUP (?)			; StatusUpPoint
?BattlePetReceiveFlag@@3HA DD 01H DUP (?)		; BattlePetReceiveFlag
?StandbyPetSendFlag@@3HA DD 01H DUP (?)			; StandbyPetSendFlag
?MailHistory@@3PAUMAIL_HISTORY@@A DB 04ab00H DUP (?)	; MailHistory
?chatRegistryStr@@3PAUSTR_BUFFER@@A DB 0940H DUP (?)	; chatRegistryStr
?MailStr@@3USTR_BUFFER@@A DB 0128H DUP (?)		; MailStr
?pActMenuWnd3@@3PAUaction@@A DD 01H DUP (?)		; pActMenuWnd3
?shougouChange@@3USTR_BUFFER@@A DB 0128H DUP (?)	; shougouChange
?MymoneyBuffer@@3USTR_BUFFER@@A DB 0128H DUP (?)	; MymoneyBuffer
?TradeBuffer@@3USTR_BUFFER@@A DB 0128H DUP (?)		; TradeBuffer
?petNameChange@@3USTR_BUFFER@@A DB 0128H DUP (?)	; petNameChange
?petStatusNo@@3HA DD 01H DUP (?)			; petStatusNo
?mailHistoryWndPageNo@@3HA DD 01H DUP (?)		; mailHistoryWndPageNo
?mailHistoryWndSelectNo@@3HA DD 01H DUP (?)		; mailHistoryWndSelectNo
?MapWmdFlagBak@@3HA DD 01H DUP (?)			; MapWmdFlagBak
?ResultWndTimer@@3HA DD 01H DUP (?)			; ResultWndTimer
?ItemMixRecvFlag@@3HA DD 01H DUP (?)			; ItemMixRecvFlag
?TalkMode@@3HA DD 01H DUP (?)				; TalkMode
?secretName@@3PADA DB 020H DUP (?)			; secretName
?setRoomFlag@@3_NA DB 01H DUP (?)			; setRoomFlag
	ALIGN	4

?secretFlag@@3_NA DB 01H DUP (?)			; secretFlag
	ALIGN	4

?pChtChanlWnd@@3PAUaction@@A DD 01H DUP (?)		; pChtChanlWnd
?pSelChanlWnd@@3PAUaction@@A DD 01H DUP (?)		; pSelChanlWnd
?chatRoomName@@3USTR_BUFFER@@A DB 0128H DUP (?)		; chatRoomName
?pSetRoomWnd@@3PAUaction@@A DD 01H DUP (?)		; pSetRoomWnd
?Ûå???@@3HA DD	01H DUP (?)				; Ûå???
?ìÑÚª?øÌ??@@3HA DD 01H DUP (?)				; ìÑÚª?øÌ??
????ãÆ??@@3HA DD 01H DUP (?)				; ???ãÆ??
?ê«ò¢éç?@@3HA DD 01H DUP (?)				; ê«ò¢éç?
?DropPetWndflag@@3_NA DB 01H DUP (?)			; DropPetWndflag
	ALIGN	4

?ChangePetName@@3_NA DB 01H DUP (?)			; ChangePetName
	ALIGN	4

?ChangeMyName@@3_NA DB 01H DUP (?)			; ChangeMyName
	ALIGN	4

?UpDownflag@@3HA DD 01H DUP (?)				; UpDownflag
?systemWndNo@@3IA DD 01H DUP (?)			; systemWndNo
?talkmsg@@3PAY0BAA@DA DB 0400H DUP (?)			; talkmsg
?talkwndflag@@3_NA DB 01H DUP (?)			; talkwndflag
	ALIGN	4

?tradetalkwndflag@@3_NA DB 01H DUP (?)			; tradetalkwndflag
	ALIGN	4

?Moneyflag@@3_NA DB 01H DUP (?)				; Moneyflag
	ALIGN	4

?Tradeflag@@3_NA DB 01H DUP (?)				; Tradeflag
	ALIGN	4

?TradeBtnflag@@3_NA DB 01H DUP (?)			; TradeBtnflag
	ALIGN	4

?mapWndFontNo@@3PAHA DD 03H DUP (?)			; mapWndFontNo
?showindex@@3PAHA DD 07H DUP (?)			; showindex
?itemflag@@3PAHA DD 0fH DUP (?)				; itemflag
?SecondTradeWndflag@@3_NA DB 01H DUP (?)		; SecondTradeWndflag
	ALIGN	4

?SecondTradeWnd@@3PAUaction@@A DD 01H DUP (?)		; SecondTradeWnd
?TradeTalkWnd@@3PAUaction@@A DD 01H DUP (?)		; TradeTalkWnd
?ShowPetNum@@3HA DD 01H DUP (?)				; ShowPetNum
?tmpdrag1Y@@3HA DD 01H DUP (?)				; tmpdrag1Y
?tmpdrag2Y@@3HA DD 01H DUP (?)				; tmpdrag2Y
?dragflag1@@3_NA DB 01H DUP (?)				; dragflag1
	ALIGN	4

?dragflag2@@3_NA DB 01H DUP (?)				; dragflag2
	ALIGN	4

?MultiTells@@3HA DD 01H DUP (?)				; MultiTells
?pActMsgWnd@@3PAUaction@@A DD 01H DUP (?)		; pActMsgWnd
?CharNum@@3HA DD 01H DUP (?)				; CharNum
?TellInfo@@3PAY0IA@DA DB 0500H DUP (?)			; TellInfo
?name@@3PAY0CA@DA DB 0140H DUP (?)			; name
?index@@3PAHA DD 0aH DUP (?)				; index
?reSendMsg@@3PADA DB 0104H DUP (?)			; reSendMsg
?chatInfo@@3UCHATINFO@@A DB 0ad4H DUP (?)		; chatInfo
?BtnType@@3_NA DB 01H DUP (?)				; BtnType
	ALIGN	4

?assentFlag@@3_NA DB 01H DUP (?)			; assentFlag
	ALIGN	4

?scrollFlag@@3_NA DB 01H DUP (?)			; scrollFlag
	ALIGN	4

?roomInfo@@3PAY0EA@DA DB 0c80H DUP (?)			; roomInfo
?memInfo@@3PADA DB 040H DUP (?)				; memInfo
?scrlBtnIndex@@3HA DD 01H DUP (?)			; scrlBtnIndex
?BtnNo@@3HA DD	01H DUP (?)				; BtnNo
?firMemNo@@3HA DD 01H DUP (?)				; firMemNo
?closeBtn@@3HA DD 01H DUP (?)				; closeBtn
?leaveBtn@@3HA DD 01H DUP (?)				; leaveBtn
?delBtn@@3HA DD	01H DUP (?)				; delBtn
?chaBtn@@3HA DD	01H DUP (?)				; chaBtn
?outBtn@@3HA DD	01H DUP (?)				; outBtn
?scrlHBtn@@3HA DD 01H DUP (?)				; scrlHBtn
?scrlLBtn@@3HA DD 01H DUP (?)				; scrlLBtn
?roomIndex@@3PAHA DD 032H DUP (?)			; roomIndex
?roomNum@@3HA DD 01H DUP (?)				; roomNum
?memIndex@@3HA DD 01H DUP (?)				; memIndex
?pAssentWnd@@3PAUaction@@A DD 01H DUP (?)		; pAssentWnd
?mixPetNo@@3HA DD 01H DUP (?)				; mixPetNo
?SelectWazaNo@@3HA DD 01H DUP (?)			; SelectWazaNo
?itemWndMaxBag@@3HA DD 01H DUP (?)			; itemWndMaxBag
?itemWndBagOffset@@3HA DD 01H DUP (?)			; itemWndBagOffset
?pActLetter@@3PAPAUaction@@A DD 04H DUP (?)		; pActLetter
?pActMailItem@@3PAUaction@@A DD 01H DUP (?)		; pActMailItem
?PetAlbum@@3PAUPET_ALBUM@@A DB 0b220H DUP (?)		; PetAlbum
?AlbumIdCnt@@3HA DD 01H DUP (?)				; AlbumIdCnt
?resultWndFontNo@@3PAHA DD 01H DUP (?)			; resultWndFontNo
?bShowItemExplain@@3HA DD 01H DUP (?)			; bShowItemExplain
?CharDetail@@3PAY0BA@DA DB 080H DUP (?)			; CharDetail
?iCharAlchePlus@@3PAHA DD 019H DUP (?)			; iCharAlchePlus
?pActMenuWnd@@3PAUaction@@A DD 01H DUP (?)		; pActMenuWnd
?pActMenuWnd2@@3PAUaction@@A DD 01H DUP (?)		; pActMenuWnd2
?pActMenuWnd4@@3PAUaction@@A DD 01H DUP (?)		; pActMenuWnd4
?pActYesNoWnd@@3PAUaction@@A DD 01H DUP (?)		; pActYesNoWnd
?pActMenuWnd5@@3PAUaction@@A DD 01H DUP (?)		; pActMenuWnd5
?pActMenuù«?@@3PAUaction@@A DD 01H DUP (?)		; pActMenuù«?
?pActMenu??@@3PAUaction@@A DD 01H DUP (?)		; pActMenu??
?pActMenuÎÃ?@@3PAUaction@@A DD 01H DUP (?)		; pActMenuÎÃ?
?pActMenuìÑÚª@@3PAUaction@@A DD 01H DUP (?)		; pActMenuìÑÚª
?SkillWndflag@@3_NA DB 01H DUP (?)			; SkillWndflag
	ALIGN	4

?SkillWnd@@3FA DW 01H DUP (?)				; SkillWnd
	ALIGN	4

??Ðü??äÎ?Ï£Ü·@@3HA DD 01H DUP (?)			; ?Ðü??äÎ?Ï£Ü·
??Ðü??äÎ?Ï£Ü·@@3PAHA DD 03H DUP (?)			; ?Ðü??äÎ?Ï£Ü·
?pActSkillMenuWnd@@3PAUaction@@A DD 01H DUP (?)		; pActSkillMenuWnd
?MAX_PET_TBL@@3HA DD 01H DUP (?)			; MAX_PET_TBL
?í»?Ôô??Ï¢@@3HA DD 01H DUP (?)				; í»?Ôô??Ï¢
?pí»?Ôô??Ï¢@@3PAUaction@@A DD 01H DUP (?)		; pí»?Ôô??Ï¢
?Û°ú¾?íÂ@@3PAUaction@@A DD 01H DUP (?)			; Û°ú¾?íÂ
?ìÑÚª?íÂ@@3PAUaction@@A DD 01H DUP (?)			; ìÑÚª?íÂ
_BSS	ENDS
;	COMDAT ??_C@_0BD@JHCIAJMC@?5?5?5?5?5?$LA?x?5?$LH?f?5?$LO?K?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BD@JHCIAJMC@?5?5?5?5?5?$LA?x?5?$LH?f?5?$LO?K?5?5?5?5?5@ DB '     ', 0b0H
	DB	0f8H, ' ', 0b7H, 0e6H, ' ', 0beH, 0cbH, '     ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PHEKGFNN@?5?5?5?5?5?H?$LI?5?5?5?5?$LL?v?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BD@PHEKGFNN@?5?5?5?5?5?H?$LI?5?5?5?5?$LL?v?5?5?5?5?5@ DB '     ', 0c8H
	DB	0b8H, '    ', 0bbH, 0f6H, '     ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHKPLCBK@?5?5?5?5?5?5?$LN?$LK?5?E?W?5?$LH?$LJ?5?$LP?$MA?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@DHKPLCBK@?5?5?5?5?5?5?$LN?$LK?5?E?W?5?$LH?$LJ?5?$LP?$MA?5?5?5?5?5?5?5@ DB ' '
	DB	'     ', 0bdH, 0baH, ' ', 0c5H, 0d7H, ' ', 0b7H, 0b9H, ' ', 0bfH
	DB	0c0H, '       ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CGBENDMD@?5?5?5?5?5?5?5?$LI?p?5?5?5?5?5?5?5?$LD?k?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BK@CGBENDMD@?5?5?5?5?5?5?5?$LI?p?5?5?5?5?5?5?5?$LD?k?5?5?5?5?5?5?5@ DB ' '
	DB	'      ', 0b8H, 0f0H, '       ', 0b3H, 0ebH, '       ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GNJCLAFI@?$KF?$LG@
CONST	SEGMENT
??_C@_02GNJCLAFI@?$KF?$LG@ DB 0a5H, 0b6H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGLPODJL@?$KF?$LF@
CONST	SEGMENT
??_C@_02EGLPODJL@?$KF?$LF@ DB 0a5H, 0b5H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPKENCNK@?$KF?$LE@
CONST	SEGMENT
??_C@_02FPKENCNK@?$KF?$LE@ DB 0a5H, 0b4H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02BAOFEEBN@?$KF?$LD@
CONST	SEGMENT
??_C@_02BAOFEEBN@?$KF?$LD@ DB 0a5H, 0b3H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JPOHFFM@?$KF?$LC@
CONST	SEGMENT
??_C@_02JPOHFFM@?$KF?$LC@ DB 0a5H, 0b2H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CCNDCGJP@?$KF?$LB@
CONST	SEGMENT
??_C@_02CCNDCGJP@?$KF?$LB@ DB 0a5H, 0b1H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DLMIBHNO@?$KF?$LA@
CONST	SEGMENT
??_C@_02DLMIBHNO@?$KF?$LA@ DB 0a5H, 0b0H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?BattlePetReceivePetNo@@3HA DD 0ffffffffH		; BattlePetReceivePetNo
?MouseCursorFlag@@3HA DD 01H				; MouseCursorFlag
?selChar@@3HA DD 0ffffffffH				; selChar
?DropI@@3FA DW	0ffffH					; DropI
?MainTradeWndflag@@3_NA DB 01H				; MainTradeWndflag
	ORG $+1
?ChangePetI@@3FA DW 0ffffH				; ChangePetI
	ORG $+2
?talkwndx@@3HA DD 012cH					; talkwndx
?talkwndy@@3HA DD 015eH					; talkwndy
?drag1Y@@3HA DD	043H					; drag1Y
?mytradelist@@3PAHA DD 0ffffffffH			; mytradelist
	ORG $+80
?drag2Y@@3HA DD	0101H					; drag2Y
?opptradelist@@3PAHA DD 0ffffffffH			; opptradelist
	ORG $+80
?locknum@@3HA DD 0ffffffffH				; locknum
?locknum2@@3HA DD 0ffffffffH				; locknum2
?nPetItemEquipBmpNumber@@3PAY01HA DD 0675fH		; nPetItemEquipBmpNumber
	DD	06766H
	DD	0675cH
	DD	06763H
	DD	0675aH
	DD	06761H
	DD	0675dH
	DD	06764H
	DD	0675bH
	DD	06762H
	DD	06759H
	DD	06760H
	DD	0675eH
	DD	06765H
?TransmigrationStr@@3PAPADA DD FLAT:??_C@_00CNPNBAHC@@	; TransmigrationStr
	DD	FLAT:??_C@_02DLMIBHNO@?$KF?$LA@
	DD	FLAT:??_C@_02CCNDCGJP@?$KF?$LB@
	DD	FLAT:??_C@_02JPOHFFM@?$KF?$LC@
	DD	FLAT:??_C@_02BAOFEEBN@?$KF?$LD@
	DD	FLAT:??_C@_02FPKENCNK@?$KF?$LE@
	DD	FLAT:??_C@_02EGLPODJL@?$KF?$LF@
	DD	FLAT:??_C@_02GNJCLAFI@?$KF?$LG@
?WINDOW_CREATE_FRAME@@3HA DD 01H			; WINDOW_CREATE_FRAME
?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A DD 00H		; PetAlbumTbl
	DB	'?', 0d5H, 0f4H, 00H
	ORG $+13
	ORG $+3
	DD	06d61H
	DD	01H
	DB	'?', 0d5H, 0f4H, '?', 0d5H, 0f4H, 00H
	ORG $+10
	ORG $+3
	DD	06d62H
	DD	02H
	DB	'?', 0d5H, 0f4H, 0deH, 0d9H, 0f7H, 0a4H, 00H
	ORG $+9
	ORG $+3
	DD	06d63H
	DD	03H
	DB	'?', 0d5H, 0f4H, 0f8H, 0d6H, '?', 00H
	ORG $+10
	ORG $+3
	DD	06d64H
	DD	08H
	DB	0f8H, 0d6H, 0ddH, 0efH, 00H
	ORG $+12
	ORG $+3
	DD	06d6bH
	DD	09H
	DB	0d1H, 0d1H, 0f8H, 0d6H, 0ecH, 0a5H, 00H
	ORG $+10
	ORG $+3
	DD	06d6cH
	DD	0aH
	DB	0f8H, 0d6H, 0ecH, 0a5H, 00H
	ORG $+12
	ORG $+3
	DD	06d6dH
	DD	0bH
	DB	0f8H, 0d6H, 0ecH, 0a5H, 0ddH, 0efH, 00H
	ORG $+10
	ORG $+3
	DD	06d6eH
	DD	0cH
	DB	'?', 0f8H, 0d6H, 0ecH, 0a5H, 00H
	ORG $+11
	ORG $+3
	DD	06d6fH
	DD	010H
	DB	0caH, 0a5H, 0daH, 0b8H, 00H
	ORG $+12
	ORG $+3
	DD	06d75H
	DD	011H
	DB	0caH, 0a5H, 0ddH, 0efH, 00H
	ORG $+12
	ORG $+3
	DD	06d76H
	DD	012H
	DB	0caH, 0a5H, 0ddH, 0efH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06d77H
	DD	013H
	DB	0caH, 0a5H, 0deH, 0d9H, 00H
	ORG $+12
	ORG $+3
	DD	06d78H
	DD	018H
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06d7fH
	DD	019H
	DB	0eaH, 0ceH, 0eaH, 0ceH, 00H
	ORG $+12
	ORG $+3
	DD	06d80H
	DD	01aH
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06d81H
	DD	01bH
	DB	0eaH, 0ceH, 0dbH, 0d7H, 00H
	ORG $+12
	ORG $+3
	DD	06d82H
	DD	020H
	DB	'?', 0d5H, 0a6H, 0ebH, 0daH, 00H
	ORG $+11
	ORG $+3
	DD	06d89H
	DD	021H
	DB	'?', 0d5H, 0a6H, 0d5H, 0a6H, 0d0H, 0baH, 00H
	ORG $+9
	ORG $+3
	DD	06d8aH
	DD	022H
	DB	'?', 0d5H, 0a6H, '?', 0d0H, 0baH, '?', 00H
	ORG $+9
	ORG $+3
	DD	06d8bH
	DD	023H
	DB	'?', 0d5H, 0a6H, '?', 0d7H, 0d7H, 00H
	ORG $+10
	ORG $+3
	DD	06d8cH
	DD	028H
	DB	'?', 0f1H, 0fdH, 0e2H, 0eaH, 00H
	ORG $+11
	ORG $+3
	DD	06d93H
	DD	029H
	DB	'??', 00H
	ORG $+14
	ORG $+3
	DD	06d94H
	DD	02aH
	DB	'?', 0d8H, 0deH, '?', 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06d95H
	DD	02bH
	DB	0e0H, 0b4H, '?', 00H
	ORG $+13
	ORG $+3
	DD	06d96H
	DD	030H
	DB	0e4H, 0b9H, 0caH, 0a8H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06d9eH
	DD	031H
	DB	0d2H, 0f9H, 0caH, 0a6H, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06d9dH
	DD	032H
	DB	0f7H, 0e5H, 0d5H, 0a6H, 0cdH, 0e0H, 00H
	ORG $+10
	ORG $+3
	DD	06d9fH
	DD	033H
	DB	'?', 0d0H, 0baH, '?', 00H
	ORG $+12
	ORG $+3
	DD	06da0H
	DD	038H
	DB	0d5H, 0c3H, 0d0H, 0f4H, '?', 0caH, 0a8H, 00H
	ORG $+9
	ORG $+3
	DD	06da7H
	DD	039H
	DB	0fbH, 0bcH, 0daH, 0fbH, 0daH, 0fbH, 00H
	ORG $+10
	ORG $+3
	DD	06da8H
	DD	03aH
	DB	0d2H, 0fdH, '?', 0d1H, 0d1H, 0ccH, 0abH, 00H
	ORG $+9
	ORG $+3
	DD	06da9H
	DD	03bH
	DB	'?', 0d2H, 0f9H, 0f4H, 0deH, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06daaH
	DD	040H
	DB	'????', 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06db1H
	DD	041H
	DB	0caH, 0afH, 0ecH, 0a5H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06db2H
	DD	042H
	DB	0caH, 0afH, 0d5H, 0a6H, 0caH, 0a5H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06db3H
	DD	043H
	DB	0d5H, 0a6H, 0d0H, 0f4H, 0e4H, 0ccH, 00H
	ORG $+10
	ORG $+3
	DD	06db4H
	DD	048H
	DB	0d7H, 0d7H, '???', 00H
	ORG $+11
	ORG $+3
	DD	06dbbH
	DD	049H
	DB	'?', 0d0H, 0f4H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06dbcH
	DD	04aH
	DB	0dbH, 0c0H, 0f8H, 0ddH, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06dbdH
	DD	04bH
	DB	0dbH, 0c0H, 0d0H, 0f4H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06dbeH
	DD	050H
	DB	0d0H, 0baH, 0d6H, 0f4H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06dc5H
	DD	051H
	DB	0d0H, 0baH, 0d0H, 0baH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06dc6H
	DD	052H
	DB	0d0H, 0baH, 0d5H, 0a6H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06dc7H
	DD	053H
	DB	0d7H, 0ecH, 0deH, 0d9H, 0d0H, 0f1H, 00H
	ORG $+10
	ORG $+3
	DD	06dc8H
	DD	058H
	DB	'?', 0ddH, 0efH, 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06dcfH
	DD	059H
	DB	'?', 0ddH, 0efH, 00H
	ORG $+13
	ORG $+3
	DD	06dd0H
	DD	05aH
	DB	0cdH, 0e0H, 0ecH, 0a5H, 00H
	ORG $+12
	ORG $+3
	DD	06dd1H
	DD	05bH
	DB	'?', 0ddH, 0efH, 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06dd2H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	060H
	DB	0ccH, 0abH, '??', 00H
	ORG $+12
	ORG $+3
	DD	06dedH
	DD	061H
	DB	0d0H, 0f4H, 0d5H, 0c3H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06deeH
	DD	062H
	DB	'??', 0ccH, 0abH, '??', 00H
	ORG $+10
	ORG $+3
	DD	06defH
	DD	063H
	DB	0ccH, 0abH, '?', 0ccH, 0abH, 00H
	ORG $+11
	ORG $+3
	DD	06df0H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	068H
	DB	0e1H, 0f3H, '?', 00H
	ORG $+13
	ORG $+3
	DD	06e0bH
	DD	069H
	DB	'?', 0d5H, 0c3H, '?', 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06e0cH
	DD	06aH
	DB	0f8H, 0d6H, 0d0H, 0baH, 0f8H, 0d6H, 0d0H, 0baH, 00H
	ORG $+8
	ORG $+3
	DD	06e0dH
	DD	06bH
	DB	0d2H, 0fdH, 0d5H, 0a6H, 0caH, 0a5H, 00H
	ORG $+10
	ORG $+3
	DD	06e0eH
	DD	070H
	DB	'?', 0d0H, 0baH, '?', 00H
	ORG $+12
	ORG $+3
	DD	06e15H
	DD	071H
	DB	0f7H, 0e9H, 0d0H, 0baH, 00H
	ORG $+12
	ORG $+3
	DD	06e16H
	DD	072H
	DB	'?', 00H
	ORG $+15
	ORG $+3
	DD	06e17H
	DD	073H
	DB	'?', 0d5H, 0c3H, '?', 0d7H, 0d7H, 00H
	ORG $+10
	ORG $+3
	DD	06e18H
	DD	078H
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06e1fH
	DD	079H
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06e20H
	DD	07aH
	DB	'????', 00H
	ORG $+12
	ORG $+3
	DD	06e21H
	DD	07bH
	DB	'????', 00H
	ORG $+12
	ORG $+3
	DD	06e22H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	080H
	DB	0d2H, 0fdH, 0d7H, 0d7H, '?', 0f8H, 0d6H, 0deH, 0d9H, 00H
	ORG $+7
	ORG $+3
	DD	06e33H
	DD	081H
	DB	'?', 0ebH, 0daH, '?', 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06e34H
	DD	082H
	DB	0d2H, 0fdH, 0d7H, 0d7H, '?', 0d5H, 0c3H, 00H
	ORG $+9
	ORG $+3
	DD	06e35H
	DD	083H
	DB	0d2H, 0fdH, 0d5H, 0a6H, 0f8H, 0d6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06e36H
	DD	088H
	DB	0d0H, 0baH, 0dbH, 0c0H, '?', 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06e3dH
	DD	089H
	DB	0caH, 0a5H, 0d0H, 0baH, 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06e3eH
	DD	08aH
	DB	0caH, 0a5H, 0ccH, 0abH, 00H
	ORG $+12
	ORG $+3
	DD	06e3fH
	DD	08bH
	DB	0dbH, 0c0H, 0ebH, 0daH, 0d1H, 0ceH, 00H
	ORG $+10
	ORG $+3
	DD	06e40H
	DD	090H
	DB	0d0H, 0f4H, '?', 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06e47H
	DD	091H
	DB	0d0H, 0f4H, 0d1H, 0d6H, 00H
	ORG $+12
	ORG $+3
	DD	06e48H
	DD	092H
	DB	0d0H, 0f4H, '??', 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06e49H
	DD	093H
	DB	'??', 0d1H, 0d1H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06e4aH
	DD	098H
	DB	0dbH, 0c0H, 0d0H, 0f4H, 00H
	ORG $+12
	ORG $+3
	DD	06e51H
	DD	099H
	DB	0d9H, 0b5H, 0ecH, 0a5H, 00H
	ORG $+12
	ORG $+3
	DD	06e52H
	DD	09aH
	DB	0faH, 0adH, 0f1H, 0abH, 0ecH, 0d1H, 00H
	ORG $+10
	ORG $+3
	DD	06e53H
	DD	09bH
	DB	0d2H, 0fdH, '??', 00H
	ORG $+12
	ORG $+3
	DD	06e54H
	DD	0a0H
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06e5bH
	DD	0a1H
	DB	'????', 00H
	ORG $+12
	ORG $+3
	DD	06e5cH
	DD	0a2H
	DB	'?????', 00H
	ORG $+11
	ORG $+3
	DD	06e5dH
	DD	0a3H
	DB	'????', 00H
	ORG $+12
	ORG $+3
	DD	06e5eH
	DD	0a8H
	DB	'?', 0ebH, 0daH, 0d8H, 0a4H, 00H
	ORG $+11
	ORG $+3
	DD	06e65H
	DD	0a9H
	DB	0ebH, 0daH, 0d8H, 0a4H, 0d8H, 0a4H, 00H
	ORG $+10
	ORG $+3
	DD	06e66H
	DD	0aaH
	DB	'?', 0d8H, 0a4H, 0d1H, 0e1H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06e67H
	DD	0abH
	DB	'?', 0ebH, 0daH, 0d8H, 0a4H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+7
	ORG $+3
	DD	06e68H
	DD	0b0H
	DB	0f4H, 0deH, 0d5H, 0c3H, 0ccH, 0abH, 0ebH, 0daH, 00H
	ORG $+8
	ORG $+3
	DD	06e6fH
	DD	0b1H
	DB	0d5H, 0a6H, '??', 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06e70H
	DD	0b2H
	DB	0caH, 0a5H, '?', 0ccH, 0abH, 0ebH, 0daH, 00H
	ORG $+9
	ORG $+3
	DD	06e71H
	DD	0b3H
	DB	'?', 0d5H, 0c3H, 0ddH, 0efH, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06e72H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0b8H
	DB	0fbH, 0fdH, '?', 00H
	ORG $+13
	ORG $+3
	DD	06e83H
	DD	0b9H
	DB	0d0H, 0baH, 0d0H, 0baH, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06e84H
	DD	0baH
	DB	'??', 0d0H, 0baH, 00H
	ORG $+12
	ORG $+3
	DD	06e85H
	DD	0bbH
	DB	0d0H, 0f4H, '?', 00H
	ORG $+13
	ORG $+3
	DD	06e86H
	DD	0c0H
	DB	'??', 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06e8dH
	DD	0c1H
	DB	0f1H, 0a7H, 0eeH, 0e8H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06e8eH
	DD	0c2H
	DB	0f7H, 0e9H, '??', 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06e8fH
	DD	0c3H
	DB	0f4H, 0deH, 0d5H, 0c3H, 0e1H, 0b6H, 0ecH, 0a5H, '?', 00H
	ORG $+7
	ORG $+3
	DD	06e90H
	DD	0c8H
	DB	0f8H, 0d6H, 0ecH, 0a5H, 0d3H, 0ecH, 00H
	ORG $+10
	ORG $+3
	DD	06e97H
	DD	0c9H
	DB	0d8H, 0a4H, 0d1H, 0d6H, 0e0H, 0a4H, 0dcH, 0c5H, 00H
	ORG $+8
	ORG $+3
	DD	06e98H
	DD	0caH
	DB	'?', 0ecH, 0a5H, '?', 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06e99H
	DD	0cbH
	DB	0d5H, 0c3H, 0ecH, 0a5H, '?', 0ebH, 0daH, 00H
	ORG $+9
	ORG $+3
	DD	06e9aH
	DD	0d0H
	DB	0deH, 0c8H, 0d2H, 0fdH, 0d5H, 0c3H, 0d0H, 0f4H, '?', 00H
	ORG $+7
	ORG $+3
	DD	06ea1H
	DD	0d1H
	DB	'?', 0daH, 0b8H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06ea2H
	DD	0d2H
	DB	0e4H, 0b9H, 0d7H, 0d7H, '?', 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+7
	ORG $+3
	DD	06ea3H
	DD	0d3H
	DB	'?', 0ecH, 0a5H, '?', 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06ea4H
	DD	0d4H
	DB	0d5H, 0c3H, 0caH, 0a6H, 0d5H, 0c3H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06ea5H
	DD	0d8H
	DB	0dbH, 0c0H, 0d5H, 0a6H, 0d5H, 0a6H, 0d0H, 0baH, 0deH, 0d9H
	DB	00H
	ORG $+6
	ORG $+3
	DD	06eabH
	DD	0d9H
	DB	'???', 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06eacH
	DD	0daH
	DB	0caH, 0a6H, 0d7H, 0d7H, 0d2H, 0fdH, 0d5H, 0a6H, 0deH, 0d9H
	DB	00H
	ORG $+6
	ORG $+3
	DD	06eadH
	DD	0dbH
	DB	'?', 0deH, 0d9H, 0d2H, 0fdH, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+7
	ORG $+3
	DD	06eaeH
	DD	04H
	DB	0fdH, 0d9H, '?', 0d5H, 0f4H, 00H
	ORG $+11
	ORG $+3
	DD	06d65H
	DD	044H
	DB	0d5H, 0a6H, 0d0H, 0baH, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06db5H
	DD	045H
	DB	0e4H, 0b9H, 0ecH, 0a5H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06db6H
	DD	046H
	DB	0ccH, 0abH, 0d5H, 0a6H, 0ccH, 0abH, '?', 00H
	ORG $+9
	ORG $+3
	DD	06db7H
	DD	047H
	DB	'?', 0d5H, 0a6H, '?', 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06db8H
	DD	034H
	DB	0dbH, 0daH, 0d0H, 0baH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06da1H
	DD	04cH
	DB	0f8H, 0d6H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06dbfH
	DD	06cH
	DB	0f8H, 0d6H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06e0fH
	DD	0a4H
	DB	'????', 00H
	ORG $+12
	ORG $+3
	DD	06e5fH
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ffffffffH
	DB	0d9H, 0e9H, 00H
	ORG $+14
	ORG $+3
	DD	00H
	DD	0ccH
	DB	0dbH, 0c0H, '??', 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06e9bH
	DD	05H
	DB	'???', 0d5H, 0f4H, 00H
	ORG $+11
	ORG $+3
	DD	06d66H
	DD	06H
	DB	'?', 0d5H, 0f4H, '?', 0d3H, 0ecH, 00H
	ORG $+10
	ORG $+3
	DD	06d67H
	DD	07H
	DB	'?', 0d5H, 0f4H, 0cdH, 0b3H, 0d5H, 0f4H, 00H
	ORG $+9
	ORG $+3
	DD	06d68H
	DD	0dH
	DB	0f8H, 0d6H, 0ebH, 0eeH, 0f8H, 0d6H, '?', 00H
	ORG $+9
	ORG $+3
	DD	06d70H
	DD	0eH
	DB	0f8H, 0d6H, 0ebH, 0eeH, 0f8H, 0d6H, 0ebH, 0eeH, 00H
	ORG $+8
	ORG $+3
	DD	06d71H
	DD	0fH
	DB	0f8H, 0d6H, 0ebH, 0eeH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06d72H
	DD	014H
	DB	0caH, 0a5H, 0caH, 0a5H, 00H
	ORG $+12
	ORG $+3
	DD	06d79H
	DD	015H
	DB	0caH, 0a5H, 0deH, 0d9H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06d7aH
	DD	016H
	DB	0caH, 0a5H, 0ccH, 0abH, 0d6H, 0f4H, 0ebH, 0eeH, 00H
	ORG $+8
	ORG $+3
	DD	06d7bH
	DD	017H
	DB	0ddH, 0efH, 0ddH, 0efH, 0caH, 0a5H, 00H
	ORG $+10
	ORG $+3
	DD	06d7cH
	DD	01cH
	DB	'??', 0ebH, 0eeH, 00H
	ORG $+12
	ORG $+3
	DD	06d83H
	DD	01dH
	DB	0eaH, 0ceH, 0deH, 0d9H, 00H
	ORG $+12
	ORG $+3
	DD	06d84H
	DD	01eH
	DB	0eaH, 0ceH, 0ddH, 0efH, 00H
	ORG $+12
	ORG $+3
	DD	06d85H
	DD	01fH
	DB	'?', 0d5H, 0c3H, 0d5H, 0c3H, 00H
	ORG $+11
	ORG $+3
	DD	06d86H
	DD	024H
	DB	'?', 0d5H, 0a6H, 0d1H, 0d1H, 00H
	ORG $+11
	ORG $+3
	DD	06d8dH
	DD	025H
	DB	'?', 0d5H, 0a6H, 0ccH, 0abH, 00H
	ORG $+11
	ORG $+3
	DD	06d8eH
	DD	026H
	DB	'?', 0d5H, 0a6H, '?', 00H
	ORG $+12
	ORG $+3
	DD	06d8fH
	DD	027H
	DB	'?', 0d5H, 0a6H, 0f7H, 0eeH, 0f7H, 0eeH, 00H
	ORG $+9
	ORG $+3
	DD	06d90H
	DD	02cH
	DB	'??', 00H
	ORG $+14
	ORG $+3
	DD	06d97H
	DD	02dH
	DB	'?', 0d5H, 0c3H, 0ccH, 0abH, '?', 00H
	ORG $+10
	ORG $+3
	DD	06d98H
	DD	02eH
	DB	'?', 0f1H, 0fdH, '?', 00H
	ORG $+12
	ORG $+3
	DD	06d99H
	DD	02fH
	DB	'?', 0d5H, 0c3H, '?', 00H
	ORG $+12
	ORG $+3
	DD	06d9aH
	DD	035H
	DB	0d2H, 0f9H, 0caH, 0a5H, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06da2H
	DD	036H
	DB	0d2H, 0f9H, 0d0H, 0f1H, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06da3H
	DD	037H
	DB	0f7H, 0e5H, 0d5H, 0a6H, 0caH, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06da4H
	DD	03cH
	DB	0fbH, 0bcH, 0f7H, 0eeH, 0f7H, 0eeH, 00H
	ORG $+10
	ORG $+3
	DD	06dabH
	DD	03dH
	DB	0fbH, 0bcH, '??', 00H
	ORG $+12
	ORG $+3
	DD	06dacH
	DD	03eH
	DB	'?', 0d5H, 0c3H, 0d0H, 0ecH, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06dadH
	DD	03fH
	DB	0d5H, 0c3H, 0d0H, 0f4H, 0deH, 0d9H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06daeH
	DD	04dH
	DB	0dbH, 0c0H, '?', 0deH, 0d9H, 0d1H, 0d6H, 00H
	ORG $+9
	ORG $+3
	DD	06dc0H
	DD	04eH
	DB	'?', 0ccH, 0abH, 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06dc1H
	DD	04fH
	DB	0eeH, 0e8H, 0d0H, 0f1H, 0ccH, 0abH, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06dc2H
	DD	054H
	DB	0d0H, 0baH, 0d5H, 0c3H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06dc9H
	DD	055H
	DB	0d5H, 0c3H, 0deH, 0d9H, 0d0H, 0f1H, 00H
	ORG $+10
	ORG $+3
	DD	06dcaH
	DD	056H
	DB	0d7H, 0ecH, 0d5H, 0c3H, 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06dcbH
	DD	057H
	DB	0d0H, 0baH, '??', 00H
	ORG $+12
	ORG $+3
	DD	06dccH
	DD	05cH
	DB	'??', 0f7H, 0e5H, 00H
	ORG $+12
	ORG $+3
	DD	06dd3H
	DD	05dH
	DB	0cdH, 0e0H, 0ebH, 0eeH, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06dd4H
	DD	05eH
	DB	0ddH, 0efH, 0f7H, 0e5H, 00H
	ORG $+12
	ORG $+3
	DD	06dd5H
	DD	05fH
	DB	0caH, 0a6H, '?', 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06dd6H
	DD	064H
	DB	0deH, 0c9H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06df1H
	DD	065H
	DB	0ccH, 0abH, '?', 0fdH, 0f1H, 0d5H, 0a6H, 00H
	ORG $+9
	ORG $+3
	DD	06df2H
	DD	066H
	DB	0d8H, 0deH, '?? ', 00H
	ORG $+11
	ORG $+3
	DD	06df3H
	DD	067H
	DB	0cdH, 0fcH, 0d4H, 0f4H, '??', 00H
	ORG $+10
	ORG $+3
	DD	06df4H
	DD	06dH
	DB	'??', 00H
	ORG $+14
	ORG $+3
	DD	06e10H
	DD	06eH
	DB	0dfH, 0faH, 0d3H, 0ecH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06e11H
	DD	06fH
	DB	0d9H, 0beH, '?', 00H
	ORG $+13
	ORG $+3
	DD	06e12H
	DD	074H
	DB	'?', 0d7H, 0f9H, 0d1H, 0ceH, '?', 00H
	ORG $+10
	ORG $+3
	DD	06e19H
	DD	075H
	DB	0deH, 0c8H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06e1aH
	DD	076H
	DB	0e5H, 0adH, 0dcH, 0c5H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06e1bH
	DD	077H
	DB	0f7H, 0f4H, 0d5H, 0c3H, 0f7H, 0f4H, 00H
	ORG $+10
	ORG $+3
	DD	06e1cH
	DD	07cH
	DB	0dcH, 0c5H, '?', 0f9H, 0beH, 00H
	ORG $+11
	ORG $+3
	DD	06e23H
	DD	07dH
	DB	0f8H, 0a5H, 0d6H, 0daH, 0f9H, 0beH, 00H
	ORG $+10
	ORG $+3
	DD	06e24H
	DD	07eH
	DB	'?', 0ccH, 0abH, '?', 00H
	ORG $+12
	ORG $+3
	DD	06e25H
	DD	07fH
	DB	'?', 0deH, 0d9H, '??', 00H
	ORG $+11
	ORG $+3
	DD	06e26H
	DD	084H
	DB	'?', 0efH, 0cbH, 0f8H, 0d6H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06e37H
	DD	085H
	DB	0caH, 0a5H, 0e5H, 0adH, 0f8H, 0d6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06e38H
	DD	086H
	DB	0eeH, 0e8H, 0daH, 0b7H, 0f8H, 0d6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06e39H
	DD	087H
	DB	'?', 0d5H, 0a6H, 0f8H, 0d6H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06e3aH
	DD	08cH
	DB	0eeH, 0e8H, 0caH, 0a5H, 00H
	ORG $+12
	ORG $+3
	DD	06e41H
	DD	08dH
	DB	0deH, 0e3H, '?', 00H
	ORG $+13
	ORG $+3
	DD	06e42H
	DD	08eH
	DB	0f7H, 0eeH, 0f7H, 0eeH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06e43H
	DD	08fH
	DB	0d8H, 0deH, '?', 0deH, 0edH, 00H
	ORG $+11
	ORG $+3
	DD	06e44H
	DD	094H
	DB	0e9H, 0d6H, 0d7H, 0ecH, 0e8H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06e4bH
	DD	095H
	DB	'?', 0d7H, 0ecH, 0e8H, 0c3H, 00H
	ORG $+11
	ORG $+3
	DD	06e4cH
	DD	096H
	DB	0e4H, 0f5H, '?', 0e8H, 0c3H, 00H
	ORG $+11
	ORG $+3
	DD	06e4dH
	DD	097H
	DB	0d7H, 0ecH, '?', 0e8H, 0c3H, 00H
	ORG $+11
	ORG $+3
	DD	06e4eH
	DD	09cH
	DB	'?', 0e3H, 0a2H, 0deH, 0a3H, 00H
	ORG $+11
	ORG $+3
	DD	06e55H
	DD	09dH
	DB	0d8H, 0b0H, 0d5H, 0c3H, 0deH, 0c9H, 00H
	ORG $+10
	ORG $+3
	DD	06e56H
	DD	09eH
	DB	'?', 0deH, 0d9H, 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06e57H
	DD	09fH
	DB	0deH, 0deH, 0e8H, 0bfH, 0d6H, 0aaH, 00H
	ORG $+10
	ORG $+3
	DD	06e58H
	DD	0a5H
	DB	'??', 0d5H, 0c3H, 00H
	ORG $+12
	ORG $+3
	DD	06e60H
	DD	0a6H
	DB	0caH, 0a8H, 0deH, 0d9H, 0caH, 0a8H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06e61H
	DD	0a7H
	DB	0d9H, 0d5H, 0caH, 0a8H, 0d5H, 0c3H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06e62H
	DD	0acH
	DB	0cdH, 0b3H, 0d5H, 0f4H, 0d8H, 0a4H, 00H
	ORG $+10
	ORG $+3
	DD	06e69H
	DD	0adH
	DB	0d8H, 0a4H, 0d1H, 0ceH, 0d8H, 0a4H, 0d1H, 0ceH, 00H
	ORG $+8
	ORG $+3
	DD	06e6aH
	DD	0aeH
	DB	0d8H, 0a4H, 0daH, 0b7H, 0dfH, 0e3H, 0d5H, 0c3H, 00H
	ORG $+8
	ORG $+3
	DD	06e6bH
	DD	0afH
	DB	0d8H, 0a4H, 0fbH, 0e5H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06e6cH
	DD	0b4H
	DB	0caH, 0a6H, 0caH, 0a6H, 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06e73H
	DD	0b5H
	DB	0d0H, 0baH, 0d5H, 0a6H, 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06e74H
	DD	0b6H
	DB	0f8H, 0d6H, '?', 0ebH, 0daH, 00H
	ORG $+11
	ORG $+3
	DD	06e75H
	DD	0b7H
	DB	0eeH, 0e8H, 0f8H, 0d6H, 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06e76H
	DD	0bcH
	DB	0ccH, 0abH, 0d7H, 0ecH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06e87H
	DD	0bdH
	DB	0d8H, 0a4H, 0d7H, 0ecH, 00H
	ORG $+12
	ORG $+3
	DD	06e88H
	DD	0beH
	DB	0dfH, 0faH, 0d7H, 0ecH, 0e0H, 0a4H, '?', 00H
	ORG $+9
	ORG $+3
	DD	06e89H
	DD	0bfH
	DB	0f7H, 0b2H, 0deH, 0d9H, 0dcH, 0fdH, 00H
	ORG $+10
	ORG $+3
	DD	06e8aH
	DD	0c4H
	DB	'?', 0f7H, 0e9H, 0d2H, 0afH, 0f7H, 0e5H, 00H
	ORG $+9
	ORG $+3
	DD	06e91H
	DD	0c5H
	DB	0daH, 0e8H, 0d2H, 0f9H, 0eeH, 0e8H, 0d0H, 0baH, 00H
	ORG $+8
	ORG $+3
	DD	06e92H
	DD	0c6H
	DB	0e4H, 0b9H, 0daH, 0b7H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06e93H
	DD	0c7H
	DB	0dbH, 0c0H, 0deH, 0c9H, 0d5H, 0d8H, '?', 00H
	ORG $+9
	ORG $+3
	DD	06e94H
	DD	0cdH
	DB	0f8H, 0d6H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06e9cH
	DD	0ceH
	DB	0f8H, 0d6H, 0ebH, 0eeH, '?', 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06e9dH
	DD	0cfH
	DB	0ecH, 0a5H, 0dcH, 0fdH, '?', 0ebH, 0daH, 00H
	ORG $+9
	ORG $+3
	DD	06e9eH
	DD	0d5H
	DB	'?', 0d9H, 0b5H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06ea6H
	DD	0d6H
	DB	0f1H, 0b9H, 0d7H, 0d7H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06ea7H
	DD	0d7H
	DB	0e3H, 0f4H, 0dcH, 0c5H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06ea8H
	DD	0dcH
	DB	0d8H, 0a1H, 0d4H, 0e1H, '?', 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06eafH
	DD	0ddH
	DB	'?', 0d0H, 0baH, 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06eb0H
	DD	0deH
	DB	0f7H, 0e9H, 0d0H, 0baH, '?', 0deH, 0c9H, 00H
	ORG $+9
	ORG $+3
	DD	06eb1H
	DD	0dfH
	DB	0d6H, 0f4H, 0d3H, 0ecH, 0d5H, 0f4H, 0d0H, 0baH, 0deH, 0d9H
	DB	00H
	ORG $+6
	ORG $+3
	DD	06eb2H
	DD	0e0H
	DB	0caH, 0e7H, 0d6H, 0f4H, 0d0H, 0f1H, '?', 00H
	ORG $+9
	ORG $+3
	DD	06eb7H
	DD	0e1H
	DB	0caH, 0e7H, 0d6H, 0f4H, 0d5H, 0a6H, 0ddH, 0efH, 00H
	ORG $+8
	ORG $+3
	DD	06eb5H
	DD	0e2H
	DB	0caH, 0e7H, 0d6H, 0f4H, 0d1H, 0ceH, '?', 00H
	ORG $+9
	ORG $+3
	DD	06eb6H
	DD	0e3H
	DB	0caH, 0e7H, 0d6H, 0f4H, '?', 0ebH, 0daH, 00H
	ORG $+9
	ORG $+3
	DD	06eb8H
	DD	0e4H
	DB	0d1H, 0ceH, 0ddH, 0efH, 00H
	ORG $+12
	ORG $+3
	DD	06ebfH
	DD	0e5H
	DB	'?', 0ebH, 0daH, 00H
	ORG $+13
	ORG $+3
	DD	06ec0H
	DD	0e6H
	DB	0deH, 0c8H, '?', 0d7H, 0cdH, '?', 00H
	ORG $+10
	ORG $+3
	DD	06ec3H
	DD	0e7H
	DB	0cdH, 0afH, 0deH, 0d9H, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06ec2H
	DD	0e8H
	DB	'?', 0ebH, 0daH, 0ccH, 0abH, 0d4H, 0f4H, 00H
	ORG $+9
	ORG $+3
	DD	06ec6H
	DD	0e9H
	DB	'?', 0ebH, 0daH, 0daH, 0b7H, '?', 00H
	ORG $+10
	ORG $+3
	DD	06ec4H
	DD	0eaH
	DB	'?', 0ebH, 0daH, 0dbH, 0f6H, '?', 00H
	ORG $+10
	ORG $+3
	DD	06ec5H
	DD	0ebH
	DB	'?', 0ebH, 0daH, 0e1H, 0f3H, 0ddH, 0efH, 00H
	ORG $+9
	ORG $+3
	DD	06ec7H
	DD	0ecH
	DB	'?', 0ddH, 0efH, 00H
	ORG $+13
	ORG $+3
	DD	06ec8H
	DD	0edH
	DB	0d9H, 0d5H, 0d0H, 0f4H, 00H
	ORG $+12
	ORG $+3
	DD	06ecaH
	DD	0eeH
	DB	0deH, 0a3H, 0d0H, 0f4H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06ec9H
	DD	0efH
	DB	0e4H, 0f5H, 0eeH, 0e8H, 0fdH, 0f1H, 0d5H, 0a6H, 00H
	ORG $+8
	ORG $+3
	DD	06ecbH
	DD	0f0H
	DB	0d6H, 0f4H, 0ebH, 0daH, 0f7H, 0e9H, 0d0H, 0e9H, 00H
	ORG $+8
	ORG $+3
	DD	06eccH
	DD	0f1H
	DB	0dbH, 0f6H, '?', 0f7H, 0e9H, 0d0H, 0e9H, 00H
	ORG $+9
	ORG $+3
	DD	06ecdH
	DD	0f2H
	DB	0d0H, 0f4H, '?', 0f7H, 0e9H, 0d0H, 0e9H, 00H
	ORG $+9
	ORG $+3
	DD	06ecfH
	DD	0f3H
	DB	0ccH, 0abH, 0d7H, 0f9H, 0f7H, 0e9H, 0d0H, 0e9H, 00H
	ORG $+8
	ORG $+3
	DD	06eceH
	DD	0f4H
	DB	0eeH, 0e1H, '?', 0d7H, 0ecH, 0ebH, 0daH, 00H
	ORG $+9
	ORG $+3
	DD	06ed0H
	DD	0f5H
	DB	0faH, 0d3H, 0d5H, 0c3H, 0d0H, 0baH, 0d7H, 0cdH, 0deH, 0d9H
	DB	00H
	ORG $+6
	ORG $+3
	DD	06ed1H
	DD	0f6H
	DB	0daH, 0b7H, '?', 0d2H, 0fdH, 00H
	ORG $+11
	ORG $+3
	DD	06ed4H
	DD	0f7H
	DB	0d2H, 0fdH, '?', 0d2H, 0fdH, 00H
	ORG $+11
	ORG $+3
	DD	06ed5H
	DD	0f8H
	DB	0f8H, 0d6H, '?', 0d8H, 0a4H, 00H
	ORG $+11
	ORG $+3
	DD	06ed6H
	DD	0f9H
	DB	0d5H, 0a6H, 0d0H, 0f4H, 0deH, 0d9H, 0d3H, 0ecH, 00H
	ORG $+8
	ORG $+3
	DD	06ed2H
	DD	0faH
	DB	'?', 0d1H, 0e1H, 00H
	ORG $+13
	ORG $+3
	DD	06ed3H
	DD	0fbH
	DB	'??', 0deH, 0d9H, 00H
	ORG $+12
	ORG $+3
	DD	06ed7H
	DD	0fcH
	DB	0d6H, 0f4H, '?', 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06ed8H
	DD	0fdH
	DB	0deH, 0a3H, 0deH, 0d9H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06ed9H
	DD	0feH
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06edaH
	DD	0ffH
	DB	0deH, 0c8H, 0d2H, 0afH, 0d0H, 0baH, 0f7H, 0e5H, 00H
	ORG $+8
	ORG $+3
	DD	06edbH
	DD	0100H
	DB	0caH, 0e7H, 0d7H, 0d7H, 0deH, 0d9H, 0d2H, 0afH, 00H
	ORG $+8
	ORG $+3
	DD	06edcH
	DD	0101H
	DB	0e4H, 0f5H, 0ddH, 0efH, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06eddH
	DD	0102H
	DB	0d5H, 0c3H, 0f7H, 0e5H, 0d7H, 0d7H, 00H
	ORG $+10
	ORG $+3
	DD	06edeH
	DD	0103H
	DB	'?', 0ccH, 0abH, 0e4H, 0f5H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06edfH
	DD	0104H
	DB	'?', 0ddH, 0efH, 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06ee0H
	DD	0105H
	DB	0e4H, 0b9H, '?', 0e0H, 0a4H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06ee1H
	DD	0106H
	DB	0d5H, 0a6H, 0caH, 0a6H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06ee2H
	DD	0107H
	DB	0dbH, 0f6H, '?', 0d9H, 0d5H, 0f7H, 0e5H, 00H
	ORG $+9
	ORG $+3
	DD	06ee3H
	DD	0108H
	DB	0d6H, 0f4H, 0ccH, 0abH, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06ee4H
	DD	0109H
	DB	0d5H, 0a6H, 0d0H, 0baH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06ee5H
	DD	010aH
	DB	0daH, 0b7H, 0ebH, 0daH, 0deH, 0d9H, 0f7H, 0e5H, 00H
	ORG $+8
	ORG $+3
	DD	06ee6H
	DD	010bH
	DB	0d7H, 0d7H, 0e0H, 0a4H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06ee7H
	DD	010cH
	DB	0f8H, 0a5H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06ee8H
	DD	010dH
	DB	0ecH, 0a5H, 0d7H, 0d7H, 0d8H, 0baH, '?', 00H
	ORG $+9
	ORG $+3
	DD	06ee9H
	DD	010eH
	DB	'?', 0d5H, 0f4H, 0d5H, 0a6H, '?', 00H
	ORG $+10
	ORG $+3
	DD	06eeaH
	DD	010fH
	DB	'?', 0dcH, 0c5H, '?', 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06eebH
	DD	0110H
	DB	0d7H, 0d7H, 0dcH, 0c5H, 0d2H, 0fdH, '?', 00H
	ORG $+9
	ORG $+3
	DD	06eecH
	DD	0111H
	DB	0dbH, 0c0H, 0d0H, 0baH, 0dcH, 0c5H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06eeeH
	DD	0112H
	DB	0d5H, 0c3H, 0ddH, 0d6H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06eedH
	DD	0113H
	DB	0eeH, 0e8H, '?', 0cdH, 0afH, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06eefH
	DD	0114H
	DB	'??', 0cdH, 0afH, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06ef0H
	DD	0115H
	DB	'?', 0d5H, 0a6H, 0dcH, 0c5H, 00H
	ORG $+11
	ORG $+3
	DD	06ef1H
	DD	0116H
	DB	'?', 0d0H, 0baH, 0dcH, 0c5H, 00H
	ORG $+11
	ORG $+3
	DD	06ef2H
	DD	0117H
	DB	0e0H, 0a4H, 0e1H, 0f3H, 00H
	ORG $+12
	ORG $+3
	DD	06ef3H
	DD	0118H
	DB	0f9H, 0ebH, '?', 0e1H, 0f3H, 00H
	ORG $+11
	ORG $+3
	DD	06ef4H
	DD	0119H
	DB	0ddH, 0d7H, 0d7H, 0d7H, 0e1H, 0f3H, 00H
	ORG $+10
	ORG $+3
	DD	06ef5H
	DD	011aH
	DB	0f7H, 0e9H, 0d7H, 0d7H, 00H
	ORG $+12
	ORG $+3
	DD	06ef6H
	DD	011bH
	DB	0e4H, 0baH, 0f7H, 0e5H, 0d5H, 0c3H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06efbH
	DD	011cH
	DB	0ecH, 0a5H, 0d7H, 0d7H, '?', 0d3H, 0ecH, 00H
	ORG $+9
	ORG $+3
	DD	06efaH
	DD	011dH
	DB	0daH, 0b7H, 0d2H, 0f9H, 0d2H, 0afH, 0f7H, 0e9H, 00H
	ORG $+8
	ORG $+3
	DD	06ef8H
	DD	011eH
	DB	0d3H, 0ecH, 0d5H, 0c3H, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06ef7H
	DD	011fH
	DB	0ceH, 0a1H, '?', 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06ef9H
	DD	0120H
	DB	0dbH, 0c0H, '?', 0d7H, 0ecH, 00H
	ORG $+11
	ORG $+3
	DD	06efcH
	DD	0121H
	DB	0caH, 0a5H, 0d6H, 0f4H, 00H
	ORG $+12
	ORG $+3
	DD	06efdH
	DD	0122H
	DB	0caH, 0a5H, 0cdH, 0afH, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06efeH
	DD	0123H
	DB	0dbH, 0c0H, 0e0H, 0a4H, 0dcH, 0c5H, 00H
	ORG $+10
	ORG $+3
	DD	06effH
	DD	0124H
	DB	0ecH, 0a5H, '???', 00H
	ORG $+11
	ORG $+3
	DD	06f00H
	DD	0125H
	DB	0d5H, 0c3H, 0ccH, 0abH, 0d2H, 0fdH, '?', 00H
	ORG $+9
	ORG $+3
	DD	06f01H
	DD	0126H
	DB	0e0H, 0a4H, '?', 0d0H, 0baH, '?', 00H
	ORG $+10
	ORG $+3
	DD	06f02H
	DD	0127H
	DB	0d0H, 0baH, '?', 0d1H, 0e1H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06f03H
	DD	0128H
	DB	'?', 0daH, 0aaH, 0d3H, 0b1H, 00H
	ORG $+11
	ORG $+3
	DD	06f04H
	DD	0129H
	DB	0f4H, 0deH, 0d2H, 0f9H, 0f8H, 0d6H, 00H
	ORG $+10
	ORG $+3
	DD	06f05H
	DD	012aH
	DB	0f4H, 0deH, 0d2H, 0f9H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06f06H
	DD	012bH
	DB	0f4H, 0deH, 0d2H, 0f9H, 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06f07H
	DD	012cH
	DB	0f4H, 0deH, 0d2H, 0f9H, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06f08H
	DD	012dH
	DB	'?', 0d5H, 0a6H, 0d0H, 0f4H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06f09H
	DD	012eH
	DB	'?', 0d5H, 0a6H, 0caH, 0a6H, 0d7H, 0d7H, 00H
	ORG $+9
	ORG $+3
	DD	06f0aH
	DD	012fH
	DB	'?', 0d5H, 0a6H, '??', 00H
	ORG $+11
	ORG $+3
	DD	06f0bH
	DD	0130H
	DB	'?', 0d5H, 0a6H, 0ddH, 0efH, 0d0H, 0baH, 00H
	ORG $+9
	ORG $+3
	DD	06f0cH
	DD	0131H
	DB	0d6H, 0f4H, 0f0H, 0a8H, 0deH, 0d9H, 0d5H, 0a6H, 00H
	ORG $+8
	ORG $+3
	DD	06f0dH
	DD	0132H
	DB	0deH, 0c8H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06f2bH
	DD	0133H
	DB	0deH, 0c8H, '?', 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06f2aH
	DD	0134H
	DB	0d5H, 0a6H, 0e4H, 0ccH, 0d0H, 0f4H, 00H
	ORG $+10
	ORG $+3
	DD	06f2eH
	DD	0135H
	DB	0d5H, 0a6H, 0deH, 0d9H, 0d0H, 0baH, 00H
	ORG $+10
	ORG $+3
	DD	06f2fH
	DD	0136H
	DB	0d6H, 0f4H, 0ddH, 0efH, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06f2dH
	DD	0137H
	DB	0d5H, 0a6H, 0ddH, 0efH, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06f2cH
	DD	0138H
	DB	0e0H, 0a4H, 0dbH, 0daH, 0d0H, 0baH, 00H
	ORG $+10
	ORG $+3
	DD	06f1aH
	DD	0139H
	DB	0f7H, 0e5H, 0d7H, 0d7H, 0deH, 0d9H, 0d0H, 0baH, 00H
	ORG $+8
	ORG $+3
	DD	06f1bH
	DD	013aH
	DB	0deH, 0deH, 0e8H, 0bfH, 0d0H, 0baH, 00H
	ORG $+10
	ORG $+3
	DD	06f0eH
	DD	013bH
	DB	0deH, 0deH, 0d6H, 0aaH, 0d0H, 0baH, 00H
	ORG $+10
	ORG $+3
	DD	06f0fH
	DD	013cH
	DB	0f7H, 0e5H, 0d6H, 0f4H, 0d0H, 0baH, 0d5H, 0a6H, 00H
	ORG $+8
	ORG $+3
	DD	06f34H
	DD	013dH
	DB	0f7H, 0e5H, 0d6H, 0f4H, 0d1H, 0ceH, 0d5H, 0a6H, 00H
	ORG $+8
	ORG $+3
	DD	06f35H
	DD	013eH
	DB	'?', 0caH, 0a6H, 0d5H, 0a6H, 00H
	ORG $+11
	ORG $+3
	DD	06f17H
	DD	013fH
	DB	'?', 0d6H, 0f4H, 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06f16H
	DD	0140H
	DB	0d0H, 0baH, 0d7H, 0d7H, 0d2H, 0fdH, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06f30H
	DD	0141H
	DB	0d2H, 0fdH, 0d7H, 0d7H, 0caH, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06f31H
	DD	0142H
	DB	0d2H, 0fdH, '?', 0d0H, 0baH, 00H
	ORG $+11
	ORG $+3
	DD	06f13H
	DD	0143H
	DB	0d1H, 0e1H, '?', 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06f12H
	DD	0144H
	DB	0f7H, 0b2H, 0d0H, 0baH, 00H
	ORG $+12
	ORG $+3
	DD	06f22H
	DD	0145H
	DB	'?', 0f7H, 0e5H, 0dcH, 0c5H, 00H
	ORG $+11
	ORG $+3
	DD	06f23H
	DD	0146H
	DB	0d1H, 0e1H, 0f0H, 0abH, 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06f36H
	DD	0147H
	DB	0f8H, 0d6H, 0deH, 0d9H, 0eeH, 0e8H, 00H
	ORG $+10
	ORG $+3
	DD	06f37H
	DD	0148H
	DB	0f7H, 0e5H, 0d6H, 0f4H, 0deH, 0deH, 00H
	ORG $+10
	ORG $+3
	DD	06f29H
	DD	0149H
	DB	0dbH, 0daH, 0d5H, 0a6H, 0d3H, 0ecH, 00H
	ORG $+10
	ORG $+3
	DD	06f28H
	DD	014aH
	DB	0deH, 0c8H, 0ddH, 0efH, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06f32H
	DD	014bH
	DB	0e4H, 0f5H, 0deH, 0d9H, 0f7H, 0a4H, 00H
	ORG $+10
	ORG $+3
	DD	06f33H
	DD	014cH
	DB	0cbH, 0acH, '?', 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06f26H
	DD	014dH
	DB	0dbH, 0d7H, 0d5H, 0a6H, 0e0H, 0a4H, 00H
	ORG $+10
	ORG $+3
	DD	06f27H
	DD	014eH
	DB	0e0H, 0a4H, 0cdH, 0c5H, 00H
	ORG $+12
	ORG $+3
	DD	06f19H
	DD	014fH
	DB	'?', 0d1H, 0e1H, 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06f18H
	DD	0150H
	DB	'?', 0f7H, 0e5H, 00H
	ORG $+13
	ORG $+3
	DD	06f15H
	DD	0151H
	DB	'?', 0dbH, 0d7H, 00H
	ORG $+13
	ORG $+3
	DD	06f14H
	DD	0152H
	DB	0f9H, 0beH, 0dcH, 0c5H, 0d3H, 0ecH, 00H
	ORG $+10
	ORG $+3
	DD	06f1cH
	DD	0153H
	DB	0f9H, 0beH, 0deH, 0d9H, 0d3H, 0ecH, 00H
	ORG $+10
	ORG $+3
	DD	06f1dH
	DD	0154H
	DB	0ecH, 0a5H, 0cdH, 0afH, 0d6H, 0f4H, 00H
	ORG $+10
	ORG $+3
	DD	06f24H
	DD	0155H
	DB	0ecH, 0a5H, 0d0H, 0baH, 0d2H, 0fdH, 00H
	ORG $+10
	ORG $+3
	DD	06f25H
	DD	0156H
	DB	0d0H, 0f4H, 0ccH, 0abH, 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06f1eH
	DD	0157H
	DB	0d2H, 0fdH, 0ccH, 0abH, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06f1fH
	DD	0158H
	DB	'?', 0e8H, 0aaH, 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06f10H
	DD	0159H
	DB	'?', 0ebH, 0daH, 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06f11H
	DD	015aH
	DB	0f7H, 0b2H, 0deH, 0d9H, 0d8H, 0a4H, 0daH, 0b7H, 00H
	ORG $+8
	ORG $+3
	DD	06f38H
	DD	015bH
	DB	'?', 0e0H, 0a4H, 0d8H, 0a4H, 0daH, 0b7H, 00H
	ORG $+9
	ORG $+3
	DD	06f39H
	DD	015cH
	DB	0d5H, 0a6H, 0d3H, 0ecH, 0d8H, 0a4H, 0daH, 0b7H, 00H
	ORG $+8
	ORG $+3
	DD	06f3aH
	DD	015dH
	DB	0e4H, 0f5H, '?', 0d8H, 0a4H, 0daH, 0b7H, 00H
	ORG $+9
	ORG $+3
	DD	06f3bH
	DD	015eH
	DB	'?', 0d2H, 0fdH, 0d0H, 0baH, 0d6H, 0f4H, 00H
	ORG $+9
	ORG $+3
	DD	06f3cH
	DD	015fH
	DB	'?', 0f7H, 0e5H, 0d0H, 0baH, 0d5H, 0c3H, 00H
	ORG $+9
	ORG $+3
	DD	06f21H
	DD	0160H
	DB	0f7H, 0eeH, 0ddH, 0efH, 00H
	ORG $+12
	ORG $+3
	DD	06f3dH
	DD	0161H
	DB	0deH, 0c8H, '?', 0f9H, 0abH, '?', 00H
	ORG $+10
	ORG $+3
	DD	06f3eH
	DD	0162H
	DB	0deH, 0c8H, '?', 0f9H, 0abH, 0d0H, 0baH, 00H
	ORG $+9
	ORG $+3
	DD	06f3fH
	DD	0163H
	DB	0deH, 0c8H, '?', 0f9H, 0abH, '?', 00H
	ORG $+10
	ORG $+3
	DD	06f40H
	DD	0164H
	DB	0deH, 0c8H, '?', 0f9H, 0abH, '?', 00H
	ORG $+10
	ORG $+3
	DD	06f41H
	DD	0165H
	DB	0deH, 0a3H, 0d0H, 0f4H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06f42H
	DD	0166H
	DB	0f7H, 0e9H, '?', 0d2H, 0fdH, 00H
	ORG $+11
	ORG $+3
	DD	06f47H
	DD	0167H
	DB	0f7H, 0e9H, '?', 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06f48H
	DD	0168H
	DB	0d0H, 0baH, 0d6H, 0f4H, 0d2H, 0fdH, 00H
	ORG $+10
	ORG $+3
	DD	06f43H
	DD	0169H
	DB	0dbH, 0c6H, '?', 0d2H, 0fdH, 00H
	ORG $+11
	ORG $+3
	DD	06f44H
	DD	016aH
	DB	'?', 0caH, 0a6H, 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	06f45H
	DD	016bH
	DB	'??', 0deH, 0d9H, 00H
	ORG $+12
	ORG $+3
	DD	06f46H
	DD	016cH
	DB	0d2H, 0fdH, 0ddH, 0d2H, 00H
	ORG $+12
	ORG $+3
	DD	06f49H
	DD	016dH
	DB	'?', 0d2H, 0fdH, 0ddH, 0d2H, 00H
	ORG $+11
	ORG $+3
	DD	06f4aH
	DD	016eH
	DB	0d2H, 0fdH, 0dfH, 0faH, 0d7H, 0ecH, 00H
	ORG $+10
	ORG $+3
	DD	06f4bH
	DD	016fH
	DB	'?', 0dfH, 0faH, 0d7H, 0ecH, 00H
	ORG $+11
	ORG $+3
	DD	06f4cH
	DD	0170H
	DB	0deH, 0c8H, 0d0H, 0baH, 0cbH, 0f9H, 00H
	ORG $+10
	ORG $+3
	DD	06f4dH
	DD	0171H
	DB	0deH, 0c8H, 0deH, 0a3H, 0d5H, 0a6H, 00H
	ORG $+10
	ORG $+3
	DD	06f4eH
	DD	0172H
	DB	'?', 0d6H, 0d8H, '?', 00H
	ORG $+12
	ORG $+3
	DD	06f4fH
	DD	0173H
	DB	0d0H, 0f4H, 0d6H, 0d8H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06f50H
	DD	0174H
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06f51H
	DD	0175H
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06f52H
	DD	0176H
	DB	0deH, 0d9H, '?', 0d0H, 0baH, 00H
	ORG $+11
	ORG $+3
	DD	06f53H
	DD	0177H
	DB	0e0H, 0a4H, 0deH, 0d9H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06f54H
	DD	0178H
	DB	0d0H, 0f4H, 0d0H, 0e9H, 0e8H, 0aaH, 00H
	ORG $+10
	ORG $+3
	DD	06f55H
	DD	0179H
	DB	0d0H, 0f4H, 0d0H, 0e9H, 0d0H, 0baH, 0d2H, 0afH, 00H
	ORG $+8
	ORG $+3
	DD	06f56H
	DD	017aH
	DB	'??', 0d7H, 0d7H, 00H
	ORG $+12
	ORG $+3
	DD	06f57H
	DD	017bH
	DB	'??', 0d2H, 0fdH, 00H
	ORG $+12
	ORG $+3
	DD	06f58H
	DD	017cH
	DB	0caH, 0e7H, 0d7H, 0d7H, 0deH, 0d9H, 0d2H, 0afH, 00H
	ORG $+8
	ORG $+3
	DD	06f59H
	DD	017dH
	DB	0deH, 0c8H, 0d2H, 0afH, 0d0H, 0baH, 0f7H, 0e5H, 00H
	ORG $+8
	ORG $+3
	DD	06f5aH
	DD	017eH
	DB	0e4H, 0f5H, 0dbH, 0daH, 0dfH, 0faH, 00H
	ORG $+10
	ORG $+3
	DD	06f5bH
	DD	017fH
	DB	0fbH, 0bcH, '?', 0dfH, 0faH, 00H
	ORG $+11
	ORG $+3
	DD	06f5cH
	DD	0180H
	DB	'?', 0d7H, 0ecH, '??', 00H
	ORG $+11
	ORG $+3
	DD	06f5dH
	DD	0181H
	DB	'?', 0dbH, 0f6H, '??', 00H
	ORG $+11
	ORG $+3
	DD	06f5eH
	DD	0182H
	DB	'????', 00H
	ORG $+12
	ORG $+3
	DD	06f5fH
	DD	0183H
	DB	0d2H, 0fdH, '???', 00H
	ORG $+11
	ORG $+3
	DD	06f60H
	DD	0184H
	DB	0d7H, 0ecH, 0d3H, 0ecH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06f61H
	DD	0185H
	DB	'?', 0d3H, 0ecH, 0deH, 0d9H, '?', 00H
	ORG $+10
	ORG $+3
	DD	06f62H
	DD	0186H
	DB	'?', 0d3H, 0ecH, 0eeH, 0e8H, 0ddH, 0efH, 00H
	ORG $+9
	ORG $+3
	DD	06f63H
	DD	0187H
	DB	'?', 0dfH, 0e4H, '?1', 00H
	ORG $+11
	ORG $+3
	DD	06f64H
	DD	0188H
	DB	'?', 0dfH, 0e4H, '?2', 00H
	ORG $+11
	ORG $+3
	DD	06f65H
	DD	0189H
	DB	0ddH, 0d7H, '?', 0e4H, 0baH, 00H
	ORG $+11
	ORG $+3
	DD	06f66H
	DD	018aH
	DB	0ddH, 0d7H, '?', 0d6H, 0daH, 00H
	ORG $+11
	ORG $+3
	DD	06f67H
	DD	018bH
	DB	0dfH, 0b2H, 0caH, 0c7H, '?1', 00H
	ORG $+10
	ORG $+3
	DD	06f69H
	DD	018cH
	DB	0dfH, 0b2H, 0caH, 0c7H, '?2', 00H
	ORG $+10
	ORG $+3
	DD	06f6aH
	DD	018dH
	DB	0ddH, 0d6H, 0d0H, 0baH, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06f68H
	DD	018eH
	DB	'?', 0d5H, 0f4H, 0e8H, 0ddH, 00H
	ORG $+11
	ORG $+3
	DD	06f6bH
	DD	018fH
	DB	0daH, 0b8H, 0d5H, 0c3H, 00H
	ORG $+12
	ORG $+3
	DD	06f6cH
	DD	0190H
	DB	'?', 0eeH, 0e8H, 00H
	ORG $+13
	ORG $+3
	DD	06f6dH
	DD	0191H
	DB	0d0H, 0f4H, 0ddH, 0dbH, 0deH, 0a3H, 0d3H, 0ecH, 00H
	ORG $+8
	ORG $+3
	DD	06f6eH
	DD	0192H
	DB	0d0H, 0f4H, 0ddH, 0dbH, '?', 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06f6fH
	DD	0193H
	DB	0d0H, 0f4H, 0ddH, 0dbH, 0d3H, 0ecH, 0daH, 0b8H, 00H
	ORG $+8
	ORG $+3
	DD	06f70H
	DD	0194H
	DB	0d0H, 0f4H, 0ddH, 0dbH, 0d5H, 0a6H, 0ebH, 0eeH, 00H
	ORG $+8
	ORG $+3
	DD	06f71H
	DD	0195H
	DB	0f9H, 0ebH, 0e8H, 0aaH, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06f72H
	DD	0196H
	DB	0f9H, 0ebH, 0e8H, 0aaH, 0ebH, 0daH, 00H
	ORG $+10
	ORG $+3
	DD	06f73H
	DD	0197H
	DB	0d6H, 0f4H, '?', 00H
	ORG $+13
	ORG $+3
	DD	06f74H
	DD	0198H
	DB	0f9H, 0ebH, 0d7H, 0d7H, 0ebH, 0daH, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06f75H
	DD	0199H
	DB	0f4H, 0deH, 0ecH, 0a5H, '?', 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06f76H
	DD	019aH
	DB	0d7H, 0d7H, '???', 00H
	ORG $+11
	ORG $+3
	DD	06f77H
	DD	019bH
	DB	'?', 0d0H, 0f4H, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+9
	ORG $+3
	DD	06f78H
	DD	019cH
	DB	0dbH, 0c0H, 0d0H, 0f4H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06f79H
	DD	019dH
	DB	0f8H, 0d6H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06f7aH
	DD	019eH
	DB	0f8H, 0d6H, 0d7H, 0ecH, '??', 00H
	ORG $+10
	ORG $+3
	DD	06f7bH
	DD	019fH
	DB	0e8H, 0aaH, 0d0H, 0baH, 0ddH, 0efH, 00H
	ORG $+10
	ORG $+3
	DD	06f7cH
	DD	01a0H
	DB	0e8H, 0aaH, 0deH, 0d9H, 0d9H, 0b5H, 00H
	ORG $+10
	ORG $+3
	DD	06f7dH
	DD	01a1H
	DB	0f7H, 0e9H, 0e4H, 0baH, 00H
	ORG $+12
	ORG $+3
	DD	06f7eH
	DD	01a2H
	DB	0f7H, 0e9H, 0f7H, 0e5H, 00H
	ORG $+12
	ORG $+3
	DD	06f7fH
	DD	01a3H
	DB	0fdH, 0d9H, '?', 0d5H, 0f4H, 0e8H, 0ddH, 00H
	ORG $+9
	ORG $+3
	DD	06f80H
	DD	01a4H
	DB	'?', 0ebH, 0daH, 0d0H, 0f4H, 0dcH, 0fdH, 00H
	ORG $+9
	ORG $+3
	DD	06f81H
	DD	01a5H
	DB	'?', 0ebH, 0daH, 0d5H, 0a6H, 0d0H, 0baH, 00H
	ORG $+9
	ORG $+3
	DD	06f82H
	DD	01a6H
	DB	0dbH, 0c0H, 0f8H, 0ddH, 0d5H, 0a6H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06f83H
	DD	01a7H
	DB	'?', 0e8H, 0aaH, 0dcH, 0fdH, 00H
	ORG $+11
	ORG $+3
	DD	06f84H
	DD	01a8H
	DB	0f8H, 0d6H, 0ecH, 0a5H, 0fbH, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06f85H
	DD	01a9H
	DB	0deH, 0a3H, '?', 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	06f8cH
	DD	01aaH
	DB	0f8H, 0d6H, 0d7H, 0f9H, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06f8dH
	DD	01abH
	DB	0d2H, 0afH, 0caH, 0ecH, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	06f8eH
	DD	01acH
	DB	0d2H, 0afH, 0e9H, 0d4H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06f8fH
	DD	01adH
	DB	'?', 0ddH, 0b3H, 0d1H, 0d6H, 00H
	ORG $+11
	ORG $+3
	DD	06fa7H
	DD	01aeH
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	06fa6H
	DD	01afH
	DB	0d8H, 0a4H, 0d5H, 0a6H, 0dfH, 0e3H, 0deH, 0d6H, 00H
	ORG $+8
	ORG $+3
	DD	06fa8H
	DD	01b0H
	DB	0e8H, 0bfH, 0d0H, 0f4H, 0d0H, 0e9H, 00H
	ORG $+10
	ORG $+3
	DD	06fa9H
	DD	01b1H
	DB	0ddH, 0d7H, 0d0H, 0f4H, 0d0H, 0e9H, 00H
	ORG $+10
	ORG $+3
	DD	06faaH
	DD	01b2H
	DB	'?', 0d0H, 0f4H, 0d0H, 0e9H, 00H
	ORG $+11
	ORG $+3
	DD	06fabH
	DD	01b3H
	DB	0f7H, 0eeH, 0d0H, 0f4H, 0d0H, 0e9H, 00H
	ORG $+10
	ORG $+3
	DD	06facH
	DD	01b4H
	DB	'?', 0e8H, 0aaH, 0cfH, 0a8H, 0ebH, 0daH, 00H
	ORG $+9
	ORG $+3
	DD	06fc3H
	DD	01b5H
	DB	'?', 0e8H, 0aaH, 0dbH, 0d0H, 0f7H, 0e5H, 00H
	ORG $+9
	ORG $+3
	DD	06fc4H
	DD	01b6H
	DB	'?', 0dcH, 0d8H, 00H
	ORG $+13
	ORG $+3
	DD	06fc5H
	DD	01b7H
	DB	'?', 0d2H, 0fdH, 00H
	ORG $+13
	ORG $+3
	DD	06fc6H
	DD	01b8H
	DB	0ddH, 0efH, 0deH, 0d9H, 0d1H, 0ceH, 00H
	ORG $+10
	ORG $+3
	DD	06fadH
	DD	01b9H
	DB	'??', 0d1H, 0ceH, 00H
	ORG $+12
	ORG $+3
	DD	06faeH
	DD	01baH
	DB	0d2H, 0f9H, '?', 0d1H, 0ceH, 00H
	ORG $+11
	ORG $+3
	DD	06fafH
	DD	01bbH
	DB	0eaH, 0ceH, '?', 0d1H, 0ceH, 00H
	ORG $+11
	ORG $+3
	DD	06fb0H
	DD	01bcH
	DB	0e4H, 0f5H, 0ebH, 0daH, 0d0H, 0baH, 00H
	ORG $+10
	ORG $+3
	DD	06fb1H
	DD	01bdH
	DB	0e4H, 0f5H, 0daH, 0b8H, 00H
	ORG $+12
	ORG $+3
	DD	06fb2H
	DD	01beH
	DB	0e4H, 0f5H, 0ecH, 0e0H, 00H
	ORG $+12
	ORG $+3
	DD	06fb3H
	DD	01bfH
	DB	0e4H, 0f5H, 0d0H, 0baH, 0dcH, 0fdH, 00H
	ORG $+10
	ORG $+3
	DD	06fb4H
	DD	01c0H
	DB	0e4H, 0ccH, 0cdH, 0afH, 0d5H, 0f4H, 00H
	ORG $+10
	ORG $+3
	DD	06fb5H
	DD	01c1H
	DB	'?', 0d2H, 0f9H, 00H
	ORG $+13
	ORG $+3
	DD	06fb6H
	DD	01c2H
	DB	'??', 0d5H, 0f4H, 00H
	ORG $+12
	ORG $+3
	DD	06fb7H
	DD	01c3H
	DB	'?', 0e3H, 0a2H, 0d5H, 0f4H, 00H
	ORG $+11
	ORG $+3
	DD	06fb8H
	DD	01c4H
	DB	0ecH, 0a5H, 0ddH, 0d7H, 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06fb9H
	DD	01c5H
	DB	'?', 0d5H, 0c3H, '?', 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06fbaH
	DD	01c6H
	DB	0f7H, 0b2H, 0f7H, 0b2H, 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06fbbH
	DD	01c7H
	DB	0d1H, 0ceH, 0d9H, 0b5H, 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	06fbcH
	DD	01c8H
	DB	'?', 0deH, 0d9H, '?', 00H
	ORG $+12
	ORG $+3
	DD	06fbdH
	DD	01c9H
	DB	0deH, 0d9H, 0deH, 0d9H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06fbeH
	DD	01caH
	DB	0f8H, 0d6H, 0d7H, 0ecH, 0deH, 0d9H, '?', 00H
	ORG $+9
	ORG $+3
	DD	06fbfH
	DD	01cbH
	DB	0dbH, 0c0H, 0deH, 0d9H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06fc0H
	DD	01ccH
	DB	0d9H, 0deH, 0d2H, 0b3H, '3?', 00H
	ORG $+10
	ORG $+3
	DD	06fc2H
	DD	01cdH
	DB	0faH, 0adH, '?', 0d3H, 0b1H, 00H
	ORG $+11
	ORG $+3
	DD	06fc1H
	DD	01ceH
	DB	0dcH, 0c5H, 0d2H, 0fdH, 0d1H, 0e1H, '?', 00H
	ORG $+9
	ORG $+3
	DD	06fc8H
	DD	01cfH
	DB	0dcH, 0c5H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06fc9H
	DD	01d0H
	DB	0ecH, 0a5H, 0dcH, 0c5H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06fcaH
	DD	01d1H
	DB	0dcH, 0c5H, '?', 0caH, 0ecH, 0d0H, 0baH, 00H
	ORG $+9
	ORG $+3
	DD	06fcbH
	DD	01d2H
	DB	0e4H, 0f5H, 0deH, 0d9H, 0f6H, 0f1H, 0ebH, 0daH, 00H
	ORG $+8
	ORG $+3
	DD	06fc7H
	DD	01d3H
	DB	0d5H, 0a6H, 0eeH, 0daH, 0d6H, 0f4H, '?', 00H
	ORG $+9
	ORG $+3
	DD	06fccH
	DD	01d4H
	DB	0d6H, 0f4H, '?', 0d1H, 0ceH, 0d5H, 0a6H, 00H
	ORG $+9
	ORG $+3
	DD	06fcdH
	DD	01d5H
	DB	0caH, 0e7H, 0d2H, 0fdH, 0d6H, 0f4H, '?', 00H
	ORG $+9
	ORG $+3
	DD	06fceH
	DD	01d6H
	DB	0d6H, 0f4H, '?', 0dcH, 0fdH, 00H
	ORG $+11
	ORG $+3
	DD	06fcfH
	DD	01d7H
	DB	0d3H, 0ecH, 0cdH, 0afH, 0d3H, 0ecH, '?', 0f7H, 0e5H, 00H
	ORG $+7
	ORG $+3
	DD	06fd0H
	DD	01d8H
	DB	0d0H, 0f4H, 0deH, 0d9H, 0cdH, 0afH, 0d3H, 0ecH, 00H
	ORG $+8
	ORG $+3
	DD	06fd1H
	DD	01d9H
	DB	0f7H, 0b2H, 0d5H, 0c3H, 0cdH, 0afH, 0d3H, 0ecH, 00H
	ORG $+8
	ORG $+3
	DD	06fd2H
	DD	01daH
	DB	0faH, 0d3H, 0cdH, 0afH, 0d3H, 0ecH, 00H
	ORG $+10
	ORG $+3
	DD	06fd3H
	DD	01dbH
	DB	0caH, 0ecH, 0dcH, 0c5H, 0d5H, 0a6H, 0deH, 0c9H, 00H
	ORG $+8
	ORG $+3
	DD	06fd4H
	DD	01dcH
	DB	0caH, 0ecH, 0dcH, 0c5H, '?', 00H
	ORG $+11
	ORG $+3
	DD	06fd5H
	DD	01ddH
	DB	0caH, 0ecH, 0dcH, 0c5H, '??', 00H
	ORG $+10
	ORG $+3
	DD	06fd6H
	DD	01deH
	DB	0caH, 0ecH, '?', 0d2H, 0f9H, '?', 00H
	ORG $+10
	ORG $+3
	DD	06fd7H
	DD	01dfH
	DB	0e1H, 0f3H, 0ccH, 0abH, '?', 00H
	ORG $+11
	ORG $+3
	DD	06fd8H
	DD	01e0H
	DB	0d2H, 0f9H, 0e1H, 0f3H, 0cbH, 0d3H, 00H
	ORG $+10
	ORG $+3
	DD	06fd9H
	DD	01e1H
	DB	0e1H, 0f3H, 0f7H, 0a4H, 00H
	ORG $+12
	ORG $+3
	DD	06fdaH
	DD	01e2H
	DB	0e1H, 0f3H, 0d2H, 0f9H, 0e1H, 0f3H, 0d2H, 0f9H, 00H
	ORG $+8
	ORG $+3
	DD	06fdbH
	DD	01e3H
	DB	0deH, 0c9H, '?', 0d0H, 0f4H, 00H
	ORG $+11
	ORG $+3
	DD	06fddH
	DD	01e4H
	DB	0d8H, 0b0H, 0d7H, 0ecH, '?', 0d0H, 0f4H, 00H
	ORG $+9
	ORG $+3
	DD	06fdeH
	DD	01e5H
	DB	0e1H, 0f3H, '?', 00H
	ORG $+13
	ORG $+3
	DD	06fdfH
	DD	01e6H
	DB	'??', 00H
	ORG $+14
	ORG $+3
	DD	06fe0H
	DD	01e7H
	DB	00H
	ORG $+16
	ORG $+3
	DD	06fe1H
	DD	01e8H
	DB	00H
	ORG $+16
	ORG $+3
	DD	06fe2H
	DD	01e9H
	DB	00H
	ORG $+16
	ORG $+3
	DD	06fe3H
	DD	01eaH
	DB	'?', 0d0H, 0baH, '?', 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	06fe4H
	DD	01ebH
	DB	'?', 0d0H, 0baH, 0d3H, 0e3H, 0d9H, 0d5H, 00H
	ORG $+9
	ORG $+3
	DD	06fe5H
	DD	01ecH
	DB	0f9H, 0beH, 0d0H, 0baH, 00H
	ORG $+12
	ORG $+3
	DD	06fe6H
	DD	01edH
	DB	0f9H, 0beH, 0d0H, 0f1H, 00H
	ORG $+12
	ORG $+3
	DD	06fe7H
	DD	01eeH
	DB	0f9H, 0abH, 0ddH, 0dbH, 00H
	ORG $+12
	ORG $+3
	DD	06fe8H
	DD	01efH
	DB	0f9H, 0abH, 0d5H, 0c3H, 0eeH, 0e8H, 00H
	ORG $+10
	ORG $+3
	DD	06fe9H
	DD	01f0H
	DB	0deH, 0c8H, '?', 0e3H, 0f6H, 00H
	ORG $+11
	ORG $+3
	DD	06feaH
	DD	01f1H
	DB	0deH, 0c8H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06febH
	DD	01f2H
	DB	00H
	ORG $+16
	ORG $+3
	DD	06fecH
	DD	01f3H
	DB	'?', 0f7H, 0e5H, 00H
	ORG $+13
	ORG $+3
	DD	06fedH
	DD	01f4H
	DB	'?', 0d0H, 0f4H, 00H
	ORG $+13
	ORG $+3
	DD	06feeH
	DD	01f5H
	DB	0d4H, 0e1H, 0d5H, 0a6H, '??', 00H
	ORG $+10
	ORG $+3
	DD	06fefH
	DD	01f6H
	DB	0fdH, 0f1H, '??', 00H
	ORG $+12
	ORG $+3
	DD	06ff0H
	DD	01f7H
	DB	00H
	ORG $+16
	ORG $+3
	DD	06ff1H
	DD	01f8H
	DB	00H
	ORG $+16
	ORG $+3
	DD	06ff2H
	DD	01f9H
	DB	0f8H, 0d6H, '?', 0d2H, 0fdH, 0d0H, 0f1H, 00H
	ORG $+9
	ORG $+3
	DD	06ff3H
	DD	01faH
	DB	0f9H, 0ebH, 0deH, 0d9H, 0d2H, 0fdH, 0d0H, 0f1H, 00H
	ORG $+8
	ORG $+3
	DD	06ff4H
	DD	01fbH
	DB	'?', 0ccH, 0abH, 0d2H, 0fdH, 0d0H, 0f1H, 00H
	ORG $+9
	ORG $+3
	DD	06ff5H
	DD	01fcH
	DB	0dcH, 0c5H, 0d3H, 0ecH, 0d2H, 0fdH, 0d0H, 0f1H, 00H
	ORG $+8
	ORG $+3
	DD	06ff6H
	DD	01fdH
	DB	00H
	ORG $+16
	ORG $+3
	DD	06ff7H
	DD	01feH
	DB	'?', 0f7H, 0e5H, 0dfH, 0b5H, 00H
	ORG $+11
	ORG $+3
	DD	06ff7H
	DD	01ffH
	DB	'??', 0d0H, 0f4H, 00H
	ORG $+12
	ORG $+3
	DD	06ff8H
	DD	0200H
	DB	'?', 0dcH, 0c5H, 0d8H, 0a1H, 00H
	ORG $+11
	ORG $+3
	DD	06ff9H
	DD	0201H
	DB	'?', 0dcH, 0c5H, 0d0H, 0f4H, 00H
	ORG $+11
	ORG $+3
	DD	06ffaH
	DD	0202H
	DB	00H
	ORG $+16
	ORG $+3
	DD	06ffbH
	DD	0203H
	DB	00H
	ORG $+16
	ORG $+3
	DD	06ffcH
	DD	0204H
	DB	0d2H, 0fdH, 0d0H, 0f4H, 00H
	ORG $+12
	ORG $+3
	DD	06ffdH
	DD	0205H
	DB	0d3H, 0dbH, 0d9H, 0d5H, 0f7H, 0e5H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06ffeH
	DD	0206H
	DB	0d3H, 0dbH, 0d9H, 0d5H, 0eeH, 0e8H, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	06fffH
	DD	0207H
	DB	0d3H, 0dbH, 0d9H, 0d5H, 0d1H, 0e1H, '?', 00H
	ORG $+9
	ORG $+3
	DD	07000H
	DD	0208H
	DB	0d3H, 0dbH, 0d9H, 0d5H, 0dfH, 0e3H, 0d2H, 0f9H, 00H
	ORG $+8
	ORG $+3
	DD	07001H
	DD	0209H
	DB	00H
	ORG $+16
	ORG $+3
	DD	07002H
	DD	020aH
	DB	00H
	ORG $+16
	ORG $+3
	DD	07003H
	DD	020bH
	DB	00H
	ORG $+16
	ORG $+3
	DD	07004H
	DD	020cH
	DB	00H
	ORG $+16
	ORG $+3
	DD	07005H
	DD	020dH
	DB	'?', 0daH, 0b7H, '?', 00H
	ORG $+12
	ORG $+3
	DD	07006H
	DD	020eH
	DB	'???', 00H
	ORG $+13
	ORG $+3
	DD	07007H
	DD	020fH
	DB	00H
	ORG $+16
	ORG $+3
	DD	07008H
	DD	0210H
	DB	00H
	ORG $+16
	ORG $+3
	DD	07009H
	DD	0211H
	DB	00H
	ORG $+16
	ORG $+3
	DD	0700aH
	DD	0212H
	DB	00H
	ORG $+16
	ORG $+3
	DD	0700bH
	DD	0213H
	DB	00H
	ORG $+16
	ORG $+3
	DD	0700cH
	DD	0214H
	DB	00H
	ORG $+16
	ORG $+3
	DD	0700dH
	DD	0215H
	DB	00H
	ORG $+16
	ORG $+3
	DD	0700eH
	DD	0216H
	DB	00H
	ORG $+16
	ORG $+3
	DD	0700fH
	DD	0217H
	DB	00H
	ORG $+16
	ORG $+3
	DD	07010H
	DD	0218H
	DB	0f7H, 0eeH, 0ecH, 0ccH, 0f0H, 0abH, 0deH, 0d9H, 00H
	ORG $+8
	ORG $+3
	DD	07011H
	DD	0219H
	DB	0f7H, 0eeH, 0ecH, 0ccH, 0f0H, 0abH, '?', 00H
	ORG $+9
	ORG $+3
	DD	07012H
	DD	021aH
	DB	0f7H, 0eeH, 0ecH, 0ccH, '?', 0f8H, 0d6H, 00H
	ORG $+9
	ORG $+3
	DD	07013H
	DD	021bH
	DB	0f7H, 0eeH, 0ecH, 0ccH, 0f7H, 0eeH, 0d1H, 0daH, 00H
	ORG $+8
	ORG $+3
	DD	07014H
	DD	021cH
	DB	0d8H, 0a4H, '?', 0deH, 0d9H, 00H
	ORG $+11
	ORG $+3
	DD	07015H
	DD	021dH
	DB	0d8H, 0baH, 0d8H, 0a4H, 0deH, 0d9H, 00H
	ORG $+10
	ORG $+3
	DD	07016H
	DD	021eH
	DB	'?', 0d0H, 0e9H, 0e8H, 0aaH, 00H
	ORG $+11
	ORG $+3
	DD	07017H
	DD	021fH
	DB	'?', 0d0H, 0f4H, '?', 00H
	ORG $+12
	ORG $+3
	DD	07018H
	DD	0220H
	DB	'?', 0d9H, 0d5H, 0f7H, 0e5H, 00H
	ORG $+11
	ORG $+3
	DD	07019H
	DD	0221H
	DB	'?', 0d2H, 0fdH, 0cdH, 0d4H, 0d4H, 0f4H, 00H
	ORG $+9
	ORG $+3
	DD	0701aH
	DD	0222H
	DB	'?', 0daH, 0b7H, 0cdH, 0d4H, 0d4H, 0f4H, 00H
	ORG $+9
	ORG $+3
	DD	0701bH
	DD	0223H
	DB	'??', 0cdH, 0d4H, 0d4H, 0f4H, 00H
	ORG $+10
	ORG $+3
	DD	0701cH
	DD	0224H
	DB	'??', 0cdH, 0d4H, 0d4H, 0f4H, 00H
	ORG $+10
	ORG $+3
	DD	0701dH
	DD	0225H
	DB	0cdH, 0afH, 0efH, 0cbH, 0f7H, 0e9H, 0d5H, 0c3H, 00H
	ORG $+8
	ORG $+3
	DD	0701eH
	DD	0226H
	DB	0cdH, 0afH, 0efH, 0cbH, 0ccH, 0abH, 0ccH, 0abH, 00H
	ORG $+8
	ORG $+3
	DD	0701fH
	DD	0227H
	DB	0cdH, 0afH, 0efH, 0cbH, 0d5H, 0c3H, '?', 00H
	ORG $+9
	ORG $+3
	DD	07020H
	DD	0228H
	DB	0cdH, 0afH, 0efH, 0cbH, '?', 0d5H, 0c3H, 00H
	ORG $+9
	ORG $+3
	DD	07021H
	DD	0229H
	DB	0ecH, 0a5H, 0d2H, 0fdH, '?', 00H
	ORG $+11
	ORG $+3
	DD	07022H
	DD	022aH
	DB	0ecH, 0a5H, 0cdH, 0afH, 0dfH, 0b5H, 00H
	ORG $+10
	ORG $+3
	DD	07023H
	DD	022bH
	DB	0f9H, 0beH, 0d8H, 0b0H, 00H
	ORG $+12
	ORG $+3
	DD	07024H
	DD	022cH
	DB	0f9H, 0beH, 0f7H, 0eeH, 00H
	ORG $+12
	ORG $+3
	DD	07025H
	DD	022dH
	DB	0f9H, 0beH, '?', 0f2H, 0a2H, 00H
	ORG $+11
	ORG $+3
	DD	07026H
	DD	022eH
	DB	0d8H, 0b0H, 0caH, 0a6H, 00H
	ORG $+12
	ORG $+3
	DD	07027H
	DD	022fH
	DB	0d8H, 0b0H, 0d5H, 0a6H, 0f7H, 0e5H, 00H
	ORG $+10
	ORG $+3
	DD	07028H
	DD	0230H
	DB	0daH, 0b7H, 0d2H, 0fdH, 0d2H, 0fdH, 00H
	ORG $+10
	ORG $+3
	DD	07029H
	DD	0231H
	DB	0daH, 0b7H, 0d2H, 0fdH, '?', 00H
	ORG $+11
	ORG $+3
	DD	0702aH
	DD	0232H
	DB	0daH, 0b7H, '?', 0d2H, 0fdH, 00H
	ORG $+11
	ORG $+3
	DD	0702bH
	DD	0233H
	DB	0daH, 0b7H, 0d2H, 0f9H, '?', 00H
	ORG $+11
	ORG $+3
	DD	0702cH
	DD	0234H
	DB	0cdH, 0fcH, 0d5H, 0f4H, 0d5H, 0c3H, 00H
	ORG $+10
	ORG $+3
	DD	0702dH
	DD	0235H
	DB	0cdH, 0fcH, 0d5H, 0f4H, 0d2H, 0fdH, 00H
	ORG $+10
	ORG $+3
	DD	0702eH
	DD	0236H
	DB	0e4H, 0baH, 0d0H, 0e9H, 00H
	ORG $+12
	ORG $+3
	DD	0702fH
	DD	0237H
	DB	'?', 0d0H, 0e9H, 00H
	ORG $+13
	ORG $+3
	DD	07030H
	DD	0238H
	DB	0d2H, 0fdH, 0d0H, 0e9H, 00H
	ORG $+12
	ORG $+3
	DD	07031H
	DD	0239H
	DB	0cdH, 0dbH, 0d2H, 0fdH, 00H
	ORG $+12
	ORG $+3
	DD	07032H
?byShowPetItemBackground@@3PAEA DB 05dH			; byShowPetItemBackground
	DB	05dH
	DB	07dH
	DB	05dH
	DB	05dH
	DB	07dH
	DB	05fH
	DB	05dH
	DB	05fH
	DB	07fH
	DB	05dH
	DB	05dH
	DB	05dH
	DB	05dH
	DB	05dH
	DB	07dH
	DB	07dH
	DB	05dH
	DB	05dH
	DB	07dH
	DB	05dH
	DB	07dH
	DB	07dH
	DB	05dH
	DB	05dH
	DB	05fH
	DB	05dH
	DB	05dH
	DB	09H
	DB	01dH
	DB	05dH
	DB	079H
	DB	01dH
	DB	05dH
	DB	079H
	DB	05dH
	DB	05dH
	DB	05dH
	DB	05dH
	DB	05dH
	DB	05dH
	DB	05dH
	DB	00H
	ORG $+1
?IdEncryptionTbl@@3PAHA DD 030H				; IdEncryptionTbl
	DD	09eH
	DD	062H
	DD	017H
	DD	086H
	DD	01dH
	DD	05cH
	DD	043H
	DD	046H
	DD	01cH
	DD	0ebH
	DD	014H
	DD	0bdH
	DD	030H
	DD	039H
	DD	07dH
?DetailDesc@@3PAY0EA@DA DB 0c1H, 0f6H, ' ', 0b8H, 0b6H, 0b9H, 0fdH, ' ', 0c0H
	DB	0faH, 0c7H, 0d7H, 0bcH, 0baH, 0a1H, 0a1H, 0a3H, 0baH, 00H ; DetailDesc
	ORG $+45
	DB	0bcH, 0f6H, ' ', 0b8H, 0b6H, 0b9H, 0fdH, ' ', 0c0H, 0faH, 0c7H
	DB	0d7H, 0bcH, 0baH, 0a1H, 0a1H, 0a3H, 0baH, 00H
	ORG $+45
	DB	0c8H, 0adH, ' ', 0b8H, 0b6H, 0b9H, 0fdH, ' ', 0c0H, 0faH, 0c7H
	DB	0d7H, 0bcH, 0baH, 0a1H, 0a1H, 0a3H, 0baH, 00H
	ORG $+45
	DB	0c7H, 0b3H, ' ', 0b8H, 0b6H, 0b9H, 0fdH, ' ', 0c0H, 0faH, 0c7H
	DB	0d7H, 0bcH, 0baH, 0a1H, 0a1H, 0a3H, 0baH, 00H
	ORG $+45
	DB	0c1H, 0f6H, ' ', 0b8H, 0b6H, 0b9H, 0fdH, ' ', 0bcH, 0f7H, 0b7H
	DB	0c3H, 0b5H, 0b5H, 0a3H, 0baH, 00H
	ORG $+47
	DB	0bcH, 0f6H, ' ', 0b8H, 0b6H, 0b9H, 0fdH, ' ', 0bcH, 0f7H, 0b7H
	DB	0c3H, 0b5H, 0b5H, 0a3H, 0baH, 00H
	ORG $+47
	DB	0c8H, 0adH, ' ', 0b8H, 0b6H, 0b9H, 0fdH, ' ', 0bcH, 0f7H, 0b7H
	DB	0c3H, 0b5H, 0b5H, 0a3H, 0baH, 00H
	ORG $+47
	DB	0c7H, 0b3H, ' ', 0b8H, 0b6H, 0b9H, 0fdH, ' ', 0bcH, 0f7H, 0b7H
	DB	0c3H, 0b5H, 0b5H, 0a3H, 0baH, 00H
	ORG $+47
?DetailDesc1@@3PAY0EA@DA DB 0c1H, 0f6H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H
	DB	0b6H, 0b9H, 0fdH, ' ', 0c0H, 0faH, 0c7H, 0d7H, 0bcH, 0baH, 0a3H
	DB	0acH, 0c1H, 0d9H, 0c0H, 0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H
	DB	0c0H, 0bdH, 00H				; DetailDesc1
	ORG $+30
	DB	0bcH, 0f6H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0c0H, 0faH, 0c7H, 0d7H, 0bcH, 0baH, 0a3H, 0acH, 0c1H
	DB	0d9H, 0c0H, 0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH
	DB	00H
	ORG $+30
	DB	0c8H, 0adH, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0c0H, 0faH, 0c7H, 0d7H, 0bcH, 0baH, 0a3H, 0acH, 0c1H
	DB	0d9H, 0c0H, 0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH
	DB	00H
	ORG $+30
	DB	0c7H, 0b3H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0c0H, 0faH, 0c7H, 0d7H, 0bcH, 0baH, 0a3H, 0acH, 0c1H
	DB	0d9H, 0c0H, 0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH
	DB	00H
	ORG $+30
	DB	0c1H, 0f6H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0bcH, 0f7H, 0b7H, 0c3H, 0b5H, 0b5H, 0a3H, 0acH, 0bbH
	DB	0e7H, 0bfH, 0ebH, 0c7H, 0cfH, 0bfH, 0a9H, ' ', 0b3H, 0f4H, 0c0H
	DB	0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH, 00H
	ORG $+21
	DB	0bcH, 0f6H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0bcH, 0f7H, 0b7H, 0c3H, 0b5H, 0b5H, 0a3H, 0acH, 0bbH
	DB	0e7H, 0bfH, 0ebH, 0c7H, 0cfH, 0bfH, 0a9H, ' ', 0b3H, 0f4H, 0c0H
	DB	0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH, 00H
	ORG $+21
	DB	0c8H, 0adH, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0bcH, 0f7H, 0b7H, 0c3H, 0b5H, 0b5H, 0a3H, 0acH, 0bbH
	DB	0e7H, 0bfH, 0ebH, 0c7H, 0cfH, 0bfH, 0a9H, ' ', 0b3H, 0f4H, 0c0H
	DB	0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH, 00H
	ORG $+21
	DB	0c7H, 0b3H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0bcH, 0f7H, 0b7H, 0c3H, 0b5H, 0b5H, 0a3H, 0acH, 0bbH
	DB	0e7H, 0bfH, 0ebH, 0c7H, 0cfH, 0bfH, 0a9H, ' ', 0b3H, 0f4H, 0c0H
	DB	0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH, 00H
	ORG $+21
?DetailDesc2@@3PAY0EA@DA DB 0c1H, 0f6H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H
	DB	0b6H, 0b9H, 0fdH, 0c0H, 0c7H, ' ', 0b5H, 0a5H, 0b9H, 0ccH, 0c1H
	DB	0f6H, 0a1H, 0a3H, 00H			; DetailDesc2
	ORG $+40
	DB	0bcH, 0f6H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, 0c0H, 0c7H, ' ', 0b5H, 0a5H, 0b9H, 0ccH, 0c1H, 0f6H, 0a1H
	DB	0a3H, 00H
	ORG $+40
	DB	0c8H, 0adH, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, 0c0H, 0c7H, ' ', 0b5H, 0a5H, 0b9H, 0ccH, 0c1H, 0f6H, 0a1H
	DB	0a3H, 00H
	ORG $+40
	DB	0c7H, 0b3H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, 0c0H, 0c7H, ' ', 0b5H, 0a5H, 0b9H, 0ccH, 0c1H, 0f6H, 0a1H
	DB	0a3H, 00H
	ORG $+40
	DB	0c1H, 0f6H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0bdH, 0c3H, 0c0H, 0fcH, ' ', 0c0H, 0a7H, 0b7H, 0c2H
	DB	0a1H, 0a3H, 00H
	ORG $+39
	DB	0bcH, 0f6H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0bdH, 0c3H, 0c0H, 0fcH, ' ', 0c0H, 0a7H, 0b7H, 0c2H
	DB	0a1H, 0a3H, 00H
	ORG $+39
	DB	0c8H, 0adH, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0bdH, 0c3H, 0c0H, 0fcH, ' ', 0c0H, 0a7H, 0b7H, 0c2H
	DB	0a1H, 0a3H, 00H
	ORG $+39
	DB	0c7H, 0b3H, ' ', 0c1H, 0a4H, 0b7H, 0c9H, ' ', 0b8H, 0b6H, 0b9H
	DB	0fdH, ' ', 0bdH, 0c3H, 0c0H, 0fcH, ' ', 0c0H, 0a7H, 0b7H, 0c2H
	DB	0a1H, 0a3H, 00H
	ORG $+39
?sAlchePlus_list@@3PAY0BA@DA DB 0b5H, 0b9H, 00H		; sAlchePlus_list
	ORG $+13
	DB	0b3H, 0aaH, 0b9H, 0abH, 00H
	ORG $+11
	DB	0bbH, 0c0H, 00H
	ORG $+13
	DB	0c4H, 0a1H, 0beH, 0c6H, 00H
	ORG $+11
	DB	0c7H, 0c7H, 0baH, 0ceH, 00H
	ORG $+11
	DB	0c1H, 0b6H, 0b0H, 0a1H, 0baH, 0f1H, 00H
	ORG $+9
	DB	0b2H, 0aeH, 0c1H, 0faH, 00H
	ORG $+11
	DB	0b9H, 0dfH, 0c5H, 0e9H, 00H
	ORG $+11
	DB	0b2H, 0c9H, 00H
	ORG $+13
	DB	0c0H, 0d9H, 00H
	ORG $+13
	DB	0bcH, 0b1H, 00H
	ORG $+13
	DB	0c1H, 0a1H, 0c5H, 0e4H, 00H
	ORG $+11
	DB	0baH, 0f1H, 0b4H, 0c3H, 00H
	ORG $+11
	DB	0b5H, 0b6H, 00H
	ORG $+13
	DB	0bcH, 0aeH, 0c8H, 0adH, 00H
	ORG $+11
	DB	0c8H, 0a5H, 0b5H, 0b7H, 00H
	ORG $+11
	DB	0b8H, 0b8H, 0c3H, 0ebH, 00H
	ORG $+11
	DB	0b1H, 0b8H, 0b8H, 0e9H, 00H
	ORG $+11
	DB	0c8H, 0b8H, 0baH, 0b9H, 00H
	ORG $+11
	DB	0baH, 0ceH, 0c8H, 0b0H, 00H
	ORG $+11
	DB	0bcH, 0f6H, 0c1H, 0a4H, 00H
	ORG $+11
	DB	0b6H, 0a5H, 00H
	ORG $+13
	DB	0b9H, 0b0H, 00H
	ORG $+13
	DB	0baH, 0d2H, 00H
	ORG $+13
	DB	0b9H, 0d9H, 0b6H, 0f7H, 00H
	ORG $+11
?iAlchePlusIcon@@3PAHA DD 067a8H			; iAlchePlusIcon
	DD	067a1H
	DD	067b3H
	DD	067a6H
	DD	067a7H
	DD	067aeH
	DD	067b6H
	DD	067a5H
	DD	067afH
	DD	067b7H
	DD	067b9H
	DD	067baH
	DD	067bdH
	DD	067b0H
	DD	067a9H
	DD	067b2H
	DD	067b4H
	DD	067b8H
	DD	067aaH
	DD	067b5H
	DD	067a3H
	DD	067abH
	DD	067a2H
	DD	067a4H
	DD	067b1H
?charDetailPage@@3HA DD 03H				; charDetailPage
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	__snprintf
PUBLIC	?lssproto_TD_recv@@YAXHPAD@Z			; lssproto_TD_recv
PUBLIC	?lssproto_CHATROOM_recv@@YAXHPAD@Z		; lssproto_CHATROOM_recv
PUBLIC	?lssproto_RESIST_recv@@YAXHPAD@Z		; lssproto_RESIST_recv
PUBLIC	?lssproto_ALCHEPLUS_recv@@YAXHPAD@Z		; lssproto_ALCHEPLUS_recv
PUBLIC	?lssproto_BATTLESKILL_recv@@YAXHPAD@Z		; lssproto_BATTLESKILL_recv
PUBLIC	?lssproto_CHAREFFECT_recv@@YAXHPAD@Z		; lssproto_CHAREFFECT_recv
PUBLIC	?lssproto_BATTLEBUTTON_recv@@YAXHHH@Z		; lssproto_BATTLEBUTTON_recv
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?TradeTalk@@YAXPAD@Z				; TradeTalk
PUBLIC	?InitItem@@YAXHHH@Z				; InitItem
PUBLIC	?InitMenu@@YAXXZ				; InitMenu
PUBLIC	?InitMenu2@@YAXXZ				; InitMenu2
PUBLIC	?CheckMenuFlag@@YAHXZ				; CheckMenuFlag
PUBLIC	?MenuProc@@YAXXZ				; MenuProc
PUBLIC	?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z		; MakeWindowDisp
PUBLIC	?MakeHitBox@@YAHHHHHH@Z				; MakeHitBox
PUBLIC	?SaveMailHistory@@YAHH@Z			; SaveMailHistory
PUBLIC	?LoadMailHistory@@YAHXZ				; LoadMailHistory
PUBLIC	?CheckMailNoReadFlag@@YAHXZ			; CheckMailNoReadFlag
PUBLIC	?InitOhtaParam@@YAXXZ				; InitOhtaParam
PUBLIC	?DeathLetterAction@@YAXXZ			; DeathLetterAction
PUBLIC	?SaveChatRegistyStr@@YAHXZ			; SaveChatRegistyStr
PUBLIC	?LoadChatRegistyStr@@YAHXZ			; LoadChatRegistyStr
PUBLIC	?CenteringStr@@YAXPAD0H@Z			; CenteringStr
PUBLIC	?CheckNewPet@@YAXH@Z				; CheckNewPet
PUBLIC	?CheckBattleNewPet@@YAXXZ			; CheckBattleNewPet
PUBLIC	?LoadAlbum@@YAHXZ				; LoadAlbum
PUBLIC	?SaveAlbum@@YAHH@Z				; SaveAlbum
PUBLIC	?MakeAnimDisp@@YAPAUaction@@HHHH@Z		; MakeAnimDisp
PUBLIC	?tradeInit@@YAXXZ				; tradeInit
PUBLIC	?BankmanInit@@YAXPAD@Z				; BankmanInit
PUBLIC	?closeBankman@@YAXXZ				; closeBankman
PUBLIC	?InitSelectChar@@YAXPADH@Z			; InitSelectChar
PUBLIC	?SelectChar@@YAXXZ				; SelectChar
PUBLIC	?DeathTellChannel@@YAXXZ			; DeathTellChannel
PUBLIC	?SelectChatRoom@@YAXXZ				; SelectChatRoom
PUBLIC	?InitSelChatRoom@@YAXPAD@Z			; InitSelChatRoom
PUBLIC	?InitCreateChatRoom@@YAXPAD@Z			; InitCreateChatRoom
PUBLIC	?ChatRoomWnd@@YAXXZ				; ChatRoomWnd
PUBLIC	?initAssentWnd@@YAXPAD@Z			; initAssentWnd
PUBLIC	?AssentWnd@@YAXXZ				; AssentWnd
PUBLIC	?setRoomName@@YAXXZ				; setRoomName
PUBLIC	?send_StandBy_Pet@@YAXXZ			; send_StandBy_Pet
PUBLIC	?deallocate@?$allocator@H@std@@QAEXQAHI@Z	; std::allocator<int>::deallocate
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
PUBLIC	?_Xrange@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xrange
PUBLIC	??0Mammoth@@QAE@XZ				; Mammoth::Mammoth
PUBLIC	?Get@Mammoth@@SAAAV1@XZ				; Mammoth::Get
PUBLIC	?Display@Mammoth@@QAEXXZ			; Mammoth::Display
PUBLIC	?Init@Mammoth@@QAEXXZ				; Mammoth::Init
PUBLIC	?Animation@Mammoth@@QAEXXZ			; Mammoth::Animation
PUBLIC	?InitAction@Mammoth@@QAEXXZ			; Mammoth::InitAction
PUBLIC	?KillAction@Mammoth@@QAEXXZ			; Mammoth::KillAction
PUBLIC	?IsOpen@Mammoth@@QAEHXZ				; Mammoth::IsOpen
PUBLIC	?Open@Mammoth@@QAEXPAD@Z			; Mammoth::Open
PUBLIC	?Close@Mammoth@@QAEXXZ				; Mammoth::Close
PUBLIC	?MouseControl@Mammoth@@QAEXXZ			; Mammoth::MouseControl
PUBLIC	?GetCouponIndex@Mammoth@@QAEHXZ			; Mammoth::GetCouponIndex
PUBLIC	?DisplayRewardList@Mammoth@@QAEXXZ		; Mammoth::DisplayRewardList
PUBLIC	?GetCouponCount@Mammoth@@QAEHXZ			; Mammoth::GetCouponCount
PUBLIC	?IsBagFull@Mammoth@@QAEHXZ			; Mammoth::IsBagFull
PUBLIC	?Receive@Mammoth@@QAEXH@Z			; Mammoth::Receive
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?ItemCanPile@@YAHH@Z				; ItemCanPile
PUBLIC	?Calculate@Ranking@@QAEXABUPET@@@Z		; Ranking::Calculate
PUBLIC	??1Ranking@@QAE@XZ				; Ranking::~Ranking
PUBLIC	?checkRidePet@@YAXH@Z				; checkRidePet
PUBLIC	?RIDEPET_getNOindex@@YAHH@Z			; RIDEPET_getNOindex
PUBLIC	?RIDEPET_getPETindex@@YAHHH@Z			; RIDEPET_getPETindex
PUBLIC	?RIDEPET_getRIDEno@@YAHHH@Z			; RIDEPET_getRIDEno
PUBLIC	?SkillWndfunc2@@YAXXZ				; SkillWndfunc2
PUBLIC	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ		; sprintf_s<256>
PUBLIC	?LockAndOkfunction@@YAXXZ			; LockAndOkfunction
PUBLIC	?WindowDisp@@YAXPAUaction@@@Z			; WindowDisp
PUBLIC	?AnimDisp@@YAXPAUaction@@@Z			; AnimDisp
PUBLIC	?LoadAlbum_47@@YAHPAD@Z				; LoadAlbum_47
PUBLIC	?ConvertAlbumTo47@@YAHPAD0K@Z			; ConvertAlbumTo47
PUBLIC	?ConvertAlbum1_47@@YAHPAD@Z			; ConvertAlbum1_47
PUBLIC	?CheckPetSkill@@YAHH@Z				; CheckPetSkill
PUBLIC	?InitItem3@@YAXHH@Z				; InitItem3
PUBLIC	?InitMailSendFlag@@YAXXZ			; InitMailSendFlag
PUBLIC	?DeathMenuAction@@YAXXZ				; DeathMenuAction
PUBLIC	?DeathMenuAction2@@YAXXZ			; DeathMenuAction2
PUBLIC	?í»?Ôô??Ï¢üÞ?@@YAXXZ				; í»?Ôô??Ï¢üÞ?
PUBLIC	??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ		; sprintf_s<128>
PUBLIC	?initSetRoomName@@YAXXZ				; initSetRoomName
PUBLIC	?SwapOrder@@YAXHH@Z				; SwapOrder
PUBLIC	?InitRoomInfo@@YAXXZ				; InitRoomInfo
PUBLIC	?InitRecvMsg@@YAXPAD@Z				; InitRecvMsg
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
PUBLIC	??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_copy<int const *,std::allocator<int> >
PUBLIC	??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z	; std::_Copy_memmove<int *,int *>
PUBLIC	??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z	; std::_Copy_memmove<int const *,int *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0L@HPPHGFBL@?$LI?$LO?$LI?p?$LN?$LK?D?m?F?y@ ; `string'
PUBLIC	??_C@_0CC@OFAJPOPK@?$LH?$KD?$LE?$PN?$MA?$LI?$LH?N?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?H?$LJ?$LF?f?G?Q?$LE?Y?5?$CI?$LH?$KD?$LE@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@	; `string'
PUBLIC	??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@ ; `string'
PUBLIC	??_C@_02BIDEELGN@S?$CL@				; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	??_C@_02HJGDMHD@A?$CL@				; `string'
PUBLIC	??_C@_01FHEEJDEE@A@				; `string'
PUBLIC	??_C@_02FNAICCK@B?$CL@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B@				; `string'
PUBLIC	??_C@_02EBCOIBN@C?$CL@				; `string'
PUBLIC	??_C@_01GFHCPBMG@C@				; `string'
PUBLIC	??_C@_02BFNPOJI@D?$CL@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D@				; `string'
PUBLIC	??_C@_01BIAFAFID@F@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_04IMPGGDFH@?$CFd?$KD?$KF@			; `string'
PUBLIC	??_C@_0M@MPGNHMDP@?$CI?$LK?q?$LP?kMP?3?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_03GHDNOBPC@?$CF8s@			; `string'
PUBLIC	??_C@_0L@OMFCIIOF@?$CI?Y?D?$DPMP?3?$CFd?$CJ@	; `string'
PUBLIC	??_C@_0FG@OFAEILEL@T?$HM?$CFs?$HM?$CFs?$HMK?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI@ ; `string'
PUBLIC	??_C@_0BP@EDJFIODM@P?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMG?$HM?$CFd?$HM@ ; `string'
PUBLIC	??_C@_0EM@BMOJJPID@I?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI@ ; `string'
PUBLIC	??_C@_08KJEDNCKC@?$CFs?$CFs?$CFs?$CFs@		; `string'
PUBLIC	??_C@_0BC@OAKKNIEC@T?$HM?$CFs?$HM?$CFs?$HMC?$HMconfirm@ ; `string'
PUBLIC	??_C@_03IFADCKOJ@?$CFd?$HM@			; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb@			; `string'
PUBLIC	??_C@_0O@GFOIPMHB@data?2mail?4dat@		; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_0BB@GDFOCPAE@data?2chatreg?4dat@		; `string'
PUBLIC	??_C@_0BC@DHMHBGOC@data?2album_47?4dat@		; `string'
PUBLIC	??_C@_04IJNKKJEO@?H?$KO?$MA?N@			; `string'
PUBLIC	??_C@_0CN@KFFLPIAB@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@ ; `string'
PUBLIC	??_C@_0CN@IOHGKLMC@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@ ; `string'
PUBLIC	??_C@_0CN@JHGNJKID@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@ ; `string'
PUBLIC	??_C@_0BB@DGDLCNIG@data?2album_2?4dat@		; `string'
PUBLIC	??_C@_0BB@PNGHPOCD@data?2album_3?4dat@		; `string'
PUBLIC	??_C@_0BC@HIPKAJPN@data?2album_10?4dat@		; `string'
PUBLIC	??_C@_0P@JONHHOLF@data?2album?4dat@		; `string'
PUBLIC	??_C@_09BACHGGGK@f?$DLencor1c@			; `string'
PUBLIC	??_C@_0BC@PMJLMFEH@data?2album_46?4dat@		; `string'
PUBLIC	??_C@_0BC@HKAPLHOJ@data?2album_45?4dat@		; `string'
PUBLIC	??_C@_0BC@LBFDGEEM@data?2album_44?4dat@		; `string'
PUBLIC	??_C@_0BC@KMFGFEPE@data?2album_43?4dat@		; `string'
PUBLIC	??_C@_0BC@GHAKIHFB@data?2album_42?4dat@		; `string'
PUBLIC	??_C@_0BC@OBJOPFPP@data?2album_41?4dat@		; `string'
PUBLIC	??_C@_0BC@CKMCCGFK@data?2album_40?4dat@		; `string'
PUBLIC	??_C@_0BC@MIGKEJBM@data?2album_39?4dat@		; `string'
PUBLIC	??_C@_0BC@DDGJKLJ@data?2album_38?4dat@		; `string'
PUBLIC	??_C@_0BC@PCGACIGM@data?2album_37?4dat@		; `string'
PUBLIC	??_C@_0BC@DJDMPLMJ@data?2album_36?4dat@		; `string'
PUBLIC	??_C@_0BC@LPKIIJGH@data?2album_35?4dat@		; `string'
PUBLIC	??_C@_0BC@HEPEFKMC@data?2album_34?4dat@		; `string'
PUBLIC	??_C@_0BC@GJPBGKHK@data?2album_33?4dat@		; `string'
PUBLIC	??_C@_0BC@KCKNLJNP@data?2album_32?4dat@		; `string'
PUBLIC	??_C@_0BC@CEDJMLHB@data?2album_31?4dat@		; `string'
PUBLIC	??_C@_0BC@OPGFBINE@data?2album_30?4dat@		; `string'
PUBLIC	??_C@_0BC@GOBNECKI@data?2album_29?4dat@		; `string'
PUBLIC	??_C@_0BC@KFEBJBAN@data?2album_28?4dat@		; `string'
PUBLIC	??_C@_0BC@FEBHCDNI@data?2album_27?4dat@		; `string'
PUBLIC	??_C@_0BC@JPELPAHN@data?2album_26?4dat@		; `string'
PUBLIC	??_C@_0BC@BJNPICND@data?2album_25?4dat@		; `string'
PUBLIC	??_C@_0BC@NCIDFBHG@data?2album_24?4dat@		; `string'
PUBLIC	??_C@_0BC@MPIGGBMO@data?2album_23?4dat@		; `string'
PUBLIC	??_C@_0BC@ENKLCGL@data?2album_22?4dat@		; `string'
PUBLIC	??_C@_0BC@ICEOMAMF@data?2album_21?4dat@		; `string'
PUBLIC	??_C@_0BC@EJBCBDGA@data?2album_20?4dat@		; `string'
PUBLIC	??_C@_0BC@FPPFFIDF@data?2album_19?4dat@		; `string'
PUBLIC	??_C@_0BC@JEKJILJA@data?2album_18?4dat@		; `string'
PUBLIC	??_C@_0BC@GFPPDJEF@data?2album_17?4dat@		; `string'
PUBLIC	??_C@_0BC@KOKDOKOA@data?2album_16?4dat@		; `string'
PUBLIC	??_C@_0BC@CIDHJIEO@data?2album_15?4dat@		; `string'
PUBLIC	??_C@_0BC@ODGLELOL@data?2album_14?4dat@		; `string'
PUBLIC	??_C@_0BC@POGOHLFD@data?2album_13?4dat@		; `string'
PUBLIC	??_C@_0BC@DFDCKIPG@data?2album_12?4dat@		; `string'
PUBLIC	??_C@_0BB@FMPMNNEF@data?2album_9?4dat@		; `string'
PUBLIC	??_C@_0BB@JHKAAOOA@data?2album_8?4dat@		; `string'
PUBLIC	??_C@_0BB@GGPGLMDF@data?2album_7?4dat@		; `string'
PUBLIC	??_C@_0BB@KNKKGPJA@data?2album_6?4dat@		; `string'
PUBLIC	??_C@_0BB@CLDOBNDO@data?2album_5?4dat@		; `string'
PUBLIC	??_C@_0BB@OAGCMOJL@data?2album_4?4dat@		; `string'
PUBLIC	??_C@_08GINKOJP@?$CF?$CKc?$CFs?$CF?$CKc@	; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5@			; `string'
PUBLIC	??_C@_0P@LOIJIIEJ@?$LE?k?5?A?v?$LP?$KK?5?$LM?$LD?A?$KE?$KB?$KD@ ; `string'
PUBLIC	??_C@_0CJ@GIHIAMIF@?$LG?s?$MA?N?$MA?$LL?5?$LM?$LD?A?$KE?G?O?$LA?m?0?5?$LE?k?5?A?v?$LP?$KK?$MA?$LL?5?$LM?$LD?A?$KE@ ; `string'
PUBLIC	??_C@_0MB@GBACAPFD@?F?$MA?$MA?e?1?F?D?F?$LM?$MA?e?$KD?$LK?$MA?Z?$LF?$LP?$MA?$LI?$LH?N?5?$MA?$PL?$MA?$LL?$LI?$LI?$LD?$KK?$LA@ ; `string'
PUBLIC	??_C@_0BF@CKOBPJKJ@?$LH?N?$LB?W?$LP?B?5?D?$LD?$LI?$KP?E?M?5?$LM?$LD?A?$KE?$KB?$KD@ ; `string'
PUBLIC	??_C@_0GF@BOMDPEP@?$LH?N?$LB?W?$MA?N?5?H?D?5F9?E?$LA?$LI?$KG?5?$LE?$KN?$LH?$KP?$LM?$KN?5?D?Q?$LA?m?5?$LC?x@ ; `string'
PUBLIC	??_C@_0DK@HOGDKPIF@?$LE?k?5?A?v?$LP?$KK?5?$LG?s?$MA?N?$LA?z?5?$LP?$KK?G?R?$MA?$LL?5?$LI?U?$MA?z?5?$LM?$LB?E?C@ ; `string'
PUBLIC	??_C@_0DE@CELNCKDE@?F?D?F?$LM?$MA?e?$LA?z?5?$LM?V?$LH?N?5?G?C?$LH?$LJ?$MA?L?$LO?n?$LE?B?5?$MA?L?5?$LB?b?$LE@ ; `string'
PUBLIC	??_C@_0DF@NNHIIENC@?$MA?$PL?5?C?b?G?v?5?$LI?p?$LF?e?$LE?B?5?F?D?F?$LM?$MA?e?$LA?z?5?$LM?V?$LH?N?5?G?C@ ; `string'
PUBLIC	??_C@_0CE@ODNPGMLF@?F?D?F?$LM?$LP?x?$LI?$LI?5?$MA?L?5?$LB?b?$LE?I?$MA?$LL?5?$LM?$LD?A?$KE?G?R?5?$LM?v?5?$MA?V@ ; `string'
PUBLIC	??_C@_0DC@OHNNJONP@?$MA?Z?$LF?$LP?5?$LP?$NM?D?$KH?$MA?$LK?5?F?D?F?$LM?$LP?x?5?$LI?p?$LF?e?$LP?$KB?$LM?$KN?$LI?$LI?5?H@ ; `string'
PUBLIC	??_C@_0CM@PNEJOHOF@?A?$KC?$LM?S?$MA?L?$LC?w?$LB?d?5?D?$LD?$LI?$KP?E?M?5?$MA?g?A?$KC?$LM?S?5?$LN?C?5?D?$LD?$LI@ ; `string'
PUBLIC	??_C@_04CJANLAJP@?D?Q?$LE?Y@			; `string'
PUBLIC	??_C@_04JHHBNKBI@?A?$LO?$LH?a@			; `string'
PUBLIC	??_C@_0CE@JEKFMNHA@?$LL?s?A?$KB?$MA?L?$LP?k?$LN?C?0?5?$LO?F?$MA?L?E?$NL?$LL?g?$LP?k?$MA?$LL?G?R?$LM?v?$LO?x?$LO@ ; `string'
PUBLIC	??_C@_0N@MLOJNNJN@?$LE?$NM?$LM?x?H?$KN?$LJ?v?F?$LA?$KD?$KB@ ; `string'
PUBLIC	??_C@_0L@PCOGCFAC@?$LB?b?A?$LI?$LJ?v?F?$LA?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BB@KKHECGNN@BGM?$MA?L?5?D?Q?A?$LD?$LO?n?$LP?d?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BB@LGLPBADP@BGM?$MA?L?5?$LC?$KI?A?$LD?$LO?n?$LP?d?$KD?$KB@ ; `string'
PUBLIC	??_C@_0P@OFGFLBDD@?$LK?$PM?$LI?$KF?$LA?H?$LB?b?D?Q?$LB?b?$KD?$KB@ ; `string'
PUBLIC	??_C@_0P@DNLMMAKH@?$LK?$PM?$LI?$KF?$LA?H?$LB?b?$LC?t?$LB?b?$KD?$KB@ ; `string'
PUBLIC	??_C@_0P@BJHPFHFH@?$LL?s?E?B?G?$KF?$LN?C?$LP?$KN?$LB?b?$KD?$KB@ ; `string'
PUBLIC	??_C@_0P@FDCJGPKI@?$LL?s?E?B?G?$KF?$LN?C?$LC?t?$LB?b?$KD?$KB@ ; `string'
PUBLIC	??_C@_0CC@LEBCBFKD@?$MA?Z?$LF?$LP?$MA?$PM?E?u?5?$LI?p?$LF?e?$LA?$KB?5?H?$LA?$LM?$LK?H?$KN?5?$LF?G?$LO?z?$LN?$MA?$LE?O@ ; `string'
PUBLIC	??_C@_0CB@HCIPIBLA@?$MA?Z?$LF?$LP?$MA?$PM?E?u?5?$LI?p?$LF?e?$LA?$KB?5?A?$LO?$LH?a?5?$LF?G?$LO?z?$LN?$MA?$LE?O?$LE?Y@ ; `string'
PUBLIC	??_C@_0BB@MEGGIBAG@?5?5?5?5?$LI?$LG?$MA?$LL?$LA?$KB?$LB?b?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BB@KCHLCCBP@?5?5?5?5?$LH?N?$LB?W?$LO?F?$LP?t?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BB@JJJAMCHF@?5?5?5?5?C?$KE?F?C?$LM?$LD?A?$KE?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BB@EOMINEH@?5?5?5?5?$LJ?h?$LA?f?$MA?$LN?$LO?G?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BB@IBKCAFGG@?5?5?5?5?H?$LP?$LA?z?$LM?$LD?A?$KE?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BB@BBDDKJIA@?5?5?5?5?$KD?A?$KD?I?$LM?$LD?A?$KE?5?5?5?5@ ; `string'
PUBLIC	??_C@_0N@LBIEPHK@?5?5?5?5?E?$NL?C?$KC?$LA?m?5?5@ ; `string'
PUBLIC	??_C@_0N@HLPCCAFM@?5?5?5?5?F?j?C?$KC?$LA?m?5?5@	; `string'
PUBLIC	??_C@_0N@GMIIOOOP@?5?5?$MA?$LN?$LO?G?D?Q?$LB?b?5?5@ ; `string'
PUBLIC	??_C@_0N@LEFBJPHL@?5?5?$MA?$LN?$LO?G?$LC?t?$LB?b?5?5@ ; `string'
PUBLIC	??_C@_0N@HKIKJEIK@?5?5?$MA?Z?$LF?$LP?$LC?t?$LB?b?5?5@ ; `string'
PUBLIC	??_C@_0N@KCFDOFBO@?5?5?$MA?Z?$LF?$LP?D?Q?$LB?b?5?5@ ; `string'
PUBLIC	??_C@_0N@DEIGFB@?$KB?$KB?$LE?$NN?$KB?$KB?$KB?$KB?$LB?b?$KB?$KB@ ; `string'
PUBLIC	??_C@_0BD@KOMGLKIA@?$KB?$KB?$KB?$KB?5?H?$KO?5?5?5?5?5?$MA?N?$KB?$KB?$KB?$KB@ ; `string'
PUBLIC	??_C@_0BD@BOIANLGK@?$KB?$KB?$KB?$KB?5?C?k?5?5?5?5?5?$LM?R?$KB?$KB?$KB?$KB@ ; `string'
PUBLIC	??_C@_0BM@ENKFHEAF@?5?5?5?5?5?$KB?$NP?5?C?$KE?F?C?5?G?$KF?$LN?C?5?$CF3d?5?A?Y?5?$KB?$NP@ ; `string'
PUBLIC	??_C@_0BH@FAFBDACD@?5?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BH@LLOMOPMG@?5?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BH@BHEDFJKF@?5?5?5?5?5?$LL?v?$LL?s?5?$LK?$KP?$LA?f?$CI?$CF?92d?$CJ?5?5@ ; `string'
PUBLIC	??_C@_0BI@FHOMOHBA@?5?5?5?5?5?5?5?5?$LJ?$KO?$MA?Z?5?$LM?$LD?A?$KE?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BL@KBNPCBGD@?5?5?5?5?5?$KB?$NP?5?C?$KE?5?F?C?5?$LJ?$PM?5?$MA?$KH?5?$CF3d?5?$KB?$NP@ ; `string'
PUBLIC	??_C@_0BH@BIAEBEPO@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BH@MIIPLPNG@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BI@DIAFOMFL@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BL@OHLFALHA@?5?5?$KB?$NP?5?5?G?v?5?$MA?g?5?$MA?$LN?5?$LH?$KO?$CF3d?5?5?$KB?$NP?5?5@ ; `string'
PUBLIC	??_C@_0BI@KPMMPACD@?5?5?5?5?5?5?5?A?u?5?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BI@FONPGALA@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?5?$LM?R?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BJ@GJAFKJDC@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BI@MMNCCENM@?5?5?5?$KB?$NP?5?5?$LJ?h?$LA?f?$MA?$LN?$LO?G?5?$CF3d?5?5?$KB?$NP@ ; `string'
PUBLIC	??_C@_0BL@BJPCPCNM@?$KB?$NP?5?5?5?$KB?$NP?5?5?E?$NL?F?w?A?$LG?$MA?$PN?5?50?5?5?$KB?$NP?$KB?$NP@ ; `string'
PUBLIC	??_C@_0BK@FEMCCNKI@?5?5?5?$KB?$NP?5?5?E?$NL?F?w?A?$LG?$MA?$PN?5?5?$CF?$CL3d?5?5?$KB?$NP@ ; `string'
PUBLIC	??_C@_0BG@IIDNKJBP@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BG@GDIAHGPK@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_08LPIKKIN@?$LA?x?$LH?f?$LO?K?$KB?$KD@	; `string'
PUBLIC	??_C@_08LMHKBLHA@?$LL?$MA?$LE?Y?$LB?M?$KB?$KD@	; `string'
PUBLIC	??_C@_0BG@KDDPLIEA@?5?$KB?$NP?5?D?$LP?5?$LM?$KN?5?$LM?$LD?5?A?$KE?5?$KB?$NP?5?5?5@ ; `string'
PUBLIC	??_C@_0BF@NJPDCGDE@?5?5?5?5?5?5?5?A?$LO?5?5?$LH?a?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BC@BCIJAKBP@?5?5?5?5?H?$KO?5?5?5?5?$MA?N?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0BC@KGJCGBCP@?5?5?5?5?C?k?5?5?5?5?$LM?R?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_07DONLOGLK@?$CFd?5?$CI?$CFd?$CJ@		; `string'
PUBLIC	??_C@_03LEPPJAKI@MAX@				; `string'
PUBLIC	??_C@_0M@ODJBNPN@?$CFd?5?$CI?$CF?42f?$CF?$CF?$CJ@ ; `string'
PUBLIC	??_C@_04EAFHDMJK@?$CF?94d@			; `string'
PUBLIC	??_C@_04EFBICKBP@?$CF?93d@			; `string'
PUBLIC	??_C@_03GNABGMEE@100@				; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_02MMCGBDJK@0?$CF@				; `string'
PUBLIC	??_C@_03HIFDAEPP@?$CF?9d@			; `string'
PUBLIC	??_C@_03GLKEJMAA@?$CF4d@			; `string'
PUBLIC	??_C@_09COLCMPMP@?$CF4d?5?5?5?$CF4d@		; `string'
PUBLIC	??_C@_07JANMBDEO@?$CF4d?5?$CF4d@		; `string'
PUBLIC	??_C@_0CF@IJGAMOEE@?$FL?$CFs?$FN?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?T?5?5?5?5?5?5?5?$CFd@ ; `string'
PUBLIC	??_C@_0EG@CAIJDNGD@?$DP?i?M?$FL?$CFs?$FN?$MA?g?$LH?a?$MA?G?5?$LM?S?$LM?$LK?$MA?$LL?5?$LA?$KI?A?$KE?1?H?$KO?$MA?N?G@ ; `string'
PUBLIC	??_C@_0BC@HALJJKGM@?$MA?g?$LH?a?5?G?U?$LM?$LK?5?$LM?$LK?$LA?x?$MA?$LC?$AA@ ; `string'
PUBLIC	??_C@_0CH@BAIOACBP@?$FL?$CFs?$FN?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?T?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0CJ@JOENNLPN@?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?O?$LP?$KJ?$FL?$CFs?$FN?$LI?$KG?5?$LD?t?$MA?O@ ; `string'
PUBLIC	??_C@_0BB@PPGFHNAN@?$MA?g?$LH?a?G?U?$LM?$LK?5?$LM?$LK?$LA?x?$MA?$LC?$AA@ ; `string'
PUBLIC	??_C@_05GGHFNJMD@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_0CG@KBOLHIJH@?$LL?s?A?$KB?$LB?b?$LE?I?$MA?L?$LP?k?$LN?C?0?5?F?d?F?$KO?$LI?$KG?$LK?$KP?$LA?f?G?R?$LM?v?$LO@ ; `string'
PUBLIC	??_C@_0BC@GNJPGDIA@?$HLpet?$DN?$CFd?0str?$DN?$FL?$CFs?$FN?$HN@ ; `string'
PUBLIC	??_C@_06EFALBHEL@R?$HMP?$HM?91@			; `string'
PUBLIC	??_C@_0BC@ILNBPEIE@?F?d?F?$KO?$LI?$KG?5?$LJ?v?$LI?$LB?$LB?n?$LP?d?$KD?$LP@ ; `string'
PUBLIC	??_C@_05EMGOANLP@?$CF?916s@			; `string'
PUBLIC	??_C@_0BC@PMPFNJLM@?$CF3d?5?5?5?5?5?$CF4d?5?5?5?$CF4d@ ; `string'
PUBLIC	??_C@_0BB@OLBLGPHG@?F?d?F?$KO?$LA?$KB?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ ; `string'
PUBLIC	??_C@_09CFBKFGII@?$CFs?5?C?T?$LP?$LF?$KD?$KB@	; `string'
PUBLIC	??_C@_06BLADCOKI@?$FLLOCK?$FN@			; `string'
PUBLIC	??_C@_08DOKBNALB@?$CFs?5?$CF?916s@		; `string'
PUBLIC	??_C@_03GOOLIKIF@?$CF3d@			; `string'
PUBLIC	??_C@_0BA@MEIFLDBG@?$CFd?1?$CFd?5?5?$CI?$CF?42f?$CF?$CF?$CJ@ ; `string'
PUBLIC	??_C@_09NPOEHNBK@?$CF4d?5?1?5?$CF4d@		; `string'
PUBLIC	??_C@_04GFJLOHHD@?$CF?43f@			; `string'
PUBLIC	??_C@_02EOIDJNGE@?5?$CL@			; `string'
PUBLIC	??_C@_04HGGBINEM@?$CFs?$CFd@			; `string'
PUBLIC	??_C@_05JNOMDMDH@?$CF3d?$CF?$CF@		; `string'
PUBLIC	??_C@_0N@DBNACIMP@?5?5?5?5?5?5?5?$CF?922s@	; `string'
PUBLIC	??_C@_0BF@EOCHGIJI@?$LO?F?$MA?L?E?$NL?5?$MA?Z?$LF?$LP?5?$LA?c?D?$KB?$LB?b?$KB?$KD@ ; `string'
PUBLIC	??_C@_02DEECJACC@?p?P@				; `string'
PUBLIC	??_C@_04HECMHKAJ@?M?b?$NM?j@			; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP@				; `string'
PUBLIC	??_C@_02NNCIDFDN@?O?a@				; `string'
PUBLIC	??_C@_04CECPHKEL@?b?j?x?$KL@			; `string'
PUBLIC	??_C@_08FFKKHGPD@?k?$PN?$NM?W?1?$DP?K?$KD@	; `string'
PUBLIC	??_C@_02HHFHKOHM@?$DP?$DP@			; `string'
PUBLIC	??_C@_04BEMIHOKC@?Z?$LB?r?$LB@			; `string'
PUBLIC	??_C@_05MHFFLKOE@?$DP?c?s?$NN?$KM@		; `string'
PUBLIC	??_C@_08JLPLGDIB@?$NM?E?w?W?Z?$KK?y?$KB@	; `string'
PUBLIC	??_C@_05EGENBHF@?$PM?$NO?$OA?A?$DP@		; `string'
PUBLIC	??_C@_06GGKIIEAG@?w?a?$DP?$NN?$KI?$DP@		; `string'
PUBLIC	??_C@_05NCBNMKHJ@?w?a?$DP?$OA?$LE@		; `string'
PUBLIC	??_C@_08PPBNCICL@?l?i?Z?u?Z?$KK?y?$KB@		; `string'
PUBLIC	??_C@_02OEJDJEF@?b?j@				; `string'
PUBLIC	??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@		; `string'
PUBLIC	??_C@_04DKIAPBFG@?b?$KC?w?$NP@			; `string'
PUBLIC	??_C@_06KLOJBJDG@?$DP?Z?$KK?$DP?w?$NP@		; `string'
PUBLIC	??_C@_05HADHEFCA@?$DP?Z?$KK?J?E@		; `string'
PUBLIC	??_C@_0N@OJIDMKKD@?R?$LB?5?N?y?5?S?x?$KD?$LK?$CFs@ ; `string'
PUBLIC	??_C@_0BA@HANCGCKL@?T?$LD?N?$PN?$DP?z?$PO?$KD?$LK?$CFs?$CI?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0M@PEOHJCFP@?$NO?E?i?D?T?u?$DP?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0L@CFBINIFC@?R?$LB?N?y?S?x?$CI?$CFs?$CJ@	; `string'
PUBLIC	??_C@_04DMAFGKHI@?$LN?$LK?E?f@			; `string'
PUBLIC	??_C@_08OHLEHKNP@?$LD?$LL?$LB?$LI?$CI?$CFs?$CJ@	; `string'
PUBLIC	??_C@_0M@KBIHDIM@?$DP?$DP?$NM?t?J?$KG?$DP?$DP?$DP?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BO@FMLOPNNF@?E?$LO?$LN?B?F?j?$MA?e?$LK?q?$LI?$KG?5?B?x?$LP?k?G?R?$LM?v?$LO?x?$LO?n?$LP?d?$KD?$KB@ ; `string'
PUBLIC	??_C@_04KBAMDEME@?G?U?$LM?$LK@			; `string'
PUBLIC	??_C@_04JJOHPIH@?$LP?d?$LI?$KO@			; `string'
PUBLIC	??_C@_09JLDAGEJM@?A?$KE?$LH?C?1?A?$KE?A?$KG@	; `string'
PUBLIC	??_C@_04CENFCOIH@?A?$KE?$LB?$LD@		; `string'
PUBLIC	??_C@_04LECOJKED@?$LM?v?$LI?$KO@		; `string'
PUBLIC	??_C@_04BCAOMEHC@?$LA?$KN?H?$KN@		; `string'
PUBLIC	??_C@_04FNJBHMGB@?$CF10d@			; `string'
PUBLIC	??_C@_07HFNBMNBH@?$CF2d?1?$CF2d@		; `string'
PUBLIC	??_C@_0BB@OOMMIBOD@?A?V?$LM?z?$MA?L?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ ; `string'
PUBLIC	??_C@_06IKNDGEEE@?$LF?$LP?5?$CF3d@		; `string'
PUBLIC	??_C@_06FFJNECKA@?$LD?$LC?5?$CF3d@		; `string'
PUBLIC	??_C@_0M@MELGFJCD@?A?$KE?$LH?I?$MA?G?5?$LL?g?$MA?Z@ ; `string'
PUBLIC	??_C@_0M@HLOAEAFL@?A?$KE?$LH?I?$MA?G?5?$LP?k?$MA?Z@ ; `string'
PUBLIC	??_C@_03GCLOGFGE@?$CF8d@			; `string'
PUBLIC	??_C@_0P@KLBINAOA@?A?$KE?$LH?I?5?$LM?R?H?$KP?5?$LP?k?$LF?$LF@ ; `string'
PUBLIC	??_C@_03GPCJOALC@?$CF2d@			; `string'
PUBLIC	??_C@_0DB@DLDGKHKC@?$LA?E?$LH?$KB?A?$NP?$MA?N?5?F?d?F?$KO?$LE?B?5?F?d?F?$KO?$LI?$NO?$MA?O?$LB?b?$LE?I?$MA?$LL?5@ ; `string'
PUBLIC	??_C@_0BB@JGMBHNPP@?5?5?$MA?O?5?$LJ?$NN?5?$LI?$NO?5?$MA?O?5?5?5@ ; `string'
PUBLIC	??_C@_0BB@HHJMAEP@?5?5?F?d?5?F?$KO?5?$LI?$NO?5?$MA?O?5?5?5@ ; `string'
PUBLIC	??_C@_0BL@GCLEBMEI@?D?$KD?$LB?$LI?$LA?$KB?5?A?$KC?$LM?S?G?X?$MA?V?A?v?5?$LO?J?$LO?F?$LP?d?$KD?$KB@ ; `string'
PUBLIC	??_C@_0M@IEFMJAKN@?$LO?F?$MA?L?E?$NL?5?$LP?O?$LM?$LK@ ; `string'
PUBLIC	??_C@_05GEIIADAH@LvUp?$CB@			; `string'
PUBLIC	??_C@_08EEKBPDLC@Exp?5?$CF?$CL5d@		; `string'
PUBLIC	??_C@_08EFGDJJIF@Exp?5?$CF?$CL4d@		; `string'
PUBLIC	??_C@_09MBHBIIFC@Exp?5?5?5?5?$CL0@		; `string'
PUBLIC	??_C@_0M@OKFINFEF@?5?5?$LO?F?$MA?L?E?$NL?5?$KD?$LK@ ; `string'
PUBLIC	??_C@_0BN@DBCJKIIM@?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LO?r?A?v?5?$LI?x?G?O?$LP?$LE?$LN?$MA?$LE?O?$LE?Y?$KB?$KD@ ; `string'
PUBLIC	??_C@_0O@JBEDPFPL@?5?$KD?D?5?5?$KD?P?5?5?$CF?$CL8d@ ; `string'
PUBLIC	??_C@_0N@EILMFHPP@?5?G?U?5?5?$LA?h?5?5?$CF8d@	; `string'
PUBLIC	??_C@_07BMJINPJG@W?$HM?$CFs?$HM?$CFs@		; `string'
PUBLIC	??_C@_0BA@PCKDKFGL@T?$HM?$CFs?$HM?$CFs?$HMG?$HM?$CFd?$HM?$CFd@ ; `string'
PUBLIC	??_C@_0BL@IIOLHDHO@?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs@ ; `string'
PUBLIC	??_C@_0BC@OKAJJOLE@T?$HM?$CFs?$HM?$CFs?$HMP?$HM3?$HM?$CFd?$HM?$CFs@ ; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_01JPJNBJEM@I@				; `string'
PUBLIC	??_C@_03EPCHICDI@x?$CFd@			; `string'
PUBLIC	??_C@_01EJNLAFE@P@				; `string'
PUBLIC	??_C@_04LIFAFMCE@?$FL?$CFs?$FN@			; `string'
PUBLIC	??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@		; `string'
PUBLIC	??_C@_06LBBHKEFA@1?5?$LE?$NM?$LA?h@		; `string'
PUBLIC	??_C@_06IAPPLOMN@2?5?$LE?$NM?$LA?h@		; `string'
PUBLIC	??_C@_04IIECJNKD@?$MA?$LG?5?$DP@		; `string'
PUBLIC	??_C@_01BBODEMC@G@				; `string'
PUBLIC	??_C@_05INGMOBLN@?$LN?$LK?5?E?f@		; `string'
PUBLIC	??_C@_04PABHPHAJ@Gold@				; `string'
PUBLIC	??_C@_02GPECMEKF@?$FL?$FN@			; `string'
PUBLIC	??_C@_04IAHOEAOA@?$MA?$LG?G?U@			; `string'
PUBLIC	??_C@_03GJOCCCFJ@?$CF7d@			; `string'
PUBLIC	??_C@_08KMGGBBNI@?$LA?E?$LH?$KB?$LB?$NN?$LO?W@	; `string'
PUBLIC	??_C@_0BA@BJIPOAAB@?$LL?s?$LE?k?$LJ?f?5?$LA?E?$LH?$KB?$LB?$NN?$LO?W@ ; `string'
PUBLIC	??_C@_08OEEBHAFG@?$LA?E?$LH?$KB?H?$KO?$MA?N@	; `string'
PUBLIC	??_C@_0O@ONPMCPGG@?C?V?A?$LO?5?$LA?E?$LH?$KB?H?$KO?$MA?N@ ; `string'
PUBLIC	??_C@_0P@FBIHNOAG@T?$HM?$CFs?$HM?$CFs?$HMI?$HM1?$HM?$CFd@ ; `string'
PUBLIC	??_C@_0L@GEIMNGGC@?$MA?N?$LD?$LL?$LH?B?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_04DHBICLIK@?$CFd?H?$LI@			; `string'
PUBLIC	??_C@_08PECEDIMI@?$MA?$LG?G?U?$CFd?H?$LI@	; `string'
PUBLIC	??_C@_06OJHGLDPL@?$CInull?$CJ@			; `string'
PUBLIC	??_C@_0L@GPPMEBMP@?$MA?N?$LD?$LL?$LH?B?$KD?$LK?$CFs@ ; `string'
PUBLIC	??_C@_06DJMKDILO@B?$HMG?$HM?$CFd@		; `string'
PUBLIC	??_C@_01HIHLOKLC@1@				; `string'
PUBLIC	??_C@_01GAPBHFFA@T@				; `string'
PUBLIC	??_C@_0EP@MMMKPGBO@?$CFs?$LK?q?A?$KE?$LL?s?$MA?$PL?$MA?N?5?$LJ?f?$LN?D?$MA?$LI?$LH?N?5?$LA?E?$LH?$KB?5?$LB?$NN?$LO?W@ ; `string'
PUBLIC	??_C@_02PGHGPEOM@?91@				; `string'
PUBLIC	??_C@_01ELNMCGJD@W@				; `string'
PUBLIC	??_C@_0CH@OILGNOPA@?F?j?$MA?e?$LK?q?$LA?$KB?5?$MA?e?B?x?$LF?G?$MA?V?$MA?$LI?$LI?i?5?E?$LO?$LN?B?G?R?$LM?v?$LO@ ; `string'
PUBLIC	??_C@_06IMNEOPOC@R?$HMP?$HM?$CFd@		; `string'
PUBLIC	??_C@_0BI@CNEPNBEM@?5?$CF15s?5?$CF15s?5?5?$CF5d?5?5?$CF5d?5?5?5@ ; `string'
PUBLIC	??_C@_0DA@OCCOFDAC@?5?5?5?5?5?5?5?5?5?5?5?$MA?L?5?$LI?$KH?5?5?5?5?5?5?5?5?5?5?5?$LK?$LA?5?$LI@ ; `string'
PUBLIC	??_C@_0N@KMPIGJGM@?$CFs?5?$CFs?5?1T?$CFd?5?5@	; `string'
PUBLIC	??_C@_0CA@HADKCOHN@?C?$KE?$LD?N?5?$MA?L?$LI?$KH?$MA?$LL?5?$MA?T?$LH?B?G?O?$LN?C?$LB?b?5?$LJ?Y?$LG?x?$LE?O?$LE?Y@ ; `string'
PUBLIC	??_C@_02PACKEJLJ@B?$HM@				; `string'
PUBLIC	??_C@_01JBBJJEPG@p@				; `string'
PUBLIC	??_C@_0BE@HNIDOICG@?5?5?$CF16s?5?5?$CF16s?5?5?5?$CF2d?5@ ; `string'
PUBLIC	??_C@_0DB@BMHKFDJF@?5?5?5?5?5?5?5?5?5?5?C?$LM?$LD?N?$MA?L?$LI?$KH?5?5?5?5?5?5?5?5?5?5?F?D?F@ ; `string'
PUBLIC	??_C@_04DFGAHNIG@J?$HM?$CFd@			; `string'
PUBLIC	??_C@_0BH@EOCAOGMB@?5?5?$LL?u?$LH?N?$LP?n?5?C?$KE?F?C?$LJ?f?5?$LI?$LI?$LF?i?$LB?b@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0GC@JDIKCLBG@?C?$KE?F?C?5?$LJ?f?$MA?e?$MA?$LK?5?C?$KE?F?C?$LJ?f?$LP?$KB?$LM?$KN?5?$LD?$KK?$LA?$KF?5?$LM?v?5@ ; `string'
PUBLIC	??_C@_02PKLEGELD@L?$HM@				; `string'
PUBLIC	??_C@_0CB@CKMFLHCC@?$LE?g?$LN?E?$MA?$LK?5?$MA?L?$LJ?L?5?C?$KE?F?C?$LJ?f?$MA?$LL?5?$LG?$LA?$LD?$LF?$LN?$MA?$LE?O?$LE?Y@ ; `string'
PUBLIC	??_C@_04IAAFEDG@K?$HM?$CFd@			; `string'
PUBLIC	??_C@_04IHEAKBJG@M?$HM?$CFd@			; `string'
PUBLIC	??_C@_02PEKHDFAL@D?$HM@				; `string'
PUBLIC	??_C@_0M@HKAIMJJM@?$CFs?5?$LA?$KB?$MA?T?$LN?E?C?$LL@ ; `string'
PUBLIC	??_C@_06NKNMMFFA@A?$HM?$CFd?$HM1@		; `string'
PUBLIC	??_C@_06MDMHPEBB@A?$HM?$CFd?$HM0@		; `string'
PUBLIC	??_C@_08MMBFKAPF@?$FL?$LE?k?H?$KN?$FN?$CFs@	; `string'
PUBLIC	??_C@_0BN@GLJGCFGJ@?C?$KE?F?C?$LJ?f?$MA?L?5?$MA?L?$LJ?L?5?$LL?h?A?$KG?$LF?G?$LO?z?$LO?n?$LP?d?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BK@FOCEAPFH@?C?$KE?F?C?$LJ?f?$LP?$KB?$LM?$KN?5?$LA?$KN?E?p?$LF?G?$LO?z?$LO?n?$LP?d?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BO@IMBPEJAE@invalid?5array?$DMT?0?5N?$DO?5subscript@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f00000000000000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3faeb851eb851eb8
PUBLIC	__real@3fb1eb851eb851ec
PUBLIC	__real@3fb47ae147ae147b
PUBLIC	__real@3fb70a3d70a3d70a
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbeb851eb851eb8
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc70a3d70a3d70a
PUBLIC	__real@3fcae147ae147ae1
PUBLIC	__real@3fceb851eb851eb8
PUBLIC	__real@3fd147ae147ae148
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd70a3d70a3d70a
PUBLIC	__real@3fdae147ae147ae1
PUBLIC	__real@3fdeb851eb851eb8
PUBLIC	__real@3fe147ae147ae148
PUBLIC	__real@3fe947ae147ae148
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@4010000000000000
PUBLIC	__real@4012000000000000
PUBLIC	__real@4013000000000000
PUBLIC	__real@4013ccccc0000000
PUBLIC	__real@40149999a0000000
PUBLIC	__real@4015666660000000
PUBLIC	__real@4016333340000000
PUBLIC	__real@4017000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@42c80000
PUBLIC	__real@c014000000000000
PUBLIC	__static@8ffde64a243da3c9520e7b1d47f2acf5790ae3ce89c9834a2190211969353309
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@00000002000000020000000200000002
PUBLIC	__xmm@00000009000000090000000900000009
PUBLIC	__xmm@0000000a0000000a0000000a0000000a
PUBLIC	__xmm@0000000b0000000b0000000b0000000b
PUBLIC	__xmm@0000000c0000000c0000000c0000000c
PUBLIC	__xmm@00006536000065e8000065e4000065e5
PUBLIC	__xmm@fffffffefffffffefffffffefffffffe
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	__errno:PROC
EXTRN	_strchr:PROC
EXTRN	_strstr:PROC
EXTRN	_strcat_s:PROC
EXTRN	_strncpy_s:PROC
EXTRN	_strncpy:PROC
EXTRN	_strtok:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	_rand:PROC
EXTRN	_atoi:PROC
EXTRN	_strtol:PROC
EXTRN	_itoa:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_fwrite:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	?ChangeProc2@@YAXH@Z:PROC			; ChangeProc2
EXTRN	?GetAction@@YAPAUaction@@EI@Z:PROC		; GetAction
EXTRN	?DeathAction@@YAXPAUaction@@@Z:PROC		; DeathAction
EXTRN	?GetPettblNo@@YAHH@Z:PROC			; GetPettblNo
EXTRN	?StockDispBuffer@@YAHHHEHH@Z:PROC		; StockDispBuffer
EXTRN	?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z:PROC		; StockDispBuffer??êÈöÇ
EXTRN	?StockBoxDispBuffer@@YAXHHHHEHH@Z:PROC		; StockBoxDispBuffer
EXTRN	?Rnd@@YAHHH@Z:PROC				; Rnd
EXTRN	?StockChatBufferLine@@YAXPADEH@Z:PROC		; StockChatBufferLine
EXTRN	?GetStrLastByte@@YAHPAD@Z:PROC			; GetStrLastByte
EXTRN	?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z:PROC	; GetKeyInputFocus
EXTRN	?KeyboardReturn@@YAXXZ:PROC			; KeyboardReturn
EXTRN	?LoadChatHistoryStr@@YAHXZ:PROC			; LoadChatHistoryStr
EXTRN	?StrToNowStrBuffer@@YAXPAD@Z:PROC		; StrToNowStrBuffer
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z:PROC	; StockFontBuffer2
EXTRN	?radar@@YAXPAUaction@@PAH1@Z:PROC		; radar
EXTRN	?gemini@@YAXPAUaction@@@Z:PROC			; gemini
EXTRN	?pattern@@YAHPAUaction@@HH@Z:PROC		; pattern
EXTRN	?GetImeString@@YAPADXZ:PROC			; GetImeString
EXTRN	?checkPcWalkFlag@@YAHXZ:PROC			; checkPcWalkFlag
EXTRN	?CHAR_getMaxHaveGold@@YAHXZ:PROC		; CHAR_getMaxHaveGold
EXTRN	?lssproto_SaMenu_send@@YAXHHHH@Z:PROC		; lssproto_SaMenu_send
EXTRN	?lssproto_petshopcall_send@@YAXH@Z:PROC		; lssproto_petshopcall_send
EXTRN	?lssproto_poolitemcall_send@@YAXH@Z:PROC	; lssproto_poolitemcall_send
EXTRN	?lssproto_ID_send@@YAXHHHHH@Z:PROC		; lssproto_ID_send
EXTRN	?lssproto_DI_send@@YAXHHHH@Z:PROC		; lssproto_DI_send
EXTRN	?lssproto_DG_send@@YAXHHHH@Z:PROC		; lssproto_DG_send
EXTRN	?lssproto_DP_send@@YAXHHHH@Z:PROC		; lssproto_DP_send
EXTRN	?lssproto_MI_send@@YAXHHH@Z:PROC		; lssproto_MI_send
EXTRN	?lssproto_MSG_send@@YAXHHPADH@Z:PROC		; lssproto_MSG_send
EXTRN	?lssproto_PMSG_send@@YAXHHHHPADH@Z:PROC		; lssproto_PMSG_send
EXTRN	?lssproto_DAB_send@@YAXHH@Z:PROC		; lssproto_DAB_send
EXTRN	?lssproto_KS_send@@YAXHH@Z:PROC			; lssproto_KS_send
EXTRN	?lssproto_SPET_send@@YAXHH@Z:PROC		; lssproto_SPET_send
EXTRN	?lssproto_MU_send@@YAXHHHHH@Z:PROC		; lssproto_MU_send
EXTRN	?lssproto_PS_send@@YAXHHHHPAD@Z:PROC		; lssproto_PS_send
EXTRN	?lssproto_SKUP_send@@YAXHH@Z:PROC		; lssproto_SKUP_send
EXTRN	?lssproto_CharLogout_send@@YAXHH@Z:PROC		; lssproto_CharLogout_send
EXTRN	?lssproto_TD_send@@YAXHPAD@Z:PROC		; lssproto_TD_send
EXTRN	?lssproto_FM_send@@YAXHPAD@Z:PROC		; lssproto_FM_send
EXTRN	?lssproto_PETST_send@@YAXHHH@Z:PROC		; lssproto_PETST_send
EXTRN	?lssproto_KTEAM_send@@YAXHH@Z:PROC		; lssproto_KTEAM_send
EXTRN	?lssproto_CHATROOM_send@@YAXHPAD@Z:PROC		; lssproto_CHATROOM_send
EXTRN	?lssproto_RESIST_send@@YAXHPAD@Z:PROC		; lssproto_RESIST_send
EXTRN	?lssproto_ALCHEPLUS_send@@YAXHPAD@Z:PROC	; lssproto_ALCHEPLUS_send
EXTRN	?lssproto_BATTLESKILL_send@@YAXHH@Z:PROC	; lssproto_BATTLESKILL_send
EXTRN	?lssproto_PetItemEquip_send@@YAXHHHHHH@Z:PROC	; lssproto_PetItemEquip_send
EXTRN	?lssproto_MAMMOTH_START_send@@YAXHH@Z:PROC	; lssproto_MAMMOTH_START_send
EXTRN	?old_lssproto_ID_send@@YAXHHHHH@Z:PROC		; old_lssproto_ID_send
EXTRN	?old_lssproto_DI_send@@YAXHHHH@Z:PROC		; old_lssproto_DI_send
EXTRN	?old_lssproto_DG_send@@YAXHHHH@Z:PROC		; old_lssproto_DG_send
EXTRN	?old_lssproto_MI_send@@YAXHHH@Z:PROC		; old_lssproto_MI_send
EXTRN	?old_lssproto_MSG_send@@YAXHHPADH@Z:PROC	; old_lssproto_MSG_send
EXTRN	?old_lssproto_PMSG_send@@YAXHHHHPADH@Z:PROC	; old_lssproto_PMSG_send
EXTRN	?old_lssproto_DAB_send@@YAXHH@Z:PROC		; old_lssproto_DAB_send
EXTRN	?old_lssproto_KS_send@@YAXHH@Z:PROC		; old_lssproto_KS_send
EXTRN	?old_lssproto_MU_send@@YAXHHHHH@Z:PROC		; old_lssproto_MU_send
EXTRN	?old_lssproto_PS_send@@YAXHHHHPAD@Z:PROC	; old_lssproto_PS_send
EXTRN	?old_lssproto_SKUP_send@@YAXHH@Z:PROC		; old_lssproto_SKUP_send
EXTRN	?old_lssproto_TD_send@@YAXHPAD@Z:PROC		; old_lssproto_TD_send
EXTRN	?old_lssproto_FM_send@@YAXHPAD@Z:PROC		; old_lssproto_FM_send
EXTRN	?saveUserSetting@@YAHXZ:PROC			; saveUserSetting
EXTRN	?play_se@@YAHHHH@Z:PROC				; play_se
EXTRN	?play_bgm@@YAHH@Z:PROC				; play_bgm
EXTRN	?bgm_volume_change@@YAXXZ:PROC			; bgm_volume_change
EXTRN	?set_gbm_pitch@@YAXXZ:PROC			; set_gbm_pitch
EXTRN	?stop_bgm@@YAXXZ:PROC				; stop_bgm
EXTRN	?_Xinvalid_argument@std@@YAXPBD@Z:PROC		; std::_Xinvalid_argument
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?chatStrSendForServer@@YAXPADH@Z:PROC		; chatStrSendForServer
EXTRN	?getStringToken@@YAHPADDHH0@Z:PROC		; getStringToken
EXTRN	?getIntegerToken@@YAHPADDH@Z:PROC		; getIntegerToken
EXTRN	?makeStringFromEscaped@@YAPADPAD@Z:PROC		; makeStringFromEscaped
EXTRN	?makeEscapeString@@YAPADPAD0H@Z:PROC		; makeEscapeString
EXTRN	?checkFieldMenuFlag@@YAHXZ:PROC			; checkFieldMenuFlag
EXTRN	?closeEtcSwitch@@YAXXZ:PROC			; closeEtcSwitch
EXTRN	?closeJoinChannelWN@@YAXXZ:PROC			; closeJoinChannelWN
EXTRN	?ecb_crypt@@YAHPAD0II@Z:PROC			; ecb_crypt
EXTRN	?setCharmManor@@YAXPAUaction@@H@Z:PROC		; setCharmManor
EXTRN	?setCharmTitle@@YAXPAUaction@@H@Z:PROC		; setCharmTitle
EXTRN	?setCharMind@@YAXPAUaction@@H@Z:PROC		; setCharMind
EXTRN	?Instance@PetData@@SAAAV1@XZ:PROC		; PetData::Instance
EXTRN	?Split@PetData@@QAE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z:PROC ; PetData::Split
EXTRN	?Instance@PetRanking@@SAAAV1@XZ:PROC		; PetRanking::Instance
EXTRN	?Init@PetRanking@@QAEXXZ:PROC			; PetRanking::Init
EXTRN	?Proc@PetRanking@@QAEXXZ:PROC			; PetRanking::Proc
EXTRN	?Check@PetRanking@@QAEHXZ:PROC			; PetRanking::Check
EXTRN	?SetCheck@PetRanking@@QAEXABH@Z:PROC		; PetRanking::SetCheck
EXTRN	?ShowBottomLineString@@YAXHPAD@Z:PROC		; ShowBottomLineString
EXTRN	?AI_CloseWnd@@YAXXZ:PROC			; AI_CloseWnd
EXTRN	?AI_OtherProc@@YAXXZ:PROC			; AI_OtherProc
EXTRN	?AI_SettingProc@@YAHXZ:PROC			; AI_SettingProc
EXTRN	?Initù«??Ï¢@@YAXXZ:PROC				; Initù«??Ï¢
EXTRN	?InitçÈê©???Ï¢@@YAXXZ:PROC			; InitçÈê©???Ï¢
EXTRN	?InitÎÃ??Ï¢@@YAXXZ:PROC				; InitÎÃ??Ï¢
EXTRN	?delAct??@@YAXXZ:PROC				; delAct??
EXTRN	?delActÎÃ?@@YAXXZ:PROC				; delActÎÃ?
EXTRN	?delActù«?@@YAXXZ:PROC				; delActù«?
EXTRN	?SaveChatData@@YAXPADD_N@Z:PROC			; SaveChatData
EXTRN	?getTextLength@@YAHPAD@Z:PROC			; getTextLength
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?DISPLACEMENT_X@@3HA:DWORD			; DISPLACEMENT_X
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?hWnd@@3PAUHWND__@@A:DWORD			; hWnd
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?gmsv@@3PAUgameserver@@A:BYTE			; gmsv
EXTRN	?gmgroup@@3PAUgamegroup@@A:BYTE			; gmgroup
EXTRN	?GameState@@3HA:DWORD				; GameState
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?SubProcNo@@3IA:DWORD				; SubProcNo
EXTRN	?joy_con@@3PAKA:QWORD				; joy_con
EXTRN	?joy_trg@@3PAKA:QWORD				; joy_trg
EXTRN	?joy_auto@@3PAKA:QWORD				; joy_auto
EXTRN	?p_party@@3PAPAUaction@@A:BYTE			; p_party
EXTRN	?pNowStrBuffer@@3PAUSTR_BUFFER@@A:DWORD		; pNowStrBuffer
EXTRN	?MyChatBuffer@@3USTR_BUFFER@@A:BYTE		; MyChatBuffer
EXTRN	?NowMaxChatLine@@3HA:DWORD			; NowMaxChatLine
EXTRN	?NowMaxVoice@@3HA:DWORD				; NowMaxVoice
EXTRN	?mouse@@3UMOUSE@@A:BYTE				; mouse
EXTRN	?HitFontNo@@3HA:DWORD				; HitFontNo
EXTRN	?HitDispNo@@3HA:DWORD				; HitDispNo
EXTRN	?OneLineInfoStr@@3PADA:BYTE			; OneLineInfoStr
EXTRN	?BoxColor@@3HA:DWORD				; BoxColor
EXTRN	?CG_FIELD_SKILL_PANEL@@3HA:DWORD		; CG_FIELD_SKILL_PANEL
EXTRN	?CG_FIELD_CHATROOM_PANEL@@3HA:DWORD		; CG_FIELD_CHATROOM_PANEL
EXTRN	?CG_TRADE_WND@@3HA:DWORD			; CG_TRADE_WND
EXTRN	?CG_TRADE_VIEWWND@@3HA:DWORD			; CG_TRADE_VIEWWND
EXTRN	?CG_WND_G_0@@3HA:DWORD				; CG_WND_G_0
EXTRN	?CG_PET_WND_VIEW@@3HA:DWORD			; CG_PET_WND_VIEW
EXTRN	?CG_NAME_CHANGE_WND@@3HA:DWORD			; CG_NAME_CHANGE_WND
EXTRN	?CG_ITEM_WND_1@@3HA:DWORD			; CG_ITEM_WND_1
EXTRN	?CG_JUJUTU_WND@@3HA:DWORD			; CG_JUJUTU_WND
EXTRN	?CG_ITEM_WND_SELECT_WND@@3HA:DWORD		; CG_ITEM_WND_SELECT_WND
EXTRN	?CG_STATUS_WND_GROUP_WND@@3HA:DWORD		; CG_STATUS_WND_GROUP_WND
EXTRN	?CG_MAP_WND@@3HA:DWORD				; CG_MAP_WND
EXTRN	?CG_MAIL_WND@@3HA:DWORD				; CG_MAIL_WND
EXTRN	?CG_MAIL_WND_SEND_WND@@3HA:DWORD		; CG_MAIL_WND_SEND_WND
EXTRN	?CG_MAIL_WND_PET_SEND_WND@@3HA:DWORD		; CG_MAIL_WND_PET_SEND_WND
EXTRN	?CG_MAIL_WND_HISTORY_WND@@3HA:DWORD		; CG_MAIL_WND_HISTORY_WND
EXTRN	?CG_CHAT_REGISTY_WND@@3HA:DWORD			; CG_CHAT_REGISTY_WND
EXTRN	?CG_COMMON_WIN_YORO@@3HA:DWORD			; CG_COMMON_WIN_YORO
EXTRN	?CG_PET_WAZA_WND@@3HA:DWORD			; CG_PET_WAZA_WND
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?selectPcNo@@3FA:WORD				; selectPcNo
EXTRN	?tradeStatus@@3FA:WORD				; tradeStatus
EXTRN	?magic@@3PAUMAGIC@@A:BYTE			; magic
EXTRN	?pet@@3PAUPET@@A:BYTE				; pet
EXTRN	?party@@3PAUPARTY@@A:BYTE			; party
EXTRN	?addressBook@@3PAUADDRESS_BOOK@@A:BYTE		; addressBook
EXTRN	?battleResultMsg@@3UBATTLE_RESULT_MSG@@A:BYTE	; battleResultMsg
EXTRN	?petSkill@@3PAY06UPET_SKILL@@A:BYTE		; petSkill
EXTRN	?profession_skill@@3PAUPROFESSION_SKILL@@A:BYTE	; profession_skill
EXTRN	?BattlePetStMenCnt@@3HA:DWORD			; BattlePetStMenCnt
EXTRN	?BattleResultWndFlag@@3HA:DWORD			; BattleResultWndFlag
EXTRN	?EncountFlag@@3HA:DWORD				; EncountFlag
EXTRN	?NoHelpFlag@@3HA:DWORD				; NoHelpFlag
EXTRN	?NoEscFlag@@3HA:DWORD				; NoEscFlag
EXTRN	?bNewServer@@3HA:DWORD				; bNewServer
EXTRN	?sockfd@@3IA:DWORD				; sockfd
EXTRN	?disconnectServerFlag@@3HA:DWORD		; disconnectServerFlag
EXTRN	?stereo_flg@@3HA:DWORD				; stereo_flg
EXTRN	?t_music_se_volume@@3HA:DWORD			; t_music_se_volume
EXTRN	?t_music_bgm_volume@@3HA:DWORD			; t_music_bgm_volume
EXTRN	?t_music_bgm_no@@3HA:DWORD			; t_music_bgm_no
EXTRN	?t_music_bgm_pitch@@3PADA:BYTE			; t_music_bgm_pitch
EXTRN	?map_bgm_no@@3HA:DWORD				; map_bgm_no
EXTRN	??ëå??@@3HA:DWORD				; ?ëå??
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?nowFloorName@@3PADA:BYTE			; nowFloorName
EXTRN	?nowGx@@3HA:DWORD				; nowGx
EXTRN	?nowGy@@3HA:DWORD				; nowGy
EXTRN	?eventWarpSendFlag@@3FA:WORD			; eventWarpSendFlag
EXTRN	?chatRoomBtn@@3FA:WORD				; chatRoomBtn
EXTRN	?SelRoomBtn@@3FA:WORD				; SelRoomBtn
EXTRN	?actBtn@@3FA:WORD				; actBtn
EXTRN	?menuBtn@@3FA:WORD				; menuBtn
EXTRN	?mailLamp@@3FA:WORD				; mailLamp
EXTRN	?g_bTradesystemOpen@@3_NA:BYTE			; g_bTradesystemOpen
EXTRN	?PcLanded@@3ULanded@@A:BYTE			; PcLanded
EXTRN	?crs_change_tbl@@3PAEA:BYTE			; crs_change_tbl
EXTRN	?crs_change_tbl2@@3PAEA:BYTE			; crs_change_tbl2
EXTRN	?crs_bound_tbl@@3PAY0CA@EA:BYTE			; crs_bound_tbl
EXTRN	?sStreetVendorBuyBtn@@3FA:WORD			; sStreetVendorBuyBtn
EXTRN	?BattleSkill@@3PAHA:BYTE			; BattleSkill
EXTRN	?AssitSkill@@3PAHA:BYTE				; AssitSkill
EXTRN	?AdvanceSkill@@3PAHA:BYTE			; AdvanceSkill
EXTRN	?delFlag@@3_NA:BYTE				; delFlag
EXTRN	?flag22@@3_NA:BYTE				; flag22
EXTRN	?szUser@@3PADA:BYTE				; szUser
EXTRN	?í»?Ôô?ãÀÜú??@@3HA:DWORD			; í»?Ôô?ãÀÜú??
EXTRN	?ãÀÜúñìÔô??@@3HA:DWORD				; ãÀÜúñìÔô??
EXTRN	?ãÀÜúñìÔôùâ?@@3HA:DWORD				; ãÀÜúñìÔôùâ?
EXTRN	?ãÀÜúñì?Ôô??_1@@3HA:DWORD			; ãÀÜúñì?Ôô??_1
EXTRN	?AI_Other_State@@3HA:DWORD			; AI_Other_State
EXTRN	?AI_State@@3HA:DWORD				; AI_State
EXTRN	?wonflag@@3HA:DWORD				; wonflag
EXTRN	?wonflag@@3HA:DWORD				; wonflag
EXTRN	?wonflag@@3HA:DWORD				; wonflag
EXTRN	?AI_State@@3HA:DWORD				; AI_State
EXTRN	?fastWalkFlag@@3HA:DWORD			; fastWalkFlag
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?â³?äÎ?ßãìÚ@@3PAHA DD 05H DUP (?)			; â³?äÎ?ßãìÚ
?Ô³Îý?Ê¥äÎ?@@3HA DD 01H DUP (?)				; Ô³Îý?Ê¥äÎ?
?systemWndFontNo@@3PAHA DD 028H DUP (?)			; systemWndFontNo
?mapWndNo@@3IA DD 01H DUP (?)				; mapWndNo
?statusWndFontNo@@3PAHA DD 014H DUP (?)			; statusWndFontNo
?statusWndBtnFlag@@3PAHA DD 014H DUP (?)		; statusWndBtnFlag
?statusWndFontNoExt@@3PAHA DD 0100H DUP (?)		; statusWndFontNoExt
?statusWndNo@@3IA DD 01H DUP (?)			; statusWndNo
?tradeWndFontNo@@3PAHA DD 016H DUP (?)			; tradeWndFontNo
?tradeWndBtnFlag@@3PAHA DD 016H DUP (?)			; tradeWndBtnFlag
?tradeWndNo@@3IA DD 01H DUP (?)				; tradeWndNo
?opp_name@@3PADA DB 080H DUP (?)			; opp_name
?trade_command@@3PADA DB 080H DUP (?)			; trade_command
?trade_kind@@3PADA DB 080H DUP (?)			; trade_kind
?opp_showindex@@3HA DD 01H DUP (?)			; opp_showindex
?opp_goldmount@@3PADA DB 0400H DUP (?)			; opp_goldmount
?opp_itemgraph@@3PADA DB 0400H DUP (?)			; opp_itemgraph
?opp_itemname@@3PADA DB 0400H DUP (?)			; opp_itemname
?opp_itemeffect@@3PADA DB 0400H DUP (?)			; opp_itemeffect
?opp_itemindex@@3PADA DB 0400H DUP (?)			; opp_itemindex
?opp_itemdamage@@3PADA DB 0400H DUP (?)			; opp_itemdamage
?opp_item@@3PAUshowitem@@A DB 07080H DUP (?)		; opp_item
?opp_pet@@3PAUshowpet@@A DB 04164H DUP (?)		; opp_pet
?SecondActPet@@3PAUaction@@A DD 01H DUP (?)		; SecondActPet
?SecondtradeWndFontNo@@3PAHA DD 06H DUP (?)		; SecondtradeWndFontNo
?tradePet@@3PAUPET@@A DB 016f0H DUP (?)			; tradePet
?g_bPetItemWndFlag@@3_NA DB 01H DUP (?)			; g_bPetItemWndFlag
	ALIGN	4

?pActPet3@@3PAUaction@@A DD 01H DUP (?)			; pActPet3
?pActPet4@@3PAUaction@@A DD 01H DUP (?)			; pActPet4
?pActPet5@@3PAUaction@@A DD 01H DUP (?)			; pActPet5
?tradeList@@3PAUtradelist@@A DB 08508H DUP (?)		; tradeList
?bankGold@@3HA DD 01H DUP (?)				; bankGold
?bankWndFontNo@@3PAHA DD 016H DUP (?)			; bankWndFontNo
?bankWndBtnFlag@@3PAHA DD 016H DUP (?)			; bankWndBtnFlag
?cashGold@@3HA DD 01H DUP (?)				; cashGold
?totalGold@@3HA DD 01H DUP (?)				; totalGold
?bankGoldInc@@3HA DD 01H DUP (?)			; bankGoldInc
?bankGoldCnt@@3HA DD 01H DUP (?)			; bankGoldCnt
?ChatRoomBtn@@3PAHA DD 010H DUP (?)			; ChatRoomBtn
?petWndFontNo@@3PAHA DD 016H DUP (?)			; petWndFontNo
?petWndBtnFlag@@3PAHA DD 016H DUP (?)			; petWndBtnFlag
?petWndNo@@3IA DD 01H DUP (?)				; petWndNo
?pActPet@@3PAUaction@@A DD 01H DUP (?)			; pActPet
?itemWndFontNo@@3PAHA DD 028H DUP (?)			; itemWndFontNo
?itemWndBtnFlag@@3PAHA DD 028H DUP (?)			; itemWndBtnFlag
?itemWndBtnBag@@3PAHA DD 03H DUP (?)			; itemWndBtnBag
?itemWndNo@@3IA DD 01H DUP (?)				; itemWndNo
?itemWndDropGold@@3HA DD 01H DUP (?)			; itemWndDropGold
?itemWndDropGoldInc@@3HA DD 01H DUP (?)			; itemWndDropGoldInc
?itemWndDropGoldCnt@@3HA DD 01H DUP (?)			; itemWndDropGoldCnt
?tradeWndDropGold@@3HA DD 01H DUP (?)			; tradeWndDropGold
?tradeWndDropGoldInc@@3HA DD 01H DUP (?)		; tradeWndDropGoldInc
?tradeWndDropGoldCnt@@3HA DD 01H DUP (?)		; tradeWndDropGoldCnt
?tradeWndDropGoldSend@@3HA DD 01H DUP (?)		; tradeWndDropGoldSend
?tradeWndDropGoldGet@@3HA DD 01H DUP (?)		; tradeWndDropGoldGet
?nSelectPet@@3HA DD 01H DUP (?)				; nSelectPet
?pActPet2@@3PAUaction@@A DD 01H DUP (?)			; pActPet2
?ItemUseTime@@3IA DD 01H DUP (?)			; ItemUseTime
?mailWndFontNo@@3PAHA DD 028H DUP (?)			; mailWndFontNo
?mailWndBtnFlag@@3PAHA DD 028H DUP (?)			; mailWndBtnFlag
?mailWndNo@@3W4MAIL_WND_TYPE@@A DD 01H DUP (?)		; mailWndNo
?mailWndNoBak@@3W4MAIL_WND_TYPE@@A DD 01H DUP (?)	; mailWndNoBak
?mailViewWndPageNo@@3HA DD 01H DUP (?)			; mailViewWndPageNo
?mailSendWndPageNo@@3HA DD 01H DUP (?)			; mailSendWndPageNo
?mailPetSendWndPageNo@@3HA DD 01H DUP (?)		; mailPetSendWndPageNo
?mailItemNo@@3HA DD 01H DUP (?)				; mailItemNo
?mailWndSendFlag@@3PAHA DD 050H DUP (?)			; mailWndSendFlag
?mailHistoryWndNowPageNo@@3HA DD 01H DUP (?)		; mailHistoryWndNowPageNo
?albumWndFontNo@@3PAHA DD 014H DUP (?)			; albumWndFontNo
?albumWndNo@@3IA DD 01H DUP (?)				; albumWndNo
?taskBarFontNo@@3PAHA DD 08H DUP (?)			; taskBarFontNo
?taskBarY@@3HA DD 01H DUP (?)				; taskBarY
_BSS	ENDS
;	COMDAT ?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
_BSS	SEGMENT
?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA DD 01H DUP (?) ; `í»?Ôô??Ï¢üÞ?'::`2'::Û°ú¾?Ï¢ãÀÜúöè?
_BSS	ENDS
;	COMDAT ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA
_BSS	SEGMENT
?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA DD 0fH DUP (?)	; `í»?Ôô??Ï¢üÞ?'::`2'::btnId
_BSS	ENDS
;	COMDAT ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA
_BSS	SEGMENT
?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA DD 0fH DUP (?)	; `í»?Ôô??Ï¢üÞ?'::`2'::btnState
_BSS	ENDS
;	COMDAT ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
_BSS	SEGMENT
?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA DD 01H DUP (?)		; `í»?Ôô??Ï¢üÞ?'::`2'::x
_BSS	ENDS
;	COMDAT ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
_BSS	SEGMENT
?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA DD 01H DUP (?)		; `í»?Ôô??Ï¢üÞ?'::`2'::y
_BSS	ENDS
;	COMDAT ?dwPressTime@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4KA
_BSS	SEGMENT
?dwPressTime@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4KA DD 01H DUP (?)	; `í»?Ôô??Ï¢üÞ?'::`2'::dwPressTime
_BSS	ENDS
;	COMDAT ?stopBGMClicked@?NJ@??MenuProc@@YAXXZ@4HA
_BSS	SEGMENT
?stopBGMClicked@?NJ@??MenuProc@@YAXXZ@4HA DD 01H DUP (?) ; `MenuProc'::`217'::stopBGMClicked
_BSS	ENDS
;	COMDAT ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A
_BSS	SEGMENT
?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A DB 0cH DUP (?) ; `MenuProc'::`1080'::ridelist_
_BSS	ENDS
;	COMDAT ?$TSS0@?EDI@??MenuProc@@YAXXZ@4HA
_BSS	SEGMENT
?$TSS0@?EDI@??MenuProc@@YAXXZ@4HA DD 01H DUP (?)	; `MenuProc'::`1080'::$TSS0
_BSS	ENDS
;	COMDAT ?nowDelNo@?ILK@??MenuProc@@YAXXZ@4HA
_BSS	SEGMENT
?nowDelNo@?ILK@??MenuProc@@YAXXZ@4HA DD 01H DUP (?)	; `MenuProc'[::LK]::nowDelNo
_BSS	ENDS
;	COMDAT ?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA
_BSS	SEGMENT
?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA DD 01H DUP (?) ; `MenuProc'::`2908'::bViewPetEquip
_BSS	ENDS
;	COMDAT ?setRoomBtn@?1??setRoomName@@YAXXZ@4PAHA
_BSS	SEGMENT
?setRoomBtn@?1??setRoomName@@YAXXZ@4PAHA DD 02H DUP (?)	; `setRoomName'::`2'::setRoomBtn
_BSS	ENDS
;	COMDAT ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A
_BSS	SEGMENT
?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A DB 034H DUP (?)	; `Mammoth::Get'::`2'::i
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Get@Mammoth@@SAAAV2@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Get@Mammoth@@SAAAV2@XZ@4HA DD 01H DUP (?)	; `Mammoth::Get'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?LastTime@?1??Display@Mammoth@@QAEXXZ@4HA
_BSS	SEGMENT
?LastTime@?1??Display@Mammoth@@QAEXXZ@4HA DD 01H DUP (?) ; `Mammoth::Display'::`2'::LastTime
_BSS	ENDS
;	COMDAT ?Cursor@?1??Display@Mammoth@@QAEXXZ@4HA
_BSS	SEGMENT
?Cursor@?1??Display@Mammoth@@QAEXXZ@4HA DD 01H DUP (?)	; `Mammoth::Display'::`2'::Cursor
_BSS	ENDS
;	COMDAT ?buffer@?1??Display@Mammoth@@QAEXXZ@4PADA
_BSS	SEGMENT
?buffer@?1??Display@Mammoth@@QAEXXZ@4PADA DB 019H DUP (?) ; `Mammoth::Display'::`2'::buffer
_BSS	ENDS
;	COMDAT ?LastTIme@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA
_BSS	SEGMENT
?LastTIme@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA DD 01H DUP (?) ; `Mammoth::DisplayRewardList'::`2'::LastTIme
_BSS	ENDS
;	COMDAT ?i@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA
_BSS	SEGMENT
?i@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA DD 01H DUP (?) ; `Mammoth::DisplayRewardList'::`2'::i
_BSS	ENDS
CRT$XCU	SEGMENT
?taskBarY$initializer$@@3P6AXXZA DD FLAT:??__EtaskBarY@@YAXXZ ; taskBarY$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@fffffffefffffffefffffffefffffffe
CONST	SEGMENT
__xmm@fffffffefffffffefffffffefffffffe DB 0feH, 0ffH, 0ffH, 0ffH, 0feH, 0ffH
	DB	0ffH, 0ffH, 0feH, 0ffH, 0ffH, 0ffH, 0feH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@00006536000065e8000065e4000065e5
CONST	SEGMENT
__xmm@00006536000065e8000065e4000065e5 DB 0e5H, 'e', 00H, 00H, 0e4H, 'e', 00H
	DB	00H, 0e8H, 'e', 00H, 00H, '6e', 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0000000c0000000c0000000c0000000c
CONST	SEGMENT
__xmm@0000000c0000000c0000000c0000000c DB 0cH, 00H, 00H, 00H, 0cH, 00H, 00H
	DB	00H, 0cH, 00H, 00H, 00H, 0cH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0000000b0000000b0000000b0000000b
CONST	SEGMENT
__xmm@0000000b0000000b0000000b0000000b DB 0bH, 00H, 00H, 00H, 0bH, 00H, 00H
	DB	00H, 0bH, 00H, 00H, 00H, 0bH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0000000a0000000a0000000a0000000a
CONST	SEGMENT
__xmm@0000000a0000000a0000000a0000000a DB 0aH, 00H, 00H, 00H, 0aH, 00H, 00H
	DB	00H, 0aH, 00H, 00H, 00H, 0aH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000009000000090000000900000009
CONST	SEGMENT
__xmm@00000009000000090000000900000009 DB 09H, 00H, 00H, 00H, 09H, 00H, 00H
	DB	00H, 09H, 00H, 00H, 00H, 09H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000002000000020000000200000002
CONST	SEGMENT
__xmm@00000002000000020000000200000002 DB 02H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __static@8ffde64a243da3c9520e7b1d47f2acf5790ae3ce89c9834a2190211969353309
CONST	SEGMENT
__static@8ffde64a243da3c9520e7b1d47f2acf5790ae3ce89c9834a2190211969353309 DB 05H
	DB	0ffH, 01H, 00H, 085H, 0ffH, 01H, 00H, 088H, 0ffH, 01H, 00H, 08H
	DB	08aH, 01H, 00H, 0e1H, 09aH, 01H, 00H, 'E', 0ffH, 01H, 00H, 0caH
	DB	0feH, 01H, 00H, 'X', 0ffH, 01H, 00H, 010H, 0fdH, 01H, 00H, 0f1H
	DB	089H, 01H, 00H, 0f2H, 0feH, 01H, 00H, 0efH, 0d0H, 01H, 00H, 's'
	DB	08fH, 01H, 00H, 0ceH, 093H, 01H, 00H, 016H, 088H, 01H, 00H, 016H
	DB	088H, 01H, 00H, 016H, 088H, 01H, 00H, 0a0H, 09bH, 01H, 00H, 0a1H
	DB	09bH, 01H, 00H, 0a2H, 09bH, 01H, 00H, 0a3H, 09bH, 01H, 00H, 0a4H
	DB	09bH, 01H, 00H, 0a5H, 09bH, 01H, 00H, 0a6H, 09bH, 01H, 00H, 0a7H
	DB	09bH, 01H, 00H, 0a8H, 09bH, 01H, 00H, 0a9H, 09bH, 01H, 00H, 0aaH
	DB	09bH, 01H, 00H, 0abH, 09bH, 01H, 00H, 0b1H, 09bH, 01H, 00H, 0b0H
	DB	09bH, 01H, 00H, 0aeH, 09bH, 01H, 00H, 0afH, 09bH, 01H, 00H, 0acH
	DB	09bH, 01H, 00H, 0adH, 09bH, 01H, 00H, 0fcH, 087H, 01H, 00H, 'J'
	DB	09cH, 01H, 00H, 'K', 09cH, 01H, 00H, 'L', 09cH, 01H, 00H, 'M', 09cH
	DB	01H, 00H, 'N', 09cH, 01H, 00H, 'O', 09cH, 01H, 00H, 'P', 09cH, 01H
	DB	00H, 'Q', 09cH, 01H, 00H, 'R', 09cH, 01H, 00H, 'S', 09cH, 01H, 00H
	DB	'T', 09cH, 01H, 00H, 'U', 09cH, 01H, 00H, 'V', 09cH, 01H, 00H, 'W'
	DB	09cH, 01H, 00H, 'X', 09cH, 01H, 00H, 'Y', 09cH, 01H, 00H, 'Z', 09cH
	DB	01H, 00H, 'S', 0aeH, 01H, 00H, 0aH, 088H, 01H, 00H, 0d4H, 09bH
	DB	01H, 00H, 0d5H, 09bH, 01H, 00H, 0d6H, 09bH, 01H, 00H, 0d7H, 09bH
	DB	01H, 00H, 0d8H, 09bH, 01H, 00H, 0d9H, 09bH, 01H, 00H, 0daH, 09bH
	DB	01H, 00H, 0dbH, 09bH, 01H, 00H, 0dcH, 09bH, 01H, 00H, 0ddH, 09bH
	DB	01H, 00H, 0deH, 09bH, 01H, 00H, 0dfH, 09bH, 01H, 00H, 0e0H, 09bH
	DB	01H, 00H, 0e1H, 09bH, 01H, 00H, 0e2H, 09bH, 01H, 00H, 0e3H, 09bH
	DB	01H, 00H, 0e4H, 09bH, 01H, 00H, 0e5H, 09bH, 01H, 00H, 0d3H, 087H
	DB	01H, 00H, 08eH, 09bH, 01H, 00H, 08fH, 09bH, 01H, 00H, 090H, 09bH
	DB	01H, 00H, 091H, 09bH, 01H, 00H, 092H, 09bH, 01H, 00H, 093H, 09bH
	DB	01H, 00H, 094H, 09bH, 01H, 00H, 095H, 09bH, 01H, 00H, 096H, 09bH
	DB	01H, 00H, 097H, 09bH, 01H, 00H, 098H, 09bH, 01H, 00H, 099H, 09bH
	DB	01H, 00H, 09aH, 09bH, 01H, 00H, 09bH, 09bH, 01H, 00H, 09cH, 09bH
	DB	01H, 00H, 09dH, 09bH, 01H, 00H, 09eH, 09bH, 01H, 00H, 09fH, 09bH
	DB	01H, 00H, 0b7H, 087H, 01H, 00H, 0f8H, 09bH, 01H, 00H, 0f9H, 09bH
	DB	01H, 00H, 0faH, 09bH, 01H, 00H, 0fbH, 09bH, 01H, 00H, 0fcH, 09bH
	DB	01H, 00H, 0fdH, 09bH, 01H, 00H, 0feH, 09bH, 01H, 00H, 0ffH, 09bH
	DB	01H, 00H, 00H, 09cH, 01H, 00H, 01H, 09cH, 01H, 00H, 02H, 09cH, 01H
	DB	00H, 03H, 09cH, 01H, 00H, 04H, 09cH, 01H, 00H, 05H, 09cH, 01H, 00H
	DB	06H, 09cH, 01H, 00H, 07H, 09cH, 01H, 00H, 08H, 09cH, 01H, 00H, 09H
	DB	09cH, 01H, 00H, 014H, 088H, 01H, 00H, 090H, 08aH, 01H, 00H, 09aH
	DB	08aH, 01H, 00H, 0a4H, 08aH, 01H, 00H, 0aeH, 08aH, 01H, 00H, 0b8H
	DB	08aH, 01H, 00H, 0c2H, 08aH, 01H, 00H, 0ccH, 08aH, 01H, 00H, 0d6H
	DB	08aH, 01H, 00H, 0e0H, 08aH, 01H, 00H, 0eaH, 08aH, 01H, 00H, 0f4H
	DB	08aH, 01H, 00H, 0feH, 08aH, 01H, 00H, 0feH, 08aH, 01H, 00H, 0feH
	DB	08aH, 01H, 00H, 0feH, 08aH, 01H, 00H, 0feH, 08aH, 01H, 00H, 0feH
	DB	08aH, 01H, 00H, 0feH, 08aH, 01H, 00H, 015H, 088H, 01H, 00H, 091H
	DB	08aH, 01H, 00H, 09bH, 08aH, 01H, 00H, 0a5H, 08aH, 01H, 00H, 0afH
	DB	08aH, 01H, 00H, 0b9H, 08aH, 01H, 00H, 0c3H, 08aH, 01H, 00H, 0cdH
	DB	08aH, 01H, 00H, 0d7H, 08aH, 01H, 00H, 0e1H, 08aH, 01H, 00H, 0ebH
	DB	08aH, 01H, 00H, 0f5H, 08aH, 01H, 00H, 0ffH, 08aH, 01H, 00H, 'M'
	DB	09aH, 01H, 00H, 'L', 09aH, 01H, 00H, 'J', 09aH, 01H, 00H, 'K', 09aH
	DB	01H, 00H, 'K', 09aH, 01H, 00H, 'K', 09aH, 01H, 00H, 0e1H, 09aH
	DB	01H, 00H, 0e2H, 09aH, 01H, 00H, 0e3H, 09aH, 01H, 00H, 0e4H, 09aH
	DB	01H, 00H, 0e5H, 09aH, 01H, 00H, 0e6H, 09aH, 01H, 00H, 0e7H, 09aH
	DB	01H, 00H, 0e8H, 09aH, 01H, 00H, 0e9H, 09aH, 01H, 00H, 0eaH, 09aH
	DB	01H, 00H, 0ebH, 09aH, 01H, 00H, 0ecH, 09aH, 01H, 00H, 0edH, 09aH
	DB	01H, 00H, 0f3H, 09aH, 01H, 00H, 0f2H, 09aH, 01H, 00H, 0f0H, 09aH
	DB	01H, 00H, 0f1H, 09aH, 01H, 00H, 0eeH, 09aH, 01H, 00H, 0efH, 09aH
	DB	01H, 00H, 'i', 09bH, 01H, 00H, 'j', 09bH, 01H, 00H, 'k', 09bH, 01H
	DB	00H, 'l', 09bH, 01H, 00H, 'm', 09bH, 01H, 00H, 'n', 09bH, 01H, 00H
	DB	'o', 09bH, 01H, 00H, 'o', 09bH, 01H, 00H, 'o', 09bH, 01H, 00H, 'o'
	DB	09bH, 01H, 00H, 'o', 09bH, 01H, 00H, 'o', 09bH, 01H, 00H, 'o', 09bH
	DB	01H, 00H, 's', 09bH, 01H, 00H, 'o', 09bH, 01H, 00H, 'o', 09bH, 01H
	DB	00H, 'r', 09bH, 01H, 00H, 'p', 09bH, 01H, 00H, 'q', 09bH, 01H, 00H
	DB	013H, 088H, 01H, 00H, '(', 09aH, 01H, 00H, ')', 09aH, 01H, 00H
	DB	'*', 09aH, 01H, 00H, '*', 09aH, 01H, 00H, '*', 09aH, 01H, 00H, '*'
	DB	09aH, 01H, 00H, '+', 09aH, 01H, 00H, '*', 09aH, 01H, 00H, '*', 09aH
	DB	01H, 00H, '*', 09aH, 01H, 00H, '*', 09aH, 01H, 00H, '*', 09aH, 01H
	DB	00H, '*', 09aH, 01H, 00H, '*', 09aH, 01H, 00H, '*', 09aH, 01H, 00H
	DB	'*', 09aH, 01H, 00H, '-', 09aH, 01H, 00H, ',', 09aH, 01H, 00H, 098H
	DB	09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H
	DB	09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H
	DB	09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H
	DB	09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H
	DB	09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H
	DB	09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 099H, 09aH, 01H, 00H, 09aH
	DB	09aH, 01H, 00H, 'x', 08eH, 01H, 00H, '~', 09aH, 01H, 00H, '~', 09aH
	DB	01H, 00H, '~', 09aH, 01H, 00H, '~', 09aH, 01H, 00H, '~', 09aH, 01H
	DB	00H, '~', 09aH, 01H, 00H, '~', 09aH, 01H, 00H, '~', 09aH, 01H, 00H
	DB	'~', 09aH, 01H, 00H, '~', 09aH, 01H, 00H, 07fH, 09aH, 01H, 00H
	DB	'~', 09aH, 01H, 00H, '~', 09aH, 01H, 00H, '~', 09aH, 01H, 00H, '~'
	DB	09aH, 01H, 00H, '~', 09aH, 01H, 00H, '~', 09aH, 01H, 00H, '~', 09aH
	DB	01H, 00H, 08cH, 09aH, 01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH
	DB	01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH
	DB	01H, 00H, 08dH, 09aH, 01H, 00H, 08eH, 09aH, 01H, 00H, 08dH, 09aH
	DB	01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH
	DB	01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH
	DB	01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH, 01H, 00H, 08dH, 09aH
	DB	01H, 00H, 08dH, 09aH, 01H, 00H, 082H, 08eH, 01H, 00H, 0a1H, 09aH
	DB	01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH
	DB	01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH
	DB	01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH
	DB	01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH
	DB	01H, 00H, 0a2H, 09aH, 01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH
	DB	01H, 00H, 0a1H, 09aH, 01H, 00H, 0a1H, 09aH, 01H, 00H, 'v', 08eH
	DB	01H, 00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H
	DB	00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H, 00H
	DB	'x', 09aH, 01H, 00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H, 00H, 'x'
	DB	09aH, 01H, 00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H, 00H, 'x', 09aH
	DB	01H, 00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H
	DB	00H, 'x', 09aH, 01H, 00H, 'x', 09aH, 01H, 00H, 'w', 08eH, 01H, 00H
	DB	'{', 09aH, 01H, 00H, '{', 09aH, 01H, 00H, '{', 09aH, 01H, 00H, '{'
	DB	09aH, 01H, 00H, '{', 09aH, 01H, 00H, '{', 09aH, 01H, 00H, '{', 09aH
	DB	01H, 00H, '{', 09aH, 01H, 00H, '{', 09aH, 01H, 00H, '{', 09aH, 01H
	DB	00H, '{', 09aH, 01H, 00H, '{', 09aH, 01H, 00H, '{', 09aH, 01H, 00H
	DB	'{', 09aH, 01H, 00H, '{', 09aH, 01H, 00H, '{', 09aH, 01H, 00H, '{'
	DB	09aH, 01H, 00H, '{', 09aH, 01H, 00H, 01eH, 08fH, 01H, 00H, 0a6H
	DB	09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H
	DB	09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H
	DB	09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H
	DB	09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a7H, 09aH, 01H, 00H, 0a6H
	DB	09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H
	DB	09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0a6H, 09aH, 01H, 00H, 0cdH
	DB	09aH, 01H, 00H, 0ceH, 09aH, 01H, 00H, 0cfH, 09aH, 01H, 00H, 0d0H
	DB	09aH, 01H, 00H, 0d1H, 09aH, 01H, 00H, 0d2H, 09aH, 01H, 00H, 0d3H
	DB	09aH, 01H, 00H, 0d4H, 09aH, 01H, 00H, 0d5H, 09aH, 01H, 00H, 0d6H
	DB	09aH, 01H, 00H, 0d7H, 09aH, 01H, 00H, 0d8H, 09aH, 01H, 00H, 0d9H
	DB	09aH, 01H, 00H, 0dfH, 09aH, 01H, 00H, 0deH, 09aH, 01H, 00H, 0dcH
	DB	09aH, 01H, 00H, 0ddH, 09aH, 01H, 00H, 0daH, 09aH, 01H, 00H, 0dbH
	DB	09aH, 01H, 00H, 0bdH, 08eH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H
	DB	09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H
	DB	09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H
	DB	09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H
	DB	09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H
	DB	09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0a9H, 09aH, 01H, 00H, 0aaH
	DB	09aH, 01H, 00H, 0abH, 09aH, 01H, 00H, 081H, 09aH, 01H, 00H, 082H
	DB	09aH, 01H, 00H, 089H, 09aH, 01H, 00H, 083H, 09aH, 01H, 00H, 084H
	DB	09aH, 01H, 00H, 085H, 09aH, 01H, 00H, 089H, 09aH, 01H, 00H, 086H
	DB	09aH, 01H, 00H, 089H, 09aH, 01H, 00H, 089H, 09aH, 01H, 00H, 089H
	DB	09aH, 01H, 00H, 087H, 09aH, 01H, 00H, 089H, 09aH, 01H, 00H, 08bH
	DB	09aH, 01H, 00H, 08aH, 09aH, 01H, 00H, 088H, 09aH, 01H, 00H, 089H
	DB	09aH, 01H, 00H, 089H, 09aH, 01H, 00H, 089H, 09aH, 01H, 00H, 07H
	DB	08aH, 01H, 00H, 0c8H, 09bH, 01H, 00H, 0c9H, 09bH, 01H, 00H, 0caH
	DB	09bH, 01H, 00H, 0cbH, 09bH, 01H, 00H, 0ccH, 09bH, 01H, 00H, 0cdH
	DB	09bH, 01H, 00H, 0ceH, 09bH, 01H, 00H, 0cfH, 09bH, 01H, 00H, 0d0H
	DB	09bH, 01H, 00H, 0d1H, 09bH, 01H, 00H, 0d2H, 09bH, 01H, 00H, 0d3H
	DB	09bH, 01H, 00H, 0d3H, 09bH, 01H, 00H, 0d3H, 09bH, 01H, 00H, 0d3H
	DB	09bH, 01H, 00H, 0d3H, 09bH, 01H, 00H, 0d3H, 09bH, 01H, 00H, 0d3H
	DB	09bH, 01H, 00H, 0cbH, 08eH, 01H, 00H, 090H, 09aH, 01H, 00H, 091H
	DB	09aH, 01H, 00H, 092H, 09aH, 01H, 00H, 092H, 09aH, 01H, 00H, 092H
	DB	09aH, 01H, 00H, 093H, 09aH, 01H, 00H, 094H, 09aH, 01H, 00H, 092H
	DB	09aH, 01H, 00H, 095H, 09aH, 01H, 00H, 092H, 09aH, 01H, 00H, 092H
	DB	09aH, 01H, 00H, 092H, 09aH, 01H, 00H, 097H, 09aH, 01H, 00H, 096H
	DB	09aH, 01H, 00H, 092H, 09aH, 01H, 00H, 092H, 09aH, 01H, 00H, 092H
	DB	09aH, 01H, 00H, 092H, 09aH, 01H, 00H, 0bbH, 08eH, 01H, 00H, 09eH
	DB	09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH
	DB	09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH
	DB	09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH
	DB	09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH
	DB	09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09eH, 09aH, 01H, 00H, 09fH
	DB	09aH, 01H, 00H, 09dH, 09aH, 01H, 00H, 09cH, 09aH, 01H, 00H, '+'
	DB	08aH, 01H, 00H, 0b2H, 09bH, 01H, 00H, 0b3H, 09bH, 01H, 00H, 0b4H
	DB	09bH, 01H, 00H, 0b5H, 09bH, 01H, 00H, 0b6H, 09bH, 01H, 00H, 0b7H
	DB	09bH, 01H, 00H, 0b8H, 09bH, 01H, 00H, 0b9H, 09bH, 01H, 00H, 0baH
	DB	09bH, 01H, 00H, 0bbH, 09bH, 01H, 00H, 0bcH, 09bH, 01H, 00H, 0bdH
	DB	09bH, 01H, 00H, 0bdH, 09bH, 01H, 00H, 0bdH, 09bH, 01H, 00H, 0bdH
	DB	09bH, 01H, 00H, 0bdH, 09bH, 01H, 00H, 0bdH, 09bH, 01H, 00H, 0bdH
	DB	09bH, 01H, 00H, 0f9H, 08eH, 01H, 00H, '%', 09cH, 01H, 00H, '&', 09cH
	DB	01H, 00H, '''', 09cH, 01H, 00H, '(', 09cH, 01H, 00H, ')', 09cH
	DB	01H, 00H, '*', 09cH, 01H, 00H, '+', 09cH, 01H, 00H, ',', 09cH, 01H
	DB	00H, '-', 09cH, 01H, 00H, '.', 09cH, 01H, 00H, '/', 09cH, 01H, 00H
	DB	'0', 09cH, 01H, 00H, '6', 09cH, 01H, 00H, '5', 09cH, 01H, 00H, '3'
	DB	09cH, 01H, 00H, '4', 09cH, 01H, 00H, '1', 09cH, 01H, 00H, '2', 09cH
	DB	01H, 00H, 0f7H, 08eH, 01H, 00H, 013H, 09cH, 01H, 00H, 014H, 09cH
	DB	01H, 00H, 015H, 09cH, 01H, 00H, 016H, 09cH, 01H, 00H, 017H, 09cH
	DB	01H, 00H, 018H, 09cH, 01H, 00H, 019H, 09cH, 01H, 00H, 01aH, 09cH
	DB	01H, 00H, 01bH, 09cH, 01H, 00H, 01cH, 09cH, 01H, 00H, 01dH, 09cH
	DB	01H, 00H, 01eH, 09cH, 01H, 00H, '$', 09cH, 01H, 00H, '#', 09cH
	DB	01H, 00H, '!', 09cH, 01H, 00H, '"', 09cH, 01H, 00H, 01fH, 09cH
	DB	01H, 00H, ' ', 09cH, 01H, 00H, 08aH, 08eH, 01H, 00H, 'P', 09aH
	DB	01H, 00H, 'Q', 09aH, 01H, 00H, 'R', 09aH, 01H, 00H, 'S', 09aH, 01H
	DB	00H, 'T', 09aH, 01H, 00H, 'U', 09aH, 01H, 00H, 'V', 09aH, 01H, 00H
	DB	'W', 09aH, 01H, 00H, 'X', 09aH, 01H, 00H, 'Y', 09aH, 01H, 00H, 'Z'
	DB	09aH, 01H, 00H, '[', 09aH, 01H, 00H, 'a', 09aH, 01H, 00H, '`', 09aH
	DB	01H, 00H, '^', 09aH, 01H, 00H, '_', 09aH, 01H, 00H, '\', 09aH, 01H
	DB	00H, ']', 09aH, 01H, 00H, 088H, 08eH, 01H, 00H, 'd', 09aH, 01H
	DB	00H, 'e', 09aH, 01H, 00H, 'f', 09aH, 01H, 00H, 'g', 09aH, 01H, 00H
	DB	'h', 09aH, 01H, 00H, 'i', 09aH, 01H, 00H, 'j', 09aH, 01H, 00H, 'k'
	DB	09aH, 01H, 00H, 'l', 09aH, 01H, 00H, 'm', 09aH, 01H, 00H, 'n', 09aH
	DB	01H, 00H, 'o', 09aH, 01H, 00H, 'u', 09aH, 01H, 00H, 't', 09aH, 01H
	DB	00H, 'r', 09aH, 01H, 00H, 's', 09aH, 01H, 00H, 'p', 09aH, 01H, 00H
	DB	'q', 09aH, 01H, 00H, 0d5H, 08eH, 01H, 00H, 015H, 09bH, 01H, 00H
	DB	016H, 09bH, 01H, 00H, 017H, 09bH, 01H, 00H, 018H, 09bH, 01H, 00H
	DB	019H, 09bH, 01H, 00H, 01aH, 09bH, 01H, 00H, 01bH, 09bH, 01H, 00H
	DB	01cH, 09bH, 01H, 00H, 01dH, 09bH, 01H, 00H, 01eH, 09bH, 01H, 00H
	DB	01fH, 09bH, 01H, 00H, ' ', 09bH, 01H, 00H, '&', 09bH, 01H, 00H
	DB	'%', 09bH, 01H, 00H, '#', 09bH, 01H, 00H, '$', 09bH, 01H, 00H, '!'
	DB	09bH, 01H, 00H, '"', 09bH, 01H, 00H, 0d7H, 08eH, 01H, 00H, '(', 09bH
	DB	01H, 00H, ')', 09bH, 01H, 00H, '*', 09bH, 01H, 00H, '+', 09bH, 01H
	DB	00H, ',', 09bH, 01H, 00H, '-', 09bH, 01H, 00H, '.', 09bH, 01H, 00H
	DB	'/', 09bH, 01H, 00H, '0', 09bH, 01H, 00H, '1', 09bH, 01H, 00H, '2'
	DB	09bH, 01H, 00H, '3', 09bH, 01H, 00H, '9', 09bH, 01H, 00H, '8', 09bH
	DB	01H, 00H, '6', 09bH, 01H, 00H, '7', 09bH, 01H, 00H, '4', 09bH, 01H
	DB	00H, '5', 09bH, 01H, 00H, 0d9H, 08eH, 01H, 00H, ';', 09bH, 01H
	DB	00H, '<', 09bH, 01H, 00H, '=', 09bH, 01H, 00H, '>', 09bH, 01H, 00H
	DB	'?', 09bH, 01H, 00H, '@', 09bH, 01H, 00H, 'A', 09bH, 01H, 00H, 'B'
	DB	09bH, 01H, 00H, 'C', 09bH, 01H, 00H, 'D', 09bH, 01H, 00H, 'E', 09bH
	DB	01H, 00H, 'F', 09bH, 01H, 00H, 'L', 09bH, 01H, 00H, 'K', 09bH, 01H
	DB	00H, 'I', 09bH, 01H, 00H, 'J', 09bH, 01H, 00H, 'G', 09bH, 01H, 00H
	DB	'H', 09bH, 01H, 00H, 0dbH, 08eH, 01H, 00H, 'N', 09bH, 01H, 00H
	DB	'O', 09bH, 01H, 00H, 'P', 09bH, 01H, 00H, 'Q', 09bH, 01H, 00H, 'R'
	DB	09bH, 01H, 00H, 'S', 09bH, 01H, 00H, 'T', 09bH, 01H, 00H, 'U', 09bH
	DB	01H, 00H, 'V', 09bH, 01H, 00H, 'W', 09bH, 01H, 00H, 'X', 09bH, 01H
	DB	00H, 'Y', 09bH, 01H, 00H, '_', 09bH, 01H, 00H, '^', 09bH, 01H, 00H
	DB	'\', 09bH, 01H, 00H, ']', 09bH, 01H, 00H, 'Z', 09bH, 01H, 00H, '['
	DB	09bH, 01H, 00H, 'B', 08fH, 01H, 00H, 0c3H, 09aH, 01H, 00H, 0c3H
	DB	09aH, 01H, 00H, 0c4H, 09aH, 01H, 00H, 0c3H, 09aH, 01H, 00H, 0c5H
	DB	09aH, 01H, 00H, 0c6H, 09aH, 01H, 00H, 0c3H, 09aH, 01H, 00H, 0c3H
	DB	09aH, 01H, 00H, 0c3H, 09aH, 01H, 00H, 0c3H, 09aH, 01H, 00H, 0c7H
	DB	09aH, 01H, 00H, 0c8H, 09aH, 01H, 00H, 0ccH, 09aH, 01H, 00H, 0cbH
	DB	09aH, 01H, 00H, 0c3H, 09aH, 01H, 00H, 0c3H, 09aH, 01H, 00H, 0c9H
	DB	09aH, 01H, 00H, 0caH, 09aH, 01H, 00H, 084H, 08eH, 01H, 00H, 0f8H
	DB	09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0f9H
	DB	09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0faH
	DB	09aH, 01H, 00H, 0fbH, 09aH, 01H, 00H, 0fcH, 09aH, 01H, 00H, 0fdH
	DB	09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0f8H
	DB	09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0feH, 09aH, 01H, 00H, 0ffH
	DB	09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0f8H, 09aH, 01H, 00H, 0acH
	DB	08eH, 01H, 00H, 'u', 09bH, 01H, 00H, 'v', 09bH, 01H, 00H, 'w', 09bH
	DB	01H, 00H, 'x', 09bH, 01H, 00H, 'y', 09bH, 01H, 00H, 'z', 09bH, 01H
	DB	00H, '{', 09bH, 01H, 00H, '|', 09bH, 01H, 00H, '}', 09bH, 01H, 00H
	DB	'~', 09bH, 01H, 00H, 07fH, 09bH, 01H, 00H, 080H, 09bH, 01H, 00H
	DB	084H, 09bH, 01H, 00H, 083H, 09bH, 01H, 00H, 081H, 09bH, 01H, 00H
	DB	082H, 09bH, 01H, 00H, 082H, 09bH, 01H, 00H, 082H, 09bH, 01H, 00H
	DB	012H, 08fH, 01H, 00H, 0e6H, 09bH, 01H, 00H, 0e7H, 09bH, 01H, 00H
	DB	0e8H, 09bH, 01H, 00H, 0e9H, 09bH, 01H, 00H, 0eaH, 09bH, 01H, 00H
	DB	0ebH, 09bH, 01H, 00H, 0ecH, 09bH, 01H, 00H, 0edH, 09bH, 01H, 00H
	DB	0eeH, 09bH, 01H, 00H, 0efH, 09bH, 01H, 00H, 0f0H, 09bH, 01H, 00H
	DB	0f1H, 09bH, 01H, 00H, 0f7H, 09bH, 01H, 00H, 0f6H, 09bH, 01H, 00H
	DB	0f4H, 09bH, 01H, 00H, 0f5H, 09bH, 01H, 00H, 0f2H, 09bH, 01H, 00H
	DB	0f3H, 09bH, 01H, 00H, 018H, 08fH, 01H, 00H, 'a', 09bH, 01H, 00H
	DB	'a', 09bH, 01H, 00H, 'a', 09bH, 01H, 00H, 'a', 09bH, 01H, 00H, 'a'
	DB	09bH, 01H, 00H, 'a', 09bH, 01H, 00H, 'a', 09bH, 01H, 00H, 'a', 09bH
	DB	01H, 00H, 'a', 09bH, 01H, 00H, 'd', 09bH, 01H, 00H, 'e', 09bH, 01H
	DB	00H, 'f', 09bH, 01H, 00H, 'a', 09bH, 01H, 00H, 'a', 09bH, 01H, 00H
	DB	'g', 09bH, 01H, 00H, 'h', 09bH, 01H, 00H, 'a', 09bH, 01H, 00H, 'a'
	DB	09bH, 01H, 00H, 085H, 09bH, 01H, 00H, 086H, 09bH, 01H, 00H, 086H
	DB	09bH, 01H, 00H, 086H, 09bH, 01H, 00H, 086H, 09bH, 01H, 00H, 086H
	DB	09bH, 01H, 00H, 087H, 09bH, 01H, 00H, 086H, 09bH, 01H, 00H, 088H
	DB	09bH, 01H, 00H, 089H, 09bH, 01H, 00H, 08aH, 09bH, 01H, 00H, 086H
	DB	09bH, 01H, 00H, 08bH, 09bH, 01H, 00H, 086H, 09bH, 01H, 00H, 086H
	DB	09bH, 01H, 00H, 086H, 09bH, 01H, 00H, 086H, 09bH, 01H, 00H, 08cH
	DB	09bH, 01H, 00H, 08dH, 09bH, 01H, 00H, 0faH, 092H, 01H, 00H, '@'
	DB	09cH, 01H, 00H, '@', 09cH, 01H, 00H, '@', 09cH, 01H, 00H, 'A', 09cH
	DB	01H, 00H, '@', 09cH, 01H, 00H, '@', 09cH, 01H, 00H, '@', 09cH, 01H
	DB	00H, 'B', 09cH, 01H, 00H, '@', 09cH, 01H, 00H, 'C', 09cH, 01H, 00H
	DB	'@', 09cH, 01H, 00H, 'D', 09cH, 01H, 00H, 'H', 09cH, 01H, 00H, 'G'
	DB	09cH, 01H, 00H, '@', 09cH, 01H, 00H, '@', 09cH, 01H, 00H, 'E', 09cH
	DB	01H, 00H, 'F', 09cH, 01H, 00H, 01H, 09bH, 01H, 00H, 02H, 09bH, 01H
	DB	00H, 03H, 09bH, 01H, 00H, 04H, 09bH, 01H, 00H, 05H, 09bH, 01H, 00H
	DB	06H, 09bH, 01H, 00H, 07H, 09bH, 01H, 00H, 08H, 09bH, 01H, 00H, 09H
	DB	09bH, 01H, 00H, 0aH, 09bH, 01H, 00H, 0bH, 09bH, 01H, 00H, 0cH, 09bH
	DB	01H, 00H, 0dH, 09bH, 01H, 00H, 013H, 09bH, 01H, 00H, 012H, 09bH
	DB	01H, 00H, 010H, 09bH, 01H, 00H, 011H, 09bH, 01H, 00H, 0eH, 09bH
	DB	01H, 00H, 0fH, 09bH, 01H, 00H, 086H, 08eH, 01H, 00H, 0b0H, 09aH
	DB	01H, 00H, 0b1H, 09aH, 01H, 00H, 0b2H, 09aH, 01H, 00H, 0b3H, 09aH
	DB	01H, 00H, 0b4H, 09aH, 01H, 00H, 0b5H, 09aH, 01H, 00H, 0b6H, 09aH
	DB	01H, 00H, 0b7H, 09aH, 01H, 00H, 0b8H, 09aH, 01H, 00H, 0b9H, 09aH
	DB	01H, 00H, 0baH, 09aH, 01H, 00H, 0bbH, 09aH, 01H, 00H, 0c1H, 09aH
	DB	01H, 00H, 0c0H, 09aH, 01H, 00H, 0beH, 09aH, 01H, 00H, 0bfH, 09aH
	DB	01H, 00H, 0bcH, 09aH, 01H, 00H, 0bdH, 09aH, 01H, 00H, 0c0H, 087H
	DB	01H, 00H, 04H, 0a0H, 01H, 00H, 04H, 0a0H, 01H, 00H, 04H, 0a0H, 01H
	DB	00H, 04H, 0a0H, 01H, 00H, 04H, 0a0H, 01H, 00H, 04H, 0a0H, 01H, 00H
	DB	05H, 0a0H, 01H, 00H, 05H, 0a0H, 01H, 00H, 05H, 0a0H, 01H, 00H, 05H
	DB	0a0H, 01H, 00H, 05H, 0a0H, 01H, 00H, 05H, 0a0H, 01H, 00H, 05H, 0a0H
	DB	01H, 00H, 05H, 0a0H, 01H, 00H, 05H, 0a0H, 01H, 00H, 05H, 0a0H, 01H
	DB	00H, 05H, 0a0H, 01H, 00H, 05H, 0a0H, 01H, 00H, 0bfH, 087H, 01H
	DB	00H, 06H, 0a0H, 01H, 00H, 06H, 0a0H, 01H, 00H, 06H, 0a0H, 01H, 00H
	DB	06H, 0a0H, 01H, 00H, 07H, 0a0H, 01H, 00H, 07H, 0a0H, 01H, 00H, 07H
	DB	0a0H, 01H, 00H, 07H, 0a0H, 01H, 00H, 08H, 0a0H, 01H, 00H, 08H, 0a0H
	DB	01H, 00H, 08H, 0a0H, 01H, 00H, 08H, 0a0H, 01H, 00H, 08H, 0a0H, 01H
	DB	00H, 08H, 0a0H, 01H, 00H, 08H, 0a0H, 01H, 00H, 08H, 0a0H, 01H, 00H
	DB	08H, 0a0H, 01H, 00H, 08H, 0a0H, 01H, 00H, 0c2H, 087H, 01H, 00H
	DB	09H, 0a0H, 01H, 00H, 09H, 0a0H, 01H, 00H, 09H, 0a0H, 01H, 00H, 09H
	DB	0a0H, 01H, 00H, 0aH, 0a0H, 01H, 00H, 0aH, 0a0H, 01H, 00H, 0aH, 0a0H
	DB	01H, 00H, 0aH, 0a0H, 01H, 00H, 0bH, 0a0H, 01H, 00H, 0bH, 0a0H, 01H
	DB	00H, 0bH, 0a0H, 01H, 00H, 0bH, 0a0H, 01H, 00H, 0bH, 0a0H, 01H, 00H
	DB	0bH, 0a0H, 01H, 00H, 0bH, 0a0H, 01H, 00H, 0bH, 0a0H, 01H, 00H, 0bH
	DB	0a0H, 01H, 00H, 0bH, 0a0H, 01H, 00H, 0c1H, 087H, 01H, 00H, 0cH
	DB	0a0H, 01H, 00H, 0cH, 0a0H, 01H, 00H, 0cH, 0a0H, 01H, 00H, 0cH, 0a0H
	DB	01H, 00H, 0dH, 0a0H, 01H, 00H, 0dH, 0a0H, 01H, 00H, 0dH, 0a0H, 01H
	DB	00H, 0dH, 0a0H, 01H, 00H, 0eH, 0a0H, 01H, 00H, 0eH, 0a0H, 01H, 00H
	DB	0eH, 0a0H, 01H, 00H, 0eH, 0a0H, 01H, 00H, 0eH, 0a0H, 01H, 00H, 0eH
	DB	0a0H, 01H, 00H, 0eH, 0a0H, 01H, 00H, 0eH, 0a0H, 01H, 00H, 0eH, 0a0H
	DB	01H, 00H, 0eH, 0a0H, 01H, 00H, '*', 088H, 01H, 00H, 0fH, 0a0H, 01H
	DB	00H, 0fH, 0a0H, 01H, 00H, 0fH, 0a0H, 01H, 00H, 0fH, 0a0H, 01H, 00H
	DB	010H, 0a0H, 01H, 00H, 010H, 0a0H, 01H, 00H, 010H, 0a0H, 01H, 00H
	DB	010H, 0a0H, 01H, 00H, 011H, 0a0H, 01H, 00H, 011H, 0a0H, 01H, 00H
	DB	011H, 0a0H, 01H, 00H, 011H, 0a0H, 01H, 00H, 011H, 0a0H, 01H, 00H
	DB	011H, 0a0H, 01H, 00H, 011H, 0a0H, 01H, 00H, 011H, 0a0H, 01H, 00H
	DB	011H, 0a0H, 01H, 00H, 011H, 0a0H, 01H, 00H, 09cH, 08cH, 01H, 00H
	DB	'[', 08eH, 01H, 00H, '[', 08eH, 01H, 00H, '[', 08eH, 01H, 00H, '['
	DB	08eH, 01H, 00H, '[', 08eH, 01H, 00H, '[', 08eH, 01H, 00H, '[', 08eH
	DB	01H, 00H, '[', 08eH, 01H, 00H, '[', 08eH, 01H, 00H, '[', 08eH, 01H
	DB	00H, '[', 08eH, 01H, 00H, '[', 08eH, 01H, 00H, '[', 08eH, 01H, 00H
	DB	'[', 08eH, 01H, 00H, '[', 08eH, 01H, 00H, '[', 08eH, 01H, 00H, '['
	DB	08eH, 01H, 00H, '[', 08eH, 01H, 00H, 0bbH, 087H, 01H, 00H, 0beH
	DB	08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH
	DB	08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH
	DB	08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH
	DB	08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH
	DB	08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH
	DB	08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, 0beH, 08bH, 01H, 00H, '('
	DB	08aH, 01H, 00H, '\', 088H, 01H, 00H, '\', 088H, 01H, 00H, '\', 088H
	DB	01H, 00H, '\', 088H, 01H, 00H, '\', 088H, 01H, 00H, '\', 088H, 01H
	DB	00H, '\', 088H, 01H, 00H, '\', 088H, 01H, 00H, '\', 088H, 01H, 00H
	DB	'\', 088H, 01H, 00H, '\', 088H, 01H, 00H, '\', 088H, 01H, 00H, '\'
	DB	088H, 01H, 00H, '\', 088H, 01H, 00H, '\', 088H, 01H, 00H, '\', 088H
	DB	01H, 00H, '\', 088H, 01H, 00H, '\', 088H, 01H, 00H, 0bfH, 08eH
	DB	01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH
	DB	01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH
	DB	01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH
	DB	01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH
	DB	01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH
	DB	01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH, 01H, 00H, 0c0H, 08eH
	DB	01H, 00H, 0a9H, 08eH, 01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH
	DB	01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH
	DB	01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH
	DB	01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH
	DB	01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH
	DB	01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH, 01H, 00H, 0aaH, 08eH
	DB	01H, 00H, 0aaH, 08eH, 01H, 00H, 0c8H, 08eH, 01H, 00H, '~', 092H
	DB	01H, 00H, '~', 092H, 01H, 00H, '~', 092H, 01H, 00H, '~', 092H, 01H
	DB	00H, '~', 092H, 01H, 00H, '~', 092H, 01H, 00H, '~', 092H, 01H, 00H
	DB	'~', 092H, 01H, 00H, '~', 092H, 01H, 00H, '~', 092H, 01H, 00H, '~'
	DB	092H, 01H, 00H, '~', 092H, 01H, 00H, '~', 092H, 01H, 00H, '~', 092H
	DB	01H, 00H, '~', 092H, 01H, 00H, '~', 092H, 01H, 00H, '~', 092H, 01H
	DB	00H, '~', 092H, 01H, 00H, 0eH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H
	DB	0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H, 0fH
	DB	08fH, 01H, 00H, 0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H, 0fH, 08fH
	DB	01H, 00H, 0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H
	DB	00H, 0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H
	DB	0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H, 0fH, 08fH, 01H, 00H, 0fH
	DB	08fH, 01H, 00H, 014H, 08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H
	DB	08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H
	DB	08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H
	DB	08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H
	DB	08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H
	DB	08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 015H
	DB	08fH, 01H, 00H, 015H, 08fH, 01H, 00H, 082H, 092H, 01H, 00H, 083H
	DB	092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H
	DB	092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H
	DB	092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H
	DB	092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H
	DB	092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H
	DB	092H, 01H, 00H, 083H, 092H, 01H, 00H, 083H, 092H, 01H, 00H, 0f5H
	DB	08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H
	DB	08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H
	DB	08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H
	DB	08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H
	DB	08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H
	DB	08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H, 08eH, 01H, 00H, 0f6H
	DB	08eH, 01H, 00H, 0e0H, 08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H
	DB	08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H
	DB	08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H
	DB	08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H
	DB	08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H
	DB	08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0e1H
	DB	08eH, 01H, 00H, 0e1H, 08eH, 01H, 00H, 0efH, 08eH, 01H, 00H, 0f0H
	DB	08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H
	DB	08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H
	DB	08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H
	DB	08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H
	DB	08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H
	DB	08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0f0H, 08eH, 01H, 00H, 0cH
	DB	08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH
	DB	01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H
	DB	00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H, 00H
	DB	0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, 0dH
	DB	08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH
	DB	01H, 00H, 0dH, 08fH, 01H, 00H, 0dH, 08fH, 01H, 00H, '<', 08fH, 01H
	DB	00H, '=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H
	DB	'=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H, '='
	DB	08fH, 01H, 00H, '=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H, '=', 08fH
	DB	01H, 00H, '=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H, '=', 08fH, 01H
	DB	00H, '=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H
	DB	'=', 08fH, 01H, 00H, '=', 08fH, 01H, 00H, '>', 08fH, 01H, 00H, '?'
	DB	08fH, 01H, 00H, '?', 08fH, 01H, 00H, '?', 08fH, 01H, 00H, '?', 08fH
	DB	01H, 00H, '?', 08fH, 01H, 00H, '?', 08fH, 01H, 00H, '?', 08fH, 01H
	DB	00H, '?', 08fH, 01H, 00H, '?', 08fH, 01H, 00H, '?', 08fH, 01H, 00H
	DB	'?', 08fH, 01H, 00H, '?', 08fH, 01H, 00H, '?', 08fH, 01H, 00H, '?'
	DB	08fH, 01H, 00H, '?', 08fH, 01H, 00H, '?', 08fH, 01H, 00H, '?', 08fH
	DB	01H, 00H, '?', 08fH, 01H, 00H, 'H', 08fH, 01H, 00H, 0b5H, 093H
	DB	01H, 00H, 0b6H, 093H, 01H, 00H, 0b7H, 093H, 01H, 00H, 0b8H, 093H
	DB	01H, 00H, 0b9H, 093H, 01H, 00H, 0baH, 093H, 01H, 00H, 0bbH, 093H
	DB	01H, 00H, 0bcH, 093H, 01H, 00H, 0bdH, 093H, 01H, 00H, 0beH, 093H
	DB	01H, 00H, 0bfH, 093H, 01H, 00H, 0c0H, 093H, 01H, 00H, 0c0H, 093H
	DB	01H, 00H, 0c0H, 093H, 01H, 00H, 0c0H, 093H, 01H, 00H, 0c0H, 093H
	DB	01H, 00H, 0c0H, 093H, 01H, 00H, 0c0H, 093H, 01H, 00H, '@', 08fH
	DB	01H, 00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H
	DB	00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H, 00H
	DB	'A', 08fH, 01H, 00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H, 00H, 'A'
	DB	08fH, 01H, 00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H, 00H, 'A', 08fH
	DB	01H, 00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H
	DB	00H, 'A', 08fH, 01H, 00H, 'A', 08fH, 01H, 00H, ':', 08fH, 01H, 00H
	DB	';', 08fH, 01H, 00H, ';', 08fH, 01H, 00H, ';', 08fH, 01H, 00H, ';'
	DB	08fH, 01H, 00H, ';', 08fH, 01H, 00H, ';', 08fH, 01H, 00H, ';', 08fH
	DB	01H, 00H, ';', 08fH, 01H, 00H, ';', 08fH, 01H, 00H, ';', 08fH, 01H
	DB	00H, ';', 08fH, 01H, 00H, ';', 08fH, 01H, 00H, ';', 08fH, 01H, 00H
	DB	';', 08fH, 01H, 00H, ';', 08fH, 01H, 00H, ';', 08fH, 01H, 00H, ';'
	DB	08fH, 01H, 00H, ';', 08fH, 01H, 00H, 'e', 093H, 01H, 00H, 'Y', 093H
	DB	01H, 00H, 'Z', 093H, 01H, 00H, '[', 093H, 01H, 00H, '\', 093H, 01H
	DB	00H, ']', 093H, 01H, 00H, '^', 093H, 01H, 00H, '_', 093H, 01H, 00H
	DB	'`', 093H, 01H, 00H, 'a', 093H, 01H, 00H, 'b', 093H, 01H, 00H, 'c'
	DB	093H, 01H, 00H, 'd', 093H, 01H, 00H, 'd', 093H, 01H, 00H, 'd', 093H
	DB	01H, 00H, 'd', 093H, 01H, 00H, 'd', 093H, 01H, 00H, 'd', 093H, 01H
	DB	00H, 'd', 093H, 01H, 00H, 080H, 092H, 01H, 00H, 081H, 092H, 01H
	DB	00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H
	DB	00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H
	DB	00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H
	DB	00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H
	DB	00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H
	DB	00H, 081H, 092H, 01H, 00H, 081H, 092H, 01H, 00H, 'r', 08fH, 01H
	DB	00H, 't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H
	DB	't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H, 't'
	DB	08fH, 01H, 00H, 't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H, 't', 08fH
	DB	01H, 00H, 't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H, 't', 08fH, 01H
	DB	00H, 't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H
	DB	't', 08fH, 01H, 00H, 't', 08fH, 01H, 00H, 'n', 08fH, 01H, 00H, 'o'
	DB	08fH, 01H, 00H, 'o', 08fH, 01H, 00H, 'o', 08fH, 01H, 00H, 'o', 08fH
	DB	01H, 00H, 'o', 08fH, 01H, 00H, 'o', 08fH, 01H, 00H, 'o', 08fH, 01H
	DB	00H, 'o', 08fH, 01H, 00H, 'o', 08fH, 01H, 00H, 'o', 08fH, 01H, 00H
	DB	'o', 08fH, 01H, 00H, 'o', 08fH, 01H, 00H, 'o', 08fH, 01H, 00H, 'o'
	DB	08fH, 01H, 00H, 'o', 08fH, 01H, 00H, 'o', 08fH, 01H, 00H, 'o', 08fH
	DB	01H, 00H, 'o', 08fH, 01H, 00H, 08eH, 092H, 01H, 00H, 08fH, 092H
	DB	01H, 00H, 090H, 092H, 01H, 00H, 091H, 092H, 01H, 00H, 092H, 092H
	DB	01H, 00H, 093H, 092H, 01H, 00H, 094H, 092H, 01H, 00H, 095H, 092H
	DB	01H, 00H, 096H, 092H, 01H, 00H, 097H, 092H, 01H, 00H, 098H, 092H
	DB	01H, 00H, 099H, 092H, 01H, 00H, 09aH, 092H, 01H, 00H, 09aH, 092H
	DB	01H, 00H, 09aH, 092H, 01H, 00H, 09aH, 092H, 01H, 00H, 09aH, 092H
	DB	01H, 00H, 09aH, 092H, 01H, 00H, 09aH, 092H, 01H, 00H, 09bH, 092H
	DB	01H, 00H, 09cH, 092H, 01H, 00H, 09dH, 092H, 01H, 00H, 09eH, 092H
	DB	01H, 00H, 09fH, 092H, 01H, 00H, 0a0H, 092H, 01H, 00H, 0a1H, 092H
	DB	01H, 00H, 0a2H, 092H, 01H, 00H, 0a3H, 092H, 01H, 00H, 0a4H, 092H
	DB	01H, 00H, 0a5H, 092H, 01H, 00H, 0a6H, 092H, 01H, 00H, 0a7H, 092H
	DB	01H, 00H, 0a7H, 092H, 01H, 00H, 0a7H, 092H, 01H, 00H, 0a7H, 092H
	DB	01H, 00H, 0a7H, 092H, 01H, 00H, 0a7H, 092H, 01H, 00H, 0a7H, 092H
	DB	01H, 00H, 0a8H, 092H, 01H, 00H, 0a9H, 092H, 01H, 00H, 0aaH, 092H
	DB	01H, 00H, 0abH, 092H, 01H, 00H, 0acH, 092H, 01H, 00H, 0adH, 092H
	DB	01H, 00H, 0aeH, 092H, 01H, 00H, 0afH, 092H, 01H, 00H, 0b0H, 092H
	DB	01H, 00H, 0b1H, 092H, 01H, 00H, 0b2H, 092H, 01H, 00H, 0b3H, 092H
	DB	01H, 00H, 0b4H, 092H, 01H, 00H, 0b4H, 092H, 01H, 00H, 0b4H, 092H
	DB	01H, 00H, 0b4H, 092H, 01H, 00H, 0b4H, 092H, 01H, 00H, 0b4H, 092H
	DB	01H, 00H, 0b4H, 092H, 01H, 00H, 'r', 093H, 01H, 00H, 'f', 093H
	DB	01H, 00H, 'g', 093H, 01H, 00H, 'h', 093H, 01H, 00H, 'i', 093H, 01H
	DB	00H, 'j', 093H, 01H, 00H, 'k', 093H, 01H, 00H, 'l', 093H, 01H, 00H
	DB	'm', 093H, 01H, 00H, 'n', 093H, 01H, 00H, 'o', 093H, 01H, 00H, 'p'
	DB	093H, 01H, 00H, 'q', 093H, 01H, 00H, 'q', 093H, 01H, 00H, 'q', 093H
	DB	01H, 00H, 'q', 093H, 01H, 00H, 'q', 093H, 01H, 00H, 'q', 093H, 01H
	DB	00H, 'q', 093H, 01H, 00H, 0b2H, 087H, 01H, 00H, 0bcH, 092H, 01H
	DB	00H, 0bdH, 092H, 01H, 00H, 0beH, 092H, 01H, 00H, 0bfH, 092H, 01H
	DB	00H, 0c0H, 092H, 01H, 00H, 0c1H, 092H, 01H, 00H, 0c2H, 092H, 01H
	DB	00H, 0c3H, 092H, 01H, 00H, 0c4H, 092H, 01H, 00H, 0c5H, 092H, 01H
	DB	00H, 0c6H, 092H, 01H, 00H, 0c7H, 092H, 01H, 00H, 0c7H, 092H, 01H
	DB	00H, 0c7H, 092H, 01H, 00H, 0c7H, 092H, 01H, 00H, 0c7H, 092H, 01H
	DB	00H, 0c7H, 092H, 01H, 00H, 0c7H, 092H, 01H, 00H, '7', 08fH, 01H
	DB	00H, '7', 08fH, 01H, 00H, 'h', 08fH, 01H, 00H, '0', 08cH, 01H, 00H
	DB	0c1H, 08eH, 01H, 00H, 'i', 08fH, 01H, 00H, 'j', 08fH, 01H, 00H
	DB	'7', 08fH, 01H, 00H, 'h', 08fH, 01H, 00H, '0', 08cH, 01H, 00H, 0c1H
	DB	08eH, 01H, 00H, 'i', 08fH, 01H, 00H, 'j', 08fH, 01H, 00H, 'j', 08fH
	DB	01H, 00H, 'j', 08fH, 01H, 00H, 'j', 08fH, 01H, 00H, 'j', 08fH, 01H
	DB	00H, 'j', 08fH, 01H, 00H, 'j', 08fH, 01H, 00H, 0b8H, 08eH, 01H
	DB	00H, '}', 092H, 01H, 00H, '}', 092H, 01H, 00H, '}', 092H, 01H, 00H
	DB	'}', 092H, 01H, 00H, '}', 092H, 01H, 00H, '}', 092H, 01H, 00H, '}'
	DB	092H, 01H, 00H, '}', 092H, 01H, 00H, '}', 092H, 01H, 00H, '}', 092H
	DB	01H, 00H, '}', 092H, 01H, 00H, '}', 092H, 01H, 00H, '}', 092H, 01H
	DB	00H, '}', 092H, 01H, 00H, '}', 092H, 01H, 00H, '}', 092H, 01H, 00H
	DB	'}', 092H, 01H, 00H, '}', 092H, 01H, 00H, 'Z', 08fH, 01H, 00H, '['
	DB	08fH, 01H, 00H, '[', 08fH, 01H, 00H, '[', 08fH, 01H, 00H, '[', 08fH
	DB	01H, 00H, '[', 08fH, 01H, 00H, '[', 08fH, 01H, 00H, '[', 08fH, 01H
	DB	00H, '[', 08fH, 01H, 00H, '[', 08fH, 01H, 00H, '[', 08fH, 01H, 00H
	DB	'[', 08fH, 01H, 00H, '[', 08fH, 01H, 00H, '[', 08fH, 01H, 00H, '['
	DB	08fH, 01H, 00H, '[', 08fH, 01H, 00H, '[', 08fH, 01H, 00H, '[', 08fH
	DB	01H, 00H, '[', 08fH, 01H, 00H, 012H, 088H, 01H, 00H, 'I', 088H
	DB	01H, 00H, 'I', 088H, 01H, 00H, 'I', 088H, 01H, 00H, 'I', 088H, 01H
	DB	00H, 'I', 088H, 01H, 00H, 'I', 088H, 01H, 00H, 'I', 088H, 01H, 00H
	DB	'I', 088H, 01H, 00H, 'I', 088H, 01H, 00H, 'I', 088H, 01H, 00H, 'I'
	DB	088H, 01H, 00H, 'I', 088H, 01H, 00H, 'I', 088H, 01H, 00H, 'I', 088H
	DB	01H, 00H, 'I', 088H, 01H, 00H, 'I', 088H, 01H, 00H, 'I', 088H, 01H
	DB	00H, 'I', 088H, 01H, 00H, 0a8H, 09cH, 0bH, 00H, 0a5H, 086H, 01H
	DB	00H, 0aaH, 086H, 01H, 00H, 0afH, 086H, 01H, 00H, 0b9H, 086H, 01H
	DB	00H, 0beH, 086H, 01H, 00H, 0c3H, 086H, 01H, 00H, 0b4H, 086H, 01H
	DB	00H, 0d7H, 086H, 01H, 00H, 0d2H, 086H, 01H, 00H, 0cdH, 086H, 01H
	DB	00H, 0c8H, 086H, 01H, 00H, 0dcH, 086H, 01H, 00H, 0e1H, 086H, 01H
	DB	00H, 0e6H, 086H, 01H, 00H, 0ebH, 086H, 01H, 00H, 0ffH, 086H, 01H
	DB	00H, 0f5H, 086H, 01H, 00H, 0faH, 086H, 01H, 00H, 0f0H, 086H, 01H
	DB	00H, 04H, 087H, 01H, 00H, 013H, 087H, 01H, 00H, 0eH, 087H, 01H
	DB	00H, 09H, 087H, 01H, 00H, '''', 087H, 01H, 00H, 018H, 087H, 01H
	DB	00H, 01dH, 087H, 01H, 00H, '"', 087H, 01H, 00H, '1', 087H, 01H
	DB	00H, ',', 087H, 01H, 00H, '6', 087H, 01H, 00H, ';', 087H, 01H, 00H
	DB	'E', 087H, 01H, 00H, 'J', 087H, 01H, 00H, '@', 087H, 01H, 00H, 'O'
	DB	087H, 01H, 00H, '^', 087H, 01H, 00H, 'c', 087H, 01H, 00H, 'Y', 087H
	DB	01H, 00H, 'T', 087H, 01H, 00H, 'h', 087H, 01H, 00H, 'r', 087H, 01H
	DB	00H, 'w', 087H, 01H, 00H, 'm', 087H, 01H, 00H, 086H, 087H, 01H
	DB	00H, 081H, 087H, 01H, 00H, '|', 087H, 01H, 00H, 08bH, 087H, 01H
	DB	00H, 0c0H, 0d4H, 01H, 00H, 0c5H, 0d4H, 01H, 00H, 0caH, 0d4H, 01H
	DB	00H, 0cfH, 0d4H, 01H, 00H, 0d4H, 0d4H, 01H, 00H, 0d9H, 0d4H, 01H
	DB	00H, 0deH, 0d4H, 01H, 00H, 0e3H, 0d4H, 01H, 00H, 0e8H, 0d4H, 01H
	DB	00H, 0edH, 0d4H, 01H, 00H, 0f2H, 0d4H, 01H, 00H, 0f7H, 0d4H, 01H
	DB	00H, 0fcH, 0d4H, 01H, 00H, 01H, 0d5H, 01H, 00H, 06H, 0d5H, 01H
	DB	00H, 0bH, 0d5H, 01H, 00H, '0', 088H, 01H, 00H, '5', 088H, 01H, 00H
	DB	'O', 088H, 01H, 00H, 'T', 088H, 01H, 00H, 0e9H, 087H, 01H, 00H
	DB	0e7H, 087H, 01H, 00H, 0eaH, 087H, 01H, 00H, 0e8H, 087H, 01H, 00H
	DB	08cH, 08aH, 01H, 00H, 08dH, 08aH, 01H, 00H, 08eH, 08aH, 01H, 00H
	DB	08fH, 08aH, 01H, 00H, 097H, 08aH, 01H, 00H, 098H, 08aH, 01H, 00H
	DB	099H, 08aH, 01H, 00H, 096H, 08aH, 01H, 00H, 0a3H, 08aH, 01H, 00H
	DB	0a2H, 08aH, 01H, 00H, 0a1H, 08aH, 01H, 00H, 0a0H, 08aH, 01H, 00H
	DB	0aaH, 08aH, 01H, 00H, 0abH, 08aH, 01H, 00H, 0acH, 08aH, 01H, 00H
	DB	0adH, 08aH, 01H, 00H, 0b7H, 08aH, 01H, 00H, 0b5H, 08aH, 01H, 00H
	DB	0b6H, 08aH, 01H, 00H, 0b4H, 08aH, 01H, 00H, 0beH, 08aH, 01H, 00H
	DB	0c1H, 08aH, 01H, 00H, 0c0H, 08aH, 01H, 00H, 0bfH, 08aH, 01H, 00H
	DB	0cbH, 08aH, 01H, 00H, 0c8H, 08aH, 01H, 00H, 0c9H, 08aH, 01H, 00H
	DB	0caH, 08aH, 01H, 00H, 0d3H, 08aH, 01H, 00H, 0d2H, 08aH, 01H, 00H
	DB	0d4H, 08aH, 01H, 00H, 0d5H, 08aH, 01H, 00H, 0ddH, 08aH, 01H, 00H
	DB	0deH, 08aH, 01H, 00H, 0dcH, 08aH, 01H, 00H, 0dfH, 08aH, 01H, 00H
	DB	0e8H, 08aH, 01H, 00H, 0e9H, 08aH, 01H, 00H, 0e7H, 08aH, 01H, 00H
	DB	0e6H, 08aH, 01H, 00H, 0f0H, 08aH, 01H, 00H, 0f2H, 08aH, 01H, 00H
	DB	0f3H, 08aH, 01H, 00H, 0f1H, 08aH, 01H, 00H, 0fcH, 08aH, 01H, 00H
	DB	0fbH, 08aH, 01H, 00H, 0faH, 08aH, 01H, 00H, 0fdH, 08aH, 01H, 00H
	DB	09bH, 0aeH, 01H, 00H, 09cH, 0aeH, 01H, 00H, 0a0H, 0aeH, 01H, 00H
	DB	'x', 0aeH, 01H, 00H, 09fH, 0aeH, 01H, 00H, 'y', 0aeH, 01H, 00H
	DB	09dH, 0aeH, 01H, 00H, 09eH, 0aeH, 01H, 00H, 014H, 0aeH, 01H, 00H
	DB	0a0H, 086H, 01H, 00H, 00H, 088H, 01H, 00H, 089H, 08aH, 01H, 00H
	DB	0a5H, 086H, 01H, 00H, 00H, 088H, 01H, 00H, 08aH, 08aH, 01H, 00H
	DB	0aaH, 086H, 01H, 00H, 00H, 088H, 01H, 00H, 08bH, 08aH, 01H, 00H
	DB	0afH, 086H, 01H, 00H, 00H, 088H, 01H, 00H, 088H, 08aH, 01H, 00H
	DB	'\', 089H, 01H, 00H, 00H, 088H, 01H, 00H, 088H, 08aH, 01H, 00H
	DB	'a', 089H, 01H, 00H, 00H, 088H, 01H, 00H, 092H, 08aH, 01H, 00H
	DB	0b4H, 086H, 01H, 00H, ',', 088H, 01H, 00H, 093H, 08aH, 01H, 00H
	DB	0b9H, 086H, 01H, 00H, ',', 088H, 01H, 00H, 094H, 08aH, 01H, 00H
	DB	0beH, 086H, 01H, 00H, ',', 088H, 01H, 00H, 095H, 08aH, 01H, 00H
	DB	0c3H, 086H, 01H, 00H, ',', 088H, 01H, 00H, 092H, 08aH, 01H, 00H
	DB	'f', 089H, 01H, 00H, ',', 088H, 01H, 00H, 092H, 08aH, 01H, 00H
	DB	'k', 089H, 01H, 00H, ',', 088H, 01H, 00H, 09cH, 08aH, 01H, 00H
	DB	0c8H, 086H, 01H, 00H, 0ffH, 087H, 01H, 00H, 09dH, 08aH, 01H, 00H
	DB	0cdH, 086H, 01H, 00H, 0ffH, 087H, 01H, 00H, 09eH, 08aH, 01H, 00H
	DB	0d2H, 086H, 01H, 00H, 0ffH, 087H, 01H, 00H, 09fH, 08aH, 01H, 00H
	DB	0d7H, 086H, 01H, 00H, 0ffH, 087H, 01H, 00H, 09cH, 08aH, 01H, 00H
	DB	'p', 089H, 01H, 00H, 0ffH, 087H, 01H, 00H, 09cH, 08aH, 01H, 00H
	DB	'u', 089H, 01H, 00H, 0ffH, 087H, 01H, 00H, 0a6H, 08aH, 01H, 00H
	DB	0dcH, 086H, 01H, 00H, 01H, 088H, 01H, 00H, 0a7H, 08aH, 01H, 00H
	DB	0e1H, 086H, 01H, 00H, 01H, 088H, 01H, 00H, 0a8H, 08aH, 01H, 00H
	DB	0e6H, 086H, 01H, 00H, 01H, 088H, 01H, 00H, 0a9H, 08aH, 01H, 00H
	DB	0ebH, 086H, 01H, 00H, 01H, 088H, 01H, 00H, 0a6H, 08aH, 01H, 00H
	DB	'z', 089H, 01H, 00H, 01H, 088H, 01H, 00H, 0a6H, 08aH, 01H, 00H
	DB	07fH, 089H, 01H, 00H, 01H, 088H, 01H, 00H, 0b0H, 08aH, 01H, 00H
	DB	0f0H, 086H, 01H, 00H, ',', 088H, 01H, 00H, 0b1H, 08aH, 01H, 00H
	DB	0f5H, 086H, 01H, 00H, ',', 088H, 01H, 00H, 0b2H, 08aH, 01H, 00H
	DB	0faH, 086H, 01H, 00H, ',', 088H, 01H, 00H, 0b3H, 08aH, 01H, 00H
	DB	0ffH, 086H, 01H, 00H, ',', 088H, 01H, 00H, 0b0H, 08aH, 01H, 00H
	DB	084H, 089H, 01H, 00H, ',', 088H, 01H, 00H, 0b0H, 08aH, 01H, 00H
	DB	089H, 089H, 01H, 00H, ',', 088H, 01H, 00H, 0baH, 08aH, 01H, 00H
	DB	04H, 087H, 01H, 00H, 01H, 088H, 01H, 00H, 0bbH, 08aH, 01H, 00H
	DB	09H, 087H, 01H, 00H, 01H, 088H, 01H, 00H, 0bcH, 08aH, 01H, 00H
	DB	0eH, 087H, 01H, 00H, 01H, 088H, 01H, 00H, 0bdH, 08aH, 01H, 00H
	DB	013H, 087H, 01H, 00H, 01H, 088H, 01H, 00H, 0baH, 08aH, 01H, 00H
	DB	08eH, 089H, 01H, 00H, 01H, 088H, 01H, 00H, 0baH, 08aH, 01H, 00H
	DB	093H, 089H, 01H, 00H, 01H, 088H, 01H, 00H, 0c4H, 08aH, 01H, 00H
	DB	018H, 087H, 01H, 00H, 02H, 088H, 01H, 00H, 0c5H, 08aH, 01H, 00H
	DB	01dH, 087H, 01H, 00H, 02H, 088H, 01H, 00H, 0c6H, 08aH, 01H, 00H
	DB	'"', 087H, 01H, 00H, 02H, 088H, 01H, 00H, 0c7H, 08aH, 01H, 00H
	DB	'''', 087H, 01H, 00H, 02H, 088H, 01H, 00H, 0c4H, 08aH, 01H, 00H
	DB	098H, 089H, 01H, 00H, 02H, 088H, 01H, 00H, 0c4H, 08aH, 01H, 00H
	DB	09dH, 089H, 01H, 00H, 02H, 088H, 01H, 00H, 0ceH, 08aH, 01H, 00H
	DB	',', 087H, 01H, 00H, 02H, 088H, 01H, 00H, 0cfH, 08aH, 01H, 00H
	DB	'1', 087H, 01H, 00H, 02H, 088H, 01H, 00H, 0d0H, 08aH, 01H, 00H
	DB	'6', 087H, 01H, 00H, 02H, 088H, 01H, 00H, 0d1H, 08aH, 01H, 00H
	DB	';', 087H, 01H, 00H, 02H, 088H, 01H, 00H, 0ceH, 08aH, 01H, 00H
	DB	0a2H, 089H, 01H, 00H, 02H, 088H, 01H, 00H, 0ceH, 08aH, 01H, 00H
	DB	0a7H, 089H, 01H, 00H, 02H, 088H, 01H, 00H, 0d8H, 08aH, 01H, 00H
	DB	'@', 087H, 01H, 00H, 00H, 088H, 01H, 00H, 0d9H, 08aH, 01H, 00H
	DB	'E', 087H, 01H, 00H, 00H, 088H, 01H, 00H, 0daH, 08aH, 01H, 00H
	DB	'J', 087H, 01H, 00H, 00H, 088H, 01H, 00H, 0dbH, 08aH, 01H, 00H
	DB	'O', 087H, 01H, 00H, 00H, 088H, 01H, 00H, 0d8H, 08aH, 01H, 00H
	DB	0acH, 089H, 01H, 00H, 00H, 088H, 01H, 00H, 0d8H, 08aH, 01H, 00H
	DB	0b1H, 089H, 01H, 00H, 00H, 088H, 01H, 00H, 0e2H, 08aH, 01H, 00H
	DB	'T', 087H, 01H, 00H, 0ffH, 087H, 01H, 00H, 0e3H, 08aH, 01H, 00H
	DB	'Y', 087H, 01H, 00H, 0ffH, 087H, 01H, 00H, 0e4H, 08aH, 01H, 00H
	DB	'^', 087H, 01H, 00H, 0ffH, 087H, 01H, 00H, 0e5H, 08aH, 01H, 00H
	DB	'c', 087H, 01H, 00H, 0ffH, 087H, 01H, 00H, 0e2H, 08aH, 01H, 00H
	DB	0b6H, 089H, 01H, 00H, 0ffH, 087H, 01H, 00H, 0e2H, 08aH, 01H, 00H
	DB	0bbH, 089H, 01H, 00H, 0ffH, 087H, 01H, 00H, 0ecH, 08aH, 01H, 00H
	DB	'h', 087H, 01H, 00H, 01H, 088H, 01H, 00H, 0edH, 08aH, 01H, 00H
	DB	'm', 087H, 01H, 00H, 01H, 088H, 01H, 00H, 0eeH, 08aH, 01H, 00H
	DB	'r', 087H, 01H, 00H, 01H, 088H, 01H, 00H, 0efH, 08aH, 01H, 00H
	DB	'w', 087H, 01H, 00H, 01H, 088H, 01H, 00H, 0ecH, 08aH, 01H, 00H
	DB	0c0H, 089H, 01H, 00H, 01H, 088H, 01H, 00H, 0ecH, 08aH, 01H, 00H
	DB	0c5H, 089H, 01H, 00H, 01H, 088H, 01H, 00H, 0f6H, 08aH, 01H, 00H
	DB	'|', 087H, 01H, 00H, ',', 088H, 01H, 00H, 0f7H, 08aH, 01H, 00H
	DB	081H, 087H, 01H, 00H, ',', 088H, 01H, 00H, 0f8H, 08aH, 01H, 00H
	DB	086H, 087H, 01H, 00H, ',', 088H, 01H, 00H, 0f9H, 08aH, 01H, 00H
	DB	08bH, 087H, 01H, 00H, ',', 088H, 01H, 00H, 0f6H, 08aH, 01H, 00H
	DB	0caH, 089H, 01H, 00H, ',', 088H, 01H, 00H, 0f6H, 08aH, 01H, 00H
	DB	0cfH, 089H, 01H, 00H, ',', 088H, 01H, 00H, 014H, 088H, 01H, 00H
	DB	015H, 088H, 01H, 00H, 090H, 08aH, 01H, 00H, 091H, 08aH, 01H, 00H
	DB	09aH, 08aH, 01H, 00H, 09bH, 08aH, 01H, 00H, 0a4H, 08aH, 01H, 00H
	DB	0a5H, 08aH, 01H, 00H, 0aeH, 08aH, 01H, 00H, 0afH, 08aH, 01H, 00H
	DB	0b8H, 08aH, 01H, 00H, 0b9H, 08aH, 01H, 00H, 0c2H, 08aH, 01H, 00H
	DB	0c3H, 08aH, 01H, 00H, 0ccH, 08aH, 01H, 00H, 0cdH, 08aH, 01H, 00H
	DB	0d6H, 08aH, 01H, 00H, 0d7H, 08aH, 01H, 00H, 0e0H, 08aH, 01H, 00H
	DB	0e1H, 08aH, 01H, 00H, 0eaH, 08aH, 01H, 00H, 0ebH, 08aH, 01H, 00H
	DB	0f4H, 08aH, 01H, 00H, 0f5H, 08aH, 01H, 00H, 0feH, 08aH, 01H, 00H
	DB	0ffH, 08aH, 01H, 00H, 0e0H, 08aH, 01H, 00H, 0e1H, 08aH, 01H, 00H
	DB	0eaH, 08aH, 01H, 00H, 0ebH, 08aH, 01H, 00H, 0f4H, 08aH, 01H, 00H
	DB	0f5H, 08aH, 01H, 00H, 0feH, 08aH, 01H, 00H, 0ffH, 08aH, 01H, 00H
	DB	0f4H, 08aH, 01H, 00H, 0f5H, 08aH, 01H, 00H, 0feH, 08aH, 01H, 00H
	DB	0ffH, 08aH, 01H, 00H
CONST	ENDS
;	COMDAT __real@c014000000000000
CONST	SEGMENT
__real@c014000000000000 DQ 0c014000000000000r	; -5
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4017000000000000
CONST	SEGMENT
__real@4017000000000000 DQ 04017000000000000r	; 5.75
CONST	ENDS
;	COMDAT __real@4016333340000000
CONST	SEGMENT
__real@4016333340000000 DQ 04016333340000000r	; 5.55
CONST	ENDS
;	COMDAT __real@4015666660000000
CONST	SEGMENT
__real@4015666660000000 DQ 04015666660000000r	; 5.35
CONST	ENDS
;	COMDAT __real@40149999a0000000
CONST	SEGMENT
__real@40149999a0000000 DQ 040149999a0000000r	; 5.15
CONST	ENDS
;	COMDAT __real@4013ccccc0000000
CONST	SEGMENT
__real@4013ccccc0000000 DQ 04013ccccc0000000r	; 4.95
CONST	ENDS
;	COMDAT __real@4013000000000000
CONST	SEGMENT
__real@4013000000000000 DQ 04013000000000000r	; 4.75
CONST	ENDS
;	COMDAT __real@4012000000000000
CONST	SEGMENT
__real@4012000000000000 DQ 04012000000000000r	; 4.5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe947ae147ae148
CONST	SEGMENT
__real@3fe947ae147ae148 DQ 03fe947ae147ae148r	; 0.79
CONST	ENDS
;	COMDAT __real@3fe147ae147ae148
CONST	SEGMENT
__real@3fe147ae147ae148 DQ 03fe147ae147ae148r	; 0.54
CONST	ENDS
;	COMDAT __real@3fdeb851eb851eb8
CONST	SEGMENT
__real@3fdeb851eb851eb8 DQ 03fdeb851eb851eb8r	; 0.48
CONST	ENDS
;	COMDAT __real@3fdae147ae147ae1
CONST	SEGMENT
__real@3fdae147ae147ae1 DQ 03fdae147ae147ae1r	; 0.42
CONST	ENDS
;	COMDAT __real@3fd70a3d70a3d70a
CONST	SEGMENT
__real@3fd70a3d70a3d70a DQ 03fd70a3d70a3d70ar	; 0.36
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd147ae147ae148
CONST	SEGMENT
__real@3fd147ae147ae148 DQ 03fd147ae147ae148r	; 0.27
CONST	ENDS
;	COMDAT __real@3fceb851eb851eb8
CONST	SEGMENT
__real@3fceb851eb851eb8 DQ 03fceb851eb851eb8r	; 0.24
CONST	ENDS
;	COMDAT __real@3fcae147ae147ae1
CONST	SEGMENT
__real@3fcae147ae147ae1 DQ 03fcae147ae147ae1r	; 0.21
CONST	ENDS
;	COMDAT __real@3fc70a3d70a3d70a
CONST	SEGMENT
__real@3fc70a3d70a3d70a DQ 03fc70a3d70a3d70ar	; 0.18
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fbeb851eb851eb8
CONST	SEGMENT
__real@3fbeb851eb851eb8 DQ 03fbeb851eb851eb8r	; 0.12
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb70a3d70a3d70a
CONST	SEGMENT
__real@3fb70a3d70a3d70a DQ 03fb70a3d70a3d70ar	; 0.09
CONST	ENDS
;	COMDAT __real@3fb47ae147ae147b
CONST	SEGMENT
__real@3fb47ae147ae147b DQ 03fb47ae147ae147br	; 0.08
CONST	ENDS
;	COMDAT __real@3fb1eb851eb851ec
CONST	SEGMENT
__real@3fb1eb851eb851ec DQ 03fb1eb851eb851ecr	; 0.07
CONST	ENDS
;	COMDAT __real@3faeb851eb851eb8
CONST	SEGMENT
__real@3faeb851eb851eb8 DQ 03faeb851eb851eb8r	; 0.06
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f00000000000000
CONST	SEGMENT
__real@3f00000000000000 DQ 03f00000000000000r	; 3.05176e-05
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IMBPEJAE@invalid?5array?$DMT?0?5N?$DO?5subscript@
CONST	SEGMENT
??_C@_0BO@IMBPEJAE@invalid?5array?$DMT?0?5N?$DO?5subscript@ DB 'invalid a'
	DB	'rray<T, N> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FOCEAPFH@?C?$KE?F?C?$LJ?f?$LP?$KB?$LM?$KN?5?$LA?$KN?E?p?$LF?G?$LO?z?$LO?n?$LP?d?$KD?$KB@
CONST	SEGMENT
??_C@_0BK@FOCEAPFH@?C?$KE?F?C?$LJ?f?$LP?$KB?$LM?$KN?5?$LA?$KN?E?p?$LF?G?$LO?z?$LO?n?$LP?d?$KD?$KB@ DB 0c3H
	DB	0a4H, 0c6H, 0c3H, 0b9H, 0e6H, 0bfH, 0a1H, 0bcH, 0adH, ' ', 0b0H
	DB	0adH, 0c5H, 0f0H, 0b5H, 0c7H, 0beH, 0faH, 0beH, 0eeH, 0bfH, 0e4H
	DB	0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GLJGCFGJ@?C?$KE?F?C?$LJ?f?$MA?L?5?$MA?L?$LJ?L?5?$LL?h?A?$KG?$LF?G?$LO?z?$LO?n?$LP?d?$KD?$KB@
CONST	SEGMENT
??_C@_0BN@GLJGCFGJ@?C?$KE?F?C?$LJ?f?$MA?L?5?$MA?L?$LJ?L?5?$LL?h?A?$KG?$LF?G?$LO?z?$LO?n?$LP?d?$KD?$KB@ DB 0c3H
	DB	0a4H, 0c6H, 0c3H, 0b9H, 0e6H, 0c0H, 0ccH, ' ', 0c0H, 0ccH, 0b9H
	DB	0ccH, ' ', 0bbH, 0e8H, 0c1H, 0a6H, 0b5H, 0c7H, 0beH, 0faH, 0beH
	DB	0eeH, 0bfH, 0e4H, 0a3H, 0a1H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMBFKAPF@?$FL?$LE?k?H?$KN?$FN?$CFs@
CONST	SEGMENT
??_C@_08MMBFKAPF@?$FL?$LE?k?H?$KN?$FN?$CFs@ DB '[', 0b4H, 0ebH, 0c8H, 0adH
	DB	']%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06MDMHPEBB@A?$HM?$CFd?$HM0@
CONST	SEGMENT
??_C@_06MDMHPEBB@A?$HM?$CFd?$HM0@ DB 'A|%d|0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NKNMMFFA@A?$HM?$CFd?$HM1@
CONST	SEGMENT
??_C@_06NKNMMFFA@A?$HM?$CFd?$HM1@ DB 'A|%d|1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HKAIMJJM@?$CFs?5?$LA?$KB?$MA?T?$LN?E?C?$LL@
CONST	SEGMENT
??_C@_0M@HKAIMJJM@?$CFs?5?$LA?$KB?$MA?T?$LN?E?C?$LL@ DB '%s ', 0b0H, 0a1H
	DB	0c0H, 0d4H, 0bdH, 0c5H, 0c3H, 0bbH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PEKHDFAL@D?$HM@
CONST	SEGMENT
??_C@_02PEKHDFAL@D?$HM@ DB 'D|', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHEAKBJG@M?$HM?$CFd@
CONST	SEGMENT
??_C@_04IHEAKBJG@M?$HM?$CFd@ DB 'M|%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAAFEDG@K?$HM?$CFd@
CONST	SEGMENT
??_C@_04IAAFEDG@K?$HM?$CFd@ DB 'K|%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CKMFLHCC@?$LE?g?$LN?E?$MA?$LK?5?$MA?L?$LJ?L?5?C?$KE?F?C?$LJ?f?$MA?$LL?5?$LG?$LA?$LD?$LF?$LN?$MA?$LE?O?$LE?Y@
CONST	SEGMENT
??_C@_0CB@CKMFLHCC@?$LE?g?$LN?E?$MA?$LK?5?$MA?L?$LJ?L?5?C?$KE?F?C?$LJ?f?$MA?$LL?5?$LG?$LA?$LD?$LF?$LN?$MA?$LE?O?$LE?Y@ DB 0b4H
	DB	0e7H, 0bdH, 0c5H, 0c0H, 0baH, ' ', 0c0H, 0ccH, 0b9H, 0ccH, ' ', 0c3H
	DB	0a4H, 0c6H, 0c3H, 0b9H, 0e6H, 0c0H, 0bbH, ' ', 0b6H, 0b0H, 0b3H
	DB	0b5H, 0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PKLEGELD@L?$HM@
CONST	SEGMENT
??_C@_02PKLEGELD@L?$HM@ DB 'L|', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@JDIKCLBG@?C?$KE?F?C?5?$LJ?f?$MA?e?$MA?$LK?5?C?$KE?F?C?$LJ?f?$LP?$KB?$LM?$KN?5?$LD?$KK?$LA?$KF?5?$LM?v?5@
CONST	SEGMENT
??_C@_0GC@JDIKCLBG@?C?$KE?F?C?5?$LJ?f?$MA?e?$MA?$LK?5?C?$KE?F?C?$LJ?f?$LP?$KB?$LM?$KN?5?$LD?$KK?$LA?$KF?5?$LM?v?5@ DB 0c3H
	DB	0a4H, 0c6H, 0c3H, ' ', 0b9H, 0e6H, 0c0H, 0e5H, 0c0H, 0baH, ' ', 0c3H
	DB	0a4H, 0c6H, 0c3H, 0b9H, 0e6H, 0bfH, 0a1H, 0bcH, 0adH, ' ', 0b3H
	DB	0aaH, 0b0H, 0a5H, ' ', 0bcH, 0f6H, ' ', 0beH, 0f8H, 0bdH, 0c0H
	DB	0b4H, 0cfH, 0b4H, 0d9H, '. ', 0b3H, 0aaH, 0b0H, 0a1H, 0b0H, 0edH
	DB	' ', 0bdH, 0cdH, 0c0H, 0bbH, ' ', 0b0H, 0e6H, 0bfH, 0ecH, ' ', 0b4H
	DB	0d9H, 0b8H, 0a5H, 0bbH, 0e7H, 0b6H, 0f7H, 0bfH, 0a1H, 0b0H, 0d4H
	DB	' ', 0b9H, 0e6H, 0c0H, 0e5H, 0c0H, 0bbH, ' ', 0b3H, 0d1H, 0b1H
	DB	0e2H, 0bdH, 0c3H, 0b1H, 0e2H, ' ', 0b9H, 0d9H, 0b6H, 0f8H, 0b4H
	DB	0cfH, 0b4H, 0d9H, 0a3H, 0a1H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EOCAOGMB@?5?5?$LL?u?$LH?N?$LP?n?5?C?$KE?F?C?$LJ?f?5?$LI?$LI?$LF?i?$LB?b@
CONST	SEGMENT
??_C@_0BH@EOCAOGMB@?5?5?$LL?u?$LH?N?$LP?n?5?C?$KE?F?C?$LJ?f?5?$LI?$LI?$LF?i?$LB?b@ DB ' '
	DB	' ', 0bbH, 0f5H, 0b7H, 0ceH, 0bfH, 0eeH, ' ', 0c3H, 0a4H, 0c6H
	DB	0c3H, 0b9H, 0e6H, ' ', 0b8H, 0b8H, 0b5H, 0e9H, 0b1H, 0e2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFGAHNIG@J?$HM?$CFd@
CONST	SEGMENT
??_C@_04DFGAHNIG@J?$HM?$CFd@ DB 'J|%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BMHKFDJF@?5?5?5?5?5?5?5?5?5?5?C?$LM?$LD?N?$MA?L?$LI?$KH?5?5?5?5?5?5?5?5?5?5?F?D?F@
CONST	SEGMENT
??_C@_0DB@BMHKFDJF@?5?5?5?5?5?5?5?5?5?5?C?$LM?$LD?N?$MA?L?$LI?$KH?5?5?5?5?5?5?5?5?5?5?F?D?F@ DB ' '
	DB	'         ', 0c3H, 0bcH, 0b3H, 0ceH, 0c0H, 0ccH, 0b8H, 0a7H, ' '
	DB	'         ', 0c6H, 0c4H, 0c6H, 0bcH, 0c0H, 0e5H, 0c0H, 0ccH, 0b8H
	DB	0a7H, '  ', 0c0H, 0ceH, 0bfH, 0f8H, ' ', 0bcH, 0f6H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HNIDOICG@?5?5?$CF16s?5?5?$CF16s?5?5?5?$CF2d?5@
CONST	SEGMENT
??_C@_0BE@HNIDOICG@?5?5?$CF16s?5?5?$CF16s?5?5?5?$CF2d?5@ DB '  %16s  %16s'
	DB	'   %2d ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01JBBJJEPG@p@
CONST	SEGMENT
??_C@_01JBBJJEPG@p@ DB 'p', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02PACKEJLJ@B?$HM@
CONST	SEGMENT
??_C@_02PACKEJLJ@B?$HM@ DB 'B|', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HADKCOHN@?C?$KE?$LD?N?5?$MA?L?$LI?$KH?$MA?$LL?5?$MA?T?$LH?B?G?O?$LN?C?$LB?b?5?$LJ?Y?$LG?x?$LE?O?$LE?Y@
CONST	SEGMENT
??_C@_0CA@HADKCOHN@?C?$KE?$LD?N?5?$MA?L?$LI?$KH?$MA?$LL?5?$MA?T?$LH?B?G?O?$LN?C?$LB?b?5?$LJ?Y?$LG?x?$LE?O?$LE?Y@ DB 0c3H
	DB	0a4H, 0b3H, 0ceH, ' ', 0c0H, 0ccH, 0b8H, 0a7H, 0c0H, 0bbH, ' ', 0c0H
	DB	0d4H, 0b7H, 0c2H, 0c7H, 0cfH, 0bdH, 0c3H, 0b1H, 0e2H, ' ', 0b9H
	DB	0d9H, 0b6H, 0f8H, 0b4H, 0cfH, 0b4H, 0d9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KMPIGJGM@?$CFs?5?$CFs?5?1T?$CFd?5?5@
CONST	SEGMENT
??_C@_0N@KMPIGJGM@?$CFs?5?$CFs?5?1T?$CFd?5?5@ DB '%s %s /T%d  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OCCOFDAC@?5?5?5?5?5?5?5?5?5?5?5?$MA?L?5?$LI?$KH?5?5?5?5?5?5?5?5?5?5?5?$LK?$LA?5?$LI@
CONST	SEGMENT
??_C@_0DA@OCCOFDAC@?5?5?5?5?5?5?5?5?5?5?5?$MA?L?5?$LI?$KH?5?5?5?5?5?5?5?5?5?5?5?$LK?$LA?5?$LI@ DB ' '
	DB	'          ', 0c0H, 0ccH, ' ', 0b8H, 0a7H, '           ', 0baH
	DB	0b0H, ' ', 0b8H, 0edH, '  ', 0c8H, 0afH, ' ', 0bbH, 0fdH, '  ', 0b7H
	DB	0b9H, ' ', 0baH, 0a7H, ' ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CNEPNBEM@?5?$CF15s?5?$CF15s?5?5?$CF5d?5?5?$CF5d?5?5?5@
CONST	SEGMENT
??_C@_0BI@CNEPNBEM@?5?$CF15s?5?$CF15s?5?5?$CF5d?5?5?$CF5d?5?5?5@ DB ' %15'
	DB	's %15s  %5d  %5d   ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMNEOPOC@R?$HMP?$HM?$CFd@
CONST	SEGMENT
??_C@_06IMNEOPOC@R?$HMP?$HM?$CFd@ DB 'R|P|%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OILGNOPA@?F?j?$MA?e?$LK?q?$LA?$KB?5?$MA?e?B?x?$LF?G?$MA?V?$MA?$LI?$LI?i?5?E?$LO?$LN?B?G?R?$LM?v?$LO@
CONST	SEGMENT
??_C@_0CH@OILGNOPA@?F?j?$MA?e?$LK?q?$LA?$KB?5?$MA?e?B?x?$LF?G?$MA?V?$MA?$LI?$LI?i?5?E?$LO?$LN?B?G?R?$LM?v?$LO@ DB 0c6H
	DB	0eaH, 0c0H, 0e5H, 0baH, 0f1H, 0b0H, 0a1H, ' ', 0c0H, 0e5H, 0c2H
	DB	0f8H, 0b5H, 0c7H, 0c0H, 0d6H, 0c0H, 0b8H, 0b8H, 0e9H, ' ', 0c5H
	DB	0beH, 0bdH, 0c2H, 0c7H, 0d2H, 0bcH, 0f6H, 0beH, 0f8H, 0beH, 0eeH
	DB	0bfH, 0e4H, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ELNMCGJD@W@
CONST	SEGMENT
??_C@_01ELNMCGJD@W@ DB 'W', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02PGHGPEOM@?91@
CONST	SEGMENT
??_C@_02PGHGPEOM@?91@ DB '-1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MMMKPGBO@?$CFs?$LK?q?A?$KE?$LL?s?$MA?$PL?$MA?N?5?$LJ?f?$LN?D?$MA?$LI?$LH?N?5?$LA?E?$LH?$KB?5?$LB?$NN?$LO?W@
CONST	SEGMENT
??_C@_0EP@MMMKPGBO@?$CFs?$LK?q?A?$KE?$LL?s?$MA?$PL?$MA?N?5?$LJ?f?$LN?D?$MA?$LI?$LH?N?5?$LA?E?$LH?$KB?5?$LB?$NN?$LO?W@ DB '%'
	DB	's', 0baH, 0f1H, 0c1H, 0a4H, 0bbH, 0f3H, 0c0H, 0fbH, 0c0H, 0ceH
	DB	' ', 0b9H, 0e6H, 0bdH, 0c4H, 0c0H, 0b8H, 0b7H, 0ceH, ' ', 0b0H
	DB	0c5H, 0b7H, 0a1H, ' ', 0b1H, 0ddH, 0beH, 0d7H, 0c0H, 0bbH, ' ', 0bcH
	DB	0f6H, 0c1H, 0a4H, 0c7H, 0cfH, 0b8H, 0e9H, ' ', 0bdH, 0c3H, 0bdH
	DB	0baH, 0c5H, 0dbH, 0c0H, 0ccH, ' ', 0b0H, 0c5H, 0b7H, 0a1H, 0c3H
	DB	0a2H, 0c0H, 0bbH, ' ', 0b0H, 0adH, 0c1H, 0a6H, 0b7H, 0ceH, ' ', 0b4H
	DB	0ddH, 0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GAPBHFFA@T@
CONST	SEGMENT
??_C@_01GAPBHFFA@T@ DB 'T', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1@
CONST	SEGMENT
??_C@_01HIHLOKLC@1@ DB '1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJMKDILO@B?$HMG?$HM?$CFd@
CONST	SEGMENT
??_C@_06DJMKDILO@B?$HMG?$HM?$CFd@ DB 'B|G|%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPPMEBMP@?$MA?N?$LD?$LL?$LH?B?$KD?$LK?$CFs@
CONST	SEGMENT
??_C@_0L@GPPMEBMP@?$MA?N?$LD?$LL?$LH?B?$KD?$LK?$CFs@ DB 0c0H, 0ceH, 0b3H, 0bbH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJHGLDPL@?$CInull?$CJ@
CONST	SEGMENT
??_C@_06OJHGLDPL@?$CInull?$CJ@ DB '(null)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PECEDIMI@?$MA?$LG?G?U?$CFd?H?$LI@
CONST	SEGMENT
??_C@_08PECEDIMI@?$MA?$LG?G?U?$CFd?H?$LI@ DB 0c0H, 0b6H, 0c7H, 0d5H, '%d', 0c8H
	DB	0b8H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHBICLIK@?$CFd?H?$LI@
CONST	SEGMENT
??_C@_04DHBICLIK@?$CFd?H?$LI@ DB '%d', 0c8H, 0b8H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GEIMNGGC@?$MA?N?$LD?$LL?$LH?B?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0L@GEIMNGGC@?$MA?N?$LD?$LL?$LH?B?$CI?$CFs?$CJ@ DB 0c0H, 0ceH, 0b3H, 0bbH
	DB	0b7H, 0c2H, '(%s)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FBIHNOAG@T?$HM?$CFs?$HM?$CFs?$HMI?$HM1?$HM?$CFd@
CONST	SEGMENT
??_C@_0P@FBIHNOAG@T?$HM?$CFs?$HM?$CFs?$HMI?$HM1?$HM?$CFd@ DB 'T|%s|%s|I|1'
	DB	'|%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ONPMCPGG@?C?V?A?$LO?5?$LA?E?$LH?$KB?H?$KO?$MA?N@
CONST	SEGMENT
??_C@_0O@ONPMCPGG@?C?V?A?$LO?5?$LA?E?$LH?$KB?H?$KO?$MA?N@ DB 0c3H, 0d6H, 0c1H
	DB	0beH, ' ', 0b0H, 0c5H, 0b7H, 0a1H, 0c8H, 0aeH, 0c0H, 0ceH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OEEBHAFG@?$LA?E?$LH?$KB?H?$KO?$MA?N@
CONST	SEGMENT
??_C@_08OEEBHAFG@?$LA?E?$LH?$KB?H?$KO?$MA?N@ DB 0b0H, 0c5H, 0b7H, 0a1H, 0c8H
	DB	0aeH, 0c0H, 0ceH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJIPOAAB@?$LL?s?$LE?k?$LJ?f?5?$LA?E?$LH?$KB?$LB?$NN?$LO?W@
CONST	SEGMENT
??_C@_0BA@BJIPOAAB@?$LL?s?$LE?k?$LJ?f?5?$LA?E?$LH?$KB?$LB?$NN?$LO?W@ DB 0bbH
	DB	0f3H, 0b4H, 0ebH, 0b9H, 0e6H, ' ', 0b0H, 0c5H, 0b7H, 0a1H, 0b1H
	DB	0ddH, 0beH, 0d7H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KMGGBBNI@?$LA?E?$LH?$KB?$LB?$NN?$LO?W@
CONST	SEGMENT
??_C@_08KMGGBBNI@?$LA?E?$LH?$KB?$LB?$NN?$LO?W@ DB 0b0H, 0c5H, 0b7H, 0a1H, 0b1H
	DB	0ddH, 0beH, 0d7H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJOCCCFJ@?$CF7d@
CONST	SEGMENT
??_C@_03GJOCCCFJ@?$CF7d@ DB '%7d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAHOEAOA@?$MA?$LG?G?U@
CONST	SEGMENT
??_C@_04IAHOEAOA@?$MA?$LG?G?U@ DB 0c0H, 0b6H, 0c7H, 0d5H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GPECMEKF@?$FL?$FN@
CONST	SEGMENT
??_C@_02GPECMEKF@?$FL?$FN@ DB '[]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PABHPHAJ@Gold@
CONST	SEGMENT
??_C@_04PABHPHAJ@Gold@ DB 'Gold', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05INGMOBLN@?$LN?$LK?5?E?f@
CONST	SEGMENT
??_C@_05INGMOBLN@?$LN?$LK?5?E?f@ DB 0bdH, 0baH, ' ', 0c5H, 0e6H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01BBODEMC@G@
CONST	SEGMENT
??_C@_01BBODEMC@G@ DB 'G', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04IIECJNKD@?$MA?$LG?5?$DP@
CONST	SEGMENT
??_C@_04IIECJNKD@?$MA?$LG?5?$DP@ DB 0c0H, 0b6H, ' ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAPPLOMN@2?5?$LE?$NM?$LA?h@
CONST	SEGMENT
??_C@_06IAPPLOMN@2?5?$LE?$NM?$LA?h@ DB '2 ', 0b4H, 0dcH, 0b0H, 0e8H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBBHKEFA@1?5?$LE?$NM?$LA?h@
CONST	SEGMENT
??_C@_06LBBHKEFA@1?5?$LE?$NM?$LA?h@ DB '1 ', 0b4H, 0dcH, 0b0H, 0e8H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@
CONST	SEGMENT
??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@ DB 'Lv:%d%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LIFAFMCE@?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_04LIFAFMCE@?$FL?$CFs?$FN@ DB '[%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EJNLAFE@P@
CONST	SEGMENT
??_C@_01EJNLAFE@P@ DB 'P', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03EPCHICDI@x?$CFd@
CONST	SEGMENT
??_C@_03EPCHICDI@x?$CFd@ DB 'x%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I@
CONST	SEGMENT
??_C@_01JPJNBJEM@I@ DB 'I', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OKAJJOLE@T?$HM?$CFs?$HM?$CFs?$HMP?$HM3?$HM?$CFd?$HM?$CFs@
CONST	SEGMENT
??_C@_0BC@OKAJJOLE@T?$HM?$CFs?$HM?$CFs?$HMP?$HM3?$HM?$CFd?$HM?$CFs@ DB 'T'
	DB	'|%s|%s|P|3|%d|%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IIOLHDHO@?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs@
CONST	SEGMENT
??_C@_0BL@IIOLHDHO@?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs@ DB '%'
	DB	's|%s|%s|%s|%s|%s|%s|%s|%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PCKDKFGL@T?$HM?$CFs?$HM?$CFs?$HMG?$HM?$CFd?$HM?$CFd@
CONST	SEGMENT
??_C@_0BA@PCKDKFGL@T?$HM?$CFs?$HM?$CFs?$HMG?$HM?$CFd?$HM?$CFd@ DB 'T|%s|%'
	DB	's|G|%d|%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07BMJINPJG@W?$HM?$CFs?$HM?$CFs@
CONST	SEGMENT
??_C@_07BMJINPJG@W?$HM?$CFs?$HM?$CFs@ DB 'W|%s|%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EILMFHPP@?5?G?U?5?5?$LA?h?5?5?$CF8d@
CONST	SEGMENT
??_C@_0N@EILMFHPP@?5?G?U?5?5?$LA?h?5?5?$CF8d@ DB ' ', 0c7H, 0d5H, '  ', 0b0H
	DB	0e8H, '  %8d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBEDPFPL@?5?$KD?D?5?5?$KD?P?5?5?$CF?$CL8d@
CONST	SEGMENT
??_C@_0O@JBEDPFPL@?5?$KD?D?5?5?$KD?P?5?5?$CF?$CL8d@ DB ' ', 0a3H, 0c4H, ' '
	DB	' ', 0a3H, 0d0H, '  %+8d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DBCJKIIM@?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LO?r?A?v?5?$LI?x?G?O?$LP?$LE?$LN?$MA?$LE?O?$LE?Y?$KB?$KD@
CONST	SEGMENT
??_C@_0BN@DBCJKIIM@?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LO?r?A?v?5?$LI?x?G?O?$LP?$LE?$LN?$MA?$LE?O?$LE?Y?$KB?$KD@ DB 0beH
	DB	0c6H, 0c0H, 0ccH, 0c5H, 0dbH, 0c0H, 0bbH, ' ', 0beH, 0f2H, 0c1H
	DB	0f6H, ' ', 0b8H, 0f8H, 0c7H, 0cfH, 0bfH, 0b4H, 0bdH, 0c0H, 0b4H
	DB	0cfH, 0b4H, 0d9H, 0a1H, 0a3H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OKFINFEF@?5?5?$LO?F?$MA?L?E?$NL?5?$KD?$LK@
CONST	SEGMENT
??_C@_0M@OKFINFEF@?5?5?$LO?F?$MA?L?E?$NL?5?$KD?$LK@ DB '  ', 0beH, 0c6H, 0c0H
	DB	0ccH, 0c5H, 0dbH, ' ', 0a3H, 0baH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MBHBIIFC@Exp?5?5?5?5?$CL0@
CONST	SEGMENT
??_C@_09MBHBIIFC@Exp?5?5?5?5?$CL0@ DB 'Exp    +0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFGDJJIF@Exp?5?$CF?$CL4d@
CONST	SEGMENT
??_C@_08EFGDJJIF@Exp?5?$CF?$CL4d@ DB 'Exp %+4d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEKBPDLC@Exp?5?$CF?$CL5d@
CONST	SEGMENT
??_C@_08EEKBPDLC@Exp?5?$CF?$CL5d@ DB 'Exp %+5d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GEIIADAH@LvUp?$CB@
CONST	SEGMENT
??_C@_05GEIIADAH@LvUp?$CB@ DB 'LvUp!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IEFMJAKN@?$LO?F?$MA?L?E?$NL?5?$LP?O?$LM?$LK@
CONST	SEGMENT
??_C@_0M@IEFMJAKN@?$LO?F?$MA?L?E?$NL?5?$LP?O?$LM?$LK@ DB 0beH, 0c6H, 0c0H
	DB	0ccH, 0c5H, 0dbH, ' ', 0bfH, 0cfH, 0bcH, 0baH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GCLEBMEI@?D?$KD?$LB?$LI?$LA?$KB?5?A?$KC?$LM?S?G?X?$MA?V?A?v?5?$LO?J?$LO?F?$LP?d?$KD?$KB@
CONST	SEGMENT
??_C@_0BL@GCLEBMEI@?D?$KD?$LB?$LI?$LA?$KB?5?A?$KC?$LM?S?G?X?$MA?V?A?v?5?$LO?J?$LO?F?$LP?d?$KD?$KB@ DB 0c4H
	DB	0a3H, 0b1H, 0b8H, 0b0H, 0a1H, ' ', 0c1H, 0a2H, 0bcH, 0d3H, 0c7H
	DB	0d8H, 0c0H, 0d6H, 0c1H, 0f6H, ' ', 0beH, 0caH, 0beH, 0c6H, 0bfH
	DB	0e4H, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HHJMAEP@?5?5?F?d?5?F?$KO?5?$LI?$NO?5?$MA?O?5?5?5@
CONST	SEGMENT
??_C@_0BB@HHJMAEP@?5?5?F?d?5?F?$KO?5?$LI?$NO?5?$MA?O?5?5?5@ DB '  ', 0c6H
	DB	0e4H, ' ', 0c6H, 0aeH, ' ', 0b8H, 0deH, ' ', 0c0H, 0cfH, '   ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JGMBHNPP@?5?5?$MA?O?5?$LJ?$NN?5?$LI?$NO?5?$MA?O?5?5?5@
CONST	SEGMENT
??_C@_0BB@JGMBHNPP@?5?5?$MA?O?5?$LJ?$NN?5?$LI?$NO?5?$MA?O?5?5?5@ DB '  ', 0c0H
	DB	0cfH, ' ', 0b9H, 0ddH, ' ', 0b8H, 0deH, ' ', 0c0H, 0cfH, '   ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DLDGKHKC@?$LA?E?$LH?$KB?A?$NP?$MA?N?5?F?d?F?$KO?$LE?B?5?F?d?F?$KO?$LI?$NO?$MA?O?$LB?b?$LE?I?$MA?$LL?5@
CONST	SEGMENT
??_C@_0DB@DLDGKHKC@?$LA?E?$LH?$KB?A?$NP?$MA?N?5?F?d?F?$KO?$LE?B?5?F?d?F?$KO?$LI?$NO?$MA?O?$LB?b?$LE?I?$MA?$LL?5@ DB 0b0H
	DB	0c5H, 0b7H, 0a1H, 0c1H, 0dfH, 0c0H, 0ceH, ' ', 0c6H, 0e4H, 0c6H
	DB	0aeH, 0b4H, 0c2H, ' ', 0c6H, 0e4H, 0c6H, 0aeH, 0b8H, 0deH, 0c0H
	DB	0cfH, 0b1H, 0e2H, 0b4H, 0c9H, 0c0H, 0bbH, ' ', 0bbH, 0e7H, 0bfH
	DB	0ebH, 0c7H, 0d2H, ' ', 0bcH, 0f6H, ' ', 0beH, 0f8H, 0beH, 0eeH
	DB	0bfH, 0e4H, '!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPCJOALC@?$CF2d@
CONST	SEGMENT
??_C@_03GPCJOALC@?$CF2d@ DB '%2d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KLBINAOA@?A?$KE?$LH?I?5?$LM?R?H?$KP?5?$LP?k?$LF?$LF@
CONST	SEGMENT
??_C@_0P@KLBINAOA@?A?$KE?$LH?I?5?$LM?R?H?$KP?5?$LP?k?$LF?$LF@ DB 0c1H, 0a4H
	DB	0b7H, 0c9H, ' ', 0bcH, 0d2H, 0c8H, 0afH, ' ', 0bfH, 0ebH, 0b5H
	DB	0b5H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03GCLOGFGE@?$CF8d@
CONST	SEGMENT
??_C@_03GCLOGFGE@?$CF8d@ DB '%8d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLOAEAFL@?A?$KE?$LH?I?$MA?G?5?$LP?k?$MA?Z@
CONST	SEGMENT
??_C@_0M@HLOAEAFL@?A?$KE?$LH?I?$MA?G?5?$LP?k?$MA?Z@ DB 0c1H, 0a4H, 0b7H, 0c9H
	DB	0c0H, 0c7H, ' ', 0bfH, 0ebH, 0c0H, 0daH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MELGFJCD@?A?$KE?$LH?I?$MA?G?5?$LL?g?$MA?Z@
CONST	SEGMENT
??_C@_0M@MELGFJCD@?A?$KE?$LH?I?$MA?G?5?$LL?g?$MA?Z@ DB 0c1H, 0a4H, 0b7H, 0c9H
	DB	0c0H, 0c7H, ' ', 0bbH, 0e7H, 0c0H, 0daH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFJNECKA@?$LD?$LC?5?$CF3d@
CONST	SEGMENT
??_C@_06FFJNECKA@?$LD?$LC?5?$CF3d@ DB 0b3H, 0b2H, ' %3d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKNDGEEE@?$LF?$LP?5?$CF3d@
CONST	SEGMENT
??_C@_06IKNDGEEE@?$LF?$LP?5?$CF3d@ DB 0b5H, 0bfH, ' %3d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OOMMIBOD@?A?V?$LM?z?$MA?L?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
CONST	SEGMENT
??_C@_0BB@OOMMIBOD@?A?V?$LM?z?$MA?L?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ DB 0c1H
	DB	0d6H, 0bcH, 0faH, 0c0H, 0ccH, ' ', 0beH, 0f8H, 0bdH, 0c0H, 0b4H
	DB	0cfH, 0b4H, 0d9H, '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HFNBMNBH@?$CF2d?1?$CF2d@
CONST	SEGMENT
??_C@_07HFNBMNBH@?$CF2d?1?$CF2d@ DB '%2d/%2d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNJBHMGB@?$CF10d@
CONST	SEGMENT
??_C@_04FNJBHMGB@?$CF10d@ DB '%10d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCAOMEHC@?$LA?$KN?H?$KN@
CONST	SEGMENT
??_C@_04BCAOMEHC@?$LA?$KN?H?$KN@ DB 0b0H, 0adH, 0c8H, 0adH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LECOJKED@?$LM?v?$LI?$KO@
CONST	SEGMENT
??_C@_04LECOJKED@?$LM?v?$LI?$KO@ DB 0bcH, 0f6H, 0b8H, 0aeH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CENFCOIH@?A?$KE?$LB?$LD@
CONST	SEGMENT
??_C@_04CENFCOIH@?A?$KE?$LB?$LD@ DB 0c1H, 0a4H, 0b1H, 0b3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLDAGEJM@?A?$KE?$LH?C?1?A?$KE?A?$KG@
CONST	SEGMENT
??_C@_09JLDAGEJM@?A?$KE?$LH?C?1?A?$KE?A?$KG@ DB 0c1H, 0a4H, 0b7H, 0c3H, '/'
	DB	0c1H, 0a4H, 0c1H, 0a6H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JJOHPIH@?$LP?d?$LI?$KO@
CONST	SEGMENT
??_C@_04JJOHPIH@?$LP?d?$LI?$KO@ DB 0bfH, 0e4H, 0b8H, 0aeH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBAMDEME@?G?U?$LM?$LK@
CONST	SEGMENT
??_C@_04KBAMDEME@?G?U?$LM?$LK@ DB 0c7H, 0d5H, 0bcH, 0baH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FMLOPNNF@?E?$LO?$LN?B?F?j?$MA?e?$LK?q?$LI?$KG?5?B?x?$LP?k?G?R?$LM?v?$LO?x?$LO?n?$LP?d?$KD?$KB@
CONST	SEGMENT
??_C@_0BO@FMLOPNNF@?E?$LO?$LN?B?F?j?$MA?e?$LK?q?$LI?$KG?5?B?x?$LP?k?G?R?$LM?v?$LO?x?$LO?n?$LP?d?$KD?$KB@ DB 0c5H
	DB	0beH, 0bdH, 0c2H, 0c6H, 0eaH, 0c0H, 0e5H, 0baH, 0f1H, 0b8H, 0a6H
	DB	' ', 0c2H, 0f8H, 0bfH, 0ebH, 0c7H, 0d2H, 0bcH, 0f6H, 0beH, 0f8H
	DB	0beH, 0eeH, 0bfH, 0e4H, 0a3H, 0a1H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBIHDIM@?$DP?$DP?$NM?t?J?$KG?$DP?$DP?$DP?$KD?$KB@
CONST	SEGMENT
??_C@_0M@KBIHDIM@?$DP?$DP?$NM?t?J?$KG?$DP?$DP?$DP?$KD?$KB@ DB '??', 0dcH, 0f4H
	DB	0caH, 0a6H, '???', 0a3H, 0a1H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OHLEHKNP@?$LD?$LL?$LB?$LI?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_08OHLEHKNP@?$LD?$LL?$LB?$LI?$CI?$CFs?$CJ@ DB 0b3H, 0bbH, 0b1H, 0b8H
	DB	'(%s)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04DMAFGKHI@?$LN?$LK?E?f@
CONST	SEGMENT
??_C@_04DMAFGKHI@?$LN?$LK?E?f@ DB 0bdH, 0baH, 0c5H, 0e6H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CFBINIFC@?R?$LB?N?y?S?x?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0L@CFBINIFC@?R?$LB?N?y?S?x?$CI?$CFs?$CJ@ DB 0d2H, 0b1H, 0ceH, 0f9H, 0d3H
	DB	0f8H, '(%s)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PEOHJCFP@?$NO?E?i?D?T?u?$DP?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0M@PEOHJCFP@?$NO?E?i?D?T?u?$DP?$KD?$LK?$CFd@ DB 0deH, 0c5H, 0e9H, 0c4H
	DB	0d4H, 0f5H, '?', 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HANCGCKL@?T?$LD?N?$PN?$DP?z?$PO?$KD?$LK?$CFs?$CI?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BA@HANCGCKL@?T?$LD?N?$PN?$DP?z?$PO?$KD?$LK?$CFs?$CI?$CFd?$CJ@ DB 0d4H
	DB	0b3H, 0ceH, 0fdH, '?', 0faH, 0feH, 0a3H, 0baH, '%s(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJIDMKKD@?R?$LB?5?N?y?5?S?x?$KD?$LK?$CFs@
CONST	SEGMENT
??_C@_0N@OJIDMKKD@?R?$LB?5?N?y?5?S?x?$KD?$LK?$CFs@ DB 0d2H, 0b1H, ' ', 0ceH
	DB	0f9H, ' ', 0d3H, 0f8H, 0a3H, 0baH, '%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HADHEFCA@?$DP?Z?$KK?J?E@
CONST	SEGMENT
??_C@_05HADHEFCA@?$DP?Z?$KK?J?E@ DB '?', 0daH, 0aaH, 0caH, 0c5H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLOJBJDG@?$DP?Z?$KK?$DP?w?$NP@
CONST	SEGMENT
??_C@_06KLOJBJDG@?$DP?Z?$KK?$DP?w?$NP@ DB '?', 0daH, 0aaH, '?', 0f7H, 0dfH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04DKIAPBFG@?b?$KC?w?$NP@
CONST	SEGMENT
??_C@_04DKIAPBFG@?b?$KC?w?$NP@ DB 0e2H, 0a2H, 0f7H, 0dfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@
CONST	SEGMENT
??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@ DB 0fbH, 0b9H, 0edH, 0adH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02OEJDJEF@?b?j@
CONST	SEGMENT
??_C@_02OEJDJEF@?b?j@ DB 0e2H, 0eaH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPBNCICL@?l?i?Z?u?Z?$KK?y?$KB@
CONST	SEGMENT
??_C@_08PPBNCICL@?l?i?Z?u?Z?$KK?y?$KB@ DB 0ecH, 0e9H, 0daH, 0f5H, 0daH, 0aaH
	DB	0f9H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCBNMKHJ@?w?a?$DP?$OA?$LE@
CONST	SEGMENT
??_C@_05NCBNMKHJ@?w?a?$DP?$OA?$LE@ DB 0f7H, 0e1H, '?', 0e0H, 0b4H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGKIIEAG@?w?a?$DP?$NN?$KI?$DP@
CONST	SEGMENT
??_C@_06GGKIIEAG@?w?a?$DP?$NN?$KI?$DP@ DB 0f7H, 0e1H, '?', 0ddH, 0a8H, '?'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05EGENBHF@?$PM?$NO?$OA?A?$DP@
CONST	SEGMENT
??_C@_05EGENBHF@?$PM?$NO?$OA?A?$DP@ DB 0fcH, 0deH, 0e0H, 0c1H, '?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JLPLGDIB@?$NM?E?w?W?Z?$KK?y?$KB@
CONST	SEGMENT
??_C@_08JLPLGDIB@?$NM?E?w?W?Z?$KK?y?$KB@ DB 0dcH, 0c5H, 0f7H, 0d7H, 0daH, 0aaH
	DB	0f9H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHFFLKOE@?$DP?c?s?$NN?$KM@
CONST	SEGMENT
??_C@_05MHFFLKOE@?$DP?c?s?$NN?$KM@ DB '?', 0e3H, 0f3H, 0ddH, 0acH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEMIHOKC@?Z?$LB?r?$LB@
CONST	SEGMENT
??_C@_04BEMIHOKC@?Z?$LB?r?$LB@ DB 0daH, 0b1H, 0f2H, 0b1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HHFHKOHM@?$DP?$DP@
CONST	SEGMENT
??_C@_02HHFHKOHM@?$DP?$DP@ DB '??', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFKKHGPD@?k?$PN?$NM?W?1?$DP?K?$KD@
CONST	SEGMENT
??_C@_08FFKKHGPD@?k?$PN?$NM?W?1?$DP?K?$KD@ DB 0ebH, 0fdH, 0dcH, 0d7H, '/?'
	DB	0cbH, 0a3H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04CECPHKEL@?b?j?x?$KL@
CONST	SEGMENT
??_C@_04CECPHKEL@?b?j?x?$KL@ DB 0e2H, 0eaH, 0f8H, 0abH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02NNCIDFDN@?O?a@
CONST	SEGMENT
??_C@_02NNCIDFDN@?O?a@ DB 0cfH, 0e1H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HECMHKAJ@?M?b?$NM?j@
CONST	SEGMENT
??_C@_04HECMHKAJ@?M?b?$NM?j@ DB 0cdH, 0e2H, 0dcH, 0eaH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEECJACC@?p?P@
CONST	SEGMENT
??_C@_02DEECJACC@?p?P@ DB 0f0H, 0d0H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOCHGIJI@?$LO?F?$MA?L?E?$NL?5?$MA?Z?$LF?$LP?5?$LA?c?D?$KB?$LB?b?$KB?$KD@
CONST	SEGMENT
??_C@_0BF@EOCHGIJI@?$LO?F?$MA?L?E?$NL?5?$MA?Z?$LF?$LP?5?$LA?c?D?$KB?$LB?b?$KB?$KD@ DB 0beH
	DB	0c6H, 0c0H, 0ccH, 0c5H, 0dbH, ' ', 0c0H, 0daH, 0b5H, 0bfH, ' ', 0b0H
	DB	0e3H, 0c4H, 0a1H, 0b1H, 0e2H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBNACIMP@?5?5?5?5?5?5?5?$CF?922s@
CONST	SEGMENT
??_C@_0N@DBNACIMP@?5?5?5?5?5?5?5?$CF?922s@ DB '       %-22s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JNOMDMDH@?$CF3d?$CF?$CF@
CONST	SEGMENT
??_C@_05JNOMDMDH@?$CF3d?$CF?$CF@ DB '%3d%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGGBINEM@?$CFs?$CFd@
CONST	SEGMENT
??_C@_04HGGBINEM@?$CFs?$CFd@ DB '%s%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EOIDJNGE@?5?$CL@
CONST	SEGMENT
??_C@_02EOIDJNGE@?5?$CL@ DB ' +', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GFJLOHHD@?$CF?43f@
CONST	SEGMENT
??_C@_04GFJLOHHD@?$CF?43f@ DB '%.3f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NPOEHNBK@?$CF4d?5?1?5?$CF4d@
CONST	SEGMENT
??_C@_09NPOEHNBK@?$CF4d?5?1?5?$CF4d@ DB '%4d / %4d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MEIFLDBG@?$CFd?1?$CFd?5?5?$CI?$CF?42f?$CF?$CF?$CJ@
CONST	SEGMENT
??_C@_0BA@MEIFLDBG@?$CFd?1?$CFd?5?5?$CI?$CF?42f?$CF?$CF?$CJ@ DB '%d/%d  ('
	DB	'%.2f%%)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03GOOLIKIF@?$CF3d@
CONST	SEGMENT
??_C@_03GOOLIKIF@?$CF3d@ DB '%3d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOKBNALB@?$CFs?5?$CF?916s@
CONST	SEGMENT
??_C@_08DOKBNALB@?$CFs?5?$CF?916s@ DB '%s %-16s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BLADCOKI@?$FLLOCK?$FN@
CONST	SEGMENT
??_C@_06BLADCOKI@?$FLLOCK?$FN@ DB '[LOCK]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CFBKFGII@?$CFs?5?C?T?$LP?$LF?$KD?$KB@
CONST	SEGMENT
??_C@_09CFBKFGII@?$CFs?5?C?T?$LP?$LF?$KD?$KB@ DB '%s ', 0c3H, 0d4H, 0bfH, 0b5H
	DB	0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OLBLGPHG@?F?d?F?$KO?$LA?$KB?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
CONST	SEGMENT
??_C@_0BB@OLBLGPHG@?F?d?F?$KO?$LA?$KB?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@ DB 0c6H
	DB	0e4H, 0c6H, 0aeH, 0b0H, 0a1H, ' ', 0beH, 0f8H, 0bdH, 0c0H, 0b4H
	DB	0cfH, 0b4H, 0d9H, '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PMPFNJLM@?$CF3d?5?5?5?5?5?$CF4d?5?5?5?$CF4d@
CONST	SEGMENT
??_C@_0BC@PMPFNJLM@?$CF3d?5?5?5?5?5?$CF4d?5?5?5?$CF4d@ DB '%3d     %4d   '
	DB	'%4d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMGOANLP@?$CF?916s@
CONST	SEGMENT
??_C@_05EMGOANLP@?$CF?916s@ DB '%-16s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ILNBPEIE@?F?d?F?$KO?$LI?$KG?5?$LJ?v?$LI?$LB?$LB?n?$LP?d?$KD?$LP@
CONST	SEGMENT
??_C@_0BC@ILNBPEIE@?F?d?F?$KO?$LI?$KG?5?$LJ?v?$LI?$LB?$LB?n?$LP?d?$KD?$LP@ DB 0c6H
	DB	0e4H, 0c6H, 0aeH, 0b8H, 0a6H, ' ', 0b9H, 0f6H, 0b8H, 0b1H, 0b1H
	DB	0eeH, 0bfH, 0e4H, 0a3H, 0bfH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFALBHEL@R?$HMP?$HM?91@
CONST	SEGMENT
??_C@_06EFALBHEL@R?$HMP?$HM?91@ DB 'R|P|-1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GNJPGDIA@?$HLpet?$DN?$CFd?0str?$DN?$FL?$CFs?$FN?$HN@
CONST	SEGMENT
??_C@_0BC@GNJPGDIA@?$HLpet?$DN?$CFd?0str?$DN?$FL?$CFs?$FN?$HN@ DB '{pet=%'
	DB	'd,str=[%s]}', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KBOLHIJH@?$LL?s?A?$KB?$LB?b?$LE?I?$MA?L?$LP?k?$LN?C?0?5?F?d?F?$KO?$LI?$KG?$LK?$KP?$LA?f?G?R?$LM?v?$LO@
CONST	SEGMENT
??_C@_0CG@KBOLHIJH@?$LL?s?A?$KB?$LB?b?$LE?I?$MA?L?$LP?k?$LN?C?0?5?F?d?F?$KO?$LI?$KG?$LK?$KP?$LA?f?G?R?$LM?v?$LO@ DB 0bbH
	DB	0f3H, 0c1H, 0a1H, 0b1H, 0e2H, 0b4H, 0c9H, 0c0H, 0ccH, 0bfH, 0ebH
	DB	0bdH, 0c3H, ', ', 0c6H, 0e4H, 0c6H, 0aeH, 0b8H, 0a6H, 0baH, 0afH
	DB	0b0H, 0e6H, 0c7H, 0d2H, 0bcH, 0f6H, 0beH, 0f8H, 0beH, 0eeH, 0bfH
	DB	0e4H, '!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGHFNJMD@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_05GGHFNJMD@?$CFs?$CFs?$AA@ DB '%s%s', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PPGFHNAN@?$MA?g?$LH?a?G?U?$LM?$LK?5?$LM?$LK?$LA?x?$MA?$LC?$AA@
CONST	SEGMENT
??_C@_0BB@PPGFHNAN@?$MA?g?$LH?a?G?U?$LM?$LK?5?$LM?$LK?$LA?x?$MA?$LC?$AA@ DB 0c0H
	DB	0e7H, 0b7H, 0e1H, 0c7H, 0d5H, 0bcH, 0baH, ' ', 0bcH, 0baH, 0b0H
	DB	0f8H, 0c0H, 0b2H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JOENNLPN@?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?O?$LP?$KJ?$FL?$CFs?$FN?$LI?$KG?5?$LD?t?$MA?O@
CONST	SEGMENT
??_C@_0CJ@JOENNLPN@?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?O?$LP?$KJ?$FL?$CFs?$FN?$LI?$KG?5?$LD?t?$MA?O@ DB 0c0H
	DB	0e7H, 0b7H, 0e1H, ' ', 0bcH, 0d3H, 0bcH, 0baH, 0c0H, 0bbH, ' ', 0c8H
	DB	0aeH, 0c0H, 0ceH, 0c7H, 0cfH, 0bfH, 0a9H, '[%s]', 0b8H, 0a6H, ' '
	DB	0b3H, 0f4H, 0c0H, 0cfH, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H
	DB	0bdH, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BAIOACBP@?$FL?$CFs?$FN?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?T?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0CH@BAIOACBP@?$FL?$CFs?$FN?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?T?5?5?5?5?5?5?5?5?5@ DB '['
	DB	'%s]', 0c0H, 0e7H, 0b7H, 0e1H, ' ', 0bcH, 0d3H, 0bcH, 0baH, 0c0H
	DB	0bbH, ' ', 0c8H, 0aeH, 0c0H, 0ceH, 0c7H, 0d4H, '         %d %%'
	DB	' ', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HALJJKGM@?$MA?g?$LH?a?5?G?U?$LM?$LK?5?$LM?$LK?$LA?x?$MA?$LC?$AA@
CONST	SEGMENT
??_C@_0BC@HALJJKGM@?$MA?g?$LH?a?5?G?U?$LM?$LK?5?$LM?$LK?$LA?x?$MA?$LC?$AA@ DB 0c0H
	DB	0e7H, 0b7H, 0e1H, ' ', 0c7H, 0d5H, 0bcH, 0baH, ' ', 0bcH, 0baH
	DB	0b0H, 0f8H, 0c0H, 0b2H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@CAIJDNGD@?$DP?i?M?$FL?$CFs?$FN?$MA?g?$LH?a?$MA?G?5?$LM?S?$LM?$LK?$MA?$LL?5?$LA?$KI?A?$KE?1?H?$KO?$MA?N?G@
CONST	SEGMENT
??_C@_0EG@CAIJDNGD@?$DP?i?M?$FL?$CFs?$FN?$MA?g?$LH?a?$MA?G?5?$LM?S?$LM?$LK?$MA?$LL?5?$LA?$KI?A?$KE?1?H?$KO?$MA?N?G@ DB '?'
	DB	0e9H, 0cdH, '[%s]', 0c0H, 0e7H, 0b7H, 0e1H, 0c0H, 0c7H, ' ', 0bcH
	DB	0d3H, 0bcH, 0baH, 0c0H, 0bbH, ' ', 0b0H, 0a8H, 0c1H, 0a4H, '/', 0c8H
	DB	0aeH, 0c0H, 0ceH, 0c7H, 0cfH, 0bfH, 0a9H, ' ', 0c0H, 0e7H, 0b7H
	DB	0e1H, ' ', 0c7H, 0d5H, 0bcH, 0baH, 0c0H, 0c7H, ' ', 0bcH, 0baH
	DB	0b0H, 0f8H, 0c0H, 0b2H, 0c0H, 0bbH, ' ', 0b3H, 0f4H, 0c0H, 0cfH
	DB	' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IJGAMOEE@?$FL?$CFs?$FN?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?T?5?5?5?5?5?5?5?$CFd@
CONST	SEGMENT
??_C@_0CF@IJGAMOEE@?$FL?$CFs?$FN?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?T?5?5?5?5?5?5?5?$CFd@ DB '['
	DB	'%s]', 0c0H, 0e7H, 0b7H, 0e1H, ' ', 0bcH, 0d3H, 0bcH, 0baH, 0c0H
	DB	0bbH, ' ', 0c8H, 0aeH, 0c0H, 0ceH, 0c7H, 0d4H, '       %d %% ', 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07JANMBDEO@?$CF4d?5?$CF4d@
CONST	SEGMENT
??_C@_07JANMBDEO@?$CF4d?5?$CF4d@ DB '%4d %4d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09COLCMPMP@?$CF4d?5?5?5?$CF4d@
CONST	SEGMENT
??_C@_09COLCMPMP@?$CF4d?5?5?5?$CF4d@ DB '%4d   %4d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d@ DB '%4d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HIFDAEPP@?$CF?9d@
CONST	SEGMENT
??_C@_03HIFDAEPP@?$CF?9d@ DB '%-d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MMCGBDJK@0?$CF@
CONST	SEGMENT
??_C@_02MMCGBDJK@0?$CF@ DB '0%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03GNABGMEE@100@
CONST	SEGMENT
??_C@_03GNABGMEE@100@ DB '100', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFBICKBP@?$CF?93d@
CONST	SEGMENT
??_C@_04EFBICKBP@?$CF?93d@ DB '%-3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EAFHDMJK@?$CF?94d@
CONST	SEGMENT
??_C@_04EAFHDMJK@?$CF?94d@ DB '%-4d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ODJBNPN@?$CFd?5?$CI?$CF?42f?$CF?$CF?$CJ@
CONST	SEGMENT
??_C@_0M@ODJBNPN@?$CFd?5?$CI?$CF?42f?$CF?$CF?$CJ@ DB '%d (%.2f%%)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LEPPJAKI@MAX@
CONST	SEGMENT
??_C@_03LEPPJAKI@MAX@ DB 'MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DONLOGLK@?$CFd?5?$CI?$CFd?$CJ@
CONST	SEGMENT
??_C@_07DONLOGLK@?$CFd?5?$CI?$CFd?$CJ@ DB '%d (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KGJCGBCP@?5?5?5?5?C?k?5?5?5?5?$LM?R?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BC@KGJCGBCP@?5?5?5?5?C?k?5?5?5?5?$LM?R?5?5?5?5?5@ DB '    ', 0c3H, 0ebH
	DB	'    ', 0bcH, 0d2H, '     ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BCIJAKBP@?5?5?5?5?H?$KO?5?5?5?5?$MA?N?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BC@BCIJAKBP@?5?5?5?5?H?$KO?5?5?5?5?$MA?N?5?5?5?5?5@ DB '    ', 0c8H
	DB	0aeH, '    ', 0c0H, 0ceH, '     ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NJPDCGDE@?5?5?5?5?5?5?5?A?$LO?5?5?$LH?a?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BF@NJPDCGDE@?5?5?5?5?5?5?5?A?$LO?5?5?$LH?a?5?5?5?5?5?5?5@ DB '    '
	DB	'   ', 0c1H, 0beH, '  ', 0b7H, 0e1H, '       ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KDDPLIEA@?5?$KB?$NP?5?D?$LP?5?$LM?$KN?5?$LM?$LD?5?A?$KE?5?$KB?$NP?5?5?5@
CONST	SEGMENT
??_C@_0BG@KDDPLIEA@?5?$KB?$NP?5?D?$LP?5?$LM?$KN?5?$LM?$LD?5?A?$KE?5?$KB?$NP?5?5?5@ DB ' '
	DB	0a1H, 0dfH, ' ', 0c4H, 0bfH, ' ', 0bcH, 0adH, ' ', 0bcH, 0b3H, ' '
	DB	0c1H, 0a4H, ' ', 0a1H, 0dfH, '   ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMHKBLHA@?$LL?$MA?$LE?Y?$LB?M?$KB?$KD@
CONST	SEGMENT
??_C@_08LMHKBLHA@?$LL?$MA?$LE?Y?$LB?M?$KB?$KD@ DB 0bbH, 0c0H, 0b4H, 0d9H, 0b1H
	DB	0cdH, 0a1H, 0a3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPIKKIN@?$LA?x?$LH?f?$LO?K?$KB?$KD@
CONST	SEGMENT
??_C@_08LPIKKIN@?$LA?x?$LH?f?$LO?K?$KB?$KD@ DB 0b0H, 0f8H, 0b7H, 0e6H, 0beH
	DB	0cbH, 0a1H, 0a3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GDIAHGPK@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BG@GDIAHGPK@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5@ DB ' '
	DB	'      ', 0b0H, 0a8H, '    ', 0bcH, 0d2H, '      ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IIDNKJBP@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BG@IIDNKJBP@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5@ DB '  '
	DB	'     ', 0c1H, 0f5H, '    ', 0b0H, 0a1H, '      ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FEMCCNKI@?5?5?5?$KB?$NP?5?5?E?$NL?F?w?A?$LG?$MA?$PN?5?5?$CF?$CL3d?5?5?$KB?$NP@
CONST	SEGMENT
??_C@_0BK@FEMCCNKI@?5?5?5?$KB?$NP?5?5?E?$NL?F?w?A?$LG?$MA?$PN?5?5?$CF?$CL3d?5?5?$KB?$NP@ DB ' '
	DB	'  ', 0a1H, 0dfH, '  ', 0c5H, 0dbH, 0c6H, 0f7H, 0c1H, 0b6H, 0c0H
	DB	0fdH, '  %+3d  ', 0a1H, 0dfH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BJPCPCNM@?$KB?$NP?5?5?5?$KB?$NP?5?5?E?$NL?F?w?A?$LG?$MA?$PN?5?50?5?5?$KB?$NP?$KB?$NP@
CONST	SEGMENT
??_C@_0BL@BJPCPCNM@?$KB?$NP?5?5?5?$KB?$NP?5?5?E?$NL?F?w?A?$LG?$MA?$PN?5?50?5?5?$KB?$NP?$KB?$NP@ DB 0a1H
	DB	0dfH, '   ', 0a1H, 0dfH, '  ', 0c5H, 0dbH, 0c6H, 0f7H, 0c1H, 0b6H
	DB	0c0H, 0fdH, '  0  ', 0a1H, 0dfH, 0a1H, 0dfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MMNCCENM@?5?5?5?$KB?$NP?5?5?$LJ?h?$LA?f?$MA?$LN?$LO?G?5?$CF3d?5?5?$KB?$NP@
CONST	SEGMENT
??_C@_0BI@MMNCCENM@?5?5?5?$KB?$NP?5?5?$LJ?h?$LA?f?$MA?$LN?$LO?G?5?$CF3d?5?5?$KB?$NP@ DB ' '
	DB	'  ', 0a1H, 0dfH, '  ', 0b9H, 0e8H, 0b0H, 0e6H, 0c0H, 0bdH, 0beH
	DB	0c7H, ' %3d  ', 0a1H, 0dfH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GJAFKJDC@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BJ@GJAFKJDC@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5?5@ DB ' '
	DB	'     ', 0b5H, 0b9H, ' ', 0beH, 0c6H, ' ', 0b0H, 0a1H, ' ', 0b1H
	DB	0e2H, '       ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FONPGALA@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?5?$LM?R?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BI@FONPGALA@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?5?$LM?R?5?5?5?5?5?5?5@ DB ' '
	DB	'      ', 0b0H, 0a8H, '     ', 0bcH, 0d2H, '       ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KPMMPACD@?5?5?5?5?5?5?5?A?u?5?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BI@KPMMPACD@?5?5?5?5?5?5?5?A?u?5?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@ DB ' '
	DB	'      ', 0c1H, 0f5H, '     ', 0b0H, 0a1H, '       ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OHLFALHA@?5?5?$KB?$NP?5?5?G?v?5?$MA?g?5?$MA?$LN?5?$LH?$KO?$CF3d?5?5?$KB?$NP?5?5@
CONST	SEGMENT
??_C@_0BL@OHLFALHA@?5?5?$KB?$NP?5?5?G?v?5?$MA?g?5?$MA?$LN?5?$LH?$KO?$CF3d?5?5?$KB?$NP?5?5@ DB ' '
	DB	' ', 0a1H, 0dfH, '  ', 0c7H, 0f6H, ' ', 0c0H, 0e7H, ' ', 0c0H, 0bdH
	DB	' ', 0b7H, 0aeH, '%3d  ', 0a1H, 0dfH, '  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DIAFOMFL@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BI@DIAFOMFL@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5@ DB ' '
	DB	'     ', 0b5H, 0b9H, ' ', 0beH, 0c6H, ' ', 0b0H, 0a1H, ' ', 0b1H
	DB	0e2H, '      ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MIIPLPNG@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BH@MIIPLPNG@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5?5@ DB ' '
	DB	'      ', 0b0H, 0a8H, '    ', 0bcH, 0d2H, '       ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BIAEBEPO@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BH@BIAEBEPO@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@ DB ' '
	DB	'      ', 0c1H, 0f5H, '    ', 0b0H, 0a1H, '       ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KBNPCBGD@?5?5?5?5?5?$KB?$NP?5?C?$KE?5?F?C?5?$LJ?$PM?5?$MA?$KH?5?$CF3d?5?$KB?$NP@
CONST	SEGMENT
??_C@_0BL@KBNPCBGD@?5?5?5?5?5?$KB?$NP?5?C?$KE?5?F?C?5?$LJ?$PM?5?$MA?$KH?5?$CF3d?5?$KB?$NP@ DB ' '
	DB	'    ', 0a1H, 0dfH, ' ', 0c3H, 0a4H, ' ', 0c6H, 0c3H, ' ', 0b9H
	DB	0fcH, ' ', 0c0H, 0a7H, ' %3d ', 0a1H, 0dfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FHOMOHBA@?5?5?5?5?5?5?5?5?$LJ?$KO?$MA?Z?5?$LM?$LD?A?$KE?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BI@FHOMOHBA@?5?5?5?5?5?5?5?5?$LJ?$KO?$MA?Z?5?$LM?$LD?A?$KE?5?5?5?5?5?5@ DB ' '
	DB	'       ', 0b9H, 0aeH, 0c0H, 0daH, ' ', 0bcH, 0b3H, 0c1H, 0a4H
	DB	'      ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BHEDFJKF@?5?5?5?5?5?$LL?v?$LL?s?5?$LK?$KP?$LA?f?$CI?$CF?92d?$CJ?5?5@
CONST	SEGMENT
??_C@_0BH@BHEDFJKF@?5?5?5?5?5?$LL?v?$LL?s?5?$LK?$KP?$LA?f?$CI?$CF?92d?$CJ?5?5@ DB ' '
	DB	'    ', 0bbH, 0f6H, 0bbH, 0f3H, ' ', 0baH, 0afH, 0b0H, 0e6H, '('
	DB	'%-2d)  ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLOMOPMG@?5?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BH@LLOMOPMG@?5?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5@ DB ' '
	DB	'       ', 0b0H, 0a8H, '    ', 0bcH, 0d2H, '      ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FAFBDACD@?5?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0BH@FAFBDACD@?5?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5@ DB ' '
	DB	'       ', 0c1H, 0f5H, '    ', 0b0H, 0a1H, '      ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ENKFHEAF@?5?5?5?5?5?$KB?$NP?5?C?$KE?F?C?5?G?$KF?$LN?C?5?$CF3d?5?A?Y?5?$KB?$NP@
CONST	SEGMENT
??_C@_0BM@ENKFHEAF@?5?5?5?5?5?$KB?$NP?5?C?$KE?F?C?5?G?$KF?$LN?C?5?$CF3d?5?A?Y?5?$KB?$NP@ DB ' '
	DB	'    ', 0a1H, 0dfH, ' ', 0c3H, 0a4H, 0c6H, 0c3H, ' ', 0c7H, 0a5H
	DB	0bdH, 0c3H, ' %3d ', 0c1H, 0d9H, ' ', 0a1H, 0dfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BOIANLGK@?$KB?$KB?$KB?$KB?5?C?k?5?5?5?5?5?$LM?R?$KB?$KB?$KB?$KB@
CONST	SEGMENT
??_C@_0BD@BOIANLGK@?$KB?$KB?$KB?$KB?5?C?k?5?5?5?5?5?$LM?R?$KB?$KB?$KB?$KB@ DB 0a1H
	DB	0a1H, 0a1H, 0a1H, ' ', 0c3H, 0ebH, '     ', 0bcH, 0d2H, 0a1H, 0a1H
	DB	0a1H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOMGLKIA@?$KB?$KB?$KB?$KB?5?H?$KO?5?5?5?5?5?$MA?N?$KB?$KB?$KB?$KB@
CONST	SEGMENT
??_C@_0BD@KOMGLKIA@?$KB?$KB?$KB?$KB?5?H?$KO?5?5?5?5?5?$MA?N?$KB?$KB?$KB?$KB@ DB 0a1H
	DB	0a1H, 0a1H, 0a1H, ' ', 0c8H, 0aeH, '     ', 0c0H, 0ceH, 0a1H, 0a1H
	DB	0a1H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DEIGFB@?$KB?$KB?$LE?$NN?$KB?$KB?$KB?$KB?$LB?b?$KB?$KB@
CONST	SEGMENT
??_C@_0N@DEIGFB@?$KB?$KB?$LE?$NN?$KB?$KB?$KB?$KB?$LB?b?$KB?$KB@ DB 0a1H, 0a1H
	DB	0b4H, 0ddH, 0a1H, 0a1H, 0a1H, 0a1H, 0b1H, 0e2H, 0a1H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KCFDOFBO@?5?5?$MA?Z?$LF?$LP?D?Q?$LB?b?5?5@
CONST	SEGMENT
??_C@_0N@KCFDOFBO@?5?5?$MA?Z?$LF?$LP?D?Q?$LB?b?5?5@ DB '  ', 0c0H, 0daH, 0b5H
	DB	0bfH, 0c4H, 0d1H, 0b1H, 0e2H, '  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HKIKJEIK@?5?5?$MA?Z?$LF?$LP?$LC?t?$LB?b?5?5@
CONST	SEGMENT
??_C@_0N@HKIKJEIK@?5?5?$MA?Z?$LF?$LP?$LC?t?$LB?b?5?5@ DB '  ', 0c0H, 0daH
	DB	0b5H, 0bfH, 0b2H, 0f4H, 0b1H, 0e2H, '  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEFBJPHL@?5?5?$MA?$LN?$LO?G?$LC?t?$LB?b?5?5@
CONST	SEGMENT
??_C@_0N@LEFBJPHL@?5?5?$MA?$LN?$LO?G?$LC?t?$LB?b?5?5@ DB '  ', 0c0H, 0bdH
	DB	0beH, 0c7H, 0b2H, 0f4H, 0b1H, 0e2H, '  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GMIIOOOP@?5?5?$MA?$LN?$LO?G?D?Q?$LB?b?5?5@
CONST	SEGMENT
??_C@_0N@GMIIOOOP@?5?5?$MA?$LN?$LO?G?D?Q?$LB?b?5?5@ DB '  ', 0c0H, 0bdH, 0beH
	DB	0c7H, 0c4H, 0d1H, 0b1H, 0e2H, '  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HLPCCAFM@?5?5?5?5?F?j?C?$KC?$LA?m?5?5@
CONST	SEGMENT
??_C@_0N@HLPCCAFM@?5?5?5?5?F?j?C?$KC?$LA?m?5?5@ DB '    ', 0c6H, 0eaH, 0c3H
	DB	0a2H, 0b0H, 0edH, '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LBIEPHK@?5?5?5?5?E?$NL?C?$KC?$LA?m?5?5@
CONST	SEGMENT
??_C@_0N@LBIEPHK@?5?5?5?5?E?$NL?C?$KC?$LA?m?5?5@ DB '    ', 0c5H, 0dbH, 0c3H
	DB	0a2H, 0b0H, 0edH, '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BBDDKJIA@?5?5?5?5?$KD?A?$KD?I?$LM?$LD?A?$KE?5?5?5?5@
CONST	SEGMENT
??_C@_0BB@BBDDKJIA@?5?5?5?5?$KD?A?$KD?I?$LM?$LD?A?$KE?5?5?5?5@ DB '    ', 0a3H
	DB	0c1H, 0a3H, 0c9H, 0bcH, 0b3H, 0c1H, 0a4H, '    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IBKCAFGG@?5?5?5?5?H?$LP?$LA?z?$LM?$LD?A?$KE?5?5?5?5@
CONST	SEGMENT
??_C@_0BB@IBKCAFGG@?5?5?5?5?H?$LP?$LA?z?$LM?$LD?A?$KE?5?5?5?5@ DB '    ', 0c8H
	DB	0bfH, 0b0H, 0faH, 0bcH, 0b3H, 0c1H, 0a4H, '    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EOMINEH@?5?5?5?5?$LJ?h?$LA?f?$MA?$LN?$LO?G?5?5?5?5@
CONST	SEGMENT
??_C@_0BB@EOMINEH@?5?5?5?5?$LJ?h?$LA?f?$MA?$LN?$LO?G?5?5?5?5@ DB '    ', 0b9H
	DB	0e8H, 0b0H, 0e6H, 0c0H, 0bdH, 0beH, 0c7H, '    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JJJAMCHF@?5?5?5?5?C?$KE?F?C?$LM?$LD?A?$KE?5?5?5?5@
CONST	SEGMENT
??_C@_0BB@JJJAMCHF@?5?5?5?5?C?$KE?F?C?$LM?$LD?A?$KE?5?5?5?5@ DB '    ', 0c3H
	DB	0a4H, 0c6H, 0c3H, 0bcH, 0b3H, 0c1H, 0a4H, '    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KCHLCCBP@?5?5?5?5?$LH?N?$LB?W?$LO?F?$LP?t?5?5?5?5@
CONST	SEGMENT
??_C@_0BB@KCHLCCBP@?5?5?5?5?$LH?N?$LB?W?$LO?F?$LP?t?5?5?5?5@ DB '    ', 0b7H
	DB	0ceH, 0b1H, 0d7H, 0beH, 0c6H, 0bfH, 0f4H, '    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MEGGIBAG@?5?5?5?5?$LI?$LG?$MA?$LL?$LA?$KB?$LB?b?5?5?5?5@
CONST	SEGMENT
??_C@_0BB@MEGGIBAG@?5?5?5?5?$LI?$LG?$MA?$LL?$LA?$KB?$LB?b?5?5?5?5@ DB '  '
	DB	'  ', 0b8H, 0b6H, 0c0H, 0bbH, 0b0H, 0a1H, 0b1H, 0e2H, '    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HCIPIBLA@?$MA?Z?$LF?$LP?$MA?$PM?E?u?5?$LI?p?$LF?e?$LA?$KB?5?A?$LO?$LH?a?5?$LF?G?$LO?z?$LN?$MA?$LE?O?$LE?Y@
CONST	SEGMENT
??_C@_0CB@HCIPIBLA@?$MA?Z?$LF?$LP?$MA?$PM?E?u?5?$LI?p?$LF?e?$LA?$KB?5?A?$LO?$LH?a?5?$LF?G?$LO?z?$LN?$MA?$LE?O?$LE?Y@ DB 0c0H
	DB	0daH, 0b5H, 0bfH, 0c0H, 0fcH, 0c5H, 0f5H, ' ', 0b8H, 0f0H, 0b5H
	DB	0e5H, 0b0H, 0a1H, ' ', 0c1H, 0beH, 0b7H, 0e1H, ' ', 0b5H, 0c7H
	DB	0beH, 0faH, 0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LEBCBFKD@?$MA?Z?$LF?$LP?$MA?$PM?E?u?5?$LI?p?$LF?e?$LA?$KB?5?H?$LA?$LM?$LK?H?$KN?5?$LF?G?$LO?z?$LN?$MA?$LE?O@
CONST	SEGMENT
??_C@_0CC@LEBCBFKD@?$MA?Z?$LF?$LP?$MA?$PM?E?u?5?$LI?p?$LF?e?$LA?$KB?5?H?$LA?$LM?$LK?H?$KN?5?$LF?G?$LO?z?$LN?$MA?$LE?O@ DB 0c0H
	DB	0daH, 0b5H, 0bfH, 0c0H, 0fcH, 0c5H, 0f5H, ' ', 0b8H, 0f0H, 0b5H
	DB	0e5H, 0b0H, 0a1H, ' ', 0c8H, 0b0H, 0bcH, 0baH, 0c8H, 0adH, ' ', 0b5H
	DB	0c7H, 0beH, 0faH, 0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FDCJGPKI@?$LL?s?E?B?G?$KF?$LN?C?$LC?t?$LB?b?$KD?$KB@
CONST	SEGMENT
??_C@_0P@FDCJGPKI@?$LL?s?E?B?G?$KF?$LN?C?$LC?t?$LB?b?$KD?$KB@ DB 0bbH, 0f3H
	DB	0c5H, 0c2H, 0c7H, 0a5H, 0bdH, 0c3H, 0b2H, 0f4H, 0b1H, 0e2H, 0a3H
	DB	0a1H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BJHPFHFH@?$LL?s?E?B?G?$KF?$LN?C?$LP?$KN?$LB?b?$KD?$KB@
CONST	SEGMENT
??_C@_0P@BJHPFHFH@?$LL?s?E?B?G?$KF?$LN?C?$LP?$KN?$LB?b?$KD?$KB@ DB 0bbH, 0f3H
	DB	0c5H, 0c2H, 0c7H, 0a5H, 0bdH, 0c3H, 0bfH, 0adH, 0b1H, 0e2H, 0a3H
	DB	0a1H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DNLMMAKH@?$LK?$PM?$LI?$KF?$LA?H?$LB?b?$LC?t?$LB?b?$KD?$KB@
CONST	SEGMENT
??_C@_0P@DNLMMAKH@?$LK?$PM?$LI?$KF?$LA?H?$LB?b?$LC?t?$LB?b?$KD?$KB@ DB 0baH
	DB	0fcH, 0b8H, 0a5H, 0b0H, 0c8H, 0b1H, 0e2H, 0b2H, 0f4H, 0b1H, 0e2H
	DB	0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OFGFLBDD@?$LK?$PM?$LI?$KF?$LA?H?$LB?b?D?Q?$LB?b?$KD?$KB@
CONST	SEGMENT
??_C@_0P@OFGFLBDD@?$LK?$PM?$LI?$KF?$LA?H?$LB?b?D?Q?$LB?b?$KD?$KB@ DB 0baH
	DB	0fcH, 0b8H, 0a5H, 0b0H, 0c8H, 0b1H, 0e2H, 0c4H, 0d1H, 0b1H, 0e2H
	DB	0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LGLPBADP@BGM?$MA?L?5?$LC?$KI?A?$LD?$LO?n?$LP?d?$KD?$KB@
CONST	SEGMENT
??_C@_0BB@LGLPBADP@BGM?$MA?L?5?$LC?$KI?A?$LD?$LO?n?$LP?d?$KD?$KB@ DB 'BGM'
	DB	0c0H, 0ccH, ' ', 0b2H, 0a8H, 0c1H, 0b3H, 0beH, 0eeH, 0bfH, 0e4H
	DB	0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KKHECGNN@BGM?$MA?L?5?D?Q?A?$LD?$LO?n?$LP?d?$KD?$KB@
CONST	SEGMENT
??_C@_0BB@KKHECGNN@BGM?$MA?L?5?D?Q?A?$LD?$LO?n?$LP?d?$KD?$KB@ DB 'BGM', 0c0H
	DB	0ccH, ' ', 0c4H, 0d1H, 0c1H, 0b3H, 0beH, 0eeH, 0bfH, 0e4H, 0a3H
	DB	0a1H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PCOGCFAC@?$LB?b?A?$LI?$LJ?v?F?$LA?$KD?$KB@
CONST	SEGMENT
??_C@_0L@PCOGCFAC@?$LB?b?A?$LI?$LJ?v?F?$LA?$KD?$KB@ DB 0b1H, 0e2H, 0c1H, 0b8H
	DB	0b9H, 0f6H, 0c6H, 0b0H, 0a3H, 0a1H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MLOJNNJN@?$LE?$NM?$LM?x?H?$KN?$LJ?v?F?$LA?$KD?$KB@
CONST	SEGMENT
??_C@_0N@MLOJNNJN@?$LE?$NM?$LM?x?H?$KN?$LJ?v?F?$LA?$KD?$KB@ DB 0b4H, 0dcH
	DB	0bcH, 0f8H, 0c8H, 0adH, 0b9H, 0f6H, 0c6H, 0b0H, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JEKFMNHA@?$LL?s?A?$KB?$MA?L?$LP?k?$LN?C?0?5?$LO?F?$MA?L?E?$NL?$LL?g?$LP?k?$MA?$LL?G?R?$LM?v?$LO?x?$LO@
CONST	SEGMENT
??_C@_0CE@JEKFMNHA@?$LL?s?A?$KB?$MA?L?$LP?k?$LN?C?0?5?$LO?F?$MA?L?E?$NL?$LL?g?$LP?k?$MA?$LL?G?R?$LM?v?$LO?x?$LO@ DB 0bbH
	DB	0f3H, 0c1H, 0a1H, 0c0H, 0ccH, 0bfH, 0ebH, 0bdH, 0c3H, ', ', 0beH
	DB	0c6H, 0c0H, 0ccH, 0c5H, 0dbH, 0bbH, 0e7H, 0bfH, 0ebH, 0c0H, 0bbH
	DB	0c7H, 0d2H, 0bcH, 0f6H, 0beH, 0f8H, 0beH, 0eeH, 0bfH, 0e4H, '!'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?statusWndFontNoExtNowCur@?DEM@??MenuProc@@YAXXZ@4HA
_DATA	SEGMENT
?statusWndFontNoExtNowCur@?DEM@??MenuProc@@YAXXZ@4HA DD 02H ; `MenuProc'::`844'::statusWndFontNoExtNowCur
_DATA	ENDS
;	COMDAT ??_C@_04JHHBNKBI@?A?$LO?$LH?a@
CONST	SEGMENT
??_C@_04JHHBNKBI@?A?$LO?$LH?a@ DB 0c1H, 0beH, 0b7H, 0e1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJANLAJP@?D?Q?$LE?Y@
CONST	SEGMENT
??_C@_04CJANLAJP@?D?Q?$LE?Y@ DB 0c4H, 0d1H, 0b4H, 0d9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PNEJOHOF@?A?$KC?$LM?S?$MA?L?$LC?w?$LB?d?5?D?$LD?$LI?$KP?E?M?5?$MA?g?A?$KC?$LM?S?5?$LN?C?5?D?$LD?$LI@
CONST	SEGMENT
??_C@_0CM@PNEJOHOF@?A?$KC?$LM?S?$MA?L?$LC?w?$LB?d?5?D?$LD?$LI?$KP?E?M?5?$MA?g?A?$KC?$LM?S?5?$LN?C?5?D?$LD?$LI@ DB 0c1H
	DB	0a2H, 0bcH, 0d3H, 0c0H, 0ccH, 0b2H, 0f7H, 0b1H, 0e4H, ' ', 0c4H
	DB	0b3H, 0b8H, 0afH, 0c5H, 0cdH, ' ', 0c0H, 0e7H, 0c1H, 0a2H, 0bcH
	DB	0d3H, ' ', 0bdH, 0c3H, ' ', 0c4H, 0b3H, 0b8H, 0afH, 0c5H, 0cdH
	DB	0c0H, 0c7H, ' ', 0b9H, 0e6H, 0c7H, 0e2H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OHNNJONP@?$MA?Z?$LF?$LP?5?$LP?$NM?D?$KH?$MA?$LK?5?F?D?F?$LM?$LP?x?5?$LI?p?$LF?e?$LP?$KB?$LM?$KN?$LI?$LI?5?H@
CONST	SEGMENT
??_C@_0DC@OHNNJONP@?$MA?Z?$LF?$LP?5?$LP?$NM?D?$KH?$MA?$LK?5?F?D?F?$LM?$LP?x?5?$LI?p?$LF?e?$LP?$KB?$LM?$KN?$LI?$LI?5?H@ DB 0c0H
	DB	0daH, 0b5H, 0bfH, ' ', 0bfH, 0dcH, 0c4H, 0a7H, 0c0H, 0baH, ' ', 0c6H
	DB	0c4H, 0c6H, 0bcH, 0bfH, 0f8H, ' ', 0b8H, 0f0H, 0b5H, 0e5H, 0bfH
	DB	0a1H, 0bcH, 0adH, 0b8H, 0b8H, ' ', 0c8H, 0b0H, 0bcH, 0baH, 0c8H
	DB	0adH, ' ', 0c7H, 0d2H, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH
	DB	0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ODNPGMLF@?F?D?F?$LM?$LP?x?$LI?$LI?5?$MA?L?5?$LB?b?$LE?I?$MA?$LL?5?$LM?$LD?A?$KE?G?R?5?$LM?v?5?$MA?V@
CONST	SEGMENT
??_C@_0CE@ODNPGMLF@?F?D?F?$LM?$LP?x?$LI?$LI?5?$MA?L?5?$LB?b?$LE?I?$MA?$LL?5?$LM?$LD?A?$KE?G?R?5?$LM?v?5?$MA?V@ DB 0c6H
	DB	0c4H, 0c6H, 0bcH, 0bfH, 0f8H, 0b8H, 0b8H, ' ', 0c0H, 0ccH, ' ', 0b1H
	DB	0e2H, 0b4H, 0c9H, 0c0H, 0bbH, ' ', 0bcH, 0b3H, 0c1H, 0a4H, 0c7H
	DB	0d2H, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0c0H, 0bdH, 0a1H, 0a3H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@NNHIIENC@?$MA?$PL?5?C?b?G?v?5?$LI?p?$LF?e?$LE?B?5?F?D?F?$LM?$MA?e?$LA?z?5?$LM?V?$LH?N?5?G?C@
CONST	SEGMENT
??_C@_0DF@NNHIIENC@?$MA?$PL?5?C?b?G?v?5?$LI?p?$LF?e?$LE?B?5?F?D?F?$LM?$MA?e?$LA?z?5?$LM?V?$LH?N?5?G?C@ DB 0c0H
	DB	0fbH, ' ', 0c3H, 0e2H, 0c7H, 0f6H, ' ', 0b8H, 0f0H, 0b5H, 0e5H
	DB	0b4H, 0c2H, ' ', 0c6H, 0c4H, 0c6H, 0bcH, 0c0H, 0e5H, 0b0H, 0faH
	DB	' ', 0bcH, 0d6H, 0b7H, 0ceH, ' ', 0c7H, 0c3H, 0b7H, 0b9H, 0c0H
	DB	0ccH, 0beH, 0eeH, 0b8H, 0b8H, ' ', 0c4H, 0d3H, ' ', 0bcH, 0f6H
	DB	' ', 0c0H, 0d6H, 0c0H, 0bdH, 0a3H, 0a1H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CELNCKDE@?F?D?F?$LM?$MA?e?$LA?z?5?$LM?V?$LH?N?5?G?C?$LH?$LJ?$MA?L?$LO?n?$LE?B?5?$MA?L?5?$LB?b?$LE@
CONST	SEGMENT
??_C@_0DE@CELNCKDE@?F?D?F?$LM?$MA?e?$LA?z?5?$LM?V?$LH?N?5?G?C?$LH?$LJ?$MA?L?$LO?n?$LE?B?5?$MA?L?5?$LB?b?$LE@ DB 0c6H
	DB	0c4H, 0c6H, 0bcH, 0c0H, 0e5H, 0b0H, 0faH, ' ', 0bcH, 0d6H, 0b7H
	DB	0ceH, ' ', 0c7H, 0c3H, 0b7H, 0b9H, 0c0H, 0ccH, 0beH, 0eeH, 0b4H
	DB	0c2H, ' ', 0c0H, 0ccH, ' ', 0b1H, 0e2H, 0b4H, 0c9H, 0c0H, 0bbH
	DB	' ', 0bcH, 0b3H, 0c1H, 0a4H, 0c7H, 0d2H, ' ', 0bcH, 0f6H, ' ', 0c0H
	DB	0d6H, 0c0H, 0bdH, 0a1H, 0a3H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@HOGDKPIF@?$LE?k?5?A?v?$LP?$KK?5?$LG?s?$MA?N?$LA?z?5?$LP?$KK?G?R?$MA?$LL?5?$LI?U?$MA?z?5?$LM?$LB?E?C@
CONST	SEGMENT
??_C@_0DK@HOGDKPIF@?$LE?k?5?A?v?$LP?$KK?5?$LG?s?$MA?N?$LA?z?5?$LP?$KK?G?R?$MA?$LL?5?$LI?U?$MA?z?5?$LM?$LB?E?C@ DB 0b4H
	DB	0ebH, ' ', 0c1H, 0f6H, 0bfH, 0aaH, ' ', 0b6H, 0f3H, 0c0H, 0ceH
	DB	0b0H, 0faH, ' ', 0bfH, 0aaH, 0c7H, 0d2H, 0c0H, 0bbH, ' ', 0b8H
	DB	0d5H, 0c0H, 0faH, ' ', 0bcH, 0b1H, 0c5H, 0c3H, 0c7H, 0cfH, ' ', 0c8H
	DB	0c4H, ' ', 0c1H, 0b6H, 0c0H, 0dbH, 0c7H, 0d2H, ' ', 0bcH, 0f6H
	DB	' ', 0c0H, 0d6H, 0bdH, 0c0H, 0b4H, 0cfH, 0b4H, 0d9H, 0a3H, 0a1H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@BOMDPEP@?$LH?N?$LB?W?$MA?N?5?H?D?5F9?E?$LA?$LI?$KG?5?$LE?$KN?$LH?$KP?$LM?$KN?5?D?Q?$LA?m?5?$LC?x@
CONST	SEGMENT
??_C@_0GF@BOMDPEP@?$LH?N?$LB?W?$MA?N?5?H?D?5F9?E?$LA?$LI?$KG?5?$LE?$KN?$LH?$KP?$LM?$KN?5?D?Q?$LA?m?5?$LC?x@ DB 0b7H
	DB	0ceH, 0b1H, 0d7H, 0c0H, 0ceH, ' ', 0c8H, 0c4H, ' F9', 0c5H, 0b0H
	DB	0b8H, 0a6H, ' ', 0b4H, 0adH, 0b7H, 0afH, 0bcH, 0adH, ' ', 0c4H
	DB	0d1H, 0b0H, 0edH, ' ', 0b2H, 0f8H, 0bcH, 0f6H, ' ', 0c0H, 0d6H
	DB	0c0H, 0b8H, 0b8H, 0e7H, ', ', 0c6H, 0c4H, 0c6H, 0bcH, 0bfH, 0f8H
	DB	' ', 0b8H, 0f0H, 0b5H, 0e5H, 0b7H, 0ceH, ' ', 0b7H, 0ceH, 0b1H
	DB	0d7H, 0c0H, 0ceH, 0c8H, 0c4H, ' ', 0c5H, 0abH, 0bcH, 0d2H, 0b8H
	DB	0aeH, ' ', 0b4H, 0ebH, 0c8H, 0adH, ' ', 0b1H, 0e2H, 0b4H, 0c9H
	DB	0c0H, 0bbH, ' ', 0b2H, 0f8H, ' ', 0bcH, 0f6H, ' ', 0c0H, 0d6H, 0bdH
	DB	0c0H, 0b4H, 0cfH, 0b4H, 0d9H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CKOBPJKJ@?$LH?N?$LB?W?$LP?B?5?D?$LD?$LI?$KP?E?M?5?$LM?$LD?A?$KE?$KB?$KD@
CONST	SEGMENT
??_C@_0BF@CKOBPJKJ@?$LH?N?$LB?W?$LP?B?5?D?$LD?$LI?$KP?E?M?5?$LM?$LD?A?$KE?$KB?$KD@ DB 0b7H
	DB	0ceH, 0b1H, 0d7H, 0bfH, 0c2H, ' ', 0c4H, 0b3H, 0b8H, 0afH, 0c5H
	DB	0cdH, ' ', 0bcH, 0b3H, 0c1H, 0a4H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MB@GBACAPFD@?F?$MA?$MA?e?1?F?D?F?$LM?$MA?e?$KD?$LK?$MA?Z?$LF?$LP?$MA?$LI?$LH?N?5?$MA?$PL?$MA?$LL?$LI?$LI?$LD?$KK?$LA@
CONST	SEGMENT
??_C@_0MB@GBACAPFD@?F?$MA?$MA?e?1?F?D?F?$LM?$MA?e?$KD?$LK?$MA?Z?$LF?$LP?$MA?$LI?$LH?N?5?$MA?$PL?$MA?$LL?$LI?$LI?$LD?$KK?$LA@ DB 0c6H
	DB	0c0H, 0c0H, 0e5H, '/', 0c6H, 0c4H, 0c6H, 0bcH, 0c0H, 0e5H, 0a3H
	DB	0baH, 0c0H, 0daH, 0b5H, 0bfH, 0c0H, 0b8H, 0b7H, 0ceH, ' ', 0c0H
	DB	0fbH, 0c0H, 0bbH, 0b8H, 0b8H, 0b3H, 0aaH, 0b0H, 0d4H, 0b2H, 0fbH
	DB	' ', 0bcH, 0f6H, 0c1H, 0a4H, 0c7H, 0d2H, 0bcH, 0f6H, 0c0H, 0d6H
	DB	0c0H, 0bdH, '. ', 0c6H, 0c0H, 0bfH, 0f8H, '/', 0c6H, 0c4H, 0c6H
	DB	0bcH, 0bfH, 0f8H, 0a3H, 0baH, 0bcH, 0b1H, 0c0H, 0fcH, ' ', 0b9H
	DB	0d7H, ' ', 0c0H, 0daH, 0b5H, 0bfH, ' ', 0c6H, 0c0H, ' ', 0b1H, 0b8H
	DB	0bcH, 0baH, 0b0H, 0a1H, 0b4H, 0c9H, ' ', 0bcH, 0d6H, 0b7H, 0ceH
	DB	0a3H, 0baH, 0c0H, 0daH, 0b5H, 0bfH, 0c0H, 0b8H, 0b7H, 0ceH, ' '
	DB	0c0H, 0fbH, 0c0H, 0bbH, ' ', 0b8H, 0b8H, 0b3H, 0aaH, 0b5H, 0b5H
	DB	0b7H, 0cfH, ' ', 0bcH, 0b3H, 0c1H, 0a4H, 0b0H, 0a1H, 0b4H, 0c9H
	DB	' ps', 0a3H, 0baH, 'AI ', 0b8H, 0f0H, 0b5H, 0e5H, 0b4H, 0c2H, ' '
	DB	0c4H, 0b3H, 0b8H, 0afH, 0c5H, 0cdH, 0b8H, 0a6H, ' ', 0b5H, 0e5H
	DB	0b7H, 0d3H, 0c7H, 0cfH, 0b0H, 0edH, ' ', 0b4H, 0d9H, 0bdH, 0c3H
	DB	' ', 0b7H, 0ceH, 0b1H, 0d7H, 0c0H, 0ceH, 0c7H, 0cfH, 0b8H, 0e9H
	DB	' ', 0c0H, 0daH, 0b5H, 0bfH, 0c0H, 0b8H, 0b7H, 0ceH, ' ', 0c4H
	DB	0d1H, 0c1H, 0fdH, 0b4H, 0cfH, 0b4H, 0d9H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GIHIAMIF@?$LG?s?$MA?N?$MA?$LL?5?$LM?$LD?A?$KE?G?O?$LA?m?0?5?$LE?k?5?A?v?$LP?$KK?$MA?$LL?5?$LM?$LD?A?$KE@
CONST	SEGMENT
??_C@_0CJ@GIHIAMIF@?$LG?s?$MA?N?$MA?$LL?5?$LM?$LD?A?$KE?G?O?$LA?m?0?5?$LE?k?5?A?v?$LP?$KK?$MA?$LL?5?$LM?$LD?A?$KE@ DB 0b6H
	DB	0f3H, 0c0H, 0ceH, 0c0H, 0bbH, ' ', 0bcH, 0b3H, 0c1H, 0a4H, 0c7H
	DB	0cfH, 0b0H, 0edH, ', ', 0b4H, 0ebH, ' ', 0c1H, 0f6H, 0bfH, 0aaH
	DB	0c0H, 0bbH, ' ', 0bcH, 0b3H, 0c1H, 0a4H, 0c7H, 0d8H, 0beH, 0dfH
	DB	' ', 0c7H, 0d4H, 0a1H, 0a3H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LOIJIIEJ@?$LE?k?5?A?v?$LP?$KK?5?$LM?$LD?A?$KE?$KB?$KD@
CONST	SEGMENT
??_C@_0P@LOIJIIEJ@?$LE?k?5?A?v?$LP?$KK?5?$LM?$LD?A?$KE?$KB?$KD@ DB 0b4H, 0ebH
	DB	' ', 0c1H, 0f6H, 0bfH, 0aaH, ' ', 0bcH, 0b3H, 0c1H, 0a4H, 0a1H
	DB	0a3H, 00H					; `string'
CONST	ENDS
;	COMDAT ?chardir@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAY07DA
_DATA	SEGMENT
?chardir@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAY07DA DB 0beH, 0c6H, 0b7H, 0a1H, 00H ; `í»?Ôô??Ï¢üÞ?'::`2'::chardir
	ORG $+3
	DB	0c1H, 0c2H, 0c7H, 0cfH, 00H
	ORG $+3
	DB	0c1H, 0c2H, 0c3H, 0f8H, 00H
	ORG $+3
	DB	0c1H, 0c2H, 0bbH, 0f3H, 00H
	ORG $+3
	DB	0c0H, 0a7H, 00H
	ORG $+5
	DB	0bfH, 0ecH, 0bbH, 0f3H, 00H
	ORG $+3
	DB	0bfH, 0ecH, 0c3H, 0f8H, 00H
	ORG $+3
	DB	0bfH, 0ecH, 0c7H, 0cfH, 00H
	ORG $+3
_DATA	ENDS
;	COMDAT ?msg@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAY07DA
_DATA	SEGMENT
?msg@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAY07DA DB 0c6H, 0c0H, ' ', 0c0H, 0e5H, 00H ; `í»?Ôô??Ï¢üÞ?'::`2'::msg
	ORG $+2
	DB	0c6H, 0c0H, ' ', 0bfH, 0f8H, 00H
	ORG $+2
	DB	0bcH, 0d6H, ' ', 0b7H, 0ceH, 00H
	ORG $+2
_DATA	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5@ DB '%s ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GINKOJP@?$CF?$CKc?$CFs?$CF?$CKc@
CONST	SEGMENT
??_C@_08GINKOJP@?$CF?$CKc?$CFs?$CF?$CKc@ DB '%*c%s%*c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OAGCMOJL@data?2album_4?4dat@
CONST	SEGMENT
??_C@_0BB@OAGCMOJL@data?2album_4?4dat@ DB 'data\album_4.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CLDOBNDO@data?2album_5?4dat@
CONST	SEGMENT
??_C@_0BB@CLDOBNDO@data?2album_5?4dat@ DB 'data\album_5.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KNKKGPJA@data?2album_6?4dat@
CONST	SEGMENT
??_C@_0BB@KNKKGPJA@data?2album_6?4dat@ DB 'data\album_6.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGPGLMDF@data?2album_7?4dat@
CONST	SEGMENT
??_C@_0BB@GGPGLMDF@data?2album_7?4dat@ DB 'data\album_7.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JHKAAOOA@data?2album_8?4dat@
CONST	SEGMENT
??_C@_0BB@JHKAAOOA@data?2album_8?4dat@ DB 'data\album_8.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FMPMNNEF@data?2album_9?4dat@
CONST	SEGMENT
??_C@_0BB@FMPMNNEF@data?2album_9?4dat@ DB 'data\album_9.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DFDCKIPG@data?2album_12?4dat@
CONST	SEGMENT
??_C@_0BC@DFDCKIPG@data?2album_12?4dat@ DB 'data\album_12.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@POGOHLFD@data?2album_13?4dat@
CONST	SEGMENT
??_C@_0BC@POGOHLFD@data?2album_13?4dat@ DB 'data\album_13.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ODGLELOL@data?2album_14?4dat@
CONST	SEGMENT
??_C@_0BC@ODGLELOL@data?2album_14?4dat@ DB 'data\album_14.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CIDHJIEO@data?2album_15?4dat@
CONST	SEGMENT
??_C@_0BC@CIDHJIEO@data?2album_15?4dat@ DB 'data\album_15.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KOKDOKOA@data?2album_16?4dat@
CONST	SEGMENT
??_C@_0BC@KOKDOKOA@data?2album_16?4dat@ DB 'data\album_16.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GFPPDJEF@data?2album_17?4dat@
CONST	SEGMENT
??_C@_0BC@GFPPDJEF@data?2album_17?4dat@ DB 'data\album_17.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JEKJILJA@data?2album_18?4dat@
CONST	SEGMENT
??_C@_0BC@JEKJILJA@data?2album_18?4dat@ DB 'data\album_18.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FPPFFIDF@data?2album_19?4dat@
CONST	SEGMENT
??_C@_0BC@FPPFFIDF@data?2album_19?4dat@ DB 'data\album_19.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EJBCBDGA@data?2album_20?4dat@
CONST	SEGMENT
??_C@_0BC@EJBCBDGA@data?2album_20?4dat@ DB 'data\album_20.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ICEOMAMF@data?2album_21?4dat@
CONST	SEGMENT
??_C@_0BC@ICEOMAMF@data?2album_21?4dat@ DB 'data\album_21.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ENKLCGL@data?2album_22?4dat@
CONST	SEGMENT
??_C@_0BC@ENKLCGL@data?2album_22?4dat@ DB 'data\album_22.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPIGGBMO@data?2album_23?4dat@
CONST	SEGMENT
??_C@_0BC@MPIGGBMO@data?2album_23?4dat@ DB 'data\album_23.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NCIDFBHG@data?2album_24?4dat@
CONST	SEGMENT
??_C@_0BC@NCIDFBHG@data?2album_24?4dat@ DB 'data\album_24.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJNPICND@data?2album_25?4dat@
CONST	SEGMENT
??_C@_0BC@BJNPICND@data?2album_25?4dat@ DB 'data\album_25.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JPELPAHN@data?2album_26?4dat@
CONST	SEGMENT
??_C@_0BC@JPELPAHN@data?2album_26?4dat@ DB 'data\album_26.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FEBHCDNI@data?2album_27?4dat@
CONST	SEGMENT
??_C@_0BC@FEBHCDNI@data?2album_27?4dat@ DB 'data\album_27.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KFEBJBAN@data?2album_28?4dat@
CONST	SEGMENT
??_C@_0BC@KFEBJBAN@data?2album_28?4dat@ DB 'data\album_28.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GOBNECKI@data?2album_29?4dat@
CONST	SEGMENT
??_C@_0BC@GOBNECKI@data?2album_29?4dat@ DB 'data\album_29.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OPGFBINE@data?2album_30?4dat@
CONST	SEGMENT
??_C@_0BC@OPGFBINE@data?2album_30?4dat@ DB 'data\album_30.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CEDJMLHB@data?2album_31?4dat@
CONST	SEGMENT
??_C@_0BC@CEDJMLHB@data?2album_31?4dat@ DB 'data\album_31.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KCKNLJNP@data?2album_32?4dat@
CONST	SEGMENT
??_C@_0BC@KCKNLJNP@data?2album_32?4dat@ DB 'data\album_32.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GJPBGKHK@data?2album_33?4dat@
CONST	SEGMENT
??_C@_0BC@GJPBGKHK@data?2album_33?4dat@ DB 'data\album_33.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HEPEFKMC@data?2album_34?4dat@
CONST	SEGMENT
??_C@_0BC@HEPEFKMC@data?2album_34?4dat@ DB 'data\album_34.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LPKIIJGH@data?2album_35?4dat@
CONST	SEGMENT
??_C@_0BC@LPKIIJGH@data?2album_35?4dat@ DB 'data\album_35.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DJDMPLMJ@data?2album_36?4dat@
CONST	SEGMENT
??_C@_0BC@DJDMPLMJ@data?2album_36?4dat@ DB 'data\album_36.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PCGACIGM@data?2album_37?4dat@
CONST	SEGMENT
??_C@_0BC@PCGACIGM@data?2album_37?4dat@ DB 'data\album_37.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDGJKLJ@data?2album_38?4dat@
CONST	SEGMENT
??_C@_0BC@DDGJKLJ@data?2album_38?4dat@ DB 'data\album_38.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MIGKEJBM@data?2album_39?4dat@
CONST	SEGMENT
??_C@_0BC@MIGKEJBM@data?2album_39?4dat@ DB 'data\album_39.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CKMCCGFK@data?2album_40?4dat@
CONST	SEGMENT
??_C@_0BC@CKMCCGFK@data?2album_40?4dat@ DB 'data\album_40.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OBJOPFPP@data?2album_41?4dat@
CONST	SEGMENT
??_C@_0BC@OBJOPFPP@data?2album_41?4dat@ DB 'data\album_41.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GHAKIHFB@data?2album_42?4dat@
CONST	SEGMENT
??_C@_0BC@GHAKIHFB@data?2album_42?4dat@ DB 'data\album_42.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KMFGFEPE@data?2album_43?4dat@
CONST	SEGMENT
??_C@_0BC@KMFGFEPE@data?2album_43?4dat@ DB 'data\album_43.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LBFDGEEM@data?2album_44?4dat@
CONST	SEGMENT
??_C@_0BC@LBFDGEEM@data?2album_44?4dat@ DB 'data\album_44.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HKAPLHOJ@data?2album_45?4dat@
CONST	SEGMENT
??_C@_0BC@HKAPLHOJ@data?2album_45?4dat@ DB 'data\album_45.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PMJLMFEH@data?2album_46?4dat@
CONST	SEGMENT
??_C@_0BC@PMJLMFEH@data?2album_46?4dat@ DB 'data\album_46.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BACHGGGK@f?$DLencor1c@
CONST	SEGMENT
??_C@_09BACHGGGK@f?$DLencor1c@ DB 'f;encor1c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JONHHOLF@data?2album?4dat@
CONST	SEGMENT
??_C@_0P@JONHHOLF@data?2album?4dat@ DB 'data\album.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HIPKAJPN@data?2album_10?4dat@
CONST	SEGMENT
??_C@_0BC@HIPKAJPN@data?2album_10?4dat@ DB 'data\album_10.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PNGHPOCD@data?2album_3?4dat@
CONST	SEGMENT
??_C@_0BB@PNGHPOCD@data?2album_3?4dat@ DB 'data\album_3.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DGDLCNIG@data?2album_2?4dat@
CONST	SEGMENT
??_C@_0BB@DGDLCNIG@data?2album_2?4dat@ DB 'data\album_2.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JHGNJKID@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@
CONST	SEGMENT
??_C@_0CN@JHGNJKID@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@ DB 0beH
	DB	0d9H, 0b9H, 0fcH, ' ', 0b5H, 0a5H, 0c0H, 0ccH, 0c5H, 0cdH, 0b8H
	DB	0a6H, ' ', 0c0H, 0faH, 0c0H, 0e5H, 0c7H, 0cfH, 0b4H, 0c2H, 0b5H
	DB	0a5H, ' ', 0bdH, 0c7H, 0c6H, 0d0H, 0c7H, 0cfH, 0bfH, 0b4H, 0bdH
	DB	0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 0a3H, 0a1H, 0a3H, 0b3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IOHGKLMC@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@
CONST	SEGMENT
??_C@_0CN@IOHGKLMC@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@ DB 0beH
	DB	0d9H, 0b9H, 0fcH, ' ', 0b5H, 0a5H, 0c0H, 0ccH, 0c5H, 0cdH, 0b8H
	DB	0a6H, ' ', 0c0H, 0faH, 0c0H, 0e5H, 0c7H, 0cfH, 0b4H, 0c2H, 0b5H
	DB	0a5H, ' ', 0bdH, 0c7H, 0c6H, 0d0H, 0c7H, 0cfH, 0bfH, 0b4H, 0bdH
	DB	0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 0a3H, 0a1H, 0a3H, 0b2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KFFLPIAB@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@
CONST	SEGMENT
??_C@_0CN@KFFLPIAB@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@ DB 0beH
	DB	0d9H, 0b9H, 0fcH, ' ', 0b5H, 0a5H, 0c0H, 0ccH, 0c5H, 0cdH, 0b8H
	DB	0a6H, ' ', 0c0H, 0faH, 0c0H, 0e5H, 0c7H, 0cfH, 0b4H, 0c2H, 0b5H
	DB	0a5H, ' ', 0bdH, 0c7H, 0c6H, 0d0H, 0c7H, 0cfH, 0bfH, 0b4H, 0bdH
	DB	0c0H, 0b4H, 0cfH, 0b4H, 0d9H, '.', 0a3H, 0a1H, 0a3H, 0b1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
CONST	SEGMENT
??_C@_04IJNKKJEO@?H?$KO?$MA?N@ DB 0c8H, 0aeH, 0c0H, 0ceH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DHMHBGOC@data?2album_47?4dat@
CONST	SEGMENT
??_C@_0BC@DHMHBGOC@data?2album_47?4dat@ DB 'data\album_47.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GDFOCPAE@data?2chatreg?4dat@
CONST	SEGMENT
??_C@_0BB@GDFOCPAE@data?2chatreg?4dat@ DB 'data\chatreg.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GFOIPMHB@data?2mail?4dat@
CONST	SEGMENT
??_C@_0O@GFOIPMHB@data?2mail?4dat@ DB 'data\mail.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb@ DB 'r+b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IFADCKOJ@?$CFd?$HM@
CONST	SEGMENT
??_C@_03IFADCKOJ@?$CFd?$HM@ DB '%d|', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OAKKNIEC@T?$HM?$CFs?$HM?$CFs?$HMC?$HMconfirm@
CONST	SEGMENT
??_C@_0BC@OAKKNIEC@T?$HM?$CFs?$HM?$CFs?$HMC?$HMconfirm@ DB 'T|%s|%s|C|con'
	DB	'firm', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08KJEDNCKC@?$CFs?$CFs?$CFs?$CFs@
CONST	SEGMENT
??_C@_08KJEDNCKC@?$CFs?$CFs?$CFs?$CFs@ DB '%s%s%s%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@BMOJJPID@I?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI@
CONST	SEGMENT
??_C@_0EM@BMOJJPID@I?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI@ DB 'I'
	DB	'|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|'
	DB	'%d|I|%d|I|%d|', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EDJFIODM@P?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMG?$HM?$CFd?$HM@
CONST	SEGMENT
??_C@_0BP@EDJFIODM@P?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMG?$HM?$CFd?$HM@ DB 'P'
	DB	'|%d|P|%d|P|%d|P|%d|P|%d|G|%d|', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@OFAEILEL@T?$HM?$CFs?$HM?$CFs?$HMK?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI@
CONST	SEGMENT
??_C@_0FG@OFAEILEL@T?$HM?$CFs?$HM?$CFs?$HMK?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI@ DB 'T'
	DB	'|%s|%s|K|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|'
	DB	'%d|I|%d|I|%d|I|%d|I|%d|', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OMFCIIOF@?$CI?Y?D?$DPMP?3?$CFd?$CJ@
CONST	SEGMENT
??_C@_0L@OMFCIIOF@?$CI?Y?D?$DPMP?3?$CFd?$CJ@ DB '(', 0d9H, 0c4H, '?MP:%d)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03GHDNOBPC@?$CF8s@
CONST	SEGMENT
??_C@_03GHDNOBPC@?$CF8s@ DB '%8s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPGNHMDP@?$CI?$LK?q?$LP?kMP?3?$CFd?$CJ@
CONST	SEGMENT
??_C@_0M@MPGNHMDP@?$CI?$LK?q?$LP?kMP?3?$CFd?$CJ@ DB '(', 0baH, 0f1H, 0bfH
	DB	0ebH, 'MP:%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMPGGDFH@?$CFd?$KD?$KF@
CONST	SEGMENT
??_C@_04IMPGGDFH@?$CFd?$KD?$KF@ DB '%d', 0a3H, 0a5H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F@
CONST	SEGMENT
??_C@_01BIAFAFID@F@ DB 'F', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D@
CONST	SEGMENT
??_C@_01CKDDGHAB@D@ DB 'D', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02BFNPOJI@D?$CL@
CONST	SEGMENT
??_C@_02BFNPOJI@D?$CL@ DB 'D+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C@
CONST	SEGMENT
??_C@_01GFHCPBMG@C@ DB 'C', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02EBCOIBN@C?$CL@
CONST	SEGMENT
??_C@_02EBCOIBN@C?$CL@ DB 'C+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B@
CONST	SEGMENT
??_C@_01HMGJMAIH@B@ DB 'B', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02FNAICCK@B?$CL@
CONST	SEGMENT
??_C@_02FNAICCK@B?$CL@ DB 'B+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A@
CONST	SEGMENT
??_C@_01FHEEJDEE@A@ DB 'A', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02HJGDMHD@A?$CL@
CONST	SEGMENT
??_C@_02HJGDMHD@A?$CL@ DB 'A+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02BIDEELGN@S?$CL@
CONST	SEGMENT
??_C@_02BIDEELGN@S?$CL@ DB 'S+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@
CONST	SEGMENT
??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@ DB 'stoi argument out '
	DB	'of range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@
CONST	SEGMENT
??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@ DB 'invalid stoi argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OFAJPOPK@?$LH?$KD?$LE?$PN?$MA?$LI?$LH?N?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?H?$LJ?$LF?f?G?Q?$LE?Y?5?$CI?$LH?$KD?$LE@
CONST	SEGMENT
??_C@_0CC@OFAJPOPK@?$LH?$KD?$LE?$PN?$MA?$LI?$LH?N?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?H?$LJ?$LF?f?G?Q?$LE?Y?5?$CI?$LH?$KD?$LE@ DB 0b7H
	DB	0a3H, 0b4H, 0fdH, 0c0H, 0b8H, 0b7H, 0ceH, ' ', 0beH, 0c6H, 0c0H
	DB	0ccH, 0c5H, 0dbH, 0c0H, 0bbH, ' ', 0c8H, 0b9H, 0b5H, 0e6H, 0c7H
	DB	0d1H, 0b4H, 0d9H, ' (', 0b7H, 0a3H, 0b4H, 0fdH, ')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HPPHGFBL@?$LI?$LO?$LI?p?$LN?$LK?D?m?F?y@
CONST	SEGMENT
??_C@_0L@HPPHGFBL@?$LI?$LO?$LI?p?$LN?$LK?D?m?F?y@ DB 0b8H, 0beH, 0b8H, 0f0H
	DB	0bdH, 0baH, 0c4H, 0edH, 0c6H, 0f9H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
_DATA	SEGMENT
?RideCodeMode@@3PAUtagRideCodeMode@@A DD 018816H	; RideCodeMode
	DD	01H
	DD	018806H
	DD	02H
	DD	01880aH
	DD	04H
	DD	0187b7H
	DD	08H
	DD	0187c0H
	DD	010H
	DD	0187bbH
	DD	020H
	DD	0187faH
	DD	040H
	DD	0187d6H
	DD	080H
	DD	018814H
	DD	0100H
	DD	018815H
	DD	0200H
	DD	018c9cH
	DD	0800H
	DD	018cc8H
	DD	0400H
	DD	018812H
	DD	01000H
	DD	018811H
	DD	02000H
	DD	018a28H
	DD	04000H
	DD	018a2bH
	DD	08000H
	DD	018f30H
	DD	010000H
	DD	018f31H
	DD	020000H
	DD	018f68H
	DD	040000H
	DD	0187fcH
	DD	080000H
	DD	0187d3H
	DD	0100000H
	DD	018fa9H
	DD	0200000H
	DD	018faaH
	DD	0400000H
	DD	018a09H
	DD	0800000H
	DD	018a0aH
	DD	01000000H
	DD	019394H
	DD	02000000H
	DD	0187b2H
	DD	04000000H
?RideNoList@@3PAUtagRideNoList@@A DD 018bb9H		; RideNoList
	DD	018bbaH
	DD	018bbbH
	DD	018bbcH
	DD	018bbdH
	DD	018bbeH
	DD	018bbfH
	DD	018bc0H
	DD	018a90H
	DD	018a91H
	DD	018e5aH
	DD	018e65H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee5H
	DD	018f0dH
	DD	018f19H
	DD	018f76H
	ORG $+32
	DD	018bc1H
	DD	018bc2H
	DD	018bc3H
	DD	018bc4H
	DD	018bc5H
	DD	018bc6H
	DD	018bc7H
	DD	018bc8H
	DD	018a9aH
	DD	018a9bH
	DD	018e62H
	DD	018e64H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee6H
	DD	018f0eH
	DD	018f1aH
	DD	018f77H
	ORG $+32
	DD	018bc9H
	DD	018bcaH
	DD	018bcbH
	DD	018bccH
	DD	018bcdH
	DD	018bceH
	DD	018bcfH
	DD	018bd0H
	DD	018aa4H
	DD	018aa5H
	DD	018e57H
	DD	018e4dH
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee7H
	DD	018f0fH
	DD	018f1bH
	DD	018f78H
	ORG $+32
	DD	018bd1H
	DD	018bd2H
	DD	018bd3H
	DD	018bd4H
	DD	018bd5H
	DD	018bd6H
	DD	018bd7H
	DD	018bd8H
	DD	018aaeH
	DD	018aafH
	DD	018e58H
	DD	018e4eH
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee8H
	DD	018f10H
	DD	018f1cH
	DD	018f79H
	ORG $+32
	DD	018bd9H
	DD	018bdaH
	DD	018bdbH
	DD	018bdcH
	DD	018bddH
	DD	018bdeH
	DD	018bdfH
	DD	018be0H
	DD	018ab8H
	DD	018ab9H
	DD	018e60H
	DD	018e55H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee9H
	DD	018f11H
	DD	018f1dH
	DD	018f7aH
	ORG $+32
	DD	018be1H
	DD	018be2H
	DD	018be3H
	DD	018be4H
	DD	018be5H
	DD	018be6H
	DD	018be7H
	DD	018be8H
	DD	018ac2H
	DD	018ac3H
	DD	018e61H
	DD	018e56H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eeaH
	DD	018f12H
	DD	018f1eH
	DD	018f7bH
	ORG $+32
	DD	018be9H
	DD	018beaH
	DD	018bebH
	DD	018becH
	DD	018bedH
	DD	018beeH
	DD	018befH
	DD	018bf0H
	DD	018accH
	DD	018acdH
	DD	018e59H
	DD	018e4fH
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eebH
	DD	018f13H
	DD	018f1fH
	DD	018f7cH
	ORG $+32
	DD	018bf1H
	DD	018bf2H
	DD	018bf3H
	DD	018bf4H
	DD	018bf5H
	DD	018bf6H
	DD	018bf7H
	DD	018bf8H
	DD	018ad6H
	DD	018ad7H
	DD	018e5bH
	DD	018e50H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eecH
	DD	018f14H
	DD	018f20H
	DD	018f7dH
	ORG $+32
	DD	018bf9H
	DD	018bfaH
	DD	018bfbH
	DD	018bfcH
	DD	018bfdH
	DD	018bfeH
	DD	018bffH
	DD	018c00H
	DD	018ae0H
	DD	018ae1H
	DD	018e5dH
	DD	018e52H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eedH
	DD	018f15H
	DD	018f21H
	DD	018f7eH
	ORG $+32
	DD	018c01H
	DD	018c02H
	DD	018c03H
	DD	018c04H
	DD	018c05H
	DD	018c06H
	DD	018c07H
	DD	018c08H
	DD	018aeaH
	DD	018aebH
	DD	018e5cH
	DD	018e51H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eeeH
	DD	018f16H
	DD	018f22H
	DD	018f7fH
	ORG $+32
	DD	018c09H
	DD	018c0aH
	DD	018c0bH
	DD	018c0cH
	DD	018c0dH
	DD	018c0eH
	DD	018c0fH
	DD	018c10H
	DD	018af4H
	DD	018af5H
	DD	018e5fH
	DD	018e54H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eefH
	DD	018f17H
	DD	018f23H
	DD	018f80H
	ORG $+32
	DD	018c11H
	DD	018c12H
	DD	018c13H
	DD	018c14H
	DD	018c15H
	DD	018c16H
	DD	018c17H
	DD	018c18H
	DD	018afeH
	DD	018affH
	DD	018e5eH
	DD	018e53H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ef0H
	DD	018f18H
	DD	018f24H
	DD	018f81H
	ORG $+32
?RPlistMode@@3PAUtagRidePetList@@A DD 0186a0H		; RPlistMode
	DD	00H
	DD	0186a5H
	DD	00H
	DD	0186aaH
	DD	00H
	DD	0186afH
	DD	00H
	DD	0186b4H
	DD	01H
	DD	0186b9H
	DD	01H
	DD	0186beH
	DD	01H
	DD	0186c3H
	DD	01H
	DD	0186c8H
	DD	02H
	DD	0186cdH
	DD	02H
	DD	0186d2H
	DD	02H
	DD	0186d7H
	DD	02H
	DD	0186dcH
	DD	03H
	DD	0186e1H
	DD	03H
	DD	0186e6H
	DD	03H
	DD	0186ebH
	DD	03H
	DD	0186f0H
	DD	04H
	DD	0186f5H
	DD	04H
	DD	0186faH
	DD	04H
	DD	0186ffH
	DD	04H
	DD	018704H
	DD	05H
	DD	018709H
	DD	05H
	DD	01870eH
	DD	05H
	DD	018713H
	DD	05H
	DD	018718H
	DD	06H
	DD	01871dH
	DD	06H
	DD	018722H
	DD	06H
	DD	018727H
	DD	06H
	DD	01872cH
	DD	07H
	DD	018731H
	DD	07H
	DD	018736H
	DD	07H
	DD	01873bH
	DD	07H
	DD	018740H
	DD	08H
	DD	018745H
	DD	08H
	DD	01874aH
	DD	08H
	DD	01874fH
	DD	08H
	DD	018754H
	DD	09H
	DD	018759H
	DD	09H
	DD	01875eH
	DD	09H
	DD	018763H
	DD	09H
	DD	018768H
	DD	0aH
	DD	01876dH
	DD	0aH
	DD	018772H
	DD	0aH
	DD	018777H
	DD	0aH
	DD	01877cH
	DD	0bH
	DD	018781H
	DD	0bH
	DD	018786H
	DD	0bH
	DD	01878bH
	DD	0bH
?opp_sockfd@@3PADA DB '-1', 00H				; opp_sockfd
	ORG $+125
?tradePetIndex@@3HA DD 0ffffffffH			; tradePetIndex
?jujutuNo@@3HA DD 0ffffffffH				; jujutuNo
?tradepetindexget@@3PADA DB '-1', 00H			; tradepetindexget
	ORG $+125
?mine_itemindex@@3PAHA DD 0ffffffffH			; mine_itemindex
	DD	0ffffffffH
?itemNo@@3HA DD	0ffffffffH				; itemNo
?ItemMixPetNo@@3HA DD 0ffffffffH			; ItemMixPetNo
?taskBarX@@3HA DD 0140H					; taskBarX
?monoStereoStr@@3PAPADA DD FLAT:??_C@_0BK@CGBENDMD@?5?5?5?5?5?5?5?$LI?p?5?5?5?5?5?5?5?$LD?k?5?5?5?5?5?5?5@ ; monoStereoStr
	DD	FLAT:??_C@_0BJ@DHKPLCBK@?5?5?5?5?5?5?$LN?$LK?5?E?W?5?$LH?$LJ?5?$LP?$MA?5?5?5?5?5?5?5@
?mouseCursor@@3PAPADA DD FLAT:??_C@_0BD@PHEKGFNN@?5?5?5?5?5?H?$LI?5?5?5?5?$LL?v?5?5?5?5?5@ ; mouseCursor
	DD	FLAT:??_C@_0BD@JHCIAJMC@?5?5?5?5?5?$LA?x?5?$LH?f?5?$LO?K?5?5?5?5?5@
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z$0
__ehfuncinfo$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Range_construct_or_tidy@PBH@?$vector@HV?$allocator@H@std@@@std@@AAEXPBH0Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z$0
__unwindtable$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z$2
__ehfuncinfo$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ$0
__ehfuncinfo$??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Ranking@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Ranking@@QAE@XZ$0
__ehfuncinfo$??1Ranking@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Ranking@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Ranking@@QAE@ABUPET@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Ranking@@QAE@ABUPET@@@Z$0
__ehfuncinfo$??0Ranking@@QAE@ABUPET@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Ranking@@QAE@ABUPET@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Mammoth@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Mammoth@@QAE@XZ$0
__ehfuncinfo$??1Mammoth@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Mammoth@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Open@Mammoth@@QAEXPAD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Open@Mammoth@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?Open@Mammoth@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Get@Mammoth@@SAAAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Get@Mammoth@@SAAAV1@XZ$0
__ehfuncinfo$?Get@Mammoth@@SAAAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Get@Mammoth@@SAAAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Mammoth@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Mammoth@@QAE@XZ$0
__ehfuncinfo$??0Mammoth@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Mammoth@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@V?$initializer_list@H@1@ABV?$allocator@H@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?MenuProc@@YAXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?MenuProc@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?MenuProc@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuProc@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?MenuProc@@YAXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuProc@@YAXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuProc@@YAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MenuProc@@YAXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_Gbad_array_new_length@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gbad_array_new_length@std@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gbad_array_new_length@std@@UAEPAXI@Z$1
__ehfuncinfo$??_Gbad_array_new_length@std@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_Gbad_array_new_length@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_array_new_length@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$1
__ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1bad_array_new_length@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_Gbad_alloc@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gbad_alloc@std@@UAEPAXI@Z$0
__ehfuncinfo$??_Gbad_alloc@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Gbad_alloc@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@AAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@AAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gexception@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z PROC	; std::_Copy_memmove<int const *,int *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4367 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z ENDP	; std::_Copy_memmove<int const *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z PROC		; std::_Copy_memmove<int *,int *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4367 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ENDP		; std::_Copy_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_copy<int const *,std::allocator<int> >, COMDAT

; 1565 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);
; 1571 :     const auto _ULast = _Get_unwrapped(_Last);
; 1572 : 
; 1573 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1574 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PBHPAH@std@@YAPAHPBH0PAH@Z ; std::_Copy_memmove<int const *,int *>

; 1576 :         _Dest += _ULast - _UFirst;

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]

; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1580 :             _Backout._Emplace_back(*_UFirst);
; 1581 :         }
; 1582 : 
; 1583 :         _Dest = _Backout._Release();
; 1584 :     }
; 1585 : 
; 1586 :     return _Dest;

  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1587 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_copy<int const *,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,std::allocator<int> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);
; 1690 :     const auto _ULast = _Get_unwrapped(_Last);
; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>

; 1694 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }
; 1700 : 
; 1701 :         return _Backout._Release();
; 1702 :     }
; 1703 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 30   :     ~_Tidy_guard() {

  00000	56		 push	 esi

; 31   :         if (_Target) {

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	85 f6		 test	 esi, esi
  00005	74 2c		 je	 SHORT $LN5@Tidy_guard
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 26		 je	 SHORT $LN5@Tidy_guard

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00010	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	83 e0 fc	 and	 eax, -4			; fffffffcH
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00022	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  00025	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1700 :             _Myend   = pointer();

  0002c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@Tidy_guard:
  00033	5e		 pop	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 34   :     }

  00034	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 15		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H
  00033	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00036	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003e	77 1e		 ja	 SHORT $LN19@Deallocate
  00040	eb 03		 jmp	 SHORT $LN13@Deallocate
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00042	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00045	51		 push	 ecx
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004c	83 c4 08	 add	 esp, 8

; 222  : }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN19@Deallocate:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN17@Deallocate:
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 966  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 2d		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00013	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	72 0c		 jb	 SHORT $LN14@Destroy_ra

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00018	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	50		 push	 eax
  0001a	ff 36		 push	 DWORD PTR [esi]
  0001c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00021	83 c4 08	 add	 esp, 8
$LN14@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00024	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00032	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 966  :         for (; _First != _Last; ++_First) {

  00035	83 c6 18	 add	 esi, 24			; 00000018H
  00038	3b f7		 cmp	 esi, edi
  0003a	75 d4		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0003c	5f		 pop	 edi

; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAHQAHAAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
__Newvec$ = -36						; size = 4
tv443 = -32						; size = 4
__Newsize$1$ = -28					; size = 4
__Newcapacity$ = -24					; size = 4
tv442 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z PROC ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d8	 mov	 DWORD PTR _this$[ebp], esi

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00032	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00035	2b d9		 sub	 ebx, ecx
  00037	c1 fb 02	 sar	 ebx, 2

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003d	2b c1		 sub	 eax, ecx
  0003f	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00042	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00047	0f 84 fe 00 00
	00		 je	 $LN41@Emplace_re

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0004d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00050	89 7d e4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00053	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00056	2b d1		 sub	 edx, ecx
  00058	c1 fa 02	 sar	 edx, 2

; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005b	8b ca		 mov	 ecx, edx
  0005d	d1 e9		 shr	 ecx, 1
  0005f	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00064	2b c1		 sub	 eax, ecx
  00066	3b d0		 cmp	 edx, eax
  00068	76 47		 jbe	 SHORT $LN12@Emplace_re

; 1621 :             return _Max; // geometric growth would overflow

  0006a	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH
$LN37@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 65   :     return _Count * _Ty_size;

  0006f	89 4d e8	 mov	 DWORD PTR __Newcapacity$[ebp], ecx
  00072	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00079	89 45 e0	 mov	 DWORD PTR tv443[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00082	83 c4 04	 add	 esp, 4
  00085	8b f8		 mov	 edi, eax
  00087	89 7d dc	 mov	 DWORD PTR __Newvec$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 748  :         _TRY_BEGIN

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00091	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  00094	89 45 ec	 mov	 DWORD PTR tv442[ebp], eax
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  0009a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0009c	89 08		 mov	 DWORD PTR [eax], ecx

; 750  :         _Constructed_first = _Newvec + _Whereoff;
; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0009e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a1	8b 16		 mov	 edx, DWORD PTR [esi]
  000a3	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a6	3b d8		 cmp	 ebx, eax
  000a8	75 1f		 jne	 SHORT $LN4@Emplace_re

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000aa	8b cf		 mov	 ecx, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  000ac	8b 5d ec	 mov	 ebx, DWORD PTR tv442[ebp]
  000af	eb 2f		 jmp	 SHORT $LN5@Emplace_re
$LN12@Emplace_re:

; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b1	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000b4	8b cf		 mov	 ecx, edi
  000b6	3b c7		 cmp	 eax, edi
  000b8	0f 43 c8	 cmovae	 ecx, eax
  000bb	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  000c1	0f 87 89 00 00
	00		 ja	 $LN42@Emplace_re
  000c7	eb a6		 jmp	 SHORT $LN37@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000c9	56		 push	 esi
  000ca	57		 push	 edi
  000cb	53		 push	 ebx
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
  000d2	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000d5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000d8	8b d3		 mov	 edx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000da	8b 5d ec	 mov	 ebx, DWORD PTR tv442[ebp]
  000dd	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
$LN5@Emplace_re:

; 758  :         }
; 759  :         _CATCH_ALL

  000e0	56		 push	 esi
  000e1	51		 push	 ecx
  000e2	50		 push	 eax
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAHV?$allocator@H@std@@@std@@YAPAHQAH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
  000e9	83 c4 10	 add	 esp, 16			; 00000010H
  000ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  000f3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f5	85 c9		 test	 ecx, ecx
  000f7	74 12		 je	 SHORT $LN33@Emplace_re

; 1677 :             _Destroy(_Myfirst, _Mylast);
; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000fc	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fe	83 e0 fc	 and	 eax, -4			; fffffffcH
  00101	50		 push	 eax
  00102	51		 push	 ecx
  00103	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00108	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  0010b	89 3e		 mov	 DWORD PTR [esi], edi

; 1682 :         _Mylast  = _Newvec + _Newsize;

  0010d	8b 45 e4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00110	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  00113	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  00116	8b 4d e0	 mov	 ecx, DWORD PTR tv443[ebp]
  00119	03 cf		 add	 ecx, edi
  0011b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  0011e	8b c3		 mov	 eax, ebx

; 767  :     }

  00120	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00123	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012a	59		 pop	 ecx
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z$0:

; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00134	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  00137	ff 75 dc	 push	 DWORD PTR __Newvec$[ebp]
  0013a	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@H@std@@QAEXQAHI@Z ; std::allocator<int>::deallocate

; 762  :         _RERAISE;

  00142	6a 00		 push	 0
  00144	6a 00		 push	 0
  00146	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN41@Emplace_re:

; 738  :             _Xlength();

  0014b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN42@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00150	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN39@Emplace_re:
  00155	cc		 int	 3
  00156	cc		 int	 3
  00157	cc		 int	 3
  00158	cc		 int	 3
  00159	cc		 int	 3
  0015a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z ENDP ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 07		 mov	 eax, DWORD PTR [edi]
  00005	85 c0		 test	 eax, eax
  00007	74 45		 je	 SHORT $LN4@vector

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00009	57		 push	 edi
  0000a	ff 77 04	 push	 DWORD PTR [edi+4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00016	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001b	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0001d	f7 e9		 imul	 ecx
  0001f	c1 fa 02	 sar	 edx, 2
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002c	c1 e0 03	 shl	 eax, 3
  0002f	50		 push	 eax
  00030	ff 37		 push	 DWORD PTR [edi]
  00032	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00037	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003d	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  00040	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1700 :             _Myend   = pointer();

  00047	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0004e	5f		 pop	 edi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  0004f	c3		 ret	 0
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ
text$yd	SEGMENT
__$EHRec$ = -12						; size = 12
??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ PROC		; `Mammoth::Get'::`2'::`dynamic atexit destructor for 'i'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00029	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A+20
  0002f	85 c9		 test	 ecx, ecx
  00031	74 32		 je	 SHORT $LN9@dynamic

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00033	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A+28
  00038	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003a	83 e0 fc	 and	 eax, -4			; fffffffcH
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00044	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00047	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A+20, 0

; 1699 :             _Mylast  = pointer();

  00051	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A+24, 0

; 1700 :             _Myend   = pointer();

  0005b	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A+28, 0
$LN9@dynamic:
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
text$yd	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ$0:
  00000	b9 14 00 00 00	 mov	 ecx, OFFSET ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A+20
  00005	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
__ehhandler$??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ:
  0000f	90		 npad	 1
  00010	90		 npad	 1
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ ENDP		; `Mammoth::Get'::`2'::`dynamic atexit destructor for 'i''
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitRecvMsg@@YAXPAD@Z
_TEXT	SEGMENT
_temp$ = -524						; size = 260
_msg$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
?InitRecvMsg@@YAXPAD@Z PROC				; InitRecvMsg, COMDAT

; 20242: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]

; 20243: 	char temp[STR_BUFFER_SIZE];
; 20244: 	char msg[STR_BUFFER_SIZE];
; 20245: 	getStringToken(data, '|', 2, sizeof(temp) - 1, temp);

  00016	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _temp$[ebp]
  0001c	51		 push	 ecx
  0001d	68 03 01 00 00	 push	 259			; 00000103H
  00022	6a 02		 push	 2
  00024	6a 7c		 push	 124			; 0000007cH
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 20246: #ifndef _CHANNEL_MODIFY
; 20247: 	sprintf(msg, "[é¢é]%s", temp);
; 20248: #else
; 20249: 	sprintf(msg, "[ëí]%s", temp);

  0002c	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  00032	50		 push	 eax
  00033	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_08MMBFKAPF@?$FL?$LE?k?H?$KN?$FN?$CFs@
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _sprintf

; 20250: 	TradeTalk(msg);

  00044	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?TradeTalk@@YAXPAD@Z	; TradeTalk

; 20251: 	SaveChatData(msg, 'R', false);

  00050	6a 00		 push	 0
  00052	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00058	6a 52		 push	 82			; 00000052H
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?SaveChatData@@YAXPADD_N@Z ; SaveChatData

; 20252: #endif
; 20253: 	StockChatBufferLine(msg, 2);

  00060	6a 00		 push	 0
  00062	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00068	6a 02		 push	 2
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine

; 20254: }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	83 c4 3c	 add	 esp, 60			; 0000003cH
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?InitRecvMsg@@YAXPAD@Z ENDP				; InitRecvMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitRoomInfo@@YAXXZ
_TEXT	SEGMENT
?InitRoomInfo@@YAXXZ PROC				; InitRoomInfo, COMDAT

; 19922: 	for (int i = 0; i < 50; i++) {

  00000	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00005	ba 60 04 00 00	 mov	 edx, OFFSET ?chatInfo@@3UCHATINFO@@A+1120
  0000a	56		 push	 esi
  0000b	be 24 00 00 00	 mov	 esi, OFFSET ?chatInfo@@3UCHATINFO@@A+36
  00010	b9 78 03 00 00	 mov	 ecx, OFFSET ?chatInfo@@3UCHATINFO@@A+888
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@InitRoomIn:

; 19923: 		chatInfo.memberIndex[i] = 0;

  00020	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00026	8d 76 11	 lea	 esi, DWORD PTR [esi+17]

; 19924: 		strcpy(chatInfo.memberName[i], "");

  00029	88 46 ef	 mov	 BYTE PTR [esi-17], al
  0002c	8d 52 21	 lea	 edx, DWORD PTR [edx+33]
  0002f	83 c1 04	 add	 ecx, 4

; 19925: 		strcpy(chatInfo.nickName[i], "");

  00032	88 42 df	 mov	 BYTE PTR [edx-33], al
  00035	81 f9 40 04 00
	00		 cmp	 ecx, OFFSET ?chatInfo@@3UCHATINFO@@A+1088
  0003b	7c e3		 jl	 SHORT $LL4@InitRoomIn

; 19926: 	}
; 19927: 	chatInfo.chiefFlag = 0;

  0003d	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+28, 0

; 19928: 	chatInfo.chiefIndex = 0;

  00047	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+24, 0

; 19929: 	chatInfo.memberNum = 0;

  00051	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+32, 0

; 19930: 	firMemNo = 0;

  0005b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?firMemNo@@3HA, 0 ; firMemNo
  00065	5e		 pop	 esi

; 19931: }

  00066	c3		 ret	 0
?InitRoomInfo@@YAXXZ ENDP				; InitRoomInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?SwapOrder@@YAXHH@Z
_TEXT	SEGMENT
_tempIndex$1$ = -72					; size = 4
_pos1$GSCopy$1$ = -68					; size = 4
_pos2$GSCopy$1$ = -64					; size = 4
_tempNick$ = -60					; size = 33
_tempName$ = -24					; size = 17
__$ArrayPad$ = -4					; size = 4
_pos1$ = 8						; size = 4
_pos2$ = 12						; size = 4
?SwapOrder@@YAXHH@Z PROC				; SwapOrder, COMDAT

; 19902: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pos1$[ebp]

; 19903: 	char    tempName[CHAR_NAME_LEN + 1];
; 19904: 	int     tempIndex;
; 19905: 	char    tempNick[CHAR_FREENAME_LEN + 1];
; 19906: 
; 19907: 	strcpy(tempName, chatInfo.memberName[pos1]);

  00014	8d 55 e8	 lea	 edx, DWORD PTR _tempName$[ebp]
  00017	56		 push	 esi
  00018	8b 75 0c	 mov	 esi, DWORD PTR _pos2$[ebp]
  0001b	8b c3		 mov	 eax, ebx
  0001d	89 75 c0	 mov	 DWORD PTR _pos2$GSCopy$1$[ebp], esi
  00020	c1 e0 04	 shl	 eax, 4
  00023	8d b3 24 00 00
	00		 lea	 esi, DWORD PTR ?chatInfo@@3UCHATINFO@@A[ebx+36]
  00029	03 f0		 add	 esi, eax
  0002b	89 5d bc	 mov	 DWORD PTR _pos1$GSCopy$1$[ebp], ebx
  0002e	8b ce		 mov	 ecx, esi
  00030	2b d6		 sub	 edx, esi
$LL3@SwapOrder:
  00032	8a 01		 mov	 al, BYTE PTR [ecx]
  00034	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00037	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0003b	84 c0		 test	 al, al
  0003d	75 f3		 jne	 SHORT $LL3@SwapOrder

; 19908: 	strcpy(tempNick, chatInfo.nickName[pos1]);

  0003f	57		 push	 edi
  00040	8b c3		 mov	 eax, ebx
  00042	8d bb 60 04 00
	00		 lea	 edi, DWORD PTR ?chatInfo@@3UCHATINFO@@A[ebx+1120]
  00048	c1 e0 05	 shl	 eax, 5
  0004b	8d 55 c4	 lea	 edx, DWORD PTR _tempNick$[ebp]
  0004e	03 f8		 add	 edi, eax
  00050	8b cf		 mov	 ecx, edi
  00052	2b d7		 sub	 edx, edi
$LL4@SwapOrder:
  00054	8a 01		 mov	 al, BYTE PTR [ecx]
  00056	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00059	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0005d	84 c0		 test	 al, al
  0005f	75 f3		 jne	 SHORT $LL4@SwapOrder

; 19909: 	tempIndex = chatInfo.memberIndex[pos1];

  00061	8b 04 9d 78 03
	00 00		 mov	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A[ebx*4+888]

; 19910: 
; 19911: 	strcpy(chatInfo.memberName[pos1], chatInfo.memberName[pos2]);

  00068	8b 55 c0	 mov	 edx, DWORD PTR _pos2$GSCopy$1$[ebp]
  0006b	89 45 b8	 mov	 DWORD PTR _tempIndex$1$[ebp], eax
  0006e	8b c2		 mov	 eax, edx
  00070	c1 e0 04	 shl	 eax, 4
  00073	8d 9a 24 00 00
	00		 lea	 ebx, DWORD PTR ?chatInfo@@3UCHATINFO@@A[edx+36]
  00079	03 d8		 add	 ebx, eax
  0007b	8b cb		 mov	 ecx, ebx
  0007d	2b f3		 sub	 esi, ebx
  0007f	90		 npad	 1
$LL5@SwapOrder:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00085	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  00089	84 c0		 test	 al, al
  0008b	75 f3		 jne	 SHORT $LL5@SwapOrder

; 19912: 	strcpy(chatInfo.nickName[pos1], chatInfo.nickName[pos2]);

  0008d	8b c2		 mov	 eax, edx
  0008f	8d 92 60 04 00
	00		 lea	 edx, DWORD PTR ?chatInfo@@3UCHATINFO@@A[edx+1120]
  00095	c1 e0 05	 shl	 eax, 5
  00098	03 d0		 add	 edx, eax
  0009a	8b ca		 mov	 ecx, edx
  0009c	2b fa		 sub	 edi, edx
  0009e	66 90		 npad	 2
$LL6@SwapOrder:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000a5	88 44 0f ff	 mov	 BYTE PTR [edi+ecx-1], al
  000a9	84 c0		 test	 al, al
  000ab	75 f3		 jne	 SHORT $LL6@SwapOrder

; 19913: 	chatInfo.memberIndex[pos1] = chatInfo.memberIndex[pos2];

  000ad	8b 75 c0	 mov	 esi, DWORD PTR _pos2$GSCopy$1$[ebp]
  000b0	8b 4d bc	 mov	 ecx, DWORD PTR _pos1$GSCopy$1$[ebp]

; 19914: 
; 19915: 	strcpy(chatInfo.memberName[pos2], tempName);

  000b3	5f		 pop	 edi
  000b4	8b 04 b5 78 03
	00 00		 mov	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A[esi*4+888]
  000bb	89 04 8d 78 03
	00 00		 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A[ecx*4+888], eax
  000c2	8d 4d e8	 lea	 ecx, DWORD PTR _tempName$[ebp]
  000c5	8b c1		 mov	 eax, ecx
  000c7	2b d8		 sub	 ebx, eax
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@SwapOrder:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000d5	88 44 0b ff	 mov	 BYTE PTR [ebx+ecx-1], al
  000d9	84 c0		 test	 al, al
  000db	75 f3		 jne	 SHORT $LL7@SwapOrder

; 19916: 	strcpy(chatInfo.nickName[pos2], tempNick);

  000dd	8d 4d c4	 lea	 ecx, DWORD PTR _tempNick$[ebp]
  000e0	8b c1		 mov	 eax, ecx
  000e2	2b d0		 sub	 edx, eax
$LL8@SwapOrder:
  000e4	8a 01		 mov	 al, BYTE PTR [ecx]
  000e6	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000e9	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  000ed	84 c0		 test	 al, al
  000ef	75 f3		 jne	 SHORT $LL8@SwapOrder

; 19917: 	chatInfo.memberIndex[pos2] = tempIndex;

  000f1	8b 45 b8	 mov	 eax, DWORD PTR _tempIndex$1$[ebp]

; 19918: }

  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f7	89 04 b5 78 03
	00 00		 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A[esi*4+888], eax
  000fe	33 cd		 xor	 ecx, ebp
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?SwapOrder@@YAXHH@Z ENDP				; SwapOrder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?initSetRoomName@@YAXXZ
_TEXT	SEGMENT
?initSetRoomName@@YAXXZ PROC				; initSetRoomName, COMDAT

; 19780: 	DeathMenuAction();

  00000	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 19781: 	DeathMenuAction2();

  00005	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 19782: 	DeathAction(pSetRoomWnd);

  0000a	ff 35 00 00 00
	00		 push	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A ; pSetRoomWnd
  00010	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19783: 	pSetRoomWnd = NULL;
; 19784: 	GetKeyInputFocus(&MyChatBuffer);

  00015	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0001a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A, 0 ; pSetRoomWnd
  00024	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 19785: 	setRoomFlag = TRUE;
; 19786: 	SelRoomBtn = 0;

  00029	33 c0		 xor	 eax, eax
  0002b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?setRoomFlag@@3_NA, 1 ; setRoomFlag
  00032	83 c4 08	 add	 esp, 8
  00035	66 a3 00 00 00
	00		 mov	 WORD PTR ?SelRoomBtn@@3FA, ax ; SelRoomBtn

; 19787: }

  0003b	c3		 ret	 0
?initSetRoomName@@YAXXZ ENDP				; initSetRoomName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??__Fridelist_@?EDI@??MenuProc@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Fridelist_@?EDI@??MenuProc@@YAXXZ@YAXXZ PROC	; `MenuProc'::`1080'::`dynamic atexit destructor for 'ridelist_'', COMDAT

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A
  00006	85 c9		 test	 ecx, ecx
  00008	74 32		 je	 SHORT $LN6@dynamic

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+8
  0000f	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e0 fc	 and	 eax, -4			; fffffffcH
  00014	50		 push	 eax
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  0001e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A, 0

; 1699 :             _Mylast  = pointer();

  00028	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+4, 0

; 1700 :             _Myend   = pointer();

  00032	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+8, 0
$LN6@dynamic:
  0003c	c3		 ret	 0
??__Fridelist_@?EDI@??MenuProc@@YAXXZ@YAXXZ ENDP	; `MenuProc'::`1080'::`dynamic atexit destructor for 'ridelist_''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT ??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ PROC		; sprintf_s<128>, COMDAT

; 1858 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	68 80 00 00 00	 push	 128			; 00000080H
  00011	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1503 :     }
; 1504 :     #endif
; 1505 : 
; 1506 :     #if __STDC_WANT_SECURE_LIB__
; 1507 : 
; 1508 :         _Success_(return >= 0)
; 1509 :         _Check_return_opt_
; 1510 :         _CRT_STDIO_INLINE int __CRTDECL vsprintf_s(
; 1511 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1512 :             _In_                                          size_t      const _BufferCount,
; 1513 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1514 :                                                           va_list           _ArgList
; 1515 :             )
; 1516 :     #if defined _NO_CRT_STDIO_INLINE
; 1517 :     ;
; 1518 :     #else
; 1519 :         {
; 1520 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1521 :         }
; 1522 :     #endif
; 1523 : 
; 1524 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(
; 1525 :             _Success_(return >= 0)
; 1526 :             int, vsprintf_s,
; 1527 :             _Always_(_Post_z_)            char,        _Buffer,
; 1528 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1529 :                                           va_list,     _ArgList
; 1530 :             )
; 1531 : 
; 1532 :     #endif
; 1533 : 
; 1534 :     _Success_(return >= 0)
; 1535 :     _Check_return_opt_
; 1536 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p_l(
; 1537 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1538 :         _In_                                          size_t      const _BufferCount,
; 1539 :         _In_z_ _Printf_format_string_params_(2)       char const* const _Format,
; 1540 :         _In_opt_                                      _locale_t   const _Locale,
; 1541 :                                                       va_list           _ArgList
; 1542 :         )
; 1543 :     #if defined _NO_CRT_STDIO_INLINE
; 1544 :     ;
; 1545 :     #else
; 1546 :     {
; 1547 :         int const _Result = __stdio_common_vsprintf_p(
; 1548 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1549 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1550 : 
; 1551 :         return _Result < 0 ? -1 : _Result;
; 1552 :     }
; 1553 :     #endif
; 1554 : 
; 1555 :     _Success_(return >= 0)
; 1556 :     _Check_return_opt_
; 1557 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p(
; 1558 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1559 :         _In_                                          size_t      const _BufferCount,
; 1560 :         _In_z_ _Printf_format_string_                 char const* const _Format,
; 1561 :                                                       va_list           _ArgList
; 1562 :         )
; 1563 :     #if defined _NO_CRT_STDIO_INLINE
; 1564 :     ;
; 1565 :     #else
; 1566 :     {
; 1567 :         return _vsprintf_p_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1568 :     }
; 1569 :     #endif
; 1570 : 
; 1571 :     _Success_(return >= 0)
; 1572 :     _Check_return_opt_
; 1573 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s_l(
; 1574 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1575 :         _In_                                              size_t      const _BufferCount,
; 1576 :         _In_                                              size_t      const _MaxCount,
; 1577 :         _In_z_ _Printf_format_string_params_(2)           char const* const _Format,
; 1578 :         _In_opt_                                          _locale_t   const _Locale,
; 1579 :                                                           va_list          _ArgList
; 1580 :         )
; 1581 :     #if defined _NO_CRT_STDIO_INLINE
; 1582 :     ;
; 1583 :     #else
; 1584 :     {
; 1585 :         int const _Result = __stdio_common_vsnprintf_s(
; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;
; 1590 :     }
; 1591 :     #endif
; 1592 : 
; 1593 :     _Success_(return >= 0)
; 1594 :     _Check_return_opt_
; 1595 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s(
; 1596 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1597 :         _In_                                              size_t      const _BufferCount,
; 1598 :         _In_                                              size_t      const _MaxCount,
; 1599 :         _In_z_ _Printf_format_string_                     char const* const _Format,
; 1600 :                                                           va_list           _ArgList
; 1601 :         )
; 1602 :     #if defined _NO_CRT_STDIO_INLINE
; 1603 :     ;
; 1604 :     #else
; 1605 :     {
; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1607 :     }
; 1608 :     #endif
; 1609 : 
; 1610 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1611 :         _Success_(return >= 0)
; 1612 :         int, _vsnprintf_s,
; 1613 :         _Always_(_Post_z_)            char,        _Buffer,
; 1614 :         _In_                          size_t,      _BufferCount,
; 1615 :         _In_z_ _Printf_format_string_ char const*, _Format,
; 1616 :                                       va_list,     _ArgList
; 1617 :         )
; 1618 : 
; 1619 :     #if __STDC_WANT_SECURE_LIB__
; 1620 : 
; 1621 :         _Success_(return >= 0)
; 1622 :         _Check_return_opt_
; 1623 :         _CRT_STDIO_INLINE int __CRTDECL vsnprintf_s(
; 1624 :             _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1625 :             _In_                                              size_t      const _BufferCount,
; 1626 :             _In_                                              size_t      const _MaxCount,
; 1627 :             _In_z_ _Printf_format_string_                     char const* const _Format,
; 1628 :                                                               va_list           _ArgList
; 1629 :             )
; 1630 :     #if defined _NO_CRT_STDIO_INLINE
; 1631 :     ;
; 1632 :     #else
; 1633 :         {
; 1634 :             return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1635 :         }
; 1636 :     #endif
; 1637 : 
; 1638 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1639 :             _Success_(return >= 0)
; 1640 :             int, vsnprintf_s,
; 1641 :             _Always_(_Post_z_)            char,        _Buffer,
; 1642 :             _In_                          size_t,      _BufferCount,
; 1643 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1644 :                                           va_list,     _ArgList
; 1645 :             )
; 1646 : 
; 1647 :     #endif
; 1648 : 
; 1649 :     _Check_return_opt_
; 1650 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_l(
; 1651 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1652 :         _In_opt_                                _locale_t   const _Locale,
; 1653 :                                                 va_list           _ArgList
; 1654 :         )
; 1655 :     #if defined _NO_CRT_STDIO_INLINE
; 1656 :     ;
; 1657 :     #else
; 1658 :     {
; 1659 :         int const _Result = __stdio_common_vsprintf(
; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;
; 1664 :     }
; 1665 :     #endif
; 1666 : 
; 1667 :     _Check_return_
; 1668 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf(
; 1669 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1670 :                                       va_list           _ArgList
; 1671 :         )
; 1672 :     #if defined _NO_CRT_STDIO_INLINE
; 1673 :     ;
; 1674 :     #else
; 1675 :     {
; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);
; 1677 :     }
; 1678 :     #endif
; 1679 : 
; 1680 :     _Check_return_opt_
; 1681 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p_l(
; 1682 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1683 :         _In_opt_                                _locale_t   const _Locale,
; 1684 :                                                 va_list           _ArgList
; 1685 :         )
; 1686 :     #if defined _NO_CRT_STDIO_INLINE
; 1687 :     ;
; 1688 :     #else
; 1689 :     {
; 1690 :         int const _Result = __stdio_common_vsprintf_p(
; 1691 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1692 :             NULL, 0, _Format, _Locale, _ArgList);
; 1693 : 
; 1694 :         return _Result < 0 ? -1 : _Result;
; 1695 :     }
; 1696 :     #endif
; 1697 : 
; 1698 :     _Check_return_
; 1699 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p(
; 1700 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1701 :                                       va_list           _ArgList
; 1702 :         )
; 1703 :     #if defined _NO_CRT_STDIO_INLINE
; 1704 :     ;
; 1705 :     #else
; 1706 :     {
; 1707 :         return _vscprintf_p_l(_Format, NULL, _ArgList);
; 1708 :     }
; 1709 :     #endif
; 1710 : 
; 1711 :     _Check_return_opt_
; 1712 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c_l(
; 1713 :         _Out_writes_opt_(_BufferCount)          char*       const _Buffer,
; 1714 :         _In_                                    size_t      const _BufferCount,
; 1715 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1716 :         _In_opt_                                _locale_t   const _Locale,
; 1717 :                                                 va_list           _ArgList
; 1718 :         )
; 1719 :     #if defined _NO_CRT_STDIO_INLINE
; 1720 :     ;
; 1721 :     #else
; 1722 :     {
; 1723 :         int const _Result = __stdio_common_vsprintf(
; 1724 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1725 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1726 : 
; 1727 :         return _Result < 0 ? -1 : _Result;
; 1728 :     }
; 1729 :     #endif
; 1730 : 
; 1731 :     _Success_(return >= 0)
; 1732 :     _Check_return_opt_
; 1733 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c(
; 1734 :         _Out_writes_opt_(_BufferCount) char*       const _Buffer,
; 1735 :         _In_                           size_t      const _BufferCount,
; 1736 :         _In_z_ _Printf_format_string_  char const* const _Format,
; 1737 :                                        va_list           _ArgList
; 1738 :         )
; 1739 :     #if defined _NO_CRT_STDIO_INLINE
; 1740 :     ;
; 1741 :     #else
; 1742 :     {
; 1743 :         return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1744 :     }
; 1745 :     #endif
; 1746 : 
; 1747 :     _Success_(return >= 0)
; 1748 :     _Check_return_opt_ _CRT_INSECURE_DEPRECATE(_sprintf_s_l)
; 1749 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_l(
; 1750 :         _Pre_notnull_ _Always_(_Post_z_)        char*       const _Buffer,
; 1751 :         _In_z_ _Printf_format_string_params_(0) char const* const _Format,
; 1752 :         _In_opt_                                _locale_t   const _Locale,
; 1753 :         ...)
; 1754 :     #if defined _NO_CRT_STDIO_INLINE
; 1755 :     ;
; 1756 :     #else
; 1757 :     {
; 1758 :         int _Result;
; 1759 :         va_list _ArgList;
; 1760 :         __crt_va_start(_ArgList, _Locale);
; 1761 : 
; 1762 :         #pragma warning(push)
; 1763 :         #pragma warning(disable: 4996) // Deprecation
; 1764 :         _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
; 1765 :         #pragma warning(pop)
; 1766 : 
; 1767 :         __crt_va_end(_ArgList);
; 1768 :         return _Result;
; 1769 :     }
; 1770 :     #endif
; 1771 : 
; 1772 :     _Success_(return >= 0)
; 1773 :     _Check_return_opt_
; 1774 :     _CRT_STDIO_INLINE int __CRTDECL sprintf(
; 1775 :         _Pre_notnull_ _Always_(_Post_z_) char*       const _Buffer,
; 1776 :         _In_z_ _Printf_format_string_    char const* const _Format,
; 1777 :         ...)
; 1778 :     #if defined _NO_CRT_STDIO_INLINE
; 1779 :     ;
; 1780 :     #else
; 1781 :     {
; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }
; 1794 :     #endif
; 1795 : 
; 1796 :     #pragma warning(push)
; 1797 :     #pragma warning(disable: 4996)
; 1798 :     #pragma warning(disable: 28719) // __WARNING_BANNED_API_USAGE
; 1799 :     #pragma warning(disable: 28726) // __WARNING_BANNED_API_USAGEL2
; 1800 :     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(
; 1801 :         _Success_(return >= 0)
; 1802 :         int, __RETURN_POLICY_SAME, __EMPTY_DECLSPEC, __CRTDECL, sprintf, vsprintf,
; 1803 :         _Pre_notnull_ _Always_(_Post_z_), char,        _Buffer,
; 1804 :         _In_z_ _Printf_format_string_     char const*, _Format
; 1805 :         )
; 1806 :     #pragma warning(pop)
; 1807 : 
; 1808 :     _Success_(return >= 0)
; 1809 :     _Check_return_opt_
; 1810 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_s_l(
; 1811 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1812 :         _In_                                          size_t      const _BufferCount,
; 1813 :         _In_z_ _Printf_format_string_params_(0)       char const* const _Format,
; 1814 :         _In_opt_                                      _locale_t   const _Locale,
; 1815 :         ...)
; 1816 :     #if defined _NO_CRT_STDIO_INLINE
; 1817 :     ;
; 1818 :     #else
; 1819 :     {
; 1820 :         int _Result;
; 1821 :         va_list _ArgList;
; 1822 :         __crt_va_start(_ArgList, _Locale);
; 1823 :         _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1824 :         __crt_va_end(_ArgList);
; 1825 :         return _Result;
; 1826 :     }
; 1827 :     #endif
; 1828 : 
; 1829 :     #if __STDC_WANT_SECURE_LIB__
; 1830 : 
; 1831 :         _Success_(return >= 0)
; 1832 :         _Check_return_opt_
; 1833 :         _CRT_STDIO_INLINE int __CRTDECL sprintf_s(
; 1834 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1835 :             _In_                                          size_t      const _BufferCount,
; 1836 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1837 :             ...)
; 1838 :     #if defined _NO_CRT_STDIO_INLINE
; 1839 :     ;
; 1840 :     #else
; 1841 :         {
; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);
; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1846 :             __crt_va_end(_ArgList);
; 1847 :             return _Result;
; 1848 :         }
; 1849 :     #endif
; 1850 : 
; 1851 :     #endif
; 1852 : 
; 1853 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ ENDP		; sprintf_s<128>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?í»?Ôô??Ï¢üÞ?@@YAXXZ
_TEXT	SEGMENT
?í»?Ôô??Ï¢üÞ?@@YAXXZ PROC				; í»?Ôô??Ï¢üÞ?, COMDAT

; 10430: 	static int æ¹åçªå£æ¯å¦æå¼;
; 10431: 	static int btnId[15], btnState[15];
; 10432: 	static int x = 0, y = 0;
; 10433: 	static DWORD dwPressTime;
; 10434: 	static char msg[][8] = {
; 10435: 		"í ì¥",
; 10436: 		"í ì",
; 10437: 		"ì ë¡"
; 10438: 	};
; 10439: 	static char  chardir[][8] = {
; 10440: 		"ìë",
; 10441: 		"ì¢í",
; 10442: 		"ì¢ì¸¡",
; 10443: 		"ì¢ì",
; 10444: 		"ì",
; 10445: 		"ì°ì",
; 10446: 		"ì°ì¸¡",
; 10447: 		"ì°í"
; 10448: 	};
; 10449: 	if (pèªå¨ç»éçªå£ == NULL) {

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pí»?Ôô??Ï¢@@3PAUaction@@A ; pí»?Ôô??Ï¢
  00005	85 c0		 test	 eax, eax
  00007	0f 85 b4 00 00
	00		 jne	 $LN20@

; 10450: 		æ¹åçªå£æ¯å¦æå¼ = FALSE;

  0000d	a3 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, eax

; 10451: 		æ¹åå¨ä½ = NULL;

  00012	a3 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A, eax ; Û°ú¾?íÂ

; 10452: 		äººç©å¨ä½ = NULL;

  00017	a3 00 00 00 00	 mov	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A, eax ; ìÑÚª?íÂ

; 10453: 		int w = 412;
; 10454: 		int h = 301;
; 10455: 		if (ResoMode == åè¾¨ç::mode800) {

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00021	83 f8 03	 cmp	 eax, 3
  00024	75 0a		 jne	 SHORT $LN22@

; 10456: 			x = 800 / 2;

  00026	b8 90 01 00 00	 mov	 eax, 400		; 00000190H

; 10457: 			y = 600 / 2;

  0002b	8d 48 9c	 lea	 ecx, DWORD PTR [eax-100]

; 10458: 		}

  0002e	eb 19		 jmp	 SHORT $LN157@
$LN22@:

; 10459: 		else if (ResoMode == åè¾¨ç::mode1024) {

  00030	83 f8 04	 cmp	 eax, 4
  00033	75 0a		 jne	 SHORT $LN24@

; 10460: 			x = 1024 / 2;

  00035	b8 00 02 00 00	 mov	 eax, 512		; 00000200H

; 10461: 			y = 768 / 2;

  0003a	8d 48 80	 lea	 ecx, DWORD PTR [eax-128]

; 10462: 		}

  0003d	eb 0a		 jmp	 SHORT $LN157@
$LN24@:

; 10463: 		else {
; 10464: 			x = 640 / 2;

  0003f	b8 40 01 00 00	 mov	 eax, 320		; 00000140H

; 10465: 			y = 480 / 2;

  00044	b9 f0 00 00 00	 mov	 ecx, 240		; 000000f0H
$LN157@:

; 10466: 		}
; 10467: 		//x = (lpDraw->xSize - w) / 2;
; 10468: 		//y = (lpDraw->ySize - h) / 2;
; 10469: 		pèªå¨ç»éçªå£ = MakeWindowDisp(x, y, w, h, 52137, -1);

  00049	6a ff		 push	 -1
  0004b	68 a9 cb 00 00	 push	 52137			; 0000cba9H
  00050	68 2d 01 00 00	 push	 301			; 0000012dH
  00055	68 9c 01 00 00	 push	 412			; 0000019cH
  0005a	51		 push	 ecx
  0005b	50		 push	 eax
  0005c	a3 00 00 00 00	 mov	 DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, eax
  00061	89 0d 00 00 00
	00		 mov	 DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, ecx
  00067	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0006c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	a3 00 00 00 00	 mov	 DWORD PTR ?pí»?Ôô??Ï¢@@3PAUaction@@A, eax ; pí»?Ôô??Ï¢
  0007b	33 c0		 xor	 eax, eax
  0007d	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA, xmm0
  00084	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+16, xmm0
  0008b	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+32, xmm0
  00092	66 0f d6 05 30
	00 00 00	 movq	 QWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+48, xmm0
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL130@:

; 10471: 			btnId[i] = -2;
; 10472: 			if (i < 10)

  000a0	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000a3	73 0b		 jae	 SHORT $LN131@

; 10473: 				btnState[i] = 0;

  000a5	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA[eax*4], 0
$LN131@:

; 10470: 		for (int i = 0; i < 14; i++) {

  000b0	40		 inc	 eax
  000b1	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  000b4	7c ea		 jl	 SHORT $LL130@

; 10474: 		}
; 10475: 		dwPressTime = 0;

  000b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwPressTime@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4KA, 0

; 10785: 		}
; 10786: 	}
; 10787: }

  000c0	c3		 ret	 0
$LN20@:

; 10476: 	}
; 10477: 	else {
; 10478: 		if (pèªå¨ç»éçªå£->hp >= 1) {

  000c1	83 78 78 01	 cmp	 DWORD PTR [eax+120], 1
  000c5	0f 8c a2 0b 00
	00		 jl	 $LN111@

; 10479: 			if (joy_trg[0] & JOY_ESC) {

  000cb	f7 05 00 00 00
	00 00 00 00 80	 test	 DWORD PTR ?joy_trg@@3PAKA, -2147483648 ; 80000000H
  000d5	74 5a		 je	 SHORT $LN28@

; 10480: 				èªå¨ç»éçªå£ = FALSE;
; 10481: 				DeathAction(pèªå¨ç»éçªå£);

  000d7	50		 push	 eax
  000d8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?í»?Ôô??Ï¢@@3HA, 0 ; í»?Ôô??Ï¢
  000e2	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10482: 				DeathAction(æ¹åå¨ä½);

  000e7	ff 35 00 00 00
	00		 push	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A ; Û°ú¾?íÂ
  000ed	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10483: 				DeathAction(äººç©å¨ä½);

  000f2	ff 35 00 00 00
	00		 push	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A ; ìÑÚª?íÂ
  000f8	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10484: 				äººç©å¨ä½ = NULL;

  00100	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A, 0 ; ìÑÚª?íÂ

; 10485: 				æ¹åçªå£æ¯å¦æå¼ = FALSE;
; 10486: 				æ¹åå¨ä½ = NULL;
; 10487: 				pèªå¨ç»éçªå£ = NULL;
; 10488: 				actBtn = 0;

  0010a	33 c0		 xor	 eax, eax
  0010c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, 0
  00116	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A, 0 ; Û°ú¾?íÂ
  00120	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pí»?Ôô??Ï¢@@3PAUaction@@A, 0 ; pí»?Ôô??Ï¢
  0012a	66 a3 00 00 00
	00		 mov	 WORD PTR ?actBtn@@3FA, ax ; actBtn

; 10785: 		}
; 10786: 	}
; 10787: }

  00130	c3		 ret	 0
$LN28@:

; 10489: 				return;
; 10490: 			}
; 10491: 			if (dwPressTime) {

  00131	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?dwPressTime@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4KA, 0
  00138	56		 push	 esi
  00139	0f 84 0f 04 00
	00		 je	 $LN29@

; 10492: 				if (TimeGetTime() > (dwPressTime + 100)) {

  0013f	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00144	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dwPressTime@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4KA
  0014a	83 c1 64	 add	 ecx, 100		; 00000064H
  0014d	3b c1		 cmp	 eax, ecx
  0014f	0f 86 bc 04 00
	00		 jbe	 $LN151@

; 10493: 					dwPressTime = 0;
; 10494: 					if (btnState[0] == 1) {//å¤§åºå

  00155	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA, 1
  0015c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwPressTime@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4KA, 0
  00166	75 46		 jne	 SHORT $LN121@

; 10495: 						btnState[0] = 0;
; 10496: 						play_se(217, 320, 240);

  00168	68 f0 00 00 00	 push	 240			; 000000f0H
  0016d	68 40 01 00 00	 push	 320			; 00000140H
  00172	68 d9 00 00 00	 push	 217			; 000000d9H
  00177	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA, 0
  00181	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018f	ba 12 00 00 00	 mov	 edx, 18			; 00000012H
$LL5@:

; 10497: 						while (TRUE) {
; 10498: 							PcLanded.å¤§åº--;

  00194	83 e9 01	 sub	 ecx, 1

; 10499: 							if (PcLanded.å¤§åº < 0) {

  00197	0f 48 ca	 cmovs	 ecx, edx

; 10500: 								PcLanded.å¤§åº = 18;
; 10501: 							}
; 10502: 							if (gmgroup[PcLanded.å¤§åº].used) {

  0019a	8b c1		 mov	 eax, ecx
  0019c	c1 e0 06	 shl	 eax, 6
  0019f	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?gmgroup@@3PAUgamegroup@@A[eax], 0
  001a6	74 ec		 je	 SHORT $LL5@

; 10499: 							if (PcLanded.å¤§åº < 0) {

  001a8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A, ecx
$LN121@:

; 10503: 								break;
; 10504: 							}
; 10505: 						}
; 10506: 					}
; 10507: 					if (btnState[1] == 1) {//å¤§åºå 

  001ae	83 3d 04 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+4, 1
  001b5	75 47		 jne	 SHORT $LN122@

; 10508: 						btnState[1] = 0;
; 10509: 						play_se(217, 320, 240);

  001b7	68 f0 00 00 00	 push	 240			; 000000f0H
  001bc	68 40 01 00 00	 push	 320			; 00000140H
  001c1	68 d9 00 00 00	 push	 217			; 000000d9H
  001c6	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+4, 0
  001d0	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  001d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A
  001db	83 c4 0c	 add	 esp, 12			; 0000000cH
  001de	66 90		 npad	 2
$LL7@:

; 10510: 						while (TRUE) {
; 10511: 							PcLanded.å¤§åº++;

  001e0	41		 inc	 ecx

; 10512: 							if (PcLanded.å¤§åº > 18) {

  001e1	33 d2		 xor	 edx, edx
  001e3	8b c1		 mov	 eax, ecx
  001e5	83 f8 12	 cmp	 eax, 18			; 00000012H
  001e8	0f 4f ca	 cmovg	 ecx, edx

; 10513: 								PcLanded.å¤§åº = 0;
; 10514: 							}
; 10515: 							if (gmgroup[PcLanded.å¤§åº].used) {

  001eb	8b c1		 mov	 eax, ecx
  001ed	c1 e0 06	 shl	 eax, 6
  001f0	38 90 00 00 00
	00		 cmp	 BYTE PTR ?gmgroup@@3PAUgamegroup@@A[eax], dl
  001f6	74 e8		 je	 SHORT $LL7@

; 10512: 							if (PcLanded.å¤§åº > 18) {

  001f8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A, ecx
$LN122@:

; 10516: 								break;
; 10517: 							}
; 10518: 						}
; 10519: 					}
; 10520: 
; 10521: 					if (btnState[2] == 1) {//å°åºå

  001fe	83 3d 08 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+8, 1
  00205	75 64		 jne	 SHORT $LN123@

; 10522: 						btnState[2] = 0;
; 10523: 						play_se(217, 320, 240);

  00207	68 f0 00 00 00	 push	 240			; 000000f0H
  0020c	68 40 01 00 00	 push	 320			; 00000140H
  00211	68 d9 00 00 00	 push	 217			; 000000d9H
  00216	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+8, 0
  00220	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 10524: 						if (PcLanded.å¤§åº != -1)

  00225	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?PcLanded@@3ULanded@@A
  0022b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022e	83 fa ff	 cmp	 edx, -1
  00231	74 38		 je	 SHORT $LN123@
  00233	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A+8
  00239	c1 e2 06	 shl	 edx, 6
  0023c	0f be b2 02 00
	00 00		 movsx	 esi, BYTE PTR ?gmgroup@@3PAUgamegroup@@A[edx+2]
$LL9@:

; 10525: 						{
; 10526: 							while (TRUE) {
; 10527: 								PcLanded.å°åº--;

  00243	83 e9 01	 sub	 ecx, 1
  00246	89 0d 08 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+8, ecx

; 10528: 								if (PcLanded.å°åº < 0) {

  0024c	79 0e		 jns	 SHORT $LN40@

; 10529: 									PcLanded.å°åº = gmgroup[PcLanded.å¤§åº].num - 1;

  0024e	0f be 8a 01 00
	00 00		 movsx	 ecx, BYTE PTR ?gmgroup@@3PAUgamegroup@@A[edx+1]
  00255	49		 dec	 ecx
  00256	89 0d 08 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+8, ecx
$LN40@:

; 10530: 								}
; 10531: 								if (gmsv[gmgroup[PcLanded.å¤§åº].startindex + PcLanded.å°åº].used) {

  0025c	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  0025f	c1 e0 08	 shl	 eax, 8
  00262	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?gmsv@@3PAUgameserver@@A[eax], 0
  00269	74 d8		 je	 SHORT $LL9@
$LN123@:

; 10532: 									break;
; 10533: 								}
; 10534: 							}
; 10535: 						}
; 10536: 					}
; 10537: 					if (btnState[3] == 1) {//å°åºå 

  0026b	83 3d 0c 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+12, 1
  00272	75 63		 jne	 SHORT $LN124@

; 10538: 						btnState[3] = 0;
; 10539: 						play_se(217, 320, 240);

  00274	68 f0 00 00 00	 push	 240			; 000000f0H
  00279	68 40 01 00 00	 push	 320			; 00000140H
  0027e	68 d9 00 00 00	 push	 217			; 000000d9H
  00283	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+12, 0
  0028d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 10540: 						if (PcLanded.å¤§åº != -1)

  00292	a1 00 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029a	83 f8 ff	 cmp	 eax, -1
  0029d	74 38		 je	 SHORT $LN124@
  0029f	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A+8
  002a5	c1 e0 06	 shl	 eax, 6
  002a8	57		 push	 edi
  002a9	0f be 90 01 00
	00 00		 movsx	 edx, BYTE PTR ?gmgroup@@3PAUgamegroup@@A[eax+1]
  002b0	0f be b0 02 00
	00 00		 movsx	 esi, BYTE PTR ?gmgroup@@3PAUgamegroup@@A[eax+2]
$LL11@:

; 10541: 						{
; 10542: 							while (TRUE) {
; 10543: 								PcLanded.å°åº++;

  002b7	41		 inc	 ecx

; 10544: 								if (PcLanded.å°åº >= gmgroup[PcLanded.å¤§åº].num) {

  002b8	33 ff		 xor	 edi, edi
  002ba	8b c1		 mov	 eax, ecx
  002bc	3b c2		 cmp	 eax, edx
  002be	0f 4d cf	 cmovge	 ecx, edi

; 10545: 									PcLanded.å°åº = 0;
; 10546: 								}
; 10547: 								if (gmsv[gmgroup[PcLanded.å¤§åº].startindex + PcLanded.å°åº].used) {

  002c1	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  002c4	c1 e0 08	 shl	 eax, 8
  002c7	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?gmsv@@3PAUgameserver@@A[eax], 0
  002ce	74 e7		 je	 SHORT $LL11@

; 10544: 								if (PcLanded.å°åº >= gmgroup[PcLanded.å¤§åº].num) {

  002d0	89 0d 08 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+8, ecx
  002d6	5f		 pop	 edi
$LN124@:

; 10548: 									break;
; 10549: 								}
; 10550: 							}
; 10551: 						}
; 10552: 					}
; 10553: 					if (btnState[4] == 1) {//éæ¨¡å

  002d7	83 3d 10 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+16, 1
  002de	75 64		 jne	 SHORT $LN50@

; 10554: 						btnState[4] = 0;
; 10555: 						play_se(217, 320, 240);

  002e0	68 f0 00 00 00	 push	 240			; 000000f0H
  002e5	68 40 01 00 00	 push	 320			; 00000140H
  002ea	68 d9 00 00 00	 push	 217			; 000000d9H
  002ef	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+16, 0
  002f9	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 10556: 						PcLanded.éæ¨¡--;

  002fe	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A+4
  00304	83 c4 0c	 add	 esp, 12			; 0000000cH
  00307	83 e9 01	 sub	 ecx, 1
  0030a	89 0d 04 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+4, ecx

; 10557: 						if (PcLanded.éæ¨¡ < 0) {

  00310	79 0d		 jns	 SHORT $LN47@

; 10558: 							PcLanded.éæ¨¡ = 2;

  00312	b9 02 00 00 00	 mov	 ecx, 2
  00317	89 0d 04 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+4, ecx

; 10559: 						}
; 10560: 						if (PcLanded.éæ¨¡ == 0 || PcLanded.éæ¨¡ == 2) {

  0031d	eb 09		 jmp	 SHORT $LN49@
$LN47@:
  0031f	85 c9		 test	 ecx, ecx
  00321	74 05		 je	 SHORT $LN49@
  00323	83 f9 02	 cmp	 ecx, 2
  00326	75 0a		 jne	 SHORT $LN48@
$LN49@:

; 10561: 							PcLanded.æ¯å¦èªå¨åè¯ = FALSE;

  00328	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+16, 0
$LN48@:

; 10562: 						}
; 10563: 						if (PcLanded.éæ¨¡ == 1) {

  00332	a1 14 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A+20
  00337	33 d2		 xor	 edx, edx
  00339	83 f9 01	 cmp	 ecx, 1
  0033c	0f 44 c2	 cmove	 eax, edx
  0033f	a3 14 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+20, eax
$LN50@:

; 10564: 							PcLanded.æ¯å¦èªå¨éæ = FALSE;
; 10565: 						}
; 10566: 					}
; 10567: 					if (btnState[5] == 1) {//éæ¨¡å 

  00344	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+20, 1
  0034b	75 62		 jne	 SHORT $LN55@

; 10568: 						btnState[5] = 0;
; 10569: 						play_se(217, 320, 240);

  0034d	68 f0 00 00 00	 push	 240			; 000000f0H
  00352	68 40 01 00 00	 push	 320			; 00000140H
  00357	68 d9 00 00 00	 push	 217			; 000000d9H
  0035c	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+20, 0
  00366	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 10570: 						PcLanded.éæ¨¡++;

  0036b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A+4
  00371	83 c4 0c	 add	 esp, 12			; 0000000cH
  00374	41		 inc	 ecx
  00375	89 0d 04 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+4, ecx
  0037b	83 f9 02	 cmp	 ecx, 2

; 10571: 						if (PcLanded.éæ¨¡ > 2) {

  0037e	7e 0a		 jle	 SHORT $LN52@

; 10572: 							PcLanded.éæ¨¡ = 0;

  00380	33 c9		 xor	 ecx, ecx
  00382	89 0d 04 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+4, ecx

; 10573: 						}
; 10574: 						if (PcLanded.éæ¨¡ == 0 || PcLanded.éæ¨¡ == 2) {

  00388	eb 09		 jmp	 SHORT $LN54@
$LN52@:
  0038a	85 c9		 test	 ecx, ecx
  0038c	74 05		 je	 SHORT $LN54@
  0038e	83 f9 02	 cmp	 ecx, 2
  00391	75 0a		 jne	 SHORT $LN53@
$LN54@:

; 10575: 							PcLanded.æ¯å¦èªå¨åè¯ = FALSE;

  00393	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+16, 0
$LN53@:

; 10576: 						}
; 10577: 						if (PcLanded.éæ¨¡ == 1) {

  0039d	a1 14 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A+20
  003a2	33 d2		 xor	 edx, edx
  003a4	83 f9 01	 cmp	 ecx, 1
  003a7	0f 44 c2	 cmove	 eax, edx
  003aa	a3 14 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+20, eax
$LN55@:

; 10578: 							PcLanded.æ¯å¦èªå¨éæ = FALSE;
; 10579: 						}
; 10580: 					}
; 10581: 					if (btnState[6] == 1) {//è§è²å

  003af	83 3d 18 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+24, 1
  003b6	75 46		 jne	 SHORT $LN125@

; 10582: 						btnState[6] = 0;
; 10583: 						play_se(217, 320, 240);

  003b8	68 f0 00 00 00	 push	 240			; 000000f0H
  003bd	68 40 01 00 00	 push	 320			; 00000140H
  003c2	68 d9 00 00 00	 push	 217			; 000000d9H
  003c7	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+24, 0
  003d1	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  003d6	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A+12
  003dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  003df	ba 03 00 00 00	 mov	 edx, 3
$LL13@:

; 10584: 						while (TRUE) {
; 10585: 							PcLanded.äººç©--;

  003e4	83 e9 01	 sub	 ecx, 1

; 10586: 							if (PcLanded.äººç© < 0) {

  003e7	0f 48 ca	 cmovs	 ecx, edx

; 10587: 								PcLanded.äººç© = 3;
; 10588: 							}
; 10589: 							if (PcLanded.ç»éäººç©åç§°[PcLanded.äººç©][0]) break;

  003ea	8b c1		 mov	 eax, ecx
  003ec	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+12, ecx
  003f2	c1 e0 05	 shl	 eax, 5
  003f5	80 b8 1c 00 00
	00 00		 cmp	 BYTE PTR ?PcLanded@@3ULanded@@A[eax+28], 0
  003fc	74 e6		 je	 SHORT $LL13@
$LN125@:

; 10590: 						}
; 10591: 					}
; 10592: 					if (btnState[7] == 1) {//è§è²å 

  003fe	83 3d 1c 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+28, 1
  00405	75 47		 jne	 SHORT $LN126@

; 10593: 						btnState[7] = 0;
; 10594: 						play_se(217, 320, 240);

  00407	68 f0 00 00 00	 push	 240			; 000000f0H
  0040c	68 40 01 00 00	 push	 320			; 00000140H
  00411	68 d9 00 00 00	 push	 217			; 000000d9H
  00416	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+28, 0
  00420	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00425	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A+12
  0042b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042e	66 90		 npad	 2
$LL15@:

; 10595: 						while (TRUE) {
; 10596: 							PcLanded.äººç©++;

  00430	41		 inc	 ecx

; 10597: 							if (PcLanded.äººç© > 3) {

  00431	33 d2		 xor	 edx, edx
  00433	8b c1		 mov	 eax, ecx
  00435	83 f8 03	 cmp	 eax, 3
  00438	0f 4f ca	 cmovg	 ecx, edx

; 10598: 								PcLanded.äººç© = 0;
; 10599: 							}
; 10600: 							if (PcLanded.ç»éäººç©åç§°[PcLanded.äººç©][0]) break;

  0043b	8b c1		 mov	 eax, ecx
  0043d	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+12, ecx
  00443	c1 e0 05	 shl	 eax, 5
  00446	38 90 1c 00 00
	00		 cmp	 BYTE PTR ?PcLanded@@3ULanded@@A[eax+28], dl
  0044c	74 e2		 je	 SHORT $LL15@
$LN126@:

; 10601: 						}
; 10602: 					}
; 10603: 					if (btnState[8] == 1) {//íì¸

  0044e	83 3d 20 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+32, 1
  00455	75 0c		 jne	 SHORT $LN62@

; 10604: 						btnState[8] = 0;

  00457	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+32, 0
  00461	eb 13		 jmp	 SHORT $LN159@
$LN62@:

; 10605: 						play_se(217, 320, 240);
; 10606: 						DeathAction(pèªå¨ç»éçªå£);
; 10607: 						pèªå¨ç»éçªå£ = NULL;
; 10608: 						èªå¨ç»éçªå£ = FALSE;
; 10609: 						if (æ¹åå¨ä½) {
; 10610: 							DeathAction(æ¹åå¨ä½);
; 10611: 							æ¹åå¨ä½ = NULL;
; 10612: 							DeathAction(äººç©å¨ä½);
; 10613: 							äººç©å¨ä½ = NULL;
; 10614: 						}
; 10615: 						extern short actBtn;
; 10616: 						actBtn = 0;
; 10617: 						return;
; 10618: 					}
; 10619: 					if (btnState[9] == 1) {//ì·¨ì

  00463	83 3d 24 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+36, 1
  0046a	75 7b		 jne	 SHORT $LN64@

; 10620: 						btnState[9] = 0;

  0046c	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+36, 0
$LN159@:

; 10621: 						play_se(217, 320, 240);
; 10622: 						DeathAction(pèªå¨ç»éçªå£);
; 10623: 						pèªå¨ç»éçªå£ = NULL;
; 10624: 						èªå¨ç»éçªå£ = FALSE;
; 10625: 						if (æ¹åå¨ä½) {
; 10626: 							DeathAction(æ¹åå¨ä½);
; 10627: 							æ¹åå¨ä½ = NULL;
; 10628: 							DeathAction(äººç©å¨ä½);
; 10629: 							äººç©å¨ä½ = NULL;
; 10630: 						}
; 10631: 						extern short actBtn;
; 10632: 						actBtn = 0;

  00476	68 f0 00 00 00	 push	 240			; 000000f0H
  0047b	68 40 01 00 00	 push	 320			; 00000140H
  00480	68 d9 00 00 00	 push	 217			; 000000d9H
  00485	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0048a	ff 35 00 00 00
	00		 push	 DWORD PTR ?pí»?Ôô??Ï¢@@3PAUaction@@A ; pí»?Ôô??Ï¢
  00490	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00495	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A ; Û°ú¾?íÂ
  0049a	83 c4 10	 add	 esp, 16			; 00000010H
  0049d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?í»?Ôô??Ï¢@@3HA, 0 ; í»?Ôô??Ï¢
  004a7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pí»?Ôô??Ï¢@@3PAUaction@@A, 0 ; pí»?Ôô??Ï¢
  004b1	85 c0		 test	 eax, eax
  004b3	74 28		 je	 SHORT $LN65@
  004b5	50		 push	 eax
  004b6	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  004bb	ff 35 00 00 00
	00		 push	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A ; ìÑÚª?íÂ
  004c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A, 0 ; Û°ú¾?íÂ
  004cb	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  004d0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A, 0 ; ìÑÚª?íÂ
  004da	83 c4 08	 add	 esp, 8
$LN65@:
  004dd	33 c0		 xor	 eax, eax
  004df	66 a3 00 00 00
	00		 mov	 WORD PTR ?actBtn@@3FA, ax ; actBtn
  004e5	5e		 pop	 esi

; 10785: 		}
; 10786: 	}
; 10787: }

  004e6	c3		 ret	 0
$LN64@:

; 10633: 						return;
; 10634: 					}
; 10635: 					if (btnState[10] == 1) {//æ¹å

  004e7	83 3d 28 00 00
	00 01		 cmp	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+40, 1
  004ee	0f 85 1d 01 00
	00		 jne	 $LN151@

; 10636: 						btnState[10] = 0;
; 10637: 						play_se(217, 320, 240);

  004f4	68 f0 00 00 00	 push	 240			; 000000f0H
  004f9	68 40 01 00 00	 push	 320			; 00000140H
  004fe	68 d9 00 00 00	 push	 217			; 000000d9H
  00503	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+40, 0
  0050d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 10638: 						DeathAction(æ¹åå¨ä½);

  00512	ff 35 00 00 00
	00		 push	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A ; Û°ú¾?íÂ
  00518	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10639: 						æ¹åå¨ä½ = NULL;
; 10640: 						DeathAction(äººç©å¨ä½);

  0051d	ff 35 00 00 00
	00		 push	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A ; ìÑÚª?íÂ
  00523	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A, 0 ; Û°ú¾?íÂ
  0052d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00532	83 c4 14	 add	 esp, 20			; 00000014H

; 10641: 						äººç©å¨ä½ = NULL;

  00535	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A, 0 ; ìÑÚª?íÂ

; 10642: 						æ¹åçªå£æ¯å¦æå¼ = FALSE;

  0053f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, 0

; 10643: 					}
; 10644: 				}
; 10645: 			}

  00549	e9 c3 00 00 00	 jmp	 $LN151@
$LN29@:

; 10646: 			else {
; 10647: 				for (int i = 0; i < 10; i++) {

  0054e	33 f6		 xor	 esi, esi
$LL19@:

; 10648: 					if (HitDispNo == btnId[i]) {

  00550	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00555	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA[esi*4]
  0055c	75 6c		 jne	 SHORT $LN17@

; 10649: 						if (i == 0 || i == 1) ShowBottomLineString(FONT_PAL_WHITE, "ë ì§ì­ ì¤ì ã");

  0055e	85 f6		 test	 esi, esi
  00560	74 05		 je	 SHORT $LN69@
  00562	83 fe 01	 cmp	 esi, 1
  00565	75 0f		 jne	 SHORT $LN68@
$LN69@:
  00567	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LOIJIIEJ@?$LE?k?5?A?v?$LP?$KK?5?$LM?$LD?A?$KE?$KB?$KD@
  0056c	6a 00		 push	 0
  0056e	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  00573	83 c4 08	 add	 esp, 8
$LN68@:

; 10650: 						if (i == 2 || i == 3) ShowBottomLineString(FONT_PAL_WHITE, "ë¼ì¸ì ì¤ì íê³ , ë ì§ì­ì ì¤ì í´ì¼ í¨ã");

  00576	83 fe 02	 cmp	 esi, 2
  00579	74 05		 je	 SHORT $LN71@
  0057b	83 fe 03	 cmp	 esi, 3
  0057e	75 0f		 jne	 SHORT $LN70@
$LN71@:
  00580	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GIHIAMIF@?$LG?s?$MA?N?$MA?$LL?5?$LM?$LD?A?$KE?G?O?$LA?m?0?5?$LE?k?5?A?v?$LP?$KK?$MA?$LL?5?$LM?$LD?A?$KE@
  00585	6a 00		 push	 0
  00587	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  0058c	83 c4 08	 add	 esp, 8
$LN70@:

; 10651: 						if (i == 4 || i == 5) ShowBottomLineString(FONT_PAL_WHITE, "íì¥/íí°ì¥ï¼ìëì¼ë¡ ì ìë§ëê²ë ìì í ììì. íì/íí°ìï¼ì ì  ë° ìë í êµ¬ì±ê°ë¥ ìë¡ï¼ìëì¼ë¡ ì ì ë§ëëë¡ ì¤ì ê°ë¥ psï¼AI ëª¨ëë ìºë¦­í°ë¥¼ ëë¡­íê³  ë¤ì ë¡ê·¸ì¸íë©´ ìëì¼ë¡ ì¼ì§ëë¤ã");

  0058f	83 fe 04	 cmp	 esi, 4
  00592	74 05		 je	 SHORT $LN73@
  00594	83 fe 05	 cmp	 esi, 5
  00597	75 0f		 jne	 SHORT $LN72@
$LN73@:
  00599	68 00 00 00 00	 push	 OFFSET ??_C@_0MB@GBACAPFD@?F?$MA?$MA?e?1?F?D?F?$LM?$MA?e?$KD?$LK?$MA?Z?$LF?$LP?$MA?$LI?$LH?N?5?$MA?$PL?$MA?$LL?$LI?$LI?$LD?$KK?$LA@
  0059e	6a 00		 push	 0
  005a0	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  005a5	83 c4 08	 add	 esp, 8
$LN72@:

; 10652: 						if (i == 6 || i == 7) ShowBottomLineString(FONT_PAL_WHITE, "ë¡ê·¸ì¨ ìºë¦­í° ì¤ì ã");

  005a8	83 fe 06	 cmp	 esi, 6
  005ab	74 05		 je	 SHORT $LN75@
  005ad	83 fe 07	 cmp	 esi, 7
  005b0	75 0f		 jne	 SHORT $LN74@
$LN75@:
  005b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CKOBPJKJ@?$LH?N?$LB?W?$LP?B?5?D?$LD?$LI?$KP?E?M?5?$LM?$LD?A?$KE?$KB?$KD@
  005b7	6a 00		 push	 0
  005b9	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  005be	83 c4 08	 add	 esp, 8
$LN74@:

; 10653: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  005c1	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  005c8	75 08		 jne	 SHORT $LN127@
$LN17@:

; 10646: 			else {
; 10647: 				for (int i = 0; i < 10; i++) {

  005ca	46		 inc	 esi
  005cb	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  005ce	7c 80		 jl	 SHORT $LL19@
  005d0	eb 15		 jmp	 SHORT $LN150@
$LN127@:

; 10654: 							dwPressTime = TimeGetTime();

  005d2	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  005d7	a3 00 00 00 00	 mov	 DWORD PTR ?dwPressTime@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4KA, eax

; 10655: 							btnState[i] = 1;

  005dc	c7 04 b5 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA[esi*4], 1
$LN150@:

; 10656: 							break;
; 10657: 						}
; 10658: 					}
; 10659: 				}
; 10660: 				if (HitDispNo == btnId[14]) {

  005e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  005ec	3b 05 38 00 00
	00		 cmp	 eax, DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+56
  005f2	75 1d		 jne	 SHORT $LN151@

; 10661: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  005f4	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  005fb	74 14		 je	 SHORT $LN151@

; 10662: 						dwPressTime = TimeGetTime();

  005fd	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00602	a3 00 00 00 00	 mov	 DWORD PTR ?dwPressTime@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4KA, eax

; 10663: 						btnState[10] = 1;

  00607	c7 05 28 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+40, 1
$LN151@:

; 10664: 					}
; 10665: 				}
; 10666: 			}
; 10667: 
; 10668: 			extern int èªå¨ç»éæ¯å¦å¼å¯;
; 10669: 			if (HitFontNo == btnId[10]) {

  00611	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  00616	3b 05 28 00 00
	00		 cmp	 eax, DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+40
  0061c	75 69		 jne	 SHORT $LN153@

; 10670: 				ShowBottomLineString(FONT_PAL_WHITE, "ë¡ê·¸ì¸ í F9í¤ë¥¼ ëë¬ì ì¼ê³  ëì ìì¼ë©°, íí°ì ëª¨ëë¡ ë¡ê·¸ì¸í í°ìë¦¬ ëí ê¸°ë¥ì ë ì ììµëë¤ã");

  0061e	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@BOMDPEP@?$LH?N?$LB?W?$MA?N?5?H?D?5F9?E?$LA?$LI?$KG?5?$LE?$KN?$LH?$KP?$LM?$KN?5?D?Q?$LA?m?5?$LC?x@
  00623	6a 00		 push	 0
  00625	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  0062a	83 c4 08	 add	 esp, 8

; 10671: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0062d	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00634	74 51		 je	 SHORT $LN153@

; 10672: 					if (PcLanded.å¤§åº != -1 && PcLanded.å°åº != -1 && PcLanded.äººç© != -1) {

  00636	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A, -1
  0063d	74 37		 je	 SHORT $LN81@
  0063f	83 3d 08 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+8, -1
  00646	74 2e		 je	 SHORT $LN81@
  00648	83 3d 0c 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+12, -1
  0064f	74 25		 je	 SHORT $LN81@

; 10673: 						èªå¨ç»éæ¯å¦å¼å¯ = !èªå¨ç»éæ¯å¦å¼å¯;

  00651	33 c0		 xor	 eax, eax
  00653	39 05 00 00 00
	00		 cmp	 DWORD PTR ?í»?Ôô?ãÀÜú??@@3HA, eax ; í»?Ôô?ãÀÜú??
  00659	0f 94 c0	 sete	 al
  0065c	a3 00 00 00 00	 mov	 DWORD PTR ?í»?Ôô?ãÀÜú??@@3HA, eax ; í»?Ôô?ãÀÜú??
  00661	85 c0		 test	 eax, eax

; 10674: 						if (!èªå¨ç»éæ¯å¦å¼å¯) {

  00663	75 22		 jne	 SHORT $LN153@

; 10675: 							extern int æ¯å¦éç»ç»é, æ¯å¦éç»åè¯, æ¯å¦éå¼ç»ç»é_1;
; 10676: 							æ¯å¦éç»ç»é = FALSE;

  00665	a3 00 00 00 00	 mov	 DWORD PTR ?ãÀÜúñìÔô??@@3HA, eax ; ãÀÜúñìÔô??

; 10677: 							æ¯å¦éç»åè¯ = FALSE;

  0066a	a3 00 00 00 00	 mov	 DWORD PTR ?ãÀÜúñìÔôùâ?@@3HA, eax ; ãÀÜúñìÔôùâ?

; 10678: 							æ¯å¦éå¼ç»ç»é_1 = FALSE;

  0066f	a3 00 00 00 00	 mov	 DWORD PTR ?ãÀÜúñì?Ôô??_1@@3HA, eax ; ãÀÜúñì?Ôô??_1

; 10679: 						}
; 10680: 					}

  00674	eb 11		 jmp	 SHORT $LN153@
$LN81@:

; 10681: 					else {
; 10682: 						StockChatBufferLine("ë ì§ì­ ë¼ì¸ê³¼ ì­í ì ë¨¼ì  ì íí í ì¡°ìí  ì ììµëë¤ï¼", FONT_PAL_RED);

  00676	6a 00		 push	 0
  00678	6a 06		 push	 6
  0067a	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@HOGDKPIF@?$LE?k?5?A?v?$LP?$KK?5?$LG?s?$MA?N?$LA?z?5?$LP?$KK?G?R?$MA?$LL?5?$LI?U?$MA?z?5?$LM?$LB?E?C@
  0067f	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  00684	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN153@:

; 10683: 					}
; 10684: 				}
; 10685: 			}
; 10686: 			if (HitFontNo == btnId[12]) {

  00687	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0068c	3b 05 30 00 00
	00		 cmp	 eax, DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+48
  00692	75 53		 jne	 SHORT $LN87@

; 10687: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  00694	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0069b	74 4a		 je	 SHORT $LN87@

; 10688: 					ShowBottomLineString(FONT_PAL_WHITE, "íí°ì¥ê³¼ ìë¡ íë ì´ì´ë ì´ ê¸°ë¥ì ì¤ì í  ì ììã");

  0069d	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@CELNCKDE@?F?D?F?$LM?$MA?e?$LA?z?5?$LM?V?$LH?N?5?G?C?$LH?$LJ?$MA?L?$LO?n?$LE?B?5?$MA?L?5?$LB?b?$LE@
  006a2	6a 00		 push	 0
  006a4	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString

; 10689: 					if (PcLanded.éæ¨¡ == 0 || PcLanded.éæ¨¡ == 2)

  006a9	a1 04 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A+4
  006ae	83 c4 08	 add	 esp, 8
  006b1	85 c0		 test	 eax, eax
  006b3	74 22		 je	 SHORT $LN88@
  006b5	83 f8 02	 cmp	 eax, 2
  006b8	74 1d		 je	 SHORT $LN88@

; 10691: 					else {
; 10692: 						PcLanded.æ¯å¦èªå¨éæ = FALSE;
; 10693: 						StockChatBufferLine("ì  ì¶í ëª¨ëë íí°ì¥ê³¼ ìë¡ íë ì´ì´ë§ ì¼¤ ì ììï¼", FONT_PAL_RED);

  006ba	6a 00		 push	 0
  006bc	6a 06		 push	 6
  006be	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@NNHIIENC@?$MA?$PL?5?C?b?G?v?5?$LI?p?$LF?e?$LE?B?5?F?D?F?$LM?$MA?e?$LA?z?5?$LM?V?$LH?N?5?G?C@
  006c3	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+20, 0
  006cd	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  006d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  006d5	eb 10		 jmp	 SHORT $LN87@
$LN88@:

; 10690: 						PcLanded.æ¯å¦èªå¨éæ = !PcLanded.æ¯å¦èªå¨éæ;

  006d7	33 c0		 xor	 eax, eax
  006d9	39 05 14 00 00
	00		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+20, eax
  006df	0f 94 c0	 sete	 al
  006e2	a3 14 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+20, eax
$LN87@:

; 10694: 					}
; 10695: 				}
; 10696: 			}
; 10697: 			if (HitFontNo == btnId[13]) {

  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  006ec	3b 05 34 00 00
	00		 cmp	 eax, DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+52
  006f2	75 4e		 jne	 SHORT $LN92@

; 10698: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  006f4	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  006fb	74 45		 je	 SHORT $LN92@

; 10699: 					ShowBottomLineString(FONT_PAL_WHITE, "íí°ìë§ ì´ ê¸°ë¥ì ì¤ì í  ì ììã");

  006fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ODNPGMLF@?F?D?F?$LM?$LP?x?$LI?$LI?5?$MA?L?5?$LB?b?$LE?I?$MA?$LL?5?$LM?$LD?A?$KE?G?R?5?$LM?v?5?$MA?V@
  00702	6a 00		 push	 0
  00704	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  00709	83 c4 08	 add	 esp, 8

; 10700: 					if (PcLanded.éæ¨¡ == 1)

  0070c	83 3d 04 00 00
	00 01		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+4, 1
  00713	75 12		 jne	 SHORT $LN91@

; 10701: 						PcLanded.æ¯å¦èªå¨åè¯ = !PcLanded.æ¯å¦èªå¨åè¯;

  00715	33 c0		 xor	 eax, eax
  00717	39 05 10 00 00
	00		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+16, eax
  0071d	0f 94 c0	 sete	 al
  00720	a3 10 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+16, eax
  00725	eb 1b		 jmp	 SHORT $LN92@
$LN91@:

; 10702: 					else {
; 10703: 						PcLanded.æ¯å¦èªå¨åè¯ = FALSE;
; 10704: 						StockChatBufferLine("ìë ì¸ì¹¨ì íí°ì ëª¨ëììë§ íì±í í  ì ììï¼", FONT_PAL_RED);

  00727	6a 00		 push	 0
  00729	6a 06		 push	 6
  0072b	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@OHNNJONP@?$MA?Z?$LF?$LP?5?$LP?$NM?D?$KH?$MA?$LK?5?F?D?F?$LM?$LP?x?5?$LI?p?$LF?e?$LP?$KB?$LM?$KN?$LI?$LI?5?H@
  00730	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+16, 0
  0073a	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  0073f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN92@:

; 10705: 					}
; 10706: 				}
; 10707: 			}
; 10708: 			if (HitFontNo == btnId[11]) {

  00742	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  00747	3b 05 2c 00 00
	00		 cmp	 eax, DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+44
  0074d	75 68		 jne	 SHORT $LN154@

; 10709: 				ShowBottomLineString(FONT_PAL_WHITE, "ì ìì´ëê¸´ ìºë¦­í° ì¬ì ì ì ìºë¦­í°ì ë°©í¥ã");

  0074f	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@PNEJOHOF@?A?$KC?$LM?S?$MA?L?$LC?w?$LB?d?5?D?$LD?$LI?$KP?E?M?5?$MA?g?A?$KC?$LM?S?5?$LN?C?5?D?$LD?$LI@
  00754	6a 00		 push	 0
  00756	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  0075b	83 c4 08	 add	 esp, 8

; 10710: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0075e	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00765	74 50		 je	 SHORT $LN154@

; 10711: 					if (æ¹åçªå£æ¯å¦æå¼) {

  00767	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, 0
  0076e	74 3d		 je	 SHORT $LN95@

; 10712: 						æ¹åçªå£æ¯å¦æå¼ = FALSE;
; 10713: 						if (æ¹åå¨ä½) {

  00770	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A ; Û°ú¾?íÂ
  00775	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, 0
  0077f	85 c0		 test	 eax, eax
  00781	74 34		 je	 SHORT $LN154@

; 10714: 							DeathAction(æ¹åå¨ä½);

  00783	50		 push	 eax
  00784	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10715: 							æ¹åå¨ä½ = NULL;
; 10716: 							DeathAction(äººç©å¨ä½);

  00789	ff 35 00 00 00
	00		 push	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A ; ìÑÚª?íÂ
  0078f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A, 0 ; Û°ú¾?íÂ
  00799	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0079e	83 c4 08	 add	 esp, 8

; 10717: 							äººç©å¨ä½ = NULL;

  007a1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A, 0 ; ìÑÚª?íÂ

; 10718: 						}
; 10719: 					}

  007ab	eb 0a		 jmp	 SHORT $LN154@
$LN95@:

; 10720: 					else æ¹åçªå£æ¯å¦æå¼ = TRUE;

  007ad	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, 1
$LN154@:

; 10721: 				}
; 10722: 			}
; 10723: 			int æ¹ååç§»X = 0;

  007b7	33 f6		 xor	 esi, esi

; 10724: 			if (æ¹åçªå£æ¯å¦æå¼) {

  007b9	39 35 00 00 00
	00		 cmp	 DWORD PTR ?Û°ú¾?Ï¢ãÀÜúöè?@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA, esi
  007bf	0f 84 ff 00 00
	00		 je	 $LN101@

; 10725: 				æ¹ååç§»X = -90;
; 10726: 				if (!æ¹åå¨ä½) {

  007c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A, 0 ; Û°ú¾?íÂ
  007cc	be a6 ff ff ff	 mov	 esi, -90		; ffffffa6H
  007d1	0f 85 85 00 00
	00		 jne	 $LN99@

; 10727: 					æ¹åå¨ä½ = MakeWindowDisp(x + 220 + æ¹ååç§»X, y - 90, 192, 148, 52138, -1);

  007d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  007dc	6a ff		 push	 -1
  007de	68 aa cb 00 00	 push	 52138			; 0000cbaaH
  007e3	68 94 00 00 00	 push	 148			; 00000094H
  007e8	03 c6		 add	 eax, esi
  007ea	68 c0 00 00 00	 push	 192			; 000000c0H
  007ef	50		 push	 eax
  007f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  007f5	05 82 00 00 00	 add	 eax, 130		; 00000082H
  007fa	50		 push	 eax
  007fb	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp

; 10728: 					äººç©å¨ä½ = MakeAnimDisp(x + 270 + æ¹ååç§»X, y, pc.graNo, 0);

  00800	6a 00		 push	 0
  00802	ff 35 00 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A
  00808	a3 00 00 00 00	 mov	 DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A, eax ; Û°ú¾?íÂ
  0080d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00812	ff 35 00 00 00
	00		 push	 DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00818	05 b4 00 00 00	 add	 eax, 180		; 000000b4H
  0081d	50		 push	 eax
  0081e	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp

; 10729: 					äººç©å¨ä½->anim_ang = PcLanded.äººç©æ¹å;

  00823	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A+24

; 10730: 					pattern(äººç©å¨ä½, ANM_NOMAL_SPD, ANM_LOOP);

  00829	6a 00		 push	 0
  0082b	a3 00 00 00 00	 mov	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A, eax ; ìÑÚª?íÂ
  00830	89 88 54 01 00
	00		 mov	 DWORD PTR [eax+340], ecx
  00836	6a 00		 push	 0
  00838	ff 35 00 00 00
	00		 push	 DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A ; ìÑÚª?íÂ
  0083e	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00843	83 c4 34	 add	 esp, 52			; 00000034H

; 10731: 					btnId[14] = -2;

  00846	c7 05 38 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+56, -2 ; fffffffeH

; 10732: 					btnState[10] = 0;

  00850	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+40, 0

; 10733: 				}

  0085a	eb 68		 jmp	 SHORT $LN101@
$LN99@:

; 10734: 				else if (æ¹åå¨ä½->hp >= 1) {

  0085c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Û°ú¾?íÂ@@3PAUaction@@A ; Û°ú¾?íÂ
  00861	83 78 78 01	 cmp	 DWORD PTR [eax+120], 1
  00865	7c 5d		 jl	 SHORT $LN101@

; 10735: 					StockDispBuffer(x + 220, y, DISP_PRIO_MENU, 52138, 1);

  00867	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  0086c	6a 01		 push	 1
  0086e	68 aa cb 00 00	 push	 52138			; 0000cbaaH
  00873	6a 68		 push	 104			; 00000068H
  00875	ff 35 00 00 00
	00		 push	 DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  0087b	05 dc 00 00 00	 add	 eax, 220		; 000000dcH
  00880	50		 push	 eax
  00881	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 10736: 					PcLanded.äººç©æ¹å = äººç©å¨ä½->anim_ang;

  00886	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ìÑÚª?íÂ@@3PAUaction@@A ; ìÑÚª?íÂ

; 10737: 					btnId[14] = StockDispBuffer(x + 120, y - 90, DISP_PRIO_IME3, 26262 + btnState[10], 2);

  0088b	6a 02		 push	 2
  0088d	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [eax+340]
  00893	a3 18 00 00 00	 mov	 DWORD PTR ?PcLanded@@3ULanded@@A+24, eax
  00898	a1 28 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+40
  0089d	05 96 66 00 00	 add	 eax, 26262		; 00006696H
  008a2	50		 push	 eax
  008a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  008a8	83 c0 a6	 add	 eax, -90		; ffffffa6H
  008ab	6a 69		 push	 105			; 00000069H
  008ad	50		 push	 eax
  008ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  008b3	83 c0 78	 add	 eax, 120		; 00000078H
  008b6	50		 push	 eax
  008b7	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  008bc	83 c4 28	 add	 esp, 40			; 00000028H
  008bf	a3 38 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+56, eax
$LN101@:

; 10738: 				}
; 10739: 			}
; 10740: 			StockDispBuffer(x + æ¹ååç§»X, y, DISP_PRIO_MENU, 52137, 1);//æå°åºå¾

  008c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  008c9	6a 01		 push	 1
  008cb	68 a9 cb 00 00	 push	 52137			; 0000cba9H
  008d0	6a 68		 push	 104			; 00000068H
  008d2	ff 35 00 00 00
	00		 push	 DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  008d8	03 c6		 add	 eax, esi
  008da	50		 push	 eax
  008db	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 10741: 																	//å¤§åºæé®è°è
; 10742: 			btnId[0] = StockDispBuffer(x - 81 + æ¹ååç§»X, y + 10, DISP_PRIO_IME3, 26064 + btnState[0], 2);

  008e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA
  008e5	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  008ea	6a 02		 push	 2
  008ec	50		 push	 eax
  008ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  008f2	83 c0 0a	 add	 eax, 10			; 0000000aH
  008f5	6a 69		 push	 105			; 00000069H
  008f7	50		 push	 eax
  008f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  008fd	83 c0 af	 add	 eax, -81		; ffffffafH
  00900	03 c6		 add	 eax, esi
  00902	50		 push	 eax
  00903	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00908	a3 00 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA, eax

; 10743: 			btnId[1] = StockDispBuffer(x - 100 + æ¹ååç§»X, y + 26, DISP_PRIO_IME3, 26066 + btnState[1], 2);

  0090d	a1 04 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+4
  00912	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  00917	6a 02		 push	 2
  00919	50		 push	 eax
  0091a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  0091f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00922	6a 69		 push	 105			; 00000069H
  00924	50		 push	 eax
  00925	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  0092a	83 c0 9c	 add	 eax, -100		; ffffff9cH
  0092d	03 c6		 add	 eax, esi
  0092f	50		 push	 eax
  00930	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00935	a3 04 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+4, eax

; 10744: 			//çº¿è·¯æé®è°è
; 10745: 			btnId[2] = StockDispBuffer(x + 79 + æ¹ååç§»X, y + 10, DISP_PRIO_IME3, 26064 + btnState[2], 2);

  0093a	a1 08 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+8
  0093f	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  00944	6a 02		 push	 2
  00946	50		 push	 eax
  00947	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  0094c	83 c0 0a	 add	 eax, 10			; 0000000aH
  0094f	6a 69		 push	 105			; 00000069H
  00951	50		 push	 eax
  00952	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00957	83 c0 4f	 add	 eax, 79			; 0000004fH
  0095a	03 c6		 add	 eax, esi
  0095c	50		 push	 eax
  0095d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00962	a3 08 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+8, eax
  00967	83 c4 50	 add	 esp, 80			; 00000050H

; 10746: 			btnId[3] = StockDispBuffer(x + 60 + æ¹ååç§»X, y + 26, DISP_PRIO_IME3, 26066 + btnState[3], 2);

  0096a	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+12
  0096f	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  00974	6a 02		 push	 2
  00976	50		 push	 eax
  00977	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  0097c	83 c0 1a	 add	 eax, 26			; 0000001aH
  0097f	6a 69		 push	 105			; 00000069H
  00981	50		 push	 eax
  00982	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00987	83 c0 3c	 add	 eax, 60			; 0000003cH
  0098a	03 c6		 add	 eax, esi
  0098c	50		 push	 eax
  0098d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00992	a3 0c 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+12, eax

; 10747: 			//éä¼æé®è°è
; 10748: 			btnId[4] = StockDispBuffer(x - 81 + æ¹ååç§»X, y + 45, DISP_PRIO_IME3, 26064 + btnState[4], 2);

  00997	a1 10 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+16
  0099c	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  009a1	6a 02		 push	 2
  009a3	50		 push	 eax
  009a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  009a9	83 c0 2d	 add	 eax, 45			; 0000002dH
  009ac	6a 69		 push	 105			; 00000069H
  009ae	50		 push	 eax
  009af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  009b4	83 c0 af	 add	 eax, -81		; ffffffafH
  009b7	03 c6		 add	 eax, esi
  009b9	50		 push	 eax
  009ba	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  009bf	a3 10 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+16, eax

; 10749: 			btnId[5] = StockDispBuffer(x - 100 + æ¹ååç§»X, y + 61, DISP_PRIO_IME3, 26066 + btnState[5], 2);

  009c4	a1 14 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+20
  009c9	6a 02		 push	 2
  009cb	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  009d0	50		 push	 eax
  009d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  009d6	83 c0 3d	 add	 eax, 61			; 0000003dH
  009d9	6a 69		 push	 105			; 00000069H
  009db	50		 push	 eax
  009dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  009e1	83 c0 9c	 add	 eax, -100		; ffffff9cH
  009e4	03 c6		 add	 eax, esi
  009e6	50		 push	 eax
  009e7	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  009ec	a3 14 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+20, eax

; 10750: 			//è§è²æé®è°è
; 10751: 			btnId[6] = StockDispBuffer(x - 81 + æ¹ååç§»X, y + 80, DISP_PRIO_IME3, 26064 + btnState[6], 2);

  009f1	a1 18 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+24
  009f6	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  009fb	6a 02		 push	 2
  009fd	50		 push	 eax
  009fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00a03	83 c0 50	 add	 eax, 80			; 00000050H
  00a06	6a 69		 push	 105			; 00000069H
  00a08	50		 push	 eax
  00a09	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00a0e	83 c0 af	 add	 eax, -81		; ffffffafH
  00a11	03 c6		 add	 eax, esi
  00a13	50		 push	 eax
  00a14	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00a19	a3 18 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+24, eax
  00a1e	83 c4 50	 add	 esp, 80			; 00000050H

; 10752: 			btnId[7] = StockDispBuffer(x - 100 + æ¹ååç§»X, y + 96, DISP_PRIO_IME3, 26066 + btnState[7], 2);

  00a21	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+28
  00a26	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  00a2b	6a 02		 push	 2
  00a2d	50		 push	 eax
  00a2e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00a33	83 c0 60	 add	 eax, 96			; 00000060H
  00a36	6a 69		 push	 105			; 00000069H
  00a38	50		 push	 eax
  00a39	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00a3e	83 c0 9c	 add	 eax, -100		; ffffff9cH
  00a41	03 c6		 add	 eax, esi
  00a43	50		 push	 eax
  00a44	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00a49	a3 1c 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+28, eax

; 10753: 
; 10754: 			btnId[8] = StockDispBuffer(x + æ¹ååç§»X, y, DISP_PRIO_IME3, 26262 + btnState[8], 2);

  00a4e	a1 20 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+32
  00a53	6a 02		 push	 2
  00a55	05 96 66 00 00	 add	 eax, 26262		; 00006696H
  00a5a	50		 push	 eax
  00a5b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00a60	6a 69		 push	 105			; 00000069H
  00a62	ff 35 00 00 00
	00		 push	 DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00a68	03 c6		 add	 eax, esi
  00a6a	50		 push	 eax
  00a6b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00a70	a3 20 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+32, eax

; 10755: 			btnId[9] = StockDispBuffer(x + æ¹ååç§»X, y, DISP_PRIO_IME3, 26264 + btnState[9], 2);

  00a75	a1 24 00 00 00	 mov	 eax, DWORD PTR ?btnState@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+36
  00a7a	6a 02		 push	 2
  00a7c	05 98 66 00 00	 add	 eax, 26264		; 00006698H
  00a81	50		 push	 eax
  00a82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00a87	6a 69		 push	 105			; 00000069H
  00a89	ff 35 00 00 00
	00		 push	 DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00a8f	03 c6		 add	 eax, esi
  00a91	50		 push	 eax
  00a92	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00a97	a3 24 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+36, eax
  00a9c	83 c4 3c	 add	 esp, 60			; 0000003cH

; 10756: 
; 10757: 			char moji[256];
; 10758: 			if (PcLanded.å¤§åº != -1) {

  00a9f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A
  00aa4	83 f8 ff	 cmp	 eax, -1
  00aa7	74 30		 je	 SHORT $LN102@

; 10759: 				StockFontBuffer(x - 110 + æ¹ååç§»X, y - 90, FONT_PRIO_FRONT, FONT_PAL_YELLOW, gmgroup[PcLanded.å¤§åº].name, 0);

  00aa9	c1 e0 06	 shl	 eax, 6
  00aac	05 03 00 00 00	 add	 eax, OFFSET ?gmgroup@@3PAUgamegroup@@A+3
  00ab1	6a 00		 push	 0
  00ab3	50		 push	 eax
  00ab4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00ab9	6a 04		 push	 4
  00abb	83 c0 a6	 add	 eax, -90		; ffffffa6H
  00abe	6a 01		 push	 1
  00ac0	50		 push	 eax
  00ac1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00ac6	83 c0 92	 add	 eax, -110		; ffffff92H
  00ac9	03 c6		 add	 eax, esi
  00acb	50		 push	 eax
  00acc	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00ad1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A
  00ad6	83 c4 18	 add	 esp, 24			; 00000018H
$LN102@:

; 10760: 			}
; 10761: 			if (PcLanded.å°åº != -1) {

  00ad9	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?PcLanded@@3ULanded@@A+8
  00adf	83 f9 ff	 cmp	 ecx, -1
  00ae2	74 37		 je	 SHORT $LN103@

; 10762: 				StockFontBuffer(x + 100 + æ¹ååç§»X, y - 90, FONT_PRIO_FRONT, FONT_PAL_YELLOW, gmsv[gmgroup[PcLanded.å¤§åº].startindex + PcLanded.å°åº].name, 0);

  00ae4	c1 e0 06	 shl	 eax, 6
  00ae7	6a 00		 push	 0
  00ae9	0f be 80 02 00
	00 00		 movsx	 eax, BYTE PTR ?gmgroup@@3PAUgamegroup@@A[eax+2]
  00af0	03 c1		 add	 eax, ecx
  00af2	c1 e0 08	 shl	 eax, 8
  00af5	05 c0 00 00 00	 add	 eax, OFFSET ?gmsv@@3PAUgameserver@@A+192
  00afa	50		 push	 eax
  00afb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00b00	6a 04		 push	 4
  00b02	83 c0 a6	 add	 eax, -90		; ffffffa6H
  00b05	6a 01		 push	 1
  00b07	50		 push	 eax
  00b08	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00b0d	83 c0 64	 add	 eax, 100		; 00000064H
  00b10	03 c6		 add	 eax, esi
  00b12	50		 push	 eax
  00b13	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00b18	83 c4 18	 add	 esp, 24			; 00000018H
$LN103@:

; 10763: 			}
; 10764: 			if (PcLanded.éæ¨¡ != -1) {

  00b1b	a1 04 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A+4
  00b20	83 f8 ff	 cmp	 eax, -1
  00b23	74 2a		 je	 SHORT $LN104@

; 10765: 				StockFontBuffer(x - 110 + æ¹ååç§»X, y - 53, FONT_PRIO_FRONT, FONT_PAL_YELLOW, msg[PcLanded.éæ¨¡], 0);

  00b25	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?msg@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAY07DA[eax*8]
  00b2c	6a 00		 push	 0
  00b2e	50		 push	 eax
  00b2f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00b34	6a 04		 push	 4
  00b36	83 c0 cb	 add	 eax, -53		; ffffffcbH
  00b39	6a 01		 push	 1
  00b3b	50		 push	 eax
  00b3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00b41	83 c0 92	 add	 eax, -110		; ffffff92H
  00b44	03 c6		 add	 eax, esi
  00b46	50		 push	 eax
  00b47	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00b4c	83 c4 18	 add	 esp, 24			; 00000018H
$LN104@:

; 10766: 			}
; 10767: 			if (PcLanded.äººç© != -1) {

  00b4f	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A+12
  00b54	83 f8 ff	 cmp	 eax, -1
  00b57	74 2b		 je	 SHORT $LN105@

; 10768: 				StockFontBuffer(x - 110 + æ¹ååç§»X, y - 16, FONT_PRIO_FRONT, FONT_PAL_YELLOW, PcLanded.ç»éäººç©åç§°[PcLanded.äººç©], 0);

  00b59	c1 e0 05	 shl	 eax, 5
  00b5c	05 1c 00 00 00	 add	 eax, OFFSET ?PcLanded@@3ULanded@@A+28
  00b61	6a 00		 push	 0
  00b63	50		 push	 eax
  00b64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00b69	6a 04		 push	 4
  00b6b	83 c0 f0	 add	 eax, -16		; fffffff0H
  00b6e	6a 01		 push	 1
  00b70	50		 push	 eax
  00b71	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00b76	83 c0 92	 add	 eax, -110		; ffffff92H
  00b79	03 c6		 add	 eax, esi
  00b7b	50		 push	 eax
  00b7c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00b81	83 c4 18	 add	 esp, 24			; 00000018H
$LN105@:

; 10769: 			}
; 10770: 
; 10771: 			if (èªå¨ç»éæ¯å¦å¼å¯)

  00b84	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00b89	83 c0 15	 add	 eax, 21			; 00000015H
  00b8c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?í»?Ôô?ãÀÜú??@@3HA, 0 ; í»?Ôô?ãÀÜú??
  00b93	6a 02		 push	 2
  00b95	74 07		 je	 SHORT $LN106@

; 10772: 				btnId[10] = StockFontBuffer(x - 70 + æ¹ååç§»X, y + 21, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "ì¼ë¤", 2);

  00b97	68 00 00 00 00	 push	 OFFSET ??_C@_04CJANLAJP@?D?Q?$LE?Y@
  00b9c	eb 05		 jmp	 SHORT $LN160@
$LN106@:

; 10773: 			else
; 10774: 				btnId[10] = StockFontBuffer(x - 70 + æ¹ååç§»X, y + 21, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "ì¢ë£", 2);

  00b9e	68 00 00 00 00	 push	 OFFSET ??_C@_04JHHBNKBI@?A?$LO?$LH?a@
$LN160@:

; 10775: 
; 10776: 			btnId[11] = StockFontBuffer(x + 100 + æ¹ååç§»X, y - 53, FONT_PRIO_FRONT, FONT_PAL_YELLOW, chardir[PcLanded.äººç©æ¹å], 2);

  00ba3	6a 04		 push	 4
  00ba5	6a 01		 push	 1
  00ba7	50		 push	 eax
  00ba8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00bad	83 c0 ba	 add	 eax, -70		; ffffffbaH
  00bb0	03 c6		 add	 eax, esi
  00bb2	50		 push	 eax
  00bb3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00bb8	a3 28 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+40, eax
  00bbd	83 c4 18	 add	 esp, 24			; 00000018H
  00bc0	a1 18 00 00 00	 mov	 eax, DWORD PTR ?PcLanded@@3ULanded@@A+24
  00bc5	6a 02		 push	 2
  00bc7	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?chardir@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAY07DA[eax*8]
  00bce	50		 push	 eax
  00bcf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00bd4	6a 04		 push	 4
  00bd6	83 c0 cb	 add	 eax, -53		; ffffffcbH
  00bd9	6a 01		 push	 1
  00bdb	50		 push	 eax
  00bdc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00be1	83 c0 64	 add	 eax, 100		; 00000064H
  00be4	03 c6		 add	 eax, esi
  00be6	50		 push	 eax
  00be7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00bec	83 c4 18	 add	 esp, 24			; 00000018H
  00bef	a3 2c 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+44, eax

; 10777: 			if (PcLanded.æ¯å¦èªå¨éæ)

  00bf4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00bf9	83 c0 f0	 add	 eax, -16		; fffffff0H
  00bfc	83 3d 14 00 00
	00 00		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+20, 0
  00c03	6a 02		 push	 2
  00c05	74 07		 je	 SHORT $LN108@

; 10778: 				btnId[12] = StockFontBuffer(x + 100 + æ¹ååç§»X, y - 16, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "ì¼ë¤", 2);

  00c07	68 00 00 00 00	 push	 OFFSET ??_C@_04CJANLAJP@?D?Q?$LE?Y@
  00c0c	eb 05		 jmp	 SHORT $LN161@
$LN108@:

; 10779: 			else
; 10780: 				btnId[12] = StockFontBuffer(x + 100 + æ¹ååç§»X, y - 16, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "ì¢ë£", 2);

  00c0e	68 00 00 00 00	 push	 OFFSET ??_C@_04JHHBNKBI@?A?$LO?$LH?a@
$LN161@:

; 10781: 			if (PcLanded.æ¯å¦èªå¨åè¯)

  00c13	6a 04		 push	 4
  00c15	6a 01		 push	 1
  00c17	50		 push	 eax
  00c18	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00c1d	83 c0 64	 add	 eax, 100		; 00000064H
  00c20	03 c6		 add	 eax, esi
  00c22	50		 push	 eax
  00c23	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00c28	a3 30 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+48, eax
  00c2d	83 c4 18	 add	 esp, 24			; 00000018H
  00c30	a1 00 00 00 00	 mov	 eax, DWORD PTR ?y@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00c35	83 c0 15	 add	 eax, 21			; 00000015H
  00c38	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+16, 0
  00c3f	6a 02		 push	 2
  00c41	74 07		 je	 SHORT $LN110@

; 10782: 				btnId[13] = StockFontBuffer(x + 100 + æ¹ååç§»X, y + 21, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "ì¼ë¤", 2);

  00c43	68 00 00 00 00	 push	 OFFSET ??_C@_04CJANLAJP@?D?Q?$LE?Y@
  00c48	eb 05		 jmp	 SHORT $LN162@
$LN110@:

; 10783: 			else
; 10784: 				btnId[13] = StockFontBuffer(x + 100 + æ¹ååç§»X, y + 21, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "ì¢ë£", 2);

  00c4a	68 00 00 00 00	 push	 OFFSET ??_C@_04JHHBNKBI@?A?$LO?$LH?a@
$LN162@:
  00c4f	6a 04		 push	 4
  00c51	6a 01		 push	 1
  00c53	50		 push	 eax
  00c54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?x@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4HA
  00c59	83 c0 64	 add	 eax, 100		; 00000064H
  00c5c	03 c6		 add	 eax, esi
  00c5e	50		 push	 eax
  00c5f	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00c64	83 c4 18	 add	 esp, 24			; 00000018H
  00c67	a3 34 00 00 00	 mov	 DWORD PTR ?btnId@?1??í»?Ôô??Ï¢üÞ?@@YAXXZ@4PAHA+52, eax
  00c6c	5e		 pop	 esi
$LN111@:

; 10785: 		}
; 10786: 	}
; 10787: }

  00c6d	c3		 ret	 0
?í»?Ôô??Ï¢üÞ?@@YAXXZ ENDP				; í»?Ôô??Ï¢üÞ?
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?DeathMenuAction2@@YAXXZ
_TEXT	SEGMENT
?DeathMenuAction2@@YAXXZ PROC				; DeathMenuAction2, COMDAT

; 10297: 	if (Mammoth::Get().IsOpen())

  00000	e8 00 00 00 00	 call	 ?Get@Mammoth@@SAAAV1@XZ	; Mammoth::Get
  00005	8b c8		 mov	 ecx, eax
  00007	e8 00 00 00 00	 call	 ?IsOpen@Mammoth@@QAEHXZ	; Mammoth::IsOpen
  0000c	85 c0		 test	 eax, eax
  0000e	74 0c		 je	 SHORT $LN2@DeathMenuA

; 10298: 		Mammoth::Get().Close();

  00010	e8 00 00 00 00	 call	 ?Get@Mammoth@@SAAAV1@XZ	; Mammoth::Get
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ?Close@Mammoth@@QAEXXZ	; Mammoth::Close
$LN2@DeathMenuA:

; 10299: 	DeathAction(pActMenuWnd2);

  0001c	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  00022	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10300: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 10301: 	GetKeyInputFocus(&MyChatBuffer);

  00027	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0002c	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 10302: 	Moneyflag = false;
; 10303: #endif
; 10304: 	pActMenuWnd2 = NULL;
; 10305: 	DeathAction(pActPet2);

  00031	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet2@@3PAUaction@@A
  00037	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  0003e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, 0 ; pActMenuWnd2
  00048	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10306: 	pActPet2 = NULL;
; 10307: 	ItemMixPetNo = -1;
; 10308: 
; 10309: 	// Robin 04/14 trade
; 10310: 	DeathAction(pActMenuWnd4);

  0004d	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A ; pActMenuWnd4
  00053	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet2@@3PAUaction@@A, 0
  0005d	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?ItemMixPetNo@@3HA, -1
  00067	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10311: #ifdef _FRIENDCHANNEL			//ROG ADD å¥½åé¢é
; 10312: 	chatRoomBtn = 0;
; 10313: 	assentFlag = FALSE;
; 10314: 	DeathAction(pAssentWnd);

  0006c	ff 35 00 00 00
	00		 push	 DWORD PTR ?pAssentWnd@@3PAUaction@@A ; pAssentWnd
  00072	33 c0		 xor	 eax, eax
  00074	66 a3 00 00 00
	00		 mov	 WORD PTR ?chatRoomBtn@@3FA, ax ; chatRoomBtn
  0007a	a2 00 00 00 00	 mov	 BYTE PTR ?assentFlag@@3_NA, al ; assentFlag
  0007f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10315: 	pAssentWnd = NULL;
; 10316: 	setRoomFlag = FALSE;
; 10317: 	DeathAction(pSetRoomWnd);

  00084	ff 35 00 00 00
	00		 push	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A ; pSetRoomWnd
  0008a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAssentWnd@@3PAUaction@@A, 0 ; pAssentWnd
  00094	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?setRoomFlag@@3_NA, 0 ; setRoomFlag
  0009b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10318: 	pSetRoomWnd = NULL;
; 10319: #endif
; 10320: 
; 10321: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 10322: 	//æ¸é¤æä½¿ç¨Action
; 10323: 	DeathAction(SecondTradeWnd);

  000a0	ff 35 00 00 00
	00		 push	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A ; SecondTradeWnd
  000a6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A, 0 ; pSetRoomWnd
  000b0	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10324: 	SecondTradeWnd = NULL;
; 10325: 	DeathAction(SecondActPet);

  000b5	ff 35 00 00 00
	00		 push	 DWORD PTR ?SecondActPet@@3PAUaction@@A
  000bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A, 0 ; SecondTradeWnd
  000c5	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10326: 	SecondActPet = NULL;
; 10327: 	DeathAction(TradeTalkWnd);

  000ca	ff 35 00 00 00
	00		 push	 DWORD PTR ?TradeTalkWnd@@3PAUaction@@A ; TradeTalkWnd
  000d0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondActPet@@3PAUaction@@A, 0
  000da	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10328: 	TradeTalkWnd = NULL;
; 10329: #endif
; 10330: 	//è§çªæ¶ç­æ¶è¿åè®¾å®
; 10331: 	Tradeflag = false;
; 10332: 	pActMenuWnd4 = NULL;
; 10333: 	DeathAction(pActPet3);

  000df	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet3@@3PAUaction@@A
  000e5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TradeTalkWnd@@3PAUaction@@A, 0 ; TradeTalkWnd
  000ef	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Tradeflag@@3_NA, 0 ; Tradeflag
  000f6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A, 0 ; pActMenuWnd4
  00100	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10334: 	pActPet3 = NULL;
; 10335: 	DeathAction(pActPet4);

  00105	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet4@@3PAUaction@@A
  0010b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet3@@3PAUaction@@A, 0
  00115	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10336: 	pActPet4 = NULL;
; 10337: 	DeathAction(pActPet5);

  0011a	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet5@@3PAUaction@@A
  00120	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet4@@3PAUaction@@A, 0
  0012a	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10338: 	pActPet5 = NULL;
; 10339: 	DeathAction(pActMenuWnd5);

  0012f	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A ; pActMenuWnd5
  00135	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet5@@3PAUaction@@A, 0
  0013f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00144	83 c4 34	 add	 esp, 52			; 00000034H

; 10340: 	pActMenuWnd5 = NULL;

  00147	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A, 0 ; pActMenuWnd5

; 10341: 
; 10342: }

  00151	c3		 ret	 0
?DeathMenuAction2@@YAXXZ ENDP				; DeathMenuAction2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?DeathMenuAction@@YAXXZ
_TEXT	SEGMENT
?DeathMenuAction@@YAXXZ PROC				; DeathMenuAction, COMDAT

; 10225: 	if (Mammoth::Get().IsOpen())

  00000	e8 00 00 00 00	 call	 ?Get@Mammoth@@SAAAV1@XZ	; Mammoth::Get
  00005	8b c8		 mov	 ecx, eax
  00007	e8 00 00 00 00	 call	 ?IsOpen@Mammoth@@QAEHXZ	; Mammoth::IsOpen
  0000c	85 c0		 test	 eax, eax
  0000e	74 0c		 je	 SHORT $LN2@DeathMenuA

; 10226: 		Mammoth::Get().Close();

  00010	e8 00 00 00 00	 call	 ?Get@Mammoth@@SAAAV1@XZ	; Mammoth::Get
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ?Close@Mammoth@@QAEXXZ	; Mammoth::Close
$LN2@DeathMenuA:

; 10227: 
; 10228: 	DeathAction(pActMenuWnd);

  0001c	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  00022	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10229: 	pActMenuWnd = NULL;
; 10230: #ifdef _FRIENDCHANNEL			//ROG ADD å¥½åé¢é
; 10231: 	chatRoomBtn = 0;
; 10232: 	assentFlag = FALSE;
; 10233: 	DeathAction(pAssentWnd);

  00027	ff 35 00 00 00
	00		 push	 DWORD PTR ?pAssentWnd@@3PAUaction@@A ; pAssentWnd
  0002d	33 c0		 xor	 eax, eax
  0002f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  00039	66 a3 00 00 00
	00		 mov	 WORD PTR ?chatRoomBtn@@3FA, ax ; chatRoomBtn
  0003f	a2 00 00 00 00	 mov	 BYTE PTR ?assentFlag@@3_NA, al ; assentFlag
  00044	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10234: 	pAssentWnd = NULL;
; 10235: 	setRoomFlag = FALSE;
; 10236: 	DeathAction(pSetRoomWnd);

  00049	ff 35 00 00 00
	00		 push	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A ; pSetRoomWnd
  0004f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAssentWnd@@3PAUaction@@A, 0 ; pAssentWnd
  00059	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?setRoomFlag@@3_NA, 0 ; setRoomFlag
  00060	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10237: 	pSetRoomWnd = NULL;
; 10238: #endif
; 10239: 
; 10240: 	// ????î¡î·î??????
; 10241: 	DeathAction(pActMenuWnd3);

  00065	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  0006b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A, 0 ; pSetRoomWnd
  00075	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10242: 	pActMenuWnd3 = NULL;
; 10243: 	// î¼????????
; 10244: 	GetKeyInputFocus(&MyChatBuffer);

  0007a	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0007f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  00089	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 10245: 	// ????î
; 10246: 	DeathAction(pActPet);

  0008e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  00094	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10247: 	pActPet = NULL;
; 10248: 	// ????????î
; 10249: 	DeathAction(pActMailItem);

  00099	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0009f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  000a9	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10250: 	pActMailItem = NULL;
; 10251: 	// ?î??????î
; 10252: 	DeathAction(pActYesNoWnd);

  000ae	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A ; pActYesNoWnd
  000b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  000be	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  000c3	83 c4 20	 add	 esp, 32			; 00000020H

; 10253: 	pActYesNoWnd = NULL;

  000c6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A, 0 ; pActYesNoWnd

; 10254: 	// î?????????î
; 10255: 	DeathLetterAction();

  000d0	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction

; 10256: 
; 10257: 	// Robin 04/14 trade
; 10258: 	if (pActMenuWnd4) {

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd4@@3PAUaction@@A ; pActMenuWnd4
  000da	85 c0		 test	 eax, eax
  000dc	74 13		 je	 SHORT $LN3@DeathMenuA

; 10259: 		DeathAction(pActMenuWnd4);

  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  000e4	83 c4 04	 add	 esp, 4

; 10260: 		pActMenuWnd4 = NULL;

  000e7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A, 0 ; pActMenuWnd4
$LN3@DeathMenuA:

; 10261: 	}
; 10262: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 10263: 	//æ¸é¤æä½¿ç¨Action
; 10264: 	if (SecondTradeWnd) {

  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SecondTradeWnd@@3PAUaction@@A ; SecondTradeWnd
  000f6	85 c0		 test	 eax, eax
  000f8	74 13		 je	 SHORT $LN4@DeathMenuA

; 10265: 		DeathAction(SecondTradeWnd);

  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00100	83 c4 04	 add	 esp, 4

; 10266: 		SecondTradeWnd = NULL;

  00103	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A, 0 ; SecondTradeWnd
$LN4@DeathMenuA:

; 10267: 	}
; 10268: 	if (SecondActPet) {

  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SecondActPet@@3PAUaction@@A
  00112	85 c0		 test	 eax, eax
  00114	74 13		 je	 SHORT $LN5@DeathMenuA

; 10269: 		DeathAction(SecondActPet);

  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0011c	83 c4 04	 add	 esp, 4

; 10270: 		SecondActPet = NULL;

  0011f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondActPet@@3PAUaction@@A, 0
$LN5@DeathMenuA:

; 10271: 	}
; 10272: 	if (TradeTalkWnd) {

  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR ?TradeTalkWnd@@3PAUaction@@A ; TradeTalkWnd
  0012e	85 c0		 test	 eax, eax
  00130	74 13		 je	 SHORT $LN6@DeathMenuA

; 10273: 		DeathAction(TradeTalkWnd);

  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00138	83 c4 04	 add	 esp, 4

; 10274: 		TradeTalkWnd = NULL;

  0013b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TradeTalkWnd@@3PAUaction@@A, 0 ; TradeTalkWnd
$LN6@DeathMenuA:

; 10275: 	}
; 10276: #endif
; 10277: 	if (pActPet3) {

  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet3@@3PAUaction@@A
  0014a	85 c0		 test	 eax, eax
  0014c	74 13		 je	 SHORT $LN7@DeathMenuA

; 10278: 		DeathAction(pActPet3);

  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00154	83 c4 04	 add	 esp, 4

; 10279: 		pActPet3 = NULL;

  00157	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet3@@3PAUaction@@A, 0
$LN7@DeathMenuA:

; 10280: 	}
; 10281: 
; 10282: 	if (pActPet4) {

  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet4@@3PAUaction@@A
  00166	85 c0		 test	 eax, eax
  00168	74 13		 je	 SHORT $LN8@DeathMenuA

; 10283: 		DeathAction(pActPet4);

  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00170	83 c4 04	 add	 esp, 4

; 10284: 		pActPet4 = NULL;

  00173	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet4@@3PAUaction@@A, 0
$LN8@DeathMenuA:

; 10285: 	}
; 10286: 	if (pActPet5) {

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet5@@3PAUaction@@A
  00182	85 c0		 test	 eax, eax
  00184	74 13		 je	 SHORT $LN9@DeathMenuA

; 10287: 		DeathAction(pActPet5);

  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0018c	83 c4 04	 add	 esp, 4

; 10288: 		pActPet5 = NULL;

  0018f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet5@@3PAUaction@@A, 0
$LN9@DeathMenuA:

; 10289: 	}
; 10290: 	if (pActMenuWnd5) {

  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd5@@3PAUaction@@A ; pActMenuWnd5
  0019e	85 c0		 test	 eax, eax
  001a0	74 13		 je	 SHORT $LN10@DeathMenuA

; 10291: 		DeathAction(pActMenuWnd5);

  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  001a8	83 c4 04	 add	 esp, 4

; 10292: 		pActMenuWnd5 = NULL;

  001ab	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A, 0 ; pActMenuWnd5
$LN10@DeathMenuA:

; 10293: 	}
; 10294: }

  001b5	c3		 ret	 0
?DeathMenuAction@@YAXXZ ENDP				; DeathMenuAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitMailSendFlag@@YAXXZ
_TEXT	SEGMENT
?InitMailSendFlag@@YAXXZ PROC				; InitMailSendFlag, COMDAT

; 10219: void InitMailSendFlag(void) {

  00000	57		 push	 edi

; 10220: 	int i;
; 10221: 	for (i = 0; i < MAX_ADR_BOOK; i++) mailWndSendFlag[i] = 0;

  00001	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00006	33 c0		 xor	 eax, eax
  00008	bf 00 00 00 00	 mov	 edi, OFFSET ?mailWndSendFlag@@3PAHA
  0000d	f3 ab		 rep stosd
  0000f	5f		 pop	 edi

; 10222: }

  00010	c3		 ret	 0
?InitMailSendFlag@@YAXXZ ENDP				; InitMailSendFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitItem3@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?InitItem3@@YAXHH@Z PROC				; InitItem3, COMDAT

; 10177: void InitItem3(int x, int y) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 10178: 	int i, j = 0, k = 0;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _y$[ebp]
  00007	b9 2c 01 00 00	 mov	 ecx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+300
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	33 f6		 xor	 esi, esi
  00010	33 ff		 xor	 edi, edi
$LL9@InitItem3:

; 10179: 	for (i = MAX_ITEMSTART; i < MAX_ITEM; i++) {
; 10180: 		ItemBuffer[i].defX = x + 32 + j;

  00012	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]

; 10181: 		ItemBuffer[i].defY = y + 56 + 48 + 48 + 48 - 160 + k;

  00015	8d 43 28	 lea	 eax, DWORD PTR [ebx+40]
  00018	03 c7		 add	 eax, edi

; 10182: 		ItemBuffer[i].x = ItemBuffer[i].defX;
; 10183: 		ItemBuffer[i].y = ItemBuffer[i].defY;
; 10184: 		ItemBuffer[i].bmpNo = 20000 + j / 48;
; 10185: 		ItemBuffer[i].dispPrio = DISP_PRIO_ITEM;

  0001a	c7 41 08 6c 00
	00 00		 mov	 DWORD PTR [ecx+8], 108	; 0000006cH
  00021	83 c2 20	 add	 edx, 32			; 00000020H
  00024	89 01		 mov	 DWORD PTR [ecx], eax
  00026	03 d6		 add	 edx, esi
  00028	89 41 f8	 mov	 DWORD PTR [ecx-8], eax
  0002b	89 51 fc	 mov	 DWORD PTR [ecx-4], edx
  0002e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00033	89 51 f4	 mov	 DWORD PTR [ecx-12], edx
  00036	f7 ee		 imul	 esi
  00038	c1 fa 03	 sar	 edx, 3
  0003b	8b c2		 mov	 eax, edx
  0003d	81 c2 20 4e 00
	00		 add	 edx, 20000		; 00004e20H
  00043	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00046	03 c2		 add	 eax, edx
  00048	8d 56 33	 lea	 edx, DWORD PTR [esi+51]
  0004b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0004e	33 f6		 xor	 esi, esi
  00050	83 c1 20	 add	 ecx, 32			; 00000020H
  00053	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  00056	81 fa f0 00 00
	00		 cmp	 edx, 240		; 000000f0H
  0005c	0f 4c c7	 cmovl	 eax, edi
  0005f	0f 4c f2	 cmovl	 esi, edx
  00062	8b f8		 mov	 edi, eax
  00064	81 f9 cc 06 00
	00		 cmp	 ecx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1740
  0006a	7c a6		 jl	 SHORT $LL9@InitItem3

; 10186: 		j += 51;
; 10187: 		if (j >= 48 * 5) {
; 10188: 			j = 0;
; 10189: 			k += 48;
; 10190: 		}
; 10191: 	}
; 10192: }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?InitItem3@@YAXHH@Z ENDP				; InitItem3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?CheckPetSkill@@YAHH@Z
_TEXT	SEGMENT
_skillId$ = 8						; size = 4
?CheckPetSkill@@YAHH@Z PROC				; CheckPetSkill, COMDAT

; 10041: int CheckPetSkill(int skillId) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 10042: 	int i, j;
; 10043: 	for (j = 0; j < MAX_PET; j++) {

  00006	bb 02 00 00 00	 mov	 ebx, OFFSET ?petSkill@@3PAY06UPET_SKILL@@A+2
  0000b	be 44 00 00 00	 mov	 esi, OFFSET ?pet@@3PAUPET@@A+68
$LL4@CheckPetSk:

; 10044: 		if (pet[j].useFlag == TRUE) {

  00010	66 83 7e 32 01	 cmp	 WORD PTR [esi+50], 1
  00015	75 21		 jne	 SHORT $LN2@CheckPetSk

; 10045: 			for (i = 0; i < pet[j].maxSkill; i++) {

  00017	8b 3e		 mov	 edi, DWORD PTR [esi]
  00019	33 d2		 xor	 edx, edx
  0001b	85 ff		 test	 edi, edi
  0001d	7e 19		 jle	 SHORT $LN2@CheckPetSk
  0001f	8b c3		 mov	 eax, ebx
$LL7@CheckPetSk:

; 10046: 				if (petSkill[j][i].useFlag == TRUE) {

  00021	66 83 78 fe 01	 cmp	 WORD PTR [eax-2], 1
  00026	75 08		 jne	 SHORT $LN5@CheckPetSk

; 10047: 					if (petSkill[j][i].skillId == skillId) {

  00028	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0002b	3b 4d 08	 cmp	 ecx, DWORD PTR _skillId$[ebp]
  0002e	74 23		 je	 SHORT $LN14@CheckPetSk
$LN5@CheckPetSk:

; 10045: 			for (i = 0; i < pet[j].maxSkill; i++) {

  00030	42		 inc	 edx
  00031	83 c0 6a	 add	 eax, 106		; 0000006aH
  00034	3b d7		 cmp	 edx, edi
  00036	7c e9		 jl	 SHORT $LL7@CheckPetSk
$LN2@CheckPetSk:

; 10042: 	int i, j;
; 10043: 	for (j = 0; j < MAX_PET; j++) {

  00038	81 c6 78 0b 00
	00		 add	 esi, 2936		; 00000b78H
  0003e	81 c3 e6 02 00
	00		 add	 ebx, 742		; 000002e6H
  00044	81 fe 9c 39 00
	00		 cmp	 esi, OFFSET ?pet@@3PAUPET@@A+14748
  0004a	7c c4		 jl	 SHORT $LL4@CheckPetSk

; 10048: 						return TRUE;
; 10049: 					}
; 10050: 				}
; 10051: 			}
; 10052: 		}
; 10053: 	}
; 10054: 	return FALSE;
; 10055: }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	33 c0		 xor	 eax, eax
  00050	5b		 pop	 ebx
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN14@CheckPetSk:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	b8 01 00 00 00	 mov	 eax, 1
  0005a	5b		 pop	 ebx
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?CheckPetSkill@@YAHH@Z ENDP				; CheckPetSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?ConvertAlbum1_47@@YAHPAD@Z
_TEXT	SEGMENT
_fp$1$ = -9948						; size = 4
tv741 = -9944						; size = 4
_OldAlbum$ = -9940					; size = 9920
_id2$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_user$ = 8						; size = 4
?ConvertAlbum1_47@@YAHPAD@Z PROC			; ConvertAlbum1_47, COMDAT

; 2931 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 dc 26 00 00	 mov	 eax, 9948		; 000026dcH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx

; 2932 : 	PET_ALBUM OldAlbum[MAX_PET_KIND_1];
; 2933 : 	char id2[16];
; 2934 : 	int i;
; 2935 : 	FILE *fp;
; 2936 : 	if ((fp = fopen(ALBUM_FILE_NAME, "r+b")) == NULL)

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_03HMFOOINA@r?$CLb@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JONHHOLF@data?2album?4dat@
  00022	e8 00 00 00 00	 call	 _fopen
  00027	8b d8		 mov	 ebx, eax
  00029	83 c4 08	 add	 esp, 8
  0002c	89 9d 24 d9 ff
	ff		 mov	 DWORD PTR _fp$1$[ebp], ebx
  00032	85 db		 test	 ebx, ebx
  00034	75 0f		 jne	 SHORT $LN24@ConvertAlb
  00036	5b		 pop	 ebx

; 2979 : 	return TRUE;
; 2980 : }

  00037	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003a	33 cd		 xor	 ecx, ebp
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN24@ConvertAlb:
  00045	56		 push	 esi

; 2937 : 		return FALSE;
; 2938 : 	while (1) {
; 2939 : 		//è¯»å¥ID
; 2940 : 		if (fread(id2, sizeof(id2), 1, fp) < 1) {

  00046	53		 push	 ebx
  00047	6a 01		 push	 1
  00049	8d 45 ec	 lea	 eax, DWORD PTR _id2$[ebp]
  0004c	6a 10		 push	 16			; 00000010H
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _fread
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	83 f8 01	 cmp	 eax, 1
  0005a	0f 82 b7 00 00
	00		 jb	 $LN44@ConvertAlb
  00060	8b 75 08	 mov	 esi, DWORD PTR _user$[ebp]
  00063	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@ConvertAlb:

; 2941 : 			fclose(fp);
; 2942 : 			return FALSE;
; 2943 : 		}
; 2944 : 		//IDè§£ç 
; 2945 : 		for (i = 0; i < 16; i++) {

  00070	33 c0		 xor	 eax, eax
$LL6@ConvertAlb:

; 2946 : 			id2[i] ^= IdEncryptionTbl[i];

  00072	0f b6 0c 85 00
	00 00 00	 movzx	 ecx, BYTE PTR ?IdEncryptionTbl@@3PAHA[eax*4]
  0007a	30 4c 05 ec	 xor	 BYTE PTR _id2$[ebp+eax], cl
  0007e	0f b6 0c 85 04
	00 00 00	 movzx	 ecx, BYTE PTR ?IdEncryptionTbl@@3PAHA[eax*4+4]
  00086	30 4c 05 ed	 xor	 BYTE PTR _id2$[ebp+eax+1], cl
  0008a	0f b6 0c 85 08
	00 00 00	 movzx	 ecx, BYTE PTR ?IdEncryptionTbl@@3PAHA[eax*4+8]
  00092	30 4c 05 ee	 xor	 BYTE PTR _id2$[ebp+eax+2], cl
  00096	0f b6 0c 85 0c
	00 00 00	 movzx	 ecx, BYTE PTR ?IdEncryptionTbl@@3PAHA[eax*4+12]
  0009e	30 4c 05 ef	 xor	 BYTE PTR _id2$[ebp+eax+3], cl
  000a2	83 c0 04	 add	 eax, 4
  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	7c c8		 jl	 SHORT $LL6@ConvertAlb

; 2947 : 		}
; 2948 : 
; 2949 : 		id2[15] &= 0xf;  //JL 2017.7.12ä¿®å¤   id2[15]æ¯ç¨äºå­å¨å¸å·é¿åº¦

  000aa	8a 45 fb	 mov	 al, BYTE PTR _id2$[ebp+15]

; 2950 : 		id2[id2[15]] = NULL;
; 2951 : 		if (strcmp(user, id2) != 0) {

  000ad	8d 4d ec	 lea	 ecx, DWORD PTR _id2$[ebp]
  000b0	24 0f		 and	 al, 15			; 0000000fH
  000b2	88 45 fb	 mov	 BYTE PTR _id2$[ebp+15], al
  000b5	0f b6 c0	 movzx	 eax, al
  000b8	c6 44 05 ec 00	 mov	 BYTE PTR _id2$[ebp+eax], 0
  000bd	8b c6		 mov	 eax, esi
  000bf	90		 npad	 1
$LL45@ConvertAlb:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000c4	75 1a		 jne	 SHORT $LN46@ConvertAlb
  000c6	84 d2		 test	 dl, dl
  000c8	74 12		 je	 SHORT $LN47@ConvertAlb
  000ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d0	75 0e		 jne	 SHORT $LN46@ConvertAlb
  000d2	83 c0 02	 add	 eax, 2
  000d5	83 c1 02	 add	 ecx, 2
  000d8	84 d2		 test	 dl, dl
  000da	75 e4		 jne	 SHORT $LL45@ConvertAlb
$LN47@ConvertAlb:
  000dc	33 c0		 xor	 eax, eax
  000de	eb 05		 jmp	 SHORT $LN48@ConvertAlb
$LN46@ConvertAlb:
  000e0	1b c0		 sbb	 eax, eax
  000e2	83 c8 01	 or	 eax, 1
$LN48@ConvertAlb:
  000e5	85 c0		 test	 eax, eax
  000e7	74 49		 je	 SHORT $LN15@ConvertAlb

; 2952 : 			//IDä¸ç¬¦
; 2953 : 			if (fseek(fp, sizeof(PET_ALBUM) * MAX_PET_KIND_1, SEEK_CUR) != 0) {//æ¾ä¸ä¸ä¸ª

  000e9	6a 01		 push	 1
  000eb	68 c0 26 00 00	 push	 9920			; 000026c0H
  000f0	53		 push	 ebx
  000f1	e8 00 00 00 00	 call	 _fseek
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	85 c0		 test	 eax, eax
  000fb	75 1a		 jne	 SHORT $LN44@ConvertAlb

; 2937 : 		return FALSE;
; 2938 : 	while (1) {
; 2939 : 		//è¯»å¥ID
; 2940 : 		if (fread(id2, sizeof(id2), 1, fp) < 1) {

  000fd	53		 push	 ebx
  000fe	6a 01		 push	 1
  00100	8d 45 ec	 lea	 eax, DWORD PTR _id2$[ebp]
  00103	6a 10		 push	 16			; 00000010H
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _fread
  0010b	83 c4 10	 add	 esp, 16			; 00000010H
  0010e	83 f8 01	 cmp	 eax, 1
  00111	0f 83 59 ff ff
	ff		 jae	 $LL2@ConvertAlb
$LN44@ConvertAlb:

; 2961 : 				fclose(fp);

  00117	53		 push	 ebx
  00118	e8 00 00 00 00	 call	 _fclose
  0011d	83 c4 04	 add	 esp, 4

; 2962 : 				return FALSE;

  00120	33 c0		 xor	 eax, eax
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx

; 2979 : 	return TRUE;
; 2980 : }

  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	33 cd		 xor	 ecx, ebp
  00129	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
$LN15@ConvertAlb:

; 2954 : 				fclose(fp);
; 2955 : 				return FALSE;
; 2956 : 			}
; 2957 : 		}
; 2958 : 		else {
; 2959 : 			//è¯»å¥èµæ
; 2960 : 			if (fread(OldAlbum, sizeof(PET_ALBUM), MAX_PET_KIND_1, fp) < MAX_PET_KIND_1) {

  00132	53		 push	 ebx
  00133	6a 7c		 push	 124			; 0000007cH
  00135	8d 85 2c d9 ff
	ff		 lea	 eax, DWORD PTR _OldAlbum$[ebp]
  0013b	6a 50		 push	 80			; 00000050H
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 _fread
  00143	83 c4 10	 add	 esp, 16			; 00000010H
  00146	83 f8 7c	 cmp	 eax, 124		; 0000007cH
  00149	72 cc		 jb	 SHORT $LN44@ConvertAlb

; 2963 : 			}
; 2964 : 			for (int i = 0; i < MAX_PET_KIND_1; i++) {

  0014b	57		 push	 edi
  0014c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?MAX_PET_TBL@@3HA ; MAX_PET_TBL
  00152	8d b5 50 d9 ff
	ff		 lea	 esi, DWORD PTR _OldAlbum$[ebp+36]
  00158	c7 85 28 d9 ff
	ff 7c 00 00 00	 mov	 DWORD PTR tv741[ebp], 124 ; 0000007cH
$LL9@ConvertAlb:

; 2965 : 				for (int j = 0; j < MAX_PET_TBL; j++) {

  00162	33 c9		 xor	 ecx, ecx
  00164	85 ff		 test	 edi, edi
  00166	7e 6d		 jle	 SHORT $LN7@ConvertAlb

; 2966 : 					if (!OldAlbum[i].flag)

  00168	8b 5e 28	 mov	 ebx, DWORD PTR [esi+40]
  0016b	ba 18 00 00 00	 mov	 edx, OFFSET ?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A+24
$LL12@ConvertAlb:
  00170	85 db		 test	 ebx, ebx
  00172	74 61		 je	 SHORT $LN7@ConvertAlb

; 2967 : 						break;
; 2968 : 					if (OldAlbum[i].faceGraNo == PetAlbumTbl[j].faceGraNo) {

  00174	8b 06		 mov	 eax, DWORD PTR [esi]
  00176	3b 02		 cmp	 eax, DWORD PTR [edx]
  00178	74 0a		 je	 SHORT $LN31@ConvertAlb

; 2965 : 				for (int j = 0; j < MAX_PET_TBL; j++) {

  0017a	41		 inc	 ecx
  0017b	83 c2 1c	 add	 edx, 28			; 0000001cH
  0017e	3b cf		 cmp	 ecx, edi
  00180	7c ee		 jl	 SHORT $LL12@ConvertAlb

; 2967 : 						break;
; 2968 : 					if (OldAlbum[i].faceGraNo == PetAlbumTbl[j].faceGraNo) {

  00182	eb 51		 jmp	 SHORT $LN7@ConvertAlb
$LN31@ConvertAlb:

; 2969 : 						CopyMemory(&PetAlbum[PetAlbumTbl[j].albumNo], &OldAlbum[i], sizeof(PET_ALBUM));

  00184	0f 10 46 dc	 movups	 xmm0, XMMWORD PTR [esi-36]
  00188	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0018f	2b c1		 sub	 eax, ecx
  00191	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A[eax*4]

; 2970 : 						SaveAlbum(PetAlbumTbl[j].albumNo);

  00198	51		 push	 ecx
  00199	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  0019c	c1 e0 04	 shl	 eax, 4
  0019f	05 00 00 00 00	 add	 eax, OFFSET ?PetAlbum@@3PAUPET_ALBUM@@A ; PetAlbum
  001a4	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  001a7	0f 10 46 ec	 movups	 xmm0, XMMWORD PTR [esi-20]
  001ab	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  001af	0f 10 46 fc	 movups	 xmm0, XMMWORD PTR [esi-4]
  001b3	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  001b7	0f 10 46 0c	 movups	 xmm0, XMMWORD PTR [esi+12]
  001bb	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0
  001bf	0f 10 46 1c	 movups	 xmm0, XMMWORD PTR [esi+28]
  001c3	0f 11 40 40	 movups	 XMMWORD PTR [eax+64], xmm0
  001c7	e8 00 00 00 00	 call	 ?SaveAlbum@@YAHH@Z	; SaveAlbum
  001cc	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?MAX_PET_TBL@@3HA ; MAX_PET_TBL
  001d2	83 c4 04	 add	 esp, 4
$LN7@ConvertAlb:

; 2963 : 			}
; 2964 : 			for (int i = 0; i < MAX_PET_KIND_1; i++) {

  001d5	83 c6 50	 add	 esi, 80			; 00000050H
  001d8	83 ad 28 d9 ff
	ff 01		 sub	 DWORD PTR tv741[ebp], 1
  001df	75 81		 jne	 SHORT $LL9@ConvertAlb

; 2971 : 						break;
; 2972 : 					}
; 2973 : 				}
; 2974 : 			}
; 2975 : 			break;
; 2976 : 		}
; 2977 : 	}
; 2978 : 	fclose(fp);

  001e1	ff b5 24 d9 ff
	ff		 push	 DWORD PTR _fp$1$[ebp]
  001e7	e8 00 00 00 00	 call	 _fclose

; 2979 : 	return TRUE;
; 2980 : }

  001ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ef	83 c4 04	 add	 esp, 4
  001f2	33 cd		 xor	 ecx, ebp
  001f4	b8 01 00 00 00	 mov	 eax, 1
  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx
  001fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c3		 ret	 0
?ConvertAlbum1_47@@YAHPAD@Z ENDP			; ConvertAlbum1_47
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?ConvertAlbumTo47@@YAHPAD0K@Z
_TEXT	SEGMENT
_fp$1$ = -45624						; size = 4
_OldAlbum$ = -45620					; size = 45600
_id2$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_user$ = 8						; size = 4
_oldfile$ = 12						; size = 4
_num$ = 16						; size = 4
?ConvertAlbumTo47@@YAHPAD0K@Z PROC			; ConvertAlbumTo47, COMDAT

; 2883 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 38 b2 00 00	 mov	 eax, 45624		; 0000b238H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _oldfile$[ebp]
  0001a	56		 push	 esi

; 2884 : 
; 2885 : 	PET_ALBUM OldAlbum[MAX_PET_KIND];
; 2886 : 	char id2[16];
; 2887 : 	int i;
; 2888 : 	FILE *fp;
; 2889 : 	if ((fp = fopen(oldfile, "r+b")) == NULL)

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_03HMFOOINA@r?$CLb@
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _fopen
  00026	8b f0		 mov	 esi, eax
  00028	83 c4 08	 add	 esp, 8
  0002b	89 b5 c8 4d ff
	ff		 mov	 DWORD PTR _fp$1$[ebp], esi
  00031	85 f6		 test	 esi, esi
  00033	75 0f		 jne	 SHORT $LN20@ConvertAlb
  00035	5e		 pop	 esi

; 2927 : 	return TRUE;
; 2928 : }

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	33 cd		 xor	 ecx, ebp
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN20@ConvertAlb:
  00044	53		 push	 ebx
  00045	57		 push	 edi

; 2890 : 		return FALSE;
; 2891 : 	while (1) {
; 2892 : 		//è¯»å¥ID
; 2893 : 		if (fread(id2, sizeof(id2), 1, fp) < 1) {

  00046	56		 push	 esi
  00047	6a 01		 push	 1
  00049	8d 45 ec	 lea	 eax, DWORD PTR _id2$[ebp]
  0004c	6a 10		 push	 16			; 00000010H
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _fread
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	83 f8 01	 cmp	 eax, 1
  0005a	0f 82 b9 00 00
	00		 jb	 $LN34@ConvertAlb
  00060	8b 5d 10	 mov	 ebx, DWORD PTR _num$[ebp]
  00063	8b 7d 08	 mov	 edi, DWORD PTR _user$[ebp]
  00066	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@ConvertAlb:

; 2894 : 			fclose(fp);
; 2895 : 			return FALSE;
; 2896 : 		}
; 2897 : 		//IDè§£ç 
; 2898 : 		for (i = 0; i < 16; i++) {

  00070	33 c9		 xor	 ecx, ecx
$LL6@ConvertAlb:

; 2899 : 			id2[i] ^= IdEncryptionTbl[i];

  00072	0f b6 04 8d 00
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4]
  0007a	30 44 0d ec	 xor	 BYTE PTR _id2$[ebp+ecx], al
  0007e	0f b6 04 8d 04
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+4]
  00086	30 44 0d ed	 xor	 BYTE PTR _id2$[ebp+ecx+1], al
  0008a	0f b6 04 8d 08
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+8]
  00092	30 44 0d ee	 xor	 BYTE PTR _id2$[ebp+ecx+2], al
  00096	0f b6 04 8d 0c
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+12]
  0009e	30 44 0d ef	 xor	 BYTE PTR _id2$[ebp+ecx+3], al
  000a2	83 c1 04	 add	 ecx, 4
  000a5	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000a8	7c c8		 jl	 SHORT $LL6@ConvertAlb

; 2900 : 		}
; 2901 : 
; 2902 : 
; 2903 : 		id2[15] &= 0xf;  //JL 2017.7.12ä¿®å¤   id2[15]æ¯ç¨äºå­å¨å¸å·é¿åº¦

  000aa	8a 45 fb	 mov	 al, BYTE PTR _id2$[ebp+15]

; 2904 : 		id2[id2[15]] = NULL;
; 2905 : 		if (strcmp(user, id2) != 0) {

  000ad	8b cf		 mov	 ecx, edi
  000af	24 0f		 and	 al, 15			; 0000000fH
  000b1	88 45 fb	 mov	 BYTE PTR _id2$[ebp+15], al
  000b4	0f b6 c0	 movzx	 eax, al
  000b7	c6 44 05 ec 00	 mov	 BYTE PTR _id2$[ebp+eax], 0
  000bc	8d 45 ec	 lea	 eax, DWORD PTR _id2$[ebp]
  000bf	90		 npad	 1
$LL35@ConvertAlb:
  000c0	8a 11		 mov	 dl, BYTE PTR [ecx]
  000c2	3a 10		 cmp	 dl, BYTE PTR [eax]
  000c4	75 1a		 jne	 SHORT $LN36@ConvertAlb
  000c6	84 d2		 test	 dl, dl
  000c8	74 12		 je	 SHORT $LN37@ConvertAlb
  000ca	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000cd	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  000d0	75 0e		 jne	 SHORT $LN36@ConvertAlb
  000d2	83 c1 02	 add	 ecx, 2
  000d5	83 c0 02	 add	 eax, 2
  000d8	84 d2		 test	 dl, dl
  000da	75 e4		 jne	 SHORT $LL35@ConvertAlb
$LN37@ConvertAlb:
  000dc	33 c0		 xor	 eax, eax
  000de	eb 05		 jmp	 SHORT $LN38@ConvertAlb
$LN36@ConvertAlb:
  000e0	1b c0		 sbb	 eax, eax
  000e2	83 c8 01	 or	 eax, 1
$LN38@ConvertAlb:
  000e5	85 c0		 test	 eax, eax
  000e7	74 4c		 je	 SHORT $LN12@ConvertAlb

; 2906 : 			//IDä¸ç¬¦
; 2907 : 			if (fseek(fp, sizeof(PET_ALBUM) * num, SEEK_CUR) != 0) {//ä¸ä¸ä¸ª

  000e9	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  000ec	6a 01		 push	 1
  000ee	c1 e0 04	 shl	 eax, 4
  000f1	50		 push	 eax
  000f2	56		 push	 esi
  000f3	e8 00 00 00 00	 call	 _fseek
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fb	85 c0		 test	 eax, eax
  000fd	75 1a		 jne	 SHORT $LN34@ConvertAlb

; 2890 : 		return FALSE;
; 2891 : 	while (1) {
; 2892 : 		//è¯»å¥ID
; 2893 : 		if (fread(id2, sizeof(id2), 1, fp) < 1) {

  000ff	56		 push	 esi
  00100	6a 01		 push	 1
  00102	8d 45 ec	 lea	 eax, DWORD PTR _id2$[ebp]
  00105	6a 10		 push	 16			; 00000010H
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 _fread
  0010d	83 c4 10	 add	 esp, 16			; 00000010H
  00110	83 f8 01	 cmp	 eax, 1
  00113	0f 83 57 ff ff
	ff		 jae	 $LL2@ConvertAlb
$LN34@ConvertAlb:

; 2915 : 				fclose(fp);

  00119	56		 push	 esi
  0011a	e8 00 00 00 00	 call	 _fclose
  0011f	83 c4 04	 add	 esp, 4

; 2916 : 				return FALSE;

  00122	33 c0		 xor	 eax, eax
  00124	5f		 pop	 edi
  00125	5b		 pop	 ebx
  00126	5e		 pop	 esi

; 2927 : 	return TRUE;
; 2928 : }

  00127	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012a	33 cd		 xor	 ecx, ebp
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
$LN12@ConvertAlb:

; 2908 : 				fclose(fp);
; 2909 : 				return FALSE;
; 2910 : 			}
; 2911 : 		}
; 2912 : 		else {
; 2913 : 			//æ¾å°IDçºªå½
; 2914 : 			if (fread(OldAlbum, sizeof(PET_ALBUM), num, fp) < num) {

  00135	56		 push	 esi
  00136	53		 push	 ebx
  00137	8d 85 cc 4d ff
	ff		 lea	 eax, DWORD PTR _OldAlbum$[ebp]
  0013d	6a 50		 push	 80			; 00000050H
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 _fread
  00145	83 c4 10	 add	 esp, 16			; 00000010H
  00148	3b c3		 cmp	 eax, ebx
  0014a	72 cd		 jb	 SHORT $LN34@ConvertAlb

; 2917 : 			}
; 2918 : 			for (DWORD i = 0; i < num; i++) {

  0014c	33 f6		 xor	 esi, esi
  0014e	85 db		 test	 ebx, ebx
  00150	74 6e		 je	 SHORT $LN8@ConvertAlb
  00152	33 ff		 xor	 edi, edi
$LL9@ConvertAlb:

; 2919 : 				if (440 <= i && i <= 461) continue;		//ä¿®æ­£ä¹åQ é®é¢

  00154	81 fe b8 01 00
	00		 cmp	 esi, 440		; 000001b8H
  0015a	72 08		 jb	 SHORT $LN16@ConvertAlb
  0015c	81 fe cd 01 00
	00		 cmp	 esi, 461		; 000001cdH
  00162	76 54		 jbe	 SHORT $LN7@ConvertAlb
$LN16@ConvertAlb:

; 2920 : 				CopyMemory(&PetAlbum[i], &OldAlbum[i], sizeof(PET_ALBUM));

  00164	0f 10 84 3d cc
	4d ff ff	 movups	 xmm0, XMMWORD PTR _OldAlbum$[ebp+edi]

; 2921 : 				SaveAlbum(i);

  0016c	56		 push	 esi
  0016d	0f 11 87 00 00
	00 00		 movups	 XMMWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edi], xmm0
  00174	0f 10 84 3d dc
	4d ff ff	 movups	 xmm0, XMMWORD PTR _OldAlbum$[ebp+edi+16]
  0017c	0f 11 87 10 00
	00 00		 movups	 XMMWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edi+16], xmm0
  00183	0f 10 84 3d ec
	4d ff ff	 movups	 xmm0, XMMWORD PTR _OldAlbum$[ebp+edi+32]
  0018b	0f 11 87 20 00
	00 00		 movups	 XMMWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edi+32], xmm0
  00192	0f 10 84 3d fc
	4d ff ff	 movups	 xmm0, XMMWORD PTR _OldAlbum$[ebp+edi+48]
  0019a	0f 11 87 30 00
	00 00		 movups	 XMMWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edi+48], xmm0
  001a1	0f 10 84 3d 0c
	4e ff ff	 movups	 xmm0, XMMWORD PTR _OldAlbum$[ebp+edi+64]
  001a9	0f 11 87 40 00
	00 00		 movups	 XMMWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edi+64], xmm0
  001b0	e8 00 00 00 00	 call	 ?SaveAlbum@@YAHH@Z	; SaveAlbum
  001b5	83 c4 04	 add	 esp, 4
$LN7@ConvertAlb:

; 2917 : 			}
; 2918 : 			for (DWORD i = 0; i < num; i++) {

  001b8	46		 inc	 esi
  001b9	83 c7 50	 add	 edi, 80			; 00000050H
  001bc	3b f3		 cmp	 esi, ebx
  001be	72 94		 jb	 SHORT $LL9@ConvertAlb
$LN8@ConvertAlb:

; 2922 : 			}
; 2923 : 			break;
; 2924 : 		}
; 2925 : 	}
; 2926 : 	fclose(fp);

  001c0	ff b5 c8 4d ff
	ff		 push	 DWORD PTR _fp$1$[ebp]
  001c6	e8 00 00 00 00	 call	 _fclose

; 2927 : 	return TRUE;
; 2928 : }

  001cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ce	83 c4 04	 add	 esp, 4
  001d1	33 cd		 xor	 ecx, ebp
  001d3	b8 01 00 00 00	 mov	 eax, 1
  001d8	5f		 pop	 edi
  001d9	5b		 pop	 ebx
  001da	5e		 pop	 esi
  001db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e0	8b e5		 mov	 esp, ebp
  001e2	5d		 pop	 ebp
  001e3	c3		 ret	 0
?ConvertAlbumTo47@@YAHPAD0K@Z ENDP			; ConvertAlbumTo47
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?LoadAlbum_47@@YAHPAD@Z
_TEXT	SEGMENT
_id2$ = -36						; size = 16
_id$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_user$ = 8						; size = 4
?LoadAlbum_47@@YAHPAD@Z PROC				; LoadAlbum_47, COMDAT

; 2791 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _user$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi

; 2792 : 	FILE *fp;
; 2793 : 	BOOL ret = FALSE;
; 2794 : 	char id[16];
; 2795 : 	char id2[16];
; 2796 : 	int i;
; 2797 : 	MAX_PET_TBL = sizeof(PetAlbumTbl) / sizeof(PetAlbumTbl[0]);
; 2798 : 	AlbumIdCnt = 0;
; 2799 : 	memcpy(id, user, 16);
; 2800 : 	DeleteFile("data\\album_2.dat");

  00015	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeleteFileA@4
  0001b	c7 05 00 00 00
	00 73 02 00 00	 mov	 DWORD PTR ?MAX_PET_TBL@@3HA, 627 ; MAX_PET_TBL, 00000273H
  00025	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AlbumIdCnt@@3HA, 0 ; AlbumIdCnt
  0002f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00032	57		 push	 edi
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DGDLCNIG@data?2album_2?4dat@
  00038	0f 11 45 ec	 movups	 XMMWORD PTR _id$[ebp], xmm0
  0003c	ff d6		 call	 esi

; 2801 : 	DeleteFile("data\\album_3.dat");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PNGHPOCD@data?2album_3?4dat@
  00043	ff d6		 call	 esi

; 2802 : 	DeleteFile("data\\album_10.dat");

  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HIPKAJPN@data?2album_10?4dat@
  0004a	ff d6		 call	 esi
  0004c	bb 4c 00 00 00	 mov	 ebx, OFFSET ?PetAlbum@@3PAUPET_ALBUM@@A+76
$LL4@LoadAlbum_:

; 2803 : 	for (i = 0; i < MAX_PET_KIND; i++) {
; 2804 : 		for (int j = 0; j < PET_NAME_LEN + 1; j++) {

  00051	8d 73 c5	 lea	 esi, DWORD PTR [ebx-59]
  00054	bf 11 00 00 00	 mov	 edi, 17			; 00000011H
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@LoadAlbum_:

; 2805 : 			PetAlbum[i].name[j] = Rnd(1, 255);

  00060	68 ff 00 00 00	 push	 255			; 000000ffH
  00065	6a 01		 push	 1
  00067	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2806 : 			PetAlbum[i].freeName[j] = Rnd(1, 255);

  0006c	68 ff 00 00 00	 push	 255			; 000000ffH
  00071	6a 01		 push	 1
  00073	88 46 ef	 mov	 BYTE PTR [esi-17], al
  00076	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 06		 mov	 BYTE PTR [esi], al
  00080	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00083	83 ef 01	 sub	 edi, 1
  00086	75 d8		 jne	 SHORT $LL7@LoadAlbum_

; 2807 : 		}
; 2808 : 		PetAlbum[i].flag = 0;
; 2809 : 		PetAlbum[i].faceGraNo = Rnd(1, 60000);

  00088	68 60 ea 00 00	 push	 60000			; 0000ea60H
  0008d	6a 01		 push	 1
  0008f	89 3b		 mov	 DWORD PTR [ebx], edi
  00091	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2810 : 		PetAlbum[i].level = Rnd(1, 30000);

  00096	68 30 75 00 00	 push	 30000			; 00007530H
  0009b	6a 01		 push	 1
  0009d	89 43 d8	 mov	 DWORD PTR [ebx-40], eax
  000a0	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2811 : 		PetAlbum[i].faceGraNo = Rnd(1, 30000);

  000a5	68 30 75 00 00	 push	 30000			; 00007530H
  000aa	6a 01		 push	 1
  000ac	89 43 dc	 mov	 DWORD PTR [ebx-36], eax
  000af	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2812 : 		PetAlbum[i].maxHp = Rnd(1, 30000);

  000b4	68 30 75 00 00	 push	 30000			; 00007530H
  000b9	6a 01		 push	 1
  000bb	89 43 d8	 mov	 DWORD PTR [ebx-40], eax
  000be	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2813 : 		PetAlbum[i].str = Rnd(1, 30000);

  000c3	68 30 75 00 00	 push	 30000			; 00007530H
  000c8	6a 01		 push	 1
  000ca	89 43 e0	 mov	 DWORD PTR [ebx-32], eax
  000cd	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2814 : 		PetAlbum[i].quick = Rnd(1, 30000);

  000d2	68 30 75 00 00	 push	 30000			; 00007530H
  000d7	6a 01		 push	 1
  000d9	89 43 e4	 mov	 DWORD PTR [ebx-28], eax
  000dc	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2815 : 		PetAlbum[i].def = Rnd(1, 30000);

  000e1	68 30 75 00 00	 push	 30000			; 00007530H
  000e6	6a 01		 push	 1
  000e8	89 43 e8	 mov	 DWORD PTR [ebx-24], eax
  000eb	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2816 : 		PetAlbum[i].earth = Rnd(1, 30000);

  000f0	68 30 75 00 00	 push	 30000			; 00007530H
  000f5	6a 01		 push	 1
  000f7	89 43 ec	 mov	 DWORD PTR [ebx-20], eax
  000fa	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  000ff	83 c4 40	 add	 esp, 64			; 00000040H
  00102	89 43 f0	 mov	 DWORD PTR [ebx-16], eax

; 2817 : 		PetAlbum[i].water = Rnd(1, 30000);

  00105	68 30 75 00 00	 push	 30000			; 00007530H
  0010a	6a 01		 push	 1
  0010c	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2818 : 		PetAlbum[i].fire = Rnd(1, 30000);

  00111	68 30 75 00 00	 push	 30000			; 00007530H
  00116	6a 01		 push	 1
  00118	89 43 f4	 mov	 DWORD PTR [ebx-12], eax
  0011b	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2819 : 		PetAlbum[i].wind = Rnd(1, 30000);

  00120	68 30 75 00 00	 push	 30000			; 00007530H
  00125	6a 01		 push	 1
  00127	89 43 f8	 mov	 DWORD PTR [ebx-8], eax
  0012a	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  0012f	89 43 fc	 mov	 DWORD PTR [ebx-4], eax
  00132	83 c4 18	 add	 esp, 24			; 00000018H
  00135	83 c3 50	 add	 ebx, 80			; 00000050H
  00138	81 fb 6c b2 00
	00		 cmp	 ebx, OFFSET ?PetAlbum@@3PAUPET_ALBUM@@A+45676
  0013e	0f 8c 0d ff ff
	ff		 jl	 $LL4@LoadAlbum_

; 2820 : 	}
; 2821 : 	if ((fp = fopen(ALBUM_FILE_NAME_48, "r+b")) == NULL) {

  00144	68 00 00 00 00	 push	 OFFSET ??_C@_03HMFOOINA@r?$CLb@
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DHMHBGOC@data?2album_47?4dat@
  0014e	e8 00 00 00 00	 call	 _fopen
  00153	8b f0		 mov	 esi, eax
  00155	83 c4 08	 add	 esp, 8
  00158	85 f6		 test	 esi, esi
  0015a	75 73		 jne	 SHORT $LN38@LoadAlbum_

; 2822 : 		if ((fp = fopen(ALBUM_FILE_NAME_48, "wb")) != NULL) {

  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DHMHBGOC@data?2album_47?4dat@
  00166	e8 00 00 00 00	 call	 _fopen
  0016b	8b f0		 mov	 esi, eax
  0016d	83 c4 08	 add	 esp, 8
  00170	85 f6		 test	 esi, esi
  00172	0f 84 c4 01 00
	00		 je	 $LN23@LoadAlbum_

; 2823 : 			id[15] &= 0xf;

  00178	80 65 fb 0f	 and	 BYTE PTR _id$[ebp+15], 15 ; 0000000fH

; 2824 : 			id[id[15]] = Rnd(1, 100);

  0017c	6a 64		 push	 100			; 00000064H
  0017e	6a 01		 push	 1
  00180	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  00185	0f be 4d fb	 movsx	 ecx, BYTE PTR _id$[ebp+15]
  00189	83 c4 08	 add	 esp, 8
  0018c	88 44 0d ec	 mov	 BYTE PTR _id$[ebp+ecx], al
  00190	33 c9		 xor	 ecx, ecx
$LL10@LoadAlbum_:

; 2825 : 			for (i = 0; i < 16; i++)
; 2826 : 				id[i] ^= IdEncryptionTbl[i];

  00192	0f b6 04 8d 00
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4]
  0019a	30 44 0d ec	 xor	 BYTE PTR _id$[ebp+ecx], al
  0019e	0f b6 04 8d 04
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+4]
  001a6	30 44 0d ed	 xor	 BYTE PTR _id$[ebp+ecx+1], al
  001aa	0f b6 04 8d 08
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+8]
  001b2	30 44 0d ee	 xor	 BYTE PTR _id$[ebp+ecx+2], al
  001b6	0f b6 04 8d 0c
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+12]
  001be	30 44 0d ef	 xor	 BYTE PTR _id$[ebp+ecx+3], al
  001c2	83 c1 04	 add	 ecx, 4
  001c5	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001c8	7c c8		 jl	 SHORT $LL10@LoadAlbum_

; 2827 : 			if (fwrite(id, sizeof(id), 1, fp) >= 1) {
; 2828 : 				fwrite(PetAlbum, sizeof(PET_ALBUM), MAX_PET_KIND, fp);
; 2829 : 			}
; 2830 : 			fclose(fp);
; 2831 : 		}
; 2832 : 		return ret;

  001ca	e9 39 01 00 00	 jmp	 $LN75@LoadAlbum_
$LN38@LoadAlbum_:

; 2833 : 	}
; 2834 : 	while (1) {
; 2835 : 		if (fread(id2, sizeof(id2), 1, fp) < 1) {

  001cf	56		 push	 esi
  001d0	6a 01		 push	 1
  001d2	8d 45 dc	 lea	 eax, DWORD PTR _id2$[ebp]
  001d5	6a 10		 push	 16			; 00000010H
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 _fread
  001dd	83 c4 10	 add	 esp, 16			; 00000010H
  001e0	83 f8 01	 cmp	 eax, 1
  001e3	0f 82 cc 00 00
	00		 jb	 $LN42@LoadAlbum_
  001e9	bf 00 00 00 00	 mov	 edi, OFFSET ?IdEncryptionTbl@@3PAHA ; IdEncryptionTbl
  001ee	bb 08 00 00 00	 mov	 ebx, OFFSET ?IdEncryptionTbl@@3PAHA+8
  001f3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL11@LoadAlbum_:

; 2841 : 			if (fwrite(id, sizeof(id), 1, fp) >= 1) {
; 2842 : 				fwrite(PetAlbum, sizeof(PET_ALBUM), MAX_PET_KIND, fp);
; 2843 : 			}
; 2844 : 			fclose(fp);
; 2845 : 			return FALSE;
; 2846 : 		}
; 2847 : 		for (i = 0; i < 16; i++)

  00200	33 c9		 xor	 ecx, ecx
$LL18@LoadAlbum_:

; 2848 : 			id2[i] ^= IdEncryptionTbl[i];

  00202	0f b6 04 8d 00
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4]
  0020a	30 44 0d dc	 xor	 BYTE PTR _id2$[ebp+ecx], al
  0020e	0f b6 04 8d 04
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+4]
  00216	30 44 0d dd	 xor	 BYTE PTR _id2$[ebp+ecx+1], al
  0021a	0f b6 04 8d 08
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+8]
  00222	30 44 0d de	 xor	 BYTE PTR _id2$[ebp+ecx+2], al
  00226	0f b6 04 8d 0c
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+12]
  0022e	30 44 0d df	 xor	 BYTE PTR _id2$[ebp+ecx+3], al
  00232	83 c1 04	 add	 ecx, 4
  00235	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00238	7c c8		 jl	 SHORT $LL18@LoadAlbum_

; 2849 : 		id2[15] &= 0xf;

  0023a	8a 45 eb	 mov	 al, BYTE PTR _id2$[ebp+15]

; 2850 : 		id2[id2[15]] = NULL;
; 2851 : 		if (strcmp(id, id2) != 0) {

  0023d	8d 4d dc	 lea	 ecx, DWORD PTR _id2$[ebp]
  00240	24 0f		 and	 al, 15			; 0000000fH
  00242	88 45 eb	 mov	 BYTE PTR _id2$[ebp+15], al
  00245	0f b6 c0	 movzx	 eax, al
  00248	c6 44 05 dc 00	 mov	 BYTE PTR _id2$[ebp+eax], 0
  0024d	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
$LL69@LoadAlbum_:
  00250	8a 10		 mov	 dl, BYTE PTR [eax]
  00252	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00254	75 1a		 jne	 SHORT $LN70@LoadAlbum_
  00256	84 d2		 test	 dl, dl
  00258	74 12		 je	 SHORT $LN71@LoadAlbum_
  0025a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0025d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00260	75 0e		 jne	 SHORT $LN70@LoadAlbum_
  00262	83 c0 02	 add	 eax, 2
  00265	83 c1 02	 add	 ecx, 2
  00268	84 d2		 test	 dl, dl
  0026a	75 e4		 jne	 SHORT $LL69@LoadAlbum_
$LN71@LoadAlbum_:
  0026c	33 c0		 xor	 eax, eax
  0026e	eb 05		 jmp	 SHORT $LN72@LoadAlbum_
$LN70@LoadAlbum_:
  00270	1b c0		 sbb	 eax, eax
  00272	83 c8 01	 or	 eax, 1
$LN72@LoadAlbum_:
  00275	85 c0		 test	 eax, eax
  00277	0f 84 44 01 00
	00		 je	 $LN27@LoadAlbum_

; 2852 : 			//ä¸æ¯æ­¤å¸å·çè®°å½
; 2853 : 			if (fseek(fp, sizeof(PET_ALBUM)*MAX_PET_KIND, SEEK_CUR) != 0) {

  0027d	6a 01		 push	 1
  0027f	68 20 b2 00 00	 push	 45600			; 0000b220H
  00284	56		 push	 esi
  00285	e8 00 00 00 00	 call	 _fseek
  0028a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028d	85 c0		 test	 eax, eax
  0028f	0f 85 ba 00 00
	00		 jne	 $LN43@LoadAlbum_

; 2874 : 			return TRUE;
; 2875 : 		}
; 2876 : 		AlbumIdCnt++;

  00295	ff 05 00 00 00
	00		 inc	 DWORD PTR ?AlbumIdCnt@@3HA ; AlbumIdCnt
  0029b	8d 45 dc	 lea	 eax, DWORD PTR _id2$[ebp]
  0029e	56		 push	 esi
  0029f	6a 01		 push	 1
  002a1	6a 10		 push	 16			; 00000010H
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 _fread
  002a9	83 c4 10	 add	 esp, 16			; 00000010H
  002ac	83 f8 01	 cmp	 eax, 1
  002af	0f 83 4b ff ff
	ff		 jae	 $LL11@LoadAlbum_
$LN42@LoadAlbum_:

; 2836 : 			//æ¾ä¸å°æ­¤å¸å·çè®°å½
; 2837 : 			id[15] &= 0xf;

  002b5	80 65 fb 0f	 and	 BYTE PTR _id$[ebp+15], 15 ; 0000000fH

; 2838 : 			id[id[15]] = Rnd(1, 100);

  002b9	6a 64		 push	 100			; 00000064H
  002bb	6a 01		 push	 1
  002bd	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  002c2	0f be 4d fb	 movsx	 ecx, BYTE PTR _id$[ebp+15]
  002c6	83 c4 08	 add	 esp, 8
  002c9	88 44 0d ec	 mov	 BYTE PTR _id$[ebp+ecx], al
  002cd	33 c9		 xor	 ecx, ecx
  002cf	90		 npad	 1
$LL15@LoadAlbum_:

; 2839 : 			for (i = 0; i < 16; i++)
; 2840 : 				id[i] ^= IdEncryptionTbl[i];

  002d0	0f b6 04 8d 00
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4]
  002d8	30 44 0d ec	 xor	 BYTE PTR _id$[ebp+ecx], al
  002dc	0f b6 04 8d 04
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+4]
  002e4	30 44 0d ed	 xor	 BYTE PTR _id$[ebp+ecx+1], al
  002e8	0f b6 04 8d 08
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+8]
  002f0	30 44 0d ee	 xor	 BYTE PTR _id$[ebp+ecx+2], al
  002f4	0f b6 04 8d 0c
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+12]
  002fc	30 44 0d ef	 xor	 BYTE PTR _id$[ebp+ecx+3], al
  00300	83 c1 04	 add	 ecx, 4
  00303	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00306	7c c8		 jl	 SHORT $LL15@LoadAlbum_
$LN75@LoadAlbum_:

; 2877 : 	}
; 2878 : 	fclose(fp);
; 2879 : 	return ret;
; 2880 : }

  00308	56		 push	 esi
  00309	6a 01		 push	 1
  0030b	8d 45 ec	 lea	 eax, DWORD PTR _id$[ebp]
  0030e	6a 10		 push	 16			; 00000010H
  00310	50		 push	 eax
  00311	e8 00 00 00 00	 call	 _fwrite
  00316	83 c4 10	 add	 esp, 16			; 00000010H
  00319	83 f8 01	 cmp	 eax, 1
  0031c	72 15		 jb	 SHORT $LN30@LoadAlbum_
  0031e	56		 push	 esi
  0031f	68 3a 02 00 00	 push	 570			; 0000023aH
  00324	6a 50		 push	 80			; 00000050H
  00326	68 00 00 00 00	 push	 OFFSET ?PetAlbum@@3PAUPET_ALBUM@@A
  0032b	e8 00 00 00 00	 call	 _fwrite
  00330	83 c4 10	 add	 esp, 16			; 00000010H
$LN30@LoadAlbum_:
  00333	56		 push	 esi
  00334	e8 00 00 00 00	 call	 _fclose
  00339	83 c4 04	 add	 esp, 4
$LN23@LoadAlbum_:
  0033c	5f		 pop	 edi
  0033d	5e		 pop	 esi
  0033e	33 c0		 xor	 eax, eax
  00340	5b		 pop	 ebx
  00341	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00344	33 cd		 xor	 ecx, ebp
  00346	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0034b	8b e5		 mov	 esp, ebp
  0034d	5d		 pop	 ebp
  0034e	c3		 ret	 0
$LN43@LoadAlbum_:

; 2854 : 				fseek(fp, (sizeof(PET_ALBUM)*MAX_PET_KIND + 16)*AlbumIdCnt, SEEK_SET);

  0034f	69 05 00 00 00
	00 30 b2 00 00	 imul	 eax, DWORD PTR ?AlbumIdCnt@@3HA, 45616 ; AlbumIdCnt
  00359	6a 00		 push	 0
  0035b	50		 push	 eax
  0035c	56		 push	 esi
  0035d	e8 00 00 00 00	 call	 _fseek

; 2855 : 				id[15] &= 0xf;

  00362	80 65 fb 0f	 and	 BYTE PTR _id$[ebp+15], 15 ; 0000000fH

; 2856 : 				id[id[15]] = Rnd(1, 100);

  00366	6a 64		 push	 100			; 00000064H
  00368	6a 01		 push	 1
  0036a	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  0036f	0f be 4d fb	 movsx	 ecx, BYTE PTR _id$[ebp+15]
  00373	83 c4 14	 add	 esp, 20			; 00000014H
  00376	ba 0c 00 00 00	 mov	 edx, OFFSET ?IdEncryptionTbl@@3PAHA+12
  0037b	88 44 0d ec	 mov	 BYTE PTR _id$[ebp+ecx], al
  0037f	33 c9		 xor	 ecx, ecx
  00381	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL21@LoadAlbum_:

; 2857 : 				for (i = 0; i < 16; i++)
; 2858 : 					id[i] ^= IdEncryptionTbl[i];

  00390	0f b6 04 8f	 movzx	 eax, BYTE PTR [edi+ecx*4]
  00394	30 44 0d ec	 xor	 BYTE PTR _id$[ebp+ecx], al
  00398	0f b6 04 8d 04
	00 00 00	 movzx	 eax, BYTE PTR ?IdEncryptionTbl@@3PAHA[ecx*4+4]
  003a0	30 44 0d ed	 xor	 BYTE PTR _id$[ebp+ecx+1], al
  003a4	0f b6 04 8b	 movzx	 eax, BYTE PTR [ebx+ecx*4]
  003a8	30 44 0d ee	 xor	 BYTE PTR _id$[ebp+ecx+2], al
  003ac	0f b6 04 8a	 movzx	 eax, BYTE PTR [edx+ecx*4]
  003b0	30 44 0d ef	 xor	 BYTE PTR _id$[ebp+ecx+3], al
  003b4	83 c1 04	 add	 ecx, 4
  003b7	83 f9 10	 cmp	 ecx, 16			; 00000010H
  003ba	7c d4		 jl	 SHORT $LL21@LoadAlbum_

; 2859 : 				if (fwrite(id, sizeof(id), 1, fp) >= 1) {
; 2860 : 					fwrite(PetAlbum, sizeof(PET_ALBUM), MAX_PET_KIND, fp);

  003bc	e9 47 ff ff ff	 jmp	 $LN75@LoadAlbum_
$LN27@LoadAlbum_:

; 2861 : 				}
; 2862 : 				fclose(fp);
; 2863 : 				return FALSE;
; 2864 : 			}
; 2865 : 		}
; 2866 : 		else {
; 2867 : 			//æ¾å°æ­¤å¸å·çè®°å½
; 2868 : 			if (fread(PetAlbum, sizeof(PET_ALBUM), MAX_PET_KIND, fp) < MAX_PET_KIND) {

  003c1	56		 push	 esi
  003c2	68 3a 02 00 00	 push	 570			; 0000023aH
  003c7	6a 50		 push	 80			; 00000050H
  003c9	68 00 00 00 00	 push	 OFFSET ?PetAlbum@@3PAUPET_ALBUM@@A
  003ce	e8 00 00 00 00	 call	 _fread
  003d3	83 c4 10	 add	 esp, 16			; 00000010H
  003d6	56		 push	 esi
  003d7	3d 3a 02 00 00	 cmp	 eax, 570		; 0000023aH
  003dc	73 2d		 jae	 SHORT $LN31@LoadAlbum_

; 2869 : 				fwrite(PetAlbum, sizeof(PET_ALBUM), MAX_PET_KIND, fp);

  003de	68 3a 02 00 00	 push	 570			; 0000023aH
  003e3	6a 50		 push	 80			; 00000050H
  003e5	68 00 00 00 00	 push	 OFFSET ?PetAlbum@@3PAUPET_ALBUM@@A
  003ea	e8 00 00 00 00	 call	 _fwrite

; 2870 : 				fclose(fp);

  003ef	56		 push	 esi
  003f0	e8 00 00 00 00	 call	 _fclose
  003f5	83 c4 14	 add	 esp, 20			; 00000014H

; 2877 : 	}
; 2878 : 	fclose(fp);
; 2879 : 	return ret;
; 2880 : }

  003f8	33 c0		 xor	 eax, eax
  003fa	5f		 pop	 edi
  003fb	5e		 pop	 esi
  003fc	5b		 pop	 ebx
  003fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00400	33 cd		 xor	 ecx, ebp
  00402	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00407	8b e5		 mov	 esp, ebp
  00409	5d		 pop	 ebp
  0040a	c3		 ret	 0
$LN31@LoadAlbum_:

; 2871 : 				return FALSE;
; 2872 : 			}
; 2873 : 			fclose(fp);

  0040b	e8 00 00 00 00	 call	 _fclose

; 2877 : 	}
; 2878 : 	fclose(fp);
; 2879 : 	return ret;
; 2880 : }

  00410	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00413	83 c4 04	 add	 esp, 4
  00416	33 cd		 xor	 ecx, ebp
  00418	b8 01 00 00 00	 mov	 eax, 1
  0041d	5f		 pop	 edi
  0041e	5e		 pop	 esi
  0041f	5b		 pop	 ebx
  00420	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00425	8b e5		 mov	 esp, ebp
  00427	5d		 pop	 ebp
  00428	c3		 ret	 0
?LoadAlbum_47@@YAHPAD@Z ENDP				; LoadAlbum_47
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?AnimDisp@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_pAct$GSCopy$1$ = -532					; size = 4
tv1880 = -528						; size = 4
_x$ = -524						; size = 4
_y$ = -520						; size = 4
_work$1 = -516						; size = 256
_moji$2 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pAct$ = 8						; size = 4
?AnimDisp@@YAXPAUaction@@@Z PROC			; AnimDisp, COMDAT

; 1576 : void AnimDisp(ACTION *pAct) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pAct$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	89 9d ec fd ff
	ff		 mov	 DWORD PTR _pAct$GSCopy$1$[ebp], ebx

; 1577 : 	int flag = FALSE;
; 1578 : 	int x, y, i;
; 1579 : 	switch (pAct->actNo) {

  0001f	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [ebx+172]
  00025	83 f8 13	 cmp	 eax, 19			; 00000013H
  00028	0f 87 52 0b 00
	00		 ja	 $LN2@AnimDisp
  0002e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN178@AnimDisp[eax*4]
$LN24@AnimDisp:

; 1580 : 
; 1581 : 	case ANIM_DISP_PET:
; 1582 : 		if (pAct->hitDispNo == HitDispNo && mouse.autoState & MOUSE_LEFT_CRICK) {

  00035	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00038	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0003e	75 35		 jne	 SHORT $LN77@AnimDisp
  00040	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  00047	74 2c		 je	 SHORT $LN77@AnimDisp

; 1583 : 			pAct->anim_ang++;

  00049	8b 83 54 01 00
	00		 mov	 eax, DWORD PTR [ebx+340]

; 1584 : 			if (pAct->anim_ang >= 8) pAct->anim_ang = 0;

  0004f	33 c9		 xor	 ecx, ecx
  00051	40		 inc	 eax
  00052	83 f8 08	 cmp	 eax, 8

; 1585 : 			play_se(217, 320, 240);

  00055	68 f0 00 00 00	 push	 240			; 000000f0H
  0005a	0f 4d c1	 cmovge	 eax, ecx
  0005d	68 40 01 00 00	 push	 320			; 00000140H
  00062	68 d9 00 00 00	 push	 217			; 000000d9H
  00067	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax
  0006d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN77@AnimDisp:

; 1771 : 
; 1772 : 	case ANIM_DISP_LETTER:
; 1773 : 		pattern(pAct, ANM_NOMAL_SPD, ANM_LOOP);

  00075	6a 00		 push	 0
  00077	6a 00		 push	 0

; 1774 : 
; 1775 : 		break;

  00079	e9 f9 0a 00 00	 jmp	 $LN185@AnimDisp
$LN27@AnimDisp:

; 1586 : 		}
; 1587 : 		pattern(pAct, ANM_NOMAL_SPD, ANM_LOOP);
; 1588 : 
; 1589 : 		break;
; 1590 : 
; 1591 : 	case ANIM_DISP_PET_SEND:
; 1592 : 		pAct->anim_no = ANIM_WALK;
; 1593 : 		pAct->anim_ang = 2;
; 1594 : 		pAct->crs = crs_change_tbl2[pAct->anim_ang];
; 1595 : 		pAct->dx++;

  0007e	8b 73 28	 mov	 esi, DWORD PTR [ebx+40]
  00081	c7 83 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+332], 4
  0008b	46		 inc	 esi
  0008c	c7 83 54 01 00
	00 02 00 00 00	 mov	 DWORD PTR [ebx+340], 2

; 1596 : 		if (pAct->dx % 3 == 0) {

  00096	8b ce		 mov	 ecx, esi
  00098	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+2
  0009f	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  000a5	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  000aa	f7 ee		 imul	 esi
  000ac	89 73 28	 mov	 DWORD PTR [ebx+40], esi
  000af	8b c2		 mov	 eax, edx
  000b1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b4	03 c2		 add	 eax, edx
  000b6	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000b9	2b c8		 sub	 ecx, eax
  000bb	75 12		 jne	 SHORT $LN29@AnimDisp

; 1597 : 			if (pAct->spd < 20) {

  000bd	8b 8b 34 01 00
	00		 mov	 ecx, DWORD PTR [ebx+308]
  000c3	83 f9 14	 cmp	 ecx, 20			; 00000014H
  000c6	7d 07		 jge	 SHORT $LN29@AnimDisp

; 1598 : 				pAct->spd++;

  000c8	41		 inc	 ecx
  000c9	89 8b 34 01 00
	00		 mov	 DWORD PTR [ebx+308], ecx
$LN29@AnimDisp:

; 1599 : 			}
; 1600 : 		}
; 1601 : 		if (pAct->dx % 5 == 0) {

  000cf	8b c6		 mov	 eax, esi
  000d1	b9 05 00 00 00	 mov	 ecx, 5
  000d6	99		 cdq
  000d7	f7 f9		 idiv	 ecx
  000d9	85 d2		 test	 edx, edx
  000db	75 0c		 jne	 SHORT $LN31@AnimDisp

; 1602 : 			if (pAct->dy >= 2) pAct->dy--;

  000dd	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000e0	83 f8 02	 cmp	 eax, 2
  000e3	7c 04		 jl	 SHORT $LN31@AnimDisp
  000e5	48		 dec	 eax
  000e6	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN31@AnimDisp:

; 1603 : 		}
; 1604 : 		gemini(pAct);

  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 1605 : 		if (pActMailItem != NULL) {

  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  000f4	83 c4 04	 add	 esp, 4
  000f7	85 c0		 test	 eax, eax
  000f9	74 0b		 je	 SHORT $LN33@AnimDisp

; 1606 : 			if (pAct->x <= pActMailItem->x) {

  000fb	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  000fe	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00101	7f 03		 jg	 SHORT $LN33@AnimDisp

; 1607 : 				pActMailItem->x = pAct->x;

  00103	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN33@AnimDisp:

; 1608 : 			}
; 1609 : 		}
; 1610 : 		if (pAct->x <= -100) {

  00106	83 7b 18 9c	 cmp	 DWORD PTR [ebx+24], -100 ; ffffff9cH
  0010a	0f 8f 62 0a 00
	00		 jg	 $LN137@AnimDisp

; 1611 : 			DeathAction(pActMenuWnd);

  00110	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  00116	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 1612 : 			pActMenuWnd = NULL;
; 1613 : 			DeathAction(pActPet);

  0011b	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  00121	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0012b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 1614 : 			pActPet = NULL;
; 1615 : 			DeathAction(pActMailItem);

  00130	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  00136	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  00140	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 1616 : 			pActMailItem = NULL;
; 1617 : 			mailWndNo = MAIL_WND_VIEW;
; 1618 : 			play_se(203, 320, 240);

  00145	68 f0 00 00 00	 push	 240			; 000000f0H
  0014a	68 40 01 00 00	 push	 320			; 00000140H
  0014f	68 cb 00 00 00	 push	 203			; 000000cbH
  00154	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0015e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 0
  00168	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 1619 : 			GetKeyInputFocus(&MyChatBuffer);

  0016d	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  00172	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  00177	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1620 : 		}
; 1621 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 1622 : 
; 1623 : 		break;

  0017a	e9 f3 09 00 00	 jmp	 $LN137@AnimDisp
$LN35@AnimDisp:

; 1624 : 
; 1625 : 	case ANIM_DISP_PET_RECIEVE:
; 1626 : 		pAct->anim_no = ANIM_WALK;
; 1627 : 		pAct->anim_ang = 6;
; 1628 : 		pAct->crs = crs_change_tbl2[pAct->anim_ang];
; 1629 : 		pAct->dx++;

  0017f	8b 7b 28	 mov	 edi, DWORD PTR [ebx+40]
  00182	c7 83 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+332], 4
  0018c	47		 inc	 edi
  0018d	c7 83 54 01 00
	00 06 00 00 00	 mov	 DWORD PTR [ebx+340], 6

; 1630 : 		if (pAct->spd > 0) {

  00197	8b f7		 mov	 esi, edi
  00199	0f b6 05 06 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+6
  001a0	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  001a6	8b 83 34 01 00
	00		 mov	 eax, DWORD PTR [ebx+308]
  001ac	89 7b 28	 mov	 DWORD PTR [ebx+40], edi
  001af	85 c0		 test	 eax, eax
  001b1	7e 42		 jle	 SHORT $LN39@AnimDisp

; 1631 : 			if (pAct->dx % 3 == 0) {

  001b3	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  001b8	8b cf		 mov	 ecx, edi
  001ba	f7 ef		 imul	 edi
  001bc	8b c2		 mov	 eax, edx
  001be	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001c1	03 c2		 add	 eax, edx
  001c3	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001c6	2b c8		 sub	 ecx, eax
  001c8	75 2b		 jne	 SHORT $LN39@AnimDisp

; 1632 : 				pAct->spd--;

  001ca	8b 83 34 01 00
	00		 mov	 eax, DWORD PTR [ebx+308]
  001d0	48		 dec	 eax
  001d1	89 83 34 01 00
	00		 mov	 DWORD PTR [ebx+308], eax

; 1633 : 				if (pAct->spd <= 0) {

  001d7	85 c0		 test	 eax, eax
  001d9	7f 1a		 jg	 SHORT $LN39@AnimDisp

; 1634 : 					pAct->actNo = ANIM_DISP_PET_MAIN;

  001db	c7 83 ac 00 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+172], 3

; 1635 : 					if (pActMailItem != NULL) {

  001e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  001ea	85 c0		 test	 eax, eax
  001ec	74 07		 je	 SHORT $LN39@AnimDisp

; 1636 : 						pActMailItem->dispPrio = DISP_PRIO_BOX3;

  001ee	c6 40 15 6f	 mov	 BYTE PTR [eax+21], 111	; 0000006fH
  001f2	8b 73 28	 mov	 esi, DWORD PTR [ebx+40]
$LN39@AnimDisp:

; 1637 : 					}
; 1638 : 				}
; 1639 : 			}
; 1640 : 		}
; 1641 : 		if (pAct->dx % 8 == 0) {

  001f5	81 e6 07 00 00
	80		 and	 esi, -2147483641	; 80000007H
  001fb	79 07		 jns	 SHORT $LN183@AnimDisp
  001fd	4e		 dec	 esi
  001fe	83 ce f8	 or	 esi, -8			; fffffff8H
  00201	83 c6 01	 add	 esi, 1
$LN183@AnimDisp:
  00204	75 0c		 jne	 SHORT $LN41@AnimDisp

; 1642 : 			if (pAct->dy < 12) pAct->dy++;

  00206	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  00209	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0020c	7d 04		 jge	 SHORT $LN41@AnimDisp
  0020e	40		 inc	 eax
  0020f	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN41@AnimDisp:

; 1643 : 		}
; 1644 : 		gemini(pAct);

  00212	53		 push	 ebx
  00213	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 1645 : 		if (pActMailItem != NULL) {

  00218	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0021d	83 c4 04	 add	 esp, 4
  00220	85 c0		 test	 eax, eax
  00222	0f 84 4a 09 00
	00		 je	 $LN137@AnimDisp

; 1646 : 			if (pAct->x >= pActMailItem->x) {

  00228	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  0022b	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0022e	0f 8c 3e 09 00
	00		 jl	 $LN137@AnimDisp

; 1647 : 				pActMailItem->x = pAct->x;

  00234	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1648 : 			}
; 1649 : 		}
; 1650 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 1651 : 
; 1652 : 		break;

  00237	e9 36 09 00 00	 jmp	 $LN137@AnimDisp
$LN44@AnimDisp:

; 1653 : 
; 1654 : 	case ANIM_DISP_PET_MAIN:
; 1655 : 		if (Rnd(0, 4) >= 2) {

  0023c	6a 04		 push	 4
  0023e	6a 00		 push	 0
  00240	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  00245	83 c4 08	 add	 esp, 8
  00248	83 f8 02	 cmp	 eax, 2
  0024b	7c 51		 jl	 SHORT $LN45@AnimDisp

; 1656 : 			pAct->actNo = ANIM_DISP_PET_WALK;
; 1657 : 			pAct->anim_ang = Rnd(0, 7);

  0024d	6a 07		 push	 7
  0024f	6a 00		 push	 0
  00251	c7 83 ac 00 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+172], 4
  0025b	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  00260	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax

; 1658 : 			pAct->crs = crs_change_tbl2[pAct->anim_ang];
; 1659 : 			pAct->spd = Rnd(1, 12);

  00266	6a 0c		 push	 12			; 0000000cH
  00268	6a 01		 push	 1
  0026a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  00271	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  00277	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 1660 : 			pAct->dy = 13 - pAct->spd;

  0027c	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00281	89 83 34 01 00
	00		 mov	 DWORD PTR [ebx+308], eax
  00287	83 c4 10	 add	 esp, 16			; 00000010H

; 2097 : 		}
; 2098 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 2099 : 	}
; 2100 : 	break;
; 2101 : #endif
; 2102 : 	}
; 2103 : 
; 2104 : 	// ????î¡¡î ?î®?????
; 2105 : 	if (ANIM_DISP_PET_MAIN <= pAct->actNo && pAct->actNo <= ANIM_DISP_PET_DEAD) {

  0028a	c7 83 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ebx+336], -1
  00294	2b c8		 sub	 ecx, eax
  00296	89 4b 2c	 mov	 DWORD PTR [ebx+44], ecx
  00299	e9 e2 08 00 00	 jmp	 $LN2@AnimDisp
$LN45@AnimDisp:

; 1661 : 		}
; 1662 : 		else pAct->actNo = Rnd(ANIM_DISP_PET_STAND, ANIM_DISP_PET_DEAD);

  0029e	6a 09		 push	 9
  002a0	6a 05		 push	 5
  002a2	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  002a7	83 c4 08	 add	 esp, 8
  002aa	89 83 ac 00 00
	00		 mov	 DWORD PTR [ebx+172], eax
$LN46@AnimDisp:

; 2097 : 		}
; 2098 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 2099 : 	}
; 2100 : 	break;
; 2101 : #endif
; 2102 : 	}
; 2103 : 
; 2104 : 	// ????î¡¡î ?î®?????
; 2105 : 	if (ANIM_DISP_PET_MAIN <= pAct->actNo && pAct->actNo <= ANIM_DISP_PET_DEAD) {

  002b0	c7 83 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ebx+336], -1
  002ba	e9 c1 08 00 00	 jmp	 $LN2@AnimDisp
$LN47@AnimDisp:

; 1663 : 
; 1664 : 		pAct->anim_no_bak = -1;
; 1665 : 
; 1666 : 		break;
; 1667 : 
; 1668 : 	case ANIM_DISP_PET_WALK:
; 1669 : 		pAct->anim_no = ANIM_WALK;
; 1670 : 		gemini(pAct);

  002bf	53		 push	 ebx
  002c0	c7 83 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+332], 4
  002ca	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 1671 : 		if (pattern(pAct, pAct->dy, ANM_NO_LOOP)) {

  002cf	6a 01		 push	 1
  002d1	ff 73 2c	 push	 DWORD PTR [ebx+44]
  002d4	53		 push	 ebx
  002d5	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  002da	83 c4 10	 add	 esp, 16			; 00000010H
  002dd	85 c0		 test	 eax, eax
  002df	74 26		 je	 SHORT $LN50@AnimDisp

; 1672 : 			if (Rnd(0, 3) == 0) {

  002e1	6a 03		 push	 3
  002e3	6a 00		 push	 0
  002e5	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  002ea	83 c4 08	 add	 esp, 8
  002ed	85 c0		 test	 eax, eax
  002ef	75 0c		 jne	 SHORT $LN49@AnimDisp

; 1673 : 				pAct->actNo = ANIM_DISP_PET_MAIN;

  002f1	c7 83 ac 00 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+172], 3

; 1674 : 			}

  002fb	eb 0a		 jmp	 SHORT $LN50@AnimDisp
$LN49@AnimDisp:

; 1675 : 			else {
; 1676 : 				pAct->anim_no_bak = -1;

  002fd	c7 83 50 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ebx+336], -1
$LN50@AnimDisp:

; 1677 : 			}
; 1678 : 		}
; 1679 : 		if (pActPet == NULL || pActMenuWnd == NULL) {

  00307	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActPet@@3PAUaction@@A
  0030d	85 c9		 test	 ecx, ecx
  0030f	0f 84 db 08 00
	00		 je	 $LN140@AnimDisp
  00315	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0031b	85 d2		 test	 edx, edx
  0031d	0f 84 cd 08 00
	00		 je	 $LN140@AnimDisp

; 1680 : 			return;
; 1681 : 		}
; 1682 : 		if (pActPet->y < pActMenuWnd->y + 64) {

  00323	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00326	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]
  00329	83 c0 40	 add	 eax, 64			; 00000040H
  0032c	3b f0		 cmp	 esi, eax
  0032e	7d 2c		 jge	 SHORT $LN174@AnimDisp

; 1683 : 			pActPet->y = pActMenuWnd->y + 64;

  00330	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1684 : 			pAct->crs = crs_bound_tbl[0][pAct->crs];

  00333	8b 83 38 01 00
	00		 mov	 eax, DWORD PTR [ebx+312]
  00339	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_bound_tbl@@3PAY0CA@EA[eax]
  00340	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax

; 1685 : 			pAct->anim_ang = crs_change_tbl[pAct->crs];

  00346	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  0034d	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax
  00353	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]
  00356	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
$LN174@AnimDisp:

; 1686 : 		}
; 1687 : 		if (pActPet->y > pActMenuWnd->y + 424 - 32) {

  0035c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0035f	05 88 01 00 00	 add	 eax, 392		; 00000188H
  00364	3b f0		 cmp	 esi, eax
  00366	7e 29		 jle	 SHORT $LN175@AnimDisp

; 1688 : 			pActPet->y = pActMenuWnd->y + 424 - 32;

  00368	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1689 : 			pAct->crs = crs_bound_tbl[2][pAct->crs];

  0036b	8b 83 38 01 00
	00		 mov	 eax, DWORD PTR [ebx+312]
  00371	0f b6 80 40 00
	00 00		 movzx	 eax, BYTE PTR ?crs_bound_tbl@@3PAY0CA@EA[eax+64]
  00378	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax

; 1690 : 			pAct->anim_ang = crs_change_tbl[pAct->crs];

  0037e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  00385	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax
  0038b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
$LN175@AnimDisp:

; 1691 : 		}
; 1692 : 		if (pActPet->x < pActMenuWnd->x + 32) {

  00391	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00394	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00397	83 c0 20	 add	 eax, 32			; 00000020H
  0039a	3b f0		 cmp	 esi, eax
  0039c	7d 2c		 jge	 SHORT $LN176@AnimDisp

; 1693 : 			pActPet->x = pActMenuWnd->x + 32;

  0039e	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1694 : 			pAct->crs = crs_bound_tbl[3][pAct->crs];

  003a1	8b 83 38 01 00
	00		 mov	 eax, DWORD PTR [ebx+312]
  003a7	0f b6 80 60 00
	00 00		 movzx	 eax, BYTE PTR ?crs_bound_tbl@@3PAY0CA@EA[eax+96]
  003ae	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax

; 1695 : 			pAct->anim_ang = crs_change_tbl[pAct->crs];

  003b4	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  003bb	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax
  003c1	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  003c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
$LN176@AnimDisp:

; 1696 : 		}
; 1697 : 		if (pActPet->x > pActMenuWnd->x + 272 - 32) {

  003ca	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  003cd	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
  003d2	3b f0		 cmp	 esi, eax
  003d4	0f 8e a6 07 00
	00		 jle	 $LN2@AnimDisp

; 1698 : 			pActPet->x = pActMenuWnd->x + 272 - 32;

  003da	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 1699 : 			pAct->crs = crs_bound_tbl[1][pAct->crs];

  003dd	8b 83 38 01 00
	00		 mov	 eax, DWORD PTR [ebx+312]
  003e3	0f b6 80 20 00
	00 00		 movzx	 eax, BYTE PTR ?crs_bound_tbl@@3PAY0CA@EA[eax+32]
  003ea	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax

; 1700 : 			pAct->anim_ang = crs_change_tbl[pAct->crs];

  003f0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  003f7	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax

; 1701 : 		}
; 1702 : 		break;

  003fd	e9 7e 07 00 00	 jmp	 $LN2@AnimDisp
$LN57@AnimDisp:

; 1703 : 
; 1704 : 	case ANIM_DISP_PET_STAND:
; 1705 : 		pAct->anim_no = ANIM_STAND;
; 1706 : 		if (pattern(pAct, ANM_NOMAL_SPD, ANM_NO_LOOP)) {

  00402	6a 01		 push	 1
  00404	6a 00		 push	 0
  00406	53		 push	 ebx
  00407	c7 83 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+332], 3
  00411	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00416	83 c4 0c	 add	 esp, 12			; 0000000cH
  00419	85 c0		 test	 eax, eax
  0041b	0f 84 5f 07 00
	00		 je	 $LN2@AnimDisp

; 1707 : 			pAct->actNo = ANIM_DISP_PET_MAIN;

  00421	c7 83 ac 00 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+172], 3

; 1708 : 		}
; 1709 : 
; 1710 : 		break;

  0042b	e9 50 07 00 00	 jmp	 $LN2@AnimDisp
$LN59@AnimDisp:

; 1711 : 
; 1712 : 	case ANIM_DISP_PET_ATTACK:
; 1713 : 		pAct->anim_no = ANIM_ATTACK;

  00430	c7 83 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+332], 0
$LN192@AnimDisp:

; 2097 : 		}
; 2098 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 2099 : 	}
; 2100 : 	break;
; 2101 : #endif
; 2102 : 	}
; 2103 : 
; 2104 : 	// ????î¡¡î ?î®?????
; 2105 : 	if (ANIM_DISP_PET_MAIN <= pAct->actNo && pAct->actNo <= ANIM_DISP_PET_DEAD) {

  0043a	6a 01		 push	 1
  0043c	6a 00		 push	 0
  0043e	53		 push	 ebx
  0043f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00444	83 c4 0c	 add	 esp, 12			; 0000000cH
  00447	85 c0		 test	 eax, eax
  00449	0f 84 31 07 00
	00		 je	 $LN2@AnimDisp
  0044f	6a 01		 push	 1
  00451	6a 00		 push	 0
  00453	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  00458	83 c4 08	 add	 esp, 8
  0045b	85 c0		 test	 eax, eax
  0045d	0f 85 4d fe ff
	ff		 jne	 $LN46@AnimDisp
  00463	c7 83 ac 00 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+172], 3
  0046d	e9 0e 07 00 00	 jmp	 $LN2@AnimDisp
$LN63@AnimDisp:

; 1714 : 		if (pattern(pAct, ANM_NOMAL_SPD, ANM_NO_LOOP)) {
; 1715 : 			if (Rnd(0, 1) == 0) {
; 1716 : 				pAct->actNo = ANIM_DISP_PET_MAIN;
; 1717 : 			}
; 1718 : 			else {
; 1719 : 				pAct->anim_no_bak = -1;
; 1720 : 			}
; 1721 : 		}
; 1722 : 
; 1723 : 		break;
; 1724 : 
; 1725 : 	case ANIM_DISP_PET_GUARD:
; 1726 : 		pAct->anim_no = ANIM_GUARD;
; 1727 : 		if (pattern(pAct, ANM_NOMAL_SPD, ANM_NO_LOOP)) {

  00472	6a 01		 push	 1
  00474	6a 00		 push	 0
  00476	53		 push	 ebx
  00477	c7 83 4c 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [ebx+332], 10	; 0000000aH
  00481	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00486	83 c4 0c	 add	 esp, 12			; 0000000cH
  00489	85 c0		 test	 eax, eax
  0048b	0f 84 ef 06 00
	00		 je	 $LN2@AnimDisp

; 1728 : 			if (Rnd(0, 1) == 0) {

  00491	6a 01		 push	 1
$LN189@AnimDisp:

; 2097 : 		}
; 2098 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 2099 : 	}
; 2100 : 	break;
; 2101 : #endif
; 2102 : 	}
; 2103 : 
; 2104 : 	// ????î¡¡î ?î®?????
; 2105 : 	if (ANIM_DISP_PET_MAIN <= pAct->actNo && pAct->actNo <= ANIM_DISP_PET_DEAD) {

  00493	6a 00		 push	 0
  00495	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  0049a	83 c4 08	 add	 esp, 8
  0049d	85 c0		 test	 eax, eax
  0049f	0f 85 db 06 00
	00		 jne	 $LN2@AnimDisp
  004a5	c7 83 ac 00 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+172], 3
  004af	e9 cc 06 00 00	 jmp	 $LN2@AnimDisp
$LN66@AnimDisp:

; 1729 : 				pAct->actNo = ANIM_DISP_PET_MAIN;
; 1730 : 			}
; 1731 : 		}
; 1732 : 
; 1733 : 		break;
; 1734 : 
; 1735 : 	case ANIM_DISP_PET_DAMAGE:
; 1736 : 		pAct->anim_no = ANIM_DAMAGE;

  004b4	c7 83 4c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+332], 1

; 1737 : 		if (pattern(pAct, ANM_NOMAL_SPD, ANM_NO_LOOP)) {
; 1738 : 			if (Rnd(0, 1) == 0) {
; 1739 : 				pAct->actNo = ANIM_DISP_PET_MAIN;
; 1740 : 			}

  004be	e9 77 ff ff ff	 jmp	 $LN192@AnimDisp
$LN70@AnimDisp:

; 1741 : 			else {
; 1742 : 				pAct->anim_no_bak = -1;
; 1743 : 			}
; 1744 : 		}
; 1745 : 
; 1746 : 		break;
; 1747 : 
; 1748 : 	case ANIM_DISP_PET_DEAD:
; 1749 : 		pAct->anim_no = ANIM_DEAD;
; 1750 : 		if (pattern(pAct, ANM_NOMAL_SPD, ANM_NO_LOOP)) {

  004c3	6a 01		 push	 1
  004c5	6a 00		 push	 0
  004c7	53		 push	 ebx
  004c8	c7 83 4c 01 00
	00 02 00 00 00	 mov	 DWORD PTR [ebx+332], 2
  004d2	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  004d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  004da	85 c0		 test	 eax, eax
  004dc	0f 84 9e 06 00
	00		 je	 $LN2@AnimDisp

; 1751 : 			if (Rnd(0, 2) == 0) {

  004e2	6a 02		 push	 2

; 1752 : 				pAct->actNo = ANIM_DISP_PET_MAIN;
; 1753 : 			}
; 1754 : 		}
; 1755 : 
; 1756 : 		break;

  004e4	eb ad		 jmp	 SHORT $LN189@AnimDisp
$LN74@AnimDisp:

; 1757 : 
; 1758 : 	case ANIM_DISP_PET_ITEM:
; 1759 : 		pattern(pAct, ANM_NOMAL_SPD, ANM_LOOP);
; 1760 : 
; 1761 : 		break;
; 1762 : 
; 1763 : 	case ANIM_DISP_LETTER_MOVE:
; 1764 : 		if (pAct->x < 245) pAct->x += 5;

  004e6	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  004e9	3d f5 00 00 00	 cmp	 eax, 245		; 000000f5H
  004ee	7d 0b		 jge	 SHORT $LN75@AnimDisp
  004f0	83 c0 05	 add	 eax, 5
  004f3	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  004f6	e9 85 06 00 00	 jmp	 $LN2@AnimDisp
$LN75@AnimDisp:

; 1765 : 		else {
; 1766 : 			pAct->actNo = ANIM_DISP_LETTER;
; 1767 : 			pattern(pAct, ANM_NOMAL_SPD, ANM_LOOP);

  004fb	6a 00		 push	 0
  004fd	6a 00		 push	 0
  004ff	53		 push	 ebx
  00500	c7 83 ac 00 00
	00 0c 00 00 00	 mov	 DWORD PTR [ebx+172], 12	; 0000000cH
  0050a	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  0050f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1768 : 			pAct->anim_cnt += 8;

  00512	83 83 5c 01 00
	00 08		 add	 DWORD PTR [ebx+348], 8

; 1769 : 		}
; 1770 : 		break;

  00519	e9 62 06 00 00	 jmp	 $LN2@AnimDisp
$LN78@AnimDisp:

; 1776 : 
; 1777 : 	case ANIM_DISP_MIX_PET_INIT:
; 1778 : 		//JLWG æçç¹æ1
; 1779 : 		pAct->actNo = ANIM_DISP_MIX_PET_MOJI;

  0051e	c7 83 ac 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [ebx+172], 15	; 0000000fH

; 1780 : 		break;

  00528	e9 53 06 00 00	 jmp	 $LN2@AnimDisp
$LN80@AnimDisp:

; 1781 : 
; 1782 : 		pAct->spd = 11;//Rnd( 6, 12 );
; 1783 : 		pAct->dy = 14 - pAct->spd;
; 1784 : 		pAct->anim_no = ANIM_WALK;
; 1785 : 		for (i = MAX_ITEMSTART; i < MAX_ITEM; i++) {
; 1786 : 			if (ItemBuffer[i].mixFlag >= 1) {
; 1787 : 				pAct->dx = i;
; 1788 : 				break;
; 1789 : 			}
; 1790 : 		}
; 1791 : 		pAct->actNo = ANIM_DISP_MIX_PET_MOVE;
; 1792 : 		break;
; 1793 : 
; 1794 : 	case ANIM_DISP_MIX_PET_MOVE:
; 1795 : 		x = ItemBuffer[pAct->dx].defX;

  0052d	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00530	c1 e1 05	 shl	 ecx, 5
  00533	8b 81 08 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[ecx+8]
  00539	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _x$[ebp], eax

; 1796 : 		y = ItemBuffer[pAct->dx].defY;

  0053f	8b 81 0c 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[ecx+12]
  00545	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _y$[ebp], eax

; 1797 : 
; 1798 : 		// ????
; 1799 : 		radar(pAct, &x, &y);

  0054b	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  00551	50		 push	 eax
  00552	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _x$[ebp]
  00558	50		 push	 eax
  00559	53		 push	 ebx
  0055a	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 1800 : 
; 1801 : 		// î®?î±?
; 1802 : 		pAct->anim_no = ANIM_WALK;
; 1803 : 
; 1804 : 		// ?????????
; 1805 : 		if (y >= pAct->spd / 2) {

  0055f	8b 83 34 01 00
	00		 mov	 eax, DWORD PTR [ebx+308]
  00565	83 c4 0c	 add	 esp, 12			; 0000000cH
  00568	99		 cdq
  00569	2b c2		 sub	 eax, edx
  0056b	c7 83 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+332], 4
  00575	d1 f8		 sar	 eax, 1
  00577	39 85 f8 fd ff
	ff		 cmp	 DWORD PTR _y$[ebp], eax
  0057d	7c 45		 jl	 SHORT $LN81@AnimDisp
$LN194@AnimDisp:

; 2097 : 		}
; 2098 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 2099 : 	}
; 2100 : 	break;
; 2101 : #endif
; 2102 : 	}
; 2103 : 
; 2104 : 	// ????î¡¡î ?î®?????
; 2105 : 	if (ANIM_DISP_PET_MAIN <= pAct->actNo && pAct->actNo <= ANIM_DISP_PET_DEAD) {

  0057f	83 bb 8c 00 00
	00 00		 cmp	 DWORD PTR [ebx+140], 0
  00586	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _x$[ebp]
  0058c	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  00592	75 17		 jne	 SHORT $LN83@AnimDisp
  00594	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl@@3PAEA[eax]
  0059b	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax
  005a1	c7 83 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+140], 1
$LN83@AnimDisp:
  005ab	53		 push	 ebx
  005ac	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini
  005b1	6a 00		 push	 0
  005b3	ff 73 2c	 push	 DWORD PTR [ebx+44]
  005b6	53		 push	 ebx
  005b7	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  005bc	83 c4 10	 add	 esp, 16			; 00000010H
  005bf	e9 bc 05 00 00	 jmp	 $LN2@AnimDisp
$LN81@AnimDisp:

; 1806 : 			// ???îî
; 1807 : 			pAct->crs = x;
; 1808 : 			// ??îî??î«ä½î????????
; 1809 : 			if (pAct->level == FALSE) {
; 1810 : 				pAct->anim_ang = crs_change_tbl[pAct->crs];
; 1811 : 				// ????î??????
; 1812 : 				pAct->level = TRUE;
; 1813 : 			}
; 1814 : 
; 1815 : 			// ?î®??
; 1816 : 			gemini(pAct);
; 1817 : 			// ???????
; 1818 : 			pattern(pAct, pAct->dy, ANM_LOOP);
; 1819 : 		}
; 1820 : 		// ?????
; 1821 : 		else {
; 1822 : 			// ????î???????
; 1823 : 			pAct->level = FALSE;
; 1824 : 			// ????î¸??
; 1825 : 			play_se(204, 320, 240);

  005c4	68 f0 00 00 00	 push	 240			; 000000f0H
  005c9	68 40 01 00 00	 push	 320			; 00000140H
  005ce	68 cc 00 00 00	 push	 204			; 000000ccH
  005d3	c7 83 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+140], 0
  005dd	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  005e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1826 : 
; 1827 : 			// ??????????????
; 1828 : 			if (pAct->delta == 1) {

  005e5	83 7b 34 01	 cmp	 DWORD PTR [ebx+52], 1
  005e9	75 5d		 jne	 SHORT $LN84@AnimDisp

; 1829 : 				// ???????
; 1830 : 				pAct->actNo = ANIM_DISP_MIX_PET_MOJI;

  005eb	c7 83 ac 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [ebx+172], 15	; 0000000fH
  005f5	b8 3c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+316

; 1831 : 				// î®?î±?
; 1832 : 				pAct->anim_no = ANIM_STAND;

  005fa	c7 83 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+332], 3

; 1833 : 
; 1834 : 				// ?????î®????
; 1835 : 				pAct->spd = 10;//Rnd( 6, 12 );

  00604	c7 83 34 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [ebx+308], 10	; 0000000aH

; 1836 : 							   // ???????????
; 1837 : 				pAct->dy = 14 - pAct->spd;

  0060e	c7 43 2c 04 00
	00 00		 mov	 DWORD PTR [ebx+44], 4
$LL9@AnimDisp:

; 1841 : 					if (ItemBuffer[i].mixFlag >= 1) {

  00615	83 38 01	 cmp	 DWORD PTR [eax], 1
  00618	7c 06		 jl	 SHORT $LN7@AnimDisp

; 1842 : 						ItemBuffer[i].mixFlag = 4;

  0061a	c7 00 04 00 00
	00		 mov	 DWORD PTR [eax], 4
$LN7@AnimDisp:

; 1838 : 
; 1839 : 				// î¼??????
; 1840 : 				for (i = MAX_ITEMSTART; i < MAX_ITEM; i++) {

  00620	83 c0 20	 add	 eax, 32			; 00000020H
  00623	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  00628	7c eb		 jl	 SHORT $LL9@AnimDisp

; 1843 : 					}
; 1844 : 				}
; 1845 : 
; 1846 : 				// ????????????
; 1847 : 				pAct->delta = Rnd(2, 15);

  0062a	6a 0f		 push	 15			; 0000000fH
  0062c	6a 02		 push	 2
  0062e	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd
  00633	83 c4 08	 add	 esp, 8
  00636	89 43 34	 mov	 DWORD PTR [ebx+52], eax

; 1848 : 				pAct->mp = 15;

  00639	c7 83 84 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [ebx+132], 15	; 0000000fH

; 1849 : 				break;

  00643	e9 38 05 00 00	 jmp	 $LN2@AnimDisp
$LN84@AnimDisp:
  00648	66 0f 6e 83 34
	01 00 00	 movd	 xmm0, DWORD PTR [ebx+308]

; 1850 : 			}
; 1851 : 
; 1852 : 			// ?î®????î½???
; 1853 : 			pAct->spd = (int)((double)pAct->spd * 0.79);

  00650	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00654	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe947ae147ae148
  0065c	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00660	89 8b 34 01 00
	00		 mov	 DWORD PTR [ebx+308], ecx

; 1854 : 			// ????????
; 1855 : 			if (pAct->spd < 2) pAct->spd = 2;

  00666	83 f9 02	 cmp	 ecx, 2
  00669	7d 0f		 jge	 SHORT $LN86@AnimDisp
  0066b	c7 83 34 01 00
	00 02 00 00 00	 mov	 DWORD PTR [ebx+308], 2
  00675	b9 02 00 00 00	 mov	 ecx, 2
$LN86@AnimDisp:

; 1856 : 			// ???????????
; 1857 : 			pAct->dy = 13 - pAct->spd;

  0067a	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH
  0067f	2b c1		 sub	 eax, ecx
  00681	89 43 2c	 mov	 DWORD PTR [ebx+44], eax

; 1858 : 
; 1859 : 			ItemBuffer[pAct->dx].mixFlag = 3;

  00684	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00687	c1 e0 05	 shl	 eax, 5
  0068a	c7 80 1c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[eax+28], 3

; 1860 : 
; 1861 : 			// ???????î?
; 1862 : 			for (i = pAct->dx + 1; i < MAX_ITEM; i++) {

  00694	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00697	41		 inc	 ecx
  00698	83 f9 36	 cmp	 ecx, 54			; 00000036H
  0069b	7d 28		 jge	 SHORT $LN173@AnimDisp

; 1856 : 			// ???????????
; 1857 : 			pAct->dy = 13 - pAct->spd;

  0069d	8b c1		 mov	 eax, ecx
  0069f	c1 e0 05	 shl	 eax, 5
  006a2	05 1c 00 00 00	 add	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+28
$LL12@AnimDisp:

; 1863 : 				if (ItemBuffer[i].mixFlag >= 1) {

  006a7	83 38 01	 cmp	 DWORD PTR [eax], 1
  006aa	7d 0d		 jge	 SHORT $LN151@AnimDisp

; 1860 : 
; 1861 : 			// ???????î?
; 1862 : 			for (i = pAct->dx + 1; i < MAX_ITEM; i++) {

  006ac	83 c0 20	 add	 eax, 32			; 00000020H
  006af	41		 inc	 ecx
  006b0	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  006b5	7c f0		 jl	 SHORT $LL12@AnimDisp

; 1875 : 						// ????î
; 1876 : 						pAct->dx = i;
; 1877 : 						break;
; 1878 : 					}
; 1879 : 					else
; 1880 : 						// ???î?????????
; 1881 : 						if (ItemBuffer[i].mixFlag >= 1) {

  006b7	eb 0c		 jmp	 SHORT $LN173@AnimDisp
$LN151@AnimDisp:

; 1864 : 					pAct->dx = i;

  006b9	89 4b 28	 mov	 DWORD PTR [ebx+40], ecx

; 1865 : 					break;
; 1866 : 				}
; 1867 : 			}
; 1868 : 
; 1869 : 			// ????????
; 1870 : 			if (i >= MAX_ITEM) {

  006bc	83 f9 36	 cmp	 ecx, 54			; 00000036H
  006bf	0f 8c bb 04 00
	00		 jl	 $LN2@AnimDisp
$LN173@AnimDisp:

; 1871 : 				// ?????î??????î?
; 1872 : 				for (i = MAX_ITEMSTART; i < MAX_ITEM; i++) {

  006c5	ba 09 00 00 00	 mov	 edx, 9
  006ca	b9 3c 01 00 00	 mov	 ecx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+316
  006cf	b8 fc 0e 00 00	 mov	 eax, OFFSET ?pc@@3UPC@@A+3836
$LL15@AnimDisp:

; 1873 : 					// ?????????î¡??
; 1874 : 					if (pc.item[i].useFlag == FALSE) {

  006d4	66 83 38 00	 cmp	 WORD PTR [eax], 0
  006d8	74 21		 je	 SHORT $LN153@AnimDisp

; 1875 : 						// ????î
; 1876 : 						pAct->dx = i;
; 1877 : 						break;
; 1878 : 					}
; 1879 : 					else
; 1880 : 						// ???î?????????
; 1881 : 						if (ItemBuffer[i].mixFlag >= 1) {

  006da	83 39 01	 cmp	 DWORD PTR [ecx], 1
  006dd	7d 1c		 jge	 SHORT $LN153@AnimDisp

; 1871 : 				// ?????î??????î?
; 1872 : 				for (i = MAX_ITEMSTART; i < MAX_ITEM; i++) {

  006df	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  006e4	42		 inc	 edx
  006e5	83 c1 20	 add	 ecx, 32			; 00000020H
  006e8	3d c8 51 00 00	 cmp	 eax, OFFSET ?pc@@3UPC@@A+20936
  006ed	7c e5		 jl	 SHORT $LL15@AnimDisp

; 1884 : 							break;
; 1885 : 						}
; 1886 : 				}
; 1887 : 				// ????????????
; 1888 : 				pAct->delta = 1;

  006ef	c7 43 34 01 00
	00 00		 mov	 DWORD PTR [ebx+52], 1

; 1889 : 			}
; 1890 : 		}
; 1891 : 		break;

  006f6	e9 85 04 00 00	 jmp	 $LN2@AnimDisp
$LN153@AnimDisp:

; 1882 : 							// ????î
; 1883 : 							pAct->dx = i;

  006fb	89 53 28	 mov	 DWORD PTR [ebx+40], edx

; 1884 : 							break;
; 1885 : 						}
; 1886 : 				}
; 1887 : 				// ????????????
; 1888 : 				pAct->delta = 1;

  006fe	c7 43 34 01 00
	00 00		 mov	 DWORD PTR [ebx+52], 1

; 1889 : 			}
; 1890 : 		}
; 1891 : 		break;

  00705	e9 76 04 00 00	 jmp	 $LN2@AnimDisp
$LN92@AnimDisp:

; 1892 : 
; 1893 : 	case ANIM_DISP_MIX_PET_MOJI:	// ?î???????????î?
; 1894 : 
; 1895 : 									// ???????
; 1896 : 		pattern(pAct, 1, ANM_LOOP);

  0070a	6a 00		 push	 0
  0070c	6a 01		 push	 1
  0070e	53		 push	 ebx
  0070f	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern

; 1897 : 		// ??????
; 1898 : 		if (pAct->maxHp >= pAct->mp) pAct->maxHp = 0;

  00714	8b 83 80 00 00
	00		 mov	 eax, DWORD PTR [ebx+128]
  0071a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0071d	3b 83 84 00 00
	00		 cmp	 eax, DWORD PTR [ebx+132]
  00723	0f 8c 1a 02 00
	00		 jl	 $LN93@AnimDisp

; 1902 : 		}
; 1903 : 		// ??????
; 1904 : 		switch (pAct->hp) {

  00729	8b 4b 78	 mov	 ecx, DWORD PTR [ebx+120]
  0072c	c7 83 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+128], 0
  00736	83 f9 03	 cmp	 ecx, 3
  00739	0f 87 81 00 00
	00		 ja	 $LN16@AnimDisp
  0073f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN179@AnimDisp[ecx*4]
$LN95@AnimDisp:

; 1905 : 
; 1906 : 			// ???
; 1907 : 		case 0:
; 1908 : 		case 3:
; 1909 : 			// ??îî
; 1910 : 			pAct->anim_ang++;

  00746	8b 83 54 01 00
	00		 mov	 eax, DWORD PTR [ebx+340]

; 1911 : 			// ????????
; 1912 : 			if (pAct->anim_ang >= 8) pAct->anim_ang = 0;

  0074c	33 d2		 xor	 edx, edx
  0074e	40		 inc	 eax
  0074f	83 f8 08	 cmp	 eax, 8
  00752	0f 4d c2	 cmovge	 eax, edx
  00755	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax

; 1913 : 			// ?????
; 1914 : 			if (pAct->hp == 0) {

  0075b	85 c9		 test	 ecx, ecx
  0075d	75 1a		 jne	 SHORT $LN97@AnimDisp

; 1915 : 				// ????î¸??
; 1916 : 				play_se(216, 320, 240);

  0075f	68 f0 00 00 00	 push	 240			; 000000f0H
  00764	68 40 01 00 00	 push	 320			; 00000140H
  00769	68 d8 00 00 00	 push	 216			; 000000d8H
  0076e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00773	8b 4b 78	 mov	 ecx, DWORD PTR [ebx+120]
  00776	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN97@AnimDisp:

; 1917 : 			}
; 1918 : 			// ???????
; 1919 : 			if (pAct->hp == 3) {

  00779	83 f9 03	 cmp	 ecx, 3
  0077c	75 3c		 jne	 SHORT $LN98@AnimDisp

; 1920 : 				pAct->dir++;

  0077e	ff 43 30	 inc	 DWORD PTR [ebx+48]

; 1921 : 				pAct->hp = 0;
; 1922 : 				// î î ?????î?
; 1923 : 				pAct->mp--;

  00781	ff 8b 84 00 00
	00		 dec	 DWORD PTR [ebx+132]

; 1924 : 				if (pAct->mp < 4) pAct->mp = 4;

  00787	83 bb 84 00 00
	00 04		 cmp	 DWORD PTR [ebx+132], 4
  0078e	c7 43 78 00 00
	00 00		 mov	 DWORD PTR [ebx+120], 0
  00795	7d 29		 jge	 SHORT $LN16@AnimDisp
  00797	c7 83 84 00 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+132], 4

; 1925 : 			}

  007a1	eb 1d		 jmp	 SHORT $LN16@AnimDisp
$LN101@AnimDisp:

; 1926 : 			else pAct->hp++;
; 1927 : 			break;
; 1928 : 
; 1929 : 			// ???
; 1930 : 		case 1:
; 1931 : 		case 2:
; 1932 : 			// ??îî
; 1933 : 			pAct->anim_ang--;

  007a3	8b 83 54 01 00
	00		 mov	 eax, DWORD PTR [ebx+340]

; 1934 : 			// ????????
; 1935 : 			if (pAct->anim_ang < 0) pAct->anim_ang = 7;

  007a9	ba 07 00 00 00	 mov	 edx, 7
  007ae	83 e8 01	 sub	 eax, 1
  007b1	0f 48 c2	 cmovs	 eax, edx
  007b4	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax
$LN98@AnimDisp:

; 1936 : 			pAct->hp++;
; 1937 : 			break;
; 1938 : 		}
; 1939 : 
; 1940 : 		// ????î·???
; 1941 : 		if (pAct->dir >= pAct->delta) {

  007ba	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  007bd	89 43 78	 mov	 DWORD PTR [ebx+120], eax
$LN16@AnimDisp:
  007c0	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  007c3	3b 43 34	 cmp	 eax, DWORD PTR [ebx+52]
  007c6	0f 8c b4 03 00
	00		 jl	 $LN2@AnimDisp

; 1942 : 			// ?î??
; 1943 : 			if (pAct->dir == pAct->delta) {

  007cc	0f 85 fd 00 00
	00		 jne	 $LN104@AnimDisp

; 1944 : 				pAct->dir++;

  007d2	40		 inc	 eax

; 1945 : 				// î°????
; 1946 : 				char moji[256];
; 1947 : 				// î°????
; 1948 : 				moji[0] = NULL;

  007d3	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _moji$2[ebp], 0
  007da	89 43 30	 mov	 DWORD PTR [ebx+48], eax
  007dd	b8 3c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+316
  007e2	bb 09 00 00 00	 mov	 ebx, 9
  007e7	89 85 f0 fd ff
	ff		 mov	 DWORD PTR tv1880[ebp], eax
  007ed	0f 1f 00	 npad	 3
$LL20@AnimDisp:

; 1951 : 					// ?î?????????
; 1952 : 					if (ItemBuffer[i].mixFlag >= TRUE) {//ttom

  007f0	83 38 01	 cmp	 DWORD PTR [eax], 1
  007f3	7c 49		 jl	 SHORT $LN18@AnimDisp

; 1953 : 						char work[256];
; 1954 : 						// î°???î
; 1955 : 						sprintf(work, "%d|", i);

  007f5	53		 push	 ebx
  007f6	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _work$1[ebp]
  007fc	68 00 00 00 00	 push	 OFFSET ??_C@_03IFADCKOJ@?$CFd?$HM@
  00801	50		 push	 eax
  00802	e8 00 00 00 00	 call	 _sprintf

; 1956 : 						strcat(moji, work);

  00807	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _work$1[ebp]
  0080d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00810	8b f2		 mov	 esi, edx
$LL180@AnimDisp:
  00812	8a 02		 mov	 al, BYTE PTR [edx]
  00814	42		 inc	 edx
  00815	84 c0		 test	 al, al
  00817	75 f9		 jne	 SHORT $LL180@AnimDisp
  00819	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR _moji$2[ebp]
  0081f	2b d6		 sub	 edx, esi
  00821	4f		 dec	 edi
$LL181@AnimDisp:
  00822	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00825	47		 inc	 edi
  00826	84 c0		 test	 al, al
  00828	75 f8		 jne	 SHORT $LL181@AnimDisp
  0082a	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR tv1880[ebp]
  00830	8b ca		 mov	 ecx, edx
  00832	c1 e9 02	 shr	 ecx, 2
  00835	f3 a5		 rep movsd
  00837	8b ca		 mov	 ecx, edx
  00839	83 e1 03	 and	 ecx, 3
  0083c	f3 a4		 rep movsb
$LN18@AnimDisp:

; 1949 : 				// ?î???????????
; 1950 : 				for (i = MAX_ITEMSTART; i < MAX_ITEM; i++) {

  0083e	83 c0 20	 add	 eax, 32			; 00000020H
  00841	43		 inc	 ebx
  00842	89 85 f0 fd ff
	ff		 mov	 DWORD PTR tv1880[ebp], eax
  00848	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  0084d	7c a1		 jl	 SHORT $LL20@AnimDisp

; 1957 : 						// ??????
; 1958 : 					}//ttom
; 1959 : 				}
; 1960 : 				// ???|????????
; 1961 : 				moji[strlen(moji) - 1] = NULL;

  0084f	8b 9d ec fd ff
	ff		 mov	 ebx, DWORD PTR _pAct$GSCopy$1$[ebp]
  00855	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _moji$2[ebp]
  0085b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0085e	66 90		 npad	 2
$LL182@AnimDisp:
  00860	8a 01		 mov	 al, BYTE PTR [ecx]
  00862	41		 inc	 ecx
  00863	84 c0		 test	 al, al
  00865	75 f9		 jne	 SHORT $LL182@AnimDisp
  00867	2b ca		 sub	 ecx, edx
  00869	49		 dec	 ecx
  0086a	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00870	0f 83 8b 03 00
	00		 jae	 $LN144@AnimDisp

; 1962 : 
; 1963 : 				// ??????î¸???î????î?????
; 1964 : 				if (bNewServer)

  00876	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0087d	88 84 0d fc fe
	ff ff		 mov	 BYTE PTR _moji$2[ebp+ecx], al
  00884	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _moji$2[ebp]
  0088a	50		 push	 eax
  0088b	6a 00		 push	 0
  0088d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SelectWazaNo@@3HA ; SelectWazaNo
  00893	ff 35 00 00 00
	00		 push	 DWORD PTR ?mixPetNo@@3HA ; mixPetNo
  00899	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0089f	74 17		 je	 SHORT $LN106@AnimDisp

; 1965 : 					lssproto_PS_send(sockfd, mixPetNo, SelectWazaNo, 0, moji);

  008a1	e8 00 00 00 00	 call	 ?lssproto_PS_send@@YAXHHHHPAD@Z ; lssproto_PS_send

; 1968 : 				// î¢îî??????
; 1969 : 				ItemMixRecvFlag = TRUE;

  008a6	83 c4 14	 add	 esp, 20			; 00000014H
  008a9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ItemMixRecvFlag@@3HA, 1 ; ItemMixRecvFlag
  008b3	e9 c8 02 00 00	 jmp	 $LN2@AnimDisp
$LN106@AnimDisp:

; 1966 : 				else
; 1967 : 					old_lssproto_PS_send(sockfd, mixPetNo, SelectWazaNo, 0, moji);

  008b8	e8 00 00 00 00	 call	 ?old_lssproto_PS_send@@YAXHHHHPAD@Z ; old_lssproto_PS_send

; 1968 : 				// î¢îî??????
; 1969 : 				ItemMixRecvFlag = TRUE;

  008bd	83 c4 14	 add	 esp, 20			; 00000014H
  008c0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ItemMixRecvFlag@@3HA, 1 ; ItemMixRecvFlag
  008ca	e9 b1 02 00 00	 jmp	 $LN2@AnimDisp
$LN104@AnimDisp:

; 1970 : 			}
; 1971 : 
; 1972 : 			// î¢îî??????
; 1973 : 			if (ItemMixRecvFlag == FALSE) {

  008cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ItemMixRecvFlag@@3HA, 0 ; ItemMixRecvFlag
  008d6	0f 85 a4 02 00
	00		 jne	 $LN2@AnimDisp

; 1974 : 				// ????î¸??
; 1975 : 				play_se(115, 320, 240);

  008dc	68 f0 00 00 00	 push	 240			; 000000f0H
  008e1	68 40 01 00 00	 push	 320			; 00000140H
  008e6	6a 73		 push	 115			; 00000073H
  008e8	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  008ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  008f0	b8 3c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+316
  008f5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL23@AnimDisp:

; 1976 : 				// ?î???????
; 1977 : 				for (i = MAX_ITEMSTART; i < MAX_ITEM; i++) {
; 1978 : 					ItemBuffer[i].mixFlag = FALSE;

  00900	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00906	83 c0 20	 add	 eax, 32			; 00000020H
  00909	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  0090e	7c f0		 jl	 SHORT $LL23@AnimDisp

; 1979 : 				}
; 1980 : 				// ?????î®????
; 1981 : 				pAct->spd = 11;

  00910	c7 83 34 01 00
	00 0b 00 00 00	 mov	 DWORD PTR [ebx+308], 11	; 0000000bH

; 1982 : 				// ???????????
; 1983 : 				pAct->dy = 14 - pAct->spd;

  0091a	c7 43 2c 03 00
	00 00		 mov	 DWORD PTR [ebx+44], 3
$LN110@AnimDisp:

; 2097 : 		}
; 2098 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 2099 : 	}
; 2100 : 	break;
; 2101 : #endif
; 2102 : 	}
; 2103 : 
; 2104 : 	// ????î¡¡î ?î®?????
; 2105 : 	if (ANIM_DISP_PET_MAIN <= pAct->actNo && pAct->actNo <= ANIM_DISP_PET_DEAD) {

  00921	53		 push	 ebx
  00922	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00927	83 c4 04	 add	 esp, 4
  0092a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet2@@3PAUaction@@A, 0
  00934	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?ItemMixPetNo@@3HA, -1
  0093e	e9 3d 02 00 00	 jmp	 $LN2@AnimDisp
$LN93@AnimDisp:

; 1899 : 		else {
; 1900 : 			pAct->maxHp++;

  00943	40		 inc	 eax
  00944	89 83 80 00 00
	00		 mov	 DWORD PTR [ebx+128], eax

; 1901 : 			break;

  0094a	e9 31 02 00 00	 jmp	 $LN2@AnimDisp
$LN109@AnimDisp:

; 1984 : 
; 1985 : 				//JLWG æçç¹æ2
; 1986 : 				DeathAction(pAct);
; 1987 : 				pActPet2 = NULL;
; 1988 : 				ItemMixPetNo = -1;
; 1989 : 				//		pAct->actNo = ANIM_DISP_MIX_PET_END;
; 1990 : 			}
; 1991 : 		}
; 1992 : 
; 1993 : 		break;
; 1994 : 
; 1995 : 	case ANIM_DISP_MIX_PET_END:	// ?î????î¡¡??
; 1996 : 
; 1997 : 								// ?î«ä½îî
; 1998 : 		x = 750;
; 1999 : 		y = 240;
; 2000 : 
; 2001 : 		// ????
; 2002 : 		radar(pAct, &x, &y);

  0094f	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  00955	c7 85 f4 fd ff
	ff ee 02 00 00	 mov	 DWORD PTR _x$[ebp], 750	; 000002eeH
  0095f	50		 push	 eax
  00960	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _x$[ebp]
  00966	c7 85 f8 fd ff
	ff f0 00 00 00	 mov	 DWORD PTR _y$[ebp], 240	; 000000f0H
  00970	50		 push	 eax
  00971	53		 push	 ebx
  00972	e8 00 00 00 00	 call	 ?radar@@YAXPAUaction@@PAH1@Z ; radar

; 2003 : 
; 2004 : 		// î®?î±?
; 2005 : 		pAct->anim_no = ANIM_WALK;
; 2006 : 
; 2007 : 		// ?????????
; 2008 : 		if (y >= pAct->spd / 2) {

  00977	8b 83 34 01 00
	00		 mov	 eax, DWORD PTR [ebx+308]
  0097d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00980	99		 cdq
  00981	2b c2		 sub	 eax, edx
  00983	c7 83 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+332], 4
  0098d	d1 f8		 sar	 eax, 1
  0098f	39 85 f8 fd ff
	ff		 cmp	 DWORD PTR _y$[ebp], eax
  00995	7c 8a		 jl	 SHORT $LN110@AnimDisp

; 2009 : 			// ???îî
; 2010 : 			pAct->crs = x;
; 2011 : 
; 2012 : 			// ??îî??î«ä½î????????
; 2013 : 			if (pAct->level == FALSE) {
; 2014 : 				pAct->anim_ang = crs_change_tbl[pAct->crs];
; 2015 : 				// ????î??????
; 2016 : 				pAct->level = TRUE;
; 2017 : 			}
; 2018 : 
; 2019 : 			// ?î®??
; 2020 : 			gemini(pAct);
; 2021 : 			// ???????
; 2022 : 			pattern(pAct, pAct->dy, ANM_LOOP);
; 2023 : 		}

  00997	e9 e3 fb ff ff	 jmp	 $LN194@AnimDisp
$LN113@AnimDisp:

; 2024 : 		// ?????
; 2025 : 		else {
; 2026 : 			// ??????î
; 2027 : 			DeathAction(pAct);
; 2028 : 			pActPet2 = NULL;
; 2029 : 			// ?î???î±????
; 2030 : 			ItemMixPetNo = -1;
; 2031 : 		}
; 2032 : 		break;
; 2033 : #ifdef _AniCrossFrame	  // Syu ADD å¨ç»å±æ¸¸è¿ç»é¢çç©
; 2034 : 	case ANIM_DISP_CROSSFRAME:
; 2035 : 	{
; 2036 : 		extern bool delFlag;
; 2037 : 		extern bool flag22;
; 2038 : 		pAct->anim_no = ANIM_WALK;

  0099c	c7 83 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+332], 4

; 2039 : 		pAct->anim_ang = 2;
; 2040 : 		pAct->crs = crs_change_tbl2[pAct->anim_ang];
; 2041 : 		//ç§»å¨éåº¦
; 2042 : 		pAct->spd = 1;
; 2043 : 		//æ¾ç¤ºå±çº§
; 2044 : 		pAct->dispPrio = DISP_PRIO_JIKI;
; 2045 : 		if (pAct->dx % 5 == 0) {

  009a6	b9 05 00 00 00	 mov	 ecx, 5
  009ab	c7 83 54 01 00
	00 02 00 00 00	 mov	 DWORD PTR [ebx+340], 2
  009b5	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA+2
  009bc	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  009c2	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  009c5	99		 cdq
  009c6	f7 f9		 idiv	 ecx
  009c8	c7 83 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+308], 1
  009d2	c6 43 15 1e	 mov	 BYTE PTR [ebx+21], 30	; 0000001eH
  009d6	85 d2		 test	 edx, edx
  009d8	75 0c		 jne	 SHORT $LN115@AnimDisp

; 2046 : 			if (pAct->dy >= 2) pAct->dy--;

  009da	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  009dd	83 f8 02	 cmp	 eax, 2
  009e0	7c 04		 jl	 SHORT $LN115@AnimDisp
  009e2	48		 dec	 eax
  009e3	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN115@AnimDisp:

; 2047 : 		}
; 2048 : 		gemini(pAct);

  009e6	53		 push	 ebx
  009e7	e8 00 00 00 00	 call	 ?gemini@@YAXPAUaction@@@Z ; gemini

; 2049 : 		//åç§æ¹åä½ç§»
; 2050 : 		if (((pAct->anim_chr_no > 101511) && (pAct->anim_chr_no < 101516)) ||
; 2051 : 			(pAct->anim_chr_no == 101517) || (pAct->anim_chr_no == 101519))

  009ec	8b 83 44 01 00
	00		 mov	 eax, DWORD PTR [ebx+324]
  009f2	83 c4 04	 add	 esp, 4
  009f5	3d 87 8c 01 00	 cmp	 eax, 101511		; 00018c87H
  009fa	7e 0b		 jle	 SHORT $LN119@AnimDisp
  009fc	3d 8c 8c 01 00	 cmp	 eax, 101516		; 00018c8cH
  00a01	0f 8c d8 00 00
	00		 jl	 $LN118@AnimDisp
$LN119@AnimDisp:
  00a07	3d 8d 8c 01 00	 cmp	 eax, 101517		; 00018c8dH
  00a0c	0f 84 cd 00 00
	00		 je	 $LN118@AnimDisp
  00a12	3d 8f 8c 01 00	 cmp	 eax, 101519		; 00018c8fH
  00a17	0f 84 c2 00 00
	00		 je	 $LN118@AnimDisp

; 2059 : 				pAct->y++;
; 2060 : 			else
; 2061 : 				pAct->y = pAct->y;
; 2062 : 		}
; 2063 : 		else if ((pAct->anim_chr_no == 101516) || (pAct->anim_chr_no == 101518))

  00a1d	3d 8c 8c 01 00	 cmp	 eax, 101516		; 00018c8cH
  00a22	74 69		 je	 SHORT $LN126@AnimDisp
  00a24	3d 8e 8c 01 00	 cmp	 eax, 101518		; 00018c8eH
  00a29	74 62		 je	 SHORT $LN126@AnimDisp

; 2075 : 		else if ((pAct->anim_chr_no == 101520) || (pAct->anim_chr_no == 101522) ||

  00a2b	3d 90 8c 01 00	 cmp	 eax, 101520		; 00018c90H
  00a30	74 4d		 je	 SHORT $LN133@AnimDisp
  00a32	3d 92 8c 01 00	 cmp	 eax, 101522		; 00018c92H
  00a37	74 46		 je	 SHORT $LN133@AnimDisp
  00a39	3d d9 8c 01 00	 cmp	 eax, 101593		; 00018cd9H
  00a3e	7f 07		 jg	 SHORT $LN131@AnimDisp
  00a40	3d d4 8c 01 00	 cmp	 eax, 101588		; 00018cd4H
  00a45	7d 38		 jge	 SHORT $LN133@AnimDisp
$LN131@AnimDisp:

; 2081 : 		else if ((pAct->anim_chr_no == 101521) || (pAct->anim_chr_no == 101523) ||

  00a47	3d 91 8c 01 00	 cmp	 eax, 101521		; 00018c91H
  00a4c	74 23		 je	 SHORT $LN136@AnimDisp
  00a4e	3d 93 8c 01 00	 cmp	 eax, 101523		; 00018c93H
  00a53	74 1c		 je	 SHORT $LN136@AnimDisp
  00a55	3d d3 8c 01 00	 cmp	 eax, 101587		; 00018cd3H
  00a5a	7f 07		 jg	 SHORT $LN134@AnimDisp
  00a5c	3d ce 8c 01 00	 cmp	 eax, 101582		; 00018cceH
  00a61	7d 0e		 jge	 SHORT $LN136@AnimDisp
$LN134@AnimDisp:

; 2087 : 		else
; 2088 : 		{
; 2089 : 			pAct->x++;

  00a63	ff 43 18	 inc	 DWORD PTR [ebx+24]

; 2090 : 			pAct->y++;

  00a66	ff 43 1c	 inc	 DWORD PTR [ebx+28]
  00a69	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00a6c	e9 c2 00 00 00	 jmp	 $LN122@AnimDisp
$LN136@AnimDisp:

; 2082 : 			(pAct->anim_chr_no <= 101587 && pAct->anim_chr_no >= 101582)) //å·¦ä¸
; 2083 : 		{
; 2084 : 			pAct->x--;

  00a71	ff 4b 18	 dec	 DWORD PTR [ebx+24]

; 2085 : 			pAct->y--;

  00a74	ff 4b 1c	 dec	 DWORD PTR [ebx+28]
  00a77	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 2086 : 		}

  00a7a	e9 b4 00 00 00	 jmp	 $LN122@AnimDisp
$LN133@AnimDisp:

; 2076 : 			(pAct->anim_chr_no <= 101593 && pAct->anim_chr_no >= 101588)) //å³ä¸
; 2077 : 		{
; 2078 : 			pAct->x++;

  00a7f	ff 43 18	 inc	 DWORD PTR [ebx+24]

; 2079 : 			pAct->y--;

  00a82	ff 4b 1c	 dec	 DWORD PTR [ebx+28]
  00a85	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 2080 : 		}

  00a88	e9 a6 00 00 00	 jmp	 $LN122@AnimDisp
$LN126@AnimDisp:

; 2064 : 		{
; 2065 : 			pAct->x++;

  00a8d	ff 43 18	 inc	 DWORD PTR [ebx+24]

; 2066 : 			if (pAct->y == 0)

  00a90	83 7b 1c 00	 cmp	 DWORD PTR [ebx+28], 0
  00a94	75 07		 jne	 SHORT $LN127@AnimDisp

; 2067 : 				UpDownflag = 4;

  00a96	b9 04 00 00 00	 mov	 ecx, 4

; 2068 : 			if (UpDownflag == 0)

  00a9b	eb 32		 jmp	 SHORT $LN187@AnimDisp
$LN127@AnimDisp:
  00a9d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?UpDownflag@@3HA ; UpDownflag
  00aa3	85 c9		 test	 ecx, ecx
  00aa5	75 2e		 jne	 SHORT $LN128@AnimDisp

; 2069 : 				UpDownflag = RAND(1, 5);

  00aa7	e8 00 00 00 00	 call	 _rand
  00aac	b9 01 00 00 00	 mov	 ecx, 1
  00ab1	66 0f 6e c0	 movd	 xmm0, eax
  00ab5	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00ab9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c014000000000000
  00ac1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00000000000000
  00ac9	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00acd	2b c8		 sub	 ecx, eax
$LN187@AnimDisp:

; 2070 : 			if (UpDownflag > 3)

  00acf	89 0d 00 00 00
	00		 mov	 DWORD PTR ?UpDownflag@@3HA, ecx ; UpDownflag
$LN128@AnimDisp:
  00ad5	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00ad8	83 f9 03	 cmp	 ecx, 3
  00adb	7e 53		 jle	 SHORT $LN129@AnimDisp

; 2071 : 				pAct->y++;
; 2072 : 			else
; 2073 : 				pAct->y = pAct->y;
; 2074 : 		}

  00add	eb 50		 jmp	 SHORT $LN195@AnimDisp
$LN118@AnimDisp:

; 2052 : 		{
; 2053 : 			pAct->x--;

  00adf	ff 4b 18	 dec	 DWORD PTR [ebx+24]

; 2054 : 			if (pAct->y == 0)

  00ae2	83 7b 1c 00	 cmp	 DWORD PTR [ebx+28], 0
  00ae6	75 07		 jne	 SHORT $LN120@AnimDisp

; 2055 : 				UpDownflag = 4;

  00ae8	b9 04 00 00 00	 mov	 ecx, 4

; 2056 : 			if (UpDownflag == 0)

  00aed	eb 32		 jmp	 SHORT $LN188@AnimDisp
$LN120@AnimDisp:
  00aef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?UpDownflag@@3HA ; UpDownflag
  00af5	85 c9		 test	 ecx, ecx
  00af7	75 2e		 jne	 SHORT $LN121@AnimDisp

; 2057 : 				UpDownflag = RAND(1, 5);

  00af9	e8 00 00 00 00	 call	 _rand
  00afe	b9 01 00 00 00	 mov	 ecx, 1
  00b03	66 0f 6e c0	 movd	 xmm0, eax
  00b07	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00b0b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c014000000000000
  00b13	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00000000000000
  00b1b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00b1f	2b c8		 sub	 ecx, eax
$LN188@AnimDisp:

; 2058 : 			if (UpDownflag > 3)

  00b21	89 0d 00 00 00
	00		 mov	 DWORD PTR ?UpDownflag@@3HA, ecx ; UpDownflag
$LN121@AnimDisp:
  00b27	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00b2a	83 f9 03	 cmp	 ecx, 3
  00b2d	7e 04		 jle	 SHORT $LN122@AnimDisp
$LN195@AnimDisp:

; 2091 : 		}
; 2092 : 		//è¶åºè§å¹èå´æ¶ç­
; 2093 : 		if ((pAct->x <= -100 || pAct->y <= -100 || pAct->x >= 740 || pAct->y >= 580) && delFlag == true && flag22 == true)

  00b2f	40		 inc	 eax
$LN129@AnimDisp:
  00b30	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
$LN122@AnimDisp:
  00b33	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00b36	83 f9 9c	 cmp	 ecx, -100		; ffffff9cH
  00b39	7e 14		 jle	 SHORT $LN138@AnimDisp
  00b3b	83 f8 9c	 cmp	 eax, -100		; ffffff9cH
  00b3e	7e 0f		 jle	 SHORT $LN138@AnimDisp
  00b40	81 f9 e4 02 00
	00		 cmp	 ecx, 740		; 000002e4H
  00b46	7d 07		 jge	 SHORT $LN138@AnimDisp
  00b48	3d 44 02 00 00	 cmp	 eax, 580		; 00000244H
  00b4d	7c 23		 jl	 SHORT $LN137@AnimDisp
$LN138@AnimDisp:
  00b4f	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?delFlag@@3_NA, 1 ; delFlag
  00b56	75 1a		 jne	 SHORT $LN137@AnimDisp
  00b58	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?flag22@@3_NA, 1 ; flag22
  00b5f	75 11		 jne	 SHORT $LN137@AnimDisp

; 2094 : 		{
; 2095 : 			flag22 = false;

  00b61	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?flag22@@3_NA, 0 ; flag22

; 2096 : 			UpDownflag = 0;

  00b68	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?UpDownflag@@3HA, 0 ; UpDownflag
$LN137@AnimDisp:

; 2097 : 		}
; 2098 : 		pattern(pAct, pAct->dy, ANM_LOOP);
; 2099 : 	}
; 2100 : 	break;
; 2101 : #endif
; 2102 : 	}
; 2103 : 
; 2104 : 	// ????î¡¡î ?î®?????
; 2105 : 	if (ANIM_DISP_PET_MAIN <= pAct->actNo && pAct->actNo <= ANIM_DISP_PET_DEAD) {

  00b72	6a 00		 push	 0
  00b74	ff 73 2c	 push	 DWORD PTR [ebx+44]
$LN185@AnimDisp:
  00b77	53		 push	 ebx
  00b78	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00b7d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@AnimDisp:
  00b80	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [ebx+172]
  00b86	83 e8 03	 sub	 eax, 3
  00b89	83 f8 06	 cmp	 eax, 6
  00b8c	77 62		 ja	 SHORT $LN140@AnimDisp

; 2106 : 		// ????????????
; 2107 : 		if (pAct->hitDispNo == HitDispNo &&

  00b8e	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  00b91	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00b97	75 57		 jne	 SHORT $LN140@AnimDisp
  00b99	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  00ba0	74 4e		 je	 SHORT $LN140@AnimDisp

; 2108 : 			mouse.autoState & MOUSE_LEFT_CRICK) {
; 2109 : 			// ?î®???
; 2110 : 			pAct->actNo = ANIM_DISP_PET_WALK;
; 2111 : 			// îµ?????
; 2112 : 			pAct->anim_ang = Rnd(0, 7);

  00ba2	6a 07		 push	 7
  00ba4	6a 00		 push	 0
  00ba6	c7 83 ac 00 00
	00 04 00 00 00	 mov	 DWORD PTR [ebx+172], 4
  00bb0	e8 00 00 00 00	 call	 ?Rnd@@YAHHH@Z		; Rnd

; 2113 : 			// ???îî
; 2114 : 			pAct->crs = crs_change_tbl2[pAct->anim_ang];
; 2115 : 			// ?????î®????
; 2116 : 			pAct->spd = 15;
; 2117 : 
; 2118 : 			pAct->dy = 2;
; 2119 : 			play_se(217, 320, 240); // ?????

  00bb5	68 f0 00 00 00	 push	 240			; 000000f0H
  00bba	89 83 54 01 00
	00		 mov	 DWORD PTR [ebx+340], eax
  00bc0	68 40 01 00 00	 push	 320			; 00000140H
  00bc5	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?crs_change_tbl2@@3PAEA[eax]
  00bcc	68 d9 00 00 00	 push	 217			; 000000d9H
  00bd1	89 83 38 01 00
	00		 mov	 DWORD PTR [ebx+312], eax
  00bd7	c7 83 34 01 00
	00 0f 00 00 00	 mov	 DWORD PTR [ebx+308], 15	; 0000000fH
  00be1	c7 43 2c 02 00
	00 00		 mov	 DWORD PTR [ebx+44], 2
  00be8	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00bed	83 c4 14	 add	 esp, 20			; 00000014H
$LN140@AnimDisp:

; 2120 : 		}
; 2121 : 	}
; 2122 : }

  00bf0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bf3	5f		 pop	 edi
  00bf4	5e		 pop	 esi
  00bf5	33 cd		 xor	 ecx, ebp
  00bf7	5b		 pop	 ebx
  00bf8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bfd	8b e5		 mov	 esp, ebp
  00bff	5d		 pop	 ebp
  00c00	c3		 ret	 0
$LN144@AnimDisp:

; 1957 : 						// ??????
; 1958 : 					}//ttom
; 1959 : 				}
; 1960 : 				// ???|????????
; 1961 : 				moji[strlen(moji) - 1] = NULL;

  00c01	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN184@AnimDisp:
  00c06	66 90		 npad	 2
$LN178@AnimDisp:

; 2120 : 		}
; 2121 : 	}
; 2122 : }

  00c08	00 00 00 00	 DD	 $LN24@AnimDisp
  00c0c	00 00 00 00	 DD	 $LN27@AnimDisp
  00c10	00 00 00 00	 DD	 $LN35@AnimDisp
  00c14	00 00 00 00	 DD	 $LN44@AnimDisp
  00c18	00 00 00 00	 DD	 $LN47@AnimDisp
  00c1c	00 00 00 00	 DD	 $LN57@AnimDisp
  00c20	00 00 00 00	 DD	 $LN59@AnimDisp
  00c24	00 00 00 00	 DD	 $LN63@AnimDisp
  00c28	00 00 00 00	 DD	 $LN66@AnimDisp
  00c2c	00 00 00 00	 DD	 $LN70@AnimDisp
  00c30	00 00 00 00	 DD	 $LN77@AnimDisp
  00c34	00 00 00 00	 DD	 $LN74@AnimDisp
  00c38	00 00 00 00	 DD	 $LN77@AnimDisp
  00c3c	00 00 00 00	 DD	 $LN78@AnimDisp
  00c40	00 00 00 00	 DD	 $LN80@AnimDisp
  00c44	00 00 00 00	 DD	 $LN92@AnimDisp
  00c48	00 00 00 00	 DD	 $LN2@AnimDisp
  00c4c	00 00 00 00	 DD	 $LN2@AnimDisp
  00c50	00 00 00 00	 DD	 $LN113@AnimDisp
  00c54	00 00 00 00	 DD	 $LN109@AnimDisp
$LN179@AnimDisp:
  00c58	00 00 00 00	 DD	 $LN95@AnimDisp
  00c5c	00 00 00 00	 DD	 $LN101@AnimDisp
  00c60	00 00 00 00	 DD	 $LN101@AnimDisp
  00c64	00 00 00 00	 DD	 $LN95@AnimDisp
?AnimDisp@@YAXPAUaction@@@Z ENDP			; AnimDisp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?WindowDisp@@YAXPAUaction@@@Z
_TEXT	SEGMENT
_j$1$ = -8						; size = 4
_y$1$ = -4						; size = 4
_pAct$ = 8						; size = 4
?WindowDisp@@YAXPAUaction@@@Z PROC			; WindowDisp, COMDAT

; 1370 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1371 : 	WINDOW_DISP *pYobi = (WINDOW_DISP *)pAct->pYobi;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pAct$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 1372 : 	int i, j;
; 1373 : 	int x = pAct->x + 32, y = pAct->y + 24;

  0000b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000e	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  00011	83 c0 18	 add	 eax, 24			; 00000018H
  00014	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00017	83 c7 20	 add	 edi, 32			; 00000020H
  0001a	89 45 fc	 mov	 DWORD PTR _y$1$[ebp], eax

; 1374 : 	switch (pAct->actNo) {

  0001d	8b 81 ac 00 00
	00		 mov	 eax, DWORD PTR [ecx+172]
  00023	83 f8 03	 cmp	 eax, 3
  00026	0f 87 1a 02 00
	00		 ja	 $LN2@WindowDisp
  0002c	53		 push	 ebx
  0002d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@WindowDisp[eax*4]
$LN16@WindowDisp:

; 1375 : 
; 1376 : 	case 0:
; 1377 : 		StockBoxDispBuffer(pYobi->mx - pYobi->nowX,

  00034	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	0f b6 46 38	 movzx	 eax, BYTE PTR [esi+56]
  0003e	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00041	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00044	6a 00		 push	 0
  00046	6a 00		 push	 0
  00048	50		 push	 eax
  00049	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0004c	2b f9		 sub	 edi, ecx
  0004e	50		 push	 eax
  0004f	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  00052	2b da		 sub	 ebx, edx
  00054	50		 push	 eax
  00055	57		 push	 edi
  00056	53		 push	 ebx
  00057	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 1378 : 			pYobi->my - pYobi->nowY,
; 1379 : 			pYobi->mx + pYobi->nowX,
; 1380 : 			pYobi->my + pYobi->nowY,
; 1381 : 			pYobi->boxDispPrio, SYSTEM_PAL_BLACK, 0);
; 1382 : 		pYobi->nowX += pAct->dx;

  0005c	8b 55 08	 mov	 edx, DWORD PTR _pAct$[ebp]
  0005f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00062	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00065	01 46 1c	 add	 DWORD PTR [esi+28], eax

; 1383 : 		pYobi->nowY += pAct->dy;

  00068	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0006b	01 46 20	 add	 DWORD PTR [esi+32], eax

; 1384 : 		pYobi->cnt++;

  0006e	ff 46 24	 inc	 DWORD PTR [esi+36]
  00071	8b 46 24	 mov	 eax, DWORD PTR [esi+36]

; 1385 : 		if (pYobi->cnt >= WINDOW_CREATE_FRAME) {

  00074	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?WINDOW_CREATE_FRAME@@3HA ; WINDOW_CREATE_FRAME
  0007a	0f 8c c5 01 00
	00		 jl	 $LN65@WindowDisp

; 1386 : 			if (pYobi->wndType == -1) pAct->actNo = 1;

  00080	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00083	83 f9 ff	 cmp	 ecx, -1
  00086	75 11		 jne	 SHORT $LN18@WindowDisp
  00088	5b		 pop	 ebx
  00089	5f		 pop	 edi
  0008a	c7 82 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+172], 1

; 1478 : 		break;
; 1479 : 	}
; 1480 : }

  00094	5e		 pop	 esi
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN18@WindowDisp:

; 1387 : 			else
; 1388 : 				if (pYobi->wndType == -2) pAct->actNo = 3;

  00099	33 c0		 xor	 eax, eax
  0009b	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0009e	5b		 pop	 ebx
  0009f	0f 94 c0	 sete	 al
  000a2	83 c0 02	 add	 eax, 2
  000a5	5f		 pop	 edi
  000a6	89 82 ac 00 00
	00		 mov	 DWORD PTR [edx+172], eax

; 1478 : 		break;
; 1479 : 	}
; 1480 : }

  000ac	5e		 pop	 esi
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN23@WindowDisp:

; 1389 : 				else pAct->actNo = 2;
; 1390 : 		}
; 1391 : 		break;
; 1392 : 	case 1:
; 1393 : 		pAct->hp = 1;
; 1394 : 		break;
; 1395 : 	case 2:
; 1396 : 		for (j = 0; j < pYobi->sizeY; j++) {

  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	33 db		 xor	 ebx, ebx
  000b6	89 5d f8	 mov	 DWORD PTR _j$1$[ebp], ebx
  000b9	85 c0		 test	 eax, eax
  000bb	0f 8e e7 00 00
	00		 jle	 $LN5@WindowDisp
$LL6@WindowDisp:

; 1397 : 			if (j == 0) {

  000c1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c3	85 db		 test	 ebx, ebx
  000c5	75 3f		 jne	 SHORT $LN24@WindowDisp

; 1398 : 				for (i = 0; i < pYobi->sizeX; i++) {

  000c7	85 c9		 test	 ecx, ecx
  000c9	0f 8e ba 00 00
	00		 jle	 $LN14@WindowDisp
  000cf	90		 npad	 1
$LL9@WindowDisp:

; 1399 : 					if (i == 0) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 0, pYobi->hitFlag);

  000d0	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  000d3	85 db		 test	 ebx, ebx
  000d5	74 0d		 je	 SHORT $LN29@WindowDisp

; 1400 : 					else if (i == pYobi->sizeX - 1) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 2, pYobi->hitFlag);

  000d7	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  000da	3b d8		 cmp	 ebx, eax
  000dc	75 05		 jne	 SHORT $LN28@WindowDisp
  000de	83 c2 02	 add	 edx, 2
  000e1	eb 01		 jmp	 SHORT $LN29@WindowDisp
$LN28@WindowDisp:

; 1401 : #ifdef _READ16BITBMP
; 1402 : 					else if (g_bUseAlpha) {
; 1403 : 						if (pYobi->wndType == CG_WND_G_0) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 1, pYobi->hitFlag);
; 1404 : 						else if (pYobi->wndType == CG_WND2_G_0)StockDispBuffer(x, y + 1, DISP_PRIO_MENU, pYobi->wndType + 1, pYobi->hitFlag);
; 1405 : 						else StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 1, pYobi->hitFlag);
; 1406 : 					}
; 1407 : #endif
; 1408 : 					else StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 1, pYobi->hitFlag);

  000e3	42		 inc	 edx
$LN29@WindowDisp:

; 1409 : 					x += 64; // ?î³???

  000e4	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000e7	50		 push	 eax
  000e8	52		 push	 edx
  000e9	6a 68		 push	 104			; 00000068H
  000eb	ff 75 fc	 push	 DWORD PTR _y$1$[ebp]
  000ee	57		 push	 edi
  000ef	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  000f4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f6	43		 inc	 ebx
  000f7	83 c4 14	 add	 esp, 20			; 00000014H
  000fa	83 c7 40	 add	 edi, 64			; 00000040H
  000fd	3b d9		 cmp	 ebx, ecx
  000ff	7c cf		 jl	 SHORT $LL9@WindowDisp

; 1410 : 				}
; 1411 : 			}

  00101	e9 83 00 00 00	 jmp	 $LN14@WindowDisp
$LN24@WindowDisp:

; 1412 : 			else
; 1413 : 				// ?î¸î
; 1414 : 				if (j == pYobi->sizeY - 1) {

  00106	48		 dec	 eax
  00107	3b d8		 cmp	 ebx, eax
  00109	75 40		 jne	 SHORT $LN30@WindowDisp

; 1415 : 					for (i = 0; i < pYobi->sizeX; i++) {

  0010b	33 db		 xor	 ebx, ebx
  0010d	85 c9		 test	 ecx, ecx
  0010f	7e 78		 jle	 SHORT $LN14@WindowDisp
$LL12@WindowDisp:

; 1416 : 						// ?î 
; 1417 : 						if (i == 0) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 6, pYobi->hitFlag);

  00111	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00114	85 db		 test	 ebx, ebx
  00116	75 05		 jne	 SHORT $LN32@WindowDisp
  00118	8d 4b 06	 lea	 ecx, DWORD PTR [ebx+6]
  0011b	eb 0d		 jmp	 SHORT $LN34@WindowDisp
$LN32@WindowDisp:

; 1418 : 						// ?î 
; 1419 : 						else if (i == pYobi->sizeX - 1) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 8, pYobi->hitFlag);

  0011d	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00120	33 c9		 xor	 ecx, ecx
  00122	3b d8		 cmp	 ebx, eax
  00124	0f 94 c1	 sete	 cl
  00127	83 c1 07	 add	 ecx, 7
$LN34@WindowDisp:

; 1420 : 						// î©??
; 1421 : #ifdef _READ16BITBMP
; 1422 : 						else if (g_bUseAlpha) {
; 1423 : 							if (pYobi->wndType == CG_WND_G_0) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 7, pYobi->hitFlag);
; 1424 : 							else if (pYobi->wndType == CG_WND2_G_0) StockDispBuffer(x, y - 1, DISP_PRIO_MENU, pYobi->wndType + 7, pYobi->hitFlag);
; 1425 : 							else StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 7, pYobi->hitFlag);
; 1426 : 						}
; 1427 : #endif
; 1428 : 						else StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 7, pYobi->hitFlag);
; 1429 : 						x += 64; // ?î³???

  0012a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0012d	03 ca		 add	 ecx, edx
  0012f	50		 push	 eax
  00130	51		 push	 ecx
  00131	6a 68		 push	 104			; 00000068H
  00133	ff 75 fc	 push	 DWORD PTR _y$1$[ebp]
  00136	57		 push	 edi
  00137	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0013c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0013e	43		 inc	 ebx
  0013f	83 c4 14	 add	 esp, 20			; 00000014H
  00142	83 c7 40	 add	 edi, 64			; 00000040H
  00145	3b d9		 cmp	 ebx, ecx
  00147	7c c8		 jl	 SHORT $LL12@WindowDisp
  00149	eb 3e		 jmp	 SHORT $LN14@WindowDisp
$LN30@WindowDisp:

; 1430 : 					}
; 1431 : 				}
; 1432 : 				else
; 1433 : 					// î©??î¸î
; 1434 : 					for (i = 0; i < pYobi->sizeX; i++) {

  0014b	33 db		 xor	 ebx, ebx
  0014d	85 c9		 test	 ecx, ecx
  0014f	7e 38		 jle	 SHORT $LN14@WindowDisp
$LL15@WindowDisp:

; 1435 : 						// ?î 
; 1436 : 						if (i == 0) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 3, pYobi->hitFlag);

  00151	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00154	85 db		 test	 ebx, ebx
  00156	75 05		 jne	 SHORT $LN36@WindowDisp
  00158	8d 4b 03	 lea	 ecx, DWORD PTR [ebx+3]
  0015b	eb 0d		 jmp	 SHORT $LN38@WindowDisp
$LN36@WindowDisp:

; 1437 : 						// ?î 
; 1438 : #ifdef _READ16BITBMP
; 1439 : 						else if (g_bUseAlpha) {
; 1440 : 							if (i == pYobi->sizeX - 1) {
; 1441 : 								if (pYobi->wndType == CG_WND_G_0) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 5, pYobi->hitFlag);
; 1442 : 								else if (pYobi->wndType == CG_WND2_G_0) StockDispBuffer(x - 1, y, DISP_PRIO_MENU, pYobi->wndType + 5, pYobi->hitFlag);
; 1443 : 							}
; 1444 : 							else if (i == pYobi->sizeX - 1) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 5, pYobi->hitFlag);
; 1445 : 							else StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 4, pYobi->hitFlag);
; 1446 : 						}
; 1447 : #endif
; 1448 : 						else if (i == pYobi->sizeX - 1) StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 5, pYobi->hitFlag);

  0015d	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00160	33 c9		 xor	 ecx, ecx
  00162	3b d8		 cmp	 ebx, eax
  00164	0f 94 c1	 sete	 cl
  00167	83 c1 04	 add	 ecx, 4
$LN38@WindowDisp:

; 1449 : 						// î©??
; 1450 : 						else StockDispBuffer(x, y, DISP_PRIO_MENU, pYobi->wndType + 4, pYobi->hitFlag);
; 1451 : 						x += 64; // ?î³???

  0016a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0016d	03 ca		 add	 ecx, edx
  0016f	50		 push	 eax
  00170	51		 push	 ecx
  00171	6a 68		 push	 104			; 00000068H
  00173	ff 75 fc	 push	 DWORD PTR _y$1$[ebp]
  00176	57		 push	 edi
  00177	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0017c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0017e	43		 inc	 ebx
  0017f	83 c4 14	 add	 esp, 20			; 00000014H
  00182	83 c7 40	 add	 edi, 64			; 00000040H
  00185	3b d9		 cmp	 ebx, ecx
  00187	7c c8		 jl	 SHORT $LL15@WindowDisp
$LN14@WindowDisp:

; 1452 : 					}
; 1453 : 			x = pAct->x + 32; 	// ?î ???

  00189	8b 45 08	 mov	 eax, DWORD PTR _pAct$[ebp]
  0018c	8b 5d f8	 mov	 ebx, DWORD PTR _j$1$[ebp]

; 1454 : 			y += 48; 		// ?î³???

  0018f	83 45 fc 30	 add	 DWORD PTR _y$1$[ebp], 48 ; 00000030H
  00193	43		 inc	 ebx
  00194	89 5d f8	 mov	 DWORD PTR _j$1$[ebp], ebx
  00197	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  0019a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019d	83 c7 20	 add	 edi, 32			; 00000020H
  001a0	3b d8		 cmp	 ebx, eax
  001a2	0f 8c 19 ff ff
	ff		 jl	 $LL6@WindowDisp
$LN5@WindowDisp:

; 1455 : 		}
; 1456 : 		// ????î¼?
; 1457 : 		if (pYobi->titleNo != 0) StockDispBuffer(pYobi->titleX, pYobi->titleY, DISP_PRIO_IME3, pYobi->titleNo, pYobi->hitFlag);

  001a8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ab	85 c0		 test	 eax, eax
  001ad	74 14		 je	 SHORT $LN40@WindowDisp
  001af	ff 76 2c	 push	 DWORD PTR [esi+44]
  001b2	50		 push	 eax
  001b3	6a 69		 push	 105			; 00000069H
  001b5	ff 76 10	 push	 DWORD PTR [esi+16]
  001b8	ff 76 0c	 push	 DWORD PTR [esi+12]
  001bb	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  001c0	83 c4 14	 add	 esp, 20			; 00000014H
$LN40@WindowDisp:

; 1458 : 		pAct->hp = 1;

  001c3	8b 45 08	 mov	 eax, DWORD PTR _pAct$[ebp]
  001c6	5b		 pop	 ebx
  001c7	5f		 pop	 edi

; 1478 : 		break;
; 1479 : 	}
; 1480 : }

  001c8	5e		 pop	 esi
  001c9	c7 40 78 01 00
	00 00		 mov	 DWORD PTR [eax+120], 1
  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c3		 ret	 0
$LN41@WindowDisp:

; 1459 : 		break;
; 1460 : 	case 3:	// ?î?????
; 1461 : 			// ????????
; 1462 : 		if (mouse.onceState & MOUSE_LEFT_CRICK) {

  001d4	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  001db	74 22		 je	 SHORT $LN44@WindowDisp

; 1463 : 			// ????
; 1464 : 			if (HitDispNo == pYobi->yesDispNo) {

  001dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  001e2	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  001e5	75 0c		 jne	 SHORT $LN43@WindowDisp

; 1465 : 				pYobi->yesNoResult = TRUE;

  001e7	c7 46 3c 01 00
	00 00		 mov	 DWORD PTR [esi+60], 1
  001ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
$LN43@WindowDisp:

; 1466 : 			}
; 1467 : 			// ?????
; 1468 : 			if (HitDispNo == pYobi->noDispNo) {

  001f3	3b 46 34	 cmp	 eax, DWORD PTR [esi+52]
  001f6	75 07		 jne	 SHORT $LN44@WindowDisp

; 1469 : 				pYobi->yesNoResult = FALSE;

  001f8	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN44@WindowDisp:

; 1470 : 			}
; 1471 : 		}
; 1472 : 		// ?î?????????î¸î
; 1473 : 		StockDispBuffer(pYobi->mx, pYobi->my, DISP_PRIO_YES_NO_WND, CG_COMMON_WIN_YORO, 1);

  001ff	6a 01		 push	 1
  00201	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_COMMON_WIN_YORO@@3HA ; CG_COMMON_WIN_YORO
  00207	6a 6d		 push	 109			; 0000006dH
  00209	ff 76 18	 push	 DWORD PTR [esi+24]
  0020c	ff 76 14	 push	 DWORD PTR [esi+20]
  0020f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 1474 : 		// ?????
; 1475 : 		pYobi->yesDispNo = StockDispBuffer(pYobi->mx, pYobi->my, DISP_PRIO_YES_NO_BTN, CG_COMMON_YES_BTN, 2);

  00214	6a 02		 push	 2
  00216	68 eb 65 00 00	 push	 26091			; 000065ebH
  0021b	6a 6e		 push	 110			; 0000006eH
  0021d	ff 76 18	 push	 DWORD PTR [esi+24]
  00220	ff 76 14	 push	 DWORD PTR [esi+20]
  00223	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 1476 : 		// ??????
; 1477 : 		pYobi->noDispNo = StockDispBuffer(pYobi->mx, pYobi->my, DISP_PRIO_YES_NO_BTN, CG_COMMON_NO_BTN, 2);

  00228	6a 02		 push	 2
  0022a	68 ec 65 00 00	 push	 26092			; 000065ecH
  0022f	6a 6e		 push	 110			; 0000006eH
  00231	ff 76 18	 push	 DWORD PTR [esi+24]
  00234	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00237	ff 76 14	 push	 DWORD PTR [esi+20]
  0023a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0023f	83 c4 3c	 add	 esp, 60			; 0000003cH
  00242	89 46 34	 mov	 DWORD PTR [esi+52], eax
$LN65@WindowDisp:
  00245	5b		 pop	 ebx
$LN2@WindowDisp:
  00246	5f		 pop	 edi

; 1478 : 		break;
; 1479 : 	}
; 1480 : }

  00247	5e		 pop	 esi
  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c3		 ret	 0
$LN64@WindowDisp:
  0024c	00 00 00 00	 DD	 $LN16@WindowDisp
  00250	00 00 00 00	 DD	 $LN40@WindowDisp
  00254	00 00 00 00	 DD	 $LN23@WindowDisp
  00258	00 00 00 00	 DD	 $LN41@WindowDisp
?WindowDisp@@YAXPAUaction@@@Z ENDP			; WindowDisp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?LockAndOkfunction@@YAXXZ
_TEXT	SEGMENT
_myitembuff$ = -5124					; size = 1024
_mypetbuff$ = -4100					; size = 1024
_oppitembuff$ = -3076					; size = 1024
_opppetbuff$ = -2052					; size = 1024
_buffer$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
?LockAndOkfunction@@YAXXZ PROC				; LockAndOkfunction, COMDAT

; 1307 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 14 00 00	 mov	 eax, 5124		; 00001404H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1308 : 	char buffer[1024];
; 1309 : 	char myitembuff[1024];
; 1310 : 	char mypetbuff[1024];
; 1311 : 	char oppitembuff[1024];
; 1312 : 	char opppetbuff[1024];
; 1313 : 	// åæ¹çæä¸íì¸é®ç¶æ
; 1314 : 	if (pc.trade_confirm == 4) {

  00017	a1 80 a1 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+41344
  0001c	83 f8 04	 cmp	 eax, 4
  0001f	0f 85 d1 01 00
	00		 jne	 $LN3@LockAndOkf

; 1315 : 		// å¤çæä¸íì¸é®
; 1316 : 		if ((MainTradeWndflag == true && HitDispNo == tradeWndFontNo[0]) ||

  00025	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?MainTradeWndflag@@3_NA, 1 ; MainTradeWndflag
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00031	75 08		 jne	 SHORT $LN5@LockAndOkf
  00033	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA
  00039	74 19		 je	 SHORT $LN4@LockAndOkf
$LN5@LockAndOkf:
  0003b	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?SecondTradeWndflag@@3_NA, 1 ; SecondTradeWndflag
  00042	0f 85 31 02 00
	00		 jne	 $LN8@LockAndOkf
  00048	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?SecondtradeWndFontNo@@3PAHA+8
  0004e	0f 85 25 02 00
	00		 jne	 $LN8@LockAndOkf
$LN4@LockAndOkf:

; 1317 : 			//andy_reEdit 2003/04/27
; 1318 : 			(SecondTradeWndflag == true && HitDispNo == SecondtradeWndFontNo[2])) {
; 1319 : 			// å¯¹åæ¹äº¤æç©ååæbuffer	
; 1320 : 			sprintf(myitembuff, "T|%s|%s|K|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|"

  00054	ff 35 6c 2e 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+11884
  0005a	8d 85 fc eb ff
	ff		 lea	 eax, DWORD PTR _myitembuff$[ebp]
  00060	ff 35 54 2b 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+11092
  00066	ff 35 3c 28 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+10300
  0006c	ff 35 24 25 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+9508
  00072	ff 35 0c 22 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+8716
  00078	ff 35 f4 1e 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+7924
  0007e	ff 35 dc 1b 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+7132
  00084	ff 35 c4 18 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+6340
  0008a	ff 35 ac 15 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+5548
  00090	ff 35 94 12 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+4756
  00096	ff 35 7c 0f 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+3964
  0009c	ff 35 64 0c 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+3172
  000a2	ff 35 4c 09 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+2380
  000a8	ff 35 34 06 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+1588
  000ae	ff 35 1c 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+796
  000b4	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  000b9	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@OFAEILEL@T?$HM?$CFs?$HM?$CFs?$HMK?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI@
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _sprintf

; 1321 : 				, opp_sockfd, opp_name
; 1322 : 				, tradeList[1].data, tradeList[2].data
; 1323 : 				, tradeList[3].data, tradeList[4].data
; 1324 : 				, tradeList[5].data, tradeList[6].data
; 1325 : 				, tradeList[7].data, tradeList[8].data
; 1326 : 				, tradeList[9].data, tradeList[10].data
; 1327 : 				, tradeList[11].data, tradeList[12].data
; 1328 : 				, tradeList[13].data, tradeList[14].data
; 1329 : 				, tradeList[15].data);
; 1330 : 			sprintf(mypetbuff, "P|%d|P|%d|P|%d|P|%d|P|%d|G|%d|"

  000c9	ff 35 fc 40 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+16636
  000cf	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _mypetbuff$[ebp]
  000d5	ff 35 e4 3d 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+15844
  000db	ff 35 cc 3a 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+15052
  000e1	ff 35 b4 37 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+14260
  000e7	ff 35 9c 34 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+13468
  000ed	ff 35 84 31 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+12676
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EDJFIODM@P?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMG?$HM?$CFd?$HM@
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _sprintf
  000fe	83 c4 6c	 add	 esp, 108		; 0000006cH

; 1331 : 				, tradeList[16].data, tradeList[17].data
; 1332 : 				, tradeList[18].data, tradeList[19].data
; 1333 : 				, tradeList[20].data, tradeList[21].data);
; 1334 : 			sprintf(oppitembuff, "I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|I|%d|"

  00101	8d 85 fc f3 ff
	ff		 lea	 eax, DWORD PTR _oppitembuff$[ebp]
  00107	ff 35 64 6f 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+28516
  0010d	ff 35 4c 6c 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+27724
  00113	ff 35 34 69 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+26932
  00119	ff 35 1c 66 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+26140
  0011f	ff 35 04 63 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+25348
  00125	ff 35 ec 5f 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+24556
  0012b	ff 35 d4 5c 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+23764
  00131	ff 35 bc 59 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+22972
  00137	ff 35 a4 56 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+22180
  0013d	ff 35 8c 53 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+21388
  00143	ff 35 74 50 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+20596
  00149	ff 35 5c 4d 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+19804
  0014f	ff 35 44 4a 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+19012
  00155	ff 35 2c 47 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+18220
  0015b	ff 35 14 44 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+17428
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@BMOJJPID@I?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI?$HM?$CFd?$HMI@
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 _sprintf

; 1335 : 				, tradeList[22].data, tradeList[23].data
; 1336 : 				, tradeList[24].data, tradeList[25].data
; 1337 : 				, tradeList[26].data, tradeList[27].data
; 1338 : 				, tradeList[28].data, tradeList[29].data
; 1339 : 				, tradeList[30].data, tradeList[31].data
; 1340 : 				, tradeList[32].data, tradeList[33].data
; 1341 : 				, tradeList[34].data, tradeList[35].data
; 1342 : 				, tradeList[36].data);
; 1343 : 			sprintf(opppetbuff, "P|%d|P|%d|P|%d|P|%d|P|%d|G|%d|"

  0016c	ff 35 f4 81 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+33268
  00172	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _opppetbuff$[ebp]
  00178	ff 35 dc 7e 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+32476
  0017e	ff 35 c4 7b 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+31684
  00184	ff 35 ac 78 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+30892
  0018a	ff 35 94 75 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+30100
  00190	ff 35 7c 72 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A+29308
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EDJFIODM@P?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMP?$HM?$CFd?$HMG?$HM?$CFd?$HM@
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _sprintf
  001a1	83 c4 64	 add	 esp, 100		; 00000064H

; 1344 : 				, tradeList[37].data, tradeList[38].data
; 1345 : 				, tradeList[39].data, tradeList[40].data
; 1346 : 				, tradeList[41].data, tradeList[42].data);
; 1347 : 			sprintf(buffer, "%s%s%s%s", myitembuff, mypetbuff, oppitembuff, opppetbuff);

  001a4	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _opppetbuff$[ebp]
  001aa	50		 push	 eax
  001ab	8d 85 fc f3 ff
	ff		 lea	 eax, DWORD PTR _oppitembuff$[ebp]
  001b1	50		 push	 eax
  001b2	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _mypetbuff$[ebp]
  001b8	50		 push	 eax
  001b9	8d 85 fc eb ff
	ff		 lea	 eax, DWORD PTR _myitembuff$[ebp]
  001bf	50		 push	 eax
  001c0	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_08KJEDNCKC@?$CFs?$CFs?$CFs?$CFs@
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 _sprintf

; 1348 : 			lssproto_TD_send(sockfd, buffer);

  001d1	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  001d7	50		 push	 eax
  001d8	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  001de	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send

; 1349 : 			tradeStatus = 2;

  001e3	b8 02 00 00 00	 mov	 eax, 2
  001e8	83 c4 20	 add	 esp, 32			; 00000020H
  001eb	66 a3 00 00 00
	00		 mov	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus
  001f1	a1 80 a1 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+41344
$LN3@LockAndOkf:

; 1350 : 		}
; 1351 : 	}
; 1352 : 	// å¯¹æ¹æä¸Lockæææ¹è¦æä¸Locké® 
; 1353 : 	if (pc.trade_confirm == 1 || pc.trade_confirm == 3) {

  001f6	83 f8 01	 cmp	 eax, 1
  001f9	74 05		 je	 SHORT $LN7@LockAndOkf
  001fb	83 f8 03	 cmp	 eax, 3
  001fe	75 79		 jne	 SHORT $LN8@LockAndOkf
$LN7@LockAndOkf:

; 1354 : 		if ((MainTradeWndflag == true && HitDispNo == tradeWndFontNo[0]) ||

  00200	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?MainTradeWndflag@@3_NA, 1 ; MainTradeWndflag
  00207	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0020d	75 08		 jne	 SHORT $LN10@LockAndOkf
  0020f	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?tradeWndFontNo@@3PAHA
  00215	74 11		 je	 SHORT $LN9@LockAndOkf
$LN10@LockAndOkf:
  00217	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?SecondTradeWndflag@@3_NA, 1 ; SecondTradeWndflag
  0021e	75 59		 jne	 SHORT $LN8@LockAndOkf
  00220	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?SecondtradeWndFontNo@@3PAHA+8
  00226	75 51		 jne	 SHORT $LN8@LockAndOkf
$LN9@LockAndOkf:

; 1355 : 			//andy_reEdit 2003/04/27
; 1356 : 			(SecondTradeWndflag == true && HitDispNo == SecondtradeWndFontNo[2])) {
; 1357 : 			//å¯¹æ¹å°æªLockè¿å¥ç¶æ 2
; 1358 : 			if (pc.trade_confirm == 1) pc.trade_confirm = 2;

  00228	83 f8 01	 cmp	 eax, 1
  0022b	75 0c		 jne	 SHORT $LN11@LockAndOkf
  0022d	c7 05 80 a1 00
	00 02 00 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, 2

; 1359 : 			//å¯¹æ¹å·²ç»Lockè¿å¥ç¶æ 4
; 1360 : 			if (pc.trade_confirm == 3)	pc.trade_confirm = 4;

  00237	eb 10		 jmp	 SHORT $LN12@LockAndOkf
$LN11@LockAndOkf:
  00239	83 f8 03	 cmp	 eax, 3
  0023c	b9 04 00 00 00	 mov	 ecx, 4
  00241	0f 44 c1	 cmove	 eax, ecx
  00244	a3 80 a1 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, eax
$LN12@LockAndOkf:

; 1361 : 			sprintf(buffer, "T|%s|%s|C|confirm", opp_sockfd, opp_name);

  00249	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  0024e	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  00253	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00259	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OAKKNIEC@T?$HM?$CFs?$HM?$CFs?$HMC?$HMconfirm@
  0025e	50		 push	 eax
  0025f	e8 00 00 00 00	 call	 _sprintf

; 1362 : 			lssproto_TD_send(sockfd, buffer);

  00264	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0026a	50		 push	 eax
  0026b	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00271	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send
  00276	83 c4 18	 add	 esp, 24			; 00000018H
$LN8@LockAndOkf:

; 1363 : 		}
; 1364 : 	}
; 1365 : 	// å¤ç Lock ã íì¸é® End
; 1366 : }

  00279	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027c	33 cd		 xor	 ecx, ebp
  0027e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c3		 ret	 0
?LockAndOkfunction@@YAXXZ ENDP				; LockAndOkfunction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ PROC		; sprintf_s<256>, COMDAT

; 1858 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1503 :     }
; 1504 :     #endif
; 1505 : 
; 1506 :     #if __STDC_WANT_SECURE_LIB__
; 1507 : 
; 1508 :         _Success_(return >= 0)
; 1509 :         _Check_return_opt_
; 1510 :         _CRT_STDIO_INLINE int __CRTDECL vsprintf_s(
; 1511 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1512 :             _In_                                          size_t      const _BufferCount,
; 1513 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1514 :                                                           va_list           _ArgList
; 1515 :             )
; 1516 :     #if defined _NO_CRT_STDIO_INLINE
; 1517 :     ;
; 1518 :     #else
; 1519 :         {
; 1520 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1521 :         }
; 1522 :     #endif
; 1523 : 
; 1524 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(
; 1525 :             _Success_(return >= 0)
; 1526 :             int, vsprintf_s,
; 1527 :             _Always_(_Post_z_)            char,        _Buffer,
; 1528 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1529 :                                           va_list,     _ArgList
; 1530 :             )
; 1531 : 
; 1532 :     #endif
; 1533 : 
; 1534 :     _Success_(return >= 0)
; 1535 :     _Check_return_opt_
; 1536 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p_l(
; 1537 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1538 :         _In_                                          size_t      const _BufferCount,
; 1539 :         _In_z_ _Printf_format_string_params_(2)       char const* const _Format,
; 1540 :         _In_opt_                                      _locale_t   const _Locale,
; 1541 :                                                       va_list           _ArgList
; 1542 :         )
; 1543 :     #if defined _NO_CRT_STDIO_INLINE
; 1544 :     ;
; 1545 :     #else
; 1546 :     {
; 1547 :         int const _Result = __stdio_common_vsprintf_p(
; 1548 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1549 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1550 : 
; 1551 :         return _Result < 0 ? -1 : _Result;
; 1552 :     }
; 1553 :     #endif
; 1554 : 
; 1555 :     _Success_(return >= 0)
; 1556 :     _Check_return_opt_
; 1557 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p(
; 1558 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1559 :         _In_                                          size_t      const _BufferCount,
; 1560 :         _In_z_ _Printf_format_string_                 char const* const _Format,
; 1561 :                                                       va_list           _ArgList
; 1562 :         )
; 1563 :     #if defined _NO_CRT_STDIO_INLINE
; 1564 :     ;
; 1565 :     #else
; 1566 :     {
; 1567 :         return _vsprintf_p_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1568 :     }
; 1569 :     #endif
; 1570 : 
; 1571 :     _Success_(return >= 0)
; 1572 :     _Check_return_opt_
; 1573 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s_l(
; 1574 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1575 :         _In_                                              size_t      const _BufferCount,
; 1576 :         _In_                                              size_t      const _MaxCount,
; 1577 :         _In_z_ _Printf_format_string_params_(2)           char const* const _Format,
; 1578 :         _In_opt_                                          _locale_t   const _Locale,
; 1579 :                                                           va_list          _ArgList
; 1580 :         )
; 1581 :     #if defined _NO_CRT_STDIO_INLINE
; 1582 :     ;
; 1583 :     #else
; 1584 :     {
; 1585 :         int const _Result = __stdio_common_vsnprintf_s(
; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;
; 1590 :     }
; 1591 :     #endif
; 1592 : 
; 1593 :     _Success_(return >= 0)
; 1594 :     _Check_return_opt_
; 1595 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s(
; 1596 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1597 :         _In_                                              size_t      const _BufferCount,
; 1598 :         _In_                                              size_t      const _MaxCount,
; 1599 :         _In_z_ _Printf_format_string_                     char const* const _Format,
; 1600 :                                                           va_list           _ArgList
; 1601 :         )
; 1602 :     #if defined _NO_CRT_STDIO_INLINE
; 1603 :     ;
; 1604 :     #else
; 1605 :     {
; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1607 :     }
; 1608 :     #endif
; 1609 : 
; 1610 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1611 :         _Success_(return >= 0)
; 1612 :         int, _vsnprintf_s,
; 1613 :         _Always_(_Post_z_)            char,        _Buffer,
; 1614 :         _In_                          size_t,      _BufferCount,
; 1615 :         _In_z_ _Printf_format_string_ char const*, _Format,
; 1616 :                                       va_list,     _ArgList
; 1617 :         )
; 1618 : 
; 1619 :     #if __STDC_WANT_SECURE_LIB__
; 1620 : 
; 1621 :         _Success_(return >= 0)
; 1622 :         _Check_return_opt_
; 1623 :         _CRT_STDIO_INLINE int __CRTDECL vsnprintf_s(
; 1624 :             _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1625 :             _In_                                              size_t      const _BufferCount,
; 1626 :             _In_                                              size_t      const _MaxCount,
; 1627 :             _In_z_ _Printf_format_string_                     char const* const _Format,
; 1628 :                                                               va_list           _ArgList
; 1629 :             )
; 1630 :     #if defined _NO_CRT_STDIO_INLINE
; 1631 :     ;
; 1632 :     #else
; 1633 :         {
; 1634 :             return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1635 :         }
; 1636 :     #endif
; 1637 : 
; 1638 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1639 :             _Success_(return >= 0)
; 1640 :             int, vsnprintf_s,
; 1641 :             _Always_(_Post_z_)            char,        _Buffer,
; 1642 :             _In_                          size_t,      _BufferCount,
; 1643 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1644 :                                           va_list,     _ArgList
; 1645 :             )
; 1646 : 
; 1647 :     #endif
; 1648 : 
; 1649 :     _Check_return_opt_
; 1650 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_l(
; 1651 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1652 :         _In_opt_                                _locale_t   const _Locale,
; 1653 :                                                 va_list           _ArgList
; 1654 :         )
; 1655 :     #if defined _NO_CRT_STDIO_INLINE
; 1656 :     ;
; 1657 :     #else
; 1658 :     {
; 1659 :         int const _Result = __stdio_common_vsprintf(
; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;
; 1664 :     }
; 1665 :     #endif
; 1666 : 
; 1667 :     _Check_return_
; 1668 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf(
; 1669 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1670 :                                       va_list           _ArgList
; 1671 :         )
; 1672 :     #if defined _NO_CRT_STDIO_INLINE
; 1673 :     ;
; 1674 :     #else
; 1675 :     {
; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);
; 1677 :     }
; 1678 :     #endif
; 1679 : 
; 1680 :     _Check_return_opt_
; 1681 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p_l(
; 1682 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1683 :         _In_opt_                                _locale_t   const _Locale,
; 1684 :                                                 va_list           _ArgList
; 1685 :         )
; 1686 :     #if defined _NO_CRT_STDIO_INLINE
; 1687 :     ;
; 1688 :     #else
; 1689 :     {
; 1690 :         int const _Result = __stdio_common_vsprintf_p(
; 1691 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1692 :             NULL, 0, _Format, _Locale, _ArgList);
; 1693 : 
; 1694 :         return _Result < 0 ? -1 : _Result;
; 1695 :     }
; 1696 :     #endif
; 1697 : 
; 1698 :     _Check_return_
; 1699 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p(
; 1700 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1701 :                                       va_list           _ArgList
; 1702 :         )
; 1703 :     #if defined _NO_CRT_STDIO_INLINE
; 1704 :     ;
; 1705 :     #else
; 1706 :     {
; 1707 :         return _vscprintf_p_l(_Format, NULL, _ArgList);
; 1708 :     }
; 1709 :     #endif
; 1710 : 
; 1711 :     _Check_return_opt_
; 1712 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c_l(
; 1713 :         _Out_writes_opt_(_BufferCount)          char*       const _Buffer,
; 1714 :         _In_                                    size_t      const _BufferCount,
; 1715 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1716 :         _In_opt_                                _locale_t   const _Locale,
; 1717 :                                                 va_list           _ArgList
; 1718 :         )
; 1719 :     #if defined _NO_CRT_STDIO_INLINE
; 1720 :     ;
; 1721 :     #else
; 1722 :     {
; 1723 :         int const _Result = __stdio_common_vsprintf(
; 1724 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1725 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1726 : 
; 1727 :         return _Result < 0 ? -1 : _Result;
; 1728 :     }
; 1729 :     #endif
; 1730 : 
; 1731 :     _Success_(return >= 0)
; 1732 :     _Check_return_opt_
; 1733 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c(
; 1734 :         _Out_writes_opt_(_BufferCount) char*       const _Buffer,
; 1735 :         _In_                           size_t      const _BufferCount,
; 1736 :         _In_z_ _Printf_format_string_  char const* const _Format,
; 1737 :                                        va_list           _ArgList
; 1738 :         )
; 1739 :     #if defined _NO_CRT_STDIO_INLINE
; 1740 :     ;
; 1741 :     #else
; 1742 :     {
; 1743 :         return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1744 :     }
; 1745 :     #endif
; 1746 : 
; 1747 :     _Success_(return >= 0)
; 1748 :     _Check_return_opt_ _CRT_INSECURE_DEPRECATE(_sprintf_s_l)
; 1749 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_l(
; 1750 :         _Pre_notnull_ _Always_(_Post_z_)        char*       const _Buffer,
; 1751 :         _In_z_ _Printf_format_string_params_(0) char const* const _Format,
; 1752 :         _In_opt_                                _locale_t   const _Locale,
; 1753 :         ...)
; 1754 :     #if defined _NO_CRT_STDIO_INLINE
; 1755 :     ;
; 1756 :     #else
; 1757 :     {
; 1758 :         int _Result;
; 1759 :         va_list _ArgList;
; 1760 :         __crt_va_start(_ArgList, _Locale);
; 1761 : 
; 1762 :         #pragma warning(push)
; 1763 :         #pragma warning(disable: 4996) // Deprecation
; 1764 :         _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
; 1765 :         #pragma warning(pop)
; 1766 : 
; 1767 :         __crt_va_end(_ArgList);
; 1768 :         return _Result;
; 1769 :     }
; 1770 :     #endif
; 1771 : 
; 1772 :     _Success_(return >= 0)
; 1773 :     _Check_return_opt_
; 1774 :     _CRT_STDIO_INLINE int __CRTDECL sprintf(
; 1775 :         _Pre_notnull_ _Always_(_Post_z_) char*       const _Buffer,
; 1776 :         _In_z_ _Printf_format_string_    char const* const _Format,
; 1777 :         ...)
; 1778 :     #if defined _NO_CRT_STDIO_INLINE
; 1779 :     ;
; 1780 :     #else
; 1781 :     {
; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }
; 1794 :     #endif
; 1795 : 
; 1796 :     #pragma warning(push)
; 1797 :     #pragma warning(disable: 4996)
; 1798 :     #pragma warning(disable: 28719) // __WARNING_BANNED_API_USAGE
; 1799 :     #pragma warning(disable: 28726) // __WARNING_BANNED_API_USAGEL2
; 1800 :     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(
; 1801 :         _Success_(return >= 0)
; 1802 :         int, __RETURN_POLICY_SAME, __EMPTY_DECLSPEC, __CRTDECL, sprintf, vsprintf,
; 1803 :         _Pre_notnull_ _Always_(_Post_z_), char,        _Buffer,
; 1804 :         _In_z_ _Printf_format_string_     char const*, _Format
; 1805 :         )
; 1806 :     #pragma warning(pop)
; 1807 : 
; 1808 :     _Success_(return >= 0)
; 1809 :     _Check_return_opt_
; 1810 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_s_l(
; 1811 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1812 :         _In_                                          size_t      const _BufferCount,
; 1813 :         _In_z_ _Printf_format_string_params_(0)       char const* const _Format,
; 1814 :         _In_opt_                                      _locale_t   const _Locale,
; 1815 :         ...)
; 1816 :     #if defined _NO_CRT_STDIO_INLINE
; 1817 :     ;
; 1818 :     #else
; 1819 :     {
; 1820 :         int _Result;
; 1821 :         va_list _ArgList;
; 1822 :         __crt_va_start(_ArgList, _Locale);
; 1823 :         _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1824 :         __crt_va_end(_ArgList);
; 1825 :         return _Result;
; 1826 :     }
; 1827 :     #endif
; 1828 : 
; 1829 :     #if __STDC_WANT_SECURE_LIB__
; 1830 : 
; 1831 :         _Success_(return >= 0)
; 1832 :         _Check_return_opt_
; 1833 :         _CRT_STDIO_INLINE int __CRTDECL sprintf_s(
; 1834 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1835 :             _In_                                          size_t      const _BufferCount,
; 1836 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1837 :             ...)
; 1838 :     #if defined _NO_CRT_STDIO_INLINE
; 1839 :     ;
; 1840 :     #else
; 1841 :         {
; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);
; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1846 :             __crt_va_end(_ArgList);
; 1847 :             return _Result;
; 1848 :         }
; 1849 :     #endif
; 1850 : 
; 1851 :     #endif
; 1852 : 
; 1853 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ENDP		; sprintf_s<256>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?SkillWndfunc2@@YAXXZ
_TEXT	SEGMENT
$T1 = -800						; size = 4
_x$1$ = -796						; size = 4
$T2 = -792						; size = 4
$T3 = -788						; size = 4
tv2190 = -788						; size = 4
_j$1$ = -784						; size = 4
_j$2$ = -784						; size = 4
tv2186 = -784						; size = 4
tv2168 = -784						; size = 4
tv2158 = -780						; size = 4
tv2135 = -780						; size = 4
_j$1$ = -780						; size = 4
_y$1$ = -780						; size = 4
tv2185 = -776						; size = 4
tv2184 = -776						; size = 4
tv2167 = -776						; size = 4
tv2157 = -776						; size = 4
tv2134 = -776						; size = 4
_msg2$ = -772						; size = 256
_buf$ = -516						; size = 256
_msg$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?SkillWndfunc2@@YAXXZ PROC				; SkillWndfunc2, COMDAT

; 800  : void SkillWndfunc2() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 03 00
	00		 sub	 esp, 800		; 00000320H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 801  : #ifdef _NB_äººç©æ è¯¦æ
; 802  : 	int ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y;
; 803  : 	//è®¡ç®å¾çä¸­å¿
; 804  : 	if (ResoMode == åè¾¨ç::mode800) {
; 805  : 		ä¸´æ¶å¾æ X = 800 / 2;
; 806  : 		ä¸´æ¶å¾æ Y = 600 / 2;
; 807  : 		ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 808  : 		ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 809  : 	}
; 810  : 	else if (ResoMode == åè¾¨ç::mode1024) {
; 811  : 		ä¸´æ¶å¾æ X = 1024 / 2;
; 812  : 		ä¸´æ¶å¾æ Y = 768 / 2;
; 813  : 		ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 814  : 		ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 815  : 	}
; 816  : 	else {
; 817  : 		ä¸´æ¶å¾æ X = 640 / 2;
; 818  : 		ä¸´æ¶å¾æ Y = 480 / 2;
; 819  : 		ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 820  : 		ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 821  : 	}
; 822  : 
; 823  : 	int x = 0, y = 0, j = 0;
; 824  : 	char buf[256];
; 825  : 	char msg[256];
; 826  : 	char msg2[256];
; 827  : 	if (pActSkillMenuWnd == NULL) {
; 828  : 		pActSkillMenuWnd = MakeWindowDisp(ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y, ä¸´æ¶èµ·å§X + 568, ä¸´æ¶èµ·å§Y + 358, 0, -1);
; 829  : 	}
; 830  : 	else {
; 831  : 		if (pActSkillMenuWnd->hp > 0) {
; 832  : 			if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 833  : 				if (HitDispNo == èæå³é­æé®å¥æ) {
; 834  : 					SkillWndflag = false;
; 835  : 					DeathAction(pActSkillMenuWnd);
; 836  : 					pActSkillMenuWnd = NULL;
; 837  : 					MenuToggleFlag ^= JOY_CTRL_S;
; 838  : 					play_se(217, 320, 240);
; 839  : 				}
; 840  : 			}
; 841  : 
; 842  : 			for (int i = 0; i < 3; i++) {
; 843  : 				int ä¸´æ¶ä½ç½®X = 305;
; 844  : 				int ä¸´æ¶ä½ç½®Y = 20;
; 845  : 				int ä¸´æ¶é´é = 75;
; 846  : 				if (MakeHitBox(ä¸´æ¶èµ·å§X + ä¸´æ¶ä½ç½®X + i * ä¸´æ¶é´é, ä¸´æ¶èµ·å§Y + ä¸´æ¶ä½ç½®Y, ä¸´æ¶èµ·å§X + ä¸´æ¶ä½ç½®X + ä¸´æ¶é´é + i*ä¸´æ¶é´é, ä¸´æ¶èµ·å§Y + ä¸´æ¶ä½ç½®Y + 28, DISP_PRIO_IME3) == TRUE) {
; 847  : 					if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 848  : 						SkillWnd = i;
; 849  : 						play_se(217, 320, 240);
; 850  : 						break;
; 851  : 					}
; 852  : 				}
; 853  : 			}
; 854  : 
; 855  : 			sprintf(msg, "%s", pc.profession_class_name);
; 856  : 			StockFontBuffer(ä¸´æ¶èµ·å§X + 74, ä¸´æ¶èµ·å§Y + 27, FONT_PRIO_FRONT, 1, msg, 0);
; 857  : 			sprintf(msg, "%d", pc.profession_skill_point);
; 858  : 			StockFontBuffer(ä¸´æ¶èµ·å§X + 254, ä¸´æ¶èµ·å§Y + 27, FONT_PRIO_FRONT, 1, msg, 0);
; 859  : 
; 860  : 			èæå³é­æé®å¥æ = StockDispBuffer(ä¸´æ¶å¾æ X + 264, ä¸´æ¶å¾æ Y - 180, DISP_PRIO_IME3, IMAGE_çªå£å³é­X, 1);
; 861  : 			StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_MENU, 52041, 1);//æå°äººç©çé¢åºå¾
; 862  : 			memset(msg, -1, sizeof(msg));
; 863  : 
; 864  : 			extern int BattleSkill[20];
; 865  : 			extern int AssitSkill[20];
; 866  : 			extern int AdvanceSkill[20];
; 867  : 
; 868  : 			sprintf(msg, " ");
; 869  : 			int æ¯è¡å ä¸ªæè½ = 8;
; 870  : 			switch (SkillWnd) {
; 871  : 			case 0:
; 872  : 				StockDispBuffer(ä¸´æ¶èµ·å§X + 343, ä¸´æ¶èµ·å§Y + 35, DISP_PRIO_IME3, 52042, 0);
; 873  : 				for (int i = 0; i < 2; i++) {
; 874  : 					for (j = 0; j < æ¯è¡å ä¸ªæè½; j++) {
; 875  : 						if (AssitSkill[j + i * æ¯è¡å ä¸ªæè½] == -1)
; 876  : 							break;
; 877  : 						if (HitDispNo == StockDispBuffer(ä¸´æ¶èµ·å§X + 71 + j * 60, ä¸´æ¶èµ·å§Y + 95 + i * 66, DISP_PRIO_IME3 + 1, profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].icon, 2)) {
; 878  : 							int use_color = 0;
; 879  : 							if (pc.mp >= profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp && profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp != 0) {
; 880  : 								use_color = FONT_PAL_WHITE;
; 881  : 							}
; 882  : 							else {
; 883  : 								use_color = FONT_PAL_GRAY;
; 884  : 							}
; 885  : 
; 886  : 							sprintf(msg, "%s", profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].name);
; 887  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 140, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 888  : 
; 889  : 							sprintf(msg, "%d%%", profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].skill_level);
; 890  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 320, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 891  : 
; 892  : 							sprintf(msg, "%d", profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp);
; 893  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 432, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 894  : 
; 895  : 							sprintf(msg, "%s", profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].memo);
; 896  : #ifdef _OUTOFBATTLESKILL			// (ä¸å¯å¼) Syu ADD éæææ¶æè½Protocol
; 897  : 							if (mouse.onceState & MOUSE_LEFT_CRICK && profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].useFlag == 0) {
; 898  : 								if (pc.mp >= profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp && profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp != 0) {
; 899  : 									lssproto_BATTLESKILL_send(sockfd, AssitSkill[j + i * æ¯è¡å ä¸ªæè½]);
; 900  : 									play_se(217, 320, 240);
; 901  : 								}
; 902  : 							}
; 903  : #endif
; 904  : 						}
; 905  : 						sprintf(msg2, "%-8s", profession_skill[AssitSkill[j + i * æ¯è¡å ä¸ªæè½]].name);
; 906  : 						StockFontBuffer(ä¸´æ¶èµ·å§X + 48 + j * 60, ä¸´æ¶èµ·å§Y + 118 + i * 66, FONT_PRIO_FRONT, profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].useFlag + 1, msg2, 0);
; 907  : 					}
; 908  : 				}
; 909  : 				break;
; 910  : 			case 1:
; 911  : 				StockDispBuffer(ä¸´æ¶èµ·å§X + 418, ä¸´æ¶èµ·å§Y + 35, DISP_PRIO_IME3, 52043, 0);
; 912  : 				for (int i = 0; i < 2; i++) {
; 913  : 					for (j = 0; j < æ¯è¡å ä¸ªæè½; j++) {
; 914  : 						if (BattleSkill[j + i * æ¯è¡å ä¸ªæè½] == -1)
; 915  : 							break;
; 916  : 						if (HitDispNo == StockDispBuffer(ä¸´æ¶èµ·å§X + 71 + j * 60, ä¸´æ¶èµ·å§Y + 95 + i * 66, DISP_PRIO_IME3 + 1, profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].icon, 2)) {
; 917  : 							int use_color = 0;
; 918  : 							if (pc.mp >= profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp && profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp != 0) {
; 919  : 								use_color = FONT_PAL_WHITE;
; 920  : 							}
; 921  : 							else {
; 922  : 								use_color = FONT_PAL_GRAY;
; 923  : 							}
; 924  : 
; 925  : 							//é¼ æ æå
; 926  : 							sprintf(msg, "%s", profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].name);
; 927  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 140, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 928  : 
; 929  : 							sprintf(msg, "%d%%", profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].skill_level);//æè½çç» 
; 930  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 320, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 931  : 
; 932  : 							sprintf(msg, "%d", profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp);
; 933  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 432, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 934  : 
; 935  : 							sprintf(msg, "%s", profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].memo);
; 936  : #ifdef _OUTOFBATTLESKILL			// (ä¸å¯å¼) Syu ADD éæææ¶æè½Protocol
; 937  : 							if (mouse.onceState & MOUSE_LEFT_CRICK && profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].useFlag == 0) {
; 938  : 								if (pc.mp >= profession_skill[BattleSkill[j + i *æ¯è¡å ä¸ªæè½]].costmp && profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp != 0) {
; 939  : 									lssproto_BATTLESKILL_send(sockfd, BattleSkill[j + i * æ¯è¡å ä¸ªæè½]);
; 940  : 									play_se(217, 320, 240);
; 941  : 								}
; 942  : 							}
; 943  : #endif
; 944  : 						}
; 945  : 						sprintf(msg2, "%-8s", profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].name);
; 946  : 						StockFontBuffer(ä¸´æ¶èµ·å§X + 48 + j * 60, ä¸´æ¶èµ·å§Y + 118 + i * 66, FONT_PRIO_FRONT, profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].useFlag + 1, msg2, 0);
; 947  : 					}
; 948  : 				}
; 949  : 				break;
; 950  : 			case 2:
; 951  : 				StockDispBuffer(ä¸´æ¶èµ·å§X + 493, ä¸´æ¶èµ·å§Y + 35, DISP_PRIO_IME3, 52044, 0);
; 952  : 				for (int i = 0; i < 2; i++) {
; 953  : 					for (j = 0; j < æ¯è¡å ä¸ªæè½; j++) {
; 954  : 						if (AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½] == -1)
; 955  : 							break;
; 956  : 						if (HitDispNo == StockDispBuffer(ä¸´æ¶èµ·å§X + 71 + j * 60, ä¸´æ¶èµ·å§Y + 95 + i * 66, DISP_PRIO_IME3 + 1, profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].icon, 2)) {
; 957  : 
; 958  : 							int use_color = 0;
; 959  : 							if (pc.mp >= profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp && profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp != 0) {
; 960  : 								use_color = FONT_PAL_WHITE;
; 961  : 							}
; 962  : 							else {
; 963  : 								use_color = FONT_PAL_GRAY;
; 964  : 							}
; 965  : 
; 966  : 							sprintf(msg, "%s", profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].name);
; 967  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 140, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 968  : 
; 969  : 							sprintf(msg, "%d%%", profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].skill_level);
; 970  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 320, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 971  : 
; 972  : 							sprintf(msg, "%d", profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp);
; 973  : 							StockFontBuffer(ä¸´æ¶èµ·å§X + 432, ä¸´æ¶èµ·å§Y + 220, FONT_PRIO_FRONT, use_color, msg, 0);
; 974  : 
; 975  : 							sprintf(msg, "%s", profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].memo);
; 976  : #ifdef _OUTOFBATTLESKILL			// (ä¸å¯å¼) Syu ADD éæææ¶æè½Protocol
; 977  : 							if (mouse.onceState & MOUSE_LEFT_CRICK && profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].useFlag == 0) {
; 978  : 								if (pc.mp >= profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp && profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].costmp != 0) {
; 979  : 									lssproto_BATTLESKILL_send(sockfd, AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]);
; 980  : 									play_se(217, 320, 240);
; 981  : 								}
; 982  : 							}
; 983  : #endif
; 984  : 						}
; 985  : 						sprintf(msg2, "%-8s", profession_skill[AdvanceSkill[j + i * æ¯è¡å ä¸ªæè½]].name);
; 986  : 						StockFontBuffer(ä¸´æ¶èµ·å§X + 48 + j * 60, ä¸´æ¶èµ·å§Y + 118 + i * 66, FONT_PRIO_FRONT, profession_skill[BattleSkill[j + i * æ¯è¡å ä¸ªæè½]].useFlag + 1, msg2, 0);
; 987  : 					}
; 988  : 				}
; 989  : 				break;
; 990  : 			}
; 991  : 			char *splitPoint = msg;
; 992  : 			sprintf(buf, "%s", msg);
; 993  : 			x = ä¸´æ¶èµ·å§X + 144;
; 994  : 			y = ä¸´æ¶èµ·å§Y + 263;
; 995  : 			while (1) {
; 996  : 				if (strlen(splitPoint) > 72) {
; 997  : 					strncpy(msg, splitPoint, 72);
; 998  : 					buf[72] = NULL;
; 999  : 					if (GetStrLastByte(buf) == 3) {
; 1000 : 						buf[71] = NULL;
; 1001 : 						splitPoint += 71;
; 1002 : 					}
; 1003 : 					else {
; 1004 : 						buf[72] = NULL;
; 1005 : 						splitPoint += 72;
; 1006 : 					}
; 1007 : 					StockFontBuffer(x, y, FONT_PRIO_FRONT, 10, buf, 0); y += 20;
; 1008 : 				}
; 1009 : 				else {
; 1010 : 					strcpy(buf, splitPoint);
; 1011 : 					StockFontBuffer(x, y, FONT_PRIO_FRONT, 10, buf, 0);
; 1012 : 					break;
; 1013 : 				}
; 1014 : 			}
; 1015 : 		}
; 1016 : 	}
; 1017 : #else
; 1018 : 	int x = 0, y = 0, j = 0;
; 1019 : 	char buf[256];
; 1020 : 	char msg[256];
; 1021 : 	char msg2[256];
; 1022 : 	if (pActSkillMenuWnd == NULL) {

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActSkillMenuWnd@@3PAUaction@@A ; pActSkillMenuWnd
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	33 f6		 xor	 esi, esi
  0001d	33 db		 xor	 ebx, ebx
  0001f	89 b5 e4 fc ff
	ff		 mov	 DWORD PTR _x$1$[ebp], esi
  00025	89 9d f4 fc ff
	ff		 mov	 DWORD PTR _y$1$[ebp], ebx
  0002b	57		 push	 edi
  0002c	85 c9		 test	 ecx, ecx
  0002e	75 25		 jne	 SHORT $LN33@SkillWndfu

; 1023 : 		pActSkillMenuWnd = MakeWindowDisp(354, 0, 300, 456, 0, -1);

  00030	6a ff		 push	 -1
  00032	51		 push	 ecx
  00033	68 c8 01 00 00	 push	 456			; 000001c8H
  00038	68 2c 01 00 00	 push	 300			; 0000012cH
  0003d	51		 push	 ecx
  0003e	68 62 01 00 00	 push	 354			; 00000162H
  00043	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  00048	83 c4 18	 add	 esp, 24			; 00000018H
  0004b	a3 00 00 00 00	 mov	 DWORD PTR ?pActSkillMenuWnd@@3PAUaction@@A, eax ; pActSkillMenuWnd

; 1024 : 	}

  00050	e9 cb 00 00 00	 jmp	 $LN35@SkillWndfu
$LN33@SkillWndfu:

; 1025 : 	else {
; 1026 : 		if (pActSkillMenuWnd->hp > 0) {

  00055	39 59 78	 cmp	 DWORD PTR [ecx+120], ebx
  00058	0f 8e c2 00 00
	00		 jle	 $LN35@SkillWndfu

; 1027 : 			StockDispBuffer(((WINDOW_DISP *)pActSkillMenuWnd->pYobi)->mx - 10, ((WINDOW_DISP *)pActSkillMenuWnd->pYobi)->my - 5, DISP_PRIO_MENU, CG_FIELD_SKILL_PANEL, 1);

  0005e	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00061	6a 01		 push	 1
  00063	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_FIELD_SKILL_PANEL@@3HA ; CG_FIELD_SKILL_PANEL
  00069	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0006c	83 e8 05	 sub	 eax, 5
  0006f	6a 68		 push	 104			; 00000068H
  00071	50		 push	 eax
  00072	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00075	83 e8 0a	 sub	 eax, 10			; 0000000aH
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 1028 : 			x = pActSkillMenuWnd->x + 2;

  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActSkillMenuWnd@@3PAUaction@@A ; pActSkillMenuWnd

; 1029 : 			y = pActSkillMenuWnd->y - 5;
; 1030 : 			statusWndFontNo[15] = StockDispBuffer(x + 201, y + 436, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  00083	6a 02		 push	 2
  00085	68 ba 65 00 00	 push	 26042			; 000065baH
  0008a	6a 69		 push	 105			; 00000069H
  0008c	8b 58 1c	 mov	 ebx, DWORD PTR [eax+28]
  0008f	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  00092	83 eb 05	 sub	 ebx, 5
  00095	83 c7 02	 add	 edi, 2
  00098	89 9d f4 fc ff
	ff		 mov	 DWORD PTR _y$1$[ebp], ebx
  0009e	89 bd e4 fc ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edi
  000a4	8d 83 b4 01 00
	00		 lea	 eax, DWORD PTR [ebx+436]
  000aa	50		 push	 eax
  000ab	8d 87 c9 00 00
	00		 lea	 eax, DWORD PTR [edi+201]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 1031 : 			StockFontBuffer(x + 58, y + 36, FONT_PRIO_FRONT, 1, pc.profession_class_name, 0);

  000b7	6a 00		 push	 0
  000b9	68 90 a1 00 00	 push	 OFFSET ?pc@@3UPC@@A+41360
  000be	6a 01		 push	 1
  000c0	6a 01		 push	 1
  000c2	a3 3c 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+60, eax
  000c7	8d 73 24	 lea	 esi, DWORD PTR [ebx+36]
  000ca	8d 47 3a	 lea	 eax, DWORD PTR [edi+58]
  000cd	56		 push	 esi
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  000d4	83 c4 40	 add	 esp, 64			; 00000040H

; 1032 : 			sprintf_s(msg, "%d", pc.profession_skill_point);

  000d7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  000dd	ff 35 8c a1 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+41356
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1033 : 			StockFontBuffer(x + 228, y + 36, FONT_PRIO_FRONT, 1, msg, 0);

  000ee	6a 00		 push	 0
  000f0	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  000f6	50		 push	 eax
  000f7	6a 01		 push	 1
  000f9	6a 01		 push	 1
  000fb	8d 87 e4 00 00
	00		 lea	 eax, DWORD PTR [edi+228]
  00101	56		 push	 esi
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1034 : 			memset(msg, -1, sizeof(msg));

  00108	68 00 01 00 00	 push	 256			; 00000100H
  0010d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00113	6a ff		 push	 -1
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _memset
  0011b	83 c4 30	 add	 esp, 48			; 00000030H
  0011e	8b f7		 mov	 esi, edi
$LN35@SkillWndfu:

; 1035 : 		}
; 1036 : 	}
; 1037 : 	for (int i = 0; i < 3; i++) {

  00120	8d 8e 1c 01 00
	00		 lea	 ecx, DWORD PTR [esi+284]
  00126	33 ff		 xor	 edi, edi
  00128	8d 96 fe 00 00
	00		 lea	 edx, DWORD PTR [esi+254]
  0012e	89 8d f0 fc ff
	ff		 mov	 DWORD PTR tv2186[ebp], ecx
  00134	89 95 f8 fc ff
	ff		 mov	 DWORD PTR tv2185[ebp], edx
  0013a	8d 73 0d	 lea	 esi, DWORD PTR [ebx+13]
  0013d	0f 1f 00	 npad	 3
$LL4@SkillWndfu:

; 1038 : #ifdef _READ16BITBMP
; 1039 : 		if (g_bUseAlpha) {
; 1040 : 			if (MakeHitBox(x + 254, y + 15 + i * 78, x + 284, y + 93 + i * 78, DISP_PRIO_IME3) == TRUE) {
; 1041 : 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 1042 : 					SkillWnd = i;
; 1043 : 					play_se(217, 320, 240);
; 1044 : 					break;
; 1045 : 				}
; 1046 : 			}
; 1047 : 		}
; 1048 : 		else
; 1049 : #endif
; 1050 : 			if (MakeHitBox(x + 254, y + 13 + i * 79, x + 284, y + 91 + i * 79, DISP_PRIO_IME3) == TRUE) {

  00140	6a 69		 push	 105			; 00000069H
  00142	8d 46 4e	 lea	 eax, DWORD PTR [esi+78]
  00145	50		 push	 eax
  00146	51		 push	 ecx
  00147	56		 push	 esi
  00148	52		 push	 edx
  00149	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  0014e	83 c4 14	 add	 esp, 20			; 00000014H
  00151	83 f8 01	 cmp	 eax, 1
  00154	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00159	75 04		 jne	 SHORT $LN2@SkillWndfu

; 1051 : 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0015b	a8 01		 test	 al, 1
  0015d	75 17		 jne	 SHORT $LN90@SkillWndfu
$LN2@SkillWndfu:

; 1035 : 		}
; 1036 : 	}
; 1037 : 	for (int i = 0; i < 3; i++) {

  0015f	47		 inc	 edi
  00160	83 c6 4f	 add	 esi, 79			; 0000004fH
  00163	83 ff 03	 cmp	 edi, 3
  00166	7d 31		 jge	 SHORT $LN128@SkillWndfu
  00168	8b 8d f0 fc ff
	ff		 mov	 ecx, DWORD PTR tv2186[ebp]
  0016e	8b 95 f8 fc ff
	ff		 mov	 edx, DWORD PTR tv2185[ebp]
  00174	eb ca		 jmp	 SHORT $LL4@SkillWndfu
$LN90@SkillWndfu:

; 1052 : 					SkillWnd = i;
; 1053 : 					play_se(217, 320, 240);

  00176	68 f0 00 00 00	 push	 240			; 000000f0H
  0017b	68 40 01 00 00	 push	 320			; 00000140H
  00180	68 d9 00 00 00	 push	 217			; 000000d9H
  00185	66 89 3d 00 00
	00 00		 mov	 WORD PTR ?SkillWnd@@3FA, di ; SkillWnd
  0018c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00191	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00196	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN128@SkillWndfu:

; 1054 : 					break;
; 1055 : 				}
; 1056 : 			}
; 1057 : 	}
; 1058 : 	if (mouse.onceState & MOUSE_LEFT_CRICK) {

  00199	a8 01		 test	 al, 1
  0019b	74 2b		 je	 SHORT $LN39@SkillWndfu

; 1059 : 		if (HitDispNo == statusWndFontNo[15]) {

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  001a2	3b 05 3c 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+60
  001a8	75 1e		 jne	 SHORT $LN39@SkillWndfu

; 1060 : 			SkillWndflag = false;
; 1061 : 			play_se(217, 320, 240);

  001aa	68 f0 00 00 00	 push	 240			; 000000f0H
  001af	68 40 01 00 00	 push	 320			; 00000140H
  001b4	68 d9 00 00 00	 push	 217			; 000000d9H
  001b9	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 0 ; SkillWndflag
  001c0	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  001c5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@SkillWndfu:

; 1062 : 		}
; 1063 : 	}
; 1064 : 	extern int BattleSkill[20];
; 1065 : 	extern int AssitSkill[20];
; 1066 : 	extern int AdvanceSkill[20];
; 1067 : 	for (int i = 0; i < 4; i++) {

  001c8	8b 85 e4 fc ff
	ff		 mov	 eax, DWORD PTR _x$1$[ebp]
  001ce	05 8f 00 00 00	 add	 eax, 143		; 0000008fH
  001d3	c7 85 ec fc ff
	ff 04 00 00 00	 mov	 DWORD PTR tv2190[ebp], 4
  001dd	89 85 f8 fc ff
	ff		 mov	 DWORD PTR tv2184[ebp], eax
  001e3	81 c3 d2 00 00
	00		 add	 ebx, 210		; 000000d2H
  001e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@SkillWndfu:

; 1068 : 		for (j = 0; j < 4; j++) {

  001f0	8b f0		 mov	 esi, eax
  001f2	bf 04 00 00 00	 mov	 edi, 4
$LL10@SkillWndfu:

; 1069 : 			StockDispBuffer(x + 143 + j * 60, y + 210 + i * 57, DISP_PRIO_IME3, CG_FIELD_SKILL_TILE, 0);

  001f7	6a 00		 push	 0
  001f9	68 f2 66 00 00	 push	 26354			; 000066f2H
  001fe	6a 69		 push	 105			; 00000069H
  00200	53		 push	 ebx
  00201	56		 push	 esi
  00202	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00207	83 c4 14	 add	 esp, 20			; 00000014H
  0020a	83 c6 3c	 add	 esi, 60			; 0000003cH
  0020d	83 ef 01	 sub	 edi, 1
  00210	75 e5		 jne	 SHORT $LL10@SkillWndfu

; 1062 : 		}
; 1063 : 	}
; 1064 : 	extern int BattleSkill[20];
; 1065 : 	extern int AssitSkill[20];
; 1066 : 	extern int AdvanceSkill[20];
; 1067 : 	for (int i = 0; i < 4; i++) {

  00212	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR tv2184[ebp]
  00218	83 c3 39	 add	 ebx, 57			; 00000039H
  0021b	83 ad ec fc ff
	ff 01		 sub	 DWORD PTR tv2190[ebp], 1
  00222	75 cc		 jne	 SHORT $LL7@SkillWndfu

; 1070 : 		}
; 1071 : 	}
; 1072 : 	int ä¸´æ¶å¾æ X;
; 1073 : 	if (ResoMode == åè¾¨ç::mode800) {

  00224	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00229	83 f8 03	 cmp	 eax, 3
  0022c	75 20		 jne	 SHORT $LN40@SkillWndfu

; 1074 : 		ä¸´æ¶å¾æ X = 800;

  0022e	c7 85 e8 fc ff
	ff 03 02 00 00	 mov	 DWORD PTR $T2[ebp], 515	; 00000203H
  00238	c7 85 e0 fc ff
	ff 58 02 00 00	 mov	 DWORD PTR $T1[ebp], 600	; 00000258H
  00242	c7 85 ec fc ff
	ff b2 02 00 00	 mov	 DWORD PTR $T3[ebp], 690	; 000002b2H

; 1075 : 	}

  0024c	eb 43		 jmp	 SHORT $LN43@SkillWndfu
$LN40@SkillWndfu:

; 1076 : 	else if (ResoMode == åè¾¨ç::mode1024) {

  0024e	83 f8 04	 cmp	 eax, 4
  00251	75 20		 jne	 SHORT $LN42@SkillWndfu

; 1077 : 		ä¸´æ¶å¾æ X = 1024;

  00253	c7 85 e8 fc ff
	ff e3 02 00 00	 mov	 DWORD PTR $T2[ebp], 739	; 000002e3H
  0025d	c7 85 e0 fc ff
	ff 38 03 00 00	 mov	 DWORD PTR $T1[ebp], 824	; 00000338H
  00267	c7 85 ec fc ff
	ff 92 03 00 00	 mov	 DWORD PTR $T3[ebp], 914	; 00000392H

; 1078 : 	}

  00271	eb 1e		 jmp	 SHORT $LN43@SkillWndfu
$LN42@SkillWndfu:

; 1079 : 	else {
; 1080 : 		ä¸´æ¶å¾æ X = 640;

  00273	c7 85 e8 fc ff
	ff 63 01 00 00	 mov	 DWORD PTR $T2[ebp], 355	; 00000163H
  0027d	c7 85 e0 fc ff
	ff b8 01 00 00	 mov	 DWORD PTR $T1[ebp], 440	; 000001b8H
  00287	c7 85 ec fc ff
	ff 12 02 00 00	 mov	 DWORD PTR $T3[ebp], 530	; 00000212H
$LN43@SkillWndfu:

; 1081 : 	}
; 1082 : 
; 1083 : 	sprintf_s(msg, " ");

  00291	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00297	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  0029c	50		 push	 eax
  0029d	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1084 : 	switch (SkillWnd) {

  002a2	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?SkillWnd@@3FA ; SkillWnd
  002a9	83 c4 08	 add	 esp, 8
  002ac	83 e8 00	 sub	 eax, 0
  002af	0f 84 c8 04 00
	00		 je	 $LN44@SkillWndfu
  002b5	83 e8 01	 sub	 eax, 1
  002b8	0f 84 61 02 00
	00		 je	 $LN51@SkillWndfu
  002be	83 e8 01	 sub	 eax, 1
  002c1	0f 85 11 07 00
	00		 jne	 $LN14@SkillWndfu

; 1187 : 	case 2:
; 1188 : #ifdef _READ16BITBMP
; 1189 : 		if (g_bUseAlpha) StockDispBuffer(x + 147, y + 225, DISP_PRIO_IME3, CG_FIELD_SKILL_ADVSK, 0);
; 1190 : 		else
; 1191 : #endif
; 1192 : 			StockDispBuffer(x + 143, y + 223, DISP_PRIO_IME3, CG_FIELD_SKILL_ADVSK, 0);

  002c7	8b b5 f4 fc ff
	ff		 mov	 esi, DWORD PTR _y$1$[ebp]
  002cd	50		 push	 eax
  002ce	68 f3 66 00 00	 push	 26355			; 000066f3H
  002d3	6a 69		 push	 105			; 00000069H
  002d5	8d 86 df 00 00
	00		 lea	 eax, DWORD PTR [esi+223]
  002db	50		 push	 eax
  002dc	ff b5 f8 fc ff
	ff		 push	 DWORD PTR tv2184[ebp]
  002e2	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  002e7	b8 00 00 00 00	 mov	 eax, OFFSET ?AdvanceSkill@@3PAHA ; AdvanceSkill
  002ec	8d 4e 6e	 lea	 ecx, DWORD PTR [esi+110]
  002ef	83 c4 14	 add	 esp, 20			; 00000014H
  002f2	89 85 f0 fc ff
	ff		 mov	 DWORD PTR tv2168[ebp], eax
  002f8	89 8d f8 fc ff
	ff		 mov	 DWORD PTR tv2167[ebp], ecx
  002fe	66 90		 npad	 2
$LL27@SkillWndfu:

; 1194 : 			for (j = 0; j < 4; j++) {

  00300	8b 9d e4 fc ff
	ff		 mov	 ebx, DWORD PTR _x$1$[ebp]
  00306	8b f0		 mov	 esi, eax
  00308	c7 85 f4 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$1$[ebp], 0
$LL30@SkillWndfu:

; 1195 : 				if (AdvanceSkill[j + i * 4] == -1)

  00312	8b 06		 mov	 eax, DWORD PTR [esi]
  00314	83 f8 ff	 cmp	 eax, -1
  00317	0f 84 da 01 00
	00		 je	 $LN25@SkillWndfu

; 1196 : 					break;
; 1197 : 				if (HitDispNo == StockDispBuffer(x + 27 + j * 60, y + 102 + i * 57, DISP_PRIO_IME3 + 1, profession_skill[AdvanceSkill[j + i * 4]].icon, 2)) {

  0031d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00320	c1 e0 06	 shl	 eax, 6
  00323	6a 02		 push	 2
  00325	ff b0 b4 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+180]
  0032b	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0032e	6a 6a		 push	 106			; 0000006aH
  00330	50		 push	 eax
  00331	8d 43 1b	 lea	 eax, DWORD PTR [ebx+27]
  00334	50		 push	 eax
  00335	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0033a	83 c4 14	 add	 esp, 20			; 00000014H
  0033d	39 05 00 00 00
	00		 cmp	 DWORD PTR ?HitDispNo@@3HA, eax ; HitDispNo
  00343	0f 85 42 01 00
	00		 jne	 $LN64@SkillWndfu

; 1198 : 
; 1199 : 					int use_color = 0;
; 1200 : 					if (pc.mp >= profession_skill[AdvanceSkill[j + i * 4]].costmp && profession_skill[AdvanceSkill[j + i * 4]].costmp != 0) {

  00349	8b 06		 mov	 eax, DWORD PTR [esi]
  0034b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0034e	c1 e0 06	 shl	 eax, 6
  00351	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  00357	39 0d 18 00 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+24, ecx
  0035d	7c 08		 jl	 SHORT $LN114@SkillWndfu
  0035f	85 c9		 test	 ecx, ecx
  00361	74 04		 je	 SHORT $LN114@SkillWndfu

; 1201 : 						use_color = FONT_PAL_WHITE;

  00363	33 ff		 xor	 edi, edi

; 1202 : 					}

  00365	eb 05		 jmp	 SHORT $LN62@SkillWndfu
$LN114@SkillWndfu:

; 1203 : 					else {
; 1204 : 						use_color = FONT_PAL_GRAY;

  00367	bf 07 00 00 00	 mov	 edi, 7
$LN62@SkillWndfu:

; 1205 : 					}
; 1206 : 					/*
; 1207 : 					sprintf_s( msg , "%s  %dï¼  (èè´¹MP:%d)"
; 1208 : 					, profession_skill[AdvanceSkill [ j + i * 4 ]].name
; 1209 : 					, profession_skill[AdvanceSkill [ j + i * 4 ]].skill_level
; 1210 : 					, profession_skill[AdvanceSkill [ j + i * 4 ]].costmp
; 1211 : 					);
; 1212 : 					StockFontBuffer( ä¸´æ¶å¾æ X - 285, 306, FONT_PRIO_FRONT, use_color, msg, 0 );
; 1213 : 					*/
; 1214 : 					sprintf_s(msg, "%s", profession_skill[AdvanceSkill[j + i * 4]].name);

  0036c	8d 80 08 00 00
	00		 lea	 eax, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+8]
  00372	50		 push	 eax
  00373	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00379	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0037e	50		 push	 eax
  0037f	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1215 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 285, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  00384	6a 00		 push	 0
  00386	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0038c	50		 push	 eax
  0038d	57		 push	 edi
  0038e	6a 01		 push	 1
  00390	68 32 01 00 00	 push	 306			; 00000132H
  00395	ff b5 e8 fc ff
	ff		 push	 DWORD PTR $T2[ebp]
  0039b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1216 : 
; 1217 : 					sprintf_s(msg, "%dï¼", profession_skill[AdvanceSkill[j + i * 4]].skill_level);

  003a0	8b 06		 mov	 eax, DWORD PTR [esi]
  003a2	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  003a5	c1 e0 06	 shl	 eax, 6
  003a8	ff b0 bc 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+188]
  003ae	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  003b4	68 00 00 00 00	 push	 OFFSET ??_C@_04IMPGGDFH@?$CFd?$KD?$KF@
  003b9	50		 push	 eax
  003ba	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1218 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 200, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  003bf	6a 00		 push	 0
  003c1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  003c7	50		 push	 eax
  003c8	57		 push	 edi
  003c9	6a 01		 push	 1
  003cb	68 32 01 00 00	 push	 306			; 00000132H
  003d0	ff b5 e0 fc ff
	ff		 push	 DWORD PTR $T1[ebp]
  003d6	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1219 : 
; 1220 : 					sprintf_s(msg, "(èè´¹MP:%d)", profession_skill[AdvanceSkill[j + i * 4]].costmp);

  003db	8b 06		 mov	 eax, DWORD PTR [esi]
  003dd	83 c4 48	 add	 esp, 72			; 00000048H
  003e0	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  003e3	c1 e0 06	 shl	 eax, 6
  003e6	ff b0 b8 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  003ec	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  003f2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OMFCIIOF@?$CI?Y?D?$DPMP?3?$CFd?$CJ@
  003f7	50		 push	 eax
  003f8	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1221 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 110, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  003fd	6a 00		 push	 0
  003ff	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00405	50		 push	 eax
  00406	57		 push	 edi
  00407	6a 01		 push	 1
  00409	68 32 01 00 00	 push	 306			; 00000132H
  0040e	ff b5 ec fc ff
	ff		 push	 DWORD PTR $T3[ebp]
  00414	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1222 : 
; 1223 : 					sprintf_s(msg, "%s", profession_skill[AdvanceSkill[j + i * 4]].memo);

  00419	8b 06		 mov	 eax, DWORD PTR [esi]
  0041b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0041e	c1 e0 06	 shl	 eax, 6
  00421	05 5d 00 00 00	 add	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+93
  00426	50		 push	 eax
  00427	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0042d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00432	50		 push	 eax
  00433	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00438	83 c4 30	 add	 esp, 48			; 00000030H

; 1224 : #ifdef _OUTOFBATTLESKILL			// (ä¸å¯å¼) Syu ADD éæææ¶æè½Protocol
; 1225 : 					if (mouse.onceState & MOUSE_LEFT_CRICK && profession_skill[AdvanceSkill[j + i * 4]].useFlag == 0) {

  0043b	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00442	74 47		 je	 SHORT $LN64@SkillWndfu
  00444	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00446	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00449	c1 e0 06	 shl	 eax, 6
  0044c	66 83 b8 00 00
	00 00 00	 cmp	 WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax], 0
  00454	75 35		 jne	 SHORT $LN64@SkillWndfu

; 1226 : 						if (pc.mp >= profession_skill[AdvanceSkill[j + i * 4]].costmp && profession_skill[AdvanceSkill[j + i * 4]].costmp != 0) {

  00456	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  0045c	39 05 18 00 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+24, eax
  00462	7c 27		 jl	 SHORT $LN64@SkillWndfu
  00464	85 c0		 test	 eax, eax
  00466	74 23		 je	 SHORT $LN64@SkillWndfu

; 1227 : 							lssproto_BATTLESKILL_send(sockfd, AdvanceSkill[j + i * 4]);

  00468	51		 push	 ecx
  00469	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0046f	e8 00 00 00 00	 call	 ?lssproto_BATTLESKILL_send@@YAXHH@Z ; lssproto_BATTLESKILL_send

; 1228 : 							play_se(217, 320, 240);

  00474	68 f0 00 00 00	 push	 240			; 000000f0H
  00479	68 40 01 00 00	 push	 320			; 00000140H
  0047e	68 d9 00 00 00	 push	 217			; 000000d9H
  00483	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00488	83 c4 14	 add	 esp, 20			; 00000014H
$LN64@SkillWndfu:

; 1229 : 						}
; 1230 : 					}
; 1231 : #endif
; 1232 : 				}
; 1233 : 				sprintf_s(msg2, "%8s", profession_skill[AdvanceSkill[j + i * 4]].name);

  0048b	8b 06		 mov	 eax, DWORD PTR [esi]
  0048d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00490	c1 e0 06	 shl	 eax, 6
  00493	05 08 00 00 00	 add	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+8
  00498	50		 push	 eax
  00499	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _msg2$[ebp]
  0049f	68 00 00 00 00	 push	 OFFSET ??_C@_03GHDNOBPC@?$CF8s@
  004a4	50		 push	 eax
  004a5	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1234 : 				StockFontBuffer(x + j * 60, y + 110 + i * 57, FONT_PRIO_FRONT, profession_skill[AdvanceSkill[j + i * 4]].useFlag + 1, msg2, 0);

  004aa	6a 00		 push	 0
  004ac	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _msg2$[ebp]
  004b2	50		 push	 eax
  004b3	8b 06		 mov	 eax, DWORD PTR [esi]
  004b5	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  004b8	c1 e0 06	 shl	 eax, 6
  004bb	0f bf 80 00 00
	00 00		 movsx	 eax, WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax]
  004c2	40		 inc	 eax
  004c3	50		 push	 eax
  004c4	6a 01		 push	 1
  004c6	ff b5 f8 fc ff
	ff		 push	 DWORD PTR tv2167[ebp]
  004cc	53		 push	 ebx
  004cd	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  004d2	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _j$1$[ebp]
  004d8	83 c4 24	 add	 esp, 36			; 00000024H
  004db	41		 inc	 ecx
  004dc	83 c6 04	 add	 esi, 4
  004df	83 c3 3c	 add	 ebx, 60			; 0000003cH
  004e2	89 8d f4 fc ff
	ff		 mov	 DWORD PTR _j$1$[ebp], ecx
  004e8	83 f9 04	 cmp	 ecx, 4
  004eb	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR tv2167[ebp]
  004f1	0f 8c 1b fe ff
	ff		 jl	 $LL30@SkillWndfu
$LN25@SkillWndfu:

; 1193 : 		for (int i = 0; i < 4; i++) {

  004f7	8b 85 f0 fc ff
	ff		 mov	 eax, DWORD PTR tv2168[ebp]
  004fd	83 c1 39	 add	 ecx, 57			; 00000039H
  00500	83 c0 10	 add	 eax, 16			; 00000010H
  00503	89 8d f8 fc ff
	ff		 mov	 DWORD PTR tv2167[ebp], ecx
  00509	89 85 f0 fc ff
	ff		 mov	 DWORD PTR tv2168[ebp], eax
  0050f	3d 40 00 00 00	 cmp	 eax, OFFSET ?AdvanceSkill@@3PAHA+64
  00514	0f 8c e6 fd ff
	ff		 jl	 $LL27@SkillWndfu

; 1093 : 				if (AssitSkill[j + i * 4] == -1)

  0051a	e9 b9 04 00 00	 jmp	 $LN14@SkillWndfu
$LN51@SkillWndfu:

; 1133 : 			}
; 1134 : 		}
; 1135 : 		break;
; 1136 : 	case 1:
; 1137 : #ifdef _READ16BITBMP
; 1138 : 		if (g_bUseAlpha) StockDispBuffer(x + 147, y + 225, DISP_PRIO_IME3, CG_FIELD_SKILL_BATTLE, 0);
; 1139 : 		else
; 1140 : #endif
; 1141 : 			StockDispBuffer(x + 143, y + 223, DISP_PRIO_IME3, CG_FIELD_SKILL_BATTLE, 0);

  0051f	8b b5 f4 fc ff
	ff		 mov	 esi, DWORD PTR _y$1$[ebp]
  00525	6a 00		 push	 0
  00527	68 f5 66 00 00	 push	 26357			; 000066f5H
  0052c	6a 69		 push	 105			; 00000069H
  0052e	8d 86 df 00 00
	00		 lea	 eax, DWORD PTR [esi+223]
  00534	50		 push	 eax
  00535	ff b5 f8 fc ff
	ff		 push	 DWORD PTR tv2184[ebp]
  0053b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00540	b8 00 00 00 00	 mov	 eax, OFFSET ?BattleSkill@@3PAHA ; BattleSkill
  00545	8d 4e 6e	 lea	 ecx, DWORD PTR [esi+110]
  00548	83 c4 14	 add	 esp, 20			; 00000014H
  0054b	89 85 f4 fc ff
	ff		 mov	 DWORD PTR tv2158[ebp], eax
  00551	89 8d f8 fc ff
	ff		 mov	 DWORD PTR tv2157[ebp], ecx
$LL21@SkillWndfu:

; 1143 : 			for (j = 0; j < 4; j++) {

  00557	8b 9d e4 fc ff
	ff		 mov	 ebx, DWORD PTR _x$1$[ebp]
  0055d	8b f0		 mov	 esi, eax
  0055f	c7 85 f0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$2$[ebp], 0
  00569	0f 1f 80 00 00
	00 00		 npad	 7
$LL24@SkillWndfu:

; 1144 : 				if (BattleSkill[j + i * 4] == -1)

  00570	8b 06		 mov	 eax, DWORD PTR [esi]
  00572	83 f8 ff	 cmp	 eax, -1
  00575	0f 84 da 01 00
	00		 je	 $LN19@SkillWndfu

; 1145 : 					break;
; 1146 : 				if (HitDispNo == StockDispBuffer(x + 27 + j * 60, y + 102 + i * 57, DISP_PRIO_IME3 + 1, profession_skill[BattleSkill[j + i * 4]].icon, 2)) {

  0057b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0057e	c1 e0 06	 shl	 eax, 6
  00581	6a 02		 push	 2
  00583	ff b0 b4 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+180]
  00589	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0058c	6a 6a		 push	 106			; 0000006aH
  0058e	50		 push	 eax
  0058f	8d 43 1b	 lea	 eax, DWORD PTR [ebx+27]
  00592	50		 push	 eax
  00593	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00598	83 c4 14	 add	 esp, 20			; 00000014H
  0059b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?HitDispNo@@3HA, eax ; HitDispNo
  005a1	0f 85 42 01 00
	00		 jne	 $LN57@SkillWndfu

; 1147 : 
; 1148 : 					int use_color = 0;
; 1149 : 					if (pc.mp >= profession_skill[BattleSkill[j + i * 4]].costmp && profession_skill[BattleSkill[j + i * 4]].costmp != 0) {

  005a7	8b 06		 mov	 eax, DWORD PTR [esi]
  005a9	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  005ac	c1 e0 06	 shl	 eax, 6
  005af	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  005b5	39 0d 18 00 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+24, ecx
  005bb	7c 08		 jl	 SHORT $LN115@SkillWndfu
  005bd	85 c9		 test	 ecx, ecx
  005bf	74 04		 je	 SHORT $LN115@SkillWndfu

; 1150 : 						use_color = FONT_PAL_WHITE;

  005c1	33 ff		 xor	 edi, edi

; 1151 : 					}

  005c3	eb 05		 jmp	 SHORT $LN55@SkillWndfu
$LN115@SkillWndfu:

; 1152 : 					else {
; 1153 : 						use_color = FONT_PAL_GRAY;

  005c5	bf 07 00 00 00	 mov	 edi, 7
$LN55@SkillWndfu:

; 1154 : 					}
; 1155 : 					/*
; 1156 : 					sprintf_s( msg , "%s  %dï¼  (èè´¹MP:%d)"
; 1157 : 					, profession_skill[BattleSkill [ j + i * 4 ]].name
; 1158 : 					, profession_skill[BattleSkill [ j + i * 4 ]].skill_level
; 1159 : 					, profession_skill[BattleSkill [ j + i * 4 ]].costmp
; 1160 : 					);
; 1161 : 					StockFontBuffer( ä¸´æ¶å¾æ X - 285, 306, FONT_PRIO_FRONT, use_color, msg, 0 );
; 1162 : 					*/
; 1163 : 					sprintf_s(msg, "%s", profession_skill[BattleSkill[j + i * 4]].name);

  005ca	8d 80 08 00 00
	00		 lea	 eax, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+8]
  005d0	50		 push	 eax
  005d1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  005d7	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  005dc	50		 push	 eax
  005dd	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1164 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 285, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  005e2	6a 00		 push	 0
  005e4	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  005ea	50		 push	 eax
  005eb	57		 push	 edi
  005ec	6a 01		 push	 1
  005ee	68 32 01 00 00	 push	 306			; 00000132H
  005f3	ff b5 e8 fc ff
	ff		 push	 DWORD PTR $T2[ebp]
  005f9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1165 : 
; 1166 : 					sprintf_s(msg, "%dï¼", profession_skill[BattleSkill[j + i * 4]].skill_level);

  005fe	8b 06		 mov	 eax, DWORD PTR [esi]
  00600	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00603	c1 e0 06	 shl	 eax, 6
  00606	ff b0 bc 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+188]
  0060c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00612	68 00 00 00 00	 push	 OFFSET ??_C@_04IMPGGDFH@?$CFd?$KD?$KF@
  00617	50		 push	 eax
  00618	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1167 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 200, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  0061d	6a 00		 push	 0
  0061f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00625	50		 push	 eax
  00626	57		 push	 edi
  00627	6a 01		 push	 1
  00629	68 32 01 00 00	 push	 306			; 00000132H
  0062e	ff b5 e0 fc ff
	ff		 push	 DWORD PTR $T1[ebp]
  00634	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1168 : 
; 1169 : 					sprintf_s(msg, "(èè´¹MP:%d)", profession_skill[BattleSkill[j + i * 4]].costmp);

  00639	8b 06		 mov	 eax, DWORD PTR [esi]
  0063b	83 c4 48	 add	 esp, 72			; 00000048H
  0063e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00641	c1 e0 06	 shl	 eax, 6
  00644	ff b0 b8 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  0064a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00650	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OMFCIIOF@?$CI?Y?D?$DPMP?3?$CFd?$CJ@
  00655	50		 push	 eax
  00656	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1170 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 110, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  0065b	6a 00		 push	 0
  0065d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00663	50		 push	 eax
  00664	57		 push	 edi
  00665	6a 01		 push	 1
  00667	68 32 01 00 00	 push	 306			; 00000132H
  0066c	ff b5 ec fc ff
	ff		 push	 DWORD PTR $T3[ebp]
  00672	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1171 : 
; 1172 : 					sprintf_s(msg, "%s", profession_skill[BattleSkill[j + i * 4]].memo);

  00677	8b 06		 mov	 eax, DWORD PTR [esi]
  00679	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0067c	c1 e0 06	 shl	 eax, 6
  0067f	05 5d 00 00 00	 add	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+93
  00684	50		 push	 eax
  00685	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0068b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00690	50		 push	 eax
  00691	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00696	83 c4 30	 add	 esp, 48			; 00000030H

; 1173 : #ifdef _OUTOFBATTLESKILL			// (ä¸å¯å¼) Syu ADD éæææ¶æè½Protocol
; 1174 : 					if (mouse.onceState & MOUSE_LEFT_CRICK && profession_skill[BattleSkill[j + i * 4]].useFlag == 0) {

  00699	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  006a0	74 47		 je	 SHORT $LN57@SkillWndfu
  006a2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  006a4	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  006a7	c1 e0 06	 shl	 eax, 6
  006aa	66 83 b8 00 00
	00 00 00	 cmp	 WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax], 0
  006b2	75 35		 jne	 SHORT $LN57@SkillWndfu

; 1175 : 						if (pc.mp >= profession_skill[BattleSkill[j + i * 4]].costmp && profession_skill[BattleSkill[j + i * 4]].costmp != 0) {

  006b4	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  006ba	39 05 18 00 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+24, eax
  006c0	7c 27		 jl	 SHORT $LN57@SkillWndfu
  006c2	85 c0		 test	 eax, eax
  006c4	74 23		 je	 SHORT $LN57@SkillWndfu

; 1176 : 							lssproto_BATTLESKILL_send(sockfd, BattleSkill[j + i * 4]);

  006c6	51		 push	 ecx
  006c7	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  006cd	e8 00 00 00 00	 call	 ?lssproto_BATTLESKILL_send@@YAXHH@Z ; lssproto_BATTLESKILL_send

; 1177 : 							play_se(217, 320, 240);

  006d2	68 f0 00 00 00	 push	 240			; 000000f0H
  006d7	68 40 01 00 00	 push	 320			; 00000140H
  006dc	68 d9 00 00 00	 push	 217			; 000000d9H
  006e1	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  006e6	83 c4 14	 add	 esp, 20			; 00000014H
$LN57@SkillWndfu:

; 1178 : 						}
; 1179 : 					}
; 1180 : #endif
; 1181 : 				}
; 1182 : 				sprintf_s(msg2, "%8s", profession_skill[BattleSkill[j + i * 4]].name);

  006e9	8b 06		 mov	 eax, DWORD PTR [esi]
  006eb	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  006ee	c1 e0 06	 shl	 eax, 6
  006f1	05 08 00 00 00	 add	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+8
  006f6	50		 push	 eax
  006f7	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _msg2$[ebp]
  006fd	68 00 00 00 00	 push	 OFFSET ??_C@_03GHDNOBPC@?$CF8s@
  00702	50		 push	 eax
  00703	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1183 : 				StockFontBuffer(x + j * 60, y + 110 + i * 57, FONT_PRIO_FRONT, profession_skill[BattleSkill[j + i * 4]].useFlag + 1, msg2, 0);

  00708	6a 00		 push	 0
  0070a	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _msg2$[ebp]
  00710	50		 push	 eax
  00711	8b 06		 mov	 eax, DWORD PTR [esi]
  00713	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00716	c1 e0 06	 shl	 eax, 6
  00719	0f bf 80 00 00
	00 00		 movsx	 eax, WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax]
  00720	40		 inc	 eax
  00721	50		 push	 eax
  00722	6a 01		 push	 1
  00724	ff b5 f8 fc ff
	ff		 push	 DWORD PTR tv2157[ebp]
  0072a	53		 push	 ebx
  0072b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00730	8b 8d f0 fc ff
	ff		 mov	 ecx, DWORD PTR _j$2$[ebp]
  00736	83 c4 24	 add	 esp, 36			; 00000024H
  00739	41		 inc	 ecx
  0073a	83 c6 04	 add	 esi, 4
  0073d	83 c3 3c	 add	 ebx, 60			; 0000003cH
  00740	89 8d f0 fc ff
	ff		 mov	 DWORD PTR _j$2$[ebp], ecx
  00746	83 f9 04	 cmp	 ecx, 4
  00749	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR tv2157[ebp]
  0074f	0f 8c 1b fe ff
	ff		 jl	 $LL24@SkillWndfu
$LN19@SkillWndfu:

; 1142 : 		for (int i = 0; i < 4; i++) {

  00755	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR tv2158[ebp]
  0075b	83 c1 39	 add	 ecx, 57			; 00000039H
  0075e	83 c0 10	 add	 eax, 16			; 00000010H
  00761	89 8d f8 fc ff
	ff		 mov	 DWORD PTR tv2157[ebp], ecx
  00767	89 85 f4 fc ff
	ff		 mov	 DWORD PTR tv2158[ebp], eax
  0076d	3d 40 00 00 00	 cmp	 eax, OFFSET ?BattleSkill@@3PAHA+64
  00772	0f 8c df fd ff
	ff		 jl	 $LL21@SkillWndfu

; 1184 : 			}
; 1185 : 		}
; 1186 : 		break;

  00778	e9 5b 02 00 00	 jmp	 $LN14@SkillWndfu
$LN44@SkillWndfu:

; 1085 : 	case 0:
; 1086 : #ifdef _READ16BITBMP
; 1087 : 		if (g_bUseAlpha) StockDispBuffer(x + 147, y + 225, DISP_PRIO_IME3, CG_FIELD_SKILL_ASSIT, 0);
; 1088 : 		else
; 1089 : #endif
; 1090 : 			StockDispBuffer(x + 143, y + 223, DISP_PRIO_IME3, CG_FIELD_SKILL_ASSIT, 0);

  0077d	8b b5 f4 fc ff
	ff		 mov	 esi, DWORD PTR _y$1$[ebp]
  00783	6a 00		 push	 0
  00785	68 f4 66 00 00	 push	 26356			; 000066f4H
  0078a	6a 69		 push	 105			; 00000069H
  0078c	8d 86 df 00 00
	00		 lea	 eax, DWORD PTR [esi+223]
  00792	50		 push	 eax
  00793	ff b5 f8 fc ff
	ff		 push	 DWORD PTR tv2184[ebp]
  00799	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0079e	b8 00 00 00 00	 mov	 eax, OFFSET ?AssitSkill@@3PAHA ; AssitSkill
  007a3	8d 4e 6e	 lea	 ecx, DWORD PTR [esi+110]
  007a6	83 c4 14	 add	 esp, 20			; 00000014H
  007a9	89 85 f4 fc ff
	ff		 mov	 DWORD PTR tv2135[ebp], eax
  007af	89 8d f8 fc ff
	ff		 mov	 DWORD PTR tv2134[ebp], ecx
$LL15@SkillWndfu:

; 1092 : 			for (int j = 0; j < 4; j++) {

  007b5	8b 9d e4 fc ff
	ff		 mov	 ebx, DWORD PTR _x$1$[ebp]
  007bb	8b f0		 mov	 esi, eax
  007bd	c7 85 f0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$1$[ebp], 0
  007c7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL18@SkillWndfu:

; 1093 : 				if (AssitSkill[j + i * 4] == -1)

  007d0	8b 06		 mov	 eax, DWORD PTR [esi]
  007d2	83 f8 ff	 cmp	 eax, -1
  007d5	0f 84 da 01 00
	00		 je	 $LN13@SkillWndfu

; 1094 : 					break;
; 1095 : 				if (HitDispNo == StockDispBuffer(x + 27 + j * 60, y + 102 + i * 57, DISP_PRIO_IME3 + 1, profession_skill[AssitSkill[j + i * 4]].icon, 2)) {

  007db	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  007de	c1 e0 06	 shl	 eax, 6
  007e1	6a 02		 push	 2
  007e3	ff b0 b4 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+180]
  007e9	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  007ec	6a 6a		 push	 106			; 0000006aH
  007ee	50		 push	 eax
  007ef	8d 43 1b	 lea	 eax, DWORD PTR [ebx+27]
  007f2	50		 push	 eax
  007f3	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  007f8	83 c4 14	 add	 esp, 20			; 00000014H
  007fb	39 05 00 00 00
	00		 cmp	 DWORD PTR ?HitDispNo@@3HA, eax ; HitDispNo
  00801	0f 85 42 01 00
	00		 jne	 $LN50@SkillWndfu

; 1096 : 
; 1097 : 					int use_color = 0;
; 1098 : 					if (pc.mp >= profession_skill[AssitSkill[j + i * 4]].costmp && profession_skill[AssitSkill[j + i * 4]].costmp != 0) {

  00807	8b 06		 mov	 eax, DWORD PTR [esi]
  00809	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0080c	c1 e0 06	 shl	 eax, 6
  0080f	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  00815	39 0d 18 00 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+24, ecx
  0081b	7c 08		 jl	 SHORT $LN116@SkillWndfu
  0081d	85 c9		 test	 ecx, ecx
  0081f	74 04		 je	 SHORT $LN116@SkillWndfu

; 1099 : 						use_color = FONT_PAL_WHITE;

  00821	33 ff		 xor	 edi, edi

; 1100 : 					}

  00823	eb 05		 jmp	 SHORT $LN48@SkillWndfu
$LN116@SkillWndfu:

; 1101 : 					else {
; 1102 : 						use_color = FONT_PAL_GRAY;

  00825	bf 07 00 00 00	 mov	 edi, 7
$LN48@SkillWndfu:

; 1103 : 					}
; 1104 : 					/*
; 1105 : 					sprintf_s( msg , "%s  %dï¼  (èè´¹MP:%d)"
; 1106 : 					, profession_skill[AssitSkill [ j + i * 4 ]].name
; 1107 : 					, profession_skill[AssitSkill [ j + i * 4 ]].skill_level
; 1108 : 					, profession_skill[AssitSkill [ j + i * 4 ]].costmp
; 1109 : 					);
; 1110 : 					StockFontBuffer( ä¸´æ¶å¾æ X - 285, 306, FONT_PRIO_FRONT, use_color, msg, 0 );
; 1111 : 					*/
; 1112 : 					sprintf_s(msg, "%s", profession_skill[AssitSkill[j + i * 4]].name);

  0082a	8d 80 08 00 00
	00		 lea	 eax, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+8]
  00830	50		 push	 eax
  00831	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00837	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0083c	50		 push	 eax
  0083d	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1113 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 285, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  00842	6a 00		 push	 0
  00844	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0084a	50		 push	 eax
  0084b	57		 push	 edi
  0084c	6a 01		 push	 1
  0084e	68 32 01 00 00	 push	 306			; 00000132H
  00853	ff b5 e8 fc ff
	ff		 push	 DWORD PTR $T2[ebp]
  00859	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1114 : 
; 1115 : 					sprintf_s(msg, "%dï¼", profession_skill[AssitSkill[j + i * 4]].skill_level);

  0085e	8b 06		 mov	 eax, DWORD PTR [esi]
  00860	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00863	c1 e0 06	 shl	 eax, 6
  00866	ff b0 bc 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+188]
  0086c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00872	68 00 00 00 00	 push	 OFFSET ??_C@_04IMPGGDFH@?$CFd?$KD?$KF@
  00877	50		 push	 eax
  00878	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1116 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 200, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  0087d	6a 00		 push	 0
  0087f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00885	50		 push	 eax
  00886	57		 push	 edi
  00887	6a 01		 push	 1
  00889	68 32 01 00 00	 push	 306			; 00000132H
  0088e	ff b5 e0 fc ff
	ff		 push	 DWORD PTR $T1[ebp]
  00894	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1117 : 
; 1118 : 					sprintf_s(msg, "(ë¹ì©MP:%d)", profession_skill[AssitSkill[j + i * 4]].costmp);

  00899	8b 06		 mov	 eax, DWORD PTR [esi]
  0089b	83 c4 48	 add	 esp, 72			; 00000048H
  0089e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  008a1	c1 e0 06	 shl	 eax, 6
  008a4	ff b0 b8 00 00
	00		 push	 DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  008aa	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  008b0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MPGNHMDP@?$CI?$LK?q?$LP?kMP?3?$CFd?$CJ@
  008b5	50		 push	 eax
  008b6	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1119 : 					StockFontBuffer(ä¸´æ¶å¾æ X - 110, 306, FONT_PRIO_FRONT, use_color, msg, 0);

  008bb	6a 00		 push	 0
  008bd	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  008c3	50		 push	 eax
  008c4	57		 push	 edi
  008c5	6a 01		 push	 1
  008c7	68 32 01 00 00	 push	 306			; 00000132H
  008cc	ff b5 ec fc ff
	ff		 push	 DWORD PTR $T3[ebp]
  008d2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1120 : 
; 1121 : 					sprintf_s(msg, "%s", profession_skill[AssitSkill[j + i * 4]].memo);

  008d7	8b 06		 mov	 eax, DWORD PTR [esi]
  008d9	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  008dc	c1 e0 06	 shl	 eax, 6
  008df	05 5d 00 00 00	 add	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+93
  008e4	50		 push	 eax
  008e5	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  008eb	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  008f0	50		 push	 eax
  008f1	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  008f6	83 c4 30	 add	 esp, 48			; 00000030H

; 1122 : #ifdef _OUTOFBATTLESKILL			// (ä¸å¯å¼) Syu ADD éæææ¶æè½Protocol
; 1123 : 					if (mouse.onceState & MOUSE_LEFT_CRICK && profession_skill[AssitSkill[j + i * 4]].useFlag == 0) {

  008f9	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00900	74 47		 je	 SHORT $LN50@SkillWndfu
  00902	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00904	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00907	c1 e0 06	 shl	 eax, 6
  0090a	66 83 b8 00 00
	00 00 00	 cmp	 WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax], 0
  00912	75 35		 jne	 SHORT $LN50@SkillWndfu

; 1124 : 						if (pc.mp >= profession_skill[AssitSkill[j + i * 4]].costmp && profession_skill[AssitSkill[j + i * 4]].costmp != 0) {

  00914	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax+184]
  0091a	39 05 18 00 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+24, eax
  00920	7c 27		 jl	 SHORT $LN50@SkillWndfu
  00922	85 c0		 test	 eax, eax
  00924	74 23		 je	 SHORT $LN50@SkillWndfu

; 1125 : 							lssproto_BATTLESKILL_send(sockfd, AssitSkill[j + i * 4]);

  00926	51		 push	 ecx
  00927	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0092d	e8 00 00 00 00	 call	 ?lssproto_BATTLESKILL_send@@YAXHH@Z ; lssproto_BATTLESKILL_send

; 1126 : 							play_se(217, 320, 240);

  00932	68 f0 00 00 00	 push	 240			; 000000f0H
  00937	68 40 01 00 00	 push	 320			; 00000140H
  0093c	68 d9 00 00 00	 push	 217			; 000000d9H
  00941	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00946	83 c4 14	 add	 esp, 20			; 00000014H
$LN50@SkillWndfu:

; 1127 : 						}
; 1128 : 					}
; 1129 : #endif
; 1130 : 				}
; 1131 : 				sprintf_s(msg2, "%8s", profession_skill[AssitSkill[j + i * 4]].name);

  00949	8b 06		 mov	 eax, DWORD PTR [esi]
  0094b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0094e	c1 e0 06	 shl	 eax, 6
  00951	05 08 00 00 00	 add	 eax, OFFSET ?profession_skill@@3PAUPROFESSION_SKILL@@A+8
  00956	50		 push	 eax
  00957	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _msg2$[ebp]
  0095d	68 00 00 00 00	 push	 OFFSET ??_C@_03GHDNOBPC@?$CF8s@
  00962	50		 push	 eax
  00963	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1132 : 				StockFontBuffer(x + j * 60, y + 110 + i * 57, FONT_PRIO_FRONT, profession_skill[AssitSkill[j + i * 4]].useFlag + 1, msg2, 0);

  00968	6a 00		 push	 0
  0096a	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _msg2$[ebp]
  00970	50		 push	 eax
  00971	8b 06		 mov	 eax, DWORD PTR [esi]
  00973	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00976	c1 e0 06	 shl	 eax, 6
  00979	0f bf 80 00 00
	00 00		 movsx	 eax, WORD PTR ?profession_skill@@3PAUPROFESSION_SKILL@@A[eax]
  00980	40		 inc	 eax
  00981	50		 push	 eax
  00982	6a 01		 push	 1
  00984	ff b5 f8 fc ff
	ff		 push	 DWORD PTR tv2134[ebp]
  0098a	53		 push	 ebx
  0098b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00990	8b 8d f0 fc ff
	ff		 mov	 ecx, DWORD PTR _j$1$[ebp]
  00996	83 c4 24	 add	 esp, 36			; 00000024H
  00999	41		 inc	 ecx
  0099a	83 c6 04	 add	 esi, 4
  0099d	83 c3 3c	 add	 ebx, 60			; 0000003cH
  009a0	89 8d f0 fc ff
	ff		 mov	 DWORD PTR _j$1$[ebp], ecx
  009a6	83 f9 04	 cmp	 ecx, 4
  009a9	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR tv2134[ebp]
  009af	0f 8c 1b fe ff
	ff		 jl	 $LL18@SkillWndfu
$LN13@SkillWndfu:

; 1091 : 		for (int i = 0; i < 4; i++) {

  009b5	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR tv2135[ebp]
  009bb	83 c1 39	 add	 ecx, 57			; 00000039H
  009be	83 c0 10	 add	 eax, 16			; 00000010H
  009c1	89 8d f8 fc ff
	ff		 mov	 DWORD PTR tv2134[ebp], ecx
  009c7	89 85 f4 fc ff
	ff		 mov	 DWORD PTR tv2135[ebp], eax
  009cd	3d 40 00 00 00	 cmp	 eax, OFFSET ?AssitSkill@@3PAHA+64
  009d2	0f 8c dd fd ff
	ff		 jl	 $LL15@SkillWndfu
$LN14@SkillWndfu:

; 1235 : 			}
; 1236 : 		}
; 1237 : 		break;
; 1238 : 	}
; 1239 : 	char *splitPoint = msg;

  009d8	8d b5 fc fe ff
	ff		 lea	 esi, DWORD PTR _msg$[ebp]

; 1240 : 	sprintf_s(buf, "%s", msg);

  009de	8b c6		 mov	 eax, esi
  009e0	50		 push	 eax
  009e1	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  009e7	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  009ec	50		 push	 eax
  009ed	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 1241 : 	x = ä¸´æ¶å¾æ X - 285;
; 1242 : 	y = 340;
; 1243 : 	while (1) {
; 1244 : 		if (strlen(splitPoint) > 34) {

  009f2	8b ce		 mov	 ecx, esi
  009f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  009f7	bf 54 01 00 00	 mov	 edi, 340		; 00000154H
  009fc	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  009ff	90		 npad	 1
$LL129@SkillWndfu:
  00a00	8a 01		 mov	 al, BYTE PTR [ecx]
  00a02	41		 inc	 ecx
  00a03	84 c0		 test	 al, al
  00a05	75 f9		 jne	 SHORT $LL129@SkillWndfu
  00a07	8b 9d e8 fc ff
	ff		 mov	 ebx, DWORD PTR $T2[ebp]
  00a0d	2b ca		 sub	 ecx, edx
  00a0f	83 f9 22	 cmp	 ecx, 34			; 00000022H
  00a12	76 7a		 jbe	 SHORT $LN65@SkillWndfu
$LL31@SkillWndfu:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 331  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(

  00a14	6a 22		 push	 34			; 00000022H
  00a16	56		 push	 esi
  00a17	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00a1d	68 00 01 00 00	 push	 256			; 00000100H
  00a22	50		 push	 eax
  00a23	e8 00 00 00 00	 call	 _strncpy_s
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 1247 : 			if (GetStrLastByte(buf) == 3) {

  00a28	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00a2e	c6 85 1e fe ff
	ff 00		 mov	 BYTE PTR _buf$[ebp+34], 0
  00a35	50		 push	 eax
  00a36	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  00a3b	83 c4 14	 add	 esp, 20			; 00000014H
  00a3e	83 f8 03	 cmp	 eax, 3
  00a41	75 0e		 jne	 SHORT $LN67@SkillWndfu

; 1248 : 				buf[33] = NULL;

  00a43	c6 85 1d fe ff
	ff 00		 mov	 BYTE PTR _buf$[ebp+33], 0

; 1249 : 				splitPoint += 33;

  00a4a	b8 21 00 00 00	 mov	 eax, 33			; 00000021H

; 1250 : 			}

  00a4f	eb 0c		 jmp	 SHORT $LN68@SkillWndfu
$LN67@SkillWndfu:

; 1251 : 			else {
; 1252 : 				buf[34] = NULL;

  00a51	c6 85 1e fe ff
	ff 00		 mov	 BYTE PTR _buf$[ebp+34], 0

; 1253 : 				splitPoint += 34;

  00a58	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
$LN68@SkillWndfu:

; 1254 : 			}
; 1255 : 			StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, buf, 0); y += 24;

  00a5d	6a 00		 push	 0
  00a5f	03 f0		 add	 esi, eax
  00a61	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00a67	50		 push	 eax
  00a68	6a 00		 push	 0
  00a6a	6a 01		 push	 1
  00a6c	57		 push	 edi
  00a6d	53		 push	 ebx
  00a6e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00a73	8b ce		 mov	 ecx, esi
  00a75	83 c4 18	 add	 esp, 24			; 00000018H
  00a78	83 c7 18	 add	 edi, 24			; 00000018H
  00a7b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00a7e	66 90		 npad	 2
$LL130@SkillWndfu:

; 1241 : 	x = ä¸´æ¶å¾æ X - 285;
; 1242 : 	y = 340;
; 1243 : 	while (1) {
; 1244 : 		if (strlen(splitPoint) > 34) {

  00a80	8a 01		 mov	 al, BYTE PTR [ecx]
  00a82	41		 inc	 ecx
  00a83	84 c0		 test	 al, al
  00a85	75 f9		 jne	 SHORT $LL130@SkillWndfu
  00a87	2b ca		 sub	 ecx, edx
  00a89	83 f9 22	 cmp	 ecx, 34			; 00000022H
  00a8c	77 86		 ja	 SHORT $LL31@SkillWndfu
$LN65@SkillWndfu:

; 1256 : 		}
; 1257 : 		else {
; 1258 : 			strcpy(buf, splitPoint);

  00a8e	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00a94	2b ce		 sub	 ecx, esi
$LL76@SkillWndfu:
  00a96	8a 06		 mov	 al, BYTE PTR [esi]
  00a98	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00a9b	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  00a9f	84 c0		 test	 al, al
  00aa1	75 f3		 jne	 SHORT $LL76@SkillWndfu

; 1259 : 			StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, buf, 0);

  00aa3	6a 00		 push	 0
  00aa5	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00aab	50		 push	 eax
  00aac	6a 00		 push	 0
  00aae	6a 01		 push	 1
  00ab0	57		 push	 edi
  00ab1	53		 push	 ebx
  00ab2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 1260 : 			break;
; 1261 : 		}
; 1262 : 	}
; 1263 : 
; 1264 : #endif
; 1265 : }

  00ab7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00aba	83 c4 18	 add	 esp, 24			; 00000018H
  00abd	33 cd		 xor	 ecx, ebp
  00abf	5f		 pop	 edi
  00ac0	5e		 pop	 esi
  00ac1	5b		 pop	 ebx
  00ac2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ac7	8b e5		 mov	 esp, ebp
  00ac9	5d		 pop	 ebp
  00aca	c3		 ret	 0
?SkillWndfunc2@@YAXXZ ENDP				; SkillWndfunc2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?RIDEPET_getRIDEno@@YAHHH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_ti$ = 12						; size = 4
?RIDEPET_getRIDEno@@YAHHH@Z PROC			; RIDEPET_getRIDEno, COMDAT

; 19676: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19677: 	if (index < 0 || index >= sizeof(RideNoList) / sizeof(tagRideNoList))

  00003	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _ti$[ebp]
  00009	85 c0		 test	 eax, eax
  0000b	78 18		 js	 SHORT $LN3@RIDEPET_ge
  0000d	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  00010	73 13		 jae	 SHORT $LN3@RIDEPET_ge

; 19679: 	if (ti < 0 || ti >= MAXNOINDEX)

  00012	83 f9 1a	 cmp	 ecx, 26			; 0000001aH
  00015	77 0e		 ja	 SHORT $LN3@RIDEPET_ge

; 19680: 		return -1;
; 19681: 	return RideNoList[index].RideNo[ti];

  00017	6b c0 1b	 imul	 eax, eax, 27
  0001a	03 c1		 add	 eax, ecx
  0001c	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?RideNoList@@3PAUtagRideNoList@@A[eax*4]

; 19682: }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN3@RIDEPET_ge:

; 19678: 		return -1;

  00025	83 c8 ff	 or	 eax, -1

; 19682: }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?RIDEPET_getRIDEno@@YAHHH@Z ENDP			; RIDEPET_getRIDEno
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?RIDEPET_getPETindex@@YAHHH@Z
_TEXT	SEGMENT
_PetNo$ = 8						; size = 4
_learnCode$ = 12					; size = 4
?RIDEPET_getPETindex@@YAHHH@Z PROC			; RIDEPET_getPETindex, COMDAT

; 19664: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19665: 	int i;
; 19666: 	for (i = 0; i < sizeof(RideCodeMode) / sizeof(tagRideCodeMode); i++) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _learnCode$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	8b 55 08	 mov	 edx, DWORD PTR _PetNo$[ebp]
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RIDEPET_ge:

; 19667: 		if (RideCodeMode[i].petNo == PetNo &&

  00010	39 14 c5 00 00
	00 00		 cmp	 DWORD PTR ?RideCodeMode@@3PAUtagRideCodeMode@@A[eax*8], edx
  00017	75 09		 jne	 SHORT $LN2@RIDEPET_ge
  00019	85 0c c5 04 00
	00 00		 test	 DWORD PTR ?RideCodeMode@@3PAUtagRideCodeMode@@A[eax*8+4], ecx
  00020	75 09		 jne	 SHORT $LN1@RIDEPET_ge
$LN2@RIDEPET_ge:

; 19665: 	int i;
; 19666: 	for (i = 0; i < sizeof(RideCodeMode) / sizeof(tagRideCodeMode); i++) {

  00022	40		 inc	 eax
  00023	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00026	72 e8		 jb	 SHORT $LL4@RIDEPET_ge

; 19668: 			(RideCodeMode[i].learnCode & learnCode))
; 19669: 			return i;
; 19670: 	}
; 19671: 	return -1;

  00028	83 c8 ff	 or	 eax, -1
$LN1@RIDEPET_ge:

; 19672: }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?RIDEPET_getPETindex@@YAHHH@Z ENDP			; RIDEPET_getPETindex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?RIDEPET_getNOindex@@YAHH@Z
_TEXT	SEGMENT
_baseNo$ = 8						; size = 4
?RIDEPET_getNOindex@@YAHH@Z PROC			; RIDEPET_getNOindex, COMDAT

; 19654: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19655: 	int i;
; 19656: 	for (i = 0; i < sizeof(RPlistMode) / sizeof(tagRidePetList); i++) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _baseNo$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@RIDEPET_ge:

; 19657: 		if (RPlistMode[i].charNo == baseNo)

  00010	39 0c c5 00 00
	00 00		 cmp	 DWORD PTR ?RPlistMode@@3PAUtagRidePetList@@A[eax*8], ecx
  00017	74 0b		 je	 SHORT $LN8@RIDEPET_ge

; 19655: 	int i;
; 19656: 	for (i = 0; i < sizeof(RPlistMode) / sizeof(tagRidePetList); i++) {

  00019	40		 inc	 eax
  0001a	83 f8 30	 cmp	 eax, 48			; 00000030H
  0001d	72 f1		 jb	 SHORT $LL4@RIDEPET_ge

; 19659: 	}
; 19660: 	return -1;

  0001f	83 c8 ff	 or	 eax, -1

; 19661: }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN8@RIDEPET_ge:

; 19658: 			return RPlistMode[i].Noindex;

  00024	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?RPlistMode@@3PAUtagRidePetList@@A[eax*8+4]

; 19661: }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?RIDEPET_getNOindex@@YAHH@Z ENDP			; RIDEPET_getNOindex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?checkRidePet@@YAXH@Z
_TEXT	SEGMENT
_buf$1 = -68						; size = 64
_buf$2 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_pindex$ = 8						; size = 4
?checkRidePet@@YAXH@Z PROC				; checkRidePet, COMDAT

; 19518: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 19519: 	int j;
; 19520: #ifdef _PET_ITEM
; 19521: 	BOOL	bHavePetItem = FALSE;

  00011	33 db		 xor	 ebx, ebx
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _pindex$[ebp]

; 19522: #endif
; 19523: 
; 19524: 	if (!bNewServer)

  00017	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?bNewServer@@3HA, ebx ; bNewServer
  0001d	0f 84 60 01 00
	00		 je	 $LN12@checkRideP

; 19525: 		return;
; 19526: #ifdef _PET_ITEM
; 19527: 	// å® èº«ä¸æè£å¤ä¸å¯éª
; 19528: 	for (j = 0; j < MAX_PET_ITEM; ++j) {

  00023	33 c9		 xor	 ecx, ecx
  00025	69 d6 78 0b 00
	00		 imul	 edx, esi, 2936
  0002b	8d 82 58 01 00
	00		 lea	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+344]
$LL4@checkRideP:

; 19529: 		if (pet[pindex].item[j].useFlag) {	// èº«ä¸æè£è£å¤

  00031	66 39 18	 cmp	 WORD PTR [eax], bx
  00034	75 0d		 jne	 SHORT $LN17@checkRideP

; 19525: 		return;
; 19526: #ifdef _PET_ITEM
; 19527: 	// å® èº«ä¸æè£å¤ä¸å¯éª
; 19528: 	for (j = 0; j < MAX_PET_ITEM; ++j) {

  00036	41		 inc	 ecx
  00037	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  0003c	83 f9 07	 cmp	 ecx, 7
  0003f	7c f0		 jl	 SHORT $LL4@checkRideP

; 19529: 		if (pet[pindex].item[j].useFlag) {	// èº«ä¸æè£è£å¤

  00041	eb 05		 jmp	 SHORT $LN3@checkRideP
$LN17@checkRideP:

; 19530: 			bHavePetItem = TRUE;

  00043	bb 01 00 00 00	 mov	 ebx, 1
$LN3@checkRideP:

; 19531: 			break;
; 19532: 		}
; 19533: 	}
; 19534: #endif
; 19535: 	if (pc.ridePetNo < 0
; 19536: 		&& pc.learnride >= pet[pindex].level //Change fix è¿éè¢«æ³¨è§£æäº 20050801æå¼
; 19537: 		//&& (pc.level + 5) > pet[pindex].level
; 19538: 		// íí¸ íì¹ ë ë²¨ ë¶ë¶
; 19539: 		// ìºë¦­í° ë ë²¨ + (( ìºë¦­í° íì * 5 )+ 5 )
; 19540: 		// 0í : 5
; 19541: 		// 1í : 10
; 19542: 		// 2í : 15
; 19543: 		// 3í : 20
; 19544: 		// 4í : 25
; 19545: 		// 5í : 30
; 19546: 		// 6í : 35
; 19547: 		&& (pc.level + ((pc.transmigration * 5) + 5)) >= pet[pindex].level
; 19548: 		&& pet[pindex].ai >= 100
; 19549: 		&& pc.graNo != SPR_pet021
; 19550: 		&& pc.graNo != 100362 //éé£
; 19551: #ifdef _PETSKILL_BECOMEPIG // ä¹ååä¸­ä¸å¯éª
; 19552: 		&& pc.graNo != 100250
; 19553: #endif
; 19554: 
; 19555: #ifdef _PET_2TRANS // äºè½¬å® ä¸å¯éª
; 19556: 		&& pet[pindex].trn <= 1

  00048	83 3d 18 51 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20760, 0
  0004f	0f 8d 2e 01 00
	00		 jge	 $LN12@checkRideP
  00055	57		 push	 edi
  00056	8b ba 20 00 00
	00		 mov	 edi, DWORD PTR ?pet@@3PAUPET@@A[edx+32]
  0005c	39 3d 1c 51 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20764, edi
  00062	0f 8c 1a 01 00
	00		 jl	 $LN21@checkRideP
  00068	0f bf 0d f4 50
	00 00		 movsx	 ecx, WORD PTR ?pc@@3UPC@@A+20724
  0006f	a1 38 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+56
  00074	41		 inc	 ecx
  00075	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00078	03 c1		 add	 eax, ecx
  0007a	3b c7		 cmp	 eax, edi
  0007c	0f 8c 00 01 00
	00		 jl	 $LN21@checkRideP
  00082	83 ba 30 00 00
	00 64		 cmp	 DWORD PTR ?pet@@3PAUPET@@A[edx+48], 100 ; 00000064H
  00089	0f 8c f3 00 00
	00		 jl	 $LN21@checkRideP
  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A
  00094	3d a3 87 01 00	 cmp	 eax, 100259		; 000187a3H
  00099	0f 84 e3 00 00
	00		 je	 $LN21@checkRideP
  0009f	3d 0a 88 01 00	 cmp	 eax, 100362		; 0001880aH
  000a4	0f 84 d8 00 00
	00		 je	 $LN21@checkRideP
  000aa	3d 9a 87 01 00	 cmp	 eax, 100250		; 0001879aH
  000af	0f 84 cd 00 00
	00		 je	 $LN21@checkRideP
  000b5	83 ba 48 00 00
	00 01		 cmp	 DWORD PTR ?pet@@3PAUPET@@A[edx+72], 1
  000bc	0f 8f c0 00 00
	00		 jg	 $LN21@checkRideP

; 19557: #endif
; 19558: 		)
; 19559: 	{
; 19560: #ifdef _PET_ITEM
; 19561: 		pc.ridePetNo = -1;

  000c2	c7 05 18 51 00
	00 ff ff ff ff	 mov	 DWORD PTR ?pc@@3UPC@@A+20760, -1

; 19562: 		if (bHavePetItem) {	// æè£å¤ä¸å¯éª

  000cc	85 db		 test	 ebx, ebx
  000ce	74 2c		 je	 SHORT $LN8@checkRideP

; 19563: 			StockChatBufferLine("í«ì¥ë¹ê° ì¥ì°©ëìì¼ë©´ íì¹í ììì´ìï¼", FONT_PAL_YELLOW);

  000d0	6a 00		 push	 0
  000d2	6a 04		 push	 4
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@OILGNOPA@?F?j?$MA?e?$LK?q?$LA?$KB?5?$MA?e?B?x?$LF?G?$MA?V?$MA?$LI?$LI?i?5?E?$LO?$LN?B?G?R?$LM?v?$LO@
  000d9	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19564: 			pc.selectPetNo[pindex] = 0;

  000e1	33 c0		 xor	 eax, eax
  000e3	66 89 04 75 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[esi*2+172], ax
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi

; 19628: 					return;
; 19629: 				}
; 19630: 			}
; 19631: #else
; 19632: 			unsigned int LRCode = 1 << 30;
; 19633: 			if ((ti = RIDEPET_getPETindex(pet[pindex].graNo, pc.lowsride)) < 0) {
; 19634: 			}
; 19635: 			if ((index = RIDEPET_getNOindex(pc.baseGraNo)) >= 0) {
; 19636: 				char buf[64];
; 19637: 				if (RIDEPET_getRIDEno(index, ti) >= 0) {
; 19638: 
; 19639: 					sprintf(buf, "R|P|%d", pindex);
; 19640: 					if (bNewServer)
; 19641: 						lssproto_FM_send(sockfd, buf);
; 19642: 					else
; 19643: 						old_lssproto_FM_send(sockfd, buf);
; 19644: 					pc.ridePetNo = pindex;
; 19645: 					return;
; 19646: 				}
; 19647: 			}
; 19648: #endif
; 19649: 		}
; 19650: 	}
; 19651: }

  000ed	5b		 pop	 ebx
  000ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f1	33 cd		 xor	 ecx, ebp
  000f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
$LN8@checkRideP:

; 19565: 			return;
; 19566: 		}
; 19567: #endif
; 19568: #ifdef _NB_å¯éªä¹ä»»ä½å® ç©
; 19569: 		{
; 19570: 			char buf[64];
; 19571: 			sprintf(buf, "R|P|%d", pindex);

  000fc	56		 push	 esi
  000fd	8d 45 bc	 lea	 eax, DWORD PTR _buf$2[ebp]
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_06IMNEOPOC@R?$HMP?$HM?$CFd@
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _sprintf
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19572: 			if (bNewServer)

  0010e	8d 45 bc	 lea	 eax, DWORD PTR _buf$2[ebp]
  00111	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  00118	50		 push	 eax
  00119	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0011f	74 07		 je	 SHORT $LN9@checkRideP

; 19573: 				lssproto_FM_send(sockfd, buf);

  00121	e8 00 00 00 00	 call	 ?lssproto_FM_send@@YAXHPAD@Z ; lssproto_FM_send
  00126	eb 05		 jmp	 SHORT $LN22@checkRideP
$LN9@checkRideP:

; 19574: 			else
; 19575: 				old_lssproto_FM_send(sockfd, buf);

  00128	e8 00 00 00 00	 call	 ?old_lssproto_FM_send@@YAXHPAD@Z ; old_lssproto_FM_send
$LN22@checkRideP:

; 19576: 			pc.ridePetNo = pindex;
; 19577: 		}
; 19578: #else
; 19579: 		for (j = 0; j < sizeof(ridePetTable) / sizeof(tagRidePetTable); j++) {
; 19580: 			int baseimageNo = pc.graNo - (pc.graNo % 5);
; 19581: 			int leaderimageNo = 100700 + ((baseimageNo - 100000) / 20) * 10 + (pc.familySprite) * 5;
; 19582: 			//andy_edit
; 19583: 			if (((ridePetTable[j].charNo == pc.graNo) || (ridePetTable[j].charNo == pc.baseGraNo)) && ridePetTable[j].petNo == pet[pindex].graNo) {
; 19584: 				char buf[64];
; 19585: 				sprintf(buf, "R|P|%d", pindex);
; 19586: 				if (bNewServer)
; 19587: 					lssproto_FM_send(sockfd, buf);
; 19588: 				else
; 19589: 					old_lssproto_FM_send(sockfd, buf);
; 19590: 				pc.ridePetNo = pindex;
; 19591: 				return;
; 19592: 			}
; 19593: #ifdef _LEADERRIDE
; 19594: 			if (ridePetTable[j].charNo == leaderimageNo && ridePetTable[j].petNo == pet[pindex].graNo &&
; 19595: 				pc.big4fm != 0 && pc.familyleader != FMMEMBER_APPLY && pc.familyleader != FMMEMBER_NONE) {
; 19596: 				char buf[64];
; 19597: 				sprintf(buf, "R|P|%d", pindex);
; 19598: 				if (bNewServer)
; 19599: 					lssproto_FM_send(sockfd, buf);
; 19600: 				else
; 19601: 					old_lssproto_FM_send(sockfd, buf);
; 19602: 				pc.ridePetNo = pindex;
; 19603: 				return;
; 19604: 			}
; 19605: #endif
; 19606: 		}
; 19607: #endif
; 19608: 		{
; 19609: #ifdef _PET_ITEM
; 19610: 			if (bHavePetItem) {	// æè£å¤ä¸å¯éª
; 19611: 				StockChatBufferLine("í«ì¥ë¹ê° ì¥ì°©ëìì¼ë©´ íììì´ìï¼", FONT_PAL_YELLOW);
; 19612: 				pc.selectPetNo[pindex] = 0;
; 19613: 				return;
; 19614: 			}
; 19615: #endif
; 19616: 			//andy_add æ°éªå® 
; 19617: 			int ti = -1, index;
; 19618: #ifdef _NB_å¯éªä¹ä»»ä½å® ç©
; 19619: 			{
; 19620: 				if ((index = RIDEPET_getNOindex(pc.baseGraNo)) >= 0) {

  0012d	83 c4 08	 add	 esp, 8
  00130	89 35 18 51 00
	00		 mov	 DWORD PTR ?pc@@3UPC@@A+20760, esi
  00136	ff 35 50 51 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+20816
  0013c	e8 00 00 00 00	 call	 ?RIDEPET_getNOindex@@YAHH@Z ; RIDEPET_getNOindex
  00141	83 c4 04	 add	 esp, 4
  00144	85 c0		 test	 eax, eax
  00146	78 3a		 js	 SHORT $LN21@checkRideP

; 19621: 					char buf[64];
; 19622: 					sprintf(buf, "R|P|%d", pindex);

  00148	56		 push	 esi
  00149	8d 45 bc	 lea	 eax, DWORD PTR _buf$1[ebp]
  0014c	68 00 00 00 00	 push	 OFFSET ??_C@_06IMNEOPOC@R?$HMP?$HM?$CFd@
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 _sprintf
  00157	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19623: 					if (bNewServer)

  0015a	8d 45 bc	 lea	 eax, DWORD PTR _buf$1[ebp]
  0015d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  00164	50		 push	 eax
  00165	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0016b	74 07		 je	 SHORT $LN13@checkRideP

; 19624: 						lssproto_FM_send(sockfd, buf);

  0016d	e8 00 00 00 00	 call	 ?lssproto_FM_send@@YAXHPAD@Z ; lssproto_FM_send
  00172	eb 05		 jmp	 SHORT $LN23@checkRideP
$LN13@checkRideP:

; 19625: 					else
; 19626: 						old_lssproto_FM_send(sockfd, buf);

  00174	e8 00 00 00 00	 call	 ?old_lssproto_FM_send@@YAXHPAD@Z ; old_lssproto_FM_send
$LN23@checkRideP:

; 19627: 					pc.ridePetNo = pindex;

  00179	83 c4 08	 add	 esp, 8
  0017c	89 35 18 51 00
	00		 mov	 DWORD PTR ?pc@@3UPC@@A+20760, esi
$LN21@checkRideP:
  00182	5f		 pop	 edi
$LN12@checkRideP:

; 19628: 					return;
; 19629: 				}
; 19630: 			}
; 19631: #else
; 19632: 			unsigned int LRCode = 1 << 30;
; 19633: 			if ((ti = RIDEPET_getPETindex(pet[pindex].graNo, pc.lowsride)) < 0) {
; 19634: 			}
; 19635: 			if ((index = RIDEPET_getNOindex(pc.baseGraNo)) >= 0) {
; 19636: 				char buf[64];
; 19637: 				if (RIDEPET_getRIDEno(index, ti) >= 0) {
; 19638: 
; 19639: 					sprintf(buf, "R|P|%d", pindex);
; 19640: 					if (bNewServer)
; 19641: 						lssproto_FM_send(sockfd, buf);
; 19642: 					else
; 19643: 						old_lssproto_FM_send(sockfd, buf);
; 19644: 					pc.ridePetNo = pindex;
; 19645: 					return;
; 19646: 				}
; 19647: 			}
; 19648: #endif
; 19649: 		}
; 19650: 	}
; 19651: }

  00183	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00186	5e		 pop	 esi
  00187	33 cd		 xor	 ecx, ebp
  00189	5b		 pop	 ebx
  0018a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018f	8b e5		 mov	 esp, ebp
  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
?checkRidePet@@YAXH@Z ENDP				; checkRidePet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ??__EtaskBarY@@YAXXZ
text$di	SEGMENT
??__EtaskBarY@@YAXXZ PROC				; `dynamic initializer for 'taskBarY'', COMDAT

; 666  : static int taskBarX = TASK_BAR_X, taskBarY = TASK_BAR_Y + 24;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00005	05 ec 01 00 00	 add	 eax, 492		; 000001ecH
  0000a	a3 00 00 00 00	 mov	 DWORD PTR ?taskBarY@@3HA, eax
  0000f	c3		 ret	 0
??__EtaskBarY@@YAXXZ ENDP				; `dynamic initializer for 'taskBarY''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??1Ranking@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Ranking@@QAE@XZ PROC					; Ranking::~Ranking, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Ranking@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 2227 :         return _BUF_SIZE <= _Myres;

  00030	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00033	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00036	72 0d		 jb	 SHORT $LN7@Ranking

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00038	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00039	50		 push	 eax
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00042	83 c4 08	 add	 esp, 8
$LN7@Ranking:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00045	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0004c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00053	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	5e		 pop	 esi
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Ranking@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??1Ranking@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Ranking@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Ranking@@QAE@XZ ENDP					; Ranking::~Ranking
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?Calculate@Ranking@@QAEXABUPET@@@Z
_TEXT	SEGMENT
tv2274 = -32						; size = 8
tv2071 = -24						; size = 8
tv2064 = -16						; size = 8
__real@3fa999999999999a$1$ = -8				; size = 8
_pet$ = 8						; size = 4
?Calculate@Ranking@@QAEXABUPET@@@Z PROC			; Ranking::Calculate, COMDAT
; _this$ = ecx

; 169  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 170  : 
; 171  : 		fvit = pet.DATAHP;
; 172  : 		fstr = pet.DATASTR;
; 173  : 		ftgh = pet.DATATGH;
; 174  : 		fdex = pet.DATADEX;
; 175  : 
; 176  : 		basevit = pet.SDATAVIT + 4.5f;

  00006	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4012000000000000
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b f1		 mov	 esi, ecx
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _pet$[ebp]
  00016	8b 87 2c 0b 00
	00		 mov	 eax, DWORD PTR [edi+2860]
  0001c	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0001f	8b 87 30 0b 00
	00		 mov	 eax, DWORD PTR [edi+2864]
  00025	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00028	8b 87 34 0b 00
	00		 mov	 eax, DWORD PTR [edi+2868]
  0002e	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00031	8b 87 38 0b 00
	00		 mov	 eax, DWORD PTR [edi+2872]
  00037	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0003a	f2 0f 10 9f 40
	0b 00 00	 movsd	 xmm3, QWORD PTR [edi+2880]
  00042	f2 0f 58 d8	 addsd	 xmm3, xmm0
  00046	f2 0f 11 5e 30	 movsd	 QWORD PTR [esi+48], xmm3
  0004b	f2 0f 10 b7 48
	0b 00 00	 movsd	 xmm6, QWORD PTR [edi+2888]
  00053	f2 0f 58 f0	 addsd	 xmm6, xmm0
  00057	f2 0f 11 76 38	 movsd	 QWORD PTR [esi+56], xmm6
  0005c	f2 0f 10 8f 50
	0b 00 00	 movsd	 xmm1, QWORD PTR [edi+2896]
  00064	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00068	f2 0f 11 4e 40	 movsd	 QWORD PTR [esi+64], xmm1
  0006d	f2 0f 10 bf 58
	0b 00 00	 movsd	 xmm7, QWORD PTR [edi+2904]
  00075	f2 0f 58 f8	 addsd	 xmm7, xmm0
  00079	f2 0f 11 4d f0	 movsd	 QWORD PTR tv2064[ebp], xmm1
  0007e	f2 0f 11 7e 48	 movsd	 QWORD PTR [esi+72], xmm7

; 177  : 		basestr = pet.SDATASTR + 4.5f;
; 178  : 		basetgh = pet.SDATATGH + 4.5f;
; 179  : 		basedex = pet.SDATADEX + 4.5f;
; 180  : 		baseall = pet.SDATAALL;

  00083	f2 0f 10 97 60
	0b 00 00	 movsd	 xmm2, QWORD PTR [edi+2912]
  0008b	f2 0f 11 56 50	 movsd	 QWORD PTR [esi+80], xmm2

; 181  : 		baseplus = pet.SDATAVIT + pet.SDATASTR + pet.SDATATGH + pet.SDATADEX;

  00090	f2 0f 10 87 48
	0b 00 00	 movsd	 xmm0, QWORD PTR [edi+2888]
  00098	f2 0f 58 87 40
	0b 00 00	 addsd	 xmm0, QWORD PTR [edi+2880]
  000a0	f2 0f 11 55 e8	 movsd	 QWORD PTR tv2071[ebp], xmm2
  000a5	f2 0f 58 87 50
	0b 00 00	 addsd	 xmm0, QWORD PTR [edi+2896]
  000ad	f2 0f 58 87 58
	0b 00 00	 addsd	 xmm0, QWORD PTR [edi+2904]
  000b5	f2 0f 11 46 58	 movsd	 QWORD PTR [esi+88], xmm0

; 182  : 
; 183  : 		int Multiplier;
; 184  : 
; 185  : 		switch (pet.DATARARE)

  000ba	8b 9f 68 0b 00
	00		 mov	 ebx, DWORD PTR [edi+2920]
  000c0	8b c3		 mov	 eax, ebx
  000c2	83 e8 00	 sub	 eax, 0
  000c5	74 38		 je	 SHORT $LN4@Calculate
  000c7	83 e8 01	 sub	 eax, 1
  000ca	74 22		 je	 SHORT $LN5@Calculate
  000cc	83 e8 01	 sub	 eax, 1
  000cf	74 0c		 je	 SHORT $LN6@Calculate

; 199  : 		default:
; 200  : 			Multiplier = pet.DATARARE;
; 201  : 			petgrade = 3;

  000d1	c7 86 b8 00 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+184], 3
  000db	eb 31		 jmp	 SHORT $LN2@Calculate
$LN6@Calculate:

; 195  : 		case 2:
; 196  : 			Multiplier = 8;

  000dd	bb 08 00 00 00	 mov	 ebx, 8

; 197  : 			petgrade = 1;

  000e2	c7 86 b8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+184], 1

; 198  : 			break;

  000ec	eb 20		 jmp	 SHORT $LN2@Calculate
$LN5@Calculate:

; 190  : 			break;
; 191  : 		case 1:
; 192  : 			Multiplier = 5;

  000ee	bb 05 00 00 00	 mov	 ebx, 5

; 193  : 			petgrade = 2;

  000f3	c7 86 b8 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+184], 2

; 194  : 			break;

  000fd	eb 0f		 jmp	 SHORT $LN2@Calculate
$LN4@Calculate:

; 186  : 		{
; 187  : 		case 0:
; 188  : 			Multiplier = 1;

  000ff	bb 01 00 00 00	 mov	 ebx, 1

; 189  : 			petgrade = 0;

  00104	c7 86 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+184], 0
$LN2@Calculate:

; 202  : 			break;
; 203  : 		}
; 204  : 		petprice = ((((((pet.level + 1) * pet.level) / 2) - 1) * 20) + 10) * Multiplier;

  0010e	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00111	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00114	0f af c1	 imul	 eax, ecx
  00117	99		 cdq
  00118	2b c2		 sub	 eax, edx
  0011a	d1 f8		 sar	 eax, 1
  0011c	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0011f	8d 04 85 f6 ff
	ff ff		 lea	 eax, DWORD PTR [eax*4-10]
  00126	0f af c3	 imul	 eax, ebx
  00129	89 86 04 01 00
	00		 mov	 DWORD PTR [esi+260], eax

; 205  : 
; 206  : 		petrank = pet.DATARANK;

  0012f	8b 87 6c 0b 00
	00		 mov	 eax, DWORD PTR [edi+2924]
  00135	89 86 bc 00 00
	00		 mov	 DWORD PTR [esi+188], eax

; 207  : 		if (petrank == 0) K = 4.75f;

  0013b	85 c0		 test	 eax, eax
  0013d	75 0a		 jne	 SHORT $LN8@Calculate
  0013f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4013000000000000
  00147	eb 49		 jmp	 SHORT $LN142@Calculate
$LN8@Calculate:

; 208  : 		else if (petrank == 1) K = 4.95f;

  00149	83 f8 01	 cmp	 eax, 1
  0014c	75 0a		 jne	 SHORT $LN10@Calculate
  0014e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4013ccccc0000000
  00156	eb 3a		 jmp	 SHORT $LN142@Calculate
$LN10@Calculate:

; 209  : 		else if (petrank == 2) K = 5.15f;

  00158	83 f8 02	 cmp	 eax, 2
  0015b	75 0a		 jne	 SHORT $LN12@Calculate
  0015d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40149999a0000000
  00165	eb 2b		 jmp	 SHORT $LN142@Calculate
$LN12@Calculate:

; 210  : 		else if (petrank == 3) K = 5.35f;

  00167	83 f8 03	 cmp	 eax, 3
  0016a	75 0a		 jne	 SHORT $LN14@Calculate
  0016c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4015666660000000
  00174	eb 1c		 jmp	 SHORT $LN142@Calculate
$LN14@Calculate:

; 211  : 		else if (petrank == 4) K = 5.55f;

  00176	83 f8 04	 cmp	 eax, 4
  00179	75 0a		 jne	 SHORT $LN16@Calculate
  0017b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4016333340000000
  00183	eb 0d		 jmp	 SHORT $LN142@Calculate
$LN16@Calculate:

; 212  : 		else if (petrank == 5) K = 5.75f;

  00185	83 f8 05	 cmp	 eax, 5
  00188	75 10		 jne	 SHORT $LN18@Calculate
  0018a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4017000000000000
$LN142@Calculate:

; 213  : 
; 214  : 		firstvit = (double)((basevit * 4 + basestr + basetgh + basedex) * baseall / 100);

  00192	f2 0f 11 86 c0
	00 00 00	 movsd	 QWORD PTR [esi+192], xmm0
$LN18@Calculate:
  0019a	f2 0f 10 2d 00
	00 00 00	 movsd	 xmm5, QWORD PTR __real@4059000000000000
  001a2	8d 56 60	 lea	 edx, DWORD PTR [esi+96]
  001a5	0f 28 e3	 movaps	 xmm4, xmm3
  001a8	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
  001ab	f2 0f 59 25 00
	00 00 00	 mulsd	 xmm4, QWORD PTR __real@4010000000000000
  001b3	bb 04 00 00 00	 mov	 ebx, 4
  001b8	f2 0f 58 e6	 addsd	 xmm4, xmm6
  001bc	f2 0f 58 e1	 addsd	 xmm4, xmm1

; 215  : 		firststr = (double)((basevit * 0.1 + basestr + basetgh * 0.1 + basedex * 0.05) * baseall / 100);

  001c0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  001c8	f2 0f 59 d9	 mulsd	 xmm3, xmm1
  001cc	f2 0f 58 e7	 addsd	 xmm4, xmm7
  001d0	f2 0f 11 5d e0	 movsd	 QWORD PTR tv2274[ebp], xmm3
  001d5	f2 0f 58 de	 addsd	 xmm3, xmm6

; 216  : 		firsttgh = (double)((basevit * 0.1 + basestr * 0.1 + basetgh + basedex * 0.05) * baseall / 100);

  001d9	f2 0f 59 f1	 mulsd	 xmm6, xmm1
  001dd	0f 28 c4	 movaps	 xmm0, xmm4
  001e0	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  001e4	0f 28 d7	 movaps	 xmm2, xmm7
  001e7	f2 0f 58 75 e0	 addsd	 xmm6, QWORD PTR tv2274[ebp]
  001ec	f2 0f 5e c5	 divsd	 xmm0, xmm5
  001f0	f2 0f 58 75 f0	 addsd	 xmm6, QWORD PTR tv2064[ebp]
  001f5	f2 0f 11 46 70	 movsd	 QWORD PTR [esi+112], xmm0
  001fa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00202	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00206	f2 0f 11 45 f8	 movsd	 QWORD PTR __real@3fa999999999999a$1$[ebp], xmm0
  0020b	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR tv2064[ebp]
  00210	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00214	f2 0f 58 f2	 addsd	 xmm6, xmm2
  00218	f2 0f 58 d8	 addsd	 xmm3, xmm0
  0021c	f2 0f 58 da	 addsd	 xmm3, xmm2
  00220	0f 28 c3	 movaps	 xmm0, xmm3
  00223	f2 0f 59 45 e8	 mulsd	 xmm0, QWORD PTR tv2071[ebp]
  00228	f2 0f 5e c5	 divsd	 xmm0, xmm5
  0022c	f2 0f 11 46 78	 movsd	 QWORD PTR [esi+120], xmm0
  00231	0f 28 c6	 movaps	 xmm0, xmm6
  00234	f2 0f 59 45 e8	 mulsd	 xmm0, QWORD PTR tv2071[ebp]
  00239	f2 0f 5e c5	 divsd	 xmm0, xmm5
  0023d	f2 0f 11 86 80
	00 00 00	 movsd	 QWORD PTR [esi+128], xmm0

; 217  : 		firstdex = (double)(basedex * baseall / 100);

  00245	0f 28 c7	 movaps	 xmm0, xmm7
  00248	f2 0f 59 45 e8	 mulsd	 xmm0, QWORD PTR tv2071[ebp]
  0024d	f2 0f 5e c5	 divsd	 xmm0, xmm5
  00251	f2 0f 11 86 88
	00 00 00	 movsd	 QWORD PTR [esi+136], xmm0

; 218  : 
; 219  : 		upvit = (basevit * 4 + basestr + basetgh + basedex) * K / 100;

  00259	f2 0f 10 86 c0
	00 00 00	 movsd	 xmm0, QWORD PTR [esi+192]
  00261	f2 0f 59 e0	 mulsd	 xmm4, xmm0

; 220  : 		upstr = (basevit * 0.1 + basestr + basetgh * 0.1 + basedex * 0.05) * K / 100;

  00265	f2 0f 59 d8	 mulsd	 xmm3, xmm0

; 221  : 		uptgh = (basevit * 0.1 + basestr * 0.1 + basetgh + basedex * 0.05) * K / 100;

  00269	f2 0f 59 f0	 mulsd	 xmm6, xmm0

; 222  : 		updex = basedex * K / 100;

  0026d	f2 0f 59 f8	 mulsd	 xmm7, xmm0
  00271	f2 0f 5e e5	 divsd	 xmm4, xmm5
  00275	f2 0f 5e dd	 divsd	 xmm3, xmm5
  00279	f2 0f 5e f5	 divsd	 xmm6, xmm5
  0027d	f2 0f 5e fd	 divsd	 xmm7, xmm5
  00281	f2 0f 10 2d 00
	00 00 00	 movsd	 xmm5, QWORD PTR __real@3f9eb851eb851eb8
  00289	f2 0f 11 a6 90
	00 00 00	 movsd	 QWORD PTR [esi+144], xmm4
  00291	f2 0f 11 9e 98
	00 00 00	 movsd	 QWORD PTR [esi+152], xmm3
  00299	f2 0f 11 b6 a0
	00 00 00	 movsd	 QWORD PTR [esi+160], xmm6
  002a1	f2 0f 11 be a8
	00 00 00	 movsd	 QWORD PTR [esi+168], xmm7
  002a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL129@Calculate:

; 223  : 
; 224  : 		svit = firstvit + upvit * (pet.level - 1) - 0.03;

  002b0	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  002b3	48		 dec	 eax
  002b4	66 0f 6e c0	 movd	 xmm0, eax
  002b8	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  002bc	f2 0f 59 41 20	 mulsd	 xmm0, QWORD PTR [ecx+32]
  002c1	f2 0f 58 01	 addsd	 xmm0, QWORD PTR [ecx]
  002c5	83 c1 08	 add	 ecx, 8
  002c8	f2 0f 5c c5	 subsd	 xmm0, xmm5
  002cc	f2 0f 2c c0	 cvttsd2si eax, xmm0
  002d0	89 02		 mov	 DWORD PTR [edx], eax
  002d2	83 c2 04	 add	 edx, 4
  002d5	83 eb 01	 sub	 ebx, 1
  002d8	75 d6		 jne	 SHORT $LL129@Calculate

; 225  : 		sstr = firststr + upstr * (pet.level - 1) - 0.03;
; 226  : 		stgh = firsttgh + uptgh * (pet.level - 1) - 0.03;
; 227  : 		sdex = firstdex + updex * (pet.level - 1) - 0.03;
; 228  : 		upgrowth = upstr + uptgh + updex;

  002da	f2 0f 10 86 98
	00 00 00	 movsd	 xmm0, QWORD PTR [esi+152]
  002e2	f2 0f 58 86 a0
	00 00 00	 addsd	 xmm0, QWORD PTR [esi+160]
  002ea	f2 0f 58 86 a8
	00 00 00	 addsd	 xmm0, QWORD PTR [esi+168]
  002f2	f2 0f 11 86 b0
	00 00 00	 movsd	 QWORD PTR [esi+176], xmm0

; 229  : 
; 230  : 		if (pet.level > 1)

  002fa	83 7f 20 01	 cmp	 DWORD PTR [edi+32], 1
  002fe	0f 8e d0 00 00
	00		 jle	 $LN19@Calculate

; 231  : 		{
; 232  : 			h = pet.maxHp - (int)firstvit;

  00304	f2 0f 2c 46 70	 cvttsd2si eax, QWORD PTR [esi+112]
  00309	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0030c	2b c8		 sub	 ecx, eax
  0030e	66 0f 6e c9	 movd	 xmm1, ecx
  00312	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00316	f2 0f 11 8e d0
	00 00 00	 movsd	 QWORD PTR [esi+208], xmm1

; 233  : 			h = h / (pet.level - 1);

  0031e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00321	48		 dec	 eax
  00322	66 0f 6e c0	 movd	 xmm0, eax
  00326	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0

; 234  : 
; 235  : 			s = pet.atk - (int)firststr;

  0032a	f2 0f 2c 46 78	 cvttsd2si eax, QWORD PTR [esi+120]
  0032f	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00333	f2 0f 11 8e d0
	00 00 00	 movsd	 QWORD PTR [esi+208], xmm1
  0033b	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  0033e	2b c8		 sub	 ecx, eax
  00340	66 0f 6e c9	 movd	 xmm1, ecx
  00344	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00348	f2 0f 11 8e d8
	00 00 00	 movsd	 QWORD PTR [esi+216], xmm1

; 236  : 			s = s / (pet.level - 1);

  00350	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00353	48		 dec	 eax
  00354	66 0f 6e c0	 movd	 xmm0, eax
  00358	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0

; 237  : 
; 238  : 			t = pet.def - (int)firsttgh;

  0035c	f2 0f 2c 86 80
	00 00 00	 cvttsd2si eax, QWORD PTR [esi+128]
  00364	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00368	f2 0f 11 8e d8
	00 00 00	 movsd	 QWORD PTR [esi+216], xmm1
  00370	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00373	2b c8		 sub	 ecx, eax
  00375	66 0f 6e d1	 movd	 xmm2, ecx
  00379	f3 0f e6 d2	 cvtdq2pd xmm2, xmm2
  0037d	f2 0f 11 96 e0
	00 00 00	 movsd	 QWORD PTR [esi+224], xmm2

; 239  : 			t = t / (pet.level - 1);

  00385	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00388	48		 dec	 eax
  00389	66 0f 6e c0	 movd	 xmm0, eax
  0038d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0

; 240  : 
; 241  : 			d = pet.quick - (int)firstdex;

  00391	f2 0f 2c 86 88
	00 00 00	 cvttsd2si eax, QWORD PTR [esi+136]
  00399	f2 0f 5e d0	 divsd	 xmm2, xmm0
  0039d	f2 0f 11 96 e0
	00 00 00	 movsd	 QWORD PTR [esi+224], xmm2

; 242  : 			d = d / (pet.level - 1);
; 243  : 			ret = s + t + d;

  003a5	f2 0f 58 d1	 addsd	 xmm2, xmm1
  003a9	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  003ac	2b c8		 sub	 ecx, eax
  003ae	66 0f 6e d9	 movd	 xmm3, ecx
  003b2	f3 0f e6 db	 cvtdq2pd xmm3, xmm3
  003b6	f2 0f 11 9e e8
	00 00 00	 movsd	 QWORD PTR [esi+232], xmm3
  003be	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  003c1	48		 dec	 eax
  003c2	66 0f 6e c0	 movd	 xmm0, eax
  003c6	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  003ca	f2 0f 5e d8	 divsd	 xmm3, xmm0
  003ce	f2 0f 58 d3	 addsd	 xmm2, xmm3

; 244  : 		}

  003d2	eb 15		 jmp	 SHORT $LN20@Calculate
$LN19@Calculate:
  003d4	0f 57 d2	 xorps	 xmm2, xmm2
  003d7	0f 57 db	 xorps	 xmm3, xmm3

; 245  : 		else
; 246  : 		{
; 247  : 			h = 0;

  003da	0f 11 96 d0 00
	00 00		 movups	 XMMWORD PTR [esi+208], xmm2

; 248  : 			s = 0;
; 249  : 			t = 0;

  003e1	f2 0f 11 96 e0
	00 00 00	 movsd	 QWORD PTR [esi+224], xmm2
$LN20@Calculate:

; 250  : 			d = 0;
; 251  : 			ret = 0;
; 252  : 		}
; 253  : 
; 254  : 		if (h >= upvit) { gradeh = "S+"; }

  003e9	f2 0f 11 9e e8
	00 00 00	 movsd	 QWORD PTR [esi+232], xmm3
  003f1	f2 0f 11 96 c8
	00 00 00	 movsd	 QWORD PTR [esi+200], xmm2
  003f9	f2 0f 10 96 d0
	00 00 00	 movsd	 xmm2, QWORD PTR [esi+208]
  00401	f2 0f 10 8e 90
	00 00 00	 movsd	 xmm1, QWORD PTR [esi+144]
  00409	66 0f 2f d1	 comisd	 xmm2, xmm1
  0040d	f2 0f 10 35 00
	00 00 00	 movsd	 xmm6, QWORD PTR __real@3faeb851eb851eb8
  00415	72 0f		 jb	 SHORT $LN21@Calculate
  00417	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_02BIDEELGN@S?$CL@
  00421	e9 1d 01 00 00	 jmp	 $LN41@Calculate
$LN21@Calculate:

; 255  : 		else if (h >= upvit - 0.06) { gradeh = "S"; }

  00426	0f 28 c1	 movaps	 xmm0, xmm1
  00429	f2 0f 5c c6	 subsd	 xmm0, xmm6
  0042d	66 0f 2f d0	 comisd	 xmm2, xmm0
  00431	72 0f		 jb	 SHORT $LN23@Calculate
  00433	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_01CPLAODJH@S@
  0043d	e9 01 01 00 00	 jmp	 $LN41@Calculate
$LN23@Calculate:

; 256  : 		else if (h >= upvit - 0.12) { gradeh = "A+"; }

  00442	0f 28 c1	 movaps	 xmm0, xmm1
  00445	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbeb851eb851eb8
  0044d	66 0f 2f d0	 comisd	 xmm2, xmm0
  00451	72 0f		 jb	 SHORT $LN25@Calculate
  00453	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_02HJGDMHD@A?$CL@
  0045d	e9 e1 00 00 00	 jmp	 $LN41@Calculate
$LN25@Calculate:

; 257  : 		else if (h >= upvit - 0.18) { gradeh = "A"; }

  00462	0f 28 c1	 movaps	 xmm0, xmm1
  00465	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  0046d	66 0f 2f d0	 comisd	 xmm2, xmm0
  00471	72 0f		 jb	 SHORT $LN27@Calculate
  00473	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_01FHEEJDEE@A@
  0047d	e9 c1 00 00 00	 jmp	 $LN41@Calculate
$LN27@Calculate:

; 258  : 		else if (h >= upvit - 0.24) { gradeh = "B+"; }

  00482	0f 28 c1	 movaps	 xmm0, xmm1
  00485	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fceb851eb851eb8
  0048d	66 0f 2f d0	 comisd	 xmm2, xmm0
  00491	72 0f		 jb	 SHORT $LN29@Calculate
  00493	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_02FNAICCK@B?$CL@
  0049d	e9 a1 00 00 00	 jmp	 $LN41@Calculate
$LN29@Calculate:

; 259  : 		else if (h >= upvit - 0.3) { gradeh = "B"; }

  004a2	0f 28 c1	 movaps	 xmm0, xmm1
  004a5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  004ad	66 0f 2f d0	 comisd	 xmm2, xmm0
  004b1	72 0f		 jb	 SHORT $LN31@Calculate
  004b3	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_01HMGJMAIH@B@
  004bd	e9 81 00 00 00	 jmp	 $LN41@Calculate
$LN31@Calculate:

; 260  : 		else if (h >= upvit - 0.36) { gradeh = "C+"; }

  004c2	0f 28 c1	 movaps	 xmm0, xmm1
  004c5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd70a3d70a3d70a
  004cd	66 0f 2f d0	 comisd	 xmm2, xmm0
  004d1	72 0c		 jb	 SHORT $LN33@Calculate
  004d3	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_02EBCOIBN@C?$CL@
  004dd	eb 64		 jmp	 SHORT $LN41@Calculate
$LN33@Calculate:

; 261  : 		else if (h >= upvit - 0.42) { gradeh = "C"; }

  004df	0f 28 c1	 movaps	 xmm0, xmm1
  004e2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fdae147ae147ae1
  004ea	66 0f 2f d0	 comisd	 xmm2, xmm0
  004ee	72 0c		 jb	 SHORT $LN35@Calculate
  004f0	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_01GFHCPBMG@C@
  004fa	eb 47		 jmp	 SHORT $LN41@Calculate
$LN35@Calculate:

; 262  : 		else if (h >= upvit - 0.48) { gradeh = "D+"; }

  004fc	0f 28 c1	 movaps	 xmm0, xmm1
  004ff	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fdeb851eb851eb8
  00507	66 0f 2f d0	 comisd	 xmm2, xmm0
  0050b	72 0c		 jb	 SHORT $LN37@Calculate
  0050d	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_02BFNPOJI@D?$CL@
  00517	eb 2a		 jmp	 SHORT $LN41@Calculate
$LN37@Calculate:

; 263  : 		else if (h >= upvit - 0.54) { gradeh = "D"; }

  00519	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3fe147ae147ae148
  00521	66 0f 2f d1	 comisd	 xmm2, xmm1
  00525	72 0c		 jb	 SHORT $LN39@Calculate
  00527	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_01CKDDGHAB@D@
  00531	eb 10		 jmp	 SHORT $LN41@Calculate
$LN39@Calculate:

; 264  : 		else if (h < upvit - 0.54) { gradeh = "F"; }

  00533	66 0f 2f ca	 comisd	 xmm1, xmm2
  00537	76 0a		 jbe	 SHORT $LN41@Calculate
  00539	c7 86 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+240], OFFSET ??_C@_01BIAFAFID@F@
$LN41@Calculate:

; 265  : 
; 266  : 		if (s >= upstr) { grades = "S+"; }

  00543	f2 0f 10 8e d8
	00 00 00	 movsd	 xmm1, QWORD PTR [esi+216]
  0054b	f2 0f 10 a6 98
	00 00 00	 movsd	 xmm4, QWORD PTR [esi+152]
  00553	66 0f 2f cc	 comisd	 xmm1, xmm4
  00557	f2 0f 10 3d 00
	00 00 00	 movsd	 xmm7, QWORD PTR __real@3fb70a3d70a3d70a
  0055f	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3f847ae147ae147b
  00567	72 0f		 jb	 SHORT $LN42@Calculate
  00569	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_02BIDEELGN@S?$CL@
  00573	e9 0e 01 00 00	 jmp	 $LN62@Calculate
$LN42@Calculate:

; 267  : 		else if (s >= upstr - 0.01) { grades = "S"; }

  00578	0f 28 c4	 movaps	 xmm0, xmm4
  0057b	f2 0f 5c c3	 subsd	 xmm0, xmm3
  0057f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00583	72 0f		 jb	 SHORT $LN44@Calculate
  00585	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_01CPLAODJH@S@
  0058f	e9 f2 00 00 00	 jmp	 $LN62@Calculate
$LN44@Calculate:

; 268  : 		else if (s >= upstr - 0.02) { grades = "A+"; }

  00594	0f 28 c4	 movaps	 xmm0, xmm4
  00597	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  0059f	66 0f 2f c8	 comisd	 xmm1, xmm0
  005a3	72 0f		 jb	 SHORT $LN46@Calculate
  005a5	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_02HJGDMHD@A?$CL@
  005af	e9 d2 00 00 00	 jmp	 $LN62@Calculate
$LN46@Calculate:

; 269  : 		else if (s >= upstr - 0.03) { grades = "A"; }

  005b4	0f 28 c4	 movaps	 xmm0, xmm4
  005b7	f2 0f 5c c5	 subsd	 xmm0, xmm5
  005bb	66 0f 2f c8	 comisd	 xmm1, xmm0
  005bf	72 0f		 jb	 SHORT $LN48@Calculate
  005c1	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_01FHEEJDEE@A@
  005cb	e9 b6 00 00 00	 jmp	 $LN62@Calculate
$LN48@Calculate:

; 270  : 		else if (s >= upstr - 0.04) { grades = "B+"; }

  005d0	0f 28 c4	 movaps	 xmm0, xmm4
  005d3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  005db	66 0f 2f c8	 comisd	 xmm1, xmm0
  005df	72 0f		 jb	 SHORT $LN50@Calculate
  005e1	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_02FNAICCK@B?$CL@
  005eb	e9 96 00 00 00	 jmp	 $LN62@Calculate
$LN50@Calculate:

; 271  : 		else if (s >= upstr - 0.05) { grades = "B"; }

  005f0	0f 28 c4	 movaps	 xmm0, xmm4
  005f3	f2 0f 5c 45 f8	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a$1$[ebp]
  005f8	66 0f 2f c8	 comisd	 xmm1, xmm0
  005fc	72 0c		 jb	 SHORT $LN52@Calculate
  005fe	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_01HMGJMAIH@B@
  00608	eb 7c		 jmp	 SHORT $LN62@Calculate
$LN52@Calculate:

; 272  : 		else if (s >= upstr - 0.06) { grades = "C+"; }

  0060a	0f 28 c4	 movaps	 xmm0, xmm4
  0060d	f2 0f 5c c6	 subsd	 xmm0, xmm6
  00611	66 0f 2f c8	 comisd	 xmm1, xmm0
  00615	72 0c		 jb	 SHORT $LN54@Calculate
  00617	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_02EBCOIBN@C?$CL@
  00621	eb 63		 jmp	 SHORT $LN62@Calculate
$LN54@Calculate:

; 273  : 		else if (s >= upstr - 0.07) { grades = "C"; }

  00623	0f 28 c4	 movaps	 xmm0, xmm4
  00626	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb1eb851eb851ec
  0062e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00632	72 0c		 jb	 SHORT $LN56@Calculate
  00634	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_01GFHCPBMG@C@
  0063e	eb 46		 jmp	 SHORT $LN62@Calculate
$LN56@Calculate:

; 274  : 		else if (s >= upstr - 0.08) { grades = "D+"; }

  00640	0f 28 c4	 movaps	 xmm0, xmm4
  00643	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb47ae147ae147b
  0064b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0064f	72 0c		 jb	 SHORT $LN58@Calculate
  00651	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_02BFNPOJI@D?$CL@
  0065b	eb 29		 jmp	 SHORT $LN62@Calculate
$LN58@Calculate:

; 275  : 		else if (s >= upstr - 0.09) { grades = "D"; }

  0065d	0f 28 c4	 movaps	 xmm0, xmm4
  00660	f2 0f 5c c7	 subsd	 xmm0, xmm7
  00664	66 0f 2f c8	 comisd	 xmm1, xmm0
  00668	72 0c		 jb	 SHORT $LN60@Calculate
  0066a	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_01CKDDGHAB@D@
  00674	eb 10		 jmp	 SHORT $LN62@Calculate
$LN60@Calculate:

; 276  : 		else if (s < upstr - 0.09) { grades = "F"; }

  00676	66 0f 2f c1	 comisd	 xmm0, xmm1
  0067a	76 0a		 jbe	 SHORT $LN62@Calculate
  0067c	c7 86 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+244], OFFSET ??_C@_01BIAFAFID@F@
$LN62@Calculate:

; 277  : 
; 278  : 		if (t >= uptgh) { gradet = "S+"; }

  00686	f2 0f 10 96 e0
	00 00 00	 movsd	 xmm2, QWORD PTR [esi+224]
  0068e	f2 0f 10 8e a0
	00 00 00	 movsd	 xmm1, QWORD PTR [esi+160]
  00696	66 0f 2f d1	 comisd	 xmm2, xmm1
  0069a	72 0f		 jb	 SHORT $LN63@Calculate
  0069c	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_02BIDEELGN@S?$CL@
  006a6	e9 0e 01 00 00	 jmp	 $LN83@Calculate
$LN63@Calculate:

; 279  : 		else if (t >= uptgh - 0.01) { gradet = "S"; }

  006ab	0f 28 c1	 movaps	 xmm0, xmm1
  006ae	f2 0f 5c c3	 subsd	 xmm0, xmm3
  006b2	66 0f 2f d0	 comisd	 xmm2, xmm0
  006b6	72 0f		 jb	 SHORT $LN65@Calculate
  006b8	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_01CPLAODJH@S@
  006c2	e9 f2 00 00 00	 jmp	 $LN83@Calculate
$LN65@Calculate:

; 280  : 		else if (t >= uptgh - 0.02) { gradet = "A+"; }

  006c7	0f 28 c1	 movaps	 xmm0, xmm1
  006ca	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  006d2	66 0f 2f d0	 comisd	 xmm2, xmm0
  006d6	72 0f		 jb	 SHORT $LN67@Calculate
  006d8	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_02HJGDMHD@A?$CL@
  006e2	e9 d2 00 00 00	 jmp	 $LN83@Calculate
$LN67@Calculate:

; 281  : 		else if (t >= uptgh - 0.03) { gradet = "A"; }

  006e7	0f 28 c1	 movaps	 xmm0, xmm1
  006ea	f2 0f 5c c5	 subsd	 xmm0, xmm5
  006ee	66 0f 2f d0	 comisd	 xmm2, xmm0
  006f2	72 0f		 jb	 SHORT $LN69@Calculate
  006f4	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_01FHEEJDEE@A@
  006fe	e9 b6 00 00 00	 jmp	 $LN83@Calculate
$LN69@Calculate:

; 282  : 		else if (t >= uptgh - 0.04) { gradet = "B+"; }

  00703	0f 28 c1	 movaps	 xmm0, xmm1
  00706	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  0070e	66 0f 2f d0	 comisd	 xmm2, xmm0
  00712	72 0f		 jb	 SHORT $LN71@Calculate
  00714	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_02FNAICCK@B?$CL@
  0071e	e9 96 00 00 00	 jmp	 $LN83@Calculate
$LN71@Calculate:

; 283  : 		else if (t >= uptgh - 0.05) { gradet = "B"; }

  00723	0f 28 c1	 movaps	 xmm0, xmm1
  00726	f2 0f 5c 45 f8	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a$1$[ebp]
  0072b	66 0f 2f d0	 comisd	 xmm2, xmm0
  0072f	72 0c		 jb	 SHORT $LN73@Calculate
  00731	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_01HMGJMAIH@B@
  0073b	eb 7c		 jmp	 SHORT $LN83@Calculate
$LN73@Calculate:

; 284  : 		else if (t >= uptgh - 0.06) { gradet = "C+"; }

  0073d	0f 28 c1	 movaps	 xmm0, xmm1
  00740	f2 0f 5c c6	 subsd	 xmm0, xmm6
  00744	66 0f 2f d0	 comisd	 xmm2, xmm0
  00748	72 0c		 jb	 SHORT $LN75@Calculate
  0074a	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_02EBCOIBN@C?$CL@
  00754	eb 63		 jmp	 SHORT $LN83@Calculate
$LN75@Calculate:

; 285  : 		else if (t >= uptgh - 0.07) { gradet = "C"; }

  00756	0f 28 c1	 movaps	 xmm0, xmm1
  00759	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb1eb851eb851ec
  00761	66 0f 2f d0	 comisd	 xmm2, xmm0
  00765	72 0c		 jb	 SHORT $LN77@Calculate
  00767	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_01GFHCPBMG@C@
  00771	eb 46		 jmp	 SHORT $LN83@Calculate
$LN77@Calculate:

; 286  : 		else if (t >= uptgh - 0.08) { gradet = "D+"; }

  00773	0f 28 c1	 movaps	 xmm0, xmm1
  00776	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb47ae147ae147b
  0077e	66 0f 2f d0	 comisd	 xmm2, xmm0
  00782	72 0c		 jb	 SHORT $LN79@Calculate
  00784	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_02BFNPOJI@D?$CL@
  0078e	eb 29		 jmp	 SHORT $LN83@Calculate
$LN79@Calculate:

; 287  : 		else if (t >= uptgh - 0.09) { gradet = "D"; }

  00790	0f 28 c1	 movaps	 xmm0, xmm1
  00793	f2 0f 5c c7	 subsd	 xmm0, xmm7
  00797	66 0f 2f d0	 comisd	 xmm2, xmm0
  0079b	72 0c		 jb	 SHORT $LN81@Calculate
  0079d	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_01CKDDGHAB@D@
  007a7	eb 10		 jmp	 SHORT $LN83@Calculate
$LN81@Calculate:

; 288  : 		else if (t < uptgh - 0.09) { gradet = "F"; }

  007a9	66 0f 2f c2	 comisd	 xmm0, xmm2
  007ad	76 0a		 jbe	 SHORT $LN83@Calculate
  007af	c7 86 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+248], OFFSET ??_C@_01BIAFAFID@F@
$LN83@Calculate:

; 289  : 
; 290  : 		if (d >= updex) { graded = "S+"; }

  007b9	f2 0f 10 96 e8
	00 00 00	 movsd	 xmm2, QWORD PTR [esi+232]
  007c1	f2 0f 10 9e a8
	00 00 00	 movsd	 xmm3, QWORD PTR [esi+168]
  007c9	66 0f 2f d3	 comisd	 xmm2, xmm3
  007cd	72 0f		 jb	 SHORT $LN84@Calculate
  007cf	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_02BIDEELGN@S?$CL@
  007d9	e9 12 01 00 00	 jmp	 $LN104@Calculate
$LN84@Calculate:

; 291  : 		else if (d >= updex - 0.01) { graded = "S"; }

  007de	0f 28 c3	 movaps	 xmm0, xmm3
  007e1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  007e9	66 0f 2f d0	 comisd	 xmm2, xmm0
  007ed	72 0f		 jb	 SHORT $LN86@Calculate
  007ef	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_01CPLAODJH@S@
  007f9	e9 f2 00 00 00	 jmp	 $LN104@Calculate
$LN86@Calculate:

; 292  : 		else if (d >= updex - 0.02) { graded = "A+"; }

  007fe	0f 28 c3	 movaps	 xmm0, xmm3
  00801	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00809	66 0f 2f d0	 comisd	 xmm2, xmm0
  0080d	72 0f		 jb	 SHORT $LN88@Calculate
  0080f	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_02HJGDMHD@A?$CL@
  00819	e9 d2 00 00 00	 jmp	 $LN104@Calculate
$LN88@Calculate:

; 293  : 		else if (d >= updex - 0.03) { graded = "A"; }

  0081e	0f 28 c3	 movaps	 xmm0, xmm3
  00821	f2 0f 5c c5	 subsd	 xmm0, xmm5
  00825	66 0f 2f d0	 comisd	 xmm2, xmm0
  00829	72 0f		 jb	 SHORT $LN90@Calculate
  0082b	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_01FHEEJDEE@A@
  00835	e9 b6 00 00 00	 jmp	 $LN104@Calculate
$LN90@Calculate:

; 294  : 		else if (d >= updex - 0.04) { graded = "B+"; }

  0083a	0f 28 c3	 movaps	 xmm0, xmm3
  0083d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00845	66 0f 2f d0	 comisd	 xmm2, xmm0
  00849	72 0f		 jb	 SHORT $LN92@Calculate
  0084b	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_02FNAICCK@B?$CL@
  00855	e9 96 00 00 00	 jmp	 $LN104@Calculate
$LN92@Calculate:

; 295  : 		else if (d >= updex - 0.05) { graded = "B"; }

  0085a	0f 28 c3	 movaps	 xmm0, xmm3
  0085d	f2 0f 5c 45 f8	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a$1$[ebp]
  00862	66 0f 2f d0	 comisd	 xmm2, xmm0
  00866	72 0c		 jb	 SHORT $LN94@Calculate
  00868	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_01HMGJMAIH@B@
  00872	eb 7c		 jmp	 SHORT $LN104@Calculate
$LN94@Calculate:

; 296  : 		else if (d >= updex - 0.06) { graded = "C+"; }

  00874	0f 28 c3	 movaps	 xmm0, xmm3
  00877	f2 0f 5c c6	 subsd	 xmm0, xmm6
  0087b	66 0f 2f d0	 comisd	 xmm2, xmm0
  0087f	72 0c		 jb	 SHORT $LN96@Calculate
  00881	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_02EBCOIBN@C?$CL@
  0088b	eb 63		 jmp	 SHORT $LN104@Calculate
$LN96@Calculate:

; 297  : 		else if (d >= updex - 0.07) { graded = "C"; }

  0088d	0f 28 c3	 movaps	 xmm0, xmm3
  00890	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb1eb851eb851ec
  00898	66 0f 2f d0	 comisd	 xmm2, xmm0
  0089c	72 0c		 jb	 SHORT $LN98@Calculate
  0089e	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_01GFHCPBMG@C@
  008a8	eb 46		 jmp	 SHORT $LN104@Calculate
$LN98@Calculate:

; 298  : 		else if (d >= updex - 0.08) { graded = "D+"; }

  008aa	0f 28 c3	 movaps	 xmm0, xmm3
  008ad	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb47ae147ae147b
  008b5	66 0f 2f d0	 comisd	 xmm2, xmm0
  008b9	72 0c		 jb	 SHORT $LN100@Calculate
  008bb	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_02BFNPOJI@D?$CL@
  008c5	eb 29		 jmp	 SHORT $LN104@Calculate
$LN100@Calculate:

; 299  : 		else if (d >= updex - 0.09) { graded = "D"; }

  008c7	0f 28 c3	 movaps	 xmm0, xmm3
  008ca	f2 0f 5c c7	 subsd	 xmm0, xmm7
  008ce	66 0f 2f d0	 comisd	 xmm2, xmm0
  008d2	72 0c		 jb	 SHORT $LN102@Calculate
  008d4	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_01CKDDGHAB@D@
  008de	eb 10		 jmp	 SHORT $LN104@Calculate
$LN102@Calculate:

; 300  : 		else if (d < updex - 0.09) { graded = "F"; }

  008e0	66 0f 2f c2	 comisd	 xmm0, xmm2
  008e4	76 0a		 jbe	 SHORT $LN104@Calculate
  008e6	c7 86 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+252], OFFSET ??_C@_01BIAFAFID@F@
$LN104@Calculate:

; 301  : 
; 302  : 		if (ret >= upstr + uptgh + updex) { gradea = "S+"; }

  008f0	f2 0f 10 96 c8
	00 00 00	 movsd	 xmm2, QWORD PTR [esi+200]
  008f8	f2 0f 58 cc	 addsd	 xmm1, xmm4
  008fc	f2 0f 58 cb	 addsd	 xmm1, xmm3
  00900	66 0f 2f d1	 comisd	 xmm2, xmm1
  00904	72 13		 jb	 SHORT $LN105@Calculate
  00906	5f		 pop	 edi
  00907	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_02BIDEELGN@S?$CL@

; 313  : 	}

  00911	5e		 pop	 esi
  00912	5b		 pop	 ebx
  00913	8b e5		 mov	 esp, ebp
  00915	5d		 pop	 ebp
  00916	c2 04 00	 ret	 4
$LN105@Calculate:

; 303  : 		else if (ret >= upstr + uptgh + updex - 0.03) { gradea = "S"; }

  00919	0f 28 c1	 movaps	 xmm0, xmm1
  0091c	f2 0f 5c c5	 subsd	 xmm0, xmm5
  00920	66 0f 2f d0	 comisd	 xmm2, xmm0
  00924	72 13		 jb	 SHORT $LN107@Calculate
  00926	5f		 pop	 edi
  00927	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_01CPLAODJH@S@

; 313  : 	}

  00931	5e		 pop	 esi
  00932	5b		 pop	 ebx
  00933	8b e5		 mov	 esp, ebp
  00935	5d		 pop	 ebp
  00936	c2 04 00	 ret	 4
$LN107@Calculate:

; 304  : 		else if (ret >= upstr + uptgh + updex - 0.06) { gradea = "A+"; }

  00939	0f 28 c1	 movaps	 xmm0, xmm1
  0093c	f2 0f 5c c6	 subsd	 xmm0, xmm6
  00940	66 0f 2f d0	 comisd	 xmm2, xmm0
  00944	72 13		 jb	 SHORT $LN109@Calculate
  00946	5f		 pop	 edi
  00947	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_02HJGDMHD@A?$CL@

; 313  : 	}

  00951	5e		 pop	 esi
  00952	5b		 pop	 ebx
  00953	8b e5		 mov	 esp, ebp
  00955	5d		 pop	 ebp
  00956	c2 04 00	 ret	 4
$LN109@Calculate:

; 305  : 		else if (ret >= upstr + uptgh + updex - 0.09) { gradea = "A"; }

  00959	0f 28 c1	 movaps	 xmm0, xmm1
  0095c	f2 0f 5c c7	 subsd	 xmm0, xmm7
  00960	66 0f 2f d0	 comisd	 xmm2, xmm0
  00964	72 13		 jb	 SHORT $LN111@Calculate
  00966	5f		 pop	 edi
  00967	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_01FHEEJDEE@A@

; 313  : 	}

  00971	5e		 pop	 esi
  00972	5b		 pop	 ebx
  00973	8b e5		 mov	 esp, ebp
  00975	5d		 pop	 ebp
  00976	c2 04 00	 ret	 4
$LN111@Calculate:

; 306  : 		else if (ret >= upstr + uptgh + updex - 0.12) { gradea = "B+"; }

  00979	0f 28 c1	 movaps	 xmm0, xmm1
  0097c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbeb851eb851eb8
  00984	66 0f 2f d0	 comisd	 xmm2, xmm0
  00988	72 13		 jb	 SHORT $LN113@Calculate
  0098a	5f		 pop	 edi
  0098b	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_02FNAICCK@B?$CL@

; 313  : 	}

  00995	5e		 pop	 esi
  00996	5b		 pop	 ebx
  00997	8b e5		 mov	 esp, ebp
  00999	5d		 pop	 ebp
  0099a	c2 04 00	 ret	 4
$LN113@Calculate:

; 307  : 		else if (ret >= upstr + uptgh + updex - 0.15) { gradea = "B"; }

  0099d	0f 28 c1	 movaps	 xmm0, xmm1
  009a0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  009a8	66 0f 2f d0	 comisd	 xmm2, xmm0
  009ac	72 13		 jb	 SHORT $LN115@Calculate
  009ae	5f		 pop	 edi
  009af	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_01HMGJMAIH@B@

; 313  : 	}

  009b9	5e		 pop	 esi
  009ba	5b		 pop	 ebx
  009bb	8b e5		 mov	 esp, ebp
  009bd	5d		 pop	 ebp
  009be	c2 04 00	 ret	 4
$LN115@Calculate:

; 308  : 		else if (ret >= upstr + uptgh + updex - 0.18) { gradea = "C+"; }

  009c1	0f 28 c1	 movaps	 xmm0, xmm1
  009c4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  009cc	66 0f 2f d0	 comisd	 xmm2, xmm0
  009d0	72 13		 jb	 SHORT $LN117@Calculate
  009d2	5f		 pop	 edi
  009d3	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_02EBCOIBN@C?$CL@

; 313  : 	}

  009dd	5e		 pop	 esi
  009de	5b		 pop	 ebx
  009df	8b e5		 mov	 esp, ebp
  009e1	5d		 pop	 ebp
  009e2	c2 04 00	 ret	 4
$LN117@Calculate:

; 309  : 		else if (ret >= upstr + uptgh + updex - 0.21) { gradea = "C"; }

  009e5	0f 28 c1	 movaps	 xmm0, xmm1
  009e8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fcae147ae147ae1
  009f0	66 0f 2f d0	 comisd	 xmm2, xmm0
  009f4	72 13		 jb	 SHORT $LN119@Calculate
  009f6	5f		 pop	 edi
  009f7	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_01GFHCPBMG@C@

; 313  : 	}

  00a01	5e		 pop	 esi
  00a02	5b		 pop	 ebx
  00a03	8b e5		 mov	 esp, ebp
  00a05	5d		 pop	 ebp
  00a06	c2 04 00	 ret	 4
$LN119@Calculate:

; 310  : 		else if (ret >= upstr + uptgh + updex - 0.24) { gradea = "D+"; }

  00a09	0f 28 c1	 movaps	 xmm0, xmm1
  00a0c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fceb851eb851eb8
  00a14	66 0f 2f d0	 comisd	 xmm2, xmm0
  00a18	72 13		 jb	 SHORT $LN121@Calculate
  00a1a	5f		 pop	 edi
  00a1b	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_02BFNPOJI@D?$CL@

; 313  : 	}

  00a25	5e		 pop	 esi
  00a26	5b		 pop	 ebx
  00a27	8b e5		 mov	 esp, ebp
  00a29	5d		 pop	 ebp
  00a2a	c2 04 00	 ret	 4
$LN121@Calculate:

; 311  : 		else if (ret >= upstr + uptgh + updex - 0.27) { gradea = "D"; }

  00a2d	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3fd147ae147ae148
  00a35	66 0f 2f d1	 comisd	 xmm2, xmm1
  00a39	72 13		 jb	 SHORT $LN123@Calculate
  00a3b	5f		 pop	 edi
  00a3c	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_01CKDDGHAB@D@

; 313  : 	}

  00a46	5e		 pop	 esi
  00a47	5b		 pop	 ebx
  00a48	8b e5		 mov	 esp, ebp
  00a4a	5d		 pop	 ebp
  00a4b	c2 04 00	 ret	 4
$LN123@Calculate:

; 312  : 		else if (ret < upstr + uptgh + updex - 0.27) { gradea = "F"; }

  00a4e	66 0f 2f ca	 comisd	 xmm1, xmm2
  00a52	76 0a		 jbe	 SHORT $LN125@Calculate
  00a54	c7 86 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+256], OFFSET ??_C@_01BIAFAFID@F@
$LN125@Calculate:
  00a5e	5f		 pop	 edi

; 313  : 	}

  00a5f	5e		 pop	 esi
  00a60	5b		 pop	 ebx
  00a61	8b e5		 mov	 esp, ebp
  00a63	5d		 pop	 ebp
  00a64	c2 04 00	 ret	 4
?Calculate@Ranking@@QAEXABUPET@@@Z ENDP			; Ranking::Calculate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?ItemCanPile@@YAHH@Z
_TEXT	SEGMENT
_flg$ = 8						; size = 4
?ItemCanPile@@YAHH@Z PROC				; ItemCanPile, COMDAT

; 106  : BOOL ItemCanPile(int flg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 	return (flg & 1 << 6);

  00003	8b 45 08	 mov	 eax, DWORD PTR _flg$[ebp]
  00006	83 e0 40	 and	 eax, 64			; 00000040H

; 108  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?ItemCanPile@@YAHH@Z ENDP				; ItemCanPile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3042 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 3043 :         // assign [_Ptr, _Ptr + _Count)
; 3044 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2209 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2227 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2210 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3045 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3046 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3047 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3048 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 3059 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4305 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4287 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4291 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4292 :         }
; 4293 : 
; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax

; 4314 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4315 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00093	e8 00 00 00 00	 call	 _memcpy

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4318 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3059 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4319 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 3059 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4321 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 3059 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4306 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2800 :     ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2227 :         return _BUF_SIZE <= _Myres;

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 0c		 jb	 SHORT $LN4@basic_stri

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000b	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00025	c6 06 00	 mov	 BYTE PTR [esi], 0
  00028	5e		 pop	 esi

; 2801 :         _Tidy_deallocate();
; 2802 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2803 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2804 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2805 :         _Mypair._Myval2._Myproxy = nullptr;
; 2806 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2807 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2808 :     }

  00029	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__New_array$2 = -4					; size = 4
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2351 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2734 :         const size_type _Right_size   = _Right_data._Mysize;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]

; 2351 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  0000d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00014	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2227 :         return _BUF_SIZE <= _Myres;

  0001b	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2734 :         const size_type _Right_size   = _Right_data._Mysize;

  0001f	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00022	89 45 08	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2219 :         if (_Large_string_engaged()) {

  00025	72 02		 jb	 SHORT $LN11@basic_stri

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN11@basic_stri:

; 2737 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00029	83 f8 10	 cmp	 eax, 16			; 00000010H
  0002c	73 1e		 jae	 SHORT $LN8@basic_stri

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002e	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2352 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2353 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2354 :         _Construct_lv_contents(_Right);
; 2355 :         _Proxy._Release();
; 2356 :     }

  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]

; 2740 :             _My_data._Myres  = _BUF_SIZE - 1;

  00034	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00039	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2352 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2353 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2354 :         _Construct_lv_contents(_Right);
; 2355 :         _Proxy._Release();
; 2356 :     }

  0003c	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@basic_stri:

; 2745 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0004c	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0004f	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00054	3b c1		 cmp	 eax, ecx
  00056	56		 push	 esi
  00057	0f 47 c1	 cmova	 eax, ecx
  0005a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2746 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0005d	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2746 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00064	8b f0		 mov	 esi, eax

; 2747 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00066	8d 45 fc	 lea	 eax, DWORD PTR __New_array$2[ebp]
  00069	50		 push	 eax
  0006a	57		 push	 edi
  0006b	89 75 fc	 mov	 DWORD PTR __New_array$2[ebp], esi
  0006e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2748 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00073	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00076	41		 inc	 ecx

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00077	51		 push	 ecx
  00078	53		 push	 ebx
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 _memcpy
  0007f	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00082	83 c4 18	 add	 esp, 24			; 00000018H

; 2352 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2353 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2354 :         _Construct_lv_contents(_Right);
; 2355 :         _Proxy._Release();
; 2356 :     }

  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00088	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0008b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0008e	8b c7		 mov	 eax, edi

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00090	5e		 pop	 esi

; 2352 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2353 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2354 :         _Construct_lv_contents(_Right);
; 2355 :         _Proxy._Release();
; 2356 :     }

  00091	5f		 pop	 edi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2275 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?Receive@Mammoth@@QAEXH@Z
_TEXT	SEGMENT
_prizeindex$ = 8					; size = 4
?Receive@Mammoth@@QAEXH@Z PROC				; Mammoth::Receive, COMDAT
; _this$ = ecx

; 20735: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20736: 	m_ItemReceiveIndex = prizeindex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _prizeindex$[ebp]
  00006	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 20737: }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Receive@Mammoth@@QAEXH@Z ENDP				; Mammoth::Receive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?IsBagFull@Mammoth@@QAEHXZ
_TEXT	SEGMENT
?IsBagFull@Mammoth@@QAEHXZ PROC				; Mammoth::IsBagFull, COMDAT
; _this$ = ecx

; 20726: 	for (size_t i = MAX_ITEMSTART; i < MAX_ITEMSTART + MAX_MAXHAVEITEM + MAX_MAXHAVEITEM * itemWndMaxBag; i++)

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?itemWndMaxBag@@3HA ; itemWndMaxBag
  00006	b9 09 00 00 00	 mov	 ecx, 9
  0000b	c1 e2 04	 shl	 edx, 4
  0000e	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR ?itemWndMaxBag@@3HA ; itemWndMaxBag
  00014	83 c2 18	 add	 edx, 24			; 00000018H
  00017	3b d1		 cmp	 edx, ecx
  00019	76 15		 jbe	 SHORT $LN3@IsBagFull
  0001b	b8 fc 0e 00 00	 mov	 eax, OFFSET ?pc@@3UPC@@A+3836
$LL4@IsBagFull:

; 20727: 	{
; 20728: 		if (pc.item[i].useFlag == FALSE)

  00020	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00024	74 10		 je	 SHORT $LN8@IsBagFull

; 20726: 	for (size_t i = MAX_ITEMSTART; i < MAX_ITEMSTART + MAX_MAXHAVEITEM + MAX_MAXHAVEITEM * itemWndMaxBag; i++)

  00026	41		 inc	 ecx
  00027	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  0002c	3b ca		 cmp	 ecx, edx
  0002e	72 f0		 jb	 SHORT $LL4@IsBagFull
$LN3@IsBagFull:

; 20730: 	}
; 20731: 	return TRUE;

  00030	b8 01 00 00 00	 mov	 eax, 1

; 20732: }

  00035	c3		 ret	 0
$LN8@IsBagFull:

; 20729: 			return FALSE;

  00036	33 c0		 xor	 eax, eax

; 20732: }

  00038	c3		 ret	 0
?IsBagFull@Mammoth@@QAEHXZ ENDP				; Mammoth::IsBagFull
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?GetCouponCount@Mammoth@@QAEHXZ
_TEXT	SEGMENT
?GetCouponCount@Mammoth@@QAEHXZ PROC			; Mammoth::GetCouponCount, COMDAT
; _this$ = ecx

; 20708: {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 20709: 	int cnt = 0;

  00002	33 ff		 xor	 edi, edi
  00004	be 5c 0d 00 00	 mov	 esi, 3420		; 00000d5cH
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@GetCouponC:

; 20712: 	{
; 20713: 		item = &pc.item[i];
; 20714: 		if (item->useFlag == FALSE) continue;

  00010	66 83 be a0 01
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A[esi+416], 0
  00018	74 75		 je	 SHORT $LN2@GetCouponC

; 20715: 		if (item->graNo != COUPON_IMG) continue;

  0001a	81 be c8 00 00
	00 be 91 00 00	 cmp	 DWORD PTR ?pc@@3UPC@@A[esi+200], 37310 ; 000091beH
  00024	75 69		 jne	 SHORT $LN2@GetCouponC

; 20716: 		if (strcmp(item->name, COUPON_NAME) != 0) continue;

  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0L@HPPHGFBL@?$LI?$LO?$LI?p?$LN?$LK?D?m?F?y@
  0002b	8d 86 aa 01 00
	00		 lea	 eax, DWORD PTR ?pc@@3UPC@@A[esi+426]
$LL14@GetCouponC:
  00031	8a 10		 mov	 dl, BYTE PTR [eax]
  00033	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00035	75 1a		 jne	 SHORT $LN15@GetCouponC
  00037	84 d2		 test	 dl, dl
  00039	74 12		 je	 SHORT $LN16@GetCouponC
  0003b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0003e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00041	75 0e		 jne	 SHORT $LN15@GetCouponC
  00043	83 c0 02	 add	 eax, 2
  00046	83 c1 02	 add	 ecx, 2
  00049	84 d2		 test	 dl, dl
  0004b	75 e4		 jne	 SHORT $LL14@GetCouponC
$LN16@GetCouponC:
  0004d	33 c0		 xor	 eax, eax
  0004f	eb 05		 jmp	 SHORT $LN17@GetCouponC
$LN15@GetCouponC:
  00051	1b c0		 sbb	 eax, eax
  00053	83 c8 01	 or	 eax, 1
$LN17@GetCouponC:
  00056	85 c0		 test	 eax, eax
  00058	75 35		 jne	 SHORT $LN2@GetCouponC

; 20717: 		if (strcmp(item->memo, COUPON_DESC) != 0) continue;

  0005a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CC@OFAJPOPK@?$LH?$KD?$LE?$PN?$MA?$LI?$LH?N?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?H?$LJ?$LF?f?G?Q?$LE?Y?5?$CI?$LH?$KD?$LE@
  0005f	8d 8e d8 01 00
	00		 lea	 ecx, DWORD PTR ?pc@@3UPC@@A[esi+472]
$LL18@GetCouponC:
  00065	8a 11		 mov	 dl, BYTE PTR [ecx]
  00067	3a 10		 cmp	 dl, BYTE PTR [eax]
  00069	75 1a		 jne	 SHORT $LN19@GetCouponC
  0006b	84 d2		 test	 dl, dl
  0006d	74 12		 je	 SHORT $LN20@GetCouponC
  0006f	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00072	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00075	75 0e		 jne	 SHORT $LN19@GetCouponC
  00077	83 c1 02	 add	 ecx, 2
  0007a	83 c0 02	 add	 eax, 2
  0007d	84 d2		 test	 dl, dl
  0007f	75 e4		 jne	 SHORT $LL18@GetCouponC
$LN20@GetCouponC:
  00081	33 c0		 xor	 eax, eax
  00083	eb 05		 jmp	 SHORT $LN21@GetCouponC
$LN19@GetCouponC:
  00085	1b c0		 sbb	 eax, eax
  00087	83 c8 01	 or	 eax, 1
$LN21@GetCouponC:
  0008a	85 c0		 test	 eax, eax
  0008c	75 01		 jne	 SHORT $LN2@GetCouponC

; 20718: 
; 20719: 		cnt++;

  0008e	47		 inc	 edi
$LN2@GetCouponC:

; 20710: 	ITEM* item;
; 20711: 	for (size_t i = MAX_ITEMSTART; i < MAX_ITEM; i++)

  0008f	81 c6 7c 01 00
	00		 add	 esi, 380		; 0000017cH
  00095	81 fe 28 50 00
	00		 cmp	 esi, 20520		; 00005028H
  0009b	0f 82 6f ff ff
	ff		 jb	 $LL4@GetCouponC

; 20720: 	}
; 20721: 	return cnt;

  000a1	8b c7		 mov	 eax, edi
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi

; 20722: }

  000a5	c3		 ret	 0
?GetCouponCount@Mammoth@@QAEHXZ ENDP			; Mammoth::GetCouponCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?DisplayRewardList@Mammoth@@QAEXXZ
_TEXT	SEGMENT
?DisplayRewardList@Mammoth@@QAEXXZ PROC			; Mammoth::DisplayRewardList, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?i@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20690: {

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00009	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	2b c1		 sub	 eax, ecx
  00011	c1 f8 02	 sar	 eax, 2
  00014	3b c2		 cmp	 eax, edx
  00016	76 54		 jbe	 SHORT $LN13@DisplayRew
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20695: 	StockDispBuffer(X-225, Y-160, DISP_PRIO_IME4, RewardList.at(i), 1);

  00018	6a 01		 push	 1
  0001a	ff 34 91	 push	 DWORD PTR [ecx+edx*4]
  0001d	6a 6a		 push	 106			; 0000006aH
  0001f	68 8c 00 00 00	 push	 140			; 0000008cH
  00024	68 af 00 00 00	 push	 175			; 000000afH
  00029	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0002e	83 c4 14	 add	 esp, 20			; 00000014H

; 20696: 
; 20697: 	if (TimeGetTime() > LastTIme)

  00031	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00036	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?LastTIme@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA
  0003c	76 15		 jbe	 SHORT $LN2@DisplayRew

; 20698: 	{
; 20699: 		++i;

  0003e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?i@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA

; 20700: 		LastTIme = TimeGetTime() + 500;

  00044	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00049	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?LastTIme@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA, eax
$LN2@DisplayRew:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00053	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00056	2b 46 14	 sub	 eax, DWORD PTR [esi+20]
  00059	c1 f8 02	 sar	 eax, 2
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20703: 	if (i >= RewardList.size())

  0005c	39 05 00 00 00
	00		 cmp	 DWORD PTR ?i@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA, eax
  00062	5e		 pop	 esi
  00063	1b c0		 sbb	 eax, eax
  00065	21 05 00 00 00
	00		 and	 DWORD PTR ?i@?1??DisplayRewardList@Mammoth@@QAEXXZ@4HA, eax

; 20705: }

  0006b	c3		 ret	 0
$LN13@DisplayRew:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1520 :             _Xrange();

  0006c	e8 00 00 00 00	 call	 ?_Xrange@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xrange
$LN11@DisplayRew:
  00071	cc		 int	 3
?DisplayRewardList@Mammoth@@QAEXXZ ENDP			; Mammoth::DisplayRewardList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?GetCouponIndex@Mammoth@@QAEHXZ
_TEXT	SEGMENT
?GetCouponIndex@Mammoth@@QAEHXZ PROC			; Mammoth::GetCouponIndex, COMDAT
; _this$ = ecx

; 20674: {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 20675: 	ITEM* item;
; 20676: 	for (size_t i = MAX_ITEMSTART; i < MAX_ITEM; i++)

  00002	bf 09 00 00 00	 mov	 edi, 9
  00007	be 5c 0d 00 00	 mov	 esi, 3420		; 00000d5cH
  0000c	0f 1f 40 00	 npad	 4
$LL4@GetCouponI:

; 20677: 	{
; 20678: 		item = &pc.item[i];
; 20679: 		if (item->useFlag == FALSE) continue;

  00010	66 83 be a0 01
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A[esi+416], 0
  00018	74 74		 je	 SHORT $LN2@GetCouponI

; 20680: 		if (item->graNo != COUPON_IMG) continue;

  0001a	81 be c8 00 00
	00 be 91 00 00	 cmp	 DWORD PTR ?pc@@3UPC@@A[esi+200], 37310 ; 000091beH
  00024	75 68		 jne	 SHORT $LN2@GetCouponI

; 20681: 		if (strcmp(item->name, COUPON_NAME) != 0) continue;

  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0L@HPPHGFBL@?$LI?$LO?$LI?p?$LN?$LK?D?m?F?y@
  0002b	8d 86 aa 01 00
	00		 lea	 eax, DWORD PTR ?pc@@3UPC@@A[esi+426]
$LL15@GetCouponI:
  00031	8a 10		 mov	 dl, BYTE PTR [eax]
  00033	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00035	75 1a		 jne	 SHORT $LN16@GetCouponI
  00037	84 d2		 test	 dl, dl
  00039	74 12		 je	 SHORT $LN17@GetCouponI
  0003b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0003e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00041	75 0e		 jne	 SHORT $LN16@GetCouponI
  00043	83 c0 02	 add	 eax, 2
  00046	83 c1 02	 add	 ecx, 2
  00049	84 d2		 test	 dl, dl
  0004b	75 e4		 jne	 SHORT $LL15@GetCouponI
$LN17@GetCouponI:
  0004d	33 c0		 xor	 eax, eax
  0004f	eb 05		 jmp	 SHORT $LN18@GetCouponI
$LN16@GetCouponI:
  00051	1b c0		 sbb	 eax, eax
  00053	83 c8 01	 or	 eax, 1
$LN18@GetCouponI:
  00056	85 c0		 test	 eax, eax
  00058	75 34		 jne	 SHORT $LN2@GetCouponI

; 20682: 		if (strcmp(item->memo, COUPON_DESC) != 0) continue;

  0005a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CC@OFAJPOPK@?$LH?$KD?$LE?$PN?$MA?$LI?$LH?N?5?$LO?F?$MA?L?E?$NL?$MA?$LL?5?H?$LJ?$LF?f?G?Q?$LE?Y?5?$CI?$LH?$KD?$LE@
  0005f	8d 8e d8 01 00
	00		 lea	 ecx, DWORD PTR ?pc@@3UPC@@A[esi+472]
$LL19@GetCouponI:
  00065	8a 11		 mov	 dl, BYTE PTR [ecx]
  00067	3a 10		 cmp	 dl, BYTE PTR [eax]
  00069	75 1a		 jne	 SHORT $LN20@GetCouponI
  0006b	84 d2		 test	 dl, dl
  0006d	74 12		 je	 SHORT $LN21@GetCouponI
  0006f	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00072	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00075	75 0e		 jne	 SHORT $LN20@GetCouponI
  00077	83 c1 02	 add	 ecx, 2
  0007a	83 c0 02	 add	 eax, 2
  0007d	84 d2		 test	 dl, dl
  0007f	75 e4		 jne	 SHORT $LL19@GetCouponI
$LN21@GetCouponI:
  00081	33 c0		 xor	 eax, eax
  00083	eb 05		 jmp	 SHORT $LN22@GetCouponI
$LN20@GetCouponI:
  00085	1b c0		 sbb	 eax, eax
  00087	83 c8 01	 or	 eax, 1
$LN22@GetCouponI:
  0008a	85 c0		 test	 eax, eax
  0008c	74 19		 je	 SHORT $LN8@GetCouponI
$LN2@GetCouponI:

; 20675: 	ITEM* item;
; 20676: 	for (size_t i = MAX_ITEMSTART; i < MAX_ITEM; i++)

  0008e	81 c6 7c 01 00
	00		 add	 esi, 380		; 0000017cH
  00094	47		 inc	 edi
  00095	81 fe 28 50 00
	00		 cmp	 esi, 20520		; 00005028H
  0009b	0f 82 6f ff ff
	ff		 jb	 $LL4@GetCouponI

; 20685: 	}
; 20686: 	return -1;

  000a1	5f		 pop	 edi
  000a2	83 c8 ff	 or	 eax, -1

; 20687: }

  000a5	5e		 pop	 esi
  000a6	c3		 ret	 0
$LN8@GetCouponI:

; 20683: 
; 20684: 		return i;

  000a7	8b c7		 mov	 eax, edi
  000a9	5f		 pop	 edi

; 20687: }

  000aa	5e		 pop	 esi
  000ab	c3		 ret	 0
?GetCouponIndex@Mammoth@@QAEHXZ ENDP			; Mammoth::GetCouponIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?MouseControl@Mammoth@@QAEXXZ
_TEXT	SEGMENT
?MouseControl@Mammoth@@QAEXXZ PROC			; Mammoth::MouseControl, COMDAT
; _this$ = ecx

; 20637: 	if (mouse.onceState & MOUSE_LEFT_CRICK)

  00000	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	74 64		 je	 SHORT $GO_FAIL$45

; 20638: 	{
; 20639: 		if (HitDispNo == Buttons.at(BUTTONS::START))

  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00012	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00015	75 36		 jne	 SHORT $LN3@MouseContr

; 20640: 		{
; 20641: 			int CouponIndex = GetCouponIndex();

  00017	e8 00 00 00 00	 call	 ?GetCouponIndex@Mammoth@@QAEHXZ ; Mammoth::GetCouponIndex
  0001c	8b f8		 mov	 edi, eax

; 20642: 
; 20643: 			if (CouponIndex == -1) goto GO_FAIL;

  0001e	83 ff ff	 cmp	 edi, -1
  00021	74 4e		 je	 SHORT $GO_FAIL$45

; 20644: 
; 20645: 			if (IsBagFull()) goto GO_FAIL;

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?IsBagFull@Mammoth@@QAEHXZ ; Mammoth::IsBagFull
  0002a	85 c0		 test	 eax, eax
  0002c	75 43		 jne	 SHORT $GO_FAIL$45

; 20646: 
; 20647: 
; 20648: 
; 20649: 
; 20650: 			m_Status = _STATUS::ANIMATING;
; 20651: 			InitAction();

  0002e	8b ce		 mov	 ecx, esi
  00030	c7 46 28 01 00
	00 00		 mov	 DWORD PTR [esi+40], 1
  00037	e8 00 00 00 00	 call	 ?InitAction@Mammoth@@QAEXXZ ; Mammoth::InitAction

; 20652: 			//Send Packet
; 20653: 			lssproto_MAMMOTH_START_send(sockfd, CouponIndex);

  0003c	57		 push	 edi
  0003d	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00043	e8 00 00 00 00	 call	 ?lssproto_MAMMOTH_START_send@@YAXHH@Z ; lssproto_MAMMOTH_START_send
  00048	83 c4 08	 add	 esp, 8

; 20654: 		}

  0004b	eb 24		 jmp	 SHORT $GO_FAIL$45
$LN3@MouseContr:

; 20655: 		else if (HitDispNo == Buttons.at(BUTTONS::EXIT))

  0004d	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00050	75 07		 jne	 SHORT $LN9@MouseContr

; 20656: 		{
; 20657: 			Close();

  00052	e8 00 00 00 00	 call	 ?Close@Mammoth@@QAEXXZ	; Mammoth::Close

; 20658: 		}

  00057	eb 18		 jmp	 SHORT $GO_FAIL$45
$LN9@MouseContr:

; 20659: 		else if (HitDispNo == Buttons.at(BUTTONS::GET))

  00059	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  0005c	75 07		 jne	 SHORT $LN11@MouseContr

; 20660: 		{
; 20661: 			Init();

  0005e	e8 00 00 00 00	 call	 ?Init@Mammoth@@QAEXXZ	; Mammoth::Init

; 20662: 		}

  00063	eb 0c		 jmp	 SHORT $GO_FAIL$45
$LN11@MouseContr:

; 20663: 		else if (HitDispNo == Buttons.at(BUTTONS::CLOSE))

  00065	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00068	75 07		 jne	 SHORT $GO_FAIL$45

; 20664: 		{
; 20665: 			m_Fail = _FAIL::NONE;

  0006a	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
$GO_FAIL$45:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4880 :                 *_UDest = _Val;

  00071	5f		 pop	 edi
  00072	c7 46 04 fe ff
	ff ff		 mov	 DWORD PTR [esi+4], -2	; fffffffeH
  00079	c7 46 08 fe ff
	ff ff		 mov	 DWORD PTR [esi+8], -2	; fffffffeH
  00080	c7 46 0c fe ff
	ff ff		 mov	 DWORD PTR [esi+12], -2	; fffffffeH
  00087	c7 46 10 fe ff
	ff ff		 mov	 DWORD PTR [esi+16], -2	; fffffffeH
  0008e	5e		 pop	 esi
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20671: }

  0008f	c3		 ret	 0
?MouseControl@Mammoth@@QAEXXZ ENDP			; Mammoth::MouseControl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?Close@Mammoth@@QAEXXZ
_TEXT	SEGMENT
?Close@Mammoth@@QAEXXZ PROC				; Mammoth::Close, COMDAT
; _this$ = ecx

; 20630: {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 20631: 	KillAction();

  00003	e8 00 00 00 00	 call	 ?KillAction@Mammoth@@QAEXXZ ; Mammoth::KillAction

; 20632: 	m_OpenFlag = FALSE;

  00008	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0000f	5e		 pop	 esi

; 20633: }

  00010	c3		 ret	 0
?Close@Mammoth@@QAEXXZ ENDP				; Mammoth::Close
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\string
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\string
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\string
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\string
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?Open@Mammoth@@QAEXPAD@Z
_TEXT	SEGMENT
_<end>$L0$1$ = -104					; size = 4
$T2 = -104						; size = 4
__Eptr$3 = -100						; size = 4
$T4 = -100						; size = 4
_this$GSCopy$1$ = -96					; size = 4
_<begin>$L0$1$ = -92					; size = 4
__Right_size$1$ = -88					; size = 4
__Result$1$ = -84					; size = 4
_vstr$5 = -80						; size = 12
__Errno_ref$1$ = -68					; size = 4
__New_array$6 = -68					; size = 4
$T7 = -68						; size = 4
_str$8 = -64						; size = 24
_v$9 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
?Open@Mammoth@@QAEXPAD@Z PROC				; Mammoth::Open, COMDAT
; _this$ = ecx

; 20598: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Open@Mammoth@@QAEXPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d a0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 20599: 	if (m_OpenFlag == FALSE)

  0002d	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  00031	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00034	0f 85 d1 02 00
	00		 jne	 $LN5@Open

; 20600: 	{
; 20601: 		RewardList.clear();

  0003a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0003d	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00040	8b ca		 mov	 ecx, edx

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00042	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _str$8[ebp+16], 0
  00049	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _str$8[ebp+20], 0

; 4377 :         _Mypair._Myval2._Mysize = 0;

  00050	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _str$8[ebp+16], 0

; 4378 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00057	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _str$8[ebp+20], 15 ; 0000000fH

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0005e	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]

; 4380 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00061	c6 45 c0 00	 mov	 BYTE PTR _str$8[ebp], 0
$LL150@Open:

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00065	8a 01		 mov	 al, BYTE PTR [ecx]
  00067	41		 inc	 ecx
  00068	84 c0		 test	 al, al
  0006a	75 f9		 jne	 SHORT $LL150@Open
  0006c	2b ce		 sub	 ecx, esi

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006e	51		 push	 ecx
  0006f	52		 push	 edx
  00070	8d 4d c0	 lea	 ecx, DWORD PTR _str$8[ebp]
  00073	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20603: 		std::string str(data);

  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 20604: 		auto vstr = PetData::Instance().Split(str, "|");

  0007f	83 ec 18	 sub	 esp, 24			; 00000018H
  00082	8b c4		 mov	 eax, esp
  00084	89 65 98	 mov	 DWORD PTR $T2[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4378 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00087	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 3046 :             _Mypair._Myval2._Mysize = _Count;

  0008e	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00095	66 c7 00 7c 00	 mov	 WORD PTR [eax], 124	; 0000007cH
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20604: 		auto vstr = PetData::Instance().Split(str, "|");

  0009a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009e	83 ec 18	 sub	 esp, 24			; 00000018H
  000a1	8d 45 c0	 lea	 eax, DWORD PTR _str$8[ebp]
  000a4	89 65 9c	 mov	 DWORD PTR $T4[ebp], esp
  000a7	8b cc		 mov	 ecx, esp
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000af	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000b3	8d 45 b0	 lea	 eax, DWORD PTR _vstr$5[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?Instance@PetData@@SAAAV1@XZ ; PetData::Instance
  000bc	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c0	8b c8		 mov	 ecx, eax
  000c2	e8 00 00 00 00	 call	 ?Split@PetData@@QAE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0@Z ; PetData::Split
  000c7	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 20606: 		for (std::string v : vstr)

  000cb	8b 7d b0	 mov	 edi, DWORD PTR _vstr$5[ebp]
  000ce	8b 45 b4	 mov	 eax, DWORD PTR _vstr$5[ebp+4]
  000d1	89 7d a4	 mov	 DWORD PTR _<begin>$L0$1$[ebp], edi
  000d4	89 45 98	 mov	 DWORD PTR _<end>$L0$1$[ebp], eax
  000d7	3b f8		 cmp	 edi, eax
  000d9	0f 84 29 01 00
	00		 je	 $LN3@Open
  000df	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
$LL4@Open:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  000e4	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2218 :         const value_type* _Result = _Bx._Buf;

  000e8	8b cf		 mov	 ecx, edi

; 2734 :         const size_type _Right_size   = _Right_data._Mysize;

  000ea	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  000ed	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _v$9[ebp+16], 0
  000f4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _v$9[ebp+20], 0

; 2734 :         const size_type _Right_size   = _Right_data._Mysize;

  000fb	89 45 a8	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  000fe	89 7d ac	 mov	 DWORD PTR __Result$1$[ebp], edi

; 2219 :         if (_Large_string_engaged()) {

  00101	72 05		 jb	 SHORT $LN84@Open

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00103	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00105	89 4d ac	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN84@Open:

; 2737 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00108	83 f8 10	 cmp	 eax, 16			; 00000010H
  0010b	73 10		 jae	 SHORT $LN81@Open

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010d	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]

; 2740 :             _My_data._Myres  = _BUF_SIZE - 1;

  00110	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _v$9[ebp+20], 15 ; 0000000fH

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00117	0f 11 45 d8	 movups	 XMMWORD PTR _v$9[ebp], xmm0

; 2741 :             return;

  0011b	eb 43		 jmp	 SHORT $LN153@Open
$LN81@Open:

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al                     = _Getal();
; 2745 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0011d	8b f8		 mov	 edi, eax
  0011f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00122	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00128	0f 47 fa	 cmova	 edi, edx

; 2746 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0012b	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2746 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  00134	8b f0		 mov	 esi, eax

; 2747 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00136	8d 45 bc	 lea	 eax, DWORD PTR __New_array$6[ebp]
  00139	50		 push	 eax
  0013a	8d 45 d8	 lea	 eax, DWORD PTR _v$9[ebp]
  0013d	89 75 bc	 mov	 DWORD PTR __New_array$6[ebp], esi
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2748 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00146	8b 4d a8	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00149	41		 inc	 ecx

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0014a	51		 push	 ecx
  0014b	ff 75 ac	 push	 DWORD PTR __Result$1$[ebp]
  0014e	56		 push	 esi
  0014f	e8 00 00 00 00	 call	 _memcpy

; 2749 :         _My_data._Mysize = _Right_size;

  00154	8b 45 a8	 mov	 eax, DWORD PTR __Right_size$1$[ebp]

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00157	83 c4 18	 add	 esp, 24			; 00000018H

; 2750 :         _My_data._Myres  = _New_capacity;

  0015a	89 7d ec	 mov	 DWORD PTR _v$9[ebp+20], edi
  0015d	8b 7d a4	 mov	 edi, DWORD PTR _<begin>$L0$1$[ebp]
$LN153@Open:
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20606: 		for (std::string v : vstr)

  00160	89 45 e8	 mov	 DWORD PTR _v$9[ebp+16], eax
  00163	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\string

; 90   :     int& _Errno_ref  = errno; // Nonzero cost, pay it once

  00167	e8 00 00 00 00	 call	 __errno
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  0016c	83 7d ec 10	 cmp	 DWORD PTR _v$9[ebp+20], 16 ; 00000010H

; 2218 :         const value_type* _Result = _Bx._Buf;

  00170	8d 75 d8	 lea	 esi, DWORD PTR _v$9[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\string

; 90   :     int& _Errno_ref  = errno; // Nonzero cost, pay it once

  00173	89 45 bc	 mov	 DWORD PTR __Errno_ref$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2219 :         if (_Large_string_engaged()) {

  00176	0f 43 75 d8	 cmovae	 esi, DWORD PTR _v$9[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\string

; 93   :     _Errno_ref      = 0;

  0017a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 94   :     const long _Ans = _CSTD strtol(_Ptr, &_Eptr, _Base);

  00180	8d 45 9c	 lea	 eax, DWORD PTR __Eptr$3[ebp]
  00183	6a 0a		 push	 10			; 0000000aH
  00185	50		 push	 eax
  00186	56		 push	 esi
  00187	e8 00 00 00 00	 call	 _strtol
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018f	8b c8		 mov	 ecx, eax

; 95   : 
; 96   :     if (_Ptr == _Eptr) {

  00191	3b 75 9c	 cmp	 esi, DWORD PTR __Eptr$3[ebp]
  00194	0f 84 8e 01 00
	00		 je	 $LN144@Open

; 98   :     }
; 99   : 
; 100  :     if (_Errno_ref == ERANGE || _Ans < INT_MIN || INT_MAX < _Ans) {

  0019a	8b 45 bc	 mov	 eax, DWORD PTR __Errno_ref$1$[ebp]
  0019d	83 38 22	 cmp	 DWORD PTR [eax], 34	; 00000022H
  001a0	0f 84 8c 01 00
	00		 je	 $LN145@Open
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  001a6	8b 75 a0	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20608: 			RewardList.push_back(std::stoi(v));

  001a9	89 4d bc	 mov	 DWORD PTR $T7[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  001ac	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  001af	3b 46 1c	 cmp	 eax, DWORD PTR [esi+28]
  001b2	74 08		 je	 SHORT $LN112@Open

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  001b4	89 08		 mov	 DWORD PTR [eax], ecx

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  001b6	83 46 18 04	 add	 DWORD PTR [esi+24], 4

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  001ba	eb 0d		 jmp	 SHORT $LN111@Open
$LN112@Open:

; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001bc	8d 4d bc	 lea	 ecx, DWORD PTR $T7[ebp]
  001bf	51		 push	 ecx
  001c0	50		 push	 eax
  001c1	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  001c4	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@H@?$vector@HV?$allocator@H@std@@@std@@QAEPAHQAH$$QAH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int>
$LN111@Open:
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20609: 		}

  001c9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  001cd	8b 45 ec	 mov	 eax, DWORD PTR _v$9[ebp+20]
  001d0	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  001d3	72 0d		 jb	 SHORT $LN119@Open

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  001d5	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d6	50		 push	 eax
  001d7	ff 75 d8	 push	 DWORD PTR _v$9[ebp]
  001da	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001df	83 c4 08	 add	 esp, 8
$LN119@Open:
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20606: 		for (std::string v : vstr)

  001e2	83 c7 18	 add	 edi, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  001e5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _v$9[ebp+16], 0
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20606: 		for (std::string v : vstr)

  001ec	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  001f1	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _v$9[ebp+20], 15 ; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  001f8	c6 45 d8 00	 mov	 BYTE PTR _v$9[ebp], 0
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20606: 		for (std::string v : vstr)

  001fc	89 7d a4	 mov	 DWORD PTR _<begin>$L0$1$[ebp], edi
  001ff	3b 7d 98	 cmp	 edi, DWORD PTR _<end>$L0$1$[ebp]
  00202	0f 85 dc fe ff
	ff		 jne	 $LL4@Open
$LN3@Open:

; 20610: 
; 20611: 
; 20612: 		if (MenuToggleFlag != 0 || BattleResultWndFlag >= 1) {

  00208	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?MenuToggleFlag@@3IA, 0 ; MenuToggleFlag
  0020f	75 09		 jne	 SHORT $LN7@Open
  00211	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?BattleResultWndFlag@@3HA, 1 ; BattleResultWndFlag
  00218	7c 52		 jl	 SHORT $LN8@Open
$LN7@Open:

; 20613: 			MenuToggleFlag = 0;
; 20614: 			BattleResultWndFlag = FALSE;
; 20615: 			mouse.itemNo = -1;
; 20616: 			itemNo = -1;
; 20617: 			jujutuNo = -1;
; 20618: 			if (MapWmdFlagBak != TRUE) {

  0021a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?MapWmdFlagBak@@3HA, 1 ; MapWmdFlagBak
  00221	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 0 ; MenuToggleFlag
  0022b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  00235	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  0023f	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1
  00249	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?jujutuNo@@3HA, -1
  00253	74 17		 je	 SHORT $LN8@Open

; 20619: 				play_se(203, 320, 240);

  00255	68 f0 00 00 00	 push	 240			; 000000f0H
  0025a	68 40 01 00 00	 push	 320			; 00000140H
  0025f	68 cb 00 00 00	 push	 203			; 000000cbH
  00264	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00269	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@Open:

; 20620: 			}
; 20621: 		}
; 20622: 		DeathMenuAction();

  0026c	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 20623: 		DeathMenuAction2();

  00271	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 20624: 		m_OpenFlag = TRUE;

  00276	8b 45 a0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]

; 20625: 		Init();

  00279	8b c8		 mov	 ecx, eax
  0027b	c7 40 30 01 00
	00 00		 mov	 DWORD PTR [eax+48], 1
  00282	e8 00 00 00 00	 call	 ?Init@Mammoth@@QAEXXZ	; Mammoth::Init

; 20626: 	}

  00287	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  0028b	8b 45 b0	 mov	 eax, DWORD PTR _vstr$5[ebp]
  0028e	85 c0		 test	 eax, eax
  00290	74 4b		 je	 SHORT $LN128@Open

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00292	8d 4d b0	 lea	 ecx, DWORD PTR _vstr$5[ebp]
  00295	51		 push	 ecx
  00296	ff 75 b4	 push	 DWORD PTR _vstr$5[ebp+4]
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0029f	8b 4d b8	 mov	 ecx, DWORD PTR _vstr$5[ebp+8]
  002a2	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002a7	8b 75 b0	 mov	 esi, DWORD PTR _vstr$5[ebp]
  002aa	2b ce		 sub	 ecx, esi
  002ac	f7 e9		 imul	 ecx
  002ae	c1 fa 02	 sar	 edx, 2
  002b1	8b c2		 mov	 eax, edx
  002b3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002b6	03 c2		 add	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002b8	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  002bb	c1 e0 03	 shl	 eax, 3
  002be	50		 push	 eax
  002bf	56		 push	 esi
  002c0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002c5	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  002c8	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vstr$5[ebp], 0

; 1699 :             _Mylast  = pointer();

  002cf	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _vstr$5[ebp+4], 0

; 1700 :             _Myend   = pointer();

  002d6	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _vstr$5[ebp+8], 0
$LN128@Open:
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20626: 	}

  002dd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  002e4	8b 45 d4	 mov	 eax, DWORD PTR _str$8[ebp+20]
  002e7	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  002ea	72 0d		 jb	 SHORT $LN137@Open

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  002ec	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002ed	50		 push	 eax
  002ee	ff 75 c0	 push	 DWORD PTR _str$8[ebp]
  002f1	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002f6	83 c4 08	 add	 esp, 8
$LN137@Open:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  002f9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _str$8[ebp+16], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00300	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _str$8[ebp+20], 15 ; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00307	c6 45 c0 00	 mov	 BYTE PTR _str$8[ebp], 0
$LN5@Open:
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20627: }

  0030b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0030e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00315	59		 pop	 ecx
  00316	5f		 pop	 edi
  00317	5e		 pop	 esi
  00318	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031b	33 cd		 xor	 ecx, ebp
  0031d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 04 00	 ret	 4
$LN144@Open:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\string

; 97   :         _Xinvalid_argument("invalid stoi argument");

  00328	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@
  0032d	e8 00 00 00 00	 call	 ?_Xinvalid_argument@std@@YAXPBD@Z ; std::_Xinvalid_argument
$LN145@Open:

; 101  :         _Xout_of_range("stoi argument out of range");

  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@
  00337	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN152@Open:
  0033c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _str$8[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$1:
  00008	8b 4d 98	 mov	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$2:
  00010	8b 4d 9c	 mov	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$3:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR _vstr$5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?Open@Mammoth@@QAEXPAD@Z$4:
  00020	8d 4d d8	 lea	 ecx, DWORD PTR _v$9[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
__ehhandler$?Open@Mammoth@@QAEXPAD@Z:
  0002d	90		 npad	 1
  0002e	90		 npad	 1
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Open@Mammoth@@QAEXPAD@Z
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Open@Mammoth@@QAEXPAD@Z ENDP				; Mammoth::Open
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?IsOpen@Mammoth@@QAEHXZ
_TEXT	SEGMENT
?IsOpen@Mammoth@@QAEHXZ PROC				; Mammoth::IsOpen, COMDAT
; _this$ = ecx

; 20741: 	return m_OpenFlag;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]

; 20742: }

  00003	c3		 ret	 0
?IsOpen@Mammoth@@QAEHXZ ENDP				; Mammoth::IsOpen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?KillAction@Mammoth@@QAEXXZ
_TEXT	SEGMENT
?KillAction@Mammoth@@QAEXXZ PROC			; Mammoth::KillAction, COMDAT
; _this$ = ecx

; 20593: 	if (m_Animation != nullptr)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 07		 je	 SHORT $LN2@KillAction

; 20594: 		DeathAction(m_Animation);

  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0000c	59		 pop	 ecx
$LN2@KillAction:

; 20595: }

  0000d	c3		 ret	 0
?KillAction@Mammoth@@QAEXXZ ENDP			; Mammoth::KillAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitAction@Mammoth@@QAEXXZ
_TEXT	SEGMENT
?InitAction@Mammoth@@QAEXXZ PROC			; Mammoth::InitAction, COMDAT
; _this$ = ecx

; 20582: {

  00000	56		 push	 esi

; 20583: 	m_Animation = GetAction(PRIO_CHR, 0);

  00001	6a 00		 push	 0
  00003	6a 01		 push	 1
  00005	8b f1		 mov	 esi, ecx
  00007	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	83 c4 08	 add	 esp, 8

; 20584: 	m_Animation->anim_chr_no = 120284;

  00011	c7 80 44 01 00
	00 dc d5 01 00	 mov	 DWORD PTR [eax+324], 120284 ; 0001d5dcH

; 20585: 	m_Animation->dispPrio = DISP_PRIO_IME3;

  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	c6 40 15 69	 mov	 BYTE PTR [eax+21], 105	; 00000069H

; 20586: 	m_Animation->x = X - 1;

  00021	8b 06		 mov	 eax, DWORD PTR [esi]
  00023	c7 40 18 8f 01
	00 00		 mov	 DWORD PTR [eax+24], 399	; 0000018fH

; 20587: 	m_Animation->y = Y + 12;

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	c7 40 1c 38 01
	00 00		 mov	 DWORD PTR [eax+28], 312	; 00000138H

; 20588: 	m_Animation->anim_ang = 0;

  00033	8b 06		 mov	 eax, DWORD PTR [esi]
  00035	5e		 pop	 esi
  00036	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0

; 20589: }

  00040	c3		 ret	 0
?InitAction@Mammoth@@QAEXXZ ENDP			; Mammoth::InitAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?Animation@Mammoth@@QAEXXZ
_TEXT	SEGMENT
?Animation@Mammoth@@QAEXXZ PROC				; Mammoth::Animation, COMDAT
; _this$ = ecx

; 20578: 	
; 20579: }

  00000	c2 00 00	 ret	 0
?Animation@Mammoth@@QAEXXZ ENDP				; Mammoth::Animation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?Init@Mammoth@@QAEXXZ
_TEXT	SEGMENT
?Init@Mammoth@@QAEXXZ PROC				; Mammoth::Init, COMDAT
; _this$ = ecx

; 20562: {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 20563: 	m_ItemReceiveIndex = -1;

  00003	c7 46 24 ff ff
	ff ff		 mov	 DWORD PTR [esi+36], -1

; 20564: 	m_Status = _STATUS::STARTING;

  0000a	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 20565: 	m_Fail = _FAIL::NONE;

  00011	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4880 :                 *_UDest = _Val;

  00018	c7 46 04 fe ff
	ff ff		 mov	 DWORD PTR [esi+4], -2	; fffffffeH
  0001f	c7 46 08 fe ff
	ff ff		 mov	 DWORD PTR [esi+8], -2	; fffffffeH
  00026	c7 46 0c fe ff
	ff ff		 mov	 DWORD PTR [esi+12], -2	; fffffffeH
  0002d	c7 46 10 fe ff
	ff ff		 mov	 DWORD PTR [esi+16], -2	; fffffffeH
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20568: 	m_CouponCount = GetCouponCount();

  00034	e8 00 00 00 00	 call	 ?GetCouponCount@Mammoth@@QAEHXZ ; Mammoth::GetCouponCount
  00039	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 20569: 	if (m_CouponCount == 0)

  0003c	85 c0		 test	 eax, eax
  0003e	75 09		 jne	 SHORT $LN2@Init

; 20570: 		m_Fail = _FAIL::NO_COUPON;

  00040	c7 46 2c 02 00
	00 00		 mov	 DWORD PTR [esi+44], 2
  00047	5e		 pop	 esi

; 20573: 	
; 20574: }

  00048	c3		 ret	 0
$LN2@Init:

; 20571: 	else if (IsBagFull())

  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?IsBagFull@Mammoth@@QAEHXZ ; Mammoth::IsBagFull
  00050	85 c0		 test	 eax, eax
  00052	74 07		 je	 SHORT $LN4@Init

; 20572: 		m_Fail = _FAIL::BAG_FULL;

  00054	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN4@Init:
  0005b	5e		 pop	 esi

; 20573: 	
; 20574: }

  0005c	c3		 ret	 0
?Init@Mammoth@@QAEXXZ ENDP				; Mammoth::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?Display@Mammoth@@QAEXXZ
_TEXT	SEGMENT
?Display@Mammoth@@QAEXXZ PROC				; Mammoth::Display, COMDAT
; _this$ = ecx

; 20486: 	if (joy_trg[0] & JOY_ESC)

  00000	f7 05 00 00 00
	00 00 00 00 80	 test	 DWORD PTR ?joy_trg@@3PAKA, -2147483648 ; 80000000H
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 06		 je	 SHORT $LN4@Display
  0000f	5e		 pop	 esi

; 20487: 	{
; 20488: 		Close();

  00010	e9 00 00 00 00	 jmp	 ?Close@Mammoth@@QAEXXZ	; Mammoth::Close
$LN4@Display:

; 20489: 		return;
; 20490: 	}
; 20491: 	MouseControl();

  00015	e8 00 00 00 00	 call	 ?MouseControl@Mammoth@@QAEXXZ ; Mammoth::MouseControl

; 20492: 
; 20493: 	static int LastTime = 0;
; 20494: 	static int Cursor = 0;
; 20495: 	static char buffer[25];
; 20496: 
; 20497: 	//int StockDispBuffer(int x, int y, UCHAR dispPrio, int bmpNo, BOOL hitFlag)
; 20498: 	//BG
; 20499: 	StockDispBuffer(X, Y, DISP_PRIO_MENU, 60000, 1);

  0001a	6a 01		 push	 1
  0001c	68 60 ea 00 00	 push	 60000			; 0000ea60H
  00021	6a 68		 push	 104			; 00000068H
  00023	68 2c 01 00 00	 push	 300			; 0000012cH
  00028	68 90 01 00 00	 push	 400			; 00000190H
  0002d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00032	83 c4 14	 add	 esp, 20			; 00000014H

; 20500: 
; 20501: 	if (TimeGetTime() > LastTime)

  00035	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0003a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?LastTime@?1??Display@Mammoth@@QAEXXZ@4HA
  00040	76 15		 jbe	 SHORT $LN5@Display

; 20502: 	{
; 20503: 		Cursor++;

  00042	ff 05 00 00 00
	00		 inc	 DWORD PTR ?Cursor@?1??Display@Mammoth@@QAEXXZ@4HA

; 20504: 		LastTime = TimeGetTime() + 500;

  00048	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0004d	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  00052	a3 00 00 00 00	 mov	 DWORD PTR ?LastTime@?1??Display@Mammoth@@QAEXXZ@4HA, eax
$LN5@Display:

; 20505: 	}
; 20506: 
; 20507: 	StockDispBuffer(X + 105, Y - 150, DISP_PRIO_IME3, 60002 + (Cursor % 2), 2);

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Cursor@?1??Display@Mammoth@@QAEXXZ@4HA
  0005c	6a 02		 push	 2
  0005e	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00063	79 05		 jns	 SHORT $LN27@Display
  00065	48		 dec	 eax
  00066	83 c8 fe	 or	 eax, -2			; fffffffeH
  00069	40		 inc	 eax
$LN27@Display:
  0006a	05 62 ea 00 00	 add	 eax, 60002		; 0000ea62H
  0006f	50		 push	 eax
  00070	6a 69		 push	 105			; 00000069H
  00072	68 96 00 00 00	 push	 150			; 00000096H
  00077	68 f9 01 00 00	 push	 505			; 000001f9H
  0007c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20508: 	Buttons.at(BUTTONS::EXIT) = StockDispBuffer(X + 234, Y - 150, DISP_PRIO_IME3, 60004 + (Cursor % 2), 2);

  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Cursor@?1??Display@Mammoth@@QAEXXZ@4HA
  00086	6a 02		 push	 2
  00088	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0008d	79 05		 jns	 SHORT $LN28@Display
  0008f	48		 dec	 eax
  00090	83 c8 fe	 or	 eax, -2			; fffffffeH
  00093	40		 inc	 eax
$LN28@Display:
  00094	05 64 ea 00 00	 add	 eax, 60004		; 0000ea64H
  00099	50		 push	 eax
  0009a	6a 69		 push	 105			; 00000069H
  0009c	68 96 00 00 00	 push	 150			; 00000096H
  000a1	68 7a 02 00 00	 push	 634			; 0000027aH
  000a6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  000ab	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 20509: 
; 20510: 	//TEXT
; 20511: 	sprintf(buffer, "%d", m_CouponCount);

  000ae	ff 76 20	 push	 DWORD PTR [esi+32]
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000b6	68 00 00 00 00	 push	 OFFSET ?buffer@?1??Display@Mammoth@@QAEXXZ@4PADA
  000bb	e8 00 00 00 00	 call	 _sprintf

; 20512: 	StockFontBuffer(X - 25, Y - 158, FONT_PRIO_FRONT, FONT_PAL_WHITE, buffer, 0);

  000c0	6a 00		 push	 0
  000c2	68 00 00 00 00	 push	 OFFSET ?buffer@?1??Display@Mammoth@@QAEXXZ@4PADA
  000c7	6a 00		 push	 0
  000c9	6a 01		 push	 1
  000cb	68 8e 00 00 00	 push	 142			; 0000008eH
  000d0	68 77 01 00 00	 push	 375			; 00000177H
  000d5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  000da	83 c4 4c	 add	 esp, 76			; 0000004cH

; 20513: 
; 20514: 	DisplayRewardList();

  000dd	8b ce		 mov	 ecx, esi
  000df	e8 00 00 00 00	 call	 ?DisplayRewardList@Mammoth@@QAEXXZ ; Mammoth::DisplayRewardList

; 20515: 	switch (m_Status)

  000e4	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  000e7	83 e8 00	 sub	 eax, 0
  000ea	0f 84 ce 00 00
	00		 je	 $LN6@Display
  000f0	83 e8 01	 sub	 eax, 1
  000f3	0f 84 a3 00 00
	00		 je	 $LN11@Display
  000f9	83 e8 01	 sub	 eax, 1
  000fc	0f 85 0c 01 00
	00		 jne	 $LN10@Display

; 20540: 		}
; 20541: 		//ITEM
; 20542: 		break;
; 20543: 	}
; 20544: 	case _STATUS::FINISHED:
; 20545: 	{
; 20546: 		//
; 20547: 		StockDispBuffer(X, Y, DISP_PRIO_IME3, 60001, 1);

  00102	6a 01		 push	 1
  00104	68 61 ea 00 00	 push	 60001			; 0000ea61H
  00109	6a 69		 push	 105			; 00000069H
  0010b	68 2c 01 00 00	 push	 300			; 0000012cH
  00110	68 90 01 00 00	 push	 400			; 00000190H
  00115	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20548: 		StockDispBuffer(X, Y-10, DISP_PRIO_IME4, pc.item[m_ItemReceiveIndex].graNo, 2);

  0011a	69 46 24 7c 01
	00 00		 imul	 eax, DWORD PTR [esi+36], 380
  00121	6a 02		 push	 2
  00123	ff b0 c8 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A[eax+200]
  00129	6a 6a		 push	 106			; 0000006aH
  0012b	68 22 01 00 00	 push	 290			; 00000122H
  00130	68 90 01 00 00	 push	 400			; 00000190H
  00135	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20549: 		extern int getTextLength( char *);
; 20550: 		int dx = getTextLength(pc.item[m_ItemReceiveIndex].name) / 2;

  0013a	69 46 24 7c 01
	00 00		 imul	 eax, DWORD PTR [esi+36], 380
  00141	05 aa 01 00 00	 add	 eax, OFFSET ?pc@@3UPC@@A+426
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?getTextLength@@YAHPAD@Z ; getTextLength

; 20551: 		StockFontBuffer(X - dx, Y + 50, FONT_PRIO_FRONT, FONT_PAL_WHITE, pc.item[m_ItemReceiveIndex].name, 0);

  0014c	69 4e 24 7c 01
	00 00		 imul	 ecx, DWORD PTR [esi+36], 380
  00153	99		 cdq
  00154	6a 00		 push	 0
  00156	2b c2		 sub	 eax, edx
  00158	8b d0		 mov	 edx, eax
  0015a	b8 90 01 00 00	 mov	 eax, 400		; 00000190H
  0015f	81 c1 aa 01 00
	00		 add	 ecx, OFFSET ?pc@@3UPC@@A+426
  00165	d1 fa		 sar	 edx, 1
  00167	51		 push	 ecx
  00168	6a 00		 push	 0
  0016a	6a 01		 push	 1
  0016c	2b c2		 sub	 eax, edx
  0016e	68 5e 01 00 00	 push	 350			; 0000015eH
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00179	83 c4 44	 add	 esp, 68			; 00000044H

; 20552: 		//
; 20553: 		Buttons.at(BUTTONS::GET) = StockDispBuffer(X, Y + 85, DISP_PRIO_IME4, 60006, 2);

  0017c	6a 02		 push	 2
  0017e	68 66 ea 00 00	 push	 60006			; 0000ea66H
  00183	6a 6a		 push	 106			; 0000006aH
  00185	68 81 01 00 00	 push	 385			; 00000181H
  0018a	68 90 01 00 00	 push	 400			; 00000190H
  0018f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20554: 		break;
; 20555: 	}
; 20556: 	default:
; 20557: 		break;
; 20558: 	}
; 20559: }

  00194	83 c4 14	 add	 esp, 20			; 00000014H
  00197	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0019a	5e		 pop	 esi
  0019b	c3		 ret	 0
$LN11@Display:

; 20530: 		}
; 20531: 		break;
; 20532: 	}
; 20533: 	case _STATUS::ANIMATING:
; 20534: 	{
; 20535: 		//ANIMATE
; 20536: 		if (pattern(m_Animation, ANM_NOMAL_SPD, ANM_NO_LOOP))

  0019c	6a 01		 push	 1
  0019e	6a 00		 push	 0
  001a0	ff 36		 push	 DWORD PTR [esi]
  001a2	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  001a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001aa	85 c0		 test	 eax, eax
  001ac	74 60		 je	 SHORT $LN10@Display

; 20537: 		{
; 20538: 			KillAction();

  001ae	8b ce		 mov	 ecx, esi
  001b0	e8 00 00 00 00	 call	 ?KillAction@Mammoth@@QAEXXZ ; Mammoth::KillAction

; 20539: 			m_Status = _STATUS::FINISHED;

  001b5	c7 46 28 02 00
	00 00		 mov	 DWORD PTR [esi+40], 2
  001bc	5e		 pop	 esi

; 20554: 		break;
; 20555: 	}
; 20556: 	default:
; 20557: 		break;
; 20558: 	}
; 20559: }

  001bd	c3		 ret	 0
$LN6@Display:

; 20516: 	{
; 20517: 	case _STATUS::STARTING:
; 20518: 	{
; 20519: 		if (m_Fail == _FAIL::NO_COUPON)

  001be	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  001c1	83 f8 02	 cmp	 eax, 2
  001c4	75 1d		 jne	 SHORT $LN7@Display

; 20520: 		{
; 20521: 			StockDispBuffer(X, Y, DISP_PRIO_IME3, 60014, 1);

  001c6	6a 01		 push	 1
  001c8	68 6e ea 00 00	 push	 60014			; 0000ea6eH
$LN31@Display:

; 20554: 		break;
; 20555: 	}
; 20556: 	default:
; 20557: 		break;
; 20558: 	}
; 20559: }

  001cd	6a 69		 push	 105			; 00000069H
  001cf	68 2c 01 00 00	 push	 300			; 0000012cH
  001d4	68 90 01 00 00	 push	 400			; 00000190H
  001d9	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  001de	83 c4 14	 add	 esp, 20			; 00000014H
  001e1	5e		 pop	 esi
  001e2	c3		 ret	 0
$LN7@Display:

; 20522: 		}
; 20523: 		else if (m_Fail == _FAIL::BAG_FULL)

  001e3	83 f8 01	 cmp	 eax, 1
  001e6	75 08		 jne	 SHORT $LN9@Display

; 20524: 		{
; 20525: 			StockDispBuffer(X, Y, DISP_PRIO_IME3, 60010, 1);

  001e8	50		 push	 eax
  001e9	68 6a ea 00 00	 push	 60010			; 0000ea6aH

; 20526: 		}

  001ee	eb dd		 jmp	 SHORT $LN31@Display
$LN9@Display:

; 20527: 		else
; 20528: 		{
; 20529: 			Buttons.at(BUTTONS::START) = StockDispBuffer(X, Y + 100, DISP_PRIO_IME3, 60008, 2);

  001f0	6a 02		 push	 2
  001f2	68 68 ea 00 00	 push	 60008			; 0000ea68H
  001f7	6a 69		 push	 105			; 00000069H
  001f9	68 90 01 00 00	 push	 400			; 00000190H
  001fe	68 90 01 00 00	 push	 400			; 00000190H
  00203	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00208	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 20554: 		break;
; 20555: 	}
; 20556: 	default:
; 20557: 		break;
; 20558: 	}
; 20559: }

  0020b	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Display:
  0020e	5e		 pop	 esi
  0020f	c3		 ret	 0
?Display@Mammoth@@QAEXXZ ENDP				; Mammoth::Display
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?Get@Mammoth@@SAAAV1@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Get@Mammoth@@SAAAV1@XZ PROC				; Mammoth::Get, COMDAT

; 20479: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Get@Mammoth@@SAAAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 20480: 	static Mammoth i;

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Get@Mammoth@@SAAAV2@XZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Get
$LN5@Get:

; 20481: 	return i;
; 20482: }

  0003e	b8 00 00 00 00	 mov	 eax, OFFSET ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Get:

; 20480: 	static Mammoth i;

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Get@Mammoth@@SAAAV2@XZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Get@Mammoth@@SAAAV2@XZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Get
  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006f	b9 00 00 00 00	 mov	 ecx, OFFSET ?i@?1??Get@Mammoth@@SAAAV2@XZ@4V2@A
  00074	e8 00 00 00 00	 call	 ??0Mammoth@@QAE@XZ	; Mammoth::Mammoth
  00079	68 00 00 00 00	 push	 OFFSET ??__Fi@?1??Get@Mammoth@@SAAAV1@XZ@YAXXZ ; `Mammoth::Get'::`2'::`dynamic atexit destructor for 'i''
  0007e	e8 00 00 00 00	 call	 _atexit
  00083	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008a	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Get@Mammoth@@SAAAV2@XZ@4HA
  0008f	e8 00 00 00 00	 call	 __Init_thread_footer
  00094	83 c4 08	 add	 esp, 8
  00097	eb a5		 jmp	 SHORT $LN5@Get
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Get@Mammoth@@SAAAV1@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Get@Mammoth@@SAAAV2@XZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Get@Mammoth@@SAAAV1@XZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Get@Mammoth@@SAAAV1@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Get@Mammoth@@SAAAV1@XZ ENDP				; Mammoth::Get
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ??0Mammoth@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Mammoth@@QAE@XZ PROC					; Mammoth::Mammoth, COMDAT
; _this$ = ecx

; 20474: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Mammoth@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00026	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002d	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00034	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 20474: {

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 20475: 	m_OpenFlag = FALSE;

  00042	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 20476: }

  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b c1		 mov	 eax, ecx
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Mammoth@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0Mammoth@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Mammoth@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Mammoth@@QAE@XZ ENDP					; Mammoth::Mammoth
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xrange@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xrange, COMDAT

; 1709 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT

; 1705 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP ; std::vector<int,std::allocator<int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 26		 je	 SHORT $LN4@vector

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e0 fc	 and	 eax, -4			; fffffffcH
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  00021	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1700 :             _Myend   = pointer();

  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002f	5e		 pop	 esi

; 673  :         _Tidy();
; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  00030	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXQAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXQAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 02	 shl	 eax, 2
  00009	50		 push	 eax
  0000a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00012	83 c4 08	 add	 esp, 8

; 811  :     }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXQAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?send_StandBy_Pet@@YAXXZ
_TEXT	SEGMENT
?send_StandBy_Pet@@YAXXZ PROC				; send_StandBy_Pet, COMDAT

; 20377: 	int	standbypet = 0;

  00000	33 c9		 xor	 ecx, ecx

; 20378: 	int i, cnt = 0;

  00002	33 d2		 xor	 edx, edx

; 20379: 	for (i = 0; i < MAX_PET; i++) {

  00004	33 c0		 xor	 eax, eax
  00006	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@send_Stand:

; 20380: 		if (pc.selectPetNo[i] == TRUE) {

  00010	66 83 3c 45 ac
	00 00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[eax*2+172], 1
  00019	75 09		 jne	 SHORT $LN2@send_Stand

; 20381: 			cnt++;

  0001b	42		 inc	 edx

; 20382: 			if (cnt > ç­å¾å® æ°é)

  0001c	83 fa 05	 cmp	 edx, 5
  0001f	7f 09		 jg	 SHORT $LN9@send_Stand

; 20383: 				break;
; 20384: 			standbypet |= (1 << i);

  00021	0f ab c1	 bts	 ecx, eax
$LN2@send_Stand:

; 20379: 	for (i = 0; i < MAX_PET; i++) {

  00024	40		 inc	 eax
  00025	83 f8 05	 cmp	 eax, 5
  00028	7c e6		 jl	 SHORT $LL4@send_Stand
$LN9@send_Stand:

; 20385: 		}
; 20386: 	}
; 20387: 	lssproto_SPET_send(sockfd, standbypet);

  0002a	51		 push	 ecx
  0002b	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00031	e8 00 00 00 00	 call	 ?lssproto_SPET_send@@YAXHH@Z ; lssproto_SPET_send
  00036	83 c4 08	 add	 esp, 8

; 20388: 	StandbyPetSendFlag = TRUE;

  00039	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?StandbyPetSendFlag@@3HA, 1 ; StandbyPetSendFlag

; 20389: }

  00043	c3		 ret	 0
?send_StandBy_Pet@@YAXXZ ENDP				; send_StandBy_Pet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?setRoomName@@YAXXZ
_TEXT	SEGMENT
_title$1 = -48						; size = 32
__$ArrayPad$ = -4					; size = 4
?setRoomName@@YAXXZ PROC				; setRoomName, COMDAT

; 19790: {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 38	 sub	 esp, 56			; 00000038H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	56		 push	 esi

; 19791: 	static int setRoomBtn[2];				//è®¾å®èå¤©å®¤åç§°ç¨
; 19792: 
; 19793: 	if (pSetRoomWnd == NULL) {

  00024	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?pSetRoomWnd@@3PAUaction@@A ; pSetRoomWnd
  0002a	57		 push	 edi
  0002b	85 f6		 test	 esi, esi
  0002d	0f 85 82 00 00
	00		 jne	 $LN2@setRoomNam

; 19794: 		pSetRoomWnd = MakeWindowDisp(270, 0, 3, 2, NULL, 0);

  00033	56		 push	 esi
  00034	56		 push	 esi
  00035	6a 02		 push	 2
  00037	6a 03		 push	 3
  00039	56		 push	 esi
  0003a	68 0e 01 00 00	 push	 270			; 0000010eH
  0003f	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp

; 19795: 		play_se(202, 320, 240);

  00044	68 f0 00 00 00	 push	 240			; 000000f0H
  00049	68 40 01 00 00	 push	 320			; 00000140H
  0004e	68 ca 00 00 00	 push	 202			; 000000caH
  00053	a3 00 00 00 00	 mov	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A, eax ; pSetRoomWnd
  00058	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 19796: 		chatRoomName.buffer[0] = NULL;
; 19797: 		chatRoomName.cnt = 0;
; 19798: 		chatRoomName.cursor = 0;
; 19799: 		chatRoomName.len = 16;
; 19800: 		chatRoomName.color = 0;
; 19801: 		chatRoomName.x = pSetRoomWnd->x + 22;

  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pSetRoomWnd@@3PAUaction@@A ; pSetRoomWnd
  00063	83 c4 24	 add	 esp, 36			; 00000024H
  00066	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?chatRoomName@@3USTR_BUFFER@@A, 0
  0006d	66 89 35 07 01
	00 00		 mov	 WORD PTR ?chatRoomName@@3USTR_BUFFER@@A+263, si
  00074	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?chatRoomName@@3USTR_BUFFER@@A+265, 0
  0007b	c6 05 04 01 00
	00 10		 mov	 BYTE PTR ?chatRoomName@@3USTR_BUFFER@@A+260, 16 ; 00000010H
  00082	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00085	83 c0 16	 add	 eax, 22			; 00000016H
  00088	a3 0c 01 00 00	 mov	 DWORD PTR ?chatRoomName@@3USTR_BUFFER@@A+268, eax

; 19802: 		chatRoomName.y = pSetRoomWnd->y + 35;

  0008d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00090	83 c0 23	 add	 eax, 35			; 00000023H

; 19803: 		chatRoomName.fontPrio = FONT_PRIO_FRONT;

  00093	c7 05 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRoomName@@3USTR_BUFFER@@A+284, 1
  0009d	a3 10 01 00 00	 mov	 DWORD PTR ?chatRoomName@@3USTR_BUFFER@@A+272, eax

; 19828: 			}
; 19829: 		}
; 19830: 	}
; 19831: }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	8b e3		 mov	 esp, ebx
  000b3	5b		 pop	 ebx
  000b4	c3		 ret	 0
$LN2@setRoomNam:

; 19804: 	}
; 19805: 	else if (pSetRoomWnd->hp > 0) {

  000b5	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  000b9	0f 8e 00 01 00
	00		 jle	 $LN8@setRoomNam

; 19806: 		int x = pSetRoomWnd->x;

  000bf	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]

; 19807: 		int y = pSetRoomWnd->y;

  000c2	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]

; 19808: 
; 19809: 		setRoomBtn[0] = StockDispBuffer(pSetRoomWnd->x + 53, pSetRoomWnd->y + 70, DISP_PRIO_IME3, CG_OK_BTN, 2);

  000c5	6a 02		 push	 2
  000c7	68 ed 65 00 00	 push	 26093			; 000065edH
  000cc	6a 69		 push	 105			; 00000069H
  000ce	8d 46 46	 lea	 eax, DWORD PTR [esi+70]
  000d1	50		 push	 eax
  000d2	8d 47 35	 lea	 eax, DWORD PTR [edi+53]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 19810: 		setRoomBtn[1] = StockDispBuffer(pSetRoomWnd->x + 140, pSetRoomWnd->y + 70, DISP_PRIO_IME3, CG_CANCEL_BTN, 2);

  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pSetRoomWnd@@3PAUaction@@A ; pSetRoomWnd
  000e1	a3 00 00 00 00	 mov	 DWORD PTR ?setRoomBtn@?1??setRoomName@@YAXXZ@4PAHA, eax
  000e6	6a 02		 push	 2
  000e8	68 c2 65 00 00	 push	 26050			; 000065c2H
  000ed	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  000f0	83 c0 46	 add	 eax, 70			; 00000046H
  000f3	6a 69		 push	 105			; 00000069H
  000f5	50		 push	 eax
  000f6	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000f9	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 19811: 
; 19812: 		char title[] = { "ì±ë ì´ë¦ì ìë ¥íìê¸° ë°ëëë¤" };

  00104	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0CA@HADKCOHN@?C?$KE?$LD?N?5?$MA?L?$LI?$KH?$MA?$LL?5?$MA?T?$LH?B?G?O?$LN?C?$LB?b?5?$LJ?Y?$LG?x?$LE?O?$LE?Y@
  0010b	a3 04 00 00 00	 mov	 DWORD PTR ?setRoomBtn@?1??setRoomName@@YAXXZ@4PAHA+4, eax

; 19813: 		StockFontBuffer(x + 22, y + 10, FONT_PRIO_FRONT, 4, title, 0);

  00110	8d 45 d0	 lea	 eax, DWORD PTR _title$1[ebp]
  00113	6a 00		 push	 0
  00115	50		 push	 eax
  00116	6a 04		 push	 4
  00118	6a 01		 push	 1
  0011a	8d 46 0a	 lea	 eax, DWORD PTR [esi+10]
  0011d	0f 11 45 d0	 movups	 XMMWORD PTR _title$1[ebp], xmm0
  00121	50		 push	 eax
  00122	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0CA@HADKCOHN@?C?$KE?$LD?N?5?$MA?L?$LI?$KH?$MA?$LL?5?$MA?T?$LH?B?G?O?$LN?C?$LB?b?5?$LJ?Y?$LG?x?$LE?O?$LE?Y@+16
  00129	8d 47 16	 lea	 eax, DWORD PTR [edi+22]
  0012c	50		 push	 eax
  0012d	0f 11 45 e0	 movups	 XMMWORD PTR _title$1[ebp+16], xmm0
  00131	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00136	83 c4 40	 add	 esp, 64			; 00000040H

; 19814: 		GetKeyInputFocus(&chatRoomName);

  00139	68 00 00 00 00	 push	 OFFSET ?chatRoomName@@3USTR_BUFFER@@A ; chatRoomName
  0013e	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 19815: 		StockFontBuffer2(&chatRoomName);

  00143	68 00 00 00 00	 push	 OFFSET ?chatRoomName@@3USTR_BUFFER@@A ; chatRoomName
  00148	e8 00 00 00 00	 call	 ?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z ; StockFontBuffer2
  0014d	83 c4 08	 add	 esp, 8

; 19816: 
; 19817: 		if (mouse.onceState & MOUSE_LEFT_CRICK) {

  00150	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00157	74 66		 je	 SHORT $LN8@setRoomNam

; 19818: 			if (HitDispNo == setRoomBtn[0])

  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0015e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?setRoomBtn@?1??setRoomName@@YAXXZ@4PAHA
  00164	75 18		 jne	 SHORT $LN6@setRoomNam

; 19819: 				KeyboardReturn();

  00166	e8 00 00 00 00	 call	 ?KeyboardReturn@@YAXXZ	; KeyboardReturn

; 19828: 			}
; 19829: 		}
; 19830: 	}
; 19831: }

  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00170	33 cd		 xor	 ecx, ebp
  00172	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	8b e3		 mov	 esp, ebx
  0017c	5b		 pop	 ebx
  0017d	c3		 ret	 0
$LN6@setRoomNam:

; 19820: 			else if (HitDispNo == setRoomBtn[1]) {

  0017e	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?setRoomBtn@?1??setRoomName@@YAXXZ@4PAHA+4
  00184	75 39		 jne	 SHORT $LN8@setRoomNam

; 19821: 				GetKeyInputFocus(&MyChatBuffer);

  00186	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0018b	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 19822: #ifdef _CHATROOMPROTOCOL
; 19823: 				lssproto_CHATROOM_send(sockfd, "B|");

  00190	68 00 00 00 00	 push	 OFFSET ??_C@_02PACKEJLJ@B?$HM@
  00195	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0019b	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_send@@YAXHPAD@Z ; lssproto_CHATROOM_send

; 19824: #endif
; 19825: 				DeathAction(pSetRoomWnd);

  001a0	ff 35 00 00 00
	00		 push	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A ; pSetRoomWnd
  001a6	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  001ab	83 c4 10	 add	 esp, 16			; 00000010H

; 19826: 				pSetRoomWnd = NULL;

  001ae	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pSetRoomWnd@@3PAUaction@@A, 0 ; pSetRoomWnd

; 19827: 				setRoomFlag = FALSE;

  001b8	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?setRoomFlag@@3_NA, 0 ; setRoomFlag
$LN8@setRoomNam:

; 19828: 			}
; 19829: 		}
; 19830: 	}
; 19831: }

  001bf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c2	5f		 pop	 edi
  001c3	33 cd		 xor	 ecx, ebp
  001c5	5e		 pop	 esi
  001c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cb	8b e5		 mov	 esp, ebp
  001cd	5d		 pop	 ebp
  001ce	8b e3		 mov	 esp, ebx
  001d0	5b		 pop	 ebx
  001d1	c3		 ret	 0
?setRoomName@@YAXXZ ENDP				; setRoomName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?AssentWnd@@YAXXZ
_TEXT	SEGMENT
_AssentBtn$ = -140					; size = 8
_tmpMsg$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
?AssentWnd@@YAXXZ PROC					; AssentWnd, COMDAT

; 20200: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 20201: 	int i = 0;
; 20202: 	char tmpMsg[128] = { "" };

  00013	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00018	56		 push	 esi
  00019	6a 7f		 push	 127			; 0000007fH
  0001b	88 85 7c ff ff
	ff		 mov	 BYTE PTR _tmpMsg$[ebp], al
  00021	8d 85 7d ff ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp+1]
  00027	6a 00		 push	 0
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _memset

; 20203: 
; 20204: 	int AssentBtn[2];
; 20205: 	int x, y;
; 20206: 	if (pAssentWnd == NULL)

  0002f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?pAssentWnd@@3PAUaction@@A ; pAssentWnd
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	85 f6		 test	 esi, esi
  0003a	75 29		 jne	 SHORT $LN5@AssentWnd

; 20207: 		pAssentWnd = MakeWindowDisp(270, 0, 3, 2, 2, 0);

  0003c	56		 push	 esi
  0003d	6a 02		 push	 2
  0003f	6a 02		 push	 2
  00041	6a 03		 push	 3
  00043	56		 push	 esi
  00044	68 0e 01 00 00	 push	 270			; 0000010eH
  00049	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0004e	83 c4 18	 add	 esp, 24			; 00000018H
  00051	a3 00 00 00 00	 mov	 DWORD PTR ?pAssentWnd@@3PAUaction@@A, eax ; pAssentWnd
  00056	5e		 pop	 esi

; 20230: 				}
; 20231: 			}
; 20232: 		}
; 20233: 	}
; 20234: }

  00057	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005a	33 cd		 xor	 ecx, ebp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN5@AssentWnd:

; 20208: 	else if (pAssentWnd->hp > 0) {

  00065	83 7e 78 00	 cmp	 DWORD PTR [esi+120], 0
  00069	0f 8e d4 00 00
	00		 jle	 $LN3@AssentWnd

; 20209: 		x = pAssentWnd->x;

  0006f	57		 push	 edi
  00070	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]

; 20210: 		y = pAssentWnd->y;

  00073	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]

; 20211: 
; 20212: 		StockFontBuffer(x + 20, y + 30, FONT_PRIO_FRONT, 5, memInfo, 0);

  00076	6a 00		 push	 0
  00078	68 00 00 00 00	 push	 OFFSET ?memInfo@@3PADA	; memInfo
  0007d	6a 05		 push	 5
  0007f	6a 01		 push	 1
  00081	8d 46 1e	 lea	 eax, DWORD PTR [esi+30]
  00084	50		 push	 eax
  00085	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 20213: 		AssentBtn[0] = StockDispBuffer(x + 90, y + 60, DISP_PRIO_IME3, CG_FIELD_AGREE_BTN, 2);

  0008e	6a 02		 push	 2
  00090	68 eb 65 00 00	 push	 26091			; 000065ebH
  00095	6a 69		 push	 105			; 00000069H
  00097	83 c6 3c	 add	 esi, 60			; 0000003cH
  0009a	8d 47 5a	 lea	 eax, DWORD PTR [edi+90]
  0009d	56		 push	 esi
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20214: 		AssentBtn[1] = StockDispBuffer(x + 100, y + 60, DISP_PRIO_IME3, CG_FIELD_DISAGREE_BTN, 2);

  000a4	6a 02		 push	 2
  000a6	68 ec 65 00 00	 push	 26092			; 000065ecH
  000ab	6a 69		 push	 105			; 00000069H
  000ad	89 85 74 ff ff
	ff		 mov	 DWORD PTR _AssentBtn$[ebp], eax
  000b3	8d 47 64	 lea	 eax, DWORD PTR [edi+100]
  000b6	56		 push	 esi
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  000bd	83 c4 40	 add	 esp, 64			; 00000040H
  000c0	89 85 78 ff ff
	ff		 mov	 DWORD PTR _AssentBtn$[ebp+4], eax
  000c6	33 f6		 xor	 esi, esi
  000c8	5f		 pop	 edi
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@AssentWnd:

; 20217: 			if (HitDispNo == AssentBtn[i]) {

  000d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  000d5	3b 84 b5 74 ff
	ff ff		 cmp	 eax, DWORD PTR _AssentBtn$[ebp+esi*4]
  000dc	75 5f		 jne	 SHORT $LN2@AssentWnd

; 20218: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  000de	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  000e5	74 56		 je	 SHORT $LN2@AssentWnd

; 20219: 					if (i == 0) {

  000e7	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  000ed	ff 35 00 00 00
	00		 push	 DWORD PTR ?memIndex@@3HA ; memIndex
  000f3	85 f6		 test	 esi, esi
  000f5	75 07		 jne	 SHORT $LN10@AssentWnd

; 20220: 						sprintf(tmpMsg, "A|%d|1", memIndex);

  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_06NKNMMFFA@A?$HM?$CFd?$HM1@

; 20221: 						lssproto_CHATROOM_send(sockfd, tmpMsg);
; 20222: 					}

  000fc	eb 05		 jmp	 SHORT $LN17@AssentWnd
$LN10@AssentWnd:

; 20223: 					else {
; 20224: 						sprintf(tmpMsg, "A|%d|0", memIndex);

  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_06MDMHPEBB@A?$HM?$CFd?$HM0@
$LN17@AssentWnd:

; 20225: 						lssproto_CHATROOM_send(sockfd, tmpMsg);
; 20226: 					}
; 20227: 					DeathAction(pAssentWnd);

  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _sprintf
  00109	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  0010f	50		 push	 eax
  00110	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00116	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_send@@YAXHPAD@Z ; lssproto_CHATROOM_send
  0011b	83 c4 14	 add	 esp, 20			; 00000014H
  0011e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pAssentWnd@@3PAUaction@@A ; pAssentWnd
  00124	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00129	83 c4 04	 add	 esp, 4

; 20228: 					pAssentWnd = NULL;

  0012c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAssentWnd@@3PAUaction@@A, 0 ; pAssentWnd

; 20229: 					assentFlag = FALSE;

  00136	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?assentFlag@@3_NA, 0 ; assentFlag
$LN2@AssentWnd:

; 20215: 
; 20216: 		for (i = 0; i < 2; i++) {

  0013d	46		 inc	 esi
  0013e	83 fe 02	 cmp	 esi, 2
  00141	7c 8d		 jl	 SHORT $LL4@AssentWnd
$LN3@AssentWnd:

; 20230: 				}
; 20231: 			}
; 20232: 		}
; 20233: 	}
; 20234: }

  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	5e		 pop	 esi
  00149	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
?AssentWnd@@YAXXZ ENDP					; AssentWnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?initAssentWnd@@YAXPAD@Z
_TEXT	SEGMENT
_temp$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
?initAssentWnd@@YAXPAD@Z PROC				; initAssentWnd, COMDAT

; 20190: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _data$[ebp]

; 20191: 	assentFlag = TRUE;
; 20192: 	char temp[64];
; 20193: 	getStringToken(data, '|', 2, sizeof(temp) - 1, temp);

  00014	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  00017	50		 push	 eax
  00018	6a 3f		 push	 63			; 0000003fH
  0001a	6a 02		 push	 2
  0001c	6a 7c		 push	 124			; 0000007cH
  0001e	56		 push	 esi
  0001f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?assentFlag@@3_NA, 1 ; assentFlag
  00026	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 20194: 	sprintf(memInfo, "%s ê°ìì ì²­", temp);

  0002b	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HKAIMJJM@?$CFs?5?$LA?$KB?$MA?T?$LN?E?C?$LL@
  00034	68 00 00 00 00	 push	 OFFSET ?memInfo@@3PADA	; memInfo
  00039	e8 00 00 00 00	 call	 _sprintf

; 20195: 	memIndex = getIntegerToken(data, '|', 3);

  0003e	6a 03		 push	 3
  00040	6a 7c		 push	 124			; 0000007cH
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ?getIntegerToken@@YAHPADDH@Z ; getIntegerToken

; 20196: }

  00048	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004b	83 c4 2c	 add	 esp, 44			; 0000002cH
  0004e	33 cd		 xor	 ecx, ebp
  00050	a3 00 00 00 00	 mov	 DWORD PTR ?memIndex@@3HA, eax ; memIndex
  00055	5e		 pop	 esi
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?initAssentWnd@@YAXPAD@Z ENDP				; initAssentWnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?ChatRoomWnd@@YAXXZ
_TEXT	SEGMENT
tv816 = -312						; size = 4
tv818 = -308						; size = 4
tv815 = -304						; size = 4
_x$1$ = -300						; size = 4
_tmpMsg$ = -296						; size = 260
_title$1 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
?ChatRoomWnd@@YAXXZ PROC				; ChatRoomWnd, COMDAT

; 19979: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 19980: 	char tmpMsg[STR_BUFFER_SIZE];
; 19981: 	int nameColor;
; 19982: 	int scrlLenth = 183;
; 19983: 
; 19984: 	if (pChtChanlWnd == NULL) {

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pChtChanlWnd@@3PAUaction@@A ; pChtChanlWnd
  00019	85 c9		 test	 ecx, ecx
  0001b	75 2f		 jne	 SHORT $LN12@ChatRoomWn

; 19985: 		pChtChanlWnd = MakeWindowDisp(350, 60, 540, 456, 0, -1);

  0001d	6a ff		 push	 -1
  0001f	51		 push	 ecx
  00020	68 c8 01 00 00	 push	 456			; 000001c8H
  00025	68 1c 02 00 00	 push	 540			; 0000021cH
  0002a	6a 3c		 push	 60			; 0000003cH
  0002c	68 5e 01 00 00	 push	 350			; 0000015eH
  00031	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  00036	83 c4 18	 add	 esp, 24			; 00000018H
  00039	a3 00 00 00 00	 mov	 DWORD PTR ?pChtChanlWnd@@3PAUaction@@A, eax ; pChtChanlWnd

; 20183: 			}
; 20184: 		}
; 20185: 	}
; 20186: }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	33 cd		 xor	 ecx, ebp
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN12@ChatRoomWn:

; 19986: 	}
; 19987: 	else if (pChtChanlWnd->hp > 0) {

  0004c	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  00050	0f 8e 41 08 00
	00		 jle	 $LN60@ChatRoomWn

; 19988: 		int	x = pChtChanlWnd->x + 2;

  00056	53		 push	 ebx

; 19989: 		int y = pChtChanlWnd->y - 5;

  00057	8b 59 1c	 mov	 ebx, DWORD PTR [ecx+28]
  0005a	56		 push	 esi
  0005b	57		 push	 edi
  0005c	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]

; 19990: 
; 19991: 		int scrTop = y + 69;           //Scrollé«åº¦
; 19992: 
; 19993: 		StockDispBuffer(((WINDOW_DISP *)pChtChanlWnd->pYobi)->mx - 120, ((WINDOW_DISP *)pChtChanlWnd->pYobi)->my - 28, DISP_PRIO_MENU, CG_FIELD_CHATROOM_PANEL, 1);

  0005f	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00062	8d 43 40	 lea	 eax, DWORD PTR [ebx+64]
  00065	6a 01		 push	 1
  00067	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_FIELD_CHATROOM_PANEL@@3HA ; CG_FIELD_CHATROOM_PANEL
  0006d	89 85 c8 fe ff
	ff		 mov	 DWORD PTR tv816[ebp], eax
  00073	83 c7 02	 add	 edi, 2
  00076	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00079	83 e8 1c	 sub	 eax, 28			; 0000001cH
  0007c	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edi
  00082	6a 68		 push	 104			; 00000068H
  00084	50		 push	 eax
  00085	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00088	83 e8 78	 sub	 eax, 120		; 00000078H
  0008b	89 9d d0 fe ff
	ff		 mov	 DWORD PTR tv815[ebp], ebx
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 19994: 		char title[32] = { "" };

  00097	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0009c	0f 57 c0	 xorps	 xmm0, xmm0

; 19995: 
; 19996: 		sprintf(title, "%s", chatInfo.roomName);

  0009f	68 40 04 00 00	 push	 OFFSET ?chatInfo@@3UCHATINFO@@A+1088
  000a4	88 45 dc	 mov	 BYTE PTR _title$1[ebp], al
  000a7	8d 45 dc	 lea	 eax, DWORD PTR _title$1[ebp]
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000af	50		 push	 eax
  000b0	0f 11 45 dd	 movups	 XMMWORD PTR _title$1[ebp+1], xmm0
  000b4	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _title$1[ebp+25], 0
  000bb	66 0f d6 45 ed	 movq	 QWORD PTR _title$1[ebp+17], xmm0
  000c0	66 c7 45 f9 00
	00		 mov	 WORD PTR _title$1[ebp+29], 0
  000c6	c6 45 fb 00	 mov	 BYTE PTR _title$1[ebp+31], 0
  000ca	e8 00 00 00 00	 call	 _sprintf

; 19997: 
; 19998: 		StockFontBuffer(x + 140 - strlen(title) * 4, y + 50, FONT_PRIO_FRONT, 4, title, 0);

  000cf	8d 4d dc	 lea	 ecx, DWORD PTR _title$1[ebp]
  000d2	83 c4 20	 add	 esp, 32			; 00000020H
  000d5	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL74@ChatRoomWn:
  000d8	8a 01		 mov	 al, BYTE PTR [ecx]
  000da	41		 inc	 ecx
  000db	84 c0		 test	 al, al
  000dd	75 f9		 jne	 SHORT $LL74@ChatRoomWn
  000df	6a 00		 push	 0
  000e1	8d 45 dc	 lea	 eax, DWORD PTR _title$1[ebp]
  000e4	2b ca		 sub	 ecx, edx
  000e6	50		 push	 eax
  000e7	6a 04		 push	 4
  000e9	6a 01		 push	 1
  000eb	8d 43 2d	 lea	 eax, DWORD PTR [ebx+45]
  000ee	50		 push	 eax
  000ef	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000f4	2b c1		 sub	 eax, ecx
  000f6	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  000ff	83 c4 18	 add	 esp, 24			; 00000018H

; 19999: 
; 20000: 		if (!BtnType) {

  00102	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?BtnType@@3_NA, 0 ; BtnType
  00109	0f 85 a7 00 00
	00		 jne	 $LN85@ChatRoomWn

; 20001: 			closeBtn = CG_FIELD_CLOSE_BTN_UP;
; 20002: 			leaveBtn = CG_FIELD_LEAVE_BTN_UP;
; 20003: 			scrlHBtn = CG_FIELD_SCROLL_HUP;
; 20004: 			scrlLBtn = CG_FIELD_SCROLL_LUP;
; 20005: 
; 20006: 			if (chatInfo.chiefFlag == 1) {									//éé¿ä¸ææé®

  0010f	83 3d 1c 00 00
	00 01		 cmp	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+28, 1
  00116	ba 4c 67 00 00	 mov	 edx, 26444		; 0000674cH
  0011b	89 15 00 00 00
	00		 mov	 DWORD PTR ?closeBtn@@3HA, edx ; closeBtn
  00121	c7 05 00 00 00
	00 49 67 00 00	 mov	 DWORD PTR ?leaveBtn@@3HA, 26441 ; leaveBtn, 00006749H
  0012b	c7 05 00 00 00
	00 50 67 00 00	 mov	 DWORD PTR ?scrlHBtn@@3HA, 26448 ; scrlHBtn, 00006750H
  00135	c7 05 00 00 00
	00 52 67 00 00	 mov	 DWORD PTR ?scrlLBtn@@3HA, 26450 ; scrlLBtn, 00006752H
  0013f	75 55		 jne	 SHORT $LN16@ChatRoomWn

; 20007: 				delBtn = CG_FIELD_DELETE_BTN_UP;
; 20008: 				if (secretFlag && chatInfo.chiefIndex != chatInfo.memberIndex[selChar]) {

  00141	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?secretFlag@@3_NA, 0 ; secretFlag
  00148	c7 05 00 00 00
	00 46 67 00 00	 mov	 DWORD PTR ?delBtn@@3HA, 26438 ; delBtn, 00006746H
  00152	74 2b		 je	 SHORT $LN18@ChatRoomWn
  00154	a1 00 00 00 00	 mov	 eax, DWORD PTR ?selChar@@3HA ; selChar
  00159	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?chatInfo@@3UCHATINFO@@A+24
  0015f	3b 0c 85 78 03
	00 00		 cmp	 ecx, DWORD PTR ?chatInfo@@3UCHATINFO@@A[eax*4+888]
  00166	74 17		 je	 SHORT $LN18@ChatRoomWn

; 20009: 					outBtn = CG_FIELD_OUTMEMBER_BTN_UP;
; 20010: 					chaBtn = CG_FIELD_CHANGECHIEF_BTN_UP;

  00168	b8 43 67 00 00	 mov	 eax, 26435		; 00006743H
  0016d	b9 40 67 00 00	 mov	 ecx, 26432		; 00006740H

; 20015: 				}
; 20016: 			}

  00172	89 0d 00 00 00
	00		 mov	 DWORD PTR ?outBtn@@3HA, ecx ; outBtn
  00178	a3 00 00 00 00	 mov	 DWORD PTR ?chaBtn@@3HA, eax ; chaBtn
  0017d	eb 3d		 jmp	 SHORT $LN17@ChatRoomWn
$LN18@ChatRoomWn:

; 20011: 				}
; 20012: 				else {
; 20013: 					outBtn = CG_FIELD_OUTMEMBER_BTN_DISABLE;
; 20014: 					chaBtn = CG_FIELD_CHANGECHIEF_BTN_DISABLE;

  0017f	b8 45 67 00 00	 mov	 eax, 26437		; 00006745H
  00184	b9 42 67 00 00	 mov	 ecx, 26434		; 00006742H

; 20015: 				}
; 20016: 			}

  00189	89 0d 00 00 00
	00		 mov	 DWORD PTR ?outBtn@@3HA, ecx ; outBtn
  0018f	a3 00 00 00 00	 mov	 DWORD PTR ?chaBtn@@3HA, eax ; chaBtn
  00194	eb 26		 jmp	 SHORT $LN17@ChatRoomWn
$LN16@ChatRoomWn:

; 20017: 			else {
; 20018: 				outBtn = CG_FIELD_OUTMEMBER_BTN_DISABLE;

  00196	c7 05 00 00 00
	00 42 67 00 00	 mov	 DWORD PTR ?outBtn@@3HA, 26434 ; outBtn, 00006742H

; 20019: 				chaBtn = CG_FIELD_CHANGECHIEF_BTN_DISABLE;

  001a0	c7 05 00 00 00
	00 45 67 00 00	 mov	 DWORD PTR ?chaBtn@@3HA, 26437 ; chaBtn, 00006745H

; 20020: 				delBtn = CG_FIELD_DELETE_BTN_DISABLE;

  001aa	c7 05 00 00 00
	00 48 67 00 00	 mov	 DWORD PTR ?delBtn@@3HA, 26440 ; delBtn, 00006748H
  001b4	eb 06		 jmp	 SHORT $LN17@ChatRoomWn
$LN85@ChatRoomWn:

; 19999: 
; 20000: 		if (!BtnType) {

  001b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?closeBtn@@3HA ; closeBtn
$LN17@ChatRoomWn:

; 20021: 			}
; 20022: 		}
; 20023: 		ChatRoomBtn[0] = StockDispBuffer(x + 70, y + 335, DISP_PRIO_IME3, closeBtn, 2);

  001bc	6a 02		 push	 2
  001be	52		 push	 edx
  001bf	8d b3 4a 01 00
	00		 lea	 esi, DWORD PTR [ebx+330]
  001c5	6a 69		 push	 105			; 00000069H
  001c7	8d 5f 46	 lea	 ebx, DWORD PTR [edi+70]
  001ca	56		 push	 esi
  001cb	53		 push	 ebx
  001cc	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20024: 		ChatRoomBtn[1] = StockDispBuffer(x + 230, y + 335, DISP_PRIO_IME3, leaveBtn, 2);

  001d1	6a 02		 push	 2
  001d3	ff 35 00 00 00
	00		 push	 DWORD PTR ?leaveBtn@@3HA ; leaveBtn
  001d9	81 c7 e6 00 00
	00		 add	 edi, 230		; 000000e6H
  001df	a3 00 00 00 00	 mov	 DWORD PTR ?ChatRoomBtn@@3PAHA, eax
  001e4	6a 69		 push	 105			; 00000069H
  001e6	56		 push	 esi
  001e7	57		 push	 edi
  001e8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20025: 		ChatRoomBtn[2] = StockDispBuffer(x + 150, y + 305, DISP_PRIO_IME3, outBtn, 2);

  001ed	8b b5 d0 fe ff
	ff		 mov	 esi, DWORD PTR tv815[ebp]
  001f3	6a 02		 push	 2
  001f5	ff 35 00 00 00
	00		 push	 DWORD PTR ?outBtn@@3HA	; outBtn
  001fb	a3 04 00 00 00	 mov	 DWORD PTR ?ChatRoomBtn@@3PAHA+4, eax
  00200	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  00206	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _x$1$[ebp]
  0020c	6a 69		 push	 105			; 00000069H
  0020e	05 96 00 00 00	 add	 eax, 150		; 00000096H
  00213	56		 push	 esi
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20026: 		ChatRoomBtn[3] = StockDispBuffer(x + 230, y + 305, DISP_PRIO_IME3, chaBtn, 2);

  0021a	6a 02		 push	 2
  0021c	ff 35 00 00 00
	00		 push	 DWORD PTR ?chaBtn@@3HA	; chaBtn
  00222	a3 08 00 00 00	 mov	 DWORD PTR ?ChatRoomBtn@@3PAHA+8, eax
  00227	6a 69		 push	 105			; 00000069H
  00229	56		 push	 esi
  0022a	57		 push	 edi
  0022b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00230	83 c4 50	 add	 esp, 80			; 00000050H
  00233	a3 0c 00 00 00	 mov	 DWORD PTR ?ChatRoomBtn@@3PAHA+12, eax

; 20027: 		ChatRoomBtn[4] = StockDispBuffer(x + 70, y + 305, DISP_PRIO_IME3, delBtn, 2);

  00238	6a 02		 push	 2
  0023a	ff 35 00 00 00
	00		 push	 DWORD PTR ?delBtn@@3HA	; delBtn
  00240	6a 69		 push	 105			; 00000069H
  00242	56		 push	 esi
  00243	53		 push	 ebx
  00244	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20028: 		ChatRoomBtn[5] = StockDispBuffer(x + 267, scrTop + scrlBtnIndex, DISP_PRIO_IME3, CG_FIELD_CHANNEL_SCROLL, 2);

  00249	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _x$1$[ebp]
  0024f	8b bd c8 fe ff
	ff		 mov	 edi, DWORD PTR tv816[ebp]
  00255	6a 02		 push	 2
  00257	a3 10 00 00 00	 mov	 DWORD PTR ?ChatRoomBtn@@3PAHA+16, eax
  0025c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?scrlBtnIndex@@3HA ; scrlBtnIndex
  00261	8d b3 0b 01 00
	00		 lea	 esi, DWORD PTR [ebx+267]
  00267	68 4f 67 00 00	 push	 26447			; 0000674fH
  0026c	6a 69		 push	 105			; 00000069H
  0026e	03 c7		 add	 eax, edi
  00270	50		 push	 eax
  00271	56		 push	 esi
  00272	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20029: 		ChatRoomBtn[6] = StockDispBuffer(x + 267, scrTop - 20, DISP_PRIO_IME3, scrlHBtn, 2);

  00277	6a 02		 push	 2
  00279	ff 35 00 00 00
	00		 push	 DWORD PTR ?scrlHBtn@@3HA ; scrlHBtn
  0027f	a3 14 00 00 00	 mov	 DWORD PTR ?ChatRoomBtn@@3PAHA+20, eax
  00284	8d 47 ec	 lea	 eax, DWORD PTR [edi-20]
  00287	6a 69		 push	 105			; 00000069H
  00289	50		 push	 eax
  0028a	56		 push	 esi
  0028b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 20030: 		ChatRoomBtn[7] = StockDispBuffer(x + 267, y + 274, DISP_PRIO_IME3, scrlLBtn, 2);

  00290	6a 02		 push	 2
  00292	ff 35 00 00 00
	00		 push	 DWORD PTR ?scrlLBtn@@3HA ; scrlLBtn
  00298	a3 18 00 00 00	 mov	 DWORD PTR ?ChatRoomBtn@@3PAHA+24, eax
  0029d	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv815[ebp]
  002a3	6a 69		 push	 105			; 00000069H
  002a5	05 0d 01 00 00	 add	 eax, 269		; 0000010dH
  002aa	50		 push	 eax
  002ab	56		 push	 esi
  002ac	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  002b1	83 c4 50	 add	 esp, 80			; 00000050H
  002b4	a3 1c 00 00 00	 mov	 DWORD PTR ?ChatRoomBtn@@3PAHA+28, eax

; 20031: 
; 20032: 		for (int i = 0; i < 10; i++) {

  002b9	33 ff		 xor	 edi, edi
  002bb	33 d2		 xor	 edx, edx
  002bd	89 95 cc fe ff
	ff		 mov	 DWORD PTR tv818[ebp], edx
$LL4@ChatRoomWn:

; 20033: 			if (chatInfo.memberNum - 1 < i + firMemNo)

  002c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?firMemNo@@3HA ; firMemNo
  002c9	a1 20 00 00 00	 mov	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A+32
  002ce	03 cf		 add	 ecx, edi
  002d0	48		 dec	 eax
  002d1	3b c1		 cmp	 eax, ecx
  002d3	0f 8c be 01 00
	00		 jl	 $LN64@ChatRoomWn

; 20034: 				break;
; 20035: 			//äººååè²
; 20036: 			if (MakeHitBox(x + 20, y + 77 + i * 20, x + 250, y + 96 + i * 20, DISP_PRIO_BOX2)) {

  002d9	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv815[ebp]
  002df	6a 6b		 push	 107			; 0000006bH
  002e1	8d 41 5b	 lea	 eax, DWORD PTR [ecx+91]
  002e4	03 c2		 add	 eax, edx
  002e6	50		 push	 eax
  002e7	8d 83 fa 00 00
	00		 lea	 eax, DWORD PTR [ebx+250]
  002ed	50		 push	 eax
  002ee	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
  002f1	03 c2		 add	 eax, edx
  002f3	50		 push	 eax
  002f4	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  002fd	83 c4 14	 add	 esp, 20			; 00000014H
  00300	85 c0		 test	 eax, eax
  00302	0f 84 1e 02 00
	00		 je	 $LN26@ChatRoomWn

; 20037: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  00308	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0030f	0f 84 11 02 00
	00		 je	 $LN26@ChatRoomWn

; 20038: 					if (strcmp(chatInfo.memberName[i + firMemNo], pc.name) != 0 || strcmp(chatInfo.nickName[i + firMemNo], pc.freeName) != 0) {

  00315	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?firMemNo@@3HA ; firMemNo
  0031b	b9 70 00 00 00	 mov	 ecx, OFFSET ?pc@@3UPC@@A+112
  00320	03 f7		 add	 esi, edi
  00322	8b c6		 mov	 eax, esi
  00324	c1 e0 04	 shl	 eax, 4
  00327	8d 98 24 00 00
	00		 lea	 ebx, DWORD PTR ?chatInfo@@3UCHATINFO@@A[eax+36]
  0032d	03 de		 add	 ebx, esi
  0032f	8b c3		 mov	 eax, ebx
$LL75@ChatRoomWn:
  00331	8a 10		 mov	 dl, BYTE PTR [eax]
  00333	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00335	75 1a		 jne	 SHORT $LN76@ChatRoomWn
  00337	84 d2		 test	 dl, dl
  00339	74 12		 je	 SHORT $LN77@ChatRoomWn
  0033b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0033e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00341	75 0e		 jne	 SHORT $LN76@ChatRoomWn
  00343	83 c0 02	 add	 eax, 2
  00346	83 c1 02	 add	 ecx, 2
  00349	84 d2		 test	 dl, dl
  0034b	75 e4		 jne	 SHORT $LL75@ChatRoomWn
$LN77@ChatRoomWn:
  0034d	33 c0		 xor	 eax, eax
  0034f	eb 05		 jmp	 SHORT $LN78@ChatRoomWn
$LN76@ChatRoomWn:
  00351	1b c0		 sbb	 eax, eax
  00353	83 c8 01	 or	 eax, 1
$LN78@ChatRoomWn:
  00356	85 c0		 test	 eax, eax
  00358	75 43		 jne	 SHORT $LN24@ChatRoomWn
  0035a	8b c6		 mov	 eax, esi
  0035c	b9 81 00 00 00	 mov	 ecx, OFFSET ?pc@@3UPC@@A+129
  00361	c1 e0 05	 shl	 eax, 5
  00364	8d 80 60 04 00
	00		 lea	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A[eax+1120]
  0036a	03 c6		 add	 eax, esi
  0036c	0f 1f 40 00	 npad	 4
$LL79@ChatRoomWn:
  00370	8a 10		 mov	 dl, BYTE PTR [eax]
  00372	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00374	75 1a		 jne	 SHORT $LN80@ChatRoomWn
  00376	84 d2		 test	 dl, dl
  00378	74 12		 je	 SHORT $LN81@ChatRoomWn
  0037a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0037d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00380	75 0e		 jne	 SHORT $LN80@ChatRoomWn
  00382	83 c0 02	 add	 eax, 2
  00385	83 c1 02	 add	 ecx, 2
  00388	84 d2		 test	 dl, dl
  0038a	75 e4		 jne	 SHORT $LL79@ChatRoomWn
$LN81@ChatRoomWn:
  0038c	33 c0		 xor	 eax, eax
  0038e	eb 05		 jmp	 SHORT $LN82@ChatRoomWn
$LN80@ChatRoomWn:
  00390	1b c0		 sbb	 eax, eax
  00392	83 c8 01	 or	 eax, 1
$LN82@ChatRoomWn:
  00395	85 c0		 test	 eax, eax
  00397	0f 84 89 01 00
	00		 je	 $LN26@ChatRoomWn
$LN24@ChatRoomWn:

; 20039: 						if (secretFlag == TRUE && selChar == i) {

  0039d	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?secretFlag@@3_NA, 1 ; secretFlag
  003a4	0f 85 1d 01 00
	00		 jne	 $LN25@ChatRoomWn
  003aa	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?selChar@@3HA, edi ; selChar
  003b0	0f 85 11 01 00
	00		 jne	 $LN25@ChatRoomWn

; 20040: 							strcpy(secretName, "");

  003b6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  003bb	a2 00 00 00 00	 mov	 BYTE PTR ?secretName@@3PADA, al

; 20041: 							pNowStrBuffer->buffer[0] = NULL;

  003c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A ; pNowStrBuffer

; 20042: 							pNowStrBuffer->cursor = 0;
; 20043: 							pNowStrBuffer->cnt = 0;
; 20044: 							StrToNowStrBuffer(secretName);

  003c5	68 00 00 00 00	 push	 OFFSET ?secretName@@3PADA ; secretName
  003ca	c6 00 00	 mov	 BYTE PTR [eax], 0
  003cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A ; pNowStrBuffer
  003d2	c6 80 09 01 00
	00 00		 mov	 BYTE PTR [eax+265], 0
  003d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A ; pNowStrBuffer
  003de	c6 80 07 01 00
	00 00		 mov	 BYTE PTR [eax+263], 0
  003e5	e8 00 00 00 00	 call	 ?StrToNowStrBuffer@@YAXPAD@Z ; StrToNowStrBuffer
  003ea	83 c4 04	 add	 esp, 4

; 20045: 							secretFlag = FALSE;

  003ed	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?secretFlag@@3_NA, 0 ; secretFlag

; 20046: 							selChar = -1;

  003f4	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?selChar@@3HA, -1 ; selChar

; 20047: 							TalkMode = 0;

  003fe	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TalkMode@@3HA, 0 ; TalkMode
$LN86@ChatRoomWn:

; 20065: 			else
; 20066: 				nameColor = 5;

  00408	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?firMemNo@@3HA ; firMemNo
$LN27@ChatRoomWn:
  0040e	bb 05 00 00 00	 mov	 ebx, 5
$LN28@ChatRoomWn:

; 20067: 
; 20068: 			StockFontBuffer(x + 30, y + 80 + i * 20, FONT_PRIO_FRONT, nameColor, chatInfo.memberName[i + firMemNo], 0);

  00413	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv815[ebp]
  00419	8b b5 cc fe ff
	ff		 mov	 esi, DWORD PTR tv818[ebp]
  0041f	83 c1 4b	 add	 ecx, 75			; 0000004bH
  00422	03 f1		 add	 esi, ecx
  00424	8d 0c 3a	 lea	 ecx, DWORD PTR [edx+edi]
  00427	8b c1		 mov	 eax, ecx
  00429	c1 e0 04	 shl	 eax, 4
  0042c	6a 00		 push	 0
  0042e	8d 80 24 00 00
	00		 lea	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A[eax+36]
  00434	03 c1		 add	 eax, ecx
  00436	50		 push	 eax
  00437	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _x$1$[ebp]
  0043d	53		 push	 ebx
  0043e	6a 01		 push	 1
  00440	83 c0 1e	 add	 eax, 30			; 0000001eH
  00443	56		 push	 esi
  00444	50		 push	 eax
  00445	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 20069: 			StockFontBuffer(x + 160, y + 80 + i * 20, FONT_PRIO_FRONT, nameColor, chatInfo.nickName[i + firMemNo], 0);

  0044a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?firMemNo@@3HA ; firMemNo
  00450	03 cf		 add	 ecx, edi
  00452	8b c1		 mov	 eax, ecx
  00454	c1 e0 05	 shl	 eax, 5
  00457	6a 00		 push	 0
  00459	8d 80 60 04 00
	00		 lea	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A[eax+1120]
  0045f	03 c1		 add	 eax, ecx
  00461	50		 push	 eax
  00462	53		 push	 ebx
  00463	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _x$1$[ebp]
  00469	6a 01		 push	 1
  0046b	56		 push	 esi
  0046c	8d 83 a0 00 00
	00		 lea	 eax, DWORD PTR [ebx+160]
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00478	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR tv818[ebp]
  0047e	83 c4 30	 add	 esp, 48			; 00000030H
  00481	83 c2 14	 add	 edx, 20			; 00000014H
  00484	47		 inc	 edi
  00485	89 95 cc fe ff
	ff		 mov	 DWORD PTR tv818[ebp], edx
  0048b	81 fa c8 00 00
	00		 cmp	 edx, 200		; 000000c8H
  00491	0f 8c 2c fe ff
	ff		 jl	 $LL4@ChatRoomWn
$LN64@ChatRoomWn:

; 20070: 
; 20071: 		}
; 20072: 
; 20073: 		for (int i = 0; i < 8; i++) {

  00497	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?selChar@@3HA ; selChar
  0049d	33 f6		 xor	 esi, esi
  0049f	bb ff fb 00 00	 mov	 ebx, 64511		; 0000fbffH
  004a4	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
$LL7@ChatRoomWn:

; 20074: 			if (i == 2 && chatInfo.chiefFlag == 0)		//ä¸æ¯éé¿åè·³è¿ä¸ä¸ªæé®

  004a7	83 fe 02	 cmp	 esi, 2
  004aa	0f 85 b3 00 00
	00		 jne	 $LN31@ChatRoomWn
  004b0	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+28, 0
  004b7	0f 85 97 00 00
	00		 jne	 $LN72@ChatRoomWn

; 20075: 				i = 5;

  004bd	be 05 00 00 00	 mov	 esi, 5
  004c2	e9 9c 00 00 00	 jmp	 $LN31@ChatRoomWn
$LN25@ChatRoomWn:

; 20048: 						}
; 20049: 						else {
; 20050: 							sprintf(secretName, "%s ", chatInfo.memberName[i + firMemNo]);

  004c7	53		 push	 ebx
  004c8	68 00 00 00 00	 push	 OFFSET ??_C@_03IKGEINEE@?$CFs?5@
  004cd	68 00 00 00 00	 push	 OFFSET ?secretName@@3PADA ; secretName
  004d2	e8 00 00 00 00	 call	 _sprintf

; 20051: 							pNowStrBuffer->buffer[0] = NULL;

  004d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A ; pNowStrBuffer

; 20052: 							pNowStrBuffer->cursor = 0;
; 20053: 							pNowStrBuffer->cnt = 0;
; 20054: 							StrToNowStrBuffer(secretName);

  004dc	68 00 00 00 00	 push	 OFFSET ?secretName@@3PADA ; secretName
  004e1	c6 00 00	 mov	 BYTE PTR [eax], 0
  004e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A ; pNowStrBuffer
  004e9	c6 80 09 01 00
	00 00		 mov	 BYTE PTR [eax+265], 0
  004f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pNowStrBuffer@@3PAUSTR_BUFFER@@A ; pNowStrBuffer
  004f5	c6 80 07 01 00
	00 00		 mov	 BYTE PTR [eax+263], 0
  004fc	e8 00 00 00 00	 call	 ?StrToNowStrBuffer@@YAXPAD@Z ; StrToNowStrBuffer

; 20055: 							secretFlag = TRUE;
; 20056: 							TalkMode = 1;
; 20057: 							selChar = i + firMemNo;

  00501	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?firMemNo@@3HA ; firMemNo
  00507	83 c4 10	 add	 esp, 16			; 00000010H
  0050a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?secretFlag@@3_NA, 1 ; secretFlag
  00511	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?TalkMode@@3HA, 1 ; TalkMode
  0051b	8d 0c 3a	 lea	 ecx, DWORD PTR [edx+edi]
  0051e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?selChar@@3HA, ecx ; selChar

; 20058: 						}
; 20059: 					}
; 20060: 				}
; 20061: 			}
; 20062: 
; 20063: 			if (secretFlag && selChar == i + firMemNo)

  00524	eb 19		 jmp	 SHORT $LN71@ChatRoomWn
$LN26@ChatRoomWn:
  00526	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?secretFlag@@3_NA, 0 ; secretFlag
  0052d	0f 84 d5 fe ff
	ff		 je	 $LN86@ChatRoomWn
  00533	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?selChar@@3HA ; selChar
  00539	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?firMemNo@@3HA ; firMemNo
$LN71@ChatRoomWn:
  0053f	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00542	3b c8		 cmp	 ecx, eax
  00544	0f 85 c4 fe ff
	ff		 jne	 $LN27@ChatRoomWn

; 20064: 				nameColor = 4;

  0054a	bb 04 00 00 00	 mov	 ebx, 4
  0054f	e9 bf fe ff ff	 jmp	 $LN28@ChatRoomWn
$LN72@ChatRoomWn:

; 20076: 			else if (i == 2 && chatInfo.chiefFlag == 1 && selChar == -1)			//æ¯éé¿æªéäºº

  00554	83 3d 1c 00 00
	00 01		 cmp	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+28, 1
  0055b	75 06		 jne	 SHORT $LN31@ChatRoomWn
  0055d	83 ff ff	 cmp	 edi, -1
  00560	0f 44 f0	 cmove	 esi, eax
$LN31@ChatRoomWn:

; 20077: 				i = 4;
; 20078: 
; 20079: 			if (HitDispNo == ChatRoomBtn[i]) {

  00563	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00568	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?ChatRoomBtn@@3PAHA[esi*4]
  0056f	0f 85 4e 02 00
	00		 jne	 $LN5@ChatRoomWn

; 20080: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  00575	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0057c	0f 84 2d 01 00
	00		 je	 $LN33@ChatRoomWn

; 20081: 					switch (i) {

  00582	83 fe 07	 cmp	 esi, 7
  00585	0f 87 12 01 00
	00		 ja	 $LN44@ChatRoomWn
  0058b	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN83@ChatRoomWn[esi*4]
$LN35@ChatRoomWn:

; 20082: 					case 0:
; 20083: 						closeBtn = CG_FIELD_CLOSE_BTN_DOWN;

  00592	c7 05 00 00 00
	00 4d 67 00 00	 mov	 DWORD PTR ?closeBtn@@3HA, 26445 ; closeBtn, 0000674dH

; 20114: 						}
; 20115: 						break;
; 20116: 					}
; 20117: 					BtnNo = i;

  0059c	89 35 00 00 00
	00		 mov	 DWORD PTR ?BtnNo@@3HA, esi ; BtnNo

; 20118: 					BtnType = TRUE;

  005a2	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?BtnType@@3_NA, 1 ; BtnType

; 20119: 
; 20120: 				}

  005a9	e9 15 02 00 00	 jmp	 $LN5@ChatRoomWn
$LN36@ChatRoomWn:

; 20084: 						break;
; 20085: 					case 1:
; 20086: 						leaveBtn = CG_FIELD_LEAVE_BTN_DOWN;

  005ae	c7 05 00 00 00
	00 4a 67 00 00	 mov	 DWORD PTR ?leaveBtn@@3HA, 26442 ; leaveBtn, 0000674aH

; 20114: 						}
; 20115: 						break;
; 20116: 					}
; 20117: 					BtnNo = i;

  005b8	89 35 00 00 00
	00		 mov	 DWORD PTR ?BtnNo@@3HA, esi ; BtnNo

; 20118: 					BtnType = TRUE;

  005be	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?BtnType@@3_NA, 1 ; BtnType

; 20119: 
; 20120: 				}

  005c5	e9 f9 01 00 00	 jmp	 $LN5@ChatRoomWn
$LN37@ChatRoomWn:

; 20087: 						break;
; 20088: 					case 2:
; 20089: 						outBtn = CG_FIELD_OUTMEMBER_BTN_DOWN;

  005ca	c7 05 00 00 00
	00 41 67 00 00	 mov	 DWORD PTR ?outBtn@@3HA, 26433 ; outBtn, 00006741H

; 20114: 						}
; 20115: 						break;
; 20116: 					}
; 20117: 					BtnNo = i;

  005d4	89 35 00 00 00
	00		 mov	 DWORD PTR ?BtnNo@@3HA, esi ; BtnNo

; 20118: 					BtnType = TRUE;

  005da	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?BtnType@@3_NA, 1 ; BtnType

; 20119: 
; 20120: 				}

  005e1	e9 dd 01 00 00	 jmp	 $LN5@ChatRoomWn
$LN38@ChatRoomWn:

; 20090: 						break;
; 20091: 					case 3:
; 20092: 						chaBtn = CG_FIELD_CHANGECHIEF_BTN_DOWN;

  005e6	c7 05 00 00 00
	00 44 67 00 00	 mov	 DWORD PTR ?chaBtn@@3HA, 26436 ; chaBtn, 00006744H

; 20114: 						}
; 20115: 						break;
; 20116: 					}
; 20117: 					BtnNo = i;

  005f0	89 35 00 00 00
	00		 mov	 DWORD PTR ?BtnNo@@3HA, esi ; BtnNo

; 20118: 					BtnType = TRUE;

  005f6	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?BtnType@@3_NA, 1 ; BtnType

; 20119: 
; 20120: 				}

  005fd	e9 c1 01 00 00	 jmp	 $LN5@ChatRoomWn
$LN39@ChatRoomWn:

; 20093: 						break;
; 20094: 					case 4:
; 20095: 						delBtn = CG_FIELD_DELETE_BTN_DOWN;

  00602	c7 05 00 00 00
	00 47 67 00 00	 mov	 DWORD PTR ?delBtn@@3HA, 26439 ; delBtn, 00006747H

; 20114: 						}
; 20115: 						break;
; 20116: 					}
; 20117: 					BtnNo = i;

  0060c	89 35 00 00 00
	00		 mov	 DWORD PTR ?BtnNo@@3HA, esi ; BtnNo

; 20118: 					BtnType = TRUE;

  00612	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?BtnType@@3_NA, 1 ; BtnType

; 20119: 
; 20120: 				}

  00619	e9 a5 01 00 00	 jmp	 $LN5@ChatRoomWn
$LN40@ChatRoomWn:

; 20096: 						break;
; 20097: 					case 5:
; 20098: 						scrollFlag = TRUE;

  0061e	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?scrollFlag@@3_NA, 1 ; scrollFlag

; 20114: 						}
; 20115: 						break;
; 20116: 					}
; 20117: 					BtnNo = i;

  00625	89 35 00 00 00
	00		 mov	 DWORD PTR ?BtnNo@@3HA, esi ; BtnNo

; 20118: 					BtnType = TRUE;

  0062b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?BtnType@@3_NA, 1 ; BtnType

; 20119: 
; 20120: 				}

  00632	e9 8c 01 00 00	 jmp	 $LN5@ChatRoomWn
$LN41@ChatRoomWn:

; 20099: 						break;
; 20100: 					case 6:
; 20101: 						if (firMemNo > 0)

  00637	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?firMemNo@@3HA ; firMemNo
  0063d	85 db		 test	 ebx, ebx
  0063f	7e 57		 jle	 SHORT $LN89@ChatRoomWn

; 20102: 						{
; 20103: 							firMemNo--;
; 20104: 							scrlBtnIndex = (scrlLenth / (chatInfo.memberNum - 10))  * firMemNo;

  00641	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?chatInfo@@3UCHATINFO@@A+32
  00647	4b		 dec	 ebx

; 20105: 							scrlHBtn = CG_FIELD_SCROLL_HDOWN;

  00648	c7 05 00 00 00
	00 51 67 00 00	 mov	 DWORD PTR ?scrlHBtn@@3HA, 26449 ; scrlHBtn, 00006751H
  00652	8d 49 f6	 lea	 ecx, DWORD PTR [ecx-10]

; 20106: 						}
; 20107: 						break;

  00655	eb 2b		 jmp	 SHORT $LN93@ChatRoomWn
$LN43@ChatRoomWn:

; 20108: 					case 7:
; 20109: 						if (chatInfo.memberNum > firMemNo + 10 && chatInfo.memberNum > 10)

  00657	a1 00 00 00 00	 mov	 eax, DWORD PTR ?firMemNo@@3HA ; firMemNo
  0065c	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?chatInfo@@3UCHATINFO@@A+32
  00662	83 c0 0a	 add	 eax, 10			; 0000000aH
  00665	3b c8		 cmp	 ecx, eax
  00667	7e 2f		 jle	 SHORT $LN89@ChatRoomWn
  00669	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0066c	7e 2a		 jle	 SHORT $LN89@ChatRoomWn

; 20110: 						{
; 20111: 							firMemNo++;

  0066e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?firMemNo@@3HA ; firMemNo
  00674	43		 inc	 ebx

; 20112: 							scrlBtnIndex = (scrlLenth / (chatInfo.memberNum - 10))  * firMemNo;
; 20113: 							scrlLBtn = CG_FIELD_SCROLL_LDOWN;

  00675	c7 05 00 00 00
	00 53 67 00 00	 mov	 DWORD PTR ?scrlLBtn@@3HA, 26451 ; scrlLBtn, 00006753H
  0067f	83 c1 f6	 add	 ecx, -10		; fffffff6H
$LN93@ChatRoomWn:

; 20114: 						}
; 20115: 						break;
; 20116: 					}
; 20117: 					BtnNo = i;

  00682	b8 b7 00 00 00	 mov	 eax, 183		; 000000b7H
  00687	89 1d 00 00 00
	00		 mov	 DWORD PTR ?firMemNo@@3HA, ebx ; firMemNo
  0068d	99		 cdq
  0068e	f7 f9		 idiv	 ecx
  00690	0f af c3	 imul	 eax, ebx
  00693	a3 00 00 00 00	 mov	 DWORD PTR ?scrlBtnIndex@@3HA, eax ; scrlBtnIndex
$LN89@ChatRoomWn:
  00698	bb ff fb 00 00	 mov	 ebx, 64511		; 0000fbffH
$LN44@ChatRoomWn:
  0069d	89 35 00 00 00
	00		 mov	 DWORD PTR ?BtnNo@@3HA, esi ; BtnNo

; 20118: 					BtnType = TRUE;

  006a3	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?BtnType@@3_NA, 1 ; BtnType

; 20119: 
; 20120: 				}

  006aa	e9 14 01 00 00	 jmp	 $LN5@ChatRoomWn
$LN33@ChatRoomWn:

; 20121: 				else if (mouse.onceState & MOUSE_LEFT_CRICK_UP) {

  006af	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  006b6	0f 84 07 01 00
	00		 je	 $LN5@ChatRoomWn

; 20122: 					switch (i) {

  006bc	83 fe 04	 cmp	 esi, 4
  006bf	0f 87 ee 00 00
	00		 ja	 $LN10@ChatRoomWn
  006c5	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN84@ChatRoomWn[esi*4]
$LN46@ChatRoomWn:

; 20123: 					case 0:						//å³é­è§çª
; 20124: 						DeathMenuAction();

  006cc	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 20125: 						break;

  006d1	e9 dd 00 00 00	 jmp	 $LN10@ChatRoomWn
$LN47@ChatRoomWn:

; 20126: 
; 20127: 					case 1:						//ç¦»å¼é¢é
; 20128: 						if (chatInfo.chiefFlag == 1)

  006d6	83 3d 1c 00 00
	00 01		 cmp	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+28, 1
  006dd	75 16		 jne	 SHORT $LN48@ChatRoomWn

; 20129: 							StockChatBufferLine("ì±í ë°©ì¥ì ì±íë°©ìì ëê° ì ììµëë¤. ëê°ê³  ì¶ì ê²½ì° ë¤ë¥¸ì¬ëìê² ë°©ì¥ì ëê¸°ìê¸° ë°ëëë¤ï¼", FONT_PAL_RED);

  006df	6a 00		 push	 0
  006e1	6a 06		 push	 6
  006e3	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@JDIKCLBG@?C?$KE?F?C?5?$LJ?f?$MA?e?$MA?$LK?5?C?$KE?F?C?$LJ?f?$LP?$KB?$LM?$KN?5?$LD?$KK?$LA?$KF?5?$LM?v?5@
  006e8	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  006ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  006f0	e9 be 00 00 00	 jmp	 $LN10@ChatRoomWn
$LN48@ChatRoomWn:

; 20130: 						else {
; 20131: 							lssproto_CHATROOM_send(sockfd, "L|");

  006f5	68 00 00 00 00	 push	 OFFSET ??_C@_02PKLEGELD@L?$HM@
  006fa	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00700	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_send@@YAXHPAD@Z ; lssproto_CHATROOM_send

; 20132: 							strcpy(pc.chatRoomNum, "");

  00705	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0070a	a2 b4 a1 00 00	 mov	 BYTE PTR ?pc@@3UPC@@A+41396, al

; 20133: 							DeathMenuAction();

  0070f	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 20134: 							StockChatBufferLine("ë¹ì ì ì´ë¯¸ ì±íë°©ì ë ë¬ìµëë¤.", FONT_PAL_BLUE);

  00714	6a 00		 push	 0
  00716	6a 03		 push	 3
  00718	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CKMFLHCC@?$LE?g?$LN?E?$MA?$LK?5?$MA?L?$LJ?L?5?C?$KE?F?C?$LJ?f?$MA?$LL?5?$LG?$LA?$LD?$LF?$LN?$MA?$LE?O?$LE?Y@
  0071d	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  00722	83 c4 14	 add	 esp, 20			; 00000014H

; 20135: 							TalkMode = 0;
; 20136: #ifdef _CHANNEL_MODIFY
; 20137: 							pc.etcFlag &= ~PC_ETCFLAG_CHAT_CHAT;
; 20138: #endif
; 20139: 						}
; 20140: 						break;

  00725	eb 7b		 jmp	 SHORT $LN91@ChatRoomWn
$LN50@ChatRoomWn:

; 20141: 
; 20142: 					case 2:						//è¸¢äºº
; 20143: 						sprintf(tmpMsg, "K|%d", chatInfo.memberIndex[selChar]);

  00727	ff 34 bd 78 03
	00 00		 push	 DWORD PTR ?chatInfo@@3UCHATINFO@@A[edi*4+888]
  0072e	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  00734	68 00 00 00 00	 push	 OFFSET ??_C@_04IAAFEDG@K?$HM?$CFd@
  00739	50		 push	 eax
  0073a	e8 00 00 00 00	 call	 _sprintf

; 20144: 						lssproto_CHATROOM_send(sockfd, tmpMsg);

  0073f	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  00745	50		 push	 eax
  00746	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0074c	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_send@@YAXHPAD@Z ; lssproto_CHATROOM_send
  00751	83 c4 14	 add	 esp, 20			; 00000014H

; 20145: 						break;

  00754	eb 5d		 jmp	 SHORT $LN10@ChatRoomWn
$LN51@ChatRoomWn:

; 20146: 
; 20147: 					case 3:					//æ¢éé¿
; 20148: 						sprintf(tmpMsg, "M|%d", chatInfo.memberIndex[selChar]);

  00756	ff 34 bd 78 03
	00 00		 push	 DWORD PTR ?chatInfo@@3UCHATINFO@@A[edi*4+888]
  0075d	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  00763	68 00 00 00 00	 push	 OFFSET ??_C@_04IHEAKBJG@M?$HM?$CFd@
  00768	50		 push	 eax
  00769	e8 00 00 00 00	 call	 _sprintf

; 20149: 						lssproto_CHATROOM_send(sockfd, tmpMsg);

  0076e	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  00774	50		 push	 eax
  00775	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0077b	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_send@@YAXHPAD@Z ; lssproto_CHATROOM_send
  00780	83 c4 14	 add	 esp, 20			; 00000014H

; 20150: 						TalkMode = 0;
; 20151: 						break;

  00783	eb 24		 jmp	 SHORT $LN92@ChatRoomWn
$LN52@ChatRoomWn:

; 20152: 
; 20153: 					case 4:					//å é¤é¢é
; 20154: 						lssproto_CHATROOM_send(sockfd, "D|");

  00785	68 00 00 00 00	 push	 OFFSET ??_C@_02PEKHDFAL@D?$HM@
  0078a	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00790	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_send@@YAXHPAD@Z ; lssproto_CHATROOM_send

; 20155: 						strcpy(pc.chatRoomNum, "");

  00795	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0079a	83 c4 08	 add	 esp, 8
  0079d	a2 b4 a1 00 00	 mov	 BYTE PTR ?pc@@3UPC@@A+41396, al
$LN91@ChatRoomWn:

; 20156: 						TalkMode = 0;
; 20157: #ifdef _CHANNEL_MODIFY
; 20158: 						pc.etcFlag &= ~PC_ETCFLAG_CHAT_CHAT;
; 20159: #endif
; 20160: 						break;
; 20161: 					}
; 20162: 					secretFlag = FALSE;

  007a2	66 21 1d a8 00
	00 00		 and	 WORD PTR ?pc@@3UPC@@A+168, bx
$LN92@ChatRoomWn:
  007a9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TalkMode@@3HA, 0 ; TalkMode
$LN10@ChatRoomWn:

; 20163: 					selChar = -1;

  007b3	83 cf ff	 or	 edi, -1
  007b6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?secretFlag@@3_NA, 0 ; secretFlag
  007bd	89 3d 00 00 00
	00		 mov	 DWORD PTR ?selChar@@3HA, edi ; selChar
$LN5@ChatRoomWn:

; 20070: 
; 20071: 		}
; 20072: 
; 20073: 		for (int i = 0; i < 8; i++) {

  007c3	46		 inc	 esi
  007c4	b8 04 00 00 00	 mov	 eax, 4
  007c9	83 fe 08	 cmp	 esi, 8
  007cc	0f 8c d5 fc ff
	ff		 jl	 $LL7@ChatRoomWn

; 20164: 
; 20165: 				}
; 20166: 			}
; 20167: 		}
; 20168: 
; 20169: 		if (mouse.onceState & MOUSE_LEFT_CRICK_UP || HitDispNo != ChatRoomBtn[BtnNo])

  007d2	8b 15 2c 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+44
  007d8	23 d0		 and	 edx, eax
  007da	75 14		 jne	 SHORT $LN54@ChatRoomWn
  007dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BtnNo@@3HA ; BtnNo
  007e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  007e7	3b 0c 85 00 00
	00 00		 cmp	 ecx, DWORD PTR ?ChatRoomBtn@@3PAHA[eax*4]
  007ee	74 0f		 je	 SHORT $LN73@ChatRoomWn
$LN54@ChatRoomWn:

; 20170: 			BtnType = FALSE;

  007f0	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?BtnType@@3_NA, 0 ; BtnType

; 20171: 
; 20172: 		if (mouse.onceState & MOUSE_LEFT_CRICK_UP || mouse.nowPoint.x < x)

  007f7	85 d2		 test	 edx, edx
  007f9	0f 85 8e 00 00
	00		 jne	 $LN56@ChatRoomWn
$LN73@ChatRoomWn:
  007ff	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _x$1$[ebp]
  00805	39 05 00 00 00
	00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A, eax
  0080b	0f 8c 7c 00 00
	00		 jl	 $LN56@ChatRoomWn

; 20174: 
; 20175: 		if (scrollFlag) {

  00811	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?scrollFlag@@3_NA, 0 ; scrollFlag
  00818	74 7a		 je	 SHORT $LN90@ChatRoomWn

; 20176: 			if (mouse.nowPoint.y > scrTop - 2 && mouse.nowPoint.y < (scrTop + scrlLenth + 4)) {

  0081a	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR tv816[ebp]
  00820	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?mouse@@3UMOUSE@@A+4
  00826	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  00829	3b f0		 cmp	 esi, eax
  0082b	7e 67		 jle	 SHORT $LN90@ChatRoomWn
  0082d	8d 82 bb 00 00
	00		 lea	 eax, DWORD PTR [edx+187]
  00833	3b f0		 cmp	 esi, eax
  00835	7d 5d		 jge	 SHORT $LN90@ChatRoomWn

; 20177: 				if (chatInfo.memberNum > 10) {

  00837	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?chatInfo@@3UCHATINFO@@A+32
  0083d	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00840	7e 30		 jle	 SHORT $LN59@ChatRoomWn

; 20178: 					firMemNo = (mouse.nowPoint.y - scrTop) / (scrlLenth / (chatInfo.memberNum - 10));

  00842	2b f2		 sub	 esi, edx
  00844	83 c1 f6	 add	 ecx, -10		; fffffff6H
  00847	b8 b7 00 00 00	 mov	 eax, 183		; 000000b7H

; 20179: 					scrlBtnIndex = mouse.nowPoint.y - scrTop;

  0084c	89 35 00 00 00
	00		 mov	 DWORD PTR ?scrlBtnIndex@@3HA, esi ; scrlBtnIndex
  00852	99		 cdq
  00853	f7 f9		 idiv	 ecx
  00855	5f		 pop	 edi
  00856	8b c8		 mov	 ecx, eax
  00858	8b c6		 mov	 eax, esi
  0085a	99		 cdq
  0085b	f7 f9		 idiv	 ecx
  0085d	5e		 pop	 esi
  0085e	a3 00 00 00 00	 mov	 DWORD PTR ?firMemNo@@3HA, eax ; firMemNo
  00863	5b		 pop	 ebx

; 20183: 			}
; 20184: 		}
; 20185: 	}
; 20186: }

  00864	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00867	33 cd		 xor	 ecx, ebp
  00869	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0086e	8b e5		 mov	 esp, ebp
  00870	5d		 pop	 ebp
  00871	c3		 ret	 0
$LN59@ChatRoomWn:
  00872	5f		 pop	 edi
  00873	5e		 pop	 esi

; 20180: 				}
; 20181: 				else
; 20182: 					scrlBtnIndex = 0;

  00874	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?scrlBtnIndex@@3HA, 0 ; scrlBtnIndex
  0087e	5b		 pop	 ebx

; 20183: 			}
; 20184: 		}
; 20185: 	}
; 20186: }

  0087f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00882	33 cd		 xor	 ecx, ebp
  00884	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00889	8b e5		 mov	 esp, ebp
  0088b	5d		 pop	 ebp
  0088c	c3		 ret	 0
$LN56@ChatRoomWn:

; 20173: 			scrollFlag = FALSE;

  0088d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?scrollFlag@@3_NA, 0 ; scrollFlag
$LN90@ChatRoomWn:
  00894	5f		 pop	 edi
  00895	5e		 pop	 esi
  00896	5b		 pop	 ebx
$LN60@ChatRoomWn:

; 20183: 			}
; 20184: 		}
; 20185: 	}
; 20186: }

  00897	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0089a	33 cd		 xor	 ecx, ebp
  0089c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008a1	8b e5		 mov	 esp, ebp
  008a3	5d		 pop	 ebp
  008a4	c3		 ret	 0
  008a5	0f 1f 00	 npad	 3
$LN83@ChatRoomWn:
  008a8	00 00 00 00	 DD	 $LN35@ChatRoomWn
  008ac	00 00 00 00	 DD	 $LN36@ChatRoomWn
  008b0	00 00 00 00	 DD	 $LN37@ChatRoomWn
  008b4	00 00 00 00	 DD	 $LN38@ChatRoomWn
  008b8	00 00 00 00	 DD	 $LN39@ChatRoomWn
  008bc	00 00 00 00	 DD	 $LN40@ChatRoomWn
  008c0	00 00 00 00	 DD	 $LN41@ChatRoomWn
  008c4	00 00 00 00	 DD	 $LN43@ChatRoomWn
$LN84@ChatRoomWn:
  008c8	00 00 00 00	 DD	 $LN46@ChatRoomWn
  008cc	00 00 00 00	 DD	 $LN47@ChatRoomWn
  008d0	00 00 00 00	 DD	 $LN50@ChatRoomWn
  008d4	00 00 00 00	 DD	 $LN51@ChatRoomWn
  008d8	00 00 00 00	 DD	 $LN52@ChatRoomWn
?ChatRoomWnd@@YAXXZ ENDP				; ChatRoomWnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitCreateChatRoom@@YAXPAD@Z
_TEXT	SEGMENT
tv485 = -76						; size = 4
tv483 = -72						; size = 4
_temp$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
?InitCreateChatRoom@@YAXPAD@Z PROC			; InitCreateChatRoom, COMDAT

; 19934: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]

; 19935: 	char temp[64], *temp1;
; 19936: 	chatInfo.chiefFlag = 0;

  00014	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+28, 0

; 19937: 	InitRoomInfo();					    //åå§ååæ°

  0001e	e8 00 00 00 00	 call	 ?InitRoomInfo@@YAXXZ	; InitRoomInfo

; 19938: 	chatRoomBtn = 1;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	66 a3 00 00 00
	00		 mov	 WORD PTR ?chatRoomBtn@@3FA, ax ; chatRoomBtn

; 19939: 	getStringToken(msg, '|', 2, sizeof(temp) - 1, temp);

  0002e	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  00031	50		 push	 eax
  00032	6a 3f		 push	 63			; 0000003fH
  00034	6a 02		 push	 2
  00036	6a 7c		 push	 124			; 0000007cH
  00038	53		 push	 ebx
  00039	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19940: 	if ((temp1 = strtok(temp, "r")) != NULL) {

  0003e	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _strtok
  0004c	8b c8		 mov	 ecx, eax
  0004e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00051	85 c9		 test	 ecx, ecx
  00053	0f 84 86 01 00
	00		 je	 $LN29@InitCreate

; 19941: 		strcpy(chatInfo.roomNo, temp1);

  00059	ba 00 00 00 00	 mov	 edx, OFFSET ?chatInfo@@3UCHATINFO@@A ; chatInfo
  0005e	2b d1		 sub	 edx, ecx
$LL10@InitCreate:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00065	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  00069	84 c0		 test	 al, al
  0006b	75 f3		 jne	 SHORT $LL10@InitCreate

; 19942: 		strcpy(pc.chatRoomNum, chatInfo.roomNo);

  0006d	33 c9		 xor	 ecx, ecx
  0006f	90		 npad	 1
$LL11@InitCreate:
  00070	8a 81 00 00 00
	00		 mov	 al, BYTE PTR ?chatInfo@@3UCHATINFO@@A[ecx]
  00076	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00079	88 81 b3 a1 00
	00		 mov	 BYTE PTR ?pc@@3UPC@@A[ecx+41395], al
  0007f	84 c0		 test	 al, al
  00081	75 ed		 jne	 SHORT $LL11@InitCreate

; 19943: 
; 19944: 		getStringToken(msg, '|', 3, sizeof(chatInfo.roomName) - 1, chatInfo.roomName);

  00083	68 40 04 00 00	 push	 OFFSET ?chatInfo@@3UCHATINFO@@A+1088
  00088	6a 1f		 push	 31			; 0000001fH
  0008a	6a 03		 push	 3
  0008c	6a 7c		 push	 124			; 0000007cH
  0008e	53		 push	 ebx
  0008f	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19945: 
; 19946: 		chatInfo.chiefIndex = getIntegerToken(msg, '|', 4);

  00094	6a 04		 push	 4
  00096	6a 7c		 push	 124			; 0000007cH
  00098	53		 push	 ebx
  00099	e8 00 00 00 00	 call	 ?getIntegerToken@@YAHPADDH@Z ; getIntegerToken
  0009e	a3 18 00 00 00	 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+24, eax

; 19947: 
; 19948: 		getStringToken(msg, '|', 5, sizeof(temp) - 1, temp);

  000a3	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  000a6	50		 push	 eax
  000a7	6a 3f		 push	 63			; 0000003fH
  000a9	6a 05		 push	 5
  000ab	6a 7c		 push	 124			; 0000007cH
  000ad	53		 push	 ebx
  000ae	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  000b3	83 c4 34	 add	 esp, 52			; 00000034H
  000b6	33 c9		 xor	 ecx, ecx
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL12@InitCreate:

; 19949: 		strcpy(chatInfo.chiefName, temp);

  000c0	8a 44 0d bc	 mov	 al, BYTE PTR _temp$[ebp+ecx]
  000c4	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000c7	88 81 03 00 00
	00		 mov	 BYTE PTR ?chatInfo@@3UCHATINFO@@A[ecx+3], al
  000cd	84 c0		 test	 al, al
  000cf	75 ef		 jne	 SHORT $LL12@InitCreate

; 19950: 
; 19951: 		getStringToken(msg, '|', 6, sizeof(temp) - 1, temp);

  000d1	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  000d4	50		 push	 eax
  000d5	6a 3f		 push	 63			; 0000003fH
  000d7	6a 06		 push	 6
  000d9	6a 7c		 push	 124			; 0000007cH
  000db	53		 push	 ebx
  000dc	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19952: 
; 19953: 		if ((temp1 = strtok(temp, "p")) != NULL)

  000e1	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_01JBBJJEPG@p@
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _strtok
  000ef	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f2	85 c0		 test	 eax, eax
  000f4	74 10		 je	 SHORT $LN30@InitCreate

; 19954: 			chatInfo.memberNum = atoi(temp1);

  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 _atoi
  000fc	83 c4 04	 add	 esp, 4
  000ff	a3 20 00 00 00	 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+32, eax
  00104	eb 05		 jmp	 SHORT $LN6@InitCreate
$LN30@InitCreate:

; 19952: 
; 19953: 		if ((temp1 = strtok(temp, "p")) != NULL)

  00106	a1 20 00 00 00	 mov	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A+32
$LN6@InitCreate:
  0010b	56		 push	 esi

; 19955: 		int i;
; 19956: 		for (i = 0; i < chatInfo.memberNum; i++) {

  0010c	33 f6		 xor	 esi, esi
  0010e	85 c0		 test	 eax, eax
  00110	0f 8e ae 00 00
	00		 jle	 $LN31@InitCreate
  00116	57		 push	 edi
  00117	c7 45 b4 60 04
	00 00		 mov	 DWORD PTR tv485[ebp], OFFSET ?chatInfo@@3UCHATINFO@@A+1120
  0011e	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00121	c7 45 b8 24 00
	00 00		 mov	 DWORD PTR tv483[ebp], OFFSET ?chatInfo@@3UCHATINFO@@A+36
$LL4@InitCreate:

; 19957: 			getStringToken(msg, '|', 7 + i * 3, sizeof(temp) - 1, temp);

  00128	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  0012b	50		 push	 eax
  0012c	6a 3f		 push	 63			; 0000003fH
  0012e	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00131	50		 push	 eax
  00132	6a 7c		 push	 124			; 0000007cH
  00134	53		 push	 ebx
  00135	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 506  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  0013a	8d 45 bc	 lea	 eax, DWORD PTR _temp$[ebp]
  0013d	6a 49		 push	 73			; 00000049H
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 _strchr
  00145	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 19958: 			if ((temp1 = strchr(temp, 'I')) == NULL)

  00148	85 c0		 test	 eax, eax
  0014a	74 77		 je	 SHORT $LN32@InitCreate

; 19959: 				break;
; 19960: 			chatInfo.memberIndex[i] = atoi(temp1 + 1);

  0014c	40		 inc	 eax
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _atoi

; 19961: 			getStringToken(msg, '|', 8 + i * 3, sizeof(chatInfo.memberName[i]) - 1

  00153	ff 75 b8	 push	 DWORD PTR tv483[ebp]
  00156	89 04 b5 78 03
	00 00		 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A[esi*4+888], eax
  0015d	6a 10		 push	 16			; 00000010H
  0015f	57		 push	 edi
  00160	6a 7c		 push	 124			; 0000007cH
  00162	53		 push	 ebx
  00163	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19962: 				, chatInfo.memberName[i]);
; 19963: 			getStringToken(msg, '|', 9 + i * 3, sizeof(chatInfo.nickName[i]) - 1

  00168	ff 75 b4	 push	 DWORD PTR tv485[ebp]
  0016b	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0016e	6a 20		 push	 32			; 00000020H
  00170	50		 push	 eax
  00171	6a 7c		 push	 124			; 0000007cH
  00173	53		 push	 ebx
  00174	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00179	83 c4 2c	 add	 esp, 44			; 0000002cH

; 19964: 				, chatInfo.nickName[i]);
; 19965: 			if (i > 0 && chatInfo.memberIndex[i] == chatInfo.chiefIndex)

  0017c	85 f6		 test	 esi, esi
  0017e	7e 1a		 jle	 SHORT $LN8@InitCreate
  00180	8b 04 b5 78 03
	00 00		 mov	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A[esi*4+888]
  00187	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?chatInfo@@3UCHATINFO@@A+24
  0018d	75 0b		 jne	 SHORT $LN8@InitCreate

; 19966: 				SwapOrder(i, 0);                 //å®¤é¿æåº

  0018f	6a 00		 push	 0
  00191	56		 push	 esi
  00192	e8 00 00 00 00	 call	 ?SwapOrder@@YAXHH@Z	; SwapOrder
  00197	83 c4 08	 add	 esp, 8
$LN8@InitCreate:

; 19955: 		int i;
; 19956: 		for (i = 0; i < chatInfo.memberNum; i++) {

  0019a	83 45 b8 11	 add	 DWORD PTR tv483[ebp], 17 ; 00000011H
  0019e	46		 inc	 esi
  0019f	83 45 b4 21	 add	 DWORD PTR tv485[ebp], 33 ; 00000021H
  001a3	83 c7 03	 add	 edi, 3

; 19967: 			secretFlag = FALSE;

  001a6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?secretFlag@@3_NA, 0 ; secretFlag

; 19968: 			selChar = -1;

  001ad	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?selChar@@3HA, -1 ; selChar
  001b7	3b 35 20 00 00
	00		 cmp	 esi, DWORD PTR ?chatInfo@@3UCHATINFO@@A+32
  001bd	0f 8c 65 ff ff
	ff		 jl	 $LL4@InitCreate
$LN32@InitCreate:
  001c3	5f		 pop	 edi
$LN31@InitCreate:

; 19969: 		}
; 19970: 		chatInfo.chiefFlag = getIntegerToken(msg, '|', 9 + i * 3 - 2);

  001c4	8d 04 75 07 00
	00 00		 lea	 eax, DWORD PTR [esi*2+7]
  001cb	03 c6		 add	 eax, esi
  001cd	50		 push	 eax
  001ce	6a 7c		 push	 124			; 0000007cH
  001d0	53		 push	 ebx
  001d1	e8 00 00 00 00	 call	 ?getIntegerToken@@YAHPADDH@Z ; getIntegerToken
  001d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d9	a3 1c 00 00 00	 mov	 DWORD PTR ?chatInfo@@3UCHATINFO@@A+28, eax

; 19971: 	}
; 19972: #ifdef _CHANNEL_MODIFY
; 19973: 	pc.etcFlag |= PC_ETCFLAG_CHAT_CHAT;

  001de	5e		 pop	 esi
$LN29@InitCreate:

; 19974: #endif
; 19975: }

  001df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e2	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  001e7	66 09 05 a8 00
	00 00		 or	 WORD PTR ?pc@@3UPC@@A+168, ax
  001ee	33 cd		 xor	 ecx, ebp
  001f0	5b		 pop	 ebx
  001f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f6	8b e5		 mov	 esp, ebp
  001f8	5d		 pop	 ebp
  001f9	c3		 ret	 0
?InitCreateChatRoom@@YAXPAD@Z ENDP			; InitCreateChatRoom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitSelChatRoom@@YAXPAD@Z
_TEXT	SEGMENT
_memberNum$1$ = -220					; size = 4
tv234 = -216						; size = 4
_chiefName$ = -212					; size = 128
_RoomName$ = -84					; size = 32
_tempRoomNum$ = -52					; size = 32
_temp$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
?InitSelChatRoom@@YAXPAD@Z PROC				; InitSelChatRoom, COMDAT

; 19834: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 19835: 	char tempRoomNum[32], RoomName[32];
; 19836: 	int memberNum = 0;
; 19837: 	char chiefName[128] = { "" };

  00013	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _msg$[ebp]
  0001c	6a 7f		 push	 127			; 0000007fH
  0001e	88 85 2c ff ff
	ff		 mov	 BYTE PTR _chiefName$[ebp], al
  00024	8d 85 2d ff ff
	ff		 lea	 eax, DWORD PTR _chiefName$[ebp+1]
  0002a	6a 00		 push	 0
  0002c	50		 push	 eax
  0002d	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _memberNum$1$[ebp], 0
  00037	e8 00 00 00 00	 call	 _memset

; 19838: 	char temp[16], *temp1;
; 19839: 	int i = 2, k = 0;
; 19840: 	roomNum = 0;
; 19841: 
; 19842: 	while (getStringToken(msg, '|', i, sizeof(tempRoomNum) - 1, tempRoomNum) != 1) {

  0003c	8d 45 cc	 lea	 eax, DWORD PTR _tempRoomNum$[ebp]
  0003f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?roomNum@@3HA, 0 ; roomNum
  00049	50		 push	 eax
  0004a	6a 1f		 push	 31			; 0000001fH
  0004c	6a 02		 push	 2
  0004e	6a 7c		 push	 124			; 0000007cH
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00056	83 c4 20	 add	 esp, 32			; 00000020H
  00059	83 f8 01	 cmp	 eax, 1
  0005c	0f 84 0d 01 00
	00		 je	 $LN12@InitSelCha

; 19834: {

  00062	53		 push	 ebx
  00063	56		 push	 esi
  00064	be 05 00 00 00	 mov	 esi, 5
  00069	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], OFFSET ?roomIndex@@3PAHA ; roomIndex
  00073	bb 00 00 00 00	 mov	 ebx, OFFSET ?roomInfo@@3PAY0EA@DA ; roomInfo
  00078	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@InitSelCha:

; 19843: 		if (tempRoomNum[0] == 'r') {

  00080	80 7d cc 72	 cmp	 BYTE PTR _tempRoomNum$[ebp], 114 ; 00000072H
  00084	0f 85 c9 00 00
	00		 jne	 $LN11@InitSelCha

; 19844: 			temp1 = tempRoomNum;
; 19845: 			temp1++;
; 19846: 			roomNum = atoi(temp1);

  0008a	8d 45 cd	 lea	 eax, DWORD PTR _tempRoomNum$[ebp+1]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _atoi
  00093	a3 00 00 00 00	 mov	 DWORD PTR ?roomNum@@3HA, eax ; roomNum

; 19847: 
; 19848: 			getStringToken(msg, '|', i + 1, sizeof(RoomName) - 1, RoomName);

  00098	8d 45 ac	 lea	 eax, DWORD PTR _RoomName$[ebp]
  0009b	50		 push	 eax
  0009c	6a 1f		 push	 31			; 0000001fH
  0009e	8d 46 fe	 lea	 eax, DWORD PTR [esi-2]
  000a1	50		 push	 eax
  000a2	6a 7c		 push	 124			; 0000007cH
  000a4	57		 push	 edi
  000a5	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19849: 			getStringToken(msg, '|', i + 3, sizeof(chiefName) - 1, chiefName);

  000aa	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _chiefName$[ebp]
  000b0	50		 push	 eax
  000b1	6a 7f		 push	 127			; 0000007fH
  000b3	56		 push	 esi
  000b4	6a 7c		 push	 124			; 0000007cH
  000b6	57		 push	 edi
  000b7	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19850: 			getStringToken(msg, '|', i + 4, sizeof(temp) - 1, temp);

  000bc	8d 45 ec	 lea	 eax, DWORD PTR _temp$[ebp]
  000bf	50		 push	 eax
  000c0	6a 0f		 push	 15			; 0000000fH
  000c2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000c5	50		 push	 eax
  000c6	6a 7c		 push	 124			; 0000007cH
  000c8	57		 push	 edi
  000c9	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  000ce	83 c4 40	 add	 esp, 64			; 00000040H

; 19851: 
; 19852: 			if ((temp1 = strtok(temp, "p")) != NULL)

  000d1	8d 45 ec	 lea	 eax, DWORD PTR _temp$[ebp]
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_01JBBJJEPG@p@
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _strtok
  000df	83 c4 08	 add	 esp, 8
  000e2	85 c0		 test	 eax, eax
  000e4	74 11		 je	 SHORT $LN13@InitSelCha

; 19853: 				memberNum = atoi(temp1);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _atoi
  000ec	83 c4 04	 add	 esp, 4
  000ef	89 85 24 ff ff
	ff		 mov	 DWORD PTR _memberNum$1$[ebp], eax
  000f5	eb 06		 jmp	 SHORT $LN6@InitSelCha
$LN13@InitSelCha:

; 19851: 
; 19852: 			if ((temp1 = strtok(temp, "p")) != NULL)

  000f7	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _memberNum$1$[ebp]
$LN6@InitSelCha:

; 19854: 
; 19855: 			roomIndex[k] = roomNum;

  000fd	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR tv234[ebp]
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?roomNum@@3HA ; roomNum

; 19856: 			sprintf(roomInfo[k], "  %16s  %16s   %2d ", RoomName, chiefName, memberNum);

  00109	50		 push	 eax
  0010a	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _chiefName$[ebp]
  00110	50		 push	 eax
  00111	8d 45 ac	 lea	 eax, DWORD PTR _RoomName$[ebp]
  00114	89 0a		 mov	 DWORD PTR [edx], ecx
  00116	50		 push	 eax
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HNIDOICG@?5?5?$CF16s?5?5?$CF16s?5?5?5?$CF2d?5@
  0011c	53		 push	 ebx
  0011d	e8 00 00 00 00	 call	 _sprintf

; 19857: 			k++;

  00122	83 85 28 ff ff
	ff 04		 add	 DWORD PTR tv234[ebp], 4
  00129	8d 45 cc	 lea	 eax, DWORD PTR _tempRoomNum$[ebp]

; 19858: 			roomNum++;

  0012c	ff 05 00 00 00
	00		 inc	 DWORD PTR ?roomNum@@3HA	; roomNum

; 19859: 			i += 5;

  00132	83 c6 05	 add	 esi, 5
  00135	50		 push	 eax
  00136	6a 1f		 push	 31			; 0000001fH
  00138	83 c3 40	 add	 ebx, 64			; 00000040H
  0013b	8d 46 fd	 lea	 eax, DWORD PTR [esi-3]
  0013e	50		 push	 eax
  0013f	6a 7c		 push	 124			; 0000007cH
  00141	57		 push	 edi
  00142	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00147	83 c4 28	 add	 esp, 40			; 00000028H
  0014a	83 f8 01	 cmp	 eax, 1
  0014d	0f 85 2d ff ff
	ff		 jne	 $LL2@InitSelCha
$LN11@InitSelCha:
  00153	5e		 pop	 esi

; 19860: 		}
; 19861: 		else
; 19862: 			break;
; 19863: 	}
; 19864: 	SelRoomBtn = 1;

  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	5b		 pop	 ebx
  0015a	66 a3 00 00 00
	00		 mov	 WORD PTR ?SelRoomBtn@@3FA, ax ; SelRoomBtn
  00160	5f		 pop	 edi

; 19865: }

  00161	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00164	33 cd		 xor	 ecx, ebp
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
$LN12@InitSelCha:
  0016f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00172	b8 01 00 00 00	 mov	 eax, 1
  00177	33 cd		 xor	 ecx, ebp
  00179	66 a3 00 00 00
	00		 mov	 WORD PTR ?SelRoomBtn@@3FA, ax ; SelRoomBtn
  0017f	5f		 pop	 edi
  00180	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
?InitSelChatRoom@@YAXPAD@Z ENDP				; InitSelChatRoom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?SelectChatRoom@@YAXXZ
_TEXT	SEGMENT
_y$1$ = -220						; size = 4
tv333 = -216						; size = 4
_x$1$ = -212						; size = 4
_tmpMsg$ = -208						; size = 128
_title$1 = -80						; size = 49
__$ArrayPad$ = -4					; size = 4
?SelectChatRoom@@YAXXZ PROC				; SelectChatRoom, COMDAT

; 19869: {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 19870: 	char tmpMsg[128] = { "" };

  00026	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	6a 7f		 push	 127			; 0000007fH
  0002f	88 85 30 ff ff
	ff		 mov	 BYTE PTR _tmpMsg$[ebp], al
  00035	8d 85 31 ff ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp+1]
  0003b	6a 00		 push	 0
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _memset

; 19871: 
; 19872: 	if (pSelChanlWnd == NULL) {

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pSelChanlWnd@@3PAUaction@@A ; pSelChanlWnd
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	85 c0		 test	 eax, eax
  0004d	75 37		 jne	 SHORT $LN5@SelectChat

; 19873: 		pSelChanlWnd = MakeWindowDisp(120, 100, 7, roomNum / 2 + 2, 2, 0);

  0004f	50		 push	 eax
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?roomNum@@3HA ; roomNum
  00055	99		 cdq
  00056	2b c2		 sub	 eax, edx
  00058	6a 02		 push	 2
  0005a	d1 f8		 sar	 eax, 1
  0005c	83 c0 02	 add	 eax, 2
  0005f	50		 push	 eax
  00060	6a 07		 push	 7
  00062	6a 64		 push	 100			; 00000064H
  00064	6a 78		 push	 120			; 00000078H
  00066	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0006b	83 c4 18	 add	 esp, 24			; 00000018H
  0006e	a3 00 00 00 00	 mov	 DWORD PTR ?pSelChanlWnd@@3PAUaction@@A, eax ; pSelChanlWnd

; 19896: 		}
; 19897: 	}
; 19898: }

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 cd		 xor	 ecx, ebp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	8b e3		 mov	 esp, ebx
  00084	5b		 pop	 ebx
  00085	c3		 ret	 0
$LN5@SelectChat:

; 19874: 	}
; 19875: 	else if (pSelChanlWnd->hp > 0) {

  00086	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  0008a	0f 8e 6d 01 00
	00		 jle	 $LN11@SelectChat

; 19876: 		int x = pSelChanlWnd->x;

  00090	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]

; 19877: 		int y = pSelChanlWnd->y;

  00093	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]

; 19878: 		char title[] = { "          ì²´ëì´ë¦          íí°ì¥ì´ë¦  ì¸ì ì " };

  00096	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DB@BMHKFDJF@?5?5?5?5?5?5?5?5?5?5?C?$LM?$LD?N?$MA?L?$LI?$KH?5?5?5?5?5?5?5?5?5?5?F?D?F@
  0009d	a0 30 00 00 00	 mov	 al, BYTE PTR ??_C@_0DB@BMHKFDJF@?5?5?5?5?5?5?5?5?5?5?C?$LM?$LD?N?$MA?L?$LI?$KH?5?5?5?5?5?5?5?5?5?5?F?D?F@+48

; 19879: 		StockFontBuffer(x + 10, y + 15, FONT_PRIO_FRONT, 4, title, 0);

  000a2	6a 00		 push	 0
  000a4	88 45 e0	 mov	 BYTE PTR _title$1[ebp+48], al
  000a7	8d 45 b0	 lea	 eax, DWORD PTR _title$1[ebp]
  000aa	50		 push	 eax
  000ab	0f 11 45 b0	 movups	 XMMWORD PTR _title$1[ebp], xmm0
  000af	6a 04		 push	 4
  000b1	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DB@BMHKFDJF@?5?5?5?5?5?5?5?5?5?5?C?$LM?$LD?N?$MA?L?$LI?$KH?5?5?5?5?5?5?5?5?5?5?F?D?F@+16
  000b8	6a 01		 push	 1
  000ba	8d 46 0f	 lea	 eax, DWORD PTR [esi+15]
  000bd	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _x$1$[ebp], ecx
  000c3	0f 11 45 c0	 movups	 XMMWORD PTR _title$1[ebp+16], xmm0
  000c7	83 c1 0a	 add	 ecx, 10			; 0000000aH
  000ca	89 b5 24 ff ff
	ff		 mov	 DWORD PTR _y$1$[ebp], esi
  000d0	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DB@BMHKFDJF@?5?5?5?5?5?5?5?5?5?5?C?$LM?$LD?N?$MA?L?$LI?$KH?5?5?5?5?5?5?5?5?5?5?F?D?F@+32
  000d7	50		 push	 eax
  000d8	51		 push	 ecx
  000d9	0f 11 45 d0	 movups	 XMMWORD PTR _title$1[ebp+32], xmm0
  000dd	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 19880: 		int i;
; 19881: 		for (i = 0; i < roomNum; i++) {

  000e2	33 ff		 xor	 edi, edi
  000e4	83 c4 18	 add	 esp, 24			; 00000018H
  000e7	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?roomNum@@3HA, edi ; roomNum
  000ed	0f 8e b5 00 00
	00		 jle	 $LN3@SelectChat

; 19876: 		int x = pSelChanlWnd->x;

  000f3	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _x$1$[ebp]
  000f9	b8 00 00 00 00	 mov	 eax, OFFSET ?roomInfo@@3PAY0EA@DA ; roomInfo
  000fe	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv333[ebp], eax
  00104	83 c6 25	 add	 esi, 37			; 00000025H
$LL4@SelectChat:

; 19882: 			StockFontBuffer(x + 10, y + 40 + i * 20, FONT_PRIO_FRONT, 5, roomInfo[i], 0);

  00107	6a 00		 push	 0
  00109	50		 push	 eax
  0010a	6a 05		 push	 5
  0010c	6a 01		 push	 1
  0010e	8d 46 03	 lea	 eax, DWORD PTR [esi+3]
  00111	50		 push	 eax
  00112	8d 41 0a	 lea	 eax, DWORD PTR [ecx+10]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 19883: 			if (MakeHitBox(x + 10, y + 37 + i * 20, x + 320, y + 58 + i * 20, DISP_PRIO_BOX2)) {

  0011b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _x$1$[ebp]
  00121	8d 46 15	 lea	 eax, DWORD PTR [esi+21]
  00124	6a 6b		 push	 107			; 0000006bH
  00126	50		 push	 eax
  00127	8d 81 40 01 00
	00		 lea	 eax, DWORD PTR [ecx+320]
  0012d	50		 push	 eax
  0012e	8d 41 0a	 lea	 eax, DWORD PTR [ecx+10]
  00131	56		 push	 esi
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  00138	83 c4 2c	 add	 esp, 44			; 0000002cH
  0013b	85 c0		 test	 eax, eax
  0013d	74 3e		 je	 SHORT $LN2@SelectChat

; 19884: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0013f	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00146	74 35		 je	 SHORT $LN2@SelectChat

; 19885: 					sprintf(tmpMsg, "J|%d", roomIndex[i]);

  00148	ff 34 bd 00 00
	00 00		 push	 DWORD PTR ?roomIndex@@3PAHA[edi*4]
  0014f	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  00155	68 00 00 00 00	 push	 OFFSET ??_C@_04DFGAHNIG@J?$HM?$CFd@
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _sprintf

; 19886: 					lssproto_CHATROOM_send(sockfd, tmpMsg);

  00160	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  00166	50		 push	 eax
  00167	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0016d	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_send@@YAXHPAD@Z ; lssproto_CHATROOM_send
  00172	83 c4 14	 add	 esp, 20			; 00000014H

; 19887: 					SelRoomBtn = 0;         //å³é­éæ©é¢éè§çª

  00175	33 c0		 xor	 eax, eax
  00177	66 a3 00 00 00
	00		 mov	 WORD PTR ?SelRoomBtn@@3FA, ax ; SelRoomBtn
$LN2@SelectChat:

; 19880: 		int i;
; 19881: 		for (i = 0; i < roomNum; i++) {

  0017d	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR tv333[ebp]
  00183	47		 inc	 edi
  00184	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _x$1$[ebp]
  0018a	83 c0 40	 add	 eax, 64			; 00000040H
  0018d	83 c6 14	 add	 esi, 20			; 00000014H
  00190	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv333[ebp], eax
  00196	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?roomNum@@3HA ; roomNum
  0019c	0f 8c 65 ff ff
	ff		 jl	 $LL4@SelectChat
  001a2	8b b5 24 ff ff
	ff		 mov	 esi, DWORD PTR _y$1$[ebp]
$LN3@SelectChat:

; 19888: 				}
; 19889: 			}
; 19890: 		}
; 19891: 
; 19892: 		StockFontBuffer(x + 30, y + 50 + i * 20, FONT_PRIO_FRONT, 5, "  ìë¡ì´ ì±íë°© ë§ë¤ê¸°", 0);

  001a8	6a 00		 push	 0
  001aa	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  001ad	8b bd 2c ff ff
	ff		 mov	 edi, DWORD PTR _x$1$[ebp]
  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EOCAOGMB@?5?5?$LL?u?$LH?N?$LP?n?5?C?$KE?F?C?$LJ?f?5?$LI?$LI?$LF?i?$LB?b@
  001b8	6a 05		 push	 5
  001ba	8d 34 86	 lea	 esi, DWORD PTR [esi+eax*4]
  001bd	83 c7 1e	 add	 edi, 30			; 0000001eH
  001c0	6a 01		 push	 1
  001c2	8d 46 32	 lea	 eax, DWORD PTR [esi+50]
  001c5	50		 push	 eax
  001c6	57		 push	 edi
  001c7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 19893: 		if (MakeHitBox(x + 30, y + 47 + i * 20, x + 340, y + 68 + i * 20, DISP_PRIO_BOX2)) {

  001cc	6a 6b		 push	 107			; 0000006bH
  001ce	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  001d1	50		 push	 eax
  001d2	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _x$1$[ebp]
  001d8	05 54 01 00 00	 add	 eax, 340		; 00000154H
  001dd	50		 push	 eax
  001de	8d 46 2f	 lea	 eax, DWORD PTR [esi+47]
  001e1	50		 push	 eax
  001e2	57		 push	 edi
  001e3	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  001e8	83 c4 2c	 add	 esp, 44			; 0000002cH
  001eb	85 c0		 test	 eax, eax
  001ed	74 0e		 je	 SHORT $LN11@SelectChat

; 19894: 			if (mouse.onceState & MOUSE_LEFT_CRICK)

  001ef	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  001f6	74 05		 je	 SHORT $LN11@SelectChat

; 19895: 				initSetRoomName();

  001f8	e8 00 00 00 00	 call	 ?initSetRoomName@@YAXXZ	; initSetRoomName
$LN11@SelectChat:

; 19896: 		}
; 19897: 	}
; 19898: }

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	5f		 pop	 edi
  00201	33 cd		 xor	 ecx, ebp
  00203	5e		 pop	 esi
  00204	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	8b e3		 mov	 esp, ebx
  0020e	5b		 pop	 ebx
  0020f	c3		 ret	 0
?SelectChatRoom@@YAXXZ ENDP				; SelectChatRoom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?DeathTellChannel@@YAXXZ
_TEXT	SEGMENT
?DeathTellChannel@@YAXXZ PROC				; DeathTellChannel, COMDAT

; 19768: 	DeathAction(pActMsgWnd);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMsgWnd@@3PAUaction@@A ; pActMsgWnd
  00006	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0000b	83 c4 04	 add	 esp, 4

; 19769: 	pActMsgWnd = NULL;

  0000e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMsgWnd@@3PAUaction@@A, 0 ; pActMsgWnd

; 19770: 	MultiTells = FALSE;

  00018	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MultiTells@@3HA, 0 ; MultiTells

; 19771: 	CharNum = 0;

  00022	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CharNum@@3HA, 0 ; CharNum

; 19772: }

  0002c	c3		 ret	 0
?DeathTellChannel@@YAXXZ ENDP				; DeathTellChannel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?SelectChar@@YAXXZ
_TEXT	SEGMENT
_y$1$ = -1104						; size = 4
tv324 = -1100						; size = 4
_x$1$ = -1096						; size = 4
tv325 = -1092						; size = 4
_tmpMsg$ = -1088					; size = 1024
_title$1 = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
?SelectChar@@YAXXZ PROC					; SelectChar, COMDAT

; 19726: {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 58 04 00
	00		 sub	 esp, 1112		; 00000458H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 19727: 	char tmpMsg[1024];
; 19728: 	int x, y;
; 19729: 	if (pActMsgWnd == NULL) {

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMsgWnd@@3PAUaction@@A ; pActMsgWnd
  0002b	56		 push	 esi
  0002c	57		 push	 edi
  0002d	85 c0		 test	 eax, eax
  0002f	75 38		 jne	 SHORT $LN5@SelectChar

; 19730: 		pActMsgWnd = MakeWindowDisp(80, 200, 6, CharNum / 2 + 1, 2, 0);

  00031	50		 push	 eax
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CharNum@@3HA ; CharNum
  00037	99		 cdq
  00038	2b c2		 sub	 eax, edx
  0003a	6a 02		 push	 2
  0003c	d1 f8		 sar	 eax, 1
  0003e	40		 inc	 eax
  0003f	50		 push	 eax
  00040	6a 06		 push	 6
  00042	68 c8 00 00 00	 push	 200			; 000000c8H
  00047	6a 50		 push	 80			; 00000050H
  00049	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0004e	83 c4 18	 add	 esp, 24			; 00000018H
  00051	a3 00 00 00 00	 mov	 DWORD PTR ?pActMsgWnd@@3PAUaction@@A, eax ; pActMsgWnd

; 19745: 				}
; 19746: 			}
; 19747: 		}
; 19748: 	}
; 19749: 
; 19750: 	//test//////////////
; 19751: #ifdef _TIMEBAR_FUNCTION
; 19752: 	int Now = timeGetTime();
; 19753: 	Now -= StartTime;
; 19754: 	int rsut = SetTimeBarPos(timBarIdent, Now / 1000);
; 19755: 	if (rsut == 1)
; 19756: 		StartTime += 50000;
; 19757: 	else if (rsut == -1) {
; 19758: 		DeathAction(pTimeBarWnd);
; 19759: 		pTimeBarWnd = NULL;
; 19760: 	}
; 19761: 
; 19762: #endif
; 19763: 	////////////////////
; 19764: }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	33 cd		 xor	 ecx, ebp
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	8b e3		 mov	 esp, ebx
  00067	5b		 pop	 ebx
  00068	c3		 ret	 0
$LN5@SelectChar:

; 19731: 	}
; 19732: 	else if (pActMsgWnd->hp > 0) {

  00069	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  0006d	0f 8e 2d 01 00
	00		 jle	 $LN3@SelectChar

; 19733: 		x = pActMsgWnd->x;

  00073	8b 70 18	 mov	 esi, DWORD PTR [eax+24]

; 19734: 		y = pActMsgWnd->y;
; 19735: 		char title[] = { "           ì´ ë¦           ë³ ëª  í ì  ë  ë²¨ " };
; 19736: 		StockFontBuffer(x + 10, y + 15, FONT_PRIO_FRONT, 4, title, 0);

  00076	8d 55 c0	 lea	 edx, DWORD PTR _title$1[ebp]
  00079	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0007c	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DA@OCCOFDAC@?5?5?5?5?5?5?5?5?5?5?5?$MA?L?5?$LI?$KH?5?5?5?5?5?5?5?5?5?5?5?$LK?$LA?5?$LI@
  00083	6a 00		 push	 0
  00085	52		 push	 edx
  00086	0f 11 45 c0	 movups	 XMMWORD PTR _title$1[ebp], xmm0
  0008a	6a 04		 push	 4
  0008c	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DA@OCCOFDAC@?5?5?5?5?5?5?5?5?5?5?5?$MA?L?5?$LI?$KH?5?5?5?5?5?5?5?5?5?5?5?$LK?$LA?5?$LI@+16
  00093	89 85 b0 fb ff
	ff		 mov	 DWORD PTR _y$1$[ebp], eax
  00099	8d 4e 0a	 lea	 ecx, DWORD PTR [esi+10]
  0009c	6a 01		 push	 1
  0009e	0f 11 45 d0	 movups	 XMMWORD PTR _title$1[ebp+16], xmm0
  000a2	83 c0 0f	 add	 eax, 15			; 0000000fH
  000a5	89 b5 b8 fb ff
	ff		 mov	 DWORD PTR _x$1$[ebp], esi
  000ab	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DA@OCCOFDAC@?5?5?5?5?5?5?5?5?5?5?5?$MA?L?5?$LI?$KH?5?5?5?5?5?5?5?5?5?5?5?$LK?$LA?5?$LI@+32
  000b2	50		 push	 eax
  000b3	51		 push	 ecx
  000b4	0f 11 45 e0	 movups	 XMMWORD PTR _title$1[ebp+32], xmm0
  000b8	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 19737: 		for (int i = 0; i < CharNum; i++) {

  000bd	33 ff		 xor	 edi, edi
  000bf	83 c4 18	 add	 esp, 24			; 00000018H
  000c2	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?CharNum@@3HA, edi ; CharNum
  000c8	0f 8e d2 00 00
	00		 jle	 $LN3@SelectChar

; 19733: 		x = pActMsgWnd->x;

  000ce	8b b5 b0 fb ff
	ff		 mov	 esi, DWORD PTR _y$1$[ebp]
  000d4	b8 00 00 00 00	 mov	 eax, OFFSET ?TellInfo@@3PAY0IA@DA ; TellInfo
  000d9	c7 85 bc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv325[ebp], OFFSET ?name@@3PAY0CA@DA ; name
  000e3	83 c6 25	 add	 esi, 37			; 00000025H
  000e6	89 85 b4 fb ff
	ff		 mov	 DWORD PTR tv324[ebp], eax
  000ec	0f 1f 40 00	 npad	 4
$LL4@SelectChar:

; 19738: 			StockFontBuffer(x + 10, y + 40 + i * 20, FONT_PRIO_FRONT, 5, TellInfo[i], 0);

  000f0	6a 00		 push	 0
  000f2	50		 push	 eax
  000f3	6a 05		 push	 5
  000f5	6a 01		 push	 1
  000f7	8d 46 03	 lea	 eax, DWORD PTR [esi+3]
  000fa	50		 push	 eax
  000fb	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _x$1$[ebp]
  00101	83 c0 0a	 add	 eax, 10			; 0000000aH
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 19739: 			if (MakeHitBox(x + 10, y + 37 + i * 20, x + 360, y + 56 + i * 20, DISP_PRIO_BOX2)) {

  0010a	8b 8d b8 fb ff
	ff		 mov	 ecx, DWORD PTR _x$1$[ebp]
  00110	8d 46 13	 lea	 eax, DWORD PTR [esi+19]
  00113	6a 6b		 push	 107			; 0000006bH
  00115	50		 push	 eax
  00116	8d 81 68 01 00
	00		 lea	 eax, DWORD PTR [ecx+360]
  0011c	50		 push	 eax
  0011d	8d 41 0a	 lea	 eax, DWORD PTR [ecx+10]
  00120	56		 push	 esi
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  00127	83 c4 2c	 add	 esp, 44			; 0000002cH
  0012a	85 c0		 test	 eax, eax
  0012c	74 4c		 je	 SHORT $LN2@SelectChar

; 19740: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0012e	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00135	74 43		 je	 SHORT $LN2@SelectChar

; 19741: 					sprintf(tmpMsg, "%s %s /T%d  ", name[i], reSendMsg, index[i]);

  00137	ff 34 bd 00 00
	00 00		 push	 DWORD PTR ?index@@3PAHA[edi*4]
  0013e	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  00144	68 00 00 00 00	 push	 OFFSET ?reSendMsg@@3PADA ; reSendMsg
  00149	ff b5 bc fb ff
	ff		 push	 DWORD PTR tv325[ebp]
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KMPIGJGM@?$CFs?5?$CFs?5?1T?$CFd?5?5@
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 _sprintf

; 19742: 					TalkMode = 1;
; 19743: 					chatStrSendForServer(tmpMsg, 0);

  0015a	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR _tmpMsg$[ebp]
  00160	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?TalkMode@@3HA, 1 ; TalkMode
  0016a	6a 00		 push	 0
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ?chatStrSendForServer@@YAXPADH@Z ; chatStrSendForServer
  00172	83 c4 1c	 add	 esp, 28			; 0000001cH

; 19744: 					DeathTellChannel();

  00175	e8 00 00 00 00	 call	 ?DeathTellChannel@@YAXXZ ; DeathTellChannel
$LN2@SelectChar:

; 19737: 		for (int i = 0; i < CharNum; i++) {

  0017a	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR tv324[ebp]
  00180	47		 inc	 edi
  00181	83 85 bc fb ff
	ff 20		 add	 DWORD PTR tv325[ebp], 32 ; 00000020H
  00188	83 e8 80	 sub	 eax, -128		; ffffff80H
  0018b	83 c6 14	 add	 esi, 20			; 00000014H
  0018e	89 85 b4 fb ff
	ff		 mov	 DWORD PTR tv324[ebp], eax
  00194	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?CharNum@@3HA ; CharNum
  0019a	0f 8c 50 ff ff
	ff		 jl	 $LL4@SelectChar
$LN3@SelectChar:

; 19745: 				}
; 19746: 			}
; 19747: 		}
; 19748: 	}
; 19749: 
; 19750: 	//test//////////////
; 19751: #ifdef _TIMEBAR_FUNCTION
; 19752: 	int Now = timeGetTime();
; 19753: 	Now -= StartTime;
; 19754: 	int rsut = SetTimeBarPos(timBarIdent, Now / 1000);
; 19755: 	if (rsut == 1)
; 19756: 		StartTime += 50000;
; 19757: 	else if (rsut == -1) {
; 19758: 		DeathAction(pTimeBarWnd);
; 19759: 		pTimeBarWnd = NULL;
; 19760: 	}
; 19761: 
; 19762: #endif
; 19763: 	////////////////////
; 19764: }

  001a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a3	5f		 pop	 edi
  001a4	33 cd		 xor	 ecx, ebp
  001a6	5e		 pop	 esi
  001a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ac	8b e5		 mov	 esp, ebp
  001ae	5d		 pop	 ebp
  001af	8b e3		 mov	 esp, ebx
  001b1	5b		 pop	 ebx
  001b2	c3		 ret	 0
?SelectChar@@YAXXZ ENDP					; SelectChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitSelectChar@@YAXPADH@Z
_TEXT	SEGMENT
_name1$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
_endFlag$ = 12						; size = 4
?InitSelectChar@@YAXPADH@Z PROC				; InitSelectChar, COMDAT

; 19686: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 19687: 	int turn, level;
; 19688: 	char name1[32];
; 19689: 	if (MultiTells == TRUE)

  00010	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?MultiTells@@3HA, 1 ; MultiTells
  00017	53		 push	 ebx
  00018	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  0001b	75 05		 jne	 SHORT $LN2@InitSelect

; 19690: 		DeathTellChannel();

  0001d	e8 00 00 00 00	 call	 ?DeathTellChannel@@YAXXZ ; DeathTellChannel
$LN2@InitSelect:

; 19691: 
; 19692: 	if (!endFlag) {

  00022	83 7d 0c 00	 cmp	 DWORD PTR _endFlag$[ebp], 0
  00026	0f 85 a5 00 00
	00		 jne	 $LN3@InitSelect

; 19693: #ifndef _CHANNEL_MODIFY
; 19694: 		index[CharNum] = getIntegerToken(msg, '|', 2);
; 19695: 		turn = getIntegerToken(msg, '|', 3);
; 19696: 		level = getIntegerToken(msg, '|', 4);
; 19697: 		getStringToken(msg, '|', 5, sizeof(name[CharNum]) - 1, name[CharNum]);
; 19698: 		getStringToken(msg, '|', 6, sizeof(name1) - 1, name1);
; 19699: #else
; 19700: 		index[CharNum] = getIntegerToken(msg, '|', 3);

  0002c	56		 push	 esi
  0002d	57		 push	 edi
  0002e	6a 03		 push	 3
  00030	6a 7c		 push	 124			; 0000007cH
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ?getIntegerToken@@YAHPADDH@Z ; getIntegerToken
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?CharNum@@3HA ; CharNum

; 19701: 		turn = getIntegerToken(msg, '|', 4);

  0003e	6a 04		 push	 4
  00040	6a 7c		 push	 124			; 0000007cH
  00042	53		 push	 ebx
  00043	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?index@@3PAHA[ecx*4], eax
  0004a	e8 00 00 00 00	 call	 ?getIntegerToken@@YAHPADDH@Z ; getIntegerToken

; 19702: 		level = getIntegerToken(msg, '|', 5);

  0004f	6a 05		 push	 5
  00051	6a 7c		 push	 124			; 0000007cH
  00053	53		 push	 ebx
  00054	8b f8		 mov	 edi, eax
  00056	e8 00 00 00 00	 call	 ?getIntegerToken@@YAHPADDH@Z ; getIntegerToken

; 19703: 		getStringToken(msg, '|', 6, sizeof(name[CharNum]) - 1, name[CharNum]);

  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?CharNum@@3HA ; CharNum
  00061	8b f0		 mov	 esi, eax
  00063	c1 e1 05	 shl	 ecx, 5
  00066	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?name@@3PAY0CA@DA ; name
  0006c	51		 push	 ecx
  0006d	6a 1f		 push	 31			; 0000001fH
  0006f	6a 06		 push	 6
  00071	6a 7c		 push	 124			; 0000007cH
  00073	53		 push	 ebx
  00074	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19704: 		getStringToken(msg, '|', 7, sizeof(name1) - 1, name1);

  00079	8d 45 dc	 lea	 eax, DWORD PTR _name1$[ebp]
  0007c	50		 push	 eax
  0007d	6a 1f		 push	 31			; 0000001fH
  0007f	6a 07		 push	 7
  00081	6a 7c		 push	 124			; 0000007cH
  00083	53		 push	 ebx
  00084	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19705: #endif
; 19706: 		sprintf(TellInfo[CharNum], " %15s %15s  %5d  %5d   ", name[CharNum], name1, turn, level);

  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?CharNum@@3HA ; CharNum
  0008f	8d 45 dc	 lea	 eax, DWORD PTR _name1$[ebp]
  00092	83 c4 4c	 add	 esp, 76			; 0000004cH
  00095	56		 push	 esi
  00096	57		 push	 edi
  00097	50		 push	 eax
  00098	8b c1		 mov	 eax, ecx
  0009a	c1 e1 07	 shl	 ecx, 7
  0009d	c1 e0 05	 shl	 eax, 5
  000a0	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?TellInfo@@3PAY0IA@DA ; TellInfo
  000a6	05 00 00 00 00	 add	 eax, OFFSET ?name@@3PAY0CA@DA ; name
  000ab	50		 push	 eax
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CNEPNBEM@?5?$CF15s?5?$CF15s?5?5?$CF5d?5?5?$CF5d?5?5?5@
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 _sprintf
  000b7	83 c4 18	 add	 esp, 24			; 00000018H

; 19707: 		CharNum++;

  000ba	ff 05 00 00 00
	00		 inc	 DWORD PTR ?CharNum@@3HA	; CharNum
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx

; 19714: #endif
; 19715: 		MultiTells = TRUE;
; 19716: 	}
; 19717: 	//test//////////////
; 19718: #ifdef _TIMEBAR_FUNCTION
; 19719: 	StartTime = timeGetTime();
; 19720: 	timBarIdent = SetTimeBar("aaaaaa", 50);
; 19721: #endif
; 19722: 	//////////////////
; 19723: }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	33 cd		 xor	 ecx, ebp
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
$LN3@InitSelect:

; 19708: 	}
; 19709: 	else {
; 19710: #ifndef _CHANNEL_MODIFY
; 19711: 		getStringToken(msg, '|', 2, sizeof(reSendMsg) - 1, reSendMsg);
; 19712: #else
; 19713: 		getStringToken(msg, '|', 3, sizeof(reSendMsg) - 1, reSendMsg);

  000d1	68 00 00 00 00	 push	 OFFSET ?reSendMsg@@3PADA ; reSendMsg
  000d6	68 03 01 00 00	 push	 259			; 00000103H
  000db	6a 03		 push	 3
  000dd	6a 7c		 push	 124			; 0000007cH
  000df	53		 push	 ebx
  000e0	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19714: #endif
; 19715: 		MultiTells = TRUE;
; 19716: 	}
; 19717: 	//test//////////////
; 19718: #ifdef _TIMEBAR_FUNCTION
; 19719: 	StartTime = timeGetTime();
; 19720: 	timBarIdent = SetTimeBar("aaaaaa", 50);
; 19721: #endif
; 19722: 	//////////////////
; 19723: }

  000e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e8	83 c4 14	 add	 esp, 20			; 00000014H
  000eb	33 cd		 xor	 ecx, ebp
  000ed	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?MultiTells@@3HA, 1 ; MultiTells
  000f7	5b		 pop	 ebx
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
?InitSelectChar@@YAXPADH@Z ENDP				; InitSelectChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?closeBankman@@YAXXZ
_TEXT	SEGMENT
?closeBankman@@YAXXZ PROC				; closeBankman, COMDAT

; 19509: 
; 19510: 	MenuToggleFlag ^= JOY_B;

  00000	81 35 00 00 00
	00 00 01 00 00	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 256 ; MenuToggleFlag, 00000100H

; 19511: 	play_se(203, 320, 240);

  0000a	68 f0 00 00 00	 push	 240			; 000000f0H
  0000f	68 40 01 00 00	 push	 320			; 00000140H
  00014	68 cb 00 00 00	 push	 203			; 000000cbH
  00019	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 19512: 	DeathAction(pActMenuWnd5);

  0001e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A ; pActMenuWnd5
  00024	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 19513: 	pActMenuWnd5 = NULL;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A, 0 ; pActMenuWnd5

; 19514: 
; 19515: }

  00036	c3		 ret	 0
?closeBankman@@YAXXZ ENDP				; closeBankman
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?BankmanInit@@YAXPAD@Z
_TEXT	SEGMENT
_token1$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
?BankmanInit@@YAXPAD@Z PROC				; BankmanInit, COMDAT

; 19495: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]

; 19496: 	char token1[1024];
; 19497: 	getStringToken(data, '|', 3, sizeof(token1) - 1, token1);

  00016	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _token1$[ebp]
  0001c	51		 push	 ecx
  0001d	68 ff 03 00 00	 push	 1023			; 000003ffH
  00022	6a 03		 push	 3
  00024	6a 7c		 push	 124			; 0000007cH
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19498: 
; 19499: 	bankGold = atoi(token1);

  0002c	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _token1$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _atoi

; 19500: 	cashGold = pc.gold;

  00038	8b 0d 60 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+96

; 19501: 	totalGold = bankGold + cashGold;
; 19502: 
; 19503: 	MenuToggleFlag = JOY_B;
; 19504: 	DeathAction(pActMenuWnd5);

  0003e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A ; pActMenuWnd5
  00044	a3 00 00 00 00	 mov	 DWORD PTR ?bankGold@@3HA, eax
  00049	03 c1		 add	 eax, ecx
  0004b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?cashGold@@3HA, ecx
  00051	a3 00 00 00 00	 mov	 DWORD PTR ?totalGold@@3HA, eax
  00056	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 256 ; MenuToggleFlag, 00000100H
  00060	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19505: 	pActMenuWnd5 = NULL;
; 19506: }

  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006b	33 cd		 xor	 ecx, ebp
  0006d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A, 0 ; pActMenuWnd5
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?BankmanInit@@YAXPAD@Z ENDP				; BankmanInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?tradeInit@@YAXXZ
_TEXT	SEGMENT
?tradeInit@@YAXXZ PROC					; tradeInit, COMDAT

; 19454: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 19455: 	//åå§åæ¶æ¸ç©ºAction
; 19456: 	DeathAction(SecondTradeWnd);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A ; SecondTradeWnd
  00006	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19457: 	SecondTradeWnd = NULL;
; 19458: 	DeathAction(SecondActPet);

  0000b	ff 35 00 00 00
	00		 push	 DWORD PTR ?SecondActPet@@3PAUaction@@A
  00011	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A, 0 ; SecondTradeWnd
  0001b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19459: 	SecondActPet = NULL;
; 19460: 	DeathAction(TradeTalkWnd);

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?TradeTalkWnd@@3PAUaction@@A ; TradeTalkWnd
  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondActPet@@3PAUaction@@A, 0
  00030	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19461: 	TradeTalkWnd = NULL;
; 19462: 	//Terry add 2003/11/25
; 19463: 	g_bTradesystemOpen = false;
; 19464: 	//end
; 19465: #endif
; 19466: 	DeathAction(pActMenuWnd4);

  00035	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A ; pActMenuWnd4
  0003b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TradeTalkWnd@@3PAUaction@@A, 0 ; TradeTalkWnd
  00045	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?g_bTradesystemOpen@@3_NA, 0 ; g_bTradesystemOpen
  0004c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19467: 	// äº¤æè§çªåå§åæ¶å°focusè¿ç»chat
; 19468: 	GetKeyInputFocus(&MyChatBuffer);

  00051	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  00056	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 19469: 	Tradeflag = false;
; 19470: 	pActMenuWnd4 = NULL;
; 19471: 	DeathAction(pActPet3);

  0005b	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet3@@3PAUaction@@A
  00061	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Tradeflag@@3_NA, 0 ; Tradeflag
  00068	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A, 0 ; pActMenuWnd4
  00072	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19472: 	pActPet3 = NULL;
; 19473: 	DeathAction(pActPet4);

  00077	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet4@@3PAUaction@@A
  0007d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet3@@3PAUaction@@A, 0
  00087	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19474: 	pActPet4 = NULL;
; 19475: 	DeathAction(pActPet5);

  0008c	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet5@@3PAUaction@@A
  00092	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet4@@3PAUaction@@A, 0
  0009c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 19476: 	pActPet5 = NULL;
; 19477: 	for (int i = 0; i <= 6; i++)
; 19478: 		showindex[i] = 0;
; 19479: 	strcpy(opp_sockfd, "-1");

  000a1	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR ??_C@_02PGHGPEOM@?91@
  000a8	0f 57 c0	 xorps	 xmm0, xmm0
  000ab	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02PGHGPEOM@?91@+2
  000b1	83 c4 20	 add	 esp, 32			; 00000020H

; 19480: 	strcpy(opp_name, "");

  000b4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  000b9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet5@@3PAUaction@@A, 0
  000c3	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?showindex@@3PAHA, xmm0
  000ca	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?showindex@@3PAHA+16, 0
  000d4	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?showindex@@3PAHA+20, 0
  000de	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?showindex@@3PAHA+24, 0
  000e8	66 89 15 00 00
	00 00		 mov	 WORD PTR ?opp_sockfd@@3PADA, dx
  000ef	88 0d 02 00 00
	00		 mov	 BYTE PTR ?opp_sockfd@@3PADA+2, cl
  000f5	a2 00 00 00 00	 mov	 BYTE PTR ?opp_name@@3PADA, al

; 19481: 	tradePetIndex = 0;

  000fa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradePetIndex@@3HA, 0

; 19482: 	strcpy(tradepetindexget, "-1");

  00104	66 89 15 00 00
	00 00		 mov	 WORD PTR ?tradepetindexget@@3PADA, dx
  0010b	88 0d 02 00 00
	00		 mov	 BYTE PTR ?tradepetindexget@@3PADA+2, cl

; 19483: 	mine_itemindex[0] = -1;

  00111	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mine_itemindex@@3PAHA, -1

; 19484: 	mine_itemindex[1] = -1;

  0011b	c7 05 04 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mine_itemindex@@3PAHA+4, -1

; 19485: 
; 19486: 
; 19487: 	tradeWndDropGoldSend = 0;

  00125	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldSend@@3HA, 0

; 19488: 	tradeWndDropGoldGet = 0;

  0012f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldGet@@3HA, 0

; 19489: 	tradeWndDropGold = 0;

  00139	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGold@@3HA, 0

; 19490: 	strcpy(opp_item[0].itemindex, "-1");

  00143	66 89 15 80 06
	00 00		 mov	 WORD PTR ?opp_item@@3PAUshowitem@@A+1664, dx
  0014a	88 0d 82 06 00
	00		 mov	 BYTE PTR ?opp_item@@3PAUshowitem@@A+1666, cl

; 19491: 	strcpy(opp_item[1].itemindex, "-1");

  00150	66 89 15 00 0e
	00 00		 mov	 WORD PTR ?opp_item@@3PAUshowitem@@A+3584, dx
  00157	88 0d 02 0e 00
	00		 mov	 BYTE PTR ?opp_item@@3PAUshowitem@@A+3586, cl

; 19492: }

  0015d	c3		 ret	 0
?tradeInit@@YAXXZ ENDP					; tradeInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?MakeAnimDisp@@YAPAUaction@@HHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_sprNo$ = 16						; size = 4
_mode$ = 20						; size = 4
?MakeAnimDisp@@YAPAUaction@@HHHH@Z PROC			; MakeAnimDisp, COMDAT

; 2126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2127 : 	ACTION *pAct;
; 2128 : 
; 2129 : 	// ?????????îî¾
; 2130 : 	pAct = GetAction(PRIO_JIKI, NULL);

  00004	6a 00		 push	 0
  00006	6a 03		 push	 3
  00008	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0000d	8b f0		 mov	 esi, eax
  0000f	83 c4 08	 add	 esp, 8

; 2131 : 	if (pAct == NULL) return NULL;

  00012	85 f6		 test	 esi, esi
  00014	75 03		 jne	 SHORT $LN2@MakeAnimDi
  00016	5e		 pop	 esi

; 2163 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN2@MakeAnimDi:

; 2132 : 
; 2133 : 	// î¯???
; 2134 : 	pAct->func = AnimDisp;
; 2135 : 	// ???îî??
; 2136 : 	pAct->atr |= ACT_ATR_HIT;
; 2137 : 	pAct->anim_chr_no = sprNo;

  00019	8b 45 10	 mov	 eax, DWORD PTR _sprNo$[ebp]
  0001c	83 8e a4 00 00
	00 04		 or	 DWORD PTR [esi+164], 4
  00023	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax

; 2138 : 	// î®?î±?
; 2139 : 	pAct->anim_no = ANIM_STAND;
; 2140 : 	// ?????????( ??? )( ??????? )
; 2141 : 	pAct->anim_ang = 1;
; 2142 : 	/* î¸î?îî */
; 2143 : 	pAct->dispPrio = DISP_PRIO_BOX3;
; 2144 : 	/* ???îº */
; 2145 : 	pAct->x = x;

  00029	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002c	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 2146 : 	pAct->y = y;

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00032	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 2147 : 	// ???îî
; 2148 : 	pAct->actNo = mode;

  00035	8b 45 14	 mov	 eax, DWORD PTR _mode$[ebp]
  00038	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ?AnimDisp@@YAXPAUaction@@@Z ; AnimDisp
  0003f	c7 86 4c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+332], 3
  00049	c7 86 54 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+340], 1
  00053	c6 46 15 6f	 mov	 BYTE PTR [esi+21], 111	; 0000006fH
  00057	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax

; 2149 : 	// ??????????
; 2150 : 	if (pAct->actNo == ANIM_DISP_PET) {

  0005d	85 c0		 test	 eax, eax
  0005f	75 17		 jne	 SHORT $LN3@MakeAnimDi

; 2158 : 		}
; 2159 : 	// ???????
; 2160 : 	pattern(pAct, ANM_NOMAL_SPD, ANM_LOOP);

  00061	50		 push	 eax
  00062	50		 push	 eax
  00063	56		 push	 esi
  00064	c7 46 2c 0c 00
	00 00		 mov	 DWORD PTR [esi+44], 12	; 0000000cH
  0006b	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2161 : 
; 2162 : 	return pAct;

  00073	8b c6		 mov	 eax, esi
  00075	5e		 pop	 esi

; 2163 : }

  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
$LN3@MakeAnimDi:

; 2151 : 		// ???????????
; 2152 : 		pAct->dy = 12;
; 2153 : 	}
; 2154 : 	else
; 2155 : 		if (pAct->actNo == ANIM_DISP_PET_RECIEVE) {

  00078	83 f8 02	 cmp	 eax, 2
  0007b	75 11		 jne	 SHORT $LN5@MakeAnimDi

; 2156 : 			pAct->dy = 1;

  0007d	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1

; 2157 : 			pAct->spd = 30;

  00084	c7 86 34 01 00
	00 1e 00 00 00	 mov	 DWORD PTR [esi+308], 30	; 0000001eH
$LN5@MakeAnimDi:

; 2158 : 		}
; 2159 : 	// ???????
; 2160 : 	pattern(pAct, ANM_NOMAL_SPD, ANM_LOOP);

  0008e	6a 00		 push	 0
  00090	6a 00		 push	 0
  00092	56		 push	 esi
  00093	e8 00 00 00 00	 call	 ?pattern@@YAHPAUaction@@HH@Z ; pattern
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2161 : 
; 2162 : 	return pAct;

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi

; 2163 : }

  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
?MakeAnimDisp@@YAPAUaction@@HHHH@Z ENDP			; MakeAnimDisp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?SaveAlbum@@YAHH@Z
_TEXT	SEGMENT
_no$ = 8						; size = 4
?SaveAlbum@@YAHH@Z PROC					; SaveAlbum, COMDAT

; 2340 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2341 : 	FILE	*fp;
; 2342 : 
; 2343 : #if defined(__ALBUM_47)
; 2344 : 	BOOL	ret = FALSE;
; 2345 : 	if (0 <= no && no < MAX_PET_TBL) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _no$[ebp]
  00008	33 f6		 xor	 esi, esi
  0000a	85 ff		 test	 edi, edi
  0000c	0f 88 cc 00 00
	00		 js	 $LN10@SaveAlbum
  00012	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?MAX_PET_TBL@@3HA ; MAX_PET_TBL
  00018	0f 8d c0 00 00
	00		 jge	 $LN10@SaveAlbum

; 2346 : 		if (fp = fopen(ALBUM_FILE_NAME_48, "r+b")) {

  0001e	53		 push	 ebx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_03HMFOOINA@r?$CLb@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DHMHBGOC@data?2album_47?4dat@
  00029	e8 00 00 00 00	 call	 _fopen
  0002e	83 c4 08	 add	 esp, 8
  00031	8b d8		 mov	 ebx, eax
  00033	56		 push	 esi
  00034	85 db		 test	 ebx, ebx
  00036	0f 84 8b 00 00
	00		 je	 $LN3@SaveAlbum

; 2347 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))

  0003c	69 0d 00 00 00
	00 30 b2 00 00	 imul	 ecx, DWORD PTR ?AlbumIdCnt@@3HA, 45616 ; AlbumIdCnt
  00046	51		 push	 ecx
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 _fseek
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	85 c0		 test	 eax, eax
  00052	74 17		 je	 SHORT $LN5@SaveAlbum

; 2348 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);

  00054	56		 push	 esi
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KFFLPIAB@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@
  0005f	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
$LN5@SaveAlbum:

; 2349 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))

  0006b	8d 3c bf	 lea	 edi, DWORD PTR [edi+edi*4]
  0006e	c1 e7 04	 shl	 edi, 4
  00071	6a 01		 push	 1
  00073	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00076	50		 push	 eax
  00077	53		 push	 ebx
  00078	e8 00 00 00 00	 call	 _fseek
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	85 c0		 test	 eax, eax
  00082	74 18		 je	 SHORT $LN6@SaveAlbum

; 2350 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);

  00084	6a 00		 push	 0
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IOHGKLMC@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@
  00090	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
$LN6@SaveAlbum:

; 2351 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)

  0009c	53		 push	 ebx
  0009d	6a 01		 push	 1
  0009f	8d 87 00 00 00
	00		 lea	 eax, DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edi]
  000a5	6a 50		 push	 80			; 00000050H
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _fwrite
  000ad	b9 01 00 00 00	 mov	 ecx, 1
  000b2	3b c1		 cmp	 eax, ecx

; 2352 : 				ret = TRUE;
; 2353 : 			fclose(fp);

  000b4	53		 push	 ebx
  000b5	0f 43 f1	 cmovae	 esi, ecx
  000b8	e8 00 00 00 00	 call	 _fclose
  000bd	83 c4 14	 add	 esp, 20			; 00000014H

; 2357 : 	}
; 2358 : 	return ret;
; 2359 : 
; 2360 : #elif defined(__ALBUM_46)
; 2361 : 	BOOL	ret = FALSE;
; 2362 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2363 : 		if (fp = fopen(ALBUM_FILE_NAME_47, "r+b")) {
; 2364 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2365 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2366 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2367 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2368 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2369 : 				ret = TRUE;
; 2370 : 			fclose(fp);
; 2371 : 		}
; 2372 : 		else
; 2373 : 			MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2374 : 	}
; 2375 : 	return ret;
; 2376 : 
; 2377 : #elif defined(__ALBUM_45)
; 2378 : 	BOOL	ret = FALSE;
; 2379 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2380 : 		if (fp = fopen(ALBUM_FILE_NAME_46, "r+b")) {
; 2381 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2382 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2383 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2384 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2385 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2386 : 				ret = TRUE;
; 2387 : 			fclose(fp);
; 2388 : 		}
; 2389 : 		else
; 2390 : 			MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2391 : 	}
; 2392 : 	return ret;
; 2393 : 
; 2394 : #elif defined(__ALBUM_44)
; 2395 : 	BOOL	ret = FALSE;
; 2396 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2397 : 		if (fp = fopen(ALBUM_FILE_NAME_45, "r+b")) {
; 2398 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2399 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2400 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2401 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2402 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2403 : 				ret = TRUE;
; 2404 : 			fclose(fp);
; 2405 : 		}
; 2406 : 		else
; 2407 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2408 : 	}
; 2409 : 	return ret;
; 2410 : 
; 2411 : #elif defined(__ALBUM_43)
; 2412 : 	BOOL	ret = FALSE;
; 2413 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2414 : 		if (fp = fopen(ALBUM_FILE_NAME_44, "r+b")) {
; 2415 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2416 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2417 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2418 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2419 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2420 : 				ret = TRUE;
; 2421 : 			fclose(fp);
; 2422 : 		}
; 2423 : 		else
; 2424 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2425 : 	}
; 2426 : 	return ret;
; 2427 : 
; 2428 : #elif defined(__ALBUM_42)
; 2429 : 	BOOL	ret = FALSE;
; 2430 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2431 : 		if (fp = fopen(ALBUM_FILE_NAME_43, "r+b")) {
; 2432 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2433 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2434 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2435 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2436 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2437 : 				ret = TRUE;
; 2438 : 			fclose(fp);
; 2439 : 		}
; 2440 : 		else
; 2441 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2442 : 	}
; 2443 : 	return ret;
; 2444 : 
; 2445 : #elif defined(__ALBUM_41)
; 2446 : 	BOOL	ret = FALSE;
; 2447 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2448 : 		if (fp = fopen(ALBUM_FILE_NAME_42, "r+b")) {
; 2449 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2450 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2451 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2452 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2453 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2454 : 				ret = TRUE;
; 2455 : 			fclose(fp);
; 2456 : 		}
; 2457 : 		else
; 2458 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2459 : 	}
; 2460 : 	return ret;
; 2461 : 
; 2462 : #elif defined(__ALBUM_40)
; 2463 : 	BOOL	ret = FALSE;
; 2464 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2465 : 		if (fp = fopen(ALBUM_FILE_NAME_41, "r+b")) {
; 2466 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2467 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2468 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2469 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2470 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2471 : 				ret = TRUE;
; 2472 : 			fclose(fp);
; 2473 : 		}
; 2474 : 		else
; 2475 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2476 : 	}
; 2477 : 	return ret;
; 2478 : 
; 2479 : #elif defined(__ALBUM_39)
; 2480 : 	BOOL	ret = FALSE;
; 2481 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2482 : 		if (fp = fopen(ALBUM_FILE_NAME_40, "r+b")) {
; 2483 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2484 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2485 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2486 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2487 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2488 : 				ret = TRUE;
; 2489 : 			fclose(fp);
; 2490 : 		}
; 2491 : 		else
; 2492 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2493 : 	}
; 2494 : 	return ret;
; 2495 : 
; 2496 : #elif defined(__ALBUM_38)
; 2497 : 	BOOL	ret = FALSE;
; 2498 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2499 : 		if (fp = fopen(ALBUM_FILE_NAME_39, "r+b")) {
; 2500 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2501 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2502 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2503 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2504 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2505 : 				ret = TRUE;
; 2506 : 			fclose(fp);
; 2507 : 		}
; 2508 : 		else
; 2509 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2510 : 	}
; 2511 : 	return ret;
; 2512 : 
; 2513 : #elif defined(__ALBUM_37)
; 2514 : 	BOOL	ret = FALSE;
; 2515 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2516 : 		if (fp = fopen(ALBUM_FILE_NAME_38, "r+b")) {
; 2517 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2518 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2519 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2520 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2521 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2522 : 				ret = TRUE;
; 2523 : 			fclose(fp);
; 2524 : 		}
; 2525 : 		else
; 2526 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2527 : 	}
; 2528 : 	return ret;
; 2529 : 
; 2530 : #elif defined(__ALBUM_36)
; 2531 : 	BOOL	ret = FALSE;
; 2532 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2533 : 		if (fp = fopen(ALBUM_FILE_NAME_37, "r+b")) {
; 2534 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2535 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2536 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2537 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2538 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2539 : 				ret = TRUE;
; 2540 : 			fclose(fp);
; 2541 : 		}
; 2542 : 		else
; 2543 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2544 : 	}
; 2545 : 	return ret;
; 2546 : 
; 2547 : #elif defined(__ALBUM_35)
; 2548 : 	BOOL	ret = FALSE;
; 2549 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2550 : 		if (fp = fopen(ALBUM_FILE_NAME_36, "r+b")) {
; 2551 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2552 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2553 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2554 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2555 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2556 : 				ret = TRUE;
; 2557 : 			fclose(fp);
; 2558 : 		}
; 2559 : 		else
; 2560 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2561 : 	}
; 2562 : 	return ret;
; 2563 : #elif defined(__ALBUM_34)
; 2564 : 	BOOL	ret = FALSE;
; 2565 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2566 : 		if (fp = fopen(ALBUM_FILE_NAME_35, "r+b")) {
; 2567 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2568 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2569 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2570 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2571 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2572 : 				ret = TRUE;
; 2573 : 			fclose(fp);
; 2574 : 		}
; 2575 : 		else
; 2576 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2577 : 	}
; 2578 : 	return ret;
; 2579 : #elif defined(__ALBUM_33)
; 2580 : 	BOOL	ret = FALSE;
; 2581 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2582 : 		if (fp = fopen(ALBUM_FILE_NAME_34, "r+b")) {
; 2583 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2584 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2585 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2586 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2587 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2588 : 				ret = TRUE;
; 2589 : 			fclose(fp);
; 2590 : 		}
; 2591 : 		else
; 2592 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2593 : 	}
; 2594 : 	return ret;
; 2595 : #elif defined(__ALBUM_32)
; 2596 : 	BOOL	ret = FALSE;
; 2597 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2598 : 		if (fp = fopen(ALBUM_FILE_NAME_33, "r+b")) {
; 2599 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2600 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2601 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2602 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2603 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2604 : 				ret = TRUE;
; 2605 : 			fclose(fp);
; 2606 : 		}
; 2607 : 		else
; 2608 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2609 : 	}
; 2610 : 	return ret;
; 2611 : #else
; 2612 : 	// ????????????
; 2613 : 	if ((fp = fopen(ALBUM_FILE_NAME, "r+b")) == NULL) {
; 2614 : #ifdef _STONDEBUG_		
; 2615 : 		MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2616 : #endif
; 2617 : 		return FALSE;
; 2618 : 	}
; 2619 : 	// îî·?????î¤î´??
; 2620 : 	for (int i = 0; i < AlbumIdCnt; i++) {
; 2621 : 		// ???????î¤??î´???
; 2622 : 		fseek(fp, 16, SEEK_CUR);
; 2623 : 		fseek(fp, sizeof(PET_ALBUM) * MAX_PET_KIND, SEEK_CUR);
; 2624 : 	}
; 2625 : 	// ??î¤??î´???
; 2626 : 	fseek(fp, 16, SEEK_CUR);
; 2627 : 	// ??????????î±???î´??
; 2628 : 	fseek(fp, sizeof(PET_ALBUM) * no, SEEK_CUR);
; 2629 : 
; 2630 : 	// ???????
; 2631 : 	if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) < 1) {
; 2632 : 
; 2633 : #ifdef _STONDEBUG_		
; 2634 : 		MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2635 : #endif
; 2636 : 		fclose(fp);// ????????
; 2637 : 		return FALSE;
; 2638 : 	}
; 2639 : 	// ????????
; 2640 : 	fclose(fp);
; 2641 : 
; 2642 : 	return TRUE;
; 2643 : #endif
; 2644 : }

  000c0	8b c6		 mov	 eax, esi
  000c2	5b		 pop	 ebx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
$LN3@SaveAlbum:

; 2354 : 		}
; 2355 : 		else
; 2356 : 			MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_04IJNKKJEO@?H?$KO?$MA?N@
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@JHGNJKID@?$LO?Y?$LJ?$PM?5?$LF?$KF?$MA?L?E?M?$LI?$KG?5?$MA?z?$MA?e?G?O?$LE?B?$LF?$KF?5?$LN?G?F?P?G?O@
  000d1	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  000dd	5b		 pop	 ebx
$LN10@SaveAlbum:

; 2357 : 	}
; 2358 : 	return ret;
; 2359 : 
; 2360 : #elif defined(__ALBUM_46)
; 2361 : 	BOOL	ret = FALSE;
; 2362 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2363 : 		if (fp = fopen(ALBUM_FILE_NAME_47, "r+b")) {
; 2364 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2365 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2366 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2367 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2368 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2369 : 				ret = TRUE;
; 2370 : 			fclose(fp);
; 2371 : 		}
; 2372 : 		else
; 2373 : 			MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2374 : 	}
; 2375 : 	return ret;
; 2376 : 
; 2377 : #elif defined(__ALBUM_45)
; 2378 : 	BOOL	ret = FALSE;
; 2379 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2380 : 		if (fp = fopen(ALBUM_FILE_NAME_46, "r+b")) {
; 2381 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2382 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2383 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2384 : 				MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2385 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2386 : 				ret = TRUE;
; 2387 : 			fclose(fp);
; 2388 : 		}
; 2389 : 		else
; 2390 : 			MessageBox(hWnd, "ì¨ë² ë°ì´í°ë¥¼ ì ì¥íëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK);
; 2391 : 	}
; 2392 : 	return ret;
; 2393 : 
; 2394 : #elif defined(__ALBUM_44)
; 2395 : 	BOOL	ret = FALSE;
; 2396 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2397 : 		if (fp = fopen(ALBUM_FILE_NAME_45, "r+b")) {
; 2398 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2399 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2400 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2401 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2402 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2403 : 				ret = TRUE;
; 2404 : 			fclose(fp);
; 2405 : 		}
; 2406 : 		else
; 2407 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2408 : 	}
; 2409 : 	return ret;
; 2410 : 
; 2411 : #elif defined(__ALBUM_43)
; 2412 : 	BOOL	ret = FALSE;
; 2413 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2414 : 		if (fp = fopen(ALBUM_FILE_NAME_44, "r+b")) {
; 2415 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2416 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2417 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2418 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2419 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2420 : 				ret = TRUE;
; 2421 : 			fclose(fp);
; 2422 : 		}
; 2423 : 		else
; 2424 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2425 : 	}
; 2426 : 	return ret;
; 2427 : 
; 2428 : #elif defined(__ALBUM_42)
; 2429 : 	BOOL	ret = FALSE;
; 2430 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2431 : 		if (fp = fopen(ALBUM_FILE_NAME_43, "r+b")) {
; 2432 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2433 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2434 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2435 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2436 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2437 : 				ret = TRUE;
; 2438 : 			fclose(fp);
; 2439 : 		}
; 2440 : 		else
; 2441 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2442 : 	}
; 2443 : 	return ret;
; 2444 : 
; 2445 : #elif defined(__ALBUM_41)
; 2446 : 	BOOL	ret = FALSE;
; 2447 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2448 : 		if (fp = fopen(ALBUM_FILE_NAME_42, "r+b")) {
; 2449 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2450 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2451 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2452 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2453 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2454 : 				ret = TRUE;
; 2455 : 			fclose(fp);
; 2456 : 		}
; 2457 : 		else
; 2458 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2459 : 	}
; 2460 : 	return ret;
; 2461 : 
; 2462 : #elif defined(__ALBUM_40)
; 2463 : 	BOOL	ret = FALSE;
; 2464 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2465 : 		if (fp = fopen(ALBUM_FILE_NAME_41, "r+b")) {
; 2466 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2467 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2468 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2469 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2470 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2471 : 				ret = TRUE;
; 2472 : 			fclose(fp);
; 2473 : 		}
; 2474 : 		else
; 2475 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2476 : 	}
; 2477 : 	return ret;
; 2478 : 
; 2479 : #elif defined(__ALBUM_39)
; 2480 : 	BOOL	ret = FALSE;
; 2481 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2482 : 		if (fp = fopen(ALBUM_FILE_NAME_40, "r+b")) {
; 2483 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2484 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2485 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2486 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2487 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2488 : 				ret = TRUE;
; 2489 : 			fclose(fp);
; 2490 : 		}
; 2491 : 		else
; 2492 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2493 : 	}
; 2494 : 	return ret;
; 2495 : 
; 2496 : #elif defined(__ALBUM_38)
; 2497 : 	BOOL	ret = FALSE;
; 2498 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2499 : 		if (fp = fopen(ALBUM_FILE_NAME_39, "r+b")) {
; 2500 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2501 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2502 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2503 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2504 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2505 : 				ret = TRUE;
; 2506 : 			fclose(fp);
; 2507 : 		}
; 2508 : 		else
; 2509 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2510 : 	}
; 2511 : 	return ret;
; 2512 : 
; 2513 : #elif defined(__ALBUM_37)
; 2514 : 	BOOL	ret = FALSE;
; 2515 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2516 : 		if (fp = fopen(ALBUM_FILE_NAME_38, "r+b")) {
; 2517 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2518 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2519 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2520 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2521 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2522 : 				ret = TRUE;
; 2523 : 			fclose(fp);
; 2524 : 		}
; 2525 : 		else
; 2526 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2527 : 	}
; 2528 : 	return ret;
; 2529 : 
; 2530 : #elif defined(__ALBUM_36)
; 2531 : 	BOOL	ret = FALSE;
; 2532 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2533 : 		if (fp = fopen(ALBUM_FILE_NAME_37, "r+b")) {
; 2534 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2535 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2536 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2537 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2538 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2539 : 				ret = TRUE;
; 2540 : 			fclose(fp);
; 2541 : 		}
; 2542 : 		else
; 2543 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2544 : 	}
; 2545 : 	return ret;
; 2546 : 
; 2547 : #elif defined(__ALBUM_35)
; 2548 : 	BOOL	ret = FALSE;
; 2549 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2550 : 		if (fp = fopen(ALBUM_FILE_NAME_36, "r+b")) {
; 2551 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2552 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2553 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2554 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2555 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2556 : 				ret = TRUE;
; 2557 : 			fclose(fp);
; 2558 : 		}
; 2559 : 		else
; 2560 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2561 : 	}
; 2562 : 	return ret;
; 2563 : #elif defined(__ALBUM_34)
; 2564 : 	BOOL	ret = FALSE;
; 2565 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2566 : 		if (fp = fopen(ALBUM_FILE_NAME_35, "r+b")) {
; 2567 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2568 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2569 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2570 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2571 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2572 : 				ret = TRUE;
; 2573 : 			fclose(fp);
; 2574 : 		}
; 2575 : 		else
; 2576 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2577 : 	}
; 2578 : 	return ret;
; 2579 : #elif defined(__ALBUM_33)
; 2580 : 	BOOL	ret = FALSE;
; 2581 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2582 : 		if (fp = fopen(ALBUM_FILE_NAME_34, "r+b")) {
; 2583 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2584 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2585 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2586 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2587 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2588 : 				ret = TRUE;
; 2589 : 			fclose(fp);
; 2590 : 		}
; 2591 : 		else
; 2592 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2593 : 	}
; 2594 : 	return ret;
; 2595 : #elif defined(__ALBUM_32)
; 2596 : 	BOOL	ret = FALSE;
; 2597 : 	if (0 <= no && no < MAX_PET_TBL) {
; 2598 : 		if (fp = fopen(ALBUM_FILE_NAME_33, "r+b")) {
; 2599 : 			if (0 != fseek(fp, (16 + sizeof(PET_ALBUM)*MAX_PET_KIND)*AlbumIdCnt, SEEK_SET))
; 2600 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2601 : 			if (0 != fseek(fp, 16 + sizeof(PET_ALBUM)*no, SEEK_CUR))
; 2602 : 				MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2603 : 			if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) >= 1)
; 2604 : 				ret = TRUE;
; 2605 : 			fclose(fp);
; 2606 : 		}
; 2607 : 		else
; 2608 : 			MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2609 : 	}
; 2610 : 	return ret;
; 2611 : #else
; 2612 : 	// ????????????
; 2613 : 	if ((fp = fopen(ALBUM_FILE_NAME, "r+b")) == NULL) {
; 2614 : #ifdef _STONDEBUG_		
; 2615 : 		MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2616 : #endif
; 2617 : 		return FALSE;
; 2618 : 	}
; 2619 : 	// îî·?????î¤î´??
; 2620 : 	for (int i = 0; i < AlbumIdCnt; i++) {
; 2621 : 		// ???????î¤??î´???
; 2622 : 		fseek(fp, 16, SEEK_CUR);
; 2623 : 		fseek(fp, sizeof(PET_ALBUM) * MAX_PET_KIND, SEEK_CUR);
; 2624 : 	}
; 2625 : 	// ??î¤??î´???
; 2626 : 	fseek(fp, 16, SEEK_CUR);
; 2627 : 	// ??????????î±???î´??
; 2628 : 	fseek(fp, sizeof(PET_ALBUM) * no, SEEK_CUR);
; 2629 : 
; 2630 : 	// ???????
; 2631 : 	if (fwrite(&PetAlbum[no], sizeof(PET_ALBUM), 1, fp) < 1) {
; 2632 : 
; 2633 : #ifdef _STONDEBUG_		
; 2634 : 		MessageBox(hWnd, "å¨å­ç¸ç°¿èµæå¤±è´¥ï¼ï¼", "íì¸", MB_OK);
; 2635 : #endif
; 2636 : 		fclose(fp);// ????????
; 2637 : 		return FALSE;
; 2638 : 	}
; 2639 : 	// ????????
; 2640 : 	fclose(fp);
; 2641 : 
; 2642 : 	return TRUE;
; 2643 : #endif
; 2644 : }

  000de	5f		 pop	 edi
  000df	8b c6		 mov	 eax, esi
  000e1	5e		 pop	 esi
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
?SaveAlbum@@YAHH@Z ENDP					; SaveAlbum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?LoadAlbum@@YAHXZ
_TEXT	SEGMENT
_id$ = -48						; size = 32
__$ArrayPad$ = -4					; size = 4
?LoadAlbum@@YAHXZ PROC					; LoadAlbum, COMDAT

; 5772 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 5773 : 	char id[32];
; 5774 : 
; 5775 : 	// ?????îî¾
; 5776 : 	extern char szUser[];
; 5777 : 	CopyMemory(id, szUser, 32);

  00023	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?szUser@@3PADA

; 5778 : 	ecb_crypt("f;encor1c", id, 32, DES_DECRYPT);

  0002a	6a 01		 push	 1
  0002c	6a 20		 push	 32			; 00000020H
  0002e	0f 11 45 d0	 movups	 XMMWORD PTR _id$[ebp], xmm0
  00032	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00035	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ?szUser@@3PADA+16
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_09BACHGGGK@f?$DLencor1c@
  00042	0f 11 45 e0	 movups	 XMMWORD PTR _id$[ebp+16], xmm0
  00046	e8 00 00 00 00	 call	 ?ecb_crypt@@YAHPAD0II@Z	; ecb_crypt

; 5779 : 	// î°???î?îî¾
; 5780 : 	id[15] = strlen(id);

  0004b	8d 4d d0	 lea	 ecx, DWORD PTR _id$[ebp]
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL49@LoadAlbum:
  00054	8a 01		 mov	 al, BYTE PTR [ecx]
  00056	41		 inc	 ecx
  00057	84 c0		 test	 al, al
  00059	75 f9		 jne	 SHORT $LL49@LoadAlbum

; 5781 : 
; 5782 : #if defined(__ALBUM_47)
; 5783 : 	if (LoadAlbum_47(id))

  0005b	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0005e	2b ca		 sub	 ecx, edx
  00060	50		 push	 eax
  00061	88 4d df	 mov	 BYTE PTR _id$[ebp+15], cl
  00064	e8 00 00 00 00	 call	 ?LoadAlbum_47@@YAHPAD@Z	; LoadAlbum_47
  00069	83 c4 04	 add	 esp, 4
  0006c	85 c0		 test	 eax, eax
  0006e	0f 85 1b 05 00
	00		 jne	 $LN48@LoadAlbum

; 5784 : 		return TRUE;
; 5785 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_47, MAX_PET_KIND_46))

  00074	68 2b 02 00 00	 push	 555			; 0000022bH
  00079	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PMJLMFEH@data?2album_46?4dat@
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	85 c0		 test	 eax, eax
  0008c	0f 85 fd 04 00
	00		 jne	 $LN48@LoadAlbum

; 5786 : 		return TRUE;
; 5787 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_46, MAX_PET_KIND_45))

  00092	68 29 02 00 00	 push	 553			; 00000229H
  00097	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HKAPLHOJ@data?2album_45?4dat@
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	85 c0		 test	 eax, eax
  000aa	0f 85 df 04 00
	00		 jne	 $LN48@LoadAlbum

; 5788 : 		return TRUE;
; 5789 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_45, MAX_PET_KIND_44))

  000b0	68 27 02 00 00	 push	 551			; 00000227H
  000b5	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBFDGEEM@data?2album_44?4dat@
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	85 c0		 test	 eax, eax
  000c8	0f 85 c1 04 00
	00		 jne	 $LN48@LoadAlbum

; 5790 : 		return TRUE;
; 5791 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_44, MAX_PET_KIND_43))

  000ce	68 25 02 00 00	 push	 549			; 00000225H
  000d3	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KMFGFEPE@data?2album_43?4dat@
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e4	85 c0		 test	 eax, eax
  000e6	0f 85 a3 04 00
	00		 jne	 $LN48@LoadAlbum

; 5792 : 		return TRUE;
; 5793 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_43, MAX_PET_KIND_42))

  000ec	68 21 02 00 00	 push	 545			; 00000221H
  000f1	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GHAKIHFB@data?2album_42?4dat@
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  000ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00102	85 c0		 test	 eax, eax
  00104	0f 85 85 04 00
	00		 jne	 $LN48@LoadAlbum

; 5794 : 		return TRUE;
; 5795 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_42, MAX_PET_KIND_41))

  0010a	68 1f 02 00 00	 push	 543			; 0000021fH
  0010f	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OBJOPFPP@data?2album_41?4dat@
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00120	85 c0		 test	 eax, eax
  00122	0f 85 67 04 00
	00		 jne	 $LN48@LoadAlbum

; 5796 : 		return TRUE;
; 5797 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_41, MAX_PET_KIND_40))

  00128	68 1e 02 00 00	 push	 542			; 0000021eH
  0012d	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CKMCCGFK@data?2album_40?4dat@
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013e	85 c0		 test	 eax, eax
  00140	0f 85 49 04 00
	00		 jne	 $LN48@LoadAlbum

; 5798 : 		return TRUE;
; 5799 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_40, MAX_PET_KIND_39))

  00146	68 1c 02 00 00	 push	 540			; 0000021cH
  0014b	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MIGKEJBM@data?2album_39?4dat@
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00159	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015c	85 c0		 test	 eax, eax
  0015e	0f 85 2b 04 00
	00		 jne	 $LN48@LoadAlbum

; 5800 : 		return TRUE;
; 5801 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))

  00164	68 09 02 00 00	 push	 521			; 00000209H
  00169	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DDGJKLJ@data?2album_38?4dat@
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00177	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017a	85 c0		 test	 eax, eax
  0017c	0f 85 0d 04 00
	00		 jne	 $LN48@LoadAlbum

; 5802 : 		return TRUE;
; 5803 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))

  00182	68 f2 01 00 00	 push	 498			; 000001f2H
  00187	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PCGACIGM@data?2album_37?4dat@
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00195	83 c4 0c	 add	 esp, 12			; 0000000cH
  00198	85 c0		 test	 eax, eax
  0019a	0f 85 ef 03 00
	00		 jne	 $LN48@LoadAlbum

; 5804 : 		return TRUE;
; 5805 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))

  001a0	68 e3 01 00 00	 push	 483			; 000001e3H
  001a5	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DJDMPLMJ@data?2album_36?4dat@
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b6	85 c0		 test	 eax, eax
  001b8	0f 85 d1 03 00
	00		 jne	 $LN48@LoadAlbum

; 5806 : 		return TRUE;
; 5807 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))

  001be	68 ce 01 00 00	 push	 462			; 000001ceH
  001c3	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LPKIIJGH@data?2album_35?4dat@
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d4	85 c0		 test	 eax, eax
  001d6	0f 85 b3 03 00
	00		 jne	 $LN48@LoadAlbum

; 5808 : 		return TRUE;
; 5809 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))

  001dc	68 b4 01 00 00	 push	 436			; 000001b4H
  001e1	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HEPEFKMC@data?2album_34?4dat@
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  001ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f2	85 c0		 test	 eax, eax
  001f4	0f 85 95 03 00
	00		 jne	 $LN48@LoadAlbum

; 5810 : 		return TRUE;
; 5811 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))

  001fa	68 b0 01 00 00	 push	 432			; 000001b0H
  001ff	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GJPBGKHK@data?2album_33?4dat@
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  0020d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00210	85 c0		 test	 eax, eax
  00212	0f 85 77 03 00
	00		 jne	 $LN48@LoadAlbum

; 5812 : 		return TRUE;
; 5813 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))

  00218	68 af 01 00 00	 push	 431			; 000001afH
  0021d	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KCKNLJNP@data?2album_32?4dat@
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  0022b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022e	85 c0		 test	 eax, eax
  00230	0f 85 59 03 00
	00		 jne	 $LN48@LoadAlbum

; 5814 : 		return TRUE;
; 5815 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))

  00236	68 ad 01 00 00	 push	 429			; 000001adH
  0023b	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CEDJMLHB@data?2album_31?4dat@
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00249	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024c	85 c0		 test	 eax, eax
  0024e	0f 85 3b 03 00
	00		 jne	 $LN48@LoadAlbum

; 5816 : 		return TRUE;
; 5817 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))

  00254	68 a9 01 00 00	 push	 425			; 000001a9H
  00259	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0025c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OPGFBINE@data?2album_30?4dat@
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00267	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026a	85 c0		 test	 eax, eax
  0026c	0f 85 1d 03 00
	00		 jne	 $LN48@LoadAlbum

; 5818 : 		return TRUE;
; 5819 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))

  00272	68 a8 01 00 00	 push	 424			; 000001a8H
  00277	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GOBNECKI@data?2album_29?4dat@
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00285	83 c4 0c	 add	 esp, 12			; 0000000cH
  00288	85 c0		 test	 eax, eax
  0028a	0f 85 ff 02 00
	00		 jne	 $LN48@LoadAlbum

; 5820 : 		return TRUE;
; 5821 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))

  00290	68 a7 01 00 00	 push	 423			; 000001a7H
  00295	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00298	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KFEBJBAN@data?2album_28?4dat@
  0029d	50		 push	 eax
  0029e	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  002a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a6	85 c0		 test	 eax, eax
  002a8	0f 85 e1 02 00
	00		 jne	 $LN48@LoadAlbum

; 5822 : 		return TRUE;
; 5823 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))

  002ae	68 a6 01 00 00	 push	 422			; 000001a6H
  002b3	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FEBHCDNI@data?2album_27?4dat@
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  002c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c4	85 c0		 test	 eax, eax
  002c6	0f 85 c3 02 00
	00		 jne	 $LN48@LoadAlbum

; 5824 : 		return TRUE;
; 5825 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))

  002cc	68 a4 01 00 00	 push	 420			; 000001a4H
  002d1	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  002d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JPELPAHN@data?2album_26?4dat@
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  002df	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e2	85 c0		 test	 eax, eax
  002e4	0f 85 a5 02 00
	00		 jne	 $LN48@LoadAlbum

; 5826 : 		return TRUE;
; 5827 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))

  002ea	68 9f 01 00 00	 push	 415			; 0000019fH
  002ef	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BJNPICND@data?2album_25?4dat@
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  002fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00300	85 c0		 test	 eax, eax
  00302	0f 85 87 02 00
	00		 jne	 $LN48@LoadAlbum

; 5828 : 		return TRUE;
; 5829 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))

  00308	68 9e 01 00 00	 push	 414			; 0000019eH
  0030d	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00310	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NCIDFBHG@data?2album_24?4dat@
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  0031b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0031e	85 c0		 test	 eax, eax
  00320	0f 85 69 02 00
	00		 jne	 $LN48@LoadAlbum

; 5830 : 		return TRUE;
; 5831 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))

  00326	68 97 01 00 00	 push	 407			; 00000197H
  0032b	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MPIGGBMO@data?2album_23?4dat@
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00339	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033c	85 c0		 test	 eax, eax
  0033e	0f 85 4b 02 00
	00		 jne	 $LN48@LoadAlbum

; 5832 : 		return TRUE;
; 5833 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))

  00344	68 95 01 00 00	 push	 405			; 00000195H
  00349	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0034c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ENKLCGL@data?2album_22?4dat@
  00351	50		 push	 eax
  00352	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00357	83 c4 0c	 add	 esp, 12			; 0000000cH
  0035a	85 c0		 test	 eax, eax
  0035c	0f 85 2d 02 00
	00		 jne	 $LN48@LoadAlbum

; 5834 : 		return TRUE;
; 5835 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))

  00362	68 91 01 00 00	 push	 401			; 00000191H
  00367	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0036a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ICEOMAMF@data?2album_21?4dat@
  0036f	50		 push	 eax
  00370	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00375	83 c4 0c	 add	 esp, 12			; 0000000cH
  00378	85 c0		 test	 eax, eax
  0037a	0f 85 0f 02 00
	00		 jne	 $LN48@LoadAlbum

; 5836 : 		return TRUE;
; 5837 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))

  00380	68 8e 01 00 00	 push	 398			; 0000018eH
  00385	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00388	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EJBCBDGA@data?2album_20?4dat@
  0038d	50		 push	 eax
  0038e	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00393	83 c4 0c	 add	 esp, 12			; 0000000cH
  00396	85 c0		 test	 eax, eax
  00398	0f 85 f1 01 00
	00		 jne	 $LN48@LoadAlbum

; 5838 : 		return TRUE;
; 5839 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))

  0039e	68 8b 01 00 00	 push	 395			; 0000018bH
  003a3	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  003a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FPPFFIDF@data?2album_19?4dat@
  003ab	50		 push	 eax
  003ac	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  003b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  003b4	85 c0		 test	 eax, eax
  003b6	0f 85 d3 01 00
	00		 jne	 $LN48@LoadAlbum

; 5840 : 		return TRUE;
; 5841 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))

  003bc	68 87 01 00 00	 push	 391			; 00000187H
  003c1	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  003c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JEKJILJA@data?2album_18?4dat@
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  003cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d2	85 c0		 test	 eax, eax
  003d4	0f 85 b5 01 00
	00		 jne	 $LN48@LoadAlbum

; 5842 : 		return TRUE;
; 5843 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))

  003da	68 85 01 00 00	 push	 389			; 00000185H
  003df	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GFPPDJEF@data?2album_17?4dat@
  003e7	50		 push	 eax
  003e8	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  003ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f0	85 c0		 test	 eax, eax
  003f2	0f 85 97 01 00
	00		 jne	 $LN48@LoadAlbum

; 5844 : 		return TRUE;
; 5845 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))

  003f8	68 6c 01 00 00	 push	 364			; 0000016cH
  003fd	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00400	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KOKDOKOA@data?2album_16?4dat@
  00405	50		 push	 eax
  00406	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  0040b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0040e	85 c0		 test	 eax, eax
  00410	0f 85 79 01 00
	00		 jne	 $LN48@LoadAlbum

; 5846 : 		return TRUE;
; 5847 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))

  00416	68 65 01 00 00	 push	 357			; 00000165H
  0041b	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0041e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CIDHJIEO@data?2album_15?4dat@
  00423	50		 push	 eax
  00424	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00429	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042c	85 c0		 test	 eax, eax
  0042e	0f 85 5b 01 00
	00		 jne	 $LN48@LoadAlbum

; 5848 : 		return TRUE;
; 5849 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))

  00434	68 61 01 00 00	 push	 353			; 00000161H
  00439	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0043c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ODGLELOL@data?2album_14?4dat@
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00447	83 c4 0c	 add	 esp, 12			; 0000000cH
  0044a	85 c0		 test	 eax, eax
  0044c	0f 85 3d 01 00
	00		 jne	 $LN48@LoadAlbum

; 5850 : 		return TRUE;
; 5851 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))

  00452	68 32 01 00 00	 push	 306			; 00000132H
  00457	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0045a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ODGLELOL@data?2album_14?4dat@
  0045f	50		 push	 eax
  00460	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00465	83 c4 0c	 add	 esp, 12			; 0000000cH
  00468	85 c0		 test	 eax, eax
  0046a	0f 85 1f 01 00
	00		 jne	 $LN48@LoadAlbum

; 5852 : 		return TRUE;
; 5853 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))

  00470	68 31 01 00 00	 push	 305			; 00000131H
  00475	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00478	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@POGOHLFD@data?2album_13?4dat@
  0047d	50		 push	 eax
  0047e	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00483	83 c4 0c	 add	 esp, 12			; 0000000cH
  00486	85 c0		 test	 eax, eax
  00488	0f 85 01 01 00
	00		 jne	 $LN48@LoadAlbum

; 5854 : 		return TRUE;
; 5855 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))

  0048e	68 2d 01 00 00	 push	 301			; 0000012dH
  00493	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00496	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DFDCKIPG@data?2album_12?4dat@
  0049b	50		 push	 eax
  0049c	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  004a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a4	85 c0		 test	 eax, eax
  004a6	0f 85 e3 00 00
	00		 jne	 $LN48@LoadAlbum

; 5856 : 		return TRUE;
; 5857 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))

  004ac	68 29 01 00 00	 push	 297			; 00000129H
  004b1	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  004b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HIPKAJPN@data?2album_10?4dat@
  004b9	50		 push	 eax
  004ba	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  004bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  004c2	85 c0		 test	 eax, eax
  004c4	0f 85 c5 00 00
	00		 jne	 $LN48@LoadAlbum

; 5858 : 		return TRUE;
; 5859 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))

  004ca	68 f0 00 00 00	 push	 240			; 000000f0H
  004cf	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  004d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FMPMNNEF@data?2album_9?4dat@
  004d7	50		 push	 eax
  004d8	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  004dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  004e0	85 c0		 test	 eax, eax
  004e2	0f 85 a7 00 00
	00		 jne	 $LN48@LoadAlbum

; 5860 : 		return TRUE;
; 5861 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))

  004e8	68 ed 00 00 00	 push	 237			; 000000edH
  004ed	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  004f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JHKAAOOA@data?2album_8?4dat@
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  004fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  004fe	85 c0		 test	 eax, eax
  00500	0f 85 89 00 00
	00		 jne	 $LN48@LoadAlbum

; 5862 : 		return TRUE;
; 5863 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))

  00506	68 e6 00 00 00	 push	 230			; 000000e6H
  0050b	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0050e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GGPGLMDF@data?2album_7?4dat@
  00513	50		 push	 eax
  00514	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00519	83 c4 0c	 add	 esp, 12			; 0000000cH
  0051c	85 c0		 test	 eax, eax
  0051e	75 6f		 jne	 SHORT $LN48@LoadAlbum

; 5864 : 		return TRUE;
; 5865 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))

  00520	68 e5 00 00 00	 push	 229			; 000000e5H
  00525	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00528	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KNKKGPJA@data?2album_6?4dat@
  0052d	50		 push	 eax
  0052e	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00533	83 c4 0c	 add	 esp, 12			; 0000000cH
  00536	85 c0		 test	 eax, eax
  00538	75 55		 jne	 SHORT $LN48@LoadAlbum

; 5866 : 		return TRUE;
; 5867 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))

  0053a	68 e4 00 00 00	 push	 228			; 000000e4H
  0053f	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00542	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CLDOBNDO@data?2album_5?4dat@
  00547	50		 push	 eax
  00548	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  0054d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00550	85 c0		 test	 eax, eax
  00552	75 3b		 jne	 SHORT $LN48@LoadAlbum

; 5868 : 		return TRUE;
; 5869 : 	if (ConvertAlbumTo47(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))

  00554	68 e0 00 00 00	 push	 224			; 000000e0H
  00559	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  0055c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OAGCMOJL@data?2album_4?4dat@
  00561	50		 push	 eax
  00562	e8 00 00 00 00	 call	 ?ConvertAlbumTo47@@YAHPAD0K@Z ; ConvertAlbumTo47
  00567	83 c4 0c	 add	 esp, 12			; 0000000cH
  0056a	85 c0		 test	 eax, eax
  0056c	75 21		 jne	 SHORT $LN48@LoadAlbum

; 5870 : 		return TRUE;
; 5871 : 	if (ConvertAlbum1_47(id))

  0056e	8d 45 d0	 lea	 eax, DWORD PTR _id$[ebp]
  00571	50		 push	 eax
  00572	e8 00 00 00 00	 call	 ?ConvertAlbum1_47@@YAHPAD@Z ; ConvertAlbum1_47
  00577	83 c4 04	 add	 esp, 4
  0057a	85 c0		 test	 eax, eax
  0057c	75 11		 jne	 SHORT $LN48@LoadAlbum

; 5872 : 		return TRUE;
; 5873 : 	return FALSE;
; 5874 : #elif defined(__ALBUM_46)
; 5875 : 	if (LoadAlbum_46(id))
; 5876 : 		return TRUE;
; 5877 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_46, MAX_PET_KIND_45))
; 5878 : 		return TRUE;
; 5879 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_45, MAX_PET_KIND_44))
; 5880 : 		return TRUE;
; 5881 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_44, MAX_PET_KIND_43))
; 5882 : 		return TRUE;
; 5883 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_43, MAX_PET_KIND_42))
; 5884 : 		return TRUE;
; 5885 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_42, MAX_PET_KIND_41))
; 5886 : 		return TRUE;
; 5887 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_41, MAX_PET_KIND_40))
; 5888 : 		return TRUE;
; 5889 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_40, MAX_PET_KIND_39))
; 5890 : 		return TRUE;
; 5891 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))
; 5892 : 		return TRUE;
; 5893 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 5894 : 		return TRUE;
; 5895 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 5896 : 		return TRUE;
; 5897 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 5898 : 		return TRUE;
; 5899 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 5900 : 		return TRUE;
; 5901 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 5902 : 		return TRUE;
; 5903 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 5904 : 		return TRUE;
; 5905 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 5906 : 		return TRUE;
; 5907 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 5908 : 		return TRUE;
; 5909 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 5910 : 		return TRUE;
; 5911 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 5912 : 		return TRUE;
; 5913 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 5914 : 		return TRUE;
; 5915 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 5916 : 		return TRUE;
; 5917 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 5918 : 		return TRUE;
; 5919 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 5920 : 		return TRUE;
; 5921 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 5922 : 		return TRUE;
; 5923 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 5924 : 		return TRUE;
; 5925 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 5926 : 		return TRUE;
; 5927 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 5928 : 		return TRUE;
; 5929 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 5930 : 		return TRUE;
; 5931 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 5932 : 		return TRUE;
; 5933 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 5934 : 		return TRUE;
; 5935 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 5936 : 		return TRUE;
; 5937 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 5938 : 		return TRUE;
; 5939 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 5940 : 		return TRUE;
; 5941 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 5942 : 		return TRUE;
; 5943 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 5944 : 		return TRUE;
; 5945 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 5946 : 		return TRUE;
; 5947 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 5948 : 		return TRUE;
; 5949 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 5950 : 		return TRUE;
; 5951 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 5952 : 		return TRUE;
; 5953 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 5954 : 		return TRUE;
; 5955 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 5956 : 		return TRUE;
; 5957 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 5958 : 		return TRUE;
; 5959 : 	if (ConvertAlbumTo46(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 5960 : 		return TRUE;
; 5961 : 	if (ConvertAlbum1_46(id))
; 5962 : 		return TRUE;
; 5963 : 	return FALSE;
; 5964 : #elif defined(__ALBUM_45)
; 5965 : 	if (LoadAlbum_45(id))
; 5966 : 		return TRUE;
; 5967 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_45, MAX_PET_KIND_44))
; 5968 : 		return TRUE;
; 5969 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_44, MAX_PET_KIND_43))
; 5970 : 		return TRUE;
; 5971 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_43, MAX_PET_KIND_42))
; 5972 : 		return TRUE;
; 5973 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_42, MAX_PET_KIND_41))
; 5974 : 		return TRUE;
; 5975 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_41, MAX_PET_KIND_40))
; 5976 : 		return TRUE;
; 5977 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_40, MAX_PET_KIND_39))
; 5978 : 		return TRUE;
; 5979 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))
; 5980 : 		return TRUE;
; 5981 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 5982 : 		return TRUE;
; 5983 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 5984 : 		return TRUE;
; 5985 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 5986 : 		return TRUE;
; 5987 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 5988 : 		return TRUE;
; 5989 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 5990 : 		return TRUE;
; 5991 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 5992 : 		return TRUE;
; 5993 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 5994 : 		return TRUE;
; 5995 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 5996 : 		return TRUE;
; 5997 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 5998 : 		return TRUE;
; 5999 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6000 : 		return TRUE;
; 6001 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6002 : 		return TRUE;
; 6003 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6004 : 		return TRUE;
; 6005 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6006 : 		return TRUE;
; 6007 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6008 : 		return TRUE;
; 6009 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6010 : 		return TRUE;
; 6011 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6012 : 		return TRUE;
; 6013 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6014 : 		return TRUE;
; 6015 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6016 : 		return TRUE;
; 6017 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6018 : 		return TRUE;
; 6019 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6020 : 		return TRUE;
; 6021 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6022 : 		return TRUE;
; 6023 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6024 : 		return TRUE;
; 6025 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6026 : 		return TRUE;
; 6027 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6028 : 		return TRUE;
; 6029 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6030 : 		return TRUE;
; 6031 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6032 : 		return TRUE;
; 6033 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6034 : 		return TRUE;
; 6035 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6036 : 		return TRUE;
; 6037 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6038 : 		return TRUE;
; 6039 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6040 : 		return TRUE;
; 6041 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6042 : 		return TRUE;
; 6043 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6044 : 		return TRUE;
; 6045 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6046 : 		return TRUE;
; 6047 : 	if (ConvertAlbumTo45(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6048 : 		return TRUE;
; 6049 : 	if (ConvertAlbum1_45(id))
; 6050 : 		return TRUE;
; 6051 : 	return FALSE;
; 6052 : #elif defined(__ALBUM_44)
; 6053 : 	if (LoadAlbum_44(id))
; 6054 : 		return TRUE;
; 6055 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_44, MAX_PET_KIND_43))
; 6056 : 		return TRUE;
; 6057 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_43, MAX_PET_KIND_42))
; 6058 : 		return TRUE;
; 6059 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_42, MAX_PET_KIND_41))
; 6060 : 		return TRUE;
; 6061 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_41, MAX_PET_KIND_40))
; 6062 : 		return TRUE;
; 6063 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_40, MAX_PET_KIND_39))
; 6064 : 		return TRUE;
; 6065 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))
; 6066 : 		return TRUE;
; 6067 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 6068 : 		return TRUE;
; 6069 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 6070 : 		return TRUE;
; 6071 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6072 : 		return TRUE;
; 6073 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6074 : 		return TRUE;
; 6075 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6076 : 		return TRUE;
; 6077 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6078 : 		return TRUE;
; 6079 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6080 : 		return TRUE;
; 6081 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6082 : 		return TRUE;
; 6083 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6084 : 		return TRUE;
; 6085 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6086 : 		return TRUE;
; 6087 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6088 : 		return TRUE;
; 6089 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6090 : 		return TRUE;
; 6091 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6092 : 		return TRUE;
; 6093 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6094 : 		return TRUE;
; 6095 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6096 : 		return TRUE;
; 6097 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6098 : 		return TRUE;
; 6099 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6100 : 		return TRUE;
; 6101 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6102 : 		return TRUE;
; 6103 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6104 : 		return TRUE;
; 6105 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6106 : 		return TRUE;
; 6107 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6108 : 		return TRUE;
; 6109 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6110 : 		return TRUE;
; 6111 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6112 : 		return TRUE;
; 6113 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6114 : 		return TRUE;
; 6115 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6116 : 		return TRUE;
; 6117 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6118 : 		return TRUE;
; 6119 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6120 : 		return TRUE;
; 6121 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6122 : 		return TRUE;
; 6123 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6124 : 		return TRUE;
; 6125 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6126 : 		return TRUE;
; 6127 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6128 : 		return TRUE;
; 6129 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6130 : 		return TRUE;
; 6131 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6132 : 		return TRUE;
; 6133 : 	if (ConvertAlbumTo44(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6134 : 		return TRUE;
; 6135 : 	if (ConvertAlbum1_44(id))
; 6136 : 		return TRUE;
; 6137 : 	return FALSE;
; 6138 : #elif defined(__ALBUM_43)
; 6139 : 	if (LoadAlbum_43(id))
; 6140 : 		return TRUE;
; 6141 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_43, MAX_PET_KIND_42))
; 6142 : 		return TRUE;
; 6143 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_42, MAX_PET_KIND_41))
; 6144 : 		return TRUE;
; 6145 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_41, MAX_PET_KIND_40))
; 6146 : 		return TRUE;
; 6147 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_40, MAX_PET_KIND_39))
; 6148 : 		return TRUE;
; 6149 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))
; 6150 : 		return TRUE;
; 6151 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 6152 : 		return TRUE;
; 6153 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 6154 : 		return TRUE;
; 6155 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6156 : 		return TRUE;
; 6157 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6158 : 		return TRUE;
; 6159 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6160 : 		return TRUE;
; 6161 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6162 : 		return TRUE;
; 6163 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6164 : 		return TRUE;
; 6165 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6166 : 		return TRUE;
; 6167 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6168 : 		return TRUE;
; 6169 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6170 : 		return TRUE;
; 6171 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6172 : 		return TRUE;
; 6173 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6174 : 		return TRUE;
; 6175 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6176 : 		return TRUE;
; 6177 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6178 : 		return TRUE;
; 6179 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6180 : 		return TRUE;
; 6181 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6182 : 		return TRUE;
; 6183 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6184 : 		return TRUE;
; 6185 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6186 : 		return TRUE;
; 6187 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6188 : 		return TRUE;
; 6189 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6190 : 		return TRUE;
; 6191 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6192 : 		return TRUE;
; 6193 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6194 : 		return TRUE;
; 6195 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6196 : 		return TRUE;
; 6197 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6198 : 		return TRUE;
; 6199 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6200 : 		return TRUE;
; 6201 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6202 : 		return TRUE;
; 6203 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6204 : 		return TRUE;
; 6205 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6206 : 		return TRUE;
; 6207 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6208 : 		return TRUE;
; 6209 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6210 : 		return TRUE;
; 6211 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6212 : 		return TRUE;
; 6213 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6214 : 		return TRUE;
; 6215 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6216 : 		return TRUE;
; 6217 : 	if (ConvertAlbumTo43(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6218 : 		return TRUE;
; 6219 : 	if (ConvertAlbum1_43(id))
; 6220 : 		return TRUE;
; 6221 : 	return FALSE;
; 6222 : #elif defined(__ALBUM_42)
; 6223 : 	if (LoadAlbum_42(id))
; 6224 : 		return TRUE;
; 6225 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_42, MAX_PET_KIND_41))
; 6226 : 		return TRUE;
; 6227 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_41, MAX_PET_KIND_40))
; 6228 : 		return TRUE;
; 6229 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_40, MAX_PET_KIND_39))
; 6230 : 		return TRUE;
; 6231 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))
; 6232 : 		return TRUE;
; 6233 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 6234 : 		return TRUE;
; 6235 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 6236 : 		return TRUE;
; 6237 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6238 : 		return TRUE;
; 6239 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6240 : 		return TRUE;
; 6241 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6242 : 		return TRUE;
; 6243 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6244 : 		return TRUE;
; 6245 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6246 : 		return TRUE;
; 6247 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6248 : 		return TRUE;
; 6249 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6250 : 		return TRUE;
; 6251 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6252 : 		return TRUE;
; 6253 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6254 : 		return TRUE;
; 6255 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6256 : 		return TRUE;
; 6257 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6258 : 		return TRUE;
; 6259 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6260 : 		return TRUE;
; 6261 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6262 : 		return TRUE;
; 6263 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6264 : 		return TRUE;
; 6265 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6266 : 		return TRUE;
; 6267 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6268 : 		return TRUE;
; 6269 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6270 : 		return TRUE;
; 6271 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6272 : 		return TRUE;
; 6273 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6274 : 		return TRUE;
; 6275 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6276 : 		return TRUE;
; 6277 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6278 : 		return TRUE;
; 6279 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6280 : 		return TRUE;
; 6281 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6282 : 		return TRUE;
; 6283 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6284 : 		return TRUE;
; 6285 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6286 : 		return TRUE;
; 6287 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6288 : 		return TRUE;
; 6289 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6290 : 		return TRUE;
; 6291 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6292 : 		return TRUE;
; 6293 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6294 : 		return TRUE;
; 6295 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6296 : 		return TRUE;
; 6297 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6298 : 		return TRUE;
; 6299 : 	if (ConvertAlbumTo42(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6300 : 		return TRUE;
; 6301 : 	if (ConvertAlbum1_42(id))
; 6302 : 		return TRUE;
; 6303 : 	return FALSE;
; 6304 : #elif defined(__ALBUM_41)
; 6305 : 	if (LoadAlbum_41(id))
; 6306 : 		return TRUE;
; 6307 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_41, MAX_PET_KIND_40))
; 6308 : 		return TRUE;
; 6309 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_40, MAX_PET_KIND_39))
; 6310 : 		return TRUE;
; 6311 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))
; 6312 : 		return TRUE;
; 6313 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 6314 : 		return TRUE;
; 6315 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 6316 : 		return TRUE;
; 6317 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6318 : 		return TRUE;
; 6319 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6320 : 		return TRUE;
; 6321 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6322 : 		return TRUE;
; 6323 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6324 : 		return TRUE;
; 6325 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6326 : 		return TRUE;
; 6327 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6328 : 		return TRUE;
; 6329 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6330 : 		return TRUE;
; 6331 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6332 : 		return TRUE;
; 6333 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6334 : 		return TRUE;
; 6335 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6336 : 		return TRUE;
; 6337 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6338 : 		return TRUE;
; 6339 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6340 : 		return TRUE;
; 6341 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6342 : 		return TRUE;
; 6343 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6344 : 		return TRUE;
; 6345 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6346 : 		return TRUE;
; 6347 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6348 : 		return TRUE;
; 6349 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6350 : 		return TRUE;
; 6351 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6352 : 		return TRUE;
; 6353 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6354 : 		return TRUE;
; 6355 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6356 : 		return TRUE;
; 6357 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6358 : 		return TRUE;
; 6359 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6360 : 		return TRUE;
; 6361 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6362 : 		return TRUE;
; 6363 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6364 : 		return TRUE;
; 6365 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6366 : 		return TRUE;
; 6367 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6368 : 		return TRUE;
; 6369 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6370 : 		return TRUE;
; 6371 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6372 : 		return TRUE;
; 6373 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6374 : 		return TRUE;
; 6375 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6376 : 		return TRUE;
; 6377 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6378 : 		return TRUE;
; 6379 : 	if (ConvertAlbumTo41(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6380 : 		return TRUE;
; 6381 : 	if (ConvertAlbum1_41(id))
; 6382 : 		return TRUE;
; 6383 : 	return FALSE;
; 6384 : #elif defined(__ALBUM_40)
; 6385 : 	if (LoadAlbum_40(id))
; 6386 : 		return TRUE;
; 6387 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_40, MAX_PET_KIND_39))
; 6388 : 		return TRUE;
; 6389 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))
; 6390 : 		return TRUE;
; 6391 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 6392 : 		return TRUE;
; 6393 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 6394 : 		return TRUE;
; 6395 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6396 : 		return TRUE;
; 6397 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6398 : 		return TRUE;
; 6399 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6400 : 		return TRUE;
; 6401 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6402 : 		return TRUE;
; 6403 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6404 : 		return TRUE;
; 6405 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6406 : 		return TRUE;
; 6407 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6408 : 		return TRUE;
; 6409 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6410 : 		return TRUE;
; 6411 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6412 : 		return TRUE;
; 6413 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6414 : 		return TRUE;
; 6415 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6416 : 		return TRUE;
; 6417 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6418 : 		return TRUE;
; 6419 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6420 : 		return TRUE;
; 6421 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6422 : 		return TRUE;
; 6423 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6424 : 		return TRUE;
; 6425 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6426 : 		return TRUE;
; 6427 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6428 : 		return TRUE;
; 6429 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6430 : 		return TRUE;
; 6431 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6432 : 		return TRUE;
; 6433 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6434 : 		return TRUE;
; 6435 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6436 : 		return TRUE;
; 6437 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6438 : 		return TRUE;
; 6439 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6440 : 		return TRUE;
; 6441 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6442 : 		return TRUE;
; 6443 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6444 : 		return TRUE;
; 6445 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6446 : 		return TRUE;
; 6447 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6448 : 		return TRUE;
; 6449 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6450 : 		return TRUE;
; 6451 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6452 : 		return TRUE;
; 6453 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6454 : 		return TRUE;
; 6455 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6456 : 		return TRUE;
; 6457 : 	if (ConvertAlbumTo40(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6458 : 		return TRUE;
; 6459 : 	if (ConvertAlbum1_40(id))
; 6460 : 		return TRUE;
; 6461 : 	return FALSE;
; 6462 : #elif defined(__ALBUM_39)
; 6463 : 	if (LoadAlbum_39(id))
; 6464 : 		return TRUE;
; 6465 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_39, MAX_PET_KIND_38))
; 6466 : 		return TRUE;
; 6467 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 6468 : 		return TRUE;
; 6469 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 6470 : 		return TRUE;
; 6471 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6472 : 		return TRUE;
; 6473 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6474 : 		return TRUE;
; 6475 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6476 : 		return TRUE;
; 6477 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6478 : 		return TRUE;
; 6479 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6480 : 		return TRUE;
; 6481 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6482 : 		return TRUE;
; 6483 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6484 : 		return TRUE;
; 6485 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6486 : 		return TRUE;
; 6487 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6488 : 		return TRUE;
; 6489 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6490 : 		return TRUE;
; 6491 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6492 : 		return TRUE;
; 6493 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6494 : 		return TRUE;
; 6495 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6496 : 		return TRUE;
; 6497 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6498 : 		return TRUE;
; 6499 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6500 : 		return TRUE;
; 6501 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6502 : 		return TRUE;
; 6503 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6504 : 		return TRUE;
; 6505 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6506 : 		return TRUE;
; 6507 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6508 : 		return TRUE;
; 6509 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6510 : 		return TRUE;
; 6511 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6512 : 		return TRUE;
; 6513 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6514 : 		return TRUE;
; 6515 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6516 : 		return TRUE;
; 6517 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6518 : 		return TRUE;
; 6519 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6520 : 		return TRUE;
; 6521 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6522 : 		return TRUE;
; 6523 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6524 : 		return TRUE;
; 6525 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6526 : 		return TRUE;
; 6527 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6528 : 		return TRUE;
; 6529 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6530 : 		return TRUE;
; 6531 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6532 : 		return TRUE;
; 6533 : 	if (ConvertAlbumTo39(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6534 : 		return TRUE;
; 6535 : 	if (ConvertAlbum1_39(id))
; 6536 : 		return TRUE;
; 6537 : 	return FALSE;
; 6538 : #elif defined(__ALBUM_38)
; 6539 : 	if (LoadAlbum_38(id))
; 6540 : 		return TRUE;
; 6541 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_38, MAX_PET_KIND_37))
; 6542 : 		return TRUE;
; 6543 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 6544 : 		return TRUE;
; 6545 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6546 : 		return TRUE;
; 6547 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6548 : 		return TRUE;
; 6549 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6550 : 		return TRUE;
; 6551 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6552 : 		return TRUE;
; 6553 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6554 : 		return TRUE;
; 6555 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6556 : 		return TRUE;
; 6557 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6558 : 		return TRUE;
; 6559 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6560 : 		return TRUE;
; 6561 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6562 : 		return TRUE;
; 6563 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6564 : 		return TRUE;
; 6565 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6566 : 		return TRUE;
; 6567 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6568 : 		return TRUE;
; 6569 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6570 : 		return TRUE;
; 6571 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6572 : 		return TRUE;
; 6573 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6574 : 		return TRUE;
; 6575 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6576 : 		return TRUE;
; 6577 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6578 : 		return TRUE;
; 6579 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6580 : 		return TRUE;
; 6581 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6582 : 		return TRUE;
; 6583 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6584 : 		return TRUE;
; 6585 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6586 : 		return TRUE;
; 6587 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6588 : 		return TRUE;
; 6589 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6590 : 		return TRUE;
; 6591 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6592 : 		return TRUE;
; 6593 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6594 : 		return TRUE;
; 6595 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6596 : 		return TRUE;
; 6597 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6598 : 		return TRUE;
; 6599 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6600 : 		return TRUE;
; 6601 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6602 : 		return TRUE;
; 6603 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6604 : 		return TRUE;
; 6605 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6606 : 		return TRUE;
; 6607 : 	if (ConvertAlbumTo38(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6608 : 		return TRUE;
; 6609 : 	if (ConvertAlbum1_38(id))
; 6610 : 		return TRUE;
; 6611 : 	return FALSE;
; 6612 : #elif defined(__ALBUM_37)
; 6613 : 	if (LoadAlbum_37(id))
; 6614 : 		return TRUE;
; 6615 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_37, MAX_PET_KIND_36))
; 6616 : 		return TRUE;
; 6617 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6618 : 		return TRUE;
; 6619 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6620 : 		return TRUE;
; 6621 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6622 : 		return TRUE;
; 6623 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6624 : 		return TRUE;
; 6625 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6626 : 		return TRUE;
; 6627 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6628 : 		return TRUE;
; 6629 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6630 : 		return TRUE;
; 6631 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6632 : 		return TRUE;
; 6633 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6634 : 		return TRUE;
; 6635 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6636 : 		return TRUE;
; 6637 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6638 : 		return TRUE;
; 6639 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6640 : 		return TRUE;
; 6641 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6642 : 		return TRUE;
; 6643 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6644 : 		return TRUE;
; 6645 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6646 : 		return TRUE;
; 6647 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6648 : 		return TRUE;
; 6649 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6650 : 		return TRUE;
; 6651 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6652 : 		return TRUE;
; 6653 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6654 : 		return TRUE;
; 6655 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6656 : 		return TRUE;
; 6657 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6658 : 		return TRUE;
; 6659 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6660 : 		return TRUE;
; 6661 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6662 : 		return TRUE;
; 6663 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6664 : 		return TRUE;
; 6665 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6666 : 		return TRUE;
; 6667 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6668 : 		return TRUE;
; 6669 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6670 : 		return TRUE;
; 6671 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6672 : 		return TRUE;
; 6673 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6674 : 		return TRUE;
; 6675 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6676 : 		return TRUE;
; 6677 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6678 : 		return TRUE;
; 6679 : 	if (ConvertAlbumTo37(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6680 : 		return TRUE;
; 6681 : 	if (ConvertAlbum1_37(id))
; 6682 : 		return TRUE;
; 6683 : 	return FALSE;
; 6684 : #elif defined(__ALBUM_36)
; 6685 : 	if (LoadAlbum_36(id))
; 6686 : 		return TRUE;
; 6687 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_36, MAX_PET_KIND_35))
; 6688 : 		return TRUE;
; 6689 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6690 : 		return TRUE;
; 6691 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6692 : 		return TRUE;
; 6693 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6694 : 		return TRUE;
; 6695 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6696 : 		return TRUE;
; 6697 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6698 : 		return TRUE;
; 6699 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6700 : 		return TRUE;
; 6701 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6702 : 		return TRUE;
; 6703 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6704 : 		return TRUE;
; 6705 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6706 : 		return TRUE;
; 6707 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6708 : 		return TRUE;
; 6709 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6710 : 		return TRUE;
; 6711 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6712 : 		return TRUE;
; 6713 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6714 : 		return TRUE;
; 6715 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6716 : 		return TRUE;
; 6717 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6718 : 		return TRUE;
; 6719 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6720 : 		return TRUE;
; 6721 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6722 : 		return TRUE;
; 6723 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6724 : 		return TRUE;
; 6725 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6726 : 		return TRUE;
; 6727 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6728 : 		return TRUE;
; 6729 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6730 : 		return TRUE;
; 6731 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6732 : 		return TRUE;
; 6733 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6734 : 		return TRUE;
; 6735 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6736 : 		return TRUE;
; 6737 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6738 : 		return TRUE;
; 6739 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6740 : 		return TRUE;
; 6741 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6742 : 		return TRUE;
; 6743 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6744 : 		return TRUE;
; 6745 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6746 : 		return TRUE;
; 6747 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6748 : 		return TRUE;
; 6749 : 	if (ConvertAlbumTo36(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6750 : 		return TRUE;
; 6751 : 	if (ConvertAlbum1_36(id))
; 6752 : 		return TRUE;
; 6753 : 	return FALSE;
; 6754 : #elif defined(__ALBUM_35)
; 6755 : 	if (LoadAlbum_35(id))
; 6756 : 		return TRUE;
; 6757 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_35, MAX_PET_KIND_34))
; 6758 : 		return TRUE;
; 6759 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6760 : 		return TRUE;
; 6761 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6762 : 		return TRUE;
; 6763 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6764 : 		return TRUE;
; 6765 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6766 : 		return TRUE;
; 6767 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6768 : 		return TRUE;
; 6769 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6770 : 		return TRUE;
; 6771 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6772 : 		return TRUE;
; 6773 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6774 : 		return TRUE;
; 6775 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6776 : 		return TRUE;
; 6777 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6778 : 		return TRUE;
; 6779 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6780 : 		return TRUE;
; 6781 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6782 : 		return TRUE;
; 6783 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6784 : 		return TRUE;
; 6785 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6786 : 		return TRUE;
; 6787 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6788 : 		return TRUE;
; 6789 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6790 : 		return TRUE;
; 6791 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6792 : 		return TRUE;
; 6793 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6794 : 		return TRUE;
; 6795 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6796 : 		return TRUE;
; 6797 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6798 : 		return TRUE;
; 6799 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6800 : 		return TRUE;
; 6801 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6802 : 		return TRUE;
; 6803 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6804 : 		return TRUE;
; 6805 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6806 : 		return TRUE;
; 6807 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6808 : 		return TRUE;
; 6809 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6810 : 		return TRUE;
; 6811 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6812 : 		return TRUE;
; 6813 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6814 : 		return TRUE;
; 6815 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6816 : 		return TRUE;
; 6817 : 	if (ConvertAlbumTo35(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6818 : 		return TRUE;
; 6819 : 	if (ConvertAlbum1_35(id))
; 6820 : 		return TRUE;
; 6821 : 	return FALSE;
; 6822 : #elif defined(__ALBUM_34)
; 6823 : 	if (LoadAlbum_34(id))
; 6824 : 		return TRUE;
; 6825 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_34, MAX_PET_KIND_33))
; 6826 : 		return TRUE;
; 6827 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6828 : 		return TRUE;
; 6829 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6830 : 		return TRUE;
; 6831 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6832 : 		return TRUE;
; 6833 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6834 : 		return TRUE;
; 6835 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6836 : 		return TRUE;
; 6837 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6838 : 		return TRUE;
; 6839 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6840 : 		return TRUE;
; 6841 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6842 : 		return TRUE;
; 6843 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6844 : 		return TRUE;
; 6845 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6846 : 		return TRUE;
; 6847 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6848 : 		return TRUE;
; 6849 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6850 : 		return TRUE;
; 6851 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6852 : 		return TRUE;
; 6853 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6854 : 		return TRUE;
; 6855 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6856 : 		return TRUE;
; 6857 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6858 : 		return TRUE;
; 6859 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6860 : 		return TRUE;
; 6861 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6862 : 		return TRUE;
; 6863 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6864 : 		return TRUE;
; 6865 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6866 : 		return TRUE;
; 6867 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6868 : 		return TRUE;
; 6869 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6870 : 		return TRUE;
; 6871 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6872 : 		return TRUE;
; 6873 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6874 : 		return TRUE;
; 6875 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6876 : 		return TRUE;
; 6877 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6878 : 		return TRUE;
; 6879 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6880 : 		return TRUE;
; 6881 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6882 : 		return TRUE;
; 6883 : 	if (ConvertAlbumTo34(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6884 : 		return TRUE;
; 6885 : 	if (ConvertAlbum1_34(id))
; 6886 : 		return TRUE;
; 6887 : 	return FALSE;
; 6888 : #elif defined(__ALBUM_33)
; 6889 : 	if (LoadAlbum_33(id))
; 6890 : 		return TRUE;
; 6891 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_33, MAX_PET_KIND_32))
; 6892 : 		return TRUE;
; 6893 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6894 : 		return TRUE;
; 6895 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6896 : 		return TRUE;
; 6897 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6898 : 		return TRUE;
; 6899 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6900 : 		return TRUE;
; 6901 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6902 : 		return TRUE;
; 6903 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6904 : 		return TRUE;
; 6905 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6906 : 		return TRUE;
; 6907 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6908 : 		return TRUE;
; 6909 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6910 : 		return TRUE;
; 6911 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6912 : 		return TRUE;
; 6913 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6914 : 		return TRUE;
; 6915 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6916 : 		return TRUE;
; 6917 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6918 : 		return TRUE;
; 6919 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6920 : 		return TRUE;
; 6921 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6922 : 		return TRUE;
; 6923 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6924 : 		return TRUE;
; 6925 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6926 : 		return TRUE;
; 6927 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6928 : 		return TRUE;
; 6929 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6930 : 		return TRUE;
; 6931 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6932 : 		return TRUE;
; 6933 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6934 : 		return TRUE;
; 6935 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6936 : 		return TRUE;
; 6937 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 6938 : 		return TRUE;
; 6939 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 6940 : 		return TRUE;
; 6941 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 6942 : 		return TRUE;
; 6943 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 6944 : 		return TRUE;
; 6945 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 6946 : 		return TRUE;
; 6947 : 	if (ConvertAlbumTo33(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 6948 : 		return TRUE;
; 6949 : 	if (ConvertAlbum1_33(id))
; 6950 : 		return TRUE;
; 6951 : 	return FALSE;
; 6952 : #elif defined(__ALBUM_32)
; 6953 : 	if (LoadAlbum_32(id))
; 6954 : 		return TRUE;
; 6955 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_32, MAX_PET_KIND_31))
; 6956 : 		return TRUE;
; 6957 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_31, MAX_PET_KIND_30))
; 6958 : 		return TRUE;
; 6959 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_30, MAX_PET_KIND_29))
; 6960 : 		return TRUE;
; 6961 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_29, MAX_PET_KIND_28))
; 6962 : 		return TRUE;
; 6963 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_28, MAX_PET_KIND_27))
; 6964 : 		return TRUE;
; 6965 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_27, MAX_PET_KIND_26))
; 6966 : 		return TRUE;
; 6967 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_26, MAX_PET_KIND_25))
; 6968 : 		return TRUE;
; 6969 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_25, MAX_PET_KIND_24))
; 6970 : 		return TRUE;
; 6971 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_24, MAX_PET_KIND_23))
; 6972 : 		return TRUE;
; 6973 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_23, MAX_PET_KIND_22))
; 6974 : 		return TRUE;
; 6975 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_22, MAX_PET_KIND_21))
; 6976 : 		return TRUE;
; 6977 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_21, MAX_PET_KIND_20))
; 6978 : 		return TRUE;
; 6979 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_20, MAX_PET_KIND_19))
; 6980 : 		return TRUE;
; 6981 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_19, MAX_PET_KIND_18))
; 6982 : 		return TRUE;
; 6983 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_18, MAX_PET_KIND_17))
; 6984 : 		return TRUE;
; 6985 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_17, MAX_PET_KIND_16))
; 6986 : 		return TRUE;
; 6987 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_16, MAX_PET_KIND_15))
; 6988 : 		return TRUE;
; 6989 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 6990 : 		return TRUE;
; 6991 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 6992 : 		return TRUE;
; 6993 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 6994 : 		return TRUE;
; 6995 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 6996 : 		return TRUE;
; 6997 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 6998 : 		return TRUE;
; 6999 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 7000 : 		return TRUE;
; 7001 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 7002 : 		return TRUE;
; 7003 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 7004 : 		return TRUE;
; 7005 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 7006 : 		return TRUE;
; 7007 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 7008 : 		return TRUE;
; 7009 : 	if (ConvertAlbumTo32(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 7010 : 		return TRUE;
; 7011 : 	if (ConvertAlbum1_32(id))
; 7012 : 		return TRUE;
; 7013 : 	return FALSE;
; 7014 : #elif defined(__ALBUM_15)
; 7015 : 	if (LoadAlbum_15(id))
; 7016 : 		return TRUE;
; 7017 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_15, MAX_PET_KIND_14))
; 7018 : 		return TRUE;
; 7019 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_14, MAX_PET_KIND_13))
; 7020 : 		return TRUE;
; 7021 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_13, MAX_PET_KIND_12))
; 7022 : 		return TRUE;
; 7023 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_12, MAX_PET_KIND_11))
; 7024 : 		return TRUE;
; 7025 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_10, MAX_PET_KIND_10))
; 7026 : 		return TRUE;
; 7027 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_9, MAX_PET_KIND_9))
; 7028 : 		return TRUE;
; 7029 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_8, MAX_PET_KIND_8))
; 7030 : 		return TRUE;
; 7031 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_7, MAX_PET_KIND_7))
; 7032 : 		return TRUE;
; 7033 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_6, MAX_PET_KIND_6))
; 7034 : 		return TRUE;
; 7035 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_5, MAX_PET_KIND_5))
; 7036 : 		return TRUE;
; 7037 : 	if (ConvertAlbumTo15(id, ALBUM_FILE_NAME_4, MAX_PET_KIND_4))
; 7038 : 		return TRUE;
; 7039 : 	if (ConvertAlbum1_15(id))
; 7040 : 		return TRUE;
; 7041 : 	return FALSE;
; 7042 : #else
; 7043 : 	char id2[16];
; 7044 : 	int i;
; 7045 : 	FILE *fp;
; 7046 : 	// ?????????
; 7047 : 	AlbumIdCnt = 0;
; 7048 : 	// î???????????
; 7049 : 	if ((fp = fopen(ALBUM_FILE_NAME, "r+b")) == NULL) {
; 7050 : 
; 7051 : 		// ?????îî«??î
; 7052 : 		if ((fp = fopen(ALBUM_FILE_NAME, "wb")) != NULL) {
; 7053 : 			// ????????????
; 7054 : 			id[id[15]] = Rnd(1, 100);
; 7055 : 			// ??????
; 7056 : 			for (i = 0; i < 16; i++) {
; 7057 : 				id[i] ^= IdEncryptionTbl[i];
; 7058 : 
; 7059 : 			}
; 7060 : 			// ?????????
; 7061 : 			fwrite(id, sizeof(id), 1, fp);
; 7062 : 
; 7063 : 			// ?????î¨î?î­?????
; 7064 : 			for (i = 0; i < MAX_PET_KIND; i++) {
; 7065 : 				int j;
; 7066 : 				// î¡î·î¤???
; 7067 : 				for (j = 0; j < PET_NAME_LEN + 1; j++) {
; 7068 : 					PetAlbum[i].name[j] = Rnd(1, 255);
; 7069 : 					PetAlbum[i].freeName[j] = Rnd(1, 255);
; 7070 : 				}
; 7071 : 
; 7072 : 				PetAlbum[i].faceGraNo = Rnd(1, 60000);
; 7073 : 				PetAlbum[i].level = Rnd(1, 30000);
; 7074 : 				PetAlbum[i].faceGraNo = Rnd(1, 30000);
; 7075 : 				PetAlbum[i].maxHp = Rnd(1, 30000);
; 7076 : 				PetAlbum[i].str = Rnd(1, 30000);
; 7077 : 				PetAlbum[i].quick = Rnd(1, 30000);
; 7078 : 				PetAlbum[i].def = Rnd(1, 30000);
; 7079 : 
; 7080 : 				PetAlbum[i].earth = Rnd(1, 30000);
; 7081 : 				PetAlbum[i].water = Rnd(1, 30000);
; 7082 : 				PetAlbum[i].fire = Rnd(1, 30000);
; 7083 : 				PetAlbum[i].wind = Rnd(1, 30000);
; 7084 : 			}
; 7085 : 
; 7086 : 			// ???????
; 7087 : 			fwrite(PetAlbum, sizeof(PET_ALBUM), MAX_PET_KIND, fp);
; 7088 : 			fclose(fp);	// ????????
; 7089 : 		}
; 7090 : 
; 7091 : 		return FALSE;
; 7092 : 	}
; 7093 : 	// ??î??????? î¡???î¡??î ?
; 7094 : 	while (1) {
; 7095 : 		// ???î???
; 7096 : 		if (fread(id2, sizeof(id2), 1, fp) < 1) {
; 7097 : 			// î§î²????????î¡??î
; 7098 : 			// ????????????
; 7099 : 			id[id[15]] = Rnd(1, 100);
; 7100 : 			// ??????
; 7101 : 			for (i = 0; i < 16; i++) {
; 7102 : 				id[i] ^= IdEncryptionTbl[i];
; 7103 : 			}
; 7104 : 			// ?????????
; 7105 : 			fwrite(id, sizeof(id), 1, fp);
; 7106 : 			// ???????
; 7107 : 			fwrite(PetAlbum, sizeof(PET_ALBUM), MAX_PET_KIND, fp);
; 7108 : 			fclose(fp);	// ????????
; 7109 : 			return FALSE;
; 7110 : 		}
; 7111 : 		// ?????????
; 7112 : 		for (i = 0; i < 16; i++) {
; 7113 : 			id2[i] ^= IdEncryptionTbl[i];
; 7114 : 		}
; 7115 : 		// ????î°?????
; 7116 : 		id2[id2[15]] = NULL;
; 7117 : 		// ??????
; 7118 : 		if (strcmp(id, id2) != 0) {
; 7119 : 			// ?????î¶????????????î´???
; 7120 : 			if (fseek(fp, sizeof(PET_ALBUM) * MAX_PET_KIND, SEEK_CUR) != 0) {
; 7121 : 				fclose(fp);	// ????????
; 7122 : 				return FALSE;
; 7123 : 			}
; 7124 : 		}
; 7125 : 		else {// ????
; 7126 : 			  // ???????î???
; 7127 : 			if (fread(PetAlbum, sizeof(PET_ALBUM), MAX_PET_KIND, fp) < MAX_PET_KIND) {
; 7128 : 				fclose(fp);	// ????????
; 7129 : 				return FALSE;
; 7130 : 			}
; 7131 : 			break;
; 7132 : 		}
; 7133 : 		// ??????
; 7134 : 		AlbumIdCnt++;
; 7135 : 	}
; 7136 : 	// ????????
; 7137 : 	fclose(fp);
; 7138 : 
; 7139 : 	return TRUE;
; 7140 : #endif
; 7141 : }

  0057e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00581	33 cd		 xor	 ecx, ebp
  00583	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00588	8b e5		 mov	 esp, ebp
  0058a	5d		 pop	 ebp
  0058b	8b e3		 mov	 esp, ebx
  0058d	5b		 pop	 ebx
  0058e	c3		 ret	 0
$LN48@LoadAlbum:
  0058f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00592	b8 01 00 00 00	 mov	 eax, 1
  00597	33 cd		 xor	 ecx, ebp
  00599	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0059e	8b e5		 mov	 esp, ebp
  005a0	5d		 pop	 ebp
  005a1	8b e3		 mov	 esp, ebx
  005a3	5b		 pop	 ebx
  005a4	c3		 ret	 0
?LoadAlbum@@YAHXZ ENDP					; LoadAlbum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?CheckBattleNewPet@@YAXXZ
_TEXT	SEGMENT
?CheckBattleNewPet@@YAXXZ PROC				; CheckBattleNewPet, COMDAT

; 9994 : {

  00000	56		 push	 esi

; 9995 : 	int i;
; 9996 : 
; 9997 : 	// ??îî¤???
; 9998 : 	for (i = 0; i < 20; i++) {

  00001	be 00 00 00 00	 mov	 esi, OFFSET ?p_party@@3PAPAUaction@@A ; p_party
$LL4@CheckBattl:

; 9999 : 		// ?????î¡?????
; 10000: 		if (p_party[i] == NULL) continue;

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 14		 je	 SHORT $LN2@CheckBattl

; 10001: 		// ??????????
; 10002: 		if (p_party[i]->func == NULL) continue;

  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	74 0e		 je	 SHORT $LN2@CheckBattl

; 10003: 		// î¡?????????
; 10004: 		CheckNewPet(p_party[i]->anim_chr_no);

  00012	ff b0 44 01 00
	00		 push	 DWORD PTR [eax+324]
  00018	e8 00 00 00 00	 call	 ?CheckNewPet@@YAXH@Z	; CheckNewPet
  0001d	83 c4 04	 add	 esp, 4
$LN2@CheckBattl:

; 9995 : 	int i;
; 9996 : 
; 9997 : 	// ??îî¤???
; 9998 : 	for (i = 0; i < 20; i++) {

  00020	83 c6 04	 add	 esi, 4
  00023	81 fe 50 00 00
	00		 cmp	 esi, OFFSET ?p_party@@3PAPAUaction@@A+80
  00029	7c db		 jl	 SHORT $LL4@CheckBattl

; 10005: 	}
; 10006: }

  0002b	5e		 pop	 esi
  0002c	c3		 ret	 0
?CheckBattleNewPet@@YAXXZ ENDP				; CheckBattleNewPet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?CheckNewPet@@YAXH@Z
_TEXT	SEGMENT
_sprNo$ = 8						; size = 4
?CheckNewPet@@YAXH@Z PROC				; CheckNewPet, COMDAT

; 7174 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 7175 : 	int tblNo = sprNo - 100250; // ?????î±?

  00003	8b 45 08	 mov	 eax, DWORD PTR _sprNo$[ebp]
  00006	05 66 78 fe ff	 add	 eax, -100250		; fffe7866H

; 7176 : 	int albumNo;
; 7177 : 	// ????î±?
; 7178 : #if defined(__ALBUM_47)
; 7179 : 	if (tblNo > 1800) {					//å°æ¶é­

  0000b	3d 08 07 00 00	 cmp	 eax, 1800		; 00000708H
  00010	7e 0a		 jle	 SHORT $LN2@CheckNewPe

; 7180 : 		tblNo -= 1208;

  00012	2d b8 04 00 00	 sub	 eax, 1208		; 000004b8H

; 7181 : 	}

  00017	e9 0c 02 00 00	 jmp	 $LN68@CheckNewPe
$LN2@CheckNewPe:

; 7182 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´

  0001c	3d db 06 00 00	 cmp	 eax, 1755		; 000006dbH
  00021	7e 0a		 jle	 SHORT $LN4@CheckNewPe

; 7183 : 		tblNo -= 1201;

  00023	2d b1 04 00 00	 sub	 eax, 1201		; 000004b1H

; 7184 : 	}

  00028	e9 fb 01 00 00	 jmp	 $LN68@CheckNewPe
$LN4@CheckNewPe:

; 7185 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è

  0002d	3d cb 06 00 00	 cmp	 eax, 1739		; 000006cbH
  00032	7e 0a		 jle	 SHORT $LN6@CheckNewPe

; 7186 : 		tblNo -= 1200;

  00034	2d b0 04 00 00	 sub	 eax, 1200		; 000004b0H

; 7187 : 	}

  00039	e9 ea 01 00 00	 jmp	 $LN68@CheckNewPe
$LN6@CheckNewPe:

; 7188 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 

  0003e	3d 96 06 00 00	 cmp	 eax, 1686		; 00000696H
  00043	7e 0a		 jle	 SHORT $LN8@CheckNewPe

; 7189 : 		tblNo -= 1175;

  00045	2d 97 04 00 00	 sub	 eax, 1175		; 00000497H

; 7190 : 	}

  0004a	e9 d9 01 00 00	 jmp	 $LN68@CheckNewPe
$LN8@CheckNewPe:

; 7191 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯

  0004f	3d 69 06 00 00	 cmp	 eax, 1641		; 00000669H
  00054	7e 0a		 jle	 SHORT $LN10@CheckNewPe

; 7192 : 		tblNo -= 1167;

  00056	2d 8f 04 00 00	 sub	 eax, 1167		; 0000048fH

; 7193 : 	}

  0005b	e9 c8 01 00 00	 jmp	 $LN68@CheckNewPe
$LN10@CheckNewPe:

; 7194 : 	else if (tblNo > 1635) {	//éºéº

  00060	3d 63 06 00 00	 cmp	 eax, 1635		; 00000663H
  00065	7e 0a		 jle	 SHORT $LN12@CheckNewPe

; 7195 : 		tblNo -= 1148;

  00067	2d 7c 04 00 00	 sub	 eax, 1148		; 0000047cH

; 7196 : 	}

  0006c	e9 b7 01 00 00	 jmp	 $LN68@CheckNewPe
$LN12@CheckNewPe:

; 7197 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 

  00071	3d 62 06 00 00	 cmp	 eax, 1634		; 00000662H
  00076	7e 0a		 jle	 SHORT $LN14@CheckNewPe

; 7198 : 		tblNo -= 1149;

  00078	2d 7d 04 00 00	 sub	 eax, 1149		; 0000047dH

; 7199 : 	}

  0007d	e9 a6 01 00 00	 jmp	 $LN68@CheckNewPe
$LN14@CheckNewPe:

; 7200 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·

  00082	3d 50 06 00 00	 cmp	 eax, 1616		; 00000650H
  00087	7e 0a		 jle	 SHORT $LN16@CheckNewPe

; 7201 : 		tblNo -= 1146;

  00089	2d 7a 04 00 00	 sub	 eax, 1146		; 0000047aH

; 7202 : 	}

  0008e	e9 95 01 00 00	 jmp	 $LN68@CheckNewPe
$LN16@CheckNewPe:

; 7203 : 	else if (tblNo > 1568) {//æºäººé¾

  00093	3d 20 06 00 00	 cmp	 eax, 1568		; 00000620H
  00098	7e 0a		 jle	 SHORT $LN18@CheckNewPe

; 7204 : 		tblNo -= 1103;

  0009a	2d 4f 04 00 00	 sub	 eax, 1103		; 0000044fH

; 7205 : 	}

  0009f	e9 84 01 00 00	 jmp	 $LN68@CheckNewPe
$LN18@CheckNewPe:

; 7206 : 	else if (tblNo > 1564) {//é»è²é£é¾

  000a4	3d 1c 06 00 00	 cmp	 eax, 1564		; 0000061cH
  000a9	7e 0a		 jle	 SHORT $LN20@CheckNewPe

; 7207 : 		tblNo -= 1101;

  000ab	2d 4d 04 00 00	 sub	 eax, 1101		; 0000044dH

; 7208 : 	}

  000b0	e9 73 01 00 00	 jmp	 $LN68@CheckNewPe
$LN20@CheckNewPe:

; 7209 : 	else if (tblNo > 1516) {

  000b5	3d ec 05 00 00	 cmp	 eax, 1516		; 000005ecH
  000ba	7e 0a		 jle	 SHORT $LN22@CheckNewPe

; 7210 : 		tblNo -= 1055;

  000bc	2d 1f 04 00 00	 sub	 eax, 1055		; 0000041fH

; 7211 : 	}

  000c1	e9 62 01 00 00	 jmp	 $LN68@CheckNewPe
$LN22@CheckNewPe:

; 7212 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç

  000c6	75 0a		 jne	 SHORT $LN24@CheckNewPe

; 7213 : 		tblNo = 455;

  000c8	b8 c7 01 00 00	 mov	 eax, 455		; 000001c7H

; 7214 : 	}

  000cd	e9 5a 01 00 00	 jmp	 $LN77@CheckNewPe
$LN24@CheckNewPe:

; 7215 : 	else if (tblNo > 1509) {

  000d2	3d e5 05 00 00	 cmp	 eax, 1509		; 000005e5H
  000d7	7e 0a		 jle	 SHORT $LN26@CheckNewPe

; 7216 : 		tblNo -= 1054;

  000d9	2d 1e 04 00 00	 sub	 eax, 1054		; 0000041eH

; 7217 : 	}

  000de	e9 45 01 00 00	 jmp	 $LN68@CheckNewPe
$LN26@CheckNewPe:

; 7218 : 	else if (tblNo == 1497) {

  000e3	3d d9 05 00 00	 cmp	 eax, 1497		; 000005d9H
  000e8	75 0a		 jne	 SHORT $LN28@CheckNewPe

; 7219 : 		tblNo = 395;

  000ea	b8 8b 01 00 00	 mov	 eax, 395		; 0000018bH

; 7220 : 	}

  000ef	e9 38 01 00 00	 jmp	 $LN77@CheckNewPe
$LN28@CheckNewPe:

; 7221 : 	else if (tblNo > 1495) {

  000f4	3d d7 05 00 00	 cmp	 eax, 1495		; 000005d7H
  000f9	7e 0a		 jle	 SHORT $LN30@CheckNewPe

; 7222 : 		tblNo -= 1044;

  000fb	2d 14 04 00 00	 sub	 eax, 1044		; 00000414H

; 7223 : 	}

  00100	e9 23 01 00 00	 jmp	 $LN68@CheckNewPe
$LN30@CheckNewPe:

; 7224 : 	else if (tblNo > 1490) {

  00105	3d d2 05 00 00	 cmp	 eax, 1490		; 000005d2H
  0010a	7e 0a		 jle	 SHORT $LN32@CheckNewPe

; 7225 : 		tblNo -= 1043;

  0010c	2d 13 04 00 00	 sub	 eax, 1043		; 00000413H

; 7226 : 	}

  00111	e9 12 01 00 00	 jmp	 $LN68@CheckNewPe
$LN32@CheckNewPe:

; 7227 : 	else if (tblNo > 1485) {

  00116	3d cd 05 00 00	 cmp	 eax, 1485		; 000005cdH
  0011b	7e 0a		 jle	 SHORT $LN34@CheckNewPe

; 7228 : 		tblNo -= 1040;

  0011d	2d 10 04 00 00	 sub	 eax, 1040		; 00000410H

; 7229 : 	}

  00122	e9 01 01 00 00	 jmp	 $LN68@CheckNewPe
$LN34@CheckNewPe:

; 7230 : 	else if (tblNo > 1454) {

  00127	3d ae 05 00 00	 cmp	 eax, 1454		; 000005aeH
  0012c	7e 0a		 jle	 SHORT $LN36@CheckNewPe

; 7231 : 		tblNo -= 1034;

  0012e	2d 0a 04 00 00	 sub	 eax, 1034		; 0000040aH

; 7232 : 	}

  00133	e9 f0 00 00 00	 jmp	 $LN68@CheckNewPe
$LN36@CheckNewPe:

; 7233 : 	else if (tblNo == 1214) {

  00138	3d be 04 00 00	 cmp	 eax, 1214		; 000004beH
  0013d	75 0a		 jne	 SHORT $LN38@CheckNewPe

; 7234 : 		tblNo = 331;

  0013f	b8 4b 01 00 00	 mov	 eax, 331		; 0000014bH

; 7235 : 	}

  00144	e9 e3 00 00 00	 jmp	 $LN77@CheckNewPe
$LN38@CheckNewPe:

; 7236 : 	else if (tblNo == 1217) {

  00149	3d c1 04 00 00	 cmp	 eax, 1217		; 000004c1H
  0014e	75 0a		 jne	 SHORT $LN40@CheckNewPe

; 7237 : 		tblNo = 328;

  00150	b8 48 01 00 00	 mov	 eax, 328		; 00000148H

; 7238 : 	}

  00155	e9 d2 00 00 00	 jmp	 $LN77@CheckNewPe
$LN40@CheckNewPe:

; 7239 : 	else if (tblNo > 1361) {

  0015a	3d 51 05 00 00	 cmp	 eax, 1361		; 00000551H
  0015f	7e 0a		 jle	 SHORT $LN42@CheckNewPe

; 7240 : 		tblNo -= 952;

  00161	2d b8 03 00 00	 sub	 eax, 952		; 000003b8H

; 7241 : 	}

  00166	e9 bd 00 00 00	 jmp	 $LN68@CheckNewPe
$LN42@CheckNewPe:

; 7242 : 	else if (tblNo > 1356) {

  0016b	3d 4c 05 00 00	 cmp	 eax, 1356		; 0000054cH
  00170	7e 0a		 jle	 SHORT $LN44@CheckNewPe

; 7243 : 		tblNo -= 999;

  00172	2d e7 03 00 00	 sub	 eax, 999		; 000003e7H

; 7244 : 	}

  00177	e9 ac 00 00 00	 jmp	 $LN68@CheckNewPe
$LN44@CheckNewPe:

; 7245 : 	else if (tblNo > 1281) {

  0017c	3d 01 05 00 00	 cmp	 eax, 1281		; 00000501H
  00181	7e 0a		 jle	 SHORT $LN46@CheckNewPe

; 7246 : 		tblNo -= 919;

  00183	2d 97 03 00 00	 sub	 eax, 919		; 00000397H

; 7247 : 	}

  00188	e9 9b 00 00 00	 jmp	 $LN68@CheckNewPe
$LN46@CheckNewPe:

; 7248 : 	else if (tblNo > 1239) {

  0018d	3d d7 04 00 00	 cmp	 eax, 1239		; 000004d7H
  00192	7e 0a		 jle	 SHORT $LN48@CheckNewPe

; 7249 : 		tblNo -= 889;

  00194	2d 79 03 00 00	 sub	 eax, 889		; 00000379H

; 7250 : 	}

  00199	e9 8a 00 00 00	 jmp	 $LN68@CheckNewPe
$LN48@CheckNewPe:

; 7251 : 	else if (tblNo > 1186) {

  0019e	3d a2 04 00 00	 cmp	 eax, 1186		; 000004a2H
  001a3	7e 07		 jle	 SHORT $LN50@CheckNewPe

; 7252 : 		tblNo -= 886;

  001a5	2d 76 03 00 00	 sub	 eax, 886		; 00000376H

; 7253 : 	}

  001aa	eb 7c		 jmp	 SHORT $LN68@CheckNewPe
$LN50@CheckNewPe:

; 7254 : 	else if (tblNo > 1173) {

  001ac	3d 95 04 00 00	 cmp	 eax, 1173		; 00000495H
  001b1	7e 07		 jle	 SHORT $LN52@CheckNewPe

; 7255 : 		tblNo -= 877;

  001b3	2d 6d 03 00 00	 sub	 eax, 877		; 0000036dH

; 7256 : 	}

  001b8	eb 6e		 jmp	 SHORT $LN68@CheckNewPe
$LN52@CheckNewPe:

; 7257 : 	else if (tblNo > 1172) {

  001ba	3d 94 04 00 00	 cmp	 eax, 1172		; 00000494H
  001bf	7e 07		 jle	 SHORT $LN54@CheckNewPe

; 7258 : 		tblNo -= 877;

  001c1	2d 6d 03 00 00	 sub	 eax, 877		; 0000036dH

; 7259 : 	}

  001c6	eb 60		 jmp	 SHORT $LN68@CheckNewPe
$LN54@CheckNewPe:

; 7260 : 	else if (tblNo > 1161) {

  001c8	3d 89 04 00 00	 cmp	 eax, 1161		; 00000489H
  001cd	7e 07		 jle	 SHORT $LN56@CheckNewPe

; 7261 : 		tblNo -= 868;

  001cf	2d 64 03 00 00	 sub	 eax, 868		; 00000364H

; 7262 : 	}

  001d4	eb 52		 jmp	 SHORT $LN68@CheckNewPe
$LN56@CheckNewPe:

; 7263 : 	else if (tblNo > 930) {

  001d6	3d a2 03 00 00	 cmp	 eax, 930		; 000003a2H
  001db	7e 07		 jle	 SHORT $LN58@CheckNewPe

; 7264 : 		tblNo -= 745;

  001dd	2d e9 02 00 00	 sub	 eax, 745		; 000002e9H

; 7265 : 	}

  001e2	eb 44		 jmp	 SHORT $LN68@CheckNewPe
$LN58@CheckNewPe:

; 7266 : 	else if (tblNo == 927) {

  001e4	3d 9f 03 00 00	 cmp	 eax, 927		; 0000039fH
  001e9	75 07		 jne	 SHORT $LN60@CheckNewPe

; 7267 : 		tblNo -= 634;

  001eb	b8 25 01 00 00	 mov	 eax, 293		; 00000125H

; 7268 : 	}

  001f0	eb 3a		 jmp	 SHORT $LN77@CheckNewPe
$LN60@CheckNewPe:

; 7269 : 	else if (tblNo > 929) {

  001f2	3d a1 03 00 00	 cmp	 eax, 929		; 000003a1H
  001f7	7e 07		 jle	 SHORT $LN62@CheckNewPe

; 7270 : 		tblNo -= 644;

  001f9	2d 84 02 00 00	 sub	 eax, 644		; 00000284H

; 7271 : 	}

  001fe	eb 28		 jmp	 SHORT $LN68@CheckNewPe
$LN62@CheckNewPe:

; 7272 : 	else if (tblNo > 927) {

  00200	3d 9f 03 00 00	 cmp	 eax, 927		; 0000039fH
  00205	7e 07		 jle	 SHORT $LN64@CheckNewPe

; 7273 : 		tblNo -= 643;

  00207	2d 83 02 00 00	 sub	 eax, 643		; 00000283H

; 7274 : 	}

  0020c	eb 1a		 jmp	 SHORT $LN68@CheckNewPe
$LN64@CheckNewPe:

; 7275 : 	else if (tblNo > 900) {

  0020e	3d 84 03 00 00	 cmp	 eax, 900		; 00000384H
  00213	7e 07		 jle	 SHORT $LN66@CheckNewPe

; 7276 : 		tblNo -= 621;

  00215	2d 6d 02 00 00	 sub	 eax, 621		; 0000026dH

; 7277 : 	}

  0021a	eb 0c		 jmp	 SHORT $LN68@CheckNewPe
$LN66@CheckNewPe:

; 7278 : 	else if (tblNo > 180) {

  0021c	3d b4 00 00 00	 cmp	 eax, 180		; 000000b4H
  00221	7e 05		 jle	 SHORT $LN68@CheckNewPe

; 7279 : 		tblNo -= (333 + 56);

  00223	2d 85 01 00 00	 sub	 eax, 389		; 00000185H
$LN68@CheckNewPe:

; 7280 : 	}
; 7281 : #elif defined(__ALBUM_46)
; 7282 : 	if (tblNo > 1800) {					//å°æ¶é­
; 7283 : 		tblNo -= 1208;
; 7284 : 	}
; 7285 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 7286 : 		tblNo -= 1201;
; 7287 : 	}
; 7288 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 7289 : 		tblNo -= 1200;
; 7290 : 	}
; 7291 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 7292 : 		tblNo -= 1175;
; 7293 : 	}
; 7294 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 7295 : 		tblNo -= 1167;
; 7296 : 	}
; 7297 : 	else if (tblNo > 1635) {	//éºéº
; 7298 : 		tblNo -= 1148;
; 7299 : 	}
; 7300 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 7301 : 		tblNo -= 1149;
; 7302 : 	}
; 7303 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 7304 : 		tblNo -= 1146;
; 7305 : 	}
; 7306 : 	else if (tblNo > 1568) {//æºäººé¾
; 7307 : 		tblNo -= 1103;
; 7308 : 	}
; 7309 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 7310 : 		tblNo -= 1101;
; 7311 : 	}
; 7312 : 	else if (tblNo > 1516) {
; 7313 : 		tblNo -= 1055;
; 7314 : 	}
; 7315 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 7316 : 		tblNo = 455;
; 7317 : 	}
; 7318 : 	else if (tblNo > 1509) {
; 7319 : 		tblNo -= 1054;
; 7320 : 	}
; 7321 : 	else if (tblNo == 1497) {
; 7322 : 		tblNo = 395;
; 7323 : 	}
; 7324 : 	else if (tblNo > 1495) {
; 7325 : 		tblNo -= 1044;
; 7326 : 	}
; 7327 : 	else if (tblNo > 1490) {
; 7328 : 		tblNo -= 1043;
; 7329 : 	}
; 7330 : 	else if (tblNo > 1485) {
; 7331 : 		tblNo -= 1040;
; 7332 : 	}
; 7333 : 	else if (tblNo > 1454) {
; 7334 : 		tblNo -= 1034;
; 7335 : 	}
; 7336 : 	else if (tblNo == 1214) {
; 7337 : 		tblNo = 331;
; 7338 : 	}
; 7339 : 	else if (tblNo == 1217) {
; 7340 : 		tblNo = 328;
; 7341 : 	}
; 7342 : 	else if (tblNo > 1361) {
; 7343 : 		tblNo -= 952;
; 7344 : 	}
; 7345 : 	else if (tblNo > 1356) {
; 7346 : 		tblNo -= 999;
; 7347 : 	}
; 7348 : 	else if (tblNo > 1281) {
; 7349 : 		tblNo -= 919;
; 7350 : 	}
; 7351 : 	else if (tblNo > 1239) {
; 7352 : 		tblNo -= 889;
; 7353 : 	}
; 7354 : 	else if (tblNo > 1186) {
; 7355 : 		tblNo -= 886;
; 7356 : 	}
; 7357 : 	else if (tblNo > 1173) {
; 7358 : 		tblNo -= 877;
; 7359 : 	}
; 7360 : 	else if (tblNo > 1172) {
; 7361 : 		tblNo -= 877;
; 7362 : 	}
; 7363 : 	else if (tblNo > 1161) {
; 7364 : 		tblNo -= 868;
; 7365 : 	}
; 7366 : 	else if (tblNo > 930) {
; 7367 : 		tblNo -= 745;
; 7368 : 	}
; 7369 : 	else if (tblNo == 927) {
; 7370 : 		tblNo -= 634;
; 7371 : 	}
; 7372 : 	else if (tblNo > 929) {
; 7373 : 		tblNo -= 644;
; 7374 : 	}
; 7375 : 	else if (tblNo > 927) {
; 7376 : 		tblNo -= 643;
; 7377 : 	}
; 7378 : 	else if (tblNo > 900) {
; 7379 : 		tblNo -= 621;
; 7380 : 	}
; 7381 : 	else if (tblNo > 180) {
; 7382 : 		tblNo -= (333 + 56);
; 7383 : 	}
; 7384 : #elif defined(__ALBUM_45)
; 7385 : 	if (tblNo > 1800) {					//å°æ¶é­
; 7386 : 		tblNo -= 1208;
; 7387 : 	}
; 7388 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 7389 : 		tblNo -= 1201;
; 7390 : 	}
; 7391 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 7392 : 		tblNo -= 1200;
; 7393 : 	}
; 7394 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 7395 : 		tblNo -= 1175;
; 7396 : 	}
; 7397 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 7398 : 		tblNo -= 1167;
; 7399 : 	}
; 7400 : 	else if (tblNo > 1635) {	//éºéº
; 7401 : 		tblNo -= 1148;
; 7402 : 	}
; 7403 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 7404 : 		tblNo -= 1149;
; 7405 : 	}
; 7406 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 7407 : 		tblNo -= 1146;
; 7408 : 	}
; 7409 : 	else if (tblNo > 1568) {//æºäººé¾
; 7410 : 		tblNo -= 1103;
; 7411 : 	}
; 7412 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 7413 : 		tblNo -= 1101;
; 7414 : 	}
; 7415 : 	else if (tblNo > 1516) {
; 7416 : 		tblNo -= 1055;
; 7417 : 	}
; 7418 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 7419 : 		tblNo = 455;
; 7420 : 	}
; 7421 : 	else if (tblNo > 1509) {
; 7422 : 		tblNo -= 1054;
; 7423 : 	}
; 7424 : 	else if (tblNo == 1497) {
; 7425 : 		tblNo = 395;
; 7426 : 	}
; 7427 : 	else if (tblNo > 1495) {
; 7428 : 		tblNo -= 1044;
; 7429 : 	}
; 7430 : 	else if (tblNo > 1490) {
; 7431 : 		tblNo -= 1043;
; 7432 : 	}
; 7433 : 	else if (tblNo > 1485) {
; 7434 : 		tblNo -= 1040;
; 7435 : 	}
; 7436 : 	else if (tblNo > 1454) {
; 7437 : 		tblNo -= 1034;
; 7438 : 	}
; 7439 : 	else if (tblNo == 1214) {
; 7440 : 		tblNo = 331;
; 7441 : 	}
; 7442 : 	else if (tblNo == 1217) {
; 7443 : 		tblNo = 328;
; 7444 : 	}
; 7445 : 	else if (tblNo > 1361) {
; 7446 : 		tblNo -= 952;
; 7447 : 	}
; 7448 : 	else if (tblNo > 1356) {
; 7449 : 		tblNo -= 999;
; 7450 : 	}
; 7451 : 	else if (tblNo > 1281) {
; 7452 : 		tblNo -= 919;
; 7453 : 	}
; 7454 : 	else if (tblNo > 1239) {
; 7455 : 		tblNo -= 889;
; 7456 : 	}
; 7457 : 	else if (tblNo > 1186) {
; 7458 : 		tblNo -= 886;
; 7459 : 	}
; 7460 : 	else if (tblNo > 1173) {
; 7461 : 		tblNo -= 877;
; 7462 : 	}
; 7463 : 	else if (tblNo > 1172) {
; 7464 : 		tblNo -= 877;
; 7465 : 	}
; 7466 : 	else if (tblNo > 1161) {
; 7467 : 		tblNo -= 868;
; 7468 : 	}
; 7469 : 	else if (tblNo > 930) {
; 7470 : 		tblNo -= 745;
; 7471 : 	}
; 7472 : 	else if (tblNo == 927) {
; 7473 : 		tblNo -= 634;
; 7474 : 	}
; 7475 : 	else if (tblNo > 929) {
; 7476 : 		tblNo -= 644;
; 7477 : 	}
; 7478 : 	else if (tblNo > 927) {
; 7479 : 		tblNo -= 643;
; 7480 : 	}
; 7481 : 	else if (tblNo > 900) {
; 7482 : 		tblNo -= 621;
; 7483 : 	}
; 7484 : 	else if (tblNo > 180) {
; 7485 : 		tblNo -= (333 + 56);
; 7486 : 	}
; 7487 : #elif defined(__ALBUM_44)
; 7488 : 	if (tblNo > 1800) {					//å°æ¶é­
; 7489 : 		tblNo -= 1208;
; 7490 : 	}
; 7491 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 7492 : 		tblNo -= 1201;
; 7493 : 	}
; 7494 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 7495 : 		tblNo -= 1200;
; 7496 : 	}
; 7497 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 7498 : 		tblNo -= 1175;
; 7499 : 	}
; 7500 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 7501 : 		tblNo -= 1167;
; 7502 : 	}
; 7503 : 	else if (tblNo > 1635) {	//éºéº
; 7504 : 		tblNo -= 1148;
; 7505 : 	}
; 7506 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 7507 : 		tblNo -= 1149;
; 7508 : 	}
; 7509 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 7510 : 		tblNo -= 1146;
; 7511 : 	}
; 7512 : 	else if (tblNo > 1568) {//æºäººé¾
; 7513 : 		tblNo -= 1103;
; 7514 : 	}
; 7515 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 7516 : 		tblNo -= 1101;
; 7517 : 	}
; 7518 : 	else if (tblNo > 1516) {
; 7519 : 		tblNo -= 1055;
; 7520 : 	}
; 7521 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 7522 : 		tblNo = 455;
; 7523 : 	}
; 7524 : 	else if (tblNo > 1509) {
; 7525 : 		tblNo -= 1054;
; 7526 : 	}
; 7527 : 	else if (tblNo == 1497) {
; 7528 : 		tblNo = 395;
; 7529 : 	}
; 7530 : 	else if (tblNo > 1495) {
; 7531 : 		tblNo -= 1044;
; 7532 : 	}
; 7533 : 	else if (tblNo > 1490) {
; 7534 : 		tblNo -= 1043;
; 7535 : 	}
; 7536 : 	else if (tblNo > 1485) {
; 7537 : 		tblNo -= 1040;
; 7538 : 	}
; 7539 : 	else if (tblNo > 1454) {
; 7540 : 		tblNo -= 1034;
; 7541 : 	}
; 7542 : 	else if (tblNo == 1214) {
; 7543 : 		tblNo = 331;
; 7544 : 	}
; 7545 : 	else if (tblNo == 1217) {
; 7546 : 		tblNo = 328;
; 7547 : 	}
; 7548 : 	else if (tblNo > 1361) {
; 7549 : 		tblNo -= 952;
; 7550 : 	}
; 7551 : 	else if (tblNo > 1356) {
; 7552 : 		tblNo -= 999;
; 7553 : 	}
; 7554 : 	else if (tblNo > 1281) {
; 7555 : 		tblNo -= 919;
; 7556 : 	}
; 7557 : 	else if (tblNo > 1239) {
; 7558 : 		tblNo -= 889;
; 7559 : 	}
; 7560 : 	else if (tblNo > 1186) {
; 7561 : 		tblNo -= 886;
; 7562 : 	}
; 7563 : 	else if (tblNo > 1173) {
; 7564 : 		tblNo -= 877;
; 7565 : 	}
; 7566 : 	else if (tblNo > 1172) {
; 7567 : 		tblNo -= 877;
; 7568 : 	}
; 7569 : 	else if (tblNo > 1161) {
; 7570 : 		tblNo -= 868;
; 7571 : 	}
; 7572 : 	else if (tblNo > 930) {
; 7573 : 		tblNo -= 745;
; 7574 : 	}
; 7575 : 	else if (tblNo == 927) {
; 7576 : 		tblNo -= 634;
; 7577 : 	}
; 7578 : 	else if (tblNo > 929) {
; 7579 : 		tblNo -= 644;
; 7580 : 	}
; 7581 : 	else if (tblNo > 927) {
; 7582 : 		tblNo -= 643;
; 7583 : 	}
; 7584 : 	else if (tblNo > 900) {
; 7585 : 		tblNo -= 621;
; 7586 : 	}
; 7587 : 	else if (tblNo > 180) {
; 7588 : 		tblNo -= (333 + 56);
; 7589 : 	}
; 7590 : #elif defined(__ALBUM_43)
; 7591 : 	if (tblNo > 1800) {					//å°æ¶é­
; 7592 : 		tblNo -= 1208;
; 7593 : 	}
; 7594 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 7595 : 		tblNo -= 1201;
; 7596 : 	}
; 7597 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 7598 : 		tblNo -= 1200;
; 7599 : 	}
; 7600 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 7601 : 		tblNo -= 1175;
; 7602 : 	}
; 7603 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 7604 : 		tblNo -= 1167;
; 7605 : 	}
; 7606 : 	else if (tblNo > 1635) {	//éºéº
; 7607 : 		tblNo -= 1148;
; 7608 : 	}
; 7609 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 7610 : 		tblNo -= 1149;
; 7611 : 	}
; 7612 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 7613 : 		tblNo -= 1146;
; 7614 : 	}
; 7615 : 	else if (tblNo > 1568) {//æºäººé¾
; 7616 : 		tblNo -= 1103;
; 7617 : 	}
; 7618 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 7619 : 		tblNo -= 1101;
; 7620 : 	}
; 7621 : 	else if (tblNo > 1516) {
; 7622 : 		tblNo -= 1055;
; 7623 : 	}
; 7624 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 7625 : 		tblNo = 455;
; 7626 : 	}
; 7627 : 	else if (tblNo > 1509) {
; 7628 : 		tblNo -= 1054;
; 7629 : 	}
; 7630 : 	else if (tblNo == 1497) {
; 7631 : 		tblNo = 395;
; 7632 : 	}
; 7633 : 	else if (tblNo > 1495) {
; 7634 : 		tblNo -= 1044;
; 7635 : 	}
; 7636 : 	else if (tblNo > 1490) {
; 7637 : 		tblNo -= 1043;
; 7638 : 	}
; 7639 : 	else if (tblNo > 1485) {
; 7640 : 		tblNo -= 1040;
; 7641 : 	}
; 7642 : 	else if (tblNo > 1454) {
; 7643 : 		tblNo -= 1034;
; 7644 : 	}
; 7645 : 	else if (tblNo == 1214) {
; 7646 : 		tblNo = 331;
; 7647 : 	}
; 7648 : 	else if (tblNo == 1217) {
; 7649 : 		tblNo = 328;
; 7650 : 	}
; 7651 : 	else if (tblNo > 1361) {
; 7652 : 		tblNo -= 952;
; 7653 : 	}
; 7654 : 	else if (tblNo > 1356) {
; 7655 : 		tblNo -= 999;
; 7656 : 	}
; 7657 : 	else if (tblNo > 1281) {
; 7658 : 		tblNo -= 919;
; 7659 : 	}
; 7660 : 	else if (tblNo > 1239) {
; 7661 : 		tblNo -= 889;
; 7662 : 	}
; 7663 : 	else if (tblNo > 1186) {
; 7664 : 		tblNo -= 886;
; 7665 : 	}
; 7666 : 	else if (tblNo > 1173) {
; 7667 : 		tblNo -= 877;
; 7668 : 	}
; 7669 : 	else if (tblNo > 1172) {
; 7670 : 		tblNo -= 877;
; 7671 : 	}
; 7672 : 	else if (tblNo > 1161) {
; 7673 : 		tblNo -= 868;
; 7674 : 	}
; 7675 : 	else if (tblNo > 930) {
; 7676 : 		tblNo -= 745;
; 7677 : 	}
; 7678 : 	else if (tblNo == 927) {
; 7679 : 		tblNo -= 634;
; 7680 : 	}
; 7681 : 	else if (tblNo > 929) {
; 7682 : 		tblNo -= 644;
; 7683 : 	}
; 7684 : 	else if (tblNo > 927) {
; 7685 : 		tblNo -= 643;
; 7686 : 	}
; 7687 : 	else if (tblNo > 900) {
; 7688 : 		tblNo -= 621;
; 7689 : 	}
; 7690 : 	else if (tblNo > 180) {
; 7691 : 		tblNo -= (333 + 56);
; 7692 : 	}
; 7693 : #elif defined(__ALBUM_42)
; 7694 : 	if (tblNo > 1800) {					//å°æ¶é­
; 7695 : 		tblNo -= 1208;
; 7696 : 	}
; 7697 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 7698 : 		tblNo -= 1201;
; 7699 : 	}
; 7700 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 7701 : 		tblNo -= 1200;
; 7702 : 	}
; 7703 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 7704 : 		tblNo -= 1175;
; 7705 : 	}
; 7706 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 7707 : 		tblNo -= 1167;
; 7708 : 	}
; 7709 : 	else if (tblNo > 1635) {	//éºéº
; 7710 : 		tblNo -= 1148;
; 7711 : 	}
; 7712 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 7713 : 		tblNo -= 1149;
; 7714 : 	}
; 7715 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 7716 : 		tblNo -= 1146;
; 7717 : 	}
; 7718 : 	else if (tblNo > 1568) {//æºäººé¾
; 7719 : 		tblNo -= 1103;
; 7720 : 	}
; 7721 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 7722 : 		tblNo -= 1101;
; 7723 : 	}
; 7724 : 	else if (tblNo > 1516) {
; 7725 : 		tblNo -= 1055;
; 7726 : 	}
; 7727 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 7728 : 		tblNo = 455;
; 7729 : 	}
; 7730 : 	else if (tblNo > 1509) {
; 7731 : 		tblNo -= 1054;
; 7732 : 	}
; 7733 : 	else if (tblNo == 1497) {
; 7734 : 		tblNo = 395;
; 7735 : 	}
; 7736 : 	else if (tblNo > 1495) {
; 7737 : 		tblNo -= 1044;
; 7738 : 	}
; 7739 : 	else if (tblNo > 1490) {
; 7740 : 		tblNo -= 1043;
; 7741 : 	}
; 7742 : 	else if (tblNo > 1485) {
; 7743 : 		tblNo -= 1040;
; 7744 : 	}
; 7745 : 	else if (tblNo > 1454) {
; 7746 : 		tblNo -= 1034;
; 7747 : 	}
; 7748 : 	else if (tblNo == 1214) {
; 7749 : 		tblNo = 331;
; 7750 : 	}
; 7751 : 	else if (tblNo == 1217) {
; 7752 : 		tblNo = 328;
; 7753 : 	}
; 7754 : 	else if (tblNo > 1361) {
; 7755 : 		tblNo -= 952;
; 7756 : 	}
; 7757 : 	else if (tblNo > 1356) {
; 7758 : 		tblNo -= 999;
; 7759 : 	}
; 7760 : 	else if (tblNo > 1281) {
; 7761 : 		tblNo -= 919;
; 7762 : 	}
; 7763 : 	else if (tblNo > 1239) {
; 7764 : 		tblNo -= 889;
; 7765 : 	}
; 7766 : 	else if (tblNo > 1186) {
; 7767 : 		tblNo -= 886;
; 7768 : 	}
; 7769 : 	else if (tblNo > 1173) {
; 7770 : 		tblNo -= 877;
; 7771 : 	}
; 7772 : 	else if (tblNo > 1172) {
; 7773 : 		tblNo -= 877;
; 7774 : 	}
; 7775 : 	else if (tblNo > 1161) {
; 7776 : 		tblNo -= 868;
; 7777 : 	}
; 7778 : 	else if (tblNo > 930) {
; 7779 : 		tblNo -= 745;
; 7780 : 	}
; 7781 : 	else if (tblNo == 927) {
; 7782 : 		tblNo -= 634;
; 7783 : 	}
; 7784 : 	else if (tblNo > 929) {
; 7785 : 		tblNo -= 644;
; 7786 : 	}
; 7787 : 	else if (tblNo > 927) {
; 7788 : 		tblNo -= 643;
; 7789 : 	}
; 7790 : 	else if (tblNo > 900) {
; 7791 : 		tblNo -= 621;
; 7792 : 	}
; 7793 : 	else if (tblNo > 180) {
; 7794 : 		tblNo -= (333 + 56);
; 7795 : 	}
; 7796 : #elif defined(__ALBUM_41)
; 7797 : 	if (tblNo > 1800) {					//å°æ¶é­
; 7798 : 		tblNo -= 1208;
; 7799 : 	}
; 7800 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 7801 : 		tblNo -= 1201;
; 7802 : 	}
; 7803 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 7804 : 		tblNo -= 1200;
; 7805 : 	}
; 7806 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 7807 : 		tblNo -= 1175;
; 7808 : 	}
; 7809 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 7810 : 		tblNo -= 1167;
; 7811 : 	}
; 7812 : 	else if (tblNo > 1635) {	//éºéº
; 7813 : 		tblNo -= 1148;
; 7814 : 	}
; 7815 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 7816 : 		tblNo -= 1149;
; 7817 : 	}
; 7818 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 7819 : 		tblNo -= 1146;
; 7820 : 	}
; 7821 : 	else if (tblNo > 1568) {//æºäººé¾
; 7822 : 		tblNo -= 1103;
; 7823 : 	}
; 7824 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 7825 : 		tblNo -= 1101;
; 7826 : 	}
; 7827 : 	else if (tblNo > 1516) {
; 7828 : 		tblNo -= 1055;
; 7829 : 	}
; 7830 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 7831 : 		tblNo = 455;
; 7832 : 	}
; 7833 : 	else if (tblNo > 1509) {
; 7834 : 		tblNo -= 1054;
; 7835 : 	}
; 7836 : 	else if (tblNo == 1497) {
; 7837 : 		tblNo = 395;
; 7838 : 	}
; 7839 : 	else if (tblNo > 1495) {
; 7840 : 		tblNo -= 1044;
; 7841 : 	}
; 7842 : 	else if (tblNo > 1490) {
; 7843 : 		tblNo -= 1043;
; 7844 : 	}
; 7845 : 	else if (tblNo > 1485) {
; 7846 : 		tblNo -= 1040;
; 7847 : 	}
; 7848 : 	else if (tblNo > 1454) {
; 7849 : 		tblNo -= 1034;
; 7850 : 	}
; 7851 : 	else if (tblNo == 1214) {
; 7852 : 		tblNo = 331;
; 7853 : 	}
; 7854 : 	else if (tblNo == 1217) {
; 7855 : 		tblNo = 328;
; 7856 : 	}
; 7857 : 	else if (tblNo > 1361) {
; 7858 : 		tblNo -= 952;
; 7859 : 	}
; 7860 : 	else if (tblNo > 1356) {
; 7861 : 		tblNo -= 999;
; 7862 : 	}
; 7863 : 	else if (tblNo > 1281) {
; 7864 : 		tblNo -= 919;
; 7865 : 	}
; 7866 : 	else if (tblNo > 1239) {
; 7867 : 		tblNo -= 889;
; 7868 : 	}
; 7869 : 	else if (tblNo > 1186) {
; 7870 : 		tblNo -= 886;
; 7871 : 	}
; 7872 : 	else if (tblNo > 1173) {
; 7873 : 		tblNo -= 877;
; 7874 : 	}
; 7875 : 	else if (tblNo > 1172) {
; 7876 : 		tblNo -= 877;
; 7877 : 	}
; 7878 : 	else if (tblNo > 1161) {
; 7879 : 		tblNo -= 868;
; 7880 : 	}
; 7881 : 	else if (tblNo > 930) {
; 7882 : 		tblNo -= 745;
; 7883 : 	}
; 7884 : 	else if (tblNo == 927) {
; 7885 : 		tblNo -= 634;
; 7886 : 	}
; 7887 : 	else if (tblNo > 929) {
; 7888 : 		tblNo -= 644;
; 7889 : 	}
; 7890 : 	else if (tblNo > 927) {
; 7891 : 		tblNo -= 643;
; 7892 : 	}
; 7893 : 	else if (tblNo > 900) {
; 7894 : 		tblNo -= 621;
; 7895 : 	}
; 7896 : 	else if (tblNo > 180) {
; 7897 : 		tblNo -= (333 + 56);
; 7898 : 	}
; 7899 : #elif defined(__ALBUM_40)
; 7900 : 	if (tblNo > 1800) {					//å°æ¶é­
; 7901 : 		tblNo -= 1208;
; 7902 : 	}
; 7903 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 7904 : 		tblNo -= 1201;
; 7905 : 	}
; 7906 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 7907 : 		tblNo -= 1200;
; 7908 : 	}
; 7909 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 7910 : 		tblNo -= 1175;
; 7911 : 	}
; 7912 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 7913 : 		tblNo -= 1167;
; 7914 : 	}
; 7915 : 	else if (tblNo > 1635) {	//éºéº
; 7916 : 		tblNo -= 1148;
; 7917 : 	}
; 7918 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 7919 : 		tblNo -= 1149;
; 7920 : 	}
; 7921 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 7922 : 		tblNo -= 1146;
; 7923 : 	}
; 7924 : 	else if (tblNo > 1568) {//æºäººé¾
; 7925 : 		tblNo -= 1103;
; 7926 : 	}
; 7927 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 7928 : 		tblNo -= 1101;
; 7929 : 	}
; 7930 : 	else if (tblNo > 1516) {
; 7931 : 		tblNo -= 1055;
; 7932 : 	}
; 7933 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 7934 : 		tblNo = 455;
; 7935 : 	}
; 7936 : 	else if (tblNo > 1509) {
; 7937 : 		tblNo -= 1054;
; 7938 : 	}
; 7939 : 	else if (tblNo == 1497) {
; 7940 : 		tblNo = 395;
; 7941 : 	}
; 7942 : 	else if (tblNo > 1495) {
; 7943 : 		tblNo -= 1044;
; 7944 : 	}
; 7945 : 	else if (tblNo > 1490) {
; 7946 : 		tblNo -= 1043;
; 7947 : 	}
; 7948 : 	else if (tblNo > 1485) {
; 7949 : 		tblNo -= 1040;
; 7950 : 	}
; 7951 : 	else if (tblNo > 1454) {
; 7952 : 		tblNo -= 1034;
; 7953 : 	}
; 7954 : 	else if (tblNo == 1214) {
; 7955 : 		tblNo = 331;
; 7956 : 	}
; 7957 : 	else if (tblNo == 1217) {
; 7958 : 		tblNo = 328;
; 7959 : 	}
; 7960 : 	else if (tblNo > 1361) {
; 7961 : 		tblNo -= 952;
; 7962 : 	}
; 7963 : 	else if (tblNo > 1356) {
; 7964 : 		tblNo -= 999;
; 7965 : 	}
; 7966 : 	else if (tblNo > 1281) {
; 7967 : 		tblNo -= 919;
; 7968 : 	}
; 7969 : 	else if (tblNo > 1239) {
; 7970 : 		tblNo -= 889;
; 7971 : 	}
; 7972 : 	else if (tblNo > 1186) {
; 7973 : 		tblNo -= 886;
; 7974 : 	}
; 7975 : 	else if (tblNo > 1173) {
; 7976 : 		tblNo -= 877;
; 7977 : 	}
; 7978 : 	else if (tblNo > 1172) {
; 7979 : 		tblNo -= 877;
; 7980 : 	}
; 7981 : 	else if (tblNo > 1161) {
; 7982 : 		tblNo -= 868;
; 7983 : 	}
; 7984 : 	else if (tblNo > 930) {
; 7985 : 		tblNo -= 745;
; 7986 : 	}
; 7987 : 	else if (tblNo == 927) {
; 7988 : 		tblNo -= 634;
; 7989 : 	}
; 7990 : 	else if (tblNo > 929) {
; 7991 : 		tblNo -= 644;
; 7992 : 	}
; 7993 : 	else if (tblNo > 927) {
; 7994 : 		tblNo -= 643;
; 7995 : 	}
; 7996 : 	else if (tblNo > 900) {
; 7997 : 		tblNo -= 621;
; 7998 : 	}
; 7999 : 	else if (tblNo > 180) {
; 8000 : 		tblNo -= (333 + 56);
; 8001 : 	}
; 8002 : #elif defined(__ALBUM_39)
; 8003 : 	if (tblNo > 1800) {					//å°æ¶é­
; 8004 : 		tblNo -= 1208;
; 8005 : 	}
; 8006 : 	else if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 8007 : 		tblNo -= 1201;
; 8008 : 	}
; 8009 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 8010 : 		tblNo -= 1200;
; 8011 : 	}
; 8012 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 8013 : 		tblNo -= 1175;
; 8014 : 	}
; 8015 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 8016 : 		tblNo -= 1167;
; 8017 : 	}
; 8018 : 	else if (tblNo > 1635) {	//éºéº
; 8019 : 		tblNo -= 1148;
; 8020 : 	}
; 8021 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 8022 : 		tblNo -= 1149;
; 8023 : 	}
; 8024 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8025 : 		tblNo -= 1146;
; 8026 : 	}
; 8027 : 	else if (tblNo > 1568) {//æºäººé¾
; 8028 : 		tblNo -= 1103;
; 8029 : 	}
; 8030 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8031 : 		tblNo -= 1101;
; 8032 : 	}
; 8033 : 	else if (tblNo > 1516) {
; 8034 : 		tblNo -= 1055;
; 8035 : 	}
; 8036 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8037 : 		tblNo = 455;
; 8038 : 	}
; 8039 : 	else if (tblNo > 1509) {
; 8040 : 		tblNo -= 1054;
; 8041 : 	}
; 8042 : 	else if (tblNo == 1497) {
; 8043 : 		tblNo = 395;
; 8044 : 	}
; 8045 : 	else if (tblNo > 1495) {
; 8046 : 		tblNo -= 1044;
; 8047 : 	}
; 8048 : 	else if (tblNo > 1490) {
; 8049 : 		tblNo -= 1043;
; 8050 : 	}
; 8051 : 	else if (tblNo > 1485) {
; 8052 : 		tblNo -= 1040;
; 8053 : 	}
; 8054 : 	else if (tblNo > 1454) {
; 8055 : 		tblNo -= 1034;
; 8056 : 	}
; 8057 : 	else if (tblNo == 1214) {
; 8058 : 		tblNo = 331;
; 8059 : 	}
; 8060 : 	else if (tblNo == 1217) {
; 8061 : 		tblNo = 328;
; 8062 : 	}
; 8063 : 	else if (tblNo > 1361) {
; 8064 : 		tblNo -= 952;
; 8065 : 	}
; 8066 : 	else if (tblNo > 1356) {
; 8067 : 		tblNo -= 999;
; 8068 : 	}
; 8069 : 	else if (tblNo > 1281) {
; 8070 : 		tblNo -= 919;
; 8071 : 	}
; 8072 : 	else if (tblNo > 1239) {
; 8073 : 		tblNo -= 889;
; 8074 : 	}
; 8075 : 	else if (tblNo > 1186) {
; 8076 : 		tblNo -= 886;
; 8077 : 	}
; 8078 : 	else if (tblNo > 1173) {
; 8079 : 		tblNo -= 877;
; 8080 : 	}
; 8081 : 	else if (tblNo > 1172) {
; 8082 : 		tblNo -= 877;
; 8083 : 	}
; 8084 : 	else if (tblNo > 1161) {
; 8085 : 		tblNo -= 868;
; 8086 : 	}
; 8087 : 	else if (tblNo > 930) {
; 8088 : 		tblNo -= 745;
; 8089 : 	}
; 8090 : 	else if (tblNo == 927) {
; 8091 : 		tblNo -= 634;
; 8092 : 	}
; 8093 : 	else if (tblNo > 929) {
; 8094 : 		tblNo -= 644;
; 8095 : 	}
; 8096 : 	else if (tblNo > 927) {
; 8097 : 		tblNo -= 643;
; 8098 : 	}
; 8099 : 	else if (tblNo > 900) {
; 8100 : 		tblNo -= 621;
; 8101 : 	}
; 8102 : 	else if (tblNo > 180) {
; 8103 : 		tblNo -= (333 + 56);
; 8104 : 	}
; 8105 : #elif defined(__ALBUM_38)
; 8106 : 
; 8107 : 	if (tblNo > 1755) {					//é´éåçé­çåç çç´
; 8108 : 		tblNo -= 1201;
; 8109 : 	}
; 8110 : 	else if (tblNo > 1739) { //1710 ){			//	é´ééªå® åç é£è
; 8111 : 		tblNo -= 1200;
; 8112 : 	}
; 8113 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 8114 : 		tblNo -= 1175;
; 8115 : 	}
; 8116 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 8117 : 		tblNo -= 1167;
; 8118 : 	}
; 8119 : 	else if (tblNo > 1635) {	//éºéº
; 8120 : 		tblNo -= 1148;
; 8121 : 	}
; 8122 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 8123 : 		tblNo -= 1149;
; 8124 : 	}
; 8125 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8126 : 		tblNo -= 1146;
; 8127 : 	}
; 8128 : 	else if (tblNo > 1568) {//æºäººé¾
; 8129 : 		tblNo -= 1103;
; 8130 : 	}
; 8131 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8132 : 		tblNo -= 1101;
; 8133 : 	}
; 8134 : 	else if (tblNo > 1516) {
; 8135 : 		tblNo -= 1055;
; 8136 : 	}
; 8137 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8138 : 		tblNo = 455;
; 8139 : 	}
; 8140 : 	else if (tblNo > 1509) {
; 8141 : 		tblNo -= 1054;
; 8142 : 	}
; 8143 : 	else if (tblNo == 1497) {
; 8144 : 		tblNo = 395;
; 8145 : 	}
; 8146 : 	else if (tblNo > 1495) {
; 8147 : 		tblNo -= 1044;
; 8148 : 	}
; 8149 : 	else if (tblNo > 1490) {
; 8150 : 		tblNo -= 1043;
; 8151 : 	}
; 8152 : 	else if (tblNo > 1485) {
; 8153 : 		tblNo -= 1040;
; 8154 : 	}
; 8155 : 	else if (tblNo > 1454) {
; 8156 : 		tblNo -= 1034;
; 8157 : 	}
; 8158 : 	else if (tblNo == 1214) {
; 8159 : 		tblNo = 331;
; 8160 : 	}
; 8161 : 	else if (tblNo == 1217) {
; 8162 : 		tblNo = 328;
; 8163 : 	}
; 8164 : 	else if (tblNo > 1361) {
; 8165 : 		tblNo -= 952;
; 8166 : 	}
; 8167 : 	else if (tblNo > 1356) {
; 8168 : 		tblNo -= 999;
; 8169 : 	}
; 8170 : 	else if (tblNo > 1281) {
; 8171 : 		tblNo -= 919;
; 8172 : 	}
; 8173 : 	else if (tblNo > 1239) {
; 8174 : 		tblNo -= 889;
; 8175 : 	}
; 8176 : 	else if (tblNo > 1186) {
; 8177 : 		tblNo -= 886;
; 8178 : 	}
; 8179 : 	else if (tblNo > 1173) {
; 8180 : 		tblNo -= 877;
; 8181 : 	}
; 8182 : 	else if (tblNo > 1172) {
; 8183 : 		tblNo -= 877;
; 8184 : 	}
; 8185 : 	else if (tblNo > 1161) {
; 8186 : 		tblNo -= 868;
; 8187 : 	}
; 8188 : 	else if (tblNo > 930) {
; 8189 : 		tblNo -= 745;
; 8190 : 	}
; 8191 : 	else if (tblNo == 927) {
; 8192 : 		tblNo -= 634;
; 8193 : 	}
; 8194 : 	else if (tblNo > 929) {
; 8195 : 		tblNo -= 644;
; 8196 : 	}
; 8197 : 	else if (tblNo > 927) {
; 8198 : 		tblNo -= 643;
; 8199 : 	}
; 8200 : 	else if (tblNo > 900) {
; 8201 : 		tblNo -= 621;
; 8202 : 	}
; 8203 : 	else if (tblNo > 180) {
; 8204 : 		tblNo -= (333 + 56);
; 8205 : 	}
; 8206 : #elif defined(__ALBUM_37)
; 8207 : 
; 8208 : 	if (tblNo > 1710) {			//	é´ééªå® åç é£è
; 8209 : 		tblNo -= 1200;
; 8210 : 	}
; 8211 : 	else if (tblNo > 1686) {			//æµ·åºèåå® 
; 8212 : 		tblNo -= 1175;
; 8213 : 	}
; 8214 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 8215 : 		tblNo -= 1167;
; 8216 : 	}
; 8217 : 	else if (tblNo > 1635) {	//éºéº
; 8218 : 		tblNo -= 1148;
; 8219 : 	}
; 8220 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 8221 : 		tblNo -= 1149;
; 8222 : 	}
; 8223 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8224 : 		tblNo -= 1146;
; 8225 : 	}
; 8226 : 	else if (tblNo > 1568) {//æºäººé¾
; 8227 : 		tblNo -= 1103;
; 8228 : 	}
; 8229 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8230 : 		tblNo -= 1101;
; 8231 : 	}
; 8232 : 	else if (tblNo > 1516) {
; 8233 : 		tblNo -= 1055;
; 8234 : 	}
; 8235 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8236 : 		tblNo = 455;
; 8237 : 	}
; 8238 : 	else if (tblNo > 1509) {
; 8239 : 		tblNo -= 1054;
; 8240 : 	}
; 8241 : 	else if (tblNo == 1497) {
; 8242 : 		tblNo = 395;
; 8243 : 	}
; 8244 : 	else if (tblNo > 1495) {
; 8245 : 		tblNo -= 1044;
; 8246 : 	}
; 8247 : 	else if (tblNo > 1490) {
; 8248 : 		tblNo -= 1043;
; 8249 : 	}
; 8250 : 	else if (tblNo > 1485) {
; 8251 : 		tblNo -= 1040;
; 8252 : 	}
; 8253 : 	else if (tblNo > 1454) {
; 8254 : 		tblNo -= 1034;
; 8255 : 	}
; 8256 : 	else if (tblNo == 1214) {
; 8257 : 		tblNo = 331;
; 8258 : 	}
; 8259 : 	else if (tblNo == 1217) {
; 8260 : 		tblNo = 328;
; 8261 : 	}
; 8262 : 	else if (tblNo > 1361) {
; 8263 : 		tblNo -= 952;
; 8264 : 	}
; 8265 : 	else if (tblNo > 1356) {
; 8266 : 		tblNo -= 999;
; 8267 : 	}
; 8268 : 	else if (tblNo > 1281) {
; 8269 : 		tblNo -= 919;
; 8270 : 	}
; 8271 : 	else if (tblNo > 1239) {
; 8272 : 		tblNo -= 889;
; 8273 : 	}
; 8274 : 	else if (tblNo > 1186) {
; 8275 : 		tblNo -= 886;
; 8276 : 	}
; 8277 : 	else if (tblNo > 1173) {
; 8278 : 		tblNo -= 877;
; 8279 : 	}
; 8280 : 	else if (tblNo > 1172) {
; 8281 : 		tblNo -= 877;
; 8282 : 	}
; 8283 : 	else if (tblNo > 1161) {
; 8284 : 		tblNo -= 868;
; 8285 : 	}
; 8286 : 	else if (tblNo > 930) {
; 8287 : 		tblNo -= 745;
; 8288 : 	}
; 8289 : 	else if (tblNo == 927) {
; 8290 : 		tblNo -= 634;
; 8291 : 	}
; 8292 : 	else if (tblNo > 929) {
; 8293 : 		tblNo -= 644;
; 8294 : 	}
; 8295 : 	else if (tblNo > 927) {
; 8296 : 		tblNo -= 643;
; 8297 : 	}
; 8298 : 	else if (tblNo > 900) {
; 8299 : 		tblNo -= 621;
; 8300 : 	}
; 8301 : 	else if (tblNo > 180) {
; 8302 : 		tblNo -= (333 + 56);
; 8303 : 	}
; 8304 : #elif defined(__ALBUM_36)
; 8305 : 
; 8306 : 	if (tblNo > 1686) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 8307 : 		tblNo -= 1175;
; 8308 : 	}
; 8309 : 	else if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2	8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 8310 : 		tblNo -= 1167;
; 8311 : 	}
; 8312 : 	else if (tblNo > 1635) {	//éºéº
; 8313 : 		tblNo -= 1148;
; 8314 : 	}
; 8315 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 8316 : 		tblNo -= 1149;
; 8317 : 	}
; 8318 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8319 : 		tblNo -= 1146;
; 8320 : 	}
; 8321 : 	else if (tblNo > 1568) {//æºäººé¾
; 8322 : 		tblNo -= 1103;
; 8323 : 	}
; 8324 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8325 : 		tblNo -= 1101;
; 8326 : 	}
; 8327 : 	else if (tblNo > 1516) {
; 8328 : 		tblNo -= 1055;
; 8329 : 	}
; 8330 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8331 : 		tblNo = 455;
; 8332 : 	}
; 8333 : 	else if (tblNo > 1509) {
; 8334 : 		tblNo -= 1054;
; 8335 : 	}
; 8336 : 	else if (tblNo == 1497) {
; 8337 : 		tblNo = 395;
; 8338 : 	}
; 8339 : 	else if (tblNo > 1495) {
; 8340 : 		tblNo -= 1044;
; 8341 : 	}
; 8342 : 	else if (tblNo > 1490) {
; 8343 : 		tblNo -= 1043;
; 8344 : 	}
; 8345 : 	else if (tblNo > 1485) {
; 8346 : 		tblNo -= 1040;
; 8347 : 	}
; 8348 : 	else if (tblNo > 1454) {
; 8349 : 		tblNo -= 1034;
; 8350 : 	}
; 8351 : 	else if (tblNo == 1214) {
; 8352 : 		tblNo = 331;
; 8353 : 	}
; 8354 : 	else if (tblNo == 1217) {
; 8355 : 		tblNo = 328;
; 8356 : 	}
; 8357 : 	else if (tblNo > 1361) {
; 8358 : 		tblNo -= 952;
; 8359 : 	}
; 8360 : 	else if (tblNo > 1356) {
; 8361 : 		tblNo -= 999;
; 8362 : 	}
; 8363 : 	else if (tblNo > 1281) {
; 8364 : 		tblNo -= 919;
; 8365 : 	}
; 8366 : 	else if (tblNo > 1239) {
; 8367 : 		tblNo -= 889;
; 8368 : 	}
; 8369 : 	else if (tblNo > 1186) {
; 8370 : 		tblNo -= 886;
; 8371 : 	}
; 8372 : 	else if (tblNo > 1173) {
; 8373 : 		tblNo -= 877;
; 8374 : 	}
; 8375 : 	else if (tblNo > 1172) {
; 8376 : 		tblNo -= 877;
; 8377 : 	}
; 8378 : 	else if (tblNo > 1161) {
; 8379 : 		tblNo -= 868;
; 8380 : 	}
; 8381 : 	else if (tblNo > 930) {
; 8382 : 		tblNo -= 745;
; 8383 : 	}
; 8384 : 	else if (tblNo == 927) {
; 8385 : 		tblNo -= 634;
; 8386 : 	}
; 8387 : 	else if (tblNo > 929) {
; 8388 : 		tblNo -= 644;
; 8389 : 	}
; 8390 : 	else if (tblNo > 927) {
; 8391 : 		tblNo -= 643;
; 8392 : 	}
; 8393 : 	else if (tblNo > 900) {
; 8394 : 		tblNo -= 621;
; 8395 : 	}
; 8396 : 	else if (tblNo > 180) {
; 8397 : 		tblNo -= (333 + 56);
; 8398 : 	}
; 8399 : #elif defined(__ALBUM_35)
; 8400 : 
; 8401 : 	if (tblNo > 1641) {			//é¸¡å¹´å½4 ç²è«2 8.0ç¬¬ä¸æ¬¡æ´åæµè¯
; 8402 : 		tblNo -= 1167;
; 8403 : 	}
; 8404 : 	else if (tblNo > 1635) {	//éºéº
; 8405 : 		tblNo -= 1148;
; 8406 : 	}
; 8407 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 
; 8408 : 		tblNo -= 1149;
; 8409 : 	}
; 8410 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8411 : 		tblNo -= 1146;
; 8412 : 	}
; 8413 : 	else if (tblNo > 1568) {//æºäººé¾
; 8414 : 		tblNo -= 1103;
; 8415 : 	}
; 8416 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8417 : 		tblNo -= 1101;
; 8418 : 	}
; 8419 : 	else if (tblNo > 1516) {
; 8420 : 		tblNo -= 1055;
; 8421 : 	}
; 8422 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8423 : 		tblNo = 455;
; 8424 : 	}
; 8425 : 	else if (tblNo > 1509) {
; 8426 : 		tblNo -= 1054;
; 8427 : 	}
; 8428 : 	else if (tblNo == 1497) {
; 8429 : 		tblNo = 395;
; 8430 : 	}
; 8431 : 	else if (tblNo > 1495) {
; 8432 : 		tblNo -= 1044;
; 8433 : 	}
; 8434 : 	else if (tblNo > 1490) {
; 8435 : 		tblNo -= 1043;
; 8436 : 	}
; 8437 : 	else if (tblNo > 1485) {
; 8438 : 		tblNo -= 1040;
; 8439 : 	}
; 8440 : 	else if (tblNo > 1454) {
; 8441 : 		tblNo -= 1034;
; 8442 : 	}
; 8443 : 	else if (tblNo == 1214) {
; 8444 : 		tblNo = 331;
; 8445 : 	}
; 8446 : 	else if (tblNo == 1217) {
; 8447 : 		tblNo = 328;
; 8448 : 	}
; 8449 : 	else if (tblNo > 1361) {
; 8450 : 		tblNo -= 952;
; 8451 : 	}
; 8452 : 	else if (tblNo > 1356) {
; 8453 : 		tblNo -= 999;
; 8454 : 	}
; 8455 : 	else if (tblNo > 1281) {
; 8456 : 		tblNo -= 919;
; 8457 : 	}
; 8458 : 	else if (tblNo > 1239) {
; 8459 : 		tblNo -= 889;
; 8460 : 	}
; 8461 : 	else if (tblNo > 1186) {
; 8462 : 		tblNo -= 886;
; 8463 : 	}
; 8464 : 	else if (tblNo > 1173) {
; 8465 : 		tblNo -= 877;
; 8466 : 	}
; 8467 : 	else if (tblNo > 1172) {
; 8468 : 		tblNo -= 877;
; 8469 : 	}
; 8470 : 	else if (tblNo > 1161) {
; 8471 : 		tblNo -= 868;
; 8472 : 	}
; 8473 : 	else if (tblNo > 930) {
; 8474 : 		tblNo -= 745;
; 8475 : 	}
; 8476 : 	else if (tblNo == 927) {
; 8477 : 		tblNo -= 634;
; 8478 : 	}
; 8479 : 	else if (tblNo > 929) {
; 8480 : 		tblNo -= 644;
; 8481 : 	}
; 8482 : 	else if (tblNo > 927) {
; 8483 : 		tblNo -= 643;
; 8484 : 	}
; 8485 : 	else if (tblNo > 900) {
; 8486 : 		tblNo -= 621;
; 8487 : 	}
; 8488 : 	else if (tblNo > 180) {
; 8489 : 		tblNo -= (333 + 56);
; 8490 : 	}
; 8491 : #elif defined(__ALBUM_34)
; 8492 : 
; 8493 : 	if (tblNo > 1639) {			//é¸¡å¹´å½4
; 8494 : 		tblNo -= 1167;
; 8495 : 	}
; 8496 : 	else if (tblNo > 1635) {	//éºéº
; 8497 : 		tblNo -= 1148;
; 8498 : 	}
; 8499 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 éºéº
; 8500 : 		tblNo -= 1149;
; 8501 : 	}
; 8502 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8503 : 		tblNo -= 1146;
; 8504 : 	}
; 8505 : 	else if (tblNo > 1568) {//æºäººé¾
; 8506 : 		tblNo -= 1103;
; 8507 : 	}
; 8508 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8509 : 		tblNo -= 1101;
; 8510 : 	}
; 8511 : 	else if (tblNo > 1516) {
; 8512 : 		tblNo -= 1055;
; 8513 : 	}
; 8514 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8515 : 		tblNo = 455;
; 8516 : 	}
; 8517 : 	else if (tblNo > 1509) {
; 8518 : 		tblNo -= 1054;
; 8519 : 	}
; 8520 : 	else if (tblNo == 1497) {
; 8521 : 		tblNo = 395;
; 8522 : 	}
; 8523 : 	else if (tblNo > 1495) {
; 8524 : 		tblNo -= 1044;
; 8525 : 	}
; 8526 : 	else if (tblNo > 1490) {
; 8527 : 		tblNo -= 1043;
; 8528 : 	}
; 8529 : 	else if (tblNo > 1485) {
; 8530 : 		tblNo -= 1040;
; 8531 : 	}
; 8532 : 	else if (tblNo > 1454) {
; 8533 : 		tblNo -= 1034;
; 8534 : 	}
; 8535 : 	else if (tblNo == 1214) {
; 8536 : 		tblNo = 331;
; 8537 : 	}
; 8538 : 	else if (tblNo == 1217) {
; 8539 : 		tblNo = 328;
; 8540 : 	}
; 8541 : 	else if (tblNo > 1361) {
; 8542 : 		tblNo -= 952;
; 8543 : 	}
; 8544 : 	else if (tblNo > 1356) {
; 8545 : 		tblNo -= 999;
; 8546 : 	}
; 8547 : 	else if (tblNo > 1281) {
; 8548 : 		tblNo -= 919;
; 8549 : 	}
; 8550 : 	else if (tblNo > 1239) {
; 8551 : 		tblNo -= 889;
; 8552 : 	}
; 8553 : 	else if (tblNo > 1186) {
; 8554 : 		tblNo -= 886;
; 8555 : 	}
; 8556 : 	else if (tblNo > 1173) {
; 8557 : 		tblNo -= 877;
; 8558 : 	}
; 8559 : 	else if (tblNo > 1172) {
; 8560 : 		tblNo -= 877;
; 8561 : 	}
; 8562 : 	else if (tblNo > 1161) {
; 8563 : 		tblNo -= 868;
; 8564 : 	}
; 8565 : 	else if (tblNo > 930) {
; 8566 : 		tblNo -= 745;
; 8567 : 	}
; 8568 : 	else if (tblNo == 927) {
; 8569 : 		tblNo -= 634;
; 8570 : 	}
; 8571 : 	else if (tblNo > 929) {
; 8572 : 		tblNo -= 644;
; 8573 : 	}
; 8574 : 	else if (tblNo > 927) {
; 8575 : 		tblNo -= 643;
; 8576 : 	}
; 8577 : 	else if (tblNo > 900) {
; 8578 : 		tblNo -= 621;
; 8579 : 	}
; 8580 : 	else if (tblNo > 180) {
; 8581 : 		tblNo -= (333 + 56);
; 8582 : 	}
; 8583 : #elif defined(__ALBUM_33)
; 8584 : 
; 8585 : 	if (tblNo > 1635) {
; 8586 : 		tblNo -= 1148;
; 8587 : 	}
; 8588 : 	else if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2 éºéº
; 8589 : 		tblNo -= 1149;
; 8590 : 	}
; 8591 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8592 : 		tblNo -= 1146;
; 8593 : 	}
; 8594 : 	else if (tblNo > 1568) {//æºäººé¾
; 8595 : 		tblNo -= 1103;
; 8596 : 	}
; 8597 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8598 : 		tblNo -= 1101;
; 8599 : 	}
; 8600 : 	else if (tblNo > 1516) {
; 8601 : 		tblNo -= 1055;
; 8602 : 	}
; 8603 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8604 : 		tblNo = 455;
; 8605 : 	}
; 8606 : 	else if (tblNo > 1509) {
; 8607 : 		tblNo -= 1054;
; 8608 : 	}
; 8609 : 	else if (tblNo == 1497) {
; 8610 : 		tblNo = 395;
; 8611 : 	}
; 8612 : 	else if (tblNo > 1495) {
; 8613 : 		tblNo -= 1044;
; 8614 : 	}
; 8615 : 	else if (tblNo > 1490) {
; 8616 : 		tblNo -= 1043;
; 8617 : 	}
; 8618 : 	else if (tblNo > 1485) {
; 8619 : 		tblNo -= 1040;
; 8620 : 	}
; 8621 : 	else if (tblNo > 1454) {
; 8622 : 		tblNo -= 1034;
; 8623 : 	}
; 8624 : 	else if (tblNo == 1214) {
; 8625 : 		tblNo = 331;
; 8626 : 	}
; 8627 : 	else if (tblNo == 1217) {
; 8628 : 		tblNo = 328;
; 8629 : 	}
; 8630 : 	else if (tblNo > 1361) {
; 8631 : 		tblNo -= 952;
; 8632 : 	}
; 8633 : 	else if (tblNo > 1356) {
; 8634 : 		tblNo -= 999;
; 8635 : 	}
; 8636 : 	else if (tblNo > 1281) {
; 8637 : 		tblNo -= 919;
; 8638 : 	}
; 8639 : 	else if (tblNo > 1239) {
; 8640 : 		tblNo -= 889;
; 8641 : 	}
; 8642 : 	else if (tblNo > 1186) {
; 8643 : 		tblNo -= 886;
; 8644 : 	}
; 8645 : 	else if (tblNo > 1173) {
; 8646 : 		tblNo -= 877;
; 8647 : 	}
; 8648 : 	else if (tblNo > 1172) {
; 8649 : 		tblNo -= 877;
; 8650 : 	}
; 8651 : 	else if (tblNo > 1161) {
; 8652 : 		tblNo -= 868;
; 8653 : 	}
; 8654 : 	else if (tblNo > 930) {
; 8655 : 		tblNo -= 745;
; 8656 : 	}
; 8657 : 	else if (tblNo == 927) {
; 8658 : 		tblNo -= 634;
; 8659 : 	}
; 8660 : 	else if (tblNo > 929) {
; 8661 : 		tblNo -= 644;
; 8662 : 	}
; 8663 : 	else if (tblNo > 927) {
; 8664 : 		tblNo -= 643;
; 8665 : 	}
; 8666 : 	else if (tblNo > 900) {
; 8667 : 		tblNo -= 621;
; 8668 : 	}
; 8669 : 	else if (tblNo > 180) {
; 8670 : 		tblNo -= (333 + 56);
; 8671 : 	}
; 8672 : #elif defined(__ALBUM_32)
; 8673 : 
; 8674 : 	if (tblNo > 1634) {	//ç«å¥³1 ç«å¥³2
; 8675 : 		tblNo -= 1149;
; 8676 : 	}
; 8677 : 	else if (tblNo > 1628) {	//ç«è1 ç«è2 çäºº1 çäºº2
; 8678 : 		tblNo -= 1147;
; 8679 : 	}
; 8680 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8681 : 		tblNo -= 1146;
; 8682 : 	}
; 8683 : 	else if (tblNo > 1568) {//æºäººé¾
; 8684 : 		tblNo -= 1103;
; 8685 : 	}
; 8686 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8687 : 		tblNo -= 1101;
; 8688 : 	}
; 8689 : 	else if (tblNo > 1516) {
; 8690 : 		tblNo -= 1055;
; 8691 : 	}
; 8692 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8693 : 		tblNo = 455;
; 8694 : 	}
; 8695 : 	else if (tblNo > 1509) {
; 8696 : 		tblNo -= 1054;
; 8697 : 	}
; 8698 : 	else if (tblNo == 1497) {
; 8699 : 		tblNo = 395;
; 8700 : 	}
; 8701 : 	else if (tblNo > 1495) {
; 8702 : 		tblNo -= 1044;
; 8703 : 	}
; 8704 : 	else if (tblNo > 1490) {
; 8705 : 		tblNo -= 1043;
; 8706 : 	}
; 8707 : 	else if (tblNo > 1485) {
; 8708 : 		tblNo -= 1040;
; 8709 : 	}
; 8710 : 	else if (tblNo > 1454) {
; 8711 : 		tblNo -= 1034;
; 8712 : 	}
; 8713 : 	else if (tblNo == 1214) {
; 8714 : 		tblNo = 331;
; 8715 : 	}
; 8716 : 	else if (tblNo == 1217) {
; 8717 : 		tblNo = 328;
; 8718 : 	}
; 8719 : 	else if (tblNo > 1361) {
; 8720 : 		tblNo -= 952;
; 8721 : 	}
; 8722 : 	else if (tblNo > 1356) {
; 8723 : 		tblNo -= 999;
; 8724 : 	}
; 8725 : 	else if (tblNo > 1281) {
; 8726 : 		tblNo -= 919;
; 8727 : 	}
; 8728 : 	else if (tblNo > 1239) {
; 8729 : 		tblNo -= 889;
; 8730 : 	}
; 8731 : 	else if (tblNo > 1186) {
; 8732 : 		tblNo -= 886;
; 8733 : 	}
; 8734 : 	else if (tblNo > 1173) {
; 8735 : 		tblNo -= 877;
; 8736 : 	}
; 8737 : 	else if (tblNo > 1172) {
; 8738 : 		tblNo -= 877;
; 8739 : 	}
; 8740 : 	else if (tblNo > 1161) {
; 8741 : 		tblNo -= 868;
; 8742 : 	}
; 8743 : 	else if (tblNo > 930) {
; 8744 : 		tblNo -= 745;
; 8745 : 	}
; 8746 : 	else if (tblNo == 927) {
; 8747 : 		tblNo -= 634;
; 8748 : 	}
; 8749 : 	else if (tblNo > 929) {
; 8750 : 		tblNo -= 644;
; 8751 : 	}
; 8752 : 	else if (tblNo > 927) {
; 8753 : 		tblNo -= 643;
; 8754 : 	}
; 8755 : 	else if (tblNo > 900) {
; 8756 : 		tblNo -= 621;
; 8757 : 	}
; 8758 : 	else if (tblNo > 180) {
; 8759 : 		tblNo -= (333 + 56);
; 8760 : 	}
; 8761 : #elif defined(__ALBUM_31)
; 8762 : 
; 8763 : 	if (tblNo > 1628) {	//ç«è1 ç«è2 çäºº1 çäºº2
; 8764 : 		tblNo -= 1147;
; 8765 : 	}
; 8766 : 	else if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8767 : 		tblNo -= 1146;
; 8768 : 	}
; 8769 : 	else if (tblNo > 1568) {//æºäººé¾
; 8770 : 		tblNo -= 1103;
; 8771 : 	}
; 8772 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8773 : 		tblNo -= 1101;
; 8774 : 	}
; 8775 : 	else if (tblNo > 1516) {
; 8776 : 		tblNo -= 1055;
; 8777 : 	}
; 8778 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8779 : 		tblNo = 455;
; 8780 : 	}
; 8781 : 	else if (tblNo > 1509) {
; 8782 : 		tblNo -= 1054;
; 8783 : 	}
; 8784 : 	else if (tblNo == 1497) {
; 8785 : 		tblNo = 395;
; 8786 : 	}
; 8787 : 	else if (tblNo > 1495) {
; 8788 : 		tblNo -= 1044;
; 8789 : 	}
; 8790 : 	else if (tblNo > 1490) {
; 8791 : 		tblNo -= 1043;
; 8792 : 	}
; 8793 : 	else if (tblNo > 1485) {
; 8794 : 		tblNo -= 1040;
; 8795 : 	}
; 8796 : 	else if (tblNo > 1454) {
; 8797 : 		tblNo -= 1034;
; 8798 : 	}
; 8799 : 	else if (tblNo == 1214) {
; 8800 : 		tblNo = 331;
; 8801 : 	}
; 8802 : 	else if (tblNo == 1217) {
; 8803 : 		tblNo = 328;
; 8804 : 	}
; 8805 : 	else if (tblNo > 1361) {
; 8806 : 		tblNo -= 952;
; 8807 : 	}
; 8808 : 	else if (tblNo > 1356) {
; 8809 : 		tblNo -= 999;
; 8810 : 	}
; 8811 : 	else if (tblNo > 1281) {
; 8812 : 		tblNo -= 919;
; 8813 : 	}
; 8814 : 	else if (tblNo > 1239) {
; 8815 : 		tblNo -= 889;
; 8816 : 	}
; 8817 : 	else if (tblNo > 1186) {
; 8818 : 		tblNo -= 886;
; 8819 : 	}
; 8820 : 	else if (tblNo > 1173) {
; 8821 : 		tblNo -= 877;
; 8822 : 	}
; 8823 : 	else if (tblNo > 1172) {
; 8824 : 		tblNo -= 877;
; 8825 : 	}
; 8826 : 	else if (tblNo > 1161) {
; 8827 : 		tblNo -= 868;
; 8828 : 	}
; 8829 : 	else if (tblNo > 930) {
; 8830 : 		tblNo -= 745;
; 8831 : 	}
; 8832 : 	else if (tblNo == 927) {
; 8833 : 		tblNo -= 634;
; 8834 : 	}
; 8835 : 	else if (tblNo > 929) {
; 8836 : 		tblNo -= 644;
; 8837 : 	}
; 8838 : 	else if (tblNo > 927) {
; 8839 : 		tblNo -= 643;
; 8840 : 	}
; 8841 : 	else if (tblNo > 900) {
; 8842 : 		tblNo -= 621;
; 8843 : 	}
; 8844 : 	else if (tblNo > 180) {
; 8845 : 		tblNo -= (333 + 56);
; 8846 : 	}
; 8847 : #elif defined(__ALBUM_30)
; 8848 : 
; 8849 : 	if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼ å¸ä¼é·
; 8850 : 		tblNo -= 1146;
; 8851 : 	}
; 8852 : 	else if (tblNo > 1568) {//æºäººé¾
; 8853 : 		tblNo -= 1103;
; 8854 : 	}
; 8855 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8856 : 		tblNo -= 1101;
; 8857 : 	}
; 8858 : 	else if (tblNo > 1516) {
; 8859 : 		tblNo -= 1055;
; 8860 : 	}
; 8861 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8862 : 		tblNo = 455;
; 8863 : 	}
; 8864 : 	else if (tblNo > 1509) {
; 8865 : 		tblNo -= 1054;
; 8866 : 	}
; 8867 : 	else if (tblNo == 1497) {
; 8868 : 		tblNo = 395;
; 8869 : 	}
; 8870 : 	else if (tblNo > 1495) {
; 8871 : 		tblNo -= 1044;
; 8872 : 	}
; 8873 : 	else if (tblNo > 1490) {
; 8874 : 		tblNo -= 1043;
; 8875 : 	}
; 8876 : 	else if (tblNo > 1485) {
; 8877 : 		tblNo -= 1040;
; 8878 : 	}
; 8879 : 	else if (tblNo > 1454) {
; 8880 : 		tblNo -= 1034;
; 8881 : 	}
; 8882 : 	else if (tblNo == 1214) {
; 8883 : 		tblNo = 331;
; 8884 : 	}
; 8885 : 	else if (tblNo == 1217) {
; 8886 : 		tblNo = 328;
; 8887 : 	}
; 8888 : 	else if (tblNo > 1361) {
; 8889 : 		tblNo -= 952;
; 8890 : 	}
; 8891 : 	else if (tblNo > 1356) {
; 8892 : 		tblNo -= 999;
; 8893 : 	}
; 8894 : 	else if (tblNo > 1281) {
; 8895 : 		tblNo -= 919;
; 8896 : 	}
; 8897 : 	else if (tblNo > 1239) {
; 8898 : 		tblNo -= 889;
; 8899 : 	}
; 8900 : 	else if (tblNo > 1186) {
; 8901 : 		tblNo -= 886;
; 8902 : 	}
; 8903 : 	else if (tblNo > 1173) {
; 8904 : 		tblNo -= 877;
; 8905 : 	}
; 8906 : 	else if (tblNo > 1172) {
; 8907 : 		tblNo -= 877;
; 8908 : 	}
; 8909 : 	else if (tblNo > 1161) {
; 8910 : 		tblNo -= 868;
; 8911 : 	}
; 8912 : 	else if (tblNo > 930) {
; 8913 : 		tblNo -= 745;
; 8914 : 	}
; 8915 : 	else if (tblNo == 927) {
; 8916 : 		tblNo -= 634;
; 8917 : 	}
; 8918 : 	else if (tblNo > 929) {
; 8919 : 		tblNo -= 644;
; 8920 : 	}
; 8921 : 	else if (tblNo > 927) {
; 8922 : 		tblNo -= 643;
; 8923 : 	}
; 8924 : 	else if (tblNo > 900) {
; 8925 : 		tblNo -= 621;
; 8926 : 	}
; 8927 : 	else if (tblNo > 180) {
; 8928 : 		tblNo -= (333 + 56);
; 8929 : 	}
; 8930 : #elif defined(__ALBUM_29)
; 8931 : 
; 8932 : 	if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç ç½ç¼
; 8933 : 		tblNo -= 1146;
; 8934 : 	}
; 8935 : 	else if (tblNo > 1568) {//æºäººé¾
; 8936 : 		tblNo -= 1103;
; 8937 : 	}
; 8938 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 8939 : 		tblNo -= 1101;
; 8940 : 	}
; 8941 : 	else if (tblNo > 1516) {
; 8942 : 		tblNo -= 1055;
; 8943 : 	}
; 8944 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 8945 : 		tblNo = 455;
; 8946 : 	}
; 8947 : 	else if (tblNo > 1509) {
; 8948 : 		tblNo -= 1054;
; 8949 : 	}
; 8950 : 	else if (tblNo == 1497) {
; 8951 : 		tblNo = 395;
; 8952 : 	}
; 8953 : 	else if (tblNo > 1495) {
; 8954 : 		tblNo -= 1044;
; 8955 : 	}
; 8956 : 	else if (tblNo > 1490) {
; 8957 : 		tblNo -= 1043;
; 8958 : 	}
; 8959 : 	else if (tblNo > 1485) {
; 8960 : 		tblNo -= 1040;
; 8961 : 	}
; 8962 : 	else if (tblNo > 1454) {
; 8963 : 		tblNo -= 1034;
; 8964 : 	}
; 8965 : 	else if (tblNo == 1214) {
; 8966 : 		tblNo = 331;
; 8967 : 	}
; 8968 : 	else if (tblNo == 1217) {
; 8969 : 		tblNo = 328;
; 8970 : 	}
; 8971 : 	else if (tblNo > 1361) {
; 8972 : 		tblNo -= 952;
; 8973 : 	}
; 8974 : 	else if (tblNo > 1356) {
; 8975 : 		tblNo -= 999;
; 8976 : 	}
; 8977 : 	else if (tblNo > 1281) {
; 8978 : 		tblNo -= 919;
; 8979 : 	}
; 8980 : 	else if (tblNo > 1239) {
; 8981 : 		tblNo -= 889;
; 8982 : 	}
; 8983 : 	else if (tblNo > 1186) {
; 8984 : 		tblNo -= 886;
; 8985 : 	}
; 8986 : 	else if (tblNo > 1173) {
; 8987 : 		tblNo -= 877;
; 8988 : 	}
; 8989 : 	else if (tblNo > 1172) {
; 8990 : 		tblNo -= 877;
; 8991 : 	}
; 8992 : 	else if (tblNo > 1161) {
; 8993 : 		tblNo -= 868;
; 8994 : 	}
; 8995 : 	else if (tblNo > 930) {
; 8996 : 		tblNo -= 745;
; 8997 : 	}
; 8998 : 	else if (tblNo == 927) {
; 8999 : 		tblNo -= 634;
; 9000 : 	}
; 9001 : 	else if (tblNo > 929) {
; 9002 : 		tblNo -= 644;
; 9003 : 	}
; 9004 : 	else if (tblNo > 927) {
; 9005 : 		tblNo -= 643;
; 9006 : 	}
; 9007 : 	else if (tblNo > 900) {
; 9008 : 		tblNo -= 621;
; 9009 : 	}
; 9010 : 	else if (tblNo > 180) {
; 9011 : 		tblNo -= (333 + 56);
; 9012 : 	}
; 9013 : #elif defined(__ALBUM_28)
; 9014 : 
; 9015 : 	if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2 ç°äººç
; 9016 : 		tblNo -= 1146;
; 9017 : 	}
; 9018 : 	else if (tblNo > 1568) {//æºäººé¾
; 9019 : 		tblNo -= 1103;
; 9020 : 	}
; 9021 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 9022 : 		tblNo -= 1101;
; 9023 : 	}
; 9024 : 	else if (tblNo > 1516) {
; 9025 : 		tblNo -= 1055;
; 9026 : 	}
; 9027 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 9028 : 		tblNo = 455;
; 9029 : 	}
; 9030 : 	else if (tblNo > 1509) {
; 9031 : 		tblNo -= 1054;
; 9032 : 	}
; 9033 : 	else if (tblNo == 1497) {
; 9034 : 		tblNo = 395;
; 9035 : 	}
; 9036 : 	else if (tblNo > 1495) {
; 9037 : 		tblNo -= 1044;
; 9038 : 	}
; 9039 : 	else if (tblNo > 1490) {
; 9040 : 		tblNo -= 1043;
; 9041 : 	}
; 9042 : 	else if (tblNo > 1485) {
; 9043 : 		tblNo -= 1040;
; 9044 : 	}
; 9045 : 	else if (tblNo > 1454) {
; 9046 : 		tblNo -= 1034;
; 9047 : 	}
; 9048 : 	else if (tblNo == 1214) {
; 9049 : 		tblNo = 331;
; 9050 : 	}
; 9051 : 	else if (tblNo == 1217) {
; 9052 : 		tblNo = 328;
; 9053 : 	}
; 9054 : 	else if (tblNo > 1361) {
; 9055 : 		tblNo -= 952;
; 9056 : 	}
; 9057 : 	else if (tblNo > 1356) {
; 9058 : 		tblNo -= 999;
; 9059 : 	}
; 9060 : 	else if (tblNo > 1281) {
; 9061 : 		tblNo -= 919;
; 9062 : 	}
; 9063 : 	else if (tblNo > 1239) {
; 9064 : 		tblNo -= 889;
; 9065 : 	}
; 9066 : 	else if (tblNo > 1186) {
; 9067 : 		tblNo -= 886;
; 9068 : 	}
; 9069 : 	else if (tblNo > 1173) {
; 9070 : 		tblNo -= 877;
; 9071 : 	}
; 9072 : 	else if (tblNo > 1172) {
; 9073 : 		tblNo -= 877;
; 9074 : 	}
; 9075 : 	else if (tblNo > 1161) {
; 9076 : 		tblNo -= 868;
; 9077 : 	}
; 9078 : 	else if (tblNo > 930) {
; 9079 : 		tblNo -= 745;
; 9080 : 	}
; 9081 : 	else if (tblNo == 927) {
; 9082 : 		tblNo -= 634;
; 9083 : 	}
; 9084 : 	else if (tblNo > 929) {
; 9085 : 		tblNo -= 644;
; 9086 : 	}
; 9087 : 	else if (tblNo > 927) {
; 9088 : 		tblNo -= 643;
; 9089 : 	}
; 9090 : 	else if (tblNo > 900) {
; 9091 : 		tblNo -= 621;
; 9092 : 	}
; 9093 : 	else if (tblNo > 180) {
; 9094 : 		tblNo -= (333 + 56);
; 9095 : 	}
; 9096 : 
; 9097 : #elif defined(__ALBUM_27)
; 9098 : 
; 9099 : 	if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç ç®äºº1 ç®äºº2
; 9100 : 		tblNo -= 1146;
; 9101 : 	}
; 9102 : 	else if (tblNo > 1568) {//æºäººé¾
; 9103 : 		tblNo -= 1103;
; 9104 : 	}
; 9105 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 9106 : 		tblNo -= 1101;
; 9107 : 	}
; 9108 : 	else if (tblNo > 1516) {
; 9109 : 		tblNo -= 1055;
; 9110 : 	}
; 9111 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 9112 : 		tblNo = 455;
; 9113 : 	}
; 9114 : 	else if (tblNo > 1509) {
; 9115 : 		tblNo -= 1054;
; 9116 : 	}
; 9117 : 	else if (tblNo == 1497) {
; 9118 : 		tblNo = 395;
; 9119 : 	}
; 9120 : 	else if (tblNo > 1495) {
; 9121 : 		tblNo -= 1044;
; 9122 : 	}
; 9123 : 	else if (tblNo > 1490) {
; 9124 : 		tblNo -= 1043;
; 9125 : 	}
; 9126 : 	else if (tblNo > 1485) {
; 9127 : 		tblNo -= 1040;
; 9128 : 	}
; 9129 : 	else if (tblNo > 1454) {
; 9130 : 		tblNo -= 1034;
; 9131 : 	}
; 9132 : 	else if (tblNo == 1214) {
; 9133 : 		tblNo = 331;
; 9134 : 	}
; 9135 : 	else if (tblNo == 1217) {
; 9136 : 		tblNo = 328;
; 9137 : 	}
; 9138 : 	else if (tblNo > 1361) {
; 9139 : 		tblNo -= 952;
; 9140 : 	}
; 9141 : 	else if (tblNo > 1356) {
; 9142 : 		tblNo -= 999;
; 9143 : 	}
; 9144 : 	else if (tblNo > 1281) {
; 9145 : 		tblNo -= 919;
; 9146 : 	}
; 9147 : 	else if (tblNo > 1239) {
; 9148 : 		tblNo -= 889;
; 9149 : 	}
; 9150 : 	else if (tblNo > 1186) {
; 9151 : 		tblNo -= 886;
; 9152 : 	}
; 9153 : 	else if (tblNo > 1173) {
; 9154 : 		tblNo -= 877;
; 9155 : 	}
; 9156 : 	else if (tblNo > 1172) {
; 9157 : 		tblNo -= 877;
; 9158 : 	}
; 9159 : 	else if (tblNo > 1161) {
; 9160 : 		tblNo -= 868;
; 9161 : 	}
; 9162 : 	else if (tblNo > 930) {
; 9163 : 		tblNo -= 745;
; 9164 : 	}
; 9165 : 	else if (tblNo == 927) {
; 9166 : 		tblNo -= 634;
; 9167 : 	}
; 9168 : 	else if (tblNo > 929) {
; 9169 : 		tblNo -= 644;
; 9170 : 	}
; 9171 : 	else if (tblNo > 927) {
; 9172 : 		tblNo -= 643;
; 9173 : 	}
; 9174 : 	else if (tblNo > 900) {
; 9175 : 		tblNo -= 621;
; 9176 : 	}
; 9177 : 	else if (tblNo > 180) {
; 9178 : 		tblNo -= (333 + 56);
; 9179 : 	}
; 9180 : 
; 9181 : #elif defined(__ALBUM_26)
; 9182 : 
; 9183 : 	if (tblNo > 1616) {//å¸éè¨å°  èè1 èè2 è´è¶1 è´è¶2 æé»ä¹åç
; 9184 : 		tblNo -= 1146;
; 9185 : 	}
; 9186 : 	else if (tblNo > 1568) {//æºäººé¾
; 9187 : 		tblNo -= 1103;
; 9188 : 	}
; 9189 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 9190 : 		tblNo -= 1101;
; 9191 : 	}
; 9192 : 	else if (tblNo > 1516) {
; 9193 : 		tblNo -= 1055;
; 9194 : 	}
; 9195 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 9196 : 		tblNo = 455;
; 9197 : 	}
; 9198 : 	else if (tblNo > 1509) {
; 9199 : 		tblNo -= 1054;
; 9200 : 	}
; 9201 : 	else if (tblNo == 1497) {
; 9202 : 		tblNo = 395;
; 9203 : 	}
; 9204 : 	else if (tblNo > 1495) {
; 9205 : 		tblNo -= 1044;
; 9206 : 	}
; 9207 : 	else if (tblNo > 1490) {
; 9208 : 		tblNo -= 1043;
; 9209 : 	}
; 9210 : 	else if (tblNo > 1485) {
; 9211 : 		tblNo -= 1040;
; 9212 : 	}
; 9213 : 	else if (tblNo > 1454) {
; 9214 : 		tblNo -= 1034;
; 9215 : 	}
; 9216 : 	else if (tblNo == 1214) {
; 9217 : 		tblNo = 331;
; 9218 : 	}
; 9219 : 	else if (tblNo == 1217) {
; 9220 : 		tblNo = 328;
; 9221 : 	}
; 9222 : 	else if (tblNo > 1361) {
; 9223 : 		tblNo -= 952;
; 9224 : 	}
; 9225 : 	else if (tblNo > 1356) {
; 9226 : 		tblNo -= 999;
; 9227 : 	}
; 9228 : 	else if (tblNo > 1281) {
; 9229 : 		tblNo -= 919;
; 9230 : 	}
; 9231 : 	else if (tblNo > 1239) {
; 9232 : 		tblNo -= 889;
; 9233 : 	}
; 9234 : 	else if (tblNo > 1186) {
; 9235 : 		tblNo -= 886;
; 9236 : 	}
; 9237 : 	else if (tblNo > 1173) {
; 9238 : 		tblNo -= 877;
; 9239 : 	}
; 9240 : 	else if (tblNo > 1172) {
; 9241 : 		tblNo -= 877;
; 9242 : 	}
; 9243 : 	else if (tblNo > 1161) {
; 9244 : 		tblNo -= 868;
; 9245 : 	}
; 9246 : 	else if (tblNo > 930) {
; 9247 : 		tblNo -= 745;
; 9248 : 	}
; 9249 : 	else if (tblNo == 927) {
; 9250 : 		tblNo -= 634;
; 9251 : 	}
; 9252 : 	else if (tblNo > 929) {
; 9253 : 		tblNo -= 644;
; 9254 : 	}
; 9255 : 	else if (tblNo > 927) {
; 9256 : 		tblNo -= 643;
; 9257 : 	}
; 9258 : 	else if (tblNo > 900) {
; 9259 : 		tblNo -= 621;
; 9260 : 	}
; 9261 : 	else if (tblNo > 180) {
; 9262 : 		tblNo -= (333 + 56);
; 9263 : 	}
; 9264 : 
; 9265 : #elif defined(__ALBUM_25)
; 9266 : 	if (tblNo > 1616) {//å¸éè¨å°
; 9267 : 		tblNo -= 1146;
; 9268 : 	}
; 9269 : 	else if (tblNo > 1568) {//æºäººé¾
; 9270 : 		tblNo -= 1103;
; 9271 : 	}
; 9272 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 9273 : 		tblNo -= 1101;
; 9274 : 	}
; 9275 : 	else if (tblNo > 1516) {
; 9276 : 		tblNo -= 1055;
; 9277 : 	}
; 9278 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 9279 : 		tblNo = 455;
; 9280 : 	}
; 9281 : 	else if (tblNo > 1509) {
; 9282 : 		tblNo -= 1054;
; 9283 : 	}
; 9284 : 	else if (tblNo == 1497) {
; 9285 : 		tblNo = 395;
; 9286 : 	}
; 9287 : 	else if (tblNo > 1495) {
; 9288 : 		tblNo -= 1044;
; 9289 : 	}
; 9290 : 	else if (tblNo > 1490) {
; 9291 : 		tblNo -= 1043;
; 9292 : 	}
; 9293 : 	else if (tblNo > 1485) {
; 9294 : 		tblNo -= 1040;
; 9295 : 	}
; 9296 : 	else if (tblNo > 1454) {
; 9297 : 		tblNo -= 1034;
; 9298 : 	}
; 9299 : 	else if (tblNo == 1214) {
; 9300 : 		tblNo = 331;
; 9301 : 	}
; 9302 : 	else if (tblNo == 1217) {
; 9303 : 		tblNo = 328;
; 9304 : 	}
; 9305 : 	else if (tblNo > 1361) {
; 9306 : 		tblNo -= 952;
; 9307 : 	}
; 9308 : 	else if (tblNo > 1356) {
; 9309 : 		tblNo -= 999;
; 9310 : 	}
; 9311 : 	else if (tblNo > 1281) {
; 9312 : 		tblNo -= 919;
; 9313 : 	}
; 9314 : 	else if (tblNo > 1239) {
; 9315 : 		tblNo -= 889;
; 9316 : 	}
; 9317 : 	else if (tblNo > 1186) {
; 9318 : 		tblNo -= 886;
; 9319 : 	}
; 9320 : 	else if (tblNo > 1173) {
; 9321 : 		tblNo -= 877;
; 9322 : 	}
; 9323 : 	else if (tblNo > 1172) {
; 9324 : 		tblNo -= 877;
; 9325 : 	}
; 9326 : 	else if (tblNo > 1161) {
; 9327 : 		tblNo -= 868;
; 9328 : 	}
; 9329 : 	else if (tblNo > 930) {
; 9330 : 		tblNo -= 745;
; 9331 : 	}
; 9332 : 	else if (tblNo == 927) {
; 9333 : 		tblNo -= 634;
; 9334 : 	}
; 9335 : 	else if (tblNo > 929) {
; 9336 : 		tblNo -= 644;
; 9337 : 	}
; 9338 : 	else if (tblNo > 927) {
; 9339 : 		tblNo -= 643;
; 9340 : 	}
; 9341 : 	else if (tblNo > 900) {
; 9342 : 		tblNo -= 621;
; 9343 : 	}
; 9344 : 	else if (tblNo > 180) {
; 9345 : 		tblNo -= (333 + 56);
; 9346 : 	}
; 9347 : 
; 9348 : #elif defined(__ALBUM_24)
; 9349 : 	if (tblNo > 1568) {//æºäººé¾
; 9350 : 		tblNo -= 1103;
; 9351 : 	}
; 9352 : 	else if (tblNo > 1564) {//é»è²é£é¾
; 9353 : 		tblNo -= 1101;
; 9354 : 	}
; 9355 : 	else if (tblNo > 1516) {
; 9356 : 		tblNo -= 1055;
; 9357 : 	}
; 9358 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 9359 : 		tblNo = 455;
; 9360 : 	}
; 9361 : 	else if (tblNo > 1509) {
; 9362 : 		tblNo -= 1054;
; 9363 : 	}
; 9364 : 	else if (tblNo == 1497) {
; 9365 : 		tblNo = 395;
; 9366 : 	}
; 9367 : 	else if (tblNo > 1495) {
; 9368 : 		tblNo -= 1044;
; 9369 : 	}
; 9370 : 	else if (tblNo > 1490) {
; 9371 : 		tblNo -= 1043;
; 9372 : 	}
; 9373 : 	else if (tblNo > 1485) {
; 9374 : 		tblNo -= 1040;
; 9375 : 	}
; 9376 : 	else if (tblNo > 1454) {
; 9377 : 		tblNo -= 1034;
; 9378 : 	}
; 9379 : 	else if (tblNo == 1214) {
; 9380 : 		tblNo = 331;
; 9381 : 	}
; 9382 : 	else if (tblNo == 1217) {
; 9383 : 		tblNo = 328;
; 9384 : 	}
; 9385 : 	else if (tblNo > 1361) {
; 9386 : 		tblNo -= 952;
; 9387 : 	}
; 9388 : 	else if (tblNo > 1356) {
; 9389 : 		tblNo -= 999;
; 9390 : 	}
; 9391 : 	else if (tblNo > 1281) {
; 9392 : 		tblNo -= 919;
; 9393 : 	}
; 9394 : 	else if (tblNo > 1239) {
; 9395 : 		tblNo -= 889;
; 9396 : 	}
; 9397 : 	else if (tblNo > 1186) {
; 9398 : 		tblNo -= 886;
; 9399 : 	}
; 9400 : 	else if (tblNo > 1173) {
; 9401 : 		tblNo -= 877;
; 9402 : 	}
; 9403 : 	else if (tblNo > 1172) {
; 9404 : 		tblNo -= 877;
; 9405 : 	}
; 9406 : 	else if (tblNo > 1161) {
; 9407 : 		tblNo -= 868;
; 9408 : 	}
; 9409 : 	else if (tblNo > 930) {
; 9410 : 		tblNo -= 745;
; 9411 : 	}
; 9412 : 	else if (tblNo == 927) {
; 9413 : 		tblNo -= 634;
; 9414 : 	}
; 9415 : 	else if (tblNo > 929) {
; 9416 : 		tblNo -= 644;
; 9417 : 	}
; 9418 : 	else if (tblNo > 927) {
; 9419 : 		tblNo -= 643;
; 9420 : 	}
; 9421 : 	else if (tblNo > 900) {
; 9422 : 		tblNo -= 621;
; 9423 : 	}
; 9424 : 	else if (tblNo > 180) {
; 9425 : 		tblNo -= (333 + 56);
; 9426 : 	}
; 9427 : 
; 9428 : #elif defined(__ALBUM_23)
; 9429 : 	if (tblNo > 1516) {
; 9430 : 		tblNo -= 1055;
; 9431 : 	}
; 9432 : 	else if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 9433 : 		tblNo = 455;
; 9434 : 	}
; 9435 : 	else if (tblNo > 1509) {
; 9436 : 		tblNo -= 1054;
; 9437 : 	}
; 9438 : 	else if (tblNo == 1497) {
; 9439 : 		tblNo = 395;
; 9440 : 	}
; 9441 : 	else if (tblNo > 1495) {
; 9442 : 		tblNo -= 1044;
; 9443 : 	}
; 9444 : 	else if (tblNo > 1490) {
; 9445 : 		tblNo -= 1043;
; 9446 : 	}
; 9447 : 	else if (tblNo > 1485) {
; 9448 : 		tblNo -= 1040;
; 9449 : 	}
; 9450 : 	else if (tblNo > 1454) {
; 9451 : 		tblNo -= 1034;
; 9452 : 	}
; 9453 : 	else if (tblNo == 1214) {
; 9454 : 		tblNo = 331;
; 9455 : 	}
; 9456 : 	else if (tblNo == 1217) {
; 9457 : 		tblNo = 328;
; 9458 : 	}
; 9459 : 	else if (tblNo > 1361) {
; 9460 : 		tblNo -= 952;
; 9461 : 	}
; 9462 : 	else if (tblNo > 1356) {
; 9463 : 		tblNo -= 999;
; 9464 : 	}
; 9465 : 	else if (tblNo > 1281) {
; 9466 : 		tblNo -= 919;
; 9467 : 	}
; 9468 : 	else if (tblNo > 1239) {
; 9469 : 		tblNo -= 889;
; 9470 : 	}
; 9471 : 	else if (tblNo > 1186) {
; 9472 : 		tblNo -= 886;
; 9473 : 	}
; 9474 : 	else if (tblNo > 1173) {
; 9475 : 		tblNo -= 877;
; 9476 : 	}
; 9477 : 	else if (tblNo > 1172) {
; 9478 : 		tblNo -= 877;
; 9479 : 	}
; 9480 : 	else if (tblNo > 1161) {
; 9481 : 		tblNo -= 868;
; 9482 : 	}
; 9483 : 	else if (tblNo > 930) {
; 9484 : 		tblNo -= 745;
; 9485 : 	}
; 9486 : 	else if (tblNo == 927) {
; 9487 : 		tblNo -= 634;
; 9488 : 	}
; 9489 : 	else if (tblNo > 929) {
; 9490 : 		tblNo -= 644;
; 9491 : 	}
; 9492 : 	else if (tblNo > 927) {
; 9493 : 		tblNo -= 643;
; 9494 : 	}
; 9495 : 	else if (tblNo > 900) {
; 9496 : 		tblNo -= 621;
; 9497 : 	}
; 9498 : 	else if (tblNo > 180) {
; 9499 : 		tblNo -= (333 + 56);
; 9500 : 	}
; 9501 : 
; 9502 : #elif defined(__ALBUM_22)
; 9503 : 	if (tblNo == 1516) {//ä¿®æ­£ä¹åç
; 9504 : 		tblNo = 455;
; 9505 : 	}
; 9506 : 	else if (tblNo > 1509) {
; 9507 : 		tblNo -= 1054;
; 9508 : 	}
; 9509 : 	else if (tblNo == 1497) {
; 9510 : 		tblNo = 395;
; 9511 : 	}
; 9512 : 	else if (tblNo > 1495) {
; 9513 : 		tblNo -= 1044;
; 9514 : 	}
; 9515 : 	else if (tblNo > 1490) {
; 9516 : 		tblNo -= 1043;
; 9517 : 	}
; 9518 : 	else if (tblNo > 1485) {
; 9519 : 		tblNo -= 1040;
; 9520 : 	}
; 9521 : 	else if (tblNo > 1454) {
; 9522 : 		tblNo -= 1034;
; 9523 : 	}
; 9524 : 	else if (tblNo == 1214) {
; 9525 : 		tblNo = 331;
; 9526 : 	}
; 9527 : 	else if (tblNo == 1217) {
; 9528 : 		tblNo = 328;
; 9529 : 	}
; 9530 : 	else if (tblNo > 1361) {
; 9531 : 		tblNo -= 952;
; 9532 : 	}
; 9533 : 	else if (tblNo > 1356) {
; 9534 : 		tblNo -= 999;
; 9535 : 	}
; 9536 : 	else if (tblNo > 1281) {
; 9537 : 		tblNo -= 919;
; 9538 : 	}
; 9539 : 	else if (tblNo > 1239) {
; 9540 : 		tblNo -= 889;
; 9541 : 	}
; 9542 : 	else if (tblNo > 1186) {
; 9543 : 		tblNo -= 886;
; 9544 : 	}
; 9545 : 	else if (tblNo > 1173) {
; 9546 : 		tblNo -= 877;
; 9547 : 	}
; 9548 : 	else if (tblNo > 1172) {
; 9549 : 		tblNo -= 877;
; 9550 : 	}
; 9551 : 	else if (tblNo > 1161) {
; 9552 : 		tblNo -= 868;
; 9553 : 	}
; 9554 : 	else if (tblNo > 930) {
; 9555 : 		tblNo -= 745;
; 9556 : 	}
; 9557 : 	else if (tblNo == 927) {
; 9558 : 		tblNo -= 634;
; 9559 : 	}
; 9560 : 	else if (tblNo > 929) {
; 9561 : 		tblNo -= 644;
; 9562 : 	}
; 9563 : 	else if (tblNo > 927) {
; 9564 : 		tblNo -= 643;
; 9565 : 	}
; 9566 : 	else if (tblNo > 900) {
; 9567 : 		tblNo -= 621;
; 9568 : 	}
; 9569 : 	else if (tblNo > 180) {
; 9570 : 		tblNo -= (333 + 56);
; 9571 : 	}
; 9572 : 
; 9573 : #elif defined(__ALBUM_21)
; 9574 : 	if (tblNo > 1509) {
; 9575 : 		tblNo -= 1054;
; 9576 : 	}
; 9577 : 	else if (tblNo == 1497) {
; 9578 : 		tblNo = 395;
; 9579 : 	}
; 9580 : 	else if (tblNo > 1495) {
; 9581 : 		tblNo -= 1044;
; 9582 : 	}
; 9583 : 	else if (tblNo > 1490) {
; 9584 : 		tblNo -= 1043;
; 9585 : 	}
; 9586 : 	else if (tblNo > 1485) {
; 9587 : 		tblNo -= 1040;
; 9588 : 	}
; 9589 : 	else if (tblNo > 1454) {
; 9590 : 		tblNo -= 1034;
; 9591 : 	}
; 9592 : 	else if (tblNo == 1214) {
; 9593 : 		tblNo = 331;
; 9594 : 	}
; 9595 : 	else if (tblNo == 1217) {
; 9596 : 		tblNo = 328;
; 9597 : 	}
; 9598 : 	else if (tblNo > 1361) {
; 9599 : 		tblNo -= 952;
; 9600 : 	}
; 9601 : 	else if (tblNo > 1356) {
; 9602 : 		tblNo -= 999;
; 9603 : 	}
; 9604 : 	else if (tblNo > 1281) {
; 9605 : 		tblNo -= 919;
; 9606 : 	}
; 9607 : 	else if (tblNo > 1239) {
; 9608 : 		tblNo -= 889;
; 9609 : 	}
; 9610 : 	else if (tblNo > 1186) {
; 9611 : 		tblNo -= 886;
; 9612 : 	}
; 9613 : 	else if (tblNo > 1173) {
; 9614 : 		tblNo -= 877;
; 9615 : 	}
; 9616 : 	else if (tblNo > 1172) {
; 9617 : 		tblNo -= 877;
; 9618 : 	}
; 9619 : 	else if (tblNo > 1161) {
; 9620 : 		tblNo -= 868;
; 9621 : 	}
; 9622 : 	else if (tblNo > 930) {
; 9623 : 		tblNo -= 745;
; 9624 : 	}
; 9625 : 	else if (tblNo == 927) {
; 9626 : 		tblNo -= 634;
; 9627 : 	}
; 9628 : 	else if (tblNo > 929) {
; 9629 : 		tblNo -= 644;
; 9630 : 	}
; 9631 : 	else if (tblNo > 927) {
; 9632 : 		tblNo -= 643;
; 9633 : 	}
; 9634 : 	else if (tblNo > 900) {
; 9635 : 		tblNo -= 621;
; 9636 : 	}
; 9637 : 	else if (tblNo > 180) {
; 9638 : 		tblNo -= (333 + 56);
; 9639 : 	}
; 9640 : 
; 9641 : #elif defined(__ALBUM_20)
; 9642 : 	if (tblNo == 1497) {
; 9643 : 		tblNo = 395;
; 9644 : 	}
; 9645 : 	else if (tblNo > 1495) {
; 9646 : 		tblNo -= 1044;
; 9647 : 	}
; 9648 : 	else if (tblNo > 1490) {
; 9649 : 		tblNo -= 1043;
; 9650 : 	}
; 9651 : 	else if (tblNo > 1485) {
; 9652 : 		tblNo -= 1040;
; 9653 : 	}
; 9654 : 	else if (tblNo > 1454) {
; 9655 : 		tblNo -= 1034;
; 9656 : 	}
; 9657 : 	else if (tblNo == 1214) {
; 9658 : 		tblNo = 331;
; 9659 : 	}
; 9660 : 	else if (tblNo == 1217) {
; 9661 : 		tblNo = 328;
; 9662 : 	}
; 9663 : 	else if (tblNo > 1361) {
; 9664 : 		tblNo -= 952;
; 9665 : 	}
; 9666 : 	else if (tblNo > 1356) {
; 9667 : 		tblNo -= 999;
; 9668 : 	}
; 9669 : 	else if (tblNo > 1281) {
; 9670 : 		tblNo -= 919;
; 9671 : 	}
; 9672 : 	else if (tblNo > 1239) {
; 9673 : 		tblNo -= 889;
; 9674 : 	}
; 9675 : 	else if (tblNo > 1186) {
; 9676 : 		tblNo -= 886;
; 9677 : 	}
; 9678 : 	else if (tblNo > 1173) {
; 9679 : 		tblNo -= 877;
; 9680 : 	}
; 9681 : 	else if (tblNo > 1172) {
; 9682 : 		tblNo -= 877;
; 9683 : 	}
; 9684 : 	else if (tblNo > 1161) {
; 9685 : 		tblNo -= 868;
; 9686 : 	}
; 9687 : 	else if (tblNo > 930) {
; 9688 : 		tblNo -= 745;
; 9689 : 	}
; 9690 : 	else if (tblNo == 927) {
; 9691 : 		tblNo -= 634;
; 9692 : 	}
; 9693 : 	else if (tblNo > 929) {
; 9694 : 		tblNo -= 644;
; 9695 : 	}
; 9696 : 	else if (tblNo > 927) {
; 9697 : 		tblNo -= 643;
; 9698 : 	}
; 9699 : 	else if (tblNo > 900) {
; 9700 : 		tblNo -= 621;
; 9701 : 	}
; 9702 : 	else if (tblNo > 180) {
; 9703 : 		tblNo -= (333 + 56);
; 9704 : 	}
; 9705 : 
; 9706 : #elif defined(__ALBUM_19)
; 9707 : 	if (tblNo > 1490) {
; 9708 : 		tblNo -= 1044;
; 9709 : 	}
; 9710 : 	else if (tblNo > 1485) {
; 9711 : 		tblNo -= 1040;
; 9712 : 	}
; 9713 : 	else if (tblNo > 1454) {
; 9714 : 		tblNo -= 1034;
; 9715 : 	}
; 9716 : 	else if (tblNo == 1214) {
; 9717 : 		tblNo = 331;
; 9718 : 	}
; 9719 : 	else if (tblNo == 1217) {
; 9720 : 		tblNo = 328;
; 9721 : 	}
; 9722 : 	else if (tblNo > 1361) {
; 9723 : 		tblNo -= 952;
; 9724 : 	}
; 9725 : 	else if (tblNo > 1356) {
; 9726 : 		tblNo -= 999;
; 9727 : 	}
; 9728 : 	else if (tblNo > 1281) {
; 9729 : 		tblNo -= 919;
; 9730 : 	}
; 9731 : 	else if (tblNo > 1239) {
; 9732 : 		tblNo -= 889;
; 9733 : 	}
; 9734 : 	else if (tblNo > 1186) {
; 9735 : 		tblNo -= 886;
; 9736 : 	}
; 9737 : 	else if (tblNo > 1173) {
; 9738 : 		tblNo -= 877;
; 9739 : 	}
; 9740 : 	else if (tblNo > 1172) {
; 9741 : 		tblNo -= 877;
; 9742 : 	}
; 9743 : 	else if (tblNo > 1161) {
; 9744 : 		tblNo -= 868;
; 9745 : 	}
; 9746 : 	else if (tblNo > 930) {
; 9747 : 		tblNo -= 745;
; 9748 : 	}
; 9749 : 	else if (tblNo == 927) {
; 9750 : 		tblNo -= 634;
; 9751 : 	}
; 9752 : 	else if (tblNo > 929) {
; 9753 : 		tblNo -= 644;
; 9754 : 	}
; 9755 : 	else if (tblNo > 927) {
; 9756 : 		tblNo -= 643;
; 9757 : 	}
; 9758 : 	else if (tblNo > 900) {
; 9759 : 		tblNo -= 621;
; 9760 : 	}
; 9761 : 	else if (tblNo > 180) {
; 9762 : 		tblNo -= (333 + 56);
; 9763 : 	}
; 9764 : 
; 9765 : #elif defined(__ALBUM_18)
; 9766 : 	if (tblNo > 1485) {
; 9767 : 		tblNo -= 1040;
; 9768 : 	}
; 9769 : 	else if (tblNo > 1454) {
; 9770 : 		tblNo -= 1034;
; 9771 : 	}
; 9772 : 	else if (tblNo == 1214) {
; 9773 : 		tblNo = 331;
; 9774 : 	}
; 9775 : 	else if (tblNo == 1217) {
; 9776 : 		tblNo = 328;
; 9777 : 	}
; 9778 : 	else if (tblNo > 1361) {
; 9779 : 		tblNo -= 952;
; 9780 : 	}
; 9781 : 	else if (tblNo > 1356) {
; 9782 : 		tblNo -= 999;
; 9783 : 	}
; 9784 : 	else if (tblNo > 1281) {
; 9785 : 		tblNo -= 919;
; 9786 : 	}
; 9787 : 	else if (tblNo > 1239) {
; 9788 : 		tblNo -= 889;
; 9789 : 	}
; 9790 : 	else if (tblNo > 1186) {
; 9791 : 		tblNo -= 886;
; 9792 : 	}
; 9793 : 	else if (tblNo > 1173) {
; 9794 : 		tblNo -= 877;
; 9795 : 	}
; 9796 : 	else if (tblNo > 1172) {
; 9797 : 		tblNo -= 877;
; 9798 : 	}
; 9799 : 	else if (tblNo > 1161) {
; 9800 : 		tblNo -= 868;
; 9801 : 	}
; 9802 : 	else if (tblNo > 930) {
; 9803 : 		tblNo -= 745;
; 9804 : 	}
; 9805 : 	else if (tblNo == 927) {
; 9806 : 		tblNo -= 634;
; 9807 : 	}
; 9808 : 	else if (tblNo > 929) {
; 9809 : 		tblNo -= 644;
; 9810 : 	}
; 9811 : 	else if (tblNo > 927) {
; 9812 : 		tblNo -= 643;
; 9813 : 	}
; 9814 : 	else if (tblNo > 900) {
; 9815 : 		tblNo -= 621;
; 9816 : 	}
; 9817 : 	else if (tblNo > 180) {
; 9818 : 		tblNo -= (333 + 56);
; 9819 : 	}
; 9820 : 
; 9821 : #elif defined(__ALBUM_17)
; 9822 : 	if (tblNo > 1454) {
; 9823 : 		tblNo -= 1034;
; 9824 : 	}
; 9825 : 	else if (tblNo == 1214) {
; 9826 : 		tblNo = 331;
; 9827 : 	}
; 9828 : 	else if (tblNo == 1217) {
; 9829 : 		tblNo = 328;
; 9830 : 	}
; 9831 : 	else if (tblNo > 1361) {
; 9832 : 		tblNo -= 952;
; 9833 : 	}
; 9834 : 	else if (tblNo > 1356) {
; 9835 : 		tblNo -= 999;
; 9836 : 	}
; 9837 : 	else if (tblNo > 1281) {
; 9838 : 		tblNo -= 919;
; 9839 : 	}
; 9840 : 	else if (tblNo > 1239) {
; 9841 : 		tblNo -= 889;
; 9842 : 	}
; 9843 : 	else if (tblNo > 1186) {
; 9844 : 		tblNo -= 886;
; 9845 : 	}
; 9846 : 	else if (tblNo > 1173) {
; 9847 : 		tblNo -= 877;
; 9848 : 	}
; 9849 : 	else if (tblNo > 1172) {
; 9850 : 		tblNo -= 877;
; 9851 : 	}
; 9852 : 	else if (tblNo > 1161) {
; 9853 : 		tblNo -= 868;
; 9854 : 	}
; 9855 : 	else if (tblNo > 930) {
; 9856 : 		tblNo -= 745;
; 9857 : 	}
; 9858 : 	else if (tblNo == 927) {
; 9859 : 		tblNo -= 634;
; 9860 : 	}
; 9861 : 	else if (tblNo > 929) {
; 9862 : 		tblNo -= 644;
; 9863 : 	}
; 9864 : 	else if (tblNo > 927) {
; 9865 : 		tblNo -= 643;
; 9866 : 	}
; 9867 : 	else if (tblNo > 900) {
; 9868 : 		tblNo -= 621;
; 9869 : 	}
; 9870 : 	else if (tblNo > 180) {
; 9871 : 		tblNo -= (333 + 56);
; 9872 : 	}
; 9873 : 
; 9874 : #elif defined(__ALBUM_16)
; 9875 : 	if (tblNo == 1214) {
; 9876 : 		tblNo = 331;
; 9877 : 	}
; 9878 : 	else if (tblNo == 1217) {
; 9879 : 		tblNo = 328;
; 9880 : 	}
; 9881 : 	else if (tblNo > 1361) {
; 9882 : 		tblNo -= 952;
; 9883 : 	}
; 9884 : 	else if (tblNo > 1356) {
; 9885 : 		tblNo -= 999;
; 9886 : 	}
; 9887 : 	else if (tblNo > 1281) {
; 9888 : 		tblNo -= 919;
; 9889 : 	}
; 9890 : 	else if (tblNo > 1239) {
; 9891 : 		tblNo -= 889;
; 9892 : 	}
; 9893 : 	else if (tblNo > 1186) {
; 9894 : 		tblNo -= 886;
; 9895 : 	}
; 9896 : 	else if (tblNo > 1173) {
; 9897 : 		tblNo -= 877;
; 9898 : 	}
; 9899 : 	else if (tblNo > 1172) {
; 9900 : 		tblNo -= 877;
; 9901 : 	}
; 9902 : 	else if (tblNo > 1161) {
; 9903 : 		tblNo -= 868;
; 9904 : 	}
; 9905 : 	else if (tblNo > 930) {
; 9906 : 		tblNo -= 745;
; 9907 : 	}
; 9908 : 	else if (tblNo == 927) {
; 9909 : 		tblNo -= 634;
; 9910 : 	}
; 9911 : 	else if (tblNo > 929) {
; 9912 : 		tblNo -= 644;
; 9913 : 	}
; 9914 : 	else if (tblNo > 927) {
; 9915 : 		tblNo -= 643;
; 9916 : 	}
; 9917 : 	else if (tblNo > 900) {
; 9918 : 		tblNo -= 621;
; 9919 : 	}
; 9920 : 	else if (tblNo > 180) {
; 9921 : 		tblNo -= (333 + 56);
; 9922 : 	}
; 9923 : #elif defined(__ALBUM_15)
; 9924 : 	if (tblNo == 1214) {
; 9925 : 		tblNo = 331;
; 9926 : 	}
; 9927 : 	else if (tblNo == 1217) {
; 9928 : 		tblNo = 328;
; 9929 : 	}
; 9930 : 	else if (tblNo > 1361) {
; 9931 : 		tblNo -= 952;
; 9932 : 	}
; 9933 : 	else if (tblNo > 1356) {
; 9934 : 		tblNo -= 999;
; 9935 : 	}
; 9936 : 	else if (tblNo > 1281) {
; 9937 : 		tblNo -= 919;
; 9938 : 	}
; 9939 : 	else if (tblNo > 1239) {
; 9940 : 		tblNo -= 889;
; 9941 : 	}
; 9942 : 	else if (tblNo > 1186) {
; 9943 : 		tblNo -= 886;
; 9944 : 	}
; 9945 : 	else if (tblNo > 1173) {
; 9946 : 		tblNo -= 877;
; 9947 : 	}
; 9948 : 	else if (tblNo > 1172) {
; 9949 : 		tblNo -= 877;
; 9950 : 	}
; 9951 : 	else if (tblNo > 1161) {
; 9952 : 		tblNo -= 868;
; 9953 : 	}
; 9954 : 	else if (tblNo > 930) {
; 9955 : 		tblNo -= 745;
; 9956 : 	}
; 9957 : 	else if (tblNo == 927) {
; 9958 : 		tblNo -= 634;
; 9959 : 	}
; 9960 : 	else if (tblNo > 929) {
; 9961 : 		tblNo -= 644;
; 9962 : 	}
; 9963 : 	else if (tblNo > 927) {
; 9964 : 		tblNo -= 643;
; 9965 : 	}
; 9966 : 	else if (tblNo > 900) {
; 9967 : 		tblNo -= 621;
; 9968 : 	}
; 9969 : 	else if (tblNo > 180) {
; 9970 : 		tblNo -= (333 + 56);
; 9971 : 	}
; 9972 : #endif
; 9973 : 	// ???????î±?????
; 9974 : 	if (0 <= tblNo && tblNo < MAX_PET_TBL) {

  00228	85 c0		 test	 eax, eax
  0022a	78 5d		 js	 SHORT $LN71@CheckNewPe
$LN77@CheckNewPe:
  0022c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?MAX_PET_TBL@@3HA ; MAX_PET_TBL
  00232	7d 55		 jge	 SHORT $LN71@CheckNewPe

; 9975 : 		// ??î????????î±?
; 9976 : 		albumNo = PetAlbumTbl[tblNo].albumNo;

  00234	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0023b	2b c8		 sub	 ecx, eax
  0023d	56		 push	 esi
  0023e	8b 34 8d 00 00
	00 00		 mov	 esi, DWORD PTR ?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A[ecx*4]

; 9977 : 		// ????????
; 9978 : 		if (albumNo != -1) {

  00245	83 fe ff	 cmp	 esi, -1
  00248	74 3e		 je	 SHORT $LN78@CheckNewPe

; 9979 : 			// ???????????
; 9980 : 			if (PetAlbum[albumNo].flag == 0) {

  0024a	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0024d	c1 e0 04	 shl	 eax, 4
  00250	83 b8 4c 00 00
	00 00		 cmp	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[eax+76], 0
  00257	75 2f		 jne	 SHORT $LN78@CheckNewPe

; 9981 : 				// ???????
; 9982 : 				PetAlbum[albumNo].flag = 1;
; 9983 : 				// î¡î·???
; 9984 : 				strcpy(PetAlbum[albumNo].name, PetAlbumTbl[tblNo].name);

  00259	8d 0c 8d 04 00
	00 00		 lea	 ecx, DWORD PTR ?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A[ecx*4+4]
  00260	c7 80 4c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[eax+76], 1
  0026a	2b c1		 sub	 eax, ecx
  0026c	8d 90 00 00 00
	00		 lea	 edx, DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[eax]
$LL73@CheckNewPe:
  00272	8a 01		 mov	 al, BYTE PTR [ecx]
  00274	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00277	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0027b	84 c0		 test	 al, al
  0027d	75 f3		 jne	 SHORT $LL73@CheckNewPe

; 9985 : 				// ?????îî¼
; 9986 : 				SaveAlbum(albumNo);

  0027f	56		 push	 esi
  00280	e8 00 00 00 00	 call	 ?SaveAlbum@@YAHH@Z	; SaveAlbum
  00285	83 c4 04	 add	 esp, 4
$LN78@CheckNewPe:
  00288	5e		 pop	 esi
$LN71@CheckNewPe:

; 9987 : 			}
; 9988 : 		}
; 9989 : 	}
; 9990 : }

  00289	5d		 pop	 ebp
  0028a	c3		 ret	 0
?CheckNewPet@@YAXH@Z ENDP				; CheckNewPet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?CenteringStr@@YAXPAD0H@Z
_TEXT	SEGMENT
_inStr$ = 8						; size = 4
_outStr$ = 12						; size = 4
_max$ = 16						; size = 4
?CenteringStr@@YAXPAD0H@Z PROC				; CenteringStr, COMDAT

; 10010: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 10011: 	int len, space, amari;
; 10012: 
; 10013: 	// î?????
; 10014: 	len = strlen(inStr);

  00004	8b 75 08	 mov	 esi, DWORD PTR _inStr$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	57		 push	 edi
  0000a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0000d	0f 1f 00	 npad	 3
$LL6@CenteringS:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL6@CenteringS

; 10015: 
; 10016: 	// ????????
; 10017: 	if (len >= max) {

  00017	8b 7d 10	 mov	 edi, DWORD PTR _max$[ebp]
  0001a	2b ca		 sub	 ecx, edx
  0001c	3b cf		 cmp	 ecx, edi
  0001e	7c 16		 jl	 SHORT $LN2@CenteringS

; 10018: 		// ???????
; 10019: 		strncpy(outStr, inStr, max);

  00020	57		 push	 edi
  00021	56		 push	 esi
  00022	8b 75 0c	 mov	 esi, DWORD PTR _outStr$[ebp]
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 _strncpy

; 10037: 	}
; 10038: }

  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN2@CenteringS:

; 10026: 	// ?????î«
; 10027: 	space = (max - len) / 2;

  00036	2b f9		 sub	 edi, ecx
  00038	8b c7		 mov	 eax, edi
  0003a	99		 cdq
  0003b	2b c2		 sub	 eax, edx
  0003d	d1 f8		 sar	 eax, 1

; 10028: 
; 10029: 	// ?????????
; 10030: 	if (space != 0) {

  0003f	74 2a		 je	 SHORT $LN3@CenteringS

; 10031: 		// î°???î
; 10032: 		sprintf(outStr, "%*c%s%*c", space, ' ', inStr, space + amari, ' ');

  00041	6a 20		 push	 32			; 00000020H
  00043	81 e7 01 00 00
	80		 and	 edi, -2147483647	; 80000001H
  00049	79 05		 jns	 SHORT $LN7@CenteringS

; 10020: 		outStr[max] = NULL;	// î·î ??????
; 10021: 		return;
; 10022: 	}
; 10023: 
; 10024: 	// ???????
; 10025: 	amari = (max - len) % 2;

  0004b	4f		 dec	 edi
  0004c	83 cf fe	 or	 edi, -2			; fffffffeH
  0004f	47		 inc	 edi
$LN7@CenteringS:

; 10031: 		// î°???î
; 10032: 		sprintf(outStr, "%*c%s%*c", space, ' ', inStr, space + amari, ' ');

  00050	03 f8		 add	 edi, eax
  00052	57		 push	 edi
  00053	56		 push	 esi
  00054	6a 20		 push	 32			; 00000020H
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_08GINKOJP@?$CF?$CKc?$CFs?$CF?$CKc@
  0005c	ff 75 0c	 push	 DWORD PTR _outStr$[ebp]
  0005f	e8 00 00 00 00	 call	 _sprintf
  00064	83 c4 1c	 add	 esp, 28			; 0000001cH
  00067	5f		 pop	 edi

; 10037: 	}
; 10038: }

  00068	5e		 pop	 esi
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN3@CenteringS:

; 10033: 	}
; 10034: 	else {
; 10035: 		// î°???î
; 10036: 		sprintf(outStr, "%s ", inStr);

  0006b	56		 push	 esi
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_03IKGEINEE@?$CFs?5@
  00071	ff 75 0c	 push	 DWORD PTR _outStr$[ebp]
  00074	e8 00 00 00 00	 call	 _sprintf

; 10037: 	}
; 10038: }

  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?CenteringStr@@YAXPAD0H@Z ENDP				; CenteringStr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?LoadChatRegistyStr@@YAHXZ
_TEXT	SEGMENT
?LoadChatRegistyStr@@YAHXZ PROC				; LoadChatRegistyStr, COMDAT

; 2278 : {

  00000	56		 push	 esi

; 2279 : 	FILE *fp;
; 2280 : 	int i;
; 2281 : 
; 2282 : 	// î???????????
; 2283 : 	if ((fp = fopen(CAHT_REGISTY_STR_FILE_NAME, "rb")) == NULL) {

  00001	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GDFOCPAE@data?2chatreg?4dat@
  0000b	e8 00 00 00 00	 call	 _fopen
  00010	8b f0		 mov	 esi, eax
  00012	83 c4 08	 add	 esp, 8
  00015	85 f6		 test	 esi, esi
  00017	0f 85 5b 01 00
	00		 jne	 $LN5@LoadChatRe

; 2284 : 		// ?????îî«??î
; 2285 : 		if ((fp = fopen(CAHT_REGISTY_STR_FILE_NAME, "wb")) != NULL) {

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GDFOCPAE@data?2chatreg?4dat@
  00027	e8 00 00 00 00	 call	 _fopen
  0002c	8b f0		 mov	 esi, eax
  0002e	83 c4 08	 add	 esp, 8
  00031	85 f6		 test	 esi, esi
  00033	0f 84 3b 01 00
	00		 je	 $LN6@LoadChatRe

; 2286 : #ifdef _STONDEBUG_		
; 2287 : 			MessageBox(hWnd, "ì±íì© ë¡ê·¸ì¸ íì¤í¸ íì¼ ë§ëì­ìì¤ï¼", "íì¸", MB_OK);
; 2288 : #endif
; 2289 : 			// ?????î°?î??î¼??????????
; 2290 : 			for (i = 0; i < 8; i++) {
; 2291 : 				// ???î°î ??îî
; 2292 : 				chatRegistryStr[i].buffer[0] = NULL;
; 2293 : 				chatRegistryStr[i].cnt = 0;
; 2294 : 				chatRegistryStr[i].cursor = 0;
; 2295 : 				// î°???î?
; 2296 : 				chatRegistryStr[i].len = MAX_CHAT_REGISTY_STR_LEN;
; 2297 : 				// ???î?
; 2298 : 				chatRegistryStr[i].lineLen = 0;
; 2299 : 				// ?????
; 2300 : 				chatRegistryStr[i].lineDist = 20;
; 2301 : 				// î°???î
; 2302 : 				chatRegistryStr[i].color = 0;
; 2303 : 				// î°????î³
; 2304 : 				// î°???î¸î?î??
; 2305 : 				chatRegistryStr[i].fontPrio = FONT_PRIO_FRONT;
; 2306 : 			}
; 2307 : 			// ???????
; 2308 : 			fwrite(chatRegistryStr, sizeof(STR_BUFFER), MAX_CHAT_REGISTY_STR, fp);

  00039	56		 push	 esi
  0003a	6a 08		 push	 8
  0003c	68 28 01 00 00	 push	 296			; 00000128H
  00041	68 00 00 00 00	 push	 OFFSET ?chatRegistryStr@@3PAUSTR_BUFFER@@A ; chatRegistryStr
  00046	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A, 0
  0004d	c7 05 06 01 00
	00 14 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+262, 20 ; 00000014H
  00057	66 c7 05 04 01
	00 00 1a 00	 mov	 WORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+260, 26 ; 0000001aH
  00060	c7 05 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+284, 1
  0006a	c6 05 28 01 00
	00 00		 mov	 BYTE PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+296, 0
  00071	c7 05 2e 02 00
	00 14 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+558, 20 ; 00000014H
  0007b	66 c7 05 2c 02
	00 00 1a 00	 mov	 WORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+556, 26 ; 0000001aH
  00084	c7 05 44 02 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+580, 1
  0008e	c6 05 50 02 00
	00 00		 mov	 BYTE PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+592, 0
  00095	c7 05 56 03 00
	00 14 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+854, 20 ; 00000014H
  0009f	66 c7 05 54 03
	00 00 1a 00	 mov	 WORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+852, 26 ; 0000001aH
  000a8	c7 05 6c 03 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+876, 1
  000b2	c6 05 78 03 00
	00 00		 mov	 BYTE PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+888, 0
  000b9	c7 05 7e 04 00
	00 14 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1150, 20 ; 00000014H
  000c3	66 c7 05 7c 04
	00 00 1a 00	 mov	 WORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1148, 26 ; 0000001aH
  000cc	c7 05 94 04 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1172, 1
  000d6	c6 05 a0 04 00
	00 00		 mov	 BYTE PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1184, 0
  000dd	c7 05 a6 05 00
	00 14 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1446, 20 ; 00000014H
  000e7	66 c7 05 a4 05
	00 00 1a 00	 mov	 WORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1444, 26 ; 0000001aH
  000f0	c7 05 bc 05 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1468, 1
  000fa	c6 05 c8 05 00
	00 00		 mov	 BYTE PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1480, 0
  00101	c7 05 ce 06 00
	00 14 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1742, 20 ; 00000014H
  0010b	66 c7 05 cc 06
	00 00 1a 00	 mov	 WORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1740, 26 ; 0000001aH
  00114	c7 05 e4 06 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1764, 1
  0011e	c6 05 f0 06 00
	00 00		 mov	 BYTE PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+1776, 0
  00125	c7 05 f6 07 00
	00 14 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+2038, 20 ; 00000014H
  0012f	66 c7 05 f4 07
	00 00 1a 00	 mov	 WORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+2036, 26 ; 0000001aH
  00138	c7 05 0c 08 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+2060, 1
  00142	c6 05 18 08 00
	00 00		 mov	 BYTE PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+2072, 0
  00149	c7 05 1e 09 00
	00 14 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+2334, 20 ; 00000014H
  00153	66 c7 05 1c 09
	00 00 1a 00	 mov	 WORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+2332, 26 ; 0000001aH
  0015c	c7 05 34 09 00
	00 01 00 00 00	 mov	 DWORD PTR ?chatRegistryStr@@3PAUSTR_BUFFER@@A+2356, 1
  00166	e8 00 00 00 00	 call	 _fwrite

; 2309 : #ifdef _TALK_WINDOW
; 2310 : 			fwrite(&g_bTalkWindow, sizeof(BOOL), 1, fp);
; 2311 : #endif
; 2312 : 			fclose(fp);	// ????????

  0016b	56		 push	 esi
  0016c	e8 00 00 00 00	 call	 _fclose
  00171	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@LoadChatRe:

; 2313 : 		}
; 2314 : 		return FALSE;

  00174	33 c0		 xor	 eax, eax
  00176	5e		 pop	 esi

; 2334 : }

  00177	c3		 ret	 0
$LN5@LoadChatRe:

; 2315 : 	}
; 2316 : 
; 2317 : 	// ???î???
; 2318 : 	if (fread(chatRegistryStr, sizeof(STR_BUFFER), MAX_CHAT_REGISTY_STR, fp) < MAX_CHAT_REGISTY_STR) {

  00178	56		 push	 esi
  00179	6a 08		 push	 8
  0017b	68 28 01 00 00	 push	 296			; 00000128H
  00180	68 00 00 00 00	 push	 OFFSET ?chatRegistryStr@@3PAUSTR_BUFFER@@A ; chatRegistryStr
  00185	e8 00 00 00 00	 call	 _fread
  0018a	83 c4 10	 add	 esp, 16			; 00000010H
  0018d	56		 push	 esi
  0018e	83 f8 08	 cmp	 eax, 8
  00191	73 0c		 jae	 SHORT $LN7@LoadChatRe

; 2319 : 
; 2320 : #ifdef _STONDEBUG_		
; 2321 : 		MessageBox(hWnd, "ì±íì© ë¡ê·¸ì¸ íì¤í¸ ë°ì´í°ë¥¼ ì½ì´ì¤ëë° ì¤í¨íììµëë¤.ï¼ï¼", "íì¸", MB_OK | MB_ICONSTOP);
; 2322 : #endif
; 2323 : 		fclose(fp);	// ????????

  00193	e8 00 00 00 00	 call	 _fclose
  00198	83 c4 04	 add	 esp, 4

; 2324 : 		return FALSE;

  0019b	33 c0		 xor	 eax, eax
  0019d	5e		 pop	 esi

; 2334 : }

  0019e	c3		 ret	 0
$LN7@LoadChatRe:

; 2325 : 	}
; 2326 : #ifdef _TALK_WINDOW
; 2327 : 	fread(&g_bTalkWindow, sizeof(BOOL), 1, fp);
; 2328 : 	if (g_bTalkWindow) TalkWindow.Create();
; 2329 : #endif
; 2330 : 	// ????????
; 2331 : 	fclose(fp);

  0019f	e8 00 00 00 00	 call	 _fclose
  001a4	83 c4 04	 add	 esp, 4

; 2332 : 
; 2333 : 	return TRUE;

  001a7	b8 01 00 00 00	 mov	 eax, 1
  001ac	5e		 pop	 esi

; 2334 : }

  001ad	c3		 ret	 0
?LoadChatRegistyStr@@YAHXZ ENDP				; LoadChatRegistyStr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?SaveChatRegistyStr@@YAHXZ
_TEXT	SEGMENT
?SaveChatRegistyStr@@YAHXZ PROC				; SaveChatRegistyStr, COMDAT

; 2247 : {

  00000	56		 push	 esi

; 2248 : 	FILE *fp;
; 2249 : 
; 2250 : 	// ????????????
; 2251 : 	if ((fp = fopen(CAHT_REGISTY_STR_FILE_NAME, "r+b")) == NULL) {

  00001	68 00 00 00 00	 push	 OFFSET ??_C@_03HMFOOINA@r?$CLb@
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GDFOCPAE@data?2chatreg?4dat@
  0000b	e8 00 00 00 00	 call	 _fopen
  00010	8b f0		 mov	 esi, eax
  00012	83 c4 08	 add	 esp, 8
  00015	85 f6		 test	 esi, esi
  00017	74 23		 je	 SHORT $LN5@SaveChatRe

; 2252 : #ifdef _STONDEBUG_		
; 2253 : 		MessageBox(hWnd, "ì±íë°© ë¡ê·¸ì¸ íì¤í¸ ê¸°ë¡ì ì¤í¨í¨ï¼ï¼", "íì¸", MB_OK | MB_ICONSTOP);
; 2254 : #endif
; 2255 : 		return FALSE;
; 2256 : 	}
; 2257 : 
; 2258 : 	// ???????
; 2259 : 	if (fwrite(chatRegistryStr, sizeof(STR_BUFFER), MAX_CHAT_REGISTY_STR, fp) < MAX_CHAT_REGISTY_STR) {

  00019	56		 push	 esi
  0001a	6a 08		 push	 8
  0001c	68 28 01 00 00	 push	 296			; 00000128H
  00021	68 00 00 00 00	 push	 OFFSET ?chatRegistryStr@@3PAUSTR_BUFFER@@A ; chatRegistryStr
  00026	e8 00 00 00 00	 call	 _fwrite
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	56		 push	 esi
  0002f	83 f8 08	 cmp	 eax, 8
  00032	73 0c		 jae	 SHORT $LN3@SaveChatRe

; 2260 : 
; 2261 : #ifdef _STONDEBUG_		
; 2262 : 		MessageBox(hWnd, "ì±íë°© ë¡ê·¸ì¸ íì¤í¸ ê¸°ë¡ì ì¤í¨í¨ï¼ï¼", "íì¸", MB_OK | MB_ICONSTOP);
; 2263 : #endif
; 2264 : 		fclose(fp);// ????????

  00034	e8 00 00 00 00	 call	 _fclose
  00039	83 c4 04	 add	 esp, 4
$LN5@SaveChatRe:

; 2274 : }

  0003c	33 c0		 xor	 eax, eax
  0003e	5e		 pop	 esi
  0003f	c3		 ret	 0
$LN3@SaveChatRe:

; 2265 : 		return FALSE;
; 2266 : 	}
; 2267 : #ifdef _TALK_WINDOW
; 2268 : 	fwrite(&g_bTalkWindow, sizeof(BOOL), 1, fp);
; 2269 : #endif
; 2270 : 	// ????????
; 2271 : 	fclose(fp);

  00040	e8 00 00 00 00	 call	 _fclose
  00045	83 c4 04	 add	 esp, 4

; 2272 : 
; 2273 : 	return TRUE;

  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	5e		 pop	 esi

; 2274 : }

  0004e	c3		 ret	 0
?SaveChatRegistyStr@@YAHXZ ENDP				; SaveChatRegistyStr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?DeathLetterAction@@YAXXZ
_TEXT	SEGMENT
?DeathLetterAction@@YAXXZ PROC				; DeathLetterAction, COMDAT

; 10210: void DeathLetterAction(void) {

  00000	56		 push	 esi

; 10211: 	int i;
; 10212: 
; 10213: 	for (i = 0; i < 4; i++) {

  00001	be 00 00 00 00	 mov	 esi, OFFSET ?pActLetter@@3PAPAUaction@@A ; pActLetter
$LL4@DeathLette:

; 10214: 		DeathAction(pActLetter[i]);

  00006	ff 36		 push	 DWORD PTR [esi]
  00008	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 10215: 		pActLetter[i] = NULL;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	83 c4 04	 add	 esp, 4
  00016	83 c6 04	 add	 esi, 4
  00019	81 fe 10 00 00
	00		 cmp	 esi, OFFSET ?pActLetter@@3PAPAUaction@@A+16
  0001f	7c e5		 jl	 SHORT $LL4@DeathLette

; 10216: 	}
; 10217: }

  00021	5e		 pop	 esi
  00022	c3		 ret	 0
?DeathLetterAction@@YAXXZ ENDP				; DeathLetterAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitOhtaParam@@YAXXZ
_TEXT	SEGMENT
?InitOhtaParam@@YAXXZ PROC				; InitOhtaParam, COMDAT

; 7146 : 	LoadMailHistory();					// ???????î???

  00000	e8 00 00 00 00	 call	 ?LoadMailHistory@@YAHXZ	; LoadMailHistory

; 7147 : 	LoadChatHistoryStr();				// ???????î°??î???

  00005	e8 00 00 00 00	 call	 ?LoadChatHistoryStr@@YAHXZ ; LoadChatHistoryStr

; 7148 : 										//LoadReadNameShield();
; 7149 : 										//LoadReadSayShield();
; 7150 : 	mailLamp = CheckMailNoReadFlag();	// î ¹î????

  0000a	e8 00 00 00 00	 call	 ?CheckMailNoReadFlag@@YAHXZ ; CheckMailNoReadFlag
  0000f	66 a3 00 00 00
	00		 mov	 WORD PTR ?mailLamp@@3FA, ax ; mailLamp

; 7151 : 	StatusUpPoint = 0;					// ???????????????
; 7152 : 	battleResultMsg.useFlag = 0;		// îî¬????????

  00015	33 c0		 xor	 eax, eax
  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?StatusUpPoint@@3HA, 0 ; StatusUpPoint
  00021	66 a3 00 00 00
	00		 mov	 WORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A, ax

; 7153 : 	MapWmdFlagBak = 0;

  00027	a3 00 00 00 00	 mov	 DWORD PTR ?MapWmdFlagBak@@3HA, eax ; MapWmdFlagBak

; 7154 : }

  0002c	c3		 ret	 0
?InitOhtaParam@@YAXXZ ENDP				; InitOhtaParam
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?CheckMailNoReadFlag@@YAHXZ
_TEXT	SEGMENT
?CheckMailNoReadFlag@@YAHXZ PROC			; CheckMailNoReadFlag, COMDAT

; 7159 : 	int i, j;
; 7160 : 
; 7161 : 	// î¡î¹î¤???
; 7162 : 	for (i = 0; i < MAX_ADR_BOOK; i++) {

  00000	ba a8 0c 00 00	 mov	 edx, OFFSET ?MailHistory@@3PAUMAIL_HISTORY@@A+3240
$LL4@CheckMailN:

; 7163 : 		// ??î¤???
; 7164 : 		for (j = 0; j < MAIL_MAX_HISTORY; j++) {

  00005	33 c9		 xor	 ecx, ecx
  00007	8b c2		 mov	 eax, edx
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@CheckMailN:

; 7165 : 			// î ¹î???????
; 7166 : 			if (MailHistory[i].noReadFlag[j] >= TRUE) return TRUE;

  00010	83 38 01	 cmp	 DWORD PTR [eax], 1
  00013	7d 1a		 jge	 SHORT $LN12@CheckMailN

; 7163 : 		// ??î¤???
; 7164 : 		for (j = 0; j < MAIL_MAX_HISTORY; j++) {

  00015	41		 inc	 ecx
  00016	83 c0 04	 add	 eax, 4
  00019	83 f9 14	 cmp	 ecx, 20			; 00000014H
  0001c	7c f2		 jl	 SHORT $LL7@CheckMailN

; 7159 : 	int i, j;
; 7160 : 
; 7161 : 	// î¡î¹î¤???
; 7162 : 	for (i = 0; i < MAX_ADR_BOOK; i++) {

  0001e	81 c2 f0 0e 00
	00		 add	 edx, 3824		; 00000ef0H
  00024	81 fa a8 b7 04
	00		 cmp	 edx, OFFSET ?MailHistory@@3PAUMAIL_HISTORY@@A+309160
  0002a	7c d9		 jl	 SHORT $LL4@CheckMailN

; 7167 : 		}
; 7168 : 	}
; 7169 : 	return FALSE;

  0002c	33 c0		 xor	 eax, eax

; 7170 : }

  0002e	c3		 ret	 0
$LN12@CheckMailN:

; 7165 : 			// î ¹î???????
; 7166 : 			if (MailHistory[i].noReadFlag[j] >= TRUE) return TRUE;

  0002f	b8 01 00 00 00	 mov	 eax, 1

; 7170 : }

  00034	c3		 ret	 0
?CheckMailNoReadFlag@@YAHXZ ENDP			; CheckMailNoReadFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?LoadMailHistory@@YAHXZ
_TEXT	SEGMENT
_work$ = -611844					; size = 611840
__$ArrayPad$ = -4					; size = 4
?LoadMailHistory@@YAHXZ PROC				; LoadMailHistory, COMDAT

; 2195 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 56 09 00	 mov	 eax, 611844		; 00095604H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi

; 2196 : 	FILE *fp;
; 2197 : 	MAIL_HISTORY work[MAX_ADR_BOOK * 2];	// ?????????î¨î
; 2198 : 
; 2199 : 											// î???????????
; 2200 : 	if ((fp = fopen(MAIL_HISTORY_FILE_NAME, "rb")) == NULL) {

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GFOIPMHB@data?2mail?4dat@
  00022	e8 00 00 00 00	 call	 _fopen
  00027	8b f0		 mov	 esi, eax
  00029	83 c4 08	 add	 esp, 8
  0002c	85 f6		 test	 esi, esi
  0002e	74 21		 je	 SHORT $LN9@LoadMailHi

; 2201 : 		// ?????îî«??î
; 2202 : 		if ((fp = fopen(MAIL_HISTORY_FILE_NAME, "wb")) != NULL) {
; 2203 : 			// ???????
; 2204 : 			fwrite(MailHistory, sizeof(MAIL_HISTORY), MAX_ADR_BOOK, fp);
; 2205 : 			fwrite(MailHistory, sizeof(MAIL_HISTORY), MAX_ADR_BOOK, fp);
; 2206 : 			fclose(fp);	// ????????
; 2207 : 		}
; 2208 : 
; 2209 : 		return FALSE;
; 2210 : 	}
; 2211 : 
; 2212 : 	// ????????????
; 2213 : 	if (fread(work, sizeof(MAIL_HISTORY), MAX_ADR_BOOK * 2, fp) < MAX_ADR_BOOK * 2) {

  00030	56		 push	 esi
  00031	68 a0 00 00 00	 push	 160			; 000000a0H
  00036	8d 85 fc a9 f6
	ff		 lea	 eax, DWORD PTR _work$[ebp]
  0003c	68 f0 0e 00 00	 push	 3824			; 00000ef0H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _fread
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  0004f	73 56		 jae	 SHORT $LN4@LoadMailHi
$LN9@LoadMailHi:

; 2214 : 		// ???????
; 2215 : 		// ?????îî«??î
; 2216 : 		if ((fp = fopen(MAIL_HISTORY_FILE_NAME, "wb")) != NULL) {
; 2217 : #ifdef _STONDEBUG_		
; 2218 : 			MessageBox(hWnd, "ì´ì  ë©ì¼ ìë£ ì­ì ã", "íì¸", MB_OK | MB_ICONSTOP);
; 2219 : #endif
; 2220 : 			// ???????
; 2221 : 			fwrite(MailHistory, sizeof(MAIL_HISTORY), MAX_ADR_BOOK, fp);
; 2222 : 			fwrite(MailHistory, sizeof(MAIL_HISTORY), MAX_ADR_BOOK, fp);
; 2223 : 			fclose(fp);	// ????????
; 2224 : 		}
; 2225 : 
; 2226 : 		return FALSE;

  00051	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GFOIPMHB@data?2mail?4dat@
  0005b	e8 00 00 00 00	 call	 _fopen
  00060	8b f0		 mov	 esi, eax
  00062	83 c4 08	 add	 esp, 8
  00065	85 f6		 test	 esi, esi
  00067	74 2d		 je	 SHORT $LN5@LoadMailHi
  00069	56		 push	 esi
  0006a	6a 50		 push	 80			; 00000050H
  0006c	68 f0 0e 00 00	 push	 3824			; 00000ef0H
  00071	68 00 00 00 00	 push	 OFFSET ?MailHistory@@3PAUMAIL_HISTORY@@A ; MailHistory
  00076	e8 00 00 00 00	 call	 _fwrite
  0007b	56		 push	 esi
  0007c	6a 50		 push	 80			; 00000050H
  0007e	68 f0 0e 00 00	 push	 3824			; 00000ef0H
  00083	68 00 00 00 00	 push	 OFFSET ?MailHistory@@3PAUMAIL_HISTORY@@A ; MailHistory
  00088	e8 00 00 00 00	 call	 _fwrite
  0008d	56		 push	 esi
  0008e	e8 00 00 00 00	 call	 _fclose
  00093	83 c4 24	 add	 esp, 36			; 00000024H
$LN5@LoadMailHi:
  00096	33 c0		 xor	 eax, eax
  00098	5e		 pop	 esi

; 2241 : 
; 2242 : 	return TRUE;
; 2243 : }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN4@LoadMailHi:

; 2227 : 	}
; 2228 : 
; 2229 : 
; 2230 : 	// î???î¶????????????î´???
; 2231 : 	fseek(fp, sizeof(MAIL_HISTORY) * MAX_ADR_BOOK * selectPcNo, SEEK_SET);

  000a7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?selectPcNo@@3FA ; selectPcNo
  000ae	69 c0 00 ab 04
	00		 imul	 eax, eax, 305920
  000b4	6a 00		 push	 0
  000b6	50		 push	 eax
  000b7	56		 push	 esi
  000b8	e8 00 00 00 00	 call	 _fseek

; 2232 : 
; 2233 : 	// ???î???
; 2234 : 	if (fread(MailHistory, sizeof(MAIL_HISTORY), MAX_ADR_BOOK, fp) < MAX_ADR_BOOK) {

  000bd	56		 push	 esi
  000be	6a 50		 push	 80			; 00000050H
  000c0	68 f0 0e 00 00	 push	 3824			; 00000ef0H
  000c5	68 00 00 00 00	 push	 OFFSET ?MailHistory@@3PAUMAIL_HISTORY@@A ; MailHistory
  000ca	e8 00 00 00 00	 call	 _fread
  000cf	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d2	56		 push	 esi
  000d3	83 f8 50	 cmp	 eax, 80			; 00000050H
  000d6	73 19		 jae	 SHORT $LN6@LoadMailHi

; 2235 : 
; 2236 : 		fclose(fp);	// ????????

  000d8	e8 00 00 00 00	 call	 _fclose
  000dd	83 c4 04	 add	 esp, 4

; 2237 : 		return FALSE;

  000e0	33 c0		 xor	 eax, eax
  000e2	5e		 pop	 esi

; 2241 : 
; 2242 : 	return TRUE;
; 2243 : }

  000e3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
$LN6@LoadMailHi:

; 2238 : 	}
; 2239 : 	// ????????
; 2240 : 	fclose(fp);

  000f1	e8 00 00 00 00	 call	 _fclose

; 2241 : 
; 2242 : 	return TRUE;
; 2243 : }

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f9	83 c4 04	 add	 esp, 4
  000fc	33 cd		 xor	 ecx, ebp
  000fe	b8 01 00 00 00	 mov	 eax, 1
  00103	5e		 pop	 esi
  00104	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
?LoadMailHistory@@YAHXZ ENDP				; LoadMailHistory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?SaveMailHistory@@YAHH@Z
_TEXT	SEGMENT
_no$ = 8						; size = 4
?SaveMailHistory@@YAHH@Z PROC				; SaveMailHistory, COMDAT

; 2167 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 2168 : 	FILE *fp;
; 2169 : 
; 2170 : 	// ????????????
; 2171 : 	if ((fp = fopen(MAIL_HISTORY_FILE_NAME, "r+b")) == NULL) {

  00004	68 00 00 00 00	 push	 OFFSET ??_C@_03HMFOOINA@r?$CLb@
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GFOIPMHB@data?2mail?4dat@
  0000e	e8 00 00 00 00	 call	 _fopen
  00013	8b f8		 mov	 edi, eax
  00015	83 c4 08	 add	 esp, 8
  00018	85 ff		 test	 edi, edi
  0001a	74 4d		 je	 SHORT $LN5@SaveMailHi

; 2172 : 		return FALSE;
; 2173 : 	}
; 2174 : 
; 2175 : 	// ??????????î¶????????????î´???
; 2176 : 	fseek(fp, sizeof(MAIL_HISTORY) * MAX_ADR_BOOK * selectPcNo, SEEK_SET);

  0001c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?selectPcNo@@3FA ; selectPcNo
  00023	69 c0 00 ab 04
	00		 imul	 eax, eax, 305920
  00029	56		 push	 esi
  0002a	6a 00		 push	 0
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 _fseek

; 2177 : 
; 2178 : 	// ??????î¡î¹î±???????????????î´??
; 2179 : 	fseek(fp, sizeof(MAIL_HISTORY) * no, SEEK_CUR);

  00033	69 75 08 f0 0e
	00 00		 imul	 esi, DWORD PTR _no$[ebp], 3824
  0003a	6a 01		 push	 1
  0003c	56		 push	 esi
  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 _fseek

; 2180 : 
; 2181 : 	// ???????
; 2182 : 	if (fwrite(&MailHistory[no], sizeof(MAIL_HISTORY), 1, fp) < 1) {

  00043	57		 push	 edi
  00044	6a 01		 push	 1
  00046	8d 86 00 00 00
	00		 lea	 eax, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[esi]
  0004c	68 f0 0e 00 00	 push	 3824			; 00000ef0H
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _fwrite
  00057	83 c4 28	 add	 esp, 40			; 00000028H
  0005a	5e		 pop	 esi
  0005b	57		 push	 edi
  0005c	83 f8 01	 cmp	 eax, 1
  0005f	73 0d		 jae	 SHORT $LN3@SaveMailHi

; 2183 : 
; 2184 : 		fclose(fp);// ????????

  00061	e8 00 00 00 00	 call	 _fclose
  00066	83 c4 04	 add	 esp, 4
$LN5@SaveMailHi:

; 2191 : }

  00069	33 c0		 xor	 eax, eax
  0006b	5f		 pop	 edi
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN3@SaveMailHi:

; 2185 : 		return FALSE;
; 2186 : 	}
; 2187 : 
; 2188 : 	fclose(fp);

  0006e	e8 00 00 00 00	 call	 _fclose
  00073	83 c4 04	 add	 esp, 4

; 2189 : 
; 2190 : 	return TRUE;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	5f		 pop	 edi

; 2191 : }

  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?SaveMailHistory@@YAHH@Z ENDP				; SaveMailHistory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?MakeHitBox@@YAHHHHHH@Z
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_dispPrio$ = 24						; size = 4
?MakeHitBox@@YAHHHHHH@Z PROC				; MakeHitBox, COMDAT

; 10199: BOOL MakeHitBox(int x1, int y1, int x2, int y2, int dispPrio) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10200: 	if (mouse.nowPoint.x <= x2 && x1 <= mouse.nowPoint.x &&
; 10201: 		mouse.nowPoint.y <= y2 && y1 <= mouse.nowPoint.y) {

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A
  00008	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]
  0000b	3b c1		 cmp	 eax, ecx
  0000d	7f 3d		 jg	 SHORT $LN2@MakeHitBox
  0000f	8b 55 08	 mov	 edx, DWORD PTR _x1$[ebp]
  00012	3b d0		 cmp	 edx, eax
  00014	7f 36		 jg	 SHORT $LN2@MakeHitBox
  00016	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  0001b	3b 45 14	 cmp	 eax, DWORD PTR _y2$[ebp]
  0001e	7f 2c		 jg	 SHORT $LN2@MakeHitBox
  00020	39 45 0c	 cmp	 DWORD PTR _y1$[ebp], eax
  00023	7f 27		 jg	 SHORT $LN2@MakeHitBox

; 10202: 		if (dispPrio >= 0) {

  00025	8b 45 18	 mov	 eax, DWORD PTR _dispPrio$[ebp]
  00028	85 c0		 test	 eax, eax
  0002a	78 19		 js	 SHORT $LN3@MakeHitBox

; 10203: 			StockBoxDispBuffer(x1, y1, x2, y2, dispPrio, BoxColor, 0);

  0002c	6a 00		 push	 0
  0002e	ff 35 00 00 00
	00		 push	 DWORD PTR ?BoxColor@@3HA ; BoxColor
  00034	50		 push	 eax
  00035	ff 75 14	 push	 DWORD PTR _y2$[ebp]
  00038	51		 push	 ecx
  00039	ff 75 0c	 push	 DWORD PTR _y1$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  00042	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@MakeHitBox:

; 10204: 		}
; 10205: 		return TRUE;

  00045	b8 01 00 00 00	 mov	 eax, 1

; 10208: }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN2@MakeHitBox:

; 10206: 	}
; 10207: 	return FALSE;

  0004c	33 c0		 xor	 eax, eax

; 10208: }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?MakeHitBox@@YAHHHHHH@Z ENDP				; MakeHitBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z
_TEXT	SEGMENT
_pAct$1$ = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_sizeX$ = 16						; size = 4
_sizeY$ = 20						; size = 4
_titleNo$ = 24						; size = 4
_wndType$ = 28						; size = 4
?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z PROC		; MakeWindowDisp, COMDAT

; 1494 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 1495 : 	ACTION *pAct;
; 1496 : 	WINDOW_DISP *pYobi;
; 1497 : #ifdef _NEW_RESOMODE  //800 600æ¨¡å¼
; 1498 : 	if (x > 320) {

  00005	8b 7d 08	 mov	 edi, DWORD PTR _x$[ebp]
  00008	81 ff 40 01 00
	00		 cmp	 edi, 320		; 00000140H
  0000e	7e 08		 jle	 SHORT $LN2@MakeWindow

; 1499 : 		x += DISPLACEMENT_X;

  00010	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?DISPLACEMENT_X@@3HA ; DISPLACEMENT_X

; 1500 : 	}

  00016	eb 11		 jmp	 SHORT $LN4@MakeWindow
$LN2@MakeWindow:

; 1501 : 	else if (x > 40) {

  00018	83 ff 28	 cmp	 edi, 40			; 00000028H
  0001b	7e 0c		 jle	 SHORT $LN4@MakeWindow

; 1502 : 		x += DISPLACEMENT_X / 2;

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_X@@3HA ; DISPLACEMENT_X
  00022	99		 cdq
  00023	2b c2		 sub	 eax, edx
  00025	d1 f8		 sar	 eax, 1
  00027	03 f8		 add	 edi, eax
$LN4@MakeWindow:

; 1503 : 	}
; 1504 : 
; 1505 : 	if (y > 240)

  00029	8b 5d 0c	 mov	 ebx, DWORD PTR _y$[ebp]
  0002c	81 fb f0 00 00
	00		 cmp	 ebx, 240		; 000000f0H
  00032	7e 0e		 jle	 SHORT $LN5@MakeWindow

; 1506 : 		y -= DISPLACEMENT_Y / 2;

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00039	99		 cdq
  0003a	2b c2		 sub	 eax, edx
  0003c	d1 f8		 sar	 eax, 1
  0003e	f7 d8		 neg	 eax
  00040	eb 0f		 jmp	 SHORT $LN27@MakeWindow
$LN5@MakeWindow:

; 1507 : 	else if (y > 40)

  00042	83 fb 28	 cmp	 ebx, 40			; 00000028H
  00045	7e 0c		 jle	 SHORT $LN7@MakeWindow

; 1508 : 		y += DISPLACEMENT_Y / 2;

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  0004c	99		 cdq
  0004d	2b c2		 sub	 eax, edx
  0004f	d1 f8		 sar	 eax, 1
$LN27@MakeWindow:

; 1509 : 
; 1510 : #endif
; 1511 : 	// ?????????îî¾
; 1512 : 	pAct = GetAction(PRIO_JIKI, sizeof(WINDOW_DISP));

  00051	03 d8		 add	 ebx, eax
$LN7@MakeWindow:
  00053	6a 40		 push	 64			; 00000040H
  00055	6a 03		 push	 3
  00057	e8 00 00 00 00	 call	 ?GetAction@@YAPAUaction@@EI@Z ; GetAction
  0005c	8b c8		 mov	 ecx, eax
  0005e	83 c4 08	 add	 esp, 8
  00061	89 4d 08	 mov	 DWORD PTR _pAct$1$[ebp], ecx

; 1513 : 	if (pAct == NULL) return NULL;

  00064	85 c9		 test	 ecx, ecx
  00066	75 04		 jne	 SHORT $LN8@MakeWindow

; 1573 : }

  00068	5f		 pop	 edi
  00069	5b		 pop	 ebx
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN8@MakeWindow:

; 1514 : 
; 1515 : 	// î¯???
; 1516 : 	pAct->func = WindowDisp;
; 1517 : 	// î¸î?îî
; 1518 : 	pAct->dispPrio = DISP_PRIO_MENU;
; 1519 : 	// ???îî??
; 1520 : 	pAct->atr |= ACT_ATR_HIT;
; 1521 : 	// î¸î???
; 1522 : 	pAct->atr |= ACT_ATR_HIDE;
; 1523 : 
; 1524 : 	// ?î?î¨î?????
; 1525 : 	pYobi = (WINDOW_DISP *)pAct->pYobi;
; 1526 : 	// ?î³???
; 1527 : 	pAct->x = x;
; 1528 : 	pAct->y = y;
; 1529 : 	pYobi->titleX = x + (sizeX * 64) / 2;

  0006c	8b 55 10	 mov	 edx, DWORD PTR _sizeX$[ebp]
  0006f	83 89 a4 00 00
	00 06		 or	 DWORD PTR [ecx+164], 6
  00076	89 59 1c	 mov	 DWORD PTR [ecx+28], ebx
  00079	8b da		 mov	 ebx, edx
  0007b	c1 e3 05	 shl	 ebx, 5
  0007e	89 79 18	 mov	 DWORD PTR [ecx+24], edi
  00081	56		 push	 esi
  00082	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00085	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET ?WindowDisp@@YAXPAUaction@@@Z ; WindowDisp
  0008c	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]

; 1530 : 	pYobi->titleY = pAct->y + 27;
; 1531 : 	// ??????
; 1532 : 	pYobi->sizeX = sizeX;
; 1533 : 	pYobi->sizeY = sizeY;

  0008f	8b 7d 14	 mov	 edi, DWORD PTR _sizeY$[ebp]
  00092	c6 41 15 68	 mov	 BYTE PTR [ecx+21], 104	; 00000068H
  00096	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00099	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0009c	83 c0 1b	 add	 eax, 27			; 0000001bH
  0009f	89 16		 mov	 DWORD PTR [esi], edx

; 1534 : 	// ????î±???
; 1535 : 	pYobi->titleNo = titleNo;
; 1536 : 	pYobi->boxDispPrio = DISP_PRIO_MENU;
; 1537 : 	// ??????????
; 1538 : 	if (wndType == 0) pYobi->wndType = CG_WND_G_0;

  000a1	8b 55 1c	 mov	 edx, DWORD PTR _wndType$[ebp]
  000a4	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000a7	8b 45 18	 mov	 eax, DWORD PTR _titleNo$[ebp]
  000aa	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  000ad	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000b0	c7 46 38 68 00
	00 00		 mov	 DWORD PTR [esi+56], 104	; 00000068H
  000b7	85 d2		 test	 edx, edx
  000b9	75 1b		 jne	 SHORT $LN9@MakeWindow
$LN28@MakeWindow:

; 1563 : 	}
; 1564 : 	else {	// î¡????????
; 1565 : 		pYobi->mx = (sizeX * 64) / 2 + pAct->x;

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CG_WND_G_0@@3HA ; CG_WND_G_0
  000c0	89 46 28	 mov	 DWORD PTR [esi+40], eax
  000c3	c7 46 3c ff ff
	ff ff		 mov	 DWORD PTR [esi+60], -1
  000ca	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
  000d1	e9 b5 00 00 00	 jmp	 $LN25@MakeWindow
$LN9@MakeWindow:

; 1539 : 	else if (wndType == 1) pYobi->wndType = CG_WND_G_0;

  000d6	83 fa 01	 cmp	 edx, 1
  000d9	74 e0		 je	 SHORT $LN28@MakeWindow

; 1540 : 	else if (wndType == 2) pYobi->wndType = CG_WND_G_0;

  000db	83 fa 02	 cmp	 edx, 2
  000de	75 1b		 jne	 SHORT $LN13@MakeWindow
$LN29@MakeWindow:

; 1563 : 	}
; 1564 : 	else {	// î¡????????
; 1565 : 		pYobi->mx = (sizeX * 64) / 2 + pAct->x;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CG_WND_G_0@@3HA ; CG_WND_G_0
  000e5	89 46 28	 mov	 DWORD PTR [esi+40], eax
  000e8	c7 46 3c ff ff
	ff ff		 mov	 DWORD PTR [esi+60], -1
  000ef	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  000f6	e9 90 00 00 00	 jmp	 $LN25@MakeWindow
$LN13@MakeWindow:

; 1541 : 	else if (wndType == 3) pYobi->wndType = CG_WND_G_0;

  000fb	83 fa 03	 cmp	 edx, 3
  000fe	74 e0		 je	 SHORT $LN29@MakeWindow

; 1542 : 	else if (wndType == 4) {

  00100	c7 46 3c ff ff
	ff ff		 mov	 DWORD PTR [esi+60], -1
  00107	83 fa 04	 cmp	 edx, 4
  0010a	75 68		 jne	 SHORT $LN17@MakeWindow

; 1543 : 		pYobi->wndType = -2;

  0010c	c7 46 28 fe ff
	ff ff		 mov	 DWORD PTR [esi+40], -2	; fffffffeH

; 1544 : 		// ???îî???
; 1545 : 		pYobi->yesDispNo = -2;

  00113	c7 46 30 fe ff
	ff ff		 mov	 DWORD PTR [esi+48], -2	; fffffffeH

; 1546 : 		pYobi->noDispNo = -2;

  0011a	c7 46 34 fe ff
	ff ff		 mov	 DWORD PTR [esi+52], -2	; fffffffeH

; 1547 : 		pYobi->boxDispPrio = DISP_PRIO_YES_NO_WND;

  00121	c7 46 38 6d 00
	00 00		 mov	 DWORD PTR [esi+56], 109	; 0000006dH
  00128	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
$LN23@MakeWindow:

; 1561 : 		pYobi->mx = sizeX / 2 + pAct->x;

  0012f	8b 45 10	 mov	 eax, DWORD PTR _sizeX$[ebp]
  00132	8b 59 18	 mov	 ebx, DWORD PTR [ecx+24]
  00135	99		 cdq
  00136	2b c2		 sub	 eax, edx
  00138	d1 f8		 sar	 eax, 1
  0013a	03 d8		 add	 ebx, eax

; 1562 : 		pYobi->my = sizeY / 2 + pAct->y;

  0013c	8b c7		 mov	 eax, edi
  0013e	99		 cdq
  0013f	8b f9		 mov	 edi, ecx
  00141	2b c2		 sub	 eax, edx
  00143	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00146	d1 f8		 sar	 eax, 1
  00148	03 47 1c	 add	 eax, DWORD PTR [edi+28]
$LN22@MakeWindow:

; 1567 : 	}
; 1568 : 	// ?î¤?î«
; 1569 : 	pAct->dx = (pYobi->mx - pAct->x) / WINDOW_CREATE_FRAME;

  0014b	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0014e	2b 5f 18	 sub	 ebx, DWORD PTR [edi+24]
  00151	8b c3		 mov	 eax, ebx
  00153	99		 cdq
  00154	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?WINDOW_CREATE_FRAME@@3HA ; WINDOW_CREATE_FRAME
  0015a	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 1570 : 	pAct->dy = (pYobi->my - pAct->y) / WINDOW_CREATE_FRAME;

  0015d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00160	2b 47 1c	 sub	 eax, DWORD PTR [edi+28]
  00163	99		 cdq
  00164	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?WINDOW_CREATE_FRAME@@3HA ; WINDOW_CREATE_FRAME

; 1571 : 
; 1572 : 	return pAct;

  0016a	5e		 pop	 esi
  0016b	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  0016e	8b c7		 mov	 eax, edi
  00170	5f		 pop	 edi

; 1573 : }

  00171	5b		 pop	 ebx
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
$LN17@MakeWindow:

; 1548 : 	}
; 1549 : 	else pYobi->wndType = -1;
; 1550 : 
; 1551 : 	// YesNo ??????
; 1552 : 	pYobi->yesNoResult = -1;
; 1553 : 
; 1554 : 	// ???îî???
; 1555 : 	if (wndType >= 2) pYobi->hitFlag = FALSE;
; 1556 : 	else pYobi->hitFlag = TRUE;
; 1557 : 
; 1558 : 	// ?î?î³?î«
; 1559 : 	// ?????????î???????
; 1560 : 	if (wndType == -1 || wndType == 4) {

  00174	33 c0		 xor	 eax, eax
  00176	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
  0017d	83 fa 02	 cmp	 edx, 2
  00180	0f 9c c0	 setl	 al
  00183	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00186	83 fa ff	 cmp	 edx, -1
  00189	74 a4		 je	 SHORT $LN23@MakeWindow
$LN25@MakeWindow:

; 1563 : 	}
; 1564 : 	else {	// î¡????????
; 1565 : 		pYobi->mx = (sizeX * 64) / 2 + pAct->x;

  0018b	03 59 18	 add	 ebx, DWORD PTR [ecx+24]

; 1566 : 		pYobi->my = (sizeY * 48) / 2 + pAct->y;

  0018e	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00191	8b 7d 08	 mov	 edi, DWORD PTR _pAct$1$[ebp]
  00194	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00197	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0019a	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  0019d	eb ac		 jmp	 SHORT $LN22@MakeWindow
?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ENDP		; MakeWindowDisp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?MenuProc@@YAXXZ
_TEXT	SEGMENT
$T3 = -17976						; size = 4
$T4 = -17972						; size = 4
$T5 = -17968						; size = 4
tv39140 = -17961					; size = 1
tv39139 = -17961					; size = 1
_nowNo$1$ = -17960					; size = 4
tv39379 = -17960					; size = 4
tv39274 = -17960					; size = 4
tv39082 = -17960					; size = 4
tv39054 = -17960					; size = 4
tv38729 = -17960					; size = 4
tv38394 = -17960					; size = 4
tv38392 = -17960					; size = 4
tv37341 = -17960					; size = 4
tv31215 = -17960					; size = 4
$T6 = -17956						; size = 4
$T7 = -17956						; size = 4
tv39459 = -17956					; size = 4
tv39395 = -17956					; size = 4
tv39372 = -17956					; size = 4
tv39365 = -17956					; size = 4
tv39237 = -17956					; size = 4
tv39236 = -17956					; size = 4
tv39087 = -17956					; size = 4
tv38678 = -17956					; size = 4
tv38409 = -17956					; size = 4
tv38202 = -17956					; size = 4
tv37976 = -17956					; size = 4
tv37975 = -17956					; size = 4
tv37750 = -17956					; size = 4
tv37479 = -17956					; size = 4
$T8 = -17952						; size = 4
$T9 = -17952						; size = 4
$T10 = -17952						; size = 4
_iY$1$ = -17952						; size = 4
_flag$1$ = -17952					; size = 4
_j$1$ = -17952						; size = 4
_albumNo$1$ = -17952					; size = 4
__tls_array$1$ = -17952					; size = 4
tv39345 = -17952					; size = 4
tv39302 = -17952					; size = 4
tv39267 = -17952					; size = 4
tv39256 = -17952					; size = 4
tv39253 = -17952					; size = 4
tv38459 = -17952					; size = 4
tv37117 = -17952					; size = 4
__real@3fe999999999999a$1$ = -17948			; size = 8
_atrFlag$1$ = -17944					; size = 4
_i$32$ = -17944						; size = 4
_i$20$ = -17944						; size = 4
_x$4$ = -17944						; size = 4
tv39300 = -17944					; size = 4
tv39154 = -17944					; size = 4
tv39098 = -17944					; size = 4
tv38431 = -17944					; size = 4
$T11 = -17940						; size = 4
$T12 = -17940						; size = 4
_ñìïÒ?Y$1$ = -17940					; size = 4
_ñìïÒ?Y$1$ = -17940					; size = 4
_color$1$ = -17940					; size = 4
_btnNo$2$ = -17940					; size = 4
_i$14$ = -17940						; size = 4
_y$12$ = -17940						; size = 4
tv39347 = -17940					; size = 4
tv39305 = -17940					; size = 4
tv39290 = -17940					; size = 4
tv38925 = -17940					; size = 4
tv38701 = -17940					; size = 4
tv38620 = -17940					; size = 4
$T13 = -17936						; size = 4
_j$2$ = -17936						; size = 4
_j$1$ = -17936						; size = 4
_splitPoint$1$ = -17936					; size = 4
_splitPoint$1$ = -17936					; size = 4
__Start$1$ = -17936					; size = 4
_y$3$ = -17936						; size = 4
tv39352 = -17936					; size = 4
tv39338 = -17936					; size = 4
tv39075 = -17936					; size = 4
tv38982 = -17936					; size = 4
tv38932 = -17936					; size = 4
tv38798 = -17936					; size = 4
$T14 = -17932						; size = 4
$T15 = -17932						; size = 4
$T16 = -17932						; size = 4
$T17 = -17932						; size = 4
_nowNo$1$ = -17932					; size = 4
_col$3$ = -17932					; size = 4
_??MAXX$1$ = -17932					; size = 4
_tm_count$1$ = -17932					; size = 4
_i$29$ = -17932						; size = 4
_i$9$ = -17932						; size = 4
_y$7$ = -17932						; size = 4
tv39354 = -17932					; size = 4
tv39349 = -17932					; size = 4
tv39303 = -17932					; size = 4
tv39301 = -17932					; size = 4
tv39279 = -17932					; size = 4
tv39004 = -17932					; size = 4
tv38631 = -17932					; size = 4
tv37835 = -17932					; size = 4
__Guard$18 = -17932					; size = 4
$T19 = -17928						; size = 4
$T20 = -17928						; size = 4
$T21 = -17928						; size = 4
_flag$2$ = -17928					; size = 4
_flag$1$ = -17928					; size = 4
_color$1$ = -17928					; size = 4
_ÝÂùÜ??ú¼?$1$ = -17928					; size = 4
tv39464 = -17928					; size = 4
tv39406 = -17928					; size = 4
tv39376 = -17928					; size = 4
tv39332 = -17928					; size = 4
tv39293 = -17928					; size = 4
tv39292 = -17928					; size = 4
tv39277 = -17928					; size = 4
tv39272 = -17928					; size = 4
tv39265 = -17928					; size = 4
tv39254 = -17928					; size = 4
tv39245 = -17928					; size = 4
tv39030 = -17928					; size = 4
tv39021 = -17928					; size = 4
tv39016 = -17928					; size = 4
tv39013 = -17928					; size = 4
tv38998 = -17928					; size = 4
tv38976 = -17928					; size = 4
tv38805 = -17928					; size = 4
tv38702 = -17928					; size = 4
tv38687 = -17928					; size = 4
tv38635 = -17928					; size = 4
tv38601 = -17928					; size = 4
tv38598 = -17928					; size = 4
tv38544 = -17928					; size = 4
tv37639 = -17928					; size = 4
tv35985 = -17928					; size = 4
tv35893 = -17928					; size = 4
$T22 = -17924						; size = 4
$T23 = -17924						; size = 4
$T24 = -17924						; size = 4
$T25 = -17924						; size = 4
_flag$1$ = -17924					; size = 4
_i$33$ = -17924						; size = 4
_i$28$ = -17924						; size = 4
_x$5$ = -17924						; size = 4
tv39408 = -17924					; size = 4
tv39387 = -17924					; size = 4
tv39344 = -17924					; size = 4
tv39339 = -17924					; size = 4
tv39280 = -17924					; size = 4
tv39266 = -17924					; size = 4
tv39261 = -17924					; size = 4
tv39255 = -17924					; size = 4
tv39244 = -17924					; size = 4
tv39216 = -17924					; size = 4
tv39199 = -17924					; size = 4
tv39090 = -17924					; size = 4
tv39038 = -17924					; size = 4
tv38950 = -17924					; size = 4
tv38926 = -17924					; size = 4
tv38796 = -17924					; size = 4
$T26 = -17924						; size = 1
$T27 = -17924						; size = 1
$T28 = -17920						; size = 4
$T29 = -17920						; size = 4
_splitPoint$1$ = -17920					; size = 4
_splitPoint$1$ = -17920					; size = 4
_splitPoint$2$ = -17920					; size = 4
_selectFlag$1$ = -17920					; size = 4
_i$35$ = -17920						; size = 4
_i$34$ = -17920						; size = 4
_i$23$ = -17920						; size = 4
_y$8$ = -17920						; size = 4
tv39445 = -17920					; size = 4
tv39435 = -17920					; size = 4
tv39350 = -17920					; size = 4
tv39348 = -17920					; size = 4
tv39346 = -17920					; size = 4
tv39337 = -17920					; size = 4
tv39010 = -17920					; size = 4
tv39006 = -17920					; size = 4
tv38927 = -17920					; size = 4
tv38810 = -17920					; size = 4
tv38700 = -17920					; size = 4
tv38632 = -17920					; size = 4
tv36649 = -17920					; size = 4
_i$7$ = -17916						; size = 4
_y$11$ = -17916						; size = 4
tv39076 = -17916					; size = 4
tv38968 = -17916					; size = 4
tv38948 = -17916					; size = 4
_x$3$ = -17912						; size = 4
tv38984 = -17912					; size = 4
_color$1$ = -17908					; size = 4
_i$12$ = -17908						; size = 4
tv39351 = -17908					; size = 4
tv39276 = -17908					; size = 4
tv39252 = -17908					; size = 4
tv39169 = -17908					; size = 4
tv39153 = -17908					; size = 4
tv39097 = -17908					; size = 4
tv38987 = -17908					; size = 4
tv38933 = -17908					; size = 4
tv38811 = -17908					; size = 4
tv38479 = -17908					; size = 4
$T30 = -17904						; size = 7444
_r$31 = -10460						; size = 272
_graNo$32 = -10188					; size = 28
_atrGraNo$33 = -10176					; size = 16
_buf$34 = -10160					; size = 1024
_buffer2$35 = -9136					; size = 1024
_buffer$36 = -8112					; size = 1024
_buffer$37 = -7088					; size = 1024
_damage_msg$38 = -6064					; size = 256
_damage_msg$39 = -5808					; size = 256
_pile$40 = -5552					; size = 256
_moji2$41 = -5296					; size = 256
_buf$42 = -5040						; size = 256
_buffer$43 = -4784					; size = 1024
_??ð«ãÆ$44 = -3760					; size = 128
_moji2$45 = -3632					; size = 256
_â³??é»$46 = -3376					; size = 128
_?ï×??ÙþÜâ$47 = -3248					; size = 256
_tm_DetailDesc$48 = -2992				; size = 64
_tm_DetailDesc2$49 = -2928				; size = 64
_tm_DetailDesc$50 = -2864				; size = 64
_tm_DetailDesc1$51 = -2800				; size = 64
_tm_DetailDesc2$52 = -2736				; size = 64
_tm_DetailDesc$53 = -2672				; size = 64
_tm_DetailDesc1$54 = -2608				; size = 64
_buf$55 = -2544						; size = 64
_buf$56 = -2480						; size = 64
_Ô³Îý?úþ?Ù¥$57 = -2416					; size = 2128
_szTemp$58 = -288					; size = 16
_moji$ = -272						; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?MenuProc@@YAXXZ PROC					; MenuProc, COMDAT

; 10796: void MenuProc(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MenuProc@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 2c 46 00 00	 mov	 eax, 17964		; 0000462cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 10797: 	int x, y, i;
; 10798: 	x = y = i = 0;
; 10799: 	char moji[256];
; 10800: #ifdef __AI
; 10801: 	extern int AI_State;
; 10802: 	if (AI_State) {

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  00038	c7 85 04 ba ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$11$[ebp], 0
  00042	c7 85 08 ba ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$3$[ebp], 0
  0004c	74 1b		 je	 SHORT $LN497@MenuProc

; 10803: 		extern BOOL AI_SettingProc();
; 10804: 		if (AI_SettingProc()) {

  0004e	e8 00 00 00 00	 call	 ?AI_SettingProc@@YAHXZ	; AI_SettingProc
  00053	85 c0		 test	 eax, eax
  00055	74 12		 je	 SHORT $LN497@MenuProc

; 10805: 			AI_State = 0;
; 10806: 			extern short actBtn;
; 10807: 			actBtn = 0;

  00057	33 c0		 xor	 eax, eax
  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  00063	66 a3 00 00 00
	00		 mov	 WORD PTR ?actBtn@@3FA, ax ; actBtn
$LN497@MenuProc:

; 10808: 		}
; 10809: 	}
; 10810: #endif
; 10811: #ifdef _NB_æ­çº¿èªå¨éè¿
; 10812: 	if (èªå¨ç»éçªå£) {

  00069	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?í»?Ôô??Ï¢@@3HA, 0 ; í»?Ôô??Ï¢
  00070	74 05		 je	 SHORT $LN498@MenuProc

; 10813: 		èªå¨ç»éçªå£åè°();

  00072	e8 00 00 00 00	 call	 ?í»?Ôô??Ï¢üÞ?@@YAXXZ	; í»?Ôô??Ï¢üÞ?
$LN498@MenuProc:

; 10814: 	}
; 10815: #endif
; 10816: #ifdef _AI_OTHER
; 10817: 	if (AI_Other_State) AI_OtherProc();

  00077	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_Other_State@@3HA, 0 ; AI_Other_State
  0007e	74 05		 je	 SHORT $LN499@MenuProc
  00080	e8 00 00 00 00	 call	 ?AI_OtherProc@@YAXXZ	; AI_OtherProc
$LN499@MenuProc:

; 10818: #endif
; 10819: 
; 10820: #ifdef _TELLCHANNEL				//ROG ADD å¯è¯­é¢é
; 10821: 	if (MultiTells == TRUE) {

  00085	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?MultiTells@@3HA, 1 ; MultiTells
  0008c	75 16		 jne	 SHORT $LN501@MenuProc

; 10822: 		SelectChar();

  0008e	e8 00 00 00 00	 call	 ?SelectChar@@YAXXZ	; SelectChar

; 10823: 		if (MenuToggleFlag & JOY_ESC)

  00093	f7 05 00 00 00
	00 00 00 00 80	 test	 DWORD PTR ?MenuToggleFlag@@3IA, -2147483648 ; MenuToggleFlag, 80000000H
  0009d	74 05		 je	 SHORT $LN501@MenuProc

; 10824: 			DeathTellChannel();

  0009f	e8 00 00 00 00	 call	 ?DeathTellChannel@@YAXXZ ; DeathTellChannel
$LN501@MenuProc:

; 10825: 	}
; 10826: #endif
; 10827: 
; 10828: 
; 10829: 
; 10830: #ifdef _TIMEBAR_FUNCTION
; 10831: 	if (timeBarFlag == TRUE) {
; 10832: 		DrawTimeBar();
; 10833: 	}
; 10834: #endif
; 10835: 
; 10836: #ifdef __AI
; 10837: 	if (joy_trg[0] & JOY_ESC && checkFieldMenuFlag() == FALSE && !AI_State) {

  000a4	f7 05 00 00 00
	00 00 00 00 80	 test	 DWORD PTR ?joy_trg@@3PAKA, -2147483648 ; 80000000H
  000ae	0f 84 80 01 00
	00		 je	 $LN503@MenuProc
  000b4	e8 00 00 00 00	 call	 ?checkFieldMenuFlag@@YAHXZ ; checkFieldMenuFlag
  000b9	85 c0		 test	 eax, eax
  000bb	0f 85 73 01 00
	00		 jne	 $LN503@MenuProc
  000c1	39 05 00 00 00
	00		 cmp	 DWORD PTR ?AI_State@@3HA, eax ; AI_State
  000c7	0f 85 67 01 00
	00		 jne	 $LN503@MenuProc

; 10838: #else
; 10839: 	if (joy_trg[0] & JOY_ESC && checkFieldMenuFlag() == FALSE) {
; 10840: #endif
; 10841: 		if (GetImeString() == NULL) {

  000cd	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  000d2	85 c0		 test	 eax, eax
  000d4	0f 85 5a 01 00
	00		 jne	 $LN503@MenuProc

; 10842: 			if (MenuToggleFlag != 0 || BattleResultWndFlag >= 1 || Mammoth::Get().IsOpen()
; 10843: 				|| PetRanking::Instance().Check() ) {

  000da	39 05 00 00 00
	00		 cmp	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag
  000e0	0f 85 ed 00 00
	00		 jne	 $LN506@MenuProc
  000e6	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?BattleResultWndFlag@@3HA, 1 ; BattleResultWndFlag
  000ed	0f 8d e0 00 00
	00		 jge	 $LN506@MenuProc
  000f3	e8 00 00 00 00	 call	 ?Get@Mammoth@@SAAAV1@XZ	; Mammoth::Get
  000f8	8b c8		 mov	 ecx, eax
  000fa	e8 00 00 00 00	 call	 ?IsOpen@Mammoth@@QAEHXZ	; Mammoth::IsOpen
  000ff	85 c0		 test	 eax, eax
  00101	0f 85 cc 00 00
	00		 jne	 $LN506@MenuProc
  00107	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  0010c	8b c8		 mov	 ecx, eax
  0010e	e8 00 00 00 00	 call	 ?Check@PetRanking@@QAEHXZ ; PetRanking::Check
  00113	85 c0		 test	 eax, eax
  00115	0f 85 b8 00 00
	00		 jne	 $LN506@MenuProc

; 10851: 				}
; 10852: 			}
; 10853: 			else {
; 10854: 				if (GetImeString() == NULL) {

  0011b	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  00120	85 c0		 test	 eax, eax
  00122	0f 85 fd 00 00
	00		 jne	 $LN507@MenuProc

; 10855: 
; 10856: 					MenuToggleFlag ^= JOY_ESC;

  00128	81 35 00 00 00
	00 00 00 00 80	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, -2147483648 ; MenuToggleFlag, 80000000H

; 10857: 					play_se(202, 320, 240);

  00132	68 f0 00 00 00	 push	 240			; 000000f0H
  00137	68 40 01 00 00	 push	 320			; 00000140H
  0013c	68 ca 00 00 00	 push	 202			; 000000caH
  00141	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00146	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0014d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10858: 					for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 10859: 					systemWndNo = 0;
; 10860: 					if (MenuToggleFlag & JOY_ESC) {

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00155	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 0 ; systemWndNo
  0015f	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA, xmm0
  00166	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+16, xmm0
  0016d	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+32, xmm0
  00174	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+48, xmm0
  0017b	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+64, xmm0
  00182	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+80, xmm0
  00189	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+96, xmm0
  00190	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+112, xmm0
  00197	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+128, xmm0
  0019e	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+144, xmm0
  001a5	85 c0		 test	 eax, eax
  001a7	79 65		 jns	 SHORT $LN4083@MenuProc

; 10861: 						MenuToggleFlag &= JOY_CTRL_I | JOY_CTRL_M;
; 10862: 						MenuToggleFlag |= JOY_ESC;
; 10863: 						BattleResultWndFlag = FALSE;
; 10864: 						play_se(202, 320, 240);

  001a9	68 f0 00 00 00	 push	 240			; 000000f0H
  001ae	25 00 00 00 c8	 and	 eax, -939524096		; c8000000H
  001b3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  001bd	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  001c2	68 40 01 00 00	 push	 320			; 00000140H
  001c7	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag
  001cc	68 ca 00 00 00	 push	 202			; 000000caH

; 10865: 					}

  001d1	eb 4a		 jmp	 SHORT $LN5068@MenuProc
$LN506@MenuProc:

; 10844: 				MenuToggleFlag = 0;
; 10845: 				BattleResultWndFlag = FALSE;
; 10846: 				mouse.itemNo = -1;
; 10847: 				itemNo = -1;
; 10848: 				jujutuNo = -1;
; 10849: 				if (MapWmdFlagBak != TRUE) {

  001d3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?MapWmdFlagBak@@3HA, 1 ; MapWmdFlagBak
  001da	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 0 ; MenuToggleFlag
  001e4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  001ee	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  001f8	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1
  00202	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?jujutuNo@@3HA, -1
  0020c	74 17		 je	 SHORT $LN507@MenuProc
$LN4083@MenuProc:

; 10850: 					play_se(203, 320, 240);

  0020e	68 f0 00 00 00	 push	 240			; 000000f0H
  00213	68 40 01 00 00	 push	 320			; 00000140H
  00218	68 cb 00 00 00	 push	 203			; 000000cbH
$LN5068@MenuProc:

; 10866: 					else {
; 10867: 						play_se(203, 320, 240);
; 10868: 					}
; 10869: 				}
; 10870: 			}
; 10871: 			DeathMenuAction();

  0021d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00222	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN507@MenuProc:
  00225	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 10872: 			DeathMenuAction2();

  0022a	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 10873: 			saveUserSetting();

  0022f	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting
$LN503@MenuProc:

; 10874: 		}
; 10875: 	}
; 10876: 
; 10877: 
; 10878: 
; 10879: 	if (Mammoth::Get().IsOpen())

  00234	e8 00 00 00 00	 call	 ?Get@Mammoth@@SAAAV1@XZ	; Mammoth::Get
  00239	8b c8		 mov	 ecx, eax
  0023b	e8 00 00 00 00	 call	 ?IsOpen@Mammoth@@QAEHXZ	; Mammoth::IsOpen
  00240	85 c0		 test	 eax, eax
  00242	74 11		 je	 SHORT $LN511@MenuProc

; 10880: 	{
; 10881: 		Mammoth::Get().Display();

  00244	e8 00 00 00 00	 call	 ?Get@Mammoth@@SAAAV1@XZ	; Mammoth::Get
  00249	8b c8		 mov	 ecx, eax
  0024b	e8 00 00 00 00	 call	 ?Display@Mammoth@@QAEXXZ ; Mammoth::Display

; 10882: 		return;

  00250	e9 b1 10 01 00	 jmp	 $LN1966@MenuProc
$LN511@MenuProc:

; 10883: 	}
; 10884: 
; 10885: 
; 10886: 
; 10887: #ifdef __AI
; 10888: 	if (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[3] && !AI_State) {

  00255	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  0025c	0f 85 f3 00 00
	00		 jne	 $LN4730@MenuProc
  00262	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00269	0f 84 e6 00 00
	00		 je	 $LN4730@MenuProc
  0026f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00274	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?taskBarFontNo@@3PAHA+12
  0027a	0f 85 d5 00 00
	00		 jne	 $LN4730@MenuProc
  00280	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  00287	0f 85 8f 09 00
	00		 jne	 $LN569@MenuProc

; 10889: #else
; 10890: 	if (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[3]) {
; 10891: #endif
; 10892: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 10893: 		TaskBarFlag = FALSE;
; 10894: #endif
; 10895: #ifdef _BATTLESKILL
; 10896: 		extern int wonflag;
; 10897: 		if (wonflag == 1)

  0028d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?wonflag@@3HA, 1 ; wonflag
  00294	75 14		 jne	 SHORT $LN513@MenuProc

; 10898: 			play_se(220, 320, 240);

  00296	68 f0 00 00 00	 push	 240			; 000000f0H
  0029b	68 40 01 00 00	 push	 320			; 00000140H
  002a0	68 dc 00 00 00	 push	 220			; 000000dcH
  002a5	e9 a3 00 00 00	 jmp	 $LN5069@MenuProc
$LN513@MenuProc:

; 10899: 		else {
; 10900: #endif
; 10901: 			MenuToggleFlag ^= JOY_ESC;

  002aa	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  002b1	81 35 00 00 00
	00 00 00 00 80	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, -2147483648 ; MenuToggleFlag, 80000000H
  002bb	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA, xmm0

; 10902: 			for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 10903: 			systemWndNo = 0;

  002c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 0 ; systemWndNo
  002cc	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+16, xmm0
  002d3	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+32, xmm0
  002da	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+48, xmm0
  002e1	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+64, xmm0
  002e8	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+80, xmm0
  002ef	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+96, xmm0
  002f6	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+112, xmm0
  002fd	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+128, xmm0
  00304	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+144, xmm0

; 10904: 			DeathMenuAction();

  0030b	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 10905: 			saveUserSetting();

  00310	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 10906: 			if (MenuToggleFlag & JOY_ESC) {

  00315	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  0031a	68 f0 00 00 00	 push	 240			; 000000f0H
  0031f	68 40 01 00 00	 push	 320			; 00000140H
  00324	85 c0		 test	 eax, eax
  00326	79 20		 jns	 SHORT $LN515@MenuProc

; 10907: 				MenuToggleFlag &= JOY_CTRL_I | JOY_CTRL_M;

  00328	25 00 00 00 c8	 and	 eax, -939524096		; c8000000H

; 10908: 				MenuToggleFlag |= JOY_ESC;
; 10909: 				BattleResultWndFlag = FALSE;

  0032d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  00337	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  0033c	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 10910: 				play_se(202, 320, 240);

  00341	68 ca 00 00 00	 push	 202			; 000000caH

; 10911: 			}

  00346	eb 05		 jmp	 SHORT $LN5069@MenuProc
$LN515@MenuProc:

; 10912: 			else {
; 10913: 				play_se(203, 320, 240);

  00348	68 cb 00 00 00	 push	 203			; 000000cbH
$LN5069@MenuProc:

; 10914: 			}
; 10915: #ifdef _BATTLESKILL
; 10916: 		}
; 10917: #endif
; 10918: 	}
; 10919: 
; 10920: #ifdef __AI
; 10921: 	if (!AI_State && ((joy_trg[0] & JOY_CTRL_S && GetImeString() == NULL)

  0034d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00352	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4730@MenuProc:
  00355	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  0035c	0f 85 ba 08 00
	00		 jne	 $LN569@MenuProc
  00362	f7 05 00 00 00
	00 00 00 00 20	 test	 DWORD PTR ?joy_trg@@3PAKA, 536870912 ; 20000000H
  0036c	74 09		 je	 SHORT $LN519@MenuProc
  0036e	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  00373	85 c0		 test	 eax, eax
  00375	74 2b		 je	 SHORT $LN518@MenuProc
$LN519@MenuProc:
  00377	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  0037e	0f 85 ec 00 00
	00		 jne	 $LN523@MenuProc
  00384	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0038b	0f 84 df 00 00
	00		 je	 $LN523@MenuProc
  00391	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00396	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?taskBarFontNo@@3PAHA+4
  0039c	0f 85 ce 00 00
	00		 jne	 $LN523@MenuProc
$LN518@MenuProc:

; 10922: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[1]))) {
; 10923: #else
; 10924: 	if ((joy_trg[0] & JOY_CTRL_S && GetImeString() == NULL)
; 10925: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[1])) {
; 10926: #endif
; 10927: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 10928: 		TaskBarFlag = FALSE;
; 10929: #endif
; 10930: 		if (ProcNo == PROC_BATTLE) {

  003a2	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  003a9	75 14		 jne	 SHORT $LN520@MenuProc

; 10931: 			play_se(220, 320, 240);

  003ab	68 f0 00 00 00	 push	 240			; 000000f0H
  003b0	68 40 01 00 00	 push	 320			; 00000140H
  003b5	68 dc 00 00 00	 push	 220			; 000000dcH

; 10932: 		}

  003ba	e9 a9 00 00 00	 jmp	 $LN5070@MenuProc
$LN520@MenuProc:

; 10933: 		else {
; 10934: 			MenuToggleFlag ^= JOY_CTRL_S;	// CTRL + S

  003bf	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  003c6	81 35 00 00 00
	00 00 00 00 20	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  003d0	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA, xmm0

; 10935: 			for (i = 0; i < MENU_STATUS_0; i++) statusWndFontNo[i] = -2;
; 10936: 			for (i = 0; i < MENU_STATUS_0; i++) statusWndBtnFlag[i] = 0;
; 10937: 			statusWndNo = 0;

  003d7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 0
  003e1	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+16, xmm0
  003e8	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+32, xmm0
  003ef	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+48, xmm0
  003f6	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+64, xmm0
  003fd	0f 57 c0	 xorps	 xmm0, xmm0
  00400	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA, xmm0
  00407	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+16, xmm0
  0040e	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+32, xmm0
  00415	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+48, xmm0
  0041c	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+64, xmm0

; 10938: 			DeathMenuAction();

  00423	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 10939: 			saveUserSetting();

  00428	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 10940: 			if (MenuToggleFlag & JOY_CTRL_S) {

  0042d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00432	68 f0 00 00 00	 push	 240			; 000000f0H
  00437	68 40 01 00 00	 push	 320			; 00000140H
  0043c	a9 00 00 00 20	 test	 eax, 536870912		; 20000000H
  00441	74 20		 je	 SHORT $LN522@MenuProc

; 10941: 				MenuToggleFlag &= JOY_CTRL_I | JOY_CTRL_M;//å¯åéå·çé¢åå°å¾çé¢å±å­

  00443	25 00 00 00 48	 and	 eax, 1207959552		; 48000000H

; 10942: 				MenuToggleFlag |= JOY_CTRL_S;
; 10943: 				BattleResultWndFlag = FALSE;

  00448	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  00452	0d 00 00 00 20	 or	 eax, 536870912		; 20000000H
  00457	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 10944: 				play_se(202, 320, 240);

  0045c	68 ca 00 00 00	 push	 202			; 000000caH

; 10945: 			}

  00461	eb 05		 jmp	 SHORT $LN5070@MenuProc
$LN522@MenuProc:

; 10946: 			else {
; 10947: 				play_se(203, 320, 240);

  00463	68 cb 00 00 00	 push	 203			; 000000cbH
$LN5070@MenuProc:

; 10948: 			}
; 10949: 		}
; 10950: 	}
; 10951: #ifdef __AI
; 10952: 	if (!AI_State && joy_trg[0] & JOY_CTRL_T && GetImeString() == NULL) {

  00468	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0046d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN523@MenuProc:
  00470	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  00477	0f 85 9f 07 00
	00		 jne	 $LN569@MenuProc
  0047d	f7 05 00 00 00
	00 00 00 40 00	 test	 DWORD PTR ?joy_trg@@3PAKA, 4194304 ; 00400000H
  00487	0f 84 fd 00 00
	00		 je	 $LN3812@MenuProc
  0048d	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  00492	85 c0		 test	 eax, eax
  00494	0f 85 e3 00 00
	00		 jne	 $LN528@MenuProc

; 10953: #else
; 10954: 	if (joy_trg[0] & JOY_CTRL_T && GetImeString() == NULL) {
; 10955: #endif
; 10956: 		if (ProcNo == PROC_BATTLE) {

  0049a	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  004a1	75 14		 jne	 SHORT $LN525@MenuProc

; 10957: 			play_se(220, 320, 240);

  004a3	68 f0 00 00 00	 push	 240			; 000000f0H
  004a8	68 40 01 00 00	 push	 320			; 00000140H
  004ad	68 dc 00 00 00	 push	 220			; 000000dcH

; 10958: 		}

  004b2	e9 be 00 00 00	 jmp	 $LN5071@MenuProc
$LN525@MenuProc:

; 10959: 		else {
; 10960: 			MenuToggleFlag ^= JOY_CTRL_T;

  004b7	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  004be	81 35 00 00 00
	00 00 00 40 00	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H
  004c8	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA, xmm0

; 10961: 			for (i = 0; i < MENU_TRADE_0; i++) tradeWndFontNo[i] = -2;
; 10962: 			for (i = 0; i < MENU_TRADE_0; i++) tradeWndBtnFlag[i] = 0;
; 10963: 
; 10964: 			tradeWndNo = 0;

  004cf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndNo@@3IA, 0
  004d9	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+16, xmm0
  004e0	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+32, xmm0
  004e7	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+48, xmm0
  004ee	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+64, xmm0
  004f5	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?tradeWndFontNo@@3PAHA+80, xmm0
  004fd	0f 57 c0	 xorps	 xmm0, xmm0
  00500	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA, xmm0
  00507	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA+16, xmm0
  0050e	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA+32, xmm0
  00515	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA+48, xmm0
  0051c	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA+64, xmm0
  00523	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?tradeWndBtnFlag@@3PAHA+80, xmm0

; 10965: 			tradeInit();

  0052b	e8 00 00 00 00	 call	 ?tradeInit@@YAXXZ	; tradeInit

; 10966: 			DeathMenuAction();

  00530	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 10967: 			DeathMenuAction2();

  00535	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 10968: 			saveUserSetting();

  0053a	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 10969: 			if (MenuToggleFlag & JOY_CTRL_T) {

  0053f	f7 05 00 00 00
	00 00 00 40 00	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H
  00549	68 f0 00 00 00	 push	 240			; 000000f0H
  0054e	68 40 01 00 00	 push	 320			; 00000140H
  00553	74 1b		 je	 SHORT $LN527@MenuProc

; 10970: 				MenuToggleFlag &= 0;
; 10971: 				MenuToggleFlag |= JOY_CTRL_T;

  00555	c7 05 00 00 00
	00 00 00 40 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H

; 10972: 				BattleResultWndFlag = FALSE;

  0055f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag

; 10973: 				play_se(202, 320, 240);

  00569	68 ca 00 00 00	 push	 202			; 000000caH

; 10974: 			}

  0056e	eb 05		 jmp	 SHORT $LN5071@MenuProc
$LN527@MenuProc:

; 10975: 			else {
; 10976: 				play_se(203, 320, 240);

  00570	68 cb 00 00 00	 push	 203			; 000000cbH
$LN5071@MenuProc:

; 10977: 			}
; 10978: 		}
; 10979: 	}
; 10980: #ifdef __AI
; 10981: 	if (!AI_State && ((joy_trg[0] & JOY_CTRL_P && GetImeString() == NULL)

  00575	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0057a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN528@MenuProc:
  0057d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  00584	0f 85 92 06 00
	00		 jne	 $LN569@MenuProc
$LN3812@MenuProc:
  0058a	f7 05 00 00 00
	00 00 00 00 10	 test	 DWORD PTR ?joy_trg@@3PAKA, 268435456 ; 10000000H
  00594	74 09		 je	 SHORT $LN531@MenuProc
  00596	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  0059b	85 c0		 test	 eax, eax
  0059d	74 2b		 je	 SHORT $LN530@MenuProc
$LN531@MenuProc:
  0059f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  005a6	0f 85 c9 00 00
	00		 jne	 $LN535@MenuProc
  005ac	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  005b3	0f 84 bc 00 00
	00		 je	 $LN535@MenuProc
  005b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  005be	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?taskBarFontNo@@3PAHA+8
  005c4	0f 85 ab 00 00
	00		 jne	 $LN535@MenuProc
$LN530@MenuProc:

; 10982: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[2]))) {
; 10983: #else
; 10984: 	if ((joy_trg[0] & JOY_CTRL_P && GetImeString() == NULL)
; 10985: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[2])) {
; 10986: #endif
; 10987: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 10988: 		TaskBarFlag = FALSE;
; 10989: #endif
; 10990: 		if (ProcNo == PROC_BATTLE) {

  005ca	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  005d1	75 14		 jne	 SHORT $LN532@MenuProc

; 10991: 			play_se(220, 320, 240);

  005d3	68 f0 00 00 00	 push	 240			; 000000f0H
  005d8	68 40 01 00 00	 push	 320			; 00000140H
  005dd	68 dc 00 00 00	 push	 220			; 000000dcH

; 10992: 		}

  005e2	e9 86 00 00 00	 jmp	 $LN5072@MenuProc
$LN532@MenuProc:

; 10993: 		else {
; 10994: 			{
; 10995: 				MenuToggleFlag ^= JOY_CTRL_P;	// CTRL + P

  005e7	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  005ee	81 35 00 00 00
	00 00 00 00 10	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 268435456 ; MenuToggleFlag, 10000000H
  005f8	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0

; 10996: 				for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;
; 10997: 				petWndNo = 0;

  005ff	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 0
  00609	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0
  00610	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0
  00617	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  0061e	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0
  00625	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0

; 10998: 				DeathMenuAction();

  0062d	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 10999: 				//DeathMenuAction2();
; 11000: 				saveUserSetting();

  00632	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 11001: 				if (MenuToggleFlag & JOY_CTRL_P) {

  00637	f7 05 00 00 00
	00 00 00 00 10	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 268435456 ; MenuToggleFlag, 10000000H
  00641	68 f0 00 00 00	 push	 240			; 000000f0H
  00646	68 40 01 00 00	 push	 320			; 00000140H
  0064b	74 1b		 je	 SHORT $LN534@MenuProc

; 11002: 					MenuToggleFlag &= JOY_CTRL_I | JOY_CTRL_M;
; 11003: 					MenuToggleFlag |= JOY_CTRL_P;
; 11004: 					MenuToggleFlag &= ~JOY_CTRL_I;
; 11005: 					MenuToggleFlag &= ~JOY_CTRL_M;

  0064d	c7 05 00 00 00
	00 00 00 00 10	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 268435456 ; MenuToggleFlag, 10000000H

; 11006: 					BattleResultWndFlag = FALSE;

  00657	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag

; 11007: 					play_se(202, 320, 240);

  00661	68 ca 00 00 00	 push	 202			; 000000caH

; 11008: 				}

  00666	eb 05		 jmp	 SHORT $LN5072@MenuProc
$LN534@MenuProc:

; 11009: 				else {
; 11010: 					play_se(203, 320, 240);

  00668	68 cb 00 00 00	 push	 203			; 000000cbH
$LN5072@MenuProc:

; 11011: 				}
; 11012: 			}
; 11013: 		}
; 11014: 	}
; 11015: #ifdef __AI
; 11016: 	if (!AI_State && ((joy_trg[0] & JOY_CTRL_I && GetImeString() == NULL)

  0066d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00672	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN535@MenuProc:
  00675	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  0067c	0f 85 9a 05 00
	00		 jne	 $LN569@MenuProc
  00682	f7 05 00 00 00
	00 00 00 00 08	 test	 DWORD PTR ?joy_trg@@3PAKA, 134217728 ; 08000000H
  0068c	74 09		 je	 SHORT $LN538@MenuProc
  0068e	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  00693	85 c0		 test	 eax, eax
  00695	74 2b		 je	 SHORT $LN537@MenuProc
$LN538@MenuProc:
  00697	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  0069e	0f 85 bb 01 00
	00		 jne	 $LN546@MenuProc
  006a4	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  006ab	0f 84 ae 01 00
	00		 je	 $LN546@MenuProc
  006b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  006b6	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?taskBarFontNo@@3PAHA+16
  006bc	0f 85 9d 01 00
	00		 jne	 $LN546@MenuProc
$LN537@MenuProc:

; 11017: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[4]))) {
; 11018: #else
; 11019: 	if ((joy_trg[0] & JOY_CTRL_I && GetImeString() == NULL)
; 11020: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[4])) {
; 11021: #endif
; 11022: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 11023: 		TaskBarFlag = FALSE;
; 11024: #endif
; 11025: 		if (ProcNo == PROC_BATTLE) {

  006c2	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  006c9	75 19		 jne	 SHORT $LN539@MenuProc

; 11026: 			play_se(220, 320, 240);

  006cb	68 f0 00 00 00	 push	 240			; 000000f0H
  006d0	68 40 01 00 00	 push	 320			; 00000140H
  006d5	68 dc 00 00 00	 push	 220			; 000000dcH
  006da	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 11027: 		}

  006df	e9 78 01 00 00	 jmp	 $LN5073@MenuProc
$LN539@MenuProc:

; 11028: 		else {
; 11029: #ifdef _STREET_VENDOR
; 11030: 			if (pc.iOnStreetVendor == 1 || sStreetVendorBuyBtn == 2) StockChatBufferLine("ìì ì´ì©ì, ìì´íì¬ì©ìí ììì´ì!", FONT_PAL_RED);

  006e4	83 3d b8 a1 00
	00 01		 cmp	 DWORD PTR ?pc@@3UPC@@A+41400, 1
  006eb	0f 84 5d 01 00
	00		 je	 $LN543@MenuProc
  006f1	66 83 3d 00 00
	00 00 02	 cmp	 WORD PTR ?sStreetVendorBuyBtn@@3FA, 2 ; sStreetVendorBuyBtn
  006f9	0f 84 4f 01 00
	00		 je	 $LN543@MenuProc

; 11031: 			else
; 11032: #endif
; 11033: 
; 11034: 			{
; 11035: 				MenuToggleFlag ^= JOY_CTRL_I;	// CTRL + I

  006ff	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00706	81 35 00 00 00
	00 00 00 00 08	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 134217728 ; MenuToggleFlag, 08000000H

; 11036: 				for (i = 0; i < MENU_ITEM_0; i++) itemWndFontNo[i] = -2;
; 11037: 				for (i = 0; i < MENU_ITEM_0; i++) itemWndBtnFlag[i] = 0;
; 11038: 				for (i = 0; i < 3; i++) itemWndBtnBag[i] = -2;
; 11039: 				itemWndNo = 0;
; 11040: 				itemWndBagOffset = 0;
; 11041: 				mouse.itemNo = -1;
; 11042: 				itemWndDropGold = 0;
; 11043: 				if (BattleResultWndFlag >= 1) DeathMenuAction();

  00710	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?BattleResultWndFlag@@3HA, 1 ; BattleResultWndFlag
  00717	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA, xmm0
  0071e	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA, -2 ; fffffffeH
  00728	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+16, xmm0
  0072f	c7 05 04 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA+4, -2 ; fffffffeH
  00739	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+32, xmm0
  00740	c7 05 08 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA+8, -2 ; fffffffeH
  0074a	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+48, xmm0
  00751	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 0
  0075b	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+64, xmm0
  00762	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBagOffset@@3HA, 0 ; itemWndBagOffset
  0076c	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+80, xmm0
  00773	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  0077d	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+96, xmm0
  00784	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, 0
  0078e	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+112, xmm0
  00795	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+128, xmm0
  0079c	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+144, xmm0
  007a3	0f 57 c0	 xorps	 xmm0, xmm0
  007a6	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA, xmm0
  007ad	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+16, xmm0
  007b4	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+32, xmm0
  007bb	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+48, xmm0
  007c2	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+64, xmm0
  007c9	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+80, xmm0
  007d0	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+96, xmm0
  007d7	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+112, xmm0
  007de	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+128, xmm0
  007e5	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+144, xmm0
  007ec	7c 05		 jl	 SHORT $LN544@MenuProc
  007ee	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction
$LN544@MenuProc:

; 11044: 				DeathMenuAction2();

  007f3	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 11045: 				saveUserSetting();

  007f8	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 11046: 				if (MenuToggleFlag & JOY_CTRL_I) {

  007fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00802	68 f0 00 00 00	 push	 240			; 000000f0H
  00807	68 40 01 00 00	 push	 320			; 00000140H
  0080c	a9 00 00 00 08	 test	 eax, 134217728		; 08000000H
  00811	74 2f		 je	 SHORT $LN545@MenuProc

; 11047: 					MenuToggleFlag &= ~JOY_CTRL_M;
; 11048: 					MenuToggleFlag &= ~JOY_CTRL_T;
; 11049: 					MenuToggleFlag &= ~JOY_B;

  00813	25 ff fe bf bf	 and	 eax, -1077936385	; bfbffeffH

; 11050: 					MenuToggleFlag |= JOY_CTRL_I;
; 11051: 					BattleResultWndFlag = FALSE;

  00818	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  00822	0d 00 00 00 08	 or	 eax, 134217728		; 08000000H

; 11052: 					MapWmdFlagBak = FALSE;

  00827	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MapWmdFlagBak@@3HA, 0 ; MapWmdFlagBak

; 11053: 					play_se(202, 320, 240);

  00831	68 ca 00 00 00	 push	 202			; 000000caH
  00836	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag
  0083b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 11054: 				}

  00840	eb 1a		 jmp	 SHORT $LN5073@MenuProc
$LN545@MenuProc:

; 11055: 				else {
; 11056: 					play_se(203, 320, 240);

  00842	68 cb 00 00 00	 push	 203			; 000000cbH
  00847	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0084c	eb 0e		 jmp	 SHORT $LN5073@MenuProc
$LN543@MenuProc:

; 11028: 		else {
; 11029: #ifdef _STREET_VENDOR
; 11030: 			if (pc.iOnStreetVendor == 1 || sStreetVendorBuyBtn == 2) StockChatBufferLine("ìì ì´ì©ì, ìì´íì¬ì©ìí ììì´ì!", FONT_PAL_RED);

  0084e	6a 00		 push	 0
  00850	6a 06		 push	 6
  00852	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@JEKFMNHA@?$LL?s?A?$KB?$MA?L?$LP?k?$LN?C?0?5?$LO?F?$MA?L?E?$NL?$LL?g?$LP?k?$MA?$LL?G?R?$LM?v?$LO?x?$LO@
  00857	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
$LN5073@MenuProc:

; 11057: 				}
; 11058: 			}
; 11059: 		}
; 11060: 	}
; 11061: #ifdef __AI
; 11062: 	if (!AI_State && ((joy_trg[0] & JOY_CTRL_M && GetImeString() == NULL)

  0085c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN546@MenuProc:
  0085f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  00866	0f 85 b0 03 00
	00		 jne	 $LN569@MenuProc
  0086c	f7 05 00 00 00
	00 00 00 00 40	 test	 DWORD PTR ?joy_trg@@3PAKA, 1073741824 ; 40000000H
  00876	74 09		 je	 SHORT $LN549@MenuProc
  00878	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  0087d	85 c0		 test	 eax, eax
  0087f	74 1f		 je	 SHORT $LN548@MenuProc
$LN549@MenuProc:
  00881	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  00888	75 3a		 jne	 SHORT $LN550@MenuProc
  0088a	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00891	74 31		 je	 SHORT $LN550@MenuProc
  00893	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00898	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?taskBarFontNo@@3PAHA
  0089e	75 24		 jne	 SHORT $LN550@MenuProc
$LN548@MenuProc:

; 11063: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[0])
; 11064: 		|| (MapWmdFlagBak == TRUE && BattleResultWndFlag == FALSE && EncountFlag == FALSE && ProcNo == PROC_GAME && SubProcNo == 3)
; 11065: 		)) {
; 11066: #else
; 11067: 	if ((joy_trg[0] & JOY_CTRL_M && GetImeString() == NULL)
; 11068: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[0])
; 11069: 		|| (MapWmdFlagBak == TRUE && BattleResultWndFlag == FALSE && EncountFlag == FALSE && ProcNo == PROC_GAME && SubProcNo == 3)
; 11070: 		) {
; 11071: #endif
; 11072: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 11073: 		TaskBarFlag = FALSE;
; 11074: #endif
; 11075: 		if (ProcNo == PROC_BATTLE) {

  008a0	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  008a7	75 14		 jne	 SHORT $LN4731@MenuProc

; 11076: 			play_se(220, 320, 240);

  008a9	68 f0 00 00 00	 push	 240			; 000000f0H
  008ae	68 40 01 00 00	 push	 320			; 00000140H
  008b3	68 dc 00 00 00	 push	 220			; 000000dcH

; 11077: 		}

  008b8	e9 e1 00 00 00	 jmp	 $LN5074@MenuProc
$LN4731@MenuProc:

; 11063: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[0])
; 11064: 		|| (MapWmdFlagBak == TRUE && BattleResultWndFlag == FALSE && EncountFlag == FALSE && ProcNo == PROC_GAME && SubProcNo == 3)
; 11065: 		)) {
; 11066: #else
; 11067: 	if ((joy_trg[0] & JOY_CTRL_M && GetImeString() == NULL)
; 11068: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[0])
; 11069: 		|| (MapWmdFlagBak == TRUE && BattleResultWndFlag == FALSE && EncountFlag == FALSE && ProcNo == PROC_GAME && SubProcNo == 3)
; 11070: 		) {
; 11071: #endif
; 11072: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 11073: 		TaskBarFlag = FALSE;
; 11074: #endif
; 11075: 		if (ProcNo == PROC_BATTLE) {

  008bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleResultWndFlag@@3HA ; BattleResultWndFlag
  008c2	eb 40		 jmp	 SHORT $LN551@MenuProc
$LN550@MenuProc:

; 11057: 				}
; 11058: 			}
; 11059: 		}
; 11060: 	}
; 11061: #ifdef __AI
; 11062: 	if (!AI_State && ((joy_trg[0] & JOY_CTRL_M && GetImeString() == NULL)

  008c4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?MapWmdFlagBak@@3HA, 1 ; MapWmdFlagBak
  008cb	0f 85 d5 00 00
	00		 jne	 $LN555@MenuProc
  008d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleResultWndFlag@@3HA ; BattleResultWndFlag
  008d6	85 c0		 test	 eax, eax
  008d8	0f 85 c8 00 00
	00		 jne	 $LN555@MenuProc
  008de	39 05 00 00 00
	00		 cmp	 DWORD PTR ?EncountFlag@@3HA, eax ; EncountFlag
  008e4	0f 85 bc 00 00
	00		 jne	 $LN555@MenuProc
  008ea	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?ProcNo@@3IA, 9 ; ProcNo
  008f1	0f 85 af 00 00
	00		 jne	 $LN555@MenuProc
  008f7	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?SubProcNo@@3IA, 3 ; SubProcNo
  008fe	0f 85 a2 00 00
	00		 jne	 $LN555@MenuProc
$LN551@MenuProc:

; 11078: 		else {
; 11079: 
; 11080: 			MenuToggleFlag ^= JOY_CTRL_M;

  00904	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0090b	81 35 00 00 00
	00 00 00 00 40	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 1073741824 ; MenuToggleFlag, 40000000H
  00915	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0

; 11081: 			for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;
; 11082: 			mapWndNo = 0;

  0091d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapWndNo@@3IA, 0
  00927	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0
  0092e	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0
  00935	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0
  0093c	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  00943	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0

; 11083: 			if (BattleResultWndFlag >= 1) DeathMenuAction();

  0094a	83 f8 01	 cmp	 eax, 1
  0094d	7c 05		 jl	 SHORT $LN553@MenuProc
  0094f	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction
$LN553@MenuProc:

; 11084: 			DeathMenuAction2();

  00954	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 11085: 			if (MenuToggleFlag & JOY_CTRL_M) {

  00959	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  0095e	68 f0 00 00 00	 push	 240			; 000000f0H
  00963	68 40 01 00 00	 push	 320			; 00000140H
  00968	a9 00 00 00 40	 test	 eax, 1073741824		; 40000000H
  0096d	74 2a		 je	 SHORT $LN554@MenuProc

; 11086: 				MenuToggleFlag &= ~JOY_CTRL_I;
; 11087: 				MenuToggleFlag &= ~JOY_CTRL_T;
; 11088: 				MenuToggleFlag &= ~JOY_B;

  0096f	25 ff fe bf f7	 and	 eax, -138412289		; f7bffeffH

; 11089: 				MenuToggleFlag |= JOY_CTRL_M;
; 11090: 				BattleResultWndFlag = FALSE;

  00974	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  0097e	0d 00 00 00 40	 or	 eax, 1073741824		; 40000000H

; 11091: 				MapWmdFlagBak = FALSE;

  00983	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MapWmdFlagBak@@3HA, 0 ; MapWmdFlagBak
  0098d	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 11092: 				play_se(202, 320, 240);

  00992	68 ca 00 00 00	 push	 202			; 000000caH

; 11093: 			}

  00997	eb 05		 jmp	 SHORT $LN5074@MenuProc
$LN554@MenuProc:

; 11094: 			else {
; 11095: 				play_se(203, 320, 240);

  00999	68 cb 00 00 00	 push	 203			; 000000cbH
$LN5074@MenuProc:

; 11096: 			}
; 11097: 		}
; 11098: 	}
; 11099: #ifdef __AI
; 11100: 	if (!AI_State && ((joy_trg[0] & JOY_CTRL_E && GetImeString() == NULL)

  0099e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  009a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN555@MenuProc:
  009a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  009ad	0f 85 69 02 00
	00		 jne	 $LN569@MenuProc
  009b3	f7 05 00 00 00
	00 00 00 00 04	 test	 DWORD PTR ?joy_trg@@3PAKA, 67108864 ; 04000000H
  009bd	74 09		 je	 SHORT $LN558@MenuProc
  009bf	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  009c4	85 c0		 test	 eax, eax
  009c6	74 2b		 je	 SHORT $LN557@MenuProc
$LN558@MenuProc:
  009c8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  009cf	0f 85 02 01 00
	00		 jne	 $LN562@MenuProc
  009d5	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  009dc	0f 84 f5 00 00
	00		 je	 $LN562@MenuProc
  009e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  009e7	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?taskBarFontNo@@3PAHA+20
  009ed	0f 85 e4 00 00
	00		 jne	 $LN562@MenuProc
$LN557@MenuProc:

; 11101: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[5]))) {
; 11102: #else
; 11103: 	if ((joy_trg[0] & JOY_CTRL_E && GetImeString() == NULL)
; 11104: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[5])) {
; 11105: #endif
; 11106: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 11107: 		TaskBarFlag = FALSE;
; 11108: #endif
; 11109: #ifdef _BATTLESKILL
; 11110: 		extern int wonflag;
; 11111: 		if (wonflag == 1)

  009f3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?wonflag@@3HA, 1 ; wonflag
  009fa	75 14		 jne	 SHORT $LN559@MenuProc

; 11112: 			play_se(220, 320, 240);

  009fc	68 f0 00 00 00	 push	 240			; 000000f0H
  00a01	68 40 01 00 00	 push	 320			; 00000140H
  00a06	68 dc 00 00 00	 push	 220			; 000000dcH
  00a0b	e9 bf 00 00 00	 jmp	 $LN5075@MenuProc
$LN559@MenuProc:

; 11113: 		else {
; 11114: #endif
; 11115: 			MenuToggleFlag ^= JOY_CTRL_E;

  00a10	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00a17	81 35 00 00 00
	00 00 00 00 04	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 67108864 ; MenuToggleFlag, 04000000H
  00a21	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA, xmm0

; 11116: 			for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 11117: 			mailWndNo = MAIL_WND_VIEW;

  00a28	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 0
  00a32	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+16, xmm0

; 11118: 			mailViewWndPageNo = 0;

  00a39	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailViewWndPageNo@@3HA, 0
  00a43	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+32, xmm0

; 11119: 			mailItemNo = -1;

  00a4a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mailItemNo@@3HA, -1
  00a54	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+48, xmm0
  00a5b	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+64, xmm0
  00a62	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+80, xmm0
  00a69	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+96, xmm0
  00a70	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+112, xmm0
  00a77	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+128, xmm0
  00a7e	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+144, xmm0

; 11120: 			InitMailSendFlag();

  00a85	e8 00 00 00 00	 call	 ?InitMailSendFlag@@YAXXZ ; InitMailSendFlag

; 11121: 			DeathMenuAction();

  00a8a	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 11122: 			saveUserSetting();

  00a8f	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 11123: 			if (MenuToggleFlag & JOY_CTRL_E) {

  00a94	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00a99	68 f0 00 00 00	 push	 240			; 000000f0H
  00a9e	68 40 01 00 00	 push	 320			; 00000140H
  00aa3	a9 00 00 00 04	 test	 eax, 67108864		; 04000000H
  00aa8	74 20		 je	 SHORT $LN561@MenuProc

; 11124: 				MenuToggleFlag &= JOY_CTRL_I | JOY_CTRL_M;

  00aaa	25 00 00 00 48	 and	 eax, 1207959552		; 48000000H

; 11125: 				MenuToggleFlag |= JOY_CTRL_E;
; 11126: 				BattleResultWndFlag = FALSE;

  00aaf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  00ab9	0d 00 00 00 04	 or	 eax, 67108864		; 04000000H
  00abe	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 11127: 				play_se(202, 320, 240);

  00ac3	68 ca 00 00 00	 push	 202			; 000000caH

; 11128: 			}

  00ac8	eb 05		 jmp	 SHORT $LN5075@MenuProc
$LN561@MenuProc:

; 11129: 			else {
; 11130: 				play_se(203, 320, 240);

  00aca	68 cb 00 00 00	 push	 203			; 000000cbH
$LN5075@MenuProc:

; 11131: 			}
; 11132: #ifdef _BATTLESKILL
; 11133: 		}
; 11134: #endif
; 11135: 		//}
; 11136: 	}
; 11137: #ifdef __AI
; 11138: 	if (!AI_State && ((joy_trg[0] & JOY_CTRL_A && GetImeString() == NULL)

  00acf	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00ad4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN562@MenuProc:
  00ad7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?AI_State@@3HA, 0 ; AI_State
  00ade	0f 85 38 01 00
	00		 jne	 $LN569@MenuProc
  00ae4	f7 05 00 00 00
	00 00 00 00 02	 test	 DWORD PTR ?joy_trg@@3PAKA, 33554432 ; 02000000H
  00aee	74 09		 je	 SHORT $LN565@MenuProc
  00af0	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  00af5	85 c0		 test	 eax, eax
  00af7	74 2b		 je	 SHORT $LN564@MenuProc
$LN565@MenuProc:
  00af9	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  00b00	0f 85 16 01 00
	00		 jne	 $LN569@MenuProc
  00b06	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  00b0d	0f 84 09 01 00
	00		 je	 $LN569@MenuProc
  00b13	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  00b18	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?taskBarFontNo@@3PAHA+24
  00b1e	0f 85 f8 00 00
	00		 jne	 $LN569@MenuProc
$LN564@MenuProc:

; 11139: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[6]))) {
; 11140: #else
; 11141: 	if ((joy_trg[0] & JOY_CTRL_A && GetImeString() == NULL)
; 11142: 		|| (TaskBarFlag == TRUE && mouse.onceState & MOUSE_LEFT_CRICK && HitDispNo == taskBarFontNo[6])) {
; 11143: #endif
; 11144: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 11145: 		TaskBarFlag = FALSE;
; 11146: #endif
; 11147: #ifdef _BATTLESKILL
; 11148: 		extern int wonflag;
; 11149: 		if (wonflag == 1)

  00b24	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?wonflag@@3HA, 1 ; wonflag
  00b2b	75 14		 jne	 SHORT $LN566@MenuProc

; 11150: 			play_se(220, 320, 240);

  00b2d	68 f0 00 00 00	 push	 240			; 000000f0H
  00b32	68 40 01 00 00	 push	 320			; 00000140H
  00b37	68 dc 00 00 00	 push	 220			; 000000dcH
  00b3c	e9 d3 00 00 00	 jmp	 $LN5076@MenuProc
$LN566@MenuProc:

; 11151: 		else {
; 11152: #endif
; 11153: 			MenuToggleFlag ^= JOY_CTRL_A;

  00b41	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00b48	81 35 00 00 00
	00 00 00 00 02	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 33554432 ; MenuToggleFlag, 02000000H
  00b52	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA, xmm0

; 11154: 			for (i = 0; i < MENU_ALBUM_0; i++) albumWndFontNo[i] = -2;
; 11155: 			mapWndNo = 0;

  00b59	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapWndNo@@3IA, 0
  00b63	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+16, xmm0
  00b6a	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+32, xmm0
  00b71	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+48, xmm0
  00b78	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+64, xmm0

; 11156: 			DeathMenuAction();

  00b7f	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 11157: 			saveUserSetting();

  00b84	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 11158: 			if (MenuToggleFlag & JOY_CTRL_A) {

  00b89	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00b8e	a9 00 00 00 02	 test	 eax, 33554432		; 02000000H
  00b93	74 53		 je	 SHORT $LN568@MenuProc

; 11159: 				MenuToggleFlag &= JOY_CTRL_I | JOY_CTRL_M;

  00b95	25 00 00 00 48	 and	 eax, 1207959552		; 48000000H

; 11160: 				MenuToggleFlag |= JOY_CTRL_A;

  00b9a	0d 00 00 00 02	 or	 eax, 33554432		; 02000000H
  00b9f	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 11161: 				PetRanking::Instance().Init();

  00ba4	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  00ba9	8b c8		 mov	 ecx, eax
  00bab	e8 00 00 00 00	 call	 ?Init@PetRanking@@QAEXXZ ; PetRanking::Init

; 11162: 				PetRanking::Instance().SetCheck(1);

  00bb0	8d 85 c8 b9 ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00bb6	c7 85 c8 b9 ff
	ff 01 00 00 00	 mov	 DWORD PTR $T3[ebp], 1
  00bc0	50		 push	 eax
  00bc1	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  00bc6	8b c8		 mov	 ecx, eax
  00bc8	e8 00 00 00 00	 call	 ?SetCheck@PetRanking@@QAEXABH@Z ; PetRanking::SetCheck

; 11163: 				BattleResultWndFlag = FALSE;
; 11164: 				play_se(202, 320, 240);

  00bcd	68 f0 00 00 00	 push	 240			; 000000f0H
  00bd2	68 40 01 00 00	 push	 320			; 00000140H
  00bd7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  00be1	68 ca 00 00 00	 push	 202			; 000000caH

; 11165: 			}

  00be6	eb 2c		 jmp	 SHORT $LN5076@MenuProc
$LN568@MenuProc:

; 11166: 			else {
; 11167: 				PetRanking::Instance().SetCheck(0);

  00be8	8d 85 cc b9 ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00bee	c7 85 cc b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp], 0
  00bf8	50		 push	 eax
  00bf9	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  00bfe	8b c8		 mov	 ecx, eax
  00c00	e8 00 00 00 00	 call	 ?SetCheck@PetRanking@@QAEXABH@Z ; PetRanking::SetCheck

; 11168: 				play_se(203, 320, 240);

  00c05	68 f0 00 00 00	 push	 240			; 000000f0H
  00c0a	68 40 01 00 00	 push	 320			; 00000140H
  00c0f	68 cb 00 00 00	 push	 203			; 000000cbH
$LN5076@MenuProc:

; 11169: 			}
; 11170: 			//}
; 11171: #ifdef _BATTLESKILL
; 11172: 		}
; 11173: #endif
; 11174: 	}
; 11175: 
; 11176: 
; 11177: 
; 11178: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 11179: 	int ä¸ä»»å¡æ X, ä¸ä»»å¡æ Y;		//[íì¤í¸ ìë ¹ì°½Y]
; 11180: 	if (ResoMode == åè¾¨ç::mode800) {
; 11181: 		ä¸ä»»å¡æ X = 800 - 24;
; 11182: 		ä¸ä»»å¡æ Y = 600 - 48;
; 11183: 	}
; 11184: 	else if (ResoMode == åè¾¨ç::mode1024) {
; 11185: 		ä¸ä»»å¡æ X = 1024 - 18;
; 11186: 		ä¸ä»»å¡æ Y = 768 - 42;
; 11187: 	}
; 11188: 	else {
; 11189: 		ä¸ä»»å¡æ X = 640 - 18;
; 11190: 		ä¸ä»»å¡æ Y = 480 - 42;
; 11191: 	}
; 11192: 
; 11193: 	int ä¸ä»»å¡æ æé® = -1;
; 11194: 	if (ProcNo != PROC_BATTLE) {//ææç¶æä¸ä¸ç»å å·
; 11195: 		if (TaskBarFlag == TRUE) {
; 11196: 			ä¸ä»»å¡æ æé® = StockDispBuffer(ä¸ä»»å¡æ X, ä¸ä»»å¡æ Y, DISP_PRIO_MENU, IMAGE_æ¶çº³æé®å, 2);
; 11197: 		}
; 11198: 		else {
; 11199: 			ä¸ä»»å¡æ æé® = StockDispBuffer(ä¸ä»»å¡æ X, ä¸ä»»å¡æ Y, DISP_PRIO_MENU, IMAGE_æ¶çº³æé®å, 2);
; 11200: 		}
; 11201: 		if (ä¸ä»»å¡æ æé®) {
; 11202: 			if (HitDispNo == ä¸ä»»å¡æ æé®) {
; 11203: 				ShowBottomLineString(11, "ê¸°ë¥íì¤í¸ì°½ã");
; 11204: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 11205: 					TaskBarFlag = !TaskBarFlag;
; 11206: 				}
; 11207: 			}
; 11208: 		}
; 11209: 	}
; 11210: 	StockDispBuffer(512, TASK_BAR_Y, DISP_PRIO_MENU,
; 11211: 		, 1);
; 11212: #else
; 11213: 	//æä¸é¢ä¸è¡çèæ¯å¾ç
; 11214: 	/*
; 11215: 	if (ResoMode == åè¾¨ç::mode800){
; 11216: 	StockDispBuffer(TASK_BAR_X, TASK_BAR_Y, DISP_PRIO_MENU, ä»»å¡æ¡800, 1);
; 11217: 	}else if (ResoMode == åè¾¨ç::mode1024){
; 11218: 	StockDispBuffer(TASK_BAR_X + 192, TASK_BAR_Y, DISP_PRIO_MENU, ä»»å¡æ¡1024, 1);
; 11219: 	}else{
; 11220: 	StockDispBuffer(TASK_BAR_X, TASK_BAR_Y, DISP_PRIO_MENU, CG_TASK_BAR_BACK, 1);
; 11221: 	}
; 11222: 	*/
; 11223: 	StockDispBuffer(400, TASK_BAR_Y, DISP_PRIO_MENU, 66718, 1);

  00c14	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  00c19	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN569@MenuProc:
  00c1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00c21	6a 01		 push	 1
  00c23	68 9e 04 01 00	 push	 66718			; 0001049eH
  00c28	6a 68		 push	 104			; 00000068H
  00c2a	05 d4 01 00 00	 add	 eax, 468		; 000001d4H
  00c2f	50		 push	 eax
  00c30	68 90 01 00 00	 push	 400			; 00000190H
  00c35	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 11224: 	//å¤æ­æ»é¼  Yåº§æ åºç°åè½å
; 11225: 	if (mouse.nowPoint.y >= 456 + DISPLACEMENT_Y) {

  00c3a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00c40	83 c4 14	 add	 esp, 20			; 00000014H
  00c43	8d 86 c8 01 00
	00		 lea	 eax, DWORD PTR [esi+456]
  00c49	39 05 04 00 00
	00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+4, eax
  00c4f	0f 8c 45 01 00
	00		 jl	 $LN570@MenuProc

; 11226: 		//JL fix è°æ´çªå£å¤§å°å,ä»»å¡æ æ¸è¿ä¿®æ­£æ¹ä¸ºç´æ¥ä¸æ­¥å°ä½ä¿®æ­£
; 11227: 		if (taskBarY > TASK_BAR_Y) taskBarY = TASK_BAR_Y;

  00c55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?taskBarY@@3HA
  00c5a	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  00c60	3b c1		 cmp	 eax, ecx

; 11228: 		//	if( taskBarY > TASK_BAR_Y ) taskBarY--;
; 11229: 		TaskBarFlag = TRUE;

  00c62	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  00c6c	0f 4f c1	 cmovg	 eax, ecx
  00c6f	a3 00 00 00 00	 mov	 DWORD PTR ?taskBarY@@3HA, eax
$LN3813@MenuProc:

; 11245: #ifdef _NB_æ°ä¸ä»»å¡æ 
; 11246: 		taskBarFontNo[0] = StockDispBuffer(ä¸ä»»å¡æ X, ä¸ä»»å¡æ Y - 160, DISP_PRIO_IME3, IMAGE_æé®å°å¾, 2);//å°å¾
; 11247: 		taskBarFontNo[1] = StockDispBuffer(ä¸ä»»å¡æ X - 120, ä¸ä»»å¡æ Y, DISP_PRIO_IME3, IMAGE_æé®ç¶åµ, 2);//ç¶åµ
; 11248: 		taskBarFontNo[2] = StockDispBuffer(ä¸ä»»å¡æ X - 80, ä¸ä»»å¡æ Y, DISP_PRIO_IME3, IMAGE_æé®å® ç©, 2);//å® ç©
; 11249: 		taskBarFontNo[4] = StockDispBuffer(ä¸ä»»å¡æ X - 40, ä¸ä»»å¡æ Y, DISP_PRIO_IME3, IMAGE_æé®éå·, 2);//éå·
; 11250: 		taskBarFontNo[5] = StockDispBuffer(ä¸ä»»å¡æ X, ä¸ä»»å¡æ Y - 40, DISP_PRIO_IME3, IMAGE_æé®é®ä»¶, 2);//é®ä»¶
; 11251: 		taskBarFontNo[6] = StockDispBuffer(ä¸ä»»å¡æ X, ä¸ä»»å¡æ Y - 80, DISP_PRIO_IME3, IMAGE_æé®ç¸ç°¿, 2);//ç¸ç°¿
; 11252: 		taskBarFontNo[3] = StockDispBuffer(ä¸ä»»å¡æ X, ä¸ä»»å¡æ Y - 120, DISP_PRIO_IME3, IMAGE_æé®ç³»ç», 2);//ç³»ç»
; 11253: #else
; 11254: 		//JL800600 fixä»»å¡æ 
; 11255: 		x = taskBarX, y = TASK_BAR_Y; //y = taskBarY;
; 11256: 		if (ResoMode == åè¾¨ç::mode800) {

  00c74	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00c79	81 c6 d4 01 00
	00		 add	 esi, 468		; 000001d4H
  00c7f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?taskBarX@@3HA
  00c85	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  00c8b	89 b5 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], esi
  00c91	6a 02		 push	 2
  00c93	83 f8 03	 cmp	 eax, 3
  00c96	0f 85 46 01 00
	00		 jne	 $LN576@MenuProc

; 11257: 			taskBarFontNo[0] = StockDispBufferç»å¯¹ä½ç½®(112 * 0, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡MAP800 + ((MenuToggleFlag & JOY_CTRL_M) ? 1 : 0), 2);

  00c9c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00ca1	83 c6 f4	 add	 esi, -12		; fffffff4H
  00ca4	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  00ca7	83 e0 01	 and	 eax, 1
  00caa	05 9f 04 01 00	 add	 eax, 66719		; 0001049fH
  00caf	50		 push	 eax
  00cb0	6a 69		 push	 105			; 00000069H
  00cb2	56		 push	 esi
  00cb3	6a 00		 push	 0
  00cb5	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00cba	a3 00 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA, eax

; 11258: 			taskBarFontNo[1] = StockDispBufferç»å¯¹ä½ç½®(112 * 1 + 2 * 1, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡ç¶åµ800 + ((MenuToggleFlag & JOY_CTRL_S) ? 1 : 0), 2);

  00cbf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00cc4	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00cc7	6a 02		 push	 2
  00cc9	83 e0 01	 and	 eax, 1
  00ccc	05 a1 04 01 00	 add	 eax, 66721		; 000104a1H
  00cd1	50		 push	 eax
  00cd2	6a 69		 push	 105			; 00000069H
  00cd4	56		 push	 esi
  00cd5	6a 72		 push	 114			; 00000072H
  00cd7	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00cdc	a3 04 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+4, eax

; 11259: 			taskBarFontNo[2] = StockDispBufferç»å¯¹ä½ç½®(112 * 2 + 2 * 2, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡å® ç©800 + ((MenuToggleFlag & JOY_CTRL_P) ? 1 : 0), 2);

  00ce1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00ce6	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  00ce9	6a 02		 push	 2
  00ceb	83 e0 01	 and	 eax, 1
  00cee	05 a3 04 01 00	 add	 eax, 66723		; 000104a3H
  00cf3	50		 push	 eax
  00cf4	6a 69		 push	 105			; 00000069H
  00cf6	56		 push	 esi
  00cf7	68 e4 00 00 00	 push	 228			; 000000e4H
  00cfc	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00d01	a3 08 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+8, eax

; 11260: 			taskBarFontNo[4] = StockDispBufferç»å¯¹ä½ç½®(112 * 3 + 2 * 3, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡éå·800 + ((MenuToggleFlag & JOY_CTRL_I) ? 1 : 0), 2);

  00d06	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00d0b	c1 e8 1b	 shr	 eax, 27			; 0000001bH
  00d0e	6a 02		 push	 2
  00d10	83 e0 01	 and	 eax, 1
  00d13	05 a5 04 01 00	 add	 eax, 66725		; 000104a5H
  00d18	50		 push	 eax
  00d19	6a 69		 push	 105			; 00000069H
  00d1b	56		 push	 esi
  00d1c	68 56 01 00 00	 push	 342			; 00000156H
  00d21	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00d26	a3 10 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+16, eax
  00d2b	83 c4 50	 add	 esp, 80			; 00000050H

; 11261: 			taskBarFontNo[5] = StockDispBufferç»å¯¹ä½ç½®(112 * 4 + 2 * 4, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡é®ä»¶800 + ((MenuToggleFlag & JOY_CTRL_E) ? 1 : 0), 2);

  00d2e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00d33	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  00d36	83 e0 01	 and	 eax, 1
  00d39	6a 02		 push	 2
  00d3b	05 a7 04 01 00	 add	 eax, 66727		; 000104a7H
  00d40	50		 push	 eax
  00d41	6a 69		 push	 105			; 00000069H
  00d43	56		 push	 esi
  00d44	68 c8 01 00 00	 push	 456			; 000001c8H
  00d49	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00d4e	a3 14 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+20, eax

; 11262: 			taskBarFontNo[6] = StockDispBufferç»å¯¹ä½ç½®(112 * 5 + 2 * 5, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡ç¸å800 + ((MenuToggleFlag & JOY_CTRL_A) ? 1 : 0), 2);

  00d53	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00d58	c1 e8 19	 shr	 eax, 25			; 00000019H
  00d5b	6a 02		 push	 2
  00d5d	83 e0 01	 and	 eax, 1
  00d60	05 a9 04 01 00	 add	 eax, 66729		; 000104a9H
  00d65	50		 push	 eax
  00d66	6a 69		 push	 105			; 00000069H
  00d68	56		 push	 esi
  00d69	68 3a 02 00 00	 push	 570			; 0000023aH
  00d6e	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00d73	a3 18 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+24, eax

; 11263: 			taskBarFontNo[3] = StockDispBufferç»å¯¹ä½ç½®(112 * 6 + 2 * 6, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡ç³»ç»800 + ((MenuToggleFlag & JOY_ESC) ? 1 : 0), 2);

  00d78	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00d7d	6a 02		 push	 2
  00d7f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00d82	05 ab 04 01 00	 add	 eax, 66731		; 000104abH
  00d87	50		 push	 eax
  00d88	6a 69		 push	 105			; 00000069H
  00d8a	56		 push	 esi
  00d8b	68 ac 02 00 00	 push	 684			; 000002acH
  00d90	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ

; 11264: 		}

  00d95	e9 2d 02 00 00	 jmp	 $LN5077@MenuProc
$LN570@MenuProc:

; 11230: 
; 11231: 	}
; 11232: 	else {
; 11233: 		if (TaskBarFlag == TRUE) {

  00d9a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 1 ; TaskBarFlag
  00da1	0f 85 28 02 00
	00		 jne	 $LN579@MenuProc

; 11234: 			//JL fix è°æ´çªå£å¤§å°å,ä»»å¡æ æ¸è¿ä¿®æ­£æ¹ä¸ºç´æ¥ä¸æ­¥å°ä½ä¿®æ­£
; 11235: 			if (taskBarY < TASK_BAR_Y + 24) {

  00da7	8d 86 ec 01 00
	00		 lea	 eax, DWORD PTR [esi+492]
  00dad	39 05 00 00 00
	00		 cmp	 DWORD PTR ?taskBarY@@3HA, eax
  00db3	0f 8d bb fe ff
	ff		 jge	 $LN3813@MenuProc

; 11236: 				taskBarY = TASK_BAR_Y + 24;
; 11237: 				for (i = 0; i < TASK_BAR; i++) albumWndFontNo[i] = -2;

  00db9	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00dc0	a3 00 00 00 00	 mov	 DWORD PTR ?taskBarY@@3HA, eax
  00dc5	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA, xmm0

; 11238: 				TaskBarFlag = FALSE;

  00dcc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  00dd6	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+16, xmm0

; 11239: 			}
; 11240: 		}
; 11241: 	}
; 11242: #endif
; 11243: 
; 11244: 	if (TaskBarFlag == TRUE) {

  00ddd	e9 ed 01 00 00	 jmp	 $LN579@MenuProc
$LN576@MenuProc:

; 11265: 		else if (ResoMode == åè¾¨ç::mode1024) {

  00de2	83 f8 04	 cmp	 eax, 4
  00de5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00dea	0f 85 fc 00 00
	00		 jne	 $LN578@MenuProc

; 11266: 			taskBarFontNo[0] = StockDispBufferç»å¯¹ä½ç½®(144 * 0, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡MAP1024 + ((MenuToggleFlag & JOY_CTRL_M) ? 1 : 0), 2);

  00df0	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  00df3	83 c6 f4	 add	 esi, -12		; fffffff4H
  00df6	83 e0 01	 and	 eax, 1
  00df9	05 75 a4 00 00	 add	 eax, 42101		; 0000a475H
  00dfe	50		 push	 eax
  00dff	6a 69		 push	 105			; 00000069H
  00e01	56		 push	 esi
  00e02	6a 00		 push	 0
  00e04	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00e09	a3 00 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA, eax

; 11267: 			taskBarFontNo[1] = StockDispBufferç»å¯¹ä½ç½®(144 * 1 + 2 * 1, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡ç¶åµ1024 + ((MenuToggleFlag & JOY_CTRL_S) ? 1 : 0), 2);

  00e0e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00e13	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00e16	6a 02		 push	 2
  00e18	83 e0 01	 and	 eax, 1
  00e1b	05 77 a4 00 00	 add	 eax, 42103		; 0000a477H
  00e20	50		 push	 eax
  00e21	6a 69		 push	 105			; 00000069H
  00e23	56		 push	 esi
  00e24	68 92 00 00 00	 push	 146			; 00000092H
  00e29	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00e2e	a3 04 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+4, eax

; 11268: 			taskBarFontNo[2] = StockDispBufferç»å¯¹ä½ç½®(144 * 2 + 2 * 2, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡å® ç©1024 + ((MenuToggleFlag & JOY_CTRL_P) ? 1 : 0), 2);

  00e33	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00e38	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  00e3b	6a 02		 push	 2
  00e3d	83 e0 01	 and	 eax, 1
  00e40	05 79 a4 00 00	 add	 eax, 42105		; 0000a479H
  00e45	50		 push	 eax
  00e46	6a 69		 push	 105			; 00000069H
  00e48	56		 push	 esi
  00e49	68 24 01 00 00	 push	 292			; 00000124H
  00e4e	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00e53	a3 08 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+8, eax

; 11269: 			taskBarFontNo[4] = StockDispBufferç»å¯¹ä½ç½®(144 * 3 + 2 * 3, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡éå·1024 + ((MenuToggleFlag & JOY_CTRL_I) ? 1 : 0), 2);

  00e58	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00e5d	c1 e8 1b	 shr	 eax, 27			; 0000001bH
  00e60	6a 02		 push	 2
  00e62	83 e0 01	 and	 eax, 1
  00e65	05 7b a4 00 00	 add	 eax, 42107		; 0000a47bH
  00e6a	50		 push	 eax
  00e6b	6a 69		 push	 105			; 00000069H
  00e6d	56		 push	 esi
  00e6e	68 b6 01 00 00	 push	 438			; 000001b6H
  00e73	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00e78	a3 10 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+16, eax
  00e7d	83 c4 50	 add	 esp, 80			; 00000050H

; 11270: 			taskBarFontNo[5] = StockDispBufferç»å¯¹ä½ç½®(144 * 4 + 2 * 4, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡é®ä»¶1024 + ((MenuToggleFlag & JOY_CTRL_E) ? 1 : 0), 2);

  00e80	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00e85	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  00e88	83 e0 01	 and	 eax, 1
  00e8b	6a 02		 push	 2
  00e8d	05 7d a4 00 00	 add	 eax, 42109		; 0000a47dH
  00e92	50		 push	 eax
  00e93	6a 69		 push	 105			; 00000069H
  00e95	56		 push	 esi
  00e96	68 48 02 00 00	 push	 584			; 00000248H
  00e9b	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00ea0	a3 14 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+20, eax

; 11271: 			taskBarFontNo[6] = StockDispBufferç»å¯¹ä½ç½®(144 * 5 + 2 * 5, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡ç¸å1024 + ((MenuToggleFlag & JOY_CTRL_A) ? 1 : 0), 2);

  00ea5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00eaa	c1 e8 19	 shr	 eax, 25			; 00000019H
  00ead	6a 02		 push	 2
  00eaf	83 e0 01	 and	 eax, 1
  00eb2	05 7f a4 00 00	 add	 eax, 42111		; 0000a47fH
  00eb7	50		 push	 eax
  00eb8	6a 69		 push	 105			; 00000069H
  00eba	56		 push	 esi
  00ebb	68 da 02 00 00	 push	 730			; 000002daH
  00ec0	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  00ec5	a3 18 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+24, eax

; 11272: 			taskBarFontNo[3] = StockDispBufferç»å¯¹ä½ç½®(144 * 6 + 2 * 6, y - 12, DISP_PRIO_IME3, ä»»å¡æ¡ç³»ç»1024 + ((MenuToggleFlag & JOY_ESC) ? 1 : 0), 2);

  00eca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00ecf	6a 02		 push	 2
  00ed1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00ed4	05 81 a4 00 00	 add	 eax, 42113		; 0000a481H
  00ed9	50		 push	 eax
  00eda	6a 69		 push	 105			; 00000069H
  00edc	56		 push	 esi
  00edd	68 6c 03 00 00	 push	 876			; 0000036cH
  00ee2	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ

; 11273: 		}

  00ee7	e9 db 00 00 00	 jmp	 $LN5077@MenuProc
$LN578@MenuProc:

; 11274: 		else {
; 11275: 			taskBarFontNo[0] = StockDispBuffer(x, y, DISP_PRIO_IME3, CG_TASK_BAR_MAP_UP + ((MenuToggleFlag & JOY_CTRL_M) ? 1 : 0), 2);

  00eec	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  00eef	83 e0 01	 and	 eax, 1
  00ef2	05 26 66 00 00	 add	 eax, 26150		; 00006626H
  00ef7	50		 push	 eax
  00ef8	6a 69		 push	 105			; 00000069H
  00efa	56		 push	 esi
  00efb	57		 push	 edi
  00efc	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00f01	a3 00 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA, eax

; 11276: 			taskBarFontNo[1] = StockDispBuffer(x, y, DISP_PRIO_IME3, CG_TASK_BAR_STATUS_UP + ((MenuToggleFlag & JOY_CTRL_S) ? 1 : 0), 2);

  00f06	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00f0b	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00f0e	6a 02		 push	 2
  00f10	83 e0 01	 and	 eax, 1
  00f13	05 28 66 00 00	 add	 eax, 26152		; 00006628H
  00f18	50		 push	 eax
  00f19	6a 69		 push	 105			; 00000069H
  00f1b	56		 push	 esi
  00f1c	57		 push	 edi
  00f1d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00f22	a3 04 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+4, eax

; 11277: 			taskBarFontNo[2] = StockDispBuffer(x, y, DISP_PRIO_IME3, CG_TASK_BAR_PET_UP + ((MenuToggleFlag & JOY_CTRL_P) ? 1 : 0), 2);

  00f27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00f2c	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  00f2f	6a 02		 push	 2
  00f31	83 e0 01	 and	 eax, 1
  00f34	05 2a 66 00 00	 add	 eax, 26154		; 0000662aH
  00f39	50		 push	 eax
  00f3a	6a 69		 push	 105			; 00000069H
  00f3c	56		 push	 esi
  00f3d	57		 push	 edi
  00f3e	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00f43	a3 08 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+8, eax

; 11278: 			taskBarFontNo[4] = StockDispBuffer(x, y, DISP_PRIO_IME3, CG_TASK_BAR_ITEM_UP + ((MenuToggleFlag & JOY_CTRL_I) ? 1 : 0), 2);

  00f48	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00f4d	c1 e8 1b	 shr	 eax, 27			; 0000001bH
  00f50	6a 02		 push	 2
  00f52	83 e0 01	 and	 eax, 1
  00f55	05 2c 66 00 00	 add	 eax, 26156		; 0000662cH
  00f5a	50		 push	 eax
  00f5b	6a 69		 push	 105			; 00000069H
  00f5d	56		 push	 esi
  00f5e	57		 push	 edi
  00f5f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00f64	a3 10 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+16, eax
  00f69	83 c4 50	 add	 esp, 80			; 00000050H

; 11279: 			taskBarFontNo[5] = StockDispBuffer(x, y, DISP_PRIO_IME3, CG_TASK_BAR_MAIL_UP + ((MenuToggleFlag & JOY_CTRL_E) ? 1 : 0), 2);

  00f6c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00f71	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  00f74	83 e0 01	 and	 eax, 1
  00f77	6a 02		 push	 2
  00f79	05 2e 66 00 00	 add	 eax, 26158		; 0000662eH
  00f7e	50		 push	 eax
  00f7f	6a 69		 push	 105			; 00000069H
  00f81	56		 push	 esi
  00f82	57		 push	 edi
  00f83	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00f88	a3 14 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+20, eax

; 11280: 			taskBarFontNo[6] = StockDispBuffer(x, y, DISP_PRIO_IME3, CG_TASK_BAR_ALBUM_UP + ((MenuToggleFlag & JOY_CTRL_A) ? 1 : 0), 2);

  00f8d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00f92	c1 e8 19	 shr	 eax, 25			; 00000019H
  00f95	6a 02		 push	 2
  00f97	83 e0 01	 and	 eax, 1
  00f9a	05 30 66 00 00	 add	 eax, 26160		; 00006630H
  00f9f	50		 push	 eax
  00fa0	6a 69		 push	 105			; 00000069H
  00fa2	56		 push	 esi
  00fa3	57		 push	 edi
  00fa4	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00fa9	a3 18 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+24, eax

; 11281: 			taskBarFontNo[3] = StockDispBuffer(x, y, DISP_PRIO_IME3, CG_TASK_BAR_SYSTEM_UP + ((MenuToggleFlag & JOY_ESC) ? 1 : 0), 2);

  00fae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  00fb3	6a 02		 push	 2
  00fb5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00fb8	05 32 66 00 00	 add	 eax, 26162		; 00006632H
  00fbd	50		 push	 eax
  00fbe	6a 69		 push	 105			; 00000069H
  00fc0	56		 push	 esi
  00fc1	57		 push	 edi
  00fc2	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
$LN5077@MenuProc:

; 11282: 		}
; 11283: #endif
; 11284: 
; 11285: 	}
; 11286: 
; 11287: 	if (MenuToggleFlag & JOY_ESC) {

  00fc7	83 c4 3c	 add	 esp, 60			; 0000003cH
  00fca	a3 0c 00 00 00	 mov	 DWORD PTR ?taskBarFontNo@@3PAHA+12, eax
$LN579@MenuProc:
  00fcf	f7 05 00 00 00
	00 00 00 00 80	 test	 DWORD PTR ?MenuToggleFlag@@3IA, -2147483648 ; MenuToggleFlag, 80000000H
  00fd9	bf 14 00 00 00	 mov	 edi, 20			; 00000014H
  00fde	be 01 00 00 00	 mov	 esi, 1
  00fe3	89 bd dc b9 ff
	ff		 mov	 DWORD PTR tv37479[ebp], edi
  00fe9	0f 84 03 18 00
	00		 je	 $LN4736@MenuProc

; 11288: 		int w = 7;
; 11289: 		int h = 6;
; 11290: 		switch (systemWndNo) {

  00fef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?systemWndNo@@3IA ; systemWndNo
  00ff4	83 f8 07	 cmp	 eax, 7
  00ff7	0f 87 f5 17 00
	00		 ja	 $LN4736@MenuProc
  00ffd	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN4309@MenuProc[eax*4]
$LN581@MenuProc:

; 11291: 		case 0:
; 11292: 			if (pActMenuWnd == NULL) {

  01004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0100b	75 56		 jne	 SHORT $LN582@MenuProc

; 11293: 				int ä¸´æ¶å®½X, ä¸´æ¶é«Y;
; 11294: 				if (ResoMode == åè¾¨ç::mode800) {

  0100d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  01012	83 f8 03	 cmp	 eax, 3
  01015	75 18		 jne	 SHORT $LN584@MenuProc

; 11299: 					ä¸´æ¶å®½X = (1024 - w * 120) / 2;
; 11300: 					ä¸´æ¶é«Y = (768 - h * 84) / 2;
; 11301: 				}
; 11302: 				else {
; 11303: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11304: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11305: 				}
; 11306: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_SYSTEM, 1);

  01017	6a 01		 push	 1
  01019	b8 63 00 00 00	 mov	 eax, 99			; 00000063H
  0101e	68 9a 65 00 00	 push	 26010			; 0000659aH
  01023	6a 06		 push	 6
  01025	6a 07		 push	 7
  01027	8d 48 09	 lea	 ecx, DWORD PTR [eax+9]

; 11307: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11308: 				break;

  0102a	e9 66 16 00 00	 jmp	 $LN5095@MenuProc
$LN584@MenuProc:

; 11295: 					ä¸´æ¶å®½X = (800 - w * 86) / 2;
; 11296: 					ä¸´æ¶é«Y = (600 - h * 64) / 2;
; 11297: 				}
; 11298: 				else if (ResoMode == åè¾¨ç::mode1024) {

  0102f	83 f8 04	 cmp	 eax, 4
  01032	75 18		 jne	 SHORT $LN586@MenuProc

; 11299: 					ä¸´æ¶å®½X = (1024 - w * 120) / 2;
; 11300: 					ä¸´æ¶é«Y = (768 - h * 84) / 2;
; 11301: 				}
; 11302: 				else {
; 11303: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11304: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11305: 				}
; 11306: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_SYSTEM, 1);

  01034	6a 01		 push	 1
  01036	b8 5c 00 00 00	 mov	 eax, 92			; 0000005cH
  0103b	68 9a 65 00 00	 push	 26010			; 0000659aH
  01040	6a 06		 push	 6
  01042	6a 07		 push	 7
  01044	8d 48 28	 lea	 ecx, DWORD PTR [eax+40]

; 11307: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11308: 				break;

  01047	e9 49 16 00 00	 jmp	 $LN5095@MenuProc
$LN586@MenuProc:

; 11299: 					ä¸´æ¶å®½X = (1024 - w * 120) / 2;
; 11300: 					ä¸´æ¶é«Y = (768 - h * 84) / 2;
; 11301: 				}
; 11302: 				else {
; 11303: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11304: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11305: 				}
; 11306: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_SYSTEM, 1);

  0104c	6a 01		 push	 1
  0104e	68 9a 65 00 00	 push	 26010			; 0000659aH
  01053	b8 60 00 00 00	 mov	 eax, 96			; 00000060H
  01058	6a 06		 push	 6
  0105a	8b c8		 mov	 ecx, eax
  0105c	6a 07		 push	 7

; 11307: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11308: 				break;

  0105e	e9 32 16 00 00	 jmp	 $LN5095@MenuProc
$LN582@MenuProc:

; 11309: 			}
; 11310: 			else {
; 11311: 				if (pActMenuWnd->hp <= 0) break;

  01063	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01069	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  0106d	0f 8e 7f 17 00
	00		 jle	 $LN4736@MenuProc

; 11312: 			}
; 11313: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {

  01073	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0107a	0f 84 8f 06 00
	00		 je	 $LN622@MenuProc

; 11314: 				if (HitFontNo == systemWndFontNo[0]) {

  01080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01085	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA
  0108b	75 3c		 jne	 SHORT $LN590@MenuProc

; 11315: #ifdef __PHONEMESSAGE
; 11316: 					CleanSMS();
; 11317: #endif
; 11318: 					DeathAction(pActMenuWnd);

  0108d	52		 push	 edx
  0108e	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11319: 					pActMenuWnd = NULL;
; 11320: 					systemWndNo = 1;
; 11321: 					play_se(202, 320, 240);

  01093	68 f0 00 00 00	 push	 240			; 000000f0H
  01098	68 40 01 00 00	 push	 320			; 00000140H
  0109d	68 ca 00 00 00	 push	 202			; 000000caH
  010a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  010ac	89 35 00 00 00
	00		 mov	 DWORD PTR ?systemWndNo@@3IA, esi ; systemWndNo
  010b2	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  010b7	83 c4 10	 add	 esp, 16			; 00000010H

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  010ba	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  010c4	e9 29 17 00 00	 jmp	 $LN4736@MenuProc
$LN590@MenuProc:

; 11322: 					HitFontNo = -1;
; 11323: 					break;
; 11324: 				}
; 11325: 				if (HitFontNo == systemWndFontNo[1]) {

  010c9	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+4
  010cf	75 45		 jne	 SHORT $LN591@MenuProc

; 11326: 					DeathAction(pActMenuWnd);

  010d1	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  010d7	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11327: 					pActMenuWnd = NULL;
; 11328: 					systemWndNo = 2;
; 11329: 					play_se(202, 320, 240);

  010dc	68 f0 00 00 00	 push	 240			; 000000f0H
  010e1	68 40 01 00 00	 push	 320			; 00000140H
  010e6	68 ca 00 00 00	 push	 202			; 000000caH
  010eb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  010f5	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 2 ; systemWndNo
  010ff	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01104	83 c4 10	 add	 esp, 16			; 00000010H

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  01107	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  01111	e9 dc 16 00 00	 jmp	 $LN4736@MenuProc
$LN591@MenuProc:

; 11330: 					HitFontNo = -1;
; 11331: 					break;
; 11332: 				}
; 11333: 				if (HitFontNo == systemWndFontNo[4]) {

  01116	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+16
  0111c	75 45		 jne	 SHORT $LN592@MenuProc

; 11334: 					DeathAction(pActMenuWnd);

  0111e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01124	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11335: 					pActMenuWnd = NULL;
; 11336: 					systemWndNo = 4;
; 11337: 					play_se(202, 320, 240);

  01129	68 f0 00 00 00	 push	 240			; 000000f0H
  0112e	68 40 01 00 00	 push	 320			; 00000140H
  01133	68 ca 00 00 00	 push	 202			; 000000caH
  01138	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01142	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 4 ; systemWndNo
  0114c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01151	83 c4 10	 add	 esp, 16			; 00000010H

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  01154	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  0115e	e9 8f 16 00 00	 jmp	 $LN4736@MenuProc
$LN592@MenuProc:

; 11338: 					HitFontNo = -1;
; 11339: 					break;
; 11340: 				}
; 11341: 				if (HitFontNo == systemWndFontNo[3]) {

  01163	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+12
  01169	75 45		 jne	 SHORT $LN593@MenuProc

; 11342: 					DeathAction(pActMenuWnd);

  0116b	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01171	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11343: 					pActMenuWnd = NULL;
; 11344: 					systemWndNo = 3;
; 11345: 					play_se(202, 320, 240);

  01176	68 f0 00 00 00	 push	 240			; 000000f0H
  0117b	68 40 01 00 00	 push	 320			; 00000140H
  01180	68 ca 00 00 00	 push	 202			; 000000caH
  01185	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0118f	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 3 ; systemWndNo
  01199	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0119e	83 c4 10	 add	 esp, 16			; 00000010H

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  011a1	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  011ab	e9 42 16 00 00	 jmp	 $LN4736@MenuProc
$LN593@MenuProc:

; 11346: 					HitFontNo = -1;
; 11347: 					break;
; 11348: 				}
; 11349: 				if (HitFontNo == systemWndFontNo[5]) {

  011b0	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+20
  011b6	75 45		 jne	 SHORT $LN594@MenuProc

; 11350: 					DeathAction(pActMenuWnd);

  011b8	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  011be	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11351: 					pActMenuWnd = NULL;
; 11352: 					systemWndNo = 6;
; 11353: 					play_se(202, 320, 240);

  011c3	68 f0 00 00 00	 push	 240			; 000000f0H
  011c8	68 40 01 00 00	 push	 320			; 00000140H
  011cd	68 ca 00 00 00	 push	 202			; 000000caH
  011d2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  011dc	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 6 ; systemWndNo
  011e6	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  011eb	83 c4 10	 add	 esp, 16			; 00000010H

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  011ee	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  011f8	e9 f5 15 00 00	 jmp	 $LN4736@MenuProc
$LN594@MenuProc:

; 11354: 					HitFontNo = -1;
; 11355: 					break;
; 11356: 				}
; 11357: 				//åå°ç»åº
; 11358: 				if (HitFontNo == systemWndFontNo[6]) {

  011fd	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+24
  01203	75 45		 jne	 SHORT $LN595@MenuProc

; 11359: #ifdef __PHONEMESSAGE
; 11360: 					CleanSMS();
; 11361: #endif
; 11362: 					DeathAction(pActMenuWnd);

  01205	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0120b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11363: 					pActMenuWnd = NULL;
; 11364: 					systemWndNo = 7;
; 11365: 					play_se(202, 320, 240);

  01210	68 f0 00 00 00	 push	 240			; 000000f0H
  01215	68 40 01 00 00	 push	 320			; 00000140H
  0121a	68 ca 00 00 00	 push	 202			; 000000caH
  0121f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01229	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 7 ; systemWndNo
  01233	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01238	83 c4 10	 add	 esp, 16			; 00000010H

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  0123b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  01245	e9 a8 15 00 00	 jmp	 $LN4736@MenuProc
$LN595@MenuProc:

; 11366: 					HitFontNo = -1;
; 11367: 					break;
; 11368: 				}
; 11369: 				if (HitFontNo == systemWndFontNo[2]) {

  0124a	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+8
  01250	75 45		 jne	 SHORT $LN596@MenuProc

; 11370: 					DeathAction(pActMenuWnd);

  01252	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01258	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11371: 					pActMenuWnd = NULL;
; 11372: 					MenuToggleFlag ^= JOY_ESC;

  0125d	81 35 00 00 00
	00 00 00 00 80	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, -2147483648 ; MenuToggleFlag, 80000000H

; 11373: 					play_se(203, 320, 240);

  01267	68 f0 00 00 00	 push	 240			; 000000f0H
  0126c	68 40 01 00 00	 push	 320			; 00000140H
  01271	68 cb 00 00 00	 push	 203			; 000000cbH
  01276	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01280	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01285	83 c4 10	 add	 esp, 16			; 00000010H

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  01288	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  01292	e9 5b 15 00 00	 jmp	 $LN4736@MenuProc
$LN596@MenuProc:

; 11374: 					HitFontNo = -1;
; 11375: 					break;
; 11376: 				}
; 11377: #ifdef __AI
; 11378: 				//èªå¨ææè®¾å®
; 11379: 				if (HitFontNo == systemWndFontNo[7]) {

  01297	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+28
  0129d	75 51		 jne	 SHORT $LN597@MenuProc

; 11380: 					extern int AI_State;
; 11381: 					AI_State = 1;

  0129f	89 35 00 00 00
	00		 mov	 DWORD PTR ?AI_State@@3HA, esi ; AI_State

; 11382: 					extern short actBtn;
; 11383: 					actBtn = 1;

  012a5	66 89 35 00 00
	00 00		 mov	 WORD PTR ?actBtn@@3FA, si ; actBtn

; 11384: 					closeEtcSwitch();

  012ac	e8 00 00 00 00	 call	 ?closeEtcSwitch@@YAXXZ	; closeEtcSwitch

; 11385: 					closeJoinChannelWN();

  012b1	e8 00 00 00 00	 call	 ?closeJoinChannelWN@@YAXXZ ; closeJoinChannelWN

; 11386: 					MenuToggleFlag = 0;

  012b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 0 ; MenuToggleFlag

; 11387: 					DeathMenuAction2();

  012c0	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 11388: 					DeathMenuAction();

  012c5	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 11389: 					play_se(202, 320, 240);

  012ca	68 f0 00 00 00	 push	 240			; 000000f0H
  012cf	68 40 01 00 00	 push	 320			; 00000140H
  012d4	68 ca 00 00 00	 push	 202			; 000000caH
  012d9	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  012de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  012e1	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  012eb	e9 02 15 00 00	 jmp	 $LN4736@MenuProc
$LN597@MenuProc:

; 11390: 					HitFontNo = -1;
; 11391: 					break;
; 11392: 				}
; 11393: #endif
; 11394: #ifdef _NB_CANCEL_FANTI
; 11395: 				if (HitFontNo == systemWndFontNo[8]) {//ç®ç¹åæ¢

  012f0	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+32
  012f6	75 3b		 jne	 SHORT $LN598@MenuProc

; 11396: 					if (ç¹ä½å¼å³) {

  012f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Ûå???@@3HA, 0 ; Ûå???
  012ff	74 19		 je	 SHORT $LN599@MenuProc

; 11397: 						ç¹ä½å¼å³ = FALSE;
; 11398: 						StockChatBufferLine("ë¨ìíë²í¼ï¼", 20);

  01301	33 c9		 xor	 ecx, ecx
  01303	c6 85 fc b9 ff
	ff 14		 mov	 BYTE PTR $T27[ebp], 20	; 00000014H
  0130a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@MLOJNNJN@?$LE?$NM?$LM?x?H?$KN?$LJ?v?F?$LA?$KD?$KB@

; 11403: 					}
; 11404: 					play_se(202, 320, 240);

  0130f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?Ûå???@@3HA, ecx ; Ûå???

; 11405: 					HitFontNo = -1;
; 11406: 					break;

  01315	e9 b0 01 00 00	 jmp	 $LN5160@MenuProc
$LN599@MenuProc:

; 11399: 					}
; 11400: 					else {
; 11401: 						ç¹ä½å¼å³ = TRUE;
; 11402: 						StockChatBufferLine("ê¸°ì¡´ë²í¼ï¼", 10);

  0131a	8b ce		 mov	 ecx, esi
  0131c	c6 85 fc b9 ff
	ff 0a		 mov	 BYTE PTR $T27[ebp], 10	; 0000000aH
  01323	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@PCOGCFAC@?$LB?b?A?$LI?$LJ?v?F?$LA?$KD?$KB@

; 11403: 					}
; 11404: 					play_se(202, 320, 240);

  01328	89 0d 00 00 00
	00		 mov	 DWORD PTR ?Ûå???@@3HA, ecx ; Ûå???

; 11405: 					HitFontNo = -1;
; 11406: 					break;

  0132e	e9 97 01 00 00	 jmp	 $LN5160@MenuProc
$LN598@MenuProc:

; 11407: 				}
; 11408: #endif
; 11409: 				if (HitFontNo == systemWndFontNo[9]) {//æ¯ç¥¨ç­¾å

  01333	3b 05 24 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+36
  01339	75 06		 jne	 SHORT $LN601@MenuProc

; 11410: 					lssproto_SaMenu_send(sockfd, 1, 6, 0);

  0133b	6a 00		 push	 0
  0133d	6a 06		 push	 6

; 11411: 					play_se(202, 320, 240);
; 11412: 					HitFontNo = -1;
; 11413: 					break;

  0133f	eb 1a		 jmp	 SHORT $LN5159@MenuProc
$LN601@MenuProc:

; 11414: 				}
; 11415: 				if (HitFontNo == systemWndFontNo[10]) {//è´´å¿ä¼ é

  01341	3b 05 28 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+40
  01347	75 06		 jne	 SHORT $LN602@MenuProc

; 11416: 					lssproto_SaMenu_send(sockfd, 1, 8, 0);

  01349	6a 00		 push	 0
  0134b	6a 08		 push	 8

; 11417: 					play_se(202, 320, 240);
; 11418: 					DeathAction(pActMenuWnd);
; 11419: 					pActMenuWnd = NULL;
; 11420: 					MenuToggleFlag ^= JOY_ESC;
; 11421: 					HitFontNo = -1;
; 11422: 					break;

  0134d	eb 4b		 jmp	 SHORT $LN5161@MenuProc
$LN602@MenuProc:

; 11423: 				}
; 11424: 				if (HitFontNo == systemWndFontNo[11]) {//å¬å¤éªç»

  0134f	3b 05 2c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+44
  01355	75 37		 jne	 SHORT $LN603@MenuProc

; 11425: 					lssproto_SaMenu_send(sockfd, 1, 11, 0);

  01357	6a 00		 push	 0
  01359	6a 0b		 push	 11			; 0000000bH
$LN5159@MenuProc:

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  0135b	6a 01		 push	 1
  0135d	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  01363	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send
  01368	68 f0 00 00 00	 push	 240			; 000000f0H
  0136d	68 40 01 00 00	 push	 320			; 00000140H
  01372	68 ca 00 00 00	 push	 202			; 000000caH
  01377	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0137c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0137f	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  01389	e9 64 14 00 00	 jmp	 $LN4736@MenuProc
$LN603@MenuProc:

; 11426: 					play_se(202, 320, 240);
; 11427: 					HitFontNo = -1;
; 11428: 					break;
; 11429: 				}
; 11430: 				if (HitFontNo == systemWndFontNo[12]) {//ä¸ªäººä¿¡æ¯

  0138e	3b 05 30 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+48
  01394	75 56		 jne	 SHORT $LN604@MenuProc

; 11431: 					lssproto_SaMenu_send(sockfd, 1, 9, 0);

  01396	6a 00		 push	 0
  01398	6a 09		 push	 9
$LN5161@MenuProc:

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  0139a	6a 01		 push	 1
  0139c	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  013a2	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send
  013a7	68 f0 00 00 00	 push	 240			; 000000f0H
  013ac	68 40 01 00 00	 push	 320			; 00000140H
  013b1	68 ca 00 00 00	 push	 202			; 000000caH
  013b6	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  013bb	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  013c1	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  013c6	83 c4 20	 add	 esp, 32			; 00000020H
  013c9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  013d3	81 35 00 00 00
	00 00 00 00 80	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, -2147483648 ; MenuToggleFlag, 80000000H
  013dd	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  013e7	e9 06 14 00 00	 jmp	 $LN4736@MenuProc
$LN604@MenuProc:

; 11432: 					play_se(202, 320, 240);
; 11433: 					DeathAction(pActMenuWnd);
; 11434: 					pActMenuWnd = NULL;
; 11435: 					MenuToggleFlag ^= JOY_ESC;
; 11436: 					HitFontNo = -1;
; 11437: 					break;
; 11438: 				}
; 11439: #ifdef _NB_CANCEL_BGM
; 11440: 				static BOOL stopBGMClicked = FALSE;
; 11441: 				if (HitFontNo == systemWndFontNo[13]) {

  013ec	3b 05 34 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+52
  013f2	0f 85 97 00 00
	00		 jne	 $LN605@MenuProc

; 11442: 					if (å£°é³å¼å³) {

  013f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ??ëå??@@3HA, 0 ; ?ëå??
  013ff	6a 00		 push	 0
  01401	74 44		 je	 SHORT $LN606@MenuProc

; 11443: 						StockChatBufferLine("BGMì´ ì¼ì¡ì´ìï¼", 20);

  01403	6a 14		 push	 20			; 00000014H
  01405	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KKHECGNN@BGM?$MA?L?5?D?Q?A?$LD?$LO?n?$LP?d?$KD?$KB@
  0140a	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  0140f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11444: 						å£°é³å¼å³ = FALSE;

  01412	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ??ëå??@@3HA, 0 ; ?ëå??

; 11445: 						if (stopBGMClicked) {

  0141c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stopBGMClicked@?NJ@??MenuProc@@YAXXZ@4HA, 0
  01423	74 56		 je	 SHORT $LN607@MenuProc

; 11446: 							play_bgm(map_bgm_no);

  01425	ff 35 00 00 00
	00		 push	 DWORD PTR ?map_bgm_no@@3HA ; map_bgm_no
  0142b	e8 00 00 00 00	 call	 ?play_bgm@@YAHH@Z	; play_bgm
  01430	83 c4 04	 add	 esp, 4

; 11455: 					}
; 11456: 					HitFontNo = -1;

  01433	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  0143d	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting
  01442	e9 ab 13 00 00	 jmp	 $LN4736@MenuProc
$LN606@MenuProc:

; 11447: 						}
; 11448: 					}
; 11449: 					else {
; 11450: 						stopBGMClicked = TRUE;
; 11451: 						StockChatBufferLine("BGMì´ êº¼ì¡ì´ìï¼", 10);

  01447	6a 0a		 push	 10			; 0000000aH
  01449	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LGLPBADP@BGM?$MA?L?5?$LC?$KI?A?$LD?$LO?n?$LP?d?$KD?$KB@
  0144e	89 35 00 00 00
	00		 mov	 DWORD PTR ?stopBGMClicked@?NJ@??MenuProc@@YAXXZ@4HA, esi
  01454	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine

; 11452: 						play_se(202, 320, 240);

  01459	68 f0 00 00 00	 push	 240			; 000000f0H
  0145e	68 40 01 00 00	 push	 320			; 00000140H
  01463	68 ca 00 00 00	 push	 202			; 000000caH
  01468	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0146d	83 c4 18	 add	 esp, 24			; 00000018H

; 11453: 						stop_bgm();

  01470	e8 00 00 00 00	 call	 ?stop_bgm@@YAXXZ	; stop_bgm

; 11454: 						å£°é³å¼å³ = TRUE;

  01475	89 35 00 00 00
	00		 mov	 DWORD PTR ??ëå??@@3HA, esi ; ?ëå??
$LN607@MenuProc:

; 11455: 					}
; 11456: 					HitFontNo = -1;

  0147b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  01485	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting
  0148a	e9 63 13 00 00	 jmp	 $LN4736@MenuProc
$LN605@MenuProc:

; 11457: 					saveUserSetting();
; 11458: 					break;
; 11459: 				}
; 11460: #endif
; 11461: 
; 11462: #ifdef _NB_SupetWalk
; 11463: 				if (HitFontNo == systemWndFontNo[14]) {

  0148f	3b 05 38 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+56
  01495	75 67		 jne	 SHORT $LN609@MenuProc

; 11464: 					extern int fastWalkFlag;
; 11465: 					if (fastWalkFlag == 0x75) {

  01497	83 3d 00 00 00
	00 75		 cmp	 DWORD PTR ?fastWalkFlag@@3HA, 117 ; fastWalkFlag, 00000075H
  0149e	75 13		 jne	 SHORT $LN610@MenuProc

; 11466: 						fastWalkFlag = 0x74;
; 11467: 						StockChatBufferLine("ë¹ ë¥¸ê±·ê¸°ì¼ê¸°ï¼", 20);

  014a0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@OFGFLBDD@?$LK?$PM?$LI?$KF?$LA?H?$LB?b?D?Q?$LB?b?$KD?$KB@
  014a5	c6 85 fc b9 ff
	ff 14		 mov	 BYTE PTR $T26[ebp], 20	; 00000014H
  014ac	b9 74 00 00 00	 mov	 ecx, 116		; 00000074H

; 11468: 					}

  014b1	eb 11		 jmp	 SHORT $LN611@MenuProc
$LN610@MenuProc:

; 11469: 					else {
; 11470: 						fastWalkFlag = 0x75;
; 11471: 						StockChatBufferLine("ë¹ ë¥¸ê±·ê¸°ëê¸°ï¼", 10);

  014b3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@DNLMMAKH@?$LK?$PM?$LI?$KF?$LA?H?$LB?b?$LC?t?$LB?b?$KD?$KB@
  014b8	c6 85 fc b9 ff
	ff 0a		 mov	 BYTE PTR $T26[ebp], 10	; 0000000aH
  014bf	b9 75 00 00 00	 mov	 ecx, 117		; 00000075H
$LN611@MenuProc:

; 11472: 					}
; 11473: 					play_se(202, 320, 240);

  014c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?fastWalkFlag@@3HA, ecx ; fastWalkFlag
$LN5160@MenuProc:

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  014ca	6a 00		 push	 0
  014cc	ff b5 fc b9 ff
	ff		 push	 DWORD PTR $T26[ebp]
  014d2	50		 push	 eax
  014d3	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  014d8	68 f0 00 00 00	 push	 240			; 000000f0H
  014dd	68 40 01 00 00	 push	 320			; 00000140H
  014e2	68 ca 00 00 00	 push	 202			; 000000caH
  014e7	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  014ec	83 c4 18	 add	 esp, 24			; 00000018H
  014ef	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  014f9	e9 f4 12 00 00	 jmp	 $LN4736@MenuProc
$LN609@MenuProc:

; 11474: 					HitFontNo = -1;
; 11475: 					break;
; 11476: 				}
; 11477: #endif
; 11478: #ifdef	_NB_EXPSHOW
; 11479: 				if (HitFontNo == systemWndFontNo[15]) {

  014fe	3b 05 3c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+60
  01504	75 7b		 jne	 SHORT $LN612@MenuProc

; 11480: 					play_se(202, 320, 240);

  01506	68 f0 00 00 00	 push	 240			; 000000f0H
  0150b	68 40 01 00 00	 push	 320			; 00000140H
  01510	68 ca 00 00 00	 push	 202			; 000000caH
  01515	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 11481: 					ç¶ææ¾ç¤ºå¼å³ = !ç¶ææ¾ç¤ºå¼å³;

  0151a	33 c9		 xor	 ecx, ecx

; 11482: 					if (ç¶ææ¾ç¤ºå¼å³) {
; 11483: 						StockChatBufferLine("ìííìì´ê¸°ï¼", 20);
; 11484: 					}
; 11485: 					else {
; 11486: 						StockChatBufferLine("ìííìëê¸°ï¼", 10);
; 11487: 					}
; 11488: 					DeathAction(pActMenuWnd);

  0151c	ba 0a 00 00 00	 mov	 edx, 10			; 0000000aH
  01521	39 0d 00 00 00
	00		 cmp	 DWORD PTR ????ãÆ??@@3HA, ecx ; ???ãÆ??
  01527	8b c7		 mov	 eax, edi
  01529	6a 00		 push	 0
  0152b	0f 94 c1	 sete	 cl
  0152e	85 c9		 test	 ecx, ecx
  01530	89 0d 00 00 00
	00		 mov	 DWORD PTR ????ãÆ??@@3HA, ecx ; ???ãÆ??
  01536	0f 44 c2	 cmove	 eax, edx
  01539	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0P@BJHPFHFH@?$LL?s?E?B?G?$KF?$LN?C?$LP?$KN?$LB?b?$KD?$KB@
  0153e	0f b6 c0	 movzx	 eax, al
  01541	50		 push	 eax
  01542	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0P@FDCJGPKI@?$LL?s?E?B?G?$KF?$LN?C?$LC?t?$LB?b?$KD?$KB@
  01547	0f 45 c2	 cmovne	 eax, edx
  0154a	50		 push	 eax
  0154b	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  01550	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01556	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0155b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 11489: 					pActMenuWnd = NULL;

  0155e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 11490: 					MenuToggleFlag ^= JOY_ESC;

  01568	81 35 00 00 00
	00 00 00 00 80	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, -2147483648 ; MenuToggleFlag, 80000000H

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  01572	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  0157c	e9 71 12 00 00	 jmp	 $LN4736@MenuProc
$LN612@MenuProc:

; 11491: 					HitFontNo = -1;
; 11492: 					break;
; 11493: 				}
; 11494: #endif
; 11495: #ifdef	_NB_CALLGCGC
; 11496: 				if (HitFontNo == systemWndFontNo[16]) {

  01581	3b 05 40 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+64
  01587	75 4f		 jne	 SHORT $LN615@MenuProc

; 11497: 					play_se(202, 320, 240);

  01589	68 f0 00 00 00	 push	 240			; 000000f0H
  0158e	68 40 01 00 00	 push	 320			; 00000140H
  01593	68 ca 00 00 00	 push	 202			; 000000caH
  01598	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 11498: 					åå°éæ = !åå°éæ;

  0159d	33 c0		 xor	 eax, eax
  0159f	83 c4 0c	 add	 esp, 12			; 0000000cH
  015a2	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ê«ò¢éç?@@3HA, eax ; ê«ò¢éç?
  015a8	0f 94 c0	 sete	 al
  015ab	a3 00 00 00 00	 mov	 DWORD PTR ?ê«ò¢éç?@@3HA, eax ; ê«ò¢éç?

; 11499: 					if (åå°éæ) {

  015b0	6a 00		 push	 0
  015b2	6a 04		 push	 4
  015b4	85 c0		 test	 eax, eax
  015b6	74 10		 je	 SHORT $LN616@MenuProc

; 11500: 						StockChatBufferLine("ìëì í¬ ëª¨ëê° íì±í ëììµëë¤", 4);

  015b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LEBCBFKD@?$MA?Z?$LF?$LP?$MA?$PM?E?u?5?$LI?p?$LF?e?$LA?$KB?5?H?$LA?$LM?$LK?H?$KN?5?$LF?G?$LO?z?$LN?$MA?$LE?O@
  015bd	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine

; 11501: 						lssproto_SaMenu_send(sockfd, 1, 4, 1);

  015c2	6a 01		 push	 1

; 11506: 					}
; 11507: 					HitFontNo = -1;

  015c4	6a 04		 push	 4

; 11508: 					break;

  015c6	eb 52		 jmp	 SHORT $LN5098@MenuProc
$LN616@MenuProc:

; 11502: 					}
; 11503: 					else {
; 11504: 						StockChatBufferLine("ìëì í¬ ëª¨ëê° ì¢ë£ ëììµëë¤.", 4);

  015c8	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@HCIPIBLA@?$MA?Z?$LF?$LP?$MA?$PM?E?u?5?$LI?p?$LF?e?$LA?$KB?5?A?$LO?$LH?a?5?$LF?G?$LO?z?$LN?$MA?$LE?O?$LE?Y@
  015cd	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine

; 11505: 						lssproto_SaMenu_send(sockfd, 1, 4, 0);

  015d2	6a 00		 push	 0

; 11506: 					}
; 11507: 					HitFontNo = -1;

  015d4	6a 04		 push	 4

; 11508: 					break;

  015d6	eb 42		 jmp	 SHORT $LN5098@MenuProc
$LN615@MenuProc:

; 11509: 				}
; 11510: #endif
; 11511: #ifdef _NB_DIY_SEND
; 11512: 				if (HitFontNo == systemWndFontNo[17]) {

  015d8	3b 05 44 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+68
  015de	75 1a		 jne	 SHORT $LN618@MenuProc

; 11513: 					play_se(202, 320, 240);

  015e0	68 f0 00 00 00	 push	 240			; 000000f0H
  015e5	68 40 01 00 00	 push	 320			; 00000140H
  015ea	68 ca 00 00 00	 push	 202			; 000000caH
  015ef	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 11514: 					lssproto_SaMenu_send(sockfd, 1, 1, 0);

  015f4	6a 00		 push	 0
  015f6	6a 01		 push	 1

; 11515: 					HitFontNo = -1;
; 11516: 					break;

  015f8	eb 20		 jmp	 SHORT $LN5098@MenuProc
$LN618@MenuProc:

; 11517: 				}
; 11518: 				if (HitFontNo == systemWndFontNo[18]) {

  015fa	3b 05 48 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+72
  01600	75 37		 jne	 SHORT $LN619@MenuProc

; 11519: 					play_se(202, 320, 240);

  01602	68 f0 00 00 00	 push	 240			; 000000f0H
  01607	68 40 01 00 00	 push	 320			; 00000140H
  0160c	68 ca 00 00 00	 push	 202			; 000000caH
  01611	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 11520: 					lssproto_SaMenu_send(sockfd, 1, 2, 0);

  01616	6a 00		 push	 0
  01618	6a 02		 push	 2
$LN5098@MenuProc:

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  0161a	6a 01		 push	 1
  0161c	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  01622	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send
  01627	83 c4 1c	 add	 esp, 28			; 0000001cH
  0162a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  01634	e9 b9 11 00 00	 jmp	 $LN4736@MenuProc
$LN619@MenuProc:

; 11521: 					HitFontNo = -1;
; 11522: 					break;
; 11523: 				}
; 11524: #endif
; 11525: #ifdef _NB_æ­çº¿èªå¨éè¿
; 11526: 				if (HitFontNo == systemWndFontNo[19]) {//æçº¿éè¿

  01639	3b 05 4c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+76
  0163f	75 5c		 jne	 SHORT $LN620@MenuProc

; 11527: 					DeathAction(pActMenuWnd);

  01641	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01647	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11528: 					pActMenuWnd = NULL;
; 11529: 					play_se(202, 320, 240);

  0164c	68 f0 00 00 00	 push	 240			; 000000f0H
  01651	68 40 01 00 00	 push	 320			; 00000140H
  01656	68 ca 00 00 00	 push	 202			; 000000caH
  0165b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01665	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0166a	83 c4 10	 add	 esp, 16			; 00000010H

; 11530: 					closeEtcSwitch();

  0166d	e8 00 00 00 00	 call	 ?closeEtcSwitch@@YAXXZ	; closeEtcSwitch

; 11531: 					closeJoinChannelWN();

  01672	e8 00 00 00 00	 call	 ?closeJoinChannelWN@@YAXXZ ; closeJoinChannelWN

; 11532: 					MenuToggleFlag = 0;

  01677	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 0 ; MenuToggleFlag

; 11533: 					DeathMenuAction2();

  01681	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 11534: 					DeathMenuAction();

  01686	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 11535: 					èªå¨ç»éçªå£ = TRUE;

  0168b	89 35 00 00 00
	00		 mov	 DWORD PTR ?í»?Ôô??Ï¢@@3HA, esi ; í»?Ôô??Ï¢

; 11536: 					extern short actBtn;
; 11537: 					actBtn = 1;

  01691	66 89 35 00 00
	00 00		 mov	 WORD PTR ?actBtn@@3FA, si ; actBtn

; 11538: 					break;

  01698	e9 55 11 00 00	 jmp	 $LN4736@MenuProc
$LN620@MenuProc:

; 11539: 				}
; 11540: #endif
; 11541: #ifdef _CHAR_INFOSTORAGE
; 11542: 				if (HitFontNo == systemWndFontNo[20]) {

  0169d	3b 05 50 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+80
  016a3	75 31		 jne	 SHORT $LN621@MenuProc

; 11543: 					play_se(202, 320, 240);

  016a5	68 f0 00 00 00	 push	 240			; 000000f0H
  016aa	68 40 01 00 00	 push	 320			; 00000140H
  016af	68 ca 00 00 00	 push	 202			; 000000caH
  016b4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 11544: 					lssproto_petshopcall_send(sockfd);

  016b9	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  016bf	e8 00 00 00 00	 call	 ?lssproto_petshopcall_send@@YAXH@Z ; lssproto_petshopcall_send
  016c4	83 c4 10	 add	 esp, 16			; 00000010H

; 11545: 					HitFontNo = -1;

  016c7	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo

; 11546: 					break;

  016d1	e9 1c 11 00 00	 jmp	 $LN4736@MenuProc
$LN621@MenuProc:

; 11547: 				}
; 11548: 				if (HitFontNo == systemWndFontNo[21]) {

  016d6	3b 05 54 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+84
  016dc	75 31		 jne	 SHORT $LN622@MenuProc

; 11549: 					play_se(202, 320, 240);

  016de	68 f0 00 00 00	 push	 240			; 000000f0H
  016e3	68 40 01 00 00	 push	 320			; 00000140H
  016e8	68 ca 00 00 00	 push	 202			; 000000caH
  016ed	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 11550: 					lssproto_poolitemcall_send(sockfd);

  016f2	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  016f8	e8 00 00 00 00	 call	 ?lssproto_poolitemcall_send@@YAXH@Z ; lssproto_poolitemcall_send
  016fd	83 c4 10	 add	 esp, 16			; 00000010H

; 11551: 					HitFontNo = -1;

  01700	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo

; 11552: 					break;

  0170a	e9 e3 10 00 00	 jmp	 $LN4736@MenuProc
$LN622@MenuProc:

; 11553: 				}
; 11554: #endif
; 11555: 			}
; 11556: 			x = pActMenuWnd->x + 28;

  0170f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 11557: 			y = pActMenuWnd->y + 54;
; 11558: 			systemWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    ë§ìê°ê¸°    ", 2);	y += 34;//y += 40;

  01715	6a 02		 push	 2
  01717	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MEGGIBAG@?5?5?5?5?$LI?$LG?$MA?$LL?$LA?$KB?$LB?b?5?5?5?5@
  0171c	6a 00		 push	 0
  0171e	8b 72 1c	 mov	 esi, DWORD PTR [edx+28]
  01721	8b 7a 18	 mov	 edi, DWORD PTR [edx+24]
  01724	83 c6 36	 add	 esi, 54			; 00000036H
  01727	6a 01		 push	 1
  01729	83 c7 1c	 add	 edi, 28			; 0000001cH
  0172c	56		 push	 esi
  0172d	57		 push	 edi
  0172e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11559: 			systemWndFontNo[6] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    ë¡ê·¸ìì    ", 2);	y += 34;//y += 40;

  01733	6a 02		 push	 2
  01735	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KCHLCCBP@?5?5?5?5?$LH?N?$LB?W?$LO?F?$LP?t?5?5?5?5@
  0173a	6a 00		 push	 0
  0173c	6a 01		 push	 1
  0173e	83 c6 22	 add	 esi, 34			; 00000022H
  01741	a3 00 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA, eax
  01746	56		 push	 esi
  01747	57		 push	 edi
  01748	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11560: 			systemWndFontNo[1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    ì±íì¤ì     ", 2);	y += 34;//y += 40;

  0174d	6a 02		 push	 2
  0174f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JJJAMCHF@?5?5?5?5?C?$KE?F?C?$LM?$LD?A?$KE?5?5?5?5@
  01754	6a 00		 push	 0
  01756	6a 01		 push	 1
  01758	83 c6 22	 add	 esi, 34			; 00000022H
  0175b	a3 18 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+24, eax
  01760	56		 push	 esi
  01761	57		 push	 edi
  01762	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01767	83 c4 48	 add	 esp, 72			; 00000048H
  0176a	a3 04 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+4, eax
  0176f	83 c6 22	 add	 esi, 34			; 00000022H

; 11561: 			systemWndFontNo[4] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    ë°°ê²½ìì    ", 2);	y += 34;//y += 40;

  01772	6a 02		 push	 2
  01774	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EOMINEH@?5?5?5?5?$LJ?h?$LA?f?$MA?$LN?$LO?G?5?5?5?5@
  01779	6a 00		 push	 0
  0177b	6a 01		 push	 1
  0177d	56		 push	 esi
  0177e	57		 push	 edi
  0177f	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11562: 			systemWndFontNo[3] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    í¨ê³¼ì¤ì     ", 2);	y += 34;//y += 40;

  01784	6a 02		 push	 2
  01786	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IBKCAFGG@?5?5?5?5?H?$LP?$LA?z?$LM?$LD?A?$KE?5?5?5?5@
  0178b	6a 00		 push	 0
  0178d	a3 10 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+16, eax
  01792	8d 46 22	 lea	 eax, DWORD PTR [esi+34]
  01795	6a 01		 push	 1
  01797	50		 push	 eax
  01798	57		 push	 edi
  01799	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11563: 																										//	systemWndFontNo[ 5 ] = StockFontBuffer( x, y, FONT_PRIO_FRONT, 0, 	"    ì»¤ìì¤ì     ", 2 );	y += 34;//y += 52;
; 11564: 
; 11565: #ifdef _NB_æ­çº¿èªå¨éè¿
; 11566: 																										//systemWndFontNo[ 19] = StockFontBuffer( x, y, FONT_PRIO_FRONT, 5, 	"    æçº¿éè¿    ", 2);
; 11567: #endif
; 11568: 																										//ç¬¬äºæå¼å§
; 11569: 			x = pActMenuWnd->x + 160;
; 11570: 			y = pActMenuWnd->y + 54;
; 11571: 			//systemWndFontNo[5] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    ì»¤ìì¤ì     ", 2);	y += 34;//y += 52;
; 11572: 			systemWndFontNo[7] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 4, "    ï¼¡ï¼©ì¤ì     ", 2);	y += 34;//y += 52;

  0179e	6a 02		 push	 2
  017a0	a3 0c 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+12, eax
  017a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  017aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BBDDKJIA@?5?5?5?5?$KD?A?$KD?I?$LM?$LD?A?$KE?5?5?5?5@
  017af	6a 04		 push	 4
  017b1	6a 01		 push	 1
  017b3	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  017b6	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  017b9	83 c6 36	 add	 esi, 54			; 00000036H
  017bc	81 c7 a0 00 00
	00		 add	 edi, 160		; 000000a0H
  017c2	56		 push	 esi
  017c3	57		 push	 edi
  017c4	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  017c9	83 c4 48	 add	 esp, 72			; 00000048H
  017cc	a3 1c 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+28, eax
  017d1	83 c6 22	 add	 esi, 34			; 00000022H

; 11573: #ifdef _NB_CANCEL_FANTI
; 11574: 			if (ç¹ä½å¼å³) {
; 11575: 				//systemWndFontNo[8 ] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 6, "    åæ¢ç®ä½    ", 2);	y += 34;//y += 40; 4
; 11576: 			}
; 11577: 			else {
; 11578: 				//systemWndFontNo[8 ] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 1, "    åæ¢ç¹ä½    ", 2);	y += 34;//y += 40; 5
; 11579: 			}
; 11580: #else
; 11581: 			//systemWndFontNo[8] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 7, "    ìì¹ì´ë    ", 0);	y += 34;//y += 40; 5
; 11582: #endif
; 11583: 																										//systemWndFontNo[9 ] = StockFontBuffer( x, y, FONT_PRIO_FRONT, 4 ,  "    ìíë°í    ", 2 );	y += 34;//y += 52;
; 11584: 			//systemWndFontNo[10] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 4, "    ìì¹ì´ë    ", 2);	y += 34;//y += 52;
; 11585: 			//systemWndFontNo[11] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    í¸ë ì´ë    ", 2);	y += 34;//y += 52;
; 11586: 			//systemWndFontNo[12] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    ê°ì¸ì ë³´    ", 2);	y += 34;//y += 52;
; 11587: 			systemWndFontNo[21] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 4, "    íì°½ê³   ", 2);	y += 34;//y += 52;

  017d4	6a 02		 push	 2
  017d6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LBIEPHK@?5?5?5?5?E?$NL?C?$KC?$LA?m?5?5@
  017db	6a 04		 push	 4
  017dd	6a 01		 push	 1
  017df	56		 push	 esi
  017e0	57		 push	 edi
  017e1	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11588: 			systemWndFontNo[20] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 4, "    í«ì°½ê³   ", 2);	y += 34;//y += 52;

  017e6	6a 02		 push	 2
  017e8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HLPCCAFM@?5?5?5?5?F?j?C?$KC?$LA?m?5?5@
  017ed	6a 04		 push	 4
  017ef	a3 54 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+84, eax
  017f4	8d 46 22	 lea	 eax, DWORD PTR [esi+34]
  017f7	6a 01		 push	 1
  017f9	50		 push	 eax
  017fa	57		 push	 edi
  017fb	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01800	a3 50 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+80, eax
  01805	83 c4 30	 add	 esp, 48			; 00000030H

; 11589: 																										//ç¬¬ä¸æå¼å§
; 11590: 			x = pActMenuWnd->x + 300;

  01808	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 11591: 			y = pActMenuWnd->y + 54;
; 11592: #ifdef _NB_CANCEL_BGM
; 11593: 			if (å£°é³å¼å³) {

  0180d	6a 02		 push	 2
  0180f	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  01812	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  01815	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  0181b	83 c0 36	 add	 eax, 54			; 00000036H
  0181e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ??ëå??@@3HA, 0 ; ?ëå??
  01825	8d 78 22	 lea	 edi, DWORD PTR [eax+34]
  01828	74 07		 je	 SHORT $LN625@MenuProc

; 11594: 				systemWndFontNo[13] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 5, "  ììì¼ê¸°  ", 2);	y += 34;//y += 40; 2

  0182a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GMIIOOOP@?5?5?$MA?$LN?$LO?G?D?Q?$LB?b?5?5@

; 11595: 			}

  0182f	eb 05		 jmp	 SHORT $LN5079@MenuProc
$LN625@MenuProc:

; 11596: 			else {
; 11597: 				systemWndFontNo[13] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 5, "  ììëê¸°  ", 2);	y += 34;//y += 40; 2

  01831	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LEFBJPHL@?5?5?$MA?$LN?$LO?G?$LC?t?$LB?b?5?5@
$LN5079@MenuProc:

; 11598: 			}
; 11599: #else
; 11600: 			systemWndFontNo[13] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 1, "    ææªå¼æ¾    ", 0);	y += 34;//y += 40; 5
; 11601: #endif
; 11602: #ifdef	_NB_SupetWalk
; 11603: 			extern int fastWalkFlag;
; 11604: 			if (fastWalkFlag == 0x74) {
; 11605: 			//	systemWndFontNo[14] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 1, "  ë¹ ë¥¸ê±·ê¸°  ", 2);	y += 34;//y += 40; 3
; 11606: 			}
; 11607: 			else {
; 11608: 		//		systemWndFontNo[14] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 1, "  ëë¦°ê±·ê¸°  ", 2);	y += 34;//y += 40; 3
; 11609: 			}
; 11610: #else
; 11611: 			systemWndFontNo[14] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 7, "    ææªå¼æ¾    ", 0);	y += 34;//y += 40; 5
; 11612: #endif
; 11613: #ifdef	_NB_EXPSHOW
; 11614: 			if (ç¶ææ¾ç¤ºå¼å³) {
; 11615: 			//	systemWndFontNo[15] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "  ìíëê¸°  ", 2);	y += 34;//y += 40;7
; 11616: 			}
; 11617: 			else {
; 11618: 			//	systemWndFontNo[15] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "  ìíì¼ê¸°  ", 2);	y += 34;//y += 40;7
; 11619: 			}
; 11620: #else
; 11621: 			systemWndFontNo[15] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 7, "    ææªå¼æ¾    ", 0);	y += 34;//y += 40; 5
; 11622: #endif
; 11623: #ifdef	_NB_CALLGCGC
; 11624: 			if (åå°éæ) {

  01836	6a 05		 push	 5
  01838	6a 01		 push	 1
  0183a	50		 push	 eax
  0183b	56		 push	 esi
  0183c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01841	83 c4 18	 add	 esp, 24			; 00000018H
  01844	a3 34 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+52, eax
  01849	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ê«ò¢éç?@@3HA, 0 ; ê«ò¢éç?
  01850	6a 02		 push	 2
  01852	74 07		 je	 SHORT $LN631@MenuProc

; 11625: 				systemWndFontNo[16] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 5, "  ìëëê¸°  ", 2); y += 34;//y += 40; 8

  01854	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HKIKJEIK@?5?5?$MA?Z?$LF?$LP?$LC?t?$LB?b?5?5@

; 11626: 			}

  01859	eb 05		 jmp	 SHORT $LN5080@MenuProc
$LN631@MenuProc:

; 11627: 			else {
; 11628: 				systemWndFontNo[16] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 5, "  ìëì¼ê¸°  ", 2); y += 34;//y += 40; 8

  0185b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KCFDOFBO@?5?5?$MA?Z?$LF?$LP?D?Q?$LB?b?5?5@
$LN5080@MenuProc:

; 11629: 			}
; 11630: #else
; 11631: 			systemWndFontNo[16] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 7, "    ææªå¼æ¾    ", 0);	y += 34;//y += 40; 5
; 11632: #endif
; 11633: #ifdef _NB_DIY_SEND
; 11634: 			//systemWndFontNo[17] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 5, "  ííì´ì§  ", 2);	y += 34;//y += 40; 5
; 11635: 			//systemWndFontNo[18] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 5, "  ëì¤ì½ë  ", 2);	y += 34;//y += 52;
; 11636: #else
; 11637: 			systemWndFontNo[17] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 7, "    ææªå¼æ¾    ", 0);	y += 34;//y += 40; 5
; 11638: 			systemWndFontNo[18] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 7, "    ææªå¼æ¾    ", 0);	y += 34;//y += 52;
; 11639: #endif
; 11640: 			
; 11641: 
; 11642: 			x = pActMenuWnd->x + 160;

  01860	6a 05		 push	 5
  01862	6a 01		 push	 1
  01864	57		 push	 edi
  01865	56		 push	 esi
  01866	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0186b	a3 40 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+64, eax
  01870	83 c4 18	 add	 esp, 24			; 00000018H
  01873	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 11643: 			y = pActMenuWnd->y + 258;
; 11644: 			systemWndFontNo[2] = StockFontBuffer(x + 10, y - 10, FONT_PRIO_FRONT, 1, "ãë«ããê¸°ã", 2);

  01878	6a 02		 push	 2
  0187a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0187d	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  01880	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  01886	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DEIGFB@?$KB?$KB?$LE?$NN?$KB?$KB?$KB?$KB?$LB?b?$KB?$KB@
  0188b	05 02 01 00 00	 add	 eax, 258		; 00000102H
  01890	89 8d 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], ecx
  01896	6a 01		 push	 1
  01898	89 85 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], eax
  0189e	83 c0 f6	 add	 eax, -10		; fffffff6H
  018a1	6a 01		 push	 1
  018a3	50		 push	 eax
  018a4	8d 41 0a	 lea	 eax, DWORD PTR [ecx+10]
  018a7	50		 push	 eax
  018a8	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  018ad	83 c4 18	 add	 esp, 24			; 00000018H
  018b0	a3 08 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+8, eax

; 11645: 			break;

  018b5	e9 38 0f 00 00	 jmp	 $LN4736@MenuProc
$LN633@MenuProc:

; 11646: 		case 1://åè®°å½ç¹
; 11647: 			if (pActMenuWnd == NULL) {

  018ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  018c1	0f 84 98 0d 00
	00		 je	 $LN5162@MenuProc

; 11648: 				int ä¸´æ¶å®½X, ä¸´æ¶é«Y;
; 11649: 				w = 3;
; 11650: 				h = 3;
; 11651: 				if (ResoMode == åè¾¨ç::mode800) {
; 11652: 					ä¸´æ¶å®½X = (800 - w * 106) / 2;
; 11653: 					ä¸´æ¶é«Y = (600 - h * 70) / 2;
; 11654: 				}
; 11655: 				else if (ResoMode == åè¾¨ç::mode1024) {
; 11656: 					ä¸´æ¶å®½X = (1024 - w * 180) / 2;
; 11657: 					ä¸´æ¶é«Y = (768 - h * 96) / 2;
; 11658: 				}
; 11659: 				else {
; 11660: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11661: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11662: 				}
; 11663: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_LOGOUT, 1);
; 11664: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11665: 				break;
; 11666: 			}
; 11667: 			else {
; 11668: 				if (pActMenuWnd->hp <= 0) break;

  018c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  018cd	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  018d1	0f 8e 1b 0f 00
	00		 jle	 $LN4736@MenuProc

; 11669: 			}
; 11670: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {

  018d7	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  018de	74 5c		 je	 SHORT $LN643@MenuProc

; 11671: 				if (HitFontNo == systemWndFontNo[0]) {

  018e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  018e5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA
  018eb	75 43		 jne	 SHORT $LN642@MenuProc

; 11672: 					DeathAction(pActMenuWnd);

  018ed	52		 push	 edx
  018ee	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11673: 					pActMenuWnd = NULL;
; 11674: #ifdef _CHAR_NEWLOGOUT
; 11675: 					systemWndNo = 0;
; 11676: 					lssproto_CharLogout_send(sockfd, 1);

  018f3	6a 01		 push	 1
  018f5	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  018fb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01905	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 0 ; systemWndNo
  0190f	e8 00 00 00 00	 call	 ?lssproto_CharLogout_send@@YAXHH@Z ; lssproto_CharLogout_send

; 11677: #else
; 11678: 					GameState = GAME_LOGIN;
; 11679: 					ChangeProc2(PROC_CHAR_LOGOUT);
; 11680: #endif
; 11681: 					play_se(206, 320, 240);

  01914	68 f0 00 00 00	 push	 240			; 000000f0H
  01919	68 40 01 00 00	 push	 320			; 00000140H
  0191e	68 ce 00 00 00	 push	 206			; 000000ceH
  01923	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01928	83 c4 18	 add	 esp, 24			; 00000018H

; 11682: 					break;

  0192b	e9 c2 0e 00 00	 jmp	 $LN4736@MenuProc
$LN642@MenuProc:

; 11683: 				}
; 11684: 				if (HitFontNo == systemWndFontNo[1]) {

  01930	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+4
  01936	0f 84 29 0e 00
	00		 je	 $LN5093@MenuProc
$LN643@MenuProc:

; 11685: 					DeathAction(pActMenuWnd);
; 11686: 					pActMenuWnd = NULL;
; 11687: 					systemWndNo = 0;
; 11688: 					play_se(203, 320, 240);
; 11689: 					break;
; 11690: 				}
; 11691: 			}
; 11692: 			x = pActMenuWnd->x + 28;

  0193c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 11693: 			y = pActMenuWnd->y + 56;
; 11694: 			systemWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "ãã í     ì¸ãã", 2);	y += 40;

  01942	6a 02		 push	 2
  01944	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KOMGLKIA@?$KB?$KB?$KB?$KB?5?H?$KO?5?5?5?5?5?$MA?N?$KB?$KB?$KB?$KB@
  01949	6a 00		 push	 0
  0194b	8b 72 1c	 mov	 esi, DWORD PTR [edx+28]
  0194e	8b 7a 18	 mov	 edi, DWORD PTR [edx+24]
  01951	83 c6 38	 add	 esi, 56			; 00000038H
  01954	6a 01		 push	 1
  01956	83 c7 1c	 add	 edi, 28			; 0000001cH
  01959	56		 push	 esi
  0195a	57		 push	 edi
  0195b	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  01961	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11695: 			systemWndFontNo[1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "ãã ì·¨     ìãã", 2);	y += 40;

  01966	6a 02		 push	 2
  01968	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BOIANLGK@?$KB?$KB?$KB?$KB?5?C?k?5?5?5?5?5?$LM?R?$KB?$KB?$KB?$KB@

; 11696: 			break;

  0196d	e9 5c 0e 00 00	 jmp	 $LN5081@MenuProc
$LN644@MenuProc:

; 11697: 		case 2://èå¤©è®¾å®
; 11698: 			if (pActMenuWnd == NULL) {

  01972	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01979	75 5d		 jne	 SHORT $LN645@MenuProc

; 11699: 				int ä¸´æ¶å®½X, ä¸´æ¶é«Y;
; 11700: 				w = 4;
; 11701: 				h = 8;
; 11702: 				if (ResoMode == åè¾¨ç::mode800) {

  0197b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  01980	83 f8 03	 cmp	 eax, 3
  01983	75 1a		 jne	 SHORT $LN647@MenuProc

; 11707: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11708: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11709: 				}
; 11710: 				else {
; 11711: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11712: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11713: 				}
; 11714: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_CHAT, 1);

  01985	6a 01		 push	 1
  01987	68 9f 65 00 00	 push	 26015			; 0000659fH
  0198c	6a 08		 push	 8
  0198e	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  01993	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  01998	6a 04		 push	 4

; 11715: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11716: 				break;

  0199a	e9 f6 0c 00 00	 jmp	 $LN5095@MenuProc
$LN647@MenuProc:

; 11703: 					ä¸´æ¶å®½X = (800 - w * 100) / 2;
; 11704: 					ä¸´æ¶é«Y = (600 - h * 60) / 2;
; 11705: 				}
; 11706: 				else if (ResoMode == åè¾¨ç::mode1024) {

  0199f	83 f8 04	 cmp	 eax, 4
  019a2	75 1a		 jne	 SHORT $LN649@MenuProc

; 11707: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11708: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11709: 				}
; 11710: 				else {
; 11711: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11712: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11713: 				}
; 11714: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_CHAT, 1);

  019a4	6a 01		 push	 1
  019a6	68 9f 65 00 00	 push	 26015			; 0000659fH
  019ab	6a 08		 push	 8
  019ad	b8 e8 00 00 00	 mov	 eax, 232		; 000000e8H
  019b2	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  019b7	6a 04		 push	 4

; 11715: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11716: 				break;

  019b9	e9 d7 0c 00 00	 jmp	 $LN5095@MenuProc
$LN649@MenuProc:

; 11707: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11708: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11709: 				}
; 11710: 				else {
; 11711: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11712: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11713: 				}
; 11714: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_CHAT, 1);

  019be	6a 01		 push	 1
  019c0	68 9f 65 00 00	 push	 26015			; 0000659fH
  019c5	6a 08		 push	 8
  019c7	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  019cc	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  019d1	6a 04		 push	 4

; 11715: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11716: 				break;

  019d3	e9 bd 0c 00 00	 jmp	 $LN5095@MenuProc
$LN645@MenuProc:

; 11717: 			}
; 11718: 			else {
; 11719: 				if (pActMenuWnd->hp <= 0) break;

  019d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  019dd	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  019e1	0f 8e 0b 0e 00
	00		 jle	 $LN4736@MenuProc

; 11720: 			}
; 11721: 			if (mouse.autoState & MOUSE_LEFT_CRICK) {

  019e7	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  019ee	0f 84 a0 01 00
	00		 je	 $LN668@MenuProc

; 11722: 				if (HitFontNo == systemWndFontNo[0]) {

  019f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  019f9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA
  019ff	75 38		 jne	 SHORT $LN655@MenuProc

; 11723: 					NowMaxChatLine++;

  01a01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?NowMaxChatLine@@3HA ; NowMaxChatLine
  01a06	40		 inc	 eax
  01a07	a3 00 00 00 00	 mov	 DWORD PTR ?NowMaxChatLine@@3HA, eax ; NowMaxChatLine

; 11724: 					if (NowMaxChatLine > MAX_CHAT_LINE) {

  01a0c	68 f0 00 00 00	 push	 240			; 000000f0H
  01a11	68 40 01 00 00	 push	 320			; 00000140H
  01a16	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  01a19	7e 11		 jle	 SHORT $LN654@MenuProc

; 11725: 						NowMaxChatLine = MAX_CHAT_LINE;

  01a1b	c7 05 00 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?NowMaxChatLine@@3HA, 30 ; NowMaxChatLine, 0000001eH

; 11726: 						play_se(220, 320, 240);

  01a25	68 dc 00 00 00	 push	 220			; 000000dcH

; 11727: 					}

  01a2a	eb 05		 jmp	 SHORT $LN5082@MenuProc
$LN654@MenuProc:

; 11728: 					else {
; 11729: 						play_se(217, 320, 240);

  01a2c	68 d9 00 00 00	 push	 217			; 000000d9H
$LN5082@MenuProc:

; 11730: 					}
; 11731: 				}
; 11732: 				if (HitFontNo == systemWndFontNo[1]) {

  01a31	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01a36	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN655@MenuProc:
  01a39	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01a3e	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+4
  01a44	75 38		 jne	 SHORT $LN658@MenuProc

; 11733: 					NowMaxChatLine--;

  01a46	a1 00 00 00 00	 mov	 eax, DWORD PTR ?NowMaxChatLine@@3HA ; NowMaxChatLine
  01a4b	48		 dec	 eax
  01a4c	a3 00 00 00 00	 mov	 DWORD PTR ?NowMaxChatLine@@3HA, eax ; NowMaxChatLine

; 11734: 					if (NowMaxChatLine <= -1) {

  01a51	68 f0 00 00 00	 push	 240			; 000000f0H
  01a56	68 40 01 00 00	 push	 320			; 00000140H
  01a5b	83 f8 ff	 cmp	 eax, -1
  01a5e	7f 11		 jg	 SHORT $LN657@MenuProc

; 11735: 						NowMaxChatLine = 0;

  01a60	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?NowMaxChatLine@@3HA, 0 ; NowMaxChatLine

; 11736: 						play_se(220, 320, 240);

  01a6a	68 dc 00 00 00	 push	 220			; 000000dcH

; 11737: 					}

  01a6f	eb 05		 jmp	 SHORT $LN5083@MenuProc
$LN657@MenuProc:

; 11738: 					else {
; 11739: 						play_se(217, 320, 240);

  01a71	68 d9 00 00 00	 push	 217			; 000000d9H
$LN5083@MenuProc:

; 11740: 					}
; 11741: 				}
; 11742: 				if (HitFontNo == systemWndFontNo[2]) {

  01a76	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01a7b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN658@MenuProc:
  01a7e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01a83	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+8
  01a89	75 2b		 jne	 SHORT $LN659@MenuProc

; 11743: 					MyChatBuffer.color++;

  01a8b	8a 0d 08 01 00
	00		 mov	 cl, BYTE PTR ?MyChatBuffer@@3USTR_BUFFER@@A+264
  01a91	fe c1		 inc	 cl
  01a93	80 f9 1a	 cmp	 cl, 26			; 0000001aH

; 11744: 					if (MyChatBuffer.color >= FONT_PAL_NUM) MyChatBuffer.color = 0;
; 11745: 					play_se(217, 320, 240);

  01a96	68 f0 00 00 00	 push	 240			; 000000f0H
  01a9b	1a c0		 sbb	 al, al
  01a9d	22 c1		 and	 al, cl
  01a9f	68 40 01 00 00	 push	 320			; 00000140H
  01aa4	68 d9 00 00 00	 push	 217			; 000000d9H
  01aa9	a2 08 01 00 00	 mov	 BYTE PTR ?MyChatBuffer@@3USTR_BUFFER@@A+264, al
  01aae	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01ab3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN659@MenuProc:

; 11746: 				}
; 11747: 				if (HitFontNo == systemWndFontNo[4]) {

  01ab6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01abb	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+16
  01ac1	75 3b		 jne	 SHORT $LN661@MenuProc

; 11748: 					DeathAction(pActMenuWnd);

  01ac3	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01ac9	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 11749: 					pActMenuWnd = NULL;
; 11750: 					systemWndNo = 5;
; 11751: 					play_se(202, 320, 240);

  01ace	68 f0 00 00 00	 push	 240			; 000000f0H
  01ad3	68 40 01 00 00	 push	 320			; 00000140H
  01ad8	68 ca 00 00 00	 push	 202			; 000000caH
  01add	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01ae7	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 5 ; systemWndNo
  01af1	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01af6	83 c4 10	 add	 esp, 16			; 00000010H

; 11752: 					break;

  01af9	e9 f4 0c 00 00	 jmp	 $LN4736@MenuProc
$LN661@MenuProc:

; 11753: 				}
; 11754: 				if (HitFontNo == systemWndFontNo[5]) {

  01afe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01b03	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+20
  01b09	75 38		 jne	 SHORT $LN664@MenuProc

; 11755: 					NowMaxVoice++;

  01b0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?NowMaxVoice@@3HA ; NowMaxVoice
  01b10	40		 inc	 eax
  01b11	a3 00 00 00 00	 mov	 DWORD PTR ?NowMaxVoice@@3HA, eax ; NowMaxVoice

; 11756: 					if (NowMaxVoice > MAX_VOICE) {

  01b16	68 f0 00 00 00	 push	 240			; 000000f0H
  01b1b	68 40 01 00 00	 push	 320			; 00000140H
  01b20	83 f8 05	 cmp	 eax, 5
  01b23	7e 11		 jle	 SHORT $LN663@MenuProc

; 11757: 						NowMaxVoice = MAX_VOICE;

  01b25	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?NowMaxVoice@@3HA, 5 ; NowMaxVoice

; 11758: 						play_se(220, 320, 240);

  01b2f	68 dc 00 00 00	 push	 220			; 000000dcH

; 11759: 					}

  01b34	eb 05		 jmp	 SHORT $LN5084@MenuProc
$LN663@MenuProc:

; 11760: 					else {
; 11761: 						play_se(217, 320, 240);

  01b36	68 d9 00 00 00	 push	 217			; 000000d9H
$LN5084@MenuProc:

; 11762: 					}
; 11763: 				}
; 11764: 				if (HitFontNo == systemWndFontNo[6]) {

  01b3b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01b40	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN664@MenuProc:
  01b43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01b48	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+24
  01b4e	75 33		 jne	 SHORT $LN667@MenuProc

; 11765: 					NowMaxVoice--;

  01b50	a1 00 00 00 00	 mov	 eax, DWORD PTR ?NowMaxVoice@@3HA ; NowMaxVoice
  01b55	48		 dec	 eax
  01b56	a3 00 00 00 00	 mov	 DWORD PTR ?NowMaxVoice@@3HA, eax ; NowMaxVoice

; 11766: 					if (NowMaxVoice <= 0) {

  01b5b	68 f0 00 00 00	 push	 240			; 000000f0H
  01b60	68 40 01 00 00	 push	 320			; 00000140H
  01b65	85 c0		 test	 eax, eax
  01b67	7f 0d		 jg	 SHORT $LN666@MenuProc

; 11767: 						NowMaxVoice = 1;

  01b69	89 35 00 00 00
	00		 mov	 DWORD PTR ?NowMaxVoice@@3HA, esi ; NowMaxVoice

; 11768: 						play_se(220, 320, 240);

  01b6f	68 dc 00 00 00	 push	 220			; 000000dcH

; 11769: 					}

  01b74	eb 05		 jmp	 SHORT $LN5085@MenuProc
$LN666@MenuProc:

; 11770: 					else {
; 11771: 						play_se(217, 320, 240);

  01b76	68 d9 00 00 00	 push	 217			; 000000d9H
$LN5085@MenuProc:

; 11772: 					}
; 11773: 				}
; 11774: #ifdef _TALK_WINDOW
; 11775: 				if (HitFontNo == systemWndFontNo[7]) {
; 11776: 					g_bTalkWindow = !g_bTalkWindow;
; 11777: 					if (!WindowMode && g_bTalkWindow) {
; 11778: 						StockChatBufferLine("ì´ê¸°ë¥ì ì ì²´íë©´ëª¨ëìì ë¶ê°ë¥í©ëë¤", FONT_PAL_RED);
; 11779: 						g_bTalkWindow = FALSE;
; 11780: 					}
; 11781: 					play_se(217, 320, 240);
; 11782: 					if (g_bTalkWindow) TalkWindow.Create();
; 11783: 					else TalkWindow.Visible(FALSE);
; 11784: 				}
; 11785: #endif
; 11786: 				if (HitFontNo == systemWndFontNo[3]) {

  01b7b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01b80	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN667@MenuProc:
  01b83	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01b88	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+12
  01b8e	0f 84 11 0a 00
	00		 je	 $LN5096@MenuProc
$LN668@MenuProc:

; 11787: 					DeathAction(pActMenuWnd);
; 11788: 					pActMenuWnd = NULL;
; 11789: 					systemWndNo = 0;
; 11790: 					play_se(203, 320, 240);
; 11791: 					saveUserSetting();
; 11792: 					break;
; 11793: 				}
; 11794: 			}
; 11795: 			x = pActMenuWnd->x + 48 - 5;

  01b94	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 11796: 			y = pActMenuWnd->y + 56;
; 11797: 			sprintf(moji, "     â ì±í íì %3d ì¤ â", NowMaxChatLine);

  01b9a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  01ba0	ff 35 00 00 00
	00		 push	 DWORD PTR ?NowMaxChatLine@@3HA ; NowMaxChatLine
  01ba6	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@ENKFHEAF@?5?5?5?5?5?$KB?$NP?5?C?$KE?F?C?5?G?$KF?$LN?C?5?$CF3d?5?A?Y?5?$KB?$NP@
  01bab	8b 72 18	 mov	 esi, DWORD PTR [edx+24]
  01bae	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  01bb1	83 c6 2b	 add	 esi, 43			; 0000002bH
  01bb4	50		 push	 eax
  01bb5	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  01bbb	83 c7 38	 add	 edi, 56			; 00000038H
  01bbe	e8 00 00 00 00	 call	 _sprintf

; 11798: 			StockFontBuffer(x - 16, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, moji, 0);				y += 32;

  01bc3	6a 00		 push	 0
  01bc5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  01bcb	83 c6 f0	 add	 esi, -16		; fffffff0H
  01bce	50		 push	 eax
  01bcf	6a 04		 push	 4
  01bd1	6a 01		 push	 1
  01bd3	57		 push	 edi
  01bd4	56		 push	 esi
  01bd5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11799: 			systemWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "        ì¦    ê°      ", 2);	y += 32;

  01bda	6a 02		 push	 2
  01bdc	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FAFBDACD@?5?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5@
  01be1	6a 00		 push	 0
  01be3	6a 01		 push	 1
  01be5	83 c7 20	 add	 edi, 32			; 00000020H
  01be8	57		 push	 edi
  01be9	ff b5 08 ba ff
	ff		 push	 DWORD PTR _x$3$[ebp]
  01bef	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11800: 			systemWndFontNo[1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "        ê°    ì      ", 2);	y += 32;

  01bf4	6a 02		 push	 2
  01bf6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LLOMOPMG@?5?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5@
  01bfb	6a 00		 push	 0
  01bfd	6a 01		 push	 1
  01bff	83 c7 20	 add	 edi, 32			; 00000020H
  01c02	a3 00 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA, eax
  01c07	57		 push	 edi
  01c08	ff b5 08 ba ff
	ff		 push	 DWORD PTR _x$3$[ebp]
  01c0e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01c13	83 c4 54	 add	 esp, 84			; 00000054H
  01c16	a3 04 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+4, eax

; 11801: 
; 11802: 			sprintf(moji, "     ìì ë³ê²½(%-2d)  ", MyChatBuffer.color);

  01c1b	0f b6 05 08 01
	00 00		 movzx	 eax, BYTE PTR ?MyChatBuffer@@3USTR_BUFFER@@A+264
  01c22	83 c7 20	 add	 edi, 32			; 00000020H
  01c25	50		 push	 eax
  01c26	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  01c2c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHEDFJKF@?5?5?5?5?5?$LL?v?$LL?s?5?$LK?$KP?$LA?f?$CI?$CF?92d?$CJ?5?5@
  01c31	50		 push	 eax
  01c32	e8 00 00 00 00	 call	 _sprintf

; 11803: 			systemWndFontNo[2] = StockFontBuffer(x, y, FONT_PRIO_FRONT, MyChatBuffer.color, moji, 2);	y += 32;

  01c37	6a 02		 push	 2
  01c39	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  01c3f	50		 push	 eax
  01c40	0f b6 05 08 01
	00 00		 movzx	 eax, BYTE PTR ?MyChatBuffer@@3USTR_BUFFER@@A+264
  01c47	50		 push	 eax
  01c48	6a 01		 push	 1
  01c4a	57		 push	 edi
  01c4b	ff b5 08 ba ff
	ff		 push	 DWORD PTR _x$3$[ebp]
  01c51	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11804: 			systemWndFontNo[4] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "        ë¬¸ì ì¤ì       ", 2);	y += 44;

  01c56	6a 02		 push	 2
  01c58	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FHOMOHBA@?5?5?5?5?5?5?5?5?$LJ?$KO?$MA?Z?5?$LM?$LD?A?$KE?5?5?5?5?5?5@
  01c5d	6a 00		 push	 0
  01c5f	6a 01		 push	 1
  01c61	83 c7 20	 add	 edi, 32			; 00000020H
  01c64	a3 08 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+8, eax
  01c69	57		 push	 edi
  01c6a	ff b5 08 ba ff
	ff		 push	 DWORD PTR _x$3$[ebp]
  01c70	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11805: 
; 11806: 			sprintf(moji, "     â ì± í ë² ì %3d â", NowMaxVoice);

  01c75	ff 35 00 00 00
	00		 push	 DWORD PTR ?NowMaxVoice@@3HA ; NowMaxVoice
  01c7b	a3 10 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+16, eax
  01c80	83 c7 2c	 add	 edi, 44			; 0000002cH
  01c83	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  01c89	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KBNPCBGD@?5?5?5?5?5?$KB?$NP?5?C?$KE?5?F?C?5?$LJ?$PM?5?$MA?$KH?5?$CF3d?5?$KB?$NP@
  01c8e	50		 push	 eax
  01c8f	e8 00 00 00 00	 call	 _sprintf
  01c94	83 c4 48	 add	 esp, 72			; 00000048H

; 11807: 			StockFontBuffer(x - 16, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, moji, 0);				y += 32;

  01c97	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  01c9d	6a 00		 push	 0
  01c9f	50		 push	 eax
  01ca0	6a 04		 push	 4
  01ca2	6a 01		 push	 1
  01ca4	57		 push	 edi
  01ca5	56		 push	 esi
  01ca6	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01cab	83 c7 20	 add	 edi, 32			; 00000020H

; 11808: 			systemWndFontNo[5] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "       ì¦    ê°       ", 2);	y += 32;

  01cae	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  01cb4	6a 02		 push	 2
  01cb6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BIAEBEPO@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@
  01cbb	6a 00		 push	 0
  01cbd	6a 01		 push	 1
  01cbf	57		 push	 edi
  01cc0	56		 push	 esi
  01cc1	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11809: 			systemWndFontNo[6] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "       ê°    ì       ", 2);	y += 44;

  01cc6	6a 02		 push	 2
  01cc8	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MIIPLPNG@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5?5@
  01ccd	6a 00		 push	 0
  01ccf	6a 01		 push	 1
  01cd1	83 c7 20	 add	 edi, 32			; 00000020H
  01cd4	a3 14 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+20, eax
  01cd9	57		 push	 edi
  01cda	56		 push	 esi
  01cdb	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01ce0	83 c4 48	 add	 esp, 72			; 00000048H
  01ce3	a3 18 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+24, eax
  01ce8	83 c7 2c	 add	 edi, 44			; 0000002cH

; 11810: 
; 11811: #ifdef _TALK_WINDOW
; 11812: 			StockFontBuffer(x - 16, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "âì±íì°½ì¤ì â", 0); y += 32;
; 11813: 			systemWndFontNo[7] = StockFontBuffer(x + 20, y, FONT_PRIO_FRONT, 0, g_bTalkWindow ? "ì±íì°½ë«ê¸°" : "ì±íì°½ì´ê¸°", 2); y += 32;
; 11814: #endif																																						
; 11815: 
; 11816: 			systemWndFontNo[3] = StockFontBuffer(x, y, FONT_PRIO_FRONT, FONT_PAL_AQUA, "      ë ì ê° ê¸°      ", 2);	y += 40;

  01ceb	6a 02		 push	 2
  01ced	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DIAFOMFL@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5@
  01cf2	6a 01		 push	 1
  01cf4	6a 01		 push	 1
  01cf6	57		 push	 edi
  01cf7	56		 push	 esi
  01cf8	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01cfd	83 c4 18	 add	 esp, 24			; 00000018H
  01d00	a3 0c 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+12, eax
  01d05	83 c7 28	 add	 edi, 40			; 00000028H
  01d08	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi

; 11817: 			break;

  01d0e	e9 df 0a 00 00	 jmp	 $LN4736@MenuProc
$LN669@MenuProc:

; 11818: 		case 3://é³æè®¾å®
; 11819: 			if (pActMenuWnd == NULL) {

  01d13	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01d1a	75 57		 jne	 SHORT $LN670@MenuProc

; 11820: 				int ä¸´æ¶å®½X, ä¸´æ¶é«Y;
; 11821: 				w = 4;
; 11822: 				h = 6;
; 11823: 				if (ResoMode == åè¾¨ç::mode800) {

  01d1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  01d21	83 f8 03	 cmp	 eax, 3
  01d24	75 18		 jne	 SHORT $LN672@MenuProc

; 11828: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11829: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11830: 				}
; 11831: 				else {
; 11832: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11833: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11834: 				}
; 11835: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_SE, 1);

  01d26	6a 01		 push	 1
  01d28	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  01d2d	68 a1 65 00 00	 push	 26017			; 000065a1H
  01d32	6a 06		 push	 6
  01d34	6a 04		 push	 4
  01d36	8d 48 b0	 lea	 ecx, DWORD PTR [eax-80]

; 11836: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11837: 				break;

  01d39	e9 57 09 00 00	 jmp	 $LN5095@MenuProc
$LN672@MenuProc:

; 11824: 					ä¸´æ¶å®½X = (800 - w * 100) / 2;
; 11825: 					ä¸´æ¶é«Y = (600 - h * 60) / 2;
; 11826: 				}
; 11827: 				else if (ResoMode == åè¾¨ç::mode1024) {

  01d3e	83 f8 04	 cmp	 eax, 4
  01d41	75 18		 jne	 SHORT $LN674@MenuProc

; 11828: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11829: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11830: 				}
; 11831: 				else {
; 11832: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11833: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11834: 				}
; 11835: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_SE, 1);

  01d43	6a 01		 push	 1
  01d45	b8 e8 00 00 00	 mov	 eax, 232		; 000000e8H
  01d4a	68 a1 65 00 00	 push	 26017			; 000065a1H
  01d4f	6a 06		 push	 6
  01d51	6a 04		 push	 4
  01d53	8d 48 b1	 lea	 ecx, DWORD PTR [eax-79]

; 11836: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11837: 				break;

  01d56	e9 3a 09 00 00	 jmp	 $LN5095@MenuProc
$LN674@MenuProc:

; 11828: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11829: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11830: 				}
; 11831: 				else {
; 11832: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11833: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11834: 				}
; 11835: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_SE, 1);

  01d5b	6a 01		 push	 1
  01d5d	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  01d62	68 a1 65 00 00	 push	 26017			; 000065a1H
  01d67	6a 06		 push	 6
  01d69	6a 04		 push	 4
  01d6b	8d 48 a0	 lea	 ecx, DWORD PTR [eax-96]

; 11836: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11837: 				break;

  01d6e	e9 22 09 00 00	 jmp	 $LN5095@MenuProc
$LN670@MenuProc:

; 11838: 			}
; 11839: 			else {
; 11840: 				if (pActMenuWnd->hp <= 0) break;

  01d73	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01d78	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  01d7c	0f 8e 70 0a 00
	00		 jle	 $LN4736@MenuProc

; 11841: 			}
; 11842: 			if (mouse.autoState & MOUSE_LEFT_CRICK) {

  01d82	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  01d89	0f 84 b6 00 00
	00		 je	 $LN4732@MenuProc

; 11843: 				if (HitFontNo == systemWndFontNo[0]) {

  01d8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01d94	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA
  01d9a	75 38		 jne	 SHORT $LN680@MenuProc

; 11844: 					t_music_se_volume++;

  01d9c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t_music_se_volume@@3HA ; t_music_se_volume
  01da1	40		 inc	 eax
  01da2	a3 00 00 00 00	 mov	 DWORD PTR ?t_music_se_volume@@3HA, eax ; t_music_se_volume

; 11845: 					if (t_music_se_volume > 15) {

  01da7	68 f0 00 00 00	 push	 240			; 000000f0H
  01dac	68 40 01 00 00	 push	 320			; 00000140H
  01db1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  01db4	7e 11		 jle	 SHORT $LN679@MenuProc

; 11846: 						t_music_se_volume = 15;

  01db6	c7 05 00 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?t_music_se_volume@@3HA, 15 ; t_music_se_volume, 0000000fH

; 11847: 						play_se(220, 320, 240);

  01dc0	68 dc 00 00 00	 push	 220			; 000000dcH

; 11848: 					}

  01dc5	eb 05		 jmp	 SHORT $LN5086@MenuProc
$LN679@MenuProc:

; 11849: 					else {
; 11850: 						play_se(217, 320, 240);

  01dc7	68 d9 00 00 00	 push	 217			; 000000d9H
$LN5086@MenuProc:

; 11851: 					}
; 11852: 				}
; 11853: 				if (HitFontNo == systemWndFontNo[1]) {

  01dcc	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01dd1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN680@MenuProc:
  01dd4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01dd9	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+4
  01ddf	75 30		 jne	 SHORT $LN683@MenuProc

; 11854: 					t_music_se_volume--;

  01de1	29 35 00 00 00
	00		 sub	 DWORD PTR ?t_music_se_volume@@3HA, esi ; t_music_se_volume

; 11855: 					if (t_music_se_volume < 0) {

  01de7	68 f0 00 00 00	 push	 240			; 000000f0H
  01dec	68 40 01 00 00	 push	 320			; 00000140H
  01df1	79 11		 jns	 SHORT $LN682@MenuProc

; 11856: 						t_music_se_volume = 0;

  01df3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?t_music_se_volume@@3HA, 0 ; t_music_se_volume

; 11857: 						play_se(220, 320, 240);

  01dfd	68 dc 00 00 00	 push	 220			; 000000dcH

; 11858: 					}

  01e02	eb 05		 jmp	 SHORT $LN5087@MenuProc
$LN682@MenuProc:

; 11859: 					else {
; 11860: 						play_se(217, 320, 240);

  01e04	68 d9 00 00 00	 push	 217			; 000000d9H
$LN5087@MenuProc:

; 11861: 					}
; 11862: 				}
; 11863: 				if (HitFontNo == systemWndFontNo[2]) {

  01e09	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01e0e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN683@MenuProc:
  01e11	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01e16	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+8
  01e1c	75 27		 jne	 SHORT $LN4732@MenuProc

; 11864: 					stereo_flg = !stereo_flg;

  01e1e	33 c0		 xor	 eax, eax
  01e20	39 05 00 00 00
	00		 cmp	 DWORD PTR ?stereo_flg@@3HA, eax ; stereo_flg

; 11865: 					play_se(217, 320, 240);

  01e26	68 f0 00 00 00	 push	 240			; 000000f0H
  01e2b	0f 94 c0	 sete	 al
  01e2e	68 40 01 00 00	 push	 320			; 00000140H
  01e33	68 d9 00 00 00	 push	 217			; 000000d9H
  01e38	a3 00 00 00 00	 mov	 DWORD PTR ?stereo_flg@@3HA, eax ; stereo_flg
  01e3d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01e42	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4732@MenuProc:

; 11866: 				}
; 11867: 			}
; 11868: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {

  01e45	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  01e4c	74 11		 je	 SHORT $LN686@MenuProc

; 11869: 				if (HitFontNo == systemWndFontNo[3]) {

  01e4e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01e53	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+12
  01e59	0f 84 46 07 00
	00		 je	 $LN5096@MenuProc
$LN686@MenuProc:

; 11870: 					DeathAction(pActMenuWnd);
; 11871: 					pActMenuWnd = NULL;
; 11872: 					systemWndNo = 0;
; 11873: 					play_se(203, 320, 240);
; 11874: 					saveUserSetting();
; 11875: 					break;
; 11876: 				}
; 11877: 			}
; 11878: 			x = pActMenuWnd->x + 48 - 5;

  01e5f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 11879: 			y = pActMenuWnd->y + 64;
; 11880: 			sprintf(moji, "  â  í ì¬ ì ë%3d  â  ", t_music_se_volume);

  01e65	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  01e6b	ff 35 00 00 00
	00		 push	 DWORD PTR ?t_music_se_volume@@3HA ; t_music_se_volume
  01e71	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OHLFALHA@?5?5?$KB?$NP?5?5?G?v?5?$MA?g?5?$MA?$LN?5?$LH?$KO?$CF3d?5?5?$KB?$NP?5?5@
  01e76	8b 7a 18	 mov	 edi, DWORD PTR [edx+24]
  01e79	8b 72 1c	 mov	 esi, DWORD PTR [edx+28]
  01e7c	83 c7 2b	 add	 edi, 43			; 0000002bH
  01e7f	50		 push	 eax
  01e80	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  01e86	83 c6 40	 add	 esi, 64			; 00000040H
  01e89	e8 00 00 00 00	 call	 _sprintf

; 11881: 			StockFontBuffer(x - 8, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, moji, 0);				y += 40;

  01e8e	6a 00		 push	 0
  01e90	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  01e96	50		 push	 eax
  01e97	6a 04		 push	 4
  01e99	6a 01		 push	 1
  01e9b	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  01e9e	56		 push	 esi
  01e9f	50		 push	 eax
  01ea0	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11882: 			systemWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "       ì¦     ê°       ", 2);	y += 40;

  01ea5	6a 02		 push	 2
  01ea7	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KPMMPACD@?5?5?5?5?5?5?5?A?u?5?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@
  01eac	6a 00		 push	 0
  01eae	6a 01		 push	 1
  01eb0	83 c6 28	 add	 esi, 40			; 00000028H
  01eb3	56		 push	 esi
  01eb4	57		 push	 edi
  01eb5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11883: 			systemWndFontNo[1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "       ê°     ì       ", 2);	y += 40;

  01eba	6a 02		 push	 2
  01ebc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FONPGALA@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?5?$LM?R?5?5?5?5?5?5?5@
  01ec1	6a 00		 push	 0
  01ec3	6a 01		 push	 1
  01ec5	83 c6 28	 add	 esi, 40			; 00000028H
  01ec8	a3 00 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA, eax
  01ecd	56		 push	 esi
  01ece	57		 push	 edi
  01ecf	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01ed4	83 c4 54	 add	 esp, 84			; 00000054H
  01ed7	a3 04 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+4, eax

; 11884: 			systemWndFontNo[2] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, monoStereoStr[stereo_flg], 2);	y += 52;

  01edc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?stereo_flg@@3HA ; stereo_flg
  01ee1	83 c6 28	 add	 esi, 40			; 00000028H
  01ee4	6a 02		 push	 2
  01ee6	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?monoStereoStr@@3PAPADA[eax*4]
  01eed	6a 00		 push	 0
  01eef	6a 01		 push	 1
  01ef1	56		 push	 esi
  01ef2	57		 push	 edi
  01ef3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11885: 			systemWndFontNo[3] = StockFontBuffer(x, y, FONT_PRIO_FRONT, FONT_PAL_AQUA, "      ë ì ê° ê¸°       ", 2);	y += 40;

  01ef8	6a 02		 push	 2
  01efa	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GJAFKJDC@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5?5@
  01eff	6a 01		 push	 1
  01f01	83 c6 34	 add	 esi, 52			; 00000034H
  01f04	a3 08 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+8, eax
  01f09	6a 01		 push	 1
  01f0b	56		 push	 esi
  01f0c	57		 push	 edi
  01f0d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  01f12	a3 0c 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+12, eax

; 11886: 			break;

  01f17	e9 ca 08 00 00	 jmp	 $LN5088@MenuProc
$LN687@MenuProc:

; 11887: 		case 4://èæ¯é³ä¹
; 11888: 			if (pActMenuWnd == NULL) {

  01f1c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  01f23	75 5d		 jne	 SHORT $LN688@MenuProc

; 11889: 				int ä¸´æ¶å®½X, ä¸´æ¶é«Y;
; 11890: 				w = 4;
; 11891: 				h = 8;
; 11892: 				if (ResoMode == åè¾¨ç::mode800) {

  01f25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  01f2a	83 f8 03	 cmp	 eax, 3
  01f2d	75 1a		 jne	 SHORT $LN690@MenuProc

; 11897: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11898: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11899: 				}
; 11900: 				else {
; 11901: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11902: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11903: 				}
; 11904: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_BGM, 1);

  01f2f	6a 01		 push	 1
  01f31	68 a0 65 00 00	 push	 26016			; 000065a0H
  01f36	6a 08		 push	 8
  01f38	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  01f3d	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  01f42	6a 04		 push	 4

; 11905: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11906: 				break;

  01f44	e9 4c 07 00 00	 jmp	 $LN5095@MenuProc
$LN690@MenuProc:

; 11893: 					ä¸´æ¶å®½X = (800 - w * 100) / 2;
; 11894: 					ä¸´æ¶é«Y = (600 - h * 60) / 2;
; 11895: 				}
; 11896: 				else if (ResoMode == åè¾¨ç::mode1024) {

  01f49	83 f8 04	 cmp	 eax, 4
  01f4c	75 1a		 jne	 SHORT $LN692@MenuProc

; 11897: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11898: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11899: 				}
; 11900: 				else {
; 11901: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11902: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11903: 				}
; 11904: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_BGM, 1);

  01f4e	6a 01		 push	 1
  01f50	68 a0 65 00 00	 push	 26016			; 000065a0H
  01f55	6a 08		 push	 8
  01f57	b8 e8 00 00 00	 mov	 eax, 232		; 000000e8H
  01f5c	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  01f61	6a 04		 push	 4

; 11905: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11906: 				break;

  01f63	e9 2d 07 00 00	 jmp	 $LN5095@MenuProc
$LN692@MenuProc:

; 11897: 					ä¸´æ¶å®½X = (1024 - w * 140) / 2;
; 11898: 					ä¸´æ¶é«Y = (768 - h * 77) / 2;
; 11899: 				}
; 11900: 				else {
; 11901: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 11902: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 11903: 				}
; 11904: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_BGM, 1);

  01f68	6a 01		 push	 1
  01f6a	68 a0 65 00 00	 push	 26016			; 000065a0H
  01f6f	6a 08		 push	 8
  01f71	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  01f76	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  01f7b	6a 04		 push	 4

; 11905: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11906: 				break;

  01f7d	e9 13 07 00 00	 jmp	 $LN5095@MenuProc
$LN688@MenuProc:

; 11907: 			}
; 11908: 			else {
; 11909: 				if (pActMenuWnd->hp <= 0) break;

  01f82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  01f87	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  01f8b	0f 8e 61 08 00
	00		 jle	 $LN4736@MenuProc

; 11910: 			}
; 11911: 			if (mouse.autoState & MOUSE_LEFT_CRICK) {

  01f91	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  01f98	0f 84 4d 01 00
	00		 je	 $LN4733@MenuProc

; 11912: 				if (HitFontNo == systemWndFontNo[0]) {

  01f9e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01fa3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA
  01fa9	75 45		 jne	 SHORT $LN698@MenuProc

; 11913: 					t_music_bgm_volume++;

  01fab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t_music_bgm_volume@@3HA ; t_music_bgm_volume
  01fb0	40		 inc	 eax
  01fb1	a3 00 00 00 00	 mov	 DWORD PTR ?t_music_bgm_volume@@3HA, eax ; t_music_bgm_volume

; 11914: 					if (t_music_bgm_volume > 15) {

  01fb6	68 f0 00 00 00	 push	 240			; 000000f0H
  01fbb	68 40 01 00 00	 push	 320			; 00000140H
  01fc0	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  01fc3	7e 19		 jle	 SHORT $LN697@MenuProc

; 11915: 						t_music_bgm_volume = 15;
; 11916: 						play_se(220, 320, 240);

  01fc5	68 dc 00 00 00	 push	 220			; 000000dcH
  01fca	c7 05 00 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?t_music_bgm_volume@@3HA, 15 ; t_music_bgm_volume, 0000000fH
  01fd4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01fd9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11917: 					}

  01fdc	eb 12		 jmp	 SHORT $LN698@MenuProc
$LN697@MenuProc:

; 11918: 					else {
; 11919: 						play_se(217, 320, 240);

  01fde	68 d9 00 00 00	 push	 217			; 000000d9H
  01fe3	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  01fe8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11920: 						bgm_volume_change();

  01feb	e8 00 00 00 00	 call	 ?bgm_volume_change@@YAXXZ ; bgm_volume_change
$LN698@MenuProc:

; 11921: 					}
; 11922: 				}
; 11923: 				if (HitFontNo == systemWndFontNo[1]) {

  01ff0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  01ff5	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+4
  01ffb	75 3d		 jne	 SHORT $LN701@MenuProc

; 11924: 					t_music_bgm_volume--;

  01ffd	29 35 00 00 00
	00		 sub	 DWORD PTR ?t_music_bgm_volume@@3HA, esi ; t_music_bgm_volume

; 11925: 					if (t_music_bgm_volume < 0) {

  02003	68 f0 00 00 00	 push	 240			; 000000f0H
  02008	68 40 01 00 00	 push	 320			; 00000140H
  0200d	79 19		 jns	 SHORT $LN700@MenuProc

; 11926: 						t_music_bgm_volume = 0;
; 11927: 						play_se(220, 320, 240);

  0200f	68 dc 00 00 00	 push	 220			; 000000dcH
  02014	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?t_music_bgm_volume@@3HA, 0 ; t_music_bgm_volume
  0201e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11928: 					}

  02026	eb 12		 jmp	 SHORT $LN701@MenuProc
$LN700@MenuProc:

; 11929: 					else {
; 11930: 						play_se(217, 320, 240);

  02028	68 d9 00 00 00	 push	 217			; 000000d9H
  0202d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11931: 						bgm_volume_change();

  02035	e8 00 00 00 00	 call	 ?bgm_volume_change@@YAXXZ ; bgm_volume_change
$LN701@MenuProc:

; 11932: 					}
; 11933: 				}
; 11934: 				if (HitFontNo == systemWndFontNo[3]) {

  0203a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0203f	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+12
  02045	75 50		 jne	 SHORT $LN704@MenuProc

; 11935: 					t_music_bgm_pitch[t_music_bgm_no]++;

  02047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t_music_bgm_no@@3HA ; t_music_bgm_no
  0204c	fe 80 00 00 00
	00		 inc	 BYTE PTR ?t_music_bgm_pitch@@3PADA[eax]

; 11936: 					set_gbm_pitch();

  02052	e8 00 00 00 00	 call	 ?set_gbm_pitch@@YAXXZ	; set_gbm_pitch

; 11937: 					if (t_music_bgm_pitch[t_music_bgm_no] > 8) {

  02057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t_music_bgm_no@@3HA ; t_music_bgm_no
  0205c	68 f0 00 00 00	 push	 240			; 000000f0H
  02061	68 40 01 00 00	 push	 320			; 00000140H
  02066	80 b8 00 00 00
	00 08		 cmp	 BYTE PTR ?t_music_bgm_pitch@@3PADA[eax], 8
  0206d	7e 16		 jle	 SHORT $LN703@MenuProc

; 11938: 						t_music_bgm_pitch[t_music_bgm_no] = 8;
; 11939: 						play_se(220, 320, 240);

  0206f	68 dc 00 00 00	 push	 220			; 000000dcH
  02074	c6 80 00 00 00
	00 08		 mov	 BYTE PTR ?t_music_bgm_pitch@@3PADA[eax], 8
  0207b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11940: 					}

  02083	eb 12		 jmp	 SHORT $LN704@MenuProc
$LN703@MenuProc:

; 11941: 					else {
; 11942: 						play_se(217, 320, 240);

  02085	68 d9 00 00 00	 push	 217			; 000000d9H
  0208a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0208f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11943: 						set_gbm_pitch();

  02092	e8 00 00 00 00	 call	 ?set_gbm_pitch@@YAXXZ	; set_gbm_pitch
$LN704@MenuProc:

; 11944: 					}
; 11945: 				}
; 11946: 				if (HitFontNo == systemWndFontNo[4]) {

  02097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0209c	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+16
  020a2	75 47		 jne	 SHORT $LN4733@MenuProc

; 11947: 					t_music_bgm_pitch[t_music_bgm_no]--;

  020a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?t_music_bgm_no@@3HA ; t_music_bgm_no

; 11948: 					if (t_music_bgm_pitch[t_music_bgm_no] < -8) {

  020aa	68 f0 00 00 00	 push	 240			; 000000f0H
  020af	68 40 01 00 00	 push	 320			; 00000140H
  020b4	fe 89 00 00 00
	00		 dec	 BYTE PTR ?t_music_bgm_pitch@@3PADA[ecx]
  020ba	80 b9 00 00 00
	00 f8		 cmp	 BYTE PTR ?t_music_bgm_pitch@@3PADA[ecx], -8 ; fffffff8H
  020c1	7d 16		 jge	 SHORT $LN706@MenuProc

; 11949: 						t_music_bgm_pitch[t_music_bgm_no] = -8;
; 11950: 						play_se(220, 320, 240);

  020c3	68 dc 00 00 00	 push	 220			; 000000dcH
  020c8	c6 81 00 00 00
	00 f8		 mov	 BYTE PTR ?t_music_bgm_pitch@@3PADA[ecx], -8 ; fffffff8H
  020cf	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  020d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11951: 					}

  020d7	eb 12		 jmp	 SHORT $LN4733@MenuProc
$LN706@MenuProc:

; 11952: 					else {
; 11953: 						play_se(217, 320, 240);

  020d9	68 d9 00 00 00	 push	 217			; 000000d9H
  020de	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  020e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11954: 						set_gbm_pitch();

  020e6	e8 00 00 00 00	 call	 ?set_gbm_pitch@@YAXXZ	; set_gbm_pitch
$LN4733@MenuProc:

; 11955: 					}
; 11956: 				}
; 11957: 			}
; 11958: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {

  020eb	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  020f2	74 11		 je	 SHORT $LN709@MenuProc

; 11959: 				if (HitFontNo == systemWndFontNo[2]) {

  020f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  020f9	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+8
  020ff	0f 84 a0 04 00
	00		 je	 $LN5096@MenuProc
$LN709@MenuProc:

; 11960: 					DeathAction(pActMenuWnd);
; 11961: 					pActMenuWnd = NULL;
; 11962: 					systemWndNo = 0;
; 11963: 					play_se(203, 320, 240);
; 11964: 					saveUserSetting();
; 11965: 					break;
; 11966: 				}
; 11967: 			}
; 11968: 			x = pActMenuWnd->x + 48 - 5;

  02105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 11969: 			y = pActMenuWnd->y + 64;
; 11970: 			sprintf(moji, "   â  ë°°ê²½ìì %3d  â", t_music_bgm_volume);

  0210b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02111	ff 35 00 00 00
	00		 push	 DWORD PTR ?t_music_bgm_volume@@3HA ; t_music_bgm_volume
  02117	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MMNCCENM@?5?5?5?$KB?$NP?5?5?$LJ?h?$LA?f?$MA?$LN?$LO?G?5?$CF3d?5?5?$KB?$NP@
  0211c	8b 72 18	 mov	 esi, DWORD PTR [edx+24]
  0211f	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  02122	83 c6 2b	 add	 esi, 43			; 0000002bH
  02125	50		 push	 eax
  02126	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  0212c	83 c7 40	 add	 edi, 64			; 00000040H
  0212f	e8 00 00 00 00	 call	 _sprintf

; 11971: 			StockFontBuffer(x - 8, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, moji, 0);				y += 40;

  02134	6a 00		 push	 0
  02136	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  0213c	51		 push	 ecx
  0213d	6a 04		 push	 4
  0213f	6a 01		 push	 1
  02141	8d 46 f8	 lea	 eax, DWORD PTR [esi-8]
  02144	57		 push	 edi
  02145	50		 push	 eax
  02146	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11972: 			systemWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "       ì¦    ê°       ", 2);	y += 40;

  0214b	6a 02		 push	 2
  0214d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BIAEBEPO@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5?5@
  02152	6a 00		 push	 0
  02154	6a 01		 push	 1
  02156	83 c7 28	 add	 edi, 40			; 00000028H
  02159	57		 push	 edi
  0215a	56		 push	 esi
  0215b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11973: 			systemWndFontNo[1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "       ê°    ì       ", 2);	y += 48;

  02160	6a 02		 push	 2
  02162	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MIIPLPNG@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5?5@
  02167	6a 00		 push	 0
  02169	6a 01		 push	 1
  0216b	83 c7 28	 add	 edi, 40			; 00000028H
  0216e	a3 00 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA, eax
  02173	57		 push	 edi
  02174	56		 push	 esi
  02175	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0217a	a3 04 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+4, eax
  0217f	83 c4 54	 add	 esp, 84			; 00000054H

; 11974: 			if (t_music_bgm_pitch[t_music_bgm_no] == 0) {

  02182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t_music_bgm_no@@3HA ; t_music_bgm_no
  02187	83 c7 30	 add	 edi, 48			; 00000030H
  0218a	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?t_music_bgm_pitch@@3PADA[eax]
  02190	84 c0		 test	 al, al
  02192	75 16		 jne	 SHORT $LN710@MenuProc

; 11975: 				sprintf(moji, "â   â  íí¬ì¡°ì   0  ââ");

  02194	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0219a	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BJPCPCNM@?$KB?$NP?5?5?5?$KB?$NP?5?5?E?$NL?F?w?A?$LG?$MA?$PN?5?50?5?5?$KB?$NP?$KB?$NP@
  0219f	50		 push	 eax
  021a0	e8 00 00 00 00	 call	 _sprintf
  021a5	83 c4 08	 add	 esp, 8

; 11976: 			}

  021a8	eb 18		 jmp	 SHORT $LN711@MenuProc
$LN710@MenuProc:

; 11977: 			else
; 11978: 				sprintf(moji, "   â  íí¬ì¡°ì   %+3d  â", t_music_bgm_pitch[t_music_bgm_no]);

  021aa	0f be c0	 movsx	 eax, al
  021ad	50		 push	 eax
  021ae	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  021b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FEMCCNKI@?5?5?5?$KB?$NP?5?5?E?$NL?F?w?A?$LG?$MA?$PN?5?5?$CF?$CL3d?5?5?$KB?$NP@
  021b9	50		 push	 eax
  021ba	e8 00 00 00 00	 call	 _sprintf
  021bf	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN711@MenuProc:

; 11979: 			StockFontBuffer(x - 8, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, moji, 0);				y += 40;

  021c2	6a 00		 push	 0
  021c4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  021ca	50		 push	 eax
  021cb	6a 04		 push	 4
  021cd	6a 01		 push	 1
  021cf	8d 46 f8	 lea	 eax, DWORD PTR [esi-8]
  021d2	57		 push	 edi
  021d3	50		 push	 eax
  021d4	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11980: 			systemWndFontNo[3] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "       ì¦    ê°      ", 2);	y += 40;

  021d9	6a 02		 push	 2
  021db	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IIDNKJBP@?5?5?5?5?5?5?5?A?u?5?5?5?5?$LA?$KB?5?5?5?5?5?5@
  021e0	6a 00		 push	 0
  021e2	6a 01		 push	 1
  021e4	83 c7 28	 add	 edi, 40			; 00000028H
  021e7	57		 push	 edi
  021e8	56		 push	 esi
  021e9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 11981: 			systemWndFontNo[4] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "       ê°    ì      ", 2);	y += 52;

  021ee	6a 02		 push	 2
  021f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GDIAHGPK@?5?5?5?5?5?5?5?$LA?$KI?5?5?5?5?$LM?R?5?5?5?5?5?5@
  021f5	6a 00		 push	 0
  021f7	6a 01		 push	 1
  021f9	83 c7 28	 add	 edi, 40			; 00000028H
  021fc	a3 0c 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+12, eax
  02201	57		 push	 edi
  02202	56		 push	 esi
  02203	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  02208	83 c4 48	 add	 esp, 72			; 00000048H
  0220b	a3 10 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+16, eax
  02210	83 c7 34	 add	 edi, 52			; 00000034H

; 11982: 			systemWndFontNo[2] = StockFontBuffer(x, y, FONT_PRIO_FRONT, FONT_PAL_AQUA, "      ë ì ê° ê¸°      ", 2);	y += 40;

  02213	6a 02		 push	 2
  02215	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DIAFOMFL@?5?5?5?5?5?5?$LF?$LJ?5?$LO?F?5?$LA?$KB?5?$LB?b?5?5?5?5?5?5@
  0221a	6a 01		 push	 1
  0221c	6a 01		 push	 1
  0221e	57		 push	 edi
  0221f	56		 push	 esi
  02220	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  02225	83 c4 18	 add	 esp, 24			; 00000018H
  02228	a3 08 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+8, eax
  0222d	83 c7 28	 add	 edi, 40			; 00000028H
  02230	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi

; 11983: 			break;

  02236	e9 b7 05 00 00	 jmp	 $LN4736@MenuProc
$LN712@MenuProc:

; 11984: 		case 5://è®°å½æå­è®¾å®
; 11985: 			if (pActMenuWnd == NULL) {

  0223b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02242	75 7e		 jne	 SHORT $LN713@MenuProc

; 11986: 				pActMenuWnd = MakeWindowDisp(4, 4, 272, 430, CG_WND_TITLE_CHAT, -1);

  02244	6a ff		 push	 -1
  02246	68 9f 65 00 00	 push	 26015			; 0000659fH
  0224b	68 ae 01 00 00	 push	 430			; 000001aeH
  02250	68 10 01 00 00	 push	 272			; 00000110H
  02255	6a 04		 push	 4
  02257	6a 04		 push	 4
  02259	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0225e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe

; 11987: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 11988: 				GetKeyInputFocus(&chatRegistryStr[0]);

  02265	68 00 00 00 00	 push	 OFFSET ?chatRegistryStr@@3PAUSTR_BUFFER@@A
  0226a	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  0226f	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA, xmm0
  02276	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+16, xmm0
  0227d	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+32, xmm0
  02284	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+48, xmm0
  0228b	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+64, xmm0
  02292	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+80, xmm0
  02299	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+96, xmm0
  022a0	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+112, xmm0
  022a7	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+128, xmm0
  022ae	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+144, xmm0
  022b5	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  022ba	83 c4 1c	 add	 esp, 28			; 0000001cH

; 11989: 				break;

  022bd	e9 30 05 00 00	 jmp	 $LN4736@MenuProc
$LN713@MenuProc:

; 11990: 			}
; 11991: 			else {
; 11992: 				if (pActMenuWnd->hp <= 0) break;

  022c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  022c7	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  022cb	0f 8e 21 05 00
	00		 jle	 $LN4736@MenuProc

; 11993: 			}
; 11994: 			int ä¸´æ¶å®½X, ä¸´æ¶é«Y;
; 11995: 			if (ResoMode == åè¾¨ç::mode800) {

  022d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  022d6	83 f8 03	 cmp	 eax, 3
  022d9	75 0a		 jne	 SHORT $LN716@MenuProc

; 11996: 				ä¸´æ¶å®½X = 800 / 2;

  022db	b8 90 01 00 00	 mov	 eax, 400		; 00000190H

; 11997: 				ä¸´æ¶é«Y = 600 / 2;

  022e0	8d 48 9c	 lea	 ecx, DWORD PTR [eax-100]

; 11998: 			}

  022e3	eb 19		 jmp	 SHORT $LN719@MenuProc
$LN716@MenuProc:

; 11999: 			else if (ResoMode == åè¾¨ç::mode1024) {

  022e5	83 f8 04	 cmp	 eax, 4
  022e8	75 0a		 jne	 SHORT $LN718@MenuProc

; 12000: 				ä¸´æ¶å®½X = 1024 / 2;

  022ea	b8 00 02 00 00	 mov	 eax, 512		; 00000200H

; 12001: 				ä¸´æ¶é«Y = 768 / 2;

  022ef	8d 48 80	 lea	 ecx, DWORD PTR [eax-128]

; 12002: 			}

  022f2	eb 0a		 jmp	 SHORT $LN719@MenuProc
$LN718@MenuProc:

; 12003: 			else {
; 12004: 				ä¸´æ¶å®½X = 640 / 2;

  022f4	b8 40 01 00 00	 mov	 eax, 320		; 00000140H

; 12005: 				ä¸´æ¶é«Y = 480 / 2;

  022f9	b9 f0 00 00 00	 mov	 ecx, 240		; 000000f0H
$LN719@MenuProc:

; 12006: 			}
; 12007: 			StockDispBuffer(ä¸´æ¶å®½X, ä¸´æ¶é«Y, DISP_PRIO_MENU, CG_CHAT_REGISTY_WND, 1);

  022fe	6a 01		 push	 1
  02300	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_CHAT_REGISTY_WND@@3HA ; CG_CHAT_REGISTY_WND
  02306	6a 68		 push	 104			; 00000068H
  02308	51		 push	 ecx
  02309	50		 push	 eax
  0230a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0230f	83 c4 14	 add	 esp, 20			; 00000014H

; 12008: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {

  02312	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  02319	74 5c		 je	 SHORT $LN721@MenuProc

; 12009: 				if (HitDispNo == systemWndFontNo[3]) {

  0231b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02320	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+12
  02326	75 4f		 jne	 SHORT $LN721@MenuProc

; 12010: 					DeathAction(pActMenuWnd);

  02328	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0232e	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12011: 					pActMenuWnd = NULL;
; 12012: 					GetKeyInputFocus(&MyChatBuffer);

  02333	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  02338	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02342	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 12013: 					systemWndNo = 0;
; 12014: 					play_se(203, 320, 240);

  02347	68 f0 00 00 00	 push	 240			; 000000f0H
  0234c	68 40 01 00 00	 push	 320			; 00000140H
  02351	68 cb 00 00 00	 push	 203			; 000000cbH
  02356	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 0 ; systemWndNo
  02360	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02365	83 c4 14	 add	 esp, 20			; 00000014H

; 12015: 					saveUserSetting();

  02368	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 12016: 					SaveChatRegistyStr();

  0236d	e8 00 00 00 00	 call	 ?SaveChatRegistyStr@@YAHXZ ; SaveChatRegistyStr

; 12017: 					break;

  02372	e9 7b 04 00 00	 jmp	 $LN4736@MenuProc
$LN721@MenuProc:

; 12018: 				}
; 12019: 			}
; 12020: 			if (ResoMode == åè¾¨ç::mode800) {

  02377	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  0237c	83 f8 03	 cmp	 eax, 3
  0237f	75 0c		 jne	 SHORT $LN722@MenuProc

; 12021: 				x = 800 / 2 - 122;

  02381	b8 16 01 00 00	 mov	 eax, 278		; 00000116H

; 12022: 				y = 600 / 2 - 156;

  02386	bf 90 00 00 00	 mov	 edi, 144		; 00000090H

; 12023: 			}

  0238b	eb 19		 jmp	 SHORT $LN5089@MenuProc
$LN722@MenuProc:

; 12024: 			else if (ResoMode == åè¾¨ç::mode1024) {

  0238d	83 f8 04	 cmp	 eax, 4
  02390	75 0c		 jne	 SHORT $LN724@MenuProc

; 12025: 				x = 1024 / 2 - 122;

  02392	b8 86 01 00 00	 mov	 eax, 390		; 00000186H

; 12026: 				y = 768 / 2 - 156;

  02397	bf e4 00 00 00	 mov	 edi, 228		; 000000e4H

; 12027: 			}

  0239c	eb 08		 jmp	 SHORT $LN5089@MenuProc
$LN724@MenuProc:

; 12028: 			else {
; 12029: 				x = 640 / 2 - 122;

  0239e	b8 c6 00 00 00	 mov	 eax, 198		; 000000c6H

; 12030: 				y = 480 / 2 - 156;

  023a3	8d 78 8e	 lea	 edi, DWORD PTR [eax-114]
$LN5089@MenuProc:

; 12031: 			}
; 12032: 			//x = pActMenuWnd->x + 18;
; 12033: 			//y = pActMenuWnd->y + 58;
; 12034: 			for (i = 0; i < 8; i++) {

  023a6	89 85 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], eax
  023ac	be 0c 01 00 00	 mov	 esi, OFFSET ?chatRegistryStr@@3PAUSTR_BUFFER@@A+268
  023b1	83 c0 02	 add	 eax, 2
  023b4	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv38635[ebp], eax
  023ba	66 0f 1f 44 00
	00		 npad	 6
$LL66@MenuProc:

; 12035: 				chatRegistryStr[i].x = x + 2;

  023c0	89 06		 mov	 DWORD PTR [esi], eax

; 12036: 				chatRegistryStr[i].y = y;
; 12037: 				StockFontBuffer2(&chatRegistryStr[i]); y += 43;

  023c2	8d 86 f4 fe ff
	ff		 lea	 eax, DWORD PTR [esi-268]
  023c8	50		 push	 eax
  023c9	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  023cc	e8 00 00 00 00	 call	 ?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z ; StockFontBuffer2

; 12038: 				if (MakeHitBox(chatRegistryStr[i].x - 4, chatRegistryStr[i].y - 3,
; 12039: 					chatRegistryStr[i].x + 234 + 3, chatRegistryStr[i].y + 16 + 3, DISP_PRIO_IME3) == TRUE) {

  023d1	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  023d4	83 c7 2b	 add	 edi, 43			; 0000002bH
  023d7	8b 16		 mov	 edx, DWORD PTR [esi]
  023d9	6a 69		 push	 105			; 00000069H
  023db	8d 41 13	 lea	 eax, DWORD PTR [ecx+19]
  023de	50		 push	 eax
  023df	8d 82 ed 00 00
	00		 lea	 eax, DWORD PTR [edx+237]
  023e5	50		 push	 eax
  023e6	8d 41 fd	 lea	 eax, DWORD PTR [ecx-3]
  023e9	50		 push	 eax
  023ea	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  023ed	50		 push	 eax
  023ee	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  023f3	83 c4 18	 add	 esp, 24			; 00000018H
  023f6	83 f8 01	 cmp	 eax, 1
  023f9	75 2b		 jne	 SHORT $LN64@MenuProc

; 12040: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  023fb	84 05 2c 00 00
	00		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, al
  02401	74 23		 je	 SHORT $LN64@MenuProc

; 12041: 						GetKeyInputFocus(&chatRegistryStr[i]);

  02403	8d 86 f4 fe ff
	ff		 lea	 eax, DWORD PTR [esi-268]
  02409	50		 push	 eax
  0240a	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 12042: 						play_se(217, 320, 240);

  0240f	68 f0 00 00 00	 push	 240			; 000000f0H
  02414	68 40 01 00 00	 push	 320			; 00000140H
  02419	68 d9 00 00 00	 push	 217			; 000000d9H
  0241e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02423	83 c4 10	 add	 esp, 16			; 00000010H
$LN64@MenuProc:

; 12031: 			}
; 12032: 			//x = pActMenuWnd->x + 18;
; 12033: 			//y = pActMenuWnd->y + 58;
; 12034: 			for (i = 0; i < 8; i++) {

  02426	8b 85 f8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38635[ebp]
  0242c	81 c6 28 01 00
	00		 add	 esi, 296		; 00000128H
  02432	81 fe 4c 0a 00
	00		 cmp	 esi, OFFSET ?chatRegistryStr@@3PAUSTR_BUFFER@@A+2636
  02438	7c 86		 jl	 SHORT $LL66@MenuProc

; 12043: 					}
; 12044: 				}
; 12045: 			}
; 12046: 			if (ResoMode == åè¾¨ç::mode800) {

  0243a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  0243f	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  02445	83 f8 03	 cmp	 eax, 3
  02448	75 0a		 jne	 SHORT $LN728@MenuProc

; 12047: 				ä¸´æ¶å®½X = 800 / 2;

  0244a	b8 90 01 00 00	 mov	 eax, 400		; 00000190H

; 12048: 				ä¸´æ¶é«Y = 600 / 2;

  0244f	8d 48 5e	 lea	 ecx, DWORD PTR [eax+94]

; 12049: 			}

  02452	eb 19		 jmp	 SHORT $LN731@MenuProc
$LN728@MenuProc:

; 12050: 			else if (ResoMode == åè¾¨ç::mode1024) {

  02454	83 f8 04	 cmp	 eax, 4
  02457	75 0a		 jne	 SHORT $LN730@MenuProc

; 12051: 				ä¸´æ¶å®½X = 1024 / 2;

  02459	b8 00 02 00 00	 mov	 eax, 512		; 00000200H

; 12052: 				ä¸´æ¶é«Y = 768 / 2;

  0245e	8d 48 42	 lea	 ecx, DWORD PTR [eax+66]

; 12053: 			}

  02461	eb 0a		 jmp	 SHORT $LN731@MenuProc
$LN730@MenuProc:

; 12054: 			else {
; 12055: 				ä¸´æ¶å®½X = 640 / 2;

  02463	b8 40 01 00 00	 mov	 eax, 320		; 00000140H

; 12056: 				ä¸´æ¶é«Y = 480 / 2;

  02468	b9 b2 01 00 00	 mov	 ecx, 434		; 000001b2H
$LN731@MenuProc:

; 12057: 			}
; 12058: 			systemWndFontNo[3] = StockDispBuffer(ä¸´æ¶å®½X, ä¸´æ¶é«Y + 194, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  0246d	6a 02		 push	 2
  0246f	68 bb 65 00 00	 push	 26043			; 000065bbH
  02474	6a 69		 push	 105			; 00000069H
  02476	51		 push	 ecx
  02477	50		 push	 eax
  02478	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0247d	83 c4 14	 add	 esp, 20			; 00000014H
  02480	a3 0c 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+12, eax

; 12059: 			break;

  02485	e9 68 03 00 00	 jmp	 $LN4736@MenuProc
$LN732@MenuProc:

; 12060: 		case 6://æ»é¼ è®¾å®
; 12061: 			if (pActMenuWnd == NULL) {

  0248a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02491	75 51		 jne	 SHORT $LN733@MenuProc

; 12062: 				int ä¸´æ¶å®½X, ä¸´æ¶é«Y;
; 12063: 				w = 3;
; 12064: 				h = 4;
; 12065: 				if (ResoMode == åè¾¨ç::mode800) {

  02493	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  02498	83 f8 03	 cmp	 eax, 3
  0249b	75 16		 jne	 SHORT $LN735@MenuProc

; 12066: 					ä¸´æ¶å®½X = (800 - w * 106) / 2;

  0249d	b8 f1 00 00 00	 mov	 eax, 241		; 000000f1H

; 12075: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 12076: 				}
; 12077: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_MOUSE, 1);

  024a2	6a 01		 push	 1
  024a4	68 ae 65 00 00	 push	 26030			; 000065aeH
  024a9	6a 04		 push	 4
  024ab	8d 48 af	 lea	 ecx, DWORD PTR [eax-81]

; 12078: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 12079: 				break;

  024ae	e9 e0 01 00 00	 jmp	 $LN5094@MenuProc
$LN735@MenuProc:

; 12067: 					ä¸´æ¶é«Y = (600 - h * 70) / 2;
; 12068: 				}
; 12069: 				else if (ResoMode == åè¾¨ç::mode1024) {

  024b3	83 f8 04	 cmp	 eax, 4
  024b6	75 16		 jne	 SHORT $LN737@MenuProc

; 12070: 					ä¸´æ¶å®½X = (1024 - w * 180) / 2;

  024b8	b8 f2 00 00 00	 mov	 eax, 242		; 000000f2H

; 12075: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 12076: 				}
; 12077: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_MOUSE, 1);

  024bd	6a 01		 push	 1
  024bf	68 ae 65 00 00	 push	 26030			; 000065aeH
  024c4	6a 04		 push	 4
  024c6	8d 48 ce	 lea	 ecx, DWORD PTR [eax-50]

; 12078: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 12079: 				break;

  024c9	e9 c5 01 00 00	 jmp	 $LN5094@MenuProc
$LN737@MenuProc:

; 12071: 					ä¸´æ¶é«Y = (768 - h * 96) / 2;
; 12072: 				}
; 12073: 				else {
; 12074: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;

  024ce	b8 e0 00 00 00	 mov	 eax, 224		; 000000e0H

; 12075: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 12076: 				}
; 12077: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_MOUSE, 1);

  024d3	6a 01		 push	 1
  024d5	68 ae 65 00 00	 push	 26030			; 000065aeH
  024da	6a 04		 push	 4
  024dc	8d 48 b0	 lea	 ecx, DWORD PTR [eax-80]

; 12078: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 12079: 				break;

  024df	e9 af 01 00 00	 jmp	 $LN5094@MenuProc
$LN733@MenuProc:

; 12080: 			}
; 12081: 			else {
; 12082: 				if (pActMenuWnd->hp <= 0) break;

  024e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  024e9	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  024ed	0f 8e ff 02 00
	00		 jle	 $LN4736@MenuProc

; 12083: 			}
; 12084: 			if (HitFontNo == systemWndFontNo[0]) {

  024f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  024f8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA
  024fe	0f 85 8b 00 00
	00		 jne	 $LN4734@MenuProc

; 12085: 				if (MouseCursorFlag == TRUE) {

  02504	39 35 00 00 00
	00		 cmp	 DWORD PTR ?MouseCursorFlag@@3HA, esi ; MouseCursorFlag
  0250a	75 3b		 jne	 SHORT $LN741@MenuProc

; 12086: 					strcpy(OneLineInfoStr, "ê³µë£¡ìã");
; 12087: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0250c	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  02513	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_08LPIKKIN@?$LA?x?$LH?f?$LO?K?$KB?$KD@
  0251b	a0 08 00 00 00	 mov	 al, BYTE PTR ??_C@_08LPIKKIN@?$LA?x?$LH?f?$LO?K?$KB?$KD@+8
  02520	66 0f d6 05 00
	00 00 00	 movq	 QWORD PTR ?OneLineInfoStr@@3PADA, xmm0
  02528	a2 08 00 00 00	 mov	 BYTE PTR ?OneLineInfoStr@@3PADA+8, al
  0252d	0f 84 b2 00 00
	00		 je	 $LN746@MenuProc

; 12088: #ifdef _TALK_WINDOW
; 12089: 						g_iCursorCount = ShowCursor(FALSE);
; 12090: #else
; 12091: 						ShowCursor(FALSE);

  02533	6a 00		 push	 0
  02535	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowCursor@4

; 12092: #endif
; 12093: 						MouseCursorFlag = FALSE;

  0253b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MouseCursorFlag@@3HA, 0 ; MouseCursorFlag

; 12094: 						play_se(217, 320, 240);
; 12095: 					}
; 12096: 				}

  02545	eb 31		 jmp	 SHORT $LN5091@MenuProc
$LN741@MenuProc:

; 12097: 				else {
; 12098: 					strcpy(OneLineInfoStr, "ë¼ë¤ê·ã");
; 12099: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  02547	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0254e	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_08LMHKBLHA@?$LL?$MA?$LE?Y?$LB?M?$KB?$KD@
  02556	a0 08 00 00 00	 mov	 al, BYTE PTR ??_C@_08LMHKBLHA@?$LL?$MA?$LE?Y?$LB?M?$KB?$KD@+8
  0255b	66 0f d6 05 00
	00 00 00	 movq	 QWORD PTR ?OneLineInfoStr@@3PADA, xmm0
  02563	a2 08 00 00 00	 mov	 BYTE PTR ?OneLineInfoStr@@3PADA+8, al
  02568	74 7b		 je	 SHORT $LN746@MenuProc

; 12100: #ifdef _TALK_WINDOW
; 12101: 						g_iCursorCount = ShowCursor(TRUE);
; 12102: #else
; 12103: 						ShowCursor(TRUE);

  0256a	6a 01		 push	 1
  0256c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowCursor@4

; 12104: #endif
; 12105: 						MouseCursorFlag = TRUE;

  02572	89 35 00 00 00
	00		 mov	 DWORD PTR ?MouseCursorFlag@@3HA, esi ; MouseCursorFlag
$LN5091@MenuProc:

; 12106: 						play_se(217, 320, 240);	// ?????
; 12107: 					}
; 12108: 				}
; 12109: 			}
; 12110: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {

  02578	68 f0 00 00 00	 push	 240			; 000000f0H
  0257d	68 40 01 00 00	 push	 320			; 00000140H
  02582	68 d9 00 00 00	 push	 217			; 000000d9H
  02587	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0258c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4734@MenuProc:
  0258f	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  02596	74 4d		 je	 SHORT $LN746@MenuProc

; 12111: 				if (HitFontNo == systemWndFontNo[1]) {

  02598	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0259d	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+4
  025a3	75 40		 jne	 SHORT $LN746@MenuProc
$LN5096@MenuProc:

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  025a5	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  025ab	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  025b0	68 f0 00 00 00	 push	 240			; 000000f0H
  025b5	68 40 01 00 00	 push	 320			; 00000140H
  025ba	68 cb 00 00 00	 push	 203			; 000000cbH
  025bf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  025c9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 0 ; systemWndNo
  025d3	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  025d8	83 c4 10	 add	 esp, 16			; 00000010H
  025db	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting
  025e0	e9 0d 02 00 00	 jmp	 $LN4736@MenuProc
$LN746@MenuProc:

; 12112: 					DeathAction(pActMenuWnd);
; 12113: 					pActMenuWnd = NULL;
; 12114: 					systemWndNo = 0;
; 12115: 					play_se(203, 320, 240);
; 12116: 					saveUserSetting();
; 12117: 					break;
; 12118: 				}
; 12119: 			}
; 12120: 			x = pActMenuWnd->x + 28;

  025e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 12121: 			y = pActMenuWnd->y + 56;
; 12122: 			StockFontBuffer(x, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, " â ì»¤ ì ì¤ ì  â   ", 0);	y += 40;

  025eb	6a 00		 push	 0
  025ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KDDPLIEA@?5?$KB?$NP?5?D?$LP?5?$LM?$KN?5?$LM?$LD?5?A?$KE?5?$KB?$NP?5?5?5@
  025f2	6a 04		 push	 4
  025f4	8b 72 1c	 mov	 esi, DWORD PTR [edx+28]
  025f7	8b 7a 18	 mov	 edi, DWORD PTR [edx+24]
  025fa	83 c6 38	 add	 esi, 56			; 00000038H
  025fd	6a 01		 push	 1
  025ff	83 c7 1c	 add	 edi, 28			; 0000001cH
  02602	56		 push	 esi
  02603	57		 push	 edi
  02604	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  0260a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12123: 			systemWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, mouseCursor[MouseCursorFlag], 2);	y += 40;

  0260f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MouseCursorFlag@@3HA ; MouseCursorFlag
  02614	83 c6 28	 add	 esi, 40			; 00000028H
  02617	6a 02		 push	 2
  02619	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?mouseCursor@@3PAPADA[eax*4]
  02620	6a 00		 push	 0
  02622	6a 01		 push	 1
  02624	56		 push	 esi
  02625	57		 push	 edi
  02626	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12124: 			systemWndFontNo[1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, FONT_PAL_AQUA, "       ì¢  ë£       ", 2);	y += 40;

  0262b	6a 02		 push	 2
  0262d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NJPDCGDE@?5?5?5?5?5?5?5?A?$LO?5?5?$LH?a?5?5?5?5?5?5?5@
  02632	6a 01		 push	 1
  02634	6a 01		 push	 1
  02636	83 c6 28	 add	 esi, 40			; 00000028H
  02639	a3 00 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA, eax
  0263e	56		 push	 esi
  0263f	57		 push	 edi
  02640	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  02645	83 c4 48	 add	 esp, 72			; 00000048H
  02648	a3 04 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+4, eax

; 12125: 			break;

  0264d	e9 97 01 00 00	 jmp	 $LN5092@MenuProc
$LN747@MenuProc:

; 12126: 
; 12127: 		case 7://åå°ç»åº
; 12128: 			if (pActMenuWnd == NULL) {

  02652	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02659	0f 85 97 00 00
	00		 jne	 $LN748@MenuProc
$LN5162@MenuProc:

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  0265f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  02664	83 f8 03	 cmp	 eax, 3
  02667	75 0a		 jne	 SHORT $LN750@MenuProc
  02669	b8 f1 00 00 00	 mov	 eax, 241		; 000000f1H
  0266e	8d 48 d2	 lea	 ecx, DWORD PTR [eax-46]
  02671	eb 17		 jmp	 SHORT $LN753@MenuProc
$LN750@MenuProc:
  02673	83 f8 04	 cmp	 eax, 4
  02676	75 0a		 jne	 SHORT $LN752@MenuProc
  02678	b8 f2 00 00 00	 mov	 eax, 242		; 000000f2H
  0267d	8d 48 fe	 lea	 ecx, DWORD PTR [eax-2]
  02680	eb 08		 jmp	 SHORT $LN753@MenuProc
$LN752@MenuProc:
  02682	b8 e0 00 00 00	 mov	 eax, 224		; 000000e0H
  02687	8d 48 c8	 lea	 ecx, DWORD PTR [eax-56]
$LN753@MenuProc:
  0268a	6a 01		 push	 1
  0268c	68 9b 65 00 00	 push	 26011			; 0000659bH
  02691	6a 03		 push	 3
$LN5094@MenuProc:
  02693	6a 03		 push	 3
$LN5095@MenuProc:
  02695	51		 push	 ecx
  02696	50		 push	 eax
  02697	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0269c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  026a3	83 c4 18	 add	 esp, 24			; 00000018H
  026a6	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  026ab	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA, xmm0
  026b2	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+16, xmm0
  026b9	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+32, xmm0
  026c0	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+48, xmm0
  026c7	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+64, xmm0
  026ce	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+80, xmm0
  026d5	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+96, xmm0
  026dc	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+112, xmm0
  026e3	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+128, xmm0
  026ea	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+144, xmm0
  026f1	e9 fc 00 00 00	 jmp	 $LN4736@MenuProc
$LN748@MenuProc:

; 12129: 				int ä¸´æ¶å®½X, ä¸´æ¶é«Y;
; 12130: 				w = 3;
; 12131: 				h = 3;
; 12132: 				if (ResoMode == åè¾¨ç::mode800) {
; 12133: 					ä¸´æ¶å®½X = (800 - w * 106) / 2;
; 12134: 					ä¸´æ¶é«Y = (600 - h * 70) / 2;
; 12135: 				}
; 12136: 				else if (ResoMode == åè¾¨ç::mode1024) {
; 12137: 					ä¸´æ¶å®½X = (1024 - w * 180) / 2;
; 12138: 					ä¸´æ¶é«Y = (768 - h * 96) / 2;
; 12139: 				}
; 12140: 				else {
; 12141: 					ä¸´æ¶å®½X = (640 - w * 64) / 2;
; 12142: 					ä¸´æ¶é«Y = (480 - h * 48) / 2;
; 12143: 				}
; 12144: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶å®½X, ä¸´æ¶é«Y, w, h, CG_WND_TITLE_LOGOUT, 1);
; 12145: 				for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;
; 12146: 				break;
; 12147: 			}
; 12148: 			else {
; 12149: 				if (pActMenuWnd->hp <= 0) break;

  026f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  026fc	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  02700	0f 8e ec 00 00
	00		 jle	 $LN4736@MenuProc

; 12150: 			}
; 12151: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {

  02706	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0270d	0f 84 8a 00 00
	00		 je	 $LN757@MenuProc

; 12152: 				if (HitFontNo == systemWndFontNo[0]) {

  02713	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  02718	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA
  0271e	75 3d		 jne	 SHORT $LN756@MenuProc

; 12153: 					DeathAction(pActMenuWnd);

  02720	52		 push	 edx
  02721	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12154: 					pActMenuWnd = NULL;
; 12155: 					GameState = GAME_LOGIN;
; 12156: 					ChangeProc2(PROC_CHAR_LOGOUT);

  02726	6a 07		 push	 7
  02728	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02732	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GameState@@3HA, 0 ; GameState
  0273c	e8 00 00 00 00	 call	 ?ChangeProc2@@YAXH@Z	; ChangeProc2

; 12157: 					play_se(206, 320, 240);

  02741	68 f0 00 00 00	 push	 240			; 000000f0H
  02746	68 40 01 00 00	 push	 320			; 00000140H
  0274b	68 ce 00 00 00	 push	 206			; 000000ceH
  02750	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02755	83 c4 14	 add	 esp, 20			; 00000014H

; 12158: 					break;

  02758	e9 95 00 00 00	 jmp	 $LN4736@MenuProc
$LN756@MenuProc:

; 12159: 				}
; 12160: 				if (HitFontNo == systemWndFontNo[1]) {

  0275d	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?systemWndFontNo@@3PAHA+4
  02763	75 38		 jne	 SHORT $LN757@MenuProc
$LN5093@MenuProc:

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  02765	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0276b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  02770	68 f0 00 00 00	 push	 240			; 000000f0H
  02775	68 40 01 00 00	 push	 320			; 00000140H
  0277a	68 cb 00 00 00	 push	 203			; 000000cbH
  0277f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02789	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?systemWndNo@@3IA, 0 ; systemWndNo
  02793	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02798	83 c4 10	 add	 esp, 16			; 00000010H
  0279b	eb 55		 jmp	 SHORT $LN4736@MenuProc
$LN757@MenuProc:

; 12161: 					DeathAction(pActMenuWnd);
; 12162: 					pActMenuWnd = NULL;
; 12163: 					systemWndNo = 0;
; 12164: 					play_se(203, 320, 240);
; 12165: 					break;
; 12166: 				}
; 12167: 			}
; 12168: 			x = pActMenuWnd->x + 28;

  0279d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 12169: 			y = pActMenuWnd->y + 56;
; 12170: 			systemWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    í    ì¸     ", 2);	y += 40;

  027a3	6a 02		 push	 2
  027a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BCIJAKBP@?5?5?5?5?H?$KO?5?5?5?5?$MA?N?5?5?5?5?5@
  027aa	6a 00		 push	 0
  027ac	8b 72 1c	 mov	 esi, DWORD PTR [edx+28]
  027af	8b 7a 18	 mov	 edi, DWORD PTR [edx+24]
  027b2	83 c6 38	 add	 esi, 56			; 00000038H
  027b5	6a 01		 push	 1
  027b7	83 c7 1c	 add	 edi, 28			; 0000001cH
  027ba	56		 push	 esi
  027bb	57		 push	 edi
  027bc	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  027c2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12171: 			systemWndFontNo[1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "    ì·¨    ì     ", 2);	y += 40;

  027c7	6a 02		 push	 2
  027c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KGJCGBCP@?5?5?5?5?C?k?5?5?5?5?$LM?R?5?5?5?5?5@
$LN5081@MenuProc:

; 12172: 			break;
; 12173: 
; 12174: 		}
; 12175: 	}
; 12176: 
; 12177: 	//? ???????????? *****************************************************/
; 12178: #ifdef _FRIENDCHANNEL				//ROG ADD å¥½åé¢é
; 12179: 	if (setRoomFlag == TRUE)

  027ce	6a 00		 push	 0
  027d0	6a 01		 push	 1
  027d2	83 c6 28	 add	 esi, 40			; 00000028H
  027d5	a3 00 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA, eax
  027da	56		 push	 esi
  027db	57		 push	 edi
  027dc	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  027e1	a3 04 00 00 00	 mov	 DWORD PTR ?systemWndFontNo@@3PAHA+4, eax
$LN5088@MenuProc:
  027e6	83 c4 30	 add	 esp, 48			; 00000030H
$LN5092@MenuProc:
  027e9	83 c6 28	 add	 esi, 40			; 00000028H
  027ec	89 b5 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], esi
$LN4736@MenuProc:
  027f2	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?setRoomFlag@@3_NA, 1 ; setRoomFlag
  027f9	75 05		 jne	 SHORT $LN758@MenuProc

; 12180: 	{
; 12181: 		setRoomName();

  027fb	e8 00 00 00 00	 call	 ?setRoomName@@YAXXZ	; setRoomName
$LN758@MenuProc:

; 12182: 	}
; 12183: 
; 12184: 	if (assentFlag == TRUE)

  02800	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?assentFlag@@3_NA, 1 ; assentFlag
  02807	75 05		 jne	 SHORT $LN759@MenuProc

; 12185: 	{
; 12186: 		AssentWnd();

  02809	e8 00 00 00 00	 call	 ?AssentWnd@@YAXXZ	; AssentWnd
$LN759@MenuProc:

; 12187: 	}
; 12188: #endif
; 12189: 
; 12190: #ifdef _NB_äººç©æ è¯¦æ	
; 12191: 	int äººç©åºå¾ç¼å· = 52040;
; 12192: #endif
; 12193: 	if (MenuToggleFlag & JOY_CTRL_S) {

  0280e	f7 05 00 00 00
	00 00 00 00 20	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  02818	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe999999999999a
  02820	f2 0f 11 85 e4
	b9 ff ff	 movsd	 QWORD PTR __real@3fe999999999999a$1$[ebp], xmm0
  02828	0f 84 28 1b 00
	00		 je	 $LN760@MenuProc

; 12194: 		switch (statusWndNo) {

  0282e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?statusWndNo@@3IA
  02833	83 f8 07	 cmp	 eax, 7
  02836	0f 87 29 1b 00
	00		 ja	 $LN5039@MenuProc
  0283c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN4310@MenuProc[eax*4]
$LN762@MenuProc:

; 12195: 
; 12196: 		case 4:
; 12197: 			void Initç®è¤çªå£();
; 12198: 			Initç®è¤çªå£();

  02843	e8 00 00 00 00	 call	 ?Initù«??Ï¢@@YAXXZ	; Initù«??Ï¢

; 12199: 			break;

  02848	e9 18 1b 00 00	 jmp	 $LN5039@MenuProc
$LN763@MenuProc:

; 12200: 		case 5:
; 12201: 			void Initè±éç§°å·çªå£();
; 12202: 			Initè±éç§°å·çªå£();

  0284d	e8 00 00 00 00	 call	 ?InitçÈê©???Ï¢@@YAXXZ	; InitçÈê©???Ï¢

; 12203: 			break;

  02852	e9 0e 1b 00 00	 jmp	 $LN5039@MenuProc
$LN764@MenuProc:

; 12204: 		case 6:
; 12205: 			void Initåç¯çªå£();
; 12206: 			Initåç¯çªå£();

  02857	e8 00 00 00 00	 call	 ?InitÎÃ??Ï¢@@YAXXZ	; InitÎÃ??Ï¢

; 12207: 			break;

  0285c	e9 04 1b 00 00	 jmp	 $LN5039@MenuProc
$LN765@MenuProc:

; 12208: 		case 7:
; 12209: 			if (SkillWndflag == true) {

  02861	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?SkillWndflag@@3_NA, 1 ; SkillWndflag
  02868	75 0a		 jne	 SHORT $LN766@MenuProc

; 12210: 				SkillWndfunc2();

  0286a	e8 00 00 00 00	 call	 ?SkillWndfunc2@@YAXXZ	; SkillWndfunc2

; 12211: 			}

  0286f	e9 f1 1a 00 00	 jmp	 $LN5039@MenuProc
$LN766@MenuProc:

; 12212: 			else {
; 12213: 				if (pActSkillMenuWnd != NULL) {

  02874	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActSkillMenuWnd@@3PAUaction@@A ; pActSkillMenuWnd
  02879	85 c0		 test	 eax, eax
  0287b	0f 84 e4 1a 00
	00		 je	 $LN5039@MenuProc

; 12214: 					DeathAction(pActSkillMenuWnd);

  02881	50		 push	 eax
  02882	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  02887	83 c4 04	 add	 esp, 4

; 12215: 					pActSkillMenuWnd = NULL;

  0288a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActSkillMenuWnd@@3PAUaction@@A, 0 ; pActSkillMenuWnd

; 12216: 				}
; 12217: 			}
; 12218: 			break;

  02894	e9 cc 1a 00 00	 jmp	 $LN5039@MenuProc
$LN769@MenuProc:

; 12219: 		case 0:
; 12220: #ifdef _NB_äººç©æ è¯¦æ
; 12221: 			int ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y;
; 12222: 			int ç®è¤æé®ç´¢å¼, ç§°å·æé®ç´¢å¼, ç¹ææé®ç´¢å¼;
; 12223: 			//è®¡ç®å¾çä¸­å¿
; 12224: 			if (ResoMode == åè¾¨ç::mode800) {
; 12225: 				ä¸´æ¶å¾æ X = 800 / 2;
; 12226: 				ä¸´æ¶å¾æ Y = 600 / 2;
; 12227: 				ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 12228: 				ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 12229: 			}
; 12230: 			else if (ResoMode == åè¾¨ç::mode1024) {
; 12231: 				ä¸´æ¶å¾æ X = 1024 / 2;
; 12232: 				ä¸´æ¶å¾æ Y = 768 / 2;
; 12233: 				ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 12234: 				ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 12235: 			}
; 12236: 			else {
; 12237: 				ä¸´æ¶å¾æ X = 640 / 2;
; 12238: 				ä¸´æ¶å¾æ Y = 480 / 2;
; 12239: 				ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 12240: 				ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 12241: 			}
; 12242: 			äººç©åºå¾ç¼å· = 52040;//ä½çæ¬æ èä¸åºå¾
; 12243: 
; 12244: 			if (pActMenuWnd == NULL) {
; 12245: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y, ä¸´æ¶èµ·å§X + 568, ä¸´æ¶èµ·å§Y + 358, 0, -1);
; 12246: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndFontNo[i] = -2;
; 12247: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndBtnFlag[i] = 0;
; 12248: 				SkillWndflag = false;
; 12249: 				ChangeMyName = false;
; 12250: 			}
; 12251: 			else {
; 12252: 				if (pActMenuWnd->hp > 0) {
; 12253: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {//é¼ æ ç¹å»äºä»¶å½æ°
; 12254: 						if (HitDispNo == statusWndFontNo[14]) {   //èä¸æè½
; 12255: 							statusWndNo = 7;
; 12256: 							MenuToggleFlag &= ~JOY_CTRL_I;
; 12257: 							MenuToggleFlag &= ~JOY_CTRL_M;
; 12258: 							SkillWndflag = true;
; 12259: 							play_se(202, 320, 240);
; 12260: 
; 12261: 							DeathAction(pActMenuWnd);
; 12262: 							pActMenuWnd = NULL;
; 12263: 							DeathAction(pActPet);
; 12264: 							pActPet = NULL;
; 12265: 							petWndNo = 0;
; 12266: 							GetKeyInputFocus(&MyChatBuffer);
; 12267: 							MenuToggleFlag ^= JOY_CTRL_S;
; 12268: 						}
; 12269: 					}
; 12270: 					if (HitDispNo == statusWndFontNo[6]) {   	// æ¹åç§°å·
; 12271: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 12272: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢
; 12273: 							SkillWndflag = false;
; 12274: 							MenuToggleFlag &= ~JOY_CTRL_I;
; 12275: 							//MenuToggleFlag &= ~JOY_CTRL_M;
; 12276: #endif
; 12277: 							if (pActMenuWnd3 == NULL) {
; 12278: 								pActMenuWnd3 = MakeWindowDisp(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, ä¸´æ¶å¾æ X + 272, ä¸´æ¶å¾æ Y + 88, 0, -1);
; 12279: 								play_se(202, 320, 240);
; 12280: 								shougouChange.buffer[0] = NULL;
; 12281: 								shougouChange.cnt = 0;
; 12282: 								shougouChange.cursor = 0;
; 12283: 								shougouChange.len = 12;
; 12284: 								shougouChange.color = 10;
; 12285: 								shougouChange.x = ä¸´æ¶å¾æ X - 40;
; 12286: 								shougouChange.y = ä¸´æ¶å¾æ Y - 30;
; 12287: 								shougouChange.fontPrio = FONT_PRIO_AFRONT;
; 12288: 								statusWndBtnFlag[6] = TRUE;
; 12289: 							}
; 12290: 							else {
; 12291: 								DeathAction(pActMenuWnd3);
; 12292: 								pActMenuWnd3 = NULL;
; 12293: 								GetKeyInputFocus(&MyChatBuffer);
; 12294: 								play_se(203, 320, 240);
; 12295: 							}
; 12296: 							statusWndBtnFlag[6] = TRUE;
; 12297: 						}
; 12298: 						if (mouse.state & MOUSE_LEFT_CRICK && statusWndBtnFlag[6] == TRUE) {
; 12299: 							statusWndBtnFlag[6] = TRUE;
; 12300: 						}
; 12301: 						else {
; 12302: 							statusWndBtnFlag[6] = FALSE;
; 12303: 						}
; 12304: 					}
; 12305: 					else {
; 12306: 						statusWndBtnFlag[6] = FALSE;
; 12307: 					}
; 12308: 					if (StatusUpPoint != 0) {
; 12309: 						for (i = 2; i < 6; i++) {
; 12310: 							if (HitDispNo == statusWndFontNo[i]) {
; 12311: 								if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 12312: 									if (bNewServer) {
; 12313: 										lssproto_SKUP_send(sockfd, i - 2);
; 12314: 									}
; 12315: 									else {
; 12316: 										old_lssproto_SKUP_send(sockfd, i - 2);
; 12317: 									}
; 12318: 									play_se(211, 320, 240);
; 12319: 									statusWndBtnFlag[i] = TRUE;
; 12320: 								}
; 12321: 								if (mouse.state & MOUSE_LEFT_CRICK && statusWndBtnFlag[i] == TRUE) {
; 12322: 									statusWndBtnFlag[i] = TRUE;
; 12323: 								}
; 12324: 								else {
; 12325: 									statusWndBtnFlag[i] = FALSE;
; 12326: 								}
; 12327: 							}
; 12328: 							else {
; 12329: 								statusWndBtnFlag[i] = FALSE;
; 12330: 							}
; 12331: 						}
; 12332: 					}
; 12333: 					if (pActMenuWnd3 != NULL) {
; 12334: 						if (pActMenuWnd3->hp > 0) {
; 12335: 							GetKeyInputFocus(&shougouChange);
; 12336: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 12337: 								if (HitDispNo == statusWndFontNo[7]) {
; 12338: 									KeyboardReturn();
; 12339: 								}
; 12340: 								if (HitDispNo == statusWndFontNo[8]) {
; 12341: 									DeathAction(pActMenuWnd3);
; 12342: 									pActMenuWnd3 = NULL;
; 12343: 									GetKeyInputFocus(&MyChatBuffer);
; 12344: 									play_se(203, 320, 240);
; 12345: 								}
; 12346: 							}
; 12347: 							if (pActMenuWnd3 != NULL) {
; 12348: 								StockFontBuffer2(&shougouChange);
; 12349: 								statusWndFontNo[7] = StockDispBuffer(ä¸´æ¶å¾æ X - 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_DRAG, 52035, 2);
; 12350: 								statusWndFontNo[8] = StockDispBuffer(ä¸´æ¶å¾æ X + 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_DRAG, 52036, 2);
; 12351: 							}
; 12352: 							StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_DRAG, 52065, 0);
; 12353: 						}
; 12354: 					}
; 12355: 					if (pActMenuWnd != NULL) {
; 12356: 						sprintf(moji, "%s", pc.name);//æå°ç©å®¶åå­
; 12357: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 150, ä¸´æ¶èµ·å§Y + 46, FONT_PRIO_FRONT, 0, moji, 0);
; 12358: 						sprintf(moji, "%s", pc.freeName);//æå°ç©å®¶æµç§°
; 12359: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 150, ä¸´æ¶èµ·å§Y + 66, FONT_PRIO_FRONT, 0, moji, 0);
; 12360: 						sprintf(moji, "%dè½¬", pc.transmigration);//æå°ç©å®¶è½¬ç
; 12361: 
; 12362: 						if (pc.familyName[0] != NULL) {
; 12363: 							StockFontBuffer(ä¸´æ¶èµ·å§X + 150, ä¸´æ¶èµ·å§Y + 86, FONT_PRIO_FRONT, 0, pc.familyName, 0);
; 12364: 						}
; 12365: 						else {
; 12366: 							StockFontBuffer(ä¸´æ¶èµ·å§X + 150, ä¸´æ¶èµ·å§Y + 86, FONT_PRIO_FRONT, 7, "æ å®¶æ", 0);
; 12367: 						}
; 12368: 						int ä¸´æ¶å­ä½é¢è² = 0;
; 12369: 						if (pc.transmigration == 0) {
; 12370: 							ä¸´æ¶å­ä½é¢è² = 0;
; 12371: 						}
; 12372: 						else if (pc.transmigration == 1) {
; 12373: 							ä¸´æ¶å­ä½é¢è² = 4;
; 12374: 						}
; 12375: 						else if (pc.transmigration == 2) {
; 12376: 							ä¸´æ¶å­ä½é¢è² = 5;
; 12377: 						}
; 12378: 						else if (pc.transmigration == 3) {
; 12379: 							ä¸´æ¶å­ä½é¢è² = 1;
; 12380: 						}
; 12381: 						else if (pc.transmigration == 4) {
; 12382: 							ä¸´æ¶å­ä½é¢è² = 6;
; 12383: 						}
; 12384: 						else if (pc.transmigration == 5) {
; 12385: 							ä¸´æ¶å­ä½é¢è² = 2;
; 12386: 						}
; 12387: 						else if (pc.transmigration == 6) {
; 12388: 							ä¸´æ¶å­ä½é¢è² = 8;
; 12389: 						}
; 12390: 						else if (pc.transmigration == 7) {
; 12391: 							ä¸´æ¶å­ä½é¢è² = 10;
; 12392: 						}
; 12393: 						else if (pc.transmigration == 8) {
; 12394: 							ä¸´æ¶å­ä½é¢è² = 10;
; 12395: 						}
; 12396: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 150, ä¸´æ¶èµ·å§Y + 106, FONT_PRIO_FRONT, ä¸´æ¶å­ä½é¢è², moji, 0);
; 12397: 						sprintf(moji, "%d", pc.level);//æå°äººç©ç­çº§
; 12398: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 225, ä¸´æ¶èµ·å§Y + 106, FONT_PRIO_FRONT, 0, moji, 0);
; 12399: 						//æå°ç»éªå¼
; 12400: 						int è®¡ç®ç¾åæ¯ = (int)float(pc.exp) / float(pc.maxExp) * 100;
; 12401: 						char ä¸´æ¶å­ç¬¦[256];
; 12402: 						if (pc.maxExp == -1) {
; 12403: 							sprintf(ä¸´æ¶å­ç¬¦, "Max");
; 12404: 						}
; 12405: 						else {
; 12406: 							sprintf(ä¸´æ¶å­ç¬¦, "%d/%d", pc.exp, pc.maxExp);
; 12407: 						}
; 12408: 						CenteringStr(ä¸´æ¶å­ç¬¦, moji, 18);//å±ä¸­å¤ç
; 12409: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 340, ä¸´æ¶èµ·å§Y + 35, FONT_PRIO_FRONT, 0, moji, 0);
; 12410: 						if (pc.maxExp == -1) {
; 12411: 							sprintf(ä¸´æ¶å­ç¬¦, "Max");
; 12412: 						}
; 12413: 						else {
; 12414: 							sprintf(ä¸´æ¶å­ç¬¦, "%d%%", è®¡ç®ç¾åæ¯);
; 12415: 						}
; 12416: 						CenteringStr(ä¸´æ¶å­ç¬¦, moji, 4);//å±ä¸­å¤ç
; 12417: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 493, ä¸´æ¶èµ·å§Y + 35, FONT_PRIO_FRONT, 0, moji, 0);
; 12418: 						//æå°ææå
; 12419: 						int äººææå = (pc.maxHp / 4) + pc.atk + pc.def + pc.quick;//ææå
; 12420: 						sprintf(moji, "%d", äººææå);
; 12421: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 340, ä¸´æ¶èµ·å§Y + 56, FONT_PRIO_FRONT, 0, moji, 0);
; 12422: 						//æå°DPå¼
; 12423: 						sprintf(moji, "%d", pc.dp);
; 12424: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 453, ä¸´æ¶èµ·å§Y + 56, FONT_PRIO_FRONT, 0, moji, 0);
; 12425: 						//æå°èä¹å
; 12426: 						è®¡ç®ç¾åæ¯ = (int)float(pc.hp) / float(pc.maxHp) * 100;
; 12427: 						sprintf(moji, "%d/%d", pc.hp, pc.maxHp);
; 12428: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 340, ä¸´æ¶èµ·å§Y + 93, FONT_PRIO_FRONT, 0, moji, 0);
; 12429: 						sprintf(moji, "%d%%", è®¡ç®ç¾åæ¯);
; 12430: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 427, ä¸´æ¶èµ·å§Y + 93, FONT_PRIO_FRONT, 0, moji, 0);
; 12431: 						//æå°æ°å
; 12432: 						è®¡ç®ç¾åæ¯ = (int)float(pc.mp) / float(pc.maxMp) * 100;
; 12433: 						sprintf(moji, "%d/%d", pc.mp, pc.maxMp);
; 12434: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 340, ä¸´æ¶èµ·å§Y + 113, FONT_PRIO_FRONT, 0, moji, 0);
; 12435: 						sprintf(moji, "%d%%", è®¡ç®ç¾åæ¯);
; 12436: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 427, ä¸´æ¶èµ·å§Y + 113, FONT_PRIO_FRONT, 0, moji, 0);
; 12437: 
; 12438: 						sprintf(moji, "%d", pc.atk);//æå°æ»å»å
; 12439: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 340, ä¸´æ¶èµ·å§Y + 134, FONT_PRIO_FRONT, 0, moji, 0);
; 12440: 						sprintf(moji, "%d", pc.def);//æå°é²å¾¡å
; 12441: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 340, ä¸´æ¶èµ·å§Y + 155, FONT_PRIO_FRONT, 0, moji, 0);
; 12442: 						sprintf(moji, "%d", pc.quick);//æå°ææ·å
; 12443: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 340, ä¸´æ¶èµ·å§Y + 176, FONT_PRIO_FRONT, 0, moji, 0);
; 12444: 						sprintf(moji, "%d", pc.charm);//æå°é­åå¼
; 12445: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 340, ä¸´æ¶èµ·å§Y + 196, FONT_PRIO_FRONT, 0, moji, 0);
; 12446: 
; 12447: 						//æå°åçº§ç¹æ°
; 12448: 						sprintf(moji, "%d", StatusUpPoint);
; 12449: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 388, ä¸´æ¶èµ·å§Y + 230, FONT_PRIO_FRONT, 1, moji, 0);
; 12450: 						if (StatusUpPoint != 0) {
; 12451: 							//å ä½æé®
; 12452: 							statusWndFontNo[2] = StockDispBuffer(ä¸´æ¶èµ·å§X + 373, ä¸´æ¶èµ·å§Y + 257, DISP_PRIO_IME3, 52047, 2);
; 12453: 							//å æ»æé®
; 12454: 							statusWndFontNo[3] = StockDispBuffer(ä¸´æ¶èµ·å§X + 477, ä¸´æ¶èµ·å§Y + 257, DISP_PRIO_IME3, 52047, 2);
; 12455: 							//å é²æé®
; 12456: 							statusWndFontNo[4] = StockDispBuffer(ä¸´æ¶èµ·å§X + 373, ä¸´æ¶èµ·å§Y + 278, DISP_PRIO_IME3, 52047, 2);
; 12457: 							//å ææé®
; 12458: 							statusWndFontNo[5] = StockDispBuffer(ä¸´æ¶èµ·å§X + 477, ä¸´æ¶èµ·å§Y + 278, DISP_PRIO_IME3, 52047, 2);
; 12459: 						}
; 12460: 
; 12461: 						//æå°å ç¹ç¶åµ
; 12462: 						sprintf(moji, "%d", pc.vital);
; 12463: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 248, FONT_PRIO_FRONT, 0, moji, 0);
; 12464: 						sprintf(moji, "%d", pc.str);
; 12465: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 429, ä¸´æ¶èµ·å§Y + 248, FONT_PRIO_FRONT, 0, moji, 0); y += 20;
; 12466: 
; 12467: 						sprintf(moji, "%d", pc.tgh);
; 12468: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 270, FONT_PRIO_FRONT, 0, moji, 0);
; 12469: 						sprintf(moji, "%d", pc.dex);
; 12470: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 429, ä¸´æ¶èµ·å§Y + 270, FONT_PRIO_FRONT, 0, moji, 0); y += 20;
; 12471: 
; 12472: 						//æå°å°æ°´ç«é£å±æ§
; 12473: 						int Xåç§»é = 74;
; 12474: 						int Yåç§»é = 296;
; 12475: 						if (pc.earth > 0) {
; 12476: 							int å±æ§é = (int)(pc.earth * 0.6);
; 12477: 							StockBoxDispBuffer(ä¸´æ¶èµ·å§X + Xåç§»é, ä¸´æ¶èµ·å§Y + Yåç§»é, ä¸´æ¶èµ·å§X + Xåç§»é + å±æ§é, ä¸´æ¶èµ·å§Y + Yåç§»é + 10, DISP_PRIO_IME3, SYSTEM_PAL_GREEN, 1);
; 12478: 						}
; 12479: 						Yåç§»é += 18;
; 12480: 						if (pc.water > 0) {
; 12481: 							int å±æ§é = (int)(pc.water * 0.6);
; 12482: 							StockBoxDispBuffer(ä¸´æ¶èµ·å§X + Xåç§»é, ä¸´æ¶èµ·å§Y + Yåç§»é, ä¸´æ¶èµ·å§X + Xåç§»é + å±æ§é, ä¸´æ¶èµ·å§Y + Yåç§»é + 10, DISP_PRIO_IME3, SYSTEM_PAL_AQUA, 1);
; 12483: 						}
; 12484: 						Yåç§»é += 18;
; 12485: 						if (pc.fire > 0) {
; 12486: 							int å±æ§é = (int)(pc.fire * 0.6);
; 12487: 							StockBoxDispBuffer(ä¸´æ¶èµ·å§X + Xåç§»é, ä¸´æ¶èµ·å§Y + Yåç§»é, ä¸´æ¶èµ·å§X + Xåç§»é + å±æ§é, ä¸´æ¶èµ·å§Y + Yåç§»é + 10, DISP_PRIO_IME3, SYSTEM_PAL_RED, 1);
; 12488: 						}
; 12489: 						Yåç§»é += 18;
; 12490: 						if (pc.wind > 0) {
; 12491: 							int å±æ§é = (int)(pc.wind * 0.6);
; 12492: 							StockBoxDispBuffer(ä¸´æ¶èµ·å§X + Xåç§»é, ä¸´æ¶èµ·å§Y + Yåç§»é, ä¸´æ¶èµ·å§X + Xåç§»é + å±æ§é, ä¸´æ¶èµ·å§Y + Yåç§»é + 10, DISP_PRIO_IME3, SYSTEM_PAL_YELLOW, 1);
; 12493: 						}
; 12494: 						Xåç§»é = 140;
; 12495: 						Yåç§»é = 293;
; 12496: 						sprintf(moji, "(%2d)", pc.earth / 10);
; 12497: 						StockFontBuffer(ä¸´æ¶èµ·å§X + Xåç§»é, ä¸´æ¶èµ·å§Y + Yåç§»é, FONT_PRIO_FRONT, 5, moji, 0);
; 12498: 						Yåç§»é += 18;
; 12499: 						sprintf(moji, "(%2d)", pc.water / 10);
; 12500: 						StockFontBuffer(ä¸´æ¶èµ·å§X + Xåç§»é, ä¸´æ¶èµ·å§Y + Yåç§»é, FONT_PRIO_FRONT, 1, moji, 0);
; 12501: 						Yåç§»é += 18;
; 12502: 						sprintf(moji, "(%2d)", pc.fire / 10);
; 12503: 						StockFontBuffer(ä¸´æ¶èµ·å§X + Xåç§»é, ä¸´æ¶èµ·å§Y + Yåç§»é, FONT_PRIO_FRONT, 6, moji, 0);
; 12504: 						Yåç§»é += 18;
; 12505: 						sprintf(moji, "(%2d)", pc.wind / 10);
; 12506: 						StockFontBuffer(ä¸´æ¶èµ·å§X + Xåç§»é, ä¸´æ¶èµ·å§Y + Yåç§»é, FONT_PRIO_FRONT, 4, moji, 0);
; 12507: 
; 12508: 
; 12509: 						//ç»äººç©å¤´å
; 12510: 						StockDispBuffer(ä¸´æ¶èµ·å§X + 75, ä¸´æ¶èµ·å§Y + 84, DISP_PRIO_IME3, pc.faceGraNo, 0);
; 12511: 						//ç»äººç©å¨ç»
; 12512: 						if (pActPet == NULL) {
; 12513: 							pActPet = MakeAnimDisp(ä¸´æ¶èµ·å§X + 145, ä¸´æ¶èµ·å§Y + 260, pc.graNo, ANIM_DISP_PET);
; 12514: 						}
; 12515: 						statusWndFontNo[6] = StockDispBuffer(ä¸´æ¶èµ·å§X + 220, ä¸´æ¶èµ·å§Y + 310, DISP_PRIO_IME3, 52045, 2);
; 12516: #ifdef äººç©ç®è¤
; 12517: 						ç®è¤æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶èµ·å§X + 330, ä¸´æ¶èµ·å§Y + 320, DISP_PRIO_IME3, IMAGE_ç®è¤ç®¡ç, 2);
; 12518: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 12519: 							if (HitDispNo == ç®è¤æé®ç´¢å¼) {
; 12520: 								lssproto_SaMenu_send(sockfd, 4, 1, 0);
; 12521: 								SkillWndflag = false;
; 12522: 								DeathAction(pActMenuWnd);
; 12523: 								pActMenuWnd = NULL;
; 12524: 								DeathAction(pActPet);
; 12525: 								pActPet = NULL;
; 12526: 								//statusWndNo = 3;
; 12527: 								MenuToggleFlag ^= JOY_CTRL_S;
; 12528: 								play_se(203, 320, 240);
; 12529: 							}
; 12530: 						}
; 12531: #endif
; 12532: #ifdef äººç©ç§°å·
; 12533: 						ç§°å·æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶èµ·å§X + 410, ä¸´æ¶èµ·å§Y + 320, DISP_PRIO_IME3, 52073, 2);
; 12534: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 12535: 							if (HitDispNo == ç§°å·æé®ç´¢å¼) {
; 12536: 								lssproto_SaMenu_send(sockfd, 4, 2, 0);
; 12537: 								SkillWndflag = false;
; 12538: 								DeathAction(pActMenuWnd);
; 12539: 								pActMenuWnd = NULL;
; 12540: 								DeathAction(pActPet);
; 12541: 								pActPet = NULL;
; 12542: 								//statusWndNo = 3;
; 12543: 								MenuToggleFlag ^= JOY_CTRL_S;
; 12544: 								play_se(203, 320, 240);
; 12545: 							}
; 12546: 						}
; 12547: 
; 12548: #endif
; 12549: #ifdef äººç©åç¯
; 12550: 						ç¹ææé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶èµ·å§X + 490, ä¸´æ¶èµ·å§Y + 320, DISP_PRIO_IME3, 52072, 2);
; 12551: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 12552: 							if (HitDispNo == ç¹ææé®ç´¢å¼) {
; 12553: 								lssproto_SaMenu_send(sockfd, 4, 3, 0);
; 12554: 								SkillWndflag = false;
; 12555: 								DeathAction(pActMenuWnd);
; 12556: 								pActMenuWnd = NULL;
; 12557: 								DeathAction(pActPet);
; 12558: 								pActPet = NULL;
; 12559: 								//statusWndNo = 3;
; 12560: 								MenuToggleFlag ^= JOY_CTRL_S;
; 12561: 								play_se(203, 320, 240);
; 12562: 							}
; 12563: 						}
; 12564: 
; 12565: #endif
; 12566: 						//ç¶ææç»
; 12567: 						statusWndFontNo[12] = StockDispBuffer(ä¸´æ¶èµ·å§X + 220, ä¸´æ¶èµ·å§Y + 340, DISP_PRIO_IME3, 52046, 2);
; 12568: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 12569: 							if (HitDispNo == statusWndFontNo[12]) {
; 12570: 								SkillWndflag = false;
; 12571: 								DeathAction(pActMenuWnd);
; 12572: 								pActMenuWnd = NULL;
; 12573: 								DeathAction(pActPet);
; 12574: 								pActPet = NULL;
; 12575: 								statusWndNo = 3;
; 12576: 								//MenuToggleFlag ^= JOY_CTRL_S;
; 12577: 								play_se(203, 320, 240);
; 12578: #ifdef _NEWREQUESTPROTOCOL// (ä¸å¯å¼) Syu ADD æ°å¢Protocolè¦æ±ç»é¡¹
; 12579: 								lssproto_RESIST_send(sockfd, "");
; 12580: #endif
; 12581: #ifdef _ALCHEPLUS
; 12582: 								lssproto_ALCHEPLUS_send(sockfd, "");
; 12583: #endif
; 12584: 							}
; 12585: 						}
; 12586: 
; 12587: 					}
; 12588: 					int å³é­æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶å¾æ X + 264, ä¸´æ¶å¾æ Y - 180, DISP_PRIO_IME3, IMAGE_çªå£å³é­X, 1);//å³é­æé®
; 12589: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 12590: 						if (HitDispNo == å³é­æé®ç´¢å¼) {
; 12591: 							DeathAction(pActMenuWnd);
; 12592: 							pActMenuWnd = NULL;
; 12593: 							DeathAction(pActPet);
; 12594: 							pActPet = NULL;
; 12595: 							petWndNo = 0;
; 12596: 							GetKeyInputFocus(&MyChatBuffer);
; 12597: 							MenuToggleFlag ^= JOY_CTRL_S;
; 12598: 							play_se(203, 320, 240);
; 12599: 						}
; 12600: 					}
; 12601: 					StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_MENU, äººç©åºå¾ç¼å·, 1);//æå°äººç©çé¢åºå¾
; 12602: 				}
; 12603: 			}
; 12604: 
; 12605: 
; 12606: #else
; 12607: 			if (pActMenuWnd == NULL) {

  02899	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  028a0	75 7b		 jne	 SHORT $LN770@MenuProc

; 12608: 
; 12609: 				pActMenuWnd = MakeWindowDisp(4, 4, 308, 368, 0, -1);

  028a2	6a ff		 push	 -1
  028a4	6a 00		 push	 0
  028a6	68 70 01 00 00	 push	 368			; 00000170H
  028ab	68 34 01 00 00	 push	 308			; 00000134H
  028b0	6a 04		 push	 4
  028b2	6a 04		 push	 4
  028b4	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  028b9	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  028c0	83 c4 18	 add	 esp, 24			; 00000018H
  028c3	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA, xmm0
  028ca	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  028cf	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+16, xmm0

; 12610: 
; 12611: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndFontNo[i] = -2;
; 12612: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndBtnFlag[i] = 0;
; 12613: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢
; 12614: 				SkillWndflag = false;

  028d6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 0 ; SkillWndflag
  028dd	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+32, xmm0
  028e4	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+48, xmm0
  028eb	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+64, xmm0
  028f2	0f 57 c0	 xorps	 xmm0, xmm0
  028f5	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA, xmm0
  028fc	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+16, xmm0
  02903	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+32, xmm0
  0290a	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+48, xmm0
  02911	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+64, xmm0

; 12615: #endif
; 12616: 			}

  02918	e9 bf 0d 00 00	 jmp	 $LN4741@MenuProc
$LN770@MenuProc:

; 12617: 			else {
; 12618: 				if (pActMenuWnd->hp > 0) {

  0291d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  02922	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  02926	0f 8e b0 0d 00
	00		 jle	 $LN4741@MenuProc

; 12619: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢
; 12620: 					if (SkillWndflag == true) {

  0292c	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?SkillWndflag@@3_NA, 1 ; SkillWndflag
  02933	75 07		 jne	 SHORT $LN773@MenuProc

; 12621: 						SkillWndfunc2();

  02935	e8 00 00 00 00	 call	 ?SkillWndfunc2@@YAXXZ	; SkillWndfunc2

; 12622: 					}

  0293a	eb 1c		 jmp	 SHORT $LN775@MenuProc
$LN773@MenuProc:

; 12623: 					else {
; 12624: 						if (pActSkillMenuWnd != NULL) {

  0293c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActSkillMenuWnd@@3PAUaction@@A ; pActSkillMenuWnd
  02941	85 c0		 test	 eax, eax
  02943	74 13		 je	 SHORT $LN775@MenuProc

; 12625: 							DeathAction(pActSkillMenuWnd);

  02945	50		 push	 eax
  02946	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0294b	83 c4 04	 add	 esp, 4

; 12626: 							pActSkillMenuWnd = NULL;

  0294e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActSkillMenuWnd@@3PAUaction@@A, 0 ; pActSkillMenuWnd
$LN775@MenuProc:

; 12627: 						}
; 12628: 					}
; 12629: 					//ç»èæ¯
; 12630: 
; 12631: 					StockDispBufferç»å¯¹ä½ç½®(pActMenuWnd->x, pActMenuWnd->y, DISP_PRIO_MENU, IMAGE_CHAR_STATUS, 1);

  02958	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0295e	6a 01		 push	 1
  02960	68 98 04 01 00	 push	 66712			; 00010498H
  02965	6a 68		 push	 104			; 00000068H
  02967	ff 72 1c	 push	 DWORD PTR [edx+28]
  0296a	ff 72 18	 push	 DWORD PTR [edx+24]
  0296d	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  02972	83 c4 14	 add	 esp, 20			; 00000014H

; 12632: 
; 12633: #else
; 12634: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_STATUS_WND, 1);
; 12635: #endif
; 12636: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  02975	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0297c	0f 84 b0 02 00
	00		 je	 $LN4737@MenuProc

; 12637: #ifdef äººç©ç®è¤
; 12638: 						if (HitDispNo == statusWndFontNo[17])  //ç®è¤

  02982	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02987	3b 05 44 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+68
  0298d	75 68		 jne	 SHORT $LN777@MenuProc

; 12639: 						{
; 12640: 							lssproto_SaMenu_send(sockfd, 4, 1, 0);

  0298f	6a 00		 push	 0
  02991	6a 01		 push	 1
  02993	6a 04		 push	 4
  02995	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0299b	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send

; 12641: 							SkillWndflag = false;
; 12642: 							DeathAction(pActMenuWnd);

  029a0	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  029a6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 0 ; SkillWndflag
  029ad	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12643: 							pActMenuWnd = NULL;
; 12644: 							DeathAction(pActPet);

  029b2	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  029b8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  029c2	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12645: 							pActPet = NULL;
; 12646: 							//statusWndNo = 3;
; 12647: 							MenuToggleFlag ^= JOY_CTRL_S;

  029c7	81 35 00 00 00
	00 00 00 00 20	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H

; 12648: 							play_se(203, 320, 240);

  029d1	68 f0 00 00 00	 push	 240			; 000000f0H
  029d6	68 40 01 00 00	 push	 320			; 00000140H
  029db	68 cb 00 00 00	 push	 203			; 000000cbH
  029e0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  029ea	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  029ef	83 c4 24	 add	 esp, 36			; 00000024H

; 12649: 						}

  029f2	e9 3b 02 00 00	 jmp	 $LN4737@MenuProc
$LN777@MenuProc:

; 12650: #endif
; 12651: #ifdef äººç©ç§°å·
; 12652: 						else if (HitDispNo == statusWndFontNo[18]) //è±éç§°å·

  029f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  029fc	3b 05 48 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+72
  02a02	75 68		 jne	 SHORT $LN779@MenuProc

; 12653: 						{
; 12654: 							lssproto_SaMenu_send(sockfd, 4, 2, 0);

  02a04	6a 00		 push	 0
  02a06	6a 02		 push	 2
  02a08	6a 04		 push	 4
  02a0a	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  02a10	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send

; 12655: 							SkillWndflag = false;
; 12656: 							DeathAction(pActMenuWnd);

  02a15	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  02a1b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 0 ; SkillWndflag
  02a22	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12657: 							pActMenuWnd = NULL;
; 12658: 							DeathAction(pActPet);

  02a27	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  02a2d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02a37	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12659: 							pActPet = NULL;
; 12660: 							//statusWndNo = 3;
; 12661: 							MenuToggleFlag ^= JOY_CTRL_S;

  02a3c	81 35 00 00 00
	00 00 00 00 20	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H

; 12662: 							play_se(203, 320, 240);

  02a46	68 f0 00 00 00	 push	 240			; 000000f0H
  02a4b	68 40 01 00 00	 push	 320			; 00000140H
  02a50	68 cb 00 00 00	 push	 203			; 000000cbH
  02a55	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  02a5f	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02a64	83 c4 24	 add	 esp, 36			; 00000024H

; 12663: 						}

  02a67	e9 c6 01 00 00	 jmp	 $LN4737@MenuProc
$LN779@MenuProc:

; 12664: #endif
; 12665: #ifdef äººç©åç¯
; 12666: 						else if (HitDispNo == statusWndFontNo[19]) //åç¯

  02a6c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02a71	3b 05 4c 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+76
  02a77	75 68		 jne	 SHORT $LN781@MenuProc

; 12667: 						{
; 12668: 							lssproto_SaMenu_send(sockfd, 4, 3, 0);

  02a79	6a 00		 push	 0
  02a7b	6a 03		 push	 3
  02a7d	6a 04		 push	 4
  02a7f	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  02a85	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send

; 12669: 							SkillWndflag = false;
; 12670: 							DeathAction(pActMenuWnd);

  02a8a	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  02a90	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 0 ; SkillWndflag
  02a97	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12671: 							pActMenuWnd = NULL;
; 12672: 							DeathAction(pActPet);

  02a9c	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  02aa2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02aac	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12673: 							pActPet = NULL;
; 12674: 							//statusWndNo = 3;
; 12675: 							MenuToggleFlag ^= JOY_CTRL_S;

  02ab1	81 35 00 00 00
	00 00 00 00 20	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H

; 12676: 							play_se(203, 320, 240);

  02abb	68 f0 00 00 00	 push	 240			; 000000f0H
  02ac0	68 40 01 00 00	 push	 320			; 00000140H
  02ac5	68 cb 00 00 00	 push	 203			; 000000cbH
  02aca	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  02ad4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02ad9	83 c4 24	 add	 esp, 36			; 00000024H

; 12677: 
; 12678: 						}

  02adc	e9 51 01 00 00	 jmp	 $LN4737@MenuProc
$LN781@MenuProc:

; 12679: #endif
; 12680: 						else if (HitDispNo == statusWndFontNo[0]) { 	// éä¼

  02ae1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02ae6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA
  02aec	75 3b		 jne	 SHORT $LN783@MenuProc

; 12681: 							DeathAction(pActMenuWnd);

  02aee	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  02af4	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12682: 							pActMenuWnd = NULL;
; 12683: 							statusWndNo = 1;
; 12684: 							play_se(202, 320, 240);

  02af9	68 f0 00 00 00	 push	 240			; 000000f0H
  02afe	68 40 01 00 00	 push	 320			; 00000140H
  02b03	68 ca 00 00 00	 push	 202			; 000000caH
  02b08	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02b12	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 1
  02b1c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02b21	83 c4 10	 add	 esp, 16			; 00000010H

; 12685: 						}

  02b24	e9 09 01 00 00	 jmp	 $LN4737@MenuProc
$LN783@MenuProc:

; 12686: 						else if (HitDispNo == statusWndFontNo[1]) {  // å³é­

  02b29	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02b2e	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+4
  02b34	75 3b		 jne	 SHORT $LN785@MenuProc

; 12687: 							DeathAction(pActMenuWnd);

  02b36	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  02b3c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12688: 							pActMenuWnd = NULL;
; 12689: 							MenuToggleFlag ^= JOY_CTRL_S;

  02b41	81 35 00 00 00
	00 00 00 00 20	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H

; 12690: 							play_se(203, 320, 240);

  02b4b	68 f0 00 00 00	 push	 240			; 000000f0H
  02b50	68 40 01 00 00	 push	 320			; 00000140H
  02b55	68 cb 00 00 00	 push	 203			; 000000cbH
  02b5a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02b64	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02b69	83 c4 10	 add	 esp, 16			; 00000010H

; 12691: 						}

  02b6c	e9 c1 00 00 00	 jmp	 $LN4737@MenuProc
$LN785@MenuProc:

; 12692: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢ 
; 12693: 						else if (HitDispNo == statusWndFontNo[12])  //ç¹å»ç¶ææç»

  02b71	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02b76	3b 05 30 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+48
  02b7c	75 58		 jne	 SHORT $LN787@MenuProc

; 12694: 						{
; 12695: 							DeathAction(pActMenuWnd);

  02b7e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  02b84	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12696: 							pActMenuWnd = NULL;
; 12697: 							statusWndNo = 3;
; 12698: 							play_se(202, 320, 240);

  02b89	68 f0 00 00 00	 push	 240			; 000000f0H
  02b8e	68 40 01 00 00	 push	 320			; 00000140H
  02b93	68 ca 00 00 00	 push	 202			; 000000caH
  02b98	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  02ba2	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 3
  02bac	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 12699: #ifdef _NEWREQUESTPROTOCOL			// (ä¸å¯å¼) Syu ADD æ°å¢Protocolè¦æ±ç»é¡¹
; 12700: 							lssproto_RESIST_send(sockfd, "");

  02bb1	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  02bb6	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  02bbc	e8 00 00 00 00	 call	 ?lssproto_RESIST_send@@YAXHPAD@Z ; lssproto_RESIST_send

; 12701: #endif
; 12702: #ifdef _ALCHEPLUS
; 12703: 							lssproto_ALCHEPLUS_send(sockfd, "");

  02bc1	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  02bc6	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  02bcc	e8 00 00 00 00	 call	 ?lssproto_ALCHEPLUS_send@@YAXHPAD@Z ; lssproto_ALCHEPLUS_send
  02bd1	83 c4 20	 add	 esp, 32			; 00000020H

; 12704: #endif
; 12705: 						}

  02bd4	eb 5c		 jmp	 SHORT $LN4737@MenuProc
$LN787@MenuProc:

; 12706: 						else if (HitDispNo == statusWndFontNo[14])   //èä¸æè½

  02bd6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02bdb	3b 05 38 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+56
  02be1	75 4f		 jne	 SHORT $LN4737@MenuProc

; 12707: 						{
; 12708: 							play_se(202, 320, 240);

  02be3	68 f0 00 00 00	 push	 240			; 000000f0H
  02be8	68 40 01 00 00	 push	 320			; 00000140H
  02bed	68 ca 00 00 00	 push	 202			; 000000caH
  02bf2	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 12709: 							SkillWndflag = true;
; 12710: 							MenuToggleFlag &= ~JOY_CTRL_I;
; 12711: 							MenuToggleFlag &= ~JOY_CTRL_M;

  02bf7	81 25 00 00 00
	00 ff ff ff b7	 and	 DWORD PTR ?MenuToggleFlag@@3IA, -1207959553 ; MenuToggleFlag, b7ffffffH
  02c01	83 c4 0c	 add	 esp, 12			; 0000000cH

; 12712: 							if (pActMenuWnd3 != NULL) {

  02c04	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  02c0a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 1 ; SkillWndflag
  02c11	85 c9		 test	 ecx, ecx
  02c13	74 1d		 je	 SHORT $LN4737@MenuProc

; 12713: 								DeathAction(pActMenuWnd3);

  02c15	51		 push	 ecx
  02c16	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12714: 								pActMenuWnd3 = NULL;
; 12715: 								GetKeyInputFocus(&MyChatBuffer);

  02c1b	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  02c20	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  02c2a	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  02c2f	83 c4 08	 add	 esp, 8
$LN4737@MenuProc:

; 12716: 							}
; 12717: 						}
; 12718: #endif
; 12719: 
; 12720: 					}
; 12721: 
; 12722: 					if (HitDispNo == statusWndFontNo[6]) {   	// æ¹åç§°å·

  02c32	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02c37	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+24
  02c3d	0f 85 0b 01 00
	00		 jne	 $LN791@MenuProc

; 12723: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  02c43	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  02c4a	0f 84 e1 00 00
	00		 je	 $LN4740@MenuProc

; 12724: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢
; 12725: 							SkillWndflag = false;
; 12726: 							MenuToggleFlag &= ~JOY_CTRL_I;

  02c50	81 25 00 00 00
	00 ff ff ff f7	 and	 DWORD PTR ?MenuToggleFlag@@3IA, -134217729 ; MenuToggleFlag, f7ffffffH

; 12727: 							//MenuToggleFlag &= ~JOY_CTRL_M;
; 12728: #endif
; 12729: 							if (pActMenuWnd3 == NULL) {

  02c5a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  02c61	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 0 ; SkillWndflag
  02c68	0f 85 86 00 00
	00		 jne	 $LN794@MenuProc

; 12730: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢
; 12731: 								pActMenuWnd3 = MakeWindowDisp(304, 16 + 280 + 48, 272, 88, 0, -1);

  02c6e	6a ff		 push	 -1
  02c70	6a 00		 push	 0
  02c72	6a 58		 push	 88			; 00000058H
  02c74	68 10 01 00 00	 push	 272			; 00000110H
  02c79	68 58 01 00 00	 push	 344			; 00000158H
  02c7e	68 30 01 00 00	 push	 304			; 00000130H
  02c83	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp

; 12732: #else
; 12733: 								pActMenuWnd3 = MakeWindowDisp(4, 16 + 280 + 70, 272, 88, 0, -1);
; 12734: #endif
; 12735: 								play_se(202, 320, 240);

  02c88	68 f0 00 00 00	 push	 240			; 000000f0H
  02c8d	68 40 01 00 00	 push	 320			; 00000140H
  02c92	68 ca 00 00 00	 push	 202			; 000000caH
  02c97	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, eax ; pActMenuWnd3
  02c9c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 12736: 								shougouChange.buffer[0] = NULL;
; 12737: 								shougouChange.cnt = 0;
; 12738: 								shougouChange.cursor = 0;
; 12739: 								shougouChange.len = 12;
; 12740: 								shougouChange.color = 0;
; 12741: 								shougouChange.x = pActMenuWnd3->x + 38;

  02ca1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  02ca7	83 c4 24	 add	 esp, 36			; 00000024H
  02caa	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?shougouChange@@3USTR_BUFFER@@A, 0
  02cb1	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?shougouChange@@3USTR_BUFFER@@A+263, 0
  02cb8	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?shougouChange@@3USTR_BUFFER@@A+265, 0
  02cbf	c6 05 04 01 00
	00 0c		 mov	 BYTE PTR ?shougouChange@@3USTR_BUFFER@@A+260, 12 ; 0000000cH
  02cc6	c6 05 08 01 00
	00 00		 mov	 BYTE PTR ?shougouChange@@3USTR_BUFFER@@A+264, 0
  02ccd	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  02cd0	83 c0 26	 add	 eax, 38			; 00000026H
  02cd3	a3 0c 01 00 00	 mov	 DWORD PTR ?shougouChange@@3USTR_BUFFER@@A+268, eax

; 12742: 								shougouChange.y = pActMenuWnd3->y + 25;

  02cd8	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  02cdb	83 c0 19	 add	 eax, 25			; 00000019H

; 12743: 								shougouChange.fontPrio = FONT_PRIO_FRONT;

  02cde	c7 05 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?shougouChange@@3USTR_BUFFER@@A+284, 1
  02ce8	a3 10 01 00 00	 mov	 DWORD PTR ?shougouChange@@3USTR_BUFFER@@A+272, eax

; 12751: 							}
; 12752: 							statusWndBtnFlag[6] = TRUE;

  02ced	b8 01 00 00 00	 mov	 eax, 1
  02cf2	eb 42		 jmp	 SHORT $LN793@MenuProc
$LN794@MenuProc:

; 12744: 								statusWndBtnFlag[6] = TRUE;
; 12745: 							}
; 12746: 							else {
; 12747: 								DeathAction(pActMenuWnd3);

  02cf4	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  02cfa	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12748: 								pActMenuWnd3 = NULL;
; 12749: 								GetKeyInputFocus(&MyChatBuffer);

  02cff	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  02d04	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  02d0e	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 12750: 								play_se(203, 320, 240);

  02d13	68 f0 00 00 00	 push	 240			; 000000f0H
  02d18	68 40 01 00 00	 push	 320			; 00000140H
  02d1d	68 cb 00 00 00	 push	 203			; 000000cbH
  02d22	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02d27	83 c4 14	 add	 esp, 20			; 00000014H

; 12751: 							}
; 12752: 							statusWndBtnFlag[6] = TRUE;

  02d2a	b8 01 00 00 00	 mov	 eax, 1
  02d2f	eb 05		 jmp	 SHORT $LN793@MenuProc
$LN4740@MenuProc:

; 12723: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  02d31	a1 18 00 00 00	 mov	 eax, DWORD PTR ?statusWndBtnFlag@@3PAHA+24
$LN793@MenuProc:

; 12753: 						}
; 12754: 						if (mouse.state & MOUSE_LEFT_CRICK && statusWndBtnFlag[6] == TRUE) {

  02d36	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  02d3d	74 0f		 je	 SHORT $LN791@MenuProc

; 12755: 							statusWndBtnFlag[6] = TRUE;

  02d3f	c7 05 18 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusWndBtnFlag@@3PAHA+24, 1
  02d49	83 f8 01	 cmp	 eax, 1
  02d4c	74 0a		 je	 SHORT $LN792@MenuProc
$LN791@MenuProc:

; 12756: 						}
; 12757: 						else {
; 12758: 							statusWndBtnFlag[6] = FALSE;
; 12759: 						}
; 12760: 					}
; 12761: 					else {
; 12762: 						statusWndBtnFlag[6] = FALSE;
; 12763: 					}
; 12764: 					if (StatusUpPoint != 0) {

  02d4e	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?statusWndBtnFlag@@3PAHA+24, 0
$LN792@MenuProc:
  02d58	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?StatusUpPoint@@3HA, 0 ; StatusUpPoint
  02d5f	0f 84 ab 00 00
	00		 je	 $LN82@MenuProc

; 12765: 						for (i = 2; i < 6; i++) {

  02d65	b9 04 00 00 00	 mov	 ecx, 4
  02d6a	33 ff		 xor	 edi, edi
  02d6c	33 f6		 xor	 esi, esi
  02d6e	89 8d fc b9 ff
	ff		 mov	 DWORD PTR tv38926[ebp], ecx
  02d74	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL83@MenuProc:

; 12766: 							if (HitDispNo == statusWndFontNo[i]) {

  02d80	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  02d85	3b 86 08 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA[esi+8]
  02d8b	75 68		 jne	 SHORT $LN799@MenuProc

; 12767: 								if (mouse.onceState & MOUSE_LEFT_CRICK) {

  02d8d	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  02d94	74 46		 je	 SHORT $LN4075@MenuProc

; 12768: 									if (bNewServer)

  02d96	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  02d9d	57		 push	 edi
  02d9e	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  02da4	74 07		 je	 SHORT $LN802@MenuProc

; 12769: 										lssproto_SKUP_send(sockfd, i - 2);

  02da6	e8 00 00 00 00	 call	 ?lssproto_SKUP_send@@YAXHH@Z ; lssproto_SKUP_send
  02dab	eb 05		 jmp	 SHORT $LN5101@MenuProc
$LN802@MenuProc:

; 12770: 									else
; 12771: 										old_lssproto_SKUP_send(sockfd, i - 2);

  02dad	e8 00 00 00 00	 call	 ?old_lssproto_SKUP_send@@YAXHH@Z ; old_lssproto_SKUP_send
$LN5101@MenuProc:

; 12772: 
; 12773: 
; 12774: #ifndef _CHAR_PROFESSION			// WON ADD äººç©èä¸
; 12775: 									StatusUpPoint--;
; 12776: #endif
; 12777: 
; 12778: 									play_se(211, 320, 240);

  02db2	83 c4 08	 add	 esp, 8
  02db5	68 f0 00 00 00	 push	 240			; 000000f0H
  02dba	68 40 01 00 00	 push	 320			; 00000140H
  02dbf	68 d3 00 00 00	 push	 211			; 000000d3H
  02dc4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  02dc9	8b 8d fc b9 ff
	ff		 mov	 ecx, DWORD PTR tv38926[ebp]
  02dcf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 12779: 
; 12780: 									statusWndBtnFlag[i] = TRUE;

  02dd2	c7 86 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusWndBtnFlag@@3PAHA[esi+8], 1
$LN4075@MenuProc:

; 12781: 								}
; 12782: 								if (mouse.state & MOUSE_LEFT_CRICK && statusWndBtnFlag[i] == TRUE) {

  02ddc	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  02de3	74 10		 je	 SHORT $LN799@MenuProc
  02de5	83 be 08 00 00
	00 01		 cmp	 DWORD PTR ?statusWndBtnFlag@@3PAHA[esi+8], 1
  02dec	75 07		 jne	 SHORT $LN799@MenuProc

; 12783: 									statusWndBtnFlag[i] = TRUE;

  02dee	b8 01 00 00 00	 mov	 eax, 1

; 12784: 								}

  02df3	eb 02		 jmp	 SHORT $LN81@MenuProc
$LN799@MenuProc:

; 12765: 						for (i = 2; i < 6; i++) {

  02df5	33 c0		 xor	 eax, eax
$LN81@MenuProc:
  02df7	89 86 08 00 00
	00		 mov	 DWORD PTR ?statusWndBtnFlag@@3PAHA[esi+8], eax
  02dfd	47		 inc	 edi
  02dfe	83 c6 04	 add	 esi, 4
  02e01	83 e9 01	 sub	 ecx, 1
  02e04	89 8d fc b9 ff
	ff		 mov	 DWORD PTR tv38926[ebp], ecx
  02e0a	0f 85 70 ff ff
	ff		 jne	 $LL83@MenuProc
$LN82@MenuProc:

; 12785: 								else {
; 12786: 									statusWndBtnFlag[i] = FALSE;
; 12787: 								}
; 12788: 							}
; 12789: 							else {
; 12790: 								statusWndBtnFlag[i] = FALSE;
; 12791: 							}
; 12792: 						}
; 12793: 					}
; 12794: 					if (pActMenuWnd != NULL) {

  02e10	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  02e16	85 d2		 test	 edx, edx
  02e18	0f 84 be 08 00
	00		 je	 $LN4741@MenuProc

; 12795: #define PET_WND_ATTR_X 159
; 12796: #define PET_WND_ATTR_Y 5
; 12797: 						int x2;
; 12798: 						x = pActMenuWnd->x;// + 20;

  02e1e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]

; 12799: 						y = pActMenuWnd->y;// + 24;

  02e21	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  02e24	89 85 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], eax

; 12800: 						CenteringStr(pc.name, moji, CHAR_NAME_LEN);

  02e2a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02e30	6a 10		 push	 16			; 00000010H
  02e32	50		 push	 eax
  02e33	68 70 00 00 00	 push	 OFFSET ?pc@@3UPC@@A+112
  02e38	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  02e3e	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 12801: 						StockFontBuffer(x + 82, y + 60, FONT_PRIO_FRONT, 0, moji, 0);//æå°åå­

  02e43	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  02e49	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  02e4f	6a 00		 push	 0
  02e51	51		 push	 ecx
  02e52	6a 00		 push	 0
  02e54	6a 01		 push	 1
  02e56	8d 77 3c	 lea	 esi, DWORD PTR [edi+60]
  02e59	83 c0 52	 add	 eax, 82			; 00000052H
  02e5c	56		 push	 esi
  02e5d	50		 push	 eax
  02e5e	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv38632[ebp], eax
  02e64	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12802: 
; 12803: 						sprintf(moji, "%d (%d)", pc.level, pc.transmigration);

  02e69	0f bf 05 f4 50
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+20724
  02e70	50		 push	 eax
  02e71	ff 35 38 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+56
  02e77	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02e7d	68 00 00 00 00	 push	 OFFSET ??_C@_07DONLOGLK@?$CFd?5?$CI?$CFd?$CJ@
  02e82	50		 push	 eax
  02e83	e8 00 00 00 00	 call	 _sprintf

; 12804: 						StockFontBuffer(x + 235, y + 60, FONT_PRIO_FRONT, 0, moji, 0);

  02e88	6a 00		 push	 0
  02e8a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02e90	50		 push	 eax
  02e91	6a 00		 push	 0
  02e93	6a 01		 push	 1
  02e95	56		 push	 esi
  02e96	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  02e9c	8d 86 eb 00 00
	00		 lea	 eax, DWORD PTR [esi+235]
  02ea2	50		 push	 eax
  02ea3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  02ea8	83 c4 4c	 add	 esp, 76			; 0000004cH

; 12805: 
; 12806: 						StockDispBufferç»å¯¹ä½ç½®(x+ 238, y + 91, DISP_PRIO_IME3, pc.faceGraNo, 0);//æå°å¤´å

  02eab	8d 47 5b	 lea	 eax, DWORD PTR [edi+91]
  02eae	6a 00		 push	 0
  02eb0	ff 35 04 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+4
  02eb6	6a 69		 push	 105			; 00000069H
  02eb8	50		 push	 eax
  02eb9	8d 86 ee 00 00
	00		 lea	 eax, DWORD PTR [esi+238]
  02ebf	50		 push	 eax
  02ec0	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ

; 12807: 
; 12808: 						if(pc.maxExp <= 0 )

  02ec5	8b 0d 34 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+52
  02ecb	83 c4 14	 add	 esp, 20			; 00000014H
  02ece	85 c9		 test	 ecx, ecx
  02ed0	7f 18		 jg	 SHORT $LN807@MenuProc

; 12809: 							CenteringStr("MAX", moji, CHAR_NAME_LEN);

  02ed2	6a 10		 push	 16			; 00000010H
  02ed4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02eda	50		 push	 eax
  02edb	68 00 00 00 00	 push	 OFFSET ??_C@_03LEPPJAKI@MAX@
  02ee0	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr
  02ee5	83 c4 0c	 add	 esp, 12			; 0000000cH
  02ee8	eb 37		 jmp	 SHORT $LN808@MenuProc
$LN807@MenuProc:

; 12810: 						else
; 12811: 							sprintf(moji, "%d (%.2f%%)", pc.exp, float(pc.exp) / float(pc.maxExp));

  02eea	a1 30 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+48
  02eef	83 ec 08	 sub	 esp, 8
  02ef2	66 0f 6e c1	 movd	 xmm0, ecx
  02ef6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02ef9	66 0f 6e c8	 movd	 xmm1, eax
  02efd	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02f00	f3 0f 5e c8	 divss	 xmm1, xmm0
  02f04	0f 5a c1	 cvtps2pd xmm0, xmm1
  02f07	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02f0c	50		 push	 eax
  02f0d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02f13	68 00 00 00 00	 push	 OFFSET ??_C@_0M@ODJBNPN@?$CFd?5?$CI?$CF?42f?$CF?$CF?$CJ@
  02f18	50		 push	 eax
  02f19	e8 00 00 00 00	 call	 _sprintf
  02f1e	83 c4 14	 add	 esp, 20			; 00000014H
$LN808@MenuProc:

; 12812: 
; 12813: 						StockFontBuffer(x + 82, y + 95, FONT_PRIO_FRONT, 0, moji, 0);//æå°æµç§°

  02f21	6a 00		 push	 0
  02f23	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02f29	50		 push	 eax
  02f2a	6a 00		 push	 0
  02f2c	6a 01		 push	 1
  02f2e	8d 47 5f	 lea	 eax, DWORD PTR [edi+95]
  02f31	50		 push	 eax
  02f32	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  02f35	50		 push	 eax
  02f36	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12814: 
; 12815: 						sprintf(moji, "%-4d", pc.hp);

  02f3b	ff 35 10 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+16
  02f41	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02f47	68 00 00 00 00	 push	 OFFSET ??_C@_04EAFHDMJK@?$CF?94d@
  02f4c	50		 push	 eax
  02f4d	e8 00 00 00 00	 call	 _sprintf

; 12816: 						StockFontBuffer(x + 82, y + 121, FONT_PRIO_FRONT, 0, moji, 0);

  02f52	6a 00		 push	 0
  02f54	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02f5a	50		 push	 eax
  02f5b	6a 00		 push	 0
  02f5d	6a 01		 push	 1
  02f5f	8d 77 79	 lea	 esi, DWORD PTR [edi+121]
  02f62	56		 push	 esi
  02f63	ff b5 00 ba ff
	ff		 push	 DWORD PTR tv38632[ebp]
  02f69	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12817: 						sprintf(moji, "%-4d", pc.maxHp);

  02f6e	ff 35 14 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+20
  02f74	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02f7a	68 00 00 00 00	 push	 OFFSET ??_C@_04EAFHDMJK@?$CF?94d@
  02f7f	50		 push	 eax
  02f80	e8 00 00 00 00	 call	 _sprintf

; 12818: 						StockFontBuffer(x + 151, y + 121, FONT_PRIO_FRONT, 0, moji, 0);

  02f85	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  02f8b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02f91	83 c4 48	 add	 esp, 72			; 00000048H
  02f94	81 c7 97 00 00
	00		 add	 edi, 151		; 00000097H
  02f9a	6a 00		 push	 0
  02f9c	50		 push	 eax
  02f9d	6a 00		 push	 0
  02f9f	6a 01		 push	 1
  02fa1	56		 push	 esi
  02fa2	57		 push	 edi
  02fa3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12819: 
; 12820: 						sprintf(moji, "%-3d", pc.mp);

  02fa8	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  02fae	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02fb4	68 00 00 00 00	 push	 OFFSET ??_C@_04EFBICKBP@?$CF?93d@
  02fb9	50		 push	 eax
  02fba	e8 00 00 00 00	 call	 _sprintf

; 12821: 						StockFontBuffer(x + 82, y + 147, FONT_PRIO_FRONT, 0, moji, 0);

  02fbf	8b b5 04 ba ff
	ff		 mov	 esi, DWORD PTR _y$11$[ebp]
  02fc5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02fcb	6a 00		 push	 0
  02fcd	50		 push	 eax
  02fce	6a 00		 push	 0
  02fd0	6a 01		 push	 1
  02fd2	81 c6 93 00 00
	00		 add	 esi, 147		; 00000093H
  02fd8	56		 push	 esi
  02fd9	ff b5 00 ba ff
	ff		 push	 DWORD PTR tv38632[ebp]
  02fdf	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12822: 						sprintf(moji, "100");

  02fe4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02fea	68 00 00 00 00	 push	 OFFSET ??_C@_03GNABGMEE@100@
  02fef	50		 push	 eax
  02ff0	e8 00 00 00 00	 call	 _sprintf
  02ff5	83 c4 44	 add	 esp, 68			; 00000044H

; 12823: 						StockFontBuffer(x + 151, y + 147, FONT_PRIO_FRONT, 0, moji, 0);

  02ff8	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  02ffe	6a 00		 push	 0
  03000	50		 push	 eax
  03001	6a 00		 push	 0
  03003	6a 01		 push	 1
  03005	56		 push	 esi
  03006	57		 push	 edi
  03007	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12824: 
; 12825: 						sprintf(moji, "%-4d", pc.atk);

  0300c	ff 35 3c 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+60
  03012	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03018	68 00 00 00 00	 push	 OFFSET ??_C@_04EAFHDMJK@?$CF?94d@
  0301d	50		 push	 eax
  0301e	e8 00 00 00 00	 call	 _sprintf

; 12826: 						StockFontBuffer(x + 82, y + 180, FONT_PRIO_FRONT, 0, moji, 0);

  03023	8b b5 04 ba ff
	ff		 mov	 esi, DWORD PTR _y$11$[ebp]
  03029	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0302f	6a 00		 push	 0
  03031	50		 push	 eax
  03032	6a 00		 push	 0
  03034	81 c6 b4 00 00
	00		 add	 esi, 180		; 000000b4H
  0303a	6a 01		 push	 1
  0303c	56		 push	 esi
  0303d	ff b5 00 ba ff
	ff		 push	 DWORD PTR tv38632[ebp]
  03043	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12827: 
; 12828: 						sprintf(moji, "%-4d", pc.def);

  03048	ff 35 40 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+64
  0304e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03054	68 00 00 00 00	 push	 OFFSET ??_C@_04EAFHDMJK@?$CF?94d@
  03059	50		 push	 eax
  0305a	e8 00 00 00 00	 call	 _sprintf

; 12829: 						StockFontBuffer(x + 178, y + 180, FONT_PRIO_FRONT, 0, moji, 0);

  0305f	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  03065	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  0306b	83 c4 48	 add	 esp, 72			; 00000048H
  0306e	8d 87 b2 00 00
	00		 lea	 eax, DWORD PTR [edi+178]
  03074	6a 00		 push	 0
  03076	51		 push	 ecx
  03077	6a 00		 push	 0
  03079	6a 01		 push	 1
  0307b	56		 push	 esi
  0307c	50		 push	 eax
  0307d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12830: 
; 12831: 						sprintf(moji, "%-4d", pc.quick);

  03082	ff 35 44 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+68
  03088	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0308e	68 00 00 00 00	 push	 OFFSET ??_C@_04EAFHDMJK@?$CF?94d@
  03093	50		 push	 eax
  03094	e8 00 00 00 00	 call	 _sprintf

; 12832: 						StockFontBuffer(x + 273, y + 180, FONT_PRIO_FRONT, 0, moji, 0);

  03099	6a 00		 push	 0
  0309b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  030a1	81 c7 11 01 00
	00		 add	 edi, 273		; 00000111H
  030a7	50		 push	 eax
  030a8	6a 00		 push	 0
  030aa	6a 01		 push	 1
  030ac	56		 push	 esi
  030ad	57		 push	 edi
  030ae	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12833: 
; 12834: 
; 12835: 						StockFontBuffer(x + 82, y + 206, FONT_PRIO_FRONT, 0, "0", 0);

  030b3	8b b5 04 ba ff
	ff		 mov	 esi, DWORD PTR _y$11$[ebp]
  030b9	6a 00		 push	 0
  030bb	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  030c0	6a 00		 push	 0
  030c2	6a 01		 push	 1
  030c4	81 c6 ce 00 00
	00		 add	 esi, 206		; 000000ceH
  030ca	56		 push	 esi
  030cb	ff b5 00 ba ff
	ff		 push	 DWORD PTR tv38632[ebp]
  030d1	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12836: 
; 12837: 						StockFontBuffer(x + 178, y + 206, FONT_PRIO_FRONT, 0, "0", 0);

  030d6	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  030dc	83 c4 54	 add	 esp, 84			; 00000054H
  030df	05 b2 00 00 00	 add	 eax, 178		; 000000b2H
  030e4	6a 00		 push	 0
  030e6	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  030eb	6a 00		 push	 0
  030ed	6a 01		 push	 1
  030ef	56		 push	 esi
  030f0	50		 push	 eax
  030f1	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12838: 
; 12839: 						sprintf(moji, "%-4d", pc.charm);

  030f6	ff 35 48 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+72
  030fc	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03102	68 00 00 00 00	 push	 OFFSET ??_C@_04EAFHDMJK@?$CF?94d@
  03107	50		 push	 eax
  03108	e8 00 00 00 00	 call	 _sprintf

; 12840: 						StockFontBuffer(x + 273, y + 206, FONT_PRIO_FRONT, 0, moji, 0);

  0310d	6a 00		 push	 0
  0310f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03115	50		 push	 eax
  03116	6a 00		 push	 0
  03118	6a 01		 push	 1
  0311a	56		 push	 esi
  0311b	57		 push	 edi
  0311c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12841: 
; 12842: 						StockFontBuffer(x + 92, y + 232, FONT_PRIO_FRONT, 0, "0%", 0);

  03121	8b b5 04 ba ff
	ff		 mov	 esi, DWORD PTR _y$11$[ebp]
  03127	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0312d	81 c6 e8 00 00
	00		 add	 esi, 232		; 000000e8H
  03133	6a 00		 push	 0
  03135	68 00 00 00 00	 push	 OFFSET ??_C@_02MMCGBDJK@0?$CF@
  0313a	6a 00		 push	 0
  0313c	6a 01		 push	 1
  0313e	83 c0 5c	 add	 eax, 92			; 0000005cH
  03141	56		 push	 esi
  03142	50		 push	 eax
  03143	89 85 ec b9 ff
	ff		 mov	 DWORD PTR tv38620[ebp], eax
  03149	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0314e	83 c4 54	 add	 esp, 84			; 00000054H

; 12843: 
; 12844: 						StockFontBuffer(x + 178, y + 232, FONT_PRIO_FRONT, 0, "0%", 0);

  03151	6a 00		 push	 0
  03153	68 00 00 00 00	 push	 OFFSET ??_C@_02MMCGBDJK@0?$CF@
  03158	6a 00		 push	 0
  0315a	6a 01		 push	 1
  0315c	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  03162	05 b2 00 00 00	 add	 eax, 178		; 000000b2H
  03167	56		 push	 esi
  03168	50		 push	 eax
  03169	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12845: 
; 12846: 						StockFontBuffer(x + 273, y + 232, FONT_PRIO_FRONT, 0, "0%", 0);

  0316e	6a 00		 push	 0
  03170	68 00 00 00 00	 push	 OFFSET ??_C@_02MMCGBDJK@0?$CF@
  03175	6a 00		 push	 0
  03177	6a 01		 push	 1
  03179	56		 push	 esi
  0317a	57		 push	 edi
  0317b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  03180	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  03186	83 c4 30	 add	 esp, 48			; 00000030H
  03189	8d 87 12 01 00
	00		 lea	 eax, DWORD PTR [edi+274]
  0318f	89 85 fc b9 ff
	ff		 mov	 DWORD PTR tv38796[ebp], eax

; 12847: 
; 12848: 
; 12849: 						if (pc.earth > 0) {

  03195	8d 8f 05 01 00
	00		 lea	 ecx, DWORD PTR [edi+261]
  0319b	a1 50 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+80
  031a0	85 c0		 test	 eax, eax
  031a2	0f 8e b0 00 00
	00		 jle	 $LN3309@MenuProc

; 12850: 							x2 = (int)(pc.earth * 0.8);
; 12851: 							StockBoxDispBuffer(x + 91 + 0, y + 261 + 0, x + 91 + 0 + x2, y + 261 + 13, DISP_PRIO_IME4, SYSTEM_PAL_GREEN, 1);

  031a8	66 0f 6e c0	 movd	 xmm0, eax
  031ac	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  031b2	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  031b6	6a 01		 push	 1
  031b8	68 fa 00 00 00	 push	 250			; 000000faH
  031bd	8d 50 5b	 lea	 edx, DWORD PTR [eax+91]
  031c0	83 c0 5b	 add	 eax, 91			; 0000005bH
  031c3	6a 6a		 push	 106			; 0000006aH
  031c5	89 95 e0 b9 ff
	ff		 mov	 DWORD PTR $T10[ebp], edx
  031cb	ff b5 fc b9 ff
	ff		 push	 DWORD PTR tv38796[ebp]
  031d1	f2 0f 59 85 e4
	b9 ff ff	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a$1$[ebp]
  031d9	f2 0f 2c f0	 cvttsd2si esi, xmm0
  031dd	03 c6		 add	 eax, esi
  031df	50		 push	 eax
  031e0	51		 push	 ecx
  031e1	52		 push	 edx
  031e2	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 12852: 							StockBoxDispBuffer(x + 91 + 1, y + 261 + 1, x + 91 + 1 + x2, y + 261 + 14, DISP_PRIO_IME3, SYSTEM_PAL_GREEN2, 0);

  031e7	6a 00		 push	 0
  031e9	6a 02		 push	 2
  031eb	6a 69		 push	 105			; 00000069H
  031ed	8d 87 13 01 00
	00		 lea	 eax, DWORD PTR [edi+275]
  031f3	50		 push	 eax
  031f4	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  031fa	8d 8f 06 01 00
	00		 lea	 ecx, DWORD PTR [edi+262]
  03200	83 c0 5c	 add	 eax, 92			; 0000005cH
  03203	03 c6		 add	 eax, esi
  03205	50		 push	 eax
  03206	51		 push	 ecx
  03207	ff b5 ec b9 ff
	ff		 push	 DWORD PTR tv38620[ebp]
  0320d	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 12853: 							StockBoxDispBuffer(x + 91 + 2, y + 261 + 2, x + 91 + 2 + x2, y + 261 + 15, DISP_PRIO_IME3, SYSTEM_PAL_GREEN2, 0);

  03212	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  03218	8d 8f 14 01 00
	00		 lea	 ecx, DWORD PTR [edi+276]
  0321e	6a 00		 push	 0
  03220	6a 02		 push	 2
  03222	8d 97 07 01 00
	00		 lea	 edx, DWORD PTR [edi+263]
  03228	8d 78 5d	 lea	 edi, DWORD PTR [eax+93]
  0322b	83 c0 5d	 add	 eax, 93			; 0000005dH
  0322e	6a 69		 push	 105			; 00000069H
  03230	51		 push	 ecx
  03231	03 c6		 add	 eax, esi
  03233	89 bd f4 b9 ff
	ff		 mov	 DWORD PTR $T17[ebp], edi
  03239	50		 push	 eax
  0323a	52		 push	 edx
  0323b	57		 push	 edi
  0323c	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  03241	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  03247	83 c4 54	 add	 esp, 84			; 00000054H
  0324a	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  03250	8d 8f 05 01 00
	00		 lea	 ecx, DWORD PTR [edi+261]
  03256	eb 18		 jmp	 SHORT $LN809@MenuProc
$LN3309@MenuProc:
  03258	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0325e	8d 50 5b	 lea	 edx, DWORD PTR [eax+91]
  03261	89 95 e0 b9 ff
	ff		 mov	 DWORD PTR $T10[ebp], edx
  03267	8d 50 5d	 lea	 edx, DWORD PTR [eax+93]
  0326a	89 95 f4 b9 ff
	ff		 mov	 DWORD PTR $T17[ebp], edx
$LN809@MenuProc:

; 12854: 						}
; 12855: 
; 12856: 						if (pc.water > 0) {

  03270	8b 35 54 00 00
	00		 mov	 esi, DWORD PTR ?pc@@3UPC@@A+84
  03276	8d 90 e8 00 00
	00		 lea	 edx, DWORD PTR [eax+232]
  0327c	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR tv38798[ebp], edx
  03282	85 f6		 test	 esi, esi
  03284	0f 8e a5 00 00
	00		 jle	 $LN3311@MenuProc

; 12857: 							x2 = (int)(pc.water * 0.8);
; 12858: 							StockBoxDispBuffer(x + 232 + 0, y + 261 + 0, x + 232 + 0 + x2, y + 261 + 13, DISP_PRIO_IME4, SYSTEM_PAL_AQUA, 1);

  0328a	66 0f 6e c6	 movd	 xmm0, esi
  0328e	05 e8 00 00 00	 add	 eax, 232		; 000000e8H
  03293	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  03297	6a 01		 push	 1
  03299	68 fe 00 00 00	 push	 254			; 000000feH
  0329e	6a 6a		 push	 106			; 0000006aH
  032a0	ff b5 fc b9 ff
	ff		 push	 DWORD PTR tv38796[ebp]
  032a6	f2 0f 59 85 e4
	b9 ff ff	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a$1$[ebp]
  032ae	f2 0f 2c f0	 cvttsd2si esi, xmm0
  032b2	03 c6		 add	 eax, esi
  032b4	50		 push	 eax
  032b5	51		 push	 ecx
  032b6	52		 push	 edx
  032b7	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 12859: 							StockBoxDispBuffer(x + 232 + 1, y + 261 + 1, x + 232 + 1 + x2, y + 261 + 14, DISP_PRIO_IME3, SYSTEM_PAL_AQUA2, 0);

  032bc	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  032c2	8d 97 13 01 00
	00		 lea	 edx, DWORD PTR [edi+275]
  032c8	6a 00		 push	 0
  032ca	6a 06		 push	 6
  032cc	6a 69		 push	 105			; 00000069H
  032ce	8d 88 e9 00 00
	00		 lea	 ecx, DWORD PTR [eax+233]
  032d4	05 e9 00 00 00	 add	 eax, 233		; 000000e9H
  032d9	52		 push	 edx
  032da	03 c6		 add	 eax, esi
  032dc	89 8d fc b9 ff
	ff		 mov	 DWORD PTR $T24[ebp], ecx
  032e2	50		 push	 eax
  032e3	8d 87 06 01 00
	00		 lea	 eax, DWORD PTR [edi+262]
  032e9	50		 push	 eax
  032ea	51		 push	 ecx
  032eb	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 12860: 							StockBoxDispBuffer(x + 232 + 2, y + 261 + 2, x + 232 + 2 + x2, y + 261 + 15, DISP_PRIO_IME3, SYSTEM_PAL_AQUA2, 0);

  032f0	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  032f6	8d 97 14 01 00
	00		 lea	 edx, DWORD PTR [edi+276]
  032fc	6a 00		 push	 0
  032fe	6a 06		 push	 6
  03300	6a 69		 push	 105			; 00000069H
  03302	8d 88 ea 00 00
	00		 lea	 ecx, DWORD PTR [eax+234]
  03308	05 ea 00 00 00	 add	 eax, 234		; 000000eaH
  0330d	52		 push	 edx
  0330e	03 c6		 add	 eax, esi
  03310	89 8d 00 ba ff
	ff		 mov	 DWORD PTR $T29[ebp], ecx
  03316	50		 push	 eax
  03317	8d 87 07 01 00
	00		 lea	 eax, DWORD PTR [edi+263]
  0331d	50		 push	 eax
  0331e	51		 push	 ecx
  0331f	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  03324	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0332a	83 c4 54	 add	 esp, 84			; 00000054H
  0332d	eb 18		 jmp	 SHORT $LN810@MenuProc
$LN3311@MenuProc:
  0332f	8d 88 e9 00 00
	00		 lea	 ecx, DWORD PTR [eax+233]
  03335	89 8d fc b9 ff
	ff		 mov	 DWORD PTR $T24[ebp], ecx
  0333b	8d 88 ea 00 00
	00		 lea	 ecx, DWORD PTR [eax+234]
  03341	89 8d 00 ba ff
	ff		 mov	 DWORD PTR $T29[ebp], ecx
$LN810@MenuProc:

; 12861: 						}
; 12862: 
; 12863: 						if (pc.fire > 0) {

  03347	8b 0d 58 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+88
  0334d	8d 97 26 01 00
	00		 lea	 edx, DWORD PTR [edi+294]
  03353	85 c9		 test	 ecx, ecx
  03355	0f 8e 95 00 00
	00		 jle	 $LN3310@MenuProc

; 12864: 							x2 = (int)(pc.fire * 0.8);
; 12865: 							StockBoxDispBuffer(x + 91 + 0, y + 281 + 0, x + 91 + 0 + x2, y + 281 + 13, DISP_PRIO_IME4, SYSTEM_PAL_RED, 1);

  0335b	66 0f 6e c1	 movd	 xmm0, ecx
  0335f	83 c0 5b	 add	 eax, 91			; 0000005bH
  03362	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  03366	6a 01		 push	 1
  03368	68 f9 00 00 00	 push	 249			; 000000f9H
  0336d	6a 6a		 push	 106			; 0000006aH
  0336f	52		 push	 edx
  03370	8d 8f 19 01 00
	00		 lea	 ecx, DWORD PTR [edi+281]
  03376	f2 0f 59 85 e4
	b9 ff ff	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a$1$[ebp]
  0337e	f2 0f 2c f0	 cvttsd2si esi, xmm0
  03382	03 c6		 add	 eax, esi
  03384	50		 push	 eax
  03385	51		 push	 ecx
  03386	ff b5 e0 b9 ff
	ff		 push	 DWORD PTR $T10[ebp]
  0338c	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 12866: 							StockBoxDispBuffer(x + 91 + 1, y + 281 + 1, x + 91 + 1 + x2, y + 281 + 14, DISP_PRIO_IME3, SYSTEM_PAL_RED2, 0);

  03391	6a 00		 push	 0
  03393	6a 01		 push	 1
  03395	6a 69		 push	 105			; 00000069H
  03397	8d 87 27 01 00
	00		 lea	 eax, DWORD PTR [edi+295]
  0339d	50		 push	 eax
  0339e	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  033a4	8d 8f 1a 01 00
	00		 lea	 ecx, DWORD PTR [edi+282]
  033aa	83 c0 5c	 add	 eax, 92			; 0000005cH
  033ad	03 c6		 add	 eax, esi
  033af	50		 push	 eax
  033b0	51		 push	 ecx
  033b1	ff b5 ec b9 ff
	ff		 push	 DWORD PTR tv38620[ebp]
  033b7	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 12867: 							StockBoxDispBuffer(x + 91 + 2, y + 281 + 2, x + 91 + 2 + x2, y + 281 + 15, DISP_PRIO_IME3, SYSTEM_PAL_RED2, 0);

  033bc	6a 00		 push	 0
  033be	6a 01		 push	 1
  033c0	6a 69		 push	 105			; 00000069H
  033c2	8d 87 28 01 00
	00		 lea	 eax, DWORD PTR [edi+296]
  033c8	50		 push	 eax
  033c9	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  033cf	8d 8f 1b 01 00
	00		 lea	 ecx, DWORD PTR [edi+283]
  033d5	83 c0 5d	 add	 eax, 93			; 0000005dH
  033d8	03 c6		 add	 eax, esi
  033da	50		 push	 eax
  033db	51		 push	 ecx
  033dc	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR $T17[ebp]
  033e2	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  033e7	83 c4 54	 add	 esp, 84			; 00000054H
  033ea	8d 97 26 01 00
	00		 lea	 edx, DWORD PTR [edi+294]
$LN3310@MenuProc:

; 12868: 						}
; 12869: 
; 12870: 						if (pc.wind > 0) {

  033f0	a1 5c 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+92
  033f5	8d 8f 19 01 00
	00		 lea	 ecx, DWORD PTR [edi+281]
  033fb	85 c0		 test	 eax, eax
  033fd	0f 8e 95 00 00
	00		 jle	 $LN812@MenuProc

; 12871: 							x2 = (int)(pc.wind * 0.8);
; 12872: 							StockBoxDispBuffer(x + 232 + 0, y + 281 + 0, x + 232 + 0 + x2, y + 281 + 13, DISP_PRIO_IME4, SYSTEM_PAL_YELLOW, 1);

  03403	66 0f 6e c0	 movd	 xmm0, eax
  03407	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0340d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  03411	6a 01		 push	 1
  03413	68 fb 00 00 00	 push	 251			; 000000fbH
  03418	6a 6a		 push	 106			; 0000006aH
  0341a	52		 push	 edx
  0341b	05 e8 00 00 00	 add	 eax, 232		; 000000e8H
  03420	f2 0f 59 85 e4
	b9 ff ff	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a$1$[ebp]
  03428	f2 0f 2c f0	 cvttsd2si esi, xmm0
  0342c	03 c6		 add	 eax, esi
  0342e	50		 push	 eax
  0342f	51		 push	 ecx
  03430	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv38798[ebp]
  03436	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 12873: 							StockBoxDispBuffer(x + 232 + 1, y + 281 + 1, x + 232 + 1 + x2, y + 281 + 14, DISP_PRIO_IME3, SYSTEM_PAL_YELLOW2, 0);

  0343b	6a 00		 push	 0
  0343d	6a 03		 push	 3
  0343f	6a 69		 push	 105			; 00000069H
  03441	8d 87 27 01 00
	00		 lea	 eax, DWORD PTR [edi+295]
  03447	50		 push	 eax
  03448	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0344e	05 e9 00 00 00	 add	 eax, 233		; 000000e9H
  03453	03 c6		 add	 eax, esi
  03455	50		 push	 eax
  03456	8d 87 1a 01 00
	00		 lea	 eax, DWORD PTR [edi+282]
  0345c	50		 push	 eax
  0345d	ff b5 fc b9 ff
	ff		 push	 DWORD PTR $T24[ebp]
  03463	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 12874: 							StockBoxDispBuffer(x + 232 + 2, y + 281 + 2, x + 232 + 2 + x2, y + 281 + 15, DISP_PRIO_IME3, SYSTEM_PAL_YELLOW2, 0);

  03468	6a 00		 push	 0
  0346a	6a 03		 push	 3
  0346c	6a 69		 push	 105			; 00000069H
  0346e	8d 87 28 01 00
	00		 lea	 eax, DWORD PTR [edi+296]
  03474	50		 push	 eax
  03475	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0347b	05 ea 00 00 00	 add	 eax, 234		; 000000eaH
  03480	03 c6		 add	 eax, esi
  03482	50		 push	 eax
  03483	8d 87 1b 01 00
	00		 lea	 eax, DWORD PTR [edi+283]
  03489	50		 push	 eax
  0348a	ff b5 00 ba ff
	ff		 push	 DWORD PTR $T29[ebp]
  03490	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  03495	83 c4 54	 add	 esp, 84			; 00000054H
$LN812@MenuProc:

; 12875: 						}
; 12876: 
; 12877: 						sprintf(moji, "%-d", pc.vital);

  03498	ff 35 20 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+32
  0349e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  034a4	68 00 00 00 00	 push	 OFFSET ??_C@_03HIFDAEPP@?$CF?9d@
  034a9	50		 push	 eax
  034aa	e8 00 00 00 00	 call	 _sprintf

; 12878: 						StockFontBuffer(x + 106, y + 342, FONT_PRIO_FRONT, 0, moji, 0);

  034af	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  034b5	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  034bb	6a 00		 push	 0
  034bd	51		 push	 ecx
  034be	6a 00		 push	 0
  034c0	8d 87 56 01 00
	00		 lea	 eax, DWORD PTR [edi+342]
  034c6	6a 01		 push	 1
  034c8	50		 push	 eax
  034c9	8d 7e 6a	 lea	 edi, DWORD PTR [esi+106]
  034cc	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv38601[ebp], eax
  034d2	57		 push	 edi
  034d3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12879: 						sprintf(moji, "%-d", pc.str);

  034d8	ff 35 24 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+36
  034de	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  034e4	68 00 00 00 00	 push	 OFFSET ??_C@_03HIFDAEPP@?$CF?9d@
  034e9	50		 push	 eax
  034ea	e8 00 00 00 00	 call	 _sprintf

; 12880: 						StockFontBuffer(x + 249, y + 342, FONT_PRIO_FRONT, 0, moji, 0);

  034ef	6a 00		 push	 0
  034f1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  034f7	81 c6 f9 00 00
	00		 add	 esi, 249		; 000000f9H
  034fd	50		 push	 eax
  034fe	6a 00		 push	 0
  03500	6a 01		 push	 1
  03502	ff b5 f8 b9 ff
	ff		 push	 DWORD PTR tv38601[ebp]
  03508	56		 push	 esi
  03509	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0350e	83 c4 48	 add	 esp, 72			; 00000048H

; 12881: 						sprintf(moji, "%-d", pc.tgh);

  03511	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03517	ff 35 28 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+40
  0351d	68 00 00 00 00	 push	 OFFSET ??_C@_03HIFDAEPP@?$CF?9d@
  03522	50		 push	 eax
  03523	e8 00 00 00 00	 call	 _sprintf

; 12882: 						StockFontBuffer(x + 106, y + 362, FONT_PRIO_FRONT, 0, moji, 0);

  03528	8b 85 04 ba ff
	ff		 mov	 eax, DWORD PTR _y$11$[ebp]
  0352e	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  03534	6a 00		 push	 0
  03536	51		 push	 ecx
  03537	6a 00		 push	 0
  03539	05 6a 01 00 00	 add	 eax, 362		; 0000016aH
  0353e	6a 01		 push	 1
  03540	50		 push	 eax
  03541	57		 push	 edi
  03542	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv38598[ebp], eax
  03548	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12883: 						sprintf(moji, "%-d", pc.dex);

  0354d	ff 35 2c 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+44
  03553	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03559	68 00 00 00 00	 push	 OFFSET ??_C@_03HIFDAEPP@?$CF?9d@
  0355e	50		 push	 eax
  0355f	e8 00 00 00 00	 call	 _sprintf

; 12884: 						StockFontBuffer(x + 249, y + 362, FONT_PRIO_FRONT, 0, moji, 0);

  03564	6a 00		 push	 0
  03566	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0356c	50		 push	 eax
  0356d	6a 00		 push	 0
  0356f	6a 01		 push	 1
  03571	ff b5 f8 b9 ff
	ff		 push	 DWORD PTR tv38598[ebp]
  03577	56		 push	 esi
  03578	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12885: 						if (StatusUpPoint != 0) {

  0357d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?StatusUpPoint@@3HA ; StatusUpPoint
  03582	83 c4 48	 add	 esp, 72			; 00000048H
  03585	85 c0		 test	 eax, eax
  03587	0f 84 e6 00 00
	00		 je	 $LN3312@MenuProc

; 12886: 							//StockDispBuffer( ( ( WINDOW_DISP *)pActMenuWnd->pYobi )->mx + 14 , ( ( WINDOW_DISP *)pActMenuWnd->pYobi )->my + 67 , DISP_PRIO_IME3, CG_STATUS_WND_LV_UP_POINT, 0 );//åçº§ç¹
; 12887: 							sprintf(moji, "%-d", StatusUpPoint);

  0358d	50		 push	 eax
  0358e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03594	68 00 00 00 00	 push	 OFFSET ??_C@_03HIFDAEPP@?$CF?9d@
  03599	50		 push	 eax
  0359a	e8 00 00 00 00	 call	 _sprintf

; 12888: 							StockFontBuffer(x + 232, y + 316, FONT_PRIO_FRONT, FONT_PAL_YELLOW, moji, 0);

  0359f	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  035a5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  035ab	6a 00		 push	 0
  035ad	50		 push	 eax
  035ae	6a 04		 push	 4
  035b0	6a 01		 push	 1
  035b2	8d 87 3c 01 00
	00		 lea	 eax, DWORD PTR [edi+316]
  035b8	50		 push	 eax
  035b9	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv38798[ebp]
  035bf	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12889: 
; 12890: 							{
; 12891: 								statusWndFontNo[2] = StockDispBufferç»å¯¹ä½ç½®(x + 140, y + 342, DISP_PRIO_IME3, CG_STATUS_WND_UP_BTN_UP + statusWndBtnFlag[2], 2);

  035c4	a1 08 00 00 00	 mov	 eax, DWORD PTR ?statusWndBtnFlag@@3PAHA+8
  035c9	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  035cf	05 dc 65 00 00	 add	 eax, 26076		; 000065dcH
  035d4	6a 02		 push	 2
  035d6	50		 push	 eax
  035d7	6a 69		 push	 105			; 00000069H
  035d9	8d 87 56 01 00
	00		 lea	 eax, DWORD PTR [edi+342]
  035df	81 c6 8c 00 00
	00		 add	 esi, 140		; 0000008cH
  035e5	50		 push	 eax
  035e6	56		 push	 esi
  035e7	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ

; 12892: 								statusWndFontNo[3] = StockDispBufferç»å¯¹ä½ç½®(x + 282, y + 342, DISP_PRIO_IME3, CG_STATUS_WND_UP_BTN_UP + statusWndBtnFlag[3], 2);

  035ec	8b 8d 08 ba ff
	ff		 mov	 ecx, DWORD PTR _x$3$[ebp]
  035f2	a3 08 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+8, eax
  035f7	81 c1 1a 01 00
	00		 add	 ecx, 282		; 0000011aH
  035fd	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?statusWndBtnFlag@@3PAHA+12
  03602	6a 02		 push	 2
  03604	05 dc 65 00 00	 add	 eax, 26076		; 000065dcH
  03609	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR $T21[ebp], ecx
  0360f	50		 push	 eax
  03610	6a 69		 push	 105			; 00000069H
  03612	8d 87 56 01 00
	00		 lea	 eax, DWORD PTR [edi+342]
  03618	50		 push	 eax
  03619	51		 push	 ecx
  0361a	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  0361f	83 c4 4c	 add	 esp, 76			; 0000004cH
  03622	a3 0c 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+12, eax

; 12893: 								statusWndFontNo[4] = StockDispBufferç»å¯¹ä½ç½®(x + 140, y + 362, DISP_PRIO_IME3, CG_STATUS_WND_UP_BTN_UP + statusWndBtnFlag[4], 2);

  03627	a1 10 00 00 00	 mov	 eax, DWORD PTR ?statusWndBtnFlag@@3PAHA+16
  0362c	05 dc 65 00 00	 add	 eax, 26076		; 000065dcH
  03631	6a 02		 push	 2
  03633	50		 push	 eax
  03634	6a 69		 push	 105			; 00000069H
  03636	8d 87 6a 01 00
	00		 lea	 eax, DWORD PTR [edi+362]
  0363c	50		 push	 eax
  0363d	56		 push	 esi
  0363e	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  03643	a3 10 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+16, eax

; 12894: 								statusWndFontNo[5] = StockDispBufferç»å¯¹ä½ç½®(x + 282, y + 362, DISP_PRIO_IME3, CG_STATUS_WND_UP_BTN_UP + statusWndBtnFlag[5], 2);

  03648	a1 14 00 00 00	 mov	 eax, DWORD PTR ?statusWndBtnFlag@@3PAHA+20
  0364d	6a 02		 push	 2
  0364f	05 dc 65 00 00	 add	 eax, 26076		; 000065dcH
  03654	50		 push	 eax
  03655	6a 69		 push	 105			; 00000069H
  03657	8d 87 6a 01 00
	00		 lea	 eax, DWORD PTR [edi+362]
  0365d	50		 push	 eax
  0365e	ff b5 f8 b9 ff
	ff		 push	 DWORD PTR $T21[ebp]
  03664	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  03669	83 c4 28	 add	 esp, 40			; 00000028H
  0366c	a3 14 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+20, eax
  03671	eb 06		 jmp	 SHORT $LN813@MenuProc
$LN3312@MenuProc:
  03673	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
$LN813@MenuProc:

; 12895: 							}
; 12896: 
; 12897: 						}
; 12898: 
; 12899: 
; 12900: 						//æå°å ç¹ç¹æ°åå ç¹æé®
; 12901: 						//æ¹åç§°å·æé®
; 12902: 						
; 12903: 
; 12904: 						{
; 12905: 							//statusWndFontNo[ 12 ] = StockDispBuffer(x + 87 , y + 4088, DISP_PRIO_IME3, CG_STATUS_DETAIL, 2 );//æå°ç¶ææç»æé®
; 12906: 							statusWndFontNo[ 6 ] = StockDispBuffer(x + 87, y + 408, DISP_PRIO_IME3, CG_STATUS_WND_SHOUGOU_BTN_UP + statusWndBtnFlag[6], 2);

  03679	a1 18 00 00 00	 mov	 eax, DWORD PTR ?statusWndBtnFlag@@3PAHA+24
  0367e	8d b7 98 01 00
	00		 lea	 esi, DWORD PTR [edi+408]
  03684	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  0368a	05 de 65 00 00	 add	 eax, 26078		; 000065deH
  0368f	6a 02		 push	 2
  03691	50		 push	 eax
  03692	6a 69		 push	 105			; 00000069H
  03694	8d 47 57	 lea	 eax, DWORD PTR [edi+87]
  03697	56		 push	 esi
  03698	50		 push	 eax
  03699	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 12907: 							statusWndFontNo[ 0 ] = StockDispBuffer(x + 184, y + 408, DISP_PRIO_IME3, CG_STATUS_WND_GROUP_BTN, 2);//ìíì°½ ê·¸ë£¹ë²í¼

  0369e	6a 02		 push	 2
  036a0	68 e0 65 00 00	 push	 26080			; 000065e0H
  036a5	6a 69		 push	 105			; 00000069H
  036a7	a3 18 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+24, eax
  036ac	8d 87 b8 00 00
	00		 lea	 eax, DWORD PTR [edi+184]
  036b2	56		 push	 esi
  036b3	50		 push	 eax
  036b4	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 12908: 							statusWndFontNo[ 1 ] = StockDispBuffer(x + 282, y + 408, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);//ìíì°½ ë«ê¸°ë²

  036b9	6a 02		 push	 2
  036bb	68 ba 65 00 00	 push	 26042			; 000065baH
  036c0	6a 69		 push	 105			; 00000069H
  036c2	a3 00 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA, eax
  036c7	8d 87 1a 01 00
	00		 lea	 eax, DWORD PTR [edi+282]
  036cd	56		 push	 esi
  036ce	50		 push	 eax
  036cf	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  036d4	83 c4 3c	 add	 esp, 60			; 0000003cH
  036d7	a3 04 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+4, eax
$LN4741@MenuProc:

; 12909: 						}
; 12910: 
; 12911: 					}
; 12912: 				}
; 12913: 			}
; 12914: 			if (pActMenuWnd3 != NULL) {

  036dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  036e2	85 c9		 test	 ecx, ecx
  036e4	0f 84 7b 0c 00
	00		 je	 $LN5039@MenuProc

; 12915: 				if (pActMenuWnd3->hp > 0) {

  036ea	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  036ee	0f 8e 71 0c 00
	00		 jle	 $LN5039@MenuProc

; 12916: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢
; 12917: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd3->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd3->pYobi)->my, DISP_PRIO_MENU, CG_NAME_CHANGE_WND, 1);

  036f4	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  036f7	6a 01		 push	 1
  036f9	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_NAME_CHANGE_WND@@3HA ; CG_NAME_CHANGE_WND
  036ff	6a 68		 push	 104			; 00000068H
  03701	ff 70 18	 push	 DWORD PTR [eax+24]
  03704	ff 70 14	 push	 DWORD PTR [eax+20]
  03707	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 12918: #else
; 12919: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd3->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd3->pYobi)->my, DISP_PRIO_MENU, CG_NAME_CHANGE_WND, 1);
; 12920: #endif
; 12921: 					GetKeyInputFocus(&shougouChange);

  0370c	68 00 00 00 00	 push	 OFFSET ?shougouChange@@3USTR_BUFFER@@A ; shougouChange
  03711	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  03716	83 c4 18	 add	 esp, 24			; 00000018H

; 12922: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  03719	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  03720	74 55		 je	 SHORT $LN4743@MenuProc

; 12923: 						if (HitDispNo == statusWndFontNo[7]) {

  03722	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  03727	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+28
  0372d	75 05		 jne	 SHORT $LN817@MenuProc

; 12924: 							KeyboardReturn();

  0372f	e8 00 00 00 00	 call	 ?KeyboardReturn@@YAXXZ	; KeyboardReturn
$LN817@MenuProc:

; 12925: 						}
; 12926: 						if (HitDispNo == statusWndFontNo[8]) {

  03734	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  03739	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+32
  0373f	75 36		 jne	 SHORT $LN4743@MenuProc

; 12927: 							DeathAction(pActMenuWnd3);

  03741	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  03747	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12928: 							pActMenuWnd3 = NULL;
; 12929: 							GetKeyInputFocus(&MyChatBuffer);

  0374c	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  03751	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  0375b	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 12930: 							play_se(203, 320, 240);

  03760	68 f0 00 00 00	 push	 240			; 000000f0H
  03765	68 40 01 00 00	 push	 320			; 00000140H
  0376a	68 cb 00 00 00	 push	 203			; 000000cbH
  0376f	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  03774	83 c4 14	 add	 esp, 20			; 00000014H
$LN4743@MenuProc:

; 12931: 						}
; 12932: 					}
; 12933: 					if (pActMenuWnd3 != NULL) {

  03777	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  0377e	0f 84 e1 0b 00
	00		 je	 $LN5039@MenuProc

; 12934: 						StockFontBuffer2(&shougouChange);

  03784	68 00 00 00 00	 push	 OFFSET ?shougouChange@@3USTR_BUFFER@@A ; shougouChange
  03789	e8 00 00 00 00	 call	 ?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z ; StockFontBuffer2

; 12935: 						x = pActMenuWnd3->x + 20;

  0378e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3

; 12936: 						y = pActMenuWnd3->y + 60;
; 12937: 						statusWndFontNo[7] = StockDispBuffer(x + 60, y + 7, DISP_PRIO_IME3, CG_OK_BTN, 2);

  03793	6a 02		 push	 2
  03795	68 ed 65 00 00	 push	 26093			; 000065edH
  0379a	6a 69		 push	 105			; 00000069H
  0379c	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  0379f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  037a2	83 c7 3c	 add	 edi, 60			; 0000003cH
  037a5	83 c1 14	 add	 ecx, 20			; 00000014H
  037a8	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  037ae	89 8d 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], ecx
  037b4	8d 77 07	 lea	 esi, DWORD PTR [edi+7]
  037b7	8d 41 3c	 lea	 eax, DWORD PTR [ecx+60]
  037ba	56		 push	 esi
  037bb	50		 push	 eax
  037bc	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 12938: 						statusWndFontNo[8] = StockDispBuffer(x + 170, y + 7, DISP_PRIO_IME3, CG_CANCEL_BTN, 2);

  037c1	6a 02		 push	 2
  037c3	68 c2 65 00 00	 push	 26050			; 000065c2H
  037c8	a3 1c 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+28, eax
  037cd	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  037d3	6a 69		 push	 105			; 00000069H
  037d5	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  037da	56		 push	 esi
  037db	50		 push	 eax
  037dc	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  037e1	83 c4 2c	 add	 esp, 44			; 0000002cH
  037e4	a3 20 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+32, eax
  037e9	e9 7d 0b 00 00	 jmp	 $LN761@MenuProc
$LN820@MenuProc:

; 12939: 					}
; 12940: 				}
; 12941: 			}
; 12942: #endif
; 12943: 			break;
; 12944: 		case 1:
; 12945: 			if (pActMenuWnd == NULL) {

  037ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  037f5	75 74		 jne	 SHORT $LN821@MenuProc

; 12946: 				pActMenuWnd = MakeWindowDisp(4, 0, 256, 456, 0, -1);

  037f7	6a ff		 push	 -1
  037f9	6a 00		 push	 0
  037fb	68 c8 01 00 00	 push	 456			; 000001c8H
  03800	68 00 01 00 00	 push	 256			; 00000100H
  03805	6a 00		 push	 0
  03807	6a 04		 push	 4
  03809	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0380e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  03815	83 c4 18	 add	 esp, 24			; 00000018H
  03818	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA, xmm0
  0381f	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  03824	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+16, xmm0
  0382b	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+32, xmm0
  03832	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+48, xmm0
  03839	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+64, xmm0
  03840	0f 57 c0	 xorps	 xmm0, xmm0

; 12947: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndFontNo[i] = -2;
; 12948: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndBtnFlag[i] = 0;

  03843	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA, xmm0
  0384a	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+16, xmm0
  03851	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+32, xmm0
  03858	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+48, xmm0
  0385f	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+64, xmm0

; 12949: 			}

  03866	e9 fa 0a 00 00	 jmp	 $LN5039@MenuProc
$LN821@MenuProc:

; 12950: 			else {
; 12951: 				if (pActMenuWnd->hp > 0) {

  0386b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  03871	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  03875	0f 8e ea 0a 00
	00		 jle	 $LN5039@MenuProc

; 12952: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_STATUS_WND_GROUP_WND, 1);

  0387b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0387e	6a 01		 push	 1
  03880	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_STATUS_WND_GROUP_WND@@3HA ; CG_STATUS_WND_GROUP_WND
  03886	6a 68		 push	 104			; 00000068H
  03888	ff 70 18	 push	 DWORD PTR [eax+24]
  0388b	ff 70 14	 push	 DWORD PTR [eax+20]
  0388e	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  03893	83 c4 14	 add	 esp, 20			; 00000014H

; 12953: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  03896	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0389d	0f 84 84 00 00
	00		 je	 $LN4744@MenuProc

; 12954: 						if (HitDispNo == statusWndFontNo[11]) {

  038a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  038a8	3b 05 2c 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+44
  038ae	75 36		 jne	 SHORT $LN825@MenuProc

; 12955: 							DeathAction(pActMenuWnd);

  038b0	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  038b6	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 12956: 							pActMenuWnd = NULL;
; 12957: 							statusWndNo = 0;
; 12958: 							play_se(203, 320, 240);

  038bb	68 f0 00 00 00	 push	 240			; 000000f0H
  038c0	68 40 01 00 00	 push	 320			; 00000140H
  038c5	68 cb 00 00 00	 push	 203			; 000000cbH
  038ca	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  038d4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 0
  038de	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  038e3	83 c4 10	 add	 esp, 16			; 00000010H
$LN825@MenuProc:

; 12959: 						}
; 12960: #ifdef _TEAM_KICKPARTY
; 12961: 						for (i = 0; i < 5; i++) {

  038e6	33 f6		 xor	 esi, esi
  038e8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL92@MenuProc:

; 12962: 							if (HitDispNo == statusWndFontNo[i + 12]) {

  038f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  038f5	3b 04 b5 30 00
	00 00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA[esi*4+48]
  038fc	75 23		 jne	 SHORT $LN90@MenuProc

; 12963: 								lssproto_KTEAM_send(sockfd, i);

  038fe	56		 push	 esi
  038ff	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  03905	e8 00 00 00 00	 call	 ?lssproto_KTEAM_send@@YAXHH@Z ; lssproto_KTEAM_send

; 12964: 								play_se(203, 320, 240);

  0390a	68 f0 00 00 00	 push	 240			; 000000f0H
  0390f	68 40 01 00 00	 push	 320			; 00000140H
  03914	68 cb 00 00 00	 push	 203			; 000000cbH
  03919	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0391e	83 c4 14	 add	 esp, 20			; 00000014H
$LN90@MenuProc:

; 12959: 						}
; 12960: #ifdef _TEAM_KICKPARTY
; 12961: 						for (i = 0; i < 5; i++) {

  03921	46		 inc	 esi
  03922	83 fe 05	 cmp	 esi, 5
  03925	7c c9		 jl	 SHORT $LL92@MenuProc
$LN4744@MenuProc:

; 12965: 							}
; 12966: 						}
; 12967: #endif
; 12968: 					}
; 12969: 					if (pActMenuWnd != NULL) {

  03927	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0392d	85 d2		 test	 edx, edx
  0392f	0f 84 30 0a 00
	00		 je	 $LN5039@MenuProc

; 12970: 						int selectFlag;
; 12971: 						x = pActMenuWnd->x + 17;

  03935	8b 72 18	 mov	 esi, DWORD PTR [edx+24]

; 12972: 						y = pActMenuWnd->y + 25;

  03938	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  0393b	83 c6 11	 add	 esi, 17			; 00000011H
  0393e	83 c7 19	 add	 edi, 25			; 00000019H
  03941	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi

; 12973: 
; 12974: 						if (itemNo != -1 || jujutuNo != -1) selectFlag = 2;

  03947	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?itemNo@@3HA, -1
  0394e	75 13		 jne	 SHORT $LN830@MenuProc
  03950	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?jujutuNo@@3HA, -1

; 12975: 						else selectFlag = FALSE;

  03957	c7 85 00 ba ff
	ff 00 00 00 00	 mov	 DWORD PTR _selectFlag$1$[ebp], 0
  03961	74 0a		 je	 SHORT $LN829@MenuProc
$LN830@MenuProc:

; 12973: 
; 12974: 						if (itemNo != -1 || jujutuNo != -1) selectFlag = 2;

  03963	c7 85 00 ba ff
	ff 02 00 00 00	 mov	 DWORD PTR _selectFlag$1$[ebp], 2
$LN829@MenuProc:

; 12976: 
; 12977: 						CenteringStr(pc.name, moji, CHAR_NAME_LEN);

  0396d	6a 10		 push	 16			; 00000010H
  0396f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03975	50		 push	 eax
  03976	68 70 00 00 00	 push	 OFFSET ?pc@@3UPC@@A+112
  0397b	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 12978: 						statusWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, selectFlag); y += 19;

  03980	ff b5 00 ba ff
	ff		 push	 DWORD PTR _selectFlag$1$[ebp]
  03986	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0398c	50		 push	 eax
  0398d	6a 00		 push	 0
  0398f	6a 01		 push	 1
  03991	57		 push	 edi
  03992	56		 push	 esi
  03993	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12979: 						sprintf(moji, "%4d", pc.mp);

  03998	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  0399e	a3 00 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA, eax
  039a3	83 c7 13	 add	 edi, 19			; 00000013H
  039a6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  039ac	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  039b1	50		 push	 eax
  039b2	e8 00 00 00 00	 call	 _sprintf

; 12980: 						StockFontBuffer(x + 77, y, FONT_PRIO_FRONT, 0, moji, 0);

  039b7	6a 00		 push	 0
  039b9	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  039bf	51		 push	 ecx
  039c0	6a 00		 push	 0
  039c2	6a 01		 push	 1
  039c4	8d 46 4d	 lea	 eax, DWORD PTR [esi+77]
  039c7	57		 push	 edi
  039c8	50		 push	 eax
  039c9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  039ce	83 c4 48	 add	 esp, 72			; 00000048H

; 12981: 						sprintf(moji, "%4d   %4d", pc.hp, pc.maxHp);

  039d1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  039d7	ff 35 14 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+20
  039dd	ff 35 10 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+16
  039e3	68 00 00 00 00	 push	 OFFSET ??_C@_09COLCMPMP@?$CF4d?5?5?5?$CF4d@
  039e8	50		 push	 eax
  039e9	e8 00 00 00 00	 call	 _sprintf

; 12982: 						StockFontBuffer(x + 142, y, FONT_PRIO_FRONT, 0, moji, 0); y += 20;

  039ee	6a 00		 push	 0
  039f0	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  039f6	51		 push	 ecx
  039f7	6a 00		 push	 0
  039f9	6a 01		 push	 1
  039fb	8d 86 8e 00 00
	00		 lea	 eax, DWORD PTR [esi+142]
  03a01	57		 push	 edi
  03a02	50		 push	 eax
  03a03	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  03a08	83 c4 28	 add	 esp, 40			; 00000028H
  03a0b	b8 04 00 00 00	 mov	 eax, OFFSET ?statusWndFontNo@@3PAHA+4
  03a10	83 c7 14	 add	 edi, 20			; 00000014H
  03a13	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR tv39354[ebp], eax
  03a19	89 bd f0 b9 ff
	ff		 mov	 DWORD PTR _y$3$[ebp], edi
  03a1f	bf 65 00 00 00	 mov	 edi, OFFSET ?pet@@3PAUPET@@A+101
$LL95@MenuProc:

; 12984: 							if (pet[i].useFlag == TRUE) {

  03a24	66 83 7f 11 01	 cmp	 WORD PTR [edi+17], 1
  03a29	0f 85 8b 00 00
	00		 jne	 $LN93@MenuProc

; 12985: 								if (pet[i].freeName[0] != NULL) CenteringStr(pet[i].freeName, moji, PET_NAME_LEN);

  03a2f	80 3f 00	 cmp	 BYTE PTR [edi], 0
  03a32	8b c7		 mov	 eax, edi
  03a34	75 03		 jne	 SHORT $LN833@MenuProc

; 12986: 								else CenteringStr(pet[i].name, moji, PET_NAME_LEN);

  03a36	8d 47 ef	 lea	 eax, DWORD PTR [edi-17]
$LN833@MenuProc:

; 12987: 								statusWndFontNo[i + 1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, selectFlag); y += 20;

  03a39	6a 10		 push	 16			; 00000010H
  03a3b	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  03a41	51		 push	 ecx
  03a42	50		 push	 eax
  03a43	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr
  03a48	ff b5 00 ba ff
	ff		 push	 DWORD PTR _selectFlag$1$[ebp]
  03a4e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03a54	50		 push	 eax
  03a55	6a 00		 push	 0
  03a57	6a 01		 push	 1
  03a59	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR _y$3$[ebp]
  03a5f	56		 push	 esi
  03a60	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 12988: 								sprintf(moji, "%4d   %4d", pet[i].hp, pet[i].maxHp);

  03a65	ff 77 a7	 push	 DWORD PTR [edi-89]
  03a68	8b 8d f4 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39354[ebp]
  03a6e	ff 77 a3	 push	 DWORD PTR [edi-93]
  03a71	83 85 f0 b9 ff
	ff 14		 add	 DWORD PTR _y$3$[ebp], 20 ; 00000014H
  03a78	68 00 00 00 00	 push	 OFFSET ??_C@_09COLCMPMP@?$CF4d?5?5?5?$CF4d@
  03a7d	89 01		 mov	 DWORD PTR [ecx], eax
  03a7f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03a85	50		 push	 eax
  03a86	e8 00 00 00 00	 call	 _sprintf

; 12989: 								StockFontBuffer(x + 142, y, FONT_PRIO_FRONT, 0, moji, 0); y += 20;

  03a8b	6a 00		 push	 0
  03a8d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03a93	50		 push	 eax
  03a94	6a 00		 push	 0
  03a96	6a 01		 push	 1
  03a98	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR _y$3$[ebp]
  03a9e	8d 86 8e 00 00
	00		 lea	 eax, DWORD PTR [esi+142]
  03aa4	50		 push	 eax
  03aa5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  03aaa	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR tv39354[ebp]
  03ab0	83 c4 4c	 add	 esp, 76			; 0000004cH
  03ab3	83 85 f0 b9 ff
	ff 14		 add	 DWORD PTR _y$3$[ebp], 20 ; 00000014H
$LN93@MenuProc:

; 12983: 						for (i = 0; i < 5; i++) {

  03aba	83 c0 04	 add	 eax, 4
  03abd	81 c7 78 0b 00
	00		 add	 edi, 2936		; 00000b78H
  03ac3	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR tv39354[ebp], eax
  03ac9	3d 18 00 00 00	 cmp	 eax, OFFSET ?statusWndFontNo@@3PAHA+24
  03ace	0f 8c 50 ff ff
	ff		 jl	 $LL95@MenuProc

; 12990: 							}
; 12991: 						}
; 12992: 						y = 268;
; 12993: 						for (i = 0; i < 5; i++) {

  03ad4	ba 30 00 00 00	 mov	 edx, OFFSET ?statusWndFontNo@@3PAHA+48
  03ad9	b9 00 00 00 00	 mov	 ecx, OFFSET ?party@@3PAUPARTY@@A
  03ade	bf 0c 01 00 00	 mov	 edi, 268		; 0000010cH
  03ae3	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR tv39352[ebp], edx
  03ae9	89 8d 0c ba ff
	ff		 mov	 DWORD PTR tv39351[ebp], ecx
  03aef	90		 npad	 1
$LL98@MenuProc:

; 12994: 							if (pc.id != party[i].id && party[i].useFlag == TRUE) {

  03af0	a1 08 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+8
  03af5	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  03af8	0f 84 de 00 00
	00		 je	 $LN96@MenuProc
  03afe	66 83 39 01	 cmp	 WORD PTR [ecx], 1
  03b02	0f 85 d4 00 00
	00		 jne	 $LN96@MenuProc

; 12995: 								CenteringStr(party[i].name, moji, CHAR_NAME_LEN);

  03b08	6a 10		 push	 16			; 00000010H
  03b0a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03b10	50		 push	 eax
  03b11	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  03b14	50		 push	 eax
  03b15	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 12996: 								statusWndFontNo[i + 6] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, selectFlag); y += 20;

  03b1a	ff b5 00 ba ff
	ff		 push	 DWORD PTR _selectFlag$1$[ebp]
  03b20	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03b26	50		 push	 eax
  03b27	6a 00		 push	 0
  03b29	6a 01		 push	 1
  03b2b	57		 push	 edi
  03b2c	56		 push	 esi
  03b2d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  03b32	8b 8d f0 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39352[ebp]
  03b38	83 c7 14	 add	 edi, 20			; 00000014H

; 12997: #ifdef _TEAM_KICKPARTY
; 12998: 								//andy_add éé¿è¸¢äºº
; 12999: 								statusWndFontNo[i + 12] = StockDispBuffer(x + 187, y - 10, DISP_PRIO_IME3, CG_MAIL_WND_DELETE_BTN, 2);

  03b3b	6a 02		 push	 2
  03b3d	68 e7 65 00 00	 push	 26087			; 000065e7H
  03b42	6a 69		 push	 105			; 00000069H
  03b44	89 41 e8	 mov	 DWORD PTR [ecx-24], eax
  03b47	8d 47 f6	 lea	 eax, DWORD PTR [edi-10]
  03b4a	50		 push	 eax
  03b4b	8d 86 bb 00 00
	00		 lea	 eax, DWORD PTR [esi+187]
  03b51	50		 push	 eax
  03b52	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  03b57	8b 8d f0 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39352[ebp]
  03b5d	89 01		 mov	 DWORD PTR [ecx], eax

; 13000: #endif
; 13001: 								sprintf(moji, "%4d", party[i].mp);

  03b5f	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39351[ebp]
  03b65	ff 70 14	 push	 DWORD PTR [eax+20]
  03b68	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03b6e	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  03b73	50		 push	 eax
  03b74	e8 00 00 00 00	 call	 _sprintf
  03b79	83 c4 44	 add	 esp, 68			; 00000044H

; 13002: 								StockFontBuffer(x + 77, y, FONT_PRIO_FRONT, 0, moji, 0);

  03b7c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03b82	6a 00		 push	 0
  03b84	50		 push	 eax
  03b85	6a 00		 push	 0
  03b87	6a 01		 push	 1
  03b89	8d 46 4d	 lea	 eax, DWORD PTR [esi+77]
  03b8c	57		 push	 edi
  03b8d	50		 push	 eax
  03b8e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 13003: 								sprintf(moji, "%4d %4d", party[i].hp, party[i].maxHp);

  03b93	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39351[ebp]
  03b99	ff 70 0c	 push	 DWORD PTR [eax+12]
  03b9c	ff 70 10	 push	 DWORD PTR [eax+16]
  03b9f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03ba5	68 00 00 00 00	 push	 OFFSET ??_C@_07JANMBDEO@?$CF4d?5?$CF4d@
  03baa	50		 push	 eax
  03bab	e8 00 00 00 00	 call	 _sprintf

; 13004: 								StockFontBuffer(x + 142, y, FONT_PRIO_FRONT, 0, moji, 0); y += 20;

  03bb0	6a 00		 push	 0
  03bb2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  03bb8	50		 push	 eax
  03bb9	6a 00		 push	 0
  03bbb	6a 01		 push	 1
  03bbd	8d 86 8e 00 00
	00		 lea	 eax, DWORD PTR [esi+142]
  03bc3	57		 push	 edi
  03bc4	50		 push	 eax
  03bc5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  03bca	8b 8d 0c ba ff
	ff		 mov	 ecx, DWORD PTR tv39351[ebp]
  03bd0	83 c4 40	 add	 esp, 64			; 00000040H
  03bd3	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR tv39352[ebp]
  03bd9	83 c7 14	 add	 edi, 20			; 00000014H
$LN96@MenuProc:

; 12990: 							}
; 12991: 						}
; 12992: 						y = 268;
; 12993: 						for (i = 0; i < 5; i++) {

  03bdc	83 c2 04	 add	 edx, 4
  03bdf	83 c1 30	 add	 ecx, 48			; 00000030H
  03be2	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR tv39352[ebp], edx
  03be8	89 8d 0c ba ff
	ff		 mov	 DWORD PTR tv39351[ebp], ecx
  03bee	81 fa 44 00 00
	00		 cmp	 edx, OFFSET ?statusWndFontNo@@3PAHA+68
  03bf4	0f 8c f6 fe ff
	ff		 jl	 $LL98@MenuProc

; 13005: 							}
; 13006: 						}
; 13007: 						statusWndFontNo[11] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, 441, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  03bfa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  03bff	6a 02		 push	 2
  03c01	68 bb 65 00 00	 push	 26043			; 000065bbH
  03c06	6a 69		 push	 105			; 00000069H
  03c08	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  03c0b	68 b9 01 00 00	 push	 441			; 000001b9H
  03c10	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  03c16	ff 70 14	 push	 DWORD PTR [eax+20]
  03c19	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  03c1e	83 c4 14	 add	 esp, 20			; 00000014H
  03c21	a3 2c 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+44, eax
  03c26	e9 40 07 00 00	 jmp	 $LN761@MenuProc
$LN835@MenuProc:

; 13008: 					}
; 13009: 				}
; 13010: 			}
; 13011: 			break;
; 13012: #ifdef _NEWPANEL
; 13013: 		case 3:
; 13014: #ifdef _NB_ç¶ææç»è¯¦æ
; 13015: 			if (ResoMode == åè¾¨ç::mode800) {
; 13016: 				ä¸´æ¶å¾æ X = 800 / 2;
; 13017: 				ä¸´æ¶å¾æ Y = 600 / 2;
; 13018: 				ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13019: 				ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13020: 			}
; 13021: 			else if (ResoMode == åè¾¨ç::mode1024) {
; 13022: 				ä¸´æ¶å¾æ X = 1024 / 2;
; 13023: 				ä¸´æ¶å¾æ Y = 768 / 2;
; 13024: 				ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13025: 				ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13026: 			}
; 13027: 			else {
; 13028: 				ä¸´æ¶å¾æ X = 640 / 2;
; 13029: 				ä¸´æ¶å¾æ Y = 480 / 2;
; 13030: 				ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13031: 				ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13032: 			}
; 13033: 			if (pActMenuWnd == NULL) {
; 13034: 				pActMenuWnd = MakeWindowDisp(ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y, ä¸´æ¶èµ·å§X + 568, ä¸´æ¶èµ·å§Y + 358, 0, -1);
; 13035: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndFontNo[i] = -2;
; 13036: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndBtnFlag[i] = 0;
; 13037: 			}
; 13038: 			else {
; 13039: 				if (pActMenuWnd->hp > 0) {
; 13040: 					statusWndFontNo[13] = StockDispBuffer(ä¸´æ¶å¾æ X + 264, ä¸´æ¶å¾æ Y - 180, DISP_PRIO_IME3, IMAGE_çªå£å³é­X, 1);//è¿åæé®
; 13041: 																													//statusWndFontNo[ 13 ] = StockDispBuffer( ä¸´æ¶èµ·å§X+400, ä¸´æ¶èµ·å§Y+400, DISP_PRIO_IME3, CG_TRADE_BACK_BTN, 2 );//è¿åæé®
; 13042: 					static int statusWndFontNoExtNowCur = 2;
; 13043: 					for (int i = 0; i < 3; i++) {
; 13044: 						int ä¸´æ¶ä½ç½®X = 305;
; 13045: 						int ä¸´æ¶ä½ç½®Y = 20;
; 13046: 						int ä¸´æ¶é´é = 75;
; 13047: 						if (MakeHitBox(ä¸´æ¶èµ·å§X + ä¸´æ¶ä½ç½®X + i * ä¸´æ¶é´é, ä¸´æ¶èµ·å§Y + ä¸´æ¶ä½ç½®Y, ä¸´æ¶èµ·å§X + ä¸´æ¶ä½ç½®X + ä¸´æ¶é´é + i*ä¸´æ¶é´é, ä¸´æ¶èµ·å§Y + ä¸´æ¶ä½ç½®Y + 28, DISP_PRIO_IME3) == TRUE) {
; 13048: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13049: 								statusWndFontNoExtNowCur = i;
; 13050: 								play_se(217, 320, 240);
; 13051: 								break;
; 13052: 							}
; 13053: 						}
; 13054: 					}
; 13055: 					if (statusWndFontNoExtNowCur == 0) {//é´å®ä¸
; 13056: 						StockDispBuffer(ä¸´æ¶èµ·å§X + 343, ä¸´æ¶èµ·å§Y + 35, DISP_PRIO_IME3, 52049, 0);
; 13057: 						int tm_count = 0;
; 13058: 						for (; tm_count < 16; tm_count++) {
; 13059: 							statusWndFontNoExt[tm_count] = StockDispBuffer(ä¸´æ¶èµ·å§X + 71 + (tm_count % 8) * 60, ä¸´æ¶èµ·å§Y + 95 + 66 * (int)(tm_count / 8), DISP_PRIO_IME3, iAlchePlusIcon[tm_count], 2);
; 13060: 							StockFontBuffer(ä¸´æ¶èµ·å§X + 55 + (tm_count % 8) * 60, ä¸´æ¶èµ·å§Y + 120 + 66 * (int)(tm_count / 8), FONT_PRIO_FRONT, 2, sAlchePlus_list[tm_count], 0);
; 13061: 
; 13062: 							if (HitDispNo == statusWndFontNoExt[tm_count]) {
; 13063: 								//æ¼æ¥pcç%d
; 13064: 								//CHAR_MAX_DETAIL
; 13065: 								char tm_DetailDesc[64];
; 13066: 								char tm_DetailDesc1[64];
; 13067: 								char tm_DetailDesc2[64];
; 13068: 								sprintf(tm_DetailDesc, "[%s]çææé´å®çç»åº¦ï¼%d%%\0", sAlchePlus_list[tm_count], iCharAlchePlus[tm_count] / 1000);
; 13069: 								StockFontBuffer(ä¸´æ¶èµ·å§X + 56, ä¸´æ¶èµ·å§Y + 218, FONT_PRIO_FRONT, 1, tm_DetailDesc, 0);
; 13070: 								sprintf(tm_DetailDesc1, "å¯¹äº[%s]ææçé´å®çåº¦ï¼å¯æé«ç´ æåææåç", sAlchePlus_list[tm_count]);
; 13071: 								StockFontBuffer(ä¸´æ¶èµ·å§X + 56, ä¸´æ¶èµ·å§Y + 250, FONT_PRIO_FRONT, 10, tm_DetailDesc1, 0);
; 13072: 								//sprintf(tm_DetailDesc2, "\0");
; 13073: 								//StockFontBuffer(ä¸´æ¶èµ·å§X + 56, ä¸´æ¶èµ·å§Y + 280, FONT_PRIO_FRONT, 10, tm_DetailDesc2, 0);
; 13074: 							}
; 13075: 						}
; 13076: 
; 13077: 					}
; 13078: 					else if (statusWndFontNoExtNowCur == 1) {//é´å®äº
; 13079: 						StockDispBuffer(ä¸´æ¶èµ·å§X + 418, ä¸´æ¶èµ·å§Y + 35, DISP_PRIO_IME3, 52050, 0);
; 13080: 						int tm_count = 16;
; 13081: 						int tm_count2 = 0;
; 13082: 						for (; tm_count < 25; tm_count++) {
; 13083: 							statusWndFontNoExt[tm_count - 16] = StockDispBuffer(ä¸´æ¶èµ·å§X + 71 + ((tm_count - 16) % 8) * 60, ä¸´æ¶èµ·å§Y + 95 + 66 * (int)((tm_count - 16) / 8), DISP_PRIO_IME3, iAlchePlusIcon[tm_count], 2);
; 13084: 							StockFontBuffer(ä¸´æ¶èµ·å§X + 55 + (tm_count2 % 8) * 60, ä¸´æ¶èµ·å§Y + 120 + 66 * (int)(tm_count2 / 8), FONT_PRIO_FRONT, 2, sAlchePlus_list[tm_count], 0);
; 13085: 							tm_count2++;
; 13086: 							if (HitDispNo == statusWndFontNoExt[tm_count - 16]) {
; 13087: 								char tm_DetailDesc[64];
; 13088: 								char tm_DetailDesc1[64];
; 13089: 								char tm_DetailDesc2[64];
; 13090: 
; 13091: 								sprintf(tm_DetailDesc, "[%s]çææé´å®çç»åº¦ï¼%d%%\0", sAlchePlus_list[tm_count], iCharAlchePlus[tm_count] / 1000);
; 13092: 								StockFontBuffer(ä¸´æ¶èµ·å§X + 56, ä¸´æ¶èµ·å§Y + 218, FONT_PRIO_FRONT, 1, tm_DetailDesc, 0);
; 13093: 								sprintf(tm_DetailDesc1, "å¯¹äº[%s]ææçé´å®çåº¦ï¼å¯æé«ç´ æåææåç", sAlchePlus_list[tm_count]);
; 13094: 								StockFontBuffer(ä¸´æ¶èµ·å§X + 56, ä¸´æ¶èµ·å§Y + 250, FONT_PRIO_FRONT, 10, tm_DetailDesc1, 0);
; 13095: 							}
; 13096: 						}
; 13097: 
; 13098: 					}
; 13099: 					else if (statusWndFontNoExtNowCur == 2) {//é­æ³
; 13100: 						StockDispBuffer(ä¸´æ¶èµ·å§X + 493, ä¸´æ¶èµ·å§Y + 35, DISP_PRIO_IME3, 52051, 0);
; 13101: 						//statusWndFontNoExt[0] = StockDispBuffer(ä¸´æ¶èµ·å§X + 71 + ((tm_count-16) % 8) * 60, ä¸´æ¶èµ·å§Y + 95 + 66 * (int)((tm_count-16) / 8), DISP_PRIO_IME3, iAlchePlusIcon[tm_count], 2);
; 13102: 
; 13103: 						statusWndFontNoExt[0] = StockDispBuffer(ä¸´æ¶èµ·å§X + 0 * 60 + 71, ä¸´æ¶èµ·å§Y + 95, DISP_PRIO_IME3, 26475 + 4, 2);
; 13104: 						statusWndFontNoExt[1] = StockDispBuffer(ä¸´æ¶èµ·å§X + 1 * 60 + 71, ä¸´æ¶èµ·å§Y + 95, DISP_PRIO_IME3, 26475 + 0, 2);
; 13105: 						statusWndFontNoExt[2] = StockDispBuffer(ä¸´æ¶èµ·å§X + 2 * 60 + 71, ä¸´æ¶èµ·å§Y + 95, DISP_PRIO_IME3, 26475 + 2, 2);
; 13106: 						statusWndFontNoExt[3] = StockDispBuffer(ä¸´æ¶èµ·å§X + 3 * 60 + 71, ä¸´æ¶èµ·å§Y + 95, DISP_PRIO_IME3, 26475 + 6, 2);
; 13107: 						statusWndFontNoExt[4] = StockDispBuffer(ä¸´æ¶èµ·å§X + 4 * 60 + 71, ä¸´æ¶èµ·å§Y + 95, DISP_PRIO_IME3, 26474 + 4, 2);
; 13108: 						statusWndFontNoExt[5] = StockDispBuffer(ä¸´æ¶èµ·å§X + 5 * 60 + 71, ä¸´æ¶èµ·å§Y + 95, DISP_PRIO_IME3, 26474 + 0, 2);
; 13109: 						statusWndFontNoExt[6] = StockDispBuffer(ä¸´æ¶èµ·å§X + 6 * 60 + 71, ä¸´æ¶èµ·å§Y + 95, DISP_PRIO_IME3, 26474 + 2, 2);
; 13110: 						statusWndFontNoExt[7] = StockDispBuffer(ä¸´æ¶èµ·å§X + 7 * 60 + 71, ä¸´æ¶èµ·å§Y + 95, DISP_PRIO_IME3, 26474 + 6, 2);
; 13111: 
; 13112: 
; 13113: 						for (int ci = 0; ci < 8; ci++) {
; 13114: 							if (HitDispNo == statusWndFontNoExt[ci]) {
; 13115: 								char tm_DetailDesc[64];
; 13116: 								sprintf(tm_DetailDesc, "%s%s\0", DetailDesc[ci], CharDetail[ci]);
; 13117: 
; 13118: 								StockFontBuffer(ä¸´æ¶èµ·å§X + 56, ä¸´æ¶èµ·å§Y + 218, FONT_PRIO_FRONT, 1, tm_DetailDesc, 0);
; 13119: 
; 13120: 								StockFontBuffer(ä¸´æ¶èµ·å§X + 56, ä¸´æ¶èµ·å§Y + 250, FONT_PRIO_FRONT, 10, DetailDesc1[ci], 0);
; 13121: 								StockFontBuffer(ä¸´æ¶èµ·å§X + 56, ä¸´æ¶èµ·å§Y + 270, FONT_PRIO_FRONT, 10, DetailDesc2[ci], 0);
; 13122: 
; 13123: 							}
; 13124: 						}
; 13125: 
; 13126: 					}
; 13127: 
; 13128: 					//ç¹å»è¿å
; 13129: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13130: 						if (HitDispNo == statusWndFontNo[13]) {
; 13131: 							DeathAction(pActMenuWnd);
; 13132: 							pActMenuWnd = NULL;
; 13133: 							statusWndNo = 0;
; 13134: 							play_se(202, 320, 240);
; 13135: 						}
; 13136: 					}
; 13137: 					StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_MENU, 52048, 1);//æå°ç¶æçé¢åºå¾
; 13138: 				}
; 13139: 			}
; 13140: 
; 13141: #else
; 13142: 
; 13143: 			if (pActMenuWnd == NULL) {

  03c2b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  03c32	75 74		 jne	 SHORT $LN836@MenuProc

; 13144: 				pActMenuWnd = MakeWindowDisp(2, 2, 302, 412, 0, -1);

  03c34	6a ff		 push	 -1
  03c36	6a 00		 push	 0
  03c38	68 9c 01 00 00	 push	 412			; 0000019cH
  03c3d	68 2e 01 00 00	 push	 302			; 0000012eH
  03c42	6a 02		 push	 2
  03c44	6a 02		 push	 2
  03c46	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  03c4b	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  03c52	83 c4 18	 add	 esp, 24			; 00000018H
  03c55	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA, xmm0
  03c5c	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  03c61	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+16, xmm0
  03c68	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+32, xmm0
  03c6f	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+48, xmm0
  03c76	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+64, xmm0
  03c7d	0f 57 c0	 xorps	 xmm0, xmm0

; 13145: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndFontNo[i] = -2;
; 13146: 				for (i = 0; i < MENU_STATUS_0; i++) statusWndBtnFlag[i] = 0;

  03c80	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA, xmm0
  03c87	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+16, xmm0
  03c8e	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+32, xmm0
  03c95	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+48, xmm0
  03c9c	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+64, xmm0

; 13147: 			}

  03ca3	e9 bd 06 00 00	 jmp	 $LN5039@MenuProc
$LN836@MenuProc:

; 13148: 			else {
; 13149: 				if (pActMenuWnd->hp > 0) {

  03ca8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  03cae	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  03cb2	0f 8e ad 06 00
	00		 jle	 $LN5039@MenuProc

; 13150: 					x = pActMenuWnd->x;
; 13151: 					y = pActMenuWnd->y;
; 13152: 
; 13153: 					//StockDispBuffer( ( ( WINDOW_DISP *)pActMenuWnd->pYobi )->mx+8, ( ( WINDOW_DISP *)pActMenuWnd->pYobi )->my-5, DISP_PRIO_MENU, CG_SKILL_TABLE, 1 );
; 13154: 					//statusWndFontNo[ 13 ] = StockDispBuffer( x+139, y+423, DISP_PRIO_IME3, CG_TRADE_BACK_BTN, 2 );
; 13155: 
; 13156: 					//ç¶ææç» è§çª
; 13157: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_NEW_26473, 1);

  03cb8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  03cbb	8b 72 18	 mov	 esi, DWORD PTR [edx+24]
  03cbe	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  03cc1	6a 01		 push	 1
  03cc3	68 69 67 00 00	 push	 26473			; 00006769H
  03cc8	6a 68		 push	 104			; 00000068H
  03cca	ff 70 18	 push	 DWORD PTR [eax+24]
  03ccd	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  03cd3	ff 70 14	 push	 DWORD PTR [eax+20]
  03cd6	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  03cdc	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 13158: 					//CC add
; 13159: 					//è¿éé½åç¨éæçå¤çäº
; 13160: 					statusWndFontNo[13] = StockDispBuffer(x + 215, y + 394, DISP_PRIO_IME3, CG_TRADE_BACK_BTN, 2);

  03ce1	6a 02		 push	 2
  03ce3	68 ec 66 00 00	 push	 26348			; 000066ecH
  03ce8	6a 69		 push	 105			; 00000069H
  03cea	8d 87 8a 01 00
	00		 lea	 eax, DWORD PTR [edi+394]
  03cf0	50		 push	 eax
  03cf1	8d 86 d7 00 00
	00		 lea	 eax, DWORD PTR [esi+215]
  03cf7	50		 push	 eax
  03cf8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 13161: 					static int statusWndFontNoExtNowCur = 2;
; 13162: 
; 13163: 					if (MakeHitBox(x + 270, y + 10, x + 270 + 30, y + 10 + 80, DISP_PRIO_IME3) == TRUE) {	// æä¸é´å®ä¸

  03cfd	6a 69		 push	 105			; 00000069H
  03cff	a3 34 00 00 00	 mov	 DWORD PTR ?statusWndFontNo@@3PAHA+52, eax
  03d04	8d 57 5a	 lea	 edx, DWORD PTR [edi+90]
  03d07	52		 push	 edx
  03d08	8d 86 2c 01 00
	00		 lea	 eax, DWORD PTR [esi+300]
  03d0e	50		 push	 eax
  03d0f	8d 47 0a	 lea	 eax, DWORD PTR [edi+10]
  03d12	8d 8e 0e 01 00
	00		 lea	 ecx, DWORD PTR [esi+270]
  03d18	50		 push	 eax
  03d19	51		 push	 ecx
  03d1a	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  03d1f	83 c4 3c	 add	 esp, 60			; 0000003cH
  03d22	83 f8 01	 cmp	 eax, 1
  03d25	75 18		 jne	 SHORT $LN840@MenuProc

; 13164: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  03d27	84 05 2c 00 00
	00		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, al
  03d2d	b9 00 00 00 00	 mov	 ecx, 0
  03d32	a1 00 00 00 00	 mov	 eax, DWORD PTR ?statusWndFontNoExtNowCur@?DEM@??MenuProc@@YAXXZ@4HA
  03d37	0f 45 c1	 cmovne	 eax, ecx
  03d3a	a3 00 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExtNowCur@?DEM@??MenuProc@@YAXXZ@4HA, eax
$LN840@MenuProc:

; 13165: 							statusWndFontNoExtNowCur = 0;
; 13166: 						}
; 13167: 					}
; 13168: 					if (MakeHitBox(x + 270, y + 90, x + 270 + 30, y + 90 + 80, DISP_PRIO_IME3) == TRUE) {	// æä¸é´å®äº

  03d3f	6a 69		 push	 105			; 00000069H
  03d41	8d 87 aa 00 00
	00		 lea	 eax, DWORD PTR [edi+170]
  03d47	50		 push	 eax
  03d48	8d 86 2c 01 00
	00		 lea	 eax, DWORD PTR [esi+300]
  03d4e	50		 push	 eax
  03d4f	8d 47 5a	 lea	 eax, DWORD PTR [edi+90]
  03d52	50		 push	 eax
  03d53	8d 86 0e 01 00
	00		 lea	 eax, DWORD PTR [esi+270]
  03d59	50		 push	 eax
  03d5a	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  03d5f	83 c4 14	 add	 esp, 20			; 00000014H
  03d62	83 f8 01	 cmp	 eax, 1
  03d65	75 18		 jne	 SHORT $LN842@MenuProc

; 13169: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  03d67	84 05 2c 00 00
	00		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, al
  03d6d	b9 01 00 00 00	 mov	 ecx, 1
  03d72	a1 00 00 00 00	 mov	 eax, DWORD PTR ?statusWndFontNoExtNowCur@?DEM@??MenuProc@@YAXXZ@4HA
  03d77	0f 45 c1	 cmovne	 eax, ecx
  03d7a	a3 00 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExtNowCur@?DEM@??MenuProc@@YAXXZ@4HA, eax
$LN842@MenuProc:

; 13170: 							statusWndFontNoExtNowCur = 1;
; 13171: 						}
; 13172: 					}
; 13173: 					if (MakeHitBox(x + 270, y + 170, x + 270 + 30, y + 170 + 80, DISP_PRIO_IME3) == TRUE) {	// æä¸é­æ³ç¶æ

  03d7f	6a 69		 push	 105			; 00000069H
  03d81	8d 87 fa 00 00
	00		 lea	 eax, DWORD PTR [edi+250]
  03d87	50		 push	 eax
  03d88	8d 86 2c 01 00
	00		 lea	 eax, DWORD PTR [esi+300]
  03d8e	50		 push	 eax
  03d8f	8d 87 aa 00 00
	00		 lea	 eax, DWORD PTR [edi+170]
  03d95	50		 push	 eax
  03d96	8d 86 0e 01 00
	00		 lea	 eax, DWORD PTR [esi+270]
  03d9c	50		 push	 eax
  03d9d	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  03da2	83 c4 14	 add	 esp, 20			; 00000014H
  03da5	83 f8 01	 cmp	 eax, 1
  03da8	75 17		 jne	 SHORT $LN844@MenuProc

; 13174: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  03daa	84 05 2c 00 00
	00		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, al
  03db0	74 0f		 je	 SHORT $LN844@MenuProc

; 13175: 							statusWndFontNoExtNowCur = 2;

  03db2	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExtNowCur@?DEM@??MenuProc@@YAXXZ@4HA, 2

; 13176: 						}
; 13177: 					}
; 13178: 					//CC FIX
; 13179: 					//20170812
; 13180: 					//ç²¾ç»æ°æ®æ¾ç¤º
; 13181: 					if (statusWndFontNoExtNowCur == 0) {

  03dbc	e9 26 03 00 00	 jmp	 $LN3814@MenuProc
$LN844@MenuProc:
  03dc1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?statusWndFontNoExtNowCur@?DEM@??MenuProc@@YAXXZ@4HA
  03dc6	85 c0		 test	 eax, eax
  03dc8	0f 85 71 01 00
	00		 jne	 $LN845@MenuProc

; 13182: 						//ä¸ºå¥è¿éçåæ åºæ¬é½ä¸ç¨æ¹å¢
; 13183: 						//mx+30
; 13184: 						//my-5
; 13185: 						//ä¸¤ä¸ªå¼ æ¯æµè¯åºæ¥ç
; 13186: 						StockDispBuffer(((WINDOW_DISP*)pActMenuWnd->pYobi)->mx + 133, ((WINDOW_DISP*)pActMenuWnd->pYobi)->my - 156, DISP_PRIO_IME3, CG_NEW_26555, 1);

  03dce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  03dd3	6a 01		 push	 1
  03dd5	68 bb 67 00 00	 push	 26555			; 000067bbH
  03dda	6a 69		 push	 105			; 00000069H
  03ddc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03ddf	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  03de2	2d 9c 00 00 00	 sub	 eax, 156		; 0000009cH
  03de7	50		 push	 eax
  03de8	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  03deb	05 85 00 00 00	 add	 eax, 133		; 00000085H
  03df0	50		 push	 eax
  03df1	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  03df6	83 c4 14	 add	 esp, 20			; 00000014H
  03df9	c7 85 00 ba ff
	ff 00 00 00 00	 mov	 DWORD PTR tv39350[ebp], OFFSET ?sAlchePlus_list@@3PAY0BA@DA ; sAlchePlus_list
  03e03	33 d2		 xor	 edx, edx
  03e05	89 95 f4 b9 ff
	ff		 mov	 DWORD PTR _tm_count$1$[ebp], edx
  03e0b	0f 1f 44 00 00	 npad	 5
$LL107@MenuProc:

; 13189: 							statusWndFontNoExt[tm_count] = StockDispBuffer(x + (tm_count % 4) * 60 + 48, y + 88 + 60 * (int)(tm_count / 4), DISP_PRIO_IME3, iAlchePlusIcon[tm_count], 2);

  03e10	8b ca		 mov	 ecx, edx
  03e12	c1 e9 02	 shr	 ecx, 2
  03e15	8b c1		 mov	 eax, ecx
  03e17	c1 e0 04	 shl	 eax, 4
  03e1a	2b c1		 sub	 eax, ecx
  03e1c	83 c0 16	 add	 eax, 22			; 00000016H
  03e1f	6a 02		 push	 2
  03e21	ff 34 95 00 00
	00 00		 push	 DWORD PTR ?iAlchePlusIcon@@3PAHA[edx*4]
  03e28	83 e2 03	 and	 edx, 3
  03e2b	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  03e2e	6a 69		 push	 105			; 00000069H
  03e30	50		 push	 eax
  03e31	8b c2		 mov	 eax, edx
  03e33	c1 e0 04	 shl	 eax, 4
  03e36	2b c2		 sub	 eax, edx
  03e38	83 c0 0c	 add	 eax, 12			; 0000000cH
  03e3b	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  03e3e	50		 push	 eax
  03e3f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  03e44	8b 95 f4 b9 ff
	ff		 mov	 edx, DWORD PTR _tm_count$1$[ebp]
  03e4a	83 c4 14	 add	 esp, 20			; 00000014H
  03e4d	89 04 95 00 00
	00 00		 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA[edx*4], eax

; 13190: 							if (HitDispNo == statusWndFontNoExt[tm_count]) {

  03e54	39 05 00 00 00
	00		 cmp	 DWORD PTR ?HitDispNo@@3HA, eax ; HitDispNo
  03e5a	0f 85 b9 00 00
	00		 jne	 $LN105@MenuProc

; 13191: 								//æ¼æ¥pcç%d
; 13192: 								//CHAR_MAX_DETAIL
; 13193: 								char tm_DetailDesc[64];
; 13194: 								char tm_DetailDesc1[64];
; 13195: 								char tm_DetailDesc2[64];
; 13196: 								sprintf(tm_DetailDesc, "[%s]ì¬ë£ ìì±ì íì¸í¨       %d %% \0", sAlchePlus_list[tm_count], iCharAlchePlus[tm_count] / 1000);

  03e60	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  03e65	f7 2c 95 00 00
	00 00		 imul	 DWORD PTR ?iCharAlchePlus@@3PAHA[edx*4]
  03e6c	c1 fa 06	 sar	 edx, 6
  03e6f	8b c2		 mov	 eax, edx
  03e71	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03e74	03 c2		 add	 eax, edx
  03e76	50		 push	 eax
  03e77	ff b5 00 ba ff
	ff		 push	 DWORD PTR tv39350[ebp]
  03e7d	8d 85 50 f4 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc$48[ebp]
  03e83	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IJGAMOEE@?$FL?$CFs?$FN?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?T?5?5?5?5?5?5?5?$CFd@
  03e88	50		 push	 eax
  03e89	e8 00 00 00 00	 call	 _sprintf

; 13197: 								StockFontBuffer(x + 20, y + 310, FONT_PRIO_FRONT, 0, tm_DetailDesc, 0);

  03e8e	6a 00		 push	 0
  03e90	8d 85 50 f4 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc$48[ebp]
  03e96	83 c6 14	 add	 esi, 20			; 00000014H
  03e99	50		 push	 eax
  03e9a	6a 00		 push	 0
  03e9c	6a 01		 push	 1
  03e9e	8d 87 36 01 00
	00		 lea	 eax, DWORD PTR [edi+310]
  03ea4	50		 push	 eax
  03ea5	56		 push	 esi
  03ea6	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 13198: 								sprintf(tm_DetailDesc1, "å¯¹äº[%s]ì¬ë£ì ìì±ì ê°ì /íì¸íì¬ ì¬ë£ í©ì±ì ì±ê³µì¨ì ëì¼ ì ìì\0", sAlchePlus_list[tm_count]);

  03eab	ff b5 00 ba ff
	ff		 push	 DWORD PTR tv39350[ebp]
  03eb1	8d 85 d0 f5 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc1$54[ebp]
  03eb7	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@CAIJDNGD@?$DP?i?M?$FL?$CFs?$FN?$MA?g?$LH?a?$MA?G?5?$LM?S?$LM?$LK?$MA?$LL?5?$LA?$KI?A?$KE?1?H?$KO?$MA?N?G@
  03ebc	50		 push	 eax
  03ebd	e8 00 00 00 00	 call	 _sprintf

; 13199: 								StockFontBuffer(x + 20, y + 330, FONT_PRIO_FRONT, 0, tm_DetailDesc1, 0);

  03ec2	6a 00		 push	 0
  03ec4	8d 85 d0 f5 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc1$54[ebp]
  03eca	50		 push	 eax
  03ecb	6a 00		 push	 0
  03ecd	6a 01		 push	 1
  03ecf	8d 87 4a 01 00
	00		 lea	 eax, DWORD PTR [edi+330]
  03ed5	50		 push	 eax
  03ed6	56		 push	 esi
  03ed7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  03edc	83 c4 4c	 add	 esp, 76			; 0000004cH

; 13200: 								sprintf(tm_DetailDesc2, "ì¬ë£ í©ì± ì±ê³µì¨\0");

  03edf	8d 85 90 f4 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc2$49[ebp]
  03ee5	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HALJJKGM@?$MA?g?$LH?a?5?G?U?$LM?$LK?5?$LM?$LK?$LA?x?$MA?$LC?$AA@
  03eea	50		 push	 eax
  03eeb	e8 00 00 00 00	 call	 _sprintf

; 13201: 								StockFontBuffer(x + 20, y + 350, FONT_PRIO_FRONT, 0, tm_DetailDesc2, 0);

  03ef0	6a 00		 push	 0
  03ef2	8d 85 90 f4 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc2$49[ebp]
  03ef8	50		 push	 eax
  03ef9	6a 00		 push	 0
  03efb	6a 01		 push	 1
  03efd	8d 87 5e 01 00
	00		 lea	 eax, DWORD PTR [edi+350]
  03f03	50		 push	 eax
  03f04	56		 push	 esi
  03f05	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  03f0a	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  03f10	83 c4 20	 add	 esp, 32			; 00000020H
  03f13	8b 95 f4 b9 ff
	ff		 mov	 edx, DWORD PTR _tm_count$1$[ebp]
$LN105@MenuProc:

; 13187: 						int tm_count = 0;
; 13188: 						for (; tm_count < 16; tm_count++) {

  03f19	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39350[ebp]
  03f1f	42		 inc	 edx
  03f20	83 c0 10	 add	 eax, 16			; 00000010H
  03f23	89 95 f4 b9 ff
	ff		 mov	 DWORD PTR _tm_count$1$[ebp], edx
  03f29	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv39350[ebp], eax
  03f2f	3d 00 01 00 00	 cmp	 eax, OFFSET ?sAlchePlus_list@@3PAY0BA@DA+256
  03f34	0f 8c d6 fe ff
	ff		 jl	 $LL107@MenuProc

; 13202: 							}
; 13203: 
; 13204: 
; 13205: 						}
; 13206: 					}

  03f3a	e9 c9 03 00 00	 jmp	 $LN4745@MenuProc
$LN845@MenuProc:

; 13207: 					else if (statusWndFontNoExtNowCur == 1) {

  03f3f	83 f8 01	 cmp	 eax, 1
  03f42	0f 85 96 01 00
	00		 jne	 $LN848@MenuProc

; 13208: 						StockDispBuffer(((WINDOW_DISP*)pActMenuWnd->pYobi)->mx + 133, ((WINDOW_DISP*)pActMenuWnd->pYobi)->my - 78, DISP_PRIO_IME3, CG_NEW_26556, 1);

  03f48	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  03f4d	6a 01		 push	 1
  03f4f	68 bc 67 00 00	 push	 26556			; 000067bcH
  03f54	6a 69		 push	 105			; 00000069H
  03f56	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  03f59	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  03f5c	83 e8 4e	 sub	 eax, 78			; 0000004eH
  03f5f	50		 push	 eax
  03f60	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  03f63	05 85 00 00 00	 add	 eax, 133		; 00000085H
  03f68	50		 push	 eax
  03f69	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  03f6e	33 c0		 xor	 eax, eax
  03f70	c7 85 00 ba ff
	ff 00 01 00 00	 mov	 DWORD PTR tv39348[ebp], OFFSET ?sAlchePlus_list@@3PAY0BA@DA+256
  03f7a	83 c4 14	 add	 esp, 20			; 00000014H
  03f7d	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR tv39349[ebp], eax
  03f83	33 c9		 xor	 ecx, ecx
  03f85	c7 85 fc b9 ff
	ff 09 00 00 00	 mov	 DWORD PTR tv39090[ebp], 9
  03f8f	89 8d ec b9 ff
	ff		 mov	 DWORD PTR tv39347[ebp], ecx
$LL110@MenuProc:

; 13211: 							statusWndFontNoExt[tm_count - 16] = StockDispBuffer(x + ((tm_count - 16) % 4) * 60 + 48, y + 88 + 60 * (int)((tm_count - 16) / 4), DISP_PRIO_IME3, iAlchePlusIcon[tm_count], 2);

  03f95	99		 cdq
  03f96	83 e2 03	 and	 edx, 3
  03f99	03 c2		 add	 eax, edx
  03f9b	6a 02		 push	 2
  03f9d	ff b1 40 00 00
	00		 push	 DWORD PTR ?iAlchePlusIcon@@3PAHA[ecx+64]
  03fa3	c1 f8 02	 sar	 eax, 2
  03fa6	8b c8		 mov	 ecx, eax
  03fa8	c1 e1 04	 shl	 ecx, 4
  03fab	2b c8		 sub	 ecx, eax
  03fad	83 c1 16	 add	 ecx, 22			; 00000016H
  03fb0	6a 69		 push	 105			; 00000069H
  03fb2	8d 04 8f	 lea	 eax, DWORD PTR [edi+ecx*4]
  03fb5	8b 8d f4 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39349[ebp]
  03fbb	50		 push	 eax
  03fbc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  03fc2	79 05		 jns	 SHORT $LN5067@MenuProc
  03fc4	49		 dec	 ecx
  03fc5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  03fc8	41		 inc	 ecx
$LN5067@MenuProc:
  03fc9	8b c1		 mov	 eax, ecx
  03fcb	c1 e0 04	 shl	 eax, 4
  03fce	2b c1		 sub	 eax, ecx
  03fd0	83 c0 0c	 add	 eax, 12			; 0000000cH
  03fd3	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  03fd6	50		 push	 eax
  03fd7	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  03fdc	8b 8d ec b9 ff
	ff		 mov	 ecx, DWORD PTR tv39347[ebp]
  03fe2	83 c4 14	 add	 esp, 20			; 00000014H
  03fe5	89 81 00 00 00
	00		 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA[ecx], eax

; 13212: 							if (HitDispNo == statusWndFontNoExt[tm_count - 16]) {

  03feb	39 05 00 00 00
	00		 cmp	 DWORD PTR ?HitDispNo@@3HA, eax ; HitDispNo
  03ff1	0f 85 b8 00 00
	00		 jne	 $LN108@MenuProc

; 13213: 								//æ¼æ¥pcç%d
; 13214: 								//CHAR_MAX_DETAIL
; 13215: 								char tm_DetailDesc[64];
; 13216: 								char tm_DetailDesc1[64];
; 13217: 								char tm_DetailDesc2[64];
; 13218: 								sprintf(tm_DetailDesc, "[%s]ì¬ë£ ìì±ì íì¸í¨         %d %% \0", sAlchePlus_list[tm_count], iCharAlchePlus[tm_count] / 1000);

  03ff7	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  03ffc	f7 a9 40 00 00
	00		 imul	 DWORD PTR ?iCharAlchePlus@@3PAHA[ecx+64]
  04002	c1 fa 06	 sar	 edx, 6
  04005	8b c2		 mov	 eax, edx
  04007	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0400a	03 c2		 add	 eax, edx
  0400c	50		 push	 eax
  0400d	ff b5 00 ba ff
	ff		 push	 DWORD PTR tv39348[ebp]
  04013	8d 85 d0 f4 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc$50[ebp]
  04019	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BAIOACBP@?$FL?$CFs?$FN?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?T?5?5?5?5?5?5?5?5?5@
  0401e	50		 push	 eax
  0401f	e8 00 00 00 00	 call	 _sprintf

; 13219: 								StockFontBuffer(x + 20, y + 310, FONT_PRIO_FRONT, 0, tm_DetailDesc, 0);

  04024	6a 00		 push	 0
  04026	8d 85 d0 f4 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc$50[ebp]
  0402c	83 c6 14	 add	 esi, 20			; 00000014H
  0402f	50		 push	 eax
  04030	6a 00		 push	 0
  04032	6a 01		 push	 1
  04034	8d 87 36 01 00
	00		 lea	 eax, DWORD PTR [edi+310]
  0403a	50		 push	 eax
  0403b	56		 push	 esi
  0403c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 13220: 								sprintf(tm_DetailDesc1, "ì¬ë£ ìì±ì íì¸íì¬[%s]ë¥¼ ëì¼ ì ìì\0", sAlchePlus_list[tm_count]);

  04041	ff b5 00 ba ff
	ff		 push	 DWORD PTR tv39348[ebp]
  04047	8d 85 10 f5 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc1$51[ebp]
  0404d	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JOENNLPN@?$MA?g?$LH?a?5?$LM?S?$LM?$LK?$MA?$LL?5?H?$KO?$MA?N?G?O?$LP?$KJ?$FL?$CFs?$FN?$LI?$KG?5?$LD?t?$MA?O@
  04052	50		 push	 eax
  04053	e8 00 00 00 00	 call	 _sprintf

; 13221: 								StockFontBuffer(x + 20, y + 330, FONT_PRIO_FRONT, 0, tm_DetailDesc1, 0);

  04058	6a 00		 push	 0
  0405a	8d 85 10 f5 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc1$51[ebp]
  04060	50		 push	 eax
  04061	6a 00		 push	 0
  04063	6a 01		 push	 1
  04065	8d 87 4a 01 00
	00		 lea	 eax, DWORD PTR [edi+330]
  0406b	50		 push	 eax
  0406c	56		 push	 esi
  0406d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  04072	83 c4 4c	 add	 esp, 76			; 0000004cH

; 13222: 								sprintf(tm_DetailDesc2, "ì¬ë£í©ì± ì±ê³µì¨\0");

  04075	8d 85 50 f5 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc2$52[ebp]
  0407b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PPGFHNAN@?$MA?g?$LH?a?G?U?$LM?$LK?5?$LM?$LK?$LA?x?$MA?$LC?$AA@
  04080	50		 push	 eax
  04081	e8 00 00 00 00	 call	 _sprintf

; 13223: 								StockFontBuffer(x + 20, y + 350, FONT_PRIO_FRONT, 0, tm_DetailDesc2, 0);

  04086	6a 00		 push	 0
  04088	8d 85 50 f5 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc2$52[ebp]
  0408e	50		 push	 eax
  0408f	6a 00		 push	 0
  04091	6a 01		 push	 1
  04093	8d 87 5e 01 00
	00		 lea	 eax, DWORD PTR [edi+350]
  04099	50		 push	 eax
  0409a	56		 push	 esi
  0409b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  040a0	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  040a6	83 c4 20	 add	 esp, 32			; 00000020H
  040a9	8b 8d ec b9 ff
	ff		 mov	 ecx, DWORD PTR tv39347[ebp]
$LN108@MenuProc:

; 13209: 						int tm_count = 16;
; 13210: 						for (; tm_count < 25; tm_count++) {

  040af	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR tv39349[ebp]
  040b5	83 c1 04	 add	 ecx, 4
  040b8	83 85 00 ba ff
	ff 10		 add	 DWORD PTR tv39348[ebp], 16 ; 00000010H
  040bf	40		 inc	 eax
  040c0	83 ad fc b9 ff
	ff 01		 sub	 DWORD PTR tv39090[ebp], 1
  040c7	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR tv39349[ebp], eax
  040cd	89 8d ec b9 ff
	ff		 mov	 DWORD PTR tv39347[ebp], ecx
  040d3	0f 85 bc fe ff
	ff		 jne	 $LL110@MenuProc

; 13224: 							}
; 13225: 						}
; 13226: 					}

  040d9	e9 2a 02 00 00	 jmp	 $LN4745@MenuProc
$LN848@MenuProc:

; 13227: 					else if (statusWndFontNoExtNowCur == 2) {

  040de	83 f8 02	 cmp	 eax, 2
  040e1	0f 85 21 02 00
	00		 jne	 $LN4745@MenuProc
$LN3814@MenuProc:

; 13228: 						statusWndFontNoExt[0] = StockDispBuffer(x + 0 * 60 + 48, y + 88, DISP_PRIO_IME3, 26479, 2);

  040e7	6a 02		 push	 2
  040e9	8d 77 58	 lea	 esi, DWORD PTR [edi+88]
  040ec	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  040f2	68 6f 67 00 00	 push	 26479			; 0000676fH
  040f7	6a 69		 push	 105			; 00000069H
  040f9	56		 push	 esi
  040fa	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  040fd	50		 push	 eax
  040fe	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 13229: 						statusWndFontNoExt[1] = StockDispBuffer(x + 1 * 60 + 48, y + 88, DISP_PRIO_IME3, 26475, 2);

  04103	6a 02		 push	 2
  04105	68 6b 67 00 00	 push	 26475			; 0000676bH
  0410a	6a 69		 push	 105			; 00000069H
  0410c	a3 00 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA, eax
  04111	8d 47 6c	 lea	 eax, DWORD PTR [edi+108]
  04114	56		 push	 esi
  04115	50		 push	 eax
  04116	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 13230: 						statusWndFontNoExt[2] = StockDispBuffer(x + 2 * 60 + 48, y + 88, DISP_PRIO_IME3, 26477, 2);

  0411b	6a 02		 push	 2
  0411d	68 6d 67 00 00	 push	 26477			; 0000676dH
  04122	6a 69		 push	 105			; 00000069H
  04124	81 c7 a8 00 00
	00		 add	 edi, 168		; 000000a8H
  0412a	a3 04 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA+4, eax
  0412f	56		 push	 esi
  04130	57		 push	 edi
  04131	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 13231: 						statusWndFontNoExt[3] = StockDispBuffer(x + 3 * 60 + 48, y + 88, DISP_PRIO_IME3, 26481, 2);

  04136	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0413c	6a 02		 push	 2
  0413e	a3 08 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA+8, eax
  04143	81 c6 e4 00 00
	00		 add	 esi, 228		; 000000e4H
  04149	8b 85 04 ba ff
	ff		 mov	 eax, DWORD PTR _y$11$[ebp]
  0414f	68 71 67 00 00	 push	 26481			; 00006771H
  04154	6a 69		 push	 105			; 00000069H
  04156	83 c0 58	 add	 eax, 88			; 00000058H
  04159	50		 push	 eax
  0415a	56		 push	 esi
  0415b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04160	83 c4 50	 add	 esp, 80			; 00000050H
  04163	a3 0c 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA+12, eax

; 13232: 						statusWndFontNoExt[4] = StockDispBuffer(x + 0 * 60 + 48, y + 88, DISP_PRIO_IME3, 26478, 2);

  04168	8b 85 04 ba ff
	ff		 mov	 eax, DWORD PTR _y$11$[ebp]
  0416e	83 c0 58	 add	 eax, 88			; 00000058H
  04171	6a 02		 push	 2
  04173	68 6e 67 00 00	 push	 26478			; 0000676eH
  04178	6a 69		 push	 105			; 00000069H
  0417a	50		 push	 eax
  0417b	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  04181	83 c0 30	 add	 eax, 48			; 00000030H
  04184	50		 push	 eax
  04185	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0418a	a3 10 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA+16, eax

; 13233: 						statusWndFontNoExt[5] = StockDispBuffer(x + 1 * 60 + 48, y + 88, DISP_PRIO_IME3, 26474, 2);

  0418f	8b 85 04 ba ff
	ff		 mov	 eax, DWORD PTR _y$11$[ebp]
  04195	6a 02		 push	 2
  04197	68 6a 67 00 00	 push	 26474			; 0000676aH
  0419c	83 c0 58	 add	 eax, 88			; 00000058H
  0419f	6a 69		 push	 105			; 00000069H
  041a1	50		 push	 eax
  041a2	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  041a8	83 c0 6c	 add	 eax, 108		; 0000006cH
  041ab	50		 push	 eax
  041ac	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 13234: 						statusWndFontNoExt[6] = StockDispBuffer(x + 2 * 60 + 48, y + 88, DISP_PRIO_IME3, 26476, 2);

  041b1	6a 02		 push	 2
  041b3	a3 14 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA+20, eax
  041b8	8b 85 04 ba ff
	ff		 mov	 eax, DWORD PTR _y$11$[ebp]
  041be	68 6c 67 00 00	 push	 26476			; 0000676cH
  041c3	6a 69		 push	 105			; 00000069H
  041c5	83 c0 58	 add	 eax, 88			; 00000058H
  041c8	50		 push	 eax
  041c9	57		 push	 edi
  041ca	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 13235: 						statusWndFontNoExt[7] = StockDispBuffer(x + 3 * 60 + 48, y + 88, DISP_PRIO_IME3, 26480, 2);

  041cf	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  041d5	6a 02		 push	 2
  041d7	68 70 67 00 00	 push	 26480			; 00006770H
  041dc	a3 18 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA+24, eax
  041e1	6a 69		 push	 105			; 00000069H
  041e3	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  041e6	50		 push	 eax
  041e7	56		 push	 esi
  041e8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  041ed	a3 1c 00 00 00	 mov	 DWORD PTR ?statusWndFontNoExt@@3PAHA+28, eax
  041f2	83 c4 50	 add	 esp, 80			; 00000050H

; 13236: 						StockDispBuffer(((WINDOW_DISP*)pActMenuWnd->pYobi)->mx + 133, ((WINDOW_DISP*)pActMenuWnd->pYobi)->my, DISP_PRIO_IME3, CG_NEW_26486, 1);

  041f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  041fa	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  041fd	6a 01		 push	 1
  041ff	68 76 67 00 00	 push	 26486			; 00006776H
  04204	6a 69		 push	 105			; 00000069H
  04206	ff 70 18	 push	 DWORD PTR [eax+24]
  04209	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0420c	05 85 00 00 00	 add	 eax, 133		; 00000085H
  04211	50		 push	 eax
  04212	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04217	83 c4 14	 add	 esp, 20			; 00000014H
  0421a	be 00 00 00 00	 mov	 esi, OFFSET ?CharDetail@@3PAY0BA@DA ; CharDetail
  0421f	ba 00 00 00 00	 mov	 edx, OFFSET ?statusWndFontNoExt@@3PAHA
  04224	89 b5 e0 b9 ff
	ff		 mov	 DWORD PTR tv39345[ebp], esi
  0422a	33 c9		 xor	 ecx, ecx
  0422c	89 95 fc b9 ff
	ff		 mov	 DWORD PTR tv39344[ebp], edx
  04232	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv39346[ebp], ecx
  04238	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL113@MenuProc:

; 13238: 							if (HitDispNo == statusWndFontNoExt[ci]) {

  04240	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  04245	3b 02		 cmp	 eax, DWORD PTR [edx]
  04247	0f 85 94 00 00
	00		 jne	 $LN111@MenuProc

; 13239: 								//æ¼æ¥pcç%d
; 13240: 								//CHAR_MAX_DETAIL
; 13241: 								char tm_DetailDesc[64];
; 13242: 								sprintf(tm_DetailDesc, "%s%s\0", DetailDesc[ci], CharDetail[ci]);

  0424d	56		 push	 esi
  0424e	8d 81 00 00 00
	00		 lea	 eax, DWORD PTR ?DetailDesc@@3PAY0EA@DA[ecx]
  04254	50		 push	 eax
  04255	8d 85 90 f5 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc$53[ebp]
  0425b	68 00 00 00 00	 push	 OFFSET ??_C@_05GGHFNJMD@?$CFs?$CFs?$AA@
  04260	50		 push	 eax
  04261	e8 00 00 00 00	 call	 _sprintf

; 13243: 								StockFontBuffer(x + 20, y + 310, FONT_PRIO_FRONT, 0, tm_DetailDesc, 0);

  04266	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0426c	8d 85 90 f5 ff
	ff		 lea	 eax, DWORD PTR _tm_DetailDesc$53[ebp]
  04272	6a 00		 push	 0
  04274	50		 push	 eax
  04275	6a 00		 push	 0
  04277	6a 01		 push	 1
  04279	8d 87 36 01 00
	00		 lea	 eax, DWORD PTR [edi+310]
  0427f	83 c6 14	 add	 esi, 20			; 00000014H
  04282	50		 push	 eax
  04283	56		 push	 esi
  04284	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 13244: 								StockFontBuffer(x + 20, y + 330, FONT_PRIO_FRONT, 0, DetailDesc1[ci], 0);

  04289	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39346[ebp]
  0428f	6a 00		 push	 0
  04291	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?DetailDesc1@@3PAY0EA@DA[eax]
  04297	50		 push	 eax
  04298	6a 00		 push	 0
  0429a	6a 01		 push	 1
  0429c	8d 87 4a 01 00
	00		 lea	 eax, DWORD PTR [edi+330]
  042a2	50		 push	 eax
  042a3	56		 push	 esi
  042a4	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 13245: 								StockFontBuffer(x + 20, y + 350, FONT_PRIO_FRONT, 0, DetailDesc2[ci], 0);

  042a9	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39346[ebp]
  042af	83 c4 40	 add	 esp, 64			; 00000040H
  042b2	6a 00		 push	 0
  042b4	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?DetailDesc2@@3PAY0EA@DA[eax]
  042ba	50		 push	 eax
  042bb	6a 00		 push	 0
  042bd	6a 01		 push	 1
  042bf	8d 87 5e 01 00
	00		 lea	 eax, DWORD PTR [edi+350]
  042c5	50		 push	 eax
  042c6	56		 push	 esi
  042c7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  042cc	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR tv39346[ebp]
  042d2	83 c4 18	 add	 esp, 24			; 00000018H
  042d5	8b 95 fc b9 ff
	ff		 mov	 edx, DWORD PTR tv39344[ebp]
  042db	8b b5 e0 b9 ff
	ff		 mov	 esi, DWORD PTR tv39345[ebp]
$LN111@MenuProc:

; 13237: 						for (int ci = 0; ci < 8; ci++) {

  042e1	83 c2 04	 add	 edx, 4
  042e4	83 c6 10	 add	 esi, 16			; 00000010H
  042e7	83 c1 40	 add	 ecx, 64			; 00000040H
  042ea	89 95 fc b9 ff
	ff		 mov	 DWORD PTR tv39344[ebp], edx
  042f0	89 b5 e0 b9 ff
	ff		 mov	 DWORD PTR tv39345[ebp], esi
  042f6	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv39346[ebp], ecx
  042fc	81 fa 20 00 00
	00		 cmp	 edx, OFFSET ?statusWndFontNoExt@@3PAHA+32
  04302	0f 8c 38 ff ff
	ff		 jl	 $LL113@MenuProc
$LN4745@MenuProc:

; 13246: 							}
; 13247: 						}
; 13248: 					}
; 13249: 
; 13250: 					//é»è®¤æ¾ç¤ºç²¾çµé­æ³
; 13251: 					//int coffsetX = 34;
; 13252: 					//int coffsetY = 73;
; 13253: 					//
; 13254: 					//for ( int ci = 0 ; ci < 4 ; ci ++ ) 
; 13255: 					//{
; 13256: 
; 13257: 
; 13258: 
; 13259: 					//}
; 13260: 					//
; 13261: 					//DetailDesc
; 13262: 
; 13263: 
; 13264: 
; 13265: #ifdef _SYUTEST3
; 13266: 					for (i = 14; i < 22; i++)
; 13267: 						statusWndFontNo[i] = StockDispBuffer(x + 139, y + 200 + (i - 14) * 20, DISP_PRIO_IME3, CG_TRADE_BACK_BTN, 2);
; 13268: #endif
; 13269: 					//ç¹å»è¿å
; 13270: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  04308	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0430f	74 5a		 je	 SHORT $LN761@MenuProc

; 13271: 						if (HitDispNo == statusWndFontNo[13]) {

  04311	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  04316	3b 05 34 00 00
	00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA+52
  0431c	75 4d		 jne	 SHORT $LN761@MenuProc

; 13272: 							DeathAction(pActMenuWnd);

  0431e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  04324	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 13273: 							pActMenuWnd = NULL;
; 13274: 							statusWndNo = 0;
; 13275: 							play_se(202, 320, 240);

  04329	68 f0 00 00 00	 push	 240			; 000000f0H
  0432e	68 40 01 00 00	 push	 320			; 00000140H
  04333	68 ca 00 00 00	 push	 202			; 000000caH
  04338	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  04342	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 0
  0434c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  04351	83 c4 10	 add	 esp, 16			; 00000010H
  04354	eb 15		 jmp	 SHORT $LN761@MenuProc
$LN760@MenuProc:

; 13276: 						}
; 13277: 
; 13278: 
; 13279: 
; 13280: #ifdef _SYUTEST3
; 13281: 						if (HitDispNo == statusWndFontNo[14])
; 13282: 							lssproto_CHATROOM_send(sockfd, "C|123456798");
; 13283: 						if (HitDispNo == statusWndFontNo[15])
; 13284: 							lssproto_CHATROOM_send(sockfd, "D|123456798");
; 13285: 						if (HitDispNo == statusWndFontNo[16])
; 13286: 							lssproto_CHATROOM_send(sockfd, "J|0");
; 13287: 						if (HitDispNo == statusWndFontNo[17])
; 13288: 							lssproto_CHATROOM_send(sockfd, "L|123456798");
; 13289: 						if (HitDispNo == statusWndFontNo[18])
; 13290: 							lssproto_CHATROOM_send(sockfd, "K|123456798");
; 13291: 						if (HitDispNo == statusWndFontNo[19])
; 13292: 							lssproto_CHATROOM_send(sockfd, "M|123456798");
; 13293: 						if (HitDispNo == statusWndFontNo[20])
; 13294: 							lssproto_CHATROOM_send(sockfd, "T|123456798");
; 13295: 						if (HitDispNo == statusWndFontNo[21])
; 13296: 							lssproto_CHATROOM_send(sockfd, "B|123456798");
; 13297: #endif
; 13298: 					}
; 13299: 				}
; 13300: 			}
; 13301: #endif
; 13302: 			break;
; 13303: #endif
; 13304: 		}
; 13305: 
; 13306: 	}
; 13307: 	else {
; 13308: 		void delActç§°å·();
; 13309: 		void delActåç¯();
; 13310: 		void delActç®è¤();
; 13311: 		delActç§°å·();

  04356	e8 00 00 00 00	 call	 ?delAct??@@YAXXZ	; delAct??

; 13312: 		delActåç¯();

  0435b	e8 00 00 00 00	 call	 ?delActÎÃ?@@YAXXZ	; delActÎÃ?

; 13313: 		delActç®è¤();

  04360	e8 00 00 00 00	 call	 ?delActù«?@@YAXXZ	; delActù«?
$LN5039@MenuProc:

; 13314: 	}
; 13315: 	//? ?????????? ********************************************************/
; 13316: 
; 13317: 	if (MenuToggleFlag & JOY_CTRL_P) {

  04365	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
$LN761@MenuProc:
  0436b	83 ce ff	 or	 esi, -1
  0436e	f7 05 00 00 00
	00 00 00 00 10	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 268435456 ; MenuToggleFlag, 10000000H
  04378	89 b5 d8 b9 ff
	ff		 mov	 DWORD PTR tv37341[ebp], esi
  0437e	0f 84 79 2d 00
	00		 je	 $LN4770@MenuProc

; 13318: #ifdef _STREET_VENDOR
; 13319: 		if (pc.iOnStreetVendor == 1 || sStreetVendorBuyBtn == 2) {

  04384	83 3d b8 a1 00
	00 01		 cmp	 DWORD PTR ?pc@@3UPC@@A+41400, 1
  0438b	74 1a		 je	 SHORT $LN857@MenuProc
  0438d	66 83 3d 00 00
	00 00 02	 cmp	 WORD PTR ?sStreetVendorBuyBtn@@3FA, 2 ; sStreetVendorBuyBtn
  04395	74 10		 je	 SHORT $LN857@MenuProc

; 13324: 		}
; 13325: #endif
; 13326: #ifdef _NB_å® ç©æ è¯¦æ
; 13327: 		int ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y;
; 13328: 		//è®¡ç®å¾çä¸­å¿
; 13329: 		if (ResoMode == åè¾¨ç::mode800) {
; 13330: 			ä¸´æ¶å¾æ X = 800 / 2;
; 13331: 			ä¸´æ¶å¾æ Y = 600 / 2;
; 13332: 			ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13333: 			ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13334: 		}
; 13335: 		else if (ResoMode == åè¾¨ç::mode1024) {
; 13336: 			ä¸´æ¶å¾æ X = 1024 / 2;
; 13337: 			ä¸´æ¶å¾æ Y = 768 / 2;
; 13338: 			ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13339: 			ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13340: 		}
; 13341: 		else {
; 13342: 			ä¸´æ¶å¾æ X = 640 / 2;
; 13343: 			ä¸´æ¶å¾æ Y = 480 / 2;
; 13344: 			ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13345: 			ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13346: 		}
; 13347: 		if (pActMenuWnd == NULL) {
; 13348: 			pActMenuWnd = MakeWindowDisp(ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y, ä¸´æ¶èµ·å§X + 568, ä¸´æ¶èµ·å§Y + 358, 0, -1);
; 13349: 			for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;
; 13350: 			BattlePetReceivePetNo = -1;
; 13351: 			DropPetWndflag = false;
; 13352: 			DropI = -1;
; 13353: 			éä¸­å® ç© = -1;
; 13354: 			å® ç©æè½éä¸­ID = -1;
; 13355: 		}
; 13356: 		else {
; 13357: 			if (pActMenuWnd->hp > 0) {
; 13358: 				for (i = 0; i < 5; i++) {
; 13359: 					if (pet[i].useFlag == FALSE) {
; 13360: 						if (i == pc.battlePetNo)
; 13361: 							pc.battlePetNo = -1;
; 13362: 						if (i == pc.mailPetNo)
; 13363: 							pc.mailPetNo = -1;
; 13364: 						pc.selectPetNo[i] = FALSE;
; 13365: 					}
; 13366: 				}
; 13367: 				BattlePetStMenCnt = 0;
; 13368: 				for (i = 0; i < 5; i++) {
; 13369: 					if (pc.selectPetNo[i] == TRUE) BattlePetStMenCnt++;
; 13370: 				}
; 13371: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13372: 					for (i = 0; i < 5; i++) {
; 13373: 						if (pet[i].useFlag == TRUE && BattlePetReceivePetNo != i) {
; 13374: 							if (HitDispNo == petWndFontNo[i]) {
; 13375: #if 1
; 13376: 								if (i == pc.mailPetNo) {
; 13377: 									pc.mailPetNo = -1;
; 13378: 									if ((bNewServer & 0xf000000) == 0xf000000)
; 13379: 										lssproto_PETST_send(sockfd, i, 0);
; 13380: 									checkRidePet(i);
; 13381: 									play_se(217, 320, 240);
; 13382: 								}
; 13383: 								else
; 13384: 									if (i == pc.ridePetNo && pc.graNo != SPR_pet021 && pc.graNo != 100362) {//éé£
; 13385: 										char buf[64];
; 13386: 										sprintf(buf, "R|P|-1");
; 13387: 										if (bNewServer)
; 13388: 											lssproto_FM_send(sockfd, buf);
; 13389: 										else
; 13390: 											lssproto_FM_send(sockfd, buf);
; 13391: 										play_se(217, 320, 240);
; 13392: 										if ((bNewServer & 0xf000000) == 0xf000000)
; 13393: 											lssproto_PETST_send(sockfd, i, 0);
; 13394: 									}
; 13395: 									else
; 13396: 										if (i == pc.battlePetNo && BattlePetReceiveFlag == FALSE) {
; 13397: 											if (bNewServer)
; 13398: 												lssproto_KS_send(sockfd, -1);
; 13399: 											else
; 13400: 												old_lssproto_KS_send(sockfd, -1);
; 13401: 											BattlePetReceiveFlag = TRUE;
; 13402: 											BattlePetReceivePetNo = i;
; 13403: 											pc.selectPetNo[i] = FALSE;
; 13404: 											BattlePetStMenCnt--;
; 13405: 											if (pc.mailPetNo == -1) {
; 13406: 												pc.mailPetNo = i;
; 13407: 												if ((bNewServer & 0xf000000) == 0xf000000)
; 13408: 													lssproto_PETST_send(sockfd, i, 4);
; 13409: 											}
; 13410: 											else {
; 13411: 												checkRidePet(i);
; 13412: 												if ((bNewServer & 0xf000000) == 0xf000000)
; 13413: 													lssproto_PETST_send(sockfd, i, 0);
; 13414: 											}
; 13415: 											play_se(217, 320, 240);
; 13416: 										}
; 13417: 										else
; 13418: 											if (pc.selectPetNo[i] == TRUE) {
; 13419: 												if (pc.battlePetNo == -1 && BattlePetReceiveFlag == FALSE) {
; 13420: 													if (pet[i].hp > 0) {
; 13421: 														if (bNewServer)
; 13422: 															lssproto_KS_send(sockfd, i);
; 13423: 														else
; 13424: 															old_lssproto_KS_send(sockfd, i);
; 13425: 														BattlePetReceiveFlag = TRUE;
; 13426: 														BattlePetReceivePetNo = i;
; 13427: 														play_se(217, 320, 240);
; 13428: 													}
; 13429: 													else {
; 13430: 														play_se(220, 320, 240);
; 13431: 													}
; 13432: 												}
; 13433: 												else {
; 13434: 													if (pc.mailPetNo == -1) {
; 13435: 														pc.mailPetNo = i;
; 13436: 														if ((bNewServer & 0xf000000) == 0xf000000)
; 13437: 															lssproto_PETST_send(sockfd, i, 4);
; 13438: 													}
; 13439: 													else {
; 13440: 														checkRidePet(i);
; 13441: 														if ((bNewServer & 0xf000000) == 0xf000000)
; 13442: 															lssproto_PETST_send(sockfd, i, 0);
; 13443: 													}
; 13444: 													pc.selectPetNo[i] = FALSE;
; 13445: 													BattlePetStMenCnt--;
; 13446: 													play_se(217, 320, 240);
; 13447: 												}
; 13448: 											}
; 13449: 											else
; 13450: 												if (pc.selectPetNo[i] == FALSE) {
; 13451: 													if (BattlePetStMenCnt < ç­å¾å® æ°é) {
; 13452: 														pc.selectPetNo[i] = TRUE;
; 13453: 														BattlePetStMenCnt++;
; 13454: 														play_se(217, 320, 240);
; 13455: 														if ((bNewServer & 0xf000000) == 0xf000000)
; 13456: 															lssproto_PETST_send(sockfd, i, 1);
; 13457: 													}
; 13458: 													else {
; 13459: 														if (pc.mailPetNo == -1) {
; 13460: 															pc.mailPetNo = i;
; 13461: 															play_se(217, 320, 240);
; 13462: 															if ((bNewServer & 0xf000000) == 0xf000000)
; 13463: 																lssproto_PETST_send(sockfd, i, 4);
; 13464: 														}
; 13465: 														else {
; 13466: 															checkRidePet(i);
; 13467: 														}
; 13468: 													}
; 13469: 												}
; 13470: #endif
; 13471: 							}
; 13472: 							if (HitFontNo == petWndFontNo[i + 5]) {
; 13473: 								petStatusNo = i;
; 13474: 								petWndNo = 1;
; 13475: 								DeathAction(pActMenuWnd);
; 13476: 								pActMenuWnd = NULL;
; 13477: 								play_se(202, 320, 240);
; 13478: 							}
; 13479: 
; 13480: 						}
; 13481: 					}
; 13482: 				}
; 13483: 
; 13484: 			}
; 13485: 			int å® ç©æé®ç´¢å¼;
; 13486: 			for (i = 0; i < 5; i++) {//éåå® ç©
; 13487: 				if (pet[i].useFlag == TRUE) {
; 13488: 					sprintf(moji, "%-16s", pet[i].name);
; 13489: 					if (éä¸­å® ç© == i) {
; 13490: 						å® ç©æé®ç´¢å¼ = StockFontBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 22 + (i * 60), FONT_PRIO_FRONT, 4, moji, 2);
; 13491: 					}
; 13492: 					else {
; 13493: 						å® ç©æé®ç´¢å¼ = StockFontBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 22 + (i * 60), FONT_PRIO_FRONT, 0, moji, 2);
; 13494: 					}
; 13495: 
; 13496: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13497: 						if (HitFontNo == å® ç©æé®ç´¢å¼) {
; 13498: 							if (pActPet != NULL) {
; 13499: 								DeathAction(pActPet);
; 13500: 								pActPet = NULL;
; 13501: 							}
; 13502: 							éä¸­å® ç© = i;
; 13503: 							å® ç©æè½éä¸­ID = -1;
; 13504: 							petStatusNo = i;
; 13505: 							play_se(202, 320, 240);
; 13506: 						}
; 13507: 					}
; 13508: 					if (mouse.onceState & MOUSE_RIGHT_CRICK) {
; 13509: 						if (pet[i].useFlag == TRUE && eventWarpSendFlag == FALSE) {
; 13510: 							if (HitFontNo == å® ç©æé®ç´¢å¼) {
; 13511: 								if (ItemMixPetNo != i && pc.ridePetNo != i) {
; 13512: 									DropPetWndflag = true;
; 13513: 									DropI = i;
; 13514: 								}
; 13515: 							}
; 13516: 						}
; 13517: 					}
; 13518: 					if (éä¸­å® ç© == i) {
; 13519: 						if (pet[i].freeName[0] != NULL) {
; 13520: 							sprintf(moji, "%-14s", pet[i].freeName);
; 13521: 							StockFontBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 38 + (i * 60), FONT_PRIO_FRONT, 4, moji, 0);
; 13522: 						}
; 13523: 						sprintf(moji, "%-3d", pet[i].level);
; 13524: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 50, ä¸´æ¶èµ·å§Y + 54 + (i * 60), FONT_PRIO_FRONT, 4, moji, 0);
; 13525: 						sprintf(moji, "%d/%d", pet[i].hp, pet[i].maxHp);
; 13526: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 97, ä¸´æ¶èµ·å§Y + 54 + (i * 60), FONT_PRIO_FRONT, 4, moji, 0);
; 13527: 					}
; 13528: 					else {
; 13529: 						if (pet[i].freeName[0] != NULL) {
; 13530: 							sprintf(moji, "%-16s", pet[i].freeName);
; 13531: 							StockFontBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 38 + (i * 60), FONT_PRIO_FRONT, 0, moji, 0);
; 13532: 						}
; 13533: 						sprintf(moji, "%-3d", pet[i].level);
; 13534: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 50, ä¸´æ¶èµ·å§Y + 54 + (i * 60), FONT_PRIO_FRONT, 0, moji, 0);
; 13535: 						sprintf(moji, "%d/%d", pet[i].hp, pet[i].maxHp);
; 13536: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 97, ä¸´æ¶èµ·å§Y + 54 + (i * 60), FONT_PRIO_FRONT, 0, moji, 0);
; 13537: 					}
; 13538: 				}
; 13539: 
; 13540: 				int btnNo;
; 13541: 				if (pet[i].useFlag == TRUE) {
; 13542: 					btnNo = 0;// ä¼æ¯
; 13543: 					if (pc.selectPetNo[i] == TRUE) {
; 13544: 						btnNo = 1;
; 13545: 					}
; 13546: 					if (i == pc.battlePetNo) {// ææ
; 13547: 						btnNo = 2;
; 13548: 					}
; 13549: 					if (i == pc.mailPetNo) {// é®ä»¶
; 13550: 						btnNo = 3;
; 13551: 					}
; 13552: 					if (i == pc.ridePetNo) { //éªå® 		
; 13553: 						btnNo = 4;
; 13554: 					}
; 13555: 					petWndFontNo[i] = StockDispBuffer(ä¸´æ¶èµ·å§X + 40, ä¸´æ¶èµ·å§Y + 36 + (i * 60), DISP_PRIO_IME3, 52028 + btnNo, 2);
; 13556: 				}
; 13557: 			}
; 13558: 			if (DropPetWndflag == true) {
; 13559: 				sprintf(moji, "ä½ íì¸è¦ä¸¢å¼å® ç©[%s]åï¼", pet[DropI].name);
; 13560: 				StockFontBuffer(ä¸´æ¶å¾æ X - 110, ä¸´æ¶å¾æ Y - 30, FONT_PRIO_AFRONT, 6, moji, 0);
; 13561: 				StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_YES_NO_WND, 52034, 0);
; 13562: 				int å® ç©ä¸¢å¼ç¡®è®¤æé® = StockDispBuffer(ä¸´æ¶å¾æ X - 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_YES_NO_BTN, 52035, 2);
; 13563: 				int å® ç©ä¸¢å¼ì·¨ìæé® = StockDispBuffer(ä¸´æ¶å¾æ X + 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_YES_NO_BTN, 52036, 2);
; 13564: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13565: 					if (HitDispNo == å® ç©ä¸¢å¼ç¡®è®¤æé®) {
; 13566: 						i = DropI;
; 13567: 						DropI = -1;
; 13568: 						lssproto_DP_send(sockfd, nowGx, nowGy, i);
; 13569: 						if (pc.selectPetNo[i] == TRUE) {
; 13570: 							pc.selectPetNo[i] = FALSE;
; 13571: 							BattlePetStMenCnt--;
; 13572: 						}
; 13573: 						if (i == pc.battlePetNo)
; 13574: 							lssproto_KS_send(sockfd, -1);
; 13575: 						if (pc.mailPetNo == i) {
; 13576: 							pc.mailPetNo = -1;
; 13577: 						}
; 13578: 						play_se(217, 320, 240);
; 13579: 						DropPetWndflag = false;
; 13580: 					}
; 13581: 					if (HitDispNo == å® ç©ä¸¢å¼ì·¨ìæé®) {
; 13582: 						DropPetWndflag = false;
; 13583: 						DropI = -1;
; 13584: 						play_se(217, 320, 240);
; 13585: 					}
; 13586: 				}
; 13587: 			}
; 13588: 			if (éä¸­å® ç© >= 0) {
; 13589: 				if (HitDispNo == petWndFontNo[3]) {
; 13590: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13591: 						if (pet[éä¸­å® ç©].changeNameFlag == TRUE) {
; 13592: 							if (pActMenuWnd3 == NULL) {
; 13593: 								pActMenuWnd3 = MakeWindowDisp(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, ä¸´æ¶å¾æ X + 272, ä¸´æ¶å¾æ Y + 88, 0, -1);
; 13594: 								play_se(202, 320, 240);
; 13595: 								petNameChange.buffer[0] = NULL;
; 13596: 								petNameChange.cnt = 0;
; 13597: 								petNameChange.cursor = 0;
; 13598: 								petNameChange.len = 12;
; 13599: 								petNameChange.color = 10;
; 13600: 								petNameChange.x = ä¸´æ¶å¾æ X - 40;
; 13601: 								petNameChange.y = ä¸´æ¶å¾æ Y - 30;
; 13602: 								petNameChange.fontPrio = FONT_PRIO_AFRONT;
; 13603: 								petWndBtnFlag[3] = TRUE;
; 13604: 							}
; 13605: 							else {
; 13606: 								DeathAction(pActMenuWnd3);
; 13607: 								pActMenuWnd3 = NULL;
; 13608: 								GetKeyInputFocus(&MyChatBuffer);
; 13609: 								play_se(203, 320, 240);
; 13610: 							}
; 13611: 							petWndBtnFlag[3] = TRUE;
; 13612: 						}
; 13613: 						else {
; 13614: 							play_se(220, 320, 240);
; 13615: 						}
; 13616: 					}
; 13617: 					if (mouse.state & MOUSE_LEFT_CRICK && petWndBtnFlag[3] == TRUE) {
; 13618: 						petWndBtnFlag[3] = TRUE;
; 13619: 					}
; 13620: 					else {
; 13621: 						petWndBtnFlag[3] = FALSE;
; 13622: 					}
; 13623: 				}
; 13624: 				else {
; 13625: 					petWndBtnFlag[3] = FALSE;
; 13626: 				}
; 13627: 				if (pActMenuWnd3 != NULL) {
; 13628: 					if (pActMenuWnd3->hp > 0) {
; 13629: 						GetKeyInputFocus(&petNameChange);
; 13630: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13631: 							if (HitDispNo == petWndFontNo[5]) {
; 13632: 								KeyboardReturn();
; 13633: 							}
; 13634: 							if (HitDispNo == petWndFontNo[6]) {
; 13635: 								DeathAction(pActMenuWnd3);
; 13636: 								pActMenuWnd3 = NULL;
; 13637: 								GetKeyInputFocus(&MyChatBuffer);
; 13638: 								play_se(203, 320, 240);
; 13639: 							}
; 13640: 						}
; 13641: 						if (pActMenuWnd3 != NULL) {
; 13642: 							StockFontBuffer2(&petNameChange);
; 13643: 							petWndFontNo[5] = StockDispBuffer(ä¸´æ¶å¾æ X - 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_DRAG, 52035, 2);
; 13644: 							petWndFontNo[6] = StockDispBuffer(ä¸´æ¶å¾æ X + 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_DRAG, 52036, 2);
; 13645: 						}
; 13646: 						StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_DRAG, 52065, 0);
; 13647: 					}
; 13648: 				}
; 13649: 				//ä¿®æ¹åå­
; 13650: 				petWndFontNo[3] = StockDispBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 348, DISP_PRIO_IME3, 52045, 2);
; 13651: 
; 13652: 				//ä¿®æ¹åå­END
; 13653: 				if (pet[éä¸­å® ç©].freeName[0] != NULL) {
; 13654: 					sprintf(moji, "%-s", pet[éä¸­å® ç©].freeName);
; 13655: 					//CenteringStr( pet[éä¸­å® ç© ].freeName, moji, PET_NAME_LEN );
; 13656: 				}
; 13657: 				else {
; 13658: 					sprintf(moji, "%-s", pet[éä¸­å® ç©].name);
; 13659: 					//CenteringStr( pet[ éä¸­å® ç© ].name, moji, PET_NAME_LEN );
; 13660: 				}
; 13661: 
; 13662: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 210, ä¸´æ¶èµ·å§Y + 27, FONT_PRIO_FRONT, 1, moji, 0);
; 13663: 
; 13664: 				sprintf(moji, "%-8d", pet[éä¸­å® ç©].exp);
; 13665: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 55, FONT_PRIO_FRONT, 0, moji, 0);
; 13666: 				sprintf(moji, "%-8d", pet[éä¸­å® ç©].maxExp);
; 13667: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 77, FONT_PRIO_FRONT, 0, moji, 0);
; 13668: 				sprintf(moji, "%d/%d", pet[éä¸­å® ç©].hp, pet[éä¸­å® ç©].maxHp);
; 13669: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 98, FONT_PRIO_FRONT, 0, moji, 0);
; 13670: 				sprintf(moji, "%d", pet[éä¸­å® ç©].atk);
; 13671: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 119, FONT_PRIO_FRONT, 0, moji, 0);
; 13672: 				sprintf(moji, "%d", pet[éä¸­å® ç©].def);
; 13673: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 140, FONT_PRIO_FRONT, 0, moji, 0);
; 13674: 				sprintf(moji, "%d", pet[éä¸­å® ç©].quick);
; 13675: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 160, FONT_PRIO_FRONT, 0, moji, 0);
; 13676: 				sprintf(moji, "%d", pet[éä¸­å® ç©].ai);
; 13677: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 180, FONT_PRIO_FRONT, 0, moji, 0);
; 13678: 
; 13679: 				if (pet[éä¸­å® ç©].earth > 0) {
; 13680: 					int å±æ§é = (int)(pet[éä¸­å® ç©].earth * 0.6);
; 13681: 					StockBoxDispBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 129, ä¸´æ¶èµ·å§X + 328 + å±æ§é, ä¸´æ¶èµ·å§Y + 129 + 10, DISP_PRIO_IME3, SYSTEM_PAL_GREEN, 1);
; 13682: 				}
; 13683: 				if (pet[éä¸­å® ç©].water > 0) {
; 13684: 					int å±æ§é = (int)(pet[éä¸­å® ç©].water * 0.6);
; 13685: 					StockBoxDispBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 147, ä¸´æ¶èµ·å§X + 328 + å±æ§é, ä¸´æ¶èµ·å§Y + 147 + 10, DISP_PRIO_IME3, SYSTEM_PAL_AQUA, 1);
; 13686: 				}
; 13687: 				if (pet[éä¸­å® ç©].fire > 0) {
; 13688: 					int å±æ§é = (int)(pet[éä¸­å® ç©].fire * 0.6);
; 13689: 					StockBoxDispBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 165, ä¸´æ¶èµ·å§X + 328 + å±æ§é, ä¸´æ¶èµ·å§Y + 165 + 10, DISP_PRIO_IME3, SYSTEM_PAL_RED, 1);
; 13690: 				}
; 13691: 				if (pet[éä¸­å® ç©].wind > 0) {
; 13692: 					int å±æ§é = (int)(pet[éä¸­å® ç©].wind * 0.6);
; 13693: 					StockBoxDispBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 183, ä¸´æ¶èµ·å§X + 328 + å±æ§é, ä¸´æ¶èµ·å§Y + 183 + 10, DISP_PRIO_IME3, SYSTEM_PAL_YELLOW, 1);
; 13694: 				}
; 13695: 				int j;
; 13696: 				for (j = 0; j < pet[éä¸­å® ç©].maxSkill; j++) {
; 13697: 					if (petSkill[éä¸­å® ç©][j].useFlag == TRUE) {
; 13698: 						int color = FONT_PAL_GRAY;
; 13699: 						sprintf(moji, "%-16s", petSkill[éä¸­å® ç©][j].name);
; 13700: 						if (petSkill[éä¸­å® ç©][j].field != PETSKILL_FIELD_BATTLE) {
; 13701: 							color = FONT_PAL_WHITE;
; 13702: 						}
; 13703: 						int å® ç©æè½ç´¢å¼;
; 13704: 						å® ç©æè½ç´¢å¼ = StockFontBuffer(ä¸´æ¶èµ·å§X + 410, ä¸´æ¶èµ·å§Y + 42 + (j * 20), FONT_PRIO_FRONT, color, moji, 2);
; 13705: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13706: 							if (HitFontNo == å® ç©æè½ç´¢å¼) {
; 13707: 								å® ç©æè½éä¸­ID = j;
; 13708: 								play_se(217, 320, 240);
; 13709: 							}
; 13710: 						}
; 13711: 					}
; 13712: 				}
; 13713: 				if (pActPet == NULL) {
; 13714: 					if ((pet[éä¸­å® ç©].graNo == 101493) || (pet[éä¸­å® ç©].graNo == 101494) || (pet[éä¸­å® ç©].graNo == 101495) || (pet[éä¸­å® ç©].graNo == 101496)) {
; 13715: 						pActPet = MakeAnimDisp(ä¸´æ¶èµ·å§X + 360, ä¸´æ¶èµ·å§Y + 78, pet[éä¸­å® ç©].graNo, ANIM_DISP_PET);
; 13716: 					}
; 13717: 					else {
; 13718: 						pActPet = MakeAnimDisp(ä¸´æ¶èµ·å§X + 360, ä¸´æ¶èµ·å§Y + 98, pet[éä¸­å® ç©].graNo, ANIM_DISP_PET);
; 13719: 					}
; 13720: 				}
; 13721: #ifdef _NB_å® ç©åå§å¼
; 13722: 				char ä¸´æ¶å­ä¸²[56];
; 13723: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].initlevel);
; 13724: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13725: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 240, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13726: 
; 13727: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].inithp);
; 13728: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13729: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 305, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13730: 
; 13731: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].initatk);
; 13732: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13733: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 361, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13734: 
; 13735: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].initdef);
; 13736: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13737: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 421, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13738: 
; 13739: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].initquick);
; 13740: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13741: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 481, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13742: 				//æé¿çè®¡ç®
; 13743: 				float å® è¡æé¿, å® æ»æé¿, å® é²æé¿, å® ææé¿, å® æ»æé¿;
; 13744: 				float å® è¡é¢æµ, å® æ»é¢æµ, å® é²é¢æµ, å® æé¢æµ;
; 13745: 				int å® ææå = (pet[éä¸­å® ç©].maxHp / 4) + pet[éä¸­å® ç©].atk + pet[éä¸­å® ç©].def + pet[éä¸­å® ç©].quick;//ææå
; 13746: 				int å® ç©æé¿ç­çº§å·® = pet[éä¸­å® ç©].level - pet[éä¸­å® ç©].initlevel;//è®¡ç®ç­çº§å·®
; 13747: 				if (å® ç©æé¿ç­çº§å·® >= 0) {//å¦æç­çº§å·®å¤§äº0æè¿è¡è®¡ç®
; 13748: 					å® è¡æé¿ = (float)(pet[éä¸­å® ç©].maxHp - pet[éä¸­å® ç©].inithp) / å® ç©æé¿ç­çº§å·®;
; 13749: 					å® æ»æé¿ = (float)(pet[éä¸­å® ç©].atk - pet[éä¸­å® ç©].initatk) / å® ç©æé¿ç­çº§å·®;
; 13750: 					å® é²æé¿ = (float)(pet[éä¸­å® ç©].def - pet[éä¸­å® ç©].initdef) / å® ç©æé¿ç­çº§å·®;
; 13751: 					å® ææé¿ = (float)(pet[éä¸­å® ç©].quick - pet[éä¸­å® ç©].initquick) / å® ç©æé¿ç­çº§å·®;
; 13752: 
; 13753: 					å® æ»æé¿ = (float)(å® æ»æé¿ + å® é²æé¿ + å® ææé¿);//æ»æé¿
; 13754: 					int å® ç©é¢æµç­çº§å·® = 140 - pet[éä¸­å® ç©].initlevel;//è®¡ç®ç­çº§å·®(é¢æµå¼-åå§å¼)
; 13755: 					å® è¡é¢æµ = (float)(å® è¡æé¿ * å® ç©é¢æµç­çº§å·®) + pet[éä¸­å® ç©].inithp;
; 13756: 					å® æ»é¢æµ = (float)(å® æ»æé¿ * å® ç©é¢æµç­çº§å·®) + pet[éä¸­å® ç©].initatk;
; 13757: 					å® é²é¢æµ = (float)(å® é²æé¿ * å® ç©é¢æµç­çº§å·®) + pet[éä¸­å® ç©].initdef;
; 13758: 					å® æé¢æµ = (float)(å® ææé¿ * å® ç©é¢æµç­çº§å·®) + pet[éä¸­å® ç©].initquick;
; 13759: 				}
; 13760: 				//è®¡ç®ç»æ
; 13761: 				//æå°é¢æµå¼
; 13762: 				sprintf(ä¸´æ¶å­ä¸², "%d", 140);
; 13763: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13764: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 240, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13765: 				sprintf(ä¸´æ¶å­ä¸², "%.0f", å® è¡é¢æµ);
; 13766: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13767: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 305, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13768: 				sprintf(ä¸´æ¶å­ä¸², "%.0f", å® æ»é¢æµ);
; 13769: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13770: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 361, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13771: 				sprintf(ä¸´æ¶å­ä¸², "%.0f", å® é²é¢æµ);
; 13772: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13773: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 421, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13774: 				sprintf(ä¸´æ¶å­ä¸², "%.0f", å® æé¢æµ);
; 13775: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13776: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 481, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13777: 
; 13778: 				//æå°æé¿ç
; 13779: 				sprintf(ä¸´æ¶å­ä¸², "%d", 140);
; 13780: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13781: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 240, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13782: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® è¡æé¿);
; 13783: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13784: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 305, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13785: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® æ»æé¿);
; 13786: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13787: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 361, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13788: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® é²æé¿);
; 13789: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13790: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 421, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13791: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® ææé¿);
; 13792: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13793: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 481, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13794: 
; 13795: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® æ»æé¿);
; 13796: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13797: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 241, ä¸´æ¶èµ·å§Y + 293, FONT_PRIO_FRONT, 0, moji, 0);
; 13798: 
; 13799: 				sprintf(ä¸´æ¶å­ä¸², "%d", å® ææå);
; 13800: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13801: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 361, ä¸´æ¶èµ·å§Y + 293, FONT_PRIO_FRONT, 0, moji, 0);
; 13802: 
; 13803: 				if (pet[éä¸­å® ç©].fusion) {
; 13804: 					sprintf(moji, "èå%dè½¬", pet[éä¸­å® ç©].trn);
; 13805: 				}
; 13806: 				else {
; 13807: 					sprintf(moji, "%dè½¬", pet[éä¸­å® ç©].trn);
; 13808: 				}
; 13809: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 421, ä¸´æ¶èµ·å§Y + 293, FONT_PRIO_FRONT, 5, moji, 0);
; 13810: #endif
; 13811: 				int æç§æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶èµ·å§X + 192, ä¸´æ¶èµ·å§Y + 32, DISP_PRIO_IME3, 52037, 1);//å³é­æé®
; 13812: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13813: 					if (HitDispNo == æç§æé®ç´¢å¼) {
; 13814: 						if (pet[éä¸­å® ç©].graNo != 100451 && pet[éä¸­å® ç©].graNo != 100432 &&
; 13815: 							pet[éä¸­å® ç©].graNo != 101280 && pet[éä¸­å® ç©].graNo != 101281 &&
; 13816: 							pet[éä¸­å® ç©].graNo != 100015 && pet[éä¸­å® ç©].graNo != 100018 &&
; 13817: 							pet[éä¸­å® ç©].graNo != 101279 && pet[éä¸­å® ç©].graNo != 100401 &&
; 13818: 							pet[éä¸­å® ç©].graNo != 101414 && pet[éä¸­å® ç©].graNo != 101167 &&
; 13819: 							pet[éä¸­å® ç©].graNo != 101172 && pet[éä¸­å® ç©].graNo != 102011 &&
; 13820: 							pet[éä¸­å® ç©].graNo != 102012) {	// fix åªäºå® ç©ä¸è½ç§å® ç§
; 13821: 							int tblNo = GetPettblNo(pet[éä¸­å® ç©].graNo);
; 13822: 							int albumNo;
; 13823: 							if (0 <= tblNo && tblNo < MAX_PET_TBL) {
; 13824: 								if (tblNo == 442) albumNo = 0;
; 13825: 								albumNo = PetAlbumTbl[tblNo].albumNo;
; 13826: 								if (albumNo != -1) {
; 13827: 									PetAlbum[albumNo].flag = 2;
; 13828: 									if (pet[éä¸­å® ç©].freeName[0] != NULL) {
; 13829: 										strcpy(PetAlbum[albumNo].freeName, pet[éä¸­å® ç©].freeName);
; 13830: 									}
; 13831: 									else {
; 13832: 										strcpy(PetAlbum[albumNo].freeName, PetAlbumTbl[tblNo].name);
; 13833: 									}
; 13834: 									strcpy(PetAlbum[albumNo].name, PetAlbumTbl[tblNo].name);
; 13835: 									PetAlbum[albumNo].faceGraNo = PetAlbumTbl[tblNo].faceGraNo;
; 13836: 									PetAlbum[albumNo].level = pet[éä¸­å® ç©].level;
; 13837: 									PetAlbum[albumNo].maxHp = pet[éä¸­å® ç©].maxHp;
; 13838: 									PetAlbum[albumNo].str = pet[éä¸­å® ç©].atk;
; 13839: 									PetAlbum[albumNo].quick = pet[éä¸­å® ç©].quick;
; 13840: 									PetAlbum[albumNo].def = pet[éä¸­å® ç©].def;
; 13841: 									PetAlbum[albumNo].earth = pet[éä¸­å® ç©].earth;
; 13842: 									PetAlbum[albumNo].water = pet[éä¸­å® ç©].water;
; 13843: 									PetAlbum[albumNo].fire = pet[éä¸­å® ç©].fire;
; 13844: 									PetAlbum[albumNo].wind = pet[éä¸­å® ç©].wind;
; 13845: 									play_se(201, 320, 240);
; 13846: 									sprintf(moji, "%s ç§ç¸å®æï¼", PetAlbum[albumNo].freeName);
; 13847: 									StockChatBufferLine(moji, FONT_PAL_WHITE);
; 13848: 									SaveAlbum(albumNo);
; 13849: 								}
; 13850: 								else {
; 13851: 									play_se(220, 320, 240);
; 13852: 								}
; 13853: 							}
; 13854: 							else {
; 13855: 								play_se(220, 320, 240);
; 13856: 							}
; 13857: 						}
; 13858: 					}
; 13859: 				}
; 13860: 				int ç§å® æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶èµ·å§X + 215, ä¸´æ¶èµ·å§Y + 210, DISP_PRIO_IME3, 52038, 1);//å³é­æé®
; 13861: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13862: 					if (HitDispNo == ç§å® æé®ç´¢å¼) {
; 13863: 						char ç§å® åå®¹[128];
; 13864: 						sprintf_s(ç§å® åå®¹, "{pet=%d,str=[%s]}", pet[éä¸­å® ç©].petindex, pet[éä¸­å® ç©].name);
; 13865: 						strcat_s(MyChatBuffer.buffer, ç§å® åå®¹);
; 13866: 						MyChatBuffer.cursor = strlen(MyChatBuffer.buffer);
; 13867: 						MyChatBuffer.cnt = strlen(MyChatBuffer.buffer);
; 13868: 						DeathAction(pActMenuWnd);
; 13869: 						pActMenuWnd = NULL;
; 13870: 						DeathAction(pActPet);
; 13871: 						pActPet = NULL;
; 13872: 						petWndNo = 0;
; 13873: 						GetKeyInputFocus(&MyChatBuffer);
; 13874: 						MenuToggleFlag ^= JOY_CTRL_P;
; 13875: 						play_se(203, 320, 240);
; 13876: 					}
; 13877: 				}
; 13878: 			}
; 13879: 			if (å® ç©æè½éä¸­ID >= 0) {
; 13880: 				char *splitPoint = petSkill[éä¸­å® ç©][å® ç©æè½éä¸­ID].memo;
; 13881: 				int ä¸´æ¶æå°Y = ä¸´æ¶èµ·å§Y + 334;
; 13882: 				while (1) {//åè¡æå°
; 13883: 					if (strlen(splitPoint) > 72) {
; 13884: 						strncpy(moji, splitPoint, 72);
; 13885: 						moji[72] = NULL;
; 13886: 						if (GetStrLastByte(moji) == 3) {
; 13887: 							moji[71] = NULL;
; 13888: 							splitPoint += 71;
; 13889: 						}
; 13890: 						else {
; 13891: 							moji[72] = NULL;
; 13892: 							splitPoint += 72;
; 13893: 						}
; 13894: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 230, ä¸´æ¶æå°Y, FONT_PRIO_FRONT, 11, moji, 0);
; 13895: 						ä¸´æ¶æå°Y += 20;
; 13896: 					}
; 13897: 					else {
; 13898: 						strcpy(moji, splitPoint);
; 13899: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 230, ä¸´æ¶æå°Y, FONT_PRIO_FRONT, 11, moji, 0);
; 13900: 						break;
; 13901: 					}
; 13902: 				}
; 13903: 			}
; 13904: 			int å³é­æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶å¾æ X + 264, ä¸´æ¶å¾æ Y - 180, DISP_PRIO_IME3, IMAGE_çªå£å³é­X, 1);//å³é­æé®
; 13905: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13906: 				if (HitDispNo == å³é­æé®ç´¢å¼) {
; 13907: 					DeathAction(pActMenuWnd);
; 13908: 					pActMenuWnd = NULL;
; 13909: 					DeathAction(pActPet);
; 13910: 					pActPet = NULL;
; 13911: 					petWndNo = 0;
; 13912: 					GetKeyInputFocus(&MyChatBuffer);
; 13913: 					MenuToggleFlag ^= JOY_CTRL_P;
; 13914: 					play_se(203, 320, 240);
; 13915: 				}
; 13916: 			}
; 13917: 			StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_MENU, 52027, 1);//ç»èæ¯å¾
; 13918: 
; 13919: 
; 13920: 		}
; 13921: #else
; 13922: 		switch (petWndNo) {

  04397	a1 00 00 00 00	 mov	 eax, DWORD PTR ?petWndNo@@3IA
  0439c	83 f8 03	 cmp	 eax, 3
  0439f	0f 87 58 2d 00
	00		 ja	 $LN4770@MenuProc
  043a5	eb 25		 jmp	 SHORT $LN3962@MenuProc
$LN857@MenuProc:

; 13320: 			StockChatBufferLine("ìì ê¸°ë¥ì´ì©ì, íí¸ë¥¼ë³ê²½í ììì´ì!", FONT_PAL_RED);

  043a7	6a 00		 push	 0
  043a9	6a 06		 push	 6
  043ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@KBOLHIJH@?$LL?s?A?$KB?$LB?b?$LE?I?$MA?L?$LP?k?$LN?C?0?5?F?d?F?$KO?$LI?$KG?$LK?$KP?$LA?f?G?R?$LM?v?$LO@
  043b0	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine

; 13321: 			MenuToggleFlag ^= JOY_CTRL_P;
; 13322: 			// ä¸ºäºä¸æ§è¡å® ç©è§çªæä»¥è®¾å®ä¸º 3,ä¸ä½äº
; 13323: 			petWndNo = 3;

  043b5	b8 03 00 00 00	 mov	 eax, 3
  043ba	83 c4 0c	 add	 esp, 12			; 0000000cH
  043bd	81 35 00 00 00
	00 00 00 00 10	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 268435456 ; MenuToggleFlag, 10000000H
  043c7	a3 00 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, eax
$LN3962@MenuProc:

; 13324: 		}
; 13325: #endif
; 13326: #ifdef _NB_å® ç©æ è¯¦æ
; 13327: 		int ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y;
; 13328: 		//è®¡ç®å¾çä¸­å¿
; 13329: 		if (ResoMode == åè¾¨ç::mode800) {
; 13330: 			ä¸´æ¶å¾æ X = 800 / 2;
; 13331: 			ä¸´æ¶å¾æ Y = 600 / 2;
; 13332: 			ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13333: 			ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13334: 		}
; 13335: 		else if (ResoMode == åè¾¨ç::mode1024) {
; 13336: 			ä¸´æ¶å¾æ X = 1024 / 2;
; 13337: 			ä¸´æ¶å¾æ Y = 768 / 2;
; 13338: 			ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13339: 			ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13340: 		}
; 13341: 		else {
; 13342: 			ä¸´æ¶å¾æ X = 640 / 2;
; 13343: 			ä¸´æ¶å¾æ Y = 480 / 2;
; 13344: 			ä¸´æ¶èµ·å§X = ä¸´æ¶å¾æ X - 568 / 2;
; 13345: 			ä¸´æ¶èµ·å§Y = ä¸´æ¶å¾æ Y - 358 / 2;
; 13346: 		}
; 13347: 		if (pActMenuWnd == NULL) {
; 13348: 			pActMenuWnd = MakeWindowDisp(ä¸´æ¶èµ·å§X, ä¸´æ¶èµ·å§Y, ä¸´æ¶èµ·å§X + 568, ä¸´æ¶èµ·å§Y + 358, 0, -1);
; 13349: 			for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;
; 13350: 			BattlePetReceivePetNo = -1;
; 13351: 			DropPetWndflag = false;
; 13352: 			DropI = -1;
; 13353: 			éä¸­å® ç© = -1;
; 13354: 			å® ç©æè½éä¸­ID = -1;
; 13355: 		}
; 13356: 		else {
; 13357: 			if (pActMenuWnd->hp > 0) {
; 13358: 				for (i = 0; i < 5; i++) {
; 13359: 					if (pet[i].useFlag == FALSE) {
; 13360: 						if (i == pc.battlePetNo)
; 13361: 							pc.battlePetNo = -1;
; 13362: 						if (i == pc.mailPetNo)
; 13363: 							pc.mailPetNo = -1;
; 13364: 						pc.selectPetNo[i] = FALSE;
; 13365: 					}
; 13366: 				}
; 13367: 				BattlePetStMenCnt = 0;
; 13368: 				for (i = 0; i < 5; i++) {
; 13369: 					if (pc.selectPetNo[i] == TRUE) BattlePetStMenCnt++;
; 13370: 				}
; 13371: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13372: 					for (i = 0; i < 5; i++) {
; 13373: 						if (pet[i].useFlag == TRUE && BattlePetReceivePetNo != i) {
; 13374: 							if (HitDispNo == petWndFontNo[i]) {
; 13375: #if 1
; 13376: 								if (i == pc.mailPetNo) {
; 13377: 									pc.mailPetNo = -1;
; 13378: 									if ((bNewServer & 0xf000000) == 0xf000000)
; 13379: 										lssproto_PETST_send(sockfd, i, 0);
; 13380: 									checkRidePet(i);
; 13381: 									play_se(217, 320, 240);
; 13382: 								}
; 13383: 								else
; 13384: 									if (i == pc.ridePetNo && pc.graNo != SPR_pet021 && pc.graNo != 100362) {//éé£
; 13385: 										char buf[64];
; 13386: 										sprintf(buf, "R|P|-1");
; 13387: 										if (bNewServer)
; 13388: 											lssproto_FM_send(sockfd, buf);
; 13389: 										else
; 13390: 											lssproto_FM_send(sockfd, buf);
; 13391: 										play_se(217, 320, 240);
; 13392: 										if ((bNewServer & 0xf000000) == 0xf000000)
; 13393: 											lssproto_PETST_send(sockfd, i, 0);
; 13394: 									}
; 13395: 									else
; 13396: 										if (i == pc.battlePetNo && BattlePetReceiveFlag == FALSE) {
; 13397: 											if (bNewServer)
; 13398: 												lssproto_KS_send(sockfd, -1);
; 13399: 											else
; 13400: 												old_lssproto_KS_send(sockfd, -1);
; 13401: 											BattlePetReceiveFlag = TRUE;
; 13402: 											BattlePetReceivePetNo = i;
; 13403: 											pc.selectPetNo[i] = FALSE;
; 13404: 											BattlePetStMenCnt--;
; 13405: 											if (pc.mailPetNo == -1) {
; 13406: 												pc.mailPetNo = i;
; 13407: 												if ((bNewServer & 0xf000000) == 0xf000000)
; 13408: 													lssproto_PETST_send(sockfd, i, 4);
; 13409: 											}
; 13410: 											else {
; 13411: 												checkRidePet(i);
; 13412: 												if ((bNewServer & 0xf000000) == 0xf000000)
; 13413: 													lssproto_PETST_send(sockfd, i, 0);
; 13414: 											}
; 13415: 											play_se(217, 320, 240);
; 13416: 										}
; 13417: 										else
; 13418: 											if (pc.selectPetNo[i] == TRUE) {
; 13419: 												if (pc.battlePetNo == -1 && BattlePetReceiveFlag == FALSE) {
; 13420: 													if (pet[i].hp > 0) {
; 13421: 														if (bNewServer)
; 13422: 															lssproto_KS_send(sockfd, i);
; 13423: 														else
; 13424: 															old_lssproto_KS_send(sockfd, i);
; 13425: 														BattlePetReceiveFlag = TRUE;
; 13426: 														BattlePetReceivePetNo = i;
; 13427: 														play_se(217, 320, 240);
; 13428: 													}
; 13429: 													else {
; 13430: 														play_se(220, 320, 240);
; 13431: 													}
; 13432: 												}
; 13433: 												else {
; 13434: 													if (pc.mailPetNo == -1) {
; 13435: 														pc.mailPetNo = i;
; 13436: 														if ((bNewServer & 0xf000000) == 0xf000000)
; 13437: 															lssproto_PETST_send(sockfd, i, 4);
; 13438: 													}
; 13439: 													else {
; 13440: 														checkRidePet(i);
; 13441: 														if ((bNewServer & 0xf000000) == 0xf000000)
; 13442: 															lssproto_PETST_send(sockfd, i, 0);
; 13443: 													}
; 13444: 													pc.selectPetNo[i] = FALSE;
; 13445: 													BattlePetStMenCnt--;
; 13446: 													play_se(217, 320, 240);
; 13447: 												}
; 13448: 											}
; 13449: 											else
; 13450: 												if (pc.selectPetNo[i] == FALSE) {
; 13451: 													if (BattlePetStMenCnt < ç­å¾å® æ°é) {
; 13452: 														pc.selectPetNo[i] = TRUE;
; 13453: 														BattlePetStMenCnt++;
; 13454: 														play_se(217, 320, 240);
; 13455: 														if ((bNewServer & 0xf000000) == 0xf000000)
; 13456: 															lssproto_PETST_send(sockfd, i, 1);
; 13457: 													}
; 13458: 													else {
; 13459: 														if (pc.mailPetNo == -1) {
; 13460: 															pc.mailPetNo = i;
; 13461: 															play_se(217, 320, 240);
; 13462: 															if ((bNewServer & 0xf000000) == 0xf000000)
; 13463: 																lssproto_PETST_send(sockfd, i, 4);
; 13464: 														}
; 13465: 														else {
; 13466: 															checkRidePet(i);
; 13467: 														}
; 13468: 													}
; 13469: 												}
; 13470: #endif
; 13471: 							}
; 13472: 							if (HitFontNo == petWndFontNo[i + 5]) {
; 13473: 								petStatusNo = i;
; 13474: 								petWndNo = 1;
; 13475: 								DeathAction(pActMenuWnd);
; 13476: 								pActMenuWnd = NULL;
; 13477: 								play_se(202, 320, 240);
; 13478: 							}
; 13479: 
; 13480: 						}
; 13481: 					}
; 13482: 				}
; 13483: 
; 13484: 			}
; 13485: 			int å® ç©æé®ç´¢å¼;
; 13486: 			for (i = 0; i < 5; i++) {//éåå® ç©
; 13487: 				if (pet[i].useFlag == TRUE) {
; 13488: 					sprintf(moji, "%-16s", pet[i].name);
; 13489: 					if (éä¸­å® ç© == i) {
; 13490: 						å® ç©æé®ç´¢å¼ = StockFontBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 22 + (i * 60), FONT_PRIO_FRONT, 4, moji, 2);
; 13491: 					}
; 13492: 					else {
; 13493: 						å® ç©æé®ç´¢å¼ = StockFontBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 22 + (i * 60), FONT_PRIO_FRONT, 0, moji, 2);
; 13494: 					}
; 13495: 
; 13496: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13497: 						if (HitFontNo == å® ç©æé®ç´¢å¼) {
; 13498: 							if (pActPet != NULL) {
; 13499: 								DeathAction(pActPet);
; 13500: 								pActPet = NULL;
; 13501: 							}
; 13502: 							éä¸­å® ç© = i;
; 13503: 							å® ç©æè½éä¸­ID = -1;
; 13504: 							petStatusNo = i;
; 13505: 							play_se(202, 320, 240);
; 13506: 						}
; 13507: 					}
; 13508: 					if (mouse.onceState & MOUSE_RIGHT_CRICK) {
; 13509: 						if (pet[i].useFlag == TRUE && eventWarpSendFlag == FALSE) {
; 13510: 							if (HitFontNo == å® ç©æé®ç´¢å¼) {
; 13511: 								if (ItemMixPetNo != i && pc.ridePetNo != i) {
; 13512: 									DropPetWndflag = true;
; 13513: 									DropI = i;
; 13514: 								}
; 13515: 							}
; 13516: 						}
; 13517: 					}
; 13518: 					if (éä¸­å® ç© == i) {
; 13519: 						if (pet[i].freeName[0] != NULL) {
; 13520: 							sprintf(moji, "%-14s", pet[i].freeName);
; 13521: 							StockFontBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 38 + (i * 60), FONT_PRIO_FRONT, 4, moji, 0);
; 13522: 						}
; 13523: 						sprintf(moji, "%-3d", pet[i].level);
; 13524: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 50, ä¸´æ¶èµ·å§Y + 54 + (i * 60), FONT_PRIO_FRONT, 4, moji, 0);
; 13525: 						sprintf(moji, "%d/%d", pet[i].hp, pet[i].maxHp);
; 13526: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 97, ä¸´æ¶èµ·å§Y + 54 + (i * 60), FONT_PRIO_FRONT, 4, moji, 0);
; 13527: 					}
; 13528: 					else {
; 13529: 						if (pet[i].freeName[0] != NULL) {
; 13530: 							sprintf(moji, "%-16s", pet[i].freeName);
; 13531: 							StockFontBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 38 + (i * 60), FONT_PRIO_FRONT, 0, moji, 0);
; 13532: 						}
; 13533: 						sprintf(moji, "%-3d", pet[i].level);
; 13534: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 50, ä¸´æ¶èµ·å§Y + 54 + (i * 60), FONT_PRIO_FRONT, 0, moji, 0);
; 13535: 						sprintf(moji, "%d/%d", pet[i].hp, pet[i].maxHp);
; 13536: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 97, ä¸´æ¶èµ·å§Y + 54 + (i * 60), FONT_PRIO_FRONT, 0, moji, 0);
; 13537: 					}
; 13538: 				}
; 13539: 
; 13540: 				int btnNo;
; 13541: 				if (pet[i].useFlag == TRUE) {
; 13542: 					btnNo = 0;// ä¼æ¯
; 13543: 					if (pc.selectPetNo[i] == TRUE) {
; 13544: 						btnNo = 1;
; 13545: 					}
; 13546: 					if (i == pc.battlePetNo) {// ææ
; 13547: 						btnNo = 2;
; 13548: 					}
; 13549: 					if (i == pc.mailPetNo) {// é®ä»¶
; 13550: 						btnNo = 3;
; 13551: 					}
; 13552: 					if (i == pc.ridePetNo) { //éªå® 		
; 13553: 						btnNo = 4;
; 13554: 					}
; 13555: 					petWndFontNo[i] = StockDispBuffer(ä¸´æ¶èµ·å§X + 40, ä¸´æ¶èµ·å§Y + 36 + (i * 60), DISP_PRIO_IME3, 52028 + btnNo, 2);
; 13556: 				}
; 13557: 			}
; 13558: 			if (DropPetWndflag == true) {
; 13559: 				sprintf(moji, "ä½ íì¸è¦ä¸¢å¼å® ç©[%s]åï¼", pet[DropI].name);
; 13560: 				StockFontBuffer(ä¸´æ¶å¾æ X - 110, ä¸´æ¶å¾æ Y - 30, FONT_PRIO_AFRONT, 6, moji, 0);
; 13561: 				StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_YES_NO_WND, 52034, 0);
; 13562: 				int å® ç©ä¸¢å¼ç¡®è®¤æé® = StockDispBuffer(ä¸´æ¶å¾æ X - 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_YES_NO_BTN, 52035, 2);
; 13563: 				int å® ç©ä¸¢å¼ì·¨ìæé® = StockDispBuffer(ä¸´æ¶å¾æ X + 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_YES_NO_BTN, 52036, 2);
; 13564: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13565: 					if (HitDispNo == å® ç©ä¸¢å¼ç¡®è®¤æé®) {
; 13566: 						i = DropI;
; 13567: 						DropI = -1;
; 13568: 						lssproto_DP_send(sockfd, nowGx, nowGy, i);
; 13569: 						if (pc.selectPetNo[i] == TRUE) {
; 13570: 							pc.selectPetNo[i] = FALSE;
; 13571: 							BattlePetStMenCnt--;
; 13572: 						}
; 13573: 						if (i == pc.battlePetNo)
; 13574: 							lssproto_KS_send(sockfd, -1);
; 13575: 						if (pc.mailPetNo == i) {
; 13576: 							pc.mailPetNo = -1;
; 13577: 						}
; 13578: 						play_se(217, 320, 240);
; 13579: 						DropPetWndflag = false;
; 13580: 					}
; 13581: 					if (HitDispNo == å® ç©ä¸¢å¼ì·¨ìæé®) {
; 13582: 						DropPetWndflag = false;
; 13583: 						DropI = -1;
; 13584: 						play_se(217, 320, 240);
; 13585: 					}
; 13586: 				}
; 13587: 			}
; 13588: 			if (éä¸­å® ç© >= 0) {
; 13589: 				if (HitDispNo == petWndFontNo[3]) {
; 13590: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13591: 						if (pet[éä¸­å® ç©].changeNameFlag == TRUE) {
; 13592: 							if (pActMenuWnd3 == NULL) {
; 13593: 								pActMenuWnd3 = MakeWindowDisp(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, ä¸´æ¶å¾æ X + 272, ä¸´æ¶å¾æ Y + 88, 0, -1);
; 13594: 								play_se(202, 320, 240);
; 13595: 								petNameChange.buffer[0] = NULL;
; 13596: 								petNameChange.cnt = 0;
; 13597: 								petNameChange.cursor = 0;
; 13598: 								petNameChange.len = 12;
; 13599: 								petNameChange.color = 10;
; 13600: 								petNameChange.x = ä¸´æ¶å¾æ X - 40;
; 13601: 								petNameChange.y = ä¸´æ¶å¾æ Y - 30;
; 13602: 								petNameChange.fontPrio = FONT_PRIO_AFRONT;
; 13603: 								petWndBtnFlag[3] = TRUE;
; 13604: 							}
; 13605: 							else {
; 13606: 								DeathAction(pActMenuWnd3);
; 13607: 								pActMenuWnd3 = NULL;
; 13608: 								GetKeyInputFocus(&MyChatBuffer);
; 13609: 								play_se(203, 320, 240);
; 13610: 							}
; 13611: 							petWndBtnFlag[3] = TRUE;
; 13612: 						}
; 13613: 						else {
; 13614: 							play_se(220, 320, 240);
; 13615: 						}
; 13616: 					}
; 13617: 					if (mouse.state & MOUSE_LEFT_CRICK && petWndBtnFlag[3] == TRUE) {
; 13618: 						petWndBtnFlag[3] = TRUE;
; 13619: 					}
; 13620: 					else {
; 13621: 						petWndBtnFlag[3] = FALSE;
; 13622: 					}
; 13623: 				}
; 13624: 				else {
; 13625: 					petWndBtnFlag[3] = FALSE;
; 13626: 				}
; 13627: 				if (pActMenuWnd3 != NULL) {
; 13628: 					if (pActMenuWnd3->hp > 0) {
; 13629: 						GetKeyInputFocus(&petNameChange);
; 13630: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13631: 							if (HitDispNo == petWndFontNo[5]) {
; 13632: 								KeyboardReturn();
; 13633: 							}
; 13634: 							if (HitDispNo == petWndFontNo[6]) {
; 13635: 								DeathAction(pActMenuWnd3);
; 13636: 								pActMenuWnd3 = NULL;
; 13637: 								GetKeyInputFocus(&MyChatBuffer);
; 13638: 								play_se(203, 320, 240);
; 13639: 							}
; 13640: 						}
; 13641: 						if (pActMenuWnd3 != NULL) {
; 13642: 							StockFontBuffer2(&petNameChange);
; 13643: 							petWndFontNo[5] = StockDispBuffer(ä¸´æ¶å¾æ X - 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_DRAG, 52035, 2);
; 13644: 							petWndFontNo[6] = StockDispBuffer(ä¸´æ¶å¾æ X + 50, ä¸´æ¶å¾æ Y + 30, DISP_PRIO_DRAG, 52036, 2);
; 13645: 						}
; 13646: 						StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_DRAG, 52065, 0);
; 13647: 					}
; 13648: 				}
; 13649: 				//ä¿®æ¹åå­
; 13650: 				petWndFontNo[3] = StockDispBuffer(ä¸´æ¶èµ·å§X + 60, ä¸´æ¶èµ·å§Y + 348, DISP_PRIO_IME3, 52045, 2);
; 13651: 
; 13652: 				//ä¿®æ¹åå­END
; 13653: 				if (pet[éä¸­å® ç©].freeName[0] != NULL) {
; 13654: 					sprintf(moji, "%-s", pet[éä¸­å® ç©].freeName);
; 13655: 					//CenteringStr( pet[éä¸­å® ç© ].freeName, moji, PET_NAME_LEN );
; 13656: 				}
; 13657: 				else {
; 13658: 					sprintf(moji, "%-s", pet[éä¸­å® ç©].name);
; 13659: 					//CenteringStr( pet[ éä¸­å® ç© ].name, moji, PET_NAME_LEN );
; 13660: 				}
; 13661: 
; 13662: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 210, ä¸´æ¶èµ·å§Y + 27, FONT_PRIO_FRONT, 1, moji, 0);
; 13663: 
; 13664: 				sprintf(moji, "%-8d", pet[éä¸­å® ç©].exp);
; 13665: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 55, FONT_PRIO_FRONT, 0, moji, 0);
; 13666: 				sprintf(moji, "%-8d", pet[éä¸­å® ç©].maxExp);
; 13667: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 77, FONT_PRIO_FRONT, 0, moji, 0);
; 13668: 				sprintf(moji, "%d/%d", pet[éä¸­å® ç©].hp, pet[éä¸­å® ç©].maxHp);
; 13669: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 98, FONT_PRIO_FRONT, 0, moji, 0);
; 13670: 				sprintf(moji, "%d", pet[éä¸­å® ç©].atk);
; 13671: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 119, FONT_PRIO_FRONT, 0, moji, 0);
; 13672: 				sprintf(moji, "%d", pet[éä¸­å® ç©].def);
; 13673: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 140, FONT_PRIO_FRONT, 0, moji, 0);
; 13674: 				sprintf(moji, "%d", pet[éä¸­å® ç©].quick);
; 13675: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 160, FONT_PRIO_FRONT, 0, moji, 0);
; 13676: 				sprintf(moji, "%d", pet[éä¸­å® ç©].ai);
; 13677: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 242, ä¸´æ¶èµ·å§Y + 180, FONT_PRIO_FRONT, 0, moji, 0);
; 13678: 
; 13679: 				if (pet[éä¸­å® ç©].earth > 0) {
; 13680: 					int å±æ§é = (int)(pet[éä¸­å® ç©].earth * 0.6);
; 13681: 					StockBoxDispBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 129, ä¸´æ¶èµ·å§X + 328 + å±æ§é, ä¸´æ¶èµ·å§Y + 129 + 10, DISP_PRIO_IME3, SYSTEM_PAL_GREEN, 1);
; 13682: 				}
; 13683: 				if (pet[éä¸­å® ç©].water > 0) {
; 13684: 					int å±æ§é = (int)(pet[éä¸­å® ç©].water * 0.6);
; 13685: 					StockBoxDispBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 147, ä¸´æ¶èµ·å§X + 328 + å±æ§é, ä¸´æ¶èµ·å§Y + 147 + 10, DISP_PRIO_IME3, SYSTEM_PAL_AQUA, 1);
; 13686: 				}
; 13687: 				if (pet[éä¸­å® ç©].fire > 0) {
; 13688: 					int å±æ§é = (int)(pet[éä¸­å® ç©].fire * 0.6);
; 13689: 					StockBoxDispBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 165, ä¸´æ¶èµ·å§X + 328 + å±æ§é, ä¸´æ¶èµ·å§Y + 165 + 10, DISP_PRIO_IME3, SYSTEM_PAL_RED, 1);
; 13690: 				}
; 13691: 				if (pet[éä¸­å® ç©].wind > 0) {
; 13692: 					int å±æ§é = (int)(pet[éä¸­å® ç©].wind * 0.6);
; 13693: 					StockBoxDispBuffer(ä¸´æ¶èµ·å§X + 328, ä¸´æ¶èµ·å§Y + 183, ä¸´æ¶èµ·å§X + 328 + å±æ§é, ä¸´æ¶èµ·å§Y + 183 + 10, DISP_PRIO_IME3, SYSTEM_PAL_YELLOW, 1);
; 13694: 				}
; 13695: 				int j;
; 13696: 				for (j = 0; j < pet[éä¸­å® ç©].maxSkill; j++) {
; 13697: 					if (petSkill[éä¸­å® ç©][j].useFlag == TRUE) {
; 13698: 						int color = FONT_PAL_GRAY;
; 13699: 						sprintf(moji, "%-16s", petSkill[éä¸­å® ç©][j].name);
; 13700: 						if (petSkill[éä¸­å® ç©][j].field != PETSKILL_FIELD_BATTLE) {
; 13701: 							color = FONT_PAL_WHITE;
; 13702: 						}
; 13703: 						int å® ç©æè½ç´¢å¼;
; 13704: 						å® ç©æè½ç´¢å¼ = StockFontBuffer(ä¸´æ¶èµ·å§X + 410, ä¸´æ¶èµ·å§Y + 42 + (j * 20), FONT_PRIO_FRONT, color, moji, 2);
; 13705: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13706: 							if (HitFontNo == å® ç©æè½ç´¢å¼) {
; 13707: 								å® ç©æè½éä¸­ID = j;
; 13708: 								play_se(217, 320, 240);
; 13709: 							}
; 13710: 						}
; 13711: 					}
; 13712: 				}
; 13713: 				if (pActPet == NULL) {
; 13714: 					if ((pet[éä¸­å® ç©].graNo == 101493) || (pet[éä¸­å® ç©].graNo == 101494) || (pet[éä¸­å® ç©].graNo == 101495) || (pet[éä¸­å® ç©].graNo == 101496)) {
; 13715: 						pActPet = MakeAnimDisp(ä¸´æ¶èµ·å§X + 360, ä¸´æ¶èµ·å§Y + 78, pet[éä¸­å® ç©].graNo, ANIM_DISP_PET);
; 13716: 					}
; 13717: 					else {
; 13718: 						pActPet = MakeAnimDisp(ä¸´æ¶èµ·å§X + 360, ä¸´æ¶èµ·å§Y + 98, pet[éä¸­å® ç©].graNo, ANIM_DISP_PET);
; 13719: 					}
; 13720: 				}
; 13721: #ifdef _NB_å® ç©åå§å¼
; 13722: 				char ä¸´æ¶å­ä¸²[56];
; 13723: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].initlevel);
; 13724: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13725: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 240, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13726: 
; 13727: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].inithp);
; 13728: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13729: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 305, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13730: 
; 13731: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].initatk);
; 13732: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13733: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 361, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13734: 
; 13735: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].initdef);
; 13736: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13737: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 421, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13738: 
; 13739: 				sprintf(ä¸´æ¶å­ä¸², "%d", pet[éä¸­å® ç©].initquick);
; 13740: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13741: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 481, ä¸´æ¶èµ·å§Y + 227, FONT_PRIO_FRONT, 0, moji, 0);
; 13742: 				//æé¿çè®¡ç®
; 13743: 				float å® è¡æé¿, å® æ»æé¿, å® é²æé¿, å® ææé¿, å® æ»æé¿;
; 13744: 				float å® è¡é¢æµ, å® æ»é¢æµ, å® é²é¢æµ, å® æé¢æµ;
; 13745: 				int å® ææå = (pet[éä¸­å® ç©].maxHp / 4) + pet[éä¸­å® ç©].atk + pet[éä¸­å® ç©].def + pet[éä¸­å® ç©].quick;//ææå
; 13746: 				int å® ç©æé¿ç­çº§å·® = pet[éä¸­å® ç©].level - pet[éä¸­å® ç©].initlevel;//è®¡ç®ç­çº§å·®
; 13747: 				if (å® ç©æé¿ç­çº§å·® >= 0) {//å¦æç­çº§å·®å¤§äº0æè¿è¡è®¡ç®
; 13748: 					å® è¡æé¿ = (float)(pet[éä¸­å® ç©].maxHp - pet[éä¸­å® ç©].inithp) / å® ç©æé¿ç­çº§å·®;
; 13749: 					å® æ»æé¿ = (float)(pet[éä¸­å® ç©].atk - pet[éä¸­å® ç©].initatk) / å® ç©æé¿ç­çº§å·®;
; 13750: 					å® é²æé¿ = (float)(pet[éä¸­å® ç©].def - pet[éä¸­å® ç©].initdef) / å® ç©æé¿ç­çº§å·®;
; 13751: 					å® ææé¿ = (float)(pet[éä¸­å® ç©].quick - pet[éä¸­å® ç©].initquick) / å® ç©æé¿ç­çº§å·®;
; 13752: 
; 13753: 					å® æ»æé¿ = (float)(å® æ»æé¿ + å® é²æé¿ + å® ææé¿);//æ»æé¿
; 13754: 					int å® ç©é¢æµç­çº§å·® = 140 - pet[éä¸­å® ç©].initlevel;//è®¡ç®ç­çº§å·®(é¢æµå¼-åå§å¼)
; 13755: 					å® è¡é¢æµ = (float)(å® è¡æé¿ * å® ç©é¢æµç­çº§å·®) + pet[éä¸­å® ç©].inithp;
; 13756: 					å® æ»é¢æµ = (float)(å® æ»æé¿ * å® ç©é¢æµç­çº§å·®) + pet[éä¸­å® ç©].initatk;
; 13757: 					å® é²é¢æµ = (float)(å® é²æé¿ * å® ç©é¢æµç­çº§å·®) + pet[éä¸­å® ç©].initdef;
; 13758: 					å® æé¢æµ = (float)(å® ææé¿ * å® ç©é¢æµç­çº§å·®) + pet[éä¸­å® ç©].initquick;
; 13759: 				}
; 13760: 				//è®¡ç®ç»æ
; 13761: 				//æå°é¢æµå¼
; 13762: 				sprintf(ä¸´æ¶å­ä¸², "%d", 140);
; 13763: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13764: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 240, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13765: 				sprintf(ä¸´æ¶å­ä¸², "%.0f", å® è¡é¢æµ);
; 13766: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13767: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 305, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13768: 				sprintf(ä¸´æ¶å­ä¸², "%.0f", å® æ»é¢æµ);
; 13769: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13770: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 361, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13771: 				sprintf(ä¸´æ¶å­ä¸², "%.0f", å® é²é¢æµ);
; 13772: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13773: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 421, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13774: 				sprintf(ä¸´æ¶å­ä¸², "%.0f", å® æé¢æµ);
; 13775: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 6);
; 13776: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 481, ä¸´æ¶èµ·å§Y + 249, FONT_PRIO_FRONT, 0, moji, 0);
; 13777: 
; 13778: 				//æå°æé¿ç
; 13779: 				sprintf(ä¸´æ¶å­ä¸², "%d", 140);
; 13780: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13781: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 240, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13782: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® è¡æé¿);
; 13783: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13784: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 305, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13785: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® æ»æé¿);
; 13786: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13787: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 361, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13788: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® é²æé¿);
; 13789: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13790: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 421, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13791: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® ææé¿);
; 13792: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13793: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 481, ä¸´æ¶èµ·å§Y + 271, FONT_PRIO_FRONT, 0, moji, 0);
; 13794: 
; 13795: 				sprintf(ä¸´æ¶å­ä¸², "%.4f", å® æ»æé¿);
; 13796: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13797: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 241, ä¸´æ¶èµ·å§Y + 293, FONT_PRIO_FRONT, 0, moji, 0);
; 13798: 
; 13799: 				sprintf(ä¸´æ¶å­ä¸², "%d", å® ææå);
; 13800: 				CenteringStr(ä¸´æ¶å­ä¸², moji, 5);
; 13801: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 361, ä¸´æ¶èµ·å§Y + 293, FONT_PRIO_FRONT, 0, moji, 0);
; 13802: 
; 13803: 				if (pet[éä¸­å® ç©].fusion) {
; 13804: 					sprintf(moji, "èå%dè½¬", pet[éä¸­å® ç©].trn);
; 13805: 				}
; 13806: 				else {
; 13807: 					sprintf(moji, "%dè½¬", pet[éä¸­å® ç©].trn);
; 13808: 				}
; 13809: 				StockFontBuffer(ä¸´æ¶èµ·å§X + 421, ä¸´æ¶èµ·å§Y + 293, FONT_PRIO_FRONT, 5, moji, 0);
; 13810: #endif
; 13811: 				int æç§æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶èµ·å§X + 192, ä¸´æ¶èµ·å§Y + 32, DISP_PRIO_IME3, 52037, 1);//å³é­æé®
; 13812: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13813: 					if (HitDispNo == æç§æé®ç´¢å¼) {
; 13814: 						if (pet[éä¸­å® ç©].graNo != 100451 && pet[éä¸­å® ç©].graNo != 100432 &&
; 13815: 							pet[éä¸­å® ç©].graNo != 101280 && pet[éä¸­å® ç©].graNo != 101281 &&
; 13816: 							pet[éä¸­å® ç©].graNo != 100015 && pet[éä¸­å® ç©].graNo != 100018 &&
; 13817: 							pet[éä¸­å® ç©].graNo != 101279 && pet[éä¸­å® ç©].graNo != 100401 &&
; 13818: 							pet[éä¸­å® ç©].graNo != 101414 && pet[éä¸­å® ç©].graNo != 101167 &&
; 13819: 							pet[éä¸­å® ç©].graNo != 101172 && pet[éä¸­å® ç©].graNo != 102011 &&
; 13820: 							pet[éä¸­å® ç©].graNo != 102012) {	// fix åªäºå® ç©ä¸è½ç§å® ç§
; 13821: 							int tblNo = GetPettblNo(pet[éä¸­å® ç©].graNo);
; 13822: 							int albumNo;
; 13823: 							if (0 <= tblNo && tblNo < MAX_PET_TBL) {
; 13824: 								if (tblNo == 442) albumNo = 0;
; 13825: 								albumNo = PetAlbumTbl[tblNo].albumNo;
; 13826: 								if (albumNo != -1) {
; 13827: 									PetAlbum[albumNo].flag = 2;
; 13828: 									if (pet[éä¸­å® ç©].freeName[0] != NULL) {
; 13829: 										strcpy(PetAlbum[albumNo].freeName, pet[éä¸­å® ç©].freeName);
; 13830: 									}
; 13831: 									else {
; 13832: 										strcpy(PetAlbum[albumNo].freeName, PetAlbumTbl[tblNo].name);
; 13833: 									}
; 13834: 									strcpy(PetAlbum[albumNo].name, PetAlbumTbl[tblNo].name);
; 13835: 									PetAlbum[albumNo].faceGraNo = PetAlbumTbl[tblNo].faceGraNo;
; 13836: 									PetAlbum[albumNo].level = pet[éä¸­å® ç©].level;
; 13837: 									PetAlbum[albumNo].maxHp = pet[éä¸­å® ç©].maxHp;
; 13838: 									PetAlbum[albumNo].str = pet[éä¸­å® ç©].atk;
; 13839: 									PetAlbum[albumNo].quick = pet[éä¸­å® ç©].quick;
; 13840: 									PetAlbum[albumNo].def = pet[éä¸­å® ç©].def;
; 13841: 									PetAlbum[albumNo].earth = pet[éä¸­å® ç©].earth;
; 13842: 									PetAlbum[albumNo].water = pet[éä¸­å® ç©].water;
; 13843: 									PetAlbum[albumNo].fire = pet[éä¸­å® ç©].fire;
; 13844: 									PetAlbum[albumNo].wind = pet[éä¸­å® ç©].wind;
; 13845: 									play_se(201, 320, 240);
; 13846: 									sprintf(moji, "%s ç§ç¸å®æï¼", PetAlbum[albumNo].freeName);
; 13847: 									StockChatBufferLine(moji, FONT_PAL_WHITE);
; 13848: 									SaveAlbum(albumNo);
; 13849: 								}
; 13850: 								else {
; 13851: 									play_se(220, 320, 240);
; 13852: 								}
; 13853: 							}
; 13854: 							else {
; 13855: 								play_se(220, 320, 240);
; 13856: 							}
; 13857: 						}
; 13858: 					}
; 13859: 				}
; 13860: 				int ç§å® æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶èµ·å§X + 215, ä¸´æ¶èµ·å§Y + 210, DISP_PRIO_IME3, 52038, 1);//å³é­æé®
; 13861: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13862: 					if (HitDispNo == ç§å® æé®ç´¢å¼) {
; 13863: 						char ç§å® åå®¹[128];
; 13864: 						sprintf_s(ç§å® åå®¹, "{pet=%d,str=[%s]}", pet[éä¸­å® ç©].petindex, pet[éä¸­å® ç©].name);
; 13865: 						strcat_s(MyChatBuffer.buffer, ç§å® åå®¹);
; 13866: 						MyChatBuffer.cursor = strlen(MyChatBuffer.buffer);
; 13867: 						MyChatBuffer.cnt = strlen(MyChatBuffer.buffer);
; 13868: 						DeathAction(pActMenuWnd);
; 13869: 						pActMenuWnd = NULL;
; 13870: 						DeathAction(pActPet);
; 13871: 						pActPet = NULL;
; 13872: 						petWndNo = 0;
; 13873: 						GetKeyInputFocus(&MyChatBuffer);
; 13874: 						MenuToggleFlag ^= JOY_CTRL_P;
; 13875: 						play_se(203, 320, 240);
; 13876: 					}
; 13877: 				}
; 13878: 			}
; 13879: 			if (å® ç©æè½éä¸­ID >= 0) {
; 13880: 				char *splitPoint = petSkill[éä¸­å® ç©][å® ç©æè½éä¸­ID].memo;
; 13881: 				int ä¸´æ¶æå°Y = ä¸´æ¶èµ·å§Y + 334;
; 13882: 				while (1) {//åè¡æå°
; 13883: 					if (strlen(splitPoint) > 72) {
; 13884: 						strncpy(moji, splitPoint, 72);
; 13885: 						moji[72] = NULL;
; 13886: 						if (GetStrLastByte(moji) == 3) {
; 13887: 							moji[71] = NULL;
; 13888: 							splitPoint += 71;
; 13889: 						}
; 13890: 						else {
; 13891: 							moji[72] = NULL;
; 13892: 							splitPoint += 72;
; 13893: 						}
; 13894: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 230, ä¸´æ¶æå°Y, FONT_PRIO_FRONT, 11, moji, 0);
; 13895: 						ä¸´æ¶æå°Y += 20;
; 13896: 					}
; 13897: 					else {
; 13898: 						strcpy(moji, splitPoint);
; 13899: 						StockFontBuffer(ä¸´æ¶èµ·å§X + 230, ä¸´æ¶æå°Y, FONT_PRIO_FRONT, 11, moji, 0);
; 13900: 						break;
; 13901: 					}
; 13902: 				}
; 13903: 			}
; 13904: 			int å³é­æé®ç´¢å¼ = StockDispBuffer(ä¸´æ¶å¾æ X + 264, ä¸´æ¶å¾æ Y - 180, DISP_PRIO_IME3, IMAGE_çªå£å³é­X, 1);//å³é­æé®
; 13905: 			if (mouse.onceState & MOUSE_LEFT_CRICK) {
; 13906: 				if (HitDispNo == å³é­æé®ç´¢å¼) {
; 13907: 					DeathAction(pActMenuWnd);
; 13908: 					pActMenuWnd = NULL;
; 13909: 					DeathAction(pActPet);
; 13910: 					pActPet = NULL;
; 13911: 					petWndNo = 0;
; 13912: 					GetKeyInputFocus(&MyChatBuffer);
; 13913: 					MenuToggleFlag ^= JOY_CTRL_P;
; 13914: 					play_se(203, 320, 240);
; 13915: 				}
; 13916: 			}
; 13917: 			StockDispBuffer(ä¸´æ¶å¾æ X, ä¸´æ¶å¾æ Y, DISP_PRIO_MENU, 52027, 1);//ç»èæ¯å¾
; 13918: 
; 13919: 
; 13920: 		}
; 13921: #else
; 13922: 		switch (petWndNo) {

  043cc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN4311@MenuProc[eax*4]
$LN858@MenuProc:

; 13923: 		case 0:
; 13924: 			if (pActMenuWnd == NULL) {

  043d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  043da	75 6e		 jne	 SHORT $LN859@MenuProc

; 13925: 				pActMenuWnd = MakeWindowDisp(4, 4, 272, 320, 0, -1);

  043dc	6a ff		 push	 -1
  043de	6a 00		 push	 0
  043e0	68 40 01 00 00	 push	 320			; 00000140H
  043e5	68 10 01 00 00	 push	 272			; 00000110H
  043ea	6a 04		 push	 4
  043ec	6a 04		 push	 4
  043ee	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  043f3	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  043fa	83 c4 18	 add	 esp, 24			; 00000018H
  043fd	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  04402	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0

; 13926: 				for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;
; 13927: 				BattlePetReceivePetNo = -1;

  04409	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?BattlePetReceivePetNo@@3HA, -1 ; BattlePetReceivePetNo
  04413	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0

; 13928: #ifdef _DROPPETWND					// (å¯å¼æ¾) Syu ADD ä¸¢å¼å® ç©ç¡®è®¤
; 13929: 				DropPetWndflag = false;

  0441a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?DropPetWndflag@@3_NA, 0 ; DropPetWndflag
  04421	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0

; 13930: 				DropI = -1;

  04428	66 89 35 00 00
	00 00		 mov	 WORD PTR ?DropI@@3FA, si ; DropI
  0442f	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  04436	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0
  0443d	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0

; 13931: #endif
; 13932: 			}

  04445	e9 b3 2c 00 00	 jmp	 $LN4770@MenuProc
$LN859@MenuProc:

; 13933: 			else {
; 13934: 				if (pActMenuWnd->hp > 0) {

  0444a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  04450	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  04454	0f 8e a3 2c 00
	00		 jle	 $LN4770@MenuProc

; 13935: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_PET_WND_VIEW, 1);

  0445a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0445d	6a 01		 push	 1
  0445f	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_PET_WND_VIEW@@3HA ; CG_PET_WND_VIEW
  04465	6a 68		 push	 104			; 00000068H
  04467	ff 70 18	 push	 DWORD PTR [eax+24]
  0446a	ff 70 14	 push	 DWORD PTR [eax+20]
  0446d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04472	83 c4 14	 add	 esp, 20			; 00000014H
  04475	ba 76 00 00 00	 mov	 edx, OFFSET ?pet@@3PAUPET@@A+118

; 13936: 					for (i = 0; i < 5; i++) {

  0447a	33 c9		 xor	 ecx, ecx
  0447c	0f 1f 40 00	 npad	 4
$LL121@MenuProc:

; 13937: 						if (pet[i].useFlag == FALSE) {

  04480	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  04484	75 2e		 jne	 SHORT $LN119@MenuProc

; 13938: 							if (i == pc.battlePetNo)

  04486	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  0448d	3b c8		 cmp	 ecx, eax
  0448f	75 07		 jne	 SHORT $LN863@MenuProc

; 13939: 								pc.battlePetNo = -1;

  04491	66 89 35 aa 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+170, si
$LN863@MenuProc:

; 13940: 							if (i == pc.mailPetNo)

  04498	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182
  0449f	3b c8		 cmp	 ecx, eax
  044a1	75 07		 jne	 SHORT $LN864@MenuProc

; 13941: 								pc.mailPetNo = -1;

  044a3	66 89 35 b6 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+182, si
$LN864@MenuProc:

; 13942: 							pc.selectPetNo[i] = FALSE;

  044aa	33 c0		 xor	 eax, eax
  044ac	66 89 04 4d ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[ecx*2+172], ax
$LN119@MenuProc:

; 13936: 					for (i = 0; i < 5; i++) {

  044b4	81 c2 78 0b 00
	00		 add	 edx, 2936		; 00000b78H
  044ba	41		 inc	 ecx
  044bb	81 fa ce 39 00
	00		 cmp	 edx, OFFSET ?pet@@3PAUPET@@A+14798
  044c1	7c bd		 jl	 SHORT $LL121@MenuProc

; 13943: 						}
; 13944: 					}
; 13945: 					BattlePetStMenCnt = 0;

  044c3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattlePetStMenCnt@@3HA, 0 ; BattlePetStMenCnt

; 13946: 					for (i = 0; i < 5; i++) {

  044cd	b8 ac 00 00 00	 mov	 eax, OFFSET ?pc@@3UPC@@A+172
$LL124@MenuProc:

; 13947: 						if (pc.selectPetNo[i] == TRUE) BattlePetStMenCnt++;

  044d2	66 83 38 01	 cmp	 WORD PTR [eax], 1
  044d6	75 06		 jne	 SHORT $LN122@MenuProc
  044d8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?BattlePetStMenCnt@@3HA ; BattlePetStMenCnt
$LN122@MenuProc:

; 13946: 					for (i = 0; i < 5; i++) {

  044de	83 c0 02	 add	 eax, 2
  044e1	3d b6 00 00 00	 cmp	 eax, OFFSET ?pc@@3UPC@@A+182
  044e6	7c ea		 jl	 SHORT $LL124@MenuProc

; 13948: 					}
; 13949: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  044e8	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  044ef	0f 84 04 06 00
	00		 je	 $LN4755@MenuProc

; 13950: 						for (i = 0; i < 5; i++) {

  044f5	33 f6		 xor	 esi, esi
  044f7	bf 54 00 00 00	 mov	 edi, OFFSET ?pet@@3PAUPET@@A+84
  044fc	0f 1f 40 00	 npad	 4
$LL127@MenuProc:

; 13951: 							if (pet[i].useFlag == TRUE && BattlePetReceivePetNo != i) {

  04500	66 83 7f 22 01	 cmp	 WORD PTR [edi+34], 1
  04505	0f 85 46 04 00
	00		 jne	 $LN125@MenuProc
  0450b	39 35 00 00 00
	00		 cmp	 DWORD PTR ?BattlePetReceivePetNo@@3HA, esi ; BattlePetReceivePetNo
  04511	0f 84 3a 04 00
	00		 je	 $LN125@MenuProc

; 13952: #ifdef _NB_ç§å® ç©
; 13953: 								if (HitDispNo == ç§å® æé®ç´¢å¼[i]) {

  04517	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0451c	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?â³?äÎ?ßãìÚ@@3PAHA[esi*4]
  04523	0f 85 7d 00 00
	00		 jne	 $LN868@MenuProc

; 13954: 									char ç§å® åå®¹[128];
; 13955: 									sprintf_s(ç§å® åå®¹, "{pet=%d,str=[%s]}", pet[i].petindex, pet[i].name);

  04529	57		 push	 edi
  0452a	ff b7 90 0a 00
	00		 push	 DWORD PTR [edi+2704]
  04530	8d 85 d0 f2 ff
	ff		 lea	 eax, DWORD PTR _â³??é»$46[ebp]
  04536	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GNJPGDIA@?$HLpet?$DN?$CFd?0str?$DN?$FL?$CFs?$FN?$HN@
  0453b	50		 push	 eax
  0453c	e8 00 00 00 00	 call	 ??$sprintf_s@$0IA@@@YAHAAY0IA@DPBDZZ ; sprintf_s<128>
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 79   : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  04541	8d 85 d0 f2 ff
	ff		 lea	 eax, DWORD PTR _â³??é»$46[ebp]
  04547	50		 push	 eax
  04548	68 04 01 00 00	 push	 260			; 00000104H
  0454d	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  04552	e8 00 00 00 00	 call	 _strcat_s
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 13957: 									MyChatBuffer.cursor = strlen(MyChatBuffer.buffer);

  04557	b9 00 00 00 00	 mov	 ecx, OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 79   : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

  0455c	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 13957: 									MyChatBuffer.cursor = strlen(MyChatBuffer.buffer);

  0455f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL4312@MenuProc:
  04562	8a 01		 mov	 al, BYTE PTR [ecx]
  04564	41		 inc	 ecx
  04565	84 c0		 test	 al, al
  04567	75 f9		 jne	 SHORT $LL4312@MenuProc
  04569	2b ca		 sub	 ecx, edx
  0456b	88 0d 09 01 00
	00		 mov	 BYTE PTR ?MyChatBuffer@@3USTR_BUFFER@@A+265, cl

; 13958: 									MyChatBuffer.cnt = strlen(MyChatBuffer.buffer);

  04571	b9 00 00 00 00	 mov	 ecx, OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  04576	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  04579	0f 1f 80 00 00
	00 00		 npad	 7
$LL4313@MenuProc:
  04580	8a 01		 mov	 al, BYTE PTR [ecx]
  04582	41		 inc	 ecx
  04583	84 c0		 test	 al, al
  04585	75 f9		 jne	 SHORT $LL4313@MenuProc

; 13959: 									play_se(217, 320, 240);

  04587	68 f0 00 00 00	 push	 240			; 000000f0H
  0458c	2b ca		 sub	 ecx, edx
  0458e	68 40 01 00 00	 push	 320			; 00000140H
  04593	68 d9 00 00 00	 push	 217			; 000000d9H
  04598	88 0d 07 01 00
	00		 mov	 BYTE PTR ?MyChatBuffer@@3USTR_BUFFER@@A+263, cl
  0459e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  045a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN868@MenuProc:

; 13960: 								}
; 13961: #endif
; 13962: 								if (HitDispNo == petWndFontNo[i]) {

  045a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  045ab	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA[esi*4]
  045b2	0f 85 b5 02 00
	00		 jne	 $LN4752@MenuProc

; 13963: #if 1
; 13964: 									if (i == pc.mailPetNo) {

  045b8	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182
  045bf	3b f0		 cmp	 esi, eax
  045c1	75 44		 jne	 SHORT $LN870@MenuProc

; 13965: 										pc.mailPetNo = -1;

  045c3	83 c8 ff	 or	 eax, -1
  045c6	66 a3 b6 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+182, ax
$LN882@MenuProc:

; 13999: 												else {
; 14000: 													if ((bNewServer & 0xf000000) == 0xf000000)
; 14001: 														lssproto_PETST_send(sockfd, i, 0);
; 14002: 												}
; 14003: 												play_se(217, 320, 240);

  045cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bNewServer@@3HA ; bNewServer
  045d1	25 00 00 00 0f	 and	 eax, 251658240		; 0f000000H
  045d6	3d 00 00 00 0f	 cmp	 eax, 251658240		; 0f000000H
  045db	75 11		 jne	 SHORT $LN885@MenuProc
  045dd	6a 00		 push	 0
$LN5106@MenuProc:
  045df	56		 push	 esi
  045e0	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  045e6	e8 00 00 00 00	 call	 ?lssproto_PETST_send@@YAXHHH@Z ; lssproto_PETST_send
  045eb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN885@MenuProc:
  045ee	68 f0 00 00 00	 push	 240			; 000000f0H
  045f3	68 40 01 00 00	 push	 320			; 00000140H
  045f8	68 d9 00 00 00	 push	 217			; 000000d9H
  045fd	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 14004: 											}

  04602	e9 63 02 00 00	 jmp	 $LN5107@MenuProc
$LN870@MenuProc:

; 13966: 										if ((bNewServer & 0xf000000) == 0xf000000)
; 13967: 											lssproto_PETST_send(sockfd, i, 0);
; 13968: 										play_se(217, 320, 240);
; 13969: 									}
; 13970: 									else
; 13971: 										// when ride Pet
; 13972: 										if (i == pc.ridePetNo && pc.graNo != SPR_pet021&& pc.graNo != 100362) {//éé£

  04607	3b 35 18 51 00
	00		 cmp	 esi, DWORD PTR ?pc@@3UPC@@A+20760
  0460d	75 6f		 jne	 SHORT $LN873@MenuProc
  0460f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A
  04614	3d a3 87 01 00	 cmp	 eax, 100259		; 000187a3H
  04619	74 63		 je	 SHORT $LN873@MenuProc
  0461b	3d 0a 88 01 00	 cmp	 eax, 100362		; 0001880aH
  04620	74 5c		 je	 SHORT $LN873@MenuProc

; 13973: 											char buf[64];
; 13974: 											sprintf(buf, "R|P|-1");

  04622	8d 85 50 f6 ff
	ff		 lea	 eax, DWORD PTR _buf$56[ebp]
  04628	68 00 00 00 00	 push	 OFFSET ??_C@_06EFALBHEL@R?$HMP?$HM?91@
  0462d	50		 push	 eax
  0462e	e8 00 00 00 00	 call	 _sprintf
  04633	83 c4 08	 add	 esp, 8

; 13975: 											if (bNewServer)

  04636	8d 85 50 f6 ff
	ff		 lea	 eax, DWORD PTR _buf$56[ebp]
  0463c	50		 push	 eax
  0463d	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd

; 13976: 												lssproto_FM_send(sockfd, buf);
; 13977: 											else
; 13978: 												lssproto_FM_send(sockfd, buf);
; 13979: 											play_se(217, 320, 240);

  04643	e8 00 00 00 00	 call	 ?lssproto_FM_send@@YAXHPAD@Z ; lssproto_FM_send
  04648	83 c4 08	 add	 esp, 8
  0464b	68 f0 00 00 00	 push	 240			; 000000f0H
  04650	68 40 01 00 00	 push	 320			; 00000140H
  04655	68 d9 00 00 00	 push	 217			; 000000d9H
  0465a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 13980: 											if ((bNewServer & 0xf000000) == 0xf000000)

  0465f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bNewServer@@3HA ; bNewServer
  04664	83 c4 0c	 add	 esp, 12			; 0000000cH
  04667	25 00 00 00 0f	 and	 eax, 251658240		; 0f000000H
  0466c	3d 00 00 00 0f	 cmp	 eax, 251658240		; 0f000000H
  04671	0f 85 f6 01 00
	00		 jne	 $LN4752@MenuProc

; 13981: 												lssproto_PETST_send(sockfd, i, 0);

  04677	6a 00		 push	 0

; 13982: 										}

  04679	e9 e0 01 00 00	 jmp	 $LN5104@MenuProc
$LN873@MenuProc:

; 13983: 										else
; 13984: 											if (i == pc.battlePetNo && BattlePetReceiveFlag == FALSE) {

  0467e	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  04685	3b f0		 cmp	 esi, eax
  04687	0f 85 7a 00 00
	00		 jne	 $LN878@MenuProc
  0468d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BattlePetReceiveFlag@@3HA, 0 ; BattlePetReceiveFlag
  04694	75 71		 jne	 SHORT $LN878@MenuProc

; 13985: 												if (bNewServer)

  04696	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0469d	6a ff		 push	 -1
  0469f	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  046a5	74 07		 je	 SHORT $LN880@MenuProc

; 13986: 													lssproto_KS_send(sockfd, -1);

  046a7	e8 00 00 00 00	 call	 ?lssproto_KS_send@@YAXHH@Z ; lssproto_KS_send
  046ac	eb 05		 jmp	 SHORT $LN5105@MenuProc
$LN880@MenuProc:

; 13987: 												else
; 13988: 													old_lssproto_KS_send(sockfd, -1);

  046ae	e8 00 00 00 00	 call	 ?old_lssproto_KS_send@@YAXHH@Z ; old_lssproto_KS_send
$LN5105@MenuProc:

; 13989: 
; 13990: 												BattlePetReceiveFlag = TRUE;
; 13991: 												BattlePetReceivePetNo = i;
; 13992: 												pc.selectPetNo[i] = FALSE;
; 13993: 												BattlePetStMenCnt--;

  046b3	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?BattlePetStMenCnt@@3HA ; BattlePetStMenCnt
  046b9	33 c0		 xor	 eax, eax
  046bb	83 c4 08	 add	 esp, 8
  046be	66 89 04 75 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[esi*2+172], ax

; 13994: 												if (pc.mailPetNo == -1) {

  046c6	66 83 3d b6 00
	00 00 ff	 cmp	 WORD PTR ?pc@@3UPC@@A+182, -1
  046ce	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?BattlePetReceiveFlag@@3HA, 1 ; BattlePetReceiveFlag
  046d8	89 35 00 00 00
	00		 mov	 DWORD PTR ?BattlePetReceivePetNo@@3HA, esi ; BattlePetReceivePetNo
  046de	0f 85 e8 fe ff
	ff		 jne	 $LN882@MenuProc

; 13995: 													pc.mailPetNo = i;
; 13996: 													if ((bNewServer & 0xf000000) == 0xf000000)

  046e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bNewServer@@3HA ; bNewServer
  046e9	25 00 00 00 0f	 and	 eax, 251658240		; 0f000000H
  046ee	66 89 35 b6 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+182, si
  046f5	3d 00 00 00 0f	 cmp	 eax, 251658240		; 0f000000H
  046fa	0f 85 ee fe ff
	ff		 jne	 $LN885@MenuProc

; 13997: 														lssproto_PETST_send(sockfd, i, 4);

  04700	6a 04		 push	 4

; 13998: 												}

  04702	e9 d8 fe ff ff	 jmp	 $LN5106@MenuProc
$LN878@MenuProc:

; 14005: 											else
; 14006: 												if (pc.selectPetNo[i] == TRUE) {

  04707	0f b7 04 75 ac
	00 00 00	 movzx	 eax, WORD PTR ?pc@@3UPC@@A[esi*2+172]
  0470f	66 83 f8 01	 cmp	 ax, 1
  04713	0f 85 b9 00 00
	00		 jne	 $LN886@MenuProc

; 14007: 													if (pc.battlePetNo == -1 && BattlePetReceiveFlag == FALSE) {

  04719	66 83 3d aa 00
	00 00 ff	 cmp	 WORD PTR ?pc@@3UPC@@A+170, -1
  04721	75 47		 jne	 SHORT $LN888@MenuProc
  04723	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BattlePetReceiveFlag@@3HA, 0 ; BattlePetReceiveFlag
  0472a	75 3e		 jne	 SHORT $LN888@MenuProc

; 14008: 														if (pet[i].hp > 0) {

  0472c	83 7f b4 00	 cmp	 DWORD PTR [edi-76], 0
  04730	7e 31		 jle	 SHORT $LN890@MenuProc

; 14009: 															if (bNewServer)

  04732	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  04739	56		 push	 esi
  0473a	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  04740	74 07		 je	 SHORT $LN892@MenuProc

; 14010: 																lssproto_KS_send(sockfd, i);

  04742	e8 00 00 00 00	 call	 ?lssproto_KS_send@@YAXHH@Z ; lssproto_KS_send
  04747	eb 05		 jmp	 SHORT $LN5108@MenuProc
$LN892@MenuProc:

; 14011: 															else
; 14012: 																old_lssproto_KS_send(sockfd, i);

  04749	e8 00 00 00 00	 call	 ?old_lssproto_KS_send@@YAXHH@Z ; old_lssproto_KS_send
$LN5108@MenuProc:

; 14013: 															BattlePetReceiveFlag = TRUE;

  0474e	83 c4 08	 add	 esp, 8
  04751	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?BattlePetReceiveFlag@@3HA, 1 ; BattlePetReceiveFlag

; 14014: 															BattlePetReceivePetNo = i;

  0475b	89 35 00 00 00
	00		 mov	 DWORD PTR ?BattlePetReceivePetNo@@3HA, esi ; BattlePetReceivePetNo

; 14015: 															play_se(217, 320, 240);
; 14016: 														}

  04761	eb 55		 jmp	 SHORT $LN5109@MenuProc
$LN890@MenuProc:

; 14017: 														else {
; 14018: 															play_se(220, 320, 240);

  04763	b8 dc 00 00 00	 mov	 eax, 220		; 000000dcH

; 14019: 														}
; 14020: 													}

  04768	eb 53		 jmp	 SHORT $LN889@MenuProc
$LN888@MenuProc:

; 14021: 													else {
; 14022: 														if (pc.mailPetNo == -1) {

  0476a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bNewServer@@3HA ; bNewServer
  0476f	25 00 00 00 0f	 and	 eax, 251658240		; 0f000000H
  04774	66 83 3d b6 00
	00 00 ff	 cmp	 WORD PTR ?pc@@3UPC@@A+182, -1
  0477c	75 12		 jne	 SHORT $LN894@MenuProc

; 14023: 															pc.mailPetNo = i;

  0477e	66 89 35 b6 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+182, si

; 14024: 															if ((bNewServer & 0xf000000) == 0xf000000)

  04785	3d 00 00 00 0f	 cmp	 eax, 251658240		; 0f000000H
  0478a	75 1c		 jne	 SHORT $LN897@MenuProc

; 14025: 																lssproto_PETST_send(sockfd, i, 4);

  0478c	6a 04		 push	 4

; 14026: 														}

  0478e	eb 09		 jmp	 SHORT $LN5110@MenuProc
$LN894@MenuProc:

; 14027: 														else {
; 14028: 															if ((bNewServer & 0xf000000) == 0xf000000)

  04790	3d 00 00 00 0f	 cmp	 eax, 251658240		; 0f000000H
  04795	75 11		 jne	 SHORT $LN897@MenuProc

; 14029: 																lssproto_PETST_send(sockfd, i, 0);

  04797	6a 00		 push	 0
$LN5110@MenuProc:

; 14030: 														}
; 14031: 
; 14032: 														pc.selectPetNo[i] = FALSE;

  04799	56		 push	 esi
  0479a	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  047a0	e8 00 00 00 00	 call	 ?lssproto_PETST_send@@YAXHHH@Z ; lssproto_PETST_send
  047a5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN897@MenuProc:
  047a8	33 c0		 xor	 eax, eax

; 14033: 														BattlePetStMenCnt--;

  047aa	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?BattlePetStMenCnt@@3HA ; BattlePetStMenCnt
  047b0	66 89 04 75 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[esi*2+172], ax
$LN5109@MenuProc:

; 14034: 														play_se(217, 320, 240);
; 14035: 													}
; 14036: 												}

  047b8	b8 d9 00 00 00	 mov	 eax, 217		; 000000d9H
$LN889@MenuProc:
  047bd	68 f0 00 00 00	 push	 240			; 000000f0H
  047c2	68 40 01 00 00	 push	 320			; 00000140H
  047c7	50		 push	 eax
  047c8	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  047cd	e9 98 00 00 00	 jmp	 $LN5107@MenuProc
$LN886@MenuProc:

; 14037: 												else
; 14038: 													if (pc.selectPetNo[i] == FALSE) {

  047d2	66 85 c0	 test	 ax, ax
  047d5	0f 85 92 00 00
	00		 jne	 $LN4752@MenuProc

; 14039: 														if (BattlePetStMenCnt < ç­å¾å® æ°é) {

  047db	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?BattlePetStMenCnt@@3HA, 5 ; BattlePetStMenCnt
  047e2	7d 3f		 jge	 SHORT $LN899@MenuProc

; 14040: 															pc.selectPetNo[i] = TRUE;
; 14041: 															BattlePetStMenCnt++;

  047e4	ff 05 00 00 00
	00		 inc	 DWORD PTR ?BattlePetStMenCnt@@3HA ; BattlePetStMenCnt
  047ea	b8 01 00 00 00	 mov	 eax, 1

; 14042: 															play_se(217, 320, 240);

  047ef	68 f0 00 00 00	 push	 240			; 000000f0H
  047f4	68 40 01 00 00	 push	 320			; 00000140H
  047f9	68 d9 00 00 00	 push	 217			; 000000d9H
  047fe	66 89 04 75 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[esi*2+172], ax
  04806	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 14043: 															if ((bNewServer & 0xf000000) == 0xf000000)

  0480b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bNewServer@@3HA ; bNewServer
  04810	83 c4 0c	 add	 esp, 12			; 0000000cH
  04813	25 00 00 00 0f	 and	 eax, 251658240		; 0f000000H
  04818	3d 00 00 00 0f	 cmp	 eax, 251658240		; 0f000000H
  0481d	75 4e		 jne	 SHORT $LN4752@MenuProc

; 14044: 																lssproto_PETST_send(sockfd, i, 1);

  0481f	6a 01		 push	 1

; 14045: 														}

  04821	eb 3b		 jmp	 SHORT $LN5104@MenuProc
$LN899@MenuProc:

; 14046: 														else {
; 14047: 															if (pc.mailPetNo == -1) {

  04823	66 83 3d b6 00
	00 00 ff	 cmp	 WORD PTR ?pc@@3UPC@@A+182, -1
  0482b	75 40		 jne	 SHORT $LN4752@MenuProc

; 14048: 																pc.mailPetNo = i;
; 14049: 																play_se(217, 320, 240);

  0482d	68 f0 00 00 00	 push	 240			; 000000f0H
  04832	68 40 01 00 00	 push	 320			; 00000140H
  04837	68 d9 00 00 00	 push	 217			; 000000d9H
  0483c	66 89 35 b6 00
	00 00		 mov	 WORD PTR ?pc@@3UPC@@A+182, si
  04843	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 14050: 																if ((bNewServer & 0xf000000) == 0xf000000)

  04848	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bNewServer@@3HA ; bNewServer
  0484d	83 c4 0c	 add	 esp, 12			; 0000000cH
  04850	25 00 00 00 0f	 and	 eax, 251658240		; 0f000000H
  04855	3d 00 00 00 0f	 cmp	 eax, 251658240		; 0f000000H
  0485a	75 11		 jne	 SHORT $LN4752@MenuProc

; 14051: 																	lssproto_PETST_send(sockfd, i, 4);

  0485c	6a 04		 push	 4
$LN5104@MenuProc:

; 14052: 															}
; 14053: 														}
; 14054: 													}
; 14055: #endif
; 14056: 
; 14057: 								}
; 14058: 								if (HitFontNo == petWndFontNo[i + 5]) {

  0485e	56		 push	 esi
  0485f	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  04865	e8 00 00 00 00	 call	 ?lssproto_PETST_send@@YAXHHH@Z ; lssproto_PETST_send
$LN5107@MenuProc:
  0486a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4752@MenuProc:
  0486d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  04872	3b 04 b5 14 00
	00 00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA[esi*4+20]
  04879	75 3c		 jne	 SHORT $LN904@MenuProc

; 14059: 									petStatusNo = i;
; 14060: 									petWndNo = 1;
; 14061: 									DeathAction(pActMenuWnd);

  0487b	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  04881	89 35 00 00 00
	00		 mov	 DWORD PTR ?petStatusNo@@3HA, esi ; petStatusNo
  04887	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 1
  04891	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14062: 									pActMenuWnd = NULL;
; 14063: 									play_se(202, 320, 240);

  04896	68 f0 00 00 00	 push	 240			; 000000f0H
  0489b	68 40 01 00 00	 push	 320			; 00000140H
  048a0	68 ca 00 00 00	 push	 202			; 000000caH
  048a5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  048af	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  048b4	83 c4 10	 add	 esp, 16			; 00000010H
$LN904@MenuProc:

; 14064: 								}
; 14065: 								if (HitDispNo == petWndFontNo[i + 12]) {

  048b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  048bc	3b 04 b5 30 00
	00 00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA[esi*4+48]
  048c3	0f 85 88 00 00
	00		 jne	 $LN125@MenuProc

; 14066: 									if (i == pc.ridePetNo && pc.graNo != SPR_pet021 && pc.graNo != 100362) {//éé£

  048c9	3b 35 18 51 00
	00		 cmp	 esi, DWORD PTR ?pc@@3UPC@@A+20760
  048cf	75 77		 jne	 SHORT $LN906@MenuProc
  048d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A
  048d6	3d a3 87 01 00	 cmp	 eax, 100259		; 000187a3H
  048db	74 6b		 je	 SHORT $LN906@MenuProc
  048dd	3d 0a 88 01 00	 cmp	 eax, 100362		; 0001880aH
  048e2	74 64		 je	 SHORT $LN906@MenuProc

; 14067: 										char buf[64];
; 14068: 										sprintf(buf, "R|P|-1");

  048e4	8d 85 10 f6 ff
	ff		 lea	 eax, DWORD PTR _buf$55[ebp]
  048ea	68 00 00 00 00	 push	 OFFSET ??_C@_06EFALBHEL@R?$HMP?$HM?91@
  048ef	50		 push	 eax
  048f0	e8 00 00 00 00	 call	 _sprintf
  048f5	83 c4 08	 add	 esp, 8

; 14069: 										if (bNewServer)

  048f8	8d 85 10 f6 ff
	ff		 lea	 eax, DWORD PTR _buf$55[ebp]
  048fe	50		 push	 eax
  048ff	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd

; 14070: 											lssproto_FM_send(sockfd, buf);
; 14071: 										else
; 14072: 											lssproto_FM_send(sockfd, buf);
; 14073: 										play_se(217, 320, 240);

  04905	e8 00 00 00 00	 call	 ?lssproto_FM_send@@YAXHPAD@Z ; lssproto_FM_send
  0490a	83 c4 08	 add	 esp, 8
  0490d	68 f0 00 00 00	 push	 240			; 000000f0H
  04912	68 40 01 00 00	 push	 320			; 00000140H
  04917	68 d9 00 00 00	 push	 217			; 000000d9H
  0491c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 14074: 										if ((bNewServer & 0xf000000) == 0xf000000)

  04921	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bNewServer@@3HA ; bNewServer
  04926	83 c4 0c	 add	 esp, 12			; 0000000cH
  04929	25 00 00 00 0f	 and	 eax, 251658240		; 0f000000H
  0492e	3d 00 00 00 0f	 cmp	 eax, 251658240		; 0f000000H
  04933	75 1c		 jne	 SHORT $LN125@MenuProc

; 14075: 											lssproto_PETST_send(sockfd, i, 0);

  04935	6a 00		 push	 0
  04937	56		 push	 esi
  04938	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0493e	e8 00 00 00 00	 call	 ?lssproto_PETST_send@@YAXHHH@Z ; lssproto_PETST_send
  04943	83 c4 0c	 add	 esp, 12			; 0000000cH

; 14076: 									}

  04946	eb 09		 jmp	 SHORT $LN125@MenuProc
$LN906@MenuProc:

; 14077: 									else
; 14078: 									{
; 14079: 										checkRidePet(i);

  04948	56		 push	 esi
  04949	e8 00 00 00 00	 call	 ?checkRidePet@@YAXH@Z	; checkRidePet
  0494e	83 c4 04	 add	 esp, 4
$LN125@MenuProc:

; 13950: 						for (i = 0; i < 5; i++) {

  04951	81 c7 78 0b 00
	00		 add	 edi, 2936		; 00000b78H
  04957	46		 inc	 esi
  04958	81 ff ac 39 00
	00		 cmp	 edi, OFFSET ?pet@@3PAUPET@@A+14764
  0495e	0f 8c 9c fb ff
	ff		 jl	 $LL127@MenuProc

; 14080: 									}
; 14081: 								}
; 14082: 
; 14083: 							}
; 14084: 						}
; 14085: 						if (HitDispNo == petWndFontNo[10]) {

  04964	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  04969	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  0496f	3b 05 28 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+40
  04975	75 3b		 jne	 SHORT $LN911@MenuProc

; 14086: 							DeathAction(pActMenuWnd);

  04977	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0497d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14087: 							pActMenuWnd = NULL;
; 14088: 							MenuToggleFlag ^= JOY_CTRL_P;

  04982	81 35 00 00 00
	00 00 00 00 10	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 268435456 ; MenuToggleFlag, 10000000H

; 14089: 							play_se(203, 320, 240);

  0498c	68 f0 00 00 00	 push	 240			; 000000f0H
  04991	68 40 01 00 00	 push	 320			; 00000140H
  04996	68 cb 00 00 00	 push	 203			; 000000cbH
  0499b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  049a5	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  049aa	83 c4 10	 add	 esp, 16			; 00000010H

; 14090: 							saveUserSetting();

  049ad	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting
$LN911@MenuProc:

; 14091: 						}
; 14092: 						if (HitDispNo == petWndFontNo[11]) {

  049b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  049b7	3b 05 2c 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+44
  049bd	75 62		 jne	 SHORT $LN912@MenuProc

; 14093: 							petStatusNo = 0;

  049bf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petStatusNo@@3HA, 0 ; petStatusNo

; 14094: 							for (i = 0; i < 5; i++) {

  049c9	33 c9		 xor	 ecx, ecx
  049cb	b8 76 00 00 00	 mov	 eax, OFFSET ?pet@@3PAUPET@@A+118
$LL130@MenuProc:

; 14095: 								if (pet[i].useFlag == TRUE) {

  049d0	66 83 38 01	 cmp	 WORD PTR [eax], 1
  049d4	74 0f		 je	 SHORT $LN2296@MenuProc

; 14094: 							for (i = 0; i < 5; i++) {

  049d6	05 78 0b 00 00	 add	 eax, 2936		; 00000b78H
  049db	41		 inc	 ecx
  049dc	3d ce 39 00 00	 cmp	 eax, OFFSET ?pet@@3PAUPET@@A+14798
  049e1	7c ed		 jl	 SHORT $LL130@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  049e3	eb 06		 jmp	 SHORT $LN129@MenuProc
$LN2296@MenuProc:

; 14096: 									petStatusNo = i;

  049e5	89 0d 00 00 00
	00		 mov	 DWORD PTR ?petStatusNo@@3HA, ecx ; petStatusNo
$LN129@MenuProc:

; 14097: 									break;
; 14098: 								}
; 14099: 							}
; 14100: 							petWndNo = 1;
; 14101: 							DeathAction(pActMenuWnd);

  049eb	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  049f1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 1
  049fb	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14102: 							pActMenuWnd = NULL;
; 14103: 							play_se(202, 320, 240);

  04a00	68 f0 00 00 00	 push	 240			; 000000f0H
  04a05	68 40 01 00 00	 push	 320			; 00000140H
  04a0a	68 ca 00 00 00	 push	 202			; 000000caH
  04a0f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  04a19	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  04a1e	83 c4 10	 add	 esp, 16			; 00000010H
$LN912@MenuProc:

; 14104: 						}
; 14105: #ifdef _DROPPETWND					// (å¯å¼æ¾) Syu ADD ä¸¢å¼å® ç©ç¡®è®¤
; 14106: 						if (HitDispNo == petWndFontNo[21]) {

  04a21	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  04a26	3b 05 54 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+84
  04a2c	0f 85 93 00 00
	00		 jne	 $LN4754@MenuProc

; 14107: 							i = DropI;

  04a32	0f bf 35 00 00
	00 00		 movsx	 esi, WORD PTR ?DropI@@3FA ; DropI

; 14108: 							DropI = -1;

  04a39	83 c8 ff	 or	 eax, -1

; 14109: 							lssproto_DP_send(sockfd, nowGx, nowGy, i);

  04a3c	56		 push	 esi
  04a3d	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  04a43	66 a3 00 00 00
	00		 mov	 WORD PTR ?DropI@@3FA, ax ; DropI
  04a49	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  04a4f	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  04a55	e8 00 00 00 00	 call	 ?lssproto_DP_send@@YAXHHHH@Z ; lssproto_DP_send
  04a5a	83 c4 10	 add	 esp, 16			; 00000010H

; 14110: 							if (pc.selectPetNo[i] == TRUE) {

  04a5d	66 83 3c 75 ac
	00 00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[esi*2+172], 1
  04a66	75 10		 jne	 SHORT $LN915@MenuProc

; 14111: 								pc.selectPetNo[i] = FALSE;

  04a68	33 c0		 xor	 eax, eax

; 14112: 								BattlePetStMenCnt--;

  04a6a	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?BattlePetStMenCnt@@3HA ; BattlePetStMenCnt
  04a70	66 89 04 75 ac
	00 00 00	 mov	 WORD PTR ?pc@@3UPC@@A[esi*2+172], ax
$LN915@MenuProc:

; 14113: 							}
; 14114: 							if (i == pc.battlePetNo)

  04a78	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  04a7f	3b f0		 cmp	 esi, eax
  04a81	75 10		 jne	 SHORT $LN916@MenuProc

; 14115: 								lssproto_KS_send(sockfd, -1);

  04a83	6a ff		 push	 -1
  04a85	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  04a8b	e8 00 00 00 00	 call	 ?lssproto_KS_send@@YAXHH@Z ; lssproto_KS_send
  04a90	83 c4 08	 add	 esp, 8
$LN916@MenuProc:

; 14116: 							if (pc.mailPetNo == i) {

  04a93	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182
  04a9a	3b c6		 cmp	 eax, esi
  04a9c	75 09		 jne	 SHORT $LN917@MenuProc

; 14117: 								pc.mailPetNo = -1;

  04a9e	83 c8 ff	 or	 eax, -1
  04aa1	66 a3 b6 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+182, ax
$LN917@MenuProc:

; 14118: 							}
; 14119: 							play_se(217, 320, 240);

  04aa7	68 f0 00 00 00	 push	 240			; 000000f0H
  04aac	68 40 01 00 00	 push	 320			; 00000140H
  04ab1	68 d9 00 00 00	 push	 217			; 000000d9H
  04ab6	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  04abb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 14120: 							DropPetWndflag = false;

  04abe	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?DropPetWndflag@@3_NA, 0 ; DropPetWndflag
$LN4754@MenuProc:

; 14121: 						}
; 14122: 						if (HitDispNo == petWndFontNo[22]) {

  04ac5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  04aca	3b 05 58 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+88
  04ad0	75 27		 jne	 SHORT $LN4755@MenuProc

; 14123: 							DropPetWndflag = false;
; 14124: 							DropI = -1;
; 14125: 							play_se(217, 320, 240);

  04ad2	68 f0 00 00 00	 push	 240			; 000000f0H
  04ad7	83 c8 ff	 or	 eax, -1
  04ada	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?DropPetWndflag@@3_NA, 0 ; DropPetWndflag
  04ae1	68 40 01 00 00	 push	 320			; 00000140H
  04ae6	68 d9 00 00 00	 push	 217			; 000000d9H
  04aeb	66 a3 00 00 00
	00		 mov	 WORD PTR ?DropI@@3FA, ax ; DropI
  04af1	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  04af6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4755@MenuProc:

; 14126: 						}
; 14127: #endif
; 14128: 					}
; 14129: 					if (mouse.onceState & MOUSE_RIGHT_CRICK) {

  04af9	f6 05 2c 00 00
	00 02		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 2
  04b00	0f 84 7d 00 00
	00		 je	 $LN132@MenuProc

; 14130: 						for (i = 0; i < 5; i++) {

  04b06	b9 76 00 00 00	 mov	 ecx, OFFSET ?pet@@3PAUPET@@A+118
  04b0b	33 f6		 xor	 esi, esi
  04b0d	89 8d fc b9 ff
	ff		 mov	 DWORD PTR tv39339[ebp], ecx
$LL133@MenuProc:

; 14131: 							if (pet[i].useFlag == TRUE && eventWarpSendFlag == FALSE) {

  04b13	66 83 39 01	 cmp	 WORD PTR [ecx], 1
  04b17	75 55		 jne	 SHORT $LN131@MenuProc
  04b19	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  04b21	75 4b		 jne	 SHORT $LN131@MenuProc

; 14132: 								if (HitFontNo == petWndFontNo[i + 5]) {

  04b23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  04b28	3b 04 b5 14 00
	00 00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA[esi*4+20]
  04b2f	75 3d		 jne	 SHORT $LN131@MenuProc

; 14133: 									if (ItemMixPetNo != i && pc.ridePetNo != i) {

  04b31	39 35 00 00 00
	00		 cmp	 DWORD PTR ?ItemMixPetNo@@3HA, esi
  04b37	74 18		 je	 SHORT $LN922@MenuProc
  04b39	39 35 18 51 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20760, esi
  04b3f	74 10		 je	 SHORT $LN922@MenuProc

; 14134: #ifdef _DROPPETWND					// (å¯å¼æ¾) Syu ADD ä¸¢å¼å® ç©ç¡®è®¤
; 14135: 										DropPetWndflag = true;

  04b41	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?DropPetWndflag@@3_NA, 1 ; DropPetWndflag

; 14136: 										DropI = i;

  04b48	66 89 35 00 00
	00 00		 mov	 WORD PTR ?DropI@@3FA, si ; DropI

; 14137: #else
; 14138: 										if (bNewServer)
; 14139: 											lssproto_DP_send(sockfd, nowGx, nowGy, i);
; 14140: 										else
; 14141: 											old_lssproto_DP_send(sockfd, nowGx, nowGy, i);
; 14142: 										if (pc.selectPetNo[i] == TRUE) {
; 14143: 											pc.selectPetNo[i] = FALSE;
; 14144: 											BattlePetStMenCnt--;
; 14145: 										}
; 14146: 										if (i == pc.battlePetNo) {
; 14147: 											if (bNewServer)
; 14148: 												lssproto_KS_send(sockfd, -1);
; 14149: 											else
; 14150: 												old_lssproto_KS_send(sockfd, -1);
; 14151: 										}
; 14152: 										if (pc.mailPetNo == i) {
; 14153: 											pc.mailPetNo = -1;
; 14154: 										}
; 14155: 										play_se(217, 320, 240);
; 14156: #endif
; 14157: 									}

  04b4f	eb 1d		 jmp	 SHORT $LN131@MenuProc
$LN922@MenuProc:

; 14158: 									else {
; 14159: 										play_se(220, 320, 240);

  04b51	68 f0 00 00 00	 push	 240			; 000000f0H
  04b56	68 40 01 00 00	 push	 320			; 00000140H
  04b5b	68 dc 00 00 00	 push	 220			; 000000dcH
  04b60	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  04b65	8b 8d fc b9 ff
	ff		 mov	 ecx, DWORD PTR tv39339[ebp]
  04b6b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN131@MenuProc:

; 14130: 						for (i = 0; i < 5; i++) {

  04b6e	81 c1 78 0b 00
	00		 add	 ecx, 2936		; 00000b78H
  04b74	46		 inc	 esi
  04b75	89 8d fc b9 ff
	ff		 mov	 DWORD PTR tv39339[ebp], ecx
  04b7b	81 f9 ce 39 00
	00		 cmp	 ecx, OFFSET ?pet@@3PAUPET@@A+14798
  04b81	7c 90		 jl	 SHORT $LL133@MenuProc
$LN132@MenuProc:

; 14160: 									}
; 14161: 								}
; 14162: 							}
; 14163: 						}
; 14164: 					}
; 14165: #ifdef _DROPPETWND					// (å¯å¼æ¾) Syu ADD ä¸¢å¼å® ç©ç¡®è®¤
; 14166: 					if (DropPetWndflag == true) {

  04b83	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?DropPetWndflag@@3_NA, 1 ; DropPetWndflag
  04b8a	0f 85 7b 00 00
	00		 jne	 $LN924@MenuProc

; 14167: 						StockFontBuffer(245, 220, FONT_PRIO_AFRONT, 6, "íí¸ë¥¼ ë²ë¦´ê¹ìï¼", 0); y += 40;

  04b90	6a 00		 push	 0
  04b92	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ILNBPEIE@?F?d?F?$KO?$LI?$KG?5?$LJ?v?$LI?$LB?$LB?n?$LP?d?$KD?$LP@
  04b97	6a 06		 push	 6
  04b99	6a 02		 push	 2
  04b9b	68 dc 00 00 00	 push	 220			; 000000dcH
  04ba0	68 f5 00 00 00	 push	 245			; 000000f5H
  04ba5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14168: 						StockDispBuffer(320, 240, DISP_PRIO_YES_NO_WND, CG_DROPWND, 0);

  04baa	6a 00		 push	 0
  04bac	68 fa 89 00 00	 push	 35322			; 000089faH
  04bb1	6a 6d		 push	 109			; 0000006dH
  04bb3	68 f0 00 00 00	 push	 240			; 000000f0H
  04bb8	83 c7 28	 add	 edi, 40			; 00000028H
  04bbb	68 40 01 00 00	 push	 320			; 00000140H
  04bc0	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  04bc6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 14169: 						petWndFontNo[21] = StockDispBuffer(320, 240, DISP_PRIO_YES_NO_BTN, CG_COMMON_YES_BTN, 2);

  04bcb	6a 02		 push	 2
  04bcd	68 eb 65 00 00	 push	 26091			; 000065ebH
  04bd2	6a 6e		 push	 110			; 0000006eH
  04bd4	68 f0 00 00 00	 push	 240			; 000000f0H
  04bd9	68 40 01 00 00	 push	 320			; 00000140H
  04bde	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04be3	83 c4 40	 add	 esp, 64			; 00000040H
  04be6	a3 54 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+84, eax

; 14170: 						petWndFontNo[22] = StockDispBuffer(320, 240, DISP_PRIO_YES_NO_BTN, CG_COMMON_NO_BTN, 2);

  04beb	6a 02		 push	 2
  04bed	68 ec 65 00 00	 push	 26092			; 000065ecH
  04bf2	6a 6e		 push	 110			; 0000006eH
  04bf4	68 f0 00 00 00	 push	 240			; 000000f0H
  04bf9	68 40 01 00 00	 push	 320			; 00000140H
  04bfe	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04c03	83 c4 14	 add	 esp, 20			; 00000014H
  04c06	a3 58 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+88, eax
$LN924@MenuProc:

; 14171: 					}
; 14172: #endif
; 14173: 					if (pActMenuWnd != NULL) {

  04c0b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  04c11	85 d2		 test	 edx, edx
  04c13	0f 84 e4 24 00
	00		 je	 $LN4770@MenuProc

; 14174: 
; 14175: 						int flag = FALSE;
; 14176: 						int color;
; 14177: 						int btnNo;
; 14178: 						int atrFlag = FALSE;
; 14179: 						int atrGraNo[4];
; 14180: 
; 14181: 						x = pActMenuWnd->x + 16 + 50, y = pActMenuWnd->y + 31;

  04c19	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  04c1c	b9 65 00 00 00	 mov	 ecx, OFFSET ?pet@@3PAUPET@@A+101
  04c21	8b 72 18	 mov	 esi, DWORD PTR [edx+24]
  04c24	83 c7 1f	 add	 edi, 31			; 0000001fH
  04c27	83 c6 42	 add	 esi, 66			; 00000042H
  04c2a	c7 85 fc b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _flag$1$[ebp], 0

; 14182: 						for (i = 0; i < 5; i++) {

  04c34	33 d2		 xor	 edx, edx
  04c36	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  04c3c	89 95 04 ba ff
	ff		 mov	 DWORD PTR _i$7$[ebp], edx
  04c42	8d 47 f0	 lea	 eax, DWORD PTR [edi-16]
  04c45	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv39337[ebp], ecx
  04c4b	89 85 f0 b9 ff
	ff		 mov	 DWORD PTR tv39338[ebp], eax
  04c51	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  04c57	c7 85 f8 b9 ff
	ff 02 00 00 00	 mov	 DWORD PTR tv35893[ebp], 2
  04c61	89 85 e0 b9 ff
	ff		 mov	 DWORD PTR __tls_array$1$[ebp], eax
  04c67	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL136@MenuProc:

; 14183: 							if (pet[i].useFlag == TRUE) {

  04c70	66 83 79 11 01	 cmp	 WORD PTR [ecx+17], 1
  04c75	0f 85 fb 02 00
	00		 jne	 $LN5064@MenuProc

; 14184: 								color = FONT_PAL_WHITE;
; 14185: 								btnNo = 0;					// ä¼æ¯
; 14186: 								if (pc.selectPetNo[i] == TRUE) { //å¾æº

  04c7b	0f b7 04 55 ac
	00 00 00	 movzx	 eax, WORD PTR ?pc@@3UPC@@A[edx*2+172]
  04c83	be 00 00 00 00	 mov	 esi, 0
  04c88	66 83 f8 01	 cmp	 ax, 1

; 14187: 									color = FONT_PAL_AQUA;
; 14188: 									btnNo = 2;
; 14189: 								}
; 14190: 								// ææ
; 14191: 								if (i == pc.battlePetNo) {

  04c8c	c7 85 0c ba ff
	ff 00 00 00 00	 mov	 DWORD PTR _color$1$[ebp], 0
  04c96	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR _color$1$[ebp]
  04c9c	0f 44 b5 f8 b9
	ff ff		 cmove	 esi, DWORD PTR tv35893[ebp]
  04ca3	0f 94 c0	 sete	 al
  04ca6	89 85 0c ba ff
	ff		 mov	 DWORD PTR _color$1$[ebp], eax
  04cac	0f bf 05 aa 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+170
  04cb3	89 b5 ec b9 ff
	ff		 mov	 DWORD PTR _btnNo$2$[ebp], esi
  04cb9	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  04cbf	3b d0		 cmp	 edx, eax
  04cc1	75 14		 jne	 SHORT $LN928@MenuProc

; 14192: 									color = FONT_PAL_YELLOW;

  04cc3	c7 85 0c ba ff
	ff 04 00 00 00	 mov	 DWORD PTR _color$1$[ebp], 4

; 14193: 									btnNo = 1;

  04ccd	c7 85 ec b9 ff
	ff 01 00 00 00	 mov	 DWORD PTR _btnNo$2$[ebp], 1
$LN928@MenuProc:

; 14194: 								}
; 14195: 								// é®ä»¶
; 14196: 								if (i == pc.mailPetNo) {

  04cd7	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182
  04cde	3b d0		 cmp	 edx, eax
  04ce0	75 14		 jne	 SHORT $LN929@MenuProc

; 14197: 									color = FONT_PAL_GREEN;

  04ce2	c7 85 0c ba ff
	ff 05 00 00 00	 mov	 DWORD PTR _color$1$[ebp], 5

; 14198: 									btnNo = 3;

  04cec	c7 85 ec b9 ff
	ff 03 00 00 00	 mov	 DWORD PTR _btnNo$2$[ebp], 3
$LN929@MenuProc:

; 14199: 								}
; 14200: 								//éªå® 
; 14201: 								if (i == pc.ridePetNo) {

  04cf6	3b 15 18 51 00
	00		 cmp	 edx, DWORD PTR ?pc@@3UPC@@A+20760
  04cfc	75 14		 jne	 SHORT $LN930@MenuProc

; 14202: 									color = FONT_PAL_YELLOW;

  04cfe	c7 85 0c ba ff
	ff 04 00 00 00	 mov	 DWORD PTR _color$1$[ebp], 4

; 14203: 									btnNo = 195;

  04d08	c7 85 ec b9 ff
	ff c3 00 00 00	 mov	 DWORD PTR _btnNo$2$[ebp], 195 ; 000000c3H
$LN930@MenuProc:

; 14204: 								}
; 14205: 								if (pet[i].freeName[0] != NULL) {

  04d12	80 39 00	 cmp	 BYTE PTR [ecx], 0
  04d15	75 03		 jne	 SHORT $LN932@MenuProc

; 14206: 									//CenteringStr( pet[ i ].freeName, moji, PET_NAME_LEN );
; 14207: 									sprintf(moji, "%-16s", pet[i].freeName);
; 14208: 								}
; 14209: 								else {
; 14210: 									//CenteringStr( pet[ i ].name, moji, PET_NAME_LEN );
; 14211: 									sprintf(moji, "%-16s", pet[i].name);

  04d17	83 c1 ef	 add	 ecx, -17		; ffffffefH
$LN932@MenuProc:

; 14212: 								}
; 14213: #ifdef _NB_å® ç©ç»å®å¼
; 14214: 								/*char ç»å®æ å¿[12];
; 14215: 								if (pet[i].petlock == 1) {
; 14216: 									sprintf(ç»å®æ å¿, "%s", "ç»");
; 14217: 								}
; 14218: 								else {
; 14219: 									sprintf(ç»å®æ å¿, "%s", "");
; 14220: 								}
; 14221: 								StockFontBuffer(x + 3, y, FONT_PRIO_FRONT, 6, ç»å®æ å¿, 0);*/
; 14222: 								petWndFontNo[i + 5] = StockFontBuffer(x + 20, y, FONT_PRIO_FRONT, color, moji, 2);

  04d1a	51		 push	 ecx
  04d1b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  04d21	68 00 00 00 00	 push	 OFFSET ??_C@_05EMGOANLP@?$CF?916s@
  04d26	50		 push	 eax
  04d27	e8 00 00 00 00	 call	 _sprintf
  04d2c	6a 02		 push	 2
  04d2e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  04d34	50		 push	 eax
  04d35	ff b5 0c ba ff
	ff		 push	 DWORD PTR _color$1$[ebp]
  04d3b	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  04d3e	6a 01		 push	 1
  04d40	57		 push	 edi
  04d41	50		 push	 eax
  04d42	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  04d47	8b 8d 04 ba ff
	ff		 mov	 ecx, DWORD PTR _i$7$[ebp]

; 14223: #else
; 14224: 								petWndFontNo[i + 5] = StockFontBuffer(x + 3, y, FONT_PRIO_FRONT, color, moji, 2);
; 14225: #endif
; 14226: 
; 14227: 
; 14228: 								//petWndFontNo[ i + 5 ] = StockFontBuffer( x + 3, y, FONT_PRIO_FRONT, color, moji, 2 );
; 14229: 								/*char å® ç©è½¬æ°[64];
; 14230: 								if (pet[i].fusion) {
; 14231: 									sprintf(å® ç©è½¬æ°, "%d", pet[i].trn - 1);
; 14232: 									CenteringStr(å® ç©è½¬æ°, moji, 8);
; 14233: 								}
; 14234: 								else {
; 14235: 									sprintf(å® ç©è½¬æ°, "%d", pet[i].trn);
; 14236: 									CenteringStr(å® ç©è½¬æ°, moji, 8);
; 14237: 								}
; 14238: 								StockFontBuffer(pActMenuWnd->x + 12, y + 24, FONT_PRIO_FRONT, FONT_PAL_GREEN, moji, 0);*/ y += 24;
; 14239: 								atrFlag = FALSE;

  04d4d	33 d2		 xor	 edx, edx
  04d4f	83 85 f0 b9 ff
	ff 18		 add	 DWORD PTR tv39338[ebp], 24 ; 00000018H
  04d56	83 c4 24	 add	 esp, 36			; 00000024H
  04d59	83 c7 18	 add	 edi, 24			; 00000018H
  04d5c	89 95 e8 b9 ff
	ff		 mov	 DWORD PTR _atrFlag$1$[ebp], edx
  04d62	89 04 8d 14 00
	00 00		 mov	 DWORD PTR ?petWndFontNo@@3PAHA[ecx*4+20], eax

; 14240: 								if (pet[i].earth > 0) {

  04d69	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR tv39337[ebp]
  04d6f	39 51 cf	 cmp	 DWORD PTR [ecx-49], edx
  04d72	7e 21		 jle	 SHORT $LN933@MenuProc

; 14241: 									if (pet[i].earth > 50) atrGraNo[atrFlag] = CG_ATR_ICON_EARTH_BIG;

  04d74	33 c0		 xor	 eax, eax

; 14242: 									else atrGraNo[atrFlag] = CG_ATR_ICON_EARTH_SML;
; 14243: 									atrFlag++;

  04d76	ba 01 00 00 00	 mov	 edx, 1
  04d7b	83 79 cf 32	 cmp	 DWORD PTR [ecx-49], 50	; 00000032H
  04d7f	89 95 e8 b9 ff
	ff		 mov	 DWORD PTR _atrFlag$1$[ebp], edx
  04d85	0f 9e c0	 setle	 al
  04d88	8d 04 45 20 62
	00 00		 lea	 eax, DWORD PTR [eax*2+25120]
  04d8f	89 85 40 d8 ff
	ff		 mov	 DWORD PTR _atrGraNo$33[ebp], eax
$LN933@MenuProc:

; 14244: 								}
; 14245: 								if (pet[i].water > 0) {

  04d95	83 79 d3 00	 cmp	 DWORD PTR [ecx-45], 0
  04d99	7e 1e		 jle	 SHORT $LN936@MenuProc

; 14246: 									if (pet[i].water > 50) atrGraNo[atrFlag] = CG_ATR_ICON_WATER_BIG;
; 14247: 									else atrGraNo[atrFlag] = CG_ATR_ICON_WATER_SML;
; 14248: 									atrFlag++;

  04d9b	33 c0		 xor	 eax, eax
  04d9d	83 79 d3 32	 cmp	 DWORD PTR [ecx-45], 50	; 00000032H
  04da1	0f 9e c0	 setle	 al
  04da4	8d 04 45 23 62
	00 00		 lea	 eax, DWORD PTR [eax*2+25123]
  04dab	89 84 95 40 d8
	ff ff		 mov	 DWORD PTR _atrGraNo$33[ebp+edx*4], eax
  04db2	42		 inc	 edx
  04db3	89 95 e8 b9 ff
	ff		 mov	 DWORD PTR _atrFlag$1$[ebp], edx
$LN936@MenuProc:

; 14249: 								}
; 14250: 								if (pet[i].fire > 0) {

  04db9	83 79 d7 00	 cmp	 DWORD PTR [ecx-41], 0
  04dbd	7e 1e		 jle	 SHORT $LN939@MenuProc

; 14251: 									if (pet[i].fire > 50) atrGraNo[atrFlag] = CG_ATR_ICON_FIRE_BIG;
; 14252: 									else atrGraNo[atrFlag] = CG_ATR_ICON_FIRE_SML;
; 14253: 									atrFlag++;

  04dbf	33 c0		 xor	 eax, eax
  04dc1	83 79 d7 32	 cmp	 DWORD PTR [ecx-41], 50	; 00000032H
  04dc5	0f 9e c0	 setle	 al
  04dc8	8d 04 45 26 62
	00 00		 lea	 eax, DWORD PTR [eax*2+25126]
  04dcf	89 84 95 40 d8
	ff ff		 mov	 DWORD PTR _atrGraNo$33[ebp+edx*4], eax
  04dd6	42		 inc	 edx
  04dd7	89 95 e8 b9 ff
	ff		 mov	 DWORD PTR _atrFlag$1$[ebp], edx
$LN939@MenuProc:

; 14254: 								}
; 14255: 								if (pet[i].wind > 0) {

  04ddd	8b 49 db	 mov	 ecx, DWORD PTR [ecx-37]
  04de0	85 c9		 test	 ecx, ecx
  04de2	7e 1d		 jle	 SHORT $LN942@MenuProc

; 14256: 									if (pet[i].wind > 50) atrGraNo[atrFlag] = CG_ATR_ICON_WIND_BIG;
; 14257: 									else atrGraNo[atrFlag] = CG_ATR_ICON_WIND_SML;
; 14258: 									atrFlag++;

  04de4	33 c0		 xor	 eax, eax
  04de6	83 f9 32	 cmp	 ecx, 50			; 00000032H
  04de9	0f 9e c0	 setle	 al
  04dec	8d 04 45 29 62
	00 00		 lea	 eax, DWORD PTR [eax*2+25129]
  04df3	89 84 95 40 d8
	ff ff		 mov	 DWORD PTR _atrGraNo$33[ebp+edx*4], eax
  04dfa	42		 inc	 edx
  04dfb	89 95 e8 b9 ff
	ff		 mov	 DWORD PTR _atrFlag$1$[ebp], edx
$LN942@MenuProc:

; 14259: 								}
; 14260: 								if (atrFlag > 0) StockDispBuffer(pActMenuWnd->x + 228, y - 16, DISP_PRIO_IME3, atrGraNo[0], 0);

  04e01	85 d2		 test	 edx, edx
  04e03	74 55		 je	 SHORT $LN946@MenuProc
  04e05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  04e0a	6a 00		 push	 0
  04e0c	ff b5 40 d8 ff
	ff		 push	 DWORD PTR _atrGraNo$33[ebp]
  04e12	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  04e15	6a 69		 push	 105			; 00000069H
  04e17	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv39338[ebp]
  04e1d	05 e4 00 00 00	 add	 eax, 228		; 000000e4H
  04e22	50		 push	 eax
  04e23	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04e28	83 c4 14	 add	 esp, 20			; 00000014H

; 14261: 								if (atrFlag > 1) StockDispBuffer(pActMenuWnd->x + 228 + 16, y - 16, DISP_PRIO_IME3, atrGraNo[1], 0);

  04e2b	83 bd e8 b9 ff
	ff 01		 cmp	 DWORD PTR _atrFlag$1$[ebp], 1
  04e32	76 26		 jbe	 SHORT $LN946@MenuProc
  04e34	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  04e39	6a 00		 push	 0
  04e3b	ff b5 44 d8 ff
	ff		 push	 DWORD PTR _atrGraNo$33[ebp+4]
  04e41	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  04e44	6a 69		 push	 105			; 00000069H
  04e46	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv39338[ebp]
  04e4c	05 f4 00 00 00	 add	 eax, 244		; 000000f4H
  04e51	50		 push	 eax
  04e52	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04e57	83 c4 14	 add	 esp, 20			; 00000014H
$LN946@MenuProc:

; 14262: 								petWndFontNo[i] = StockDispBuffer(x - 27, y - 14, DISP_PRIO_IME3, CG_PET_WND_REST_BTN + btnNo, 2);

  04e5a	8b 85 ec b9 ff
	ff		 mov	 eax, DWORD PTR _btnNo$2$[ebp]
  04e60	6a 02		 push	 2
  04e62	05 c4 65 00 00	 add	 eax, 26052		; 000065c4H
  04e67	50		 push	 eax
  04e68	6a 69		 push	 105			; 00000069H
  04e6a	8d 47 f2	 lea	 eax, DWORD PTR [edi-14]
  04e6d	50		 push	 eax
  04e6e	8d 46 e5	 lea	 eax, DWORD PTR [esi-27]
  04e71	50		 push	 eax
  04e72	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04e77	8b 8d 04 ba ff
	ff		 mov	 ecx, DWORD PTR _i$7$[ebp]
  04e7d	83 c4 14	 add	 esp, 20			; 00000014H
  04e80	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?petWndFontNo@@3PAHA[ecx*4], eax

; 14263: 								static std::vector<int> ridelist_ =

  04e87	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  04e8c	8b 8d e0 b9 ff
	ff		 mov	 ecx, DWORD PTR __tls_array$1$[ebp]
  04e92	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  04e95	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?EDI@??MenuProc@@YAXXZ@4HA
  04e9a	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  04ea0	0f 8f 63 cb 00
	00		 jg	 $LN5170@MenuProc
$LN137@MenuProc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  04ea6	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+4
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 14265: 								for (size_t q = 0; q < ridelist_.size(); q++)

  04eab	33 c9		 xor	 ecx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  04ead	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A
  04eb3	c1 f8 02	 sar	 eax, 2
  04eb6	89 85 fc b9 ff
	ff		 mov	 DWORD PTR $T25[ebp], eax
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 14265: 								for (size_t q = 0; q < ridelist_.size(); q++)

  04ebc	85 c0		 test	 eax, eax
  04ebe	74 55		 je	 SHORT $LN139@MenuProc
  04ec0	8b 95 00 ba ff
	ff		 mov	 edx, DWORD PTR tv39337[ebp]
  04ec6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL140@MenuProc:

; 14266: 								{
; 14267: 									if (pet[i].graNo == ridelist_.at(q))

  04ed0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A
  04ed6	8b 42 9f	 mov	 eax, DWORD PTR [edx-97]
  04ed9	3b 04 8e	 cmp	 eax, DWORD PTR [esi+ecx*4]
  04edc	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  04ee2	74 0b		 je	 SHORT $LN2298@MenuProc

; 14265: 								for (size_t q = 0; q < ridelist_.size(); q++)

  04ee4	41		 inc	 ecx
  04ee5	3b 8d fc b9 ff
	ff		 cmp	 ecx, DWORD PTR $T25[ebp]
  04eeb	72 e3		 jb	 SHORT $LL140@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  04eed	eb 26		 jmp	 SHORT $LN139@MenuProc
$LN2298@MenuProc:

; 14268: 									{
; 14269: 										petWndFontNo[i + 12] = StockDispBuffer(x - 27 + 35, y - 14 + 23, DISP_PRIO_IME3, IMAGE_RIDE_BTN, 2);

  04eef	6a 02		 push	 2
  04ef1	68 97 04 01 00	 push	 66711			; 00010497H
  04ef6	6a 69		 push	 105			; 00000069H
  04ef8	8d 47 09	 lea	 eax, DWORD PTR [edi+9]
  04efb	50		 push	 eax
  04efc	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  04eff	50		 push	 eax
  04f00	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  04f05	8b 8d 04 ba ff
	ff		 mov	 ecx, DWORD PTR _i$7$[ebp]
  04f0b	83 c4 14	 add	 esp, 20			; 00000014H
  04f0e	89 04 8d 30 00
	00 00		 mov	 DWORD PTR ?petWndFontNo@@3PAHA[ecx*4+48], eax
$LN139@MenuProc:

; 14270: 										break;
; 14271: 									}
; 14272: 								}
; 14273: 								sprintf(moji, "%3d     %4d   %4d", pet[i].level, pet[i].hp, pet[i].maxHp);

  04f15	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39337[ebp]
  04f1b	ff 70 a7	 push	 DWORD PTR [eax-89]
  04f1e	ff 70 a3	 push	 DWORD PTR [eax-93]
  04f21	ff 70 bb	 push	 DWORD PTR [eax-69]
  04f24	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  04f2a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PMPFNJLM@?$CF3d?5?5?5?5?5?$CF4d?5?5?5?$CF4d@
  04f2f	50		 push	 eax
  04f30	e8 00 00 00 00	 call	 _sprintf

; 14274: 								StockFontBuffer(x + 26 + 27, y, FONT_PRIO_FRONT, color, moji, 0); y += 27;

  04f35	6a 00		 push	 0
  04f37	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  04f3d	50		 push	 eax
  04f3e	ff b5 0c ba ff
	ff		 push	 DWORD PTR _color$1$[ebp]
  04f44	8d 46 35	 lea	 eax, DWORD PTR [esi+53]
  04f47	6a 01		 push	 1
  04f49	57		 push	 edi
  04f4a	50		 push	 eax
  04f4b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  04f50	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR tv39337[ebp]

; 14275: 								flag = TRUE;

  04f56	b8 01 00 00 00	 mov	 eax, 1
  04f5b	8b 95 04 ba ff
	ff		 mov	 edx, DWORD PTR _i$7$[ebp]
  04f61	83 c4 2c	 add	 esp, 44			; 0000002cH
  04f64	83 c7 1b	 add	 edi, 27			; 0000001bH
  04f67	89 85 fc b9 ff
	ff		 mov	 DWORD PTR _flag$1$[ebp], eax
  04f6d	83 85 f0 b9 ff
	ff 1b		 add	 DWORD PTR tv39338[ebp], 27 ; 0000001bH
  04f74	eb 06		 jmp	 SHORT $LN134@MenuProc
$LN5064@MenuProc:

; 14183: 							if (pet[i].useFlag == TRUE) {

  04f76	8b 85 fc b9 ff
	ff		 mov	 eax, DWORD PTR _flag$1$[ebp]
$LN134@MenuProc:

; 14182: 						for (i = 0; i < 5; i++) {

  04f7c	42		 inc	 edx
  04f7d	81 c1 78 0b 00
	00		 add	 ecx, 2936		; 00000b78H
  04f83	89 95 04 ba ff
	ff		 mov	 DWORD PTR _i$7$[ebp], edx
  04f89	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv39337[ebp], ecx
  04f8f	83 fa 05	 cmp	 edx, 5
  04f92	0f 8c d8 fc ff
	ff		 jl	 $LL136@MenuProc

; 14276: #ifdef _NB_ç§å® ç©
; 14277: 								//ç§å® æé®ç´¢å¼[i] = StockDispBuffer(x + 10, y - 20, DISP_PRIO_IME3, IMAGE_ç§å® æé®, 2);//å³é­æé®
; 14278: #endif
; 14279: 							}
; 14280: 						}
; 14281: 						if (flag != TRUE) {

  04f98	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  04f9e	83 f8 01	 cmp	 eax, 1
  04fa1	6a 02		 push	 2
  04fa3	68 ba 65 00 00	 push	 26042			; 000065baH
  04fa8	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  04fae	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  04fb1	6a 69		 push	 105			; 00000069H
  04fb3	74 3c		 je	 SHORT $LN948@MenuProc

; 14282: 							petWndFontNo[10] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, pActMenuWnd->y + 299, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  04fb5	05 2b 01 00 00	 add	 eax, 299		; 0000012bH
  04fba	50		 push	 eax
  04fbb	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  04fbe	ff 70 14	 push	 DWORD PTR [eax+20]
  04fc1	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 14283: 							StockFontBuffer(x + 10, y, FONT_PRIO_FRONT, 0, "íí¸ê° ììµëë¤.", 0); y += 40;

  04fc6	6a 00		 push	 0
  04fc8	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OLBLGPHG@?F?d?F?$KO?$LA?$KB?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
  04fcd	6a 00		 push	 0
  04fcf	6a 01		 push	 1
  04fd1	a3 28 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+40, eax
  04fd6	8d 46 0a	 lea	 eax, DWORD PTR [esi+10]
  04fd9	57		 push	 edi
  04fda	50		 push	 eax
  04fdb	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  04fe0	83 c4 2c	 add	 esp, 44			; 0000002cH
  04fe3	83 c7 28	 add	 edi, 40			; 00000028H
  04fe6	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi

; 14284: 						}

  04fec	e9 0c 21 00 00	 jmp	 $LN4770@MenuProc
$LN948@MenuProc:

; 14285: 						else {
; 14286: 							petWndFontNo[10] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx + 56, pActMenuWnd->y + 299, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  04ff1	05 2b 01 00 00	 add	 eax, 299		; 0000012bH
  04ff6	50		 push	 eax
  04ff7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  04ffa	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  04ffd	83 c0 38	 add	 eax, 56			; 00000038H
  05000	50		 push	 eax
  05001	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 14287: 							petWndFontNo[11] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx - 56, pActMenuWnd->y + 299, DISP_PRIO_IME3, CG_PET_WND_STATUS_BTN, 2);

  05006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0500c	a3 28 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+40, eax
  05011	6a 02		 push	 2
  05013	68 c8 65 00 00	 push	 26056			; 000065c8H
  05018	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0501b	05 2b 01 00 00	 add	 eax, 299		; 0000012bH
  05020	6a 69		 push	 105			; 00000069H
  05022	50		 push	 eax
  05023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  05026	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  05029	83 e8 38	 sub	 eax, 56			; 00000038H
  0502c	50		 push	 eax
  0502d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  05032	83 c4 28	 add	 esp, 40			; 00000028H
  05035	a3 2c 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+44, eax

; 14288: 						}
; 14289: 					}
; 14290: 				}
; 14291: 			}
; 14292: 			break;

  0503a	e9 be 20 00 00	 jmp	 $LN4770@MenuProc
$LN950@MenuProc:

; 14293: 		case 1:
; 14294: 			if (pActMenuWnd == NULL) {

  0503f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  05046	75 56		 jne	 SHORT $LN951@MenuProc

; 14295: 				pActMenuWnd = MakeWindowDisp(4, 4, 320, 408, 0, -1);

  05048	6a ff		 push	 -1
  0504a	6a 00		 push	 0
  0504c	68 98 01 00 00	 push	 408			; 00000198H
  05051	68 40 01 00 00	 push	 320			; 00000140H
  05056	6a 04		 push	 4
  05058	6a 04		 push	 4
  0505a	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0505f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  05066	83 c4 18	 add	 esp, 24			; 00000018H
  05069	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  0506e	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0
  05075	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0
  0507c	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0
  05083	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  0508a	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0
  05091	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0

; 14296: 				for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;
; 14297: 			}

  05099	e9 d6 11 00 00	 jmp	 $LN4762@MenuProc
$LN951@MenuProc:

; 14298: 			else {
; 14299: 				if (pActMenuWnd->hp > 0) {

  0509e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  050a4	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  050a8	0f 8e c6 11 00
	00		 jle	 $LN4762@MenuProc

; 14300: 					// æ¾ç¤ºå® ç©è¯¦ç»çªå£î¸î
; 14301: 					x = pActMenuWnd->x;
; 14302: 					y = pActMenuWnd->y;

  050ae	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  050b1	8b 72 18	 mov	 esi, DWORD PTR [edx+24]

; 14303: 					StockDispBufferç»å¯¹ä½ç½®(x, y, DISP_PRIO_MENU, IMAGE_PET_STATUS, 1);

  050b4	6a 01		 push	 1
  050b6	68 9a 04 01 00	 push	 66714			; 0001049aH
  050bb	6a 68		 push	 104			; 00000068H
  050bd	57		 push	 edi
  050be	56		 push	 esi
  050bf	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  050c5	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  050cb	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  050d0	83 c4 14	 add	 esp, 20			; 00000014H

; 14304: 					if (pActPet == NULL) {

  050d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  050da	75 2d		 jne	 SHORT $LN954@MenuProc

; 14305: 						pActPet = MakeAnimDisp(x + 367, y + 214, pet[petStatusNo].graNo, ANIM_DISP_PET);

  050dc	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  050e6	6a 00		 push	 0
  050e8	ff b0 04 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+4]
  050ee	8d 87 d6 00 00
	00		 lea	 eax, DWORD PTR [edi+214]
  050f4	50		 push	 eax
  050f5	8d 86 6f 01 00
	00		 lea	 eax, DWORD PTR [esi+367]
  050fb	50		 push	 eax
  050fc	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  05101	83 c4 10	 add	 esp, 16			; 00000010H
  05104	a3 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, eax
$LN954@MenuProc:

; 14306: 					}
; 14307: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  05109	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  05110	0f 84 f8 00 00
	00		 je	 $LN4757@MenuProc

; 14308: 						if (HitDispNo == petWndFontNo[0]) {

  05116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0511b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA
  05121	75 6a		 jne	 SHORT $LN956@MenuProc

; 14309: 							DeathAction(pActMenuWnd);

  05123	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  05129	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14310: 							pActMenuWnd = NULL;
; 14311: 							DeathAction(pActPet);

  0512e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  05134	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0513e	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14312: 							pActPet = NULL;
; 14313: 							petWndNo = 0;
; 14314: 							DeathAction(pActMenuWnd3);

  05143	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  05149	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  05153	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 0
  0515d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14315: 							pActMenuWnd3 = NULL;
; 14316: 							GetKeyInputFocus(&MyChatBuffer);

  05162	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  05167	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  05171	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 14317: 							play_se(203, 320, 240);

  05176	68 f0 00 00 00	 push	 240			; 000000f0H
  0517b	68 40 01 00 00	 push	 320			; 00000140H
  05180	68 cb 00 00 00	 push	 203			; 000000cbH
  05185	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0518a	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN956@MenuProc:

; 14318: 						}
; 14319: 						if (HitDispNo == petWndFontNo[4]) {

  0518d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  05192	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+16
  05198	75 74		 jne	 SHORT $LN4757@MenuProc

; 14320: 							petWndNo = 2;
; 14321: 							DeathAction(pActMenuWnd);

  0519a	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  051a0	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 2
  051aa	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14322: 							pActMenuWnd = NULL;
; 14323: 							DeathAction(pActPet);

  051af	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  051b5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  051bf	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14324: 							pActPet = NULL;
; 14325: 							petWndNo = 2;
; 14326: 							DeathAction(pActMenuWnd3);

  051c4	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  051ca	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  051d4	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 2
  051de	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14327: 							pActMenuWnd3 = NULL;
; 14328: 							GetKeyInputFocus(&MyChatBuffer);

  051e3	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  051e8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  051f2	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 14329: 							play_se(202, 320, 240);

  051f7	68 f0 00 00 00	 push	 240			; 000000f0H
  051fc	68 40 01 00 00	 push	 320			; 00000140H
  05201	68 ca 00 00 00	 push	 202			; 000000caH
  05206	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0520b	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN4757@MenuProc:

; 14330: 						}
; 14331: 					}
; 14332: 					if (HitDispNo == petWndFontNo[1] || joy_con[0] & JOY_A) {

  0520e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  05213	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  05219	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+4
  0521f	74 0c		 je	 SHORT $LN960@MenuProc
  05221	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  05227	0f 84 e0 00 00
	00		 je	 $LN966@MenuProc
$LN960@MenuProc:

; 14333: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_A) {

  0522d	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  05234	75 16		 jne	 SHORT $LN962@MenuProc
  05236	f7 05 00 00 00
	00 00 04 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 1024 ; 00000400H
  05240	75 0a		 jne	 SHORT $LN962@MenuProc
  05242	a1 04 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+4
  05247	e9 a1 00 00 00	 jmp	 $LN961@MenuProc
$LN962@MenuProc:

; 14334: 							if (pActMenuWnd3 != NULL) {

  0524c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  05251	85 c0		 test	 eax, eax
  05253	74 31		 je	 SHORT $LN4576@MenuProc

; 14335: 								DeathAction(pActMenuWnd3);

  05255	50		 push	 eax
  05256	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14336: 								pActMenuWnd3 = NULL;
; 14337: 								GetKeyInputFocus(&MyChatBuffer);

  0525b	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  05260	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  0526a	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 14338: 								play_se(203, 320, 240);

  0526f	68 f0 00 00 00	 push	 240			; 000000f0H
  05274	68 40 01 00 00	 push	 320			; 00000140H
  05279	68 cb 00 00 00	 push	 203			; 000000cbH
  0527e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  05283	83 c4 14	 add	 esp, 20			; 00000014H
$LN4576@MenuProc:
  05286	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  0528c	bf 04 00 00 00	 mov	 edi, 4
$LL144@MenuProc:

; 14339: 							}
; 14340: 							while (1) {
; 14341: 								petStatusNo--;

  05291	49		 dec	 ecx
  05292	83 f9 ff	 cmp	 ecx, -1

; 14342: 								if (petStatusNo <= -1) petStatusNo = 4;

  05295	0f 4e cf	 cmovle	 ecx, edi

; 14343: 								if (pet[petStatusNo].useFlag == TRUE) break;

  05298	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  0529e	66 83 b8 76 00
	00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 1
  052a6	75 e9		 jne	 SHORT $LL144@MenuProc

; 14344: 							}
; 14345: 							pActPet->anim_chr_no = pet[petStatusNo].graNo;

  052a8	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  052ae	89 0d 00 00 00
	00		 mov	 DWORD PTR ?petStatusNo@@3HA, ecx ; petStatusNo

; 14346: 							play_se(217, 320, 240);

  052b4	68 f0 00 00 00	 push	 240			; 000000f0H
  052b9	68 40 01 00 00	 push	 320			; 00000140H
  052be	68 d9 00 00 00	 push	 217			; 000000d9H
  052c3	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?pet@@3PAUPET@@A[eax+4]
  052c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet@@3PAUaction@@A
  052ce	89 88 44 01 00
	00		 mov	 DWORD PTR [eax+324], ecx
  052d4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  052d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  052df	83 c4 0c	 add	 esp, 12			; 0000000cH
  052e2	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]

; 14347: 							petWndBtnFlag[1] = TRUE;

  052e8	b8 01 00 00 00	 mov	 eax, 1
$LN961@MenuProc:

; 14348: 						}
; 14349: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_A) && petWndBtnFlag[1] == TRUE) {

  052ed	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  052f4	75 08		 jne	 SHORT $LN968@MenuProc
  052f6	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  052fc	74 0f		 je	 SHORT $LN966@MenuProc
$LN968@MenuProc:

; 14350: 							petWndBtnFlag[1] = TRUE;

  052fe	c7 05 04 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+4, 1
  05308	83 f8 01	 cmp	 eax, 1
  0530b	74 0a		 je	 SHORT $LN967@MenuProc
$LN966@MenuProc:

; 14351: 						}
; 14352: 						else {
; 14353: 							petWndBtnFlag[1] = FALSE;

  0530d	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+4, 0
$LN967@MenuProc:

; 14354: 						}
; 14355: 					}
; 14356: 					else {
; 14357: 						petWndBtnFlag[1] = FALSE;
; 14358: 					}
; 14359: 					if (HitDispNo == petWndFontNo[2] || joy_con[0] & JOY_B) {

  05317	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0531c	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+8
  05322	74 0c		 je	 SHORT $LN971@MenuProc
  05324	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0532a	0f 84 da 00 00
	00		 je	 $LN977@MenuProc
$LN971@MenuProc:

; 14360: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_B) {

  05330	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  05337	75 16		 jne	 SHORT $LN973@MenuProc
  05339	f7 05 00 00 00
	00 00 01 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 256 ; 00000100H
  05343	75 0a		 jne	 SHORT $LN973@MenuProc
  05345	a1 08 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+8
  0534a	e9 9b 00 00 00	 jmp	 $LN972@MenuProc
$LN973@MenuProc:

; 14361: 							if (pActMenuWnd3 != NULL) {

  0534f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  05354	85 c0		 test	 eax, eax
  05356	74 31		 je	 SHORT $LN4577@MenuProc

; 14362: 								DeathAction(pActMenuWnd3);

  05358	50		 push	 eax
  05359	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14363: 								pActMenuWnd3 = NULL;
; 14364: 								GetKeyInputFocus(&MyChatBuffer);

  0535e	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  05363	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  0536d	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 14365: 								play_se(203, 320, 240);

  05372	68 f0 00 00 00	 push	 240			; 000000f0H
  05377	68 40 01 00 00	 push	 320			; 00000140H
  0537c	68 cb 00 00 00	 push	 203			; 000000cbH
  05381	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  05386	83 c4 14	 add	 esp, 20			; 00000014H
$LN4577@MenuProc:
  05389	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  0538f	90		 npad	 1
$LL146@MenuProc:

; 14366: 							}
; 14367: 							while (1) {
; 14368: 								petStatusNo++;

  05390	41		 inc	 ecx

; 14369: 								if (petStatusNo >= 5) petStatusNo = 0;

  05391	33 d2		 xor	 edx, edx
  05393	8b c1		 mov	 eax, ecx
  05395	83 f8 05	 cmp	 eax, 5
  05398	0f 4d ca	 cmovge	 ecx, edx

; 14370: 								if (pet[petStatusNo].useFlag == TRUE) break;

  0539b	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  053a1	66 83 b8 76 00
	00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 1
  053a9	75 e5		 jne	 SHORT $LL146@MenuProc

; 14371: 							}
; 14372: 
; 14373: 							pActPet->anim_chr_no = pet[petStatusNo].graNo;

  053ab	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  053b1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?petStatusNo@@3HA, ecx ; petStatusNo

; 14374: 							play_se(217, 320, 240);

  053b7	68 f0 00 00 00	 push	 240			; 000000f0H
  053bc	68 40 01 00 00	 push	 320			; 00000140H
  053c1	68 d9 00 00 00	 push	 217			; 000000d9H
  053c6	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?pet@@3PAUPET@@A[eax+4]
  053cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet@@3PAUaction@@A
  053d1	89 88 44 01 00
	00		 mov	 DWORD PTR [eax+324], ecx
  053d7	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  053dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  053e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 14375: 							petWndBtnFlag[2] = TRUE;

  053e5	b8 01 00 00 00	 mov	 eax, 1
$LN972@MenuProc:

; 14376: 						}
; 14377: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_B) && petWndBtnFlag[2] == TRUE) {

  053ea	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  053f1	75 08		 jne	 SHORT $LN979@MenuProc
  053f3	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  053f9	74 0f		 je	 SHORT $LN977@MenuProc
$LN979@MenuProc:

; 14378: 							petWndBtnFlag[2] = TRUE;

  053fb	c7 05 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+8, 1
  05405	83 f8 01	 cmp	 eax, 1
  05408	74 0a		 je	 SHORT $LN978@MenuProc
$LN977@MenuProc:

; 14379: 						}
; 14380: 						else {
; 14381: 							petWndBtnFlag[2] = FALSE;

  0540a	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+8, 0
$LN978@MenuProc:

; 14382: 						}
; 14383: 					}
; 14384: 					else {
; 14385: 						petWndBtnFlag[2] = FALSE;
; 14386: 					}
; 14387: 					if (HitDispNo == petWndFontNo[3]) {

  05414	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  05419	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+12
  0541f	0f 85 23 01 00
	00		 jne	 $LN980@MenuProc

; 14388: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  05425	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0542c	0f 84 f9 00 00
	00		 je	 $LN4761@MenuProc

; 14389: 							if (pet[petStatusNo].changeNameFlag == TRUE) {

  05432	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  0543c	66 83 b8 78 00
	00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+120], 1
  05444	0f 85 ca 00 00
	00		 jne	 $LN983@MenuProc

; 14390: 								if (pActMenuWnd3 == NULL) {

  0544a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  0544f	85 c0		 test	 eax, eax
  05451	0f 85 85 00 00
	00		 jne	 $LN985@MenuProc

; 14391: 									pActMenuWnd3 = MakeWindowDisp(340, 4 + 280 + 56, 272, 88, 0, -1);

  05457	6a ff		 push	 -1
  05459	50		 push	 eax
  0545a	6a 58		 push	 88			; 00000058H
  0545c	68 10 01 00 00	 push	 272			; 00000110H
  05461	68 54 01 00 00	 push	 340			; 00000154H
  05466	68 54 01 00 00	 push	 340			; 00000154H
  0546b	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp

; 14392: 									play_se(202, 320, 240);

  05470	68 f0 00 00 00	 push	 240			; 000000f0H
  05475	68 40 01 00 00	 push	 320			; 00000140H
  0547a	68 ca 00 00 00	 push	 202			; 000000caH
  0547f	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, eax ; pActMenuWnd3
  05484	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 14393: 									petNameChange.buffer[0] = NULL;
; 14394: 									petNameChange.cnt = 0;
; 14395: 									petNameChange.cursor = 0;
; 14396: 									petNameChange.len = 16;
; 14397: 									petNameChange.color = 0;
; 14398: 									petNameChange.x = pActMenuWnd3->x + 22;

  05489	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  0548f	83 c4 24	 add	 esp, 36			; 00000024H
  05492	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?petNameChange@@3USTR_BUFFER@@A, 0
  05499	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?petNameChange@@3USTR_BUFFER@@A+263, 0
  054a0	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?petNameChange@@3USTR_BUFFER@@A+265, 0
  054a7	c6 05 04 01 00
	00 10		 mov	 BYTE PTR ?petNameChange@@3USTR_BUFFER@@A+260, 16 ; 00000010H
  054ae	c6 05 08 01 00
	00 00		 mov	 BYTE PTR ?petNameChange@@3USTR_BUFFER@@A+264, 0
  054b5	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  054b8	83 c0 16	 add	 eax, 22			; 00000016H
  054bb	a3 0c 01 00 00	 mov	 DWORD PTR ?petNameChange@@3USTR_BUFFER@@A+268, eax

; 14399: 									petNameChange.y = pActMenuWnd3->y + 25;

  054c0	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  054c3	83 c0 19	 add	 eax, 25			; 00000019H

; 14400: 									petNameChange.fontPrio = FONT_PRIO_FRONT;

  054c6	c7 05 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?petNameChange@@3USTR_BUFFER@@A+284, 1
  054d0	a3 10 01 00 00	 mov	 DWORD PTR ?petNameChange@@3USTR_BUFFER@@A+272, eax

; 14407: 								}
; 14408: 								petWndBtnFlag[3] = TRUE;

  054d5	b8 01 00 00 00	 mov	 eax, 1

; 14409: 							}

  054da	eb 54		 jmp	 SHORT $LN984@MenuProc
$LN985@MenuProc:

; 14401: 								}
; 14402: 								else {
; 14403: 									DeathAction(pActMenuWnd3);

  054dc	50		 push	 eax
  054dd	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14404: 									pActMenuWnd3 = NULL;
; 14405: 									GetKeyInputFocus(&MyChatBuffer);

  054e2	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  054e7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  054f1	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 14406: 									play_se(203, 320, 240);

  054f6	68 f0 00 00 00	 push	 240			; 000000f0H
  054fb	68 40 01 00 00	 push	 320			; 00000140H
  05500	68 cb 00 00 00	 push	 203			; 000000cbH
  05505	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0550a	83 c4 14	 add	 esp, 20			; 00000014H

; 14407: 								}
; 14408: 								petWndBtnFlag[3] = TRUE;

  0550d	b8 01 00 00 00	 mov	 eax, 1

; 14409: 							}

  05512	eb 1c		 jmp	 SHORT $LN984@MenuProc
$LN983@MenuProc:

; 14410: 							else {
; 14411: 								play_se(220, 320, 240);

  05514	68 f0 00 00 00	 push	 240			; 000000f0H
  05519	68 40 01 00 00	 push	 320			; 00000140H
  0551e	68 dc 00 00 00	 push	 220			; 000000dcH
  05523	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  05528	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4761@MenuProc:

; 14412: 							}
; 14413: 						}
; 14414: 						if (mouse.state & MOUSE_LEFT_CRICK && petWndBtnFlag[3] == TRUE) {

  0552b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+12
$LN984@MenuProc:
  05530	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  05537	74 0f		 je	 SHORT $LN980@MenuProc

; 14415: 							petWndBtnFlag[3] = TRUE;

  05539	c7 05 0c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+12, 1
  05543	83 f8 01	 cmp	 eax, 1
  05546	74 0a		 je	 SHORT $LN981@MenuProc
$LN980@MenuProc:

; 14416: 						}
; 14417: 						else {
; 14418: 							petWndBtnFlag[3] = FALSE;
; 14419: 						}
; 14420: 					}
; 14421: 					else {
; 14422: 						petWndBtnFlag[3] = FALSE;
; 14423: 					}
; 14424: 					if (HitDispNo == petWndFontNo[7]) {

  05548	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+12, 0
$LN981@MenuProc:
  05552	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  05557	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+28
  0555d	0f 85 9d 02 00
	00		 jne	 $LN989@MenuProc

; 14425: 						if (pet[petStatusNo].graNo != 100451 && pet[petStatusNo].graNo != 100432 &&
; 14426: 							pet[petStatusNo].graNo != 101280 && pet[petStatusNo].graNo != 101281 &&
; 14427: 							pet[petStatusNo].graNo != 100015 && pet[petStatusNo].graNo != 100018 &&
; 14428: 							pet[petStatusNo].graNo != 101279 && pet[petStatusNo].graNo != 100401 &&
; 14429: 							pet[petStatusNo].graNo != 101414 && pet[petStatusNo].graNo != 101167 &&
; 14430: 							pet[petStatusNo].graNo != 101172 && pet[petStatusNo].graNo != 102011 &&

  05563	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  0556d	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+4]
  05573	3d 63 88 01 00	 cmp	 eax, 100451		; 00018863H
  05578	0f 84 66 02 00
	00		 je	 $LN994@MenuProc
  0557e	3d 50 88 01 00	 cmp	 eax, 100432		; 00018850H
  05583	0f 84 5b 02 00
	00		 je	 $LN994@MenuProc
  05589	3d a0 8b 01 00	 cmp	 eax, 101280		; 00018ba0H
  0558e	0f 84 50 02 00
	00		 je	 $LN994@MenuProc
  05594	3d a1 8b 01 00	 cmp	 eax, 101281		; 00018ba1H
  05599	0f 84 45 02 00
	00		 je	 $LN994@MenuProc
  0559f	3d af 86 01 00	 cmp	 eax, 100015		; 000186afH
  055a4	0f 84 3a 02 00
	00		 je	 $LN994@MenuProc
  055aa	3d b2 86 01 00	 cmp	 eax, 100018		; 000186b2H
  055af	0f 84 2f 02 00
	00		 je	 $LN994@MenuProc
  055b5	3d 9f 8b 01 00	 cmp	 eax, 101279		; 00018b9fH
  055ba	0f 84 24 02 00
	00		 je	 $LN994@MenuProc
  055c0	3d 31 88 01 00	 cmp	 eax, 100401		; 00018831H
  055c5	0f 84 19 02 00
	00		 je	 $LN994@MenuProc
  055cb	3d 26 8c 01 00	 cmp	 eax, 101414		; 00018c26H
  055d0	0f 84 0e 02 00
	00		 je	 $LN994@MenuProc
  055d6	3d 2f 8b 01 00	 cmp	 eax, 101167		; 00018b2fH
  055db	0f 84 03 02 00
	00		 je	 $LN994@MenuProc
  055e1	3d 34 8b 01 00	 cmp	 eax, 101172		; 00018b34H
  055e6	0f 84 f8 01 00
	00		 je	 $LN994@MenuProc
  055ec	3d 7b 8e 01 00	 cmp	 eax, 102011		; 00018e7bH
  055f1	0f 84 ed 01 00
	00		 je	 $LN994@MenuProc
  055f7	3d 7c 8e 01 00	 cmp	 eax, 102012		; 00018e7cH
  055fc	0f 84 e2 01 00
	00		 je	 $LN994@MenuProc

; 14431: 							pet[petStatusNo].graNo != 102012)	// fix åªäºå® ç©ä¸è½ç§å® ç§
; 14432: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  05602	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  05609	0f 84 d5 01 00
	00		 je	 $LN994@MenuProc

; 14433: 								int tblNo = GetPettblNo(pet[petStatusNo].graNo);

  0560f	50		 push	 eax
  05610	e8 00 00 00 00	 call	 ?GetPettblNo@@YAHH@Z	; GetPettblNo
  05615	83 c4 04	 add	 esp, 4

; 14434: 								int albumNo;
; 14435: 								if (0 <= tblNo && tblNo < MAX_PET_TBL) {

  05618	85 c0		 test	 eax, eax
  0561a	0f 88 ad 01 00
	00		 js	 $LN993@MenuProc
  05620	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?MAX_PET_TBL@@3HA ; MAX_PET_TBL
  05626	0f 8d a1 01 00
	00		 jge	 $LN993@MenuProc

; 14436: 									if (tblNo == 442)
; 14437: 										albumNo = 0;
; 14438: 
; 14439: 									albumNo = PetAlbumTbl[tblNo].albumNo;

  0562c	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  05633	2b f0		 sub	 esi, eax
  05635	c1 e6 02	 shl	 esi, 2
  05638	89 b5 f8 b9 ff
	ff		 mov	 DWORD PTR tv38544[ebp], esi
  0563e	8b 86 00 00 00
	00		 mov	 eax, DWORD PTR ?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A[esi]
  05644	89 85 e0 b9 ff
	ff		 mov	 DWORD PTR _albumNo$1$[ebp], eax

; 14440: 									if (albumNo != -1) {

  0564a	83 f8 ff	 cmp	 eax, -1
  0564d	0f 84 7a 01 00
	00		 je	 $LN993@MenuProc

; 14441: 										PetAlbum[albumNo].flag = 2;

  05653	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]

; 14442: 										if (pet[petStatusNo].freeName[0] != NULL) {

  05656	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05660	c1 e2 04	 shl	 edx, 4
  05663	80 b8 65 00 00
	00 00		 cmp	 BYTE PTR ?pet@@3PAUPET@@A[eax+101], 0
  0566a	c7 82 4c 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+76], 2
  05674	8d 88 65 00 00
	00		 lea	 ecx, DWORD PTR ?pet@@3PAUPET@@A[eax+101]
  0567a	8d 82 11 00 00
	00		 lea	 eax, DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+17]
  05680	89 85 fc b9 ff
	ff		 mov	 DWORD PTR tv39387[ebp], eax
  05686	74 1e		 je	 SHORT $LN998@MenuProc

; 14443: 											strcpy(PetAlbum[albumNo].freeName, pet[petStatusNo].freeName);

  05688	8b f0		 mov	 esi, eax
  0568a	66 0f 1f 44 00
	00		 npad	 6
$LL1968@MenuProc:
  05690	8a 01		 mov	 al, BYTE PTR [ecx]
  05692	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  05695	88 06		 mov	 BYTE PTR [esi], al
  05697	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0569a	84 c0		 test	 al, al
  0569c	75 f2		 jne	 SHORT $LL1968@MenuProc

; 14444: 										}

  0569e	8b b5 f8 b9 ff
	ff		 mov	 esi, DWORD PTR tv38544[ebp]
  056a4	eb 1d		 jmp	 SHORT $LN999@MenuProc
$LN998@MenuProc:

; 14445: 										else {
; 14446: 											strcpy(PetAlbum[albumNo].freeName, PetAlbumTbl[tblNo].name);

  056a6	8d 8e 04 00 00
	00		 lea	 ecx, DWORD PTR ?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A[esi+4]
  056ac	2b c1		 sub	 eax, ecx
  056ae	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39332[ebp], eax
  056b4	8b f8		 mov	 edi, eax
$LL1969@MenuProc:
  056b6	8a 01		 mov	 al, BYTE PTR [ecx]
  056b8	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  056bb	88 44 39 ff	 mov	 BYTE PTR [ecx+edi-1], al
  056bf	84 c0		 test	 al, al
  056c1	75 f3		 jne	 SHORT $LL1969@MenuProc
$LN999@MenuProc:

; 14447: 										}
; 14448: 										strcpy(PetAlbum[albumNo].name, PetAlbumTbl[tblNo].name);

  056c3	8d 8e 04 00 00
	00		 lea	 ecx, DWORD PTR ?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A[esi+4]
  056c9	8b c2		 mov	 eax, edx
  056cb	2b c1		 sub	 eax, ecx
  056cd	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv35985[ebp], eax
  056d3	8b f8		 mov	 edi, eax
  056d5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL1970@MenuProc:
  056e0	8a 01		 mov	 al, BYTE PTR [ecx]
  056e2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  056e5	88 84 39 ff ff
	ff ff		 mov	 BYTE PTR ?PetAlbum@@3PAUPET_ALBUM@@A[ecx+edi-1], al
  056ec	84 c0		 test	 al, al
  056ee	75 f0		 jne	 SHORT $LL1970@MenuProc

; 14449: 										PetAlbum[albumNo].faceGraNo = PetAlbumTbl[tblNo].faceGraNo;
; 14450: 										PetAlbum[albumNo].level = pet[petStatusNo].level;

  056f0	69 0d 00 00 00
	00 78 0b 00 00	 imul	 ecx, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  056fa	8b 86 18 00 00
	00		 mov	 eax, DWORD PTR ?PetAlbumTbl@@3PAUPET_ALBUM_TBL@@A[esi+24]
  05700	89 82 24 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+36], eax

; 14451: 										PetAlbum[albumNo].maxHp = pet[petStatusNo].maxHp;
; 14452: 										PetAlbum[albumNo].str = pet[petStatusNo].atk;
; 14453: 										PetAlbum[albumNo].quick = pet[petStatusNo].quick;
; 14454: 										PetAlbum[albumNo].def = pet[petStatusNo].def;
; 14455: 										PetAlbum[albumNo].earth = pet[petStatusNo].earth;
; 14456: 										PetAlbum[albumNo].water = pet[petStatusNo].water;
; 14457: 										PetAlbum[albumNo].fire = pet[petStatusNo].fire;
; 14458: 										PetAlbum[albumNo].wind = pet[petStatusNo].wind;
; 14459: 										play_se(201, 320, 240);

  05706	68 f0 00 00 00	 push	 240			; 000000f0H
  0570b	68 40 01 00 00	 push	 320			; 00000140H
  05710	68 c9 00 00 00	 push	 201			; 000000c9H
  05715	8b 81 20 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+32]
  0571b	89 82 28 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+40], eax
  05721	8b 81 0c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+12]
  05727	89 82 2c 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+44], eax
  0572d	8b 81 24 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+36]
  05733	89 82 30 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+48], eax
  05739	8b 81 2c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+44]
  0573f	89 82 34 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+52], eax
  05745	8b 81 28 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+40]
  0574b	89 82 38 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+56], eax
  05751	8b 81 34 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+52]
  05757	89 82 3c 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+60], eax
  0575d	8b 81 38 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+56]
  05763	89 82 40 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+64], eax
  05769	8b 81 3c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+60]
  0576f	89 82 44 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+68], eax
  05775	8b 81 40 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+64]
  0577b	89 82 48 00 00
	00		 mov	 DWORD PTR ?PetAlbum@@3PAUPET_ALBUM@@A[edx+72], eax
  05781	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 14460: 										sprintf(moji, "%s ì´¬ìï¼", PetAlbum[albumNo].freeName);

  05786	ff b5 fc b9 ff
	ff		 push	 DWORD PTR tv39387[ebp]
  0578c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05792	68 00 00 00 00	 push	 OFFSET ??_C@_09CFBKFGII@?$CFs?5?C?T?$LP?$LF?$KD?$KB@
  05797	50		 push	 eax
  05798	e8 00 00 00 00	 call	 _sprintf

; 14461: 										StockChatBufferLine(moji, FONT_PAL_WHITE);

  0579d	6a 00		 push	 0
  0579f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  057a5	6a 00		 push	 0
  057a7	50		 push	 eax
  057a8	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine

; 14462: 										petWndBtnFlag[7] = TRUE;
; 14463: 										SaveAlbum(albumNo);

  057ad	ff b5 e0 b9 ff
	ff		 push	 DWORD PTR _albumNo$1$[ebp]
  057b3	c7 05 1c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+28, 1
  057bd	e8 00 00 00 00	 call	 ?SaveAlbum@@YAHH@Z	; SaveAlbum

; 14464: 
; 14465: 									}

  057c2	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  057c8	83 c4 28	 add	 esp, 40			; 00000028H
  057cb	eb 17		 jmp	 SHORT $LN994@MenuProc
$LN993@MenuProc:

; 14466: 									else {
; 14467: 										play_se(220, 320, 240);
; 14468: #ifdef _STONDEBUG_		
; 14469: 										sprintf(moji, "ì«ìê° ì´ìí´ %d", pet[petStatusNo].graNo);
; 14470: 										MessageBox(hWnd, moji, "íì¸", MB_OK | MB_ICONSTOP);
; 14471: #endif
; 14472: 									}
; 14473: 								}
; 14474: 								else {
; 14475: 									play_se(220, 320, 240);
; 14476: #ifdef _STONDEBUG_		
; 14477: 									sprintf(moji, "íí¸tableì«ìê° ì´ìí©ëë¤ %d", tblNo);
; 14478: 									MessageBox(hWnd, moji, "íì¸", MB_OK | MB_ICONSTOP);
; 14479: #endif
; 14480: 								}
; 14481: 							}
; 14482: 						if (mouse.state & MOUSE_LEFT_CRICK && petWndBtnFlag[7] == TRUE) {

  057cd	68 f0 00 00 00	 push	 240			; 000000f0H
  057d2	68 40 01 00 00	 push	 320			; 00000140H
  057d7	68 dc 00 00 00	 push	 220			; 000000dcH
  057dc	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  057e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN994@MenuProc:
  057e4	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  057eb	74 13		 je	 SHORT $LN989@MenuProc
  057ed	83 3d 1c 00 00
	00 01		 cmp	 DWORD PTR ?petWndBtnFlag@@3PAHA+28, 1

; 14483: 							petWndBtnFlag[7] = TRUE;

  057f4	c7 05 1c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+28, 1
  057fe	74 0a		 je	 SHORT $LN990@MenuProc
$LN989@MenuProc:

; 14484: 						}
; 14485: 						else {
; 14486: 							petWndBtnFlag[7] = FALSE;
; 14487: 						}
; 14488: 					}
; 14489: 					else {
; 14490: 						petWndBtnFlag[7] = FALSE;
; 14491: 					}
; 14492: 					if (pActMenuWnd != NULL) {

  05800	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+28, 0
$LN990@MenuProc:
  0580a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  05811	0f 84 5d 0a 00
	00		 je	 $LN4762@MenuProc

; 14493: 
; 14494: #define PET_WND_ATTR_X 159
; 14495: #define PET_WND_ATTR_Y 5
; 14496: 
; 14497: 						int x2;
; 14498: 						if (pet[petStatusNo].freeName[0] != NULL) {

  05817	69 0d 00 00 00
	00 78 0b 00 00	 imul	 ecx, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05821	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06BLADCOKI@?$FLLOCK?$FN@
  05826	80 b9 65 00 00
	00 00		 cmp	 BYTE PTR ?pet@@3PAUPET@@A[ecx+101], 0
  0582d	8b b1 e0 0a 00
	00		 mov	 esi, DWORD PTR ?pet@@3PAUPET@@A[ecx+2784]
  05833	8d 91 65 00 00
	00		 lea	 edx, DWORD PTR ?pet@@3PAUPET@@A[ecx+101]
  05839	74 0c		 je	 SHORT $LN1003@MenuProc

; 14499: 							//CenteringStr( pet[ petStatusNo ].name, moji, PET_NAME_LEN );
; 14500: 							sprintf(moji, "%s %-16s", (pet[petStatusNo].petlock ? "[LOCK]" : ""), pet[petStatusNo].freeName);

  0583b	85 f6		 test	 esi, esi
  0583d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@@
  05842	0f 44 c1	 cmove	 eax, ecx

; 14501: 						}

  05845	eb 10		 jmp	 SHORT $LN1004@MenuProc
$LN1003@MenuProc:

; 14502: 						else {
; 14503: 							//CenteringStr( pet[ petStatusNo ].name, moji, PET_NAME_LEN );
; 14504: 							sprintf(moji, "%s %-16s", (pet[petStatusNo].petlock ? "[LOCK]" : ""), pet[petStatusNo].name);

  05847	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@@
  0584c	85 f6		 test	 esi, esi
  0584e	0f 44 c2	 cmove	 eax, edx
  05851	8d 91 54 00 00
	00		 lea	 edx, DWORD PTR ?pet@@3PAUPET@@A[ecx+84]
$LN1004@MenuProc:

; 14505: 						}
; 14506: 
; 14507: 						StockFontBuffer(x + 93, y + 29, FONT_PRIO_FRONT, 0, moji, 0);//æå°åå­

  05857	52		 push	 edx
  05858	50		 push	 eax
  05859	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0585f	68 00 00 00 00	 push	 OFFSET ??_C@_08DOKBNALB@?$CFs?5?$CF?916s@
  05864	50		 push	 eax
  05865	e8 00 00 00 00	 call	 _sprintf
  0586a	6a 00		 push	 0
  0586c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05872	50		 push	 eax
  05873	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05879	8d 77 1d	 lea	 esi, DWORD PTR [edi+29]
  0587c	6a 00		 push	 0
  0587e	6a 01		 push	 1
  05880	83 c0 5d	 add	 eax, 93			; 0000005dH
  05883	56		 push	 esi
  05884	50		 push	 eax
  05885	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14508: 
; 14509: 						petWndFontNo[3] = StockDispBufferç»å¯¹ä½ç½®(x + 198, y + 29, DISP_PRIO_IME3, CG_NAME_CHANGE_BTN + petWndBtnFlag[3], 2);

  0588a	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+12
  0588f	6a 02		 push	 2
  05891	05 ca 65 00 00	 add	 eax, 26058		; 000065caH
  05896	50		 push	 eax
  05897	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0589d	6a 69		 push	 105			; 00000069H
  0589f	05 c6 00 00 00	 add	 eax, 198		; 000000c6H
  058a4	56		 push	 esi
  058a5	50		 push	 eax
  058a6	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  058ab	a3 0c 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+12, eax

; 14510: 						
; 14511: 						sprintf(moji, "%3d", pet[petStatusNo].level);

  058b0	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  058ba	ff b0 20 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+32]
  058c0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  058c6	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  058cb	50		 push	 eax
  058cc	e8 00 00 00 00	 call	 _sprintf
  058d1	83 c4 48	 add	 esp, 72			; 00000048H

; 14512: 						StockFontBuffer(x + 71, y + 59, FONT_PRIO_FRONT, 0, moji, 0);

  058d4	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  058da	8d 77 3b	 lea	 esi, DWORD PTR [edi+59]
  058dd	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  058e3	6a 00		 push	 0
  058e5	51		 push	 ecx
  058e6	6a 00		 push	 0
  058e8	6a 01		 push	 1
  058ea	8d 47 47	 lea	 eax, DWORD PTR [edi+71]
  058ed	56		 push	 esi
  058ee	50		 push	 eax
  058ef	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14513: 
; 14514: 						sprintf(moji, "%3d", 5-pet[petStatusNo].reset);

  058f4	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  058fe	b9 05 00 00 00	 mov	 ecx, 5
  05903	2b 88 70 0b 00
	00		 sub	 ecx, DWORD PTR ?pet@@3PAUPET@@A[eax+2928]
  05909	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0590f	51		 push	 ecx
  05910	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  05915	50		 push	 eax
  05916	e8 00 00 00 00	 call	 _sprintf

; 14515: 						StockFontBuffer(x + 164, y + 59, FONT_PRIO_FRONT, 0, moji, 0);

  0591b	6a 00		 push	 0
  0591d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05923	50		 push	 eax
  05924	6a 00		 push	 0
  05926	6a 01		 push	 1
  05928	8d 87 a4 00 00
	00		 lea	 eax, DWORD PTR [edi+164]
  0592e	56		 push	 esi
  0592f	50		 push	 eax
  05930	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14516: 
; 14517: 						sprintf(moji, "%3d", pet[petStatusNo].ai);

  05935	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  0593f	ff b0 30 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+48]
  05945	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0594b	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  05950	50		 push	 eax
  05951	e8 00 00 00 00	 call	 _sprintf
  05956	83 c4 48	 add	 esp, 72			; 00000048H

; 14518: 						StockFontBuffer(x + 253, y + 59, FONT_PRIO_FRONT, 0, moji, 0);

  05959	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0595f	81 c7 fd 00 00
	00		 add	 edi, 253		; 000000fdH
  05965	6a 00		 push	 0
  05967	50		 push	 eax
  05968	6a 00		 push	 0
  0596a	6a 01		 push	 1
  0596c	56		 push	 esi
  0596d	57		 push	 edi
  0596e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14519: 
; 14520: 						sprintf(moji, "%d/%d  (%.2f%%)", pet[petStatusNo].exp, pet[petStatusNo].maxExp, (float)pet[petStatusNo].exp / pet[petStatusNo].maxExp * 100.0f);

  05973	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  0597d	8b 88 18 00 00
	00		 mov	 ecx, DWORD PTR ?pet@@3PAUPET@@A[eax+24]
  05983	8b 80 1c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+28]
  05989	83 c4 10	 add	 esp, 16			; 00000010H
  0598c	66 0f 6e c9	 movd	 xmm1, ecx
  05990	0f 5b c9	 cvtdq2ps xmm1, xmm1
  05993	66 0f 6e c0	 movd	 xmm0, eax
  05997	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0599a	f3 0f 5e c8	 divss	 xmm1, xmm0
  0599e	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42c80000
  059a6	0f 5a c1	 cvtps2pd xmm0, xmm1
  059a9	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  059ae	50		 push	 eax
  059af	51		 push	 ecx
  059b0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  059b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MEIFLDBG@?$CFd?1?$CFd?5?5?$CI?$CF?42f?$CF?$CF?$CJ@
  059bb	50		 push	 eax
  059bc	e8 00 00 00 00	 call	 _sprintf

; 14521: 						StockFontBuffer(x + 82, y + 83, FONT_PRIO_FRONT, 0, moji, 0);

  059c1	8b b5 04 ba ff
	ff		 mov	 esi, DWORD PTR _y$11$[ebp]
  059c7	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  059cd	8b 8d 08 ba ff
	ff		 mov	 ecx, DWORD PTR _x$3$[ebp]
  059d3	6a 00		 push	 0
  059d5	50		 push	 eax
  059d6	6a 00		 push	 0
  059d8	6a 01		 push	 1
  059da	8d 46 53	 lea	 eax, DWORD PTR [esi+83]
  059dd	83 c1 52	 add	 ecx, 82			; 00000052H
  059e0	50		 push	 eax
  059e1	51		 push	 ecx
  059e2	89 8d f4 b9 ff
	ff		 mov	 DWORD PTR tv38631[ebp], ecx
  059e8	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14523: 						Ranking r(pet[petStatusNo]);

  059ed	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  059f7	83 c4 30	 add	 esp, 48			; 00000030H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  059fa	c7 85 38 d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$31[ebp+20], 0
  05a04	c7 85 3c d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$31[ebp+24], 0

; 4377 :         _Mypair._Myval2._Mysize = 0;

  05a0e	c7 85 38 d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$31[ebp+20], 0

; 4378 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  05a18	c7 85 3c d7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR _r$31[ebp+24], 15 ; 0000000fH
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 14523: 						Ranking r(pet[petStatusNo]);

  05a22	05 00 00 00 00	 add	 eax, OFFSET ?pet@@3PAUPET@@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4380 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  05a27	c6 85 28 d7 ff
	ff 00		 mov	 BYTE PTR _r$31[ebp+4], 0
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 164  : 	Ranking(const PET& pet)

  05a2e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 165  : 	{
; 166  : 		Calculate(pet);

  05a35	8d 8d 24 d7 ff
	ff		 lea	 ecx, DWORD PTR _r$31[ebp]
  05a3b	50		 push	 eax
  05a3c	e8 00 00 00 00	 call	 ?Calculate@Ranking@@QAEXABUPET@@@Z ; Ranking::Calculate

; 14523: 						Ranking r(pet[petStatusNo]);

  05a41	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 14524: 						int imoji;
; 14525: 
; 14526: 						sprintf(moji, "%4d / %4d", pet[petStatusNo].hp, pet[petStatusNo].maxHp);

  05a48	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05a52	ff b0 0c 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+12]
  05a58	ff b0 08 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+8]
  05a5e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05a64	68 00 00 00 00	 push	 OFFSET ??_C@_09NPOEHNBK@?$CF4d?5?1?5?$CF4d@
  05a69	50		 push	 eax
  05a6a	e8 00 00 00 00	 call	 _sprintf

; 14527: 						StockFontBuffer(x + 82 , y + 108, FONT_PRIO_FRONT, 0, moji, 0);

  05a6f	6a 00		 push	 0
  05a71	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05a77	83 c6 6c	 add	 esi, 108		; 0000006cH
  05a7a	50		 push	 eax
  05a7b	6a 00		 push	 0
  05a7d	6a 01		 push	 1
  05a7f	56		 push	 esi
  05a80	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR tv38631[ebp]
  05a86	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14528: 						sprintf(moji, "%.3f", r.h);

  05a8b	f2 0f 10 85 f4
	d7 ff ff	 movsd	 xmm0, QWORD PTR _r$31[ebp+208]
  05a93	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05a99	83 c4 20	 add	 esp, 32			; 00000020H
  05a9c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  05aa1	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05aa6	50		 push	 eax
  05aa7	e8 00 00 00 00	 call	 _sprintf

; 14529: 						StockFontBuffer(x + 194, y + 108, FONT_PRIO_FRONT, 0, moji, 0);

  05aac	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05ab2	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  05ab8	6a 00		 push	 0
  05aba	51		 push	 ecx
  05abb	6a 00		 push	 0
  05abd	6a 01		 push	 1
  05abf	05 c2 00 00 00	 add	 eax, 194		; 000000c2H
  05ac4	56		 push	 esi
  05ac5	50		 push	 eax
  05ac6	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14530: 						imoji = pet[petStatusNo].maxHp - r.svit;

  05acb	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05ad5	8b 80 0c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+12]
  05adb	2b 85 84 d7 ff
	ff		 sub	 eax, DWORD PTR _r$31[ebp+96]

; 14531: 						sprintf(moji, "%s%d", imoji >= 0 ? " +" : " ", imoji);

  05ae1	50		 push	 eax
  05ae2	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01CLKCMJKC@?5@
  05ae7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02EOIDJNGE@?5?$CL@
  05aec	0f 48 c1	 cmovs	 eax, ecx
  05aef	50		 push	 eax
  05af0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05af6	68 00 00 00 00	 push	 OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd@
  05afb	50		 push	 eax
  05afc	e8 00 00 00 00	 call	 _sprintf

; 14532: 						StockFontBuffer(x + 253, y + 108, FONT_PRIO_FRONT, 0, moji, 0);

  05b01	6a 00		 push	 0
  05b03	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05b09	50		 push	 eax
  05b0a	6a 00		 push	 0
  05b0c	6a 01		 push	 1
  05b0e	56		 push	 esi
  05b0f	57		 push	 edi
  05b10	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14533: 
; 14534: 						sprintf(moji, "%4d", pet[petStatusNo].atk);

  05b15	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05b1f	83 c4 50	 add	 esp, 80			; 00000050H
  05b22	ff b0 24 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+36]
  05b28	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05b2e	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  05b33	50		 push	 eax
  05b34	e8 00 00 00 00	 call	 _sprintf

; 14535: 						StockFontBuffer(x + 100, y + 132, FONT_PRIO_FRONT, 0, moji, 0);

  05b39	8b b5 04 ba ff
	ff		 mov	 esi, DWORD PTR _y$11$[ebp]
  05b3f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05b45	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  05b4b	81 c6 84 00 00
	00		 add	 esi, 132		; 00000084H
  05b51	6a 00		 push	 0
  05b53	50		 push	 eax
  05b54	6a 00		 push	 0
  05b56	6a 01		 push	 1
  05b58	83 c7 64	 add	 edi, 100		; 00000064H
  05b5b	56		 push	 esi
  05b5c	57		 push	 edi
  05b5d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14536: 						sprintf(moji, "%.3f", r.s);

  05b62	f2 0f 10 85 fc
	d7 ff ff	 movsd	 xmm0, QWORD PTR _r$31[ebp+216]
  05b6a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05b70	83 c4 1c	 add	 esp, 28			; 0000001cH
  05b73	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  05b78	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05b7d	50		 push	 eax
  05b7e	e8 00 00 00 00	 call	 _sprintf

; 14537: 						StockFontBuffer(x + 194, y + 132, FONT_PRIO_FRONT, 0, moji, 0);

  05b83	6a 00		 push	 0
  05b85	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05b8b	50		 push	 eax
  05b8c	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05b92	6a 00		 push	 0
  05b94	6a 01		 push	 1
  05b96	05 c2 00 00 00	 add	 eax, 194		; 000000c2H
  05b9b	56		 push	 esi
  05b9c	50		 push	 eax
  05b9d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14538: 						imoji = pet[petStatusNo].atk - r.sstr;

  05ba2	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo

; 14539: 						sprintf(moji, "%s%d", imoji >= 0 ? " +" : " ", imoji);

  05bac	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01CLKCMJKC@?5@
  05bb1	8b 80 24 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+36]
  05bb7	2b 85 88 d7 ff
	ff		 sub	 eax, DWORD PTR _r$31[ebp+100]
  05bbd	50		 push	 eax
  05bbe	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02EOIDJNGE@?5?$CL@
  05bc3	0f 48 c1	 cmovs	 eax, ecx
  05bc6	50		 push	 eax
  05bc7	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05bcd	68 00 00 00 00	 push	 OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd@
  05bd2	50		 push	 eax
  05bd3	e8 00 00 00 00	 call	 _sprintf

; 14540: 						StockFontBuffer(x + 253, y + 132, FONT_PRIO_FRONT, 0, moji, 0);

  05bd8	6a 00		 push	 0
  05bda	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05be0	50		 push	 eax
  05be1	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05be7	6a 00		 push	 0
  05be9	6a 01		 push	 1
  05beb	05 fd 00 00 00	 add	 eax, 253		; 000000fdH
  05bf0	56		 push	 esi
  05bf1	50		 push	 eax
  05bf2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14541: 
; 14542: 						sprintf(moji, "%4d", pet[petStatusNo].def);

  05bf7	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05c01	83 c4 50	 add	 esp, 80			; 00000050H
  05c04	ff b0 28 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+40]
  05c0a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05c10	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  05c15	50		 push	 eax
  05c16	e8 00 00 00 00	 call	 _sprintf

; 14543: 						StockFontBuffer(x + 100, y + 156, FONT_PRIO_FRONT, 0, moji, 0);

  05c1b	8b b5 04 ba ff
	ff		 mov	 esi, DWORD PTR _y$11$[ebp]
  05c21	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05c27	6a 00		 push	 0
  05c29	50		 push	 eax
  05c2a	6a 00		 push	 0
  05c2c	6a 01		 push	 1
  05c2e	81 c6 9c 00 00
	00		 add	 esi, 156		; 0000009cH
  05c34	56		 push	 esi
  05c35	57		 push	 edi
  05c36	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14544: 						sprintf(moji, "%.3f", r.t);

  05c3b	f2 0f 10 85 04
	d8 ff ff	 movsd	 xmm0, QWORD PTR _r$31[ebp+224]
  05c43	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05c49	83 c4 1c	 add	 esp, 28			; 0000001cH
  05c4c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  05c51	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05c56	50		 push	 eax
  05c57	e8 00 00 00 00	 call	 _sprintf

; 14545: 						StockFontBuffer(x + 194, y + 156, FONT_PRIO_FRONT, 0, moji, 0);

  05c5c	6a 00		 push	 0
  05c5e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05c64	50		 push	 eax
  05c65	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05c6b	6a 00		 push	 0
  05c6d	6a 01		 push	 1
  05c6f	05 c2 00 00 00	 add	 eax, 194		; 000000c2H
  05c74	56		 push	 esi
  05c75	50		 push	 eax
  05c76	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14546: 						imoji = pet[petStatusNo].def - r.stgh;

  05c7b	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo

; 14547: 						sprintf(moji, "%s%d", imoji >= 0 ? " +" : " ", imoji);

  05c85	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01CLKCMJKC@?5@
  05c8a	8b 80 28 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+40]
  05c90	2b 85 8c d7 ff
	ff		 sub	 eax, DWORD PTR _r$31[ebp+104]
  05c96	50		 push	 eax
  05c97	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02EOIDJNGE@?5?$CL@
  05c9c	0f 48 c1	 cmovs	 eax, ecx
  05c9f	50		 push	 eax
  05ca0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05ca6	68 00 00 00 00	 push	 OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd@
  05cab	50		 push	 eax
  05cac	e8 00 00 00 00	 call	 _sprintf

; 14548: 						StockFontBuffer(x + 253, y + 156, FONT_PRIO_FRONT, 0, moji, 0);

  05cb1	6a 00		 push	 0
  05cb3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05cb9	50		 push	 eax
  05cba	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05cc0	6a 00		 push	 0
  05cc2	6a 01		 push	 1
  05cc4	05 fd 00 00 00	 add	 eax, 253		; 000000fdH
  05cc9	56		 push	 esi
  05cca	50		 push	 eax
  05ccb	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14549: 
; 14550: 						sprintf(moji, "%4d", pet[petStatusNo].quick);

  05cd0	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05cda	83 c4 50	 add	 esp, 80			; 00000050H
  05cdd	ff b0 2c 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+44]
  05ce3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05ce9	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  05cee	50		 push	 eax
  05cef	e8 00 00 00 00	 call	 _sprintf

; 14551: 						StockFontBuffer(x + 100, y + 180, FONT_PRIO_FRONT, 0, moji, 0);

  05cf4	8b b5 04 ba ff
	ff		 mov	 esi, DWORD PTR _y$11$[ebp]
  05cfa	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05d00	6a 00		 push	 0
  05d02	50		 push	 eax
  05d03	6a 00		 push	 0
  05d05	6a 01		 push	 1
  05d07	81 c6 b4 00 00
	00		 add	 esi, 180		; 000000b4H
  05d0d	56		 push	 esi
  05d0e	57		 push	 edi
  05d0f	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14552: 						sprintf(moji, "%.3f", r.d);

  05d14	f2 0f 10 85 0c
	d8 ff ff	 movsd	 xmm0, QWORD PTR _r$31[ebp+232]
  05d1c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05d22	83 c4 1c	 add	 esp, 28			; 0000001cH
  05d25	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  05d2a	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05d2f	50		 push	 eax
  05d30	e8 00 00 00 00	 call	 _sprintf

; 14553: 						StockFontBuffer(x + 194, y + 180, FONT_PRIO_FRONT, 0, moji, 0);

  05d35	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  05d3b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05d41	6a 00		 push	 0
  05d43	50		 push	 eax
  05d44	6a 00		 push	 0
  05d46	6a 01		 push	 1
  05d48	56		 push	 esi
  05d49	8d 87 c2 00 00
	00		 lea	 eax, DWORD PTR [edi+194]
  05d4f	50		 push	 eax
  05d50	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14554: 						imoji = pet[petStatusNo].quick - r.sdex;

  05d55	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo

; 14555: 						sprintf(moji, "%s%d", imoji >= 0 ? " +" : " ", imoji);

  05d5f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01CLKCMJKC@?5@
  05d64	8b 80 2c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+44]
  05d6a	2b 85 90 d7 ff
	ff		 sub	 eax, DWORD PTR _r$31[ebp+108]
  05d70	50		 push	 eax
  05d71	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02EOIDJNGE@?5?$CL@
  05d76	0f 48 c1	 cmovs	 eax, ecx
  05d79	50		 push	 eax
  05d7a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05d80	68 00 00 00 00	 push	 OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd@
  05d85	50		 push	 eax
  05d86	e8 00 00 00 00	 call	 _sprintf

; 14556: 						StockFontBuffer(x + 253, y + 180, FONT_PRIO_FRONT, 0, moji, 0);

  05d8b	6a 00		 push	 0
  05d8d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05d93	50		 push	 eax
  05d94	6a 00		 push	 0
  05d96	6a 01		 push	 1
  05d98	8d 87 fd 00 00
	00		 lea	 eax, DWORD PTR [edi+253]
  05d9e	56		 push	 esi
  05d9f	50		 push	 eax
  05da0	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14557: 
; 14558: 						sprintf(moji, "%3d%%", pet[petStatusNo].hit_rate);

  05da5	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05daf	83 c4 50	 add	 esp, 80			; 00000050H
  05db2	ff b0 20 0b 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+2848]
  05db8	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05dbe	68 00 00 00 00	 push	 OFFSET ??_C@_05JNOMDMDH@?$CF3d?$CF?$CF@
  05dc3	50		 push	 eax
  05dc4	e8 00 00 00 00	 call	 _sprintf

; 14559: 						StockFontBuffer(x + 82 , y + 204, FONT_PRIO_FRONT, 0, moji, 0);

  05dc9	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  05dcf	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05dd5	6a 00		 push	 0
  05dd7	50		 push	 eax
  05dd8	6a 00		 push	 0
  05dda	6a 01		 push	 1
  05ddc	8d b7 cc 00 00
	00		 lea	 esi, DWORD PTR [edi+204]
  05de2	56		 push	 esi
  05de3	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR tv38631[ebp]
  05de9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14560: 						sprintf(moji, "%3d%%", pet[petStatusNo].crit_rate);

  05dee	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05df8	ff b0 24 0b 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+2852]
  05dfe	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05e04	68 00 00 00 00	 push	 OFFSET ??_C@_05JNOMDMDH@?$CF3d?$CF?$CF@
  05e09	50		 push	 eax
  05e0a	e8 00 00 00 00	 call	 _sprintf

; 14561: 						StockFontBuffer(x + 165, y + 204, FONT_PRIO_FRONT, 0, moji, 0);

  05e0f	6a 00		 push	 0
  05e11	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05e17	50		 push	 eax
  05e18	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05e1e	6a 00		 push	 0
  05e20	6a 01		 push	 1
  05e22	05 a5 00 00 00	 add	 eax, 165		; 000000a5H
  05e27	56		 push	 esi
  05e28	50		 push	 eax
  05e29	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14562: 						sprintf(moji, "%3d%%", pet[petStatusNo].avoid_rate);

  05e2e	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  05e38	83 c4 48	 add	 esp, 72			; 00000048H
  05e3b	ff b0 28 0b 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+2856]
  05e41	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05e47	68 00 00 00 00	 push	 OFFSET ??_C@_05JNOMDMDH@?$CF3d?$CF?$CF@
  05e4c	50		 push	 eax
  05e4d	e8 00 00 00 00	 call	 _sprintf

; 14563: 						StockFontBuffer(x + 249, y + 204, FONT_PRIO_FRONT, 0, moji, 0);

  05e52	6a 00		 push	 0
  05e54	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  05e5a	50		 push	 eax
  05e5b	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05e61	6a 00		 push	 0
  05e63	6a 01		 push	 1
  05e65	05 f9 00 00 00	 add	 eax, 249		; 000000f9H
  05e6a	56		 push	 esi
  05e6b	50		 push	 eax
  05e6c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14564: 
; 14565: 						if (pet[petStatusNo].earth > 0) {

  05e71	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  05e77	83 c4 24	 add	 esp, 36			; 00000024H
  05e7a	69 c2 78 0b 00
	00		 imul	 eax, edx, 2936
  05e80	8b 88 34 00 00
	00		 mov	 ecx, DWORD PTR ?pet@@3PAUPET@@A[eax+52]
  05e86	8d 87 ef 00 00
	00		 lea	 eax, DWORD PTR [edi+239]
  05e8c	85 c9		 test	 ecx, ecx
  05e8e	0f 8e b7 00 00
	00		 jle	 $LN3314@MenuProc

; 14566: 							x2 = (int)(pet[petStatusNo].earth * 0.8);
; 14567: 							StockBoxDispBuffer(x + 80 + 2 + 0, y + 231 + 0, x + 80 + 2 + 0 + x2, y + 231 + 8, DISP_PRIO_IME4, SYSTEM_PAL_GREEN, 1);

  05e94	66 0f 6e c1	 movd	 xmm0, ecx
  05e98	8d 8f e7 00 00
	00		 lea	 ecx, DWORD PTR [edi+231]
  05e9e	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  05ea2	6a 01		 push	 1
  05ea4	68 fa 00 00 00	 push	 250			; 000000faH
  05ea9	6a 6a		 push	 106			; 0000006aH
  05eab	50		 push	 eax
  05eac	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05eb2	83 c0 52	 add	 eax, 82			; 00000052H
  05eb5	f2 0f 59 85 e4
	b9 ff ff	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a$1$[ebp]
  05ebd	f2 0f 2c f0	 cvttsd2si esi, xmm0
  05ec1	03 c6		 add	 eax, esi
  05ec3	50		 push	 eax
  05ec4	51		 push	 ecx
  05ec5	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR tv38631[ebp]
  05ecb	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 14568: 							StockBoxDispBuffer(x + 80 + 2 + 1, y + 231 + 1, x + 80 + 2 + 1 + x2, y + 231 + 9, DISP_PRIO_IME3, SYSTEM_PAL_GREEN2, 0);

  05ed0	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05ed6	8d 8f f0 00 00
	00		 lea	 ecx, DWORD PTR [edi+240]
  05edc	6a 00		 push	 0
  05ede	6a 02		 push	 2
  05ee0	8d 97 e8 00 00
	00		 lea	 edx, DWORD PTR [edi+232]
  05ee6	8d 78 53	 lea	 edi, DWORD PTR [eax+83]
  05ee9	83 c0 53	 add	 eax, 83			; 00000053H
  05eec	6a 69		 push	 105			; 00000069H
  05eee	51		 push	 ecx
  05eef	03 c6		 add	 eax, esi
  05ef1	89 bd f4 b9 ff
	ff		 mov	 DWORD PTR $T16[ebp], edi
  05ef7	50		 push	 eax
  05ef8	52		 push	 edx
  05ef9	57		 push	 edi
  05efa	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 14569: 							StockBoxDispBuffer(x + 80 + 2 + 2, y + 231 + 2, x + 80 + 2 + 2 + x2, y + 231 + 10, DISP_PRIO_IME3, SYSTEM_PAL_GREEN2, 0);

  05eff	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  05f05	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05f0b	6a 00		 push	 0
  05f0d	6a 02		 push	 2
  05f0f	8d 8f f1 00 00
	00		 lea	 ecx, DWORD PTR [edi+241]
  05f15	8d 97 e9 00 00
	00		 lea	 edx, DWORD PTR [edi+233]
  05f1b	8d 78 54	 lea	 edi, DWORD PTR [eax+84]
  05f1e	83 c0 54	 add	 eax, 84			; 00000054H
  05f21	6a 69		 push	 105			; 00000069H
  05f23	51		 push	 ecx
  05f24	03 c6		 add	 eax, esi
  05f26	89 bd ec b9 ff
	ff		 mov	 DWORD PTR $T12[ebp], edi
  05f2c	50		 push	 eax
  05f2d	52		 push	 edx
  05f2e	57		 push	 edi
  05f2f	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  05f34	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  05f3a	83 c4 54	 add	 esp, 84			; 00000054H
  05f3d	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  05f43	8b 8d 08 ba ff
	ff		 mov	 ecx, DWORD PTR _x$3$[ebp]
  05f49	eb 18		 jmp	 SHORT $LN1005@MenuProc
$LN3314@MenuProc:
  05f4b	8b 8d 08 ba ff
	ff		 mov	 ecx, DWORD PTR _x$3$[ebp]
  05f51	8d 41 53	 lea	 eax, DWORD PTR [ecx+83]
  05f54	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR $T16[ebp], eax
  05f5a	8d 41 54	 lea	 eax, DWORD PTR [ecx+84]
  05f5d	89 85 ec b9 ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
$LN1005@MenuProc:

; 14570: 						}
; 14571: 
; 14572: 						if (pet[petStatusNo].fire > 0) {

  05f63	69 c2 78 0b 00
	00		 imul	 eax, edx, 2936
  05f69	8d b1 d6 00 00
	00		 lea	 esi, DWORD PTR [ecx+214]
  05f6f	89 b5 f8 b9 ff
	ff		 mov	 DWORD PTR tv38805[ebp], esi
  05f75	8b 80 3c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+60]
  05f7b	85 c0		 test	 eax, eax
  05f7d	0f 8e b9 00 00
	00		 jle	 $LN3316@MenuProc

; 14573: 							x2 = (int)(pet[petStatusNo].fire * 0.8);
; 14574: 							StockBoxDispBuffer(x + 212 + 2 + 0, y + 231 + 0, x + 212 + 2 + 0 + x2, y + 231 + 8, DISP_PRIO_IME4, SYSTEM_PAL_RED, 1);

  05f83	66 0f 6e c0	 movd	 xmm0, eax
  05f87	8d 87 ef 00 00
	00		 lea	 eax, DWORD PTR [edi+239]
  05f8d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  05f91	6a 01		 push	 1
  05f93	68 f9 00 00 00	 push	 249			; 000000f9H
  05f98	6a 6a		 push	 106			; 0000006aH
  05f9a	50		 push	 eax
  05f9b	8d 81 d6 00 00
	00		 lea	 eax, DWORD PTR [ecx+214]
  05fa1	f2 0f 59 85 e4
	b9 ff ff	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a$1$[ebp]
  05fa9	f2 0f 2c f0	 cvttsd2si esi, xmm0
  05fad	03 c6		 add	 eax, esi
  05faf	50		 push	 eax
  05fb0	8d 87 e7 00 00
	00		 lea	 eax, DWORD PTR [edi+231]
  05fb6	50		 push	 eax
  05fb7	8d 81 d6 00 00
	00		 lea	 eax, DWORD PTR [ecx+214]
  05fbd	50		 push	 eax
  05fbe	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 14575: 							StockBoxDispBuffer(x + 212 + 2 + 1, y + 231 + 1, x + 212 + 2 + 1 + x2, y + 231 + 9, DISP_PRIO_IME3, SYSTEM_PAL_RED2, 0);

  05fc3	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05fc9	8d 97 f0 00 00
	00		 lea	 edx, DWORD PTR [edi+240]
  05fcf	6a 00		 push	 0
  05fd1	6a 01		 push	 1
  05fd3	6a 69		 push	 105			; 00000069H
  05fd5	8d 88 d7 00 00
	00		 lea	 ecx, DWORD PTR [eax+215]
  05fdb	05 d7 00 00 00	 add	 eax, 215		; 000000d7H
  05fe0	52		 push	 edx
  05fe1	03 c6		 add	 eax, esi
  05fe3	89 8d fc b9 ff
	ff		 mov	 DWORD PTR $T23[ebp], ecx
  05fe9	50		 push	 eax
  05fea	8d 87 e8 00 00
	00		 lea	 eax, DWORD PTR [edi+232]
  05ff0	50		 push	 eax
  05ff1	51		 push	 ecx
  05ff2	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 14576: 							StockBoxDispBuffer(x + 212 + 2 + 2, y + 231 + 2, x + 212 + 2 + 2 + x2, y + 231 + 10, DISP_PRIO_IME3, SYSTEM_PAL_RED2, 0);

  05ff7	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  05ffd	8d 97 f1 00 00
	00		 lea	 edx, DWORD PTR [edi+241]
  06003	6a 00		 push	 0
  06005	6a 01		 push	 1
  06007	6a 69		 push	 105			; 00000069H
  06009	8d 88 d8 00 00
	00		 lea	 ecx, DWORD PTR [eax+216]
  0600f	05 d8 00 00 00	 add	 eax, 216		; 000000d8H
  06014	52		 push	 edx
  06015	03 c6		 add	 eax, esi
  06017	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T9[ebp], ecx
  0601d	50		 push	 eax
  0601e	8d 87 e9 00 00
	00		 lea	 eax, DWORD PTR [edi+233]
  06024	50		 push	 eax
  06025	51		 push	 ecx
  06026	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  0602b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  06031	83 c4 54	 add	 esp, 84			; 00000054H
  06034	8b 8d 08 ba ff
	ff		 mov	 ecx, DWORD PTR _x$3$[ebp]
  0603a	eb 18		 jmp	 SHORT $LN1006@MenuProc
$LN3316@MenuProc:
  0603c	8d 81 d7 00 00
	00		 lea	 eax, DWORD PTR [ecx+215]
  06042	89 85 fc b9 ff
	ff		 mov	 DWORD PTR $T23[ebp], eax
  06048	8d 81 d8 00 00
	00		 lea	 eax, DWORD PTR [ecx+216]
  0604e	89 85 e0 b9 ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
$LN1006@MenuProc:

; 14577: 						}
; 14578: 
; 14579: 						if (pet[petStatusNo].water > 0) {

  06054	69 c2 78 0b 00
	00		 imul	 eax, edx, 2936
  0605a	8b 80 38 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+56]
  06060	85 c0		 test	 eax, eax
  06062	0f 8e 99 00 00
	00		 jle	 $LN3315@MenuProc

; 14580: 							x2 = (int)(pet[petStatusNo].water * 0.8);
; 14581: 							StockBoxDispBuffer(x + 80 + 2 + 0, y + 255 + 0, x + 80 + 2 + 0 + x2, y + 255 + 8, DISP_PRIO_IME4, SYSTEM_PAL_AQUA, 1);

  06068	66 0f 6e c0	 movd	 xmm0, eax
  0606c	8d 97 ff 00 00
	00		 lea	 edx, DWORD PTR [edi+255]
  06072	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  06076	6a 01		 push	 1
  06078	68 fe 00 00 00	 push	 254			; 000000feH
  0607d	6a 6a		 push	 106			; 0000006aH
  0607f	8d 87 07 01 00
	00		 lea	 eax, DWORD PTR [edi+263]
  06085	50		 push	 eax
  06086	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  06089	f2 0f 59 85 e4
	b9 ff ff	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a$1$[ebp]
  06091	f2 0f 2c f0	 cvttsd2si esi, xmm0
  06095	03 c6		 add	 eax, esi
  06097	50		 push	 eax
  06098	52		 push	 edx
  06099	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0609c	50		 push	 eax
  0609d	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 14582: 							StockBoxDispBuffer(x + 80 + 2 + 1, y + 255 + 1, x + 80 + 2 + 1 + x2, y + 255 + 9, DISP_PRIO_IME3, SYSTEM_PAL_AQUA2, 0);

  060a2	6a 00		 push	 0
  060a4	6a 06		 push	 6
  060a6	6a 69		 push	 105			; 00000069H
  060a8	8d 87 08 01 00
	00		 lea	 eax, DWORD PTR [edi+264]
  060ae	50		 push	 eax
  060af	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  060b5	8d 8f 00 01 00
	00		 lea	 ecx, DWORD PTR [edi+256]
  060bb	83 c0 53	 add	 eax, 83			; 00000053H
  060be	03 c6		 add	 eax, esi
  060c0	50		 push	 eax
  060c1	51		 push	 ecx
  060c2	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR $T16[ebp]
  060c8	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 14583: 							StockBoxDispBuffer(x + 80 + 2 + 2, y + 255 + 2, x + 80 + 2 + 2 + x2, y + 255 + 10, DISP_PRIO_IME3, SYSTEM_PAL_AQUA2, 0);

  060cd	6a 00		 push	 0
  060cf	6a 06		 push	 6
  060d1	6a 69		 push	 105			; 00000069H
  060d3	8d 87 09 01 00
	00		 lea	 eax, DWORD PTR [edi+265]
  060d9	50		 push	 eax
  060da	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  060e0	8d 8f 01 01 00
	00		 lea	 ecx, DWORD PTR [edi+257]
  060e6	83 c0 54	 add	 eax, 84			; 00000054H
  060e9	03 c6		 add	 eax, esi
  060eb	50		 push	 eax
  060ec	51		 push	 ecx
  060ed	ff b5 ec b9 ff
	ff		 push	 DWORD PTR $T12[ebp]
  060f3	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  060f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  060fe	83 c4 54	 add	 esp, 84			; 00000054H
$LN3315@MenuProc:

; 14584: 						}
; 14585: 
; 14586: 						if (pet[petStatusNo].wind > 0) {

  06101	69 c2 78 0b 00
	00		 imul	 eax, edx, 2936
  06107	8d 8f ff 00 00
	00		 lea	 ecx, DWORD PTR [edi+255]
  0610d	8b 80 40 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+64]
  06113	85 c0		 test	 eax, eax
  06115	0f 8e 9b 00 00
	00		 jle	 $LN1008@MenuProc

; 14587: 							x2 = (int)(pet[petStatusNo].wind * 0.8);
; 14588: 							StockBoxDispBuffer(x + 212 + 2 + 0, y + 255 + 0, x + 212 + 2 + 0 + x2, y + 255 + 8, DISP_PRIO_IME4, SYSTEM_PAL_YELLOW, 1);

  0611b	66 0f 6e c0	 movd	 xmm0, eax
  0611f	8d 87 07 01 00
	00		 lea	 eax, DWORD PTR [edi+263]
  06125	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  06129	6a 01		 push	 1
  0612b	68 fb 00 00 00	 push	 251			; 000000fbH
  06130	6a 6a		 push	 106			; 0000006aH
  06132	50		 push	 eax
  06133	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  06139	05 d6 00 00 00	 add	 eax, 214		; 000000d6H
  0613e	f2 0f 59 85 e4
	b9 ff ff	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a$1$[ebp]
  06146	f2 0f 2c f0	 cvttsd2si esi, xmm0
  0614a	03 c6		 add	 eax, esi
  0614c	50		 push	 eax
  0614d	51		 push	 ecx
  0614e	ff b5 f8 b9 ff
	ff		 push	 DWORD PTR tv38805[ebp]
  06154	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 14589: 							StockBoxDispBuffer(x + 212 + 2 + 1, y + 255 + 1, x + 212 + 2 + 1 + x2, y + 255 + 9, DISP_PRIO_IME3, SYSTEM_PAL_YELLOW2, 0);

  06159	6a 00		 push	 0
  0615b	6a 03		 push	 3
  0615d	6a 69		 push	 105			; 00000069H
  0615f	8d 87 08 01 00
	00		 lea	 eax, DWORD PTR [edi+264]
  06165	50		 push	 eax
  06166	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0616c	05 d7 00 00 00	 add	 eax, 215		; 000000d7H
  06171	03 c6		 add	 eax, esi
  06173	50		 push	 eax
  06174	8d 87 00 01 00
	00		 lea	 eax, DWORD PTR [edi+256]
  0617a	50		 push	 eax
  0617b	ff b5 fc b9 ff
	ff		 push	 DWORD PTR $T23[ebp]
  06181	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer

; 14590: 							StockBoxDispBuffer(x + 212 + 2 + 2, y + 255 + 2, x + 212 + 2 + 2 + x2, y + 255 + 10, DISP_PRIO_IME3, SYSTEM_PAL_YELLOW2, 0);

  06186	6a 00		 push	 0
  06188	6a 03		 push	 3
  0618a	6a 69		 push	 105			; 00000069H
  0618c	8d 87 09 01 00
	00		 lea	 eax, DWORD PTR [edi+265]
  06192	50		 push	 eax
  06193	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  06199	05 d8 00 00 00	 add	 eax, 216		; 000000d8H
  0619e	03 c6		 add	 eax, esi
  061a0	50		 push	 eax
  061a1	8d 87 01 01 00
	00		 lea	 eax, DWORD PTR [edi+257]
  061a7	50		 push	 eax
  061a8	ff b5 e0 b9 ff
	ff		 push	 DWORD PTR $T9[ebp]
  061ae	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  061b3	83 c4 54	 add	 esp, 84			; 00000054H
$LN1008@MenuProc:

; 14591: 						}
; 14592: 
; 14593: 						petWndFontNo[4] = StockDispBuffer(x + 286, y + 298, DISP_PRIO_IME3, CG_PET_WND_WAZA_BTN, 2);

  061b6	6a 02		 push	 2
  061b8	8d b7 2a 01 00
	00		 lea	 esi, DWORD PTR [edi+298]
  061be	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  061c4	68 be 65 00 00	 push	 26046			; 000065beH
  061c9	6a 69		 push	 105			; 00000069H
  061cb	56		 push	 esi
  061cc	8d 87 1e 01 00
	00		 lea	 eax, DWORD PTR [edi+286]
  061d2	50		 push	 eax
  061d3	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 14594: 						petWndFontNo[0] = StockDispBuffer(x + 380, y + 298, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  061d8	6a 02		 push	 2
  061da	68 bb 65 00 00	 push	 26043			; 000065bbH
  061df	6a 69		 push	 105			; 00000069H
  061e1	a3 10 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+16, eax
  061e6	8d 87 7c 01 00
	00		 lea	 eax, DWORD PTR [edi+380]
  061ec	56		 push	 esi
  061ed	50		 push	 eax
  061ee	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  061f3	a3 00 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA, eax

; 14595: 						petWndFontNo[1] = StockDispBuffer(x + 71 , y + 298, DISP_PRIO_IME3, CG_PREV_BTN + petWndBtnFlag[1], 2);

  061f8	a1 04 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+4
  061fd	6a 02		 push	 2
  061ff	05 44 66 00 00	 add	 eax, 26180		; 00006644H
  06204	50		 push	 eax
  06205	6a 69		 push	 105			; 00000069H
  06207	8d 47 47	 lea	 eax, DWORD PTR [edi+71]
  0620a	56		 push	 esi
  0620b	50		 push	 eax
  0620c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  06211	a3 04 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+4, eax

; 14596: 						petWndFontNo[2] = StockDispBuffer(x + 116, y + 298, DISP_PRIO_IME3, CG_NEXT_BTN + petWndBtnFlag[2], 2);

  06216	a1 08 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+8
  0621b	6a 02		 push	 2
  0621d	05 46 66 00 00	 add	 eax, 26182		; 00006646H
  06222	50		 push	 eax
  06223	6a 69		 push	 105			; 00000069H
  06225	8d 47 74	 lea	 eax, DWORD PTR [edi+116]
  06228	56		 push	 esi
  06229	50		 push	 eax
  0622a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0622f	83 c4 50	 add	 esp, 80			; 00000050H
  06232	a3 08 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+8, eax
  06237	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  0623e	8b 85 3c d7 ff
	ff		 mov	 eax, DWORD PTR _r$31[ebp+24]
  06244	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  06247	72 10		 jb	 SHORT $LN2106@MenuProc

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  06249	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0624a	50		 push	 eax
  0624b	ff b5 28 d7 ff
	ff		 push	 DWORD PTR _r$31[ebp+4]
  06251	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  06256	83 c4 08	 add	 esp, 8
$LN2106@MenuProc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  06259	c7 85 38 d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$31[ebp+20], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  06263	c7 85 3c d7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR _r$31[ebp+24], 15 ; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0626d	c6 85 28 d7 ff
	ff 00		 mov	 BYTE PTR _r$31[ebp+4], 0
$LN4762@MenuProc:
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 14601: 			if (pActMenuWnd3 != NULL) {

  06274	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  0627a	85 c9		 test	 ecx, ecx
  0627c	0f 84 7b 0e 00
	00		 je	 $LN4770@MenuProc

; 14602: 				if (pActMenuWnd3->hp > 0) {

  06282	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  06286	0f 8e 71 0e 00
	00		 jle	 $LN4770@MenuProc

; 14603: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd3->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd3->pYobi)->my, DISP_PRIO_MENU, CG_NAME_CHANGE_WND, 1);

  0628c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0628f	6a 01		 push	 1
  06291	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_NAME_CHANGE_WND@@3HA ; CG_NAME_CHANGE_WND
  06297	6a 68		 push	 104			; 00000068H
  06299	ff 70 18	 push	 DWORD PTR [eax+24]
  0629c	ff 70 14	 push	 DWORD PTR [eax+20]
  0629f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 14604: 					GetKeyInputFocus(&petNameChange);

  062a4	68 00 00 00 00	 push	 OFFSET ?petNameChange@@3USTR_BUFFER@@A ; petNameChange
  062a9	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  062ae	83 c4 18	 add	 esp, 24			; 00000018H

; 14605: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  062b1	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  062b8	74 55		 je	 SHORT $LN4764@MenuProc

; 14606: 						if (HitDispNo == petWndFontNo[5]) {

  062ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  062bf	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+20
  062c5	75 05		 jne	 SHORT $LN1012@MenuProc

; 14607: 							KeyboardReturn();

  062c7	e8 00 00 00 00	 call	 ?KeyboardReturn@@YAXXZ	; KeyboardReturn
$LN1012@MenuProc:

; 14608: 						}
; 14609: 						if (HitDispNo == petWndFontNo[6]) {

  062cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  062d1	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+24
  062d7	75 36		 jne	 SHORT $LN4764@MenuProc

; 14610: 							DeathAction(pActMenuWnd3);

  062d9	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3
  062df	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14611: 							pActMenuWnd3 = NULL;
; 14612: 							GetKeyInputFocus(&MyChatBuffer);

  062e4	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  062e9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  062f3	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 14613: 							play_se(203, 320, 240);

  062f8	68 f0 00 00 00	 push	 240			; 000000f0H
  062fd	68 40 01 00 00	 push	 320			; 00000140H
  06302	68 cb 00 00 00	 push	 203			; 000000cbH
  06307	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0630c	83 c4 14	 add	 esp, 20			; 00000014H
$LN4764@MenuProc:

; 14614: 						}
; 14615: 					}
; 14616: 					if (pActMenuWnd3 != NULL) {

  0630f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd3@@3PAUaction@@A, 0 ; pActMenuWnd3
  06316	0f 84 e1 0d 00
	00		 je	 $LN4770@MenuProc

; 14617: 						StockFontBuffer2(&petNameChange);

  0631c	68 00 00 00 00	 push	 OFFSET ?petNameChange@@3USTR_BUFFER@@A ; petNameChange
  06321	e8 00 00 00 00	 call	 ?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z ; StockFontBuffer2

; 14618: 						x = pActMenuWnd3->x + 20;

  06326	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd3@@3PAUaction@@A ; pActMenuWnd3

; 14619: 						y = pActMenuWnd3->y + 60;
; 14620: 						petWndFontNo[5] = StockDispBuffer(x + 60, y + 7, DISP_PRIO_IME3, CG_OK_BTN, 2);

  0632b	6a 02		 push	 2
  0632d	68 ed 65 00 00	 push	 26093			; 000065edH
  06332	6a 69		 push	 105			; 00000069H
  06334	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  06337	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0633a	83 c7 14	 add	 edi, 20			; 00000014H
  0633d	83 c0 3c	 add	 eax, 60			; 0000003cH
  06340	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  06346	89 85 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], eax
  0634c	8d 70 07	 lea	 esi, DWORD PTR [eax+7]
  0634f	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  06352	56		 push	 esi
  06353	50		 push	 eax
  06354	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 14621: 						petWndFontNo[6] = StockDispBuffer(x + 170, y + 7, DISP_PRIO_IME3, CG_CANCEL_BTN, 2);

  06359	6a 02		 push	 2
  0635b	68 c2 65 00 00	 push	 26050			; 000065c2H
  06360	6a 69		 push	 105			; 00000069H
  06362	a3 14 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+20, eax
  06367	8d 87 aa 00 00
	00		 lea	 eax, DWORD PTR [edi+170]
  0636d	56		 push	 esi
  0636e	50		 push	 eax
  0636f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  06374	83 c4 2c	 add	 esp, 44			; 0000002cH
  06377	a3 18 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+24, eax

; 14622: 					}
; 14623: 				}
; 14624: 			}
; 14625: 			break;

  0637c	e9 7c 0d 00 00	 jmp	 $LN4770@MenuProc
$LN1015@MenuProc:

; 14626: 
; 14627: 		case 2:
; 14628: 			if (pActMenuWnd == NULL) {

  06381	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  06388	75 56		 jne	 SHORT $LN1016@MenuProc

; 14629: 				pActMenuWnd = MakeWindowDisp(4, 4, 272, 348, 0, -1);

  0638a	6a ff		 push	 -1
  0638c	6a 00		 push	 0
  0638e	68 5c 01 00 00	 push	 348			; 0000015cH
  06393	68 10 01 00 00	 push	 272			; 00000110H
  06398	6a 04		 push	 4
  0639a	6a 04		 push	 4
  0639c	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  063a1	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  063a8	83 c4 18	 add	 esp, 24			; 00000018H
  063ab	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  063b0	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0
  063b7	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0
  063be	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0
  063c5	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  063cc	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0
  063d3	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0

; 14630: 				for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;
; 14631: 			}

  063db	e9 1d 0d 00 00	 jmp	 $LN4770@MenuProc
$LN1016@MenuProc:

; 14632: 			else {
; 14633: 				if (pActMenuWnd->hp > 0) {

  063e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  063e6	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  063ea	0f 8e 0d 0d 00
	00		 jle	 $LN4770@MenuProc

; 14634: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_PET_WAZA_WND, 1);

  063f0	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  063f3	6a 01		 push	 1
  063f5	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_PET_WAZA_WND@@3HA ; CG_PET_WAZA_WND
  063fb	6a 68		 push	 104			; 00000068H
  063fd	ff 70 18	 push	 DWORD PTR [eax+24]
  06400	ff 70 14	 push	 DWORD PTR [eax+20]
  06403	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 14635: 					for (i = 0; i < pet[petStatusNo].maxSkill; i++) {

  06408	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  0640e	33 f6		 xor	 esi, esi
  06410	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  06416	83 c4 14	 add	 esp, 20			; 00000014H
  06419	39 b0 44 00 00
	00		 cmp	 DWORD PTR ?pet@@3PAUPET@@A[eax+68], esi
  0641f	7e 36		 jle	 SHORT $LN152@MenuProc
$LL153@MenuProc:

; 14636: 						StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_IME3, CG_PET_WAZA_BAR_1 + i, 1);

  06421	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  06426	6a 01		 push	 1
  06428	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0642b	8d 86 13 66 00
	00		 lea	 eax, DWORD PTR [esi+26131]
  06431	50		 push	 eax
  06432	6a 69		 push	 105			; 00000069H
  06434	ff 71 18	 push	 DWORD PTR [ecx+24]
  06437	ff 71 14	 push	 DWORD PTR [ecx+20]
  0643a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0643f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  06445	46		 inc	 esi
  06446	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  0644c	83 c4 14	 add	 esp, 20			; 00000014H
  0644f	3b b0 44 00 00
	00		 cmp	 esi, DWORD PTR ?pet@@3PAUPET@@A[eax+68]
  06455	7c ca		 jl	 SHORT $LL153@MenuProc
$LN152@MenuProc:

; 14637: 					}
; 14638: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  06457	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0645e	74 49		 je	 SHORT $LN4765@MenuProc

; 14639: 						if (HitDispNo == petWndFontNo[7]) {

  06460	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  06465	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+28
  0646b	75 3c		 jne	 SHORT $LN4765@MenuProc

; 14640: 							DeathAction(pActMenuWnd);

  0646d	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  06473	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 14641: 							pActMenuWnd = NULL;
; 14642: 							petWndNo = 1;
; 14643: 							play_se(203, 320, 240);

  06478	68 f0 00 00 00	 push	 240			; 000000f0H
  0647d	68 40 01 00 00	 push	 320			; 00000140H
  06482	68 cb 00 00 00	 push	 203			; 000000cbH
  06487	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  06491	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 1
  0649b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  064a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  064a6	83 c4 10	 add	 esp, 16			; 00000010H
$LN4765@MenuProc:

; 14644: 						}
; 14645: 					}
; 14646: 					if (HitDispNo == petWndFontNo[8] || joy_con[0] & JOY_A) {

  064a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  064ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?joy_con@@3PAKA
  064b4	3b 05 20 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+32
  064ba	74 0c		 je	 SHORT $LN1023@MenuProc
  064bc	f7 c2 00 04 00
	00		 test	 edx, 1024		; 00000400H
  064c2	0f 84 b8 00 00
	00		 je	 $LN1028@MenuProc
$LN1023@MenuProc:

; 14647: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_A) {

  064c8	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  064cf	75 13		 jne	 SHORT $LL154@MenuProc
  064d1	f7 05 00 00 00
	00 00 04 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 1024 ; 00000400H
  064db	75 07		 jne	 SHORT $LL154@MenuProc
  064dd	a1 20 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+32
  064e2	eb 7c		 jmp	 SHORT $LN1024@MenuProc
$LL154@MenuProc:

; 14648: 							while (1) {
; 14649: 								petStatusNo--;

  064e4	49		 dec	 ecx

; 14650: 								if (petStatusNo <= -1) petStatusNo = 4;

  064e5	b8 04 00 00 00	 mov	 eax, 4
  064ea	83 f9 ff	 cmp	 ecx, -1
  064ed	0f 4e c8	 cmovle	 ecx, eax

; 14651: 								if (pet[petStatusNo].useFlag == TRUE) break;

  064f0	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  064f6	66 83 b8 76 00
	00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 1
  064fe	75 e4		 jne	 SHORT $LL154@MenuProc

; 14652: 							}
; 14653: 							for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;

  06500	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe

; 14654: 							play_se(217, 320, 240);

  06507	68 f0 00 00 00	 push	 240			; 000000f0H
  0650c	68 40 01 00 00	 push	 320			; 00000140H
  06511	68 d9 00 00 00	 push	 217			; 000000d9H
  06516	89 0d 00 00 00
	00		 mov	 DWORD PTR ?petStatusNo@@3HA, ecx ; petStatusNo
  0651c	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0
  06523	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0
  0652a	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0
  06531	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  06538	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0
  0653f	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0
  06547	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0654c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  06552	83 c4 0c	 add	 esp, 12			; 0000000cH
  06555	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?joy_con@@3PAKA

; 14655: 							petWndBtnFlag[8] = TRUE;

  0655b	b8 01 00 00 00	 mov	 eax, 1
$LN1024@MenuProc:

; 14656: 						}
; 14657: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_A) && petWndBtnFlag[8] == TRUE) {

  06560	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  06567	75 08		 jne	 SHORT $LN1030@MenuProc
  06569	f7 c2 00 04 00
	00		 test	 edx, 1024		; 00000400H
  0656f	74 0f		 je	 SHORT $LN1028@MenuProc
$LN1030@MenuProc:

; 14658: 							petWndBtnFlag[8] = TRUE;

  06571	c7 05 20 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+32, 1
  0657b	83 f8 01	 cmp	 eax, 1
  0657e	74 0a		 je	 SHORT $LN1029@MenuProc
$LN1028@MenuProc:

; 14659: 						}
; 14660: 						else {
; 14661: 							petWndBtnFlag[8] = FALSE;

  06580	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+32, 0
$LN1029@MenuProc:

; 14662: 						}
; 14663: 					}
; 14664: 					else {
; 14665: 						petWndBtnFlag[8] = FALSE;
; 14666: 					}
; 14667: 					if (HitDispNo == petWndFontNo[9] || joy_con[0] & JOY_B) {

  0658a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0658f	3b 05 24 00 00
	00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA+36
  06595	74 0c		 je	 SHORT $LN1033@MenuProc
  06597	f7 c2 00 01 00
	00		 test	 edx, 256		; 00000100H
  0659d	0f 84 b8 00 00
	00		 je	 $LN1038@MenuProc
$LN1033@MenuProc:

; 14668: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_B) {

  065a3	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  065aa	75 14		 jne	 SHORT $LL159@MenuProc
  065ac	f7 05 00 00 00
	00 00 01 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 256 ; 00000100H
  065b6	75 08		 jne	 SHORT $LL159@MenuProc
  065b8	a1 24 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+36
  065bd	eb 7c		 jmp	 SHORT $LN1034@MenuProc
  065bf	90		 npad	 1
$LL159@MenuProc:

; 14669: 							while (1) {
; 14670: 								petStatusNo++;

  065c0	41		 inc	 ecx

; 14671: 								if (petStatusNo >= 5) petStatusNo = 0;

  065c1	33 d2		 xor	 edx, edx
  065c3	8b c1		 mov	 eax, ecx
  065c5	83 f8 05	 cmp	 eax, 5
  065c8	0f 4d ca	 cmovge	 ecx, edx

; 14672: 								if (pet[petStatusNo].useFlag == TRUE) break;

  065cb	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  065d1	66 83 b8 76 00
	00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 1
  065d9	75 e5		 jne	 SHORT $LL159@MenuProc

; 14673: 							}
; 14674: 							for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;

  065db	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe

; 14675: 							play_se(217, 320, 240);

  065e2	68 f0 00 00 00	 push	 240			; 000000f0H
  065e7	68 40 01 00 00	 push	 320			; 00000140H
  065ec	68 d9 00 00 00	 push	 217			; 000000d9H
  065f1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?petStatusNo@@3HA, ecx ; petStatusNo
  065f7	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0
  065fe	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0
  06605	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0
  0660c	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  06613	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0
  0661a	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0
  06622	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  06627	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  0662d	83 c4 0c	 add	 esp, 12			; 0000000cH
  06630	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?joy_con@@3PAKA

; 14676: 							petWndBtnFlag[9] = TRUE;

  06636	b8 01 00 00 00	 mov	 eax, 1
$LN1034@MenuProc:

; 14677: 						}
; 14678: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_B) && petWndBtnFlag[9] == TRUE) {

  0663b	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  06642	75 08		 jne	 SHORT $LN1040@MenuProc
  06644	f7 c2 00 01 00
	00		 test	 edx, 256		; 00000100H
  0664a	74 0f		 je	 SHORT $LN1038@MenuProc
$LN1040@MenuProc:

; 14679: 							petWndBtnFlag[9] = TRUE;

  0664c	c7 05 24 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+36, 1
  06656	83 f8 01	 cmp	 eax, 1
  06659	74 0a		 je	 SHORT $LN1039@MenuProc
$LN1038@MenuProc:

; 14680: 						}
; 14681: 						else {
; 14682: 							petWndBtnFlag[9] = FALSE;

  0665b	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndBtnFlag@@3PAHA+36, 0
$LN1039@MenuProc:

; 14683: 						}
; 14684: 					}
; 14685: 					else {
; 14686: 						petWndBtnFlag[9] = FALSE;
; 14687: 					}
; 14688: 					if (pActMenuWnd != NULL) {

  06665	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0666b	85 d2		 test	 edx, edx
  0666d	0f 84 8a 0a 00
	00		 je	 $LN4770@MenuProc

; 14689: 						x = pActMenuWnd->x + 32;

  06673	8b 42 18	 mov	 eax, DWORD PTR [edx+24]

; 14690: 						y = pActMenuWnd->y + 252;
; 14691: 						for (i = 0; i < pet[petStatusNo].maxSkill; i++) {

  06676	33 f6		 xor	 esi, esi
  06678	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  0667b	83 c0 20	 add	 eax, 32			; 00000020H
  0667e	89 85 fc b9 ff
	ff		 mov	 DWORD PTR _x$5$[ebp], eax
  06684	81 c7 fc 00 00
	00		 add	 edi, 252		; 000000fcH
  0668a	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  06690	89 b5 f4 b9 ff
	ff		 mov	 DWORD PTR _i$9$[ebp], esi
  06696	39 b0 44 00 00
	00		 cmp	 DWORD PTR ?pet@@3PAUPET@@A[eax+68], esi
  0669c	0f 8e c1 08 00
	00		 jle	 $LN165@MenuProc
$LL166@MenuProc:

; 14692: 							if (petSkill[petStatusNo][i].useFlag == TRUE) {

  066a2	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  066a9	2b c1		 sub	 eax, ecx
  066ab	03 c6		 add	 eax, esi
  066ad	6b d0 6a	 imul	 edx, eax, 106
  066b0	66 83 ba 00 00
	00 00 01	 cmp	 WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[edx], 1
  066b8	0f 85 8c 08 00
	00		 jne	 $LN164@MenuProc

; 14693: 								if (HitFontNo == petWndFontNo[i]) {

  066be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  066c3	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?petWndFontNo@@3PAHA[esi*4]
  066ca	0f 85 7a 08 00
	00		 jne	 $LN164@MenuProc

; 14694: 									char *splitPoint = petSkill[petStatusNo][i].memo;

  066d0	8d b2 21 00 00
	00		 lea	 esi, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[edx+33]

; 14695: 									while (1) {
; 14696: 										if (strlen(splitPoint) > 24) {

  066d6	8b ce		 mov	 ecx, esi
  066d8	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  066db	0f 1f 44 00 00	 npad	 5
$LL4314@MenuProc:
  066e0	8a 01		 mov	 al, BYTE PTR [ecx]
  066e2	41		 inc	 ecx
  066e3	84 c0		 test	 al, al
  066e5	75 f9		 jne	 SHORT $LL4314@MenuProc
  066e7	2b ca		 sub	 ecx, edx
  066e9	83 f9 18	 cmp	 ecx, 24			; 00000018H
  066ec	76 74		 jbe	 SHORT $LN1044@MenuProc
  066ee	66 90		 npad	 2
$LL167@MenuProc:

; 14697: 											strncpy(moji, splitPoint, 24);

  066f0	6a 18		 push	 24			; 00000018H
  066f2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  066f8	56		 push	 esi
  066f9	50		 push	 eax
  066fa	e8 00 00 00 00	 call	 _strncpy

; 14698: 											moji[24] = NULL;
; 14699: 											if (GetStrLastByte(moji) == 3) {

  066ff	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  06705	c6 85 08 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+24], 0
  0670c	50		 push	 eax
  0670d	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  06712	83 c4 10	 add	 esp, 16			; 00000010H
  06715	83 f8 03	 cmp	 eax, 3
  06718	75 0c		 jne	 SHORT $LN1046@MenuProc

; 14700: 												moji[23] = NULL;

  0671a	c6 85 07 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+23], 0

; 14701: 												splitPoint += 23;

  06721	83 c6 17	 add	 esi, 23			; 00000017H

; 14702: 											}

  06724	eb 0a		 jmp	 SHORT $LN1047@MenuProc
$LN1046@MenuProc:

; 14703: 											else {
; 14704: 												moji[24] = NULL;

  06726	c6 85 08 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+24], 0

; 14705: 												splitPoint += 24;

  0672d	83 c6 18	 add	 esi, 24			; 00000018H
$LN1047@MenuProc:

; 14706: 											}
; 14707: 											StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0); y += 20;

  06730	6a 00		 push	 0
  06732	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  06738	50		 push	 eax
  06739	6a 00		 push	 0
  0673b	6a 01		 push	 1
  0673d	57		 push	 edi
  0673e	ff b5 fc b9 ff
	ff		 push	 DWORD PTR _x$5$[ebp]
  06744	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  06749	8b ce		 mov	 ecx, esi
  0674b	83 c4 18	 add	 esp, 24			; 00000018H
  0674e	83 c7 14	 add	 edi, 20			; 00000014H
  06751	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL4315@MenuProc:

; 14695: 									while (1) {
; 14696: 										if (strlen(splitPoint) > 24) {

  06754	8a 01		 mov	 al, BYTE PTR [ecx]
  06756	41		 inc	 ecx
  06757	84 c0		 test	 al, al
  06759	75 f9		 jne	 SHORT $LL4315@MenuProc
  0675b	2b ca		 sub	 ecx, edx
  0675d	83 f9 18	 cmp	 ecx, 24			; 00000018H
  06760	77 8e		 ja	 SHORT $LL167@MenuProc
$LN1044@MenuProc:

; 14708: 										}
; 14709: 										else {
; 14710: 											strcpy(moji, splitPoint);

  06762	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  06768	2b ce		 sub	 ecx, esi
  0676a	66 0f 1f 44 00
	00		 npad	 6
$LL1977@MenuProc:
  06770	8a 06		 mov	 al, BYTE PTR [esi]
  06772	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  06775	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  06779	84 c0		 test	 al, al
  0677b	75 f3		 jne	 SHORT $LL1977@MenuProc

; 14711: 											StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0);

  0677d	6a 00		 push	 0
  0677f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  06785	50		 push	 eax
  06786	6a 00		 push	 0
  06788	6a 01		 push	 1
  0678a	57		 push	 edi
  0678b	ff b5 fc b9 ff
	ff		 push	 DWORD PTR _x$5$[ebp]
  06791	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14712: 											break;
; 14713: 										}
; 14714: 									}
; 14715: #ifdef _STONDEBUG_						
; 14716: 									if (mouse.onceState & MOUSE_RIGHT_CRICK) {
; 14717: 										if (petSkill[petStatusNo][i].field != PETSKILL_FIELD_BATTLE) {
; 14718: 											int j;
; 14719: 											int cnt = 0;
; 14720: 											switch (petSkill[petStatusNo][i].skillId) {
; 14721: 
; 14722: 											case PETSKILL_MERGE:
; 14723: 												for (j = MAX_ITEMSTART; j < MAX_ITEMSTART; j++) {
; 14724: 													if (ItemBuffer[j].mixFlag == 1) cnt++;
; 14725: 												}
; 14726: 												break;
; 14727: 
; 14728: 											case PETSKILL_MERGE2:
; 14729: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {
; 14730: 													if (ItemBuffer[j].mixFlag == 2) cnt++;
; 14731: 												}
; 14732: 												break;
; 14733: 											}
; 14734: 
; 14735: 											if (cnt >= 2) {
; 14736: 												moji[0] = NULL;
; 14737: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {
; 14738: 													if (ItemBuffer[j].mixFlag >= TRUE) {
; 14739: 														char work[256];
; 14740: 														sprintf(work, "%d|", j);
; 14741: 														strcat(moji, work);
; 14742: 														ItemBuffer[j].mixFlag = FALSE;
; 14743: 													}
; 14744: 												}
; 14745: 												moji[strlen(moji) - 1] = NULL;
; 14746: 												if (bNewServer)
; 14747: 													lssproto_PS_send(sockfd, mixPetNo, i, 0, moji);
; 14748: 												else
; 14749: 													old_lssproto_PS_send(sockfd, mixPetNo, i, 0, moji);
; 14750: 												play_se(212, 320, 240);
; 14751: 											}
; 14752: 											else {
; 14753: 												play_se(220, 320, 240);
; 14754: 											}
; 14755: 										}
; 14756: 										else {
; 14757: 											play_se(220, 320, 240);
; 14758: 										}
; 14759: 									}
; 14760: #endif									
; 14761: 									if (mouse.onceState & MOUSE_LEFT_CRICK) {

  06796	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  0679c	83 c4 18	 add	 esp, 24			; 00000018H
  0679f	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  067a6	8b b5 f4 b9 ff
	ff		 mov	 esi, DWORD PTR _i$9$[ebp]
  067ac	0f 84 98 07 00
	00		 je	 $LN164@MenuProc

; 14762: 										if (petSkill[petStatusNo][i].field != PETSKILL_FIELD_BATTLE && pActPet2 == NULL

  067b2	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  067b9	2b c1		 sub	 eax, ecx
  067bb	03 c6		 add	 eax, esi
  067bd	6b c0 6a	 imul	 eax, eax, 106
  067c0	66 83 b8 04 00
	00 00 01	 cmp	 WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[eax+4], 1
  067c8	0f 84 5f 07 00
	00		 je	 $LN1049@MenuProc
  067ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActPet2@@3PAUaction@@A, 0
  067d5	0f 85 52 07 00
	00		 jne	 $LN1049@MenuProc

; 14763: 											/* && MenuToggleFlag & JOY_CTRL_I*/) {
; 14764: 											int j;
; 14765: 											int cnt = 0;
; 14766: 											switch (petSkill[petStatusNo][i].skillId) {

  067db	0f bf 80 02 00
	00 00		 movsx	 eax, WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[eax+2]
  067e2	3d 1c 02 00 00	 cmp	 eax, 540		; 0000021cH
  067e7	0f 8f dd 02 00
	00		 jg	 $LN1978@MenuProc
  067ed	0f 84 f4 02 00
	00		 je	 $LN1057@MenuProc
  067f3	2d c8 00 00 00	 sub	 eax, 200		; 000000c8H
  067f8	0f 84 ec 01 00
	00		 je	 $LN1051@MenuProc
  067fe	83 e8 01	 sub	 eax, 1
  06801	0f 84 f4 00 00
	00		 je	 $LN1053@MenuProc
  06807	83 e8 01	 sub	 eax, 1
  0680a	0f 85 ed 05 00
	00		 jne	 $LN1063@MenuProc

; 14796: #endif
; 14797: 
; 14798: #ifdef _ALCHEMIST
; 14799: 											case PETSKILL_ALCHEMIST:
; 14800: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  06810	0f 28 35 00 00
	00 00		 movaps	 xmm6, XMMWORD PTR __xmm@00000009000000090000000900000009
  06817	0f 57 ed	 xorps	 xmm5, xmm5
  0681a	0f 28 3d 00 00
	00 00		 movaps	 xmm7, XMMWORD PTR __xmm@00000001000000010000000100000001
  06821	0f 57 e4	 xorps	 xmm4, xmm4
  06824	b8 7c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+380
  06829	0f 1f 80 00 00
	00 00		 npad	 7
$LL188@MenuProc:

; 14801: 													if (ItemBuffer[j].mixFlag == 9) cnt++;

  06830	66 0f 6e 50 20	 movd	 xmm2, DWORD PTR [eax+32]
  06835	66 0f 6e 00	 movd	 xmm0, DWORD PTR [eax]
  06839	66 0f 6e 48 e0	 movd	 xmm1, DWORD PTR [eax-32]
  0683e	66 0f 6e 58 c0	 movd	 xmm3, DWORD PTR [eax-64]
  06843	66 0f 62 d8	 punpckldq xmm3, xmm0
  06847	0f 28 c7	 movaps	 xmm0, xmm7
  0684a	66 0f 62 ca	 punpckldq xmm1, xmm2
  0684e	66 0f fe c5	 paddd	 xmm0, xmm5
  06852	66 0f 6e 90 a0
	00 00 00	 movd	 xmm2, DWORD PTR [eax+160]
  0685a	66 0f 62 d9	 punpckldq xmm3, xmm1
  0685e	66 0f 6e 48 60	 movd	 xmm1, DWORD PTR [eax+96]
  06863	66 0f 76 de	 pcmpeqd xmm3, xmm6
  06867	66 0f db c3	 pand	 xmm0, xmm3
  0686b	66 0f 62 ca	 punpckldq xmm1, xmm2
  0686f	66 0f df dd	 pandn	 xmm3, xmm5
  06873	66 0f eb c3	 por	 xmm0, xmm3
  06877	66 0f 6e 58 40	 movd	 xmm3, DWORD PTR [eax+64]
  0687c	0f 28 e8	 movaps	 xmm5, xmm0
  0687f	66 0f 6e 80 80
	00 00 00	 movd	 xmm0, DWORD PTR [eax+128]
  06887	66 0f 62 d8	 punpckldq xmm3, xmm0
  0688b	05 00 01 00 00	 add	 eax, 256		; 00000100H
  06890	66 0f 62 d9	 punpckldq xmm3, xmm1
  06894	0f 28 c4	 movaps	 xmm0, xmm4
  06897	66 0f 76 de	 pcmpeqd xmm3, xmm6
  0689b	66 0f fe c7	 paddd	 xmm0, xmm7
  0689f	66 0f db c3	 pand	 xmm0, xmm3
  068a3	66 0f df dc	 pandn	 xmm3, xmm4
  068a7	66 0f eb c3	 por	 xmm0, xmm3
  068ab	0f 28 e0	 movaps	 xmm4, xmm0
  068ae	3d 7c 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1660
  068b3	0f 8c 77 ff ff
	ff		 jl	 $LL188@MenuProc

; 14796: #endif
; 14797: 
; 14798: #ifdef _ALCHEMIST
; 14799: 											case PETSKILL_ALCHEMIST:
; 14800: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  068b9	66 0f fe e5	 paddd	 xmm4, xmm5
  068bd	ba 3c 06 00 00	 mov	 edx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1596
  068c2	0f 28 c4	 movaps	 xmm0, xmm4
  068c5	66 0f 73 d8 08	 psrldq	 xmm0, 8
  068ca	66 0f fe e0	 paddd	 xmm4, xmm0
  068ce	0f 10 c4	 movups	 xmm0, xmm4
  068d1	66 0f 73 d8 04	 psrldq	 xmm0, 4
  068d6	66 0f fe e0	 paddd	 xmm4, xmm0
  068da	66 0f 7e e1	 movd	 ecx, xmm4
  068de	66 90		 npad	 2
$LL2751@MenuProc:
  068e0	83 3a 09	 cmp	 DWORD PTR [edx], 9
  068e3	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  068e6	0f 45 c1	 cmovne	 eax, ecx
  068e9	83 c2 20	 add	 edx, 32			; 00000020H
  068ec	8b c8		 mov	 ecx, eax
  068ee	81 fa dc 06 00
	00		 cmp	 edx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  068f4	7c ea		 jl	 SHORT $LL2751@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  068f6	e9 aa 04 00 00	 jmp	 $LN178@MenuProc
$LN1053@MenuProc:
  068fb	0f 28 35 00 00
	00 00		 movaps	 xmm6, XMMWORD PTR __xmm@00000002000000020000000200000002
  06902	0f 57 ed	 xorps	 xmm5, xmm5
  06905	0f 28 3d 00 00
	00 00		 movaps	 xmm7, XMMWORD PTR __xmm@00000001000000010000000100000001
  0690c	0f 57 e4	 xorps	 xmm4, xmm4

; 14773: 
; 14774: 											case PETSKILL_MERGE2:
; 14775: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  0690f	b8 7c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+380
  06914	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL176@MenuProc:

; 14776: 													if (ItemBuffer[j].mixFlag == 2) cnt++;

  06920	66 0f 6e 50 20	 movd	 xmm2, DWORD PTR [eax+32]
  06925	66 0f 6e 00	 movd	 xmm0, DWORD PTR [eax]
  06929	66 0f 6e 48 e0	 movd	 xmm1, DWORD PTR [eax-32]
  0692e	66 0f 6e 58 c0	 movd	 xmm3, DWORD PTR [eax-64]
  06933	66 0f 62 d8	 punpckldq xmm3, xmm0
  06937	0f 28 c7	 movaps	 xmm0, xmm7
  0693a	66 0f 62 ca	 punpckldq xmm1, xmm2
  0693e	66 0f fe c5	 paddd	 xmm0, xmm5
  06942	66 0f 6e 90 a0
	00 00 00	 movd	 xmm2, DWORD PTR [eax+160]
  0694a	66 0f 62 d9	 punpckldq xmm3, xmm1
  0694e	66 0f 6e 48 60	 movd	 xmm1, DWORD PTR [eax+96]
  06953	66 0f 76 de	 pcmpeqd xmm3, xmm6
  06957	66 0f db c3	 pand	 xmm0, xmm3
  0695b	66 0f 62 ca	 punpckldq xmm1, xmm2
  0695f	66 0f df dd	 pandn	 xmm3, xmm5
  06963	66 0f eb c3	 por	 xmm0, xmm3
  06967	66 0f 6e 58 40	 movd	 xmm3, DWORD PTR [eax+64]
  0696c	0f 28 e8	 movaps	 xmm5, xmm0
  0696f	66 0f 6e 80 80
	00 00 00	 movd	 xmm0, DWORD PTR [eax+128]
  06977	66 0f 62 d8	 punpckldq xmm3, xmm0
  0697b	05 00 01 00 00	 add	 eax, 256		; 00000100H
  06980	66 0f 62 d9	 punpckldq xmm3, xmm1
  06984	0f 28 c4	 movaps	 xmm0, xmm4
  06987	66 0f 76 de	 pcmpeqd xmm3, xmm6
  0698b	66 0f fe c7	 paddd	 xmm0, xmm7
  0698f	66 0f db c3	 pand	 xmm0, xmm3
  06993	66 0f df dc	 pandn	 xmm3, xmm4
  06997	66 0f eb c3	 por	 xmm0, xmm3
  0699b	0f 28 e0	 movaps	 xmm4, xmm0
  0699e	3d 7c 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1660
  069a3	0f 8c 77 ff ff
	ff		 jl	 $LL176@MenuProc

; 14773: 
; 14774: 											case PETSKILL_MERGE2:
; 14775: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  069a9	66 0f fe e5	 paddd	 xmm4, xmm5
  069ad	b8 3c 06 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1596
  069b2	0f 28 c4	 movaps	 xmm0, xmm4
  069b5	66 0f 73 d8 08	 psrldq	 xmm0, 8
  069ba	66 0f fe e0	 paddd	 xmm4, xmm0
  069be	0f 10 c4	 movups	 xmm0, xmm4
  069c1	66 0f 73 d8 04	 psrldq	 xmm0, 4
  069c6	66 0f fe e0	 paddd	 xmm4, xmm0
  069ca	66 0f 7e e2	 movd	 edx, xmm4
  069ce	66 90		 npad	 2
$LL2754@MenuProc:
  069d0	83 38 02	 cmp	 DWORD PTR [eax], 2
  069d3	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  069d6	0f 45 ca	 cmovne	 ecx, edx
  069d9	83 c0 20	 add	 eax, 32			; 00000020H
  069dc	8b d1		 mov	 edx, ecx
  069de	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  069e3	7c eb		 jl	 SHORT $LL2754@MenuProc

; 14777: 												}
; 14778: 												break;

  069e5	e9 bb 03 00 00	 jmp	 $LN178@MenuProc
$LN1051@MenuProc:
  069ea	0f 28 2d 00 00
	00 00		 movaps	 xmm5, XMMWORD PTR __xmm@00000001000000010000000100000001
  069f1	0f 57 f6	 xorps	 xmm6, xmm6
  069f4	0f 57 e4	 xorps	 xmm4, xmm4

; 14767: 
; 14768: 											case PETSKILL_MERGE:
; 14769: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  069f7	b8 7c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+380
  069fc	0f 1f 40 00	 npad	 4
$LL173@MenuProc:

; 14770: 													if (ItemBuffer[j].mixFlag == 1) cnt++;

  06a00	66 0f 6e 50 20	 movd	 xmm2, DWORD PTR [eax+32]
  06a05	66 0f 6e 00	 movd	 xmm0, DWORD PTR [eax]
  06a09	66 0f 6e 48 e0	 movd	 xmm1, DWORD PTR [eax-32]
  06a0e	66 0f 6e 58 c0	 movd	 xmm3, DWORD PTR [eax-64]
  06a13	66 0f 62 d8	 punpckldq xmm3, xmm0
  06a17	0f 28 c5	 movaps	 xmm0, xmm5
  06a1a	66 0f 62 ca	 punpckldq xmm1, xmm2
  06a1e	66 0f fe c6	 paddd	 xmm0, xmm6
  06a22	66 0f 6e 90 a0
	00 00 00	 movd	 xmm2, DWORD PTR [eax+160]
  06a2a	66 0f 62 d9	 punpckldq xmm3, xmm1
  06a2e	66 0f 6e 48 60	 movd	 xmm1, DWORD PTR [eax+96]
  06a33	66 0f 76 dd	 pcmpeqd xmm3, xmm5
  06a37	66 0f db c3	 pand	 xmm0, xmm3
  06a3b	66 0f 62 ca	 punpckldq xmm1, xmm2
  06a3f	66 0f df de	 pandn	 xmm3, xmm6
  06a43	66 0f eb c3	 por	 xmm0, xmm3
  06a47	66 0f 6e 58 40	 movd	 xmm3, DWORD PTR [eax+64]
  06a4c	0f 28 f0	 movaps	 xmm6, xmm0
  06a4f	66 0f 6e 80 80
	00 00 00	 movd	 xmm0, DWORD PTR [eax+128]
  06a57	66 0f 62 d8	 punpckldq xmm3, xmm0
  06a5b	05 00 01 00 00	 add	 eax, 256		; 00000100H
  06a60	66 0f 62 d9	 punpckldq xmm3, xmm1
  06a64	0f 28 c4	 movaps	 xmm0, xmm4
  06a67	66 0f 76 dd	 pcmpeqd xmm3, xmm5
  06a6b	66 0f fe c5	 paddd	 xmm0, xmm5
  06a6f	66 0f db c3	 pand	 xmm0, xmm3
  06a73	66 0f df dc	 pandn	 xmm3, xmm4
  06a77	66 0f eb c3	 por	 xmm0, xmm3
  06a7b	0f 28 e0	 movaps	 xmm4, xmm0
  06a7e	3d 7c 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1660
  06a83	0f 8c 77 ff ff
	ff		 jl	 $LL173@MenuProc

; 14767: 
; 14768: 											case PETSKILL_MERGE:
; 14769: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  06a89	66 0f fe e6	 paddd	 xmm4, xmm6
  06a8d	b8 3c 06 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1596
  06a92	0f 28 c4	 movaps	 xmm0, xmm4
  06a95	66 0f 73 d8 08	 psrldq	 xmm0, 8
  06a9a	66 0f fe e0	 paddd	 xmm4, xmm0
  06a9e	0f 10 c4	 movups	 xmm0, xmm4
  06aa1	66 0f 73 d8 04	 psrldq	 xmm0, 4
  06aa6	66 0f fe e0	 paddd	 xmm4, xmm0
  06aaa	66 0f 7e e2	 movd	 edx, xmm4
  06aae	66 90		 npad	 2
$LL2757@MenuProc:
  06ab0	83 38 01	 cmp	 DWORD PTR [eax], 1
  06ab3	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  06ab6	0f 45 ca	 cmovne	 ecx, edx
  06ab9	83 c0 20	 add	 eax, 32			; 00000020H
  06abc	8b d1		 mov	 edx, ecx
  06abe	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  06ac3	7c eb		 jl	 SHORT $LL2757@MenuProc

; 14771: 												}
; 14772: 												break;

  06ac5	e9 db 02 00 00	 jmp	 $LN178@MenuProc
$LN1978@MenuProc:

; 14763: 											/* && MenuToggleFlag & JOY_CTRL_I*/) {
; 14764: 											int j;
; 14765: 											int cnt = 0;
; 14766: 											switch (petSkill[petStatusNo][i].skillId) {

  06aca	2d 3c 02 00 00	 sub	 eax, 572		; 0000023cH
  06acf	0f 84 e5 01 00
	00		 je	 $LN1055@MenuProc
  06ad5	83 e8 4e	 sub	 eax, 78			; 0000004eH
  06ad8	0f 84 ec 00 00
	00		 je	 $LN1059@MenuProc
  06ade	83 e8 0e	 sub	 eax, 14			; 0000000eH
  06ae1	0f 85 16 03 00
	00		 jne	 $LN1063@MenuProc
$LN1057@MenuProc:
  06ae7	0f 28 35 00 00
	00 00		 movaps	 xmm6, XMMWORD PTR __xmm@0000000b0000000b0000000b0000000b
  06aee	0f 57 e4	 xorps	 xmm4, xmm4
  06af1	0f 28 3d 00 00
	00 00		 movaps	 xmm7, XMMWORD PTR __xmm@00000001000000010000000100000001
  06af8	0f 57 ed	 xorps	 xmm5, xmm5

; 14782: 												}
; 14783: 												break;
; 14784: 											case PETSKILL_FIXITEM:
; 14785: 											case PETSKILL_FIXITEM2:
; 14786: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  06afb	b8 7c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+380
$LL182@MenuProc:

; 14787: 													if (ItemBuffer[j].mixFlag == 11) cnt++;

  06b00	66 0f 6e 50 20	 movd	 xmm2, DWORD PTR [eax+32]
  06b05	66 0f 6e 00	 movd	 xmm0, DWORD PTR [eax]
  06b09	66 0f 6e 48 e0	 movd	 xmm1, DWORD PTR [eax-32]
  06b0e	66 0f 6e 58 c0	 movd	 xmm3, DWORD PTR [eax-64]
  06b13	66 0f 62 d8	 punpckldq xmm3, xmm0
  06b17	0f 28 c4	 movaps	 xmm0, xmm4
  06b1a	66 0f 62 ca	 punpckldq xmm1, xmm2
  06b1e	66 0f fe c7	 paddd	 xmm0, xmm7
  06b22	66 0f 6e 90 a0
	00 00 00	 movd	 xmm2, DWORD PTR [eax+160]
  06b2a	66 0f 62 d9	 punpckldq xmm3, xmm1
  06b2e	66 0f 6e 48 60	 movd	 xmm1, DWORD PTR [eax+96]
  06b33	66 0f 76 de	 pcmpeqd xmm3, xmm6
  06b37	66 0f db c3	 pand	 xmm0, xmm3
  06b3b	66 0f 62 ca	 punpckldq xmm1, xmm2
  06b3f	66 0f df dc	 pandn	 xmm3, xmm4
  06b43	66 0f eb c3	 por	 xmm0, xmm3
  06b47	66 0f 6e 58 40	 movd	 xmm3, DWORD PTR [eax+64]
  06b4c	0f 28 e0	 movaps	 xmm4, xmm0
  06b4f	66 0f 6e 80 80
	00 00 00	 movd	 xmm0, DWORD PTR [eax+128]
  06b57	66 0f 62 d8	 punpckldq xmm3, xmm0
  06b5b	05 00 01 00 00	 add	 eax, 256		; 00000100H
  06b60	66 0f 62 d9	 punpckldq xmm3, xmm1
  06b64	0f 28 c7	 movaps	 xmm0, xmm7
  06b67	66 0f fe c5	 paddd	 xmm0, xmm5
  06b6b	66 0f 76 de	 pcmpeqd xmm3, xmm6
  06b6f	66 0f db c3	 pand	 xmm0, xmm3
  06b73	66 0f df dd	 pandn	 xmm3, xmm5
  06b77	66 0f eb c3	 por	 xmm0, xmm3
  06b7b	0f 28 e8	 movaps	 xmm5, xmm0
  06b7e	3d 7c 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1660
  06b83	0f 8c 77 ff ff
	ff		 jl	 $LL182@MenuProc

; 14782: 												}
; 14783: 												break;
; 14784: 											case PETSKILL_FIXITEM:
; 14785: 											case PETSKILL_FIXITEM2:
; 14786: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  06b89	66 0f fe e5	 paddd	 xmm4, xmm5
  06b8d	b8 3c 06 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1596
  06b92	0f 28 c4	 movaps	 xmm0, xmm4
  06b95	66 0f 73 d8 08	 psrldq	 xmm0, 8
  06b9a	66 0f fe e0	 paddd	 xmm4, xmm0
  06b9e	0f 10 c4	 movups	 xmm0, xmm4
  06ba1	66 0f 73 d8 04	 psrldq	 xmm0, 4
  06ba6	66 0f fe e0	 paddd	 xmm4, xmm0
  06baa	66 0f 7e e2	 movd	 edx, xmm4
  06bae	66 90		 npad	 2
$LL2760@MenuProc:
  06bb0	83 38 0b	 cmp	 DWORD PTR [eax], 11	; 0000000bH
  06bb3	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  06bb6	0f 45 ca	 cmovne	 ecx, edx
  06bb9	83 c0 20	 add	 eax, 32			; 00000020H
  06bbc	8b d1		 mov	 edx, ecx
  06bbe	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  06bc3	7c eb		 jl	 SHORT $LL2760@MenuProc

; 14788: 												}
; 14789: 												break;

  06bc5	e9 db 01 00 00	 jmp	 $LN178@MenuProc
$LN1059@MenuProc:
  06bca	0f 28 35 00 00
	00 00		 movaps	 xmm6, XMMWORD PTR __xmm@0000000c0000000c0000000c0000000c
  06bd1	0f 57 e4	 xorps	 xmm4, xmm4
  06bd4	0f 28 3d 00 00
	00 00		 movaps	 xmm7, XMMWORD PTR __xmm@00000001000000010000000100000001
  06bdb	0f 57 ed	 xorps	 xmm5, xmm5

; 14790: #ifdef _ITEM_INTENSIFY
; 14791: 											case PETSKILL_INTENSIFY:
; 14792: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  06bde	b8 7c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+380
  06be3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL185@MenuProc:

; 14793: 													if (ItemBuffer[j].mixFlag == 12) cnt++;

  06bf0	66 0f 6e 50 20	 movd	 xmm2, DWORD PTR [eax+32]
  06bf5	66 0f 6e 00	 movd	 xmm0, DWORD PTR [eax]
  06bf9	66 0f 6e 48 e0	 movd	 xmm1, DWORD PTR [eax-32]
  06bfe	66 0f 6e 58 c0	 movd	 xmm3, DWORD PTR [eax-64]
  06c03	66 0f 62 d8	 punpckldq xmm3, xmm0
  06c07	0f 28 c4	 movaps	 xmm0, xmm4
  06c0a	66 0f 62 ca	 punpckldq xmm1, xmm2
  06c0e	66 0f fe c7	 paddd	 xmm0, xmm7
  06c12	66 0f 6e 90 a0
	00 00 00	 movd	 xmm2, DWORD PTR [eax+160]
  06c1a	66 0f 62 d9	 punpckldq xmm3, xmm1
  06c1e	66 0f 6e 48 60	 movd	 xmm1, DWORD PTR [eax+96]
  06c23	66 0f 76 de	 pcmpeqd xmm3, xmm6
  06c27	66 0f db c3	 pand	 xmm0, xmm3
  06c2b	66 0f 62 ca	 punpckldq xmm1, xmm2
  06c2f	66 0f df dc	 pandn	 xmm3, xmm4
  06c33	66 0f eb c3	 por	 xmm0, xmm3
  06c37	66 0f 6e 58 40	 movd	 xmm3, DWORD PTR [eax+64]
  06c3c	0f 28 e0	 movaps	 xmm4, xmm0
  06c3f	66 0f 6e 80 80
	00 00 00	 movd	 xmm0, DWORD PTR [eax+128]
  06c47	66 0f 62 d8	 punpckldq xmm3, xmm0
  06c4b	05 00 01 00 00	 add	 eax, 256		; 00000100H
  06c50	66 0f 62 d9	 punpckldq xmm3, xmm1
  06c54	0f 28 c7	 movaps	 xmm0, xmm7
  06c57	66 0f fe c5	 paddd	 xmm0, xmm5
  06c5b	66 0f 76 de	 pcmpeqd xmm3, xmm6
  06c5f	66 0f db c3	 pand	 xmm0, xmm3
  06c63	66 0f df dd	 pandn	 xmm3, xmm5
  06c67	66 0f eb c3	 por	 xmm0, xmm3
  06c6b	0f 28 e8	 movaps	 xmm5, xmm0
  06c6e	3d 7c 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1660
  06c73	0f 8c 77 ff ff
	ff		 jl	 $LL185@MenuProc

; 14790: #ifdef _ITEM_INTENSIFY
; 14791: 											case PETSKILL_INTENSIFY:
; 14792: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  06c79	66 0f fe e5	 paddd	 xmm4, xmm5
  06c7d	b8 3c 06 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1596
  06c82	0f 28 c4	 movaps	 xmm0, xmm4
  06c85	66 0f 73 d8 08	 psrldq	 xmm0, 8
  06c8a	66 0f fe e0	 paddd	 xmm4, xmm0
  06c8e	0f 10 c4	 movups	 xmm0, xmm4
  06c91	66 0f 73 d8 04	 psrldq	 xmm0, 4
  06c96	66 0f fe e0	 paddd	 xmm4, xmm0
  06c9a	66 0f 7e e2	 movd	 edx, xmm4
  06c9e	66 90		 npad	 2
$LL2763@MenuProc:
  06ca0	83 38 0c	 cmp	 DWORD PTR [eax], 12	; 0000000cH
  06ca3	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  06ca6	0f 45 ca	 cmovne	 ecx, edx
  06ca9	83 c0 20	 add	 eax, 32			; 00000020H
  06cac	8b d1		 mov	 edx, ecx
  06cae	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  06cb3	7c eb		 jl	 SHORT $LL2763@MenuProc

; 14794: 												}
; 14795: 												break;

  06cb5	e9 eb 00 00 00	 jmp	 $LN178@MenuProc
$LN1055@MenuProc:
  06cba	0f 28 35 00 00
	00 00		 movaps	 xmm6, XMMWORD PTR __xmm@0000000a0000000a0000000a0000000a
  06cc1	0f 57 e4	 xorps	 xmm4, xmm4
  06cc4	0f 28 3d 00 00
	00 00		 movaps	 xmm7, XMMWORD PTR __xmm@00000001000000010000000100000001
  06ccb	0f 57 ed	 xorps	 xmm5, xmm5

; 14779: 											case PETSKILL_INSLAY:
; 14780: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  06cce	b8 7c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+380
  06cd3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL179@MenuProc:

; 14781: 													if (ItemBuffer[j].mixFlag == 10) cnt++;

  06ce0	66 0f 6e 50 20	 movd	 xmm2, DWORD PTR [eax+32]
  06ce5	66 0f 6e 00	 movd	 xmm0, DWORD PTR [eax]
  06ce9	66 0f 6e 48 e0	 movd	 xmm1, DWORD PTR [eax-32]
  06cee	66 0f 6e 58 c0	 movd	 xmm3, DWORD PTR [eax-64]
  06cf3	66 0f 62 d8	 punpckldq xmm3, xmm0
  06cf7	0f 28 c4	 movaps	 xmm0, xmm4
  06cfa	66 0f 62 ca	 punpckldq xmm1, xmm2
  06cfe	66 0f fe c7	 paddd	 xmm0, xmm7
  06d02	66 0f 6e 90 a0
	00 00 00	 movd	 xmm2, DWORD PTR [eax+160]
  06d0a	66 0f 62 d9	 punpckldq xmm3, xmm1
  06d0e	66 0f 6e 48 60	 movd	 xmm1, DWORD PTR [eax+96]
  06d13	66 0f 76 de	 pcmpeqd xmm3, xmm6
  06d17	66 0f db c3	 pand	 xmm0, xmm3
  06d1b	66 0f 62 ca	 punpckldq xmm1, xmm2
  06d1f	66 0f df dc	 pandn	 xmm3, xmm4
  06d23	66 0f eb c3	 por	 xmm0, xmm3
  06d27	66 0f 6e 58 40	 movd	 xmm3, DWORD PTR [eax+64]
  06d2c	0f 28 e0	 movaps	 xmm4, xmm0
  06d2f	66 0f 6e 80 80
	00 00 00	 movd	 xmm0, DWORD PTR [eax+128]
  06d37	66 0f 62 d8	 punpckldq xmm3, xmm0
  06d3b	05 00 01 00 00	 add	 eax, 256		; 00000100H
  06d40	66 0f 62 d9	 punpckldq xmm3, xmm1
  06d44	0f 28 c7	 movaps	 xmm0, xmm7
  06d47	66 0f fe c5	 paddd	 xmm0, xmm5
  06d4b	66 0f 76 de	 pcmpeqd xmm3, xmm6
  06d4f	66 0f db c3	 pand	 xmm0, xmm3
  06d53	66 0f df dd	 pandn	 xmm3, xmm5
  06d57	66 0f eb c3	 por	 xmm0, xmm3
  06d5b	0f 28 e8	 movaps	 xmm5, xmm0
  06d5e	3d 7c 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1660
  06d63	0f 8c 77 ff ff
	ff		 jl	 $LL179@MenuProc

; 14779: 											case PETSKILL_INSLAY:
; 14780: 												for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  06d69	66 0f fe e5	 paddd	 xmm4, xmm5
  06d6d	b8 3c 06 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1596
  06d72	0f 28 c4	 movaps	 xmm0, xmm4
  06d75	66 0f 73 d8 08	 psrldq	 xmm0, 8
  06d7a	66 0f fe e0	 paddd	 xmm4, xmm0
  06d7e	0f 10 c4	 movups	 xmm0, xmm4
  06d81	66 0f 73 d8 04	 psrldq	 xmm0, 4
  06d86	66 0f fe e0	 paddd	 xmm4, xmm0
  06d8a	66 0f 7e e2	 movd	 edx, xmm4
  06d8e	66 90		 npad	 2
$LL2766@MenuProc:
  06d90	83 38 0a	 cmp	 DWORD PTR [eax], 10	; 0000000aH
  06d93	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  06d96	0f 45 ca	 cmovne	 ecx, edx
  06d99	83 c0 20	 add	 eax, 32			; 00000020H
  06d9c	8b d1		 mov	 edx, ecx
  06d9e	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  06da3	7c eb		 jl	 SHORT $LL2766@MenuProc
$LN178@MenuProc:

; 14802: 												}
; 14803: 												break;
; 14804: #endif
; 14805: 											}
; 14806: 											if (cnt >= 2) {

  06da5	83 f9 02	 cmp	 ecx, 2
  06da8	7c 53		 jl	 SHORT $LN1063@MenuProc

; 14807: 												if (pActPet2 == NULL) {
; 14808: 													pActPet2 = MakeAnimDisp(750, 240, pet[petStatusNo].graNo, ANIM_DISP_MIX_PET_INIT);

  06daa	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?petStatusNo@@3HA, 2936 ; petStatusNo
  06db4	6a 0d		 push	 13			; 0000000dH
  06db6	ff b0 04 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+4]
  06dbc	68 f0 00 00 00	 push	 240			; 000000f0H
  06dc1	68 ee 02 00 00	 push	 750			; 000002eeH
  06dc6	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  06dcb	83 c4 10	 add	 esp, 16			; 00000010H
  06dce	a3 00 00 00 00	 mov	 DWORD PTR ?pActPet2@@3PAUaction@@A, eax

; 14809: 													ItemMixPetNo = petStatusNo;

  06dd3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  06dd8	a3 00 00 00 00	 mov	 DWORD PTR ?ItemMixPetNo@@3HA, eax

; 14810: 												}
; 14811: 												SelectWazaNo = i;
; 14812: 												mixPetNo = petStatusNo;

  06ddd	a3 00 00 00 00	 mov	 DWORD PTR ?mixPetNo@@3HA, eax ; mixPetNo

; 14813: 												play_se(212, 320, 240);

  06de2	b8 d4 00 00 00	 mov	 eax, 212		; 000000d4H

; 14831: 												}
; 14832: 												else
; 14833: 													play_se(220, 320, 240);
; 14834: 											}
; 14835: 										}

  06de7	68 f0 00 00 00	 push	 240			; 000000f0H
  06dec	68 40 01 00 00	 push	 320			; 00000140H
  06df1	89 35 00 00 00
	00		 mov	 DWORD PTR ?SelectWazaNo@@3HA, esi ; SelectWazaNo
  06df7	50		 push	 eax
  06df8	e9 3f 01 00 00	 jmp	 $LN5163@MenuProc
$LN1063@MenuProc:

; 14814: 											}
; 14815: 											else {
; 14816: 												if (!(MenuToggleFlag & JOY_CTRL_I) || (MenuToggleFlag & JOY_CTRL_I && itemWndNo != 0)) {

  06dfd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  06e02	a9 00 00 00 08	 test	 eax, 134217728		; 08000000H
  06e07	74 1e		 je	 SHORT $LN1068@MenuProc
  06e09	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?itemWndNo@@3IA, 0
  06e10	75 15		 jne	 SHORT $LN1068@MenuProc

; 14831: 												}
; 14832: 												else
; 14833: 													play_se(220, 320, 240);
; 14834: 											}
; 14835: 										}

  06e12	68 f0 00 00 00	 push	 240			; 000000f0H
  06e17	b8 dc 00 00 00	 mov	 eax, 220		; 000000dcH
  06e1c	68 40 01 00 00	 push	 320			; 00000140H
  06e21	50		 push	 eax
  06e22	e9 15 01 00 00	 jmp	 $LN5163@MenuProc
$LN1068@MenuProc:

; 14817: 													int j;
; 14818: 													MenuToggleFlag |= JOY_CTRL_I;	// CTRL + I

  06e27	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  06e2e	0d 00 00 00 08	 or	 eax, 134217728		; 08000000H

; 14819: 													for (j = 0; j < MENU_ITEM_0; j++) itemWndFontNo[j] = -2;
; 14820: 													for (j = 0; j < MENU_ITEM_0; j++) itemWndBtnFlag[j] = 0;
; 14821: 													itemWndNo = 0;
; 14822: 													mouse.itemNo = -1;
; 14823: 													itemWndDropGold = 0;
; 14824: 													if (BattleResultWndFlag >= 1) DeathMenuAction();

  06e33	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?BattleResultWndFlag@@3HA, 1 ; BattleResultWndFlag
  06e3a	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA, xmm0
  06e41	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag
  06e46	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+16, xmm0
  06e4d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 0
  06e57	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+32, xmm0
  06e5e	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  06e68	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+48, xmm0
  06e6f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, 0
  06e79	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+64, xmm0
  06e80	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+80, xmm0
  06e87	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+96, xmm0
  06e8e	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+112, xmm0
  06e95	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+128, xmm0
  06e9c	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+144, xmm0
  06ea3	0f 57 c0	 xorps	 xmm0, xmm0
  06ea6	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA, xmm0
  06ead	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+16, xmm0
  06eb4	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+32, xmm0
  06ebb	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+48, xmm0
  06ec2	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+64, xmm0
  06ec9	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+80, xmm0
  06ed0	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+96, xmm0
  06ed7	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+112, xmm0
  06ede	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+128, xmm0
  06ee5	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+144, xmm0
  06eec	7c 05		 jl	 SHORT $LN1069@MenuProc
  06eee	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction
$LN1069@MenuProc:

; 14825: 													DeathMenuAction2();

  06ef3	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 14826: 													saveUserSetting();

  06ef8	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 14827: 													MenuToggleFlag &= ~JOY_CTRL_M;

  06efd	81 25 00 00 00
	00 ff ff ff bf	 and	 DWORD PTR ?MenuToggleFlag@@3IA, -1073741825 ; MenuToggleFlag, bfffffffH

; 14828: 													BattleResultWndFlag = FALSE;
; 14829: 													MapWmdFlagBak = FALSE;
; 14830: 													play_se(202, 320, 240);

  06f07	b8 ca 00 00 00	 mov	 eax, 202		; 000000caH

; 14831: 												}
; 14832: 												else
; 14833: 													play_se(220, 320, 240);
; 14834: 											}
; 14835: 										}

  06f0c	68 f0 00 00 00	 push	 240			; 000000f0H
  06f11	68 40 01 00 00	 push	 320			; 00000140H
  06f16	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  06f20	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MapWmdFlagBak@@3HA, 0 ; MapWmdFlagBak
  06f2a	50		 push	 eax
  06f2b	eb 0f		 jmp	 SHORT $LN5163@MenuProc
$LN1049@MenuProc:

; 14836: 										else {
; 14837: 											play_se(220, 320, 240);

  06f2d	68 f0 00 00 00	 push	 240			; 000000f0H
  06f32	68 40 01 00 00	 push	 320			; 00000140H
  06f37	68 dc 00 00 00	 push	 220			; 000000dcH
$LN5163@MenuProc:

; 14690: 						y = pActMenuWnd->y + 252;
; 14691: 						for (i = 0; i < pet[petStatusNo].maxSkill; i++) {

  06f3c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  06f41	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  06f47	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN164@MenuProc:
  06f4a	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  06f50	46		 inc	 esi
  06f51	89 b5 f4 b9 ff
	ff		 mov	 DWORD PTR _i$9$[ebp], esi
  06f57	3b b0 44 00 00
	00		 cmp	 esi, DWORD PTR ?pet@@3PAUPET@@A[eax+68]
  06f5d	0f 8c 3f f7 ff
	ff		 jl	 $LL166@MenuProc
$LN165@MenuProc:

; 14838: 										}
; 14839: 									}
; 14840: 								}
; 14841: 							}
; 14842: 						}
; 14843: 
; 14844: 						x = pActMenuWnd->x + 40;

  06f63	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 14845: 						y = pActMenuWnd->y + 32;
; 14846: 						if (pet[petStatusNo].freeName[0] != NULL)
; 14847: 							CenteringStr(pet[petStatusNo].freeName, moji, PET_NAME_LEN);
; 14848: 						else
; 14849: 							CenteringStr(pet[petStatusNo].name, moji, PET_NAME_LEN);
; 14850: 						StockFontBuffer(x - 28, y, FONT_PRIO_FRONT, 0, moji, 0); y += 26; x += 18;

  06f69	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  06f6f	69 c9 78 0b 00
	00		 imul	 ecx, ecx, 2936
  06f75	6a 10		 push	 16			; 00000010H
  06f77	50		 push	 eax
  06f78	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  06f7b	b8 54 00 00 00	 mov	 eax, OFFSET ?pet@@3PAUPET@@A+84
  06f80	8b 72 18	 mov	 esi, DWORD PTR [edx+24]
  06f83	83 c7 20	 add	 edi, 32			; 00000020H
  06f86	ba 65 00 00 00	 mov	 edx, OFFSET ?pet@@3PAUPET@@A+101
  06f8b	89 b5 f8 b9 ff
	ff		 mov	 DWORD PTR tv38687[ebp], esi
  06f91	80 b9 65 00 00
	00 00		 cmp	 BYTE PTR ?pet@@3PAUPET@@A[ecx+101], 0
  06f98	0f 45 c2	 cmovne	 eax, edx
  06f9b	03 c1		 add	 eax, ecx
  06f9d	50		 push	 eax
  06f9e	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr
  06fa3	6a 00		 push	 0
  06fa5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  06fab	50		 push	 eax
  06fac	6a 00		 push	 0
  06fae	6a 01		 push	 1
  06fb0	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  06fb3	57		 push	 edi
  06fb4	50		 push	 eax
  06fb5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 14851: 						for (i = 0; i < pet[petStatusNo].maxSkill; i++) {

  06fba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  06fc0	33 f6		 xor	 esi, esi
  06fc2	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  06fc8	83 c4 24	 add	 esp, 36			; 00000024H
  06fcb	83 c7 1a	 add	 edi, 26			; 0000001aH
  06fce	39 b0 44 00 00
	00		 cmp	 DWORD PTR ?pet@@3PAUPET@@A[eax+68], esi
  06fd4	0f 8e 9d 00 00
	00		 jle	 $LN196@MenuProc
  06fda	66 0f 1f 44 00
	00		 npad	 6
$LL197@MenuProc:

; 14852: 							if (petSkill[petStatusNo][i].useFlag == TRUE) {

  06fe0	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  06fe7	2b c1		 sub	 eax, ecx
  06fe9	03 c6		 add	 eax, esi
  06feb	6b c0 6a	 imul	 eax, eax, 106
  06fee	66 83 b8 00 00
	00 00 01	 cmp	 WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[eax], 1
  06ff6	75 69		 jne	 SHORT $LN1072@MenuProc

; 14853: 								int color = FONT_PAL_GRAY;
; 14854: 								sprintf(moji, "       %-22s", petSkill[petStatusNo][i].name);

  06ff8	8d 80 08 00 00
	00		 lea	 eax, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[eax+8]
  06ffe	50		 push	 eax
  06fff	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  07005	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBNACIMP@?5?5?5?5?5?5?5?$CF?922s@
  0700a	50		 push	 eax
  0700b	e8 00 00 00 00	 call	 _sprintf

; 14855: 								if (petSkill[petStatusNo][i].field != PETSKILL_FIELD_BATTLE) color = FONT_PAL_WHITE;
; 14856: 								petWndFontNo[i] = StockFontBuffer(x - 43, y, FONT_PRIO_FRONT, color, moji, 2);

  07010	6a 02		 push	 2
  07012	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  07018	50		 push	 eax
  07019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  0701e	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  07025	2b c8		 sub	 ecx, eax
  07027	03 ce		 add	 ecx, esi
  07029	6b c1 6a	 imul	 eax, ecx, 106
  0702c	33 c9		 xor	 ecx, ecx
  0702e	66 83 b8 04 00
	00 00 01	 cmp	 WORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[eax+4], 1
  07036	b8 07 00 00 00	 mov	 eax, 7
  0703b	0f 44 c8	 cmove	 ecx, eax
  0703e	8b 85 f8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38687[ebp]
  07044	51		 push	 ecx
  07045	6a 01		 push	 1
  07047	83 c0 0f	 add	 eax, 15			; 0000000fH
  0704a	57		 push	 edi
  0704b	50		 push	 eax
  0704c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  07051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?petStatusNo@@3HA ; petStatusNo
  07057	83 c4 24	 add	 esp, 36			; 00000024H
  0705a	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?petWndFontNo@@3PAHA[esi*4], eax
$LN1072@MenuProc:

; 14851: 						for (i = 0; i < pet[petStatusNo].maxSkill; i++) {

  07061	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  07067	46		 inc	 esi

; 14857: 							}
; 14858: 							y += 25;

  07068	83 c7 19	 add	 edi, 25			; 00000019H
  0706b	3b b0 44 00 00
	00		 cmp	 esi, DWORD PTR ?pet@@3PAUPET@@A[eax+68]
  07071	0f 8c 69 ff ff
	ff		 jl	 $LL197@MenuProc
$LN196@MenuProc:

; 14859: 						}
; 14860: 						x = pActMenuWnd->x + 20;

  07077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 14861: 						y = pActMenuWnd->y + 330;
; 14862: 						petWndFontNo[7] = StockDispBuffer(x + 100 + 70, y, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  0707c	6a 02		 push	 2
  0707e	68 bb 65 00 00	 push	 26043			; 000065bbH
  07083	6a 69		 push	 105			; 00000069H
  07085	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  07088	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  0708b	83 c7 14	 add	 edi, 20			; 00000014H
  0708e	81 c6 4a 01 00
	00		 add	 esi, 330		; 0000014aH
  07094	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  0709a	56		 push	 esi
  0709b	89 b5 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], esi
  070a1	8d 87 aa 00 00
	00		 lea	 eax, DWORD PTR [edi+170]
  070a7	50		 push	 eax
  070a8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  070ad	a3 1c 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+28, eax

; 14863: 						petWndFontNo[8] = StockDispBuffer(x + 16 + 16 + 8, y, DISP_PRIO_IME3, CG_PREV_BTN + petWndBtnFlag[8], 2);

  070b2	a1 20 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+32
  070b7	6a 02		 push	 2
  070b9	05 44 66 00 00	 add	 eax, 26180		; 00006644H
  070be	50		 push	 eax
  070bf	6a 69		 push	 105			; 00000069H
  070c1	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  070c4	56		 push	 esi
  070c5	50		 push	 eax
  070c6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  070cb	a3 20 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+32, eax

; 14864: 						petWndFontNo[9] = StockDispBuffer(x + 50 + 16 + 18, y, DISP_PRIO_IME3, CG_NEXT_BTN + petWndBtnFlag[9], 2);

  070d0	a1 24 00 00 00	 mov	 eax, DWORD PTR ?petWndBtnFlag@@3PAHA+36
  070d5	6a 02		 push	 2
  070d7	05 46 66 00 00	 add	 eax, 26182		; 00006646H
  070dc	50		 push	 eax
  070dd	6a 69		 push	 105			; 00000069H
  070df	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  070e2	56		 push	 esi
  070e3	50		 push	 eax
  070e4	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  070e9	83 c4 3c	 add	 esp, 60			; 0000003cH
  070ec	a3 24 00 00 00	 mov	 DWORD PTR ?petWndFontNo@@3PAHA+36, eax

; 14865: 					}
; 14866: 				}
; 14867: 			}
; 14868: 			break;

  070f1	eb 0a		 jmp	 SHORT $LN4770@MenuProc
$LN1074@MenuProc:

; 14869: #ifdef _STREET_VENDOR
; 14870: 		case 3: petWndNo = 0; break;

  070f3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 0
$LN4770@MenuProc:

; 14871: #endif
; 14872: 		}
; 14873: 
; 14874: #endif
; 14875: 	}
; 14876: 
; 14877: 	//? ??????????? *******************************************************/
; 14878: 	if (MenuToggleFlag & JOY_CTRL_I) {

  070fd	f7 05 00 00 00
	00 00 00 00 08	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 134217728 ; MenuToggleFlag, 08000000H
  07107	bf 10 27 00 00	 mov	 edi, 10000		; 00002710H
  0710c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__timeGetTime@0
  07111	89 85 fc b9 ff
	ff		 mov	 DWORD PTR tv39280[ebp], eax
  07117	0f 84 a6 34 00
	00		 je	 $LN4820@MenuProc

; 14879: 		int ä¸´æ¶MAXX, ä¸´æ¶MAXY, ä¸­å¿x;
; 14880: 		//è®¡ç®å¾çä¸­å¿
; 14881: 		if (ResoMode == åè¾¨ç::mode800) {

  0711d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  07122	83 f8 03	 cmp	 eax, 3
  07125	75 07		 jne	 SHORT $LN1076@MenuProc

; 14882: 			ä¸´æ¶MAXX = 800;

  07127	be 20 03 00 00	 mov	 esi, 800		; 00000320H

; 14883: 			ä¸­å¿x = 800 / 2;
; 14884: 		}

  0712c	eb 10		 jmp	 SHORT $LN5111@MenuProc
$LN1076@MenuProc:

; 14885: 		else if (ResoMode == åè¾¨ç::mode1024) {

  0712e	83 f8 04	 cmp	 eax, 4
  07131	be 80 02 00 00	 mov	 esi, 640		; 00000280H
  07136	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0713b	0f 44 f1	 cmove	 esi, ecx
$LN5111@MenuProc:

; 14886: 			ä¸´æ¶MAXX = 1024;
; 14887: 			ä¸­å¿x = 1024 / 2;
; 14888: 		}
; 14889: 		else {
; 14890: 			ä¸´æ¶MAXX = 640;
; 14891: 			ä¸­å¿x = 640 / 2;
; 14892: 		}
; 14893: 
; 14894: 		int x1 = 0, y1 = 0;
; 14895: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢
; 14896: 		SkillWndflag = false;
; 14897: #endif
; 14898: 		switch (itemWndNo) {

  0713e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemWndNo@@3IA
  07143	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07149	89 b5 f4 b9 ff
	ff		 mov	 DWORD PTR _??MAXX$1$[ebp], esi
  0714f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 0 ; SkillWndflag
  07156	83 e8 00	 sub	 eax, 0
  07159	0f 84 4b 0b 00
	00		 je	 $LN1080@MenuProc
  0715f	83 e8 01	 sub	 eax, 1
  07162	0f 84 b7 04 00
	00		 je	 $LN1320@MenuProc
  07168	83 e8 01	 sub	 eax, 1
  0716b	0f 85 58 34 00
	00		 jne	 $LN1312@MenuProc

; 16143: 
; 16144: 		case 2:
; 16145: 			if (pActMenuWnd2 == NULL) {

  07171	85 c9		 test	 ecx, ecx
  07173	0f 85 bf 00 00
	00		 jne	 $LN1356@MenuProc

; 16146: 				pActMenuWnd2 = MakeWindowDisp(368, 4, 192, 304, 0, -1);

  07179	6a ff		 push	 -1
  0717b	50		 push	 eax
  0717c	68 30 01 00 00	 push	 304			; 00000130H
  07181	68 c0 00 00 00	 push	 192			; 000000c0H
  07186	6a 04		 push	 4
  07188	68 70 01 00 00	 push	 368			; 00000170H
  0718d	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  07192	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  07199	8b c8		 mov	 ecx, eax
  0719b	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA, xmm0
  071a2	83 c4 18	 add	 esp, 24			; 00000018H
  071a5	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, ecx ; pActMenuWnd2
  071ab	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+16, xmm0
  071b2	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+32, xmm0
  071b9	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+48, xmm0
  071c0	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+64, xmm0
  071c7	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+80, xmm0
  071ce	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+96, xmm0
  071d5	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+112, xmm0
  071dc	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+128, xmm0
  071e3	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+144, xmm0
  071ea	0f 57 c0	 xorps	 xmm0, xmm0

; 16147: 				for (i = 0; i < MENU_ITEM_0; i++) itemWndFontNo[i] = -2;
; 16148: 				for (i = 0; i < MENU_ITEM_0; i++) itemWndBtnFlag[i] = 0;

  071ed	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA, xmm0
  071f4	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+16, xmm0
  071fb	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+32, xmm0
  07202	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+48, xmm0
  07209	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+64, xmm0
  07210	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+80, xmm0
  07217	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+96, xmm0
  0721e	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+112, xmm0
  07225	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+128, xmm0
  0722c	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+144, xmm0

; 16149: 			}

  07233	e9 91 33 00 00	 jmp	 $LN1312@MenuProc
$LN1356@MenuProc:

; 16150: 			else {
; 16151: 				if (pActMenuWnd2->hp > 0) {

  07238	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  0723c	0f 8e 87 33 00
	00		 jle	 $LN1312@MenuProc

; 16152: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd2->pYobi)->my, DISP_PRIO_MENU, CG_ITEM_WND_SELECT_WND, 1);

  07242	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  07245	6a 01		 push	 1
  07247	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_ITEM_WND_SELECT_WND@@3HA ; CG_ITEM_WND_SELECT_WND
  0724d	6a 68		 push	 104			; 00000068H
  0724f	ff 70 18	 push	 DWORD PTR [eax+24]
  07252	ff 70 14	 push	 DWORD PTR [eax+20]
  07255	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0725a	83 c4 14	 add	 esp, 20			; 00000014H

; 16153: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0725d	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  07264	0f 84 24 02 00
	00		 je	 $LN4779@MenuProc

; 16154: 						for (i = 0; i < 11; i++) {

  0726a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?jujutuNo@@3HA
  07270	33 f6		 xor	 esi, esi
$LL298@MenuProc:

; 16155: 							if (HitFontNo == itemWndFontNo[i] && eventWarpSendFlag == FALSE) {

  07272	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  07277	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA[esi*4]
  0727e	0f 85 79 01 00
	00		 jne	 $LN296@MenuProc
  07284	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  0728c	0f 85 6b 01 00
	00		 jne	 $LN296@MenuProc

; 16156: 								if (jujutuNo != -1) {

  07292	56		 push	 esi
  07293	83 fa ff	 cmp	 edx, -1
  07296	0f 84 b2 00 00
	00		 je	 $LN1361@MenuProc

; 16157: 									if (bNewServer)

  0729c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  072a3	52		 push	 edx
  072a4	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  072aa	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  072b0	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  072b6	74 07		 je	 SHORT $LN1363@MenuProc

; 16158: 										lssproto_MU_send(sockfd, nowGx, nowGy, jujutuNo, i);

  072b8	e8 00 00 00 00	 call	 ?lssproto_MU_send@@YAXHHHHH@Z ; lssproto_MU_send
  072bd	eb 05		 jmp	 SHORT $LN5112@MenuProc
$LN1363@MenuProc:

; 16159: 									else
; 16160: 										old_lssproto_MU_send(sockfd, nowGx, nowGy, jujutuNo, i);

  072bf	e8 00 00 00 00	 call	 ?old_lssproto_MU_send@@YAXHHHHH@Z ; old_lssproto_MU_send
$LN5112@MenuProc:

; 16161: 									play_se(100, 320, 240);

  072c4	83 c4 14	 add	 esp, 20			; 00000014H
  072c7	68 f0 00 00 00	 push	 240			; 000000f0H
  072cc	68 40 01 00 00	 push	 320			; 00000140H
  072d1	6a 64		 push	 100			; 00000064H
  072d3	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16162: 									if (magic[jujutuNo].mp > pc.mp - magic[jujutuNo].mp) {

  072d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?jujutuNo@@3HA
  072de	83 c4 0c	 add	 esp, 12			; 0000000cH
  072e1	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  072e8	2b c2		 sub	 eax, edx
  072ea	c1 e0 04	 shl	 eax, 4
  072ed	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+4]
  072f3	a1 18 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+24
  072f8	2b c1		 sub	 eax, ecx
  072fa	3b c8		 cmp	 ecx, eax
  072fc	0f 8e fb 00 00
	00		 jle	 $LN296@MenuProc

; 16163: 										DeathAction(pActMenuWnd2);

  07302	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07308	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16164: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 16165: 										GetKeyInputFocus(&MyChatBuffer);

  0730d	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  07312	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 16166: 										Moneyflag = false;
; 16167: #endif
; 16168: 										pActMenuWnd2 = NULL;
; 16169: 										itemWndNo = 1;
; 16170: 										play_se(203, 320, 240);

  07317	68 f0 00 00 00	 push	 240			; 000000f0H
  0731c	68 40 01 00 00	 push	 320			; 00000140H
  07321	68 cb 00 00 00	 push	 203			; 000000cbH
  07326	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  0732d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, 0 ; pActMenuWnd2
  07337	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 1
  07341	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  07346	83 c4 14	 add	 esp, 20			; 00000014H

; 16171: 									}
; 16172: 								}

  07349	e9 a9 00 00 00	 jmp	 $LN5113@MenuProc
$LN1361@MenuProc:

; 16173: 								else {
; 16174: 									if (bNewServer)

  0734e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  07355	ff 35 00 00 00
	00		 push	 DWORD PTR ?itemNo@@3HA
  0735b	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  07361	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  07367	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0736d	74 07		 je	 SHORT $LN1366@MenuProc

; 16175: 										lssproto_ID_send(sockfd, nowGx, nowGy, itemNo, i);

  0736f	e8 00 00 00 00	 call	 ?lssproto_ID_send@@YAXHHHHH@Z ; lssproto_ID_send
  07374	eb 05		 jmp	 SHORT $LN5114@MenuProc
$LN1366@MenuProc:

; 16176: 									else
; 16177: 										old_lssproto_ID_send(sockfd, nowGx, nowGy, itemNo, i);

  07376	e8 00 00 00 00	 call	 ?old_lssproto_ID_send@@YAXHHHHH@Z ; old_lssproto_ID_send
$LN5114@MenuProc:

; 16178: 									play_se(212, 320, 240);

  0737b	83 c4 14	 add	 esp, 20			; 00000014H
  0737e	68 f0 00 00 00	 push	 240			; 000000f0H
  07383	68 40 01 00 00	 push	 320			; 00000140H
  07388	68 d4 00 00 00	 push	 212			; 000000d4H
  0738d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16179: 									DeathAction(pActMenuWnd2);

  07392	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07398	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16180: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 16181: 									GetKeyInputFocus(&MyChatBuffer);

  0739d	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  073a2	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 16182: 									Moneyflag = false;
; 16183: #endif
; 16184: 									pActMenuWnd2 = NULL;
; 16185: 									itemWndNo = 0;
; 16186: 									if (MenuToggleFlag & JOY_CTRL_S) {

  073a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  073ac	83 c4 14	 add	 esp, 20			; 00000014H
  073af	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  073b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, 0 ; pActMenuWnd2
  073c0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 0
  073ca	a9 00 00 00 20	 test	 eax, 536870912		; 20000000H
  073cf	74 0f		 je	 SHORT $LN1368@MenuProc

; 16187: 										MenuToggleFlag ^= JOY_CTRL_S;	// CTRL + S

  073d1	35 00 00 00 20	 xor	 eax, 536870912		; 20000000H
  073d6	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 16188: 										DeathMenuAction();

  073db	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction
$LN1368@MenuProc:

; 16189: 									}
; 16190: 									play_se(203, 320, 240);

  073e0	68 f0 00 00 00	 push	 240			; 000000f0H
  073e5	68 40 01 00 00	 push	 320			; 00000140H
  073ea	68 cb 00 00 00	 push	 203			; 000000cbH
  073ef	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  073f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5113@MenuProc:

; 16154: 						for (i = 0; i < 11; i++) {

  073f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?jujutuNo@@3HA
$LN296@MenuProc:
  073fd	46		 inc	 esi
  073fe	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  07401	0f 8c 6b fe ff
	ff		 jl	 $LL298@MenuProc

; 16191: 								}
; 16192: 							}
; 16193: 						}
; 16194: 						if (HitDispNo == itemWndFontNo[11]) {

  07407	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0740c	3b 05 2c 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA+44
  07412	75 7a		 jne	 SHORT $LN4779@MenuProc

; 16195: 							DeathAction(pActMenuWnd2);

  07414	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  0741a	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16196: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 16197: 							GetKeyInputFocus(&MyChatBuffer);

  0741f	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  07424	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  07429	83 c4 08	 add	 esp, 8

; 16198: 							Moneyflag = false;

  0742c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag

; 16199: #endif
; 16200: 							pActMenuWnd2 = NULL;
; 16201: 							if (jujutuNo != -1) itemWndNo = 1;

  07433	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?jujutuNo@@3HA, -1
  0743a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, 0 ; pActMenuWnd2
  07444	74 0c		 je	 SHORT $LN1370@MenuProc
  07446	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 1
  07450	eb 25		 jmp	 SHORT $LN1372@MenuProc
$LN1370@MenuProc:

; 16202: 							else {
; 16203: 								itemWndNo = 0;
; 16204: 								if (MenuToggleFlag & JOY_CTRL_S) {

  07452	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  07457	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 0
  07461	a9 00 00 00 20	 test	 eax, 536870912		; 20000000H
  07466	74 0f		 je	 SHORT $LN1372@MenuProc

; 16205: 									MenuToggleFlag ^= JOY_CTRL_S;	// CTRL + S

  07468	35 00 00 00 20	 xor	 eax, 536870912		; 20000000H
  0746d	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 16206: 									DeathMenuAction();

  07472	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction
$LN1372@MenuProc:

; 16207: 								}
; 16208: 							}
; 16209: 							play_se(203, 320, 240);

  07477	68 f0 00 00 00	 push	 240			; 000000f0H
  0747c	68 40 01 00 00	 push	 320			; 00000140H
  07481	68 cb 00 00 00	 push	 203			; 000000cbH
  07486	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0748b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4779@MenuProc:

; 16210: 						}
; 16211: 					}
; 16212: 					if (pActMenuWnd2 != NULL) {

  0748e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07494	85 c9		 test	 ecx, ecx
  07496	0f 84 2d 31 00
	00		 je	 $LN1312@MenuProc

; 16213: 						x = pActMenuWnd2->x + 25;

  0749c	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]

; 16214: 						y = pActMenuWnd2->y + 30;
; 16215: 						sprintf(moji, "%-16s", pc.name);

  0749f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  074a5	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  074a8	83 c6 19	 add	 esi, 25			; 00000019H
  074ab	68 70 00 00 00	 push	 OFFSET ?pc@@3UPC@@A+112
  074b0	68 00 00 00 00	 push	 OFFSET ??_C@_05EMGOANLP@?$CF?916s@
  074b5	50		 push	 eax
  074b6	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  074bc	83 c7 1e	 add	 edi, 30			; 0000001eH
  074bf	e8 00 00 00 00	 call	 _sprintf

; 16216: 						itemWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 2); y += 23;

  074c4	6a 02		 push	 2
  074c6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  074cc	50		 push	 eax
  074cd	6a 00		 push	 0
  074cf	6a 01		 push	 1
  074d1	57		 push	 edi
  074d2	56		 push	 esi
  074d3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  074d8	83 c4 24	 add	 esp, 36			; 00000024H
  074db	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA, eax
  074e0	83 c7 17	 add	 edi, 23			; 00000017H
  074e3	b8 04 00 00 00	 mov	 eax, OFFSET ?itemWndFontNo@@3PAHA+4
  074e8	89 bd f4 b9 ff
	ff		 mov	 DWORD PTR _y$7$[ebp], edi
  074ee	bf 65 00 00 00	 mov	 edi, OFFSET ?pet@@3PAUPET@@A+101
  074f3	89 85 ec b9 ff
	ff		 mov	 DWORD PTR tv39305[ebp], eax
  074f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL301@MenuProc:

; 16218: 							if (pet[i].useFlag == TRUE) {

  07500	66 83 7f 11 01	 cmp	 WORD PTR [edi+17], 1
  07505	75 49		 jne	 SHORT $LN299@MenuProc

; 16219: 								if (pet[i].freeName[0] != NULL)

  07507	80 3f 00	 cmp	 BYTE PTR [edi], 0

; 16220: 									sprintf(moji, "%-16s", pet[i].freeName);

  0750a	8b c7		 mov	 eax, edi
  0750c	75 03		 jne	 SHORT $LN1376@MenuProc

; 16221: 								else
; 16222: 									sprintf(moji, "%-16s", pet[i].name);

  0750e	8d 47 ef	 lea	 eax, DWORD PTR [edi-17]
$LN1376@MenuProc:

; 16223: 								itemWndFontNo[i + 1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 2); y += 23;

  07511	50		 push	 eax
  07512	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  07518	68 00 00 00 00	 push	 OFFSET ??_C@_05EMGOANLP@?$CF?916s@
  0751d	50		 push	 eax
  0751e	e8 00 00 00 00	 call	 _sprintf
  07523	6a 02		 push	 2
  07525	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0752b	50		 push	 eax
  0752c	6a 00		 push	 0
  0752e	6a 01		 push	 1
  07530	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR _y$7$[ebp]
  07536	56		 push	 esi
  07537	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0753c	8b 8d ec b9 ff
	ff		 mov	 ecx, DWORD PTR tv39305[ebp]
  07542	83 c4 24	 add	 esp, 36			; 00000024H
  07545	83 85 f4 b9 ff
	ff 17		 add	 DWORD PTR _y$7$[ebp], 23 ; 00000017H
  0754c	89 01		 mov	 DWORD PTR [ecx], eax
  0754e	8b c1		 mov	 eax, ecx
$LN299@MenuProc:

; 16217: 						for (i = 0; i < 5; i++) {

  07550	81 c7 78 0b 00
	00		 add	 edi, 2936		; 00000b78H
  07556	83 c0 04	 add	 eax, 4
  07559	89 85 ec b9 ff
	ff		 mov	 DWORD PTR tv39305[ebp], eax
  0755f	81 ff bd 39 00
	00		 cmp	 edi, OFFSET ?pet@@3PAUPET@@A+14781
  07565	7c 99		 jl	 SHORT $LL301@MenuProc

; 16224: 							}
; 16225: 						}
; 16226: 						y = 183;
; 16227: 						for (i = 0; i < 5; i++) {

  07567	ba 18 00 00 00	 mov	 edx, OFFSET ?itemWndFontNo@@3PAHA+24
  0756c	b9 00 00 00 00	 mov	 ecx, OFFSET ?party@@3PAUPARTY@@A
  07571	bf b7 00 00 00	 mov	 edi, 183		; 000000b7H
  07576	89 95 f4 b9 ff
	ff		 mov	 DWORD PTR tv39303[ebp], edx
  0757c	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR tv39302[ebp], ecx
$LL304@MenuProc:

; 16228: 							if (pc.id != party[i].id && party[i].useFlag == TRUE) {

  07582	a1 08 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+8
  07587	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0758a	74 43		 je	 SHORT $LN302@MenuProc
  0758c	66 83 39 01	 cmp	 WORD PTR [ecx], 1
  07590	75 3d		 jne	 SHORT $LN302@MenuProc

; 16229: 								sprintf(moji, "%-16s", party[i].name);

  07592	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  07595	50		 push	 eax
  07596	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0759c	68 00 00 00 00	 push	 OFFSET ??_C@_05EMGOANLP@?$CF?916s@
  075a1	50		 push	 eax
  075a2	e8 00 00 00 00	 call	 _sprintf

; 16230: 								itemWndFontNo[i + 6] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 2); y += 23;

  075a7	6a 02		 push	 2
  075a9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  075af	50		 push	 eax
  075b0	6a 00		 push	 0
  075b2	6a 01		 push	 1
  075b4	57		 push	 edi
  075b5	56		 push	 esi
  075b6	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  075bb	8b 95 f4 b9 ff
	ff		 mov	 edx, DWORD PTR tv39303[ebp]
  075c1	83 c4 24	 add	 esp, 36			; 00000024H
  075c4	8b 8d e0 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39302[ebp]
  075ca	83 c7 17	 add	 edi, 23			; 00000017H
  075cd	89 02		 mov	 DWORD PTR [edx], eax
$LN302@MenuProc:

; 16224: 							}
; 16225: 						}
; 16226: 						y = 183;
; 16227: 						for (i = 0; i < 5; i++) {

  075cf	83 c1 30	 add	 ecx, 48			; 00000030H
  075d2	83 c2 04	 add	 edx, 4
  075d5	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR tv39302[ebp], ecx
  075db	89 95 f4 b9 ff
	ff		 mov	 DWORD PTR tv39303[ebp], edx
  075e1	81 f9 f0 00 00
	00		 cmp	 ecx, OFFSET ?party@@3PAUPARTY@@A+240
  075e7	7c 99		 jl	 SHORT $LL304@MenuProc

; 16231: 							}
; 16232: 						}
; 16233: 						itemWndFontNo[11] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, pActMenuWnd2->y + 287, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  075e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  075ef	6a 02		 push	 2
  075f1	68 bb 65 00 00	 push	 26043			; 000065bbH
  075f6	6a 69		 push	 105			; 00000069H
  075f8	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  075fb	05 1f 01 00 00	 add	 eax, 287		; 0000011fH
  07600	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  07606	50		 push	 eax
  07607	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0760a	ff 70 14	 push	 DWORD PTR [eax+20]
  0760d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  07612	83 c4 14	 add	 esp, 20			; 00000014H
  07615	a3 2c 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+44, eax
  0761a	e9 a4 2f 00 00	 jmp	 $LN4820@MenuProc
$LN1320@MenuProc:

; 15972: 							}
; 15973: 						}
; 15974: 					}
; 15975: 				}
; 15976: 			}
; 15977: 			break;
; 15978: 		case 1:
; 15979: 			if (pActMenuWnd2 == NULL) {

  0761f	85 c9		 test	 ecx, ecx
  07621	0f 85 c9 00 00
	00		 jne	 $LN1321@MenuProc

; 15980: 				pActMenuWnd2 = MakeWindowDisp(364, 4, 272, 280, 0, -1);

  07627	6a ff		 push	 -1
  07629	51		 push	 ecx
  0762a	68 18 01 00 00	 push	 280			; 00000118H
  0762f	68 10 01 00 00	 push	 272			; 00000110H
  07634	6a 04		 push	 4
  07636	68 6c 01 00 00	 push	 364			; 0000016cH
  0763b	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  07640	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  07647	8b c8		 mov	 ecx, eax
  07649	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA, xmm0
  07650	83 c4 18	 add	 esp, 24			; 00000018H
  07653	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, ecx ; pActMenuWnd2
  07659	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+16, xmm0

; 15981: 				for (i = 0; i < MENU_ITEM_0; i++) itemWndFontNo[i] = -2;
; 15982: 				for (i = 0; i < MENU_ITEM_0; i++) itemWndBtnFlag[i] = 0;
; 15983: 				jujutuNo = -1;

  07660	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?jujutuNo@@3HA, -1
  0766a	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+32, xmm0
  07671	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+48, xmm0
  07678	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+64, xmm0
  0767f	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+80, xmm0
  07686	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+96, xmm0
  0768d	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+112, xmm0
  07694	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+128, xmm0
  0769b	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+144, xmm0
  076a2	0f 57 c0	 xorps	 xmm0, xmm0
  076a5	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA, xmm0
  076ac	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+16, xmm0
  076b3	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+32, xmm0
  076ba	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+48, xmm0
  076c1	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+64, xmm0
  076c8	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+80, xmm0
  076cf	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+96, xmm0
  076d6	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+112, xmm0
  076dd	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+128, xmm0
  076e4	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+144, xmm0

; 15984: 			}

  076eb	e9 d9 2e 00 00	 jmp	 $LN1312@MenuProc
$LN1321@MenuProc:

; 15985: 			else {
; 15986: 				if (pActMenuWnd2->hp > 0) {

  076f0	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  076f4	0f 8e cf 2e 00
	00		 jle	 $LN1312@MenuProc

; 15987: 					x = pActMenuWnd2->x + 74;

  076fa	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]

; 15988: 					y = pActMenuWnd2->y + 208;

  076fd	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  07700	83 c6 4a	 add	 esi, 74			; 0000004aH

; 15989: #ifdef _READ16BITBMP
; 15990: 					if (g_bUseAlpha) StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd2->pYobi)->my + 7, DISP_PRIO_MENU, CG_JUJUTU_WND, 1);
; 15991: 					else
; 15992: #endif
; 15993: 						StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd2->pYobi)->my + 10, DISP_PRIO_MENU, CG_JUJUTU_WND, 1);

  07703	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  07706	81 c7 d0 00 00
	00		 add	 edi, 208		; 000000d0H
  0770c	6a 01		 push	 1
  0770e	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_JUJUTU_WND@@3HA ; CG_JUJUTU_WND
  07714	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  0771a	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0771d	6a 68		 push	 104			; 00000068H
  0771f	83 c0 0a	 add	 eax, 10			; 0000000aH
  07722	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  07728	50		 push	 eax
  07729	ff 71 14	 push	 DWORD PTR [ecx+20]
  0772c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  07731	83 c4 14	 add	 esp, 20			; 00000014H

; 15994: 					for (i = 0; i < 5; i++) {

  07734	c7 85 0c ba ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$12$[ebp], 0
  0773e	c7 85 f4 b9 ff
	ff c8 00 00 00	 mov	 DWORD PTR tv39301[ebp], OFFSET ?pc@@3UPC@@A+200
  07748	c7 85 e8 b9 ff
	ff 27 00 00 00	 mov	 DWORD PTR tv39300[ebp], OFFSET ?magic@@3PAUMAGIC@@A+39
$LL279@MenuProc:

; 15995: 						if (HitFontNo == itemWndFontNo[i]) {

  07752	8b 8d 0c ba ff
	ff		 mov	 ecx, DWORD PTR _i$12$[ebp]
  07758	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0775d	3b 04 8d 00 00
	00 00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA[ecx*4]
  07764	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39300[ebp]
  0776a	0f 85 38 02 00
	00		 jne	 $LN277@MenuProc

; 15996: 							char *splitPoint = magic[i].memo;
; 15997: 							sprintf(moji, "%2d/%2d", magic[i].mp, pc.mp);

  07770	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  07776	89 85 f0 b9 ff
	ff		 mov	 DWORD PTR _splitPoint$1$[ebp], eax
  0777c	ff 70 dd	 push	 DWORD PTR [eax-35]
  0777f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  07785	68 00 00 00 00	 push	 OFFSET ??_C@_07HFNBMNBH@?$CF2d?1?$CF2d@
  0778a	50		 push	 eax
  0778b	e8 00 00 00 00	 call	 _sprintf

; 15998: 							StockFontBuffer(pActMenuWnd2->x + 74 + 81, pActMenuWnd2->y + 183, FONT_PRIO_FRONT, 0, moji, 0);

  07790	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07796	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0779c	6a 00		 push	 0
  0779e	50		 push	 eax
  0779f	6a 00		 push	 0
  077a1	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  077a4	05 b7 00 00 00	 add	 eax, 183		; 000000b7H
  077a9	6a 01		 push	 1
  077ab	50		 push	 eax
  077ac	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  077af	05 9b 00 00 00	 add	 eax, 155		; 0000009bH
  077b4	50		 push	 eax
  077b5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15999: 							while (1) {
; 16000: 								if (strlen(splitPoint) > 22) {

  077ba	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39300[ebp]
  077c0	83 c4 28	 add	 esp, 40			; 00000028H
  077c3	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL4316@MenuProc:
  077c6	8a 01		 mov	 al, BYTE PTR [ecx]
  077c8	41		 inc	 ecx
  077c9	84 c0		 test	 al, al
  077cb	75 f9		 jne	 SHORT $LL4316@MenuProc
  077cd	2b ca		 sub	 ecx, edx
  077cf	83 f9 16	 cmp	 ecx, 22			; 00000016H
  077d2	0f 86 97 00 00
	00		 jbe	 $LN1325@MenuProc
  077d8	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR _splitPoint$1$[ebp]
  077de	66 90		 npad	 2
$LL280@MenuProc:

; 16001: 									strncpy(moji, splitPoint, 22);

  077e0	6a 16		 push	 22			; 00000016H
  077e2	52		 push	 edx
  077e3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  077e9	50		 push	 eax
  077ea	e8 00 00 00 00	 call	 _strncpy

; 16002: 									moji[22] = NULL;
; 16003: 									if (GetStrLastByte(moji) == 3) {

  077ef	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  077f5	c6 85 06 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+22], 0
  077fc	50		 push	 eax
  077fd	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  07802	83 c4 10	 add	 esp, 16			; 00000010H
  07805	83 f8 03	 cmp	 eax, 3
  07808	75 10		 jne	 SHORT $LN1327@MenuProc

; 16004: 										moji[21] = NULL;
; 16005: 										splitPoint += 21;

  0780a	83 85 f0 b9 ff
	ff 15		 add	 DWORD PTR _splitPoint$1$[ebp], 21 ; 00000015H
  07811	c6 85 05 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+21], 0

; 16006: 									}

  07818	eb 0e		 jmp	 SHORT $LN1328@MenuProc
$LN1327@MenuProc:

; 16007: 									else {
; 16008: 										moji[22] = NULL;
; 16009: 										splitPoint += 22;

  0781a	83 85 f0 b9 ff
	ff 16		 add	 DWORD PTR _splitPoint$1$[ebp], 22 ; 00000016H
  07821	c6 85 06 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+22], 0
$LN1328@MenuProc:

; 16010: 									}
; 16011: 									StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0); y += 24;

  07828	6a 00		 push	 0
  0782a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  07830	50		 push	 eax
  07831	6a 00		 push	 0
  07833	6a 01		 push	 1
  07835	57		 push	 edi
  07836	56		 push	 esi
  07837	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0783c	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR _splitPoint$1$[ebp]
  07842	83 c4 18	 add	 esp, 24			; 00000018H
  07845	8b ca		 mov	 ecx, edx
  07847	83 c7 18	 add	 edi, 24			; 00000018H
  0784a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0784d	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv38976[ebp], eax
$LL4317@MenuProc:

; 15999: 							while (1) {
; 16000: 								if (strlen(splitPoint) > 22) {

  07853	8a 01		 mov	 al, BYTE PTR [ecx]
  07855	41		 inc	 ecx
  07856	84 c0		 test	 al, al
  07858	75 f9		 jne	 SHORT $LL4317@MenuProc
  0785a	2b 8d f8 b9 ff
	ff		 sub	 ecx, DWORD PTR tv38976[ebp]
  07860	83 f9 16	 cmp	 ecx, 22			; 00000016H
  07863	0f 87 77 ff ff
	ff		 ja	 $LL280@MenuProc
  07869	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
$LN1325@MenuProc:

; 16012: 								}
; 16013: 								else {
; 16014: 									strcpy(moji, splitPoint);

  0786f	8b 8d f0 b9 ff
	ff		 mov	 ecx, DWORD PTR _splitPoint$1$[ebp]
  07875	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _moji$[ebp]
  0787b	2b d1		 sub	 edx, ecx
  0787d	0f 1f 00	 npad	 3
$LL2006@MenuProc:
  07880	8a 01		 mov	 al, BYTE PTR [ecx]
  07882	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  07885	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  07889	84 c0		 test	 al, al
  0788b	75 f3		 jne	 SHORT $LL2006@MenuProc

; 16015: 									StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0);

  0788d	6a 00		 push	 0
  0788f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  07895	50		 push	 eax
  07896	6a 00		 push	 0
  07898	6a 01		 push	 1
  0789a	57		 push	 edi
  0789b	56		 push	 esi
  0789c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16016: 									break;
; 16017: 								}
; 16018: 							}
; 16019: #if 0
; 16020: 							if (magic[i].memo[0] != NULL) {
; 16021: 								strncpy(moji, magic[i].memo, 22);
; 16022: 								moji[22] = NULL;
; 16023: 								StockFontBuffer(pActMenuWnd2->x + 74, pActMenuWnd2->y + 204, FONT_PRIO_FRONT, 0, moji, 0);
; 16024: 
; 16025: 								if (magic[i].memo[22] != NULL) {
; 16026: 									strncpy(moji, magic[i].memo + 22, 22);
; 16027: 									moji[22] = NULL;
; 16028: 									StockFontBuffer(pActMenuWnd2->x + 74, pActMenuWnd2->y + 224, FONT_PRIO_FRONT, 0, moji, 0);
; 16029: 								}
; 16030: 							}
; 16031: #endif
; 16032: 							StockDispBuffer(pActMenuWnd2->x + 37, pActMenuWnd2->y + 220, DISP_PRIO_ITEM, pc.item[i].graNo, 0);

  078a1	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR tv39301[ebp]
  078a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  078ad	6a 00		 push	 0
  078af	ff 30		 push	 DWORD PTR [eax]
  078b1	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  078b4	05 dc 00 00 00	 add	 eax, 220		; 000000dcH
  078b9	6a 6c		 push	 108			; 0000006cH
  078bb	50		 push	 eax
  078bc	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  078bf	83 c0 25	 add	 eax, 37			; 00000025H
  078c2	50		 push	 eax
  078c3	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 16033: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  078c8	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39300[ebp]
  078ce	83 c4 2c	 add	 esp, 44			; 0000002cH
  078d1	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  078d8	0f 84 c4 00 00
	00		 je	 $LN5059@MenuProc

; 16034: 								if (magic[i].field == MAGIC_FIELD_BATTLE || magic[i].mp > pc.mp) {

  078de	66 83 78 e1 01	 cmp	 WORD PTR [eax-31], 1
  078e3	0f 84 9c 00 00
	00		 je	 $LN1332@MenuProc
  078e9	8b 40 dd	 mov	 eax, DWORD PTR [eax-35]
  078ec	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?pc@@3UPC@@A+24
  078f2	0f 8f 8d 00 00
	00		 jg	 $LN1332@MenuProc

; 16036: 								}
; 16037: 								else {
; 16038: 									switch (magic[i].target) {

  078f8	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39300[ebp]
  078fe	0f bf 48 e3	 movsx	 ecx, WORD PTR [eax-29]
  07902	83 e9 00	 sub	 ecx, 0
  07905	74 25		 je	 SHORT $LN1333@MenuProc
  07907	83 e9 01	 sub	 ecx, 1
  0790a	0f 85 92 00 00
	00		 jne	 $LN5059@MenuProc

; 16049: 
; 16050: 									case MAGIC_TARGET_OTHER:
; 16051: 										jujutuNo = i;

  07910	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR _i$12$[ebp]

; 16052: 										play_se(217, 320, 240);

  07916	68 f0 00 00 00	 push	 240			; 000000f0H
  0791b	68 40 01 00 00	 push	 320			; 00000140H
  07920	a3 00 00 00 00	 mov	 DWORD PTR ?jujutuNo@@3HA, eax
  07925	68 d9 00 00 00	 push	 217			; 000000d9H
  0792a	eb 68		 jmp	 SHORT $LN5164@MenuProc
$LN1333@MenuProc:

; 16039: 
; 16040: 									case MAGIC_TARGET_MYSELF:
; 16041: 										if (eventWarpSendFlag == FALSE) {

  0792c	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  07934	75 6c		 jne	 SHORT $LN5059@MenuProc

; 16042: 											if (bNewServer)

  07936	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0793d	6a 00		 push	 0
  0793f	ff b5 0c ba ff
	ff		 push	 DWORD PTR _i$12$[ebp]
  07945	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  0794b	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  07951	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  07957	74 16		 je	 SHORT $LN1335@MenuProc

; 16043: 												lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);

  07959	e8 00 00 00 00	 call	 ?lssproto_MU_send@@YAXHHHHH@Z ; lssproto_MU_send

; 16046: 											play_se(100, 320, 240);

  0795e	83 c4 14	 add	 esp, 20			; 00000014H
  07961	68 f0 00 00 00	 push	 240			; 000000f0H
  07966	68 40 01 00 00	 push	 320			; 00000140H
  0796b	6a 64		 push	 100			; 00000064H

; 16047: 										}
; 16048: 										break;

  0796d	eb 25		 jmp	 SHORT $LN5164@MenuProc
$LN1335@MenuProc:

; 16044: 											else
; 16045: 												old_lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);

  0796f	e8 00 00 00 00	 call	 ?old_lssproto_MU_send@@YAXHHHHH@Z ; old_lssproto_MU_send

; 16046: 											play_se(100, 320, 240);

  07974	83 c4 14	 add	 esp, 20			; 00000014H
  07977	68 f0 00 00 00	 push	 240			; 000000f0H
  0797c	68 40 01 00 00	 push	 320			; 00000140H
  07981	6a 64		 push	 100			; 00000064H

; 16047: 										}
; 16048: 										break;

  07983	eb 0f		 jmp	 SHORT $LN5164@MenuProc
$LN1332@MenuProc:

; 16035: 									play_se(220, 320, 240);

  07985	68 f0 00 00 00	 push	 240			; 000000f0H
  0798a	68 40 01 00 00	 push	 320			; 00000140H
  0798f	68 dc 00 00 00	 push	 220			; 000000dcH
$LN5164@MenuProc:

; 15994: 					for (i = 0; i < 5; i++) {

  07994	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  07999	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39300[ebp]
  0799f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5059@MenuProc:
  079a2	8b 8d 0c ba ff
	ff		 mov	 ecx, DWORD PTR _i$12$[ebp]
$LN277@MenuProc:
  079a8	81 85 f4 b9 ff
	ff 7c 01 00 00	 add	 DWORD PTR tv39301[ebp], 380 ; 0000017cH
  079b2	41		 inc	 ecx
  079b3	83 c0 70	 add	 eax, 112		; 00000070H
  079b6	89 8d 0c ba ff
	ff		 mov	 DWORD PTR _i$12$[ebp], ecx
  079bc	89 85 e8 b9 ff
	ff		 mov	 DWORD PTR tv39300[ebp], eax
  079c2	83 f9 05	 cmp	 ecx, 5
  079c5	0f 8c 87 fd ff
	ff		 jl	 $LL279@MenuProc

; 16053: 										//itemNo = -1;
; 16054: 										break;
; 16055: #if 0
; 16056: 									case MAGIC_TARGET_ALLMYSIDE:
; 16057: 										if (bNewServer)
; 16058: 											lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16059: 										else
; 16060: 											old_lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16061: 										play_se(100, 320, 240);
; 16062: 										break;
; 16063: 
; 16064: 									case MAGIC_TARGET_ALLOTHERSIDE:
; 16065: 										if (bNewServer)
; 16066: 											lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16067: 										else
; 16068: 											old_lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16069: 										play_se(100, 320, 240);
; 16070: 										break;
; 16071: 
; 16072: 									case MAGIC_TARGET_ALL:
; 16073: 										if (bNewServer)
; 16074: 											lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16075: 										else
; 16076: 											old_lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16077: 										play_se(100, 320, 240);
; 16078: 										break;
; 16079: #endif									
; 16080: 									}
; 16081: 								}
; 16082: 							}
; 16083: 						}
; 16084: 					}
; 16085: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  079cb	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  079d2	0f 84 41 01 00
	00		 je	 $LN4785@MenuProc

; 16086: 						if (HitDispNo == itemWndFontNo[12]) {

  079d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  079dd	3b 05 30 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA+48
  079e3	75 6f		 jne	 SHORT $LN1340@MenuProc

; 16087: 							DeathAction(pActMenuWnd2);

  079e5	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  079eb	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16088: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 16089: 							GetKeyInputFocus(&MyChatBuffer);

  079f0	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  079f5	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 16090: 							Moneyflag = false;
; 16091: #endif
; 16092: 							pActMenuWnd2 = NULL;
; 16093: 							itemWndNo = 0;
; 16094: 							play_se(203, 320, 240);

  079fa	68 f0 00 00 00	 push	 240			; 000000f0H
  079ff	68 40 01 00 00	 push	 320			; 00000140H
  07a04	68 cb 00 00 00	 push	 203			; 000000cbH
  07a09	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  07a10	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, 0 ; pActMenuWnd2
  07a1a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 0
  07a24	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16095: 							jujutuNo = -1;

  07a29	83 ca ff	 or	 edx, -1
  07a2c	83 c4 14	 add	 esp, 20			; 00000014H

; 16096: 							if (MenuToggleFlag & JOY_CTRL_S) {

  07a2f	f7 05 00 00 00
	00 00 00 00 20	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  07a39	89 15 00 00 00
	00		 mov	 DWORD PTR ?jujutuNo@@3HA, edx
  07a3f	0f 84 da 00 00
	00		 je	 $LN285@MenuProc

; 16097: 								MenuToggleFlag ^= JOY_CTRL_S;	// CTRL + S

  07a45	81 35 00 00 00
	00 00 00 00 20	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H

; 16098: 								DeathMenuAction();

  07a4f	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction
$LN1340@MenuProc:

; 16099: 							}
; 16100: 						}
; 16101: 						if (jujutuNo != -1 && MenuToggleFlag & JOY_CTRL_S && statusWndNo == 1) {

  07a54	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?jujutuNo@@3HA
  07a5a	83 fa ff	 cmp	 edx, -1
  07a5d	0f 84 bc 00 00
	00		 je	 $LN285@MenuProc
  07a63	f7 05 00 00 00
	00 00 00 00 20	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  07a6d	0f 84 ac 00 00
	00		 je	 $LN285@MenuProc
  07a73	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?statusWndNo@@3IA, 1
  07a7a	0f 85 9f 00 00
	00		 jne	 $LN285@MenuProc

; 16102: 							for (i = 0; i < 11; i++) {

  07a80	33 f6		 xor	 esi, esi
$LL286@MenuProc:

; 16103: 								if (HitFontNo == statusWndFontNo[i] && eventWarpSendFlag == FALSE) {

  07a82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  07a87	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA[esi*4]
  07a8e	0f 85 79 00 00
	00		 jne	 $LN284@MenuProc
  07a94	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  07a9c	75 6f		 jne	 SHORT $LN284@MenuProc

; 16104: 									if (bNewServer)

  07a9e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  07aa5	56		 push	 esi
  07aa6	52		 push	 edx
  07aa7	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  07aad	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  07ab3	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  07ab9	74 07		 je	 SHORT $LN1343@MenuProc

; 16105: 										lssproto_MU_send(sockfd, nowGx, nowGy, jujutuNo, i);

  07abb	e8 00 00 00 00	 call	 ?lssproto_MU_send@@YAXHHHHH@Z ; lssproto_MU_send
  07ac0	eb 05		 jmp	 SHORT $LN5116@MenuProc
$LN1343@MenuProc:

; 16106: 									else
; 16107: 										old_lssproto_MU_send(sockfd, nowGx, nowGy, jujutuNo, i);

  07ac2	e8 00 00 00 00	 call	 ?old_lssproto_MU_send@@YAXHHHHH@Z ; old_lssproto_MU_send
$LN5116@MenuProc:

; 16108: 									play_se(100, 320, 240);

  07ac7	83 c4 14	 add	 esp, 20			; 00000014H
  07aca	68 f0 00 00 00	 push	 240			; 000000f0H
  07acf	68 40 01 00 00	 push	 320			; 00000140H
  07ad4	6a 64		 push	 100			; 00000064H
  07ad6	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16109: 									if (magic[jujutuNo].mp > pc.mp - magic[jujutuNo].mp) jujutuNo = -1;;

  07adb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?jujutuNo@@3HA
  07ae1	83 c4 0c	 add	 esp, 12			; 0000000cH
  07ae4	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  07aeb	2b c2		 sub	 eax, edx
  07aed	c1 e0 04	 shl	 eax, 4
  07af0	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?magic@@3PAUMAGIC@@A[eax+4]
  07af6	a1 18 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+24
  07afb	2b c1		 sub	 eax, ecx
  07afd	3b c8		 cmp	 ecx, eax
  07aff	b8 ff ff ff ff	 mov	 eax, -1
  07b04	0f 4f d0	 cmovg	 edx, eax
  07b07	89 15 00 00 00
	00		 mov	 DWORD PTR ?jujutuNo@@3HA, edx
$LN284@MenuProc:

; 16102: 							for (i = 0; i < 11; i++) {

  07b0d	46		 inc	 esi
  07b0e	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  07b11	0f 8c 6b ff ff
	ff		 jl	 $LL286@MenuProc

; 16099: 							}
; 16100: 						}
; 16101: 						if (jujutuNo != -1 && MenuToggleFlag & JOY_CTRL_S && statusWndNo == 1) {

  07b17	eb 06		 jmp	 SHORT $LN285@MenuProc
$LN4785@MenuProc:

; 16053: 										//itemNo = -1;
; 16054: 										break;
; 16055: #if 0
; 16056: 									case MAGIC_TARGET_ALLMYSIDE:
; 16057: 										if (bNewServer)
; 16058: 											lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16059: 										else
; 16060: 											old_lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16061: 										play_se(100, 320, 240);
; 16062: 										break;
; 16063: 
; 16064: 									case MAGIC_TARGET_ALLOTHERSIDE:
; 16065: 										if (bNewServer)
; 16066: 											lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16067: 										else
; 16068: 											old_lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16069: 										play_se(100, 320, 240);
; 16070: 										break;
; 16071: 
; 16072: 									case MAGIC_TARGET_ALL:
; 16073: 										if (bNewServer)
; 16074: 											lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16075: 										else
; 16076: 											old_lssproto_MU_send(sockfd, nowGx, nowGy, i, 0);
; 16077: 										play_se(100, 320, 240);
; 16078: 										break;
; 16079: #endif									
; 16080: 									}
; 16081: 								}
; 16082: 							}
; 16083: 						}
; 16084: 					}
; 16085: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  07b19	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?jujutuNo@@3HA
$LN285@MenuProc:

; 16110: 
; 16111: 								}
; 16112: 							}
; 16113: 						}
; 16114: 
; 16115: 					}
; 16116: 					if (pActMenuWnd2 != NULL) {

  07b1f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07b25	85 c9		 test	 ecx, ecx
  07b27	0f 84 9c 2a 00
	00		 je	 $LN1312@MenuProc

; 16117: 						int flag = FALSE;
; 16118: 						int col;
; 16119: 						x = pActMenuWnd2->x + 30;

  07b2d	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  07b30	33 c0		 xor	 eax, eax

; 16120: 						y = pActMenuWnd2->y + 35;

  07b32	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  07b35	83 c6 1e	 add	 esi, 30			; 0000001eH
  07b38	b9 04 00 00 00	 mov	 ecx, OFFSET ?magic@@3PAUMAGIC@@A+4
  07b3d	89 85 e0 b9 ff
	ff		 mov	 DWORD PTR _flag$1$[ebp], eax
  07b43	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  07b49	83 c7 23	 add	 edi, 35			; 00000023H

; 16121: 						for (i = 0; i < 5; i++) {

  07b4c	89 85 ec b9 ff
	ff		 mov	 DWORD PTR _i$14$[ebp], eax
  07b52	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv38810[ebp], ecx
  07b58	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL289@MenuProc:

; 16122: 							if (magic[i].useFlag == TRUE) {

  07b60	66 83 79 fc 01	 cmp	 WORD PTR [ecx-4], 1
  07b65	0f 85 cf 00 00
	00		 jne	 $LN287@MenuProc

; 16123: 								col = FONT_PAL_WHITE;

  07b6b	33 c0		 xor	 eax, eax

; 16124: 								if (jujutuNo == i) col = FONT_PAL_AQUA;

  07b6d	3b 95 ec b9 ff
	ff		 cmp	 edx, DWORD PTR _i$14$[ebp]
  07b73	ba 01 00 00 00	 mov	 edx, 1
  07b78	0f 44 c2	 cmove	 eax, edx

; 16125: 								if (pc.familySprite == 0) {

  07b7b	83 3d 4c 51 00
	00 00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20812, 0
  07b82	8b 11		 mov	 edx, DWORD PTR [ecx]
  07b84	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR _col$3$[ebp], eax
  07b8a	75 2c		 jne	 SHORT $LN1349@MenuProc

; 16126: 									if ((magic[i].mp * 80 / 100) > pc.mp) col = FONT_PAL_RED;

  07b8c	8d 0c 92	 lea	 ecx, DWORD PTR [edx+edx*4]
  07b8f	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  07b94	c1 e1 04	 shl	 ecx, 4
  07b97	f7 e9		 imul	 ecx
  07b99	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR tv38810[ebp]
  07b9f	c1 fa 05	 sar	 edx, 5
  07ba2	8b c2		 mov	 eax, edx
  07ba4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  07ba7	03 c2		 add	 eax, edx
  07ba9	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?pc@@3UPC@@A+24
  07baf	7e 17		 jle	 SHORT $LN5056@MenuProc
  07bb1	b8 06 00 00 00	 mov	 eax, 6

; 16127: 								}

  07bb6	eb 16		 jmp	 SHORT $LN1352@MenuProc
$LN1349@MenuProc:

; 16128: 								else {
; 16129: 									if (magic[i].mp > pc.mp) col = FONT_PAL_RED;

  07bb8	3b 15 18 00 00
	00		 cmp	 edx, DWORD PTR ?pc@@3UPC@@A+24
  07bbe	ba 06 00 00 00	 mov	 edx, 6
  07bc3	0f 4f c2	 cmovg	 eax, edx
  07bc6	eb 06		 jmp	 SHORT $LN1352@MenuProc
$LN5056@MenuProc:

; 16126: 									if ((magic[i].mp * 80 / 100) > pc.mp) col = FONT_PAL_RED;

  07bc8	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR _col$3$[ebp]
$LN1352@MenuProc:

; 16130: 								}
; 16131: 								if (magic[i].field == MAGIC_FIELD_BATTLE) col = FONT_PAL_GRAY;

  07bce	66 83 79 04 01	 cmp	 WORD PTR [ecx+4], 1
  07bd3	ba 07 00 00 00	 mov	 edx, 7

; 16132: 								CenteringStr(magic[i].name, moji, MAGIC_NAME_LEN);

  07bd8	6a 18		 push	 24			; 00000018H
  07bda	0f 44 c2	 cmove	 eax, edx
  07bdd	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR _col$3$[ebp], eax
  07be3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  07be9	50		 push	 eax
  07bea	8d 41 0a	 lea	 eax, DWORD PTR [ecx+10]
  07bed	50		 push	 eax
  07bee	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 16133: 								itemWndFontNo[i] = StockFontBuffer(x, y, FONT_PRIO_FRONT, col, moji, 2); y += 28;

  07bf3	6a 02		 push	 2
  07bf5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  07bfb	50		 push	 eax
  07bfc	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR _col$3$[ebp]
  07c02	6a 01		 push	 1
  07c04	57		 push	 edi
  07c05	56		 push	 esi
  07c06	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  07c0b	8b 8d ec b9 ff
	ff		 mov	 ecx, DWORD PTR _i$14$[ebp]
  07c11	83 c4 24	 add	 esp, 36			; 00000024H

; 16134: 								flag = TRUE;

  07c14	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?jujutuNo@@3HA
  07c1a	83 c7 1c	 add	 edi, 28			; 0000001cH
  07c1d	c7 85 e0 b9 ff
	ff 01 00 00 00	 mov	 DWORD PTR _flag$1$[ebp], 1
  07c27	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?itemWndFontNo@@3PAHA[ecx*4], eax
  07c2e	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR tv38810[ebp]
  07c34	8b 85 ec b9 ff
	ff		 mov	 eax, DWORD PTR _i$14$[ebp]
$LN287@MenuProc:

; 16121: 						for (i = 0; i < 5; i++) {

  07c3a	83 c1 70	 add	 ecx, 112		; 00000070H
  07c3d	40		 inc	 eax
  07c3e	89 85 ec b9 ff
	ff		 mov	 DWORD PTR _i$14$[ebp], eax
  07c44	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv38810[ebp], ecx
  07c4a	81 f9 34 02 00
	00		 cmp	 ecx, OFFSET ?magic@@3PAUMAGIC@@A+564
  07c50	0f 8c 0a ff ff
	ff		 jl	 $LL289@MenuProc

; 16135: 							}
; 16136: 						}
; 16137: 						if (flag == FALSE) StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "ì£¼ì ì´ ììµëë¤.", 0);

  07c56	83 bd e0 b9 ff
	ff 00		 cmp	 DWORD PTR _flag$1$[ebp], 0
  07c5d	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  07c63	75 15		 jne	 SHORT $LN1354@MenuProc
  07c65	6a 00		 push	 0
  07c67	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OOMMIBOD@?A?V?$LM?z?$MA?L?5?$LO?x?$LN?$MA?$LE?O?$LE?Y?4@
  07c6c	6a 00		 push	 0
  07c6e	6a 01		 push	 1
  07c70	57		 push	 edi
  07c71	56		 push	 esi
  07c72	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  07c77	83 c4 18	 add	 esp, 24			; 00000018H
$LN1354@MenuProc:

; 16138: 						itemWndFontNo[12] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, pActMenuWnd2->y + 262 + 10, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  07c7a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07c80	6a 02		 push	 2
  07c82	68 bb 65 00 00	 push	 26043			; 000065bbH
  07c87	6a 69		 push	 105			; 00000069H
  07c89	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  07c8c	05 10 01 00 00	 add	 eax, 272		; 00000110H
  07c91	50		 push	 eax
  07c92	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  07c95	ff 70 14	 push	 DWORD PTR [eax+20]
  07c98	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  07c9d	83 c4 14	 add	 esp, 20			; 00000014H
  07ca0	a3 30 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+48, eax

; 16139: 					}
; 16140: 				}
; 16141: 			}
; 16142: 			break;

  07ca5	e9 19 29 00 00	 jmp	 $LN4820@MenuProc
$LN1080@MenuProc:

; 14899: 
; 14900: 		case 0:
; 14901: 			if (pActMenuWnd2 == NULL) {

  07caa	85 c9		 test	 ecx, ecx
  07cac	0f 85 25 01 00
	00		 jne	 $LN1081@MenuProc

; 14902: #ifndef _PET_ITEM
; 14903: 				pActMenuWnd2 = MakeWindowDisp(ä¸­å¿x - 292, 4, 292, 440, 0, -1);
; 14904: 				InitItem(pActMenuWnd2->x, pActMenuWnd2->y, 0);
; 14905: #else
; 14906: 
; 14907: 
; 14908: 				pActMenuWnd2 = MakeWindowDisp(ä¸´æ¶MAXX - 292, 4, 292, 440, 0, -1);

  07cb2	6a ff		 push	 -1
  07cb4	51		 push	 ecx
  07cb5	68 b8 01 00 00	 push	 440			; 000001b8H
  07cba	68 24 01 00 00	 push	 292			; 00000124H
  07cbf	8d 86 dc fe ff
	ff		 lea	 eax, DWORD PTR [esi-292]
  07cc5	6a 04		 push	 4
  07cc7	50		 push	 eax
  07cc8	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  07ccd	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, eax ; pActMenuWnd2

; 14909: 				pActMenuWnd2->x = ä¸´æ¶MAXX - 285;

  07cd2	8d 8e e3 fe ff
	ff		 lea	 ecx, DWORD PTR [esi-285]
  07cd8	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 14910: 				InitItem(pActMenuWnd2->x, -3, g_bPetItemWndFlag);

  07cdb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bPetItemWndFlag@@3_NA
  07ce2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07ce8	50		 push	 eax
  07ce9	6a fd		 push	 -3			; fffffffdH
  07ceb	ff 76 18	 push	 DWORD PTR [esi+24]
  07cee	e8 00 00 00 00	 call	 ?InitItem@@YAXHHH@Z	; InitItem
  07cf3	83 c4 24	 add	 esp, 36			; 00000024H

; 14911: 
; 14912: 
; 14913: 
; 14914: #endif
; 14915: 				itemNo = -1;

  07cf6	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1

; 14916: 				ItemMixPetNo = -1;
; 14917: 				itemWndBagOffset = 0;
; 14918: 				if (MenuToggleFlag & JOY_CTRL_E && mailWndNo == MAIL_WND_ITEM) {

  07d00	f7 05 00 00 00
	00 00 00 00 04	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 67108864 ; MenuToggleFlag, 04000000H
  07d0a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?ItemMixPetNo@@3HA, -1
  07d14	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBagOffset@@3HA, 0 ; itemWndBagOffset
  07d1e	74 18		 je	 SHORT $LN4787@MenuProc
  07d20	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 4
  07d27	75 0f		 jne	 SHORT $LN4787@MenuProc

; 14919: 					MenuToggleFlag &= ~JOY_CTRL_E;

  07d29	81 25 00 00 00
	00 ff ff ff fb	 and	 DWORD PTR ?MenuToggleFlag@@3IA, -67108865 ; MenuToggleFlag, fbffffffH

; 14920: 					DeathMenuAction();

  07d33	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction
$LN4787@MenuProc:

; 14921: 				}
; 14922: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 14923: 				MymoneyBuffer.buffer[0] = NULL;
; 14924: 				MymoneyBuffer.cnt = 0;
; 14925: 				MymoneyBuffer.cursor = 0;
; 14926: 				MymoneyBuffer.len = 10;
; 14927: 				MymoneyBuffer.color = 0;
; 14928: 				MymoneyBuffer.x = pActMenuWnd2->x + 191;

  07d38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07d3e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?MymoneyBuffer@@3USTR_BUFFER@@A, 0
  07d45	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+263, 0
  07d4c	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+265, 0
  07d53	c6 05 04 01 00
	00 0a		 mov	 BYTE PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+260, 10 ; 0000000aH
  07d5a	c6 05 08 01 00
	00 00		 mov	 BYTE PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+264, 0
  07d61	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  07d64	05 bf 00 00 00	 add	 eax, 191		; 000000bfH
  07d69	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA, -2 ; fffffffeH
  07d73	a3 0c 01 00 00	 mov	 DWORD PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+268, eax

; 14929: 				MymoneyBuffer.y = pActMenuWnd2->y + 180;

  07d78	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  07d7b	05 b4 00 00 00	 add	 eax, 180		; 000000b4H

; 14930: 				MymoneyBuffer.fontPrio = FONT_PRIO_FRONT;

  07d80	c7 05 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+284, 1
  07d8a	a3 10 01 00 00	 mov	 DWORD PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+272, eax

; 14931: 				x1 = pActMenuWnd2->x + 173;
; 14932: 				y1 = pActMenuWnd2->y + 133;
; 14933: #endif
; 14934: 				for (i = 0; i < 3; i++) itemWndBtnBag[i] = -2;
; 14935: #ifdef _PET_ITEM
; 14936: 				nSelectPet = -1;
; 14937: 				for (i = 0; i < MAX_PET; i++) {

  07d8f	33 d2		 xor	 edx, edx
  07d91	c7 05 04 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA+4, -2 ; fffffffeH
  07d9b	b8 76 00 00 00	 mov	 eax, OFFSET ?pet@@3PAUPET@@A+118
  07da0	c7 05 08 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA+8, -2 ; fffffffeH
  07daa	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nSelectPet@@3HA, -1
$LL205@MenuProc:

; 14938: 					if (pet[i].useFlag) {

  07db4	66 83 38 00	 cmp	 WORD PTR [eax], 0
  07db8	75 12		 jne	 SHORT $LN2305@MenuProc

; 14931: 				x1 = pActMenuWnd2->x + 173;
; 14932: 				y1 = pActMenuWnd2->y + 133;
; 14933: #endif
; 14934: 				for (i = 0; i < 3; i++) itemWndBtnBag[i] = -2;
; 14935: #ifdef _PET_ITEM
; 14936: 				nSelectPet = -1;
; 14937: 				for (i = 0; i < MAX_PET; i++) {

  07dba	05 78 0b 00 00	 add	 eax, 2936		; 00000b78H
  07dbf	42		 inc	 edx
  07dc0	3d ce 39 00 00	 cmp	 eax, OFFSET ?pet@@3PAUPET@@A+14798
  07dc5	7c ed		 jl	 SHORT $LL205@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  07dc7	e9 fd 27 00 00	 jmp	 $LN1312@MenuProc
$LN2305@MenuProc:

; 14939: 						nSelectPet = i;

  07dcc	89 15 00 00 00
	00		 mov	 DWORD PTR ?nSelectPet@@3HA, edx

; 14940: 						break;
; 14941: 					}
; 14942: 				}
; 14943: #endif
; 14944: 			}

  07dd2	e9 f2 27 00 00	 jmp	 $LN1312@MenuProc
$LN1081@MenuProc:

; 14945: 			else {
; 14946: 				//andy_log è£å¤æ ä½ä¿®æ¹å¤[ì¥ë¹ì¬ë¡¯ìì ]
; 14947: 				if (pActMenuWnd2->hp > 0) {

  07dd7	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  07ddb	0f 8e e8 27 00
	00		 jle	 $LN1312@MenuProc

; 14948: #ifdef _PET_ITEM
; 14949: 					// ìíì°½ì ì¼ìª½ì ìë í­ì´ ëë ¤ìëì§íì¸		[í©ê¸ìë£¨?]
; 14950: 					x1 = pActMenuWnd2->x - 21;
; 14951: 					y1 = pActMenuWnd2->y + 12;
; 14952: #ifdef _NB_æ°éå·æ çé¢
; 14953: 
; 14954: 
; 14955: 					StockDispBuffer(ä¸´æ¶MAXX - 160, ((WINDOW_DISP*)pActMenuWnd2->pYobi)->my+5, DISP_PRIO_MENU, 26455, 1);

  07de1	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  07de4	6a 01		 push	 1
  07de6	68 57 67 00 00	 push	 26455			; 00006757H
  07deb	6a 68		 push	 104			; 00000068H
  07ded	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  07df0	83 c0 05	 add	 eax, 5
  07df3	50		 push	 eax
  07df4	8d 86 60 ff ff
	ff		 lea	 eax, DWORD PTR [esi-160]
  07dfa	50		 push	 eax
  07dfb	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  07e00	83 c4 14	 add	 esp, 20			; 00000014H

; 14956: 
; 14957: 
; 14958: #else
; 14959: 					if (g_bPetItemWndFlag)
; 14960: 					{
; 14961: 						if (MakeHitBox(x1, y1, x1 + 23, y1 + 60, DISP_PRIO_IME3) == TRUE)	// æä¸äºäººç©è£å¤[ìºë¦­í° ì¥ë¹ëë¦¼]
; 14962: 							if (mouse.onceState & MOUSE_LEFT_CRICK)
; 14963: 							{
; 14964: 								g_bPetItemWndFlag = false;
; 14965: 								InitItem(pActMenuWnd2->x, pActMenuWnd2->y, g_bPetItemWndFlag);
; 14966: 							}
; 14967: 					}
; 14968: 					else {
; 14969: 						if (MakeHitBox(x1, y1 + 78, x1 + 23, y1 + 142, DISP_PRIO_IME3) == TRUE)	// æä¸äºå® ç©è£å¤[ëë¬ ì§ ì ìëë¬¼ì¥ë¹]
; 14970: 							if (mouse.onceState & MOUSE_LEFT_CRICK)
; 14971: 							{
; 14972: 								g_bPetItemWndFlag = true;
; 14973: 								InitItem(pActMenuWnd2->x, pActMenuWnd2->y, g_bPetItemWndFlag);
; 14974: 							}
; 14975: 					}
; 14976: 
; 14977: 
; 14978: 					if (g_bPetItemWndFlag)
; 14979: 						StockDispBuffer(((WINDOW_DISP*)pActMenuWnd2->pYobi)->mx - 14, ((WINDOW_DISP*)pActMenuWnd2->pYobi)->my, DISP_PRIO_MENU, 26456, 1);
; 14980: 					else
; 14981: 						StockDispBuffer(((WINDOW_DISP*)pActMenuWnd2->pYobi)->mx - 14, ((WINDOW_DISP*)pActMenuWnd2->pYobi)->my, DISP_PRIO_MENU, CG_NEWITEM_WND, 1);
; 14982: #endif
; 14983: #else
; 14984: #ifdef _ITEM_EQUITSPACE
; 14985: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd2->pYobi)->my, DISP_PRIO_MENU, CG_NEWITEM_WND, 1);
; 14986: #else
; 14987: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd2->pYobi)->my, DISP_PRIO_MENU, CG_ITEM_WND_0, 1);
; 14988: 
; 14989: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd2->pYobi)->my, DISP_PRIO_MENU, CG_ITEM_WND_1, 1);
; 14990: #endif
; 14991: #endif
; 14992: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 14993: #ifdef _PET_ITEM
; 14994: 					if (!g_bPetItemWndFlag)	// ìºë¦­í° ì¥ë¹ ë°ìë ë¤ì í­ëª©ë§ íìíë©´ ë©ëë¤.

  07e03	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  07e0a	75 64		 jne	 SHORT $LN4788@MenuProc

; 14995: #endif
; 14996: 					{
; 14997: 						x1 = ä¸´æ¶MAXX - 102;
; 14998: 						y1 = 133;
; 14999: 						if (MakeHitBox(x1, y1, x1 + 86, y1 + 25, DISP_PRIO_IME3) == TRUE) {

  07e0c	6a 69		 push	 105			; 00000069H
  07e0e	8d 4e 9a	 lea	 ecx, DWORD PTR [esi-102]
  07e11	68 9e 00 00 00	 push	 158			; 0000009eH
  07e16	8d 41 56	 lea	 eax, DWORD PTR [ecx+86]
  07e19	50		 push	 eax
  07e1a	68 85 00 00 00	 push	 133			; 00000085H
  07e1f	51		 push	 ecx
  07e20	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  07e25	83 c4 14	 add	 esp, 20			; 00000014H
  07e28	83 f8 01	 cmp	 eax, 1
  07e2b	75 43		 jne	 SHORT $LN4788@MenuProc

; 15000: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  07e2d	84 05 2c 00 00
	00		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, al
  07e33	74 3b		 je	 SHORT $LN4788@MenuProc

; 15001: 								strcpy(MymoneyBuffer.buffer, "");
; 15002: 								MymoneyBuffer.buffer[0] = NULL;
; 15003: 								MymoneyBuffer.cursor = 0;
; 15004: 								MymoneyBuffer.cnt = 0;
; 15005: 								Moneyflag = true;
; 15006: 								GetKeyInputFocus(&MymoneyBuffer);

  07e35	68 00 00 00 00	 push	 OFFSET ?MymoneyBuffer@@3USTR_BUFFER@@A ; MymoneyBuffer
  07e3a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?MymoneyBuffer@@3USTR_BUFFER@@A, 0
  07e41	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+265, 0
  07e48	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+263, 0
  07e4f	a2 00 00 00 00	 mov	 BYTE PTR ?Moneyflag@@3_NA, al ; Moneyflag
  07e54	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 15007: 								play_se(217, 320, 240);

  07e59	68 f0 00 00 00	 push	 240			; 000000f0H
  07e5e	68 40 01 00 00	 push	 320			; 00000140H
  07e63	68 d9 00 00 00	 push	 217			; 000000d9H
  07e68	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  07e6d	83 c4 10	 add	 esp, 16			; 00000010H
$LN4788@MenuProc:

; 15008: 							}
; 15009: 						}
; 15010: 					}
; 15011: 					if (Moneyflag == true) {

  07e70	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?Moneyflag@@3_NA, 1 ; Moneyflag
  07e77	75 74		 jne	 SHORT $LN4791@MenuProc

; 15012: 						MymoneyBuffer.x = ä¸´æ¶MAXX - 32 - strlen(MymoneyBuffer.buffer) * 7;

  07e79	b9 00 00 00 00	 mov	 ecx, OFFSET ?MymoneyBuffer@@3USTR_BUFFER@@A ; MymoneyBuffer
  07e7e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL4318@MenuProc:
  07e81	8a 01		 mov	 al, BYTE PTR [ecx]
  07e83	41		 inc	 ecx
  07e84	84 c0		 test	 al, al
  07e86	75 f9		 jne	 SHORT $LL4318@MenuProc
  07e88	2b ca		 sub	 ecx, edx

; 15013: 						StockFontBuffer2(&MymoneyBuffer);

  07e8a	68 00 00 00 00	 push	 OFFSET ?MymoneyBuffer@@3USTR_BUFFER@@A ; MymoneyBuffer
  07e8f	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  07e96	2b c1		 sub	 eax, ecx
  07e98	8b ce		 mov	 ecx, esi
  07e9a	2b c8		 sub	 ecx, eax
  07e9c	83 e9 20	 sub	 ecx, 32			; 00000020H
  07e9f	89 0d 0c 01 00
	00		 mov	 DWORD PTR ?MymoneyBuffer@@3USTR_BUFFER@@A+268, ecx
  07ea5	e8 00 00 00 00	 call	 ?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z ; StockFontBuffer2

; 15014: 						itemWndDropGold = atoi(MymoneyBuffer.buffer);

  07eaa	68 00 00 00 00	 push	 OFFSET ?MymoneyBuffer@@3USTR_BUFFER@@A ; MymoneyBuffer
  07eaf	e8 00 00 00 00	 call	 _atoi

; 15015: 						if (atoi(MymoneyBuffer.buffer) >= pc.gold) {

  07eb4	68 00 00 00 00	 push	 OFFSET ?MymoneyBuffer@@3USTR_BUFFER@@A ; MymoneyBuffer
  07eb9	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, eax
  07ebe	e8 00 00 00 00	 call	 _atoi
  07ec3	8b 0d 60 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+96
  07ec9	83 c4 0c	 add	 esp, 12			; 0000000cH
  07ecc	3b c1		 cmp	 eax, ecx
  07ece	7c 1d		 jl	 SHORT $LN4791@MenuProc

; 15016: 							sprintf(MymoneyBuffer.buffer, "%d", pc.gold);

  07ed0	51		 push	 ecx
  07ed1	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  07ed6	68 00 00 00 00	 push	 OFFSET ?MymoneyBuffer@@3USTR_BUFFER@@A ; MymoneyBuffer
  07edb	e8 00 00 00 00	 call	 _sprintf

; 15017: 							itemWndDropGold = pc.gold;

  07ee0	a1 60 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+96
  07ee5	83 c4 0c	 add	 esp, 12			; 0000000cH
  07ee8	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, eax
$LN4791@MenuProc:

; 15018: 						}
; 15019: 					}
; 15020: #endif
; 15021: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  07eed	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  07ef4	0f 84 6a 03 00
	00		 je	 $LN222@MenuProc

; 15022: #ifdef _NB_éå·èªå¨å å 
; 15023: 						if (HitDispNo == éå·å å æé®) {

  07efa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  07eff	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?Ô³Îý?Ê¥äÎ?@@3HA
  07f05	75 56		 jne	 SHORT $LN1092@MenuProc

; 15024: 							char ä¸´æ¶æç¤º[128];
; 15025: 							sprintf(ä¸´æ¶æç¤º, "ìì´í ìë ê²¹ì¹ê¸°ã");

  07f07	8d 85 50 f1 ff
	ff		 lea	 eax, DWORD PTR _??ð«ãÆ$44[ebp]
  07f0d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EOCHGIJI@?$LO?F?$MA?L?E?$NL?5?$MA?Z?$LF?$LP?5?$LA?c?D?$KB?$LB?b?$KB?$KD@
  07f12	50		 push	 eax
  07f13	e8 00 00 00 00	 call	 _sprintf

; 15026: 							ShowBottomLineString(FONT_PAL_WHITE, ä¸´æ¶æç¤º);

  07f18	8d 85 50 f1 ff
	ff		 lea	 eax, DWORD PTR _??ð«ãÆ$44[ebp]
  07f1e	50		 push	 eax
  07f1f	6a 00		 push	 0
  07f21	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  07f26	83 c4 10	 add	 esp, 16			; 00000010H

; 15027: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  07f29	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  07f30	74 14		 je	 SHORT $LN1093@MenuProc

; 15028: 								//chatStrSendForServer("/ê²¹ì¹ê¸°", 0);
; 15029: 								lssproto_SaMenu_send(sockfd,1,7,0);

  07f32	6a 00		 push	 0
  07f34	6a 07		 push	 7
  07f36	6a 01		 push	 1
  07f38	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  07f3e	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send
  07f43	83 c4 10	 add	 esp, 16			; 00000010H
$LN1093@MenuProc:

; 15030: 							}
; 15031: 							play_se(203, 320, 240);

  07f46	68 f0 00 00 00	 push	 240			; 000000f0H
  07f4b	68 40 01 00 00	 push	 320			; 00000140H
  07f50	68 cb 00 00 00	 push	 203			; 000000cbH
  07f55	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  07f5a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1092@MenuProc:

; 15032: 						}
; 15033: #endif
; 15034: 						for (i = 0; i < 3; i++)

  07f5d	33 c9		 xor	 ecx, ecx
  07f5f	90		 npad	 1
$LL208@MenuProc:

; 15035: 							if (HitDispNo == itemWndBtnBag[i])

  07f60	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  07f65	3b 04 8d 00 00
	00 00		 cmp	 eax, DWORD PTR ?itemWndBtnBag@@3PAHA[ecx*4]
  07f6c	74 08		 je	 SHORT $LN2306@MenuProc

; 15032: 						}
; 15033: #endif
; 15034: 						for (i = 0; i < 3; i++)

  07f6e	41		 inc	 ecx
  07f6f	83 f9 03	 cmp	 ecx, 3
  07f72	7c ec		 jl	 SHORT $LL208@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  07f74	eb 06		 jmp	 SHORT $LN207@MenuProc
$LN2306@MenuProc:

; 15036: 							{
; 15037: 								itemWndBagOffset = i;

  07f76	89 0d 00 00 00
	00		 mov	 DWORD PTR ?itemWndBagOffset@@3HA, ecx ; itemWndBagOffset
$LN207@MenuProc:

; 15038: 								break;
; 15039: 							}
; 15040: 
; 15041: 						// æä¸å³é­é®
; 15042: 						if (HitDispNo == itemWndFontNo[0]) {

  07f7c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  07f81	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA
  07f87	0f 85 8e 00 00
	00		 jne	 $LN1095@MenuProc

; 15043: 							DeathAction(pActMenuWnd2);

  07f8d	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  07f93	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 15044: 							pActMenuWnd2 = NULL;
; 15045: 							DeathAction(pActPet2);

  07f98	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet2@@3PAUaction@@A
  07f9e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, 0 ; pActMenuWnd2
  07fa8	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 15046: 							pActPet2 = NULL;
; 15047: 							ItemMixPetNo = -1;
; 15048: 							MenuToggleFlag ^= JOY_CTRL_I;

  07fad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  07fb2	83 c4 08	 add	 esp, 8
  07fb5	35 00 00 00 08	 xor	 eax, 134217728		; 08000000H
  07fba	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet2@@3PAUaction@@A, 0
  07fc4	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?ItemMixPetNo@@3HA, -1
  07fce	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag
  07fd3	a9 00 00 00 20	 test	 eax, 536870912		; 20000000H

; 15049: 							if (MenuToggleFlag & JOY_CTRL_S) {

  07fd8	74 0f		 je	 SHORT $LN1096@MenuProc

; 15050: 								MenuToggleFlag ^= JOY_CTRL_S;	// CTRL + S

  07fda	35 00 00 00 20	 xor	 eax, 536870912		; 20000000H
  07fdf	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 15051: 								DeathMenuAction();

  07fe4	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction
$LN1096@MenuProc:

; 15052: 							}
; 15053: 							play_se(203, 320, 240);

  07fe9	68 f0 00 00 00	 push	 240			; 000000f0H
  07fee	68 40 01 00 00	 push	 320			; 00000140H
  07ff3	68 cb 00 00 00	 push	 203			; 000000cbH
  07ff8	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 15054: 							itemNo = -1;
; 15055: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 15056: 							GetKeyInputFocus(&MyChatBuffer);

  07ffd	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  08002	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1
  0800c	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  08011	83 c4 10	 add	 esp, 16			; 00000010H

; 15057: 							Moneyflag = false;

  08014	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
$LN1095@MenuProc:

; 15058: #endif
; 15059: 						}
; 15060: 
; 15061: 						// æäºåæ¯
; 15062: 						if (HitDispNo == itemWndFontNo[1]) {

  0801b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  08020	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA+4
  08026	0f 85 25 01 00
	00		 jne	 $LN4793@MenuProc

; 15063: 							itemWndNo = 1;
; 15064: 							DeathAction(pActMenuWnd2);

  0802c	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  08032	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 1
  0803c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 15065: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 15066: 							GetKeyInputFocus(&MyChatBuffer);

  08041	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  08046	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 15067: 							Moneyflag = false;
; 15068: #endif
; 15069: 							pActMenuWnd2 = NULL;
; 15070: 							DeathAction(pActPet2);

  0804b	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet2@@3PAUaction@@A
  08051	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  08058	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, 0 ; pActMenuWnd2
  08062	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 15071: 							pActPet2 = NULL;
; 15072: 							ItemMixPetNo = -1;
; 15073: 							play_se(202, 300, 300);

  08067	68 2c 01 00 00	 push	 300			; 0000012cH
  0806c	68 2c 01 00 00	 push	 300			; 0000012cH
  08071	68 ca 00 00 00	 push	 202			; 000000caH
  08076	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet2@@3PAUaction@@A, 0
  08080	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?ItemMixPetNo@@3HA, -1
  0808a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0808f	83 c4 18	 add	 esp, 24			; 00000018H

; 15074: 							if (!(MenuToggleFlag & JOY_CTRL_S)) {

  08092	f7 05 00 00 00
	00 00 00 00 20	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  0809c	0f 85 84 00 00
	00		 jne	 $LN1098@MenuProc

; 15075: 								MenuToggleFlag ^= JOY_CTRL_S;	// CTRL + S ??

  080a2	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  080a9	81 35 00 00 00
	00 00 00 00 20	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  080b3	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA, xmm0

; 15076: 								for (i = 0; i < MENU_STATUS_0; i++) statusWndFontNo[i] = -2;
; 15077: 								for (i = 0; i < MENU_STATUS_0; i++) statusWndBtnFlag[i] = 0;
; 15078: 								statusWndNo = 1;

  080ba	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 1
  080c4	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+16, xmm0
  080cb	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+32, xmm0
  080d2	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+48, xmm0
  080d9	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+64, xmm0
  080e0	0f 57 c0	 xorps	 xmm0, xmm0
  080e3	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA, xmm0
  080ea	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+16, xmm0
  080f1	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+32, xmm0
  080f8	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+48, xmm0
  080ff	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+64, xmm0

; 15079: 								DeathMenuAction();

  08106	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 15080: 								saveUserSetting();

  0810b	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 15081: 								MenuToggleFlag &= JOY_CTRL_I;

  08110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  08115	25 00 00 00 08	 and	 eax, 134217728		; 08000000H

; 15082: 								MenuToggleFlag |= JOY_CTRL_S;

  0811a	0d 00 00 00 20	 or	 eax, 536870912		; 20000000H
  0811f	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 15083: 							}

  08124	eb 2b		 jmp	 SHORT $LN4793@MenuProc
$LN1098@MenuProc:

; 15084: 							else {
; 15085: 								if (statusWndNo != 1) {

  08126	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?statusWndNo@@3IA, 1
  0812d	74 22		 je	 SHORT $LN4793@MenuProc

; 15086: 									DeathAction(pActMenuWnd);

  0812f	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  08135	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0813a	83 c4 04	 add	 esp, 4

; 15087: 									pActMenuWnd = NULL;

  0813d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 15088: 									statusWndNo = 1;

  08147	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 1
$LN4793@MenuProc:

; 15089: 								}
; 15090: 							}
; 15091: 						}
; 15092: 						if (itemNo != -1 && MenuToggleFlag & JOY_CTRL_S && statusWndNo == 1) {

  08151	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?itemNo@@3HA, -1
  08158	0f 84 92 00 00
	00		 je	 $LN4795@MenuProc
  0815e	f7 05 00 00 00
	00 00 00 00 20	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  08168	0f 84 82 00 00
	00		 je	 $LN4795@MenuProc
  0816e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?statusWndNo@@3IA, 1
  08175	75 79		 jne	 SHORT $LN4795@MenuProc

; 15093: 							for (i = 0; i < 11; i++) {

  08177	33 f6		 xor	 esi, esi
  08179	0f 1f 80 00 00
	00 00		 npad	 7
$LL217@MenuProc:

; 15094: 								if (HitFontNo == statusWndFontNo[i] && eventWarpSendFlag == FALSE) {

  08180	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  08185	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?statusWndFontNo@@3PAHA[esi*4]
  0818c	75 5c		 jne	 SHORT $LN215@MenuProc
  0818e	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  08196	75 52		 jne	 SHORT $LN215@MenuProc

; 15095: 									if (bNewServer)

  08198	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0819f	56		 push	 esi
  081a0	ff 35 00 00 00
	00		 push	 DWORD PTR ?itemNo@@3HA
  081a6	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  081ac	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  081b2	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  081b8	74 07		 je	 SHORT $LN1103@MenuProc

; 15096: 										lssproto_ID_send(sockfd, nowGx, nowGy, itemNo, i);

  081ba	e8 00 00 00 00	 call	 ?lssproto_ID_send@@YAXHHHHH@Z ; lssproto_ID_send
  081bf	eb 05		 jmp	 SHORT $LN5117@MenuProc
$LN1103@MenuProc:

; 15097: 									else
; 15098: 										old_lssproto_ID_send(sockfd, nowGx, nowGy, itemNo, i);

  081c1	e8 00 00 00 00	 call	 ?old_lssproto_ID_send@@YAXHHHHH@Z ; old_lssproto_ID_send
$LN5117@MenuProc:

; 15099: 									play_se(212, 320, 240);

  081c6	83 c4 14	 add	 esp, 20			; 00000014H
  081c9	68 f0 00 00 00	 push	 240			; 000000f0H
  081ce	68 40 01 00 00	 push	 320			; 00000140H
  081d3	68 d4 00 00 00	 push	 212			; 000000d4H
  081d8	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  081dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15100: 									itemNo = -1;

  081e0	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1
$LN215@MenuProc:

; 15093: 							for (i = 0; i < 11; i++) {

  081ea	46		 inc	 esi
  081eb	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  081ee	7c 90		 jl	 SHORT $LL217@MenuProc
$LN4795@MenuProc:

; 15101: 
; 15102: 								}
; 15103: 							}
; 15104: 						}
; 15105: #ifdef _PET_ITEM
; 15106: 						// ç®åå¤å¨å® ç©è£å¤è§çª
; 15107: 						if (g_bPetItemWndFlag) {

  081f0	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  081f7	74 6b		 je	 SHORT $LN222@MenuProc

; 15108: 							// æä¸äºå·¦ç®­å¤´
; 15109: 							if (HitDispNo == itemWndFontNo[5]) {

  081f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  081fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nSelectPet@@3HA
  08204	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA+20
  0820a	75 26		 jne	 SHORT $LN219@MenuProc

; 15110: 								if (nSelectPet != -1) {

  0820c	83 f9 ff	 cmp	 ecx, -1
  0820f	74 21		 je	 SHORT $LN219@MenuProc
$LL220@MenuProc:

; 15111: 									do {
; 15112: 										nSelectPet--;

  08211	83 e9 01	 sub	 ecx, 1

; 15113: 										//CC_FIX 
; 15114: 										//20170807
; 15115: 										//ä¸è®ºæ¯ä¸æ¯éªå® ï¼é½æ¾ç¤ºå® è£
; 15116: 										//if (nSelectPet == pc.ridePetNo)
; 15117: 										//	nSelectPet--;
; 15118: 										if (nSelectPet < 0)

  08214	b8 04 00 00 00	 mov	 eax, 4
  08219	0f 48 c8	 cmovs	 ecx, eax

; 15119: 											nSelectPet = MAX_PET - 1;
; 15120: 									} while (!pet[nSelectPet].useFlag);

  0821c	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  08222	66 83 b8 76 00
	00 00 00	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 0
  0822a	74 e5		 je	 SHORT $LL220@MenuProc

; 15113: 										//CC_FIX 
; 15114: 										//20170807
; 15115: 										//ä¸è®ºæ¯ä¸æ¯éªå® ï¼é½æ¾ç¤ºå® è£
; 15116: 										//if (nSelectPet == pc.ridePetNo)
; 15117: 										//	nSelectPet--;
; 15118: 										if (nSelectPet < 0)

  0822c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nSelectPet@@3HA, ecx
$LN219@MenuProc:

; 15121: 								}
; 15122: 							}
; 15123: 							// æä¸äºå³ç®­å¤´
; 15124: 							if (HitDispNo == itemWndFontNo[6]) {

  08232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  08237	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA+24
  0823d	75 25		 jne	 SHORT $LN222@MenuProc

; 15125: 								if (nSelectPet != -1) {

  0823f	83 f9 ff	 cmp	 ecx, -1
  08242	74 20		 je	 SHORT $LN222@MenuProc
$LL223@MenuProc:

; 15126: 									do {
; 15127: 										nSelectPet++;

  08244	41		 inc	 ecx

; 15128: 										//CC_FIX 
; 15129: 										//20170807
; 15130: 										//ä¸è®ºæ¯ä¸æ¯éªå® ï¼é½æ¾ç¤ºå® è£
; 15131: 										//if (nSelectPet == pc.ridePetNo)
; 15132: 										//	nSelectPet++;
; 15133: 										if (nSelectPet >= MAX_PET)

  08245	33 d2		 xor	 edx, edx
  08247	8b c1		 mov	 eax, ecx
  08249	83 f8 05	 cmp	 eax, 5
  0824c	0f 4d ca	 cmovge	 ecx, edx

; 15134: 											nSelectPet = 0;
; 15135: 									} while (!pet[nSelectPet].useFlag);

  0824f	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  08255	66 39 90 76 00
	00 00		 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], dx
  0825c	74 e6		 je	 SHORT $LL223@MenuProc

; 15128: 										//CC_FIX 
; 15129: 										//20170807
; 15130: 										//ä¸è®ºæ¯ä¸æ¯éªå® ï¼é½æ¾ç¤ºå® è£
; 15131: 										//if (nSelectPet == pc.ridePetNo)
; 15132: 										//	nSelectPet++;
; 15133: 										if (nSelectPet >= MAX_PET)

  0825e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nSelectPet@@3HA, ecx
$LN222@MenuProc:

; 15136: 								}
; 15137: 							}
; 15138: 						}
; 15139: #endif
; 15140: 					}
; 15141: 
; 15142: 					if (HitDispNo == itemWndFontNo[2]) {

  08264	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  08269	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA+8
  0826f	0f 85 c4 00 00
	00		 jne	 $LN1112@MenuProc

; 15143: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  08275	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0827c	74 45		 je	 SHORT $LN1116@MenuProc

; 15144: 							if (itemWndDropGold > 0 && eventWarpSendFlag == FALSE) {

  0827e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?itemWndDropGold@@3HA, 0
  08285	7e 25		 jle	 SHORT $LN1115@MenuProc
  08287	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  0828f	75 1b		 jne	 SHORT $LN1115@MenuProc

; 15145: 								itemWndBtnFlag[2] = TRUE;
; 15146: 								play_se(217, 320, 240);

  08291	68 f0 00 00 00	 push	 240			; 000000f0H
  08296	68 40 01 00 00	 push	 320			; 00000140H
  0829b	c7 05 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+8, 1
  082a5	68 d9 00 00 00	 push	 217			; 000000d9H

; 15147: 							}

  082aa	eb 0f		 jmp	 SHORT $LN5118@MenuProc
$LN1115@MenuProc:

; 15148: 							else {
; 15149: 								play_se(220, 320, 240);

  082ac	68 f0 00 00 00	 push	 240			; 000000f0H
  082b1	68 40 01 00 00	 push	 320			; 00000140H
  082b6	68 dc 00 00 00	 push	 220			; 000000dcH
$LN5118@MenuProc:

; 15150: 							}
; 15151: 						}
; 15152: 						if (mouse.onceState & MOUSE_LEFT_CRICK_UP && itemWndBtnFlag[2] == TRUE) {

  082bb	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  082c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1116@MenuProc:
  082c3	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  082ca	74 77		 je	 SHORT $LN1113@MenuProc
  082cc	83 3d 08 00 00
	00 01		 cmp	 DWORD PTR ?itemWndBtnFlag@@3PAHA+8, 1
  082d3	75 6e		 jne	 SHORT $LN1113@MenuProc

; 15153: 							itemWndBtnFlag[2] = FALSE;
; 15154: 							play_se(212, 320, 240);

  082d5	68 f0 00 00 00	 push	 240			; 000000f0H
  082da	68 40 01 00 00	 push	 320			; 00000140H
  082df	68 d4 00 00 00	 push	 212			; 000000d4H
  082e4	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+8, 0
  082ee	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  082f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15155: 							if (bNewServer)

  082f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  082fd	ff 35 00 00 00
	00		 push	 DWORD PTR ?itemWndDropGold@@3HA
  08303	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  08309	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  0830f	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  08315	74 07		 je	 SHORT $LN1118@MenuProc

; 15156: 								lssproto_DG_send(sockfd, nowGx, nowGy, itemWndDropGold);

  08317	e8 00 00 00 00	 call	 ?lssproto_DG_send@@YAXHHHH@Z ; lssproto_DG_send
  0831c	eb 05		 jmp	 SHORT $LN5119@MenuProc
$LN1118@MenuProc:

; 15157: 							else
; 15158: 								old_lssproto_DG_send(sockfd, nowGx, nowGy, itemWndDropGold);

  0831e	e8 00 00 00 00	 call	 ?old_lssproto_DG_send@@YAXHHHH@Z ; old_lssproto_DG_send
$LN5119@MenuProc:

; 15159: 							itemWndDropGold = 0;

  08323	83 c4 10	 add	 esp, 16			; 00000010H
  08326	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, 0

; 15160: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 15161: 							Moneyflag = false;

  08330	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag

; 15162: #endif
; 15163: 
; 15164: 						}
; 15165: 					}

  08337	eb 0a		 jmp	 SHORT $LN1113@MenuProc
$LN1112@MenuProc:

; 15166: 					else
; 15167: 						itemWndBtnFlag[2] = FALSE;

  08339	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+8, 0
$LN1113@MenuProc:

; 15168: 
; 15169: 					if (HitDispNo == itemWndFontNo[3]) {

  08343	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  08348	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA+12
  0834e	0f 85 25 01 00
	00		 jne	 $LN1120@MenuProc

; 15170: 						if (mouse.onceState & MOUSE_LEFT_CRICK_UP && itemWndBtnFlag[3] == TRUE) {

  08354	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  0835b	74 1c		 je	 SHORT $LN1122@MenuProc
  0835d	83 3d 0c 00 00
	00 01		 cmp	 DWORD PTR ?itemWndBtnFlag@@3PAHA+12, 1
  08364	0f 85 a5 00 00
	00		 jne	 $LN4798@MenuProc

; 15171: 							itemWndBtnFlag[3] = FALSE;

  0836a	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+12, 0

; 15172: 						}
; 15173: 						if (itemWndBtnFlag[3] == TRUE) {

  08374	e9 96 00 00 00	 jmp	 $LN4798@MenuProc
$LN1122@MenuProc:
  08379	83 3d 0c 00 00
	00 01		 cmp	 DWORD PTR ?itemWndBtnFlag@@3PAHA+12, 1
  08380	0f 85 89 00 00
	00		 jne	 $LN4798@MenuProc

; 15174: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 15175: 							GetKeyInputFocus(&MyChatBuffer);

  08386	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0838b	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 15176: 							Moneyflag = false;
; 15177: #endif
; 15178: 							itemWndDropGold += itemWndDropGoldInc;
; 15179: 							itemWndDropGoldCnt++;

  08390	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemWndDropGoldCnt@@3HA
  08395	83 c4 04	 add	 esp, 4
  08398	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?itemWndDropGold@@3HA
  0839e	40		 inc	 eax
  0839f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?itemWndDropGoldInc@@3HA
  083a5	03 d1		 add	 edx, ecx
  083a7	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  083ae	89 15 00 00 00
	00		 mov	 DWORD PTR ?itemWndDropGold@@3HA, edx
  083b4	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldCnt@@3HA, eax
  083b9	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 15180: 							if (itemWndDropGoldCnt >= 30) {

  083bc	7c 2a		 jl	 SHORT $LN1127@MenuProc

; 15181: 								itemWndDropGoldCnt = 0;

  083be	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldCnt@@3HA, 0

; 15182: 								if (itemWndDropGoldInc == 0) itemWndDropGoldInc = 1;

  083c8	85 c9		 test	 ecx, ecx
  083ca	75 0c		 jne	 SHORT $LN1125@MenuProc
  083cc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldInc@@3HA, 1
  083d6	eb 10		 jmp	 SHORT $LN1127@MenuProc
$LN1125@MenuProc:

; 15183: 								else {
; 15184: 									itemWndDropGoldInc *= 5;

  083d8	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  083db	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H

; 15185: 									if (itemWndDropGoldInc > 10000) itemWndDropGoldInc = 10000;

  083e0	0f 4f c7	 cmovg	 eax, edi
  083e3	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldInc@@3HA, eax
$LN1127@MenuProc:

; 15186: 								}
; 15187: 							}
; 15188: 							if (itemWndDropGold >= pc.gold) {

  083e8	8b 0d 60 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+96
  083ee	3b d1		 cmp	 edx, ecx
  083f0	7c 1d		 jl	 SHORT $LN4798@MenuProc

; 15189: 								itemWndDropGold = pc.gold;
; 15190: 								play_se(220, 320, 240);

  083f2	68 f0 00 00 00	 push	 240			; 000000f0H
  083f7	68 40 01 00 00	 push	 320			; 00000140H
  083fc	68 dc 00 00 00	 push	 220			; 000000dcH
  08401	89 0d 00 00 00
	00		 mov	 DWORD PTR ?itemWndDropGold@@3HA, ecx
  08407	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0840c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4798@MenuProc:

; 15191: 							}
; 15192: 						}
; 15193: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0840f	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  08416	74 6b		 je	 SHORT $LN1121@MenuProc

; 15194: 							itemWndDropGold++;

  08418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemWndDropGold@@3HA
  0841d	8b 0d 60 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+96
  08423	40		 inc	 eax
  08424	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, eax

; 15195: 							if (itemWndDropGold >= pc.gold) {

  08429	68 f0 00 00 00	 push	 240			; 000000f0H
  0842e	68 40 01 00 00	 push	 320			; 00000140H
  08433	3b c1		 cmp	 eax, ecx
  08435	7c 15		 jl	 SHORT $LN1130@MenuProc

; 15196: 								itemWndDropGold = pc.gold;
; 15197: 								play_se(220, 320, 240);

  08437	68 dc 00 00 00	 push	 220			; 000000dcH
  0843c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?itemWndDropGold@@3HA, ecx
  08442	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  08447	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15198: 							}

  0844a	eb 37		 jmp	 SHORT $LN1121@MenuProc
$LN1130@MenuProc:

; 15199: 							else {
; 15200: 								itemWndDropGoldInc = 0;
; 15201: 								itemWndDropGoldCnt = 0;
; 15202: 								itemWndBtnFlag[3] = TRUE;
; 15203: 								play_se(217, 320, 240);

  0844c	68 d9 00 00 00	 push	 217			; 000000d9H
  08451	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldInc@@3HA, 0
  0845b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldCnt@@3HA, 0
  08465	c7 05 0c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+12, 1
  0846f	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  08474	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15204: 							}
; 15205: 						}
; 15206: 
; 15207: 					}

  08477	eb 0a		 jmp	 SHORT $LN1121@MenuProc
$LN1120@MenuProc:

; 15208: 					else
; 15209: 						itemWndBtnFlag[3] = FALSE;

  08479	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+12, 0
$LN1121@MenuProc:

; 15210: 
; 15211: 					if (HitDispNo == itemWndFontNo[4]) {

  08483	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  08488	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?itemWndFontNo@@3PAHA+16
  0848e	0f 85 21 01 00
	00		 jne	 $LN1132@MenuProc

; 15212: 						if (mouse.onceState & MOUSE_LEFT_CRICK_UP && itemWndBtnFlag[4] == TRUE) {

  08494	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  0849b	74 1c		 je	 SHORT $LN1134@MenuProc
  0849d	83 3d 10 00 00
	00 01		 cmp	 DWORD PTR ?itemWndBtnFlag@@3PAHA+16, 1
  084a4	0f 85 a3 00 00
	00		 jne	 $LN4799@MenuProc

; 15213: 							itemWndBtnFlag[4] = FALSE;

  084aa	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+16, 0

; 15214: 						}
; 15215: 						if (itemWndBtnFlag[4] == TRUE) {

  084b4	e9 94 00 00 00	 jmp	 $LN4799@MenuProc
$LN1134@MenuProc:
  084b9	83 3d 10 00 00
	00 01		 cmp	 DWORD PTR ?itemWndBtnFlag@@3PAHA+16, 1
  084c0	0f 85 87 00 00
	00		 jne	 $LN4799@MenuProc

; 15216: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 15217: 							GetKeyInputFocus(&MyChatBuffer);

  084c6	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  084cb	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 15218: 							Moneyflag = false;
; 15219: #endif
; 15220: 							itemWndDropGold -= itemWndDropGoldInc;
; 15221: 							itemWndDropGoldCnt++;

  084d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemWndDropGoldCnt@@3HA
  084d5	83 c4 04	 add	 esp, 4
  084d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?itemWndDropGold@@3HA
  084de	40		 inc	 eax
  084df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?itemWndDropGoldInc@@3HA
  084e5	2b ca		 sub	 ecx, edx
  084e7	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  084ee	89 0d 00 00 00
	00		 mov	 DWORD PTR ?itemWndDropGold@@3HA, ecx
  084f4	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldCnt@@3HA, eax
  084f9	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 15222: 							if (itemWndDropGoldCnt >= 30) {

  084fc	7c 2a		 jl	 SHORT $LN1139@MenuProc

; 15223: 								itemWndDropGoldCnt = 0;

  084fe	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldCnt@@3HA, 0

; 15224: 								if (itemWndDropGoldInc == 0) itemWndDropGoldInc = 1;

  08508	85 d2		 test	 edx, edx
  0850a	75 0c		 jne	 SHORT $LN1137@MenuProc
  0850c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldInc@@3HA, 1
  08516	eb 10		 jmp	 SHORT $LN1139@MenuProc
$LN1137@MenuProc:

; 15225: 								else {
; 15226: 									itemWndDropGoldInc *= 5;

  08518	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  0851b	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H

; 15227: 									if (itemWndDropGoldInc > 10000) itemWndDropGoldInc = 10000;

  08520	0f 4f c7	 cmovg	 eax, edi
  08523	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldInc@@3HA, eax
$LN1139@MenuProc:

; 15228: 								}
; 15229: 							}
; 15230: 							if (itemWndDropGold < 0) {

  08528	85 c9		 test	 ecx, ecx
  0852a	79 21		 jns	 SHORT $LN4799@MenuProc

; 15231: 								itemWndDropGold = 0;
; 15232: 								play_se(220, 320, 240);

  0852c	68 f0 00 00 00	 push	 240			; 000000f0H
  08531	68 40 01 00 00	 push	 320			; 00000140H
  08536	68 dc 00 00 00	 push	 220			; 000000dcH
  0853b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, 0
  08545	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0854a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4799@MenuProc:

; 15233: 							}
; 15234: 						}
; 15235: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0854d	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  08554	74 69		 je	 SHORT $LN1133@MenuProc

; 15236: 							itemWndDropGold--;

  08556	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemWndDropGold@@3HA
  0855b	48		 dec	 eax
  0855c	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, eax

; 15237: 							if (itemWndDropGold <= 0) {

  08561	68 f0 00 00 00	 push	 240			; 000000f0H
  08566	68 40 01 00 00	 push	 320			; 00000140H
  0856b	85 c0		 test	 eax, eax
  0856d	7f 19		 jg	 SHORT $LN1142@MenuProc

; 15238: 								itemWndDropGold = 0;
; 15239: 								play_se(220, 320, 240);

  0856f	68 dc 00 00 00	 push	 220			; 000000dcH
  08574	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGold@@3HA, 0
  0857e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  08583	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15240: 							}

  08586	eb 37		 jmp	 SHORT $LN1133@MenuProc
$LN1142@MenuProc:

; 15241: 							else {
; 15242: 								itemWndDropGoldInc = 0;
; 15243: 								itemWndDropGoldCnt = 0;
; 15244: 								itemWndBtnFlag[4] = TRUE;
; 15245: 								play_se(217, 320, 240);

  08588	68 d9 00 00 00	 push	 217			; 000000d9H
  0858d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldInc@@3HA, 0
  08597	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndDropGoldCnt@@3HA, 0
  085a1	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+16, 1
  085ab	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  085b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15246: 
; 15247: 							}
; 15248: 						}
; 15249: 					}

  085b3	eb 0a		 jmp	 SHORT $LN1133@MenuProc
$LN1132@MenuProc:

; 15250: 					else
; 15251: 						itemWndBtnFlag[4] = FALSE;

  085b5	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBtnFlag@@3PAHA+16, 0
$LN1133@MenuProc:

; 15252: 
; 15253: 					if (mouse.itemNo != -1)

  085bf	83 3d 48 00 00
	00 ff		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  085c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?itemWndMaxBag@@3HA ; itemWndMaxBag
  085cc	74 22		 je	 SHORT $LN4195@MenuProc

; 15254: 						for (i = 0; i < 3; i++)

  085ce	33 c9		 xor	 ecx, ecx
$LL226@MenuProc:

; 15255: 							if (HitDispNo == itemWndBtnBag[i])

  085d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  085d5	3b 04 8d 00 00
	00 00		 cmp	 eax, DWORD PTR ?itemWndBtnBag@@3PAHA[ecx*4]
  085dc	75 04		 jne	 SHORT $LN224@MenuProc

; 15256: 							{
; 15257: 								if (i <= itemWndMaxBag)

  085de	3b ca		 cmp	 ecx, edx
  085e0	7e 08		 jle	 SHORT $LN2307@MenuProc
$LN224@MenuProc:

; 15254: 						for (i = 0; i < 3; i++)

  085e2	41		 inc	 ecx
  085e3	83 f9 03	 cmp	 ecx, 3
  085e6	7c e8		 jl	 SHORT $LL226@MenuProc
  085e8	eb 06		 jmp	 SHORT $LN4195@MenuProc
$LN2307@MenuProc:

; 15258: 								{
; 15259: 									itemWndBagOffset = i;

  085ea	89 0d 00 00 00
	00		 mov	 DWORD PTR ?itemWndBagOffset@@3HA, ecx ; itemWndBagOffset
$LN4195@MenuProc:

; 15260: 									break;
; 15261: 								}
; 15262: 							}
; 15263: 
; 15264: 					for (i = 0; i < 3; i++)
; 15265: 						itemWndBtnBag[i] = -2;
; 15266: 
; 15267: 					if (pActMenuWnd2 != NULL) {

  085f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  085f6	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA, -2 ; fffffffeH
  08600	c7 05 04 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA+4, -2 ; fffffffeH
  0860a	c7 05 08 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA+8, -2 ; fffffffeH
  08614	85 c9		 test	 ecx, ecx
  08616	0f 84 ad 1f 00
	00		 je	 $LN1312@MenuProc

; 15268: 						x = pActMenuWnd2->x + 16;
; 15269: 						y = pActMenuWnd2->y + 351 + 7;

  0861c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0861f	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  08622	05 66 01 00 00	 add	 eax, 358		; 00000166H
  08627	83 c7 10	 add	 edi, 16			; 00000010H
  0862a	89 85 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], eax

; 15270: 						if (itemNo != -1) {

  08630	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemNo@@3HA
  08635	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  0863b	83 f8 ff	 cmp	 eax, -1
  0863e	74 36		 je	 SHORT $LN1148@MenuProc

; 15271: 							StockBoxDispBuffer(ItemBuffer[itemNo].defX - 24, ItemBuffer[itemNo].defY - 24,

  08640	c1 e0 05	 shl	 eax, 5
  08643	6a 00		 push	 0
  08645	68 fe 00 00 00	 push	 254			; 000000feH
  0864a	6a 6a		 push	 106			; 0000006aH
  0864c	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[eax+12]
  08652	8b 90 08 00 00
	00		 mov	 edx, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[eax+8]
  08658	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]
  0865b	50		 push	 eax
  0865c	8d 42 1a	 lea	 eax, DWORD PTR [edx+26]
  0865f	50		 push	 eax
  08660	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  08663	50		 push	 eax
  08664	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  08667	50		 push	 eax
  08668	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  0866d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?itemWndMaxBag@@3HA ; itemWndMaxBag
  08673	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1148@MenuProc:

; 15272: 								ItemBuffer[itemNo].defX + 26, ItemBuffer[itemNo].defY + 23,
; 15273: 								DISP_PRIO_IME4, SYSTEM_PAL_AQUA, 0);
; 15274: 						}
; 15275: 
; 15276: 						for (i = 0; i < 3; i++)

  08676	33 f6		 xor	 esi, esi
  08678	bf a0 00 00 00	 mov	 edi, 160		; 000000a0H
  0867d	0f 1f 00	 npad	 3
$LL232@MenuProc:

; 15277: 						{
; 15278: 							if (i == itemWndBagOffset)

  08680	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR ?itemWndBagOffset@@3HA ; itemWndBagOffset
  08686	75 1f		 jne	 SHORT $LN1149@MenuProc

; 15279: 								itemWndBtnBag[i] = StockDispBufferç»å¯¹ä½ç½®(492, 160 + i * 54, DISP_PRIO_IME4, 66715 + i, 2);

  08688	6a 02		 push	 2
  0868a	8d 86 9b 04 01
	00		 lea	 eax, DWORD PTR [esi+66715]
  08690	50		 push	 eax
  08691	6a 6a		 push	 106			; 0000006aH
  08693	57		 push	 edi
  08694	68 ec 01 00 00	 push	 492			; 000001ecH
  08699	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  0869e	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA[esi*4], eax
  086a5	eb 39		 jmp	 SHORT $LN5120@MenuProc
$LN1149@MenuProc:

; 15280: 							else if (i <= itemWndMaxBag)

  086a7	3b f2		 cmp	 esi, edx
  086a9	7f 1f		 jg	 SHORT $LN1151@MenuProc

; 15281: 								itemWndBtnBag[i] = StockDispBufferç»å¯¹ä½ç½®(499, 160 + i * 54, DISP_PRIO_IME4, 55110 + i, 2);

  086ab	6a 02		 push	 2
  086ad	8d 86 46 d7 00
	00		 lea	 eax, DWORD PTR [esi+55110]
  086b3	50		 push	 eax
  086b4	6a 6a		 push	 106			; 0000006aH
  086b6	57		 push	 edi
  086b7	68 f3 01 00 00	 push	 499			; 000001f3H
  086bc	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
  086c1	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA[esi*4], eax
  086c8	eb 16		 jmp	 SHORT $LN5120@MenuProc
$LN1151@MenuProc:

; 15282: 							else
; 15283: 								StockDispBufferç»å¯¹ä½ç½®(499, 160 + i * 54, DISP_PRIO_IME4, 55107 + i, TRUE);

  086ca	6a 01		 push	 1
  086cc	8d 86 43 d7 00
	00		 lea	 eax, DWORD PTR [esi+55107]
  086d2	50		 push	 eax
  086d3	6a 6a		 push	 106			; 0000006aH
  086d5	57		 push	 edi
  086d6	68 f3 01 00 00	 push	 499			; 000001f3H
  086db	e8 00 00 00 00	 call	 ?StockDispBuffer??êÈöÇ@@YAHHHEHH@Z ; StockDispBuffer??êÈöÇ
$LN5120@MenuProc:

; 15272: 								ItemBuffer[itemNo].defX + 26, ItemBuffer[itemNo].defY + 23,
; 15273: 								DISP_PRIO_IME4, SYSTEM_PAL_AQUA, 0);
; 15274: 						}
; 15275: 
; 15276: 						for (i = 0; i < 3; i++)

  086e0	46		 inc	 esi
  086e1	83 c4 14	 add	 esp, 20			; 00000014H
  086e4	83 c7 36	 add	 edi, 54			; 00000036H
  086e7	83 fe 03	 cmp	 esi, 3
  086ea	7d 08		 jge	 SHORT $LN5025@MenuProc
  086ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?itemWndMaxBag@@3HA ; itemWndMaxBag
  086f2	eb 8c		 jmp	 SHORT $LL232@MenuProc
$LN5025@MenuProc:

; 15284: 						}
; 15285: 						int _Start = MAX_ITEMSTART + itemWndBagOffset * MAX_MAXHAVEITEM;

  086f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?itemWndBagOffset@@3HA ; itemWndBagOffset

; 15286: 
; 15287: 						for (i = MAX_ITEM - 1; i >= 0; i--) {

  086fa	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  086ff	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  08705	c1 e2 04	 shl	 edx, 4
  08708	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR ?itemWndBagOffset@@3HA ; itemWndBagOffset
  0870e	83 c2 09	 add	 edx, 9
  08711	89 8d e8 b9 ff
	ff		 mov	 DWORD PTR _i$20$[ebp], ecx
  08717	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR __Start$1$[ebp], edx
  0871d	0f 1f 00	 npad	 3
$LL235@MenuProc:

; 15288: 							if (!(_Start <= i && i < _Start + MAX_MAXHAVEITEM 

  08720	3b d1		 cmp	 edx, ecx
  08722	7f 07		 jg	 SHORT $LN1154@MenuProc
  08724	8d 42 0f	 lea	 eax, DWORD PTR [edx+15]
  08727	3b c8		 cmp	 ecx, eax
  08729	7c 09		 jl	 SHORT $LN1153@MenuProc
$LN1154@MenuProc:
  0872b	83 f9 08	 cmp	 ecx, 8
  0872e	0f 87 6c 19 00
	00		 ja	 $LN233@MenuProc
$LN1153@MenuProc:

; 15289: 										|| 0 <= i && i < MAX_ITEMSTART)) continue;
; 15290: 
; 15291: #ifdef _PET_ITEM
; 15292: 							// å½æ¾ç¤ºå® ç©éå·æ æ¶,å® ç©èº«ä¸çè£å¤åªæ¾ç¤ºä¸ä¸ª,å¤çå°±è·³è¿ä¸å¤ç
; 15293: 							if (g_bPetItemWndFlag && (i >= PET_EQUIPNUM && i < MAX_ITEMSTART))

  08734	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  0873b	74 0e		 je	 SHORT $LN1156@MenuProc
  0873d	83 f9 07	 cmp	 ecx, 7
  08740	7c 09		 jl	 SHORT $LN1156@MenuProc
  08742	83 f9 09	 cmp	 ecx, 9
  08745	0f 8c 55 19 00
	00		 jl	 $LN233@MenuProc
$LN1156@MenuProc:

; 15294: 								continue;
; 15295: #endif
; 15296: 
; 15297: 							if (!g_bPetItemWndFlag && i >= CHAR_EQUIPPLACENUM  && i < MAX_ITEMSTART) { // ìì´í ì¥ë¹ì¹¸
; 15298: 								continue;
; 15299: 							}
; 15300: 
; 15301: #ifdef _NB_æ°éå·æ çé¢
; 15302: 							if (MakeHitBox(ItemBuffer[i].defX - 24, ItemBuffer[i].defY - 24,
; 15303: 								ItemBuffer[i].defX + 26, ItemBuffer[i].defY + 23, DISP_PRIO_IME3) == TRUE) {

  0874b	8b f1		 mov	 esi, ecx
  0874d	c1 e6 05	 shl	 esi, 5
  08750	6a 69		 push	 105			; 00000069H
  08752	89 b5 e0 b9 ff
	ff		 mov	 DWORD PTR tv38459[ebp], esi
  08758	8b 8e 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  0875e	8b 96 08 00 00
	00		 mov	 edx, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  08764	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]
  08767	50		 push	 eax
  08768	8d 42 1a	 lea	 eax, DWORD PTR [edx+26]
  0876b	50		 push	 eax
  0876c	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0876f	50		 push	 eax
  08770	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  08773	50		 push	 eax
  08774	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  08779	83 c4 14	 add	 esp, 20			; 00000014H
  0877c	83 f8 01	 cmp	 eax, 1
  0877f	0f 85 73 16 00
	00		 jne	 $LN4811@MenuProc

; 15304: #else
; 15305: 							if (MakeHitBox(ItemBuffer[i].defX - 24, ItemBuffer[i].defY - 24,
; 15306: 								ItemBuffer[i].defX + 26, ItemBuffer[i].defY + 23, DISP_PRIO_IME3) == TRUE) {
; 15307: #endif
; 15308: #ifdef _PET_ITEM
; 15309: 								// å¤çæ¾ç¤ºå® ç©è£å¤[íí¸ì¥ë¹ìë¦¬ íììëê¸°ë¥]
; 15310: 								if (g_bPetItemWndFlag && (i >= PET_HEAD && i < PET_EQUIPNUM) && nSelectPet > -1) {

  08785	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  0878c	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
  08792	0f 84 60 0a 00
	00		 je	 $LN1159@MenuProc
  08798	83 f9 06	 cmp	 ecx, 6
  0879b	0f 87 57 0a 00
	00		 ja	 $LN1159@MenuProc
  087a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectPet@@3HA
  087a6	83 f8 ff	 cmp	 eax, -1
  087a9	0f 8e 49 0a 00
	00		 jle	 $LN1159@MenuProc

; 15311: 									if (pet[nSelectPet].item[i].useFlag == TRUE && (ItemBuffer[i].mixFlag <= 2 || ItemBuffer[i].mixFlag == 10)) {

  087af	69 d1 7c 01 00
	00		 imul	 edx, ecx, 380
  087b5	69 c0 78 0b 00
	00		 imul	 eax, eax, 2936
  087bb	89 95 0c ba ff
	ff		 mov	 DWORD PTR tv38811[ebp], edx
  087c1	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv36649[ebp], eax
  087c7	66 83 bc 10 58
	01 00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+edx+344], 1
  087d0	0f 85 16 0c 00
	00		 jne	 $LN241@MenuProc
  087d6	8b 86 1c 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28]
  087dc	83 f8 02	 cmp	 eax, 2
  087df	7e 09		 jle	 SHORT $LN1162@MenuProc
  087e1	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  087e4	0f 85 02 0c 00
	00		 jne	 $LN241@MenuProc
$LN1162@MenuProc:

; 15312: 										char *splitPoint = pet[nSelectPet].item[i].memo;

  087ea	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR tv36649[ebp]

; 15313: 										char damage_msg[256];
; 15314: 										int color = pet[nSelectPet].item[i].color;
; 15315: #ifdef _NB_éå·æ è¯¦æ
; 15316: 										char éå·ç±»åè¯´æ[][56] = { "çª","æ§å¤´","æ£æ£","æª","å¼","ç¾ç","å¤´ç/å¸½å­","è¡£æ/é ç²","æç¯","ä¹å¨","é¡¹é¾",

  087f0	6a 35		 push	 53			; 00000035H
  087f2	6a 00		 push	 0
  087f4	8b 84 11 7c 00
	00 00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+edx+124]
  087fb	89 85 ec b9 ff
	ff		 mov	 DWORD PTR _color$1$[ebp], eax
  08801	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02DEECJACC@?p?P@
  08808	66 89 85 90 f6
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp], ax
  0880f	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02DEECJACC@?p?P@+2
  08816	88 85 92 f6 ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+2], al
  0881c	8d 85 93 f6 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+3]
  08822	50		 push	 eax
  08823	e8 00 00 00 00	 call	 _memset
  08828	6a 34		 push	 52			; 00000034H
  0882a	8d 85 cc f6 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+60]
  08830	c7 85 c8 f6 ff
	ff dd a8 3f 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+56], 4171997 ; 003fa8ddH
  0883a	6a 00		 push	 0
  0883c	50		 push	 eax
  0883d	e8 00 00 00 00	 call	 _memset
  08842	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04HECMHKAJ@?M?b?$NM?j@
  08847	89 85 00 f7 ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+112], eax
  0884d	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_04HECMHKAJ@?M?b?$NM?j@+4
  08854	6a 33		 push	 51			; 00000033H
  08856	88 85 04 f7 ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+116], al
  0885c	8d 85 05 f7 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+117]
  08862	6a 00		 push	 0
  08864	50		 push	 eax
  08865	e8 00 00 00 00	 call	 _memset
  0886a	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  0886f	6a 36		 push	 54			; 00000036H
  08871	66 89 85 38 f7
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+168], ax
  08878	8d 85 3a f7 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+170]
  0887e	6a 00		 push	 0
  08880	50		 push	 eax
  08881	e8 00 00 00 00	 call	 _memset
  08886	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02NNCIDFDN@?O?a@
  0888d	66 89 85 70 f7
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+224], ax
  08894	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02NNCIDFDN@?O?a@+2
  0889b	6a 35		 push	 53			; 00000035H
  0889d	88 85 72 f7 ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+226], al
  088a3	8d 85 73 f7 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+227]
  088a9	6a 00		 push	 0
  088ab	50		 push	 eax
  088ac	e8 00 00 00 00	 call	 _memset
  088b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04CECPHKEL@?b?j?x?$KL@
  088b6	89 85 a8 f7 ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+280], eax
  088bc	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_04CECPHKEL@?b?j?x?$KL@+4
  088c3	6a 33		 push	 51			; 00000033H
  088c5	88 85 ac f7 ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+284], al
  088cb	8d 85 ad f7 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+285]
  088d1	6a 00		 push	 0
  088d3	50		 push	 eax
  088d4	e8 00 00 00 00	 call	 _memset
  088d9	83 c4 48	 add	 esp, 72			; 00000048H
  088dc	c7 85 e0 f7 ff
	ff 3f 3f 2f d9	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+336], -651215041 ; d92f3f3fH
  088e6	8d 85 e8 f7 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+344]
  088ec	c7 85 e4 f7 ff
	ff b6 ed ad 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+340], 11398582 ; 00adedb6H
  088f6	6a 30		 push	 48			; 00000030H
  088f8	6a 00		 push	 0
  088fa	50		 push	 eax
  088fb	e8 00 00 00 00	 call	 _memset
  08900	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_08FFKKHGPD@?k?$PN?$NM?W?1?$DP?K?$KD@+8
  08907	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_08FFKKHGPD@?k?$PN?$NM?W?1?$DP?K?$KD@
  0890f	6a 2f		 push	 47			; 0000002fH
  08911	88 85 20 f8 ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+400], al
  08917	8d 85 21 f8 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+401]
  0891d	6a 00		 push	 0
  0891f	50		 push	 eax
  08920	66 0f d6 85 18
	f8 ff ff	 movq	 QWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+392], xmm0
  08928	e8 00 00 00 00	 call	 _memset
  0892d	6a 34		 push	 52			; 00000034H
  0892f	8d 85 54 f8 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+452]
  08935	c7 85 50 f8 ff
	ff e2 a2 3f 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+448], 4170466 ; 003fa2e2H
  0893f	6a 00		 push	 0
  08941	50		 push	 eax
  08942	e8 00 00 00 00	 call	 _memset
  08947	6a 34		 push	 52			; 00000034H
  08949	8d 85 8c f8 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+508]
  0894f	c7 85 88 f8 ff
	ff 3f d0 ef 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+504], 15716415 ; 00efd03fH
  08959	6a 00		 push	 0
  0895b	50		 push	 eax
  0895c	e8 00 00 00 00	 call	 _memset
  08961	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02HHFHKOHM@?$DP?$DP@
  08968	66 89 85 c0 f8
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+560], ax
  0896f	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02HHFHKOHM@?$DP?$DP@+2
  08976	6a 35		 push	 53			; 00000035H
  08978	88 85 c2 f8 ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+562], al
  0897e	8d 85 c3 f8 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+563]
  08984	6a 00		 push	 0
  08986	50		 push	 eax
  08987	e8 00 00 00 00	 call	 _memset
  0898c	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04BEMIHOKC@?Z?$LB?r?$LB@+4
  08991	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ??_C@_04BEMIHOKC@?Z?$LB?r?$LB@
  08997	6a 33		 push	 51			; 00000033H
  08999	88 85 fc f8 ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+620], al
  0899f	8d 85 fd f8 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+621]
  089a5	6a 00		 push	 0
  089a7	50		 push	 eax
  089a8	89 b5 f8 f8 ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+616], esi
  089ae	e8 00 00 00 00	 call	 _memset
  089b3	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04BEMIHOKC@?Z?$LB?r?$LB@+4
  089b8	83 c4 48	 add	 esp, 72			; 00000048H
  089bb	88 85 34 f9 ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+676], al
  089c1	8d 85 35 f9 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+677]
  089c7	89 b5 30 f9 ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+672], esi
  089cd	6a 33		 push	 51			; 00000033H
  089cf	6a 00		 push	 0
  089d1	50		 push	 eax
  089d2	e8 00 00 00 00	 call	 _memset
  089d7	6a 34		 push	 52			; 00000034H
  089d9	8d 85 6c f9 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+732]
  089df	c7 85 68 f9 ff
	ff ec bc 3f 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+728], 4177132 ; 003fbcecH
  089e9	6a 00		 push	 0
  089eb	50		 push	 eax
  089ec	e8 00 00 00 00	 call	 _memset
  089f1	6a 34		 push	 52			; 00000034H
  089f3	8d 85 a4 f9 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+788]
  089f9	c7 85 a0 f9 ff
	ff de ac 3f 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+784], 4173022 ; 003facdeH
  08a03	6a 00		 push	 0
  08a05	50		 push	 eax
  08a06	e8 00 00 00 00	 call	 _memset
  08a0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05MHFFLKOE@?$DP?c?s?$NN?$KM@
  08a10	89 85 d8 f9 ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+840], eax
  08a16	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05MHFFLKOE@?$DP?c?s?$NN?$KM@+4
  08a1d	6a 32		 push	 50			; 00000032H
  08a1f	66 89 85 dc f9
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+844], ax
  08a26	8d 85 de f9 ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+846]
  08a2c	6a 00		 push	 0
  08a2e	50		 push	 eax
  08a2f	e8 00 00 00 00	 call	 _memset
  08a34	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_08JLPLGDIB@?$NM?E?w?W?Z?$KK?y?$KB@+8
  08a3b	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_08JLPLGDIB@?$NM?E?w?W?Z?$KK?y?$KB@
  08a43	6a 2f		 push	 47			; 0000002fH
  08a45	88 85 18 fa ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+904], al
  08a4b	8d 85 19 fa ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+905]
  08a51	6a 00		 push	 0
  08a53	50		 push	 eax
  08a54	66 0f d6 85 10
	fa ff ff	 movq	 QWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+896], xmm0
  08a5c	e8 00 00 00 00	 call	 _memset
  08a61	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05EGENBHF@?$PM?$NO?$OA?A?$DP@
  08a66	89 85 48 fa ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+952], eax
  08a6c	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05EGENBHF@?$PM?$NO?$OA?A?$DP@+4
  08a73	6a 32		 push	 50			; 00000032H
  08a75	66 89 85 4c fa
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+956], ax
  08a7c	8d 85 4e fa ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+958]
  08a82	6a 00		 push	 0
  08a84	50		 push	 eax
  08a85	e8 00 00 00 00	 call	 _memset
  08a8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06GGKIIEAG@?w?a?$DP?$NN?$KI?$DP@
  08a8f	83 c4 48	 add	 esp, 72			; 00000048H
  08a92	89 85 80 fa ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1008], eax
  08a98	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_06GGKIIEAG@?w?a?$DP?$NN?$KI?$DP@+4
  08a9f	66 89 85 84 fa
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1012], ax
  08aa6	0f b6 05 06 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_06GGKIIEAG@?w?a?$DP?$NN?$KI?$DP@+6
  08aad	6a 31		 push	 49			; 00000031H
  08aaf	88 85 86 fa ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+1014], al
  08ab5	8d 85 87 fa ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1015]
  08abb	6a 00		 push	 0
  08abd	50		 push	 eax
  08abe	e8 00 00 00 00	 call	 _memset
  08ac3	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05NCBNMKHJ@?w?a?$DP?$OA?$LE@
  08ac8	89 85 b8 fa ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1064], eax
  08ace	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05NCBNMKHJ@?w?a?$DP?$OA?$LE@+4
  08ad5	6a 32		 push	 50			; 00000032H
  08ad7	66 89 85 bc fa
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1068], ax
  08ade	8d 85 be fa ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1070]
  08ae4	6a 00		 push	 0
  08ae6	50		 push	 eax
  08ae7	e8 00 00 00 00	 call	 _memset
  08aec	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_08PPBNCICL@?l?i?Z?u?Z?$KK?y?$KB@+8
  08af3	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_08PPBNCICL@?l?i?Z?u?Z?$KK?y?$KB@
  08afb	6a 2f		 push	 47			; 0000002fH
  08afd	88 85 f8 fa ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+1128], al
  08b03	8d 85 f9 fa ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1129]
  08b09	6a 00		 push	 0
  08b0b	50		 push	 eax
  08b0c	66 0f d6 85 f0
	fa ff ff	 movq	 QWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1120], xmm0
  08b14	e8 00 00 00 00	 call	 _memset
  08b19	6a 34		 push	 52			; 00000034H
  08b1b	8d 85 2c fb ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1180]
  08b21	c7 85 28 fb ff
	ff d1 d1 3f 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1176], 4182481 ; 003fd1d1H
  08b2b	6a 00		 push	 0
  08b2d	50		 push	 eax
  08b2e	e8 00 00 00 00	 call	 _memset
  08b33	6a 34		 push	 52			; 00000034H
  08b35	8d 85 64 fb ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1236]
  08b3b	c7 85 60 fb ff
	ff 3f e0 b4 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1232], 11853887 ; 00b4e03fH
  08b45	6a 00		 push	 0
  08b47	50		 push	 eax
  08b48	e8 00 00 00 00	 call	 _memset
  08b4d	6a 34		 push	 52			; 00000034H
  08b4f	8d 85 9c fb ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1292]
  08b55	c7 85 98 fb ff
	ff 3f da aa 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1288], 11196991 ; 00aada3fH
  08b5f	6a 00		 push	 0
  08b61	50		 push	 eax
  08b62	e8 00 00 00 00	 call	 _memset
  08b67	83 c4 48	 add	 esp, 72			; 00000048H
  08b6a	c7 85 d0 fb ff
	ff e9 a6 3f 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1344], 4171497 ; 003fa6e9H
  08b74	8d 85 d4 fb ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1348]
  08b7a	6a 34		 push	 52			; 00000034H
  08b7c	6a 00		 push	 0
  08b7e	50		 push	 eax
  08b7f	e8 00 00 00 00	 call	 _memset
  08b84	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_02OEJDJEF@?b?j@
  08b8b	66 89 85 08 fc
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1400], ax
  08b92	0f b6 05 02 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_02OEJDJEF@?b?j@+2
  08b99	6a 35		 push	 53			; 00000035H
  08b9b	88 85 0a fc ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+1402], al
  08ba1	8d 85 0b fc ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1403]
  08ba7	6a 00		 push	 0
  08ba9	50		 push	 eax
  08baa	e8 00 00 00 00	 call	 _memset
  08baf	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@
  08bb4	89 85 40 fc ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1456], eax
  08bba	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_04NMNAOJOJ@?$PL?$LJ?m?$KN@+4
  08bc1	6a 33		 push	 51			; 00000033H
  08bc3	88 85 44 fc ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+1460], al
  08bc9	8d 85 45 fc ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1461]
  08bcf	6a 00		 push	 0
  08bd1	50		 push	 eax
  08bd2	e8 00 00 00 00	 call	 _memset
  08bd7	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04DKIAPBFG@?b?$KC?w?$NP@
  08bdc	89 85 78 fc ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1512], eax
  08be2	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_04DKIAPBFG@?b?$KC?w?$NP@+4
  08be9	6a 33		 push	 51			; 00000033H
  08beb	88 85 7c fc ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+1516], al
  08bf1	8d 85 7d fc ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1517]
  08bf7	6a 00		 push	 0
  08bf9	50		 push	 eax
  08bfa	e8 00 00 00 00	 call	 _memset
  08bff	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04BEMIHOKC@?Z?$LB?r?$LB@+4
  08c04	6a 33		 push	 51			; 00000033H
  08c06	88 85 b4 fc ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+1572], al
  08c0c	8d 85 b5 fc ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1573]
  08c12	6a 00		 push	 0
  08c14	50		 push	 eax
  08c15	89 b5 b0 fc ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1568], esi
  08c1b	e8 00 00 00 00	 call	 _memset
  08c20	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04BEMIHOKC@?Z?$LB?r?$LB@+4
  08c25	6a 33		 push	 51			; 00000033H
  08c27	88 85 ec fc ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+1628], al
  08c2d	8d 85 ed fc ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1629]
  08c33	89 b5 e8 fc ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1624], esi
  08c39	6a 00		 push	 0
  08c3b	50		 push	 eax
  08c3c	e8 00 00 00 00	 call	 _memset
  08c41	83 c4 48	 add	 esp, 72			; 00000048H
  08c44	c7 85 20 fd ff
	ff 3f d1 d1 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1680], 13750591 ; 00d1d13fH
  08c4e	8d 85 24 fd ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1684]
  08c54	6a 34		 push	 52			; 00000034H
  08c56	6a 00		 push	 0
  08c58	50		 push	 eax
  08c59	e8 00 00 00 00	 call	 _memset
  08c5e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06KLOJBJDG@?$DP?Z?$KK?$DP?w?$NP@
  08c63	89 85 58 fd ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1736], eax
  08c69	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_06KLOJBJDG@?$DP?Z?$KK?$DP?w?$NP@+4
  08c70	66 89 85 5c fd
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1740], ax
  08c77	0f b6 05 06 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_06KLOJBJDG@?$DP?Z?$KK?$DP?w?$NP@+6
  08c7e	6a 31		 push	 49			; 00000031H
  08c80	88 85 5e fd ff
	ff		 mov	 BYTE PTR _Ô³Îý?úþ?Ù¥$57[ebp+1742], al
  08c86	8d 85 5f fd ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1743]
  08c8c	6a 00		 push	 0
  08c8e	50		 push	 eax
  08c8f	e8 00 00 00 00	 call	 _memset
  08c94	6a 30		 push	 48			; 00000030H
  08c96	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1800]
  08c9c	c7 85 90 fd ff
	ff 3f da aa e4	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1792], -458565057 ; e4aada3fH
  08ca6	6a 00		 push	 0
  08ca8	50		 push	 eax
  08ca9	c7 85 94 fd ff
	ff b3 f7 df 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1796], 14677939 ; 00dff7b3H
  08cb3	e8 00 00 00 00	 call	 _memset
  08cb8	6a 30		 push	 48			; 00000030H
  08cba	8d 85 d0 fd ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1856]
  08cc0	c7 85 c8 fd ff
	ff 3f da aa f0	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1848], -257238465 ; f0aada3fH
  08cca	6a 00		 push	 0
  08ccc	50		 push	 eax
  08ccd	c7 85 cc fd ff
	ff d0 f7 df 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1852], 14677968 ; 00dff7d0H
  08cd7	e8 00 00 00 00	 call	 _memset
  08cdc	6a 30		 push	 48			; 00000030H
  08cde	8d 85 08 fe ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1912]
  08ce4	c7 85 00 fe ff
	ff 3f da aa fd	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1904], -39134657 ; fdaada3fH
  08cee	6a 00		 push	 0
  08cf0	50		 push	 eax
  08cf1	c7 85 04 fe ff
	ff d8 cb a3 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1908], 10734552 ; 00a3cbd8H
  08cfb	e8 00 00 00 00	 call	 _memset
  08d00	6a 30		 push	 48			; 00000030H
  08d02	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1968]
  08d08	c7 85 38 fe ff
	ff 3f da aa db	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1960], -609560001 ; dbaada3fH
  08d12	6a 00		 push	 0
  08d14	50		 push	 eax
  08d15	c7 85 3c fe ff
	ff ce cb a3 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+1964], 10734542 ; 00a3cbceH
  08d1f	e8 00 00 00 00	 call	 _memset
  08d24	83 c4 48	 add	 esp, 72			; 00000048H
  08d27	c7 85 70 fe ff
	ff 3f da aa e3	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+2016], -475342273 ; e3aada3fH
  08d31	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+2024]
  08d37	c7 85 74 fe ff
	ff c7 db b9 00	 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+2020], 12180423 ; 00b9dbc7H
  08d41	6a 30		 push	 48			; 00000030H
  08d43	6a 00		 push	 0
  08d45	50		 push	 eax
  08d46	e8 00 00 00 00	 call	 _memset
  08d4b	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05HADHEFCA@?$DP?Z?$KK?J?E@
  08d50	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+2072], eax
  08d56	0f b7 05 04 00
	00 00		 movzx	 eax, WORD PTR ??_C@_05HADHEFCA@?$DP?Z?$KK?J?E@+4
  08d5d	6a 32		 push	 50			; 00000032H
  08d5f	66 89 85 ac fe
	ff ff		 mov	 WORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+2076], ax
  08d66	8d 85 ae fe ff
	ff		 lea	 eax, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp+2078]
  08d6c	6a 00		 push	 0
  08d6e	50		 push	 eax
  08d6f	e8 00 00 00 00	 call	 _memset

; 15317: 											"æªç¥","æªç¥","è³ç¯","é¼»ç¯","æ¤èº«ç¬¦","æ®éç©å","åææ ","ææ·æ§å¤´","ææ·ç³",
; 15318: 											"ä¸è¬ç©å","éå±","å®ç³","è´§ç©","è°å¸¦","ç¾","éå­","æå¥","æªç¥","æªç¥","ç¼é",
; 15319: 											"å® ç©å¤´å¥","å® ç©çå¥","å® ç©çªå¥","å® ç©è¸ç²","å® ç©èç²","å® ç©ç¿è","å® ç©è"
; 15320: 										};
; 15321: 										char è¯¦æä¸´æ¶ææ¬[256];
; 15322: 										StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 250, FONT_PRIO_FRONT, color, pet[nSelectPet].item[i].name, 0);

  08d74	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv36649[ebp]
  08d7a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  08d80	8b b5 0c ba ff
	ff		 mov	 esi, DWORD PTR tv38811[ebp]
  08d86	6a 00		 push	 0
  08d88	8d 80 62 01 00
	00		 lea	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+354]
  08d8e	03 c6		 add	 eax, esi
  08d90	50		 push	 eax
  08d91	ff b5 ec b9 ff
	ff		 push	 DWORD PTR _color$1$[ebp]
  08d97	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  08d9a	05 fa 00 00 00	 add	 eax, 250		; 000000faH
  08d9f	6a 01		 push	 1
  08da1	50		 push	 eax
  08da2	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  08da5	2d aa 00 00 00	 sub	 eax, 170		; 000000aaH
  08daa	50		 push	 eax
  08dab	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15323: 										sprintf(è¯¦æä¸´æ¶ææ¬, "è ä¹ åº¦ï¼%s", pet[nSelectPet].item[i].damage);

  08db0	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  08dba	8d 80 e5 01 00
	00		 lea	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+485]
  08dc0	03 c6		 add	 eax, esi
  08dc2	50		 push	 eax
  08dc3	8d 85 50 f3 ff
	ff		 lea	 eax, DWORD PTR _?ï×??ÙþÜâ$47[ebp]
  08dc9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OJIDMKKD@?R?$LB?5?N?y?5?S?x?$KD?$LK?$CFs@
  08dce	50		 push	 eax
  08dcf	e8 00 00 00 00	 call	 _sprintf

; 15324: 										StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 270, FONT_PRIO_FRONT, 0, è¯¦æä¸´æ¶ææ¬, 0);

  08dd4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  08dda	8d 85 50 f3 ff
	ff		 lea	 eax, DWORD PTR _?ï×??ÙþÜâ$47[ebp]
  08de0	6a 00		 push	 0
  08de2	50		 push	 eax
  08de3	6a 00		 push	 0
  08de5	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  08de8	05 0e 01 00 00	 add	 eax, 270		; 0000010eH
  08ded	6a 01		 push	 1
  08def	50		 push	 eax
  08df0	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  08df3	2d aa 00 00 00	 sub	 eax, 170		; 000000aaH
  08df8	50		 push	 eax
  08df9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15325: #ifdef _NB_ç®¡çæ¨¡å¼
; 15326: 										sprintf(è¯¦æä¸´æ¶ææ¬, "éå·ç±»åï¼%s(%d)", éå·ç±»åè¯´æ[pet[nSelectPet].item[i].type], pet[nSelectPet].item[i].type);

  08dfe	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  08e08	83 c4 54	 add	 esp, 84			; 00000054H
  08e0b	0f be 8c 30 f5
	01 00 00	 movsx	 ecx, BYTE PTR ?pet@@3PAUPET@@A[eax+esi+501]
  08e13	51		 push	 ecx
  08e14	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  08e1b	2b c1		 sub	 eax, ecx
  08e1d	8d 8d 90 f6 ff
	ff		 lea	 ecx, DWORD PTR _Ô³Îý?úþ?Ù¥$57[ebp]
  08e23	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  08e26	50		 push	 eax
  08e27	8d 85 50 f3 ff
	ff		 lea	 eax, DWORD PTR _?ï×??ÙþÜâ$47[ebp]
  08e2d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HANCGCKL@?T?$LD?N?$PN?$DP?z?$PO?$KD?$LK?$CFs?$CI?$CFd?$CJ@
  08e32	50		 push	 eax
  08e33	e8 00 00 00 00	 call	 _sprintf

; 15327: #else
; 15328: 										sprintf(è¯¦æä¸´æ¶ææ¬, "éå·ç±»åï¼%s", éå·ç±»åè¯´æ[pet[nSelectPet].item[i].type]);
; 15329: #endif
; 15330: 										StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 290, FONT_PRIO_FRONT, 0, è¯¦æä¸´æ¶ææ¬, 0);

  08e38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  08e3e	8d 85 50 f3 ff
	ff		 lea	 eax, DWORD PTR _?ï×??ÙþÜâ$47[ebp]
  08e44	6a 00		 push	 0
  08e46	50		 push	 eax
  08e47	6a 00		 push	 0
  08e49	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  08e4c	05 22 01 00 00	 add	 eax, 290		; 00000122H
  08e51	6a 01		 push	 1
  08e53	50		 push	 eax
  08e54	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  08e57	2d aa 00 00 00	 sub	 eax, 170		; 000000aaH
  08e5c	50		 push	 eax
  08e5d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15331: 
; 15332: 										sprintf(è¯¦æä¸´æ¶ææ¬, "ä½¿ç¨ç­çº§ï¼%d", pet[nSelectPet].item[i].level);

  08e62	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  08e6c	ff b4 30 84 00
	00 00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+esi+132]
  08e73	8d 85 50 f3 ff
	ff		 lea	 eax, DWORD PTR _?ï×??ÙþÜâ$47[ebp]
  08e79	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PEOHJCFP@?$NO?E?i?D?T?u?$DP?$KD?$LK?$CFd@
  08e7e	50		 push	 eax
  08e7f	e8 00 00 00 00	 call	 _sprintf

; 15333: 										StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 310, FONT_PRIO_FRONT, color, è¯¦æä¸´æ¶ææ¬, 0);

  08e84	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  08e8a	8d 85 50 f3 ff
	ff		 lea	 eax, DWORD PTR _?ï×??ÙþÜâ$47[ebp]
  08e90	6a 00		 push	 0
  08e92	50		 push	 eax
  08e93	ff b5 ec b9 ff
	ff		 push	 DWORD PTR _color$1$[ebp]
  08e99	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  08e9c	05 36 01 00 00	 add	 eax, 310		; 00000136H
  08ea1	6a 01		 push	 1
  08ea3	50		 push	 eax
  08ea4	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  08ea7	2d aa 00 00 00	 sub	 eax, 170		; 000000aaH
  08eac	50		 push	 eax
  08ead	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15334: 
; 15335: 										int åå²ä¸´æ¶è¡æ° = 0;
; 15336: 										while (1) {
; 15337: 											if (strlen(splitPoint) > 18) {

  08eb2	8b c6		 mov	 eax, esi
  08eb4	33 d2		 xor	 edx, edx
  08eb6	83 c4 4c	 add	 esp, 76			; 0000004cH
  08eb9	89 95 f8 b9 ff
	ff		 mov	 DWORD PTR _ÝÂùÜ??ú¼?$1$[ebp], edx
  08ebf	8d b0 90 01 00
	00		 lea	 esi, DWORD PTR ?pet@@3PAUPET@@A[eax+400]
  08ec5	03 b5 00 ba ff
	ff		 add	 esi, DWORD PTR tv36649[ebp]
  08ecb	8b ce		 mov	 ecx, esi
  08ecd	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  08ed0	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv39006[ebp], eax
$LL4319@MenuProc:
  08ed6	8a 01		 mov	 al, BYTE PTR [ecx]
  08ed8	41		 inc	 ecx
  08ed9	84 c0		 test	 al, al
  08edb	75 f9		 jne	 SHORT $LL4319@MenuProc
  08edd	2b 8d 00 ba ff
	ff		 sub	 ecx, DWORD PTR tv39006[ebp]
  08ee3	83 f9 12	 cmp	 ecx, 18			; 00000012H
  08ee6	0f 86 b0 00 00
	00		 jbe	 $LN1163@MenuProc

; 15312: 										char *splitPoint = pet[nSelectPet].item[i].memo;

  08eec	33 ff		 xor	 edi, edi
  08eee	66 90		 npad	 2
$LL236@MenuProc:

; 15338: 												strncpy(moji, splitPoint, 18);

  08ef0	6a 12		 push	 18			; 00000012H
  08ef2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  08ef8	56		 push	 esi
  08ef9	50		 push	 eax
  08efa	e8 00 00 00 00	 call	 _strncpy

; 15339: 												moji[18] = NULL;
; 15340: 												if (GetStrLastByte(moji) == 3) {

  08eff	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  08f05	c6 85 02 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+18], 0
  08f0c	50		 push	 eax
  08f0d	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  08f12	83 c4 10	 add	 esp, 16			; 00000010H
  08f15	83 f8 03	 cmp	 eax, 3
  08f18	75 0c		 jne	 SHORT $LN1165@MenuProc

; 15341: 													moji[17] = NULL;

  08f1a	c6 85 01 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+17], 0

; 15342: 													splitPoint += 17;

  08f21	83 c6 11	 add	 esi, 17			; 00000011H

; 15343: 												}

  08f24	eb 0a		 jmp	 SHORT $LN1166@MenuProc
$LN1165@MenuProc:

; 15344: 												else {
; 15345: 													moji[18] = NULL;

  08f26	c6 85 02 ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+18], 0

; 15346: 													splitPoint += 18;

  08f2d	83 c6 12	 add	 esi, 18			; 00000012H
$LN1166@MenuProc:

; 15347: 												}
; 15348: 												StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 330 + åå²ä¸´æ¶è¡æ° * 20, FONT_PRIO_FRONT, 1, moji, 0);

  08f30	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  08f36	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  08f3c	6a 00		 push	 0
  08f3e	50		 push	 eax
  08f3f	6a 01		 push	 1
  08f41	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  08f44	05 4a 01 00 00	 add	 eax, 330		; 0000014aH
  08f49	03 c7		 add	 eax, edi
  08f4b	6a 01		 push	 1
  08f4d	50		 push	 eax
  08f4e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  08f51	2d aa 00 00 00	 sub	 eax, 170		; 000000aaH
  08f56	50		 push	 eax
  08f57	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15349: 												åå²ä¸´æ¶è¡æ°++;

  08f5c	8b 95 f8 b9 ff
	ff		 mov	 edx, DWORD PTR _ÝÂùÜ??ú¼?$1$[ebp]
  08f62	8b ce		 mov	 ecx, esi
  08f64	42		 inc	 edx
  08f65	83 c4 18	 add	 esp, 24			; 00000018H
  08f68	89 95 f8 b9 ff
	ff		 mov	 DWORD PTR _ÝÂùÜ??ú¼?$1$[ebp], edx
  08f6e	83 c7 14	 add	 edi, 20			; 00000014H
  08f71	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  08f74	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv39010[ebp], eax
  08f7a	66 0f 1f 44 00
	00		 npad	 6
$LL4320@MenuProc:

; 15334: 
; 15335: 										int åå²ä¸´æ¶è¡æ° = 0;
; 15336: 										while (1) {
; 15337: 											if (strlen(splitPoint) > 18) {

  08f80	8a 01		 mov	 al, BYTE PTR [ecx]
  08f82	41		 inc	 ecx
  08f83	84 c0		 test	 al, al
  08f85	75 f9		 jne	 SHORT $LL4320@MenuProc
  08f87	2b 8d 00 ba ff
	ff		 sub	 ecx, DWORD PTR tv39010[ebp]
  08f8d	83 f9 12	 cmp	 ecx, 18			; 00000012H
  08f90	0f 87 5a ff ff
	ff		 ja	 $LL236@MenuProc
  08f96	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
$LN1163@MenuProc:

; 15350: 											}
; 15351: 											else {
; 15352: 												strcpy(moji, splitPoint);

  08f9c	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  08fa2	2b ce		 sub	 ecx, esi
$LL1985@MenuProc:
  08fa4	8a 06		 mov	 al, BYTE PTR [esi]
  08fa6	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  08fa9	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  08fad	84 c0		 test	 al, al
  08faf	75 f3		 jne	 SHORT $LL1985@MenuProc

; 15353: 												StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 330 + åå²ä¸´æ¶è¡æ° * 20, FONT_PRIO_FRONT, 1, moji, 0);

  08fb1	8d 0c 92	 lea	 ecx, DWORD PTR [edx+edx*4]
  08fb4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  08fba	6a 00		 push	 0
  08fbc	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  08fc2	50		 push	 eax
  08fc3	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  08fc6	6a 01		 push	 1
  08fc8	6a 01		 push	 1
  08fca	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  08fcd	05 4a 01 00 00	 add	 eax, 330		; 0000014aH
  08fd2	50		 push	 eax
  08fd3	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  08fd6	2d aa 00 00 00	 sub	 eax, 170		; 000000aaH
  08fdb	50		 push	 eax
  08fdc	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15354: 												break;
; 15355: 											}
; 15356: 										}
; 15357: 										splitPoint = pet[nSelectPet].item[i].memo;

  08fe1	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  08feb	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv38811[ebp]

; 15358: 										StockDispBuffer(pActMenuWnd2->x - 100, pActMenuWnd2->y + 214, ItemBuffer[i].dispPrio, pet[nSelectPet].item[i].graNo, 0);

  08ff1	8b b5 e0 b9 ff
	ff		 mov	 esi, DWORD PTR tv38459[ebp]
  08ff7	6a 00		 push	 0
  08ff9	8d 8a 90 01 00
	00		 lea	 ecx, DWORD PTR ?pet@@3PAUPET@@A[edx+400]
  08fff	03 c8		 add	 ecx, eax
  09001	89 8d 00 ba ff
	ff		 mov	 DWORD PTR _splitPoint$2$[ebp], ecx
  09007	ff b4 10 80 00
	00 00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+edx+128]
  0900e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  09014	0f b6 86 14 00
	00 00		 movzx	 eax, BYTE PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+20]
  0901b	50		 push	 eax
  0901c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0901f	05 d6 00 00 00	 add	 eax, 214		; 000000d6H
  09024	50		 push	 eax
  09025	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  09028	83 e8 64	 sub	 eax, 100		; 00000064H
  0902b	50		 push	 eax
  0902c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 15359: 										StockDispBuffer(pActMenuWnd2->x - 100, pActMenuWnd2->y + 300, ItemBuffer[i].dispPrio, IMAGE_éå·è¯¦ææ¡, 0);

  09031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  09037	0f b6 86 14 00
	00 00		 movzx	 eax, BYTE PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+20]
  0903e	6a 00		 push	 0
  09040	68 84 cb 00 00	 push	 52100			; 0000cb84H
  09045	50		 push	 eax
  09046	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  09049	05 2c 01 00 00	 add	 eax, 300		; 0000012cH
  0904e	50		 push	 eax
  0904f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  09052	83 e8 64	 sub	 eax, 100		; 00000064H
  09055	50		 push	 eax
  09056	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 15360: 
; 15361: 
; 15362: #endif
; 15363: 										StockFontBuffer(pActMenuWnd2->x + 16, pActMenuWnd2->y + 323, FONT_PRIO_FRONT, color, pet[nSelectPet].item[i].name, 0);

  0905b	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  09065	83 c4 40	 add	 esp, 64			; 00000040H
  09068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  0906e	6a 00		 push	 0
  09070	8d 80 62 01 00
	00		 lea	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+354]
  09076	03 85 0c ba ff
	ff		 add	 eax, DWORD PTR tv38811[ebp]
  0907c	50		 push	 eax
  0907d	ff b5 ec b9 ff
	ff		 push	 DWORD PTR _color$1$[ebp]
  09083	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  09086	05 43 01 00 00	 add	 eax, 323		; 00000143H
  0908b	6a 01		 push	 1
  0908d	50		 push	 eax
  0908e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  09091	83 c0 10	 add	 eax, 16			; 00000010H
  09094	50		 push	 eax
  09095	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15364: 										// æ¾ç¤ºç©åèä¹åº¦[íí¸ì¥ë¹ ë´êµ¬ë íììëê¸°ë¥]
; 15365: 										sprintf(damage_msg, "èä¹åº¦(%s)", pet[nSelectPet].item[i].damage);

  0909a	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  090a4	8d 80 e5 01 00
	00		 lea	 eax, DWORD PTR ?pet@@3PAUPET@@A[eax+485]
  090aa	03 85 0c ba ff
	ff		 add	 eax, DWORD PTR tv38811[ebp]
  090b0	50		 push	 eax
  090b1	8d 85 50 e8 ff
	ff		 lea	 eax, DWORD PTR _damage_msg$38[ebp]
  090b7	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CFBINIFC@?R?$LB?N?y?S?x?$CI?$CFs?$CJ@
  090bc	50		 push	 eax
  090bd	e8 00 00 00 00	 call	 _sprintf

; 15366: 										StockFontBuffer(pActMenuWnd2->x + 150, pActMenuWnd2->y + 323, FONT_PRIO_FRONT, color, damage_msg, 0);

  090c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  090c8	8d 85 50 e8 ff
	ff		 lea	 eax, DWORD PTR _damage_msg$38[ebp]
  090ce	6a 00		 push	 0
  090d0	50		 push	 eax
  090d1	ff b5 ec b9 ff
	ff		 push	 DWORD PTR _color$1$[ebp]
  090d7	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  090da	05 43 01 00 00	 add	 eax, 323		; 00000143H
  090df	6a 01		 push	 1
  090e1	50		 push	 eax
  090e2	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  090e5	05 96 00 00 00	 add	 eax, 150		; 00000096H
  090ea	50		 push	 eax
  090eb	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15367: 										int éå®ä¹Y = pActMenuWnd2->y + 346;

  090f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  090f5	83 c4 3c	 add	 esp, 60			; 0000003cH

; 15368: 										while (1) {
; 15369: 											if (strlen(splitPoint) > 28) {

  090f8	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR _splitPoint$2$[ebp]
  090fe	8b d1		 mov	 edx, ecx
  09100	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  09103	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  09108	89 85 ec b9 ff
	ff		 mov	 DWORD PTR _ñìïÒ?Y$1$[ebp], eax
  0910e	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  09111	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39013[ebp], eax
$LL4321@MenuProc:
  09117	8a 02		 mov	 al, BYTE PTR [edx]
  09119	42		 inc	 edx
  0911a	84 c0		 test	 al, al
  0911c	75 f9		 jne	 SHORT $LL4321@MenuProc
  0911e	2b 95 f8 b9 ff
	ff		 sub	 edx, DWORD PTR tv39013[ebp]
  09124	83 fa 1c	 cmp	 edx, 28			; 0000001cH
  09127	0f 86 a3 00 00
	00		 jbe	 $LN5055@MenuProc
  0912d	8b b5 00 ba ff
	ff		 mov	 esi, DWORD PTR _splitPoint$2$[ebp]
$LL238@MenuProc:

; 15370: 												strncpy(moji, splitPoint, 28);

  09133	6a 1c		 push	 28			; 0000001cH
  09135	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0913b	56		 push	 esi
  0913c	50		 push	 eax
  0913d	e8 00 00 00 00	 call	 _strncpy

; 15371: 												moji[28] = NULL;
; 15372: 												if (GetStrLastByte(moji) == 3) {

  09142	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  09148	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0
  0914f	50		 push	 eax
  09150	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  09155	83 c4 10	 add	 esp, 16			; 00000010H
  09158	83 f8 03	 cmp	 eax, 3
  0915b	75 0c		 jne	 SHORT $LN1169@MenuProc

; 15373: 													moji[27] = NULL;

  0915d	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+27], 0

; 15374: 													splitPoint += 27;

  09164	83 c6 1b	 add	 esi, 27			; 0000001bH

; 15375: 												}

  09167	eb 0a		 jmp	 SHORT $LN1170@MenuProc
$LN1169@MenuProc:

; 15376: 												else {
; 15377: 													moji[28] = NULL;

  09169	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0

; 15378: 													splitPoint += 28;

  09170	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN1170@MenuProc:

; 15379: 												}
; 15380: 												StockFontBuffer(x, éå®ä¹Y, FONT_PRIO_FRONT, 0, moji, 0);

  09173	6a 00		 push	 0
  09175	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0917b	50		 push	 eax
  0917c	6a 00		 push	 0
  0917e	6a 01		 push	 1
  09180	ff b5 ec b9 ff
	ff		 push	 DWORD PTR _ñìïÒ?Y$1$[ebp]
  09186	57		 push	 edi
  09187	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15381: 												éå®ä¹Y += 18;

  0918c	8b 95 ec b9 ff
	ff		 mov	 edx, DWORD PTR _ñìïÒ?Y$1$[ebp]
  09192	8b ce		 mov	 ecx, esi
  09194	83 c4 18	 add	 esp, 24			; 00000018H
  09197	83 c2 12	 add	 edx, 18			; 00000012H
  0919a	89 95 ec b9 ff
	ff		 mov	 DWORD PTR _ñìïÒ?Y$1$[ebp], edx
  091a0	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  091a3	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39016[ebp], eax
  091a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4322@MenuProc:

; 15368: 										while (1) {
; 15369: 											if (strlen(splitPoint) > 28) {

  091b0	8a 01		 mov	 al, BYTE PTR [ecx]
  091b2	41		 inc	 ecx
  091b3	84 c0		 test	 al, al
  091b5	75 f9		 jne	 SHORT $LL4322@MenuProc
  091b7	2b 8d f8 b9 ff
	ff		 sub	 ecx, DWORD PTR tv39016[ebp]
  091bd	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  091c0	0f 87 6d ff ff
	ff		 ja	 $LL238@MenuProc
  091c6	89 b5 00 ba ff
	ff		 mov	 DWORD PTR _splitPoint$2$[ebp], esi
  091cc	8b ce		 mov	 ecx, esi
  091ce	eb 06		 jmp	 SHORT $LN1167@MenuProc
$LN5055@MenuProc:
  091d0	8b 95 ec b9 ff
	ff		 mov	 edx, DWORD PTR _ñìïÒ?Y$1$[ebp]
$LN1167@MenuProc:

; 15382: 											}
; 15383: 											else {
; 15384: 												strcpy(moji, splitPoint);

  091d6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  091dc	2b c1		 sub	 eax, ecx
  091de	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39293[ebp], eax
  091e4	8b f0		 mov	 esi, eax
$LL1992@MenuProc:
  091e6	8a 01		 mov	 al, BYTE PTR [ecx]
  091e8	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  091eb	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  091ef	84 c0		 test	 al, al
  091f1	75 f3		 jne	 SHORT $LL1992@MenuProc

; 15385: 												StockFontBuffer(x, éå®ä¹Y, FONT_PRIO_FRONT, 0, moji, 0);
; 15386: 												break;
; 15387: 											}
; 15388: 										}
; 15389: 									}
; 15390: 								}

  091f3	e9 cb 01 00 00	 jmp	 $LN5121@MenuProc
$LN1159@MenuProc:

; 15391: 								else
; 15392: 									// äººç©è£å¤
; 15393: #endif
; 15394: 								{
; 15395: #ifdef _ALCHEMIST // æ¾ç¤ºItemè¯´æ (å¥æªçBug)
; 15396: 									if (pc.item[i].useFlag == TRUE) {

  091f8	69 d1 7c 01 00
	00		 imul	 edx, ecx, 380
  091fe	89 95 0c ba ff
	ff		 mov	 DWORD PTR tv38811[ebp], edx
  09204	66 83 ba a0 01
	00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[edx+416], 1
  0920c	0f 85 da 01 00
	00		 jne	 $LN241@MenuProc

; 15397: #else
; 15398: 									if (pc.item[i].useFlag == TRUE && (ItemBuffer[i].mixFlag <= 2 || ItemBuffer[i].mixFlag == 10)) {
; 15399: #endif
; 15400: 										char *splitPoint = pc.item[i].memo;
; 15401: 										int color = pc.item[i].color;
; 15402: 										if (pc.transmigration == 0 && pc.level < pc.item[i].level) color = FONT_PAL_RED;

  09212	66 83 3d f4 50
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A+20724, 0
  0921a	8d 82 d8 01 00
	00		 lea	 eax, DWORD PTR ?pc@@3UPC@@A[edx+472]
  09220	8b 8a c4 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A[edx+196]
  09226	89 85 00 ba ff
	ff		 mov	 DWORD PTR _splitPoint$1$[ebp], eax
  0922c	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR _color$1$[ebp], ecx
  09232	75 19		 jne	 SHORT $LN1172@MenuProc
  09234	a1 38 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+56
  09239	3b 82 cc 00 00
	00		 cmp	 eax, DWORD PTR ?pc@@3UPC@@A[edx+204]
  0923f	b8 06 00 00 00	 mov	 eax, 6
  09244	0f 4c c8	 cmovl	 ecx, eax
  09247	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR _color$1$[ebp], ecx
$LN1172@MenuProc:

; 15403: #ifdef _NB_éå·æ è¯¦æ
; 15404: 										char éå·ç±»åè¯´æ[][56] = { "ë°í±","ëë¼","ê³¤ë´","ì´","í","í í","í¬ë©§/ëª¨ì","ì·/ê°ì·","íì°","ìê¸°","ëª©ê±¸ì´",
; 15405: 											"ìììì","ìììì","ê·ê±¸ì´","ì½ê±¸ì´","ë¶ì ","ê³µíµìì´í","ì¤í","ì¤ë¡ì","ì¤í¤",
; 15406: 											"ì¼ë°íëª©","ê¸ì","ë³´ì","íë¬¼","ë²¨í¸","ë°©í¨","ì ë°","ì¥ê°","ìììì","ìììì","í©ì±ìì´í",
; 15407: 											"íí¸ëª¨ì","íí¸êµì ê¸°","ì ìë¥ë¬¼ë°í±ë®ê°","íí¸íê°","íí¸ë±ë±ì§","íí¸ë ê°	","íí¸ë°"
; 15408: 										};
; 15409: 										/*char è¯¦æä¸´æ¶ææ¬[256];		//ìì´íì¤ëªì°½
; 15410: 										StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 250, FONT_PRIO_FRONT, color, pc.item[i].name, 0);
; 15411: 										/*sprintf( è¯¦æä¸´æ¶ææ¬, "ë´ êµ¬ ì±ï¼%s", pc.item[ i ].damage );
; 15412: 										StockFontBuffer( pActMenuWnd2->x - 170, pActMenuWnd2->y + 270, FONT_PRIO_FRONT, 0, è¯¦æä¸´æ¶ææ¬, 0 );*/
; 15413: #ifdef _NB_ç®¡çæ¨¡å¼
; 15414: 										//										sprintf( è¯¦æä¸´æ¶ææ¬, "ì¢    ë¥ï¼%s(%d)", éå·ç±»åè¯´æ[pc.item[ i ].type], pc.item[ i ].type);
; 15415: #else
; 15416: 										sprintf(è¯¦æä¸´æ¶ææ¬, "í­ëª©íìï¼%s", éå·ç±»åè¯´æ[pc.item[i].type]);
; 15417: #endif
; 15418: 										/*StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 290, FONT_PRIO_FRONT, 0, è¯¦æä¸´æ¶ææ¬, 0);
; 15419: 
; 15420: 										sprintf(è¯¦æä¸´æ¶ææ¬, "ì°©ì©ë ë²¨ï¼%d", pc.item[i].level);
; 15421: 										StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 310, FONT_PRIO_FRONT, color, è¯¦æä¸´æ¶ææ¬, 0);
; 15422: 
; 15423: 										int åå²ä¸´æ¶è¡æ° = 0;
; 15424: 										while (1) {
; 15425: 											if (strlen(splitPoint) > 18) {
; 15426: 												strncpy(moji, splitPoint, 18);
; 15427: 												moji[18] = NULL;
; 15428: 												if (GetStrLastByte(moji) == 3) {
; 15429: 													moji[17] = NULL;
; 15430: 													splitPoint += 17;
; 15431: 												}
; 15432: 												else {
; 15433: 													moji[18] = NULL;
; 15434: 													splitPoint += 18;
; 15435: 												}
; 15436: 												StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 330 + åå²ä¸´æ¶è¡æ° * 20, FONT_PRIO_FRONT, 1, moji, 0);
; 15437: 												åå²ä¸´æ¶è¡æ°++;
; 15438: 											}
; 15439: 											else {
; 15440: 												strcpy(moji, splitPoint);
; 15441: 												StockFontBuffer(pActMenuWnd2->x - 170, pActMenuWnd2->y + 330 + åå²ä¸´æ¶è¡æ° * 20, FONT_PRIO_FRONT, 1, moji, 0);
; 15442: 												break;
; 15443: 											}
; 15444: 										}
; 15445: 										splitPoint = pc.item[i].memo;
; 15446: 										StockDispBuffer(pActMenuWnd2->x - 100, pActMenuWnd2->y + 214, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);
; 15447: 										StockDispBuffer(pActMenuWnd2->x - 100, pActMenuWnd2->y + 300, ItemBuffer[i].dispPrio, IMAGE_éå·è¯¦ææ¡, 0);
; 15448: 										*/
; 15449: 
; 15450: #endif
; 15451: 										StockFontBuffer(pActMenuWnd2->x + 16, pActMenuWnd2->y + 337, FONT_PRIO_FRONT, color, pc.item[i].name, 0);

  0924d	6a 00		 push	 0
  0924f	8d 82 aa 01 00
	00		 lea	 eax, DWORD PTR ?pc@@3UPC@@A[edx+426]
  09255	50		 push	 eax
  09256	51		 push	 ecx
  09257	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  0925d	6a 01		 push	 1
  0925f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  09262	05 51 01 00 00	 add	 eax, 337		; 00000151H
  09267	50		 push	 eax
  09268	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0926b	83 c0 10	 add	 eax, 16			; 00000010H
  0926e	50		 push	 eax
  0926f	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15452: 										// æ¾ç¤ºç©åèä¹åº¦ ìì´íë´êµ¬ì±íì
; 15453: 										char damage_msg[256];
; 15454: 										sprintf(damage_msg, "ë´êµ¬(%s)", pc.item[i].damage);

  09274	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38811[ebp]
  0927a	8d 80 2d 02 00
	00		 lea	 eax, DWORD PTR ?pc@@3UPC@@A[eax+557]
  09280	50		 push	 eax
  09281	8d 85 50 e9 ff
	ff		 lea	 eax, DWORD PTR _damage_msg$39[ebp]
  09287	68 00 00 00 00	 push	 OFFSET ??_C@_08OHLEHKNP@?$LD?$LL?$LB?$LI?$CI?$CFs?$CJ@
  0928c	50		 push	 eax
  0928d	e8 00 00 00 00	 call	 _sprintf

; 15455: 										StockFontBuffer(pActMenuWnd2->x + 150, pActMenuWnd2->y + 337, FONT_PRIO_FRONT, color, damage_msg, 0);

  09292	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  09298	8d 85 50 e9 ff
	ff		 lea	 eax, DWORD PTR _damage_msg$39[ebp]
  0929e	6a 00		 push	 0
  092a0	50		 push	 eax
  092a1	ff b5 f8 b9 ff
	ff		 push	 DWORD PTR _color$1$[ebp]
  092a7	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  092aa	05 51 01 00 00	 add	 eax, 337		; 00000151H
  092af	6a 01		 push	 1
  092b1	50		 push	 eax
  092b2	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  092b5	05 96 00 00 00	 add	 eax, 150		; 00000096H
  092ba	50		 push	 eax
  092bb	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15456: 										int éå®ä¹Y = pActMenuWnd2->y + 360;

  092c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  092c5	83 c4 3c	 add	 esp, 60			; 0000003cH

; 15457: 										while (1) {
; 15458: 											if (strlen(splitPoint) > 28) {

  092c8	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR _splitPoint$1$[ebp]
  092ce	8b d1		 mov	 edx, ecx
  092d0	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  092d3	05 68 01 00 00	 add	 eax, 360		; 00000168H
  092d8	89 85 ec b9 ff
	ff		 mov	 DWORD PTR _ñìïÒ?Y$1$[ebp], eax
  092de	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  092e1	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39021[ebp], eax
$LL4323@MenuProc:
  092e7	8a 02		 mov	 al, BYTE PTR [edx]
  092e9	42		 inc	 edx
  092ea	84 c0		 test	 al, al
  092ec	75 f9		 jne	 SHORT $LL4323@MenuProc
  092ee	2b 95 f8 b9 ff
	ff		 sub	 edx, DWORD PTR tv39021[ebp]
  092f4	83 fa 1c	 cmp	 edx, 28			; 0000001cH
  092f7	0f 86 a3 00 00
	00		 jbe	 $LN5053@MenuProc
  092fd	8b b5 00 ba ff
	ff		 mov	 esi, DWORD PTR _splitPoint$1$[ebp]
$LL240@MenuProc:

; 15459: 												strncpy(moji, splitPoint, 28);

  09303	6a 1c		 push	 28			; 0000001cH
  09305	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0930b	56		 push	 esi
  0930c	50		 push	 eax
  0930d	e8 00 00 00 00	 call	 _strncpy

; 15460: 												moji[28] = NULL;
; 15461: 												if (GetStrLastByte(moji) == 3) {

  09312	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  09318	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0
  0931f	50		 push	 eax
  09320	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  09325	83 c4 10	 add	 esp, 16			; 00000010H
  09328	83 f8 03	 cmp	 eax, 3
  0932b	75 0c		 jne	 SHORT $LN1175@MenuProc

; 15462: 													moji[27] = NULL;

  0932d	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+27], 0

; 15463: 													splitPoint += 27;

  09334	83 c6 1b	 add	 esi, 27			; 0000001bH

; 15464: 												}

  09337	eb 0a		 jmp	 SHORT $LN1176@MenuProc
$LN1175@MenuProc:

; 15465: 												else {
; 15466: 													moji[28] = NULL;

  09339	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0

; 15467: 													splitPoint += 28;

  09340	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN1176@MenuProc:

; 15468: 												}
; 15469: 												StockFontBuffer(x, éå®ä¹Y, FONT_PRIO_FRONT, 0, moji, 0);

  09343	6a 00		 push	 0
  09345	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0934b	50		 push	 eax
  0934c	6a 00		 push	 0
  0934e	6a 01		 push	 1
  09350	ff b5 ec b9 ff
	ff		 push	 DWORD PTR _ñìïÒ?Y$1$[ebp]
  09356	57		 push	 edi
  09357	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15470: 												éå®ä¹Y += 18;

  0935c	8b 95 ec b9 ff
	ff		 mov	 edx, DWORD PTR _ñìïÒ?Y$1$[ebp]
  09362	8b ce		 mov	 ecx, esi
  09364	83 c4 18	 add	 esp, 24			; 00000018H
  09367	83 c2 12	 add	 edx, 18			; 00000012H
  0936a	89 95 ec b9 ff
	ff		 mov	 DWORD PTR _ñìïÒ?Y$1$[ebp], edx
  09370	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  09373	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39030[ebp], eax
  09379	0f 1f 80 00 00
	00 00		 npad	 7
$LL4324@MenuProc:

; 15457: 										while (1) {
; 15458: 											if (strlen(splitPoint) > 28) {

  09380	8a 01		 mov	 al, BYTE PTR [ecx]
  09382	41		 inc	 ecx
  09383	84 c0		 test	 al, al
  09385	75 f9		 jne	 SHORT $LL4324@MenuProc
  09387	2b 8d f8 b9 ff
	ff		 sub	 ecx, DWORD PTR tv39030[ebp]
  0938d	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  09390	0f 87 6d ff ff
	ff		 ja	 $LL240@MenuProc
  09396	89 b5 00 ba ff
	ff		 mov	 DWORD PTR _splitPoint$1$[ebp], esi
  0939c	8b ce		 mov	 ecx, esi
  0939e	eb 06		 jmp	 SHORT $LN1173@MenuProc
$LN5053@MenuProc:
  093a0	8b 95 ec b9 ff
	ff		 mov	 edx, DWORD PTR _ñìïÒ?Y$1$[ebp]
$LN1173@MenuProc:

; 15471: 											}
; 15472: 											else {
; 15473: 												strcpy(moji, splitPoint);

  093a6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  093ac	2b c1		 sub	 eax, ecx
  093ae	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39292[ebp], eax
  093b4	8b f0		 mov	 esi, eax
$LL1999@MenuProc:
  093b6	8a 01		 mov	 al, BYTE PTR [ecx]
  093b8	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  093bb	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  093bf	84 c0		 test	 al, al
  093c1	75 f3		 jne	 SHORT $LL1999@MenuProc
$LN5121@MenuProc:

; 15474: 												StockFontBuffer(x, éå®ä¹Y, FONT_PRIO_FRONT, 0, moji, 0);
; 15475: 												break;
; 15476: 											}
; 15477: 										}
; 15478: 									}
; 15479: 								}
; 15480: 								if (pActPet2 == NULL) {

  093c3	8b b5 e0 b9 ff
	ff		 mov	 esi, DWORD PTR tv38459[ebp]
  093c9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  093cf	6a 00		 push	 0
  093d1	50		 push	 eax
  093d2	6a 00		 push	 0
  093d4	6a 01		 push	 1
  093d6	52		 push	 edx
  093d7	57		 push	 edi
  093d8	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  093dd	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv38811[ebp]
  093e3	83 c4 18	 add	 esp, 24			; 00000018H
  093e6	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
$LN241@MenuProc:
  093ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActPet2@@3PAUaction@@A, 0
  093f3	0f 85 ff 09 00
	00		 jne	 $LN4811@MenuProc

; 15481: 									if (mouse.onceState & MOUSE_LEFT_CRICK && mouse.itemNo == -1) {

  093f9	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  09400	74 60		 je	 SHORT $LN4801@MenuProc
  09402	83 3d 48 00 00
	00 ff		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  09409	75 57		 jne	 SHORT $LN4801@MenuProc

; 15482: 										ItemBuffer[i].mixFlag = FALSE;
; 15483: #ifdef _PET_ITEM
; 15484: 										if (g_bPetItemWndFlag && (i >= PET_HEAD && i < PET_EQUIPNUM) && nSelectPet > -1) {

  0940b	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  09412	c7 86 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 0
  0941c	74 20		 je	 SHORT $LN1179@MenuProc
  0941e	83 f9 06	 cmp	 ecx, 6
  09421	77 1b		 ja	 SHORT $LN1179@MenuProc
  09423	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectPet@@3HA
  09428	83 f8 ff	 cmp	 eax, -1
  0942b	7e 11		 jle	 SHORT $LN1179@MenuProc

; 15485: 											if (pet[nSelectPet].item[i].useFlag == TRUE) {

  0942d	69 c0 78 0b 00
	00		 imul	 eax, eax, 2936
  09433	66 83 bc 10 58
	01 00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+edx+344], 1

; 15486: 												ItemBuffer[i].dragFlag = TRUE;
; 15487: 												mouse.itemNo = i;
; 15488: 												itemNo = -1;
; 15489: 											}
; 15490: 										}

  0943c	eb 08		 jmp	 SHORT $LN5122@MenuProc
$LN1179@MenuProc:

; 15491: 										else
; 15492: #endif
; 15493: 											if (pc.item[i].useFlag == TRUE) {

  0943e	66 83 ba a0 01
	00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[edx+416], 1
$LN5122@MenuProc:

; 15494: 												ItemBuffer[i].dragFlag = TRUE;
; 15495: 												mouse.itemNo = i;
; 15496: 												itemNo = -1;
; 15497: 											}
; 15498: 									}
; 15499: 									if (mouse.onceState & MOUSE_LEFT_CRICK_UP) {

  09446	75 1a		 jne	 SHORT $LN4801@MenuProc
  09448	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1
  09452	89 0d 48 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, ecx
  09458	c7 86 18 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+24], 1
$LN4801@MenuProc:
  09462	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  09469	0f 84 e3 00 00
	00		 je	 $LN1184@MenuProc

; 15500: 										if (mouse.itemNo != -1) {

  0946f	8b 15 48 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+72
  09475	83 fa ff	 cmp	 edx, -1
  09478	0f 84 d4 00 00
	00		 je	 $LN1184@MenuProc

; 15501: 											if (mouse.itemNo != i && ItemBuffer[i].mixFlag == 0) {

  0947e	3b d1		 cmp	 edx, ecx
  09480	0f 84 b0 00 00
	00		 je	 $LN1185@MenuProc
  09486	83 be 1c 00 00
	00 00		 cmp	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 0
  0948d	0f 85 a3 00 00
	00		 jne	 $LN1185@MenuProc

; 15502: #ifdef _PET_ITEM
; 15503: 												if (g_bPetItemWndFlag) {

  09493	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  0949a	74 13		 je	 SHORT $LN1188@MenuProc

; 15504: 													if (nSelectPet > -1 && !(mouse.itemNo >= CHAR_EQUIPPLACENUM && i >= CHAR_EQUIPPLACENUM)) {

  0949c	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?nSelectPet@@3HA, -1
  094a3	7e 0a		 jle	 SHORT $LN1188@MenuProc
  094a5	83 fa 09	 cmp	 edx, 9
  094a8	7c 22		 jl	 SHORT $LN1190@MenuProc
  094aa	83 f9 09	 cmp	 ecx, 9
  094ad	7c 22		 jl	 SHORT $LN3666@MenuProc
$LN1188@MenuProc:

; 15510: 													else {
; 15511: 														if (bNewServer)
; 15512: 															lssproto_MI_send(sockfd, mouse.itemNo, i);
; 15513: 														else
; 15514: 															old_lssproto_MI_send(sockfd, mouse.itemNo, i);
; 15515: 													}
; 15516: 												}
; 15517: 												else
; 15518: #endif
; 15519: 												{
; 15520: 													if (bNewServer)
; 15521: 														lssproto_MI_send(sockfd, mouse.itemNo, i);
; 15522: 													else
; 15523: 														old_lssproto_MI_send(sockfd, mouse.itemNo, i);
; 15524: 												}
; 15525: 												play_se(217, 320, 240);

  094af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  094b6	51		 push	 ecx
  094b7	ff 35 48 00 00
	00		 push	 DWORD PTR ?mouse@@3UMOUSE@@A+72
  094bd	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  094c3	74 52		 je	 SHORT $LN1193@MenuProc
  094c5	e8 00 00 00 00	 call	 ?lssproto_MI_send@@YAXHHH@Z ; lssproto_MI_send
  094ca	eb 50		 jmp	 SHORT $LN5123@MenuProc
$LN1190@MenuProc:

; 15505: 														if (i < CHAR_EQUIPPLACENUM && nSelectPet == pc.ridePetNo)	// è¥æ¯è¦è£ä¸å»,æ£æ¥æ¯ä¸æ¯éªå® 

  094cc	83 f9 09	 cmp	 ecx, 9
  094cf	7d 1d		 jge	 SHORT $LN1191@MenuProc
$LN3666@MenuProc:
  094d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectPet@@3HA
  094d6	3b 05 18 51 00
	00		 cmp	 eax, DWORD PTR ?pc@@3UPC@@A+20760
  094dc	75 10		 jne	 SHORT $LN1191@MenuProc

; 15506: 															StockChatBufferLine("éªå® ä¸å¯è£è£å¤ï¼", FONT_PAL_YELLOW);

  094de	6a 00		 push	 0
  094e0	6a 04		 push	 4
  094e2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KBIHDIM@?$DP?$DP?$NM?t?J?$KG?$DP?$DP?$DP?$KD?$KB@
  094e7	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  094ec	eb 2e		 jmp	 SHORT $LN5123@MenuProc
$LN1191@MenuProc:

; 15507: 														else
; 15508: 															lssproto_PetItemEquip_send(sockfd, nowGx, nowGy, nSelectPet, mouse.itemNo, i);

  094ee	51		 push	 ecx
  094ef	ff 35 48 00 00
	00		 push	 DWORD PTR ?mouse@@3UMOUSE@@A+72
  094f5	ff 35 00 00 00
	00		 push	 DWORD PTR ?nSelectPet@@3HA
  094fb	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  09501	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  09507	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0950d	e8 00 00 00 00	 call	 ?lssproto_PetItemEquip_send@@YAXHHHHHH@Z ; lssproto_PetItemEquip_send
  09512	83 c4 18	 add	 esp, 24			; 00000018H

; 15509: 													}

  09515	eb 08		 jmp	 SHORT $LN1196@MenuProc
$LN1193@MenuProc:

; 15510: 													else {
; 15511: 														if (bNewServer)
; 15512: 															lssproto_MI_send(sockfd, mouse.itemNo, i);
; 15513: 														else
; 15514: 															old_lssproto_MI_send(sockfd, mouse.itemNo, i);
; 15515: 													}
; 15516: 												}
; 15517: 												else
; 15518: #endif
; 15519: 												{
; 15520: 													if (bNewServer)
; 15521: 														lssproto_MI_send(sockfd, mouse.itemNo, i);
; 15522: 													else
; 15523: 														old_lssproto_MI_send(sockfd, mouse.itemNo, i);
; 15524: 												}
; 15525: 												play_se(217, 320, 240);

  09517	e8 00 00 00 00	 call	 ?old_lssproto_MI_send@@YAXHHH@Z ; old_lssproto_MI_send
$LN5123@MenuProc:
  0951c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1196@MenuProc:
  0951f	68 f0 00 00 00	 push	 240			; 000000f0H
  09524	68 40 01 00 00	 push	 320			; 00000140H
  09529	68 d9 00 00 00	 push	 217			; 000000d9H
  0952e	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  09533	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1185@MenuProc:

; 15526: 											}
; 15527: 											ItemBuffer[mouse.itemNo].dragFlag = FALSE;

  09536	a1 48 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+72
  0953b	c1 e0 05	 shl	 eax, 5

; 15528: 											mouse.itemNo = -1;

  0953e	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  09548	c7 80 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[eax+24], 0
$LN1184@MenuProc:

; 15529: 										}
; 15530: 									}
; 15531: 									if (mouse.onceState & MOUSE_LEFT_DBL_CRICK && ItemUseTime < timeGetTime() - 500) {

  09552	f6 05 2c 00 00
	00 10		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 16 ; 00000010H
  09559	0f 84 06 03 00
	00		 je	 $LN5050@MenuProc
  0955f	ff 95 fc b9 ff
	ff		 call	 DWORD PTR tv39280[ebp]
  09565	2d f4 01 00 00	 sub	 eax, 500		; 000001f4H
  0956a	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ItemUseTime@@3IA, eax
  09570	0f 83 ef 02 00
	00		 jae	 $LN5050@MenuProc

; 15532: 										ItemUseTime = timeGetTime();

  09576	ff 95 fc b9 ff
	ff		 call	 DWORD PTR tv39280[ebp]

; 15533: #ifdef _PET_ITEM
; 15534: 										// è¥ç®åæ¯å¨äººç©è£å¤æ ä¸æ³è£å¤å® ç©è£å¤æ¶,èªå¨åå°å® ç©è£å¤æ 
; 15535: 										if (!g_bPetItemWndFlag) {

  0957c	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  09583	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv38811[ebp]
  09589	a3 00 00 00 00	 mov	 DWORD PTR ?ItemUseTime@@3IA, eax
  0958e	0f b7 82 a0 01
	00 00		 movzx	 eax, WORD PTR ?pc@@3UPC@@A[edx+416]
  09595	75 21		 jne	 SHORT $LN1198@MenuProc

; 15536: 											if (pc.item[i].useFlag && pc.item[i].type >= ITEM_PET_HEAD && pc.item[i].type < ITEM_CATEGORYNUM) {

  09597	66 85 c0	 test	 ax, ax
  0959a	74 14		 je	 SHORT $LN1200@MenuProc
  0959c	8a 8a 3d 02 00
	00		 mov	 cl, BYTE PTR ?pc@@3UPC@@A[edx+573]
  095a2	80 f9 1d	 cmp	 cl, 29			; 0000001dH
  095a5	7c 09		 jl	 SHORT $LN1200@MenuProc
  095a7	80 f9 26	 cmp	 cl, 38			; 00000026H
  095aa	0f 8c 7a 0b 00
	00		 jl	 $LN2310@MenuProc
$LN1200@MenuProc:

; 15540: 											}
; 15541: 										}

  095b0	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
  095b6	eb 5b		 jmp	 SHORT $LN1201@MenuProc
$LN1198@MenuProc:

; 15542: 										// è¥ç®åæ¯å¨å® ç©è£å¤æ ä¸æ³è£å¤äººç©è£å¤æ¶,èªå¨åå°äººç©è£å¤æ 
; 15543: 										else {
; 15544: 											if (pc.item[i].useFlag && pc.item[i].type < ITEM_PET_HEAD && i >= MAX_ITEMSTART) {

  095b8	8b c8		 mov	 ecx, eax
  095ba	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv38700[ebp], ecx
  095c0	66 85 c0	 test	 ax, ax
  095c3	74 42		 je	 SHORT $LN5045@MenuProc
  095c5	80 ba 3d 02 00
	00 1d		 cmp	 BYTE PTR ?pc@@3UPC@@A[edx+573], 29 ; 0000001dH
  095cc	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv38700[ebp], ecx
  095d2	7d 33		 jge	 SHORT $LN5045@MenuProc
  095d4	89 8d 00 ba ff
	ff		 mov	 DWORD PTR tv38700[ebp], ecx
  095da	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
  095e0	83 f9 09	 cmp	 ecx, 9
  095e3	7c 28		 jl	 SHORT $LN5062@MenuProc

; 15545: 												g_bPetItemWndFlag = false;
; 15546: 												InitItem(pActMenuWnd2->x, pActMenuWnd2->y, g_bPetItemWndFlag);

  095e5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  095eb	6a 00		 push	 0
  095ed	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  095f4	ff 76 1c	 push	 DWORD PTR [esi+28]
  095f7	ff 76 18	 push	 DWORD PTR [esi+24]
  095fa	e8 00 00 00 00	 call	 ?InitItem@@YAXHHH@Z	; InitItem
  095ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  09602	e9 ae 0a 00 00	 jmp	 $LN4197@MenuProc
$LN5045@MenuProc:

; 15547: 												break;
; 15548: 											}
; 15549: 										}
; 15550: #endif
; 15551: 										if (pc.item[i].useFlag != TRUE || pc.item[i].field == ITEM_FIELD_BATTLE || pc.transmigration == 0 && pc.level < pc.item[i].level) {

  09607	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
$LN5062@MenuProc:
  0960d	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv38700[ebp]
$LN1201@MenuProc:
  09613	66 83 f8 01	 cmp	 ax, 1
  09617	0f 85 31 02 00
	00		 jne	 $LN1204@MenuProc
  0961d	66 39 82 a2 01
	00 00		 cmp	 WORD PTR ?pc@@3UPC@@A[edx+418], ax
  09624	0f 84 24 02 00
	00		 je	 $LN1204@MenuProc
  0962a	66 83 3d f4 50
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A+20724, 0
  09632	75 11		 jne	 SHORT $LN1202@MenuProc
  09634	a1 38 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+56
  09639	3b 82 cc 00 00
	00		 cmp	 eax, DWORD PTR ?pc@@3UPC@@A[edx+204]
  0963f	0f 8c 09 02 00
	00		 jl	 $LN1204@MenuProc
$LN1202@MenuProc:

; 15553: 										}
; 15554: 										else {
; 15555: 											mouse.itemNo = -1;
; 15556: 											switch (pc.item[i].target) {

  09645	0f bf 82 a4 01
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A[edx+420]
  0964c	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  09656	83 e8 00	 sub	 eax, 0
  09659	0f 84 a7 01 00
	00		 je	 $LN1205@MenuProc
  0965f	83 e8 01	 sub	 eax, 1
  09662	0f 84 8e 00 00
	00		 je	 $LN1209@MenuProc
  09668	83 e8 07	 sub	 eax, 7
  0966b	0f 85 fa 01 00
	00		 jne	 $LN4806@MenuProc

; 15590: #ifdef _PET_ITEM
; 15591: 											case ITEM_TARGET_PET:
; 15592: 												if (eventWarpSendFlag == FALSE) {

  09671	66 39 05 00 00
	00 00		 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, ax ; eventWarpSendFlag
  09678	0f 85 ed 01 00
	00		 jne	 $LN4806@MenuProc

; 15593: 													// è¥æ¯å¨å·²è£å¤çè£å¤ä¸è¿ç¹äºä¸åä¸å¨ä½
; 15594: 													if (i >= PET_HEAD && i < PET_EQUIPNUM)

  0967e	85 c9		 test	 ecx, ecx
  09680	78 09		 js	 SHORT $LN1215@MenuProc
  09682	83 f9 07	 cmp	 ecx, 7
  09685	0f 8c e0 01 00
	00		 jl	 $LN4806@MenuProc
$LN1215@MenuProc:

; 15595: 														break;
; 15596: 													if (pc.ridePetNo != -1 && nSelectPet == pc.ridePetNo)	// æ£æ¥æ¯ä¸æ¯éªå® 

  0968b	a1 18 51 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+20760
  09690	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nSelectPet@@3HA
  09696	83 f8 ff	 cmp	 eax, -1
  09699	74 29		 je	 SHORT $LN1216@MenuProc
  0969b	3b d0		 cmp	 edx, eax
  0969d	75 25		 jne	 SHORT $LN1216@MenuProc

; 15597: 														StockChatBufferLine("íì¹í«ì¥ë¹ë¥¼ ì°©ì©í ììì´ìï¼", FONT_PAL_YELLOW);

  0969f	6a 00		 push	 0
  096a1	6a 04		 push	 4
  096a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FMLOPNNF@?E?$LO?$LN?B?F?j?$MA?e?$LK?q?$LI?$KG?5?B?x?$LP?k?G?R?$LM?v?$LO?x?$LO?n?$LP?d?$KD?$KB@
  096a8	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  096ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15600: 													play_se(212, 320, 240);

  096b0	68 f0 00 00 00	 push	 240			; 000000f0H
  096b5	68 40 01 00 00	 push	 320			; 00000140H
  096ba	68 d4 00 00 00	 push	 212			; 000000d4H
  096bf	e9 99 01 00 00	 jmp	 $LN5165@MenuProc
$LN1216@MenuProc:

; 15598: 													else
; 15599: 														lssproto_PetItemEquip_send(sockfd, nowGx, nowGy, nSelectPet, i, -1);

  096c4	6a ff		 push	 -1
  096c6	51		 push	 ecx
  096c7	52		 push	 edx
  096c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  096ce	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  096d4	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  096da	e8 00 00 00 00	 call	 ?lssproto_PetItemEquip_send@@YAXHHHHHH@Z ; lssproto_PetItemEquip_send
  096df	83 c4 18	 add	 esp, 24			; 00000018H

; 15600: 													play_se(212, 320, 240);

  096e2	68 f0 00 00 00	 push	 240			; 000000f0H
  096e7	68 40 01 00 00	 push	 320			; 00000140H
  096ec	68 d4 00 00 00	 push	 212			; 000000d4H
  096f1	e9 67 01 00 00	 jmp	 $LN5165@MenuProc
$LN1209@MenuProc:

; 15566: 											case ITEM_TARGET_OTHER:
; 15567: 												itemNo = i;
; 15568: 												play_se(217, 320, 240);

  096f6	68 f0 00 00 00	 push	 240			; 000000f0H
  096fb	68 40 01 00 00	 push	 320			; 00000140H
  09700	68 d9 00 00 00	 push	 217			; 000000d9H
  09705	89 0d 00 00 00
	00		 mov	 DWORD PTR ?itemNo@@3HA, ecx
  0970b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  09710	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15569: 												if (!(MenuToggleFlag & JOY_CTRL_S)) {

  09713	f7 05 00 00 00
	00 00 00 00 20	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  0971d	0f 85 9e 00 00
	00		 jne	 $LN1210@MenuProc

; 15570: 													int j;
; 15571: 													MenuToggleFlag ^= JOY_CTRL_S;	// CTRL + S

  09723	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0972a	81 35 00 00 00
	00 00 00 00 20	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 536870912 ; MenuToggleFlag, 20000000H
  09734	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA, xmm0

; 15572: 													for (j = 0; j < MENU_STATUS_0; j++) statusWndFontNo[j] = -2;
; 15573: 													for (j = 0; j < MENU_STATUS_0; j++) statusWndBtnFlag[j] = 0;
; 15574: 													statusWndNo = 1;

  0973b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 1
  09745	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+16, xmm0
  0974c	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+32, xmm0
  09753	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+48, xmm0
  0975a	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+64, xmm0
  09761	0f 57 c0	 xorps	 xmm0, xmm0
  09764	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA, xmm0
  0976b	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+16, xmm0
  09772	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+32, xmm0
  09779	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+48, xmm0
  09780	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+64, xmm0

; 15575: 													DeathMenuAction();

  09787	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 15576: 													saveUserSetting();

  0978c	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 15577: 													play_se(202, 320, 240);

  09791	68 f0 00 00 00	 push	 240			; 000000f0H
  09796	68 40 01 00 00	 push	 320			; 00000140H
  0979b	68 ca 00 00 00	 push	 202			; 000000caH
  097a0	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 15578: 													MenuToggleFlag &= JOY_CTRL_I;

  097a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  097aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  097ad	25 00 00 00 08	 and	 eax, 134217728		; 08000000H

; 15579: 													MenuToggleFlag |= JOY_CTRL_S;

  097b2	0d 00 00 00 20	 or	 eax, 536870912		; 20000000H
  097b7	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag

; 15580: 												}

  097bc	e9 a4 00 00 00	 jmp	 $LN5050@MenuProc
$LN1210@MenuProc:

; 15581: 												else {
; 15582: 													if (statusWndNo != 1) {

  097c1	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?statusWndNo@@3IA, 1
  097c8	0f 84 97 00 00
	00		 je	 $LN5050@MenuProc

; 15583: 														DeathAction(pActMenuWnd);

  097ce	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  097d4	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 15584: 														pActMenuWnd = NULL;
; 15585: 														statusWndNo = 1;
; 15586: 														play_se(202, 320, 240);

  097d9	68 f0 00 00 00	 push	 240			; 000000f0H
  097de	68 40 01 00 00	 push	 320			; 00000140H
  097e3	68 ca 00 00 00	 push	 202			; 000000caH
  097e8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  097f2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusWndNo@@3IA, 1
  097fc	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  09801	83 c4 10	 add	 esp, 16			; 00000010H

; 15587: 													}
; 15588: 												}
; 15589: 												break;

  09804	eb 5f		 jmp	 SHORT $LN5050@MenuProc
$LN1205@MenuProc:

; 15557: 											case ITEM_TARGET_MYSELF:
; 15558: 												if (eventWarpSendFlag == FALSE) {

  09806	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  0980e	75 5b		 jne	 SHORT $LN4806@MenuProc

; 15559: 													if (bNewServer)

  09810	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  09817	6a 00		 push	 0
  09819	51		 push	 ecx
  0981a	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  09820	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  09826	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0982c	74 07		 je	 SHORT $LN1207@MenuProc

; 15560: 														lssproto_ID_send(sockfd, nowGx, nowGy, i, 0);

  0982e	e8 00 00 00 00	 call	 ?lssproto_ID_send@@YAXHHHHH@Z ; lssproto_ID_send
  09833	eb 05		 jmp	 SHORT $LN5124@MenuProc
$LN1207@MenuProc:

; 15561: 													else
; 15562: 														old_lssproto_ID_send(sockfd, nowGx, nowGy, i, 0);

  09835	e8 00 00 00 00	 call	 ?old_lssproto_ID_send@@YAXHHHHH@Z ; old_lssproto_ID_send
$LN5124@MenuProc:

; 15563: 													play_se(212, 320, 240);

  0983a	83 c4 14	 add	 esp, 20			; 00000014H
  0983d	68 f0 00 00 00	 push	 240			; 000000f0H
  09842	68 40 01 00 00	 push	 320			; 00000140H
  09847	68 d4 00 00 00	 push	 212			; 000000d4H

; 15564: 												}
; 15565: 												break;

  0984c	eb 0f		 jmp	 SHORT $LN5165@MenuProc
$LN1204@MenuProc:

; 15552: 											play_se(220, 320, 240);

  0984e	68 f0 00 00 00	 push	 240			; 000000f0H
  09853	68 40 01 00 00	 push	 320			; 00000140H
  09858	68 dc 00 00 00	 push	 220			; 000000dcH
$LN5165@MenuProc:

; 15601: 												}
; 15602: 												break;
; 15603: #endif
; 15604: 											}
; 15605: 										}
; 15606: 									}
; 15607: 									//#ifdef _STONDEBUG_		î¸î
; 15608: 									if (mouse.onceState & MOUSE_RIGHT_CRICK  && mouse.itemNo == -1) {

  0985d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  09862	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5050@MenuProc:
  09865	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv38811[ebp]
$LN4806@MenuProc:
  0986b	f6 05 2c 00 00
	00 02		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 2
  09872	0f 84 80 05 00
	00		 je	 $LN4811@MenuProc
  09878	83 3d 48 00 00
	00 ff		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  0987f	0f 85 73 05 00
	00		 jne	 $LN4811@MenuProc

; 15609: 										int j;
; 15610: 										int cnt = 0;
; 15611: 										if (pc.item[i].useFlag == TRUE && i >= MAX_ITEMSTART) {

  09885	66 83 ba a0 01
	00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[edx+416], 1
  0988d	0f 85 91 03 00
	00		 jne	 $LN1219@MenuProc
  09893	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
  09899	83 f9 09	 cmp	 ecx, 9
  0989c	0f 8c 82 03 00
	00		 jl	 $LN1219@MenuProc

; 15612: 											int j;
; 15613: 											int flag = 0;
; 15614: 											if (itemNo != -1) itemNo = -1;

  098a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemNo@@3HA
  098a7	83 f8 ff	 cmp	 eax, -1
  098aa	c7 85 f8 b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _flag$1$[ebp], 0
  098b4	0f 45 85 d8 b9
	ff ff		 cmovne	 eax, DWORD PTR tv37341[ebp]
  098bb	a3 00 00 00 00	 mov	 DWORD PTR ?itemNo@@3HA, eax

; 15615: 											for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  098c0	b8 3c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+316
  098c5	c7 85 e0 b9 ff
	ff 09 00 00 00	 mov	 DWORD PTR _j$1$[ebp], 9
  098cf	90		 npad	 1
$LL252@MenuProc:

; 15616: 												if (ItemBuffer[j].mixFlag >= TRUE) {

  098d0	83 38 01	 cmp	 DWORD PTR [eax], 1
  098d3	8b bd 08 ba ff
	ff		 mov	 edi, DWORD PTR _x$3$[ebp]
  098d9	7d 18		 jge	 SHORT $LN2308@MenuProc

; 15615: 											for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  098db	ff 85 e0 b9 ff
	ff		 inc	 DWORD PTR _j$1$[ebp]
  098e1	83 c0 20	 add	 eax, 32			; 00000020H
  098e4	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  098e9	7c e5		 jl	 SHORT $LL252@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  098eb	8b 85 f8 b9 ff
	ff		 mov	 eax, DWORD PTR _flag$1$[ebp]
  098f1	eb 02		 jmp	 SHORT $LN251@MenuProc
$LN2308@MenuProc:

; 15617: 													flag = ItemBuffer[j].mixFlag;

  098f3	8b 00		 mov	 eax, DWORD PTR [eax]
$LN251@MenuProc:

; 15618: 													break;
; 15619: 												}
; 15620: 											}
; 15621: 											if (ItemBuffer[i].mixFlag == FALSE) {

  098f5	83 be 1c 00 00
	00 00		 cmp	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 0
  098fc	0f 85 c5 02 00
	00		 jne	 $LN1223@MenuProc

; 15622: 												if (flag == 0) {

  09902	0f b7 8a a8 01
	00 00		 movzx	 ecx, WORD PTR ?pc@@3UPC@@A[edx+424]
  09909	89 8d ec b9 ff
	ff		 mov	 DWORD PTR tv38701[ebp], ecx
  0990f	83 a5 ec b9 ff
	ff 04		 and	 DWORD PTR tv38701[ebp], 4
  09916	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR tv38702[ebp], ecx
  0991c	85 c0		 test	 eax, eax
  0991e	0f 85 c4 01 00
	00		 jne	 $LN1225@MenuProc

; 15623: 													if (pc.item[i].sendFlag & ITEM_FLAG_COOKING_MIX) {

  09924	66 39 85 ec b9
	ff ff		 cmp	 WORD PTR tv38701[ebp], ax
  0992b	74 46		 je	 SHORT $LN1227@MenuProc

; 15624: 														if (CheckPetSkill(PETSKILL_MERGE2) == TRUE) {

  0992d	68 c9 00 00 00	 push	 201			; 000000c9H
  09932	e8 00 00 00 00	 call	 ?CheckPetSkill@@YAHH@Z	; CheckPetSkill
  09937	83 c4 04	 add	 esp, 4
  0993a	83 f8 01	 cmp	 eax, 1
$LN5166@MenuProc:

; 15750: 										else
; 15751: 											play_se(220, 320, 240);
; 15752: 
; 15753: 										for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  0993d	75 1f		 jne	 SHORT $LN1229@MenuProc
  0993f	68 f0 00 00 00	 push	 240			; 000000f0H
  09944	b8 d9 00 00 00	 mov	 eax, 217		; 000000d9H
  09949	c7 86 1c 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 2
  09953	68 40 01 00 00	 push	 320			; 00000140H
  09958	50		 push	 eax
  09959	e9 d5 02 00 00	 jmp	 $LN5125@MenuProc
$LN1229@MenuProc:
  0995e	68 f0 00 00 00	 push	 240			; 000000f0H
  09963	b8 dc 00 00 00	 mov	 eax, 220		; 000000dcH
  09968	68 40 01 00 00	 push	 320			; 00000140H
  0996d	50		 push	 eax
  0996e	e9 c0 02 00 00	 jmp	 $LN5125@MenuProc
$LN1227@MenuProc:
  09973	f6 c1 18	 test	 cl, 24			; 00000018H

; 15625: 															ItemBuffer[i].mixFlag = 2;
; 15626: 															play_se(217, 320, 240);
; 15627: 														}
; 15628: 														else {
; 15629: 															play_se(220, 320, 240);
; 15630: 														}
; 15631: 													}
; 15632: 													//andy_add
; 15633: 													else if (pc.item[i].sendFlag & ITEM_FLAG_METAL_MIX ||

  09976	0f 85 39 01 00
	00		 jne	 $LN1233@MenuProc

; 15639: 														else {
; 15640: 															play_se(220, 320, 240);
; 15641: 														}
; 15642: 													}
; 15643: 													else if (pc.item[i].sendFlag & ITEM_FLAG_FIX_MIX) {

  0997c	f6 c1 20	 test	 cl, 32			; 00000020H
  0997f	74 56		 je	 SHORT $LN1236@MenuProc

; 15644: 														if (CheckPetSkill(PETSKILL_FIXITEM) || CheckPetSkill(PETSKILL_FIXITEM2)) {

  09981	68 1c 02 00 00	 push	 540			; 0000021cH
  09986	e8 00 00 00 00	 call	 ?CheckPetSkill@@YAHH@Z	; CheckPetSkill
  0998b	83 c4 04	 add	 esp, 4
  0998e	85 c0		 test	 eax, eax
  09990	75 26		 jne	 SHORT $LN1240@MenuProc
  09992	68 98 02 00 00	 push	 664			; 00000298H
  09997	e8 00 00 00 00	 call	 ?CheckPetSkill@@YAHH@Z	; CheckPetSkill
  0999c	83 c4 04	 add	 esp, 4
  0999f	85 c0		 test	 eax, eax
  099a1	75 15		 jne	 SHORT $LN1240@MenuProc

; 15645: 															ItemBuffer[i].mixFlag = 11;
; 15646: 															play_se(217, 320, 240);
; 15647: 														}
; 15648: 														else {
; 15649: 															play_se(220, 320, 240);
; 15650: 														}
; 15651: 													}

  099a3	68 f0 00 00 00	 push	 240			; 000000f0H
  099a8	b8 dc 00 00 00	 mov	 eax, 220		; 000000dcH
  099ad	68 40 01 00 00	 push	 320			; 00000140H
  099b2	50		 push	 eax
  099b3	e9 7b 02 00 00	 jmp	 $LN5125@MenuProc
$LN1240@MenuProc:
  099b8	68 f0 00 00 00	 push	 240			; 000000f0H
  099bd	b8 d9 00 00 00	 mov	 eax, 217		; 000000d9H
  099c2	c7 86 1c 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 11 ; 0000000bH
  099cc	68 40 01 00 00	 push	 320			; 00000140H
  099d1	50		 push	 eax
  099d2	e9 5c 02 00 00	 jmp	 $LN5125@MenuProc
$LN1236@MenuProc:

; 15652: #ifdef _ITEM_INTENSIFY
; 15653: 													else if (pc.item[i].sendFlag & ITEM_FLAG_INTENSIFY_MIX) {

  099d7	f6 c1 40	 test	 cl, 64			; 00000040H
  099da	74 34		 je	 SHORT $LN1241@MenuProc

; 15654: 														if (CheckPetSkill(PETSKILL_INTENSIFY)) {

  099dc	68 8a 02 00 00	 push	 650			; 0000028aH
  099e1	e8 00 00 00 00	 call	 ?CheckPetSkill@@YAHH@Z	; CheckPetSkill
  099e6	83 c4 04	 add	 esp, 4
  099e9	85 c0		 test	 eax, eax
  099eb	0f 84 6d ff ff
	ff		 je	 $LN1229@MenuProc

; 15750: 										else
; 15751: 											play_se(220, 320, 240);
; 15752: 
; 15753: 										for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  099f1	68 f0 00 00 00	 push	 240			; 000000f0H
  099f6	b8 d9 00 00 00	 mov	 eax, 217		; 000000d9H
  099fb	c7 86 1c 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 12 ; 0000000cH
  09a05	68 40 01 00 00	 push	 320			; 00000140H
  09a0a	50		 push	 eax
  09a0b	e9 23 02 00 00	 jmp	 $LN5125@MenuProc
$LN1241@MenuProc:

; 15655: 															ItemBuffer[i].mixFlag = 12;
; 15656: 															play_se(217, 320, 240);
; 15657: 														}
; 15658: 														else {
; 15659: 															play_se(220, 320, 240);
; 15660: 														}
; 15661: 													}
; 15662: #endif
; 15663: 
; 15664: 													else {
; 15665: #ifdef _ALCHEMIST // ç¬¬ä¸ä¸ªæ¯å¦ç²¾ç¼ç©
; 15666: 														if (CheckPetSkill(PETSKILL_ALCHEMIST) == TRUE &&
; 15667: 															pc.item[i].sendFlag & ITEM_FLAG_MIX &&

  09a10	68 ca 00 00 00	 push	 202			; 000000caH
  09a15	e8 00 00 00 00	 call	 ?CheckPetSkill@@YAHH@Z	; CheckPetSkill
  09a1a	83 c4 04	 add	 esp, 4
  09a1d	83 f8 01	 cmp	 eax, 1
  09a20	75 56		 jne	 SHORT $LN1245@MenuProc
  09a22	f6 85 f8 b9 ff
	ff 02		 test	 BYTE PTR tv38702[ebp], 2
  09a29	74 4d		 je	 SHORT $LN1245@MenuProc
  09a2b	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38811[ebp]
  09a31	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01OGPIMHDM@?$DP@
  09a36	8d 80 d4 00 00
	00		 lea	 eax, DWORD PTR ?pc@@3UPC@@A[eax+212]
  09a3c	0f 1f 40 00	 npad	 4
$LL4325@MenuProc:
  09a40	8a 10		 mov	 dl, BYTE PTR [eax]
  09a42	3a 11		 cmp	 dl, BYTE PTR [ecx]
  09a44	75 1a		 jne	 SHORT $LN4326@MenuProc
  09a46	84 d2		 test	 dl, dl
  09a48	74 12		 je	 SHORT $LN4327@MenuProc
  09a4a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  09a4d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  09a50	75 0e		 jne	 SHORT $LN4326@MenuProc
  09a52	83 c0 02	 add	 eax, 2
  09a55	83 c1 02	 add	 ecx, 2
  09a58	84 d2		 test	 dl, dl
  09a5a	75 e4		 jne	 SHORT $LL4325@MenuProc
$LN4327@MenuProc:
  09a5c	33 c0		 xor	 eax, eax
  09a5e	eb 05		 jmp	 SHORT $LN4328@MenuProc
$LN4326@MenuProc:
  09a60	1b c0		 sbb	 eax, eax
  09a62	83 c8 01	 or	 eax, 1
$LN4328@MenuProc:
  09a65	85 c0		 test	 eax, eax
  09a67	74 0f		 je	 SHORT $LN1245@MenuProc

; 15668: 															strcmp(pc.item[i].alch, "æ") != NULL) {
; 15669: 															ItemBuffer[i].mixFlag = 9;

  09a69	c7 86 1c 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 9

; 15670: 														}

  09a73	e9 c3 01 00 00	 jmp	 $LN1220@MenuProc
$LN1245@MenuProc:

; 15671: 														else
; 15672: #endif
; 15673: 															if (CheckPetSkill(PETSKILL_MERGE) == TRUE &&

  09a78	68 c8 00 00 00	 push	 200			; 000000c8H
  09a7d	e8 00 00 00 00	 call	 ?CheckPetSkill@@YAHH@Z	; CheckPetSkill
  09a82	83 c4 04	 add	 esp, 4
  09a85	83 f8 01	 cmp	 eax, 1
  09a88	0f 85 96 01 00
	00		 jne	 $LN1219@MenuProc
  09a8e	f6 85 f8 b9 ff
	ff 02		 test	 BYTE PTR tv38702[ebp], 2
  09a95	0f 84 89 01 00
	00		 je	 $LN1219@MenuProc

; 15674: 																pc.item[i].sendFlag & ITEM_FLAG_MIX) {
; 15675: 																ItemBuffer[i].mixFlag = 1;
; 15676: 																play_se(217, 320, 240);

  09a9b	68 f0 00 00 00	 push	 240			; 000000f0H
  09aa0	68 40 01 00 00	 push	 320			; 00000140H
  09aa5	89 86 1c 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], eax
  09aab	68 d9 00 00 00	 push	 217			; 000000d9H

; 15677: 															}

  09ab0	e9 7e 01 00 00	 jmp	 $LN5125@MenuProc
$LN1233@MenuProc:

; 15634: 														pc.item[i].sendFlag & ITEM_FLAG_JEWEL_MIX) {
; 15635: 														if (CheckPetSkill(PETSKILL_INSLAY)) {

  09ab5	68 3c 02 00 00	 push	 572			; 0000023cH
  09aba	e8 00 00 00 00	 call	 ?CheckPetSkill@@YAHH@Z	; CheckPetSkill
  09abf	83 c4 04	 add	 esp, 4
  09ac2	85 c0		 test	 eax, eax
  09ac4	0f 84 5a 01 00
	00		 je	 $LN1219@MenuProc

; 15636: 															ItemBuffer[i].mixFlag = 10;
; 15637: 															play_se(217, 320, 240);

  09aca	68 f0 00 00 00	 push	 240			; 000000f0H
  09acf	68 40 01 00 00	 push	 320			; 00000140H
  09ad4	c7 86 1c 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 10 ; 0000000aH
  09ade	68 d9 00 00 00	 push	 217			; 000000d9H

; 15638: 														}

  09ae3	e9 4b 01 00 00	 jmp	 $LN5125@MenuProc
$LN1225@MenuProc:

; 15678: 															else {
; 15679: 																play_se(220, 320, 240);
; 15680: 															}
; 15681: 													}
; 15682: 												}
; 15683: 												else {
; 15684: 													if (pc.item[i].sendFlag & ITEM_FLAG_COOKING_MIX) {

  09ae8	66 83 bd ec b9
	ff ff 00	 cmp	 WORD PTR tv38701[ebp], 0
  09af0	74 08		 je	 SHORT $LN1249@MenuProc

; 15685: 														if (flag == 2) {

  09af2	83 f8 02	 cmp	 eax, 2

; 15686: 															ItemBuffer[i].mixFlag = 2;
; 15687: 															play_se(217, 320, 240);
; 15688: 														}

  09af5	e9 43 fe ff ff	 jmp	 $LN5166@MenuProc
$LN1249@MenuProc:

; 15689: 														else {
; 15690: 															play_se(220, 320, 240);
; 15691: 														}
; 15692: 													}
; 15693: 
; 15694: 													else {
; 15695: 														if (flag == 1) {

  09afa	83 f8 01	 cmp	 eax, 1
  09afd	75 1a		 jne	 SHORT $LN1253@MenuProc

; 15696: 															ItemBuffer[i].mixFlag = 1;
; 15697: 															play_se(217, 320, 240);

  09aff	68 f0 00 00 00	 push	 240			; 000000f0H
  09b04	68 40 01 00 00	 push	 320			; 00000140H
  09b09	89 86 1c 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], eax
  09b0f	68 d9 00 00 00	 push	 217			; 000000d9H

; 15698: 														}

  09b14	e9 1a 01 00 00	 jmp	 $LN5125@MenuProc
$LN1253@MenuProc:

; 15699: #ifdef _ALCHEMIST // ç¬¬ä¸ä¸ªä¹åçç²¾ç¼ç©
; 15700: 														else if (flag == 9) {

  09b19	83 f8 09	 cmp	 eax, 9
  09b1c	75 5c		 jne	 SHORT $LN1255@MenuProc

; 15701: 															if (strcmp(pc.item[i].alch, pc.item[j].alch) == FALSE) {

  09b1e	69 85 e0 b9 ff
	ff 7c 01 00 00	 imul	 eax, DWORD PTR _j$1$[ebp], 380
  09b28	8d 8a d4 00 00
	00		 lea	 ecx, DWORD PTR ?pc@@3UPC@@A[edx+212]
  09b2e	05 d4 00 00 00	 add	 eax, OFFSET ?pc@@3UPC@@A+212
$LL4329@MenuProc:
  09b33	8a 11		 mov	 dl, BYTE PTR [ecx]
  09b35	3a 10		 cmp	 dl, BYTE PTR [eax]
  09b37	75 1a		 jne	 SHORT $LN4330@MenuProc
  09b39	84 d2		 test	 dl, dl
  09b3b	74 12		 je	 SHORT $LN4331@MenuProc
  09b3d	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  09b40	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  09b43	75 0e		 jne	 SHORT $LN4330@MenuProc
  09b45	83 c1 02	 add	 ecx, 2
  09b48	83 c0 02	 add	 eax, 2
  09b4b	84 d2		 test	 dl, dl
  09b4d	75 e4		 jne	 SHORT $LL4329@MenuProc
$LN4331@MenuProc:
  09b4f	33 c0		 xor	 eax, eax
  09b51	eb 05		 jmp	 SHORT $LN4332@MenuProc
$LN4330@MenuProc:
  09b53	1b c0		 sbb	 eax, eax
  09b55	83 c8 01	 or	 eax, 1
$LN4332@MenuProc:
  09b58	85 c0		 test	 eax, eax
  09b5a	75 0a		 jne	 SHORT $LN1257@MenuProc

; 15702: 																ItemBuffer[i].mixFlag = 9;

  09b5c	c7 86 1c 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 9
$LN1257@MenuProc:

; 15703: 															}
; 15704: 															play_se(217, 320, 240);

  09b66	68 f0 00 00 00	 push	 240			; 000000f0H
  09b6b	68 40 01 00 00	 push	 320			; 00000140H
  09b70	68 d9 00 00 00	 push	 217			; 000000d9H

; 15705: 														}

  09b75	e9 b9 00 00 00	 jmp	 $LN5125@MenuProc
$LN1255@MenuProc:

; 15706: #endif
; 15707: 														else if (flag == 10) {	//andy_add inslay

  09b7a	68 f0 00 00 00	 push	 240			; 000000f0H
  09b7f	68 40 01 00 00	 push	 320			; 00000140H
  09b84	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  09b87	75 10		 jne	 SHORT $LN1258@MenuProc

; 15708: 															ItemBuffer[i].mixFlag = 10;

  09b89	89 86 1c 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], eax

; 15709: 															play_se(217, 320, 240);

  09b8f	68 d9 00 00 00	 push	 217			; 000000d9H

; 15710: 														}

  09b94	e9 9a 00 00 00	 jmp	 $LN5125@MenuProc
$LN1258@MenuProc:

; 15711: 														else if (flag == 11) {	//andy_add fixitem

  09b99	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  09b9c	75 10		 jne	 SHORT $LN1260@MenuProc

; 15712: 															ItemBuffer[i].mixFlag = 11;

  09b9e	89 86 1c 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], eax

; 15713: 															play_se(217, 320, 240);

  09ba4	68 d9 00 00 00	 push	 217			; 000000d9H

; 15714: 														}

  09ba9	e9 85 00 00 00	 jmp	 $LN5125@MenuProc
$LN1260@MenuProc:

; 15715: #ifdef _ITEM_INTENSIFY
; 15716: 														else if (flag == 12) {

  09bae	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  09bb1	0f 85 77 00 00
	00		 jne	 $LN1262@MenuProc

; 15717: 															ItemBuffer[i].mixFlag = 12;

  09bb7	89 86 1c 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], eax

; 15718: 															play_se(217, 320, 240);

  09bbd	68 d9 00 00 00	 push	 217			; 000000d9H

; 15719: 														}

  09bc2	e9 6c 00 00 00	 jmp	 $LN5125@MenuProc
$LN1223@MenuProc:

; 15720: #endif
; 15721: 														else {
; 15722: 															play_se(220, 320, 240);
; 15723: 														}
; 15724: 
; 15725: 													}
; 15726: 												}
; 15727: 											}
; 15728: 											else
; 15729: 											{
; 15730: #ifdef _ALCHEMIST // ì·¨ìä¸ä¸ªåæç©æ¶...
; 15731: 												if (ItemBuffer[i].mixFlag == 9) {

  09bc7	83 be 1c 00 00
	00 09		 cmp	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 9
  09bce	75 39		 jne	 SHORT $LN1264@MenuProc

; 15732: 													int k;
; 15733: 													ItemBuffer[i].mixFlag = 1;

  09bd0	c7 86 1c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 1

; 15734: 													for (k = MAX_ITEMSTART; k < MAX_ITEM; k++) {

  09bda	ba 09 00 00 00	 mov	 edx, 9
  09bdf	b8 3c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+316
$LL255@MenuProc:

; 15735: 														if (ItemBuffer[k].mixFlag >= TRUE && (k != i)) {

  09be4	83 38 01	 cmp	 DWORD PTR [eax], 1
  09be7	7c 04		 jl	 SHORT $LN253@MenuProc
  09be9	3b d1		 cmp	 edx, ecx
  09beb	75 1c		 jne	 SHORT $LN1264@MenuProc
$LN253@MenuProc:

; 15734: 													for (k = MAX_ITEMSTART; k < MAX_ITEM; k++) {

  09bed	83 c0 20	 add	 eax, 32			; 00000020H
  09bf0	42		 inc	 edx
  09bf1	3d dc 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  09bf6	7c ec		 jl	 SHORT $LL255@MenuProc

; 15736: 															ItemBuffer[i].mixFlag = FALSE;
; 15737: 															break;
; 15738: 														}
; 15739: 													}
; 15740: 												}
; 15741: 												else {
; 15742: 													ItemBuffer[i].mixFlag = FALSE;
; 15743: 												}
; 15744: #else
; 15745: 												ItemBuffer[i].mixFlag = FALSE;
; 15746: #endif
; 15747: 												play_se(217, 320, 240);

  09bf8	68 f0 00 00 00	 push	 240			; 000000f0H
  09bfd	68 40 01 00 00	 push	 320			; 00000140H
  09c02	68 d9 00 00 00	 push	 217			; 000000d9H

; 15748: 											}
; 15749: 										}

  09c07	eb 2a		 jmp	 SHORT $LN5125@MenuProc
$LN1264@MenuProc:

; 15736: 															ItemBuffer[i].mixFlag = FALSE;
; 15737: 															break;
; 15738: 														}
; 15739: 													}
; 15740: 												}
; 15741: 												else {
; 15742: 													ItemBuffer[i].mixFlag = FALSE;
; 15743: 												}
; 15744: #else
; 15745: 												ItemBuffer[i].mixFlag = FALSE;
; 15746: #endif
; 15747: 												play_se(217, 320, 240);

  09c09	68 f0 00 00 00	 push	 240			; 000000f0H
  09c0e	68 40 01 00 00	 push	 320			; 00000140H
  09c13	c7 86 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 0
  09c1d	68 d9 00 00 00	 push	 217			; 000000d9H

; 15748: 											}
; 15749: 										}

  09c22	eb 0f		 jmp	 SHORT $LN5125@MenuProc
$LN1219@MenuProc:

; 15750: 										else
; 15751: 											play_se(220, 320, 240);
; 15752: 
; 15753: 										for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  09c24	68 f0 00 00 00	 push	 240			; 000000f0H
  09c29	68 40 01 00 00	 push	 320			; 00000140H
$LN1262@MenuProc:
  09c2e	68 dc 00 00 00	 push	 220			; 000000dcH
$LN5125@MenuProc:
  09c33	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  09c38	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1220@MenuProc:
  09c3b	0f 28 2d 00 00
	00 00		 movaps	 xmm5, XMMWORD PTR __xmm@00000001000000010000000100000001
  09c42	0f 57 f6	 xorps	 xmm6, xmm6
  09c45	0f 28 3d 00 00
	00 00		 movaps	 xmm7, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  09c4c	0f 57 e4	 xorps	 xmm4, xmm4
  09c4f	b8 7c 01 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+380
  09c54	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL258@MenuProc:

; 15754: 											if (ItemBuffer[j].mixFlag >= 1) cnt++;

  09c60	66 0f 6e 50 20	 movd	 xmm2, DWORD PTR [eax+32]
  09c65	66 0f 6e 00	 movd	 xmm0, DWORD PTR [eax]
  09c69	66 0f 6e 48 e0	 movd	 xmm1, DWORD PTR [eax-32]
  09c6e	66 0f 6e 58 c0	 movd	 xmm3, DWORD PTR [eax-64]
  09c73	66 0f 62 d8	 punpckldq xmm3, xmm0
  09c77	0f 28 c5	 movaps	 xmm0, xmm5
  09c7a	66 0f 62 ca	 punpckldq xmm1, xmm2
  09c7e	66 0f fe c6	 paddd	 xmm0, xmm6
  09c82	66 0f 6e 90 a0
	00 00 00	 movd	 xmm2, DWORD PTR [eax+160]
  09c8a	66 0f 62 d9	 punpckldq xmm3, xmm1
  09c8e	0f 28 cd	 movaps	 xmm1, xmm5
  09c91	66 0f 66 cb	 pcmpgtd xmm1, xmm3
  09c95	66 0f 6e 58 40	 movd	 xmm3, DWORD PTR [eax+64]
  09c9a	66 0f df cf	 pandn	 xmm1, xmm7
  09c9e	66 0f db c1	 pand	 xmm0, xmm1
  09ca2	66 0f df ce	 pandn	 xmm1, xmm6
  09ca6	66 0f eb c1	 por	 xmm0, xmm1
  09caa	66 0f 6e 48 60	 movd	 xmm1, DWORD PTR [eax+96]
  09caf	0f 28 f0	 movaps	 xmm6, xmm0
  09cb2	66 0f 62 ca	 punpckldq xmm1, xmm2
  09cb6	66 0f 6e 80 80
	00 00 00	 movd	 xmm0, DWORD PTR [eax+128]
  09cbe	05 00 01 00 00	 add	 eax, 256		; 00000100H
  09cc3	66 0f 62 d8	 punpckldq xmm3, xmm0
  09cc7	0f 28 c5	 movaps	 xmm0, xmm5
  09cca	66 0f 62 d9	 punpckldq xmm3, xmm1
  09cce	0f 28 cd	 movaps	 xmm1, xmm5
  09cd1	66 0f 66 cb	 pcmpgtd xmm1, xmm3
  09cd5	66 0f fe c4	 paddd	 xmm0, xmm4
  09cd9	66 0f df cf	 pandn	 xmm1, xmm7
  09cdd	66 0f db c1	 pand	 xmm0, xmm1
  09ce1	66 0f df cc	 pandn	 xmm1, xmm4
  09ce5	66 0f eb c1	 por	 xmm0, xmm1
  09ce9	0f 28 e0	 movaps	 xmm4, xmm0
  09cec	3d 7c 06 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1660
  09cf1	0f 8c 69 ff ff
	ff		 jl	 $LL258@MenuProc

; 15750: 										else
; 15751: 											play_se(220, 320, 240);
; 15752: 
; 15753: 										for (j = MAX_ITEMSTART; j < MAX_ITEM; j++) {

  09cf7	66 0f fe e6	 paddd	 xmm4, xmm6
  09cfb	b9 3c 06 00 00	 mov	 ecx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1596
  09d00	0f 28 c4	 movaps	 xmm0, xmm4
  09d03	66 0f 73 d8 08	 psrldq	 xmm0, 8
  09d08	66 0f fe e0	 paddd	 xmm4, xmm0
  09d0c	0f 10 c4	 movups	 xmm0, xmm4
  09d0f	66 0f 73 d8 04	 psrldq	 xmm0, 4
  09d14	66 0f fe e0	 paddd	 xmm4, xmm0
  09d18	66 0f 7e e2	 movd	 edx, xmm4
  09d1c	0f 1f 40 00	 npad	 4
$LL2769@MenuProc:
  09d20	83 39 01	 cmp	 DWORD PTR [ecx], 1
  09d23	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  09d26	0f 4c c2	 cmovl	 eax, edx
  09d29	83 c1 20	 add	 ecx, 32			; 00000020H
  09d2c	8b d0		 mov	 edx, eax
  09d2e	81 f9 dc 06 00
	00		 cmp	 ecx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1756
  09d34	7c ea		 jl	 SHORT $LL2769@MenuProc

; 15755: 										}
; 15756: 										if (cnt >= 2) {

  09d36	83 fa 02	 cmp	 edx, 2
  09d39	0f 8c b9 00 00
	00		 jl	 $LN4811@MenuProc

; 15757: 											if (!(MenuToggleFlag & JOY_CTRL_P)) {

  09d3f	f7 05 00 00 00
	00 00 00 00 10	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 268435456 ; MenuToggleFlag, 10000000H
  09d49	0f 85 a9 00 00
	00		 jne	 $LN4811@MenuProc

; 15758: 												MenuToggleFlag ^= JOY_CTRL_P;	// CTRL + S

  09d4f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  09d56	81 35 00 00 00
	00 00 00 00 10	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 268435456 ; MenuToggleFlag, 10000000H
  09d60	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0

; 15759: 												for (j = 0; j < MENU_PET_0; j++) petWndFontNo[j] = -2;
; 15760: 												for (j = 0; j < MENU_PET_0; j++) petWndBtnFlag[j] = 0;
; 15761: 												petWndNo = 0;

  09d67	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 0
  09d71	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0
  09d78	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0
  09d7f	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  09d86	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0
  09d8d	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0
  09d95	0f 57 c0	 xorps	 xmm0, xmm0
  09d98	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndBtnFlag@@3PAHA, xmm0
  09d9f	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndBtnFlag@@3PAHA+16, xmm0
  09da6	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndBtnFlag@@3PAHA+32, xmm0
  09dad	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndBtnFlag@@3PAHA+48, xmm0
  09db4	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndBtnFlag@@3PAHA+64, xmm0
  09dbb	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndBtnFlag@@3PAHA+80, xmm0

; 15762: 												DeathMenuAction();

  09dc3	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 15763: 												saveUserSetting();

  09dc8	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 15764: 												play_se(202, 320, 240);

  09dcd	68 f0 00 00 00	 push	 240			; 000000f0H
  09dd2	68 40 01 00 00	 push	 320			; 00000140H
  09dd7	68 ca 00 00 00	 push	 202			; 000000caH
  09ddc	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 15765: 												MenuToggleFlag &= JOY_CTRL_I;	// 

  09de1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MenuToggleFlag@@3IA ; MenuToggleFlag
  09de6	83 c4 0c	 add	 esp, 12			; 0000000cH
  09de9	25 00 00 00 08	 and	 eax, 134217728		; 08000000H

; 15766: 												MenuToggleFlag |= JOY_CTRL_P;	// 

  09dee	0d 00 00 00 10	 or	 eax, 268435456		; 10000000H
  09df3	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag
$LN4811@MenuProc:

; 15767: 											}
; 15768: 										}
; 15769: 									}
; 15770: 								}
; 15771: 							}
; 15772: #ifdef _PET_ITEM
; 15773: 							if (g_bPetItemWndFlag && nSelectPet > -1 && (i >= PET_HEAD && i < PET_EQUIPNUM) && pet[nSelectPet].useFlag == TRUE)

  09df8	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  09dff	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
  09e05	74 4d		 je	 SHORT $LN1270@MenuProc
  09e07	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectPet@@3HA
  09e0c	83 f8 ff	 cmp	 eax, -1
  09e0f	7e 43		 jle	 SHORT $LN1270@MenuProc
  09e11	83 f9 06	 cmp	 ecx, 6
  09e14	77 3e		 ja	 SHORT $LN1270@MenuProc
  09e16	69 d0 78 0b 00
	00		 imul	 edx, eax, 2936
  09e1c	66 83 ba 76 00
	00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[edx+118], 1
  09e24	75 2e		 jne	 SHORT $LN1270@MenuProc

; 15774: 								StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pet[nSelectPet].item[i].graNo, 0);

  09e26	69 c1 7c 01 00
	00		 imul	 eax, ecx, 380
  09e2c	6a 00		 push	 0
  09e2e	89 85 0c ba ff
	ff		 mov	 DWORD PTR tv38479[ebp], eax
  09e34	ff b4 02 80 00
	00 00		 push	 DWORD PTR ?pet@@3PAUPET@@A[edx+eax+128]
  09e3b	0f b6 86 14 00
	00 00		 movzx	 eax, BYTE PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+20]
  09e42	50		 push	 eax
  09e43	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  09e49	ff b6 08 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  09e4f	e9 21 01 00 00	 jmp	 $LN5126@MenuProc
$LN1270@MenuProc:

; 15775: 							else
; 15776: #endif
; 15777: 								if (pc.item[i].useFlag == TRUE) {

  09e54	69 c1 7c 01 00
	00		 imul	 eax, ecx, 380
  09e5a	89 85 0c ba ff
	ff		 mov	 DWORD PTR tv38479[ebp], eax
  09e60	66 83 b8 a0 01
	00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[eax+416], 1
  09e68	0f 85 1b 01 00
	00		 jne	 $LN1288@MenuProc

; 15778: #ifdef _PET_ITEM
; 15779: 									if (!(g_bPetItemWndFlag && i < CHAR_EQUIPPLACENUM))

  09e6e	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  09e75	74 09		 je	 SHORT $LN1274@MenuProc
  09e77	83 f9 09	 cmp	 ecx, 9
  09e7a	0f 8c 09 01 00
	00		 jl	 $LN1288@MenuProc
$LN1274@MenuProc:

; 15780: #endif
; 15781: 									{
; 15782: #if 0 //#ifdef _ALCHEMIST
; 15783: 										if (ItemBuffer[i].mixFlag <= 9)
; 15784: #else
; 15785: 										if (ItemBuffer[i].mixFlag <= 2)

  09e80	8b 96 1c 00 00
	00		 mov	 edx, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28]
  09e86	83 fa 02	 cmp	 edx, 2
  09e89	0f 8f 75 00 00
	00		 jg	 $LN1275@MenuProc

; 15786: #endif
; 15787: 										{
; 15788: 											StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);

  09e8f	6a 00		 push	 0
  09e91	ff b0 c8 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A[eax+200]
  09e97	0f b6 86 14 00
	00 00		 movzx	 eax, BYTE PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+20]
  09e9e	50		 push	 eax
  09e9f	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  09ea5	ff b6 08 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  09eab	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 15789: #ifdef _ITEM_PILENUMS
; 15790: 											if (pc.item[i].pile > 1)

  09eb0	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38479[ebp]
  09eb6	83 c4 14	 add	 esp, 20			; 00000014H
  09eb9	8b 88 d0 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A[eax+208]
  09ebf	83 f9 01	 cmp	 ecx, 1
  09ec2	0f 8e bb 00 00
	00		 jle	 $LN4813@MenuProc

; 15791: 											{
; 15792: 												char pile[256];
; 15793: 												sprintf(pile, "%d", pc.item[i].pile);

  09ec8	51		 push	 ecx
  09ec9	8d 85 50 ea ff
	ff		 lea	 eax, DWORD PTR _pile$40[ebp]
  09ecf	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  09ed4	50		 push	 eax
  09ed5	e8 00 00 00 00	 call	 _sprintf

; 15794: 												StockFontBuffer(ItemBuffer[i].defX + 10, ItemBuffer[i].defY, FONT_PRIO_FRONT, FONT_PAL_WHITE, pile, 0);

  09eda	6a 00		 push	 0
  09edc	8d 85 50 ea ff
	ff		 lea	 eax, DWORD PTR _pile$40[ebp]
  09ee2	50		 push	 eax
  09ee3	8b 86 08 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  09ee9	6a 00		 push	 0
  09eeb	6a 01		 push	 1
  09eed	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  09ef3	83 c0 0a	 add	 eax, 10			; 0000000aH
  09ef6	50		 push	 eax
  09ef7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  09efc	83 c4 24	 add	 esp, 36			; 00000024H

; 15795: 											}
; 15796: #endif
; 15797: 										}

  09eff	e9 79 00 00 00	 jmp	 $LN5127@MenuProc
$LN1275@MenuProc:

; 15798: #ifdef _ALCHEMIST
; 15799: 										else if (ItemBuffer[i].mixFlag == 9) {

  09f04	83 fa 09	 cmp	 edx, 9
  09f07	75 1e		 jne	 SHORT $LN1278@MenuProc
$LN5129@MenuProc:

; 15820: 										}
; 15821: 
; 15822: 									}
; 15823: 								}
; 15824: 							// æ¾ç¤ºåææå­
; 15825: 							if (ItemBuffer[i].mixFlag >= TRUE) {

  09f09	6a 00		 push	 0
  09f0b	ff b0 c8 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A[eax+200]
  09f11	0f b6 86 14 00
	00 00		 movzx	 eax, BYTE PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+20]
  09f18	50		 push	 eax
  09f19	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  09f1f	ff b6 08 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  09f25	eb 4e		 jmp	 SHORT $LN5126@MenuProc
$LN1278@MenuProc:

; 15800: 											StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);
; 15801: 										}
; 15802: #endif
; 15803: 										else if (ItemBuffer[i].mixFlag == 10) { //andy_add inslay

  09f27	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  09f2a	74 dd		 je	 SHORT $LN5129@MenuProc

; 15804: 											StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);
; 15805: 										}
; 15806: 										else if (ItemBuffer[i].mixFlag == 11) { //andy_add fixitem

  09f2c	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  09f2f	74 d8		 je	 SHORT $LN5129@MenuProc

; 15807: 											StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);
; 15808: 										}
; 15809: #ifdef _ITEM_INTENSIFY
; 15810: 										else if (ItemBuffer[i].mixFlag == 12) { //andy_add fixitem

  09f31	83 fa 0c	 cmp	 edx, 12			; 0000000cH
  09f34	74 d3		 je	 SHORT $LN5129@MenuProc

; 15811: 											StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);
; 15812: 										}
; 15813: #endif
; 15814: 
; 15815: 										else if (ItemBuffer[i].mixFlag == 3) {

  09f36	83 fa 03	 cmp	 edx, 3
  09f39	75 19		 jne	 SHORT $LN1286@MenuProc

; 15816: 											StockDispBuffer(pActPet2->x, pActPet2->y - 16, DISP_PRIO_DRAG, pc.item[i].graNo, 0);

  09f3b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActPet2@@3PAUaction@@A
  09f41	6a 00		 push	 0
  09f43	ff b0 c8 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A[eax+200]
  09f49	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  09f4c	6a 70		 push	 112			; 00000070H
  09f4e	83 e8 10	 sub	 eax, 16			; 00000010H
  09f51	50		 push	 eax

; 15817: 										}

  09f52	eb 1e		 jmp	 SHORT $LN5128@MenuProc
$LN1286@MenuProc:

; 15818: 										else if (ItemBuffer[i].mixFlag == 4) {

  09f54	83 fa 04	 cmp	 edx, 4
  09f57	75 30		 jne	 SHORT $LN1288@MenuProc

; 15819: 											StockDispBuffer(pActPet2->x, pActPet2->y, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);

  09f59	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActPet2@@3PAUaction@@A
  09f5f	6a 00		 push	 0
  09f61	ff b0 c8 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A[eax+200]
  09f67	0f b6 86 14 00
	00 00		 movzx	 eax, BYTE PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+20]
  09f6e	50		 push	 eax
  09f6f	ff 71 1c	 push	 DWORD PTR [ecx+28]
$LN5128@MenuProc:

; 15820: 										}
; 15821: 
; 15822: 									}
; 15823: 								}
; 15824: 							// æ¾ç¤ºåææå­
; 15825: 							if (ItemBuffer[i].mixFlag >= TRUE) {

  09f72	ff 71 18	 push	 DWORD PTR [ecx+24]
$LN5126@MenuProc:
  09f75	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  09f7a	83 c4 14	 add	 esp, 20			; 00000014H
$LN5127@MenuProc:
  09f7d	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38479[ebp]
$LN4813@MenuProc:
  09f83	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
$LN1288@MenuProc:
  09f89	8b 96 1c 00 00
	00		 mov	 edx, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28]
  09f8f	83 fa 01	 cmp	 edx, 1
  09f92	0f 8c 02 01 00
	00		 jl	 $LN5065@MenuProc

; 15826: 								if (pc.item[i].useFlag == TRUE) {

  09f98	66 83 b8 a0 01
	00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[eax+416], 1
  09fa0	0f 85 75 01 00
	00		 jne	 $LN1290@MenuProc

; 15827: 									// æ®éåæçæ¶å
; 15828: 									if (ItemBuffer[i].mixFlag == 1) {

  09fa6	83 fa 01	 cmp	 edx, 1
  09fa9	75 09		 jne	 SHORT $LN1292@MenuProc

; 15829: 										StockFontBuffer(ItemBuffer[i].defX - 17, ItemBuffer[i].defY, FONT_PRIO_FRONT, 0, "í©ì±", 0);

  09fab	6a 00		 push	 0
  09fad	68 00 00 00 00	 push	 OFFSET ??_C@_04KBAMDEME@?G?U?$LM?$LK@

; 15830: 									}

  09fb2	eb 0c		 jmp	 SHORT $LN5130@MenuProc
$LN1292@MenuProc:

; 15831: 									else
; 15832: 										// æçåæçæ¶å
; 15833: 										if (ItemBuffer[i].mixFlag == 2) {

  09fb4	83 fa 02	 cmp	 edx, 2
  09fb7	75 23		 jne	 SHORT $LN1294@MenuProc

; 15834: 											StockFontBuffer(ItemBuffer[i].defX - 17, ItemBuffer[i].defY, FONT_PRIO_FRONT, 0, "ìë¦¬", 0);

  09fb9	6a 00		 push	 0
  09fbb	68 00 00 00 00	 push	 OFFSET ??_C@_04JJOHPIH@?$LP?d?$LI?$KO@
$LN5130@MenuProc:

; 15835: 										}
; 15836: #ifdef _ALCHEMIST
; 15837: 									if (ItemBuffer[i].mixFlag == 9) {

  09fc0	8b 86 08 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  09fc6	6a 00		 push	 0
  09fc8	6a 01		 push	 1
  09fca	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  09fd0	83 e8 11	 sub	 eax, 17			; 00000011H
  09fd3	50		 push	 eax
  09fd4	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  09fd9	83 c4 18	 add	 esp, 24			; 00000018H
$LN1294@MenuProc:
  09fdc	8b 86 1c 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28]
  09fe2	83 f8 09	 cmp	 eax, 9
  09fe5	75 29		 jne	 SHORT $LN1295@MenuProc

; 15838: 										StockFontBuffer(ItemBuffer[i].defX - 17, ItemBuffer[i].defY, FONT_PRIO_FRONT, 0, "ì ë ¨/ì ì ", 0);

  09fe7	8b 86 08 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  09fed	6a 00		 push	 0
  09fef	68 00 00 00 00	 push	 OFFSET ??_C@_09JLDAGEJM@?A?$KE?$LH?C?1?A?$KE?A?$KG@
  09ff4	6a 00		 push	 0
  09ff6	6a 01		 push	 1
  09ff8	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  09ffe	83 e8 11	 sub	 eax, 17			; 00000011H
  0a001	50		 push	 eax
  0a002	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0a007	8b 86 1c 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28]
  0a00d	83 c4 18	 add	 esp, 24			; 00000018H
$LN1295@MenuProc:

; 15839: 									}
; 15840: #endif
; 15841: 									if (ItemBuffer[i].mixFlag == 10) {// PETSKILL_INSLAY ANDY_ADD

  0a010	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0a013	75 29		 jne	 SHORT $LN1296@MenuProc

; 15842: 										StockFontBuffer(ItemBuffer[i].defX - 17, ItemBuffer[i].defY, FONT_PRIO_FRONT, 0, "ì êµ", 0);

  0a015	8b 86 08 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  0a01b	6a 00		 push	 0
  0a01d	68 00 00 00 00	 push	 OFFSET ??_C@_04CENFCOIH@?A?$KE?$LB?$LD@
  0a022	6a 00		 push	 0
  0a024	6a 01		 push	 1
  0a026	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  0a02c	83 e8 11	 sub	 eax, 17			; 00000011H
  0a02f	50		 push	 eax
  0a030	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0a035	8b 86 1c 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28]
  0a03b	83 c4 18	 add	 esp, 24			; 00000018H
$LN1296@MenuProc:

; 15843: 									}
; 15844: 									if (ItemBuffer[i].mixFlag == 11) {// PETSKILL_FIXITEM ANDY_ADD

  0a03e	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0a041	75 29		 jne	 SHORT $LN1297@MenuProc

; 15845: 										StockFontBuffer(ItemBuffer[i].defX - 17, ItemBuffer[i].defY, FONT_PRIO_FRONT, 0, "ìë¦¬", 0);

  0a043	8b 86 08 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  0a049	6a 00		 push	 0
  0a04b	68 00 00 00 00	 push	 OFFSET ??_C@_04LECOJKED@?$LM?v?$LI?$KO@
  0a050	6a 00		 push	 0
  0a052	6a 01		 push	 1
  0a054	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  0a05a	83 e8 11	 sub	 eax, 17			; 00000011H
  0a05d	50		 push	 eax
  0a05e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0a063	8b 86 1c 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28]
  0a069	83 c4 18	 add	 esp, 24			; 00000018H
$LN1297@MenuProc:

; 15846: 									}
; 15847: #ifdef _ITEM_INTENSIFY
; 15848: 									if (ItemBuffer[i].mixFlag == 12) {

  0a06c	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0a06f	75 23		 jne	 SHORT $LN5041@MenuProc

; 15849: 										StockFontBuffer(ItemBuffer[i].defX - 17, ItemBuffer[i].defY, FONT_PRIO_FRONT, 0, "ê°í", 0);

  0a071	8b 86 08 00 00
	00		 mov	 eax, DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+8]
  0a077	6a 00		 push	 0
  0a079	68 00 00 00 00	 push	 OFFSET ??_C@_04BCAOMEHC@?$LA?$KN?H?$KN@
  0a07e	6a 00		 push	 0
  0a080	6a 01		 push	 1
  0a082	ff b6 0c 00 00
	00		 push	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+12]
  0a088	83 e8 11	 sub	 eax, 17			; 00000011H
  0a08b	50		 push	 eax
  0a08c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0a091	83 c4 18	 add	 esp, 24			; 00000018H
$LN5041@MenuProc:

; 15286: 
; 15287: 						for (i = MAX_ITEM - 1; i >= 0; i--) {

  0a094	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$20$[ebp]
$LN5065@MenuProc:
  0a09a	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR __Start$1$[ebp]
$LN233@MenuProc:
  0a0a0	83 e9 01	 sub	 ecx, 1
  0a0a3	89 8d e8 b9 ff
	ff		 mov	 DWORD PTR _i$20$[ebp], ecx
  0a0a9	0f 89 71 e6 ff
	ff		 jns	 $LL235@MenuProc
  0a0af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
$LN4197@MenuProc:

; 15855: 								}
; 15856: 							}
; 15857: 						}
; 15858: 						if (mouse.onceState & MOUSE_LEFT_CRICK_UP) {

  0a0b5	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  0a0bc	0f 84 ed 00 00
	00		 je	 $LN1300@MenuProc

; 15859: 							if (mouse.itemNo != -1) {

  0a0c2	8b 15 48 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+72
  0a0c8	83 fa ff	 cmp	 edx, -1
  0a0cb	0f 84 8b 01 00
	00		 je	 $LN1309@MenuProc

; 15860: 								if (mouse.nowPoint.x <= pActMenuWnd2->x && mouse.itemNo != -1 && eventWarpSendFlag == FALSE) {

  0a0d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A
  0a0d6	3b 46 18	 cmp	 eax, DWORD PTR [esi+24]
  0a0d9	0f 8f 9d 00 00
	00		 jg	 $LN1305@MenuProc
  0a0df	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  0a0e7	0f 85 8f 00 00
	00		 jne	 $LN1305@MenuProc

; 15861: #ifdef _PET_ITEM
; 15862: 									if (g_bPetItemWndFlag)

  0a0ed	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  0a0f4	74 56		 je	 SHORT $LN1302@MenuProc

; 15863: 										lssproto_PetItemEquip_send(sockfd, nowGx, nowGy, nSelectPet, mouse.itemNo, -2);

  0a0f6	6a fe		 push	 -2			; fffffffeH
  0a0f8	52		 push	 edx
  0a0f9	ff 35 00 00 00
	00		 push	 DWORD PTR ?nSelectPet@@3HA
  0a0ff	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  0a105	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  0a10b	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0a111	e8 00 00 00 00	 call	 ?lssproto_PetItemEquip_send@@YAXHHHHHH@Z ; lssproto_PetItemEquip_send
  0a116	83 c4 18	 add	 esp, 24			; 00000018H
  0a119	eb 61		 jmp	 SHORT $LN1305@MenuProc
$LN1290@MenuProc:

; 15850: 									}
; 15851: #endif
; 15852: 								}
; 15853: 								else {
; 15854: 									ItemBuffer[i].mixFlag = TRUE;

  0a11b	c7 86 1c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[esi+28], 1
  0a125	e9 70 ff ff ff	 jmp	 $LN5065@MenuProc
$LN2310@MenuProc:

; 15537: 												g_bPetItemWndFlag = true;
; 15538: 												InitItem(pActMenuWnd2->x, pActMenuWnd2->y, g_bPetItemWndFlag);

  0a12a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  0a130	6a 01		 push	 1
  0a132	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 1
  0a139	ff 76 1c	 push	 DWORD PTR [esi+28]
  0a13c	ff 76 18	 push	 DWORD PTR [esi+24]
  0a13f	e8 00 00 00 00	 call	 ?InitItem@@YAXHHH@Z	; InitItem
  0a144	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15539: 												break;

  0a147	e9 69 ff ff ff	 jmp	 $LN4197@MenuProc
$LN1302@MenuProc:

; 15864: 									else
; 15865: #endif
; 15866: 										if (bNewServer) {

  0a14c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0a153	ff 35 48 00 00
	00		 push	 DWORD PTR ?mouse@@3UMOUSE@@A+72
  0a159	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  0a15f	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  0a165	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0a16b	74 07		 je	 SHORT $LN1304@MenuProc

; 15867: 											lssproto_DI_send(sockfd, nowGx, nowGy, mouse.itemNo);

  0a16d	e8 00 00 00 00	 call	 ?lssproto_DI_send@@YAXHHHH@Z ; lssproto_DI_send

; 15868: 										}

  0a172	eb 05		 jmp	 SHORT $LN5131@MenuProc
$LN1304@MenuProc:

; 15869: 										else
; 15870: 											old_lssproto_DI_send(sockfd, nowGx, nowGy, mouse.itemNo);

  0a174	e8 00 00 00 00	 call	 ?old_lssproto_DI_send@@YAXHHHH@Z ; old_lssproto_DI_send
$LN5131@MenuProc:

; 15871: 
; 15872: 								}
; 15873: 								ItemBuffer[mouse.itemNo].dragFlag = FALSE;

  0a179	83 c4 10	 add	 esp, 16			; 00000010H
$LN1305@MenuProc:
  0a17c	a1 48 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+72
  0a181	c1 e0 05	 shl	 eax, 5

; 15874: 								mouse.itemNo = -1;
; 15875: 								play_se(217, 320, 240);

  0a184	68 f0 00 00 00	 push	 240			; 000000f0H
  0a189	68 40 01 00 00	 push	 320			; 00000140H
  0a18e	68 d9 00 00 00	 push	 217			; 000000d9H
  0a193	c7 80 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[eax+24], 0
  0a19d	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  0a1a7	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0a1ac	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1300@MenuProc:

; 15876: 							}
; 15877: 						}
; 15878: 						if (mouse.itemNo != -1) {

  0a1af	8b 15 48 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+72
  0a1b5	83 fa ff	 cmp	 edx, -1
  0a1b8	0f 84 9e 00 00
	00		 je	 $LN1309@MenuProc

; 15879: 							if (mouse.onceState & MOUSE_RIGHT_CRICK) {

  0a1be	f6 05 2c 00 00
	00 02		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 2
  0a1c5	74 2e		 je	 SHORT $LN1307@MenuProc

; 15880: 								ItemBuffer[mouse.itemNo].dragFlag = FALSE;

  0a1c7	c1 e2 05	 shl	 edx, 5

; 15881: 								mouse.itemNo = -1;
; 15882: 								play_se(217, 320, 240);

  0a1ca	68 f0 00 00 00	 push	 240			; 000000f0H
  0a1cf	68 40 01 00 00	 push	 320			; 00000140H
  0a1d4	68 d9 00 00 00	 push	 217			; 000000d9H
  0a1d9	c7 82 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[edx+24], 0
  0a1e3	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
  0a1ed	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0a1f2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1307@MenuProc:

; 15883: 							}
; 15884: #ifdef _PET_ITEM
; 15885: 							if (g_bPetItemWndFlag && nSelectPet > -1 && (mouse.itemNo >= PET_HEAD && mouse.itemNo < PET_EQUIPNUM) && pet[nSelectPet].useFlag == TRUE)

  0a1f5	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  0a1fc	74 36		 je	 SHORT $LN1308@MenuProc
  0a1fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectPet@@3HA
  0a203	83 f8 ff	 cmp	 eax, -1
  0a206	7e 2c		 jle	 SHORT $LN1308@MenuProc
  0a208	8b 15 48 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+72
  0a20e	83 fa 06	 cmp	 edx, 6
  0a211	77 21		 ja	 SHORT $LN1308@MenuProc
  0a213	69 c8 78 0b 00
	00		 imul	 ecx, eax, 2936
  0a219	66 83 b9 76 00
	00 00 01	 cmp	 WORD PTR ?pet@@3PAUPET@@A[ecx+118], 1
  0a221	75 11		 jne	 SHORT $LN1308@MenuProc

; 15886: 								StockDispBuffer(mouse.nowPoint.x, mouse.nowPoint.y, DISP_PRIO_DRAG, pet[nSelectPet].item[mouse.itemNo].graNo, 0);

  0a223	69 c2 7c 01 00
	00		 imul	 eax, edx, 380
  0a229	6a 00		 push	 0
  0a22b	ff b4 08 80 00
	00 00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+ecx+128]
  0a232	eb 12		 jmp	 SHORT $LN5132@MenuProc
$LN1308@MenuProc:

; 15887: 							else
; 15888: #endif
; 15889: 								StockDispBuffer(mouse.nowPoint.x, mouse.nowPoint.y, DISP_PRIO_DRAG, pc.item[mouse.itemNo].graNo, 0);

  0a234	69 05 48 00 00
	00 7c 01 00 00	 imul	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+72, 380
  0a23e	6a 00		 push	 0
  0a240	ff b0 c8 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A[eax+200]
$LN5132@MenuProc:

; 15890: 						}
; 15891: 						if (pActMenuWnd2 != NULL) {

  0a246	6a 70		 push	 112			; 00000070H
  0a248	ff 35 04 00 00
	00		 push	 DWORD PTR ?mouse@@3UMOUSE@@A+4
  0a24e	ff 35 00 00 00
	00		 push	 DWORD PTR ?mouse@@3UMOUSE@@A
  0a254	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a259	83 c4 14	 add	 esp, 20			; 00000014H
$LN1309@MenuProc:
  0a25c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  0a262	85 c9		 test	 ecx, ecx
  0a264	0f 84 5f 03 00
	00		 je	 $LN1312@MenuProc

; 15892: #ifdef _NB_éå·èªå¨å å 		//[ìì´í ìë ê²¹ì¹ê¸°(/í©ì±/ê°í)]
; 15893: 														éå·å å æé® = StockDispBuffer(ä¸´æ¶MAXX - 300, 380, DISP_PRIO_IME3, IMAGE_å å æé®, 2);

  0a26a	8b b5 f4 b9 ff
	ff		 mov	 esi, DWORD PTR _??MAXX$1$[ebp]
  0a270	6a 02		 push	 2
  0a272	68 cb 89 00 00	 push	 35275			; 000089cbH
  0a277	6a 69		 push	 105			; 00000069H
  0a279	8d 86 d4 fe ff
	ff		 lea	 eax, DWORD PTR [esi-300]
  0a27f	68 7c 01 00 00	 push	 380			; 0000017cH
  0a284	50		 push	 eax
  0a285	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 15894: 							itemWndFontNo[0] = StockDispBuffer(ä¸´æ¶MAXX - 150, 428, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  0a28a	6a 02		 push	 2
  0a28c	68 ba 65 00 00	 push	 26042			; 000065baH
  0a291	6a 69		 push	 105			; 00000069H
  0a293	a3 00 00 00 00	 mov	 DWORD PTR ?Ô³Îý?Ê¥äÎ?@@3HA, eax
  0a298	8d 86 6a ff ff
	ff		 lea	 eax, DWORD PTR [esi-150]
  0a29e	68 ac 01 00 00	 push	 428			; 000001acH
  0a2a3	50		 push	 eax
  0a2a4	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a2a9	83 c4 28	 add	 esp, 40			; 00000028H
  0a2ac	a3 00 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA, eax

; 15895: #else
; 15896: 							itemWndFontNo[0] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, pActMenuWnd2->y + 422, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);
; 15897: #endif
; 15898: #ifdef _PET_ITEM
; 15899: 							if (g_bPetItemWndFlag) {

  0a2b1	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_bPetItemWndFlag@@3_NA, 0
  0a2b8	6a 02		 push	 2
  0a2ba	0f 84 13 02 00
	00		 je	 $LN1311@MenuProc

; 15900: 								itemWndFontNo[1] = -2;
; 15901: 								// æ¾ç¤ºå·¦å³ç®­å¤´ //ä¸´æ¶MAXX
; 15902: #ifdef _NB_æ°éå·æ çé¢
; 15903: 								itemWndFontNo[5] = StockDispBuffer(ä¸´æ¶MAXX - 90, 150, DISP_PRIO_IME3, 26047, 2);

  0a2c0	68 bf 65 00 00	 push	 26047			; 000065bfH
  0a2c5	6a 69		 push	 105			; 00000069H
  0a2c7	8d 46 a6	 lea	 eax, DWORD PTR [esi-90]
  0a2ca	c7 05 04 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+4, -2 ; fffffffeH
  0a2d4	68 96 00 00 00	 push	 150			; 00000096H
  0a2d9	50		 push	 eax
  0a2da	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 15904: 								itemWndFontNo[6] = StockDispBuffer(ä¸´æ¶MAXX - 42, 150, DISP_PRIO_IME3, 26048, 2);

  0a2df	6a 02		 push	 2
  0a2e1	68 c0 65 00 00	 push	 26048			; 000065c0H
  0a2e6	6a 69		 push	 105			; 00000069H
  0a2e8	a3 14 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+20, eax
  0a2ed	8d 46 d6	 lea	 eax, DWORD PTR [esi-42]
  0a2f0	68 96 00 00 00	 push	 150			; 00000096H
  0a2f5	50		 push	 eax
  0a2f6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a2fb	a3 18 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+24, eax
  0a300	83 c4 28	 add	 esp, 40			; 00000028H

; 15905: #else
; 15906: 								itemWndFontNo[5] = StockDispBuffer(pActMenuWnd2->x + 188, pActMenuWnd2->y + 142, DISP_PRIO_IME3, 26047, 2);
; 15907: 								itemWndFontNo[6] = StockDispBuffer(pActMenuWnd2->x + 236, pActMenuWnd2->y + 142, DISP_PRIO_IME3, 26048, 2);
; 15908: #endif	
; 15909: 
; 15910: 								if (nSelectPet > -1 && pet[nSelectPet].useFlag) {// [í« ì ë³´ ë³´ê¸°]

  0a303	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nSelectPet@@3HA
  0a308	83 f8 ff	 cmp	 eax, -1
  0a30b	0f 8e 8a 01 00
	00		 jle	 $LN1313@MenuProc
  0a311	69 c0 78 0b 00
	00		 imul	 eax, eax, 2936
  0a317	66 83 b8 76 00
	00 00 00	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 0
  0a31f	0f 84 76 01 00
	00		 je	 $LN1313@MenuProc

; 15911: 									char szTemp[16];
; 15912: 									WORD wSpecies = HIWORD(pet[nSelectPet].fusion);
; 15913: 									if (wSpecies < 0 || wSpecies >= MAX_PET_SPECIES)
; 15914: 										wSpecies = MAX_PET_SPECIES;
; 15915: 									// æ¾ç¤ºå® ç©è£å¤æ çåºå¾[í« ì¥ë¹ ì¬ë¡¯ ê¸°ë³¸ ì´ë¯¸ì§ë¥¼ íìí¨] 
; 15916: 									for (i = 0; i < PET_EQUIPNUM; i++) {

  0a325	be 08 00 00 00	 mov	 esi, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+8
  0a32a	bf 00 00 00 00	 mov	 edi, OFFSET ?nPetItemEquipBmpNumber@@3PAY01HA ; nPetItemEquipBmpNumber
  0a32f	90		 npad	 1
$LL267@MenuProc:

; 15917: 										StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, DISP_PRIO_IME3, nPetItemEquipBmpNumber[i][0], 0);

  0a330	6a 00		 push	 0
  0a332	ff 37		 push	 DWORD PTR [edi]
  0a334	6a 69		 push	 105			; 00000069H
  0a336	ff 76 04	 push	 DWORD PTR [esi+4]
  0a339	ff 36		 push	 DWORD PTR [esi]
  0a33b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a340	83 c7 08	 add	 edi, 8
  0a343	8d 76 20	 lea	 esi, DWORD PTR [esi+32]
  0a346	83 c4 14	 add	 esp, 20			; 00000014H
  0a349	81 ff 38 00 00
	00		 cmp	 edi, OFFSET ?nPetItemEquipBmpNumber@@3PAY01HA+56
  0a34f	7c df		 jl	 SHORT $LL267@MenuProc

; 15918: 										//NBì·¨ìå¯å¦è£å¤åºå¾å¤æ­
; 15919: 										/*
; 15920: 										if (byShowPetItemBackground[wSpecies] & (1 << i)){
; 15921: 										StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, DISP_PRIO_IME3, nPetItemEquipBmpNumber[i][0], 0);
; 15922: 										}else{
; 15923: 										StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY, DISP_PRIO_IME3, nPetItemEquipBmpNumber[i][1], 0);
; 15924: 										}*/
; 15925: 									}
; 15926: 
; 15927: 									// æ¾ç¤ºå® ç©åç§°[í« ì´ë¦ íì]
; 15928: 									StockFontBuffer(ä¸´æ¶MAXX - 128, 17, FONT_PRIO_FRONT, 1, pet[nSelectPet].name, 0);

  0a351	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  0a35b	8b b5 f4 b9 ff
	ff		 mov	 esi, DWORD PTR _??MAXX$1$[ebp]
  0a361	6a 00		 push	 0
  0a363	83 c6 80	 add	 esi, -128		; ffffff80H
  0a366	05 54 00 00 00	 add	 eax, OFFSET ?pet@@3PAUPET@@A+84
  0a36b	50		 push	 eax
  0a36c	6a 01		 push	 1
  0a36e	6a 01		 push	 1
  0a370	6a 11		 push	 17			; 00000011H
  0a372	56		 push	 esi
  0a373	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15929: 									if (strlen(pet[nSelectPet].freeName) > 0) {

  0a378	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nSelectPet@@3HA
  0a37e	83 c4 18	 add	 esp, 24			; 00000018H
  0a381	69 c2 78 0b 00
	00		 imul	 eax, edx, 2936
  0a387	8d b8 65 00 00
	00		 lea	 edi, DWORD PTR ?pet@@3PAUPET@@A[eax+101]
  0a38d	8b cf		 mov	 ecx, edi
  0a38f	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0a392	89 85 d8 b9 ff
	ff		 mov	 DWORD PTR tv39054[ebp], eax
$LL4333@MenuProc:
  0a398	8a 01		 mov	 al, BYTE PTR [ecx]
  0a39a	41		 inc	 ecx
  0a39b	84 c0		 test	 al, al
  0a39d	75 f9		 jne	 SHORT $LL4333@MenuProc
  0a39f	2b 8d d8 b9 ff
	ff		 sub	 ecx, DWORD PTR tv39054[ebp]
  0a3a5	74 18		 je	 SHORT $LN1317@MenuProc

; 15930: 										StockFontBuffer(ä¸´æ¶MAXX - 128, 35, FONT_PRIO_FRONT, 8, pet[nSelectPet].freeName, 0);

  0a3a7	6a 00		 push	 0
  0a3a9	57		 push	 edi
  0a3aa	6a 08		 push	 8
  0a3ac	6a 01		 push	 1
  0a3ae	6a 23		 push	 35			; 00000023H
  0a3b0	56		 push	 esi
  0a3b1	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0a3b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nSelectPet@@3HA
  0a3bc	83 c4 18	 add	 esp, 24			; 00000018H
$LN1317@MenuProc:

; 15931: 									}
; 15932: 
; 15933: 									// æ¾ç¤ºå® ç©çå±æ§[í« ìì± íì]
; 15934: 									itoa(pet[nSelectPet].maxHp, szTemp, 10);

  0a3bf	6a 0a		 push	 10			; 0000000aH
  0a3c1	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$58[ebp]
  0a3c7	50		 push	 eax
  0a3c8	69 c2 78 0b 00
	00		 imul	 eax, edx, 2936
  0a3ce	ff b0 0c 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+12]
  0a3d4	e8 00 00 00 00	 call	 _itoa

; 15935: 									StockFontBuffer(ä¸´æ¶MAXX - 56, 60, FONT_PRIO_FRONT, FONT_PAL_WHITE, szTemp, 0);

  0a3d9	8b b5 f4 b9 ff
	ff		 mov	 esi, DWORD PTR _??MAXX$1$[ebp]
  0a3df	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$58[ebp]
  0a3e5	6a 00		 push	 0
  0a3e7	50		 push	 eax
  0a3e8	6a 00		 push	 0
  0a3ea	6a 01		 push	 1
  0a3ec	83 c6 c8	 add	 esi, -56		; ffffffc8H
  0a3ef	6a 3c		 push	 60			; 0000003cH
  0a3f1	56		 push	 esi
  0a3f2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15936: 									itoa(pet[nSelectPet].atk, szTemp, 10);

  0a3f7	6a 0a		 push	 10			; 0000000aH
  0a3f9	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$58[ebp]
  0a3ff	50		 push	 eax
  0a400	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  0a40a	ff b0 24 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+36]
  0a410	e8 00 00 00 00	 call	 _itoa

; 15937: 									StockFontBuffer(ä¸´æ¶MAXX - 56, 80, FONT_PRIO_FRONT, FONT_PAL_WHITE, szTemp, 0);

  0a415	6a 00		 push	 0
  0a417	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$58[ebp]
  0a41d	50		 push	 eax
  0a41e	6a 00		 push	 0
  0a420	6a 01		 push	 1
  0a422	6a 50		 push	 80			; 00000050H
  0a424	56		 push	 esi
  0a425	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0a42a	83 c4 48	 add	 esp, 72			; 00000048H

; 15938: 									itoa(pet[nSelectPet].def, szTemp, 10);

  0a42d	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$58[ebp]
  0a433	6a 0a		 push	 10			; 0000000aH
  0a435	50		 push	 eax
  0a436	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  0a440	ff b0 28 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+40]
  0a446	e8 00 00 00 00	 call	 _itoa

; 15939: 									StockFontBuffer(ä¸´æ¶MAXX - 56, 100, FONT_PRIO_FRONT, FONT_PAL_WHITE, szTemp, 0);

  0a44b	6a 00		 push	 0
  0a44d	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$58[ebp]
  0a453	50		 push	 eax
  0a454	6a 00		 push	 0
  0a456	6a 01		 push	 1
  0a458	6a 64		 push	 100			; 00000064H
  0a45a	56		 push	 esi
  0a45b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15940: 									itoa(pet[nSelectPet].quick, szTemp, 10);

  0a460	6a 0a		 push	 10			; 0000000aH
  0a462	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$58[ebp]
  0a468	50		 push	 eax
  0a469	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?nSelectPet@@3HA, 2936
  0a473	ff b0 2c 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+44]
  0a479	e8 00 00 00 00	 call	 _itoa

; 15941: 									StockFontBuffer(ä¸´æ¶MAXX - 56, 120, FONT_PRIO_FRONT, FONT_PAL_WHITE, szTemp, 0);

  0a47e	6a 00		 push	 0
  0a480	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$58[ebp]
  0a486	50		 push	 eax
  0a487	6a 00		 push	 0
  0a489	6a 01		 push	 1
  0a48b	6a 78		 push	 120			; 00000078H
  0a48d	56		 push	 esi
  0a48e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0a493	83 c4 48	 add	 esp, 72			; 00000048H

; 15942: 								}

  0a496	e9 28 01 00 00	 jmp	 $LN4820@MenuProc
$LN1313@MenuProc:

; 15943: 								else {
; 15944: 									nSelectPet = -1;

  0a49b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?nSelectPet@@3HA, -1

; 15945: 									for (i = 0; i < MAX_PET; i++) {

  0a4a5	33 c9		 xor	 ecx, ecx
  0a4a7	b8 76 00 00 00	 mov	 eax, OFFSET ?pet@@3PAUPET@@A+118
  0a4ac	0f 1f 40 00	 npad	 4
$LL270@MenuProc:

; 15946: 										// [ì´ë° í«ì´ ìì]
; 15947: 										if (pet[i].useFlag) {

  0a4b0	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0a4b4	75 12		 jne	 SHORT $LN2312@MenuProc

; 15945: 									for (i = 0; i < MAX_PET; i++) {

  0a4b6	05 78 0b 00 00	 add	 eax, 2936		; 00000b78H
  0a4bb	41		 inc	 ecx
  0a4bc	3d ce 39 00 00	 cmp	 eax, OFFSET ?pet@@3PAUPET@@A+14798
  0a4c1	7c ed		 jl	 SHORT $LL270@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  0a4c3	e9 fb 00 00 00	 jmp	 $LN4820@MenuProc
$LN2312@MenuProc:

; 15948: 											nSelectPet = i;

  0a4c8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nSelectPet@@3HA, ecx

; 15949: 											break;
; 15950: 										}
; 15951: 									}
; 15952: 								}
; 15953: 							}

  0a4ce	e9 f0 00 00 00	 jmp	 $LN4820@MenuProc
$LN1311@MenuProc:

; 15954: 							else
; 15955: #endif
; 15956: 							{
; 15957: 								//æå°åæ¯æé®[ì£¼ì  ë²í¼ ì¸ì/íì]
; 15958: 								itemWndFontNo[1] = StockDispBuffer(ä¸´æ¶MAXX - 68, 225, DISP_PRIO_IME3, CG_ITEM_WND_JUJUTU_BTN, 2);

  0a4d3	68 d5 65 00 00	 push	 26069			; 000065d5H
  0a4d8	6a 69		 push	 105			; 00000069H
  0a4da	8d 46 bc	 lea	 eax, DWORD PTR [esi-68]
  0a4dd	68 e1 00 00 00	 push	 225			; 000000e1H
  0a4e2	50		 push	 eax
  0a4e3	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 15959: 								sprintf(moji, "%10d", pc.gold);

  0a4e8	ff 35 60 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+96
  0a4ee	a3 04 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+4, eax
  0a4f3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0a4f9	68 00 00 00 00	 push	 OFFSET ??_C@_04FNJBHMGB@?$CF10d@
  0a4fe	50		 push	 eax
  0a4ff	e8 00 00 00 00	 call	 _sprintf

; 15960: 								StockFontBuffer(ä¸´æ¶MAXX - 92, 90, FONT_PRIO_FRONT, 0, moji, 0);

  0a504	6a 00		 push	 0
  0a506	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0a50c	50		 push	 eax
  0a50d	6a 00		 push	 0
  0a50f	6a 01		 push	 1
  0a511	8d 46 a4	 lea	 eax, DWORD PTR [esi-92]
  0a514	6a 5a		 push	 90			; 0000005aH
  0a516	50		 push	 eax
  0a517	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 15961: 
; 15962: 								sprintf(moji, "%10d", itemWndDropGold);

  0a51c	ff 35 00 00 00
	00		 push	 DWORD PTR ?itemWndDropGold@@3HA
  0a522	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0a528	68 00 00 00 00	 push	 OFFSET ??_C@_04FNJBHMGB@?$CF10d@
  0a52d	50		 push	 eax
  0a52e	e8 00 00 00 00	 call	 _sprintf
  0a533	83 c4 44	 add	 esp, 68			; 00000044H

; 15963: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 15964: 								if (Moneyflag == false)

  0a536	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  0a53d	75 1e		 jne	 SHORT $LN1319@MenuProc

; 15965: 									StockFontBuffer(ä¸´æ¶MAXX - 2, 138, FONT_PRIO_FRONT, 0, moji, 0);

  0a53f	6a 00		 push	 0
  0a541	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0a547	50		 push	 eax
  0a548	6a 00		 push	 0
  0a54a	6a 01		 push	 1
  0a54c	8d 46 fe	 lea	 eax, DWORD PTR [esi-2]
  0a54f	68 8a 00 00 00	 push	 138			; 0000008aH
  0a554	50		 push	 eax
  0a555	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0a55a	83 c4 18	 add	 esp, 24			; 00000018H
$LN1319@MenuProc:

; 15966: #else
; 15967: 								StockFontBuffer(pActMenuWnd2->x + 192, pActMenuWnd2->y + 138, FONT_PRIO_FRONT, 0, moji, 0);
; 15968: #endif
; 15969: 								itemWndFontNo[2] = StockDispBuffer(ä¸´æ¶MAXX - 136, 224, DISP_PRIO_IME3, CG_ITEM_WND_GOLD_DROP_BTN_UP + itemWndBtnFlag[2], 2);

  0a55d	a1 08 00 00 00	 mov	 eax, DWORD PTR ?itemWndBtnFlag@@3PAHA+8
  0a562	81 c6 78 ff ff
	ff		 add	 esi, -136		; ffffff78H
  0a568	6a 02		 push	 2
  0a56a	05 ce 65 00 00	 add	 eax, 26062		; 000065ceH
  0a56f	50		 push	 eax
  0a570	6a 69		 push	 105			; 00000069H
  0a572	68 e0 00 00 00	 push	 224			; 000000e0H
  0a577	56		 push	 esi
  0a578	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a57d	a3 08 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+8, eax

; 15970: 								itemWndFontNo[3] = StockDispBuffer(ä¸´æ¶MAXX - 136, 224, DISP_PRIO_IME3, CG_ITEM_WND_GOLD_INC_BTN_UP + itemWndBtnFlag[3], 2);

  0a582	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?itemWndBtnFlag@@3PAHA+12
  0a587	6a 02		 push	 2
  0a589	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  0a58e	50		 push	 eax
  0a58f	6a 69		 push	 105			; 00000069H
  0a591	68 e0 00 00 00	 push	 224			; 000000e0H
  0a596	56		 push	 esi
  0a597	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a59c	a3 0c 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+12, eax

; 15971: 								itemWndFontNo[4] = StockDispBuffer(ä¸´æ¶MAXX - 136, 224, DISP_PRIO_IME3, CG_ITEM_WND_GOLD_DEC_BTN_UP + itemWndBtnFlag[4], 2);

  0a5a1	a1 10 00 00 00	 mov	 eax, DWORD PTR ?itemWndBtnFlag@@3PAHA+16
  0a5a6	6a 02		 push	 2
  0a5a8	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  0a5ad	50		 push	 eax
  0a5ae	6a 69		 push	 105			; 00000069H
  0a5b0	68 e0 00 00 00	 push	 224			; 000000e0H
  0a5b5	56		 push	 esi
  0a5b6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a5bb	83 c4 3c	 add	 esp, 60			; 0000003cH
  0a5be	a3 10 00 00 00	 mov	 DWORD PTR ?itemWndFontNo@@3PAHA+16, eax
$LN4820@MenuProc:

; 16234: 					}
; 16235: 				}
; 16236: 			}
; 16237: 			break;
; 16238: 		}
; 16239: 	}
; 16240: 
; 16241: 	//? ?????????? *******************************************************/
; 16242: 
; 16243: 	if (MenuToggleFlag & JOY_CTRL_M) {

  0a5c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
$LN1312@MenuProc:
  0a5c9	f7 05 00 00 00
	00 00 00 00 40	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 1073741824 ; MenuToggleFlag, 40000000H
  0a5d3	0f 84 9f 01 00
	00		 je	 $LN4825@MenuProc

; 16244: #ifdef _NEWPANEL //Syu ADD 7.0 æ°äººç©ç¶æä»é¢
; 16245: 		SkillWndflag = false;
; 16246: #endif
; 16247: 		switch (mapWndNo) {

  0a5d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mapWndNo@@3IA, 0
  0a5e0	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SkillWndflag@@3_NA, 0 ; SkillWndflag
  0a5e7	0f 85 8b 01 00
	00		 jne	 $LN4825@MenuProc

; 16248: 
; 16249: 		case 0:
; 16250: 			if (pActMenuWnd2 == NULL) {

  0a5ed	85 c9		 test	 ecx, ecx
  0a5ef	75 44		 jne	 SHORT $LN1380@MenuProc

; 16251: 				pActMenuWnd2 = MakeWindowDisp(388, 4, 248, 240, 0, -1);

  0a5f1	6a ff		 push	 -1
  0a5f3	51		 push	 ecx
  0a5f4	68 f0 00 00 00	 push	 240			; 000000f0H
  0a5f9	68 f8 00 00 00	 push	 248			; 000000f8H
  0a5fe	6a 04		 push	 4
  0a600	68 84 01 00 00	 push	 388			; 00000184H
  0a605	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0a60a	83 c4 18	 add	 esp, 24			; 00000018H
  0a60d	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, eax ; pActMenuWnd2
  0a612	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?mapWndFontNo@@3PAHA, -2 ; fffffffeH
  0a61c	c7 05 04 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?mapWndFontNo@@3PAHA+4, -2 ; fffffffeH
  0a626	c7 05 08 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?mapWndFontNo@@3PAHA+8, -2 ; fffffffeH

; 16252: 				for (i = 0; i < MENU_MAP_0; i++) mapWndFontNo[i] = -2;
; 16253: 			}

  0a630	e9 43 01 00 00	 jmp	 $LN4825@MenuProc
$LN1380@MenuProc:

; 16254: 			else {
; 16255: 				if (pActMenuWnd2->hp > 0) {

  0a635	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  0a639	0f 8e 39 01 00
	00		 jle	 $LN4825@MenuProc

; 16256: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd2->pYobi)->my, DISP_PRIO_MENU, CG_MAP_WND, 0);

  0a63f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0a642	6a 00		 push	 0
  0a644	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_MAP_WND@@3HA ; CG_MAP_WND
  0a64a	6a 68		 push	 104			; 00000068H
  0a64c	ff 70 18	 push	 DWORD PTR [eax+24]
  0a64f	ff 70 14	 push	 DWORD PTR [eax+20]
  0a652	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a657	83 c4 14	 add	 esp, 20			; 00000014H

; 16257: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0a65a	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0a661	74 54		 je	 SHORT $LN4824@MenuProc

; 16258: 						if (HitDispNo == mapWndFontNo[0]) {

  0a663	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0a668	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?mapWndFontNo@@3PAHA
  0a66e	75 47		 jne	 SHORT $LN4824@MenuProc

; 16259: 							DeathAction(pActMenuWnd2);

  0a670	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  0a676	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16260: #ifdef _MONEYINPUT //Syu ADD æå¨è¾å¥éé±é
; 16261: 							GetKeyInputFocus(&MyChatBuffer);

  0a67b	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0a680	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 16262: 							Moneyflag = false;
; 16263: #endif
; 16264: 							pActMenuWnd2 = NULL;
; 16265: 							MenuToggleFlag ^= JOY_CTRL_M;

  0a685	81 35 00 00 00
	00 00 00 00 40	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 1073741824 ; MenuToggleFlag, 40000000H

; 16266: 							play_se(203, 320, 240);

  0a68f	68 f0 00 00 00	 push	 240			; 000000f0H
  0a694	68 40 01 00 00	 push	 320			; 00000140H
  0a699	68 cb 00 00 00	 push	 203			; 000000cbH
  0a69e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Moneyflag@@3_NA, 0 ; Moneyflag
  0a6a5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd2@@3PAUaction@@A, 0 ; pActMenuWnd2
  0a6af	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0a6b4	83 c4 14	 add	 esp, 20			; 00000014H
$LN4824@MenuProc:

; 16267: 						}
; 16268: 					}
; 16269: 					if (pActMenuWnd2 != NULL) {

  0a6b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  0a6bc	85 c0		 test	 eax, eax
  0a6be	0f 84 b4 00 00
	00		 je	 $LN4825@MenuProc

; 16270: 						x = pActMenuWnd2->x + 61;

  0a6c4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]

; 16271: 						y = pActMenuWnd2->y + 186;

  0a6c7	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]

; 16272: 						StockFontBuffer(pActMenuWnd2->x + 22, pActMenuWnd2->y + 31, FONT_PRIO_FRONT, 0, nowFloorName, 0);

  0a6ca	6a 00		 push	 0
  0a6cc	68 00 00 00 00	 push	 OFFSET ?nowFloorName@@3PADA ; nowFloorName
  0a6d1	6a 00		 push	 0
  0a6d3	8d b0 ba 00 00
	00		 lea	 esi, DWORD PTR [eax+186]
  0a6d9	83 c0 1f	 add	 eax, 31			; 0000001fH
  0a6dc	6a 01		 push	 1
  0a6de	50		 push	 eax
  0a6df	8d 41 16	 lea	 eax, DWORD PTR [ecx+22]
  0a6e2	8d 79 3d	 lea	 edi, DWORD PTR [ecx+61]
  0a6e5	50		 push	 eax
  0a6e6	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  0a6ec	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16273: 						sprintf(moji, "ë %3d", nowGx);

  0a6f1	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  0a6f7	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0a6fd	68 00 00 00 00	 push	 OFFSET ??_C@_06IKNDGEEE@?$LF?$LP?5?$CF3d@
  0a702	50		 push	 eax
  0a703	e8 00 00 00 00	 call	 _sprintf

; 16274: 						StockFontBuffer(x, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, moji, 0);

  0a708	6a 00		 push	 0
  0a70a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0a710	50		 push	 eax
  0a711	6a 04		 push	 4
  0a713	6a 01		 push	 1
  0a715	56		 push	 esi
  0a716	57		 push	 edi
  0a717	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16275: 						sprintf(moji, "ë¨ %3d", nowGy);

  0a71c	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  0a722	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0a728	68 00 00 00 00	 push	 OFFSET ??_C@_06FFJNECKA@?$LD?$LC?5?$CF3d@
  0a72d	50		 push	 eax
  0a72e	e8 00 00 00 00	 call	 _sprintf
  0a733	83 c4 48	 add	 esp, 72			; 00000048H

; 16276: 						StockFontBuffer(x + 73, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, moji, 0); y += 36;

  0a736	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0a73c	6a 00		 push	 0
  0a73e	50		 push	 eax
  0a73f	6a 04		 push	 4
  0a741	6a 01		 push	 1
  0a743	8d 47 49	 lea	 eax, DWORD PTR [edi+73]
  0a746	56		 push	 esi
  0a747	50		 push	 eax
  0a748	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16277: 						mapWndFontNo[0] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd2->pYobi)->mx, y, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  0a74d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd2@@3PAUaction@@A ; pActMenuWnd2
  0a752	83 c6 24	 add	 esi, 36			; 00000024H
  0a755	6a 02		 push	 2
  0a757	68 ba 65 00 00	 push	 26042			; 000065baH
  0a75c	6a 69		 push	 105			; 00000069H
  0a75e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0a761	56		 push	 esi
  0a762	89 b5 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], esi
  0a768	ff 70 14	 push	 DWORD PTR [eax+20]
  0a76b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a770	83 c4 2c	 add	 esp, 44			; 0000002cH
  0a773	a3 00 00 00 00	 mov	 DWORD PTR ?mapWndFontNo@@3PAHA, eax
$LN4825@MenuProc:

; 16278: 					}
; 16279: 				}
; 16280: 			}
; 16281: 			break;
; 16282: 		}
; 16283: 	}
; 16284: 
; 16285: 
; 16286: 	//? ?????????? *******************************************************/
; 16287: 
; 16288: 	if (MenuToggleFlag & JOY_CTRL_E) {

  0a778	f7 05 00 00 00
	00 00 00 00 04	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 67108864 ; MenuToggleFlag, 04000000H
  0a782	0f 84 9c 29 00
	00		 je	 $LN4848@MenuProc

; 16289: 		// ?????î±??î¤?
; 16290: 		switch (mailWndNo) {

  0a788	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A
  0a78d	83 f8 05	 cmp	 eax, 5
  0a790	0f 87 8e 29 00
	00		 ja	 $LN4848@MenuProc
  0a796	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN4334@MenuProc[eax*4]
$LN1387@MenuProc:

; 16291: 
; 16292: 		case MAIL_WND_VIEW:	// î¡î¹???????
; 16293: 
; 16294: 							// ?????????
; 16295: 			if (pActMenuWnd == NULL) {

  0a79d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0a7a4	0f 85 b6 00 00
	00		 jne	 $LN1388@MenuProc

; 16296: 				// ?????î¸î????î
; 16297: 				pActMenuWnd = MakeWindowDisp(4, 4, 272, 440, 0, -1);

  0a7aa	6a ff		 push	 -1
  0a7ac	6a 00		 push	 0
  0a7ae	68 b8 01 00 00	 push	 440			; 000001b8H
  0a7b3	68 10 01 00 00	 push	 272			; 00000110H
  0a7b8	6a 04		 push	 4
  0a7ba	6a 04		 push	 4
  0a7bc	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0a7c1	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0a7c8	83 c4 18	 add	 esp, 24			; 00000018H
  0a7cb	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd

; 16298: 				// ???îî???
; 16299: 				for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 16300: 				// ????î???????î±??î??î¡?????????
; 16301: 				for (i = 0; i < MAX_ADR_BOOK; i++) {

  0a7d0	33 d2		 xor	 edx, edx
  0a7d2	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA, xmm0
  0a7d9	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+16, xmm0
  0a7e0	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+32, xmm0
  0a7e7	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+48, xmm0
  0a7ee	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+64, xmm0
  0a7f5	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+80, xmm0
  0a7fc	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+96, xmm0
  0a803	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+112, xmm0
  0a80a	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+128, xmm0
  0a811	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+144, xmm0
  0a818	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL317@MenuProc:

; 16302: 					int j;
; 16303: 					// ?????î¤???
; 16304: 					for (j = 0; j < MAIL_MAX_HISTORY; j++) {

  0a820	69 c2 f0 0e 00
	00		 imul	 eax, edx, 3824
  0a826	33 c9		 xor	 ecx, ecx
  0a828	05 a8 0c 00 00	 add	 eax, OFFSET ?MailHistory@@3PAUMAIL_HISTORY@@A+3240
  0a82d	0f 1f 00	 npad	 3
$LL320@MenuProc:

; 16305: 						// î ¹î????
; 16306: 						if (MailHistory[i].noReadFlag[j] >= TRUE) {

  0a830	83 38 01	 cmp	 DWORD PTR [eax], 1
  0a833	7d 0b		 jge	 SHORT $LN2313@MenuProc

; 16302: 					int j;
; 16303: 					// ?????î¤???
; 16304: 					for (j = 0; j < MAIL_MAX_HISTORY; j++) {

  0a835	41		 inc	 ecx
  0a836	83 c0 04	 add	 eax, 4
  0a839	83 f9 14	 cmp	 ecx, 20			; 00000014H
  0a83c	7c f2		 jl	 SHORT $LL320@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  0a83e	eb 15		 jmp	 SHORT $LN315@MenuProc
$LN2313@MenuProc:

; 16307: 							// ???î±?????
; 16308: 							mailViewWndPageNo = i / MAX_ADR_BOOK_COUNT;

  0a840	8b c2		 mov	 eax, edx
  0a842	99		 cdq
  0a843	83 e2 03	 and	 edx, 3
  0a846	03 c2		 add	 eax, edx

; 16309: 							i = MAX_ADR_BOOK;

  0a848	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  0a84d	c1 f8 02	 sar	 eax, 2
  0a850	a3 00 00 00 00	 mov	 DWORD PTR ?mailViewWndPageNo@@3HA, eax
$LN315@MenuProc:

; 16298: 				// ???îî???
; 16299: 				for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 16300: 				// ????î???????î±??î??î¡?????????
; 16301: 				for (i = 0; i < MAX_ADR_BOOK; i++) {

  0a855	42		 inc	 edx
  0a856	83 fa 50	 cmp	 edx, 80			; 00000050H
  0a859	7c c5		 jl	 SHORT $LL317@MenuProc

; 16310: 							break;
; 16311: 						}
; 16312: 					}
; 16313: 				}
; 16314: 			}

  0a85b	e9 c4 28 00 00	 jmp	 $LN4848@MenuProc
$LN1388@MenuProc:

; 16315: 			else {
; 16316: 				if (pActMenuWnd->hp > 0) {

  0a860	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0a866	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  0a86a	0f 8e b4 28 00
	00		 jle	 $LN4848@MenuProc

; 16317: 					static int nowDelNo;
; 16318: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_MAIL_WND, 1);

  0a870	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0a873	6a 01		 push	 1
  0a875	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_MAIL_WND@@3HA ; CG_MAIL_WND
  0a87b	6a 68		 push	 104			; 00000068H
  0a87d	ff 70 18	 push	 DWORD PTR [eax+24]
  0a880	ff 70 14	 push	 DWORD PTR [eax+20]
  0a883	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0a888	83 c4 14	 add	 esp, 20			; 00000014H

; 16319: 					if (mouse.onceState & MOUSE_LEFT_CRICK && pActYesNoWnd == NULL) {

  0a88b	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0a892	0f 84 e5 01 00
	00		 je	 $LN4827@MenuProc
  0a898	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A, 0 ; pActYesNoWnd
  0a89f	0f 85 d8 01 00
	00		 jne	 $LN4827@MenuProc

; 16320: 						int nowNo = mailViewWndPageNo * MAX_ADR_BOOK_COUNT;

  0a8a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailViewWndPageNo@@3HA
  0a8aa	bf 04 00 00 00	 mov	 edi, OFFSET ?mailWndFontNo@@3PAHA+4
  0a8af	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0a8b6	b8 36 00 00 00	 mov	 eax, 54			; 00000036H
  0a8bb	6b ce 68	 imul	 ecx, esi, 104
  0a8be	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR tv39279[ebp], eax
  0a8c4	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?addressBook@@3PAUADDRESS_BOOK@@A
  0a8ca	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR tv39277[ebp], ecx
$LL323@MenuProc:

; 16322: #ifdef _EXTEND_AB
; 16323: 							if (addressBook[nowNo].useFlag == TRUE
; 16324: 								|| addressBook[nowNo].useFlag == 2
; 16325: 								|| addressBook[nowNo].useFlag == 3) {

  0a8d0	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0a8d3	66 83 f9 01	 cmp	 cx, 1
  0a8d7	74 10		 je	 SHORT $LN1394@MenuProc
  0a8d9	66 83 f9 02	 cmp	 cx, 2
  0a8dd	74 0a		 je	 SHORT $LN1394@MenuProc
  0a8df	66 83 f9 03	 cmp	 cx, 3
  0a8e3	0f 85 25 01 00
	00		 jne	 $LN321@MenuProc
$LN1394@MenuProc:

; 16326: #else
; 16327: 							if (addressBook[nowNo].useFlag == TRUE) {
; 16328: #endif	
; 16329: 								if (HitFontNo == mailWndFontNo[i]) {

  0a8e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0a8ee	3b 47 fc	 cmp	 eax, DWORD PTR [edi-4]
  0a8f1	75 41		 jne	 SHORT $LN1395@MenuProc

; 16330: 									mailHistoryWndSelectNo = nowNo;
; 16331: 									DeathAction(pActMenuWnd);

  0a8f3	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0a8f9	89 35 00 00 00
	00		 mov	 DWORD PTR ?mailHistoryWndSelectNo@@3HA, esi ; mailHistoryWndSelectNo
  0a8ff	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16332: 									pActMenuWnd = NULL;

  0a904	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 16333: 									DeathLetterAction();

  0a90e	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction

; 16334: 									mailWndNo = MAIL_WND_HISTORY;
; 16335: 									play_se(202, 320, 240);

  0a913	68 f0 00 00 00	 push	 240			; 000000f0H
  0a918	68 40 01 00 00	 push	 320			; 00000140H
  0a91d	68 ca 00 00 00	 push	 202			; 000000caH
  0a922	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 5
  0a92c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0a931	83 c4 10	 add	 esp, 16			; 00000010H
$LN1395@MenuProc:

; 16336: 								}
; 16337: 								if (HitDispNo == mailWndFontNo[i + 1]) {

  0a934	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0a939	3b 07		 cmp	 eax, DWORD PTR [edi]
  0a93b	75 4d		 jne	 SHORT $LN1397@MenuProc

; 16338: 									if (pActYesNoWnd == NULL) {

  0a93d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A, 0 ; pActYesNoWnd
  0a944	75 44		 jne	 SHORT $LN1397@MenuProc

; 16339: 										play_se(202, 320, 240);

  0a946	68 f0 00 00 00	 push	 240			; 000000f0H
  0a94b	68 40 01 00 00	 push	 320			; 00000140H
  0a950	68 ca 00 00 00	 push	 202			; 000000caH
  0a955	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16340: 										pActYesNoWnd = MakeWindowDisp(pActMenuWnd->x + 42, i * 32 + 54, 176, 56, 0, 4);

  0a95a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0a95f	6a 04		 push	 4
  0a961	6a 00		 push	 0
  0a963	6a 38		 push	 56			; 00000038H
  0a965	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0a968	68 b0 00 00 00	 push	 176			; 000000b0H
  0a96d	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR tv39279[ebp]
  0a973	83 c0 2a	 add	 eax, 42			; 0000002aH
  0a976	50		 push	 eax
  0a977	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0a97c	83 c4 24	 add	 esp, 36			; 00000024H
  0a97f	a3 00 00 00 00	 mov	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A, eax ; pActYesNoWnd

; 16341: 										nowDelNo = nowNo;

  0a984	89 35 00 00 00
	00		 mov	 DWORD PTR ?nowDelNo@?ILK@??MenuProc@@YAXXZ@4HA, esi
$LN1397@MenuProc:

; 16342: 									}
; 16343: 								}
; 16344: 								if (HitDispNo == mailWndFontNo[i + 2]) {

  0a98a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0a98f	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0a992	0f 85 70 00 00
	00		 jne	 $LN5063@MenuProc

; 16345: 									DeathAction(pActMenuWnd);

  0a998	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0a99e	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0a9a3	83 c4 04	 add	 esp, 4

; 16346: 									pActMenuWnd = NULL;

  0a9a6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 16347: 									DeathLetterAction();

  0a9b0	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction

; 16348: 									InitMailSendFlag();

  0a9b5	e8 00 00 00 00	 call	 ?InitMailSendFlag@@YAXXZ ; InitMailSendFlag

; 16349: 									mailWndSendFlag[nowNo] = TRUE;
; 16350: 									mailWndNoBak = mailWndNo;
; 16351: 									if (ProcNo == PROC_BATTLE) {

  0a9ba	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  0a9c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A
  0a9c6	c7 04 b5 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?mailWndSendFlag@@3PAHA[esi*4], 1
  0a9d1	a3 00 00 00 00	 mov	 DWORD PTR ?mailWndNoBak@@3W4MAIL_WND_TYPE@@A, eax
  0a9d6	74 0f		 je	 SHORT $LN1401@MenuProc

; 16352: 										mailWndNo = MAIL_WND_SEND;
; 16353: 									}
; 16354: 									else {
; 16355: 										if (pc.mailPetNo != -1) {

  0a9d8	66 83 3d b6 00
	00 00 ff	 cmp	 WORD PTR ?pc@@3UPC@@A+182, -1

; 16356: 											mailWndNo = MAIL_WND_SELECT;

  0a9e0	b8 01 00 00 00	 mov	 eax, 1
  0a9e5	75 05		 jne	 SHORT $LN1402@MenuProc
$LN1401@MenuProc:

; 16357: 										}
; 16358: 										else {
; 16359: 											mailWndNo = MAIL_WND_SEND;

  0a9e7	b8 02 00 00 00	 mov	 eax, 2
$LN1402@MenuProc:

; 16360: 										}
; 16361: 									}
; 16362: 									play_se(202, 320, 240);

  0a9ec	68 f0 00 00 00	 push	 240			; 000000f0H
  0a9f1	68 40 01 00 00	 push	 320			; 00000140H
  0a9f6	68 ca 00 00 00	 push	 202			; 000000caH
  0a9fb	a3 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, eax
  0aa00	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0aa05	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5063@MenuProc:

; 16321: 						for (i = 0; i < 12; i += 3, nowNo++) {

  0aa08	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR tv39279[ebp]
$LN321@MenuProc:
  0aa0e	8b 8d f8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39277[ebp]
  0aa14	83 c0 60	 add	 eax, 96			; 00000060H
  0aa17	83 c1 68	 add	 ecx, 104		; 00000068H
  0aa1a	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR tv39279[ebp], eax
  0aa20	83 c7 0c	 add	 edi, 12			; 0000000cH
  0aa23	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR tv39277[ebp], ecx
  0aa29	46		 inc	 esi
  0aa2a	3d b6 01 00 00	 cmp	 eax, 438		; 000001b6H
  0aa2f	0f 8c 9b fe ff
	ff		 jl	 $LL323@MenuProc

; 16363: 								}
; 16364: 							}
; 16365: 						}
; 16366: 						if (HitDispNo == mailWndFontNo[19]) {

  0aa35	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0aa3a	3b 05 4c 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+76
  0aa40	75 3b		 jne	 SHORT $LN4827@MenuProc

; 16367: 							DeathAction(pActMenuWnd);

  0aa42	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0aa48	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16368: 							pActMenuWnd = NULL;

  0aa4d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 16369: 							DeathLetterAction();

  0aa57	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction

; 16370: 							MenuToggleFlag ^= JOY_CTRL_E;

  0aa5c	81 35 00 00 00
	00 00 00 00 04	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 67108864 ; MenuToggleFlag, 04000000H

; 16371: 							play_se(203, 320, 240);

  0aa66	68 f0 00 00 00	 push	 240			; 000000f0H
  0aa6b	68 40 01 00 00	 push	 320			; 00000140H
  0aa70	68 cb 00 00 00	 push	 203			; 000000cbH
  0aa75	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0aa7a	83 c4 10	 add	 esp, 16			; 00000010H
$LN4827@MenuProc:

; 16372: 						}
; 16373: 					}
; 16374: 					if ((HitDispNo == mailWndFontNo[26] || joy_con[0] & JOY_A) && pActYesNoWnd == NULL) {

  0aa7d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0aa82	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0aa88	3b 05 68 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+104
  0aa8e	74 0c		 je	 SHORT $LN1406@MenuProc
  0aa90	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  0aa96	0f 84 87 00 00
	00		 je	 $LN1404@MenuProc
$LN1406@MenuProc:
  0aa9c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A, 0 ; pActYesNoWnd
  0aaa3	0f 85 7a 00 00
	00		 jne	 $LN1404@MenuProc

; 16375: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_A) {

  0aaa9	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  0aab0	75 0c		 jne	 SHORT $LN1408@MenuProc
  0aab2	f7 05 00 00 00
	00 00 04 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 1024 ; 00000400H
  0aabc	74 41		 je	 SHORT $LN1407@MenuProc
$LN1408@MenuProc:

; 16376: 							mailViewWndPageNo--;

  0aabe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailViewWndPageNo@@3HA

; 16377: 							if (mailViewWndPageNo < 0) mailViewWndPageNo = MAX_ADR_BOOK_PAGE - 1;

  0aac3	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  0aac8	83 e8 01	 sub	 eax, 1

; 16378: 							play_se(217, 320, 240);

  0aacb	68 f0 00 00 00	 push	 240			; 000000f0H
  0aad0	0f 48 c1	 cmovs	 eax, ecx
  0aad3	68 40 01 00 00	 push	 320			; 00000140H
  0aad8	68 d9 00 00 00	 push	 217			; 000000d9H
  0aadd	a3 00 00 00 00	 mov	 DWORD PTR ?mailViewWndPageNo@@3HA, eax
  0aae2	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0aae7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16379: 							mailWndBtnFlag[26] = TRUE;

  0aaea	c7 05 68 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+104, 1

; 16380: 							DeathLetterAction();

  0aaf4	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction
  0aaf9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
$LN1407@MenuProc:

; 16381: 						}
; 16382: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_A) && mailWndBtnFlag[26] == TRUE) {

  0aaff	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0ab06	75 08		 jne	 SHORT $LN1412@MenuProc
  0ab08	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  0ab0e	74 13		 je	 SHORT $LN1404@MenuProc
$LN1412@MenuProc:
  0ab10	83 3d 68 00 00
	00 01		 cmp	 DWORD PTR ?mailWndBtnFlag@@3PAHA+104, 1

; 16383: 							mailWndBtnFlag[26] = TRUE;

  0ab17	c7 05 68 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+104, 1
  0ab21	74 0a		 je	 SHORT $LN1405@MenuProc
$LN1404@MenuProc:

; 16384: 						}
; 16385: 						else {
; 16386: 							mailWndBtnFlag[26] = FALSE;
; 16387: 						}
; 16388: 					}
; 16389: 					else {
; 16390: 						mailWndBtnFlag[26] = FALSE;
; 16391: 					}
; 16392: 					if ((HitDispNo == mailWndFontNo[27] || joy_con[0] & JOY_B) && pActYesNoWnd == NULL) {

  0ab23	c7 05 68 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+104, 0
$LN1405@MenuProc:
  0ab2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0ab32	3b 05 6c 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+108
  0ab38	74 0c		 je	 SHORT $LN1415@MenuProc
  0ab3a	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0ab40	0f 84 85 00 00
	00		 je	 $LN1413@MenuProc
$LN1415@MenuProc:
  0ab46	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A, 0 ; pActYesNoWnd
  0ab4d	0f 85 78 00 00
	00		 jne	 $LN1413@MenuProc

; 16393: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_B) {

  0ab53	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  0ab5a	75 0c		 jne	 SHORT $LN1417@MenuProc
  0ab5c	f7 05 00 00 00
	00 00 01 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 256 ; 00000100H
  0ab66	74 3f		 je	 SHORT $LN1416@MenuProc
$LN1417@MenuProc:

; 16394: 							mailViewWndPageNo++;

  0ab68	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailViewWndPageNo@@3HA

; 16395: 							if (mailViewWndPageNo >= MAX_ADR_BOOK_PAGE) mailViewWndPageNo = 0;

  0ab6d	33 c9		 xor	 ecx, ecx
  0ab6f	40		 inc	 eax
  0ab70	83 f8 14	 cmp	 eax, 20			; 00000014H

; 16396: 							play_se(217, 320, 240);

  0ab73	68 f0 00 00 00	 push	 240			; 000000f0H
  0ab78	0f 4d c1	 cmovge	 eax, ecx
  0ab7b	68 40 01 00 00	 push	 320			; 00000140H
  0ab80	68 d9 00 00 00	 push	 217			; 000000d9H
  0ab85	a3 00 00 00 00	 mov	 DWORD PTR ?mailViewWndPageNo@@3HA, eax
  0ab8a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0ab8f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16397: 							mailWndBtnFlag[27] = TRUE;

  0ab92	c7 05 6c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+108, 1

; 16398: 							DeathLetterAction();

  0ab9c	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction
  0aba1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
$LN1416@MenuProc:

; 16399: 						}
; 16400: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_B) && mailWndBtnFlag[27] == TRUE) {

  0aba7	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0abae	75 08		 jne	 SHORT $LN1421@MenuProc
  0abb0	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0abb6	74 13		 je	 SHORT $LN1413@MenuProc
$LN1421@MenuProc:
  0abb8	83 3d 6c 00 00
	00 01		 cmp	 DWORD PTR ?mailWndBtnFlag@@3PAHA+108, 1

; 16401: 							mailWndBtnFlag[27] = TRUE;

  0abbf	c7 05 6c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+108, 1
  0abc9	74 0a		 je	 SHORT $LN1414@MenuProc
$LN1413@MenuProc:

; 16402: 						}
; 16403: 						else {
; 16404: 							mailWndBtnFlag[27] = FALSE;
; 16405: 						}
; 16406: 					}
; 16407: 					else {
; 16408: 						mailWndBtnFlag[27] = FALSE;
; 16409: 					}
; 16410: 					if (pActMenuWnd != NULL) {

  0abcb	c7 05 6c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+108, 0
$LN1414@MenuProc:
  0abd5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0abdb	85 c9		 test	 ecx, ecx
  0abdd	0f 84 81 04 00
	00		 je	 $LN1422@MenuProc

; 16411: 						int nowNo = mailViewWndPageNo * MAX_ADR_BOOK_COUNT;

  0abe3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailViewWndPageNo@@3HA

; 16412: 						x = pActMenuWnd->x;
; 16413: 						y = pActMenuWnd->y;
; 16414: 						int graNo[7] = { CG_MAIL_WND_OFF_LINE_BTN,
; 16415: 							CG_MAIL_WND_ON_LINE_SUN_BTN,
; 16416: 							CG_MAIL_WND_ON_LINE_MOON_BTN,
; 16417: 							CG_MAIL_WND_ON_LINE_MERCURY_BTN,
; 16418: 							CG_MAIL_WND_ON_LINE_VINUS_BTN,
; 16419: 							CG_MAIL_WND_ON_LINE_EARTH_BTN,
; 16420: 							CG_MAIL_WND_ON_LINE_MARS_BTN
; 16421: 						};
; 16422: 
; 16423: 						for (i = 0; i < 12; i += 3, nowNo++) {

  0abe8	33 d2		 xor	 edx, edx
  0abea	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  0abed	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00006536000065e8000065e4000065e5
  0abf4	89 bd 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], edi
  0abfa	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0ac01	c7 85 44 d8 ff
	ff 37 65 00 00	 mov	 DWORD PTR _graNo$32[ebp+16], 25911 ; 00006537H
  0ac0b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0ac0e	89 b5 f4 b9 ff
	ff		 mov	 DWORD PTR _nowNo$1$[ebp], esi
  0ac14	0f 11 85 34 d8
	ff ff		 movups	 XMMWORD PTR _graNo$32[ebp], xmm0
  0ac1b	c7 85 48 d8 ff
	ff 38 65 00 00	 mov	 DWORD PTR _graNo$32[ebp+20], 25912 ; 00006538H
  0ac25	8d 48 55	 lea	 ecx, DWORD PTR [eax+85]
  0ac28	c7 85 4c d8 ff
	ff 39 65 00 00	 mov	 DWORD PTR _graNo$32[ebp+24], 25913 ; 00006539H
  0ac32	05 80 01 00 00	 add	 eax, 384		; 00000180H
  0ac37	89 95 00 ba ff
	ff		 mov	 DWORD PTR _i$23$[ebp], edx
  0ac3d	89 8d 0c ba ff
	ff		 mov	 DWORD PTR tv39276[ebp], ecx
  0ac43	89 85 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], eax
  0ac49	0f 1f 80 00 00
	00 00		 npad	 7
$LL326@MenuProc:

; 16424: #ifdef _EXTEND_AB
; 16425: 							if (addressBook[nowNo].useFlag == TRUE
; 16426: 								|| addressBook[nowNo].useFlag == 2
; 16427: 								|| addressBook[nowNo].useFlag == 3) {

  0ac50	6b c6 68	 imul	 eax, esi, 104
  0ac53	89 85 e8 b9 ff
	ff		 mov	 DWORD PTR tv38431[ebp], eax
  0ac59	0f b7 80 00 00
	00 00		 movzx	 eax, WORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[eax]
  0ac60	66 83 f8 01	 cmp	 ax, 1
  0ac64	74 3b		 je	 SHORT $LN1425@MenuProc
  0ac66	66 83 f8 02	 cmp	 ax, 2
  0ac6a	74 35		 je	 SHORT $LN1425@MenuProc
  0ac6c	66 83 f8 03	 cmp	 ax, 3
  0ac70	74 2f		 je	 SHORT $LN1425@MenuProc

; 16470: 
; 16471: 							}
; 16472: #ifdef _EXTEND_AB
; 16473: 							else {
; 16474: 								if (nowNo == MAX_ADR_BOOK - 1)

  0ac72	83 fe 4f	 cmp	 esi, 79			; 0000004fH
  0ac75	0f 85 f8 02 00
	00		 jne	 $LN1432@MenuProc

; 16475: 								{
; 16476: 									StockFontBuffer(x + 100, y + 30, FONT_PRIO_FRONT, FONT_PAL_RED, "ì ë ¹ ìí ì©ë", 0);

  0ac7b	6a 00		 push	 0
  0ac7d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KLBINAOA@?A?$KE?$LH?I?5?$LM?R?H?$KP?5?$LP?k?$LF?$LF@
  0ac82	6a 06		 push	 6
  0ac84	8d 41 c9	 lea	 eax, DWORD PTR [ecx-55]
  0ac87	6a 01		 push	 1
  0ac89	50		 push	 eax
  0ac8a	8d 47 64	 lea	 eax, DWORD PTR [edi+100]
  0ac8d	50		 push	 eax
  0ac8e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0ac93	8b 95 00 ba ff
	ff		 mov	 edx, DWORD PTR _i$23$[ebp]
  0ac99	83 c4 18	 add	 esp, 24			; 00000018H
  0ac9c	e9 cc 02 00 00	 jmp	 $LN5133@MenuProc
$LN1425@MenuProc:
  0aca1	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H

; 16428: #else
; 16429: 							if (addressBook[nowNo].useFlag == TRUE) {
; 16430: #endif
; 16431: 								int j = 0;
; 16432: 								for (j = 0; j < MAIL_MAX_HISTORY; j++) {

  0aca6	33 f6		 xor	 esi, esi
  0aca8	f7 ea		 imul	 edx
  0acaa	8b c2		 mov	 eax, edx
  0acac	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0acaf	03 c2		 add	 eax, edx
  0acb1	89 85 e0 b9 ff
	ff		 mov	 DWORD PTR tv37117[ebp], eax
  0acb7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL329@MenuProc:

; 16433: 									if (pActLetter[i / 3] == NULL) {

  0acc0	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR ?pActLetter@@3PAPAUaction@@A[eax*4], 0
  0acc8	75 46		 jne	 SHORT $LN327@MenuProc

; 16434: 										if (MailHistory[nowNo].noReadFlag[j] >= TRUE) {

  0acca	69 85 f4 b9 ff
	ff bc 03 00 00	 imul	 eax, DWORD PTR _nowNo$1$[ebp], 956
  0acd4	03 c6		 add	 eax, esi
  0acd6	83 3c 85 a8 0c
	00 00 01	 cmp	 DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax*4+3240], 1
  0acde	7c 2a		 jl	 SHORT $LN5054@MenuProc

; 16435: 											pActLetter[i / 3] = MakeAnimDisp(x - 20, y + 38, SPR_mail, ANIM_DISP_LETTER_MOVE);

  0ace0	6a 0b		 push	 11			; 0000000bH
  0ace2	8d 41 d1	 lea	 eax, DWORD PTR [ecx-47]
  0ace5	68 9b 88 01 00	 push	 100507			; 0001889bH
  0acea	50		 push	 eax
  0aceb	8d 47 ec	 lea	 eax, DWORD PTR [edi-20]
  0acee	50		 push	 eax
  0acef	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  0acf4	8b 8d e0 b9 ff
	ff		 mov	 ecx, DWORD PTR tv37117[ebp]
  0acfa	83 c4 10	 add	 esp, 16			; 00000010H
  0acfd	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?pActLetter@@3PAPAUaction@@A[ecx*4], eax
  0ad04	8b 8d 0c ba ff
	ff		 mov	 ecx, DWORD PTR tv39276[ebp]
$LN5054@MenuProc:

; 16428: #else
; 16429: 							if (addressBook[nowNo].useFlag == TRUE) {
; 16430: #endif
; 16431: 								int j = 0;
; 16432: 								for (j = 0; j < MAIL_MAX_HISTORY; j++) {

  0ad0a	8b 85 e0 b9 ff
	ff		 mov	 eax, DWORD PTR tv37117[ebp]
$LN327@MenuProc:
  0ad10	46		 inc	 esi
  0ad11	83 fe 14	 cmp	 esi, 20			; 00000014H
  0ad14	7c aa		 jl	 SHORT $LL329@MenuProc

; 16436: 										}
; 16437: 									}
; 16438: 								}
; 16439: #ifdef _EXTEND_AB
; 16440: 								if (addressBook[nowNo].useFlag == 2)

  0ad16	8b b5 e8 b9 ff
	ff		 mov	 esi, DWORD PTR tv38431[ebp]
  0ad1c	0f b7 86 00 00
	00 00		 movzx	 eax, WORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[esi]
  0ad23	8b d0		 mov	 edx, eax
  0ad25	89 95 d8 b9 ff
	ff		 mov	 DWORD PTR tv38729[ebp], edx
  0ad2b	8d 57 0f	 lea	 edx, DWORD PTR [edi+15]
  0ad2e	66 83 f8 02	 cmp	 ax, 2
  0ad32	75 21		 jne	 SHORT $LN3317@MenuProc

; 16441: 									StockFontBuffer(x + 15, y + 85, FONT_PRIO_FRONT, 5, "ì ë ¹ì ì¬ì", 0);

  0ad34	6a 00		 push	 0
  0ad36	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MELGFJCD@?A?$KE?$LH?I?$MA?G?5?$LL?g?$MA?Z@
  0ad3b	6a 05		 push	 5
  0ad3d	6a 01		 push	 1
  0ad3f	51		 push	 ecx
  0ad40	52		 push	 edx
  0ad41	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0ad46	0f b7 86 00 00
	00 00		 movzx	 eax, WORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[esi]
  0ad4d	8d 57 0f	 lea	 edx, DWORD PTR [edi+15]
  0ad50	83 c4 18	 add	 esp, 24			; 00000018H
  0ad53	eb 09		 jmp	 SHORT $LN1428@MenuProc
$LN3317@MenuProc:
  0ad55	8b 85 d8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38729[ebp]
  0ad5b	0f b7 c0	 movzx	 eax, ax
$LN1428@MenuProc:

; 16442: 								if (addressBook[nowNo].useFlag == 3)

  0ad5e	8b b5 0c ba ff
	ff		 mov	 esi, DWORD PTR tv39276[ebp]
  0ad64	66 83 f8 03	 cmp	 ax, 3
  0ad68	75 15		 jne	 SHORT $LN1429@MenuProc

; 16443: 									StockFontBuffer(x + 15, y + 85, FONT_PRIO_FRONT, 5, "ì ë ¹ì ì©ì", 0);

  0ad6a	6a 00		 push	 0
  0ad6c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HLOAEAFL@?A?$KE?$LH?I?$MA?G?5?$LP?k?$MA?Z@
  0ad71	6a 05		 push	 5
  0ad73	6a 01		 push	 1
  0ad75	56		 push	 esi
  0ad76	52		 push	 edx
  0ad77	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0ad7c	83 c4 18	 add	 esp, 24			; 00000018H
$LN1429@MenuProc:

; 16444: #endif
; 16445: 								StockDispBuffer(x + 44, y + 68, DISP_PRIO_IME3, addressBook[nowNo].graNo, 0);

  0ad7f	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv38431[ebp]
  0ad85	8d 46 ef	 lea	 eax, DWORD PTR [esi-17]
  0ad88	6a 00		 push	 0
  0ad8a	ff b1 10 00 00
	00		 push	 DWORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[ecx+16]
  0ad90	6a 69		 push	 105			; 00000069H
  0ad92	50		 push	 eax
  0ad93	8d 47 2c	 lea	 eax, DWORD PTR [edi+44]
  0ad96	50		 push	 eax
  0ad97	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 16446: 								CenteringStr(addressBook[nowNo].name, moji, CHAR_NAME_LEN);

  0ad9c	6a 10		 push	 16			; 00000010H
  0ad9e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ada4	50		 push	 eax
  0ada5	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38431[ebp]
  0adab	8d 80 14 00 00
	00		 lea	 eax, DWORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[eax+20]
  0adb1	50		 push	 eax
  0adb2	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 16447: 								mailWndFontNo[i] = StockFontBuffer(x + 80, y + 30, FONT_PRIO_FRONT, 0, moji, 2);

  0adb7	6a 02		 push	 2
  0adb9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0adbf	83 c6 c9	 add	 esi, -55		; ffffffc9H
  0adc2	50		 push	 eax
  0adc3	6a 00		 push	 0
  0adc5	6a 01		 push	 1
  0adc7	8d 47 50	 lea	 eax, DWORD PTR [edi+80]
  0adca	56		 push	 esi
  0adcb	50		 push	 eax
  0adcc	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0add1	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR _i$23$[ebp]
  0add7	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?mailWndFontNo@@3PAHA[ecx*4], eax

; 16448: 								sprintf(moji, "%3d", addressBook[nowNo].level);

  0adde	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38431[ebp]
  0ade4	ff b0 04 00 00
	00		 push	 DWORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[eax+4]
  0adea	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0adf0	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0adf5	50		 push	 eax
  0adf6	e8 00 00 00 00	 call	 _sprintf

; 16449: 								StockFontBuffer(x + 104, y + 60, FONT_PRIO_FRONT, 0, moji, 0);

  0adfb	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39276[ebp]
  0ae01	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  0ae07	83 c4 44	 add	 esp, 68			; 00000044H
  0ae0a	83 c0 e7	 add	 eax, -25		; ffffffe7H
  0ae0d	89 85 d8 b9 ff
	ff		 mov	 DWORD PTR tv39274[ebp], eax
  0ae13	6a 00		 push	 0
  0ae15	51		 push	 ecx
  0ae16	6a 00		 push	 0
  0ae18	6a 01		 push	 1
  0ae1a	50		 push	 eax
  0ae1b	8d 47 68	 lea	 eax, DWORD PTR [edi+104]
  0ae1e	50		 push	 eax
  0ae1f	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16450: #ifdef _MAILSHOWPLANET				// (å¯å¼æ¾) Syu ADD æ¾ç¤ºåçæç
; 16451: 								sprintf(moji, "%8s", addressBook[nowNo].planetname);

  0ae24	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38431[ebp]
  0ae2a	8d 80 25 00 00
	00		 lea	 eax, DWORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[eax+37]
  0ae30	50		 push	 eax
  0ae31	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ae37	68 00 00 00 00	 push	 OFFSET ??_C@_03GHDNOBPC@?$CF8s@
  0ae3c	50		 push	 eax
  0ae3d	e8 00 00 00 00	 call	 _sprintf

; 16452: 								StockFontBuffer(x + 198, y + 30, FONT_PRIO_FRONT, 5, moji, 0);

  0ae42	6a 00		 push	 0
  0ae44	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ae4a	50		 push	 eax
  0ae4b	6a 05		 push	 5
  0ae4d	6a 01		 push	 1
  0ae4f	8d 87 c6 00 00
	00		 lea	 eax, DWORD PTR [edi+198]
  0ae55	56		 push	 esi
  0ae56	50		 push	 eax
  0ae57	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16453: #endif
; 16454: 								//
; 16455: #ifdef _TRANS_6
; 16456: #ifdef _TRANS_7
; 16457: 								if (addressBook[nowNo].transmigration < 0 || addressBook[nowNo].transmigration >= 8) addressBook[nowNo].transmigration = 0;

  0ae5c	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38431[ebp]
  0ae62	83 c4 3c	 add	 esp, 60			; 0000003cH
  0ae65	0f b7 88 08 00
	00 00		 movzx	 ecx, WORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[eax+8]
  0ae6c	8b d1		 mov	 edx, ecx
  0ae6e	66 85 c9	 test	 cx, cx
  0ae71	78 06		 js	 SHORT $LN1431@MenuProc
  0ae73	66 83 f9 08	 cmp	 cx, 8
  0ae77	7c 0b		 jl	 SHORT $LN1430@MenuProc
$LN1431@MenuProc:
  0ae79	33 d2		 xor	 edx, edx
  0ae7b	33 c9		 xor	 ecx, ecx
  0ae7d	66 89 88 08 00
	00 00		 mov	 WORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[eax+8], cx
$LN1430@MenuProc:

; 16458: #else
; 16459: 								if (addressBook[nowNo].transmigration < 0 || addressBook[nowNo].transmigration >= 7) addressBook[nowNo].transmigration = 0;
; 16460: #endif
; 16461: #else								
; 16462: 								if (addressBook[nowNo].transmigration < 0 || addressBook[nowNo].transmigration >= 6) addressBook[nowNo].transmigration = 0;
; 16463: #endif
; 16464: 								StockFontBuffer(x + 152, y + 59, FONT_PRIO_FRONT, FONT_PAL_AQUA, TransmigrationStr[addressBook[nowNo].transmigration], 0);

  0ae84	8b b5 0c ba ff
	ff		 mov	 esi, DWORD PTR tv39276[ebp]
  0ae8a	0f b7 c2	 movzx	 eax, dx
  0ae8d	6a 00		 push	 0
  0ae8f	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?TransmigrationStr@@3PAPADA[eax*4]
  0ae96	8d 46 e6	 lea	 eax, DWORD PTR [esi-26]
  0ae99	6a 01		 push	 1
  0ae9b	6a 01		 push	 1
  0ae9d	50		 push	 eax
  0ae9e	8d 87 98 00 00
	00		 lea	 eax, DWORD PTR [edi+152]
  0aea4	50		 push	 eax
  0aea5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16465: 								sprintf(moji, "%8d", addressBook[nowNo].dp);

  0aeaa	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38431[ebp]
  0aeb0	ff b0 0c 00 00
	00		 push	 DWORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[eax+12]
  0aeb6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0aebc	68 00 00 00 00	 push	 OFFSET ??_C@_03GCLOGFGE@?$CF8d@
  0aec1	50		 push	 eax
  0aec2	e8 00 00 00 00	 call	 _sprintf

; 16466: 								StockFontBuffer(x + 103, y + 88, FONT_PRIO_FRONT, 0, moji, 0);

  0aec7	6a 00		 push	 0
  0aec9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0aecf	50		 push	 eax
  0aed0	6a 00		 push	 0
  0aed2	6a 01		 push	 1
  0aed4	8d 46 03	 lea	 eax, DWORD PTR [esi+3]
  0aed7	50		 push	 eax
  0aed8	8d 47 67	 lea	 eax, DWORD PTR [edi+103]
  0aedb	50		 push	 eax
  0aedc	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16467: 								StockDispBuffer(x + 225, y + 60, DISP_PRIO_IME3, graNo[(addressBook[nowNo].onlineFlag == 0) ? 0 : 1], 0);

  0aee1	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv38431[ebp]
  0aee7	8d b7 e1 00 00
	00		 lea	 esi, DWORD PTR [edi+225]
  0aeed	33 c0		 xor	 eax, eax
  0aeef	6a 00		 push	 0
  0aef1	66 39 81 02 00
	00 00		 cmp	 WORD PTR ?addressBook@@3PAUADDRESS_BOOK@@A[ecx+2], ax
  0aef8	b9 04 00 00 00	 mov	 ecx, 4
  0aefd	0f 45 c1	 cmovne	 eax, ecx
  0af00	ff b4 05 34 d8
	ff ff		 push	 DWORD PTR _graNo$32[ebp+eax]
  0af07	6a 69		 push	 105			; 00000069H
  0af09	ff b5 d8 b9 ff
	ff		 push	 DWORD PTR tv39274[ebp]
  0af0f	56		 push	 esi
  0af10	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 16468: 								mailWndFontNo[i + 2] = StockDispBuffer(x + 225, y + 80, DISP_PRIO_IME3, CG_MAIL_WND_MAIL_BTN, 2);

  0af15	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39276[ebp]
  0af1b	83 c4 50	 add	 esp, 80			; 00000050H
  0af1e	83 c0 fb	 add	 eax, -5			; fffffffbH
  0af21	6a 02		 push	 2
  0af23	68 e6 65 00 00	 push	 26086			; 000065e6H
  0af28	6a 69		 push	 105			; 00000069H
  0af2a	50		 push	 eax
  0af2b	56		 push	 esi
  0af2c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0af31	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR _i$23$[ebp]

; 16469: 								mailWndFontNo[i + 1] = StockDispBuffer(x + 225, y + 100, DISP_PRIO_IME3, CG_MAIL_WND_DELETE_BTN, 2);

  0af37	6a 02		 push	 2
  0af39	68 e7 65 00 00	 push	 26087			; 000065e7H
  0af3e	6a 69		 push	 105			; 00000069H
  0af40	89 04 8d 08 00
	00 00		 mov	 DWORD PTR ?mailWndFontNo@@3PAHA[ecx*4+8], eax
  0af47	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39276[ebp]
  0af4d	83 c0 0f	 add	 eax, 15			; 0000000fH
  0af50	50		 push	 eax
  0af51	56		 push	 esi
  0af52	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0af57	8b 95 00 ba ff
	ff		 mov	 edx, DWORD PTR _i$23$[ebp]
  0af5d	83 c4 28	 add	 esp, 40			; 00000028H
  0af60	8b b5 f4 b9 ff
	ff		 mov	 esi, DWORD PTR _nowNo$1$[ebp]
  0af66	89 04 95 04 00
	00 00		 mov	 DWORD PTR ?mailWndFontNo@@3PAHA[edx*4+4], eax
$LN5133@MenuProc:

; 16477: 								}
; 16478: 							}
; 16479: #endif
; 16480: 							y += 96;

  0af6d	8b 8d 0c ba ff
	ff		 mov	 ecx, DWORD PTR tv39276[ebp]
$LN1432@MenuProc:

; 16412: 						x = pActMenuWnd->x;
; 16413: 						y = pActMenuWnd->y;
; 16414: 						int graNo[7] = { CG_MAIL_WND_OFF_LINE_BTN,
; 16415: 							CG_MAIL_WND_ON_LINE_SUN_BTN,
; 16416: 							CG_MAIL_WND_ON_LINE_MOON_BTN,
; 16417: 							CG_MAIL_WND_ON_LINE_MERCURY_BTN,
; 16418: 							CG_MAIL_WND_ON_LINE_VINUS_BTN,
; 16419: 							CG_MAIL_WND_ON_LINE_EARTH_BTN,
; 16420: 							CG_MAIL_WND_ON_LINE_MARS_BTN
; 16421: 						};
; 16422: 
; 16423: 						for (i = 0; i < 12; i += 3, nowNo++) {

  0af73	83 c2 03	 add	 edx, 3

; 16477: 								}
; 16478: 							}
; 16479: #endif
; 16480: 							y += 96;

  0af76	83 c1 60	 add	 ecx, 96			; 00000060H
  0af79	46		 inc	 esi
  0af7a	89 8d 0c ba ff
	ff		 mov	 DWORD PTR tv39276[ebp], ecx
  0af80	89 95 00 ba ff
	ff		 mov	 DWORD PTR _i$23$[ebp], edx
  0af86	89 b5 f4 b9 ff
	ff		 mov	 DWORD PTR _nowNo$1$[ebp], esi
  0af8c	83 fa 0c	 cmp	 edx, 12			; 0000000cH
  0af8f	0f 8c bb fc ff
	ff		 jl	 $LL326@MenuProc

; 16481: 						}
; 16482: 						mailWndFontNo[26] = StockDispBuffer(pActMenuWnd->x + 25 + 28 - 8, pActMenuWnd->y + 421, DISP_PRIO_IME3, CG_PREV_BTN + mailWndBtnFlag[26], 2);

  0af95	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0af9b	a1 68 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+104
  0afa0	05 44 66 00 00	 add	 eax, 26180		; 00006644H
  0afa5	6a 02		 push	 2
  0afa7	50		 push	 eax
  0afa8	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0afab	05 a5 01 00 00	 add	 eax, 421		; 000001a5H
  0afb0	6a 69		 push	 105			; 00000069H
  0afb2	50		 push	 eax
  0afb3	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0afb6	83 c0 2d	 add	 eax, 45			; 0000002dH
  0afb9	50		 push	 eax
  0afba	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0afbf	a3 68 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+104, eax

; 16483: 						sprintf(moji, "%2d", mailViewWndPageNo + 1);

  0afc4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailViewWndPageNo@@3HA
  0afc9	40		 inc	 eax
  0afca	50		 push	 eax
  0afcb	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0afd1	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  0afd6	50		 push	 eax
  0afd7	e8 00 00 00 00	 call	 _sprintf

; 16484: 						StockFontBuffer(pActMenuWnd->x + 46 + 28 - 8, pActMenuWnd->y + 413, FONT_PRIO_FRONT, 0, moji, 0);

  0afdc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0afe2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0afe8	6a 00		 push	 0
  0afea	50		 push	 eax
  0afeb	6a 00		 push	 0
  0afed	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0aff0	05 9d 01 00 00	 add	 eax, 413		; 0000019dH
  0aff5	6a 01		 push	 1
  0aff7	50		 push	 eax
  0aff8	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0affb	83 c0 42	 add	 eax, 66			; 00000042H
  0affe	50		 push	 eax
  0afff	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16485: 						mailWndFontNo[27] = StockDispBuffer(pActMenuWnd->x + 75 + 28, pActMenuWnd->y + 421, DISP_PRIO_IME3, CG_NEXT_BTN + mailWndBtnFlag[27], 2);

  0b004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b00a	a1 6c 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+108
  0b00f	05 46 66 00 00	 add	 eax, 26182		; 00006646H
  0b014	6a 02		 push	 2
  0b016	50		 push	 eax
  0b017	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0b01a	05 a5 01 00 00	 add	 eax, 421		; 000001a5H
  0b01f	6a 69		 push	 105			; 00000069H
  0b021	50		 push	 eax
  0b022	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0b025	83 c0 67	 add	 eax, 103		; 00000067H
  0b028	50		 push	 eax
  0b029	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 16486: 						mailWndFontNo[19] = StockDispBuffer(pActMenuWnd->x + 220 - 28, pActMenuWnd->y + 421, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  0b02e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b034	83 c4 4c	 add	 esp, 76			; 0000004cH
  0b037	a3 6c 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+108, eax
  0b03c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0b03f	6a 02		 push	 2
  0b041	68 ba 65 00 00	 push	 26042			; 000065baH
  0b046	05 a5 01 00 00	 add	 eax, 421		; 000001a5H
  0b04b	6a 69		 push	 105			; 00000069H
  0b04d	50		 push	 eax
  0b04e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0b051	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  0b056	50		 push	 eax
  0b057	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0b05c	83 c4 14	 add	 esp, 20			; 00000014H
  0b05f	a3 4c 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+76, eax
$LN1422@MenuProc:

; 16487: 					}
; 16488: 					if (pActYesNoWnd != NULL) {

  0b064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActYesNoWnd@@3PAUaction@@A ; pActYesNoWnd
  0b069	85 c0		 test	 eax, eax
  0b06b	0f 84 b3 20 00
	00		 je	 $LN4848@MenuProc

; 16489: 						if (((WINDOW_DISP *)pActYesNoWnd->pYobi)->yesNoResult == TRUE) {

  0b071	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0b074	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  0b077	83 f8 01	 cmp	 eax, 1
  0b07a	0f 85 69 00 00
	00		 jne	 $LN1434@MenuProc

; 16490: 							if (bNewServer)

  0b080	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0b087	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowDelNo@?ILK@??MenuProc@@YAXXZ@4HA
  0b08d	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0b093	74 07		 je	 SHORT $LN1436@MenuProc

; 16491: 								lssproto_DAB_send(sockfd, nowDelNo);

  0b095	e8 00 00 00 00	 call	 ?lssproto_DAB_send@@YAXHH@Z ; lssproto_DAB_send
  0b09a	eb 05		 jmp	 SHORT $LN5134@MenuProc
$LN1436@MenuProc:

; 16492: 							else
; 16493: 								old_lssproto_DAB_send(sockfd, nowDelNo);

  0b09c	e8 00 00 00 00	 call	 ?old_lssproto_DAB_send@@YAXHH@Z ; old_lssproto_DAB_send
$LN5134@MenuProc:

; 16494: 							play_se(217, 320, 240);

  0b0a1	83 c4 08	 add	 esp, 8
  0b0a4	68 f0 00 00 00	 push	 240			; 000000f0H
  0b0a9	68 40 01 00 00	 push	 320			; 00000140H
  0b0ae	68 d9 00 00 00	 push	 217			; 000000d9H
  0b0b3	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16495: 							DeathAction(pActYesNoWnd);

  0b0b8	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A ; pActYesNoWnd
  0b0be	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16496: 							pActYesNoWnd = NULL;
; 16497: 							play_se(203, 320, 240);

  0b0c3	68 f0 00 00 00	 push	 240			; 000000f0H
  0b0c8	68 40 01 00 00	 push	 320			; 00000140H
  0b0cd	68 cb 00 00 00	 push	 203			; 000000cbH
  0b0d2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A, 0 ; pActYesNoWnd
  0b0dc	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b0e1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 16498: 						}

  0b0e4	e9 3b 20 00 00	 jmp	 $LN4848@MenuProc
$LN1434@MenuProc:

; 16499: 						else if (((WINDOW_DISP *)pActYesNoWnd->pYobi)->yesNoResult == FALSE) {

  0b0e9	85 c0		 test	 eax, eax
  0b0eb	0f 85 33 20 00
	00		 jne	 $LN4848@MenuProc

; 16500: 							DeathAction(pActYesNoWnd);

  0b0f1	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A ; pActYesNoWnd
  0b0f7	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16501: 							pActYesNoWnd = NULL;
; 16502: 							play_se(203, 320, 240);

  0b0fc	68 f0 00 00 00	 push	 240			; 000000f0H
  0b101	68 40 01 00 00	 push	 320			; 00000140H
  0b106	68 cb 00 00 00	 push	 203			; 000000cbH
  0b10b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActYesNoWnd@@3PAUaction@@A, 0 ; pActYesNoWnd
  0b115	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b11a	83 c4 10	 add	 esp, 16			; 00000010H

; 16503: 						}
; 16504: 					}
; 16505: 				}
; 16506: 
; 16507: 			}
; 16508: 			break;

  0b11d	e9 02 20 00 00	 jmp	 $LN4848@MenuProc
$LN1439@MenuProc:

; 16509: 		case MAIL_WND_SELECT:
; 16510: 			if (pActMenuWnd == NULL) {

  0b122	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0b129	0f 85 a4 00 00
	00		 jne	 $LN1440@MenuProc

; 16511: 				pActMenuWnd = MakeWindowDisp(40, 196, 3, 3, NULL, 0);

  0b12f	6a 00		 push	 0
  0b131	6a 00		 push	 0
  0b133	6a 03		 push	 3
  0b135	6a 03		 push	 3
  0b137	68 c4 00 00 00	 push	 196			; 000000c4H
  0b13c	6a 28		 push	 40			; 00000028H
  0b13e	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0b143	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0b14a	83 c4 18	 add	 esp, 24			; 00000018H
  0b14d	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd

; 16512: 				for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 16513: 				for (i = 0; i < 5; i++) {

  0b152	33 ff		 xor	 edi, edi
  0b154	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA, xmm0
  0b15b	be 76 00 00 00	 mov	 esi, OFFSET ?pet@@3PAUPET@@A+118
  0b160	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+16, xmm0
  0b167	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+32, xmm0
  0b16e	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+48, xmm0
  0b175	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+64, xmm0
  0b17c	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+80, xmm0
  0b183	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+96, xmm0
  0b18a	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+112, xmm0
  0b191	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+128, xmm0
  0b198	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+144, xmm0
  0b19f	90		 npad	 1
$LL335@MenuProc:

; 16514: 					if (pet[i].useFlag == FALSE) {

  0b1a0	66 83 3e 00	 cmp	 WORD PTR [esi], 0
  0b1a4	75 19		 jne	 SHORT $LN333@MenuProc

; 16515: 						if (i == pc.mailPetNo) {

  0b1a6	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182
  0b1ad	3b f8		 cmp	 edi, eax
  0b1af	75 0e		 jne	 SHORT $LN333@MenuProc

; 16516: 							pc.mailPetNo = -1;

  0b1b1	83 c8 ff	 or	 eax, -1
  0b1b4	66 a3 b6 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+182, ax

; 16517: 							saveUserSetting();

  0b1ba	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting
$LN333@MenuProc:

; 16512: 				for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 16513: 				for (i = 0; i < 5; i++) {

  0b1bf	81 c6 78 0b 00
	00		 add	 esi, 2936		; 00000b78H
  0b1c5	47		 inc	 edi
  0b1c6	81 fe ce 39 00
	00		 cmp	 esi, OFFSET ?pet@@3PAUPET@@A+14798
  0b1cc	7c d2		 jl	 SHORT $LL335@MenuProc

; 16518: 						}
; 16519: 					}
; 16520: 				}
; 16521: 			}

  0b1ce	e9 51 1f 00 00	 jmp	 $LN4848@MenuProc
$LN1440@MenuProc:

; 16522: 			else {
; 16523: 				if (pActMenuWnd->hp > 0) {

  0b1d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b1d9	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  0b1dd	0f 8e 41 1f 00
	00		 jle	 $LN4848@MenuProc

; 16524: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0b1e3	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0b1ea	0f 84 1b 01 00
	00		 je	 $LN1452@MenuProc

; 16525: 						if (HitFontNo == mailWndFontNo[0]) {

  0b1f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0b1f5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA
  0b1fb	75 31		 jne	 SHORT $LN1446@MenuProc

; 16526: 							DeathAction(pActMenuWnd);

  0b1fd	52		 push	 edx
  0b1fe	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16527: 							pActMenuWnd = NULL;
; 16528: 							mailWndNo = MAIL_WND_SEND;
; 16529: 							play_se(202, 320, 240);

  0b203	68 f0 00 00 00	 push	 240			; 000000f0H
  0b208	68 40 01 00 00	 push	 320			; 00000140H
  0b20d	68 ca 00 00 00	 push	 202			; 000000caH
  0b212	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0b21c	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 2
  0b226	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b22b	83 c4 10	 add	 esp, 16			; 00000010H
$LN1446@MenuProc:

; 16530: 						}
; 16531: 						if (HitFontNo == mailWndFontNo[1]) {

  0b22e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0b233	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+4
  0b239	0f 85 89 00 00
	00		 jne	 $LN1451@MenuProc

; 16532: 
; 16533: #ifdef _STREET_VENDOR
; 16534: 							if (pc.iOnStreetVendor == 1) {

  0b23f	83 3d b8 a1 00
	00 01		 cmp	 DWORD PTR ?pc@@3UPC@@A+41400, 1
  0b246	75 27		 jne	 SHORT $LN1448@MenuProc

; 16535: 								play_se(220, 320, 240);

  0b248	68 f0 00 00 00	 push	 240			; 000000f0H
  0b24d	68 40 01 00 00	 push	 320			; 00000140H
  0b252	68 dc 00 00 00	 push	 220			; 000000dcH
  0b257	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16536: 								StockChatBufferLine("ê±°ëì¤ì¸ íí¸ë íí¸ë©ì¼ê¸°ë¥ì ì¬ì©í  ì ìì´ì!", FONT_PAL_RED);

  0b25c	6a 00		 push	 0
  0b25e	6a 06		 push	 6
  0b260	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@DLDGKHKC@?$LA?E?$LH?$KB?A?$NP?$MA?N?5?F?d?F?$KO?$LE?B?5?F?d?F?$KO?$LI?$NO?$MA?O?$LB?b?$LE?I?$MA?$LL?5@
  0b265	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  0b26a	83 c4 18	 add	 esp, 24			; 00000018H

; 16537: 							}

  0b26d	eb 59		 jmp	 SHORT $LN1451@MenuProc
$LN1448@MenuProc:

; 16538: 							else
; 16539: #endif
; 16540: 
; 16541: 								if (pc.mailPetNo != -1) {

  0b26f	66 83 3d b6 00
	00 00 ff	 cmp	 WORD PTR ?pc@@3UPC@@A+182, -1
  0b277	74 38		 je	 SHORT $LN1450@MenuProc

; 16542: 									DeathAction(pActMenuWnd);

  0b279	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b27f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16543: 									pActMenuWnd = NULL;
; 16544: 									mailWndNo = MAIL_WND_PET_SEND;
; 16545: 									play_se(202, 320, 240);

  0b284	68 f0 00 00 00	 push	 240			; 000000f0H
  0b289	68 40 01 00 00	 push	 320			; 00000140H
  0b28e	68 ca 00 00 00	 push	 202			; 000000caH
  0b293	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0b29d	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 3
  0b2a7	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b2ac	83 c4 10	 add	 esp, 16			; 00000010H

; 16546: 								}

  0b2af	eb 17		 jmp	 SHORT $LN1451@MenuProc
$LN1450@MenuProc:

; 16547: 								else {
; 16548: 									play_se(220, 320, 240);

  0b2b1	68 f0 00 00 00	 push	 240			; 000000f0H
  0b2b6	68 40 01 00 00	 push	 320			; 00000140H
  0b2bb	68 dc 00 00 00	 push	 220			; 000000dcH
  0b2c0	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b2c5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1451@MenuProc:

; 16549: 								}
; 16550: 						}
; 16551: 						if (HitDispNo == mailWndFontNo[2]) {

  0b2c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0b2cd	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+8
  0b2d3	75 36		 jne	 SHORT $LN1452@MenuProc

; 16552: 							DeathAction(pActMenuWnd);

  0b2d5	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b2db	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16553: 							pActMenuWnd = NULL;
; 16554: 							mailWndNo = MAIL_WND_VIEW;
; 16555: 							play_se(203, 320, 240);

  0b2e0	68 f0 00 00 00	 push	 240			; 000000f0H
  0b2e5	68 40 01 00 00	 push	 320			; 00000140H
  0b2ea	68 cb 00 00 00	 push	 203			; 000000cbH
  0b2ef	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0b2f9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 0
  0b303	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b308	83 c4 10	 add	 esp, 16			; 00000010H
$LN1452@MenuProc:

; 16556: 						}
; 16557: 					}
; 16558: 					if (pActMenuWnd != NULL) {

  0b30b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b311	85 d2		 test	 edx, edx
  0b313	0f 84 0b 1e 00
	00		 je	 $LN4848@MenuProc

; 16559: 						int color = FONT_PAL_WHITE;
; 16560: 						if (pc.mailPetNo == -1)
; 16561: 							color = FONT_PAL_RED;
; 16562: 						x = pActMenuWnd->x + 28;
; 16563: 						y = pActMenuWnd->y + 32;

  0b319	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  0b31c	33 f6		 xor	 esi, esi
  0b31e	66 83 3d b6 00
	00 00 ff	 cmp	 WORD PTR ?pc@@3UPC@@A+182, -1
  0b326	b8 06 00 00 00	 mov	 eax, 6

; 16564: 						mailWndFontNo[0] = StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, "  ì¼ ë° ë© ì¼   ", 2);	y += 32;

  0b32b	6a 02		 push	 2
  0b32d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JGMBHNPP@?5?5?$MA?O?5?$LJ?$NN?5?$LI?$NO?5?$MA?O?5?5?5@
  0b332	0f 44 f0	 cmove	 esi, eax
  0b335	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0b338	6a 00		 push	 0
  0b33a	6a 01		 push	 1
  0b33c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0b33f	83 c7 20	 add	 edi, 32			; 00000020H
  0b342	57		 push	 edi
  0b343	50		 push	 eax
  0b344	89 85 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], eax
  0b34a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16565: 						mailWndFontNo[1] = StockFontBuffer(x, y, FONT_PRIO_FRONT, color, "  í í¸ ë© ì¼   ", 2);	y += 48;

  0b34f	6a 02		 push	 2
  0b351	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HHJMAEP@?5?5?F?d?5?F?$KO?5?$LI?$NO?5?$MA?O?5?5?5@
  0b356	56		 push	 esi
  0b357	6a 01		 push	 1
  0b359	83 c7 20	 add	 edi, 32			; 00000020H
  0b35c	a3 00 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA, eax
  0b361	57		 push	 edi
  0b362	ff b5 08 ba ff
	ff		 push	 DWORD PTR _x$3$[ebp]
  0b368	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0b36d	a3 04 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+4, eax
  0b372	83 c7 30	 add	 edi, 48			; 00000030H

; 16566: 						mailWndFontNo[2] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, y, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  0b375	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b37a	6a 02		 push	 2
  0b37c	68 bb 65 00 00	 push	 26043			; 000065bbH
  0b381	6a 69		 push	 105			; 00000069H
  0b383	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0b386	57		 push	 edi
  0b387	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  0b38d	ff 70 14	 push	 DWORD PTR [eax+20]
  0b390	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0b395	83 c4 44	 add	 esp, 68			; 00000044H
  0b398	a3 08 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+8, eax

; 16567: 					}
; 16568: 				}
; 16569: 			}
; 16570: 			break;

  0b39d	e9 82 1d 00 00	 jmp	 $LN4848@MenuProc
$LN1455@MenuProc:

; 16571: 
; 16572: 		case MAIL_WND_SEND:
; 16573: 			if (pActMenuWnd == NULL) {

  0b3a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0b3a9	0f 85 bc 00 00
	00		 jne	 $LN1456@MenuProc

; 16574: 				pActMenuWnd = MakeWindowDisp(4, 4, 272, 304, 0, -1);

  0b3af	6a ff		 push	 -1
  0b3b1	6a 00		 push	 0
  0b3b3	68 30 01 00 00	 push	 304			; 00000130H
  0b3b8	68 10 01 00 00	 push	 272			; 00000110H
  0b3bd	6a 04		 push	 4
  0b3bf	6a 04		 push	 4
  0b3c1	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0b3c6	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0b3cd	8b c8		 mov	 ecx, eax

; 16575: 				for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 16576: 				mailPetSendWndPageNo = mailViewWndPageNo;

  0b3cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailViewWndPageNo@@3HA
  0b3d4	83 c4 18	 add	 esp, 24			; 00000018H
  0b3d7	a3 00 00 00 00	 mov	 DWORD PTR ?mailPetSendWndPageNo@@3HA, eax
  0b3dc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, ecx ; pActMenuWnd

; 16577: 				MailStr.len = 140;

  0b3e2	c6 05 04 01 00
	00 8c		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+260, 140 ; 0000008cH

; 16578: 				MailStr.lineLen = 28;

  0b3e9	c6 05 05 01 00
	00 1c		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+261, 28 ; 0000001cH

; 16579: 				MailStr.lineDist = 20;

  0b3f0	c6 05 06 01 00
	00 14		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+262, 20 ; 00000014H

; 16580: 				MailStr.color = 0;

  0b3f7	c6 05 08 01 00
	00 00		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+264, 0

; 16581: 				MailStr.x = pActMenuWnd->x + 12;

  0b3fe	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0b401	83 c0 0c	 add	 eax, 12			; 0000000cH
  0b404	a3 0c 01 00 00	 mov	 DWORD PTR ?MailStr@@3USTR_BUFFER@@A+268, eax

; 16582: 				MailStr.y = pActMenuWnd->y + 280 - 136;

  0b409	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0b40c	05 90 00 00 00	 add	 eax, 144		; 00000090H

; 16583: 				MailStr.fontPrio = FONT_PRIO_FRONT;

  0b411	c7 05 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?MailStr@@3USTR_BUFFER@@A+284, 1
  0b41b	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA, xmm0
  0b422	a3 10 01 00 00	 mov	 DWORD PTR ?MailStr@@3USTR_BUFFER@@A+272, eax
  0b427	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+16, xmm0
  0b42e	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+32, xmm0
  0b435	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+48, xmm0
  0b43c	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+64, xmm0
  0b443	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+80, xmm0
  0b44a	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+96, xmm0
  0b451	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+112, xmm0
  0b458	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+128, xmm0
  0b45f	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+144, xmm0

; 16584: 			}

  0b466	e9 b9 1c 00 00	 jmp	 $LN4848@MenuProc
$LN1456@MenuProc:

; 16585: 			else {
; 16586: 				if (pActMenuWnd->hp > 0) {

  0b46b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b471	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  0b475	0f 8e a9 1c 00
	00		 jle	 $LN4848@MenuProc

; 16587: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_MAIL_WND_SEND_WND, 1);

  0b47b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0b47e	6a 01		 push	 1
  0b480	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_MAIL_WND_SEND_WND@@3HA ; CG_MAIL_WND_SEND_WND
  0b486	6a 68		 push	 104			; 00000068H
  0b488	ff 70 18	 push	 DWORD PTR [eax+24]
  0b48b	ff 70 14	 push	 DWORD PTR [eax+20]
  0b48e	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0b493	83 c4 14	 add	 esp, 20			; 00000014H

; 16588: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0b496	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0b49d	0f 84 e2 00 00
	00		 je	 $LN4828@MenuProc

; 16589: 						int nowNo = mailPetSendWndPageNo * MAX_ADR_BOOK_COUNT;

  0b4a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA

; 16590: 						for (i = 0; i < MAX_ADR_BOOK_COUNT; i++) {

  0b4a8	33 f6		 xor	 esi, esi
  0b4aa	c1 e0 02	 shl	 eax, 2
  0b4ad	6b f8 68	 imul	 edi, eax, 104
  0b4b0	89 85 d8 b9 ff
	ff		 mov	 DWORD PTR _nowNo$1$[ebp], eax
  0b4b6	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR ?mailWndSendFlag@@3PAHA[eax*4]
  0b4bd	89 95 f8 b9 ff
	ff		 mov	 DWORD PTR tv39272[ebp], edx
  0b4c3	81 c7 00 00 00
	00		 add	 edi, OFFSET ?addressBook@@3PAUADDRESS_BOOK@@A
  0b4c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL341@MenuProc:

; 16591: 							if (HitFontNo == mailWndFontNo[i]) {

  0b4d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0b4d5	3b 04 b5 00 00
	00 00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA[esi*4]
  0b4dc	75 48		 jne	 SHORT $LN339@MenuProc

; 16592: #ifdef _EXTEND_AB
; 16593: 								if (addressBook[nowNo + i].useFlag == TRUE
; 16594: 									|| addressBook[nowNo + i].useFlag == 2
; 16595: 									|| addressBook[nowNo + i].useFlag == 3) {

  0b4de	0f b7 07	 movzx	 eax, WORD PTR [edi]
  0b4e1	66 83 f8 01	 cmp	 ax, 1
  0b4e5	74 0c		 je	 SHORT $LN1462@MenuProc
  0b4e7	66 83 f8 02	 cmp	 ax, 2
  0b4eb	74 06		 je	 SHORT $LN1462@MenuProc
  0b4ed	66 83 f8 03	 cmp	 ax, 3
  0b4f1	75 33		 jne	 SHORT $LN339@MenuProc
$LN1462@MenuProc:

; 16596: #else
; 16597: 								if (addressBook[nowNo + i].useFlag == TRUE) {
; 16598: #endif
; 16599: 									if (mailWndSendFlag[nowNo + i] == FALSE) mailWndSendFlag[nowNo + i] = TRUE;
; 16600: 									else mailWndSendFlag[nowNo + i] = FALSE;
; 16601: 									play_se(217, 320, 240);

  0b4f3	8b 85 d8 b9 ff
	ff		 mov	 eax, DWORD PTR _nowNo$1$[ebp]
  0b4f9	33 c9		 xor	 ecx, ecx
  0b4fb	39 0a		 cmp	 DWORD PTR [edx], ecx
  0b4fd	68 f0 00 00 00	 push	 240			; 000000f0H
  0b502	0f 94 c1	 sete	 cl
  0b505	03 c6		 add	 eax, esi
  0b507	68 40 01 00 00	 push	 320			; 00000140H
  0b50c	68 d9 00 00 00	 push	 217			; 000000d9H
  0b511	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?mailWndSendFlag@@3PAHA[eax*4], ecx
  0b518	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b51d	8b 95 f8 b9 ff
	ff		 mov	 edx, DWORD PTR tv39272[ebp]
  0b523	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN339@MenuProc:

; 16590: 						for (i = 0; i < MAX_ADR_BOOK_COUNT; i++) {

  0b526	46		 inc	 esi
  0b527	83 c2 04	 add	 edx, 4
  0b52a	83 c7 68	 add	 edi, 104		; 00000068H
  0b52d	89 95 f8 b9 ff
	ff		 mov	 DWORD PTR tv39272[ebp], edx
  0b533	83 fe 04	 cmp	 esi, 4
  0b536	7c 98		 jl	 SHORT $LL341@MenuProc

; 16602: 								}
; 16603: 							}
; 16604: 						}
; 16605: 						if (HitDispNo == mailWndFontNo[19]) {

  0b538	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0b53d	3b 05 4c 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+76
  0b543	75 40		 jne	 SHORT $LN4828@MenuProc

; 16606: 							DeathAction(pActMenuWnd);

  0b545	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b54b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16607: 							pActMenuWnd = NULL;
; 16608: 							mailWndNo = mailWndNoBak;

  0b550	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailWndNoBak@@3W4MAIL_WND_TYPE@@A

; 16609: 							play_se(203, 320, 240);

  0b555	68 f0 00 00 00	 push	 240			; 000000f0H
  0b55a	68 40 01 00 00	 push	 320			; 00000140H
  0b55f	68 cb 00 00 00	 push	 203			; 000000cbH
  0b564	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0b56e	a3 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, eax
  0b573	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16610: 							GetKeyInputFocus(&MyChatBuffer);

  0b578	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0b57d	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  0b582	83 c4 14	 add	 esp, 20			; 00000014H
$LN4828@MenuProc:

; 16611: 						}
; 16612: 					}
; 16613: 					if (HitDispNo == mailWndFontNo[18]) {

  0b585	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0b58a	3b 05 48 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+72
  0b590	0f 85 27 01 00
	00		 jne	 $LN1466@MenuProc

; 16614: 						if (mouse.onceState & MOUSE_LEFT_CRICK && ItemUseTime < timeGetTime() - 5000) {

  0b596	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0b59d	0f 84 fe 00 00
	00		 je	 $LN4831@MenuProc
  0b5a3	8b bd fc b9 ff
	ff		 mov	 edi, DWORD PTR tv39280[ebp]
  0b5a9	ff d7		 call	 edi
  0b5ab	2d 88 13 00 00	 sub	 eax, 5000		; 00001388H
  0b5b0	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ItemUseTime@@3IA, eax
  0b5b6	0f 83 e5 00 00
	00		 jae	 $LN4831@MenuProc

; 16615: 							int flag = FALSE;

  0b5bc	33 f6		 xor	 esi, esi

; 16616: 							ItemUseTime = timeGetTime();

  0b5be	ff d7		 call	 edi
  0b5c0	a3 00 00 00 00	 mov	 DWORD PTR ?ItemUseTime@@3IA, eax
  0b5c5	b9 01 00 00 00	 mov	 ecx, 1
  0b5ca	b8 00 00 00 00	 mov	 eax, OFFSET ?mailWndSendFlag@@3PAHA
  0b5cf	90		 npad	 1
$LL344@MenuProc:

; 16617: 							for (i = 0; i < MAX_ADR_BOOK; i++) {
; 16618: 								if (mailWndSendFlag[i] == TRUE) flag = TRUE;

  0b5d0	39 08		 cmp	 DWORD PTR [eax], ecx
  0b5d2	0f 44 f1	 cmove	 esi, ecx
  0b5d5	83 c0 04	 add	 eax, 4
  0b5d8	3d 40 01 00 00	 cmp	 eax, OFFSET ?mailWndSendFlag@@3PAHA+320
  0b5dd	7c f1		 jl	 SHORT $LL344@MenuProc

; 16619: 							}
; 16620: 							if (MailStr.buffer[0] != NULL && flag == TRUE) {

  0b5df	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A, 0
  0b5e6	0f 84 9e 00 00
	00		 je	 $LN1470@MenuProc
  0b5ec	83 fe 01	 cmp	 esi, 1
  0b5ef	0f 85 95 00 00
	00		 jne	 $LN1470@MenuProc

; 16621: 								for (i = 0; i < MAX_ADR_BOOK; i++) {

  0b5f5	33 f6		 xor	 esi, esi
  0b5f7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL347@MenuProc:

; 16622: 									if (mailWndSendFlag[i] == TRUE) {

  0b600	83 3c b5 00 00
	00 00 01	 cmp	 DWORD PTR ?mailWndSendFlag@@3PAHA[esi*4], 1
  0b608	75 5d		 jne	 SHORT $LN345@MenuProc

; 16623: 										char moji2[256];
; 16624: 										strcpy(moji2, MailStr.buffer);

  0b60a	33 c9		 xor	 ecx, ecx
  0b60c	0f 1f 40 00	 npad	 4
$LL2007@MenuProc:
  0b610	8a 81 00 00 00
	00		 mov	 al, BYTE PTR ?MailStr@@3USTR_BUFFER@@A[ecx]
  0b616	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0b619	88 84 0d 4f eb
	ff ff		 mov	 BYTE PTR _moji2$41[ebp+ecx-1], al
  0b620	84 c0		 test	 al, al
  0b622	75 ec		 jne	 SHORT $LL2007@MenuProc

; 16625: 										makeEscapeString(moji2, moji, sizeof(moji));

  0b624	68 00 01 00 00	 push	 256			; 00000100H
  0b629	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0b62f	50		 push	 eax
  0b630	8d 85 50 eb ff
	ff		 lea	 eax, DWORD PTR _moji2$41[ebp]
  0b636	50		 push	 eax
  0b637	e8 00 00 00 00	 call	 ?makeEscapeString@@YAPADPAD0H@Z ; makeEscapeString
  0b63c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16626: 										if (bNewServer)

  0b63f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0b645	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0b64c	6a 00		 push	 0
  0b64e	50		 push	 eax
  0b64f	56		 push	 esi
  0b650	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0b656	74 07		 je	 SHORT $LN1473@MenuProc

; 16627: 											lssproto_MSG_send(sockfd, i, moji, FONT_PAL_WHITE);

  0b658	e8 00 00 00 00	 call	 ?lssproto_MSG_send@@YAXHHPADH@Z ; lssproto_MSG_send
  0b65d	eb 05		 jmp	 SHORT $LN5135@MenuProc
$LN1473@MenuProc:

; 16628: 										else
; 16629: 											old_lssproto_MSG_send(sockfd, i, moji, FONT_PAL_WHITE);

  0b65f	e8 00 00 00 00	 call	 ?old_lssproto_MSG_send@@YAXHHPADH@Z ; old_lssproto_MSG_send
$LN5135@MenuProc:

; 16621: 								for (i = 0; i < MAX_ADR_BOOK; i++) {

  0b664	83 c4 10	 add	 esp, 16			; 00000010H
$LN345@MenuProc:
  0b667	46		 inc	 esi
  0b668	83 fe 50	 cmp	 esi, 80			; 00000050H
  0b66b	7c 93		 jl	 SHORT $LL347@MenuProc

; 16630: 
; 16631: 									}
; 16632: 								}
; 16633: 								play_se(101, 320, 240);

  0b66d	68 f0 00 00 00	 push	 240			; 000000f0H
  0b672	68 40 01 00 00	 push	 320			; 00000140H
  0b677	6a 65		 push	 101			; 00000065H
  0b679	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16634: 								mailWndBtnFlag[18] = TRUE;

  0b67e	c7 05 48 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+72, 1

; 16635: 							}

  0b688	eb 14		 jmp	 SHORT $LN5136@MenuProc
$LN1470@MenuProc:

; 16636: 							else {
; 16637: 								play_se(220, 320, 240);

  0b68a	68 f0 00 00 00	 push	 240			; 000000f0H
  0b68f	68 40 01 00 00	 push	 320			; 00000140H
  0b694	68 dc 00 00 00	 push	 220			; 000000dcH
  0b699	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
$LN5136@MenuProc:

; 16638: 							}
; 16639: 						}
; 16640: 						if (mouse.state & MOUSE_LEFT_CRICK && mailWndBtnFlag[18] == TRUE) {

  0b69e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4831@MenuProc:
  0b6a1	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0b6a8	74 13		 je	 SHORT $LN1466@MenuProc
  0b6aa	83 3d 48 00 00
	00 01		 cmp	 DWORD PTR ?mailWndBtnFlag@@3PAHA+72, 1

; 16641: 							mailWndBtnFlag[18] = TRUE;

  0b6b1	c7 05 48 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+72, 1
  0b6bb	74 0a		 je	 SHORT $LN1467@MenuProc
$LN1466@MenuProc:

; 16642: 						}
; 16643: 						else {
; 16644: 							mailWndBtnFlag[18] = FALSE;
; 16645: 						}
; 16646: 					}
; 16647: 					else {
; 16648: 						mailWndBtnFlag[18] = FALSE;
; 16649: 					}
; 16650: 					if (HitDispNo == mailWndFontNo[16] || joy_con[0] & JOY_A) {

  0b6bd	c7 05 48 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+72, 0
$LN1467@MenuProc:
  0b6c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0b6cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0b6d2	3b 05 40 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+64
  0b6d8	74 0c		 je	 SHORT $LN1479@MenuProc
  0b6da	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  0b6e0	0f 84 73 00 00
	00		 je	 $LN1483@MenuProc
$LN1479@MenuProc:

; 16651: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_A) {

  0b6e6	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  0b6ed	75 13		 jne	 SHORT $LN1481@MenuProc
  0b6ef	f7 05 00 00 00
	00 00 04 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 1024 ; 00000400H
  0b6f9	75 07		 jne	 SHORT $LN1481@MenuProc
  0b6fb	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+64
  0b700	eb 37		 jmp	 SHORT $LN1480@MenuProc
$LN1481@MenuProc:

; 16652: 							mailPetSendWndPageNo--;

  0b702	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA

; 16653: 							if (mailPetSendWndPageNo < 0) mailPetSendWndPageNo = MAX_ADR_BOOK_PAGE - 1;

  0b707	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  0b70c	83 e8 01	 sub	 eax, 1

; 16654: 							play_se(217, 320, 240);

  0b70f	68 f0 00 00 00	 push	 240			; 000000f0H
  0b714	0f 48 c1	 cmovs	 eax, ecx
  0b717	68 40 01 00 00	 push	 320			; 00000140H
  0b71c	68 d9 00 00 00	 push	 217			; 000000d9H
  0b721	a3 00 00 00 00	 mov	 DWORD PTR ?mailPetSendWndPageNo@@3HA, eax
  0b726	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b72b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0b731	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16655: 							mailWndBtnFlag[16] = TRUE;

  0b734	b8 01 00 00 00	 mov	 eax, 1
$LN1480@MenuProc:

; 16656: 						}
; 16657: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_A) && mailWndBtnFlag[16] == TRUE) {

  0b739	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0b740	75 08		 jne	 SHORT $LN1485@MenuProc
  0b742	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  0b748	74 0f		 je	 SHORT $LN1483@MenuProc
$LN1485@MenuProc:

; 16658: 							mailWndBtnFlag[16] = TRUE;

  0b74a	c7 05 40 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+64, 1
  0b754	83 f8 01	 cmp	 eax, 1
  0b757	74 0a		 je	 SHORT $LN1484@MenuProc
$LN1483@MenuProc:

; 16659: 						}
; 16660: 						else {
; 16661: 							mailWndBtnFlag[16] = FALSE;

  0b759	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+64, 0
$LN1484@MenuProc:

; 16662: 						}
; 16663: 					}
; 16664: 					else {
; 16665: 						mailWndBtnFlag[16] = FALSE;
; 16666: 					}
; 16667: 					if (HitDispNo == mailWndFontNo[17] || joy_con[0] & JOY_B) {

  0b763	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0b768	3b 05 44 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+68
  0b76e	74 0c		 je	 SHORT $LN1488@MenuProc
  0b770	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0b776	0f 84 71 00 00
	00		 je	 $LN1492@MenuProc
$LN1488@MenuProc:

; 16668: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_B) {

  0b77c	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  0b783	75 13		 jne	 SHORT $LN1490@MenuProc
  0b785	f7 05 00 00 00
	00 00 01 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 256 ; 00000100H
  0b78f	75 07		 jne	 SHORT $LN1490@MenuProc
  0b791	a1 44 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+68
  0b796	eb 35		 jmp	 SHORT $LN1489@MenuProc
$LN1490@MenuProc:

; 16669: 							mailPetSendWndPageNo++;

  0b798	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA

; 16670: 							if (mailPetSendWndPageNo >= MAX_ADR_BOOK_PAGE) mailPetSendWndPageNo = 0;

  0b79d	33 c9		 xor	 ecx, ecx
  0b79f	40		 inc	 eax
  0b7a0	83 f8 14	 cmp	 eax, 20			; 00000014H

; 16671: 							play_se(217, 320, 240);

  0b7a3	68 f0 00 00 00	 push	 240			; 000000f0H
  0b7a8	0f 4d c1	 cmovge	 eax, ecx
  0b7ab	68 40 01 00 00	 push	 320			; 00000140H
  0b7b0	68 d9 00 00 00	 push	 217			; 000000d9H
  0b7b5	a3 00 00 00 00	 mov	 DWORD PTR ?mailPetSendWndPageNo@@3HA, eax
  0b7ba	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b7bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0b7c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16672: 							mailWndBtnFlag[17] = TRUE;

  0b7c8	b8 01 00 00 00	 mov	 eax, 1
$LN1489@MenuProc:

; 16673: 						}
; 16674: 						// ?????????
; 16675: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_B) && mailWndBtnFlag[17] == TRUE) {

  0b7cd	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0b7d4	75 08		 jne	 SHORT $LN1494@MenuProc
  0b7d6	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0b7dc	74 0f		 je	 SHORT $LN1492@MenuProc
$LN1494@MenuProc:

; 16676: 							// ????
; 16677: 							mailWndBtnFlag[17] = TRUE;

  0b7de	c7 05 44 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+68, 1
  0b7e8	83 f8 01	 cmp	 eax, 1
  0b7eb	74 0a		 je	 SHORT $LN1493@MenuProc
$LN1492@MenuProc:

; 16678: 						}
; 16679: 						else {
; 16680: 							// ???î
; 16681: 							mailWndBtnFlag[17] = FALSE;

  0b7ed	c7 05 44 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+68, 0
$LN1493@MenuProc:

; 16682: 						}
; 16683: 					}
; 16684: 					else {
; 16685: 						// ???î
; 16686: 						mailWndBtnFlag[17] = FALSE;
; 16687: 					}
; 16688: 
; 16689: 					// î°î??????
; 16690: 					if (HitDispNo == mailWndFontNo[14]) {

  0b7f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0b7fc	3b 05 38 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+56
  0b802	75 59		 jne	 SHORT $LN1495@MenuProc

; 16691: 						// ????????
; 16692: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0b804	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0b80b	74 33		 je	 SHORT $LN4835@MenuProc

; 16693: 							// ???î°î ??îî
; 16694: 							MailStr.buffer[0] = NULL;
; 16695: 							MailStr.cnt = 0;
; 16696: 							MailStr.cursor = 0;
; 16697: 							// ?????
; 16698: 							play_se(217, 320, 240);

  0b80d	68 f0 00 00 00	 push	 240			; 000000f0H
  0b812	68 40 01 00 00	 push	 320			; 00000140H
  0b817	68 d9 00 00 00	 push	 217			; 000000d9H
  0b81c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A, 0
  0b823	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+263, 0
  0b82a	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+265, 0
  0b831	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b836	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16699: 							mailWndBtnFlag[14] = TRUE;

  0b839	b8 01 00 00 00	 mov	 eax, 1
  0b83e	eb 05		 jmp	 SHORT $LN1497@MenuProc
$LN4835@MenuProc:

; 16691: 						// ????????
; 16692: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0b840	a1 38 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+56
$LN1497@MenuProc:

; 16700: 						}
; 16701: 						// ?????????
; 16702: 						if (mouse.state & MOUSE_LEFT_CRICK && mailWndBtnFlag[14] == TRUE) {

  0b845	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0b84c	74 0f		 je	 SHORT $LN1495@MenuProc

; 16703: 							// ????
; 16704: 							mailWndBtnFlag[14] = TRUE;

  0b84e	c7 05 38 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+56, 1
  0b858	83 f8 01	 cmp	 eax, 1
  0b85b	74 0a		 je	 SHORT $LN1496@MenuProc
$LN1495@MenuProc:

; 16705: 						}
; 16706: 						else {
; 16707: 							// ???î
; 16708: 							mailWndBtnFlag[14] = FALSE;
; 16709: 						}
; 16710: 					}
; 16711: 					else {
; 16712: 						// ???î
; 16713: 						mailWndBtnFlag[14] = FALSE;
; 16714: 					}
; 16715: 					// î±î¶??????
; 16716: 					if (HitDispNo == mailWndFontNo[15]) {

  0b85d	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+56, 0
$LN1496@MenuProc:
  0b867	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0b86c	3b 05 3c 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+60
  0b872	75 49		 jne	 SHORT $LN1500@MenuProc

; 16717: 						// ????????
; 16718: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0b874	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0b87b	74 23		 je	 SHORT $LN4836@MenuProc

; 16719: 							// ?î?î??????
; 16720: 							InitMailSendFlag();

  0b87d	e8 00 00 00 00	 call	 ?InitMailSendFlag@@YAXXZ ; InitMailSendFlag

; 16721: 							// ?????
; 16722: 							play_se(217, 320, 240);

  0b882	68 f0 00 00 00	 push	 240			; 000000f0H
  0b887	68 40 01 00 00	 push	 320			; 00000140H
  0b88c	68 d9 00 00 00	 push	 217			; 000000d9H
  0b891	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0b896	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16723: 							mailWndBtnFlag[15] = TRUE;

  0b899	b8 01 00 00 00	 mov	 eax, 1
  0b89e	eb 05		 jmp	 SHORT $LN1502@MenuProc
$LN4836@MenuProc:

; 16717: 						// ????????
; 16718: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0b8a0	a1 3c 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+60
$LN1502@MenuProc:

; 16724: 						}
; 16725: 						// ?????????
; 16726: 						if (mouse.state & MOUSE_LEFT_CRICK && mailWndBtnFlag[15] == TRUE) {

  0b8a5	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0b8ac	74 0f		 je	 SHORT $LN1500@MenuProc

; 16727: 							// ????
; 16728: 							mailWndBtnFlag[15] = TRUE;

  0b8ae	c7 05 3c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+60, 1
  0b8b8	83 f8 01	 cmp	 eax, 1
  0b8bb	74 0a		 je	 SHORT $LN1501@MenuProc
$LN1500@MenuProc:

; 16729: 						}
; 16730: 						else {
; 16731: 							// ???î
; 16732: 							mailWndBtnFlag[15] = FALSE;
; 16733: 						}
; 16734: 					}
; 16735: 					else {
; 16736: 						// ???î
; 16737: 						mailWndBtnFlag[15] = FALSE;
; 16738: 					}
; 16739: 
; 16740: 					// ????????
; 16741: 					if (pActMenuWnd != NULL) {

  0b8bd	c7 05 3c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+60, 0
$LN1501@MenuProc:
  0b8c7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b8cd	85 ff		 test	 edi, edi
  0b8cf	0f 84 4f 18 00
	00		 je	 $LN4848@MenuProc

; 16742: 						int nowNo = mailPetSendWndPageNo * MAX_ADR_BOOK_COUNT;

  0b8d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA

; 16743: 						int color;
; 16744: 
; 16745: 						// ?î³îî
; 16746: 						x = pActMenuWnd->x;
; 16747: 						y = pActMenuWnd->y;
; 16748: 						// î¼??????îî¾
; 16749: 						GetKeyInputFocus(&MailStr);

  0b8da	68 00 00 00 00	 push	 OFFSET ?MailStr@@3USTR_BUFFER@@A ; MailStr
  0b8df	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0b8e6	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0b8e9	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
  0b8ec	89 85 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], eax
  0b8f2	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 16750: 						// î°???î¸î
; 16751: 						StockFontBuffer2(&MailStr);

  0b8f7	68 00 00 00 00	 push	 OFFSET ?MailStr@@3USTR_BUFFER@@A ; MailStr
  0b8fc	e8 00 00 00 00	 call	 ?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z ; StockFontBuffer2
  0b901	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR ?mailWndSendFlag@@3PAHA[esi*4]
  0b908	83 c4 08	 add	 esp, 8
  0b90b	89 85 fc b9 ff
	ff		 mov	 DWORD PTR tv39266[ebp], eax
  0b911	b9 00 00 00 00	 mov	 ecx, OFFSET ?mailWndFontNo@@3PAHA
  0b916	6b c6 68	 imul	 eax, esi, 104
  0b919	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR tv39267[ebp], ecx
  0b91f	05 02 00 00 00	 add	 eax, OFFSET ?addressBook@@3PAUADDRESS_BOOK@@A+2
  0b924	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39265[ebp], eax
  0b92a	66 0f 1f 44 00
	00		 npad	 6
$LL350@MenuProc:

; 16754: 							// î¡î·?????????î¼???????
; 16755: #ifdef _EXTEND_AB
; 16756: 							if (addressBook[nowNo + i].useFlag == TRUE
; 16757: 								|| addressBook[nowNo + i].useFlag == 2
; 16758: 								|| addressBook[nowNo + i].useFlag == 3) {

  0b930	0f b7 50 fe	 movzx	 edx, WORD PTR [eax-2]
  0b934	66 83 fa 01	 cmp	 dx, 1
  0b938	74 0c		 je	 SHORT $LN1507@MenuProc
  0b93a	66 83 fa 02	 cmp	 dx, 2
  0b93e	74 06		 je	 SHORT $LN1507@MenuProc
  0b940	66 83 fa 03	 cmp	 dx, 3
  0b944	75 60		 jne	 SHORT $LN1506@MenuProc
$LN1507@MenuProc:

; 16759: #else
; 16760: 							if (addressBook[nowNo + i].useFlag == TRUE) {
; 16761: #endif
; 16762: 								color = FONT_PAL_GRAY;	// ?????î
; 16763: 														// ???????
; 16764: 								if (addressBook[nowNo + i].onlineFlag > 0) {
; 16765: 									// ?î
; 16766: 									color = FONT_PAL_WHITE;
; 16767: 								}
; 16768: 								// î±î¶??????
; 16769: 								if (mailWndSendFlag[nowNo + i] == TRUE) {

  0b946	33 f6		 xor	 esi, esi
  0b948	b9 07 00 00 00	 mov	 ecx, 7
  0b94d	66 39 30	 cmp	 WORD PTR [eax], si

; 16770: 									// ?î
; 16771: 									color = FONT_PAL_AQUA;
; 16772: 								}
; 16773: 								// î¡î·î¸î
; 16774: 								CenteringStr(addressBook[nowNo + i].name, moji, CHAR_NAME_LEN);

  0b950	6a 10		 push	 16			; 00000010H
  0b952	0f 4e f1	 cmovle	 esi, ecx
  0b955	8b 8d fc b9 ff
	ff		 mov	 ecx, DWORD PTR tv39266[ebp]
  0b95b	83 39 01	 cmp	 DWORD PTR [ecx], 1
  0b95e	b9 01 00 00 00	 mov	 ecx, 1
  0b963	0f 44 f1	 cmove	 esi, ecx
  0b966	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  0b96c	51		 push	 ecx
  0b96d	83 c0 12	 add	 eax, 18			; 00000012H
  0b970	50		 push	 eax
  0b971	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 16775: 								mailWndFontNo[i] = StockFontBuffer(x + 111, y + 177 - 136, FONT_PRIO_FRONT, color, moji, 2);

  0b976	6a 02		 push	 2
  0b978	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0b97e	50		 push	 eax
  0b97f	56		 push	 esi
  0b980	6a 01		 push	 1
  0b982	8d 47 29	 lea	 eax, DWORD PTR [edi+41]
  0b985	50		 push	 eax
  0b986	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0b98c	83 c0 6f	 add	 eax, 111		; 0000006fH
  0b98f	50		 push	 eax
  0b990	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0b995	8b 8d e0 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39267[ebp]
  0b99b	83 c4 24	 add	 esp, 36			; 00000024H
  0b99e	89 01		 mov	 DWORD PTR [ecx], eax
  0b9a0	8b 85 f8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39265[ebp]
$LN1506@MenuProc:

; 16752: 
; 16753: 						for (i = 0; i < MAX_ADR_BOOK_COUNT; i++) {

  0b9a6	83 85 fc b9 ff
	ff 04		 add	 DWORD PTR tv39266[ebp], 4
  0b9ad	83 c1 04	 add	 ecx, 4
  0b9b0	83 c0 68	 add	 eax, 104		; 00000068H
  0b9b3	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR tv39267[ebp], ecx

; 16776: 
; 16777: 							}
; 16778: 							y += 23;

  0b9b9	83 c7 17	 add	 edi, 23			; 00000017H
  0b9bc	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39265[ebp], eax
  0b9c2	81 f9 10 00 00
	00		 cmp	 ecx, OFFSET ?mailWndFontNo@@3PAHA+16
  0b9c8	0f 8c 62 ff ff
	ff		 jl	 $LL350@MenuProc

; 16779: 						}
; 16780: 						// î±î¶??????
; 16781: 						mailWndFontNo[15] = StockDispBuffer(pActMenuWnd->x + 51, pActMenuWnd->y + 211 - 136, DISP_PRIO_IME3, CG_MAIL_WND_CLEAR_BTN_UP + mailWndBtnFlag[15], 2);

  0b9ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0b9d4	a1 3c 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+60
  0b9d9	05 3c 66 00 00	 add	 eax, 26172		; 0000663cH
  0b9de	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  0b9e4	6a 02		 push	 2
  0b9e6	50		 push	 eax
  0b9e7	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0b9ea	83 c0 4b	 add	 eax, 75			; 0000004bH
  0b9ed	6a 69		 push	 105			; 00000069H
  0b9ef	50		 push	 eax
  0b9f0	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0b9f3	83 c0 33	 add	 eax, 51			; 00000033H
  0b9f6	50		 push	 eax
  0b9f7	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 16782: 						// î·???
; 16783: 						mailWndFontNo[16] = StockDispBuffer(pActMenuWnd->x + 26 - 8 + 4, pActMenuWnd->y + 241 - 132, DISP_PRIO_IME3, CG_PREV_BTN + mailWndBtnFlag[16], 2);

  0b9fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0ba02	a3 3c 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+60, eax
  0ba07	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+64
  0ba0c	05 44 66 00 00	 add	 eax, 26180		; 00006644H
  0ba11	6a 02		 push	 2
  0ba13	50		 push	 eax
  0ba14	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0ba17	83 c0 6d	 add	 eax, 109		; 0000006dH
  0ba1a	6a 69		 push	 105			; 00000069H
  0ba1c	50		 push	 eax
  0ba1d	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0ba20	83 c0 16	 add	 eax, 22			; 00000016H
  0ba23	50		 push	 eax
  0ba24	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0ba29	a3 40 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+64, eax

; 16784: 						// ???î±?î¸î
; 16785: 						sprintf(moji, "%2d", mailPetSendWndPageNo + 1);

  0ba2e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA
  0ba33	40		 inc	 eax
  0ba34	50		 push	 eax
  0ba35	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ba3b	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  0ba40	50		 push	 eax
  0ba41	e8 00 00 00 00	 call	 _sprintf

; 16786: 						StockFontBuffer(pActMenuWnd->x + 47 - 8 + 4, pActMenuWnd->y + 233 - 132, FONT_PRIO_FRONT, 0, moji, 0);

  0ba46	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0ba4c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ba52	6a 00		 push	 0
  0ba54	50		 push	 eax
  0ba55	6a 00		 push	 0
  0ba57	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0ba5a	83 c0 65	 add	 eax, 101		; 00000065H
  0ba5d	6a 01		 push	 1
  0ba5f	50		 push	 eax
  0ba60	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0ba63	83 c0 2b	 add	 eax, 43			; 0000002bH
  0ba66	50		 push	 eax
  0ba67	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 16787: 						// ????
; 16788: 						mailWndFontNo[17] = StockDispBuffer(pActMenuWnd->x + 76 + 4, pActMenuWnd->y + 241 - 132, DISP_PRIO_IME3, CG_NEXT_BTN + mailWndBtnFlag[17], 2);

  0ba6c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0ba72	83 c4 4c	 add	 esp, 76			; 0000004cH
  0ba75	a1 44 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+68
  0ba7a	05 46 66 00 00	 add	 eax, 26182		; 00006646H
  0ba7f	6a 02		 push	 2
  0ba81	50		 push	 eax
  0ba82	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0ba85	83 c0 6d	 add	 eax, 109		; 0000006dH
  0ba88	6a 69		 push	 105			; 00000069H
  0ba8a	50		 push	 eax
  0ba8b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0ba8e	83 c0 50	 add	 eax, 80			; 00000050H
  0ba91	50		 push	 eax
  0ba92	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 16789: 						// î°î??????
; 16790: 						mailWndFontNo[14] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx + 60, pActMenuWnd->y + 390 - 136, DISP_PRIO_IME3, CG_MAIL_WND_CLEAR_BTN_UP + mailWndBtnFlag[14], 2);

  0ba97	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0ba9d	a3 44 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+68, eax
  0baa2	a1 38 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+56
  0baa7	05 3c 66 00 00	 add	 eax, 26172		; 0000663cH
  0baac	6a 02		 push	 2
  0baae	50		 push	 eax
  0baaf	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0bab2	05 fe 00 00 00	 add	 eax, 254		; 000000feH
  0bab7	6a 69		 push	 105			; 00000069H
  0bab9	50		 push	 eax
  0baba	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0babd	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0bac0	83 c0 3c	 add	 eax, 60			; 0000003cH
  0bac3	50		 push	 eax
  0bac4	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0bac9	a3 38 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+56, eax

; 16791: 						// ?î???
; 16792: 						mailWndFontNo[18] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx - 60, pActMenuWnd->y + 421 - 136, DISP_PRIO_IME3, CG_SEND_BTN + mailWndBtnFlag[18] * 75, 2);

  0bace	6b 05 48 00 00
	00 4b		 imul	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+72, 75
  0bad5	6a 02		 push	 2
  0bad7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0badd	05 f3 65 00 00	 add	 eax, 26099		; 000065f3H
  0bae2	50		 push	 eax
  0bae3	6a 69		 push	 105			; 00000069H
  0bae5	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0bae8	05 1d 01 00 00	 add	 eax, 285		; 0000011dH
  0baed	50		 push	 eax
  0baee	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0baf1	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0baf4	83 e8 3c	 sub	 eax, 60			; 0000003cH
  0baf7	50		 push	 eax
  0baf8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 16793: 						// ??
; 16794: 						mailWndFontNo[19] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx + 60, pActMenuWnd->y + 421 - 136, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  0bafd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0bb03	a3 48 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+72, eax
  0bb08	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0bb0b	05 1d 01 00 00	 add	 eax, 285		; 0000011dH
$LN5167@MenuProc:

; 17332: 					}
; 17333: 				}
; 17334: 			}
; 17335: 			break;
; 17336: 
; 17337: 
; 17338: 		}
; 17339: 	}
; 17340: 
; 17341: 	if (MenuToggleFlag & JOY_CTRL_A) {

  0bb10	6a 02		 push	 2
  0bb12	68 bb 65 00 00	 push	 26043			; 000065bbH
  0bb17	6a 69		 push	 105			; 00000069H
  0bb19	50		 push	 eax
  0bb1a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0bb1d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0bb20	83 c0 3c	 add	 eax, 60			; 0000003cH
  0bb23	50		 push	 eax
  0bb24	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0bb29	83 c4 50	 add	 esp, 80			; 00000050H
  0bb2c	e9 ee 15 00 00	 jmp	 $LN5137@MenuProc
$LN1510@MenuProc:

; 16795: 					}
; 16796: 				}
; 16797: 			}
; 16798: 			break;
; 16799: 
; 16800: 		case MAIL_WND_PET_SEND:
; 16801: 			if (pActMenuWnd == NULL) {

  0bb31	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0bb38	0f 85 bc 00 00
	00		 jne	 $LN1511@MenuProc

; 16802: 				pActMenuWnd = MakeWindowDisp(4, 4, 272, 440, 0, -1);

  0bb3e	6a ff		 push	 -1
  0bb40	6a 00		 push	 0
  0bb42	68 b8 01 00 00	 push	 440			; 000001b8H
  0bb47	68 10 01 00 00	 push	 272			; 00000110H
  0bb4c	6a 04		 push	 4
  0bb4e	6a 04		 push	 4
  0bb50	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0bb55	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0bb5c	8b c8		 mov	 ecx, eax

; 16803: 				for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 16804: 				mailPetSendWndPageNo = mailViewWndPageNo;

  0bb5e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailViewWndPageNo@@3HA
  0bb63	83 c4 18	 add	 esp, 24			; 00000018H
  0bb66	a3 00 00 00 00	 mov	 DWORD PTR ?mailPetSendWndPageNo@@3HA, eax
  0bb6b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, ecx ; pActMenuWnd

; 16805: 				MailStr.len = MAIL_STR_LEN;

  0bb71	c6 05 04 01 00
	00 8c		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+260, 140 ; 0000008cH

; 16806: 				MailStr.lineLen = 28;

  0bb78	c6 05 05 01 00
	00 1c		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+261, 28 ; 0000001cH

; 16807: 				MailStr.lineDist = 20;

  0bb7f	c6 05 06 01 00
	00 14		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+262, 20 ; 00000014H

; 16808: 				MailStr.color = 0;

  0bb86	c6 05 08 01 00
	00 00		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+264, 0

; 16809: 				MailStr.x = pActMenuWnd->x + 12;

  0bb8d	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0bb90	83 c0 0c	 add	 eax, 12			; 0000000cH
  0bb93	a3 0c 01 00 00	 mov	 DWORD PTR ?MailStr@@3USTR_BUFFER@@A+268, eax

; 16810: 				MailStr.y = pActMenuWnd->y + 280;

  0bb98	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0bb9b	05 18 01 00 00	 add	 eax, 280		; 00000118H

; 16811: 				MailStr.fontPrio = FONT_PRIO_FRONT;

  0bba0	c7 05 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?MailStr@@3USTR_BUFFER@@A+284, 1
  0bbaa	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA, xmm0
  0bbb1	a3 10 01 00 00	 mov	 DWORD PTR ?MailStr@@3USTR_BUFFER@@A+272, eax
  0bbb6	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+16, xmm0
  0bbbd	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+32, xmm0
  0bbc4	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+48, xmm0
  0bbcb	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+64, xmm0
  0bbd2	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+80, xmm0
  0bbd9	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+96, xmm0
  0bbe0	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+112, xmm0
  0bbe7	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+128, xmm0
  0bbee	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+144, xmm0

; 16812: 			}

  0bbf5	e9 2a 15 00 00	 jmp	 $LN4848@MenuProc
$LN1511@MenuProc:

; 16813: 			else {
; 16814: 				if (pActMenuWnd->hp > 0) {

  0bbfa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0bc00	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  0bc04	0f 8e 1a 15 00
	00		 jle	 $LN4848@MenuProc

; 16815: 					if (pActPet == NULL) {

  0bc0a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  0bc11	75 32		 jne	 SHORT $LN1514@MenuProc

; 16816: 						pActPet = MakeAnimDisp(pActMenuWnd->x + 190, pActMenuWnd->y + 120, pet[pc.mailPetNo].graNo, ANIM_DISP_PET);

  0bc13	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182
  0bc1a	69 c0 78 0b 00
	00		 imul	 eax, eax, 2936
  0bc20	6a 00		 push	 0
  0bc22	ff b0 04 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+4]
  0bc28	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0bc2b	83 c0 78	 add	 eax, 120		; 00000078H
  0bc2e	50		 push	 eax
  0bc2f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0bc32	05 be 00 00 00	 add	 eax, 190		; 000000beH
  0bc37	50		 push	 eax
  0bc38	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  0bc3d	83 c4 10	 add	 esp, 16			; 00000010H
  0bc40	a3 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, eax
$LN1514@MenuProc:

; 16817: 					}
; 16818: 					if (pActMailItem == NULL && mailItemNo != -1) {

  0bc45	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0bc4c	0f 85 83 00 00
	00		 jne	 $LN1515@MenuProc
  0bc52	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailItemNo@@3HA
  0bc57	83 f8 ff	 cmp	 eax, -1
  0bc5a	0f 84 75 00 00
	00		 je	 $LN1515@MenuProc

; 16819: 						pActMailItem = MakeAnimDisp(pActMenuWnd->x + 56, pActMenuWnd->y + 96, pc.item[mailItemNo].graNo, ANIM_DISP_PET_ITEM);

  0bc60	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0bc66	69 c0 7c 01 00
	00		 imul	 eax, eax, 380
  0bc6c	6a 0a		 push	 10			; 0000000aH
  0bc6e	ff b0 c8 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A[eax+200]
  0bc74	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0bc77	83 c0 60	 add	 eax, 96			; 00000060H
  0bc7a	50		 push	 eax
  0bc7b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0bc7e	83 c0 38	 add	 eax, 56			; 00000038H
  0bc81	50		 push	 eax
  0bc82	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp

; 16820: 						pActMailItem->atr |= ACT_ATR_INFO;
; 16821: 						pActMailItem->atr |= ACT_ATR_TYPE_ITEM;
; 16822: 						pActMailItem->dispPrio = DISP_PRIO_DRAG;
; 16823: 						strcpy(pActMailItem->name, pc.item[mailItemNo].name);

  0bc87	69 0d 00 00 00
	00 7c 01 00 00	 imul	 ecx, DWORD PTR ?mailItemNo@@3HA, 380
  0bc91	83 c4 10	 add	 esp, 16			; 00000010H
  0bc94	a3 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, eax ; pActMailItem
  0bc99	83 88 a4 00 00
	00 10		 or	 DWORD PTR [eax+164], 16	; 00000010H
  0bca0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0bca5	81 c1 aa 01 00
	00		 add	 ecx, OFFSET ?pc@@3UPC@@A+426
  0bcab	81 88 a4 00 00
	00 00 04 00 00	 or	 DWORD PTR [eax+164], 1024 ; 00000400H
  0bcb5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0bcba	c6 40 15 70	 mov	 BYTE PTR [eax+21], 112	; 00000070H
  0bcbe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0bcc4	83 c2 38	 add	 edx, 56			; 00000038H
$LL2008@MenuProc:
  0bcc7	8a 01		 mov	 al, BYTE PTR [ecx]
  0bcc9	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0bccc	88 02		 mov	 BYTE PTR [edx], al
  0bcce	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0bcd1	84 c0		 test	 al, al
  0bcd3	75 f2		 jne	 SHORT $LL2008@MenuProc
$LN1515@MenuProc:

; 16824: 					}
; 16825: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_MAIL_WND_PET_SEND_WND, 1);

  0bcd5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0bcda	6a 01		 push	 1
  0bcdc	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_MAIL_WND_PET_SEND_WND@@3HA ; CG_MAIL_WND_PET_SEND_WND
  0bce2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0bce5	6a 68		 push	 104			; 00000068H
  0bce7	ff 70 18	 push	 DWORD PTR [eax+24]
  0bcea	ff 70 14	 push	 DWORD PTR [eax+20]
  0bced	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0bcf2	83 c4 14	 add	 esp, 20			; 00000014H

; 16826: 					// ????????
; 16827: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0bcf5	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0bcfc	0f 84 c8 01 00
	00		 je	 $LN4837@MenuProc

; 16828: 						int nowNo = mailPetSendWndPageNo * MAX_ADR_BOOK_COUNT;

  0bd02	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA
  0bd07	bf 00 00 00 00	 mov	 edi, OFFSET ?mailWndFontNo@@3PAHA
  0bd0c	c1 e0 02	 shl	 eax, 2
  0bd0f	6b c8 68	 imul	 ecx, eax, 104
  0bd12	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR ?mailWndSendFlag@@3PAHA[eax*4]
  0bd19	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?addressBook@@3PAUADDRESS_BOOK@@A
  0bd1f	89 8d fc b9 ff
	ff		 mov	 DWORD PTR tv39261[ebp], ecx
  0bd25	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL356@MenuProc:

; 16831: 							// ?î?îî±î¶????????????î·????????
; 16832: 							if (HitFontNo == mailWndFontNo[i]) {

  0bd30	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitFontNo@@3HA ; HitFontNo
  0bd35	3b 07		 cmp	 eax, DWORD PTR [edi]
  0bd37	0f 85 80 00 00
	00		 jne	 $LN354@MenuProc

; 16833: 								// î¡î·????????
; 16834: #ifdef _EXTEND_AB
; 16835: 								if (addressBook[nowNo + i].useFlag == TRUE
; 16836: 									|| addressBook[nowNo + i].useFlag == 2
; 16837: 									|| addressBook[nowNo + i].useFlag == 3) {

  0bd3d	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  0bd40	66 83 f8 01	 cmp	 ax, 1
  0bd44	74 0c		 je	 SHORT $LN1519@MenuProc
  0bd46	66 83 f8 02	 cmp	 ax, 2
  0bd4a	74 06		 je	 SHORT $LN1519@MenuProc
  0bd4c	66 83 f8 03	 cmp	 ax, 3
  0bd50	75 6b		 jne	 SHORT $LN354@MenuProc
$LN1519@MenuProc:

; 16838: #else								?î¼???????
; 16839: 								if (addressBook[nowNo + i].useFlag == TRUE) {
; 16840: #endif
; 16841: 									int j, flag = FALSE;

  0bd52	33 c0		 xor	 eax, eax
  0bd54	b9 04 00 00 00	 mov	 ecx, OFFSET ?mailWndSendFlag@@3PAHA+4
  0bd59	ba 01 00 00 00	 mov	 edx, 1
  0bd5e	66 90		 npad	 2
$LL2772@MenuProc:

; 16842: 									// ??î±î¶????????
; 16843: 									for (j = 0; j < MAX_ADR_BOOK; j++) {
; 16844: 										if (mailWndSendFlag[j] == TRUE) flag = TRUE;

  0bd60	39 51 fc	 cmp	 DWORD PTR [ecx-4], edx
  0bd63	0f 44 c2	 cmove	 eax, edx
  0bd66	39 11		 cmp	 DWORD PTR [ecx], edx
  0bd68	0f 44 c2	 cmove	 eax, edx
  0bd6b	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  0bd6e	0f 44 c2	 cmove	 eax, edx
  0bd71	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  0bd74	0f 44 c2	 cmove	 eax, edx
  0bd77	39 51 0c	 cmp	 DWORD PTR [ecx+12], edx
  0bd7a	0f 44 c2	 cmove	 eax, edx
  0bd7d	83 c1 14	 add	 ecx, 20			; 00000014H
  0bd80	81 f9 44 01 00
	00		 cmp	 ecx, OFFSET ?mailWndSendFlag@@3PAHA+324
  0bd86	7c d8		 jl	 SHORT $LL2772@MenuProc

; 16845: 									}
; 16846: 
; 16847: 									// î±î¶???????
; 16848: 									if (flag == FALSE) {

  0bd88	68 f0 00 00 00	 push	 240			; 000000f0H
  0bd8d	68 40 01 00 00	 push	 320			; 00000140H
  0bd92	85 c0		 test	 eax, eax
  0bd94	75 09		 jne	 SHORT $LN1521@MenuProc

; 16849: 										mailWndSendFlag[nowNo + i] = TRUE;

  0bd96	89 16		 mov	 DWORD PTR [esi], edx

; 16850: 										// ?????
; 16851: 										play_se(217, 320, 240);

  0bd98	68 d9 00 00 00	 push	 217			; 000000d9H

; 16852: 									}

  0bd9d	eb 16		 jmp	 SHORT $LN5138@MenuProc
$LN1521@MenuProc:

; 16853: 									else { // ??î±î¶??????
; 16854: 										   // î±î¶????????????????
; 16855: 										if (mailWndSendFlag[nowNo + i] == TRUE) {

  0bd9f	39 16		 cmp	 DWORD PTR [esi], edx
  0bda1	75 0d		 jne	 SHORT $LN1523@MenuProc

; 16856: 											mailWndSendFlag[nowNo + i] = FALSE;

  0bda3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 16857: 											// ?????
; 16858: 											play_se(217, 320, 240);

  0bda9	68 d9 00 00 00	 push	 217			; 000000d9H

; 16859: 										}

  0bdae	eb 05		 jmp	 SHORT $LN5138@MenuProc
$LN1523@MenuProc:

; 16860: 										else { // î±î¶?????????????????
; 16861: 											   // ???
; 16862: 											play_se(220, 320, 240);

  0bdb0	68 dc 00 00 00	 push	 220			; 000000dcH
$LN5138@MenuProc:

; 16829: 						// ???î ???
; 16830: 						for (i = 0; i < MAX_ADR_BOOK_COUNT; i++) {

  0bdb5	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0bdba	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN354@MenuProc:
  0bdbd	83 85 fc b9 ff
	ff 68		 add	 DWORD PTR tv39261[ebp], 104 ; 00000068H
  0bdc4	83 c7 04	 add	 edi, 4
  0bdc7	8b 8d fc b9 ff
	ff		 mov	 ecx, DWORD PTR tv39261[ebp]
  0bdcd	83 c6 04	 add	 esi, 4
  0bdd0	81 ff 10 00 00
	00		 cmp	 edi, OFFSET ?mailWndFontNo@@3PAHA+16
  0bdd6	0f 8c 54 ff ff
	ff		 jl	 $LL356@MenuProc

; 16863: 										}
; 16864: 									}
; 16865: 								}
; 16866: 							}
; 16867: 						}
; 16868: 						// ???
; 16869: 						if (HitDispNo == mailWndFontNo[19]) {

  0bddc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0bde1	3b 05 4c 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+76
  0bde7	75 6a		 jne	 SHORT $LN1525@MenuProc

; 16870: 							// ??????î
; 16871: 							DeathAction(pActMenuWnd);

  0bde9	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0bdef	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16872: 							pActMenuWnd = NULL;
; 16873: 							// ????î
; 16874: 							DeathAction(pActPet);

  0bdf4	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  0bdfa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0be04	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16875: 							pActPet = NULL;
; 16876: 							// ?????î
; 16877: 							DeathAction(pActMailItem);

  0be09	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0be0f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  0be19	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16878: 							pActMailItem = NULL;
; 16879: 							// ????????
; 16880: 							mailWndNo = MAIL_WND_VIEW;
; 16881: 							// ?????î¼???
; 16882: 							play_se(203, 320, 240);

  0be1e	68 f0 00 00 00	 push	 240			; 000000f0H
  0be23	68 40 01 00 00	 push	 320			; 00000140H
  0be28	68 cb 00 00 00	 push	 203			; 000000cbH
  0be2d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0be37	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 0
  0be41	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16883: 							// î¼????????
; 16884: 							GetKeyInputFocus(&MyChatBuffer);

  0be46	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0be4b	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  0be50	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1525@MenuProc:

; 16885: 						}
; 16886: 						// ???????
; 16887: 						if (HitDispNo == mailWndFontNo[15]) {

  0be53	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0be58	3b 05 3c 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+60
  0be5e	75 6a		 jne	 SHORT $LN4837@MenuProc

; 16888: 							// ??????î
; 16889: 							DeathAction(pActMenuWnd);

  0be60	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0be66	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16890: 							pActMenuWnd = NULL;
; 16891: 							// ????î
; 16892: 							DeathAction(pActPet);

  0be6b	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  0be71	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0be7b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16893: 							pActPet = NULL;
; 16894: 							// ?????î
; 16895: 							DeathAction(pActMailItem);

  0be80	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0be86	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  0be90	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 16896: 							pActMailItem = NULL;
; 16897: 							// î·?????????
; 16898: 							mailWndNo = MAIL_WND_ITEM;
; 16899: 							// ????????
; 16900: 							play_se(202, 320, 240);

  0be95	68 f0 00 00 00	 push	 240			; 000000f0H
  0be9a	68 40 01 00 00	 push	 320			; 00000140H
  0be9f	68 ca 00 00 00	 push	 202			; 000000caH
  0bea4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0beae	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 4
  0beb8	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 16901: 							// î¼????????
; 16902: 							GetKeyInputFocus(&MyChatBuffer);

  0bebd	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0bec2	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  0bec7	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN4837@MenuProc:

; 16903: 						}
; 16904: 					}
; 16905: 					// ?î???
; 16906: 					if (HitDispNo == mailWndFontNo[18]) {

  0beca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0becf	3b 05 48 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+72
  0bed5	0f 85 99 01 00
	00		 jne	 $LN1527@MenuProc

; 16907: 
; 16908: 						// ????????
; 16909: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0bedb	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0bee2	0f 84 6f 01 00
	00		 je	 $LN4839@MenuProc

; 16910: 							int flag = FALSE;

  0bee8	33 c0		 xor	 eax, eax

; 16911: 							// ??î±î¶????????
; 16912: 							for (i = 0; i < MAX_ADR_BOOK; i++) {

  0beea	b9 00 00 00 00	 mov	 ecx, OFFSET ?mailWndSendFlag@@3PAHA
  0beef	ba 01 00 00 00	 mov	 edx, 1
$LL362@MenuProc:

; 16913: 								if (mailWndSendFlag[i] == TRUE) flag = TRUE;

  0bef4	39 11		 cmp	 DWORD PTR [ecx], edx
  0bef6	0f 44 c2	 cmove	 eax, edx
  0bef9	83 c1 04	 add	 ecx, 4
  0befc	81 f9 40 01 00
	00		 cmp	 ecx, OFFSET ?mailWndSendFlag@@3PAHA+320
  0bf02	7c f0		 jl	 SHORT $LL362@MenuProc

; 16914: 							}
; 16915: 							// î°??????
; 16916: 							if (MailStr.buffer[0] != NULL && flag == TRUE
; 16917: 								&& pActPet != NULL
; 16918: 								&& pActPet->actNo == ANIM_DISP_PET
; 16919: 								&& pc.mailPetNo != ItemMixPetNo) {

  0bf04	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A, 0
  0bf0b	0f 84 2f 01 00
	00		 je	 $LN1531@MenuProc
  0bf11	83 f8 01	 cmp	 eax, 1
  0bf14	0f 85 26 01 00
	00		 jne	 $LN1531@MenuProc
  0bf1a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet@@3PAUaction@@A
  0bf1f	85 c0		 test	 eax, eax
  0bf21	0f 84 19 01 00
	00		 je	 $LN1531@MenuProc
  0bf27	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [eax+172], 0
  0bf2e	0f 85 0c 01 00
	00		 jne	 $LN1531@MenuProc
  0bf34	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182
  0bf3b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?ItemMixPetNo@@3HA
  0bf41	0f 84 f9 00 00
	00		 je	 $LN1531@MenuProc

; 16920: 								for (i = 0; i < MAX_ADR_BOOK; i++) {

  0bf47	33 f6		 xor	 esi, esi
  0bf49	bf 02 00 00 00	 mov	 edi, OFFSET ?addressBook@@3PAUADDRESS_BOOK@@A+2
  0bf4e	66 90		 npad	 2
$LL365@MenuProc:

; 16921: 									// ????????
; 16922: 									if (mailWndSendFlag[i] == TRUE) {

  0bf50	83 3c b5 00 00
	00 00 01	 cmp	 DWORD PTR ?mailWndSendFlag@@3PAHA[esi*4], 1
  0bf58	0f 85 ba 00 00
	00		 jne	 $LN363@MenuProc

; 16923: 										// Terry add fix can send mail to offline character 2004/2/5
; 16924: 										if (addressBook[i].onlineFlag == 0) StockChatBufferLine("ì¹êµ¬ê° ì ìí´ìì§ ìììï¼", FONT_PAL_RED);

  0bf5e	66 83 3f 00	 cmp	 WORD PTR [edi], 0
  0bf62	75 16		 jne	 SHORT $LN1534@MenuProc
  0bf64	6a 00		 push	 0
  0bf66	6a 06		 push	 6
  0bf68	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GCLEBMEI@?D?$KD?$LB?$LI?$LA?$KB?5?A?$KC?$LM?S?G?X?$MA?V?A?v?5?$LO?J?$LO?F?$LP?d?$KD?$KB@
  0bf6d	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  0bf72	83 c4 0c	 add	 esp, 12			; 0000000cH
  0bf75	e9 9e 00 00 00	 jmp	 $LN363@MenuProc
$LN1534@MenuProc:

; 16925: 										else
; 16926: 											// end
; 16927: 										{
; 16928: 											char moji2[256];
; 16929: 											// ????????
; 16930: 											strcpy(moji2, MailStr.buffer);

  0bf7a	33 c9		 xor	 ecx, ecx
  0bf7c	0f 1f 40 00	 npad	 4
$LL2009@MenuProc:
  0bf80	8a 81 00 00 00
	00		 mov	 al, BYTE PTR ?MailStr@@3USTR_BUFFER@@A[ecx]
  0bf86	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0bf89	88 84 0d cf f1
	ff ff		 mov	 BYTE PTR _moji2$45[ebp+ecx-1], al
  0bf90	84 c0		 test	 al, al
  0bf92	75 ec		 jne	 SHORT $LL2009@MenuProc

; 16931: 											// ???????
; 16932: 											makeEscapeString(moji2, moji, sizeof(moji));

  0bf94	68 00 01 00 00	 push	 256			; 00000100H
  0bf99	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0bf9f	50		 push	 eax
  0bfa0	8d 85 d0 f1 ff
	ff		 lea	 eax, DWORD PTR _moji2$45[ebp]
  0bfa6	50		 push	 eax
  0bfa7	e8 00 00 00 00	 call	 ?makeEscapeString@@YAPADPAD0H@Z ; makeEscapeString
  0bfac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16933: 											// ???????î
; 16934: 											if (bNewServer)

  0bfaf	8d 85 d0 f1 ff
	ff		 lea	 eax, DWORD PTR _moji2$45[ebp]
  0bfb5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  0bfbc	6a 00		 push	 0
  0bfbe	50		 push	 eax
  0bfbf	ff 35 00 00 00
	00		 push	 DWORD PTR ?mailItemNo@@3HA
  0bfc5	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182
  0bfcc	50		 push	 eax
  0bfcd	56		 push	 esi
  0bfce	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0bfd4	74 07		 je	 SHORT $LN1536@MenuProc

; 16935: 												lssproto_PMSG_send(sockfd, i, pc.mailPetNo, mailItemNo, moji2, FONT_PAL_WHITE);

  0bfd6	e8 00 00 00 00	 call	 ?lssproto_PMSG_send@@YAXHHHHPADH@Z ; lssproto_PMSG_send
  0bfdb	eb 05		 jmp	 SHORT $LN5139@MenuProc
$LN1536@MenuProc:

; 16936: 											else
; 16937: 												old_lssproto_PMSG_send(sockfd, i, pc.mailPetNo, mailItemNo, moji2, FONT_PAL_WHITE);

  0bfdd	e8 00 00 00 00	 call	 ?old_lssproto_PMSG_send@@YAXHHHHPADH@Z ; old_lssproto_PMSG_send
$LN5139@MenuProc:

; 16938: 											pc.mailPetNo = -1;

  0bfe2	83 c8 ff	 or	 eax, -1
  0bfe5	83 c4 18	 add	 esp, 24			; 00000018H
  0bfe8	66 a3 b6 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+182, ax

; 16939: 											// ?î?????????
; 16940: 											ItemBuffer[mailItemNo].mixFlag = 0;

  0bfee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailItemNo@@3HA
  0bff3	c1 e0 05	 shl	 eax, 5
  0bff6	c7 80 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[eax+28], 0

; 16941: 											// ????????
; 16942: 											saveUserSetting();

  0c000	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 16943: 											// ????????????????
; 16944: 											if (pActPet != NULL) {

  0c005	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet@@3PAUaction@@A
  0c00a	85 c0		 test	 eax, eax
  0c00c	74 0a		 je	 SHORT $LN363@MenuProc

; 16945: 												// ????î¡¡??
; 16946: 												pActPet->actNo = 1;

  0c00e	c7 80 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+172], 1
$LN363@MenuProc:

; 16920: 								for (i = 0; i < MAX_ADR_BOOK; i++) {

  0c018	46		 inc	 esi
  0c019	83 c7 68	 add	 edi, 104		; 00000068H
  0c01c	83 fe 50	 cmp	 esi, 80			; 00000050H
  0c01f	0f 8c 2b ff ff
	ff		 jl	 $LL365@MenuProc

; 16947: 											}
; 16948: 										}
; 16949: 									}
; 16950: 								}
; 16951: 								play_se(101, 320, 240);

  0c025	68 f0 00 00 00	 push	 240			; 000000f0H
  0c02a	68 40 01 00 00	 push	 320			; 00000140H
  0c02f	6a 65		 push	 101			; 00000065H
  0c031	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0c036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16952: 								mailWndBtnFlag[18] = TRUE;

  0c039	b8 01 00 00 00	 mov	 eax, 1

; 16953: 							}

  0c03e	eb 1c		 jmp	 SHORT $LN1532@MenuProc
$LN1531@MenuProc:

; 16954: 							else {
; 16955: 								// ???
; 16956: 								play_se(220, 320, 240);

  0c040	68 f0 00 00 00	 push	 240			; 000000f0H
  0c045	68 40 01 00 00	 push	 320			; 00000140H
  0c04a	68 dc 00 00 00	 push	 220			; 000000dcH
  0c04f	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0c054	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4839@MenuProc:

; 16957: 							}
; 16958: 						}
; 16959: 						// ?????????
; 16960: 						if (mouse.state & MOUSE_LEFT_CRICK && mailWndBtnFlag[18] == TRUE) {

  0c057	a1 48 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+72
$LN1532@MenuProc:
  0c05c	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0c063	74 0f		 je	 SHORT $LN1527@MenuProc

; 16961: 							// ????
; 16962: 							mailWndBtnFlag[18] = TRUE;

  0c065	c7 05 48 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+72, 1
  0c06f	83 f8 01	 cmp	 eax, 1
  0c072	74 0a		 je	 SHORT $LN1528@MenuProc
$LN1527@MenuProc:

; 16963: 						}
; 16964: 						else {
; 16965: 							// ???î
; 16966: 							mailWndBtnFlag[18] = FALSE;
; 16967: 						}
; 16968: 					}
; 16969: 					else {
; 16970: 						// ???î
; 16971: 						mailWndBtnFlag[18] = FALSE;
; 16972: 					}
; 16973: 
; 16974: 					// î·???
; 16975: 					if (HitDispNo == mailWndFontNo[16] || joy_con[0] & JOY_A) {

  0c074	c7 05 48 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+72, 0
$LN1528@MenuProc:
  0c07e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0c083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0c089	3b 05 40 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+64
  0c08f	74 0c		 je	 SHORT $LN1543@MenuProc
  0c091	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  0c097	0f 84 73 00 00
	00		 je	 $LN1547@MenuProc
$LN1543@MenuProc:

; 16976: 						// ????????
; 16977: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_A) {

  0c09d	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  0c0a4	75 13		 jne	 SHORT $LN1545@MenuProc
  0c0a6	f7 05 00 00 00
	00 00 04 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 1024 ; 00000400H
  0c0b0	75 07		 jne	 SHORT $LN1545@MenuProc
  0c0b2	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+64
  0c0b7	eb 37		 jmp	 SHORT $LN1544@MenuProc
$LN1545@MenuProc:

; 16978: 							mailPetSendWndPageNo--; // ?????

  0c0b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA

; 16979: 							if (mailPetSendWndPageNo < 0) mailPetSendWndPageNo = MAX_ADR_BOOK_PAGE - 1;

  0c0be	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  0c0c3	83 e8 01	 sub	 eax, 1

; 16980: 							// ?????
; 16981: 							play_se(217, 320, 240);

  0c0c6	68 f0 00 00 00	 push	 240			; 000000f0H
  0c0cb	0f 48 c1	 cmovs	 eax, ecx
  0c0ce	68 40 01 00 00	 push	 320			; 00000140H
  0c0d3	68 d9 00 00 00	 push	 217			; 000000d9H
  0c0d8	a3 00 00 00 00	 mov	 DWORD PTR ?mailPetSendWndPageNo@@3HA, eax
  0c0dd	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0c0e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0c0e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16982: 							mailWndBtnFlag[16] = TRUE;

  0c0eb	b8 01 00 00 00	 mov	 eax, 1
$LN1544@MenuProc:

; 16983: 						}
; 16984: 						// ?????????
; 16985: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_A) && mailWndBtnFlag[16] == TRUE) {

  0c0f0	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0c0f7	75 08		 jne	 SHORT $LN1549@MenuProc
  0c0f9	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  0c0ff	74 0f		 je	 SHORT $LN1547@MenuProc
$LN1549@MenuProc:

; 16986: 							// ????
; 16987: 							mailWndBtnFlag[16] = TRUE;

  0c101	c7 05 40 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+64, 1
  0c10b	83 f8 01	 cmp	 eax, 1
  0c10e	74 0a		 je	 SHORT $LN1548@MenuProc
$LN1547@MenuProc:

; 16988: 						}
; 16989: 						else {
; 16990: 							mailWndBtnFlag[16] = FALSE;

  0c110	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+64, 0
$LN1548@MenuProc:

; 16991: 						}
; 16992: 					}
; 16993: 					else {
; 16994: 						mailWndBtnFlag[16] = FALSE;
; 16995: 					}
; 16996: 					if (HitDispNo == mailWndFontNo[17] || joy_con[0] & JOY_B) {

  0c11a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0c11f	3b 05 44 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+68
  0c125	74 0c		 je	 SHORT $LN1552@MenuProc
  0c127	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0c12d	0f 84 71 00 00
	00		 je	 $LN1556@MenuProc
$LN1552@MenuProc:

; 16997: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_B) {

  0c133	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  0c13a	75 13		 jne	 SHORT $LN1554@MenuProc
  0c13c	f7 05 00 00 00
	00 00 01 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 256 ; 00000100H
  0c146	75 07		 jne	 SHORT $LN1554@MenuProc
  0c148	a1 44 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+68
  0c14d	eb 35		 jmp	 SHORT $LN1553@MenuProc
$LN1554@MenuProc:

; 16998: 							mailPetSendWndPageNo++;

  0c14f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA

; 16999: 							if (mailPetSendWndPageNo >= MAX_ADR_BOOK_PAGE) mailPetSendWndPageNo = 0;

  0c154	33 c9		 xor	 ecx, ecx
  0c156	40		 inc	 eax
  0c157	83 f8 14	 cmp	 eax, 20			; 00000014H

; 17000: 							play_se(217, 320, 240);

  0c15a	68 f0 00 00 00	 push	 240			; 000000f0H
  0c15f	0f 4d c1	 cmovge	 eax, ecx
  0c162	68 40 01 00 00	 push	 320			; 00000140H
  0c167	68 d9 00 00 00	 push	 217			; 000000d9H
  0c16c	a3 00 00 00 00	 mov	 DWORD PTR ?mailPetSendWndPageNo@@3HA, eax
  0c171	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0c176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0c17c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 17001: 							mailWndBtnFlag[17] = TRUE;

  0c17f	b8 01 00 00 00	 mov	 eax, 1
$LN1553@MenuProc:

; 17002: 						}
; 17003: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_B) && mailWndBtnFlag[17] == TRUE) {

  0c184	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0c18b	75 08		 jne	 SHORT $LN1558@MenuProc
  0c18d	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0c193	74 0f		 je	 SHORT $LN1556@MenuProc
$LN1558@MenuProc:

; 17004: 							mailWndBtnFlag[17] = TRUE;

  0c195	c7 05 44 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+68, 1
  0c19f	83 f8 01	 cmp	 eax, 1
  0c1a2	74 0a		 je	 SHORT $LN1557@MenuProc
$LN1556@MenuProc:

; 17005: 						}
; 17006: 						else {
; 17007: 							mailWndBtnFlag[17] = FALSE;

  0c1a4	c7 05 44 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+68, 0
$LN1557@MenuProc:

; 17008: 						}
; 17009: 					}
; 17010: 					else {
; 17011: 						mailWndBtnFlag[17] = FALSE;
; 17012: 					}
; 17013: 					if (HitDispNo == mailWndFontNo[14]) {

  0c1ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0c1b3	3b 05 38 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+56
  0c1b9	75 59		 jne	 SHORT $LN1559@MenuProc

; 17014: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0c1bb	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0c1c2	74 33		 je	 SHORT $LN4843@MenuProc

; 17015: 							MailStr.buffer[0] = NULL;
; 17016: 							MailStr.cnt = 0;
; 17017: 							MailStr.cursor = 0;
; 17018: 							play_se(217, 320, 240);

  0c1c4	68 f0 00 00 00	 push	 240			; 000000f0H
  0c1c9	68 40 01 00 00	 push	 320			; 00000140H
  0c1ce	68 d9 00 00 00	 push	 217			; 000000d9H
  0c1d3	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A, 0
  0c1da	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+263, 0
  0c1e1	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?MailStr@@3USTR_BUFFER@@A+265, 0
  0c1e8	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0c1ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 17019: 							mailWndBtnFlag[14] = TRUE;

  0c1f0	b8 01 00 00 00	 mov	 eax, 1
  0c1f5	eb 05		 jmp	 SHORT $LN1561@MenuProc
$LN4843@MenuProc:

; 17014: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0c1f7	a1 38 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+56
$LN1561@MenuProc:

; 17020: 						}
; 17021: 						if (mouse.state & MOUSE_LEFT_CRICK && mailWndBtnFlag[14] == TRUE) {

  0c1fc	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0c203	74 0f		 je	 SHORT $LN1559@MenuProc

; 17022: 							mailWndBtnFlag[14] = TRUE;

  0c205	c7 05 38 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+56, 1
  0c20f	83 f8 01	 cmp	 eax, 1
  0c212	74 0a		 je	 SHORT $LN1560@MenuProc
$LN1559@MenuProc:

; 17023: 						}
; 17024: 						else {
; 17025: 							mailWndBtnFlag[14] = FALSE;
; 17026: 						}
; 17027: 					}
; 17028: 					else {
; 17029: 						mailWndBtnFlag[14] = FALSE;
; 17030: 					}
; 17031: 					if (pActMenuWnd != NULL) {

  0c214	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+56, 0
$LN1560@MenuProc:
  0c21e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c224	85 ff		 test	 edi, edi
  0c226	0f 84 f8 0e 00
	00		 je	 $LN4848@MenuProc

; 17032: 						int nowNo = mailPetSendWndPageNo * MAX_ADR_BOOK_COUNT;

  0c22c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA

; 17033: 						int color;
; 17034: 						x = pActMenuWnd->x;
; 17035: 						y = pActMenuWnd->y;
; 17036: 						GetKeyInputFocus(&MailStr);

  0c231	68 00 00 00 00	 push	 OFFSET ?MailStr@@3USTR_BUFFER@@A ; MailStr
  0c236	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0c23d	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0c240	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
  0c243	89 85 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], eax
  0c249	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 17037: 
; 17038: 						if (pet[pc.mailPetNo].freeName[0] == NULL) {

  0c24e	0f bf 05 b6 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+182

; 17039: 							CenteringStr(pet[pc.mailPetNo].name, moji, PET_NAME_LEN);
; 17040: 						}
; 17041: 						else {
; 17042: 							CenteringStr(pet[pc.mailPetNo].freeName, moji, PET_NAME_LEN);
; 17043: 						}
; 17044: 						StockFontBuffer(x + 120, y + 14, FONT_PRIO_FRONT, 0, moji, 0);

  0c255	ba 54 00 00 00	 mov	 edx, OFFSET ?pet@@3PAUPET@@A+84
  0c25a	69 c8 78 0b 00
	00		 imul	 ecx, eax, 2936
  0c260	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c266	6a 10		 push	 16			; 00000010H
  0c268	50		 push	 eax
  0c269	b8 65 00 00 00	 mov	 eax, OFFSET ?pet@@3PAUPET@@A+101
  0c26e	80 b9 65 00 00
	00 00		 cmp	 BYTE PTR ?pet@@3PAUPET@@A[ecx+101], 0
  0c275	0f 44 c2	 cmove	 eax, edx
  0c278	03 c1		 add	 eax, ecx
  0c27a	50		 push	 eax
  0c27b	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr
  0c280	6a 00		 push	 0
  0c282	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c288	50		 push	 eax
  0c289	6a 00		 push	 0
  0c28b	6a 01		 push	 1
  0c28d	8d 47 0e	 lea	 eax, DWORD PTR [edi+14]
  0c290	50		 push	 eax
  0c291	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0c297	83 c0 78	 add	 eax, 120		; 00000078H
  0c29a	50		 push	 eax
  0c29b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17045: 						StockFontBuffer2(&MailStr);

  0c2a0	68 00 00 00 00	 push	 OFFSET ?MailStr@@3USTR_BUFFER@@A ; MailStr
  0c2a5	e8 00 00 00 00	 call	 ?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z ; StockFontBuffer2
  0c2aa	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR ?mailWndSendFlag@@3PAHA[esi*4]
  0c2b1	83 c4 2c	 add	 esp, 44			; 0000002cH
  0c2b4	89 85 fc b9 ff
	ff		 mov	 DWORD PTR tv39255[ebp], eax
  0c2ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?mailWndFontNo@@3PAHA
  0c2bf	6b c6 68	 imul	 eax, esi, 104
  0c2c2	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR tv39256[ebp], ecx
  0c2c8	05 02 00 00 00	 add	 eax, OFFSET ?addressBook@@3PAUADDRESS_BOOK@@A+2
  0c2cd	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39254[ebp], eax
$LL368@MenuProc:

; 17047: #ifdef _EXTEND_AB
; 17048: 							if (addressBook[nowNo + i].useFlag == TRUE
; 17049: 								|| addressBook[nowNo + i].useFlag == 2
; 17050: 								|| addressBook[nowNo + i].useFlag == 3) {

  0c2d3	0f b7 50 fe	 movzx	 edx, WORD PTR [eax-2]
  0c2d7	66 83 fa 01	 cmp	 dx, 1
  0c2db	74 10		 je	 SHORT $LN1568@MenuProc
  0c2dd	66 83 fa 02	 cmp	 dx, 2
  0c2e1	74 0a		 je	 SHORT $LN1568@MenuProc
  0c2e3	66 83 fa 03	 cmp	 dx, 3
  0c2e7	0f 85 63 00 00
	00		 jne	 $LN1567@MenuProc
$LN1568@MenuProc:

; 17051: #else
; 17052: 							if (addressBook[nowNo + i].useFlag == TRUE) {
; 17053: #endif
; 17054: 								color = FONT_PAL_GRAY;
; 17055: 								if (addressBook[nowNo + i].onlineFlag > 0) {
; 17056: 									color = FONT_PAL_WHITE;
; 17057: 								}
; 17058: 								if (mailWndSendFlag[nowNo + i] == TRUE) {

  0c2ed	33 f6		 xor	 esi, esi
  0c2ef	b9 07 00 00 00	 mov	 ecx, 7
  0c2f4	66 39 30	 cmp	 WORD PTR [eax], si

; 17059: 									color = FONT_PAL_AQUA;
; 17060: 								}
; 17061: 								CenteringStr(addressBook[nowNo + i].name, moji, CHAR_NAME_LEN);

  0c2f7	6a 10		 push	 16			; 00000010H
  0c2f9	0f 4e f1	 cmovle	 esi, ecx
  0c2fc	8b 8d fc b9 ff
	ff		 mov	 ecx, DWORD PTR tv39255[ebp]
  0c302	83 39 01	 cmp	 DWORD PTR [ecx], 1
  0c305	b9 01 00 00 00	 mov	 ecx, 1
  0c30a	0f 44 f1	 cmove	 esi, ecx
  0c30d	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  0c313	51		 push	 ecx
  0c314	83 c0 12	 add	 eax, 18			; 00000012H
  0c317	50		 push	 eax
  0c318	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 17062: 								mailWndFontNo[i] = StockFontBuffer(x + 111, y + 177, FONT_PRIO_FRONT, color, moji, 2);

  0c31d	6a 02		 push	 2
  0c31f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c325	50		 push	 eax
  0c326	56		 push	 esi
  0c327	6a 01		 push	 1
  0c329	8d 87 b1 00 00
	00		 lea	 eax, DWORD PTR [edi+177]
  0c32f	50		 push	 eax
  0c330	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0c336	83 c0 6f	 add	 eax, 111		; 0000006fH
  0c339	50		 push	 eax
  0c33a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0c33f	8b 8d e0 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39256[ebp]
  0c345	83 c4 24	 add	 esp, 36			; 00000024H
  0c348	89 01		 mov	 DWORD PTR [ecx], eax
  0c34a	8b 85 f8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39254[ebp]
$LN1567@MenuProc:

; 17046: 						for (i = 0; i < MAX_ADR_BOOK_COUNT; i++) {

  0c350	83 85 fc b9 ff
	ff 04		 add	 DWORD PTR tv39255[ebp], 4
  0c357	83 c1 04	 add	 ecx, 4
  0c35a	83 c0 68	 add	 eax, 104		; 00000068H
  0c35d	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR tv39256[ebp], ecx

; 17063: 							}
; 17064: 							y += 23;

  0c363	83 c7 17	 add	 edi, 23			; 00000017H
  0c366	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39254[ebp], eax
  0c36c	81 f9 10 00 00
	00		 cmp	 ecx, OFFSET ?mailWndFontNo@@3PAHA+16
  0c372	0f 8c 5b ff ff
	ff		 jl	 $LL368@MenuProc

; 17065: 						}
; 17066: 						mailWndFontNo[15] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_IME3, CG_MAIL_WND_ITEM_BTN, 2);

  0c378	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c37d	6a 02		 push	 2
  0c37f	68 5a 66 00 00	 push	 26202			; 0000665aH
  0c384	6a 69		 push	 105			; 00000069H
  0c386	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0c389	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  0c38f	ff 70 18	 push	 DWORD PTR [eax+24]
  0c392	ff 70 14	 push	 DWORD PTR [eax+20]
  0c395	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 17067: 						mailWndFontNo[16] = StockDispBuffer(pActMenuWnd->x + 25 - 8 + 4, pActMenuWnd->y + 241, DISP_PRIO_IME3, CG_PREV_BTN + mailWndBtnFlag[16], 2);

  0c39a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c3a0	a3 3c 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+60, eax
  0c3a5	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+64
  0c3aa	05 44 66 00 00	 add	 eax, 26180		; 00006644H
  0c3af	6a 02		 push	 2
  0c3b1	50		 push	 eax
  0c3b2	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c3b5	05 f1 00 00 00	 add	 eax, 241		; 000000f1H
  0c3ba	6a 69		 push	 105			; 00000069H
  0c3bc	50		 push	 eax
  0c3bd	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0c3c0	83 c0 15	 add	 eax, 21			; 00000015H
  0c3c3	50		 push	 eax
  0c3c4	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0c3c9	a3 40 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+64, eax

; 17068: 						sprintf(moji, "%2d", mailPetSendWndPageNo + 1);

  0c3ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailPetSendWndPageNo@@3HA
  0c3d3	40		 inc	 eax
  0c3d4	50		 push	 eax
  0c3d5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c3db	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  0c3e0	50		 push	 eax
  0c3e1	e8 00 00 00 00	 call	 _sprintf

; 17069: 						StockFontBuffer(pActMenuWnd->x + 46 - 8 + 4, pActMenuWnd->y + 233, FONT_PRIO_FRONT, 0, moji, 0);

  0c3e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c3ec	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c3f2	6a 00		 push	 0
  0c3f4	50		 push	 eax
  0c3f5	6a 00		 push	 0
  0c3f7	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c3fa	05 e9 00 00 00	 add	 eax, 233		; 000000e9H
  0c3ff	6a 01		 push	 1
  0c401	50		 push	 eax
  0c402	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0c405	83 c0 2a	 add	 eax, 42			; 0000002aH
  0c408	50		 push	 eax
  0c409	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17070: 						mailWndFontNo[17] = StockDispBuffer(pActMenuWnd->x + 75 + 4, pActMenuWnd->y + 241, DISP_PRIO_IME3, CG_NEXT_BTN + mailWndBtnFlag[17], 2);

  0c40e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c414	83 c4 4c	 add	 esp, 76			; 0000004cH
  0c417	a1 44 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+68
  0c41c	05 46 66 00 00	 add	 eax, 26182		; 00006646H
  0c421	6a 02		 push	 2
  0c423	50		 push	 eax
  0c424	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c427	05 f1 00 00 00	 add	 eax, 241		; 000000f1H
  0c42c	6a 69		 push	 105			; 00000069H
  0c42e	50		 push	 eax
  0c42f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0c432	83 c0 4f	 add	 eax, 79			; 0000004fH
  0c435	50		 push	 eax
  0c436	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 17071: 						mailWndFontNo[14] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx + 60, pActMenuWnd->y + 390, DISP_PRIO_IME3, CG_MAIL_WND_CLEAR_BTN_UP + mailWndBtnFlag[14], 2);

  0c43b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c441	a3 44 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+68, eax
  0c446	a1 38 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+56
  0c44b	05 3c 66 00 00	 add	 eax, 26172		; 0000663cH
  0c450	6a 02		 push	 2
  0c452	50		 push	 eax
  0c453	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c456	05 86 01 00 00	 add	 eax, 390		; 00000186H
  0c45b	6a 69		 push	 105			; 00000069H
  0c45d	50		 push	 eax
  0c45e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0c461	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0c464	83 c0 3c	 add	 eax, 60			; 0000003cH
  0c467	50		 push	 eax
  0c468	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 17072: 						mailWndFontNo[18] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx - 60, pActMenuWnd->y + 421, DISP_PRIO_IME3, CG_SEND_BTN + mailWndBtnFlag[18] * 75, 2);

  0c46d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c473	a3 38 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+56, eax
  0c478	6b 05 48 00 00
	00 4b		 imul	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+72, 75
  0c47f	6a 02		 push	 2
  0c481	05 f3 65 00 00	 add	 eax, 26099		; 000065f3H
  0c486	50		 push	 eax
  0c487	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c48a	6a 69		 push	 105			; 00000069H
  0c48c	05 a5 01 00 00	 add	 eax, 421		; 000001a5H
  0c491	50		 push	 eax
  0c492	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0c495	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0c498	83 e8 3c	 sub	 eax, 60			; 0000003cH
  0c49b	50		 push	 eax
  0c49c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 17073: 						mailWndFontNo[19] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx + 60, pActMenuWnd->y + 421, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  0c4a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c4a7	a3 48 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+72, eax
  0c4ac	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c4af	05 a5 01 00 00	 add	 eax, 421		; 000001a5H

; 17074: 					}
; 17075: 				}
; 17076: 			}
; 17077: 			break;

  0c4b4	e9 57 f6 ff ff	 jmp	 $LN5167@MenuProc
$LN1571@MenuProc:

; 17078: 		case MAIL_WND_ITEM:
; 17079: 			if (pActMenuWnd == NULL) {

  0c4b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0c4c0	0f 85 b9 00 00
	00		 jne	 $LN1572@MenuProc

; 17080: 				pActMenuWnd = MakeWindowDisp(4, 24, 271, 281, 0, -1);

  0c4c6	6a ff		 push	 -1
  0c4c8	6a 00		 push	 0
  0c4ca	68 19 01 00 00	 push	 281			; 00000119H
  0c4cf	68 0f 01 00 00	 push	 271			; 0000010fH
  0c4d4	6a 18		 push	 24			; 00000018H
  0c4d6	6a 04		 push	 4
  0c4d8	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0c4dd	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0c4e4	8b c8		 mov	 ecx, eax
  0c4e6	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, ecx ; pActMenuWnd

; 17081: 				for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 17082: 				mailSendWndPageNo = 0;
; 17083: 				InitItem(pActMenuWnd->x, pActMenuWnd->y - 1, FALSE);

  0c4ec	6a 00		 push	 0
  0c4ee	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA, xmm0
  0c4f5	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c4f8	48		 dec	 eax
  0c4f9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailSendWndPageNo@@3HA, 0
  0c503	50		 push	 eax
  0c504	ff 71 18	 push	 DWORD PTR [ecx+24]
  0c507	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+16, xmm0
  0c50e	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+32, xmm0
  0c515	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+48, xmm0
  0c51c	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+64, xmm0
  0c523	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+80, xmm0
  0c52a	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+96, xmm0
  0c531	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+112, xmm0
  0c538	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+128, xmm0
  0c53f	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+144, xmm0
  0c546	e8 00 00 00 00	 call	 ?InitItem@@YAXHHH@Z	; InitItem
  0c54b	83 c4 24	 add	 esp, 36			; 00000024H

; 17084: 				if (MenuToggleFlag & JOY_CTRL_I && itemWndNo == 0) {

  0c54e	f7 05 00 00 00
	00 00 00 00 08	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 134217728 ; MenuToggleFlag, 08000000H
  0c558	0f 84 c6 0b 00
	00		 je	 $LN4848@MenuProc
  0c55e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?itemWndNo@@3IA, 0
  0c565	0f 85 b9 0b 00
	00		 jne	 $LN4848@MenuProc

; 17085: 					MenuToggleFlag &= ~JOY_CTRL_I;

  0c56b	81 25 00 00 00
	00 ff ff ff f7	 and	 DWORD PTR ?MenuToggleFlag@@3IA, -134217729 ; MenuToggleFlag, f7ffffffH

; 17086: 					DeathMenuAction2();

  0c575	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 17087: 				}
; 17088: 			}

  0c57a	e9 a5 0b 00 00	 jmp	 $LN4848@MenuProc
$LN1572@MenuProc:

; 17089: 			else {
; 17090: 				if (pActMenuWnd->hp > 0) {

  0c57f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c585	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  0c589	0f 8e 95 0b 00
	00		 jle	 $LN4848@MenuProc

; 17091: #ifdef _READ16BITBMP
; 17092: 					if (g_bUseAlpha) StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_ITEM_WND_1, 1);
; 17093: #endif
; 17094: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my - 80, DISP_PRIO_MENU, CG_ITEM_WND_1, 1);

  0c58f	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0c592	6a 01		 push	 1
  0c594	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_ITEM_WND_1@@3HA ; CG_ITEM_WND_1
  0c59a	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0c59d	6a 68		 push	 104			; 00000068H
  0c59f	83 e8 50	 sub	 eax, 80			; 00000050H
  0c5a2	50		 push	 eax
  0c5a3	ff 71 14	 push	 DWORD PTR [ecx+20]
  0c5a6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 17095: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my - 80, DISP_PRIO_MENU, CG_BTL_ITEM_WND_TITLE, 1);

  0c5ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c5b0	6a 01		 push	 1
  0c5b2	68 d8 65 00 00	 push	 26072			; 000065d8H
  0c5b7	6a 68		 push	 104			; 00000068H
  0c5b9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0c5bc	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0c5bf	83 e8 50	 sub	 eax, 80			; 00000050H
  0c5c2	50		 push	 eax
  0c5c3	ff 71 14	 push	 DWORD PTR [ecx+20]
  0c5c6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0c5cb	83 c4 28	 add	 esp, 40			; 00000028H

; 17096: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0c5ce	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0c5d5	74 43		 je	 SHORT $LN1577@MenuProc

; 17097: 						if (HitDispNo == mailWndFontNo[19]) {

  0c5d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0c5dc	3b 05 4c 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+76
  0c5e2	75 36		 jne	 SHORT $LN1577@MenuProc

; 17098: 							DeathAction(pActMenuWnd);

  0c5e4	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c5ea	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17099: 							pActMenuWnd = NULL;
; 17100: 							mailWndNo = MAIL_WND_PET_SEND;
; 17101: 							play_se(203, 320, 240);

  0c5ef	68 f0 00 00 00	 push	 240			; 000000f0H
  0c5f4	68 40 01 00 00	 push	 320			; 00000140H
  0c5f9	68 cb 00 00 00	 push	 203			; 000000cbH
  0c5fe	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0c608	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 3
  0c612	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0c617	83 c4 10	 add	 esp, 16			; 00000010H
$LN1577@MenuProc:

; 17102: 						}
; 17103: 					}
; 17104: 					if (pActMenuWnd != NULL) {

  0c61a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c620	85 ff		 test	 edi, edi
  0c622	0f 84 fc 0a 00
	00		 je	 $LN4848@MenuProc

; 17105: 						x = pActMenuWnd->x + 16;

  0c628	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  0c62b	ba ac 06 00 00	 mov	 edx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1708

; 17106: 						y = pActMenuWnd->y + 191 + 6;

  0c630	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
  0c633	83 c6 10	 add	 esi, 16			; 00000010H
  0c636	81 c7 c5 00 00
	00		 add	 edi, 197		; 000000c5H
  0c63c	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  0c642	b9 84 50 00 00	 mov	 ecx, OFFSET ?pc@@3UPC@@A+20612
  0c647	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi

; 17107: 						for (i = MAX_ITEM - 1; i >= MAX_ITEMSTART; i--) {

  0c64d	c7 85 fc b9 ff
	ff 35 00 00 00	 mov	 DWORD PTR _i$28$[ebp], 53 ; 00000035H
  0c657	89 95 e0 b9 ff
	ff		 mov	 DWORD PTR tv39253[ebp], edx
  0c65d	89 8d 0c ba ff
	ff		 mov	 DWORD PTR tv39252[ebp], ecx
$LL374@MenuProc:

; 17108: 							if (MakeHitBox(ItemBuffer[i].defX - 24, ItemBuffer[i].defY - 24 - 160,
; 17109: 								ItemBuffer[i].defX + 25, ItemBuffer[i].defY + 23 - 160, DISP_PRIO_IME3) == TRUE) {

  0c663	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0c665	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  0c668	6a 69		 push	 105			; 00000069H
  0c66a	8d 81 77 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-137]
  0c670	50		 push	 eax
  0c671	8d 42 19	 lea	 eax, DWORD PTR [edx+25]
  0c674	50		 push	 eax
  0c675	8d 81 48 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-184]
  0c67b	50		 push	 eax
  0c67c	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  0c67f	50		 push	 eax
  0c680	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  0c685	83 c4 14	 add	 esp, 20			; 00000014H
  0c688	83 f8 01	 cmp	 eax, 1
  0c68b	0f 85 c7 01 00
	00		 jne	 $LN1588@MenuProc

; 17110: 								if (pc.item[i].useFlag == TRUE) {

  0c691	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv39252[ebp]
  0c697	66 39 42 c8	 cmp	 WORD PTR [edx-56], ax
  0c69b	0f 85 39 01 00
	00		 jne	 $LN376@MenuProc

; 17111: 									char *splitPoint = pc.item[i].memo;
; 17112: 									int color = pc.item[i].color;
; 17113: 									if (pc.level < pc.item[i].level) color = FONT_PAL_RED;

  0c6a1	a1 38 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+56
  0c6a6	3b 82 f4 fe ff
	ff		 cmp	 eax, DWORD PTR [edx-268]
  0c6ac	b8 06 00 00 00	 mov	 eax, 6
  0c6b1	8b 8a ec fe ff
	ff		 mov	 ecx, DWORD PTR [edx-276]
  0c6b7	0f 4c c8	 cmovl	 ecx, eax
  0c6ba	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR _splitPoint$1$[ebp], edx

; 17114: 									StockFontBuffer(pActMenuWnd->x + 16, pActMenuWnd->y + 332 - 160 - 1, FONT_PRIO_FRONT, color, pc.item[i].name, 0);

  0c6c0	6a 00		 push	 0
  0c6c2	8d 42 d2	 lea	 eax, DWORD PTR [edx-46]
  0c6c5	50		 push	 eax
  0c6c6	51		 push	 ecx
  0c6c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c6cd	6a 01		 push	 1
  0c6cf	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c6d2	05 ab 00 00 00	 add	 eax, 171		; 000000abH
  0c6d7	50		 push	 eax
  0c6d8	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0c6db	83 c0 10	 add	 eax, 16			; 00000010H
  0c6de	50		 push	 eax
  0c6df	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17115: 									while (1) {
; 17116: 										if (strlen(splitPoint) > 28) {

  0c6e4	8b 8d 0c ba ff
	ff		 mov	 ecx, DWORD PTR tv39252[ebp]
  0c6ea	83 c4 18	 add	 esp, 24			; 00000018H
  0c6ed	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL4335@MenuProc:
  0c6f0	8a 01		 mov	 al, BYTE PTR [ecx]
  0c6f2	41		 inc	 ecx
  0c6f3	84 c0		 test	 al, al
  0c6f5	75 f9		 jne	 SHORT $LL4335@MenuProc
  0c6f7	2b ca		 sub	 ecx, edx
  0c6f9	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  0c6fc	0f 86 9d 00 00
	00		 jbe	 $LN1582@MenuProc
  0c702	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR _splitPoint$1$[ebp]
  0c708	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL375@MenuProc:

; 17117: 											strncpy(moji, splitPoint, 28);

  0c710	6a 1c		 push	 28			; 0000001cH
  0c712	52		 push	 edx
  0c713	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c719	50		 push	 eax
  0c71a	e8 00 00 00 00	 call	 _strncpy

; 17118: 											moji[28] = NULL;
; 17119: 											if (GetStrLastByte(moji) == 3) {

  0c71f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c725	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0
  0c72c	50		 push	 eax
  0c72d	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  0c732	83 c4 10	 add	 esp, 16			; 00000010H
  0c735	83 f8 03	 cmp	 eax, 3
  0c738	75 10		 jne	 SHORT $LN1584@MenuProc

; 17120: 												moji[27] = NULL;
; 17121: 												splitPoint += 27;

  0c73a	83 85 f0 b9 ff
	ff 1b		 add	 DWORD PTR _splitPoint$1$[ebp], 27 ; 0000001bH
  0c741	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+27], 0

; 17122: 											}

  0c748	eb 0e		 jmp	 SHORT $LN1585@MenuProc
$LN1584@MenuProc:

; 17123: 											else {
; 17124: 												moji[28] = NULL;
; 17125: 												splitPoint += 28;

  0c74a	83 85 f0 b9 ff
	ff 1c		 add	 DWORD PTR _splitPoint$1$[ebp], 28 ; 0000001cH
  0c751	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0
$LN1585@MenuProc:

; 17126: 											}
; 17127: 											StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0); y += 24;

  0c758	6a 00		 push	 0
  0c75a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c760	50		 push	 eax
  0c761	6a 00		 push	 0
  0c763	6a 01		 push	 1
  0c765	57		 push	 edi
  0c766	56		 push	 esi
  0c767	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0c76c	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR _splitPoint$1$[ebp]
  0c772	83 c4 18	 add	 esp, 24			; 00000018H
  0c775	8b ca		 mov	 ecx, edx
  0c777	83 c7 18	 add	 edi, 24			; 00000018H
  0c77a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0c77d	89 85 d8 b9 ff
	ff		 mov	 DWORD PTR tv39082[ebp], eax
$LL4336@MenuProc:

; 17115: 									while (1) {
; 17116: 										if (strlen(splitPoint) > 28) {

  0c783	8a 01		 mov	 al, BYTE PTR [ecx]
  0c785	41		 inc	 ecx
  0c786	84 c0		 test	 al, al
  0c788	75 f9		 jne	 SHORT $LL4336@MenuProc
  0c78a	2b 8d d8 b9 ff
	ff		 sub	 ecx, DWORD PTR tv39082[ebp]
  0c790	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  0c793	0f 87 77 ff ff
	ff		 ja	 $LL375@MenuProc
  0c799	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
$LN1582@MenuProc:

; 17128: 										}
; 17129: 										else {
; 17130: 											strcpy(moji, splitPoint);

  0c79f	8b 8d f0 b9 ff
	ff		 mov	 ecx, DWORD PTR _splitPoint$1$[ebp]
  0c7a5	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _moji$[ebp]
  0c7ab	2b d1		 sub	 edx, ecx
  0c7ad	0f 1f 00	 npad	 3
$LL2016@MenuProc:
  0c7b0	8a 01		 mov	 al, BYTE PTR [ecx]
  0c7b2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0c7b5	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0c7b9	84 c0		 test	 al, al
  0c7bb	75 f3		 jne	 SHORT $LL2016@MenuProc

; 17131: 											StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0);

  0c7bd	6a 00		 push	 0
  0c7bf	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0c7c5	50		 push	 eax
  0c7c6	6a 00		 push	 0
  0c7c8	6a 01		 push	 1
  0c7ca	57		 push	 edi
  0c7cb	56		 push	 esi
  0c7cc	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0c7d1	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv39252[ebp]
  0c7d7	83 c4 18	 add	 esp, 24			; 00000018H
$LN376@MenuProc:

; 17132: 											break;
; 17133: 										}
; 17134: 									}
; 17135: 								}
; 17136: 								if (mouse.onceState & MOUSE_LEFT_DBL_CRICK) {

  0c7da	f6 05 2c 00 00
	00 10		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 16 ; 00000010H
  0c7e1	0f 84 71 00 00
	00		 je	 $LN1588@MenuProc

; 17137: 									if (pc.item[i].useFlag == TRUE && pc.item[i].sendFlag & ITEM_FLAG_PET_MAIL) {

  0c7e7	66 83 7a c8 01	 cmp	 WORD PTR [edx-56], 1
  0c7ec	75 53		 jne	 SHORT $LN1587@MenuProc
  0c7ee	f6 42 d0 01	 test	 BYTE PTR [edx-48], 1
  0c7f2	74 4d		 je	 SHORT $LN1587@MenuProc

; 17138: 										mailItemNo = i;

  0c7f4	8b 85 fc b9 ff
	ff		 mov	 eax, DWORD PTR _i$28$[ebp]

; 17139: 										DeathAction(pActMenuWnd);

  0c7fa	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c800	a3 00 00 00 00	 mov	 DWORD PTR ?mailItemNo@@3HA, eax
  0c805	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17140: 										pActMenuWnd = NULL;
; 17141: 										mailWndNo = MAIL_WND_PET_SEND;
; 17142: 										play_se(203, 320, 240);

  0c80a	68 f0 00 00 00	 push	 240			; 000000f0H
  0c80f	68 40 01 00 00	 push	 320			; 00000140H
  0c814	68 cb 00 00 00	 push	 203			; 000000cbH
  0c819	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0c823	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 3
  0c82d	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 17143: 										GetKeyInputFocus(&MyChatBuffer);

  0c832	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0c837	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  0c83c	83 c4 14	 add	 esp, 20			; 00000014H

; 17144: 									}

  0c83f	eb 17		 jmp	 SHORT $LN1588@MenuProc
$LN1587@MenuProc:

; 17145: 									else {
; 17146: 										play_se(220, 320, 240);

  0c841	68 f0 00 00 00	 push	 240			; 000000f0H
  0c846	68 40 01 00 00	 push	 320			; 00000140H
  0c84b	68 dc 00 00 00	 push	 220			; 000000dcH
  0c850	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0c855	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1588@MenuProc:

; 17147: 									}
; 17148: 								}
; 17149: 							}
; 17150: 							if (pc.item[i].useFlag == TRUE) {

  0c858	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39252[ebp]
  0c85e	66 83 78 c8 01	 cmp	 WORD PTR [eax-56], 1
  0c863	75 2c		 jne	 SHORT $LN372@MenuProc

; 17151: 								StockDispBuffer(ItemBuffer[i].defX, ItemBuffer[i].defY - 160, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);

  0c865	8b 8d e0 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39253[ebp]
  0c86b	6a 00		 push	 0
  0c86d	ff b0 f0 fe ff
	ff		 push	 DWORD PTR [eax-272]
  0c873	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  0c877	50		 push	 eax
  0c878	8b 01		 mov	 eax, DWORD PTR [ecx]
  0c87a	2d a0 00 00 00	 sub	 eax, 160		; 000000a0H
  0c87f	50		 push	 eax
  0c880	ff 71 fc	 push	 DWORD PTR [ecx-4]
  0c883	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0c888	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39252[ebp]
  0c88e	83 c4 14	 add	 esp, 20			; 00000014H
$LN372@MenuProc:

; 17107: 						for (i = MAX_ITEM - 1; i >= MAX_ITEMSTART; i--) {

  0c891	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR tv39253[ebp]
  0c897	2d 7c 01 00 00	 sub	 eax, 380		; 0000017cH
  0c89c	ff 8d fc b9 ff
	ff		 dec	 DWORD PTR _i$28$[ebp]
  0c8a2	83 ea 20	 sub	 edx, 32			; 00000020H
  0c8a5	89 85 0c ba ff
	ff		 mov	 DWORD PTR tv39252[ebp], eax
  0c8ab	89 95 e0 b9 ff
	ff		 mov	 DWORD PTR tv39253[ebp], edx
  0c8b1	3d 34 0f 00 00	 cmp	 eax, OFFSET ?pc@@3UPC@@A+3892
  0c8b6	0f 8d a7 fd ff
	ff		 jge	 $LL374@MenuProc

; 17152: 							}
; 17153: 						}
; 17154: 						if (pActMenuWnd != NULL) {

  0c8bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c8c2	85 c9		 test	 ecx, ecx
  0c8c4	0f 84 5a 08 00
	00		 je	 $LN4848@MenuProc

; 17155: 							mailWndFontNo[19] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, pActMenuWnd->y + 262, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  0c8ca	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0c8cd	6a 02		 push	 2
  0c8cf	68 ba 65 00 00	 push	 26042			; 000065baH
  0c8d4	05 06 01 00 00	 add	 eax, 262		; 00000106H
  0c8d9	6a 69		 push	 105			; 00000069H
  0c8db	50		 push	 eax
  0c8dc	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0c8df	ff 70 14	 push	 DWORD PTR [eax+20]
  0c8e2	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0c8e7	83 c4 14	 add	 esp, 20			; 00000014H

; 17156: 						}
; 17157: 					}
; 17158: 				}
; 17159: 			}
; 17160: 			break;

  0c8ea	e9 30 08 00 00	 jmp	 $LN5137@MenuProc
$LN1591@MenuProc:

; 17161: 		case MAIL_WND_HISTORY:
; 17162: 			if (pActMenuWnd == NULL) {

  0c8ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd
  0c8f6	0f 85 d9 00 00
	00		 jne	 $LN1592@MenuProc

; 17163: 				pActMenuWnd = MakeWindowDisp(4, 4, 272, 424, 0, -1);

  0c8fc	6a ff		 push	 -1
  0c8fe	6a 00		 push	 0
  0c900	68 a8 01 00 00	 push	 424			; 000001a8H
  0c905	68 10 01 00 00	 push	 272			; 00000110H
  0c90a	6a 04		 push	 4
  0c90c	6a 04		 push	 4
  0c90e	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0c913	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe

; 17167: 					mailHistoryWndNowPageNo = (MailHistory[mailHistoryWndSelectNo].newHistoryNo + mailHistoryWndPageNo) % MAIL_MAX_HISTORY;

  0c91a	be 13 00 00 00	 mov	 esi, 19			; 00000013H
  0c91f	69 0d 00 00 00
	00 bc 03 00 00	 imul	 ecx, DWORD PTR ?mailHistoryWndSelectNo@@3HA, 956 ; mailHistoryWndSelectNo
  0c929	83 c4 18	 add	 esp, 24			; 00000018H
  0c92c	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  0c931	69 05 00 00 00
	00 f0 0e 00 00	 imul	 eax, DWORD PTR ?mailHistoryWndSelectNo@@3HA, 3824 ; mailHistoryWndSelectNo
  0c93b	85 f6		 test	 esi, esi
  0c93d	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA, xmm0
  0c944	c7 05 00 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?mailHistoryWndPageNo@@3HA, 19 ; mailHistoryWndPageNo, 00000013H
  0c94e	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+16, xmm0
  0c955	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+32, xmm0
  0c95c	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+48, xmm0
  0c963	8b b8 ec 0e 00
	00		 mov	 edi, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax+3820]
  0c969	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+64, xmm0
  0c970	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+80, xmm0
  0c977	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+96, xmm0
  0c97e	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+112, xmm0
  0c985	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+128, xmm0
  0c98c	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+144, xmm0
$LN5140@MenuProc:

; 17166: 					if (mailHistoryWndPageNo < 0) mailHistoryWndPageNo = MAIL_MAX_HISTORY - 1;

  0c993	79 0f		 jns	 SHORT $LN1594@MenuProc
  0c995	c7 05 00 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?mailHistoryWndPageNo@@3HA, 19 ; mailHistoryWndPageNo, 00000013H
  0c99f	be 13 00 00 00	 mov	 esi, 19			; 00000013H
$LN1594@MenuProc:

; 17167: 					mailHistoryWndNowPageNo = (MailHistory[mailHistoryWndSelectNo].newHistoryNo + mailHistoryWndPageNo) % MAIL_MAX_HISTORY;

  0c9a4	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0c9a7	99		 cdq
  0c9a8	f7 bd dc b9 ff
	ff		 idiv	 DWORD PTR tv37479[ebp]
  0c9ae	89 15 00 00 00
	00		 mov	 DWORD PTR ?mailHistoryWndNowPageNo@@3HA, edx

; 17168: 					if (MailHistory[mailHistoryWndSelectNo].noReadFlag[mailHistoryWndNowPageNo] >= TRUE) break;

  0c9b4	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0c9b7	83 3c 85 a8 0c
	00 00 01	 cmp	 DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax*4+3240], 1
  0c9bf	0f 8d 5f 07 00
	00		 jge	 $LN4848@MenuProc

; 17164: 				for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 17165: 				for (mailHistoryWndPageNo = MAIL_MAX_HISTORY - 1; mailHistoryWndPageNo > 0; mailHistoryWndPageNo--) {

  0c9c5	4e		 dec	 esi
  0c9c6	89 35 00 00 00
	00		 mov	 DWORD PTR ?mailHistoryWndPageNo@@3HA, esi ; mailHistoryWndPageNo
  0c9cc	85 f6		 test	 esi, esi
  0c9ce	7f c3		 jg	 SHORT $LN5140@MenuProc

; 17169: 				}
; 17170: #if 0
; 17171: 				if (pActPet == NULL) {
; 17172: 					pActPet = MakeAnimDisp(pActMenuWnd->x - 204, pActMenuWnd->y + 160, pet[pc.mailPetNo].graNo, ANIM_DISP_PET_RECIEVE);
; 17173: 					pActPet->atr |= ACT_ATR_INFO;
; 17174: 					pActPet->atr |= ACT_ATR_TYPE_PET;
; 17175: 					pActPet->level = 32;
; 17176: 					strcpy(pActPet->name, "æµè¯å® ç©");
; 17177: 				}
; 17178: 				if (pActMailItem == NULL && MailHistory[mailHistoryWndSelectNo].itemGraNo[mailHistoryWndNowPageNo] != -1) {
; 17179: 					pActMailItem = MakeAnimDisp(pActMenuWnd->x - 204, pActMenuWnd->y + 128, pc.item[5].graNo, ANIM_DISP_PET_ITEM);
; 17180: 					pActMailItem->atr |= ACT_ATR_INFO;
; 17181: 					pActMailItem->atr |= ACT_ATR_TYPE_ITEM;
; 17182: 					pActMailItem->dispPrio = DISP_PRIO_DRAG;
; 17183: 					strcpy(pActMailItem->name, "éå·å®æ");
; 17184: 				}
; 17185: #endif
; 17186: 			}

  0c9d0	e9 4f 07 00 00	 jmp	 $LN4848@MenuProc
$LN1592@MenuProc:

; 17187: 			else {
; 17188: 				if (pActMenuWnd->hp > 0) {

  0c9d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0c9db	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  0c9df	0f 8e 3f 07 00
	00		 jle	 $LN4848@MenuProc

; 17189: 					static int nowDelNo;
; 17190: 					StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd->pYobi)->my, DISP_PRIO_MENU, CG_MAIL_WND_HISTORY_WND, 1);

  0c9e5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0c9e8	6a 01		 push	 1
  0c9ea	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_MAIL_WND_HISTORY_WND@@3HA ; CG_MAIL_WND_HISTORY_WND
  0c9f0	6a 68		 push	 104			; 00000068H
  0c9f2	ff 70 18	 push	 DWORD PTR [eax+24]
  0c9f5	ff 70 14	 push	 DWORD PTR [eax+20]
  0c9f8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0c9fd	83 c4 14	 add	 esp, 20			; 00000014H

; 17191: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0ca00	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0ca07	0f 84 26 01 00
	00		 je	 $LN4844@MenuProc

; 17192: 						if (HitDispNo == mailWndFontNo[18]) {

  0ca0d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0ca12	3b 05 48 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+72
  0ca18	0f 85 9f 00 00
	00		 jne	 $LN1598@MenuProc

; 17193: 							DeathAction(pActMenuWnd);

  0ca1e	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0ca24	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17194: 							pActMenuWnd = NULL;

  0ca29	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 17195: 							DeathLetterAction();

  0ca33	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction

; 17196: 							DeathAction(pActPet);

  0ca38	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  0ca3e	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17197: 							pActPet = NULL;
; 17198: 							DeathAction(pActMailItem);

  0ca43	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0ca49	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  0ca53	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17199: 							pActMailItem = NULL;
; 17200: 							mailWndNoBak = mailWndNo;

  0ca58	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A
  0ca5d	83 c4 0c	 add	 esp, 12			; 0000000cH
  0ca60	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0ca6a	a3 00 00 00 00	 mov	 DWORD PTR ?mailWndNoBak@@3W4MAIL_WND_TYPE@@A, eax

; 17201: 							InitMailSendFlag();

  0ca6f	e8 00 00 00 00	 call	 ?InitMailSendFlag@@YAXXZ ; InitMailSendFlag

; 17202: 							mailWndSendFlag[mailHistoryWndSelectNo] = TRUE;
; 17203: 							if (ProcNo == PROC_BATTLE) {

  0ca74	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  0ca7b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailHistoryWndSelectNo@@3HA ; mailHistoryWndSelectNo
  0ca80	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?mailWndSendFlag@@3PAHA[eax*4], 1
  0ca8b	74 0f		 je	 SHORT $LN1601@MenuProc

; 17204: 								mailWndNo = MAIL_WND_SEND;
; 17205: 							}
; 17206: 							else {
; 17207: 								if (pc.mailPetNo != -1) {

  0ca8d	66 83 3d b6 00
	00 00 ff	 cmp	 WORD PTR ?pc@@3UPC@@A+182, -1

; 17208: 									mailWndNo = MAIL_WND_SELECT;

  0ca95	b8 01 00 00 00	 mov	 eax, 1
  0ca9a	75 05		 jne	 SHORT $LN1602@MenuProc
$LN1601@MenuProc:

; 17209: 								}
; 17210: 								else {
; 17211: 									mailWndNo = MAIL_WND_SEND;

  0ca9c	b8 02 00 00 00	 mov	 eax, 2
$LN1602@MenuProc:

; 17212: 								}
; 17213: 							}
; 17214: 							play_se(202, 320, 240);

  0caa1	68 f0 00 00 00	 push	 240			; 000000f0H
  0caa6	68 40 01 00 00	 push	 320			; 00000140H
  0caab	68 ca 00 00 00	 push	 202			; 000000caH
  0cab0	a3 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, eax
  0cab5	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0caba	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1598@MenuProc:

; 17215: 						}
; 17216: 						if (HitDispNo == mailWndFontNo[19]) {

  0cabd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0cac2	3b 05 4c 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+76
  0cac8	0f 85 65 00 00
	00		 jne	 $LN4844@MenuProc

; 17217: 							DeathAction(pActMenuWnd);

  0cace	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0cad4	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17218: 							pActMenuWnd = NULL;

  0cad9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 17219: 							DeathLetterAction();

  0cae3	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction

; 17220: 							DeathAction(pActPet);

  0cae8	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  0caee	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17221: 							pActPet = NULL;
; 17222: 							DeathAction(pActMailItem);

  0caf3	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0caf9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  0cb03	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17223: 							pActMailItem = NULL;
; 17224: 							mailWndNo = MAIL_WND_VIEW;
; 17225: 							play_se(203, 320, 240);

  0cb08	68 f0 00 00 00	 push	 240			; 000000f0H
  0cb0d	68 40 01 00 00	 push	 320			; 00000140H
  0cb12	68 cb 00 00 00	 push	 203			; 000000cbH
  0cb17	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0cb21	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, 0
  0cb2b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0cb30	83 c4 18	 add	 esp, 24			; 00000018H
$LN4844@MenuProc:

; 17226: 						}
; 17227: 					}
; 17228: 					if (HitDispNo == mailWndFontNo[16] || joy_con[0] & JOY_A) {

  0cb33	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0cb38	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0cb3e	3b 05 40 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+64
  0cb44	74 0c		 je	 SHORT $LN1606@MenuProc
  0cb46	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  0cb4c	0f 84 a5 00 00
	00		 je	 $LN1610@MenuProc
$LN1606@MenuProc:

; 17229: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_A) {

  0cb52	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  0cb59	75 16		 jne	 SHORT $LN1608@MenuProc
  0cb5b	f7 05 00 00 00
	00 00 04 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 1024 ; 00000400H
  0cb65	75 0a		 jne	 SHORT $LN1608@MenuProc
  0cb67	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+64
  0cb6c	e9 66 00 00 00	 jmp	 $LN1607@MenuProc
$LN1608@MenuProc:

; 17230: 							mailHistoryWndPageNo--;

  0cb71	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailHistoryWndPageNo@@3HA ; mailHistoryWndPageNo

; 17231: 							if (mailHistoryWndPageNo < 0) mailHistoryWndPageNo = MAIL_MAX_HISTORY - 1;

  0cb76	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  0cb7b	83 e8 01	 sub	 eax, 1
  0cb7e	0f 48 c1	 cmovs	 eax, ecx
  0cb81	a3 00 00 00 00	 mov	 DWORD PTR ?mailHistoryWndPageNo@@3HA, eax ; mailHistoryWndPageNo

; 17232: 							DeathLetterAction();

  0cb86	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction

; 17233: 							DeathAction(pActPet);

  0cb8b	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  0cb91	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17234: 							pActPet = NULL;
; 17235: 							DeathAction(pActMailItem);

  0cb96	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0cb9c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  0cba6	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17236: 							pActMailItem = NULL;
; 17237: 							play_se(217, 320, 240);

  0cbab	68 f0 00 00 00	 push	 240			; 000000f0H
  0cbb0	68 40 01 00 00	 push	 320			; 00000140H
  0cbb5	68 d9 00 00 00	 push	 217			; 000000d9H
  0cbba	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0cbc4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0cbc9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0cbcf	83 c4 14	 add	 esp, 20			; 00000014H

; 17238: 							mailWndBtnFlag[16] = TRUE;

  0cbd2	b8 01 00 00 00	 mov	 eax, 1
$LN1607@MenuProc:

; 17239: 						}
; 17240: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_A) && mailWndBtnFlag[16] == TRUE) {

  0cbd7	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0cbde	75 08		 jne	 SHORT $LN1612@MenuProc
  0cbe0	f7 c1 00 04 00
	00		 test	 ecx, 1024		; 00000400H
  0cbe6	74 0f		 je	 SHORT $LN1610@MenuProc
$LN1612@MenuProc:

; 17241: 							mailWndBtnFlag[16] = TRUE;

  0cbe8	c7 05 40 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+64, 1
  0cbf2	83 f8 01	 cmp	 eax, 1
  0cbf5	74 0a		 je	 SHORT $LN1611@MenuProc
$LN1610@MenuProc:

; 17242: 						}
; 17243: 						else {
; 17244: 							mailWndBtnFlag[16] = FALSE;

  0cbf7	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+64, 0
$LN1611@MenuProc:

; 17245: 						}
; 17246: 					}
; 17247: 					else {
; 17248: 						mailWndBtnFlag[16] = FALSE;
; 17249: 					}
; 17250: 					if (HitDispNo == mailWndFontNo[17] || joy_con[0] & JOY_B) {

  0cc01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0cc06	3b 05 44 00 00
	00		 cmp	 eax, DWORD PTR ?mailWndFontNo@@3PAHA+68
  0cc0c	74 0c		 je	 SHORT $LN1615@MenuProc
  0cc0e	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0cc14	0f 84 a3 00 00
	00		 je	 $LN1619@MenuProc
$LN1615@MenuProc:

; 17251: 						if (mouse.autoState & MOUSE_LEFT_CRICK || joy_auto[0] & JOY_B) {

  0cc1a	f6 05 30 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+48, 1
  0cc21	75 16		 jne	 SHORT $LN1617@MenuProc
  0cc23	f7 05 00 00 00
	00 00 01 00 00	 test	 DWORD PTR ?joy_auto@@3PAKA, 256 ; 00000100H
  0cc2d	75 0a		 jne	 SHORT $LN1617@MenuProc
  0cc2f	a1 44 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+68
  0cc34	e9 64 00 00 00	 jmp	 $LN1616@MenuProc
$LN1617@MenuProc:

; 17252: 							mailHistoryWndPageNo++;

  0cc39	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailHistoryWndPageNo@@3HA ; mailHistoryWndPageNo

; 17253: 							if (mailHistoryWndPageNo >= MAIL_MAX_HISTORY) mailHistoryWndPageNo = 0;

  0cc3e	33 c9		 xor	 ecx, ecx
  0cc40	40		 inc	 eax
  0cc41	83 f8 14	 cmp	 eax, 20			; 00000014H
  0cc44	0f 4d c1	 cmovge	 eax, ecx
  0cc47	a3 00 00 00 00	 mov	 DWORD PTR ?mailHistoryWndPageNo@@3HA, eax ; mailHistoryWndPageNo

; 17254: 							DeathLetterAction();

  0cc4c	e8 00 00 00 00	 call	 ?DeathLetterAction@@YAXXZ ; DeathLetterAction

; 17255: 							DeathAction(pActPet);

  0cc51	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet@@3PAUaction@@A
  0cc57	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17256: 							pActPet = NULL;
; 17257: 							DeathAction(pActMailItem);

  0cc5c	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0cc62	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  0cc6c	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17258: 							pActMailItem = NULL;
; 17259: 							play_se(217, 320, 240);

  0cc71	68 f0 00 00 00	 push	 240			; 000000f0H
  0cc76	68 40 01 00 00	 push	 320			; 00000140H
  0cc7b	68 d9 00 00 00	 push	 217			; 000000d9H
  0cc80	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0cc8a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0cc8f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?joy_con@@3PAKA
  0cc95	83 c4 14	 add	 esp, 20			; 00000014H

; 17260: 							mailWndBtnFlag[17] = TRUE;

  0cc98	b8 01 00 00 00	 mov	 eax, 1
$LN1616@MenuProc:

; 17261: 						}
; 17262: 						if ((mouse.state & MOUSE_LEFT_CRICK || joy_con[0] & JOY_B) && mailWndBtnFlag[17] == TRUE) {

  0cc9d	f6 05 28 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+40, 1
  0cca4	75 08		 jne	 SHORT $LN1621@MenuProc
  0cca6	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  0ccac	74 0f		 je	 SHORT $LN1619@MenuProc
$LN1621@MenuProc:

; 17263: 							mailWndBtnFlag[17] = TRUE;

  0ccae	c7 05 44 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+68, 1
  0ccb8	83 f8 01	 cmp	 eax, 1
  0ccbb	74 0a		 je	 SHORT $LN1620@MenuProc
$LN1619@MenuProc:

; 17264: 						}
; 17265: 						else {
; 17266: 							mailWndBtnFlag[17] = FALSE;

  0ccbd	c7 05 44 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mailWndBtnFlag@@3PAHA+68, 0
$LN1620@MenuProc:

; 17267: 						}
; 17268: 					}
; 17269: 					else {
; 17270: 						mailWndBtnFlag[17] = FALSE;
; 17271: 					}
; 17272: 					if (pActMenuWnd != NULL) {

  0ccc7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0cccc	85 c0		 test	 eax, eax
  0ccce	0f 84 50 04 00
	00		 je	 $LN4848@MenuProc

; 17273: 						x = pActMenuWnd->x;

  0ccd4	8b 70 18	 mov	 esi, DWORD PTR [eax+24]

; 17274: 						y = pActMenuWnd->y;
; 17275: 						char *splitPoint;
; 17276: 						mailHistoryWndNowPageNo = (MailHistory[mailHistoryWndSelectNo].newHistoryNo + mailHistoryWndPageNo) % MAIL_MAX_HISTORY;

  0ccd7	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0ccdc	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  0ccdf	69 05 00 00 00
	00 f0 0e 00 00	 imul	 eax, DWORD PTR ?mailHistoryWndSelectNo@@3HA, 3824 ; mailHistoryWndSelectNo
  0cce9	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  0ccef	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  0ccf5	8b 80 ec 0e 00
	00		 mov	 eax, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax+3820]
  0ccfb	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mailHistoryWndPageNo@@3HA ; mailHistoryWndPageNo
  0cd01	99		 cdq
  0cd02	f7 f9		 idiv	 ecx
  0cd04	8b ca		 mov	 ecx, edx

; 17277: 						if (MailHistory[mailHistoryWndSelectNo].noReadFlag[mailHistoryWndNowPageNo] >= TRUE) {

  0cd06	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mailHistoryWndSelectNo@@3HA ; mailHistoryWndSelectNo
  0cd0c	69 c2 bc 03 00
	00		 imul	 eax, edx, 956
  0cd12	89 0d 00 00 00
	00		 mov	 DWORD PTR ?mailHistoryWndNowPageNo@@3HA, ecx
  0cd18	03 c1		 add	 eax, ecx
  0cd1a	8b 04 85 a8 0c
	00 00		 mov	 eax, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax*4+3240]
  0cd21	83 f8 01	 cmp	 eax, 1
  0cd24	0f 8c 7c 01 00
	00		 jl	 $LN1623@MenuProc

; 17278: 							if (MailHistory[mailHistoryWndSelectNo].noReadFlag[mailHistoryWndNowPageNo] > TRUE) {

  0cd2a	0f 8e 11 01 00
	00		 jle	 $LN1626@MenuProc

; 17279: 								if (pActPet == NULL) {

  0cd30	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActPet@@3PAUaction@@A, 0
  0cd37	0f 85 7f 00 00
	00		 jne	 $LN1625@MenuProc

; 17280: 									pActPet = MakeAnimDisp(pActMenuWnd->x - 204, pActMenuWnd->y + 160, MailHistory[mailHistoryWndSelectNo].noReadFlag[mailHistoryWndNowPageNo], ANIM_DISP_PET_RECIEVE);

  0cd3d	6a 02		 push	 2
  0cd3f	50		 push	 eax
  0cd40	8d 87 a0 00 00
	00		 lea	 eax, DWORD PTR [edi+160]
  0cd46	50		 push	 eax
  0cd47	8d 86 34 ff ff
	ff		 lea	 eax, DWORD PTR [esi-204]
  0cd4d	50		 push	 eax
  0cd4e	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  0cd53	8b d0		 mov	 edx, eax
  0cd55	83 c4 10	 add	 esp, 16			; 00000010H

; 17281: 									pActPet->atr |= ACT_ATR_INFO;
; 17282: 									pActPet->atr |= ACT_ATR_TYPE_PET;
; 17283: 									pActPet->level = MailHistory[mailHistoryWndSelectNo].petLevel[mailHistoryWndNowPageNo];

  0cd58	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailHistoryWndNowPageNo@@3HA
  0cd5d	89 15 00 00 00
	00		 mov	 DWORD PTR ?pActPet@@3PAUaction@@A, edx
  0cd63	81 8a a4 00 00
	00 10 02 00 00	 or	 DWORD PTR [edx+164], 528 ; 00000210H
  0cd6d	69 0d 00 00 00
	00 bc 03 00 00	 imul	 ecx, DWORD PTR ?mailHistoryWndSelectNo@@3HA, 956 ; mailHistoryWndSelectNo
  0cd77	03 c8		 add	 ecx, eax
  0cd79	8b 0c 8d f8 0c
	00 00		 mov	 ecx, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[ecx*4+3320]
  0cd80	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 17284: 									strcpy(pActPet->name, MailHistory[mailHistoryWndSelectNo].petName[mailHistoryWndNowPageNo]);

  0cd86	8b c8		 mov	 ecx, eax
  0cd88	c1 e1 04	 shl	 ecx, 4
  0cd8b	03 c8		 add	 ecx, eax
  0cd8d	69 05 00 00 00
	00 f0 0e 00 00	 imul	 eax, DWORD PTR ?mailHistoryWndSelectNo@@3HA, 3824 ; mailHistoryWndSelectNo
  0cd97	8d 89 48 0d 00
	00		 lea	 ecx, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[ecx+3400]
  0cd9d	03 c8		 add	 ecx, eax
  0cd9f	83 c2 38	 add	 edx, 56			; 00000038H
$LL2017@MenuProc:
  0cda2	8a 01		 mov	 al, BYTE PTR [ecx]
  0cda4	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0cda7	88 02		 mov	 BYTE PTR [edx], al
  0cda9	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0cdac	84 c0		 test	 al, al
  0cdae	75 f2		 jne	 SHORT $LL2017@MenuProc
  0cdb0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mailHistoryWndNowPageNo@@3HA
  0cdb6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mailHistoryWndSelectNo@@3HA ; mailHistoryWndSelectNo
$LN1625@MenuProc:

; 17285: 								}
; 17286: 								if (pActMailItem == NULL && MailHistory[mailHistoryWndSelectNo].itemGraNo[mailHistoryWndNowPageNo] != -1) {

  0cdbc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMailItem@@3PAUaction@@A, 0 ; pActMailItem
  0cdc3	0f 85 78 00 00
	00		 jne	 $LN1626@MenuProc
  0cdc9	69 c2 bc 03 00
	00		 imul	 eax, edx, 956
  0cdcf	03 c1		 add	 eax, ecx
  0cdd1	8b 04 85 9c 0e
	00 00		 mov	 eax, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax*4+3740]
  0cdd8	83 f8 ff	 cmp	 eax, -1
  0cddb	0f 84 60 00 00
	00		 je	 $LN1626@MenuProc

; 17287: 									pActMailItem = MakeAnimDisp(pActMenuWnd->x - 204, pActMenuWnd->y + 128, MailHistory[mailHistoryWndSelectNo].itemGraNo[mailHistoryWndNowPageNo], ANIM_DISP_PET_ITEM);

  0cde1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0cde7	6a 0a		 push	 10			; 0000000aH
  0cde9	50		 push	 eax
  0cdea	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0cded	83 e8 80	 sub	 eax, -128		; ffffff80H
  0cdf0	50		 push	 eax
  0cdf1	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0cdf4	2d cc 00 00 00	 sub	 eax, 204		; 000000ccH
  0cdf9	50		 push	 eax
  0cdfa	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  0cdff	a3 00 00 00 00	 mov	 DWORD PTR ?pActMailItem@@3PAUaction@@A, eax ; pActMailItem
  0ce04	83 c4 10	 add	 esp, 16			; 00000010H

; 17288: 									pActMailItem->atr |= ACT_ATR_INFO;

  0ce07	83 88 a4 00 00
	00 10		 or	 DWORD PTR [eax+164], 16	; 00000010H

; 17289: 									pActMailItem->atr |= ACT_ATR_TYPE_ITEM;

  0ce0e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0ce13	81 88 a4 00 00
	00 00 04 00 00	 or	 DWORD PTR [eax+164], 1024 ; 00000400H

; 17290: 									pActMailItem->dispPrio = DISP_PRIO_DRAG;

  0ce1d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0ce22	c6 40 15 70	 mov	 BYTE PTR [eax+21], 112	; 00000070H

; 17291: 									strcpy(pActMailItem->name, "ìì´í ìì±");

  0ce26	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMailItem@@3PAUaction@@A ; pActMailItem
  0ce2c	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0M@IEFMJAKN@?$LO?F?$MA?L?E?$NL?5?$LP?O?$LM?$LK@
  0ce34	66 0f d6 41 38	 movq	 QWORD PTR [ecx+56], xmm0
  0ce39	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@IEFMJAKN@?$LO?F?$MA?L?E?$NL?5?$LP?O?$LM?$LK@+8
  0ce3e	89 41 40	 mov	 DWORD PTR [ecx+64], eax
$LN1626@MenuProc:

; 17292: 								}
; 17293: 							}
; 17294: 							if (pActLetter[0] == NULL) {

  0ce41	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActLetter@@3PAPAUaction@@A, 0
  0ce48	75 1f		 jne	 SHORT $LN1627@MenuProc

; 17295: 								pActLetter[0] = MakeAnimDisp(x + 28, y + 244, SPR_mail, ANIM_DISP_LETTER);

  0ce4a	6a 0c		 push	 12			; 0000000cH
  0ce4c	68 9b 88 01 00	 push	 100507			; 0001889bH
  0ce51	8d 87 f4 00 00
	00		 lea	 eax, DWORD PTR [edi+244]
  0ce57	50		 push	 eax
  0ce58	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  0ce5b	50		 push	 eax
  0ce5c	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  0ce61	83 c4 10	 add	 esp, 16			; 00000010H
  0ce64	a3 00 00 00 00	 mov	 DWORD PTR ?pActLetter@@3PAPAUaction@@A, eax
$LN1627@MenuProc:

; 17296: 							}
; 17297: 							MailHistory[mailHistoryWndSelectNo].noReadFlag[mailHistoryWndNowPageNo] = FALSE;

  0ce69	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mailHistoryWndSelectNo@@3HA ; mailHistoryWndSelectNo
  0ce6f	69 c1 bc 03 00
	00		 imul	 eax, ecx, 956

; 17298: 							SaveMailHistory(mailHistoryWndSelectNo);

  0ce75	51		 push	 ecx
  0ce76	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?mailHistoryWndNowPageNo@@3HA
  0ce7c	c7 04 85 a8 0c
	00 00 00 00 00
	00		 mov	 DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax*4+3240], 0
  0ce87	e8 00 00 00 00	 call	 ?SaveMailHistory@@YAHH@Z ; SaveMailHistory
  0ce8c	83 c4 04	 add	 esp, 4

; 17299: 							mailLamp = CheckMailNoReadFlag();

  0ce8f	e8 00 00 00 00	 call	 ?CheckMailNoReadFlag@@YAHXZ ; CheckMailNoReadFlag
  0ce94	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mailHistoryWndNowPageNo@@3HA
  0ce9a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mailHistoryWndSelectNo@@3HA ; mailHistoryWndSelectNo
  0cea0	66 a3 00 00 00
	00		 mov	 WORD PTR ?mailLamp@@3FA, ax ; mailLamp
$LN1623@MenuProc:

; 17300: 
; 17301: 						}
; 17302: 						splitPoint = MailHistory[mailHistoryWndSelectNo].str[mailHistoryWndNowPageNo];

  0cea6	69 c2 f0 0e 00
	00		 imul	 eax, edx, 3824
  0ceac	69 c9 8d 00 00
	00		 imul	 ecx, ecx, 141

; 17303: 						CenteringStr(addressBook[mailHistoryWndSelectNo].name, moji, CHAR_NAME_LEN);

  0ceb2	6a 10		 push	 16			; 00000010H
  0ceb4	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax]
  0ceba	03 c1		 add	 eax, ecx
  0cebc	89 85 00 ba ff
	ff		 mov	 DWORD PTR _splitPoint$1$[ebp], eax
  0cec2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0cec8	50		 push	 eax
  0cec9	6b c2 68	 imul	 eax, edx, 104
  0cecc	05 14 00 00 00	 add	 eax, OFFSET ?addressBook@@3PAUADDRESS_BOOK@@A+20
  0ced1	50		 push	 eax
  0ced2	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 17304: 						StockFontBuffer(x + 64, y + 34, FONT_PRIO_FRONT, 0, moji, 0);

  0ced7	6a 00		 push	 0
  0ced9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0cedf	50		 push	 eax
  0cee0	6a 00		 push	 0
  0cee2	6a 01		 push	 1
  0cee4	8d 47 22	 lea	 eax, DWORD PTR [edi+34]
  0cee7	50		 push	 eax
  0cee8	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  0ceeb	50		 push	 eax
  0ceec	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17305: 						StockFontBuffer(x + 148, y + 236, FONT_PRIO_FRONT, 0, MailHistory[mailHistoryWndSelectNo].dateStr[mailHistoryWndNowPageNo], 0);

  0cef1	69 05 00 00 00
	00 f0 0e 00 00	 imul	 eax, DWORD PTR ?mailHistoryWndSelectNo@@3HA, 3824 ; mailHistoryWndSelectNo
  0cefb	6b 0d 00 00 00
	00 15		 imul	 ecx, DWORD PTR ?mailHistoryWndNowPageNo@@3HA, 21
  0cf02	6a 00		 push	 0
  0cf04	8d 80 04 0b 00
	00		 lea	 eax, DWORD PTR ?MailHistory@@3PAUMAIL_HISTORY@@A[eax+2820]
  0cf0a	03 c1		 add	 eax, ecx
  0cf0c	50		 push	 eax
  0cf0d	6a 00		 push	 0
  0cf0f	6a 01		 push	 1
  0cf11	8d 87 ec 00 00
	00		 lea	 eax, DWORD PTR [edi+236]
  0cf17	50		 push	 eax
  0cf18	8d 86 94 00 00
	00		 lea	 eax, DWORD PTR [esi+148]
  0cf1e	50		 push	 eax
  0cf1f	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17306: 						while (1) {
; 17307: 							if (strlen(splitPoint) > 28) {

  0cf24	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR _splitPoint$1$[ebp]
  0cf2a	83 c4 3c	 add	 esp, 60			; 0000003cH
  0cf2d	8b d1		 mov	 edx, ecx
  0cf2f	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0cf32	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv39087[ebp], eax
$LL4337@MenuProc:
  0cf38	8a 02		 mov	 al, BYTE PTR [edx]
  0cf3a	42		 inc	 edx
  0cf3b	84 c0		 test	 al, al
  0cf3d	75 f9		 jne	 SHORT $LL4337@MenuProc
  0cf3f	2b 95 dc b9 ff
	ff		 sub	 edx, DWORD PTR tv39087[ebp]
  0cf45	83 fa 1c	 cmp	 edx, 28			; 0000001cH
  0cf48	0f 86 a8 00 00
	00		 jbe	 $LN3318@MenuProc
  0cf4e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0cf51	8b b5 00 ba ff
	ff		 mov	 esi, DWORD PTR _splitPoint$1$[ebp]
  0cf57	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv38409[ebp], eax
  0cf5d	0f 1f 00	 npad	 3
$LL383@MenuProc:

; 17308: 								strncpy(moji, splitPoint, 28);

  0cf60	6a 1c		 push	 28			; 0000001cH
  0cf62	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0cf68	56		 push	 esi
  0cf69	50		 push	 eax
  0cf6a	e8 00 00 00 00	 call	 _strncpy

; 17309: 								moji[28] = NULL;
; 17310: 								if (GetStrLastByte(moji) == 3) {

  0cf6f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0cf75	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0
  0cf7c	50		 push	 eax
  0cf7d	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  0cf82	83 c4 10	 add	 esp, 16			; 00000010H
  0cf85	83 f8 03	 cmp	 eax, 3
  0cf88	75 0c		 jne	 SHORT $LN1630@MenuProc

; 17311: 									moji[27] = NULL;

  0cf8a	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+27], 0

; 17312: 									splitPoint += 27;

  0cf91	83 c6 1b	 add	 esi, 27			; 0000001bH

; 17313: 								}

  0cf94	eb 0a		 jmp	 SHORT $LN1631@MenuProc
$LN1630@MenuProc:

; 17314: 								else {
; 17315: 									moji[28] = NULL;

  0cf96	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0

; 17316: 									splitPoint += 28;

  0cf9d	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN1631@MenuProc:

; 17317: 								}
; 17318: 								StockFontBuffer(x + 12, y + 260, FONT_PRIO_FRONT, 0, moji, 0); y += 20;

  0cfa0	6a 00		 push	 0
  0cfa2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0cfa8	50		 push	 eax
  0cfa9	6a 00		 push	 0
  0cfab	6a 01		 push	 1
  0cfad	8d 87 04 01 00
	00		 lea	 eax, DWORD PTR [edi+260]
  0cfb3	50		 push	 eax
  0cfb4	ff b5 dc b9 ff
	ff		 push	 DWORD PTR tv38409[ebp]
  0cfba	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0cfbf	8b ce		 mov	 ecx, esi
  0cfc1	83 c4 18	 add	 esp, 24			; 00000018H
  0cfc4	83 c7 14	 add	 edi, 20			; 00000014H
  0cfc7	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0cfca	66 0f 1f 44 00
	00		 npad	 6
$LL4338@MenuProc:

; 17306: 						while (1) {
; 17307: 							if (strlen(splitPoint) > 28) {

  0cfd0	8a 01		 mov	 al, BYTE PTR [ecx]
  0cfd2	41		 inc	 ecx
  0cfd3	84 c0		 test	 al, al
  0cfd5	75 f9		 jne	 SHORT $LL4338@MenuProc
  0cfd7	2b ca		 sub	 ecx, edx
  0cfd9	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  0cfdc	77 82		 ja	 SHORT $LL383@MenuProc
  0cfde	89 b5 00 ba ff
	ff		 mov	 DWORD PTR _splitPoint$1$[ebp], esi
  0cfe4	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0cfea	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR _splitPoint$1$[ebp]
  0cff0	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
$LN3318@MenuProc:

; 17319: 							}
; 17320: 							else {
; 17321: 								strcpy(moji, splitPoint);

  0cff6	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _moji$[ebp]
  0cffc	2b d1		 sub	 edx, ecx
  0cffe	66 90		 npad	 2
$LL2024@MenuProc:
  0d000	8a 01		 mov	 al, BYTE PTR [ecx]
  0d002	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0d005	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0d009	84 c0		 test	 al, al
  0d00b	75 f3		 jne	 SHORT $LL2024@MenuProc

; 17322: 								StockFontBuffer(x + 12, y + 260, FONT_PRIO_FRONT, 0, moji, 0);

  0d00d	6a 00		 push	 0
  0d00f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d015	50		 push	 eax
  0d016	6a 00		 push	 0
  0d018	6a 01		 push	 1
  0d01a	8d 87 04 01 00
	00		 lea	 eax, DWORD PTR [edi+260]
  0d020	50		 push	 eax
  0d021	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0d024	50		 push	 eax
  0d025	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17323: 								break;
; 17324: 							}
; 17325: 						}
; 17326: 						mailWndFontNo[16] = StockDispBuffer(pActMenuWnd->x + 25 + 16 + 8, pActMenuWnd->y + 405, DISP_PRIO_IME3, CG_PREV_BTN + mailWndBtnFlag[16], 2);

  0d02a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d030	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+64
  0d035	05 44 66 00 00	 add	 eax, 26180		; 00006644H
  0d03a	6a 02		 push	 2
  0d03c	50		 push	 eax
  0d03d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0d040	05 95 01 00 00	 add	 eax, 405		; 00000195H
  0d045	6a 69		 push	 105			; 00000069H
  0d047	50		 push	 eax
  0d048	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0d04b	83 c0 31	 add	 eax, 49			; 00000031H
  0d04e	50		 push	 eax
  0d04f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0d054	a3 40 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+64, eax

; 17327: 						sprintf(moji, "%2d", mailHistoryWndPageNo + 1);

  0d059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mailHistoryWndPageNo@@3HA ; mailHistoryWndPageNo
  0d05e	40		 inc	 eax
  0d05f	50		 push	 eax
  0d060	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d066	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  0d06b	50		 push	 eax
  0d06c	e8 00 00 00 00	 call	 _sprintf

; 17328: 						StockFontBuffer(pActMenuWnd->x + 46 + 16 + 9, pActMenuWnd->y + 397, FONT_PRIO_FRONT, 0, moji, 0);

  0d071	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d077	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d07d	6a 00		 push	 0
  0d07f	50		 push	 eax
  0d080	6a 00		 push	 0
  0d082	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0d085	05 8d 01 00 00	 add	 eax, 397		; 0000018dH
  0d08a	6a 01		 push	 1
  0d08c	50		 push	 eax
  0d08d	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0d090	83 c0 47	 add	 eax, 71			; 00000047H
  0d093	50		 push	 eax
  0d094	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17329: 						mailWndFontNo[17] = StockDispBuffer(pActMenuWnd->x + 75 + 16 + 9 + 8, pActMenuWnd->y + 405, DISP_PRIO_IME3, CG_NEXT_BTN + mailWndBtnFlag[17], 2);

  0d099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d09f	83 c4 50	 add	 esp, 80			; 00000050H
  0d0a2	a1 44 00 00 00	 mov	 eax, DWORD PTR ?mailWndBtnFlag@@3PAHA+68
  0d0a7	05 46 66 00 00	 add	 eax, 26182		; 00006646H
  0d0ac	6a 02		 push	 2
  0d0ae	50		 push	 eax
  0d0af	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0d0b2	05 95 01 00 00	 add	 eax, 405		; 00000195H
  0d0b7	6a 69		 push	 105			; 00000069H
  0d0b9	50		 push	 eax
  0d0ba	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0d0bd	83 c0 6c	 add	 eax, 108		; 0000006cH
  0d0c0	50		 push	 eax
  0d0c1	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 17330: 						mailWndFontNo[18] = StockDispBuffer(pActMenuWnd->x + 196, pActMenuWnd->y + 371, DISP_PRIO_IME3, CG_MAIL_WND_MAIL_BTN, 2);

  0d0c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d0cc	a3 44 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+68, eax
  0d0d1	6a 02		 push	 2
  0d0d3	68 e6 65 00 00	 push	 26086			; 000065e6H
  0d0d8	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0d0db	05 73 01 00 00	 add	 eax, 371		; 00000173H
  0d0e0	6a 69		 push	 105			; 00000069H
  0d0e2	50		 push	 eax
  0d0e3	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0d0e6	05 c4 00 00 00	 add	 eax, 196		; 000000c4H
  0d0eb	50		 push	 eax
  0d0ec	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 17331: 						mailWndFontNo[19] = StockDispBuffer(pActMenuWnd->x + 220 - 16 - 8, pActMenuWnd->y + 405, DISP_PRIO_IME3, CG_RETURN_BTN, 2);

  0d0f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d0f7	6a 02		 push	 2
  0d0f9	a3 48 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+72, eax
  0d0fe	68 bb 65 00 00	 push	 26043			; 000065bbH
  0d103	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0d106	05 95 01 00 00	 add	 eax, 405		; 00000195H
  0d10b	6a 69		 push	 105			; 00000069H
  0d10d	50		 push	 eax
  0d10e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0d111	05 c4 00 00 00	 add	 eax, 196		; 000000c4H
  0d116	50		 push	 eax
  0d117	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0d11c	83 c4 3c	 add	 esp, 60			; 0000003cH
$LN5137@MenuProc:

; 17332: 					}
; 17333: 				}
; 17334: 			}
; 17335: 			break;
; 17336: 
; 17337: 
; 17338: 		}
; 17339: 	}
; 17340: 
; 17341: 	if (MenuToggleFlag & JOY_CTRL_A) {

  0d11f	a3 4c 00 00 00	 mov	 DWORD PTR ?mailWndFontNo@@3PAHA+76, eax
$LN4848@MenuProc:
  0d124	f7 05 00 00 00
	00 00 00 00 02	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 33554432 ; MenuToggleFlag, 02000000H
  0d12e	74 1e		 je	 SHORT $LN1632@MenuProc

; 17342: 
; 17343: 		if (PetRanking::Instance().Check())

  0d130	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  0d135	8b c8		 mov	 ecx, eax
  0d137	e8 00 00 00 00	 call	 ?Check@PetRanking@@QAEHXZ ; PetRanking::Check
  0d13c	85 c0		 test	 eax, eax
  0d13e	74 3b		 je	 SHORT $LN1635@MenuProc

; 17344: 		{
; 17345: 			PetRanking::Instance().Proc();

  0d140	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  0d145	8b c8		 mov	 ecx, eax
  0d147	e8 00 00 00 00	 call	 ?Proc@PetRanking@@QAEXXZ ; PetRanking::Proc

; 17346: 		}
; 17347: 	}

  0d14c	eb 2d		 jmp	 SHORT $LN1635@MenuProc
$LN1632@MenuProc:

; 17348: 	else
; 17349: 	{
; 17350: 		if (PetRanking::Instance().Check())

  0d14e	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  0d153	8b c8		 mov	 ecx, eax
  0d155	e8 00 00 00 00	 call	 ?Check@PetRanking@@QAEHXZ ; PetRanking::Check
  0d15a	85 c0		 test	 eax, eax
  0d15c	74 1d		 je	 SHORT $LN1635@MenuProc

; 17351: 		{
; 17352: 			PetRanking::Instance().SetCheck(0);

  0d15e	8d 85 d0 b9 ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0d164	c7 85 d0 b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], 0
  0d16e	50		 push	 eax
  0d16f	e8 00 00 00 00	 call	 ?Instance@PetRanking@@SAAAV1@XZ ; PetRanking::Instance
  0d174	8b c8		 mov	 ecx, eax
  0d176	e8 00 00 00 00	 call	 ?SetCheck@PetRanking@@QAEXABH@Z ; PetRanking::SetCheck
$LN1635@MenuProc:

; 17353: 		}
; 17354: 	}
; 17355: 
; 17356: 	//? îî¬??????? ***********************************************************/
; 17357: 	if (BattleResultWndFlag >= 1 && ProcNo == PROC_GAME && SubProcNo == 3) {

  0d17b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BattleResultWndFlag@@3HA ; BattleResultWndFlag
  0d181	83 f9 01	 cmp	 ecx, 1
  0d184	0f 8c c9 00 00
	00		 jl	 $LN5037@MenuProc
  0d18a	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?ProcNo@@3IA, 9 ; ProcNo
  0d191	0f 85 bc 00 00
	00		 jne	 $LN5037@MenuProc
  0d197	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?SubProcNo@@3IA, 3 ; SubProcNo
  0d19e	0f 85 af 00 00
	00		 jne	 $LN5037@MenuProc

; 17358: 		if (--ResultWndTimer <= 0) {

  0d1a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResultWndTimer@@3HA ; ResultWndTimer
  0d1a9	48		 dec	 eax
  0d1aa	a3 00 00 00 00	 mov	 DWORD PTR ?ResultWndTimer@@3HA, eax ; ResultWndTimer
  0d1af	85 c0		 test	 eax, eax
  0d1b1	7f 44		 jg	 SHORT $LN4849@MenuProc

; 17359: 			DeathAction(pActMenuWnd);

  0d1b3	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d1b9	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17360: 			pActMenuWnd = NULL;

  0d1be	33 ff		 xor	 edi, edi

; 17361: 			BattleResultWndFlag = FALSE;

  0d1c0	33 c9		 xor	 ecx, ecx
  0d1c2	83 c4 04	 add	 esp, 4
  0d1c5	89 3d 00 00 00
	00		 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, edi ; pActMenuWnd

; 17362: 			if (MapWmdFlagBak != TRUE) {

  0d1cb	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?MapWmdFlagBak@@3HA, 1 ; MapWmdFlagBak
  0d1d2	89 0d 00 00 00
	00		 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, ecx ; BattleResultWndFlag
  0d1d8	74 23		 je	 SHORT $LN1638@MenuProc

; 17363: 				play_se(203, 320, 240);

  0d1da	68 f0 00 00 00	 push	 240			; 000000f0H
  0d1df	68 40 01 00 00	 push	 320			; 00000140H
  0d1e4	68 cb 00 00 00	 push	 203			; 000000cbH
  0d1e9	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0d1ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BattleResultWndFlag@@3HA ; BattleResultWndFlag
  0d1f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4849@MenuProc:

; 17364: 			}
; 17365: 		}
; 17366: 
; 17367: 		switch (BattleResultWndFlag) {

  0d1f7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
$LN1638@MenuProc:
  0d1fd	83 e9 01	 sub	 ecx, 1
  0d200	0f 84 13 04 00
	00		 je	 $LN1639@MenuProc
  0d206	83 e9 01	 sub	 ecx, 1
  0d209	75 48		 jne	 SHORT $LN5037@MenuProc

; 17451: 
; 17452: 					}
; 17453: 				}
; 17454: 			}
; 17455: 			break;
; 17456: 
; 17457: 		case 2:
; 17458: 			if (pActMenuWnd == NULL) {

  0d20b	85 ff		 test	 edi, edi
  0d20d	0f 85 fb 02 00
	00		 jne	 $LN1661@MenuProc

; 17459: 				int flag = 0;
; 17460: 				pActMenuWnd = MakeWindowDisp(320 - 96, 240 - 72, 3, 3, CG_WND_TITLE_RESULT, 2);

  0d213	6a 02		 push	 2
  0d215	68 a2 65 00 00	 push	 26018			; 000065a2H
  0d21a	6a 03		 push	 3
  0d21c	6a 03		 push	 3
  0d21e	68 a8 00 00 00	 push	 168			; 000000a8H
  0d223	68 e0 00 00 00	 push	 224			; 000000e0H
  0d228	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp

; 17461: 				for (i = 0; i < MENU_BTL_RESULT_0; i++) resultWndFontNo[i] = -2;
; 17462: 				play_se(202, 320, 240);

  0d22d	68 f0 00 00 00	 push	 240			; 000000f0H
  0d232	68 40 01 00 00	 push	 320			; 00000140H
  0d237	68 ca 00 00 00	 push	 202			; 000000caH
  0d23c	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  0d241	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?resultWndFontNo@@3PAHA, -2 ; resultWndFontNo, fffffffeH
  0d24b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0d250	83 c4 24	 add	 esp, 36			; 00000024H
$LN5037@MenuProc:

; 17486: 					}
; 17487: 				}
; 17488: 			}
; 17489: 			break;
; 17490: 		}
; 17491: 	}
; 17492: 
; 17493: 	//ä»¥ä¸å¼å§ä¸ºäº¤æè§çªé¨å
; 17494: 	if (MenuToggleFlag & JOY_CTRL_T)

  0d253	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0d259	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
$LN1649@MenuProc:
  0d25f	f7 05 00 00 00
	00 00 00 40 00	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H
  0d269	0f 84 02 3f 00
	00		 je	 $LN1668@MenuProc

; 17495: 	{
; 17496: 		char buffer[1024];
; 17497: #ifdef _TRADESYSTEM2	// Syu ADD æ°äº¤æç³»ç»
; 17498: 		char buffer2[1024];
; 17499: 		int j;
; 17500: #endif
; 17501: #ifdef _PET_ITEM
; 17502: 		static BOOL	bViewPetEquip = FALSE;
; 17503: #endif
; 17504: 		switch (tradeWndNo) {

  0d26f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tradeWndNo@@3IA, 0
  0d276	0f 85 68 3f 00
	00		 jne	 $LN1913@MenuProc

; 17505: 		case 0:
; 17506: 			//è§çªä¸ºäº§çæ¶åå§å
; 17507: 			if (pActMenuWnd4 == NULL) {

  0d27c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd4@@3PAUaction@@A ; pActMenuWnd4
  0d282	85 c9		 test	 ecx, ecx
  0d284	0f 85 5b 07 00
	00		 jne	 $LN1671@MenuProc

; 17508: 				DeathMenuAction();

  0d28a	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 17509: 				DeathMenuAction2();

  0d28f	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 17510: 				//æå¨è¾å¥éé¢buffåå§å
; 17511: 				TradeBuffer.buffer[0] = NULL;
; 17512: 				TradeBuffer.cnt = 0;
; 17513: 				TradeBuffer.cursor = 0;
; 17514: 				TradeBuffer.len = 8;
; 17515: 				TradeBuffer.color = 0;
; 17516: 				TradeBuffer.x = 600;
; 17517: 				TradeBuffer.y = 120;
; 17518: 				TradeBuffer.fontPrio = FONT_PRIO_FRONT;
; 17519: 				x = (lpDraw->xSize - 620) / 2;

  0d294	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0d29a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TradeBuffer@@3USTR_BUFFER@@A, 0
  0d2a1	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?TradeBuffer@@3USTR_BUFFER@@A+263, 0
  0d2a8	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?TradeBuffer@@3USTR_BUFFER@@A+265, 0
  0d2af	c6 05 04 01 00
	00 08		 mov	 BYTE PTR ?TradeBuffer@@3USTR_BUFFER@@A+260, 8
  0d2b6	c6 05 08 01 00
	00 00		 mov	 BYTE PTR ?TradeBuffer@@3USTR_BUFFER@@A+264, 0
  0d2bd	c7 05 0c 01 00
	00 58 02 00 00	 mov	 DWORD PTR ?TradeBuffer@@3USTR_BUFFER@@A+268, 600 ; 00000258H
  0d2c7	c7 05 10 01 00
	00 78 00 00 00	 mov	 DWORD PTR ?TradeBuffer@@3USTR_BUFFER@@A+272, 120 ; 00000078H
  0d2d1	c7 05 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR ?TradeBuffer@@3USTR_BUFFER@@A+284, 1
  0d2db	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  0d2e1	2d 6c 02 00 00	 sub	 eax, 620		; 0000026cH
  0d2e6	99		 cdq
  0d2e7	2b c2		 sub	 eax, edx
  0d2e9	8b f0		 mov	 esi, eax

; 17520: 				y = (lpDraw->ySize - 456) / 2;

  0d2eb	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]

; 17521: 				pActMenuWnd4 = MakeWindowDisp(x, y, 620, 456, 0, -1);

  0d2f1	6a ff		 push	 -1
  0d2f3	2d c8 01 00 00	 sub	 eax, 456		; 000001c8H
  0d2f8	d1 fe		 sar	 esi, 1
  0d2fa	6a 00		 push	 0
  0d2fc	99		 cdq
  0d2fd	68 c8 01 00 00	 push	 456			; 000001c8H
  0d302	2b c2		 sub	 eax, edx
  0d304	d1 f8		 sar	 eax, 1
  0d306	68 6c 02 00 00	 push	 620			; 0000026cH
  0d30b	50		 push	 eax
  0d30c	56		 push	 esi
  0d30d	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0d312	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0d319	83 c4 18	 add	 esp, 24			; 00000018H
  0d31c	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA, xmm0
  0d323	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A, eax ; pActMenuWnd4

; 17522: 
; 17523: #ifdef _CHANGETRADERULE		   // (ä¸å¯å¼) Syu ADD äº¤æè§åä¿®è®¢
; 17524: 				TradeBtnflag = false;
; 17525: #endif
; 17526: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17527: 				//ç¶æåå§å
; 17528: 				locknum = -1;
; 17529: 				locknum2 = -1;
; 17530: 				MainTradeWndflag = true;
; 17531: 				SecondTradeWndflag = false;
; 17532: 
; 17533: 
; 17534: 
; 17535: 
; 17536: 				//andy_add 20030610
; 17537: 				for (i = 0; i < MENU_TRADE_0; i++) tradeWndFontNo[i] = -2;
; 17538: 				for (i = 0; i < 6; i++) SecondtradeWndFontNo[i] = -2;
; 17539: 
; 17540: 				for (i = 0; i < 43; i++)

  0d328	b8 04 00 00 00	 mov	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+4
  0d32d	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+16, xmm0
  0d334	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TradeBtnflag@@3_NA, 0 ; TradeBtnflag
  0d33b	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+32, xmm0
  0d342	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?locknum@@3HA, -1 ; locknum
  0d34c	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+48, xmm0
  0d353	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?locknum2@@3HA, -1 ; locknum2
  0d35d	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+64, xmm0
  0d364	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?MainTradeWndflag@@3_NA, 1 ; MainTradeWndflag
  0d36b	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?tradeWndFontNo@@3PAHA+80, xmm0
  0d373	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0d37a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SecondTradeWndflag@@3_NA, 0 ; SecondTradeWndflag
  0d381	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?SecondtradeWndFontNo@@3PAHA, xmm0
  0d388	66 0f d6 05 10
	00 00 00	 movq	 QWORD PTR ?SecondtradeWndFontNo@@3PAHA+16, xmm0
$LL415@MenuProc:

; 17541: 					tradeList[i].data = -1;

  0d390	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0d396	05 18 03 00 00	 add	 eax, 792		; 00000318H
  0d39b	3d 0c 85 00 00	 cmp	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+34060
  0d3a0	7c ee		 jl	 SHORT $LL415@MenuProc

; 17542: #ifdef _TRADETALKWND				// (ä¸å¯å¼) Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 17543: 				//è§çªå¼å¯æ¸ç©ºåå®¹
; 17544: 				tradetalkwndflag = false;

  0d3a2	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?tradetalkwndflag@@3_NA, 0 ; tradetalkwndflag

; 17545: 				for (i = 0; i < 4; i++)

  0d3a9	be 00 00 00 00	 mov	 esi, OFFSET ?talkmsg@@3PAY0BAA@DA ; talkmsg
  0d3ae	66 90		 npad	 2
$LL418@MenuProc:

; 17546: 					sprintf(talkmsg[i], "");

  0d3b0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0d3b5	56		 push	 esi
  0d3b6	e8 00 00 00 00	 call	 _sprintf
  0d3bb	81 c6 00 01 00
	00		 add	 esi, 256		; 00000100H
  0d3c1	83 c4 08	 add	 esp, 8
  0d3c4	81 fe 00 04 00
	00		 cmp	 esi, OFFSET ?talkmsg@@3PAY0BAA@DA+1024
  0d3ca	7c e4		 jl	 SHORT $LL418@MenuProc

; 17547: #endif
; 17548: 				drag1Y = 67;
; 17549: 				drag2Y = 257;
; 17550: 				x = (lpDraw->xSize - 620) / 2;

  0d3cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0d3d2	c7 05 00 00 00
	00 43 00 00 00	 mov	 DWORD PTR ?drag1Y@@3HA, 67 ; drag1Y, 00000043H
  0d3dc	c7 05 00 00 00
	00 01 01 00 00	 mov	 DWORD PTR ?drag2Y@@3HA, 257 ; drag2Y, 00000101H

; 17551: 				y = (lpDraw->ySize - 456) / 2;
; 17552: 				SecondTradeWnd = MakeWindowDisp(x, y, 620, 456, 0, -1);

  0d3e6	6a ff		 push	 -1
  0d3e8	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  0d3ee	2d 6c 02 00 00	 sub	 eax, 620		; 0000026cH
  0d3f3	99		 cdq
  0d3f4	2b c2		 sub	 eax, edx
  0d3f6	8b f0		 mov	 esi, eax
  0d3f8	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0d3fe	2d c8 01 00 00	 sub	 eax, 456		; 000001c8H
  0d403	d1 fe		 sar	 esi, 1
  0d405	6a 00		 push	 0
  0d407	99		 cdq
  0d408	68 c8 01 00 00	 push	 456			; 000001c8H
  0d40d	2b c2		 sub	 eax, edx
  0d40f	d1 f8		 sar	 eax, 1
  0d411	68 6c 02 00 00	 push	 620			; 0000026cH
  0d416	50		 push	 eax
  0d417	56		 push	 esi
  0d418	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0d41d	a3 00 00 00 00	 mov	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A, eax ; SecondTradeWnd
  0d422	83 c4 18	 add	 esp, 24			; 00000018H
  0d425	b8 00 00 00 00	 mov	 eax, OFFSET ?tradeList@@3PAUtradelist@@A
  0d42a	66 0f 1f 44 00
	00		 npad	 6
$LL421@MenuProc:

; 17553: 				for (i = 0; i <= 42; i++) {
; 17554: 					tradeList[i].data = -1;

  0d430	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 17555: 					tradeList[i].kind = 'S';

  0d437	c6 00 53	 mov	 BYTE PTR [eax], 83	; 00000053H
  0d43a	05 18 03 00 00	 add	 eax, 792		; 00000318H
  0d43f	3d f0 81 00 00	 cmp	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+33264
  0d444	7e ea		 jle	 SHORT $LL421@MenuProc

; 17556: 				}
; 17557: 				for (i = 0; i < 21; i++) {

  0d446	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff

; 17558: 					mytradelist[i] = -1;
; 17559: 					opptradelist[i] = -1;
; 17560: 				}
; 17561: 
; 17562: 				for (i = 0; i < 15; i++) {

  0d44d	ba 00 02 00 00	 mov	 edx, OFFSET ?opp_item@@3PAUshowitem@@A+512
  0d452	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0d457	bf 00 00 00 00	 mov	 edi, OFFSET ?itemflag@@3PAHA
  0d45c	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?opptradelist@@3PAHA, xmm0
  0d463	c7 05 50 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?opptradelist@@3PAHA+80, -1
  0d46d	be 2c 0e 00 00	 mov	 esi, OFFSET ?pc@@3UPC@@A+3628
  0d472	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?opptradelist@@3PAHA+16, xmm0
  0d479	c7 05 50 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mytradelist@@3PAHA+80, -1
  0d483	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?opptradelist@@3PAHA+32, xmm0
  0d48a	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?opptradelist@@3PAHA+48, xmm0
  0d491	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?opptradelist@@3PAHA+64, xmm0
  0d498	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0d49f	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mytradelist@@3PAHA, xmm0
  0d4a6	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mytradelist@@3PAHA+16, xmm0
  0d4ad	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mytradelist@@3PAHA+32, xmm0
  0d4b4	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mytradelist@@3PAHA+48, xmm0
  0d4bb	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mytradelist@@3PAHA+64, xmm0
$LL427@MenuProc:

; 17563: #ifdef _ITEM_PILENUMS
; 17564: 					itemflag[i] = pc.item[i + MAX_ITEMSTART].pile;

  0d4c2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0d4c4	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]

; 17565: #else
; 17566: 					itemflag[i] = 0;
; 17567: #endif
; 17568: 					strcpy(opp_item[i].damage, "");

  0d4c7	88 82 00 05 00
	00		 mov	 BYTE PTR [edx+1280], al
  0d4cd	8d 92 80 07 00
	00		 lea	 edx, DWORD PTR [edx+1920]

; 17569: 					strcpy(opp_item[i].effect, "");

  0d4d3	88 82 80 f8 ff
	ff		 mov	 BYTE PTR [edx-1920], al
  0d4d9	81 c6 7c 01 00
	00		 add	 esi, 380		; 0000017cH
  0d4df	89 4f fc	 mov	 DWORD PTR [edi-4], ecx

; 17570: 					strcpy(opp_item[i].name, "");

  0d4e2	88 82 80 f6 ff
	ff		 mov	 BYTE PTR [edx-2432], al
  0d4e8	81 fe 70 24 00
	00		 cmp	 esi, OFFSET ?pc@@3UPC@@A+9328
  0d4ee	7c d2		 jl	 SHORT $LL427@MenuProc

; 17571: 				}
; 17572: #endif
; 17573: 
; 17574: 				InitItem3(325, 230);

  0d4f0	68 e6 00 00 00	 push	 230			; 000000e6H
  0d4f5	68 45 01 00 00	 push	 325			; 00000145H
  0d4fa	e8 00 00 00 00	 call	 ?InitItem3@@YAXHH@Z	; InitItem3
  0d4ff	83 c4 08	 add	 esp, 8

; 17575: 				g_bTradesystemOpen = true;

  0d502	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_bTradesystemOpen@@3_NA, 1 ; g_bTradesystemOpen

; 17576: 			}

  0d509	e9 d6 3c 00 00	 jmp	 $LN1913@MenuProc
$LN1661@MenuProc:

; 17463: 			}
; 17464: 			else {
; 17465: 				if (pActMenuWnd->hp > 0) {

  0d50e	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  0d512	0f 8e 3b fd ff
	ff		 jle	 $LN5037@MenuProc

; 17466: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0d518	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0d51f	74 54		 je	 SHORT $LN1666@MenuProc

; 17467: 						if (HitDispNo == resultWndFontNo[0]) {

  0d521	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0d526	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?resultWndFontNo@@3PAHA ; resultWndFontNo
  0d52c	75 47		 jne	 SHORT $LN1666@MenuProc

; 17468: 							DeathAction(pActMenuWnd);

  0d52e	57		 push	 edi
  0d52f	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0d534	83 c4 04	 add	 esp, 4

; 17469: 							pActMenuWnd = NULL;

  0d537	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 17470: 							BattleResultWndFlag = FALSE;
; 17471: 							if (MapWmdFlagBak != TRUE) {

  0d541	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?MapWmdFlagBak@@3HA, 1 ; MapWmdFlagBak
  0d548	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  0d552	0f 84 fb fc ff
	ff		 je	 $LN5037@MenuProc

; 17472: 								play_se(203, 320, 240);

  0d558	68 f0 00 00 00	 push	 240			; 000000f0H
  0d55d	68 40 01 00 00	 push	 320			; 00000140H
  0d562	68 cb 00 00 00	 push	 203			; 000000cbH
  0d567	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0d56c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d572	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1666@MenuProc:

; 17473: 							}
; 17474: 						}
; 17475: 					}
; 17476: 					if (pActMenuWnd != NULL) {

  0d575	85 ff		 test	 edi, edi
  0d577	0f 84 d6 fc ff
	ff		 je	 $LN5037@MenuProc

; 17477: 						int color = FONT_PAL_WHITE;
; 17478: 						x = pActMenuWnd->x + 17;
; 17479: 						y = pActMenuWnd->y + 48;
; 17480: 						sprintf(moji, " ï¼¤  ï¼°  %+8d", battleResultMsg.resChr[0].exp);

  0d57d	ff 35 08 00 00
	00		 push	 DWORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A+8
  0d583	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  0d586	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d58c	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
  0d58f	83 c6 11	 add	 esi, 17			; 00000011H
  0d592	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JBEDPFPL@?5?$KD?D?5?5?$KD?P?5?5?$CF?$CL8d@
  0d597	50		 push	 eax
  0d598	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  0d59e	83 c7 30	 add	 edi, 48			; 00000030H
  0d5a1	e8 00 00 00 00	 call	 _sprintf

; 17481: 						StockFontBuffer(x, y, FONT_PRIO_FRONT, color, moji, 0);

  0d5a6	6a 00		 push	 0
  0d5a8	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d5ae	50		 push	 eax
  0d5af	6a 00		 push	 0
  0d5b1	6a 01		 push	 1
  0d5b3	57		 push	 edi
  0d5b4	56		 push	 esi
  0d5b5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17482: 						y += 28;
; 17483: 						sprintf(moji, " í©  ê³  %8d", battleResultMsg.resChr[1].exp);

  0d5ba	ff 35 10 00 00
	00		 push	 DWORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A+16
  0d5c0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d5c6	83 c7 1c	 add	 edi, 28			; 0000001cH
  0d5c9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EILMFHPP@?5?G?U?5?5?$LA?h?5?5?$CF8d@
  0d5ce	50		 push	 eax
  0d5cf	e8 00 00 00 00	 call	 _sprintf

; 17484: 						StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0);

  0d5d4	6a 00		 push	 0
  0d5d6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d5dc	50		 push	 eax
  0d5dd	6a 00		 push	 0
  0d5df	6a 01		 push	 1
  0d5e1	57		 push	 edi
  0d5e2	56		 push	 esi
  0d5e3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17485: 						resultWndFontNo[0] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, pActMenuWnd->y + 120, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  0d5e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d5ee	83 c4 48	 add	 esp, 72			; 00000048H
  0d5f1	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0d5f4	6a 02		 push	 2
  0d5f6	68 ba 65 00 00	 push	 26042			; 000065baH
  0d5fb	83 c0 78	 add	 eax, 120		; 00000078H
  0d5fe	6a 69		 push	 105			; 00000069H
  0d600	50		 push	 eax
  0d601	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0d604	ff 70 14	 push	 DWORD PTR [eax+20]
  0d607	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0d60c	83 c4 14	 add	 esp, 20			; 00000014H
  0d60f	a3 00 00 00 00	 mov	 DWORD PTR ?resultWndFontNo@@3PAHA, eax ; resultWndFontNo
  0d614	e9 46 fc ff ff	 jmp	 $LN1649@MenuProc
$LN1639@MenuProc:

; 17368: 		case 1:
; 17369: 			if (pActMenuWnd == NULL) {

  0d619	85 ff		 test	 edi, edi
  0d61b	0f 85 6d 00 00
	00		 jne	 $LN1640@MenuProc

; 17370: 				int flag = 0;
; 17371: 				pActMenuWnd = MakeWindowDisp(320 - 160, 240 - 120, 5, 6, CG_WND_TITLE_RESULT, 2);

  0d621	6a 02		 push	 2
  0d623	68 a2 65 00 00	 push	 26018			; 000065a2H
  0d628	6a 06		 push	 6
  0d62a	6a 05		 push	 5
  0d62c	6a 78		 push	 120			; 00000078H
  0d62e	68 a0 00 00 00	 push	 160			; 000000a0H
  0d633	33 f6		 xor	 esi, esi
  0d635	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  0d63a	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, eax ; pActMenuWnd
  0d63f	83 c4 18	 add	 esp, 24			; 00000018H

; 17372: 				for (i = 0; i < MENU_BTL_RESULT_0; i++) resultWndFontNo[i] = -2;

  0d642	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?resultWndFontNo@@3PAHA, -2 ; resultWndFontNo, fffffffeH

; 17373: 				for (i = 0; i < 4; i++) {

  0d64c	b8 06 00 00 00	 mov	 eax, OFFSET ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A+6
  0d651	b9 01 00 00 00	 mov	 ecx, 1
$LL392@MenuProc:

; 17374: 					if (battleResultMsg.resChr[i].levelUp == TRUE) flag = TRUE;

  0d656	66 39 08	 cmp	 WORD PTR [eax], cx
  0d659	0f 44 f1	 cmove	 esi, ecx
  0d65c	83 c0 08	 add	 eax, 8
  0d65f	3d 26 00 00 00	 cmp	 eax, OFFSET ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A+38
  0d664	7c f0		 jl	 SHORT $LL392@MenuProc

; 17375: 				}
; 17376: 				if (flag == TRUE) {
; 17377: 					play_se(211, 320, 240);
; 17378: 				}
; 17379: 				else {
; 17380: 					play_se(202, 320, 240);
; 17381: 				}
; 17382: 			}

  0d666	68 f0 00 00 00	 push	 240			; 000000f0H
  0d66b	b9 ca 00 00 00	 mov	 ecx, 202		; 000000caH
  0d670	83 fe 01	 cmp	 esi, 1
  0d673	b8 d3 00 00 00	 mov	 eax, 211		; 000000d3H
  0d678	0f 45 c1	 cmovne	 eax, ecx
  0d67b	68 40 01 00 00	 push	 320			; 00000140H
  0d680	50		 push	 eax
  0d681	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0d686	83 c4 0c	 add	 esp, 12			; 0000000cH
  0d689	e9 c5 fb ff ff	 jmp	 $LN5037@MenuProc
$LN1640@MenuProc:

; 17383: 			else {
; 17384: 				if (pActMenuWnd->hp > 0) {

  0d68e	83 7f 78 00	 cmp	 DWORD PTR [edi+120], 0
  0d692	0f 8e bb fb ff
	ff		 jle	 $LN5037@MenuProc

; 17385: 					if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0d698	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0d69f	74 54		 je	 SHORT $LN1648@MenuProc

; 17386: 						if (HitDispNo == resultWndFontNo[0]) {

  0d6a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0d6a6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?resultWndFontNo@@3PAHA ; resultWndFontNo
  0d6ac	75 47		 jne	 SHORT $LN1648@MenuProc

; 17387: 							DeathAction(pActMenuWnd);

  0d6ae	57		 push	 edi
  0d6af	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0d6b4	83 c4 04	 add	 esp, 4

; 17388: 							pActMenuWnd = NULL;

  0d6b7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd@@3PAUaction@@A, 0 ; pActMenuWnd

; 17389: 							BattleResultWndFlag = FALSE;
; 17390: 							if (MapWmdFlagBak != TRUE) {

  0d6c1	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?MapWmdFlagBak@@3HA, 1 ; MapWmdFlagBak
  0d6c8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag
  0d6d2	0f 84 7b fb ff
	ff		 je	 $LN5037@MenuProc

; 17391: 								play_se(203, 320, 240);

  0d6d8	68 f0 00 00 00	 push	 240			; 000000f0H
  0d6dd	68 40 01 00 00	 push	 320			; 00000140H
  0d6e2	68 cb 00 00 00	 push	 203			; 000000cbH
  0d6e7	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0d6ec	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d6f2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1648@MenuProc:

; 17392: 							}
; 17393: 						}
; 17394: 					}
; 17395: 					if (pActMenuWnd != NULL) {

  0d6f5	85 ff		 test	 edi, edi
  0d6f7	0f 84 56 fb ff
	ff		 je	 $LN5037@MenuProc

; 17396: 						int color;
; 17397: 						int flag, j;
; 17398: 						x = pActMenuWnd->x + 12;

  0d6fd	8b 77 18	 mov	 esi, DWORD PTR [edi+24]

; 17399: 						y = pActMenuWnd->y + 44;
; 17400: 						CenteringStr(pc.name, moji, CHAR_NAME_LEN);

  0d700	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d706	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
  0d709	83 c6 0c	 add	 esi, 12			; 0000000cH
  0d70c	6a 10		 push	 16			; 00000010H
  0d70e	50		 push	 eax
  0d70f	68 70 00 00 00	 push	 OFFSET ?pc@@3UPC@@A+112
  0d714	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  0d71a	83 c7 2c	 add	 edi, 44			; 0000002cH
  0d71d	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 17401: 						StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0);

  0d722	6a 00		 push	 0
  0d724	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d72a	50		 push	 eax
  0d72b	6a 00		 push	 0
  0d72d	6a 01		 push	 1
  0d72f	57		 push	 edi
  0d730	56		 push	 esi
  0d731	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0d736	83 c4 24	 add	 esp, 36			; 00000024H

; 17402: 						color = FONT_PAL_GRAY;
; 17403: 						if (battleResultMsg.resChr[0].levelUp == TRUE) {

  0d739	66 83 3d 06 00
	00 00 01	 cmp	 WORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A+6, 1
  0d741	75 1b		 jne	 SHORT $LN1650@MenuProc

; 17404: 							StockFontBuffer(x + 152, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "LvUp!", 0);

  0d743	6a 00		 push	 0
  0d745	68 00 00 00 00	 push	 OFFSET ??_C@_05GEIIADAH@LvUp?$CB@
  0d74a	6a 04		 push	 4
  0d74c	6a 01		 push	 1
  0d74e	8d 86 98 00 00
	00		 lea	 eax, DWORD PTR [esi+152]
  0d754	57		 push	 edi
  0d755	50		 push	 eax
  0d756	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0d75b	83 c4 18	 add	 esp, 24			; 00000018H
$LN1650@MenuProc:

; 17405: 						}
; 17406: 						sprintf(moji, "Exp %+5d", battleResultMsg.resChr[0].exp);

  0d75e	ff 35 08 00 00
	00		 push	 DWORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A+8
  0d764	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d76a	68 00 00 00 00	 push	 OFFSET ??_C@_08EEKBPDLC@Exp?5?$CF?$CL5d@
  0d76f	50		 push	 eax
  0d770	e8 00 00 00 00	 call	 _sprintf

; 17407: 						StockFontBuffer(x + 148 + 58, y, FONT_PRIO_FRONT, 0, moji, 0);

  0d775	6a 00		 push	 0
  0d777	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  0d77d	51		 push	 ecx
  0d77e	6a 00		 push	 0
  0d780	6a 01		 push	 1
  0d782	8d 86 ce 00 00
	00		 lea	 eax, DWORD PTR [esi+206]
  0d788	57		 push	 edi
  0d789	50		 push	 eax
  0d78a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17408: 						y += 20;

  0d78f	83 c7 14	 add	 edi, 20			; 00000014H
  0d792	83 c4 24	 add	 esp, 36			; 00000024H

; 17409: 						for (i = 0; i < 5; i++) {

  0d795	33 c0		 xor	 eax, eax
  0d797	89 bd 00 ba ff
	ff		 mov	 DWORD PTR _y$8$[ebp], edi
  0d79d	b9 65 00 00 00	 mov	 ecx, OFFSET ?pet@@3PAUPET@@A+101
  0d7a2	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR _i$29$[ebp], eax
  0d7a8	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR tv39245[ebp], ecx
  0d7ae	66 90		 npad	 2
$LL395@MenuProc:

; 17410: 							if (pet[i].useFlag == TRUE && (pc.selectPetNo[i] == TRUE || pc.ridePetNo == i)) {

  0d7b0	66 83 79 11 01	 cmp	 WORD PTR [ecx+17], 1
  0d7b5	0f 85 39 01 00
	00		 jne	 $LN393@MenuProc
  0d7bb	66 83 3c 45 ac
	00 00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[eax*2+172], 1
  0d7c4	74 0c		 je	 SHORT $LN1652@MenuProc
  0d7c6	39 05 18 51 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20760, eax
  0d7cc	0f 85 22 01 00
	00		 jne	 $LN393@MenuProc
$LN1652@MenuProc:

; 17411: 								if (pet[i].freeName[0] != NULL)

  0d7d2	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0d7d5	75 03		 jne	 SHORT $LN1654@MenuProc

; 17412: 									CenteringStr(pet[i].freeName, moji, PET_NAME_LEN);
; 17413: 								else
; 17414: 									CenteringStr(pet[i].name, moji, PET_NAME_LEN);

  0d7d7	83 c1 ef	 add	 ecx, -17		; ffffffefH
$LN1654@MenuProc:

; 17415: 								StockFontBuffer(x, y, FONT_PRIO_FRONT, 0, moji, 0);

  0d7da	6a 10		 push	 16			; 00000010H
  0d7dc	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d7e2	50		 push	 eax
  0d7e3	51		 push	 ecx
  0d7e4	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr
  0d7e9	6a 00		 push	 0
  0d7eb	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d7f1	50		 push	 eax
  0d7f2	6a 00		 push	 0
  0d7f4	6a 01		 push	 1
  0d7f6	57		 push	 edi
  0d7f7	56		 push	 esi
  0d7f8	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0d7fd	8b 8d f4 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$29$[ebp]
  0d803	83 c4 24	 add	 esp, 36			; 00000024H

; 17416: 								color = FONT_PAL_GRAY;
; 17417: 								flag = FALSE;

  0d806	33 d2		 xor	 edx, edx

; 17418: 								for (j = 1; j < RESULT_CHR_EXP; j++) {

  0d808	bf 01 00 00 00	 mov	 edi, 1
  0d80d	0f 1f 00	 npad	 3
$LL398@MenuProc:

; 17419: 									if (battleResultMsg.resChr[j].petNo == i) {

  0d810	0f bf 04 fd 04
	00 00 00	 movsx	 eax, WORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A[edi*8+4]
  0d818	3b c1		 cmp	 eax, ecx
  0d81a	0f 85 70 00 00
	00		 jne	 $LN396@MenuProc

; 17420: 										if (battleResultMsg.resChr[j].levelUp == TRUE) {

  0d820	66 83 3c fd 06
	00 00 00 01	 cmp	 WORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A[edi*8+6], 1
  0d829	75 20		 jne	 SHORT $LN1656@MenuProc

; 17421: 											StockFontBuffer(x + 152, y, FONT_PRIO_FRONT, FONT_PAL_YELLOW, "LvUp!", 0);

  0d82b	6a 00		 push	 0
  0d82d	68 00 00 00 00	 push	 OFFSET ??_C@_05GEIIADAH@LvUp?$CB@
  0d832	6a 04		 push	 4
  0d834	6a 01		 push	 1
  0d836	ff b5 00 ba ff
	ff		 push	 DWORD PTR _y$8$[ebp]
  0d83c	8d 86 98 00 00
	00		 lea	 eax, DWORD PTR [esi+152]
  0d842	50		 push	 eax
  0d843	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0d848	83 c4 18	 add	 esp, 24			; 00000018H
$LN1656@MenuProc:

; 17422: 										}
; 17423: 										sprintf(moji, "Exp %+5d", battleResultMsg.resChr[j].exp);

  0d84b	ff 34 fd 08 00
	00 00		 push	 DWORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A[edi*8+8]
  0d852	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d858	68 00 00 00 00	 push	 OFFSET ??_C@_08EEKBPDLC@Exp?5?$CF?$CL5d@
  0d85d	50		 push	 eax
  0d85e	e8 00 00 00 00	 call	 _sprintf

; 17424: 										StockFontBuffer(x + 148 + 58, y, FONT_PRIO_FRONT, 0, moji, 0);

  0d863	6a 00		 push	 0
  0d865	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d86b	50		 push	 eax
  0d86c	6a 00		 push	 0
  0d86e	6a 01		 push	 1
  0d870	ff b5 00 ba ff
	ff		 push	 DWORD PTR _y$8$[ebp]
  0d876	8d 86 ce 00 00
	00		 lea	 eax, DWORD PTR [esi+206]
  0d87c	50		 push	 eax
  0d87d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0d882	8b 8d f4 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$29$[ebp]
  0d888	83 c4 24	 add	 esp, 36			; 00000024H

; 17425: 										flag = TRUE;

  0d88b	ba 01 00 00 00	 mov	 edx, 1
$LN396@MenuProc:

; 17418: 								for (j = 1; j < RESULT_CHR_EXP; j++) {

  0d890	47		 inc	 edi
  0d891	83 ff 05	 cmp	 edi, 5
  0d894	0f 8c 76 ff ff
	ff		 jl	 $LL398@MenuProc

; 17426: 									}
; 17427: 								}
; 17428: 								if (flag == FALSE) {

  0d89a	85 d2		 test	 edx, edx
  0d89c	75 3b		 jne	 SHORT $LN5052@MenuProc

; 17429: 									sprintf(moji, "Exp %+4d", battleResultMsg.resChr[j].exp);

  0d89e	ff 34 fd 08 00
	00 00		 push	 DWORD PTR ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A[edi*8+8]
  0d8a5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0d8ab	68 00 00 00 00	 push	 OFFSET ??_C@_08EFGDJJIF@Exp?5?$CF?$CL4d@
  0d8b0	50		 push	 eax
  0d8b1	e8 00 00 00 00	 call	 _sprintf

; 17430: 									StockFontBuffer(x + 148 + 58, y, FONT_PRIO_FRONT, 0, "Exp    +0", 0);

  0d8b6	8b bd 00 ba ff
	ff		 mov	 edi, DWORD PTR _y$8$[ebp]
  0d8bc	8d 86 ce 00 00
	00		 lea	 eax, DWORD PTR [esi+206]
  0d8c2	6a 00		 push	 0
  0d8c4	68 00 00 00 00	 push	 OFFSET ??_C@_09MBHBIIFC@Exp?5?5?5?5?$CL0@
  0d8c9	6a 00		 push	 0
  0d8cb	6a 01		 push	 1
  0d8cd	57		 push	 edi
  0d8ce	50		 push	 eax
  0d8cf	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0d8d4	83 c4 24	 add	 esp, 36			; 00000024H
  0d8d7	eb 06		 jmp	 SHORT $LN1657@MenuProc
$LN5052@MenuProc:

; 17426: 									}
; 17427: 								}
; 17428: 								if (flag == FALSE) {

  0d8d9	8b bd 00 ba ff
	ff		 mov	 edi, DWORD PTR _y$8$[ebp]
$LN1657@MenuProc:
  0d8df	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR _i$29$[ebp]

; 17431: 								}
; 17432: 								y += 20;

  0d8e5	83 c7 14	 add	 edi, 20			; 00000014H
  0d8e8	8b 8d f8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39245[ebp]
  0d8ee	89 bd 00 ba ff
	ff		 mov	 DWORD PTR _y$8$[ebp], edi
$LN393@MenuProc:

; 17409: 						for (i = 0; i < 5; i++) {

  0d8f4	40		 inc	 eax
  0d8f5	81 c1 78 0b 00
	00		 add	 ecx, 2936		; 00000b78H
  0d8fb	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR _i$29$[ebp], eax
  0d901	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR tv39245[ebp], ecx
  0d907	83 f8 05	 cmp	 eax, 5
  0d90a	0f 8c a0 fe ff
	ff		 jl	 $LL395@MenuProc

; 17433: 							}
; 17434: 						}
; 17435: 						flag = FALSE;
; 17436: 						y = pActMenuWnd->y + 134;

  0d910	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd

; 17437: 						StockFontBuffer(x, y + 30, FONT_PRIO_FRONT, 0, "  ìì´í ï¼", 0);

  0d915	6a 00		 push	 0
  0d917	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OKFINFEF@?5?5?$LO?F?$MA?L?E?$NL?5?$KD?$LK@
  0d91c	6a 00		 push	 0
  0d91e	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  0d921	81 c7 86 00 00
	00		 add	 edi, 134		; 00000086H
  0d927	c7 85 f8 b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _flag$2$[ebp], 0
  0d931	6a 01		 push	 1
  0d933	8d 47 1e	 lea	 eax, DWORD PTR [edi+30]
  0d936	50		 push	 eax
  0d937	56		 push	 esi
  0d938	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0d93d	b8 2c 00 00 00	 mov	 eax, OFFSET ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A+44
  0d942	83 c4 18	 add	 esp, 24			; 00000018H
  0d945	89 85 fc b9 ff
	ff		 mov	 DWORD PTR tv39244[ebp], eax
  0d94b	0f 1f 44 00 00	 npad	 5
$LL401@MenuProc:

; 17441: 							if (battleResultMsg.item[i][0] != NULL) {

  0d950	80 38 00	 cmp	 BYTE PTR [eax], 0
  0d953	8d 4e 55	 lea	 ecx, DWORD PTR [esi+85]
  0d956	74 2d		 je	 SHORT $LN4076@MenuProc

; 17442: 								StockFontBuffer(x + 85, y + 30, FONT_PRIO_FRONT, 0, battleResultMsg.item[i], 0);

  0d958	6a 00		 push	 0
  0d95a	50		 push	 eax
  0d95b	6a 00		 push	 0
  0d95d	6a 01		 push	 1
  0d95f	8d 47 1e	 lea	 eax, DWORD PTR [edi+30]
  0d962	50		 push	 eax
  0d963	51		 push	 ecx
  0d964	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 17443: 								y += 22;
; 17444: 								flag = TRUE;

  0d969	8b 85 fc b9 ff
	ff		 mov	 eax, DWORD PTR tv39244[ebp]
  0d96f	8d 4e 55	 lea	 ecx, DWORD PTR [esi+85]
  0d972	ba 01 00 00 00	 mov	 edx, 1
  0d977	83 c4 18	 add	 esp, 24			; 00000018H
  0d97a	83 c7 16	 add	 edi, 22			; 00000016H
  0d97d	89 95 f8 b9 ff
	ff		 mov	 DWORD PTR _flag$2$[ebp], edx
  0d983	eb 06		 jmp	 SHORT $LN399@MenuProc
$LN4076@MenuProc:
  0d985	8b 95 f8 b9 ff
	ff		 mov	 edx, DWORD PTR _flag$2$[ebp]
$LN399@MenuProc:

; 17438: 						char itemName[128];
; 17439: 						memset(itemName, 0, 128);
; 17440: 						for (i = 0; i < 3; i++) {

  0d98b	83 c0 19	 add	 eax, 25			; 00000019H
  0d98e	89 85 fc b9 ff
	ff		 mov	 DWORD PTR tv39244[ebp], eax
  0d994	3d 77 00 00 00	 cmp	 eax, OFFSET ?battleResultMsg@@3UBATTLE_RESULT_MSG@@A+119
  0d999	7c b5		 jl	 SHORT $LL401@MenuProc

; 17445: 							}
; 17446: 						}
; 17447: 						if (flag == FALSE) {

  0d99b	85 d2		 test	 edx, edx
  0d99d	75 16		 jne	 SHORT $LN1659@MenuProc

; 17448: 							StockFontBuffer(x + 85, y + 30, FONT_PRIO_FRONT, 0, "ìì´íì ì»ì§ ëª»íììµëë¤ã", 0);

  0d99f	52		 push	 edx
  0d9a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DBCJKIIM@?$LO?F?$MA?L?E?$NL?$MA?$LL?5?$LO?r?A?v?5?$LI?x?G?O?$LP?$LE?$LN?$MA?$LE?O?$LE?Y?$KB?$KD@
  0d9a5	52		 push	 edx
  0d9a6	6a 01		 push	 1
  0d9a8	8d 47 1e	 lea	 eax, DWORD PTR [edi+30]
  0d9ab	50		 push	 eax
  0d9ac	51		 push	 ecx
  0d9ad	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0d9b2	83 c4 18	 add	 esp, 24			; 00000018H
$LN1659@MenuProc:

; 17449: 						}
; 17450: 						resultWndFontNo[0] = StockDispBuffer(((WINDOW_DISP *)pActMenuWnd->pYobi)->mx, pActMenuWnd->y + 216 + 30, DISP_PRIO_IME3, CG_CLOSE_BTN, 2);

  0d9b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd@@3PAUaction@@A ; pActMenuWnd
  0d9bb	6a 02		 push	 2
  0d9bd	68 ba 65 00 00	 push	 26042			; 000065baH
  0d9c2	6a 69		 push	 105			; 00000069H
  0d9c4	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0d9c7	05 f6 00 00 00	 add	 eax, 246		; 000000f6H
  0d9cc	50		 push	 eax
  0d9cd	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0d9d0	ff 70 14	 push	 DWORD PTR [eax+20]
  0d9d3	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0d9d8	83 c4 14	 add	 esp, 20			; 00000014H
  0d9db	a3 00 00 00 00	 mov	 DWORD PTR ?resultWndFontNo@@3PAHA, eax ; resultWndFontNo
  0d9e0	e9 7a f8 ff ff	 jmp	 $LN1649@MenuProc
$LN1671@MenuProc:

; 17577: 			else {
; 17578: 
; 17579: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17580: 				// ä¸»è§çªåå®¹
; 17581: 				if (MainTradeWndflag == true) {

  0d9e5	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?MainTradeWndflag@@3_NA, 1 ; MainTradeWndflag
  0d9ec	0f 85 23 20 00
	00		 jne	 $LN1673@MenuProc

; 17582: 					SecondTradeWndflag = false;

  0d9f2	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SecondTradeWndflag@@3_NA, 0 ; SecondTradeWndflag

; 17583: #endif
; 17584: 					if (pActMenuWnd4->hp > 0) {

  0d9f9	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  0d9fd	0f 8e e1 37 00
	00		 jle	 $LN1913@MenuProc

; 17585: 						//äº§çäº¤æä¸»è§çª
; 17586: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17587: 					//åä¸»è§çªæ¶æ¸é¤æ£è§è§çªPetAction
; 17588: 						if (SecondActPet != NULL) {

  0da03	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SecondActPet@@3PAUaction@@A
  0da08	85 c0		 test	 eax, eax
  0da0a	74 19		 je	 SHORT $LN1676@MenuProc

; 17589: 							DeathAction(SecondActPet);

  0da0c	50		 push	 eax
  0da0d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17590: 							SecondActPet = NULL;

  0da12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActMenuWnd4@@3PAUaction@@A ; pActMenuWnd4
  0da18	83 c4 04	 add	 esp, 4
  0da1b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondActPet@@3PAUaction@@A, 0
$LN1676@MenuProc:

; 17591: 						}
; 17592: 						StockDispBuffer(((WINDOW_DISP *)pActMenuWnd4->pYobi)->mx, ((WINDOW_DISP *)pActMenuWnd4->pYobi)->my - 20, DISP_PRIO_MENU, CG_TRADE_WND, 1);

  0da25	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0da28	6a 01		 push	 1
  0da2a	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_TRADE_WND@@3HA ; CG_TRADE_WND
  0da30	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0da33	6a 68		 push	 104			; 00000068H
  0da35	83 e8 14	 sub	 eax, 20			; 00000014H
  0da38	50		 push	 eax
  0da39	ff 71 14	 push	 DWORD PTR [ecx+20]
  0da3c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0da41	83 c4 14	 add	 esp, 20			; 00000014H

; 17593: #endif
; 17594: 						// ä»¥ä¸ä¸ºæ»é¼ å·¦é®è¢«æä¸æ¶ Start
; 17595: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0da44	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0da4b	0f 84 2b 02 00
	00		 je	 $LN4856@MenuProc

; 17596: 							// å¤çì·¨ìé® Start
; 17597: 							//å¤çæä¸ì·¨ìé®
; 17598: 							if (HitDispNo == tradeWndFontNo[1]) {

  0da51	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0da56	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+4
  0da5c	0f 85 65 00 00
	00		 jne	 $LN1678@MenuProc

; 17599: 								//å³é­äº¤æè§çª
; 17600: 								MenuToggleFlag ^= JOY_CTRL_T;

  0da62	81 35 00 00 00
	00 00 00 40 00	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H

; 17601: 								//è§çªå³é­é³æ
; 17602: 								play_se(203, 320, 240);

  0da6c	68 f0 00 00 00	 push	 240			; 000000f0H
  0da71	68 40 01 00 00	 push	 320			; 00000140H
  0da76	68 cb 00 00 00	 push	 203			; 000000cbH
  0da7b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 17603: 								sprintf(buffer, "W|%s|%s", opp_sockfd, opp_name);

  0da80	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  0da85	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  0da8a	8d 85 50 ed ff
	ff		 lea	 eax, DWORD PTR _buffer$43[ebp]
  0da90	68 00 00 00 00	 push	 OFFSET ??_C@_07BMJINPJG@W?$HM?$CFs?$HM?$CFs@
  0da95	50		 push	 eax
  0da96	e8 00 00 00 00	 call	 _sprintf

; 17604: 								//éåºì·¨ìè®¯æ¯ç»Serveréç¥å¯¹æ¹
; 17605: 								lssproto_TD_send(sockfd, buffer);

  0da9b	8d 85 50 ed ff
	ff		 lea	 eax, DWORD PTR _buffer$43[ebp]
  0daa1	50		 push	 eax
  0daa2	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0daa8	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send
  0daad	83 c4 24	 add	 esp, 36			; 00000024H

; 17606: 								tradeStatus = 0;

  0dab0	33 c0		 xor	 eax, eax
  0dab2	66 a3 00 00 00
	00		 mov	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus

; 17607: 								tradeInit();

  0dab8	e8 00 00 00 00	 call	 ?tradeInit@@YAXXZ	; tradeInit

; 17608: 								pc.trade_confirm = 1;

  0dabd	c7 05 80 a1 00
	00 01 00 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, 1
$LN1678@MenuProc:

; 17609: 							}
; 17610: 							// å¤çì·¨ìé® End						
; 17611: 
; 17612: 
; 17613: 							// å¤ç Lock ã íì¸é® Start
; 17614: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17615: 						//ä¸»è§çªä¸æ£è§è§çªå±ç¨Lockè·íì¸function
; 17616: 							LockAndOkfunction();

  0dac7	e8 00 00 00 00	 call	 ?LockAndOkfunction@@YAXXZ ; LockAndOkfunction

; 17617: 							// å¤ç Lock ã íì¸é® End
; 17618: 
; 17619: 							//ä¸»å¯è§çªåæ¢é®
; 17620: 							if (HitDispNo == tradeWndFontNo[21]) {

  0dacc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0dad1	3b 05 54 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+84
  0dad7	75 56		 jne	 SHORT $LN433@MenuProc

; 17621: 								MainTradeWndflag = false;
; 17622: 								SecondTradeWndflag = true;

  0dad9	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0dae0	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA, xmm0
  0dae7	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?MainTradeWndflag@@3_NA, 0 ; MainTradeWndflag
  0daee	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+16, xmm0
  0daf5	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?SecondTradeWndflag@@3_NA, 1 ; SecondTradeWndflag
  0dafc	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+32, xmm0
  0db03	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+48, xmm0
  0db0a	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+64, xmm0
  0db11	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?tradeWndFontNo@@3PAHA+80, xmm0

; 17623: 								//andy_add 20030610
; 17624: 								for (i = 0; i < MENU_TRADE_0; i++) tradeWndFontNo[i] = -2;
; 17625: 								for (i = 0; i < 6; i++) SecondtradeWndFontNo[i] = -2;

  0db19	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0db20	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?SecondtradeWndFontNo@@3PAHA, xmm0
  0db27	66 0f d6 05 10
	00 00 00	 movq	 QWORD PTR ?SecondtradeWndFontNo@@3PAHA+16, xmm0
$LN433@MenuProc:

; 17626: 
; 17627: 							}
; 17628: 							//å¯¹æ¹ç©ååä¸å·å¨é®
; 17629: 							if (HitDispNo == tradeWndFontNo[18]) {

  0db2f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0db34	3b 05 48 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+72
  0db3a	75 25		 jne	 SHORT $LN4850@MenuProc

; 17630: 								if (drag1Y >= 67)

  0db3c	83 3d 00 00 00
	00 43		 cmp	 DWORD PTR ?drag1Y@@3HA, 67 ; drag1Y, 00000043H
  0db43	7c 12		 jl	 SHORT $LN3665@MenuProc

; 17631: 									drag1Y -= 4;

  0db45	a1 00 00 00 00	 mov	 eax, DWORD PTR ?drag1Y@@3HA ; drag1Y
  0db4a	83 e8 04	 sub	 eax, 4
  0db4d	a3 00 00 00 00	 mov	 DWORD PTR ?drag1Y@@3HA, eax ; drag1Y
  0db52	83 f8 43	 cmp	 eax, 67			; 00000043H

; 17632: 								if (drag1Y < 67)

  0db55	7d 0a		 jge	 SHORT $LN4850@MenuProc
$LN3665@MenuProc:

; 17633: 									drag1Y = 67;

  0db57	c7 05 00 00 00
	00 43 00 00 00	 mov	 DWORD PTR ?drag1Y@@3HA, 67 ; drag1Y, 00000043H
$LN4850@MenuProc:

; 17634: 							}
; 17635: 							//å¯¹æ¹ç©ååä¸å·å¨é®
; 17636: 							if (HitDispNo == tradeWndFontNo[19]) {

  0db61	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0db66	3b 05 4c 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+76
  0db6c	75 2a		 jne	 SHORT $LN1685@MenuProc

; 17637: 								if (drag1Y <= 151)

  0db6e	81 3d 00 00 00
	00 97 00 00 00	 cmp	 DWORD PTR ?drag1Y@@3HA, 151 ; drag1Y, 00000097H
  0db78	7f 14		 jg	 SHORT $LN3664@MenuProc

; 17638: 									drag1Y += 4;

  0db7a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?drag1Y@@3HA ; drag1Y
  0db7f	83 c0 04	 add	 eax, 4
  0db82	a3 00 00 00 00	 mov	 DWORD PTR ?drag1Y@@3HA, eax ; drag1Y
  0db87	3d 97 00 00 00	 cmp	 eax, 151		; 00000097H

; 17639: 								if (drag1Y > 151)

  0db8c	7e 0a		 jle	 SHORT $LN1685@MenuProc
$LN3664@MenuProc:

; 17640: 									drag1Y = 151;

  0db8e	c7 05 00 00 00
	00 97 00 00 00	 mov	 DWORD PTR ?drag1Y@@3HA, 151 ; drag1Y, 00000097H
$LN1685@MenuProc:

; 17641: 							}
; 17642: 							//ææ¹ç©ååä¸å·å¨é®
; 17643: 							if (HitDispNo == tradeWndFontNo[15]) {

  0db98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0db9d	3b 05 3c 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+60
  0dba3	75 2a		 jne	 SHORT $LN4851@MenuProc

; 17644: 								if (drag2Y >= 257)

  0dba5	81 3d 00 00 00
	00 01 01 00 00	 cmp	 DWORD PTR ?drag2Y@@3HA, 257 ; drag2Y, 00000101H
  0dbaf	7c 14		 jl	 SHORT $LN3663@MenuProc

; 17645: 									drag2Y -= 4;

  0dbb1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?drag2Y@@3HA ; drag2Y
  0dbb6	83 e8 04	 sub	 eax, 4
  0dbb9	a3 00 00 00 00	 mov	 DWORD PTR ?drag2Y@@3HA, eax ; drag2Y
  0dbbe	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H

; 17646: 								if (drag2Y < 257)

  0dbc3	7d 0a		 jge	 SHORT $LN4851@MenuProc
$LN3663@MenuProc:

; 17647: 									drag2Y = 257;

  0dbc5	c7 05 00 00 00
	00 01 01 00 00	 mov	 DWORD PTR ?drag2Y@@3HA, 257 ; drag2Y, 00000101H
$LN4851@MenuProc:

; 17648: 							}
; 17649: 							//ææ¹ç©ååä¸å·å¨é®
; 17650: 							if (HitDispNo == tradeWndFontNo[16]) {

  0dbcf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0dbd4	3b 05 40 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+64
  0dbda	75 2a		 jne	 SHORT $LN1691@MenuProc

; 17651: 								if (drag2Y <= 341)

  0dbdc	81 3d 00 00 00
	00 55 01 00 00	 cmp	 DWORD PTR ?drag2Y@@3HA, 341 ; drag2Y, 00000155H
  0dbe6	7f 14		 jg	 SHORT $LN3662@MenuProc

; 17652: 									drag2Y += 4;

  0dbe8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?drag2Y@@3HA ; drag2Y
  0dbed	83 c0 04	 add	 eax, 4
  0dbf0	a3 00 00 00 00	 mov	 DWORD PTR ?drag2Y@@3HA, eax ; drag2Y
  0dbf5	3d 55 01 00 00	 cmp	 eax, 341		; 00000155H

; 17653: 								if (drag2Y > 341)

  0dbfa	7e 0a		 jle	 SHORT $LN1691@MenuProc
$LN3662@MenuProc:

; 17654: 									drag2Y = 341;

  0dbfc	c7 05 00 00 00
	00 55 01 00 00	 mov	 DWORD PTR ?drag2Y@@3HA, 341 ; drag2Y, 00000155H
$LN1691@MenuProc:

; 17655: 							}
; 17656: 							//ææ¹ç©åææ³å¯å¨
; 17657: 							if (HitDispNo == tradeWndFontNo[20]) {

  0dc06	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0dc0b	3b 05 50 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+80
  0dc11	75 1a		 jne	 SHORT $LN4852@MenuProc

; 17658: 								if (!dragflag1) {

  0dc13	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?dragflag1@@3_NA, 0 ; dragflag1
  0dc1a	75 11		 jne	 SHORT $LN4852@MenuProc

; 17659: 									tmpdrag1Y = drag1Y;

  0dc1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?drag1Y@@3HA ; drag1Y
  0dc21	a3 00 00 00 00	 mov	 DWORD PTR ?tmpdrag1Y@@3HA, eax ; tmpdrag1Y

; 17660: 									dragflag1 = true;

  0dc26	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?dragflag1@@3_NA, 1 ; dragflag1
$LN4852@MenuProc:

; 17661: 								}
; 17662: 							}
; 17663: 
; 17664: 							//å¯¹æ¹ç©åææ³å¯å¨
; 17665: 							if (HitDispNo == tradeWndFontNo[17]) {

  0dc2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0dc32	3b 05 44 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+68
  0dc38	75 1a		 jne	 SHORT $LN4854@MenuProc

; 17666: 								if (!dragflag2) {

  0dc3a	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?dragflag2@@3_NA, 0 ; dragflag2
  0dc41	75 11		 jne	 SHORT $LN4854@MenuProc

; 17667: 									tmpdrag2Y = drag2Y;

  0dc43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?drag2Y@@3HA ; drag2Y
  0dc48	a3 00 00 00 00	 mov	 DWORD PTR ?tmpdrag2Y@@3HA, eax ; tmpdrag2Y

; 17668: 									dragflag2 = true;

  0dc4d	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?dragflag2@@3_NA, 1 ; dragflag2
$LN4854@MenuProc:

; 17669: 								}
; 17670: 
; 17671: 							}
; 17672: #ifdef _TRADETALKWND				// (ä¸å¯å¼) Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 17673: 							//ææ³é®
; 17674: 							if (HitDispNo == tradeWndFontNo[14])

  0dc54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0dc59	3b 05 38 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+56
  0dc5f	b8 01 00 00 00	 mov	 eax, 1
  0dc64	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?talkwndflag@@3_NA ; talkwndflag
  0dc6b	0f 44 c8	 cmove	 ecx, eax
  0dc6e	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR tv37639[ebp], ecx
  0dc74	88 0d 00 00 00
	00		 mov	 BYTE PTR ?talkwndflag@@3_NA, cl ; talkwndflag
  0dc7a	eb 0b		 jmp	 SHORT $LN1696@MenuProc
$LN4856@MenuProc:

; 17593: #endif
; 17594: 						// ä»¥ä¸ä¸ºæ»é¼ å·¦é®è¢«æä¸æ¶ Start
; 17595: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0dc7c	a0 00 00 00 00	 mov	 al, BYTE PTR ?talkwndflag@@3_NA ; talkwndflag
  0dc81	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv37639[ebp], eax
$LN1696@MenuProc:

; 17675: 								talkwndflag = true;
; 17676: 							//å³é­é®
; 17677: #endif
; 17678: #endif
; 17679: 						}
; 17680: 						// ä»¥ä¸ä¸ºæ»é¼ å·¦é®è¢«æä¸æ¶ End
; 17681: 
; 17682: 
; 17683: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17684: 					//ææ¹ææ³é®ççº¿éå¶
; 17685: 						if (dragflag1 == true &&
; 17686: 							(tmpdrag1Y - mouse.crickLeftDownPoint.y + mouse.nowPoint.y) <= 151 &&

  0dc87	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?dragflag1@@3_NA, 1 ; dragflag1
  0dc8e	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+12
  0dc94	75 29		 jne	 SHORT $LN1697@MenuProc
  0dc96	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tmpdrag1Y@@3HA ; tmpdrag1Y
  0dc9c	2b d1		 sub	 edx, ecx
  0dc9e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?drag1Y@@3HA ; drag1Y
  0dca4	03 15 04 00 00
	00		 add	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  0dcaa	8d 42 bd	 lea	 eax, DWORD PTR [edx-67]
  0dcad	83 f8 54	 cmp	 eax, 84			; 00000054H
  0dcb0	0f 46 ca	 cmovbe	 ecx, edx
  0dcb3	89 0d 00 00 00
	00		 mov	 DWORD PTR ?drag1Y@@3HA, ecx ; drag1Y
  0dcb9	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+12
$LN1697@MenuProc:

; 17687: 							(tmpdrag1Y - mouse.crickLeftDownPoint.y + mouse.nowPoint.y) >= 67) {
; 17688: 							drag1Y = tmpdrag1Y - mouse.crickLeftDownPoint.y + mouse.nowPoint.y;
; 17689: 						}
; 17690: 						//å¯¹æ¹ææ³é®ççº¿éå¶
; 17691: 						if (dragflag2 == true &&
; 17692: 							(tmpdrag2Y - mouse.crickLeftDownPoint.y + mouse.nowPoint.y) <= 341 &&

  0dcbf	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?dragflag2@@3_NA, 1 ; dragflag2
  0dcc6	75 26		 jne	 SHORT $LN1698@MenuProc
  0dcc8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tmpdrag2Y@@3HA ; tmpdrag2Y
  0dcce	2b d1		 sub	 edx, ecx
  0dcd0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?drag2Y@@3HA ; drag2Y
  0dcd6	03 15 04 00 00
	00		 add	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  0dcdc	8d 82 ff fe ff
	ff		 lea	 eax, DWORD PTR [edx-257]
  0dce2	83 f8 54	 cmp	 eax, 84			; 00000054H
  0dce5	0f 46 ca	 cmovbe	 ecx, edx
  0dce8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?drag2Y@@3HA, ecx ; drag2Y
$LN1698@MenuProc:

; 17693: 							(tmpdrag2Y - mouse.crickLeftDownPoint.y + mouse.nowPoint.y) >= 257) {
; 17694: 							drag2Y = tmpdrag2Y - mouse.crickLeftDownPoint.y + mouse.nowPoint.y;
; 17695: 						}
; 17696: #ifdef _TRADETALKWND				// (ä¸å¯å¼) Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 17697: 						//å¯¹è¯æ¹æ¡ææ³ä½ç§»
; 17698: 						if (talkwndflag == true) {

  0dcee	80 bd f8 b9 ff
	ff 01		 cmp	 BYTE PTR tv37639[ebp], 1
  0dcf5	75 14		 jne	 SHORT $LN1699@MenuProc

; 17699: 							talkwndx = mouse.nowPoint.x;

  0dcf7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A
  0dcfc	a3 00 00 00 00	 mov	 DWORD PTR ?talkwndx@@3HA, eax ; talkwndx

; 17700: 							talkwndy = mouse.nowPoint.y;

  0dd01	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  0dd06	a3 00 00 00 00	 mov	 DWORD PTR ?talkwndy@@3HA, eax ; talkwndy
$LN1699@MenuProc:

; 17701: 						}
; 17702: 						if (mouse.onceState & MOUSE_RIGHT_CRICK)

  0dd0b	8b 0d 2c 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+44
  0dd11	ba 00 00 00 00	 mov	 edx, 0
  0dd16	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?tradetalkwndflag@@3_NA ; tradetalkwndflag
  0dd1d	f6 c1 02	 test	 cl, 2
  0dd20	0f 45 c2	 cmovne	 eax, edx
  0dd23	a2 00 00 00 00	 mov	 BYTE PTR ?tradetalkwndflag@@3_NA, al ; tradetalkwndflag

; 17703: 							tradetalkwndflag = false;
; 17704: #endif
; 17705: #endif
; 17706: 						// å¤çå® ç©éåå·¦é® Start
; 17707: 						// å¤çå® ç©éåå·¦é®
; 17708: 						if (HitDispNo == tradeWndFontNo[2]) {

  0dd28	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0dd2d	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+8
  0dd33	0f 85 84 00 00
	00		 jne	 $LN4857@MenuProc

; 17709: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0dd39	f6 c1 01	 test	 cl, 1
  0dd3c	0f 84 7b 00 00
	00		 je	 $LN4857@MenuProc

; 17710: 								tradeWndBtnFlag[2] = TRUE;
; 17711: 								int i = 0;

  0dd42	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
  0dd48	c7 05 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+8, 1
$LL434@MenuProc:

; 17712: 								while (1) {
; 17713: 									tradePetIndex++;

  0dd52	41		 inc	 ecx
  0dd53	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradePetIndex@@3HA, ecx
  0dd59	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR $T20[ebp], ecx
  0dd5f	83 f9 05	 cmp	 ecx, 5

; 17714: 									if (tradePetIndex >= 5) tradePetIndex = 0;

  0dd62	7c 0e		 jl	 SHORT $LN1703@MenuProc
  0dd64	33 c9		 xor	 ecx, ecx
  0dd66	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradePetIndex@@3HA, ecx
  0dd6c	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR $T20[ebp], ecx
$LN1703@MenuProc:

; 17715: 									if (pet[tradePetIndex].useFlag != NULL
; 17716: 										&& pc.ridePetNo != tradePetIndex)

  0dd72	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  0dd78	66 83 b8 76 00
	00 00 00	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 0
  0dd80	74 0e		 je	 SHORT $LN1704@MenuProc
  0dd82	8b 85 f8 b9 ff
	ff		 mov	 eax, DWORD PTR $T20[ebp]
  0dd88	39 05 18 51 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20760, eax
  0dd8e	75 11		 jne	 SHORT $LN435@MenuProc
$LN1704@MenuProc:

; 17717: 										break;
; 17718: 									if ((i++) > 5) {

  0dd90	8b c2		 mov	 eax, edx
  0dd92	42		 inc	 edx
  0dd93	83 f8 05	 cmp	 eax, 5
  0dd96	7e ba		 jle	 SHORT $LL434@MenuProc

; 17719: 										tradePetIndex = -1;

  0dd98	83 c9 ff	 or	 ecx, -1
  0dd9b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradePetIndex@@3HA, ecx
$LN435@MenuProc:

; 17720: 										break;
; 17721: 									}
; 17722: 								}
; 17723: 								if (pActPet3 != NULL) {

  0dda1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet3@@3PAUaction@@A
  0dda6	85 c0		 test	 eax, eax
  0dda8	74 19		 je	 SHORT $LN1706@MenuProc

; 17724: 									DeathAction(pActPet3);

  0ddaa	50		 push	 eax
  0ddab	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0ddb0	83 c4 04	 add	 esp, 4

; 17725: 									pActPet3 = NULL;

  0ddb3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet3@@3PAUaction@@A, 0
$LN4857@MenuProc:

; 17726: 								}
; 17727: 
; 17728: 							}
; 17729: 						}
; 17730: 						// å¤çå® ç©éåå·¦é® End
; 17731: 
; 17732: 						// å¤çå® ç©éåå³é® Start
; 17733: 						// å¤çå® ç©éåå³é®
; 17734: 						if (HitDispNo == tradeWndFontNo[3]) {

  0ddbd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
$LN1706@MenuProc:
  0ddc3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0ddc8	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+12
  0ddce	0f 85 8f 00 00
	00		 jne	 $LN1712@MenuProc

; 17735: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0ddd4	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0dddb	0f 84 82 00 00
	00		 je	 $LN1712@MenuProc

; 17736: 								tradeWndBtnFlag[3] = TRUE;

  0dde1	c7 05 0c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+12, 1

; 17737: 								int i = 0;

  0ddeb	33 d2		 xor	 edx, edx
  0dded	0f 1f 00	 npad	 3
$LL436@MenuProc:

; 17738: 								while (1) {
; 17739: 									tradePetIndex--;

  0ddf0	83 e9 01	 sub	 ecx, 1
  0ddf3	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradePetIndex@@3HA, ecx
  0ddf9	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR $T19[ebp], ecx

; 17740: 									if (tradePetIndex < 0) tradePetIndex = 4;

  0ddff	79 11		 jns	 SHORT $LN1709@MenuProc
  0de01	b9 04 00 00 00	 mov	 ecx, 4
  0de06	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradePetIndex@@3HA, ecx
  0de0c	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR $T19[ebp], ecx
$LN1709@MenuProc:

; 17741: 									if (pet[tradePetIndex].useFlag != NULL
; 17742: 										&& pc.ridePetNo != tradePetIndex)

  0de12	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  0de18	66 83 b8 76 00
	00 00 00	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 0
  0de20	74 0e		 je	 SHORT $LN1710@MenuProc
  0de22	8b 85 f8 b9 ff
	ff		 mov	 eax, DWORD PTR $T19[ebp]
  0de28	39 05 18 51 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20760, eax
  0de2e	75 11		 jne	 SHORT $LN437@MenuProc
$LN1710@MenuProc:

; 17743: 										break;
; 17744: 									if ((i++) > 5) {

  0de30	8b c2		 mov	 eax, edx
  0de32	42		 inc	 edx
  0de33	83 f8 05	 cmp	 eax, 5
  0de36	7e b8		 jle	 SHORT $LL436@MenuProc

; 17745: 										tradePetIndex = -1;

  0de38	83 c9 ff	 or	 ecx, -1
  0de3b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradePetIndex@@3HA, ecx
$LN437@MenuProc:

; 17746: 										break;
; 17747: 									}
; 17748: 								}
; 17749: 								if (pActPet3 != NULL) {

  0de41	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet3@@3PAUaction@@A
  0de46	85 c0		 test	 eax, eax
  0de48	74 19		 je	 SHORT $LN1712@MenuProc

; 17750: 									DeathAction(pActPet3);

  0de4a	50		 push	 eax
  0de4b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17751: 									pActPet3 = NULL;

  0de50	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
  0de56	83 c4 04	 add	 esp, 4
  0de59	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet3@@3PAUaction@@A, 0
$LN1712@MenuProc:

; 17752: 								}
; 17753: 
; 17754: 							}
; 17755: 						}
; 17756: 
; 17757: 						// å¤çå® ç©éåå³é® End
; 17758: 
; 17759: 						// å¤çéé¢å¢å é® Start
; 17760: 						if (HitDispNo == tradeWndFontNo[4]) {

  0de63	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0de68	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+16
  0de6e	0f 85 40 01 00
	00		 jne	 $LN1713@MenuProc

; 17761: 							if (mouse.onceState & MOUSE_LEFT_CRICK_UP && tradeWndBtnFlag[4] == TRUE)

  0de74	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  0de7b	74 1c		 je	 SHORT $LN1715@MenuProc
  0de7d	83 3d 10 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+16, 1
  0de84	0f 85 b0 00 00
	00		 jne	 $LN4859@MenuProc

; 17762: 								tradeWndBtnFlag[4] = FALSE;

  0de8a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+16, 0

; 17763: 							if (tradeWndBtnFlag[4] == TRUE) {

  0de94	e9 a1 00 00 00	 jmp	 $LN4859@MenuProc
$LN1715@MenuProc:
  0de99	83 3d 10 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+16, 1
  0dea0	0f 85 94 00 00
	00		 jne	 $LN4859@MenuProc

; 17764: 								// æä¸å¢å æ¶å°Focusè¿ç»ChatBuffer
; 17765: 								GetKeyInputFocus(&MyChatBuffer);

  0dea6	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0deab	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 17766: 								// è§çªæ¶ç­æ¶è¿åè®¾å®
; 17767: 								Tradeflag = false;
; 17768: 								tradeWndDropGold += tradeWndDropGoldInc;
; 17769: 								tradeWndDropGoldCnt++;

  0deb0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradeWndDropGoldCnt@@3HA
  0deb5	83 c4 04	 add	 esp, 4
  0deb8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tradeWndDropGold@@3HA
  0debe	40		 inc	 eax
  0debf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradeWndDropGoldInc@@3HA
  0dec5	03 d1		 add	 edx, ecx
  0dec7	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Tradeflag@@3_NA, 0 ; Tradeflag
  0dece	89 15 00 00 00
	00		 mov	 DWORD PTR ?tradeWndDropGold@@3HA, edx
  0ded4	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldCnt@@3HA, eax
  0ded9	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 17770: 								if (tradeWndDropGoldCnt >= 30) {

  0dedc	7c 2f		 jl	 SHORT $LN1720@MenuProc

; 17771: 									tradeWndDropGoldCnt = 0;

  0dede	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldCnt@@3HA, 0

; 17772: 									if (tradeWndDropGoldInc == 0)

  0dee8	85 c9		 test	 ecx, ecx
  0deea	75 0c		 jne	 SHORT $LN1718@MenuProc

; 17773: 										tradeWndDropGoldInc = 1;

  0deec	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldInc@@3HA, 1
  0def6	eb 15		 jmp	 SHORT $LN1720@MenuProc
$LN1718@MenuProc:

; 17774: 									else {
; 17775: 										tradeWndDropGoldInc *= 5;

  0def8	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]

; 17776: 										if (tradeWndDropGoldInc > 10000)

  0defb	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0df00	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  0df05	0f 4f c1	 cmovg	 eax, ecx
  0df08	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldInc@@3HA, eax
$LN1720@MenuProc:

; 17777: 											tradeWndDropGoldInc = 10000;
; 17778: 									}
; 17779: 								}
; 17780: 								//éé¢ä¸éç¡®è®¤
; 17781: 								if (tradeWndDropGold >= pc.gold) {

  0df0d	8b 0d 60 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+96
  0df13	3b d1		 cmp	 edx, ecx
  0df15	7c 1d		 jl	 SHORT $LN4858@MenuProc

; 17782: 									tradeWndDropGold = pc.gold;
; 17783: 									play_se(220, 320, 240);

  0df17	68 f0 00 00 00	 push	 240			; 000000f0H
  0df1c	68 40 01 00 00	 push	 320			; 00000140H
  0df21	68 dc 00 00 00	 push	 220			; 000000dcH
  0df26	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradeWndDropGold@@3HA, ecx
  0df2c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0df31	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4858@MenuProc:

; 17784: 								}
; 17785: 							}
; 17786: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0df34	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
$LN4859@MenuProc:
  0df3a	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0df41	0f 84 77 00 00
	00		 je	 $LN1714@MenuProc

; 17787: 								tradeWndDropGold++;

  0df47	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradeWndDropGold@@3HA
  0df4c	8b 0d 60 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+96
  0df52	40		 inc	 eax
  0df53	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGold@@3HA, eax

; 17788: 								if (tradeWndDropGold >= pc.gold) {

  0df58	68 f0 00 00 00	 push	 240			; 000000f0H
  0df5d	68 40 01 00 00	 push	 320			; 00000140H
  0df62	3b c1		 cmp	 eax, ecx
  0df64	7c 1b		 jl	 SHORT $LN1723@MenuProc

; 17789: 									tradeWndDropGold = pc.gold;
; 17790: 									play_se(220, 320, 240);

  0df66	68 dc 00 00 00	 push	 220			; 000000dcH
  0df6b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradeWndDropGold@@3HA, ecx
  0df71	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 17791: 								}

  0df76	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
  0df7c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0df7f	eb 3d		 jmp	 SHORT $LN1714@MenuProc
$LN1723@MenuProc:

; 17792: 								else {
; 17793: 									tradeWndDropGoldInc = 0;
; 17794: 									tradeWndDropGoldCnt = 0;
; 17795: 									tradeWndBtnFlag[4] = TRUE;
; 17796: 									play_se(217, 320, 240);

  0df81	68 d9 00 00 00	 push	 217			; 000000d9H
  0df86	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldInc@@3HA, 0
  0df90	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldCnt@@3HA, 0
  0df9a	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+16, 1
  0dfa4	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 17797: 								}
; 17798: 							}
; 17799: 						}

  0dfa9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
  0dfaf	83 c4 0c	 add	 esp, 12			; 0000000cH
  0dfb2	eb 0a		 jmp	 SHORT $LN1714@MenuProc
$LN1713@MenuProc:

; 17800: 						else
; 17801: 							tradeWndBtnFlag[4] = FALSE;

  0dfb4	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+16, 0
$LN1714@MenuProc:

; 17802: 						// å¤çéé¢å¢å é® End
; 17803: 
; 17804: 						// å¤çéé¢åå°é® Start
; 17805: 						if (HitDispNo == tradeWndFontNo[5]) {

  0dfbe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0dfc3	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+20
  0dfc9	0f 85 3c 01 00
	00		 jne	 $LN1725@MenuProc

; 17806: 							if (mouse.onceState & MOUSE_LEFT_CRICK_UP && tradeWndBtnFlag[5] == TRUE)

  0dfcf	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  0dfd6	74 1c		 je	 SHORT $LN1727@MenuProc
  0dfd8	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+20, 1
  0dfdf	0f 85 ae 00 00
	00		 jne	 $LN1733@MenuProc

; 17807: 								tradeWndBtnFlag[5] = FALSE;

  0dfe5	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+20, 0

; 17808: 							if (tradeWndBtnFlag[5] == TRUE) {

  0dfef	e9 9f 00 00 00	 jmp	 $LN1733@MenuProc
$LN1727@MenuProc:
  0dff4	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+20, 1
  0dffb	0f 85 92 00 00
	00		 jne	 $LN1733@MenuProc

; 17809: 								// æä¸åå°æ¶å°Focusè¿ç»ChatBuffer
; 17810: 								GetKeyInputFocus(&MyChatBuffer);

  0e001	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0e006	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 17811: 								// è§çªæ¶ç­æ¶è¿åè®¾å®
; 17812: 								Tradeflag = false;
; 17813: 								tradeWndDropGold -= tradeWndDropGoldInc;
; 17814: 								tradeWndDropGoldCnt++;

  0e00b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradeWndDropGoldCnt@@3HA
  0e010	83 c4 04	 add	 esp, 4
  0e013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradeWndDropGold@@3HA
  0e019	40		 inc	 eax
  0e01a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tradeWndDropGoldInc@@3HA
  0e020	2b ca		 sub	 ecx, edx
  0e022	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Tradeflag@@3_NA, 0 ; Tradeflag
  0e029	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradeWndDropGold@@3HA, ecx
  0e02f	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldCnt@@3HA, eax
  0e034	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 17815: 								if (tradeWndDropGoldCnt >= 30) {

  0e037	7c 2f		 jl	 SHORT $LN1732@MenuProc

; 17816: 									tradeWndDropGoldCnt = 0;

  0e039	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldCnt@@3HA, 0

; 17817: 									if (tradeWndDropGoldInc == 0) {

  0e043	85 d2		 test	 edx, edx
  0e045	75 0c		 jne	 SHORT $LN1730@MenuProc

; 17818: 										tradeWndDropGoldInc = 1;

  0e047	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldInc@@3HA, 1

; 17819: 									}

  0e051	eb 15		 jmp	 SHORT $LN1732@MenuProc
$LN1730@MenuProc:

; 17820: 									else {
; 17821: 										tradeWndDropGoldInc *= 5;

  0e053	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]

; 17822: 										if (tradeWndDropGoldInc > 10000)

  0e056	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  0e05b	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  0e060	0f 4f c2	 cmovg	 eax, edx
  0e063	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldInc@@3HA, eax
$LN1732@MenuProc:

; 17823: 											tradeWndDropGoldInc = 10000;
; 17824: 									}
; 17825: 								}
; 17826: 								if (tradeWndDropGold < 0) {

  0e068	85 c9		 test	 ecx, ecx
  0e06a	79 21		 jns	 SHORT $LN4860@MenuProc

; 17827: 									tradeWndDropGold = 0;
; 17828: 									play_se(220, 320, 240);

  0e06c	68 f0 00 00 00	 push	 240			; 000000f0H
  0e071	68 40 01 00 00	 push	 320			; 00000140H
  0e076	68 dc 00 00 00	 push	 220			; 000000dcH
  0e07b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGold@@3HA, 0
  0e085	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0e08a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4860@MenuProc:

; 17829: 								}
; 17830: 							}
; 17831: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0e08d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
$LN1733@MenuProc:
  0e093	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0e09a	0f 84 75 00 00
	00		 je	 $LN1726@MenuProc

; 17832: 								tradeWndDropGold--;

  0e0a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradeWndDropGold@@3HA
  0e0a5	48		 dec	 eax
  0e0a6	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGold@@3HA, eax

; 17833: 								if (tradeWndDropGold <= 0) {

  0e0ab	68 f0 00 00 00	 push	 240			; 000000f0H
  0e0b0	68 40 01 00 00	 push	 320			; 00000140H
  0e0b5	85 c0		 test	 eax, eax
  0e0b7	7f 1f		 jg	 SHORT $LN1735@MenuProc

; 17834: 									tradeWndDropGold = 0;
; 17835: 									play_se(220, 320, 240);

  0e0b9	68 dc 00 00 00	 push	 220			; 000000dcH
  0e0be	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGold@@3HA, 0
  0e0c8	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 17836: 								}

  0e0cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
  0e0d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  0e0d6	eb 3d		 jmp	 SHORT $LN1726@MenuProc
$LN1735@MenuProc:

; 17837: 								else {
; 17838: 									tradeWndDropGoldInc = 0;
; 17839: 									tradeWndDropGoldCnt = 0;
; 17840: 									tradeWndBtnFlag[5] = TRUE;
; 17841: 									play_se(217, 320, 240);

  0e0d8	68 d9 00 00 00	 push	 217			; 000000d9H
  0e0dd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldInc@@3HA, 0
  0e0e7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldCnt@@3HA, 0
  0e0f1	c7 05 14 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+20, 1
  0e0fb	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 17842: 								}
; 17843: 							}
; 17844: 						}

  0e100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
  0e106	83 c4 0c	 add	 esp, 12			; 0000000cH
  0e109	eb 0a		 jmp	 SHORT $LN1726@MenuProc
$LN1725@MenuProc:

; 17845: 						else
; 17846: 							tradeWndBtnFlag[5] = FALSE;

  0e10b	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+20, 0
$LN1726@MenuProc:

; 17847: 						// å¤çéé¢åå°é® End
; 17848: 
; 17849: 						// å¤çéé¢æ¾ç½®é® Start
; 17850: 						if (HitDispNo == tradeWndFontNo[6]) {

  0e115	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0e11a	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+24
  0e120	0f 85 3e 01 00
	00		 jne	 $LN1737@MenuProc

; 17851: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  0e126	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0e12d	0f 84 5f 00 00
	00		 je	 $LN1741@MenuProc

; 17852: 								// æä¸æ¾ç½®æ¶å°Focusè¿ç»ChatBuffer
; 17853: 								GetKeyInputFocus(&MyChatBuffer);

  0e133	68 00 00 00 00	 push	 OFFSET ?MyChatBuffer@@3USTR_BUFFER@@A ; MyChatBuffer
  0e138	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus
  0e13d	83 c4 04	 add	 esp, 4

; 17854: 								// è§çªæ¶ç­æ¶è¿åè®¾å®
; 17855: 								Tradeflag = false;

  0e140	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Tradeflag@@3_NA, 0 ; Tradeflag

; 17856: 								if (tradeWndDropGold > 0 && eventWarpSendFlag == FALSE) {

  0e147	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tradeWndDropGold@@3HA, 0
  0e14e	7e 25		 jle	 SHORT $LN1740@MenuProc
  0e150	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?eventWarpSendFlag@@3FA, 0 ; eventWarpSendFlag
  0e158	75 1b		 jne	 SHORT $LN1740@MenuProc

; 17857: 									tradeWndBtnFlag[6] = TRUE;
; 17858: 									play_se(217, 320, 240);

  0e15a	68 f0 00 00 00	 push	 240			; 000000f0H
  0e15f	68 40 01 00 00	 push	 320			; 00000140H
  0e164	c7 05 18 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+24, 1
  0e16e	68 d9 00 00 00	 push	 217			; 000000d9H

; 17859: 								}

  0e173	eb 0f		 jmp	 SHORT $LN5143@MenuProc
$LN1740@MenuProc:

; 17860: 								else
; 17861: 									play_se(220, 320, 240);

  0e175	68 f0 00 00 00	 push	 240			; 000000f0H
  0e17a	68 40 01 00 00	 push	 320			; 00000140H
  0e17f	68 dc 00 00 00	 push	 220			; 000000dcH
$LN5143@MenuProc:

; 17862: 							}
; 17863: 							if (mouse.onceState & MOUSE_LEFT_CRICK_UP && tradeWndBtnFlag[6] == TRUE) {

  0e184	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0e189	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
  0e18f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1741@MenuProc:
  0e192	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  0e199	0f 84 cf 00 00
	00		 je	 $LN5144@MenuProc
  0e19f	83 3d 18 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+24, 1
  0e1a6	0f 85 c2 00 00
	00		 jne	 $LN5144@MenuProc

; 17864: 								if (tradeStatus != 1)	return;

  0e1ac	66 83 3d 00 00
	00 00 01	 cmp	 WORD PTR ?tradeStatus@@3FA, 1 ; tradeStatus
  0e1b4	0f 85 4c 31 00
	00		 jne	 $LN1966@MenuProc

; 17865: 								if (pc.trade_confirm == 2 || pc.trade_confirm == 4) return;

  0e1ba	8b 15 80 a1 00
	00		 mov	 edx, DWORD PTR ?pc@@3UPC@@A+41344
  0e1c0	83 fa 02	 cmp	 edx, 2
  0e1c3	0f 84 3d 31 00
	00		 je	 $LN1966@MenuProc
  0e1c9	83 fa 04	 cmp	 edx, 4
  0e1cc	0f 84 34 31 00
	00		 je	 $LN1966@MenuProc

; 17866: 								tradeWndBtnFlag[6] = FALSE;
; 17867: 								int TradeGoldIndex = 0;
; 17868: 
; 17869: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17870: 								if ((tradeList[21].data == -1)) {

  0e1d2	83 3d fc 40 00
	00 ff		 cmp	 DWORD PTR ?tradeList@@3PAUtradelist@@A+16636, -1
  0e1d9	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+24, 0
  0e1e3	0f 85 8b 00 00
	00		 jne	 $LN1738@MenuProc

; 17871: 									tradeList[21].data = tradeWndDropGold;

  0e1e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradeWndDropGold@@3HA

; 17872: 									tradeList[21].kind = 'G';
; 17873: 									TradeGoldIndex = 3;
; 17874: 								}
; 17875: #endif
; 17876: 
; 17877: 								if (TradeGoldIndex != 0) {
; 17878: #ifdef _CHANGETRADERULE		   // (ä¸å¯å¼) Syu ADD äº¤æè§åä¿®è®¢
; 17879: 									TradeBtnflag = true;
; 17880: #endif
; 17881: 									play_se(212, 320, 240);

  0e1ee	68 f0 00 00 00	 push	 240			; 000000f0H
  0e1f3	68 40 01 00 00	 push	 320			; 00000140H
  0e1f8	68 d4 00 00 00	 push	 212			; 000000d4H
  0e1fd	a3 fc 40 00 00	 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A+16636, eax
  0e202	c6 05 f8 40 00
	00 47		 mov	 BYTE PTR ?tradeList@@3PAUtradelist@@A+16632, 71 ; 00000047H
  0e209	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?TradeBtnflag@@3_NA, 1 ; TradeBtnflag
  0e210	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 17882: 									tradeWndDropGoldSend = tradeWndDropGold;

  0e215	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradeWndDropGold@@3HA

; 17883: 									sprintf(buffer, "T|%s|%s|G|%d|%d", opp_sockfd, opp_name, TradeGoldIndex, tradeWndDropGoldSend);

  0e21a	50		 push	 eax
  0e21b	6a 03		 push	 3
  0e21d	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  0e222	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  0e227	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldSend@@3HA, eax
  0e22c	8d 85 50 ed ff
	ff		 lea	 eax, DWORD PTR _buffer$43[ebp]
  0e232	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PCKDKFGL@T?$HM?$CFs?$HM?$CFs?$HMG?$HM?$CFd?$HM?$CFd@
  0e237	50		 push	 eax
  0e238	e8 00 00 00 00	 call	 _sprintf

; 17884: 									lssproto_TD_send(sockfd, buffer);

  0e23d	8d 85 50 ed ff
	ff		 lea	 eax, DWORD PTR _buffer$43[ebp]
  0e243	50		 push	 eax
  0e244	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0e24a	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send

; 17885: 									tradeWndDropGold = 0;

  0e24f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?tradePetIndex@@3HA
  0e255	83 c4 2c	 add	 esp, 44			; 0000002cH
  0e258	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGold@@3HA, 0
  0e262	eb 0a		 jmp	 SHORT $LN5144@MenuProc
$LN1737@MenuProc:

; 17886: 								}
; 17887: 							}
; 17888: 						}
; 17889: 						else
; 17890: 							tradeWndBtnFlag[6] = FALSE;

  0e264	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+24, 0
$LN5144@MenuProc:

; 17891: 						// å¤çéé¢æ¾ç½®é® End
; 17892: 
; 17893: 						// å¤çå® ç©æ¾ç½®é® Start		
; 17894: 						if (HitDispNo == tradeWndFontNo[7]) {

  0e26e	8b 15 80 a1 00
	00		 mov	 edx, DWORD PTR ?pc@@3UPC@@A+41344
$LN1738@MenuProc:
  0e274	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  0e279	3b 05 1c 00 00
	00		 cmp	 eax, DWORD PTR ?tradeWndFontNo@@3PAHA+28
  0e27f	0f 85 9d 02 00
	00		 jne	 $LN4862@MenuProc

; 17895: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17896: 							tradeWndBtnFlag[7] = TRUE;
; 17897: #endif
; 17898: 							if (mouse.onceState & MOUSE_LEFT_CRICK_UP) {

  0e285	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  0e28c	c7 05 1c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+28, 1
  0e296	0f 84 a4 02 00
	00		 je	 $LN1760@MenuProc

; 17899: 								if (tradeStatus != 1)	return;

  0e29c	66 83 3d 00 00
	00 00 01	 cmp	 WORD PTR ?tradeStatus@@3FA, 1 ; tradeStatus
  0e2a4	0f 85 5c 30 00
	00		 jne	 $LN1966@MenuProc

; 17900: 								if (pc.trade_confirm == 2 || pc.trade_confirm == 4) return;

  0e2aa	83 fa 02	 cmp	 edx, 2
  0e2ad	0f 84 53 30 00
	00		 je	 $LN1966@MenuProc
  0e2b3	83 fa 04	 cmp	 edx, 4
  0e2b6	0f 84 4a 30 00
	00		 je	 $LN1966@MenuProc

; 17901: 
; 17902: 								if (pet[tradePetIndex].useFlag &&  pc.ridePetNo != tradePetIndex) {

  0e2bc	69 c1 78 0b 00
	00		 imul	 eax, ecx, 2936
  0e2c2	89 85 d8 b9 ff
	ff		 mov	 DWORD PTR tv38394[ebp], eax
  0e2c8	66 83 b8 76 00
	00 00 00	 cmp	 WORD PTR ?pet@@3PAUPET@@A[eax+118], 0
  0e2d0	0f 84 4c 02 00
	00		 je	 $LN4862@MenuProc
  0e2d6	39 0d 18 51 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20760, ecx
  0e2dc	0f 84 40 02 00
	00		 je	 $LN4862@MenuProc

; 17903: 									if (pet[tradePetIndex].freeName[0] != NULL)

  0e2e2	80 b8 65 00 00
	00 00		 cmp	 BYTE PTR ?pet@@3PAUPET@@A[eax+101], 0
  0e2e9	8d 90 65 00 00
	00		 lea	 edx, DWORD PTR ?pet@@3PAUPET@@A[eax+101]
  0e2ef	74 1e		 je	 SHORT $LN1754@MenuProc

; 17904: 										strcpy(tradePet[0].name, pet[tradePetIndex].freeName);

  0e2f1	b8 54 00 00 00	 mov	 eax, OFFSET ?tradePet@@3PAUPET@@A+84
  0e2f6	2b c2		 sub	 eax, edx
  0e2f8	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv39237[ebp], eax
  0e2fe	8b f0		 mov	 esi, eax
$LL2025@MenuProc:
  0e300	8a 02		 mov	 al, BYTE PTR [edx]
  0e302	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0e305	88 44 16 ff	 mov	 BYTE PTR [esi+edx-1], al
  0e309	84 c0		 test	 al, al
  0e30b	75 f3		 jne	 SHORT $LL2025@MenuProc
  0e30d	eb 22		 jmp	 SHORT $LN1755@MenuProc
$LN1754@MenuProc:

; 17905: 									else
; 17906: 										strcpy(tradePet[0].name, pet[tradePetIndex].name);

  0e30f	8d 90 54 00 00
	00		 lea	 edx, DWORD PTR ?pet@@3PAUPET@@A[eax+84]
  0e315	b8 54 00 00 00	 mov	 eax, OFFSET ?tradePet@@3PAUPET@@A+84
  0e31a	2b c2		 sub	 eax, edx
  0e31c	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv39236[ebp], eax
  0e322	8b f0		 mov	 esi, eax
$LL2026@MenuProc:
  0e324	8a 02		 mov	 al, BYTE PTR [edx]
  0e326	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0e329	88 44 16 ff	 mov	 BYTE PTR [esi+edx-1], al
  0e32d	84 c0		 test	 al, al
  0e32f	75 f3		 jne	 SHORT $LL2026@MenuProc
$LN1755@MenuProc:

; 17907: 									tradePet[0].level = pet[tradePetIndex].level;

  0e331	8b 95 d8 b9 ff
	ff		 mov	 edx, DWORD PTR tv38394[ebp]

; 17908: 									tradePet[0].atk = pet[tradePetIndex].atk;
; 17909: 									tradePet[0].def = pet[tradePetIndex].def;
; 17910: 									tradePet[0].quick = pet[tradePetIndex].quick;
; 17911: 									tradePet[0].graNo = pet[tradePetIndex].graNo;
; 17912: 									tradePet[0].trn = pet[tradePetIndex].trn;
; 17913: 									tradePet[0].maxHp = pet[tradePetIndex].maxHp;
; 17914: 
; 17915: 									tradePet[0].index = tradePetIndex;

  0e337	89 0d 00 00 00
	00		 mov	 DWORD PTR ?tradePet@@3PAUPET@@A, ecx
  0e33d	8b 82 20 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+32]
  0e343	a3 20 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+32, eax
  0e348	8b 82 24 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+36]
  0e34e	a3 24 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+36, eax
  0e353	8b 82 28 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+40]
  0e359	a3 28 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+40, eax
  0e35e	8b 82 2c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+44]
  0e364	a3 2c 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+44, eax
  0e369	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+4]
  0e36f	a3 04 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+4, eax
  0e374	8b 82 48 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+72]
  0e37a	a3 48 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+72, eax
  0e37f	8b 82 0c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+12]
  0e385	a3 0c 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+12, eax

; 17916: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17917: 									pet[tradePetIndex].useFlag = NULL;

  0e38a	33 c0		 xor	 eax, eax
  0e38c	66 89 82 76 00
	00 00		 mov	 WORD PTR ?pet@@3PAUPET@@A[edx+118], ax

; 17918: 									if (pActPet3)

  0e393	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet3@@3PAUaction@@A
  0e398	85 c0		 test	 eax, eax
  0e39a	74 13		 je	 SHORT $LN1756@MenuProc

; 17919: 									{
; 17920: 										DeathAction(pActPet3);

  0e39c	50		 push	 eax
  0e39d	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  0e3a2	83 c4 04	 add	 esp, 4

; 17921: 										pActPet3 = NULL;

  0e3a5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet3@@3PAUaction@@A, 0
$LN1756@MenuProc:

; 17922: 									}
; 17923: #endif
; 17924: 
; 17925: 
; 17926: 									DeathAction(pActPet4);

  0e3af	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet4@@3PAUaction@@A
  0e3b5	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 17927: 									pActPet4 = NULL;
; 17928: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17929: 									tradeList[tradePetIndex + 16].data = tradePetIndex;

  0e3ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradePetIndex@@3HA
  0e3bf	83 c4 04	 add	 esp, 4
  0e3c2	69 d0 18 03 00
	00		 imul	 edx, eax, 792
  0e3c8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet4@@3PAUaction@@A, 0
  0e3d2	89 82 84 31 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[edx+12676], eax

; 17930: 									tradeList[tradePetIndex + 16].kind = 'P';
; 17931: 									strcpy(tradeList[tradePetIndex + 16].name, pet[tradePetIndex].name);

  0e3d8	69 c0 78 0b 00
	00		 imul	 eax, eax, 2936
  0e3de	c6 82 80 31 00
	00 50		 mov	 BYTE PTR ?tradeList@@3PAUtradelist@@A[edx+12672], 80 ; 00000050H
  0e3e5	89 85 d8 b9 ff
	ff		 mov	 DWORD PTR tv38392[ebp], eax
  0e3eb	8d b0 54 00 00
	00		 lea	 esi, DWORD PTR ?pet@@3PAUPET@@A[eax+84]
  0e3f1	b8 88 31 00 00	 mov	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+12680
  0e3f6	2b c6		 sub	 eax, esi
  0e3f8	89 b5 f8 b9 ff
	ff		 mov	 DWORD PTR tv39464[ebp], esi
  0e3fe	03 c2		 add	 eax, edx
  0e400	8b ce		 mov	 ecx, esi
  0e402	8b f0		 mov	 esi, eax
$LL2027@MenuProc:
  0e404	8a 01		 mov	 al, BYTE PTR [ecx]
  0e406	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0e409	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  0e40d	84 c0		 test	 al, al
  0e40f	75 f3		 jne	 SHORT $LL2027@MenuProc

; 17932: 									tradeList[tradePetIndex + 16].level = pet[tradePetIndex].level;

  0e411	8b 8d d8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv38392[ebp]

; 17933: 									tradeList[tradePetIndex + 16].trns = pet[tradePetIndex].trn;
; 17934: #ifdef _SHOW_FUSION
; 17935: 									tradeList[tradePetIndex + 16].fusion = pet[tradePetIndex].fusion;
; 17936: #endif									
; 17937: 
; 17938: 									if (pet[tradePetIndex].freeName[0] != NULL)

  0e417	80 b9 65 00 00
	00 00		 cmp	 BYTE PTR ?pet@@3PAUPET@@A[ecx+101], 0
  0e41e	8b 81 20 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+32]
  0e424	89 82 88 34 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[edx+13448], eax
  0e42a	8b 81 48 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+72]
  0e430	89 82 8c 34 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[edx+13452], eax
  0e436	8b 81 4c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+76]
  0e43c	89 82 94 34 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[edx+13460], eax
  0e442	8d 81 65 00 00
	00		 lea	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+101]
  0e448	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv39459[ebp], eax
  0e44e	8d 92 88 33 00
	00		 lea	 edx, DWORD PTR ?tradeList@@3PAUtradelist@@A[edx+13192]
  0e454	74 19		 je	 SHORT $LN1757@MenuProc

; 17939: 										strcpy(tradeList[tradePetIndex + 16].freename, pet[tradePetIndex].freeName);

  0e456	8b c8		 mov	 ecx, eax
  0e458	2b d0		 sub	 edx, eax
  0e45a	66 0f 1f 44 00
	00		 npad	 6
$LL2028@MenuProc:
  0e460	8a 01		 mov	 al, BYTE PTR [ecx]
  0e462	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0e465	88 44 11 ff	 mov	 BYTE PTR [ecx+edx-1], al
  0e469	84 c0		 test	 al, al
  0e46b	75 f3		 jne	 SHORT $LL2028@MenuProc
  0e46d	eb 07		 jmp	 SHORT $LN1758@MenuProc
$LN1757@MenuProc:

; 17940: 									else
; 17941: 										strcpy(tradeList[tradePetIndex + 16].freename, "");// change fix é²æ­¢æªæ¹åçå® ç©æ¾ç¤ºåºä¸ä¸ä¸ªä¸¢æå® ç©çæ¹åbug

  0e46f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0e474	88 02		 mov	 BYTE PTR [edx], al
$LN1758@MenuProc:

; 17942: #endif
; 17943: 
; 17944: 									if (tradeStatus) {

  0e476	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?tradeStatus@@3FA, 0 ; tradeStatus
  0e47e	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0e484	0f 84 98 00 00
	00		 je	 $LN4862@MenuProc

; 17945: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17946: 										//å¢å éåºæ¬²äº¤æå® ç©çæè½ãååãæ´æ¹å
; 17947: 										sprintf(buffer2, "%s|%s|%s|%s|%s|%s|%s|%s|%s",

  0e48a	69 0d 00 00 00
	00 e6 02 00 00	 imul	 ecx, DWORD PTR ?tradePetIndex@@3HA, 742
  0e494	ff b5 dc b9 ff
	ff		 push	 DWORD PTR tv39459[ebp]
  0e49a	ff b5 f8 b9 ff
	ff		 push	 DWORD PTR tv39464[ebp]
  0e4a0	8d 81 84 02 00
	00		 lea	 eax, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[ecx+644]
  0e4a6	50		 push	 eax
  0e4a7	8d 81 1a 02 00
	00		 lea	 eax, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[ecx+538]
  0e4ad	50		 push	 eax
  0e4ae	8d 81 b0 01 00
	00		 lea	 eax, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[ecx+432]
  0e4b4	50		 push	 eax
  0e4b5	8d 81 46 01 00
	00		 lea	 eax, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[ecx+326]
  0e4bb	50		 push	 eax
  0e4bc	8d 81 dc 00 00
	00		 lea	 eax, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[ecx+220]
  0e4c2	50		 push	 eax
  0e4c3	8d 81 72 00 00
	00		 lea	 eax, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[ecx+114]
  0e4c9	50		 push	 eax
  0e4ca	8d 81 08 00 00
	00		 lea	 eax, DWORD PTR ?petSkill@@3PAY06UPET_SKILL@@A[ecx+8]
  0e4d0	50		 push	 eax
  0e4d1	8d 85 50 dc ff
	ff		 lea	 eax, DWORD PTR _buffer2$35[ebp]
  0e4d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IIOLHDHO@?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs?$HM?$CFs@
  0e4dc	50		 push	 eax
  0e4dd	e8 00 00 00 00	 call	 _sprintf

; 17948: 											petSkill[tradePetIndex][0].name,
; 17949: 											petSkill[tradePetIndex][1].name,
; 17950: 											petSkill[tradePetIndex][2].name,
; 17951: 											petSkill[tradePetIndex][3].name,
; 17952: 											petSkill[tradePetIndex][4].name,
; 17953: 											petSkill[tradePetIndex][5].name,
; 17954: 											petSkill[tradePetIndex][6].name,
; 17955: 											pet[tradePetIndex].name,
; 17956: 											pet[tradePetIndex].freeName
; 17957: 										);
; 17958: 										sprintf(buffer, "T|%s|%s|P|3|%d|%s", opp_sockfd, opp_name, tradePetIndex, buffer2);

  0e4e2	8d 85 50 dc ff
	ff		 lea	 eax, DWORD PTR _buffer2$35[ebp]
  0e4e8	50		 push	 eax
  0e4e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?tradePetIndex@@3HA
  0e4ef	8d 85 50 ed ff
	ff		 lea	 eax, DWORD PTR _buffer$43[ebp]
  0e4f5	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  0e4fa	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  0e4ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OKAJJOLE@T?$HM?$CFs?$HM?$CFs?$HMP?$HM3?$HM?$CFd?$HM?$CFs@
  0e504	50		 push	 eax
  0e505	e8 00 00 00 00	 call	 _sprintf
  0e50a	83 c4 44	 add	 esp, 68			; 00000044H

; 17959: #endif
; 17960: 										lssproto_TD_send(sockfd, buffer);

  0e50d	8d 85 50 ed ff
	ff		 lea	 eax, DWORD PTR _buffer$43[ebp]
  0e513	50		 push	 eax
  0e514	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0e51a	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send
  0e51f	83 c4 08	 add	 esp, 8
$LN4862@MenuProc:

; 17961: 									}
; 17962: 								}
; 17963: 							}
; 17964: 						}
; 17965: 						// å¤çå® ç©æ¾ç½®é® End
; 17966: 
; 17967: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17968: 					//æ»é¼ å·¦é®æ¾æì·¨ìææææ³ææ 
; 17969: 						if (mouse.onceState & MOUSE_LEFT_CRICK_UP) {

  0e522	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  0e529	74 15		 je	 SHORT $LN1760@MenuProc

; 17970: 							dragflag1 = false;

  0e52b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?dragflag1@@3_NA, 0 ; dragflag1

; 17971: 							dragflag2 = false;

  0e532	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?dragflag2@@3_NA, 0 ; dragflag2

; 17972: #ifdef _TRADETALKWND				// (ä¸å¯å¼) Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 17973: 							talkwndflag = false;

  0e539	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?talkwndflag@@3_NA, 0 ; talkwndflag
$LN1760@MenuProc:

; 17974: #endif
; 17975: 						}
; 17976: #endif
; 17977: 						//æªè¢«æä¸çé®å¨é¨è¿å
; 17978: 						for (i = 2; i <= 8; i++) {

  0e540	8b 15 28 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+40
  0e546	b8 08 00 00 00	 mov	 eax, OFFSET ?tradeWndBtnFlag@@3PAHA+8
  0e54b	0f 1f 44 00 00	 npad	 5
$LL440@MenuProc:

; 17979: 							if (mouse.state & MOUSE_LEFT_CRICK && tradeWndBtnFlag[i] == TRUE)

  0e550	f6 c2 01	 test	 dl, 1
  0e553	74 0c		 je	 SHORT $LN1761@MenuProc
  0e555	83 38 01	 cmp	 DWORD PTR [eax], 1
  0e558	75 07		 jne	 SHORT $LN1761@MenuProc

; 17980: 								tradeWndBtnFlag[i] = TRUE;

  0e55a	b9 01 00 00 00	 mov	 ecx, 1
  0e55f	eb 02		 jmp	 SHORT $LN438@MenuProc
$LN1761@MenuProc:

; 17981: 							else
; 17982: 								tradeWndBtnFlag[i] = FALSE;

  0e561	33 c9		 xor	 ecx, ecx
$LN438@MenuProc:

; 17974: #endif
; 17975: 						}
; 17976: #endif
; 17977: 						//æªè¢«æä¸çé®å¨é¨è¿å
; 17978: 						for (i = 2; i <= 8; i++) {

  0e563	89 08		 mov	 DWORD PTR [eax], ecx
  0e565	83 c0 04	 add	 eax, 4
  0e568	3d 20 00 00 00	 cmp	 eax, OFFSET ?tradeWndBtnFlag@@3PAHA+32
  0e56d	7e e1		 jle	 SHORT $LL440@MenuProc

; 17983: 						}
; 17984: 						// äº§çä¸»è§çªåé¶ä»¶
; 17985: 						if (pActMenuWnd4 != NULL) {

  0e56f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd4@@3PAUaction@@A ; pActMenuWnd4
  0e574	85 c0		 test	 eax, eax
  0e576	0f 84 26 11 00
	00		 je	 $LN1816@MenuProc

; 17986: 							// åå¾è§çªåºåX , Yåº§æ 
; 17987: 							x = pActMenuWnd4->x;
; 17988: 							y = pActMenuWnd4->y;
; 17989: 							// ä¸ªäººéé¢æå¤§å¼æ¾ç¤º
; 17990: 
; 17991: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 17992: #ifdef _TRADETALKWND				// (ä¸å¯å¼) Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 17993: 						//å¯¹è¯æ¡åå®¹
; 17994: 							if (tradetalkwndflag != false) {

  0e57c	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?tradetalkwndflag@@3_NA, 0 ; tradetalkwndflag
  0e583	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  0e586	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  0e589	89 b5 08 ba ff
	ff		 mov	 DWORD PTR _x$3$[ebp], esi
  0e58f	89 bd 04 ba ff
	ff		 mov	 DWORD PTR _y$11$[ebp], edi
  0e595	0f 84 85 00 00
	00		 je	 $LN1764@MenuProc

; 17995: 								for (i = 3; i >= 0; i--) {

  0e59b	bf 3c 00 00 00	 mov	 edi, 60			; 0000003cH
  0e5a0	be 00 03 00 00	 mov	 esi, OFFSET ?talkmsg@@3PAY0BAA@DA+768
  0e5a5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL443@MenuProc:

; 17996: 									sprintf(moji, "%s", talkmsg[i]);

  0e5b0	56		 push	 esi
  0e5b1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e5b7	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0e5bc	50		 push	 eax
  0e5bd	e8 00 00 00 00	 call	 _sprintf

; 17997: 									StockFontBuffer(talkwndx - 154, talkwndy - 26 + i * 20, FONT_PRIO_AFRONT, FONT_PAL_YELLOW, moji, 0);

  0e5c2	6a 00		 push	 0
  0e5c4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e5ca	50		 push	 eax
  0e5cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?talkwndy@@3HA ; talkwndy
  0e5d0	83 c0 e6	 add	 eax, -26		; ffffffe6H
  0e5d3	6a 04		 push	 4
  0e5d5	03 c7		 add	 eax, edi
  0e5d7	6a 02		 push	 2
  0e5d9	50		 push	 eax
  0e5da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?talkwndx@@3HA ; talkwndx
  0e5df	05 66 ff ff ff	 add	 eax, -154		; ffffff66H
  0e5e4	50		 push	 eax
  0e5e5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0e5ea	81 ee 00 01 00
	00		 sub	 esi, 256		; 00000100H
  0e5f0	83 c4 24	 add	 esp, 36			; 00000024H
  0e5f3	83 c7 ec	 add	 edi, -20		; ffffffecH
  0e5f6	81 fe 00 00 00
	00		 cmp	 esi, OFFSET ?talkmsg@@3PAY0BAA@DA ; talkmsg
  0e5fc	7d b2		 jge	 SHORT $LL443@MenuProc

; 17998: 								}
; 17999: 								tradeWndFontNo[14] = StockDispBuffer(talkwndx, talkwndy, DISP_PRIO_BOX3, CG_TRADE_TALK_WND, 2);

  0e5fe	6a 02		 push	 2
  0e600	68 ee 66 00 00	 push	 26350			; 000066eeH
  0e605	6a 6f		 push	 111			; 0000006fH
  0e607	ff 35 00 00 00
	00		 push	 DWORD PTR ?talkwndy@@3HA ; talkwndy
  0e60d	ff 35 00 00 00
	00		 push	 DWORD PTR ?talkwndx@@3HA ; talkwndx
  0e613	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0e618	83 c4 14	 add	 esp, 20			; 00000014H
  0e61b	a3 38 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+56, eax
$LN1764@MenuProc:

; 18000: 							}
; 18001: #endif						
; 18002: 							int ShowPoint;
; 18003: 							int j = 0;
; 18004: 							//ææ¹è¦æ¾ç¤ºçèµ·å§ä½ç½®
; 18005: 							ShowPoint = (drag2Y - 257) / 4;

  0e620	a1 00 00 00 00	 mov	 eax, DWORD PTR ?drag2Y@@3HA ; drag2Y
  0e625	05 ff fe ff ff	 add	 eax, -257		; fffffeffH
  0e62a	c7 85 fc b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv39216[ebp], OFFSET ?mytradelist@@3PAHA ; mytradelist
  0e634	99		 cdq
  0e635	83 e2 03	 and	 edx, 3
  0e638	03 c2		 add	 eax, edx
  0e63a	ba 1c 03 00 00	 mov	 edx, OFFSET ?tradeList@@3PAUtradelist@@A+796
  0e63f	c1 f8 02	 sar	 eax, 2

; 18006: 							//å»ºç«ææ¹Listæ¸å
; 18007: 							for (i = 0; i < 21; i++) {

  0e642	33 f6		 xor	 esi, esi
  0e644	89 85 e8 b9 ff
	ff		 mov	 DWORD PTR _i$32$[ebp], eax
  0e64a	66 0f 1f 44 00
	00		 npad	 6
$LL446@MenuProc:

; 18008: 								if (tradeList[i + 1].data != -1) {

  0e650	83 3a ff	 cmp	 DWORD PTR [edx], -1
  0e653	74 12		 je	 SHORT $LN444@MenuProc

; 18009: 									mytradelist[j] = i + 1;

  0e655	8b 8d fc b9 ff
	ff		 mov	 ecx, DWORD PTR tv39216[ebp]
  0e65b	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 18010: 									j++;

  0e65e	83 85 fc b9 ff
	ff 04		 add	 DWORD PTR tv39216[ebp], 4
  0e665	89 01		 mov	 DWORD PTR [ecx], eax
$LN444@MenuProc:

; 18006: 							//å»ºç«ææ¹Listæ¸å
; 18007: 							for (i = 0; i < 21; i++) {

  0e667	81 c2 18 03 00
	00		 add	 edx, 792		; 00000318H
  0e66d	46		 inc	 esi
  0e66e	81 fa 14 44 00
	00		 cmp	 edx, OFFSET ?tradeList@@3PAUtradelist@@A+17428
  0e674	7c da		 jl	 SHORT $LL446@MenuProc

; 18011: 								}
; 18012: 							}
; 18013: 							j = 0;
; 18014: 							//å»ºç«å¯¹æ¹Listæ¸å
; 18015: 							for (i = 0; i < 21; i++) {

  0e676	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0e67c	33 c9		 xor	 ecx, ecx
  0e67e	c7 85 fc b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv39199[ebp], OFFSET ?opptradelist@@3PAHA ; opptradelist
  0e688	ba 14 44 00 00	 mov	 edx, OFFSET ?tradeList@@3PAUtradelist@@A+17428
  0e68d	0f 1f 00	 npad	 3
$LL449@MenuProc:

; 18016: 								if (tradeList[i + 22].data != -1) {

  0e690	83 3a ff	 cmp	 DWORD PTR [edx], -1
  0e693	74 12		 je	 SHORT $LN447@MenuProc

; 18017: 									opptradelist[j] = i + 22;

  0e695	8b bd fc b9 ff
	ff		 mov	 edi, DWORD PTR tv39199[ebp]
  0e69b	8d 41 16	 lea	 eax, DWORD PTR [ecx+22]

; 18018: 									j++;

  0e69e	83 85 fc b9 ff
	ff 04		 add	 DWORD PTR tv39199[ebp], 4
  0e6a5	89 07		 mov	 DWORD PTR [edi], eax
$LN447@MenuProc:

; 18011: 								}
; 18012: 							}
; 18013: 							j = 0;
; 18014: 							//å»ºç«å¯¹æ¹Listæ¸å
; 18015: 							for (i = 0; i < 21; i++) {

  0e6a7	81 c2 18 03 00
	00		 add	 edx, 792		; 00000318H
  0e6ad	41		 inc	 ecx
  0e6ae	81 fa 0c 85 00
	00		 cmp	 edx, OFFSET ?tradeList@@3PAUtradelist@@A+34060
  0e6b4	7c da		 jl	 SHORT $LL449@MenuProc

; 18019: 								}
; 18020: 							}
; 18021: 							j = 0;
; 18022: 							//æ¾ç¤ºäº¤ææ¸å
; 18023: 							for (i = ShowPoint; i < ShowPoint + 5; i++) {

  0e6b6	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$32$[ebp]
  0e6bc	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
  0e6c2	c7 85 f0 b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$1$[ebp], 0
  0e6cc	8d 41 05	 lea	 eax, DWORD PTR [ecx+5]
  0e6cf	89 85 dc b9 ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  0e6d5	3b c8		 cmp	 ecx, eax
  0e6d7	0f 8d 58 04 00
	00		 jge	 $LN4863@MenuProc
  0e6dd	8d 87 e4 00 00
	00		 lea	 eax, DWORD PTR [edi+228]
  0e6e3	8b bd dc b9 ff
	ff		 mov	 edi, DWORD PTR $T7[ebp]
  0e6e9	89 85 0c ba ff
	ff		 mov	 DWORD PTR tv39169[ebp], eax
  0e6ef	90		 npad	 1
$LL452@MenuProc:

; 18024: 								if (mytradelist[i] == -1) break;

  0e6f0	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?mytradelist@@3PAHA[ecx*4]
  0e6f7	83 f8 ff	 cmp	 eax, -1
  0e6fa	0f 84 2f 04 00
	00		 je	 $LN5026@MenuProc

; 18025: 								if (i > 21) break;

  0e700	83 f9 15	 cmp	 ecx, 21			; 00000015H
  0e703	0f 8f 26 04 00
	00		 jg	 $LN5026@MenuProc

; 18026: 								//è¯´ææ¡ç¨çHitBoxææ¶ä¸å
; 18027: 								//								if( MakeHitBox( x + 10 , y + 226 + j * 29, x + 280  , y + 244 + j * 29 , DISP_PRIO_IME3 ) == TRUE ){
; 18028: 								//								}
; 18029: 								sprintf(moji, "%c", tradeList[mytradelist[i]].kind);

  0e709	69 c0 18 03 00
	00		 imul	 eax, eax, 792
  0e70f	0f be 80 00 00
	00 00		 movsx	 eax, BYTE PTR ?tradeList@@3PAUtradelist@@A[eax]
  0e716	50		 push	 eax
  0e717	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e71d	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  0e722	50		 push	 eax
  0e723	e8 00 00 00 00	 call	 _sprintf
  0e728	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18030: 								//æ¾ç¤ºéå·
; 18031: 								if (strcmp(moji, "I") == 0) {

  0e72b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e731	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01JPJNBJEM@I@
$LL4339@MenuProc:
  0e736	8a 10		 mov	 dl, BYTE PTR [eax]
  0e738	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0e73a	75 1a		 jne	 SHORT $LN4340@MenuProc
  0e73c	84 d2		 test	 dl, dl
  0e73e	74 12		 je	 SHORT $LN4341@MenuProc
  0e740	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0e743	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  0e746	75 0e		 jne	 SHORT $LN4340@MenuProc
  0e748	83 c0 02	 add	 eax, 2
  0e74b	83 c1 02	 add	 ecx, 2
  0e74e	84 d2		 test	 dl, dl
  0e750	75 e4		 jne	 SHORT $LL4339@MenuProc
$LN4341@MenuProc:
  0e752	33 c0		 xor	 eax, eax
  0e754	eb 05		 jmp	 SHORT $LN4342@MenuProc
$LN4340@MenuProc:
  0e756	1b c0		 sbb	 eax, eax
  0e758	83 c8 01	 or	 eax, 1
$LN4342@MenuProc:
  0e75b	85 c0		 test	 eax, eax
  0e75d	0f 85 f1 00 00
	00		 jne	 $LN1769@MenuProc

; 18032: 									sprintf(moji, "%s", tradeList[mytradelist[i]].name);

  0e763	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR _i$32$[ebp]
  0e769	69 04 85 00 00
	00 00 18 03 00
	00		 imul	 eax, DWORD PTR ?mytradelist@@3PAHA[eax*4], 792
  0e774	05 08 00 00 00	 add	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+8
  0e779	50		 push	 eax
  0e77a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e780	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0e785	50		 push	 eax
  0e786	e8 00 00 00 00	 call	 _sprintf

; 18033: 									StockFontBuffer(x + 12, y + 228 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0e78b	6a 00		 push	 0
  0e78d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e793	50		 push	 eax
  0e794	6a 00		 push	 0
  0e796	6a 01		 push	 1
  0e798	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0e79e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0e7a1	50		 push	 eax
  0e7a2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18034: 
; 18035: #ifdef _ITEM_PILENUMS
; 18036: 									sprintf(moji, "x%d", tradeList[mytradelist[i]].pilenum);

  0e7a7	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR _i$32$[ebp]
  0e7ad	69 04 85 00 00
	00 00 18 03 00
	00		 imul	 eax, DWORD PTR ?mytradelist@@3PAHA[eax*4], 792
  0e7b8	ff b0 10 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+784]
  0e7be	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e7c4	68 00 00 00 00	 push	 OFFSET ??_C@_03EPCHICDI@x?$CFd@
  0e7c9	50		 push	 eax
  0e7ca	e8 00 00 00 00	 call	 _sprintf

; 18037: 									StockFontBuffer(x + 180, y + 228 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0e7cf	6a 00		 push	 0
  0e7d1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e7d7	50		 push	 eax
  0e7d8	6a 00		 push	 0
  0e7da	6a 01		 push	 1
  0e7dc	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0e7e2	8d 86 b4 00 00
	00		 lea	 eax, DWORD PTR [esi+180]
  0e7e8	50		 push	 eax
  0e7e9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18038: #endif
; 18039: 									sprintf(moji, "%s", tradeList[mytradelist[i]].damage);

  0e7ee	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR _i$32$[ebp]
  0e7f4	83 c4 48	 add	 esp, 72			; 00000048H
  0e7f7	69 04 85 00 00
	00 00 18 03 00
	00		 imul	 eax, DWORD PTR ?mytradelist@@3PAHA[eax*4], 792
  0e802	05 08 01 00 00	 add	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+264
  0e807	50		 push	 eax
  0e808	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e80e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0e813	50		 push	 eax
  0e814	e8 00 00 00 00	 call	 _sprintf

; 18040: 									StockFontBuffer(x + 220, y + 228 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0e819	6a 00		 push	 0
  0e81b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e821	50		 push	 eax
  0e822	6a 00		 push	 0
  0e824	6a 01		 push	 1
  0e826	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0e82c	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
  0e832	50		 push	 eax
  0e833	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18041: 									j++;

  0e838	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR _j$1$[ebp]
  0e83e	83 c4 24	 add	 esp, 36			; 00000024H
  0e841	42		 inc	 edx
  0e842	83 85 0c ba ff
	ff 1d		 add	 DWORD PTR tv39169[ebp], 29 ; 0000001dH
  0e849	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR _j$1$[ebp], edx

; 18042: 								}

  0e84f	e9 c1 02 00 00	 jmp	 $LN1778@MenuProc
$LN1769@MenuProc:

; 18043: 								//æ¾ç¤ºå® ç©   íí¸íì
; 18044: 								else if (strcmp(moji, "P") == 0)

  0e854	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01EJNLAFE@P@
  0e859	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e85f	90		 npad	 1
$LL4343@MenuProc:
  0e860	8a 10		 mov	 dl, BYTE PTR [eax]
  0e862	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0e864	75 1a		 jne	 SHORT $LN4344@MenuProc
  0e866	84 d2		 test	 dl, dl
  0e868	74 12		 je	 SHORT $LN4345@MenuProc
  0e86a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0e86d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  0e870	75 0e		 jne	 SHORT $LN4344@MenuProc
  0e872	83 c0 02	 add	 eax, 2
  0e875	83 c1 02	 add	 ecx, 2
  0e878	84 d2		 test	 dl, dl
  0e87a	75 e4		 jne	 SHORT $LL4343@MenuProc
$LN4345@MenuProc:
  0e87c	33 c0		 xor	 eax, eax
  0e87e	eb 05		 jmp	 SHORT $LN4346@MenuProc
$LN4344@MenuProc:
  0e880	1b c0		 sbb	 eax, eax
  0e882	83 c8 01	 or	 eax, 1
$LN4346@MenuProc:
  0e885	85 c0		 test	 eax, eax
  0e887	0f 85 9d 01 00
	00		 jne	 $LN1771@MenuProc

; 18045: 								{
; 18046: 									int colors = 0;
; 18047: 									int mylist = mytradelist[i];

  0e88d	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR _i$32$[ebp]
  0e893	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?mytradelist@@3PAHA[eax*4]

; 18048: 									sprintf(moji, "%s", tradeList[mylist].name);

  0e89a	69 c0 18 03 00
	00		 imul	 eax, eax, 792
  0e8a0	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv39445[ebp], eax
  0e8a6	8d 80 08 00 00
	00		 lea	 eax, DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+8]
  0e8ac	50		 push	 eax
  0e8ad	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv37750[ebp], eax
  0e8b3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e8b9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0e8be	50		 push	 eax
  0e8bf	e8 00 00 00 00	 call	 _sprintf

; 18049: 									StockFontBuffer(x + 12, y + 228 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0e8c4	6a 00		 push	 0
  0e8c6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e8cc	50		 push	 eax
  0e8cd	6a 00		 push	 0
  0e8cf	6a 01		 push	 1
  0e8d1	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0e8d7	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0e8da	50		 push	 eax
  0e8db	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18050: 
; 18051: 									if (strcmp(tradeList[mylist].freename, tradeList[mylist].name))

  0e8e0	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39445[ebp]
  0e8e6	83 c4 24	 add	 esp, 36			; 00000024H
  0e8e9	8d 80 08 02 00
	00		 lea	 eax, DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+520]
  0e8ef	89 85 d8 b9 ff
	ff		 mov	 DWORD PTR tv39379[ebp], eax
  0e8f5	8b c8		 mov	 ecx, eax
  0e8f7	8b 85 dc b9 ff
	ff		 mov	 eax, DWORD PTR tv37750[ebp]
  0e8fd	0f 1f 00	 npad	 3
$LL4347@MenuProc:
  0e900	8a 11		 mov	 dl, BYTE PTR [ecx]
  0e902	3a 10		 cmp	 dl, BYTE PTR [eax]
  0e904	75 1a		 jne	 SHORT $LN4348@MenuProc
  0e906	84 d2		 test	 dl, dl
  0e908	74 12		 je	 SHORT $LN4349@MenuProc
  0e90a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0e90d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  0e910	75 0e		 jne	 SHORT $LN4348@MenuProc
  0e912	83 c1 02	 add	 ecx, 2
  0e915	83 c0 02	 add	 eax, 2
  0e918	84 d2		 test	 dl, dl
  0e91a	75 e4		 jne	 SHORT $LL4347@MenuProc
$LN4349@MenuProc:
  0e91c	33 c0		 xor	 eax, eax
  0e91e	eb 05		 jmp	 SHORT $LN4350@MenuProc
$LN4348@MenuProc:
  0e920	1b c0		 sbb	 eax, eax
  0e922	83 c8 01	 or	 eax, 1
$LN4350@MenuProc:
  0e925	85 c0		 test	 eax, eax
  0e927	74 36		 je	 SHORT $LN1773@MenuProc

; 18052: 									{
; 18053: 										sprintf(moji, "[%s]", tradeList[mylist].freename);

  0e929	ff b5 d8 b9 ff
	ff		 push	 DWORD PTR tv39379[ebp]
  0e92f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e935	68 00 00 00 00	 push	 OFFSET ??_C@_04LIFAFMCE@?$FL?$CFs?$FN@
  0e93a	50		 push	 eax
  0e93b	e8 00 00 00 00	 call	 _sprintf

; 18054: 										colors = FONT_PAL_RED;
; 18055: 										StockFontBuffer(x + 102, y + 228 + j * 29, FONT_PRIO_FRONT, colors, moji, 0);

  0e940	6a 00		 push	 0
  0e942	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e948	50		 push	 eax
  0e949	6a 06		 push	 6
  0e94b	6a 01		 push	 1
  0e94d	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0e953	8d 46 66	 lea	 eax, DWORD PTR [esi+102]
  0e956	50		 push	 eax
  0e957	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0e95c	83 c4 24	 add	 esp, 36			; 00000024H
$LN1773@MenuProc:

; 18056: 									}
; 18057: #ifdef _PET_2TRANS
; 18058: 									sprintf(moji, "Lv:%d%s", tradeList[mylist].level, "");

  0e95f	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39445[ebp]
  0e965	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0e96a	ff b0 08 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+776]
  0e970	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e976	68 00 00 00 00	 push	 OFFSET ??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@
  0e97b	50		 push	 eax
  0e97c	e8 00 00 00 00	 call	 _sprintf

; 18059: 									if (tradeList[mylist].trns == 1)

  0e981	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39445[ebp]
  0e987	83 c4 10	 add	 esp, 16			; 00000010H
  0e98a	8b 88 0c 03 00
	00		 mov	 ecx, DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+780]
  0e990	83 f9 01	 cmp	 ecx, 1
  0e993	75 07		 jne	 SHORT $LN1774@MenuProc

; 18060: 										sprintf(moji, "Lv:%d%s", tradeList[mylist].level, "1 ë¨ê³");

  0e995	68 00 00 00 00	 push	 OFFSET ??_C@_06LBBHKEFA@1?5?$LE?$NM?$LA?h@
  0e99a	eb 0a		 jmp	 SHORT $LN5146@MenuProc
$LN1774@MenuProc:

; 18061: 									else if (tradeList[mylist].trns == 2)

  0e99c	83 f9 02	 cmp	 ecx, 2
  0e99f	75 25		 jne	 SHORT $LN1776@MenuProc

; 18062: 										sprintf(moji, "Lv:%d%s", tradeList[mylist].level, "2 ë¨ê³");

  0e9a1	68 00 00 00 00	 push	 OFFSET ??_C@_06IAPPLOMN@2?5?$LE?$NM?$LA?h@
$LN5146@MenuProc:

; 18063: #ifdef _SHOW_FUSION
; 18064: 									if (LOWORD(tradeList[mylist].fusion) == 1)

  0e9a6	ff b0 08 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+776]
  0e9ac	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e9b2	68 00 00 00 00	 push	 OFFSET ??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@
  0e9b7	50		 push	 eax
  0e9b8	e8 00 00 00 00	 call	 _sprintf
  0e9bd	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39445[ebp]
  0e9c3	83 c4 10	 add	 esp, 16			; 00000010H
$LN1776@MenuProc:
  0e9c6	66 83 b8 14 03
	00 00 01	 cmp	 WORD PTR ?tradeList@@3PAUtradelist@@A[eax+788], 1
  0e9ce	75 1f		 jne	 SHORT $LN1777@MenuProc

; 18065: 										sprintf(moji, "Lv:%d%s", tradeList[mylist].level, "ìµ í¡");

  0e9d0	68 00 00 00 00	 push	 OFFSET ??_C@_04IIECJNKD@?$MA?$LG?5?$DP@
  0e9d5	ff b0 08 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+776]
  0e9db	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e9e1	68 00 00 00 00	 push	 OFFSET ??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@
  0e9e6	50		 push	 eax
  0e9e7	e8 00 00 00 00	 call	 _sprintf
  0e9ec	83 c4 10	 add	 esp, 16			; 00000010H
$LN1777@MenuProc:

; 18066: #endif
; 18067: #else
; 18068: 									sprintf(moji, "Lv:%d%s", tradeList[mylist].level, (tradeList[mylist].trns == 0) ? "" : "è½¬");
; 18069: #endif
; 18070: 									StockFontBuffer(x + 220, y + 228 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0e9ef	6a 00		 push	 0
  0e9f1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0e9f7	50		 push	 eax
  0e9f8	6a 00		 push	 0
  0e9fa	6a 01		 push	 1
  0e9fc	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0ea02	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
  0ea08	50		 push	 eax
  0ea09	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18071: 
; 18072: 									j++;

  0ea0e	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR _j$1$[ebp]
  0ea14	83 c4 18	 add	 esp, 24			; 00000018H
  0ea17	42		 inc	 edx
  0ea18	83 85 0c ba ff
	ff 1d		 add	 DWORD PTR tv39169[ebp], 29 ; 0000001dH
  0ea1f	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR _j$1$[ebp], edx

; 18073: 								}

  0ea25	e9 eb 00 00 00	 jmp	 $LN1778@MenuProc
$LN1771@MenuProc:

; 18074: 								//æ¾ç¤ºéé±
; 18075: 								else if (strcmp(moji, "G") == 0)

  0ea2a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01BBODEMC@G@
  0ea2f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
$LL4351@MenuProc:
  0ea35	8a 10		 mov	 dl, BYTE PTR [eax]
  0ea37	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0ea39	75 1a		 jne	 SHORT $LN4352@MenuProc
  0ea3b	84 d2		 test	 dl, dl
  0ea3d	74 12		 je	 SHORT $LN4353@MenuProc
  0ea3f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0ea42	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  0ea45	75 0e		 jne	 SHORT $LN4352@MenuProc
  0ea47	83 c0 02	 add	 eax, 2
  0ea4a	83 c1 02	 add	 ecx, 2
  0ea4d	84 d2		 test	 dl, dl
  0ea4f	75 e4		 jne	 SHORT $LL4351@MenuProc
$LN4353@MenuProc:
  0ea51	33 c0		 xor	 eax, eax
  0ea53	eb 05		 jmp	 SHORT $LN4354@MenuProc
$LN4352@MenuProc:
  0ea55	1b c0		 sbb	 eax, eax
  0ea57	83 c8 01	 or	 eax, 1
$LN4354@MenuProc:
  0ea5a	85 c0		 test	 eax, eax
  0ea5c	0f 85 ad 00 00
	00		 jne	 $LN5060@MenuProc

; 18076: 								{
; 18077: 									StockFontBuffer(x + 12, y + 228 + j * 29, FONT_PRIO_FRONT, 0, "ì¤ í¤", 0);

  0ea62	50		 push	 eax
  0ea63	68 00 00 00 00	 push	 OFFSET ??_C@_05INGMOBLN@?$LN?$LK?5?E?f@
  0ea68	50		 push	 eax
  0ea69	6a 01		 push	 1
  0ea6b	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0ea71	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0ea74	50		 push	 eax
  0ea75	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18078: 									sprintf(moji, "%d", tradeList[mytradelist[i]].data);

  0ea7a	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR _i$32$[ebp]
  0ea80	69 04 85 00 00
	00 00 18 03 00
	00		 imul	 eax, DWORD PTR ?mytradelist@@3PAHA[eax*4], 792
  0ea8b	ff b0 04 00 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+4]
  0ea91	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ea97	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0ea9c	50		 push	 eax
  0ea9d	e8 00 00 00 00	 call	 _sprintf

; 18079: 									StockFontBuffer(x + 102, y + 228 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0eaa2	6a 00		 push	 0
  0eaa4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0eaaa	50		 push	 eax
  0eaab	6a 00		 push	 0
  0eaad	6a 01		 push	 1
  0eaaf	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0eab5	8d 46 66	 lea	 eax, DWORD PTR [esi+102]
  0eab8	50		 push	 eax
  0eab9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18080: 									sprintf(moji, "%s", "Gold");

  0eabe	68 00 00 00 00	 push	 OFFSET ??_C@_04PABHPHAJ@Gold@
  0eac3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0eac9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0eace	50		 push	 eax
  0eacf	e8 00 00 00 00	 call	 _sprintf
  0ead4	83 c4 48	 add	 esp, 72			; 00000048H

; 18081: 									StockFontBuffer(x + 220, y + 228 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0ead7	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0eadd	6a 00		 push	 0
  0eadf	50		 push	 eax
  0eae0	6a 00		 push	 0
  0eae2	6a 01		 push	 1
  0eae4	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39169[ebp]
  0eaea	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
  0eaf0	50		 push	 eax
  0eaf1	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18082: 									j++;

  0eaf6	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR _j$1$[ebp]
  0eafc	83 c4 18	 add	 esp, 24			; 00000018H
  0eaff	42		 inc	 edx
  0eb00	83 85 0c ba ff
	ff 1d		 add	 DWORD PTR tv39169[ebp], 29 ; 0000001dH
  0eb07	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR _j$1$[ebp], edx
  0eb0d	eb 06		 jmp	 SHORT $LN1778@MenuProc
$LN5060@MenuProc:

; 18074: 								//æ¾ç¤ºéé±
; 18075: 								else if (strcmp(moji, "G") == 0)

  0eb0f	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR _j$1$[ebp]
$LN1778@MenuProc:

; 18083: 								}
; 18084: 								if (j == 5)

  0eb15	83 fa 05	 cmp	 edx, 5
  0eb18	74 15		 je	 SHORT $LN5026@MenuProc

; 18019: 								}
; 18020: 							}
; 18021: 							j = 0;
; 18022: 							//æ¾ç¤ºäº¤ææ¸å
; 18023: 							for (i = ShowPoint; i < ShowPoint + 5; i++) {

  0eb1a	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _i$32$[ebp]
  0eb20	41		 inc	 ecx
  0eb21	89 8d e8 b9 ff
	ff		 mov	 DWORD PTR _i$32$[ebp], ecx
  0eb27	3b cf		 cmp	 ecx, edi
  0eb29	0f 8c c1 fb ff
	ff		 jl	 $LL452@MenuProc
$LN5026@MenuProc:
  0eb2f	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
$LN4863@MenuProc:

; 18088: 							//ææ¹è¦æ¾ç¤ºçèµ·å§ä½ç½®
; 18089: 							ShowPoint = (drag1Y - 67) / 4;

  0eb35	a1 00 00 00 00	 mov	 eax, DWORD PTR ?drag1Y@@3HA ; drag1Y
  0eb3a	83 c0 bd	 add	 eax, -67		; ffffffbdH
  0eb3d	c7 85 f0 b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$2$[ebp], 0
  0eb47	99		 cdq
  0eb48	83 e2 03	 and	 edx, 3
  0eb4b	03 c2		 add	 eax, edx
  0eb4d	c1 f8 02	 sar	 eax, 2

; 18090: 							//æ¾ç¤ºäº¤ææ¸å
; 18091: 							for (i = ShowPoint + 22; i < ShowPoint + 27; i++)

  0eb50	8d 50 16	 lea	 edx, DWORD PTR [eax+22]
  0eb53	83 c0 1b	 add	 eax, 27			; 0000001bH
  0eb56	89 95 fc b9 ff
	ff		 mov	 DWORD PTR _i$33$[ebp], edx
  0eb5c	89 85 dc b9 ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  0eb62	3b d0		 cmp	 edx, eax
  0eb64	0f 8d e5 04 00
	00		 jge	 $LN4864@MenuProc

; 18085: 									break;
; 18086: 							}
; 18087: 							j = 0;

  0eb6a	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  0eb6d	8b bd dc b9 ff
	ff		 mov	 edi, DWORD PTR $T6[ebp]
  0eb73	8d 0c 95 a8 ff
	ff ff		 lea	 ecx, DWORD PTR ?opptradelist@@3PAHA[edx*4-88]
  0eb7a	89 85 0c ba ff
	ff		 mov	 DWORD PTR tv39153[ebp], eax
  0eb80	89 8d e8 b9 ff
	ff		 mov	 DWORD PTR tv39154[ebp], ecx
  0eb86	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL455@MenuProc:

; 18092: 							{
; 18093: 								if (opptradelist[i - 22] == -1) break;

  0eb90	8b 01		 mov	 eax, DWORD PTR [ecx]
  0eb92	83 f8 ff	 cmp	 eax, -1
  0eb95	0f 84 ae 04 00
	00		 je	 $LN5027@MenuProc

; 18094: 								if (i > 42) break;

  0eb9b	81 f9 50 00 00
	00		 cmp	 ecx, OFFSET ?opptradelist@@3PAHA+80
  0eba1	0f 8f a2 04 00
	00		 jg	 $LN5027@MenuProc

; 18095: 								//è¯´ææ¡ç¨çHitBoxææ¶ä¸å
; 18096: 								//								if( MakeHitBox( x + 10 , y + 37 + j * 29, x + 280  , y + 55 + j * 29 , DISP_PRIO_IME3 ) == TRUE ){
; 18097: 								//								}
; 18098: 								sprintf(moji, "%c", tradeList[opptradelist[i - 22]].kind);

  0eba7	69 c0 18 03 00
	00		 imul	 eax, eax, 792
  0ebad	0f be 80 00 00
	00 00		 movsx	 eax, BYTE PTR ?tradeList@@3PAUtradelist@@A[eax]
  0ebb4	50		 push	 eax
  0ebb5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ebbb	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  0ebc0	50		 push	 eax
  0ebc1	e8 00 00 00 00	 call	 _sprintf
  0ebc6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18099: 								//æ¾ç¤ºéå·
; 18100: 								if (strcmp(moji, "I") == 0)

  0ebc9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ebcf	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01JPJNBJEM@I@
$LL4355@MenuProc:
  0ebd4	8a 10		 mov	 dl, BYTE PTR [eax]
  0ebd6	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0ebd8	75 1a		 jne	 SHORT $LN4356@MenuProc
  0ebda	84 d2		 test	 dl, dl
  0ebdc	74 12		 je	 SHORT $LN4357@MenuProc
  0ebde	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0ebe1	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  0ebe4	75 0e		 jne	 SHORT $LN4356@MenuProc
  0ebe6	83 c0 02	 add	 eax, 2
  0ebe9	83 c1 02	 add	 ecx, 2
  0ebec	84 d2		 test	 dl, dl
  0ebee	75 e4		 jne	 SHORT $LL4355@MenuProc
$LN4357@MenuProc:
  0ebf0	33 c0		 xor	 eax, eax
  0ebf2	eb 05		 jmp	 SHORT $LN4358@MenuProc
$LN4356@MenuProc:
  0ebf4	1b c0		 sbb	 eax, eax
  0ebf6	83 c8 01	 or	 eax, 1
$LN4358@MenuProc:
  0ebf9	85 c0		 test	 eax, eax
  0ebfb	0f 85 e2 00 00
	00		 jne	 $LN1782@MenuProc

; 18101: 								{
; 18102: 									int colors = 0;
; 18103: 									int opptradlist = opptradelist[i - 22];
; 18104: 									// Terry modify for é½ç¨åå 2004/6/9
; 18105: 									sprintf(moji, "%s", tradeList[opptradlist].name);

  0ec01	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39154[ebp]
  0ec07	69 00 18 03 00
	00		 imul	 eax, DWORD PTR [eax], 792
  0ec0d	05 08 00 00 00	 add	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+8
  0ec12	50		 push	 eax
  0ec13	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ec19	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0ec1e	50		 push	 eax
  0ec1f	e8 00 00 00 00	 call	 _sprintf

; 18106: 									//									sprintf( moji , "%s" , tradeList[ opptradlist].freename ) ; 
; 18107: 									//									if( strcmp( tradeList[opptradlist].name, tradeList[opptradlist].freename ) ){
; 18108: 									//										sprintf( moji , "[%s]" , tradeList[ opptradlist].freename ) ; 
; 18109: 									//										colors = 6;
; 18110: 									//									}
; 18111: 									StockFontBuffer(x + 12, y + 40 + j * 29, FONT_PRIO_FRONT, colors, moji, 0);

  0ec24	6a 00		 push	 0
  0ec26	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ec2c	50		 push	 eax
  0ec2d	6a 00		 push	 0
  0ec2f	6a 01		 push	 1
  0ec31	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0ec37	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0ec3a	50		 push	 eax
  0ec3b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18112: #ifdef _ITEM_PILENUMS
; 18113: 									sprintf(moji, "x%d", tradeList[opptradelist[i - 22]].pilenum);

  0ec40	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39154[ebp]
  0ec46	69 00 18 03 00
	00		 imul	 eax, DWORD PTR [eax], 792
  0ec4c	ff b0 10 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+784]
  0ec52	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ec58	68 00 00 00 00	 push	 OFFSET ??_C@_03EPCHICDI@x?$CFd@
  0ec5d	50		 push	 eax
  0ec5e	e8 00 00 00 00	 call	 _sprintf

; 18114: 									StockFontBuffer(x + 180, y + 40 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0ec63	6a 00		 push	 0
  0ec65	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ec6b	50		 push	 eax
  0ec6c	6a 00		 push	 0
  0ec6e	6a 01		 push	 1
  0ec70	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0ec76	8d 86 b4 00 00
	00		 lea	 eax, DWORD PTR [esi+180]
  0ec7c	50		 push	 eax
  0ec7d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18115: #endif
; 18116: 
; 18117: 									sprintf(moji, "%s", tradeList[opptradelist[i - 22]].damage);

  0ec82	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39154[ebp]
  0ec88	83 c4 48	 add	 esp, 72			; 00000048H
  0ec8b	69 00 18 03 00
	00		 imul	 eax, DWORD PTR [eax], 792
  0ec91	05 08 01 00 00	 add	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+264
  0ec96	50		 push	 eax
  0ec97	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ec9d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0eca2	50		 push	 eax
  0eca3	e8 00 00 00 00	 call	 _sprintf

; 18118: 									StockFontBuffer(x + 220, y + 40 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0eca8	6a 00		 push	 0
  0ecaa	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ecb0	50		 push	 eax
  0ecb1	6a 00		 push	 0
  0ecb3	6a 01		 push	 1
  0ecb5	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0ecbb	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
  0ecc1	50		 push	 eax
  0ecc2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18119: 									j++;

  0ecc7	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR _j$2$[ebp]
  0eccd	83 c4 24	 add	 esp, 36			; 00000024H
  0ecd0	40		 inc	 eax
  0ecd1	83 85 0c ba ff
	ff 1d		 add	 DWORD PTR tv39153[ebp], 29 ; 0000001dH
  0ecd8	89 85 f0 b9 ff
	ff		 mov	 DWORD PTR _j$2$[ebp], eax

; 18120: 								}

  0ecde	e9 3d 03 00 00	 jmp	 $LN1792@MenuProc
$LN1782@MenuProc:

; 18121: 								else if (strcmp(moji, "P") == 0)

  0ece3	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01EJNLAFE@P@
  0ece8	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ecee	66 90		 npad	 2
$LL4359@MenuProc:
  0ecf0	8a 10		 mov	 dl, BYTE PTR [eax]
  0ecf2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0ecf4	75 1a		 jne	 SHORT $LN4360@MenuProc
  0ecf6	84 d2		 test	 dl, dl
  0ecf8	74 12		 je	 SHORT $LN4361@MenuProc
  0ecfa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0ecfd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  0ed00	75 0e		 jne	 SHORT $LN4360@MenuProc
  0ed02	83 c0 02	 add	 eax, 2
  0ed05	83 c1 02	 add	 ecx, 2
  0ed08	84 d2		 test	 dl, dl
  0ed0a	75 e4		 jne	 SHORT $LL4359@MenuProc
$LN4361@MenuProc:
  0ed0c	33 c0		 xor	 eax, eax
  0ed0e	eb 05		 jmp	 SHORT $LN4362@MenuProc
$LN4360@MenuProc:
  0ed10	1b c0		 sbb	 eax, eax
  0ed12	83 c8 01	 or	 eax, 1
$LN4362@MenuProc:
  0ed15	85 c0		 test	 eax, eax
  0ed17	0f 85 1d 02 00
	00		 jne	 $LN1784@MenuProc

; 18122: 								{//æ¾ç¤ºå® ç©
; 18123: 									int colors = 0; //FONT_PAL_RED
; 18124: 									int opplist = opptradelist[i - 22];

  0ed1d	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39154[ebp]
  0ed23	8b 00		 mov	 eax, DWORD PTR [eax]

; 18125: 									sprintf(moji, "%s", tradeList[opplist].name);

  0ed25	69 c0 18 03 00
	00		 imul	 eax, eax, 792
  0ed2b	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv39435[ebp], eax
  0ed31	8d 80 08 00 00
	00		 lea	 eax, DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+8]
  0ed37	50		 push	 eax
  0ed38	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR tv37835[ebp], eax
  0ed3e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ed44	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0ed49	50		 push	 eax
  0ed4a	e8 00 00 00 00	 call	 _sprintf

; 18126: 									StockFontBuffer(x + 12, y + 40 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0ed4f	6a 00		 push	 0
  0ed51	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ed57	50		 push	 eax
  0ed58	6a 00		 push	 0
  0ed5a	6a 01		 push	 1
  0ed5c	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0ed62	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0ed65	50		 push	 eax
  0ed66	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18127: #ifdef _SHOW_FUSION									
; 18128: 									// change fix åªä¸ºäºé¢¢ç¤º-----> []
; 18129: 									if (strcmp(tradeList[opplist].freename, tradeList[opplist].name) == 0)

  0ed6b	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39435[ebp]
  0ed71	83 c4 24	 add	 esp, 36			; 00000024H
  0ed74	8b 95 f4 b9 ff
	ff		 mov	 edx, DWORD PTR tv37835[ebp]
  0ed7a	8d 88 08 02 00
	00		 lea	 ecx, DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+520]
  0ed80	89 8d f8 b9 ff
	ff		 mov	 DWORD PTR tv39376[ebp], ecx
$LL4363@MenuProc:
  0ed86	8a 01		 mov	 al, BYTE PTR [ecx]
  0ed88	3a 02		 cmp	 al, BYTE PTR [edx]
  0ed8a	88 85 d7 b9 ff
	ff		 mov	 BYTE PTR tv39139[ebp], al
  0ed90	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR tv37835[ebp]
  0ed96	75 30		 jne	 SHORT $LN4364@MenuProc
  0ed98	80 bd d7 b9 ff
	ff 00		 cmp	 BYTE PTR tv39139[ebp], 0
  0ed9f	74 23		 je	 SHORT $LN4365@MenuProc
  0eda1	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0eda4	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  0eda7	88 85 d7 b9 ff
	ff		 mov	 BYTE PTR tv39140[ebp], al
  0edad	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR tv37835[ebp]
  0edb3	75 13		 jne	 SHORT $LN4364@MenuProc
  0edb5	83 c1 02	 add	 ecx, 2
  0edb8	83 c2 02	 add	 edx, 2
  0edbb	80 bd d7 b9 ff
	ff 00		 cmp	 BYTE PTR tv39140[ebp], 0
  0edc2	75 c2		 jne	 SHORT $LL4363@MenuProc
$LN4365@MenuProc:
  0edc4	33 c9		 xor	 ecx, ecx
  0edc6	eb 05		 jmp	 SHORT $LN4366@MenuProc
$LN4364@MenuProc:
  0edc8	1b c9		 sbb	 ecx, ecx
  0edca	83 c9 01	 or	 ecx, 1
$LN4366@MenuProc:
  0edcd	85 c9		 test	 ecx, ecx
  0edcf	75 36		 jne	 SHORT $LN3320@MenuProc

; 18130: 									{
; 18131: 										sprintf(moji, "[]");

  0edd1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0edd7	68 00 00 00 00	 push	 OFFSET ??_C@_02GPECMEKF@?$FL?$FN@
  0eddc	50		 push	 eax
  0eddd	e8 00 00 00 00	 call	 _sprintf

; 18132: 										colors = FONT_PAL_RED;
; 18133: 										StockFontBuffer(x + 102, y + 40 + j * 29, FONT_PRIO_FRONT, colors, moji, 0);

  0ede2	6a 00		 push	 0
  0ede4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0edea	50		 push	 eax
  0edeb	6a 06		 push	 6
  0eded	6a 01		 push	 1
  0edef	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0edf5	8d 46 66	 lea	 eax, DWORD PTR [esi+102]
  0edf8	50		 push	 eax
  0edf9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0edfe	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR tv37835[ebp]
  0ee04	83 c4 20	 add	 esp, 32			; 00000020H
$LN3320@MenuProc:

; 18134: 									}
; 18135: #endif
; 18136: 									if (strcmp(tradeList[opplist].freename, tradeList[opplist].name))

  0ee07	8b 8d f8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39376[ebp]
  0ee0d	0f 1f 00	 npad	 3
$LL4367@MenuProc:
  0ee10	8a 11		 mov	 dl, BYTE PTR [ecx]
  0ee12	3a 10		 cmp	 dl, BYTE PTR [eax]
  0ee14	75 1a		 jne	 SHORT $LN4368@MenuProc
  0ee16	84 d2		 test	 dl, dl
  0ee18	74 12		 je	 SHORT $LN4369@MenuProc
  0ee1a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0ee1d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  0ee20	75 0e		 jne	 SHORT $LN4368@MenuProc
  0ee22	83 c1 02	 add	 ecx, 2
  0ee25	83 c0 02	 add	 eax, 2
  0ee28	84 d2		 test	 dl, dl
  0ee2a	75 e4		 jne	 SHORT $LL4367@MenuProc
$LN4369@MenuProc:
  0ee2c	33 c0		 xor	 eax, eax
  0ee2e	eb 05		 jmp	 SHORT $LN4370@MenuProc
$LN4368@MenuProc:
  0ee30	1b c0		 sbb	 eax, eax
  0ee32	83 c8 01	 or	 eax, 1
$LN4370@MenuProc:
  0ee35	85 c0		 test	 eax, eax
  0ee37	74 36		 je	 SHORT $LN1787@MenuProc

; 18137: 									{
; 18138: 										sprintf(moji, "[%s]", tradeList[opplist].freename);

  0ee39	ff b5 f8 b9 ff
	ff		 push	 DWORD PTR tv39376[ebp]
  0ee3f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ee45	68 00 00 00 00	 push	 OFFSET ??_C@_04LIFAFMCE@?$FL?$CFs?$FN@
  0ee4a	50		 push	 eax
  0ee4b	e8 00 00 00 00	 call	 _sprintf

; 18139: 										colors = FONT_PAL_RED;
; 18140: 										StockFontBuffer(x + 102, y + 40 + j * 29, FONT_PRIO_FRONT, colors, moji, 0);

  0ee50	6a 00		 push	 0
  0ee52	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ee58	50		 push	 eax
  0ee59	6a 06		 push	 6
  0ee5b	6a 01		 push	 1
  0ee5d	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0ee63	8d 46 66	 lea	 eax, DWORD PTR [esi+102]
  0ee66	50		 push	 eax
  0ee67	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0ee6c	83 c4 24	 add	 esp, 36			; 00000024H
$LN1787@MenuProc:

; 18141: 									}
; 18142: #ifdef _PET_2TRANS
; 18143: 									sprintf(moji, "Lv:%d%s", tradeList[opplist].level, (tradeList[opplist].trns == 0) ? "" : "");

  0ee6f	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39435[ebp]
  0ee75	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0ee7a	ff b0 08 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+776]
  0ee80	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ee86	68 00 00 00 00	 push	 OFFSET ??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@
  0ee8b	50		 push	 eax
  0ee8c	e8 00 00 00 00	 call	 _sprintf

; 18144: 									if (tradeList[opplist].trns == 1)

  0ee91	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39435[ebp]
  0ee97	83 c4 10	 add	 esp, 16			; 00000010H
  0ee9a	8b 88 0c 03 00
	00		 mov	 ecx, DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+780]
  0eea0	83 f9 01	 cmp	 ecx, 1
  0eea3	75 07		 jne	 SHORT $LN1788@MenuProc

; 18145: 										sprintf(moji, "Lv:%d%s", tradeList[opplist].level, "1 ë¨ê³");

  0eea5	68 00 00 00 00	 push	 OFFSET ??_C@_06LBBHKEFA@1?5?$LE?$NM?$LA?h@
  0eeaa	eb 0a		 jmp	 SHORT $LN5147@MenuProc
$LN1788@MenuProc:

; 18146: 									else if (tradeList[opplist].trns == 2)

  0eeac	83 f9 02	 cmp	 ecx, 2
  0eeaf	75 25		 jne	 SHORT $LN1790@MenuProc

; 18147: 										sprintf(moji, "Lv:%d%s", tradeList[opplist].level, "2 ë¨ê³");

  0eeb1	68 00 00 00 00	 push	 OFFSET ??_C@_06IAPPLOMN@2?5?$LE?$NM?$LA?h@
$LN5147@MenuProc:

; 18148: #ifdef _SHOW_FUSION
; 18149: 									if (LOWORD(tradeList[opplist].fusion) == 1)

  0eeb6	ff b0 08 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+776]
  0eebc	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0eec2	68 00 00 00 00	 push	 OFFSET ??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@
  0eec7	50		 push	 eax
  0eec8	e8 00 00 00 00	 call	 _sprintf
  0eecd	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv39435[ebp]
  0eed3	83 c4 10	 add	 esp, 16			; 00000010H
$LN1790@MenuProc:
  0eed6	66 83 b8 14 03
	00 00 01	 cmp	 WORD PTR ?tradeList@@3PAUtradelist@@A[eax+788], 1
  0eede	75 1f		 jne	 SHORT $LN1791@MenuProc

; 18150: 										sprintf(moji, "Lv:%d%s", tradeList[opplist].level, "ìµí©");

  0eee0	68 00 00 00 00	 push	 OFFSET ??_C@_04IAHOEAOA@?$MA?$LG?G?U@
  0eee5	ff b0 08 03 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+776]
  0eeeb	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0eef1	68 00 00 00 00	 push	 OFFSET ??_C@_07EJEHFIPA@Lv?3?$CFd?$CFs@
  0eef6	50		 push	 eax
  0eef7	e8 00 00 00 00	 call	 _sprintf
  0eefc	83 c4 10	 add	 esp, 16			; 00000010H
$LN1791@MenuProc:

; 18151: #endif
; 18152: #else
; 18153: 									sprintf(moji, "Lv:%d%s", tradeList[opplist].level, (tradeList[opplist].trns == 0) ? "" : "è½¬");
; 18154: #endif
; 18155: 									StockFontBuffer(x + 220, y + 40 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0eeff	6a 00		 push	 0
  0ef01	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ef07	50		 push	 eax
  0ef08	6a 00		 push	 0
  0ef0a	6a 01		 push	 1
  0ef0c	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0ef12	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
  0ef18	50		 push	 eax
  0ef19	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18156: 									j++;

  0ef1e	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR _j$2$[ebp]
  0ef24	83 c4 18	 add	 esp, 24			; 00000018H
  0ef27	40		 inc	 eax
  0ef28	83 85 0c ba ff
	ff 1d		 add	 DWORD PTR tv39153[ebp], 29 ; 0000001dH
  0ef2f	89 85 f0 b9 ff
	ff		 mov	 DWORD PTR _j$2$[ebp], eax

; 18157: 								}

  0ef35	e9 e6 00 00 00	 jmp	 $LN1792@MenuProc
$LN1784@MenuProc:

; 18158: 								//æ¾ç¤ºéé±
; 18159: 								else if (strcmp(moji, "G") == 0)

  0ef3a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01BBODEMC@G@
  0ef3f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
$LL4371@MenuProc:
  0ef45	8a 10		 mov	 dl, BYTE PTR [eax]
  0ef47	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0ef49	75 1a		 jne	 SHORT $LN4372@MenuProc
  0ef4b	84 d2		 test	 dl, dl
  0ef4d	74 12		 je	 SHORT $LN4373@MenuProc
  0ef4f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0ef52	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  0ef55	75 0e		 jne	 SHORT $LN4372@MenuProc
  0ef57	83 c0 02	 add	 eax, 2
  0ef5a	83 c1 02	 add	 ecx, 2
  0ef5d	84 d2		 test	 dl, dl
  0ef5f	75 e4		 jne	 SHORT $LL4371@MenuProc
$LN4373@MenuProc:
  0ef61	33 c0		 xor	 eax, eax
  0ef63	eb 05		 jmp	 SHORT $LN4374@MenuProc
$LN4372@MenuProc:
  0ef65	1b c0		 sbb	 eax, eax
  0ef67	83 c8 01	 or	 eax, 1
$LN4374@MenuProc:
  0ef6a	85 c0		 test	 eax, eax
  0ef6c	0f 85 a8 00 00
	00		 jne	 $LN5061@MenuProc

; 18160: 								{
; 18161: 									StockFontBuffer(x + 12, y + 40 + j * 29, FONT_PRIO_FRONT, 0, "ì¤í¤", 0);

  0ef72	50		 push	 eax
  0ef73	68 00 00 00 00	 push	 OFFSET ??_C@_04DMAFGKHI@?$LN?$LK?E?f@
  0ef78	50		 push	 eax
  0ef79	6a 01		 push	 1
  0ef7b	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0ef81	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0ef84	50		 push	 eax
  0ef85	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18162: 									sprintf(moji, "%d", tradeList[opptradelist[i - 22]].data);

  0ef8a	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39154[ebp]
  0ef90	69 00 18 03 00
	00		 imul	 eax, DWORD PTR [eax], 792
  0ef96	ff b0 04 00 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+4]
  0ef9c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0efa2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0efa7	50		 push	 eax
  0efa8	e8 00 00 00 00	 call	 _sprintf

; 18163: 									StockFontBuffer(x + 102, y + 40 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0efad	6a 00		 push	 0
  0efaf	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0efb5	50		 push	 eax
  0efb6	6a 00		 push	 0
  0efb8	6a 01		 push	 1
  0efba	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0efc0	8d 46 66	 lea	 eax, DWORD PTR [esi+102]
  0efc3	50		 push	 eax
  0efc4	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18164: 									sprintf(moji, "%s", "Gold");

  0efc9	68 00 00 00 00	 push	 OFFSET ??_C@_04PABHPHAJ@Gold@
  0efce	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0efd4	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0efd9	50		 push	 eax
  0efda	e8 00 00 00 00	 call	 _sprintf
  0efdf	83 c4 48	 add	 esp, 72			; 00000048H

; 18165: 									StockFontBuffer(x + 220, y + 40 + j * 29, FONT_PRIO_FRONT, 0, moji, 0);

  0efe2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0efe8	6a 00		 push	 0
  0efea	50		 push	 eax
  0efeb	6a 00		 push	 0
  0efed	6a 01		 push	 1
  0efef	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv39153[ebp]
  0eff5	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
  0effb	50		 push	 eax
  0effc	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18166: 
; 18167: 									j++;

  0f001	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR _j$2$[ebp]
  0f007	83 c4 18	 add	 esp, 24			; 00000018H
  0f00a	40		 inc	 eax
  0f00b	83 85 0c ba ff
	ff 1d		 add	 DWORD PTR tv39153[ebp], 29 ; 0000001dH
  0f012	89 85 f0 b9 ff
	ff		 mov	 DWORD PTR _j$2$[ebp], eax
  0f018	eb 06		 jmp	 SHORT $LN1792@MenuProc
$LN5061@MenuProc:

; 18158: 								//æ¾ç¤ºéé±
; 18159: 								else if (strcmp(moji, "G") == 0)

  0f01a	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR _j$2$[ebp]
$LN1792@MenuProc:

; 18168: 								}
; 18169: 								if (j == 5)

  0f020	83 f8 05	 cmp	 eax, 5
  0f023	74 24		 je	 SHORT $LN5027@MenuProc

; 18090: 							//æ¾ç¤ºäº¤ææ¸å
; 18091: 							for (i = ShowPoint + 22; i < ShowPoint + 27; i++)

  0f025	8b 95 fc b9 ff
	ff		 mov	 edx, DWORD PTR _i$33$[ebp]
  0f02b	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39154[ebp]
  0f031	42		 inc	 edx
  0f032	83 c1 04	 add	 ecx, 4
  0f035	89 95 fc b9 ff
	ff		 mov	 DWORD PTR _i$33$[ebp], edx
  0f03b	89 8d e8 b9 ff
	ff		 mov	 DWORD PTR tv39154[ebp], ecx
  0f041	3b d7		 cmp	 edx, edi
  0f043	0f 8c 47 fb ff
	ff		 jl	 $LL455@MenuProc
$LN5027@MenuProc:
  0f049	8b bd 04 ba ff
	ff		 mov	 edi, DWORD PTR _y$11$[ebp]
$LN4864@MenuProc:

; 18170: 									break;
; 18171: 							}
; 18172: #endif
; 18173: 							sprintf(moji, "%7d", pc.gold);

  0f04f	ff 35 60 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+96
  0f055	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f05b	68 00 00 00 00	 push	 OFFSET ??_C@_03GJOCCCFJ@?$CF7d@
  0f060	50		 push	 eax
  0f061	e8 00 00 00 00	 call	 _sprintf

; 18174: 							StockFontBuffer(x + 550, y + 65, FONT_PRIO_FRONT, 0, moji, 0);

  0f066	6a 00		 push	 0
  0f068	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f06e	50		 push	 eax
  0f06f	6a 00		 push	 0
  0f071	6a 01		 push	 1
  0f073	8d 47 41	 lea	 eax, DWORD PTR [edi+65]
  0f076	8d 8e 26 02 00
	00		 lea	 ecx, DWORD PTR [esi+550]
  0f07c	50		 push	 eax
  0f07d	51		 push	 ecx
  0f07e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f083	83 c4 24	 add	 esp, 36			; 00000024H

; 18175: 							// Focusä¸å¨æå¨è¾å¥æ¶æ¾ç¤ºåæ°å¼
; 18176: 							if (Tradeflag == false)

  0f086	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?Tradeflag@@3_NA, 0 ; Tradeflag
  0f08d	75 37		 jne	 SHORT $LN1794@MenuProc

; 18177: 							{
; 18178: 								sprintf(moji, "%7d", tradeWndDropGold);

  0f08f	ff 35 00 00 00
	00		 push	 DWORD PTR ?tradeWndDropGold@@3HA
  0f095	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f09b	68 00 00 00 00	 push	 OFFSET ??_C@_03GJOCCCFJ@?$CF7d@
  0f0a0	50		 push	 eax
  0f0a1	e8 00 00 00 00	 call	 _sprintf

; 18179: 								StockFontBuffer(x + 550, y + 120, FONT_PRIO_FRONT, 0, moji, 0);

  0f0a6	6a 00		 push	 0
  0f0a8	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f0ae	50		 push	 eax
  0f0af	6a 00		 push	 0
  0f0b1	6a 01		 push	 1
  0f0b3	8d 47 78	 lea	 eax, DWORD PTR [edi+120]
  0f0b6	50		 push	 eax
  0f0b7	8d 86 26 02 00
	00		 lea	 eax, DWORD PTR [esi+550]
  0f0bd	50		 push	 eax
  0f0be	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f0c3	83 c4 24	 add	 esp, 36			; 00000024H
$LN1794@MenuProc:

; 18180: 							}
; 18181: 							if (pet[tradePetIndex].useFlag
; 18182: 								&& pc.ridePetNo != tradePetIndex)

  0f0c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradePetIndex@@3HA
  0f0cb	69 c8 78 0b 00
	00		 imul	 ecx, eax, 2936
  0f0d1	66 83 b9 76 00
	00 00 00	 cmp	 WORD PTR ?pet@@3PAUPET@@A[ecx+118], 0
  0f0d9	0f 84 d4 01 00
	00		 je	 $LN1795@MenuProc
  0f0df	39 05 18 51 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20760, eax
  0f0e5	0f 84 c8 01 00
	00		 je	 $LN1795@MenuProc

; 18183: 							{
; 18184: 								if (pActPet3 == NULL)

  0f0eb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActPet3@@3PAUaction@@A, 0
  0f0f2	75 29		 jne	 SHORT $LN1798@MenuProc

; 18185: 								{
; 18186: #ifdef _LIZARDPOSITION			   // (å¯å¼æ¾) Syu ADD ä¿®æ­£é¾è¥æ¾ç¤ºä½ç½®è¿ä½
; 18187: 									if ((pet[tradePetIndex].graNo == 101493) || (pet[tradePetIndex].graNo == 101494) ||
; 18188: 										(pet[tradePetIndex].graNo == 101495) || (pet[tradePetIndex].graNo == 101496))

  0f0f4	8b 81 04 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[ecx+4]

; 18189: 									{
; 18190: 										pActPet3 = MakeAnimDisp(x + 400, y + 145, pet[tradePetIndex].graNo, ANIM_DISP_PET);
; 18191: 									}
; 18192: 									else
; 18193: 										pActPet3 = MakeAnimDisp(x + 400, y + 145, pet[tradePetIndex].graNo, ANIM_DISP_PET);
; 18194: #else 
; 18195: 									pActPet3 = MakeAnimDisp(400, /*175*/145, pet[tradePetIndex].graNo, ANIM_DISP_PET);
; 18196: #endif
; 18197: 								}
; 18198: 
; 18199: 								if (pet[tradePetIndex].freeName[0] != NULL)

  0f0fa	6a 00		 push	 0
  0f0fc	50		 push	 eax
  0f0fd	8d 87 91 00 00
	00		 lea	 eax, DWORD PTR [edi+145]
  0f103	50		 push	 eax
  0f104	8d 86 90 01 00
	00		 lea	 eax, DWORD PTR [esi+400]
  0f10a	50		 push	 eax
  0f10b	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  0f110	a3 00 00 00 00	 mov	 DWORD PTR ?pActPet3@@3PAUaction@@A, eax
  0f115	83 c4 10	 add	 esp, 16			; 00000010H
  0f118	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tradePetIndex@@3HA
$LN1798@MenuProc:
  0f11d	69 c0 78 0b 00
	00		 imul	 eax, eax, 2936

; 18200: 									CenteringStr(pet[tradePetIndex].freeName, moji, PET_NAME_LEN);
; 18201: 								else
; 18202: 									CenteringStr(pet[tradePetIndex].name, moji, PET_NAME_LEN);
; 18203: 
; 18204: 								//æè½¬çæ¶é¢è²æ¾ç¤ºèè²
; 18205: #ifdef _TRADESYSTEM2			// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 18206: 							//æ°ç³»ç»ä½ç½®åç§»ä¿®æ­£
; 18207: 								if (pet[tradePetIndex].trn == 1)

  0f123	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  0f129	6a 10		 push	 16			; 00000010H
  0f12b	51		 push	 ecx
  0f12c	ba 65 00 00 00	 mov	 edx, OFFSET ?pet@@3PAUPET@@A+101
  0f131	b9 54 00 00 00	 mov	 ecx, OFFSET ?pet@@3PAUPET@@A+84
  0f136	80 b8 65 00 00
	00 00		 cmp	 BYTE PTR ?pet@@3PAUPET@@A[eax+101], 0
  0f13d	0f 45 ca	 cmovne	 ecx, edx
  0f140	03 c8		 add	 ecx, eax
  0f142	51		 push	 ecx
  0f143	e8 00 00 00 00	 call	 ?CenteringStr@@YAXPAD0H@Z ; CenteringStr

; 18208: 									StockFontBuffer(x + 330, y + 33, FONT_PRIO_FRONT, 1, moji, 0);
; 18209: 								else
; 18210: 									StockFontBuffer(x + 330, y + 33, FONT_PRIO_FRONT, 0, moji, 0);
; 18211: 
; 18212: 								sprintf(moji, "%3d", pet[tradePetIndex].level);

  0f148	6a 00		 push	 0
  0f14a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f150	33 c9		 xor	 ecx, ecx
  0f152	50		 push	 eax
  0f153	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?tradePetIndex@@3HA, 2936
  0f15d	83 b8 48 00 00
	00 01		 cmp	 DWORD PTR ?pet@@3PAUPET@@A[eax+72], 1
  0f164	8d 47 21	 lea	 eax, DWORD PTR [edi+33]
  0f167	0f 94 c1	 sete	 cl
  0f16a	51		 push	 ecx
  0f16b	6a 01		 push	 1
  0f16d	50		 push	 eax
  0f16e	8d 86 4a 01 00
	00		 lea	 eax, DWORD PTR [esi+330]
  0f174	50		 push	 eax
  0f175	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f17a	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?tradePetIndex@@3HA, 2936
  0f184	ff b0 20 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+32]
  0f18a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f190	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0f195	50		 push	 eax
  0f196	e8 00 00 00 00	 call	 _sprintf

; 18213: 								StockFontBuffer(x + 485, y + 105, FONT_PRIO_FRONT, 0, moji, 0);

  0f19b	6a 00		 push	 0
  0f19d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f1a3	81 c6 e5 01 00
	00		 add	 esi, 485		; 000001e5H
  0f1a9	50		 push	 eax
  0f1aa	6a 00		 push	 0
  0f1ac	6a 01		 push	 1
  0f1ae	8d 47 69	 lea	 eax, DWORD PTR [edi+105]
  0f1b1	50		 push	 eax
  0f1b2	56		 push	 esi
  0f1b3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18214: 								sprintf(moji, "%3d", pet[tradePetIndex].atk);

  0f1b8	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?tradePetIndex@@3HA, 2936
  0f1c2	83 c4 48	 add	 esp, 72			; 00000048H
  0f1c5	ff b0 24 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+36]
  0f1cb	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f1d1	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0f1d6	50		 push	 eax
  0f1d7	e8 00 00 00 00	 call	 _sprintf

; 18215: 								StockFontBuffer(x + 485, y + 129, FONT_PRIO_FRONT, 0, moji, 0);

  0f1dc	6a 00		 push	 0
  0f1de	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f1e4	50		 push	 eax
  0f1e5	6a 00		 push	 0
  0f1e7	6a 01		 push	 1
  0f1e9	8d 87 81 00 00
	00		 lea	 eax, DWORD PTR [edi+129]
  0f1ef	50		 push	 eax
  0f1f0	56		 push	 esi
  0f1f1	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18216: 								sprintf(moji, "%3d", pet[tradePetIndex].def);

  0f1f6	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?tradePetIndex@@3HA, 2936
  0f200	ff b0 28 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+40]
  0f206	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f20c	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0f211	50		 push	 eax
  0f212	e8 00 00 00 00	 call	 _sprintf

; 18217: 								StockFontBuffer(x + 485, y + 153, FONT_PRIO_FRONT, 0, moji, 0);

  0f217	6a 00		 push	 0
  0f219	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f21f	50		 push	 eax
  0f220	6a 00		 push	 0
  0f222	6a 01		 push	 1
  0f224	8d 87 99 00 00
	00		 lea	 eax, DWORD PTR [edi+153]
  0f22a	50		 push	 eax
  0f22b	56		 push	 esi
  0f22c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18218: 								sprintf(moji, "%3d", pet[tradePetIndex].quick);

  0f231	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?tradePetIndex@@3HA, 2936
  0f23b	83 c4 48	 add	 esp, 72			; 00000048H
  0f23e	ff b0 2c 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+44]
  0f244	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f24a	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0f24f	50		 push	 eax
  0f250	e8 00 00 00 00	 call	 _sprintf

; 18219: 								StockFontBuffer(x + 485, y + 177, FONT_PRIO_FRONT, 0, moji, 0);

  0f255	6a 00		 push	 0
  0f257	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f25d	50		 push	 eax
  0f25e	6a 00		 push	 0
  0f260	6a 01		 push	 1
  0f262	8d 87 b1 00 00
	00		 lea	 eax, DWORD PTR [edi+177]
  0f268	50		 push	 eax
  0f269	56		 push	 esi
  0f26a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18220: 								sprintf(moji, "%3d", pet[tradePetIndex].maxHp);

  0f26f	69 05 00 00 00
	00 78 0b 00 00	 imul	 eax, DWORD PTR ?tradePetIndex@@3HA, 2936
  0f279	ff b0 0c 00 00
	00		 push	 DWORD PTR ?pet@@3PAUPET@@A[eax+12]
  0f27f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f285	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  0f28a	50		 push	 eax
  0f28b	e8 00 00 00 00	 call	 _sprintf

; 18221: 								StockFontBuffer(x + 485, y + 201, FONT_PRIO_FRONT, 0, moji, 0);

  0f290	6a 00		 push	 0
  0f292	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0f298	50		 push	 eax
  0f299	6a 00		 push	 0
  0f29b	6a 01		 push	 1
  0f29d	8d 87 c9 00 00
	00		 lea	 eax, DWORD PTR [edi+201]
  0f2a3	50		 push	 eax
  0f2a4	56		 push	 esi
  0f2a5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f2aa	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0f2b0	83 c4 48	 add	 esp, 72			; 00000048H
$LN1795@MenuProc:

; 18222: #endif
; 18223: 							}
; 18224: 
; 18225: 
; 18226: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 18227: 							// ä»¥äº¤æè¿è¡å°çç¶æê²°ì Buttonæ ·å¼
; 18228: 							if (pc.trade_confirm == 1 || pc.trade_confirm == 3)

  0f2b3	8b 0d 80 a1 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+41344
  0f2b9	83 f9 01	 cmp	 ecx, 1
  0f2bc	74 05		 je	 SHORT $LN1805@MenuProc
  0f2be	83 f9 03	 cmp	 ecx, 3
  0f2c1	75 27		 jne	 SHORT $LN5148@MenuProc
$LN1805@MenuProc:

; 18229: 								tradeWndFontNo[0] = StockDispBuffer(x + 59, y + 390, DISP_PRIO_IME3, CG_TRADE_LOCK_BTN, 2);

  0f2c3	6a 02		 push	 2
  0f2c5	68 bc 66 00 00	 push	 26300			; 000066bcH
  0f2ca	8d 87 86 01 00
	00		 lea	 eax, DWORD PTR [edi+390]
  0f2d0	6a 69		 push	 105			; 00000069H
  0f2d2	8d 4e 3b	 lea	 ecx, DWORD PTR [esi+59]
  0f2d5	50		 push	 eax
  0f2d6	51		 push	 ecx
  0f2d7	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f2dc	8b 0d 80 a1 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+41344
  0f2e2	83 c4 14	 add	 esp, 20			; 00000014H
  0f2e5	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA, eax
$LN5148@MenuProc:

; 18230: 							if (pc.trade_confirm == 4)

  0f2ea	8d 56 3b	 lea	 edx, DWORD PTR [esi+59]
  0f2ed	8d 87 86 01 00
	00		 lea	 eax, DWORD PTR [edi+390]
  0f2f3	83 f9 04	 cmp	 ecx, 4
  0f2f6	75 18		 jne	 SHORT $LN1806@MenuProc

; 18231: 								tradeWndFontNo[0] = StockDispBuffer(x + 59, y + 390, DISP_PRIO_IME3, CG_TRADE_OK_BTN, 2);

  0f2f8	6a 02		 push	 2
  0f2fa	68 ed 65 00 00	 push	 26093			; 000065edH
  0f2ff	6a 69		 push	 105			; 00000069H
  0f301	50		 push	 eax
  0f302	52		 push	 edx
  0f303	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f308	83 c4 14	 add	 esp, 20			; 00000014H
  0f30b	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA, eax
$LN1806@MenuProc:

; 18232: 							//åç§»
; 18233: 							tradeWndFontNo[1] = StockDispBuffer(x + 240, y + 390, DISP_PRIO_IME3, CG_TRADE_CANCEL_BTN, 2);

  0f310	6a 02		 push	 2
  0f312	68 c2 65 00 00	 push	 26050			; 000065c2H
  0f317	6a 69		 push	 105			; 00000069H
  0f319	8d 87 86 01 00
	00		 lea	 eax, DWORD PTR [edi+390]
  0f31f	50		 push	 eax
  0f320	8d 86 f0 00 00
	00		 lea	 eax, DWORD PTR [esi+240]
  0f326	50		 push	 eax
  0f327	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f32c	a3 04 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+4, eax

; 18234: #endif
; 18235: 
; 18236: 							tradeWndFontNo[2] = StockDispBuffer(x + 452 + 20, y + 63 + 8, DISP_PRIO_IME3, CG_TRADE_LEFT_BTN_UP + tradeWndBtnFlag[2], 2);

  0f331	8d 77 47	 lea	 esi, DWORD PTR [edi+71]
  0f334	a1 08 00 00 00	 mov	 eax, DWORD PTR ?tradeWndBtnFlag@@3PAHA+8
  0f339	6a 02		 push	 2
  0f33b	05 44 66 00 00	 add	 eax, 26180		; 00006644H
  0f340	50		 push	 eax
  0f341	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0f347	6a 69		 push	 105			; 00000069H
  0f349	05 d8 01 00 00	 add	 eax, 472		; 000001d8H
  0f34e	56		 push	 esi
  0f34f	50		 push	 eax
  0f350	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f355	a3 08 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+8, eax

; 18237: 							tradeWndFontNo[3] = StockDispBuffer(x + 486 + 20, y + 63 + 8, DISP_PRIO_IME3, CG_TRADE_RIGHT_BTN_UP + tradeWndBtnFlag[3], 2);

  0f35a	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?tradeWndBtnFlag@@3PAHA+12
  0f35f	6a 02		 push	 2
  0f361	05 46 66 00 00	 add	 eax, 26182		; 00006646H
  0f366	50		 push	 eax
  0f367	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0f36d	6a 69		 push	 105			; 00000069H
  0f36f	05 fa 01 00 00	 add	 eax, 506		; 000001faH
  0f374	56		 push	 esi
  0f375	50		 push	 eax
  0f376	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f37b	a3 0c 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+12, eax

; 18238: 							tradeWndFontNo[4] = StockDispBuffer(x + 554 - 94, y + 93 + 106, DISP_PRIO_IME3, CG_TRADE_UP_BTN_UP + tradeWndBtnFlag[4], 2);

  0f380	8d b7 c7 00 00
	00		 lea	 esi, DWORD PTR [edi+199]
  0f386	a1 10 00 00 00	 mov	 eax, DWORD PTR ?tradeWndBtnFlag@@3PAHA+16
  0f38b	6a 02		 push	 2
  0f38d	05 d0 65 00 00	 add	 eax, 26064		; 000065d0H
  0f392	50		 push	 eax
  0f393	8b 85 08 ba ff
	ff		 mov	 eax, DWORD PTR _x$3$[ebp]
  0f399	6a 69		 push	 105			; 00000069H
  0f39b	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  0f3a0	56		 push	 esi
  0f3a1	50		 push	 eax
  0f3a2	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f3a7	83 c4 50	 add	 esp, 80			; 00000050H
  0f3aa	a3 10 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+16, eax

; 18239: 							tradeWndFontNo[5] = StockDispBuffer(x + 560 - 94, y + 93 + 106, DISP_PRIO_IME3, CG_TRADE_DOWN_BTN_UP + tradeWndBtnFlag[5], 2);

  0f3af	a1 14 00 00 00	 mov	 eax, DWORD PTR ?tradeWndBtnFlag@@3PAHA+20
  0f3b4	05 d2 65 00 00	 add	 eax, 26066		; 000065d2H
  0f3b9	6a 02		 push	 2
  0f3bb	50		 push	 eax
  0f3bc	6a 69		 push	 105			; 00000069H
  0f3be	56		 push	 esi
  0f3bf	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0f3c5	8d 86 d2 01 00
	00		 lea	 eax, DWORD PTR [esi+466]
  0f3cb	50		 push	 eax
  0f3cc	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f3d1	83 c4 14	 add	 esp, 20			; 00000014H
  0f3d4	a3 14 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+20, eax

; 18240: #ifdef _CHANGETRADERULE		   // (ä¸å¯å¼) Syu ADD äº¤æè§åä¿®è®¢
; 18241: 							if (TradeBtnflag == false)

  0f3d9	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?TradeBtnflag@@3_NA, 0 ; TradeBtnflag
  0f3e0	75 2a		 jne	 SHORT $LN1807@MenuProc

; 18242: 								tradeWndFontNo[6] = StockDispBuffer(x + 562 - 62 + 25, y + 148 + 108 + 8, DISP_PRIO_IME3, CG_TRADE_PUT_BTN_UP + tradeWndBtnFlag[6], 2);

  0f3e2	a1 18 00 00 00	 mov	 eax, DWORD PTR ?tradeWndBtnFlag@@3PAHA+24
  0f3e7	6a 02		 push	 2
  0f3e9	05 ce 65 00 00	 add	 eax, 26062		; 000065ceH
  0f3ee	50		 push	 eax
  0f3ef	6a 69		 push	 105			; 00000069H
  0f3f1	8d 87 08 01 00
	00		 lea	 eax, DWORD PTR [edi+264]
  0f3f7	50		 push	 eax
  0f3f8	8d 86 0d 02 00
	00		 lea	 eax, DWORD PTR [esi+525]
  0f3fe	50		 push	 eax
  0f3ff	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f404	83 c4 14	 add	 esp, 20			; 00000014H
  0f407	a3 18 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+24, eax
$LN1807@MenuProc:

; 18243: #else
; 18244: 							tradeWndFontNo[6] = StockDispBuffer(x + 562 - 62 + 25, y + 148 + 108 + 8, DISP_PRIO_IME3, CG_TRADE_PUT_BTN_UP + tradeWndBtnFlag[6], 2);
; 18245: #endif
; 18246: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 18247: 							//åç§»
; 18248: 							tradeWndFontNo[7] = StockDispBuffer(x + 365 - 62 + 25, y + 190 + 108 + 8, DISP_PRIO_IME3, CG_TRADE_PUT_BTN_UP + tradeWndBtnFlag[7], 2);

  0f40c	a1 1c 00 00 00	 mov	 eax, DWORD PTR ?tradeWndBtnFlag@@3PAHA+28
  0f411	6a 02		 push	 2
  0f413	05 ce 65 00 00	 add	 eax, 26062		; 000065ceH
  0f418	50		 push	 eax
  0f419	6a 69		 push	 105			; 00000069H
  0f41b	8d 87 32 01 00
	00		 lea	 eax, DWORD PTR [edi+306]
  0f421	50		 push	 eax
  0f422	8d 86 48 01 00
	00		 lea	 eax, DWORD PTR [esi+328]
  0f428	50		 push	 eax
  0f429	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18249: #endif
; 18250: #ifndef _CHANGETRADERULE		   // (ä¸å¯å¼) Syu ADD äº¤æè§åä¿®è®¢
; 18251: 							tradeWndFontNo[8] = StockDispBuffer(x + 55 + 25, y + 190 + 18, DISP_PRIO_IME3, CG_MAIL_WND_CLEAR_BTN_UP + tradeWndBtnFlag[8], 2);
; 18252: #endif
; 18253: 
; 18254: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 18255: 							//åç§»
; 18256: 							//äº¤ææ¾ç¤ºåæ¹åç§°
; 18257: 							StockFontBuffer(x + 5, y + 193, FONT_PRIO_FRONT, FONT_PAL_PURPLE, pc.name, 0);

  0f42e	6a 00		 push	 0
  0f430	68 70 00 00 00	 push	 OFFSET ?pc@@3UPC@@A+112
  0f435	6a 02		 push	 2
  0f437	a3 1c 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+28, eax
  0f43c	83 c6 05	 add	 esi, 5
  0f43f	6a 01		 push	 1
  0f441	8d 87 c1 00 00
	00		 lea	 eax, DWORD PTR [edi+193]
  0f447	50		 push	 eax
  0f448	56		 push	 esi
  0f449	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18258: 							StockFontBuffer(x + 5, y + 6, FONT_PRIO_FRONT, FONT_PAL_PURPLE, opp_name, 0);

  0f44e	6a 00		 push	 0
  0f450	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  0f455	6a 02		 push	 2
  0f457	6a 01		 push	 1
  0f459	8d 47 06	 lea	 eax, DWORD PTR [edi+6]
  0f45c	50		 push	 eax
  0f45d	56		 push	 esi
  0f45e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18259: 							//æ£è§è§çªé®
; 18260: 							tradeWndFontNo[21] = StockDispBuffer(x + 150, y + 390, DISP_PRIO_IME3, CG_TRADE_VIEW_BTN, 2);

  0f463	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0f469	8d 87 86 01 00
	00		 lea	 eax, DWORD PTR [edi+390]
  0f46f	83 c4 44	 add	 esp, 68			; 00000044H
  0f472	6a 02		 push	 2
  0f474	68 eb 66 00 00	 push	 26347			; 000066ebH
  0f479	6a 69		 push	 105			; 00000069H
  0f47b	50		 push	 eax
  0f47c	8d 86 96 00 00
	00		 lea	 eax, DWORD PTR [esi+150]
  0f482	50		 push	 eax
  0f483	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18261: 							//ææ¹å·è½´ææ³é®
; 18262: 							tradeWndFontNo[18] = StockDispBuffer(x + 302, y + 42, DISP_PRIO_IME3, CG_TRADE_SCROLL_UP, 2);

  0f488	6a 02		 push	 2
  0f48a	68 db 66 00 00	 push	 26331			; 000066dbH
  0f48f	a3 54 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+84, eax
  0f494	81 c6 2e 01 00
	00		 add	 esi, 302		; 0000012eH
  0f49a	6a 69		 push	 105			; 00000069H
  0f49c	8d 47 2a	 lea	 eax, DWORD PTR [edi+42]
  0f49f	50		 push	 eax
  0f4a0	56		 push	 esi
  0f4a1	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18263: 							//ææ¹å·è½´ä¸ç§»é®
; 18264: 							tradeWndFontNo[19] = StockDispBuffer(x + 302, y + 176, DISP_PRIO_IME3, CG_TRADE_SCROLL_DOWN, 2);

  0f4a6	6a 02		 push	 2
  0f4a8	68 dc 66 00 00	 push	 26332			; 000066dcH
  0f4ad	a3 48 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+72, eax
  0f4b2	8d 87 b0 00 00
	00		 lea	 eax, DWORD PTR [edi+176]
  0f4b8	6a 69		 push	 105			; 00000069H
  0f4ba	50		 push	 eax
  0f4bb	56		 push	 esi
  0f4bc	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18265: 							//ææ¹å·è½´ä¸ç§»é®
; 18266: 							//							tradeWndFontNo[ 20 ] = StockDispBuffer( x+302, y+drag1Y, DISP_PRIO_IME3, CG_TRADE_SCROLL_BTN, 2 );
; 18267: 							//å¯¹æ¹å·è½´ææ³é®
; 18268: 							tradeWndFontNo[15] = StockDispBuffer(x + 302, y + 232, DISP_PRIO_IME3, CG_TRADE_SCROLL_UP, 2);

  0f4c1	6a 02		 push	 2
  0f4c3	68 db 66 00 00	 push	 26331			; 000066dbH
  0f4c8	a3 4c 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+76, eax
  0f4cd	8d 87 e8 00 00
	00		 lea	 eax, DWORD PTR [edi+232]
  0f4d3	6a 69		 push	 105			; 00000069H
  0f4d5	50		 push	 eax
  0f4d6	56		 push	 esi
  0f4d7	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f4dc	83 c4 50	 add	 esp, 80			; 00000050H
  0f4df	a3 3c 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+60, eax

; 18269: 							//å¯¹æ¹å·è½´ä¸ç§»é®
; 18270: 							tradeWndFontNo[16] = StockDispBuffer(x + 302, y + 366, DISP_PRIO_IME3, CG_TRADE_SCROLL_DOWN, 2);

  0f4e4	8d 87 6e 01 00
	00		 lea	 eax, DWORD PTR [edi+366]
  0f4ea	6a 02		 push	 2
  0f4ec	68 dc 66 00 00	 push	 26332			; 000066dcH
  0f4f1	6a 69		 push	 105			; 00000069H
  0f4f3	50		 push	 eax
  0f4f4	56		 push	 esi
  0f4f5	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18271: 							//å¯¹æ¹å·è½´ä¸ç§»é®
; 18272: 							//							tradeWndFontNo[ 17 ] = StockDispBuffer( x+302, y+drag2Y, DISP_PRIO_IME3, CG_TRADE_SCROLL_BTN, 2 );
; 18273: #endif
; 18274: 
; 18275: 						// åè®¾æ¸¸æ å¨éé¢ä½ç½®æ¶
; 18276: 							if (MakeHitBox(x + 530, y + 115, x + +530 + 86, y + 115 + 25, DISP_PRIO_IME3) == TRUE)

  0f4fa	8b b5 08 ba ff
	ff		 mov	 esi, DWORD PTR _x$3$[ebp]
  0f500	a3 40 00 00 00	 mov	 DWORD PTR ?tradeWndFontNo@@3PAHA+64, eax
  0f505	8d 87 8c 00 00
	00		 lea	 eax, DWORD PTR [edi+140]
  0f50b	6a 69		 push	 105			; 00000069H
  0f50d	50		 push	 eax
  0f50e	8d 86 68 02 00
	00		 lea	 eax, DWORD PTR [esi+616]
  0f514	50		 push	 eax
  0f515	8d 47 73	 lea	 eax, DWORD PTR [edi+115]
  0f518	50		 push	 eax
  0f519	8d 86 12 02 00
	00		 lea	 eax, DWORD PTR [esi+530]
  0f51f	50		 push	 eax
  0f520	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  0f525	83 c4 28	 add	 esp, 40			; 00000028H
  0f528	83 f8 01	 cmp	 eax, 1
  0f52b	75 43		 jne	 SHORT $LN1809@MenuProc

; 18277: 							{
; 18278: 								// æä¸æ»é¼ åå¾focusååå§å
; 18279: 								if (mouse.onceState & MOUSE_LEFT_CRICK)

  0f52d	84 05 2c 00 00
	00		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, al
  0f533	74 3b		 je	 SHORT $LN1809@MenuProc

; 18280: 								{
; 18281: 									strcpy(TradeBuffer.buffer, "");
; 18282: 									TradeBuffer.buffer[0] = NULL;
; 18283: 									TradeBuffer.cursor = 0;
; 18284: 									TradeBuffer.cnt = 0;
; 18285: 									Tradeflag = true;
; 18286: 									GetKeyInputFocus(&TradeBuffer);

  0f535	68 00 00 00 00	 push	 OFFSET ?TradeBuffer@@3USTR_BUFFER@@A ; TradeBuffer
  0f53a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TradeBuffer@@3USTR_BUFFER@@A, 0
  0f541	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?TradeBuffer@@3USTR_BUFFER@@A+265, 0
  0f548	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?TradeBuffer@@3USTR_BUFFER@@A+263, 0
  0f54f	a2 00 00 00 00	 mov	 BYTE PTR ?Tradeflag@@3_NA, al ; Tradeflag
  0f554	e8 00 00 00 00	 call	 ?GetKeyInputFocus@@YAXPAUSTR_BUFFER@@@Z ; GetKeyInputFocus

; 18287: 									play_se(217, 320, 240);

  0f559	68 f0 00 00 00	 push	 240			; 000000f0H
  0f55e	68 40 01 00 00	 push	 320			; 00000140H
  0f563	68 d9 00 00 00	 push	 217			; 000000d9H
  0f568	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  0f56d	83 c4 10	 add	 esp, 16			; 00000010H
$LN1809@MenuProc:

; 18288: 								}
; 18289: 							}
; 18290: 							// focuså¨æå¨è¾å¥æ¶æ¾ç¤ºbuffer
; 18291: 							if (Tradeflag == true)

  0f570	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?Tradeflag@@3_NA, 1 ; Tradeflag
  0f577	0f 85 87 00 00
	00		 jne	 $LN1811@MenuProc

; 18292: 							{
; 18293: 								TradeBuffer.x = pActMenuWnd4->x + 600 - strlen(TradeBuffer.buffer) * 7;

  0f57d	ba 00 00 00 00	 mov	 edx, OFFSET ?TradeBuffer@@3USTR_BUFFER@@A ; TradeBuffer
  0f582	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL4375@MenuProc:
  0f585	8a 02		 mov	 al, BYTE PTR [edx]
  0f587	42		 inc	 edx
  0f588	84 c0		 test	 al, al
  0f58a	75 f9		 jne	 SHORT $LL4375@MenuProc
  0f58c	2b d1		 sub	 edx, ecx

; 18294: 								TradeBuffer.y = pActMenuWnd4->y + 120;
; 18295: 								StockFontBuffer2(&TradeBuffer);

  0f58e	68 00 00 00 00	 push	 OFFSET ?TradeBuffer@@3USTR_BUFFER@@A ; TradeBuffer
  0f593	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*8]
  0f59a	2b ca		 sub	 ecx, edx
  0f59c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pActMenuWnd4@@3PAUaction@@A ; pActMenuWnd4
  0f5a2	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0f5a5	2b c1		 sub	 eax, ecx
  0f5a7	05 58 02 00 00	 add	 eax, 600		; 00000258H
  0f5ac	a3 0c 01 00 00	 mov	 DWORD PTR ?TradeBuffer@@3USTR_BUFFER@@A+268, eax
  0f5b1	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0f5b4	83 c0 78	 add	 eax, 120		; 00000078H
  0f5b7	a3 10 01 00 00	 mov	 DWORD PTR ?TradeBuffer@@3USTR_BUFFER@@A+272, eax
  0f5bc	e8 00 00 00 00	 call	 ?StockFontBuffer2@@YAXPAUSTR_BUFFER@@@Z ; StockFontBuffer2

; 18296: 								tradeWndDropGold = atoi(TradeBuffer.buffer);

  0f5c1	68 00 00 00 00	 push	 OFFSET ?TradeBuffer@@3USTR_BUFFER@@A ; TradeBuffer
  0f5c6	e8 00 00 00 00	 call	 _atoi

; 18297: 								if (atoi(TradeBuffer.buffer) >= pc.gold)

  0f5cb	68 00 00 00 00	 push	 OFFSET ?TradeBuffer@@3USTR_BUFFER@@A ; TradeBuffer
  0f5d0	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGold@@3HA, eax
  0f5d5	e8 00 00 00 00	 call	 _atoi
  0f5da	8b 0d 60 00 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+96
  0f5e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  0f5e3	3b c1		 cmp	 eax, ecx
  0f5e5	7c 1d		 jl	 SHORT $LN1811@MenuProc

; 18298: 								{
; 18299: 									sprintf(TradeBuffer.buffer, "%d", pc.gold);

  0f5e7	51		 push	 ecx
  0f5e8	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0f5ed	68 00 00 00 00	 push	 OFFSET ?TradeBuffer@@3USTR_BUFFER@@A ; TradeBuffer
  0f5f2	e8 00 00 00 00	 call	 _sprintf

; 18300: 									tradeWndDropGold = pc.gold;

  0f5f7	a1 60 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+96
  0f5fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  0f5ff	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGold@@3HA, eax
$LN1811@MenuProc:

; 18301: 								}
; 18302: 							}
; 18303: 
; 18304: 							if (pc.trade_confirm == 2)

  0f604	a1 80 a1 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+41344
  0f609	8d 8f c2 00 00
	00		 lea	 ecx, DWORD PTR [edi+194]
  0f60f	83 f8 02	 cmp	 eax, 2
  0f612	75 26		 jne	 SHORT $LN3322@MenuProc

; 18305: 							{
; 18306: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 18307: 								//åç§»
; 18308: 								StockFontBuffer(x + 220, y + 194, FONT_PRIO_FRONT, FONT_PAL_RED, "ê±°ëê¸ì¡", 0);

  0f614	6a 00		 push	 0
  0f616	68 00 00 00 00	 push	 OFFSET ??_C@_08KMGGBBNI@?$LA?E?$LH?$KB?$LB?$NN?$LO?W@
  0f61b	6a 06		 push	 6
  0f61d	6a 01		 push	 1
  0f61f	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
  0f625	51		 push	 ecx
  0f626	50		 push	 eax
  0f627	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f62c	a1 80 a1 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+41344
  0f631	8d 8f c2 00 00
	00		 lea	 ecx, DWORD PTR [edi+194]
  0f637	83 c4 18	 add	 esp, 24			; 00000018H
$LN3322@MenuProc:

; 18309: 							}
; 18310: 							if (pc.trade_confirm == 3)

  0f63a	8d 96 d2 00 00
	00		 lea	 edx, DWORD PTR [esi+210]
  0f640	83 f8 03	 cmp	 eax, 3
  0f643	75 20		 jne	 SHORT $LN3323@MenuProc

; 18311: 							{
; 18312: 								StockFontBuffer(x + 210, y + 194, FONT_PRIO_FRONT, FONT_PAL_RED, "ìëë°© ê±°ëê¸ì¡", 0);

  0f645	6a 00		 push	 0
  0f647	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BJIPOAAB@?$LL?s?$LE?k?$LJ?f?5?$LA?E?$LH?$KB?$LB?$NN?$LO?W@
  0f64c	6a 06		 push	 6
  0f64e	6a 01		 push	 1
  0f650	51		 push	 ecx
  0f651	52		 push	 edx
  0f652	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f657	a1 80 a1 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+41344
  0f65c	8d 96 d2 00 00
	00		 lea	 edx, DWORD PTR [esi+210]
  0f662	83 c4 18	 add	 esp, 24			; 00000018H
$LN3323@MenuProc:

; 18313: 							}
; 18314: 							if (pc.trade_confirm == 4)

  0f665	83 f8 04	 cmp	 eax, 4
  0f668	75 38		 jne	 SHORT $LN1816@MenuProc

; 18315: 							{
; 18316: 								if (tradeStatus == 2)

  0f66a	66 83 3d 00 00
	00 00 02	 cmp	 WORD PTR ?tradeStatus@@3FA, 2 ; tradeStatus
  0f672	8d 87 c2 00 00
	00		 lea	 eax, DWORD PTR [edi+194]
  0f678	6a 00		 push	 0
  0f67a	75 13		 jne	 SHORT $LN1815@MenuProc

; 18317: 									StockFontBuffer(x + 220, y + 194, FONT_PRIO_FRONT, FONT_PAL_RED, "ê±°ëíì¸", 0);

  0f67c	68 00 00 00 00	 push	 OFFSET ??_C@_08OEEBHAFG@?$LA?E?$LH?$KB?H?$KO?$MA?N@
  0f681	6a 06		 push	 6
  0f683	6a 01		 push	 1
  0f685	50		 push	 eax
  0f686	8d 86 dc 00 00
	00		 lea	 eax, DWORD PTR [esi+220]
  0f68c	50		 push	 eax
  0f68d	eb 0b		 jmp	 SHORT $LN5149@MenuProc
$LN1815@MenuProc:

; 18318: 								else
; 18319: 									StockFontBuffer(x + 210, y + 194, FONT_PRIO_FRONT, FONT_PAL_RED, "ìµì¢ ê±°ëíì¸", 0);

  0f68f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ONPMCPGG@?C?V?A?$LO?5?$LA?E?$LH?$KB?H?$KO?$MA?N@
  0f694	6a 06		 push	 6
  0f696	6a 01		 push	 1
  0f698	50		 push	 eax
  0f699	52		 push	 edx
$LN5149@MenuProc:

; 18320: 							}
; 18321: #endif
; 18322: 						}
; 18323: 
; 18324: 						for (i = MAX_ITEM - 1; i >= MAX_ITEMSTART; i--)

  0f69a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f69f	83 c4 18	 add	 esp, 24			; 00000018H
$LN1816@MenuProc:
  0f6a2	b9 ac 06 00 00	 mov	 ecx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1708
  0f6a7	c7 85 00 ba ff
	ff 35 00 00 00	 mov	 DWORD PTR _i$34$[ebp], 53 ; 00000035H
  0f6b1	b8 56 50 00 00	 mov	 eax, OFFSET ?pc@@3UPC@@A+20566
  0f6b6	89 8d e8 b9 ff
	ff		 mov	 DWORD PTR tv39098[ebp], ecx
  0f6bc	ba b0 00 00 00	 mov	 edx, OFFSET ?itemflag@@3PAHA+176
  0f6c1	89 85 0c ba ff
	ff		 mov	 DWORD PTR tv39097[ebp], eax
  0f6c7	89 95 04 ba ff
	ff		 mov	 DWORD PTR tv39076[ebp], edx
  0f6cd	c7 85 f0 b9 ff
	ff 9c 97 00 00	 mov	 DWORD PTR tv39075[ebp], OFFSET ?tradeList@@3PAUtradelist@@A+38812
$LL458@MenuProc:

; 18325: 						{
; 18326: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 18327: 							//å·²éåäº¤æççæå°ç« 
; 18328: #ifdef _ITEM_PILENUMS
; 18329: 							if (itemflag[i - MAX_ITEMSTART] <= 0) {

  0f6d7	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0f6da	0f 8e f7 02 00
	00		 jle	 $LN456@MenuProc

; 18330: #else
; 18331: 							if (itemflag[i - MAX_ITEMSTART] == 1) {
; 18332: #endif
; 18333: 								//åæ¬ä¸ºæ¾ç¤ºåéå·å¹¶çä¸ç« 
; 18334: 								//StockDispBuffer( ItemBuffer[ i ].defX, ItemBuffer[ i ].defY, ItemBuffer[ i ].dispPrio, CG_TRADE_SEAL , 0 );
; 18335: 								//ä¿®æ­£ä¸ºéå·éèï¼ç´æ¥è·³è¿ä¸ååç»­æ¾ç¤º
; 18336: 								continue;
; 18337: 
; 18338: 							}
; 18339: #endif
; 18340: 
; 18341: 							if (MakeHitBox(x + ItemBuffer[i].defX - 35, y + ItemBuffer[i].defY - 22,
; 18342: 								x + ItemBuffer[i].defX + 15, y + ItemBuffer[i].defY + 28, DISP_PRIO_IME3) == TRUE)

  0f6e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  0f6e2	8d 47 1c	 lea	 eax, DWORD PTR [edi+28]
  0f6e5	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0f6e8	03 c2		 add	 eax, edx
  0f6ea	6a 69		 push	 105			; 00000069H
  0f6ec	50		 push	 eax
  0f6ed	8d 46 0f	 lea	 eax, DWORD PTR [esi+15]
  0f6f0	03 c1		 add	 eax, ecx
  0f6f2	50		 push	 eax
  0f6f3	8d 42 ea	 lea	 eax, DWORD PTR [edx-22]
  0f6f6	03 c7		 add	 eax, edi
  0f6f8	50		 push	 eax
  0f6f9	8d 41 dd	 lea	 eax, DWORD PTR [ecx-35]
  0f6fc	03 c6		 add	 eax, esi
  0f6fe	50		 push	 eax
  0f6ff	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  0f704	83 c4 14	 add	 esp, 20			; 00000014H
  0f707	83 f8 01	 cmp	 eax, 1
  0f70a	0f 85 c2 01 00
	00		 jne	 $LN1821@MenuProc

; 18343: 							{
; 18344: #ifdef _TELLCHANNEL
; 18345: 								// Terry fix 2003/12/16 for äº¤æè§çªå¼å¯æ¶,æ¾ç¤ºç©åè¯´æä¸æ¾ç¤ºè¾å¥æ³
; 18346: 								//TaskBarFlag = TRUE;è¿è¡ä¸è¦
; 18347: 								bShowItemExplain = TRUE; // æ°å¢è¿è¡
; 18348: 														 // end
; 18349: #endif
; 18350: 													 // è¯¥æ ä½æéå·çæåµ
; 18351: 								if (pc.item[i].useFlag == TRUE && ItemBuffer[i].mixFlag <= 2)

  0f710	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv39097[ebp]
  0f716	a3 00 00 00 00	 mov	 DWORD PTR ?bShowItemExplain@@3HA, eax ; bShowItemExplain
  0f71b	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39098[ebp]
  0f721	66 83 7a f6 01	 cmp	 WORD PTR [edx-10], 1
  0f726	0f 85 79 00 00
	00		 jne	 $LN1819@MenuProc
  0f72c	83 78 10 02	 cmp	 DWORD PTR [eax+16], 2
  0f730	0f 8f 6f 00 00
	00		 jg	 $LN1819@MenuProc

; 18352: 								{
; 18353: 									char *splitPoint = pc.item[i].memo;
; 18354: 									int color = pc.item[i].color;
; 18355: 									// äº¤æç©åè½å¦ä½¿ç¨Check
; 18356: 									if (pc.transmigration == 0 && pc.level < pc.item[i].level)

  0f736	66 83 3d f4 50
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A+20724, 0
  0f73e	8b 8a 1a ff ff
	ff		 mov	 ecx, DWORD PTR [edx-230]
  0f744	75 13		 jne	 SHORT $LN1820@MenuProc
  0f746	a1 38 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+56
  0f74b	3b 82 22 ff ff
	ff		 cmp	 eax, DWORD PTR [edx-222]
  0f751	b8 06 00 00 00	 mov	 eax, 6
  0f756	0f 4c c8	 cmovl	 ecx, eax
$LN1820@MenuProc:

; 18357: 										color = FONT_PAL_RED;
; 18358: 									// éå·åç§°æ¾ç¤º
; 18359: 									//JL800600
; 18360: 									StockFontBuffer(0, 460 + DISPLACEMENT_Y, FONT_PRIO_FRONT, color, pc.item[i].name, 0); //ìì´íì°½ ì´ë¦

  0f759	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  0f75e	6a 00		 push	 0
  0f760	52		 push	 edx
  0f761	51		 push	 ecx
  0f762	6a 01		 push	 1
  0f764	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  0f769	50		 push	 eax
  0f76a	6a 00		 push	 0
  0f76c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18361: 																														  // éå·è¯´æ
; 18362: 																														  //JL800600
; 18363: 									StockFontBuffer(160, 460 + DISPLACEMENT_Y, FONT_PRIO_FRONT, 0, splitPoint, 0); //ìì´íì°½ ì¤ëª

  0f771	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39097[ebp]
  0f777	6a 00		 push	 0
  0f779	83 c0 2e	 add	 eax, 46			; 0000002eH
  0f77c	50		 push	 eax
  0f77d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  0f782	6a 00		 push	 0
  0f784	6a 01		 push	 1
  0f786	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  0f78b	50		 push	 eax
  0f78c	68 a0 00 00 00	 push	 160			; 000000a0H
  0f791	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f796	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR tv39098[ebp]
  0f79c	83 c4 30	 add	 esp, 48			; 00000030H
  0f79f	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv39097[ebp]
$LN1819@MenuProc:

; 18364: 								}
; 18365: 								// å¨éå·ä¸ç¹ä¸¤ä¸çæåµ
; 18366: 								if (mouse.onceState & MOUSE_LEFT_DBL_CRICK)

  0f7a5	f6 05 2c 00 00
	00 10		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 16 ; 00000010H
  0f7ac	0f 84 20 01 00
	00		 je	 $LN1821@MenuProc

; 18367: 								{
; 18368: 									if (tradeStatus != 1)	return;

  0f7b2	66 83 3d 00 00
	00 00 01	 cmp	 WORD PTR ?tradeStatus@@3FA, 1 ; tradeStatus
  0f7ba	0f 85 46 1b 00
	00		 jne	 $LN1966@MenuProc

; 18369: 									if (pc.trade_confirm == 2 || pc.trade_confirm == 4) return;

  0f7c0	8b 0d 80 a1 00
	00		 mov	 ecx, DWORD PTR ?pc@@3UPC@@A+41344
  0f7c6	83 f9 02	 cmp	 ecx, 2
  0f7c9	0f 84 37 1b 00
	00		 je	 $LN1966@MenuProc
  0f7cf	83 f9 04	 cmp	 ecx, 4
  0f7d2	0f 84 2e 1b 00
	00		 je	 $LN1966@MenuProc

; 18370: 									// åæææ å³é­
; 18371: 									ItemBuffer[i].mixFlag = FALSE;
; 18372: 									// ç¡®è®¤è¯¥ä½ç½®æéå·
; 18373: 									if (pc.item[i].useFlag == TRUE) {

  0f7d8	66 83 7a f6 01	 cmp	 WORD PTR [edx-10], 1
  0f7dd	8b 8d 00 ba ff
	ff		 mov	 ecx, DWORD PTR _i$34$[ebp]
  0f7e3	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0f7ea	75 1a		 jne	 SHORT $LN4865@MenuProc

; 18374: 										ItemBuffer[i].dragFlag = TRUE;

  0f7ec	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1

; 18375: 										mouse.itemNo = i;

  0f7f3	8b c1		 mov	 eax, ecx
  0f7f5	a3 48 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, eax

; 18376: 										// éå·éæ©åæå
; 18377: 										itemNo = -1;

  0f7fa	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1
  0f804	eb 05		 jmp	 SHORT $LN1825@MenuProc
$LN4865@MenuProc:

; 18370: 									// åæææ å³é­
; 18371: 									ItemBuffer[i].mixFlag = FALSE;
; 18372: 									// ç¡®è®¤è¯¥ä½ç½®æéå·
; 18373: 									if (pc.item[i].useFlag == TRUE) {

  0f806	a1 48 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+72
$LN1825@MenuProc:

; 18378: 									}
; 18379: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 18380: 									if (mouse.itemNo != -1)

  0f80b	83 f8 ff	 cmp	 eax, -1
  0f80e	0f 84 b4 00 00
	00		 je	 $LN1826@MenuProc

; 18381: 									{
; 18382: 
; 18383: 										char buf[1024];
; 18384: 										tradeList[i - 4].kind = 'I';

  0f814	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR tv39075[ebp]
  0f81a	c6 40 fc 49	 mov	 BYTE PTR [eax-4], 73	; 00000049H

; 18385: 										tradeList[i - 4].data = i;

  0f81e	89 08		 mov	 DWORD PTR [eax], ecx

; 18386: 										strcpy(tradeList[i - 4].name, pc.item[i].name);

  0f820	2b c2		 sub	 eax, edx
  0f822	8b ca		 mov	 ecx, edx
  0f824	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv37975[ebp], eax
  0f82a	8b d0		 mov	 edx, eax
  0f82c	0f 1f 40 00	 npad	 4
$LL2029@MenuProc:
  0f830	8a 01		 mov	 al, BYTE PTR [ecx]
  0f832	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0f835	88 44 0a 03	 mov	 BYTE PTR [edx+ecx+3], al
  0f839	84 c0		 test	 al, al
  0f83b	75 f3		 jne	 SHORT $LL2029@MenuProc

; 18387: 										strcpy(tradeList[i - 4].damage, pc.item[i].damage);

  0f83d	8b 8d 0c ba ff
	ff		 mov	 ecx, DWORD PTR tv39097[ebp]
  0f843	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR tv39075[ebp]
  0f849	81 c1 83 00 00
	00		 add	 ecx, 131		; 00000083H
  0f84f	2b c1		 sub	 eax, ecx
  0f851	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv37976[ebp], eax
  0f857	8b d0		 mov	 edx, eax
  0f859	0f 1f 80 00 00
	00 00		 npad	 7
$LL2030@MenuProc:
  0f860	8a 01		 mov	 al, BYTE PTR [ecx]
  0f862	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0f865	88 84 0a 03 01
	00 00		 mov	 BYTE PTR [edx+ecx+259], al
  0f86c	84 c0		 test	 al, al
  0f86e	75 f0		 jne	 SHORT $LL2030@MenuProc

; 18388: #ifdef _ITEM_PILENUMS
; 18389: 										itemflag[i - MAX_ITEMSTART]--;

  0f870	8b 8d 04 ba ff
	ff		 mov	 ecx, DWORD PTR tv39076[ebp]

; 18390: #else
; 18391: 										itemflag[i - MAX_ITEMSTART] = 1;
; 18392: #endif
; 18393: #ifdef _ITEM_PILENUMS
; 18394: 										tradeList[i - 4].pilenum = pc.item[i].pile - itemflag[i - MAX_ITEMSTART];

  0f876	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv39097[ebp]

; 18395: #endif
; 18396: 										sprintf(buf, "T|%s|%s|I|1|%d", opp_sockfd, opp_name, i);

  0f87c	ff b5 00 ba ff
	ff		 push	 DWORD PTR _i$34$[ebp]
  0f882	ff 09		 dec	 DWORD PTR [ecx]
  0f884	8b 82 26 ff ff
	ff		 mov	 eax, DWORD PTR [edx-218]
  0f88a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0f88c	8b 8d f0 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39075[ebp]
  0f892	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  0f897	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  0f89c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FBIHNOAG@T?$HM?$CFs?$HM?$CFs?$HMI?$HM1?$HM?$CFd@
  0f8a1	89 81 0c 03 00
	00		 mov	 DWORD PTR [ecx+780], eax
  0f8a7	8d 85 50 d8 ff
	ff		 lea	 eax, DWORD PTR _buf$34[ebp]
  0f8ad	50		 push	 eax
  0f8ae	e8 00 00 00 00	 call	 _sprintf

; 18397: 										lssproto_TD_send(sockfd, buf);

  0f8b3	8d 85 50 d8 ff
	ff		 lea	 eax, DWORD PTR _buf$34[ebp]
  0f8b9	50		 push	 eax
  0f8ba	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0f8c0	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send
  0f8c5	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1826@MenuProc:

; 18398: 
; 18399: 									}
; 18400: #endif
; 18401: 									mouse.itemNo = -1;

  0f8c8	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
$LN1821@MenuProc:

; 18402: 								}
; 18403: 							}
; 18404: 							if (pc.item[i].useFlag == TRUE)

  0f8d2	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39097[ebp]
  0f8d8	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39098[ebp]
  0f8de	66 83 78 f6 01	 cmp	 WORD PTR [eax-10], 1
  0f8e3	0f 85 e8 00 00
	00		 jne	 $LN5057@MenuProc

; 18405: 							{
; 18406: 								// éåæç©åçæåµ
; 18407: 								if (ItemBuffer[i].mixFlag <= 2) {

  0f8e9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0f8ec	83 fa 02	 cmp	 edx, 2
  0f8ef	7f 67		 jg	 SHORT $LN1828@MenuProc

; 18408: 									char buf[256];
; 18409: 									// éå·æ¾ç¤º
; 18410: 									StockDispBuffer(x + ItemBuffer[i].defX - 8, y + ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);

  0f8f1	6a 00		 push	 0
  0f8f3	ff b0 1e ff ff
	ff		 push	 DWORD PTR [eax-226]
  0f8f9	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  0f8fd	50		 push	 eax
  0f8fe	8b 01		 mov	 eax, DWORD PTR [ecx]
  0f900	03 c7		 add	 eax, edi
  0f902	50		 push	 eax
  0f903	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0f906	83 c0 f8	 add	 eax, -8			; fffffff8H
  0f909	03 c6		 add	 eax, esi
  0f90b	50		 push	 eax
  0f90c	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18411: 
; 18412: 
; 18413: #ifdef _ITEM_PILENUMS
; 18414: 									sprintf(buf, "%d", itemflag[i - MAX_ITEMSTART]);

  0f911	8b 85 04 ba ff
	ff		 mov	 eax, DWORD PTR tv39076[ebp]
  0f917	ff 30		 push	 DWORD PTR [eax]
  0f919	8d 85 50 ec ff
	ff		 lea	 eax, DWORD PTR _buf$42[ebp]
  0f91f	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0f924	50		 push	 eax
  0f925	e8 00 00 00 00	 call	 _sprintf

; 18415: 									StockFontBuffer(x + ItemBuffer[i].defX - 8, y + ItemBuffer[i].defY, FONT_PRIO_FRONT, FONT_PAL_RED, buf, 0);

  0f92a	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39098[ebp]
  0f930	8d 85 50 ec ff
	ff		 lea	 eax, DWORD PTR _buf$42[ebp]
  0f936	6a 00		 push	 0
  0f938	50		 push	 eax
  0f939	6a 06		 push	 6
  0f93b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0f93d	03 c7		 add	 eax, edi
  0f93f	6a 01		 push	 1
  0f941	50		 push	 eax
  0f942	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0f945	83 c0 f8	 add	 eax, -8			; fffffff8H
  0f948	03 c6		 add	 eax, esi
  0f94a	50		 push	 eax
  0f94b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0f950	83 c4 38	 add	 esp, 56			; 00000038H

; 18416: #endif
; 18417: 
; 18418: 								}

  0f953	e9 6d 00 00 00	 jmp	 $LN5168@MenuProc
$LN1828@MenuProc:

; 18419: 								else if (ItemBuffer[i].mixFlag == 10)

  0f958	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0f95b	75 1d		 jne	 SHORT $LN1830@MenuProc
$LN5150@MenuProc:

; 18320: 							}
; 18321: #endif
; 18322: 						}
; 18323: 
; 18324: 						for (i = MAX_ITEM - 1; i >= MAX_ITEMSTART; i--)

  0f95d	6a 00		 push	 0
  0f95f	ff b0 1e ff ff
	ff		 push	 DWORD PTR [eax-226]
  0f965	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  0f969	50		 push	 eax
  0f96a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0f96c	03 c7		 add	 eax, edi
  0f96e	50		 push	 eax
  0f96f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0f972	83 c0 f8	 add	 eax, -8			; fffffff8H
  0f975	03 c6		 add	 eax, esi
  0f977	50		 push	 eax
  0f978	eb 43		 jmp	 SHORT $LN5151@MenuProc
$LN1830@MenuProc:

; 18420: 									StockDispBuffer(x + ItemBuffer[i].defX - 8, y + ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);
; 18421: 								else if (ItemBuffer[i].mixFlag == 11)

  0f97a	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  0f97d	74 de		 je	 SHORT $LN5150@MenuProc

; 18422: 									StockDispBuffer(x + ItemBuffer[i].defX - 8, y + ItemBuffer[i].defY, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);
; 18423: 								else if (ItemBuffer[i].mixFlag == 3)

  0f97f	83 fa 03	 cmp	 edx, 3
  0f982	75 1c		 jne	 SHORT $LN1834@MenuProc

; 18424: 									StockDispBuffer(pActPet2->x, pActPet2->y - 16, DISP_PRIO_DRAG, pc.item[i].graNo, 0);

  0f984	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pActPet2@@3PAUaction@@A
  0f98a	6a 00		 push	 0
  0f98c	ff b0 1e ff ff
	ff		 push	 DWORD PTR [eax-226]
  0f992	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0f995	6a 70		 push	 112			; 00000070H
  0f997	83 e8 10	 sub	 eax, 16			; 00000010H
  0f99a	50		 push	 eax
  0f99b	ff 71 18	 push	 DWORD PTR [ecx+24]
  0f99e	eb 1d		 jmp	 SHORT $LN5151@MenuProc
$LN1834@MenuProc:

; 18425: 								else if (ItemBuffer[i].mixFlag == 4)

  0f9a0	83 fa 04	 cmp	 edx, 4
  0f9a3	75 2c		 jne	 SHORT $LN5057@MenuProc

; 18426: 									StockDispBuffer(pActPet2->x, pActPet2->y, ItemBuffer[i].dispPrio, pc.item[i].graNo, 0);

  0f9a5	6a 00		 push	 0
  0f9a7	ff b0 1e ff ff
	ff		 push	 DWORD PTR [eax-226]
  0f9ad	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  0f9b1	50		 push	 eax
  0f9b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet2@@3PAUaction@@A
  0f9b7	ff 70 1c	 push	 DWORD PTR [eax+28]
  0f9ba	ff 70 18	 push	 DWORD PTR [eax+24]
$LN5151@MenuProc:

; 18320: 							}
; 18321: #endif
; 18322: 						}
; 18323: 
; 18324: 						for (i = MAX_ITEM - 1; i >= MAX_ITEMSTART; i--)

  0f9bd	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0f9c2	83 c4 14	 add	 esp, 20			; 00000014H
$LN5168@MenuProc:
  0f9c5	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR tv39098[ebp]
  0f9cb	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv39097[ebp]
$LN5057@MenuProc:
  0f9d1	8b 95 04 ba ff
	ff		 mov	 edx, DWORD PTR tv39076[ebp]
$LN456@MenuProc:
  0f9d7	ff 8d 00 ba ff
	ff		 dec	 DWORD PTR _i$34$[ebp]
  0f9dd	83 ea 04	 sub	 edx, 4
  0f9e0	81 ad f0 b9 ff
	ff 18 03 00 00	 sub	 DWORD PTR tv39075[ebp], 792 ; 00000318H
  0f9ea	2d 7c 01 00 00	 sub	 eax, 380		; 0000017cH
  0f9ef	83 e9 20	 sub	 ecx, 32			; 00000020H
  0f9f2	89 95 04 ba ff
	ff		 mov	 DWORD PTR tv39076[ebp], edx
  0f9f8	89 85 0c ba ff
	ff		 mov	 DWORD PTR tv39097[ebp], eax
  0f9fe	89 8d e8 b9 ff
	ff		 mov	 DWORD PTR tv39098[ebp], ecx
  0fa04	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?itemflag@@3PAHA
  0fa0a	0f 8d c7 fc ff
	ff		 jge	 $LL458@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  0fa10	e9 cf 17 00 00	 jmp	 $LN1913@MenuProc
$LN1673@MenuProc:

; 18427: 
; 18428: 							}
; 18429: 
; 18430: 						}
; 18431: 					}
; 18432: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 18433: 				}
; 18434: 				// æ£è§è§çªåå®¹
; 18435: 				else  if (SecondTradeWndflag == true)

  0fa15	80 3d 00 00 00
	00 01		 cmp	 BYTE PTR ?SecondTradeWndflag@@3_NA, 1 ; SecondTradeWndflag
  0fa1c	0f 85 c2 17 00
	00		 jne	 $LN1913@MenuProc

; 18436: 				{
; 18437: 					MainTradeWndflag = false;
; 18438: 					if (pActMenuWnd4 != NULL && SecondTradeWnd != NULL)

  0fa22	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?SecondTradeWnd@@3PAUaction@@A ; SecondTradeWnd
  0fa28	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?MainTradeWndflag@@3_NA, 0 ; MainTradeWndflag
  0fa2f	85 ff		 test	 edi, edi
  0fa31	0f 84 ad 17 00
	00		 je	 $LN1913@MenuProc

; 18439: 					{
; 18440: 						x = SecondTradeWnd->x;
; 18441: 						y = SecondTradeWnd->y;
; 18442: #ifdef _TRADETALKWND				// (ä¸å¯å¼) Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 18443: 						//å¯¹è¯æ¡åå®¹
; 18444: 						if (tradetalkwndflag != false) {

  0fa37	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?tradetalkwndflag@@3_NA, 0 ; tradetalkwndflag
  0fa3e	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  0fa41	8b 7f 1c	 mov	 edi, DWORD PTR [edi+28]
  0fa44	89 b5 e8 b9 ff
	ff		 mov	 DWORD PTR _x$4$[ebp], esi
  0fa4a	89 bd ec b9 ff
	ff		 mov	 DWORD PTR _y$12$[ebp], edi
  0fa50	0f 84 86 00 00
	00		 je	 $LN1839@MenuProc

; 18445: 							for (i = 3; i >= 0; i--) {

  0fa56	bf 3c 00 00 00	 mov	 edi, 60			; 0000003cH
  0fa5b	be 00 03 00 00	 mov	 esi, OFFSET ?talkmsg@@3PAY0BAA@DA+768
$LL461@MenuProc:

; 18446: 								sprintf(moji, "%s", talkmsg[i]);

  0fa60	56		 push	 esi
  0fa61	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0fa67	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0fa6c	50		 push	 eax
  0fa6d	e8 00 00 00 00	 call	 _sprintf

; 18447: 								StockFontBuffer(talkwndx - 154, talkwndy - 26 + i * 20, FONT_PRIO_AFRONT, FONT_PAL_YELLOW, moji, 0);

  0fa72	6a 00		 push	 0
  0fa74	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0fa7a	50		 push	 eax
  0fa7b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?talkwndy@@3HA ; talkwndy
  0fa80	83 c0 e6	 add	 eax, -26		; ffffffe6H
  0fa83	6a 04		 push	 4
  0fa85	03 c7		 add	 eax, edi
  0fa87	6a 02		 push	 2
  0fa89	50		 push	 eax
  0fa8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?talkwndx@@3HA ; talkwndx
  0fa8f	05 66 ff ff ff	 add	 eax, -154		; ffffff66H
  0fa94	50		 push	 eax
  0fa95	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0fa9a	81 ee 00 01 00
	00		 sub	 esi, 256		; 00000100H
  0faa0	83 c4 24	 add	 esp, 36			; 00000024H
  0faa3	83 c7 ec	 add	 edi, -20		; ffffffecH
  0faa6	81 fe 00 00 00
	00		 cmp	 esi, OFFSET ?talkmsg@@3PAY0BAA@DA ; talkmsg
  0faac	7d b2		 jge	 SHORT $LL461@MenuProc

; 18448: 							}
; 18449: 							SecondtradeWndFontNo[4] = StockDispBuffer(talkwndx, talkwndy, DISP_PRIO_BOX3, CG_TRADE_TALK_WND, 2);

  0faae	6a 02		 push	 2
  0fab0	68 ee 66 00 00	 push	 26350			; 000066eeH
  0fab5	6a 6f		 push	 111			; 0000006fH
  0fab7	ff 35 00 00 00
	00		 push	 DWORD PTR ?talkwndy@@3HA ; talkwndy
  0fabd	ff 35 00 00 00
	00		 push	 DWORD PTR ?talkwndx@@3HA ; talkwndx
  0fac3	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0fac8	8b bd ec b9 ff
	ff		 mov	 edi, DWORD PTR _y$12$[ebp]
  0face	83 c4 14	 add	 esp, 20			; 00000014H
  0fad1	8b b5 e8 b9 ff
	ff		 mov	 esi, DWORD PTR _x$4$[ebp]
  0fad7	a3 10 00 00 00	 mov	 DWORD PTR ?SecondtradeWndFontNo@@3PAHA+16, eax
$LN1839@MenuProc:

; 18450: 						}
; 18451: #endif						
; 18452: 						SecondtradeWndFontNo[0] = StockDispBuffer(x + 254, y + 380, DISP_PRIO_IME3, CG_TRADE_CANCEL_BTN, 2);

  0fadc	6a 02		 push	 2
  0fade	68 c2 65 00 00	 push	 26050			; 000065c2H
  0fae3	8d 87 7c 01 00
	00		 lea	 eax, DWORD PTR [edi+380]
  0fae9	6a 69		 push	 105			; 00000069H
  0faeb	50		 push	 eax
  0faec	8d 86 fe 00 00
	00		 lea	 eax, DWORD PTR [esi+254]
  0faf2	50		 push	 eax
  0faf3	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18453: 						SecondtradeWndFontNo[1] = StockDispBuffer(x + 159, y + 380, DISP_PRIO_IME3, CG_TRADE_BACK_BTN, 2);

  0faf8	6a 02		 push	 2
  0fafa	68 ec 66 00 00	 push	 26348			; 000066ecH
  0faff	a3 00 00 00 00	 mov	 DWORD PTR ?SecondtradeWndFontNo@@3PAHA, eax
  0fb04	8d 87 7c 01 00
	00		 lea	 eax, DWORD PTR [edi+380]
  0fb0a	6a 69		 push	 105			; 00000069H
  0fb0c	50		 push	 eax
  0fb0d	8d 86 9f 00 00
	00		 lea	 eax, DWORD PTR [esi+159]
  0fb13	50		 push	 eax
  0fb14	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0fb19	a3 04 00 00 00	 mov	 DWORD PTR ?SecondtradeWndFontNo@@3PAHA+4, eax
  0fb1e	83 c4 28	 add	 esp, 40			; 00000028H

; 18454: 						//äº¤æè¿è¡ç¶æ
; 18455: 						if (pc.trade_confirm == 1 || pc.trade_confirm == 3)

  0fb21	a1 80 a1 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+41344
  0fb26	83 f8 01	 cmp	 eax, 1
  0fb29	74 05		 je	 SHORT $LN1841@MenuProc
  0fb2b	83 f8 03	 cmp	 eax, 3
  0fb2e	75 26		 jne	 SHORT $LN5152@MenuProc
$LN1841@MenuProc:

; 18456: 							SecondtradeWndFontNo[2] = StockDispBuffer(x + 63, y + 380, DISP_PRIO_IME3, CG_TRADE_LOCK_BTN, 2);

  0fb30	6a 02		 push	 2
  0fb32	68 bc 66 00 00	 push	 26300			; 000066bcH
  0fb37	6a 69		 push	 105			; 00000069H
  0fb39	8d 87 7c 01 00
	00		 lea	 eax, DWORD PTR [edi+380]
  0fb3f	8d 4e 3f	 lea	 ecx, DWORD PTR [esi+63]
  0fb42	50		 push	 eax
  0fb43	51		 push	 ecx
  0fb44	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0fb49	a3 08 00 00 00	 mov	 DWORD PTR ?SecondtradeWndFontNo@@3PAHA+8, eax
  0fb4e	83 c4 14	 add	 esp, 20			; 00000014H
  0fb51	a1 80 a1 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+41344
$LN5152@MenuProc:

; 18457: 						if (pc.trade_confirm == 4)

  0fb56	8d 4e 3f	 lea	 ecx, DWORD PTR [esi+63]
  0fb59	83 f8 04	 cmp	 eax, 4
  0fb5c	75 1e		 jne	 SHORT $LN1842@MenuProc

; 18458: 							SecondtradeWndFontNo[2] = StockDispBuffer(x + 63, y + 380, DISP_PRIO_IME3, CG_TRADE_OK_BTN, 2);

  0fb5e	6a 02		 push	 2
  0fb60	68 ed 65 00 00	 push	 26093			; 000065edH
  0fb65	6a 69		 push	 105			; 00000069H
  0fb67	8d 87 7c 01 00
	00		 lea	 eax, DWORD PTR [edi+380]
  0fb6d	50		 push	 eax
  0fb6e	51		 push	 ecx
  0fb6f	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0fb74	83 c4 14	 add	 esp, 20			; 00000014H
  0fb77	a3 08 00 00 00	 mov	 DWORD PTR ?SecondtradeWndFontNo@@3PAHA+8, eax
$LN1842@MenuProc:

; 18459: 
; 18460: 						sprintf(moji, "%7d", tradeWndDropGoldGet);

  0fb7c	ff 35 00 00 00
	00		 push	 DWORD PTR ?tradeWndDropGoldGet@@3HA
  0fb82	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0fb88	68 00 00 00 00	 push	 OFFSET ??_C@_03GJOCCCFJ@?$CF7d@
  0fb8d	50		 push	 eax
  0fb8e	e8 00 00 00 00	 call	 _sprintf

; 18461: 
; 18462: #ifdef _PET_ITEM
; 18463: 						// æ¾ç¤ºå® ç©è£å¤èµæ
; 18464: 						if (locknum != -1 && tradeList[locknum + 37].data != -1)

  0fb93	a1 00 00 00 00	 mov	 eax, DWORD PTR ?locknum@@3HA ; locknum
  0fb98	83 c4 0c	 add	 esp, 12			; 0000000cH
  0fb9b	83 f8 ff	 cmp	 eax, -1
  0fb9e	74 43		 je	 SHORT $LN1845@MenuProc
  0fba0	69 c0 18 03 00
	00		 imul	 eax, eax, 792
  0fba6	83 b8 7c 72 00
	00 ff		 cmp	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+29308], -1
  0fbad	74 34		 je	 SHORT $LN1845@MenuProc

; 18465: 						{
; 18466: 							if (bViewPetEquip)

  0fbaf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA, 0
  0fbb6	8d 87 36 01 00
	00		 lea	 eax, DWORD PTR [edi+310]
  0fbbc	8d 8e 03 01 00
	00		 lea	 ecx, DWORD PTR [esi+259]
  0fbc2	6a 02		 push	 2
  0fbc4	74 07		 je	 SHORT $LN1844@MenuProc

; 18467: 								SecondtradeWndFontNo[5] = StockDispBuffer(x + 259, y + 310, DISP_PRIO_IME3, 26472, 2);

  0fbc6	68 68 67 00 00	 push	 26472			; 00006768H
  0fbcb	eb 05		 jmp	 SHORT $LN5153@MenuProc
$LN1844@MenuProc:

; 18468: 							else
; 18469: 								SecondtradeWndFontNo[5] = StockDispBuffer(x + 259, y + 310, DISP_PRIO_IME3, 26471, 2);

  0fbcd	68 67 67 00 00	 push	 26471			; 00006767H
$LN5153@MenuProc:

; 18470: 						}
; 18471: #endif
; 18472: 
; 18473: 						//æ¾ç¤ºéé±
; 18474: 						if (tradeWndDropGoldGet > 0)

  0fbd2	6a 69		 push	 105			; 00000069H
  0fbd4	50		 push	 eax
  0fbd5	51		 push	 ecx
  0fbd6	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0fbdb	a3 14 00 00 00	 mov	 DWORD PTR ?SecondtradeWndFontNo@@3PAHA+20, eax
  0fbe0	83 c4 14	 add	 esp, 20			; 00000014H
$LN1845@MenuProc:
  0fbe3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tradeWndDropGoldGet@@3HA, 0
  0fbea	7e 20		 jle	 SHORT $LN1846@MenuProc

; 18475: 							StockFontBuffer(x + 95, y + 336, FONT_PRIO_FRONT, 0, moji, 0);

  0fbec	6a 00		 push	 0
  0fbee	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0fbf4	50		 push	 eax
  0fbf5	6a 00		 push	 0
  0fbf7	6a 01		 push	 1
  0fbf9	8d 87 50 01 00
	00		 lea	 eax, DWORD PTR [edi+336]
  0fbff	50		 push	 eax
  0fc00	8d 46 5f	 lea	 eax, DWORD PTR [esi+95]
  0fc03	50		 push	 eax
  0fc04	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0fc09	83 c4 18	 add	 esp, 24			; 00000018H
$LN1846@MenuProc:

; 18476: 						for (i = 0; i < 5; i++)

  0fc0c	8d 47 21	 lea	 eax, DWORD PTR [edi+33]
  0fc0f	c7 85 00 ba ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$35$[ebp], 0
  0fc19	8d 96 58 02 00
	00		 lea	 edx, DWORD PTR [esi+600]
  0fc1f	c7 85 0c ba ff
	ff 80 00 00 00	 mov	 DWORD PTR tv38987[ebp], OFFSET ?opp_pet@@3PAUshowpet@@A+128
  0fc29	c7 85 08 ba ff
	ff 7c 72 00 00	 mov	 DWORD PTR tv38984[ebp], OFFSET ?tradeList@@3PAUtradelist@@A+29308
  0fc33	89 85 f0 b9 ff
	ff		 mov	 DWORD PTR tv38982[ebp], eax
  0fc39	0f 1f 80 00 00
	00 00		 npad	 7
$LL464@MenuProc:

; 18477: 						{
; 18478: 							if (MakeHitBox(x + 320, y + 12 + i * 42, x + 600, y + 51 + i * 42, DISP_PRIO_IME3) == TRUE)

  0fc40	83 c0 ec	 add	 eax, -20		; ffffffecH
  0fc43	89 85 04 ba ff
	ff		 mov	 DWORD PTR tv38968[ebp], eax
  0fc49	6a 69		 push	 105			; 00000069H
  0fc4b	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  0fc4e	8d 41 27	 lea	 eax, DWORD PTR [ecx+39]
  0fc51	50		 push	 eax
  0fc52	52		 push	 edx
  0fc53	51		 push	 ecx
  0fc54	8d 86 40 01 00
	00		 lea	 eax, DWORD PTR [esi+320]
  0fc5a	50		 push	 eax
  0fc5b	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  0fc60	83 c4 14	 add	 esp, 20			; 00000014H
  0fc63	83 f8 01	 cmp	 eax, 1
  0fc66	75 56		 jne	 SHORT $LN4867@MenuProc

; 18479: 							{
; 18480: #ifdef _TRADELOCKBTN				// (ä¸å¯å¼) Syu ADD å¢å éå®é®
; 18481: 								if (mouse.onceState & MOUSE_LEFT_CRICK)

  0fc68	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  0fc6f	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR _i$35$[ebp]
  0fc75	74 28		 je	 SHORT $LN4866@MenuProc

; 18482: 								{
; 18483: #ifdef _PET_ITEM
; 18484: 									bViewPetEquip = FALSE;
; 18485: 									HitDispNo = 0;
; 18486: #endif
; 18487: 									locknum = i;

  0fc77	8b c8		 mov	 ecx, eax
  0fc79	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA, 0
  0fc83	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?HitDispNo@@3HA, 0 ; HitDispNo
  0fc8d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?locknum@@3HA, ecx ; locknum

; 18488: 									locknum2 = -1;

  0fc93	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?locknum2@@3HA, -1 ; locknum2
  0fc9d	eb 06		 jmp	 SHORT $LN1848@MenuProc
$LN4866@MenuProc:

; 18479: 							{
; 18480: #ifdef _TRADELOCKBTN				// (ä¸å¯å¼) Syu ADD å¢å éå®é®
; 18481: 								if (mouse.onceState & MOUSE_LEFT_CRICK)

  0fc9f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum@@3HA ; locknum
$LN1848@MenuProc:

; 18489: 								}
; 18490: 								if (locknum == -1)

  0fca5	83 f9 ff	 cmp	 ecx, -1
  0fca8	75 23		 jne	 SHORT $LN3661@MenuProc

; 18491: 								{
; 18492: 									locknum = i;

  0fcaa	8b c8		 mov	 ecx, eax

; 18493: 									locknum2 = -1;

  0fcac	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?locknum2@@3HA, -1 ; locknum2
  0fcb6	89 0d 00 00 00
	00		 mov	 DWORD PTR ?locknum@@3HA, ecx ; locknum
  0fcbc	eb 06		 jmp	 SHORT $LN1849@MenuProc
$LN4867@MenuProc:

; 18477: 						{
; 18478: 							if (MakeHitBox(x + 320, y + 12 + i * 42, x + 600, y + 51 + i * 42, DISP_PRIO_IME3) == TRUE)

  0fcbe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum@@3HA ; locknum
$LN1849@MenuProc:

; 18494: 								}
; 18495: 							}
; 18496: 							if (locknum != -1)

  0fcc4	83 f9 ff	 cmp	 ecx, -1
  0fcc7	0f 84 22 0a 00
	00		 je	 $LN1876@MenuProc
$LN3661@MenuProc:

; 18497: 							{
; 18498: 								if (tradeList[locknum + 37].data != -1)

  0fccd	69 c1 18 03 00
	00		 imul	 eax, ecx, 792
  0fcd3	83 b8 7c 72 00
	00 ff		 cmp	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+29308], -1
  0fcda	0f 84 f3 09 00
	00		 je	 $LN1851@MenuProc

; 18499: 								{
; 18500: #ifdef _PET_ITEM
; 18501: 									if (bViewPetEquip)

  0fce0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA, 0
  0fce7	0f 84 79 02 00
	00		 je	 $LN1853@MenuProc

; 18502: 									{
; 18503: 										int		iY = 251, iColor;

  0fced	c7 85 e0 b9 ff
	ff fb 00 00 00	 mov	 DWORD PTR _iY$1$[ebp], 251 ; 000000fbH
  0fcf7	be 08 00 00 00	 mov	 esi, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+8
  0fcfc	c7 85 fc b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv39038[ebp], 0
  0fd06	bf 00 00 00 00	 mov	 edi, OFFSET ?nPetItemEquipBmpNumber@@3PAY01HA ; nPetItemEquipBmpNumber
  0fd0b	0f 1f 44 00 00	 npad	 5
$LL467@MenuProc:

; 18508: 										{
; 18509: 											StockDispBuffer(ItemBuffer[iCount].defX, ItemBuffer[iCount].defY, DISP_PRIO_IME3, nPetItemEquipBmpNumber[iCount][0], 0);

  0fd10	6a 00		 push	 0
  0fd12	ff 37		 push	 DWORD PTR [edi]
  0fd14	6a 69		 push	 105			; 00000069H
  0fd16	ff 76 04	 push	 DWORD PTR [esi+4]
  0fd19	ff 36		 push	 DWORD PTR [esi]
  0fd1b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18510: 											if (opp_pet[locknum].oPetItemInfo[iCount].bmpNo > 0)

  0fd20	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  0fd2a	83 c4 14	 add	 esp, 20			; 00000014H
  0fd2d	8b 8d fc b9 ff
	ff		 mov	 ecx, DWORD PTR tv39038[ebp]
  0fd33	8b 84 08 40 09
	00 00		 mov	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[eax+ecx+2368]
  0fd3a	85 c0		 test	 eax, eax
  0fd3c	7e 12		 jle	 SHORT $LN465@MenuProc

; 18511: 												StockDispBuffer(ItemBuffer[iCount].defX, ItemBuffer[iCount].defY, DISP_PRIO_ITEM, opp_pet[locknum].oPetItemInfo[iCount].bmpNo, 0);

  0fd3e	6a 00		 push	 0
  0fd40	50		 push	 eax
  0fd41	6a 6c		 push	 108			; 0000006cH
  0fd43	ff 76 04	 push	 DWORD PTR [esi+4]
  0fd46	ff 36		 push	 DWORD PTR [esi]
  0fd48	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  0fd4d	83 c4 14	 add	 esp, 20			; 00000014H
$LN465@MenuProc:

; 18504: 										char	*splitPoint;
; 18505: 
; 18506: 										// æ¾ç¤ºå® ç©è£å¤æ çåºå¾åè£å¤
; 18507: 										for (int iCount = 0; iCount < PET_EQUIPNUM; iCount++)

  0fd50	81 85 fc b9 ff
	ff 8c 00 00 00	 add	 DWORD PTR tv39038[ebp], 140 ; 0000008cH
  0fd5a	83 c7 08	 add	 edi, 8
  0fd5d	83 c6 20	 add	 esi, 32			; 00000020H
  0fd60	81 ff 38 00 00
	00		 cmp	 edi, OFFSET ?nPetItemEquipBmpNumber@@3PAY01HA+56
  0fd66	7c a8		 jl	 SHORT $LL467@MenuProc

; 18512: 										}
; 18513: 										for (int iCount = 0; iCount < PET_EQUIPNUM; iCount++)

  0fd68	33 ff		 xor	 edi, edi
  0fd6a	b8 08 00 00 00	 mov	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+8
  0fd6f	89 bd f4 b9 ff
	ff		 mov	 DWORD PTR tv39004[ebp], edi
  0fd75	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv38998[ebp], eax
  0fd7b	0f 1f 44 00 00	 npad	 5
$LL470@MenuProc:

; 18514: 										{
; 18515: 											// æ¾ç¤ºè£å¤åå®¹
; 18516: 											if (MakeHitBox(ItemBuffer[iCount].defX - 26, ItemBuffer[iCount].defY - 26,
; 18517: 												ItemBuffer[iCount].defX + 26, ItemBuffer[iCount].defY + 23, DISP_PRIO_IME3) == TRUE)

  0fd80	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0fd83	8b 10		 mov	 edx, DWORD PTR [eax]
  0fd85	6a 69		 push	 105			; 00000069H
  0fd87	8d 41 17	 lea	 eax, DWORD PTR [ecx+23]
  0fd8a	50		 push	 eax
  0fd8b	8d 42 1a	 lea	 eax, DWORD PTR [edx+26]
  0fd8e	50		 push	 eax
  0fd8f	8d 41 e6	 lea	 eax, DWORD PTR [ecx-26]
  0fd92	50		 push	 eax
  0fd93	8d 42 e6	 lea	 eax, DWORD PTR [edx-26]
  0fd96	50		 push	 eax
  0fd97	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  0fd9c	83 c4 14	 add	 esp, 20			; 00000014H
  0fd9f	83 f8 01	 cmp	 eax, 1
  0fda2	0f 85 87 01 00
	00		 jne	 $LN468@MenuProc

; 18518: 											{
; 18519: 												if (opp_pet[locknum].oPetItemInfo[iCount].bmpNo > 0)

  0fda8	69 15 00 00 00
	00 14 0d 00 00	 imul	 edx, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  0fdb2	83 bc 3a 40 09
	00 00 00	 cmp	 DWORD PTR ?opp_pet@@3PAUshowpet@@A[edx+edi+2368], 0
  0fdba	0f 8e 6f 01 00
	00		 jle	 $LN468@MenuProc

; 18520: 												{
; 18521: 													iColor = opp_pet[locknum].oPetItemInfo[iCount].color;
; 18522: 													splitPoint = opp_pet[locknum].oPetItemInfo[iCount].memo;
; 18523: 													// è£å¤åç§°
; 18524: 													StockFontBuffer(x + 25, y + 195, FONT_PRIO_FRONT, iColor, opp_pet[locknum].oPetItemInfo[iCount].name, 0);

  0fdc0	8b 85 f4 b9 ff
	ff		 mov	 eax, DWORD PTR tv39004[ebp]
  0fdc6	8b b4 3a 44 09
	00 00		 mov	 esi, DWORD PTR ?opp_pet@@3PAUshowpet@@A[edx+edi+2372]
  0fdcd	8d bf 48 09 00
	00		 lea	 edi, DWORD PTR ?opp_pet@@3PAUshowpet@@A[edi+2376]
  0fdd3	8b 8d e8 b9 ff
	ff		 mov	 ecx, DWORD PTR _x$4$[ebp]
  0fdd9	03 fa		 add	 edi, edx
  0fddb	6a 00		 push	 0
  0fddd	8d 80 9d 09 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[eax+2461]
  0fde3	83 c1 19	 add	 ecx, 25			; 00000019H
  0fde6	03 c2		 add	 eax, edx
  0fde8	89 8d fc b9 ff
	ff		 mov	 DWORD PTR tv39408[ebp], ecx
  0fdee	50		 push	 eax
  0fdef	8b 85 ec b9 ff
	ff		 mov	 eax, DWORD PTR _y$12$[ebp]
  0fdf5	56		 push	 esi
  0fdf6	6a 01		 push	 1
  0fdf8	05 c3 00 00 00	 add	 eax, 195		; 000000c3H
  0fdfd	50		 push	 eax
  0fdfe	51		 push	 ecx
  0fdff	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18525: 													// èä¹åº¦
; 18526: 													sprintf(moji, "ì¸ë´ë ¥(%s)", opp_pet[locknum].oPetItemInfo[iCount].damage);

  0fe04	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  0fe0e	8d 80 ba 09 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[eax+2490]
  0fe14	03 85 f4 b9 ff
	ff		 add	 eax, DWORD PTR tv39004[ebp]
  0fe1a	50		 push	 eax
  0fe1b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0fe21	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GEIMNGGC@?$MA?N?$LD?$LL?$LH?B?$CI?$CFs?$CJ@
  0fe26	50		 push	 eax
  0fe27	e8 00 00 00 00	 call	 _sprintf

; 18527: 													StockFontBuffer(x + 25, y + 215, FONT_PRIO_FRONT, iColor, moji, 0);

  0fe2c	6a 00		 push	 0
  0fe2e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0fe34	50		 push	 eax
  0fe35	8b 85 ec b9 ff
	ff		 mov	 eax, DWORD PTR _y$12$[ebp]
  0fe3b	56		 push	 esi
  0fe3c	6a 01		 push	 1
  0fe3e	05 d7 00 00 00	 add	 eax, 215		; 000000d7H
  0fe43	50		 push	 eax
  0fe44	ff b5 fc b9 ff
	ff		 push	 DWORD PTR tv39408[ebp]
  0fe4a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18528: 
; 18529: 													// æ¾ç¤ºéå·åè¿°
; 18530: 													while (1)
; 18531: 													{
; 18532: 														if (strlen(splitPoint) > 28)

  0fe4f	8b cf		 mov	 ecx, edi
  0fe51	83 c4 3c	 add	 esp, 60			; 0000003cH
  0fe54	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL4376@MenuProc:
  0fe57	8a 01		 mov	 al, BYTE PTR [ecx]
  0fe59	41		 inc	 ecx
  0fe5a	84 c0		 test	 al, al
  0fe5c	75 f9		 jne	 SHORT $LL4376@MenuProc
  0fe5e	8b b5 e0 b9 ff
	ff		 mov	 esi, DWORD PTR _iY$1$[ebp]
  0fe64	2b ca		 sub	 ecx, edx
  0fe66	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  0fe69	0f 86 85 00 00
	00		 jbe	 $LN1858@MenuProc
  0fe6f	90		 npad	 1
$LL471@MenuProc:

; 18533: 														{
; 18534: 															_snprintf(moji, 28, "%s", splitPoint);

  0fe70	57		 push	 edi
  0fe71	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0fe76	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0fe7c	6a 1c		 push	 28			; 0000001cH
  0fe7e	50		 push	 eax
  0fe7f	e8 00 00 00 00	 call	 __snprintf

; 18535: 															moji[28] = NULL;
; 18536: 															if (GetStrLastByte(moji) == 3)

  0fe84	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0fe8a	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0
  0fe91	50		 push	 eax
  0fe92	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  0fe97	83 c4 14	 add	 esp, 20			; 00000014H
  0fe9a	83 f8 03	 cmp	 eax, 3
  0fe9d	75 0c		 jne	 SHORT $LN1860@MenuProc

; 18537: 															{
; 18538: 																moji[27] = NULL;

  0fe9f	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+27], 0

; 18539: 																splitPoint += 27;

  0fea6	83 c7 1b	 add	 edi, 27			; 0000001bH

; 18540: 															}

  0fea9	eb 0a		 jmp	 SHORT $LN1861@MenuProc
$LN1860@MenuProc:

; 18541: 															else
; 18542: 															{
; 18543: 																moji[28] = NULL;

  0feab	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0

; 18544: 																splitPoint += 28;

  0feb2	83 c7 1c	 add	 edi, 28			; 0000001cH
$LN1861@MenuProc:

; 18545: 															}
; 18546: 															StockFontBuffer(x + 25, iY, FONT_PRIO_FRONT, 0, moji, 0);

  0feb5	6a 00		 push	 0
  0feb7	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0febd	50		 push	 eax
  0febe	6a 00		 push	 0
  0fec0	6a 01		 push	 1
  0fec2	56		 push	 esi
  0fec3	ff b5 fc b9 ff
	ff		 push	 DWORD PTR tv39408[ebp]
  0fec9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0fece	8b cf		 mov	 ecx, edi
  0fed0	83 c4 18	 add	 esp, 24			; 00000018H

; 18547: 															iY += 24;

  0fed3	83 c6 18	 add	 esi, 24			; 00000018H
  0fed6	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0fed9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4377@MenuProc:

; 18528: 
; 18529: 													// æ¾ç¤ºéå·åè¿°
; 18530: 													while (1)
; 18531: 													{
; 18532: 														if (strlen(splitPoint) > 28)

  0fee0	8a 01		 mov	 al, BYTE PTR [ecx]
  0fee2	41		 inc	 ecx
  0fee3	84 c0		 test	 al, al
  0fee5	75 f9		 jne	 SHORT $LL4377@MenuProc
  0fee7	2b ca		 sub	 ecx, edx
  0fee9	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  0feec	77 82		 ja	 SHORT $LL471@MenuProc
  0feee	89 b5 e0 b9 ff
	ff		 mov	 DWORD PTR _iY$1$[ebp], esi
$LN1858@MenuProc:

; 18548: 														}
; 18549: 														else
; 18550: 														{
; 18551: 															strcpy(moji, splitPoint);

  0fef4	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  0fefa	2b cf		 sub	 ecx, edi
  0fefc	0f 1f 40 00	 npad	 4
$LL2037@MenuProc:
  0ff00	8a 07		 mov	 al, BYTE PTR [edi]
  0ff02	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  0ff05	88 44 39 ff	 mov	 BYTE PTR [ecx+edi-1], al
  0ff09	84 c0		 test	 al, al
  0ff0b	75 f3		 jne	 SHORT $LL2037@MenuProc

; 18552: 															StockFontBuffer(x + 25, iY, FONT_PRIO_FRONT, 0, moji, 0);

  0ff0d	6a 00		 push	 0
  0ff0f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  0ff15	50		 push	 eax
  0ff16	6a 00		 push	 0
  0ff18	6a 01		 push	 1
  0ff1a	56		 push	 esi
  0ff1b	ff b5 fc b9 ff
	ff		 push	 DWORD PTR tv39408[ebp]
  0ff21	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0ff26	8b bd f4 b9 ff
	ff		 mov	 edi, DWORD PTR tv39004[ebp]
  0ff2c	83 c4 18	 add	 esp, 24			; 00000018H
$LN468@MenuProc:

; 18512: 										}
; 18513: 										for (int iCount = 0; iCount < PET_EQUIPNUM; iCount++)

  0ff2f	8b 85 f8 b9 ff
	ff		 mov	 eax, DWORD PTR tv38998[ebp]
  0ff35	81 c7 8c 00 00
	00		 add	 edi, 140		; 0000008cH
  0ff3b	83 c0 20	 add	 eax, 32			; 00000020H
  0ff3e	89 bd f4 b9 ff
	ff		 mov	 DWORD PTR tv39004[ebp], edi
  0ff44	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv38998[ebp], eax
  0ff4a	3d e8 00 00 00	 cmp	 eax, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+232
  0ff4f	0f 8c 2b fe ff
	ff		 jl	 $LL470@MenuProc

; 18553: 															break;
; 18554: 														}
; 18555: 													}
; 18556: 												}
; 18557: 											}
; 18558: 										}
; 18559: 									}

  0ff55	8b bd ec b9 ff
	ff		 mov	 edi, DWORD PTR _y$12$[ebp]
  0ff5b	8b b5 e8 b9 ff
	ff		 mov	 esi, DWORD PTR _x$4$[ebp]
  0ff61	e9 89 07 00 00	 jmp	 $LN1876@MenuProc
$LN1853@MenuProc:

; 18560: 									else
; 18561: #endif
; 18562: 									{
; 18563: 										//äº§çå® ç©Action
; 18564: 										if (SecondActPet == NULL) {

  0ff66	69 c1 14 0d 00
	00		 imul	 eax, ecx, 3348
  0ff6c	05 00 01 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+256
  0ff71	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SecondActPet@@3PAUaction@@A, 0
  0ff78	50		 push	 eax
  0ff79	75 28		 jne	 SHORT $LN3660@MenuProc

; 18565: 											ShowPetNum = atoi(opp_pet[locknum].opp_petgrano);

  0ff7b	e8 00 00 00 00	 call	 _atoi

; 18566: 											SecondActPet = MakeAnimDisp(x + 215, y + 130, ShowPetNum, ANIM_DISP_PET);

  0ff80	6a 00		 push	 0
  0ff82	50		 push	 eax
  0ff83	a3 00 00 00 00	 mov	 DWORD PTR ?ShowPetNum@@3HA, eax ; ShowPetNum
  0ff88	8d 87 82 00 00
	00		 lea	 eax, DWORD PTR [edi+130]
  0ff8e	50		 push	 eax
  0ff8f	8d 86 d7 00 00
	00		 lea	 eax, DWORD PTR [esi+215]
  0ff95	50		 push	 eax
  0ff96	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  0ff9b	83 c4 14	 add	 esp, 20			; 00000014H

; 18567: 										}

  0ff9e	e9 77 00 00 00	 jmp	 $LN5154@MenuProc
$LN3660@MenuProc:

; 18568: 										//å·²å­å¨æ¾ç¤ºçå® ç©
; 18569: 										else if (SecondActPet != NULL && ShowPetNum != atoi(opp_pet[locknum].opp_petgrano)) {

  0ffa3	e8 00 00 00 00	 call	 _atoi
  0ffa8	83 c4 04	 add	 esp, 4
  0ffab	39 05 00 00 00
	00		 cmp	 DWORD PTR ?ShowPetNum@@3HA, eax ; ShowPetNum
  0ffb1	0f 84 68 00 00
	00		 je	 $LN1864@MenuProc

; 18570: 											DeathAction(SecondActPet);

  0ffb7	ff 35 00 00 00
	00		 push	 DWORD PTR ?SecondActPet@@3PAUaction@@A
  0ffbd	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 18571: 											SecondActPet = NULL;
; 18572: 											ShowPetNum = atoi(opp_pet[locknum].opp_petgrano);

  0ffc2	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  0ffcc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondActPet@@3PAUaction@@A, 0
  0ffd6	05 00 01 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+256
  0ffdb	50		 push	 eax
  0ffdc	e8 00 00 00 00	 call	 _atoi
  0ffe1	a3 00 00 00 00	 mov	 DWORD PTR ?ShowPetNum@@3HA, eax ; ShowPetNum
  0ffe6	83 c4 08	 add	 esp, 8

; 18573: 											SecondActPet = MakeAnimDisp(x + 215, y + 130, atoi(opp_pet[locknum].opp_petgrano), ANIM_DISP_PET);

  0ffe9	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  0fff3	6a 00		 push	 0
  0fff5	05 00 01 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+256
  0fffa	50		 push	 eax
  0fffb	e8 00 00 00 00	 call	 _atoi
  10000	83 c4 04	 add	 esp, 4
  10003	50		 push	 eax
  10004	8d 87 82 00 00
	00		 lea	 eax, DWORD PTR [edi+130]
  1000a	50		 push	 eax
  1000b	8d 86 d7 00 00
	00		 lea	 eax, DWORD PTR [esi+215]
  10011	50		 push	 eax
  10012	e8 00 00 00 00	 call	 ?MakeAnimDisp@@YAPAUaction@@HHHH@Z ; MakeAnimDisp
  10017	83 c4 10	 add	 esp, 16			; 00000010H
$LN5154@MenuProc:

; 18574: 										}
; 18575: 
; 18576: 										//opp_petfreename
; 18577: 										//æ¾ç¤ºæ°å¼ãæè½ ( å·¦æ¹ )
; 18578: 										//StockDispBuffer( x + 95 , y + 40 , DISP_PRIO_IME3, CG_TRADE_LINE , 0 );
; 18579: 										sprintf(moji, "%s", opp_pet[locknum].opp_petname);

  1001a	a3 00 00 00 00	 mov	 DWORD PTR ?SecondActPet@@3PAUaction@@A, eax
$LN1864@MenuProc:
  1001f	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10029	05 00 00 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A
  1002e	50		 push	 eax
  1002f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10035	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  1003a	50		 push	 eax
  1003b	e8 00 00 00 00	 call	 _sprintf

; 18580: 										StockFontBuffer(x + 55, y + 30, FONT_PRIO_FRONT, 0, moji, 0);//æå°å® ç©åå­

  10040	6a 00		 push	 0
  10042	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _moji$[ebp]
  10048	52		 push	 edx
  10049	6a 00		 push	 0
  1004b	8d 4f 1e	 lea	 ecx, DWORD PTR [edi+30]
  1004e	6a 01		 push	 1
  10050	8d 46 37	 lea	 eax, DWORD PTR [esi+55]
  10053	51		 push	 ecx
  10054	50		 push	 eax
  10055	89 85 f8 b9 ff
	ff		 mov	 DWORD PTR tv39406[ebp], eax
  1005b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10060	83 c4 24	 add	 esp, 36			; 00000024H

; 18581: 
; 18582: 										if (strcmp(opp_pet[locknum].opp_petfreename, opp_pet[locknum].opp_petname)) {

  10063	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  1006d	8d 90 80 00 00
	00		 lea	 edx, DWORD PTR ?opp_pet@@3PAUshowpet@@A[eax+128]
  10073	8d 88 00 00 00
	00		 lea	 ecx, DWORD PTR ?opp_pet@@3PAUshowpet@@A[eax]
  10079	89 95 dc b9 ff
	ff		 mov	 DWORD PTR tv39372[ebp], edx
  1007f	8b c2		 mov	 eax, edx
$LL4378@MenuProc:
  10081	8a 10		 mov	 dl, BYTE PTR [eax]
  10083	3a 11		 cmp	 dl, BYTE PTR [ecx]
  10085	75 1a		 jne	 SHORT $LN4379@MenuProc
  10087	84 d2		 test	 dl, dl
  10089	74 12		 je	 SHORT $LN4380@MenuProc
  1008b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  1008e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  10091	75 0e		 jne	 SHORT $LN4379@MenuProc
  10093	83 c0 02	 add	 eax, 2
  10096	83 c1 02	 add	 ecx, 2
  10099	84 d2		 test	 dl, dl
  1009b	75 e4		 jne	 SHORT $LL4378@MenuProc
$LN4380@MenuProc:
  1009d	33 c0		 xor	 eax, eax
  1009f	eb 05		 jmp	 SHORT $LN4381@MenuProc
$LN4379@MenuProc:
  100a1	1b c0		 sbb	 eax, eax
  100a3	83 c8 01	 or	 eax, 1
$LN4381@MenuProc:
  100a6	85 c0		 test	 eax, eax
  100a8	74 37		 je	 SHORT $LN1865@MenuProc

; 18583: 											sprintf(moji, "[%s]", opp_pet[locknum].opp_petfreename);

  100aa	ff b5 dc b9 ff
	ff		 push	 DWORD PTR tv39372[ebp]
  100b0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  100b6	68 00 00 00 00	 push	 OFFSET ??_C@_04LIFAFMCE@?$FL?$CFs?$FN@
  100bb	50		 push	 eax
  100bc	e8 00 00 00 00	 call	 _sprintf

; 18584: 											StockFontBuffer(x + 155, y + 30, FONT_PRIO_FRONT, 6, moji, 0);//æå°å® ç©æµç§°

  100c1	6a 00		 push	 0
  100c3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  100c9	50		 push	 eax
  100ca	6a 06		 push	 6
  100cc	6a 01		 push	 1
  100ce	8d 47 1e	 lea	 eax, DWORD PTR [edi+30]
  100d1	50		 push	 eax
  100d2	8d 86 9b 00 00
	00		 lea	 eax, DWORD PTR [esi+155]
  100d8	50		 push	 eax
  100d9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  100de	83 c4 24	 add	 esp, 36			; 00000024H
$LN1865@MenuProc:

; 18585: 										}
; 18586: 
; 18587: #ifdef _PET_2TRANS
; 18588: 										sprintf(moji, "%dí", atoi(opp_pet[locknum].opp_pettrans));

  100e1	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  100eb	05 00 04 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1024
  100f0	50		 push	 eax
  100f1	e8 00 00 00 00	 call	 _atoi
  100f6	50		 push	 eax
  100f7	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  100fd	68 00 00 00 00	 push	 OFFSET ??_C@_04DHBICLIK@?$CFd?H?$LI@
  10102	50		 push	 eax
  10103	e8 00 00 00 00	 call	 _sprintf

; 18589: #ifdef _SHOW_FUSION
; 18590: 										if (LOWORD(atoi(opp_pet[locknum].opp_fusion)) == 1) {

  10108	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10112	05 00 09 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+2304
  10117	50		 push	 eax
  10118	e8 00 00 00 00	 call	 _atoi
  1011d	83 c4 14	 add	 esp, 20			; 00000014H
  10120	66 83 f8 01	 cmp	 ax, 1
  10124	75 2a		 jne	 SHORT $LN1866@MenuProc

; 18591: 											sprintf(moji, "ìµí©%dí", atoi(opp_pet[locknum].opp_pettrans));

  10126	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10130	05 00 04 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1024
  10135	50		 push	 eax
  10136	e8 00 00 00 00	 call	 _atoi
  1013b	50		 push	 eax
  1013c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10142	68 00 00 00 00	 push	 OFFSET ??_C@_08PECEDIMI@?$MA?$LG?G?U?$CFd?H?$LI@
  10147	50		 push	 eax
  10148	e8 00 00 00 00	 call	 _sprintf
  1014d	83 c4 10	 add	 esp, 16			; 00000010H
$LN1866@MenuProc:

; 18592: 										}
; 18593: #endif
; 18594: #else
; 18595: 										sprintf(moji, "%s", (atoi(opp_pet[locknum].opp_pettrans) == 0) ? "" : "è½¬");
; 18596: #endif
; 18597: 										StockFontBuffer(x + 90, y + 52, FONT_PRIO_FRONT, 2, moji, 0);

  10150	6a 00		 push	 0
  10152	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10158	50		 push	 eax
  10159	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR _x$4$[ebp]
  1015f	8d 77 34	 lea	 esi, DWORD PTR [edi+52]
  10162	6a 02		 push	 2
  10164	6a 01		 push	 1
  10166	83 c0 5a	 add	 eax, 90			; 0000005aH
  10169	56		 push	 esi
  1016a	50		 push	 eax
  1016b	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18598: 
; 18599: 
; 18600: 										StockDispBuffer(x + 55, y + 60, DISP_PRIO_IME3, CG_TRADE_LV_LINE, 0);

  10170	6a 00		 push	 0
  10172	68 df 66 00 00	 push	 26335			; 000066dfH
  10177	6a 69		 push	 105			; 00000069H
  10179	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  1017c	50		 push	 eax
  1017d	ff b5 f8 b9 ff
	ff		 push	 DWORD PTR tv39406[ebp]
  10183	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18601: 										sprintf(moji, "%3d", atoi(opp_pet[locknum].opp_petlevel));

  10188	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10192	05 80 01 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+384
  10197	50		 push	 eax
  10198	e8 00 00 00 00	 call	 _atoi
  1019d	50		 push	 eax
  1019e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  101a4	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  101a9	50		 push	 eax
  101aa	e8 00 00 00 00	 call	 _sprintf

; 18602: 										StockFontBuffer(x + 55, y + 52, FONT_PRIO_FRONT, 0, moji, 0);//æå°å® ç©ç­çº§

  101af	6a 00		 push	 0
  101b1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  101b7	50		 push	 eax
  101b8	6a 00		 push	 0
  101ba	6a 01		 push	 1
  101bc	56		 push	 esi
  101bd	8b b5 f8 b9 ff
	ff		 mov	 esi, DWORD PTR tv39406[ebp]
  101c3	56		 push	 esi
  101c4	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  101c9	83 c4 54	 add	 esp, 84			; 00000054H

; 18603: 
; 18604: 										StockDispBuffer(x + 55, y + 82, DISP_PRIO_IME3, CG_TRADE_HP_LINE, 0);

  101cc	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  101cf	6a 00		 push	 0
  101d1	68 ea 66 00 00	 push	 26346			; 000066eaH
  101d6	6a 69		 push	 105			; 00000069H
  101d8	50		 push	 eax
  101d9	56		 push	 esi
  101da	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18605: 										sprintf(moji, "%3d", atoi(opp_pet[locknum].opp_petshowhp));

  101df	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  101e9	05 80 04 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1152
  101ee	50		 push	 eax
  101ef	e8 00 00 00 00	 call	 _atoi
  101f4	50		 push	 eax
  101f5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  101fb	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  10200	50		 push	 eax
  10201	e8 00 00 00 00	 call	 _sprintf

; 18606: 										StockFontBuffer(x + 55, y + 74, FONT_PRIO_FRONT, 0, moji, 0);

  10206	6a 00		 push	 0
  10208	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1020e	50		 push	 eax
  1020f	6a 00		 push	 0
  10211	6a 01		 push	 1
  10213	8d 47 4a	 lea	 eax, DWORD PTR [edi+74]
  10216	50		 push	 eax
  10217	56		 push	 esi
  10218	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18607: 
; 18608: 										StockDispBuffer(x + 55, y + 104, DISP_PRIO_IME3, CG_TRADE_ATK_LINE, 0);

  1021d	6a 00		 push	 0
  1021f	68 e2 66 00 00	 push	 26338			; 000066e2H
  10224	6a 69		 push	 105			; 00000069H
  10226	8d 47 68	 lea	 eax, DWORD PTR [edi+104]
  10229	50		 push	 eax
  1022a	56		 push	 esi
  1022b	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18609: 										sprintf(moji, "%3d", atoi(opp_pet[locknum].opp_petatk));

  10230	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  1023a	83 c4 50	 add	 esp, 80			; 00000050H
  1023d	05 00 02 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+512
  10242	50		 push	 eax
  10243	e8 00 00 00 00	 call	 _atoi
  10248	50		 push	 eax
  10249	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1024f	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  10254	50		 push	 eax
  10255	e8 00 00 00 00	 call	 _sprintf

; 18610: 										StockFontBuffer(x + 55, y + 96, FONT_PRIO_FRONT, 0, moji, 0);

  1025a	6a 00		 push	 0
  1025c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10262	50		 push	 eax
  10263	6a 00		 push	 0
  10265	6a 01		 push	 1
  10267	8d 47 60	 lea	 eax, DWORD PTR [edi+96]
  1026a	50		 push	 eax
  1026b	56		 push	 esi
  1026c	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18611: 
; 18612: 										//StockDispBuffer(x + 55, y + 126, DISP_PRIO_IME3, CG_TRADE_DEF_LINE, 0);
; 18613: 										sprintf(moji, "%3d", atoi(opp_pet[locknum].opp_petdef));

  10271	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  1027b	05 80 02 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+640
  10280	50		 push	 eax
  10281	e8 00 00 00 00	 call	 _atoi
  10286	50		 push	 eax
  10287	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1028d	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  10292	50		 push	 eax
  10293	e8 00 00 00 00	 call	 _sprintf

; 18614: 										StockFontBuffer(x + 55, y + 118, FONT_PRIO_FRONT, 0, moji, 0);

  10298	6a 00		 push	 0
  1029a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  102a0	50		 push	 eax
  102a1	6a 00		 push	 0
  102a3	6a 01		 push	 1
  102a5	8d 47 76	 lea	 eax, DWORD PTR [edi+118]
  102a8	50		 push	 eax
  102a9	56		 push	 esi
  102aa	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  102af	83 c4 50	 add	 esp, 80			; 00000050H

; 18615: 
; 18616: 										StockDispBuffer(x + 55, y + 148, DISP_PRIO_IME3, CG_TRADE_DEX_LINE, 0);

  102b2	8d 87 94 00 00
	00		 lea	 eax, DWORD PTR [edi+148]
  102b8	6a 00		 push	 0
  102ba	68 e1 66 00 00	 push	 26337			; 000066e1H
  102bf	6a 69		 push	 105			; 00000069H
  102c1	50		 push	 eax
  102c2	56		 push	 esi
  102c3	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18617: 										sprintf(moji, "%3d", atoi(opp_pet[locknum].opp_petquick));

  102c8	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  102d2	05 00 03 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+768
  102d7	50		 push	 eax
  102d8	e8 00 00 00 00	 call	 _atoi
  102dd	50		 push	 eax
  102de	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  102e4	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  102e9	50		 push	 eax
  102ea	e8 00 00 00 00	 call	 _sprintf

; 18618: 										StockFontBuffer(x + 55, y + 140, FONT_PRIO_FRONT, 0, moji, 0);

  102ef	6a 00		 push	 0
  102f1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  102f7	50		 push	 eax
  102f8	6a 00		 push	 0
  102fa	6a 01		 push	 1
  102fc	8d 87 8c 00 00
	00		 lea	 eax, DWORD PTR [edi+140]
  10302	50		 push	 eax
  10303	56		 push	 esi
  10304	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18619: 										for (j = 0; j < atoi(opp_pet[locknum].opp_petslot); j++) {

  10309	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10313	33 f6		 xor	 esi, esi
  10315	05 00 05 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1280
  1031a	50		 push	 eax
  1031b	e8 00 00 00 00	 call	 _atoi
  10320	83 c4 40	 add	 esp, 64			; 00000040H
  10323	85 c0		 test	 eax, eax
  10325	0f 8e 51 00 00
	00		 jle	 $LN474@MenuProc
  1032b	0f 1f 44 00 00	 npad	 5
$LL475@MenuProc:

; 18620: 											if (j == 0) {

  10330	6b c6 16	 imul	 eax, esi, 22
  10333	8d 97 aa 00 00
	00		 lea	 edx, DWORD PTR [edi+170]
  10339	8d 8e e3 66 00
	00		 lea	 ecx, DWORD PTR [esi+26339]
  1033f	03 d0		 add	 edx, eax
  10341	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR _x$4$[ebp]
  10347	85 f6		 test	 esi, esi
  10349	75 05		 jne	 SHORT $LN1867@MenuProc

; 18621: 												StockDispBuffer(x + 92, y + 170 + j * 22, DISP_PRIO_IME3, CG_TRADE_SK1_LINE + j, 0);

  1034b	83 c0 5c	 add	 eax, 92			; 0000005cH

; 18622: 											}

  1034e	eb 03		 jmp	 SHORT $LN473@MenuProc
$LN1867@MenuProc:

; 18623: 											else {
; 18624: 												StockDispBuffer(x + 100, y + 170 + j * 22, DISP_PRIO_IME3, CG_TRADE_SK1_LINE + j, 0);

  10350	83 c0 64	 add	 eax, 100		; 00000064H
$LN473@MenuProc:

; 18619: 										for (j = 0; j < atoi(opp_pet[locknum].opp_petslot); j++) {

  10353	6a 00		 push	 0
  10355	51		 push	 ecx
  10356	6a 69		 push	 105			; 00000069H
  10358	52		 push	 edx
  10359	50		 push	 eax
  1035a	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  1035f	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10369	46		 inc	 esi
  1036a	05 00 05 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1280
  1036f	50		 push	 eax
  10370	e8 00 00 00 00	 call	 _atoi
  10375	83 c4 18	 add	 esp, 24			; 00000018H
  10378	3b f0		 cmp	 esi, eax
  1037a	7c b4		 jl	 SHORT $LL475@MenuProc
$LN474@MenuProc:

; 18625: 											}
; 18626: 										}
; 18627: 										sprintf(moji, "%s", opp_pet[locknum].opp_petskill1);

  1037c	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10386	05 80 05 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1408
  1038b	50		 push	 eax
  1038c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10392	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  10397	50		 push	 eax
  10398	e8 00 00 00 00	 call	 _sprintf
  1039d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18628: 										if (strcmp(moji, "(null)") != 0)

  103a0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  103a6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ@
  103ab	0f 1f 44 00 00	 npad	 5
$LL4382@MenuProc:
  103b0	8a 10		 mov	 dl, BYTE PTR [eax]
  103b2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  103b4	75 1a		 jne	 SHORT $LN4383@MenuProc
  103b6	84 d2		 test	 dl, dl
  103b8	74 12		 je	 SHORT $LN4384@MenuProc
  103ba	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  103bd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  103c0	75 0e		 jne	 SHORT $LN4383@MenuProc
  103c2	83 c0 02	 add	 eax, 2
  103c5	83 c1 02	 add	 ecx, 2
  103c8	84 d2		 test	 dl, dl
  103ca	75 e4		 jne	 SHORT $LL4382@MenuProc
$LN4384@MenuProc:
  103cc	33 c0		 xor	 eax, eax
  103ce	eb 05		 jmp	 SHORT $LN4385@MenuProc
$LN4383@MenuProc:
  103d0	1b c0		 sbb	 eax, eax
  103d2	83 c8 01	 or	 eax, 1
$LN4385@MenuProc:
  103d5	8b b5 e8 b9 ff
	ff		 mov	 esi, DWORD PTR _x$4$[ebp]
  103db	8d 4e 41	 lea	 ecx, DWORD PTR [esi+65]
  103de	85 c0		 test	 eax, eax
  103e0	74 1d		 je	 SHORT $LN3325@MenuProc

; 18629: 											StockFontBuffer(x + 65, y + 162, FONT_PRIO_FRONT, 0, moji, 0);

  103e2	6a 00		 push	 0
  103e4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  103ea	50		 push	 eax
  103eb	6a 00		 push	 0
  103ed	6a 01		 push	 1
  103ef	8d 87 a2 00 00
	00		 lea	 eax, DWORD PTR [edi+162]
  103f5	50		 push	 eax
  103f6	51		 push	 ecx
  103f7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  103fc	83 c4 18	 add	 esp, 24			; 00000018H
$LN3325@MenuProc:

; 18630: 										sprintf(moji, "%s", opp_pet[locknum].opp_petskill2);

  103ff	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10409	05 00 06 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1536
  1040e	50		 push	 eax
  1040f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10415	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  1041a	50		 push	 eax
  1041b	e8 00 00 00 00	 call	 _sprintf
  10420	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18631: 										if (strcmp(moji, "(null)") != 0)

  10423	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10429	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ@
  1042e	66 90		 npad	 2
$LL4386@MenuProc:
  10430	8a 10		 mov	 dl, BYTE PTR [eax]
  10432	3a 11		 cmp	 dl, BYTE PTR [ecx]
  10434	75 1a		 jne	 SHORT $LN4387@MenuProc
  10436	84 d2		 test	 dl, dl
  10438	74 12		 je	 SHORT $LN4388@MenuProc
  1043a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  1043d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  10440	75 0e		 jne	 SHORT $LN4387@MenuProc
  10442	83 c0 02	 add	 eax, 2
  10445	83 c1 02	 add	 ecx, 2
  10448	84 d2		 test	 dl, dl
  1044a	75 e4		 jne	 SHORT $LL4386@MenuProc
$LN4388@MenuProc:
  1044c	33 c0		 xor	 eax, eax
  1044e	eb 05		 jmp	 SHORT $LN4389@MenuProc
$LN4387@MenuProc:
  10450	1b c0		 sbb	 eax, eax
  10452	83 c8 01	 or	 eax, 1
$LN4389@MenuProc:
  10455	85 c0		 test	 eax, eax
  10457	74 20		 je	 SHORT $LN1870@MenuProc

; 18632: 											StockFontBuffer(x + 65, y + 184, FONT_PRIO_FRONT, 0, moji, 0);

  10459	6a 00		 push	 0
  1045b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10461	50		 push	 eax
  10462	6a 00		 push	 0
  10464	6a 01		 push	 1
  10466	8d 87 b8 00 00
	00		 lea	 eax, DWORD PTR [edi+184]
  1046c	50		 push	 eax
  1046d	8d 46 41	 lea	 eax, DWORD PTR [esi+65]
  10470	50		 push	 eax
  10471	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10476	83 c4 18	 add	 esp, 24			; 00000018H
$LN1870@MenuProc:

; 18633: 										sprintf(moji, "%s", opp_pet[locknum].opp_petskill3);

  10479	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10483	05 80 06 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1664
  10488	50		 push	 eax
  10489	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1048f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  10494	50		 push	 eax
  10495	e8 00 00 00 00	 call	 _sprintf
  1049a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18634: 										if (strcmp(moji, "(null)") != 0)

  1049d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  104a3	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ@
$LL4390@MenuProc:
  104a8	8a 10		 mov	 dl, BYTE PTR [eax]
  104aa	3a 11		 cmp	 dl, BYTE PTR [ecx]
  104ac	75 1a		 jne	 SHORT $LN4391@MenuProc
  104ae	84 d2		 test	 dl, dl
  104b0	74 12		 je	 SHORT $LN4392@MenuProc
  104b2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  104b5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  104b8	75 0e		 jne	 SHORT $LN4391@MenuProc
  104ba	83 c0 02	 add	 eax, 2
  104bd	83 c1 02	 add	 ecx, 2
  104c0	84 d2		 test	 dl, dl
  104c2	75 e4		 jne	 SHORT $LL4390@MenuProc
$LN4392@MenuProc:
  104c4	33 c0		 xor	 eax, eax
  104c6	eb 05		 jmp	 SHORT $LN4393@MenuProc
$LN4391@MenuProc:
  104c8	1b c0		 sbb	 eax, eax
  104ca	83 c8 01	 or	 eax, 1
$LN4393@MenuProc:
  104cd	85 c0		 test	 eax, eax
  104cf	74 20		 je	 SHORT $LN1871@MenuProc

; 18635: 											StockFontBuffer(x + 65, y + 206, FONT_PRIO_FRONT, 0, moji, 0);

  104d1	6a 00		 push	 0
  104d3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  104d9	50		 push	 eax
  104da	6a 00		 push	 0
  104dc	6a 01		 push	 1
  104de	8d 87 ce 00 00
	00		 lea	 eax, DWORD PTR [edi+206]
  104e4	50		 push	 eax
  104e5	8d 46 41	 lea	 eax, DWORD PTR [esi+65]
  104e8	50		 push	 eax
  104e9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  104ee	83 c4 18	 add	 esp, 24			; 00000018H
$LN1871@MenuProc:

; 18636: 										sprintf(moji, "%s", opp_pet[locknum].opp_petskill4);

  104f1	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  104fb	05 00 07 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1792
  10500	50		 push	 eax
  10501	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10507	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  1050c	50		 push	 eax
  1050d	e8 00 00 00 00	 call	 _sprintf
  10512	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18637: 										if (strcmp(moji, "(null)") != 0)

  10515	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1051b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ@
$LL4394@MenuProc:
  10520	8a 10		 mov	 dl, BYTE PTR [eax]
  10522	3a 11		 cmp	 dl, BYTE PTR [ecx]
  10524	75 1a		 jne	 SHORT $LN4395@MenuProc
  10526	84 d2		 test	 dl, dl
  10528	74 12		 je	 SHORT $LN4396@MenuProc
  1052a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  1052d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  10530	75 0e		 jne	 SHORT $LN4395@MenuProc
  10532	83 c0 02	 add	 eax, 2
  10535	83 c1 02	 add	 ecx, 2
  10538	84 d2		 test	 dl, dl
  1053a	75 e4		 jne	 SHORT $LL4394@MenuProc
$LN4396@MenuProc:
  1053c	33 c0		 xor	 eax, eax
  1053e	eb 05		 jmp	 SHORT $LN4397@MenuProc
$LN4395@MenuProc:
  10540	1b c0		 sbb	 eax, eax
  10542	83 c8 01	 or	 eax, 1
$LN4397@MenuProc:
  10545	85 c0		 test	 eax, eax
  10547	74 20		 je	 SHORT $LN1872@MenuProc

; 18638: 											StockFontBuffer(x + 65, y + 228, FONT_PRIO_FRONT, 0, moji, 0);

  10549	6a 00		 push	 0
  1054b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10551	50		 push	 eax
  10552	6a 00		 push	 0
  10554	6a 01		 push	 1
  10556	8d 87 e4 00 00
	00		 lea	 eax, DWORD PTR [edi+228]
  1055c	50		 push	 eax
  1055d	8d 46 41	 lea	 eax, DWORD PTR [esi+65]
  10560	50		 push	 eax
  10561	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10566	83 c4 18	 add	 esp, 24			; 00000018H
$LN1872@MenuProc:

; 18639: 										sprintf(moji, "%s", opp_pet[locknum].opp_petskill5);

  10569	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10573	05 80 07 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+1920
  10578	50		 push	 eax
  10579	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1057f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  10584	50		 push	 eax
  10585	e8 00 00 00 00	 call	 _sprintf
  1058a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18640: 										if (strcmp(moji, "(null)") != 0)

  1058d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10593	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ@
$LL4398@MenuProc:
  10598	8a 10		 mov	 dl, BYTE PTR [eax]
  1059a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  1059c	75 1a		 jne	 SHORT $LN4399@MenuProc
  1059e	84 d2		 test	 dl, dl
  105a0	74 12		 je	 SHORT $LN4400@MenuProc
  105a2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  105a5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  105a8	75 0e		 jne	 SHORT $LN4399@MenuProc
  105aa	83 c0 02	 add	 eax, 2
  105ad	83 c1 02	 add	 ecx, 2
  105b0	84 d2		 test	 dl, dl
  105b2	75 e4		 jne	 SHORT $LL4398@MenuProc
$LN4400@MenuProc:
  105b4	33 c0		 xor	 eax, eax
  105b6	eb 05		 jmp	 SHORT $LN4401@MenuProc
$LN4399@MenuProc:
  105b8	1b c0		 sbb	 eax, eax
  105ba	83 c8 01	 or	 eax, 1
$LN4401@MenuProc:
  105bd	85 c0		 test	 eax, eax
  105bf	74 20		 je	 SHORT $LN1873@MenuProc

; 18641: 											StockFontBuffer(x + 65, y + 250, FONT_PRIO_FRONT, 0, moji, 0);

  105c1	6a 00		 push	 0
  105c3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  105c9	50		 push	 eax
  105ca	6a 00		 push	 0
  105cc	6a 01		 push	 1
  105ce	8d 87 fa 00 00
	00		 lea	 eax, DWORD PTR [edi+250]
  105d4	50		 push	 eax
  105d5	8d 46 41	 lea	 eax, DWORD PTR [esi+65]
  105d8	50		 push	 eax
  105d9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  105de	83 c4 18	 add	 esp, 24			; 00000018H
$LN1873@MenuProc:

; 18642: 										sprintf(moji, "%s", opp_pet[locknum].opp_petskill6);

  105e1	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  105eb	05 00 08 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+2048
  105f0	50		 push	 eax
  105f1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  105f7	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  105fc	50		 push	 eax
  105fd	e8 00 00 00 00	 call	 _sprintf
  10602	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18643: 										if (strcmp(moji, "(null)") != 0)

  10605	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1060b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ@
$LL4402@MenuProc:
  10610	8a 10		 mov	 dl, BYTE PTR [eax]
  10612	3a 11		 cmp	 dl, BYTE PTR [ecx]
  10614	75 1a		 jne	 SHORT $LN4403@MenuProc
  10616	84 d2		 test	 dl, dl
  10618	74 12		 je	 SHORT $LN4404@MenuProc
  1061a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  1061d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  10620	75 0e		 jne	 SHORT $LN4403@MenuProc
  10622	83 c0 02	 add	 eax, 2
  10625	83 c1 02	 add	 ecx, 2
  10628	84 d2		 test	 dl, dl
  1062a	75 e4		 jne	 SHORT $LL4402@MenuProc
$LN4404@MenuProc:
  1062c	33 c0		 xor	 eax, eax
  1062e	eb 05		 jmp	 SHORT $LN4405@MenuProc
$LN4403@MenuProc:
  10630	1b c0		 sbb	 eax, eax
  10632	83 c8 01	 or	 eax, 1
$LN4405@MenuProc:
  10635	85 c0		 test	 eax, eax
  10637	74 20		 je	 SHORT $LN1874@MenuProc

; 18644: 											StockFontBuffer(x + 65, y + 272, FONT_PRIO_FRONT, 0, moji, 0);

  10639	6a 00		 push	 0
  1063b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10641	50		 push	 eax
  10642	6a 00		 push	 0
  10644	6a 01		 push	 1
  10646	8d 87 10 01 00
	00		 lea	 eax, DWORD PTR [edi+272]
  1064c	50		 push	 eax
  1064d	8d 46 41	 lea	 eax, DWORD PTR [esi+65]
  10650	50		 push	 eax
  10651	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10656	83 c4 18	 add	 esp, 24			; 00000018H
$LN1874@MenuProc:

; 18645: 										sprintf(moji, "%s", opp_pet[locknum].opp_petskill7);

  10659	69 05 00 00 00
	00 14 0d 00 00	 imul	 eax, DWORD PTR ?locknum@@3HA, 3348 ; locknum
  10663	05 80 08 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+2176
  10668	50		 push	 eax
  10669	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1066f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  10674	50		 push	 eax
  10675	e8 00 00 00 00	 call	 _sprintf
  1067a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18646: 										if (strcmp(moji, "(null)") != 0)

  1067d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10683	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_06OJHGLDPL@?$CInull?$CJ@
$LL4406@MenuProc:
  10688	8a 10		 mov	 dl, BYTE PTR [eax]
  1068a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  1068c	75 1a		 jne	 SHORT $LN4407@MenuProc
  1068e	84 d2		 test	 dl, dl
  10690	74 12		 je	 SHORT $LN4408@MenuProc
  10692	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  10695	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  10698	75 0e		 jne	 SHORT $LN4407@MenuProc
  1069a	83 c0 02	 add	 eax, 2
  1069d	83 c1 02	 add	 ecx, 2
  106a0	84 d2		 test	 dl, dl
  106a2	75 e4		 jne	 SHORT $LL4406@MenuProc
$LN4408@MenuProc:
  106a4	33 c0		 xor	 eax, eax
  106a6	eb 05		 jmp	 SHORT $LN4409@MenuProc
$LN4407@MenuProc:
  106a8	1b c0		 sbb	 eax, eax
  106aa	83 c8 01	 or	 eax, 1
$LN4409@MenuProc:
  106ad	85 c0		 test	 eax, eax
  106af	74 3e		 je	 SHORT $LN1876@MenuProc

; 18647: 											StockFontBuffer(x + 65, y + 294, FONT_PRIO_FRONT, 0, moji, 0);

  106b1	6a 00		 push	 0
  106b3	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  106b9	50		 push	 eax
  106ba	6a 00		 push	 0
  106bc	6a 01		 push	 1
  106be	8d 87 26 01 00
	00		 lea	 eax, DWORD PTR [edi+294]
  106c4	50		 push	 eax
  106c5	8d 46 41	 lea	 eax, DWORD PTR [esi+65]
  106c8	50		 push	 eax
  106c9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  106ce	83 c4 18	 add	 esp, 24			; 00000018H

; 18648: 									}
; 18649: 								}

  106d1	eb 1c		 jmp	 SHORT $LN1876@MenuProc
$LN1851@MenuProc:

; 18650: 								else if (SecondActPet != NULL) {

  106d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SecondActPet@@3PAUaction@@A
  106d8	85 c0		 test	 eax, eax
  106da	74 13		 je	 SHORT $LN1876@MenuProc

; 18651: 									DeathAction(SecondActPet);

  106dc	50		 push	 eax
  106dd	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  106e2	83 c4 04	 add	 esp, 4

; 18652: 									SecondActPet = NULL;

  106e5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondActPet@@3PAUaction@@A, 0
$LN1876@MenuProc:

; 18653: 								}
; 18654: #endif
; 18655: 							}
; 18656: 							//æ¾ç¤ºæ°å¼ãæè½ ( å³æ¹ )
; 18657: 							if (tradeList[i + 37].data != -1) {

  106ef	8b 8d 08 ba ff
	ff		 mov	 ecx, DWORD PTR tv38984[ebp]
  106f5	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  106f8	0f 84 42 03 00
	00		 je	 $LN462@MenuProc

; 18658: 								sprintf(moji, "%s", opp_pet[i].opp_petname);

  106fe	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  10704	83 c0 80	 add	 eax, -128		; ffffff80H
  10707	50		 push	 eax
  10708	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv38202[ebp], eax
  1070e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10714	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  10719	50		 push	 eax
  1071a	e8 00 00 00 00	 call	 _sprintf

; 18659: 								StockFontBuffer(x + 322, y + 13 + i * 42, FONT_PRIO_FRONT, atoi(opp_pet[i].opp_pettrans), moji, 0);

  1071f	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  10725	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  1072b	83 c4 0c	 add	 esp, 12			; 0000000cH
  1072e	05 80 03 00 00	 add	 eax, 896		; 00000380H
  10733	6a 00		 push	 0
  10735	51		 push	 ecx
  10736	50		 push	 eax
  10737	e8 00 00 00 00	 call	 _atoi
  1073c	83 c4 04	 add	 esp, 4
  1073f	50		 push	 eax
  10740	6a 01		 push	 1
  10742	ff b5 04 ba ff
	ff		 push	 DWORD PTR tv38968[ebp]
  10748	8d 86 42 01 00
	00		 lea	 eax, DWORD PTR [esi+322]
  1074e	50		 push	 eax
  1074f	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18660: 
; 18661: 								if (strcmp(opp_pet[i].opp_petname, opp_pet[i].opp_petfreename)) {

  10754	8b 8d 0c ba ff
	ff		 mov	 ecx, DWORD PTR tv38987[ebp]
  1075a	83 c4 18	 add	 esp, 24			; 00000018H
  1075d	8b 85 dc b9 ff
	ff		 mov	 eax, DWORD PTR tv38202[ebp]
$LL4410@MenuProc:
  10763	8a 10		 mov	 dl, BYTE PTR [eax]
  10765	3a 11		 cmp	 dl, BYTE PTR [ecx]
  10767	75 1a		 jne	 SHORT $LN4411@MenuProc
  10769	84 d2		 test	 dl, dl
  1076b	74 12		 je	 SHORT $LN4412@MenuProc
  1076d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  10770	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  10773	75 0e		 jne	 SHORT $LN4411@MenuProc
  10775	83 c0 02	 add	 eax, 2
  10778	83 c1 02	 add	 ecx, 2
  1077b	84 d2		 test	 dl, dl
  1077d	75 e4		 jne	 SHORT $LL4410@MenuProc
$LN4412@MenuProc:
  1077f	33 c0		 xor	 eax, eax
  10781	eb 05		 jmp	 SHORT $LN4413@MenuProc
$LN4411@MenuProc:
  10783	1b c0		 sbb	 eax, eax
  10785	83 c8 01	 or	 eax, 1
$LN4413@MenuProc:
  10788	85 c0		 test	 eax, eax
  1078a	74 39		 je	 SHORT $LN1878@MenuProc

; 18662: 									sprintf(moji, "[%s]", opp_pet[i].opp_petfreename);

  1078c	ff b5 0c ba ff
	ff		 push	 DWORD PTR tv38987[ebp]
  10792	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10798	68 00 00 00 00	 push	 OFFSET ??_C@_04LIFAFMCE@?$FL?$CFs?$FN@
  1079d	50		 push	 eax
  1079e	e8 00 00 00 00	 call	 _sprintf

; 18663: 									StockFontBuffer(x + 442, y + 13 + i * 42, FONT_PRIO_FRONT, 6, moji, 0);

  107a3	6a 00		 push	 0
  107a5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  107ab	50		 push	 eax
  107ac	6a 06		 push	 6
  107ae	6a 01		 push	 1
  107b0	ff b5 04 ba ff
	ff		 push	 DWORD PTR tv38968[ebp]
  107b6	8d 86 ba 01 00
	00		 lea	 eax, DWORD PTR [esi+442]
  107bc	50		 push	 eax
  107bd	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  107c2	83 c4 24	 add	 esp, 36			; 00000024H
$LN1878@MenuProc:

; 18664: 								}
; 18665: 
; 18666: #ifdef _PET_2TRANS
; 18667: 								sprintf(moji, "%s", "");

  107c5	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  107ca	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  107d0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  107d5	50		 push	 eax
  107d6	e8 00 00 00 00	 call	 _sprintf

; 18668: 								if (atoi(opp_pet[i].opp_pettrans) == 1)

  107db	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  107e1	05 80 03 00 00	 add	 eax, 896		; 00000380H
  107e6	50		 push	 eax
  107e7	e8 00 00 00 00	 call	 _atoi
  107ec	83 c4 10	 add	 esp, 16			; 00000010H
  107ef	83 f8 01	 cmp	 eax, 1
  107f2	75 07		 jne	 SHORT $LN1879@MenuProc

; 18669: 									sprintf(moji, "%s", "1 ë¨ê³");

  107f4	68 00 00 00 00	 push	 OFFSET ??_C@_06LBBHKEFA@1?5?$LE?$NM?$LA?h@
  107f9	eb 1e		 jmp	 SHORT $LN5155@MenuProc
$LN1879@MenuProc:

; 18670: 								else if (atoi(opp_pet[i].opp_pettrans) == 2)

  107fb	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  10801	05 80 03 00 00	 add	 eax, 896		; 00000380H
  10806	50		 push	 eax
  10807	e8 00 00 00 00	 call	 _atoi
  1080c	83 c4 04	 add	 esp, 4
  1080f	83 f8 02	 cmp	 eax, 2
  10812	75 19		 jne	 SHORT $LN1881@MenuProc

; 18671: 									sprintf(moji, "%s", "2 ë¨ê³");

  10814	68 00 00 00 00	 push	 OFFSET ??_C@_06IAPPLOMN@2?5?$LE?$NM?$LA?h@
$LN5155@MenuProc:

; 18672: #ifdef _SHOW_FUSION
; 18673: 								if (LOWORD(atoi(opp_pet[i].opp_fusion)) == 1)

  10819	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1081f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  10824	50		 push	 eax
  10825	e8 00 00 00 00	 call	 _sprintf
  1082a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1881@MenuProc:
  1082d	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  10833	05 80 08 00 00	 add	 eax, 2176		; 00000880H
  10838	50		 push	 eax
  10839	e8 00 00 00 00	 call	 _atoi
  1083e	83 c4 04	 add	 esp, 4
  10841	66 83 f8 01	 cmp	 ax, 1
  10845	75 19		 jne	 SHORT $LN1882@MenuProc

; 18674: 									sprintf(moji, "%s", "ìµí©");

  10847	68 00 00 00 00	 push	 OFFSET ??_C@_04IAHOEAOA@?$MA?$LG?G?U@
  1084c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10852	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  10857	50		 push	 eax
  10858	e8 00 00 00 00	 call	 _sprintf
  1085d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1882@MenuProc:

; 18675: #endif
; 18676: #else
; 18677: 								sprintf(moji, "%s", (atoi(opp_pet[i].opp_pettrans) == 0) ? "" : "è½¬");
; 18678: #endif
; 18679: 								StockFontBuffer(x + 590, y + 13 + i * 42, FONT_PRIO_FRONT, 2, moji, 0);

  10860	6a 00		 push	 0
  10862	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10868	50		 push	 eax
  10869	6a 02		 push	 2
  1086b	6a 01		 push	 1
  1086d	ff b5 04 ba ff
	ff		 push	 DWORD PTR tv38968[ebp]
  10873	8d 86 4e 02 00
	00		 lea	 eax, DWORD PTR [esi+590]
  10879	50		 push	 eax
  1087a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18680: 
; 18681: 								sprintf(moji, "%4d", atoi(opp_pet[i].opp_petshowhp));

  1087f	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  10885	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  1088a	50		 push	 eax
  1088b	e8 00 00 00 00	 call	 _atoi
  10890	50		 push	 eax
  10891	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10897	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  1089c	50		 push	 eax
  1089d	e8 00 00 00 00	 call	 _sprintf
  108a2	83 c4 28	 add	 esp, 40			; 00000028H

; 18682: 								StockFontBuffer(x + 504, y + 33 + i * 42, FONT_PRIO_FRONT, atoi(opp_pet[i].opp_pettrans), moji, 0);

  108a5	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  108ab	6a 00		 push	 0
  108ad	50		 push	 eax
  108ae	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  108b4	05 80 03 00 00	 add	 eax, 896		; 00000380H
  108b9	50		 push	 eax
  108ba	e8 00 00 00 00	 call	 _atoi
  108bf	83 c4 04	 add	 esp, 4
  108c2	50		 push	 eax
  108c3	6a 01		 push	 1
  108c5	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv38982[ebp]
  108cb	8d 86 f8 01 00
	00		 lea	 eax, DWORD PTR [esi+504]
  108d1	50		 push	 eax
  108d2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18683: 								sprintf(moji, "%3d", atoi(opp_pet[i].opp_petlevel));

  108d7	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  108dd	05 00 01 00 00	 add	 eax, 256		; 00000100H
  108e2	50		 push	 eax
  108e3	e8 00 00 00 00	 call	 _atoi
  108e8	50		 push	 eax
  108e9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  108ef	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  108f4	50		 push	 eax
  108f5	e8 00 00 00 00	 call	 _sprintf
  108fa	83 c4 28	 add	 esp, 40			; 00000028H

; 18684: 								StockFontBuffer(x + 558, y + 33 + i * 42, FONT_PRIO_FRONT, atoi(opp_pet[i].opp_pettrans), moji, 0);

  108fd	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10903	6a 00		 push	 0
  10905	50		 push	 eax
  10906	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  1090c	05 80 03 00 00	 add	 eax, 896		; 00000380H
  10911	50		 push	 eax
  10912	e8 00 00 00 00	 call	 _atoi
  10917	83 c4 04	 add	 esp, 4
  1091a	50		 push	 eax
  1091b	6a 01		 push	 1
  1091d	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv38982[ebp]
  10923	8d 86 2e 02 00
	00		 lea	 eax, DWORD PTR [esi+558]
  10929	50		 push	 eax
  1092a	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18685: 								sprintf(moji, "%3d", atoi(opp_pet[i].opp_petatk));

  1092f	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  10935	05 80 01 00 00	 add	 eax, 384		; 00000180H
  1093a	50		 push	 eax
  1093b	e8 00 00 00 00	 call	 _atoi
  10940	50		 push	 eax
  10941	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10947	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  1094c	50		 push	 eax
  1094d	e8 00 00 00 00	 call	 _sprintf
  10952	83 c4 28	 add	 esp, 40			; 00000028H

; 18686: 								StockFontBuffer(x + 345, y + 33 + i * 42, FONT_PRIO_FRONT, atoi(opp_pet[i].opp_pettrans), moji, 0);

  10955	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1095b	6a 00		 push	 0
  1095d	50		 push	 eax
  1095e	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  10964	05 80 03 00 00	 add	 eax, 896		; 00000380H
  10969	50		 push	 eax
  1096a	e8 00 00 00 00	 call	 _atoi
  1096f	83 c4 04	 add	 esp, 4
  10972	50		 push	 eax
  10973	6a 01		 push	 1
  10975	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv38982[ebp]
  1097b	8d 86 59 01 00
	00		 lea	 eax, DWORD PTR [esi+345]
  10981	50		 push	 eax
  10982	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18687: 								sprintf(moji, "%3d", atoi(opp_pet[i].opp_petdef));

  10987	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  1098d	05 00 02 00 00	 add	 eax, 512		; 00000200H
  10992	50		 push	 eax
  10993	e8 00 00 00 00	 call	 _atoi
  10998	50		 push	 eax
  10999	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  1099f	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  109a4	50		 push	 eax
  109a5	e8 00 00 00 00	 call	 _sprintf
  109aa	83 c4 28	 add	 esp, 40			; 00000028H

; 18688: 								StockFontBuffer(x + 398, y + 33 + i * 42, FONT_PRIO_FRONT, atoi(opp_pet[i].opp_pettrans), moji, 0);

  109ad	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  109b3	6a 00		 push	 0
  109b5	50		 push	 eax
  109b6	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  109bc	05 80 03 00 00	 add	 eax, 896		; 00000380H
  109c1	50		 push	 eax
  109c2	e8 00 00 00 00	 call	 _atoi
  109c7	83 c4 04	 add	 esp, 4
  109ca	50		 push	 eax
  109cb	6a 01		 push	 1
  109cd	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv38982[ebp]
  109d3	8d 86 8e 01 00
	00		 lea	 eax, DWORD PTR [esi+398]
  109d9	50		 push	 eax
  109da	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18689: 								sprintf(moji, "%3d", atoi(opp_pet[i].opp_petquick));

  109df	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  109e5	05 80 02 00 00	 add	 eax, 640		; 00000280H
  109ea	50		 push	 eax
  109eb	e8 00 00 00 00	 call	 _atoi
  109f0	50		 push	 eax
  109f1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  109f7	68 00 00 00 00	 push	 OFFSET ??_C@_03GOOLIKIF@?$CF3d@
  109fc	50		 push	 eax
  109fd	e8 00 00 00 00	 call	 _sprintf
  10a02	83 c4 28	 add	 esp, 40			; 00000028H

; 18690: 								StockFontBuffer(x + 451, y + 33 + i * 42, FONT_PRIO_FRONT, atoi(opp_pet[i].opp_pettrans), moji, 0);

  10a05	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10a0b	6a 00		 push	 0
  10a0d	50		 push	 eax
  10a0e	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38987[ebp]
  10a14	05 80 03 00 00	 add	 eax, 896		; 00000380H
  10a19	50		 push	 eax
  10a1a	e8 00 00 00 00	 call	 _atoi
  10a1f	83 c4 04	 add	 esp, 4
  10a22	50		 push	 eax
  10a23	6a 01		 push	 1
  10a25	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR tv38982[ebp]
  10a2b	8d 86 c3 01 00
	00		 lea	 eax, DWORD PTR [esi+451]
  10a31	50		 push	 eax
  10a32	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10a37	8b 8d 08 ba ff
	ff		 mov	 ecx, DWORD PTR tv38984[ebp]
  10a3d	83 c4 18	 add	 esp, 24			; 00000018H
$LN462@MenuProc:

; 18476: 						for (i = 0; i < 5; i++)

  10a40	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR tv38982[ebp]
  10a46	8d 96 58 02 00
	00		 lea	 edx, DWORD PTR [esi+600]
  10a4c	ff 85 00 ba ff
	ff		 inc	 DWORD PTR _i$35$[ebp]
  10a52	81 c1 18 03 00
	00		 add	 ecx, 792		; 00000318H
  10a58	81 85 0c ba ff
	ff 14 0d 00 00	 add	 DWORD PTR tv38987[ebp], 3348 ; 00000d14H
  10a62	83 c0 2a	 add	 eax, 42			; 0000002aH
  10a65	89 8d 08 ba ff
	ff		 mov	 DWORD PTR tv38984[ebp], ecx
  10a6b	89 85 f0 b9 ff
	ff		 mov	 DWORD PTR tv38982[ebp], eax
  10a71	81 f9 f4 81 00
	00		 cmp	 ecx, OFFSET ?tradeList@@3PAUtradelist@@A+33268
  10a77	0f 8c c3 f1 ff
	ff		 jl	 $LL464@MenuProc

; 18691: 							}
; 18692: 						}
; 18693: 						//æ¾ç¤ºéå·
; 18694: 						for (i = 0; i < 3; i++)

  10a7d	b8 80 01 00 00	 mov	 eax, OFFSET ?opp_item@@3PAUshowitem@@A+384
  10a82	33 d2		 xor	 edx, edx
  10a84	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv38927[ebp], eax
  10a8a	b8 20 47 00 00	 mov	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+18208
  10a8f	89 95 f0 b9 ff
	ff		 mov	 DWORD PTR tv38932[ebp], edx
  10a95	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL478@MenuProc:

; 18695: 						{
; 18696: 							for (j = 0; j < 5; j++)

  10aa0	33 c9		 xor	 ecx, ecx
  10aa2	89 85 ec b9 ff
	ff		 mov	 DWORD PTR tv38925[ebp], eax
  10aa8	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv38927[ebp]
  10aae	89 8d fc b9 ff
	ff		 mov	 DWORD PTR tv38950[ebp], ecx
  10ab4	89 95 0c ba ff
	ff		 mov	 DWORD PTR tv38933[ebp], edx
  10aba	89 8d 04 ba ff
	ff		 mov	 DWORD PTR tv38948[ebp], ecx
  10ac0	89 85 00 ba ff
	ff		 mov	 DWORD PTR tv38927[ebp], eax
  10ac6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL481@MenuProc:

; 18697: 							{
; 18698: 								if (MakeHitBox(x + 368 + 51 * j - 35, y + 265 + 47 * i - 23,
; 18699: 									x + 368 + 51 * j + 18, y + 265 + 47 * i + 23, DISP_PRIO_IME3) == TRUE)

  10ad0	8b 95 f0 b9 ff
	ff		 mov	 edx, DWORD PTR tv38932[ebp]
  10ad6	6a 69		 push	 105			; 00000069H
  10ad8	8d 82 20 01 00
	00		 lea	 eax, DWORD PTR [edx+288]
  10ade	03 c7		 add	 eax, edi
  10ae0	50		 push	 eax
  10ae1	8d 86 82 01 00
	00		 lea	 eax, DWORD PTR [esi+386]
  10ae7	03 c1		 add	 eax, ecx
  10ae9	50		 push	 eax
  10aea	8d 82 f2 00 00
	00		 lea	 eax, DWORD PTR [edx+242]
  10af0	03 c7		 add	 eax, edi
  10af2	50		 push	 eax
  10af3	8d 81 4d 01 00
	00		 lea	 eax, DWORD PTR [ecx+333]
  10af9	03 c6		 add	 eax, esi
  10afb	50		 push	 eax
  10afc	e8 00 00 00 00	 call	 ?MakeHitBox@@YAHHHHHH@Z	; MakeHitBox
  10b01	83 c4 14	 add	 esp, 20			; 00000014H
  10b04	83 f8 01	 cmp	 eax, 1
  10b07	0f 85 6e 00 00
	00		 jne	 $LN4869@MenuProc

; 18700: 								{
; 18701: #ifdef _TRADELOCKBTN				// (ä¸å¯å¼) Syu ADD å¢å éå®é®
; 18702: 									if (mouse.onceState & MOUSE_LEFT_CRICK) {

  10b0d	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  10b14	8b 85 0c ba ff
	ff		 mov	 eax, DWORD PTR tv38933[ebp]
  10b1a	74 14		 je	 SHORT $LN4868@MenuProc

; 18703: 										locknum2 = i * 5 + j;

  10b1c	8b c8		 mov	 ecx, eax

; 18704: 										locknum = -1;

  10b1e	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?locknum@@3HA, -1 ; locknum
  10b28	89 0d 00 00 00
	00		 mov	 DWORD PTR ?locknum2@@3HA, ecx ; locknum2
  10b2e	eb 06		 jmp	 SHORT $LN1884@MenuProc
$LN4868@MenuProc:

; 18700: 								{
; 18701: #ifdef _TRADELOCKBTN				// (ä¸å¯å¼) Syu ADD å¢å éå®é®
; 18702: 									if (mouse.onceState & MOUSE_LEFT_CRICK) {

  10b30	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
$LN1884@MenuProc:

; 18705: 									}
; 18706: 									if (locknum2 == -1) {

  10b36	83 f9 ff	 cmp	 ecx, -1
  10b39	75 12		 jne	 SHORT $LN1885@MenuProc

; 18707: 										locknum2 = i * 5 + j;

  10b3b	8b c8		 mov	 ecx, eax

; 18708: 										locknum = -1;

  10b3d	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?locknum@@3HA, -1 ; locknum
  10b47	89 0d 00 00 00
	00		 mov	 DWORD PTR ?locknum2@@3HA, ecx ; locknum2
$LN1885@MenuProc:

; 18709: 									}
; 18710: 									if (SecondActPet != NULL) {

  10b4d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SecondActPet@@3PAUaction@@A
  10b52	85 c0		 test	 eax, eax
  10b54	74 19		 je	 SHORT $LN1886@MenuProc

; 18711: 										DeathAction(SecondActPet);

  10b56	50		 push	 eax
  10b57	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 18712: 										SecondActPet = NULL;

  10b5c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
  10b62	83 c4 04	 add	 esp, 4
  10b65	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SecondActPet@@3PAUaction@@A, 0
$LN1886@MenuProc:

; 18713: 									}
; 18714: #ifdef _PET_ITEM
; 18715: 									bViewPetEquip = FALSE;

  10b6f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA, 0
  10b79	eb 06		 jmp	 SHORT $LN1883@MenuProc
$LN4869@MenuProc:

; 18697: 							{
; 18698: 								if (MakeHitBox(x + 368 + 51 * j - 35, y + 265 + 47 * i - 23,
; 18699: 									x + 368 + 51 * j + 18, y + 265 + 47 * i + 23, DISP_PRIO_IME3) == TRUE)

  10b7b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
$LN1883@MenuProc:

; 18716: #endif
; 18717: 								}
; 18718: 								if (locknum2 != -1)

  10b81	83 f9 ff	 cmp	 ecx, -1
  10b84	0f 84 fb 02 00
	00		 je	 $LN4870@MenuProc

; 18719: 								{
; 18720: 									x = SecondTradeWnd->x;

  10b8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SecondTradeWnd@@3PAUaction@@A ; SecondTradeWnd
  10b8f	8b 70 18	 mov	 esi, DWORD PTR [eax+24]

; 18721: 									y = SecondTradeWnd->y;

  10b92	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]

; 18722: 									if (tradeList[locknum2 + 22].data != -1)

  10b95	69 c1 18 03 00
	00		 imul	 eax, ecx, 792
  10b9b	89 b5 e8 b9 ff
	ff		 mov	 DWORD PTR _x$4$[ebp], esi
  10ba1	83 b8 14 44 00
	00 ff		 cmp	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+17428], -1
  10ba8	0f 84 d7 02 00
	00		 je	 $LN4870@MenuProc

; 18723: 									{
; 18724: 										//è¯´æè¿é¿æ¢è¡
; 18725: 										char *splitPoint = opp_item[locknum2].effect;

  10bae	8b f1		 mov	 esi, ecx
  10bb0	c1 e6 04	 shl	 esi, 4
  10bb3	2b f1		 sub	 esi, ecx
  10bb5	c1 e6 07	 shl	 esi, 7
  10bb8	81 c6 00 02 00
	00		 add	 esi, OFFSET ?opp_item@@3PAUshowitem@@A+512

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  10bbe	83 ff 28	 cmp	 edi, 40			; 00000028H
  10bc1	0f 8f 93 00 00
	00		 jg	 $LN3326@MenuProc
$LL482@MenuProc:

; 18730: 											if (strlen(splitPoint) > 28)

  10bc7	8b ce		 mov	 ecx, esi
  10bc9	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  10bcc	0f 1f 40 00	 npad	 4
$LL4414@MenuProc:
  10bd0	8a 01		 mov	 al, BYTE PTR [ecx]
  10bd2	41		 inc	 ecx
  10bd3	84 c0		 test	 al, al
  10bd5	75 f9		 jne	 SHORT $LL4414@MenuProc
  10bd7	2b ca		 sub	 ecx, edx
  10bd9	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  10bdc	0f 86 4a 01 00
	00		 jbe	 $LN1890@MenuProc

; 18731: 											{
; 18732: 												strncpy(moji, splitPoint, 28);

  10be2	6a 1c		 push	 28			; 0000001cH
  10be4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10bea	56		 push	 esi
  10beb	50		 push	 eax
  10bec	e8 00 00 00 00	 call	 _strncpy

; 18733: 												moji[28] = NULL;
; 18734: 												if (GetStrLastByte(moji) == 3)

  10bf1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10bf7	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0
  10bfe	50		 push	 eax
  10bff	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  10c04	83 c4 10	 add	 esp, 16			; 00000010H
  10c07	83 f8 03	 cmp	 eax, 3
  10c0a	75 0c		 jne	 SHORT $LN1892@MenuProc

; 18735: 												{
; 18736: 													moji[27] = NULL;

  10c0c	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+27], 0

; 18737: 													splitPoint += 27;

  10c13	83 c6 1b	 add	 esi, 27			; 0000001bH

; 18738: 												}

  10c16	eb 0a		 jmp	 SHORT $LN1893@MenuProc
$LN1892@MenuProc:

; 18739: 												else
; 18740: 												{
; 18741: 													moji[28] = NULL;

  10c18	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _moji$[ebp+28], 0

; 18742: 													splitPoint += 28;

  10c1f	83 c6 1c	 add	 esi, 28			; 0000001cH
$LN1893@MenuProc:

; 18743: 												}
; 18744: 												StockFontBuffer(x + 50, y + 160, FONT_PRIO_FRONT, 0, moji, 0); y += 40;

  10c22	6a 00		 push	 0
  10c24	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10c2a	50		 push	 eax
  10c2b	6a 00		 push	 0
  10c2d	6a 01		 push	 1
  10c2f	8d 87 a0 00 00
	00		 lea	 eax, DWORD PTR [edi+160]
  10c35	50		 push	 eax
  10c36	8b 85 e8 b9 ff
	ff		 mov	 eax, DWORD PTR _x$4$[ebp]
  10c3c	83 c0 32	 add	 eax, 50			; 00000032H
  10c3f	50		 push	 eax
  10c40	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10c45	83 c7 28	 add	 edi, 40			; 00000028H
  10c48	83 c4 18	 add	 esp, 24			; 00000018H
  10c4b	83 ff 28	 cmp	 edi, 40			; 00000028H
  10c4e	0f 8e 73 ff ff
	ff		 jle	 $LL482@MenuProc

; 18726: 										while (1)
; 18727: 										{
; 18728: 											if (y > 40)

  10c54	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
$LN3326@MenuProc:

; 18729: 												break;

  10c5a	8b b5 e8 b9 ff
	ff		 mov	 esi, DWORD PTR _x$4$[ebp]
  10c60	8b c6		 mov	 eax, esi
  10c62	83 c0 32	 add	 eax, 50			; 00000032H
  10c65	89 85 f4 b9 ff
	ff		 mov	 DWORD PTR $T15[ebp], eax
$LN483@MenuProc:

; 18750: 												break;
; 18751: 											}
; 18752: 										}
; 18753: 										StockDispBuffer(x + 80, y + 90, DISP_PRIO_IME3, atoi(opp_item[locknum2].graph), 0);

  10c6b	8b c1		 mov	 eax, ecx
  10c6d	c1 e0 04	 shl	 eax, 4
  10c70	2b c1		 sub	 eax, ecx
  10c72	c1 e0 07	 shl	 eax, 7
  10c75	05 80 01 00 00	 add	 eax, OFFSET ?opp_item@@3PAUshowitem@@A+384
  10c7a	6a 00		 push	 0
  10c7c	50		 push	 eax
  10c7d	e8 00 00 00 00	 call	 _atoi
  10c82	83 c4 04	 add	 esp, 4
  10c85	50		 push	 eax
  10c86	6a 69		 push	 105			; 00000069H
  10c88	8d 47 5a	 lea	 eax, DWORD PTR [edi+90]
  10c8b	50		 push	 eax
  10c8c	8d 46 50	 lea	 eax, DWORD PTR [esi+80]
  10c8f	50		 push	 eax
  10c90	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18754: 
; 18755: 										sprintf(moji, "%s ", opp_item[locknum2].name);

  10c95	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
  10c9b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10ca1	c1 e1 04	 shl	 ecx, 4
  10ca4	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
  10caa	c1 e1 07	 shl	 ecx, 7
  10cad	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?opp_item@@3PAUshowitem@@A
  10cb3	51		 push	 ecx
  10cb4	68 00 00 00 00	 push	 OFFSET ??_C@_03IKGEINEE@?$CFs?5@
  10cb9	50		 push	 eax
  10cba	e8 00 00 00 00	 call	 _sprintf

; 18756: 										StockFontBuffer(x + 50, y + 120, FONT_PRIO_FRONT, 0, moji, 0);

  10cbf	6a 00		 push	 0
  10cc1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10cc7	50		 push	 eax
  10cc8	6a 00		 push	 0
  10cca	6a 01		 push	 1
  10ccc	8d 47 78	 lea	 eax, DWORD PTR [edi+120]
  10ccf	50		 push	 eax
  10cd0	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR $T15[ebp]
  10cd6	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18757: 										if (strcmp(opp_item[locknum2].name, opp_item[locknum2].freename))

  10cdb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?locknum2@@3HA ; locknum2
  10ce0	83 c4 38	 add	 esp, 56			; 00000038H
  10ce3	c1 e0 04	 shl	 eax, 4
  10ce6	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?locknum2@@3HA ; locknum2
  10cec	c1 e0 07	 shl	 eax, 7
  10cef	8d 88 80 00 00
	00		 lea	 ecx, DWORD PTR ?opp_item@@3PAUshowitem@@A[eax+128]
  10cf5	89 8d dc b9 ff
	ff		 mov	 DWORD PTR tv39365[ebp], ecx
  10cfb	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?opp_item@@3PAUshowitem@@A[eax]
$LL4415@MenuProc:
  10d01	8a 10		 mov	 dl, BYTE PTR [eax]
  10d03	3a 11		 cmp	 dl, BYTE PTR [ecx]
  10d05	0f 85 6d 00 00
	00		 jne	 $LN4416@MenuProc
  10d0b	84 d2		 test	 dl, dl
  10d0d	74 16		 je	 SHORT $LN4417@MenuProc
  10d0f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  10d12	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  10d15	0f 85 5d 00 00
	00		 jne	 $LN4416@MenuProc
  10d1b	83 c0 02	 add	 eax, 2
  10d1e	83 c1 02	 add	 ecx, 2
  10d21	84 d2		 test	 dl, dl
  10d23	75 dc		 jne	 SHORT $LL4415@MenuProc
$LN4417@MenuProc:
  10d25	33 c0		 xor	 eax, eax
  10d27	e9 51 00 00 00	 jmp	 $LN4418@MenuProc
$LN1890@MenuProc:

; 18745: 											}
; 18746: 											else
; 18747: 											{
; 18748: 												strcpy(moji, splitPoint);

  10d2c	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _moji$[ebp]
  10d32	2b ce		 sub	 ecx, esi
$LL2044@MenuProc:
  10d34	8a 06		 mov	 al, BYTE PTR [esi]
  10d36	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  10d39	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  10d3d	84 c0		 test	 al, al
  10d3f	75 f3		 jne	 SHORT $LL2044@MenuProc

; 18749: 												StockFontBuffer(x + 50, y + 160, FONT_PRIO_FRONT, 0, moji, 0);

  10d41	8b b5 e8 b9 ff
	ff		 mov	 esi, DWORD PTR _x$4$[ebp]
  10d47	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10d4d	6a 00		 push	 0
  10d4f	50		 push	 eax
  10d50	6a 00		 push	 0
  10d52	6a 01		 push	 1
  10d54	8d 87 a0 00 00
	00		 lea	 eax, DWORD PTR [edi+160]
  10d5a	8d 4e 32	 lea	 ecx, DWORD PTR [esi+50]
  10d5d	50		 push	 eax
  10d5e	51		 push	 ecx
  10d5f	89 8d f4 b9 ff
	ff		 mov	 DWORD PTR $T15[ebp], ecx
  10d65	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10d6a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
  10d70	83 c4 18	 add	 esp, 24			; 00000018H
  10d73	e9 f3 fe ff ff	 jmp	 $LN483@MenuProc
$LN4416@MenuProc:

; 18757: 										if (strcmp(opp_item[locknum2].name, opp_item[locknum2].freename))

  10d78	1b c0		 sbb	 eax, eax
  10d7a	83 c8 01	 or	 eax, 1
$LN4418@MenuProc:
  10d7d	85 c0		 test	 eax, eax
  10d7f	74 39		 je	 SHORT $LN1894@MenuProc

; 18758: 										{
; 18759: 											sprintf(moji, "[%s]", opp_item[locknum2].freename);

  10d81	ff b5 dc b9 ff
	ff		 push	 DWORD PTR tv39365[ebp]
  10d87	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10d8d	68 00 00 00 00	 push	 OFFSET ??_C@_04LIFAFMCE@?$FL?$CFs?$FN@
  10d92	50		 push	 eax
  10d93	e8 00 00 00 00	 call	 _sprintf

; 18760: 											StockFontBuffer(x + 50, y + 140, FONT_PRIO_FRONT, 6, moji, 0);

  10d98	6a 00		 push	 0
  10d9a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10da0	50		 push	 eax
  10da1	6a 06		 push	 6
  10da3	6a 01		 push	 1
  10da5	8d 87 8c 00 00
	00		 lea	 eax, DWORD PTR [edi+140]
  10dab	50		 push	 eax
  10dac	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR $T15[ebp]
  10db2	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10db7	83 c4 24	 add	 esp, 36			; 00000024H
$LN1894@MenuProc:

; 18761: 										}
; 18762: #ifdef _ITEM_PILENUMS
; 18763: 										sprintf(moji, "x%d", tradeList[locknum2 + 22].pilenum);

  10dba	69 05 00 00 00
	00 18 03 00 00	 imul	 eax, DWORD PTR ?locknum2@@3HA, 792 ; locknum2
  10dc4	ff b0 20 47 00
	00		 push	 DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+18208]
  10dca	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10dd0	68 00 00 00 00	 push	 OFFSET ??_C@_03EPCHICDI@x?$CFd@
  10dd5	50		 push	 eax
  10dd6	e8 00 00 00 00	 call	 _sprintf

; 18764: #else
; 18765: 										sprintf(moji, "%s", opp_item[locknum2].name);
; 18766: #endif
; 18767: 										StockFontBuffer(x + 140, y + 80, FONT_PRIO_FRONT, 0, moji, 0);

  10ddb	6a 00		 push	 0
  10ddd	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10de3	50		 push	 eax
  10de4	6a 00		 push	 0
  10de6	6a 01		 push	 1
  10de8	8d 47 50	 lea	 eax, DWORD PTR [edi+80]
  10deb	50		 push	 eax
  10dec	8d 86 8c 00 00
	00		 lea	 eax, DWORD PTR [esi+140]
  10df2	50		 push	 eax
  10df3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 18768: 
; 18769: 
; 18770: 										if (strcmp(opp_item[locknum2].damage, "") != 0)

  10df8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
  10dfe	83 c4 24	 add	 esp, 36			; 00000024H
  10e01	c1 e1 04	 shl	 ecx, 4
  10e04	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?locknum2@@3HA ; locknum2
  10e0a	c1 e1 07	 shl	 ecx, 7
  10e0d	8d 81 00 07 00
	00		 lea	 eax, DWORD PTR ?opp_item@@3PAUshowitem@@A[ecx+1792]
  10e13	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@@
  10e18	89 85 dc b9 ff
	ff		 mov	 DWORD PTR tv39395[ebp], eax
  10e1e	66 90		 npad	 2
$LL4419@MenuProc:
  10e20	8a 10		 mov	 dl, BYTE PTR [eax]
  10e22	3a 11		 cmp	 dl, BYTE PTR [ecx]
  10e24	75 1a		 jne	 SHORT $LN4420@MenuProc
  10e26	84 d2		 test	 dl, dl
  10e28	74 12		 je	 SHORT $LN4421@MenuProc
  10e2a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  10e2d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  10e30	75 0e		 jne	 SHORT $LN4420@MenuProc
  10e32	83 c0 02	 add	 eax, 2
  10e35	83 c1 02	 add	 ecx, 2
  10e38	84 d2		 test	 dl, dl
  10e3a	75 e4		 jne	 SHORT $LL4419@MenuProc
$LN4421@MenuProc:
  10e3c	33 c0		 xor	 eax, eax
  10e3e	eb 05		 jmp	 SHORT $LN4422@MenuProc
$LN4420@MenuProc:
  10e40	1b c0		 sbb	 eax, eax
  10e42	83 c8 01	 or	 eax, 1
$LN4422@MenuProc:
  10e45	85 c0		 test	 eax, eax
  10e47	74 1a		 je	 SHORT $LN1895@MenuProc

; 18771: 											sprintf(moji, "ì¸ë´ë ¥ï¼%s", opp_item[locknum2].damage);

  10e49	ff b5 dc b9 ff
	ff		 push	 DWORD PTR tv39395[ebp]
  10e4f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10e55	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPPMEBMP@?$MA?N?$LD?$LL?$LH?B?$KD?$LK?$CFs@
  10e5a	50		 push	 eax
  10e5b	e8 00 00 00 00	 call	 _sprintf
  10e60	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1895@MenuProc:

; 18772: 										StockFontBuffer(x + 50, y + 240, FONT_PRIO_FRONT, 0, moji, 0);

  10e63	6a 00		 push	 0
  10e65	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10e6b	50		 push	 eax
  10e6c	6a 00		 push	 0
  10e6e	6a 01		 push	 1
  10e70	8d 87 f0 00 00
	00		 lea	 eax, DWORD PTR [edi+240]
  10e76	50		 push	 eax
  10e77	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR $T15[ebp]
  10e7d	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10e82	83 c4 18	 add	 esp, 24			; 00000018H
$LN4870@MenuProc:

; 18773: 
; 18774: 									}
; 18775: #endif
; 18776: 								}
; 18777: 								if (tradeList[i * 5 + j + 22].data != -1)

  10e85	8b 85 ec b9 ff
	ff		 mov	 eax, DWORD PTR tv38925[ebp]
  10e8b	83 b8 f4 fc ff
	ff ff		 cmp	 DWORD PTR [eax-780], -1
  10e92	0f 84 8e 00 00
	00		 je	 $LN479@MenuProc

; 18778: 								{
; 18779: 									StockDispBuffer(x + 368 + 47 * j, y + 265 + 47 * i, DISP_PRIO_IME3, atoi(opp_item[i * 5 + j].graph), 0);

  10e98	8b 85 00 ba ff
	ff		 mov	 eax, DWORD PTR tv38927[ebp]
  10e9e	6a 00		 push	 0
  10ea0	50		 push	 eax
  10ea1	e8 00 00 00 00	 call	 _atoi
  10ea6	83 c4 04	 add	 esp, 4
  10ea9	50		 push	 eax
  10eaa	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR tv38932[ebp]
  10eb0	05 09 01 00 00	 add	 eax, 265		; 00000109H
  10eb5	03 c7		 add	 eax, edi
  10eb7	6a 69		 push	 105			; 00000069H
  10eb9	50		 push	 eax
  10eba	8b 85 04 ba ff
	ff		 mov	 eax, DWORD PTR tv38948[ebp]
  10ec0	05 70 01 00 00	 add	 eax, 368		; 00000170H
  10ec5	03 c6		 add	 eax, esi
  10ec7	50		 push	 eax
  10ec8	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18780: #ifdef _ITEM_PILENUMS
; 18781: 									if (tradeList[i * 5 + j + 22].pilenum > 1)

  10ecd	8b 85 ec b9 ff
	ff		 mov	 eax, DWORD PTR tv38925[ebp]
  10ed3	83 c4 14	 add	 esp, 20			; 00000014H
  10ed6	8b 08		 mov	 ecx, DWORD PTR [eax]
  10ed8	83 f9 01	 cmp	 ecx, 1
  10edb	7e 49		 jle	 SHORT $LN479@MenuProc

; 18782: 									{
; 18783: 										sprintf(moji, "%d", tradeList[i * 5 + j + 22].pilenum);

  10edd	51		 push	 ecx
  10ede	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10ee4	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  10ee9	50		 push	 eax
  10eea	e8 00 00 00 00	 call	 _sprintf

; 18784: 										StockFontBuffer(x + 370 + 51 * j + 10, y + 265 + 47 * i + 2, FONT_PRIO_FRONT, 0, moji, 0);

  10eef	6a 00		 push	 0
  10ef1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  10ef7	50		 push	 eax
  10ef8	8b 85 f0 b9 ff
	ff		 mov	 eax, DWORD PTR tv38932[ebp]
  10efe	05 0b 01 00 00	 add	 eax, 267		; 0000010bH
  10f03	6a 00		 push	 0
  10f05	03 c7		 add	 eax, edi
  10f07	6a 01		 push	 1
  10f09	50		 push	 eax
  10f0a	8b 85 fc b9 ff
	ff		 mov	 eax, DWORD PTR tv38950[ebp]
  10f10	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  10f15	03 c6		 add	 eax, esi
  10f17	50		 push	 eax
  10f18	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  10f1d	8b 85 ec b9 ff
	ff		 mov	 eax, DWORD PTR tv38925[ebp]
  10f23	83 c4 24	 add	 esp, 36			; 00000024H
$LN479@MenuProc:

; 18695: 						{
; 18696: 							for (j = 0; j < 5; j++)

  10f26	8b 95 0c ba ff
	ff		 mov	 edx, DWORD PTR tv38933[ebp]
  10f2c	05 18 03 00 00	 add	 eax, 792		; 00000318H
  10f31	8b 8d fc b9 ff
	ff		 mov	 ecx, DWORD PTR tv38950[ebp]
  10f37	42		 inc	 edx
  10f38	83 85 04 ba ff
	ff 2f		 add	 DWORD PTR tv38948[ebp], 47 ; 0000002fH
  10f3f	83 c1 33	 add	 ecx, 51			; 00000033H
  10f42	81 85 00 ba ff
	ff 80 07 00 00	 add	 DWORD PTR tv38927[ebp], 1920 ; 00000780H
  10f4c	81 bd 04 ba ff
	ff eb 00 00 00	 cmp	 DWORD PTR tv38948[ebp], 235 ; 000000ebH
  10f56	89 85 ec b9 ff
	ff		 mov	 DWORD PTR tv38925[ebp], eax
  10f5c	89 95 0c ba ff
	ff		 mov	 DWORD PTR tv38933[ebp], edx
  10f62	89 8d fc b9 ff
	ff		 mov	 DWORD PTR tv38950[ebp], ecx
  10f68	0f 8c 62 fb ff
	ff		 jl	 $LL481@MenuProc

; 18691: 							}
; 18692: 						}
; 18693: 						//æ¾ç¤ºéå·
; 18694: 						for (i = 0; i < 3; i++)

  10f6e	83 85 f0 b9 ff
	ff 2f		 add	 DWORD PTR tv38932[ebp], 47 ; 0000002fH
  10f75	3d 88 75 00 00	 cmp	 eax, OFFSET ?tradeList@@3PAUtradelist@@A+30088
  10f7a	0f 8c 20 fb ff
	ff		 jl	 $LL478@MenuProc

; 18785: 									}
; 18786: #endif
; 18787: 
; 18788: 								}
; 18789: 							}
; 18790: 						}
; 18791: 					}
; 18792: 					if (SecondTradeWnd != NULL) {

  10f80	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SecondTradeWnd@@3PAUaction@@A ; SecondTradeWnd
  10f85	85 c0		 test	 eax, eax
  10f87	0f 84 57 02 00
	00		 je	 $LN1913@MenuProc

; 18793: 						if (SecondTradeWnd->hp > 0) {

  10f8d	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  10f91	0f 8e 4d 02 00
	00		 jle	 $LN1913@MenuProc

; 18794: 							//äº§çäº¤æç¬¬äºè§çª
; 18795: 							if (pActPet3 != NULL) {

  10f97	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActPet3@@3PAUaction@@A
  10f9c	85 c0		 test	 eax, eax
  10f9e	74 13		 je	 SHORT $LN1900@MenuProc

; 18796: 								DeathAction(pActPet3);

  10fa0	50		 push	 eax
  10fa1	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  10fa6	83 c4 04	 add	 esp, 4

; 18797: 								pActPet3 = NULL;

  10fa9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet3@@3PAUaction@@A, 0
$LN1900@MenuProc:

; 18798: 							}
; 18799: 							StockDispBuffer(((WINDOW_DISP *)SecondTradeWnd->pYobi)->mx, ((WINDOW_DISP *)SecondTradeWnd->pYobi)->my - 25, DISP_PRIO_MENU, CG_TRADE_VIEWWND, 1);

  10fb3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SecondTradeWnd@@3PAUaction@@A ; SecondTradeWnd
  10fb8	6a 01		 push	 1
  10fba	ff 35 00 00 00
	00		 push	 DWORD PTR ?CG_TRADE_VIEWWND@@3HA ; CG_TRADE_VIEWWND
  10fc0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  10fc3	6a 68		 push	 104			; 00000068H
  10fc5	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  10fc8	83 e8 19	 sub	 eax, 25			; 00000019H
  10fcb	50		 push	 eax
  10fcc	ff 71 14	 push	 DWORD PTR [ecx+20]
  10fcf	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 18800: 							if (mouse.onceState & MOUSE_LEFT_CRICK) {

  10fd4	8b 0d 2c 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+44
  10fda	83 c4 14	 add	 esp, 20			; 00000014H
  10fdd	f6 c1 01	 test	 cl, 1
  10fe0	0f 84 45 01 00
	00		 je	 $LN1909@MenuProc

; 18801: 								if (HitDispNo == SecondtradeWndFontNo[0]) {

  10fe6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  10feb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?SecondtradeWndFontNo@@3PAHA
  10ff1	0f 85 6a 00 00
	00		 jne	 $LN1902@MenuProc

; 18802: 									//å³é­äº¤æè§çª
; 18803: 									MenuToggleFlag ^= JOY_CTRL_T;

  10ff7	81 35 00 00 00
	00 00 00 40 00	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H

; 18804: 									//è§çªå³é­é³æ
; 18805: 									play_se(203, 320, 240);

  11001	68 f0 00 00 00	 push	 240			; 000000f0H
  11006	68 40 01 00 00	 push	 320			; 00000140H
  1100b	68 cb 00 00 00	 push	 203			; 000000cbH
  11010	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 18806: 									sprintf(buffer, "W|%s|%s", opp_sockfd, opp_name);

  11015	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  1101a	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  1101f	8d 85 50 ed ff
	ff		 lea	 eax, DWORD PTR _buffer$43[ebp]
  11025	68 00 00 00 00	 push	 OFFSET ??_C@_07BMJINPJG@W?$HM?$CFs?$HM?$CFs@
  1102a	50		 push	 eax
  1102b	e8 00 00 00 00	 call	 _sprintf

; 18807: 									//éåºì·¨ìè®¯æ¯ç»Serveréç¥å¯¹æ¹
; 18808: 									lssproto_TD_send(sockfd, buffer);

  11030	8d 85 50 ed ff
	ff		 lea	 eax, DWORD PTR _buffer$43[ebp]
  11036	50		 push	 eax
  11037	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  1103d	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send
  11042	83 c4 24	 add	 esp, 36			; 00000024H

; 18809: 									tradeStatus = 0;

  11045	33 c0		 xor	 eax, eax
  11047	66 a3 00 00 00
	00		 mov	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus

; 18810: 									tradeInit();

  1104d	e8 00 00 00 00	 call	 ?tradeInit@@YAXXZ	; tradeInit

; 18811: 									pc.trade_confirm = 1;

  11052	c7 05 80 a1 00
	00 01 00 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, 1

; 18812: 								}

  1105c	e9 c4 00 00 00	 jmp	 $LN5156@MenuProc
$LN1902@MenuProc:

; 18813: 								else if (HitDispNo == SecondtradeWndFontNo[1])

  11061	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?SecondtradeWndFontNo@@3PAHA+4
  11067	0f 85 74 00 00
	00		 jne	 $LN1904@MenuProc

; 18814: 								{
; 18815: 									MainTradeWndflag = true;
; 18816: 									SecondTradeWndflag = false;

  1106d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  11074	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA, xmm0

; 18817: 									//andy_add 20030610
; 18818: 									for (i = 0; i < MENU_TRADE_0; i++) tradeWndFontNo[i] = -2;
; 18819: 									for (i = 0; i < 6; i++) SecondtradeWndFontNo[i] = -2;
; 18820: #ifdef _PET_ITEM
; 18821: 									InitItem3(325, 230);

  1107b	68 e6 00 00 00	 push	 230			; 000000e6H
  11080	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+16, xmm0
  11087	68 45 01 00 00	 push	 325			; 00000145H
  1108c	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+32, xmm0
  11093	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?MainTradeWndflag@@3_NA, 1 ; MainTradeWndflag
  1109a	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+48, xmm0
  110a1	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?SecondTradeWndflag@@3_NA, 0 ; SecondTradeWndflag
  110a8	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+64, xmm0
  110af	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?tradeWndFontNo@@3PAHA+80, xmm0
  110b7	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  110be	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?SecondtradeWndFontNo@@3PAHA, xmm0
  110c5	66 0f d6 05 10
	00 00 00	 movq	 QWORD PTR ?SecondtradeWndFontNo@@3PAHA+16, xmm0
  110cd	e8 00 00 00 00	 call	 ?InitItem3@@YAXHH@Z	; InitItem3
  110d2	83 c4 08	 add	 esp, 8

; 18822: 									bViewPetEquip = FALSE;

  110d5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA, 0

; 18823: #endif
; 18824: 								}

  110df	eb 44		 jmp	 SHORT $LN5156@MenuProc
$LN1904@MenuProc:

; 18825: #ifdef _TRADETALKWND				// (ä¸å¯å¼) Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 18826: 								else if (HitDispNo == SecondtradeWndFontNo[4])

  110e1	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?SecondtradeWndFontNo@@3PAHA+16
  110e7	75 04		 jne	 SHORT $LN1906@MenuProc

; 18827: 									talkwndflag = true;

  110e9	b2 01		 mov	 dl, 1
  110eb	eb 49		 jmp	 SHORT $LN3817@MenuProc
$LN1906@MenuProc:

; 18828: #endif
; 18829: #ifdef _PET_ITEM
; 18830: 								else if (HitDispNo == SecondtradeWndFontNo[5])

  110ed	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?SecondtradeWndFontNo@@3PAHA+20
  110f3	75 2b		 jne	 SHORT $LN1908@MenuProc

; 18831: 								{
; 18832: 									bViewPetEquip = !bViewPetEquip;
; 18833: 									InitItem(SecondTradeWnd->x, SecondTradeWnd->y + 20, bViewPetEquip);

  110f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SecondTradeWnd@@3PAUaction@@A ; SecondTradeWnd
  110fb	33 c0		 xor	 eax, eax
  110fd	39 05 00 00 00
	00		 cmp	 DWORD PTR ?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA, eax
  11103	0f 94 c0	 sete	 al
  11106	50		 push	 eax
  11107	a3 00 00 00 00	 mov	 DWORD PTR ?bViewPetEquip@?LFM@??MenuProc@@YAXXZ@4HA, eax
  1110c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  1110f	83 c0 14	 add	 eax, 20			; 00000014H
  11112	50		 push	 eax
  11113	ff 71 18	 push	 DWORD PTR [ecx+24]
  11116	e8 00 00 00 00	 call	 ?InitItem@@YAXHHH@Z	; InitItem
  1111b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18834: 								}

  1111e	eb 05		 jmp	 SHORT $LN5156@MenuProc
$LN1908@MenuProc:

; 18835: #endif
; 18836: 								else
; 18837: 									LockAndOkfunction();

  11120	e8 00 00 00 00	 call	 ?LockAndOkfunction@@YAXXZ ; LockAndOkfunction
$LN5156@MenuProc:

; 18838: 							}
; 18839: #ifdef _TRADETALKWND				// (ä¸å¯å¼) Syu ADD äº¤ææ°å¢å¯¹è¯æ¡æ¶
; 18840: 							if (talkwndflag == true)

  11125	8b 0d 2c 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+44
$LN1909@MenuProc:
  1112b	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?talkwndflag@@3_NA ; talkwndflag
  11131	80 fa 01	 cmp	 dl, 1
  11134	75 14		 jne	 SHORT $LN1910@MenuProc
$LN3817@MenuProc:

; 18841: 							{
; 18842: 								talkwndx = mouse.nowPoint.x;

  11136	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A
  1113b	a3 00 00 00 00	 mov	 DWORD PTR ?talkwndx@@3HA, eax ; talkwndx

; 18843: 								talkwndy = mouse.nowPoint.y;

  11140	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  11145	a3 00 00 00 00	 mov	 DWORD PTR ?talkwndy@@3HA, eax ; talkwndy
$LN1910@MenuProc:

; 18844: 							}
; 18845: 							if (mouse.onceState & MOUSE_LEFT_CRICK_UP)

  1114a	f6 c1 04	 test	 cl, 4
  1114d	0f b6 c2	 movzx	 eax, dl
  11150	ba 00 00 00 00	 mov	 edx, 0
  11155	0f 45 c2	 cmovne	 eax, edx
  11158	a2 00 00 00 00	 mov	 BYTE PTR ?talkwndflag@@3_NA, al ; talkwndflag

; 18846: 								talkwndflag = false;
; 18847: 							if (mouse.onceState & MOUSE_RIGHT_CRICK)

  1115d	f6 c1 02	 test	 cl, 2
  11160	0f 84 7e 00 00
	00		 je	 $LN1913@MenuProc

; 18848: 								tradetalkwndflag = false;

  11166	88 15 00 00 00
	00		 mov	 BYTE PTR ?tradetalkwndflag@@3_NA, dl ; tradetalkwndflag

; 18849: #endif
; 18850: 						}
; 18851: 					}
; 18852: 				}
; 18853: 
; 18854: #endif
; 18855: 			}
; 18856: 			break;
; 18857: 		}
; 18858: 	}

  1116c	e9 73 00 00 00	 jmp	 $LN1913@MenuProc
$LN1668@MenuProc:

; 18859: 	else if (tradeStatus != 0)

  11171	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?tradeStatus@@3FA, 0 ; tradeStatus
  11179	0f 84 65 00 00
	00		 je	 $LN1913@MenuProc

; 18860: 	{
; 18861: 		char buffer[1024] = "";

  1117f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  11184	68 ff 03 00 00	 push	 1023			; 000003ffH
  11189	88 85 50 e4 ff
	ff		 mov	 BYTE PTR _buffer$37[ebp], al
  1118f	8d 85 51 e4 ff
	ff		 lea	 eax, DWORD PTR _buffer$37[ebp+1]
  11195	6a 00		 push	 0
  11197	50		 push	 eax
  11198	e8 00 00 00 00	 call	 _memset

; 18862: 		tradeStatus = 0;
; 18863: 		sprintf(buffer, "W|%s|%s", opp_sockfd, opp_name);

  1119d	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  111a2	33 c0		 xor	 eax, eax
  111a4	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  111a9	66 a3 00 00 00
	00		 mov	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus
  111af	8d 85 50 e4 ff
	ff		 lea	 eax, DWORD PTR _buffer$37[ebp]
  111b5	68 00 00 00 00	 push	 OFFSET ??_C@_07BMJINPJG@W?$HM?$CFs?$HM?$CFs@
  111ba	50		 push	 eax
  111bb	e8 00 00 00 00	 call	 _sprintf

; 18864: 		lssproto_TD_send(sockfd, buffer);

  111c0	8d 85 50 e4 ff
	ff		 lea	 eax, DWORD PTR _buffer$37[ebp]
  111c6	50		 push	 eax
  111c7	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  111cd	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send
  111d2	83 c4 24	 add	 esp, 36			; 00000024H

; 18865: 		tradeInit();

  111d5	e8 00 00 00 00	 call	 ?tradeInit@@YAXXZ	; tradeInit

; 18866: 		pc.trade_confirm = 1;

  111da	c7 05 80 a1 00
	00 01 00 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, 1
$LN1913@MenuProc:

; 18867: 	}
; 18868: 
; 18869: 	// äº¤æè§çªé¨åå°æ­¤ç»æ
; 18870: 
; 18871: 
; 18872: 	// show Bank Window
; 18873: 	if (MenuToggleFlag & JOY_B) {

  111e4	f7 05 00 00 00
	00 00 01 00 00	 test	 DWORD PTR ?MenuToggleFlag@@3IA, 256 ; MenuToggleFlag, 00000100H
  111ee	0f 84 ae 00 00
	00		 je	 $LN1959@MenuProc

; 18874: 
; 18875: 		char buffer[1024];
; 18876: 		int x, y, w, h;
; 18877: 
; 18878: 		if (checkPcWalkFlag() == 1) closeBankman();

  111f4	e8 00 00 00 00	 call	 ?checkPcWalkFlag@@YAHXZ	; checkPcWalkFlag
  111f9	83 f8 01	 cmp	 eax, 1
  111fc	75 05		 jne	 SHORT $LN1915@MenuProc
  111fe	e8 00 00 00 00	 call	 ?closeBankman@@YAXXZ	; closeBankman
$LN1915@MenuProc:

; 18879: 
; 18880: 
; 18881: 		if (joy_trg[0] & JOY_ESC
; 18882: 			|| actBtn == 1
; 18883: 			|| menuBtn == 1
; 18884: 			|| disconnectServerFlag == TRUE

  11203	f7 05 00 00 00
	00 00 00 00 80	 test	 DWORD PTR ?joy_trg@@3PAKA, -2147483648 ; 80000000H
  1120d	0f 85 81 01 00
	00		 jne	 $LN1917@MenuProc
  11213	66 83 3d 00 00
	00 00 01	 cmp	 WORD PTR ?actBtn@@3FA, 1 ; actBtn
  1121b	0f 84 73 01 00
	00		 je	 $LN1917@MenuProc
  11221	66 83 3d 00 00
	00 00 01	 cmp	 WORD PTR ?menuBtn@@3FA, 1 ; menuBtn
  11229	0f 84 65 01 00
	00		 je	 $LN1917@MenuProc
  1122f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?disconnectServerFlag@@3HA, 1 ; disconnectServerFlag
  11236	0f 84 58 01 00
	00		 je	 $LN1917@MenuProc

; 18889: 		}
; 18890: 
; 18891: 		// ?????????
; 18892: 		if (pActMenuWnd5 == NULL) {

  1123c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A, 0 ; pActMenuWnd5
  11243	0f 85 d8 00 00
	00		 jne	 $LN1918@MenuProc

; 18893: 			w = 270; h = 160;
; 18894: 			x = (lpDraw->xSize - w) / 2;

  11249	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw

; 18895: 			y = (lpDraw->ySize - h) / 2;
; 18896: 
; 18897: 			pActMenuWnd5 = MakeWindowDisp(x, y, w, h, NULL, -1);

  1124f	6a ff		 push	 -1
  11251	6a 00		 push	 0
  11253	68 a0 00 00 00	 push	 160			; 000000a0H
  11258	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  1125e	2d 0e 01 00 00	 sub	 eax, 270		; 0000010eH
  11263	99		 cdq
  11264	2b c2		 sub	 eax, edx
  11266	8b f0		 mov	 esi, eax
  11268	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  1126e	2d a0 00 00 00	 sub	 eax, 160		; 000000a0H
  11273	d1 fe		 sar	 esi, 1
  11275	99		 cdq
  11276	2b c2		 sub	 eax, edx
  11278	d1 f8		 sar	 eax, 1
  1127a	68 0e 01 00 00	 push	 270			; 0000010eH
  1127f	50		 push	 eax
  11280	56		 push	 esi
  11281	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp

; 18898: 			play_se(202, 320, 240);	// ????????									

  11286	68 f0 00 00 00	 push	 240			; 000000f0H
  1128b	68 40 01 00 00	 push	 320			; 00000140H
  11290	68 ca 00 00 00	 push	 202			; 000000caH
  11295	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A, eax ; pActMenuWnd5
  1129a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  1129f	83 c4 24	 add	 esp, 36			; 00000024H
$LN1959@MenuProc:

; 19087: 				}
; 19088: 			}
; 19089: 		}
; 19090: 	}
; 19091: 
; 19092: #ifdef _STANDBYPET
; 19093: 	if (StandbyPetSendFlag == FALSE) {

  112a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?StandbyPetSendFlag@@3HA, 0 ; StandbyPetSendFlag
  112a9	0f 85 57 00 00
	00		 jne	 $LN1966@MenuProc

; 19094: 		int s_pet = 0;

  112af	33 c9		 xor	 ecx, ecx

; 19095: 		int i;
; 19096: 
; 19097: 		for (i = 0; i < MAX_PET; i++) {
; 19098: 			if (pc.selectPetNo[i])

  112b1	66 39 0d ac 00
	00 00		 cmp	 WORD PTR ?pc@@3UPC@@A+172, cx
  112b8	74 04		 je	 SHORT $LN493@MenuProc

; 19099: 				s_pet |= (1 << i);

  112ba	0f ba e9 00	 bts	 ecx, 0
$LN493@MenuProc:

; 19095: 		int i;
; 19096: 
; 19097: 		for (i = 0; i < MAX_PET; i++) {
; 19098: 			if (pc.selectPetNo[i])

  112be	66 83 3d ae 00
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A+174, 0
  112c6	74 04		 je	 SHORT $LN3157@MenuProc

; 19099: 				s_pet |= (1 << i);

  112c8	0f ba e9 01	 bts	 ecx, 1
$LN3157@MenuProc:

; 19095: 		int i;
; 19096: 
; 19097: 		for (i = 0; i < MAX_PET; i++) {
; 19098: 			if (pc.selectPetNo[i])

  112cc	66 83 3d b0 00
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A+176, 0
  112d4	74 04		 je	 SHORT $LN3159@MenuProc

; 19099: 				s_pet |= (1 << i);

  112d6	0f ba e9 02	 bts	 ecx, 2
$LN3159@MenuProc:

; 19095: 		int i;
; 19096: 
; 19097: 		for (i = 0; i < MAX_PET; i++) {
; 19098: 			if (pc.selectPetNo[i])

  112da	66 83 3d b2 00
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A+178, 0
  112e2	74 04		 je	 SHORT $LN3161@MenuProc

; 19099: 				s_pet |= (1 << i);

  112e4	0f ba e9 03	 bts	 ecx, 3
$LN3161@MenuProc:

; 19095: 		int i;
; 19096: 
; 19097: 		for (i = 0; i < MAX_PET; i++) {
; 19098: 			if (pc.selectPetNo[i])

  112e8	66 83 3d b4 00
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A+180, 0
  112f0	74 04		 je	 SHORT $LN3163@MenuProc

; 19099: 				s_pet |= (1 << i);

  112f2	0f ba e9 04	 bts	 ecx, 4
$LN3163@MenuProc:

; 19100: 		}
; 19101: 		if (s_pet != pc.standbyPet)

  112f6	0f bf 05 b8 00
	00 00		 movsx	 eax, WORD PTR ?pc@@3UPC@@A+184
  112fd	3b c8		 cmp	 ecx, eax
  112ff	74 05		 je	 SHORT $LN1966@MenuProc

; 19102: 			send_StandBy_Pet();

  11301	e8 00 00 00 00	 call	 ?send_StandBy_Pet@@YAXXZ ; send_StandBy_Pet
$LN1966@MenuProc:

; 19103: 	}
; 19104: #endif
; 19105: 
; 19106: 
; 19107: }

  11306	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  11309	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  11310	59		 pop	 ecx
  11311	5f		 pop	 edi
  11312	5e		 pop	 esi
  11313	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  11316	33 cd		 xor	 ecx, ebp
  11318	e8 00 00 00 00	 call	 @__security_check_cookie@4
  1131d	8b e5		 mov	 esp, ebp
  1131f	5d		 pop	 ebp
  11320	c3		 ret	 0
$LN1918@MenuProc:

; 18899: 
; 18900: 		}
; 18901: 		else {
; 18902: 			// ??????î????????
; 18903: 			if (pActMenuWnd5->hp > 0) {

  11321	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pActMenuWnd5@@3PAUaction@@A ; pActMenuWnd5
  11326	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  1132a	0f 8e 72 ff ff
	ff		 jle	 $LN1959@MenuProc

; 18904: 
; 18905: 				if (mouse.onceState & MOUSE_LEFT_CRICK) {

  11330	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  11337	0f 84 73 00 00
	00		 je	 $LN1923@MenuProc

; 18906: 
; 18907: 					// î¼???
; 18908: 					if (HitDispNo == bankWndFontNo[0]) {

  1133d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  11342	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?bankWndFontNo@@3PAHA
  11348	74 4a		 je	 SHORT $LN1917@MenuProc

; 18909: 						closeBankman();
; 18910: 						return;
; 18911: 					}
; 18912: 
; 18913: 					if (HitDispNo == bankWndFontNo[1]) {

  1134a	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?bankWndFontNo@@3PAHA+4
  11350	0f 85 5a 00 00
	00		 jne	 $LN1923@MenuProc

; 18914: 						sprintf(buffer, "B|G|%d", pc.gold - cashGold);

  11356	a1 60 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+96
  1135b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?cashGold@@3HA
  11361	50		 push	 eax
  11362	8d 85 50 e0 ff
	ff		 lea	 eax, DWORD PTR _buffer$36[ebp]
  11368	68 00 00 00 00	 push	 OFFSET ??_C@_06DJMKDILO@B?$HMG?$HM?$CFd@
  1136d	50		 push	 eax
  1136e	e8 00 00 00 00	 call	 _sprintf
  11373	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18915: 						if (bNewServer)

  11376	8d 85 50 e0 ff
	ff		 lea	 eax, DWORD PTR _buffer$36[ebp]
  1137c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  11383	50		 push	 eax
  11384	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  1138a	74 12		 je	 SHORT $LN1924@MenuProc

; 18916: 							lssproto_FM_send(sockfd, buffer);

  1138c	e8 00 00 00 00	 call	 ?lssproto_FM_send@@YAXHPAD@Z ; lssproto_FM_send
  11391	83 c4 08	 add	 esp, 8
$LN1917@MenuProc:

; 18885: 			)
; 18886: 		{
; 18887: 			closeBankman();
; 18888: 			return;

  11394	e8 00 00 00 00	 call	 ?closeBankman@@YAXXZ	; closeBankman
  11399	e9 68 ff ff ff	 jmp	 $LN1966@MenuProc
$LN1924@MenuProc:

; 18917: 						else
; 18918: 							old_lssproto_FM_send(sockfd, buffer);

  1139e	e8 00 00 00 00	 call	 ?old_lssproto_FM_send@@YAXHPAD@Z ; old_lssproto_FM_send
  113a3	83 c4 08	 add	 esp, 8
  113a6	e8 00 00 00 00	 call	 ?closeBankman@@YAXXZ	; closeBankman
  113ab	e9 56 ff ff ff	 jmp	 $LN1966@MenuProc
$LN1923@MenuProc:

; 18919: 						closeBankman();
; 18920: 						return;
; 18921: 					}
; 18922: 
; 18923: 				}
; 18924: 
; 18925: 				// Add Gold
; 18926: 				if (HitDispNo == bankWndFontNo[2]) {

  113b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  113b5	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?bankWndFontNo@@3PAHA+8
  113bb	0f 85 75 01 00
	00		 jne	 $LN1926@MenuProc

; 18927: 
; 18928: 					if (mouse.onceState & MOUSE_LEFT_CRICK_UP && bankWndBtnFlag[2] == TRUE) {

  113c1	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  113c8	74 12		 je	 SHORT $LN1928@MenuProc
  113ca	a1 08 00 00 00	 mov	 eax, DWORD PTR ?bankWndBtnFlag@@3PAHA+8
  113cf	33 c9		 xor	 ecx, ecx
  113d1	83 f8 01	 cmp	 eax, 1
  113d4	0f 44 c1	 cmove	 eax, ecx
  113d7	a3 08 00 00 00	 mov	 DWORD PTR ?bankWndBtnFlag@@3PAHA+8, eax
$LN1928@MenuProc:

; 18929: 
; 18930: 						bankWndBtnFlag[2] = FALSE;
; 18931: 					}
; 18932: 
; 18933: 					if ((cashGold < CHAR_getMaxHaveGold()) && (totalGold - cashGold > 0)) {

  113dc	e8 00 00 00 00	 call	 ?CHAR_getMaxHaveGold@@YAHXZ ; CHAR_getMaxHaveGold
  113e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cashGold@@3HA
  113e7	3b c8		 cmp	 ecx, eax
  113e9	0f 8d 57 01 00
	00		 jge	 $LN1927@MenuProc
  113ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?totalGold@@3HA
  113f4	2b c1		 sub	 eax, ecx
  113f6	85 c0		 test	 eax, eax
  113f8	0f 8e 48 01 00
	00		 jle	 $LN1927@MenuProc

; 18934: 
; 18935: 						if (bankWndBtnFlag[2] == TRUE) {

  113fe	83 3d 08 00 00
	00 01		 cmp	 DWORD PTR ?bankWndBtnFlag@@3PAHA+8, 1
  11405	0f 85 b0 00 00
	00		 jne	 $LN1936@MenuProc

; 18936: 							cashGold += bankGoldInc;
; 18937: 							bankGoldCnt++;

  1140b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bankGoldCnt@@3HA
  11410	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bankGoldInc@@3HA
  11416	40		 inc	 eax
  11417	03 ca		 add	 ecx, edx
  11419	a3 00 00 00 00	 mov	 DWORD PTR ?bankGoldCnt@@3HA, eax
  1141e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?cashGold@@3HA, ecx
  11424	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 18938: 							if (bankGoldCnt >= 30) {

  11427	7c 2f		 jl	 SHORT $LN1934@MenuProc

; 18939: 								bankGoldCnt = 0;

  11429	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankGoldCnt@@3HA, 0

; 18940: 								if (bankGoldInc == 0) {

  11433	85 d2		 test	 edx, edx
  11435	75 0c		 jne	 SHORT $LN1932@MenuProc

; 18941: 									bankGoldInc = 1;

  11437	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bankGoldInc@@3HA, 1

; 18942: 								}

  11441	eb 15		 jmp	 SHORT $LN1934@MenuProc
$LN1932@MenuProc:

; 18943: 								else {
; 18944: 									bankGoldInc *= 5;

  11443	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]

; 18945: 									if (bankGoldInc > 10000) {

  11446	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  1144b	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  11450	0f 4f c1	 cmovg	 eax, ecx
  11453	a3 00 00 00 00	 mov	 DWORD PTR ?bankGoldInc@@3HA, eax
$LN1934@MenuProc:

; 18946: 										bankGoldInc = 10000;
; 18947: 									}
; 18948: 								}
; 18949: 							}
; 18950: 							if (cashGold >= CHAR_getMaxHaveGold()) {

  11458	e8 00 00 00 00	 call	 ?CHAR_getMaxHaveGold@@YAHXZ ; CHAR_getMaxHaveGold
  1145d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cashGold@@3HA
  11463	3b c8		 cmp	 ecx, eax
  11465	7c 27		 jl	 SHORT $LN1935@MenuProc

; 18951: 								cashGold = CHAR_getMaxHaveGold();

  11467	e8 00 00 00 00	 call	 ?CHAR_getMaxHaveGold@@YAHXZ ; CHAR_getMaxHaveGold

; 18952: 								play_se(220, 320, 240);

  1146c	68 f0 00 00 00	 push	 240			; 000000f0H
  11471	68 40 01 00 00	 push	 320			; 00000140H
  11476	68 dc 00 00 00	 push	 220			; 000000dcH
  1147b	a3 00 00 00 00	 mov	 DWORD PTR ?cashGold@@3HA, eax
  11480	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  11485	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cashGold@@3HA
  1148b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1935@MenuProc:

; 18953: 							}
; 18954: 							if (cashGold >= totalGold) {

  1148e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?totalGold@@3HA
  11494	3b ca		 cmp	 ecx, edx
  11496	7c 23		 jl	 SHORT $LN1936@MenuProc

; 18955: 								cashGold = totalGold;
; 18956: 								play_se(220, 320, 240);

  11498	68 f0 00 00 00	 push	 240			; 000000f0H
  1149d	68 40 01 00 00	 push	 320			; 00000140H
  114a2	68 dc 00 00 00	 push	 220			; 000000dcH
  114a7	89 15 00 00 00
	00		 mov	 DWORD PTR ?cashGold@@3HA, edx
  114ad	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  114b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cashGold@@3HA
  114b8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1936@MenuProc:

; 18957: 							}
; 18958: 
; 18959: 						}
; 18960: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  114bb	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  114c2	0f 84 7e 00 00
	00		 je	 $LN1927@MenuProc

; 18961: 							cashGold++;

  114c8	41		 inc	 ecx
  114c9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?cashGold@@3HA, ecx

; 18962: 							if (cashGold >= CHAR_getMaxHaveGold()) {

  114cf	e8 00 00 00 00	 call	 ?CHAR_getMaxHaveGold@@YAHXZ ; CHAR_getMaxHaveGold
  114d4	39 05 00 00 00
	00		 cmp	 DWORD PTR ?cashGold@@3HA, eax
  114da	7c 23		 jl	 SHORT $LN1938@MenuProc

; 18963: 								cashGold = CHAR_getMaxHaveGold();

  114dc	e8 00 00 00 00	 call	 ?CHAR_getMaxHaveGold@@YAHXZ ; CHAR_getMaxHaveGold

; 18964: 								play_se(220, 320, 240);

  114e1	68 f0 00 00 00	 push	 240			; 000000f0H
  114e6	68 40 01 00 00	 push	 320			; 00000140H
  114eb	68 dc 00 00 00	 push	 220			; 000000dcH
  114f0	a3 00 00 00 00	 mov	 DWORD PTR ?cashGold@@3HA, eax
  114f5	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  114fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18965: 							}

  114fd	eb 41		 jmp	 SHORT $LN5157@MenuProc
$LN1938@MenuProc:

; 18966: 							else {
; 18967: 								bankGoldInc = 0;
; 18968: 								bankGoldCnt = 0;
; 18969: 								bankWndBtnFlag[2] = TRUE;
; 18970: 								play_se(217, 320, 240);

  114ff	68 f0 00 00 00	 push	 240			; 000000f0H
  11504	68 40 01 00 00	 push	 320			; 00000140H
  11509	68 d9 00 00 00	 push	 217			; 000000d9H
  1150e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankGoldInc@@3HA, 0
  11518	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankGoldCnt@@3HA, 0
  11522	c7 05 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bankWndBtnFlag@@3PAHA+8, 1
  1152c	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  11531	83 c4 0c	 add	 esp, 12			; 0000000cH

; 18971: 							}
; 18972: 
; 18973: 						}
; 18974: 					}
; 18975: 				}

  11534	eb 0a		 jmp	 SHORT $LN5157@MenuProc
$LN1926@MenuProc:

; 18976: 				else {
; 18977: 					bankWndBtnFlag[2] = FALSE;

  11536	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankWndBtnFlag@@3PAHA+8, 0
$LN5157@MenuProc:

; 18978: 				}
; 18979: 				if (HitDispNo == bankWndFontNo[3]) {

  11540	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cashGold@@3HA
$LN1927@MenuProc:
  11546	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HitDispNo@@3HA ; HitDispNo
  1154b	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?bankWndFontNo@@3PAHA+12
  11551	0f 85 a0 01 00
	00		 jne	 $LN1940@MenuProc

; 18980: 					if (mouse.onceState & MOUSE_LEFT_CRICK_UP && bankWndBtnFlag[3] == TRUE) {

  11557	f6 05 2c 00 00
	00 04		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 4
  1155e	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?bankWndBtnFlag@@3PAHA+12
  11564	74 0e		 je	 SHORT $LN1942@MenuProc
  11566	33 c0		 xor	 eax, eax
  11568	83 fa 01	 cmp	 edx, 1
  1156b	0f 44 d0	 cmove	 edx, eax
  1156e	89 15 0c 00 00
	00		 mov	 DWORD PTR ?bankWndBtnFlag@@3PAHA+12, edx
$LN1942@MenuProc:

; 18981: 						bankWndBtnFlag[3] = FALSE;
; 18982: 						//play_se( 212, 320, 240 );
; 18983: 					}
; 18984: 					if ((cashGold > 0) && (totalGold - cashGold < MAX_BANKGOLD)) {

  11574	85 c9		 test	 ecx, ecx
  11576	0f 8e 65 01 00
	00		 jle	 $LN1943@MenuProc
  1157c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?totalGold@@3HA
  11581	2b c1		 sub	 eax, ecx
  11583	3d 00 ca 9a 3b	 cmp	 eax, 1000000000		; 3b9aca00H
  11588	0f 8d 53 01 00
	00		 jge	 $LN1943@MenuProc

; 18985: 						if (bankWndBtnFlag[3] == TRUE) {

  1158e	83 fa 01	 cmp	 edx, 1
  11591	0f 85 b1 00 00
	00		 jne	 $LN1951@MenuProc

; 18986: 							cashGold -= bankGoldInc;
; 18987: 							bankGoldCnt++;

  11597	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bankGoldCnt@@3HA
  1159c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bankGoldInc@@3HA
  115a2	40		 inc	 eax
  115a3	2b ca		 sub	 ecx, edx
  115a5	a3 00 00 00 00	 mov	 DWORD PTR ?bankGoldCnt@@3HA, eax
  115aa	89 0d 00 00 00
	00		 mov	 DWORD PTR ?cashGold@@3HA, ecx
  115b0	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 18988: 							if (bankGoldCnt >= 30) {

  115b3	7c 2f		 jl	 SHORT $LN1949@MenuProc

; 18989: 								bankGoldCnt = 0;

  115b5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankGoldCnt@@3HA, 0

; 18990: 								if (bankGoldInc == 0) {

  115bf	85 d2		 test	 edx, edx
  115c1	75 0c		 jne	 SHORT $LN1947@MenuProc

; 18991: 									bankGoldInc = 1;

  115c3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bankGoldInc@@3HA, 1

; 18992: 								}

  115cd	eb 15		 jmp	 SHORT $LN1949@MenuProc
$LN1947@MenuProc:

; 18993: 								else {
; 18994: 									bankGoldInc *= 5;

  115cf	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]

; 18995: 									if (bankGoldInc > 10000) {

  115d2	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  115d7	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  115dc	0f 4f c2	 cmovg	 eax, edx
  115df	a3 00 00 00 00	 mov	 DWORD PTR ?bankGoldInc@@3HA, eax
$LN1949@MenuProc:

; 18996: 										bankGoldInc = 10000;
; 18997: 									}
; 18998: 								}
; 18999: 							}
; 19000: 							if (cashGold <= 0) {

  115e4	85 c9		 test	 ecx, ecx
  115e6	7f 27		 jg	 SHORT $LN1950@MenuProc

; 19001: 								cashGold = 0;
; 19002: 								play_se(220, 320, 240);

  115e8	68 f0 00 00 00	 push	 240			; 000000f0H
  115ed	68 40 01 00 00	 push	 320			; 00000140H
  115f2	68 dc 00 00 00	 push	 220			; 000000dcH
  115f7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?cashGold@@3HA, 0
  11601	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  11606	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cashGold@@3HA
  1160c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1950@MenuProc:

; 19003: 							}
; 19004: 							if (totalGold - cashGold >= MAX_BANKGOLD) {

  1160f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?totalGold@@3HA
  11615	8b c2		 mov	 eax, edx
  11617	2b c1		 sub	 eax, ecx
  11619	3d 00 ca 9a 3b	 cmp	 eax, 1000000000		; 3b9aca00H
  1161e	7c 28		 jl	 SHORT $LN1951@MenuProc

; 19005: 								cashGold = totalGold - MAX_BANKGOLD;
; 19006: 								play_se(220, 320, 240);

  11620	68 f0 00 00 00	 push	 240			; 000000f0H
  11625	8d 82 00 36 65
	c4		 lea	 eax, DWORD PTR [edx-1000000000]
  1162b	68 40 01 00 00	 push	 320			; 00000140H
  11630	68 dc 00 00 00	 push	 220			; 000000dcH
  11635	a3 00 00 00 00	 mov	 DWORD PTR ?cashGold@@3HA, eax
  1163a	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  1163f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?cashGold@@3HA
  11645	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1951@MenuProc:

; 19007: 							}
; 19008: 
; 19009: 						}
; 19010: 						if (mouse.onceState & MOUSE_LEFT_CRICK) {

  11648	f6 05 2c 00 00
	00 01		 test	 BYTE PTR ?mouse@@3UMOUSE@@A+44, 1
  1164f	0f 84 ac 00 00
	00		 je	 $LN1941@MenuProc

; 19011: 							cashGold--;

  11655	49		 dec	 ecx
  11656	89 0d 00 00 00
	00		 mov	 DWORD PTR ?cashGold@@3HA, ecx

; 19012: 							if (cashGold <= 0) {

  1165c	68 f0 00 00 00	 push	 240			; 000000f0H
  11661	68 40 01 00 00	 push	 320			; 00000140H
  11666	85 c9		 test	 ecx, ecx
  11668	7f 1c		 jg	 SHORT $LN1953@MenuProc

; 19013: 								cashGold = 0;
; 19014: 								play_se(220, 320, 240);

  1166a	68 dc 00 00 00	 push	 220			; 000000dcH
  1166f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?cashGold@@3HA, 0
  11679	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  1167e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19015: 							}

  11681	e9 7b 00 00 00	 jmp	 $LN1941@MenuProc
$LN1953@MenuProc:

; 19016: 							else if (totalGold - cashGold >= MAX_BANKGOLD) {

  11686	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?totalGold@@3HA
  1168c	8b c2		 mov	 eax, edx
  1168e	2b c1		 sub	 eax, ecx
  11690	3d 00 ca 9a 3b	 cmp	 eax, 1000000000		; 3b9aca00H
  11695	7c 1d		 jl	 SHORT $LN1955@MenuProc

; 19017: 								cashGold = totalGold - MAX_BANKGOLD;

  11697	8d 82 00 36 65
	c4		 lea	 eax, DWORD PTR [edx-1000000000]

; 19018: 								play_se(220, 320, 240);

  1169d	68 dc 00 00 00	 push	 220			; 000000dcH
  116a2	a3 00 00 00 00	 mov	 DWORD PTR ?cashGold@@3HA, eax
  116a7	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  116ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19019: 							}

  116af	e9 4d 00 00 00	 jmp	 $LN1941@MenuProc
$LN1955@MenuProc:

; 19020: 							else {
; 19021: 								bankGoldInc = 0;
; 19022: 								bankGoldCnt = 0;
; 19023: 								bankWndBtnFlag[3] = TRUE;
; 19024: 								play_se(217, 320, 240);

  116b4	68 d9 00 00 00	 push	 217			; 000000d9H
  116b9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankGoldInc@@3HA, 0
  116c3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankGoldCnt@@3HA, 0
  116cd	c7 05 0c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bankWndBtnFlag@@3PAHA+12, 1
  116d7	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se
  116dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19025: 
; 19026: 							}
; 19027: 
; 19028: 						}
; 19029: 					}

  116df	eb 20		 jmp	 SHORT $LN1941@MenuProc
$LN1943@MenuProc:

; 19030: 					else {
; 19031: 						bankGoldInc = 0;

  116e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankGoldInc@@3HA, 0

; 19032: 						bankGoldCnt = 0;

  116eb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankGoldCnt@@3HA, 0

; 19033: 					}
; 19034: 				}

  116f5	eb 0a		 jmp	 SHORT $LN1941@MenuProc
$LN1940@MenuProc:

; 19035: 				else {
; 19036: 					bankWndBtnFlag[3] = FALSE;

  116f7	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bankWndBtnFlag@@3PAHA+12, 0
$LN1941@MenuProc:

; 19037: 				}
; 19038: 				for (int i = 2; i <= 8; i++) {
; 19039: 					if (mouse.state & MOUSE_LEFT_CRICK && tradeWndBtnFlag[i] == TRUE) {

  11701	a1 28 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+40
  11706	83 e0 01	 and	 eax, 1
  11709	74 15		 je	 SHORT $LN1957@MenuProc
  1170b	83 3d 08 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+8, 1
  11712	75 0c		 jne	 SHORT $LN1957@MenuProc

; 19040: 						tradeWndBtnFlag[i] = TRUE;

  11714	c7 05 08 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+8, 1

; 19041: 					}

  1171e	eb 0e		 jmp	 SHORT $LN4082@MenuProc
$LN1957@MenuProc:

; 19042: 					else {
; 19043: 						tradeWndBtnFlag[i] = FALSE;

  11720	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+8, 0
  1172a	85 c0		 test	 eax, eax
  1172c	74 15		 je	 SHORT $LN3136@MenuProc
$LN4082@MenuProc:

; 19037: 				}
; 19038: 				for (int i = 2; i <= 8; i++) {
; 19039: 					if (mouse.state & MOUSE_LEFT_CRICK && tradeWndBtnFlag[i] == TRUE) {

  1172e	83 3d 0c 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+12, 1
  11735	75 0c		 jne	 SHORT $LN3136@MenuProc

; 19040: 						tradeWndBtnFlag[i] = TRUE;

  11737	c7 05 0c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+12, 1

; 19041: 					}

  11741	eb 0e		 jmp	 SHORT $LN4081@MenuProc
$LN3136@MenuProc:

; 19042: 					else {
; 19043: 						tradeWndBtnFlag[i] = FALSE;

  11743	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+12, 0
  1174d	85 c0		 test	 eax, eax
  1174f	74 15		 je	 SHORT $LN3139@MenuProc
$LN4081@MenuProc:

; 19037: 				}
; 19038: 				for (int i = 2; i <= 8; i++) {
; 19039: 					if (mouse.state & MOUSE_LEFT_CRICK && tradeWndBtnFlag[i] == TRUE) {

  11751	83 3d 10 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+16, 1
  11758	75 0c		 jne	 SHORT $LN3139@MenuProc

; 19040: 						tradeWndBtnFlag[i] = TRUE;

  1175a	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+16, 1

; 19041: 					}

  11764	eb 0e		 jmp	 SHORT $LN4080@MenuProc
$LN3139@MenuProc:

; 19042: 					else {
; 19043: 						tradeWndBtnFlag[i] = FALSE;

  11766	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+16, 0
  11770	85 c0		 test	 eax, eax
  11772	74 15		 je	 SHORT $LN3142@MenuProc
$LN4080@MenuProc:

; 19037: 				}
; 19038: 				for (int i = 2; i <= 8; i++) {
; 19039: 					if (mouse.state & MOUSE_LEFT_CRICK && tradeWndBtnFlag[i] == TRUE) {

  11774	83 3d 14 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+20, 1
  1177b	75 0c		 jne	 SHORT $LN3142@MenuProc

; 19040: 						tradeWndBtnFlag[i] = TRUE;

  1177d	c7 05 14 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+20, 1

; 19041: 					}

  11787	eb 0e		 jmp	 SHORT $LN4079@MenuProc
$LN3142@MenuProc:

; 19042: 					else {
; 19043: 						tradeWndBtnFlag[i] = FALSE;

  11789	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+20, 0
  11793	85 c0		 test	 eax, eax
  11795	74 15		 je	 SHORT $LN3145@MenuProc
$LN4079@MenuProc:

; 19037: 				}
; 19038: 				for (int i = 2; i <= 8; i++) {
; 19039: 					if (mouse.state & MOUSE_LEFT_CRICK && tradeWndBtnFlag[i] == TRUE) {

  11797	83 3d 18 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+24, 1
  1179e	75 0c		 jne	 SHORT $LN3145@MenuProc

; 19040: 						tradeWndBtnFlag[i] = TRUE;

  117a0	c7 05 18 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+24, 1

; 19041: 					}

  117aa	eb 0e		 jmp	 SHORT $LN4078@MenuProc
$LN3145@MenuProc:

; 19042: 					else {
; 19043: 						tradeWndBtnFlag[i] = FALSE;

  117ac	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+24, 0
  117b6	85 c0		 test	 eax, eax
  117b8	74 15		 je	 SHORT $LN3148@MenuProc
$LN4078@MenuProc:

; 19037: 				}
; 19038: 				for (int i = 2; i <= 8; i++) {
; 19039: 					if (mouse.state & MOUSE_LEFT_CRICK && tradeWndBtnFlag[i] == TRUE) {

  117ba	83 3d 1c 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+28, 1
  117c1	75 0c		 jne	 SHORT $LN3148@MenuProc

; 19040: 						tradeWndBtnFlag[i] = TRUE;

  117c3	c7 05 1c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+28, 1

; 19041: 					}

  117cd	eb 0e		 jmp	 SHORT $LN4077@MenuProc
$LN3148@MenuProc:

; 19042: 					else {
; 19043: 						tradeWndBtnFlag[i] = FALSE;

  117cf	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+28, 0
  117d9	85 c0		 test	 eax, eax
  117db	74 13		 je	 SHORT $LN3151@MenuProc
$LN4077@MenuProc:

; 19037: 				}
; 19038: 				for (int i = 2; i <= 8; i++) {
; 19039: 					if (mouse.state & MOUSE_LEFT_CRICK && tradeWndBtnFlag[i] == TRUE) {

  117dd	83 3d 20 00 00
	00 01		 cmp	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+32, 1

; 19040: 						tradeWndBtnFlag[i] = TRUE;

  117e4	c7 05 20 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+32, 1
  117ee	74 0a		 je	 SHORT $LN3152@MenuProc
$LN3151@MenuProc:

; 19042: 					else {
; 19043: 						tradeWndBtnFlag[i] = FALSE;

  117f0	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndBtnFlag@@3PAHA+32, 0
$LN3152@MenuProc:

; 19044: 					}
; 19045: 				}
; 19046: 				if (pActMenuWnd5 != NULL) {

  117fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd5@@3PAUaction@@A, 0 ; pActMenuWnd5
  11801	0f 84 9b fa ff
	ff		 je	 $LN1959@MenuProc

; 19047: 					x = pActMenuWnd5->x;
; 19048: 					y = pActMenuWnd5->y;
; 19049: 
; 19050: 					int å±å¹X, å±å¹Y;
; 19051: 					if (ResoMode == åè¾¨ç::mode800) {

  11807	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  1180c	83 f8 03	 cmp	 eax, 3
  1180f	75 4c		 jne	 SHORT $LN1960@MenuProc

; 19052: 						å±å¹X = 800 / 2;
; 19053: 						å±å¹Y = 600 / 2;

  11811	b8 cc 01 00 00	 mov	 eax, 460		; 000001ccH
  11816	c7 85 fc b9 ff
	ff 4f 01 00 00	 mov	 DWORD PTR $T22[ebp], 335 ; 0000014fH
  11820	c7 85 f4 b9 ff
	ff a4 01 00 00	 mov	 DWORD PTR $T14[ebp], 420 ; 000001a4H
  1182a	c7 85 ec b9 ff
	ff e0 01 00 00	 mov	 DWORD PTR $T11[ebp], 480 ; 000001e0H
  11834	c7 85 e0 b9 ff
	ff 27 01 00 00	 mov	 DWORD PTR $T8[ebp], 295	; 00000127H
  1183e	8d 70 ec	 lea	 esi, DWORD PTR [eax-20]
  11841	c7 85 00 ba ff
	ff 07 01 00 00	 mov	 DWORD PTR $T28[ebp], 263 ; 00000107H
  1184b	8d 78 9c	 lea	 edi, DWORD PTR [eax-100]
  1184e	c7 85 f0 b9 ff
	ff 37 01 00 00	 mov	 DWORD PTR $T13[ebp], 311 ; 00000137H

; 19054: 					}

  11858	e9 95 00 00 00	 jmp	 $LN1963@MenuProc
$LN1960@MenuProc:

; 19055: 					else if (ResoMode == åè¾¨ç::mode1024) {

  1185d	83 f8 04	 cmp	 eax, 4
  11860	75 49		 jne	 SHORT $LN1962@MenuProc

; 19056: 						å±å¹X = 1024 / 2;
; 19057: 						å±å¹Y = 768 / 2;

  11862	b8 3c 02 00 00	 mov	 eax, 572		; 0000023cH
  11867	c7 85 fc b9 ff
	ff bf 01 00 00	 mov	 DWORD PTR $T22[ebp], 447 ; 000001bfH
  11871	c7 85 f4 b9 ff
	ff 14 02 00 00	 mov	 DWORD PTR $T14[ebp], 532 ; 00000214H
  1187b	c7 85 ec b9 ff
	ff 50 02 00 00	 mov	 DWORD PTR $T11[ebp], 592 ; 00000250H
  11885	c7 85 e0 b9 ff
	ff 7b 01 00 00	 mov	 DWORD PTR $T8[ebp], 379	; 0000017bH
  1188f	8d 70 ec	 lea	 esi, DWORD PTR [eax-20]
  11892	c7 85 00 ba ff
	ff 5b 01 00 00	 mov	 DWORD PTR $T28[ebp], 347 ; 0000015bH
  1189c	8d 78 80	 lea	 edi, DWORD PTR [eax-128]
  1189f	c7 85 f0 b9 ff
	ff 8b 01 00 00	 mov	 DWORD PTR $T13[ebp], 395 ; 0000018bH

; 19058: 					}

  118a9	eb 47		 jmp	 SHORT $LN1963@MenuProc
$LN1962@MenuProc:

; 19059: 					else {
; 19060: 						å±å¹X = 640 / 2;
; 19061: 						å±å¹Y = 480 / 2;

  118ab	b8 7c 01 00 00	 mov	 eax, 380		; 0000017cH
  118b0	c7 85 fc b9 ff
	ff ff 00 00 00	 mov	 DWORD PTR $T22[ebp], 255 ; 000000ffH
  118ba	c7 85 f4 b9 ff
	ff 54 01 00 00	 mov	 DWORD PTR $T14[ebp], 340 ; 00000154H
  118c4	c7 85 ec b9 ff
	ff 90 01 00 00	 mov	 DWORD PTR $T11[ebp], 400 ; 00000190H
  118ce	c7 85 e0 b9 ff
	ff eb 00 00 00	 mov	 DWORD PTR $T8[ebp], 235	; 000000ebH
  118d8	8d 70 ec	 lea	 esi, DWORD PTR [eax-20]
  118db	c7 85 00 ba ff
	ff cb 00 00 00	 mov	 DWORD PTR $T28[ebp], 203 ; 000000cbH
  118e5	8d 78 b0	 lea	 edi, DWORD PTR [eax-80]
  118e8	c7 85 f0 b9 ff
	ff fb 00 00 00	 mov	 DWORD PTR $T13[ebp], 251 ; 000000fbH
$LN1963@MenuProc:

; 19062: 					}
; 19063: #ifdef NEWä¸ªäººé¶è¡å¾æ¡£åç§»		//[ê°ì¸ ìí ì´ë¯¸ì§ offset]
; 19064: 					bankWndFontNo[0] = StockDispBuffer(å±å¹X + 60, å±å¹Y + 60, DISP_PRIO_IME3, CG_TRADE_CANCEL_BTN, 2);

  118f2	6a 02		 push	 2
  118f4	68 c2 65 00 00	 push	 26050			; 000065c2H
  118f9	6a 69		 push	 105			; 00000069H
  118fb	57		 push	 edi
  118fc	50		 push	 eax
  118fd	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 19065: 					bankWndFontNo[1] = StockDispBuffer(å±å¹X - 65, å±å¹Y + 60, DISP_PRIO_IME3, CG_TRADE_OK_BTN, 2);

  11902	6a 02		 push	 2
  11904	68 ed 65 00 00	 push	 26093			; 000065edH
  11909	6a 69		 push	 105			; 00000069H
  1190b	57		 push	 edi
  1190c	ff b5 fc b9 ff
	ff		 push	 DWORD PTR $T22[ebp]
  11912	a3 00 00 00 00	 mov	 DWORD PTR ?bankWndFontNo@@3PAHA, eax
  11917	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer

; 19066: #else
; 19067: 					bankWndFontNo[0] = StockDispBuffer(x + 200, y + 133, DISP_PRIO_IME3, CG_TRADE_CANCEL_BTN, 2);
; 19068: 					bankWndFontNo[1] = StockDispBuffer(x + 75, y + 133, DISP_PRIO_IME3, CG_TRADE_OK_BTN, 2);
; 19069: #endif
; 19070: 					bankWndFontNo[2] = StockDispBuffer(å±å¹X + 20, å±å¹Y - 5, DISP_PRIO_IME3, CG_UP_BTN + bankWndBtnFlag[2], 2);

  1191c	8b bd e0 b9 ff
	ff		 mov	 edi, DWORD PTR $T8[ebp]
  11922	a3 04 00 00 00	 mov	 DWORD PTR ?bankWndFontNo@@3PAHA+4, eax
  11927	a1 08 00 00 00	 mov	 eax, DWORD PTR ?bankWndBtnFlag@@3PAHA+8
  1192c	6a 02		 push	 2
  1192e	05 4c 66 00 00	 add	 eax, 26188		; 0000664cH
  11933	50		 push	 eax
  11934	6a 69		 push	 105			; 00000069H
  11936	57		 push	 edi
  11937	ff b5 f4 b9 ff
	ff		 push	 DWORD PTR $T14[ebp]
  1193d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  11942	a3 08 00 00 00	 mov	 DWORD PTR ?bankWndFontNo@@3PAHA+8, eax

; 19071: 					bankWndFontNo[3] = StockDispBuffer(å±å¹X + 80, å±å¹Y - 5, DISP_PRIO_IME3, CG_DOWN_BTN + bankWndBtnFlag[3], 2);

  11947	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?bankWndBtnFlag@@3PAHA+12
  1194c	6a 02		 push	 2
  1194e	05 4e 66 00 00	 add	 eax, 26190		; 0000664eH
  11953	50		 push	 eax
  11954	6a 69		 push	 105			; 00000069H
  11956	57		 push	 edi
  11957	ff b5 ec b9 ff
	ff		 push	 DWORD PTR $T11[ebp]
  1195d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  11962	83 c4 50	 add	 esp, 80			; 00000050H
  11965	a3 0c 00 00 00	 mov	 DWORD PTR ?bankWndFontNo@@3PAHA+12, eax

; 19072: 
; 19073: #ifdef NEWä¸ªäººé¶è¡å¾æ¡£åç§»		//[ê°ì¸ ìí ì´ë¯¸ì§ offset]
; 19074: 					sprintf(moji, "%d", cashGold);

  1196a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  11970	ff 35 00 00 00
	00		 push	 DWORD PTR ?cashGold@@3HA
  11976	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  1197b	50		 push	 eax
  1197c	e8 00 00 00 00	 call	 _sprintf

; 19075: 					StockFontBuffer(å±å¹X + 40, å±å¹Y - 37, FONT_PRIO_FRONT, 0, moji, 0);

  11981	6a 00		 push	 0
  11983	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  11989	50		 push	 eax
  1198a	6a 00		 push	 0
  1198c	6a 01		 push	 1
  1198e	ff b5 00 ba ff
	ff		 push	 DWORD PTR $T28[ebp]
  11994	56		 push	 esi
  11995	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 19076: 					sprintf(moji, "%d", totalGold - cashGold);

  1199a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?totalGold@@3HA
  1199f	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?cashGold@@3HA
  119a5	50		 push	 eax
  119a6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  119ac	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  119b1	50		 push	 eax
  119b2	e8 00 00 00 00	 call	 _sprintf

; 19077: 					StockFontBuffer(å±å¹X + 40, å±å¹Y + 11, FONT_PRIO_FRONT, 0, moji, 0);

  119b7	6a 00		 push	 0
  119b9	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _moji$[ebp]
  119bf	50		 push	 eax
  119c0	6a 00		 push	 0
  119c2	6a 01		 push	 1
  119c4	ff b5 f0 b9 ff
	ff		 push	 DWORD PTR $T13[ebp]
  119ca	56		 push	 esi
  119cb	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 19078: #else
; 19079: 					sprintf(moji, "%7d", cashGold);
; 19080: 					StockFontBuffer(x + 180, y + 40, FONT_PRIO_FRONT, 0, moji, 0);
; 19081: 					sprintf(moji, "%7d", totalGold - cashGold);
; 19082: 					StockFontBuffer(x + 180, y + 86, FONT_PRIO_FRONT, 0, moji, 0);
; 19083: #endif
; 19084: 
; 19085: 					//JL 800600 fix
; 19086: 					StockDispBuffer(320 + DISPLACEMENT_X / 2, 240 + DISPLACEMENT_Y / 2, DISP_PRIO_IME3, 26287, 1);

  119d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  119d5	83 c4 48	 add	 esp, 72			; 00000048H
  119d8	99		 cdq
  119d9	2b c2		 sub	 eax, edx
  119db	d1 f8		 sar	 eax, 1
  119dd	6a 01		 push	 1
  119df	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
  119e4	68 af 66 00 00	 push	 26287			; 000066afH
  119e9	6a 69		 push	 105			; 00000069H
  119eb	50		 push	 eax
  119ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_X@@3HA ; DISPLACEMENT_X
  119f1	99		 cdq
  119f2	2b c2		 sub	 eax, edx
  119f4	d1 f8		 sar	 eax, 1
  119f6	05 40 01 00 00	 add	 eax, 320		; 00000140H
  119fb	50		 push	 eax
  119fc	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  11a01	83 c4 14	 add	 esp, 20			; 00000014H
  11a04	e9 99 f8 ff ff	 jmp	 $LN1959@MenuProc
$LN5170@MenuProc:

; 14263: 								static std::vector<int> ridelist_ =

  11a09	68 00 00 00 00	 push	 OFFSET ?$TSS0@?EDI@??MenuProc@@YAXXZ@4HA
  11a0e	e8 00 00 00 00	 call	 __Init_thread_header
  11a13	83 c4 04	 add	 esp, 4
  11a16	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?EDI@??MenuProc@@YAXXZ@4HA, -1
  11a1d	0f 85 83 34 ff
	ff		 jne	 $LN137@MenuProc
  11a23	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 14264: 								{ 130821,130949,130952,100872,105185,130885,130762,130904,130320,100849,130802,119023,102259,103374,100374, 100374, 100374, 105376, 105377, 105378, 105379, 105380, 105381, 105382, 105383, 105384, 105385, 105386, 105387, 105393, 105392, 105390, 105391, 105388, 105389, 100348, 105546, 105547, 105548, 105549, 105550, 105551, 105552, 105553, 105554, 105555, 105556, 105557, 105558, 105559, 105560, 105561, 105562, 110163, 100362, 105428, 105429, 105430, 105431, 105432, 105433, 105434, 105435, 105436, 105437, 105438, 105439, 105440, 105441, 105442, 105443, 105444, 105445, 100307, 105358, 105359, 105360, 105361, 105362, 105363, 105364, 105365, 105366, 105367, 105368, 105369, 105370, 105371, 105372, 105373, 105374, 105375, 100279, 105464, 105465, 105466, 105467, 105468, 105469, 105470, 105471, 105472, 105473, 105474, 105475, 105476, 105477, 105478, 105479, 105480, 105481, 100372, 101008, 101018, 101028, 101038, 101048, 101058, 101068, 101078, 101088, 101098, 101108, 101118, 101118, 101118, 101118, 101118, 101118, 101118, 100373, 101009, 101019, 101029, 101039, 101049, 101059, 101069, 101079, 101089, 101099, 101109, 101119, 105037, 105036, 105034, 105035, 105035, 105035, 105185, 105186, 105187, 105188, 105189, 105190, 105191, 105192, 105193, 105194, 105195, 105196, 105197, 105203, 105202, 105200, 105201, 105198, 105199, 105321, 105322, 105323, 105324, 105325, 105326, 105327, 105327, 105327, 105327, 105327, 105327, 105327, 105331, 105327, 105327, 105330, 105328, 105329, 100371, 105000, 105001, 105002, 105002, 105002, 105002, 105003, 105002, 105002, 105002, 105002, 105002, 105002, 105002, 105002, 105002, 105005, 105004, 105112, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105114, 102008, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105087, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105100, 105101, 105101, 105101, 105101, 105101, 105101, 105102, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 102018, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105122, 105121, 105121, 105121, 105121, 102006, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 102007, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 102174, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105127, 105126, 105126, 105126, 105126, 105126, 105126, 105165, 105166, 105167, 105168, 105169, 105170, 105171, 105172, 105173, 105174, 105175, 105176, 105177, 105183, 105182, 105180, 105181, 105178, 105179, 102077, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105130, 105131, 105089, 105090, 105097, 105091, 105092, 105093, 105097, 105094, 105097, 105097, 105097, 105095, 105097, 105099, 105098, 105096, 105097, 105097, 105097, 100871, 105416, 105417, 105418, 105419, 105420, 105421, 105422, 105423, 105424, 105425, 105426, 105427, 105427, 105427, 105427, 105427, 105427, 105427, 102091, 105104, 105105, 105106, 105106, 105106, 105107, 105108, 105106, 105109, 105106, 105106, 105106, 105111, 105110, 105106, 105106, 105106, 105106, 102075, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105119, 105117, 105116, 100907, 105394, 105395, 105396, 105397, 105398, 105399, 105400, 105401, 105402, 105403, 105404, 105405, 105405, 105405, 105405, 105405, 105405, 105405, 102137, 105509, 105510, 105511, 105512, 105513, 105514, 105515, 105516, 105517, 105518, 105519, 105520, 105526, 105525, 105523, 105524, 105521, 105522, 102135, 105491, 105492, 105493, 105494, 105495, 105496, 105497, 105498, 105499, 105500, 105501, 105502, 105508, 105507, 105505, 105506, 105503, 105504, 102026, 105040, 105041, 105042, 105043, 105044, 105045, 105046, 105047, 105048, 105049, 105050, 105051, 105057, 105056, 105054, 105055, 105052, 105053, 102024, 105060, 105061, 105062, 105063, 105064, 105065, 105066, 105067, 105068, 105069, 105070, 105071, 105077, 105076, 105074, 105075, 105072, 105073, 102101, 105237, 105238, 105239, 105240, 105241, 105242, 105243, 105244, 105245, 105246, 105247, 105248, 105254, 105253, 105251, 105252, 105249, 105250, 102103, 105256, 105257, 105258, 105259, 105260, 105261, 105262, 105263, 105264, 105265, 105266, 105267, 105273, 105272, 105270, 105271, 105268, 105269, 102105, 105275, 105276, 105277, 105278, 105279, 105280, 105281, 105282, 105283, 105284, 105285, 105286, 105292, 105291, 105289, 105290, 105287, 105288, 102107, 105294, 105295, 105296, 105297, 105298, 105299, 105300, 105301, 105302, 105303, 105304, 105305, 105311, 105310, 105308, 105309, 105306, 105307, 102210, 105155, 105155, 105156, 105155, 105157, 105158, 105155, 105155, 105155, 105155, 105159, 105160, 105164, 105163, 105155, 105155, 105161, 105162, 102020, 105208, 105208, 105208, 105209, 105208, 105208, 105210, 105211, 105212, 105213, 105208, 105208, 105208, 105208, 105214, 105215, 105208, 105208, 102060, 105333, 105334, 105335, 105336, 105337, 105338, 105339, 105340, 105341, 105342, 105343, 105344, 105348, 105347, 105345, 105346, 105346, 105346, 102162, 105446, 105447, 105448, 105449, 105450, 105451, 105452, 105453, 105454, 105455, 105456, 105457, 105463, 105462, 105460, 105461, 105458, 105459, 102168, 105313, 105313, 105313, 105313, 105313, 105313, 105313, 105313, 105313, 105316, 105317, 105318, 105313, 105313, 105319, 105320, 105313, 105313, 105349, 105350, 105350, 105350, 105350, 105350, 105351, 105350, 105352, 105353, 105354, 105350, 105355, 105350, 105350, 105350, 105350, 105356, 105357, 103162, 105536, 105536, 105536, 105537, 105536, 105536, 105536, 105538, 105536, 105539, 105536, 105540, 105544, 105543, 105536, 105536, 105541, 105542, 105217, 105218, 105219, 105220, 105221, 105222, 105223, 105224, 105225, 105226, 105227, 105228, 105229, 105235, 105234, 105232, 105233, 105230, 105231, 102022, 105136, 105137, 105138, 105139, 105140, 105141, 105142, 105143, 105144, 105145, 105146, 105147, 105153, 105152, 105150, 105151, 105148, 105149, 100288, 106500, 106500, 106500, 106500, 106500, 106500, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 100287, 106502, 106502, 106502, 106502, 106503, 106503, 106503, 106503, 106504, 106504, 106504, 106504, 106504, 106504, 106504, 106504, 106504, 106504, 100290, 106505, 106505, 106505, 106505, 106506, 106506, 106506, 106506, 106507, 106507, 106507, 106507, 106507, 106507, 106507, 106507, 106507, 106507, 100289, 106508, 106508, 106508, 106508, 106509, 106509, 106509, 106509, 106510, 106510, 106510, 106510, 106510, 106510, 106510, 106510, 106510, 106510, 100394, 106511, 106511, 106511, 106511, 106512, 106512, 106512, 106512, 106513, 106513, 106513, 106513, 106513, 106513, 106513, 106513, 106513, 106513, 101532, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 100283, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 100904, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 102079, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102057, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102088, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 102158, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102164, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 103042, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 102133, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102112, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102127, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102156, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102204, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102206, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102216, 103349, 103350, 103351, 103352, 103353, 103354, 103355, 103356, 103357, 103358, 103359, 103360, 103360, 103360, 103360, 103360, 103360, 103360, 102208, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102202, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 103269, 103257, 103258, 103259, 103260, 103261, 103262, 103263, 103264, 103265, 103266, 103267, 103268, 103268, 103268, 103268, 103268, 103268, 103268, 103040, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 102258, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102254, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 103054, 103055, 103056, 103057, 103058, 103059, 103060, 103061, 103062, 103063, 103064, 103065, 103066, 103066, 103066, 103066, 103066, 103066, 103066, 103067, 103068, 103069, 103070, 103071, 103072, 103073, 103074, 103075, 103076, 103077, 103078, 103079, 103079, 103079, 103079, 103079, 103079, 103079, 103080, 103081, 103082, 103083, 103084, 103085, 103086, 103087, 103088, 103089, 103090, 103091, 103092, 103092, 103092, 103092, 103092, 103092, 103092, 103282, 103270, 103271, 103272, 103273, 103274, 103275, 103276, 103277, 103278, 103279, 103280, 103281, 103281, 103281, 103281, 103281, 103281, 103281, 100274, 103100, 103101, 103102, 103103, 103104, 103105, 103106, 103107, 103108, 103109, 103110, 103111, 103111, 103111, 103111, 103111, 103111, 103111, 102199, 102199, 102248, 101424, 102081, 102249, 102250, 102199, 102248, 101424, 102081, 102249, 102250, 102250, 102250, 102250, 102250, 102250, 102250, 102072, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 102234, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 100370, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425,761000,100005, 100010, 100015, 100025, 100030, 100035, 100020, 100055, 100050, 100045, 100040, 100060, 100065, 100070, 100075, 100095, 100085, 100090, 100080, 100100, 100115, 100110, 100105, 100135, 100120, 100125, 100130, 100145, 100140, 100150, 100155, 100165, 100170, 100160, 100175, 100190, 100195, 100185, 100180, 100200, 100210, 100215, 100205, 100230, 100225, 100220, 100235, 120000, 120005, 120010, 120015, 120020, 120025, 120030, 120035, 120040, 120045, 120050, 120055, 120060, 120065, 120070, 120075, 100400, 100405, 100431, 100436,   100329, 100327, 100330, 100328,101004, 101005, 101006, 101007, 101015, 101016, 101017, 101014, 101027, 101026, 101025, 101024, 101034, 101035, 101036, 101037, 101047, 101045, 101046, 101044, 101054, 101057, 101056, 101055, 101067, 101064, 101065, 101066, 101075, 101074, 101076, 101077, 101085, 101086, 101084, 101087, 101096, 101097, 101095, 101094, 101104, 101106, 101107, 101105, 101116, 101115, 101114, 101117, 110235, 110236, 110240, 110200, 110239, 110201, 110237, 110238,110100,100000, 100352, 101001, 100005, 100352, 101002, 100010, 100352, 101003, 100015, 100352, 101000, 100700, 100352, 101000, 100705, 100352, 101010, 100020, 100396, 101011, 100025, 100396, 101012, 100030, 100396, 101013, 100035, 100396, 101010, 100710, 100396, 101010, 100715, 100396, 101020, 100040, 100351, 101021, 100045, 100351, 101022, 100050, 100351, 101023, 100055, 100351, 101020, 100720, 100351, 101020, 100725, 100351, 101030, 100060, 100353, 101031, 100065, 100353, 101032, 100070, 100353, 101033, 100075, 100353, 101030, 100730, 100353, 101030, 100735, 100353, 101040, 100080, 100396, 101041, 100085, 100396, 101042, 100090, 100396, 101043, 100095, 100396, 101040, 100740, 100396, 101040, 100745, 100396, 101050, 100100, 100353, 101051, 100105, 100353, 101052, 100110, 100353, 101053, 100115, 100353, 101050, 100750, 100353, 101050, 100755, 100353, 101060, 100120, 100354, 101061, 100125, 100354, 101062, 100130, 100354, 101063, 100135, 100354, 101060, 100760, 100354, 101060, 100765, 100354, 101070, 100140, 100354, 101071, 100145, 100354, 101072, 100150, 100354, 101073, 100155, 100354, 101070, 100770, 100354, 101070, 100775, 100354, 101080, 100160, 100352, 101081, 100165, 100352, 101082, 100170, 100352, 101083, 100175, 100352, 101080, 100780, 100352, 101080, 100785, 100352, 101090, 100180, 100351, 101091, 100185, 100351, 101092, 100190, 100351, 101093, 100195, 100351, 101090, 100790, 100351, 101090, 100795, 100351, 101100, 100200, 100353, 101101, 100205, 100353, 101102, 100210, 100353, 101103, 100215, 100353, 101100, 100800, 100353, 101100, 100805, 100353, 101110, 100220, 100396, 101111, 100225, 100396, 101112, 100230, 100396, 101113, 100235, 100396, 101110, 100810, 100396, 101110, 100815, 100396,100372, 100373, 101008, 101009, 101018, 101019, 101028, 101029, 101038, 101039, 101048, 101049, 101058, 101059, 101068, 101069, 101078, 101079, 101088, 101089, 101098, 101099, 101108, 101109, 101118, 101119, 101088, 101089, 101098, 101099, 101108, 101109, 101118, 101119, 101108, 101109, 101118, 101119 };

  11a2a	8d 85 10 ba ff
	ff		 lea	 eax, DWORD PTR $T30[ebp]
  11a30	68 14 1d 00 00	 push	 7444			; 00001d14H
  11a35	68 00 00 00 00	 push	 OFFSET __static@8ffde64a243da3c9520e7b1d47f2acf5790ae3ce89c9834a2190211969353309
  11a3a	50		 push	 eax
  11a3b	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  11a40	68 14 1d 00 00	 push	 7444			; 00001d14H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  11a45	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A, 0
  11a4f	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+4, 0
  11a59	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+8, 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  11a63	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1644 :         _Myfirst           = _Newvec;

  11a68	a3 00 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A, eax

; 1645 :         _Mylast            = _Newvec;

  11a6d	a3 04 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+4, eax

; 1646 :         _Myend             = _Newvec + _Newcapacity;

  11a72	05 14 1d 00 00	 add	 eax, 7444		; 00001d14H
  11a77	a3 08 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+8, eax

; 496  :             _Tidy_guard<vector> _Guard{this};

  11a7c	c7 85 f4 b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR __Guard$18[ebp], OFFSET ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A
  11a86	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  11a8a	8d 85 24 d7 ff
	ff		 lea	 eax, DWORD PTR $T30[ebp+7444]
  11a90	68 00 00 00 00	 push	 OFFSET ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A
  11a95	ff 35 00 00 00
	00		 push	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A
  11a9b	50		 push	 eax
  11a9c	8d 85 10 ba ff
	ff		 lea	 eax, DWORD PTR $T30[ebp]
  11aa2	50		 push	 eax
  11aa3	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBHV?$allocator@H@std@@@std@@YAPAHQBH0PAHAAV?$allocator@H@0@@Z ; std::_Uninitialized_copy<int const *,std::allocator<int> >

; 498  :             _My_data._Mylast = _Ucopy(_First, _Last, _My_data._Myfirst);

  11aa8	a3 04 00 00 00	 mov	 DWORD PTR ?ridelist_@?EDI@??MenuProc@@YAXXZ@4V?$vector@HV?$allocator@H@std@@@std@@A+4, eax

; 499  :             _Guard._Target   = nullptr;

  11aad	c7 85 f4 b9 ff
	ff 00 00 00 00	 mov	 DWORD PTR __Guard$18[ebp], 0

; 500  :         }

  11ab7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 14264: 								{ 130821,130949,130952,100872,105185,130885,130762,130904,130320,100849,130802,119023,102259,103374,100374, 100374, 100374, 105376, 105377, 105378, 105379, 105380, 105381, 105382, 105383, 105384, 105385, 105386, 105387, 105393, 105392, 105390, 105391, 105388, 105389, 100348, 105546, 105547, 105548, 105549, 105550, 105551, 105552, 105553, 105554, 105555, 105556, 105557, 105558, 105559, 105560, 105561, 105562, 110163, 100362, 105428, 105429, 105430, 105431, 105432, 105433, 105434, 105435, 105436, 105437, 105438, 105439, 105440, 105441, 105442, 105443, 105444, 105445, 100307, 105358, 105359, 105360, 105361, 105362, 105363, 105364, 105365, 105366, 105367, 105368, 105369, 105370, 105371, 105372, 105373, 105374, 105375, 100279, 105464, 105465, 105466, 105467, 105468, 105469, 105470, 105471, 105472, 105473, 105474, 105475, 105476, 105477, 105478, 105479, 105480, 105481, 100372, 101008, 101018, 101028, 101038, 101048, 101058, 101068, 101078, 101088, 101098, 101108, 101118, 101118, 101118, 101118, 101118, 101118, 101118, 100373, 101009, 101019, 101029, 101039, 101049, 101059, 101069, 101079, 101089, 101099, 101109, 101119, 105037, 105036, 105034, 105035, 105035, 105035, 105185, 105186, 105187, 105188, 105189, 105190, 105191, 105192, 105193, 105194, 105195, 105196, 105197, 105203, 105202, 105200, 105201, 105198, 105199, 105321, 105322, 105323, 105324, 105325, 105326, 105327, 105327, 105327, 105327, 105327, 105327, 105327, 105331, 105327, 105327, 105330, 105328, 105329, 100371, 105000, 105001, 105002, 105002, 105002, 105002, 105003, 105002, 105002, 105002, 105002, 105002, 105002, 105002, 105002, 105002, 105005, 105004, 105112, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105113, 105114, 102008, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105087, 105086, 105086, 105086, 105086, 105086, 105086, 105086, 105100, 105101, 105101, 105101, 105101, 105101, 105101, 105102, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 105101, 102018, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105121, 105122, 105121, 105121, 105121, 105121, 102006, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 105080, 102007, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 105083, 102174, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105126, 105127, 105126, 105126, 105126, 105126, 105126, 105126, 105165, 105166, 105167, 105168, 105169, 105170, 105171, 105172, 105173, 105174, 105175, 105176, 105177, 105183, 105182, 105180, 105181, 105178, 105179, 102077, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105129, 105130, 105131, 105089, 105090, 105097, 105091, 105092, 105093, 105097, 105094, 105097, 105097, 105097, 105095, 105097, 105099, 105098, 105096, 105097, 105097, 105097, 100871, 105416, 105417, 105418, 105419, 105420, 105421, 105422, 105423, 105424, 105425, 105426, 105427, 105427, 105427, 105427, 105427, 105427, 105427, 102091, 105104, 105105, 105106, 105106, 105106, 105107, 105108, 105106, 105109, 105106, 105106, 105106, 105111, 105110, 105106, 105106, 105106, 105106, 102075, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105118, 105119, 105117, 105116, 100907, 105394, 105395, 105396, 105397, 105398, 105399, 105400, 105401, 105402, 105403, 105404, 105405, 105405, 105405, 105405, 105405, 105405, 105405, 102137, 105509, 105510, 105511, 105512, 105513, 105514, 105515, 105516, 105517, 105518, 105519, 105520, 105526, 105525, 105523, 105524, 105521, 105522, 102135, 105491, 105492, 105493, 105494, 105495, 105496, 105497, 105498, 105499, 105500, 105501, 105502, 105508, 105507, 105505, 105506, 105503, 105504, 102026, 105040, 105041, 105042, 105043, 105044, 105045, 105046, 105047, 105048, 105049, 105050, 105051, 105057, 105056, 105054, 105055, 105052, 105053, 102024, 105060, 105061, 105062, 105063, 105064, 105065, 105066, 105067, 105068, 105069, 105070, 105071, 105077, 105076, 105074, 105075, 105072, 105073, 102101, 105237, 105238, 105239, 105240, 105241, 105242, 105243, 105244, 105245, 105246, 105247, 105248, 105254, 105253, 105251, 105252, 105249, 105250, 102103, 105256, 105257, 105258, 105259, 105260, 105261, 105262, 105263, 105264, 105265, 105266, 105267, 105273, 105272, 105270, 105271, 105268, 105269, 102105, 105275, 105276, 105277, 105278, 105279, 105280, 105281, 105282, 105283, 105284, 105285, 105286, 105292, 105291, 105289, 105290, 105287, 105288, 102107, 105294, 105295, 105296, 105297, 105298, 105299, 105300, 105301, 105302, 105303, 105304, 105305, 105311, 105310, 105308, 105309, 105306, 105307, 102210, 105155, 105155, 105156, 105155, 105157, 105158, 105155, 105155, 105155, 105155, 105159, 105160, 105164, 105163, 105155, 105155, 105161, 105162, 102020, 105208, 105208, 105208, 105209, 105208, 105208, 105210, 105211, 105212, 105213, 105208, 105208, 105208, 105208, 105214, 105215, 105208, 105208, 102060, 105333, 105334, 105335, 105336, 105337, 105338, 105339, 105340, 105341, 105342, 105343, 105344, 105348, 105347, 105345, 105346, 105346, 105346, 102162, 105446, 105447, 105448, 105449, 105450, 105451, 105452, 105453, 105454, 105455, 105456, 105457, 105463, 105462, 105460, 105461, 105458, 105459, 102168, 105313, 105313, 105313, 105313, 105313, 105313, 105313, 105313, 105313, 105316, 105317, 105318, 105313, 105313, 105319, 105320, 105313, 105313, 105349, 105350, 105350, 105350, 105350, 105350, 105351, 105350, 105352, 105353, 105354, 105350, 105355, 105350, 105350, 105350, 105350, 105356, 105357, 103162, 105536, 105536, 105536, 105537, 105536, 105536, 105536, 105538, 105536, 105539, 105536, 105540, 105544, 105543, 105536, 105536, 105541, 105542, 105217, 105218, 105219, 105220, 105221, 105222, 105223, 105224, 105225, 105226, 105227, 105228, 105229, 105235, 105234, 105232, 105233, 105230, 105231, 102022, 105136, 105137, 105138, 105139, 105140, 105141, 105142, 105143, 105144, 105145, 105146, 105147, 105153, 105152, 105150, 105151, 105148, 105149, 100288, 106500, 106500, 106500, 106500, 106500, 106500, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 106501, 100287, 106502, 106502, 106502, 106502, 106503, 106503, 106503, 106503, 106504, 106504, 106504, 106504, 106504, 106504, 106504, 106504, 106504, 106504, 100290, 106505, 106505, 106505, 106505, 106506, 106506, 106506, 106506, 106507, 106507, 106507, 106507, 106507, 106507, 106507, 106507, 106507, 106507, 100289, 106508, 106508, 106508, 106508, 106509, 106509, 106509, 106509, 106510, 106510, 106510, 106510, 106510, 106510, 106510, 106510, 106510, 106510, 100394, 106511, 106511, 106511, 106511, 106512, 106512, 106512, 106512, 106513, 106513, 106513, 106513, 106513, 106513, 106513, 106513, 106513, 106513, 101532, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 100283, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 101310, 100904, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 100444, 102079, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102080, 102057, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102058, 102088, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 103038, 102158, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102159, 102164, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 102165, 103042, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 103043, 102133, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102134, 102112, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102113, 102127, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102128, 102156, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102157, 102204, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102205, 102206, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102207, 102216, 103349, 103350, 103351, 103352, 103353, 103354, 103355, 103356, 103357, 103358, 103359, 103360, 103360, 103360, 103360, 103360, 103360, 103360, 102208, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102209, 102202, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 102203, 103269, 103257, 103258, 103259, 103260, 103261, 103262, 103263, 103264, 103265, 103266, 103267, 103268, 103268, 103268, 103268, 103268, 103268, 103268, 103040, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 103041, 102258, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102260, 102254, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 102255, 103054, 103055, 103056, 103057, 103058, 103059, 103060, 103061, 103062, 103063, 103064, 103065, 103066, 103066, 103066, 103066, 103066, 103066, 103066, 103067, 103068, 103069, 103070, 103071, 103072, 103073, 103074, 103075, 103076, 103077, 103078, 103079, 103079, 103079, 103079, 103079, 103079, 103079, 103080, 103081, 103082, 103083, 103084, 103085, 103086, 103087, 103088, 103089, 103090, 103091, 103092, 103092, 103092, 103092, 103092, 103092, 103092, 103282, 103270, 103271, 103272, 103273, 103274, 103275, 103276, 103277, 103278, 103279, 103280, 103281, 103281, 103281, 103281, 103281, 103281, 103281, 100274, 103100, 103101, 103102, 103103, 103104, 103105, 103106, 103107, 103108, 103109, 103110, 103111, 103111, 103111, 103111, 103111, 103111, 103111, 102199, 102199, 102248, 101424, 102081, 102249, 102250, 102199, 102248, 101424, 102081, 102249, 102250, 102250, 102250, 102250, 102250, 102250, 102250, 102072, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 103037, 102234, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 102235, 100370, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425, 100425,761000,100005, 100010, 100015, 100025, 100030, 100035, 100020, 100055, 100050, 100045, 100040, 100060, 100065, 100070, 100075, 100095, 100085, 100090, 100080, 100100, 100115, 100110, 100105, 100135, 100120, 100125, 100130, 100145, 100140, 100150, 100155, 100165, 100170, 100160, 100175, 100190, 100195, 100185, 100180, 100200, 100210, 100215, 100205, 100230, 100225, 100220, 100235, 120000, 120005, 120010, 120015, 120020, 120025, 120030, 120035, 120040, 120045, 120050, 120055, 120060, 120065, 120070, 120075, 100400, 100405, 100431, 100436,   100329, 100327, 100330, 100328,101004, 101005, 101006, 101007, 101015, 101016, 101017, 101014, 101027, 101026, 101025, 101024, 101034, 101035, 101036, 101037, 101047, 101045, 101046, 101044, 101054, 101057, 101056, 101055, 101067, 101064, 101065, 101066, 101075, 101074, 101076, 101077, 101085, 101086, 101084, 101087, 101096, 101097, 101095, 101094, 101104, 101106, 101107, 101105, 101116, 101115, 101114, 101117, 110235, 110236, 110240, 110200, 110239, 110201, 110237, 110238,110100,100000, 100352, 101001, 100005, 100352, 101002, 100010, 100352, 101003, 100015, 100352, 101000, 100700, 100352, 101000, 100705, 100352, 101010, 100020, 100396, 101011, 100025, 100396, 101012, 100030, 100396, 101013, 100035, 100396, 101010, 100710, 100396, 101010, 100715, 100396, 101020, 100040, 100351, 101021, 100045, 100351, 101022, 100050, 100351, 101023, 100055, 100351, 101020, 100720, 100351, 101020, 100725, 100351, 101030, 100060, 100353, 101031, 100065, 100353, 101032, 100070, 100353, 101033, 100075, 100353, 101030, 100730, 100353, 101030, 100735, 100353, 101040, 100080, 100396, 101041, 100085, 100396, 101042, 100090, 100396, 101043, 100095, 100396, 101040, 100740, 100396, 101040, 100745, 100396, 101050, 100100, 100353, 101051, 100105, 100353, 101052, 100110, 100353, 101053, 100115, 100353, 101050, 100750, 100353, 101050, 100755, 100353, 101060, 100120, 100354, 101061, 100125, 100354, 101062, 100130, 100354, 101063, 100135, 100354, 101060, 100760, 100354, 101060, 100765, 100354, 101070, 100140, 100354, 101071, 100145, 100354, 101072, 100150, 100354, 101073, 100155, 100354, 101070, 100770, 100354, 101070, 100775, 100354, 101080, 100160, 100352, 101081, 100165, 100352, 101082, 100170, 100352, 101083, 100175, 100352, 101080, 100780, 100352, 101080, 100785, 100352, 101090, 100180, 100351, 101091, 100185, 100351, 101092, 100190, 100351, 101093, 100195, 100351, 101090, 100790, 100351, 101090, 100795, 100351, 101100, 100200, 100353, 101101, 100205, 100353, 101102, 100210, 100353, 101103, 100215, 100353, 101100, 100800, 100353, 101100, 100805, 100353, 101110, 100220, 100396, 101111, 100225, 100396, 101112, 100230, 100396, 101113, 100235, 100396, 101110, 100810, 100396, 101110, 100815, 100396,100372, 100373, 101008, 101009, 101018, 101019, 101028, 101029, 101038, 101039, 101048, 101049, 101058, 101059, 101068, 101069, 101078, 101079, 101088, 101089, 101098, 101099, 101108, 101109, 101118, 101119, 101088, 101089, 101098, 101099, 101108, 101109, 101118, 101119, 101108, 101109, 101118, 101119 };

  11abb	68 00 00 00 00	 push	 OFFSET ??__Fridelist_@?EDI@??MenuProc@@YAXXZ@YAXXZ ; `MenuProc'::`1080'::`dynamic atexit destructor for 'ridelist_''
  11ac0	e8 00 00 00 00	 call	 _atexit
  11ac5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  11acc	68 00 00 00 00	 push	 OFFSET ?$TSS0@?EDI@??MenuProc@@YAXXZ@4HA
  11ad1	e8 00 00 00 00	 call	 __Init_thread_footer
  11ad6	83 c4 28	 add	 esp, 40			; 00000028H
  11ad9	e9 c8 33 ff ff	 jmp	 $LN137@MenuProc
  11ade	66 90		 npad	 2
$LN4309@MenuProc:

; 19103: 	}
; 19104: #endif
; 19105: 
; 19106: 
; 19107: }

  11ae0	00 00 00 00	 DD	 $LN581@MenuProc
  11ae4	00 00 00 00	 DD	 $LN633@MenuProc
  11ae8	00 00 00 00	 DD	 $LN644@MenuProc
  11aec	00 00 00 00	 DD	 $LN669@MenuProc
  11af0	00 00 00 00	 DD	 $LN687@MenuProc
  11af4	00 00 00 00	 DD	 $LN712@MenuProc
  11af8	00 00 00 00	 DD	 $LN732@MenuProc
  11afc	00 00 00 00	 DD	 $LN747@MenuProc
$LN4310@MenuProc:
  11b00	00 00 00 00	 DD	 $LN769@MenuProc
  11b04	00 00 00 00	 DD	 $LN820@MenuProc
  11b08	00 00 00 00	 DD	 $LN5039@MenuProc
  11b0c	00 00 00 00	 DD	 $LN835@MenuProc
  11b10	00 00 00 00	 DD	 $LN762@MenuProc
  11b14	00 00 00 00	 DD	 $LN763@MenuProc
  11b18	00 00 00 00	 DD	 $LN764@MenuProc
  11b1c	00 00 00 00	 DD	 $LN765@MenuProc
$LN4311@MenuProc:
  11b20	00 00 00 00	 DD	 $LN858@MenuProc
  11b24	00 00 00 00	 DD	 $LN950@MenuProc
  11b28	00 00 00 00	 DD	 $LN1015@MenuProc
  11b2c	00 00 00 00	 DD	 $LN1074@MenuProc
$LN4334@MenuProc:
  11b30	00 00 00 00	 DD	 $LN1387@MenuProc
  11b34	00 00 00 00	 DD	 $LN1439@MenuProc
  11b38	00 00 00 00	 DD	 $LN1455@MenuProc
  11b3c	00 00 00 00	 DD	 $LN1510@MenuProc
  11b40	00 00 00 00	 DD	 $LN1571@MenuProc
  11b44	00 00 00 00	 DD	 $LN1591@MenuProc
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MenuProc@@YAXXZ$3:
  00000	8d 8d 28 d7 ff
	ff		 lea	 ecx, DWORD PTR _r$31[ebp+4]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?MenuProc@@YAXXZ$1:
  0000b	8d 8d 24 d7 ff
	ff		 lea	 ecx, DWORD PTR _r$31[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1Ranking@@QAE@XZ
__unwindfunclet$?MenuProc@@YAXXZ$4:
  00016	8d 8d 28 d7 ff
	ff		 lea	 ecx, DWORD PTR _r$31[ebp+4]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?MenuProc@@YAXXZ$0:
  00021	68 00 00 00 00	 push	 OFFSET ?$TSS0@?EDI@??MenuProc@@YAXXZ@4HA
  00026	e8 00 00 00 00	 call	 __Init_thread_abort
  0002b	59		 pop	 ecx
  0002c	c3		 ret	 0
__unwindfunclet$?MenuProc@@YAXXZ$2:
  0002d	8d 8d f4 b9 ff
	ff		 lea	 ecx, DWORD PTR __Guard$18[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
  0003c	cc		 int	 3
__ehhandler$?MenuProc@@YAXXZ:
  0003d	90		 npad	 1
  0003e	90		 npad	 1
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 8a c8 b9 ff
	ff		 mov	 ecx, DWORD PTR [edx-17976]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MenuProc@@YAXXZ
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MenuProc@@YAXXZ ENDP					; MenuProc
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?CheckMenuFlag@@YAHXZ
_TEXT	SEGMENT
?CheckMenuFlag@@YAHXZ PROC				; CheckMenuFlag, COMDAT

; 10397: 	BOOL flag = FALSE;

  00000	33 c0		 xor	 eax, eax

; 10398: 	if (MenuToggleFlag != 0) flag = TRUE;

  00002	b9 01 00 00 00	 mov	 ecx, 1
  00007	39 05 00 00 00
	00		 cmp	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag
  0000d	0f 45 c1	 cmovne	 eax, ecx

; 10399: 	if (BattleResultWndFlag >= 1) flag = TRUE;

  00010	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?BattleResultWndFlag@@3HA, ecx ; BattleResultWndFlag
  00016	0f 4d c1	 cmovge	 eax, ecx

; 10400: 	if (MapWmdFlagBak >= TRUE) flag = TRUE;

  00019	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?MapWmdFlagBak@@3HA, ecx ; MapWmdFlagBak
  0001f	0f 4d c1	 cmovge	 eax, ecx

; 10401: #ifdef _FRIENDCHANNEL
; 10402: 	if (assentFlag) flag = assentFlag;

  00022	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?assentFlag@@3_NA ; assentFlag
  00028	84 c9		 test	 cl, cl
  0002a	74 03		 je	 SHORT $LN5@CheckMenuF
  0002c	0f b6 c1	 movzx	 eax, cl
$LN5@CheckMenuF:

; 10403: 	if (setRoomFlag) flag = setRoomFlag;

  0002f	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?setRoomFlag@@3_NA ; setRoomFlag
  00035	84 c9		 test	 cl, cl
  00037	74 03		 je	 SHORT $LN6@CheckMenuF
  00039	0f b6 c1	 movzx	 eax, cl
$LN6@CheckMenuF:

; 10404: #endif
; 10405: 	return flag;
; 10406: }

  0003c	c3		 ret	 0
?CheckMenuFlag@@YAHXZ ENDP				; CheckMenuFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitMenu2@@YAXXZ
_TEXT	SEGMENT
?InitMenu2@@YAXXZ PROC					; InitMenu2, COMDAT

; 10386: 	MenuToggleFlag = 0;

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 0 ; MenuToggleFlag

; 10387: 	DeathMenuAction();

  0000a	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 10388: 	DeathMenuAction2();

  0000f	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 10389: 	mouse.itemNo = -1;

  00014	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1

; 10390: 	itemNo = -1;

  0001e	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1

; 10391: 	jujutuNo = -1;

  00028	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?jujutuNo@@3HA, -1

; 10392: 	BattleResultWndFlag = FALSE;

  00032	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BattleResultWndFlag@@3HA, 0 ; BattleResultWndFlag

; 10393: }

  0003c	c3		 ret	 0
?InitMenu2@@YAXXZ ENDP					; InitMenu2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitMenu@@YAXXZ
_TEXT	SEGMENT
?InitMenu@@YAXXZ PROC					; InitMenu, COMDAT

; 10346: 	int i;
; 10347: 	for (i = 0; i < MENU_SYSTEM_0; i++) systemWndFontNo[i] = -2;

  00000	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00007	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA, xmm0
  0000e	57		 push	 edi
  0000f	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+16, xmm0

; 10348: 	for (i = 0; i < MENU_MAP_0; i++) mapWndFontNo[i] = -2;

  00016	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?mapWndFontNo@@3PAHA, -2 ; fffffffeH
  00020	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+32, xmm0
  00027	c7 05 04 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?mapWndFontNo@@3PAHA+4, -2 ; fffffffeH
  00031	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+48, xmm0
  00038	c7 05 08 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?mapWndFontNo@@3PAHA+8, -2 ; fffffffeH
  00042	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+64, xmm0

; 10349: 	mapWndNo = 0;

  00049	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mapWndNo@@3IA, 0
  00053	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+80, xmm0

; 10350: 	for (i = 0; i < MENU_STATUS_0; i++) statusWndFontNo[i] = -2;
; 10351: 	for (i = 0; i < MENU_STATUS_0; i++) statusWndBtnFlag[i] = 0;
; 10352: 	for (i = 0; i < MENU_TRADE_0; i++) tradeWndFontNo[i] = -2;
; 10353: 	for (i = 0; i < MENU_TRADE_0; i++) tradeWndBtnFlag[i] = 0;
; 10354: 	for (i = 0; i < MENU_PET_0; i++) petWndFontNo[i] = -2;
; 10355: 	petWndNo = 0;

  0005a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?petWndNo@@3IA, 0
  00064	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+96, xmm0

; 10356: 	for (i = 0; i < MENU_ITEM_0; i++) itemWndFontNo[i] = -2;
; 10357: 	for (i = 0; i < MENU_ITEM_0; i++) itemWndBtnFlag[i] = 0;
; 10358: 	for (i = 0; i < 3; i++) itemWndBtnBag[i] = -2;

  0006b	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA, -2 ; fffffffeH
  00075	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+112, xmm0
  0007c	c7 05 04 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA+4, -2 ; fffffffeH
  00086	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+128, xmm0
  0008d	c7 05 08 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?itemWndBtnBag@@3PAHA+8, -2 ; fffffffeH
  00097	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?systemWndFontNo@@3PAHA+144, xmm0

; 10359: 	itemWndNo = 0;

  0009e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndNo@@3IA, 0
  000a8	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  000af	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA, xmm0

; 10360: 	itemWndBagOffset = 0;

  000b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemWndBagOffset@@3HA, 0 ; itemWndBagOffset
  000c0	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+16, xmm0
  000c7	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+32, xmm0
  000ce	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+48, xmm0
  000d5	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndFontNo@@3PAHA+64, xmm0
  000dc	0f 57 c0	 xorps	 xmm0, xmm0
  000df	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA, xmm0
  000e6	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+16, xmm0
  000ed	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+32, xmm0
  000f4	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+48, xmm0
  000fb	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?statusWndBtnFlag@@3PAHA+64, xmm0
  00102	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00109	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA, xmm0
  00110	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+16, xmm0
  00117	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+32, xmm0
  0011e	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+48, xmm0
  00125	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?tradeWndFontNo@@3PAHA+64, xmm0
  0012c	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?tradeWndFontNo@@3PAHA+80, xmm0
  00134	0f 57 c0	 xorps	 xmm0, xmm0
  00137	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA, xmm0
  0013e	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA+16, xmm0
  00145	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA+32, xmm0
  0014c	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA+48, xmm0
  00153	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?tradeWndBtnFlag@@3PAHA+64, xmm0
  0015a	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?tradeWndBtnFlag@@3PAHA+80, xmm0
  00162	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00169	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA, xmm0
  00170	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+16, xmm0
  00177	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+32, xmm0
  0017e	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+48, xmm0
  00185	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?petWndFontNo@@3PAHA+64, xmm0
  0018c	66 0f d6 05 50
	00 00 00	 movq	 QWORD PTR ?petWndFontNo@@3PAHA+80, xmm0
  00194	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  0019b	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA, xmm0
  001a2	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+16, xmm0
  001a9	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+32, xmm0
  001b0	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+48, xmm0
  001b7	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+64, xmm0
  001be	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+80, xmm0
  001c5	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+96, xmm0
  001cc	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+112, xmm0
  001d3	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+128, xmm0
  001da	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndFontNo@@3PAHA+144, xmm0
  001e1	0f 57 c0	 xorps	 xmm0, xmm0
  001e4	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA, xmm0
  001eb	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+16, xmm0
  001f2	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+32, xmm0
  001f9	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+48, xmm0
  00200	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+64, xmm0
  00207	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+80, xmm0
  0020e	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+96, xmm0
  00215	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+112, xmm0
  0021c	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+128, xmm0
  00223	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?itemWndBtnFlag@@3PAHA+144, xmm0
  0022a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  00231	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA, xmm0
  00238	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+16, xmm0
  0023f	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+32, xmm0

; 10361: 	for (i = 0; i < MENU_MAIL_0; i++) mailWndFontNo[i] = -2;
; 10362: 	for (i = 0; i < MAX_ADR_BOOK; i++) mailWndSendFlag[i] = 0;

  00246	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+48, xmm0
  0024d	33 c0		 xor	 eax, eax
  0024f	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00254	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+64, xmm0
  0025b	bf 00 00 00 00	 mov	 edi, OFFSET ?mailWndSendFlag@@3PAHA

; 10363: 	mailWndNo = MAIL_WND_VIEW;

  00260	a3 00 00 00 00	 mov	 DWORD PTR ?mailWndNo@@3W4MAIL_WND_TYPE@@A, eax
  00265	0f 11 05 50 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+80, xmm0

; 10364: 	for (i = 0; i < MENU_ALBUM_0; i++) albumWndFontNo[i] = -2;
; 10365: 	albumWndNo = 0;

  0026c	a3 00 00 00 00	 mov	 DWORD PTR ?albumWndNo@@3IA, eax
  00271	0f 11 05 60 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+96, xmm0

; 10366: 	for (i = 0; i < TASK_BAR; i++) taskBarFontNo[i] = -2;
; 10367: 	for (i = 0; i < MENU_BTL_RESULT_0; i++) resultWndFontNo[i] = -2;

  00278	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?resultWndFontNo@@3PAHA, -2 ; resultWndFontNo, fffffffeH
  00282	0f 11 05 70 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+112, xmm0

; 10368: 	MenuToggleFlag = 0;

  00289	a3 00 00 00 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, eax ; MenuToggleFlag
  0028e	0f 11 05 80 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+128, xmm0

; 10369: #ifdef _TELLCHANNEL				//ROG ADD å¯è¯­é¢é
; 10370: 	MultiTells = FALSE;

  00295	a3 00 00 00 00	 mov	 DWORD PTR ?MultiTells@@3HA, eax ; MultiTells
  0029a	0f 11 05 90 00
	00 00		 movups	 XMMWORD PTR ?mailWndFontNo@@3PAHA+144, xmm0
  002a1	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  002a8	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA, xmm0
  002af	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+16, xmm0
  002b6	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+32, xmm0
  002bd	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+48, xmm0
  002c4	0f 11 05 40 00
	00 00		 movups	 XMMWORD PTR ?albumWndFontNo@@3PAHA+64, xmm0
  002cb	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  002d2	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?taskBarFontNo@@3PAHA, xmm0
  002d9	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@fffffffefffffffefffffffefffffffe
  002e0	f3 ab		 rep stosd
  002e2	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?taskBarFontNo@@3PAHA+16, xmm0

; 10371: #endif
; 10372: 	DeathMenuAction();

  002e9	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 10373: 	DeathMenuAction2();

  002ee	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 10374: 	mouse.itemNo = -1;

  002f3	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1

; 10375: 	itemNo = -1;

  002fd	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?itemNo@@3HA, -1

; 10376: 	jujutuNo = -1;

  00307	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?jujutuNo@@3HA, -1

; 10377: 	ItemMixPetNo = -1;

  00311	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?ItemMixPetNo@@3HA, -1

; 10378: #ifdef __AI
; 10379: 	void AI_CloseWnd();
; 10380: 	AI_CloseWnd();

  0031b	5f		 pop	 edi
  0031c	e9 00 00 00 00	 jmp	 ?AI_CloseWnd@@YAXXZ	; AI_CloseWnd
?InitMenu@@YAXXZ ENDP					; InitMenu
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?InitItem@@YAXHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_bPetItemFlag$ = 16					; size = 4
?InitItem@@YAXHHH@Z PROC				; InitItem, COMDAT

; 10062: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10063: 	int i, j = 0, k = 0, q, p;
; 10064: 	//printf("%d.%d",x,y);
; 10065: #ifdef _ITEM_EQUITSPACE
; 10066: 	struct _tagInitXY {
; 10067: 		int x;
; 10068: 		int y;
; 10069: 	}InitXY[CHAR_EQUIPPLACENUM] = {
; 10070: 		{ x + 84, y + 51 },{ x + 85, y + 119 },{ x + 33, y + 122 },
; 10071: 		{ x + 137, y + 63 },{ x + 33, y + 63 },{ x + 137, y + 122 },
; 10072: 		{ x + 137, y + 122 },{ x + 136, y + 130 }
; 10073: #ifdef _EQUIT_NEWGLOVE
; 10074: 		,{ x + 137, y + 122 }
; 10075: #endif
; 10076: 	};
; 10077: #endif
; 10078: 	/*for (i = 0; i < MAX_ITEMSTART; i++)
; 10079: 	{
; 10080: 		ItemBuffer[i].defX = InitXY[i].x;
; 10081: 		ItemBuffer[i].defY = InitXY[i].y;
; 10082: 		ItemBuffer[i].x = ItemBuffer[0].defX;
; 10083: 		ItemBuffer[i].y = ItemBuffer[0].defY;
; 10084: 		ItemBuffer[i].bmpNo = 20000 + 0;
; 10085: 		ItemBuffer[i].dispPrio = DISP_PRIO_ITEM;
; 10086: 	}*/
; 10087: 
; 10088: 		//í¬ë©§   5ì¹¸ X + 137 Y + 61      /  9ì¹¸ X + 91 Y + 46
; 10089: 	ItemBuffer[0].defX = x + 91;
; 10090: 	ItemBuffer[0].defY = y + 46;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8d 42 2e	 lea	 eax, DWORD PTR [edx+46]

; 10091: 	ItemBuffer[0].x = ItemBuffer[0].defX;
; 10092: 	ItemBuffer[0].y = ItemBuffer[0].defY;
; 10093: 	ItemBuffer[0].bmpNo = 20000 + 0;

  0000e	c7 05 10 00 00
	00 20 4e 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+16, 20000 ; 00004e20H
  00018	8d 71 5b	 lea	 esi, DWORD PTR [ecx+91]
  0001b	a3 0c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+12, eax

; 10094: 	ItemBuffer[0].dispPrio = DISP_PRIO_ITEM;
; 10095: 	//ì·(/ì½ì¤í¬)	5ì¹¸ X + 130 Y + 123      /  9ì¹¸ X + 91 Y + 94
; 10096: 	ItemBuffer[1].defX = x + 91;
; 10097: 	ItemBuffer[1].defY = y + 94;

  00020	83 c2 5e	 add	 edx, 94			; 0000005eH
  00023	a3 04 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+4, eax
  00028	57		 push	 edi

; 10098: 	ItemBuffer[1].x = ItemBuffer[1].defX;
; 10099: 	ItemBuffer[1].y = ItemBuffer[1].defY;
; 10100: 	ItemBuffer[1].bmpNo = 20200 + 1;
; 10101: 	ItemBuffer[1].dispPrio = DISP_PRIO_ITEM;
; 10102: 	//[ë¬´ê¸°]			5ì¹¸ X + 71 Y + 123      /  9ì¹¸ X + 41 Y + 94
; 10103: 	ItemBuffer[2].defX = x + 41;

  00029	8d 79 29	 lea	 edi, DWORD PTR [ecx+41]

; 10104: 	ItemBuffer[2].defY = y + 94;
; 10105: 	ItemBuffer[2].x = ItemBuffer[2].defX;
; 10106: 	ItemBuffer[2].y = ItemBuffer[2].defY;
; 10107: 	ItemBuffer[2].bmpNo = 20400 + 2;
; 10108: 	ItemBuffer[2].dispPrio = DISP_PRIO_ITEM;
; 10109: 	//ì¼ìª½ ì¥ì êµ¬	5ì¹¸ X + 37 Y + 70      /  9ì¹¸ X + 41 Y + 46
; 10110: 	ItemBuffer[3].defX = x + 41;
; 10111: 	ItemBuffer[3].defY = y + 46;

  0002c	a3 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+108, eax

; 10112: 	ItemBuffer[3].x = ItemBuffer[3].defX;
; 10113: 	ItemBuffer[3].y = ItemBuffer[3].defY;
; 10114: 	ItemBuffer[3].bmpNo = 20600 + 3;
; 10115: 	ItemBuffer[3].dispPrio = DISP_PRIO_ITEM;
; 10116: 	//ì¤ë¥¸ìª½ ì¥ì êµ¬	5ì¹¸ X + 87 Y + 70      /  9ì¹¸ X + 141 Y + 46
; 10117: 	ItemBuffer[4].defX = x + 141;

  00031	81 c1 8d 00 00
	00		 add	 ecx, 141		; 0000008dH
  00037	a3 64 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+100, eax

; 10118: 	ItemBuffer[4].defY = y + 46;

  0003c	a3 8c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+140, eax
  00041	33 db		 xor	 ebx, ebx

; 10119: 	ItemBuffer[4].x = ItemBuffer[4].defX;
; 10120: 	ItemBuffer[4].y = ItemBuffer[4].defY;

  00043	a3 84 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+132, eax

; 10121: 	ItemBuffer[4].bmpNo = 20800 + 4;
; 10122: 	ItemBuffer[4].dispPrio = DISP_PRIO_ITEM;
; 10123: 
; 10124: 	// CHAR_EQBELT
; 10125: 	ItemBuffer[5].defX = x + 91;
; 10126: 	ItemBuffer[5].defY = y + 142;

  00048	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0004b	05 8e 00 00 00	 add	 eax, 142		; 0000008eH
  00050	89 35 08 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+8, esi
  00056	89 35 00 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A, esi
  0005c	89 35 28 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+40, esi
  00062	89 35 20 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+32, esi
  00068	89 3d 48 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+72, edi
  0006e	89 3d 40 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+64, edi
  00074	89 3d 68 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+104, edi
  0007a	89 3d 60 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+96, edi
  00080	89 0d 88 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+136, ecx
  00086	89 0d 80 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+128, ecx
  0008c	89 35 a8 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+168, esi

; 10127: 	ItemBuffer[5].x = ItemBuffer[5].defX;

  00092	89 35 a0 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+160, esi
  00098	33 f6		 xor	 esi, esi

; 10128: 	ItemBuffer[5].y = ItemBuffer[5].defY;
; 10129: 	ItemBuffer[5].bmpNo = 21000 + 5;
; 10130: 	ItemBuffer[5].dispPrio = DISP_PRIO_ITEM;
; 10131: 
; 10132: 	// CHAR_EQSHIELD
; 10133: 	ItemBuffer[6].defX = x + 141;

  0009a	89 0d c8 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+200, ecx

; 10134: 	ItemBuffer[6].defY = y + 94;
; 10135: 	ItemBuffer[6].x = ItemBuffer[6].defX;

  000a0	89 0d c0 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+192, ecx

; 10136: 	ItemBuffer[6].y = ItemBuffer[6].defY;
; 10137: 	ItemBuffer[6].bmpNo = 21000 + 5;
; 10138: 	ItemBuffer[6].dispPrio = DISP_PRIO_ITEM;
; 10139: 
; 10140: 	// CHAR_EQSHOES
; 10141: 	ItemBuffer[7].defX = x + 141;

  000a6	89 0d e8 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+232, ecx

; 10142: 	ItemBuffer[7].defY = y + 142;
; 10143: 	ItemBuffer[7].x = ItemBuffer[7].defX;

  000ac	89 0d e0 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+224, ecx
  000b2	b9 2c 01 00 00	 mov	 ecx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+300

; 10144: 	ItemBuffer[7].y = ItemBuffer[7].defY;
; 10145: 	ItemBuffer[7].bmpNo = 21000 + 5;
; 10146: 	ItemBuffer[7].dispPrio = DISP_PRIO_ITEM;
; 10147: 
; 10148: 	// CHAR_EQGLOVE
; 10149: 	ItemBuffer[8].defX = x + 41;

  000b7	89 3d 08 01 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+264, edi

; 10150: 	ItemBuffer[8].defY = y + 142;
; 10151: 	ItemBuffer[8].x = ItemBuffer[8].defX;

  000bd	89 3d 00 01 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+256, edi
  000c3	8b 7d 08	 mov	 edi, DWORD PTR _x$[ebp]
  000c6	c7 05 14 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+20, 108 ; 0000006cH
  000d0	89 15 2c 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+44, edx
  000d6	89 15 24 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+36, edx
  000dc	c7 05 30 00 00
	00 e9 4e 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+48, 20201 ; 00004ee9H
  000e6	c7 05 34 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+52, 108 ; 0000006cH
  000f0	89 15 4c 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+76, edx
  000f6	89 15 44 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+68, edx
  000fc	c7 05 50 00 00
	00 b2 4f 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+80, 20402 ; 00004fb2H
  00106	c7 05 54 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+84, 108 ; 0000006cH
  00110	c7 05 70 00 00
	00 7b 50 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+112, 20603 ; 0000507bH
  0011a	c7 05 74 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+116, 108 ; 0000006cH
  00124	c7 05 90 00 00
	00 44 51 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+144, 20804 ; 00005144H
  0012e	c7 05 94 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+148, 108 ; 0000006cH
  00138	a3 ac 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+172, eax
  0013d	a3 a4 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+164, eax
  00142	c7 05 b0 00 00
	00 0d 52 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+176, 21005 ; 0000520dH
  0014c	c7 05 b4 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+180, 108 ; 0000006cH
  00156	89 15 cc 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+204, edx
  0015c	89 15 c4 00 00
	00		 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+196, edx
  00162	c7 05 d0 00 00
	00 0d 52 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+208, 21005 ; 0000520dH
  0016c	c7 05 d4 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+212, 108 ; 0000006cH
  00176	a3 ec 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+236, eax
  0017b	a3 e4 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+228, eax
  00180	c7 05 f0 00 00
	00 0d 52 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+240, 21005 ; 0000520dH
  0018a	c7 05 f4 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+244, 108 ; 0000006cH
  00194	a3 0c 01 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+268, eax

; 10152: 	ItemBuffer[8].y = ItemBuffer[8].defY;

  00199	a3 04 01 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+260, eax

; 10153: 	ItemBuffer[8].bmpNo = 21000 + 5;

  0019e	c7 05 10 01 00
	00 0d 52 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+272, 21005 ; 0000520dH

; 10154: 	ItemBuffer[8].dispPrio = DISP_PRIO_ITEM;

  001a8	c7 05 14 01 00
	00 6c 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A+276, 108 ; 0000006cH
$LL10@InitItem:

; 10155: 
; 10156: 	for (i = MAX_ITEMSTART; i < MAX_ITEM; i++) {
; 10157: 		ItemBuffer[i].defX = x + 36 + j;
; 10158: 		ItemBuffer[i].defY = y + 64 + 48 + 48 + 48 + k;

  001b2	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  001b5	8d 57 24	 lea	 edx, DWORD PTR [edi+36]
  001b8	05 d0 00 00 00	 add	 eax, 208		; 000000d0H

; 10159: 		ItemBuffer[i].x = ItemBuffer[i].defX;
; 10160: 		ItemBuffer[i].y = ItemBuffer[i].defY;
; 10161: 		ItemBuffer[i].bmpNo = 20000 + j / 48;
; 10162: 		ItemBuffer[i].dispPrio = DISP_PRIO_ITEM;

  001bd	c7 41 08 6c 00
	00 00		 mov	 DWORD PTR [ecx+8], 108	; 0000006cH
  001c4	03 c6		 add	 eax, esi

; 10163: 		ItemBuffer[i].mixFlag = FALSE;

  001c6	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  001cd	03 d3		 add	 edx, ebx
  001cf	89 01		 mov	 DWORD PTR [ecx], eax
  001d1	89 41 f8	 mov	 DWORD PTR [ecx-8], eax
  001d4	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001d9	89 51 fc	 mov	 DWORD PTR [ecx-4], edx
  001dc	89 51 f4	 mov	 DWORD PTR [ecx-12], edx
  001df	f7 eb		 imul	 ebx
  001e1	c1 fa 03	 sar	 edx, 3
  001e4	8b c2		 mov	 eax, edx
  001e6	81 c2 20 4e 00
	00		 add	 edx, 20000		; 00004e20H
  001ec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001ef	03 c2		 add	 eax, edx

; 10164: 		j += 51;
; 10165: 		if (j >= 48 * 5) {
; 10166: 			j = 0;
; 10167: 			k += 48;
; 10168: 		}
; 10169: 		if (k >= 47 * 3)

  001f1	8d 56 30	 lea	 edx, DWORD PTR [esi+48]
  001f4	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  001f7	8d 43 33	 lea	 eax, DWORD PTR [ebx+51]
  001fa	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  001ff	0f 4c d6	 cmovl	 edx, esi
  00202	33 db		 xor	 ebx, ebx
  00204	83 c1 20	 add	 ecx, 32			; 00000020H
  00207	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  0020c	0f 4c d8	 cmovl	 ebx, eax
  0020f	33 f6		 xor	 esi, esi
  00211	81 fa 8d 00 00
	00		 cmp	 edx, 141		; 0000008dH
  00217	0f 4c f2	 cmovl	 esi, edx
  0021a	81 f9 cc 06 00
	00		 cmp	 ecx, OFFSET ?ItemBuffer@@3PAUITEM_BUFFER@@A+1740
  00220	7c 90		 jl	 SHORT $LL10@InitItem

; 10170: 		{
; 10171: 			k = 0;
; 10172: 		}
; 10173: 	}
; 10174: }

  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5b		 pop	 ebx
  00225	5d		 pop	 ebp
  00226	c3		 ret	 0
?InitItem@@YAXHHH@Z ENDP				; InitItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?TradeTalk@@YAXPAD@Z
_TEXT	SEGMENT
_buf$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_msg$ = 8						; size = 4
?TradeTalk@@YAXPAD@Z PROC				; TradeTalk, COMDAT

; 1270 : void TradeTalk(char *msg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1271 : 	char buf[256];
; 1272 : 	if (pActMenuWnd4 != NULL || SecondTradeWnd != NULL) {

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A, 0 ; pActMenuWnd4
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR _msg$[ebp]
  0001e	75 0d		 jne	 SHORT $LN11@TradeTalk
  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A, 0 ; SecondTradeWnd
  00027	0f 84 65 01 00
	00		 je	 $LN12@TradeTalk
$LN11@TradeTalk:

; 1273 : 		sprintf(buf, "%s", msg);

  0002d	56		 push	 esi
  0002e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _sprintf
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  0003f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00045	68 70 00 00 00	 push	 OFFSET ?pc@@3UPC@@A+112
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _strstr
  00050	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 1275 : 		if (strstr(buf, pc.name) || strstr(buf, opp_name)) {

  00053	85 c0		 test	 eax, eax
  00055	75 1c		 jne	 SHORT $LN32@TradeTalk
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00057	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0005d	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _strstr
  00068	83 c4 08	 add	 esp, 8
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp

; 1275 : 		if (strstr(buf, pc.name) || strstr(buf, opp_name)) {

  0006b	85 c0		 test	 eax, eax
  0006d	0f 84 1f 01 00
	00		 je	 $LN12@TradeTalk
$LN32@TradeTalk:

; 1276 : 			//åå®¹è½¬ç§»
; 1277 : 			while (1) {
; 1278 : 				if (strlen(msg) > 44) {

  00073	8b ce		 mov	 ecx, esi
  00075	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL52@TradeTalk:
  00078	8a 01		 mov	 al, BYTE PTR [ecx]
  0007a	41		 inc	 ecx
  0007b	84 c0		 test	 al, al
  0007d	75 f9		 jne	 SHORT $LL52@TradeTalk
  0007f	2b ca		 sub	 ecx, edx
  00081	83 f9 2c	 cmp	 ecx, 44			; 0000002cH
  00084	0f 86 a8 00 00
	00		 jbe	 $LN14@TradeTalk
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL2@TradeTalk:

; 1279 : 					strncpy(buf, msg, 44);

  00090	6a 2c		 push	 44			; 0000002cH
  00092	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00098	56		 push	 esi
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _strncpy

; 1280 : 					buf[44] = NULL;
; 1281 : 					if (GetStrLastByte(buf) == 3) {

  0009f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000a5	c6 85 28 ff ff
	ff 00		 mov	 BYTE PTR _buf$[ebp+44], 0
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?GetStrLastByte@@YAHPAD@Z ; GetStrLastByte
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	83 f8 03	 cmp	 eax, 3
  000b8	75 0e		 jne	 SHORT $LN16@TradeTalk

; 1282 : 						buf[43] = NULL;

  000ba	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR _buf$[ebp+43], 0

; 1283 : 						msg += 43;

  000c1	b8 2b 00 00 00	 mov	 eax, 43			; 0000002bH

; 1284 : 					}

  000c6	eb 0c		 jmp	 SHORT $LN17@TradeTalk
$LN16@TradeTalk:

; 1285 : 					else {
; 1286 : 						buf[44] = NULL;

  000c8	c6 85 28 ff ff
	ff 00		 mov	 BYTE PTR _buf$[ebp+44], 0

; 1287 : 						msg += 44;

  000cf	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
$LN17@TradeTalk:

; 1288 : 					}
; 1289 : 					for (int i = 0; i < 3; i++)

  000d4	03 f0		 add	 esi, eax
  000d6	ba 00 01 00 00	 mov	 edx, OFFSET ?talkmsg@@3PAY0BAA@DA+256
  000db	0f 1f 44 00 00	 npad	 5
$LL6@TradeTalk:

; 1290 : 						strcpy(talkmsg[i], talkmsg[i + 1]);

  000e0	8b c2		 mov	 eax, edx
$LL25@TradeTalk:
  000e2	8a 08		 mov	 cl, BYTE PTR [eax]
  000e4	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  000e7	88 88 ff fe ff
	ff		 mov	 BYTE PTR [eax-257], cl
  000ed	84 c9		 test	 cl, cl
  000ef	75 f1		 jne	 SHORT $LL25@TradeTalk

; 1288 : 					}
; 1289 : 					for (int i = 0; i < 3; i++)

  000f1	81 c2 00 01 00
	00		 add	 edx, 256		; 00000100H
  000f7	81 fa 00 04 00
	00		 cmp	 edx, OFFSET ?talkmsg@@3PAY0BAA@DA+1024
  000fd	7c e1		 jl	 SHORT $LL6@TradeTalk

; 1291 : 					sprintf(talkmsg[3], "%s", buf);

  000ff	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00105	50		 push	 eax
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0010b	68 00 03 00 00	 push	 OFFSET ?talkmsg@@3PAY0BAA@DA+768
  00110	e8 00 00 00 00	 call	 _sprintf
  00115	8b ce		 mov	 ecx, esi
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0011d	0f 1f 00	 npad	 3
$LL53@TradeTalk:

; 1276 : 			//åå®¹è½¬ç§»
; 1277 : 			while (1) {
; 1278 : 				if (strlen(msg) > 44) {

  00120	8a 01		 mov	 al, BYTE PTR [ecx]
  00122	41		 inc	 ecx
  00123	84 c0		 test	 al, al
  00125	75 f9		 jne	 SHORT $LL53@TradeTalk
  00127	2b ca		 sub	 ecx, edx
  00129	83 f9 2c	 cmp	 ecx, 44			; 0000002cH
  0012c	0f 87 5e ff ff
	ff		 ja	 $LL2@TradeTalk
$LN14@TradeTalk:

; 1292 : 				}
; 1293 : 				else {
; 1294 : 					for (int i = 0; i < 3; i++)

  00132	ba 00 01 00 00	 mov	 edx, OFFSET ?talkmsg@@3PAY0BAA@DA+256
$LL9@TradeTalk:

; 1295 : 						strcpy(talkmsg[i], talkmsg[i + 1]);

  00137	8b ca		 mov	 ecx, edx
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL26@TradeTalk:
  00140	8a 01		 mov	 al, BYTE PTR [ecx]
  00142	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00145	88 81 ff fe ff
	ff		 mov	 BYTE PTR [ecx-257], al
  0014b	84 c0		 test	 al, al
  0014d	75 f1		 jne	 SHORT $LL26@TradeTalk

; 1292 : 				}
; 1293 : 				else {
; 1294 : 					for (int i = 0; i < 3; i++)

  0014f	81 c2 00 01 00
	00		 add	 edx, 256		; 00000100H
  00155	81 fa 00 04 00
	00		 cmp	 edx, OFFSET ?talkmsg@@3PAY0BAA@DA+1024
  0015b	7c da		 jl	 SHORT $LL9@TradeTalk

; 1296 : 					strcpy(buf, msg);

  0015d	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00163	2b ce		 sub	 ecx, esi
$LL27@TradeTalk:
  00165	8a 06		 mov	 al, BYTE PTR [esi]
  00167	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0016a	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  0016e	84 c0		 test	 al, al
  00170	75 f3		 jne	 SHORT $LL27@TradeTalk

; 1297 : 					sprintf(talkmsg[3], "%s", buf);

  00172	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00178	50		 push	 eax
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0017e	68 00 03 00 00	 push	 OFFSET ?talkmsg@@3PAY0BAA@DA+768
  00183	e8 00 00 00 00	 call	 _sprintf
  00188	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1298 : 					break;
; 1299 : 				}
; 1300 : 			}
; 1301 : 			tradetalkwndflag = true;

  0018b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?tradetalkwndflag@@3_NA, 1 ; tradetalkwndflag
$LN12@TradeTalk:

; 1302 : 		}
; 1303 : 	}
; 1304 : }

  00192	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00195	33 cd		 xor	 ecx, ebp
  00197	5e		 pop	 esi
  00198	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c3		 ret	 0
?TradeTalk@@YAXPAD@Z ENDP				; TradeTalk
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 90   :         __std_exception_destroy(&_Data);

  00030	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00046	74 0b		 je	 SHORT $LN12@scalar
  00048	6a 0c		 push	 12			; 0000000cH
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00053	8b c6		 mov	 eax, esi
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gbad_array_new_length@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__unwindfunclet$??_Gbad_array_new_length@std@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gbad_array_new_length@std@@UAEPAXI@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 71   :         : _Data()

  00029	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 72   :     {

  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00032	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00035	50		 push	 eax
  00036	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003a	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0003d	83 c0 04	 add	 eax, 4
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ___std_exception_copy
  00046	83 c4 08	 add	 esp, 8
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00056	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  00063	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_array_new_length@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 90   :         __std_exception_destroy(&_Data);

  0002d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00030	50		 push	 eax
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00037	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??1bad_array_new_length@std@@UAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0

; 66   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :         _Data._What = _Message;

  00034	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 129  :         : exception(_Message, 1)

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 130  :     {

  00042	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }
; 132  : };
; 133  : 
; 134  : class bad_array_new_length
; 135  :     : public bad_alloc
; 136  : {
; 137  : public:
; 138  : 
; 139  :     bad_array_new_length() noexcept
; 140  :         : bad_alloc("bad array new length")

  00048	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 141  :     {

  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b c1		 mov	 eax, ecx
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0bad_array_new_length@std@@QAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 90   :         __std_exception_destroy(&_Data);

  00030	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00033	50		 push	 eax
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4
  00042	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00046	74 0b		 je	 SHORT $LN9@scalar
  00048	6a 0c		 push	 12			; 0000000cH
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00053	8b c6		 mov	 eax, esi
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gbad_alloc@std@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gbad_alloc@std@@UAEPAXI@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 71   :         : _Data()

  00029	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 72   :     {

  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00032	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00035	50		 push	 eax
  00036	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003a	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0003d	83 c0 04	 add	 eax, 4
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ___std_exception_copy
  00046	83 c4 08	 add	 esp, 8
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b c6		 mov	 eax, esi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_alloc@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 90   :         __std_exception_destroy(&_Data);

  0002d	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00030	50		 push	 eax
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00037	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??1bad_alloc@std@@UAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gexception@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ___std_exception_destroy
  00034	83 c4 04	 add	 esp, 4
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN6@scalar
  0003d	6a 0c		 push	 12			; 0000000cH
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00048	8b c6		 mov	 eax, esi
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
  0005c	cc		 int	 3
  0005d	cc		 int	 3
  0005e	cc		 int	 3
  0005f	cc		 int	 3
  00060	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gexception@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gexception@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 90   :         __std_exception_destroy(&_Data);

  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ___std_exception_destroy
  00031	83 c4 04	 add	 esp, 4

; 91   :     }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 71   :         : _Data()

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 72   :     {

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00031	50		 push	 eax
  00032	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00036	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00039	83 c0 04	 add	 eax, 4
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ___std_exception_copy
  00042	83 c4 08	 add	 esp, 8

; 74   :     }

  00045	8b c6		 mov	 eax, esi
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
  0005d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@ABV01@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@ABV01@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?lssproto_BATTLEBUTTON_recv@@YAXHHH@Z
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_help$ = 12						; size = 4
_escp$ = 16						; size = 4
?lssproto_BATTLEBUTTON_recv@@YAXHHH@Z PROC		; lssproto_BATTLEBUTTON_recv, COMDAT

; 20412: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20413: 	NoHelpFlag = help;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _help$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?NoHelpFlag@@3HA, eax ; NoHelpFlag

; 20414: 	NoEscFlag = escp;

  0000b	8b 45 10	 mov	 eax, DWORD PTR _escp$[ebp]
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?NoEscFlag@@3HA, eax ; NoEscFlag

; 20415: }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?lssproto_BATTLEBUTTON_recv@@YAXHHH@Z ENDP		; lssproto_BATTLEBUTTON_recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?lssproto_CHAREFFECT_recv@@YAXHPAD@Z
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_CHAREFFECT_recv@@YAXHPAD@Z PROC		; lssproto_CHAREFFECT_recv, COMDAT

; 20392: void lssproto_CHAREFFECT_recv(int fd, char *data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20393: 	if (data[0] == '1')

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  00006	8a 01		 mov	 al, BYTE PTR [ecx]
  00008	3c 31		 cmp	 al, 49			; 00000031H
  0000a	74 5c		 je	 SHORT $LN10@lssproto_C

; 20394: 		/*setCharFamily(pc.ptAct, atoi(data + 2))*/;
; 20395: 	else if (data[0] == '2')

  0000c	3c 32		 cmp	 al, 50			; 00000032H
  0000e	75 1a		 jne	 SHORT $LN4@lssproto_C

; 20396: 		setCharMind(pc.ptAct, atoi(data + 2));

  00010	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _atoi
  00019	50		 push	 eax
  0001a	ff 35 ec 50 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+20716
  00020	e8 00 00 00 00	 call	 ?setCharMind@@YAXPAUaction@@H@Z ; setCharMind

; 20407: #endif
; 20408: }

  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN4@lssproto_C:

; 20397: 	else if (data[0] == '3')

  0002a	3c 33		 cmp	 al, 51			; 00000033H
  0002c	74 3a		 je	 SHORT $LN10@lssproto_C

; 20398: 		/*setCharmFamily(pc.ptAct, atoi(data + 2))*/;
; 20399: #ifdef äººç©ç§°å·
; 20400: 	else if (data[0] == '4') {

  0002e	3c 34		 cmp	 al, 52			; 00000034H
  00030	75 1a		 jne	 SHORT $LN8@lssproto_C

; 20401: 		setCharmTitle(pc.ptAct, atoi(data + 2));

  00032	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _atoi
  0003b	50		 push	 eax
  0003c	ff 35 ec 50 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+20716
  00042	e8 00 00 00 00	 call	 ?setCharmTitle@@YAXPAUaction@@H@Z ; setCharmTitle

; 20407: #endif
; 20408: }

  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN8@lssproto_C:

; 20402: 	}
; 20403: #endif
; 20404: #ifdef äººç©åç¯
; 20405: 	else if (data[0] == '5')

  0004c	3c 35		 cmp	 al, 53			; 00000035H
  0004e	75 18		 jne	 SHORT $LN10@lssproto_C

; 20406: 		setCharmManor(pc.ptAct, atoi(data + 2));

  00050	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _atoi
  00059	50		 push	 eax
  0005a	ff 35 ec 50 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+20716
  00060	e8 00 00 00 00	 call	 ?setCharmManor@@YAXPAUaction@@H@Z ; setCharmManor

; 20407: #endif
; 20408: }

  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@lssproto_C:
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?lssproto_CHAREFFECT_recv@@YAXHPAD@Z ENDP		; lssproto_CHAREFFECT_recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?lssproto_BATTLESKILL_recv@@YAXHPAD@Z
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_BATTLESKILL_recv@@YAXHPAD@Z PROC		; lssproto_BATTLESKILL_recv, COMDAT

; 19130: void lssproto_BATTLESKILL_recv(int fd, char *data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19131: 	setCharMind(pc.ptAct, atoi(data));

  00003	ff 75 0c	 push	 DWORD PTR _data$[ebp]
  00006	e8 00 00 00 00	 call	 _atoi
  0000b	50		 push	 eax
  0000c	ff 35 ec 50 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+20716
  00012	e8 00 00 00 00	 call	 ?setCharMind@@YAXPAUaction@@H@Z ; setCharMind
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19132: }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?lssproto_BATTLESKILL_recv@@YAXHPAD@Z ENDP		; lssproto_BATTLESKILL_recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?lssproto_ALCHEPLUS_recv@@YAXHPAD@Z
_TEXT	SEGMENT
_token$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_ALCHEPLUS_recv@@YAXHPAD@Z PROC		; lssproto_ALCHEPLUS_recv, COMDAT

; 19119: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _data$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	33 f6		 xor	 esi, esi
$LL4@lssproto_A:

; 19120: 	char token[64];
; 19121: 	int i;
; 19122: 	for (i = 0; i < 25; i++) {
; 19123: 		getStringToken(data, '|', i + 1, sizeof(token) - 1, token);

  00018	8d 45 bc	 lea	 eax, DWORD PTR _token$[ebp]
  0001b	50		 push	 eax
  0001c	6a 3f		 push	 63			; 0000003fH
  0001e	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  00021	57		 push	 edi
  00022	6a 7c		 push	 124			; 0000007cH
  00024	53		 push	 ebx
  00025	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19124: 		iCharAlchePlus[i] = atoi(token);

  0002a	8d 45 bc	 lea	 eax, DWORD PTR _token$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _atoi
  00033	89 04 b5 00 00
	00 00		 mov	 DWORD PTR ?iCharAlchePlus@@3PAHA[esi*4], eax
  0003a	83 c4 18	 add	 esp, 24			; 00000018H
  0003d	8b f7		 mov	 esi, edi
  0003f	83 fe 19	 cmp	 esi, 25			; 00000019H
  00042	7c d4		 jl	 SHORT $LL4@lssproto_A

; 19125: 	}
; 19126: }

  00044	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	33 cd		 xor	 ecx, ebp
  0004b	5b		 pop	 ebx
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?lssproto_ALCHEPLUS_recv@@YAXHPAD@Z ENDP		; lssproto_ALCHEPLUS_recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?lssproto_RESIST_recv@@YAXHPAD@Z
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_RESIST_recv@@YAXHPAD@Z PROC			; lssproto_RESIST_recv, COMDAT

; 19111: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 19112: 	for (int i = 0; i < CHAR_MAX_DETAIL; i++)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _data$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	be 00 00 00 00	 mov	 esi, OFFSET ?CharDetail@@3PAY0BA@DA ; CharDetail
$LL4@lssproto_R:

; 19113: 		getStringToken(data, '|', i + 1, sizeof(CharDetail[i]) - 1, CharDetail[i]);

  00010	56		 push	 esi
  00011	6a 0f		 push	 15			; 0000000fH
  00013	47		 inc	 edi
  00014	57		 push	 edi
  00015	6a 7c		 push	 124			; 0000007cH
  00017	53		 push	 ebx
  00018	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  0001d	83 c6 10	 add	 esi, 16			; 00000010H
  00020	83 c4 14	 add	 esp, 20			; 00000014H
  00023	81 fe 80 00 00
	00		 cmp	 esi, OFFSET ?CharDetail@@3PAY0BA@DA+128
  00029	7c e5		 jl	 SHORT $LL4@lssproto_R

; 19114: }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?lssproto_RESIST_recv@@YAXHPAD@Z ENDP			; lssproto_RESIST_recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?lssproto_CHATROOM_recv@@YAXHPAD@Z
_TEXT	SEGMENT
_type$ = -4						; size = 3
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_CHATROOM_recv@@YAXHPAD@Z PROC			; lssproto_CHATROOM_recv, COMDAT

; 20258: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 20259: 	char type[3] = { "" };

  00004	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00009	88 45 fc	 mov	 BYTE PTR _type$[ebp], al
  0000c	33 c0		 xor	 eax, eax
  0000e	56		 push	 esi

; 20260: 	int i = 0;
; 20261: 	getStringToken(data, '|', 1, sizeof(type) - 1, type);

  0000f	8b 75 0c	 mov	 esi, DWORD PTR _data$[ebp]
  00012	66 89 45 fd	 mov	 WORD PTR _type$[ebp+1], ax
  00016	8d 45 fc	 lea	 eax, DWORD PTR _type$[ebp]
  00019	50		 push	 eax
  0001a	6a 02		 push	 2
  0001c	6a 01		 push	 1
  0001e	6a 7c		 push	 124			; 0000007cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 20262: 	switch (type[0]) {

  00026	0f be 45 fc	 movsx	 eax, BYTE PTR _type$[ebp]
  0002a	83 c4 14	 add	 esp, 20			; 00000014H
  0002d	83 c0 be	 add	 eax, -66		; ffffffbeH
  00030	83 f8 12	 cmp	 eax, 18			; 00000012H
  00033	0f 87 c7 00 00
	00		 ja	 $LN2@lssproto_C
  00039	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN12@lssproto_C[eax]
  00040	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@lssproto_C[eax*4]
$LN4@lssproto_C:

; 20263: 	case 'B':
; 20264: 		InitSelChatRoom(data);

  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 ?InitSelChatRoom@@YAXPAD@Z ; InitSelChatRoom

; 20295: 		break;
; 20296: 	}
; 20297: }

  0004d	83 c4 04	 add	 esp, 4
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN5@lssproto_C:

; 20265: 		break;
; 20266: 	case 'D':						//Delete
; 20267: 		chatRoomBtn = 0;

  00055	33 c0		 xor	 eax, eax

; 20268: 		strcpy(pc.chatRoomNum, "");
; 20269: 		StockChatBufferLine("ì±íë°©ì´ ì´ë¯¸ ì­ì ëìì´ìï¼", FONT_PAL_RED);

  00057	6a 00		 push	 0
  00059	66 a3 00 00 00
	00		 mov	 WORD PTR ?chatRoomBtn@@3FA, ax ; chatRoomBtn
  0005f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00064	6a 06		 push	 6
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GLJGCFGJ@?C?$KE?F?C?$LJ?f?$MA?L?5?$MA?L?$LJ?L?5?$LL?h?A?$KG?$LF?G?$LO?z?$LO?n?$LP?d?$KD?$KB@
  0006b	a2 b4 a1 00 00	 mov	 BYTE PTR ?pc@@3UPC@@A+41396, al
  00070	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH

; 20270: #ifdef _CHANNEL_MODIFY
; 20271: 		pc.etcFlag &= ~PC_ETCFLAG_CHAT_CHAT;

  00078	b8 ff fb 00 00	 mov	 eax, 64511		; 0000fbffH
  0007d	66 21 05 a8 00
	00 00		 and	 WORD PTR ?pc@@3UPC@@A+168, ax
  00084	5e		 pop	 esi

; 20295: 		break;
; 20296: 	}
; 20297: }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
$LN6@lssproto_C:

; 20272: #endif
; 20273: 		break;
; 20274: 	case 'T':
; 20275: 		InitRecvMsg(data);    //å¤çè®¯æ¯

  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 ?InitRecvMsg@@YAXPAD@Z	; InitRecvMsg

; 20295: 		break;
; 20296: 	}
; 20297: }

  0008f	83 c4 04	 add	 esp, 4
  00092	5e		 pop	 esi
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
$LN7@lssproto_C:

; 20276: 		break;
; 20277: 	case 'K'://åé¤
; 20278: 		chatRoomBtn = 0;

  00097	33 c0		 xor	 eax, eax

; 20279: 		strcpy(pc.chatRoomNum, "");
; 20280: 		StockChatBufferLine("ì±íë°©ìì ê°í´ëìì´ìï¼", FONT_PAL_RED);

  00099	6a 00		 push	 0
  0009b	66 a3 00 00 00
	00		 mov	 WORD PTR ?chatRoomBtn@@3FA, ax ; chatRoomBtn
  000a1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  000a6	6a 06		 push	 6
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FOCEAPFH@?C?$KE?F?C?$LJ?f?$LP?$KB?$LM?$KN?5?$LA?$KN?E?p?$LF?G?$LO?z?$LO?n?$LP?d?$KD?$KB@
  000ad	a2 b4 a1 00 00	 mov	 BYTE PTR ?pc@@3UPC@@A+41396, al
  000b2	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 20281: #ifdef _CHANNEL_MODIFY
; 20282: 		pc.etcFlag &= ~PC_ETCFLAG_CHAT_CHAT;

  000ba	b8 ff fb 00 00	 mov	 eax, 64511		; 0000fbffH
  000bf	66 21 05 a8 00
	00 00		 and	 WORD PTR ?pc@@3UPC@@A+168, ax
  000c6	5e		 pop	 esi

; 20295: 		break;
; 20296: 	}
; 20297: }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
$LN8@lssproto_C:

; 20283: #endif
; 20284: 		break;
; 20285: 	case 'J'://å å¥ç³è¯·
; 20286: 		if (assentFlag == FALSE)

  000cb	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?assentFlag@@3_NA, 0 ; assentFlag
  000d2	75 2c		 jne	 SHORT $LN2@lssproto_C

; 20287: 		{
; 20288: 			DeathAction(pAssentWnd);

  000d4	ff 35 00 00 00
	00		 push	 DWORD PTR ?pAssentWnd@@3PAUaction@@A ; pAssentWnd
  000da	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction

; 20289: 			pAssentWnd = NULL;
; 20290: 			initAssentWnd(data);

  000df	56		 push	 esi
  000e0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pAssentWnd@@3PAUaction@@A, 0 ; pAssentWnd
  000ea	e8 00 00 00 00	 call	 ?initAssentWnd@@YAXPAD@Z ; initAssentWnd
  000ef	83 c4 08	 add	 esp, 8
  000f2	5e		 pop	 esi

; 20295: 		break;
; 20296: 	}
; 20297: }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
$LN10@lssproto_C:

; 20291: 		}
; 20292: 		break;
; 20293: 	case 'R':			//æ´æ°èå¤©å®¤èµè®¯
; 20294: 		InitCreateChatRoom(data);

  000f7	56		 push	 esi
  000f8	e8 00 00 00 00	 call	 ?InitCreateChatRoom@@YAXPAD@Z ; InitCreateChatRoom

; 20295: 		break;
; 20296: 	}
; 20297: }

  000fd	83 c4 04	 add	 esp, 4
$LN2@lssproto_C:
  00100	5e		 pop	 esi
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
  00105	0f 1f 00	 npad	 3
$LN13@lssproto_C:
  00108	00 00 00 00	 DD	 $LN4@lssproto_C
  0010c	00 00 00 00	 DD	 $LN5@lssproto_C
  00110	00 00 00 00	 DD	 $LN8@lssproto_C
  00114	00 00 00 00	 DD	 $LN7@lssproto_C
  00118	00 00 00 00	 DD	 $LN10@lssproto_C
  0011c	00 00 00 00	 DD	 $LN6@lssproto_C
  00120	00 00 00 00	 DD	 $LN2@lssproto_C
$LN12@lssproto_C:
  00124	00		 DB	 0
  00125	06		 DB	 6
  00126	01		 DB	 1
  00127	06		 DB	 6
  00128	06		 DB	 6
  00129	06		 DB	 6
  0012a	06		 DB	 6
  0012b	06		 DB	 6
  0012c	02		 DB	 2
  0012d	03		 DB	 3
  0012e	06		 DB	 6
  0012f	06		 DB	 6
  00130	06		 DB	 6
  00131	06		 DB	 6
  00132	06		 DB	 6
  00133	06		 DB	 6
  00134	04		 DB	 4
  00135	06		 DB	 6
  00136	05		 DB	 5
?lssproto_CHATROOM_recv@@YAXHPAD@Z ENDP			; lssproto_CHATROOM_recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\menu.cpp
;	COMDAT ?lssproto_TD_recv@@YAXHPAD@Z
_TEXT	SEGMENT
tv1863 = -1696						; size = 4
tv1864 = -1692						; size = 4
tv1865 = -1688						; size = 4
tv1876 = -1684						; size = 4
_i$1$ = -1680						; size = 4
tv1878 = -1676						; size = 4
_Head$ = -1672						; size = 2
_pilenum$1 = -1668					; size = 256
_buf_showindex$2 = -1412				; size = 128
_realname$ = -1284					; size = 256
_freename$ = -1028					; size = 256
_opp_index$ = -772					; size = 128
_buf_name$ = -644					; size = 128
_buf_sockfd$ = -516					; size = 128
_buf$ = -388						; size = 128
_szData$3 = -260					; size = 256
_item_freename$4 = -260					; size = 256
_buf1$5 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_TD_recv@@YAXHPAD@Z PROC			; lssproto_TD_recv, COMDAT

; 19136: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 06 00
	00		 sub	 esp, 1696		; 000006a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 19137: 	char Head[2] = "";

  00013	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _data$[ebp]

; 19138: 	char buf_sockfd[128] = "";

  0001c	6a 7f		 push	 127			; 0000007fH
  0001e	88 85 78 f9 ff
	ff		 mov	 BYTE PTR _Head$[ebp], al
  00024	88 85 fc fd ff
	ff		 mov	 BYTE PTR _buf_sockfd$[ebp], al
  0002a	8d 85 fd fd ff
	ff		 lea	 eax, DWORD PTR _buf_sockfd$[ebp+1]
  00030	6a 00		 push	 0
  00032	50		 push	 eax
  00033	c6 85 79 f9 ff
	ff 00		 mov	 BYTE PTR _Head$[ebp+1], 0
  0003a	e8 00 00 00 00	 call	 _memset

; 19139: 	char buf_name[128] = "";

  0003f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00044	6a 7f		 push	 127			; 0000007fH
  00046	88 85 7c fd ff
	ff		 mov	 BYTE PTR _buf_name$[ebp], al
  0004c	8d 85 7d fd ff
	ff		 lea	 eax, DWORD PTR _buf_name$[ebp+1]
  00052	6a 00		 push	 0
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _memset

; 19140: 	char buf[128] = "";

  0005a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0005f	6a 7f		 push	 127			; 0000007fH
  00061	88 85 7c fe ff
	ff		 mov	 BYTE PTR _buf$[ebp], al
  00067	8d 85 7d fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp+1]
  0006d	6a 00		 push	 0
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _memset

; 19141: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 19142: 	char opp_index[128];
; 19143: 	int  index;
; 19144: 	char realname[256];
; 19145: 	char freename[256];
; 19146: #endif
; 19147: 	getStringToken(data, '|', 1, sizeof(char), Head);

  00075	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _Head$[ebp]
  0007b	50		 push	 eax
  0007c	6a 01		 push	 1
  0007e	6a 01		 push	 1
  00080	6a 7c		 push	 124			; 0000007cH
  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00088	83 c4 38	 add	 esp, 56			; 00000038H

; 19148: 	// äº¤æå¼å¯èµæåå§å	
; 19149: 	if (strcmp(Head, "C") == 0) {

  0008b	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _Head$[ebp]
  00091	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01GFHCPBMG@C@
$LL110@lssproto_T:
  00096	8a 10		 mov	 dl, BYTE PTR [eax]
  00098	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0009a	75 1a		 jne	 SHORT $LN111@lssproto_T
  0009c	84 d2		 test	 dl, dl
  0009e	74 12		 je	 SHORT $LN112@lssproto_T
  000a0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000a3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a6	75 0e		 jne	 SHORT $LN111@lssproto_T
  000a8	83 c0 02	 add	 eax, 2
  000ab	83 c1 02	 add	 ecx, 2
  000ae	84 d2		 test	 dl, dl
  000b0	75 e4		 jne	 SHORT $LL110@lssproto_T
$LN112@lssproto_T:
  000b2	33 c0		 xor	 eax, eax
  000b4	eb 05		 jmp	 SHORT $LN113@lssproto_T
$LN111@lssproto_T:
  000b6	1b c0		 sbb	 eax, eax
  000b8	83 c8 01	 or	 eax, 1
$LN113@lssproto_T:
  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 f3 00 00
	00		 jne	 $LN5@lssproto_T

; 19150: 		if ( /*(tradeFlag==0) ||*/ (tradeStatus != 0))

  000c3	66 39 05 00 00
	00 00		 cmp	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus
  000ca	0f 85 78 03 00
	00		 jne	 $LN43@lssproto_T

; 19151: 			return;
; 19152: 
; 19153: 		strcpy(opp_sockfd, "");

  000d0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@

; 19154: 		strcpy(opp_name, "");
; 19155: 		strcpy(trade_command, "");
; 19156: 
; 19157: 		getStringToken(data, '|', 2, sizeof(opp_sockfd) - 1, opp_sockfd);

  000d5	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  000da	6a 7f		 push	 127			; 0000007fH
  000dc	6a 02		 push	 2
  000de	6a 7c		 push	 124			; 0000007cH
  000e0	57		 push	 edi
  000e1	a2 00 00 00 00	 mov	 BYTE PTR ?opp_sockfd@@3PADA, al
  000e6	a2 00 00 00 00	 mov	 BYTE PTR ?opp_name@@3PADA, al
  000eb	a2 00 00 00 00	 mov	 BYTE PTR ?trade_command@@3PADA, al
  000f0	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19158: 		getStringToken(data, '|', 3, sizeof(opp_name) - 1, opp_name);

  000f5	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  000fa	6a 7f		 push	 127			; 0000007fH
  000fc	6a 03		 push	 3
  000fe	6a 7c		 push	 124			; 0000007cH
  00100	57		 push	 edi
  00101	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19159: 		getStringToken(data, '|', 4, sizeof(trade_command) - 1, trade_command);

  00106	68 00 00 00 00	 push	 OFFSET ?trade_command@@3PADA
  0010b	6a 7f		 push	 127			; 0000007fH
  0010d	6a 04		 push	 4
  0010f	6a 7c		 push	 124			; 0000007cH
  00111	57		 push	 edi
  00112	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00117	83 c4 3c	 add	 esp, 60			; 0000003cH

; 19160: 
; 19161: 		if (strcmp(trade_command, "0") == 0) {

  0011a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01GBGANLPD@0@
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ?trade_command@@3PADA
$LL114@lssproto_T:
  00124	8a 10		 mov	 dl, BYTE PTR [eax]
  00126	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00128	75 1a		 jne	 SHORT $LN115@lssproto_T
  0012a	84 d2		 test	 dl, dl
  0012c	74 12		 je	 SHORT $LN116@lssproto_T
  0012e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00131	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00134	75 0e		 jne	 SHORT $LN115@lssproto_T
  00136	83 c0 02	 add	 eax, 2
  00139	83 c1 02	 add	 ecx, 2
  0013c	84 d2		 test	 dl, dl
  0013e	75 e4		 jne	 SHORT $LL114@lssproto_T
$LN116@lssproto_T:
  00140	33 c0		 xor	 eax, eax
  00142	eb 05		 jmp	 SHORT $LN117@lssproto_T
$LN115@lssproto_T:
  00144	1b c0		 sbb	 eax, eax
  00146	83 c8 01	 or	 eax, 1
$LN117@lssproto_T:
  00149	85 c0		 test	 eax, eax
  0014b	0f 84 f7 02 00
	00		 je	 $LN43@lssproto_T

; 19162: 			return;
; 19163: 		}
; 19164: 		else if (strcmp(trade_command, "1") == 0) {

  00151	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01HIHLOKLC@1@
  00156	b8 00 00 00 00	 mov	 eax, OFFSET ?trade_command@@3PADA
  0015b	0f 1f 44 00 00	 npad	 5
$LL118@lssproto_T:
  00160	8a 10		 mov	 dl, BYTE PTR [eax]
  00162	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00164	75 1a		 jne	 SHORT $LN119@lssproto_T
  00166	84 d2		 test	 dl, dl
  00168	74 12		 je	 SHORT $LN120@lssproto_T
  0016a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0016d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00170	75 0e		 jne	 SHORT $LN119@lssproto_T
  00172	83 c0 02	 add	 eax, 2
  00175	83 c1 02	 add	 ecx, 2
  00178	84 d2		 test	 dl, dl
  0017a	75 e4		 jne	 SHORT $LL118@lssproto_T
$LN120@lssproto_T:
  0017c	33 c0		 xor	 eax, eax
  0017e	eb 05		 jmp	 SHORT $LN121@lssproto_T
$LN119@lssproto_T:
  00180	1b c0		 sbb	 eax, eax
  00182	83 c8 01	 or	 eax, 1
$LN121@lssproto_T:
  00185	85 c0		 test	 eax, eax
  00187	0f 85 bb 02 00
	00		 jne	 $LN43@lssproto_T

; 19165: 			tradeStatus = 1;

  0018d	b8 01 00 00 00	 mov	 eax, 1

; 19166: 			MenuToggleFlag = JOY_CTRL_T;

  00192	c7 05 00 00 00
	00 00 00 40 00	 mov	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H
  0019c	66 a3 00 00 00
	00		 mov	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus

; 19167: 			// shan trade(DoubleCheck)
; 19168: 			pc.trade_confirm = 1;

  001a2	a3 80 a1 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, eax
  001a7	5f		 pop	 edi

; 19447: 
; 19448: 		}
; 19449: 	}
; 19450: }

  001a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ab	33 cd		 xor	 ecx, ebp
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c3		 ret	 0
$LN5@lssproto_T:

; 19169: 		}
; 19170: 	}
; 19171: 	//å¤çç©åäº¤æèµè®¯ä¼ é
; 19172: 	else if (strcmp(Head, "T") == 0) {

  001b6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01GAPBHFFA@T@
  001bb	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _Head$[ebp]
$LL122@lssproto_T:
  001c1	8a 10		 mov	 dl, BYTE PTR [eax]
  001c3	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001c5	75 1a		 jne	 SHORT $LN123@lssproto_T
  001c7	84 d2		 test	 dl, dl
  001c9	74 12		 je	 SHORT $LN124@lssproto_T
  001cb	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001ce	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001d1	75 0e		 jne	 SHORT $LN123@lssproto_T
  001d3	83 c0 02	 add	 eax, 2
  001d6	83 c1 02	 add	 ecx, 2
  001d9	84 d2		 test	 dl, dl
  001db	75 e4		 jne	 SHORT $LL122@lssproto_T
$LN124@lssproto_T:
  001dd	33 c0		 xor	 eax, eax
  001df	eb 05		 jmp	 SHORT $LN125@lssproto_T
$LN123@lssproto_T:
  001e1	1b c0		 sbb	 eax, eax
  001e3	83 c8 01	 or	 eax, 1
$LN125@lssproto_T:
  001e6	85 c0		 test	 eax, eax
  001e8	0f 85 4a 0d 00
	00		 jne	 $LN11@lssproto_T

; 19173: 
; 19174: 		if (tradeStatus == 0)	return;

  001ee	66 39 05 00 00
	00 00		 cmp	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus
  001f5	0f 84 4d 02 00
	00		 je	 $LN43@lssproto_T

; 19175: 		char buf_showindex[128];
; 19176: 
; 19177: 		//andy_add mttrade
; 19178: 		getStringToken(data, '|', 4, sizeof(trade_kind) - 1, trade_kind);

  001fb	68 00 00 00 00	 push	 OFFSET ?trade_kind@@3PADA
  00200	6a 7f		 push	 127			; 0000007fH
  00202	6a 04		 push	 4
  00204	6a 7c		 push	 124			; 0000007cH
  00206	57		 push	 edi
  00207	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  0020c	83 c4 14	 add	 esp, 20			; 00000014H

; 19179: 		if (strcmp(trade_kind, "S") == 0) {

  0020f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01CPLAODJH@S@
  00214	b8 00 00 00 00	 mov	 eax, OFFSET ?trade_kind@@3PADA
  00219	0f 1f 80 00 00
	00 00		 npad	 7
$LL126@lssproto_T:
  00220	8a 10		 mov	 dl, BYTE PTR [eax]
  00222	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00224	75 1a		 jne	 SHORT $LN127@lssproto_T
  00226	84 d2		 test	 dl, dl
  00228	74 12		 je	 SHORT $LN128@lssproto_T
  0022a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0022d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00230	75 0e		 jne	 SHORT $LN127@lssproto_T
  00232	83 c0 02	 add	 eax, 2
  00235	83 c1 02	 add	 ecx, 2
  00238	84 d2		 test	 dl, dl
  0023a	75 e4		 jne	 SHORT $LL126@lssproto_T
$LN128@lssproto_T:
  0023c	33 c0		 xor	 eax, eax
  0023e	eb 05		 jmp	 SHORT $LN129@lssproto_T
$LN127@lssproto_T:
  00240	1b c0		 sbb	 eax, eax
  00242	83 c8 01	 or	 eax, 1
$LN129@lssproto_T:
  00245	56		 push	 esi
  00246	85 c0		 test	 eax, eax
  00248	0f 85 09 02 00
	00		 jne	 $LN14@lssproto_T

; 19180: 			char buf1[256];
; 19181: 			int objno = -1, showno = -1;
; 19182: 			if (pActMenuWnd4 == NULL) {

  0024e	39 05 00 00 00
	00		 cmp	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A, eax ; pActMenuWnd4
  00254	75 60		 jne	 SHORT $LN16@lssproto_T

; 19183: 				DeathMenuAction();

  00256	e8 00 00 00 00	 call	 ?DeathMenuAction@@YAXXZ	; DeathMenuAction

; 19184: 				DeathMenuAction2();

  0025b	e8 00 00 00 00	 call	 ?DeathMenuAction2@@YAXXZ ; DeathMenuAction2

; 19185: 				pActMenuWnd4 = MakeWindowDisp(10, 0, 620, 456, 0, -1);

  00260	6a ff		 push	 -1
  00262	6a 00		 push	 0
  00264	68 c8 01 00 00	 push	 456			; 000001c8H
  00269	68 6c 02 00 00	 push	 620			; 0000026cH
  0026e	6a 00		 push	 0
  00270	6a 0a		 push	 10			; 0000000aH
  00272	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp

; 19186: 				InitItem3(325, 230);

  00277	68 e6 00 00 00	 push	 230			; 000000e6H
  0027c	68 45 01 00 00	 push	 325			; 00000145H
  00281	a3 00 00 00 00	 mov	 DWORD PTR ?pActMenuWnd4@@3PAUaction@@A, eax ; pActMenuWnd4
  00286	e8 00 00 00 00	 call	 ?InitItem3@@YAXHH@Z	; InitItem3
  0028b	83 c4 20	 add	 esp, 32			; 00000020H

; 19187: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 19188: 				if (SecondTradeWnd == NULL)

  0028e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A, 0 ; SecondTradeWnd
  00295	75 1f		 jne	 SHORT $LN16@lssproto_T

; 19189: 					SecondTradeWnd = MakeWindowDisp(10, 0, 620, 456, 0, -1);

  00297	6a ff		 push	 -1
  00299	6a 00		 push	 0
  0029b	68 c8 01 00 00	 push	 456			; 000001c8H
  002a0	68 6c 02 00 00	 push	 620			; 0000026cH
  002a5	6a 00		 push	 0
  002a7	6a 0a		 push	 10			; 0000000aH
  002a9	e8 00 00 00 00	 call	 ?MakeWindowDisp@@YAPAUaction@@HHHHHH@Z ; MakeWindowDisp
  002ae	83 c4 18	 add	 esp, 24			; 00000018H
  002b1	a3 00 00 00 00	 mov	 DWORD PTR ?SecondTradeWnd@@3PAUaction@@A, eax ; SecondTradeWnd
$LN16@lssproto_T:

; 19190: #endif
; 19191: 			}
; 19192: 			getStringToken(data, '|', 6, sizeof(buf1) - 1, buf1);

  002b6	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf1$5[ebp]
  002bc	50		 push	 eax
  002bd	68 ff 00 00 00	 push	 255			; 000000ffH
  002c2	6a 06		 push	 6
  002c4	6a 7c		 push	 124			; 0000007cH
  002c6	57		 push	 edi
  002c7	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19193: 			objno = atoi(buf1);

  002cc	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf1$5[ebp]
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 _atoi
  002d8	8b f0		 mov	 esi, eax

; 19194: 			getStringToken(data, '|', 7, sizeof(buf1) - 1, buf1);

  002da	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf1$5[ebp]
  002e0	50		 push	 eax
  002e1	68 ff 00 00 00	 push	 255			; 000000ffH
  002e6	6a 07		 push	 7
  002e8	6a 7c		 push	 124			; 0000007cH
  002ea	57		 push	 edi
  002eb	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19195: 			showno = atoi(buf1);

  002f0	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf1$5[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _atoi

; 19196: 			getStringToken(data, '|', 5, sizeof(buf1) - 1, buf1);

  002fc	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf1$5[ebp]
  00302	50		 push	 eax
  00303	68 ff 00 00 00	 push	 255			; 000000ffH
  00308	6a 05		 push	 5
  0030a	6a 7c		 push	 124			; 0000007cH
  0030c	57		 push	 edi
  0030d	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19197: 
; 19198: 			ItemBuffer[objno].mixFlag = FALSE;
; 19199: 			if (pc.item[objno].useFlag == TRUE) {

  00312	69 c6 7c 01 00
	00		 imul	 eax, esi, 380
  00318	8b ce		 mov	 ecx, esi
  0031a	c1 e1 05	 shl	 ecx, 5
  0031d	83 c4 44	 add	 esp, 68			; 00000044H
  00320	c7 81 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[ecx+28], 0
  0032a	66 83 b8 a0 01
	00 00 01	 cmp	 WORD PTR ?pc@@3UPC@@A[eax+416], 1
  00332	75 10		 jne	 SHORT $LN17@lssproto_T

; 19200: 				ItemBuffer[objno].dragFlag = TRUE;

  00334	c7 81 18 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ItemBuffer@@3PAUITEM_BUFFER@@A[ecx+24], 1

; 19201: 				mouse.itemNo = objno;

  0033e	89 35 48 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, esi
$LN17@lssproto_T:

; 19202: 			}
; 19203: 
; 19204: 			if (!strcmp(buf1, "I")) {	//I

  00344	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01JPJNBJEM@I@
  00349	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf1$5[ebp]
  0034f	90		 npad	 1
$LL130@lssproto_T:
  00350	8a 10		 mov	 dl, BYTE PTR [eax]
  00352	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00354	75 1a		 jne	 SHORT $LN131@lssproto_T
  00356	84 d2		 test	 dl, dl
  00358	74 12		 je	 SHORT $LN132@lssproto_T
  0035a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0035d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00360	75 0e		 jne	 SHORT $LN131@lssproto_T
  00362	83 c0 02	 add	 eax, 2
  00365	83 c1 02	 add	 ecx, 2
  00368	84 d2		 test	 dl, dl
  0036a	75 e4		 jne	 SHORT $LL130@lssproto_T
$LN132@lssproto_T:
  0036c	33 c0		 xor	 eax, eax
  0036e	eb 05		 jmp	 SHORT $LN133@lssproto_T
$LN131@lssproto_T:
  00370	1b c0		 sbb	 eax, eax
  00372	83 c8 01	 or	 eax, 1
$LN133@lssproto_T:
  00375	85 c0		 test	 eax, eax
  00377	0f 84 c0 00 00
	00		 je	 $LN20@lssproto_T

; 19205: 			}
; 19206: 			else {	//P
; 19207: 				tradePetIndex = objno;
; 19208: 				tradePet[0].index = objno;
; 19209: 
; 19210: 				if (pet[objno].useFlag &&  pc.ridePetNo != objno) {

  0037d	69 d6 78 0b 00
	00		 imul	 edx, esi, 2936
  00383	89 35 00 00 00
	00		 mov	 DWORD PTR ?tradePetIndex@@3HA, esi
  00389	89 35 00 00 00
	00		 mov	 DWORD PTR ?tradePet@@3PAUPET@@A, esi
  0038f	66 83 ba 76 00
	00 00 00	 cmp	 WORD PTR ?pet@@3PAUPET@@A[edx+118], 0
  00397	0f 84 a0 00 00
	00		 je	 $LN20@lssproto_T
  0039d	39 35 18 51 00
	00		 cmp	 DWORD PTR ?pc@@3UPC@@A+20760, esi
  003a3	0f 84 94 00 00
	00		 je	 $LN20@lssproto_T

; 19211: 					if (pet[objno].freeName[0] != NULL)

  003a9	80 ba 65 00 00
	00 00		 cmp	 BYTE PTR ?pet@@3PAUPET@@A[edx+101], 0
  003b0	8d 8a 65 00 00
	00		 lea	 ecx, DWORD PTR ?pet@@3PAUPET@@A[edx+101]
  003b6	be 54 00 00 00	 mov	 esi, OFFSET ?tradePet@@3PAUPET@@A+84
  003bb	74 12		 je	 SHORT $LN21@lssproto_T

; 19212: 						strcpy(tradePet[0].name, pet[objno].freeName);

  003bd	2b f1		 sub	 esi, ecx
  003bf	90		 npad	 1
$LL45@lssproto_T:
  003c0	8a 01		 mov	 al, BYTE PTR [ecx]
  003c2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  003c5	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  003c9	84 c0		 test	 al, al
  003cb	75 f3		 jne	 SHORT $LL45@lssproto_T
  003cd	eb 15		 jmp	 SHORT $LN22@lssproto_T
$LN21@lssproto_T:

; 19213: 					else
; 19214: 						strcpy(tradePet[0].name, pet[objno].name);

  003cf	8d 8a 54 00 00
	00		 lea	 ecx, DWORD PTR ?pet@@3PAUPET@@A[edx+84]
  003d5	2b f1		 sub	 esi, ecx
$LL46@lssproto_T:
  003d7	8a 01		 mov	 al, BYTE PTR [ecx]
  003d9	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  003dc	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  003e0	84 c0		 test	 al, al
  003e2	75 f3		 jne	 SHORT $LL46@lssproto_T
$LN22@lssproto_T:

; 19215: 					tradePet[0].level = pet[objno].level;

  003e4	8b 82 20 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+32]

; 19216: 					tradePet[0].atk = pet[objno].atk;
; 19217: 					tradePet[0].def = pet[objno].def;
; 19218: 					tradePet[0].quick = pet[objno].quick;
; 19219: 					tradePet[0].graNo = pet[objno].graNo;
; 19220: 
; 19221: 					showindex[3] = 3;
; 19222: 					DeathAction(pActPet4);

  003ea	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet4@@3PAUaction@@A
  003f0	a3 20 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+32, eax
  003f5	8b 82 24 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+36]
  003fb	a3 24 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+36, eax
  00400	8b 82 28 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+40]
  00406	a3 28 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+40, eax
  0040b	8b 82 2c 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+44]
  00411	a3 2c 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+44, eax
  00416	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?pet@@3PAUPET@@A[edx+4]
  0041c	a3 04 00 00 00	 mov	 DWORD PTR ?tradePet@@3PAUPET@@A+4, eax
  00421	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?showindex@@3PAHA+12, 3
  0042b	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00430	83 c4 04	 add	 esp, 4

; 19223: 					pActPet4 = NULL;

  00433	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet4@@3PAUaction@@A, 0
$LN20@lssproto_T:

; 19224: 				}
; 19225: 			}
; 19226: 
; 19227: 			mouse.itemNo = -1;

  0043d	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1
$LN182@lssproto_T:
  00447	5e		 pop	 esi
$LN43@lssproto_T:
  00448	5f		 pop	 edi

; 19447: 
; 19448: 		}
; 19449: 	}
; 19450: }

  00449	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044c	33 cd		 xor	 ecx, ebp
  0044e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00453	8b e5		 mov	 esp, ebp
  00455	5d		 pop	 ebp
  00456	c3		 ret	 0
$LN14@lssproto_T:

; 19228: 
; 19229: 			return;
; 19230: 		}
; 19231: 
; 19232: 		getStringToken(data, '|', 2, sizeof(buf_sockfd) - 1, buf_sockfd);

  00457	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _buf_sockfd$[ebp]
  0045d	50		 push	 eax
  0045e	6a 7f		 push	 127			; 0000007fH
  00460	6a 02		 push	 2
  00462	6a 7c		 push	 124			; 0000007cH
  00464	57		 push	 edi
  00465	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19233: 		getStringToken(data, '|', 3, sizeof(buf_name) - 1, buf_name);

  0046a	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _buf_name$[ebp]
  00470	50		 push	 eax
  00471	6a 7f		 push	 127			; 0000007fH
  00473	6a 03		 push	 3
  00475	6a 7c		 push	 124			; 0000007cH
  00477	57		 push	 edi
  00478	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19234: 		getStringToken(data, '|', 4, sizeof(trade_kind) - 1, trade_kind);

  0047d	68 00 00 00 00	 push	 OFFSET ?trade_kind@@3PADA
  00482	6a 7f		 push	 127			; 0000007fH
  00484	6a 04		 push	 4
  00486	6a 7c		 push	 124			; 0000007cH
  00488	57		 push	 edi
  00489	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19235: 		getStringToken(data, '|', 5, sizeof(buf_showindex) - 1, buf_showindex);

  0048e	8d 85 7c fa ff
	ff		 lea	 eax, DWORD PTR _buf_showindex$2[ebp]
  00494	50		 push	 eax
  00495	6a 7f		 push	 127			; 0000007fH
  00497	6a 05		 push	 5
  00499	6a 7c		 push	 124			; 0000007cH
  0049b	57		 push	 edi
  0049c	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  004a1	83 c4 50	 add	 esp, 80			; 00000050H

; 19236: 		opp_showindex = atoi(buf_showindex);

  004a4	8d 85 7c fa ff
	ff		 lea	 eax, DWORD PTR _buf_showindex$2[ebp]
  004aa	50		 push	 eax
  004ab	e8 00 00 00 00	 call	 _atoi
  004b0	a3 00 00 00 00	 mov	 DWORD PTR ?opp_showindex@@3HA, eax
  004b5	83 c4 04	 add	 esp, 4

; 19237: 
; 19238: 		if ((strcmp(buf_sockfd, opp_sockfd) != 0) || (strcmp(buf_name, opp_name) != 0))

  004b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?opp_sockfd@@3PADA
  004bd	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _buf_sockfd$[ebp]
$LL134@lssproto_T:
  004c3	8a 10		 mov	 dl, BYTE PTR [eax]
  004c5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  004c7	75 1a		 jne	 SHORT $LN135@lssproto_T
  004c9	84 d2		 test	 dl, dl
  004cb	74 12		 je	 SHORT $LN136@lssproto_T
  004cd	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  004d0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  004d3	75 0e		 jne	 SHORT $LN135@lssproto_T
  004d5	83 c0 02	 add	 eax, 2
  004d8	83 c1 02	 add	 ecx, 2
  004db	84 d2		 test	 dl, dl
  004dd	75 e4		 jne	 SHORT $LL134@lssproto_T
$LN136@lssproto_T:
  004df	33 c0		 xor	 eax, eax
  004e1	eb 05		 jmp	 SHORT $LN137@lssproto_T
$LN135@lssproto_T:
  004e3	1b c0		 sbb	 eax, eax
  004e5	83 c8 01	 or	 eax, 1
$LN137@lssproto_T:
  004e8	85 c0		 test	 eax, eax
  004ea	0f 85 57 ff ff
	ff		 jne	 $LN182@lssproto_T
  004f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?opp_name@@3PADA
  004f5	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _buf_name$[ebp]
  004fb	0f 1f 44 00 00	 npad	 5
$LL138@lssproto_T:
  00500	8a 10		 mov	 dl, BYTE PTR [eax]
  00502	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00504	75 1a		 jne	 SHORT $LN139@lssproto_T
  00506	84 d2		 test	 dl, dl
  00508	74 12		 je	 SHORT $LN140@lssproto_T
  0050a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0050d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00510	75 0e		 jne	 SHORT $LN139@lssproto_T
  00512	83 c0 02	 add	 eax, 2
  00515	83 c1 02	 add	 ecx, 2
  00518	84 d2		 test	 dl, dl
  0051a	75 e4		 jne	 SHORT $LL138@lssproto_T
$LN140@lssproto_T:
  0051c	33 c0		 xor	 eax, eax
  0051e	eb 05		 jmp	 SHORT $LN141@lssproto_T
$LN139@lssproto_T:
  00520	1b c0		 sbb	 eax, eax
  00522	83 c8 01	 or	 eax, 1
$LN141@lssproto_T:
  00525	85 c0		 test	 eax, eax
  00527	0f 85 1a ff ff
	ff		 jne	 $LN182@lssproto_T

; 19239: 			return;
; 19240: 
; 19241: 		if (strcmp(trade_kind, "G") == 0) {

  0052d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01BBODEMC@G@
  00532	b8 00 00 00 00	 mov	 eax, OFFSET ?trade_kind@@3PADA
$LL142@lssproto_T:
  00537	8a 10		 mov	 dl, BYTE PTR [eax]
  00539	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0053b	75 1a		 jne	 SHORT $LN143@lssproto_T
  0053d	84 d2		 test	 dl, dl
  0053f	74 12		 je	 SHORT $LN144@lssproto_T
  00541	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00544	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00547	75 0e		 jne	 SHORT $LN143@lssproto_T
  00549	83 c0 02	 add	 eax, 2
  0054c	83 c1 02	 add	 ecx, 2
  0054f	84 d2		 test	 dl, dl
  00551	75 e4		 jne	 SHORT $LL142@lssproto_T
$LN144@lssproto_T:
  00553	33 c0		 xor	 eax, eax
  00555	eb 05		 jmp	 SHORT $LN145@lssproto_T
$LN143@lssproto_T:
  00557	1b c0		 sbb	 eax, eax
  00559	83 c8 01	 or	 eax, 1
$LN145@lssproto_T:
  0055c	85 c0		 test	 eax, eax
  0055e	0f 85 f4 00 00
	00		 jne	 $LN30@lssproto_T

; 19242: 
; 19243: 			getStringToken(data, '|', 6, sizeof(opp_goldmount) - 1, opp_goldmount);

  00564	68 00 00 00 00	 push	 OFFSET ?opp_goldmount@@3PADA
  00569	68 ff 03 00 00	 push	 1023			; 000003ffH
  0056e	6a 06		 push	 6
  00570	6a 7c		 push	 124			; 0000007cH
  00572	57		 push	 edi
  00573	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19244: 			int mount = atoi(opp_goldmount);

  00578	68 00 00 00 00	 push	 OFFSET ?opp_goldmount@@3PADA
  0057d	e8 00 00 00 00	 call	 _atoi
  00582	83 c4 18	 add	 esp, 24			; 00000018H

; 19245: #ifdef _CHANGETRADERULE		   // (ä¸å¯å¼) Syu ADD äº¤æè§åä¿®è®¢
; 19246: 			if (tradeWndDropGoldGet != 0) {

  00585	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tradeWndDropGoldGet@@3HA, 0
  0058c	0f 84 9a 00 00
	00		 je	 $LN26@lssproto_T

; 19247: 				MenuToggleFlag ^= JOY_CTRL_T;

  00592	81 35 00 00 00
	00 00 00 40 00	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H

; 19248: 				play_se(203, 320, 240);

  0059c	68 f0 00 00 00	 push	 240			; 000000f0H
  005a1	68 40 01 00 00	 push	 320			; 00000140H
  005a6	68 cb 00 00 00	 push	 203			; 000000cbH
  005ab	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 19249: 				sprintf(buf, "W|%s|%s", opp_sockfd, opp_name);

  005b0	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  005b5	68 00 00 00 00	 push	 OFFSET ?opp_sockfd@@3PADA
  005ba	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  005c0	68 00 00 00 00	 push	 OFFSET ??_C@_07BMJINPJG@W?$HM?$CFs?$HM?$CFs@
  005c5	50		 push	 eax
  005c6	e8 00 00 00 00	 call	 _sprintf
  005cb	83 c4 1c	 add	 esp, 28			; 0000001cH

; 19250: 				if (bNewServer)

  005ce	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  005d4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bNewServer@@3HA, 0 ; bNewServer
  005db	50		 push	 eax
  005dc	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  005e2	74 07		 je	 SHORT $LN27@lssproto_T

; 19251: 					lssproto_TD_send(sockfd, buf);

  005e4	e8 00 00 00 00	 call	 ?lssproto_TD_send@@YAXHPAD@Z ; lssproto_TD_send
  005e9	eb 05		 jmp	 SHORT $LN183@lssproto_T
$LN27@lssproto_T:

; 19252: 				else
; 19253: 					old_lssproto_TD_send(sockfd, buf);

  005eb	e8 00 00 00 00	 call	 ?old_lssproto_TD_send@@YAXHPAD@Z ; old_lssproto_TD_send
$LN183@lssproto_T:

; 19254: 				sprintf(buf, "%së¹ì ìì ì¸ ë°©ìì¼ë¡ ê±°ë ê¸ì¡ì ìì íë©´ ìì¤íì´ ê±°ëì°½ì ê°ì ë¡ ë«ìµëë¤ï¼", opp_name);

  005f0	83 c4 08	 add	 esp, 8
  005f3	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  005f9	68 00 00 00 00	 push	 OFFSET ?opp_name@@3PADA
  005fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MMMKPGBO@?$CFs?$LK?q?A?$KE?$LL?s?$MA?$PL?$MA?N?5?$LJ?f?$LN?D?$MA?$LI?$LH?N?5?$LA?E?$LH?$KB?5?$LB?$NN?$LO?W@
  00603	50		 push	 eax
  00604	e8 00 00 00 00	 call	 _sprintf

; 19255: 				StockChatBufferLine(buf, FONT_PAL_RED);

  00609	6a 00		 push	 0
  0060b	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00611	6a 06		 push	 6
  00613	50		 push	 eax
  00614	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine
  00619	83 c4 18	 add	 esp, 24			; 00000018H
  0061c	5e		 pop	 esi
  0061d	5f		 pop	 edi

; 19447: 
; 19448: 		}
; 19449: 	}
; 19450: }

  0061e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00621	33 cd		 xor	 ecx, ebp
  00623	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00628	8b e5		 mov	 esp, ebp
  0062a	5d		 pop	 ebp
  0062b	c3		 ret	 0
$LN26@lssproto_T:

; 19256: 				return;
; 19257: 			}
; 19258: #endif
; 19259: 
; 19260: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 19261: 			//andy_reEdit
; 19262: 			if (mount != -1) {

  0062c	83 f8 ff	 cmp	 eax, -1
  0062f	74 13		 je	 SHORT $LN29@lssproto_T

; 19263: 				tradeList[42].kind = 'G';

  00631	c6 05 f0 81 00
	00 47		 mov	 BYTE PTR ?tradeList@@3PAUtradelist@@A+33264, 71 ; 00000047H

; 19264: 				tradeList[42].data = mount;

  00638	a3 f4 81 00 00	 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A+33268, eax

; 19265: 				tradeWndDropGoldGet = mount;

  0063d	a3 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldGet@@3HA, eax

; 19266: 			}

  00642	eb 14		 jmp	 SHORT $LN30@lssproto_T
$LN29@lssproto_T:

; 19267: 			else {
; 19268: 				tradeList[42].data = 0;

  00644	c7 05 f4 81 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A+33268, 0

; 19269: 				tradeWndDropGoldGet = 0;

  0064e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tradeWndDropGoldGet@@3HA, 0
$LN30@lssproto_T:

; 19270: 			}
; 19271: 			/*
; 19272: 			if( opp_showindex == 3 ) {
; 19273: 			if( mount != -1 ) {
; 19274: 			tradeList[42].kind = 'G' ;
; 19275: 			tradeList[42].data = mount ;
; 19276: 			tradeWndDropGoldGet = mount;
; 19277: 			}else {
; 19278: 			tradeList[42].data = 0;
; 19279: 			tradeWndDropGoldGet = 0;
; 19280: 			}
; 19281: 			}else
; 19282: 			*/
; 19283: 
; 19284: #else
; 19285: 			if (opp_showindex == 1) {
; 19286: 				if (mount != -1) {
; 19287: 					showindex[4] = 2;
; 19288: 					tradeWndDropGoldGet = mount;
; 19289: 				}
; 19290: 				else {
; 19291: 					showindex[4] = 0;
; 19292: 					tradeWndDropGoldGet = 0;
; 19293: 				}
; 19294: 			}
; 19295: 			else if (opp_showindex == 2) {
; 19296: 				if (mount != -1) {
; 19297: 					showindex[5] = 2;
; 19298: 					tradeWndDropGoldGet = mount;
; 19299: 				}
; 19300: 				else {
; 19301: 					showindex[5] = 0;
; 19302: 					tradeWndDropGoldGet = 0;
; 19303: 				}
; 19304: 			}
; 19305: 			else return;
; 19306: #endif
; 19307: 
; 19308: 		}
; 19309: 
; 19310: 		if (strcmp(trade_kind, "I") == 0) {

  00658	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01JPJNBJEM@I@
  0065d	b8 00 00 00 00	 mov	 eax, OFFSET ?trade_kind@@3PADA
$LL146@lssproto_T:
  00662	8a 10		 mov	 dl, BYTE PTR [eax]
  00664	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00666	75 1a		 jne	 SHORT $LN147@lssproto_T
  00668	84 d2		 test	 dl, dl
  0066a	74 12		 je	 SHORT $LN148@lssproto_T
  0066c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0066f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00672	75 0e		 jne	 SHORT $LN147@lssproto_T
  00674	83 c0 02	 add	 eax, 2
  00677	83 c1 02	 add	 ecx, 2
  0067a	84 d2		 test	 dl, dl
  0067c	75 e4		 jne	 SHORT $LL146@lssproto_T
$LN148@lssproto_T:
  0067e	33 c0		 xor	 eax, eax
  00680	eb 05		 jmp	 SHORT $LN149@lssproto_T
$LN147@lssproto_T:
  00682	1b c0		 sbb	 eax, eax
  00684	83 c8 01	 or	 eax, 1
$LN149@lssproto_T:
  00687	85 c0		 test	 eax, eax
  00689	0f 85 15 03 00
	00		 jne	 $LN31@lssproto_T

; 19311: 			char pilenum[256], item_freename[256], itemup[64];
; 19312: 
; 19313: 			getStringToken(data, '|', 6, sizeof(opp_itemgraph) - 1, opp_itemgraph);

  0068f	68 00 00 00 00	 push	 OFFSET ?opp_itemgraph@@3PADA
  00694	68 ff 03 00 00	 push	 1023			; 000003ffH
  00699	6a 06		 push	 6
  0069b	6a 7c		 push	 124			; 0000007cH
  0069d	57		 push	 edi
  0069e	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19314: 
; 19315: 			getStringToken(data, '|', 7, sizeof(opp_itemname) - 1, opp_itemname);

  006a3	68 00 00 00 00	 push	 OFFSET ?opp_itemname@@3PADA
  006a8	68 ff 03 00 00	 push	 1023			; 000003ffH
  006ad	6a 07		 push	 7
  006af	6a 7c		 push	 124			; 0000007cH
  006b1	57		 push	 edi
  006b2	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19316: 			getStringToken(data, '|', 8, sizeof(item_freename) - 1, item_freename);

  006b7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _item_freename$4[ebp]
  006bd	50		 push	 eax
  006be	68 ff 00 00 00	 push	 255			; 000000ffH
  006c3	6a 08		 push	 8
  006c5	6a 7c		 push	 124			; 0000007cH
  006c7	57		 push	 edi
  006c8	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19317: 
; 19318: 			getStringToken(data, '|', 9, sizeof(opp_itemeffect) - 1, opp_itemeffect);

  006cd	68 00 00 00 00	 push	 OFFSET ?opp_itemeffect@@3PADA
  006d2	68 ff 03 00 00	 push	 1023			; 000003ffH
  006d7	6a 09		 push	 9
  006d9	6a 7c		 push	 124			; 0000007cH
  006db	57		 push	 edi
  006dc	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  006e1	83 c4 50	 add	 esp, 80			; 00000050H

; 19319: 			getStringToken(data, '|', 10, sizeof(opp_itemindex) - 1, opp_itemindex);

  006e4	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  006e9	68 ff 03 00 00	 push	 1023			; 000003ffH
  006ee	6a 0a		 push	 10			; 0000000aH
  006f0	6a 7c		 push	 124			; 0000007cH
  006f2	57		 push	 edi
  006f3	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19320: 			getStringToken(data, '|', 11, sizeof(opp_itemdamage) - 1, opp_itemdamage);// æ¾ç¤ºç©åèä¹åº¦

  006f8	68 00 00 00 00	 push	 OFFSET ?opp_itemdamage@@3PADA
  006fd	68 ff 03 00 00	 push	 1023			; 000003ffH
  00702	6a 0b		 push	 11			; 0000000bH
  00704	6a 7c		 push	 124			; 0000007cH
  00706	57		 push	 edi
  00707	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19321: 
; 19322: #ifdef _ITEM_PILENUMS
; 19323: 			getStringToken(data, '|', 12, sizeof(pilenum) - 1, pilenum);//pilenum

  0070c	8d 85 7c f9 ff
	ff		 lea	 eax, DWORD PTR _pilenum$1[ebp]
  00712	50		 push	 eax
  00713	68 ff 00 00 00	 push	 255			; 000000ffH
  00718	6a 0c		 push	 12			; 0000000cH
  0071a	6a 7c		 push	 124			; 0000007cH
  0071c	57		 push	 edi
  0071d	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00722	83 c4 3c	 add	 esp, 60			; 0000003cH

; 19324: #endif
; 19325: 
; 19326: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 19327: 			if (strcmp(opp_itemgraph, "-1") == 0)

  00725	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02PGHGPEOM@?91@
  0072a	b8 00 00 00 00	 mov	 eax, OFFSET ?opp_itemgraph@@3PADA
  0072f	90		 npad	 1
$LL150@lssproto_T:
  00730	8a 10		 mov	 dl, BYTE PTR [eax]
  00732	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00734	75 1a		 jne	 SHORT $LN151@lssproto_T
  00736	84 d2		 test	 dl, dl
  00738	74 12		 je	 SHORT $LN152@lssproto_T
  0073a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0073d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00740	75 0e		 jne	 SHORT $LN151@lssproto_T
  00742	83 c0 02	 add	 eax, 2
  00745	83 c1 02	 add	 ecx, 2
  00748	84 d2		 test	 dl, dl
  0074a	75 e4		 jne	 SHORT $LL150@lssproto_T
$LN152@lssproto_T:
  0074c	33 c0		 xor	 eax, eax
  0074e	eb 05		 jmp	 SHORT $LN153@lssproto_T
$LN151@lssproto_T:
  00750	1b c0		 sbb	 eax, eax
  00752	83 c8 01	 or	 eax, 1
$LN153@lssproto_T:
  00755	85 c0		 test	 eax, eax
  00757	0f 84 ea fc ff
	ff		 je	 $LN182@lssproto_T

; 19328: 				return;
; 19329: 			strcpy(opp_item[atoi(opp_itemindex) - MAX_ITEMSTART].name, makeStringFromEscaped(opp_itemname));

  0075d	68 00 00 00 00	 push	 OFFSET ?opp_itemname@@3PADA
  00762	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  00767	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  0076c	8b f0		 mov	 esi, eax
  0076e	e8 00 00 00 00	 call	 _atoi
  00773	83 e8 09	 sub	 eax, 9
  00776	83 c4 08	 add	 esp, 8
  00779	69 c8 80 07 00
	00		 imul	 ecx, eax, 1920
  0077f	2b ce		 sub	 ecx, esi
  00781	8d 89 00 00 00
	00		 lea	 ecx, DWORD PTR ?opp_item@@3PAUshowitem@@A[ecx]
$LL47@lssproto_T:
  00787	8a 06		 mov	 al, BYTE PTR [esi]
  00789	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0078c	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  00790	84 c0		 test	 al, al
  00792	75 f3		 jne	 SHORT $LL47@lssproto_T

; 19330: 			strcpy(opp_item[atoi(opp_itemindex) - MAX_ITEMSTART].freename, makeStringFromEscaped(item_freename));

  00794	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _item_freename$4[ebp]
  0079a	50		 push	 eax
  0079b	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  007a0	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  007a5	8b f0		 mov	 esi, eax
  007a7	e8 00 00 00 00	 call	 _atoi
  007ac	83 e8 09	 sub	 eax, 9
  007af	83 c4 08	 add	 esp, 8
  007b2	69 c8 80 07 00
	00		 imul	 ecx, eax, 1920
  007b8	2b ce		 sub	 ecx, esi
  007ba	8d 89 80 00 00
	00		 lea	 ecx, DWORD PTR ?opp_item@@3PAUshowitem@@A[ecx+128]
$LL48@lssproto_T:
  007c0	8a 06		 mov	 al, BYTE PTR [esi]
  007c2	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  007c5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  007c9	84 c0		 test	 al, al
  007cb	75 f3		 jne	 SHORT $LL48@lssproto_T

; 19331: 			strcpy(opp_item[atoi(opp_itemindex) - MAX_ITEMSTART].graph, opp_itemgraph);

  007cd	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  007d2	be 00 00 00 00	 mov	 esi, OFFSET ?opp_itemgraph@@3PADA
  007d7	e8 00 00 00 00	 call	 _atoi
  007dc	83 e8 09	 sub	 eax, 9
  007df	83 c4 04	 add	 esp, 4
  007e2	69 c0 80 07 00
	00		 imul	 eax, eax, 1920
  007e8	2b c6		 sub	 eax, esi
  007ea	8d 88 80 01 00
	00		 lea	 ecx, DWORD PTR ?opp_item@@3PAUshowitem@@A[eax+384]
$LL49@lssproto_T:
  007f0	8a 06		 mov	 al, BYTE PTR [esi]
  007f2	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  007f5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  007f9	84 c0		 test	 al, al
  007fb	75 f3		 jne	 SHORT $LL49@lssproto_T

; 19332: 			strcpy(opp_item[atoi(opp_itemindex) - MAX_ITEMSTART].effect, makeStringFromEscaped(opp_itemeffect));

  007fd	68 00 00 00 00	 push	 OFFSET ?opp_itemeffect@@3PADA
  00802	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  00807	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  0080c	8b f0		 mov	 esi, eax
  0080e	e8 00 00 00 00	 call	 _atoi
  00813	83 e8 09	 sub	 eax, 9
  00816	83 c4 08	 add	 esp, 8
  00819	69 c8 80 07 00
	00		 imul	 ecx, eax, 1920
  0081f	2b ce		 sub	 ecx, esi
  00821	8d 89 00 02 00
	00		 lea	 ecx, DWORD PTR ?opp_item@@3PAUshowitem@@A[ecx+512]
$LL50@lssproto_T:
  00827	8a 06		 mov	 al, BYTE PTR [esi]
  00829	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0082c	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  00830	84 c0		 test	 al, al
  00832	75 f3		 jne	 SHORT $LL50@lssproto_T

; 19333: 			strcpy(opp_item[atoi(opp_itemindex) - MAX_ITEMSTART].itemindex, opp_itemindex);

  00834	be 00 00 00 00	 mov	 esi, OFFSET ?opp_itemindex@@3PADA
  00839	56		 push	 esi
  0083a	e8 00 00 00 00	 call	 _atoi
  0083f	83 e8 09	 sub	 eax, 9
  00842	83 c4 04	 add	 esp, 4
  00845	69 c0 80 07 00
	00		 imul	 eax, eax, 1920
  0084b	2b c6		 sub	 eax, esi
  0084d	8d 88 80 06 00
	00		 lea	 ecx, DWORD PTR ?opp_item@@3PAUshowitem@@A[eax+1664]
$LL51@lssproto_T:
  00853	8a 06		 mov	 al, BYTE PTR [esi]
  00855	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00858	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  0085c	84 c0		 test	 al, al
  0085e	75 f3		 jne	 SHORT $LL51@lssproto_T

; 19334: 			strcpy(opp_item[atoi(opp_itemindex) - MAX_ITEMSTART].damage, makeStringFromEscaped(opp_itemdamage));

  00860	68 00 00 00 00	 push	 OFFSET ?opp_itemdamage@@3PADA
  00865	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  0086a	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  0086f	8b f0		 mov	 esi, eax
  00871	e8 00 00 00 00	 call	 _atoi
  00876	83 e8 09	 sub	 eax, 9
  00879	83 c4 08	 add	 esp, 8
  0087c	69 c8 80 07 00
	00		 imul	 ecx, eax, 1920
  00882	2b ce		 sub	 ecx, esi
  00884	8d 89 00 07 00
	00		 lea	 ecx, DWORD PTR ?opp_item@@3PAUshowitem@@A[ecx+1792]
  0088a	66 0f 1f 44 00
	00		 npad	 6
$LL52@lssproto_T:
  00890	8a 06		 mov	 al, BYTE PTR [esi]
  00892	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00895	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  00899	84 c0		 test	 al, al
  0089b	75 f3		 jne	 SHORT $LL52@lssproto_T

; 19335: 
; 19336: 			tradeList[atoi(opp_itemindex) - MAX_ITEMSTART + 22].kind = 'I';

  0089d	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  008a2	e8 00 00 00 00	 call	 _atoi
  008a7	69 c0 18 03 00
	00		 imul	 eax, eax, 792

; 19337: 			tradeList[atoi(opp_itemindex) - MAX_ITEMSTART + 22].data = atoi(opp_itemindex);

  008ad	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  008b2	c6 80 38 28 00
	00 49		 mov	 BYTE PTR ?tradeList@@3PAUtradelist@@A[eax+10296], 73 ; 00000049H
  008b9	e8 00 00 00 00	 call	 _atoi
  008be	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  008c3	8b f0		 mov	 esi, eax
  008c5	e8 00 00 00 00	 call	 _atoi
  008ca	69 c8 18 03 00
	00		 imul	 ecx, eax, 792

; 19338: 			strcpy(tradeList[atoi(opp_itemindex) - MAX_ITEMSTART + 22].name, makeStringFromEscaped(opp_itemname));

  008d0	68 00 00 00 00	 push	 OFFSET ?opp_itemname@@3PADA
  008d5	89 b1 3c 28 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+10300], esi
  008db	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  008e0	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  008e5	8b f0		 mov	 esi, eax
  008e7	e8 00 00 00 00	 call	 _atoi
  008ec	69 c8 18 03 00
	00		 imul	 ecx, eax, 792
  008f2	83 c4 14	 add	 esp, 20			; 00000014H
  008f5	2b ce		 sub	 ecx, esi
  008f7	8d 89 40 28 00
	00		 lea	 ecx, DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+10304]
  008fd	0f 1f 00	 npad	 3
$LL53@lssproto_T:
  00900	8a 06		 mov	 al, BYTE PTR [esi]
  00902	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00905	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  00909	84 c0		 test	 al, al
  0090b	75 f3		 jne	 SHORT $LL53@lssproto_T

; 19339: 
; 19340: 			strcpy(tradeList[atoi(opp_itemindex) - MAX_ITEMSTART + 22].freename, makeStringFromEscaped(item_freename));

  0090d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _item_freename$4[ebp]
  00913	50		 push	 eax
  00914	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  00919	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  0091e	8b f0		 mov	 esi, eax
  00920	e8 00 00 00 00	 call	 _atoi
  00925	69 c8 18 03 00
	00		 imul	 ecx, eax, 792
  0092b	83 c4 08	 add	 esp, 8
  0092e	2b ce		 sub	 ecx, esi
  00930	8d 89 40 2a 00
	00		 lea	 ecx, DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+10816]
$LL54@lssproto_T:
  00936	8a 06		 mov	 al, BYTE PTR [esi]
  00938	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0093b	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  0093f	84 c0		 test	 al, al
  00941	75 f3		 jne	 SHORT $LL54@lssproto_T

; 19341: 
; 19342: 			strcpy(tradeList[atoi(opp_itemindex) - MAX_ITEMSTART + 22].damage, makeStringFromEscaped(opp_itemdamage));

  00943	68 00 00 00 00	 push	 OFFSET ?opp_itemdamage@@3PADA
  00948	e8 00 00 00 00	 call	 ?makeStringFromEscaped@@YAPADPAD@Z ; makeStringFromEscaped
  0094d	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  00952	8b f0		 mov	 esi, eax
  00954	e8 00 00 00 00	 call	 _atoi
  00959	69 c8 18 03 00
	00		 imul	 ecx, eax, 792
  0095f	83 c4 08	 add	 esp, 8
  00962	2b ce		 sub	 ecx, esi
  00964	8d 89 40 29 00
	00		 lea	 ecx, DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+10560]
  0096a	66 0f 1f 44 00
	00		 npad	 6
$LL55@lssproto_T:
  00970	8a 06		 mov	 al, BYTE PTR [esi]
  00972	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00975	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  00979	84 c0		 test	 al, al
  0097b	75 f3		 jne	 SHORT $LL55@lssproto_T

; 19343: #ifdef _ITEM_PILENUMS
; 19344: 			tradeList[atoi(opp_itemindex) - MAX_ITEMSTART + 22].pilenum = atoi(pilenum);

  0097d	8d 85 7c f9 ff
	ff		 lea	 eax, DWORD PTR _pilenum$1[ebp]
  00983	50		 push	 eax
  00984	e8 00 00 00 00	 call	 _atoi
  00989	68 00 00 00 00	 push	 OFFSET ?opp_itemindex@@3PADA
  0098e	8b f0		 mov	 esi, eax
  00990	e8 00 00 00 00	 call	 _atoi
  00995	83 c4 08	 add	 esp, 8
  00998	69 c8 18 03 00
	00		 imul	 ecx, eax, 792
  0099e	89 b1 48 2b 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+11080], esi
$LN31@lssproto_T:

; 19345: #endif
; 19346: #endif  //_TRADESYSTEM2
; 19347: 		}
; 19348: 
; 19349: 		if (strcmp(trade_kind, "P") == 0) {

  009a4	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01EJNLAFE@P@
  009a9	b8 00 00 00 00	 mov	 eax, OFFSET ?trade_kind@@3PADA
  009ae	66 90		 npad	 2
$LL154@lssproto_T:
  009b0	8a 10		 mov	 dl, BYTE PTR [eax]
  009b2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  009b4	75 1a		 jne	 SHORT $LN155@lssproto_T
  009b6	84 d2		 test	 dl, dl
  009b8	74 12		 je	 SHORT $LN156@lssproto_T
  009ba	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  009bd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  009c0	75 0e		 jne	 SHORT $LN155@lssproto_T
  009c2	83 c0 02	 add	 eax, 2
  009c5	83 c1 02	 add	 ecx, 2
  009c8	84 d2		 test	 dl, dl
  009ca	75 e4		 jne	 SHORT $LL154@lssproto_T
$LN156@lssproto_T:
  009cc	33 c0		 xor	 eax, eax
  009ce	eb 05		 jmp	 SHORT $LN157@lssproto_T
$LN155@lssproto_T:
  009d0	1b c0		 sbb	 eax, eax
  009d2	83 c8 01	 or	 eax, 1
$LN157@lssproto_T:
  009d5	85 c0		 test	 eax, eax
  009d7	0f 85 a3 04 00
	00		 jne	 $LN35@lssproto_T

; 19350: #ifdef _PET_ITEM
; 19351: 			int		iItemNo;
; 19352: 			char	szData[256];
; 19353: #endif
; 19354: 
; 19355: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 19356: 			getStringToken(data, '|', 12, sizeof(opp_index) - 1, opp_index);

  009dd	53		 push	 ebx
  009de	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _opp_index$[ebp]
  009e4	50		 push	 eax
  009e5	6a 7f		 push	 127			; 0000007fH
  009e7	6a 0c		 push	 12			; 0000000cH
  009e9	6a 7c		 push	 124			; 0000007cH
  009eb	57		 push	 edi
  009ec	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19357: 			index = atoi(opp_index);

  009f1	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _opp_index$[ebp]
  009f7	50		 push	 eax
  009f8	e8 00 00 00 00	 call	 _atoi

; 19358: 			getStringToken(data, '|', 6, sizeof(opp_pet[index].opp_petgrano) - 1, opp_pet[index].opp_petgrano);

  009fd	69 d8 14 0d 00
	00		 imul	 ebx, eax, 3348
  00a03	8d 83 00 01 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+256]
  00a09	50		 push	 eax
  00a0a	6a 7f		 push	 127			; 0000007fH
  00a0c	6a 06		 push	 6
  00a0e	6a 7c		 push	 124			; 0000007cH
  00a10	57		 push	 edi
  00a11	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19359: 			getStringToken(data, '|', 7, sizeof(opp_pet[index].opp_petname) - 1, opp_pet[index].opp_petname);

  00a16	8d b3 00 00 00
	00		 lea	 esi, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx]
  00a1c	56		 push	 esi
  00a1d	6a 7f		 push	 127			; 0000007fH
  00a1f	6a 07		 push	 7
  00a21	6a 7c		 push	 124			; 0000007cH
  00a23	57		 push	 edi
  00a24	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00a29	83 c4 40	 add	 esp, 64			; 00000040H

; 19360: 			getStringToken(data, '|', 8, sizeof(opp_pet[index].opp_petlevel) - 1, opp_pet[index].opp_petlevel);

  00a2c	8d 83 80 01 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+384]
  00a32	89 85 68 f9 ff
	ff		 mov	 DWORD PTR tv1865[ebp], eax
  00a38	50		 push	 eax
  00a39	6a 7f		 push	 127			; 0000007fH
  00a3b	6a 08		 push	 8
  00a3d	6a 7c		 push	 124			; 0000007cH
  00a3f	57		 push	 edi
  00a40	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19361: 			getStringToken(data, '|', 9, sizeof(opp_pet[index].opp_petatk) - 1, opp_pet[index].opp_petatk);

  00a45	8d 83 00 02 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+512]
  00a4b	50		 push	 eax
  00a4c	6a 7f		 push	 127			; 0000007fH
  00a4e	6a 09		 push	 9
  00a50	6a 7c		 push	 124			; 0000007cH
  00a52	57		 push	 edi
  00a53	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19362: 			getStringToken(data, '|', 10, sizeof(opp_pet[index].opp_petdef) - 1, opp_pet[index].opp_petdef);

  00a58	8d 83 80 02 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+640]
  00a5e	50		 push	 eax
  00a5f	6a 7f		 push	 127			; 0000007fH
  00a61	6a 0a		 push	 10			; 0000000aH
  00a63	6a 7c		 push	 124			; 0000007cH
  00a65	57		 push	 edi
  00a66	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19363: 			getStringToken(data, '|', 11, sizeof(opp_pet[index].opp_petquick) - 1, opp_pet[index].opp_petquick);

  00a6b	8d 83 00 03 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+768]
  00a71	50		 push	 eax
  00a72	6a 7f		 push	 127			; 0000007fH
  00a74	6a 0b		 push	 11			; 0000000bH
  00a76	6a 7c		 push	 124			; 0000007cH
  00a78	57		 push	 edi
  00a79	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00a7e	83 c4 50	 add	 esp, 80			; 00000050H

; 19364: 			getStringToken(data, '|', 12, sizeof(opp_pet[index].opp_petindex) - 1, opp_pet[index].opp_petindex);

  00a81	8d 83 80 03 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+896]
  00a87	89 85 6c f9 ff
	ff		 mov	 DWORD PTR tv1876[ebp], eax
  00a8d	50		 push	 eax
  00a8e	6a 7f		 push	 127			; 0000007fH
  00a90	6a 0c		 push	 12			; 0000000cH
  00a92	6a 7c		 push	 124			; 0000007cH
  00a94	57		 push	 edi
  00a95	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19365: 			getStringToken(data, '|', 13, sizeof(opp_pet[index].opp_pettrans) - 1, opp_pet[index].opp_pettrans);

  00a9a	8d 83 00 04 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+1024]
  00aa0	50		 push	 eax
  00aa1	6a 7f		 push	 127			; 0000007fH
  00aa3	6a 0d		 push	 13			; 0000000dH
  00aa5	6a 7c		 push	 124			; 0000007cH
  00aa7	57		 push	 edi
  00aa8	89 85 64 f9 ff
	ff		 mov	 DWORD PTR tv1864[ebp], eax
  00aae	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19366: 			getStringToken(data, '|', 14, sizeof(opp_pet[index].opp_petshowhp) - 1, opp_pet[index].opp_petshowhp);

  00ab3	8d 83 80 04 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+1152]
  00ab9	50		 push	 eax
  00aba	6a 7f		 push	 127			; 0000007fH
  00abc	6a 0e		 push	 14			; 0000000eH
  00abe	6a 7c		 push	 124			; 0000007cH
  00ac0	57		 push	 edi
  00ac1	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19367: 			getStringToken(data, '|', 15, sizeof(opp_pet[index].opp_petslot) - 1, opp_pet[index].opp_petslot);

  00ac6	8d 83 00 05 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+1280]
  00acc	50		 push	 eax
  00acd	6a 7f		 push	 127			; 0000007fH
  00acf	6a 0f		 push	 15			; 0000000fH
  00ad1	6a 7c		 push	 124			; 0000007cH
  00ad3	57		 push	 edi
  00ad4	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00ad9	83 c4 50	 add	 esp, 80			; 00000050H

; 19368: 			getStringToken(data, '|', 16, sizeof(opp_pet[index].opp_petskill1) - 1, opp_pet[index].opp_petskill1);

  00adc	8d 83 80 05 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+1408]
  00ae2	50		 push	 eax
  00ae3	6a 7f		 push	 127			; 0000007fH
  00ae5	6a 10		 push	 16			; 00000010H
  00ae7	6a 7c		 push	 124			; 0000007cH
  00ae9	57		 push	 edi
  00aea	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19369: 			getStringToken(data, '|', 17, sizeof(opp_pet[index].opp_petskill2) - 1, opp_pet[index].opp_petskill2);

  00aef	8d 83 00 06 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+1536]
  00af5	50		 push	 eax
  00af6	6a 7f		 push	 127			; 0000007fH
  00af8	6a 11		 push	 17			; 00000011H
  00afa	6a 7c		 push	 124			; 0000007cH
  00afc	57		 push	 edi
  00afd	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19370: 			getStringToken(data, '|', 18, sizeof(opp_pet[index].opp_petskill3) - 1, opp_pet[index].opp_petskill3);

  00b02	8d 83 80 06 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+1664]
  00b08	50		 push	 eax
  00b09	6a 7f		 push	 127			; 0000007fH
  00b0b	6a 12		 push	 18			; 00000012H
  00b0d	6a 7c		 push	 124			; 0000007cH
  00b0f	57		 push	 edi
  00b10	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19371: 			getStringToken(data, '|', 19, sizeof(opp_pet[index].opp_petskill4) - 1, opp_pet[index].opp_petskill4);

  00b15	8d 83 00 07 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+1792]
  00b1b	50		 push	 eax
  00b1c	6a 7f		 push	 127			; 0000007fH
  00b1e	6a 13		 push	 19			; 00000013H
  00b20	6a 7c		 push	 124			; 0000007cH
  00b22	57		 push	 edi
  00b23	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00b28	83 c4 50	 add	 esp, 80			; 00000050H

; 19372: 			getStringToken(data, '|', 20, sizeof(opp_pet[index].opp_petskill5) - 1, opp_pet[index].opp_petskill5);

  00b2b	8d 83 80 07 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+1920]
  00b31	50		 push	 eax
  00b32	6a 7f		 push	 127			; 0000007fH
  00b34	6a 14		 push	 20			; 00000014H
  00b36	6a 7c		 push	 124			; 0000007cH
  00b38	57		 push	 edi
  00b39	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19373: 			getStringToken(data, '|', 21, sizeof(opp_pet[index].opp_petskill6) - 1, opp_pet[index].opp_petskill6);

  00b3e	8d 83 00 08 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+2048]
  00b44	50		 push	 eax
  00b45	6a 7f		 push	 127			; 0000007fH
  00b47	6a 15		 push	 21			; 00000015H
  00b49	6a 7c		 push	 124			; 0000007cH
  00b4b	57		 push	 edi
  00b4c	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19374: 			getStringToken(data, '|', 22, sizeof(opp_pet[index].opp_petskill7) - 1, opp_pet[index].opp_petskill7);

  00b51	8d 83 80 08 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+2176]
  00b57	50		 push	 eax
  00b58	6a 7f		 push	 127			; 0000007fH
  00b5a	6a 16		 push	 22			; 00000016H
  00b5c	6a 7c		 push	 124			; 0000007cH
  00b5e	57		 push	 edi
  00b5f	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19375: 			getStringToken(data, '|', 23, sizeof(realname), realname);

  00b64	8d 85 fc fa ff
	ff		 lea	 eax, DWORD PTR _realname$[ebp]
  00b6a	50		 push	 eax
  00b6b	68 00 01 00 00	 push	 256			; 00000100H
  00b70	6a 17		 push	 23			; 00000017H
  00b72	6a 7c		 push	 124			; 0000007cH
  00b74	57		 push	 edi
  00b75	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00b7a	83 c4 50	 add	 esp, 80			; 00000050H

; 19376: 			getStringToken(data, '|', 24, sizeof(freename), freename);

  00b7d	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _freename$[ebp]
  00b83	50		 push	 eax
  00b84	68 00 01 00 00	 push	 256			; 00000100H
  00b89	6a 18		 push	 24			; 00000018H
  00b8b	6a 7c		 push	 124			; 0000007cH
  00b8d	57		 push	 edi
  00b8e	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19377: #ifdef _SHOW_FUSION
; 19378: 			getStringToken(data, '|', 25, sizeof(opp_pet[index].opp_fusion) - 1, opp_pet[index].opp_fusion);

  00b93	8d 83 00 09 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[ebx+2304]
  00b99	50		 push	 eax
  00b9a	6a 3f		 push	 63			; 0000003fH
  00b9c	6a 19		 push	 25			; 00000019H
  00b9e	6a 7c		 push	 124			; 0000007cH
  00ba0	57		 push	 edi
  00ba1	89 85 60 f9 ff
	ff		 mov	 DWORD PTR tv1863[ebp], eax
  00ba7	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00bac	83 c4 28	 add	 esp, 40			; 00000028H

; 19379: #endif
; 19380: 			strcpy(opp_pet[index].opp_petname, realname);

  00baf	8d 8d fc fa ff
	ff		 lea	 ecx, DWORD PTR _realname$[ebp]
  00bb5	8b c1		 mov	 eax, ecx
  00bb7	2b f0		 sub	 esi, eax
  00bb9	0f 1f 80 00 00
	00 00		 npad	 7
$LL56@lssproto_T:
  00bc0	8a 01		 mov	 al, BYTE PTR [ecx]
  00bc2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00bc5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  00bc9	84 c0		 test	 al, al
  00bcb	75 f3		 jne	 SHORT $LL56@lssproto_T

; 19381: 			strcpy(opp_pet[index].opp_petfreename, freename);

  00bcd	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _freename$[ebp]
  00bd3	8b c3		 mov	 eax, ebx
  00bd5	8b d1		 mov	 edx, ecx
  00bd7	2b c2		 sub	 eax, edx
  00bd9	8d 90 80 00 00
	00		 lea	 edx, DWORD PTR ?opp_pet@@3PAUshowpet@@A[eax+128]
  00bdf	90		 npad	 1
$LL57@lssproto_T:
  00be0	8a 01		 mov	 al, BYTE PTR [ecx]
  00be2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00be5	88 44 11 ff	 mov	 BYTE PTR [ecx+edx-1], al
  00be9	84 c0		 test	 al, al
  00beb	75 f3		 jne	 SHORT $LL57@lssproto_T

; 19382: #endif
; 19383: 
; 19384: #ifdef _PET_ITEM
; 19385: 			for (int i = 0;; i++) {
; 19386: 				if (getStringToken(data, '|', 26 + i * 6, sizeof(szData), szData))

  00bed	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szData$3[ebp]
  00bf3	c7 85 70 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00bfd	50		 push	 eax
  00bfe	68 00 01 00 00	 push	 256			; 00000100H
  00c03	6a 1a		 push	 26			; 0000001aH
  00c05	6a 7c		 push	 124			; 0000007cH
  00c07	57		 push	 edi
  00c08	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00c0d	83 c4 14	 add	 esp, 20			; 00000014H
  00c10	85 c0		 test	 eax, eax
  00c12	0f 85 0b 01 00
	00		 jne	 $LN76@lssproto_T
  00c18	89 85 74 f9 ff
	ff		 mov	 DWORD PTR tv1878[ebp], eax
  00c1e	66 90		 npad	 2
$LL4@lssproto_T:

; 19387: 					break;
; 19388: 				iItemNo = atoi(szData);

  00c20	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szData$3[ebp]
  00c26	50		 push	 eax
  00c27	e8 00 00 00 00	 call	 _atoi

; 19389: 				getStringToken(data, '|', 27 + i * 6, sizeof(opp_pet[index].oPetItemInfo[iItemNo].name), opp_pet[index].oPetItemInfo[iItemNo].name);

  00c2c	69 f0 8c 00 00
	00		 imul	 esi, eax, 140
  00c32	03 f3		 add	 esi, ebx
  00c34	8d 86 9d 09 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[esi+2461]
  00c3a	50		 push	 eax
  00c3b	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR tv1878[ebp]
  00c41	6a 1d		 push	 29			; 0000001dH
  00c43	83 c0 1b	 add	 eax, 27			; 0000001bH
  00c46	50		 push	 eax
  00c47	6a 7c		 push	 124			; 0000007cH
  00c49	57		 push	 edi
  00c4a	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19390: 				getStringToken(data, '|', 28 + i * 6, sizeof(opp_pet[index].oPetItemInfo[iItemNo].memo), opp_pet[index].oPetItemInfo[iItemNo].memo);

  00c4f	8d 86 48 09 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[esi+2376]
  00c55	50		 push	 eax
  00c56	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR tv1878[ebp]
  00c5c	6a 55		 push	 85			; 00000055H
  00c5e	83 c0 1c	 add	 eax, 28			; 0000001cH
  00c61	50		 push	 eax
  00c62	6a 7c		 push	 124			; 0000007cH
  00c64	57		 push	 edi
  00c65	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19391: 				getStringToken(data, '|', 29 + i * 6, sizeof(opp_pet[index].oPetItemInfo[iItemNo].damage), opp_pet[index].oPetItemInfo[iItemNo].damage);

  00c6a	8d 86 ba 09 00
	00		 lea	 eax, DWORD PTR ?opp_pet@@3PAUshowpet@@A[esi+2490]
  00c70	50		 push	 eax
  00c71	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR tv1878[ebp]
  00c77	6a 10		 push	 16			; 00000010H
  00c79	83 c0 1d	 add	 eax, 29			; 0000001dH
  00c7c	50		 push	 eax
  00c7d	6a 7c		 push	 124			; 0000007cH
  00c7f	57		 push	 edi
  00c80	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00c85	83 c4 40	 add	 esp, 64			; 00000040H

; 19392: 				getStringToken(data, '|', 30 + i * 6, sizeof(szData), szData);

  00c88	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szData$3[ebp]
  00c8e	50		 push	 eax
  00c8f	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR tv1878[ebp]
  00c95	68 00 01 00 00	 push	 256			; 00000100H
  00c9a	83 c0 1e	 add	 eax, 30			; 0000001eH
  00c9d	50		 push	 eax
  00c9e	6a 7c		 push	 124			; 0000007cH
  00ca0	57		 push	 edi
  00ca1	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19393: 				opp_pet[index].oPetItemInfo[iItemNo].color = atoi(szData);

  00ca6	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szData$3[ebp]
  00cac	50		 push	 eax
  00cad	e8 00 00 00 00	 call	 _atoi
  00cb2	89 86 44 09 00
	00		 mov	 DWORD PTR ?opp_pet@@3PAUshowpet@@A[esi+2372], eax

; 19394: 				getStringToken(data, '|', 31 + i * 6, sizeof(szData), szData);

  00cb8	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szData$3[ebp]
  00cbe	50		 push	 eax
  00cbf	8b 85 74 f9 ff
	ff		 mov	 eax, DWORD PTR tv1878[ebp]
  00cc5	68 00 01 00 00	 push	 256			; 00000100H
  00cca	83 c0 1f	 add	 eax, 31			; 0000001fH
  00ccd	50		 push	 eax
  00cce	6a 7c		 push	 124			; 0000007cH
  00cd0	57		 push	 edi
  00cd1	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19395: 				opp_pet[index].oPetItemInfo[iItemNo].bmpNo = atoi(szData);

  00cd6	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szData$3[ebp]
  00cdc	50		 push	 eax
  00cdd	e8 00 00 00 00	 call	 _atoi
  00ce2	89 86 40 09 00
	00		 mov	 DWORD PTR ?opp_pet@@3PAUshowpet@@A[esi+2368], eax
  00ce8	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szData$3[ebp]
  00cee	8b 85 70 f9 ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00cf4	40		 inc	 eax
  00cf5	89 85 70 f9 ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00cfb	51		 push	 ecx
  00cfc	68 00 01 00 00	 push	 256			; 00000100H
  00d01	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00d04	03 c0		 add	 eax, eax
  00d06	89 85 74 f9 ff
	ff		 mov	 DWORD PTR tv1878[ebp], eax
  00d0c	83 c0 1a	 add	 eax, 26			; 0000001aH
  00d0f	50		 push	 eax
  00d10	6a 7c		 push	 124			; 0000007cH
  00d12	57		 push	 edi
  00d13	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00d18	83 c4 44	 add	 esp, 68			; 00000044H
  00d1b	85 c0		 test	 eax, eax
  00d1d	0f 84 fd fe ff
	ff		 je	 $LL4@lssproto_T
$LN76@lssproto_T:

; 19396: 			}
; 19397: #endif
; 19398: 
; 19399: 
; 19400: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 19401: 			tradeList[atoi(opp_pet[index].opp_petindex) + 37].data = atoi(opp_pet[index].opp_petindex);

  00d23	8b 9d 6c f9 ff
	ff		 mov	 ebx, DWORD PTR tv1876[ebp]
  00d29	53		 push	 ebx
  00d2a	e8 00 00 00 00	 call	 _atoi
  00d2f	53		 push	 ebx
  00d30	8b f0		 mov	 esi, eax
  00d32	e8 00 00 00 00	 call	 _atoi
  00d37	69 c8 18 03 00
	00		 imul	 ecx, eax, 792

; 19402: 			tradeList[atoi(opp_pet[index].opp_petindex) + 37].kind = 'P';

  00d3d	53		 push	 ebx
  00d3e	89 b1 7c 72 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+29308], esi
  00d44	e8 00 00 00 00	 call	 _atoi
  00d49	69 c0 18 03 00
	00		 imul	 eax, eax, 792

; 19403: 			strcpy(tradeList[atoi(opp_pet[index].opp_petindex) + 37].freename, freename);

  00d4f	8d b5 fc fb ff
	ff		 lea	 esi, DWORD PTR _freename$[ebp]
  00d55	53		 push	 ebx
  00d56	c6 80 78 72 00
	00 50		 mov	 BYTE PTR ?tradeList@@3PAUtradelist@@A[eax+29304], 80 ; 00000050H
  00d5d	e8 00 00 00 00	 call	 _atoi
  00d62	69 c0 18 03 00
	00		 imul	 eax, eax, 792
  00d68	8b ce		 mov	 ecx, esi
  00d6a	83 c4 10	 add	 esp, 16			; 00000010H
  00d6d	2b c1		 sub	 eax, ecx
  00d6f	8d 88 80 74 00
	00		 lea	 ecx, DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+29824]
$LL58@lssproto_T:
  00d75	8a 06		 mov	 al, BYTE PTR [esi]
  00d77	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00d7a	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  00d7e	84 c0		 test	 al, al
  00d80	75 f3		 jne	 SHORT $LL58@lssproto_T

; 19404: 			strcpy(tradeList[atoi(opp_pet[index].opp_petindex) + 37].name, realname);

  00d82	53		 push	 ebx
  00d83	8d b5 fc fa ff
	ff		 lea	 esi, DWORD PTR _realname$[ebp]
  00d89	e8 00 00 00 00	 call	 _atoi
  00d8e	69 c0 18 03 00
	00		 imul	 eax, eax, 792
  00d94	8b ce		 mov	 ecx, esi
  00d96	83 c4 04	 add	 esp, 4
  00d99	2b c1		 sub	 eax, ecx
  00d9b	8d 88 80 72 00
	00		 lea	 ecx, DWORD PTR ?tradeList@@3PAUtradelist@@A[eax+29312]
$LL59@lssproto_T:
  00da1	8a 06		 mov	 al, BYTE PTR [esi]
  00da3	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00da6	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  00daa	84 c0		 test	 al, al
  00dac	75 f3		 jne	 SHORT $LL59@lssproto_T

; 19405: 			tradeList[atoi(opp_pet[index].opp_petindex) + 37].level = atoi(opp_pet[index].opp_petlevel);

  00dae	ff b5 68 f9 ff
	ff		 push	 DWORD PTR tv1865[ebp]
  00db4	e8 00 00 00 00	 call	 _atoi
  00db9	53		 push	 ebx
  00dba	8b f0		 mov	 esi, eax
  00dbc	e8 00 00 00 00	 call	 _atoi

; 19406: 			tradeList[atoi(opp_pet[index].opp_petindex) + 37].trns = atoi(opp_pet[index].opp_pettrans);

  00dc1	ff b5 64 f9 ff
	ff		 push	 DWORD PTR tv1864[ebp]
  00dc7	69 c8 18 03 00
	00		 imul	 ecx, eax, 792
  00dcd	89 b1 80 75 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+30080], esi
  00dd3	e8 00 00 00 00	 call	 _atoi
  00dd8	53		 push	 ebx
  00dd9	8b f0		 mov	 esi, eax
  00ddb	e8 00 00 00 00	 call	 _atoi

; 19407: #ifdef _SHOW_FUSION
; 19408: 			tradeList[atoi(opp_pet[index].opp_petindex) + 37].fusion = atoi(opp_pet[index].opp_fusion);

  00de0	ff b5 60 f9 ff
	ff		 push	 DWORD PTR tv1863[ebp]
  00de6	69 c8 18 03 00
	00		 imul	 ecx, eax, 792
  00dec	89 b1 84 75 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+30084], esi
  00df2	e8 00 00 00 00	 call	 _atoi
  00df7	53		 push	 ebx
  00df8	8b f0		 mov	 esi, eax
  00dfa	e8 00 00 00 00	 call	 _atoi
  00dff	69 c8 18 03 00
	00		 imul	 ecx, eax, 792
  00e05	83 c4 18	 add	 esp, 24			; 00000018H

; 19409: #endif
; 19410: #endif
; 19411: 
; 19412: 			if (opp_showindex == 3) {

  00e08	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?opp_showindex@@3HA, 3
  00e0f	5b		 pop	 ebx
  00e10	89 b1 8c 75 00
	00		 mov	 DWORD PTR ?tradeList@@3PAUtradelist@@A[ecx+30092], esi
  00e16	75 68		 jne	 SHORT $LN35@lssproto_T

; 19413: #ifdef _TRADESYSTEM2	// (ä¸å¯å¼) Syu ADD æ°äº¤æç³»ç»
; 19414: 				if (strcmp(opp_pet[atoi(opp_index)].opp_petgrano, "-1") == 0) {

  00e18	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _opp_index$[ebp]
  00e1e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_02PGHGPEOM@?91@
  00e23	50		 push	 eax
  00e24	e8 00 00 00 00	 call	 _atoi
  00e29	69 c0 14 0d 00
	00		 imul	 eax, eax, 3348
  00e2f	83 c4 04	 add	 esp, 4
  00e32	05 00 01 00 00	 add	 eax, OFFSET ?opp_pet@@3PAUshowpet@@A+256
$LL158@lssproto_T:
  00e37	8a 08		 mov	 cl, BYTE PTR [eax]
  00e39	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00e3b	75 1a		 jne	 SHORT $LN159@lssproto_T
  00e3d	84 c9		 test	 cl, cl
  00e3f	74 12		 je	 SHORT $LN160@lssproto_T
  00e41	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00e44	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00e47	75 0e		 jne	 SHORT $LN159@lssproto_T
  00e49	83 c0 02	 add	 eax, 2
  00e4c	83 c6 02	 add	 esi, 2
  00e4f	84 c9		 test	 cl, cl
  00e51	75 e4		 jne	 SHORT $LL158@lssproto_T
$LN160@lssproto_T:
  00e53	33 c0		 xor	 eax, eax
  00e55	eb 05		 jmp	 SHORT $LN161@lssproto_T
$LN159@lssproto_T:
  00e57	1b c0		 sbb	 eax, eax
  00e59	83 c8 01	 or	 eax, 1
$LN161@lssproto_T:

; 19415: #endif
; 19416: 					showindex[6] = 0;
; 19417: 				}
; 19418: 				else {
; 19419: 					showindex[6] = 3;
; 19420: 				}
; 19421: 				DeathAction(pActPet5);

  00e5c	ff 35 00 00 00
	00		 push	 DWORD PTR ?pActPet5@@3PAUaction@@A
  00e62	f7 d8		 neg	 eax
  00e64	1b c0		 sbb	 eax, eax
  00e66	83 e0 03	 and	 eax, 3
  00e69	a3 18 00 00 00	 mov	 DWORD PTR ?showindex@@3PAHA+24, eax
  00e6e	e8 00 00 00 00	 call	 ?DeathAction@@YAXPAUaction@@@Z ; DeathAction
  00e73	83 c4 04	 add	 esp, 4

; 19422: 				pActPet5 = NULL;

  00e76	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pActPet5@@3PAUaction@@A, 0
$LN35@lssproto_T:

; 19423: 			}
; 19424: 		}
; 19425: 
; 19426: 		// shan trade(DoubleCheck) begin
; 19427: 		if (strcmp(trade_kind, "C") == 0) {

  00e80	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01GFHCPBMG@C@
  00e85	b8 00 00 00 00	 mov	 eax, OFFSET ?trade_kind@@3PADA
  00e8a	66 0f 1f 44 00
	00		 npad	 6
$LL162@lssproto_T:
  00e90	8a 10		 mov	 dl, BYTE PTR [eax]
  00e92	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00e94	75 1a		 jne	 SHORT $LN163@lssproto_T
  00e96	84 d2		 test	 dl, dl
  00e98	74 12		 je	 SHORT $LN164@lssproto_T
  00e9a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00e9d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00ea0	75 0e		 jne	 SHORT $LN163@lssproto_T
  00ea2	83 c0 02	 add	 eax, 2
  00ea5	83 c1 02	 add	 ecx, 2
  00ea8	84 d2		 test	 dl, dl
  00eaa	75 e4		 jne	 SHORT $LL162@lssproto_T
$LN164@lssproto_T:
  00eac	33 c0		 xor	 eax, eax
  00eae	eb 05		 jmp	 SHORT $LN165@lssproto_T
$LN163@lssproto_T:
  00eb0	1b c0		 sbb	 eax, eax
  00eb2	83 c8 01	 or	 eax, 1
$LN165@lssproto_T:
  00eb5	85 c0		 test	 eax, eax
  00eb7	75 26		 jne	 SHORT $LN40@lssproto_T

; 19428: 			if (pc.trade_confirm == 1) pc.trade_confirm = 3;

  00eb9	a1 80 a1 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+41344
  00ebe	83 f8 01	 cmp	 eax, 1
  00ec1	75 0c		 jne	 SHORT $LN39@lssproto_T
  00ec3	c7 05 80 a1 00
	00 03 00 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, 3

; 19429: 			if (pc.trade_confirm == 2)	pc.trade_confirm = 4;

  00ecd	eb 10		 jmp	 SHORT $LN40@lssproto_T
$LN39@lssproto_T:
  00ecf	83 f8 02	 cmp	 eax, 2
  00ed2	b9 04 00 00 00	 mov	 ecx, 4
  00ed7	0f 44 c1	 cmove	 eax, ecx
  00eda	a3 80 a1 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, eax
$LN40@lssproto_T:

; 19430: 		}
; 19431: 		// end
; 19432: 
; 19433: 		if (strcmp(trade_kind, "A") == 0)

  00edf	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01FHEEJDEE@A@
  00ee4	b8 00 00 00 00	 mov	 eax, OFFSET ?trade_kind@@3PADA
  00ee9	0f 1f 80 00 00
	00 00		 npad	 7
$LL166@lssproto_T:
  00ef0	8a 10		 mov	 dl, BYTE PTR [eax]
  00ef2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00ef4	75 1a		 jne	 SHORT $LN167@lssproto_T
  00ef6	84 d2		 test	 dl, dl
  00ef8	74 12		 je	 SHORT $LN168@lssproto_T
  00efa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00efd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00f00	75 0e		 jne	 SHORT $LN167@lssproto_T
  00f02	83 c0 02	 add	 eax, 2
  00f05	83 c1 02	 add	 ecx, 2
  00f08	84 d2		 test	 dl, dl
  00f0a	75 e4		 jne	 SHORT $LL166@lssproto_T
$LN168@lssproto_T:
  00f0c	33 c0		 xor	 eax, eax
  00f0e	eb 05		 jmp	 SHORT $LN169@lssproto_T
$LN167@lssproto_T:
  00f10	1b c0		 sbb	 eax, eax
  00f12	83 c8 01	 or	 eax, 1
$LN169@lssproto_T:
  00f15	85 c0		 test	 eax, eax
  00f17	0f 85 2a f5 ff
	ff		 jne	 $LN182@lssproto_T

; 19434: 			tradeStatus = 2;

  00f1d	b8 02 00 00 00	 mov	 eax, 2
  00f22	5e		 pop	 esi
  00f23	66 a3 00 00 00
	00		 mov	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus
  00f29	5f		 pop	 edi

; 19447: 
; 19448: 		}
; 19449: 	}
; 19450: }

  00f2a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f2d	33 cd		 xor	 ecx, ebp
  00f2f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f34	8b e5		 mov	 esp, ebp
  00f36	5d		 pop	 ebp
  00f37	c3		 ret	 0
$LN11@lssproto_T:

; 19435: 
; 19436: 	}
; 19437: 	else if (strcmp(Head, "W") == 0) {//ì·¨ìäº¤æ

  00f38	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01ELNMCGJD@W@
  00f3d	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _Head$[ebp]
$LL170@lssproto_T:
  00f43	8a 10		 mov	 dl, BYTE PTR [eax]
  00f45	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00f47	75 1a		 jne	 SHORT $LN171@lssproto_T
  00f49	84 d2		 test	 dl, dl
  00f4b	74 12		 je	 SHORT $LN172@lssproto_T
  00f4d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00f50	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00f53	75 0e		 jne	 SHORT $LN171@lssproto_T
  00f55	83 c0 02	 add	 eax, 2
  00f58	83 c1 02	 add	 ecx, 2
  00f5b	84 d2		 test	 dl, dl
  00f5d	75 e4		 jne	 SHORT $LL170@lssproto_T
$LN172@lssproto_T:
  00f5f	33 c0		 xor	 eax, eax
  00f61	eb 05		 jmp	 SHORT $LN173@lssproto_T
$LN171@lssproto_T:
  00f63	1b c0		 sbb	 eax, eax
  00f65	83 c8 01	 or	 eax, 1
$LN173@lssproto_T:
  00f68	85 c0		 test	 eax, eax
  00f6a	0f 85 d8 f4 ff
	ff		 jne	 $LN43@lssproto_T

; 19438: 		getStringToken(data, '|', 2, sizeof(buf_sockfd) - 1, buf_sockfd);

  00f70	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _buf_sockfd$[ebp]
  00f76	50		 push	 eax
  00f77	6a 7f		 push	 127			; 0000007fH
  00f79	6a 02		 push	 2
  00f7b	6a 7c		 push	 124			; 0000007cH
  00f7d	57		 push	 edi
  00f7e	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken

; 19439: 		getStringToken(data, '|', 3, sizeof(buf_name) - 1, buf_name);

  00f83	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _buf_name$[ebp]
  00f89	50		 push	 eax
  00f8a	6a 7f		 push	 127			; 0000007fH
  00f8c	6a 03		 push	 3
  00f8e	6a 7c		 push	 124			; 0000007cH
  00f90	57		 push	 edi
  00f91	e8 00 00 00 00	 call	 ?getStringToken@@YAHPADDHH0@Z ; getStringToken
  00f96	83 c4 28	 add	 esp, 40			; 00000028H

; 19440: 		if ((strcmp(buf_sockfd, opp_sockfd) == 0) && (strcmp(buf_name, opp_name) == 0)) {

  00f99	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _buf_sockfd$[ebp]
  00f9f	b9 00 00 00 00	 mov	 ecx, OFFSET ?opp_sockfd@@3PADA
$LL174@lssproto_T:
  00fa4	8a 10		 mov	 dl, BYTE PTR [eax]
  00fa6	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00fa8	75 1a		 jne	 SHORT $LN175@lssproto_T
  00faa	84 d2		 test	 dl, dl
  00fac	74 12		 je	 SHORT $LN176@lssproto_T
  00fae	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00fb1	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00fb4	75 0e		 jne	 SHORT $LN175@lssproto_T
  00fb6	83 c0 02	 add	 eax, 2
  00fb9	83 c1 02	 add	 ecx, 2
  00fbc	84 d2		 test	 dl, dl
  00fbe	75 e4		 jne	 SHORT $LL174@lssproto_T
$LN176@lssproto_T:
  00fc0	33 c0		 xor	 eax, eax
  00fc2	eb 05		 jmp	 SHORT $LN177@lssproto_T
$LN175@lssproto_T:
  00fc4	1b c0		 sbb	 eax, eax
  00fc6	83 c8 01	 or	 eax, 1
$LN177@lssproto_T:
  00fc9	85 c0		 test	 eax, eax
  00fcb	0f 85 77 f4 ff
	ff		 jne	 $LN43@lssproto_T
  00fd1	b9 00 00 00 00	 mov	 ecx, OFFSET ?opp_name@@3PADA
  00fd6	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _buf_name$[ebp]
  00fdc	0f 1f 40 00	 npad	 4
$LL178@lssproto_T:
  00fe0	8a 10		 mov	 dl, BYTE PTR [eax]
  00fe2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00fe4	75 1a		 jne	 SHORT $LN179@lssproto_T
  00fe6	84 d2		 test	 dl, dl
  00fe8	74 12		 je	 SHORT $LN180@lssproto_T
  00fea	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00fed	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00ff0	75 0e		 jne	 SHORT $LN179@lssproto_T
  00ff2	83 c0 02	 add	 eax, 2
  00ff5	83 c1 02	 add	 ecx, 2
  00ff8	84 d2		 test	 dl, dl
  00ffa	75 e4		 jne	 SHORT $LL178@lssproto_T
$LN180@lssproto_T:
  00ffc	33 c0		 xor	 eax, eax
  00ffe	eb 05		 jmp	 SHORT $LN181@lssproto_T
$LN179@lssproto_T:
  01000	1b c0		 sbb	 eax, eax
  01002	83 c8 01	 or	 eax, 1
$LN181@lssproto_T:
  01005	85 c0		 test	 eax, eax
  01007	0f 85 3b f4 ff
	ff		 jne	 $LN43@lssproto_T

; 19441: 			tradeStatus = 0;
; 19442: 			MenuToggleFlag ^= JOY_CTRL_T;

  0100d	81 35 00 00 00
	00 00 00 40 00	 xor	 DWORD PTR ?MenuToggleFlag@@3IA, 4194304 ; MenuToggleFlag, 00400000H
  01017	66 a3 00 00 00
	00		 mov	 WORD PTR ?tradeStatus@@3FA, ax ; tradeStatus

; 19443: 			tradeInit();

  0101d	e8 00 00 00 00	 call	 ?tradeInit@@YAXXZ	; tradeInit

; 19444: 			// shan trade(DoubleCheck)
; 19445: 			pc.trade_confirm = 1;
; 19446: 			play_se(203, 320, 240);

  01022	68 f0 00 00 00	 push	 240			; 000000f0H
  01027	68 40 01 00 00	 push	 320			; 00000140H
  0102c	68 cb 00 00 00	 push	 203			; 000000cbH
  01031	c7 05 80 a1 00
	00 01 00 00 00	 mov	 DWORD PTR ?pc@@3UPC@@A+41344, 1
  0103b	e8 00 00 00 00	 call	 ?play_se@@YAHHHH@Z	; play_se

; 19447: 
; 19448: 		}
; 19449: 	}
; 19450: }

  01040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01043	83 c4 0c	 add	 esp, 12			; 0000000cH
  01046	33 cd		 xor	 ecx, ebp
  01048	5f		 pop	 edi
  01049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0104e	8b e5		 mov	 esp, ebp
  01050	5d		 pop	 ebp
  01051	c3		 ret	 0
?lssproto_TD_recv@@YAXHPAD@Z ENDP			; lssproto_TD_recv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1969 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1970 :         int _Result;
; 1971 :         va_list _ArgList;
; 1972 :         __crt_va_start(_ArgList, _Format);
; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1975 :         __crt_va_end(_ArgList);
; 1976 :         return _Result;
; 1977 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
