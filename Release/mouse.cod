; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	\\VBOXSVR\_stoneage\repos\ssm-sacli\Release\mouse.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?mouse@@3UMOUSE@@A				; mouse
PUBLIC	?HitFontNo@@3HA					; HitFontNo
PUBLIC	?HitDispNo@@3HA					; HitDispNo
PUBLIC	?OneLineInfoStr@@3PADA				; OneLineInfoStr
PUBLIC	?BoxColor@@3HA					; BoxColor
PUBLIC	?oneLineInfoFlag@@3HA				; oneLineInfoFlag
PUBLIC	?BoxColorTbl@@3PAEA				; BoxColorTbl
_BSS	SEGMENT
?mouse@@3UMOUSE@@A DB 050H DUP (?)			; mouse
?HitFontNo@@3HA DD 01H DUP (?)				; HitFontNo
?HitDispNo@@3HA DD 01H DUP (?)				; HitDispNo
?OneLineInfoStr@@3PADA DB 0100H DUP (?)			; OneLineInfoStr
?BoxColor@@3HA DD 01H DUP (?)				; BoxColor
_BSS	ENDS
_DATA	SEGMENT
?oneLineInfoFlag@@3HA DD 01H				; oneLineInfoFlag
?BoxColorTbl@@3PAEA DB 0faH				; BoxColorTbl
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?MouseInit@@YAXXZ				; MouseInit
PUBLIC	?MouseNowPoint@@YAXHH@Z				; MouseNowPoint
PUBLIC	?MouseCrickLeftDownPoint@@YAXHH@Z		; MouseCrickLeftDownPoint
PUBLIC	?MouseCrickLeftUpPoint@@YAXHH@Z			; MouseCrickLeftUpPoint
PUBLIC	?MouseCrickRightDownPoint@@YAXHH@Z		; MouseCrickRightDownPoint
PUBLIC	?MouseCrickRightUpPoint@@YAXHH@Z		; MouseCrickRightUpPoint
PUBLIC	?MouseDblCrickLeftUpPoint@@YAXHH@Z		; MouseDblCrickLeftUpPoint
PUBLIC	?MouseDblCrickRightUpPoint@@YAXHH@Z		; MouseDblCrickRightUpPoint
PUBLIC	?MouseProc@@YAXXZ				; MouseProc
PUBLIC	?HitMouseCursor@@YAXXZ				; HitMouseCursor
PUBLIC	?CheckGroupSelect@@YAXH@Z			; CheckGroupSelect
PUBLIC	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ		; sprintf_s<256>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@ ; `string'
PUBLIC	??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ ; `string'
PUBLIC	??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@ ; `string'
PUBLIC	??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ ; `string'
PUBLIC	??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ ; `string'
PUBLIC	??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ ; `string'
PUBLIC	??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD@ ; `string'
PUBLIC	??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB@ ; `string'
PUBLIC	??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN@ ; `string'
PUBLIC	??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@ ; `string'
PUBLIC	??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@ ; `string'
PUBLIC	??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@ ; `string'
PUBLIC	??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ ; `string'
PUBLIC	??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ ; `string'
PUBLIC	??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO@ ; `string'
PUBLIC	??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4038000000000000
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	?LoadBmp@@YAHH@Z:PROC				; LoadBmp
EXTRN	?SortDispBuffer@@YAXXZ:PROC			; SortDispBuffer
EXTRN	?StockDispBuffer@@YAHHHEHH@Z:PROC		; StockDispBuffer
EXTRN	?StockBoxDispBuffer@@YAXHHHHEHH@Z:PROC		; StockBoxDispBuffer
EXTRN	?GetStrWidth@@YAHPAD@Z:PROC			; GetStrWidth
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?ShowBottomLineString@@YAXHPAD@Z:PROC		; ShowBottomLineString
EXTRN	?openServerWindow@@YAXHHHHPAD@Z:PROC		; openServerWindow
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	?SpriteInfo@@3PAUSPRITE_INFO@@A:BYTE		; SpriteInfo
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?DispBuffer@@3UDISP_BUFFER@@A:BYTE		; DispBuffer
EXTRN	?p_party@@3PAPAUaction@@A:BYTE			; p_party
EXTRN	?FontBuffer@@3PAUFONT_BUFFER@@A:BYTE		; FontBuffer
EXTRN	?FontCnt@@3HA:DWORD				; FontCnt
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?TaskBarFlag@@3HA:DWORD				; TaskBarFlag
EXTRN	?MouseCursorFlag@@3HA:DWORD			; MouseCursorFlag
EXTRN	?BattleMyNo@@3HA:DWORD				; BattleMyNo
EXTRN	?mouseDblRightOn@@3HA:DWORD			; mouseDblRightOn
EXTRN	?transmigrationEffectFlag@@3HA:DWORD		; transmigrationEffectFlag
EXTRN	?ITEMPATHFLAG@@3HA:DWORD			; ITEMPATHFLAG
EXTRN	?nameOverTheHeadFlag@@3FA:WORD			; nameOverTheHeadFlag
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA
_BSS	SEGMENT
?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA DD 01H DUP (?) ; `MouseProc'::`2'::leftPushTimeBak
_BSS	ENDS
;	COMDAT ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA
_BSS	SEGMENT
?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA DD 01H DUP (?) ; `MouseProc'::`2'::rightPushTimeBak
_BSS	ENDS
;	COMDAT ?cnt@?1??HitMouseCursor@@YAXXZ@4HA
_BSS	SEGMENT
?cnt@?1??HitMouseCursor@@YAXXZ@4HA DD 01H DUP (?)	; `HitMouseCursor'::`2'::cnt
_BSS	ENDS
;	COMDAT __real@4038000000000000
CONST	SEGMENT
__real@4038000000000000 DQ 04038000000000000r	; 24
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
CONST	SEGMENT
??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO@
CONST	SEGMENT
??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d [', 0c5H, 0beH, 0bdH
	DB	0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d [', 0c5H, 0beH, 0bdH
	DB	0c2H, ']%s Lv', 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
CONST	SEGMENT
??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
CONST	SEGMENT
??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '%s    ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@
CONST	SEGMENT
??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H, 0beH
	DB	0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
CONST	SEGMENT
??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
CONST	SEGMENT
??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN@
CONST	SEGMENT
??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB@
CONST	SEGMENT
??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d   ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD@
CONST	SEGMENT
??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d   ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
CONST	SEGMENT
??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
CONST	SEGMENT
??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
CONST	SEGMENT
??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@
CONST	SEGMENT
??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
CONST	SEGMENT
??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@
CONST	SEGMENT
??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ PROC		; sprintf_s<256>, COMDAT

; 1840 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1491 :         int const _Result = __stdio_common_vsprintf_s(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1492 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1493 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1494 : 
; 1495 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1496 :     }
; 1497 :     #endif
; 1498 : 
; 1499 :     #if __STDC_WANT_SECURE_LIB__
; 1500 : 
; 1501 :         _Success_(return >= 0)
; 1502 :         _Check_return_opt_
; 1503 :         _CRT_STDIO_INLINE int __CRTDECL vsprintf_s(
; 1504 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1505 :             _In_                                          size_t      const _BufferCount,
; 1506 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1507 :                                                           va_list           _ArgList
; 1508 :             )
; 1509 :     #if defined _NO_CRT_STDIO_INLINE
; 1510 :     ;
; 1511 :     #else
; 1512 :         {
; 1513 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1514 :         }
; 1515 :     #endif
; 1516 : 
; 1517 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(
; 1518 :             _Success_(return >= 0)
; 1519 :             int, vsprintf_s,
; 1520 :             _Always_(_Post_z_)            char,        _Buffer,
; 1521 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1522 :                                           va_list,     _ArgList
; 1523 :             )
; 1524 : 
; 1525 :     #endif
; 1526 : 
; 1527 :     _Success_(return >= 0)
; 1528 :     _Check_return_opt_
; 1529 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p_l(
; 1530 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1531 :         _In_                                          size_t      const _BufferCount,
; 1532 :         _In_z_ _Printf_format_string_params_(2)       char const* const _Format,
; 1533 :         _In_opt_                                      _locale_t   const _Locale,
; 1534 :                                                       va_list           _ArgList
; 1535 :         )
; 1536 :     #if defined _NO_CRT_STDIO_INLINE
; 1537 :     ;
; 1538 :     #else
; 1539 :     {
; 1540 :         int const _Result = __stdio_common_vsprintf_p(
; 1541 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1542 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1543 : 
; 1544 :         return _Result < 0 ? -1 : _Result;
; 1545 :     }
; 1546 :     #endif
; 1547 : 
; 1548 :     _Success_(return >= 0)
; 1549 :     _Check_return_opt_
; 1550 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p(
; 1551 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1552 :         _In_                                          size_t      const _BufferCount,
; 1553 :         _In_z_ _Printf_format_string_                 char const* const _Format,
; 1554 :                                                       va_list           _ArgList
; 1555 :         )
; 1556 :     #if defined _NO_CRT_STDIO_INLINE
; 1557 :     ;
; 1558 :     #else
; 1559 :     {
; 1560 :         return _vsprintf_p_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1561 :     }
; 1562 :     #endif
; 1563 : 
; 1564 :     _Success_(return >= 0)
; 1565 :     _Check_return_opt_
; 1566 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s_l(
; 1567 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1568 :         _In_                                              size_t      const _BufferCount,
; 1569 :         _In_                                              size_t      const _MaxCount,
; 1570 :         _In_z_ _Printf_format_string_params_(2)           char const* const _Format,
; 1571 :         _In_opt_                                          _locale_t   const _Locale,
; 1572 :                                                           va_list          _ArgList
; 1573 :         )
; 1574 :     #if defined _NO_CRT_STDIO_INLINE
; 1575 :     ;
; 1576 :     #else
; 1577 :     {
; 1578 :         int const _Result = __stdio_common_vsnprintf_s(
; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;
; 1583 :     }
; 1584 :     #endif
; 1585 : 
; 1586 :     _Success_(return >= 0)
; 1587 :     _Check_return_opt_
; 1588 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s(
; 1589 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1590 :         _In_                                              size_t      const _BufferCount,
; 1591 :         _In_                                              size_t      const _MaxCount,
; 1592 :         _In_z_ _Printf_format_string_                     char const* const _Format,
; 1593 :                                                           va_list           _ArgList
; 1594 :         )
; 1595 :     #if defined _NO_CRT_STDIO_INLINE
; 1596 :     ;
; 1597 :     #else
; 1598 :     {
; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1600 :     }
; 1601 :     #endif
; 1602 : 
; 1603 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1604 :         _Success_(return >= 0)
; 1605 :         int, _vsnprintf_s,
; 1606 :         _Always_(_Post_z_)            char,        _Buffer,
; 1607 :         _In_                          size_t,      _BufferCount,
; 1608 :         _In_z_ _Printf_format_string_ char const*, _Format,
; 1609 :                                       va_list,     _ArgList
; 1610 :         )
; 1611 : 
; 1612 :     #if __STDC_WANT_SECURE_LIB__
; 1613 : 
; 1614 :         _Success_(return >= 0)
; 1615 :         _Check_return_opt_
; 1616 :         _CRT_STDIO_INLINE int __CRTDECL vsnprintf_s(
; 1617 :             _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1618 :             _In_                                              size_t      const _BufferCount,
; 1619 :             _In_                                              size_t      const _MaxCount,
; 1620 :             _In_z_ _Printf_format_string_                     char const* const _Format,
; 1621 :                                                               va_list           _ArgList
; 1622 :             )
; 1623 :     #if defined _NO_CRT_STDIO_INLINE
; 1624 :     ;
; 1625 :     #else
; 1626 :         {
; 1627 :             return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1628 :         }
; 1629 :     #endif
; 1630 : 
; 1631 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1632 :             _Success_(return >= 0)
; 1633 :             int, vsnprintf_s,
; 1634 :             _Always_(_Post_z_)            char,        _Buffer,
; 1635 :             _In_                          size_t,      _BufferCount,
; 1636 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1637 :                                           va_list,     _ArgList
; 1638 :             )
; 1639 : 
; 1640 :     #endif
; 1641 : 
; 1642 :     _Check_return_opt_
; 1643 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_l(
; 1644 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1645 :         _In_opt_                                _locale_t   const _Locale,
; 1646 :                                                 va_list           _ArgList
; 1647 :         )
; 1648 :     #if defined _NO_CRT_STDIO_INLINE
; 1649 :     ;
; 1650 :     #else
; 1651 :     {
; 1652 :         int const _Result = __stdio_common_vsprintf(
; 1653 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1654 :             NULL, 0, _Format, _Locale, _ArgList);
; 1655 : 
; 1656 :         return _Result < 0 ? -1 : _Result;
; 1657 :     }
; 1658 :     #endif
; 1659 : 
; 1660 :     _Check_return_
; 1661 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf(
; 1662 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1663 :                                       va_list           _ArgList
; 1664 :         )
; 1665 :     #if defined _NO_CRT_STDIO_INLINE
; 1666 :     ;
; 1667 :     #else
; 1668 :     {
; 1669 :         return _vscprintf_l(_Format, NULL, _ArgList);
; 1670 :     }
; 1671 :     #endif
; 1672 : 
; 1673 :     _Check_return_opt_
; 1674 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p_l(
; 1675 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1676 :         _In_opt_                                _locale_t   const _Locale,
; 1677 :                                                 va_list           _ArgList
; 1678 :         )
; 1679 :     #if defined _NO_CRT_STDIO_INLINE
; 1680 :     ;
; 1681 :     #else
; 1682 :     {
; 1683 :         int const _Result = __stdio_common_vsprintf_p(
; 1684 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1685 :             NULL, 0, _Format, _Locale, _ArgList);
; 1686 : 
; 1687 :         return _Result < 0 ? -1 : _Result;
; 1688 :     }
; 1689 :     #endif
; 1690 : 
; 1691 :     _Check_return_
; 1692 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p(
; 1693 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1694 :                                       va_list           _ArgList
; 1695 :         )
; 1696 :     #if defined _NO_CRT_STDIO_INLINE
; 1697 :     ;
; 1698 :     #else
; 1699 :     {
; 1700 :         return _vscprintf_p_l(_Format, NULL, _ArgList);
; 1701 :     }
; 1702 :     #endif
; 1703 : 
; 1704 :     _Check_return_opt_
; 1705 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c_l(
; 1706 :         _Out_writes_opt_(_BufferCount)          char*       const _Buffer,
; 1707 :         _In_                                    size_t      const _BufferCount,
; 1708 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1709 :         _In_opt_                                _locale_t   const _Locale,
; 1710 :                                                 va_list           _ArgList
; 1711 :         )
; 1712 :     #if defined _NO_CRT_STDIO_INLINE
; 1713 :     ;
; 1714 :     #else
; 1715 :     {
; 1716 :         int const _Result = __stdio_common_vsprintf(
; 1717 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1718 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1719 : 
; 1720 :         return _Result < 0 ? -1 : _Result;
; 1721 :     }
; 1722 :     #endif
; 1723 : 
; 1724 :     _Success_(return >= 0)
; 1725 :     _Check_return_opt_
; 1726 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c(
; 1727 :         _Out_writes_opt_(_BufferCount) char*       const _Buffer,
; 1728 :         _In_                           size_t      const _BufferCount,
; 1729 :         _In_z_ _Printf_format_string_  char const* const _Format,
; 1730 :                                        va_list           _ArgList
; 1731 :         )
; 1732 :     #if defined _NO_CRT_STDIO_INLINE
; 1733 :     ;
; 1734 :     #else
; 1735 :     {
; 1736 :         return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1737 :     }
; 1738 :     #endif
; 1739 : 
; 1740 :     _Success_(return >= 0)
; 1741 :     _Check_return_opt_ _CRT_INSECURE_DEPRECATE(_sprintf_s_l)
; 1742 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_l(
; 1743 :         _Pre_notnull_ _Always_(_Post_z_)        char*       const _Buffer,
; 1744 :         _In_z_ _Printf_format_string_params_(0) char const* const _Format,
; 1745 :         _In_opt_                                _locale_t   const _Locale,
; 1746 :         ...)
; 1747 :     #if defined _NO_CRT_STDIO_INLINE
; 1748 :     ;
; 1749 :     #else
; 1750 :     {
; 1751 :         int _Result;
; 1752 :         va_list _ArgList;
; 1753 :         __crt_va_start(_ArgList, _Locale);
; 1754 : 
; 1755 :         _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
; 1756 : 
; 1757 :         __crt_va_end(_ArgList);
; 1758 :         return _Result;
; 1759 :     }
; 1760 :     #endif
; 1761 : 
; 1762 :     _Success_(return >= 0)
; 1763 :     _Check_return_opt_
; 1764 :     _CRT_STDIO_INLINE int __CRTDECL sprintf(
; 1765 :         _Pre_notnull_ _Always_(_Post_z_) char*       const _Buffer,
; 1766 :         _In_z_ _Printf_format_string_    char const* const _Format,
; 1767 :         ...)
; 1768 :     #if defined _NO_CRT_STDIO_INLINE
; 1769 :     ;
; 1770 :     #else
; 1771 :     {
; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }
; 1781 :     #endif
; 1782 : 
; 1783 :     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(
; 1784 :         _Success_(return >= 0)
; 1785 :         int, __RETURN_POLICY_SAME, __EMPTY_DECLSPEC, __CRTDECL, sprintf, vsprintf,
; 1786 :         _Pre_notnull_ _Always_(_Post_z_), char,        _Buffer,
; 1787 :         _In_z_ _Printf_format_string_     char const*, _Format
; 1788 :         )
; 1789 : 
; 1790 :     _Success_(return >= 0)
; 1791 :     _Check_return_opt_
; 1792 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_s_l(
; 1793 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1794 :         _In_                                          size_t      const _BufferCount,
; 1795 :         _In_z_ _Printf_format_string_params_(0)       char const* const _Format,
; 1796 :         _In_opt_                                      _locale_t   const _Locale,
; 1797 :         ...)
; 1798 :     #if defined _NO_CRT_STDIO_INLINE
; 1799 :     ;
; 1800 :     #else
; 1801 :     {
; 1802 :         int _Result;
; 1803 :         va_list _ArgList;
; 1804 :         __crt_va_start(_ArgList, _Locale);
; 1805 :         _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1806 :         __crt_va_end(_ArgList);
; 1807 :         return _Result;
; 1808 :     }
; 1809 :     #endif
; 1810 : 
; 1811 :     #if __STDC_WANT_SECURE_LIB__
; 1812 : 
; 1813 :         _Success_(return >= 0)
; 1814 :         _Check_return_opt_
; 1815 :         _CRT_STDIO_INLINE int __CRTDECL sprintf_s(
; 1816 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1817 :             _In_                                          size_t      const _BufferCount,
; 1818 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1819 :             ...)
; 1820 :     #if defined _NO_CRT_STDIO_INLINE
; 1821 :     ;
; 1822 :     #else
; 1823 :         {
; 1824 :             int _Result;
; 1825 :             va_list _ArgList;
; 1826 :             __crt_va_start(_ArgList, _Format);
; 1827 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1828 :             __crt_va_end(_ArgList);
; 1829 :             return _Result;
; 1830 :         }
; 1831 :     #endif
; 1832 : 
; 1833 :     #endif
; 1834 : 
; 1835 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ENDP		; sprintf_s<256>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?CheckGroupSelect@@YAXH@Z
_TEXT	SEGMENT
tv492 = -8						; size = 4
tv494 = -4						; size = 4
_no$ = 8						; size = 4
?CheckGroupSelect@@YAXH@Z PROC				; CheckGroupSelect, COMDAT

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 285  : 	int i;
; 286  : 	DISP_INFO 	*pDispInfo;
; 287  : 	DISP_SORT 	*pDispSort;
; 288  : 	/* ?????????????????????? */
; 289  : 	for (i = 0; i < DispBuffer.DispCnt; i++) {

  00006	33 c0		 xor	 eax, eax
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	66 3b 05 00 c0
	01 00		 cmp	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00012	0f 8d 80 00 00
	00		 jge	 $LN3@CheckGroup
  00018	53		 push	 ebx
  00019	8b 5d 08	 mov	 ebx, DWORD PTR _no$[ebp]
  0001c	56		 push	 esi
  0001d	be 08 00 00 00	 mov	 esi, OFFSET ?DispBuffer@@3UDISP_BUFFER@@A+8
$LL4@CheckGroup:

; 290  : 
; 291  : 		pDispInfo = DispBuffer.DispInfo + i;
; 292  : 		pDispSort = DispBuffer.DispSort + i;
; 293  : 
; 294  : 		// ??????????
; 295  : 		if (pDispInfo->hitFlag == no) {

  00022	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  00025	75 60		 jne	 SHORT $LN2@CheckGroup

; 296  : 			// ??????????
; 297  : 			if (pDispSort->dispPrio >= DISP_PRIO_MENU) {

  00027	80 3c bd 02 80
	01 00 68	 cmp	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*4+98306], 104 ; 00000068H
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00034	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  00037	6a 00		 push	 0
  00039	ff 35 00 00 00
	00		 push	 DWORD PTR ?BoxColor@@3HA ; BoxColor
  0003f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00042	0f b7 1c 85 06
	00 00 00	 movzx	 ebx, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  0004a	0f b7 04 85 04
	00 00 00	 movzx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+4]
  00052	89 5d fc	 mov	 DWORD PTR tv494[ebp], ebx
  00055	8b 5d 08	 mov	 ebx, DWORD PTR _no$[ebp]
  00058	89 45 f8	 mov	 DWORD PTR tv492[ebp], eax
  0005b	8b 45 fc	 mov	 eax, DWORD PTR tv494[ebp]
  0005e	98		 cwde
  0005f	72 04		 jb	 SHORT $LN6@CheckGroup

; 298  : 				// ????????????????
; 299  : #ifndef __CARYTEST
; 300  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  00061	6a 6b		 push	 107			; 0000006bH

; 301  : 					pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 302  : 					pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 303  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 304  : #else
; 305  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 306  : 					pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 307  : 					pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 308  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 309  : #endif
; 310  : 			}

  00063	eb 02		 jmp	 SHORT $LN13@CheckGroup
$LN6@CheckGroup:

; 311  : 			else {
; 312  : 				// ????????????????
; 313  : #ifndef __CARYTEST
; 314  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  00065	6a 65		 push	 101			; 00000065H
$LN13@CheckGroup:

; 285  : 	int i;
; 286  : 	DISP_INFO 	*pDispInfo;
; 287  : 	DISP_SORT 	*pDispSort;
; 288  : 	/* ?????????????????????? */
; 289  : 	for (i = 0; i < DispBuffer.DispCnt; i++) {

  00067	83 c0 02	 add	 eax, 2
  0006a	03 c1		 add	 eax, ecx
  0006c	50		 push	 eax
  0006d	8b 45 f8	 mov	 eax, DWORD PTR tv492[ebp]
  00070	98		 cwde
  00071	83 c0 02	 add	 eax, 2
  00074	03 c2		 add	 eax, edx
  00076	50		 push	 eax
  00077	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  0007a	50		 push	 eax
  0007b	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  00084	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@CheckGroup:
  00087	0f bf 05 00 c0
	01 00		 movsx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0008e	47		 inc	 edi
  0008f	83 c6 18	 add	 esi, 24			; 00000018H
  00092	3b f8		 cmp	 edi, eax
  00094	7c 8c		 jl	 SHORT $LL4@CheckGroup
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
$LN3@CheckGroup:
  00098	5f		 pop	 edi

; 315  : 					pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 316  : 					pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 317  : 					DISP_PRIO_BOX, BoxColor, 0);
; 318  : 				//pDispSort->dispPrio, 250, 0 );
; 319  : #else
; 320  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 321  : 					pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 322  : 					pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 323  : 					DISP_PRIO_BOX, BoxColor, 0);
; 324  : #endif
; 325  : 			}
; 326  : 		}
; 327  : 	}
; 328  : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?CheckGroupSelect@@YAXH@Z ENDP				; CheckGroupSelect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?HitMouseCursor@@YAXXZ
_TEXT	SEGMENT
tv4256 = -276						; size = 4
_pDispSort$1$ = -272					; size = 4
tv4119 = -268						; size = 4
tv4103 = -268						; size = 4
_itemNameColor$1$ = -268				; size = 4
tv4262 = -261						; size = 1
tv4137 = -261						; size = 1
_msg$1 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?HitMouseCursor@@YAXXZ PROC				; HitMouseCursor, COMDAT

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 365  : 	int i;					// ???????
; 366  : 	int strWidth;			// ???????
; 367  : 	int hitFlag = FALSE;	// ??????
; 368  : 	static int cnt = 0;		// ?????
; 369  : 	int itemNameColor = FONT_PAL_WHITE;	// ?????

  00013	33 c9		 xor	 ecx, ecx

; 370  : 
; 371  : 	DISP_SORT 	*pDispSort = DispBuffer.DispSort + DispBuffer.DispCnt - 1;

  00015	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0001c	0f bf c1	 movsx	 eax, cx
  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	57		 push	 edi
  00022	8d 34 85 fc 7f
	01 00		 lea	 esi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*4+98300]

; 372  : 	DISP_INFO 	*pDispInfo;
; 373  : 
; 374  : 	// ??????
; 375  : 	if (!transmigrationEffectFlag)

  00029	33 c0		 xor	 eax, eax
  0002b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?transmigrationEffectFlag@@3HA, eax ; transmigrationEffectFlag
  00031	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _pDispSort$1$[ebp], esi
  00037	0f 94 c0	 sete	 al

; 376  : 		oneLineInfoFlag = 1;
; 377  : 	else
; 378  : 		oneLineInfoFlag = 0;
; 379  : 
; 380  : 	if (cnt >= sizeof(BoxColorTbl) - 1) cnt = 0;

  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?oneLineInfoFlag@@3HA, eax ; oneLineInfoFlag
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA
  00044	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00047	72 04		 jb	 SHORT $LN13@HitMouseCu
  00049	33 c0		 xor	 eax, eax
  0004b	eb 01		 jmp	 SHORT $LN14@HitMouseCu
$LN13@HitMouseCu:

; 381  : 	else cnt++;

  0004d	40		 inc	 eax
$LN14@HitMouseCu:

; 382  : 
; 383  : 	// ?????
; 384  : 	BoxColor = BoxColorTbl[cnt];

  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA, eax

; 385  : #ifdef _ITEM_PATH
; 386  : 	ITEMPATHFLAG = FALSE;
; 387  : #endif
; 388  : 	for (i = 0; i < FontCnt; i++) {

  00053	33 ff		 xor	 edi, edi
  00055	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?BoxColorTbl@@3PAEA[eax]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR ?BoxColor@@3HA, eax ; BoxColor
  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FontCnt@@3HA ; FontCnt
  00066	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ITEMPATHFLAG@@3HA, 0 ; ITEMPATHFLAG
  00070	85 c0		 test	 eax, eax
  00072	7e 77		 jle	 SHORT $LN153@HitMouseCu

; 382  : 
; 383  : 	// ?????
; 384  : 	BoxColor = BoxColorTbl[cnt];

  00074	be 05 00 00 00	 mov	 esi, OFFSET ?FontBuffer@@3PAUFONT_BUFFER@@A+5
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@HitMouseCu:

; 389  : 		// jl 文字不接受点击则跳过
; 390  : 		if (FontBuffer[i].hitFlag == 0) continue;

  00080	83 be 03 01 00
	00 00		 cmp	 DWORD PTR [esi+259], 0
  00087	74 4a		 je	 SHORT $LN2@HitMouseCu

; 391  : 		// jl 取文字宽度
; 392  : 		strWidth = GetStrWidth(FontBuffer[i].str);

  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 ?GetStrWidth@@YAHPAD@Z	; GetStrWidth

; 393  : 		// jl 检测鼠标在文字矩形内
; 394  : 		if (mouse.nowPoint.x <= FontBuffer[i].x + strWidth + 2 && FontBuffer[i].x - 2 <= mouse.nowPoint.x &&
; 395  : 			mouse.nowPoint.y <= FontBuffer[i].y + FONT_SIZE + 2 && FontBuffer[i].y - 2 <= mouse.nowPoint.y) {

  0008f	0f bf 56 fb	 movsx	 edx, WORD PTR [esi-5]
  00093	83 c0 02	 add	 eax, 2
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A
  0009c	03 c2		 add	 eax, edx
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv4119[ebp], eax
  000a7	3b c8		 cmp	 ecx, eax
  000a9	7f 23		 jg	 SHORT $LN154@HitMouseCu
  000ab	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  000ae	3b c1		 cmp	 eax, ecx
  000b0	7f 1c		 jg	 SHORT $LN154@HitMouseCu
  000b2	0f bf 4e fd	 movsx	 ecx, WORD PTR [esi-3]
  000b6	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  000bc	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  000bf	3b d8		 cmp	 ebx, eax
  000c1	7f 0b		 jg	 SHORT $LN154@HitMouseCu
  000c3	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  000c6	3b c3		 cmp	 eax, ebx
  000c8	0f 8e c3 00 00
	00		 jle	 $LN134@HitMouseCu
$LN154@HitMouseCu:
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FontCnt@@3HA ; FontCnt
$LN2@HitMouseCu:

; 385  : #ifdef _ITEM_PATH
; 386  : 	ITEMPATHFLAG = FALSE;
; 387  : #endif
; 388  : 	for (i = 0; i < FontCnt; i++) {

  000d3	47		 inc	 edi
  000d4	81 c6 10 01 00
	00		 add	 esi, 272		; 00000110H
  000da	3b f8		 cmp	 edi, eax
  000dc	7c a2		 jl	 SHORT $LL4@HitMouseCu
  000de	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  000e5	8b b5 f0 fe ff
	ff		 mov	 esi, DWORD PTR _pDispSort$1$[ebp]
$LN153@HitMouseCu:

; 422  : 				ShowBottomLineString(itemNameColor, OneLineInfoStr);
; 423  : 				//the third StockFontBuffer( 8, 460, FONT_PRIO_FRONT, itemNameColor, OneLineInfoStr, 0 );
; 424  : 			}
; 425  : 			OneLineInfoStr[0] = NULL;
; 426  : 			return;		// jl 拿到HitDispNo就返回
; 427  : 		}
; 428  : 	}
; 429  : 	// jl 没有文字点击则赋值-1
; 430  : 	HitFontNo = -1;
; 431  : 	for (i = DispBuffer.DispCnt - 1; i >= 0; i--, pDispSort--) {

  000eb	0f bf f9	 movsx	 edi, cx
  000ee	83 ef 01	 sub	 edi, 1
  000f1	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  000fb	0f 88 b9 01 00
	00		 js	 $LN6@HitMouseCu
$LL7@HitMouseCu:

; 432  : 		pDispInfo = DispBuffer.DispInfo + pDispSort->no;

  00101	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00104	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]

; 433  : 		if (pDispInfo->hitFlag == 0) continue;

  00107	83 3c f5 10 00
	00 00 00	 cmp	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16], 0
  0010f	0f 84 8d 01 00
	00		 je	 $LN5@HitMouseCu

; 434  : 		//if( SpriteInfo[ pDispInfo->bmpNo ].lpSurfaceInfo == NULL ) continue;
; 435  : 		if (LoadBmp(pDispInfo->bmpNo) == FALSE) continue;

  00115	ff 34 f5 08 00
	00 00		 push	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+8]
  0011c	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp
  00121	83 c4 04	 add	 esp, 4
  00124	85 c0		 test	 eax, eax
  00126	0f 84 76 01 00
	00		 je	 $LN5@HitMouseCu

; 436  : 		if (pDispInfo->pAct == NULL) {

  0012c	83 3c f5 0c 00
	00 00 00	 cmp	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12], 0
  00134	8b 04 f5 08 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+8]
  0013b	8b 14 f5 00 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8]
  00142	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00145	0f bf 04 8d 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+4]
  0014d	0f 85 ac 00 00
	00		 jne	 $LN21@HitMouseCu

; 437  : #ifndef __CARYTEST
; 438  : 			if (mouse.nowPoint.x <= pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width &&
; 439  : 				pDispInfo->x <= mouse.nowPoint.x &&
; 440  : 				mouse.nowPoint.y <= pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height &&

  00153	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?mouse@@3UMOUSE@@A
  00159	03 c2		 add	 eax, edx
  0015b	3b d8		 cmp	 ebx, eax
  0015d	0f 8f 3f 01 00
	00		 jg	 $LN5@HitMouseCu
  00163	3b d3		 cmp	 edx, ebx
  00165	0f 8f 37 01 00
	00		 jg	 $LN5@HitMouseCu
  0016b	0f bf 04 8d 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  00173	8b 14 f5 04 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+4]
  0017a	03 c2		 add	 eax, edx
  0017c	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  00182	3b c8		 cmp	 ecx, eax
  00184	0f 8f 18 01 00
	00		 jg	 $LN5@HitMouseCu
  0018a	3b d1		 cmp	 edx, ecx

; 441  : 				pDispInfo->y <= mouse.nowPoint.y)
; 442  : #else
; 443  : 			if (mouse.nowPoint.x <= pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width &&
; 444  : 				pDispInfo->x <= mouse.nowPoint.x &&
; 445  : 				mouse.nowPoint.y <= pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height &&
; 446  : 				pDispInfo->y <= mouse.nowPoint.y)
; 447  : #endif				
; 448  : 				hitFlag = TRUE;
; 449  : 		}else{

  0018c	e9 d5 00 00 00	 jmp	 $LN161@HitMouseCu
$LN134@HitMouseCu:

; 396  : 			// jl 赋值点击的文字编号，鼠标在上面就赋值，不需要点击
; 397  : 			HitFontNo = i;
; 398  : 			// 如果hitFlag为2则画一个边框
; 399  : 			if (FontBuffer[i].hitFlag == 2) {

  00191	69 c7 10 01 00
	00		 imul	 eax, edi, 272
  00197	89 3d 00 00 00
	00		 mov	 DWORD PTR ?HitFontNo@@3HA, edi ; HitFontNo
  0019d	83 b8 08 01 00
	00 02		 cmp	 DWORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax+264], 2
  001a4	75 29		 jne	 SHORT $LN17@HitMouseCu

; 400  : 				StockBoxDispBuffer(FontBuffer[i].x - 3,

  001a6	6a 00		 push	 0
  001a8	ff 35 00 00 00
	00		 push	 DWORD PTR ?BoxColor@@3HA ; BoxColor
  001ae	8d 41 12	 lea	 eax, DWORD PTR [ecx+18]
  001b1	6a 6b		 push	 107			; 0000006bH
  001b3	50		 push	 eax
  001b4	ff b5 f4 fe ff
	ff		 push	 DWORD PTR tv4119[ebp]
  001ba	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  001bd	50		 push	 eax
  001be	8d 42 fd	 lea	 eax, DWORD PTR [edx-3]
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  001c7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 401  : #ifdef _NEWFONT_
; 402  : 					FontBuffer[i].y - 2,
; 403  : #else
; 404  : 					FontBuffer[i].y - 4,
; 405  : #endif
; 406  : 					FontBuffer[i].x + strWidth + 2,
; 407  : #ifdef _NEWFONT_
; 408  : 					FontBuffer[i].y + FONT_SIZE + 6,
; 409  : #else
; 410  : 					FontBuffer[i].y + FONT_SIZE + 4,
; 411  : #endif
; 412  : 
; 413  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 414  : 
; 415  : 				SortDispBuffer();

  001ca	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer
$LN17@HitMouseCu:

; 416  : 			}
; 417  : 			//jl 点击的是文字，则把图片点击赋值-1
; 418  : 			HitDispNo = -1;
; 419  : 			mouse.level = DISP_PRIO_MENU;
; 420  : 			// jl状态栏显示提示文字
; 421  : 			if (TaskBarFlag == FALSE && oneLineInfoFlag) {

  001cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  001d6	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitDispNo@@3HA, -1 ; HitDispNo
  001e0	c6 05 44 00 00
	00 68		 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, 104 ; 00000068H
  001e7	0f 85 f6 00 00
	00		 jne	 $LN123@HitMouseCu
  001ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?oneLineInfoFlag@@3HA, 0 ; oneLineInfoFlag
  001f4	0f 84 e9 00 00
	00		 je	 $LN123@HitMouseCu
  001fa	e9 d5 00 00 00	 jmp	 $LN160@HitMouseCu
$LN21@HitMouseCu:
  001ff	66 0f 6e 15 00
	00 00 00	 movd	 xmm2, DWORD PTR ?mouse@@3UMOUSE@@A

; 450  : #ifndef __CARYTEST
; 451  : 			if (mouse.nowPoint.x <= pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width * 0.5 + MOUSE_HIT_SIZE_X * 0.5 &&
; 452  : 				pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width * 0.5 - MOUSE_HIT_SIZE_X * 0.5 <= mouse.nowPoint.x &&
; 453  : 				mouse.nowPoint.y <= pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height &&

  00207	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@4038000000000000
  0020f	66 0f 6e c8	 movd	 xmm1, eax
  00213	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00217	66 0f 6e c2	 movd	 xmm0, edx
  0021b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00223	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00227	f3 0f e6 d2	 cvtdq2pd xmm2, xmm2
  0022b	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0022f	0f 28 c1	 movaps	 xmm0, xmm1
  00232	f2 0f 58 c3	 addsd	 xmm0, xmm3
  00236	66 0f 2f c2	 comisd	 xmm0, xmm2
  0023a	72 66		 jb	 SHORT $LN5@HitMouseCu
  0023c	f2 0f 5c cb	 subsd	 xmm1, xmm3
  00240	66 0f 2f d1	 comisd	 xmm2, xmm1
  00244	72 5c		 jb	 SHORT $LN5@HitMouseCu
  00246	0f bf 0c 8d 06
	00 00 00	 movsx	 ecx, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  0024e	8b 04 f5 04 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+4]
  00255	03 c1		 add	 eax, ecx
  00257	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  0025d	3b c8		 cmp	 ecx, eax
  0025f	7f 41		 jg	 SHORT $LN5@HitMouseCu
  00261	83 c0 d0	 add	 eax, -48		; ffffffd0H
  00264	3b c1		 cmp	 eax, ecx
$LN161@HitMouseCu:

; 454  : 				pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height - MOUSE_HIT_SIZE_Y <= mouse.nowPoint.y)
; 455  : #else
; 456  : 			if (mouse.nowPoint.x <= pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width * 0.5 + MOUSE_HIT_SIZE_X * 0.5 &&
; 457  : 				pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width * 0.5 - MOUSE_HIT_SIZE_X * 0.5 <= mouse.nowPoint.x &&
; 458  : 				mouse.nowPoint.y <= pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height &&
; 459  : 				pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height - MOUSE_HIT_SIZE_Y <= mouse.nowPoint.y)
; 460  : #endif				
; 461  : 				hitFlag = TRUE;
; 462  : 		}
; 463  : 
; 464  : 		if (hitFlag == TRUE) {
; 465  : 
; 466  : #ifdef __ATTACK_MAGIC
; 467  : 
; 468  : 			int cnt;
; 469  : 
; 470  : 			for (cnt = 0; cnt < BATTLKPKPLYAERNUM; cnt++)
; 471  : 			{
; 472  : 				if (p_party[cnt] == pDispInfo->pAct)
; 473  : 					break;
; 474  : 			}
; 475  : 
; 476  : 			// 左上到右下编号为6 , 7 , 8 , 9
; 477  : 			// 当仅能选择单排且目前所选择的在我方的位置
; 478  : 			//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 479  : 			if (BattleMyNo >= 10 && (6 == pDispInfo->hitFlag || 7 == pDispInfo->hitFlag))

  00266	7f 3a		 jg	 SHORT $LN5@HitMouseCu
  00268	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  0026e	8b 0c f5 10 00
	00 00		 mov	 ecx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16]
  00275	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00278	7c 14		 jl	 SHORT $LN150@HitMouseCu
  0027a	83 f9 06	 cmp	 ecx, 6
  0027d	74 23		 je	 SHORT $LN5@HitMouseCu
  0027f	83 f9 07	 cmp	 ecx, 7
  00282	74 1e		 je	 SHORT $LN5@HitMouseCu

; 499  : 				//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 500  : 				hitFlag = FALSE;
; 501  : 				continue;
; 502  : 			}
; 503  : 			if (BattleMyNo >= 10 && (12 == pDispInfo->hitFlag || 13 == pDispInfo->hitFlag)){

  00284	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  00287	74 19		 je	 SHORT $LN5@HitMouseCu
  00289	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0028c	eb 12		 jmp	 SHORT $LN162@HitMouseCu
$LN150@HitMouseCu:

; 480  : 			{
; 481  : 				hitFlag = FALSE;
; 482  : 				continue;
; 483  : 			}
; 484  : #ifdef _SKILL_85_LSFIX
; 485  : 			// CAX修正攻击一排时候出错
; 486  : 			if (BattleMyNo < 10 && (10 == pDispInfo->hitFlag || 9 == pDispInfo->hitFlag))

  0028e	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00291	74 0f		 je	 SHORT $LN5@HitMouseCu
  00293	83 f9 09	 cmp	 ecx, 9
  00296	74 0a		 je	 SHORT $LN5@HitMouseCu

; 487  : #else
; 488  : 			// 当仅能选择单排且目前所选择的在我方的位置
; 489  : 			if (BattleMyNo < 10 && (8 == pDispInfo->hitFlag || 9 == pDispInfo->hitFlag))
; 490  : #endif
; 491  : 			{
; 492  : 				//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 493  : 				hitFlag = FALSE;
; 494  : 				continue;
; 495  : 			}
; 496  : #ifdef _SKILL_ADDBARRIER
; 497  : 			// 只能选我方
; 498  : 			if (BattleMyNo < 10 && (11 == pDispInfo->hitFlag || 12 == pDispInfo->hitFlag)){

  00298	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  0029b	74 05		 je	 SHORT $LN5@HitMouseCu
  0029d	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
$LN162@HitMouseCu:

; 422  : 				ShowBottomLineString(itemNameColor, OneLineInfoStr);
; 423  : 				//the third StockFontBuffer( 8, 460, FONT_PRIO_FRONT, itemNameColor, OneLineInfoStr, 0 );
; 424  : 			}
; 425  : 			OneLineInfoStr[0] = NULL;
; 426  : 			return;		// jl 拿到HitDispNo就返回
; 427  : 		}
; 428  : 	}
; 429  : 	// jl 没有文字点击则赋值-1
; 430  : 	HitFontNo = -1;
; 431  : 	for (i = DispBuffer.DispCnt - 1; i >= 0; i--, pDispSort--) {

  002a0	75 59		 jne	 SHORT $LN145@HitMouseCu
$LN5@HitMouseCu:
  002a2	8b b5 f0 fe ff
	ff		 mov	 esi, DWORD PTR _pDispSort$1$[ebp]
  002a8	83 ee 04	 sub	 esi, 4
  002ab	83 ef 01	 sub	 edi, 1
  002ae	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _pDispSort$1$[ebp], esi
  002b4	0f 89 47 fe ff
	ff		 jns	 $LL7@HitMouseCu
$LN6@HitMouseCu:

; 816  : 			return;
; 817  : 		}
; 818  : 	}
; 819  : 	mouse.level = DISP_PRIO_TILE;
; 820  : 	HitDispNo = -1;
; 821  : 	if (TaskBarFlag == FALSE) {

  002ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  002c1	c6 05 44 00 00
	00 01		 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, 1
  002c8	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitDispNo@@3HA, -1 ; HitDispNo
  002d2	75 0f		 jne	 SHORT $LN123@HitMouseCu
$LN160@HitMouseCu:

; 822  : 		ShowBottomLineString(itemNameColor, OneLineInfoStr);
; 823  : 	}
; 824  : 	OneLineInfoStr[0] = NULL;

  002d4	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  002d9	6a 00		 push	 0
  002db	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  002e0	83 c4 08	 add	 esp, 8
$LN123@HitMouseCu:

; 825  : 
; 826  : }

  002e3	5f		 pop	 edi
  002e4	5e		 pop	 esi
  002e5	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?OneLineInfoStr@@3PADA, 0
  002ec	5b		 pop	 ebx
  002ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f0	33 cd		 xor	 ecx, ebp
  002f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f7	8b e5		 mov	 esp, ebp
  002f9	5d		 pop	 ebp
  002fa	c3		 ret	 0
$LN145@HitMouseCu:

; 504  : 				hitFlag = FALSE;
; 505  : 				continue;
; 506  : 			}
; 507  : #endif
; 508  : #endif
; 509  : 			//			StockFontBuffer( pDispInfo->x, pDispInfo->y, FONT_PRIO_FRONT, 0, "Hit", 1 );
; 510  : 			HitDispNo = pDispSort->no;

  002fb	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _pDispSort$1$[ebp]
  00301	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00304	a3 00 00 00 00	 mov	 DWORD PTR ?HitDispNo@@3HA, eax ; HitDispNo

; 511  : 			if (pDispInfo->hitFlag >= 2) {

  00309	83 f9 02	 cmp	 ecx, 2
  0030c	0f 8c c3 00 00
	00		 jl	 $LN35@HitMouseCu

; 512  : 				if (pDispSort->dispPrio >= DISP_PRIO_YES_NO_WND) {

  00312	8b 04 f5 08 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+8]
  00319	8a 5a 02	 mov	 bl, BYTE PTR [edx+2]
  0031c	8b 14 f5 04 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+4]
  00323	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8]
  0032a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0032d	6a 00		 push	 0
  0032f	ff 35 00 00 00
	00		 push	 DWORD PTR ?BoxColor@@3HA ; BoxColor
  00335	80 fb 6d	 cmp	 bl, 109			; 0000006dH
  00338	72 23		 jb	 SHORT $LN36@HitMouseCu

; 513  : #ifndef __CARYTEST
; 514  : 					StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  0033a	0f bf 04 8d 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  00342	83 c0 02	 add	 eax, 2
  00345	03 c2		 add	 eax, edx
  00347	6a 6f		 push	 111			; 0000006fH
  00349	50		 push	 eax
  0034a	0f bf 04 8d 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+4]
  00352	83 c0 02	 add	 eax, 2
  00355	03 c7		 add	 eax, edi
  00357	50		 push	 eax
  00358	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]

; 515  : 						pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 516  : 						pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 517  : 						//DISP_PRIO_BOX2, 250, 0 );
; 518  : 						DISP_PRIO_BOX3, BoxColor, 0);
; 519  : #else
; 520  : 					StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 521  : 						pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 522  : 						pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 523  : 						DISP_PRIO_BOX3, BoxColor, 0);
; 524  : #endif
; 525  : 				}

  0035b	eb 4b		 jmp	 SHORT $LN163@HitMouseCu
$LN36@HitMouseCu:

; 526  : 				else
; 527  : 					if (pDispSort->dispPrio >= DISP_PRIO_MENU) {

  0035d	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  00360	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv4256[ebp], eax
  00366	0f bf 04 8d 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  0036e	83 c0 02	 add	 eax, 2
  00371	03 c2		 add	 eax, edx
  00373	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv4103[ebp], eax
  00379	0f bf 04 8d 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+4]
  00381	83 c0 02	 add	 eax, 2
  00384	03 c7		 add	 eax, edi
  00386	80 fb 68	 cmp	 bl, 104			; 00000068H
  00389	72 0e		 jb	 SHORT $LN38@HitMouseCu

; 528  : #ifndef __CARYTEST
; 529  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  0038b	6a 6b		 push	 107			; 0000006bH
  0038d	ff b5 f4 fe ff
	ff		 push	 DWORD PTR tv4103[ebp]
  00393	50		 push	 eax
  00394	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]

; 530  : 							pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 531  : 							pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 532  : 							//DISP_PRIO_BOX2, 250, 0 );
; 533  : 							DISP_PRIO_BOX2, BoxColor, 0);
; 534  : #else
; 535  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 536  : 							pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 537  : 							pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 538  : 							DISP_PRIO_BOX2, BoxColor, 0);
; 539  : #endif
; 540  : 					}else {

  00397	eb 0f		 jmp	 SHORT $LN163@HitMouseCu
$LN38@HitMouseCu:

; 541  : #ifndef __CARYTEST
; 542  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  00399	6a 65		 push	 101			; 00000065H
  0039b	ff b5 f4 fe ff
	ff		 push	 DWORD PTR tv4103[ebp]
  003a1	50		 push	 eax
  003a2	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv4256[ebp]
$LN163@HitMouseCu:

; 543  : 							pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 544  : 							pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 545  : 							//DISP_PRIO_BOX, 250, 0 );
; 546  : 							DISP_PRIO_BOX, BoxColor, 0);
; 547  : 						//pDispSort->dispPrio, 250, 0 );
; 548  : #else
; 549  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 550  : 							pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 551  : 							pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 552  : 							DISP_PRIO_BOX, BoxColor, 0);
; 553  : #endif
; 554  : 					}
; 555  : 					if (pDispInfo->hitFlag >= 3) CheckGroupSelect(pDispInfo->hitFlag);

  003a8	50		 push	 eax
  003a9	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  003b2	8b 04 f5 10 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16]
  003b9	83 c4 1c	 add	 esp, 28			; 0000001cH
  003bc	83 f8 03	 cmp	 eax, 3
  003bf	7c 09		 jl	 SHORT $LN40@HitMouseCu
  003c1	50		 push	 eax
  003c2	e8 00 00 00 00	 call	 ?CheckGroupSelect@@YAXH@Z ; CheckGroupSelect
  003c7	83 c4 04	 add	 esp, 4
$LN40@HitMouseCu:

; 556  : 					SortDispBuffer();

  003ca	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer
  003cf	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
$LN35@HitMouseCu:

; 557  : 			}
; 558  : 			if (TaskBarFlag == FALSE){

  003d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  003dc	0f 85 7b 07 00
	00		 jne	 $LN122@HitMouseCu

; 559  : 				if (pDispInfo->pAct != NULL){

  003e2	8b 14 f5 0c 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12]
  003e9	85 d2		 test	 edx, edx
  003eb	0f 84 53 07 00
	00		 je	 $LN159@HitMouseCu

; 560  : 					if (pDispInfo->pAct->atr & ACT_ATR_INFO){

  003f1	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  003f7	a8 10		 test	 al, 16			; 00000010H
  003f9	0f 84 45 07 00
	00		 je	 $LN159@HitMouseCu

; 561  : 						if (ProcNo == PROC_GAME){

  003ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ProcNo@@3IA ; ProcNo
  00405	83 f9 09	 cmp	 ecx, 9
  00408	0f 85 1b 04 00
	00		 jne	 $LN44@HitMouseCu

; 562  : #ifdef _MOUSE_SHOW_INFO_FOR_HEAD
; 563  : 							extern short nameOverTheHeadFlag;
; 564  : 							if (!nameOverTheHeadFlag){//F11开启时，不显示

  0040e	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?nameOverTheHeadFlag@@3FA, 0 ; nameOverTheHeadFlag
  00416	75 58		 jne	 SHORT $LN46@HitMouseCu

; 565  : 								char msg[256];
; 566  : 								sprintf( msg, "%s", pDispInfo->pAct->name);

  00418	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  0041b	50		 push	 eax
  0041c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$1[ebp]
  00422	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00427	50		 push	 eax
  00428	e8 00 00 00 00	 call	 _sprintf

; 567  : 								int left = GetStrWidth(msg) / 2;

  0042d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$1[ebp]
  00433	50		 push	 eax
  00434	e8 00 00 00 00	 call	 ?GetStrWidth@@YAHPAD@Z	; GetStrWidth
  00439	99		 cdq

; 568  : 								StockFontBuffer( pDispInfo->pAct->x-left, pDispInfo->pAct->y-10, FONT_PRIO_FRONT, 0, msg, 0 );

  0043a	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$1[ebp]
  00440	2b c2		 sub	 eax, edx
  00442	8b d0		 mov	 edx, eax
  00444	8b 04 f5 0c 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12]
  0044b	6a 00		 push	 0
  0044d	51		 push	 ecx
  0044e	6a 00		 push	 0
  00450	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00453	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00456	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  00459	d1 fa		 sar	 edx, 1
  0045b	6a 01		 push	 1
  0045d	51		 push	 ecx
  0045e	2b c2		 sub	 eax, edx
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00466	8b 14 f5 0c 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12]
  0046d	83 c4 28	 add	 esp, 40			; 00000028H
$LN46@HitMouseCu:

; 569  : 								//StockFontBuffer(pDispInfo->x + 20 - left, pDispInfo->y - 10, FONT_PRIO_FRONT, itemNameColor, pDispInfo->pAct->name, 0);
; 570  : 
; 571  : 							}
; 572  : #endif
; 573  : #ifdef _STONEAGE_NG
; 574  : 							if (DllInterface.MouseShowName != NULL) {
; 575  : 								if (DllOptionCheck.MouseShowName == TRUE) {
; 576  : 									DllInterface.MouseShowName(pDispInfo);
; 577  : 								}
; 578  : 							}
; 579  : #endif
; 580  : 							if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PC){

  00470	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00476	84 c0		 test	 al, al
  00478	0f 89 92 01 00
	00		 jns	 $LN47@HitMouseCu

; 581  : 								itemNameColor = pDispInfo->pAct->itemNameColor;
; 582  : 								if (pDispInfo->pAct->freeName[0] != NULL) {

  0047e	80 7a 55 00	 cmp	 BYTE PTR [edx+85], 0
  00482	8d 4a 55	 lea	 ecx, DWORD PTR [edx+85]
  00485	8b ba 94 00 00
	00		 mov	 edi, DWORD PTR [edx+148]
  0048b	8d b2 98 01 00
	00		 lea	 esi, DWORD PTR [edx+408]
  00491	8a 1e		 mov	 bl, BYTE PTR [esi]
  00493	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00496	89 bd f4 fe ff
	ff		 mov	 DWORD PTR _itemNameColor$1$[ebp], edi
  0049c	0f 84 be 00 00
	00		 je	 $LN49@HitMouseCu

; 583  : 									//sprintf_s( OneLineInfoStr,"%s [%s] Lv：%d  耐：%d／%d  气：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp );
; 584  : 									if (pDispInfo->pAct->petName[0] != NULL){

  004a2	84 db		 test	 bl, bl
  004a4	74 67		 je	 SHORT $LN51@HitMouseCu

; 585  : 										if (pc.familyName[0] != NULL){

  004a6	80 3d f6 50 00
	00 00		 cmp	 BYTE PTR ?pc@@3UPC@@A+20726, 0
  004ad	8b ba ac 01 00
	00		 mov	 edi, DWORD PTR [edx+428]
  004b3	57		 push	 edi
  004b4	56		 push	 esi
  004b5	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  004bb	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  004c1	ff 72 78	 push	 DWORD PTR [edx+120]
  004c4	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  004ca	51		 push	 ecx
  004cb	50		 push	 eax
  004cc	74 22		 je	 SHORT $LN53@HitMouseCu

; 586  : 											sprintf_s(OneLineInfoStr, "{%s} %s [%s]    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d",

  004ce	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  004d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@
  004d8	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  004dd	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  004e2	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  004e8	83 c4 2c	 add	 esp, 44			; 0000002cH
  004eb	e9 56 06 00 00	 jmp	 $LN121@HitMouseCu
$LN53@HitMouseCu:

; 587  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp,
; 588  : 												pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 589  : 										}else{
; 590  : 											sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d",

  004f0	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
  004f5	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  004fa	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  004ff	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  00505	83 c4 28	 add	 esp, 40			; 00000028H
  00508	e9 39 06 00 00	 jmp	 $LN121@HitMouseCu
$LN51@HitMouseCu:

; 591  : 												pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp,
; 592  : 												pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 593  : 										}
; 594  : 									}else{
; 595  : 										if (pc.familyName[0] != NULL)

  0050d	80 3d f6 50 00
	00 00		 cmp	 BYTE PTR ?pc@@3UPC@@A+20726, 0
  00514	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  0051a	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00520	ff 72 78	 push	 DWORD PTR [edx+120]
  00523	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00529	51		 push	 ecx
  0052a	50		 push	 eax
  0052b	74 1c		 je	 SHORT $LN55@HitMouseCu

; 596  : 											sprintf_s(OneLineInfoStr, "{%s} %s [%s]    레벨：%d  체력：%d／%d 기력：%d",

  0052d	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  00532	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@
  00537	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0053c	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00541	83 c4 24	 add	 esp, 36			; 00000024H
  00544	e9 fd 05 00 00	 jmp	 $LN121@HitMouseCu
$LN55@HitMouseCu:

; 597  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 598  : 										else
; 599  : 											sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d  체력：%d／%d 기력：%d",

  00549	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
  0054e	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00553	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00558	83 c4 20	 add	 esp, 32			; 00000020H

; 600  : 												pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 601  : 									}
; 602  : 								}else {

  0055b	e9 e6 05 00 00	 jmp	 $LN121@HitMouseCu
$LN49@HitMouseCu:

; 603  : 									//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d  气：%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp );
; 604  : 									if (pDispInfo->pAct->petName[0] != NULL)

  00560	84 db		 test	 bl, bl
  00562	74 5a		 je	 SHORT $LN57@HitMouseCu

; 605  : 										if (pc.familyName[0] != NULL)

  00564	80 3d f6 50 00
	00 00		 cmp	 BYTE PTR ?pc@@3UPC@@A+20726, 0
  0056b	8b 8a ac 01 00
	00		 mov	 ecx, DWORD PTR [edx+428]
  00571	51		 push	 ecx
  00572	56		 push	 esi
  00573	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  00579	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  0057f	ff 72 78	 push	 DWORD PTR [edx+120]
  00582	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00588	50		 push	 eax
  00589	74 1c		 je	 SHORT $LN59@HitMouseCu

; 606  : 											sprintf_s(OneLineInfoStr, "{%s} %s    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d",

  0058b	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  00590	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
  00595	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0059a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0059f	83 c4 28	 add	 esp, 40			; 00000028H
  005a2	e9 9f 05 00 00	 jmp	 $LN121@HitMouseCu
$LN59@HitMouseCu:

; 607  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 608  : 										else
; 609  : 											sprintf_s(OneLineInfoStr, "%s    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d",

  005a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
  005ac	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  005b1	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  005b6	83 c4 24	 add	 esp, 36			; 00000024H
  005b9	e9 88 05 00 00	 jmp	 $LN121@HitMouseCu
$LN57@HitMouseCu:

; 610  : 												pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 611  : 									else
; 612  : 										if (pc.familyName[0] != NULL)

  005be	80 3d f6 50 00
	00 00		 cmp	 BYTE PTR ?pc@@3UPC@@A+20726, 0
  005c5	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  005cb	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  005d1	ff 72 78	 push	 DWORD PTR [edx+120]
  005d4	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  005da	50		 push	 eax
  005db	74 1c		 je	 SHORT $LN61@HitMouseCu

; 613  : 											sprintf_s(OneLineInfoStr, "{%s} %s    레벨：%d   체력：%d／%d 기력：%d",

  005dd	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  005e2	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD@
  005e7	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  005ec	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  005f1	83 c4 20	 add	 esp, 32			; 00000020H
  005f4	e9 4d 05 00 00	 jmp	 $LN121@HitMouseCu
$LN61@HitMouseCu:

; 614  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 615  : 										else
; 616  : 											sprintf_s(OneLineInfoStr, "%s    레벨：%d   체력：%d／%d 기력：%d",

  005f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB@
  005fe	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00603	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00608	83 c4 1c	 add	 esp, 28			; 0000001cH

; 617  : 												pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 618  : 								}
; 619  : 							}else

  0060b	e9 36 05 00 00	 jmp	 $LN121@HitMouseCu
$LN47@HitMouseCu:

; 620  : 								if (pDispInfo->pAct->atr & ACT_ATR_TYPE_OTHER_PC) {

  00610	a9 00 01 00 00	 test	 eax, 256		; 00000100H
  00615	0f 84 86 01 00
	00		 je	 $LN63@HitMouseCu

; 621  : #ifdef _MOUSE_DBL_CLICK
; 622  : 									if (mouseDblRightOn) {

  0061b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouseDblRightOn@@3HA, 0 ; mouseDblRightOn
  00622	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00625	74 22		 je	 SHORT $LN65@HitMouseCu

; 623  : 										openServerWindow(WINDOW_MESSAGETYPE_MOUSEGETNAME, 0, 0, 0, pDispInfo->pAct->name);

  00627	50		 push	 eax
  00628	6a 00		 push	 0
  0062a	6a 00		 push	 0
  0062c	6a 00		 push	 0
  0062e	6a 67		 push	 103			; 00000067H
  00630	e8 00 00 00 00	 call	 ?openServerWindow@@YAXHHHHPAD@Z ; openServerWindow
  00635	83 c4 14	 add	 esp, 20			; 00000014H
  00638	5f		 pop	 edi

; 825  : 
; 826  : }

  00639	5e		 pop	 esi
  0063a	5b		 pop	 ebx
  0063b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0063e	33 cd		 xor	 ecx, ebp
  00640	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00645	8b e5		 mov	 esp, ebp
  00647	5d		 pop	 ebp
  00648	c3		 ret	 0
$LN65@HitMouseCu:

; 624  : 										return;
; 625  : 									}
; 626  : #endif
; 627  : 									itemNameColor = pDispInfo->pAct->itemNameColor;
; 628  : 									if (pDispInfo->pAct->freeName[0] != NULL) {

  00649	80 7a 55 00	 cmp	 BYTE PTR [edx+85], 0
  0064d	8d 72 55	 lea	 esi, DWORD PTR [edx+85]
  00650	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  00656	8d ba 98 01 00
	00		 lea	 edi, DWORD PTR [edx+408]
  0065c	8a 3f		 mov	 bh, BYTE PTR [edi]
  0065e	8a 9a 70 01 00
	00		 mov	 bl, BYTE PTR [edx+368]
  00664	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _itemNameColor$1$[ebp], ecx
  0066a	8d 8a 70 01 00
	00		 lea	 ecx, DWORD PTR [edx+368]
  00670	0f 84 a7 00 00
	00		 je	 $LN66@HitMouseCu

; 629  : 										//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 630  : 										if (pDispInfo->pAct->petName[0] != NULL)

  00676	88 9d fb fe ff
	ff		 mov	 BYTE PTR tv4137[ebp], bl
  0067c	84 ff		 test	 bh, bh
  0067e	74 55		 je	 SHORT $LN68@HitMouseCu

; 631  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  00680	80 bd fb fe ff
	ff 00		 cmp	 BYTE PTR tv4137[ebp], 0
  00687	8b 9a ac 01 00
	00		 mov	 ebx, DWORD PTR [edx+428]
  0068d	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  00693	53		 push	 ebx
  00694	57		 push	 edi
  00695	52		 push	 edx
  00696	56		 push	 esi
  00697	50		 push	 eax
  00698	74 1e		 je	 SHORT $LN70@HitMouseCu

; 632  : 												sprintf_s(OneLineInfoStr, "{%s} %s [%s]    레벨：%d [탑승]%s 레벨：%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  0069a	51		 push	 ecx
  0069b	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN@
  006a0	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  006a5	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  006aa	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  006b0	83 c4 20	 add	 esp, 32			; 00000020H
  006b3	e9 8e 04 00 00	 jmp	 $LN121@HitMouseCu
$LN70@HitMouseCu:

; 633  : 											else
; 634  : 												sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d [탑승]%s 레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  006b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
  006bd	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  006c2	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  006c7	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  006cd	83 c4 1c	 add	 esp, 28			; 0000001cH
  006d0	e9 71 04 00 00	 jmp	 $LN121@HitMouseCu
$LN68@HitMouseCu:

; 635  : 										else
; 636  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  006d5	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  006db	52		 push	 edx
  006dc	56		 push	 esi
  006dd	50		 push	 eax
  006de	84 db		 test	 bl, bl
  006e0	74 1e		 je	 SHORT $LN72@HitMouseCu

; 637  : 												sprintf_s(OneLineInfoStr, "{%s} %s [%s]    레벨：%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  006e2	51		 push	 ecx
  006e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  006e8	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  006ed	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  006f2	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  006f8	83 c4 18	 add	 esp, 24			; 00000018H
  006fb	e9 46 04 00 00	 jmp	 $LN121@HitMouseCu
$LN72@HitMouseCu:

; 638  : 											else
; 639  : 												sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00700	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
$LN166@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00705	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0070a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0070f	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  00715	83 c4 14	 add	 esp, 20			; 00000014H
  00718	e9 29 04 00 00	 jmp	 $LN121@HitMouseCu
$LN66@HitMouseCu:

; 640  : 									}else{
; 641  : 										//sprintf_s( OneLineInfoStr,"%s  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 642  : 										if (pDispInfo->pAct->petName[0] != NULL)

  0071d	84 ff		 test	 bh, bh
  0071f	74 4f		 je	 SHORT $LN74@HitMouseCu

; 643  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  00721	8b b2 ac 01 00
	00		 mov	 esi, DWORD PTR [edx+428]
  00727	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  0072d	56		 push	 esi
  0072e	57		 push	 edi
  0072f	52		 push	 edx
  00730	50		 push	 eax
  00731	84 db		 test	 bl, bl
  00733	74 1e		 je	 SHORT $LN76@HitMouseCu

; 644  : 												sprintf_s(OneLineInfoStr, "{%s} %s    레벨：%d [탑승]%s 레벨：%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  00735	51		 push	 ecx
  00736	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
  0073b	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00740	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00745	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  0074b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0074e	e9 f3 03 00 00	 jmp	 $LN121@HitMouseCu
$LN76@HitMouseCu:

; 645  : 											else
; 646  : 												sprintf_s(OneLineInfoStr, "%s    레벨：%d [탑승]%s 레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  00753	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@
  00758	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0075d	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00762	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  00768	83 c4 18	 add	 esp, 24			; 00000018H
  0076b	e9 d6 03 00 00	 jmp	 $LN121@HitMouseCu
$LN74@HitMouseCu:

; 647  : 										else
; 648  : 											if (pDispInfo->pAct->fmname[0] != NULL) {

  00770	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  00776	52		 push	 edx
  00777	50		 push	 eax
  00778	84 db		 test	 bl, bl
  0077a	74 08		 je	 SHORT $LN78@HitMouseCu

; 649  : 												sprintf_s(OneLineInfoStr, "{%s} %s    레벨：%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->level);

  0077c	51		 push	 ecx
  0077d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@

; 650  : 											}

  00782	eb 81		 jmp	 SHORT $LN166@HitMouseCu
$LN78@HitMouseCu:

; 651  : 											else {
; 652  : 												sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  00784	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  00789	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0078e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00793	8b bd f4 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  00799	83 c4 10	 add	 esp, 16			; 00000010H
  0079c	e9 a5 03 00 00	 jmp	 $LN121@HitMouseCu
$LN63@HitMouseCu:

; 653  : 											}
; 654  : 									}
; 655  : 								}else
; 656  : 									if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PET) {//对像单纯是宠物

  007a1	a9 00 02 00 00	 test	 eax, 512		; 00000200H
  007a6	74 20		 je	 SHORT $LN80@HitMouseCu

; 657  : 										if (pDispInfo->pAct->freeName[0] != NULL) {
; 658  : 											sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->freeName, pDispInfo->pAct->level);
; 659  : 										}
; 660  : 										else {
; 661  : 											sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);
; 662  : 										}
; 663  : 									}else

  007a8	80 7a 55 00	 cmp	 BYTE PTR [edx+85], 0
  007ac	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  007b1	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  007b6	0f 44 c8	 cmove	 ecx, eax
  007b9	03 ca		 add	 ecx, edx
$LN93@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  007bb	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  007c1	50		 push	 eax
  007c2	51		 push	 ecx
  007c3	e9 6a 03 00 00	 jmp	 $LN168@HitMouseCu
$LN80@HitMouseCu:

; 664  : 										if (pDispInfo->pAct->atr & ACT_ATR_TYPE_ITEM) {

  007c8	a9 00 04 00 00	 test	 eax, 1024		; 00000400H
  007cd	74 2b		 je	 SHORT $LN84@HitMouseCu

; 665  : 											itemNameColor = pDispInfo->pAct->itemNameColor;

  007cf	8b ba 94 00 00
	00		 mov	 edi, DWORD PTR [edx+148]

; 666  : 											sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);

  007d5	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  007d8	50		 push	 eax
  007d9	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  007de	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  007e3	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  007e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 667  : #ifdef _ITEM_PATH
; 668  : 											ITEMPATHFLAG = TRUE;

  007eb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ITEMPATHFLAG@@3HA, 1 ; ITEMPATHFLAG

; 669  : #endif
; 670  : 										}else

  007f5	e9 4c 03 00 00	 jmp	 $LN121@HitMouseCu
$LN84@HitMouseCu:

; 671  : 											if (pDispInfo->pAct->atr & ACT_ATR_TYPE_GOLD) {

  007fa	a9 00 08 00 00	 test	 eax, 2048		; 00000800H
  007ff	74 1b		 je	 SHORT $LN86@HitMouseCu
$LN165@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00801	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00804	50		 push	 eax
  00805	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0080a	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0080f	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00814	83 c4 0c	 add	 esp, 12			; 0000000cH
  00817	e9 28 03 00 00	 jmp	 $LN159@HitMouseCu
$LN86@HitMouseCu:

; 672  : 												sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);
; 673  : 											}else
; 674  : 												if (pDispInfo->pAct->atr & ACT_ATR_TYPE_OTHER) {

  0081c	a9 00 10 00 00	 test	 eax, 4096		; 00001000H
  00821	0f 84 1d 03 00
	00		 je	 $LN159@HitMouseCu

; 675  : 													sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);
; 676  : 												}
; 677  : 						}else

  00827	eb d8		 jmp	 SHORT $LN165@HitMouseCu
$LN44@HitMouseCu:

; 678  : 							if (ProcNo == PROC_BATTLE) {

  00829	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0082c	0f 85 12 03 00
	00		 jne	 $LN159@HitMouseCu

; 679  : 								if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PET) {

  00832	a9 00 02 00 00	 test	 eax, 512		; 00000200H
  00837	74 1d		 je	 SHORT $LN90@HitMouseCu

; 680  : 									if (pDispInfo->pAct->freeName[0] != NULL) {

  00839	80 7a 55 00	 cmp	 BYTE PTR [edx+85], 0
  0083d	8d 4a 55	 lea	 ecx, DWORD PTR [edx+85]
  00840	0f 85 75 ff ff
	ff		 jne	 $LN93@HitMouseCu

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00846	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0084c	8d 4a 38	 lea	 ecx, DWORD PTR [edx+56]
  0084f	50		 push	 eax
  00850	51		 push	 ecx
  00851	e9 dc 02 00 00	 jmp	 $LN168@HitMouseCu
$LN90@HitMouseCu:

; 681  : 										sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->freeName, pDispInfo->pAct->level);
; 682  : 									}else {
; 683  : 										sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);
; 684  : 									}
; 685  : 								}else
; 686  : 									if (pDispInfo->pAct->atr & ACT_ATR_TYPE_ITEM) {

  00856	a9 00 04 00 00	 test	 eax, 1024		; 00000400H
  0085b	75 a4		 jne	 SHORT $LN165@HitMouseCu

; 687  : 										//itemNameColor = pDispInfo->pAct->itemNameColor;
; 688  : 										sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);
; 689  : 									}else
; 690  : 										if (BattleMyNo < BATTLKPKPLYAERNUM) {

  0085d	8d 4a 55	 lea	 ecx, DWORD PTR [edx+85]
  00860	83 fb 14	 cmp	 ebx, 20			; 00000014H
  00863	0f 8d a3 02 00
	00		 jge	 $LN96@HitMouseCu

; 691  : 											if (((ATR_EQU *)pDispInfo->pAct->pYobi)->place_no == BattleMyNo) {

  00869	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]
  0086c	0f b6 86 1f 01
	00 00		 movzx	 eax, BYTE PTR [esi+287]
  00873	3b c3		 cmp	 eax, ebx
  00875	0f 85 00 01 00
	00		 jne	 $LN98@HitMouseCu

; 692  : 												if (pDispInfo->pAct->freeName[0] != NULL) {

  0087b	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0087e	8d 72 38	 lea	 esi, DWORD PTR [edx+56]
  00881	8b 82 94 01 00
	00		 mov	 eax, DWORD PTR [edx+404]
  00887	74 7a		 je	 SHORT $LN100@HitMouseCu

; 693  : 													if (pDispInfo->pAct->onRide == 1)

  00889	83 f8 01	 cmp	 eax, 1
  0088c	75 47		 jne	 SHORT $LN102@HitMouseCu

; 694  : 														sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d 기력：%d [탑승]%s 레벨：%d 체력：%d／%d",

  0088e	ff b2 b4 01 00
	00		 push	 DWORD PTR [edx+436]
  00894	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  0089a	ff b2 b0 01 00
	00		 push	 DWORD PTR [edx+432]
  008a0	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  008a6	50		 push	 eax
  008a7	ff b2 84 00 00
	00		 push	 DWORD PTR [edx+132]
  008ad	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  008b3	ff 72 78	 push	 DWORD PTR [edx+120]
  008b6	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  008bc	51		 push	 ecx
  008bd	56		 push	 esi
  008be	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  008c3	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  008c8	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  008cd	83 c4 30	 add	 esp, 48			; 00000030H
  008d0	e9 6f 02 00 00	 jmp	 $LN159@HitMouseCu
$LN102@HitMouseCu:

; 695  : 															pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp,
; 696  : 															pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 697  : 													else
; 698  : 														sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d 기력：%d",

  008d5	ff b2 84 00 00
	00		 push	 DWORD PTR [edx+132]
  008db	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  008e1	ff 72 78	 push	 DWORD PTR [edx+120]
  008e4	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  008ea	51		 push	 ecx
  008eb	56		 push	 esi
  008ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  008f1	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  008f6	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  008fb	83 c4 20	 add	 esp, 32			; 00000020H

; 699  : 															pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp);
; 700  : 												}

  008fe	e9 41 02 00 00	 jmp	 $LN159@HitMouseCu
$LN100@HitMouseCu:

; 701  : 												else {
; 702  : 													//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d  气：%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, BattleMyMp );
; 703  : 													//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d  气：%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp );
; 704  : 													if (pDispInfo->pAct->onRide == 1)

  00903	83 f8 01	 cmp	 eax, 1
  00906	75 46		 jne	 SHORT $LN104@HitMouseCu

; 705  : 														sprintf_s(OneLineInfoStr, "%s    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d 체력：%d／%d",

  00908	ff b2 b4 01 00
	00		 push	 DWORD PTR [edx+436]
  0090e	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00914	ff b2 b0 01 00
	00		 push	 DWORD PTR [edx+432]
  0091a	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  00920	50		 push	 eax
  00921	ff b2 84 00 00
	00		 push	 DWORD PTR [edx+132]
  00927	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  0092d	ff 72 78	 push	 DWORD PTR [edx+120]
  00930	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00936	56		 push	 esi
  00937	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
  0093c	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00941	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00946	83 c4 2c	 add	 esp, 44			; 0000002cH
  00949	e9 f6 01 00 00	 jmp	 $LN159@HitMouseCu
$LN104@HitMouseCu:

; 706  : 															pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp,
; 707  : 															pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 708  : 													else
; 709  : 														sprintf_s(OneLineInfoStr, "%s    레벨：%d  체력：%d／%d 기력：%d",

  0094e	ff b2 84 00 00
	00		 push	 DWORD PTR [edx+132]
  00954	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  0095a	ff 72 78	 push	 DWORD PTR [edx+120]
  0095d	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00963	56		 push	 esi
  00964	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
  00969	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0096e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00973	83 c4 1c	 add	 esp, 28			; 0000001cH

; 710  : 															pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp);
; 711  : 												}
; 712  : 											}else

  00976	e9 c9 01 00 00	 jmp	 $LN159@HitMouseCu
$LN98@HitMouseCu:

; 713  : 												if (((ATR_EQU *)p_party[BattleMyNo]->pYobi)->group_flg == ((ATR_EQU *)pDispInfo->pAct->pYobi)->group_flg) {

  0097b	8a 01		 mov	 al, BYTE PTR [ecx]
  0097d	88 85 fb fe ff
	ff		 mov	 BYTE PTR tv4262[ebp], al
  00983	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[ebx*4]
  0098a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0098d	0f b6 40 5e	 movzx	 eax, BYTE PTR [eax+94]
  00991	3a 46 5e	 cmp	 al, BYTE PTR [esi+94]
  00994	8b 82 94 01 00
	00		 mov	 eax, DWORD PTR [edx+404]
  0099a	0f 85 e6 00 00
	00		 jne	 $LN106@HitMouseCu

; 714  : 													//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%4d/%4d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 715  : 													if (pDispInfo->pAct->freeName[0] != NULL) {

  009a0	80 bd fb fe ff
	ff 00		 cmp	 BYTE PTR tv4262[ebp], 0
  009a7	8d 72 38	 lea	 esi, DWORD PTR [edx+56]
  009aa	74 6e		 je	 SHORT $LN108@HitMouseCu

; 716  : 														//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 717  : 														if (pDispInfo->pAct->onRide == 1)

  009ac	83 f8 01	 cmp	 eax, 1
  009af	75 41		 jne	 SHORT $LN110@HitMouseCu

; 718  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d [탑승]%s Lv：%d 체력：%d／%d",

  009b1	ff b2 b4 01 00
	00		 push	 DWORD PTR [edx+436]
  009b7	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  009bd	ff b2 b0 01 00
	00		 push	 DWORD PTR [edx+432]
  009c3	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  009c9	50		 push	 eax
  009ca	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  009d0	ff 72 78	 push	 DWORD PTR [edx+120]
  009d3	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  009d9	51		 push	 ecx
  009da	56		 push	 esi
  009db	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  009e0	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  009e5	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  009ea	83 c4 2c	 add	 esp, 44			; 0000002cH
  009ed	e9 52 01 00 00	 jmp	 $LN159@HitMouseCu
$LN110@HitMouseCu:

; 719  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp,
; 720  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 721  : 														else
; 722  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d",

  009f2	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  009f8	ff 72 78	 push	 DWORD PTR [edx+120]
  009fb	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00a01	51		 push	 ecx
  00a02	56		 push	 esi
  00a03	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  00a08	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00a0d	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a12	83 c4 1c	 add	 esp, 28			; 0000001cH

; 723  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 724  : 													}else {

  00a15	e9 2a 01 00 00	 jmp	 $LN159@HitMouseCu
$LN108@HitMouseCu:

; 725  : 														//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 726  : 														if (pDispInfo->pAct->onRide == 1)

  00a1a	83 f8 01	 cmp	 eax, 1
  00a1d	75 40		 jne	 SHORT $LN112@HitMouseCu

; 727  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d／%d [탑승]%s 레벨：%d 체력：%d／%d",

  00a1f	ff b2 b4 01 00
	00		 push	 DWORD PTR [edx+436]
  00a25	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00a2b	ff b2 b0 01 00
	00		 push	 DWORD PTR [edx+432]
  00a31	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  00a37	50		 push	 eax
  00a38	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00a3e	ff 72 78	 push	 DWORD PTR [edx+120]
  00a41	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00a47	56		 push	 esi
  00a48	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO@
  00a4d	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00a52	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a57	83 c4 28	 add	 esp, 40			; 00000028H
  00a5a	e9 e5 00 00 00	 jmp	 $LN159@HitMouseCu
$LN112@HitMouseCu:

; 728  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp,
; 729  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 730  : 														else
; 731  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d／%d",

  00a5f	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00a65	ff 72 78	 push	 DWORD PTR [edx+120]
  00a68	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00a6e	56		 push	 esi
  00a6f	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
  00a74	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00a79	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a7e	83 c4 18	 add	 esp, 24			; 00000018H

; 732  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 733  : 													}
; 734  : 												}else{

  00a81	e9 be 00 00 00	 jmp	 $LN159@HitMouseCu
$LN106@HitMouseCu:

; 735  : 													if (pDispInfo->pAct->freeName[0] != NULL) {

  00a86	80 bd fb fe ff
	ff 00		 cmp	 BYTE PTR tv4262[ebp], 0
  00a8d	74 44		 je	 SHORT $LN114@HitMouseCu

; 736  : 														//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 737  : 														if (pDispInfo->pAct->onRide == 1)

  00a8f	83 f8 01	 cmp	 eax, 1
  00a92	75 13		 jne	 SHORT $LN116@HitMouseCu

; 738  : #ifdef _CAX_LOOK_HPMP
; 739  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d [탑승]%s 레벨：%d 체력：%d",
; 740  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 741  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 742  : #else
; 743  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d [탑승]%s 레벨：%d",

  00a94	8b ba ac 01 00
	00		 mov	 edi, DWORD PTR [edx+428]
  00a9a	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00aa0	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
  00aa5	eb 0e		 jmp	 SHORT $LN117@HitMouseCu
$LN116@HitMouseCu:

; 744  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level,
; 745  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 746  : #endif
; 747  : 														else
; 748  : #ifndef _CAX_LOOK_HPMP
; 749  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d",

  00aa7	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00aaa	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  00aaf	8b ba 80 00 00
	00		 mov	 edi, DWORD PTR [edx+128]
$LN117@HitMouseCu:

; 750  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 751  : #else
; 752  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d",
; 753  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);
; 754  : #endif
; 755  : 													}else{

  00ab5	57		 push	 edi
  00ab6	50		 push	 eax
  00ab7	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00abd	50		 push	 eax
  00abe	51		 push	 ecx
  00abf	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00ac2	50		 push	 eax
  00ac3	56		 push	 esi
  00ac4	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00ac9	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00ace	83 c4 1c	 add	 esp, 28			; 0000001cH
  00ad1	eb 71		 jmp	 SHORT $LN159@HitMouseCu
$LN114@HitMouseCu:

; 756  : 														//sprintf_s( OneLineInfoStr,"%s  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 757  : 														if (pDispInfo->pAct->onRide == 1)

  00ad3	8d 4a 38	 lea	 ecx, DWORD PTR [edx+56]
  00ad6	83 f8 01	 cmp	 eax, 1
  00ad9	75 28		 jne	 SHORT $LN118@HitMouseCu

; 758  : #ifdef _CAX_LOOK_HPMP
; 759  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d [탑승]%s 레벨：%d 체력：%d",
; 760  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 761  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 762  : #else
; 763  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d [탑승]%s 레벨：%d",

  00adb	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  00ae1	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00ae7	50		 push	 eax
  00ae8	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00aee	51		 push	 ecx
  00aef	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@
  00af4	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00af9	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00afe	83 c4 18	 add	 esp, 24			; 00000018H
  00b01	eb 41		 jmp	 SHORT $LN159@HitMouseCu
$LN118@HitMouseCu:

; 764  : 																pDispInfo->pAct->name, pDispInfo->pAct->level,
; 765  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 766  : #endif
; 767  : 														else
; 768  : #ifdef _CAX_LOOK_HPMP
; 769  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d／%d",
; 770  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 771  : #else
; 772  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  00b03	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00b09	51		 push	 ecx
  00b0a	eb 26		 jmp	 SHORT $LN168@HitMouseCu
$LN96@HitMouseCu:

; 773  : #endif
; 774  : 													}
; 775  : 												}
; 776  : 										}else{
; 777  : #ifdef _CAX_LOOK_HPMP
; 778  : 											if (pDispInfo->pAct->freeName[0] != NULL) {
; 779  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 780  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 781  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 782  : 												sprintf(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d [탑승]%s 레벨：%d 耐：%d",
; 783  : 													pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 784  : 													pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 785  : 											}else{
; 786  : 												//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 787  : 												//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 788  : 												//sprintf_s( OneLineInfoStr,"%s  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 789  : 												if (pDispInfo->pAct->petLevel == 0) {
; 790  : 													sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 791  : 												}
; 792  : 												else {
; 793  : 													sprintf(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d [탑승]%s 레벨：%d 체력：%d",
; 794  : 														pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 795  : 														pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 796  : 												}
; 797  : 											}
; 798  : #else
; 799  : 											if (pDispInfo->pAct->freeName[0] != NULL) {

  00b0c	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00b0f	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00b12	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  00b18	52		 push	 edx
  00b19	74 16		 je	 SHORT $LN120@HitMouseCu

; 800  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 801  : 												sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00b1b	51		 push	 ecx
  00b1c	50		 push	 eax
  00b1d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  00b22	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00b27	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00b2c	83 c4 14	 add	 esp, 20			; 00000014H

; 802  : 											}else{

  00b2f	eb 13		 jmp	 SHORT $LN159@HitMouseCu
$LN120@HitMouseCu:

; 803  : 												//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 804  : 												sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  00b31	50		 push	 eax
$LN168@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00b32	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  00b37	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00b3c	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00b41	83 c4 10	 add	 esp, 16			; 00000010H
$LN159@HitMouseCu:
  00b44	33 ff		 xor	 edi, edi
$LN121@HitMouseCu:
  00b46	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?oneLineInfoFlag@@3HA, 0 ; oneLineInfoFlag
  00b4d	74 0e		 je	 SHORT $LN122@HitMouseCu

; 812  : 					ShowBottomLineString(itemNameColor, OneLineInfoStr);

  00b4f	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00b54	57		 push	 edi
  00b55	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  00b5a	83 c4 08	 add	 esp, 8
$LN122@HitMouseCu:

; 813  : 			}
; 814  : 			OneLineInfoStr[0] = NULL;
; 815  : 			mouse.level = pDispSort->dispPrio;

  00b5d	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pDispSort$1$[ebp]

; 825  : 
; 826  : }

  00b63	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b66	5f		 pop	 edi
  00b67	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?OneLineInfoStr@@3PADA, 0
  00b6e	33 cd		 xor	 ecx, ebp
  00b70	8a 40 02	 mov	 al, BYTE PTR [eax+2]
  00b73	5e		 pop	 esi
  00b74	a2 44 00 00 00	 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, al
  00b79	5b		 pop	 ebx
  00b7a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b7f	8b e5		 mov	 esp, ebp
  00b81	5d		 pop	 ebp
  00b82	c3		 ret	 0
?HitMouseCursor@@YAXXZ ENDP				; HitMouseCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseProc@@YAXXZ
_TEXT	SEGMENT
?MouseProc@@YAXXZ PROC					; MouseProc, COMDAT

; 196  : 	static UINT leftPushTimeBak;
; 197  : 	static UINT rightPushTimeBak;
; 198  : 
; 199  : 	// ????
; 200  : 	mouse.onceState = MOUSE_NO_CRICK;
; 201  : 	// ???????????????????
; 202  : 	if (mouse.beforeLeftPushTime > 0)

  00000	83 3d 34 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+52, 0
  00007	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 0
  00011	76 15		 jbe	 SHORT $LN20@MouseProc

; 203  : 	{
; 204  : 		mouse.leftPushTime = TimeGetTime() - mouse.beforeLeftPushTime;

  00013	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00018	8b d0		 mov	 edx, eax
  0001a	2b 15 34 00 00
	00		 sub	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+52
  00020	89 15 38 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, edx
  00026	eb 06		 jmp	 SHORT $LN2@MouseProc
$LN20@MouseProc:

; 196  : 	static UINT leftPushTimeBak;
; 197  : 	static UINT rightPushTimeBak;
; 198  : 
; 199  : 	// ????
; 200  : 	mouse.onceState = MOUSE_NO_CRICK;
; 201  : 	// ???????????????????
; 202  : 	if (mouse.beforeLeftPushTime > 0)

  00028	8b 15 38 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+56
$LN2@MouseProc:

; 205  : 	}
; 206  : 	// ???????????????????
; 207  : 	if (mouse.beforeRightPushTime > 0)

  0002e	83 3d 3c 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+60, 0
  00035	56		 push	 esi
  00036	76 1b		 jbe	 SHORT $LN21@MouseProc

; 208  : 	{
; 209  : 		mouse.rightPushTime = TimeGetTime() - mouse.beforeRightPushTime;

  00038	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0003d	8b 15 38 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+56
  00043	8b f0		 mov	 esi, eax
  00045	2b 35 3c 00 00
	00		 sub	 esi, DWORD PTR ?mouse@@3UMOUSE@@A+60
  0004b	89 35 40 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, esi
  00051	eb 06		 jmp	 SHORT $LN3@MouseProc
$LN21@MouseProc:

; 205  : 	}
; 206  : 	// ???????????????????
; 207  : 	if (mouse.beforeRightPushTime > 0)

  00053	8b 35 40 00 00
	00		 mov	 esi, DWORD PTR ?mouse@@3UMOUSE@@A+64
$LN3@MouseProc:

; 210  : 	}
; 211  : 	// ?????????
; 212  : 	// ????????????
; 213  : 	// ?????????
; 214  : 	if (mouse.leftPushTime > 500) {

  00059	81 fa f4 01 00
	00		 cmp	 edx, 500		; 000001f4H
  0005f	76 35		 jbe	 SHORT $LN4@MouseProc

; 215  : 		// ???????
; 216  : 		if (leftPushTimeBak == 0) {

  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA
  00067	85 c9		 test	 ecx, ecx
  00069	75 11		 jne	 SHORT $LN6@MouseProc

; 217  : 			mouse.autoState |= MOUSE_LEFT_CRICK; // ?????

  0006b	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+48
  00071	83 c9 01	 or	 ecx, 1

; 218  : 			leftPushTimeBak = mouse.leftPushTime;	// ?????

  00074	89 15 00 00 00
	00		 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, edx

; 219  : 		}

  0007a	eb 2d		 jmp	 SHORT $LN5@MouseProc
$LN6@MouseProc:

; 220  : 		else
; 221  : 			// ?????????
; 222  : 			if (mouse.leftPushTime - leftPushTimeBak >= MOUSE_AUTO_REPEATE_TIME) {

  0007c	8b c2		 mov	 eax, edx
  0007e	2b c1		 sub	 eax, ecx
  00080	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+48
  00086	83 f8 64	 cmp	 eax, 100		; 00000064H
  00089	72 1b		 jb	 SHORT $LN8@MouseProc

; 223  : 				mouse.autoState |= MOUSE_LEFT_CRICK; // ?????

  0008b	83 c9 01	 or	 ecx, 1

; 224  : 				leftPushTimeBak = mouse.leftPushTime;	// ?????

  0008e	89 15 00 00 00
	00		 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, edx

; 225  : 			}

  00094	eb 13		 jmp	 SHORT $LN5@MouseProc
$LN4@MouseProc:

; 226  : 			else {	// ?????????
; 227  : 				mouse.autoState &= (~MOUSE_LEFT_CRICK);	// ??????
; 228  : 			}
; 229  : 	}
; 230  : 	else {
; 231  : 		mouse.autoState &= (~MOUSE_LEFT_CRICK);	// ??????

  00096	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+48

; 232  : 		leftPushTimeBak = 0;

  0009c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, 0
$LN8@MouseProc:

; 233  : 	}
; 234  : 
; 235  : 	// ????????????
; 236  : 	// ?????????
; 237  : 	if (mouse.rightPushTime > 500) {

  000a6	83 e1 fe	 and	 ecx, -2			; fffffffeH
$LN5@MouseProc:
  000a9	81 fe f4 01 00
	00		 cmp	 esi, 500		; 000001f4H
  000af	76 1e		 jbe	 SHORT $LN10@MouseProc

; 238  : 		// ???????
; 239  : 		if (rightPushTimeBak == 0) {

  000b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA
  000b7	85 d2		 test	 edx, edx
  000b9	74 09		 je	 SHORT $LN19@MouseProc

; 240  : 			mouse.autoState |= MOUSE_RIGHT_CRICK; // ?????
; 241  : 			rightPushTimeBak = mouse.rightPushTime;	// ?????
; 242  : 		}
; 243  : 		else
; 244  : 			// ?????????
; 245  : 			if (mouse.rightPushTime - rightPushTimeBak >= MOUSE_AUTO_REPEATE_TIME) {

  000bb	8b c6		 mov	 eax, esi
  000bd	2b c2		 sub	 eax, edx
  000bf	83 f8 64	 cmp	 eax, 100		; 00000064H
  000c2	72 15		 jb	 SHORT $LN22@MouseProc
$LN19@MouseProc:

; 246  : 				mouse.autoState |= MOUSE_RIGHT_CRICK; // ?????

  000c4	83 c9 02	 or	 ecx, 2

; 247  : 				rightPushTimeBak = mouse.rightPushTime;	// ?????

  000c7	89 35 00 00 00
	00		 mov	 DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA, esi

; 248  : 			}

  000cd	eb 0d		 jmp	 SHORT $LN23@MouseProc
$LN10@MouseProc:

; 249  : 			else {	// ?????????
; 250  : 				mouse.autoState &= (~MOUSE_RIGHT_CRICK);	// ??????
; 251  : 			}
; 252  : 	}
; 253  : 	else {
; 254  : 		mouse.autoState &= (~MOUSE_RIGHT_CRICK);	// ??????
; 255  : 		rightPushTimeBak = 0;

  000cf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA, 0
$LN22@MouseProc:

; 256  : 	}
; 257  : 
; 258  : 
; 259  : 
; 260  : 	// ????????????
; 261  : 	//if( mouse.rightPushTime > 0 ){
; 262  : 	//}else mouse.state &= (~MOUSE_RIGHT_AUTO_CRICK);
; 263  : 	// ????????????
; 264  : 	//if( !WindowMode ){
; 265  : 	//if( 0 <= mouse.nowPoint.x && mouse.nowPoint.x < 640 &&
; 266  : 	//	0 <= mouse.nowPoint.y && mouse.nowPoint.y < 480 ){
; 267  : 
; 268  : 	// ????????
; 269  : 	if (MouseCursorFlag == FALSE) {

  000d9	83 e1 fd	 and	 ecx, -3			; fffffffdH
$LN23@MouseProc:
  000dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?MouseCursorFlag@@3HA, 0 ; MouseCursorFlag
  000e3	89 0d 30 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, ecx
  000e9	5e		 pop	 esi
  000ea	75 2c		 jne	 SHORT $LN17@MouseProc

; 270  : 		if (mouse.flag == FALSE) {

  000ec	83 3d 4c 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+76, 0
  000f3	75 23		 jne	 SHORT $LN17@MouseProc

; 271  : 			StockDispBuffer(mouse.nowPoint.x + 16, mouse.nowPoint.y + 16, DISP_PRIO_MOUSE, CG_MOUSE_CURSOR, 0);

  000f5	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  000fa	6a 00		 push	 0
  000fc	68 a8 61 00 00	 push	 25000			; 000061a8H
  00101	83 c0 10	 add	 eax, 16			; 00000010H
  00104	6a 71		 push	 113			; 00000071H
  00106	50		 push	 eax
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A
  0010c	83 c0 10	 add	 eax, 16			; 00000010H
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00115	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@MouseProc:

; 272  : #ifdef _SHOW_MOUSE_POS
; 273  : 			char buf[20];
; 274  : 			wsprintf(buf, "%d,%d", mouse.nowPoint.x, mouse.nowPoint.y);
; 275  : 			StockFontBuffer(mouse.nowPoint.x, mouse.nowPoint.y - 15, FONT_PRIO_FRONT, 4, buf, 0);
; 276  : #endif // _SHOW_MOUSE_POS
; 277  : 
; 278  : 		}
; 279  : 	}
; 280  : 
; 281  : }

  00118	c3		 ret	 0
?MouseProc@@YAXXZ ENDP					; MouseProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseDblCrickRightUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseDblCrickRightUpPoint@@YAXHH@Z PROC		; MouseDblCrickRightUpPoint, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  : 	// ????
; 181  : 	mouse.state |= MOUSE_RIGHT_CRICK;
; 182  : 	mouse.onceState |= MOUSE_RIGHT_DBL_CRICK;
; 183  : 	mouse.onceState |= MOUSE_RIGHT_CRICK;
; 184  : 	mouse.autoState |= MOUSE_RIGHT_CRICK;
; 185  : 	// ?????
; 186  : 	mouse.crickRightDownPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 0d 28 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 2
  0000d	83 0d 2c 00 00
	00 22		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 34 ; 00000022H
  00014	83 0d 30 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+48, 2
  0001b	a3 18 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+24, eax

; 187  : 	mouse.crickRightDownPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 1c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+28, eax

; 188  : 	// ???????????????????
; 189  : 	mouse.beforeRightPushTime = TimeGetTime();

  00028	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0002d	a3 3c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, eax

; 190  : 	mouse.rightPushTime = 0;

  00032	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 191  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseDblCrickRightUpPoint@@YAXHH@Z ENDP		; MouseDblCrickRightUpPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseDblCrickLeftUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseDblCrickLeftUpPoint@@YAXHH@Z PROC			; MouseDblCrickLeftUpPoint, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 	// ????
; 134  : 	//mouse.onceState |= ( MOUSE_LEFT_DBL_CRICK | MOUSE_LEFT_CRICK );
; 135  : 	mouse.state |= MOUSE_LEFT_CRICK;
; 136  : 	mouse.onceState |= MOUSE_LEFT_DBL_CRICK;
; 137  : 	mouse.onceState |= MOUSE_LEFT_CRICK;
; 138  : 	mouse.autoState |= MOUSE_LEFT_CRICK;
; 139  : 	// ?????
; 140  : 	mouse.crickLeftDownPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 0d 28 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 1
  0000d	83 0d 2c 00 00
	00 11		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 17 ; 00000011H
  00014	83 0d 30 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+48, 1
  0001b	a3 08 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+8, eax

; 141  : 	mouse.crickLeftDownPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 0c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+12, eax

; 142  : 	// ???????????????????
; 143  : 	mouse.beforeLeftPushTime = TimeGetTime();

  00028	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0002d	a3 34 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, eax

; 144  : 	mouse.leftPushTime = 0;

  00032	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 145  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseDblCrickLeftUpPoint@@YAXHH@Z ENDP			; MouseDblCrickLeftUpPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseCrickRightUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickRightUpPoint@@YAXHH@Z PROC			; MouseCrickRightUpPoint, COMDAT

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 165  : 	// ????
; 166  : 	mouse.state &= (~MOUSE_RIGHT_CRICK);
; 167  : 	mouse.onceState |= MOUSE_RIGHT_CRICK_UP;
; 168  : 	mouse.autoState &= (~MOUSE_RIGHT_CRICK);
; 169  : 	// ?????
; 170  : 	mouse.crickRightUpPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 25 28 00 00
	00 fd		 and	 DWORD PTR ?mouse@@3UMOUSE@@A+40, -3 ; fffffffdH
  0000d	83 0d 2c 00 00
	00 08		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 8
  00014	83 25 30 00 00
	00 fd		 and	 DWORD PTR ?mouse@@3UMOUSE@@A+48, -3 ; fffffffdH
  0001b	a3 20 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+32, eax

; 171  : 	mouse.crickRightUpPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 24 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+36, eax

; 172  : 	// ????????????????
; 173  : 	mouse.beforeRightPushTime = 0;

  00028	c7 05 3c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, 0

; 174  : 	mouse.rightPushTime = 0;

  00032	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 175  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseCrickRightUpPoint@@YAXHH@Z ENDP			; MouseCrickRightUpPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseCrickRightDownPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickRightDownPoint@@YAXHH@Z PROC			; MouseCrickRightDownPoint, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 	// ????
; 151  : 	mouse.state |= MOUSE_RIGHT_CRICK;
; 152  : 	mouse.onceState |= MOUSE_RIGHT_CRICK;
; 153  : 	mouse.autoState |= MOUSE_RIGHT_CRICK;
; 154  : 	// ?????
; 155  : 	mouse.crickRightDownPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 0d 28 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 2
  0000d	83 0d 2c 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 2
  00014	83 0d 30 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+48, 2
  0001b	a3 18 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+24, eax

; 156  : 	mouse.crickRightDownPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 1c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+28, eax

; 157  : 	// ???????????????????
; 158  : 	mouse.beforeRightPushTime = TimeGetTime();

  00028	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0002d	a3 3c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, eax

; 159  : 	mouse.rightPushTime = 0;

  00032	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 160  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseCrickRightDownPoint@@YAXHH@Z ENDP			; MouseCrickRightDownPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseCrickLeftUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickLeftUpPoint@@YAXHH@Z PROC			; MouseCrickLeftUpPoint, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 118  : 	// ????
; 119  : 	mouse.state &= (~MOUSE_LEFT_CRICK);
; 120  : 	mouse.onceState |= MOUSE_LEFT_CRICK_UP;
; 121  : 	mouse.autoState &= (~MOUSE_LEFT_CRICK);
; 122  : 	// ?????
; 123  : 	mouse.crickLeftUpPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 25 28 00 00
	00 fe		 and	 DWORD PTR ?mouse@@3UMOUSE@@A+40, -2 ; fffffffeH
  0000d	83 0d 2c 00 00
	00 04		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 4
  00014	83 25 30 00 00
	00 fe		 and	 DWORD PTR ?mouse@@3UMOUSE@@A+48, -2 ; fffffffeH
  0001b	a3 10 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+16, eax

; 124  : 	mouse.crickLeftUpPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 14 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+20, eax

; 125  : 	// ????????????????
; 126  : 	mouse.beforeLeftPushTime = 0;

  00028	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, 0

; 127  : 	mouse.leftPushTime = 0;

  00032	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 128  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseCrickLeftUpPoint@@YAXHH@Z ENDP			; MouseCrickLeftUpPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseCrickLeftDownPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickLeftDownPoint@@YAXHH@Z PROC			; MouseCrickLeftDownPoint, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : #ifdef _SASHIELD
; 87   : 	VMProtectBeginVirtualization("SAS_MCLK_D");
; 88   : 	mouse.state |= MOUSE_LEFT_CRICK;
; 89   : 	mouse.onceState |= MOUSE_LEFT_CRICK;
; 90   : 	mouse.autoState |= MOUSE_LEFT_CRICK;
; 91   : 	// ?????
; 92   : 	mouse.crickLeftDownPoint.x = x;
; 93   : 	mouse.crickLeftDownPoint.y = y;
; 94   : 	// ???????????????????
; 95   : 	mouse.beforeLeftPushTime = TimeGetTime();
; 96   : 	mouse.leftPushTime = 0;
; 97   : 
; 98   : 	extern void SAS_CheckMouseClick(int x, int y);
; 99   : 	SAS_CheckMouseClick(x, y);
; 100  : 	VMProtectEnd();
; 101  : #else
; 102  : 	// ????
; 103  : 	mouse.state |= MOUSE_LEFT_CRICK;
; 104  : 	mouse.onceState |= MOUSE_LEFT_CRICK;
; 105  : 	mouse.autoState |= MOUSE_LEFT_CRICK;
; 106  : 	// ?????
; 107  : 	mouse.crickLeftDownPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 0d 28 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 1
  0000d	83 0d 2c 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 1
  00014	83 0d 30 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+48, 1
  0001b	a3 08 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+8, eax

; 108  : 	mouse.crickLeftDownPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 0c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+12, eax

; 109  : 	// ???????????????????
; 110  : 	mouse.beforeLeftPushTime = TimeGetTime();

  00028	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0002d	a3 34 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, eax

; 111  : 	mouse.leftPushTime = 0;

  00032	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 112  : #endif
; 113  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseCrickLeftDownPoint@@YAXHH@Z ENDP			; MouseCrickLeftDownPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseNowPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseNowPoint@@YAXHH@Z PROC				; MouseNowPoint, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : #ifdef _SASHIELD
; 49   : 	VMProtectBeginVirtualization("SAS_MMOVE");
; 50   : 	if (ResoMode == 1) {
; 51   : 		mouse.nowPoint.x = x * 2;
; 52   : 		mouse.nowPoint.y = y * 2;
; 53   : 	}
; 54   : 	else {
; 55   : 		mouse.nowPoint.x = x;
; 56   : 		mouse.nowPoint.y = y;
; 57   : 	}
; 58   : 	extern void RecordMouseMoveline(int x, int y);
; 59   : 	RecordMouseMoveline(x, y);
; 60   : 	VMProtectEnd();
; 61   : #else
; 62   : 	if (ResoMode == 1) {

  00003	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  0000a	75 2a		 jne	 SHORT $LN2@MouseNowPo

; 63   : 		if (x > 640)x = 640;
; 64   : 		if (y > 480)y = 480;

  0000c	ba 80 02 00 00	 mov	 edx, 640		; 00000280H

; 65   : 	}

  00011	b9 e0 01 00 00	 mov	 ecx, 480		; 000001e0H
  00016	39 55 08	 cmp	 DWORD PTR _x$[ebp], edx
  00019	0f 4e 55 08	 cmovle	 edx, DWORD PTR _x$[ebp]
  0001d	39 4d 0c	 cmp	 DWORD PTR _y$[ebp], ecx
  00020	0f 4e 4d 0c	 cmovle	 ecx, DWORD PTR _y$[ebp]

; 69   : 	}
; 70   : 	// ?????
; 71   : 	//???????????????
; 72   : 	if (ResoMode == 1) {
; 73   : 		mouse.nowPoint.x = x * 2;

  00024	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00027	a3 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A, eax

; 74   : 		mouse.nowPoint.y = y * 2;

  0002c	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]

; 78   : 		mouse.nowPoint.y = y;
; 79   : 	}
; 80   : #endif
; 81   : }

  0002f	a3 04 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+4, eax
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN2@MouseNowPo:

; 66   : 	else {
; 67   : 		if (x > lpDraw->xSize)x = lpDraw->xSize;

  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0003c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0003f	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00045	3b d0		 cmp	 edx, eax

; 68   : 		if (y > lpDraw->ySize)y = lpDraw->ySize;

  00047	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  0004d	0f 4f d0	 cmovg	 edx, eax
  00050	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00053	3b c1		 cmp	 eax, ecx

; 75   : 	}
; 76   : 	else {
; 77   : 		mouse.nowPoint.x = x;

  00055	89 15 00 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A, edx
  0005b	0f 4f c1	 cmovg	 eax, ecx

; 78   : 		mouse.nowPoint.y = y;
; 79   : 	}
; 80   : #endif
; 81   : }

  0005e	a3 04 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+4, eax
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?MouseNowPoint@@YAXHH@Z ENDP				; MouseNowPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\mouse.cpp
;	COMDAT ?MouseInit@@YAXXZ
_TEXT	SEGMENT
?MouseInit@@YAXXZ PROC					; MouseInit, COMDAT

; 40   : 	memset(&mouse, 0, sizeof(MOUSE));

  00000	6a 50		 push	 80			; 00000050H
  00002	6a 00		 push	 0
  00004	68 00 00 00 00	 push	 OFFSET ?mouse@@3UMOUSE@@A ; mouse
  00009	e8 00 00 00 00	 call	 _memset
  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 	mouse.itemNo = -1;

  00011	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1

; 42   : 
; 43   : 
; 44   : }

  0001b	c3		 ret	 0
?MouseInit@@YAXXZ ENDP					; MouseInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
