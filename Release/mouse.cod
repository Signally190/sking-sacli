; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29336.0 

	TITLE	C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?mouse@@3UMOUSE@@A				; mouse
PUBLIC	?HitFontNo@@3HA					; HitFontNo
PUBLIC	?HitDispNo@@3HA					; HitDispNo
PUBLIC	?OneLineInfoStr@@3PADA				; OneLineInfoStr
PUBLIC	?BoxColor@@3HA					; BoxColor
PUBLIC	?oneLineInfoFlag@@3HA				; oneLineInfoFlag
PUBLIC	?BoxColorTbl@@3PAEA				; BoxColorTbl
_BSS	SEGMENT
?mouse@@3UMOUSE@@A DB 050H DUP (?)			; mouse
?HitFontNo@@3HA DD 01H DUP (?)				; HitFontNo
?HitDispNo@@3HA DD 01H DUP (?)				; HitDispNo
?OneLineInfoStr@@3PADA DB 0100H DUP (?)			; OneLineInfoStr
?BoxColor@@3HA DD 01H DUP (?)				; BoxColor
_BSS	ENDS
_DATA	SEGMENT
?oneLineInfoFlag@@3HA DD 01H				; oneLineInfoFlag
?BoxColorTbl@@3PAEA DB 0faH				; BoxColorTbl
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?MouseInit@@YAXXZ				; MouseInit
PUBLIC	?MouseNowPoint@@YAXHH@Z				; MouseNowPoint
PUBLIC	?MouseCrickLeftDownPoint@@YAXHH@Z		; MouseCrickLeftDownPoint
PUBLIC	?MouseCrickLeftUpPoint@@YAXHH@Z			; MouseCrickLeftUpPoint
PUBLIC	?MouseCrickRightDownPoint@@YAXHH@Z		; MouseCrickRightDownPoint
PUBLIC	?MouseCrickRightUpPoint@@YAXHH@Z		; MouseCrickRightUpPoint
PUBLIC	?MouseDblCrickLeftUpPoint@@YAXHH@Z		; MouseDblCrickLeftUpPoint
PUBLIC	?MouseDblCrickRightUpPoint@@YAXHH@Z		; MouseDblCrickRightUpPoint
PUBLIC	?MouseProc@@YAXXZ				; MouseProc
PUBLIC	?HitMouseCursor@@YAXXZ				; HitMouseCursor
PUBLIC	?CheckGroupSelect@@YAXH@Z			; CheckGroupSelect
PUBLIC	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ		; sprintf_s<256>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@ ; `string'
PUBLIC	??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ ; `string'
PUBLIC	??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@ ; `string'
PUBLIC	??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ ; `string'
PUBLIC	??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ ; `string'
PUBLIC	??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ ; `string'
PUBLIC	??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD@ ; `string'
PUBLIC	??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB@ ; `string'
PUBLIC	??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN@ ; `string'
PUBLIC	??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@ ; `string'
PUBLIC	??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@ ; `string'
PUBLIC	??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@ ; `string'
PUBLIC	??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ ; `string'
PUBLIC	??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ ; `string'
PUBLIC	??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO@ ; `string'
PUBLIC	??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4038000000000000
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	?LoadBmp@@YAHH@Z:PROC				; LoadBmp
EXTRN	?SortDispBuffer@@YAXXZ:PROC			; SortDispBuffer
EXTRN	?StockDispBuffer@@YAHHHEHH@Z:PROC		; StockDispBuffer
EXTRN	?StockBoxDispBuffer@@YAXHHHHEHH@Z:PROC		; StockBoxDispBuffer
EXTRN	?GetStrWidth@@YAHPAD@Z:PROC			; GetStrWidth
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?ShowBottomLineString@@YAXHPAD@Z:PROC		; ShowBottomLineString
EXTRN	?openServerWindow@@YAXHHHHPAD@Z:PROC		; openServerWindow
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	?SpriteInfo@@3PAUSPRITE_INFO@@A:BYTE		; SpriteInfo
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?DispBuffer@@3UDISP_BUFFER@@A:BYTE		; DispBuffer
EXTRN	?p_party@@3PAPAUaction@@A:BYTE			; p_party
EXTRN	?FontBuffer@@3PAUFONT_BUFFER@@A:BYTE		; FontBuffer
EXTRN	?FontCnt@@3HA:DWORD				; FontCnt
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?TaskBarFlag@@3HA:DWORD				; TaskBarFlag
EXTRN	?MouseCursorFlag@@3HA:DWORD			; MouseCursorFlag
EXTRN	?BattleMyNo@@3HA:DWORD				; BattleMyNo
EXTRN	?mouseDblRightOn@@3HA:DWORD			; mouseDblRightOn
EXTRN	?transmigrationEffectFlag@@3HA:DWORD		; transmigrationEffectFlag
EXTRN	?ITEMPATHFLAG@@3HA:DWORD			; ITEMPATHFLAG
EXTRN	?nameOverTheHeadFlag@@3FA:WORD			; nameOverTheHeadFlag
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA
_BSS	SEGMENT
?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA DD 01H DUP (?) ; `MouseProc'::`2'::leftPushTimeBak
_BSS	ENDS
;	COMDAT ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA
_BSS	SEGMENT
?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA DD 01H DUP (?) ; `MouseProc'::`2'::rightPushTimeBak
_BSS	ENDS
;	COMDAT ?cnt@?1??HitMouseCursor@@YAXXZ@4HA
_BSS	SEGMENT
?cnt@?1??HitMouseCursor@@YAXXZ@4HA DD 01H DUP (?)	; `HitMouseCursor'::`2'::cnt
_BSS	ENDS
;	COMDAT __real@4038000000000000
CONST	SEGMENT
__real@4038000000000000 DQ 04038000000000000r	; 24
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT ??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
CONST	SEGMENT
??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO@
CONST	SEGMENT
??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d [', 0c5H, 0beH, 0bdH
	DB	0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d [', 0c5H, 0beH, 0bdH
	DB	0c2H, ']%s Lv', 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
CONST	SEGMENT
??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
CONST	SEGMENT
??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '%s    ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@
CONST	SEGMENT
??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H, 0beH
	DB	0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
CONST	SEGMENT
??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
CONST	SEGMENT
??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN@
CONST	SEGMENT
??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB@
CONST	SEGMENT
??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d   ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD@
CONST	SEGMENT
??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d   ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
CONST	SEGMENT
??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
CONST	SEGMENT
??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
CONST	SEGMENT
??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@
CONST	SEGMENT
??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
CONST	SEGMENT
??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@
CONST	SEGMENT
??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ PROC		; sprintf_s<256>, COMDAT

; 1858 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1503 :     }
; 1504 :     #endif
; 1505 : 
; 1506 :     #if __STDC_WANT_SECURE_LIB__
; 1507 : 
; 1508 :         _Success_(return >= 0)
; 1509 :         _Check_return_opt_
; 1510 :         _CRT_STDIO_INLINE int __CRTDECL vsprintf_s(
; 1511 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1512 :             _In_                                          size_t      const _BufferCount,
; 1513 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1514 :                                                           va_list           _ArgList
; 1515 :             )
; 1516 :     #if defined _NO_CRT_STDIO_INLINE
; 1517 :     ;
; 1518 :     #else
; 1519 :         {
; 1520 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1521 :         }
; 1522 :     #endif
; 1523 : 
; 1524 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(
; 1525 :             _Success_(return >= 0)
; 1526 :             int, vsprintf_s,
; 1527 :             _Always_(_Post_z_)            char,        _Buffer,
; 1528 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1529 :                                           va_list,     _ArgList
; 1530 :             )
; 1531 : 
; 1532 :     #endif
; 1533 : 
; 1534 :     _Success_(return >= 0)
; 1535 :     _Check_return_opt_
; 1536 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p_l(
; 1537 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1538 :         _In_                                          size_t      const _BufferCount,
; 1539 :         _In_z_ _Printf_format_string_params_(2)       char const* const _Format,
; 1540 :         _In_opt_                                      _locale_t   const _Locale,
; 1541 :                                                       va_list           _ArgList
; 1542 :         )
; 1543 :     #if defined _NO_CRT_STDIO_INLINE
; 1544 :     ;
; 1545 :     #else
; 1546 :     {
; 1547 :         int const _Result = __stdio_common_vsprintf_p(
; 1548 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1549 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1550 : 
; 1551 :         return _Result < 0 ? -1 : _Result;
; 1552 :     }
; 1553 :     #endif
; 1554 : 
; 1555 :     _Success_(return >= 0)
; 1556 :     _Check_return_opt_
; 1557 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p(
; 1558 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1559 :         _In_                                          size_t      const _BufferCount,
; 1560 :         _In_z_ _Printf_format_string_                 char const* const _Format,
; 1561 :                                                       va_list           _ArgList
; 1562 :         )
; 1563 :     #if defined _NO_CRT_STDIO_INLINE
; 1564 :     ;
; 1565 :     #else
; 1566 :     {
; 1567 :         return _vsprintf_p_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1568 :     }
; 1569 :     #endif
; 1570 : 
; 1571 :     _Success_(return >= 0)
; 1572 :     _Check_return_opt_
; 1573 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s_l(
; 1574 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1575 :         _In_                                              size_t      const _BufferCount,
; 1576 :         _In_                                              size_t      const _MaxCount,
; 1577 :         _In_z_ _Printf_format_string_params_(2)           char const* const _Format,
; 1578 :         _In_opt_                                          _locale_t   const _Locale,
; 1579 :                                                           va_list          _ArgList
; 1580 :         )
; 1581 :     #if defined _NO_CRT_STDIO_INLINE
; 1582 :     ;
; 1583 :     #else
; 1584 :     {
; 1585 :         int const _Result = __stdio_common_vsnprintf_s(
; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;
; 1590 :     }
; 1591 :     #endif
; 1592 : 
; 1593 :     _Success_(return >= 0)
; 1594 :     _Check_return_opt_
; 1595 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s(
; 1596 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1597 :         _In_                                              size_t      const _BufferCount,
; 1598 :         _In_                                              size_t      const _MaxCount,
; 1599 :         _In_z_ _Printf_format_string_                     char const* const _Format,
; 1600 :                                                           va_list           _ArgList
; 1601 :         )
; 1602 :     #if defined _NO_CRT_STDIO_INLINE
; 1603 :     ;
; 1604 :     #else
; 1605 :     {
; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1607 :     }
; 1608 :     #endif
; 1609 : 
; 1610 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1611 :         _Success_(return >= 0)
; 1612 :         int, _vsnprintf_s,
; 1613 :         _Always_(_Post_z_)            char,        _Buffer,
; 1614 :         _In_                          size_t,      _BufferCount,
; 1615 :         _In_z_ _Printf_format_string_ char const*, _Format,
; 1616 :                                       va_list,     _ArgList
; 1617 :         )
; 1618 : 
; 1619 :     #if __STDC_WANT_SECURE_LIB__
; 1620 : 
; 1621 :         _Success_(return >= 0)
; 1622 :         _Check_return_opt_
; 1623 :         _CRT_STDIO_INLINE int __CRTDECL vsnprintf_s(
; 1624 :             _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1625 :             _In_                                              size_t      const _BufferCount,
; 1626 :             _In_                                              size_t      const _MaxCount,
; 1627 :             _In_z_ _Printf_format_string_                     char const* const _Format,
; 1628 :                                                               va_list           _ArgList
; 1629 :             )
; 1630 :     #if defined _NO_CRT_STDIO_INLINE
; 1631 :     ;
; 1632 :     #else
; 1633 :         {
; 1634 :             return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1635 :         }
; 1636 :     #endif
; 1637 : 
; 1638 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1639 :             _Success_(return >= 0)
; 1640 :             int, vsnprintf_s,
; 1641 :             _Always_(_Post_z_)            char,        _Buffer,
; 1642 :             _In_                          size_t,      _BufferCount,
; 1643 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1644 :                                           va_list,     _ArgList
; 1645 :             )
; 1646 : 
; 1647 :     #endif
; 1648 : 
; 1649 :     _Check_return_opt_
; 1650 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_l(
; 1651 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1652 :         _In_opt_                                _locale_t   const _Locale,
; 1653 :                                                 va_list           _ArgList
; 1654 :         )
; 1655 :     #if defined _NO_CRT_STDIO_INLINE
; 1656 :     ;
; 1657 :     #else
; 1658 :     {
; 1659 :         int const _Result = __stdio_common_vsprintf(
; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;
; 1664 :     }
; 1665 :     #endif
; 1666 : 
; 1667 :     _Check_return_
; 1668 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf(
; 1669 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1670 :                                       va_list           _ArgList
; 1671 :         )
; 1672 :     #if defined _NO_CRT_STDIO_INLINE
; 1673 :     ;
; 1674 :     #else
; 1675 :     {
; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);
; 1677 :     }
; 1678 :     #endif
; 1679 : 
; 1680 :     _Check_return_opt_
; 1681 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p_l(
; 1682 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1683 :         _In_opt_                                _locale_t   const _Locale,
; 1684 :                                                 va_list           _ArgList
; 1685 :         )
; 1686 :     #if defined _NO_CRT_STDIO_INLINE
; 1687 :     ;
; 1688 :     #else
; 1689 :     {
; 1690 :         int const _Result = __stdio_common_vsprintf_p(
; 1691 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1692 :             NULL, 0, _Format, _Locale, _ArgList);
; 1693 : 
; 1694 :         return _Result < 0 ? -1 : _Result;
; 1695 :     }
; 1696 :     #endif
; 1697 : 
; 1698 :     _Check_return_
; 1699 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p(
; 1700 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1701 :                                       va_list           _ArgList
; 1702 :         )
; 1703 :     #if defined _NO_CRT_STDIO_INLINE
; 1704 :     ;
; 1705 :     #else
; 1706 :     {
; 1707 :         return _vscprintf_p_l(_Format, NULL, _ArgList);
; 1708 :     }
; 1709 :     #endif
; 1710 : 
; 1711 :     _Check_return_opt_
; 1712 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c_l(
; 1713 :         _Out_writes_opt_(_BufferCount)          char*       const _Buffer,
; 1714 :         _In_                                    size_t      const _BufferCount,
; 1715 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1716 :         _In_opt_                                _locale_t   const _Locale,
; 1717 :                                                 va_list           _ArgList
; 1718 :         )
; 1719 :     #if defined _NO_CRT_STDIO_INLINE
; 1720 :     ;
; 1721 :     #else
; 1722 :     {
; 1723 :         int const _Result = __stdio_common_vsprintf(
; 1724 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1725 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1726 : 
; 1727 :         return _Result < 0 ? -1 : _Result;
; 1728 :     }
; 1729 :     #endif
; 1730 : 
; 1731 :     _Success_(return >= 0)
; 1732 :     _Check_return_opt_
; 1733 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c(
; 1734 :         _Out_writes_opt_(_BufferCount) char*       const _Buffer,
; 1735 :         _In_                           size_t      const _BufferCount,
; 1736 :         _In_z_ _Printf_format_string_  char const* const _Format,
; 1737 :                                        va_list           _ArgList
; 1738 :         )
; 1739 :     #if defined _NO_CRT_STDIO_INLINE
; 1740 :     ;
; 1741 :     #else
; 1742 :     {
; 1743 :         return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1744 :     }
; 1745 :     #endif
; 1746 : 
; 1747 :     _Success_(return >= 0)
; 1748 :     _Check_return_opt_ _CRT_INSECURE_DEPRECATE(_sprintf_s_l)
; 1749 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_l(
; 1750 :         _Pre_notnull_ _Always_(_Post_z_)        char*       const _Buffer,
; 1751 :         _In_z_ _Printf_format_string_params_(0) char const* const _Format,
; 1752 :         _In_opt_                                _locale_t   const _Locale,
; 1753 :         ...)
; 1754 :     #if defined _NO_CRT_STDIO_INLINE
; 1755 :     ;
; 1756 :     #else
; 1757 :     {
; 1758 :         int _Result;
; 1759 :         va_list _ArgList;
; 1760 :         __crt_va_start(_ArgList, _Locale);
; 1761 : 
; 1762 :         #pragma warning(push)
; 1763 :         #pragma warning(disable: 4996) // Deprecation
; 1764 :         _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
; 1765 :         #pragma warning(pop)
; 1766 : 
; 1767 :         __crt_va_end(_ArgList);
; 1768 :         return _Result;
; 1769 :     }
; 1770 :     #endif
; 1771 : 
; 1772 :     _Success_(return >= 0)
; 1773 :     _Check_return_opt_
; 1774 :     _CRT_STDIO_INLINE int __CRTDECL sprintf(
; 1775 :         _Pre_notnull_ _Always_(_Post_z_) char*       const _Buffer,
; 1776 :         _In_z_ _Printf_format_string_    char const* const _Format,
; 1777 :         ...)
; 1778 :     #if defined _NO_CRT_STDIO_INLINE
; 1779 :     ;
; 1780 :     #else
; 1781 :     {
; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }
; 1794 :     #endif
; 1795 : 
; 1796 :     #pragma warning(push)
; 1797 :     #pragma warning(disable: 4996)
; 1798 :     #pragma warning(disable: 28719) // __WARNING_BANNED_API_USAGE
; 1799 :     #pragma warning(disable: 28726) // __WARNING_BANNED_API_USAGEL2
; 1800 :     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(
; 1801 :         _Success_(return >= 0)
; 1802 :         int, __RETURN_POLICY_SAME, __EMPTY_DECLSPEC, __CRTDECL, sprintf, vsprintf,
; 1803 :         _Pre_notnull_ _Always_(_Post_z_), char,        _Buffer,
; 1804 :         _In_z_ _Printf_format_string_     char const*, _Format
; 1805 :         )
; 1806 :     #pragma warning(pop)
; 1807 : 
; 1808 :     _Success_(return >= 0)
; 1809 :     _Check_return_opt_
; 1810 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_s_l(
; 1811 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1812 :         _In_                                          size_t      const _BufferCount,
; 1813 :         _In_z_ _Printf_format_string_params_(0)       char const* const _Format,
; 1814 :         _In_opt_                                      _locale_t   const _Locale,
; 1815 :         ...)
; 1816 :     #if defined _NO_CRT_STDIO_INLINE
; 1817 :     ;
; 1818 :     #else
; 1819 :     {
; 1820 :         int _Result;
; 1821 :         va_list _ArgList;
; 1822 :         __crt_va_start(_ArgList, _Locale);
; 1823 :         _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1824 :         __crt_va_end(_ArgList);
; 1825 :         return _Result;
; 1826 :     }
; 1827 :     #endif
; 1828 : 
; 1829 :     #if __STDC_WANT_SECURE_LIB__
; 1830 : 
; 1831 :         _Success_(return >= 0)
; 1832 :         _Check_return_opt_
; 1833 :         _CRT_STDIO_INLINE int __CRTDECL sprintf_s(
; 1834 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1835 :             _In_                                          size_t      const _BufferCount,
; 1836 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1837 :             ...)
; 1838 :     #if defined _NO_CRT_STDIO_INLINE
; 1839 :     ;
; 1840 :     #else
; 1841 :         {
; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);
; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1846 :             __crt_va_end(_ArgList);
; 1847 :             return _Result;
; 1848 :         }
; 1849 :     #endif
; 1850 : 
; 1851 :     #endif
; 1852 : 
; 1853 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ENDP		; sprintf_s<256>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?CheckGroupSelect@@YAXH@Z
_TEXT	SEGMENT
tv492 = -8						; size = 4
tv494 = -4						; size = 4
_no$ = 8						; size = 4
?CheckGroupSelect@@YAXH@Z PROC				; CheckGroupSelect, COMDAT

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 285  : 	int i;
; 286  : 	DISP_INFO 	*pDispInfo;
; 287  : 	DISP_SORT 	*pDispSort;
; 288  : 	/* ???î¸î?????????î¸î??î?????îµ??? */
; 289  : 	for (i = 0; i < DispBuffer.DispCnt; i++) {

  00006	33 c0		 xor	 eax, eax
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	66 3b 05 00 c0
	01 00		 cmp	 ax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00012	0f 8d 80 00 00
	00		 jge	 $LN3@CheckGroup
  00018	53		 push	 ebx
  00019	8b 5d 08	 mov	 ebx, DWORD PTR _no$[ebp]
  0001c	56		 push	 esi
  0001d	be 08 00 00 00	 mov	 esi, OFFSET ?DispBuffer@@3UDISP_BUFFER@@A+8
$LL4@CheckGroup:

; 290  : 
; 291  : 		pDispInfo = DispBuffer.DispInfo + i;
; 292  : 		pDispSort = DispBuffer.DispSort + i;
; 293  : 
; 294  : 		// ??????????
; 295  : 		if (pDispInfo->hitFlag == no) {

  00022	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  00025	75 60		 jne	 SHORT $LN2@CheckGroup

; 296  : 			// ??????î¯????
; 297  : 			if (pDispSort->dispPrio >= DISP_PRIO_MENU) {

  00027	80 3c bd 02 80
	01 00 68	 cmp	 BYTE PTR ?DispBuffer@@3UDISP_BUFFER@@A[edi*4+98306], 104 ; 00000068H
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00034	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  00037	6a 00		 push	 0
  00039	ff 35 00 00 00
	00		 push	 DWORD PTR ?BoxColor@@3HA ; BoxColor
  0003f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00042	0f b7 1c 85 06
	00 00 00	 movzx	 ebx, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+6]
  0004a	0f b7 04 85 04
	00 00 00	 movzx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[eax*4+4]
  00052	89 5d fc	 mov	 DWORD PTR tv494[ebp], ebx
  00055	8b 5d 08	 mov	 ebx, DWORD PTR _no$[ebp]
  00058	89 45 f8	 mov	 DWORD PTR tv492[ebp], eax
  0005b	8b 45 fc	 mov	 eax, DWORD PTR tv494[ebp]
  0005e	98		 cwde
  0005f	72 04		 jb	 SHORT $LN6@CheckGroup

; 298  : 				// ????î¸î????????????
; 299  : #ifndef __CARYTEST
; 300  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  00061	6a 6b		 push	 107			; 0000006bH

; 301  : 					pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 302  : 					pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 303  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 304  : #else
; 305  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 306  : 					pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 307  : 					pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 308  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 309  : #endif
; 310  : 			}

  00063	eb 02		 jmp	 SHORT $LN13@CheckGroup
$LN6@CheckGroup:

; 311  : 			else {
; 312  : 				// ????î¸î????????????
; 313  : #ifndef __CARYTEST
; 314  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  00065	6a 65		 push	 101			; 00000065H
$LN13@CheckGroup:

; 285  : 	int i;
; 286  : 	DISP_INFO 	*pDispInfo;
; 287  : 	DISP_SORT 	*pDispSort;
; 288  : 	/* ???î¸î?????????î¸î??î?????îµ??? */
; 289  : 	for (i = 0; i < DispBuffer.DispCnt; i++) {

  00067	83 c0 02	 add	 eax, 2
  0006a	03 c1		 add	 eax, ecx
  0006c	50		 push	 eax
  0006d	8b 45 f8	 mov	 eax, DWORD PTR tv492[ebp]
  00070	98		 cwde
  00071	83 c0 02	 add	 eax, 2
  00074	03 c2		 add	 eax, edx
  00076	50		 push	 eax
  00077	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  0007a	50		 push	 eax
  0007b	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  00084	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@CheckGroup:
  00087	0f bf 05 00 c0
	01 00		 movsx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0008e	47		 inc	 edi
  0008f	83 c6 18	 add	 esi, 24			; 00000018H
  00092	3b f8		 cmp	 edi, eax
  00094	7c 8c		 jl	 SHORT $LL4@CheckGroup
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
$LN3@CheckGroup:
  00098	5f		 pop	 edi

; 315  : 					pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 316  : 					pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 317  : 					DISP_PRIO_BOX, BoxColor, 0);
; 318  : 				//pDispSort->dispPrio, 250, 0 );
; 319  : #else
; 320  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 321  : 					pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 322  : 					pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 323  : 					DISP_PRIO_BOX, BoxColor, 0);
; 324  : #endif
; 325  : 			}
; 326  : 		}
; 327  : 	}
; 328  : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?CheckGroupSelect@@YAXH@Z ENDP				; CheckGroupSelect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?HitMouseCursor@@YAXXZ
_TEXT	SEGMENT
tv4254 = -276						; size = 4
_pDispSort$1$ = -272					; size = 4
tv4135 = -265						; size = 1
tv4116 = -264						; size = 4
tv4099 = -264						; size = 4
_i$2$ = -264						; size = 4
_itemNameColor$1$ = -264				; size = 4
_msg$1 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?HitMouseCursor@@YAXXZ PROC				; HitMouseCursor, COMDAT

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 365  : 	int i;					// ???????
; 366  : 	int strWidth;			// î°???????
; 367  : 	int hitFlag = FALSE;	// ???îî???
; 368  : 	static int cnt = 0;		// ?????
; 369  : 	int itemNameColor = FONT_PAL_WHITE;	// ?????î

  00013	33 c9		 xor	 ecx, ecx

; 370  : 
; 371  : 	DISP_SORT 	*pDispSort = DispBuffer.DispSort + DispBuffer.DispCnt - 1;

  00015	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0001c	0f bf c1	 movsx	 eax, cx
  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	57		 push	 edi
  00022	8d 34 85 fc 7f
	01 00		 lea	 esi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*4+98300]

; 372  : 	DISP_INFO 	*pDispInfo;
; 373  : 
; 374  : 	// î¸î?????îî?
; 375  : 	if (!transmigrationEffectFlag)

  00029	33 c0		 xor	 eax, eax
  0002b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?transmigrationEffectFlag@@3HA, eax ; transmigrationEffectFlag
  00031	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _pDispSort$1$[ebp], esi
  00037	0f 94 c0	 sete	 al

; 376  : 		oneLineInfoFlag = 1;
; 377  : 	else
; 378  : 		oneLineInfoFlag = 0;
; 379  : 
; 380  : 	if (cnt >= sizeof(BoxColorTbl) - 1) cnt = 0;

  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?oneLineInfoFlag@@3HA, eax ; oneLineInfoFlag
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA
  00044	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00047	72 04		 jb	 SHORT $LN13@HitMouseCu
  00049	33 c0		 xor	 eax, eax
  0004b	eb 01		 jmp	 SHORT $LN14@HitMouseCu
$LN13@HitMouseCu:

; 381  : 	else cnt++;

  0004d	40		 inc	 eax
$LN14@HitMouseCu:

; 382  : 
; 383  : 	// î¸î?????îîî
; 384  : 	BoxColor = BoxColorTbl[cnt];

  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA, eax

; 385  : #ifdef _ITEM_PATH
; 386  : 	ITEMPATHFLAG = FALSE;
; 387  : #endif
; 388  : 	for (i = 0; i < FontCnt; i++) {

  00053	33 ff		 xor	 edi, edi
  00055	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR ?BoxColorTbl@@3PAEA[eax]
  0005c	a3 00 00 00 00	 mov	 DWORD PTR ?BoxColor@@3HA, eax ; BoxColor
  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FontCnt@@3HA ; FontCnt
  00066	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ITEMPATHFLAG@@3HA, 0 ; ITEMPATHFLAG
  00070	85 c0		 test	 eax, eax
  00072	7e 77		 jle	 SHORT $LN153@HitMouseCu

; 382  : 
; 383  : 	// î¸î?????îîî
; 384  : 	BoxColor = BoxColorTbl[cnt];

  00074	be 05 00 00 00	 mov	 esi, OFFSET ?FontBuffer@@3PAUFONT_BUFFER@@A+5
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@HitMouseCu:

; 389  : 		// jl æå­ä¸æ¥åç¹å»åè·³è¿
; 390  : 		if (FontBuffer[i].hitFlag == 0) continue;

  00080	83 be 03 01 00
	00 00		 cmp	 DWORD PTR [esi+259], 0
  00087	74 4a		 je	 SHORT $LN2@HitMouseCu

; 391  : 		// î°jl åæå­å®½åº¦
; 392  : 		strWidth = GetStrWidth(FontBuffer[i].str);

  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 ?GetStrWidth@@YAHPAD@Z	; GetStrWidth

; 393  : 		// î½jl æ£æµé¼ æ å¨æå­ç©å½¢åî
; 394  : 		if (mouse.nowPoint.x <= FontBuffer[i].x + strWidth + 2 && FontBuffer[i].x - 2 <= mouse.nowPoint.x &&
; 395  : 			mouse.nowPoint.y <= FontBuffer[i].y + FONT_SIZE + 2 && FontBuffer[i].y - 2 <= mouse.nowPoint.y) {

  0008f	0f bf 56 fb	 movsx	 edx, WORD PTR [esi-5]
  00093	83 c0 02	 add	 eax, 2
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A
  0009c	03 c2		 add	 eax, edx
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 85 f8 fe ff
	ff		 mov	 DWORD PTR tv4116[ebp], eax
  000a7	3b c8		 cmp	 ecx, eax
  000a9	7f 23		 jg	 SHORT $LN154@HitMouseCu
  000ab	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  000ae	3b c1		 cmp	 eax, ecx
  000b0	7f 1c		 jg	 SHORT $LN154@HitMouseCu
  000b2	0f bf 4e fd	 movsx	 ecx, WORD PTR [esi-3]
  000b6	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  000bc	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  000bf	3b d8		 cmp	 ebx, eax
  000c1	7f 0b		 jg	 SHORT $LN154@HitMouseCu
  000c3	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  000c6	3b c3		 cmp	 eax, ebx
  000c8	0f 8e d9 00 00
	00		 jle	 $LN134@HitMouseCu
$LN154@HitMouseCu:
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?FontCnt@@3HA ; FontCnt
$LN2@HitMouseCu:

; 385  : #ifdef _ITEM_PATH
; 386  : 	ITEMPATHFLAG = FALSE;
; 387  : #endif
; 388  : 	for (i = 0; i < FontCnt; i++) {

  000d3	47		 inc	 edi
  000d4	81 c6 10 01 00
	00		 add	 esi, 272		; 00000110H
  000da	3b f8		 cmp	 edi, eax
  000dc	7c a2		 jl	 SHORT $LL4@HitMouseCu
  000de	66 8b 0d 00 c0
	01 00		 mov	 cx, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  000e5	8b b5 f0 fe ff
	ff		 mov	 esi, DWORD PTR _pDispSort$1$[ebp]
$LN153@HitMouseCu:

; 422  : 				ShowBottomLineString(itemNameColor, OneLineInfoStr);
; 423  : 				//the third StockFontBuffer( 8, 460, FONT_PRIO_FRONT, itemNameColor, OneLineInfoStr, 0 );
; 424  : 			}
; 425  : 			OneLineInfoStr[0] = NULL;
; 426  : 			return;		// jl æ¿å°HitDispNoå°±è¿å
; 427  : 		}
; 428  : 	}
; 429  : 	// jl æ²¡ææå­ç¹å»åèµå¼-1
; 430  : 	HitFontNo = -1;
; 431  : 	for (i = DispBuffer.DispCnt - 1; i >= 0; i--, pDispSort--) {

  000eb	0f bf d9	 movsx	 ebx, cx
  000ee	83 eb 01	 sub	 ebx, 1
  000f1	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo
  000fb	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _i$2$[ebp], ebx
  00101	0f 88 77 02 00
	00		 js	 $LN6@HitMouseCu
  00107	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL7@HitMouseCu:

; 432  : 		pDispInfo = DispBuffer.DispInfo + pDispSort->no;

  00110	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00113	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]

; 433  : 		if (pDispInfo->hitFlag == 0) continue;

  00116	83 3c f5 10 00
	00 00 00	 cmp	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16], 0
  0011e	0f 84 3c 02 00
	00		 je	 $LN5@HitMouseCu

; 434  : 		//if( SpriteInfo[ pDispInfo->bmpNo ].lpSurfaceInfo == NULL ) continue;
; 435  : 		if (LoadBmp(pDispInfo->bmpNo) == FALSE) continue;

  00124	ff 34 f5 08 00
	00 00		 push	 DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+8]
  0012b	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp
  00130	83 c4 04	 add	 esp, 4
  00133	85 c0		 test	 eax, eax
  00135	0f 84 25 02 00
	00		 je	 $LN5@HitMouseCu

; 436  : 		if (pDispInfo->pAct == NULL) {

  0013b	8b 04 f5 08 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+8]
  00142	8b 14 f5 0c 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12]
  00149	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8]
  00150	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00153	0f bf 04 8d 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+4]
  0015b	85 d2		 test	 edx, edx
  0015d	0f 85 b2 00 00
	00		 jne	 $LN21@HitMouseCu

; 437  : #ifndef __CARYTEST
; 438  : 			if (mouse.nowPoint.x <= pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width &&
; 439  : 				pDispInfo->x <= mouse.nowPoint.x &&
; 440  : 				mouse.nowPoint.y <= pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height &&

  00163	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?mouse@@3UMOUSE@@A
  00169	03 c7		 add	 eax, edi
  0016b	3b d8		 cmp	 ebx, eax
  0016d	0f 8f e7 01 00
	00		 jg	 $LN156@HitMouseCu
  00173	3b fb		 cmp	 edi, ebx
  00175	8b 9d f8 fe ff
	ff		 mov	 ebx, DWORD PTR _i$2$[ebp]
  0017b	0f 8f df 01 00
	00		 jg	 $LN5@HitMouseCu
  00181	0f bf 04 8d 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  00189	8b 3c f5 04 00
	00 00		 mov	 edi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+4]
  00190	03 c7		 add	 eax, edi
  00192	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  00198	3b c8		 cmp	 ecx, eax
  0019a	0f 8f c0 01 00
	00		 jg	 $LN5@HitMouseCu
  001a0	3b f9		 cmp	 edi, ecx

; 441  : 				pDispInfo->y <= mouse.nowPoint.y)
; 442  : #else
; 443  : 			if (mouse.nowPoint.x <= pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width &&
; 444  : 				pDispInfo->x <= mouse.nowPoint.x &&
; 445  : 				mouse.nowPoint.y <= pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height &&
; 446  : 				pDispInfo->y <= mouse.nowPoint.y)
; 447  : #endif				
; 448  : 				hitFlag = TRUE;
; 449  : 		}else{

  001a2	e9 e1 00 00 00	 jmp	 $LN165@HitMouseCu
$LN134@HitMouseCu:

; 396  : 			// jl èµå¼ç¹å»çæå­ç¼å·ï¼é¼ æ å¨ä¸é¢å°±èµå¼ï¼ä¸éè¦ç¹å»
; 397  : 			HitFontNo = i;
; 398  : 			// å¦æhitFlagä¸º2åç»ä¸ä¸ªè¾¹æ¡
; 399  : 			if (FontBuffer[i].hitFlag == 2) {

  001a7	69 c7 10 01 00
	00		 imul	 eax, edi, 272
  001ad	89 3d 00 00 00
	00		 mov	 DWORD PTR ?HitFontNo@@3HA, edi ; HitFontNo
  001b3	83 b8 08 01 00
	00 02		 cmp	 DWORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax+264], 2
  001ba	75 29		 jne	 SHORT $LN17@HitMouseCu

; 400  : 				StockBoxDispBuffer(FontBuffer[i].x - 3,

  001bc	6a 00		 push	 0
  001be	ff 35 00 00 00
	00		 push	 DWORD PTR ?BoxColor@@3HA ; BoxColor
  001c4	8d 41 12	 lea	 eax, DWORD PTR [ecx+18]
  001c7	6a 6b		 push	 107			; 0000006bH
  001c9	50		 push	 eax
  001ca	ff b5 f8 fe ff
	ff		 push	 DWORD PTR tv4116[ebp]
  001d0	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  001d3	50		 push	 eax
  001d4	8d 42 fd	 lea	 eax, DWORD PTR [edx-3]
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  001dd	83 c4 1c	 add	 esp, 28			; 0000001cH

; 401  : #ifdef _NEWFONT_
; 402  : 					FontBuffer[i].y - 2,
; 403  : #else
; 404  : 					FontBuffer[i].y - 4,
; 405  : #endif
; 406  : 					FontBuffer[i].x + strWidth + 2,
; 407  : #ifdef _NEWFONT_
; 408  : 					FontBuffer[i].y + FONT_SIZE + 6,
; 409  : #else
; 410  : 					FontBuffer[i].y + FONT_SIZE + 4,
; 411  : #endif
; 412  : 
; 413  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 414  : 
; 415  : 				SortDispBuffer();

  001e0	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer
$LN17@HitMouseCu:

; 416  : 			}
; 417  : 			//jl ç¹å»çæ¯æå­ï¼åæå¾çç¹å»èµå¼-1
; 418  : 			HitDispNo = -1;
; 419  : 			mouse.level = DISP_PRIO_MENU;
; 420  : 			// jlç¶ææ æ¾ç¤ºæç¤ºæå­
; 421  : 			if (TaskBarFlag == FALSE && oneLineInfoFlag) {

  001e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  001ec	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitDispNo@@3HA, -1 ; HitDispNo
  001f6	c6 05 44 00 00
	00 68		 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, 104 ; 00000068H
  001fd	0f 85 a4 01 00
	00		 jne	 $LN123@HitMouseCu
  00203	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?oneLineInfoFlag@@3HA, 0 ; oneLineInfoFlag
  0020a	0f 84 97 01 00
	00		 je	 $LN123@HitMouseCu
  00210	e9 83 01 00 00	 jmp	 $LN164@HitMouseCu
$LN21@HitMouseCu:
  00215	66 0f 6e 15 00
	00 00 00	 movd	 xmm2, DWORD PTR ?mouse@@3UMOUSE@@A

; 450  : #ifndef __CARYTEST
; 451  : 			if (mouse.nowPoint.x <= pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width * 0.5 + MOUSE_HIT_SIZE_X * 0.5 &&
; 452  : 				pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width * 0.5 - MOUSE_HIT_SIZE_X * 0.5 <= mouse.nowPoint.x &&
; 453  : 				mouse.nowPoint.y <= pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height &&

  0021d	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@4038000000000000
  00225	66 0f 6e c8	 movd	 xmm1, eax
  00229	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0022d	66 0f 6e c7	 movd	 xmm0, edi
  00231	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00239	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0023d	f3 0f e6 d2	 cvtdq2pd xmm2, xmm2
  00241	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00245	0f 28 c1	 movaps	 xmm0, xmm1
  00248	f2 0f 58 c3	 addsd	 xmm0, xmm3
  0024c	66 0f 2f c2	 comisd	 xmm0, xmm2
  00250	0f 82 0a 01 00
	00		 jb	 $LN5@HitMouseCu
  00256	f2 0f 5c cb	 subsd	 xmm1, xmm3
  0025a	66 0f 2f d1	 comisd	 xmm2, xmm1
  0025e	0f 82 fc 00 00
	00		 jb	 $LN5@HitMouseCu
  00264	0f bf 0c 8d 06
	00 00 00	 movsx	 ecx, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  0026c	8b 04 f5 04 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+4]
  00273	03 c1		 add	 eax, ecx
  00275	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  0027b	3b c8		 cmp	 ecx, eax
  0027d	0f 8f dd 00 00
	00		 jg	 $LN5@HitMouseCu
  00283	83 c0 d0	 add	 eax, -48		; ffffffd0H
  00286	3b c1		 cmp	 eax, ecx
$LN165@HitMouseCu:

; 454  : 				pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height - MOUSE_HIT_SIZE_Y <= mouse.nowPoint.y)
; 455  : #else
; 456  : 			if (mouse.nowPoint.x <= pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width * 0.5 + MOUSE_HIT_SIZE_X * 0.5 &&
; 457  : 				pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width * 0.5 - MOUSE_HIT_SIZE_X * 0.5 <= mouse.nowPoint.x &&
; 458  : 				mouse.nowPoint.y <= pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height &&
; 459  : 				pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height - MOUSE_HIT_SIZE_Y <= mouse.nowPoint.y)
; 460  : #endif				
; 461  : 				hitFlag = TRUE;
; 462  : 		}
; 463  : 
; 464  : 		if (hitFlag == TRUE) {
; 465  : 
; 466  : #ifdef __ATTACK_MAGIC
; 467  : 
; 468  : 			int cnt;
; 469  : 
; 470  : 			for (cnt = 0; cnt < BATTLKPKPLYAERNUM; cnt++)

  00288	0f 8f d2 00 00
	00		 jg	 $LN5@HitMouseCu
  0028e	b8 00 00 00 00	 mov	 eax, OFFSET ?p_party@@3PAPAUaction@@A ; p_party
$LL10@HitMouseCu:

; 471  : 			{
; 472  : 				if (p_party[cnt] == pDispInfo->pAct)

  00293	39 10		 cmp	 DWORD PTR [eax], edx
  00295	74 0a		 je	 SHORT $LN135@HitMouseCu

; 454  : 				pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height - MOUSE_HIT_SIZE_Y <= mouse.nowPoint.y)
; 455  : #else
; 456  : 			if (mouse.nowPoint.x <= pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width * 0.5 + MOUSE_HIT_SIZE_X * 0.5 &&
; 457  : 				pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width * 0.5 - MOUSE_HIT_SIZE_X * 0.5 <= mouse.nowPoint.x &&
; 458  : 				mouse.nowPoint.y <= pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height &&
; 459  : 				pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height - MOUSE_HIT_SIZE_Y <= mouse.nowPoint.y)
; 460  : #endif				
; 461  : 				hitFlag = TRUE;
; 462  : 		}
; 463  : 
; 464  : 		if (hitFlag == TRUE) {
; 465  : 
; 466  : #ifdef __ATTACK_MAGIC
; 467  : 
; 468  : 			int cnt;
; 469  : 
; 470  : 			for (cnt = 0; cnt < BATTLKPKPLYAERNUM; cnt++)

  00297	83 c0 04	 add	 eax, 4
  0029a	3d 50 00 00 00	 cmp	 eax, OFFSET ?p_party@@3PAPAUaction@@A+80
  0029f	7c f2		 jl	 SHORT $LL10@HitMouseCu
$LN135@HitMouseCu:

; 473  : 					break;
; 474  : 			}
; 475  : 
; 476  : 			// å·¦ä¸å°å³ä¸ç¼å·ä¸º6 , 7 , 8 , 9
; 477  : 			// å½ä»è½éæ©åæä¸ç®åæéæ©çå¨ææ¹çä½ç½®
; 478  : 			//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 479  : 			if (BattleMyNo >= 10 && (6 == pDispInfo->hitFlag || 7 == pDispInfo->hitFlag))

  002a1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  002a7	8b 0c f5 10 00
	00 00		 mov	 ecx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16]
  002ae	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  002b1	0f 8c 8d 00 00
	00		 jl	 $LN150@HitMouseCu
  002b7	83 f9 06	 cmp	 ecx, 6
  002ba	0f 84 a0 00 00
	00		 je	 $LN5@HitMouseCu
  002c0	83 f9 07	 cmp	 ecx, 7
  002c3	0f 84 97 00 00
	00		 je	 $LN5@HitMouseCu

; 499  : 				//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 500  : 				hitFlag = FALSE;
; 501  : 				continue;
; 502  : 			}
; 503  : 			if (BattleMyNo >= 10 && (12 == pDispInfo->hitFlag || 13 == pDispInfo->hitFlag)){

  002c9	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  002cc	0f 84 8e 00 00
	00		 je	 $LN5@HitMouseCu
  002d2	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  002d5	0f 84 85 00 00
	00		 je	 $LN5@HitMouseCu
$LN145@HitMouseCu:

; 504  : 				hitFlag = FALSE;
; 505  : 				continue;
; 506  : 			}
; 507  : #endif
; 508  : #endif
; 509  : 			//			StockFontBuffer( pDispInfo->x, pDispInfo->y, FONT_PRIO_FRONT, 0, "Hit", 1 );
; 510  : 			HitDispNo = pDispSort->no;

  002db	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _pDispSort$1$[ebp]
  002e1	0f bf 02	 movsx	 eax, WORD PTR [edx]
  002e4	a3 00 00 00 00	 mov	 DWORD PTR ?HitDispNo@@3HA, eax ; HitDispNo

; 511  : 			if (pDispInfo->hitFlag >= 2) {

  002e9	83 f9 02	 cmp	 ecx, 2
  002ec	0f 8c 45 01 00
	00		 jl	 $LN35@HitMouseCu

; 512  : 				if (pDispSort->dispPrio >= DISP_PRIO_YES_NO_WND) {

  002f2	8b 04 f5 08 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+8]
  002f9	8a 5a 02	 mov	 bl, BYTE PTR [edx+2]
  002fc	8b 14 f5 04 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+4]
  00303	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8]
  0030a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0030d	6a 00		 push	 0
  0030f	ff 35 00 00 00
	00		 push	 DWORD PTR ?BoxColor@@3HA ; BoxColor
  00315	80 fb 6d	 cmp	 bl, 109			; 0000006dH
  00318	0f 82 a1 00 00
	00		 jb	 $LN36@HitMouseCu

; 513  : #ifndef __CARYTEST
; 514  : 					StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  0031e	0f bf 04 8d 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  00326	83 c0 02	 add	 eax, 2
  00329	03 c2		 add	 eax, edx
  0032b	6a 6f		 push	 111			; 0000006fH
  0032d	50		 push	 eax
  0032e	0f bf 04 8d 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+4]
  00336	83 c0 02	 add	 eax, 2
  00339	03 c7		 add	 eax, edi
  0033b	50		 push	 eax
  0033c	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]

; 515  : 						pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 516  : 						pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 517  : 						//DISP_PRIO_BOX2, 250, 0 );
; 518  : 						DISP_PRIO_BOX3, BoxColor, 0);
; 519  : #else
; 520  : 					StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 521  : 						pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 522  : 						pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 523  : 						DISP_PRIO_BOX3, BoxColor, 0);
; 524  : #endif
; 525  : 				}

  0033f	e9 c6 00 00 00	 jmp	 $LN166@HitMouseCu
$LN150@HitMouseCu:

; 480  : 			{
; 481  : 				hitFlag = FALSE;
; 482  : 				continue;
; 483  : 			}
; 484  : #ifdef _SKILL_85_LSFIX
; 485  : 			// CAXä¿®æ­£æ»å»ä¸ææ¶ååºé
; 486  : 			if (BattleMyNo < 10 && (10 == pDispInfo->hitFlag || 9 == pDispInfo->hitFlag))

  00344	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00347	74 17		 je	 SHORT $LN5@HitMouseCu
  00349	83 f9 09	 cmp	 ecx, 9
  0034c	74 12		 je	 SHORT $LN5@HitMouseCu

; 487  : #else
; 488  : 			// å½ä»è½éæ©åæä¸ç®åæéæ©çå¨ææ¹çä½ç½®
; 489  : 			if (BattleMyNo < 10 && (8 == pDispInfo->hitFlag || 9 == pDispInfo->hitFlag))
; 490  : #endif
; 491  : 			{
; 492  : 				//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 493  : 				hitFlag = FALSE;
; 494  : 				continue;
; 495  : 			}
; 496  : #ifdef _SKILL_ADDBARRIER
; 497  : 			// åªè½éææ¹
; 498  : 			if (BattleMyNo < 10 && (11 == pDispInfo->hitFlag || 12 == pDispInfo->hitFlag)){

  0034e	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00351	74 0d		 je	 SHORT $LN5@HitMouseCu
  00353	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  00356	75 83		 jne	 SHORT $LN145@HitMouseCu

; 437  : #ifndef __CARYTEST
; 438  : 			if (mouse.nowPoint.x <= pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width &&
; 439  : 				pDispInfo->x <= mouse.nowPoint.x &&
; 440  : 				mouse.nowPoint.y <= pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height &&

  00358	eb 06		 jmp	 SHORT $LN5@HitMouseCu
$LN156@HitMouseCu:
  0035a	8b 9d f8 fe ff
	ff		 mov	 ebx, DWORD PTR _i$2$[ebp]
$LN5@HitMouseCu:

; 422  : 				ShowBottomLineString(itemNameColor, OneLineInfoStr);
; 423  : 				//the third StockFontBuffer( 8, 460, FONT_PRIO_FRONT, itemNameColor, OneLineInfoStr, 0 );
; 424  : 			}
; 425  : 			OneLineInfoStr[0] = NULL;
; 426  : 			return;		// jl æ¿å°HitDispNoå°±è¿å
; 427  : 		}
; 428  : 	}
; 429  : 	// jl æ²¡ææå­ç¹å»åèµå¼-1
; 430  : 	HitFontNo = -1;
; 431  : 	for (i = DispBuffer.DispCnt - 1; i >= 0; i--, pDispSort--) {

  00360	8b b5 f0 fe ff
	ff		 mov	 esi, DWORD PTR _pDispSort$1$[ebp]
  00366	4b		 dec	 ebx
  00367	83 ee 04	 sub	 esi, 4
  0036a	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _i$2$[ebp], ebx
  00370	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _pDispSort$1$[ebp], esi
  00376	85 db		 test	 ebx, ebx
  00378	0f 89 92 fd ff
	ff		 jns	 $LL7@HitMouseCu
$LN6@HitMouseCu:

; 816  : 			return;
; 817  : 		}
; 818  : 	}
; 819  : 	mouse.level = DISP_PRIO_TILE;
; 820  : 	HitDispNo = -1;
; 821  : 	if (TaskBarFlag == FALSE) {

  0037e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  00385	c6 05 44 00 00
	00 01		 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, 1
  0038c	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitDispNo@@3HA, -1 ; HitDispNo
  00396	75 0f		 jne	 SHORT $LN123@HitMouseCu
$LN164@HitMouseCu:

; 822  : 		ShowBottomLineString(itemNameColor, OneLineInfoStr);
; 823  : 	}
; 824  : 	OneLineInfoStr[0] = NULL;

  00398	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0039d	6a 00		 push	 0
  0039f	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  003a4	83 c4 08	 add	 esp, 8
$LN123@HitMouseCu:

; 825  : 
; 826  : }

  003a7	5f		 pop	 edi
  003a8	5e		 pop	 esi
  003a9	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?OneLineInfoStr@@3PADA, 0
  003b0	5b		 pop	 ebx
  003b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b4	33 cd		 xor	 ecx, ebp
  003b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003bb	8b e5		 mov	 esp, ebp
  003bd	5d		 pop	 ebp
  003be	c3		 ret	 0
$LN36@HitMouseCu:

; 526  : 				else
; 527  : 					if (pDispSort->dispPrio >= DISP_PRIO_MENU) {

  003bf	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  003c2	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv4254[ebp], eax
  003c8	0f bf 04 8d 06
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+6]
  003d0	83 c0 02	 add	 eax, 2
  003d3	03 c2		 add	 eax, edx
  003d5	89 85 f8 fe ff
	ff		 mov	 DWORD PTR tv4099[ebp], eax
  003db	0f bf 04 8d 04
	00 00 00	 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx*4+4]
  003e3	83 c0 02	 add	 eax, 2
  003e6	03 c7		 add	 eax, edi
  003e8	80 fb 68	 cmp	 bl, 104			; 00000068H
  003eb	72 0e		 jb	 SHORT $LN38@HitMouseCu

; 528  : #ifndef __CARYTEST
; 529  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  003ed	6a 6b		 push	 107			; 0000006bH
  003ef	ff b5 f8 fe ff
	ff		 push	 DWORD PTR tv4099[ebp]
  003f5	50		 push	 eax
  003f6	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]

; 530  : 							pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 531  : 							pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 532  : 							//DISP_PRIO_BOX2, 250, 0 );
; 533  : 							DISP_PRIO_BOX2, BoxColor, 0);
; 534  : #else
; 535  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 536  : 							pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 537  : 							pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 538  : 							DISP_PRIO_BOX2, BoxColor, 0);
; 539  : #endif
; 540  : 					}else {

  003f9	eb 0f		 jmp	 SHORT $LN166@HitMouseCu
$LN38@HitMouseCu:

; 541  : #ifndef __CARYTEST
; 542  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  003fb	6a 65		 push	 101			; 00000065H
  003fd	ff b5 f8 fe ff
	ff		 push	 DWORD PTR tv4099[ebp]
  00403	50		 push	 eax
  00404	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv4254[ebp]
$LN166@HitMouseCu:

; 543  : 							pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 544  : 							pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 545  : 							//DISP_PRIO_BOX, 250, 0 );
; 546  : 							DISP_PRIO_BOX, BoxColor, 0);
; 547  : 						//pDispSort->dispPrio, 250, 0 );
; 548  : #else
; 549  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 550  : 							pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 551  : 							pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 552  : 							DISP_PRIO_BOX, BoxColor, 0);
; 553  : #endif
; 554  : 					}
; 555  : 					if (pDispInfo->hitFlag >= 3) CheckGroupSelect(pDispInfo->hitFlag);

  0040a	50		 push	 eax
  0040b	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]
  0040e	50		 push	 eax
  0040f	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  00414	8b 04 f5 10 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+16]
  0041b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0041e	83 f8 03	 cmp	 eax, 3
  00421	7c 09		 jl	 SHORT $LN40@HitMouseCu
  00423	50		 push	 eax
  00424	e8 00 00 00 00	 call	 ?CheckGroupSelect@@YAXH@Z ; CheckGroupSelect
  00429	83 c4 04	 add	 esp, 4
$LN40@HitMouseCu:

; 556  : 					SortDispBuffer();

  0042c	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer
  00431	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
$LN35@HitMouseCu:

; 557  : 			}
; 558  : 			if (TaskBarFlag == FALSE){

  00437	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  0043e	0f 85 6a 07 00
	00		 jne	 $LN122@HitMouseCu

; 559  : 				if (pDispInfo->pAct != NULL){

  00444	8b 14 f5 0c 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12]
  0044b	85 d2		 test	 edx, edx
  0044d	0f 84 42 07 00
	00		 je	 $LN163@HitMouseCu

; 560  : 					if (pDispInfo->pAct->atr & ACT_ATR_INFO){

  00453	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00459	a8 10		 test	 al, 16			; 00000010H
  0045b	0f 84 34 07 00
	00		 je	 $LN163@HitMouseCu

; 561  : 						if (ProcNo == PROC_GAME){

  00461	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ProcNo@@3IA ; ProcNo
  00467	83 f9 09	 cmp	 ecx, 9
  0046a	0f 85 1b 04 00
	00		 jne	 $LN44@HitMouseCu

; 562  : #ifdef _MOUSE_SHOW_INFO_FOR_HEAD
; 563  : 							extern short nameOverTheHeadFlag;
; 564  : 							if (!nameOverTheHeadFlag){//F11å¼å¯æ¶ï¼ä¸æ¾ç¤º

  00470	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?nameOverTheHeadFlag@@3FA, 0 ; nameOverTheHeadFlag
  00478	75 58		 jne	 SHORT $LN46@HitMouseCu

; 565  : 								char msg[256];
; 566  : 								sprintf( msg, "%s", pDispInfo->pAct->name);

  0047a	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  0047d	50		 push	 eax
  0047e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$1[ebp]
  00484	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00489	50		 push	 eax
  0048a	e8 00 00 00 00	 call	 _sprintf

; 567  : 								int left = GetStrWidth(msg) / 2;

  0048f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$1[ebp]
  00495	50		 push	 eax
  00496	e8 00 00 00 00	 call	 ?GetStrWidth@@YAHPAD@Z	; GetStrWidth
  0049b	99		 cdq

; 568  : 								StockFontBuffer( pDispInfo->pAct->x-left, pDispInfo->pAct->y-10, FONT_PRIO_FRONT, 0, msg, 0 );

  0049c	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$1[ebp]
  004a2	2b c2		 sub	 eax, edx
  004a4	8b d0		 mov	 edx, eax
  004a6	8b 04 f5 0c 00
	00 00		 mov	 eax, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12]
  004ad	6a 00		 push	 0
  004af	51		 push	 ecx
  004b0	6a 00		 push	 0
  004b2	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  004b5	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  004b8	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  004bb	d1 fa		 sar	 edx, 1
  004bd	6a 01		 push	 1
  004bf	51		 push	 ecx
  004c0	2b c2		 sub	 eax, edx
  004c2	50		 push	 eax
  004c3	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  004c8	8b 14 f5 0c 00
	00 00		 mov	 edx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[esi*8+12]
  004cf	83 c4 28	 add	 esp, 40			; 00000028H
$LN46@HitMouseCu:

; 569  : 								//StockFontBuffer(pDispInfo->x + 20 - left, pDispInfo->y - 10, FONT_PRIO_FRONT, itemNameColor, pDispInfo->pAct->name, 0);
; 570  : 
; 571  : 							}
; 572  : #endif
; 573  : #ifdef _STONEAGE_NG
; 574  : 							if (DllInterface.MouseShowName != NULL) {
; 575  : 								if (DllOptionCheck.MouseShowName == TRUE) {
; 576  : 									DllInterface.MouseShowName(pDispInfo);
; 577  : 								}
; 578  : 							}
; 579  : #endif
; 580  : 							if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PC){

  004d2	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  004d8	84 c0		 test	 al, al
  004da	0f 89 92 01 00
	00		 jns	 $LN47@HitMouseCu

; 581  : 								itemNameColor = pDispInfo->pAct->itemNameColor;
; 582  : 								if (pDispInfo->pAct->freeName[0] != NULL) {

  004e0	80 7a 55 00	 cmp	 BYTE PTR [edx+85], 0
  004e4	8d 4a 55	 lea	 ecx, DWORD PTR [edx+85]
  004e7	8b ba 94 00 00
	00		 mov	 edi, DWORD PTR [edx+148]
  004ed	8d b2 98 01 00
	00		 lea	 esi, DWORD PTR [edx+408]
  004f3	8a 1e		 mov	 bl, BYTE PTR [esi]
  004f5	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  004f8	89 bd f8 fe ff
	ff		 mov	 DWORD PTR _itemNameColor$1$[ebp], edi
  004fe	0f 84 be 00 00
	00		 je	 $LN49@HitMouseCu

; 583  : 									//sprintf_s( OneLineInfoStr,"%s [%s] Lvï¼%d  èï¼%dï¼%d  æ°ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp );
; 584  : 									if (pDispInfo->pAct->petName[0] != NULL){

  00504	84 db		 test	 bl, bl
  00506	74 67		 je	 SHORT $LN51@HitMouseCu

; 585  : 										if (pc.familyName[0] != NULL){

  00508	80 3d f6 50 00
	00 00		 cmp	 BYTE PTR ?pc@@3UPC@@A+20726, 0
  0050f	8b ba ac 01 00
	00		 mov	 edi, DWORD PTR [edx+428]
  00515	57		 push	 edi
  00516	56		 push	 esi
  00517	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  0051d	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00523	ff 72 78	 push	 DWORD PTR [edx+120]
  00526	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  0052c	51		 push	 ecx
  0052d	50		 push	 eax
  0052e	74 22		 je	 SHORT $LN53@HitMouseCu

; 586  : 											sprintf_s(OneLineInfoStr, "{%s} %s [%s]    ë ë²¨ï¼%d  ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d",

  00530	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  00535	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@
  0053a	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0053f	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00544	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  0054a	83 c4 2c	 add	 esp, 44			; 0000002cH
  0054d	e9 45 06 00 00	 jmp	 $LN121@HitMouseCu
$LN53@HitMouseCu:

; 587  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp,
; 588  : 												pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 589  : 										}else{
; 590  : 											sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d  ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d",

  00552	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
  00557	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0055c	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00561	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  00567	83 c4 28	 add	 esp, 40			; 00000028H
  0056a	e9 28 06 00 00	 jmp	 $LN121@HitMouseCu
$LN51@HitMouseCu:

; 591  : 												pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp,
; 592  : 												pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 593  : 										}
; 594  : 									}else{
; 595  : 										if (pc.familyName[0] != NULL)

  0056f	80 3d f6 50 00
	00 00		 cmp	 BYTE PTR ?pc@@3UPC@@A+20726, 0
  00576	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  0057c	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00582	ff 72 78	 push	 DWORD PTR [edx+120]
  00585	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  0058b	51		 push	 ecx
  0058c	50		 push	 eax
  0058d	74 1c		 je	 SHORT $LN55@HitMouseCu

; 596  : 											sprintf_s(OneLineInfoStr, "{%s} %s [%s]    ë ë²¨ï¼%d  ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d",

  0058f	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  00594	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD@
  00599	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0059e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  005a3	83 c4 24	 add	 esp, 36			; 00000024H
  005a6	e9 ec 05 00 00	 jmp	 $LN121@HitMouseCu
$LN55@HitMouseCu:

; 597  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 598  : 										else
; 599  : 											sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d  ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d",

  005ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
  005b0	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  005b5	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  005ba	83 c4 20	 add	 esp, 32			; 00000020H

; 600  : 												pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 601  : 									}
; 602  : 								}else {

  005bd	e9 d5 05 00 00	 jmp	 $LN121@HitMouseCu
$LN49@HitMouseCu:

; 603  : 									//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d  èï¼%dï¼%d  æ°ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp );
; 604  : 									if (pDispInfo->pAct->petName[0] != NULL)

  005c2	84 db		 test	 bl, bl
  005c4	74 5a		 je	 SHORT $LN57@HitMouseCu

; 605  : 										if (pc.familyName[0] != NULL)

  005c6	80 3d f6 50 00
	00 00		 cmp	 BYTE PTR ?pc@@3UPC@@A+20726, 0
  005cd	8b 8a ac 01 00
	00		 mov	 ecx, DWORD PTR [edx+428]
  005d3	51		 push	 ecx
  005d4	56		 push	 esi
  005d5	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  005db	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  005e1	ff 72 78	 push	 DWORD PTR [edx+120]
  005e4	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  005ea	50		 push	 eax
  005eb	74 1c		 je	 SHORT $LN59@HitMouseCu

; 606  : 											sprintf_s(OneLineInfoStr, "{%s} %s    ë ë²¨ï¼%d  ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d",

  005ed	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  005f2	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
  005f7	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  005fc	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00601	83 c4 28	 add	 esp, 40			; 00000028H
  00604	e9 8e 05 00 00	 jmp	 $LN121@HitMouseCu
$LN59@HitMouseCu:

; 607  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 608  : 										else
; 609  : 											sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d  ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d",

  00609	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
  0060e	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00613	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00618	83 c4 24	 add	 esp, 36			; 00000024H
  0061b	e9 77 05 00 00	 jmp	 $LN121@HitMouseCu
$LN57@HitMouseCu:

; 610  : 												pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 611  : 									else
; 612  : 										if (pc.familyName[0] != NULL)

  00620	80 3d f6 50 00
	00 00		 cmp	 BYTE PTR ?pc@@3UPC@@A+20726, 0
  00627	ff 35 18 00 00
	00		 push	 DWORD PTR ?pc@@3UPC@@A+24
  0062d	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00633	ff 72 78	 push	 DWORD PTR [edx+120]
  00636	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  0063c	50		 push	 eax
  0063d	74 1c		 je	 SHORT $LN61@HitMouseCu

; 613  : 											sprintf_s(OneLineInfoStr, "{%s} %s    ë ë²¨ï¼%d   ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d",

  0063f	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  00644	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD@
  00649	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0064e	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00653	83 c4 20	 add	 esp, 32			; 00000020H
  00656	e9 3c 05 00 00	 jmp	 $LN121@HitMouseCu
$LN61@HitMouseCu:

; 614  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 615  : 										else
; 616  : 											sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d   ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d",

  0065b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB@
  00660	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00665	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0066a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 617  : 												pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 618  : 								}
; 619  : 							}else

  0066d	e9 25 05 00 00	 jmp	 $LN121@HitMouseCu
$LN47@HitMouseCu:

; 620  : 								if (pDispInfo->pAct->atr & ACT_ATR_TYPE_OTHER_PC) {

  00672	a9 00 01 00 00	 test	 eax, 256		; 00000100H
  00677	0f 84 86 01 00
	00		 je	 $LN63@HitMouseCu

; 621  : #ifdef _MOUSE_DBL_CLICK
; 622  : 									if (mouseDblRightOn) {

  0067d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouseDblRightOn@@3HA, 0 ; mouseDblRightOn
  00684	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00687	74 22		 je	 SHORT $LN65@HitMouseCu

; 623  : 										openServerWindow(WINDOW_MESSAGETYPE_MOUSEGETNAME, 0, 0, 0, pDispInfo->pAct->name);

  00689	50		 push	 eax
  0068a	6a 00		 push	 0
  0068c	6a 00		 push	 0
  0068e	6a 00		 push	 0
  00690	6a 67		 push	 103			; 00000067H
  00692	e8 00 00 00 00	 call	 ?openServerWindow@@YAXHHHHPAD@Z ; openServerWindow
  00697	83 c4 14	 add	 esp, 20			; 00000014H
  0069a	5f		 pop	 edi

; 825  : 
; 826  : }

  0069b	5e		 pop	 esi
  0069c	5b		 pop	 ebx
  0069d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006a0	33 cd		 xor	 ecx, ebp
  006a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006a7	8b e5		 mov	 esp, ebp
  006a9	5d		 pop	 ebp
  006aa	c3		 ret	 0
$LN65@HitMouseCu:

; 624  : 										return;
; 625  : 									}
; 626  : #endif
; 627  : 									itemNameColor = pDispInfo->pAct->itemNameColor;
; 628  : 									if (pDispInfo->pAct->freeName[0] != NULL) {

  006ab	80 7a 55 00	 cmp	 BYTE PTR [edx+85], 0
  006af	8d 72 55	 lea	 esi, DWORD PTR [edx+85]
  006b2	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  006b8	8d ba 98 01 00
	00		 lea	 edi, DWORD PTR [edx+408]
  006be	8a 3f		 mov	 bh, BYTE PTR [edi]
  006c0	8a 9a 70 01 00
	00		 mov	 bl, BYTE PTR [edx+368]
  006c6	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _itemNameColor$1$[ebp], ecx
  006cc	8d 8a 70 01 00
	00		 lea	 ecx, DWORD PTR [edx+368]
  006d2	0f 84 a7 00 00
	00		 je	 $LN66@HitMouseCu

; 629  : 										//sprintf_s( OneLineInfoStr,"%s [%s]  Lvï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 630  : 										if (pDispInfo->pAct->petName[0] != NULL)

  006d8	88 9d f7 fe ff
	ff		 mov	 BYTE PTR tv4135[ebp], bl
  006de	84 ff		 test	 bh, bh
  006e0	74 55		 je	 SHORT $LN68@HitMouseCu

; 631  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  006e2	80 bd f7 fe ff
	ff 00		 cmp	 BYTE PTR tv4135[ebp], 0
  006e9	8b 9a ac 01 00
	00		 mov	 ebx, DWORD PTR [edx+428]
  006ef	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  006f5	53		 push	 ebx
  006f6	57		 push	 edi
  006f7	52		 push	 edx
  006f8	56		 push	 esi
  006f9	50		 push	 eax
  006fa	74 1e		 je	 SHORT $LN70@HitMouseCu

; 632  : 												sprintf_s(OneLineInfoStr, "{%s} %s [%s]    ë ë²¨ï¼%d [íì¹]%s ë ë²¨ï¼%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  006fc	51		 push	 ecx
  006fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN@
  00702	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00707	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  0070c	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  00712	83 c4 20	 add	 esp, 32			; 00000020H
  00715	e9 7d 04 00 00	 jmp	 $LN121@HitMouseCu
$LN70@HitMouseCu:

; 633  : 											else
; 634  : 												sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d [íì¹]%s ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  0071a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
  0071f	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00724	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00729	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  0072f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00732	e9 60 04 00 00	 jmp	 $LN121@HitMouseCu
$LN68@HitMouseCu:

; 635  : 										else
; 636  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  00737	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  0073d	52		 push	 edx
  0073e	56		 push	 esi
  0073f	50		 push	 eax
  00740	84 db		 test	 bl, bl
  00742	74 1e		 je	 SHORT $LN72@HitMouseCu

; 637  : 												sprintf_s(OneLineInfoStr, "{%s} %s [%s]    ë ë²¨ï¼%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00744	51		 push	 ecx
  00745	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  0074a	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0074f	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00754	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  0075a	83 c4 18	 add	 esp, 24			; 00000018H
  0075d	e9 35 04 00 00	 jmp	 $LN121@HitMouseCu
$LN72@HitMouseCu:

; 638  : 											else
; 639  : 												sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00762	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
$LN169@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00767	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0076c	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00771	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  00777	83 c4 14	 add	 esp, 20			; 00000014H
  0077a	e9 18 04 00 00	 jmp	 $LN121@HitMouseCu
$LN66@HitMouseCu:

; 640  : 									}else{
; 641  : 										//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 642  : 										if (pDispInfo->pAct->petName[0] != NULL)

  0077f	84 ff		 test	 bh, bh
  00781	74 4f		 je	 SHORT $LN74@HitMouseCu

; 643  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  00783	8b b2 ac 01 00
	00		 mov	 esi, DWORD PTR [edx+428]
  00789	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  0078f	56		 push	 esi
  00790	57		 push	 edi
  00791	52		 push	 edx
  00792	50		 push	 eax
  00793	84 db		 test	 bl, bl
  00795	74 1e		 je	 SHORT $LN76@HitMouseCu

; 644  : 												sprintf_s(OneLineInfoStr, "{%s} %s    ë ë²¨ï¼%d [íì¹]%s ë ë²¨ï¼%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  00797	51		 push	 ecx
  00798	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
  0079d	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  007a2	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  007a7	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  007ad	83 c4 1c	 add	 esp, 28			; 0000001cH
  007b0	e9 e2 03 00 00	 jmp	 $LN121@HitMouseCu
$LN76@HitMouseCu:

; 645  : 											else
; 646  : 												sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d [íì¹]%s ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  007b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@
  007ba	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  007bf	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  007c4	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  007ca	83 c4 18	 add	 esp, 24			; 00000018H
  007cd	e9 c5 03 00 00	 jmp	 $LN121@HitMouseCu
$LN74@HitMouseCu:

; 647  : 										else
; 648  : 											if (pDispInfo->pAct->fmname[0] != NULL) {

  007d2	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  007d8	52		 push	 edx
  007d9	50		 push	 eax
  007da	84 db		 test	 bl, bl
  007dc	74 08		 je	 SHORT $LN78@HitMouseCu

; 649  : 												sprintf_s(OneLineInfoStr, "{%s} %s    ë ë²¨ï¼%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->level);

  007de	51		 push	 ecx
  007df	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@

; 650  : 											}

  007e4	eb 81		 jmp	 SHORT $LN169@HitMouseCu
$LN78@HitMouseCu:

; 651  : 											else {
; 652  : 												sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  007e6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  007eb	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  007f0	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  007f5	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _itemNameColor$1$[ebp]
  007fb	83 c4 10	 add	 esp, 16			; 00000010H
  007fe	e9 94 03 00 00	 jmp	 $LN121@HitMouseCu
$LN63@HitMouseCu:

; 653  : 											}
; 654  : 									}
; 655  : 								}else
; 656  : 									if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PET) {//å¯¹ååçº¯æ¯å® ç©

  00803	a9 00 02 00 00	 test	 eax, 512		; 00000200H
  00808	74 20		 je	 SHORT $LN80@HitMouseCu

; 657  : 										if (pDispInfo->pAct->freeName[0] != NULL) {
; 658  : 											sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d", pDispInfo->pAct->freeName, pDispInfo->pAct->level);
; 659  : 										}
; 660  : 										else {
; 661  : 											sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level);
; 662  : 										}
; 663  : 									}else

  0080a	80 7a 55 00	 cmp	 BYTE PTR [edx+85], 0
  0080e	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00813	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00818	0f 44 c8	 cmove	 ecx, eax
  0081b	03 ca		 add	 ecx, edx
$LN93@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  0081d	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00823	50		 push	 eax
  00824	51		 push	 ecx
  00825	e9 59 03 00 00	 jmp	 $LN171@HitMouseCu
$LN80@HitMouseCu:

; 664  : 										if (pDispInfo->pAct->atr & ACT_ATR_TYPE_ITEM) {

  0082a	a9 00 04 00 00	 test	 eax, 1024		; 00000400H
  0082f	74 2b		 je	 SHORT $LN84@HitMouseCu

; 665  : 											itemNameColor = pDispInfo->pAct->itemNameColor;

  00831	8b ba 94 00 00
	00		 mov	 edi, DWORD PTR [edx+148]

; 666  : 											sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);

  00837	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  0083a	50		 push	 eax
  0083b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00840	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00845	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0084a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 667  : #ifdef _ITEM_PATH
; 668  : 											ITEMPATHFLAG = TRUE;

  0084d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ITEMPATHFLAG@@3HA, 1 ; ITEMPATHFLAG

; 669  : #endif
; 670  : 										}else

  00857	e9 3b 03 00 00	 jmp	 $LN121@HitMouseCu
$LN84@HitMouseCu:

; 671  : 											if (pDispInfo->pAct->atr & ACT_ATR_TYPE_GOLD) {

  0085c	a9 00 08 00 00	 test	 eax, 2048		; 00000800H
  00861	74 1b		 je	 SHORT $LN86@HitMouseCu
$LN168@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00863	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00866	50		 push	 eax
  00867	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0086c	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00871	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00876	83 c4 0c	 add	 esp, 12			; 0000000cH
  00879	e9 17 03 00 00	 jmp	 $LN163@HitMouseCu
$LN86@HitMouseCu:

; 672  : 												sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);
; 673  : 											}else
; 674  : 												if (pDispInfo->pAct->atr & ACT_ATR_TYPE_OTHER) {

  0087e	a9 00 10 00 00	 test	 eax, 4096		; 00001000H
  00883	0f 84 0c 03 00
	00		 je	 $LN163@HitMouseCu

; 675  : 													sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);
; 676  : 												}
; 677  : 						}else

  00889	eb d8		 jmp	 SHORT $LN168@HitMouseCu
$LN44@HitMouseCu:

; 678  : 							if (ProcNo == PROC_BATTLE) {

  0088b	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0088e	0f 85 01 03 00
	00		 jne	 $LN163@HitMouseCu

; 679  : 								if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PET) {

  00894	a9 00 02 00 00	 test	 eax, 512		; 00000200H
  00899	74 1d		 je	 SHORT $LN90@HitMouseCu

; 680  : 									if (pDispInfo->pAct->freeName[0] != NULL) {

  0089b	80 7a 55 00	 cmp	 BYTE PTR [edx+85], 0
  0089f	8d 4a 55	 lea	 ecx, DWORD PTR [edx+85]
  008a2	0f 85 75 ff ff
	ff		 jne	 $LN93@HitMouseCu

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  008a8	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  008ae	8d 4a 38	 lea	 ecx, DWORD PTR [edx+56]
  008b1	50		 push	 eax
  008b2	51		 push	 ecx
  008b3	e9 cb 02 00 00	 jmp	 $LN171@HitMouseCu
$LN90@HitMouseCu:

; 681  : 										sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d", pDispInfo->pAct->freeName, pDispInfo->pAct->level);
; 682  : 									}else {
; 683  : 										sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level);
; 684  : 									}
; 685  : 								}else
; 686  : 									if (pDispInfo->pAct->atr & ACT_ATR_TYPE_ITEM) {

  008b8	a9 00 04 00 00	 test	 eax, 1024		; 00000400H
  008bd	75 a4		 jne	 SHORT $LN168@HitMouseCu

; 687  : 										//itemNameColor = pDispInfo->pAct->itemNameColor;
; 688  : 										sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);
; 689  : 									}else
; 690  : 										if (BattleMyNo < BATTLKPKPLYAERNUM) {

  008bf	8d 4a 55	 lea	 ecx, DWORD PTR [edx+85]
  008c2	83 ff 14	 cmp	 edi, 20			; 00000014H
  008c5	0f 8d 92 02 00
	00		 jge	 $LN96@HitMouseCu

; 691  : 											if (((ATR_EQU *)pDispInfo->pAct->pYobi)->place_no == BattleMyNo) {

  008cb	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]
  008ce	0f b6 86 1f 01
	00 00		 movzx	 eax, BYTE PTR [esi+287]
  008d5	3b c7		 cmp	 eax, edi
  008d7	0f 85 00 01 00
	00		 jne	 $LN98@HitMouseCu

; 692  : 												if (pDispInfo->pAct->freeName[0] != NULL) {

  008dd	80 39 00	 cmp	 BYTE PTR [ecx], 0
  008e0	8d 72 38	 lea	 esi, DWORD PTR [edx+56]
  008e3	8b 82 94 01 00
	00		 mov	 eax, DWORD PTR [edx+404]
  008e9	74 7a		 je	 SHORT $LN100@HitMouseCu

; 693  : 													if (pDispInfo->pAct->onRide == 1)

  008eb	83 f8 01	 cmp	 eax, 1
  008ee	75 47		 jne	 SHORT $LN102@HitMouseCu

; 694  : 														sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d",

  008f0	ff b2 b4 01 00
	00		 push	 DWORD PTR [edx+436]
  008f6	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  008fc	ff b2 b0 01 00
	00		 push	 DWORD PTR [edx+432]
  00902	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  00908	50		 push	 eax
  00909	ff b2 84 00 00
	00		 push	 DWORD PTR [edx+132]
  0090f	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00915	ff 72 78	 push	 DWORD PTR [edx+120]
  00918	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  0091e	51		 push	 ecx
  0091f	56		 push	 esi
  00920	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  00925	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0092a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0092f	83 c4 30	 add	 esp, 48			; 00000030H
  00932	e9 5e 02 00 00	 jmp	 $LN163@HitMouseCu
$LN102@HitMouseCu:

; 695  : 															pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp,
; 696  : 															pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 697  : 													else
; 698  : 														sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d",

  00937	ff b2 84 00 00
	00		 push	 DWORD PTR [edx+132]
  0093d	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00943	ff 72 78	 push	 DWORD PTR [edx+120]
  00946	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  0094c	51		 push	 ecx
  0094d	56		 push	 esi
  0094e	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  00953	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00958	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0095d	83 c4 20	 add	 esp, 32			; 00000020H

; 699  : 															pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp);
; 700  : 												}

  00960	e9 30 02 00 00	 jmp	 $LN163@HitMouseCu
$LN100@HitMouseCu:

; 701  : 												else {
; 702  : 													//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d  èï¼%dï¼%d  æ°ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, BattleMyMp );
; 703  : 													//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d  èï¼%dï¼%d  æ°ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp );
; 704  : 													if (pDispInfo->pAct->onRide == 1)

  00965	83 f8 01	 cmp	 eax, 1
  00968	75 46		 jne	 SHORT $LN104@HitMouseCu

; 705  : 														sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d  ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d",

  0096a	ff b2 b4 01 00
	00		 push	 DWORD PTR [edx+436]
  00970	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00976	ff b2 b0 01 00
	00		 push	 DWORD PTR [edx+432]
  0097c	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  00982	50		 push	 eax
  00983	ff b2 84 00 00
	00		 push	 DWORD PTR [edx+132]
  00989	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  0098f	ff 72 78	 push	 DWORD PTR [edx+120]
  00992	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00998	56		 push	 esi
  00999	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
  0099e	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  009a3	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  009a8	83 c4 2c	 add	 esp, 44			; 0000002cH
  009ab	e9 e5 01 00 00	 jmp	 $LN163@HitMouseCu
$LN104@HitMouseCu:

; 706  : 															pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp,
; 707  : 															pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 708  : 													else
; 709  : 														sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d  ì²´ë ¥ï¼%dï¼%d ê¸°ë ¥ï¼%d",

  009b0	ff b2 84 00 00
	00		 push	 DWORD PTR [edx+132]
  009b6	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  009bc	ff 72 78	 push	 DWORD PTR [edx+120]
  009bf	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  009c5	56		 push	 esi
  009c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
  009cb	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  009d0	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  009d5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 710  : 															pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp);
; 711  : 												}
; 712  : 											}else

  009d8	e9 b8 01 00 00	 jmp	 $LN163@HitMouseCu
$LN98@HitMouseCu:

; 713  : 												if (((ATR_EQU *)p_party[BattleMyNo]->pYobi)->group_flg == ((ATR_EQU *)pDispInfo->pAct->pYobi)->group_flg) {

  009dd	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?p_party@@3PAPAUaction@@A[edi*4]
  009e4	8a 19		 mov	 bl, BYTE PTR [ecx]
  009e6	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  009e9	8a 40 5e	 mov	 al, BYTE PTR [eax+94]
  009ec	3a 46 5e	 cmp	 al, BYTE PTR [esi+94]
  009ef	8b 82 94 01 00
	00		 mov	 eax, DWORD PTR [edx+404]
  009f5	0f 85 e1 00 00
	00		 jne	 $LN106@HitMouseCu

; 714  : 													//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d  èï¼%4d/%4d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 715  : 													if (pDispInfo->pAct->freeName[0] != NULL) {

  009fb	8d 72 38	 lea	 esi, DWORD PTR [edx+56]
  009fe	84 db		 test	 bl, bl
  00a00	74 6e		 je	 SHORT $LN108@HitMouseCu

; 716  : 														//sprintf_s( OneLineInfoStr,"%s [%s]  Lvï¼%d  èï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 717  : 														if (pDispInfo->pAct->onRide == 1)

  00a02	83 f8 01	 cmp	 eax, 1
  00a05	75 41		 jne	 SHORT $LN110@HitMouseCu

; 718  : 															sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d [íì¹]%s Lvï¼%d ì²´ë ¥ï¼%dï¼%d",

  00a07	ff b2 b4 01 00
	00		 push	 DWORD PTR [edx+436]
  00a0d	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00a13	ff b2 b0 01 00
	00		 push	 DWORD PTR [edx+432]
  00a19	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  00a1f	50		 push	 eax
  00a20	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00a26	ff 72 78	 push	 DWORD PTR [edx+120]
  00a29	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00a2f	51		 push	 ecx
  00a30	56		 push	 esi
  00a31	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  00a36	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00a3b	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a40	83 c4 2c	 add	 esp, 44			; 0000002cH
  00a43	e9 4d 01 00 00	 jmp	 $LN163@HitMouseCu
$LN110@HitMouseCu:

; 719  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp,
; 720  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 721  : 														else
; 722  : 															sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d",

  00a48	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00a4e	ff 72 78	 push	 DWORD PTR [edx+120]
  00a51	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00a57	51		 push	 ecx
  00a58	56		 push	 esi
  00a59	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  00a5e	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00a63	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a68	83 c4 1c	 add	 esp, 28			; 0000001cH

; 723  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 724  : 													}else {

  00a6b	e9 25 01 00 00	 jmp	 $LN163@HitMouseCu
$LN108@HitMouseCu:

; 725  : 														//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d  èï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 726  : 														if (pDispInfo->pAct->onRide == 1)

  00a70	83 f8 01	 cmp	 eax, 1
  00a73	75 40		 jne	 SHORT $LN112@HitMouseCu

; 727  : 															sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d [íì¹]%s ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d",

  00a75	ff b2 b4 01 00
	00		 push	 DWORD PTR [edx+436]
  00a7b	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00a81	ff b2 b0 01 00
	00		 push	 DWORD PTR [edx+432]
  00a87	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  00a8d	50		 push	 eax
  00a8e	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00a94	ff 72 78	 push	 DWORD PTR [edx+120]
  00a97	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00a9d	56		 push	 esi
  00a9e	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO@
  00aa3	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00aa8	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00aad	83 c4 28	 add	 esp, 40			; 00000028H
  00ab0	e9 e0 00 00 00	 jmp	 $LN163@HitMouseCu
$LN112@HitMouseCu:

; 728  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp,
; 729  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 730  : 														else
; 731  : 															sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d",

  00ab5	ff b2 80 00 00
	00		 push	 DWORD PTR [edx+128]
  00abb	ff 72 78	 push	 DWORD PTR [edx+120]
  00abe	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00ac4	56		 push	 esi
  00ac5	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
  00aca	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00acf	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00ad4	83 c4 18	 add	 esp, 24			; 00000018H

; 732  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 733  : 													}
; 734  : 												}else{

  00ad7	e9 b9 00 00 00	 jmp	 $LN163@HitMouseCu
$LN106@HitMouseCu:

; 735  : 													if (pDispInfo->pAct->freeName[0] != NULL) {

  00adc	84 db		 test	 bl, bl
  00ade	74 44		 je	 SHORT $LN114@HitMouseCu

; 736  : 														//sprintf_s( OneLineInfoStr,"%s [%s]  Lvï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 737  : 														if (pDispInfo->pAct->onRide == 1)

  00ae0	83 f8 01	 cmp	 eax, 1
  00ae3	75 13		 jne	 SHORT $LN116@HitMouseCu

; 738  : #ifdef _CAX_LOOK_HPMP
; 739  : 															sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d ì²´ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d ì²´ë ¥ï¼%d",
; 740  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 741  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 742  : #else
; 743  : 															sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d [íì¹]%s ë ë²¨ï¼%d",

  00ae5	8b ba ac 01 00
	00		 mov	 edi, DWORD PTR [edx+428]
  00aeb	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00af1	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ@
  00af6	eb 0e		 jmp	 SHORT $LN117@HitMouseCu
$LN116@HitMouseCu:

; 744  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level,
; 745  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 746  : #endif
; 747  : 														else
; 748  : #ifndef _CAX_LOOK_HPMP
; 749  : 															sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d",

  00af8	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00afb	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  00b00	8b ba 80 00 00
	00		 mov	 edi, DWORD PTR [edx+128]
$LN117@HitMouseCu:

; 750  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 751  : #else
; 752  : 															sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d",
; 753  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);
; 754  : #endif
; 755  : 													}else{

  00b06	57		 push	 edi
  00b07	50		 push	 eax
  00b08	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00b0e	50		 push	 eax
  00b0f	51		 push	 ecx
  00b10	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00b13	50		 push	 eax
  00b14	56		 push	 esi
  00b15	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00b1a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00b1f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00b22	eb 71		 jmp	 SHORT $LN163@HitMouseCu
$LN114@HitMouseCu:

; 756  : 														//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 757  : 														if (pDispInfo->pAct->onRide == 1)

  00b24	8d 4a 38	 lea	 ecx, DWORD PTR [edx+56]
  00b27	83 f8 01	 cmp	 eax, 1
  00b2a	75 28		 jne	 SHORT $LN118@HitMouseCu

; 758  : #ifdef _CAX_LOOK_HPMP
; 759  : 															sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d ì²´ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d ì²´ë ¥ï¼%d",
; 760  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 761  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 762  : #else
; 763  : 															sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d [íì¹]%s ë ë²¨ï¼%d",

  00b2c	ff b2 ac 01 00
	00		 push	 DWORD PTR [edx+428]
  00b32	8d 82 98 01 00
	00		 lea	 eax, DWORD PTR [edx+408]
  00b38	50		 push	 eax
  00b39	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]
  00b3f	51		 push	 ecx
  00b40	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CF@
  00b45	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00b4a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00b4f	83 c4 18	 add	 esp, 24			; 00000018H
  00b52	eb 41		 jmp	 SHORT $LN163@HitMouseCu
$LN118@HitMouseCu:

; 764  : 																pDispInfo->pAct->name, pDispInfo->pAct->level,
; 765  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 766  : #endif
; 767  : 														else
; 768  : #ifdef _CAX_LOOK_HPMP
; 769  : 															sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d",
; 770  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 771  : #else
; 772  : 															sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  00b54	ff b2 8c 00 00
	00		 push	 DWORD PTR [edx+140]

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00b5a	51		 push	 ecx
  00b5b	eb 26		 jmp	 SHORT $LN171@HitMouseCu
$LN96@HitMouseCu:

; 773  : #endif
; 774  : 													}
; 775  : 												}
; 776  : 										}else{
; 777  : #ifdef _CAX_LOOK_HPMP
; 778  : 											if (pDispInfo->pAct->freeName[0] != NULL) {
; 779  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lvï¼%d  èï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 780  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lvï¼%d  èï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 781  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lvï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 782  : 												sprintf(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d ì²´ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d èï¼%d",
; 783  : 													pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 784  : 													pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 785  : 											}else{
; 786  : 												//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d  èï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 787  : 												//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d  èï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 788  : 												//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 789  : 												if (pDispInfo->pAct->petLevel == 0) {
; 790  : 													sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d ì²´ë ¥ï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 791  : 												}
; 792  : 												else {
; 793  : 													sprintf(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d ì²´ë ¥ï¼%d [íì¹]%s ë ë²¨ï¼%d ì²´ë ¥ï¼%d",
; 794  : 														pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 795  : 														pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 796  : 												}
; 797  : 											}
; 798  : #else
; 799  : 											if (pDispInfo->pAct->freeName[0] != NULL) {

  00b5d	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00b60	8d 42 38	 lea	 eax, DWORD PTR [edx+56]
  00b63	8b 92 8c 00 00
	00		 mov	 edx, DWORD PTR [edx+140]
  00b69	52		 push	 edx
  00b6a	74 16		 je	 SHORT $LN120@HitMouseCu

; 800  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lvï¼%d  èï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 801  : 												sprintf_s(OneLineInfoStr, "%s [%s]    ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00b6c	51		 push	 ecx
  00b6d	50		 push	 eax
  00b6e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  00b73	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00b78	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00b7d	83 c4 14	 add	 esp, 20			; 00000014H

; 802  : 											}else{

  00b80	eb 13		 jmp	 SHORT $LN163@HitMouseCu
$LN120@HitMouseCu:

; 803  : 												//sprintf_s( OneLineInfoStr,"%s  Lvï¼%d  èï¼%dï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 804  : 												sprintf_s(OneLineInfoStr, "%s    ë ë²¨ï¼%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  00b82	50		 push	 eax
$LN171@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  00b83	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  00b88	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00b8d	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00b92	83 c4 10	 add	 esp, 16			; 00000010H
$LN163@HitMouseCu:
  00b95	33 ff		 xor	 edi, edi
$LN121@HitMouseCu:
  00b97	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?oneLineInfoFlag@@3HA, 0 ; oneLineInfoFlag
  00b9e	74 0e		 je	 SHORT $LN122@HitMouseCu

; 812  : 					ShowBottomLineString(itemNameColor, OneLineInfoStr);

  00ba0	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00ba5	57		 push	 edi
  00ba6	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  00bab	83 c4 08	 add	 esp, 8
$LN122@HitMouseCu:

; 813  : 			}
; 814  : 			OneLineInfoStr[0] = NULL;
; 815  : 			mouse.level = pDispSort->dispPrio;

  00bae	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pDispSort$1$[ebp]

; 825  : 
; 826  : }

  00bb4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00bb7	5f		 pop	 edi
  00bb8	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?OneLineInfoStr@@3PADA, 0
  00bbf	33 cd		 xor	 ecx, ebp
  00bc1	8a 40 02	 mov	 al, BYTE PTR [eax+2]
  00bc4	5e		 pop	 esi
  00bc5	a2 44 00 00 00	 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, al
  00bca	5b		 pop	 ebx
  00bcb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bd0	8b e5		 mov	 esp, ebp
  00bd2	5d		 pop	 ebp
  00bd3	c3		 ret	 0
?HitMouseCursor@@YAXXZ ENDP				; HitMouseCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseProc@@YAXXZ
_TEXT	SEGMENT
?MouseProc@@YAXXZ PROC					; MouseProc, COMDAT

; 196  : 	static UINT leftPushTimeBak;
; 197  : 	static UINT rightPushTimeBak;
; 198  : 
; 199  : 	// î¿î????
; 200  : 	mouse.onceState = MOUSE_NO_CRICK;
; 201  : 	// ???????????????????
; 202  : 	if (mouse.beforeLeftPushTime > 0)

  00000	83 3d 34 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+52, 0
  00007	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 0
  00011	76 15		 jbe	 SHORT $LN20@MouseProc

; 203  : 	{
; 204  : 		mouse.leftPushTime = TimeGetTime() - mouse.beforeLeftPushTime;

  00013	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00018	8b d0		 mov	 edx, eax
  0001a	2b 15 34 00 00
	00		 sub	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+52
  00020	89 15 38 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, edx
  00026	eb 06		 jmp	 SHORT $LN2@MouseProc
$LN20@MouseProc:

; 196  : 	static UINT leftPushTimeBak;
; 197  : 	static UINT rightPushTimeBak;
; 198  : 
; 199  : 	// î¿î????
; 200  : 	mouse.onceState = MOUSE_NO_CRICK;
; 201  : 	// ???????????????????
; 202  : 	if (mouse.beforeLeftPushTime > 0)

  00028	8b 15 38 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+56
$LN2@MouseProc:

; 205  : 	}
; 206  : 	// ???????????????????
; 207  : 	if (mouse.beforeRightPushTime > 0)

  0002e	83 3d 3c 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+60, 0
  00035	56		 push	 esi
  00036	76 1b		 jbe	 SHORT $LN21@MouseProc

; 208  : 	{
; 209  : 		mouse.rightPushTime = TimeGetTime() - mouse.beforeRightPushTime;

  00038	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0003d	8b 15 38 00 00
	00		 mov	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+56
  00043	8b f0		 mov	 esi, eax
  00045	2b 35 3c 00 00
	00		 sub	 esi, DWORD PTR ?mouse@@3UMOUSE@@A+60
  0004b	89 35 40 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, esi
  00051	eb 06		 jmp	 SHORT $LN3@MouseProc
$LN21@MouseProc:

; 205  : 	}
; 206  : 	// ???????????????????
; 207  : 	if (mouse.beforeRightPushTime > 0)

  00053	8b 35 40 00 00
	00		 mov	 esi, DWORD PTR ?mouse@@3UMOUSE@@A+64
$LN3@MouseProc:

; 210  : 	}
; 211  : 	// ?????????
; 212  : 	// ????????????
; 213  : 	// ???î¾??????î¿
; 214  : 	if (mouse.leftPushTime > 500) {

  00059	81 fa f4 01 00
	00		 cmp	 edx, 500		; 000001f4H
  0005f	76 35		 jbe	 SHORT $LN4@MouseProc

; 215  : 		// ???????
; 216  : 		if (leftPushTimeBak == 0) {

  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA
  00067	85 c9		 test	 ecx, ecx
  00069	75 11		 jne	 SHORT $LN6@MouseProc

; 217  : 			mouse.autoState |= MOUSE_LEFT_CRICK; // ?????

  0006b	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+48
  00071	83 c9 01	 or	 ecx, 1

; 218  : 			leftPushTimeBak = mouse.leftPushTime;	// ?????

  00074	89 15 00 00 00
	00		 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, edx

; 219  : 		}

  0007a	eb 2d		 jmp	 SHORT $LN5@MouseProc
$LN6@MouseProc:

; 220  : 		else
; 221  : 			// ????????î?
; 222  : 			if (mouse.leftPushTime - leftPushTimeBak >= MOUSE_AUTO_REPEATE_TIME) {

  0007c	8b c2		 mov	 eax, edx
  0007e	2b c1		 sub	 eax, ecx
  00080	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+48
  00086	83 f8 64	 cmp	 eax, 100		; 00000064H
  00089	72 1b		 jb	 SHORT $LN8@MouseProc

; 223  : 				mouse.autoState |= MOUSE_LEFT_CRICK; // ?????

  0008b	83 c9 01	 or	 ecx, 1

; 224  : 				leftPushTimeBak = mouse.leftPushTime;	// ?????

  0008e	89 15 00 00 00
	00		 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, edx

; 225  : 			}

  00094	eb 13		 jmp	 SHORT $LN5@MouseProc
$LN4@MouseProc:

; 226  : 			else {	// ?????????
; 227  : 				mouse.autoState &= (~MOUSE_LEFT_CRICK);	// ??????
; 228  : 			}
; 229  : 	}
; 230  : 	else {
; 231  : 		mouse.autoState &= (~MOUSE_LEFT_CRICK);	// ??????

  00096	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+48

; 232  : 		leftPushTimeBak = 0;

  0009c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, 0
$LN8@MouseProc:

; 233  : 	}
; 234  : 
; 235  : 	// ????????????
; 236  : 	// ???î¾??????î¿
; 237  : 	if (mouse.rightPushTime > 500) {

  000a6	83 e1 fe	 and	 ecx, -2			; fffffffeH
$LN5@MouseProc:
  000a9	81 fe f4 01 00
	00		 cmp	 esi, 500		; 000001f4H
  000af	76 1e		 jbe	 SHORT $LN10@MouseProc

; 238  : 		// ???????
; 239  : 		if (rightPushTimeBak == 0) {

  000b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA
  000b7	85 d2		 test	 edx, edx
  000b9	74 09		 je	 SHORT $LN19@MouseProc

; 240  : 			mouse.autoState |= MOUSE_RIGHT_CRICK; // ?????
; 241  : 			rightPushTimeBak = mouse.rightPushTime;	// ?????
; 242  : 		}
; 243  : 		else
; 244  : 			// ????????î?
; 245  : 			if (mouse.rightPushTime - rightPushTimeBak >= MOUSE_AUTO_REPEATE_TIME) {

  000bb	8b c6		 mov	 eax, esi
  000bd	2b c2		 sub	 eax, edx
  000bf	83 f8 64	 cmp	 eax, 100		; 00000064H
  000c2	72 15		 jb	 SHORT $LN22@MouseProc
$LN19@MouseProc:

; 246  : 				mouse.autoState |= MOUSE_RIGHT_CRICK; // ?????

  000c4	83 c9 02	 or	 ecx, 2

; 247  : 				rightPushTimeBak = mouse.rightPushTime;	// ?????

  000c7	89 35 00 00 00
	00		 mov	 DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA, esi

; 248  : 			}

  000cd	eb 0d		 jmp	 SHORT $LN23@MouseProc
$LN10@MouseProc:

; 249  : 			else {	// ?????????
; 250  : 				mouse.autoState &= (~MOUSE_RIGHT_CRICK);	// ??????
; 251  : 			}
; 252  : 	}
; 253  : 	else {
; 254  : 		mouse.autoState &= (~MOUSE_RIGHT_CRICK);	// ??????
; 255  : 		rightPushTimeBak = 0;

  000cf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA, 0
$LN22@MouseProc:

; 256  : 	}
; 257  : 
; 258  : 
; 259  : 
; 260  : 	// ????????????
; 261  : 	//if( mouse.rightPushTime > 0 ){
; 262  : 	//}else mouse.state &= (~MOUSE_RIGHT_AUTO_CRICK);
; 263  : 	// ????????????
; 264  : 	//if( !WindowMode ){
; 265  : 	//if( 0 <= mouse.nowPoint.x && mouse.nowPoint.x < 640 &&
; 266  : 	//	0 <= mouse.nowPoint.y && mouse.nowPoint.y < 480 ){
; 267  : 
; 268  : 	// ?î­???????
; 269  : 	if (MouseCursorFlag == FALSE) {

  000d9	83 e1 fd	 and	 ecx, -3			; fffffffdH
$LN23@MouseProc:
  000dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?MouseCursorFlag@@3HA, 0 ; MouseCursorFlag
  000e3	89 0d 30 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, ecx
  000e9	5e		 pop	 esi
  000ea	75 2c		 jne	 SHORT $LN17@MouseProc

; 270  : 		if (mouse.flag == FALSE) {

  000ec	83 3d 4c 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+76, 0
  000f3	75 23		 jne	 SHORT $LN17@MouseProc

; 271  : 			StockDispBuffer(mouse.nowPoint.x + 16, mouse.nowPoint.y + 16, DISP_PRIO_MOUSE, CG_MOUSE_CURSOR, 0);

  000f5	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  000fa	6a 00		 push	 0
  000fc	68 a8 61 00 00	 push	 25000			; 000061a8H
  00101	83 c0 10	 add	 eax, 16			; 00000010H
  00104	6a 71		 push	 113			; 00000071H
  00106	50		 push	 eax
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A
  0010c	83 c0 10	 add	 eax, 16			; 00000010H
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00115	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@MouseProc:

; 272  : #ifdef _SHOW_MOUSE_POS
; 273  : 			char buf[20];
; 274  : 			wsprintf(buf, "%d,%d", mouse.nowPoint.x, mouse.nowPoint.y);
; 275  : 			StockFontBuffer(mouse.nowPoint.x, mouse.nowPoint.y - 15, FONT_PRIO_FRONT, 4, buf, 0);
; 276  : #endif // _SHOW_MOUSE_POS
; 277  : 
; 278  : 		}
; 279  : 	}
; 280  : 
; 281  : }

  00118	c3		 ret	 0
?MouseProc@@YAXXZ ENDP					; MouseProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseDblCrickRightUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseDblCrickRightUpPoint@@YAXHH@Z PROC		; MouseDblCrickRightUpPoint, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  : 	// î¿î????
; 181  : 	mouse.state |= MOUSE_RIGHT_CRICK;
; 182  : 	mouse.onceState |= MOUSE_RIGHT_DBL_CRICK;
; 183  : 	mouse.onceState |= MOUSE_RIGHT_CRICK;
; 184  : 	mouse.autoState |= MOUSE_RIGHT_CRICK;
; 185  : 	// ?î³????
; 186  : 	mouse.crickRightDownPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 0d 28 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 2
  0000d	83 0d 2c 00 00
	00 22		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 34 ; 00000022H
  00014	83 0d 30 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+48, 2
  0001b	a3 18 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+24, eax

; 187  : 	mouse.crickRightDownPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 1c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+28, eax

; 188  : 	// ????????????????îî??î·?î
; 189  : 	mouse.beforeRightPushTime = TimeGetTime();

  00028	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0002d	a3 3c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, eax

; 190  : 	mouse.rightPushTime = 0;

  00032	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 191  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseDblCrickRightUpPoint@@YAXHH@Z ENDP		; MouseDblCrickRightUpPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseDblCrickLeftUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseDblCrickLeftUpPoint@@YAXHH@Z PROC			; MouseDblCrickLeftUpPoint, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 	// î¿î????
; 134  : 	//mouse.onceState |= ( MOUSE_LEFT_DBL_CRICK | MOUSE_LEFT_CRICK );
; 135  : 	mouse.state |= MOUSE_LEFT_CRICK;
; 136  : 	mouse.onceState |= MOUSE_LEFT_DBL_CRICK;
; 137  : 	mouse.onceState |= MOUSE_LEFT_CRICK;
; 138  : 	mouse.autoState |= MOUSE_LEFT_CRICK;
; 139  : 	// ?î³????
; 140  : 	mouse.crickLeftDownPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 0d 28 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 1
  0000d	83 0d 2c 00 00
	00 11		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 17 ; 00000011H
  00014	83 0d 30 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+48, 1
  0001b	a3 08 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+8, eax

; 141  : 	mouse.crickLeftDownPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 0c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+12, eax

; 142  : 	// ????????????????îî??î·?î
; 143  : 	mouse.beforeLeftPushTime = TimeGetTime();

  00028	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0002d	a3 34 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, eax

; 144  : 	mouse.leftPushTime = 0;

  00032	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 145  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseDblCrickLeftUpPoint@@YAXHH@Z ENDP			; MouseDblCrickLeftUpPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseCrickRightUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickRightUpPoint@@YAXHH@Z PROC			; MouseCrickRightUpPoint, COMDAT

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 165  : 	// î¿î????
; 166  : 	mouse.state &= (~MOUSE_RIGHT_CRICK);
; 167  : 	mouse.onceState |= MOUSE_RIGHT_CRICK_UP;
; 168  : 	mouse.autoState &= (~MOUSE_RIGHT_CRICK);
; 169  : 	// ?î³????
; 170  : 	mouse.crickRightUpPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 25 28 00 00
	00 fd		 and	 DWORD PTR ?mouse@@3UMOUSE@@A+40, -3 ; fffffffdH
  0000d	83 0d 2c 00 00
	00 08		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 8
  00014	83 25 30 00 00
	00 fd		 and	 DWORD PTR ?mouse@@3UMOUSE@@A+48, -3 ; fffffffdH
  0001b	a3 20 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+32, eax

; 171  : 	mouse.crickRightUpPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 24 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+36, eax

; 172  : 	// ????????????????
; 173  : 	mouse.beforeRightPushTime = 0;

  00028	c7 05 3c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, 0

; 174  : 	mouse.rightPushTime = 0;

  00032	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 175  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseCrickRightUpPoint@@YAXHH@Z ENDP			; MouseCrickRightUpPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseCrickRightDownPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickRightDownPoint@@YAXHH@Z PROC			; MouseCrickRightDownPoint, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 	// î¿î????
; 151  : 	mouse.state |= MOUSE_RIGHT_CRICK;
; 152  : 	mouse.onceState |= MOUSE_RIGHT_CRICK;
; 153  : 	mouse.autoState |= MOUSE_RIGHT_CRICK;
; 154  : 	// ?î³????
; 155  : 	mouse.crickRightDownPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 0d 28 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 2
  0000d	83 0d 2c 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 2
  00014	83 0d 30 00 00
	00 02		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+48, 2
  0001b	a3 18 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+24, eax

; 156  : 	mouse.crickRightDownPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 1c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+28, eax

; 157  : 	// ????????????????îî??î·?î
; 158  : 	mouse.beforeRightPushTime = TimeGetTime();

  00028	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0002d	a3 3c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, eax

; 159  : 	mouse.rightPushTime = 0;

  00032	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 160  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseCrickRightDownPoint@@YAXHH@Z ENDP			; MouseCrickRightDownPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseCrickLeftUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickLeftUpPoint@@YAXHH@Z PROC			; MouseCrickLeftUpPoint, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 118  : 	// î¿î????
; 119  : 	mouse.state &= (~MOUSE_LEFT_CRICK);
; 120  : 	mouse.onceState |= MOUSE_LEFT_CRICK_UP;
; 121  : 	mouse.autoState &= (~MOUSE_LEFT_CRICK);
; 122  : 	// ?î³????
; 123  : 	mouse.crickLeftUpPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 25 28 00 00
	00 fe		 and	 DWORD PTR ?mouse@@3UMOUSE@@A+40, -2 ; fffffffeH
  0000d	83 0d 2c 00 00
	00 04		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 4
  00014	83 25 30 00 00
	00 fe		 and	 DWORD PTR ?mouse@@3UMOUSE@@A+48, -2 ; fffffffeH
  0001b	a3 10 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+16, eax

; 124  : 	mouse.crickLeftUpPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 14 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+20, eax

; 125  : 	// ????????????????
; 126  : 	mouse.beforeLeftPushTime = 0;

  00028	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, 0

; 127  : 	mouse.leftPushTime = 0;

  00032	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 128  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseCrickLeftUpPoint@@YAXHH@Z ENDP			; MouseCrickLeftUpPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseCrickLeftDownPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickLeftDownPoint@@YAXHH@Z PROC			; MouseCrickLeftDownPoint, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : #ifdef _SASHIELD
; 87   : 	VMProtectBeginVirtualization("SAS_MCLK_D");
; 88   : 	mouse.state |= MOUSE_LEFT_CRICK;
; 89   : 	mouse.onceState |= MOUSE_LEFT_CRICK;
; 90   : 	mouse.autoState |= MOUSE_LEFT_CRICK;
; 91   : 	// ?î³????
; 92   : 	mouse.crickLeftDownPoint.x = x;
; 93   : 	mouse.crickLeftDownPoint.y = y;
; 94   : 	// ????????????????îî??î·?î
; 95   : 	mouse.beforeLeftPushTime = TimeGetTime();
; 96   : 	mouse.leftPushTime = 0;
; 97   : 
; 98   : 	extern void SAS_CheckMouseClick(int x, int y);
; 99   : 	SAS_CheckMouseClick(x, y);
; 100  : 	VMProtectEnd();
; 101  : #else
; 102  : 	// î¿î????
; 103  : 	mouse.state |= MOUSE_LEFT_CRICK;
; 104  : 	mouse.onceState |= MOUSE_LEFT_CRICK;
; 105  : 	mouse.autoState |= MOUSE_LEFT_CRICK;
; 106  : 	// ?î³????
; 107  : 	mouse.crickLeftDownPoint.x = x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	83 0d 28 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+40, 1
  0000d	83 0d 2c 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 1
  00014	83 0d 30 00 00
	00 01		 or	 DWORD PTR ?mouse@@3UMOUSE@@A+48, 1
  0001b	a3 08 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+8, eax

; 108  : 	mouse.crickLeftDownPoint.y = y;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00023	a3 0c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+12, eax

; 109  : 	// ????????????????îî??î·?î
; 110  : 	mouse.beforeLeftPushTime = TimeGetTime();

  00028	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0002d	a3 34 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, eax

; 111  : 	mouse.leftPushTime = 0;

  00032	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 112  : #endif
; 113  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?MouseCrickLeftDownPoint@@YAXHH@Z ENDP			; MouseCrickLeftDownPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseNowPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseNowPoint@@YAXHH@Z PROC				; MouseNowPoint, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : #ifdef _SASHIELD
; 49   : 	VMProtectBeginVirtualization("SAS_MMOVE");
; 50   : 	if (ResoMode == 1) {
; 51   : 		mouse.nowPoint.x = x * 2;
; 52   : 		mouse.nowPoint.y = y * 2;
; 53   : 	}
; 54   : 	else {
; 55   : 		mouse.nowPoint.x = x;
; 56   : 		mouse.nowPoint.y = y;
; 57   : 	}
; 58   : 	extern void RecordMouseMoveline(int x, int y);
; 59   : 	RecordMouseMoveline(x, y);
; 60   : 	VMProtectEnd();
; 61   : #else
; 62   : 	if (ResoMode == 1) {

  00003	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  0000a	75 2a		 jne	 SHORT $LN2@MouseNowPo

; 63   : 		if (x > 640)x = 640;
; 64   : 		if (y > 480)y = 480;

  0000c	ba 80 02 00 00	 mov	 edx, 640		; 00000280H

; 65   : 	}

  00011	b9 e0 01 00 00	 mov	 ecx, 480		; 000001e0H
  00016	39 55 08	 cmp	 DWORD PTR _x$[ebp], edx
  00019	0f 4e 55 08	 cmovle	 edx, DWORD PTR _x$[ebp]
  0001d	39 4d 0c	 cmp	 DWORD PTR _y$[ebp], ecx
  00020	0f 4e 4d 0c	 cmovle	 ecx, DWORD PTR _y$[ebp]

; 69   : 	}
; 70   : 	// ?î³????
; 71   : 	//???????????????
; 72   : 	if (ResoMode == 1) {
; 73   : 		mouse.nowPoint.x = x * 2;

  00024	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00027	a3 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A, eax

; 74   : 		mouse.nowPoint.y = y * 2;

  0002c	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]

; 78   : 		mouse.nowPoint.y = y;
; 79   : 	}
; 80   : #endif
; 81   : }

  0002f	a3 04 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+4, eax
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN2@MouseNowPo:

; 66   : 	else {
; 67   : 		if (x > lpDraw->xSize)x = lpDraw->xSize;

  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0003c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0003f	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00045	3b d0		 cmp	 edx, eax

; 68   : 		if (y > lpDraw->ySize)y = lpDraw->ySize;

  00047	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [ecx+136]
  0004d	0f 4f d0	 cmovg	 edx, eax
  00050	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00053	3b c1		 cmp	 eax, ecx

; 75   : 	}
; 76   : 	else {
; 77   : 		mouse.nowPoint.x = x;

  00055	89 15 00 00 00
	00		 mov	 DWORD PTR ?mouse@@3UMOUSE@@A, edx
  0005b	0f 4f c1	 cmovg	 eax, ecx

; 78   : 		mouse.nowPoint.y = y;
; 79   : 	}
; 80   : #endif
; 81   : }

  0005e	a3 04 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+4, eax
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?MouseNowPoint@@YAXHH@Z ENDP				; MouseNowPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\gg862\OneDrive\¹ÙÅÁ È­¸é\¸¾Äí¿Ï·á\Client Source Code1.31ÀÏº»\system\mouse.cpp
;	COMDAT ?MouseInit@@YAXXZ
_TEXT	SEGMENT
?MouseInit@@YAXXZ PROC					; MouseInit, COMDAT

; 40   : 	memset(&mouse, 0, sizeof(MOUSE));

  00000	6a 50		 push	 80			; 00000050H
  00002	6a 00		 push	 0
  00004	68 00 00 00 00	 push	 OFFSET ?mouse@@3UMOUSE@@A ; mouse
  00009	e8 00 00 00 00	 call	 _memset
  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 	mouse.itemNo = -1;

  00011	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1

; 42   : 
; 43   : 
; 44   : }

  0001b	c3		 ret	 0
?MouseInit@@YAXXZ ENDP					; MouseInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);
; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
