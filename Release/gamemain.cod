; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	\\VBOXSVR\_stoneage\repos\ssm-sacli\Release\gamemain.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GameSpeedFlag@@3HA				; GameSpeedFlag
PUBLIC	?BackBufferDrawType@@3HA			; BackBufferDrawType
PUBLIC	?GameState@@3HA					; GameState
PUBLIC	?NowTime@@3KA					; NowTime
PUBLIC	?„¿‹˙ÒÏ?‘Ù??_1@@3HA				; „¿‹˙ÒÏ?‘Ù??_1
PUBLIC	?NO_DRAW_MAX_CNT@@3HA				; NO_DRAW_MAX_CNT
PUBLIC	?testCnt@@3HA					; testCnt
PUBLIC	?no_wait_cnt@@3DA				; no_wait_cnt
PUBLIC	?debug_info_flag@@3HA				; debug_info_flag
PUBLIC	?FrameRate@@3HA					; FrameRate
PUBLIC	?DrawFrameCnt@@3HA				; DrawFrameCnt
PUBLIC	?DrawFrameTime@@3KA				; DrawFrameTime
PUBLIC	?ProcTime@@3KA					; ProcTime
PUBLIC	?SystemTime@@3KA				; SystemTime
PUBLIC	?NoDrawCnt@@3HA					; NoDrawCnt
PUBLIC	?ÕÎÕ±?’·@@3HA					; ÕÎÕ±?’·
PUBLIC	?ÕÎÕ±?Èª@@3PADA					; ÕÎÕ±?Èª
PUBLIC	?ÕÎÕ±?ﬂ‰@@3HA					; ÕÎÕ±?ﬂ‰
PUBLIC	?ÕÎÕ±??@@3HA					; ÕÎÕ±??
PUBLIC	?dis@@3HA					; dis
PUBLIC	?HideSa@@3HA					; HideSa
PUBLIC	?sz@@3PADA					; sz
PUBLIC	???@@3HA					; ??
_BSS	SEGMENT
?GameSpeedFlag@@3HA DD 01H DUP (?)			; GameSpeedFlag
?BackBufferDrawType@@3HA DD 01H DUP (?)			; BackBufferDrawType
?GameState@@3HA DD 01H DUP (?)				; GameState
?NowTime@@3KA DD 01H DUP (?)				; NowTime
?„¿‹˙ÒÏ?‘Ù??_1@@3HA DD 01H DUP (?)			; „¿‹˙ÒÏ?‘Ù??_1
?testCnt@@3HA DD 01H DUP (?)				; testCnt
?no_wait_cnt@@3DA DB 01H DUP (?)			; no_wait_cnt
	ALIGN	4

?debug_info_flag@@3HA DD 01H DUP (?)			; debug_info_flag
?FrameRate@@3HA DD 01H DUP (?)				; FrameRate
?DrawFrameCnt@@3HA DD 01H DUP (?)			; DrawFrameCnt
?DrawFrameTime@@3KA DD 01H DUP (?)			; DrawFrameTime
?ÕÎÕ±?’·@@3HA DD 01H DUP (?)				; ÕÎÕ±?’·
?ÕÎÕ±?Èª@@3PADA DB 0200H DUP (?)			; ÕÎÕ±?Èª
?ÕÎÕ±??@@3HA DD	01H DUP (?)				; ÕÎÕ±??
?dis@@3HA DD	01H DUP (?)				; dis
?HideSa@@3HA DD	01H DUP (?)				; HideSa
?sz@@3PADA DB	020H DUP (?)				; sz
???@@3HA DD	01H DUP (?)				; ??
_BSS	ENDS
_DATA	SEGMENT
?NO_DRAW_MAX_CNT@@3HA DD 02H				; NO_DRAW_MAX_CNT
?ProcTime@@3KA DD 05H					; ProcTime
?SystemTime@@3KA DD 0eH					; SystemTime
?NoDrawCnt@@3HA DD 01H					; NoDrawCnt
?ÕÎÕ±?ﬂ‰@@3HA DD 0ffffffffH				; ÕÎÕ±?ﬂ‰
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	?GameMain@@YAHXZ				; GameMain
PUBLIC	?InitGame@@YAHXZ				; InitGame
PUBLIC	?EndGame@@YAXXZ					; EndGame
PUBLIC	?getMAC@@YAHPAD@Z				; getMAC
PUBLIC	?getCpuId@@YAHPAD@Z				; getCpuId
PUBLIC	?GetSysInfo@@YA_NPAD@Z				; GetSysInfo
PUBLIC	?DisplayFrameRate@@YAXXZ			; DisplayFrameRate
PUBLIC	?announce@@YAXXZ				; announce
PUBLIC	??$sprintf_s@$0EAA@@@YAHAAY0EAA@DPBDZZ		; sprintf_s<1024>
PUBLIC	?PutLogo@@YAXXZ					; PutLogo
PUBLIC	?GameErrorMessage@@YAXPAD@Z			; GameErrorMessage
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02HHFHKOHM@?$DP?$DP@			; `string'
PUBLIC	??_C@_0BC@BAOBCJF@?j?$PN?$DP?$DP?o?R?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@ ; `string'
PUBLIC	??_C@_0N@CNEFEEOF@?$DP?$DP?$KD?A?$KD?I?Y?$LM?c?R?$KD?$KB@ ; `string'
PUBLIC	??_C@_0EF@OJCAAKED@P?$HM?$DP?j?H?$PL?$LP?c?$PN?l?Q?R?v?$DP?d?$LC?$DP?$DP?$DP?$KB?$KD?$DP?S?$PM?$DP?q?l?c?f?T?t@ ; `string'
PUBLIC	??_C@_0CA@CMHGGOJD@?o?a?n?$KE?m?$LL?$DP?T?t?$DP?q?i?0?d?NF9?J?$KG?o?N?r?$KN?m?$LL?$DP?T?t?$DP?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BC@IEKMBCNM@?d?NF9?J?$KG?m?$LL?$DP?T?t?$DP?j?$PN?$DP?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BO@GHBLPFMO@?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X@ ; `string'
PUBLIC	??_C@_0BB@BPIBEBLC@?$CF08X?$CF08X?$CF08X?$CF08X@ ; `string'
PUBLIC	??_C@_0CA@OPFINFCP@initialization?5DirectDraw?5fail?$CB@ ; `string'
PUBLIC	??_C@_0CI@PBAELGDP@initialization?5Off?5Screan?5Surfa@ ; `string'
PUBLIC	??_C@_0BE@DNHHBPHG@Open?5Real?4bin?5fail?$CB@	; `string'
PUBLIC	??_C@_0P@OCIHCKAB@?$DP?$DPSpr?4bin?c?w?$DP?$KD?$KB@ ; `string'
PUBLIC	??_C@_09KKEDNOKB@?4?1?1sapath@			; `string'
PUBLIC	??_C@_06BHFGNFJA@?4?1?1lua@			; `string'
PUBLIC	??_C@_0BB@BMPFHBPA@?t?x?c?$LH?$PL?y?$DP?l?$PN?$NL?v?c?w?$DP?$KD?$KB@ ; `string'
PUBLIC	??_C@_0CO@HNPNNIBJ@?$DP?v?$KC?$DP?p?m?$DP?d?P?c?w?$DP?$KB?$KD?$CIcode?5?$DN?5?$CFd?$CJ?5?$DP?$DP?p?$LGs@ ; `string'
PUBLIC	??_C@_0BG@MCAODPHE@net_readbuf?5Init?5?c?w?$DP?$CB@ ; `string'
PUBLIC	??_C@_0BH@BBOIGEMF@net_writebuf?5Init?5?c?w?$DP?$CB@ ; `string'
PUBLIC	??_C@_05KPHDFNJG@chat?2@			; `string'
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ReleaseMutex@4:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__TerminateThread@8:PROC
EXTRN	__imp__VirtualAlloc@16:PROC
EXTRN	__imp__VirtualProtect@16:PROC
EXTRN	__imp__VirtualFree@12:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	_Netbios@4:PROC
EXTRN	_closesocket@4:PROC
EXTRN	_srand:PROC
EXTRN	_rand:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	?InitOffScreenSurface@@YAHXZ:PROC		; InitOffScreenSurface
EXTRN	?InitSurfaceInfo@@YAXXZ:PROC			; InitSurfaceInfo
EXTRN	?InitSpriteInfo@@YAXXZ:PROC			; InitSpriteInfo
EXTRN	?InitDirectDraw@@YAHXZ:PROC			; InitDirectDraw
EXTRN	?InitPalette@@YAHXZ:PROC			; InitPalette
EXTRN	?ClearBackSurface@@YAXXZ:PROC			; ClearBackSurface
EXTRN	?Flip@@YAXXZ:PROC				; Flip
EXTRN	?ReleaseDirectDraw@@YAXXZ:PROC			; ReleaseDirectDraw
EXTRN	?InitFont@@YAXH@Z:PROC				; InitFont
EXTRN	?PaletteProc@@YAXXZ:PROC			; PaletteProc
EXTRN	?snapShot@@YAXXZ:PROC				; snapShot
EXTRN	?SystemTask@@YAHXZ:PROC				; SystemTask
EXTRN	?Process@@YAXXZ:PROC				; Process
EXTRN	?repairMap@@YAXXZ:PROC				; repairMap
EXTRN	?AniProc@@YAXXZ:PROC				; AniProc
EXTRN	?util_Init@@YAXXZ:PROC				; util_Init
EXTRN	?util_Release@@YAXXZ:PROC			; util_Release
EXTRN	?InitAction@@YAXXZ:PROC				; InitAction
EXTRN	?EndAction@@YAXXZ:PROC				; EndAction
EXTRN	?SortDispBuffer@@YAXXZ:PROC			; SortDispBuffer
EXTRN	?PutBmp@@YAXXZ:PROC				; PutBmp
EXTRN	?StockDispBuffer@@YAHHHEHH@Z:PROC		; StockDispBuffer
EXTRN	?initRand2@@YAXXZ:PROC				; initRand2
EXTRN	?StockChatBufferLine@@YAXPADEH@Z:PROC		; StockChatBufferLine
EXTRN	?StrToNowStrBuffer@@YAXPAD@Z:PROC		; StrToNowStrBuffer
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?MouseInit@@YAXXZ:PROC				; MouseInit
EXTRN	?MouseProc@@YAXXZ:PROC				; MouseProc
EXTRN	?HitMouseCursor@@YAXXZ:PROC			; HitMouseCursor
EXTRN	?initAutoMapColor@@YAXPAD@Z:PROC		; initAutoMapColor
EXTRN	?cleanupRealbin@@YAXXZ:PROC			; cleanupRealbin
EXTRN	?InitSprBinFileOpen@@YAHPAD0@Z:PROC		; InitSprBinFileOpen
EXTRN	?joy_read@@YAXXZ:PROC				; joy_read
EXTRN	?InitDInput@@YAHXZ:PROC				; InitDInput
EXTRN	?EndDInput@@YAHXZ:PROC				; EndDInput
EXTRN	?InitIme@@YAHPAUHWND__@@P6AXPAD@Z@Z:PROC	; InitIme
EXTRN	?EndIme@@YAXXZ:PROC				; EndIme
EXTRN	?ReadBattleMap@@YAHH@Z:PROC			; ReadBattleMap
EXTRN	?networkLoop@@YAXXZ:PROC			; networkLoop
EXTRN	?cleanupNetwork@@YAXXZ:PROC			; cleanupNetwork
EXTRN	?saveUserSetting@@YAHXZ:PROC			; saveUserSetting
EXTRN	?loadUserSetting@@YAHXZ:PROC			; loadUserSetting
EXTRN	?t_music_init@@YAHXZ:PROC			; t_music_init
EXTRN	?t_music_end@@YAXXZ:PROC			; t_music_end
EXTRN	?cdda_play@@YA_NH@Z:PROC			; cdda_play
EXTRN	?cdda_stop@@YA_NXZ:PROC				; cdda_stop
EXTRN	?setPcDir@@YAXH@Z:PROC				; setPcDir
EXTRN	?walkSendForServer@@YAXHHPAD@Z:PROC		; walkSendForServer
EXTRN	?SaveChatRegistyStr@@YAHXZ:PROC			; SaveChatRegistyStr
EXTRN	?LoadChatRegistyStr@@YAHXZ:PROC			; LoadChatRegistyStr
EXTRN	?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z:PROC	; RealTimeToSATime
EXTRN	?InitPteernSeparationBin@@YAXPBD@Z:PROC		; InitPteernSeparationBin
EXTRN	?cnvServDir@@YADHH@Z:PROC			; cnvServDir
EXTRN	?lssproto_SaMenu_send@@YAXHHHH@Z:PROC		; lssproto_SaMenu_send
EXTRN	?lssproto_TK_send@@YAXHHHPADHH@Z:PROC		; lssproto_TK_send
EXTRN	?lssproto_FS_send@@YAXHH@Z:PROC			; lssproto_FS_send
EXTRN	?lssproto_PR_send@@YAXHHHH@Z:PROC		; lssproto_PR_send
EXTRN	?LoadStoneAgeLUA@@YAXPAD@Z:PROC			; LoadStoneAgeLUA
EXTRN	?ChangeWindowMode@@YAXXZ:PROC			; ChangeWindowMode
EXTRN	?SetResoMode@@YAXH@Z:PROC			; SetResoMode
EXTRN	?CreatFontHdc@@YAXXZ:PROC			; CreatFontHdc
EXTRN	?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z:PROC	; LSTimeToRealTime
EXTRN	??ÿ≠Ÿ˛ÌÆÔ√?@@YAXXZ:PROC				; ?ÿ≠Ÿ˛ÌÆÔ√?
EXTRN	?AI_Save@@YAHXZ:PROC				; AI_Save
EXTRN	?AI_Save@@YAHXZ:PROC				; AI_Save
EXTRN	?initRealbinFileOpen@@YAHPAD0@Z:PROC		; initRealbinFileOpen
EXTRN	?SaveChatData@@YAXPADD_N@Z:PROC			; SaveChatData
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?SurfaceDate@@3IA:DWORD				; SurfaceDate
EXTRN	?Palette@@3PAUtagPALETTEENTRY@@A:BYTE		; Palette
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?hFont@@3PAUHFONT__@@A:DWORD			; hFont
EXTRN	?PalChangeFlag@@3HA:DWORD			; PalChangeFlag
EXTRN	?hWnd@@3PAUHWND__@@A:DWORD			; hWnd
EXTRN	?WindowMode@@3HA:DWORD				; WindowMode
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?LowResoCmdFlag@@3HA:DWORD			; LowResoCmdFlag
EXTRN	?hMutex@@3PAXA:DWORD				; hMutex
EXTRN	?realBinName@@3PADA:BYTE			; realBinName
EXTRN	?adrnBinName@@3PADA:BYTE			; adrnBinName
EXTRN	?sprBinName@@3PADA:BYTE				; sprBinName
EXTRN	?sprAdrnBinName@@3PADA:BYTE			; sprAdrnBinName
EXTRN	?offlineFlag@@3HA:DWORD				; offlineFlag
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?ProcNo2@@3HA:DWORD				; ProcNo2
EXTRN	?DispBuffer@@3UDISP_BUFFER@@A:BYTE		; DispBuffer
EXTRN	?joy_trg@@3PAKA:QWORD				; joy_trg
EXTRN	?di_key@@3PAEA:BYTE				; di_key
EXTRN	?NowMaxVoice@@3HA:DWORD				; NowMaxVoice
EXTRN	?FontCnt@@3HA:DWORD				; FontCnt
EXTRN	?BattleMapNo@@3HA:DWORD				; BattleMapNo
EXTRN	?net_writebuf@@3PADA:DWORD			; net_writebuf
EXTRN	?net_readbuf@@3PADA:DWORD			; net_readbuf
EXTRN	?net_readbuflen@@3HA:DWORD			; net_readbuflen
EXTRN	?net_writebuflen@@3HA:DWORD			; net_writebuflen
EXTRN	?sockfd@@3IA:DWORD				; sockfd
EXTRN	?savedataErrorCode@@3EA:BYTE			; savedataErrorCode
EXTRN	?cdda_no@@3HA:DWORD				; cdda_no
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?partyModeFlag@@3FA:WORD			; partyModeFlag
EXTRN	?MouseCursorFlag@@3HA:DWORD			; MouseCursorFlag
EXTRN	?SaTime@@3UtagLSTIME@@A:BYTE			; SaTime
EXTRN	?AI@@3HA:DWORD					; AI
EXTRN	?nameOverTheHeadFlag@@3FA:WORD			; nameOverTheHeadFlag
EXTRN	?nowGx@@3HA:DWORD				; nowGx
EXTRN	?nowGy@@3HA:DWORD				; nowGy
EXTRN	?fastDrawTile@@3FB:WORD				; fastDrawTile
EXTRN	?fastDrawTileFlag@@3FA:WORD			; fastDrawTileFlag
EXTRN	?nowXFastDraw@@3HA:DWORD			; nowXFastDraw
EXTRN	?nowYFastDraw@@3HA:DWORD			; nowYFastDraw
EXTRN	?baseXFastDraw@@3HA:DWORD			; baseXFastDraw
EXTRN	?baseYFastDraw@@3HA:DWORD			; baseYFastDraw
EXTRN	?nowXFastDraw2@@3HA:DWORD			; nowXFastDraw2
EXTRN	?nowYFastDraw2@@3HA:DWORD			; nowYFastDraw2
EXTRN	?baseXFastDraw2@@3HA:DWORD			; baseXFastDraw2
EXTRN	?baseYFastDraw2@@3HA:DWORD			; baseYFastDraw2
EXTRN	?actBtn@@3FA:WORD				; actBtn
EXTRN	?PcLanded@@3ULanded@@A:BYTE			; PcLanded
EXTRN	?g_hideSA@@3HA:DWORD				; g_hideSA
EXTRN	?„¿‹˙ÒÏ‘Ù?‘‡÷ı@@3HA:DWORD			; „¿‹˙ÒÏ‘Ù?‘‡÷ı
EXTRN	?„¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ@@3HA:DWORD			; „¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ
EXTRN	?„¿‹˙ÒÏ‘ÙAIŸº„“@@3HA:DWORD			; „¿‹˙ÒÏ‘ÙAIŸº„“
EXTRN	?„¿‹˙ÒÏ‘Ù??@@3HA:DWORD				; „¿‹˙ÒÏ‘Ù??
EXTRN	?„¿‹˙ÒÏ‘Ù˘‚?@@3HA:DWORD				; „¿‹˙ÒÏ‘Ù˘‚?
EXTRN	?Ìª?‘Ù?„¿‹˙??@@3HA:DWORD			; Ìª?‘Ù?„¿‹˙??
EXTRN	?displayBpp@@3HA:DWORD				; displayBpp
EXTRN	?rBitLShift@@3HA:DWORD				; rBitLShift
EXTRN	?gBitLShift@@3HA:DWORD				; gBitLShift
EXTRN	?bBitLShift@@3HA:DWORD				; bBitLShift
EXTRN	?rBitRShift@@3HA:DWORD				; rBitRShift
EXTRN	?gBitRShift@@3HA:DWORD				; gBitRShift
EXTRN	?bBitRShift@@3HA:DWORD				; bBitRShift
EXTRN	?highColorPalette@@3PAGA:BYTE			; highColorPalette
EXTRN	?hPing@@3PAXA:DWORD				; hPing
EXTRN	?sockRaw@@3IA:DWORD				; sockRaw
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?prePushTime@?P@??GameMain@@YAHXZ@4IA
_BSS	SEGMENT
?prePushTime@?P@??GameMain@@YAHXZ@4IA DD 01H DUP (?)	; `GameMain'::`15'::prePushTime
_BSS	ENDS
;	COMDAT ?ÒÏ„Ê‘Ù?Í´Ú¢?„∑??@?6??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?ÒÏ„Ê‘Ù?Í´Ú¢?„∑??@?6??GameMain@@YAHXZ@4HA DD 01H DUP (?) ; `GameMain'::`7'::ÒÏ„Ê‘Ù?Í´Ú¢?„∑??
_BSS	ENDS
;	COMDAT ?ÒÏ„Ê‘Ù?AI?„∑??@?6??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?ÒÏ„Ê‘Ù?AI?„∑??@?6??GameMain@@YAHXZ@4HA DD 01H DUP (?)	; `GameMain'::`7'::ÒÏ„Ê‘Ù?AI?„∑??
_BSS	ENDS
;	COMDAT ?ÒÏ„Ê‘Ù?€∞˙æ?„∑??@?6??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?ÒÏ„Ê‘Ù?€∞˙æ?„∑??@?6??GameMain@@YAHXZ@4HA DD 01H DUP (?) ; `GameMain'::`7'::ÒÏ„Ê‘Ù?€∞˙æ?„∑??
_BSS	ENDS
;	COMDAT ?ÒÏ„Ê‘Ù????„∑??@?6??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?ÒÏ„Ê‘Ù????„∑??@?6??GameMain@@YAHXZ@4HA DD 01H DUP (?)	; `GameMain'::`7'::ÒÏ„Ê‘Ù????„∑??
_BSS	ENDS
;	COMDAT ?ÒÏ„Ê‘Ù?˘‚??„∑??@?6??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?ÒÏ„Ê‘Ù?˘‚??„∑??@?6??GameMain@@YAHXZ@4HA DD 01H DUP (?)	; `GameMain'::`7'::ÒÏ„Ê‘Ù?˘‚??„∑??
_BSS	ENDS
;	COMDAT ?????„∑??@?6??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?????„∑??@?6??GameMain@@YAHXZ@4HA DD 01H DUP (?)	; `GameMain'::`7'::????„∑??
_BSS	ENDS
;	COMDAT ?reset@?6??GameMain@@YAHXZ@4KA
_BSS	SEGMENT
?reset@?6??GameMain@@YAHXZ@4KA DD 01H DUP (?)		; `GameMain'::`7'::reset
_BSS	ENDS
;	COMDAT ?$TSS0@?6??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?$TSS0@?6??GameMain@@YAHXZ@4HA DD 01H DUP (?)		; `GameMain'::`7'::$TSS0
_BSS	ENDS
;	COMDAT ?OldTime@?6??GameMain@@YAHXZ@4KA
_BSS	SEGMENT
?OldTime@?6??GameMain@@YAHXZ@4KA DD 01H DUP (?)		; `GameMain'::`7'::OldTime
_BSS	ENDS
;	COMDAT ?$TSS1@?6??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?$TSS1@?6??GameMain@@YAHXZ@4HA DD 01H DUP (?)		; `GameMain'::`7'::$TSS1
_BSS	ENDS
;	COMDAT ?switchmodetime@?LD@??GameMain@@YAHXZ@4KA
_BSS	SEGMENT
?switchmodetime@?LD@??GameMain@@YAHXZ@4KA DD 01H DUP (?) ; `GameMain'::`179'::switchmodetime
_BSS	ENDS
;	COMDAT ?$TSS2@?LD@??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?$TSS2@?LD@??GameMain@@YAHXZ@4HA DD 01H DUP (?)		; `GameMain'::`179'::$TSS2
_BSS	ENDS
;	COMDAT ?switchmodetime@?LP@??GameMain@@YAHXZ@4KA
_BSS	SEGMENT
?switchmodetime@?LP@??GameMain@@YAHXZ@4KA DD 01H DUP (?) ; `GameMain'::`191'::switchmodetime
_BSS	ENDS
;	COMDAT ?$TSS3@?LP@??GameMain@@YAHXZ@4HA
_BSS	SEGMENT
?$TSS3@?LP@??GameMain@@YAHXZ@4HA DD 01H DUP (?)		; `GameMain'::`191'::$TSS3
_BSS	ENDS
;	COMDAT ??_C@_05KPHDFNJG@chat?2@
CONST	SEGMENT
??_C@_05KPHDFNJG@chat?2@ DB 'chat\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BBOIGEMF@net_writebuf?5Init?5?c?w?$DP?$CB@
CONST	SEGMENT
??_C@_0BH@BBOIGEMF@net_writebuf?5Init?5?c?w?$DP?$CB@ DB 'net_writebuf Ini'
	DB	't ', 0e3H, 0f7H, '?!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCAODPHE@net_readbuf?5Init?5?c?w?$DP?$CB@
CONST	SEGMENT
??_C@_0BG@MCAODPHE@net_readbuf?5Init?5?c?w?$DP?$CB@ DB 'net_readbuf Init '
	DB	0e3H, 0f7H, '?!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HNPNNIBJ@?$DP?v?$KC?$DP?p?m?$DP?d?P?c?w?$DP?$KB?$KD?$CIcode?5?$DN?5?$CFd?$CJ?5?$DP?$DP?p?$LGs@
CONST	SEGMENT
??_C@_0CO@HNPNNIBJ@?$DP?v?$KC?$DP?p?m?$DP?d?P?c?w?$DP?$KB?$KD?$CIcode?5?$DN?5?$CFd?$CJ?5?$DP?$DP?p?$LGs@ DB '?'
	DB	0f6H, 0a2H, '?', 0f0H, 0edH, '?', 0e4H, 0d0H, 0e3H, 0f7H, '?', 0a1H
	DB	0a3H, '(code = %d) ??', 0f0H, 0b6H, 'savedata.dat', 0eeH, 0a2H
	DB	'?', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BMPFHBPA@?t?x?c?$LH?$PL?y?$DP?l?$PN?$NL?v?c?w?$DP?$KD?$KB@
CONST	SEGMENT
??_C@_0BB@BMPFHBPA@?t?x?c?$LH?$PL?y?$DP?l?$PN?$NL?v?c?w?$DP?$KD?$KB@ DB 0f4H
	DB	0f8H, 0e3H, 0b7H, 0fbH, 0f9H, '?', 0ecH, 0fdH, 0dbH, 0f6H, 0e3H
	DB	0f7H, '?', 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHFGNFJA@?4?1?1lua@
CONST	SEGMENT
??_C@_06BHFGNFJA@?4?1?1lua@ DB './/lua', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KKEDNOKB@?4?1?1sapath@
CONST	SEGMENT
??_C@_09KKEDNOKB@?4?1?1sapath@ DB './/sapath', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OCIHCKAB@?$DP?$DPSpr?4bin?c?w?$DP?$KD?$KB@
CONST	SEGMENT
??_C@_0P@OCIHCKAB@?$DP?$DPSpr?4bin?c?w?$DP?$KD?$KB@ DB '??Spr.bin', 0e3H, 0f7H
	DB	'?', 0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DNHHBPHG@Open?5Real?4bin?5fail?$CB@
CONST	SEGMENT
??_C@_0BE@DNHHBPHG@Open?5Real?4bin?5fail?$CB@ DB 'Open Real.bin fail!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PBAELGDP@initialization?5Off?5Screan?5Surfa@
CONST	SEGMENT
??_C@_0CI@PBAELGDP@initialization?5Off?5Screan?5Surfa@ DB 'initialization'
	DB	' Off Screan Surface fail!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OPFINFCP@initialization?5DirectDraw?5fail?$CB@
CONST	SEGMENT
??_C@_0CA@OPFINFCP@initialization?5DirectDraw?5fail?$CB@ DB 'initializati'
	DB	'on DirectDraw fail!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPIBEBLC@?$CF08X?$CF08X?$CF08X?$CF08X@
CONST	SEGMENT
??_C@_0BB@BPIBEBLC@?$CF08X?$CF08X?$CF08X?$CF08X@ DB '%08X%08X%08X%08X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GHBLPFMO@?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X@
CONST	SEGMENT
??_C@_0BO@GHBLPFMO@?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X@ DB '%'
	DB	'02X-%02X-%02X-%02X-%02X-%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IEKMBCNM@?d?NF9?J?$KG?m?$LL?$DP?T?t?$DP?j?$PN?$DP?$KD?$KB@
CONST	SEGMENT
??_C@_0BC@IEKMBCNM@?d?NF9?J?$KG?m?$LL?$DP?T?t?$DP?j?$PN?$DP?$KD?$KB@ DB 0e4H
	DB	0ceH, 'F9', 0caH, 0a6H, 0edH, 0bbH, '?', 0d4H, 0f4H, '?', 0eaH
	DB	0fdH, '?', 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CMHGGOJD@?o?a?n?$KE?m?$LL?$DP?T?t?$DP?q?i?0?d?NF9?J?$KG?o?N?r?$KN?m?$LL?$DP?T?t?$DP?$KD?$KB@
CONST	SEGMENT
??_C@_0CA@CMHGGOJD@?o?a?n?$KE?m?$LL?$DP?T?t?$DP?q?i?0?d?NF9?J?$KG?o?N?r?$KN?m?$LL?$DP?T?t?$DP?$KD?$KB@ DB 0efH
	DB	0e1H, 0eeH, 0a4H, 0edH, 0bbH, '?', 0d4H, 0f4H, '?', 0f1H, 0e9H
	DB	',', 0e4H, 0ceH, 'F9', 0caH, 0a6H, 0efH, 0ceH, 0f2H, 0adH, 0edH
	DB	0bbH, '?', 0d4H, 0f4H, '?', 0a3H, 0a1H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@OJCAAKED@P?$HM?$DP?j?H?$PL?$LP?c?$PN?l?Q?R?v?$DP?d?$LC?$DP?$DP?$DP?$KB?$KD?$DP?S?$PM?$DP?q?l?c?f?T?t@
CONST	SEGMENT
??_C@_0EF@OJCAAKED@P?$HM?$DP?j?H?$PL?$LP?c?$PN?l?Q?R?v?$DP?d?$LC?$DP?$DP?$DP?$KB?$KD?$DP?S?$PM?$DP?q?l?c?f?T?t@ DB 'P'
	DB	'|?', 0eaH, 0c8H, 0fbH, 0bfH, 0e3H, 0fdH, 0ecH, 0d1H, 0d2H, 0f6H
	DB	'?', 0e4H, 0b2H, '???', 0a1H, 0a3H, '?', 0d3H, 0fcH, '?', 0f1H
	DB	0ecH, 0e3H, 0e6H, 0d4H, 0f4H, '?', 0a3H, 0acH, 0cfH, 0b4H, 0fbH
	DB	0bfH, 0e3H, 0fdH, 0ecH, 0d1H, 0f3H, 0d7H, 0e4H, 0b2H, 0d8H, 0fcH
	DB	0eeH, 0f1H, '?', 0e4H, 0b2H, '??', 0a3H, 0a1H, 0eaH, 0c8H, 0f6H
	DB	0c7H, '(%d,%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CNEFEEOF@?$DP?$DP?$KD?A?$KD?I?Y?$LM?c?R?$KD?$KB@
CONST	SEGMENT
??_C@_0N@CNEFEEOF@?$DP?$DP?$KD?A?$KD?I?Y?$LM?c?R?$KD?$KB@ DB '??', 0a3H, 0c1H
	DB	0a3H, 0c9H, 0d9H, 0bcH, 0e3H, 0d2H, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BAOBCJF@?j?$PN?$DP?$DP?o?R?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@
CONST	SEGMENT
??_C@_0BC@BAOBCJF@?j?$PN?$DP?$DP?o?R?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@ DB 0eaH
	DB	0fdH, '??', 0efH, 0d2H, 0f4H, 0f8H, 0e3H, 0b7H, 0fbH, 0f9H, 0e3H
	DB	0f7H, '?', 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HHFHKOHM@?$DP?$DP@
CONST	SEGMENT
??_C@_02HHFHKOHM@?$DP?$DP@ DB '??', 00H			; `string'
CONST	ENDS
;	COMDAT ?flip@?6??GameMain@@YAHXZ@4KA
_DATA	SEGMENT
?flip@?6??GameMain@@YAHXZ@4KA DD 01H			; `GameMain'::`7'::flip
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GameMain@@YAHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GameMain@@YAHXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GameMain@@YAHXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GameMain@@YAHXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GameMain@@YAHXZ$3
__ehfuncinfo$?GameMain@@YAHXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GameMain@@YAHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?GameErrorMessage@@YAXPAD@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
?GameErrorMessage@@YAXPAD@Z PROC			; GameErrorMessage, COMDAT

; 931  : #ifdef _STONDEBUG_
; 932  : 	FILE *fp = NULL;
; 933  : 
; 934  : 	if( (fp = fopen( "err.log","a+"))==NULL ) return;
; 935  : 	if( buf != NULL )
; 936  : 		fprintf( fp, "%s\n", buf);
; 937  : 	fclose( fp);
; 938  : #endif
; 939  : }

  00000	c2 00 00	 ret	 0
?GameErrorMessage@@YAXPAD@Z ENDP			; GameErrorMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?PutLogo@@YAXXZ
_TEXT	SEGMENT
?PutLogo@@YAXXZ PROC					; PutLogo, COMDAT

; 922  : 	DispBuffer.DispCnt = 0;

  00000	33 c0		 xor	 eax, eax

; 923  : 	StockDispBuffer( 320, 240, DISP_PRIO_TOP, CG_LOGO, 0 );

  00002	50		 push	 eax
  00003	68 be 89 00 00	 push	 35262			; 000089beH
  00008	68 ff 00 00 00	 push	 255			; 000000ffH
  0000d	68 f0 00 00 00	 push	 240			; 000000f0H
  00012	68 40 01 00 00	 push	 320			; 00000140H
  00017	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax
  0001d	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00022	83 c4 14	 add	 esp, 20			; 00000014H

; 924  : 	ClearBackSurface();	// ???????????????

  00025	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 925  : 	PutBmp();			// ????????????????

  0002a	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 926  : 	Flip();				//

  0002f	e9 00 00 00 00	 jmp	 ?Flip@@YAXXZ		; Flip
?PutLogo@@YAXXZ ENDP					; PutLogo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT ??$sprintf_s@$0EAA@@@YAHAAY0EAA@DPBDZZ
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0EAA@@@YAHAAY0EAA@DPBDZZ PROC		; sprintf_s<1024>, COMDAT

; 1840 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1491 :         int const _Result = __stdio_common_vsprintf_s(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	68 00 04 00 00	 push	 1024			; 00000400H
  00011	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1492 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1493 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1494 : 
; 1495 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1496 :     }
; 1497 :     #endif
; 1498 : 
; 1499 :     #if __STDC_WANT_SECURE_LIB__
; 1500 : 
; 1501 :         _Success_(return >= 0)
; 1502 :         _Check_return_opt_
; 1503 :         _CRT_STDIO_INLINE int __CRTDECL vsprintf_s(
; 1504 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1505 :             _In_                                          size_t      const _BufferCount,
; 1506 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1507 :                                                           va_list           _ArgList
; 1508 :             )
; 1509 :     #if defined _NO_CRT_STDIO_INLINE
; 1510 :     ;
; 1511 :     #else
; 1512 :         {
; 1513 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1514 :         }
; 1515 :     #endif
; 1516 : 
; 1517 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2(
; 1518 :             _Success_(return >= 0)
; 1519 :             int, vsprintf_s,
; 1520 :             _Always_(_Post_z_)            char,        _Buffer,
; 1521 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1522 :                                           va_list,     _ArgList
; 1523 :             )
; 1524 : 
; 1525 :     #endif
; 1526 : 
; 1527 :     _Success_(return >= 0)
; 1528 :     _Check_return_opt_
; 1529 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p_l(
; 1530 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1531 :         _In_                                          size_t      const _BufferCount,
; 1532 :         _In_z_ _Printf_format_string_params_(2)       char const* const _Format,
; 1533 :         _In_opt_                                      _locale_t   const _Locale,
; 1534 :                                                       va_list           _ArgList
; 1535 :         )
; 1536 :     #if defined _NO_CRT_STDIO_INLINE
; 1537 :     ;
; 1538 :     #else
; 1539 :     {
; 1540 :         int const _Result = __stdio_common_vsprintf_p(
; 1541 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1542 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1543 : 
; 1544 :         return _Result < 0 ? -1 : _Result;
; 1545 :     }
; 1546 :     #endif
; 1547 : 
; 1548 :     _Success_(return >= 0)
; 1549 :     _Check_return_opt_
; 1550 :     _CRT_STDIO_INLINE int __CRTDECL _vsprintf_p(
; 1551 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1552 :         _In_                                          size_t      const _BufferCount,
; 1553 :         _In_z_ _Printf_format_string_                 char const* const _Format,
; 1554 :                                                       va_list           _ArgList
; 1555 :         )
; 1556 :     #if defined _NO_CRT_STDIO_INLINE
; 1557 :     ;
; 1558 :     #else
; 1559 :     {
; 1560 :         return _vsprintf_p_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1561 :     }
; 1562 :     #endif
; 1563 : 
; 1564 :     _Success_(return >= 0)
; 1565 :     _Check_return_opt_
; 1566 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s_l(
; 1567 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1568 :         _In_                                              size_t      const _BufferCount,
; 1569 :         _In_                                              size_t      const _MaxCount,
; 1570 :         _In_z_ _Printf_format_string_params_(2)           char const* const _Format,
; 1571 :         _In_opt_                                          _locale_t   const _Locale,
; 1572 :                                                           va_list          _ArgList
; 1573 :         )
; 1574 :     #if defined _NO_CRT_STDIO_INLINE
; 1575 :     ;
; 1576 :     #else
; 1577 :     {
; 1578 :         int const _Result = __stdio_common_vsnprintf_s(
; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;
; 1583 :     }
; 1584 :     #endif
; 1585 : 
; 1586 :     _Success_(return >= 0)
; 1587 :     _Check_return_opt_
; 1588 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_s(
; 1589 :         _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1590 :         _In_                                              size_t      const _BufferCount,
; 1591 :         _In_                                              size_t      const _MaxCount,
; 1592 :         _In_z_ _Printf_format_string_                     char const* const _Format,
; 1593 :                                                           va_list           _ArgList
; 1594 :         )
; 1595 :     #if defined _NO_CRT_STDIO_INLINE
; 1596 :     ;
; 1597 :     #else
; 1598 :     {
; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1600 :     }
; 1601 :     #endif
; 1602 : 
; 1603 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1604 :         _Success_(return >= 0)
; 1605 :         int, _vsnprintf_s,
; 1606 :         _Always_(_Post_z_)            char,        _Buffer,
; 1607 :         _In_                          size_t,      _BufferCount,
; 1608 :         _In_z_ _Printf_format_string_ char const*, _Format,
; 1609 :                                       va_list,     _ArgList
; 1610 :         )
; 1611 : 
; 1612 :     #if __STDC_WANT_SECURE_LIB__
; 1613 : 
; 1614 :         _Success_(return >= 0)
; 1615 :         _Check_return_opt_
; 1616 :         _CRT_STDIO_INLINE int __CRTDECL vsnprintf_s(
; 1617 :             _Out_writes_opt_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1618 :             _In_                                              size_t      const _BufferCount,
; 1619 :             _In_                                              size_t      const _MaxCount,
; 1620 :             _In_z_ _Printf_format_string_                     char const* const _Format,
; 1621 :                                                               va_list           _ArgList
; 1622 :             )
; 1623 :     #if defined _NO_CRT_STDIO_INLINE
; 1624 :     ;
; 1625 :     #else
; 1626 :         {
; 1627 :             return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);
; 1628 :         }
; 1629 :     #endif
; 1630 : 
; 1631 :         __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_3(
; 1632 :             _Success_(return >= 0)
; 1633 :             int, vsnprintf_s,
; 1634 :             _Always_(_Post_z_)            char,        _Buffer,
; 1635 :             _In_                          size_t,      _BufferCount,
; 1636 :             _In_z_ _Printf_format_string_ char const*, _Format,
; 1637 :                                           va_list,     _ArgList
; 1638 :             )
; 1639 : 
; 1640 :     #endif
; 1641 : 
; 1642 :     _Check_return_opt_
; 1643 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_l(
; 1644 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1645 :         _In_opt_                                _locale_t   const _Locale,
; 1646 :                                                 va_list           _ArgList
; 1647 :         )
; 1648 :     #if defined _NO_CRT_STDIO_INLINE
; 1649 :     ;
; 1650 :     #else
; 1651 :     {
; 1652 :         int const _Result = __stdio_common_vsprintf(
; 1653 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1654 :             NULL, 0, _Format, _Locale, _ArgList);
; 1655 : 
; 1656 :         return _Result < 0 ? -1 : _Result;
; 1657 :     }
; 1658 :     #endif
; 1659 : 
; 1660 :     _Check_return_
; 1661 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf(
; 1662 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1663 :                                       va_list           _ArgList
; 1664 :         )
; 1665 :     #if defined _NO_CRT_STDIO_INLINE
; 1666 :     ;
; 1667 :     #else
; 1668 :     {
; 1669 :         return _vscprintf_l(_Format, NULL, _ArgList);
; 1670 :     }
; 1671 :     #endif
; 1672 : 
; 1673 :     _Check_return_opt_
; 1674 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p_l(
; 1675 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1676 :         _In_opt_                                _locale_t   const _Locale,
; 1677 :                                                 va_list           _ArgList
; 1678 :         )
; 1679 :     #if defined _NO_CRT_STDIO_INLINE
; 1680 :     ;
; 1681 :     #else
; 1682 :     {
; 1683 :         int const _Result = __stdio_common_vsprintf_p(
; 1684 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1685 :             NULL, 0, _Format, _Locale, _ArgList);
; 1686 : 
; 1687 :         return _Result < 0 ? -1 : _Result;
; 1688 :     }
; 1689 :     #endif
; 1690 : 
; 1691 :     _Check_return_
; 1692 :     _CRT_STDIO_INLINE int __CRTDECL _vscprintf_p(
; 1693 :         _In_z_ _Printf_format_string_ char const* const _Format,
; 1694 :                                       va_list           _ArgList
; 1695 :         )
; 1696 :     #if defined _NO_CRT_STDIO_INLINE
; 1697 :     ;
; 1698 :     #else
; 1699 :     {
; 1700 :         return _vscprintf_p_l(_Format, NULL, _ArgList);
; 1701 :     }
; 1702 :     #endif
; 1703 : 
; 1704 :     _Check_return_opt_
; 1705 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c_l(
; 1706 :         _Out_writes_opt_(_BufferCount)          char*       const _Buffer,
; 1707 :         _In_                                    size_t      const _BufferCount,
; 1708 :         _In_z_ _Printf_format_string_params_(2) char const* const _Format,
; 1709 :         _In_opt_                                _locale_t   const _Locale,
; 1710 :                                                 va_list           _ArgList
; 1711 :         )
; 1712 :     #if defined _NO_CRT_STDIO_INLINE
; 1713 :     ;
; 1714 :     #else
; 1715 :     {
; 1716 :         int const _Result = __stdio_common_vsprintf(
; 1717 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1718 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1719 : 
; 1720 :         return _Result < 0 ? -1 : _Result;
; 1721 :     }
; 1722 :     #endif
; 1723 : 
; 1724 :     _Success_(return >= 0)
; 1725 :     _Check_return_opt_
; 1726 :     _CRT_STDIO_INLINE int __CRTDECL _vsnprintf_c(
; 1727 :         _Out_writes_opt_(_BufferCount) char*       const _Buffer,
; 1728 :         _In_                           size_t      const _BufferCount,
; 1729 :         _In_z_ _Printf_format_string_  char const* const _Format,
; 1730 :                                        va_list           _ArgList
; 1731 :         )
; 1732 :     #if defined _NO_CRT_STDIO_INLINE
; 1733 :     ;
; 1734 :     #else
; 1735 :     {
; 1736 :         return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1737 :     }
; 1738 :     #endif
; 1739 : 
; 1740 :     _Success_(return >= 0)
; 1741 :     _Check_return_opt_ _CRT_INSECURE_DEPRECATE(_sprintf_s_l)
; 1742 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_l(
; 1743 :         _Pre_notnull_ _Always_(_Post_z_)        char*       const _Buffer,
; 1744 :         _In_z_ _Printf_format_string_params_(0) char const* const _Format,
; 1745 :         _In_opt_                                _locale_t   const _Locale,
; 1746 :         ...)
; 1747 :     #if defined _NO_CRT_STDIO_INLINE
; 1748 :     ;
; 1749 :     #else
; 1750 :     {
; 1751 :         int _Result;
; 1752 :         va_list _ArgList;
; 1753 :         __crt_va_start(_ArgList, _Locale);
; 1754 : 
; 1755 :         _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
; 1756 : 
; 1757 :         __crt_va_end(_ArgList);
; 1758 :         return _Result;
; 1759 :     }
; 1760 :     #endif
; 1761 : 
; 1762 :     _Success_(return >= 0)
; 1763 :     _Check_return_opt_
; 1764 :     _CRT_STDIO_INLINE int __CRTDECL sprintf(
; 1765 :         _Pre_notnull_ _Always_(_Post_z_) char*       const _Buffer,
; 1766 :         _In_z_ _Printf_format_string_    char const* const _Format,
; 1767 :         ...)
; 1768 :     #if defined _NO_CRT_STDIO_INLINE
; 1769 :     ;
; 1770 :     #else
; 1771 :     {
; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }
; 1781 :     #endif
; 1782 : 
; 1783 :     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_ARGLIST(
; 1784 :         _Success_(return >= 0)
; 1785 :         int, __RETURN_POLICY_SAME, __EMPTY_DECLSPEC, __CRTDECL, sprintf, vsprintf,
; 1786 :         _Pre_notnull_ _Always_(_Post_z_), char,        _Buffer,
; 1787 :         _In_z_ _Printf_format_string_     char const*, _Format
; 1788 :         )
; 1789 : 
; 1790 :     _Success_(return >= 0)
; 1791 :     _Check_return_opt_
; 1792 :     _CRT_STDIO_INLINE int __CRTDECL _sprintf_s_l(
; 1793 :         _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1794 :         _In_                                          size_t      const _BufferCount,
; 1795 :         _In_z_ _Printf_format_string_params_(0)       char const* const _Format,
; 1796 :         _In_opt_                                      _locale_t   const _Locale,
; 1797 :         ...)
; 1798 :     #if defined _NO_CRT_STDIO_INLINE
; 1799 :     ;
; 1800 :     #else
; 1801 :     {
; 1802 :         int _Result;
; 1803 :         va_list _ArgList;
; 1804 :         __crt_va_start(_ArgList, _Locale);
; 1805 :         _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1806 :         __crt_va_end(_ArgList);
; 1807 :         return _Result;
; 1808 :     }
; 1809 :     #endif
; 1810 : 
; 1811 :     #if __STDC_WANT_SECURE_LIB__
; 1812 : 
; 1813 :         _Success_(return >= 0)
; 1814 :         _Check_return_opt_
; 1815 :         _CRT_STDIO_INLINE int __CRTDECL sprintf_s(
; 1816 :             _Out_writes_(_BufferCount) _Always_(_Post_z_) char*       const _Buffer,
; 1817 :             _In_                                          size_t      const _BufferCount,
; 1818 :             _In_z_ _Printf_format_string_                 char const* const _Format,
; 1819 :             ...)
; 1820 :     #if defined _NO_CRT_STDIO_INLINE
; 1821 :     ;
; 1822 :     #else
; 1823 :         {
; 1824 :             int _Result;
; 1825 :             va_list _ArgList;
; 1826 :             __crt_va_start(_ArgList, _Format);
; 1827 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1828 :             __crt_va_end(_ArgList);
; 1829 :             return _Result;
; 1830 :         }
; 1831 :     #endif
; 1832 : 
; 1833 :     #endif
; 1834 : 
; 1835 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$sprintf_s@$0EAA@@@YAHAAY0EAA@DPBDZZ ENDP		; sprintf_s<1024>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?announce@@YAXXZ
_TEXT	SEGMENT
?announce@@YAXXZ PROC					; announce, COMDAT

; 126  : void announce(){

  00000	57		 push	 edi

; 127  : 	if (ÂÖ¨ÂëäÊï∞Èáè == 0) return;

  00001	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ÕÎÕ±?’·@@3HA ; ÕÎÕ±?’·
  00007	85 ff		 test	 edi, edi
  00009	0f 84 d4 00 00
	00		 je	 $LN1@announce

; 128  : 	dis += 4;

  0000f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dis@@3HA ; dis

; 129  : 	int len = strlen(ÂÖ¨ÂëäÂÜÖÂÆπ);

  00015	b9 00 00 00 00	 mov	 ecx, OFFSET ?ÕÎÕ±?Èª@@3PADA ; ÕÎÕ±?Èª
  0001a	83 c2 04	 add	 edx, 4
  0001d	56		 push	 esi
  0001e	89 15 00 00 00
	00		 mov	 DWORD PTR ?dis@@3HA, edx ; dis
  00024	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL12@announce:
  00027	8a 01		 mov	 al, BYTE PTR [ecx]
  00029	41		 inc	 ecx
  0002a	84 c0		 test	 al, al
  0002c	75 f9		 jne	 SHORT $LL12@announce
  0002e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00033	2b ce		 sub	 ecx, esi
  00035	f7 ea		 imul	 edx
  00037	c1 fa 03	 sar	 edx, 3
  0003a	8b c2		 mov	 eax, edx
  0003c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003f	03 c2		 add	 eax, edx

; 130  : 	int x;
; 131  : 	int showcolor;
; 132  : 	switch (ResoMode){

  00041	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ResoMode@@3HA ; ResoMode
  00047	83 ea 03	 sub	 edx, 3
  0004a	74 22		 je	 SHORT $LN6@announce
  0004c	83 ea 01	 sub	 edx, 1
  0004f	99		 cdq
  00050	74 0e		 je	 SHORT $LN5@announce

; 138  : 			break;
; 139  : 		default:
; 140  : 			x = 592 - ((dis / 25) % (592 + (len * 8)));

  00052	8d 0c cd 50 02
	00 00		 lea	 ecx, DWORD PTR [ecx*8+592]
  00059	be 50 02 00 00	 mov	 esi, 592		; 00000250H
  0005e	eb 1b		 jmp	 SHORT $LN14@announce
$LN5@announce:

; 133  : 		case ÂàÜËæ®Áéá::mode1024:
; 134  : 			x = 976 - ((dis / 25) % (976 + (len * 8)));

  00060	8d 0c cd d0 03
	00 00		 lea	 ecx, DWORD PTR [ecx*8+976]
  00067	be d0 03 00 00	 mov	 esi, 976		; 000003d0H

; 135  : 			break;

  0006c	eb 0d		 jmp	 SHORT $LN14@announce
$LN6@announce:

; 136  : 		case ÂàÜËæ®Áéá::mode800:
; 137  : 			x = 752 - ((dis / 25) % (752 + (len * 8)));

  0006e	8d 0c cd f0 02
	00 00		 lea	 ecx, DWORD PTR [ecx*8+752]
  00075	99		 cdq
  00076	be f0 02 00 00	 mov	 esi, 752		; 000002f0H
$LN14@announce:

; 141  : 			break;
; 142  : 	}
; 143  : 	if (ÂÖ¨ÂëäÈ¢úËâ≤ == -1){

  0007b	f7 f9		 idiv	 ecx
  0007d	2b f2		 sub	 esi, edx
  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ÕÎÕ±?ﬂ‰@@3HA ; ÕÎÕ±?ﬂ‰
  00085	83 fa ff	 cmp	 edx, -1
  00088	75 13		 jne	 SHORT $LN8@announce

; 144  : 		showcolor = rand() % 10;

  0008a	e8 00 00 00 00	 call	 _rand

; 145  : 	}else{

  0008f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ÕÎÕ±?’·@@3HA ; ÕÎÕ±?’·
  00095	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0009a	99		 cdq
  0009b	f7 f9		 idiv	 ecx
$LN8@announce:

; 146  : 		showcolor = ÂÖ¨ÂëäÈ¢úËâ≤;
; 147  : 	}
; 148  : 	
; 149  : 	if (x < 0){

  0009d	85 f6		 test	 esi, esi
  0009f	79 14		 jns	 SHORT $LN10@announce

; 150  : 		ÂÖ¨ÂëäÊï∞Èáè--;

  000a1	4f		 dec	 edi

; 151  : 		dis = 0;

  000a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dis@@3HA, 0	; dis
  000ac	5e		 pop	 esi
  000ad	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ÕÎÕ±?’·@@3HA, edi ; ÕÎÕ±?’·
  000b3	5f		 pop	 edi

; 156  : }

  000b4	c3		 ret	 0
$LN10@announce:

; 152  : 		return;
; 153  : 	}
; 154  : 	StockFontBuffer(x+48, 48, 1, showcolor, ÂÖ¨ÂëäÂÜÖÂÆπ, 0);

  000b5	6a 00		 push	 0
  000b7	68 00 00 00 00	 push	 OFFSET ?ÕÎÕ±?Èª@@3PADA	; ÕÎÕ±?Èª
  000bc	52		 push	 edx
  000bd	6a 01		 push	 1
  000bf	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  000c2	6a 30		 push	 48			; 00000030H
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer

; 155  : 	StockDispBuffer(560-48, 55, DISP_PRIO_MENU, IMAGE_‰∏ã‰ªªÂä°Ê†è, 0);

  000ca	6a 00		 push	 0
  000cc	68 23 cb 00 00	 push	 52003			; 0000cb23H
  000d1	6a 68		 push	 104			; 00000068H
  000d3	6a 37		 push	 55			; 00000037H
  000d5	68 00 02 00 00	 push	 512			; 00000200H
  000da	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  000df	83 c4 2c	 add	 esp, 44			; 0000002cH
  000e2	5e		 pop	 esi
$LN1@announce:

; 156  : }

  000e3	5f		 pop	 edi
  000e4	c3		 ret	 0
?announce@@YAXXZ ENDP					; announce
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?DisplayFrameRate@@YAXXZ
_TEXT	SEGMENT
?DisplayFrameRate@@YAXXZ PROC				; DisplayFrameRate, COMDAT

; 908  : 	// ?Óùæ?????Óë°
; 909  :     if( TimeGetTime() - DrawFrameTime >= 1000 ){

  00000	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00005	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?DrawFrameTime@@3KA ; DrawFrameTime
  0000b	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00010	72 1e		 jb	 SHORT $LN2@DisplayFra

; 910  : 	
; 911  : 		// ??????????
; 912  :         FrameRate = DrawFrameCnt;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DrawFrameCnt@@3HA ; DrawFrameCnt
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?FrameRate@@3HA, eax ; FrameRate

; 913  : 		// ???????
; 914  :         DrawFrameTime = TimeGetTime();

  0001c	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?DrawFrameTime@@3KA, eax ; DrawFrameTime

; 915  : 		// ?Óùæ??Óùº?????????
; 916  :         DrawFrameCnt = 0;

  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?DrawFrameCnt@@3HA, 0 ; DrawFrameCnt
$LN2@DisplayFra:

; 917  :     }
; 918  : }

  00030	c3		 ret	 0
?DisplayFrameRate@@YAXXZ ENDP				; DisplayFrameRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?GetSysInfo@@YA_NPAD@Z
_TEXT	SEGMENT
_out$ = 8						; size = 4
?GetSysInfo@@YA_NPAD@Z PROC				; GetSysInfo, COMDAT

; 1022 : 
; 1023 : 	//VMProtectBegin("GetSysInfo");
; 1024 : 	
; 1025 : 	//VMProtectEnd();
; 1026 : 	return true;

  00000	b0 01		 mov	 al, 1

; 1027 : }

  00002	c3		 ret	 0
?GetSysInfo@@YA_NPAD@Z ENDP				; GetSysInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?getCpuId@@YAHPAD@Z
_TEXT	SEGMENT
_s1$ = -16						; size = 4
_s2$ = -12						; size = 4
_s3$ = -8						; size = 4
_s4$ = -4						; size = 4
_cpuid$ = 8						; size = 4
?getCpuId@@YAHPAD@Z PROC				; getCpuId, COMDAT

; 1005 : int getCpuId(char * cpuid){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1006 : 	unsigned long s1,s2, s3, s4;
; 1007 : 	__asm{
; 1008 : 		mov eax,01h

  00007	b8 01 00 00 00	 mov	 eax, 1

; 1009 : 		xor edx,edx

  0000c	33 d2		 xor	 edx, edx

; 1010 : 		cpuid

  0000e	0f a2		 cpuid

; 1011 : 		mov s1,eax

  00010	89 45 f0	 mov	 DWORD PTR _s1$[ebp], eax

; 1012 : 		mov s2,ebx

  00013	89 5d f4	 mov	 DWORD PTR _s2$[ebp], ebx

; 1013 : 		mov s3,ecx

  00016	89 4d f8	 mov	 DWORD PTR _s3$[ebp], ecx

; 1014 : 		mov s4,edx

  00019	89 55 fc	 mov	 DWORD PTR _s4$[ebp], edx

; 1015 : 	}
; 1016 : 	sprintf(cpuid, "%08X%08X%08X%08X",s1,(s2&0xF0FFFFFF),s3,s4);

  0001c	ff 75 fc	 push	 DWORD PTR _s4$[ebp]
  0001f	8b 45 f4	 mov	 eax, DWORD PTR _s2$[ebp]
  00022	ff 75 f8	 push	 DWORD PTR _s3$[ebp]
  00025	25 ff ff ff f0	 and	 eax, -251658241		; f0ffffffH
  0002a	50		 push	 eax
  0002b	ff 75 f0	 push	 DWORD PTR _s1$[ebp]
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BPIBEBLC@?$CF08X?$CF08X?$CF08X?$CF08X@
  00033	ff 75 08	 push	 DWORD PTR _cpuid$[ebp]
  00036	e8 00 00 00 00	 call	 _sprintf
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	5b		 pop	 ebx

; 1017 : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?getCpuId@@YAHPAD@Z ENDP				; getCpuId
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?getMAC@@YAHPAD@Z
_TEXT	SEGMENT
_ncb$ = -924						; size = 64
_Adapter$ = -860					; size = 600
_lana_enum$ = -260					; size = 255
__$ArrayPad$ = -4					; size = 4
_mac$ = 8						; size = 4
?getMAC@@YAHPAD@Z PROC					; getMAC, COMDAT

; 943  : {     

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 03 00
	00		 sub	 esp, 924		; 0000039cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _mac$[ebp]

; 944  : 	NCB ncb;
; 945  : 	typedef struct _ASTAT_
; 946  : 	{
; 947  : 		ADAPTER_STATUS   adapt;
; 948  : 		NAME_BUFFER   NameBuff   [30];
; 949  : 	}ASTAT,*PASTAT;
; 950  : 
; 951  : 	ASTAT Adapter;   
; 952  : 
; 953  : 	typedef struct _LANA_ENUM
; 954  : 	{
; 955  : 		UCHAR   length;
; 956  : 		UCHAR   lana[MAX_LANA];
; 957  : 	}LANA_ENUM;
; 958  : 
; 959  : 	LANA_ENUM lana_enum;    
; 960  : 	UCHAR uRetCode;
; 961  : 	memset(&ncb, 0, sizeof(ncb));

  00017	8d 85 64 fc ff
	ff		 lea	 eax, DWORD PTR _ncb$[ebp]
  0001d	6a 40		 push	 64			; 00000040H
  0001f	6a 00		 push	 0
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _memset

; 962  : 	memset(&lana_enum, 0, sizeof(lana_enum));    

  00027	68 ff 00 00 00	 push	 255			; 000000ffH
  0002c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _lana_enum$[ebp]
  00032	6a 00		 push	 0
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _memset

; 963  : 	ncb.ncb_command = NCBENUM;
; 964  : 	ncb.ncb_buffer = (unsigned char *)&lana_enum;

  0003a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _lana_enum$[ebp]
  00040	c6 85 64 fc ff
	ff 37		 mov	 BYTE PTR _ncb$[ebp], 55	; 00000037H
  00047	89 85 68 fc ff
	ff		 mov	 DWORD PTR _ncb$[ebp+4], eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H

; 965  : 	ncb.ncb_length = sizeof(LANA_ENUM);

  00050	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00055	66 89 85 6c fc
	ff ff		 mov	 WORD PTR _ncb$[ebp+8], ax

; 966  : 	uRetCode = Netbios(&ncb);

  0005c	8d 85 64 fc ff
	ff		 lea	 eax, DWORD PTR _ncb$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _Netbios@4

; 967  : 
; 968  : 	if(uRetCode != NRC_GOODRET)     

  00068	84 c0		 test	 al, al
  0006a	74 12		 je	 SHORT $LN5@getMAC

; 969  : 		return uRetCode;     

  0006c	0f b6 c0	 movzx	 eax, al
  0006f	5f		 pop	 edi

; 995  : 		Adapter.adapt.adapter_address[0],
; 996  : 		Adapter.adapt.adapter_address[1],
; 997  : 		Adapter.adapt.adapter_address[2],
; 998  : 		Adapter.adapt.adapter_address[3],
; 999  : 		Adapter.adapt.adapter_address[4],
; 1000 : 		Adapter.adapt.adapter_address[5]);
; 1001 : 
; 1002 : 	return 0;   
; 1003 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
$LN5@getMAC:
  0007e	56		 push	 esi

; 970  : 
; 971  : 	for(int lana=0; lana<lana_enum.length; lana++)     

  0007f	33 f6		 xor	 esi, esi
  00081	80 bd fc fe ff
	ff 00		 cmp	 BYTE PTR _lana_enum$[ebp], 0
  00088	76 49		 jbe	 SHORT $LN7@getMAC
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL4@getMAC:

; 972  : 	{
; 973  : 		ncb.ncb_command = NCBRESET;
; 974  : 		ncb.ncb_lana_num = lana_enum.lana[lana];

  00090	8a 84 35 fd fe
	ff ff		 mov	 al, BYTE PTR _lana_enum$[ebp+esi+1]
  00097	88 85 94 fc ff
	ff		 mov	 BYTE PTR _ncb$[ebp+48], al

; 975  : 		uRetCode = Netbios(&ncb); 

  0009d	8d 85 64 fc ff
	ff		 lea	 eax, DWORD PTR _ncb$[ebp]
  000a3	50		 push	 eax
  000a4	c6 85 64 fc ff
	ff 32		 mov	 BYTE PTR _ncb$[ebp], 50	; 00000032H
  000ab	e8 00 00 00 00	 call	 _Netbios@4

; 976  : 		if(uRetCode == NRC_GOODRET)

  000b0	84 c0		 test	 al, al
  000b2	74 1f		 je	 SHORT $LN7@getMAC

; 970  : 
; 971  : 	for(int lana=0; lana<lana_enum.length; lana++)     

  000b4	0f b6 8d fc fe
	ff ff		 movzx	 ecx, BYTE PTR _lana_enum$[ebp]
  000bb	46		 inc	 esi
  000bc	3b f1		 cmp	 esi, ecx
  000be	7c d0		 jl	 SHORT $LL4@getMAC
$LN16@getMAC:
  000c0	5e		 pop	 esi

; 977  : 			break; 
; 978  : 	}
; 979  : 
; 980  : 	if(uRetCode != NRC_GOODRET)
; 981  : 		return uRetCode;     

  000c1	0f b6 c0	 movzx	 eax, al
  000c4	5f		 pop	 edi

; 995  : 		Adapter.adapt.adapter_address[0],
; 996  : 		Adapter.adapt.adapter_address[1],
; 997  : 		Adapter.adapt.adapter_address[2],
; 998  : 		Adapter.adapt.adapter_address[3],
; 999  : 		Adapter.adapt.adapter_address[4],
; 1000 : 		Adapter.adapt.adapter_address[5]);
; 1001 : 
; 1002 : 	return 0;   
; 1003 : }

  000c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c8	33 cd		 xor	 ecx, ebp
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
$LN7@getMAC:

; 982  : 
; 983  : 	memset(&ncb, 0, sizeof(ncb));

  000d3	6a 40		 push	 64			; 00000040H
  000d5	8d 85 64 fc ff
	ff		 lea	 eax, DWORD PTR _ncb$[ebp]
  000db	6a 00		 push	 0
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _memset

; 984  : 	ncb.ncb_command = NCBASTAT;
; 985  : 	ncb.ncb_lana_num = lana_enum.lana[0];

  000e3	8a 85 fd fe ff
	ff		 mov	 al, BYTE PTR _lana_enum$[ebp+1]
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ec	88 85 94 fc ff
	ff		 mov	 BYTE PTR _ncb$[ebp+48], al

; 986  : 	strcpy((char*)ncb.ncb_callname, "*");
; 987  : 	ncb.ncb_buffer = (unsigned char *)&Adapter;

  000f2	8d 85 a4 fc ff
	ff		 lea	 eax, DWORD PTR _Adapter$[ebp]
  000f8	89 85 68 fc ff
	ff		 mov	 DWORD PTR _ncb$[ebp+4], eax

; 988  : 	ncb.ncb_length = sizeof(Adapter);
; 989  : 	uRetCode = Netbios(&ncb);

  000fe	8d 85 64 fc ff
	ff		 lea	 eax, DWORD PTR _ncb$[ebp]
  00104	c6 85 64 fc ff
	ff 33		 mov	 BYTE PTR _ncb$[ebp], 51	; 00000033H
  0010b	50		 push	 eax
  0010c	c7 85 6c fc ff
	ff 58 02 2a 00	 mov	 DWORD PTR _ncb$[ebp+8], 2753112 ; 002a0258H
  00116	e8 00 00 00 00	 call	 _Netbios@4

; 990  : 
; 991  : 	if(uRetCode != NRC_GOODRET)

  0011b	84 c0		 test	 al, al
  0011d	75 a1		 jne	 SHORT $LN16@getMAC

; 992  : 		return uRetCode;
; 993  : 
; 994  : 	sprintf(mac,"%02X-%02X-%02X-%02X-%02X-%02X",

  0011f	0f b6 85 a9 fc
	ff ff		 movzx	 eax, BYTE PTR _Adapter$[ebp+5]
  00126	50		 push	 eax
  00127	0f b6 85 a8 fc
	ff ff		 movzx	 eax, BYTE PTR _Adapter$[ebp+4]
  0012e	50		 push	 eax
  0012f	0f b6 85 a7 fc
	ff ff		 movzx	 eax, BYTE PTR _Adapter$[ebp+3]
  00136	50		 push	 eax
  00137	0f b6 85 a6 fc
	ff ff		 movzx	 eax, BYTE PTR _Adapter$[ebp+2]
  0013e	50		 push	 eax
  0013f	0f b6 85 a5 fc
	ff ff		 movzx	 eax, BYTE PTR _Adapter$[ebp+1]
  00146	50		 push	 eax
  00147	0f b6 85 a4 fc
	ff ff		 movzx	 eax, BYTE PTR _Adapter$[ebp]
  0014e	50		 push	 eax
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GHBLPFMO@?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X?9?$CF02X@
  00154	57		 push	 edi
  00155	e8 00 00 00 00	 call	 _sprintf

; 995  : 		Adapter.adapt.adapter_address[0],
; 996  : 		Adapter.adapt.adapter_address[1],
; 997  : 		Adapter.adapt.adapter_address[2],
; 998  : 		Adapter.adapt.adapter_address[3],
; 999  : 		Adapter.adapt.adapter_address[4],
; 1000 : 		Adapter.adapt.adapter_address[5]);
; 1001 : 
; 1002 : 	return 0;   
; 1003 : }

  0015a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015d	83 c4 20	 add	 esp, 32			; 00000020H
  00160	33 cd		 xor	 ecx, ebp
  00162	33 c0		 xor	 eax, eax
  00164	5e		 pop	 esi
  00165	5f		 pop	 edi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
?getMAC@@YAHPAD@Z ENDP					; getMAC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?EndGame@@YAXXZ
_TEXT	SEGMENT
?EndGame@@YAXXZ PROC					; EndGame, COMDAT

; 1205 : #ifdef __NEW_CLIENT
; 1206 : 	extern HANDLE hPing;
; 1207 : 	extern SOCKET sockRaw;
; 1208 : 	if( hPing){

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hPing@@3PAXA, 0 ; hPing
  00007	74 39		 je	 SHORT $LN2@EndGame

; 1209 : 		closesocket( sockRaw);

  00009	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockRaw@@3IA	; sockRaw
  0000f	e8 00 00 00 00	 call	 _closesocket@4

; 1210 : 		sockRaw = INVALID_SOCKET;
; 1211 : 		TerminateThread( hPing, 0);

  00014	6a 00		 push	 0
  00016	ff 35 00 00 00
	00		 push	 DWORD PTR ?hPing@@3PAXA	; hPing
  0001c	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?sockRaw@@3IA, -1 ; sockRaw
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TerminateThread@8

; 1212 : 		CloseHandle( hPing);

  0002c	ff 35 00 00 00
	00		 push	 DWORD PTR ?hPing@@3PAXA	; hPing
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 1213 : 		hPing = NULL;

  00038	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hPing@@3PAXA, 0 ; hPing
$LN2@EndGame:

; 1214 : 	}
; 1215 : #endif
; 1216 : 	if( net_readbuf){

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  00047	85 c0		 test	 eax, eax
  00049	74 18		 je	 SHORT $LN3@EndGame

; 1217 : 		VirtualFree( net_readbuf, NULL, MEM_RELEASE);

  0004b	68 00 80 00 00	 push	 32768			; 00008000H
  00050	6a 00		 push	 0
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualFree@12

; 1218 : 		net_readbuf = NULL;

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?net_readbuf@@3PADA, 0 ; net_readbuf
$LN3@EndGame:

; 1219 : 	}
; 1220 : 	if( net_writebuf){

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  00068	85 c0		 test	 eax, eax
  0006a	74 18		 je	 SHORT $LN4@EndGame

; 1221 : 		VirtualFree( net_writebuf, NULL, MEM_RELEASE);

  0006c	68 00 80 00 00	 push	 32768			; 00008000H
  00071	6a 00		 push	 0
  00073	50		 push	 eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualFree@12

; 1222 : 		net_writebuf = NULL;

  0007a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?net_writebuf@@3PADA, 0 ; net_writebuf
$LN4@EndGame:

; 1223 : 	}
; 1224 : 	//DirectDraw ?Óü¥
; 1225 : 	ReleaseDirectDraw();

  00084	e8 00 00 00 00	 call	 ?ReleaseDirectDraw@@YAXXZ ; ReleaseDirectDraw

; 1226 : 	// ???????????Óü¥
; 1227 : 	EndDInput();

  00089	e8 00 00 00 00	 call	 ?EndDInput@@YAHXZ	; EndDInput

; 1228 : 	// DirectSound ?Óü¥
; 1229 : 	t_music_end();

  0008e	e8 00 00 00 00	 call	 ?t_music_end@@YAXXZ	; t_music_end

; 1230 : 	// ????ÓòÖÓçè
; 1231 : 	cdda_stop();

  00093	e8 00 00 00 00	 call	 ?cdda_stop@@YA_NXZ	; cdda_stop

; 1232 : 	// Rialbin Óûº??
; 1233 : 	cleanupRealbin();

  00098	e8 00 00 00 00	 call	 ?cleanupRealbin@@YAXXZ	; cleanupRealbin

; 1234 : 	// ????????????Óåñ
; 1235 : 	DeleteObject( hFont );

  0009d	ff 35 00 00 00
	00		 push	 DWORD PTR ?hFont@@3PAUHFONT__@@A ; hFont
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 1236 : 	// ????Óé∑?
; 1237 : 	EndIme();

  000a9	e8 00 00 00 00	 call	 ?EndIme@@YAXXZ		; EndIme

; 1238 : 	// ?????Óé∑???
; 1239 : 	EndAction();

  000ae	e8 00 00 00 00	 call	 ?EndAction@@YAXXZ	; EndAction

; 1240 : 	// ??????Óé∑???
; 1241 : 	cleanupNetwork();

  000b3	e8 00 00 00 00	 call	 ?cleanupNetwork@@YAXXZ	; cleanupNetwork

; 1242 : 	// ÓôØ??ÓôÆ???????????Óü¥
; 1243 : 	ReleaseMutex( hMutex );

  000b8	ff 35 00 00 00
	00		 push	 DWORD PTR ?hMutex@@3PAXA ; hMutex
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4

; 1244 : 	// ????????
; 1245 : 	saveUserSetting();

  000c4	e8 00 00 00 00	 call	 ?saveUserSetting@@YAHXZ	; saveUserSetting

; 1246 : 	// ?????Óôë?Óû∞??ÓüïÓîº
; 1247 : 	SaveChatRegistyStr();

  000c9	e8 00 00 00 00	 call	 ?SaveChatRegistyStr@@YAHXZ ; SaveChatRegistyStr

; 1248 : 	
; 1249 : 	// ????Óé∑?
; 1250 : //	timeKillEvent(timerId);
; 1251 : 	
; 1252 : 	//{
; 1253 : 		// ALT+TAB ?????
; 1254 : 	//	int nOldVal;
; 1255 : 	//	SystemParametersInfo (SPI_SCREENSAVERRUNNING, FALSE, &nOldVal, 0);
; 1256 : 	//}
; 1257 : #ifdef _CHANNEL_MODIFY
; 1258 : 	SaveChatData(NULL,0,true);

  000ce	6a 01		 push	 1
  000d0	6a 00		 push	 0
  000d2	6a 00		 push	 0
  000d4	e8 00 00 00 00	 call	 ?SaveChatData@@YAXPADD_N@Z ; SaveChatData
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1259 : #endif
; 1260 : #ifdef _REMAKE_20
; 1261 : #ifndef _STONDEBUG_
; 1262 : 	UnregisterHotKey(hWnd,0);
; 1263 : 	UnregisterHotKey(hWnd,1);
; 1264 : #endif
; 1265 : #endif
; 1266 : 	util_Release();

  000dc	e9 00 00 00 00	 jmp	 ?util_Release@@YAXXZ	; util_Release
?EndGame@@YAXXZ ENDP					; EndGame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?InitGame@@YAHXZ
_TEXT	SEGMENT
_msg$1 = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
?InitGame@@YAHXZ PROC					; InitGame, COMDAT

; 1030 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1031 : 	char token[128];	
; 1032 : 	InitDInput();

  00013	e8 00 00 00 00	 call	 ?InitDInput@@YAHXZ	; InitDInput

; 1033 : 
; 1034 : 	/*if(!LoadReadSayShield())
; 1035 : 		return FALSE;
; 1036 : 	if(!LoadReadNameShield())
; 1037 : 		return FALSE;*/
; 1038 : #ifdef _READ16BITBMP
; 1039 : 	unsigned int testMMX = 0;
; 1040 : 	// ÊµãËØïcpuÊòØÂê¶ÊúâMMXÊåá‰ª§ÈõÜ
; 1041 : 	__asm{
; 1042 : 		push eax
; 1043 : 		mov eax,1
; 1044 : 		CPUID
; 1045 : 		mov testMMX,edx
; 1046 : 		pop eax
; 1047 : 	}
; 1048 : 	// Á¨¨23‰∏™‰ΩçÂÖÉËã•‰∏∫1Ë°®Á§∫ÊúâMMX
; 1049 : 	if(testMMX & 0x00800000) g_bMMXMode = true;
; 1050 : 	else g_bMMXMode = false;
; 1051 : #endif
; 1052 : #ifdef _STONDEBUG_
; 1053 : 	#ifdef _READ16BITBMP
; 1054 : 	QueryPerformanceFrequency(&tf);
; 1055 : 	iTotalProcTime = 0;
; 1056 : 	iTotalRunCount = 0;
; 1057 : 	#endif
; 1058 : #endif
; 1059 : 	util_Init();

  00018	e8 00 00 00 00	 call	 ?util_Init@@YAXXZ	; util_Init

; 1060 : 	if( InitDirectDraw() == FALSE ){

  0001d	e8 00 00 00 00	 call	 ?InitDirectDraw@@YAHXZ	; InitDirectDraw
  00022	85 c0		 test	 eax, eax
  00024	75 28		 jne	 SHORT $LN2@InitGame

; 1061 : 		MessageBox( hWnd, "initialization DirectDraw fail!", "??", MB_OK | MB_ICONSTOP );

  00026	6a 10		 push	 16			; 00000010H
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OPFINFCP@initialization?5DirectDraw?5fail?$CB@
  00032	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
$LN15@InitGame:

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  0003e	33 c0		 xor	 eax, eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN2@InitGame:

; 1062 : 		return FALSE;
; 1063 : 	}
; 1064 : 	if( InitOffScreenSurface() == FALSE ){

  0004e	e8 00 00 00 00	 call	 ?InitOffScreenSurface@@YAHXZ ; InitOffScreenSurface
  00053	85 c0		 test	 eax, eax
  00055	75 28		 jne	 SHORT $LN3@InitGame

; 1065 : 		MessageBox( hWnd, "initialization Off Screan Surface fail!", "??", MB_OK | MB_ICONSTOP );

  00057	6a 10		 push	 16			; 00000010H
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@PBAELGDP@initialization?5Off?5Screan?5Surfa@
  00063	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 1066 : 		return FALSE;

  0006f	33 c0		 xor	 eax, eax

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	33 cd		 xor	 ecx, ebp
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
$LN3@InitGame:

; 1067 : 	}
; 1068 : 	if( InitPalette() == FALSE )

  0007f	e8 00 00 00 00	 call	 ?InitPalette@@YAHXZ	; InitPalette
  00084	85 c0		 test	 eax, eax
  00086	74 b6		 je	 SHORT $LN15@InitGame

; 1069 : 		return FALSE;
; 1070 : 
; 1071 : 	BOOL initRealbinFileOpen(char *realbinfilename, char *addrbinfilename);
; 1072 : 	if( initRealbinFileOpen( realBinName, adrnBinName ) == FALSE ) {

  00088	68 00 00 00 00	 push	 OFFSET ?adrnBinName@@3PADA ; adrnBinName
  0008d	68 00 00 00 00	 push	 OFFSET ?realBinName@@3PADA ; realBinName
  00092	e8 00 00 00 00	 call	 ?initRealbinFileOpen@@YAHPAD0@Z ; initRealbinFileOpen
  00097	83 c4 08	 add	 esp, 8
  0009a	85 c0		 test	 eax, eax
  0009c	75 28		 jne	 SHORT $LN5@InitGame

; 1073 : 		MessageBox( hWnd, "Open Real.bin fail!", "??", MB_OK | MB_ICONSTOP );

  0009e	6a 10		 push	 16			; 00000010H
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DNHHBPHG@Open?5Real?4bin?5fail?$CB@
  000aa	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 1074 : 		return FALSE;

  000b6	33 c0		 xor	 eax, eax

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bb	33 cd		 xor	 ecx, ebp
  000bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
$LN5@InitGame:

; 1075 : 	}
; 1076 : 	//  [10/22/2010 %WXY%]
; 1077 : 	//ËõÅÂ∫ãLOGO
; 1078 : //#ifndef _STONDEBUG_
; 1079 : //	PutLogo();
; 1080 : //#endif
; 1081 : 	//--------------------
; 1082 : 
; 1083 : //	GameErrorMessage( "initAutoMapColor()");
; 1084 : #ifndef PROFILE_TEST
; 1085 : 	initAutoMapColor( adrnBinName );

  000c6	68 00 00 00 00	 push	 OFFSET ?adrnBinName@@3PADA ; adrnBinName
  000cb	e8 00 00 00 00	 call	 ?initAutoMapColor@@YAXPAD@Z ; initAutoMapColor

; 1086 : #else
; 1087 : 	initAutoMapColor( "d:\\sa\\data\\adrn_66.bin" );
; 1088 : #endif
; 1089 : 
; 1090 : //	GameErrorMessage( "InitSprBinFileOpen()");
; 1091 : #ifndef PROFILE_TEST
; 1092 : 	if( InitSprBinFileOpen( sprBinName, sprAdrnBinName ) == FALSE ){

  000d0	68 00 00 00 00	 push	 OFFSET ?sprAdrnBinName@@3PADA ; sprAdrnBinName
  000d5	68 00 00 00 00	 push	 OFFSET ?sprBinName@@3PADA ; sprBinName
  000da	e8 00 00 00 00	 call	 ?InitSprBinFileOpen@@YAHPAD0@Z ; InitSprBinFileOpen
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e2	85 c0		 test	 eax, eax
  000e4	75 28		 jne	 SHORT $LN6@InitGame

; 1093 : #else
; 1094 : 	if( InitSprBinFileOpen( "d:\\sa\\data\\spr_47.bin","d:\\sa\\data\\spradrn_47.bin" ) == FALSE ){
; 1095 : #endif
; 1096 : 		MessageBox( hWnd, "ÂºÄÂêØSpr.binÂ§±Ë¥•ÔºÅ", "??", MB_OK | MB_ICONSTOP );

  000e6	6a 10		 push	 16			; 00000010H
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OCIHCKAB@?$DP?$DPSpr?4bin?c?w?$DP?$KD?$KB@
  000f2	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 1097 : 		return FALSE;

  000fe	33 c0		 xor	 eax, eax

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	33 cd		 xor	 ecx, ebp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
$LN6@InitGame:

; 1098 : 	}
; 1099 : 
; 1100 : #ifdef _READ16BITBMP
; 1101 : 	int ref;
; 1102 : #ifndef PROFILE_TEST
; 1103 : 	if((ref = InitRealTruebinFileOpen(realtrueBinName,adrntrueBinName)) < 0){
; 1104 : #else
; 1105 : 	if((ref = InitRealTruebinFileOpen("d:\\sa\\data\\realtrue_7.bin","d:\\sa\\data\\adrntrue_2.bin")) < 0){
; 1106 : #endif
; 1107 : 		if(ref == -1) MessageBox(hWnd,"ÂºÄÂêØ adrntrue.bin Â§±Ë¥•ÔºÅ","??",MB_OK | MB_ICONSTOP);
; 1108 : 		else if(ref == -2) MessageBox(hWnd,"ÂºÄÂêØ realtrue.bin Â§±Ë¥•ÔºÅ","??",MB_OK | MB_ICONSTOP);
; 1109 : 		return FALSE;
; 1110 : 	}
; 1111 : #endif
; 1112 : 
; 1113 : 	//ÂàÜÁ¶ªË°•‰∏ÅÂä†ËΩΩ
; 1114 : 	InitPteernSeparationBin(_ÂàÜÁ¶ªË°•‰∏ÅÁõÆÂΩï);

  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_09KKEDNOKB@?4?1?1sapath@
  00113	e8 00 00 00 00	 call	 ?InitPteernSeparationBin@@YAXPBD@Z ; InitPteernSeparationBin

; 1115 : #ifdef Âä†ËΩΩÊñ∞Â≠ó‰Ωì
; 1116 : 	int a = AddFontResourceEx(".//data//font//hkyt.ttf", FR_PRIVATE,0);
; 1117 : 	InitFont(2);
; 1118 : #else
; 1119 : 	InitFont(0);

  00118	6a 00		 push	 0
  0011a	e8 00 00 00 00	 call	 ?InitFont@@YAXH@Z	; InitFont

; 1120 : #endif
; 1121 : 	InitAction();

  0011f	e8 00 00 00 00	 call	 ?InitAction@@YAXXZ	; InitAction

; 1122 : 
; 1123 : 	srand( TimeGetTime() );

  00124	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _srand

; 1124 : 	initRand2();

  0012f	e8 00 00 00 00	 call	 ?initRand2@@YAXXZ	; initRand2

; 1125 : 	t_music_init();

  00134	e8 00 00 00 00	 call	 ?t_music_init@@YAHXZ	; t_music_init

; 1126 : #ifdef _WIN_LUAJIT_
; 1127 : 	//memset(gmsv, 0, sizeof(gameserver)*MAX_GMSV);
; 1128 : 	//memset(gmgroup, 0, sizeof(gamegroup)*MAX_GMGROUP);
; 1129 : 	extern void LoadStoneAgeLUA(char *path);
; 1130 : 	LoadStoneAgeLUA(_LUA_PATCH_);

  00139	68 00 00 00 00	 push	 OFFSET ??_C@_06BHFGNFJA@?4?1?1lua@
  0013e	e8 00 00 00 00	 call	 ?LoadStoneAgeLUA@@YAXPAD@Z ; LoadStoneAgeLUA

; 1131 : #endif
; 1132 : 	if(!InitIme(hWnd,StrToNowStrBuffer)){

  00143	68 00 00 00 00	 push	 OFFSET ?StrToNowStrBuffer@@YAXPAD@Z ; StrToNowStrBuffer
  00148	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  0014e	e8 00 00 00 00	 call	 ?InitIme@@YAHPAUHWND__@@P6AXPAD@Z@Z ; InitIme
  00153	83 c4 18	 add	 esp, 24			; 00000018H
  00156	85 c0		 test	 eax, eax
  00158	75 28		 jne	 SHORT $LN7@InitGame

; 1133 : 		MessageBox( hWnd, "ÂàùÂßãÂåñËæìÂÖ•Ê≥ïÂ§±Ë¥•ÔºÅ", "??", MB_OK | MB_ICONSTOP );

  0015a	6a 10		 push	 16			; 00000010H
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BMPFHBPA@?t?x?c?$LH?$PL?y?$DP?l?$PN?$NL?v?c?w?$DP?$KD?$KB@
  00166	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 1134 : 		return FALSE;

  00172	33 c0		 xor	 eax, eax

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  00174	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00177	33 cd		 xor	 ecx, ebp
  00179	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c3		 ret	 0
$LN7@InitGame:

; 1135 : 	}
; 1136 : 	MouseInit();

  00182	e8 00 00 00 00	 call	 ?MouseInit@@YAXXZ	; MouseInit

; 1137 : 	if( loadUserSetting() == FALSE ){

  00187	e8 00 00 00 00	 call	 ?loadUserSetting@@YAHXZ	; loadUserSetting
  0018c	85 c0		 test	 eax, eax
  0018e	75 46		 jne	 SHORT $LN8@InitGame

; 1138 : 		char msg[1024];
; 1139 : 		sprintf( msg, SAVE_ERRMSG_loadNowState, savedataErrorCode );

  00190	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?savedataErrorCode@@3EA ; savedataErrorCode
  00197	50		 push	 eax
  00198	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _msg$1[ebp]
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@HNPNNIBJ@?$DP?v?$KC?$DP?p?m?$DP?d?P?c?w?$DP?$KB?$KD?$CIcode?5?$DN?5?$CFd?$CJ?5?$DP?$DP?p?$LGs@
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 _sprintf
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1140 : 		MessageBox( hWnd, msg, "??", MB_OK | MB_ICONSTOP );

  001ac	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _msg$1[ebp]
  001b2	6a 10		 push	 16			; 00000010H
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  001b9	50		 push	 eax
  001ba	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 1141 : 		return FALSE;

  001c6	33 c0		 xor	 eax, eax

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  001c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cb	33 cd		 xor	 ecx, ebp
  001cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
$LN8@InitGame:

; 1142 : 	}
; 1143 : 	LoadChatRegistyStr();

  001d6	e8 00 00 00 00	 call	 ?LoadChatRegistyStr@@YAHXZ ; LoadChatRegistyStr

; 1144 : 	NowTime = TimeGetTime();

  001db	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  001e0	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime

; 1145 : 	DrawFrameTime = TimeGetTime();

  001e5	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 1146 : 	if( MouseCursorFlag == FALSE ){

  001ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?MouseCursorFlag@@3HA, 0 ; MouseCursorFlag
  001f1	a3 00 00 00 00	 mov	 DWORD PTR ?DrawFrameTime@@3KA, eax ; DrawFrameTime
  001f6	75 08		 jne	 SHORT $LN9@InitGame

; 1147 : #ifdef _TALK_WINDOW
; 1148 : 		g_iCursorCount = ShowCursor( FALSE );
; 1149 : #else
; 1150 : 		ShowCursor( FALSE );

  001f8	6a 00		 push	 0
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowCursor@4
$LN9@InitGame:

; 1151 : #endif
; 1152 : 	}
; 1153 : 
; 1154 : 
; 1155 : 	ProcNo2 = -1;
; 1156 : #ifdef __NEW_CLIENT_MEM
; 1157 : #ifndef __NEW_CLIENT_ONLY_WRITE
; 1158 : 	if( !net_readbuf){

  00200	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?net_readbuf@@3PADA, 0 ; net_readbuf
  00207	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?ProcNo2@@3HA, -1 ; ProcNo2
  00211	75 45		 jne	 SHORT $LN11@InitGame

; 1159 : 		if( !(net_readbuf=(char*)VirtualAlloc( NULL, NETBUFSIZ, MEM_COMMIT, PAGE_READWRITE))){

  00213	6a 04		 push	 4
  00215	68 00 10 00 00	 push	 4096			; 00001000H
  0021a	68 00 40 00 00	 push	 16384			; 00004000H
  0021f	6a 00		 push	 0
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  00227	a3 00 00 00 00	 mov	 DWORD PTR ?net_readbuf@@3PADA, eax ; net_readbuf
  0022c	85 c0		 test	 eax, eax
  0022e	75 28		 jne	 SHORT $LN11@InitGame

; 1160 : 			MessageBox( hWnd, "net_readbuf Init Â§±Ë¥•!", "??", MB_OK | MB_ICONSTOP );

  00230	6a 10		 push	 16			; 00000010H
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  00237	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MCAODPHE@net_readbuf?5Init?5?c?w?$DP?$CB@
  0023c	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 1161 : 			return FALSE;

  00248	33 c0		 xor	 eax, eax

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  0024a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024d	33 cd		 xor	 ecx, ebp
  0024f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c3		 ret	 0
$LN11@InitGame:

; 1162 : 		}
; 1163 : 	}
; 1164 : #else
; 1165 : 	if( !net_readbuf){
; 1166 : 		if( !(net_readbuf=(char*)VirtualAlloc( NULL, NETBUFSIZ, MEM_COMMIT, PAGE_NOACCESS))){
; 1167 : 			MessageBox( hWnd, "net_readbuf Init Â§±Ë¥•!", "??", MB_OK | MB_ICONSTOP );
; 1168 : 			return FALSE;
; 1169 : 		}
; 1170 : 	}
; 1171 : #endif
; 1172 : 	if( !net_writebuf){

  00258	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?net_writebuf@@3PADA, 0 ; net_writebuf
  0025f	75 45		 jne	 SHORT $LN13@InitGame

; 1173 : 		if( !(net_writebuf=(char*)VirtualAlloc( NULL, NETBUFSIZ, MEM_COMMIT, PAGE_NOACCESS))){

  00261	6a 01		 push	 1
  00263	68 00 10 00 00	 push	 4096			; 00001000H
  00268	68 00 40 00 00	 push	 16384			; 00004000H
  0026d	6a 00		 push	 0
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  00275	a3 00 00 00 00	 mov	 DWORD PTR ?net_writebuf@@3PADA, eax ; net_writebuf
  0027a	85 c0		 test	 eax, eax
  0027c	75 28		 jne	 SHORT $LN13@InitGame

; 1174 : 			MessageBox( hWnd, "net_writebuf Init Â§±Ë¥•!", "??", MB_OK | MB_ICONSTOP );

  0027e	6a 10		 push	 16			; 00000010H
  00280	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BBOIGEMF@net_writebuf?5Init?5?c?w?$DP?$CB@
  0028a	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00290	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 1175 : 			return FALSE;

  00296	33 c0		 xor	 eax, eax

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  00298	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029b	33 cd		 xor	 ecx, ebp
  0029d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a2	8b e5		 mov	 esp, ebp
  002a4	5d		 pop	 ebp
  002a5	c3		 ret	 0
$LN13@InitGame:

; 1176 : 		}
; 1177 : 	}
; 1178 : #else
; 1179 : 	if( !net_readbuf){
; 1180 : 		if( !(net_readbuf=(char*)VirtualAlloc( NULL, NETBUFSIZ, MEM_COMMIT, PAGE_READWRITE))){
; 1181 : 			MessageBox( hWnd, "net_readbuf Init Â§±Ë¥•!", "??", MB_OK | MB_ICONSTOP );
; 1182 : 			return FALSE;
; 1183 : 		}
; 1184 : 	}
; 1185 : 	if( !net_writebuf){
; 1186 : 		if( !(net_writebuf=(char*)VirtualAlloc( NULL, NETBUFSIZ, MEM_COMMIT, PAGE_READWRITE))){
; 1187 : 			MessageBox( hWnd, "net_writebuf Init Â§±Ë¥•!", "??", MB_OK | MB_ICONSTOP );
; 1188 : 			return FALSE;
; 1189 : 		}
; 1190 : 	}
; 1191 : #endif
; 1192 : #ifdef _CHANNEL_MODIFY
; 1193 : 	CreateDirectory("chat\\",NULL);

  002a6	6a 00		 push	 0
  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_05KPHDFNJG@chat?2@
  002ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 1194 : #endif
; 1195 : 
; 1196 : 	return TRUE;
; 1197 : }	

  002b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b6	b8 01 00 00 00	 mov	 eax, 1
  002bb	33 cd		 xor	 ecx, ebp
  002bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c2	8b e5		 mov	 esp, ebp
  002c4	5d		 pop	 ebp
  002c5	c3		 ret	 0
?InitGame@@YAHXZ ENDP					; InitGame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File \\VBOXSVR\_stoneage\repos\ssm-sacli\system\gamemain.cpp
;	COMDAT ?GameMain@@YAHXZ
_TEXT	SEGMENT
_t$2 = -1060						; size = 4
_oldprotect$3 = -1056					; size = 4
tv1190 = -1052						; size = 4
_dir2$4 = -1048						; size = 2
_nowttime3$1$ = -1044					; size = 4
_m$5 = -1040						; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?GameMain@@YAHXZ PROC					; GameMain, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GameMain@@YAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 04 00
	00		 sub	 esp, 1048		; 00000418H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 166  : 	if (InitGame() == FALSE) {

  0002e	e8 00 00 00 00	 call	 ?InitGame@@YAHXZ	; InitGame
  00033	85 c0		 test	 eax, eax
  00035	75 1d		 jne	 SHORT $LN13@GameMain

; 167  : 		MessageBox(hWnd, "Ê∏∏ÊàèËÆæÂÆöÂàùÂßãÂåñÂ§±Ë¥•ÔºÅ", "??", MB_OK | MB_ICONSTOP);

  00037	6a 10		 push	 16			; 00000010H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_02HHFHKOHM@?$DP?$DP@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BAOBCJF@?j?$PN?$DP?$DP?o?R?t?x?c?$LH?$PL?y?c?w?$DP?$KD?$KB@
  00043	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 168  : 		return FALSE;

  0004f	e9 89 0a 00 00	 jmp	 $LN138@GameMain
$LN13@GameMain:

; 169  : 	}
; 170  : 	char sz[32];
; 171  : 	DWORD nowtime;
; 172  : 	DWORD nowttime1 = TimeGetTime();

  00054	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00059	8b f8		 mov	 edi, eax

; 173  : 	DWORD nowttime3 = TimeGetTime();

  0005b	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00060	8b f0		 mov	 esi, eax
  00062	89 b5 ec fb ff
	ff		 mov	 DWORD PTR _nowttime3$1$[ebp], esi

; 174  : 	//_itoa_s( nowttime1^0xffffbcde, sz, 10);
; 175  : 
; 176  : #ifdef	_OPTIMIZATIONFLIP_
; 177  : 	BOOL finishLoop = TRUE;
; 178  : 	unsigned int startloopTime = TimeGetTime();
; 179  : 	unsigned int endloopTime;
; 180  : 	unsigned int endProcTime;
; 181  : 
; 182  : 	unsigned int loopAmend = 0;
; 183  : 	unsigned int skipAmend = 0;
; 184  : 	extern BOOL  isXP();
; 185  : 	BOOL isXPSystem = isXP();
; 186  : #endif
; 187  : 
; 188  : 	void CreatFontHdc();
; 189  : 	CreatFontHdc();

  00068	e8 00 00 00 00	 call	 ?CreatFontHdc@@YAXXZ	; CreatFontHdc

; 190  : 
; 191  : 	while (1) {
; 192  : 		if (SystemTask() == FALSE) {

  0006d	e8 00 00 00 00	 call	 ?SystemTask@@YAHXZ	; SystemTask
  00072	85 c0		 test	 eax, eax
  00074	0f 84 5e 0a 00
	00		 je	 $LN107@GameMain
  0007a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00080	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00087	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
  0008d	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00090	89 85 e4 fb ff
	ff		 mov	 DWORD PTR tv1190[ebp], eax
$LL2@GameMain:

; 194  : 			return FALSE;
; 195  : 		}
; 196  : 
; 197  : #ifdef	_OPTIMIZATIONFLIP_
; 198  : 		if (finishLoop)
; 199  : 		{
; 200  : 			startloopTime = TimeGetTime();
; 201  : 			endloopTime = startloopTime + SystemTime;
; 202  : 			endProcTime = startloopTime + ProcTime;
; 203  : 			finishLoop = FALSE;
; 204  : 		}
; 205  : #endif
; 206  : 		RealTimeToSATime(&SaTime);

  00096	68 00 00 00 00	 push	 OFFSET ?SaTime@@3UtagLSTIME@@A ; SaTime
  0009b	e8 00 00 00 00	 call	 ?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z ; RealTimeToSATime

; 207  : 		float satime = SaTime.hour * 24 / 1200;
; 208  : 
; 209  : 		void LSTimeToRealTime(LSTIME *lstime, long *t);
; 210  : 		long t;
; 211  : 		LSTimeToRealTime(&SaTime,&t);

  000a0	8d 85 dc fb ff
	ff		 lea	 eax, DWORD PTR _t$2[ebp]
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ?SaTime@@3UtagLSTIME@@A ; SaTime
  000ac	e8 00 00 00 00	 call	 ?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z ; LSTimeToRealTime

; 212  : 
; 213  : 		DispBuffer.DispCnt = 0;

  000b1	33 c0		 xor	 eax, eax
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b6	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 214  : 		FontCnt = 0;

  000bc	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 215  : 
; 216  : 		if (!offlineFlag)

  000c1	39 05 00 00 00
	00		 cmp	 DWORD PTR ?offlineFlag@@3HA, eax ; offlineFlag
  000c7	75 05		 jne	 SHORT $LN15@GameMain

; 217  : 			networkLoop();

  000c9	e8 00 00 00 00	 call	 ?networkLoop@@YAXXZ	; networkLoop
$LN15@GameMain:

; 218  : 
; 219  : 		cdda_play(cdda_no);

  000ce	ff 35 00 00 00
	00		 push	 DWORD PTR ?cdda_no@@3HA	; cdda_no
  000d4	e8 00 00 00 00	 call	 ?cdda_play@@YA_NH@Z	; cdda_play
  000d9	83 c4 04	 add	 esp, 4

; 220  : 		joy_read();

  000dc	e8 00 00 00 00	 call	 ?joy_read@@YAXXZ	; joy_read

; 221  : #if 1
; 222  : 		if (joy_trg[1] & JOY_F12) {

  000e1	f7 05 04 00 00
	00 00 08 00 00	 test	 DWORD PTR ?joy_trg@@3PAKA+4, 2048 ; 00000800H
  000eb	74 24		 je	 SHORT $LN118@GameMain

; 223  : 			static unsigned int prePushTime = 0;
; 224  : 			if (prePushTime + 500 <= TimeGetTime()) {

  000ed	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?prePushTime@?P@??GameMain@@YAHXZ@4IA
  000f8	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  000fe	3b c8		 cmp	 ecx, eax
  00100	77 0f		 ja	 SHORT $LN118@GameMain

; 225  : 				snapShot();

  00102	e8 00 00 00 00	 call	 ?snapShot@@YAXXZ	; snapShot

; 226  : 				prePushTime = TimeGetTime();

  00107	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0010c	a3 00 00 00 00	 mov	 DWORD PTR ?prePushTime@?P@??GameMain@@YAHXZ@4IA, eax
$LN118@GameMain:

; 227  : 			}
; 228  : 		}
; 229  : #endif
; 230  : 		if (joy_trg[1] & JOY_F11)

  00111	f7 05 04 00 00
	00 00 04 00 00	 test	 DWORD PTR ?joy_trg@@3PAKA+4, 1024 ; 00000400H
  0011b	74 12		 je	 SHORT $LN18@GameMain

; 231  : 			nameOverTheHeadFlag = !nameOverTheHeadFlag;

  0011d	33 c0		 xor	 eax, eax
  0011f	66 39 05 00 00
	00 00		 cmp	 WORD PTR ?nameOverTheHeadFlag@@3FA, ax ; nameOverTheHeadFlag
  00126	0f 94 c0	 sete	 al
  00129	66 a3 00 00 00
	00		 mov	 WORD PTR ?nameOverTheHeadFlag@@3FA, ax ; nameOverTheHeadFlag
$LN18@GameMain:

; 232  : 
; 233  : 		Process();

  0012f	e8 00 00 00 00	 call	 ?Process@@YAXXZ		; Process

; 234  : 
; 235  : 		void Â±èÂπïÊñáÂ≠óÁÇπÂáª();
; 236  : 		Â±èÂπïÊñáÂ≠óÁÇπÂáª();

  00134	e8 00 00 00 00	 call	 ??ÿ≠Ÿ˛ÌÆÔ√?@@YAXXZ	; ?ÿ≠Ÿ˛ÌÆÔ√?

; 237  : 
; 238  : 
; 239  : 		MouseProc();

  00139	e8 00 00 00 00	 call	 ?MouseProc@@YAXXZ	; MouseProc

; 240  : 
; 241  : 
; 242  : #ifdef _SURFACE_ANIM
; 243  : 		AniProc();

  0013e	e8 00 00 00 00	 call	 ?AniProc@@YAXXZ		; AniProc

; 244  : #endif
; 245  : #ifdef _NB_ÂÖ¨ÂëäÁ≥ªÁªü
; 246  : 		if (ProcNo == PROC_GAME) {

  00143	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?ProcNo@@3IA, 9 ; ProcNo
  0014a	75 0f		 jne	 SHORT $LN20@GameMain

; 247  : 			if (!actBtn) {

  0014c	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?actBtn@@3FA, 0 ; actBtn
  00154	75 05		 jne	 SHORT $LN20@GameMain

; 248  : 				announce();

  00156	e8 00 00 00 00	 call	 ?announce@@YAXXZ	; announce
$LN20@GameMain:

; 249  : 			}
; 250  : 		}
; 251  : #endif
; 252  : 		SortDispBuffer();

  0015b	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 253  : 		HitMouseCursor();

  00160	e8 00 00 00 00	 call	 ?HitMouseCursor@@YAXXZ	; HitMouseCursor

; 254  : 		PaletteProc();

  00165	e8 00 00 00 00	 call	 ?PaletteProc@@YAXXZ	; PaletteProc

; 255  : #ifdef _NB_Êñ≠Á∫øËá™Âä®ÈáçËøû
; 256  : 		static int ÈáçÊñ∞ÁôªÈôÜÂéüÂú∞ÂºÄÂßãÊó∂Èó¥ = 0;
; 257  : 		static int ÈáçÊñ∞ÁôªÈôÜAIÂºÄÂßãÊó∂Èó¥ = 0;
; 258  : 		static int ÈáçÊñ∞ÁôªÈôÜÊñπÂêëÂºÄÂßãÊó∂Èó¥ = 0;
; 259  : 		static int ÈáçÊñ∞ÁôªÈôÜÁªÑÈòüÂºÄÂßãÊó∂Èó¥ = 0;
; 260  : 		static int ÈáçÊñ∞ÁôªÈôÜÂñäËØùÂºÄÂßãÊó∂Èó¥ = 0;
; 261  : 		extern int ÊòØÂê¶ÈáçÁôªÊàòÊñó‰∫Ü;
; 262  : 		extern int ÊòØÂê¶ÈáçÁôª‰∫∫Áâ©ÊñπÂêë;
; 263  : 		extern int ÊòØÂê¶ÈáçÁôªAIÊ®°Âºè;
; 264  : 		extern int ÊòØÂê¶ÈáçÁôªÁªÑÈòü;
; 265  : 		extern int ÊòØÂê¶ÈáçÁôªÂñäËØù;
; 266  : 		static int ÂºÄÁªÑÈòüÂºÄÂßãÊó∂Èó¥ = 0;
; 267  : 
; 268  : 		if (ProcNo == PROC_GAME){

  0016a	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?ProcNo@@3IA, 9 ; ProcNo
  00171	0f 85 05 03 00
	00		 jne	 $LN41@GameMain

; 269  : 			if (PcLanded.ÈòüÊ®° == 0){

  00177	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+4, 0
  0017e	75 30		 jne	 SHORT $LN22@GameMain

; 270  : 				if (ÊòØÂê¶ÈáçÁôªAIÊ®°Âºè){

  00180	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?„¿‹˙ÒÏ‘ÙAIŸº„“@@3HA, 0 ; „¿‹˙ÒÏ‘ÙAIŸº„“
  00187	74 1d		 je	 SHORT $LN119@GameMain

; 271  : 					if (ÊòØÂê¶ÈáçÂºÄÁôªÁªÑÈòü_1){

  00189	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?„¿‹˙ÒÏ?‘Ù??_1@@3HA, 0 ; „¿‹˙ÒÏ?‘Ù??_1
  00190	74 14		 je	 SHORT $LN119@GameMain

; 272  : 						ÊòØÂê¶ÈáçÂºÄÁôªÁªÑÈòü_1 = FALSE;

  00192	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?„¿‹˙ÒÏ?‘Ù??_1@@3HA, 0 ; „¿‹˙ÒÏ?‘Ù??_1

; 273  : 						ÂºÄÁªÑÈòüÂºÄÂßãÊó∂Èó¥ = TimeGetTime();

  0019c	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  001a1	a3 00 00 00 00	 mov	 DWORD PTR ?????„∑??@?6??GameMain@@YAHXZ@4HA, eax
$LN119@GameMain:

; 274  : 					}
; 275  : 				}
; 276  : 				if (partyModeFlag){//Â§ö‰∏Ä‰∫∫ÁöÑÊó∂ÂÄôÂàôÁôªÈôÜ

  001a6	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?partyModeFlag@@3FA, 0 ; partyModeFlag
  001ae	74 1d		 je	 SHORT $LN120@GameMain
$LN22@GameMain:

; 277  : 					if (ÊòØÂê¶ÈáçÁôªÊàòÊñó‰∫Ü){
; 278  : 						ÊòØÂê¶ÈáçÁôªÊàòÊñó‰∫Ü = FALSE;
; 279  : 						ÈáçÊñ∞ÁôªÈôÜÂéüÂú∞ÂºÄÂßãÊó∂Èó¥ = TimeGetTime();
; 280  : 					}
; 281  : 				}
; 282  : 			}
; 283  : 			else{
; 284  : 				if (ÊòØÂê¶ÈáçÁôªÊàòÊñó‰∫Ü){
; 285  : 					ÊòØÂê¶ÈáçÁôªÊàòÊñó‰∫Ü = FALSE;
; 286  : 					ÈáçÊñ∞ÁôªÈôÜÂéüÂú∞ÂºÄÂßãÊó∂Èó¥ = TimeGetTime();
; 287  : 				}
; 288  : 			}
; 289  : 			if (ÂºÄÁªÑÈòüÂºÄÂßãÊó∂Èó¥){

  001b0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?„¿‹˙ÒÏ‘Ù?‘‡÷ı@@3HA, 0 ; „¿‹˙ÒÏ‘Ù?‘‡÷ı
  001b7	74 14		 je	 SHORT $LN120@GameMain
  001b9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?„¿‹˙ÒÏ‘Ù?‘‡÷ı@@3HA, 0 ; „¿‹˙ÒÏ‘Ù?‘‡÷ı
  001c3	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  001c8	a3 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?Í´Ú¢?„∑??@?6??GameMain@@YAHXZ@4HA, eax
$LN120@GameMain:
  001cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?????„∑??@?6??GameMain@@YAHXZ@4HA, 0
  001d4	74 39		 je	 SHORT $LN122@GameMain

; 290  : 				if (TimeGetTime() > ÂºÄÁªÑÈòüÂºÄÂßãÊó∂Èó¥ + 500){

  001d6	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  001db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?????„∑??@?6??GameMain@@YAHXZ@4HA
  001e1	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  001e7	3b c1		 cmp	 eax, ecx
  001e9	76 24		 jbe	 SHORT $LN122@GameMain

; 291  : 					extern unsigned int sockfd;
; 292  : 					if(!pc.etcFlag &PC_ETCFLAG_PARTY){

  001eb	66 83 3d a8 00
	00 00 00	 cmp	 WORD PTR ?pc@@3UPC@@A+168, 0
  001f3	75 1a		 jne	 SHORT $LN122@GameMain

; 293  : 						pc.etcFlag |= PC_ETCFLAG_PARTY;

  001f5	b8 01 00 00 00	 mov	 eax, 1

; 294  : 						lssproto_FS_send(sockfd, pc.etcFlag);

  001fa	50		 push	 eax
  001fb	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00201	66 a3 a8 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+168, ax
  00207	e8 00 00 00 00	 call	 ?lssproto_FS_send@@YAXHH@Z ; lssproto_FS_send
  0020c	83 c4 08	 add	 esp, 8
$LN122@GameMain:

; 295  : 					}
; 296  : 				}
; 297  : 			}
; 298  : 			if (ÈáçÊñ∞ÁôªÈôÜÂéüÂú∞ÂºÄÂßãÊó∂Èó¥){

  0020f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ÒÏ„Ê‘Ù?Í´Ú¢?„∑??@?6??GameMain@@YAHXZ@4HA, 0
  00216	74 33		 je	 SHORT $LN123@GameMain

; 299  : 				if (TimeGetTime() > ÈáçÊñ∞ÁôªÈôÜÂéüÂú∞ÂºÄÂßãÊó∂Èó¥ + 2000){

  00218	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0021d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ÒÏ„Ê‘Ù?Í´Ú¢?„∑??@?6??GameMain@@YAHXZ@4HA
  00223	81 c1 d0 07 00
	00		 add	 ecx, 2000		; 000007d0H
  00229	3b c1		 cmp	 eax, ecx
  0022b	76 1e		 jbe	 SHORT $LN123@GameMain

; 300  : 					ÈáçÊñ∞ÁôªÈôÜÂéüÂú∞ÂºÄÂßãÊó∂Èó¥ = 0;
; 301  : 					extern unsigned int sockfd;
; 302  : 					lssproto_SaMenu_send(sockfd, 1,4,1);

  0022d	6a 01		 push	 1
  0022f	6a 04		 push	 4
  00231	6a 01		 push	 1
  00233	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  00239	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?Í´Ú¢?„∑??@?6??GameMain@@YAHXZ@4HA, 0
  00243	e8 00 00 00 00	 call	 ?lssproto_SaMenu_send@@YAXHHHH@Z ; lssproto_SaMenu_send
  00248	83 c4 10	 add	 esp, 16			; 00000010H
$LN123@GameMain:

; 303  : 				}
; 304  : 			}
; 305  : 			if (ÊòØÂê¶ÈáçÁôªAIÊ®°Âºè){

  0024b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?„¿‹˙ÒÏ‘ÙAIŸº„“@@3HA, 0 ; „¿‹˙ÒÏ‘ÙAIŸº„“
  00252	74 16		 je	 SHORT $LN124@GameMain

; 306  : 				ÈáçÊñ∞ÁôªÈôÜAIÂºÄÂßãÊó∂Èó¥ = TimeGetTime();

  00254	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00259	a3 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?AI?„∑??@?6??GameMain@@YAHXZ@4HA, eax

; 307  : 				ÊòØÂê¶ÈáçÁôªAIÊ®°Âºè = FALSE;

  0025e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?„¿‹˙ÒÏ‘ÙAIŸº„“@@3HA, 0 ; „¿‹˙ÒÏ‘ÙAIŸº„“
  00268	eb 05		 jmp	 SHORT $LN34@GameMain
$LN124@GameMain:

; 303  : 				}
; 304  : 			}
; 305  : 			if (ÊòØÂê¶ÈáçÁôªAIÊ®°Âºè){

  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ÒÏ„Ê‘Ù?AI?„∑??@?6??GameMain@@YAHXZ@4HA
$LN34@GameMain:

; 308  : 			}
; 309  : 			if (ÈáçÊñ∞ÁôªÈôÜAIÂºÄÂßãÊó∂Èó¥){

  0026f	85 c0		 test	 eax, eax
  00271	74 5d		 je	 SHORT $LN125@GameMain

; 310  : 				if (TimeGetTime() > ÈáçÊñ∞ÁôªÈôÜAIÂºÄÂßãÊó∂Èó¥ + 500){

  00273	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00278	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ÒÏ„Ê‘Ù?AI?„∑??@?6??GameMain@@YAHXZ@4HA
  0027e	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  00284	3b c1		 cmp	 eax, ecx
  00286	76 48		 jbe	 SHORT $LN125@GameMain

; 311  : 					ÈáçÊñ∞ÁôªÈôÜAIÂºÄÂßãÊó∂Èó¥ = 0;
; 312  : 					AI = AI_SELECT;
; 313  : 					StockChatBufferLine("ÂºÄÂêØÔº°Ôº©Ê®°ÂºèÔºÅ", FONT_PAL_RED);

  00288	6a 00		 push	 0
  0028a	6a 06		 push	 6
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CNEFEEOF@?$DP?$DP?$KD?A?$KD?I?Y?$LM?c?R?$KD?$KB@
  00291	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?AI?„∑??@?6??GameMain@@YAHXZ@4HA, 0
  0029b	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?AI@@3HA, 3	; AI
  002a5	e8 00 00 00 00	 call	 ?StockChatBufferLine@@YAXPADEH@Z ; StockChatBufferLine

; 314  : 					pc.etcFlag |= PC_AI_MOD;

  002aa	66 a1 a8 00 00
	00		 mov	 ax, WORD PTR ?pc@@3UPC@@A+168
  002b0	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  002b5	66 0b c1	 or	 ax, cx
  002b8	66 a3 a8 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+168, ax
  002be	0f b7 c0	 movzx	 eax, ax

; 315  : 					lssproto_FS_send(sockfd, pc.etcFlag);

  002c1	50		 push	 eax
  002c2	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  002c8	e8 00 00 00 00	 call	 ?lssproto_FS_send@@YAXHH@Z ; lssproto_FS_send
  002cd	83 c4 14	 add	 esp, 20			; 00000014H
$LN125@GameMain:

; 316  : 				}
; 317  : 			}
; 318  : 			if (ÊòØÂê¶ÈáçÁôª‰∫∫Áâ©ÊñπÂêë){

  002d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?„¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ@@3HA, 0 ; „¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ
  002d7	74 19		 je	 SHORT $LN126@GameMain

; 319  : 				ÊòØÂê¶ÈáçÁôª‰∫∫Áâ©ÊñπÂêë = FALSE;

  002d9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?„¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ@@3HA, 0 ; „¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ

; 320  : 				ÈáçÊñ∞ÁôªÈôÜÊñπÂêëÂºÄÂßãÊó∂Èó¥ = TimeGetTime();

  002e3	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  002e8	8b d0		 mov	 edx, eax
  002ea	89 15 00 00 00
	00		 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?€∞˙æ?„∑??@?6??GameMain@@YAHXZ@4HA, edx
  002f0	eb 06		 jmp	 SHORT $LN37@GameMain
$LN126@GameMain:

; 316  : 				}
; 317  : 			}
; 318  : 			if (ÊòØÂê¶ÈáçÁôª‰∫∫Áâ©ÊñπÂêë){

  002f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ÒÏ„Ê‘Ù?€∞˙æ?„∑??@?6??GameMain@@YAHXZ@4HA
$LN37@GameMain:

; 321  : 			}
; 322  : 			if (ÈáçÊñ∞ÁôªÈôÜÊñπÂêëÂºÄÂßãÊó∂Èó¥){

  002f8	85 d2		 test	 edx, edx
  002fa	74 65		 je	 SHORT $LN127@GameMain

; 323  : 				if (TimeGetTime() > ÈáçÊñ∞ÁôªÈôÜÊñπÂêëÂºÄÂßãÊó∂Èó¥ + 500){

  002fc	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00301	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ÒÏ„Ê‘Ù?€∞˙æ?„∑??@?6??GameMain@@YAHXZ@4HA
  00307	8d 8a f4 01 00
	00		 lea	 ecx, DWORD PTR [edx+500]
  0030d	3b c1		 cmp	 eax, ecx
  0030f	76 50		 jbe	 SHORT $LN127@GameMain

; 324  : 					ÈáçÊñ∞ÁôªÈôÜÊñπÂêëÂºÄÂßãÊó∂Èó¥ = 0;
; 325  : 					char dir2[2];
; 326  : 					setPcDir(PcLanded.‰∫∫Áâ©ÊñπÂêë);

  00311	ff 35 18 00 00
	00		 push	 DWORD PTR ?PcLanded@@3ULanded@@A+24
  00317	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?€∞˙æ?„∑??@?6??GameMain@@YAHXZ@4HA, 0
  00321	e8 00 00 00 00	 call	 ?setPcDir@@YAXH@Z	; setPcDir

; 327  : 					dir2[0] = cnvServDir(PcLanded.‰∫∫Áâ©ÊñπÂêë, 1);

  00326	6a 01		 push	 1
  00328	ff 35 18 00 00
	00		 push	 DWORD PTR ?PcLanded@@3ULanded@@A+24
  0032e	e8 00 00 00 00	 call	 ?cnvServDir@@YADHH@Z	; cnvServDir
  00333	88 85 e8 fb ff
	ff		 mov	 BYTE PTR _dir2$4[ebp], al

; 328  : 					dir2[1] = '\0';
; 329  : 					walkSendForServer(nowGx, nowGy, dir2);

  00339	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _dir2$4[ebp]
  0033f	50		 push	 eax
  00340	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  00346	c6 85 e9 fb ff
	ff 00		 mov	 BYTE PTR _dir2$4[ebp+1], 0
  0034d	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  00353	e8 00 00 00 00	 call	 ?walkSendForServer@@YAXHHPAD@Z ; walkSendForServer
  00358	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ÒÏ„Ê‘Ù?€∞˙æ?„∑??@?6??GameMain@@YAHXZ@4HA
  0035e	83 c4 18	 add	 esp, 24			; 00000018H
$LN127@GameMain:

; 330  : 				}
; 331  : 			}
; 332  : 			extern int Ëá™Âä®ÁôªÈôÜÊòØÂê¶ÂºÄÂêØ;
; 333  : 			if (ÊòØÂê¶ÈáçÁôªÁªÑÈòü&&!ÊòØÂê¶ÈáçÁôª‰∫∫Áâ©ÊñπÂêë&&!ÈáçÊñ∞ÁôªÈôÜÊñπÂêëÂºÄÂßãÊó∂Èó¥&&!partyModeFlag){

  00361	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?„¿‹˙ÒÏ‘Ù??@@3HA, 0 ; „¿‹˙ÒÏ‘Ù??
  00368	0f 84 fa 00 00
	00		 je	 $LN40@GameMain
  0036e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?„¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ@@3HA, 0 ; „¿‹˙ÒÏ‘ÙÏ—⁄™€∞˙æ
  00375	0f 85 ed 00 00
	00		 jne	 $LN40@GameMain
  0037b	85 d2		 test	 edx, edx
  0037d	0f 85 e5 00 00
	00		 jne	 $LN40@GameMain
  00383	66 39 15 00 00
	00 00		 cmp	 WORD PTR ?partyModeFlag@@3FA, dx ; partyModeFlag
  0038a	0f 85 d8 00 00
	00		 jne	 $LN40@GameMain

; 334  : 				if (!ÈáçÊñ∞ÁôªÈôÜÁªÑÈòüÂºÄÂßãÊó∂Èó¥){

  00390	39 15 00 00 00
	00		 cmp	 DWORD PTR ?ÒÏ„Ê‘Ù????„∑??@?6??GameMain@@YAHXZ@4HA, edx
  00396	75 0c		 jne	 SHORT $LN42@GameMain

; 335  : 					ÈáçÊñ∞ÁôªÈôÜÁªÑÈòüÂºÄÂßãÊó∂Èó¥ = TimeGetTime();

  00398	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0039d	a3 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù????„∑??@?6??GameMain@@YAHXZ@4HA, eax

; 336  : 				}

  003a2	eb 3b		 jmp	 SHORT $LN44@GameMain
$LN42@GameMain:

; 337  : 				else{
; 338  : 					if (TimeGetTime() > ÈáçÊñ∞ÁôªÈôÜÁªÑÈòüÂºÄÂßãÊó∂Èó¥ + FIELD_BTN_PUSH_WAIT){

  003a4	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  003a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ÒÏ„Ê‘Ù????„∑??@?6??GameMain@@YAHXZ@4HA
  003af	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  003b5	3b c1		 cmp	 eax, ecx
  003b7	76 26		 jbe	 SHORT $LN44@GameMain

; 339  : 						ÈáçÊñ∞ÁôªÈôÜÁªÑÈòüÂºÄÂßãÊó∂Èó¥ = 0;
; 340  : 						lssproto_PR_send(sockfd, nowGx, nowGy, 1);

  003b9	6a 01		 push	 1
  003bb	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  003c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù????„∑??@?6??GameMain@@YAHXZ@4HA, 0
  003cb	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  003d1	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  003d7	e8 00 00 00 00	 call	 ?lssproto_PR_send@@YAXHHHH@Z ; lssproto_PR_send
  003dc	83 c4 10	 add	 esp, 16			; 00000010H
$LN44@GameMain:

; 341  : 					}
; 342  : 				}
; 343  : 				if (ÊòØÂê¶ÈáçÁôªÂñäËØù){

  003df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?„¿‹˙ÒÏ‘Ù˘‚?@@3HA, 0 ; „¿‹˙ÒÏ‘Ù˘‚?
  003e6	0f 84 90 00 00
	00		 je	 $LN41@GameMain

; 344  : 					if (!ÈáçÊñ∞ÁôªÈôÜÂñäËØùÂºÄÂßãÊó∂Èó¥){

  003ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ÒÏ„Ê‘Ù?˘‚??„∑??@?6??GameMain@@YAHXZ@4HA, 0
  003f3	75 0c		 jne	 SHORT $LN46@GameMain

; 345  : 						ÈáçÊñ∞ÁôªÈôÜÂñäËØùÂºÄÂßãÊó∂Èó¥ = TimeGetTime();

  003f5	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  003fa	a3 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?˘‚??„∑??@?6??GameMain@@YAHXZ@4HA, eax

; 346  : 					}

  003ff	eb 7b		 jmp	 SHORT $LN41@GameMain
$LN46@GameMain:

; 347  : 					else{
; 348  : 						if (TimeGetTime() > ÈáçÊñ∞ÁôªÈôÜÂñäËØùÂºÄÂßãÊó∂Èó¥ + 1000 * 60){

  00401	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00406	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ÒÏ„Ê‘Ù?˘‚??„∑??@?6??GameMain@@YAHXZ@4HA
  0040c	81 c1 60 ea 00
	00		 add	 ecx, 60000		; 0000ea60H
  00412	3b c1		 cmp	 eax, ecx
  00414	76 66		 jbe	 SHORT $LN41@GameMain

; 349  : 							ÈáçÊñ∞ÁôªÈôÜÂñäËØùÂºÄÂßãÊó∂Èó¥ = 0;
; 350  : 							char m[1024];
; 351  : 							sprintf_s(m, "P|Âì™‰ΩçÂ•ΩÂøÉ‰∫∫ËÉΩÂ∏¶ÊàëÁªÉÁ∫ßÂìü„ÄÇÂàöÊéâÁ∫øÈáçÊñ∞ÁôªÈôÜÔºåÊ±ÇÂ•ΩÂøÉ‰∫∫Á´ôÊàëÈù¢ÂâçÂ∏¶ÊàëÁªÉÁ∫ßÔºÅ‰ΩçÁΩÆ(%d,%d)", nowGx, nowGy);

  00416	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  0041c	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _m$5[ebp]
  00422	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?˘‚??„∑??@?6??GameMain@@YAHXZ@4HA, 0
  0042c	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  00432	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@OJCAAKED@P?$HM?$DP?j?H?$PL?$LP?c?$PN?l?Q?R?v?$DP?d?$LC?$DP?$DP?$DP?$KB?$KD?$DP?S?$PM?$DP?q?l?c?f?T?t@
  00437	50		 push	 eax
  00438	e8 00 00 00 00	 call	 ??$sprintf_s@$0EAA@@@YAHAAY0EAA@DPBDZZ ; sprintf_s<1024>

; 352  : 							lssproto_TK_send(sockfd, nowGx, nowGy, m, 0, NowMaxVoice);

  0043d	ff 35 00 00 00
	00		 push	 DWORD PTR ?NowMaxVoice@@3HA ; NowMaxVoice
  00443	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _m$5[ebp]
  00449	6a 00		 push	 0
  0044b	50		 push	 eax
  0044c	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGy@@3HA	; nowGy
  00452	ff 35 00 00 00
	00		 push	 DWORD PTR ?nowGx@@3HA	; nowGx
  00458	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0045e	e8 00 00 00 00	 call	 ?lssproto_TK_send@@YAXHHHPADHH@Z ; lssproto_TK_send
  00463	83 c4 28	 add	 esp, 40			; 00000028H

; 353  : 						}
; 354  : 					}
; 355  : 				}
; 356  : 			}

  00466	eb 14		 jmp	 SHORT $LN41@GameMain
$LN40@GameMain:

; 357  : 			else{
; 358  : 				ÈáçÊñ∞ÁôªÈôÜÁªÑÈòüÂºÄÂßãÊó∂Èó¥ = 0;

  00468	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù????„∑??@?6??GameMain@@YAHXZ@4HA, 0

; 359  : 				ÈáçÊñ∞ÁôªÈôÜÂñäËØùÂºÄÂßãÊó∂Èó¥ = 0;

  00472	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ÒÏ„Ê‘Ù?˘‚??„∑??@?6??GameMain@@YAHXZ@4HA, 0
$LN41@GameMain:

; 360  : 			}
; 361  : 		}
; 362  : 		extern int Ëá™Âä®ÁôªÈôÜÊòØÂê¶ÂºÄÂêØ;
; 363  : 		if (ProcNo >= 1 && ProcNo <= 3){

  0047c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ProcNo@@3IA ; ProcNo
  00481	48		 dec	 eax
  00482	83 f8 02	 cmp	 eax, 2
  00485	77 45		 ja	 SHORT $LN130@GameMain

; 364  : 			if (PcLanded.Â§ßÂå∫ != -1 && PcLanded.Â∞èÂå∫ != -1 && PcLanded.‰∫∫Áâ© != -1){

  00487	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A, -1
  0048e	74 3c		 je	 SHORT $LN130@GameMain
  00490	83 3d 08 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+8, -1
  00497	74 33		 je	 SHORT $LN130@GameMain
  00499	83 3d 0c 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+12, -1
  004a0	74 2a		 je	 SHORT $LN130@GameMain

; 365  : 				if (Ëá™Âä®ÁôªÈôÜÊòØÂê¶ÂºÄÂêØ)

  004a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?Ìª?‘Ù?„¿‹˙??@@3HA, 0 ; Ìª?‘Ù?„¿‹˙??
  004a9	6a 00		 push	 0
  004ab	74 07		 je	 SHORT $LN51@GameMain

; 366  : 					StockFontBuffer(10, 550, FONT_PRIO_FRONT, FONT_PAL_RED, "Ê≠£Âú®Ëá™Âä®ÁôªÈôÜ‰∏≠,ÊåâF9ÂèØÂÅúÊ≠¢Ëá™Âä®ÁôªÈôÜÔºÅ", 0);

  004ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CMHGGOJD@?o?a?n?$KE?m?$LL?$DP?T?t?$DP?q?i?0?d?NF9?J?$KG?o?N?r?$KN?m?$LL?$DP?T?t?$DP?$KD?$KB@
  004b2	eb 05		 jmp	 SHORT $LN140@GameMain
$LN51@GameMain:

; 367  : 				else
; 368  : 					StockFontBuffer(10, 550, FONT_PRIO_FRONT, FONT_PAL_RED, "ÊåâF9ÂèØËá™Âä®ÁôªÈôÜÊ∏∏ÊàèÔºÅ", 0);

  004b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IEKMBCNM@?d?NF9?J?$KG?m?$LL?$DP?T?t?$DP?j?$PN?$DP?$KD?$KB@
$LN140@GameMain:

; 369  : 			}
; 370  : 		}
; 371  : 		if (joy_trg[1] & JOY_F9&&ProcNo >= 1 && ProcNo <= 3)

  004b9	6a 06		 push	 6
  004bb	6a 01		 push	 1
  004bd	68 26 02 00 00	 push	 550			; 00000226H
  004c2	6a 0a		 push	 10			; 0000000aH
  004c4	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  004c9	83 c4 18	 add	 esp, 24			; 00000018H
$LN130@GameMain:
  004cc	f7 05 04 00 00
	00 00 01 00 00	 test	 DWORD PTR ?joy_trg@@3PAKA+4, 256 ; 00000100H
  004d6	0f 84 40 01 00
	00		 je	 $LN63@GameMain
  004dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ProcNo@@3IA ; ProcNo
  004e1	48		 dec	 eax
  004e2	83 f8 02	 cmp	 eax, 2
  004e5	77 3b		 ja	 SHORT $LN117@GameMain

; 372  : 		{
; 373  : 			if (Ëá™Âä®ÁôªÈôÜÊòØÂê¶ÂºÄÂêØ) Ëá™Âä®ÁôªÈôÜÊòØÂê¶ÂºÄÂêØ = !Ëá™Âä®ÁôªÈôÜÊòØÂê¶ÂºÄÂêØ;

  004e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Ìª?‘Ù?„¿‹˙??@@3HA ; Ìª?‘Ù?„¿‹˙??
  004ec	85 c0		 test	 eax, eax
  004ee	74 0c		 je	 SHORT $LN54@GameMain
  004f0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?Ìª?‘Ù?„¿‹˙??@@3HA, 0 ; Ìª?‘Ù?„¿‹˙??
  004fa	eb 26		 jmp	 SHORT $LN117@GameMain
$LN54@GameMain:

; 374  : 			else{
; 375  : 				if (PcLanded.Â§ßÂå∫ != -1 && PcLanded.Â∞èÂå∫ != -1 && PcLanded.‰∫∫Áâ© != -1)

  004fc	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A, -1
  00503	74 1d		 je	 SHORT $LN117@GameMain
  00505	83 3d 08 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+8, -1
  0050c	74 14		 je	 SHORT $LN117@GameMain
  0050e	83 3d 0c 00 00
	00 ff		 cmp	 DWORD PTR ?PcLanded@@3ULanded@@A+12, -1
  00515	b9 01 00 00 00	 mov	 ecx, 1
  0051a	0f 45 c1	 cmovne	 eax, ecx
  0051d	a3 00 00 00 00	 mov	 DWORD PTR ?Ìª?‘Ù?„¿‹˙??@@3HA, eax ; Ìª?‘Ù?„¿‹˙??
$LN117@GameMain:

; 376  : 					Ëá™Âä®ÁôªÈôÜÊòØÂê¶ÂºÄÂêØ = TRUE;
; 377  : 			}
; 378  : 		}
; 379  : #endif
; 380  : #ifdef _STONDEBUG_
; 381  : 		if (joy_trg[1] & JOY_F9  && WindowMode) {
; 382  : #else			
; 383  : 		if (joy_trg[1] & JOY_F9  && WindowMode && LowResoCmdFlag) {

  00522	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?WindowMode@@3HA, 0 ; WindowMode
  00529	0f 84 ed 00 00
	00		 je	 $LN63@GameMain
  0052f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?LowResoCmdFlag@@3HA, 0 ; LowResoCmdFlag
  00536	0f 84 e0 00 00
	00		 je	 $LN63@GameMain

; 384  : #endif
; 385  : 
; 386  : 			if (BackBufferDrawType != DRAW_BACK_PRODUCE) {

  0053c	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  00543	0f 84 d3 00 00
	00		 je	 $LN63@GameMain

; 387  : 				if (lpDraw != NULL) {

  00549	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A, 0 ; lpDraw
  00550	0f 84 c6 00 00
	00		 je	 $LN63@GameMain

; 388  : 					// DirectDraw ?Óü¥
; 389  : 					ReleaseDirectDraw();

  00556	e8 00 00 00 00	 call	 ?ReleaseDirectDraw@@YAXXZ ; ReleaseDirectDraw

; 390  : 					DeleteObject(hFont);

  0055b	ff 35 00 00 00
	00		 push	 DWORD PTR ?hFont@@3PAUHFONT__@@A ; hFont
  00561	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 391  : 					SetResoMode(((ResoMode + 1) % 5));

  00567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ResoMode@@3HA ; ResoMode
  0056c	b9 05 00 00 00	 mov	 ecx, 5
  00571	40		 inc	 eax
  00572	99		 cdq
  00573	f7 f9		 idiv	 ecx
  00575	52		 push	 edx
  00576	e8 00 00 00 00	 call	 ?SetResoMode@@YAXH@Z	; SetResoMode

; 392  : 					InitDirectDraw();

  0057b	e8 00 00 00 00	 call	 ?InitDirectDraw@@YAHXZ	; InitDirectDraw

; 393  : 					InitOffScreenSurface();

  00580	e8 00 00 00 00	 call	 ?InitOffScreenSurface@@YAHXZ ; InitOffScreenSurface

; 394  : 					InitFont(0);

  00585	6a 00		 push	 0
  00587	e8 00 00 00 00	 call	 ?InitFont@@YAXH@Z	; InitFont
  0058c	83 c4 08	 add	 esp, 8

; 395  : 					ChangeWindowMode();

  0058f	e8 00 00 00 00	 call	 ?ChangeWindowMode@@YAXXZ ; ChangeWindowMode

; 396  : 					if (InitPalette() == FALSE) {

  00594	e8 00 00 00 00	 call	 ?InitPalette@@YAHXZ	; InitPalette
  00599	85 c0		 test	 eax, eax
  0059b	75 10		 jne	 SHORT $LN60@GameMain

; 397  : 						PostMessage(hWnd, WM_CLOSE, 0, 0L);

  0059d	50		 push	 eax
  0059e	50		 push	 eax
  0059f	6a 10		 push	 16			; 00000010H
  005a1	ff 35 00 00 00
	00		 push	 DWORD PTR ?hWnd@@3PAUHWND__@@A ; hWnd
  005a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$LN60@GameMain:

; 398  : 					}
; 399  : 					if (ProcNo == PROC_BATTLE) {

  005ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ProcNo@@3IA ; ProcNo
  005b2	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  005b5	75 51		 jne	 SHORT $LN61@GameMain

; 400  : 						DispBuffer.DispCnt = 0;
; 401  : 						FontCnt = 0;
; 402  : 						ReadBattleMap(BattleMapNo);

  005b7	ff 35 00 00 00
	00		 push	 DWORD PTR ?BattleMapNo@@3HA ; BattleMapNo
  005bd	33 c0		 xor	 eax, eax
  005bf	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax
  005c5	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt
  005ca	e8 00 00 00 00	 call	 ?ReadBattleMap@@YAHH@Z	; ReadBattleMap
  005cf	83 c4 04	 add	 esp, 4

; 403  : 						ClearBackSurface();

  005d2	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 404  : #ifdef __SKYISLAND
; 405  : 						fastDrawTileFlag = 0;

  005d7	33 c0		 xor	 eax, eax
  005d9	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 406  : 						PutBmp();

  005df	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 407  : 						fastDrawTileFlag = 1;

  005e4	b8 01 00 00 00	 mov	 eax, 1
  005e9	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 408  : #else
; 409  : 						PutBmp();
; 410  : 						lpBattleSurface->BltFast(0, 0, lpDraw->lpBACKBUFFER, NULL, DDBLTFAST_WAIT);
; 411  : #endif
; 412  : 						DispBuffer.DispCnt = 0;

  005ef	33 c0		 xor	 eax, eax
  005f1	66 a3 00 c0 01
	00		 mov	 WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688, ax

; 413  : 						FontCnt = 0;

  005f7	a3 00 00 00 00	 mov	 DWORD PTR ?FontCnt@@3HA, eax ; FontCnt

; 414  : 						NowTime = TimeGetTime();

  005fc	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00601	a3 00 00 00 00	 mov	 DWORD PTR ?NowTime@@3KA, eax ; NowTime

; 415  : 					}

  00606	eb 14		 jmp	 SHORT $LN63@GameMain
$LN61@GameMain:

; 416  : 					else
; 417  : 						if (fastDrawTile && ProcNo == PROC_GAME) {

  00608	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?fastDrawTile@@3FB, 0 ; fastDrawTile
  00610	74 0a		 je	 SHORT $LN63@GameMain
  00612	83 f8 09	 cmp	 eax, 9
  00615	75 05		 jne	 SHORT $LN63@GameMain

; 418  : 							repairMap();

  00617	e8 00 00 00 00	 call	 ?repairMap@@YAXXZ	; repairMap
$LN63@GameMain:

; 419  : 						}
; 420  : 				}
; 421  : 			}
; 422  : 		}
; 423  : 
; 424  : 
; 425  : #ifdef __NEW_CLIENT_MEM
; 426  : #ifndef __NEW_CLIENT_ONLY_WRITE
; 427  : 		static DWORD reset = TimeGetTime() + 120000;

  0061c	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR tv1190[ebp]
  00622	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?6??GameMain@@YAHXZ@4HA
  00627	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0062d	0f 8f c8 04 00
	00		 jg	 $LN145@GameMain
$LN4@GameMain:

; 428  : 		static DWORD flip = 1;
; 429  : 		DWORD oldprotect;
; 430  : 		if (reset < TimeGetTime()) {

  00633	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00638	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?reset@?6??GameMain@@YAHXZ@4KA
  0063e	3b c8		 cmp	 ecx, eax
  00640	0f 83 05 01 00
	00		 jae	 $LN69@GameMain

; 431  : 			char *newread, *newwrite;
; 432  : 			reset += 120000;
; 433  : 			flip = (flip + 1) & 1;

  00646	a1 00 00 00 00	 mov	 eax, DWORD PTR ?flip@?6??GameMain@@YAHXZ@4KA
  0064b	81 c1 c0 d4 01
	00		 add	 ecx, 120000		; 0001d4c0H

; 434  : 			if (flip == 1) {

  00651	6a 04		 push	 4
  00653	68 00 10 00 00	 push	 4096			; 00001000H
  00658	48		 dec	 eax
  00659	89 0d 00 00 00
	00		 mov	 DWORD PTR ?reset@?6??GameMain@@YAHXZ@4KA, ecx
  0065f	83 e0 01	 and	 eax, 1
  00662	68 00 40 00 00	 push	 16384			; 00004000H
  00667	a3 00 00 00 00	 mov	 DWORD PTR ?flip@?6??GameMain@@YAHXZ@4KA, eax
  0066c	6a 00		 push	 0
  0066e	74 63		 je	 SHORT $LN65@GameMain

; 435  : 				if ((newread = (char*)VirtualAlloc(NULL, NETBUFSIZ, MEM_COMMIT, PAGE_READWRITE))) {

  00670	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  00676	8b f0		 mov	 esi, eax
  00678	85 f6		 test	 esi, esi
  0067a	0f 84 c5 00 00
	00		 je	 $LN136@GameMain

; 436  : 					if (net_readbuflen) {

  00680	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?net_readbuflen@@3HA, 0 ; net_readbuflen
  00687	74 2f		 je	 SHORT $LN68@GameMain

; 437  : 						VirtualProtect(net_readbuf, NETBUFSIZ, PAGE_READWRITE, &oldprotect);

  00689	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _oldprotect$3[ebp]
  0068f	50		 push	 eax
  00690	6a 04		 push	 4
  00692	68 00 40 00 00	 push	 16384			; 00004000H
  00697	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  0069d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualProtect@16

; 438  : 						CopyMemory(newread, net_readbuf, net_readbuflen);

  006a3	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_readbuflen@@3HA ; net_readbuflen
  006a9	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  006af	56		 push	 esi
  006b0	e8 00 00 00 00	 call	 _memcpy
  006b5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN68@GameMain:

; 439  : 					}
; 440  : 					VirtualFree(net_readbuf, NULL, MEM_RELEASE);

  006b8	68 00 80 00 00	 push	 32768			; 00008000H
  006bd	6a 00		 push	 0
  006bf	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_readbuf@@3PADA ; net_readbuf
  006c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualFree@12

; 441  : 					net_readbuf = newread;

  006cb	89 35 00 00 00
	00		 mov	 DWORD PTR ?net_readbuf@@3PADA, esi ; net_readbuf

; 442  : 					VirtualProtect(net_readbuf, NETBUFSIZ, PAGE_NOACCESS, &oldprotect);
; 443  : 				}
; 444  : 			}

  006d1	eb 5d		 jmp	 SHORT $LN143@GameMain
$LN65@GameMain:

; 445  : 			else {
; 446  : 				if ((newwrite = (char*)VirtualAlloc(NULL, NETBUFSIZ, MEM_COMMIT, PAGE_READWRITE))) {

  006d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  006d9	8b f0		 mov	 esi, eax
  006db	85 f6		 test	 esi, esi
  006dd	74 66		 je	 SHORT $LN136@GameMain

; 447  : 					if (net_writebuflen) {

  006df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?net_writebuflen@@3HA, 0 ; net_writebuflen
  006e6	74 2f		 je	 SHORT $LN70@GameMain

; 448  : 						VirtualProtect(net_writebuf, NETBUFSIZ, PAGE_READWRITE, &oldprotect);

  006e8	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _oldprotect$3[ebp]
  006ee	50		 push	 eax
  006ef	6a 04		 push	 4
  006f1	68 00 40 00 00	 push	 16384			; 00004000H
  006f6	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  006fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualProtect@16

; 449  : 						CopyMemory(newwrite, net_writebuf, net_writebuflen);

  00702	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuflen@@3HA ; net_writebuflen
  00708	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  0070e	56		 push	 esi
  0070f	e8 00 00 00 00	 call	 _memcpy
  00714	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN70@GameMain:

; 450  : 					}
; 451  : 					VirtualFree(net_writebuf, NULL, MEM_RELEASE);

  00717	68 00 80 00 00	 push	 32768			; 00008000H
  0071c	6a 00		 push	 0
  0071e	ff 35 00 00 00
	00		 push	 DWORD PTR ?net_writebuf@@3PADA ; net_writebuf
  00724	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualFree@12

; 452  : 					net_writebuf = newwrite;

  0072a	89 35 00 00 00
	00		 mov	 DWORD PTR ?net_writebuf@@3PADA, esi ; net_writebuf
$LN143@GameMain:

; 453  : 					VirtualProtect(net_writebuf, NETBUFSIZ, PAGE_NOACCESS, &oldprotect);
; 454  : 				}
; 455  : 			}
; 456  : 		}
; 457  : #else
; 458  : 		static DWORD reset = TimeGetTime() + 120000;
; 459  : 		DWORD oldprotect;
; 460  : 		if (reset < TimeGetTime()) {
; 461  : 			char *newwrite;
; 462  : 			reset += 120000;
; 463  : 			if ((newwrite = (char*)VirtualAlloc(NULL, NETBUFSIZ, MEM_COMMIT, PAGE_READWRITE))) {
; 464  : 				VirtualProtect(net_writebuf, NETBUFSIZ, PAGE_READWRITE, &oldprotect);
; 465  : 				CopyMemory(newwrite, net_writebuf, net_writebuflen);
; 466  : 				VirtualFree(net_writebuf, NULL, MEM_RELEASE);
; 467  : 				net_writebuf = newwrite;
; 468  : 				VirtualProtect(net_writebuf, NETBUFSIZ, PAGE_NOACCESS, &oldprotect);
; 469  : 				newwrite = NULL;
; 470  : 			}
; 471  : 		}
; 472  : #endif
; 473  : #endif
; 474  : 
; 475  : #ifdef _STONEAGE_NG
; 476  : 
; 477  : #else
; 478  : 
; 479  : #ifdef _OPTIMIZATIONFLIP_
; 480  : 		if (endProcTime > TimeGetTime())
; 481  : 		{
; 482  : 			//‰øÆÊ≠£ÊúÄÂ§ßË∑≥Â∏ßÊï∞
; 483  : 			if (NoDrawCnt < NO_DRAW_MAX_CNT + skipAmend)
; 484  : 			{
; 485  : 				NoDrawCnt++;
; 486  : 				continue;
; 487  : 			}
; 488  : 			else
; 489  : 			{
; 490  : 				while (endProcTime > TimeGetTime())
; 491  : 				{
; 492  : 					std::this_thread::sleep_for(std::chrono::microseconds(10));
; 493  : 				}
; 494  : 			}
; 495  : 		}
; 496  : #ifdef _MO_SHOW_FPS
; 497  : 		sprintf(sz, "skip frames: %d", skipAmend);
; 498  : 		StockFontBuffer(380, 10, 1, 1, sz, false);
; 499  : #endif
; 500  : 
; 501  : #else
; 502  : 		NowTime = TimeGetTime();//Ëé∑ÂèñÂΩìÂâçÁöÑÊó∂Èó¥ ÊØ´Áßí

  00730	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _oldprotect$3[ebp]
  00736	50		 push	 eax
  00737	6a 01		 push	 1
  00739	68 00 40 00 00	 push	 16384			; 00004000H
  0073e	56		 push	 esi
  0073f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualProtect@16
$LN136@GameMain:
  00745	8b b5 ec fb ff
	ff		 mov	 esi, DWORD PTR _nowttime3$1$[ebp]
$LN69@GameMain:
  0074b	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 503  : 		nowtime = nowttime1;
; 504  : 		//nowtime ^= 0xffffbcde;
; 505  : 		static DWORD OldTime = nowttime1;

  00750	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS1@?6??GameMain@@YAHXZ@4HA
  00756	8b d0		 mov	 edx, eax
  00758	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR tv1190[ebp]
  0075e	89 15 00 00 00
	00		 mov	 DWORD PTR ?NowTime@@3KA, edx ; NowTime
  00764	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[eax]
  0076a	0f 8f d4 03 00
	00		 jg	 $LN146@GameMain
  00770	eb 06		 jmp	 SHORT $LN5@GameMain
$LN132@GameMain:

; 506  : 		if (NowTime > (nowtime + ProcTime)) {

  00772	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?NowTime@@3KA ; NowTime
$LN5@GameMain:
  00778	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ProcTime@@3KA ; ProcTime
  0077d	03 c7		 add	 eax, edi
  0077f	3b d0		 cmp	 edx, eax
  00781	76 5c		 jbe	 SHORT $LN73@GameMain

; 507  : 			//OldTime^= 0x855ff55f;
; 508  : 			if (OldTime != nowtime) {

  00783	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?OldTime@?6??GameMain@@YAHXZ@4KA, edi
  00789	74 54		 je	 SHORT $LN73@GameMain

; 509  : 				OldTime = nowtime;
; 510  : 				if (NoDrawCnt < NO_DRAW_MAX_CNT) {

  0078b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?NoDrawCnt@@3HA ; NoDrawCnt
  00791	89 3d 00 00 00
	00		 mov	 DWORD PTR ?OldTime@?6??GameMain@@YAHXZ@4KA, edi
  00797	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?NO_DRAW_MAX_CNT@@3HA ; NO_DRAW_MAX_CNT
  0079d	7d 40		 jge	 SHORT $LN73@GameMain

; 511  : 					if (NowTime > nowttime3 + 2000) {

  0079f	8d 86 d0 07 00
	00		 lea	 eax, DWORD PTR [esi+2000]
  007a5	3b d0		 cmp	 edx, eax
  007a7	76 20		 jbe	 SHORT $LN74@GameMain

; 512  : 						nowttime3 = NowTime;

  007a9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?SystemTime@@3KA ; SystemTime
  007af	8b f2		 mov	 esi, edx

; 517  : 					nowttime1 = nowtime;
; 518  : 					//_itoa_s( nowtime^0xffffbcde, sz, 10);
; 519  : 					nowtime = 0;
; 520  : 					NoDrawCnt++;

  007b1	41		 inc	 ecx
  007b2	89 b5 ec fb ff
	ff		 mov	 DWORD PTR _nowttime3$1$[ebp], esi

; 521  : 					Sleep(0);

  007b8	6a 00		 push	 0
  007ba	03 fe		 add	 edi, esi
  007bc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?NoDrawCnt@@3HA, ecx ; NoDrawCnt
  007c2	ff d3		 call	 ebx

; 522  : 					continue;

  007c4	e9 fc 02 00 00	 jmp	 $LN110@GameMain
$LN74@GameMain:

; 513  : 						nowtime = NowTime + SystemTime;
; 514  : 					}
; 515  : 					else
; 516  : 						nowtime += (SystemTime);

  007c9	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?SystemTime@@3KA ; SystemTime

; 517  : 					nowttime1 = nowtime;
; 518  : 					//_itoa_s( nowtime^0xffffbcde, sz, 10);
; 519  : 					nowtime = 0;
; 520  : 					NoDrawCnt++;

  007cf	41		 inc	 ecx

; 521  : 					Sleep(0);

  007d0	6a 00		 push	 0
  007d2	89 0d 00 00 00
	00		 mov	 DWORD PTR ?NoDrawCnt@@3HA, ecx ; NoDrawCnt
  007d8	ff d3		 call	 ebx

; 522  : 					continue;

  007da	e9 e6 02 00 00	 jmp	 $LN110@GameMain
$LN73@GameMain:

; 523  : 				}
; 524  : 			}//else
; 525  : 			 //OldTime^= 0x855ff55f;
; 526  : 		}
; 527  : #endif
; 528  : #endif
; 529  : 		nowtime = 0;
; 530  : #ifdef __AI
; 531  : 		if (di_key[DIK_NEXT] & 0x80){

  007df	a0 d1 00 00 00	 mov	 al, BYTE PTR ?di_key@@3PAEA+209
  007e4	84 c0		 test	 al, al
  007e6	0f 89 95 00 00
	00		 jns	 $LN76@GameMain

; 532  : 			di_key[DIK_NEXT] &= ~0x80;
; 533  : 			static DWORD switchmodetime = TimeGetTime();

  007ec	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR tv1190[ebp]
  007f2	24 7f		 and	 al, 127			; 0000007fH
  007f4	a2 d1 00 00 00	 mov	 BYTE PTR ?di_key@@3PAEA+209, al
  007f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS2@?LD@??GameMain@@YAHXZ@4HA
  007fe	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00804	0f 8f 7a 03 00
	00		 jg	 $LN147@GameMain
  0080a	eb 06		 jmp	 SHORT $LN6@GameMain
$LN133@GameMain:

; 534  : 			if ((switchmodetime + 500) < NowTime){

  0080c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?NowTime@@3KA ; NowTime
$LN6@GameMain:
  00812	a1 00 00 00 00	 mov	 eax, DWORD PTR ?switchmodetime@?LD@??GameMain@@YAHXZ@4KA
  00817	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  0081c	3b c2		 cmp	 eax, edx
  0081e	0f 83 f6 00 00
	00		 jae	 $LN82@GameMain

; 535  : 				switchmodetime = NowTime;
; 536  : 				if (AI == AI_SELECT){

  00824	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?AI@@3HA, 3	; AI
  0082b	66 a1 a8 00 00
	00		 mov	 ax, WORD PTR ?pc@@3UPC@@A+168
  00831	89 15 00 00 00
	00		 mov	 DWORD PTR ?switchmodetime@?LD@??GameMain@@YAHXZ@4KA, edx
  00837	75 14		 jne	 SHORT $LN79@GameMain

; 537  : 					AI = AI_NONE;
; 538  : 					pc.etcFlag &= (~PC_AI_MOD);

  00839	b9 ff bf 00 00	 mov	 ecx, 49151		; 0000bfffH
  0083e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI@@3HA, 0	; AI
  00848	66 23 c1	 and	 ax, cx

; 539  : 					lssproto_FS_send(sockfd, pc.etcFlag);
; 540  : 					// ‰øÆÂ§çÊàòÊñóAIËΩ¨Êç¢ÁöÑBUG  AI->Áé©ÂÆ∂
; 541  : #ifdef _FIX_BATTLE_AI
; 542  : 					battleMenuFix();
; 543  : #endif
; 544  : 				}else{

  0084b	eb 12		 jmp	 SHORT $LN141@GameMain
$LN79@GameMain:

; 545  : 					AI = AI_SELECT;
; 546  : 					pc.etcFlag |= PC_AI_MOD;

  0084d	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  00852	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?AI@@3HA, 3	; AI
  0085c	66 0b c1	 or	 ax, cx
$LN141@GameMain:

; 547  : 					lssproto_FS_send(sockfd, pc.etcFlag);
; 548  : 				}
; 549  : 				extern BOOL AI_Save();
; 550  : 				AI_Save();

  0085f	66 a3 a8 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+168, ax
  00865	0f b7 c0	 movzx	 eax, ax
  00868	50		 push	 eax
  00869	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0086f	e8 00 00 00 00	 call	 ?lssproto_FS_send@@YAXHH@Z ; lssproto_FS_send
  00874	83 c4 08	 add	 esp, 8
  00877	e8 00 00 00 00	 call	 ?AI_Save@@YAHXZ		; AI_Save

; 551  : 			}

  0087c	e9 99 00 00 00	 jmp	 $LN82@GameMain
$LN76@GameMain:

; 552  : 		}else if (di_key[DIK_PRIOR] & 0x80){

  00881	a0 c9 00 00 00	 mov	 al, BYTE PTR ?di_key@@3PAEA+201
  00886	84 c0		 test	 al, al
  00888	0f 89 8c 00 00
	00		 jns	 $LN82@GameMain

; 553  : 			di_key[DIK_PRIOR] &= ~0x80;
; 554  : 			static DWORD switchmodetime = TimeGetTime();

  0088e	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR tv1190[ebp]
  00894	24 7f		 and	 al, 127			; 0000007fH
  00896	a2 c9 00 00 00	 mov	 BYTE PTR ?di_key@@3PAEA+201, al
  0089b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS3@?LP@??GameMain@@YAHXZ@4HA
  008a0	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  008a6	0f 8f 1c 03 00
	00		 jg	 $LN148@GameMain
  008ac	eb 06		 jmp	 SHORT $LN7@GameMain
$LN134@GameMain:

; 555  : 			if ((switchmodetime + 500) < NowTime){

  008ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?NowTime@@3KA ; NowTime
$LN7@GameMain:
  008b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?switchmodetime@?LP@??GameMain@@YAHXZ@4KA
  008b9	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  008be	3b c2		 cmp	 eax, edx
  008c0	73 58		 jae	 SHORT $LN82@GameMain

; 556  : 				switchmodetime = NowTime;
; 557  : 				if (AI == AI_SELECT){

  008c2	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?AI@@3HA, 3	; AI
  008c9	66 a1 a8 00 00
	00		 mov	 ax, WORD PTR ?pc@@3UPC@@A+168
  008cf	89 15 00 00 00
	00		 mov	 DWORD PTR ?switchmodetime@?LP@??GameMain@@YAHXZ@4KA, edx
  008d5	75 14		 jne	 SHORT $LN83@GameMain

; 558  : 					AI = AI_NONE;
; 559  : 					// ‰øÆÂ§çÊàòÊñóAIËΩ¨Êç¢ÁöÑBUG  Áé©ÂÆ∂->AI
; 560  : #ifdef _FIX_BATTLE_AI
; 561  : 					battleMenuFix();
; 562  : #endif
; 563  : 					pc.etcFlag &= (~PC_AI_MOD);

  008d7	b9 ff bf 00 00	 mov	 ecx, 49151		; 0000bfffH
  008dc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?AI@@3HA, 0	; AI
  008e6	66 23 c1	 and	 ax, cx

; 564  : 					lssproto_FS_send(sockfd, pc.etcFlag);
; 565  : 				}

  008e9	eb 12		 jmp	 SHORT $LN142@GameMain
$LN83@GameMain:

; 566  : 				else{
; 567  : 					AI = AI_SELECT;
; 568  : 					pc.etcFlag |= PC_AI_MOD;

  008eb	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  008f0	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?AI@@3HA, 3	; AI
  008fa	66 0b c1	 or	 ax, cx
$LN142@GameMain:

; 569  : 					lssproto_FS_send(sockfd, pc.etcFlag);
; 570  : 				}
; 571  : 				extern BOOL AI_Save();
; 572  : 				AI_Save();

  008fd	66 a3 a8 00 00
	00		 mov	 WORD PTR ?pc@@3UPC@@A+168, ax
  00903	0f b7 c0	 movzx	 eax, ax
  00906	50		 push	 eax
  00907	ff 35 00 00 00
	00		 push	 DWORD PTR ?sockfd@@3IA	; sockfd
  0090d	e8 00 00 00 00	 call	 ?lssproto_FS_send@@YAXHH@Z ; lssproto_FS_send
  00912	83 c4 08	 add	 esp, 8
  00915	e8 00 00 00 00	 call	 ?AI_Save@@YAHXZ		; AI_Save
$LN82@GameMain:

; 573  : 			}
; 574  : 		}
; 575  : #endif
; 576  : 		if (BackBufferDrawType != DRAW_BACK_PRODUCE) {

  0091a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?BackBufferDrawType@@3HA, 2 ; BackBufferDrawType
  00921	74 44		 je	 SHORT $LN85@GameMain

; 577  : 
; 578  : #ifdef _STONDEBUG_
; 579  : 
; 580  : #else
; 581  : #ifdef _NEW_SPEED_
; 582  : 			no_wait_cnt++;

  00923	a0 00 00 00 00	 mov	 al, BYTE PTR ?no_wait_cnt@@3DA ; no_wait_cnt
  00928	fe c0		 inc	 al

; 583  : 			no_wait_cnt &= 3;

  0092a	24 03		 and	 al, 3

; 584  : #ifdef _OPTIMIZATIONFLIP_
; 585  : 			loopAmend = TimeGetTime();
; 586  : #endif
; 587  : 			//JL hook
; 588  : 			extern int g_hideSA;
; 589  : 			if (g_hideSA == false)

  0092c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_hideSA@@3HA, 0 ; g_hideSA
  00933	a2 00 00 00 00	 mov	 BYTE PTR ?no_wait_cnt@@3DA, al ; no_wait_cnt
  00938	75 05		 jne	 SHORT $LN86@GameMain

; 590  : 			{
; 591  : 				PutBmp();

  0093a	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp
$LN86@GameMain:

; 592  : 			}
; 593  : #ifdef _OPTIMIZATIONFLIP_
; 594  : 			loopAmend = TimeGetTime() - loopAmend;
; 595  : 			if (loopAmend < 8)
; 596  : 			{
; 597  : 				skipAmend = 0;
; 598  : 			}
; 599  : 			else if (loopAmend >= 8)
; 600  : 			{
; 601  : 				skipAmend = 1;
; 602  : 			}
; 603  : #endif
; 604  : 			baseXFastDraw = nowXFastDraw;

  0093f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowXFastDraw@@3HA ; nowXFastDraw
  00944	a3 00 00 00 00	 mov	 DWORD PTR ?baseXFastDraw@@3HA, eax ; baseXFastDraw

; 605  : 			baseYFastDraw = nowYFastDraw;

  00949	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowYFastDraw@@3HA ; nowYFastDraw
  0094e	a3 00 00 00 00	 mov	 DWORD PTR ?baseYFastDraw@@3HA, eax ; baseYFastDraw

; 606  : 			baseXFastDraw2 = nowXFastDraw2;

  00953	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowXFastDraw2@@3HA ; nowXFastDraw2
  00958	a3 00 00 00 00	 mov	 DWORD PTR ?baseXFastDraw2@@3HA, eax ; baseXFastDraw2

; 607  : 			baseYFastDraw2 = nowYFastDraw2;

  0095d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowYFastDraw2@@3HA ; nowYFastDraw2
  00962	a3 00 00 00 00	 mov	 DWORD PTR ?baseYFastDraw2@@3HA, eax ; baseYFastDraw2
$LN85@GameMain:

; 608  : 
; 609  : #else
; 610  : 			PutBmp();
; 611  : 			baseXFastDraw = nowXFastDraw;
; 612  : 			baseYFastDraw = nowYFastDraw;
; 613  : 			baseXFastDraw2 = nowXFastDraw2;
; 614  : 			baseYFastDraw2 = nowYFastDraw2;
; 615  : 
; 616  : #endif //_SPEED
; 617  : #endif	
; 618  : #ifdef __SKYISLAND
; 619  : 		}
; 620  : #endif
; 621  : 
; 622  : 
; 623  : 
; 624  : 		Flip();	// ?ÓóüÓôØ?Óì•??ÓìÅ?Óïú???

  00967	e8 00 00 00 00	 call	 ?Flip@@YAXXZ		; Flip

; 625  : 
; 626  : 
; 627  : #ifdef _STONDEBUG_		
; 628  : 		DrawDebugLine(249);
; 629  : #endif
; 630  : 
; 631  : #ifdef _STONDEBUG_	
; 632  : 		if (GetAsyncKeyState(0x10) & 0x8000) {		//???????????
; 633  : 			nowtime = TimeGetTime();
; 634  : 			_itoa_s(nowtime ^ 0xffffbcde, sz, 10);
; 635  : 		}
; 636  : 		else {
; 637  : 			nowtime = atoi(sz);
; 638  : 			nowtime ^= 0xffffbcde;
; 639  : 			while (nowtime >= TimeGetTime()) {
; 640  : 				if (WindowMode) {
; 641  : 					Sleep(1);
; 642  : 				}
; 643  : 			}
; 644  : 		}
; 645  : #else
; 646  : #ifdef _NEW_SPEED_
; 647  : 		//nowtime = atoi( sz);
; 648  : 		//nowtime ^= 0xffffbcde;
; 649  : #ifndef _OPTIMIZATIONFLIP_
; 650  : 		nowtime = nowttime1;
; 651  : 		while (nowtime >= TimeGetTime()) {

  0096c	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00971	3b f8		 cmp	 edi, eax
  00973	72 0d		 jb	 SHORT $LN9@GameMain
$LL8@GameMain:

; 652  : 			Sleep(1);

  00975	6a 01		 push	 1
  00977	ff d3		 call	 ebx
  00979	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0097e	3b f8		 cmp	 edi, eax
  00980	73 f3		 jae	 SHORT $LL8@GameMain
$LN9@GameMain:

; 653  : 		}
; 654  : 		nowtime = 0;
; 655  : #endif
; 656  : #else
; 657  : 		nowtime = atoi(sz);
; 658  : 		nowtime ^= 0xffffbcde;
; 659  : 		while (nowtime >= TimeGetTime()) {
; 660  : 			Sleep(1);
; 661  : 		}
; 662  : 		nowtime = 0;
; 663  : 
; 664  : #endif
; 665  : #endif
; 666  : 
; 667  : 		if (PalChangeFlag == TRUE) {

  00982	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?PalChangeFlag@@3HA, 1 ; PalChangeFlag
  00989	0f 85 02 01 00
	00		 jne	 $LN87@GameMain

; 668  : 
; 669  : 			extern int displayBpp;
; 670  : 			extern int rBitLShift, gBitLShift, bBitLShift;
; 671  : 			extern int rBitRShift, gBitRShift, bBitRShift;
; 672  : 			if (displayBpp >= 16) {

  0098f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?displayBpp@@3HA ; displayBpp
  00994	83 f8 10	 cmp	 eax, 16			; 00000010H
  00997	0f 8c c6 00 00
	00		 jl	 $LN88@GameMain

; 673  : 				//Ê≠§Â§ÑÈ´òÂΩ©ÂØºËá¥Âú∞ÂõæÈ¢úËâ≤ËØªÂèñ‰∏çÊ≠£Â∏∏„ÄÇÂÖ≥Èó≠Âç≥ÂèØ
; 674  : #ifndef _CAX_STOP_TEXIAO
; 675  : #ifdef _HI_COLOR_32
; 676  : 				//if (displayBpp == 32) {
; 677  : 				//	extern unsigned int highColor32Palette[256];
; 678  : 				//	for (int i = 1; i < 256; i++) {
; 679  : 				//		highColor32Palette[i] =
; 680  : 				//			//cary 2001 10 16
; 681  : 				//			((Palette[i].peBlue >> bBitRShift) << bBitLShift)
; 682  : 				//			+ ((Palette[i].peGreen >> gBitRShift) << gBitLShift)
; 683  : 				//			+ ((Palette[i].peRed >> rBitRShift) << rBitLShift);
; 684  : 				//	}
; 685  : 				//}
; 686  : 				//else
; 687  : #endif
; 688  : #endif
; 689  : 					if (displayBpp == 16) {

  0099d	75 78		 jne	 SHORT $LN11@GameMain

; 690  : 						extern unsigned short highColorPalette[256];
; 691  : 						for (int i = 1; i < 256; i++) {

  0099f	bb 02 00 00 00	 mov	 ebx, OFFSET ?highColorPalette@@3PAGA+2
  009a4	be 04 00 00 00	 mov	 esi, OFFSET ?Palette@@3PAUtagPALETTEENTRY@@A+4
  009a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@GameMain:

; 692  : 							highColorPalette[i] =

  009b0	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  009b3	8d 5b 02	 lea	 ebx, DWORD PTR [ebx+2]
  009b6	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?gBitRShift@@3HA
  009bd	d2 e8		 shr	 al, cl
  009bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gBitLShift@@3HA ; gBitLShift
  009c5	0c 01		 or	 al, 1
  009c7	0f b6 d0	 movzx	 edx, al
  009ca	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  009cd	66 d3 e2	 shl	 dx, cl
  009d0	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?bBitRShift@@3HA
  009d7	d2 e8		 shr	 al, cl
  009d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?bBitLShift@@3HA ; bBitLShift
  009df	0f b6 c0	 movzx	 eax, al
  009e2	66 d3 e0	 shl	 ax, cl
  009e5	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?rBitRShift@@3HA
  009ec	66 03 d0	 add	 dx, ax
  009ef	8a 06		 mov	 al, BYTE PTR [esi]
  009f1	83 c6 04	 add	 esi, 4
  009f4	d2 e8		 shr	 al, cl
  009f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?rBitLShift@@3HA ; rBitLShift
  009fc	0f b6 c0	 movzx	 eax, al
  009ff	66 d3 e0	 shl	 ax, cl
  00a02	66 03 d0	 add	 dx, ax
  00a05	66 89 53 fe	 mov	 WORD PTR [ebx-2], dx
  00a09	81 fe 00 04 00
	00		 cmp	 esi, OFFSET ?Palette@@3PAUtagPALETTEENTRY@@A+1024
  00a0f	7c 9f		 jl	 SHORT $LL12@GameMain
  00a11	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
$LN11@GameMain:

; 693  : 								((Palette[i].peBlue >> bBitRShift) << bBitLShift)
; 694  : 								+ (((Palette[i].peGreen >> gBitRShift) | 1) << gBitLShift)
; 695  : 								+ ((Palette[i].peRed >> rBitRShift) << rBitLShift);
; 696  : 						}
; 697  : 					}
; 698  : #ifdef __HI_COLOR
; 699  : 				InitSpriteInfo();

  00a17	e8 00 00 00 00	 call	 ?InitSpriteInfo@@YAXXZ	; InitSpriteInfo

; 700  : 				InitSurfaceInfo();

  00a1c	e8 00 00 00 00	 call	 ?InitSurfaceInfo@@YAXXZ	; InitSurfaceInfo

; 701  : 				extern int BackBufferDrawType;
; 702  : 				if (BackBufferDrawType == DRAW_BACK_BATTLE) {

  00a21	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?BackBufferDrawType@@3HA, 3 ; BackBufferDrawType
  00a28	75 32		 jne	 SHORT $LN91@GameMain

; 703  : #ifdef _NEW_RESOMODE
; 704  : 					//drawMap();
; 705  : 					ReadBattleMap(BattleMapNo);

  00a2a	ff 35 00 00 00
	00		 push	 DWORD PTR ?BattleMapNo@@3HA ; BattleMapNo
  00a30	e8 00 00 00 00	 call	 ?ReadBattleMap@@YAHH@Z	; ReadBattleMap
  00a35	83 c4 04	 add	 esp, 4

; 706  : #else
; 707  : 					ReadBattleMap(BattleMapNo);
; 708  : #endif
; 709  : 					SortDispBuffer();

  00a38	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer

; 710  : 					ClearBackSurface();

  00a3d	e8 00 00 00 00	 call	 ?ClearBackSurface@@YAXXZ ; ClearBackSurface

; 711  : 					fastDrawTileFlag = 0;

  00a42	33 c0		 xor	 eax, eax
  00a44	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 712  : 					PutBmp();

  00a4a	e8 00 00 00 00	 call	 ?PutBmp@@YAXXZ		; PutBmp

; 713  : 					fastDrawTileFlag = 1;

  00a4f	b8 01 00 00 00	 mov	 eax, 1
  00a54	66 a3 00 00 00
	00		 mov	 WORD PTR ?fastDrawTileFlag@@3FA, ax ; fastDrawTileFlag

; 714  : 				}

  00a5a	eb 2b		 jmp	 SHORT $LN93@GameMain
$LN91@GameMain:

; 715  : 				else repairMap();

  00a5c	e8 00 00 00 00	 call	 ?repairMap@@YAXXZ	; repairMap

; 716  : #endif
; 717  : #ifdef __CARYTEST
; 718  : 				extern LPREALBIN	g_lpRealHead;
; 719  : 				LPREALBIN node = g_lpRealHead;
; 720  : 				while (node) {
; 721  : 					node->state = 0;
; 722  : 				}
; 723  : #endif
; 724  : 			}

  00a61	eb 24		 jmp	 SHORT $LN93@GameMain
$LN88@GameMain:

; 725  : 			else if (displayBpp == 8) {

  00a63	83 f8 08	 cmp	 eax, 8
  00a66	75 1f		 jne	 SHORT $LN93@GameMain

; 726  : 				lpDraw->lpPALETTE->SetEntries(0, 0, 256, Palette);

  00a68	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  00a6d	68 00 00 00 00	 push	 OFFSET ?Palette@@3PAUtagPALETTEENTRY@@A ; Palette
  00a72	68 00 01 00 00	 push	 256			; 00000100H
  00a77	6a 00		 push	 0
  00a79	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [eax+128]
  00a7f	6a 00		 push	 0
  00a81	50		 push	 eax
  00a82	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a84	ff 51 18	 call	 DWORD PTR [ecx+24]
$LN93@GameMain:

; 727  : 			}
; 728  : 			PalChangeFlag = FALSE;

  00a87	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PalChangeFlag@@3HA, 0 ; PalChangeFlag
$LN87@GameMain:

; 729  : 		}
; 730  : #ifdef _NEW_SPEED_
; 731  : 		if (GameSpeedFlag) {

  00a91	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?GameSpeedFlag@@3HA, 0 ; GameSpeedFlag
  00a98	74 11		 je	 SHORT $LN94@GameMain

; 732  : 			nowtime = TimeGetTime();

  00a9a	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime

; 733  : 			nowttime1 = nowtime;

  00a9f	8b f8		 mov	 edi, eax

; 734  : 			//_itoa_s( nowtime^0xffffbcde, sz, 10);
; 735  : 			GameSpeedFlag = FALSE;

  00aa1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GameSpeedFlag@@3HA, 0 ; GameSpeedFlag
$LN94@GameMain:

; 736  : 		}
; 737  : #endif
; 738  : 		//nowtime = atoi( sz);
; 739  : 		//nowtime ^= 0xffffbcde;
; 740  : 
; 741  : #ifdef	_OPTIMIZATIONFLIP_
; 742  : 		finishLoop = TRUE;
; 743  : 		NoDrawCnt = 1;
; 744  : 
; 745  : 		while (endloopTime > TimeGetTime()) {
; 746  : 			std::this_thread::sleep_for(std::chrono::microseconds(10));
; 747  : 		}
; 748  : 
; 749  : #else
; 750  : 		nowttime1 += SystemTime;

  00aab	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?SystemTime@@3KA ; SystemTime

; 751  : 		nowtime = 0;
; 752  : 		Sleep(1);

  00ab1	6a 01		 push	 1
  00ab3	ff d3		 call	 ebx

; 753  : 		NoDrawCnt = 1;
; 754  : #endif
; 755  : 
; 756  : #ifdef _STONDEBUG_		
; 757  : 		// ?Óùæ??Óùº??????????
; 758  : 		DrawFrameCnt++;
; 759  : #endif
; 760  : 		SurfaceDate++;

  00ab5	ff 05 00 00 00
	00		 inc	 DWORD PTR ?SurfaceDate@@3IA ; SurfaceDate
  00abb	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?NoDrawCnt@@3HA, 1 ; NoDrawCnt
$LN110@GameMain:

; 190  : 
; 191  : 	while (1) {
; 192  : 		if (SystemTask() == FALSE) {

  00ac5	e8 00 00 00 00	 call	 ?SystemTask@@YAHXZ	; SystemTask
  00aca	8b b5 ec fb ff
	ff		 mov	 esi, DWORD PTR _nowttime3$1$[ebp]
  00ad0	85 c0		 test	 eax, eax
  00ad2	0f 85 be f5 ff
	ff		 jne	 $LL2@GameMain
$LN107@GameMain:

; 193  : 			EndGame();

  00ad8	e8 00 00 00 00	 call	 ?EndGame@@YAXXZ		; EndGame
$LN138@GameMain:

; 761  : 	}
; 762  : 
; 763  : 	return FALSE;
; 764  : }

  00add	33 c0		 xor	 eax, eax
  00adf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00ae2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00ae9	59		 pop	 ecx
  00aea	5f		 pop	 edi
  00aeb	5e		 pop	 esi
  00aec	5b		 pop	 ebx
  00aed	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00af0	33 cd		 xor	 ecx, ebp
  00af2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00af7	8b e5		 mov	 esp, ebp
  00af9	5d		 pop	 ebp
  00afa	c3		 ret	 0
$LN145@GameMain:

; 419  : 						}
; 420  : 				}
; 421  : 			}
; 422  : 		}
; 423  : 
; 424  : 
; 425  : #ifdef __NEW_CLIENT_MEM
; 426  : #ifndef __NEW_CLIENT_ONLY_WRITE
; 427  : 		static DWORD reset = TimeGetTime() + 120000;

  00afb	68 00 00 00 00	 push	 OFFSET ?$TSS0@?6??GameMain@@YAHXZ@4HA
  00b00	e8 00 00 00 00	 call	 __Init_thread_header
  00b05	83 c4 04	 add	 esp, 4
  00b08	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?6??GameMain@@YAHXZ@4HA, -1
  00b0f	0f 85 1e fb ff
	ff		 jne	 $LN4@GameMain
  00b15	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00b1c	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00b21	05 c0 d4 01 00	 add	 eax, 120000		; 0001d4c0H
  00b26	a3 00 00 00 00	 mov	 DWORD PTR ?reset@?6??GameMain@@YAHXZ@4KA, eax
  00b2b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00b32	68 00 00 00 00	 push	 OFFSET ?$TSS0@?6??GameMain@@YAHXZ@4HA
  00b37	e8 00 00 00 00	 call	 __Init_thread_footer
  00b3c	83 c4 04	 add	 esp, 4
  00b3f	e9 ef fa ff ff	 jmp	 $LN4@GameMain
$LN146@GameMain:

; 503  : 		nowtime = nowttime1;
; 504  : 		//nowtime ^= 0xffffbcde;
; 505  : 		static DWORD OldTime = nowttime1;

  00b44	68 00 00 00 00	 push	 OFFSET ?$TSS1@?6??GameMain@@YAHXZ@4HA
  00b49	e8 00 00 00 00	 call	 __Init_thread_header
  00b4e	83 c4 04	 add	 esp, 4
  00b51	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?6??GameMain@@YAHXZ@4HA, -1
  00b58	0f 85 14 fc ff
	ff		 jne	 $LN132@GameMain
  00b5e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00b65	89 3d 00 00 00
	00		 mov	 DWORD PTR ?OldTime@?6??GameMain@@YAHXZ@4KA, edi
  00b6b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00b72	68 00 00 00 00	 push	 OFFSET ?$TSS1@?6??GameMain@@YAHXZ@4HA
  00b77	e8 00 00 00 00	 call	 __Init_thread_footer
  00b7c	83 c4 04	 add	 esp, 4
  00b7f	e9 ee fb ff ff	 jmp	 $LN132@GameMain
$LN147@GameMain:

; 532  : 			di_key[DIK_NEXT] &= ~0x80;
; 533  : 			static DWORD switchmodetime = TimeGetTime();

  00b84	68 00 00 00 00	 push	 OFFSET ?$TSS2@?LD@??GameMain@@YAHXZ@4HA
  00b89	e8 00 00 00 00	 call	 __Init_thread_header
  00b8e	83 c4 04	 add	 esp, 4
  00b91	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS2@?LD@??GameMain@@YAHXZ@4HA, -1
  00b98	0f 85 6e fc ff
	ff		 jne	 $LN133@GameMain
  00b9e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00ba5	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00baa	a3 00 00 00 00	 mov	 DWORD PTR ?switchmodetime@?LD@??GameMain@@YAHXZ@4KA, eax
  00baf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00bb6	68 00 00 00 00	 push	 OFFSET ?$TSS2@?LD@??GameMain@@YAHXZ@4HA
  00bbb	e8 00 00 00 00	 call	 __Init_thread_footer
  00bc0	83 c4 04	 add	 esp, 4
  00bc3	e9 44 fc ff ff	 jmp	 $LN133@GameMain
$LN148@GameMain:

; 553  : 			di_key[DIK_PRIOR] &= ~0x80;
; 554  : 			static DWORD switchmodetime = TimeGetTime();

  00bc8	68 00 00 00 00	 push	 OFFSET ?$TSS3@?LP@??GameMain@@YAHXZ@4HA
  00bcd	e8 00 00 00 00	 call	 __Init_thread_header
  00bd2	83 c4 04	 add	 esp, 4
  00bd5	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS3@?LP@??GameMain@@YAHXZ@4HA, -1
  00bdc	0f 85 cc fc ff
	ff		 jne	 $LN134@GameMain
  00be2	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00be9	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00bee	a3 00 00 00 00	 mov	 DWORD PTR ?switchmodetime@?LP@??GameMain@@YAHXZ@4KA, eax
  00bf3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00bfa	68 00 00 00 00	 push	 OFFSET ?$TSS3@?LP@??GameMain@@YAHXZ@4HA
  00bff	e8 00 00 00 00	 call	 __Init_thread_footer
  00c04	83 c4 04	 add	 esp, 4
  00c07	e9 a2 fc ff ff	 jmp	 $LN134@GameMain
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GameMain@@YAHXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?6??GameMain@@YAHXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?GameMain@@YAHXZ$1:
  0000c	68 00 00 00 00	 push	 OFFSET ?$TSS1@?6??GameMain@@YAHXZ@4HA
  00011	e8 00 00 00 00	 call	 __Init_thread_abort
  00016	59		 pop	 ecx
  00017	c3		 ret	 0
__unwindfunclet$?GameMain@@YAHXZ$2:
  00018	68 00 00 00 00	 push	 OFFSET ?$TSS2@?LD@??GameMain@@YAHXZ@4HA
  0001d	e8 00 00 00 00	 call	 __Init_thread_abort
  00022	59		 pop	 ecx
  00023	c3		 ret	 0
__unwindfunclet$?GameMain@@YAHXZ$3:
  00024	68 00 00 00 00	 push	 OFFSET ?$TSS3@?LP@??GameMain@@YAHXZ@4HA
  00029	e8 00 00 00 00	 call	 __Init_thread_abort
  0002e	59		 pop	 ecx
  0002f	c3		 ret	 0
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
__ehhandler$?GameMain@@YAHXZ:
  00035	90		 npad	 1
  00036	90		 npad	 1
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003e	8b 8a d8 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1064]
  00044	33 c8		 xor	 ecx, eax
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GameMain@@YAHXZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GameMain@@YAHXZ ENDP					; GameMain
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
