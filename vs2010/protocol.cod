; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Administrator\Desktop\????? ??\????? ??\Client Source Code\NewProto\protocol.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?old_time@?4??lssproto_CHATROOM_send@@YAXHPAD@Z@4IA DD 01H DUP (?) ; `lssproto_CHATROOM_send'::`5'::old_time
_BSS	ENDS
PUBLIC	?SaDispatchMessage@@YAHHPAD@Z			; SaDispatchMessage
PUBLIC	?lssproto_SaMenu_send@@YAXHHHH@Z		; lssproto_SaMenu_send
PUBLIC	?lssproto_GetInfo_send@@YAXH@Z			; lssproto_GetInfo_send
PUBLIC	?lssproto_Gmset_send@@YAXHHPAD@Z		; lssproto_Gmset_send
PUBLIC	?lssproto_Expup_send@@YAXH@Z			; lssproto_Expup_send
PUBLIC	?lssproto_Noenemy_send@@YAXH@Z			; lssproto_Noenemy_send
PUBLIC	?lssproto_Partyauto_send@@YAXH@Z		; lssproto_Partyauto_send
PUBLIC	?lssproto_W_send@@YAXHHHPAD@Z			; lssproto_W_send
PUBLIC	?lssproto_W2_send@@YAXHHHPAD@Z			; lssproto_W2_send
PUBLIC	?lssproto_EV_send@@YAXHHHHHH@Z			; lssproto_EV_send
PUBLIC	?lssproto_EN_send@@YAXHHH@Z			; lssproto_EN_send
PUBLIC	?lssproto_DU_send@@YAXHHH@Z			; lssproto_DU_send
PUBLIC	?lssproto_EO_send@@YAXHH@Z			; lssproto_EO_send
PUBLIC	?lssproto_BU_send@@YAXHH@Z			; lssproto_BU_send
PUBLIC	?lssproto_JB_send@@YAXHHH@Z			; lssproto_JB_send
PUBLIC	?lssproto_LB_send@@YAXHHH@Z			; lssproto_LB_send
PUBLIC	?lssproto_B_send@@YAXHPAD@Z			; lssproto_B_send
PUBLIC	?lssproto_SKD_send@@YAXHHH@Z			; lssproto_SKD_send
PUBLIC	?lssproto_ID_send@@YAXHHHHH@Z			; lssproto_ID_send
PUBLIC	?lssproto_PI_send@@YAXHHHH@Z			; lssproto_PI_send
PUBLIC	?lssproto_DI_send@@YAXHHHH@Z			; lssproto_DI_send
PUBLIC	?lssproto_DG_send@@YAXHHHH@Z			; lssproto_DG_send
PUBLIC	?lssproto_DP_send@@YAXHHHH@Z			; lssproto_DP_send
PUBLIC	?lssproto_MI_send@@YAXHHH@Z			; lssproto_MI_send
PUBLIC	?lssproto_MSG_send@@YAXHHPADH@Z			; lssproto_MSG_send
PUBLIC	?lssproto_PMSG_send@@YAXHHHHPADH@Z		; lssproto_PMSG_send
PUBLIC	?lssproto_AB_send@@YAXH@Z			; lssproto_AB_send
PUBLIC	?lssproto_DAB_send@@YAXHH@Z			; lssproto_DAB_send
PUBLIC	?lssproto_AAB_send@@YAXHHH@Z			; lssproto_AAB_send
PUBLIC	?lssproto_L_send@@YAXHH@Z			; lssproto_L_send
PUBLIC	?lssproto_TK_send@@YAXHHHPADHH@Z		; lssproto_TK_send
PUBLIC	?lssproto_M_send@@YAXHHHHHH@Z			; lssproto_M_send
PUBLIC	?lssproto_C_send@@YAXHH@Z			; lssproto_C_send
PUBLIC	?lssproto_S_send@@YAXHPAD@Z			; lssproto_S_send
PUBLIC	?lssproto_FS_send@@YAXHH@Z			; lssproto_FS_send
PUBLIC	?lssproto_HL_send@@YAXHH@Z			; lssproto_HL_send
PUBLIC	?lssproto_PR_send@@YAXHHHH@Z			; lssproto_PR_send
PUBLIC	?lssproto_KS_send@@YAXHH@Z			; lssproto_KS_send
PUBLIC	?lssproto_SPET_send@@YAXHH@Z			; lssproto_SPET_send
PUBLIC	?lssproto_AC_send@@YAXHHHH@Z			; lssproto_AC_send
PUBLIC	?lssproto_MU_send@@YAXHHHHH@Z			; lssproto_MU_send
PUBLIC	?lssproto_PS_send@@YAXHHHHPAD@Z			; lssproto_PS_send
PUBLIC	?lssproto_ST_send@@YAXHH@Z			; lssproto_ST_send
PUBLIC	?lssproto_DT_send@@YAXHH@Z			; lssproto_DT_send
PUBLIC	?lssproto_FT_send@@YAXHPAD@Z			; lssproto_FT_send
PUBLIC	?lssproto_SKUP_send@@YAXHH@Z			; lssproto_SKUP_send
PUBLIC	?lssproto_KN_send@@YAXHHPAD@Z			; lssproto_KN_send
PUBLIC	?lssproto_WN_send@@YAXHHHHHHPAD@Z		; lssproto_WN_send
PUBLIC	?lssproto_SP_send@@YAXHHHH@Z			; lssproto_SP_send
PUBLIC	?lssproto_ClientLogin_send@@YAXHPAD0@Z		; lssproto_ClientLogin_send
PUBLIC	?lssproto_CreateNewChar_send@@YAXHHPADHHHHHHHHHHH@Z ; lssproto_CreateNewChar_send
PUBLIC	?lssproto_CharDelete_send@@YAXHPAD@Z		; lssproto_CharDelete_send
PUBLIC	?lssproto_CharLogin_send@@YAXHPAD@Z		; lssproto_CharLogin_send
PUBLIC	?lssproto_CharList_send@@YAXH@Z			; lssproto_CharList_send
PUBLIC	?lssproto_CharLogout_send@@YAXHH@Z		; lssproto_CharLogout_send
PUBLIC	?lssproto_ProcGet_send@@YAXH@Z			; lssproto_ProcGet_send
PUBLIC	?lssproto_PlayerNumGet_send@@YAXH@Z		; lssproto_PlayerNumGet_send
PUBLIC	?lssproto_Echo_send@@YAXHPAD@Z			; lssproto_Echo_send
PUBLIC	?lssproto_Shutdown_send@@YAXHPADH@Z		; lssproto_Shutdown_send
PUBLIC	?lssproto_TD_send@@YAXHPAD@Z			; lssproto_TD_send
PUBLIC	?lssproto_FM_send@@YAXHPAD@Z			; lssproto_FM_send
PUBLIC	?lssproto_PETST_send@@YAXHHH@Z			; lssproto_PETST_send
PUBLIC	?lssproto_BM_send@@YAXHH@Z			; lssproto_BM_send
PUBLIC	?lssproto_DM_send@@YAXH@Z			; lssproto_DM_send
PUBLIC	?lssproto_MA_send@@YAXHHHH@Z			; lssproto_MA_send
PUBLIC	?lssproto_KTEAM_send@@YAXHH@Z			; lssproto_KTEAM_send
PUBLIC	?lssproto_CHATROOM_send@@YAXHPAD@Z		; lssproto_CHATROOM_send
PUBLIC	?lssproto_RESIST_send@@YAXHPAD@Z		; lssproto_RESIST_send
PUBLIC	?lssproto_ALCHEPLUS_send@@YAXHPAD@Z		; lssproto_ALCHEPLUS_send
PUBLIC	?lssproto_BATTLESKILL_send@@YAXHH@Z		; lssproto_BATTLESKILL_send
PUBLIC	?lssproto_STREET_VENDOR_send@@YAXHPAD@Z		; lssproto_STREET_VENDOR_send
PUBLIC	?lssproto_JOBDAILY_send@@YAXHPAD@Z		; lssproto_JOBDAILY_send
PUBLIC	?lssproto_TEACHER_SYSTEM_send@@YAXHPAD@Z	; lssproto_TEACHER_SYSTEM_send
PUBLIC	?lssproto_PetItemEquip_send@@YAXHHHHHH@Z	; lssproto_PetItemEquip_send
PUBLIC	?lssproto_HostName_send@@YAXH@Z			; lssproto_HostName_send
PUBLIC	?LSSPROTO_203_SEND@@YAXHPAD@Z			; LSSPROTO_203_SEND
PUBLIC	?LogToRecvdata@@YAXPAD@Z			; LogToRecvdata
PUBLIC	?LogToSenddata@@YAXPAD@Z			; LogToSenddata
PUBLIC	??_C@_01ICJEACDI@?$DL?$AA@			; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_08NLHEDILN@ShiQiMax?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0CB@FCFKGMLE@dJuTNIuFKWUoFEJanPWTqgAATxHhlltK@ ; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	_gethostname@8:PROC
EXTRN	?JL_转到外挂发登陆包@@YAXXZ:PROC		; JL_转到外挂发登陆包
EXTRN	?JL_resetRecv@@YAXXZ:PROC			; JL_resetRecv
EXTRN	?util_SplitMessage@@YAXPAD0@Z:PROC		; util_SplitMessage
EXTRN	?util_DecodeMessage@@YAXPAD0@Z:PROC		; util_DecodeMessage
EXTRN	?util_GetFunctionFromSlice@@YAHPAH0@Z:PROC	; util_GetFunctionFromSlice
EXTRN	?util_SendMesg@@YAXHHPAD@Z:PROC			; util_SendMesg
EXTRN	?util_deint@@YAHHPAH@Z:PROC			; util_deint
EXTRN	?util_mkint@@YAHPADH@Z:PROC			; util_mkint
EXTRN	?util_destring@@YAHHPAD@Z:PROC			; util_destring
EXTRN	?util_mkstring@@YAHPAD0@Z:PROC			; util_mkstring
EXTRN	?lssproto_DENGON_recv@@YAXPADHH@Z:PROC		; lssproto_DENGON_recv
EXTRN	?lssproto_XYD_recv@@YAXHHHH@Z:PROC		; lssproto_XYD_recv
EXTRN	?lssproto_EV_recv@@YAXHHH@Z:PROC		; lssproto_EV_recv
EXTRN	?lssproto_EN_recv@@YAXHHH@Z:PROC		; lssproto_EN_recv
EXTRN	?lssproto_RS_recv@@YAXHPAD@Z:PROC		; lssproto_RS_recv
EXTRN	?lssproto_RD_recv@@YAXHPAD@Z:PROC		; lssproto_RD_recv
EXTRN	?lssproto_B_recv@@YAXHPAD@Z:PROC		; lssproto_B_recv
EXTRN	?lssproto_I_recv@@YAXHPAD@Z:PROC		; lssproto_I_recv
EXTRN	?lssproto_SI_recv@@YAXHHH@Z:PROC		; lssproto_SI_recv
EXTRN	?lssproto_MSG_recv@@YAXHHPADH@Z:PROC		; lssproto_MSG_recv
EXTRN	?lssproto_PME_recv@@YAXHHHHHHHHPAD@Z:PROC	; lssproto_PME_recv
EXTRN	?lssproto_AB_recv@@YAXHPAD@Z:PROC		; lssproto_AB_recv
EXTRN	?lssproto_ABI_recv@@YAXHHPAD@Z:PROC		; lssproto_ABI_recv
EXTRN	?lssproto_TK_recv@@YAXHHPADH@Z:PROC		; lssproto_TK_recv
EXTRN	?lssproto_MC_recv@@YAXHHHHHHHHHPAD@Z:PROC	; lssproto_MC_recv
EXTRN	?lssproto_M_recv@@YAXHHHHHHPAD@Z:PROC		; lssproto_M_recv
EXTRN	?lssproto_C_recv@@YAXHPAD@Z:PROC		; lssproto_C_recv
EXTRN	?lssproto_CA_recv@@YAXHPAD@Z:PROC		; lssproto_CA_recv
EXTRN	?lssproto_CD_recv@@YAXHPAD@Z:PROC		; lssproto_CD_recv
EXTRN	?lssproto_R_recv@@YAXHPAD@Z:PROC		; lssproto_R_recv
EXTRN	?lssproto_S_recv@@YAXHPAD@Z:PROC		; lssproto_S_recv
EXTRN	?lssproto_D_recv@@YAXHHHHPAD@Z:PROC		; lssproto_D_recv
EXTRN	?lssproto_FS_recv@@YAXHH@Z:PROC			; lssproto_FS_recv
EXTRN	?lssproto_HL_recv@@YAXHH@Z:PROC			; lssproto_HL_recv
EXTRN	?lssproto_PR_recv@@YAXHHH@Z:PROC		; lssproto_PR_recv
EXTRN	?lssproto_KS_recv@@YAXHHH@Z:PROC		; lssproto_KS_recv
EXTRN	?lssproto_SPET_recv@@YAXHHH@Z:PROC		; lssproto_SPET_recv
EXTRN	?lssproto_PS_recv@@YAXHHHHH@Z:PROC		; lssproto_PS_recv
EXTRN	?lssproto_SKUP_recv@@YAXHH@Z:PROC		; lssproto_SKUP_recv
EXTRN	?lssproto_WN_recv@@YAXHHHHHPAD@Z:PROC		; lssproto_WN_recv
EXTRN	?lssproto_EF_recv@@YAXHHHPAD@Z:PROC		; lssproto_EF_recv
EXTRN	?lssproto_SE_recv@@YAXHHHHH@Z:PROC		; lssproto_SE_recv
EXTRN	?lssproto_ClientLogin_recv@@YAXHPAD@Z:PROC	; lssproto_ClientLogin_recv
EXTRN	?lssproto_CreateNewChar_recv@@YAXHPAD0@Z:PROC	; lssproto_CreateNewChar_recv
EXTRN	?lssproto_CharDelete_recv@@YAXHPAD0@Z:PROC	; lssproto_CharDelete_recv
EXTRN	?lssproto_CharLogin_recv@@YAXHPAD0@Z:PROC	; lssproto_CharLogin_recv
EXTRN	?lssproto_CharList_recv@@YAXHPAD0@Z:PROC	; lssproto_CharList_recv
EXTRN	?lssproto_CharLogout_recv@@YAXHPAD0@Z:PROC	; lssproto_CharLogout_recv
EXTRN	?lssproto_ProcGet_recv@@YAXHPAD@Z:PROC		; lssproto_ProcGet_recv
EXTRN	?lssproto_PlayerNumGet_recv@@YAXHHH@Z:PROC	; lssproto_PlayerNumGet_recv
EXTRN	?lssproto_Echo_recv@@YAXHPAD@Z:PROC		; lssproto_Echo_recv
EXTRN	?lssproto_NU_recv@@YAXHH@Z:PROC			; lssproto_NU_recv
EXTRN	?lssproto_TD_recv@@YAXHPAD@Z:PROC		; lssproto_TD_recv
EXTRN	?lssproto_FM_recv@@YAXHPAD@Z:PROC		; lssproto_FM_recv
EXTRN	?lssproto_WO_recv@@YAXHH@Z:PROC			; lssproto_WO_recv
EXTRN	?lssproto_IC_recv@@YAXHHH@Z:PROC		; lssproto_IC_recv
EXTRN	?lssproto_NC_recv@@YAXHH@Z:PROC			; lssproto_NC_recv
EXTRN	?lssproto_PETST_recv@@YAXHHH@Z:PROC		; lssproto_PETST_recv
EXTRN	?lssproto_CHATROOM_recv@@YAXHPAD@Z:PROC		; lssproto_CHATROOM_recv
EXTRN	?lssproto_RESIST_recv@@YAXHPAD@Z:PROC		; lssproto_RESIST_recv
EXTRN	?lssproto_ALCHEPLUS_recv@@YAXHPAD@Z:PROC	; lssproto_ALCHEPLUS_recv
EXTRN	?lssproto_BATTLESKILL_recv@@YAXHPAD@Z:PROC	; lssproto_BATTLESKILL_recv
EXTRN	?lssproto_STREET_VENDOR_recv@@YAXHPAD@Z:PROC	; lssproto_STREET_VENDOR_recv
EXTRN	?lssproto_JOBDAILY_recv@@YAXHPAD@Z:PROC		; lssproto_JOBDAILY_recv
EXTRN	?lssproto_TEACHER_SYSTEM_recv@@YAXHPAD@Z:PROC	; lssproto_TEACHER_SYSTEM_recv
EXTRN	?lssproto_S2_recv@@YAXHPAD@Z:PROC		; lssproto_S2_recv
EXTRN	?lssproto_Firework_recv@@YAXHHHH@Z:PROC		; lssproto_Firework_recv
EXTRN	?lssproto_CHAREFFECT_recv@@YAXHPAD@Z:PROC	; lssproto_CHAREFFECT_recv
EXTRN	?getMAC@@YAHPAD@Z:PROC				; getMAC
EXTRN	?getCpuId@@YAHPAD@Z:PROC			; getCpuId
EXTRN	__imp___time64:PROC
EXTRN	?SkyIslandSetNo@@YAXH@Z:PROC			; SkyIslandSetNo
EXTRN	?lssproto_查询光环_recv@@YAXPAD@Z:PROC		; lssproto_查询光环_recv
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	?SliceCount@@3HA:DWORD				; SliceCount
EXTRN	?dwServer@@3KA:DWORD				; dwServer
EXTRN	?SelRoomBtn@@3FA:WORD				; SelRoomBtn
EXTRN	?g_服务器@@3HA:DWORD				; g_服务器
EXTRN	?SendCount@@3HA:DWORD				; SendCount
EXTRN	?g_pMappingRecv@@3PAHA:DWORD			; g_pMappingRecv
EXTRN	?passwd@@3USTR_BUFFER@@A:BYTE			; passwd
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CB@FCFKGMLE@dJuTNIuFKWUoFEJanPWTqgAATxHhlltK@
CONST	SEGMENT
??_C@_0CB@FCFKGMLE@dJuTNIuFKWUoFEJanPWTqgAATxHhlltK@ DB 'dJuTNIuFKWUoFEJa'
	DB	'nPWTqgAATxHhlltK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHEDILN@ShiQiMax?$AA@
CONST	SEGMENT
??_C@_08NLHEDILN@ShiQiMax?$AA@ DB 'ShiQiMax', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL?$AA@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL?$AA@ DB ';', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?LogToSenddata@@YAXPAD@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?LogToSenddata@@YAXPAD@Z PROC				; LogToSenddata, COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 37   : #if _LOG_MSG
; 38   : 	extern char lssproto_readlogfilename[];
; 39   : 	if(lssproto_readlogfilename[0] != '\0'){
; 40   : 		FILE *rfp;
; 41   : 		rfp = fopen(lssproto_readlogfilename, "a+");
; 42   : 		if(rfp){
; 43   : 			fprintf(rfp, "%s: 送出：\t%s\n", pc.name, data);
; 44   : 			fclose(rfp);
; 45   : 		}
; 46   : 	}
; 47   : #endif
; 48   : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?LogToSenddata@@YAXPAD@Z ENDP				; LogToSenddata
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?LogToRecvdata@@YAXPAD@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?LogToRecvdata@@YAXPAD@Z PROC				; LogToRecvdata, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 22   : #ifdef _LOG_MSG
; 23   : 	extern char lssproto_readlogfilename[];
; 24   : 	if(lssproto_readlogfilename[0] != '\0'){
; 25   : 		FILE *rfp;
; 26   : 		rfp = fopen(lssproto_readlogfilename, "a+");
; 27   : 		if(rfp){
; 28   : 			fprintf(rfp, "%s: 收到：\t%s\n", pc.name, data);
; 29   : 			fclose(rfp);
; 30   : 		}
; 31   : 	}
; 32   : #endif
; 33   : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?LogToRecvdata@@YAXPAD@Z ENDP				; LogToRecvdata
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 535  :             return _time64(_Time);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 536  :         }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?LSSPROTO_203_SEND@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?LSSPROTO_203_SEND@@YAXHPAD@Z PROC			; LSSPROTO_203_SEND, COMDAT

; 2465 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2466 : 	char buffer[16384];
; 2467 : 	int iChecksum = 0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2468 : 
; 2469 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@LSSPROTO_2
  00050	eb 05		 jmp	 SHORT $LN4@LSSPROTO_2
$LN3@LSSPROTO_2:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@LSSPROTO_2:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2470 : 	iChecksum += util_mkstring(buffer, data);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2471 : 	util_mkint(buffer, iChecksum);

  00084	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0008a	50		 push	 eax
  0008b	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00097	83 c4 08	 add	 esp, 8

; 2472 : 	util_SendMesg(fd, LSSPROTO_查询光环_SEND, buffer);

  0009a	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	68 d4 00 00 00	 push	 212			; 000000d4H
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@LSSPROTO_2:

; 2473 : }

  000b2	52		 push	 edx
  000b3	8b cd		 mov	 ecx, ebp
  000b5	50		 push	 eax
  000b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@LSSPROTO_2
  000bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c1	58		 pop	 eax
  000c2	5a		 pop	 edx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c9	33 cd		 xor	 ecx, ebp
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000d6	3b ec		 cmp	 ebp, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
  000e1	0f 1f 00	 npad	 3
$LN7@LSSPROTO_2:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN6@LSSPROTO_2
$LN6@LSSPROTO_2:
  000ec	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000f0	00 40 00 00	 DD	 16384			; 00004000H
  000f4	00 00 00 00	 DD	 $LN5@LSSPROTO_2
$LN5@LSSPROTO_2:
  000f8	62		 DB	 98			; 00000062H
  000f9	75		 DB	 117			; 00000075H
  000fa	66		 DB	 102			; 00000066H
  000fb	66		 DB	 102			; 00000066H
  000fc	65		 DB	 101			; 00000065H
  000fd	72		 DB	 114			; 00000072H
  000fe	00		 DB	 0
?LSSPROTO_203_SEND@@YAXHPAD@Z ENDP			; LSSPROTO_203_SEND
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_HostName_send@@YAXH@Z
_TEXT	SEGMENT
$T1 = -18228						; size = 4
_MyName$ = -16680					; size = 255
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_HostName_send@@YAXH@Z PROC			; lssproto_HostName_send, COMDAT

; 2447 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 38 47 00 00	 mov	 eax, 18232		; 00004738H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd c8 b8 ff
	ff		 lea	 edi, DWORD PTR [ebp-18232]
  00016	b9 ce 11 00 00	 mov	 ecx, 4558		; 000011ceH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2448 : 	char buffer[16384];
; 2449 : 	int iChecksum=0,i;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2450 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d cc b8 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd cc b8 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_H
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_H
$LN3@lssproto_H:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_H:
  00057	8b 95 cc b8 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2451 : 	char MyName[255];
; 2452 : 	gethostname(MyName,255);

  00065	68 ff 00 00 00	 push	 255			; 000000ffH
  0006a	8d 85 d8 be ff
	ff		 lea	 eax, DWORD PTR _MyName$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _gethostname@8

; 2453 : 
; 2454 : 	iChecksum += util_mkstring(buffer,MyName);

  00076	8d 85 d8 be ff
	ff		 lea	 eax, DWORD PTR _MyName$[ebp]
  0007c	50		 push	 eax
  0007d	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00089	83 c4 08	 add	 esp, 8
  0008c	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00092	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2455 : 
; 2456 : 	util_mkint(buffer,iChecksum);

  00098	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0009e	50		 push	 eax
  0009f	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000ab	83 c4 08	 add	 esp, 8

; 2457 : 	util_SendMesg(fd,LSSPROTO_HOSTNAME_SEND,buffer);

  000ae	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b4	50		 push	 eax
  000b5	68 81 00 00 00	 push	 129			; 00000081H
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_H:

; 2458 : 
; 2459 : }

  000c6	52		 push	 edx
  000c7	8b cd		 mov	 ecx, ebp
  000c9	50		 push	 eax
  000ca	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_H
  000d0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d5	58		 pop	 eax
  000d6	5a		 pop	 edx
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dd	33 cd		 xor	 ecx, ebp
  000df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e4	81 c4 38 47 00
	00		 add	 esp, 18232		; 00004738H
  000ea	3b ec		 cmp	 ebp, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
  000f5	0f 1f 00	 npad	 3
$LN8@lssproto_H:
  000f8	02 00 00 00	 DD	 2
  000fc	00 00 00 00	 DD	 $LN7@lssproto_H
$LN7@lssproto_H:
  00100	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00104	00 40 00 00	 DD	 16384			; 00004000H
  00108	00 00 00 00	 DD	 $LN5@lssproto_H
  0010c	d8 be ff ff	 DD	 -16680			; ffffbed8H
  00110	ff 00 00 00	 DD	 255			; 000000ffH
  00114	00 00 00 00	 DD	 $LN6@lssproto_H
$LN6@lssproto_H:
  00118	4d		 DB	 77			; 0000004dH
  00119	79		 DB	 121			; 00000079H
  0011a	4e		 DB	 78			; 0000004eH
  0011b	61		 DB	 97			; 00000061H
  0011c	6d		 DB	 109			; 0000006dH
  0011d	65		 DB	 101			; 00000065H
  0011e	00		 DB	 0
$LN5@lssproto_H:
  0011f	62		 DB	 98			; 00000062H
  00120	75		 DB	 117			; 00000075H
  00121	66		 DB	 102			; 00000066H
  00122	66		 DB	 102			; 00000066H
  00123	65		 DB	 101			; 00000065H
  00124	72		 DB	 114			; 00000072H
  00125	00		 DB	 0
?lssproto_HostName_send@@YAXH@Z ENDP			; lssproto_HostName_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_PetItemEquip_send@@YAXHHHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_szBuffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_iGx$ = 12						; size = 4
_iGy$ = 16						; size = 4
_iPetNo$ = 20						; size = 4
_iItemNo$ = 24						; size = 4
_iDestNO$ = 28						; size = 4
?lssproto_PetItemEquip_send@@YAXHHHHHH@Z PROC		; lssproto_PetItemEquip_send, COMDAT

; 2430 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2431 : 	char	szBuffer[16384];
; 2432 : 	int		iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2433 : 
; 2434 : 	szBuffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_P
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_P
$LN3@lssproto_P:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_P:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _szBuffer$[ebp+edx], 0

; 2435 : 	iChecksum += util_mkint(szBuffer, iGx);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _iGx$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2436 : 	iChecksum += util_mkint(szBuffer, iGy);

  00084	8b 45 10	 mov	 eax, DWORD PTR _iGy$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2437 : 	iChecksum += util_mkint(szBuffer, iPetNo);

  000a3	8b 45 14	 mov	 eax, DWORD PTR _iPetNo$[ebp]
  000a6	50		 push	 eax
  000a7	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000b3	83 c4 08	 add	 esp, 8
  000b6	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000bc	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2438 : 	iChecksum += util_mkint(szBuffer, iItemNo);

  000c2	8b 45 18	 mov	 eax, DWORD PTR _iItemNo$[ebp]
  000c5	50		 push	 eax
  000c6	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000d2	83 c4 08	 add	 esp, 8
  000d5	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000db	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2439 : 	iChecksum += util_mkint(szBuffer, iDestNO);

  000e1	8b 45 1c	 mov	 eax, DWORD PTR _iDestNO$[ebp]
  000e4	50		 push	 eax
  000e5	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000f1	83 c4 08	 add	 esp, 8
  000f4	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000fa	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2440 : 	util_mkint(szBuffer, iChecksum);

  00100	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00106	50		 push	 eax
  00107	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00113	83 c4 08	 add	 esp, 8

; 2441 : 	util_SendMesg(fd, LSSPROTO_PET_ITEM_EQUIP_SEND, szBuffer);

  00116	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0011c	50		 push	 eax
  0011d	6a 7f		 push	 127			; 0000007fH
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00122	51		 push	 ecx
  00123	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_P:

; 2442 : }

  0012b	52		 push	 edx
  0012c	8b cd		 mov	 ecx, ebp
  0012e	50		 push	 eax
  0012f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_P
  00135	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013a	58		 pop	 eax
  0013b	5a		 pop	 edx
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00142	33 cd		 xor	 ecx, ebp
  00144	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00149	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0014f	3b ec		 cmp	 ebp, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
  0015a	66 90		 npad	 2
$LN7@lssproto_P:
  0015c	01 00 00 00	 DD	 1
  00160	00 00 00 00	 DD	 $LN6@lssproto_P
$LN6@lssproto_P:
  00164	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00168	00 40 00 00	 DD	 16384			; 00004000H
  0016c	00 00 00 00	 DD	 $LN5@lssproto_P
$LN5@lssproto_P:
  00170	73		 DB	 115			; 00000073H
  00171	7a		 DB	 122			; 0000007aH
  00172	42		 DB	 66			; 00000042H
  00173	75		 DB	 117			; 00000075H
  00174	66		 DB	 102			; 00000066H
  00175	66		 DB	 102			; 00000066H
  00176	65		 DB	 101			; 00000065H
  00177	72		 DB	 114			; 00000072H
  00178	00		 DB	 0
?lssproto_PetItemEquip_send@@YAXHHHHHH@Z ENDP		; lssproto_PetItemEquip_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_TEACHER_SYSTEM_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_TEACHER_SYSTEM_send@@YAXHPAD@Z PROC		; lssproto_TEACHER_SYSTEM_send, COMDAT

; 2411 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2412 : 	char buffer[16384];
; 2413 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2414 : 
; 2415 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_T
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_T
$LN4@lssproto_T:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_T:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2416 : 	iChecksum += util_mkstring(buffer,data);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2417 : 
; 2418 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_T

; 2419 : 	{
; 2420 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_T:

; 2421 : 	}
; 2422 : 
; 2423 : 	util_mkint(buffer,iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 2424 : 	util_SendMesg(fd,LSSPROTO_TEACHER_SYSTEM_SEND,buffer);  //0x7a  122

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 7a		 push	 122			; 0000007aH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_T:

; 2425 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_T
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_T:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_T
$LN7@lssproto_T:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_T
$LN6@lssproto_T:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_TEACHER_SYSTEM_send@@YAXHPAD@Z ENDP		; lssproto_TEACHER_SYSTEM_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_JOBDAILY_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_JOBDAILY_send@@YAXHPAD@Z PROC			; lssproto_JOBDAILY_send, COMDAT

; 2392 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2393 : 	char buffer[16384];
; 2394 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2395 : 
; 2396 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_J
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_J
$LN4@lssproto_J:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_J:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2397 : 
; 2398 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_J

; 2399 : 	{
; 2400 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_J:

; 2401 : 	}
; 2402 : 
; 2403 : 	iChecksum += util_mkstring(buffer, data);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2404 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 2405 : 	util_SendMesg(fd, LSSPROTO_JOBDAILY_SEND, buffer);  //0x79  121

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 79		 push	 121			; 00000079H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_J:

; 2406 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_J
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_J:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_J
$LN7@lssproto_J:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_J
$LN6@lssproto_J:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_JOBDAILY_send@@YAXHPAD@Z ENDP			; lssproto_JOBDAILY_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_STREET_VENDOR_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_STREET_VENDOR_send@@YAXHPAD@Z PROC		; lssproto_STREET_VENDOR_send, COMDAT

; 2373 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2374 : 	char buffer[16384];
; 2375 : 	int iChecksum = 0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2376 : 
; 2377 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_S
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_S
$LN4@lssproto_S:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_S:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2378 : 
; 2379 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_S

; 2380 : 	{
; 2381 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_S:

; 2382 : 	}
; 2383 : 
; 2384 : 	iChecksum += util_mkstring(buffer, data);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2385 : 	util_mkint(buffer,iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 2386 : 	util_SendMesg(fd,LSSPROTO_STREET_VENDOR_SEND,buffer); //0x74 116

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 74		 push	 116			; 00000074H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_S:

; 2387 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_S
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_S:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_S
$LN7@lssproto_S:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_S
$LN6@lssproto_S:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_STREET_VENDOR_send@@YAXHPAD@Z ENDP		; lssproto_STREET_VENDOR_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_BATTLESKILL_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_SkillNum$ = 12						; size = 4
?lssproto_BATTLESKILL_send@@YAXHH@Z PROC		; lssproto_BATTLESKILL_send, COMDAT

; 2267 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2268 : 	char buffer[16384];
; 2269 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2270 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_B
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_B
$LN4@lssproto_B:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_B:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2271 : 	iChecksum += util_mkint(buffer, SkillNum);	

  00065	8b 45 0c	 mov	 eax, DWORD PTR _SkillNum$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2272 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_B

; 2273 : 	{
; 2274 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_B:

; 2275 : 	}
; 2276 : 	util_mkint(buffer, iChecksum);	

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 2277 : 	util_SendMesg(fd, LSSPROTO_BATTLESKILL_SEND, buffer); //6E 110

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 6e		 push	 110			; 0000006eH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_B:

; 2278 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_B
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_B:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_B
$LN7@lssproto_B:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_B
$LN6@lssproto_B:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_BATTLESKILL_send@@YAXHH@Z ENDP		; lssproto_BATTLESKILL_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_ALCHEPLUS_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_ALCHEPLUS_send@@YAXHPAD@Z PROC		; lssproto_ALCHEPLUS_send, COMDAT

; 2254 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2255 : 	char buffer[16384];
; 2256 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2257 : 
; 2258 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_A
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_A
$LN3@lssproto_A:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_A:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2259 : 	iChecksum += util_mkstring(buffer, data);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2260 : 	util_mkint(buffer, iChecksum);

  00084	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0008a	50		 push	 eax
  0008b	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00097	83 c4 08	 add	 esp, 8

; 2261 : 	util_SendMesg(fd, LSSPROTO_ALCHEPLUS_SEND, buffer);

  0009a	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	68 87 00 00 00	 push	 135			; 00000087H
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_A:

; 2262 : }

  000b2	52		 push	 edx
  000b3	8b cd		 mov	 ecx, ebp
  000b5	50		 push	 eax
  000b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_A
  000bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c1	58		 pop	 eax
  000c2	5a		 pop	 edx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c9	33 cd		 xor	 ecx, ebp
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000d6	3b ec		 cmp	 ebp, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
  000e1	0f 1f 00	 npad	 3
$LN7@lssproto_A:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN6@lssproto_A
$LN6@lssproto_A:
  000ec	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000f0	00 40 00 00	 DD	 16384			; 00004000H
  000f4	00 00 00 00	 DD	 $LN5@lssproto_A
$LN5@lssproto_A:
  000f8	62		 DB	 98			; 00000062H
  000f9	75		 DB	 117			; 00000075H
  000fa	66		 DB	 102			; 00000066H
  000fb	66		 DB	 102			; 00000066H
  000fc	65		 DB	 101			; 00000065H
  000fd	72		 DB	 114			; 00000072H
  000fe	00		 DB	 0
?lssproto_ALCHEPLUS_send@@YAXHPAD@Z ENDP		; lssproto_ALCHEPLUS_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_RESIST_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_RESIST_send@@YAXHPAD@Z PROC			; lssproto_RESIST_send, COMDAT

; 2241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2242 : 	char buffer[16384];
; 2243 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2244 : 
; 2245 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_R
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_R
$LN3@lssproto_R:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_R:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2246 : 	iChecksum += util_mkstring(buffer, data);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2247 : 	util_mkint(buffer, iChecksum);

  00084	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0008a	50		 push	 eax
  0008b	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00097	83 c4 08	 add	 esp, 8

; 2248 : 	util_SendMesg(fd, LSSPROTO_RESIST_SEND, buffer);

  0009a	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 6c		 push	 108			; 0000006cH
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_R:

; 2249 : }

  000af	52		 push	 edx
  000b0	8b cd		 mov	 ecx, ebp
  000b2	50		 push	 eax
  000b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_R
  000b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000be	58		 pop	 eax
  000bf	5a		 pop	 edx
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	33 cd		 xor	 ecx, ebp
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
  000de	66 90		 npad	 2
$LN7@lssproto_R:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN6@lssproto_R
$LN6@lssproto_R:
  000e8	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000ec	00 40 00 00	 DD	 16384			; 00004000H
  000f0	00 00 00 00	 DD	 $LN5@lssproto_R
$LN5@lssproto_R:
  000f4	62		 DB	 98			; 00000062H
  000f5	75		 DB	 117			; 00000075H
  000f6	66		 DB	 102			; 00000066H
  000f7	66		 DB	 102			; 00000066H
  000f8	65		 DB	 101			; 00000065H
  000f9	72		 DB	 114			; 00000072H
  000fa	00		 DB	 0
?lssproto_RESIST_send@@YAXHPAD@Z ENDP			; lssproto_RESIST_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_CHATROOM_send@@YAXHPAD@Z
_TEXT	SEGMENT
_now_time$1 = -16416					; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_CHATROOM_send@@YAXHPAD@Z PROC			; lssproto_CHATROOM_send, COMDAT

; 2213 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2214 : 	char buffer[16384] = {0};

  0002c	c6 85 f8 bf ff
	ff 00		 mov	 BYTE PTR _buffer$[ebp], 0
  00033	68 ff 3f 00 00	 push	 16383			; 00003fffH
  00038	6a 00		 push	 0
  0003a	8d 85 f9 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp+1]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _memset
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2215 : 	int iChecksum=0;

  00049	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2216 : 
; 2217 : 	// WON FIX	防止传送太频繁
; 2218 : 	if( data[0] == 'B' ){

  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	6b c8 00	 imul	 ecx, eax, 0
  0005b	8b 55 0c	 mov	 edx, DWORD PTR _data$[ebp]
  0005e	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00062	83 f8 42	 cmp	 eax, 66			; 00000042H
  00065	75 3c		 jne	 SHORT $LN2@lssproto_C

; 2219 : 		unsigned int now_time = (unsigned int)time(NULL);

  00067	6a 00		 push	 0
  00069	e8 00 00 00 00	 call	 _time
  0006e	83 c4 04	 add	 esp, 4
  00071	89 85 e0 bf ff
	ff		 mov	 DWORD PTR _now_time$1[ebp], eax

; 2220 : 		static unsigned int old_time = 0;
; 2221 : 
; 2222 : 		if( now_time < old_time ){

  00077	8b 85 e0 bf ff
	ff		 mov	 eax, DWORD PTR _now_time$1[ebp]
  0007d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?old_time@?4??lssproto_CHATROOM_send@@YAXHPAD@Z@4IA
  00083	73 10		 jae	 SHORT $LN3@lssproto_C

; 2223 : 			SelRoomBtn = 1;	

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	66 a3 00 00 00
	00		 mov	 WORD PTR ?SelRoomBtn@@3FA, ax ; SelRoomBtn

; 2224 : 			return;

  00090	e9 81 00 00 00	 jmp	 $LN1@lssproto_C
$LN3@lssproto_C:

; 2225 : 		}
; 2226 : 		old_time = now_time + 2; // delay 2 秒

  00095	8b 85 e0 bf ff
	ff		 mov	 eax, DWORD PTR _now_time$1[ebp]
  0009b	83 c0 02	 add	 eax, 2
  0009e	a3 00 00 00 00	 mov	 DWORD PTR ?old_time@?4??lssproto_CHATROOM_send@@YAXHPAD@Z@4IA, eax
$LN2@lssproto_C:

; 2227 : 	}
; 2228 : 
; 2229 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN4@lssproto_C

; 2230 : 	{
; 2231 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN4@lssproto_C:

; 2232 : 	}
; 2233 : 	iChecksum += util_mkstring(buffer, data);

  000cc	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2234 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 2235 : 	util_SendMesg(fd, LSSPROTO_CHATROOM_SEND, buffer); // 0x70 112

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 70		 push	 112			; 00000070H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@lssproto_C:

; 2236 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_C
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_C:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_C
$LN7@lssproto_C:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_C
$LN6@lssproto_C:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_CHATROOM_send@@YAXHPAD@Z ENDP			; lssproto_CHATROOM_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_KTEAM_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_si$ = 12						; size = 4
?lssproto_KTEAM_send@@YAXHH@Z PROC			; lssproto_KTEAM_send, COMDAT

; 1581 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1582 : 	char buffer[16384];
; 1583 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1584 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_K
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_K
$LN3@lssproto_K:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_K:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1585 : 	iChecksum += util_mkint(buffer, si);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _si$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1586 : 	util_mkint(buffer, iChecksum);

  00084	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0008a	50		 push	 eax
  0008b	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00097	83 c4 08	 add	 esp, 8

; 1587 : 	util_SendMesg(fd, LSSPROTO_KTEAM_SEND, buffer);

  0009a	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 6a		 push	 106			; 0000006aH
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_K:

; 1588 : }

  000af	52		 push	 edx
  000b0	8b cd		 mov	 ecx, ebp
  000b2	50		 push	 eax
  000b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_K
  000b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000be	58		 pop	 eax
  000bf	5a		 pop	 edx
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	33 cd		 xor	 ecx, ebp
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
  000de	66 90		 npad	 2
$LN7@lssproto_K:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN6@lssproto_K
$LN6@lssproto_K:
  000e8	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000ec	00 40 00 00	 DD	 16384			; 00004000H
  000f0	00 00 00 00	 DD	 $LN5@lssproto_K
$LN5@lssproto_K:
  000f4	62		 DB	 98			; 00000062H
  000f5	75		 DB	 117			; 00000075H
  000f6	66		 DB	 102			; 00000066H
  000f7	66		 DB	 102			; 00000066H
  000f8	65		 DB	 101			; 00000065H
  000f9	72		 DB	 114			; 00000072H
  000fa	00		 DB	 0
?lssproto_KTEAM_send@@YAXHH@Z ENDP			; lssproto_KTEAM_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_MA_send@@YAXHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_nMind$ = 20						; size = 4
?lssproto_MA_send@@YAXHHHH@Z PROC			; lssproto_MA_send, COMDAT

; 2353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2354 : 	char buffer[16384];
; 2355 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2356 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_M
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_M
$LN4@lssproto_M:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_M:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2357 : 	iChecksum += util_mkint(buffer, nMind);	

  00065	8b 45 14	 mov	 eax, DWORD PTR _nMind$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2358 : 	iChecksum += util_mkint(buffer, x);	

  00084	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2359 : 
; 2360 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN2@lssproto_M

; 2361 : 	{
; 2362 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_M:

; 2363 : 	}
; 2364 : 
; 2365 : 	iChecksum += util_mkint(buffer, y);	

  000cc	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2366 : 	util_mkint(buffer, iChecksum);	

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 2367 : 	util_SendMesg(fd, LSSPROTO_MA_SEND, buffer);  //0x62  98

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 62		 push	 98			; 00000062H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_M:

; 2368 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_M
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_M:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_M
$LN7@lssproto_M:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_M
$LN6@lssproto_M:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_MA_send@@YAXHHHH@Z ENDP			; lssproto_MA_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_DM_send@@YAXH@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_buffer$ = -8						; size = 2
_fd$ = 8						; size = 4
?lssproto_DM_send@@YAXH@Z PROC				; lssproto_DM_send, COMDAT

; 2323 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2324 : 	char buffer[2];
; 2325 : 	buffer[0] = '\0';

  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	6b c8 00	 imul	 ecx, eax, 0
  00026	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0002c	83 bd 2c ff ff
	ff 02		 cmp	 DWORD PTR $T1[ebp], 2
  00033	73 02		 jae	 SHORT $LN3@lssproto_D
  00035	eb 05		 jmp	 SHORT $LN4@lssproto_D
$LN3@lssproto_D:
  00037	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_D:
  0003c	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00042	c6 44 15 f8 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2326 : 	util_SendMesg(fd, LSSPROTO_DM_SEND, buffer);

  00047	8d 45 f8	 lea	 eax, DWORD PTR _buffer$[ebp]
  0004a	50		 push	 eax
  0004b	6a 63		 push	 99			; 00000063H
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_D:

; 2327 : }

  00059	52		 push	 edx
  0005a	8b cd		 mov	 ecx, ebp
  0005c	50		 push	 eax
  0005d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_D
  00063	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00068	58		 pop	 eax
  00069	5a		 pop	 edx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
  0007e	66 90		 npad	 2
$LN7@lssproto_D:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN6@lssproto_D
$LN6@lssproto_D:
  00088	f8 ff ff ff	 DD	 -8			; fffffff8H
  0008c	02 00 00 00	 DD	 2
  00090	00 00 00 00	 DD	 $LN5@lssproto_D
$LN5@lssproto_D:
  00094	62		 DB	 98			; 00000062H
  00095	75		 DB	 117			; 00000075H
  00096	66		 DB	 102			; 00000066H
  00097	66		 DB	 102			; 00000066H
  00098	65		 DB	 101			; 00000065H
  00099	72		 DB	 114			; 00000072H
  0009a	00		 DB	 0
?lssproto_DM_send@@YAXH@Z ENDP				; lssproto_DM_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_BM_send@@YAXHH@Z
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_iindex$ = 12						; size = 4
?lssproto_BM_send@@YAXHH@Z PROC				; lssproto_BM_send, COMDAT

; 2340 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2341 : #ifdef _BLACK_MARKET
; 2342 : 	char buffer[16384];
; 2343 : 	int iChecksum=0;
; 2344 : 	buffer[0] = '\0';
; 2345 : 	iChecksum += util_mkint(buffer, iindex);	
; 2346 : 	util_mkint(buffer, iChecksum);	
; 2347 : 	util_SendMesg(fd, LSSPROTO_BM_SEND, buffer);
; 2348 : #endif
; 2349 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?lssproto_BM_send@@YAXHH@Z ENDP				; lssproto_BM_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_PETST_send@@YAXHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$2 = -16404					; size = 4
_buffer$3 = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_nPet$ = 12						; size = 4
_sPet$ = 16						; size = 4
?lssproto_PETST_send@@YAXHHH@Z PROC			; lssproto_PETST_send, COMDAT

; 2300 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2301 : 	//cary
; 2302 : 	if( dwServer == GS){

  0002c	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?dwServer@@3KA, 3 ; dwServer
  00033	0f 85 cb 00 00
	00		 jne	 $LN4@lssproto_P

; 2303 : 		char buffer[16384];
; 2304 : 	    int iChecksum=0;

  00039	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$2[ebp], 0

; 2305 : 
; 2306 : 	    buffer[0] = '\0';

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	6b c8 00	 imul	 ecx, eax, 0
  0004b	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00051	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0005b	73 02		 jae	 SHORT $LN5@lssproto_P
  0005d	eb 05		 jmp	 SHORT $LN6@lssproto_P
$LN5@lssproto_P:
  0005f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN6@lssproto_P:
  00064	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0006a	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$3[ebp+edx], 0

; 2307 : 
; 2308 : 		if (g_服务器 == SERVER_台服)

  00072	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  00079	75 20		 jne	 SHORT $LN3@lssproto_P

; 2309 : 		{
; 2310 : 			iChecksum += util_mkint(buffer, int台服发包);

  0007b	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00080	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0008c	83 c4 08	 add	 esp, 8
  0008f	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$2[ebp]
  00095	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$2[ebp], eax
$LN3@lssproto_P:

; 2311 : 		}
; 2312 : 
; 2313 : 	    iChecksum += util_mkint(buffer, nPet);

  0009b	8b 45 0c	 mov	 eax, DWORD PTR _nPet$[ebp]
  0009e	50		 push	 eax
  0009f	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$3[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000ab	83 c4 08	 add	 esp, 8
  000ae	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$2[ebp]
  000b4	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$2[ebp], eax

; 2314 : 	    iChecksum += util_mkint(buffer, sPet);	

  000ba	8b 45 10	 mov	 eax, DWORD PTR _sPet$[ebp]
  000bd	50		 push	 eax
  000be	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$3[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000ca	83 c4 08	 add	 esp, 8
  000cd	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$2[ebp]
  000d3	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$2[ebp], eax

; 2315 : 	    util_mkint(buffer, iChecksum);	

  000d9	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$2[ebp]
  000df	50		 push	 eax
  000e0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$3[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000ec	83 c4 08	 add	 esp, 8

; 2316 : 		util_SendMesg(fd, LSSPROTO_PETST_SEND, buffer);  //0x60 96

  000ef	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  000f5	50		 push	 eax
  000f6	6a 60		 push	 96			; 00000060H
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@lssproto_P:

; 2317 : 	}
; 2318 : }

  00104	52		 push	 edx
  00105	8b cd		 mov	 ecx, ebp
  00107	50		 push	 eax
  00108	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@lssproto_P
  0010e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00113	58		 pop	 eax
  00114	5a		 pop	 edx
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx
  00118	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011b	33 cd		 xor	 ecx, ebp
  0011d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00122	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00128	3b ec		 cmp	 ebp, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
  00133	90		 npad	 1
$LN9@lssproto_P:
  00134	01 00 00 00	 DD	 1
  00138	00 00 00 00	 DD	 $LN8@lssproto_P
$LN8@lssproto_P:
  0013c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00140	00 40 00 00	 DD	 16384			; 00004000H
  00144	00 00 00 00	 DD	 $LN7@lssproto_P
$LN7@lssproto_P:
  00148	62		 DB	 98			; 00000062H
  00149	75		 DB	 117			; 00000075H
  0014a	66		 DB	 102			; 00000066H
  0014b	66		 DB	 102			; 00000066H
  0014c	65		 DB	 101			; 00000065H
  0014d	72		 DB	 114			; 00000072H
  0014e	00		 DB	 0
?lssproto_PETST_send@@YAXHHH@Z ENDP			; lssproto_PETST_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_FM_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_FM_send@@YAXHPAD@Z PROC			; lssproto_FM_send, COMDAT

; 2282 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2283 : 	char buffer[16384];
; 2284 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2285 : 
; 2286 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_F
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_F
$LN4@lssproto_F:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_F:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2287 : 	iChecksum += util_mkstring(buffer, data);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2288 : 
; 2289 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_F

; 2290 : 	{
; 2291 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_F:

; 2292 : 	}
; 2293 : 
; 2294 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 2295 : 	util_SendMesg(fd, LSSPROTO_FM_SEND, buffer);  //0x5e  94

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 5e		 push	 94			; 0000005eH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_F:

; 2296 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_F
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_F:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_F
$LN7@lssproto_F:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_F
$LN6@lssproto_F:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_FM_send@@YAXHPAD@Z ENDP			; lssproto_FM_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_TD_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_TD_send@@YAXHPAD@Z PROC			; lssproto_TD_send, COMDAT

; 2196 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2197 : 	char buffer[16384];
; 2198 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2199 : 
; 2200 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_T
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_T
$LN4@lssproto_T:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_T:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2201 : 	iChecksum += util_mkstring(buffer, data);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2202 : 
; 2203 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_T

; 2204 : 	{
; 2205 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_T:

; 2206 : 	}
; 2207 : 
; 2208 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 2209 : 	util_SendMesg(fd, LSSPROTO_TD_SEND, buffer);  //0x5b  91

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 5b		 push	 91			; 0000005bH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_T:

; 2210 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_T
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_T:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_T
$LN7@lssproto_T:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_T
$LN6@lssproto_T:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_TD_send@@YAXHPAD@Z ENDP			; lssproto_TD_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_Shutdown_send@@YAXHPADH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_passwd$ = 12						; size = 4
_min$ = 16						; size = 4
?lssproto_Shutdown_send@@YAXHPADH@Z PROC		; lssproto_Shutdown_send, COMDAT

; 2178 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2179 : 	char buffer[16384];
; 2180 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2181 : 
; 2182 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_S
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_S
$LN4@lssproto_S:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_S:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2183 : 
; 2184 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_S

; 2185 : 	{
; 2186 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_S:

; 2187 : 	}
; 2188 : 
; 2189 : 	iChecksum += util_mkstring(buffer, passwd);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _passwd$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2190 : 	iChecksum += util_mkint(buffer, min);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _min$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2191 : 	util_mkint(buffer, iChecksum);

  000cc	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000df	83 c4 08	 add	 esp, 8

; 2192 : 	util_SendMesg(fd, LSSPROTO_SHUTDOWN_SEND, buffer);  //0x59  89

  000e2	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	6a 59		 push	 89			; 00000059H
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_S:

; 2193 : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_S
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN8@lssproto_S:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN7@lssproto_S
$LN7@lssproto_S:
  00130	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00134	00 40 00 00	 DD	 16384			; 00004000H
  00138	00 00 00 00	 DD	 $LN6@lssproto_S
$LN6@lssproto_S:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
?lssproto_Shutdown_send@@YAXHPADH@Z ENDP		; lssproto_Shutdown_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_Echo_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_test$ = 12						; size = 4
?lssproto_Echo_send@@YAXHPAD@Z PROC			; lssproto_Echo_send, COMDAT

; 2161 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2162 : 	char buffer[16384];
; 2163 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2164 : 
; 2165 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_E
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_E
$LN4@lssproto_E:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_E:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2166 : 
; 2167 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_E

; 2168 : 	{
; 2169 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_E:

; 2170 : 	}
; 2171 : 
; 2172 : 	iChecksum += util_mkstring(buffer, test);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _test$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2173 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 2174 : 	util_SendMesg(fd, LSSPROTO_ECHO_SEND, buffer);  //0x57  87

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 57		 push	 87			; 00000057H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_E:

; 2175 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_E
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_E:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_E
$LN7@lssproto_E:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_E
$LN6@lssproto_E:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_Echo_send@@YAXHPAD@Z ENDP			; lssproto_Echo_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_PlayerNumGet_send@@YAXH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_PlayerNumGet_send@@YAXH@Z PROC		; lssproto_PlayerNumGet_send, COMDAT

; 2151 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2152 : 	char buffer[16384];
; 2153 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2154 : 
; 2155 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_P
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_P
$LN3@lssproto_P:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_P:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2156 : 	util_mkint(buffer, iChecksum);

  00065	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0006b	50		 push	 eax
  0006c	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00078	83 c4 08	 add	 esp, 8

; 2157 : 	util_SendMesg(fd, LSSPROTO_PLAYERNUMGET_SEND, buffer);

  0007b	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00081	50		 push	 eax
  00082	6a 55		 push	 85			; 00000055H
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_P:

; 2158 : }

  00090	52		 push	 edx
  00091	8b cd		 mov	 ecx, ebp
  00093	50		 push	 eax
  00094	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_P
  0009a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009f	58		 pop	 eax
  000a0	5a		 pop	 edx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN7@lssproto_P:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@lssproto_P
$LN6@lssproto_P:
  000c8	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000cc	00 40 00 00	 DD	 16384			; 00004000H
  000d0	00 00 00 00	 DD	 $LN5@lssproto_P
$LN5@lssproto_P:
  000d4	62		 DB	 98			; 00000062H
  000d5	75		 DB	 117			; 00000075H
  000d6	66		 DB	 102			; 00000066H
  000d7	66		 DB	 102			; 00000066H
  000d8	65		 DB	 101			; 00000065H
  000d9	72		 DB	 114			; 00000072H
  000da	00		 DB	 0
?lssproto_PlayerNumGet_send@@YAXH@Z ENDP		; lssproto_PlayerNumGet_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_ProcGet_send@@YAXH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_ProcGet_send@@YAXH@Z PROC			; lssproto_ProcGet_send, COMDAT

; 2141 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2142 : 	char buffer[16384];
; 2143 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2144 : 
; 2145 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_P
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_P
$LN3@lssproto_P:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_P:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2146 : 	util_mkint(buffer, iChecksum);

  00065	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0006b	50		 push	 eax
  0006c	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00078	83 c4 08	 add	 esp, 8

; 2147 : 	util_SendMesg(fd, LSSPROTO_PROCGET_SEND, buffer);

  0007b	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00081	50		 push	 eax
  00082	6a 53		 push	 83			; 00000053H
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_P:

; 2148 : }

  00090	52		 push	 edx
  00091	8b cd		 mov	 ecx, ebp
  00093	50		 push	 eax
  00094	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_P
  0009a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009f	58		 pop	 eax
  000a0	5a		 pop	 edx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN7@lssproto_P:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@lssproto_P
$LN6@lssproto_P:
  000c8	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000cc	00 40 00 00	 DD	 16384			; 00004000H
  000d0	00 00 00 00	 DD	 $LN5@lssproto_P
$LN5@lssproto_P:
  000d4	62		 DB	 98			; 00000062H
  000d5	75		 DB	 117			; 00000075H
  000d6	66		 DB	 102			; 00000066H
  000d7	66		 DB	 102			; 00000066H
  000d8	65		 DB	 101			; 00000065H
  000d9	72		 DB	 114			; 00000072H
  000da	00		 DB	 0
?lssproto_ProcGet_send@@YAXH@Z ENDP			; lssproto_ProcGet_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_CharLogout_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_Flg$ = 12						; size = 4
?lssproto_CharLogout_send@@YAXHH@Z PROC			; lssproto_CharLogout_send, COMDAT

; 2123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2124 : 	char buffer[16384];
; 2125 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2126 : 
; 2127 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_C
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_C
$LN4@lssproto_C:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_C:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2128 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_C

; 2129 : 	{
; 2130 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_C:

; 2131 : 	}
; 2132 : 
; 2133 : #ifdef _CHAR_NEWLOGOUT
; 2134 : 	iChecksum += util_mkint( buffer, Flg);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _Flg$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2135 : #endif
; 2136 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 2137 : 	util_SendMesg(fd, LSSPROTO_CHARLOGOUT_SEND, buffer);  //0x51  81

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 51		 push	 81			; 00000051H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_C:

; 2138 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_C
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_C:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_C
$LN7@lssproto_C:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_C
$LN6@lssproto_C:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_CharLogout_send@@YAXHH@Z ENDP			; lssproto_CharLogout_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_CharList_send@@YAXH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_CharList_send@@YAXH@Z PROC			; lssproto_CharList_send, COMDAT

; 2100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2101 : 	char buffer[16384];
; 2102 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2103 : 
; 2104 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_C
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_C
$LN3@lssproto_C:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_C:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2105 : 	//if (g_服务器 == SERVER_台服)
; 2106 : 	//{
; 2107 : 	//	util_mkint(buffer, int台服发包);
; 2108 : 	//}
; 2109 : 	util_mkint(buffer, iChecksum);

  00065	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0006b	50		 push	 eax
  0006c	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00078	83 c4 08	 add	 esp, 8

; 2110 : 	util_SendMesg(fd, LSSPROTO_CHARLIST_SEND, buffer);

  0007b	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00081	50		 push	 eax
  00082	6a 4f		 push	 79			; 0000004fH
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_C:

; 2111 : }

  00090	52		 push	 edx
  00091	8b cd		 mov	 ecx, ebp
  00093	50		 push	 eax
  00094	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_C
  0009a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009f	58		 pop	 eax
  000a0	5a		 pop	 edx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN7@lssproto_C:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@lssproto_C
$LN6@lssproto_C:
  000c8	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000cc	00 40 00 00	 DD	 16384			; 00004000H
  000d0	00 00 00 00	 DD	 $LN5@lssproto_C
$LN5@lssproto_C:
  000d4	62		 DB	 98			; 00000062H
  000d5	75		 DB	 117			; 00000075H
  000d6	66		 DB	 102			; 00000066H
  000d7	66		 DB	 102			; 00000066H
  000d8	65		 DB	 101			; 00000065H
  000d9	72		 DB	 114			; 00000072H
  000da	00		 DB	 0
?lssproto_CharList_send@@YAXH@Z ENDP			; lssproto_CharList_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_CharLogin_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_charname$ = 12						; size = 4
?lssproto_CharLogin_send@@YAXHPAD@Z PROC		; lssproto_CharLogin_send, COMDAT

; 2090 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2091 : 	char buffer[16384];
; 2092 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2093 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_C
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_C
$LN3@lssproto_C:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_C:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2094 : 	iChecksum += util_mkstring(buffer, charname);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _charname$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2095 : 	util_mkint(buffer, iChecksum);

  00084	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0008a	50		 push	 eax
  0008b	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00097	83 c4 08	 add	 esp, 8

; 2096 : 	util_SendMesg(fd, LSSPROTO_CHARLOGIN_SEND, buffer); //0x4D 77

  0009a	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 4d		 push	 77			; 0000004dH
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_C:

; 2097 : }

  000af	52		 push	 edx
  000b0	8b cd		 mov	 ecx, ebp
  000b2	50		 push	 eax
  000b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_C
  000b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000be	58		 pop	 eax
  000bf	5a		 pop	 edx
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	33 cd		 xor	 ecx, ebp
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
  000de	66 90		 npad	 2
$LN7@lssproto_C:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN6@lssproto_C
$LN6@lssproto_C:
  000e8	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000ec	00 40 00 00	 DD	 16384			; 00004000H
  000f0	00 00 00 00	 DD	 $LN5@lssproto_C
$LN5@lssproto_C:
  000f4	62		 DB	 98			; 00000062H
  000f5	75		 DB	 117			; 00000075H
  000f6	66		 DB	 102			; 00000066H
  000f7	66		 DB	 102			; 00000066H
  000f8	65		 DB	 101			; 00000065H
  000f9	72		 DB	 114			; 00000072H
  000fa	00		 DB	 0
?lssproto_CharLogin_send@@YAXHPAD@Z ENDP		; lssproto_CharLogin_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_CharDelete_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_charname$ = 12						; size = 4
?lssproto_CharDelete_send@@YAXHPAD@Z PROC		; lssproto_CharDelete_send, COMDAT

; 2069 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2070 : 	char buffer[16384];
; 2071 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2072 : 
; 2073 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_C
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_C
$LN3@lssproto_C:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_C:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2074 : 	iChecksum += util_mkstring(buffer, charname);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _charname$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2075 : #ifdef _NB_DELCHARTWOPASS
; 2076 : 	iChecksum += util_mkstring(buffer, passwd.buffer);

  00084	68 00 00 00 00	 push	 OFFSET ?passwd@@3USTR_BUFFER@@A ; passwd
  00089	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00095	83 c4 08	 add	 esp, 8
  00098	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2077 : #endif
; 2078 : 	util_mkint(buffer, iChecksum);

  000a4	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000aa	50		 push	 eax
  000ab	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000b7	83 c4 08	 add	 esp, 8

; 2079 : 
; 2080 : 	passwd.cnt = 0;

  000ba	c6 05 07 01 00
	00 00		 mov	 BYTE PTR ?passwd@@3USTR_BUFFER@@A+263, 0

; 2081 : 	passwd.cursor=0;

  000c1	c6 05 09 01 00
	00 00		 mov	 BYTE PTR ?passwd@@3USTR_BUFFER@@A+265, 0

; 2082 : 	ZeroMemory(passwd.buffer,sizeof(passwd.buffer));

  000c8	68 04 01 00 00	 push	 260			; 00000104H
  000cd	6a 00		 push	 0
  000cf	68 00 00 00 00	 push	 OFFSET ?passwd@@3USTR_BUFFER@@A ; passwd
  000d4	e8 00 00 00 00	 call	 _memset
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2083 : 
; 2084 : 	util_SendMesg(fd, LSSPROTO_CHARDELETE_SEND, buffer); //0x4b 75

  000dc	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e2	50		 push	 eax
  000e3	6a 4b		 push	 75			; 0000004bH
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_C:

; 2085 : }

  000f1	52		 push	 edx
  000f2	8b cd		 mov	 ecx, ebp
  000f4	50		 push	 eax
  000f5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_C
  000fb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00100	58		 pop	 eax
  00101	5a		 pop	 edx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00108	33 cd		 xor	 ecx, ebp
  0010a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010f	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00115	3b ec		 cmp	 ebp, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN7@lssproto_C:
  00120	01 00 00 00	 DD	 1
  00124	00 00 00 00	 DD	 $LN6@lssproto_C
$LN6@lssproto_C:
  00128	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  0012c	00 40 00 00	 DD	 16384			; 00004000H
  00130	00 00 00 00	 DD	 $LN5@lssproto_C
$LN5@lssproto_C:
  00134	62		 DB	 98			; 00000062H
  00135	75		 DB	 117			; 00000075H
  00136	66		 DB	 102			; 00000066H
  00137	66		 DB	 102			; 00000066H
  00138	65		 DB	 101			; 00000065H
  00139	72		 DB	 114			; 00000072H
  0013a	00		 DB	 0
?lssproto_CharDelete_send@@YAXHPAD@Z ENDP		; lssproto_CharDelete_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_CreateNewChar_send@@YAXHHPADHHHHHHHHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dataplacenum$ = 12					; size = 4
_charname$ = 16						; size = 4
_imgno$ = 20						; size = 4
_faceimgno$ = 24					; size = 4
_vital$ = 28						; size = 4
_str$ = 32						; size = 4
_tgh$ = 36						; size = 4
_dex$ = 40						; size = 4
_earth$ = 44						; size = 4
_water$ = 48						; size = 4
_fire$ = 52						; size = 4
_wind$ = 56						; size = 4
_hometown$ = 60						; size = 4
?lssproto_CreateNewChar_send@@YAXHHPADHHHHHHHHHHH@Z PROC ; lssproto_CreateNewChar_send, COMDAT

; 2037 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2038 : 	char buffer[16384];
; 2039 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2040 : 
; 2041 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_C
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_C
$LN4@lssproto_C:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_C:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2042 : 	iChecksum += util_mkint(buffer, dataplacenum);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _dataplacenum$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2043 : 	iChecksum += util_mkstring(buffer, charname);

  00084	8b 45 10	 mov	 eax, DWORD PTR _charname$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2044 : 	iChecksum += util_mkint(buffer, imgno);

  000a3	8b 45 14	 mov	 eax, DWORD PTR _imgno$[ebp]
  000a6	50		 push	 eax
  000a7	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000b3	83 c4 08	 add	 esp, 8
  000b6	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000bc	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2045 : 	iChecksum += util_mkint(buffer, faceimgno);

  000c2	8b 45 18	 mov	 eax, DWORD PTR _faceimgno$[ebp]
  000c5	50		 push	 eax
  000c6	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000d2	83 c4 08	 add	 esp, 8
  000d5	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000db	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2046 : 	iChecksum += util_mkint(buffer, vital);

  000e1	8b 45 1c	 mov	 eax, DWORD PTR _vital$[ebp]
  000e4	50		 push	 eax
  000e5	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000f1	83 c4 08	 add	 esp, 8
  000f4	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000fa	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2047 : 	iChecksum += util_mkint(buffer, str);

  00100	8b 45 20	 mov	 eax, DWORD PTR _str$[ebp]
  00103	50		 push	 eax
  00104	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00110	83 c4 08	 add	 esp, 8
  00113	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00119	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2048 : 	iChecksum += util_mkint(buffer, tgh);

  0011f	8b 45 24	 mov	 eax, DWORD PTR _tgh$[ebp]
  00122	50		 push	 eax
  00123	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0012f	83 c4 08	 add	 esp, 8
  00132	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00138	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2049 : 
; 2050 : 	if (g_服务器 == SERVER_台服)

  0013e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  00145	75 20		 jne	 SHORT $LN2@lssproto_C

; 2051 : 	{
; 2052 : 		iChecksum += util_mkint(buffer, int台服发包);

  00147	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0014c	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00158	83 c4 08	 add	 esp, 8
  0015b	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00161	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_C:

; 2053 : 	}
; 2054 : 
; 2055 : 	iChecksum += util_mkint(buffer, dex);

  00167	8b 45 28	 mov	 eax, DWORD PTR _dex$[ebp]
  0016a	50		 push	 eax
  0016b	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00171	51		 push	 ecx
  00172	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00177	83 c4 08	 add	 esp, 8
  0017a	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00180	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2056 : 	iChecksum += util_mkint(buffer, earth);

  00186	8b 45 2c	 mov	 eax, DWORD PTR _earth$[ebp]
  00189	50		 push	 eax
  0018a	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00190	51		 push	 ecx
  00191	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00196	83 c4 08	 add	 esp, 8
  00199	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0019f	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2057 : 	iChecksum += util_mkint(buffer, water);

  001a5	8b 45 30	 mov	 eax, DWORD PTR _water$[ebp]
  001a8	50		 push	 eax
  001a9	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  001b5	83 c4 08	 add	 esp, 8
  001b8	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  001be	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2058 : 	iChecksum += util_mkint(buffer, fire);

  001c4	8b 45 34	 mov	 eax, DWORD PTR _fire$[ebp]
  001c7	50		 push	 eax
  001c8	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  001ce	51		 push	 ecx
  001cf	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  001d4	83 c4 08	 add	 esp, 8
  001d7	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  001dd	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2059 : 	iChecksum += util_mkint(buffer, wind);

  001e3	8b 45 38	 mov	 eax, DWORD PTR _wind$[ebp]
  001e6	50		 push	 eax
  001e7	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  001ed	51		 push	 ecx
  001ee	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  001f3	83 c4 08	 add	 esp, 8
  001f6	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  001fc	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2060 : 	iChecksum += util_mkint(buffer, hometown);

  00202	8b 45 3c	 mov	 eax, DWORD PTR _hometown$[ebp]
  00205	50		 push	 eax
  00206	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0020c	51		 push	 ecx
  0020d	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00212	83 c4 08	 add	 esp, 8
  00215	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0021b	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2061 : 	util_mkint(buffer, iChecksum);

  00221	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00227	50		 push	 eax
  00228	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0022e	51		 push	 ecx
  0022f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00234	83 c4 08	 add	 esp, 8

; 2062 : 	util_SendMesg(fd, LSSPROTO_CREATENEWCHAR_SEND, buffer);  //0x49  73

  00237	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0023d	50		 push	 eax
  0023e	6a 49		 push	 73			; 00000049H
  00240	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00243	51		 push	 ecx
  00244	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00249	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_C:

; 2063 : }

  0024c	52		 push	 edx
  0024d	8b cd		 mov	 ecx, ebp
  0024f	50		 push	 eax
  00250	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_C
  00256	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0025b	58		 pop	 eax
  0025c	5a		 pop	 edx
  0025d	5f		 pop	 edi
  0025e	5e		 pop	 esi
  0025f	5b		 pop	 ebx
  00260	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00263	33 cd		 xor	 ecx, ebp
  00265	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026a	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00270	3b ec		 cmp	 ebp, esp
  00272	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00277	8b e5		 mov	 esp, ebp
  00279	5d		 pop	 ebp
  0027a	c3		 ret	 0
  0027b	90		 npad	 1
$LN8@lssproto_C:
  0027c	01 00 00 00	 DD	 1
  00280	00 00 00 00	 DD	 $LN7@lssproto_C
$LN7@lssproto_C:
  00284	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00288	00 40 00 00	 DD	 16384			; 00004000H
  0028c	00 00 00 00	 DD	 $LN6@lssproto_C
$LN6@lssproto_C:
  00290	62		 DB	 98			; 00000062H
  00291	75		 DB	 117			; 00000075H
  00292	66		 DB	 102			; 00000066H
  00293	66		 DB	 102			; 00000066H
  00294	65		 DB	 101			; 00000065H
  00295	72		 DB	 114			; 00000072H
  00296	00		 DB	 0
?lssproto_CreateNewChar_send@@YAXHHPADHHHHHHHHHHH@Z ENDP ; lssproto_CreateNewChar_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_ClientLogin_send@@YAXHPAD0@Z
_TEXT	SEGMENT
$T1 = -18096						; size = 4
_CpuCode$ = -16548					; size = 64
_MacCode$ = -16476					; size = 64
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_cdkey$ = 12						; size = 4
_passwd$ = 16						; size = 4
?lssproto_ClientLogin_send@@YAXHPAD0@Z PROC		; lssproto_ClientLogin_send, COMDAT

; 2007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 b4 46 00 00	 mov	 eax, 18100		; 000046b4H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd 4c b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-18100]
  00016	b9 ad 11 00 00	 mov	 ecx, 4525		; 000011adH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2008 : 	extern int* g_pMappingRecv;
; 2009 : 
; 2010 : 	if (g_pMappingRecv)

  0002c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pMappingRecv@@3PAHA, 0 ; g_pMappingRecv
  00033	74 0a		 je	 SHORT $LN2@lssproto_C

; 2011 : 	{
; 2012 : 		JL_转到外挂发登陆包();

  00035	e8 00 00 00 00	 call	 ?JL_转到外挂发登陆包@@YAXXZ ; JL_转到外挂发登陆包

; 2013 : 		return;

  0003a	e9 24 01 00 00	 jmp	 $LN3@lssproto_C
$LN2@lssproto_C:

; 2014 : 	}
; 2015 : 
; 2016 : 	char buffer[16384];
; 2017 : 	int iChecksum=0;

  0003f	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 2018 : 	
; 2019 : 	char MacCode[64];
; 2020 : 	char CpuCode[64];
; 2021 : 	getMAC(MacCode);

  00049	8d 85 a4 bf ff
	ff		 lea	 eax, DWORD PTR _MacCode$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?getMAC@@YAHPAD@Z	; getMAC
  00055	83 c4 04	 add	 esp, 4

; 2022 : 	getCpuId(CpuCode);

  00058	8d 85 5c bf ff
	ff		 lea	 eax, DWORD PTR _CpuCode$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?getCpuId@@YAHPAD@Z	; getCpuId
  00064	83 c4 04	 add	 esp, 4

; 2023 : 
; 2024 : 	buffer[0] = '\0';

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c8 00	 imul	 ecx, eax, 0
  0006f	89 8d 50 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00075	81 bd 50 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0007f	73 02		 jae	 SHORT $LN4@lssproto_C
  00081	eb 05		 jmp	 SHORT $LN5@lssproto_C
$LN4@lssproto_C:
  00083	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_C:
  00088	8b 95 50 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0008e	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 2025 : 	//extern char PersonalKey[32];
; 2026 : 	iChecksum += util_mkstring(buffer, cdkey);

  00096	8b 45 0c	 mov	 eax, DWORD PTR _cdkey$[ebp]
  00099	50		 push	 eax
  0009a	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000a6	83 c4 08	 add	 esp, 8
  000a9	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000af	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2027 : 	iChecksum += util_mkstring(buffer, passwd);

  000b5	8b 45 10	 mov	 eax, DWORD PTR _passwd$[ebp]
  000b8	50		 push	 eax
  000b9	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000c5	83 c4 08	 add	 esp, 8
  000c8	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000ce	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2028 : 	iChecksum += util_mkstring(buffer, MacCode);

  000d4	8d 85 a4 bf ff
	ff		 lea	 eax, DWORD PTR _MacCode$[ebp]
  000da	50		 push	 eax
  000db	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000e7	83 c4 08	 add	 esp, 8
  000ea	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000f0	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2029 : 	iChecksum += util_mkstring(buffer, CpuCode);

  000f6	8d 85 5c bf ff
	ff		 lea	 eax, DWORD PTR _CpuCode$[ebp]
  000fc	50		 push	 eax
  000fd	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00109	83 c4 08	 add	 esp, 8
  0010c	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00112	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2030 : 	iChecksum += util_mkstring(buffer, _服务器标识);

  00118	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHEDILN@ShiQiMax?$AA@
  0011d	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00129	83 c4 08	 add	 esp, 8
  0012c	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00132	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 2031 : 	util_mkint(buffer, iChecksum);

  00138	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0013e	50		 push	 eax
  0013f	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00145	51		 push	 ecx
  00146	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0014b	83 c4 08	 add	 esp, 8

; 2032 : 
; 2033 : 	util_SendMesg(fd, LSSPROTO_CLIENTLOGIN_SEND, buffer);   //0x47  71

  0014e	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00154	50		 push	 eax
  00155	6a 47		 push	 71			; 00000047H
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0015a	51		 push	 ecx
  0015b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00160	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_C:

; 2034 : }

  00163	52		 push	 edx
  00164	8b cd		 mov	 ecx, ebp
  00166	50		 push	 eax
  00167	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@lssproto_C
  0016d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00172	58		 pop	 eax
  00173	5a		 pop	 edx
  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx
  00177	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017a	33 cd		 xor	 ecx, ebp
  0017c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00181	81 c4 b4 46 00
	00		 add	 esp, 18100		; 000046b4H
  00187	3b ec		 cmp	 ebp, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c3		 ret	 0
  00192	66 90		 npad	 2
$LN10@lssproto_C:
  00194	03 00 00 00	 DD	 3
  00198	00 00 00 00	 DD	 $LN9@lssproto_C
$LN9@lssproto_C:
  0019c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  001a0	00 40 00 00	 DD	 16384			; 00004000H
  001a4	00 00 00 00	 DD	 $LN6@lssproto_C
  001a8	a4 bf ff ff	 DD	 -16476			; ffffbfa4H
  001ac	40 00 00 00	 DD	 64			; 00000040H
  001b0	00 00 00 00	 DD	 $LN7@lssproto_C
  001b4	5c bf ff ff	 DD	 -16548			; ffffbf5cH
  001b8	40 00 00 00	 DD	 64			; 00000040H
  001bc	00 00 00 00	 DD	 $LN8@lssproto_C
$LN8@lssproto_C:
  001c0	43		 DB	 67			; 00000043H
  001c1	70		 DB	 112			; 00000070H
  001c2	75		 DB	 117			; 00000075H
  001c3	43		 DB	 67			; 00000043H
  001c4	6f		 DB	 111			; 0000006fH
  001c5	64		 DB	 100			; 00000064H
  001c6	65		 DB	 101			; 00000065H
  001c7	00		 DB	 0
$LN7@lssproto_C:
  001c8	4d		 DB	 77			; 0000004dH
  001c9	61		 DB	 97			; 00000061H
  001ca	63		 DB	 99			; 00000063H
  001cb	43		 DB	 67			; 00000043H
  001cc	6f		 DB	 111			; 0000006fH
  001cd	64		 DB	 100			; 00000064H
  001ce	65		 DB	 101			; 00000065H
  001cf	00		 DB	 0
$LN6@lssproto_C:
  001d0	62		 DB	 98			; 00000062H
  001d1	75		 DB	 117			; 00000075H
  001d2	66		 DB	 102			; 00000066H
  001d3	66		 DB	 102			; 00000066H
  001d4	65		 DB	 101			; 00000065H
  001d5	72		 DB	 114			; 00000072H
  001d6	00		 DB	 0
?lssproto_ClientLogin_send@@YAXHPAD0@Z ENDP		; lssproto_ClientLogin_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_SP_send@@YAXHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dir$ = 20						; size = 4
?lssproto_SP_send@@YAXHHHH@Z PROC			; lssproto_SP_send, COMDAT

; 1985 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1986 : 	char buffer[16384];
; 1987 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1988 : 
; 1989 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_S
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_S
$LN4@lssproto_S:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_S:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1990 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1991 : 
; 1992 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_S

; 1993 : 	{
; 1994 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_S:

; 1995 : 	}
; 1996 : 
; 1997 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1998 : 	iChecksum += util_mkint(buffer, dir);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _dir$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1999 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 2000 : 	util_SendMesg(fd, LSSPROTO_SP_SEND, buffer);  //0x46  70

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 46		 push	 70			; 00000046H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_S:

; 2001 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_S
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_S:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_S
$LN7@lssproto_S:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_S
$LN6@lssproto_S:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_SP_send@@YAXHHHH@Z ENDP			; lssproto_SP_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_WN_send@@YAXHHHHHHPAD@Z
_TEXT	SEGMENT
$T1 = -61568						; size = 4
_iChecksum$ = -60020					; size = 4
_buffer$ = -60008					; size = 60000
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_seqno$ = 20						; size = 4
_objindex$ = 24						; size = 4
_select$ = 28						; size = 4
_data$ = 32						; size = 4
?lssproto_WN_send@@YAXHHHHHHPAD@Z PROC			; lssproto_WN_send, COMDAT

; 1958 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 84 f0 00 00	 mov	 eax, 61572		; 0000f084H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd 7c 0f ff
	ff		 lea	 edi, DWORD PTR [ebp-61572]
  00016	b9 21 3c 00 00	 mov	 ecx, 15393		; 00003c21H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1959 : //	char buffer[16384];
; 1960 : 	char buffer[60000];
; 1961 : 	int iChecksum=0;

  0002c	c7 85 8c 15 ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1962 : 
; 1963 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d 80 0f ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd 80 0f ff
	ff 60 ea 00 00	 cmp	 DWORD PTR $T1[ebp], 60000 ; 0000ea60H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_W
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_W
$LN4@lssproto_W:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_W:
  00057	8b 95 80 0f ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 98 15
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1964 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d 98 15 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 8c 15 ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 8c 15 ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1965 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d 98 15 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 8c 15 ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 8c 15 ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1966 : 	iChecksum += util_mkint(buffer, seqno);

  000a3	8b 45 14	 mov	 eax, DWORD PTR _seqno$[ebp]
  000a6	50		 push	 eax
  000a7	8d 8d 98 15 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000b3	83 c4 08	 add	 esp, 8
  000b6	03 85 8c 15 ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000bc	89 85 8c 15 ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1967 : 
; 1968 : 	if (g_服务器 == SERVER_台服)

  000c2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000c9	75 20		 jne	 SHORT $LN2@lssproto_W

; 1969 : 	{
; 1970 : 		iChecksum += util_mkint(buffer, int台服发包);

  000cb	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000d0	8d 85 98 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 8c 15 ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 8c 15 ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_W:

; 1971 : 	}
; 1972 : 
; 1973 : 	iChecksum += util_mkint(buffer, objindex);

  000eb	8b 45 18	 mov	 eax, DWORD PTR _objindex$[ebp]
  000ee	50		 push	 eax
  000ef	8d 8d 98 15 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fb	83 c4 08	 add	 esp, 8
  000fe	03 85 8c 15 ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00104	89 85 8c 15 ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1974 : 	iChecksum += util_mkint(buffer, select);

  0010a	8b 45 1c	 mov	 eax, DWORD PTR _select$[ebp]
  0010d	50		 push	 eax
  0010e	8d 8d 98 15 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011a	83 c4 08	 add	 esp, 8
  0011d	03 85 8c 15 ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00123	89 85 8c 15 ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1975 : 	//char* data2 = new char[5000];
; 1976 : 	//memset(data2, 0, 5000);
; 1977 : 	//memset(data2, 97, 1000);
; 1978 : 	//iChecksum += util_mkstring(buffer, data2);
; 1979 : 	iChecksum += util_mkstring(buffer, data);

  00129	8b 45 20	 mov	 eax, DWORD PTR _data$[ebp]
  0012c	50		 push	 eax
  0012d	8d 8d 98 15 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00133	51		 push	 ecx
  00134	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00139	83 c4 08	 add	 esp, 8
  0013c	03 85 8c 15 ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00142	89 85 8c 15 ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1980 : 	util_mkint(buffer, iChecksum);

  00148	8b 85 8c 15 ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0014e	50		 push	 eax
  0014f	8d 8d 98 15 ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0015b	83 c4 08	 add	 esp, 8

; 1981 : 	util_SendMesg(fd, LSSPROTO_WN_SEND, buffer);  //0x43  67

  0015e	8d 85 98 15 ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00164	50		 push	 eax
  00165	6a 43		 push	 67			; 00000043H
  00167	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0016a	51		 push	 ecx
  0016b	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_W:

; 1982 : }

  00173	52		 push	 edx
  00174	8b cd		 mov	 ecx, ebp
  00176	50		 push	 eax
  00177	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_W
  0017d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00182	58		 pop	 eax
  00183	5a		 pop	 edx
  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018a	33 cd		 xor	 ecx, ebp
  0018c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00191	81 c4 84 f0 00
	00		 add	 esp, 61572		; 0000f084H
  00197	3b ec		 cmp	 ebp, esp
  00199	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
  001a2	66 90		 npad	 2
$LN8@lssproto_W:
  001a4	01 00 00 00	 DD	 1
  001a8	00 00 00 00	 DD	 $LN7@lssproto_W
$LN7@lssproto_W:
  001ac	98 15 ff ff	 DD	 -60008			; ffff1598H
  001b0	60 ea 00 00	 DD	 60000			; 0000ea60H
  001b4	00 00 00 00	 DD	 $LN6@lssproto_W
$LN6@lssproto_W:
  001b8	62		 DB	 98			; 00000062H
  001b9	75		 DB	 117			; 00000075H
  001ba	66		 DB	 102			; 00000066H
  001bb	66		 DB	 102			; 00000066H
  001bc	65		 DB	 101			; 00000065H
  001bd	72		 DB	 114			; 00000072H
  001be	00		 DB	 0
?lssproto_WN_send@@YAXHHHHHHPAD@Z ENDP			; lssproto_WN_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_KN_send@@YAXHHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_havepetindex$ = 12					; size = 4
_data$ = 16						; size = 4
?lssproto_KN_send@@YAXHHPAD@Z PROC			; lssproto_KN_send, COMDAT

; 1940 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1941 : 	char buffer[16384];
; 1942 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1943 : 
; 1944 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_K
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_K
$LN4@lssproto_K:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_K:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1945 : 	iChecksum += util_mkint(buffer, havepetindex);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _havepetindex$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1946 : 
; 1947 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_K

; 1948 : 	{
; 1949 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_K:

; 1950 : 	}
; 1951 : 
; 1952 : 	iChecksum += util_mkstring(buffer, data);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1953 : 	util_mkint(buffer, iChecksum);

  000cc	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000df	83 c4 08	 add	 esp, 8

; 1954 : 	util_SendMesg(fd, LSSPROTO_KN_SEND, buffer);  //0x41  65

  000e2	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	6a 41		 push	 65			; 00000041H
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_K:

; 1955 : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_K
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN8@lssproto_K:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN7@lssproto_K
$LN7@lssproto_K:
  00130	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00134	00 40 00 00	 DD	 16384			; 00004000H
  00138	00 00 00 00	 DD	 $LN6@lssproto_K
$LN6@lssproto_K:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
?lssproto_KN_send@@YAXHHPAD@Z ENDP			; lssproto_KN_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_SKUP_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_skillid$ = 12						; size = 4
?lssproto_SKUP_send@@YAXHH@Z PROC			; lssproto_SKUP_send, COMDAT

; 1923 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1924 : 	char buffer[16384];
; 1925 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1926 : 
; 1927 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_S
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_S
$LN4@lssproto_S:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_S:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1928 : 
; 1929 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_S

; 1930 : 	{
; 1931 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_S:

; 1932 : 	}
; 1933 : 
; 1934 : 	iChecksum += util_mkint(buffer, skillid);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _skillid$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1935 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1936 : 	util_SendMesg(fd, LSSPROTO_SKUP_SEND, buffer);//0x40  64

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 40		 push	 64			; 00000040H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_S:

; 1937 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_S
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_S:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_S
$LN7@lssproto_S:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_S
$LN6@lssproto_S:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_SKUP_send@@YAXHH@Z ENDP			; lssproto_SKUP_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_FT_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_data$ = 12						; size = 4
?lssproto_FT_send@@YAXHPAD@Z PROC			; lssproto_FT_send, COMDAT

; 1906 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1907 : 	char buffer[16384];
; 1908 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1909 : 
; 1910 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_F
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_F
$LN4@lssproto_F:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_F:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1911 : 
; 1912 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_F

; 1913 : 	{
; 1914 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_F:

; 1915 : 	}
; 1916 : 
; 1917 : 	iChecksum += util_mkstring(buffer, data);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1918 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1919 : 	util_SendMesg(fd, LSSPROTO_FT_SEND, buffer);  //0x3e  62

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 3e		 push	 62			; 0000003eH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_F:

; 1920 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_F
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_F:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_F
$LN7@lssproto_F:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_F
$LN6@lssproto_F:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_FT_send@@YAXHPAD@Z ENDP			; lssproto_FT_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_DT_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_titleindex$ = 12					; size = 4
?lssproto_DT_send@@YAXHH@Z PROC				; lssproto_DT_send, COMDAT

; 1891 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1892 : 	char buffer[16384];
; 1893 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1894 : 
; 1895 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_D
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_D
$LN4@lssproto_D:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_D:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1896 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_D

; 1897 : 	{
; 1898 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_D:

; 1899 : 	}
; 1900 : 	iChecksum += util_mkint(buffer, titleindex);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _titleindex$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1901 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1902 : 	util_SendMesg(fd, LSSPROTO_DT_SEND, buffer);  //0x3d  61

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 3d		 push	 61			; 0000003dH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_D:

; 1903 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_D
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_D:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_D
$LN7@lssproto_D:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_D
$LN6@lssproto_D:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_DT_send@@YAXHH@Z ENDP				; lssproto_DT_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_ST_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_titleindex$ = 12					; size = 4
?lssproto_ST_send@@YAXHH@Z PROC				; lssproto_ST_send, COMDAT

; 1874 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1875 : 	char buffer[16384];
; 1876 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1877 : 
; 1878 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_S
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_S
$LN4@lssproto_S:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_S:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1879 : 	iChecksum += util_mkint(buffer, titleindex);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _titleindex$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1880 : 
; 1881 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_S

; 1882 : 	{
; 1883 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_S:

; 1884 : 	}
; 1885 : 
; 1886 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1887 : 	util_SendMesg(fd, LSSPROTO_ST_SEND, buffer); //0x3c 60

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 3c		 push	 60			; 0000003cH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_S:

; 1888 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_S
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_S:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_S
$LN7@lssproto_S:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_S
$LN6@lssproto_S:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_ST_send@@YAXHH@Z ENDP				; lssproto_ST_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_PS_send@@YAXHHHHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_havepetindex$ = 12					; size = 4
_havepetskill$ = 16					; size = 4
_toindex$ = 20						; size = 4
_data$ = 24						; size = 4
?lssproto_PS_send@@YAXHHHHPAD@Z PROC			; lssproto_PS_send, COMDAT

; 1854 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1855 : 	char buffer[16384];
; 1856 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1857 : 
; 1858 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_P
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_P
$LN4@lssproto_P:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_P:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1859 : 	iChecksum += util_mkint(buffer, havepetindex);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _havepetindex$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1860 : 	iChecksum += util_mkint(buffer, havepetskill);

  00084	8b 45 10	 mov	 eax, DWORD PTR _havepetskill$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1861 : 
; 1862 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN2@lssproto_P

; 1863 : 	{
; 1864 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_P:

; 1865 : 	}
; 1866 : 
; 1867 : 	iChecksum += util_mkint(buffer, toindex);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _toindex$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1868 : 	iChecksum += util_mkstring(buffer, data);

  000eb	8b 45 18	 mov	 eax, DWORD PTR _data$[ebp]
  000ee	50		 push	 eax
  000ef	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000fb	83 c4 08	 add	 esp, 8
  000fe	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00104	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1869 : 	util_mkint(buffer, iChecksum);

  0010a	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00110	50		 push	 eax
  00111	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011d	83 c4 08	 add	 esp, 8

; 1870 : 	util_SendMesg(fd, LSSPROTO_PS_SEND, buffer); //0x3a  58

  00120	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00126	50		 push	 eax
  00127	6a 3a		 push	 58			; 0000003aH
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_P:

; 1871 : }

  00135	52		 push	 edx
  00136	8b cd		 mov	 ecx, ebp
  00138	50		 push	 eax
  00139	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_P
  0013f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00144	58		 pop	 eax
  00145	5a		 pop	 edx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 cd		 xor	 ecx, ebp
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00159	3b ec		 cmp	 ebp, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
$LN8@lssproto_P:
  00164	01 00 00 00	 DD	 1
  00168	00 00 00 00	 DD	 $LN7@lssproto_P
$LN7@lssproto_P:
  0016c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00170	00 40 00 00	 DD	 16384			; 00004000H
  00174	00 00 00 00	 DD	 $LN6@lssproto_P
$LN6@lssproto_P:
  00178	62		 DB	 98			; 00000062H
  00179	75		 DB	 117			; 00000075H
  0017a	66		 DB	 102			; 00000066H
  0017b	66		 DB	 102			; 00000066H
  0017c	65		 DB	 101			; 00000065H
  0017d	72		 DB	 114			; 00000072H
  0017e	00		 DB	 0
?lssproto_PS_send@@YAXHHHHPAD@Z ENDP			; lssproto_PS_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_MU_send@@YAXHHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_array$ = 20						; size = 4
_toindex$ = 24						; size = 4
?lssproto_MU_send@@YAXHHHHH@Z PROC			; lssproto_MU_send, COMDAT

; 1834 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1835 : 	char buffer[16384];
; 1836 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1837 : 
; 1838 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_M
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_M
$LN4@lssproto_M:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_M:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1839 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1840 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1841 : 
; 1842 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN2@lssproto_M

; 1843 : 	{
; 1844 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_M:

; 1845 : 	}
; 1846 : 
; 1847 : 	iChecksum += util_mkint(buffer, array);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _array$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1848 : 	iChecksum += util_mkint(buffer, toindex);

  000eb	8b 45 18	 mov	 eax, DWORD PTR _toindex$[ebp]
  000ee	50		 push	 eax
  000ef	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fb	83 c4 08	 add	 esp, 8
  000fe	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00104	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1849 : 	util_mkint(buffer, iChecksum);

  0010a	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00110	50		 push	 eax
  00111	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011d	83 c4 08	 add	 esp, 8

; 1850 : 	util_SendMesg(fd, LSSPROTO_MU_SEND, buffer);  //0x39  57

  00120	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00126	50		 push	 eax
  00127	6a 39		 push	 57			; 00000039H
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_M:

; 1851 : }

  00135	52		 push	 edx
  00136	8b cd		 mov	 ecx, ebp
  00138	50		 push	 eax
  00139	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_M
  0013f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00144	58		 pop	 eax
  00145	5a		 pop	 edx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 cd		 xor	 ecx, ebp
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00159	3b ec		 cmp	 ebp, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
$LN8@lssproto_M:
  00164	01 00 00 00	 DD	 1
  00168	00 00 00 00	 DD	 $LN7@lssproto_M
$LN7@lssproto_M:
  0016c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00170	00 40 00 00	 DD	 16384			; 00004000H
  00174	00 00 00 00	 DD	 $LN6@lssproto_M
$LN6@lssproto_M:
  00178	62		 DB	 98			; 00000062H
  00179	75		 DB	 117			; 00000075H
  0017a	66		 DB	 102			; 00000066H
  0017b	66		 DB	 102			; 00000066H
  0017c	65		 DB	 101			; 00000065H
  0017d	72		 DB	 114			; 00000072H
  0017e	00		 DB	 0
?lssproto_MU_send@@YAXHHHHH@Z ENDP			; lssproto_MU_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_AC_send@@YAXHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_actionno$ = 20						; size = 4
?lssproto_AC_send@@YAXHHHH@Z PROC			; lssproto_AC_send, COMDAT

; 1817 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1818 : 	char buffer[16384];
; 1819 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1820 : 
; 1821 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_A
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_A
$LN4@lssproto_A:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_A:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1822 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1823 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_A

; 1824 : 	{
; 1825 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_A:

; 1826 : 	}
; 1827 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1828 : 	iChecksum += util_mkint(buffer, actionno);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _actionno$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1829 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1830 : 	util_SendMesg(fd, LSSPROTO_AC_SEND, buffer);  //0x38  56

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 38		 push	 56			; 00000038H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_A:

; 1831 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_A
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_A:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_A
$LN7@lssproto_A:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_A
$LN6@lssproto_A:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_AC_send@@YAXHHHH@Z ENDP			; lssproto_AC_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_SPET_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_standbypet$ = 12					; size = 4
?lssproto_SPET_send@@YAXHH@Z PROC			; lssproto_SPET_send, COMDAT

; 1799 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1800 : 	char buffer[16384];
; 1801 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1802 : 
; 1803 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_S
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_S
$LN4@lssproto_S:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_S:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1804 : 	iChecksum += util_mkint(buffer, standbypet);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _standbypet$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1805 : 
; 1806 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_S

; 1807 : 	{
; 1808 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_S:

; 1809 : 	}
; 1810 : 
; 1811 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1812 : 	util_SendMesg(fd, LSSPROTO_SPET_SEND, buffer);  //0x72  114

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 72		 push	 114			; 00000072H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_S:

; 1813 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_S
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_S:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_S
$LN7@lssproto_S:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_S
$LN6@lssproto_S:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_SPET_send@@YAXHH@Z ENDP			; lssproto_SPET_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_KS_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_petarray$ = 12						; size = 4
?lssproto_KS_send@@YAXHH@Z PROC				; lssproto_KS_send, COMDAT

; 1781 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1782 : 	char buffer[16384];
; 1783 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1784 : 
; 1785 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_K
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_K
$LN4@lssproto_K:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_K:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1786 : 
; 1787 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_K

; 1788 : 	{
; 1789 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_K:

; 1790 : 	}
; 1791 : 
; 1792 : 	iChecksum += util_mkint(buffer, petarray);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _petarray$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1793 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1794 : 	util_SendMesg(fd, LSSPROTO_KS_SEND, buffer); //0x36  54

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 36		 push	 54			; 00000036H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_K:

; 1795 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_K
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_K:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_K
$LN7@lssproto_K:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_K
$LN6@lssproto_K:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_KS_send@@YAXHH@Z ENDP				; lssproto_KS_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_PR_send@@YAXHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_request$ = 20						; size = 4
?lssproto_PR_send@@YAXHHHH@Z PROC			; lssproto_PR_send, COMDAT

; 1762 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1763 : 	char buffer[16384];
; 1764 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1765 : 
; 1766 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_P
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_P
$LN4@lssproto_P:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_P:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1767 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1768 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1769 : 
; 1770 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN2@lssproto_P

; 1771 : 	{
; 1772 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_P:

; 1773 : 	}
; 1774 : 
; 1775 : 	iChecksum += util_mkint(buffer, request);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _request$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1776 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1777 : 	util_SendMesg(fd, LSSPROTO_PR_SEND, buffer); //0x34  52

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 34		 push	 52			; 00000034H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_P:

; 1778 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_P
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_P:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_P
$LN7@lssproto_P:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_P
$LN6@lssproto_P:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_PR_send@@YAXHHHH@Z ENDP			; lssproto_PR_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_HL_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_flg$ = 12						; size = 4
?lssproto_HL_send@@YAXHH@Z PROC				; lssproto_HL_send, COMDAT

; 1745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1746 : 	char buffer[16384];
; 1747 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1748 : 
; 1749 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_H
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_H
$LN4@lssproto_H:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_H:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1750 : 	iChecksum += util_mkint(buffer, flg);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _flg$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1751 : 
; 1752 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_H

; 1753 : 	{
; 1754 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_H:

; 1755 : 	}
; 1756 : 
; 1757 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1758 : 	util_SendMesg(fd, LSSPROTO_HL_SEND, buffer); //0x32  50

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 32		 push	 50			; 00000032H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_H:

; 1759 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_H
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_H:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_H
$LN7@lssproto_H:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_H
$LN6@lssproto_H:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_HL_send@@YAXHH@Z ENDP				; lssproto_HL_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_FS_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_flg$ = 12						; size = 4
?lssproto_FS_send@@YAXHH@Z PROC				; lssproto_FS_send, COMDAT

; 1728 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1729 : 	char buffer[16384];
; 1730 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1731 : 
; 1732 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_F
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_F
$LN4@lssproto_F:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_F:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1733 : 
; 1734 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_F

; 1735 : 	{
; 1736 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_F:

; 1737 : 	}
; 1738 : 
; 1739 : 	iChecksum += util_mkint(buffer, flg);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _flg$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1740 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1741 : 	util_SendMesg(fd, LSSPROTO_FS_SEND, buffer); //0x30  48

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 30		 push	 48			; 00000030H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_F:

; 1742 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_F
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_F:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_F
$LN7@lssproto_F:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_F
$LN6@lssproto_F:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_FS_send@@YAXHH@Z ENDP				; lssproto_FS_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_S_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_category$ = 12						; size = 4
?lssproto_S_send@@YAXHPAD@Z PROC			; lssproto_S_send, COMDAT

; 1711 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1712 : 	char buffer[16384];
; 1713 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1714 : 
; 1715 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_S
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_S
$LN4@lssproto_S:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_S:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1716 : 
; 1717 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_S

; 1718 : 	{
; 1719 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_S:

; 1720 : 	}
; 1721 : 
; 1722 : 	iChecksum += util_mkstring(buffer, category);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _category$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1723 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1724 : 	util_SendMesg(fd, LSSPROTO_S_SEND, buffer);  //0x2d  45

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 2d		 push	 45			; 0000002dH
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_S:

; 1725 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_S
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_S:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_S
$LN7@lssproto_S:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_S
$LN6@lssproto_S:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_S_send@@YAXHPAD@Z ENDP			; lssproto_S_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_C_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
?lssproto_C_send@@YAXHH@Z PROC				; lssproto_C_send, COMDAT

; 1696 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1697 : 	char buffer[16384];
; 1698 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1699 : 
; 1700 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_C
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_C
$LN4@lssproto_C:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_C:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1701 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_C

; 1702 : 	{
; 1703 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_C:

; 1704 : 	}
; 1705 : 	iChecksum += util_mkint(buffer, index);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1706 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1707 : 	util_SendMesg(fd, LSSPROTO_C_SEND, buffer); // 0x28  40

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 28		 push	 40			; 00000028H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_C:

; 1708 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_C
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_C:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_C
$LN7@lssproto_C:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_C
$LN6@lssproto_C:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_C_send@@YAXHH@Z ENDP				; lssproto_C_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_M_send@@YAXHHHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_fl$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
?lssproto_M_send@@YAXHHHHHH@Z PROC			; lssproto_M_send, COMDAT

; 1675 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1676 : 	char buffer[16384];
; 1677 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1678 : 
; 1679 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_M
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_M
$LN4@lssproto_M:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_M:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1680 : 	iChecksum += util_mkint(buffer, fl);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _fl$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1681 : 	iChecksum += util_mkint(buffer, x1);

  00084	8b 45 10	 mov	 eax, DWORD PTR _x1$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1682 : 	iChecksum += util_mkint(buffer, y1);

  000a3	8b 45 14	 mov	 eax, DWORD PTR _y1$[ebp]
  000a6	50		 push	 eax
  000a7	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000b3	83 c4 08	 add	 esp, 8
  000b6	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000bc	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1683 : 
; 1684 : 	if (g_服务器 == SERVER_台服)

  000c2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000c9	75 20		 jne	 SHORT $LN2@lssproto_M

; 1685 : 	{
; 1686 : 		iChecksum += util_mkint(buffer, int台服发包);

  000cb	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000d0	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_M:

; 1687 : 	}
; 1688 : 
; 1689 : 	iChecksum += util_mkint(buffer, x2);

  000eb	8b 45 18	 mov	 eax, DWORD PTR _x2$[ebp]
  000ee	50		 push	 eax
  000ef	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fb	83 c4 08	 add	 esp, 8
  000fe	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00104	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1690 : 	iChecksum += util_mkint(buffer, y2);

  0010a	8b 45 1c	 mov	 eax, DWORD PTR _y2$[ebp]
  0010d	50		 push	 eax
  0010e	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011a	83 c4 08	 add	 esp, 8
  0011d	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00123	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1691 : 	util_mkint(buffer, iChecksum);

  00129	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0012f	50		 push	 eax
  00130	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00136	51		 push	 ecx
  00137	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0013c	83 c4 08	 add	 esp, 8

; 1692 : 	util_SendMesg(fd, LSSPROTO_M_SEND, buffer); //0x26  38

  0013f	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00145	50		 push	 eax
  00146	6a 26		 push	 38			; 00000026H
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_M:

; 1693 : }

  00154	52		 push	 edx
  00155	8b cd		 mov	 ecx, ebp
  00157	50		 push	 eax
  00158	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_M
  0015e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00163	58		 pop	 eax
  00164	5a		 pop	 edx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016b	33 cd		 xor	 ecx, ebp
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
  00183	90		 npad	 1
$LN8@lssproto_M:
  00184	01 00 00 00	 DD	 1
  00188	00 00 00 00	 DD	 $LN7@lssproto_M
$LN7@lssproto_M:
  0018c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00190	00 40 00 00	 DD	 16384			; 00004000H
  00194	00 00 00 00	 DD	 $LN6@lssproto_M
$LN6@lssproto_M:
  00198	62		 DB	 98			; 00000062H
  00199	75		 DB	 117			; 00000075H
  0019a	66		 DB	 102			; 00000066H
  0019b	66		 DB	 102			; 00000066H
  0019c	65		 DB	 101			; 00000065H
  0019d	72		 DB	 114			; 00000072H
  0019e	00		 DB	 0
?lssproto_M_send@@YAXHHHHHH@Z ENDP			; lssproto_M_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_TK_send@@YAXHHHPADHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_message$ = 20						; size = 4
_color$ = 24						; size = 4
_area$ = 28						; size = 4
?lssproto_TK_send@@YAXHHHPADHH@Z PROC			; lssproto_TK_send, COMDAT

; 1654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1655 : 	char buffer[16384];
; 1656 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1657 : 
; 1658 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_T
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_T
$LN4@lssproto_T:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_T:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1659 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1660 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1661 : 	iChecksum += util_mkstring(buffer, message);

  000a3	8b 45 14	 mov	 eax, DWORD PTR _message$[ebp]
  000a6	50		 push	 eax
  000a7	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000b3	83 c4 08	 add	 esp, 8
  000b6	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000bc	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1662 : 
; 1663 : 	if (g_服务器 == SERVER_台服)

  000c2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000c9	75 20		 jne	 SHORT $LN2@lssproto_T

; 1664 : 	{
; 1665 : 		iChecksum += util_mkint(buffer, int台服发包);

  000cb	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000d0	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_T:

; 1666 : 	}
; 1667 : 
; 1668 : 	iChecksum += util_mkint(buffer, color);

  000eb	8b 45 18	 mov	 eax, DWORD PTR _color$[ebp]
  000ee	50		 push	 eax
  000ef	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fb	83 c4 08	 add	 esp, 8
  000fe	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00104	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1669 : 	iChecksum += util_mkint(buffer, area);

  0010a	8b 45 1c	 mov	 eax, DWORD PTR _area$[ebp]
  0010d	50		 push	 eax
  0010e	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011a	83 c4 08	 add	 esp, 8
  0011d	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00123	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1670 : 	util_mkint(buffer, iChecksum);

  00129	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0012f	50		 push	 eax
  00130	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00136	51		 push	 ecx
  00137	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0013c	83 c4 08	 add	 esp, 8

; 1671 : 	util_SendMesg(fd, LSSPROTO_TK_SEND, buffer);  //0x23  35

  0013f	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00145	50		 push	 eax
  00146	6a 23		 push	 35			; 00000023H
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_T:

; 1672 : }

  00154	52		 push	 edx
  00155	8b cd		 mov	 ecx, ebp
  00157	50		 push	 eax
  00158	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_T
  0015e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00163	58		 pop	 eax
  00164	5a		 pop	 edx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016b	33 cd		 xor	 ecx, ebp
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
  00183	90		 npad	 1
$LN8@lssproto_T:
  00184	01 00 00 00	 DD	 1
  00188	00 00 00 00	 DD	 $LN7@lssproto_T
$LN7@lssproto_T:
  0018c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00190	00 40 00 00	 DD	 16384			; 00004000H
  00194	00 00 00 00	 DD	 $LN6@lssproto_T
$LN6@lssproto_T:
  00198	62		 DB	 98			; 00000062H
  00199	75		 DB	 117			; 00000075H
  0019a	66		 DB	 102			; 00000066H
  0019b	66		 DB	 102			; 00000066H
  0019c	65		 DB	 101			; 00000065H
  0019d	72		 DB	 114			; 00000072H
  0019e	00		 DB	 0
?lssproto_TK_send@@YAXHHHPADHH@Z ENDP			; lssproto_TK_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_L_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dir$ = 12						; size = 4
?lssproto_L_send@@YAXHH@Z PROC				; lssproto_L_send, COMDAT

; 1637 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1638 : 	char buffer[16384];
; 1639 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1640 : 
; 1641 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_L
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_L
$LN4@lssproto_L:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_L:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1642 : 	iChecksum += util_mkint(buffer, dir);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _dir$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1643 : 
; 1644 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_L

; 1645 : 	{
; 1646 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_L:

; 1647 : 	}
; 1648 : 
; 1649 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1650 : 	util_SendMesg(fd, LSSPROTO_L_SEND, buffer); //0x22 34

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 22		 push	 34			; 00000022H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_L:

; 1651 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_L
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_L:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_L
$LN7@lssproto_L:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_L
$LN6@lssproto_L:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_L_send@@YAXHH@Z ENDP				; lssproto_L_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_AAB_send@@YAXHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_AAB_send@@YAXHHH@Z PROC			; lssproto_AAB_send, COMDAT

; 1621 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1622 : 	char buffer[16384];
; 1623 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1624 : 
; 1625 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_A
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_A
$LN4@lssproto_A:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_A:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1626 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1627 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_A

; 1628 : 	{
; 1629 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_A:

; 1630 : 	}
; 1631 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1632 : 	util_mkint(buffer, iChecksum);

  000cc	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000df	83 c4 08	 add	 esp, 8

; 1633 : 	util_SendMesg(fd, LSSPROTO_AAB_SEND, buffer);   //0x21  33

  000e2	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	6a 21		 push	 33			; 00000021H
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_A:

; 1634 : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_A
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN8@lssproto_A:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN7@lssproto_A
$LN7@lssproto_A:
  00130	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00134	00 40 00 00	 DD	 16384			; 00004000H
  00138	00 00 00 00	 DD	 $LN6@lssproto_A
$LN6@lssproto_A:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
?lssproto_AAB_send@@YAXHHH@Z ENDP			; lssproto_AAB_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_DAB_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
?lssproto_DAB_send@@YAXHH@Z PROC			; lssproto_DAB_send, COMDAT

; 1606 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1607 : 	char buffer[16384];
; 1608 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1609 : 
; 1610 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_D
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_D
$LN4@lssproto_D:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_D:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1611 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_D

; 1612 : 	{
; 1613 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_D:

; 1614 : 	}
; 1615 : 	iChecksum += util_mkint(buffer, index);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1616 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1617 : 	util_SendMesg(fd, LSSPROTO_DAB_SEND, buffer);  //0x20 32

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 20		 push	 32			; 00000020H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_D:

; 1618 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_D
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_D:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_D
$LN7@lssproto_D:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_D
$LN6@lssproto_D:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_DAB_send@@YAXHH@Z ENDP			; lssproto_DAB_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_AB_send@@YAXH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_AB_send@@YAXH@Z PROC				; lssproto_AB_send, COMDAT

; 1592 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1593 : 	char buffer[16384];
; 1594 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1595 : 
; 1596 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_A
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_A
$LN4@lssproto_A:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_A:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1597 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_A

; 1598 : 	{
; 1599 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_A:

; 1600 : 	}
; 1601 : 	util_mkint(buffer, iChecksum);

  0008e	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00094	50		 push	 eax
  00095	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000a1	83 c4 08	 add	 esp, 8

; 1602 : 	util_SendMesg(fd, LSSPROTO_AB_SEND, buffer); //1D  29

  000a4	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000aa	50		 push	 eax
  000ab	6a 1d		 push	 29			; 0000001dH
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000b6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_A:

; 1603 : }

  000b9	52		 push	 edx
  000ba	8b cd		 mov	 ecx, ebp
  000bc	50		 push	 eax
  000bd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_A
  000c3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c8	58		 pop	 eax
  000c9	5a		 pop	 edx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN8@lssproto_A:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN7@lssproto_A
$LN7@lssproto_A:
  000f0	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  000f4	00 40 00 00	 DD	 16384			; 00004000H
  000f8	00 00 00 00	 DD	 $LN6@lssproto_A
$LN6@lssproto_A:
  000fc	62		 DB	 98			; 00000062H
  000fd	75		 DB	 117			; 00000075H
  000fe	66		 DB	 102			; 00000066H
  000ff	66		 DB	 102			; 00000066H
  00100	65		 DB	 101			; 00000065H
  00101	72		 DB	 114			; 00000072H
  00102	00		 DB	 0
?lssproto_AB_send@@YAXH@Z ENDP				; lssproto_AB_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_PMSG_send@@YAXHHHHPADH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
_petindex$ = 16						; size = 4
_itemindex$ = 20					; size = 4
_message$ = 24						; size = 4
_color$ = 28						; size = 4
?lssproto_PMSG_send@@YAXHHHHPADH@Z PROC			; lssproto_PMSG_send, COMDAT

; 1559 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1560 : 	char buffer[16384];
; 1561 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1562 : 
; 1563 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_P
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_P
$LN4@lssproto_P:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_P:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1564 : 	iChecksum += util_mkint(buffer, index);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1565 : 	iChecksum += util_mkint(buffer, petindex);

  00084	8b 45 10	 mov	 eax, DWORD PTR _petindex$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1566 : 	iChecksum += util_mkint(buffer, itemindex);

  000a3	8b 45 14	 mov	 eax, DWORD PTR _itemindex$[ebp]
  000a6	50		 push	 eax
  000a7	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000b3	83 c4 08	 add	 esp, 8
  000b6	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000bc	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1567 : 
; 1568 : 	if (g_服务器 == SERVER_台服)

  000c2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000c9	75 20		 jne	 SHORT $LN2@lssproto_P

; 1569 : 	{
; 1570 : 		iChecksum += util_mkint(buffer, int台服发包);

  000cb	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000d0	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_P:

; 1571 : 	}
; 1572 : 
; 1573 : 	iChecksum += util_mkstring(buffer, message);

  000eb	8b 45 18	 mov	 eax, DWORD PTR _message$[ebp]
  000ee	50		 push	 eax
  000ef	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000fb	83 c4 08	 add	 esp, 8
  000fe	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00104	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1574 : 	iChecksum += util_mkint(buffer, color);

  0010a	8b 45 1c	 mov	 eax, DWORD PTR _color$[ebp]
  0010d	50		 push	 eax
  0010e	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011a	83 c4 08	 add	 esp, 8
  0011d	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00123	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1575 : 	util_mkint(buffer, iChecksum);

  00129	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0012f	50		 push	 eax
  00130	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00136	51		 push	 ecx
  00137	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0013c	83 c4 08	 add	 esp, 8

; 1576 : 	util_SendMesg(fd, LSSPROTO_PMSG_SEND, buffer);  //0x1b  27

  0013f	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00145	50		 push	 eax
  00146	6a 1b		 push	 27			; 0000001bH
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_P:

; 1577 : }

  00154	52		 push	 edx
  00155	8b cd		 mov	 ecx, ebp
  00157	50		 push	 eax
  00158	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_P
  0015e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00163	58		 pop	 eax
  00164	5a		 pop	 edx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016b	33 cd		 xor	 ecx, ebp
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
  00183	90		 npad	 1
$LN8@lssproto_P:
  00184	01 00 00 00	 DD	 1
  00188	00 00 00 00	 DD	 $LN7@lssproto_P
$LN7@lssproto_P:
  0018c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00190	00 40 00 00	 DD	 16384			; 00004000H
  00194	00 00 00 00	 DD	 $LN6@lssproto_P
$LN6@lssproto_P:
  00198	62		 DB	 98			; 00000062H
  00199	75		 DB	 117			; 00000075H
  0019a	66		 DB	 102			; 00000066H
  0019b	66		 DB	 102			; 00000066H
  0019c	65		 DB	 101			; 00000065H
  0019d	72		 DB	 114			; 00000072H
  0019e	00		 DB	 0
?lssproto_PMSG_send@@YAXHHHHPADH@Z ENDP			; lssproto_PMSG_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_MSG_send@@YAXHHPADH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
_message$ = 16						; size = 4
_color$ = 20						; size = 4
?lssproto_MSG_send@@YAXHHPADH@Z PROC			; lssproto_MSG_send, COMDAT

; 1540 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1541 : 	char buffer[16384];
; 1542 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1543 : 
; 1544 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_M
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_M
$LN4@lssproto_M:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_M:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1545 : 
; 1546 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_M

; 1547 : 	{
; 1548 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_M:

; 1549 : 	}
; 1550 : 
; 1551 : 	iChecksum += util_mkint(buffer, index);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1552 : 	iChecksum += util_mkstring(buffer, message);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _message$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1553 : 	iChecksum += util_mkint(buffer, color);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _color$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1554 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1555 : 	util_SendMesg(fd, LSSPROTO_MSG_SEND, buffer); //0x19 25

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 19		 push	 25			; 00000019H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_M:

; 1556 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_M
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_M:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_M
$LN7@lssproto_M:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_M
$LN6@lssproto_M:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_MSG_send@@YAXHHPADH@Z ENDP			; lssproto_MSG_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_MI_send@@YAXHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_fromindex$ = 12					; size = 4
_toindex$ = 16						; size = 4
?lssproto_MI_send@@YAXHHH@Z PROC			; lssproto_MI_send, COMDAT

; 1522 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1523 : 	char buffer[16384];
; 1524 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1525 : 
; 1526 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_M
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_M
$LN4@lssproto_M:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_M:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1527 : 
; 1528 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_M

; 1529 : 	{
; 1530 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_M:

; 1531 : 	}
; 1532 : 
; 1533 : 	iChecksum += util_mkint(buffer, fromindex);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _fromindex$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1534 : 	iChecksum += util_mkint(buffer, toindex);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _toindex$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1535 : 	util_mkint(buffer, iChecksum);

  000cc	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000df	83 c4 08	 add	 esp, 8

; 1536 : 	util_SendMesg(fd, LSSPROTO_MI_SEND, buffer);  //0x17  23

  000e2	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	6a 17		 push	 23			; 00000017H
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_M:

; 1537 : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_M
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN8@lssproto_M:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN7@lssproto_M
$LN7@lssproto_M:
  00130	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00134	00 40 00 00	 DD	 16384			; 00004000H
  00138	00 00 00 00	 DD	 $LN6@lssproto_M
$LN6@lssproto_M:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
?lssproto_MI_send@@YAXHHH@Z ENDP			; lssproto_MI_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_DP_send@@YAXHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_petindex$ = 20						; size = 4
?lssproto_DP_send@@YAXHHHH@Z PROC			; lssproto_DP_send, COMDAT

; 1503 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1504 : 	char buffer[16384];
; 1505 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1506 : 
; 1507 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_D
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_D
$LN4@lssproto_D:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_D:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1508 : 
; 1509 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_D

; 1510 : 	{
; 1511 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_D:

; 1512 : 	}
; 1513 : 
; 1514 : 	iChecksum += util_mkint(buffer, x);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1515 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1516 : 	iChecksum += util_mkint(buffer, petindex);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _petindex$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1517 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1518 : 	util_SendMesg(fd, LSSPROTO_DP_SEND, buffer); //0x15  21

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 15		 push	 21			; 00000015H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_D:

; 1519 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_D
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_D:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_D
$LN7@lssproto_D:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_D
$LN6@lssproto_D:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_DP_send@@YAXHHHH@Z ENDP			; lssproto_DP_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_DG_send@@YAXHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_amount$ = 20						; size = 4
?lssproto_DG_send@@YAXHHHH@Z PROC			; lssproto_DG_send, COMDAT

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1485 : 	char buffer[16384];
; 1486 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1487 : 
; 1488 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_D
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_D
$LN4@lssproto_D:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_D:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1489 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1490 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1491 : 
; 1492 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN2@lssproto_D

; 1493 : 	{
; 1494 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_D:

; 1495 : 	}
; 1496 : 
; 1497 : 	iChecksum += util_mkint(buffer, amount);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _amount$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1498 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1499 : 	util_SendMesg(fd, LSSPROTO_DG_SEND, buffer);  //0x14  20

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 14		 push	 20			; 00000014H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_D:

; 1500 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_D
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_D:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_D
$LN7@lssproto_D:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_D
$LN6@lssproto_D:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_DG_send@@YAXHHHH@Z ENDP			; lssproto_DG_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_DI_send@@YAXHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_itemindex$ = 20					; size = 4
?lssproto_DI_send@@YAXHHHH@Z PROC			; lssproto_DI_send, COMDAT

; 1465 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1466 : 	char buffer[16384];
; 1467 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1468 : 
; 1469 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_D
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_D
$LN4@lssproto_D:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_D:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1470 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1471 : 
; 1472 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_D

; 1473 : 	{
; 1474 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_D:

; 1475 : 	}
; 1476 : 
; 1477 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1478 : 	iChecksum += util_mkint(buffer, itemindex);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _itemindex$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1479 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1480 : 	util_SendMesg(fd, LSSPROTO_DI_SEND, buffer);  //0x13  19

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 13		 push	 19			; 00000013H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_D:

; 1481 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_D
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_D:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_D
$LN7@lssproto_D:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_D
$LN6@lssproto_D:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_DI_send@@YAXHHHH@Z ENDP			; lssproto_DI_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_PI_send@@YAXHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dir$ = 20						; size = 4
?lssproto_PI_send@@YAXHHHH@Z PROC			; lssproto_PI_send, COMDAT

; 1446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1447 : 	char buffer[16384];
; 1448 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1449 : 
; 1450 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_P
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_P
$LN4@lssproto_P:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_P:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1451 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1452 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1453 : 
; 1454 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN2@lssproto_P

; 1455 : 	{
; 1456 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_P:

; 1457 : 	}
; 1458 : 
; 1459 : 	iChecksum += util_mkint(buffer, dir);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _dir$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1460 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1461 : 	util_SendMesg(fd, LSSPROTO_PI_SEND, buffer); //0x12  18

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 12		 push	 18			; 00000012H
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_P:

; 1462 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_P
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_P:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_P
$LN7@lssproto_P:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_P
$LN6@lssproto_P:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_PI_send@@YAXHHHH@Z ENDP			; lssproto_PI_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_ID_send@@YAXHHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_haveitemindex$ = 20					; size = 4
_toindex$ = 24						; size = 4
?lssproto_ID_send@@YAXHHHHH@Z PROC			; lssproto_ID_send, COMDAT

; 1428 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1429 : 	char buffer[16384];
; 1430 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1431 : 
; 1432 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_I
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_I
$LN4@lssproto_I:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_I:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1433 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1434 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1435 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN2@lssproto_I

; 1436 : 	{
; 1437 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_I:

; 1438 : 	}
; 1439 : 	iChecksum += util_mkint(buffer, haveitemindex);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _haveitemindex$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1440 : 	iChecksum += util_mkint(buffer, toindex);

  000eb	8b 45 18	 mov	 eax, DWORD PTR _toindex$[ebp]
  000ee	50		 push	 eax
  000ef	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fb	83 c4 08	 add	 esp, 8
  000fe	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00104	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1441 : 	util_mkint(buffer, iChecksum);

  0010a	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00110	50		 push	 eax
  00111	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011d	83 c4 08	 add	 esp, 8

; 1442 : 	util_SendMesg(fd, LSSPROTO_ID_SEND, buffer); //0x11 17

  00120	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00126	50		 push	 eax
  00127	6a 11		 push	 17			; 00000011H
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_I:

; 1443 : }

  00135	52		 push	 edx
  00136	8b cd		 mov	 ecx, ebp
  00138	50		 push	 eax
  00139	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_I
  0013f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00144	58		 pop	 eax
  00145	5a		 pop	 edx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 cd		 xor	 ecx, ebp
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00159	3b ec		 cmp	 ebp, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
$LN8@lssproto_I:
  00164	01 00 00 00	 DD	 1
  00168	00 00 00 00	 DD	 $LN7@lssproto_I
$LN7@lssproto_I:
  0016c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00170	00 40 00 00	 DD	 16384			; 00004000H
  00174	00 00 00 00	 DD	 $LN6@lssproto_I
$LN6@lssproto_I:
  00178	62		 DB	 98			; 00000062H
  00179	75		 DB	 117			; 00000075H
  0017a	66		 DB	 102			; 00000066H
  0017b	66		 DB	 102			; 00000066H
  0017c	65		 DB	 101			; 00000065H
  0017d	72		 DB	 114			; 00000072H
  0017e	00		 DB	 0
?lssproto_ID_send@@YAXHHHHH@Z ENDP			; lssproto_ID_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_SKD_send@@YAXHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dir$ = 12						; size = 4
_index$ = 16						; size = 4
?lssproto_SKD_send@@YAXHHH@Z PROC			; lssproto_SKD_send, COMDAT

; 1410 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1411 : 	char buffer[16384];
; 1412 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1413 : 
; 1414 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_S
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_S
$LN4@lssproto_S:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_S:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1415 : 	iChecksum += util_mkint(buffer, dir);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _dir$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1416 : 
; 1417 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_S

; 1418 : 	{
; 1419 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_S:

; 1420 : 	}
; 1421 : 
; 1422 : 	iChecksum += util_mkint(buffer, index);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _index$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1423 : 	util_mkint(buffer, iChecksum);

  000cc	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000df	83 c4 08	 add	 esp, 8

; 1424 : 	util_SendMesg(fd, LSSPROTO_SKD_SEND, buffer);  //0x10  16

  000e2	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	6a 10		 push	 16			; 00000010H
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_S:

; 1425 : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_S
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN8@lssproto_S:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN7@lssproto_S
$LN7@lssproto_S:
  00130	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00134	00 40 00 00	 DD	 16384			; 00004000H
  00138	00 00 00 00	 DD	 $LN6@lssproto_S
$LN6@lssproto_S:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
?lssproto_SKD_send@@YAXHHH@Z ENDP			; lssproto_SKD_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_B_send@@YAXHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_command$ = 12						; size = 4
?lssproto_B_send@@YAXHPAD@Z PROC			; lssproto_B_send, COMDAT

; 1393 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1394 : 	char buffer[16384];
; 1395 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1396 : 
; 1397 : 	LogToSenddata( command );

  00036	8b 45 0c	 mov	 eax, DWORD PTR _command$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?LogToSenddata@@YAXPAD@Z ; LogToSenddata
  0003f	83 c4 04	 add	 esp, 4

; 1398 : 
; 1399 : 	buffer[0] = '\0';

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00050	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0005a	73 02		 jae	 SHORT $LN4@lssproto_B
  0005c	eb 05		 jmp	 SHORT $LN5@lssproto_B
$LN4@lssproto_B:
  0005e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_B:
  00063	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00069	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1400 : 	iChecksum += util_mkstring(buffer, command);

  00071	8b 45 0c	 mov	 eax, DWORD PTR _command$[ebp]
  00074	50		 push	 eax
  00075	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00081	83 c4 08	 add	 esp, 8
  00084	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0008a	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1401 : 	if (g_服务器 == SERVER_台服)

  00090	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  00097	75 20		 jne	 SHORT $LN2@lssproto_B

; 1402 : 	{
; 1403 : 		iChecksum += util_mkint(buffer, int台服发包);

  00099	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  0009e	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000aa	83 c4 08	 add	 esp, 8
  000ad	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_B:

; 1404 : 	}
; 1405 : 	util_mkint(buffer, iChecksum);

  000b9	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000bf	50		 push	 eax
  000c0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000cc	83 c4 08	 add	 esp, 8

; 1406 : 	util_SendMesg(fd, LSSPROTO_B_SEND, buffer);  //E 14

  000cf	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000d5	50		 push	 eax
  000d6	6a 0e		 push	 14			; 0000000eH
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_B:

; 1407 : }

  000e4	52		 push	 edx
  000e5	8b cd		 mov	 ecx, ebp
  000e7	50		 push	 eax
  000e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_B
  000ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f3	58		 pop	 eax
  000f4	5a		 pop	 edx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
  00113	90		 npad	 1
$LN8@lssproto_B:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN7@lssproto_B
$LN7@lssproto_B:
  0011c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00120	00 40 00 00	 DD	 16384			; 00004000H
  00124	00 00 00 00	 DD	 $LN6@lssproto_B
$LN6@lssproto_B:
  00128	62		 DB	 98			; 00000062H
  00129	75		 DB	 117			; 00000075H
  0012a	66		 DB	 102			; 00000066H
  0012b	66		 DB	 102			; 00000066H
  0012c	65		 DB	 101			; 00000065H
  0012d	72		 DB	 114			; 00000072H
  0012e	00		 DB	 0
?lssproto_B_send@@YAXHPAD@Z ENDP			; lssproto_B_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_LB_send@@YAXHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_LB_send@@YAXHHH@Z PROC			; lssproto_LB_send, COMDAT

; 1375 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1376 : 	char buffer[16384];
; 1377 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1378 : 
; 1379 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_L
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_L
$LN4@lssproto_L:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_L:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1380 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1381 : 
; 1382 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_L

; 1383 : 	{
; 1384 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_L:

; 1385 : 	}
; 1386 : 
; 1387 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1388 : 	util_mkint(buffer, iChecksum);

  000cc	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000df	83 c4 08	 add	 esp, 8

; 1389 : 	util_SendMesg(fd, LSSPROTO_LB_SEND, buffer);  //0xB 11

  000e2	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	6a 0b		 push	 11			; 0000000bH
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_L:

; 1390 : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_L
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN8@lssproto_L:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN7@lssproto_L
$LN7@lssproto_L:
  00130	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00134	00 40 00 00	 DD	 16384			; 00004000H
  00138	00 00 00 00	 DD	 $LN6@lssproto_L
$LN6@lssproto_L:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
?lssproto_LB_send@@YAXHHH@Z ENDP			; lssproto_LB_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_JB_send@@YAXHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_JB_send@@YAXHHH@Z PROC			; lssproto_JB_send, COMDAT

; 1357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1358 : 	char buffer[16384];
; 1359 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1360 : 
; 1361 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_J
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_J
$LN4@lssproto_J:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_J:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1362 : 
; 1363 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_J

; 1364 : 	{
; 1365 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_J:

; 1366 : 	}
; 1367 : 
; 1368 : 	iChecksum += util_mkint(buffer, x);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1369 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1370 : 	util_mkint(buffer, iChecksum);

  000cc	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000df	83 c4 08	 add	 esp, 8

; 1371 : 	util_SendMesg(fd, LSSPROTO_JB_SEND, buffer); //0xA  10

  000e2	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	6a 0a		 push	 10			; 0000000aH
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_J:

; 1372 : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_J
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN8@lssproto_J:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN7@lssproto_J
$LN7@lssproto_J:
  00130	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00134	00 40 00 00	 DD	 16384			; 00004000H
  00138	00 00 00 00	 DD	 $LN6@lssproto_J
$LN6@lssproto_J:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
?lssproto_JB_send@@YAXHHH@Z ENDP			; lssproto_JB_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_BU_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dummy$ = 12						; size = 4
?lssproto_BU_send@@YAXHH@Z PROC				; lssproto_BU_send, COMDAT

; 1342 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1343 : 	char buffer[16384];
; 1344 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1345 : 
; 1346 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_B
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_B
$LN4@lssproto_B:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_B:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1347 : 	iChecksum += util_mkint(buffer, dummy);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _dummy$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1348 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_B

; 1349 : 	{
; 1350 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_B:

; 1351 : 	}
; 1352 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1353 : 	util_SendMesg(fd, LSSPROTO_BU_SEND, buffer); //9

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 09		 push	 9
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_B:

; 1354 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_B
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_B:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_B
$LN7@lssproto_B:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_B
$LN6@lssproto_B:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_BU_send@@YAXHH@Z ENDP				; lssproto_BU_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_EO_send@@YAXHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_dummy$ = 12						; size = 4
?lssproto_EO_send@@YAXHH@Z PROC				; lssproto_EO_send, COMDAT

; 1325 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1326 : 	char buffer[16384];
; 1327 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1328 : 
; 1329 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_E
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_E
$LN4@lssproto_E:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_E:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1330 : 	iChecksum += util_mkint(buffer, dummy);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _dummy$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1331 : 
; 1332 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_E

; 1333 : 	{
; 1334 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_E:

; 1335 : 	}
; 1336 : 
; 1337 : 	util_mkint(buffer, iChecksum);

  000ad	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000b3	50		 push	 eax
  000b4	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000c0	83 c4 08	 add	 esp, 8

; 1338 : 	util_SendMesg(fd, LSSPROTO_EO_SEND, buffer); //8

  000c3	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	6a 08		 push	 8
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_E:

; 1339 : }

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_E
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	5f		 pop	 edi
  000ea	5e		 pop	 esi
  000eb	5b		 pop	 ebx
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000fc	3b ec		 cmp	 ebp, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
  00107	90		 npad	 1
$LN8@lssproto_E:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN7@lssproto_E
$LN7@lssproto_E:
  00110	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00114	00 40 00 00	 DD	 16384			; 00004000H
  00118	00 00 00 00	 DD	 $LN6@lssproto_E
$LN6@lssproto_E:
  0011c	62		 DB	 98			; 00000062H
  0011d	75		 DB	 117			; 00000075H
  0011e	66		 DB	 102			; 00000066H
  0011f	66		 DB	 102			; 00000066H
  00120	65		 DB	 101			; 00000065H
  00121	72		 DB	 114			; 00000072H
  00122	00		 DB	 0
?lssproto_EO_send@@YAXHH@Z ENDP				; lssproto_EO_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_DU_send@@YAXHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_DU_send@@YAXHHH@Z PROC			; lssproto_DU_send, COMDAT

; 1307 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1308 : 	char buffer[16384];
; 1309 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1310 : 
; 1311 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_D
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_D
$LN4@lssproto_D:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_D:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1312 : 
; 1313 : 	if (g_服务器 == SERVER_台服)

  00065	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0006c	75 20		 jne	 SHORT $LN2@lssproto_D

; 1314 : 	{
; 1315 : 		iChecksum += util_mkint(buffer, int台服发包);

  0006e	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00073	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0007f	83 c4 08	 add	 esp, 8
  00082	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00088	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_D:

; 1316 : 	}
; 1317 : 
; 1318 : 	iChecksum += util_mkint(buffer, x);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00091	50		 push	 eax
  00092	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1319 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1320 : 	util_mkint(buffer, iChecksum);

  000cc	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d2	50		 push	 eax
  000d3	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000df	83 c4 08	 add	 esp, 8

; 1321 : 	util_SendMesg(fd, LSSPROTO_DU_SEND, buffer); //6

  000e2	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e8	50		 push	 eax
  000e9	6a 06		 push	 6
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_D:

; 1322 : }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_D
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010e	33 cd		 xor	 ecx, ebp
  00110	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00115	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN8@lssproto_D:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN7@lssproto_D
$LN7@lssproto_D:
  00130	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00134	00 40 00 00	 DD	 16384			; 00004000H
  00138	00 00 00 00	 DD	 $LN6@lssproto_D
$LN6@lssproto_D:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
?lssproto_DU_send@@YAXHHH@Z ENDP			; lssproto_DU_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_EN_send@@YAXHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?lssproto_EN_send@@YAXHHH@Z PROC			; lssproto_EN_send, COMDAT

; 1295 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1296 : 	char buffer[16384];
; 1297 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1298 : 
; 1299 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_E
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_E
$LN3@lssproto_E:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_E:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1300 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1301 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1302 : 	util_mkint(buffer, iChecksum);

  000a3	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000a9	50		 push	 eax
  000aa	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000b6	83 c4 08	 add	 esp, 8

; 1303 : 	util_SendMesg(fd, LSSPROTO_EN_SEND, buffer);

  000b9	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000bf	50		 push	 eax
  000c0	6a 05		 push	 5
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_E:

; 1304 : }

  000ce	52		 push	 edx
  000cf	8b cd		 mov	 ecx, ebp
  000d1	50		 push	 eax
  000d2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@lssproto_E
  000d8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000dd	58		 pop	 eax
  000de	5a		 pop	 edx
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e5	33 cd		 xor	 ecx, ebp
  000e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ec	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  000f2	3b ec		 cmp	 ebp, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
  000fd	0f 1f 00	 npad	 3
$LN7@lssproto_E:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN6@lssproto_E
$LN6@lssproto_E:
  00108	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  0010c	00 40 00 00	 DD	 16384			; 00004000H
  00110	00 00 00 00	 DD	 $LN5@lssproto_E
$LN5@lssproto_E:
  00114	62		 DB	 98			; 00000062H
  00115	75		 DB	 117			; 00000075H
  00116	66		 DB	 102			; 00000066H
  00117	66		 DB	 102			; 00000066H
  00118	65		 DB	 101			; 00000065H
  00119	72		 DB	 114			; 00000072H
  0011a	00		 DB	 0
?lssproto_EN_send@@YAXHHH@Z ENDP			; lssproto_EN_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_EV_send@@YAXHHHHHH@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_event$ = 12						; size = 4
_seqno$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_dir$ = 28						; size = 4
?lssproto_EV_send@@YAXHHHHHH@Z PROC			; lssproto_EV_send, COMDAT

; 1274 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1275 : 	char buffer[16384];
; 1276 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1277 : 
; 1278 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_E
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_E
$LN4@lssproto_E:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_E:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1279 : 	iChecksum += util_mkint(buffer, event);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _event$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1280 : 
; 1281 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_E

; 1282 : 	{
; 1283 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_E:

; 1284 : 	}
; 1285 : 
; 1286 : 	iChecksum += util_mkint(buffer, seqno);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _seqno$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1287 : 	iChecksum += util_mkint(buffer, x);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _x$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1288 : 	iChecksum += util_mkint(buffer, y);

  000eb	8b 45 18	 mov	 eax, DWORD PTR _y$[ebp]
  000ee	50		 push	 eax
  000ef	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fb	83 c4 08	 add	 esp, 8
  000fe	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00104	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1289 : 	iChecksum += util_mkint(buffer, dir);

  0010a	8b 45 1c	 mov	 eax, DWORD PTR _dir$[ebp]
  0010d	50		 push	 eax
  0010e	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0011a	83 c4 08	 add	 esp, 8
  0011d	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  00123	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1290 : 	util_mkint(buffer, iChecksum);

  00129	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0012f	50		 push	 eax
  00130	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00136	51		 push	 ecx
  00137	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0013c	83 c4 08	 add	 esp, 8

; 1291 : 	util_SendMesg(fd, LSSPROTO_EV_SEND, buffer);  // 3

  0013f	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00145	50		 push	 eax
  00146	6a 03		 push	 3
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_E:

; 1292 : }

  00154	52		 push	 edx
  00155	8b cd		 mov	 ecx, ebp
  00157	50		 push	 eax
  00158	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_E
  0015e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00163	58		 pop	 eax
  00164	5a		 pop	 edx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016b	33 cd		 xor	 ecx, ebp
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
  00183	90		 npad	 1
$LN8@lssproto_E:
  00184	01 00 00 00	 DD	 1
  00188	00 00 00 00	 DD	 $LN7@lssproto_E
$LN7@lssproto_E:
  0018c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00190	00 40 00 00	 DD	 16384			; 00004000H
  00194	00 00 00 00	 DD	 $LN6@lssproto_E
$LN6@lssproto_E:
  00198	62		 DB	 98			; 00000062H
  00199	75		 DB	 117			; 00000075H
  0019a	66		 DB	 102			; 00000066H
  0019b	66		 DB	 102			; 00000066H
  0019c	65		 DB	 101			; 00000065H
  0019d	72		 DB	 114			; 00000072H
  0019e	00		 DB	 0
?lssproto_EV_send@@YAXHHHHHH@Z ENDP			; lssproto_EV_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_W2_send@@YAXHHHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_direction$ = 20					; size = 4
?lssproto_W2_send@@YAXHHHPAD@Z PROC			; lssproto_W2_send, COMDAT

; 1255 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1256 : 	char buffer[16384];
; 1257 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1258 : 
; 1259 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_W
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_W
$LN4@lssproto_W:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_W:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1260 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1261 : 	iChecksum += util_mkint(buffer, y);

  00084	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00087	50		 push	 eax
  00088	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00094	83 c4 08	 add	 esp, 8
  00097	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009d	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1262 : 
; 1263 : 	if (g_服务器 == SERVER_台服)

  000a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  000aa	75 20		 jne	 SHORT $LN2@lssproto_W

; 1264 : 	{
; 1265 : 		iChecksum += util_mkint(buffer, int台服发包);

  000ac	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  000b1	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_W:

; 1266 : 	}
; 1267 : 
; 1268 : 	iChecksum += util_mkstring(buffer, direction);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _direction$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1269 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1270 : 	util_SendMesg(fd, LSSPROTO_W2_SEND, buffer);  //1

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 01		 push	 1
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@lssproto_W:

; 1271 : }

  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_W
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN8@lssproto_W:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@lssproto_W
$LN7@lssproto_W:
  00150	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00154	00 40 00 00	 DD	 16384			; 00004000H
  00158	00 00 00 00	 DD	 $LN6@lssproto_W
$LN6@lssproto_W:
  0015c	62		 DB	 98			; 00000062H
  0015d	75		 DB	 117			; 00000075H
  0015e	66		 DB	 102			; 00000066H
  0015f	66		 DB	 102			; 00000066H
  00160	65		 DB	 101			; 00000065H
  00161	72		 DB	 114			; 00000072H
  00162	00		 DB	 0
?lssproto_W2_send@@YAXHHHPAD@Z ENDP			; lssproto_W2_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_W_send@@YAXHHHPAD@Z
_TEXT	SEGMENT
$T1 = -17952						; size = 4
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_direction$ = 20					; size = 4
?lssproto_W_send@@YAXHHHPAD@Z PROC			; lssproto_W_send, COMDAT

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 46 00 00	 mov	 eax, 17956		; 00004624H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd dc b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-17956]
  00016	b9 89 11 00 00	 mov	 ecx, 4489		; 00001189H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1234 : 	char buffer[16384];
; 1235 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1236 : 
; 1237 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d e0 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd e0 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN4@lssproto_W
  00050	eb 05		 jmp	 SHORT $LN5@lssproto_W
$LN4@lssproto_W:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN5@lssproto_W:
  00057	8b 95 e0 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1238 : 	iChecksum += util_mkint(buffer, x);

  00065	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00068	50		 push	 eax
  00069	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00075	83 c4 08	 add	 esp, 8
  00078	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0007e	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1239 : 
; 1240 : 	if (g_服务器 == SERVER_台服)

  00084	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_服务器@@3HA, 1 ; g_服务器
  0008b	75 20		 jne	 SHORT $LN2@lssproto_W

; 1241 : 	{
; 1242 : 		iChecksum += util_mkint(buffer, int台服发包);

  0008d	68 21 ac 12 00	 push	 1223713			; 0012ac21H
  00092	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0009e	83 c4 08	 add	 esp, 8
  000a1	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000a7	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax
$LN2@lssproto_W:

; 1243 : 	}
; 1244 : 
; 1245 : 	iChecksum += util_mkint(buffer, y);

  000ad	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c6	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1246 : 	iChecksum += util_mkstring(buffer, direction);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _direction$[ebp]
  000cf	50		 push	 eax
  000d0	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000dc	83 c4 08	 add	 esp, 8
  000df	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000e5	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1247 : 	util_mkint(buffer, iChecksum);

  000eb	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000f1	50		 push	 eax
  000f2	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000fe	83 c4 08	 add	 esp, 8

; 1248 : 	util_SendMesg(fd, LSSPROTO_W_SEND, buffer);  // 0

  00101	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00107	50		 push	 eax
  00108	6a 00		 push	 0
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1249 : 	// Nuke 0407
; 1250 : 	extern int SendCount;
; 1251 : 	SendCount--;

  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SendCount@@3HA ; SendCount
  0011b	83 e8 01	 sub	 eax, 1
  0011e	a3 00 00 00 00	 mov	 DWORD PTR ?SendCount@@3HA, eax ; SendCount
$LN3@lssproto_W:

; 1252 : }

  00123	52		 push	 edx
  00124	8b cd		 mov	 ecx, ebp
  00126	50		 push	 eax
  00127	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@lssproto_W
  0012d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00132	58		 pop	 eax
  00133	5a		 pop	 edx
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013a	33 cd		 xor	 ecx, ebp
  0013c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00141	81 c4 24 46 00
	00		 add	 esp, 17956		; 00004624H
  00147	3b ec		 cmp	 ebp, esp
  00149	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
  00152	66 90		 npad	 2
$LN8@lssproto_W:
  00154	01 00 00 00	 DD	 1
  00158	00 00 00 00	 DD	 $LN7@lssproto_W
$LN7@lssproto_W:
  0015c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00160	00 40 00 00	 DD	 16384			; 00004000H
  00164	00 00 00 00	 DD	 $LN6@lssproto_W
$LN6@lssproto_W:
  00168	62		 DB	 98			; 00000062H
  00169	75		 DB	 117			; 00000075H
  0016a	66		 DB	 102			; 00000066H
  0016b	66		 DB	 102			; 00000066H
  0016c	65		 DB	 101			; 00000065H
  0016d	72		 DB	 114			; 00000072H
  0016e	00		 DB	 0
?lssproto_W_send@@YAXHHHPAD@Z ENDP			; lssproto_W_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_Partyauto_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -65544					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_Partyauto_send@@YAXH@Z PROC			; lssproto_Partyauto_send, COMDAT

; 2527 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 0c 06 01 00	 mov	 eax, 67084		; 0001060cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd f4 f9 fe
	ff		 lea	 edi, DWORD PTR [ebp-67084]
  00016	b9 83 41 00 00	 mov	 ecx, 16771		; 00004183H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2528 : 	char buffer[1024 * 64];
; 2529 : 	strcpy(buffer, "");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00031	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _strcpy
  0003d	83 c4 08	 add	 esp, 8

; 2530 : 	memset(buffer, 0, 1024 * 64);

  00040	68 00 00 01 00	 push	 65536			; 00010000H
  00045	6a 00		 push	 0
  00047	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _memset
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2531 : 
; 2532 : 	util_SendMesg(fd, LSSPROTO_PARTYAUTO_SEND, buffer);

  00056	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005c	50		 push	 eax
  0005d	68 92 01 00 00	 push	 402			; 00000192H
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2533 : }

  0006e	52		 push	 edx
  0006f	8b cd		 mov	 ecx, ebp
  00071	50		 push	 eax
  00072	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@lssproto_P
  00078	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007d	58		 pop	 eax
  0007e	5a		 pop	 edx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	33 cd		 xor	 ecx, ebp
  00087	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008c	81 c4 0c 06 01
	00		 add	 esp, 67084		; 0001060cH
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
  0009d	0f 1f 00	 npad	 3
$LN5@lssproto_P:
  000a0	01 00 00 00	 DD	 1
  000a4	00 00 00 00	 DD	 $LN4@lssproto_P
$LN4@lssproto_P:
  000a8	f8 ff fe ff	 DD	 -65544			; fffefff8H
  000ac	00 00 01 00	 DD	 65536			; 00010000H
  000b0	00 00 00 00	 DD	 $LN3@lssproto_P
$LN3@lssproto_P:
  000b4	62		 DB	 98			; 00000062H
  000b5	75		 DB	 117			; 00000075H
  000b6	66		 DB	 102			; 00000066H
  000b7	66		 DB	 102			; 00000066H
  000b8	65		 DB	 101			; 00000065H
  000b9	72		 DB	 114			; 00000072H
  000ba	00		 DB	 0
?lssproto_Partyauto_send@@YAXH@Z ENDP			; lssproto_Partyauto_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_Noenemy_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -65544					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_Noenemy_send@@YAXH@Z PROC			; lssproto_Noenemy_send, COMDAT

; 2516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 0c 06 01 00	 mov	 eax, 67084		; 0001060cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd f4 f9 fe
	ff		 lea	 edi, DWORD PTR [ebp-67084]
  00016	b9 83 41 00 00	 mov	 ecx, 16771		; 00004183H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2517 : 	char buffer[1024 * 64];
; 2518 : 	strcpy(buffer, "");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00031	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _strcpy
  0003d	83 c4 08	 add	 esp, 8

; 2519 : 	memset(buffer, 0, 1024 * 64);

  00040	68 00 00 01 00	 push	 65536			; 00010000H
  00045	6a 00		 push	 0
  00047	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _memset
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2520 : 
; 2521 : 	util_SendMesg(fd, LSSPROTO_NOENEMY_SEND, buffer);

  00056	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005c	50		 push	 eax
  0005d	68 91 01 00 00	 push	 401			; 00000191H
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2522 : }

  0006e	52		 push	 edx
  0006f	8b cd		 mov	 ecx, ebp
  00071	50		 push	 eax
  00072	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@lssproto_N
  00078	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007d	58		 pop	 eax
  0007e	5a		 pop	 edx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	33 cd		 xor	 ecx, ebp
  00087	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008c	81 c4 0c 06 01
	00		 add	 esp, 67084		; 0001060cH
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
  0009d	0f 1f 00	 npad	 3
$LN5@lssproto_N:
  000a0	01 00 00 00	 DD	 1
  000a4	00 00 00 00	 DD	 $LN4@lssproto_N
$LN4@lssproto_N:
  000a8	f8 ff fe ff	 DD	 -65544			; fffefff8H
  000ac	00 00 01 00	 DD	 65536			; 00010000H
  000b0	00 00 00 00	 DD	 $LN3@lssproto_N
$LN3@lssproto_N:
  000b4	62		 DB	 98			; 00000062H
  000b5	75		 DB	 117			; 00000075H
  000b6	66		 DB	 102			; 00000066H
  000b7	66		 DB	 102			; 00000066H
  000b8	65		 DB	 101			; 00000065H
  000b9	72		 DB	 114			; 00000072H
  000ba	00		 DB	 0
?lssproto_Noenemy_send@@YAXH@Z ENDP			; lssproto_Noenemy_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_Expup_send@@YAXH@Z
_TEXT	SEGMENT
_buffer$ = -65544					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_Expup_send@@YAXH@Z PROC			; lssproto_Expup_send, COMDAT

; 2505 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 0c 06 01 00	 mov	 eax, 67084		; 0001060cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd f4 f9 fe
	ff		 lea	 edi, DWORD PTR [ebp-67084]
  00016	b9 83 41 00 00	 mov	 ecx, 16771		; 00004183H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2506 : 	char buffer[1024 * 64];
; 2507 : 	strcpy(buffer, "");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00031	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _strcpy
  0003d	83 c4 08	 add	 esp, 8

; 2508 : 	memset(buffer, 0, 1024 * 64);

  00040	68 00 00 01 00	 push	 65536			; 00010000H
  00045	6a 00		 push	 0
  00047	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _memset
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2509 : 
; 2510 : 	util_SendMesg(fd, LSSPROTO_EXPUP_SEND, buffer);

  00056	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0005c	50		 push	 eax
  0005d	68 90 01 00 00	 push	 400			; 00000190H
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2511 : }

  0006e	52		 push	 edx
  0006f	8b cd		 mov	 ecx, ebp
  00071	50		 push	 eax
  00072	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@lssproto_E
  00078	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007d	58		 pop	 eax
  0007e	5a		 pop	 edx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	33 cd		 xor	 ecx, ebp
  00087	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008c	81 c4 0c 06 01
	00		 add	 esp, 67084		; 0001060cH
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
  0009d	0f 1f 00	 npad	 3
$LN5@lssproto_E:
  000a0	01 00 00 00	 DD	 1
  000a4	00 00 00 00	 DD	 $LN4@lssproto_E
$LN4@lssproto_E:
  000a8	f8 ff fe ff	 DD	 -65544			; fffefff8H
  000ac	00 00 01 00	 DD	 65536			; 00010000H
  000b0	00 00 00 00	 DD	 $LN3@lssproto_E
$LN3@lssproto_E:
  000b4	62		 DB	 98			; 00000062H
  000b5	75		 DB	 117			; 00000075H
  000b6	66		 DB	 102			; 00000066H
  000b7	66		 DB	 102			; 00000066H
  000b8	65		 DB	 101			; 00000065H
  000b9	72		 DB	 114			; 00000072H
  000ba	00		 DB	 0
?lssproto_Expup_send@@YAXH@Z ENDP			; lssproto_Expup_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_Gmset_send@@YAXHHPAD@Z
_TEXT	SEGMENT
_checksum$ = -65556					; size = 4
_buffer$ = -65544					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index$ = 12						; size = 4
_data$ = 16						; size = 4
?lssproto_Gmset_send@@YAXHHPAD@Z PROC			; lssproto_Gmset_send, COMDAT

; 2490 : void lssproto_Gmset_send(int fd,int index,char* data){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 06 01 00	 mov	 eax, 67096		; 00010618H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd e8 f9 fe
	ff		 lea	 edi, DWORD PTR [ebp-67096]
  00016	b9 86 41 00 00	 mov	 ecx, 16774		; 00004186H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2491 : 	char buffer[1024 * 64];
; 2492 : 	int checksum = 0;

  0002c	c7 85 ec ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _checksum$[ebp], 0

; 2493 : 	strcpy(buffer,"");

  00036	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0003b	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _strcpy
  00047	83 c4 08	 add	 esp, 8

; 2494 : 	memset(buffer, 0, 1024*64);

  0004a	68 00 00 01 00	 push	 65536			; 00010000H
  0004f	6a 00		 push	 0
  00051	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _memset
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2495 : 	checksum += util_mkint(buffer,index);

  00060	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00063	50		 push	 eax
  00064	8d 8d f8 ff fe
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00070	83 c4 08	 add	 esp, 8
  00073	03 85 ec ff fe
	ff		 add	 eax, DWORD PTR _checksum$[ebp]
  00079	89 85 ec ff fe
	ff		 mov	 DWORD PTR _checksum$[ebp], eax

; 2496 : 	checksum += util_mkstring(buffer,data);//版本名

  0007f	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00082	50		 push	 eax
  00083	8d 8d f8 ff fe
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  0008f	83 c4 08	 add	 esp, 8
  00092	03 85 ec ff fe
	ff		 add	 eax, DWORD PTR _checksum$[ebp]
  00098	89 85 ec ff fe
	ff		 mov	 DWORD PTR _checksum$[ebp], eax

; 2497 : 	checksum += util_mkstring(buffer,"dJuTNIuFKWUoFEJanPWTqgAATxHhlltK");//密钥

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FCFKGMLE@dJuTNIuFKWUoFEJanPWTqgAATxHhlltK@
  000a3	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000af	83 c4 08	 add	 esp, 8
  000b2	03 85 ec ff fe
	ff		 add	 eax, DWORD PTR _checksum$[ebp]
  000b8	89 85 ec ff fe
	ff		 mov	 DWORD PTR _checksum$[ebp], eax

; 2498 : 	util_mkint(buffer,checksum);

  000be	8b 85 ec ff fe
	ff		 mov	 eax, DWORD PTR _checksum$[ebp]
  000c4	50		 push	 eax
  000c5	8d 8d f8 ff fe
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000d1	83 c4 08	 add	 esp, 8

; 2499 : 	util_SendMesg(fd, LSSPROTO_GMSET_SEND, buffer);

  000d4	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000da	50		 push	 eax
  000db	68 2d 01 00 00	 push	 301			; 0000012dH
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2500 : }

  000ec	52		 push	 edx
  000ed	8b cd		 mov	 ecx, ebp
  000ef	50		 push	 eax
  000f0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@lssproto_G
  000f6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fb	58		 pop	 eax
  000fc	5a		 pop	 edx
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	33 cd		 xor	 ecx, ebp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	81 c4 18 06 01
	00		 add	 esp, 67096		; 00010618H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
  0011b	90		 npad	 1
$LN5@lssproto_G:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN4@lssproto_G
$LN4@lssproto_G:
  00124	f8 ff fe ff	 DD	 -65544			; fffefff8H
  00128	00 00 01 00	 DD	 65536			; 00010000H
  0012c	00 00 00 00	 DD	 $LN3@lssproto_G
$LN3@lssproto_G:
  00130	62		 DB	 98			; 00000062H
  00131	75		 DB	 117			; 00000075H
  00132	66		 DB	 102			; 00000066H
  00133	66		 DB	 102			; 00000066H
  00134	65		 DB	 101			; 00000065H
  00135	72		 DB	 114			; 00000072H
  00136	00		 DB	 0
?lssproto_Gmset_send@@YAXHHPAD@Z ENDP			; lssproto_Gmset_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_GetInfo_send@@YAXH@Z
_TEXT	SEGMENT
$T1 = -18096						; size = 4
_CpuCode$ = -16548					; size = 64
_MacCode$ = -16476					; size = 64
_iChecksum$ = -16404					; size = 4
_buffer$ = -16392					; size = 16384
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
?lssproto_GetInfo_send@@YAXH@Z PROC			; lssproto_GetInfo_send, COMDAT

; 1215 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 b4 46 00 00	 mov	 eax, 18100		; 000046b4H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd 4c b9 ff
	ff		 lea	 edi, DWORD PTR [ebp-18100]
  00016	b9 ad 11 00 00	 mov	 ecx, 4525		; 000011adH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1216 : 	char buffer[16384];
; 1217 : 	int iChecksum=0;

  0002c	c7 85 ec bf ff
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$[ebp], 0

; 1218 : 
; 1219 : 	buffer[0] = '\0';

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	89 8d 50 b9 ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00044	81 bd 50 b9 ff
	ff 00 40 00 00	 cmp	 DWORD PTR $T1[ebp], 16384 ; 00004000H
  0004e	73 02		 jae	 SHORT $LN3@lssproto_G
  00050	eb 05		 jmp	 SHORT $LN4@lssproto_G
$LN3@lssproto_G:
  00052	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@lssproto_G:
  00057	8b 95 50 b9 ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	c6 84 15 f8 bf
	ff ff 00	 mov	 BYTE PTR _buffer$[ebp+edx], 0

; 1220 : 
; 1221 : 	char MacCode[64];
; 1222 : 	char CpuCode[64];
; 1223 : 	getMAC(MacCode);

  00065	8d 85 a4 bf ff
	ff		 lea	 eax, DWORD PTR _MacCode$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?getMAC@@YAHPAD@Z	; getMAC
  00071	83 c4 04	 add	 esp, 4

; 1224 : 	getCpuId(CpuCode);

  00074	8d 85 5c bf ff
	ff		 lea	 eax, DWORD PTR _CpuCode$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?getCpuId@@YAHPAD@Z	; getCpuId
  00080	83 c4 04	 add	 esp, 4

; 1225 : 	iChecksum += util_mkstring(buffer, MacCode);

  00083	8d 85 a4 bf ff
	ff		 lea	 eax, DWORD PTR _MacCode$[ebp]
  00089	50		 push	 eax
  0008a	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  00096	83 c4 08	 add	 esp, 8
  00099	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  0009f	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1226 : 	iChecksum += util_mkstring(buffer, CpuCode);

  000a5	8d 85 5c bf ff
	ff		 lea	 eax, DWORD PTR _CpuCode$[ebp]
  000ab	50		 push	 eax
  000ac	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ?util_mkstring@@YAHPAD0@Z ; util_mkstring
  000b8	83 c4 08	 add	 esp, 8
  000bb	03 85 ec bf ff
	ff		 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c1	89 85 ec bf ff
	ff		 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1227 : 	util_mkint(buffer, iChecksum);

  000c7	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000cd	50		 push	 eax
  000ce	8d 8d f8 bf ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000da	83 c4 08	 add	 esp, 8

; 1228 : 	util_SendMesg(fd, LSSPROTO_GETINFO_SEND, buffer);

  000dd	8d 85 f8 bf ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000e3	50		 push	 eax
  000e4	68 d2 00 00 00	 push	 210			; 000000d2H
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@lssproto_G:

; 1229 : }

  000f5	52		 push	 edx
  000f6	8b cd		 mov	 ecx, ebp
  000f8	50		 push	 eax
  000f9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@lssproto_G
  000ff	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00104	58		 pop	 eax
  00105	5a		 pop	 edx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010c	33 cd		 xor	 ecx, ebp
  0010e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00113	81 c4 b4 46 00
	00		 add	 esp, 18100		; 000046b4H
  00119	3b ec		 cmp	 ebp, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
$LN9@lssproto_G:
  00124	03 00 00 00	 DD	 3
  00128	00 00 00 00	 DD	 $LN8@lssproto_G
$LN8@lssproto_G:
  0012c	f8 bf ff ff	 DD	 -16392			; ffffbff8H
  00130	00 40 00 00	 DD	 16384			; 00004000H
  00134	00 00 00 00	 DD	 $LN5@lssproto_G
  00138	a4 bf ff ff	 DD	 -16476			; ffffbfa4H
  0013c	40 00 00 00	 DD	 64			; 00000040H
  00140	00 00 00 00	 DD	 $LN6@lssproto_G
  00144	5c bf ff ff	 DD	 -16548			; ffffbf5cH
  00148	40 00 00 00	 DD	 64			; 00000040H
  0014c	00 00 00 00	 DD	 $LN7@lssproto_G
$LN7@lssproto_G:
  00150	43		 DB	 67			; 00000043H
  00151	70		 DB	 112			; 00000070H
  00152	75		 DB	 117			; 00000075H
  00153	43		 DB	 67			; 00000043H
  00154	6f		 DB	 111			; 0000006fH
  00155	64		 DB	 100			; 00000064H
  00156	65		 DB	 101			; 00000065H
  00157	00		 DB	 0
$LN6@lssproto_G:
  00158	4d		 DB	 77			; 0000004dH
  00159	61		 DB	 97			; 00000061H
  0015a	63		 DB	 99			; 00000063H
  0015b	43		 DB	 67			; 00000043H
  0015c	6f		 DB	 111			; 0000006fH
  0015d	64		 DB	 100			; 00000064H
  0015e	65		 DB	 101			; 00000065H
  0015f	00		 DB	 0
$LN5@lssproto_G:
  00160	62		 DB	 98			; 00000062H
  00161	75		 DB	 117			; 00000075H
  00162	66		 DB	 102			; 00000066H
  00163	66		 DB	 102			; 00000066H
  00164	65		 DB	 101			; 00000065H
  00165	72		 DB	 114			; 00000072H
  00166	00		 DB	 0
?lssproto_GetInfo_send@@YAXH@Z ENDP			; lssproto_GetInfo_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?lssproto_SaMenu_send@@YAXHHHH@Z
_TEXT	SEGMENT
_checksum$ = -65556					; size = 4
_buffer$ = -65544					; size = 65536
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_index1$ = 12						; size = 4
_index2$ = 16						; size = 4
_index3$ = 20						; size = 4
?lssproto_SaMenu_send@@YAXHHHH@Z PROC			; lssproto_SaMenu_send, COMDAT

; 2476 : void lssproto_SaMenu_send(int fd, int index1,int index2,int index3){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 18 06 01 00	 mov	 eax, 67096		; 00010618H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd e8 f9 fe
	ff		 lea	 edi, DWORD PTR [ebp-67096]
  00016	b9 86 41 00 00	 mov	 ecx, 16774		; 00004186H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2477 : 	char buffer[1024 * 64];
; 2478 : 	int checksum = 0;

  0002c	c7 85 ec ff fe
	ff 00 00 00 00	 mov	 DWORD PTR _checksum$[ebp], 0

; 2479 : 	strcpy(buffer,"");

  00036	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0003b	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _strcpy
  00047	83 c4 08	 add	 esp, 8

; 2480 : 
; 2481 : 	checksum += util_mkint(buffer,index1);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _index1$[ebp]
  0004d	50		 push	 eax
  0004e	8d 8d f8 ff fe
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  0005a	83 c4 08	 add	 esp, 8
  0005d	03 85 ec ff fe
	ff		 add	 eax, DWORD PTR _checksum$[ebp]
  00063	89 85 ec ff fe
	ff		 mov	 DWORD PTR _checksum$[ebp], eax

; 2482 : 	checksum += util_mkint(buffer,index2);

  00069	8b 45 10	 mov	 eax, DWORD PTR _index2$[ebp]
  0006c	50		 push	 eax
  0006d	8d 8d f8 ff fe
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00079	83 c4 08	 add	 esp, 8
  0007c	03 85 ec ff fe
	ff		 add	 eax, DWORD PTR _checksum$[ebp]
  00082	89 85 ec ff fe
	ff		 mov	 DWORD PTR _checksum$[ebp], eax

; 2483 : 	checksum += util_mkint(buffer,index3);

  00088	8b 45 14	 mov	 eax, DWORD PTR _index3$[ebp]
  0008b	50		 push	 eax
  0008c	8d 8d f8 ff fe
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  00098	83 c4 08	 add	 esp, 8
  0009b	03 85 ec ff fe
	ff		 add	 eax, DWORD PTR _checksum$[ebp]
  000a1	89 85 ec ff fe
	ff		 mov	 DWORD PTR _checksum$[ebp], eax

; 2484 : 	util_mkint(buffer,checksum);

  000a7	8b 85 ec ff fe
	ff		 mov	 eax, DWORD PTR _checksum$[ebp]
  000ad	50		 push	 eax
  000ae	8d 8d f8 ff fe
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?util_mkint@@YAHPADH@Z	; util_mkint
  000ba	83 c4 08	 add	 esp, 8

; 2485 : 	util_SendMesg(fd, LSSPROTO_SAMENU_SEND, buffer);

  000bd	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c3	50		 push	 eax
  000c4	68 ca 00 00 00	 push	 202			; 000000caH
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?util_SendMesg@@YAXHHPAD@Z ; util_SendMesg
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2486 : }

  000d5	52		 push	 edx
  000d6	8b cd		 mov	 ecx, ebp
  000d8	50		 push	 eax
  000d9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@lssproto_S
  000df	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e4	58		 pop	 eax
  000e5	5a		 pop	 edx
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ec	33 cd		 xor	 ecx, ebp
  000ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f3	81 c4 18 06 01
	00		 add	 esp, 67096		; 00010618H
  000f9	3b ec		 cmp	 ebp, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
$LN5@lssproto_S:
  00104	01 00 00 00	 DD	 1
  00108	00 00 00 00	 DD	 $LN4@lssproto_S
$LN4@lssproto_S:
  0010c	f8 ff fe ff	 DD	 -65544			; fffefff8H
  00110	00 00 01 00	 DD	 65536			; 00010000H
  00114	00 00 00 00	 DD	 $LN3@lssproto_S
$LN3@lssproto_S:
  00118	62		 DB	 98			; 00000062H
  00119	75		 DB	 117			; 00000075H
  0011a	66		 DB	 102			; 00000066H
  0011b	66		 DB	 102			; 00000066H
  0011c	65		 DB	 101			; 00000065H
  0011d	72		 DB	 114			; 00000072H
  0011e	00		 DB	 0
?lssproto_SaMenu_send@@YAXHHHH@Z ENDP			; lssproto_SaMenu_send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\newproto\protocol.cpp
;	COMDAT ?SaDispatchMessage@@YAHHPAD@Z
_TEXT	SEGMENT
_data$ = -756044					; size = 512
_num$1 = -755524					; size = 4
_coloer$2 = -755512					; size = 4
_data$3 = -755500					; size = 512
_hostnametamp$4 = -754980				; size = 4
_szData$5 = -754968					; size = 16384
_iActionNum$6 = -738576					; size = 4
_iType$7 = -738564					; size = 4
_iCharaindex$8 = -738552				; size = 4
_iChecksumrecv$9 = -738540				; size = 4
_iChecksum$10 = -738528					; size = 4
_data$11 = -738516					; size = 16384
_data$12 = -722124					; size = 16384
_data$13 = -705732					; size = 16384
_data$14 = -689340					; size = 16384
_effect$15 = -672948					; size = 4
_data$16 = -672936					; size = 16384
_data$17 = -656544					; size = 16384
_data$18 = -640152					; size = 16384
_data$19 = -623760					; size = 16384
_data$20 = -607368					; size = 16384
_data$21 = -590976					; size = 16384
_flg$22 = -574584					; size = 4
_y$23 = -574572						; size = 4
_x$24 = -574560						; size = 4
_data$25 = -574548					; size = 16384
_data$26 = -558156					; size = 16384
_AddCount$27 = -541764					; size = 4
_test$28 = -541752					; size = 16384
_player$29 = -525360					; size = 4
_logincount$30 = -525348				; size = 4
_data$31 = -525336					; size = 16384
_data$32 = -508944					; size = 16384
_result$33 = -492552					; size = 16384
_data$34 = -476160					; size = 16384
_result$35 = -459768					; size = 16384
_data$36 = -443376					; size = 16384
_result$37 = -426984					; size = 16384
_data$38 = -410592					; size = 16384
_result$39 = -394200					; size = 16384
_data$40 = -377808					; size = 16384
_result$41 = -361416					; size = 16384
_result$42 = -345024					; size = 16384
_sw$43 = -328632					; size = 4
_senumber$44 = -328620					; size = 4
_y$45 = -328608						; size = 4
_x$46 = -328596						; size = 4
_option$47 = -328584					; size = 16384
_level$48 = -312192					; size = 4
_effect$49 = -312180					; size = 4
_data$50 = -312168					; size = 16384
_objindex$51 = -295776					; size = 4
_seqno$52 = -295764					; size = 4
_buttontype$53 = -295752				; size = 4
_windowtype$54 = -295740				; size = 4
_point$55 = -295728					; size = 4
_toindex$56 = -295716					; size = 4
_havepetskill$57 = -295704				; size = 4
_havepetindex$58 = -295692				; size = 4
_result$59 = -295680					; size = 4
_result$60 = -295668					; size = 4
_petarray$61 = -295656					; size = 4
_result$62 = -295644					; size = 4
_standbypet$63 = -295632				; size = 4
_result$64 = -295620					; size = 4
_petarray$65 = -295608					; size = 4
_result$66 = -295596					; size = 4
_request$67 = -295584					; size = 4
_flg$68 = -295572					; size = 4
_flg$69 = -295560					; size = 4
_data$70 = -295548					; size = 16384
_dy$71 = -279156					; size = 4
_dx$72 = -279144					; size = 4
_category$73 = -279132					; size = 4
_data$74 = -279120					; size = 16384
_data$75 = -262728					; size = 16384
_data$76 = -246336					; size = 16384
_data$77 = -229944					; size = 16384
_data$78 = -213552					; size = 16384
_data$79 = -197160					; size = 16384
_y2$80 = -180768					; size = 4
_x2$81 = -180756					; size = 4
_y1$82 = -180744					; size = 4
_x1$83 = -180732					; size = 4
_fl$84 = -180720					; size = 4
_data$85 = -180708					; size = 16384
_eventsum$86 = -164316					; size = 4
_objsum$87 = -164304					; size = 4
_tilesum$88 = -164292					; size = 4
_y2$89 = -164280					; size = 4
_x2$90 = -164268					; size = 4
_y1$91 = -164256					; size = 4
_x1$92 = -164244					; size = 4
_fl$93 = -164232					; size = 4
_color$94 = -164220					; size = 4
_message$95 = -164208					; size = 16384
_index$96 = -147816					; size = 4
_data$97 = -147804					; size = 16384
_num$98 = -131412					; size = 4
_data$99 = -131400					; size = 16384
_cdata$100 = -115008					; size = 16384
_no$101 = -98616					; size = 4
_flg$102 = -98604					; size = 4
_dir$103 = -98592					; size = 4
_y$104 = -98580						; size = 4
_x$105 = -98568						; size = 4
_graphicsno$106 = -98556				; size = 4
_objindex$107 = -98544					; size = 4
_color$108 = -98532					; size = 4
_text$109 = -98520					; size = 16384
_aindex$110 = -82128					; size = 4
_toindex$111 = -82116					; size = 4
_fromindex$112 = -82104					; size = 4
_data$113 = -82092					; size = 16384
_command$114 = -65700					; size = 16384
_data$115 = -49308					; size = 16384
_data$116 = -32916					; size = 16384
_field$117 = -16524					; size = 4
_result$118 = -16512					; size = 4
_result$119 = -16500					; size = 4
_seqno$120 = -16488					; size = 4
_dir$121 = -16476					; size = 4
_y$122 = -16464						; size = 4
_x$123 = -16452						; size = 4
_raw$ = -16440						; size = 16384
_iChecksumrecv$ = -48					; size = 4
_iChecksum$ = -36					; size = 4
_fieldcount$ = -24					; size = 4
_func$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fd$ = 8						; size = 4
_encoded$ = 12						; size = 4
?SaDispatchMessage@@YAHHPAD@Z PROC			; SaDispatchMessage, COMDAT

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 50 8f 0b 00	 mov	 eax, 757584		; 000b8f50H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d bd b0 70 f4
	ff		 lea	 edi, DWORD PTR [ebp-757584]
  00016	b9 d4 e3 02 00	 mov	 ecx, 189396		; 0002e3d4H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 52   : 	int		func,fieldcount;
; 53   : 	int		iChecksum = 0, iChecksumrecv;

  0002c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _iChecksum$[ebp], 0

; 54   : 	char	raw[16384];
; 55   : 
; 56   : 	util_DecodeMessage(raw,encoded);

  00033	8b 45 0c	 mov	 eax, DWORD PTR _encoded$[ebp]
  00036	50		 push	 eax
  00037	8d 8d c8 bf ff
	ff		 lea	 ecx, DWORD PTR _raw$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ?util_DecodeMessage@@YAXPAD0@Z ; util_DecodeMessage
  00043	83 c4 08	 add	 esp, 8

; 57   : #ifdef _LOG_MSG
; 58   : 	FILE *fp = fopen( "recvtime.txt", "a+" );
; 59   : 	if( fp ) fprintf( fp, "%u RECV %d  %s\n", TimeGetTime(), strlen(raw), raw);
; 60   : 	if( fp ) fclose( fp );
; 61   : #endif	
; 62   : 
; 63   : 	util_SplitMessage(raw,SEPARATOR);

  00046	68 00 00 00 00	 push	 OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
  0004b	8d 85 c8 bf ff
	ff		 lea	 eax, DWORD PTR _raw$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?util_SplitMessage@@YAXPAD0@Z ; util_SplitMessage
  00057	83 c4 08	 add	 esp, 8

; 64   : 	if (util_GetFunctionFromSlice(&func, &fieldcount)){

  0005a	8d 45 e8	 lea	 eax, DWORD PTR _fieldcount$[ebp]
  0005d	50		 push	 eax
  0005e	8d 4d f4	 lea	 ecx, DWORD PTR _func$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ?util_GetFunctionFromSlice@@YAHPAH0@Z ; util_GetFunctionFromSlice
  00067	83 c4 08	 add	 esp, 8
  0006a	85 c0		 test	 eax, eax
  0006c	0f 84 24 22 00
	00		 je	 $LN2@SaDispatch

; 65   : 
; 66   : #ifdef _LOG_MSG
; 67   : 		FILE *fp=fopen("recvtime.txt","a+");
; 68   : 		if( fp ) fprintf( fp, "%u DISPATCH  func: %d\n", TimeGetTime(), func );
; 69   : 		if( fp ) fclose( fp );
; 70   : #endif		
; 71   : 
; 72   : 		//JL 2016.8.23
; 73   : 		JL_resetRecv();

  00072	e8 00 00 00 00	 call	 ?JL_resetRecv@@YAXXZ	; JL_resetRecv

; 74   : 
; 75   : 	if (func==LSSPROTO_XYD_RECV) {

  00077	83 7d f4 02	 cmp	 DWORD PTR _func$[ebp], 2
  0007b	0f 85 a4 00 00
	00		 jne	 $LN3@SaDispatch

; 76   : 		int x;
; 77   : 		int y;
; 78   : 		int dir;
; 79   : 
; 80   : 		iChecksum += util_deint(2, &x);

  00081	8d 85 bc bf ff
	ff		 lea	 eax, DWORD PTR _x$123[ebp]
  00087	50		 push	 eax
  00088	6a 02		 push	 2
  0008a	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0008f	83 c4 08	 add	 esp, 8
  00092	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00095	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 81   : 		iChecksum += util_deint(3, &y);

  00098	8d 85 b0 bf ff
	ff		 lea	 eax, DWORD PTR _y$122[ebp]
  0009e	50		 push	 eax
  0009f	6a 03		 push	 3
  000a1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  000a6	83 c4 08	 add	 esp, 8
  000a9	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  000ac	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 82   : 		iChecksum += util_deint(4, &dir);

  000af	8d 85 a4 bf ff
	ff		 lea	 eax, DWORD PTR _dir$121[ebp]
  000b5	50		 push	 eax
  000b6	6a 04		 push	 4
  000b8	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  000bd	83 c4 08	 add	 esp, 8
  000c0	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  000c3	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 83   : 		util_deint(5, &iChecksumrecv);

  000c6	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  000c9	50		 push	 eax
  000ca	6a 05		 push	 5
  000cc	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  000d1	83 c4 08	 add	 esp, 8

; 84   : 		if (iChecksum != iChecksumrecv) {

  000d4	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  000d7	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  000da	74 11		 je	 SHORT $LN5@SaDispatch

; 85   : 			SliceCount=0;

  000dc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 86   : 			return 0;

  000e6	33 c0		 xor	 eax, eax
  000e8	e9 ab 21 00 00	 jmp	 $LN1@SaDispatch
$LN5@SaDispatch:

; 87   : 		}
; 88   : 		lssproto_XYD_recv(fd, x, y, dir);

  000ed	8b 85 a4 bf ff
	ff		 mov	 eax, DWORD PTR _dir$121[ebp]
  000f3	50		 push	 eax
  000f4	8b 8d b0 bf ff
	ff		 mov	 ecx, DWORD PTR _y$122[ebp]
  000fa	51		 push	 ecx
  000fb	8b 95 bc bf ff
	ff		 mov	 edx, DWORD PTR _x$123[ebp]
  00101	52		 push	 edx
  00102	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?lssproto_XYD_recv@@YAXHHHH@Z ; lssproto_XYD_recv
  0010b	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : #ifdef _NB_FUNRECV_DEBUG
; 90   : 		printf("\n接收[%d]fun:%s|x:%d|y:%d|dir:%d",func,"LSSPROTO_XYD_RECV",x,y,dir);
; 91   : #endif
; 92   : 		SliceCount=0;

  0010e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 93   : 		return func;

  00118	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  0011b	e9 78 21 00 00	 jmp	 $LN1@SaDispatch
  00120	e9 67 21 00 00	 jmp	 $LN4@SaDispatch
$LN3@SaDispatch:

; 94   : 	}
; 95   : 	else if (func==LSSPROTO_EV_RECV)

  00125	83 7d f4 04	 cmp	 DWORD PTR _func$[ebp], 4
  00129	0f 85 86 00 00
	00		 jne	 $LN6@SaDispatch

; 96   : 	{
; 97   : 		int seqno;
; 98   : 		int result;
; 99   : 
; 100  : 		iChecksum += util_deint(2, &seqno);

  0012f	8d 85 98 bf ff
	ff		 lea	 eax, DWORD PTR _seqno$120[ebp]
  00135	50		 push	 eax
  00136	6a 02		 push	 2
  00138	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0013d	83 c4 08	 add	 esp, 8
  00140	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00143	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 101  : 		iChecksum += util_deint(3, &result);

  00146	8d 85 8c bf ff
	ff		 lea	 eax, DWORD PTR _result$119[ebp]
  0014c	50		 push	 eax
  0014d	6a 03		 push	 3
  0014f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00154	83 c4 08	 add	 esp, 8
  00157	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0015a	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 102  : 		util_deint(4, &iChecksumrecv);

  0015d	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00160	50		 push	 eax
  00161	6a 04		 push	 4
  00163	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00168	83 c4 08	 add	 esp, 8

; 103  : 		if (iChecksum!=iChecksumrecv) {

  0016b	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0016e	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00171	74 11		 je	 SHORT $LN8@SaDispatch

; 104  : 			SliceCount=0;

  00173	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 105  : 			return 0;

  0017d	33 c0		 xor	 eax, eax
  0017f	e9 14 21 00 00	 jmp	 $LN1@SaDispatch
$LN8@SaDispatch:

; 106  : 		}
; 107  : 		lssproto_EV_recv(fd, seqno, result);

  00184	8b 85 8c bf ff
	ff		 mov	 eax, DWORD PTR _result$119[ebp]
  0018a	50		 push	 eax
  0018b	8b 8d 98 bf ff
	ff		 mov	 ecx, DWORD PTR _seqno$120[ebp]
  00191	51		 push	 ecx
  00192	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 ?lssproto_EV_recv@@YAXHHH@Z ; lssproto_EV_recv
  0019b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 108  : #ifdef _NB_FUNRECV_DEBUG
; 109  : 		printf("\n接收[%d]fun:%s|seqno:%d|result:%d",func,"LSSPROTO_EV_RECV",seqno,result);
; 110  : #endif
; 111  : 		SliceCount=0;

  0019e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 112  : 		return func;

  001a8	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  001ab	e9 e8 20 00 00	 jmp	 $LN1@SaDispatch
  001b0	e9 d7 20 00 00	 jmp	 $LN4@SaDispatch
$LN6@SaDispatch:

; 113  : 	}
; 114  : 	else if (func==LSSPROTO_EN_RECV)	//JL 7号包  战斗包

  001b5	83 7d f4 07	 cmp	 DWORD PTR _func$[ebp], 7
  001b9	0f 85 86 00 00
	00		 jne	 $LN9@SaDispatch

; 115  : 	{
; 116  : 		int result;
; 117  : 		int field;
; 118  : 
; 119  : 		iChecksum += util_deint(2, &result);

  001bf	8d 85 80 bf ff
	ff		 lea	 eax, DWORD PTR _result$118[ebp]
  001c5	50		 push	 eax
  001c6	6a 02		 push	 2
  001c8	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  001cd	83 c4 08	 add	 esp, 8
  001d0	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  001d3	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 120  : 		iChecksum += util_deint(3, &field);

  001d6	8d 85 74 bf ff
	ff		 lea	 eax, DWORD PTR _field$117[ebp]
  001dc	50		 push	 eax
  001dd	6a 03		 push	 3
  001df	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  001e4	83 c4 08	 add	 esp, 8
  001e7	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  001ea	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 121  : 		util_deint(4, &iChecksumrecv);

  001ed	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  001f0	50		 push	 eax
  001f1	6a 04		 push	 4
  001f3	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  001f8	83 c4 08	 add	 esp, 8

; 122  : 		if (iChecksum!=iChecksumrecv) {

  001fb	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  001fe	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00201	74 11		 je	 SHORT $LN11@SaDispatch

; 123  : 			SliceCount=0;

  00203	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 124  : 			return 0;

  0020d	33 c0		 xor	 eax, eax
  0020f	e9 84 20 00 00	 jmp	 $LN1@SaDispatch
$LN11@SaDispatch:

; 125  : 		}
; 126  : 		lssproto_EN_recv(fd, result, field);

  00214	8b 85 74 bf ff
	ff		 mov	 eax, DWORD PTR _field$117[ebp]
  0021a	50		 push	 eax
  0021b	8b 8d 80 bf ff
	ff		 mov	 ecx, DWORD PTR _result$118[ebp]
  00221	51		 push	 ecx
  00222	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  00225	52		 push	 edx
  00226	e8 00 00 00 00	 call	 ?lssproto_EN_recv@@YAXHHH@Z ; lssproto_EN_recv
  0022b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 127  : #ifdef _NB_FUNRECV_DEBUG
; 128  : 		printf("\n接收[%d]fun:%s|result:%d|field:%d",func,"LSSPROTO_EN_RECV",result,field);
; 129  : #endif
; 130  : 		SliceCount=0;

  0022e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 131  : 		return func;

  00238	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  0023b	e9 58 20 00 00	 jmp	 $LN1@SaDispatch
  00240	e9 47 20 00 00	 jmp	 $LN4@SaDispatch
$LN9@SaDispatch:

; 132  : 	}
; 133  : 	else if (func==LSSPROTO_RS_RECV)

  00245	83 7d f4 0c	 cmp	 DWORD PTR _func$[ebp], 12 ; 0000000cH
  00249	75 68		 jne	 SHORT $LN12@SaDispatch

; 134  : 	{
; 135  : 		char data[16384];
; 136  : 
; 137  : 		iChecksum += util_destring(2, data);

  0024b	8d 85 6c 7f ff
	ff		 lea	 eax, DWORD PTR _data$116[ebp]
  00251	50		 push	 eax
  00252	6a 02		 push	 2
  00254	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00259	83 c4 08	 add	 esp, 8
  0025c	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0025f	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 138  : 		util_deint(3, &iChecksumrecv);

  00262	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00265	50		 push	 eax
  00266	6a 03		 push	 3
  00268	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0026d	83 c4 08	 add	 esp, 8

; 139  : 		if (iChecksum!=iChecksumrecv) {

  00270	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00273	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00276	74 11		 je	 SHORT $LN14@SaDispatch

; 140  : 			SliceCount=0;

  00278	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 141  : 			return 0;

  00282	33 c0		 xor	 eax, eax
  00284	e9 0f 20 00 00	 jmp	 $LN1@SaDispatch
$LN14@SaDispatch:

; 142  : 		}
; 143  : 		lssproto_RS_recv(fd, data);

  00289	8d 85 6c 7f ff
	ff		 lea	 eax, DWORD PTR _data$116[ebp]
  0028f	50		 push	 eax
  00290	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00293	51		 push	 ecx
  00294	e8 00 00 00 00	 call	 ?lssproto_RS_recv@@YAXHPAD@Z ; lssproto_RS_recv
  00299	83 c4 08	 add	 esp, 8

; 144  : #ifdef _NB_FUNRECV_DEBUG
; 145  : 		printf("\n接收[%d]fun:%s|data:%s",func,"LSSPROTO_RS_RECV",data);
; 146  : #endif
; 147  : 		SliceCount=0;

  0029c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 148  : 		return func;

  002a6	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  002a9	e9 ea 1f 00 00	 jmp	 $LN1@SaDispatch
  002ae	e9 d9 1f 00 00	 jmp	 $LN4@SaDispatch
$LN12@SaDispatch:

; 149  : 	}
; 150  : 	else if (func==LSSPROTO_RD_RECV) 

  002b3	83 7d f4 0d	 cmp	 DWORD PTR _func$[ebp], 13 ; 0000000dH
  002b7	75 68		 jne	 SHORT $LN15@SaDispatch

; 151  : 	{
; 152  : 		char data[16384];
; 153  : 
; 154  : 		iChecksum += util_destring(2, data);

  002b9	8d 85 64 3f ff
	ff		 lea	 eax, DWORD PTR _data$115[ebp]
  002bf	50		 push	 eax
  002c0	6a 02		 push	 2
  002c2	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  002c7	83 c4 08	 add	 esp, 8
  002ca	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  002cd	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 155  : 		util_deint(3, &iChecksumrecv);

  002d0	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  002d3	50		 push	 eax
  002d4	6a 03		 push	 3
  002d6	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  002db	83 c4 08	 add	 esp, 8

; 156  : 		if (iChecksum!=iChecksumrecv) {

  002de	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  002e1	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  002e4	74 11		 je	 SHORT $LN17@SaDispatch

; 157  : 			SliceCount=0;

  002e6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 158  : 			return 0;

  002f0	33 c0		 xor	 eax, eax
  002f2	e9 a1 1f 00 00	 jmp	 $LN1@SaDispatch
$LN17@SaDispatch:

; 159  : 		}
; 160  : 		lssproto_RD_recv(fd, data);

  002f7	8d 85 64 3f ff
	ff		 lea	 eax, DWORD PTR _data$115[ebp]
  002fd	50		 push	 eax
  002fe	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00301	51		 push	 ecx
  00302	e8 00 00 00 00	 call	 ?lssproto_RD_recv@@YAXHPAD@Z ; lssproto_RD_recv
  00307	83 c4 08	 add	 esp, 8

; 161  : #ifdef _NB_FUNRECV_DEBUG
; 162  : 		printf("\n接收[%d]fun:%s|data:%s",func,"LSSPROTO_RD_RECV",data);
; 163  : #endif
; 164  : 		SliceCount=0;

  0030a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 165  : 		return func;

  00314	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00317	e9 7c 1f 00 00	 jmp	 $LN1@SaDispatch
  0031c	e9 6b 1f 00 00	 jmp	 $LN4@SaDispatch
$LN15@SaDispatch:

; 166  : 	}
; 167  : 	else if (func==LSSPROTO_B_RECV)

  00321	83 7d f4 0f	 cmp	 DWORD PTR _func$[ebp], 15 ; 0000000fH
  00325	75 77		 jne	 SHORT $LN18@SaDispatch

; 168  : 	{
; 169  : 		char command[16384];
; 170  : 
; 171  : 		iChecksum += util_destring(2, command);

  00327	8d 85 5c ff fe
	ff		 lea	 eax, DWORD PTR _command$114[ebp]
  0032d	50		 push	 eax
  0032e	6a 02		 push	 2
  00330	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00335	83 c4 08	 add	 esp, 8
  00338	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0033b	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 172  : 		util_deint(3, &iChecksumrecv);

  0033e	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00341	50		 push	 eax
  00342	6a 03		 push	 3
  00344	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00349	83 c4 08	 add	 esp, 8

; 173  : 		if (iChecksum!=iChecksumrecv) {

  0034c	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0034f	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00352	74 11		 je	 SHORT $LN20@SaDispatch

; 174  : 			SliceCount=0;

  00354	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 175  : 			return 0;

  0035e	33 c0		 xor	 eax, eax
  00360	e9 33 1f 00 00	 jmp	 $LN1@SaDispatch
$LN20@SaDispatch:

; 176  : 		}
; 177  : 
; 178  : 		LogToRecvdata( command );

  00365	8d 85 5c ff fe
	ff		 lea	 eax, DWORD PTR _command$114[ebp]
  0036b	50		 push	 eax
  0036c	e8 00 00 00 00	 call	 ?LogToRecvdata@@YAXPAD@Z ; LogToRecvdata
  00371	83 c4 04	 add	 esp, 4

; 179  : 
; 180  : 		lssproto_B_recv(fd, command);

  00374	8d 85 5c ff fe
	ff		 lea	 eax, DWORD PTR _command$114[ebp]
  0037a	50		 push	 eax
  0037b	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0037e	51		 push	 ecx
  0037f	e8 00 00 00 00	 call	 ?lssproto_B_recv@@YAXHPAD@Z ; lssproto_B_recv
  00384	83 c4 08	 add	 esp, 8

; 181  : #ifdef _NB_FUNRECV_DEBUG
; 182  : 		printf("\n接收[%d]fun:%s|command:%s",func,"LSSPROTO_B_RECV",command);
; 183  : #endif
; 184  : 		SliceCount=0;

  00387	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 185  : 		return func;

  00391	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00394	e9 ff 1e 00 00	 jmp	 $LN1@SaDispatch
  00399	e9 ee 1e 00 00	 jmp	 $LN4@SaDispatch
$LN18@SaDispatch:

; 186  : 	}
; 187  : 	else if (func==LSSPROTO_I_RECV)   // 22 道具包

  0039e	83 7d f4 16	 cmp	 DWORD PTR _func$[ebp], 22 ; 00000016H
  003a2	75 68		 jne	 SHORT $LN21@SaDispatch

; 188  : 	{
; 189  : 		char data[16384];
; 190  : 
; 191  : 		iChecksum += util_destring(2, data);

  003a4	8d 85 54 bf fe
	ff		 lea	 eax, DWORD PTR _data$113[ebp]
  003aa	50		 push	 eax
  003ab	6a 02		 push	 2
  003ad	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  003b2	83 c4 08	 add	 esp, 8
  003b5	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  003b8	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 192  : 		util_deint(3, &iChecksumrecv);

  003bb	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  003be	50		 push	 eax
  003bf	6a 03		 push	 3
  003c1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  003c6	83 c4 08	 add	 esp, 8

; 193  : 		if (iChecksum!=iChecksumrecv) {

  003c9	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  003cc	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  003cf	74 11		 je	 SHORT $LN23@SaDispatch

; 194  : 			SliceCount=0;

  003d1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 195  : 			return 0;

  003db	33 c0		 xor	 eax, eax
  003dd	e9 b6 1e 00 00	 jmp	 $LN1@SaDispatch
$LN23@SaDispatch:

; 196  : 		}
; 197  : 		lssproto_I_recv(fd, data);

  003e2	8d 85 54 bf fe
	ff		 lea	 eax, DWORD PTR _data$113[ebp]
  003e8	50		 push	 eax
  003e9	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  003ec	51		 push	 ecx
  003ed	e8 00 00 00 00	 call	 ?lssproto_I_recv@@YAXHPAD@Z ; lssproto_I_recv
  003f2	83 c4 08	 add	 esp, 8

; 198  : #ifdef _NB_FUNRECV_DEBUG
; 199  : 		printf("\n接收[%d]fun:%s|data:%s",func,"LSSPROTO_I_RECV",data);
; 200  : #endif
; 201  : 		SliceCount=0;

  003f5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 202  : 		return func;

  003ff	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00402	e9 91 1e 00 00	 jmp	 $LN1@SaDispatch
  00407	e9 80 1e 00 00	 jmp	 $LN4@SaDispatch
$LN21@SaDispatch:

; 203  : 	}else if (func==LSSPROTO_SI_RECV){

  0040c	83 7d f4 18	 cmp	 DWORD PTR _func$[ebp], 24 ; 00000018H
  00410	0f 85 86 00 00
	00		 jne	 $LN24@SaDispatch

; 204  : 		int fromindex;
; 205  : 		int toindex;
; 206  : 
; 207  : 		iChecksum += util_deint(2, &fromindex);

  00416	8d 85 48 bf fe
	ff		 lea	 eax, DWORD PTR _fromindex$112[ebp]
  0041c	50		 push	 eax
  0041d	6a 02		 push	 2
  0041f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00424	83 c4 08	 add	 esp, 8
  00427	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0042a	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 208  : 		iChecksum += util_deint(3, &toindex);

  0042d	8d 85 3c bf fe
	ff		 lea	 eax, DWORD PTR _toindex$111[ebp]
  00433	50		 push	 eax
  00434	6a 03		 push	 3
  00436	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0043b	83 c4 08	 add	 esp, 8
  0043e	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00441	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 209  : 		util_deint(4, &iChecksumrecv);

  00444	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00447	50		 push	 eax
  00448	6a 04		 push	 4
  0044a	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0044f	83 c4 08	 add	 esp, 8

; 210  : 		if (iChecksum!=iChecksumrecv) {

  00452	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00455	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00458	74 11		 je	 SHORT $LN26@SaDispatch

; 211  : 			SliceCount=0;

  0045a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 212  : 			return 0;

  00464	33 c0		 xor	 eax, eax
  00466	e9 2d 1e 00 00	 jmp	 $LN1@SaDispatch
$LN26@SaDispatch:

; 213  : 		}
; 214  : 		lssproto_SI_recv(fd, fromindex, toindex);

  0046b	8b 85 3c bf fe
	ff		 mov	 eax, DWORD PTR _toindex$111[ebp]
  00471	50		 push	 eax
  00472	8b 8d 48 bf fe
	ff		 mov	 ecx, DWORD PTR _fromindex$112[ebp]
  00478	51		 push	 ecx
  00479	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  0047c	52		 push	 edx
  0047d	e8 00 00 00 00	 call	 ?lssproto_SI_recv@@YAXHHH@Z ; lssproto_SI_recv
  00482	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  : #ifdef _NB_FUNRECV_DEBUG
; 216  : 		printf("\n接收[%d]fun:%s|fromindex:%d|toindex:%d",func,"LSSPROTO_SI_RECV",fromindex,toindex);
; 217  : #endif
; 218  : 		SliceCount=0;

  00485	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 219  : 		return func;

  0048f	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00492	e9 01 1e 00 00	 jmp	 $LN1@SaDispatch
  00497	e9 f0 1d 00 00	 jmp	 $LN4@SaDispatch
$LN24@SaDispatch:

; 220  : 	}
; 221  : 	else if (func==LSSPROTO_MSG_RECV)

  0049c	83 7d f4 1a	 cmp	 DWORD PTR _func$[ebp], 26 ; 0000001aH
  004a0	0f 85 a4 00 00
	00		 jne	 $LN27@SaDispatch

; 222  : 	{
; 223  : 		int aindex;
; 224  : 		char text[16384];
; 225  : 		int color;
; 226  : 
; 227  : 		iChecksum += util_deint(2, &aindex);

  004a6	8d 85 30 bf fe
	ff		 lea	 eax, DWORD PTR _aindex$110[ebp]
  004ac	50		 push	 eax
  004ad	6a 02		 push	 2
  004af	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  004b4	83 c4 08	 add	 esp, 8
  004b7	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  004ba	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 228  : 		iChecksum += util_destring(3, text);

  004bd	8d 85 28 7f fe
	ff		 lea	 eax, DWORD PTR _text$109[ebp]
  004c3	50		 push	 eax
  004c4	6a 03		 push	 3
  004c6	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  004cb	83 c4 08	 add	 esp, 8
  004ce	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  004d1	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 229  : 		iChecksum += util_deint(4, &color);

  004d4	8d 85 1c 7f fe
	ff		 lea	 eax, DWORD PTR _color$108[ebp]
  004da	50		 push	 eax
  004db	6a 04		 push	 4
  004dd	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  004e2	83 c4 08	 add	 esp, 8
  004e5	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  004e8	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 230  : 		util_deint(5, &iChecksumrecv);

  004eb	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  004ee	50		 push	 eax
  004ef	6a 05		 push	 5
  004f1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  004f6	83 c4 08	 add	 esp, 8

; 231  : 		if (iChecksum!=iChecksumrecv) {

  004f9	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  004fc	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  004ff	74 11		 je	 SHORT $LN29@SaDispatch

; 232  : 			SliceCount=0;

  00501	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 233  : 			return 0;

  0050b	33 c0		 xor	 eax, eax
  0050d	e9 86 1d 00 00	 jmp	 $LN1@SaDispatch
$LN29@SaDispatch:

; 234  : 		}
; 235  : 		lssproto_MSG_recv(fd, aindex, text, color);

  00512	8b 85 1c 7f fe
	ff		 mov	 eax, DWORD PTR _color$108[ebp]
  00518	50		 push	 eax
  00519	8d 8d 28 7f fe
	ff		 lea	 ecx, DWORD PTR _text$109[ebp]
  0051f	51		 push	 ecx
  00520	8b 95 30 bf fe
	ff		 mov	 edx, DWORD PTR _aindex$110[ebp]
  00526	52		 push	 edx
  00527	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  0052a	50		 push	 eax
  0052b	e8 00 00 00 00	 call	 ?lssproto_MSG_recv@@YAXHHPADH@Z ; lssproto_MSG_recv
  00530	83 c4 10	 add	 esp, 16			; 00000010H

; 236  : #ifdef _NB_FUNRECV_DEBUG
; 237  : 		printf("\n接收[%d]fun:%s|aindex:%d|text:%s|color:%d",func,"LSSPROTO_MSG_RECV",aindex,text,color);
; 238  : #endif
; 239  : 		SliceCount=0;

  00533	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 240  : 		return func;

  0053d	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00540	e9 53 1d 00 00	 jmp	 $LN1@SaDispatch
  00545	e9 42 1d 00 00	 jmp	 $LN4@SaDispatch
$LN27@SaDispatch:

; 241  : 	}
; 242  : 	else if (func==LSSPROTO_PME_RECV)

  0054a	83 7d f4 1c	 cmp	 DWORD PTR _func$[ebp], 28 ; 0000001cH
  0054e	0f 85 3a 01 00
	00		 jne	 $LN30@SaDispatch

; 243  : 	{
; 244  : 		int objindex;
; 245  : 		int graphicsno;
; 246  : 		int x;
; 247  : 		int y;
; 248  : 		int dir;
; 249  : 		int flg;
; 250  : 		int no;
; 251  : 		char cdata[16384];
; 252  : 
; 253  : 		iChecksum += util_deint(2, &objindex);

  00554	8d 85 10 7f fe
	ff		 lea	 eax, DWORD PTR _objindex$107[ebp]
  0055a	50		 push	 eax
  0055b	6a 02		 push	 2
  0055d	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00562	83 c4 08	 add	 esp, 8
  00565	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00568	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 254  : 		iChecksum += util_deint(3, &graphicsno);

  0056b	8d 85 04 7f fe
	ff		 lea	 eax, DWORD PTR _graphicsno$106[ebp]
  00571	50		 push	 eax
  00572	6a 03		 push	 3
  00574	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00579	83 c4 08	 add	 esp, 8
  0057c	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0057f	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 255  : 		iChecksum += util_deint(4, &x);

  00582	8d 85 f8 7e fe
	ff		 lea	 eax, DWORD PTR _x$105[ebp]
  00588	50		 push	 eax
  00589	6a 04		 push	 4
  0058b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00590	83 c4 08	 add	 esp, 8
  00593	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00596	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 256  : 		iChecksum += util_deint(5, &y);

  00599	8d 85 ec 7e fe
	ff		 lea	 eax, DWORD PTR _y$104[ebp]
  0059f	50		 push	 eax
  005a0	6a 05		 push	 5
  005a2	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  005a7	83 c4 08	 add	 esp, 8
  005aa	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  005ad	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 257  : 		iChecksum += util_deint(6, &dir);

  005b0	8d 85 e0 7e fe
	ff		 lea	 eax, DWORD PTR _dir$103[ebp]
  005b6	50		 push	 eax
  005b7	6a 06		 push	 6
  005b9	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  005be	83 c4 08	 add	 esp, 8
  005c1	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  005c4	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 258  : 		iChecksum += util_deint(7, &flg);

  005c7	8d 85 d4 7e fe
	ff		 lea	 eax, DWORD PTR _flg$102[ebp]
  005cd	50		 push	 eax
  005ce	6a 07		 push	 7
  005d0	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  005d5	83 c4 08	 add	 esp, 8
  005d8	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  005db	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 259  : 		iChecksum += util_deint(8, &no);

  005de	8d 85 c8 7e fe
	ff		 lea	 eax, DWORD PTR _no$101[ebp]
  005e4	50		 push	 eax
  005e5	6a 08		 push	 8
  005e7	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  005ec	83 c4 08	 add	 esp, 8
  005ef	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  005f2	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 260  : 		iChecksum += util_destring(9, cdata);

  005f5	8d 85 c0 3e fe
	ff		 lea	 eax, DWORD PTR _cdata$100[ebp]
  005fb	50		 push	 eax
  005fc	6a 09		 push	 9
  005fe	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00603	83 c4 08	 add	 esp, 8
  00606	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00609	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 261  : 		util_deint(10, &iChecksumrecv);

  0060c	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0060f	50		 push	 eax
  00610	6a 0a		 push	 10			; 0000000aH
  00612	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00617	83 c4 08	 add	 esp, 8

; 262  : 		if (iChecksum!=iChecksumrecv) {

  0061a	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  0061d	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00620	74 11		 je	 SHORT $LN32@SaDispatch

; 263  : 			SliceCount=0;

  00622	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 264  : 			return 0;

  0062c	33 c0		 xor	 eax, eax
  0062e	e9 65 1c 00 00	 jmp	 $LN1@SaDispatch
$LN32@SaDispatch:

; 265  : 		}
; 266  : 		lssproto_PME_recv(fd, objindex, graphicsno, x, y, dir, flg, no, cdata);

  00633	8d 85 c0 3e fe
	ff		 lea	 eax, DWORD PTR _cdata$100[ebp]
  00639	50		 push	 eax
  0063a	8b 8d c8 7e fe
	ff		 mov	 ecx, DWORD PTR _no$101[ebp]
  00640	51		 push	 ecx
  00641	8b 95 d4 7e fe
	ff		 mov	 edx, DWORD PTR _flg$102[ebp]
  00647	52		 push	 edx
  00648	8b 85 e0 7e fe
	ff		 mov	 eax, DWORD PTR _dir$103[ebp]
  0064e	50		 push	 eax
  0064f	8b 8d ec 7e fe
	ff		 mov	 ecx, DWORD PTR _y$104[ebp]
  00655	51		 push	 ecx
  00656	8b 95 f8 7e fe
	ff		 mov	 edx, DWORD PTR _x$105[ebp]
  0065c	52		 push	 edx
  0065d	8b 85 04 7f fe
	ff		 mov	 eax, DWORD PTR _graphicsno$106[ebp]
  00663	50		 push	 eax
  00664	8b 8d 10 7f fe
	ff		 mov	 ecx, DWORD PTR _objindex$107[ebp]
  0066a	51		 push	 ecx
  0066b	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  0066e	52		 push	 edx
  0066f	e8 00 00 00 00	 call	 ?lssproto_PME_recv@@YAXHHHHHHHHPAD@Z ; lssproto_PME_recv
  00674	83 c4 24	 add	 esp, 36			; 00000024H

; 267  : #ifdef _NB_FUNRECV_DEBUG
; 268  : 		printf("\n接收[%d]fun:%s|objindex:%d|graphicsno:%d|x:%d|y:%d|dir:%d|flg:%d|no:%d|cdata:%s",func,"LSSPROTO_PME_RECV",objindex, graphicsno, x, y, dir, flg, no, cdata);
; 269  : #endif
; 270  : 		SliceCount=0;

  00677	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 271  : 		return func;

  00681	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00684	e9 0f 1c 00 00	 jmp	 $LN1@SaDispatch
  00689	e9 fe 1b 00 00	 jmp	 $LN4@SaDispatch
$LN30@SaDispatch:

; 272  : 	}
; 273  : 	else if (func==LSSPROTO_AB_RECV)

  0068e	83 7d f4 1e	 cmp	 DWORD PTR _func$[ebp], 30 ; 0000001eH
  00692	75 68		 jne	 SHORT $LN33@SaDispatch

; 274  : 	{
; 275  : 		char data[16384];
; 276  : 
; 277  : 		iChecksum += util_destring(2, data);

  00694	8d 85 b8 fe fd
	ff		 lea	 eax, DWORD PTR _data$99[ebp]
  0069a	50		 push	 eax
  0069b	6a 02		 push	 2
  0069d	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  006a2	83 c4 08	 add	 esp, 8
  006a5	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  006a8	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 278  : 		util_deint(3, &iChecksumrecv);

  006ab	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  006ae	50		 push	 eax
  006af	6a 03		 push	 3
  006b1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  006b6	83 c4 08	 add	 esp, 8

; 279  : 		if (iChecksum!=iChecksumrecv) {

  006b9	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  006bc	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  006bf	74 11		 je	 SHORT $LN35@SaDispatch

; 280  : 			SliceCount=0;

  006c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 281  : 			return 0;

  006cb	33 c0		 xor	 eax, eax
  006cd	e9 c6 1b 00 00	 jmp	 $LN1@SaDispatch
$LN35@SaDispatch:

; 282  : 		}
; 283  : 		lssproto_AB_recv(fd, data);

  006d2	8d 85 b8 fe fd
	ff		 lea	 eax, DWORD PTR _data$99[ebp]
  006d8	50		 push	 eax
  006d9	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  006dc	51		 push	 ecx
  006dd	e8 00 00 00 00	 call	 ?lssproto_AB_recv@@YAXHPAD@Z ; lssproto_AB_recv
  006e2	83 c4 08	 add	 esp, 8

; 284  : #ifdef _NB_FUNRECV_DEBUG
; 285  : 		printf("\n接收[%d]fun:%s|data:%s",func,"LSSPROTO_AB_RECV",data);
; 286  : #endif
; 287  : 		SliceCount=0;

  006e5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 288  : 		return func;

  006ef	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  006f2	e9 a1 1b 00 00	 jmp	 $LN1@SaDispatch
  006f7	e9 90 1b 00 00	 jmp	 $LN4@SaDispatch
$LN33@SaDispatch:

; 289  : 	}
; 290  : 	else if (func==LSSPROTO_ABI_RECV)

  006fc	83 7d f4 1f	 cmp	 DWORD PTR _func$[ebp], 31 ; 0000001fH
  00700	0f 85 86 00 00
	00		 jne	 $LN36@SaDispatch

; 291  : 	{
; 292  : 		int num;
; 293  : 		char data[16384];
; 294  : 
; 295  : 		iChecksum += util_deint(2, &num);

  00706	8d 85 ac fe fd
	ff		 lea	 eax, DWORD PTR _num$98[ebp]
  0070c	50		 push	 eax
  0070d	6a 02		 push	 2
  0070f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00714	83 c4 08	 add	 esp, 8
  00717	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0071a	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 296  : 		iChecksum += util_destring(3, data);

  0071d	8d 85 a4 be fd
	ff		 lea	 eax, DWORD PTR _data$97[ebp]
  00723	50		 push	 eax
  00724	6a 03		 push	 3
  00726	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0072b	83 c4 08	 add	 esp, 8
  0072e	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00731	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 297  : 		util_deint(4, &iChecksumrecv);

  00734	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00737	50		 push	 eax
  00738	6a 04		 push	 4
  0073a	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0073f	83 c4 08	 add	 esp, 8

; 298  : 		if (iChecksum!=iChecksumrecv) {

  00742	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00745	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00748	74 11		 je	 SHORT $LN38@SaDispatch

; 299  : 			SliceCount=0;

  0074a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 300  : 			return 0;

  00754	33 c0		 xor	 eax, eax
  00756	e9 3d 1b 00 00	 jmp	 $LN1@SaDispatch
$LN38@SaDispatch:

; 301  : 		}
; 302  : 		lssproto_ABI_recv(fd, num, data);

  0075b	8d 85 a4 be fd
	ff		 lea	 eax, DWORD PTR _data$97[ebp]
  00761	50		 push	 eax
  00762	8b 8d ac fe fd
	ff		 mov	 ecx, DWORD PTR _num$98[ebp]
  00768	51		 push	 ecx
  00769	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  0076c	52		 push	 edx
  0076d	e8 00 00 00 00	 call	 ?lssproto_ABI_recv@@YAXHHPAD@Z ; lssproto_ABI_recv
  00772	83 c4 0c	 add	 esp, 12			; 0000000cH

; 303  : #ifdef _NB_FUNRECV_DEBUG
; 304  : 		printf("\n接收[%d]fun:%s|num:%d|data:%s",func,"LSSPROTO_ABI_RECV",num,data);
; 305  : #endif
; 306  : 		SliceCount=0;

  00775	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 307  : 		return func;

  0077f	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00782	e9 11 1b 00 00	 jmp	 $LN1@SaDispatch
  00787	e9 00 1b 00 00	 jmp	 $LN4@SaDispatch
$LN36@SaDispatch:

; 308  : 	}
; 309  : 	else if (func==LSSPROTO_TK_RECV)

  0078c	83 7d f4 24	 cmp	 DWORD PTR _func$[ebp], 36 ; 00000024H
  00790	0f 85 a4 00 00
	00		 jne	 $LN39@SaDispatch

; 310  : 	{
; 311  : 		int index;
; 312  : 		char message[16384];
; 313  : 		int color;
; 314  : 
; 315  : 		iChecksum += util_deint(2, &index);

  00796	8d 85 98 be fd
	ff		 lea	 eax, DWORD PTR _index$96[ebp]
  0079c	50		 push	 eax
  0079d	6a 02		 push	 2
  0079f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  007a4	83 c4 08	 add	 esp, 8
  007a7	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  007aa	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 316  : 		iChecksum += util_destring(3, message);

  007ad	8d 85 90 7e fd
	ff		 lea	 eax, DWORD PTR _message$95[ebp]
  007b3	50		 push	 eax
  007b4	6a 03		 push	 3
  007b6	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  007bb	83 c4 08	 add	 esp, 8
  007be	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  007c1	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 317  : 		iChecksum += util_deint(4, &color);

  007c4	8d 85 84 7e fd
	ff		 lea	 eax, DWORD PTR _color$94[ebp]
  007ca	50		 push	 eax
  007cb	6a 04		 push	 4
  007cd	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  007d2	83 c4 08	 add	 esp, 8
  007d5	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  007d8	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 318  : 		util_deint(5, &iChecksumrecv);

  007db	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  007de	50		 push	 eax
  007df	6a 05		 push	 5
  007e1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  007e6	83 c4 08	 add	 esp, 8

; 319  : 		if (iChecksum!=iChecksumrecv) {

  007e9	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  007ec	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  007ef	74 11		 je	 SHORT $LN41@SaDispatch

; 320  : 			SliceCount=0;

  007f1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 321  : 			return 0;

  007fb	33 c0		 xor	 eax, eax
  007fd	e9 96 1a 00 00	 jmp	 $LN1@SaDispatch
$LN41@SaDispatch:

; 322  : 		}
; 323  : 		lssproto_TK_recv(fd, index, message, color);

  00802	8b 85 84 7e fd
	ff		 mov	 eax, DWORD PTR _color$94[ebp]
  00808	50		 push	 eax
  00809	8d 8d 90 7e fd
	ff		 lea	 ecx, DWORD PTR _message$95[ebp]
  0080f	51		 push	 ecx
  00810	8b 95 98 be fd
	ff		 mov	 edx, DWORD PTR _index$96[ebp]
  00816	52		 push	 edx
  00817	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  0081a	50		 push	 eax
  0081b	e8 00 00 00 00	 call	 ?lssproto_TK_recv@@YAXHHPADH@Z ; lssproto_TK_recv
  00820	83 c4 10	 add	 esp, 16			; 00000010H

; 324  : #ifdef _NB_FUNRECV_DEBUG
; 325  : 		printf("\n接收[%d]fun:%s|index:%d|message:%s|color:%d",func,"LSSPROTO_TK_RECV",index,message,color);
; 326  : #endif
; 327  : 		SliceCount=0;

  00823	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 328  : 		return func;

  0082d	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00830	e9 63 1a 00 00	 jmp	 $LN1@SaDispatch
  00835	e9 52 1a 00 00	 jmp	 $LN4@SaDispatch
$LN39@SaDispatch:

; 329  : 	}
; 330  : 	else if (func==LSSPROTO_MC_RECV)

  0083a	83 7d f4 25	 cmp	 DWORD PTR _func$[ebp], 37 ; 00000025H
  0083e	0f 85 76 01 00
	00		 jne	 $LN42@SaDispatch

; 331  : 	{
; 332  : 		int fl;
; 333  : 		int x1;
; 334  : 		int y1;
; 335  : 		int x2;
; 336  : 		int y2;
; 337  : 		int tilesum;
; 338  : 		int objsum;
; 339  : 		int eventsum;
; 340  : 		char data[16384];
; 341  : 
; 342  : 		iChecksum += util_deint(2, &fl);

  00844	8d 85 78 7e fd
	ff		 lea	 eax, DWORD PTR _fl$93[ebp]
  0084a	50		 push	 eax
  0084b	6a 02		 push	 2
  0084d	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00852	83 c4 08	 add	 esp, 8
  00855	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00858	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 343  : 		iChecksum += util_deint(3, &x1);

  0085b	8d 85 6c 7e fd
	ff		 lea	 eax, DWORD PTR _x1$92[ebp]
  00861	50		 push	 eax
  00862	6a 03		 push	 3
  00864	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00869	83 c4 08	 add	 esp, 8
  0086c	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0086f	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 344  : 		iChecksum += util_deint(4, &y1);

  00872	8d 85 60 7e fd
	ff		 lea	 eax, DWORD PTR _y1$91[ebp]
  00878	50		 push	 eax
  00879	6a 04		 push	 4
  0087b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00880	83 c4 08	 add	 esp, 8
  00883	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00886	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 345  : 		iChecksum += util_deint(5, &x2);

  00889	8d 85 54 7e fd
	ff		 lea	 eax, DWORD PTR _x2$90[ebp]
  0088f	50		 push	 eax
  00890	6a 05		 push	 5
  00892	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00897	83 c4 08	 add	 esp, 8
  0089a	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0089d	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 346  : 		iChecksum += util_deint(6, &y2);

  008a0	8d 85 48 7e fd
	ff		 lea	 eax, DWORD PTR _y2$89[ebp]
  008a6	50		 push	 eax
  008a7	6a 06		 push	 6
  008a9	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  008ae	83 c4 08	 add	 esp, 8
  008b1	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  008b4	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 347  : 		iChecksum += util_deint(7, &tilesum);

  008b7	8d 85 3c 7e fd
	ff		 lea	 eax, DWORD PTR _tilesum$88[ebp]
  008bd	50		 push	 eax
  008be	6a 07		 push	 7
  008c0	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  008c5	83 c4 08	 add	 esp, 8
  008c8	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  008cb	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 348  : 		iChecksum += util_deint(8, &objsum);

  008ce	8d 85 30 7e fd
	ff		 lea	 eax, DWORD PTR _objsum$87[ebp]
  008d4	50		 push	 eax
  008d5	6a 08		 push	 8
  008d7	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  008dc	83 c4 08	 add	 esp, 8
  008df	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  008e2	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 349  : 		iChecksum += util_deint(9, &eventsum);

  008e5	8d 85 24 7e fd
	ff		 lea	 eax, DWORD PTR _eventsum$86[ebp]
  008eb	50		 push	 eax
  008ec	6a 09		 push	 9
  008ee	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  008f3	83 c4 08	 add	 esp, 8
  008f6	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  008f9	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 350  : 		iChecksum += util_destring(10, data);

  008fc	8d 85 1c 3e fd
	ff		 lea	 eax, DWORD PTR _data$85[ebp]
  00902	50		 push	 eax
  00903	6a 0a		 push	 10			; 0000000aH
  00905	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0090a	83 c4 08	 add	 esp, 8
  0090d	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00910	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 351  : 		util_deint(11, &iChecksumrecv);

  00913	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00916	50		 push	 eax
  00917	6a 0b		 push	 11			; 0000000bH
  00919	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0091e	83 c4 08	 add	 esp, 8

; 352  : 		if (iChecksum!=iChecksumrecv) {

  00921	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00924	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00927	74 11		 je	 SHORT $LN44@SaDispatch

; 353  : 			SliceCount=0;

  00929	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 354  : 			return 0;

  00933	33 c0		 xor	 eax, eax
  00935	e9 5e 19 00 00	 jmp	 $LN1@SaDispatch
$LN44@SaDispatch:

; 355  : 		}
; 356  : #ifdef __SKYISLAND
; 357  : 		extern void SkyIslandSetNo( int fl);
; 358  : 		SkyIslandSetNo( fl);

  0093a	8b 85 78 7e fd
	ff		 mov	 eax, DWORD PTR _fl$93[ebp]
  00940	50		 push	 eax
  00941	e8 00 00 00 00	 call	 ?SkyIslandSetNo@@YAXH@Z	; SkyIslandSetNo
  00946	83 c4 04	 add	 esp, 4

; 359  : #endif
; 360  : 		
; 361  : 		LogToRecvdata(data);

  00949	8d 85 1c 3e fd
	ff		 lea	 eax, DWORD PTR _data$85[ebp]
  0094f	50		 push	 eax
  00950	e8 00 00 00 00	 call	 ?LogToRecvdata@@YAXPAD@Z ; LogToRecvdata
  00955	83 c4 04	 add	 esp, 4

; 362  : 
; 363  : 		lssproto_MC_recv(fd, fl, x1, y1, x2, y2, tilesum, objsum, eventsum, data);

  00958	8d 85 1c 3e fd
	ff		 lea	 eax, DWORD PTR _data$85[ebp]
  0095e	50		 push	 eax
  0095f	8b 8d 24 7e fd
	ff		 mov	 ecx, DWORD PTR _eventsum$86[ebp]
  00965	51		 push	 ecx
  00966	8b 95 30 7e fd
	ff		 mov	 edx, DWORD PTR _objsum$87[ebp]
  0096c	52		 push	 edx
  0096d	8b 85 3c 7e fd
	ff		 mov	 eax, DWORD PTR _tilesum$88[ebp]
  00973	50		 push	 eax
  00974	8b 8d 48 7e fd
	ff		 mov	 ecx, DWORD PTR _y2$89[ebp]
  0097a	51		 push	 ecx
  0097b	8b 95 54 7e fd
	ff		 mov	 edx, DWORD PTR _x2$90[ebp]
  00981	52		 push	 edx
  00982	8b 85 60 7e fd
	ff		 mov	 eax, DWORD PTR _y1$91[ebp]
  00988	50		 push	 eax
  00989	8b 8d 6c 7e fd
	ff		 mov	 ecx, DWORD PTR _x1$92[ebp]
  0098f	51		 push	 ecx
  00990	8b 95 78 7e fd
	ff		 mov	 edx, DWORD PTR _fl$93[ebp]
  00996	52		 push	 edx
  00997	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  0099a	50		 push	 eax
  0099b	e8 00 00 00 00	 call	 ?lssproto_MC_recv@@YAXHHHHHHHHHPAD@Z ; lssproto_MC_recv
  009a0	83 c4 28	 add	 esp, 40			; 00000028H

; 364  : #ifdef _NB_FUNRECV_DEBUG
; 365  : 		printf("\n接收[%d]fun:%s|fl:%d|x1:%d|y1:%d|x2:%d|y2:%d|tilesum:%d|objsum:%d|eventsum:%d|data:%s",func,"LSSPROTO_MC_RECV",fl, x1, y1, x2, y2, tilesum, objsum, eventsum, data);
; 366  : #endif
; 367  : 		SliceCount=0;

  009a3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 368  : 		return func;

  009ad	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  009b0	e9 e3 18 00 00	 jmp	 $LN1@SaDispatch
  009b5	e9 d2 18 00 00	 jmp	 $LN4@SaDispatch
$LN42@SaDispatch:

; 369  : 	}
; 370  : 	else if (func==LSSPROTO_M_RECV)

  009ba	83 7d f4 27	 cmp	 DWORD PTR _func$[ebp], 39 ; 00000027H
  009be	0f 85 0d 01 00
	00		 jne	 $LN45@SaDispatch

; 371  : 	{
; 372  : 		int fl;
; 373  : 		int x1;
; 374  : 		int y1;
; 375  : 		int x2;
; 376  : 		int y2;
; 377  : 		char data[16384];
; 378  : 
; 379  : 		iChecksum += util_deint(2, &fl);

  009c4	8d 85 10 3e fd
	ff		 lea	 eax, DWORD PTR _fl$84[ebp]
  009ca	50		 push	 eax
  009cb	6a 02		 push	 2
  009cd	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  009d2	83 c4 08	 add	 esp, 8
  009d5	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  009d8	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 380  : 		iChecksum += util_deint(3, &x1);

  009db	8d 85 04 3e fd
	ff		 lea	 eax, DWORD PTR _x1$83[ebp]
  009e1	50		 push	 eax
  009e2	6a 03		 push	 3
  009e4	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  009e9	83 c4 08	 add	 esp, 8
  009ec	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  009ef	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 381  : 		iChecksum += util_deint(4, &y1);

  009f2	8d 85 f8 3d fd
	ff		 lea	 eax, DWORD PTR _y1$82[ebp]
  009f8	50		 push	 eax
  009f9	6a 04		 push	 4
  009fb	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a00	83 c4 08	 add	 esp, 8
  00a03	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00a06	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 382  : 		iChecksum += util_deint(5, &x2);

  00a09	8d 85 ec 3d fd
	ff		 lea	 eax, DWORD PTR _x2$81[ebp]
  00a0f	50		 push	 eax
  00a10	6a 05		 push	 5
  00a12	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a17	83 c4 08	 add	 esp, 8
  00a1a	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00a1d	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 383  : 		iChecksum += util_deint(6, &y2);

  00a20	8d 85 e0 3d fd
	ff		 lea	 eax, DWORD PTR _y2$80[ebp]
  00a26	50		 push	 eax
  00a27	6a 06		 push	 6
  00a29	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a2e	83 c4 08	 add	 esp, 8
  00a31	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00a34	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 384  : 		iChecksum += util_destring(7, data);

  00a37	8d 85 d8 fd fc
	ff		 lea	 eax, DWORD PTR _data$79[ebp]
  00a3d	50		 push	 eax
  00a3e	6a 07		 push	 7
  00a40	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00a45	83 c4 08	 add	 esp, 8
  00a48	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00a4b	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 385  : 		util_deint(8, &iChecksumrecv);

  00a4e	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00a51	50		 push	 eax
  00a52	6a 08		 push	 8
  00a54	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00a59	83 c4 08	 add	 esp, 8

; 386  : 		if (iChecksum!=iChecksumrecv) {

  00a5c	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00a5f	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00a62	74 11		 je	 SHORT $LN47@SaDispatch

; 387  : 			SliceCount=0;

  00a64	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 388  : 			return 0;

  00a6e	33 c0		 xor	 eax, eax
  00a70	e9 23 18 00 00	 jmp	 $LN1@SaDispatch
$LN47@SaDispatch:

; 389  : 		}
; 390  : 
; 391  : 		LogToRecvdata(data);

  00a75	8d 85 d8 fd fc
	ff		 lea	 eax, DWORD PTR _data$79[ebp]
  00a7b	50		 push	 eax
  00a7c	e8 00 00 00 00	 call	 ?LogToRecvdata@@YAXPAD@Z ; LogToRecvdata
  00a81	83 c4 04	 add	 esp, 4

; 392  : 
; 393  : 		lssproto_M_recv(fd, fl, x1, y1, x2, y2, data);

  00a84	8d 85 d8 fd fc
	ff		 lea	 eax, DWORD PTR _data$79[ebp]
  00a8a	50		 push	 eax
  00a8b	8b 8d e0 3d fd
	ff		 mov	 ecx, DWORD PTR _y2$80[ebp]
  00a91	51		 push	 ecx
  00a92	8b 95 ec 3d fd
	ff		 mov	 edx, DWORD PTR _x2$81[ebp]
  00a98	52		 push	 edx
  00a99	8b 85 f8 3d fd
	ff		 mov	 eax, DWORD PTR _y1$82[ebp]
  00a9f	50		 push	 eax
  00aa0	8b 8d 04 3e fd
	ff		 mov	 ecx, DWORD PTR _x1$83[ebp]
  00aa6	51		 push	 ecx
  00aa7	8b 95 10 3e fd
	ff		 mov	 edx, DWORD PTR _fl$84[ebp]
  00aad	52		 push	 edx
  00aae	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  00ab1	50		 push	 eax
  00ab2	e8 00 00 00 00	 call	 ?lssproto_M_recv@@YAXHHHHHHPAD@Z ; lssproto_M_recv
  00ab7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 394  : #ifdef _NB_FUNRECV_DEBUG
; 395  : 		printf("\n接收[%d]fun:%s|fl:%d|x1:%d|y1:%d|x2:%d|y2:%d|data:%s",func,"LSSPROTO_M_RECV",fl, x1, y1, x2, y2, data);
; 396  : #endif
; 397  : 		SliceCount=0;

  00aba	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 398  : 		return func;

  00ac4	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00ac7	e9 cc 17 00 00	 jmp	 $LN1@SaDispatch
  00acc	e9 bb 17 00 00	 jmp	 $LN4@SaDispatch
$LN45@SaDispatch:

; 399  : 	}
; 400  : 	else if (func==LSSPROTO_C_RECV)

  00ad1	83 7d f4 29	 cmp	 DWORD PTR _func$[ebp], 41 ; 00000029H
  00ad5	75 68		 jne	 SHORT $LN48@SaDispatch

; 401  : 	{
; 402  : 		char data[16384];
; 403  : 
; 404  : 		iChecksum += util_destring(2, data);

  00ad7	8d 85 d0 bd fc
	ff		 lea	 eax, DWORD PTR _data$78[ebp]
  00add	50		 push	 eax
  00ade	6a 02		 push	 2
  00ae0	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00ae5	83 c4 08	 add	 esp, 8
  00ae8	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00aeb	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 405  : 		util_deint(3, &iChecksumrecv);

  00aee	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00af1	50		 push	 eax
  00af2	6a 03		 push	 3
  00af4	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00af9	83 c4 08	 add	 esp, 8

; 406  : 		if (iChecksum!=iChecksumrecv) {

  00afc	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00aff	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00b02	74 11		 je	 SHORT $LN50@SaDispatch

; 407  : 			SliceCount=0;

  00b04	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 408  : 			return 0;

  00b0e	33 c0		 xor	 eax, eax
  00b10	e9 83 17 00 00	 jmp	 $LN1@SaDispatch
$LN50@SaDispatch:

; 409  : 		}
; 410  : 		lssproto_C_recv(fd, data);

  00b15	8d 85 d0 bd fc
	ff		 lea	 eax, DWORD PTR _data$78[ebp]
  00b1b	50		 push	 eax
  00b1c	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00b1f	51		 push	 ecx
  00b20	e8 00 00 00 00	 call	 ?lssproto_C_recv@@YAXHPAD@Z ; lssproto_C_recv
  00b25	83 c4 08	 add	 esp, 8

; 411  : #ifdef _NB_FUNRECV_DEBUG
; 412  : 		printf("\n接收[%d]fun:%s|data:%s",func,"LSSPROTO_C_RECV",data);
; 413  : #endif
; 414  : 		SliceCount=0;

  00b28	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 415  : 		return func;

  00b32	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00b35	e9 5e 17 00 00	 jmp	 $LN1@SaDispatch
  00b3a	e9 4d 17 00 00	 jmp	 $LN4@SaDispatch
$LN48@SaDispatch:

; 416  : 	}
; 417  : 	else if (func==LSSPROTO_CA_RECV)

  00b3f	83 7d f4 2a	 cmp	 DWORD PTR _func$[ebp], 42 ; 0000002aH
  00b43	75 68		 jne	 SHORT $LN51@SaDispatch

; 418  : 	{
; 419  : 		char data[16384];
; 420  : 
; 421  : 		iChecksum += util_destring(2, data);

  00b45	8d 85 c8 7d fc
	ff		 lea	 eax, DWORD PTR _data$77[ebp]
  00b4b	50		 push	 eax
  00b4c	6a 02		 push	 2
  00b4e	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00b53	83 c4 08	 add	 esp, 8
  00b56	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00b59	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 422  : 		util_deint(3, &iChecksumrecv);

  00b5c	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00b5f	50		 push	 eax
  00b60	6a 03		 push	 3
  00b62	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00b67	83 c4 08	 add	 esp, 8

; 423  : 		if (iChecksum!=iChecksumrecv) {

  00b6a	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00b6d	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00b70	74 11		 je	 SHORT $LN53@SaDispatch

; 424  : 			SliceCount=0;

  00b72	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 425  : 			return 0;

  00b7c	33 c0		 xor	 eax, eax
  00b7e	e9 15 17 00 00	 jmp	 $LN1@SaDispatch
$LN53@SaDispatch:

; 426  : 		}
; 427  : 		lssproto_CA_recv(fd, data);

  00b83	8d 85 c8 7d fc
	ff		 lea	 eax, DWORD PTR _data$77[ebp]
  00b89	50		 push	 eax
  00b8a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00b8d	51		 push	 ecx
  00b8e	e8 00 00 00 00	 call	 ?lssproto_CA_recv@@YAXHPAD@Z ; lssproto_CA_recv
  00b93	83 c4 08	 add	 esp, 8

; 428  : #ifdef _NB_FUNRECV_DEBUG
; 429  : 		printf("\n接收[%d]fun:%s|data:%s",func,"LSSPROTO_CA_RECV",data);
; 430  : #endif
; 431  : 		SliceCount=0;

  00b96	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 432  : 		return func;

  00ba0	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00ba3	e9 f0 16 00 00	 jmp	 $LN1@SaDispatch
  00ba8	e9 df 16 00 00	 jmp	 $LN4@SaDispatch
$LN51@SaDispatch:

; 433  : 	}
; 434  : 	else if (func==LSSPROTO_CD_RECV)

  00bad	83 7d f4 2b	 cmp	 DWORD PTR _func$[ebp], 43 ; 0000002bH
  00bb1	75 68		 jne	 SHORT $LN54@SaDispatch

; 435  : 	{
; 436  : 		char data[16384];
; 437  : 
; 438  : 		iChecksum += util_destring(2, data);

  00bb3	8d 85 c0 3d fc
	ff		 lea	 eax, DWORD PTR _data$76[ebp]
  00bb9	50		 push	 eax
  00bba	6a 02		 push	 2
  00bbc	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00bc1	83 c4 08	 add	 esp, 8
  00bc4	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00bc7	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 439  : 		util_deint(3, &iChecksumrecv);

  00bca	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00bcd	50		 push	 eax
  00bce	6a 03		 push	 3
  00bd0	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00bd5	83 c4 08	 add	 esp, 8

; 440  : 		if (iChecksum!=iChecksumrecv) {

  00bd8	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00bdb	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00bde	74 11		 je	 SHORT $LN56@SaDispatch

; 441  : 			SliceCount=0;

  00be0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 442  : 			return 0;

  00bea	33 c0		 xor	 eax, eax
  00bec	e9 a7 16 00 00	 jmp	 $LN1@SaDispatch
$LN56@SaDispatch:

; 443  : 		}
; 444  : 		lssproto_CD_recv(fd, data);

  00bf1	8d 85 c0 3d fc
	ff		 lea	 eax, DWORD PTR _data$76[ebp]
  00bf7	50		 push	 eax
  00bf8	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00bfb	51		 push	 ecx
  00bfc	e8 00 00 00 00	 call	 ?lssproto_CD_recv@@YAXHPAD@Z ; lssproto_CD_recv
  00c01	83 c4 08	 add	 esp, 8

; 445  : #ifdef _NB_FUNRECV_DEBUG
; 446  : 		printf("\n接收[%d]fun:%s|data:%s",func,"lssproto_CD_recv",data);
; 447  : #endif
; 448  : 		SliceCount=0;

  00c04	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 449  : 		return func;

  00c0e	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00c11	e9 82 16 00 00	 jmp	 $LN1@SaDispatch
  00c16	e9 71 16 00 00	 jmp	 $LN4@SaDispatch
$LN54@SaDispatch:

; 450  : 	}
; 451  : 	else if (func==LSSPROTO_R_RECV)

  00c1b	83 7d f4 2c	 cmp	 DWORD PTR _func$[ebp], 44 ; 0000002cH
  00c1f	75 68		 jne	 SHORT $LN57@SaDispatch

; 452  : 	{
; 453  : 		char data[16384];
; 454  : 
; 455  : 		iChecksum += util_destring(2, data);

  00c21	8d 85 b8 fd fb
	ff		 lea	 eax, DWORD PTR _data$75[ebp]
  00c27	50		 push	 eax
  00c28	6a 02		 push	 2
  00c2a	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00c2f	83 c4 08	 add	 esp, 8
  00c32	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00c35	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 456  : 		util_deint(3, &iChecksumrecv);

  00c38	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00c3b	50		 push	 eax
  00c3c	6a 03		 push	 3
  00c3e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00c43	83 c4 08	 add	 esp, 8

; 457  : 		if (iChecksum!=iChecksumrecv) {

  00c46	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00c49	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00c4c	74 11		 je	 SHORT $LN59@SaDispatch

; 458  : 			SliceCount=0;

  00c4e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 459  : 			return 0;

  00c58	33 c0		 xor	 eax, eax
  00c5a	e9 39 16 00 00	 jmp	 $LN1@SaDispatch
$LN59@SaDispatch:

; 460  : 		}
; 461  : 		lssproto_R_recv(fd, data);

  00c5f	8d 85 b8 fd fb
	ff		 lea	 eax, DWORD PTR _data$75[ebp]
  00c65	50		 push	 eax
  00c66	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00c69	51		 push	 ecx
  00c6a	e8 00 00 00 00	 call	 ?lssproto_R_recv@@YAXHPAD@Z ; lssproto_R_recv
  00c6f	83 c4 08	 add	 esp, 8

; 462  : #ifdef _NB_FUNRECV_DEBUG
; 463  : 		printf("\n接收[%d]fun:%s|data:%s",func,"LSSPROTO_R_RECV",data);
; 464  : #endif
; 465  : 		SliceCount=0;

  00c72	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 466  : 		return func;

  00c7c	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00c7f	e9 14 16 00 00	 jmp	 $LN1@SaDispatch
  00c84	e9 03 16 00 00	 jmp	 $LN4@SaDispatch
$LN57@SaDispatch:

; 467  : 	}
; 468  : 	else if (func==LSSPROTO_S_RECV)

  00c89	83 7d f4 2e	 cmp	 DWORD PTR _func$[ebp], 46 ; 0000002eH
  00c8d	75 77		 jne	 SHORT $LN60@SaDispatch

; 469  : 	{
; 470  : 		char data[16384];
; 471  : 
; 472  : 		iChecksum += util_destring(2, data);

  00c8f	8d 85 b0 bd fb
	ff		 lea	 eax, DWORD PTR _data$74[ebp]
  00c95	50		 push	 eax
  00c96	6a 02		 push	 2
  00c98	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00c9d	83 c4 08	 add	 esp, 8
  00ca0	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00ca3	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 473  : 		util_deint(3, &iChecksumrecv);

  00ca6	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00ca9	50		 push	 eax
  00caa	6a 03		 push	 3
  00cac	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00cb1	83 c4 08	 add	 esp, 8

; 474  : 		if (iChecksum!=iChecksumrecv) {

  00cb4	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00cb7	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00cba	74 11		 je	 SHORT $LN62@SaDispatch

; 475  : 			SliceCount=0;

  00cbc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 476  : 			return 0;

  00cc6	33 c0		 xor	 eax, eax
  00cc8	e9 cb 15 00 00	 jmp	 $LN1@SaDispatch
$LN62@SaDispatch:

; 477  : 		}
; 478  : 
; 479  : 		LogToRecvdata(data);

  00ccd	8d 85 b0 bd fb
	ff		 lea	 eax, DWORD PTR _data$74[ebp]
  00cd3	50		 push	 eax
  00cd4	e8 00 00 00 00	 call	 ?LogToRecvdata@@YAXPAD@Z ; LogToRecvdata
  00cd9	83 c4 04	 add	 esp, 4

; 480  : 
; 481  : 		lssproto_S_recv(fd, data);

  00cdc	8d 85 b0 bd fb
	ff		 lea	 eax, DWORD PTR _data$74[ebp]
  00ce2	50		 push	 eax
  00ce3	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00ce6	51		 push	 ecx
  00ce7	e8 00 00 00 00	 call	 ?lssproto_S_recv@@YAXHPAD@Z ; lssproto_S_recv
  00cec	83 c4 08	 add	 esp, 8

; 482  : #ifdef _NB_FUNRECV_DEBUG
; 483  : 		printf("\n接收[%d]fun:%s|data:%s",func,"LSSPROTO_S_RECV",data);
; 484  : #endif
; 485  : 		SliceCount=0;

  00cef	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 486  : 		return func;

  00cf9	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00cfc	e9 97 15 00 00	 jmp	 $LN1@SaDispatch
  00d01	e9 86 15 00 00	 jmp	 $LN4@SaDispatch
$LN60@SaDispatch:

; 487  : 	}
; 488  : 	else if (func==LSSPROTO_D_RECV)

  00d06	83 7d f4 2f	 cmp	 DWORD PTR _func$[ebp], 47 ; 0000002fH
  00d0a	0f 85 c2 00 00
	00		 jne	 $LN63@SaDispatch

; 489  : 	{
; 490  : 		int category;
; 491  : 		int dx;
; 492  : 		int dy;
; 493  : 		char data[16384];
; 494  : 
; 495  : 		iChecksum += util_deint(2, &category);

  00d10	8d 85 a4 bd fb
	ff		 lea	 eax, DWORD PTR _category$73[ebp]
  00d16	50		 push	 eax
  00d17	6a 02		 push	 2
  00d19	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d1e	83 c4 08	 add	 esp, 8
  00d21	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00d24	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 496  : 		iChecksum += util_deint(3, &dx);

  00d27	8d 85 98 bd fb
	ff		 lea	 eax, DWORD PTR _dx$72[ebp]
  00d2d	50		 push	 eax
  00d2e	6a 03		 push	 3
  00d30	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d35	83 c4 08	 add	 esp, 8
  00d38	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00d3b	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 497  : 		iChecksum += util_deint(4, &dy);

  00d3e	8d 85 8c bd fb
	ff		 lea	 eax, DWORD PTR _dy$71[ebp]
  00d44	50		 push	 eax
  00d45	6a 04		 push	 4
  00d47	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d4c	83 c4 08	 add	 esp, 8
  00d4f	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00d52	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 498  : 		iChecksum += util_destring(5, data);

  00d55	8d 85 84 7d fb
	ff		 lea	 eax, DWORD PTR _data$70[ebp]
  00d5b	50		 push	 eax
  00d5c	6a 05		 push	 5
  00d5e	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  00d63	83 c4 08	 add	 esp, 8
  00d66	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00d69	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 499  : 		util_deint(6, &iChecksumrecv);

  00d6c	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00d6f	50		 push	 eax
  00d70	6a 06		 push	 6
  00d72	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00d77	83 c4 08	 add	 esp, 8

; 500  : 		if (iChecksum!=iChecksumrecv) {

  00d7a	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00d7d	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00d80	74 11		 je	 SHORT $LN65@SaDispatch

; 501  : 			SliceCount=0;

  00d82	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 502  : 			return 0;

  00d8c	33 c0		 xor	 eax, eax
  00d8e	e9 05 15 00 00	 jmp	 $LN1@SaDispatch
$LN65@SaDispatch:

; 503  : 		}
; 504  : 		lssproto_D_recv(fd, category, dx, dy, data);

  00d93	8d 85 84 7d fb
	ff		 lea	 eax, DWORD PTR _data$70[ebp]
  00d99	50		 push	 eax
  00d9a	8b 8d 8c bd fb
	ff		 mov	 ecx, DWORD PTR _dy$71[ebp]
  00da0	51		 push	 ecx
  00da1	8b 95 98 bd fb
	ff		 mov	 edx, DWORD PTR _dx$72[ebp]
  00da7	52		 push	 edx
  00da8	8b 85 a4 bd fb
	ff		 mov	 eax, DWORD PTR _category$73[ebp]
  00dae	50		 push	 eax
  00daf	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00db2	51		 push	 ecx
  00db3	e8 00 00 00 00	 call	 ?lssproto_D_recv@@YAXHHHHPAD@Z ; lssproto_D_recv
  00db8	83 c4 14	 add	 esp, 20			; 00000014H

; 505  : #ifdef _NB_FUNRECV_DEBUG
; 506  : 		printf("\n接收[%d]fun:%s|category:%d|dx:%d|dy:%d|data:%s",func,"LSSPROTO_D_RECV", category, dx, dy, data);
; 507  : #endif
; 508  : 		SliceCount=0;

  00dbb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 509  : 		return func;

  00dc5	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00dc8	e9 cb 14 00 00	 jmp	 $LN1@SaDispatch
  00dcd	e9 ba 14 00 00	 jmp	 $LN4@SaDispatch
$LN63@SaDispatch:

; 510  : 	}
; 511  : 	else if (func==LSSPROTO_FS_RECV)

  00dd2	83 7d f4 31	 cmp	 DWORD PTR _func$[ebp], 49 ; 00000031H
  00dd6	75 68		 jne	 SHORT $LN66@SaDispatch

; 512  : 	{
; 513  : 		int flg;
; 514  : 
; 515  : 		iChecksum += util_deint(2, &flg);

  00dd8	8d 85 78 7d fb
	ff		 lea	 eax, DWORD PTR _flg$69[ebp]
  00dde	50		 push	 eax
  00ddf	6a 02		 push	 2
  00de1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00de6	83 c4 08	 add	 esp, 8
  00de9	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00dec	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 516  : 		util_deint(3, &iChecksumrecv);

  00def	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00df2	50		 push	 eax
  00df3	6a 03		 push	 3
  00df5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00dfa	83 c4 08	 add	 esp, 8

; 517  : 		if (iChecksum!=iChecksumrecv) {

  00dfd	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00e00	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00e03	74 11		 je	 SHORT $LN68@SaDispatch

; 518  : 			SliceCount=0;

  00e05	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 519  : 			return 0;

  00e0f	33 c0		 xor	 eax, eax
  00e11	e9 82 14 00 00	 jmp	 $LN1@SaDispatch
$LN68@SaDispatch:

; 520  : 		}
; 521  : 		lssproto_FS_recv(fd, flg);

  00e16	8b 85 78 7d fb
	ff		 mov	 eax, DWORD PTR _flg$69[ebp]
  00e1c	50		 push	 eax
  00e1d	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00e20	51		 push	 ecx
  00e21	e8 00 00 00 00	 call	 ?lssproto_FS_recv@@YAXHH@Z ; lssproto_FS_recv
  00e26	83 c4 08	 add	 esp, 8

; 522  : #ifdef _NB_FUNRECV_DEBUG
; 523  : 		printf("\n接收[%d]fun:%s|flg:%d",func,"LSSPROTO_FS_RECV", flg);
; 524  : #endif
; 525  : 		SliceCount=0;

  00e29	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 526  : 		return func;

  00e33	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00e36	e9 5d 14 00 00	 jmp	 $LN1@SaDispatch
  00e3b	e9 4c 14 00 00	 jmp	 $LN4@SaDispatch
$LN66@SaDispatch:

; 527  : 	}
; 528  : 	else if (func==LSSPROTO_HL_RECV)

  00e40	83 7d f4 33	 cmp	 DWORD PTR _func$[ebp], 51 ; 00000033H
  00e44	75 68		 jne	 SHORT $LN69@SaDispatch

; 529  : 	{
; 530  : 		int flg;
; 531  : 
; 532  : 		iChecksum += util_deint(2, &flg);

  00e46	8d 85 6c 7d fb
	ff		 lea	 eax, DWORD PTR _flg$68[ebp]
  00e4c	50		 push	 eax
  00e4d	6a 02		 push	 2
  00e4f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00e54	83 c4 08	 add	 esp, 8
  00e57	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00e5a	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 533  : 		util_deint(3, &iChecksumrecv);

  00e5d	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00e60	50		 push	 eax
  00e61	6a 03		 push	 3
  00e63	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00e68	83 c4 08	 add	 esp, 8

; 534  : 		if (iChecksum!=iChecksumrecv) {

  00e6b	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00e6e	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00e71	74 11		 je	 SHORT $LN71@SaDispatch

; 535  : 			SliceCount=0;

  00e73	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 536  : 			return 0;

  00e7d	33 c0		 xor	 eax, eax
  00e7f	e9 14 14 00 00	 jmp	 $LN1@SaDispatch
$LN71@SaDispatch:

; 537  : 		}
; 538  : 		lssproto_HL_recv(fd, flg);

  00e84	8b 85 6c 7d fb
	ff		 mov	 eax, DWORD PTR _flg$68[ebp]
  00e8a	50		 push	 eax
  00e8b	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  00e8e	51		 push	 ecx
  00e8f	e8 00 00 00 00	 call	 ?lssproto_HL_recv@@YAXHH@Z ; lssproto_HL_recv
  00e94	83 c4 08	 add	 esp, 8

; 539  : #ifdef _NB_FUNRECV_DEBUG
; 540  : 		printf("\n接收[%d]fun:%s|flg:%d",func,"LSSPROTO_HL_RECV", flg);
; 541  : #endif
; 542  : 		SliceCount=0;

  00e97	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 543  : 		return func;

  00ea1	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00ea4	e9 ef 13 00 00	 jmp	 $LN1@SaDispatch
  00ea9	e9 de 13 00 00	 jmp	 $LN4@SaDispatch
$LN69@SaDispatch:

; 544  : 	}
; 545  : 	else if (func==LSSPROTO_PR_RECV)

  00eae	83 7d f4 35	 cmp	 DWORD PTR _func$[ebp], 53 ; 00000035H
  00eb2	0f 85 86 00 00
	00		 jne	 $LN72@SaDispatch

; 546  : 	{
; 547  : 		int request;
; 548  : 		int result;
; 549  : 
; 550  : 		iChecksum += util_deint(2, &request);

  00eb8	8d 85 60 7d fb
	ff		 lea	 eax, DWORD PTR _request$67[ebp]
  00ebe	50		 push	 eax
  00ebf	6a 02		 push	 2
  00ec1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00ec6	83 c4 08	 add	 esp, 8
  00ec9	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00ecc	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 551  : 		iChecksum += util_deint(3, &result);

  00ecf	8d 85 54 7d fb
	ff		 lea	 eax, DWORD PTR _result$66[ebp]
  00ed5	50		 push	 eax
  00ed6	6a 03		 push	 3
  00ed8	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00edd	83 c4 08	 add	 esp, 8
  00ee0	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00ee3	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 552  : 		util_deint(4, &iChecksumrecv);

  00ee6	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00ee9	50		 push	 eax
  00eea	6a 04		 push	 4
  00eec	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00ef1	83 c4 08	 add	 esp, 8

; 553  : 		if (iChecksum!=iChecksumrecv) {

  00ef4	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00ef7	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00efa	74 11		 je	 SHORT $LN74@SaDispatch

; 554  : 			SliceCount=0;

  00efc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 555  : 			return 0;

  00f06	33 c0		 xor	 eax, eax
  00f08	e9 8b 13 00 00	 jmp	 $LN1@SaDispatch
$LN74@SaDispatch:

; 556  : 		}
; 557  : 		lssproto_PR_recv(fd, request, result);

  00f0d	8b 85 54 7d fb
	ff		 mov	 eax, DWORD PTR _result$66[ebp]
  00f13	50		 push	 eax
  00f14	8b 8d 60 7d fb
	ff		 mov	 ecx, DWORD PTR _request$67[ebp]
  00f1a	51		 push	 ecx
  00f1b	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  00f1e	52		 push	 edx
  00f1f	e8 00 00 00 00	 call	 ?lssproto_PR_recv@@YAXHHH@Z ; lssproto_PR_recv
  00f24	83 c4 0c	 add	 esp, 12			; 0000000cH

; 558  : #ifdef _NB_FUNRECV_DEBUG
; 559  : 		printf("\n接收[%d]fun:%s|request:%d|result:%d",func,"LSSPROTO_PR_RECV", request,result);
; 560  : #endif
; 561  : 		SliceCount=0;

  00f27	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 562  : 		return func;

  00f31	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00f34	e9 5f 13 00 00	 jmp	 $LN1@SaDispatch
  00f39	e9 4e 13 00 00	 jmp	 $LN4@SaDispatch
$LN72@SaDispatch:

; 563  : 	}
; 564  : 	else if (func==LSSPROTO_KS_RECV)

  00f3e	83 7d f4 37	 cmp	 DWORD PTR _func$[ebp], 55 ; 00000037H
  00f42	0f 85 86 00 00
	00		 jne	 $LN75@SaDispatch

; 565  : 	{
; 566  : 		int petarray;
; 567  : 		int result;
; 568  : 
; 569  : 		iChecksum += util_deint(2, &petarray);

  00f48	8d 85 48 7d fb
	ff		 lea	 eax, DWORD PTR _petarray$65[ebp]
  00f4e	50		 push	 eax
  00f4f	6a 02		 push	 2
  00f51	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00f56	83 c4 08	 add	 esp, 8
  00f59	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00f5c	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 570  : 		iChecksum += util_deint(3, &result);

  00f5f	8d 85 3c 7d fb
	ff		 lea	 eax, DWORD PTR _result$64[ebp]
  00f65	50		 push	 eax
  00f66	6a 03		 push	 3
  00f68	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00f6d	83 c4 08	 add	 esp, 8
  00f70	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00f73	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 571  : 		util_deint(4, &iChecksumrecv);

  00f76	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00f79	50		 push	 eax
  00f7a	6a 04		 push	 4
  00f7c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00f81	83 c4 08	 add	 esp, 8

; 572  : 		if (iChecksum!=iChecksumrecv) {

  00f84	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  00f87	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  00f8a	74 11		 je	 SHORT $LN77@SaDispatch

; 573  : 			SliceCount=0;

  00f8c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 574  : 			return 0;

  00f96	33 c0		 xor	 eax, eax
  00f98	e9 fb 12 00 00	 jmp	 $LN1@SaDispatch
$LN77@SaDispatch:

; 575  : 		}
; 576  : 		lssproto_KS_recv(fd, petarray, result);

  00f9d	8b 85 3c 7d fb
	ff		 mov	 eax, DWORD PTR _result$64[ebp]
  00fa3	50		 push	 eax
  00fa4	8b 8d 48 7d fb
	ff		 mov	 ecx, DWORD PTR _petarray$65[ebp]
  00faa	51		 push	 ecx
  00fab	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  00fae	52		 push	 edx
  00faf	e8 00 00 00 00	 call	 ?lssproto_KS_recv@@YAXHHH@Z ; lssproto_KS_recv
  00fb4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 577  : 		SliceCount=0;

  00fb7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 578  : 		return func;

  00fc1	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  00fc4	e9 cf 12 00 00	 jmp	 $LN1@SaDispatch
  00fc9	e9 be 12 00 00	 jmp	 $LN4@SaDispatch
$LN75@SaDispatch:

; 579  : 	}
; 580  : #ifdef _STANDBYPET
; 581  : 	else if (func==LSSPROTO_SPET_RECV)

  00fce	83 7d f4 73	 cmp	 DWORD PTR _func$[ebp], 115 ; 00000073H
  00fd2	0f 85 86 00 00
	00		 jne	 $LN78@SaDispatch

; 582  : 	{
; 583  : 		int standbypet;
; 584  : 		int result;
; 585  : 
; 586  : 		iChecksum += util_deint(2, &standbypet);

  00fd8	8d 85 30 7d fb
	ff		 lea	 eax, DWORD PTR _standbypet$63[ebp]
  00fde	50		 push	 eax
  00fdf	6a 02		 push	 2
  00fe1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00fe6	83 c4 08	 add	 esp, 8
  00fe9	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  00fec	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 587  : 		iChecksum += util_deint(3, &result);

  00fef	8d 85 24 7d fb
	ff		 lea	 eax, DWORD PTR _result$62[ebp]
  00ff5	50		 push	 eax
  00ff6	6a 03		 push	 3
  00ff8	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  00ffd	83 c4 08	 add	 esp, 8
  01000	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01003	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 588  : 		util_deint(4, &iChecksumrecv);

  01006	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01009	50		 push	 eax
  0100a	6a 04		 push	 4
  0100c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01011	83 c4 08	 add	 esp, 8

; 589  : 		if (iChecksum!=iChecksumrecv) {

  01014	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01017	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0101a	74 11		 je	 SHORT $LN80@SaDispatch

; 590  : 			SliceCount=0;

  0101c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 591  : 			return 0;

  01026	33 c0		 xor	 eax, eax
  01028	e9 6b 12 00 00	 jmp	 $LN1@SaDispatch
$LN80@SaDispatch:

; 592  : 		}
; 593  : 		lssproto_SPET_recv(fd, standbypet, result);

  0102d	8b 85 24 7d fb
	ff		 mov	 eax, DWORD PTR _result$62[ebp]
  01033	50		 push	 eax
  01034	8b 8d 30 7d fb
	ff		 mov	 ecx, DWORD PTR _standbypet$63[ebp]
  0103a	51		 push	 ecx
  0103b	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  0103e	52		 push	 edx
  0103f	e8 00 00 00 00	 call	 ?lssproto_SPET_recv@@YAXHHH@Z ; lssproto_SPET_recv
  01044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 594  : 		SliceCount=0;

  01047	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 595  : 		return func;

  01051	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01054	e9 3f 12 00 00	 jmp	 $LN1@SaDispatch
  01059	e9 2e 12 00 00	 jmp	 $LN4@SaDispatch
$LN78@SaDispatch:

; 596  : 	}
; 597  : #endif
; 598  : 
; 599  : #ifdef _PETS_SELECTCON
; 600  : 	else if (func==LSSPROTO_PETST_RECV)

  0105e	83 7d f4 6b	 cmp	 DWORD PTR _func$[ebp], 107 ; 0000006bH
  01062	0f 85 86 00 00
	00		 jne	 $LN81@SaDispatch

; 601  : 	{
; 602  : 		int petarray;
; 603  : 		int result;
; 604  : 
; 605  : 		iChecksum += util_deint(2, &petarray);

  01068	8d 85 18 7d fb
	ff		 lea	 eax, DWORD PTR _petarray$61[ebp]
  0106e	50		 push	 eax
  0106f	6a 02		 push	 2
  01071	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01076	83 c4 08	 add	 esp, 8
  01079	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0107c	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 606  : 		iChecksum += util_deint(3, &result);

  0107f	8d 85 0c 7d fb
	ff		 lea	 eax, DWORD PTR _result$60[ebp]
  01085	50		 push	 eax
  01086	6a 03		 push	 3
  01088	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0108d	83 c4 08	 add	 esp, 8
  01090	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01093	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 607  : 		util_deint(4, &iChecksumrecv);

  01096	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01099	50		 push	 eax
  0109a	6a 04		 push	 4
  0109c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  010a1	83 c4 08	 add	 esp, 8

; 608  : 		if (iChecksum!=iChecksumrecv) {

  010a4	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  010a7	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  010aa	74 11		 je	 SHORT $LN83@SaDispatch

; 609  : 			SliceCount=0;

  010ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 610  : 			return 0;

  010b6	33 c0		 xor	 eax, eax
  010b8	e9 db 11 00 00	 jmp	 $LN1@SaDispatch
$LN83@SaDispatch:

; 611  : 		}
; 612  : 		lssproto_PETST_recv(fd, petarray, result);

  010bd	8b 85 0c 7d fb
	ff		 mov	 eax, DWORD PTR _result$60[ebp]
  010c3	50		 push	 eax
  010c4	8b 8d 18 7d fb
	ff		 mov	 ecx, DWORD PTR _petarray$61[ebp]
  010ca	51		 push	 ecx
  010cb	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  010ce	52		 push	 edx
  010cf	e8 00 00 00 00	 call	 ?lssproto_PETST_recv@@YAXHHH@Z ; lssproto_PETST_recv
  010d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 613  : 		SliceCount=0;

  010d7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 614  : 		return func;

  010e1	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  010e4	e9 af 11 00 00	 jmp	 $LN1@SaDispatch
  010e9	e9 9e 11 00 00	 jmp	 $LN4@SaDispatch
$LN81@SaDispatch:

; 615  : 	}
; 616  : #endif
; 617  : 	else if (func==LSSPROTO_PS_RECV)

  010ee	83 7d f4 3b	 cmp	 DWORD PTR _func$[ebp], 59 ; 0000003bH
  010f2	0f 85 c2 00 00
	00		 jne	 $LN84@SaDispatch

; 618  : 	{
; 619  : 		int result;
; 620  : 		int havepetindex;
; 621  : 		int havepetskill;
; 622  : 		int toindex;
; 623  : 
; 624  : 		iChecksum += util_deint(2, &result);

  010f8	8d 85 00 7d fb
	ff		 lea	 eax, DWORD PTR _result$59[ebp]
  010fe	50		 push	 eax
  010ff	6a 02		 push	 2
  01101	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01106	83 c4 08	 add	 esp, 8
  01109	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0110c	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 625  : 		iChecksum += util_deint(3, &havepetindex);

  0110f	8d 85 f4 7c fb
	ff		 lea	 eax, DWORD PTR _havepetindex$58[ebp]
  01115	50		 push	 eax
  01116	6a 03		 push	 3
  01118	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0111d	83 c4 08	 add	 esp, 8
  01120	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01123	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 626  : 		iChecksum += util_deint(4, &havepetskill);

  01126	8d 85 e8 7c fb
	ff		 lea	 eax, DWORD PTR _havepetskill$57[ebp]
  0112c	50		 push	 eax
  0112d	6a 04		 push	 4
  0112f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01134	83 c4 08	 add	 esp, 8
  01137	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0113a	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 627  : 		iChecksum += util_deint(5, &toindex);

  0113d	8d 85 dc 7c fb
	ff		 lea	 eax, DWORD PTR _toindex$56[ebp]
  01143	50		 push	 eax
  01144	6a 05		 push	 5
  01146	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0114b	83 c4 08	 add	 esp, 8
  0114e	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01151	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 628  : 		util_deint(6, &iChecksumrecv);

  01154	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01157	50		 push	 eax
  01158	6a 06		 push	 6
  0115a	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0115f	83 c4 08	 add	 esp, 8

; 629  : 		if (iChecksum!=iChecksumrecv) {

  01162	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01165	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01168	74 11		 je	 SHORT $LN86@SaDispatch

; 630  : 			SliceCount=0;

  0116a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 631  : 			return 0;

  01174	33 c0		 xor	 eax, eax
  01176	e9 1d 11 00 00	 jmp	 $LN1@SaDispatch
$LN86@SaDispatch:

; 632  : 		}
; 633  : 		lssproto_PS_recv(fd, result, havepetindex, havepetskill, toindex);

  0117b	8b 85 dc 7c fb
	ff		 mov	 eax, DWORD PTR _toindex$56[ebp]
  01181	50		 push	 eax
  01182	8b 8d e8 7c fb
	ff		 mov	 ecx, DWORD PTR _havepetskill$57[ebp]
  01188	51		 push	 ecx
  01189	8b 95 f4 7c fb
	ff		 mov	 edx, DWORD PTR _havepetindex$58[ebp]
  0118f	52		 push	 edx
  01190	8b 85 00 7d fb
	ff		 mov	 eax, DWORD PTR _result$59[ebp]
  01196	50		 push	 eax
  01197	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0119a	51		 push	 ecx
  0119b	e8 00 00 00 00	 call	 ?lssproto_PS_recv@@YAXHHHHH@Z ; lssproto_PS_recv
  011a0	83 c4 14	 add	 esp, 20			; 00000014H

; 634  : 		SliceCount=0;

  011a3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 635  : 		return func;

  011ad	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  011b0	e9 e3 10 00 00	 jmp	 $LN1@SaDispatch
  011b5	e9 d2 10 00 00	 jmp	 $LN4@SaDispatch
$LN84@SaDispatch:

; 636  : 	}
; 637  : 	else if (func==LSSPROTO_SKUP_RECV)

  011ba	83 7d f4 3f	 cmp	 DWORD PTR _func$[ebp], 63 ; 0000003fH
  011be	75 68		 jne	 SHORT $LN87@SaDispatch

; 638  : 	{
; 639  : 		int point;
; 640  : 
; 641  : 		iChecksum += util_deint(2, &point);

  011c0	8d 85 d0 7c fb
	ff		 lea	 eax, DWORD PTR _point$55[ebp]
  011c6	50		 push	 eax
  011c7	6a 02		 push	 2
  011c9	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  011ce	83 c4 08	 add	 esp, 8
  011d1	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  011d4	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 642  : 		util_deint(3, &iChecksumrecv);

  011d7	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  011da	50		 push	 eax
  011db	6a 03		 push	 3
  011dd	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  011e2	83 c4 08	 add	 esp, 8

; 643  : 		if (iChecksum!=iChecksumrecv) {

  011e5	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  011e8	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  011eb	74 11		 je	 SHORT $LN89@SaDispatch

; 644  : 			SliceCount=0;

  011ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 645  : 			return 0;

  011f7	33 c0		 xor	 eax, eax
  011f9	e9 9a 10 00 00	 jmp	 $LN1@SaDispatch
$LN89@SaDispatch:

; 646  : 		}
; 647  : 		lssproto_SKUP_recv(fd, point);

  011fe	8b 85 d0 7c fb
	ff		 mov	 eax, DWORD PTR _point$55[ebp]
  01204	50		 push	 eax
  01205	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01208	51		 push	 ecx
  01209	e8 00 00 00 00	 call	 ?lssproto_SKUP_recv@@YAXHH@Z ; lssproto_SKUP_recv
  0120e	83 c4 08	 add	 esp, 8

; 648  : 		SliceCount=0;

  01211	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 649  : 		return func;

  0121b	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  0121e	e9 75 10 00 00	 jmp	 $LN1@SaDispatch
  01223	e9 64 10 00 00	 jmp	 $LN4@SaDispatch
$LN87@SaDispatch:

; 650  : 	}
; 651  : 	else if (func==LSSPROTO_WN_RECV)

  01228	83 7d f4 42	 cmp	 DWORD PTR _func$[ebp], 66 ; 00000042H
  0122c	0f 85 e0 00 00
	00		 jne	 $LN90@SaDispatch

; 652  : 	{
; 653  : 		int windowtype;
; 654  : 		int buttontype;
; 655  : 		int seqno;
; 656  : 		int objindex;
; 657  : 		char data[16384];
; 658  : 
; 659  : 		iChecksum += util_deint(2, &windowtype);

  01232	8d 85 c4 7c fb
	ff		 lea	 eax, DWORD PTR _windowtype$54[ebp]
  01238	50		 push	 eax
  01239	6a 02		 push	 2
  0123b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01240	83 c4 08	 add	 esp, 8
  01243	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01246	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 660  : 		iChecksum += util_deint(3, &buttontype);

  01249	8d 85 b8 7c fb
	ff		 lea	 eax, DWORD PTR _buttontype$53[ebp]
  0124f	50		 push	 eax
  01250	6a 03		 push	 3
  01252	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01257	83 c4 08	 add	 esp, 8
  0125a	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0125d	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 661  : 		iChecksum += util_deint(4, &seqno);

  01260	8d 85 ac 7c fb
	ff		 lea	 eax, DWORD PTR _seqno$52[ebp]
  01266	50		 push	 eax
  01267	6a 04		 push	 4
  01269	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0126e	83 c4 08	 add	 esp, 8
  01271	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01274	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 662  : 		iChecksum += util_deint(5, &objindex);

  01277	8d 85 a0 7c fb
	ff		 lea	 eax, DWORD PTR _objindex$51[ebp]
  0127d	50		 push	 eax
  0127e	6a 05		 push	 5
  01280	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01285	83 c4 08	 add	 esp, 8
  01288	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0128b	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 663  : 		iChecksum += util_destring(6, data);

  0128e	8d 85 98 3c fb
	ff		 lea	 eax, DWORD PTR _data$50[ebp]
  01294	50		 push	 eax
  01295	6a 06		 push	 6
  01297	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  0129c	83 c4 08	 add	 esp, 8
  0129f	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  012a2	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 664  : 		util_deint(7, &iChecksumrecv);

  012a5	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  012a8	50		 push	 eax
  012a9	6a 07		 push	 7
  012ab	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  012b0	83 c4 08	 add	 esp, 8

; 665  : 		if (iChecksum!=iChecksumrecv) {

  012b3	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  012b6	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  012b9	74 11		 je	 SHORT $LN92@SaDispatch

; 666  : 			SliceCount=0;

  012bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 667  : 			return 0;

  012c5	33 c0		 xor	 eax, eax
  012c7	e9 cc 0f 00 00	 jmp	 $LN1@SaDispatch
$LN92@SaDispatch:

; 668  : 		}
; 669  : 		lssproto_WN_recv(fd, windowtype, buttontype, seqno, objindex, data);

  012cc	8d 85 98 3c fb
	ff		 lea	 eax, DWORD PTR _data$50[ebp]
  012d2	50		 push	 eax
  012d3	8b 8d a0 7c fb
	ff		 mov	 ecx, DWORD PTR _objindex$51[ebp]
  012d9	51		 push	 ecx
  012da	8b 95 ac 7c fb
	ff		 mov	 edx, DWORD PTR _seqno$52[ebp]
  012e0	52		 push	 edx
  012e1	8b 85 b8 7c fb
	ff		 mov	 eax, DWORD PTR _buttontype$53[ebp]
  012e7	50		 push	 eax
  012e8	8b 8d c4 7c fb
	ff		 mov	 ecx, DWORD PTR _windowtype$54[ebp]
  012ee	51		 push	 ecx
  012ef	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  012f2	52		 push	 edx
  012f3	e8 00 00 00 00	 call	 ?lssproto_WN_recv@@YAXHHHHHPAD@Z ; lssproto_WN_recv
  012f8	83 c4 18	 add	 esp, 24			; 00000018H

; 670  : 		SliceCount=0;

  012fb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 671  : 		return func;

  01305	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01308	e9 8b 0f 00 00	 jmp	 $LN1@SaDispatch
  0130d	e9 7a 0f 00 00	 jmp	 $LN4@SaDispatch
$LN90@SaDispatch:

; 672  : 	}
; 673  : 	else if (func==LSSPROTO_EF_RECV)

  01312	83 7d f4 44	 cmp	 DWORD PTR _func$[ebp], 68 ; 00000044H
  01316	0f 85 a4 00 00
	00		 jne	 $LN93@SaDispatch

; 674  : 	{
; 675  : 		int effect;
; 676  : 		int level;
; 677  : 		char option[16384];
; 678  : 
; 679  : 		iChecksum += util_deint(2, &effect);

  0131c	8d 85 8c 3c fb
	ff		 lea	 eax, DWORD PTR _effect$49[ebp]
  01322	50		 push	 eax
  01323	6a 02		 push	 2
  01325	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0132a	83 c4 08	 add	 esp, 8
  0132d	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01330	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 680  : 		iChecksum += util_deint(3, &level);

  01333	8d 85 80 3c fb
	ff		 lea	 eax, DWORD PTR _level$48[ebp]
  01339	50		 push	 eax
  0133a	6a 03		 push	 3
  0133c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01341	83 c4 08	 add	 esp, 8
  01344	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01347	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 681  : 		iChecksum += util_destring(4, option);

  0134a	8d 85 78 fc fa
	ff		 lea	 eax, DWORD PTR _option$47[ebp]
  01350	50		 push	 eax
  01351	6a 04		 push	 4
  01353	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01358	83 c4 08	 add	 esp, 8
  0135b	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0135e	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 682  : 		util_deint(5, &iChecksumrecv);

  01361	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01364	50		 push	 eax
  01365	6a 05		 push	 5
  01367	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0136c	83 c4 08	 add	 esp, 8

; 683  : 		if (iChecksum!=iChecksumrecv) {

  0136f	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01372	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01375	74 11		 je	 SHORT $LN95@SaDispatch

; 684  : 			SliceCount=0;

  01377	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 685  : 			return 0;

  01381	33 c0		 xor	 eax, eax
  01383	e9 10 0f 00 00	 jmp	 $LN1@SaDispatch
$LN95@SaDispatch:

; 686  : 		}
; 687  : 		lssproto_EF_recv(fd, effect, level, option);

  01388	8d 85 78 fc fa
	ff		 lea	 eax, DWORD PTR _option$47[ebp]
  0138e	50		 push	 eax
  0138f	8b 8d 80 3c fb
	ff		 mov	 ecx, DWORD PTR _level$48[ebp]
  01395	51		 push	 ecx
  01396	8b 95 8c 3c fb
	ff		 mov	 edx, DWORD PTR _effect$49[ebp]
  0139c	52		 push	 edx
  0139d	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  013a0	50		 push	 eax
  013a1	e8 00 00 00 00	 call	 ?lssproto_EF_recv@@YAXHHHPAD@Z ; lssproto_EF_recv
  013a6	83 c4 10	 add	 esp, 16			; 00000010H

; 688  : 		SliceCount=0;

  013a9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 689  : 		return func;

  013b3	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  013b6	e9 dd 0e 00 00	 jmp	 $LN1@SaDispatch
  013bb	e9 cc 0e 00 00	 jmp	 $LN4@SaDispatch
$LN93@SaDispatch:

; 690  : 	}
; 691  : 	else if (func==LSSPROTO_SE_RECV)

  013c0	83 7d f4 45	 cmp	 DWORD PTR _func$[ebp], 69 ; 00000045H
  013c4	0f 85 c2 00 00
	00		 jne	 $LN96@SaDispatch

; 692  : 	{
; 693  : 		int x;
; 694  : 		int y;
; 695  : 		int senumber;
; 696  : 		int sw;
; 697  : 
; 698  : 		iChecksum += util_deint(2, &x);

  013ca	8d 85 6c fc fa
	ff		 lea	 eax, DWORD PTR _x$46[ebp]
  013d0	50		 push	 eax
  013d1	6a 02		 push	 2
  013d3	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  013d8	83 c4 08	 add	 esp, 8
  013db	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  013de	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 699  : 		iChecksum += util_deint(3, &y);

  013e1	8d 85 60 fc fa
	ff		 lea	 eax, DWORD PTR _y$45[ebp]
  013e7	50		 push	 eax
  013e8	6a 03		 push	 3
  013ea	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  013ef	83 c4 08	 add	 esp, 8
  013f2	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  013f5	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 700  : 		iChecksum += util_deint(4, &senumber);

  013f8	8d 85 54 fc fa
	ff		 lea	 eax, DWORD PTR _senumber$44[ebp]
  013fe	50		 push	 eax
  013ff	6a 04		 push	 4
  01401	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01406	83 c4 08	 add	 esp, 8
  01409	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0140c	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 701  : 		iChecksum += util_deint(5, &sw);

  0140f	8d 85 48 fc fa
	ff		 lea	 eax, DWORD PTR _sw$43[ebp]
  01415	50		 push	 eax
  01416	6a 05		 push	 5
  01418	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0141d	83 c4 08	 add	 esp, 8
  01420	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01423	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 702  : 		util_deint(6, &iChecksumrecv);

  01426	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01429	50		 push	 eax
  0142a	6a 06		 push	 6
  0142c	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01431	83 c4 08	 add	 esp, 8

; 703  : 		if (iChecksum!=iChecksumrecv) {

  01434	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01437	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  0143a	74 11		 je	 SHORT $LN98@SaDispatch

; 704  : 			SliceCount=0;

  0143c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 705  : 			return 0;

  01446	33 c0		 xor	 eax, eax
  01448	e9 4b 0e 00 00	 jmp	 $LN1@SaDispatch
$LN98@SaDispatch:

; 706  : 		}
; 707  : 		lssproto_SE_recv(fd, x, y, senumber, sw);

  0144d	8b 85 48 fc fa
	ff		 mov	 eax, DWORD PTR _sw$43[ebp]
  01453	50		 push	 eax
  01454	8b 8d 54 fc fa
	ff		 mov	 ecx, DWORD PTR _senumber$44[ebp]
  0145a	51		 push	 ecx
  0145b	8b 95 60 fc fa
	ff		 mov	 edx, DWORD PTR _y$45[ebp]
  01461	52		 push	 edx
  01462	8b 85 6c fc fa
	ff		 mov	 eax, DWORD PTR _x$46[ebp]
  01468	50		 push	 eax
  01469	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  0146c	51		 push	 ecx
  0146d	e8 00 00 00 00	 call	 ?lssproto_SE_recv@@YAXHHHHH@Z ; lssproto_SE_recv
  01472	83 c4 14	 add	 esp, 20			; 00000014H

; 708  : 		SliceCount=0;

  01475	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 709  : 		return func;

  0147f	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01482	e9 11 0e 00 00	 jmp	 $LN1@SaDispatch
  01487	e9 00 0e 00 00	 jmp	 $LN4@SaDispatch
$LN96@SaDispatch:

; 710  : 	}
; 711  : 	else if (func==LSSPROTO_CLIENTLOGIN_RECV)

  0148c	83 7d f4 48	 cmp	 DWORD PTR _func$[ebp], 72 ; 00000048H
  01490	75 68		 jne	 SHORT $LN99@SaDispatch

; 712  : 	{
; 713  : 		char result[16384];
; 714  : 
; 715  : 		iChecksum += util_destring(2, result);

  01492	8d 85 40 bc fa
	ff		 lea	 eax, DWORD PTR _result$42[ebp]
  01498	50		 push	 eax
  01499	6a 02		 push	 2
  0149b	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  014a0	83 c4 08	 add	 esp, 8
  014a3	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  014a6	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 716  : 		util_deint(3, &iChecksumrecv);

  014a9	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  014ac	50		 push	 eax
  014ad	6a 03		 push	 3
  014af	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  014b4	83 c4 08	 add	 esp, 8

; 717  : 		if (iChecksum!=iChecksumrecv) {

  014b7	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  014ba	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  014bd	74 11		 je	 SHORT $LN101@SaDispatch

; 718  : 			SliceCount=0;

  014bf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 719  : 			return 0;

  014c9	33 c0		 xor	 eax, eax
  014cb	e9 c8 0d 00 00	 jmp	 $LN1@SaDispatch
$LN101@SaDispatch:

; 720  : 		}
; 721  : 		lssproto_ClientLogin_recv(fd, result);

  014d0	8d 85 40 bc fa
	ff		 lea	 eax, DWORD PTR _result$42[ebp]
  014d6	50		 push	 eax
  014d7	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  014da	51		 push	 ecx
  014db	e8 00 00 00 00	 call	 ?lssproto_ClientLogin_recv@@YAXHPAD@Z ; lssproto_ClientLogin_recv
  014e0	83 c4 08	 add	 esp, 8

; 722  : 		SliceCount=0;

  014e3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 723  : 		return func;

  014ed	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  014f0	e9 a3 0d 00 00	 jmp	 $LN1@SaDispatch
  014f5	e9 92 0d 00 00	 jmp	 $LN4@SaDispatch
$LN99@SaDispatch:

; 724  : 	}
; 725  : 	else if (func==LSSPROTO_CREATENEWCHAR_RECV) 

  014fa	83 7d f4 4a	 cmp	 DWORD PTR _func$[ebp], 74 ; 0000004aH
  014fe	0f 85 86 00 00
	00		 jne	 $LN102@SaDispatch

; 726  : 	{
; 727  : 		char result[16384];
; 728  : 		char data[16384];
; 729  : 
; 730  : 		iChecksum += util_destring(2, result);

  01504	8d 85 38 7c fa
	ff		 lea	 eax, DWORD PTR _result$41[ebp]
  0150a	50		 push	 eax
  0150b	6a 02		 push	 2
  0150d	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01512	83 c4 08	 add	 esp, 8
  01515	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01518	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 731  : 		iChecksum += util_destring(3, data);

  0151b	8d 85 30 3c fa
	ff		 lea	 eax, DWORD PTR _data$40[ebp]
  01521	50		 push	 eax
  01522	6a 03		 push	 3
  01524	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01529	83 c4 08	 add	 esp, 8
  0152c	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0152f	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 732  : 		util_deint(4, &iChecksumrecv);

  01532	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01535	50		 push	 eax
  01536	6a 04		 push	 4
  01538	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0153d	83 c4 08	 add	 esp, 8

; 733  : 		if (iChecksum!=iChecksumrecv) {

  01540	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01543	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01546	74 11		 je	 SHORT $LN104@SaDispatch

; 734  : 			SliceCount=0;

  01548	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 735  : 			return 0;

  01552	33 c0		 xor	 eax, eax
  01554	e9 3f 0d 00 00	 jmp	 $LN1@SaDispatch
$LN104@SaDispatch:

; 736  : 		}
; 737  : 		lssproto_CreateNewChar_recv(fd, result, data);

  01559	8d 85 30 3c fa
	ff		 lea	 eax, DWORD PTR _data$40[ebp]
  0155f	50		 push	 eax
  01560	8d 8d 38 7c fa
	ff		 lea	 ecx, DWORD PTR _result$41[ebp]
  01566	51		 push	 ecx
  01567	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  0156a	52		 push	 edx
  0156b	e8 00 00 00 00	 call	 ?lssproto_CreateNewChar_recv@@YAXHPAD0@Z ; lssproto_CreateNewChar_recv
  01570	83 c4 0c	 add	 esp, 12			; 0000000cH

; 738  : 		SliceCount=0;

  01573	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 739  : 		return func;

  0157d	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01580	e9 13 0d 00 00	 jmp	 $LN1@SaDispatch
  01585	e9 02 0d 00 00	 jmp	 $LN4@SaDispatch
$LN102@SaDispatch:

; 740  : 	}
; 741  : 	else if (func==LSSPROTO_CHARDELETE_RECV) 

  0158a	83 7d f4 4c	 cmp	 DWORD PTR _func$[ebp], 76 ; 0000004cH
  0158e	0f 85 86 00 00
	00		 jne	 $LN105@SaDispatch

; 742  : 	{
; 743  : 		char result[16384];
; 744  : 		char data[16384];
; 745  : 
; 746  : 		iChecksum += util_destring(2, result);

  01594	8d 85 28 fc f9
	ff		 lea	 eax, DWORD PTR _result$39[ebp]
  0159a	50		 push	 eax
  0159b	6a 02		 push	 2
  0159d	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  015a2	83 c4 08	 add	 esp, 8
  015a5	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  015a8	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 747  : 		iChecksum += util_destring(3, data);

  015ab	8d 85 20 bc f9
	ff		 lea	 eax, DWORD PTR _data$38[ebp]
  015b1	50		 push	 eax
  015b2	6a 03		 push	 3
  015b4	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  015b9	83 c4 08	 add	 esp, 8
  015bc	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  015bf	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 748  : 		util_deint(4, &iChecksumrecv);

  015c2	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  015c5	50		 push	 eax
  015c6	6a 04		 push	 4
  015c8	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  015cd	83 c4 08	 add	 esp, 8

; 749  : 		if (iChecksum!=iChecksumrecv) {

  015d0	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  015d3	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  015d6	74 11		 je	 SHORT $LN107@SaDispatch

; 750  : 			SliceCount=0;

  015d8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 751  : 			return 0;

  015e2	33 c0		 xor	 eax, eax
  015e4	e9 af 0c 00 00	 jmp	 $LN1@SaDispatch
$LN107@SaDispatch:

; 752  : 		}
; 753  : 		lssproto_CharDelete_recv(fd, result, data);

  015e9	8d 85 20 bc f9
	ff		 lea	 eax, DWORD PTR _data$38[ebp]
  015ef	50		 push	 eax
  015f0	8d 8d 28 fc f9
	ff		 lea	 ecx, DWORD PTR _result$39[ebp]
  015f6	51		 push	 ecx
  015f7	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  015fa	52		 push	 edx
  015fb	e8 00 00 00 00	 call	 ?lssproto_CharDelete_recv@@YAXHPAD0@Z ; lssproto_CharDelete_recv
  01600	83 c4 0c	 add	 esp, 12			; 0000000cH

; 754  : 		SliceCount=0;

  01603	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 755  : 		return func;

  0160d	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01610	e9 83 0c 00 00	 jmp	 $LN1@SaDispatch
  01615	e9 72 0c 00 00	 jmp	 $LN4@SaDispatch
$LN105@SaDispatch:

; 756  : 	}
; 757  : 	else if (func==LSSPROTO_CHARLOGIN_RECV) 

  0161a	83 7d f4 4e	 cmp	 DWORD PTR _func$[ebp], 78 ; 0000004eH
  0161e	0f 85 86 00 00
	00		 jne	 $LN108@SaDispatch

; 758  : 	{
; 759  : 		char result[16384];
; 760  : 		char data[16384];
; 761  : 
; 762  : 		iChecksum += util_destring(2, result);

  01624	8d 85 18 7c f9
	ff		 lea	 eax, DWORD PTR _result$37[ebp]
  0162a	50		 push	 eax
  0162b	6a 02		 push	 2
  0162d	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01632	83 c4 08	 add	 esp, 8
  01635	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01638	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 763  : 		iChecksum += util_destring(3, data);

  0163b	8d 85 10 3c f9
	ff		 lea	 eax, DWORD PTR _data$36[ebp]
  01641	50		 push	 eax
  01642	6a 03		 push	 3
  01644	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01649	83 c4 08	 add	 esp, 8
  0164c	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0164f	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 764  : 		util_deint(4, &iChecksumrecv);

  01652	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01655	50		 push	 eax
  01656	6a 04		 push	 4
  01658	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0165d	83 c4 08	 add	 esp, 8

; 765  : 		if (iChecksum!=iChecksumrecv) {

  01660	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01663	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01666	74 11		 je	 SHORT $LN110@SaDispatch

; 766  : 			SliceCount=0;

  01668	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 767  : 			return 0;

  01672	33 c0		 xor	 eax, eax
  01674	e9 1f 0c 00 00	 jmp	 $LN1@SaDispatch
$LN110@SaDispatch:

; 768  : 		}
; 769  : 		lssproto_CharLogin_recv(fd, result, data);

  01679	8d 85 10 3c f9
	ff		 lea	 eax, DWORD PTR _data$36[ebp]
  0167f	50		 push	 eax
  01680	8d 8d 18 7c f9
	ff		 lea	 ecx, DWORD PTR _result$37[ebp]
  01686	51		 push	 ecx
  01687	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  0168a	52		 push	 edx
  0168b	e8 00 00 00 00	 call	 ?lssproto_CharLogin_recv@@YAXHPAD0@Z ; lssproto_CharLogin_recv
  01690	83 c4 0c	 add	 esp, 12			; 0000000cH

; 770  : 		SliceCount=0;

  01693	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 771  : 		return func;

  0169d	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  016a0	e9 f3 0b 00 00	 jmp	 $LN1@SaDispatch
  016a5	e9 e2 0b 00 00	 jmp	 $LN4@SaDispatch
$LN108@SaDispatch:

; 772  : 	}
; 773  : 	else if (func==LSSPROTO_CHARLIST_RECV) 

  016aa	83 7d f4 50	 cmp	 DWORD PTR _func$[ebp], 80 ; 00000050H
  016ae	0f 85 86 00 00
	00		 jne	 $LN111@SaDispatch

; 774  : 	{
; 775  : 		char result[16384];
; 776  : 		char data[16384];
; 777  : 
; 778  : 		iChecksum += util_destring(2, result);

  016b4	8d 85 08 fc f8
	ff		 lea	 eax, DWORD PTR _result$35[ebp]
  016ba	50		 push	 eax
  016bb	6a 02		 push	 2
  016bd	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  016c2	83 c4 08	 add	 esp, 8
  016c5	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  016c8	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 779  : 		iChecksum += util_destring(3, data);

  016cb	8d 85 00 bc f8
	ff		 lea	 eax, DWORD PTR _data$34[ebp]
  016d1	50		 push	 eax
  016d2	6a 03		 push	 3
  016d4	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  016d9	83 c4 08	 add	 esp, 8
  016dc	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  016df	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 780  : 		util_deint(4, &iChecksumrecv);

  016e2	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  016e5	50		 push	 eax
  016e6	6a 04		 push	 4
  016e8	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  016ed	83 c4 08	 add	 esp, 8

; 781  : 		if (iChecksum!=iChecksumrecv) {

  016f0	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  016f3	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  016f6	74 11		 je	 SHORT $LN113@SaDispatch

; 782  : 			SliceCount=0;

  016f8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 783  : 			return 0;

  01702	33 c0		 xor	 eax, eax
  01704	e9 8f 0b 00 00	 jmp	 $LN1@SaDispatch
$LN113@SaDispatch:

; 784  : 		}
; 785  : 		lssproto_CharList_recv(fd, result, data);

  01709	8d 85 00 bc f8
	ff		 lea	 eax, DWORD PTR _data$34[ebp]
  0170f	50		 push	 eax
  01710	8d 8d 08 fc f8
	ff		 lea	 ecx, DWORD PTR _result$35[ebp]
  01716	51		 push	 ecx
  01717	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  0171a	52		 push	 edx
  0171b	e8 00 00 00 00	 call	 ?lssproto_CharList_recv@@YAXHPAD0@Z ; lssproto_CharList_recv
  01720	83 c4 0c	 add	 esp, 12			; 0000000cH

; 786  : 		SliceCount=0;

  01723	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 787  : 		return func;

  0172d	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01730	e9 63 0b 00 00	 jmp	 $LN1@SaDispatch
  01735	e9 52 0b 00 00	 jmp	 $LN4@SaDispatch
$LN111@SaDispatch:

; 788  : 	}
; 789  : 	else if (func==LSSPROTO_CHARLOGOUT_RECV) 

  0173a	83 7d f4 52	 cmp	 DWORD PTR _func$[ebp], 82 ; 00000052H
  0173e	0f 85 86 00 00
	00		 jne	 $LN114@SaDispatch

; 790  : 	{
; 791  : 		char result[16384];
; 792  : 		char data[16384];
; 793  : 
; 794  : 		iChecksum += util_destring(2, result);

  01744	8d 85 f8 7b f8
	ff		 lea	 eax, DWORD PTR _result$33[ebp]
  0174a	50		 push	 eax
  0174b	6a 02		 push	 2
  0174d	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01752	83 c4 08	 add	 esp, 8
  01755	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01758	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 795  : 		iChecksum += util_destring(3, data);

  0175b	8d 85 f0 3b f8
	ff		 lea	 eax, DWORD PTR _data$32[ebp]
  01761	50		 push	 eax
  01762	6a 03		 push	 3
  01764	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01769	83 c4 08	 add	 esp, 8
  0176c	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0176f	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 796  : 		util_deint(4, &iChecksumrecv);

  01772	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01775	50		 push	 eax
  01776	6a 04		 push	 4
  01778	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0177d	83 c4 08	 add	 esp, 8

; 797  : 		if (iChecksum!=iChecksumrecv) {

  01780	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01783	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01786	74 11		 je	 SHORT $LN116@SaDispatch

; 798  : 			SliceCount=0;

  01788	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 799  : 			return 0;

  01792	33 c0		 xor	 eax, eax
  01794	e9 ff 0a 00 00	 jmp	 $LN1@SaDispatch
$LN116@SaDispatch:

; 800  : 		}
; 801  : 		lssproto_CharLogout_recv(fd, result, data);

  01799	8d 85 f0 3b f8
	ff		 lea	 eax, DWORD PTR _data$32[ebp]
  0179f	50		 push	 eax
  017a0	8d 8d f8 7b f8
	ff		 lea	 ecx, DWORD PTR _result$33[ebp]
  017a6	51		 push	 ecx
  017a7	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  017aa	52		 push	 edx
  017ab	e8 00 00 00 00	 call	 ?lssproto_CharLogout_recv@@YAXHPAD0@Z ; lssproto_CharLogout_recv
  017b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 802  : 		SliceCount=0;

  017b3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 803  : 		return func;

  017bd	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  017c0	e9 d3 0a 00 00	 jmp	 $LN1@SaDispatch
  017c5	e9 c2 0a 00 00	 jmp	 $LN4@SaDispatch
$LN114@SaDispatch:

; 804  : 	}
; 805  : 	else if (func==LSSPROTO_PROCGET_RECV) 

  017ca	83 7d f4 54	 cmp	 DWORD PTR _func$[ebp], 84 ; 00000054H
  017ce	75 68		 jne	 SHORT $LN117@SaDispatch

; 806  : 	{
; 807  : 		char data[16384];
; 808  : 
; 809  : 		iChecksum += util_destring(2, data);

  017d0	8d 85 e8 fb f7
	ff		 lea	 eax, DWORD PTR _data$31[ebp]
  017d6	50		 push	 eax
  017d7	6a 02		 push	 2
  017d9	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  017de	83 c4 08	 add	 esp, 8
  017e1	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  017e4	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 810  : 		util_deint(3, &iChecksumrecv);

  017e7	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  017ea	50		 push	 eax
  017eb	6a 03		 push	 3
  017ed	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  017f2	83 c4 08	 add	 esp, 8

; 811  : 		if (iChecksum!=iChecksumrecv) {

  017f5	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  017f8	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  017fb	74 11		 je	 SHORT $LN119@SaDispatch

; 812  : 			SliceCount=0;

  017fd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 813  : 			return 0;

  01807	33 c0		 xor	 eax, eax
  01809	e9 8a 0a 00 00	 jmp	 $LN1@SaDispatch
$LN119@SaDispatch:

; 814  : 		}
; 815  : 		lssproto_ProcGet_recv(fd, data);

  0180e	8d 85 e8 fb f7
	ff		 lea	 eax, DWORD PTR _data$31[ebp]
  01814	50		 push	 eax
  01815	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01818	51		 push	 ecx
  01819	e8 00 00 00 00	 call	 ?lssproto_ProcGet_recv@@YAXHPAD@Z ; lssproto_ProcGet_recv
  0181e	83 c4 08	 add	 esp, 8

; 816  : 		SliceCount=0;

  01821	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 817  : 		return func;

  0182b	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  0182e	e9 65 0a 00 00	 jmp	 $LN1@SaDispatch
  01833	e9 54 0a 00 00	 jmp	 $LN4@SaDispatch
$LN117@SaDispatch:

; 818  : 	}
; 819  : 	else if (func==LSSPROTO_PLAYERNUMGET_RECV) 

  01838	83 7d f4 56	 cmp	 DWORD PTR _func$[ebp], 86 ; 00000056H
  0183c	0f 85 86 00 00
	00		 jne	 $LN120@SaDispatch

; 820  : 	{
; 821  : 		int logincount;
; 822  : 		int player;
; 823  : 
; 824  : 		iChecksum += util_deint(2, &logincount);

  01842	8d 85 dc fb f7
	ff		 lea	 eax, DWORD PTR _logincount$30[ebp]
  01848	50		 push	 eax
  01849	6a 02		 push	 2
  0184b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01850	83 c4 08	 add	 esp, 8
  01853	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01856	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 825  : 		iChecksum += util_deint(3, &player);

  01859	8d 85 d0 fb f7
	ff		 lea	 eax, DWORD PTR _player$29[ebp]
  0185f	50		 push	 eax
  01860	6a 03		 push	 3
  01862	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01867	83 c4 08	 add	 esp, 8
  0186a	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  0186d	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 826  : 		util_deint(4, &iChecksumrecv);

  01870	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01873	50		 push	 eax
  01874	6a 04		 push	 4
  01876	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0187b	83 c4 08	 add	 esp, 8

; 827  : 		if (iChecksum!=iChecksumrecv) {

  0187e	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01881	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01884	74 11		 je	 SHORT $LN122@SaDispatch

; 828  : 			SliceCount=0;

  01886	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 829  : 			return 0;

  01890	33 c0		 xor	 eax, eax
  01892	e9 01 0a 00 00	 jmp	 $LN1@SaDispatch
$LN122@SaDispatch:

; 830  : 		}
; 831  : 		lssproto_PlayerNumGet_recv(fd, logincount, player);

  01897	8b 85 d0 fb f7
	ff		 mov	 eax, DWORD PTR _player$29[ebp]
  0189d	50		 push	 eax
  0189e	8b 8d dc fb f7
	ff		 mov	 ecx, DWORD PTR _logincount$30[ebp]
  018a4	51		 push	 ecx
  018a5	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  018a8	52		 push	 edx
  018a9	e8 00 00 00 00	 call	 ?lssproto_PlayerNumGet_recv@@YAXHHH@Z ; lssproto_PlayerNumGet_recv
  018ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 832  : 		SliceCount=0;

  018b1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 833  : 		return func;

  018bb	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  018be	e9 d5 09 00 00	 jmp	 $LN1@SaDispatch
  018c3	e9 c4 09 00 00	 jmp	 $LN4@SaDispatch
$LN120@SaDispatch:

; 834  : 	}
; 835  : 	else if (func==LSSPROTO_ECHO_RECV) 

  018c8	83 7d f4 58	 cmp	 DWORD PTR _func$[ebp], 88 ; 00000058H
  018cc	75 68		 jne	 SHORT $LN123@SaDispatch

; 836  : 	{
; 837  : 		char test[16384];
; 838  : 
; 839  : 		iChecksum += util_destring(2, test);

  018ce	8d 85 c8 bb f7
	ff		 lea	 eax, DWORD PTR _test$28[ebp]
  018d4	50		 push	 eax
  018d5	6a 02		 push	 2
  018d7	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  018dc	83 c4 08	 add	 esp, 8
  018df	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  018e2	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 840  : 		util_deint(3, &iChecksumrecv);

  018e5	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  018e8	50		 push	 eax
  018e9	6a 03		 push	 3
  018eb	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  018f0	83 c4 08	 add	 esp, 8

; 841  : 		if (iChecksum!=iChecksumrecv) {

  018f3	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  018f6	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  018f9	74 11		 je	 SHORT $LN125@SaDispatch

; 842  : 			SliceCount=0;

  018fb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 843  : 			return 0;

  01905	33 c0		 xor	 eax, eax
  01907	e9 8c 09 00 00	 jmp	 $LN1@SaDispatch
$LN125@SaDispatch:

; 844  : 		}
; 845  : 		lssproto_Echo_recv(fd, test);

  0190c	8d 85 c8 bb f7
	ff		 lea	 eax, DWORD PTR _test$28[ebp]
  01912	50		 push	 eax
  01913	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01916	51		 push	 ecx
  01917	e8 00 00 00 00	 call	 ?lssproto_Echo_recv@@YAXHPAD@Z ; lssproto_Echo_recv
  0191c	83 c4 08	 add	 esp, 8

; 846  : 		SliceCount=0;

  0191f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 847  : 		return func;

  01929	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  0192c	e9 67 09 00 00	 jmp	 $LN1@SaDispatch
  01931	e9 56 09 00 00	 jmp	 $LN4@SaDispatch
$LN123@SaDispatch:

; 848  : 	}
; 849  : 	else if (func==LSSPROTO_NU_RECV)

  01936	83 7d f4 5a	 cmp	 DWORD PTR _func$[ebp], 90 ; 0000005aH
  0193a	75 68		 jne	 SHORT $LN126@SaDispatch

; 850  : 	{
; 851  : 		int AddCount;
; 852  : 
; 853  : 		iChecksum += util_deint(2, &AddCount);

  0193c	8d 85 bc bb f7
	ff		 lea	 eax, DWORD PTR _AddCount$27[ebp]
  01942	50		 push	 eax
  01943	6a 02		 push	 2
  01945	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0194a	83 c4 08	 add	 esp, 8
  0194d	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01950	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 854  : 		util_deint(3, &iChecksumrecv);

  01953	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01956	50		 push	 eax
  01957	6a 03		 push	 3
  01959	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0195e	83 c4 08	 add	 esp, 8

; 855  : 		if (iChecksum!=iChecksumrecv) {

  01961	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01964	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01967	74 11		 je	 SHORT $LN128@SaDispatch

; 856  : 			SliceCount=0;

  01969	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 857  : 			return 0;

  01973	33 c0		 xor	 eax, eax
  01975	e9 1e 09 00 00	 jmp	 $LN1@SaDispatch
$LN128@SaDispatch:

; 858  : 		}
; 859  : 		lssproto_NU_recv(fd, AddCount);

  0197a	8b 85 bc bb f7
	ff		 mov	 eax, DWORD PTR _AddCount$27[ebp]
  01980	50		 push	 eax
  01981	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01984	51		 push	 ecx
  01985	e8 00 00 00 00	 call	 ?lssproto_NU_recv@@YAXHH@Z ; lssproto_NU_recv
  0198a	83 c4 08	 add	 esp, 8

; 860  : 		SliceCount=0;

  0198d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 861  : 		return func;

  01997	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  0199a	e9 f9 08 00 00	 jmp	 $LN1@SaDispatch
  0199f	e9 e8 08 00 00	 jmp	 $LN4@SaDispatch
$LN126@SaDispatch:

; 862  : 	}
; 863  : 	else if (func==LSSPROTO_TD_RECV) 

  019a4	83 7d f4 5c	 cmp	 DWORD PTR _func$[ebp], 92 ; 0000005cH
  019a8	75 68		 jne	 SHORT $LN129@SaDispatch

; 864  : 	{
; 865  : 		char data[16384];
; 866  : 
; 867  : 		iChecksum += util_destring(2, data);

  019aa	8d 85 b4 7b f7
	ff		 lea	 eax, DWORD PTR _data$26[ebp]
  019b0	50		 push	 eax
  019b1	6a 02		 push	 2
  019b3	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  019b8	83 c4 08	 add	 esp, 8
  019bb	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  019be	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 868  : 		util_deint(3, &iChecksumrecv);

  019c1	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  019c4	50		 push	 eax
  019c5	6a 03		 push	 3
  019c7	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  019cc	83 c4 08	 add	 esp, 8

; 869  : 		if (iChecksum!=iChecksumrecv) {

  019cf	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  019d2	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  019d5	74 11		 je	 SHORT $LN131@SaDispatch

; 870  : 			SliceCount=0;

  019d7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 871  : 			return 0;

  019e1	33 c0		 xor	 eax, eax
  019e3	e9 b0 08 00 00	 jmp	 $LN1@SaDispatch
$LN131@SaDispatch:

; 872  : 		}
; 873  : 		lssproto_TD_recv(fd, data);

  019e8	8d 85 b4 7b f7
	ff		 lea	 eax, DWORD PTR _data$26[ebp]
  019ee	50		 push	 eax
  019ef	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  019f2	51		 push	 ecx
  019f3	e8 00 00 00 00	 call	 ?lssproto_TD_recv@@YAXHPAD@Z ; lssproto_TD_recv
  019f8	83 c4 08	 add	 esp, 8

; 874  : 		SliceCount=0;

  019fb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 875  : 		return func;

  01a05	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01a08	e9 8b 08 00 00	 jmp	 $LN1@SaDispatch
  01a0d	e9 7a 08 00 00	 jmp	 $LN4@SaDispatch
$LN129@SaDispatch:

; 876  : 	}
; 877  : 	else if (func==LSSPROTO_FM_RECV) 

  01a12	83 7d f4 5d	 cmp	 DWORD PTR _func$[ebp], 93 ; 0000005dH
  01a16	75 77		 jne	 SHORT $LN132@SaDispatch

; 878  : 	{
; 879  : 		char data[16384];
; 880  : 
; 881  : 		iChecksum += util_destring(2, data);

  01a18	8d 85 ac 3b f7
	ff		 lea	 eax, DWORD PTR _data$25[ebp]
  01a1e	50		 push	 eax
  01a1f	6a 02		 push	 2
  01a21	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01a26	83 c4 08	 add	 esp, 8
  01a29	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01a2c	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 882  : 		util_deint(3, &iChecksumrecv);

  01a2f	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01a32	50		 push	 eax
  01a33	6a 03		 push	 3
  01a35	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01a3a	83 c4 08	 add	 esp, 8

; 883  : 		if (iChecksum!=iChecksumrecv) {

  01a3d	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01a40	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01a43	74 11		 je	 SHORT $LN134@SaDispatch

; 884  : 			SliceCount=0;

  01a45	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 885  : 			return 0;

  01a4f	33 c0		 xor	 eax, eax
  01a51	e9 42 08 00 00	 jmp	 $LN1@SaDispatch
$LN134@SaDispatch:

; 886  : 		}
; 887  : 
; 888  : 		LogToRecvdata( data );

  01a56	8d 85 ac 3b f7
	ff		 lea	 eax, DWORD PTR _data$25[ebp]
  01a5c	50		 push	 eax
  01a5d	e8 00 00 00 00	 call	 ?LogToRecvdata@@YAXPAD@Z ; LogToRecvdata
  01a62	83 c4 04	 add	 esp, 4

; 889  : 
; 890  : 		lssproto_FM_recv(fd, data);

  01a65	8d 85 ac 3b f7
	ff		 lea	 eax, DWORD PTR _data$25[ebp]
  01a6b	50		 push	 eax
  01a6c	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01a6f	51		 push	 ecx
  01a70	e8 00 00 00 00	 call	 ?lssproto_FM_recv@@YAXHPAD@Z ; lssproto_FM_recv
  01a75	83 c4 08	 add	 esp, 8

; 891  : 		SliceCount=0;

  01a78	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 892  : 		return func;

  01a82	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01a85	e9 0e 08 00 00	 jmp	 $LN1@SaDispatch
  01a8a	e9 fd 07 00 00	 jmp	 $LN4@SaDispatch
$LN132@SaDispatch:

; 893  : 	}
; 894  : 
; 895  : #ifdef _ITEM_CRACKER
; 896  : 	else if(func==LSSPROTO_IC_RECV)

  01a8f	83 7d f4 64	 cmp	 DWORD PTR _func$[ebp], 100 ; 00000064H
  01a93	0f 85 86 00 00
	00		 jne	 $LN135@SaDispatch

; 897  : 	{
; 898  : 		int x, y;		
; 899  : 		iChecksum += util_deint( 2, &x);

  01a99	8d 85 a0 3b f7
	ff		 lea	 eax, DWORD PTR _x$24[ebp]
  01a9f	50		 push	 eax
  01aa0	6a 02		 push	 2
  01aa2	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01aa7	83 c4 08	 add	 esp, 8
  01aaa	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01aad	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 900  : 		iChecksum += util_deint( 3, &y);

  01ab0	8d 85 94 3b f7
	ff		 lea	 eax, DWORD PTR _y$23[ebp]
  01ab6	50		 push	 eax
  01ab7	6a 03		 push	 3
  01ab9	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01abe	83 c4 08	 add	 esp, 8
  01ac1	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01ac4	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 901  : 		util_deint( 4, &iChecksumrecv);

  01ac7	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01aca	50		 push	 eax
  01acb	6a 04		 push	 4
  01acd	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01ad2	83 c4 08	 add	 esp, 8

; 902  : 		if(iChecksum!=iChecksumrecv){

  01ad5	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01ad8	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01adb	74 11		 je	 SHORT $LN137@SaDispatch

; 903  : 			SliceCount=0;

  01add	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 904  : 			return 0;

  01ae7	33 c0		 xor	 eax, eax
  01ae9	e9 aa 07 00 00	 jmp	 $LN1@SaDispatch
$LN137@SaDispatch:

; 905  : 		}		
; 906  : 		lssproto_IC_recv(fd, x, y);

  01aee	8b 85 94 3b f7
	ff		 mov	 eax, DWORD PTR _y$23[ebp]
  01af4	50		 push	 eax
  01af5	8b 8d a0 3b f7
	ff		 mov	 ecx, DWORD PTR _x$24[ebp]
  01afb	51		 push	 ecx
  01afc	8b 55 08	 mov	 edx, DWORD PTR _fd$[ebp]
  01aff	52		 push	 edx
  01b00	e8 00 00 00 00	 call	 ?lssproto_IC_recv@@YAXHHH@Z ; lssproto_IC_recv
  01b05	83 c4 0c	 add	 esp, 12			; 0000000cH

; 907  : 		SliceCount=0;

  01b08	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 908  : 		return func;

  01b12	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01b15	e9 7e 07 00 00	 jmp	 $LN1@SaDispatch
  01b1a	e9 6d 07 00 00	 jmp	 $LN4@SaDispatch
$LN135@SaDispatch:

; 909  : 	}
; 910  : #endif
; 911  : #ifdef _CHECK_GAMESPEED
; 912  : 	else if ( func == LSSPROTO_CS_RECV ) 
; 913  : 	{
; 914  : 		int deltimes=0;
; 915  : 		iChecksum += util_deint(2, &deltimes);
; 916  : 		util_deint(3, &iChecksumrecv);
; 917  : 		if (iChecksum!=iChecksumrecv) {
; 918  : 			SliceCount=0;
; 919  : 			return 0;
; 920  : 		}
; 921  : 		lssproto_CS_recv(fd, deltimes);
; 922  : 		SliceCount=0;
; 923  : 		return func;
; 924  : 	}
; 925  : #endif
; 926  : 
; 927  : #ifdef _MAGIC_NOCAST//沉默
; 928  : 	else if (func==LSSPROTO_NC_RECV) 

  01b1f	83 7d f4 65	 cmp	 DWORD PTR _func$[ebp], 101 ; 00000065H
  01b23	75 68		 jne	 SHORT $LN138@SaDispatch

; 929  : 	{
; 930  : 		int flg;
; 931  : 
; 932  : 		iChecksum += util_deint(2, &flg);

  01b25	8d 85 88 3b f7
	ff		 lea	 eax, DWORD PTR _flg$22[ebp]
  01b2b	50		 push	 eax
  01b2c	6a 02		 push	 2
  01b2e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01b33	83 c4 08	 add	 esp, 8
  01b36	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01b39	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 933  : 		util_deint(3, &iChecksumrecv);

  01b3c	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01b3f	50		 push	 eax
  01b40	6a 03		 push	 3
  01b42	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01b47	83 c4 08	 add	 esp, 8

; 934  : 		if (iChecksum!=iChecksumrecv) {

  01b4a	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01b4d	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01b50	74 11		 je	 SHORT $LN140@SaDispatch

; 935  : 			SliceCount=0;

  01b52	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 936  : 			return 0;

  01b5c	33 c0		 xor	 eax, eax
  01b5e	e9 35 07 00 00	 jmp	 $LN1@SaDispatch
$LN140@SaDispatch:

; 937  : 		}
; 938  : 		lssproto_NC_recv(fd, flg);

  01b63	8b 85 88 3b f7
	ff		 mov	 eax, DWORD PTR _flg$22[ebp]
  01b69	50		 push	 eax
  01b6a	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01b6d	51		 push	 ecx
  01b6e	e8 00 00 00 00	 call	 ?lssproto_NC_recv@@YAXHH@Z ; lssproto_NC_recv
  01b73	83 c4 08	 add	 esp, 8

; 939  : 		SliceCount=0;

  01b76	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 940  : 		return func;

  01b80	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01b83	e9 10 07 00 00	 jmp	 $LN1@SaDispatch
  01b88	e9 ff 06 00 00	 jmp	 $LN4@SaDispatch
$LN138@SaDispatch:

; 941  : 	}
; 942  : #endif
; 943  : #ifdef _CHATROOMPROTOCOL			// (不可开) Syu ADD 聊天室频道
; 944  : 	else if ( func == LSSPROTO_CHATROOM_RECV ) 

  01b8d	83 7d f4 71	 cmp	 DWORD PTR _func$[ebp], 113 ; 00000071H
  01b91	75 68		 jne	 SHORT $LN141@SaDispatch

; 945  : 	{
; 946  : 		char data[16384];
; 947  : 
; 948  : 		iChecksum += util_destring(2, data);

  01b93	8d 85 80 fb f6
	ff		 lea	 eax, DWORD PTR _data$21[ebp]
  01b99	50		 push	 eax
  01b9a	6a 02		 push	 2
  01b9c	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01ba1	83 c4 08	 add	 esp, 8
  01ba4	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01ba7	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 949  : 		util_deint(3, &iChecksumrecv);

  01baa	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01bad	50		 push	 eax
  01bae	6a 03		 push	 3
  01bb0	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01bb5	83 c4 08	 add	 esp, 8

; 950  : 		if (iChecksum!=iChecksumrecv) {

  01bb8	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01bbb	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01bbe	74 11		 je	 SHORT $LN143@SaDispatch

; 951  : 			SliceCount=0;

  01bc0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 952  : 			return 0;

  01bca	33 c0		 xor	 eax, eax
  01bcc	e9 c7 06 00 00	 jmp	 $LN1@SaDispatch
$LN143@SaDispatch:

; 953  : 		}
; 954  : 		lssproto_CHATROOM_recv(fd, data);

  01bd1	8d 85 80 fb f6
	ff		 lea	 eax, DWORD PTR _data$21[ebp]
  01bd7	50		 push	 eax
  01bd8	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01bdb	51		 push	 ecx
  01bdc	e8 00 00 00 00	 call	 ?lssproto_CHATROOM_recv@@YAXHPAD@Z ; lssproto_CHATROOM_recv
  01be1	83 c4 08	 add	 esp, 8

; 955  : 		SliceCount=0;

  01be4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 956  : 		return func;

  01bee	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01bf1	e9 a2 06 00 00	 jmp	 $LN1@SaDispatch
  01bf6	e9 91 06 00 00	 jmp	 $LN4@SaDispatch
$LN141@SaDispatch:

; 957  : 	}
; 958  : #endif
; 959  : #ifdef _NEWREQUESTPROTOCOL			// (不可开) Syu ADD 新增Protocol要求细项
; 960  : 	else if ( func == LSSPROTO_RESIST_RECV ) 

  01bfb	83 7d f4 6d	 cmp	 DWORD PTR _func$[ebp], 109 ; 0000006dH
  01bff	75 68		 jne	 SHORT $LN144@SaDispatch

; 961  : 	{
; 962  : 		char data[16384];
; 963  : 
; 964  : 		iChecksum += util_destring(2, data);

  01c01	8d 85 78 bb f6
	ff		 lea	 eax, DWORD PTR _data$20[ebp]
  01c07	50		 push	 eax
  01c08	6a 02		 push	 2
  01c0a	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01c0f	83 c4 08	 add	 esp, 8
  01c12	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01c15	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 965  : 		util_deint(3, &iChecksumrecv);

  01c18	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01c1b	50		 push	 eax
  01c1c	6a 03		 push	 3
  01c1e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01c23	83 c4 08	 add	 esp, 8

; 966  : 		if (iChecksum!=iChecksumrecv) {

  01c26	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01c29	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01c2c	74 11		 je	 SHORT $LN146@SaDispatch

; 967  : 			SliceCount=0;

  01c2e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 968  : 			return 0;

  01c38	33 c0		 xor	 eax, eax
  01c3a	e9 59 06 00 00	 jmp	 $LN1@SaDispatch
$LN146@SaDispatch:

; 969  : 		}
; 970  : 		lssproto_RESIST_recv(fd, data);

  01c3f	8d 85 78 bb f6
	ff		 lea	 eax, DWORD PTR _data$20[ebp]
  01c45	50		 push	 eax
  01c46	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01c49	51		 push	 ecx
  01c4a	e8 00 00 00 00	 call	 ?lssproto_RESIST_recv@@YAXHPAD@Z ; lssproto_RESIST_recv
  01c4f	83 c4 08	 add	 esp, 8

; 971  : 		SliceCount=0;

  01c52	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 972  : 		return func;

  01c5c	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01c5f	e9 34 06 00 00	 jmp	 $LN1@SaDispatch
  01c64	e9 23 06 00 00	 jmp	 $LN4@SaDispatch
$LN144@SaDispatch:

; 973  : 	}
; 974  : #endif
; 975  : 
; 976  : #ifdef _ALCHEPLUS
; 977  : 	else if ( func == LSSPROTO_ALCHEPLUS_RECV ) 

  01c69	81 7d f4 88 00
	00 00		 cmp	 DWORD PTR _func$[ebp], 136 ; 00000088H
  01c70	75 68		 jne	 SHORT $LN147@SaDispatch

; 978  : 	{
; 979  : 		char data[16384];
; 980  : 
; 981  : 		iChecksum += util_destring(2, data);

  01c72	8d 85 70 7b f6
	ff		 lea	 eax, DWORD PTR _data$19[ebp]
  01c78	50		 push	 eax
  01c79	6a 02		 push	 2
  01c7b	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01c80	83 c4 08	 add	 esp, 8
  01c83	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01c86	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 982  : 		util_deint(3, &iChecksumrecv);

  01c89	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01c8c	50		 push	 eax
  01c8d	6a 03		 push	 3
  01c8f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01c94	83 c4 08	 add	 esp, 8

; 983  : 		if (iChecksum!=iChecksumrecv) {

  01c97	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01c9a	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01c9d	74 11		 je	 SHORT $LN149@SaDispatch

; 984  : 			SliceCount=0;

  01c9f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 985  : 			return 0;

  01ca9	33 c0		 xor	 eax, eax
  01cab	e9 e8 05 00 00	 jmp	 $LN1@SaDispatch
$LN149@SaDispatch:

; 986  : 		}
; 987  : 		lssproto_ALCHEPLUS_recv(fd, data);

  01cb0	8d 85 70 7b f6
	ff		 lea	 eax, DWORD PTR _data$19[ebp]
  01cb6	50		 push	 eax
  01cb7	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01cba	51		 push	 ecx
  01cbb	e8 00 00 00 00	 call	 ?lssproto_ALCHEPLUS_recv@@YAXHPAD@Z ; lssproto_ALCHEPLUS_recv
  01cc0	83 c4 08	 add	 esp, 8

; 988  : 		SliceCount=0;

  01cc3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 989  : 		return func;

  01ccd	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01cd0	e9 c3 05 00 00	 jmp	 $LN1@SaDispatch
  01cd5	e9 b2 05 00 00	 jmp	 $LN4@SaDispatch
$LN147@SaDispatch:

; 990  : 	}
; 991  : #endif
; 992  : 
; 993  : 	else if (func == LSSPROTO_CHAREFFECT_RECV)

  01cda	81 7d f4 d6 00
	00 00		 cmp	 DWORD PTR _func$[ebp], 214 ; 000000d6H
  01ce1	75 6b		 jne	 SHORT $LN150@SaDispatch

; 994  : 	{
; 995  : 		char data[16384];
; 996  : 
; 997  : 		iChecksum += util_destring(2, data);

  01ce3	8d 85 68 3b f6
	ff		 lea	 eax, DWORD PTR _data$18[ebp]
  01ce9	50		 push	 eax
  01cea	6a 02		 push	 2
  01cec	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01cf1	83 c4 08	 add	 esp, 8
  01cf4	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01cf7	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 998  : 		util_deint(3, &iChecksumrecv);

  01cfa	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01cfd	50		 push	 eax
  01cfe	6a 03		 push	 3
  01d00	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01d05	83 c4 08	 add	 esp, 8

; 999  : 		if (iChecksum != iChecksumrecv) {

  01d08	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01d0b	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01d0e	74 14		 je	 SHORT $LN152@SaDispatch

; 1000 : 			SliceCount = 0;

  01d10	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1001 : 			return 1;

  01d1a	b8 01 00 00 00	 mov	 eax, 1
  01d1f	e9 74 05 00 00	 jmp	 $LN1@SaDispatch
$LN152@SaDispatch:

; 1002 : 		}
; 1003 : 
; 1004 : 		lssproto_CHAREFFECT_recv(fd, data);

  01d24	8d 85 68 3b f6
	ff		 lea	 eax, DWORD PTR _data$18[ebp]
  01d2a	50		 push	 eax
  01d2b	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01d2e	51		 push	 ecx
  01d2f	e8 00 00 00 00	 call	 ?lssproto_CHAREFFECT_recv@@YAXHPAD@Z ; lssproto_CHAREFFECT_recv
  01d34	83 c4 08	 add	 esp, 8

; 1005 : 		SliceCount = 0;

  01d37	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1006 : 		return func;

  01d41	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01d44	e9 4f 05 00 00	 jmp	 $LN1@SaDispatch
  01d49	e9 3e 05 00 00	 jmp	 $LN4@SaDispatch
$LN150@SaDispatch:

; 1007 : 	}
; 1008 : 
; 1009 : 	else if (func == LSSPROTO_查询光环_RECV)

  01d4e	81 7d f4 d5 00
	00 00		 cmp	 DWORD PTR _func$[ebp], 213 ; 000000d5H
  01d55	75 67		 jne	 SHORT $LN153@SaDispatch

; 1010 : 	{
; 1011 : 		char data[16384];
; 1012 : 
; 1013 : 		iChecksum += util_destring(2, data);

  01d57	8d 85 60 fb f5
	ff		 lea	 eax, DWORD PTR _data$17[ebp]
  01d5d	50		 push	 eax
  01d5e	6a 02		 push	 2
  01d60	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01d65	83 c4 08	 add	 esp, 8
  01d68	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01d6b	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1014 : 		util_deint(3, &iChecksumrecv);

  01d6e	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01d71	50		 push	 eax
  01d72	6a 03		 push	 3
  01d74	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01d79	83 c4 08	 add	 esp, 8

; 1015 : 		if (iChecksum != iChecksumrecv) {

  01d7c	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01d7f	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01d82	74 14		 je	 SHORT $LN155@SaDispatch

; 1016 : 			SliceCount = 0;

  01d84	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1017 : 			return 1;

  01d8e	b8 01 00 00 00	 mov	 eax, 1
  01d93	e9 00 05 00 00	 jmp	 $LN1@SaDispatch
$LN155@SaDispatch:

; 1018 : 		}
; 1019 : 
; 1020 : 		void lssproto_查询光环_recv(char* data);
; 1021 : 		lssproto_查询光环_recv(data);

  01d98	8d 85 60 fb f5
	ff		 lea	 eax, DWORD PTR _data$17[ebp]
  01d9e	50		 push	 eax
  01d9f	e8 00 00 00 00	 call	 ?lssproto_查询光环_recv@@YAXPAD@Z ; lssproto_查询光环_recv
  01da4	83 c4 04	 add	 esp, 4

; 1022 : 
; 1023 : 		SliceCount = 0;

  01da7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1024 : 		return func;

  01db1	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01db4	e9 df 04 00 00	 jmp	 $LN1@SaDispatch
  01db9	e9 ce 04 00 00	 jmp	 $LN4@SaDispatch
$LN153@SaDispatch:

; 1025 : 	}
; 1026 : 
; 1027 : #ifdef _OUTOFBATTLESKILL			// (不可开) Syu ADD 非战斗时技能Protocol
; 1028 : 	else if ( func == LSSPROTO_BATTLESKILL_RECV ) 

  01dbe	83 7d f4 6f	 cmp	 DWORD PTR _func$[ebp], 111 ; 0000006fH
  01dc2	75 68		 jne	 SHORT $LN156@SaDispatch

; 1029 : 	{
; 1030 : 		char data[16384];
; 1031 : 
; 1032 : 		iChecksum += util_destring(2, data);

  01dc4	8d 85 58 bb f5
	ff		 lea	 eax, DWORD PTR _data$16[ebp]
  01dca	50		 push	 eax
  01dcb	6a 02		 push	 2
  01dcd	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01dd2	83 c4 08	 add	 esp, 8
  01dd5	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01dd8	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1033 : 		util_deint(3, &iChecksumrecv);

  01ddb	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01dde	50		 push	 eax
  01ddf	6a 03		 push	 3
  01de1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01de6	83 c4 08	 add	 esp, 8

; 1034 : 		if (iChecksum!=iChecksumrecv) {

  01de9	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01dec	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01def	74 11		 je	 SHORT $LN158@SaDispatch

; 1035 : 			SliceCount=0;

  01df1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1036 : 			return 0;

  01dfb	33 c0		 xor	 eax, eax
  01dfd	e9 96 04 00 00	 jmp	 $LN1@SaDispatch
$LN158@SaDispatch:

; 1037 : 		}
; 1038 : 		lssproto_BATTLESKILL_recv(fd, data);

  01e02	8d 85 58 bb f5
	ff		 lea	 eax, DWORD PTR _data$16[ebp]
  01e08	50		 push	 eax
  01e09	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01e0c	51		 push	 ecx
  01e0d	e8 00 00 00 00	 call	 ?lssproto_BATTLESKILL_recv@@YAXHPAD@Z ; lssproto_BATTLESKILL_recv
  01e12	83 c4 08	 add	 esp, 8

; 1039 : 		SliceCount=0;

  01e15	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1040 : 		return func;

  01e1f	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01e22	e9 71 04 00 00	 jmp	 $LN1@SaDispatch
  01e27	e9 60 04 00 00	 jmp	 $LN4@SaDispatch
$LN156@SaDispatch:

; 1041 : 	}
; 1042 : #endif
; 1043 : 	else if( func==LSSPROTO_WO_RECV)

  01e2c	83 7d f4 5f	 cmp	 DWORD PTR _func$[ebp], 95 ; 0000005fH
  01e30	75 68		 jne	 SHORT $LN159@SaDispatch

; 1044 : 	{
; 1045 : 		int effect;
; 1046 : 
; 1047 : 		iChecksum += util_deint(2, &effect);

  01e32	8d 85 4c bb f5
	ff		 lea	 eax, DWORD PTR _effect$15[ebp]
  01e38	50		 push	 eax
  01e39	6a 02		 push	 2
  01e3b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01e40	83 c4 08	 add	 esp, 8
  01e43	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01e46	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1048 : 		util_deint(3, &iChecksumrecv);

  01e49	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01e4c	50		 push	 eax
  01e4d	6a 03		 push	 3
  01e4f	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01e54	83 c4 08	 add	 esp, 8

; 1049 : 		if (iChecksum!=iChecksumrecv) {

  01e57	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01e5a	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01e5d	74 11		 je	 SHORT $LN161@SaDispatch

; 1050 : 			SliceCount=0;

  01e5f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1051 : 			return 0;

  01e69	33 c0		 xor	 eax, eax
  01e6b	e9 28 04 00 00	 jmp	 $LN1@SaDispatch
$LN161@SaDispatch:

; 1052 : 		}
; 1053 : 		lssproto_WO_recv( fd, effect );

  01e70	8b 85 4c bb f5
	ff		 mov	 eax, DWORD PTR _effect$15[ebp]
  01e76	50		 push	 eax
  01e77	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01e7a	51		 push	 ecx
  01e7b	e8 00 00 00 00	 call	 ?lssproto_WO_recv@@YAXHH@Z ; lssproto_WO_recv
  01e80	83 c4 08	 add	 esp, 8

; 1054 : 		SliceCount=0;

  01e83	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1055 : 		return func;

  01e8d	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01e90	e9 03 04 00 00	 jmp	 $LN1@SaDispatch
  01e95	e9 f2 03 00 00	 jmp	 $LN4@SaDispatch
$LN159@SaDispatch:

; 1056 : 	}
; 1057 : #ifdef _STREET_VENDOR
; 1058 : 	else if (func == LSSPROTO_STREET_VENDOR_RECV)

  01e9a	83 7d f4 75	 cmp	 DWORD PTR _func$[ebp], 117 ; 00000075H
  01e9e	75 68		 jne	 SHORT $LN162@SaDispatch

; 1059 : 	{
; 1060 : 		char data[16384];
; 1061 : 
; 1062 : 		iChecksum += util_destring(2,data);

  01ea0	8d 85 44 7b f5
	ff		 lea	 eax, DWORD PTR _data$14[ebp]
  01ea6	50		 push	 eax
  01ea7	6a 02		 push	 2
  01ea9	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01eae	83 c4 08	 add	 esp, 8
  01eb1	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01eb4	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1063 : 		util_deint(3,&iChecksumrecv);

  01eb7	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01eba	50		 push	 eax
  01ebb	6a 03		 push	 3
  01ebd	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01ec2	83 c4 08	 add	 esp, 8

; 1064 : 		if(iChecksum != iChecksumrecv){

  01ec5	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01ec8	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01ecb	74 11		 je	 SHORT $LN164@SaDispatch

; 1065 : 			SliceCount=0;

  01ecd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1066 : 			return 0;

  01ed7	33 c0		 xor	 eax, eax
  01ed9	e9 ba 03 00 00	 jmp	 $LN1@SaDispatch
$LN164@SaDispatch:

; 1067 : 		}
; 1068 : 		lssproto_STREET_VENDOR_recv(fd,data);

  01ede	8d 85 44 7b f5
	ff		 lea	 eax, DWORD PTR _data$14[ebp]
  01ee4	50		 push	 eax
  01ee5	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01ee8	51		 push	 ecx
  01ee9	e8 00 00 00 00	 call	 ?lssproto_STREET_VENDOR_recv@@YAXHPAD@Z ; lssproto_STREET_VENDOR_recv
  01eee	83 c4 08	 add	 esp, 8

; 1069 : 		SliceCount=0;

  01ef1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1070 : 		return func;

  01efb	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01efe	e9 95 03 00 00	 jmp	 $LN1@SaDispatch
  01f03	e9 84 03 00 00	 jmp	 $LN4@SaDispatch
$LN162@SaDispatch:

; 1071 : 	}
; 1072 : #endif
; 1073 : #ifdef _JOBDAILY
; 1074 : 	else if (func == LSSPROTO_JOBDAILY_RECV)

  01f08	83 7d f4 78	 cmp	 DWORD PTR _func$[ebp], 120 ; 00000078H
  01f0c	75 68		 jne	 SHORT $LN165@SaDispatch

; 1075 : 	{
; 1076 : 		char data[16384];
; 1077 : 
; 1078 : 		iChecksum += util_destring(2,data);

  01f0e	8d 85 3c 3b f5
	ff		 lea	 eax, DWORD PTR _data$13[ebp]
  01f14	50		 push	 eax
  01f15	6a 02		 push	 2
  01f17	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01f1c	83 c4 08	 add	 esp, 8
  01f1f	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01f22	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1079 : 		util_deint(3,&iChecksumrecv);

  01f25	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01f28	50		 push	 eax
  01f29	6a 03		 push	 3
  01f2b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01f30	83 c4 08	 add	 esp, 8

; 1080 : 		if(iChecksum != iChecksumrecv){

  01f33	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01f36	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01f39	74 11		 je	 SHORT $LN167@SaDispatch

; 1081 : 			SliceCount=0;

  01f3b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1082 : 			return 0;

  01f45	33 c0		 xor	 eax, eax
  01f47	e9 4c 03 00 00	 jmp	 $LN1@SaDispatch
$LN167@SaDispatch:

; 1083 : 		}
; 1084 : 		lssproto_JOBDAILY_recv(fd,data);

  01f4c	8d 85 3c 3b f5
	ff		 lea	 eax, DWORD PTR _data$13[ebp]
  01f52	50		 push	 eax
  01f53	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01f56	51		 push	 ecx
  01f57	e8 00 00 00 00	 call	 ?lssproto_JOBDAILY_recv@@YAXHPAD@Z ; lssproto_JOBDAILY_recv
  01f5c	83 c4 08	 add	 esp, 8

; 1085 : 		SliceCount=0;

  01f5f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1086 : 		return func;

  01f69	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01f6c	e9 27 03 00 00	 jmp	 $LN1@SaDispatch
  01f71	e9 16 03 00 00	 jmp	 $LN4@SaDispatch
$LN165@SaDispatch:

; 1087 : 	}
; 1088 : #endif
; 1089 : #ifdef _TEACHER_SYSTEM
; 1090 : 	else if (func == LSSPROTO_TEACHER_SYSTEM_RECV)

  01f76	83 7d f4 7b	 cmp	 DWORD PTR _func$[ebp], 123 ; 0000007bH
  01f7a	75 68		 jne	 SHORT $LN168@SaDispatch

; 1091 : 	{
; 1092 : 		char data[16384];
; 1093 : 
; 1094 : 		iChecksum += util_destring(2,data);

  01f7c	8d 85 34 fb f4
	ff		 lea	 eax, DWORD PTR _data$12[ebp]
  01f82	50		 push	 eax
  01f83	6a 02		 push	 2
  01f85	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01f8a	83 c4 08	 add	 esp, 8
  01f8d	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01f90	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1095 : 		util_deint(3,&iChecksumrecv);

  01f93	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01f96	50		 push	 eax
  01f97	6a 03		 push	 3
  01f99	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  01f9e	83 c4 08	 add	 esp, 8

; 1096 : 		if(iChecksum != iChecksumrecv){

  01fa1	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  01fa4	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  01fa7	74 11		 je	 SHORT $LN170@SaDispatch

; 1097 : 			SliceCount=0;

  01fa9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1098 : 			return 0;

  01fb3	33 c0		 xor	 eax, eax
  01fb5	e9 de 02 00 00	 jmp	 $LN1@SaDispatch
$LN170@SaDispatch:

; 1099 : 		}
; 1100 : 		lssproto_TEACHER_SYSTEM_recv(fd,data);

  01fba	8d 85 34 fb f4
	ff		 lea	 eax, DWORD PTR _data$12[ebp]
  01fc0	50		 push	 eax
  01fc1	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  01fc4	51		 push	 ecx
  01fc5	e8 00 00 00 00	 call	 ?lssproto_TEACHER_SYSTEM_recv@@YAXHPAD@Z ; lssproto_TEACHER_SYSTEM_recv
  01fca	83 c4 08	 add	 esp, 8

; 1101 : 		SliceCount=0;

  01fcd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1102 : 		return func;

  01fd7	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  01fda	e9 b9 02 00 00	 jmp	 $LN1@SaDispatch
  01fdf	e9 a8 02 00 00	 jmp	 $LN4@SaDispatch
$LN168@SaDispatch:

; 1103 : 	}
; 1104 : #endif
; 1105 : #ifdef _ADD_STATUS_2
; 1106 : 	else if (func == LSSPROTO_S2_RECV)

  01fe4	83 7d f4 7d	 cmp	 DWORD PTR _func$[ebp], 125 ; 0000007dH
  01fe8	75 77		 jne	 SHORT $LN171@SaDispatch

; 1107 : 	{
; 1108 : 		char data[16384];
; 1109 : 
; 1110 : 		iChecksum += util_destring(2,data);

  01fea	8d 85 2c bb f4
	ff		 lea	 eax, DWORD PTR _data$11[ebp]
  01ff0	50		 push	 eax
  01ff1	6a 02		 push	 2
  01ff3	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  01ff8	83 c4 08	 add	 esp, 8
  01ffb	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  01ffe	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1111 : 		util_deint(3,&iChecksumrecv);

  02001	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  02004	50		 push	 eax
  02005	6a 03		 push	 3
  02007	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0200c	83 c4 08	 add	 esp, 8

; 1112 : 		if(iChecksum != iChecksumrecv){

  0200f	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  02012	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  02015	74 11		 je	 SHORT $LN173@SaDispatch

; 1113 : 			SliceCount=0;

  02017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1114 : 			return 0;

  02021	33 c0		 xor	 eax, eax
  02023	e9 70 02 00 00	 jmp	 $LN1@SaDispatch
$LN173@SaDispatch:

; 1115 : 		}
; 1116 : 		LogToRecvdata(data);

  02028	8d 85 2c bb f4
	ff		 lea	 eax, DWORD PTR _data$11[ebp]
  0202e	50		 push	 eax
  0202f	e8 00 00 00 00	 call	 ?LogToRecvdata@@YAXPAD@Z ; LogToRecvdata
  02034	83 c4 04	 add	 esp, 4

; 1117 : 		lssproto_S2_recv(fd,data);

  02037	8d 85 2c bb f4
	ff		 lea	 eax, DWORD PTR _data$11[ebp]
  0203d	50		 push	 eax
  0203e	8b 4d 08	 mov	 ecx, DWORD PTR _fd$[ebp]
  02041	51		 push	 ecx
  02042	e8 00 00 00 00	 call	 ?lssproto_S2_recv@@YAXHPAD@Z ; lssproto_S2_recv
  02047	83 c4 08	 add	 esp, 8

; 1118 : 		SliceCount = 0;

  0204a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1119 : 		return func;

  02054	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  02057	e9 3c 02 00 00	 jmp	 $LN1@SaDispatch
  0205c	e9 2b 02 00 00	 jmp	 $LN4@SaDispatch
$LN171@SaDispatch:

; 1120 : 	}
; 1121 : #endif
; 1122 : #ifdef _ITEM_FIREWORK
; 1123 : 	else if (func == LSSPROTO_FIREWORK_RECV)

  02061	83 7d f4 7e	 cmp	 DWORD PTR _func$[ebp], 126 ; 0000007eH
  02065	0f 85 d8 00 00
	00		 jne	 $LN174@SaDispatch

; 1124 : 	{
; 1125 : 		int		iChecksum = 0, iChecksumrecv, iCharaindex, iType, iActionNum;

  0206b	c7 85 20 bb f4
	ff 00 00 00 00	 mov	 DWORD PTR _iChecksum$10[ebp], 0

; 1126 : 		char	szData[16384];
; 1127 : 
; 1128 : 		iChecksum += util_deint(2, &iCharaindex);

  02075	8d 85 08 bb f4
	ff		 lea	 eax, DWORD PTR _iCharaindex$8[ebp]
  0207b	50		 push	 eax
  0207c	6a 02		 push	 2
  0207e	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  02083	83 c4 08	 add	 esp, 8
  02086	03 85 20 bb f4
	ff		 add	 eax, DWORD PTR _iChecksum$10[ebp]
  0208c	89 85 20 bb f4
	ff		 mov	 DWORD PTR _iChecksum$10[ebp], eax

; 1129 : 		iChecksum += util_deint(3, &iType);

  02092	8d 85 fc ba f4
	ff		 lea	 eax, DWORD PTR _iType$7[ebp]
  02098	50		 push	 eax
  02099	6a 03		 push	 3
  0209b	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  020a0	83 c4 08	 add	 esp, 8
  020a3	03 85 20 bb f4
	ff		 add	 eax, DWORD PTR _iChecksum$10[ebp]
  020a9	89 85 20 bb f4
	ff		 mov	 DWORD PTR _iChecksum$10[ebp], eax

; 1130 : 		iChecksum += util_deint(4, &iActionNum);

  020af	8d 85 f0 ba f4
	ff		 lea	 eax, DWORD PTR _iActionNum$6[ebp]
  020b5	50		 push	 eax
  020b6	6a 04		 push	 4
  020b8	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  020bd	83 c4 08	 add	 esp, 8
  020c0	03 85 20 bb f4
	ff		 add	 eax, DWORD PTR _iChecksum$10[ebp]
  020c6	89 85 20 bb f4
	ff		 mov	 DWORD PTR _iChecksum$10[ebp], eax

; 1131 : 		util_deint(5, &iChecksumrecv);

  020cc	8d 85 14 bb f4
	ff		 lea	 eax, DWORD PTR _iChecksumrecv$9[ebp]
  020d2	50		 push	 eax
  020d3	6a 05		 push	 5
  020d5	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  020da	83 c4 08	 add	 esp, 8

; 1132 : 		if(iChecksum != iChecksumrecv){

  020dd	8b 85 20 bb f4
	ff		 mov	 eax, DWORD PTR _iChecksum$10[ebp]
  020e3	3b 85 14 bb f4
	ff		 cmp	 eax, DWORD PTR _iChecksumrecv$9[ebp]
  020e9	74 11		 je	 SHORT $LN176@SaDispatch

; 1133 : 			SliceCount = 0;

  020eb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1134 : 			return 0;

  020f5	33 c0		 xor	 eax, eax
  020f7	e9 9c 01 00 00	 jmp	 $LN1@SaDispatch
$LN176@SaDispatch:

; 1135 : 		}
; 1136 : 		LogToRecvdata(szData);

  020fc	8d 85 e8 7a f4
	ff		 lea	 eax, DWORD PTR _szData$5[ebp]
  02102	50		 push	 eax
  02103	e8 00 00 00 00	 call	 ?LogToRecvdata@@YAXPAD@Z ; LogToRecvdata
  02108	83 c4 04	 add	 esp, 4

; 1137 : 		lssproto_Firework_recv(fd, iCharaindex, iType, iActionNum);

  0210b	8b 85 f0 ba f4
	ff		 mov	 eax, DWORD PTR _iActionNum$6[ebp]
  02111	50		 push	 eax
  02112	8b 8d fc ba f4
	ff		 mov	 ecx, DWORD PTR _iType$7[ebp]
  02118	51		 push	 ecx
  02119	8b 95 08 bb f4
	ff		 mov	 edx, DWORD PTR _iCharaindex$8[ebp]
  0211f	52		 push	 edx
  02120	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  02123	50		 push	 eax
  02124	e8 00 00 00 00	 call	 ?lssproto_Firework_recv@@YAXHHHH@Z ; lssproto_Firework_recv
  02129	83 c4 10	 add	 esp, 16			; 00000010H

; 1138 : 		SliceCount = 0;

  0212c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1139 : 		return func;

  02136	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  02139	e9 5a 01 00 00	 jmp	 $LN1@SaDispatch
  0213e	e9 49 01 00 00	 jmp	 $LN4@SaDispatch
$LN174@SaDispatch:

; 1140 : 	}
; 1141 : #endif
; 1142 : 
; 1143 : #ifdef _GET_HOSTNAME
; 1144 : 	else if( func == LSSPROTO_HOSTNAME_RECV )

  02143	81 7d f4 82 00
	00 00		 cmp	 DWORD PTR _func$[ebp], 130 ; 00000082H
  0214a	75 61		 jne	 SHORT $LN177@SaDispatch

; 1145 : 	{
; 1146 : 		int		hostnametamp;
; 1147 : 
; 1148 : 		iChecksum += util_deint(2, &hostnametamp);

  0214c	8d 85 dc 7a f4
	ff		 lea	 eax, DWORD PTR _hostnametamp$4[ebp]
  02152	50		 push	 eax
  02153	6a 02		 push	 2
  02155	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0215a	83 c4 08	 add	 esp, 8
  0215d	03 45 dc	 add	 eax, DWORD PTR _iChecksum$[ebp]
  02160	89 45 dc	 mov	 DWORD PTR _iChecksum$[ebp], eax

; 1149 : 		util_deint(3, &iChecksumrecv);

  02163	8d 45 d0	 lea	 eax, DWORD PTR _iChecksumrecv$[ebp]
  02166	50		 push	 eax
  02167	6a 03		 push	 3
  02169	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  0216e	83 c4 08	 add	 esp, 8

; 1150 : 		if(iChecksum != iChecksumrecv){

  02171	8b 45 dc	 mov	 eax, DWORD PTR _iChecksum$[ebp]
  02174	3b 45 d0	 cmp	 eax, DWORD PTR _iChecksumrecv$[ebp]
  02177	74 11		 je	 SHORT $LN179@SaDispatch

; 1151 : 			SliceCount = 0;

  02179	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1152 : 			return 0;

  02183	33 c0		 xor	 eax, eax
  02185	e9 0e 01 00 00	 jmp	 $LN1@SaDispatch
$LN179@SaDispatch:

; 1153 : 		}
; 1154 : 		lssproto_HostName_send(fd);

  0218a	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  0218d	50		 push	 eax
  0218e	e8 00 00 00 00	 call	 ?lssproto_HostName_send@@YAXH@Z ; lssproto_HostName_send
  02193	83 c4 04	 add	 esp, 4

; 1155 : 		SliceCount = 0;

  02196	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1156 : 		return func;

  021a0	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  021a3	e9 f0 00 00 00	 jmp	 $LN1@SaDispatch
  021a8	e9 df 00 00 00	 jmp	 $LN4@SaDispatch
$LN177@SaDispatch:

; 1157 : 	}
; 1158 : #endif
; 1159 : #ifdef _NB_公告系统
; 1160 : 	else if( func == LSSPROTO_DENGON_RECV )

  021ad	81 7d f4 c8 00
	00 00		 cmp	 DWORD PTR _func$[ebp], 200 ; 000000c8H
  021b4	75 64		 jne	 SHORT $LN180@SaDispatch

; 1161 : 	{
; 1162 : 		char data[512];
; 1163 : 		int coloer;
; 1164 : 		int num;
; 1165 : 
; 1166 : 		util_destring(2, data);

  021b6	8d 85 d4 78 f4
	ff		 lea	 eax, DWORD PTR _data$3[ebp]
  021bc	50		 push	 eax
  021bd	6a 02		 push	 2
  021bf	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  021c4	83 c4 08	 add	 esp, 8

; 1167 : 		util_deint(3, &coloer);

  021c7	8d 85 c8 78 f4
	ff		 lea	 eax, DWORD PTR _coloer$2[ebp]
  021cd	50		 push	 eax
  021ce	6a 03		 push	 3
  021d0	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  021d5	83 c4 08	 add	 esp, 8

; 1168 : 		util_deint(4, &num);

  021d8	8d 85 bc 78 f4
	ff		 lea	 eax, DWORD PTR _num$1[ebp]
  021de	50		 push	 eax
  021df	6a 04		 push	 4
  021e1	e8 00 00 00 00	 call	 ?util_deint@@YAHHPAH@Z	; util_deint
  021e6	83 c4 08	 add	 esp, 8

; 1169 : 		lssproto_DENGON_recv(data, coloer, num);

  021e9	8b 85 bc 78 f4
	ff		 mov	 eax, DWORD PTR _num$1[ebp]
  021ef	50		 push	 eax
  021f0	8b 8d c8 78 f4
	ff		 mov	 ecx, DWORD PTR _coloer$2[ebp]
  021f6	51		 push	 ecx
  021f7	8d 95 d4 78 f4
	ff		 lea	 edx, DWORD PTR _data$3[ebp]
  021fd	52		 push	 edx
  021fe	e8 00 00 00 00	 call	 ?lssproto_DENGON_recv@@YAXPADHH@Z ; lssproto_DENGON_recv
  02203	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1170 : 		SliceCount = 0;

  02206	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1171 : 		return func;

  02210	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  02213	e9 80 00 00 00	 jmp	 $LN1@SaDispatch
  02218	eb 72		 jmp	 SHORT $LN4@SaDispatch
$LN180@SaDispatch:

; 1172 : 	}
; 1173 : #endif
; 1174 : #ifdef _NB_DIY_SEND
; 1175 : 	else if( func == LSSPROTO_SAMENU_RECV )

  0221a	81 7d f4 c9 00
	00 00		 cmp	 DWORD PTR _func$[ebp], 201 ; 000000c9H
  02221	75 45		 jne	 SHORT $LN182@SaDispatch

; 1176 : 	{
; 1177 : 		char data[512];
; 1178 : 		util_destring(2, data);

  02223	8d 85 b4 76 f4
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  02229	50		 push	 eax
  0222a	6a 02		 push	 2
  0222c	e8 00 00 00 00	 call	 ?util_destring@@YAHHPAD@Z ; util_destring
  02231	83 c4 08	 add	 esp, 8

; 1179 : 		ShellExecute(NULL,"open",data,NULL,NULL,SW_SHOWNORMAL);

  02234	8b f4		 mov	 esi, esp
  02236	6a 01		 push	 1
  02238	6a 00		 push	 0
  0223a	6a 00		 push	 0
  0223c	8d 85 b4 76 f4
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  02242	50		 push	 eax
  02243	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  02248	6a 00		 push	 0
  0224a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24
  02250	3b f4		 cmp	 esi, esp
  02252	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1180 : 		SliceCount = 0;

  02257	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1181 : 		return func;

  02261	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  02264	eb 32		 jmp	 SHORT $LN1@SaDispatch
  02266	eb 24		 jmp	 SHORT $LN4@SaDispatch
$LN182@SaDispatch:

; 1182 : 	}
; 1183 : #endif
; 1184 : #ifdef _NB_获取机器信息包
; 1185 : 	else if( func == LSSPROTO_GETINFO_RECV )

  02268	81 7d f4 d1 00
	00 00		 cmp	 DWORD PTR _func$[ebp], 209 ; 000000d1H
  0226f	75 1b		 jne	 SHORT $LN4@SaDispatch

; 1186 : 	{
; 1187 : 		lssproto_GetInfo_send(fd);

  02271	8b 45 08	 mov	 eax, DWORD PTR _fd$[ebp]
  02274	50		 push	 eax
  02275	e8 00 00 00 00	 call	 ?lssproto_GetInfo_send@@YAXH@Z ; lssproto_GetInfo_send
  0227a	83 c4 04	 add	 esp, 4

; 1188 : 		SliceCount = 0;

  0227d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount

; 1189 : 		return func;

  02287	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  0228a	eb 0c		 jmp	 SHORT $LN1@SaDispatch
$LN4@SaDispatch:

; 1190 : 	}
; 1191 : #endif
; 1192 : #ifdef _PK2007
; 1193 : 	else if( func == LSSPROTO_PKLIST_RECV )
; 1194 : 	{
; 1195 : 		int count;
; 1196 : 		char data[16384];
; 1197 : 		iChecksum += util_deint(2, &count);
; 1198 : 		iChecksum += util_destring(3, data);
; 1199 : 		util_deint(4, &iChecksumrecv);
; 1200 : 		if (iChecksum!=iChecksumrecv) {
; 1201 : 			SliceCount=0;
; 1202 : 			return 0;
; 1203 : 		}
; 1204 : 		lssproto_pkList_recv(fd, count, data);
; 1205 : 		SliceCount=0;
; 1206 : 		return func;
; 1207 : 	}
; 1208 : #endif
; 1209 : 	SliceCount=0;

  0228c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SliceCount@@3HA, 0 ; SliceCount
$LN2@SaDispatch:

; 1210 : 	}
; 1211 : 	return 0;

  02296	33 c0		 xor	 eax, eax
$LN1@SaDispatch:

; 1212 : }

  02298	52		 push	 edx
  02299	8b cd		 mov	 ecx, ebp
  0229b	50		 push	 eax
  0229c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN314@SaDispatch
  022a2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  022a7	58		 pop	 eax
  022a8	5a		 pop	 edx
  022a9	5f		 pop	 edi
  022aa	5e		 pop	 esi
  022ab	5b		 pop	 ebx
  022ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  022af	33 cd		 xor	 ecx, ebp
  022b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  022b6	81 c4 50 8f 0b
	00		 add	 esp, 757584		; 000b8f50H
  022bc	3b ec		 cmp	 ebp, esp
  022be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  022c3	8b e5		 mov	 esp, ebp
  022c5	5d		 pop	 ebp
  022c6	c3		 ret	 0
  022c7	90		 npad	 1
$LN314@SaDispatch:
  022c8	7f 00 00 00	 DD	 127			; 0000007fH
  022cc	00 00 00 00	 DD	 $LN313@SaDispatch
$LN313@SaDispatch:
  022d0	f4 ff ff ff	 DD	 -12			; fffffff4H
  022d4	04 00 00 00	 DD	 4
  022d8	00 00 00 00	 DD	 $LN186@SaDispatch
  022dc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  022e0	04 00 00 00	 DD	 4
  022e4	00 00 00 00	 DD	 $LN187@SaDispatch
  022e8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  022ec	04 00 00 00	 DD	 4
  022f0	00 00 00 00	 DD	 $LN188@SaDispatch
  022f4	c8 bf ff ff	 DD	 -16440			; ffffbfc8H
  022f8	00 40 00 00	 DD	 16384			; 00004000H
  022fc	00 00 00 00	 DD	 $LN189@SaDispatch
  02300	bc bf ff ff	 DD	 -16452			; ffffbfbcH
  02304	04 00 00 00	 DD	 4
  02308	00 00 00 00	 DD	 $LN190@SaDispatch
  0230c	b0 bf ff ff	 DD	 -16464			; ffffbfb0H
  02310	04 00 00 00	 DD	 4
  02314	00 00 00 00	 DD	 $LN191@SaDispatch
  02318	a4 bf ff ff	 DD	 -16476			; ffffbfa4H
  0231c	04 00 00 00	 DD	 4
  02320	00 00 00 00	 DD	 $LN192@SaDispatch
  02324	98 bf ff ff	 DD	 -16488			; ffffbf98H
  02328	04 00 00 00	 DD	 4
  0232c	00 00 00 00	 DD	 $LN193@SaDispatch
  02330	8c bf ff ff	 DD	 -16500			; ffffbf8cH
  02334	04 00 00 00	 DD	 4
  02338	00 00 00 00	 DD	 $LN194@SaDispatch
  0233c	80 bf ff ff	 DD	 -16512			; ffffbf80H
  02340	04 00 00 00	 DD	 4
  02344	00 00 00 00	 DD	 $LN195@SaDispatch
  02348	74 bf ff ff	 DD	 -16524			; ffffbf74H
  0234c	04 00 00 00	 DD	 4
  02350	00 00 00 00	 DD	 $LN196@SaDispatch
  02354	6c 7f ff ff	 DD	 -32916			; ffff7f6cH
  02358	00 40 00 00	 DD	 16384			; 00004000H
  0235c	00 00 00 00	 DD	 $LN197@SaDispatch
  02360	64 3f ff ff	 DD	 -49308			; ffff3f64H
  02364	00 40 00 00	 DD	 16384			; 00004000H
  02368	00 00 00 00	 DD	 $LN198@SaDispatch
  0236c	5c ff fe ff	 DD	 -65700			; fffeff5cH
  02370	00 40 00 00	 DD	 16384			; 00004000H
  02374	00 00 00 00	 DD	 $LN199@SaDispatch
  02378	54 bf fe ff	 DD	 -82092			; fffebf54H
  0237c	00 40 00 00	 DD	 16384			; 00004000H
  02380	00 00 00 00	 DD	 $LN200@SaDispatch
  02384	48 bf fe ff	 DD	 -82104			; fffebf48H
  02388	04 00 00 00	 DD	 4
  0238c	00 00 00 00	 DD	 $LN201@SaDispatch
  02390	3c bf fe ff	 DD	 -82116			; fffebf3cH
  02394	04 00 00 00	 DD	 4
  02398	00 00 00 00	 DD	 $LN202@SaDispatch
  0239c	30 bf fe ff	 DD	 -82128			; fffebf30H
  023a0	04 00 00 00	 DD	 4
  023a4	00 00 00 00	 DD	 $LN203@SaDispatch
  023a8	28 7f fe ff	 DD	 -98520			; fffe7f28H
  023ac	00 40 00 00	 DD	 16384			; 00004000H
  023b0	00 00 00 00	 DD	 $LN204@SaDispatch
  023b4	1c 7f fe ff	 DD	 -98532			; fffe7f1cH
  023b8	04 00 00 00	 DD	 4
  023bc	00 00 00 00	 DD	 $LN205@SaDispatch
  023c0	10 7f fe ff	 DD	 -98544			; fffe7f10H
  023c4	04 00 00 00	 DD	 4
  023c8	00 00 00 00	 DD	 $LN206@SaDispatch
  023cc	04 7f fe ff	 DD	 -98556			; fffe7f04H
  023d0	04 00 00 00	 DD	 4
  023d4	00 00 00 00	 DD	 $LN207@SaDispatch
  023d8	f8 7e fe ff	 DD	 -98568			; fffe7ef8H
  023dc	04 00 00 00	 DD	 4
  023e0	00 00 00 00	 DD	 $LN208@SaDispatch
  023e4	ec 7e fe ff	 DD	 -98580			; fffe7eecH
  023e8	04 00 00 00	 DD	 4
  023ec	00 00 00 00	 DD	 $LN209@SaDispatch
  023f0	e0 7e fe ff	 DD	 -98592			; fffe7ee0H
  023f4	04 00 00 00	 DD	 4
  023f8	00 00 00 00	 DD	 $LN210@SaDispatch
  023fc	d4 7e fe ff	 DD	 -98604			; fffe7ed4H
  02400	04 00 00 00	 DD	 4
  02404	00 00 00 00	 DD	 $LN211@SaDispatch
  02408	c8 7e fe ff	 DD	 -98616			; fffe7ec8H
  0240c	04 00 00 00	 DD	 4
  02410	00 00 00 00	 DD	 $LN212@SaDispatch
  02414	c0 3e fe ff	 DD	 -115008			; fffe3ec0H
  02418	00 40 00 00	 DD	 16384			; 00004000H
  0241c	00 00 00 00	 DD	 $LN213@SaDispatch
  02420	b8 fe fd ff	 DD	 -131400			; fffdfeb8H
  02424	00 40 00 00	 DD	 16384			; 00004000H
  02428	00 00 00 00	 DD	 $LN214@SaDispatch
  0242c	ac fe fd ff	 DD	 -131412			; fffdfeacH
  02430	04 00 00 00	 DD	 4
  02434	00 00 00 00	 DD	 $LN215@SaDispatch
  02438	a4 be fd ff	 DD	 -147804			; fffdbea4H
  0243c	00 40 00 00	 DD	 16384			; 00004000H
  02440	00 00 00 00	 DD	 $LN216@SaDispatch
  02444	98 be fd ff	 DD	 -147816			; fffdbe98H
  02448	04 00 00 00	 DD	 4
  0244c	00 00 00 00	 DD	 $LN217@SaDispatch
  02450	90 7e fd ff	 DD	 -164208			; fffd7e90H
  02454	00 40 00 00	 DD	 16384			; 00004000H
  02458	00 00 00 00	 DD	 $LN218@SaDispatch
  0245c	84 7e fd ff	 DD	 -164220			; fffd7e84H
  02460	04 00 00 00	 DD	 4
  02464	00 00 00 00	 DD	 $LN219@SaDispatch
  02468	78 7e fd ff	 DD	 -164232			; fffd7e78H
  0246c	04 00 00 00	 DD	 4
  02470	00 00 00 00	 DD	 $LN220@SaDispatch
  02474	6c 7e fd ff	 DD	 -164244			; fffd7e6cH
  02478	04 00 00 00	 DD	 4
  0247c	00 00 00 00	 DD	 $LN221@SaDispatch
  02480	60 7e fd ff	 DD	 -164256			; fffd7e60H
  02484	04 00 00 00	 DD	 4
  02488	00 00 00 00	 DD	 $LN222@SaDispatch
  0248c	54 7e fd ff	 DD	 -164268			; fffd7e54H
  02490	04 00 00 00	 DD	 4
  02494	00 00 00 00	 DD	 $LN223@SaDispatch
  02498	48 7e fd ff	 DD	 -164280			; fffd7e48H
  0249c	04 00 00 00	 DD	 4
  024a0	00 00 00 00	 DD	 $LN224@SaDispatch
  024a4	3c 7e fd ff	 DD	 -164292			; fffd7e3cH
  024a8	04 00 00 00	 DD	 4
  024ac	00 00 00 00	 DD	 $LN225@SaDispatch
  024b0	30 7e fd ff	 DD	 -164304			; fffd7e30H
  024b4	04 00 00 00	 DD	 4
  024b8	00 00 00 00	 DD	 $LN226@SaDispatch
  024bc	24 7e fd ff	 DD	 -164316			; fffd7e24H
  024c0	04 00 00 00	 DD	 4
  024c4	00 00 00 00	 DD	 $LN227@SaDispatch
  024c8	1c 3e fd ff	 DD	 -180708			; fffd3e1cH
  024cc	00 40 00 00	 DD	 16384			; 00004000H
  024d0	00 00 00 00	 DD	 $LN228@SaDispatch
  024d4	10 3e fd ff	 DD	 -180720			; fffd3e10H
  024d8	04 00 00 00	 DD	 4
  024dc	00 00 00 00	 DD	 $LN229@SaDispatch
  024e0	04 3e fd ff	 DD	 -180732			; fffd3e04H
  024e4	04 00 00 00	 DD	 4
  024e8	00 00 00 00	 DD	 $LN230@SaDispatch
  024ec	f8 3d fd ff	 DD	 -180744			; fffd3df8H
  024f0	04 00 00 00	 DD	 4
  024f4	00 00 00 00	 DD	 $LN231@SaDispatch
  024f8	ec 3d fd ff	 DD	 -180756			; fffd3decH
  024fc	04 00 00 00	 DD	 4
  02500	00 00 00 00	 DD	 $LN232@SaDispatch
  02504	e0 3d fd ff	 DD	 -180768			; fffd3de0H
  02508	04 00 00 00	 DD	 4
  0250c	00 00 00 00	 DD	 $LN233@SaDispatch
  02510	d8 fd fc ff	 DD	 -197160			; fffcfdd8H
  02514	00 40 00 00	 DD	 16384			; 00004000H
  02518	00 00 00 00	 DD	 $LN234@SaDispatch
  0251c	d0 bd fc ff	 DD	 -213552			; fffcbdd0H
  02520	00 40 00 00	 DD	 16384			; 00004000H
  02524	00 00 00 00	 DD	 $LN235@SaDispatch
  02528	c8 7d fc ff	 DD	 -229944			; fffc7dc8H
  0252c	00 40 00 00	 DD	 16384			; 00004000H
  02530	00 00 00 00	 DD	 $LN236@SaDispatch
  02534	c0 3d fc ff	 DD	 -246336			; fffc3dc0H
  02538	00 40 00 00	 DD	 16384			; 00004000H
  0253c	00 00 00 00	 DD	 $LN237@SaDispatch
  02540	b8 fd fb ff	 DD	 -262728			; fffbfdb8H
  02544	00 40 00 00	 DD	 16384			; 00004000H
  02548	00 00 00 00	 DD	 $LN238@SaDispatch
  0254c	b0 bd fb ff	 DD	 -279120			; fffbbdb0H
  02550	00 40 00 00	 DD	 16384			; 00004000H
  02554	00 00 00 00	 DD	 $LN239@SaDispatch
  02558	a4 bd fb ff	 DD	 -279132			; fffbbda4H
  0255c	04 00 00 00	 DD	 4
  02560	00 00 00 00	 DD	 $LN240@SaDispatch
  02564	98 bd fb ff	 DD	 -279144			; fffbbd98H
  02568	04 00 00 00	 DD	 4
  0256c	00 00 00 00	 DD	 $LN241@SaDispatch
  02570	8c bd fb ff	 DD	 -279156			; fffbbd8cH
  02574	04 00 00 00	 DD	 4
  02578	00 00 00 00	 DD	 $LN242@SaDispatch
  0257c	84 7d fb ff	 DD	 -295548			; fffb7d84H
  02580	00 40 00 00	 DD	 16384			; 00004000H
  02584	00 00 00 00	 DD	 $LN243@SaDispatch
  02588	78 7d fb ff	 DD	 -295560			; fffb7d78H
  0258c	04 00 00 00	 DD	 4
  02590	00 00 00 00	 DD	 $LN244@SaDispatch
  02594	6c 7d fb ff	 DD	 -295572			; fffb7d6cH
  02598	04 00 00 00	 DD	 4
  0259c	00 00 00 00	 DD	 $LN245@SaDispatch
  025a0	60 7d fb ff	 DD	 -295584			; fffb7d60H
  025a4	04 00 00 00	 DD	 4
  025a8	00 00 00 00	 DD	 $LN246@SaDispatch
  025ac	54 7d fb ff	 DD	 -295596			; fffb7d54H
  025b0	04 00 00 00	 DD	 4
  025b4	00 00 00 00	 DD	 $LN247@SaDispatch
  025b8	48 7d fb ff	 DD	 -295608			; fffb7d48H
  025bc	04 00 00 00	 DD	 4
  025c0	00 00 00 00	 DD	 $LN248@SaDispatch
  025c4	3c 7d fb ff	 DD	 -295620			; fffb7d3cH
  025c8	04 00 00 00	 DD	 4
  025cc	00 00 00 00	 DD	 $LN249@SaDispatch
  025d0	30 7d fb ff	 DD	 -295632			; fffb7d30H
  025d4	04 00 00 00	 DD	 4
  025d8	00 00 00 00	 DD	 $LN250@SaDispatch
  025dc	24 7d fb ff	 DD	 -295644			; fffb7d24H
  025e0	04 00 00 00	 DD	 4
  025e4	00 00 00 00	 DD	 $LN251@SaDispatch
  025e8	18 7d fb ff	 DD	 -295656			; fffb7d18H
  025ec	04 00 00 00	 DD	 4
  025f0	00 00 00 00	 DD	 $LN252@SaDispatch
  025f4	0c 7d fb ff	 DD	 -295668			; fffb7d0cH
  025f8	04 00 00 00	 DD	 4
  025fc	00 00 00 00	 DD	 $LN253@SaDispatch
  02600	00 7d fb ff	 DD	 -295680			; fffb7d00H
  02604	04 00 00 00	 DD	 4
  02608	00 00 00 00	 DD	 $LN254@SaDispatch
  0260c	f4 7c fb ff	 DD	 -295692			; fffb7cf4H
  02610	04 00 00 00	 DD	 4
  02614	00 00 00 00	 DD	 $LN255@SaDispatch
  02618	e8 7c fb ff	 DD	 -295704			; fffb7ce8H
  0261c	04 00 00 00	 DD	 4
  02620	00 00 00 00	 DD	 $LN256@SaDispatch
  02624	dc 7c fb ff	 DD	 -295716			; fffb7cdcH
  02628	04 00 00 00	 DD	 4
  0262c	00 00 00 00	 DD	 $LN257@SaDispatch
  02630	d0 7c fb ff	 DD	 -295728			; fffb7cd0H
  02634	04 00 00 00	 DD	 4
  02638	00 00 00 00	 DD	 $LN258@SaDispatch
  0263c	c4 7c fb ff	 DD	 -295740			; fffb7cc4H
  02640	04 00 00 00	 DD	 4
  02644	00 00 00 00	 DD	 $LN259@SaDispatch
  02648	b8 7c fb ff	 DD	 -295752			; fffb7cb8H
  0264c	04 00 00 00	 DD	 4
  02650	00 00 00 00	 DD	 $LN260@SaDispatch
  02654	ac 7c fb ff	 DD	 -295764			; fffb7cacH
  02658	04 00 00 00	 DD	 4
  0265c	00 00 00 00	 DD	 $LN261@SaDispatch
  02660	a0 7c fb ff	 DD	 -295776			; fffb7ca0H
  02664	04 00 00 00	 DD	 4
  02668	00 00 00 00	 DD	 $LN262@SaDispatch
  0266c	98 3c fb ff	 DD	 -312168			; fffb3c98H
  02670	00 40 00 00	 DD	 16384			; 00004000H
  02674	00 00 00 00	 DD	 $LN263@SaDispatch
  02678	8c 3c fb ff	 DD	 -312180			; fffb3c8cH
  0267c	04 00 00 00	 DD	 4
  02680	00 00 00 00	 DD	 $LN264@SaDispatch
  02684	80 3c fb ff	 DD	 -312192			; fffb3c80H
  02688	04 00 00 00	 DD	 4
  0268c	00 00 00 00	 DD	 $LN265@SaDispatch
  02690	78 fc fa ff	 DD	 -328584			; fffafc78H
  02694	00 40 00 00	 DD	 16384			; 00004000H
  02698	00 00 00 00	 DD	 $LN266@SaDispatch
  0269c	6c fc fa ff	 DD	 -328596			; fffafc6cH
  026a0	04 00 00 00	 DD	 4
  026a4	00 00 00 00	 DD	 $LN267@SaDispatch
  026a8	60 fc fa ff	 DD	 -328608			; fffafc60H
  026ac	04 00 00 00	 DD	 4
  026b0	00 00 00 00	 DD	 $LN268@SaDispatch
  026b4	54 fc fa ff	 DD	 -328620			; fffafc54H
  026b8	04 00 00 00	 DD	 4
  026bc	00 00 00 00	 DD	 $LN269@SaDispatch
  026c0	48 fc fa ff	 DD	 -328632			; fffafc48H
  026c4	04 00 00 00	 DD	 4
  026c8	00 00 00 00	 DD	 $LN270@SaDispatch
  026cc	40 bc fa ff	 DD	 -345024			; fffabc40H
  026d0	00 40 00 00	 DD	 16384			; 00004000H
  026d4	00 00 00 00	 DD	 $LN271@SaDispatch
  026d8	38 7c fa ff	 DD	 -361416			; fffa7c38H
  026dc	00 40 00 00	 DD	 16384			; 00004000H
  026e0	00 00 00 00	 DD	 $LN272@SaDispatch
  026e4	30 3c fa ff	 DD	 -377808			; fffa3c30H
  026e8	00 40 00 00	 DD	 16384			; 00004000H
  026ec	00 00 00 00	 DD	 $LN273@SaDispatch
  026f0	28 fc f9 ff	 DD	 -394200			; fff9fc28H
  026f4	00 40 00 00	 DD	 16384			; 00004000H
  026f8	00 00 00 00	 DD	 $LN274@SaDispatch
  026fc	20 bc f9 ff	 DD	 -410592			; fff9bc20H
  02700	00 40 00 00	 DD	 16384			; 00004000H
  02704	00 00 00 00	 DD	 $LN275@SaDispatch
  02708	18 7c f9 ff	 DD	 -426984			; fff97c18H
  0270c	00 40 00 00	 DD	 16384			; 00004000H
  02710	00 00 00 00	 DD	 $LN276@SaDispatch
  02714	10 3c f9 ff	 DD	 -443376			; fff93c10H
  02718	00 40 00 00	 DD	 16384			; 00004000H
  0271c	00 00 00 00	 DD	 $LN277@SaDispatch
  02720	08 fc f8 ff	 DD	 -459768			; fff8fc08H
  02724	00 40 00 00	 DD	 16384			; 00004000H
  02728	00 00 00 00	 DD	 $LN278@SaDispatch
  0272c	00 bc f8 ff	 DD	 -476160			; fff8bc00H
  02730	00 40 00 00	 DD	 16384			; 00004000H
  02734	00 00 00 00	 DD	 $LN279@SaDispatch
  02738	f8 7b f8 ff	 DD	 -492552			; fff87bf8H
  0273c	00 40 00 00	 DD	 16384			; 00004000H
  02740	00 00 00 00	 DD	 $LN280@SaDispatch
  02744	f0 3b f8 ff	 DD	 -508944			; fff83bf0H
  02748	00 40 00 00	 DD	 16384			; 00004000H
  0274c	00 00 00 00	 DD	 $LN281@SaDispatch
  02750	e8 fb f7 ff	 DD	 -525336			; fff7fbe8H
  02754	00 40 00 00	 DD	 16384			; 00004000H
  02758	00 00 00 00	 DD	 $LN282@SaDispatch
  0275c	dc fb f7 ff	 DD	 -525348			; fff7fbdcH
  02760	04 00 00 00	 DD	 4
  02764	00 00 00 00	 DD	 $LN283@SaDispatch
  02768	d0 fb f7 ff	 DD	 -525360			; fff7fbd0H
  0276c	04 00 00 00	 DD	 4
  02770	00 00 00 00	 DD	 $LN284@SaDispatch
  02774	c8 bb f7 ff	 DD	 -541752			; fff7bbc8H
  02778	00 40 00 00	 DD	 16384			; 00004000H
  0277c	00 00 00 00	 DD	 $LN285@SaDispatch
  02780	bc bb f7 ff	 DD	 -541764			; fff7bbbcH
  02784	04 00 00 00	 DD	 4
  02788	00 00 00 00	 DD	 $LN286@SaDispatch
  0278c	b4 7b f7 ff	 DD	 -558156			; fff77bb4H
  02790	00 40 00 00	 DD	 16384			; 00004000H
  02794	00 00 00 00	 DD	 $LN287@SaDispatch
  02798	ac 3b f7 ff	 DD	 -574548			; fff73bacH
  0279c	00 40 00 00	 DD	 16384			; 00004000H
  027a0	00 00 00 00	 DD	 $LN288@SaDispatch
  027a4	a0 3b f7 ff	 DD	 -574560			; fff73ba0H
  027a8	04 00 00 00	 DD	 4
  027ac	00 00 00 00	 DD	 $LN289@SaDispatch
  027b0	94 3b f7 ff	 DD	 -574572			; fff73b94H
  027b4	04 00 00 00	 DD	 4
  027b8	00 00 00 00	 DD	 $LN290@SaDispatch
  027bc	88 3b f7 ff	 DD	 -574584			; fff73b88H
  027c0	04 00 00 00	 DD	 4
  027c4	00 00 00 00	 DD	 $LN291@SaDispatch
  027c8	80 fb f6 ff	 DD	 -590976			; fff6fb80H
  027cc	00 40 00 00	 DD	 16384			; 00004000H
  027d0	00 00 00 00	 DD	 $LN292@SaDispatch
  027d4	78 bb f6 ff	 DD	 -607368			; fff6bb78H
  027d8	00 40 00 00	 DD	 16384			; 00004000H
  027dc	00 00 00 00	 DD	 $LN293@SaDispatch
  027e0	70 7b f6 ff	 DD	 -623760			; fff67b70H
  027e4	00 40 00 00	 DD	 16384			; 00004000H
  027e8	00 00 00 00	 DD	 $LN294@SaDispatch
  027ec	68 3b f6 ff	 DD	 -640152			; fff63b68H
  027f0	00 40 00 00	 DD	 16384			; 00004000H
  027f4	00 00 00 00	 DD	 $LN295@SaDispatch
  027f8	60 fb f5 ff	 DD	 -656544			; fff5fb60H
  027fc	00 40 00 00	 DD	 16384			; 00004000H
  02800	00 00 00 00	 DD	 $LN296@SaDispatch
  02804	58 bb f5 ff	 DD	 -672936			; fff5bb58H
  02808	00 40 00 00	 DD	 16384			; 00004000H
  0280c	00 00 00 00	 DD	 $LN297@SaDispatch
  02810	4c bb f5 ff	 DD	 -672948			; fff5bb4cH
  02814	04 00 00 00	 DD	 4
  02818	00 00 00 00	 DD	 $LN298@SaDispatch
  0281c	44 7b f5 ff	 DD	 -689340			; fff57b44H
  02820	00 40 00 00	 DD	 16384			; 00004000H
  02824	00 00 00 00	 DD	 $LN299@SaDispatch
  02828	3c 3b f5 ff	 DD	 -705732			; fff53b3cH
  0282c	00 40 00 00	 DD	 16384			; 00004000H
  02830	00 00 00 00	 DD	 $LN300@SaDispatch
  02834	34 fb f4 ff	 DD	 -722124			; fff4fb34H
  02838	00 40 00 00	 DD	 16384			; 00004000H
  0283c	00 00 00 00	 DD	 $LN301@SaDispatch
  02840	2c bb f4 ff	 DD	 -738516			; fff4bb2cH
  02844	00 40 00 00	 DD	 16384			; 00004000H
  02848	00 00 00 00	 DD	 $LN302@SaDispatch
  0284c	14 bb f4 ff	 DD	 -738540			; fff4bb14H
  02850	04 00 00 00	 DD	 4
  02854	00 00 00 00	 DD	 $LN303@SaDispatch
  02858	08 bb f4 ff	 DD	 -738552			; fff4bb08H
  0285c	04 00 00 00	 DD	 4
  02860	00 00 00 00	 DD	 $LN304@SaDispatch
  02864	fc ba f4 ff	 DD	 -738564			; fff4bafcH
  02868	04 00 00 00	 DD	 4
  0286c	00 00 00 00	 DD	 $LN305@SaDispatch
  02870	f0 ba f4 ff	 DD	 -738576			; fff4baf0H
  02874	04 00 00 00	 DD	 4
  02878	00 00 00 00	 DD	 $LN306@SaDispatch
  0287c	e8 7a f4 ff	 DD	 -754968			; fff47ae8H
  02880	00 40 00 00	 DD	 16384			; 00004000H
  02884	00 00 00 00	 DD	 $LN307@SaDispatch
  02888	dc 7a f4 ff	 DD	 -754980			; fff47adcH
  0288c	04 00 00 00	 DD	 4
  02890	00 00 00 00	 DD	 $LN308@SaDispatch
  02894	d4 78 f4 ff	 DD	 -755500			; fff478d4H
  02898	00 02 00 00	 DD	 512			; 00000200H
  0289c	00 00 00 00	 DD	 $LN309@SaDispatch
  028a0	c8 78 f4 ff	 DD	 -755512			; fff478c8H
  028a4	04 00 00 00	 DD	 4
  028a8	00 00 00 00	 DD	 $LN310@SaDispatch
  028ac	bc 78 f4 ff	 DD	 -755524			; fff478bcH
  028b0	04 00 00 00	 DD	 4
  028b4	00 00 00 00	 DD	 $LN311@SaDispatch
  028b8	b4 76 f4 ff	 DD	 -756044			; fff476b4H
  028bc	00 02 00 00	 DD	 512			; 00000200H
  028c0	00 00 00 00	 DD	 $LN312@SaDispatch
$LN312@SaDispatch:
  028c4	64		 DB	 100			; 00000064H
  028c5	61		 DB	 97			; 00000061H
  028c6	74		 DB	 116			; 00000074H
  028c7	61		 DB	 97			; 00000061H
  028c8	00		 DB	 0
$LN311@SaDispatch:
  028c9	6e		 DB	 110			; 0000006eH
  028ca	75		 DB	 117			; 00000075H
  028cb	6d		 DB	 109			; 0000006dH
  028cc	00		 DB	 0
$LN310@SaDispatch:
  028cd	63		 DB	 99			; 00000063H
  028ce	6f		 DB	 111			; 0000006fH
  028cf	6c		 DB	 108			; 0000006cH
  028d0	6f		 DB	 111			; 0000006fH
  028d1	65		 DB	 101			; 00000065H
  028d2	72		 DB	 114			; 00000072H
  028d3	00		 DB	 0
$LN309@SaDispatch:
  028d4	64		 DB	 100			; 00000064H
  028d5	61		 DB	 97			; 00000061H
  028d6	74		 DB	 116			; 00000074H
  028d7	61		 DB	 97			; 00000061H
  028d8	00		 DB	 0
$LN308@SaDispatch:
  028d9	68		 DB	 104			; 00000068H
  028da	6f		 DB	 111			; 0000006fH
  028db	73		 DB	 115			; 00000073H
  028dc	74		 DB	 116			; 00000074H
  028dd	6e		 DB	 110			; 0000006eH
  028de	61		 DB	 97			; 00000061H
  028df	6d		 DB	 109			; 0000006dH
  028e0	65		 DB	 101			; 00000065H
  028e1	74		 DB	 116			; 00000074H
  028e2	61		 DB	 97			; 00000061H
  028e3	6d		 DB	 109			; 0000006dH
  028e4	70		 DB	 112			; 00000070H
  028e5	00		 DB	 0
$LN307@SaDispatch:
  028e6	73		 DB	 115			; 00000073H
  028e7	7a		 DB	 122			; 0000007aH
  028e8	44		 DB	 68			; 00000044H
  028e9	61		 DB	 97			; 00000061H
  028ea	74		 DB	 116			; 00000074H
  028eb	61		 DB	 97			; 00000061H
  028ec	00		 DB	 0
$LN306@SaDispatch:
  028ed	69		 DB	 105			; 00000069H
  028ee	41		 DB	 65			; 00000041H
  028ef	63		 DB	 99			; 00000063H
  028f0	74		 DB	 116			; 00000074H
  028f1	69		 DB	 105			; 00000069H
  028f2	6f		 DB	 111			; 0000006fH
  028f3	6e		 DB	 110			; 0000006eH
  028f4	4e		 DB	 78			; 0000004eH
  028f5	75		 DB	 117			; 00000075H
  028f6	6d		 DB	 109			; 0000006dH
  028f7	00		 DB	 0
$LN305@SaDispatch:
  028f8	69		 DB	 105			; 00000069H
  028f9	54		 DB	 84			; 00000054H
  028fa	79		 DB	 121			; 00000079H
  028fb	70		 DB	 112			; 00000070H
  028fc	65		 DB	 101			; 00000065H
  028fd	00		 DB	 0
$LN304@SaDispatch:
  028fe	69		 DB	 105			; 00000069H
  028ff	43		 DB	 67			; 00000043H
  02900	68		 DB	 104			; 00000068H
  02901	61		 DB	 97			; 00000061H
  02902	72		 DB	 114			; 00000072H
  02903	61		 DB	 97			; 00000061H
  02904	69		 DB	 105			; 00000069H
  02905	6e		 DB	 110			; 0000006eH
  02906	64		 DB	 100			; 00000064H
  02907	65		 DB	 101			; 00000065H
  02908	78		 DB	 120			; 00000078H
  02909	00		 DB	 0
$LN303@SaDispatch:
  0290a	69		 DB	 105			; 00000069H
  0290b	43		 DB	 67			; 00000043H
  0290c	68		 DB	 104			; 00000068H
  0290d	65		 DB	 101			; 00000065H
  0290e	63		 DB	 99			; 00000063H
  0290f	6b		 DB	 107			; 0000006bH
  02910	73		 DB	 115			; 00000073H
  02911	75		 DB	 117			; 00000075H
  02912	6d		 DB	 109			; 0000006dH
  02913	72		 DB	 114			; 00000072H
  02914	65		 DB	 101			; 00000065H
  02915	63		 DB	 99			; 00000063H
  02916	76		 DB	 118			; 00000076H
  02917	00		 DB	 0
$LN302@SaDispatch:
  02918	64		 DB	 100			; 00000064H
  02919	61		 DB	 97			; 00000061H
  0291a	74		 DB	 116			; 00000074H
  0291b	61		 DB	 97			; 00000061H
  0291c	00		 DB	 0
$LN301@SaDispatch:
  0291d	64		 DB	 100			; 00000064H
  0291e	61		 DB	 97			; 00000061H
  0291f	74		 DB	 116			; 00000074H
  02920	61		 DB	 97			; 00000061H
  02921	00		 DB	 0
$LN300@SaDispatch:
  02922	64		 DB	 100			; 00000064H
  02923	61		 DB	 97			; 00000061H
  02924	74		 DB	 116			; 00000074H
  02925	61		 DB	 97			; 00000061H
  02926	00		 DB	 0
$LN299@SaDispatch:
  02927	64		 DB	 100			; 00000064H
  02928	61		 DB	 97			; 00000061H
  02929	74		 DB	 116			; 00000074H
  0292a	61		 DB	 97			; 00000061H
  0292b	00		 DB	 0
$LN298@SaDispatch:
  0292c	65		 DB	 101			; 00000065H
  0292d	66		 DB	 102			; 00000066H
  0292e	66		 DB	 102			; 00000066H
  0292f	65		 DB	 101			; 00000065H
  02930	63		 DB	 99			; 00000063H
  02931	74		 DB	 116			; 00000074H
  02932	00		 DB	 0
$LN297@SaDispatch:
  02933	64		 DB	 100			; 00000064H
  02934	61		 DB	 97			; 00000061H
  02935	74		 DB	 116			; 00000074H
  02936	61		 DB	 97			; 00000061H
  02937	00		 DB	 0
$LN296@SaDispatch:
  02938	64		 DB	 100			; 00000064H
  02939	61		 DB	 97			; 00000061H
  0293a	74		 DB	 116			; 00000074H
  0293b	61		 DB	 97			; 00000061H
  0293c	00		 DB	 0
$LN295@SaDispatch:
  0293d	64		 DB	 100			; 00000064H
  0293e	61		 DB	 97			; 00000061H
  0293f	74		 DB	 116			; 00000074H
  02940	61		 DB	 97			; 00000061H
  02941	00		 DB	 0
$LN294@SaDispatch:
  02942	64		 DB	 100			; 00000064H
  02943	61		 DB	 97			; 00000061H
  02944	74		 DB	 116			; 00000074H
  02945	61		 DB	 97			; 00000061H
  02946	00		 DB	 0
$LN293@SaDispatch:
  02947	64		 DB	 100			; 00000064H
  02948	61		 DB	 97			; 00000061H
  02949	74		 DB	 116			; 00000074H
  0294a	61		 DB	 97			; 00000061H
  0294b	00		 DB	 0
$LN292@SaDispatch:
  0294c	64		 DB	 100			; 00000064H
  0294d	61		 DB	 97			; 00000061H
  0294e	74		 DB	 116			; 00000074H
  0294f	61		 DB	 97			; 00000061H
  02950	00		 DB	 0
$LN291@SaDispatch:
  02951	66		 DB	 102			; 00000066H
  02952	6c		 DB	 108			; 0000006cH
  02953	67		 DB	 103			; 00000067H
  02954	00		 DB	 0
$LN290@SaDispatch:
  02955	79		 DB	 121			; 00000079H
  02956	00		 DB	 0
$LN289@SaDispatch:
  02957	78		 DB	 120			; 00000078H
  02958	00		 DB	 0
$LN288@SaDispatch:
  02959	64		 DB	 100			; 00000064H
  0295a	61		 DB	 97			; 00000061H
  0295b	74		 DB	 116			; 00000074H
  0295c	61		 DB	 97			; 00000061H
  0295d	00		 DB	 0
$LN287@SaDispatch:
  0295e	64		 DB	 100			; 00000064H
  0295f	61		 DB	 97			; 00000061H
  02960	74		 DB	 116			; 00000074H
  02961	61		 DB	 97			; 00000061H
  02962	00		 DB	 0
$LN286@SaDispatch:
  02963	41		 DB	 65			; 00000041H
  02964	64		 DB	 100			; 00000064H
  02965	64		 DB	 100			; 00000064H
  02966	43		 DB	 67			; 00000043H
  02967	6f		 DB	 111			; 0000006fH
  02968	75		 DB	 117			; 00000075H
  02969	6e		 DB	 110			; 0000006eH
  0296a	74		 DB	 116			; 00000074H
  0296b	00		 DB	 0
$LN285@SaDispatch:
  0296c	74		 DB	 116			; 00000074H
  0296d	65		 DB	 101			; 00000065H
  0296e	73		 DB	 115			; 00000073H
  0296f	74		 DB	 116			; 00000074H
  02970	00		 DB	 0
$LN284@SaDispatch:
  02971	70		 DB	 112			; 00000070H
  02972	6c		 DB	 108			; 0000006cH
  02973	61		 DB	 97			; 00000061H
  02974	79		 DB	 121			; 00000079H
  02975	65		 DB	 101			; 00000065H
  02976	72		 DB	 114			; 00000072H
  02977	00		 DB	 0
$LN283@SaDispatch:
  02978	6c		 DB	 108			; 0000006cH
  02979	6f		 DB	 111			; 0000006fH
  0297a	67		 DB	 103			; 00000067H
  0297b	69		 DB	 105			; 00000069H
  0297c	6e		 DB	 110			; 0000006eH
  0297d	63		 DB	 99			; 00000063H
  0297e	6f		 DB	 111			; 0000006fH
  0297f	75		 DB	 117			; 00000075H
  02980	6e		 DB	 110			; 0000006eH
  02981	74		 DB	 116			; 00000074H
  02982	00		 DB	 0
$LN282@SaDispatch:
  02983	64		 DB	 100			; 00000064H
  02984	61		 DB	 97			; 00000061H
  02985	74		 DB	 116			; 00000074H
  02986	61		 DB	 97			; 00000061H
  02987	00		 DB	 0
$LN281@SaDispatch:
  02988	64		 DB	 100			; 00000064H
  02989	61		 DB	 97			; 00000061H
  0298a	74		 DB	 116			; 00000074H
  0298b	61		 DB	 97			; 00000061H
  0298c	00		 DB	 0
$LN280@SaDispatch:
  0298d	72		 DB	 114			; 00000072H
  0298e	65		 DB	 101			; 00000065H
  0298f	73		 DB	 115			; 00000073H
  02990	75		 DB	 117			; 00000075H
  02991	6c		 DB	 108			; 0000006cH
  02992	74		 DB	 116			; 00000074H
  02993	00		 DB	 0
$LN279@SaDispatch:
  02994	64		 DB	 100			; 00000064H
  02995	61		 DB	 97			; 00000061H
  02996	74		 DB	 116			; 00000074H
  02997	61		 DB	 97			; 00000061H
  02998	00		 DB	 0
$LN278@SaDispatch:
  02999	72		 DB	 114			; 00000072H
  0299a	65		 DB	 101			; 00000065H
  0299b	73		 DB	 115			; 00000073H
  0299c	75		 DB	 117			; 00000075H
  0299d	6c		 DB	 108			; 0000006cH
  0299e	74		 DB	 116			; 00000074H
  0299f	00		 DB	 0
$LN277@SaDispatch:
  029a0	64		 DB	 100			; 00000064H
  029a1	61		 DB	 97			; 00000061H
  029a2	74		 DB	 116			; 00000074H
  029a3	61		 DB	 97			; 00000061H
  029a4	00		 DB	 0
$LN276@SaDispatch:
  029a5	72		 DB	 114			; 00000072H
  029a6	65		 DB	 101			; 00000065H
  029a7	73		 DB	 115			; 00000073H
  029a8	75		 DB	 117			; 00000075H
  029a9	6c		 DB	 108			; 0000006cH
  029aa	74		 DB	 116			; 00000074H
  029ab	00		 DB	 0
$LN275@SaDispatch:
  029ac	64		 DB	 100			; 00000064H
  029ad	61		 DB	 97			; 00000061H
  029ae	74		 DB	 116			; 00000074H
  029af	61		 DB	 97			; 00000061H
  029b0	00		 DB	 0
$LN274@SaDispatch:
  029b1	72		 DB	 114			; 00000072H
  029b2	65		 DB	 101			; 00000065H
  029b3	73		 DB	 115			; 00000073H
  029b4	75		 DB	 117			; 00000075H
  029b5	6c		 DB	 108			; 0000006cH
  029b6	74		 DB	 116			; 00000074H
  029b7	00		 DB	 0
$LN273@SaDispatch:
  029b8	64		 DB	 100			; 00000064H
  029b9	61		 DB	 97			; 00000061H
  029ba	74		 DB	 116			; 00000074H
  029bb	61		 DB	 97			; 00000061H
  029bc	00		 DB	 0
$LN272@SaDispatch:
  029bd	72		 DB	 114			; 00000072H
  029be	65		 DB	 101			; 00000065H
  029bf	73		 DB	 115			; 00000073H
  029c0	75		 DB	 117			; 00000075H
  029c1	6c		 DB	 108			; 0000006cH
  029c2	74		 DB	 116			; 00000074H
  029c3	00		 DB	 0
$LN271@SaDispatch:
  029c4	72		 DB	 114			; 00000072H
  029c5	65		 DB	 101			; 00000065H
  029c6	73		 DB	 115			; 00000073H
  029c7	75		 DB	 117			; 00000075H
  029c8	6c		 DB	 108			; 0000006cH
  029c9	74		 DB	 116			; 00000074H
  029ca	00		 DB	 0
$LN270@SaDispatch:
  029cb	73		 DB	 115			; 00000073H
  029cc	77		 DB	 119			; 00000077H
  029cd	00		 DB	 0
$LN269@SaDispatch:
  029ce	73		 DB	 115			; 00000073H
  029cf	65		 DB	 101			; 00000065H
  029d0	6e		 DB	 110			; 0000006eH
  029d1	75		 DB	 117			; 00000075H
  029d2	6d		 DB	 109			; 0000006dH
  029d3	62		 DB	 98			; 00000062H
  029d4	65		 DB	 101			; 00000065H
  029d5	72		 DB	 114			; 00000072H
  029d6	00		 DB	 0
$LN268@SaDispatch:
  029d7	79		 DB	 121			; 00000079H
  029d8	00		 DB	 0
$LN267@SaDispatch:
  029d9	78		 DB	 120			; 00000078H
  029da	00		 DB	 0
$LN266@SaDispatch:
  029db	6f		 DB	 111			; 0000006fH
  029dc	70		 DB	 112			; 00000070H
  029dd	74		 DB	 116			; 00000074H
  029de	69		 DB	 105			; 00000069H
  029df	6f		 DB	 111			; 0000006fH
  029e0	6e		 DB	 110			; 0000006eH
  029e1	00		 DB	 0
$LN265@SaDispatch:
  029e2	6c		 DB	 108			; 0000006cH
  029e3	65		 DB	 101			; 00000065H
  029e4	76		 DB	 118			; 00000076H
  029e5	65		 DB	 101			; 00000065H
  029e6	6c		 DB	 108			; 0000006cH
  029e7	00		 DB	 0
$LN264@SaDispatch:
  029e8	65		 DB	 101			; 00000065H
  029e9	66		 DB	 102			; 00000066H
  029ea	66		 DB	 102			; 00000066H
  029eb	65		 DB	 101			; 00000065H
  029ec	63		 DB	 99			; 00000063H
  029ed	74		 DB	 116			; 00000074H
  029ee	00		 DB	 0
$LN263@SaDispatch:
  029ef	64		 DB	 100			; 00000064H
  029f0	61		 DB	 97			; 00000061H
  029f1	74		 DB	 116			; 00000074H
  029f2	61		 DB	 97			; 00000061H
  029f3	00		 DB	 0
$LN262@SaDispatch:
  029f4	6f		 DB	 111			; 0000006fH
  029f5	62		 DB	 98			; 00000062H
  029f6	6a		 DB	 106			; 0000006aH
  029f7	69		 DB	 105			; 00000069H
  029f8	6e		 DB	 110			; 0000006eH
  029f9	64		 DB	 100			; 00000064H
  029fa	65		 DB	 101			; 00000065H
  029fb	78		 DB	 120			; 00000078H
  029fc	00		 DB	 0
$LN261@SaDispatch:
  029fd	73		 DB	 115			; 00000073H
  029fe	65		 DB	 101			; 00000065H
  029ff	71		 DB	 113			; 00000071H
  02a00	6e		 DB	 110			; 0000006eH
  02a01	6f		 DB	 111			; 0000006fH
  02a02	00		 DB	 0
$LN260@SaDispatch:
  02a03	62		 DB	 98			; 00000062H
  02a04	75		 DB	 117			; 00000075H
  02a05	74		 DB	 116			; 00000074H
  02a06	74		 DB	 116			; 00000074H
  02a07	6f		 DB	 111			; 0000006fH
  02a08	6e		 DB	 110			; 0000006eH
  02a09	74		 DB	 116			; 00000074H
  02a0a	79		 DB	 121			; 00000079H
  02a0b	70		 DB	 112			; 00000070H
  02a0c	65		 DB	 101			; 00000065H
  02a0d	00		 DB	 0
$LN259@SaDispatch:
  02a0e	77		 DB	 119			; 00000077H
  02a0f	69		 DB	 105			; 00000069H
  02a10	6e		 DB	 110			; 0000006eH
  02a11	64		 DB	 100			; 00000064H
  02a12	6f		 DB	 111			; 0000006fH
  02a13	77		 DB	 119			; 00000077H
  02a14	74		 DB	 116			; 00000074H
  02a15	79		 DB	 121			; 00000079H
  02a16	70		 DB	 112			; 00000070H
  02a17	65		 DB	 101			; 00000065H
  02a18	00		 DB	 0
$LN258@SaDispatch:
  02a19	70		 DB	 112			; 00000070H
  02a1a	6f		 DB	 111			; 0000006fH
  02a1b	69		 DB	 105			; 00000069H
  02a1c	6e		 DB	 110			; 0000006eH
  02a1d	74		 DB	 116			; 00000074H
  02a1e	00		 DB	 0
$LN257@SaDispatch:
  02a1f	74		 DB	 116			; 00000074H
  02a20	6f		 DB	 111			; 0000006fH
  02a21	69		 DB	 105			; 00000069H
  02a22	6e		 DB	 110			; 0000006eH
  02a23	64		 DB	 100			; 00000064H
  02a24	65		 DB	 101			; 00000065H
  02a25	78		 DB	 120			; 00000078H
  02a26	00		 DB	 0
$LN256@SaDispatch:
  02a27	68		 DB	 104			; 00000068H
  02a28	61		 DB	 97			; 00000061H
  02a29	76		 DB	 118			; 00000076H
  02a2a	65		 DB	 101			; 00000065H
  02a2b	70		 DB	 112			; 00000070H
  02a2c	65		 DB	 101			; 00000065H
  02a2d	74		 DB	 116			; 00000074H
  02a2e	73		 DB	 115			; 00000073H
  02a2f	6b		 DB	 107			; 0000006bH
  02a30	69		 DB	 105			; 00000069H
  02a31	6c		 DB	 108			; 0000006cH
  02a32	6c		 DB	 108			; 0000006cH
  02a33	00		 DB	 0
$LN255@SaDispatch:
  02a34	68		 DB	 104			; 00000068H
  02a35	61		 DB	 97			; 00000061H
  02a36	76		 DB	 118			; 00000076H
  02a37	65		 DB	 101			; 00000065H
  02a38	70		 DB	 112			; 00000070H
  02a39	65		 DB	 101			; 00000065H
  02a3a	74		 DB	 116			; 00000074H
  02a3b	69		 DB	 105			; 00000069H
  02a3c	6e		 DB	 110			; 0000006eH
  02a3d	64		 DB	 100			; 00000064H
  02a3e	65		 DB	 101			; 00000065H
  02a3f	78		 DB	 120			; 00000078H
  02a40	00		 DB	 0
$LN254@SaDispatch:
  02a41	72		 DB	 114			; 00000072H
  02a42	65		 DB	 101			; 00000065H
  02a43	73		 DB	 115			; 00000073H
  02a44	75		 DB	 117			; 00000075H
  02a45	6c		 DB	 108			; 0000006cH
  02a46	74		 DB	 116			; 00000074H
  02a47	00		 DB	 0
$LN253@SaDispatch:
  02a48	72		 DB	 114			; 00000072H
  02a49	65		 DB	 101			; 00000065H
  02a4a	73		 DB	 115			; 00000073H
  02a4b	75		 DB	 117			; 00000075H
  02a4c	6c		 DB	 108			; 0000006cH
  02a4d	74		 DB	 116			; 00000074H
  02a4e	00		 DB	 0
$LN252@SaDispatch:
  02a4f	70		 DB	 112			; 00000070H
  02a50	65		 DB	 101			; 00000065H
  02a51	74		 DB	 116			; 00000074H
  02a52	61		 DB	 97			; 00000061H
  02a53	72		 DB	 114			; 00000072H
  02a54	72		 DB	 114			; 00000072H
  02a55	61		 DB	 97			; 00000061H
  02a56	79		 DB	 121			; 00000079H
  02a57	00		 DB	 0
$LN251@SaDispatch:
  02a58	72		 DB	 114			; 00000072H
  02a59	65		 DB	 101			; 00000065H
  02a5a	73		 DB	 115			; 00000073H
  02a5b	75		 DB	 117			; 00000075H
  02a5c	6c		 DB	 108			; 0000006cH
  02a5d	74		 DB	 116			; 00000074H
  02a5e	00		 DB	 0
$LN250@SaDispatch:
  02a5f	73		 DB	 115			; 00000073H
  02a60	74		 DB	 116			; 00000074H
  02a61	61		 DB	 97			; 00000061H
  02a62	6e		 DB	 110			; 0000006eH
  02a63	64		 DB	 100			; 00000064H
  02a64	62		 DB	 98			; 00000062H
  02a65	79		 DB	 121			; 00000079H
  02a66	70		 DB	 112			; 00000070H
  02a67	65		 DB	 101			; 00000065H
  02a68	74		 DB	 116			; 00000074H
  02a69	00		 DB	 0
$LN249@SaDispatch:
  02a6a	72		 DB	 114			; 00000072H
  02a6b	65		 DB	 101			; 00000065H
  02a6c	73		 DB	 115			; 00000073H
  02a6d	75		 DB	 117			; 00000075H
  02a6e	6c		 DB	 108			; 0000006cH
  02a6f	74		 DB	 116			; 00000074H
  02a70	00		 DB	 0
$LN248@SaDispatch:
  02a71	70		 DB	 112			; 00000070H
  02a72	65		 DB	 101			; 00000065H
  02a73	74		 DB	 116			; 00000074H
  02a74	61		 DB	 97			; 00000061H
  02a75	72		 DB	 114			; 00000072H
  02a76	72		 DB	 114			; 00000072H
  02a77	61		 DB	 97			; 00000061H
  02a78	79		 DB	 121			; 00000079H
  02a79	00		 DB	 0
$LN247@SaDispatch:
  02a7a	72		 DB	 114			; 00000072H
  02a7b	65		 DB	 101			; 00000065H
  02a7c	73		 DB	 115			; 00000073H
  02a7d	75		 DB	 117			; 00000075H
  02a7e	6c		 DB	 108			; 0000006cH
  02a7f	74		 DB	 116			; 00000074H
  02a80	00		 DB	 0
$LN246@SaDispatch:
  02a81	72		 DB	 114			; 00000072H
  02a82	65		 DB	 101			; 00000065H
  02a83	71		 DB	 113			; 00000071H
  02a84	75		 DB	 117			; 00000075H
  02a85	65		 DB	 101			; 00000065H
  02a86	73		 DB	 115			; 00000073H
  02a87	74		 DB	 116			; 00000074H
  02a88	00		 DB	 0
$LN245@SaDispatch:
  02a89	66		 DB	 102			; 00000066H
  02a8a	6c		 DB	 108			; 0000006cH
  02a8b	67		 DB	 103			; 00000067H
  02a8c	00		 DB	 0
$LN244@SaDispatch:
  02a8d	66		 DB	 102			; 00000066H
  02a8e	6c		 DB	 108			; 0000006cH
  02a8f	67		 DB	 103			; 00000067H
  02a90	00		 DB	 0
$LN243@SaDispatch:
  02a91	64		 DB	 100			; 00000064H
  02a92	61		 DB	 97			; 00000061H
  02a93	74		 DB	 116			; 00000074H
  02a94	61		 DB	 97			; 00000061H
  02a95	00		 DB	 0
$LN242@SaDispatch:
  02a96	64		 DB	 100			; 00000064H
  02a97	79		 DB	 121			; 00000079H
  02a98	00		 DB	 0
$LN241@SaDispatch:
  02a99	64		 DB	 100			; 00000064H
  02a9a	78		 DB	 120			; 00000078H
  02a9b	00		 DB	 0
$LN240@SaDispatch:
  02a9c	63		 DB	 99			; 00000063H
  02a9d	61		 DB	 97			; 00000061H
  02a9e	74		 DB	 116			; 00000074H
  02a9f	65		 DB	 101			; 00000065H
  02aa0	67		 DB	 103			; 00000067H
  02aa1	6f		 DB	 111			; 0000006fH
  02aa2	72		 DB	 114			; 00000072H
  02aa3	79		 DB	 121			; 00000079H
  02aa4	00		 DB	 0
$LN239@SaDispatch:
  02aa5	64		 DB	 100			; 00000064H
  02aa6	61		 DB	 97			; 00000061H
  02aa7	74		 DB	 116			; 00000074H
  02aa8	61		 DB	 97			; 00000061H
  02aa9	00		 DB	 0
$LN238@SaDispatch:
  02aaa	64		 DB	 100			; 00000064H
  02aab	61		 DB	 97			; 00000061H
  02aac	74		 DB	 116			; 00000074H
  02aad	61		 DB	 97			; 00000061H
  02aae	00		 DB	 0
$LN237@SaDispatch:
  02aaf	64		 DB	 100			; 00000064H
  02ab0	61		 DB	 97			; 00000061H
  02ab1	74		 DB	 116			; 00000074H
  02ab2	61		 DB	 97			; 00000061H
  02ab3	00		 DB	 0
$LN236@SaDispatch:
  02ab4	64		 DB	 100			; 00000064H
  02ab5	61		 DB	 97			; 00000061H
  02ab6	74		 DB	 116			; 00000074H
  02ab7	61		 DB	 97			; 00000061H
  02ab8	00		 DB	 0
$LN235@SaDispatch:
  02ab9	64		 DB	 100			; 00000064H
  02aba	61		 DB	 97			; 00000061H
  02abb	74		 DB	 116			; 00000074H
  02abc	61		 DB	 97			; 00000061H
  02abd	00		 DB	 0
$LN234@SaDispatch:
  02abe	64		 DB	 100			; 00000064H
  02abf	61		 DB	 97			; 00000061H
  02ac0	74		 DB	 116			; 00000074H
  02ac1	61		 DB	 97			; 00000061H
  02ac2	00		 DB	 0
$LN233@SaDispatch:
  02ac3	79		 DB	 121			; 00000079H
  02ac4	32		 DB	 50			; 00000032H
  02ac5	00		 DB	 0
$LN232@SaDispatch:
  02ac6	78		 DB	 120			; 00000078H
  02ac7	32		 DB	 50			; 00000032H
  02ac8	00		 DB	 0
$LN231@SaDispatch:
  02ac9	79		 DB	 121			; 00000079H
  02aca	31		 DB	 49			; 00000031H
  02acb	00		 DB	 0
$LN230@SaDispatch:
  02acc	78		 DB	 120			; 00000078H
  02acd	31		 DB	 49			; 00000031H
  02ace	00		 DB	 0
$LN229@SaDispatch:
  02acf	66		 DB	 102			; 00000066H
  02ad0	6c		 DB	 108			; 0000006cH
  02ad1	00		 DB	 0
$LN228@SaDispatch:
  02ad2	64		 DB	 100			; 00000064H
  02ad3	61		 DB	 97			; 00000061H
  02ad4	74		 DB	 116			; 00000074H
  02ad5	61		 DB	 97			; 00000061H
  02ad6	00		 DB	 0
$LN227@SaDispatch:
  02ad7	65		 DB	 101			; 00000065H
  02ad8	76		 DB	 118			; 00000076H
  02ad9	65		 DB	 101			; 00000065H
  02ada	6e		 DB	 110			; 0000006eH
  02adb	74		 DB	 116			; 00000074H
  02adc	73		 DB	 115			; 00000073H
  02add	75		 DB	 117			; 00000075H
  02ade	6d		 DB	 109			; 0000006dH
  02adf	00		 DB	 0
$LN226@SaDispatch:
  02ae0	6f		 DB	 111			; 0000006fH
  02ae1	62		 DB	 98			; 00000062H
  02ae2	6a		 DB	 106			; 0000006aH
  02ae3	73		 DB	 115			; 00000073H
  02ae4	75		 DB	 117			; 00000075H
  02ae5	6d		 DB	 109			; 0000006dH
  02ae6	00		 DB	 0
$LN225@SaDispatch:
  02ae7	74		 DB	 116			; 00000074H
  02ae8	69		 DB	 105			; 00000069H
  02ae9	6c		 DB	 108			; 0000006cH
  02aea	65		 DB	 101			; 00000065H
  02aeb	73		 DB	 115			; 00000073H
  02aec	75		 DB	 117			; 00000075H
  02aed	6d		 DB	 109			; 0000006dH
  02aee	00		 DB	 0
$LN224@SaDispatch:
  02aef	79		 DB	 121			; 00000079H
  02af0	32		 DB	 50			; 00000032H
  02af1	00		 DB	 0
$LN223@SaDispatch:
  02af2	78		 DB	 120			; 00000078H
  02af3	32		 DB	 50			; 00000032H
  02af4	00		 DB	 0
$LN222@SaDispatch:
  02af5	79		 DB	 121			; 00000079H
  02af6	31		 DB	 49			; 00000031H
  02af7	00		 DB	 0
$LN221@SaDispatch:
  02af8	78		 DB	 120			; 00000078H
  02af9	31		 DB	 49			; 00000031H
  02afa	00		 DB	 0
$LN220@SaDispatch:
  02afb	66		 DB	 102			; 00000066H
  02afc	6c		 DB	 108			; 0000006cH
  02afd	00		 DB	 0
$LN219@SaDispatch:
  02afe	63		 DB	 99			; 00000063H
  02aff	6f		 DB	 111			; 0000006fH
  02b00	6c		 DB	 108			; 0000006cH
  02b01	6f		 DB	 111			; 0000006fH
  02b02	72		 DB	 114			; 00000072H
  02b03	00		 DB	 0
$LN218@SaDispatch:
  02b04	6d		 DB	 109			; 0000006dH
  02b05	65		 DB	 101			; 00000065H
  02b06	73		 DB	 115			; 00000073H
  02b07	73		 DB	 115			; 00000073H
  02b08	61		 DB	 97			; 00000061H
  02b09	67		 DB	 103			; 00000067H
  02b0a	65		 DB	 101			; 00000065H
  02b0b	00		 DB	 0
$LN217@SaDispatch:
  02b0c	69		 DB	 105			; 00000069H
  02b0d	6e		 DB	 110			; 0000006eH
  02b0e	64		 DB	 100			; 00000064H
  02b0f	65		 DB	 101			; 00000065H
  02b10	78		 DB	 120			; 00000078H
  02b11	00		 DB	 0
$LN216@SaDispatch:
  02b12	64		 DB	 100			; 00000064H
  02b13	61		 DB	 97			; 00000061H
  02b14	74		 DB	 116			; 00000074H
  02b15	61		 DB	 97			; 00000061H
  02b16	00		 DB	 0
$LN215@SaDispatch:
  02b17	6e		 DB	 110			; 0000006eH
  02b18	75		 DB	 117			; 00000075H
  02b19	6d		 DB	 109			; 0000006dH
  02b1a	00		 DB	 0
$LN214@SaDispatch:
  02b1b	64		 DB	 100			; 00000064H
  02b1c	61		 DB	 97			; 00000061H
  02b1d	74		 DB	 116			; 00000074H
  02b1e	61		 DB	 97			; 00000061H
  02b1f	00		 DB	 0
$LN213@SaDispatch:
  02b20	63		 DB	 99			; 00000063H
  02b21	64		 DB	 100			; 00000064H
  02b22	61		 DB	 97			; 00000061H
  02b23	74		 DB	 116			; 00000074H
  02b24	61		 DB	 97			; 00000061H
  02b25	00		 DB	 0
$LN212@SaDispatch:
  02b26	6e		 DB	 110			; 0000006eH
  02b27	6f		 DB	 111			; 0000006fH
  02b28	00		 DB	 0
$LN211@SaDispatch:
  02b29	66		 DB	 102			; 00000066H
  02b2a	6c		 DB	 108			; 0000006cH
  02b2b	67		 DB	 103			; 00000067H
  02b2c	00		 DB	 0
$LN210@SaDispatch:
  02b2d	64		 DB	 100			; 00000064H
  02b2e	69		 DB	 105			; 00000069H
  02b2f	72		 DB	 114			; 00000072H
  02b30	00		 DB	 0
$LN209@SaDispatch:
  02b31	79		 DB	 121			; 00000079H
  02b32	00		 DB	 0
$LN208@SaDispatch:
  02b33	78		 DB	 120			; 00000078H
  02b34	00		 DB	 0
$LN207@SaDispatch:
  02b35	67		 DB	 103			; 00000067H
  02b36	72		 DB	 114			; 00000072H
  02b37	61		 DB	 97			; 00000061H
  02b38	70		 DB	 112			; 00000070H
  02b39	68		 DB	 104			; 00000068H
  02b3a	69		 DB	 105			; 00000069H
  02b3b	63		 DB	 99			; 00000063H
  02b3c	73		 DB	 115			; 00000073H
  02b3d	6e		 DB	 110			; 0000006eH
  02b3e	6f		 DB	 111			; 0000006fH
  02b3f	00		 DB	 0
$LN206@SaDispatch:
  02b40	6f		 DB	 111			; 0000006fH
  02b41	62		 DB	 98			; 00000062H
  02b42	6a		 DB	 106			; 0000006aH
  02b43	69		 DB	 105			; 00000069H
  02b44	6e		 DB	 110			; 0000006eH
  02b45	64		 DB	 100			; 00000064H
  02b46	65		 DB	 101			; 00000065H
  02b47	78		 DB	 120			; 00000078H
  02b48	00		 DB	 0
$LN205@SaDispatch:
  02b49	63		 DB	 99			; 00000063H
  02b4a	6f		 DB	 111			; 0000006fH
  02b4b	6c		 DB	 108			; 0000006cH
  02b4c	6f		 DB	 111			; 0000006fH
  02b4d	72		 DB	 114			; 00000072H
  02b4e	00		 DB	 0
$LN204@SaDispatch:
  02b4f	74		 DB	 116			; 00000074H
  02b50	65		 DB	 101			; 00000065H
  02b51	78		 DB	 120			; 00000078H
  02b52	74		 DB	 116			; 00000074H
  02b53	00		 DB	 0
$LN203@SaDispatch:
  02b54	61		 DB	 97			; 00000061H
  02b55	69		 DB	 105			; 00000069H
  02b56	6e		 DB	 110			; 0000006eH
  02b57	64		 DB	 100			; 00000064H
  02b58	65		 DB	 101			; 00000065H
  02b59	78		 DB	 120			; 00000078H
  02b5a	00		 DB	 0
$LN202@SaDispatch:
  02b5b	74		 DB	 116			; 00000074H
  02b5c	6f		 DB	 111			; 0000006fH
  02b5d	69		 DB	 105			; 00000069H
  02b5e	6e		 DB	 110			; 0000006eH
  02b5f	64		 DB	 100			; 00000064H
  02b60	65		 DB	 101			; 00000065H
  02b61	78		 DB	 120			; 00000078H
  02b62	00		 DB	 0
$LN201@SaDispatch:
  02b63	66		 DB	 102			; 00000066H
  02b64	72		 DB	 114			; 00000072H
  02b65	6f		 DB	 111			; 0000006fH
  02b66	6d		 DB	 109			; 0000006dH
  02b67	69		 DB	 105			; 00000069H
  02b68	6e		 DB	 110			; 0000006eH
  02b69	64		 DB	 100			; 00000064H
  02b6a	65		 DB	 101			; 00000065H
  02b6b	78		 DB	 120			; 00000078H
  02b6c	00		 DB	 0
$LN200@SaDispatch:
  02b6d	64		 DB	 100			; 00000064H
  02b6e	61		 DB	 97			; 00000061H
  02b6f	74		 DB	 116			; 00000074H
  02b70	61		 DB	 97			; 00000061H
  02b71	00		 DB	 0
$LN199@SaDispatch:
  02b72	63		 DB	 99			; 00000063H
  02b73	6f		 DB	 111			; 0000006fH
  02b74	6d		 DB	 109			; 0000006dH
  02b75	6d		 DB	 109			; 0000006dH
  02b76	61		 DB	 97			; 00000061H
  02b77	6e		 DB	 110			; 0000006eH
  02b78	64		 DB	 100			; 00000064H
  02b79	00		 DB	 0
$LN198@SaDispatch:
  02b7a	64		 DB	 100			; 00000064H
  02b7b	61		 DB	 97			; 00000061H
  02b7c	74		 DB	 116			; 00000074H
  02b7d	61		 DB	 97			; 00000061H
  02b7e	00		 DB	 0
$LN197@SaDispatch:
  02b7f	64		 DB	 100			; 00000064H
  02b80	61		 DB	 97			; 00000061H
  02b81	74		 DB	 116			; 00000074H
  02b82	61		 DB	 97			; 00000061H
  02b83	00		 DB	 0
$LN196@SaDispatch:
  02b84	66		 DB	 102			; 00000066H
  02b85	69		 DB	 105			; 00000069H
  02b86	65		 DB	 101			; 00000065H
  02b87	6c		 DB	 108			; 0000006cH
  02b88	64		 DB	 100			; 00000064H
  02b89	00		 DB	 0
$LN195@SaDispatch:
  02b8a	72		 DB	 114			; 00000072H
  02b8b	65		 DB	 101			; 00000065H
  02b8c	73		 DB	 115			; 00000073H
  02b8d	75		 DB	 117			; 00000075H
  02b8e	6c		 DB	 108			; 0000006cH
  02b8f	74		 DB	 116			; 00000074H
  02b90	00		 DB	 0
$LN194@SaDispatch:
  02b91	72		 DB	 114			; 00000072H
  02b92	65		 DB	 101			; 00000065H
  02b93	73		 DB	 115			; 00000073H
  02b94	75		 DB	 117			; 00000075H
  02b95	6c		 DB	 108			; 0000006cH
  02b96	74		 DB	 116			; 00000074H
  02b97	00		 DB	 0
$LN193@SaDispatch:
  02b98	73		 DB	 115			; 00000073H
  02b99	65		 DB	 101			; 00000065H
  02b9a	71		 DB	 113			; 00000071H
  02b9b	6e		 DB	 110			; 0000006eH
  02b9c	6f		 DB	 111			; 0000006fH
  02b9d	00		 DB	 0
$LN192@SaDispatch:
  02b9e	64		 DB	 100			; 00000064H
  02b9f	69		 DB	 105			; 00000069H
  02ba0	72		 DB	 114			; 00000072H
  02ba1	00		 DB	 0
$LN191@SaDispatch:
  02ba2	79		 DB	 121			; 00000079H
  02ba3	00		 DB	 0
$LN190@SaDispatch:
  02ba4	78		 DB	 120			; 00000078H
  02ba5	00		 DB	 0
$LN189@SaDispatch:
  02ba6	72		 DB	 114			; 00000072H
  02ba7	61		 DB	 97			; 00000061H
  02ba8	77		 DB	 119			; 00000077H
  02ba9	00		 DB	 0
$LN188@SaDispatch:
  02baa	69		 DB	 105			; 00000069H
  02bab	43		 DB	 67			; 00000043H
  02bac	68		 DB	 104			; 00000068H
  02bad	65		 DB	 101			; 00000065H
  02bae	63		 DB	 99			; 00000063H
  02baf	6b		 DB	 107			; 0000006bH
  02bb0	73		 DB	 115			; 00000073H
  02bb1	75		 DB	 117			; 00000075H
  02bb2	6d		 DB	 109			; 0000006dH
  02bb3	72		 DB	 114			; 00000072H
  02bb4	65		 DB	 101			; 00000065H
  02bb5	63		 DB	 99			; 00000063H
  02bb6	76		 DB	 118			; 00000076H
  02bb7	00		 DB	 0
$LN187@SaDispatch:
  02bb8	66		 DB	 102			; 00000066H
  02bb9	69		 DB	 105			; 00000069H
  02bba	65		 DB	 101			; 00000065H
  02bbb	6c		 DB	 108			; 0000006cH
  02bbc	64		 DB	 100			; 00000064H
  02bbd	63		 DB	 99			; 00000063H
  02bbe	6f		 DB	 111			; 0000006fH
  02bbf	75		 DB	 117			; 00000075H
  02bc0	6e		 DB	 110			; 0000006eH
  02bc1	74		 DB	 116			; 00000074H
  02bc2	00		 DB	 0
$LN186@SaDispatch:
  02bc3	66		 DB	 102			; 00000066H
  02bc4	75		 DB	 117			; 00000075H
  02bc5	6e		 DB	 110			; 0000006eH
  02bc6	63		 DB	 99			; 00000063H
  02bc7	00		 DB	 0
?SaDispatchMessage@@YAHHPAD@Z ENDP			; SaDispatchMessage
_TEXT	ENDS
END
