; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Administrator\Desktop\????? ??\????? ??\Client Source Code\system\ime.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?dwInfo@@3KA					; dwInfo
_BSS	SEGMENT
?dwInfo@@3KA DD	01H DUP (?)				; dwInfo
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?ShowBottomLineString@@YAXHPAD@Z		; ShowBottomLineString
PUBLIC	?strstr3@@YAHPAD0@Z				; strstr3
PUBLIC	?NewShowBottomLineString@@YAXHPAD@Z		; NewShowBottomLineString
PUBLIC	?ImeProc@@YAXXZ					; ImeProc
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_08LDMKCG@?$MA?O?$LJ?$NN?C?$KE?F?C?$AA@	; `string'
PUBLIC	??_C@_08MONFNGIO@?$LB?S?5?$LM?S?5?$LI?$LL?$AA@	; `string'
PUBLIC	??_C@_08PHELNDMH@?F?D?F?$LM?C?$KE?F?C?$AA@	; `string'
PUBLIC	??_C@_08NPHMDBID@?$LK?N?A?$LH?C?$KE?F?C?$AA@	; `string'
PUBLIC	??_C@_08FDACGPGL@?$LA?f?$LH?B?C?$KE?$LD?N?$AA@	; `string'
PUBLIC	??_C@_0L@JJGIFDKI@?C?$KE?$LD?N?$LJ?f?C?$KE?$LD?N?$AA@ ; `string'
PUBLIC	??_C@_06HFMOMHB@?$LP?y?5?5?$LF?e?$AA@		; `string'
PUBLIC	??_C@_08JNNGLNCD@?$LL?g?$LP?k?$LO?H?G?T?$AA@	; `string'
PUBLIC	??_C@_0BA@LIGBPIEE@?$FL?$CFs?$FN?$LF?$LP?3?$CFd?5?$LD?$LC?3?$CFd?$AA@ ; `string'
PUBLIC	??_C@_08FBDOGKJC@?$LM?v?$LF?$LP?$LI?p?$LF?e?$AA@ ; `string'
PUBLIC	??_C@_08GHCIMMED@?$LA?$KN?A?$KG?$LA?x?$LA?$NN?$AA@ ; `string'
PUBLIC	??_C@_08OLNGHIAG@?G?J?$LM?v?$LJ?f?$LO?n?$AA@	; `string'
PUBLIC	??_C@_08HEDKPKHO@?$KD?A?$KD?I?$LI?p?$LF?e?$AA@	; `string'
EXTRN	_strlen:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?GetImeString@@YAPADXZ:PROC			; GetImeString
EXTRN	?GetImeDescString@@YAPADXZ:PROC			; GetImeDescString
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?DISPLACEMENT_X@@3HA:DWORD			; DISPLACEMENT_X
EXTRN	?DISPLACEMENT_Y@@3HA:DWORD			; DISPLACEMENT_Y
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?mouse@@3UMOUSE@@A:BYTE				; mouse
EXTRN	?TaskBarFlag@@3HA:DWORD				; TaskBarFlag
EXTRN	?TalkMode@@3HA:DWORD				; TalkMode
EXTRN	?nowFloorName@@3PADA:BYTE			; nowFloorName
EXTRN	?nowGx@@3HA:DWORD				; nowGx
EXTRN	?nowGy@@3HA:DWORD				; nowGy
EXTRN	?AI@@3HA:DWORD					; AI
EXTRN	?bShowItemExplain@@3HA:DWORD			; bShowItemExplain
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_08HEDKPKHO@?$KD?A?$KD?I?$LI?p?$LF?e?$AA@
CONST	SEGMENT
??_C@_08HEDKPKHO@?$KD?A?$KD?I?$LI?p?$LF?e?$AA@ DB 0a3H, 0c1H, 0a3H, 0c9H, 0b8H
	DB	0f0H, 0b5H, 0e5H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OLNGHIAG@?G?J?$LM?v?$LJ?f?$LO?n?$AA@
CONST	SEGMENT
??_C@_08OLNGHIAG@?G?J?$LM?v?$LJ?f?$LO?n?$AA@ DB 0c7H, 0caH, 0bcH, 0f6H, 0b9H
	DB	0e6H, 0beH, 0eeH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHCIMMED@?$LA?$KN?A?$KG?$LA?x?$LA?$NN?$AA@
CONST	SEGMENT
??_C@_08GHCIMMED@?$LA?$KN?A?$KG?$LA?x?$LA?$NN?$AA@ DB 0b0H, 0adH, 0c1H, 0a6H
	DB	0b0H, 0f8H, 0b0H, 0ddH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBDOGKJC@?$LM?v?$LF?$LP?$LI?p?$LF?e?$AA@
CONST	SEGMENT
??_C@_08FBDOGKJC@?$LM?v?$LF?$LP?$LI?p?$LF?e?$AA@ DB 0bcH, 0f6H, 0b5H, 0bfH
	DB	0b8H, 0f0H, 0b5H, 0e5H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIGBPIEE@?$FL?$CFs?$FN?$LF?$LP?3?$CFd?5?$LD?$LC?3?$CFd?$AA@
CONST	SEGMENT
??_C@_0BA@LIGBPIEE@?$FL?$CFs?$FN?$LF?$LP?3?$CFd?5?$LD?$LC?3?$CFd?$AA@ DB '['
	DB	'%s]', 0b5H, 0bfH, ':%d ', 0b3H, 0b2H, ':%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JNNGLNCD@?$LL?g?$LP?k?$LO?H?G?T?$AA@
CONST	SEGMENT
??_C@_08JNNGLNCD@?$LL?g?$LP?k?$LO?H?G?T?$AA@ DB 0bbH, 0e7H, 0bfH, 0ebH, 0beH
	DB	0c8H, 0c7H, 0d4H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFMOMHB@?$LP?y?5?5?$LF?e?$AA@
CONST	SEGMENT
??_C@_06HFMOMHB@?$LP?y?5?5?$LF?e?$AA@ DB 0bfH, 0f9H, '  ', 0b5H, 0e5H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JJGIFDKI@?C?$KE?$LD?N?$LJ?f?C?$KE?$LD?N?$AA@
CONST	SEGMENT
??_C@_0L@JJGIFDKI@?C?$KE?$LD?N?$LJ?f?C?$KE?$LD?N?$AA@ DB 0c3H, 0a4H, 0b3H
	DB	0ceH, 0b9H, 0e6H, 0c3H, 0a4H, 0b3H, 0ceH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDACGPGL@?$LA?f?$LH?B?C?$KE?$LD?N?$AA@
CONST	SEGMENT
??_C@_08FDACGPGL@?$LA?f?$LH?B?C?$KE?$LD?N?$AA@ DB 0b0H, 0e6H, 0b7H, 0c2H, 0c3H
	DB	0a4H, 0b3H, 0ceH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NPHMDBID@?$LK?N?A?$LH?C?$KE?F?C?$AA@
CONST	SEGMENT
??_C@_08NPHMDBID@?$LK?N?A?$LH?C?$KE?F?C?$AA@ DB 0baH, 0ceH, 0c1H, 0b7H, 0c3H
	DB	0a4H, 0c6H, 0c3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PHELNDMH@?F?D?F?$LM?C?$KE?F?C?$AA@
CONST	SEGMENT
??_C@_08PHELNDMH@?F?D?F?$LM?C?$KE?F?C?$AA@ DB 0c6H, 0c4H, 0c6H, 0bcH, 0c3H
	DB	0a4H, 0c6H, 0c3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MONFNGIO@?$LB?S?5?$LM?S?5?$LI?$LL?$AA@
CONST	SEGMENT
??_C@_08MONFNGIO@?$LB?S?5?$LM?S?5?$LI?$LL?$AA@ DB 0b1H, 0d3H, ' ', 0bcH, 0d3H
	DB	' ', 0b8H, 0bbH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDMKCG@?$MA?O?$LJ?$NN?C?$KE?F?C?$AA@
CONST	SEGMENT
??_C@_08LDMKCG@?$MA?O?$LJ?$NN?C?$KE?F?C?$AA@ DB 0c0H, 0cfH, 0b9H, 0ddH, 0c3H
	DB	0a4H, 0c6H, 0c3H, 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\ime.cpp
;	COMDAT ?ImeProc@@YAXXZ
_TEXT	SEGMENT
tv72 = -436						; size = 4
_mapname$1 = -236					; size = 128
_∆µµ¿œ‘ æ√˚$2 = -100					; size = 32
_FontColor$3 = -60					; size = 4
_lpstr1$4 = -48						; size = 4
_lpstr$5 = -36						; size = 4
_∆¡ƒªY$ = -24						; size = 4
_∆¡ƒªX$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?ImeProc@@YAXXZ PROC					; ImeProc, COMDAT

; 96   : void ImeProc() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 01 00
	00		 sub	 esp, 436		; 000001b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 4c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-436]
  00012	b9 6d 00 00 00	 mov	 ecx, 109		; 0000006dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 97   : 	int Â±èÂπïX, Â±èÂπïY;
; 98   : 	if (ResoMode == ÂàÜËæ®Áéá::mode800) {

  00028	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?ResoMode@@3HA, 3 ; ResoMode
  0002f	75 10		 jne	 SHORT $LN4@ImeProc

; 99   : 		Â±èÂπïX = 800;

  00031	c7 45 f4 20 03
	00 00		 mov	 DWORD PTR _∆¡ƒªX$[ebp], 800 ; 00000320H

; 100  : 		Â±èÂπïY = 600;

  00038	c7 45 e8 58 02
	00 00		 mov	 DWORD PTR _∆¡ƒªY$[ebp], 600 ; 00000258H
  0003f	eb 27		 jmp	 SHORT $LN5@ImeProc
$LN4@ImeProc:

; 101  : 	}
; 102  : 	else if (ResoMode == ÂàÜËæ®Áéá::mode1024) {

  00041	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?ResoMode@@3HA, 4 ; ResoMode
  00048	75 10		 jne	 SHORT $LN6@ImeProc

; 103  : 		Â±èÂπïX = 1024;

  0004a	c7 45 f4 00 04
	00 00		 mov	 DWORD PTR _∆¡ƒªX$[ebp], 1024 ; 00000400H

; 104  : 		Â±èÂπïY = 768;

  00051	c7 45 e8 00 03
	00 00		 mov	 DWORD PTR _∆¡ƒªY$[ebp], 768 ; 00000300H

; 105  : 	}
; 106  : 	else {

  00058	eb 0e		 jmp	 SHORT $LN5@ImeProc
$LN6@ImeProc:

; 107  : 		Â±èÂπïX = 640;

  0005a	c7 45 f4 80 02
	00 00		 mov	 DWORD PTR _∆¡ƒªX$[ebp], 640 ; 00000280H

; 108  : 		Â±èÂπïY = 480;

  00061	c7 45 e8 e0 01
	00 00		 mov	 DWORD PTR _∆¡ƒªY$[ebp], 480 ; 000001e0H
$LN5@ImeProc:

; 109  : 	}
; 110  : 	// ÊòæÁ§∫ËæìÂÖ•Ê≥ïÁöÑÂêçÁß∞
; 111  : 	// Terry fix 2003/12/16 for ‰∫§ÊòìËßÜÁ™óÂºÄÂêØÊó∂,ÊòæÁ§∫Áâ©ÂìÅËØ¥Êòé‰∏çÊòæÁ§∫ËæìÂÖ•Ê≥ï
; 112  : 	//if( TaskBarFlag == FALSE ){ //ËøôË°åÊîπÊàê‰∏ã‰∏ÄË°å
; 113  : 	//if(bShowItemExplain == FALSE){
; 114  : 	if (TaskBarFlag == FALSE && bShowItemExplain == FALSE) {

  00068	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  0006f	0f 85 4e 01 00
	00		 jne	 $LN8@ImeProc
  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bShowItemExplain@@3HA, 0 ; bShowItemExplain
  0007c	0f 85 41 01 00
	00		 jne	 $LN8@ImeProc

; 115  : 		LPSTR lpstr, lpstr1;
; 116  : 		//ÂéªÊéâËæìÂÖ•Ê≥ïÁöÑÊòæÁ§∫
; 117  : 		/*
; 118  : 		LPSTR lpstr=GetImeString();
; 119  : 		if(lpstr){
; 120  : 			StockFontBuffer(‰∏¥Êó∂ÂõæÊ†áX-60,‰∏¥Êó∂ÂõæÊ†áY-60,FONT_PRIO_FRONT,FONT_PAL_WHITE,lpstr,0);
; 121  : #ifdef _TALK_WINDOW
; 122  : 			if(g_bTalkWindow) TalkWindow.Update();
; 123  : #endif
; 124  : 		}
; 125  : 		*/
; 126  : 		lpstr1 = GetImeDescString();

  00082	e8 00 00 00 00	 call	 ?GetImeDescString@@YAPADXZ ; GetImeDescString
  00087	89 45 d0	 mov	 DWORD PTR _lpstr1$4[ebp], eax

; 127  : 		if (1 != dwInfo) {

  0008a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?dwInfo@@3KA, 1 ; dwInfo
  00091	0f 84 2c 01 00
	00		 je	 $LN8@ImeProc

; 128  : 			//cary ÁßÄÂá∫pingÁöÑÊó∂Èó¥
; 129  : 			int FontColor = 0;

  00097	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _FontColor$3[ebp], 0

; 130  : 			char* È¢ëÈÅìÊòæÁ§∫Âêç[] = {
; 131  : 				"ÏùºÎ∞òÏ±ÑÌåÖ",

  0009e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp], OFFSET ??_C@_08LDMKCG@?$MA?O?$LJ?$NN?C?$KE?F?C?$AA@

; 132  : 				"Í∑ì ÏÜç Îßê",

  000a5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp+4], OFFSET ??_C@_08MONFNGIO@?$LB?S?5?$LM?S?5?$LI?$LL?$AA@

; 133  : 				"ÌååÌã∞Ï±ÑÌåÖ",

  000ac	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp+8], OFFSET ??_C@_08PHELNDMH@?F?D?F?$LM?C?$KE?F?C?$AA@

; 134  : 				"Î∂ÄÏ°±Ï±ÑÌåÖ",

  000b3	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp+12], OFFSET ??_C@_08NPHMDBID@?$LK?N?A?$LH?C?$KE?F?C?$AA@

; 135  : 				//#ifdef _CHAR_PROFESSION
; 136  : 								"Í≤ΩÎ†•Ï±ÑÎÑê",

  000ba	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp+16], OFFSET ??_C@_08FDACGPGL@?$LA?f?$LH?B?C?$KE?$LD?N?$AA@

; 137  : 								//#endif
; 138  : 								//#ifdef _CHATROOMPROTOCOL
; 139  : 												"Ï±ÑÎÑêÎ∞©Ï±ÑÎÑê",

  000c1	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp+20], OFFSET ??_C@_0L@JJGIFDKI@?C?$KE?$LD?N?$LJ?f?C?$KE?$LD?N?$AA@

; 140  : 												//#endif
; 141  : 												//#ifdef _CHATWORLDWIDEPROTOCOL
; 142  : 																"Ïõî  Îìú",

  000c8	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp+24], OFFSET ??_C@_06HFMOMHB@?$LP?y?5?5?$LF?e?$AA@

; 143  : 																//#endif
; 144  : 																//#ifdef _NB_CHANNEL_ALLSERV
; 145  : 																				"ÏÇ¨Ïö©ÏïàÌï®",

  000cf	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp+28], OFFSET ??_C@_08JNNGLNCD@?$LL?g?$LP?k?$LO?H?G?T?$AA@

; 146  : 																				//#endif
; 147  : 			};
; 148  : 
; 149  : 			lpstr1 = È¢ëÈÅìÊòæÁ§∫Âêç[TalkMode];

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?TalkMode@@3HA ; TalkMode
  000db	8b 4c 85 9c	 mov	 ecx, DWORD PTR _∆µµ¿œ‘ æ√˚$2[ebp+eax*4]
  000df	89 4d d0	 mov	 DWORD PTR _lpstr1$4[ebp], ecx

; 150  : 			StockFontBuffer(10, Â±èÂπïY - 20, FONT_PRIO_FRONT, FontColor, lpstr1, 0);

  000e2	6a 00		 push	 0
  000e4	8b 45 d0	 mov	 eax, DWORD PTR _lpstr1$4[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d c4	 mov	 ecx, DWORD PTR _FontColor$3[ebp]
  000eb	51		 push	 ecx
  000ec	6a 01		 push	 1
  000ee	8b 55 e8	 mov	 edx, DWORD PTR _∆¡ƒªY$[ebp]
  000f1	83 ea 14	 sub	 edx, 20			; 00000014H
  000f4	52		 push	 edx
  000f5	6a 0a		 push	 10			; 0000000aH
  000f7	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  000fc	83 c4 18	 add	 esp, 24			; 00000018H

; 151  : 
; 152  : #ifdef _SHOW_mouse
; 153  : 			char buf[20];
; 154  : 			wsprintfA(buf, "Mouse:%d,%d", mouse.nowPoint.x, mouse.nowPoint.y);
; 155  : 			StockFontBuffer(150, 460 + DISPLACEMENT_Y, FONT_PRIO_FRONT, FontColor, buf, 0);
; 156  : #endif
; 157  : #ifdef _NB_SHOW_MAPNAME
; 158  : 			char mapname[128];
; 159  : #ifdef _NB_ÁÆ°ÁêÜÊ®°Âºè
; 160  : 			sprintf(mapname, "[%s]Îèô:%d ÎÇ®:%d", nowFloorName , nowGx, nowGy);

  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nowGy@@3HA ; nowGy
  00104	50		 push	 eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nowGx@@3HA ; nowGx
  0010b	51		 push	 ecx
  0010c	68 00 00 00 00	 push	 OFFSET ?nowFloorName@@3PADA ; nowFloorName
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LIGBPIEE@?$FL?$CFs?$FN?$LF?$LP?3?$CFd?5?$LD?$LC?3?$CFd?$AA@
  00116	8d 95 14 ff ff
	ff		 lea	 edx, DWORD PTR _mapname$1[ebp]
  0011c	52		 push	 edx
  0011d	e8 00 00 00 00	 call	 _sprintf
  00122	83 c4 14	 add	 esp, 20			; 00000014H

; 161  : 			StockFontBuffer(Â±èÂπïX / 2 - 130, Â±èÂπïY - 20, FONT_PRIO_FRONT, 4, mapname, 0);

  00125	6a 00		 push	 0
  00127	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _mapname$1[ebp]
  0012d	50		 push	 eax
  0012e	6a 04		 push	 4
  00130	6a 01		 push	 1
  00132	8b 4d e8	 mov	 ecx, DWORD PTR _∆¡ƒªY$[ebp]
  00135	83 e9 14	 sub	 ecx, 20			; 00000014H
  00138	51		 push	 ecx
  00139	8b 45 f4	 mov	 eax, DWORD PTR _∆¡ƒªX$[ebp]
  0013c	99		 cdq
  0013d	2b c2		 sub	 eax, edx
  0013f	d1 f8		 sar	 eax, 1
  00141	2d 82 00 00 00	 sub	 eax, 130		; 00000082H
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  0014c	83 c4 18	 add	 esp, 24			; 00000018H

; 162  : 			//sprintf(mapname, "[%s(%d)]Îèô:%d ÎÇ®:%d Mouse:%d.%d", nowFloorName, nowFloor, nowGx, nowGy, mouse.nowPoint.x, mouse.nowPoint.y);
; 163  : 			//StockFontBuffer(Â±èÂπïX / 2 - 130, Â±èÂπïY - 20, FONT_PRIO_FRONT, 4, mapname, 0);
; 164  : #else
; 165  : 			sprintf(mapname, "[%s(%d)]Îèô:%d ÎÇ®:%d", nowFloorName, nowFloor, nowGx, nowGy);
; 166  : 			StockFontBuffer(Â±èÂπïX / 2 - 150, Â±èÂπïY - 20, FONT_PRIO_FRONT, 4, mapname, 0);
; 167  : #endif
; 168  : #endif
; 169  : 			lpstr = "ÏàòÎèôÎ™®Îìú";

  0014f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _lpstr$5[ebp], OFFSET ??_C@_08FBDOGKJC@?$LM?v?$LF?$LP?$LI?p?$LF?e?$AA@

; 170  : 			switch (AI) {

  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AI@@3HA	; AI
  0015b	89 85 4c fe ff
	ff		 mov	 DWORD PTR tv72[ebp], eax
  00161	83 bd 4c fe ff
	ff 01		 cmp	 DWORD PTR tv72[ebp], 1
  00168	74 14		 je	 SHORT $LN10@ImeProc
  0016a	83 bd 4c fe ff
	ff 02		 cmp	 DWORD PTR tv72[ebp], 2
  00171	74 14		 je	 SHORT $LN11@ImeProc
  00173	83 bd 4c fe ff
	ff 03		 cmp	 DWORD PTR tv72[ebp], 3
  0017a	74 14		 je	 SHORT $LN12@ImeProc
  0017c	eb 19		 jmp	 SHORT $LN2@ImeProc
$LN10@ImeProc:

; 171  : 			case AI_ATTACK:
; 172  : 				lpstr = "Í∞ïÏ†úÍ≥µÍ≤©";

  0017e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _lpstr$5[ebp], OFFSET ??_C@_08GHCIMMED@?$LA?$KN?A?$KG?$LA?x?$LA?$NN?$AA@

; 173  : 				break;

  00185	eb 10		 jmp	 SHORT $LN2@ImeProc
$LN11@ImeProc:

; 174  : 			case AI_GUARD:
; 175  : 				lpstr = "ÌïÑÏàòÎ∞©Ïñ¥";

  00187	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _lpstr$5[ebp], OFFSET ??_C@_08OLNGHIAG@?G?J?$LM?v?$LJ?f?$LO?n?$AA@

; 176  : 				break;

  0018e	eb 07		 jmp	 SHORT $LN2@ImeProc
$LN12@ImeProc:

; 177  : 			case AI_SELECT:
; 178  : 				lpstr = "Ôº°Ôº©Î™®Îìú";

  00190	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _lpstr$5[ebp], OFFSET ??_C@_08HEDKPKHO@?$KD?A?$KD?I?$LI?p?$LF?e?$AA@
$LN2@ImeProc:

; 179  : 				break;
; 180  : 			}
; 181  : 			StockFontBuffer(540 + DISPLACEMENT_X, 460 + DISPLACEMENT_Y, FONT_PRIO_FRONT, FontColor, lpstr, 0);

  00197	6a 00		 push	 0
  00199	8b 45 dc	 mov	 eax, DWORD PTR _lpstr$5[ebp]
  0019c	50		 push	 eax
  0019d	8b 4d c4	 mov	 ecx, DWORD PTR _FontColor$3[ebp]
  001a0	51		 push	 ecx
  001a1	6a 01		 push	 1
  001a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  001a9	81 c2 cc 01 00
	00		 add	 edx, 460		; 000001ccH
  001af	52		 push	 edx
  001b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?DISPLACEMENT_X@@3HA ; DISPLACEMENT_X
  001b5	05 1c 02 00 00	 add	 eax, 540		; 0000021cH
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  001c0	83 c4 18	 add	 esp, 24			; 00000018H
$LN8@ImeProc:

; 182  : 		}
; 183  : 	}
; 184  : 	// Terry add 2003/12/16 for ‰∫§ÊòìËßÜÁ™óÂºÄÂêØÊó∂,ÊòæÁ§∫Áâ©ÂìÅËØ¥Êòé‰∏çÊòæÁ§∫ËæìÂÖ•Ê≥ï
; 185  : 	bShowItemExplain = FALSE;

  001c3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bShowItemExplain@@3HA, 0 ; bShowItemExplain

; 186  : 	// end
; 187  : }

  001cd	52		 push	 edx
  001ce	8b cd		 mov	 ecx, ebp
  001d0	50		 push	 eax
  001d1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@ImeProc
  001d7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001dc	58		 pop	 eax
  001dd	5a		 pop	 edx
  001de	5f		 pop	 edi
  001df	5e		 pop	 esi
  001e0	5b		 pop	 ebx
  001e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e4	33 cd		 xor	 ecx, ebp
  001e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001eb	81 c4 b4 01 00
	00		 add	 esp, 436		; 000001b4H
  001f1	3b ec		 cmp	 ebp, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	8b e5		 mov	 esp, ebp
  001fa	5d		 pop	 ebp
  001fb	c3		 ret	 0
$LN17@ImeProc:
  001fc	02 00 00 00	 DD	 2
  00200	00 00 00 00	 DD	 $LN16@ImeProc
$LN16@ImeProc:
  00204	9c ff ff ff	 DD	 -100			; ffffff9cH
  00208	20 00 00 00	 DD	 32			; 00000020H
  0020c	00 00 00 00	 DD	 $LN14@ImeProc
  00210	14 ff ff ff	 DD	 -236			; ffffff14H
  00214	80 00 00 00	 DD	 128			; 00000080H
  00218	00 00 00 00	 DD	 $LN15@ImeProc
$LN15@ImeProc:
  0021c	6d		 DB	 109			; 0000006dH
  0021d	61		 DB	 97			; 00000061H
  0021e	70		 DB	 112			; 00000070H
  0021f	6e		 DB	 110			; 0000006eH
  00220	61		 DB	 97			; 00000061H
  00221	6d		 DB	 109			; 0000006dH
  00222	65		 DB	 101			; 00000065H
  00223	00		 DB	 0
$LN14@ImeProc:
  00224	e9		 DB	 -23			; ffffffe9H
  00225	a2		 DB	 -94			; ffffffa2H
  00226	91		 DB	 -111			; ffffff91H
  00227	e9		 DB	 -23			; ffffffe9H
  00228	81		 DB	 -127			; ffffff81H
  00229	93		 DB	 -109			; ffffff93H
  0022a	e6		 DB	 -26			; ffffffe6H
  0022b	98		 DB	 -104			; ffffff98H
  0022c	be		 DB	 -66			; ffffffbeH
  0022d	e7		 DB	 -25			; ffffffe7H
  0022e	a4		 DB	 -92			; ffffffa4H
  0022f	ba		 DB	 -70			; ffffffbaH
  00230	e5		 DB	 -27			; ffffffe5H
  00231	90		 DB	 -112			; ffffff90H
  00232	8d		 DB	 -115			; ffffff8dH
  00233	00		 DB	 0
?ImeProc@@YAXXZ ENDP					; ImeProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\ime.cpp
;	COMDAT ?NewShowBottomLineString@@YAXHPAD@Z
_TEXT	SEGMENT
_lpstr1$ = -56						; size = 4
_œ‘ æY$ = -44						; size = 4
_œ‘ æX$ = -32						; size = 4
_∆¡ƒªY$ = -20						; size = 4
_∆¡ƒªX$ = -8						; size = 4
_iColor$ = 8						; size = 4
_lpstr$ = 12						; size = 4
?NewShowBottomLineString@@YAXHPAD@Z PROC		; NewShowBottomLineString, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 55   : 	int Â±èÂπïX, Â±èÂπïY;
; 56   : 	int ÊòæÁ§∫X, ÊòæÁ§∫Y;
; 57   : 	if (ResoMode == ÂàÜËæ®Áéá::mode800) {

  0001e	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?ResoMode@@3HA, 3 ; ResoMode
  00025	75 10		 jne	 SHORT $LN2@NewShowBot

; 58   : 		Â±èÂπïX = 800 / 2;

  00027	c7 45 f8 90 01
	00 00		 mov	 DWORD PTR _∆¡ƒªX$[ebp], 400 ; 00000190H

; 59   : 		Â±èÂπïY = 600 / 2;

  0002e	c7 45 ec 2c 01
	00 00		 mov	 DWORD PTR _∆¡ƒªY$[ebp], 300 ; 0000012cH
  00035	eb 27		 jmp	 SHORT $LN3@NewShowBot
$LN2@NewShowBot:

; 60   : 	}
; 61   : 	else if (ResoMode == ÂàÜËæ®Áéá::mode1024) {

  00037	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?ResoMode@@3HA, 4 ; ResoMode
  0003e	75 10		 jne	 SHORT $LN4@NewShowBot

; 62   : 		Â±èÂπïX = 1024 / 2;

  00040	c7 45 f8 00 02
	00 00		 mov	 DWORD PTR _∆¡ƒªX$[ebp], 512 ; 00000200H

; 63   : 		Â±èÂπïY = 768 / 2;

  00047	c7 45 ec 80 01
	00 00		 mov	 DWORD PTR _∆¡ƒªY$[ebp], 384 ; 00000180H

; 64   : 	}
; 65   : 	else {

  0004e	eb 0e		 jmp	 SHORT $LN3@NewShowBot
$LN4@NewShowBot:

; 66   : 		Â±èÂπïX = 640 / 2;

  00050	c7 45 f8 40 01
	00 00		 mov	 DWORD PTR _∆¡ƒªX$[ebp], 320 ; 00000140H

; 67   : 		Â±èÂπïY = 480 / 2;

  00057	c7 45 ec f0 00
	00 00		 mov	 DWORD PTR _∆¡ƒªY$[ebp], 240 ; 000000f0H
$LN3@NewShowBot:

; 68   : 	}
; 69   : 	LPSTR lpstr1 = GetImeString();

  0005e	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  00063	89 45 c8	 mov	 DWORD PTR _lpstr1$[ebp], eax

; 70   : 	dwInfo = 0;

  00066	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwInfo@@3KA, 0 ; dwInfo

; 71   : 	if (!lpstr1 && lpstr[0] != 0) {

  00070	83 7d c8 00	 cmp	 DWORD PTR _lpstr1$[ebp], 0
  00074	0f 85 8c 00 00
	00		 jne	 $LN1@NewShowBot
  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	6b c8 00	 imul	 ecx, eax, 0
  00082	8b 55 0c	 mov	 edx, DWORD PTR _lpstr$[ebp]
  00085	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00089	85 c0		 test	 eax, eax
  0008b	74 79		 je	 SHORT $LN1@NewShowBot

; 72   : 		dwInfo = 1;

  0008d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?dwInfo@@3KA, 1 ; dwInfo

; 73   : 		if (mouse.nowPoint.x > Â±èÂπïX) {

  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A
  0009c	3b 45 f8	 cmp	 eax, DWORD PTR _∆¡ƒªX$[ebp]
  0009f	7e 1c		 jle	 SHORT $LN7@NewShowBot

; 74   : 			ÊòæÁ§∫X = mouse.nowPoint.x - 40 - strlen(lpstr);

  000a1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?mouse@@3UMOUSE@@A
  000a7	83 ee 28	 sub	 esi, 40			; 00000028H
  000aa	8b 45 0c	 mov	 eax, DWORD PTR _lpstr$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _strlen
  000b3	83 c4 04	 add	 esp, 4
  000b6	2b f0		 sub	 esi, eax
  000b8	89 75 e0	 mov	 DWORD PTR _œ‘ æX$[ebp], esi

; 75   : 		}
; 76   : 		else {

  000bb	eb 0b		 jmp	 SHORT $LN8@NewShowBot
$LN7@NewShowBot:

; 77   : 			ÊòæÁ§∫X = mouse.nowPoint.x + 40;

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A
  000c2	83 c0 28	 add	 eax, 40			; 00000028H
  000c5	89 45 e0	 mov	 DWORD PTR _œ‘ æX$[ebp], eax
$LN8@NewShowBot:

; 78   : 		}
; 79   : 		if (mouse.nowPoint.y > Â±èÂπïY) {

  000c8	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  000cd	3b 45 ec	 cmp	 eax, DWORD PTR _∆¡ƒªY$[ebp]
  000d0	7e 0d		 jle	 SHORT $LN9@NewShowBot

; 80   : 			ÊòæÁ§∫Y = mouse.nowPoint.y - 40;

  000d2	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  000d7	83 e8 28	 sub	 eax, 40			; 00000028H
  000da	89 45 d4	 mov	 DWORD PTR _œ‘ æY$[ebp], eax

; 81   : 		}
; 82   : 		else {

  000dd	eb 0b		 jmp	 SHORT $LN10@NewShowBot
$LN9@NewShowBot:

; 83   : 			ÊòæÁ§∫Y = mouse.nowPoint.y + 40;

  000df	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  000e4	83 c0 28	 add	 eax, 40			; 00000028H
  000e7	89 45 d4	 mov	 DWORD PTR _œ‘ æY$[ebp], eax
$LN10@NewShowBot:

; 84   : 		}
; 85   : 		StockFontBuffer(ÊòæÁ§∫X, ÊòæÁ§∫Y, FONT_PRIO_FRONT, iColor, lpstr, 0);

  000ea	6a 00		 push	 0
  000ec	8b 45 0c	 mov	 eax, DWORD PTR _lpstr$[ebp]
  000ef	50		 push	 eax
  000f0	8b 4d 08	 mov	 ecx, DWORD PTR _iColor$[ebp]
  000f3	51		 push	 ecx
  000f4	6a 01		 push	 1
  000f6	8b 55 d4	 mov	 edx, DWORD PTR _œ‘ æY$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 e0	 mov	 eax, DWORD PTR _œ‘ æX$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00103	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@NewShowBot:

; 86   : 	}
; 87   : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  0010f	3b ec		 cmp	 ebp, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
?NewShowBottomLineString@@YAXHPAD@Z ENDP		; NewShowBottomLineString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\ime.cpp
;	COMDAT ?strstr3@@YAHPAD0@Z
_TEXT	SEGMENT
_code$1 = -41						; size = 1
_num$ = -32						; size = 4
_strSearchTemp$ = -20					; size = 4
_strTemp$ = -8						; size = 4
_str$ = 8						; size = 4
_strSearch$ = 12					; size = 4
?strstr3@@YAHPAD0@Z PROC				; strstr3, COMDAT

; 28   : int strstr3(char* str, char* strSearch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 29   : 	char* strTemp;
; 30   : 	char* strSearchTemp;
; 31   : 	int num = 0;

  0001e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _num$[ebp], 0
$LN2@strstr3:

; 32   : 	while (*str != '\0') {

  00025	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00028	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0002b	85 c9		 test	 ecx, ecx
  0002d	0f 84 83 00 00
	00		 je	 $LN3@strstr3

; 33   : 		strTemp = str;

  00033	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _strTemp$[ebp], eax

; 34   : 		strSearchTemp = strSearch;

  00039	8b 45 0c	 mov	 eax, DWORD PTR _strSearch$[ebp]
  0003c	89 45 ec	 mov	 DWORD PTR _strSearchTemp$[ebp], eax
$LN4@strstr3:

; 35   : 		while ((*strTemp == *strSearchTemp) && (*strTemp != '\0') && (*strSearchTemp != '\0')) {

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _strTemp$[ebp]
  00042	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00045	8b 55 ec	 mov	 edx, DWORD PTR _strSearchTemp$[ebp]
  00048	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0004b	3b c8		 cmp	 ecx, eax
  0004d	75 28		 jne	 SHORT $LN5@strstr3
  0004f	8b 45 f8	 mov	 eax, DWORD PTR _strTemp$[ebp]
  00052	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00055	85 c9		 test	 ecx, ecx
  00057	74 1e		 je	 SHORT $LN5@strstr3
  00059	8b 45 ec	 mov	 eax, DWORD PTR _strSearchTemp$[ebp]
  0005c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0005f	85 c9		 test	 ecx, ecx
  00061	74 14		 je	 SHORT $LN5@strstr3

; 36   : 			strTemp++;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _strTemp$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 f8	 mov	 DWORD PTR _strTemp$[ebp], eax

; 37   : 			strSearchTemp++;

  0006c	8b 45 ec	 mov	 eax, DWORD PTR _strSearchTemp$[ebp]
  0006f	83 c0 01	 add	 eax, 1
  00072	89 45 ec	 mov	 DWORD PTR _strSearchTemp$[ebp], eax

; 38   : 		}

  00075	eb c8		 jmp	 SHORT $LN4@strstr3
$LN5@strstr3:

; 39   : 		if (*strSearchTemp == '\0') {

  00077	8b 45 ec	 mov	 eax, DWORD PTR _strSearchTemp$[ebp]
  0007a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0007d	85 c9		 test	 ecx, ecx
  0007f	75 09		 jne	 SHORT $LN6@strstr3

; 40   : 			num++;

  00081	8b 45 e0	 mov	 eax, DWORD PTR _num$[ebp]
  00084	83 c0 01	 add	 eax, 1
  00087	89 45 e0	 mov	 DWORD PTR _num$[ebp], eax
$LN6@strstr3:

; 41   : 		}
; 42   : 		unsigned char code = *str;

  0008a	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0008d	8a 08		 mov	 cl, BYTE PTR [eax]
  0008f	88 4d d7	 mov	 BYTE PTR _code$1[ebp], cl

; 43   : 		//Âà§Êñ≠ÊòØÂê¶‰∏∫‰∏≠ÊñáÔºåÊòØÂàôÂú∞ÂùÄÂä†2ÔºåÂê¶ÂàôÂä†1
; 44   : 		if (code >= 0x80)

  00092	0f b6 45 d7	 movzx	 eax, BYTE PTR _code$1[ebp]
  00096	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0009b	7c 0b		 jl	 SHORT $LN7@strstr3

; 45   : 			str += 2;

  0009d	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000a0	83 c0 02	 add	 eax, 2
  000a3	89 45 08	 mov	 DWORD PTR _str$[ebp], eax

; 46   : 		else

  000a6	eb 09		 jmp	 SHORT $LN8@strstr3
$LN7@strstr3:

; 47   : 			str++;

  000a8	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000ab	83 c0 01	 add	 eax, 1
  000ae	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
$LN8@strstr3:

; 48   : 	}

  000b1	e9 6f ff ff ff	 jmp	 $LN2@strstr3
$LN3@strstr3:

; 49   : 	return num;

  000b6	8b 45 e0	 mov	 eax, DWORD PTR _num$[ebp]

; 50   : }

  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
?strstr3@@YAHPAD0@Z ENDP				; strstr3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\ime.cpp
;	COMDAT ?ShowBottomLineString@@YAXHPAD@Z
_TEXT	SEGMENT
_lpstr1$ = -8						; size = 4
_iColor$ = 8						; size = 4
_lpstr$ = 12						; size = 4
?ShowBottomLineString@@YAXHPAD@Z PROC			; ShowBottomLineString, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 20   : 	LPSTR lpstr1 = GetImeString();

  0001e	e8 00 00 00 00	 call	 ?GetImeString@@YAPADXZ	; GetImeString
  00023	89 45 f8	 mov	 DWORD PTR _lpstr1$[ebp], eax

; 21   : 	dwInfo = 0;

  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwInfo@@3KA, 0 ; dwInfo

; 22   : 	if (!lpstr1 && lpstr[0] != 0) {

  00030	83 7d f8 00	 cmp	 DWORD PTR _lpstr1$[ebp], 0
  00034	75 40		 jne	 SHORT $LN1@ShowBottom
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	8b 55 0c	 mov	 edx, DWORD PTR _lpstr$[ebp]
  00041	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00045	85 c0		 test	 eax, eax
  00047	74 2d		 je	 SHORT $LN1@ShowBottom

; 23   : 		dwInfo = 1;

  00049	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?dwInfo@@3KA, 1 ; dwInfo

; 24   : 		StockFontBuffer(8, 460 + DISPLACEMENT_Y, FONT_PRIO_FRONT, iColor, lpstr, 0);

  00053	6a 00		 push	 0
  00055	8b 45 0c	 mov	 eax, DWORD PTR _lpstr$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _iColor$[ebp]
  0005c	51		 push	 ecx
  0005d	6a 01		 push	 1
  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?DISPLACEMENT_Y@@3HA ; DISPLACEMENT_Y
  00065	81 c2 cc 01 00
	00		 add	 edx, 460		; 000001ccH
  0006b	52		 push	 edx
  0006c	6a 08		 push	 8
  0006e	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  00073	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@ShowBottom:

; 25   : 	}
; 26   : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?ShowBottomLineString@@YAXHPAD@Z ENDP			; ShowBottomLineString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  0001e	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00023	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00026	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00029	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 __vsprintf_l
  0003c	83 c4 10	 add	 esp, 16			; 00000010H
  0003f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00042	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1787 :     return _Result;

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1788 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  0001e	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00029	52		 push	 edx
  0002a	6a ff		 push	 -1
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 __vsnprintf_l
  00035	83 c4 14	 add	 esp, 20			; 00000014H

; 1459 :     #pragma warning(pop)
; 1460 : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1386 :     int const _Result = __stdio_common_vsprintf(

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	83 ca 01	 or	 edx, 1
  0003e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00041	50		 push	 eax
  00042	52		 push	 edx
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00049	83 c4 1c	 add	 esp, 28			; 0000001cH
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00056	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0005a	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  0005c	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00066	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00068	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  0006b	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  00071	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1391 : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  0001e	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
