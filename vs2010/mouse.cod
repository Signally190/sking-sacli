; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Administrator\Desktop\????? ??\????? ??\Client Source Code\system\mouse.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?mouse@@3UMOUSE@@A				; mouse
PUBLIC	?HitFontNo@@3HA					; HitFontNo
PUBLIC	?HitDispNo@@3HA					; HitDispNo
PUBLIC	?OneLineInfoStr@@3PADA				; OneLineInfoStr
PUBLIC	?BoxColor@@3HA					; BoxColor
PUBLIC	?oneLineInfoFlag@@3HA				; oneLineInfoFlag
PUBLIC	?BoxColorTbl@@3PAEA				; BoxColorTbl
_BSS	SEGMENT
?mouse@@3UMOUSE@@A DB 050H DUP (?)			; mouse
?HitFontNo@@3HA DD 01H DUP (?)				; HitFontNo
?HitDispNo@@3HA DD 01H DUP (?)				; HitDispNo
?OneLineInfoStr@@3PADA DB 0100H DUP (?)			; OneLineInfoStr
?BoxColor@@3HA DD 01H DUP (?)				; BoxColor
?cnt@?1??HitMouseCursor@@YAXXZ@4HA DD 01H DUP (?)	; `HitMouseCursor'::`2'::cnt
_BSS	ENDS
_DATA	SEGMENT
?ridePetTable@@3PAUtagRidePetTable@@A DD 018a88H	; ridePetTable
	DD	0186a0H
	DD	018800H
	DD	00H
	DD	018a89H
	DD	0186a5H
	DD	018800H
	DD	00H
	DD	018a8aH
	DD	0186aaH
	DD	018800H
	DD	00H
	DD	018a8bH
	DD	0186afH
	DD	018800H
	DD	00H
	DD	018a8cH
	DD	0186a0H
	DD	0187e9H
	DD	00H
	DD	018a8dH
	DD	0186a5H
	DD	0187e7H
	DD	00H
	DD	018a8eH
	DD	0186aaH
	DD	0187eaH
	DD	00H
	DD	018a8fH
	DD	0186afH
	DD	0187e8H
	DD	00H
	DD	018a90H
	DD	01895cH
	DD	018814H
	DD	00H
	DD	018a91H
	DD	018961H
	DD	018815H
	DD	00H
	DD	018e65H
	DD	018961H
	DD	018cc8H
	DD	00H
	DD	018e5aH
	DD	018961H
	DD	018c9cH
	DD	00H
	DD	018a92H
	DD	0186b4H
	DD	01882cH
	DD	00H
	DD	018a93H
	DD	0186b9H
	DD	01882cH
	DD	00H
	DD	018a94H
	DD	0186beH
	DD	01882cH
	DD	00H
	DD	018a95H
	DD	0186c3H
	DD	01882cH
	DD	00H
	DD	018a96H
	DD	0186b4H
	DD	0187e8H
	DD	00H
	DD	018a97H
	DD	0186b9H
	DD	0187e9H
	DD	00H
	DD	018a98H
	DD	0186beH
	DD	0187e7H
	DD	00H
	DD	018a99H
	DD	0186c3H
	DD	0187eaH
	DD	00H
	DD	018a9aH
	DD	018966H
	DD	018814H
	DD	00H
	DD	018a9bH
	DD	01896bH
	DD	018815H
	DD	00H
	DD	018e64H
	DD	01896bH
	DD	018cc8H
	DD	00H
	DD	018e62H
	DD	01896bH
	DD	018c9cH
	DD	00H
	DD	018a9cH
	DD	0186c8H
	DD	0187ffH
	DD	00H
	DD	018a9dH
	DD	0186cdH
	DD	0187ffH
	DD	00H
	DD	018a9eH
	DD	0186d2H
	DD	0187ffH
	DD	00H
	DD	018a9fH
	DD	0186d7H
	DD	0187ffH
	DD	00H
	DD	018aa0H
	DD	0186c8H
	DD	0187e8H
	DD	00H
	DD	018aa1H
	DD	0186cdH
	DD	0187eaH
	DD	00H
	DD	018aa2H
	DD	0186d2H
	DD	0187e7H
	DD	00H
	DD	018aa3H
	DD	0186d7H
	DD	0187e9H
	DD	00H
	DD	018aa4H
	DD	018970H
	DD	018814H
	DD	00H
	DD	018aa5H
	DD	018975H
	DD	018815H
	DD	00H
	DD	018e4dH
	DD	018975H
	DD	018cc8H
	DD	00H
	DD	018e57H
	DD	018975H
	DD	018c9cH
	DD	00H
	DD	018aa6H
	DD	0186dcH
	DD	018801H
	DD	00H
	DD	018aa7H
	DD	0186e1H
	DD	018801H
	DD	00H
	DD	018aa8H
	DD	0186e6H
	DD	018801H
	DD	00H
	DD	018aa9H
	DD	0186ebH
	DD	018801H
	DD	00H
	DD	018aaaH
	DD	0186dcH
	DD	0187e9H
	DD	00H
	DD	018aabH
	DD	0186e1H
	DD	0187e7H
	DD	00H
	DD	018aacH
	DD	0186e6H
	DD	0187eaH
	DD	00H
	DD	018aadH
	DD	0186ebH
	DD	0187e8H
	DD	00H
	DD	018aaeH
	DD	01897aH
	DD	018814H
	DD	00H
	DD	018aafH
	DD	01897fH
	DD	018815H
	DD	00H
	DD	018e4eH
	DD	01897fH
	DD	018cc8H
	DD	00H
	DD	018e58H
	DD	01897fH
	DD	018c9cH
	DD	00H
	DD	018ab0H
	DD	0186f0H
	DD	01882cH
	DD	00H
	DD	018ab1H
	DD	0186f5H
	DD	01882cH
	DD	00H
	DD	018ab2H
	DD	0186faH
	DD	01882cH
	DD	00H
	DD	018ab3H
	DD	0186ffH
	DD	01882cH
	DD	00H
	DD	018ab4H
	DD	0186f0H
	DD	0187e8H
	DD	00H
	DD	018ab5H
	DD	0186f5H
	DD	0187e7H
	DD	00H
	DD	018ab6H
	DD	0186faH
	DD	0187eaH
	DD	00H
	DD	018ab7H
	DD	0186ffH
	DD	0187e9H
	DD	00H
	DD	018ab8H
	DD	018984H
	DD	018814H
	DD	00H
	DD	018ab9H
	DD	018989H
	DD	018815H
	DD	00H
	DD	018e55H
	DD	018989H
	DD	018cc8H
	DD	00H
	DD	018e60H
	DD	018989H
	DD	018c9cH
	DD	00H
	DD	018abaH
	DD	018704H
	DD	018801H
	DD	00H
	DD	018abbH
	DD	018709H
	DD	018801H
	DD	00H
	DD	018abcH
	DD	01870eH
	DD	018801H
	DD	00H
	DD	018abdH
	DD	018713H
	DD	018801H
	DD	00H
	DD	018abeH
	DD	018704H
	DD	0187e9H
	DD	00H
	DD	018abfH
	DD	018709H
	DD	0187e8H
	DD	00H
	DD	018ac0H
	DD	01870eH
	DD	0187eaH
	DD	00H
	DD	018ac1H
	DD	018713H
	DD	0187e7H
	DD	00H
	DD	018ac2H
	DD	01898eH
	DD	018814H
	DD	00H
	DD	018ac3H
	DD	018993H
	DD	018815H
	DD	00H
	DD	018e56H
	DD	018993H
	DD	018cc8H
	DD	00H
	DD	018e61H
	DD	018993H
	DD	018c9cH
	DD	00H
	DD	018ac4H
	DD	018718H
	DD	018802H
	DD	00H
	DD	018ac5H
	DD	01871dH
	DD	018802H
	DD	00H
	DD	018ac6H
	DD	018722H
	DD	018802H
	DD	00H
	DD	018ac7H
	DD	018727H
	DD	018802H
	DD	00H
	DD	018ac8H
	DD	018718H
	DD	0187e7H
	DD	00H
	DD	018ac9H
	DD	01871dH
	DD	0187eaH
	DD	00H
	DD	018acaH
	DD	018722H
	DD	0187e8H
	DD	00H
	DD	018acbH
	DD	018727H
	DD	0187e9H
	DD	00H
	DD	018accH
	DD	018998H
	DD	018814H
	DD	00H
	DD	018acdH
	DD	01899dH
	DD	018815H
	DD	00H
	DD	018e4fH
	DD	01899dH
	DD	018cc8H
	DD	00H
	DD	018e59H
	DD	01899dH
	DD	018c9cH
	DD	00H
	DD	018aceH
	DD	01872cH
	DD	018802H
	DD	00H
	DD	018acfH
	DD	018731H
	DD	018802H
	DD	00H
	DD	018ad0H
	DD	018736H
	DD	018802H
	DD	00H
	DD	018ad1H
	DD	01873bH
	DD	018802H
	DD	00H
	DD	018ad2H
	DD	01872cH
	DD	0187e7H
	DD	00H
	DD	018ad3H
	DD	018731H
	DD	0187e9H
	DD	00H
	DD	018ad4H
	DD	018736H
	DD	0187eaH
	DD	00H
	DD	018ad5H
	DD	01873bH
	DD	0187e8H
	DD	00H
	DD	018ad6H
	DD	0189a2H
	DD	018814H
	DD	00H
	DD	018ad7H
	DD	0189a7H
	DD	018815H
	DD	00H
	DD	018e50H
	DD	0189a7H
	DD	018cc8H
	DD	00H
	DD	018e5bH
	DD	0189a7H
	DD	018c9cH
	DD	00H
	DD	018ad8H
	DD	018740H
	DD	018800H
	DD	00H
	DD	018ad9H
	DD	018745H
	DD	018800H
	DD	00H
	DD	018adaH
	DD	01874aH
	DD	018800H
	DD	00H
	DD	018adbH
	DD	01874fH
	DD	018800H
	DD	00H
	DD	018adcH
	DD	018740H
	DD	0187eaH
	DD	00H
	DD	018addH
	DD	018745H
	DD	0187e9H
	DD	00H
	DD	018adeH
	DD	01874aH
	DD	0187e7H
	DD	00H
	DD	018adfH
	DD	01874fH
	DD	0187e8H
	DD	00H
	DD	018ae0H
	DD	0189acH
	DD	018814H
	DD	00H
	DD	018ae1H
	DD	0189b1H
	DD	018815H
	DD	00H
	DD	018e52H
	DD	0189b1H
	DD	018cc8H
	DD	00H
	DD	018e5dH
	DD	0189b1H
	DD	018c9cH
	DD	00H
	DD	018ae2H
	DD	018754H
	DD	0187ffH
	DD	00H
	DD	018ae3H
	DD	018759H
	DD	0187ffH
	DD	00H
	DD	018ae4H
	DD	01875eH
	DD	0187ffH
	DD	00H
	DD	018ae5H
	DD	018763H
	DD	0187ffH
	DD	00H
	DD	018ae6H
	DD	018754H
	DD	0187e8H
	DD	00H
	DD	018ae7H
	DD	018759H
	DD	0187eaH
	DD	00H
	DD	018ae8H
	DD	01875eH
	DD	0187e9H
	DD	00H
	DD	018ae9H
	DD	018763H
	DD	0187e7H
	DD	00H
	DD	018aeaH
	DD	0189b6H
	DD	018814H
	DD	00H
	DD	018aebH
	DD	0189bbH
	DD	018815H
	DD	00H
	DD	018e51H
	DD	0189bbH
	DD	018cc8H
	DD	00H
	DD	018e5cH
	DD	0189bbH
	DD	018c9cH
	DD	00H
	DD	018aecH
	DD	018768H
	DD	018801H
	DD	00H
	DD	018aedH
	DD	01876dH
	DD	018801H
	DD	00H
	DD	018aeeH
	DD	018772H
	DD	018801H
	DD	00H
	DD	018aefH
	DD	018777H
	DD	018801H
	DD	00H
	DD	018af0H
	DD	018768H
	DD	0187e9H
	DD	00H
	DD	018af1H
	DD	01876dH
	DD	0187e8H
	DD	00H
	DD	018af2H
	DD	018772H
	DD	0187e7H
	DD	00H
	DD	018af3H
	DD	018777H
	DD	0187eaH
	DD	00H
	DD	018af4H
	DD	0189c0H
	DD	018814H
	DD	00H
	DD	018af5H
	DD	0189c5H
	DD	018815H
	DD	00H
	DD	018e54H
	DD	0189c5H
	DD	018cc8H
	DD	00H
	DD	018e5fH
	DD	0189c5H
	DD	018c9cH
	DD	00H
	DD	018af6H
	DD	01877cH
	DD	01882cH
	DD	00H
	DD	018af7H
	DD	018781H
	DD	01882cH
	DD	00H
	DD	018af8H
	DD	018786H
	DD	01882cH
	DD	00H
	DD	018af9H
	DD	01878bH
	DD	01882cH
	DD	00H
	DD	018afaH
	DD	01877cH
	DD	0187eaH
	DD	00H
	DD	018afbH
	DD	018781H
	DD	0187e7H
	DD	00H
	DD	018afcH
	DD	018786H
	DD	0187e9H
	DD	00H
	DD	018afdH
	DD	01878bH
	DD	0187e8H
	DD	00H
	DD	018afeH
	DD	0189caH
	DD	018814H
	DD	00H
	DD	018affH
	DD	0189cfH
	DD	018815H
	DD	00H
	DD	018e53H
	DD	0189cfH
	DD	018cc8H
	DD	00H
	DD	018e5eH
	DD	0189cfH
	DD	018c9cH
	DD	00H
	DD	018b3bH
	DD	018b39H
	DD	018b3aH
	DD	00H
	DD	018b3bH
	DD	018b3aH
	DD	018b39H
	DD	00H
?RideCodeMode@@3PAUtagRideCodeMode@@A DD 018816H	; RideCodeMode
	DD	01H
	DD	018806H
	DD	02H
	DD	01880aH
	DD	04H
	DD	0187b7H
	DD	08H
	DD	0187c0H
	DD	010H
	DD	0187bbH
	DD	020H
	DD	0187faH
	DD	040H
	DD	0187d6H
	DD	080H
	DD	018814H
	DD	0100H
	DD	018815H
	DD	0200H
	DD	018c9cH
	DD	0800H
	DD	018cc8H
	DD	0400H
	DD	018812H
	DD	01000H
	DD	018811H
	DD	02000H
	DD	018a28H
	DD	04000H
	DD	018a2bH
	DD	08000H
	DD	018f30H
	DD	010000H
	DD	018f31H
	DD	020000H
	DD	018f68H
	DD	040000H
	DD	0187fcH
	DD	080000H
	DD	0187d3H
	DD	0100000H
	DD	018fa9H
	DD	0200000H
	DD	018faaH
	DD	0400000H
	DD	018a09H
	DD	0800000H
	DD	018a0aH
	DD	01000000H
	DD	019394H
	DD	02000000H
	DD	0187b2H
	DD	04000000H
?RideNoList@@3PAUtagRideNoList@@A DD 018bb9H		; RideNoList
	DD	018bbaH
	DD	018bbbH
	DD	018bbcH
	DD	018bbdH
	DD	018bbeH
	DD	018bbfH
	DD	018bc0H
	DD	018a90H
	DD	018a91H
	DD	018e5aH
	DD	018e65H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee5H
	DD	018f0dH
	DD	018f19H
	DD	018f76H
	ORG $+32
	DD	018bc1H
	DD	018bc2H
	DD	018bc3H
	DD	018bc4H
	DD	018bc5H
	DD	018bc6H
	DD	018bc7H
	DD	018bc8H
	DD	018a9aH
	DD	018a9bH
	DD	018e62H
	DD	018e64H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee6H
	DD	018f0eH
	DD	018f1aH
	DD	018f77H
	ORG $+32
	DD	018bc9H
	DD	018bcaH
	DD	018bcbH
	DD	018bccH
	DD	018bcdH
	DD	018bceH
	DD	018bcfH
	DD	018bd0H
	DD	018aa4H
	DD	018aa5H
	DD	018e57H
	DD	018e4dH
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee7H
	DD	018f0fH
	DD	018f1bH
	DD	018f78H
	ORG $+32
	DD	018bd1H
	DD	018bd2H
	DD	018bd3H
	DD	018bd4H
	DD	018bd5H
	DD	018bd6H
	DD	018bd7H
	DD	018bd8H
	DD	018aaeH
	DD	018aafH
	DD	018e58H
	DD	018e4eH
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee8H
	DD	018f10H
	DD	018f1cH
	DD	018f79H
	ORG $+32
	DD	018bd9H
	DD	018bdaH
	DD	018bdbH
	DD	018bdcH
	DD	018bddH
	DD	018bdeH
	DD	018bdfH
	DD	018be0H
	DD	018ab8H
	DD	018ab9H
	DD	018e60H
	DD	018e55H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ee9H
	DD	018f11H
	DD	018f1dH
	DD	018f7aH
	ORG $+32
	DD	018be1H
	DD	018be2H
	DD	018be3H
	DD	018be4H
	DD	018be5H
	DD	018be6H
	DD	018be7H
	DD	018be8H
	DD	018ac2H
	DD	018ac3H
	DD	018e61H
	DD	018e56H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eeaH
	DD	018f12H
	DD	018f1eH
	DD	018f7bH
	ORG $+32
	DD	018be9H
	DD	018beaH
	DD	018bebH
	DD	018becH
	DD	018bedH
	DD	018beeH
	DD	018befH
	DD	018bf0H
	DD	018accH
	DD	018acdH
	DD	018e59H
	DD	018e4fH
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eebH
	DD	018f13H
	DD	018f1fH
	DD	018f7cH
	ORG $+32
	DD	018bf1H
	DD	018bf2H
	DD	018bf3H
	DD	018bf4H
	DD	018bf5H
	DD	018bf6H
	DD	018bf7H
	DD	018bf8H
	DD	018ad6H
	DD	018ad7H
	DD	018e5bH
	DD	018e50H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eecH
	DD	018f14H
	DD	018f20H
	DD	018f7dH
	ORG $+32
	DD	018bf9H
	DD	018bfaH
	DD	018bfbH
	DD	018bfcH
	DD	018bfdH
	DD	018bfeH
	DD	018bffH
	DD	018c00H
	DD	018ae0H
	DD	018ae1H
	DD	018e5dH
	DD	018e52H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eedH
	DD	018f15H
	DD	018f21H
	DD	018f7eH
	ORG $+32
	DD	018c01H
	DD	018c02H
	DD	018c03H
	DD	018c04H
	DD	018c05H
	DD	018c06H
	DD	018c07H
	DD	018c08H
	DD	018aeaH
	DD	018aebH
	DD	018e5cH
	DD	018e51H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eeeH
	DD	018f16H
	DD	018f22H
	DD	018f7fH
	ORG $+32
	DD	018c09H
	DD	018c0aH
	DD	018c0bH
	DD	018c0cH
	DD	018c0dH
	DD	018c0eH
	DD	018c0fH
	DD	018c10H
	DD	018af4H
	DD	018af5H
	DD	018e5fH
	DD	018e54H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018eefH
	DD	018f17H
	DD	018f23H
	DD	018f80H
	ORG $+32
	DD	018c11H
	DD	018c12H
	DD	018c13H
	DD	018c14H
	DD	018c15H
	DD	018c16H
	DD	018c17H
	DD	018c18H
	DD	018afeH
	DD	018affH
	DD	018e5eH
	DD	018e53H
	DD	018849H
	DD	018844H
	DD	01885dH
	DD	018ef0H
	DD	018f18H
	DD	018f24H
	DD	018f81H
	ORG $+32
?RPlistMode@@3PAUtagRidePetList@@A DD 0186a0H		; RPlistMode
	DD	00H
	DD	0186a5H
	DD	00H
	DD	0186aaH
	DD	00H
	DD	0186afH
	DD	00H
	DD	0186b4H
	DD	01H
	DD	0186b9H
	DD	01H
	DD	0186beH
	DD	01H
	DD	0186c3H
	DD	01H
	DD	0186c8H
	DD	02H
	DD	0186cdH
	DD	02H
	DD	0186d2H
	DD	02H
	DD	0186d7H
	DD	02H
	DD	0186dcH
	DD	03H
	DD	0186e1H
	DD	03H
	DD	0186e6H
	DD	03H
	DD	0186ebH
	DD	03H
	DD	0186f0H
	DD	04H
	DD	0186f5H
	DD	04H
	DD	0186faH
	DD	04H
	DD	0186ffH
	DD	04H
	DD	018704H
	DD	05H
	DD	018709H
	DD	05H
	DD	01870eH
	DD	05H
	DD	018713H
	DD	05H
	DD	018718H
	DD	06H
	DD	01871dH
	DD	06H
	DD	018722H
	DD	06H
	DD	018727H
	DD	06H
	DD	01872cH
	DD	07H
	DD	018731H
	DD	07H
	DD	018736H
	DD	07H
	DD	01873bH
	DD	07H
	DD	018740H
	DD	08H
	DD	018745H
	DD	08H
	DD	01874aH
	DD	08H
	DD	01874fH
	DD	08H
	DD	018754H
	DD	09H
	DD	018759H
	DD	09H
	DD	01875eH
	DD	09H
	DD	018763H
	DD	09H
	DD	018768H
	DD	0aH
	DD	01876dH
	DD	0aH
	DD	018772H
	DD	0aH
	DD	018777H
	DD	0aH
	DD	01877cH
	DD	0bH
	DD	018781H
	DD	0bH
	DD	018786H
	DD	0bH
	DD	01878bH
	DD	0bH
?oneLineInfoFlag@@3HA DD 01H				; oneLineInfoFlag
?FontPal@@3PAKA DD 0ffffffH				; FontPal
	DD	0ffff00H
	DD	0ff00ffH
	DD	0ff0000H
	DD	0ffffH
	DD	0ff00H
	DD	0ffH
	DD	0a4a0a0H
	DD	0f0caa6H
	DD	0c0dcc0H
	DD	08cffH
	DD	0247fffH
?BoxColorTbl@@3PAEA DB 0faH				; BoxColorTbl
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0faH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	__vsprintf_s_l
PUBLIC	_vsprintf_s
PUBLIC	_sprintf
PUBLIC	?MouseInit@@YAXXZ				; MouseInit
PUBLIC	?MouseNowPoint@@YAXHH@Z				; MouseNowPoint
PUBLIC	?MouseCrickLeftDownPoint@@YAXHH@Z		; MouseCrickLeftDownPoint
PUBLIC	?MouseCrickLeftUpPoint@@YAXHH@Z			; MouseCrickLeftUpPoint
PUBLIC	?MouseCrickRightDownPoint@@YAXHH@Z		; MouseCrickRightDownPoint
PUBLIC	?MouseCrickRightUpPoint@@YAXHH@Z		; MouseCrickRightUpPoint
PUBLIC	?MouseDblCrickLeftUpPoint@@YAXHH@Z		; MouseDblCrickLeftUpPoint
PUBLIC	?MouseDblCrickRightUpPoint@@YAXHH@Z		; MouseDblCrickRightUpPoint
PUBLIC	?MouseProc@@YAXXZ				; MouseProc
PUBLIC	?HitMouseCursor@@YAXXZ				; HitMouseCursor
PUBLIC	?CheckGroupSelect@@YAXH@Z			; CheckGroupSelect
PUBLIC	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ		; sprintf_s<256>
PUBLIC	??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK@ ; `string'
PUBLIC	??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK@ ; `string'
PUBLIC	??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ ; `string'
PUBLIC	??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@ ; `string'
PUBLIC	??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ ; `string'
PUBLIC	??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ ; `string'
PUBLIC	??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CF@ ; `string'
PUBLIC	??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@ ; `string'
PUBLIC	??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@ ; `string'
PUBLIC	??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ ; `string'
PUBLIC	??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ ; `string'
PUBLIC	??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@ ; `string'
PUBLIC	??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@ ; `string'
PUBLIC	??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ ; `string'
PUBLIC	??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ ; `string'
PUBLIC	??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO?$LN@ ; `string'
PUBLIC	??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?$AA@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4038000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	_memset:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsprintf_s:PROC
EXTRN	?LoadBmp@@YAHH@Z:PROC				; LoadBmp
EXTRN	?SortDispBuffer@@YAXXZ:PROC			; SortDispBuffer
EXTRN	?StockDispBuffer@@YAHHHEHH@Z:PROC		; StockDispBuffer
EXTRN	?StockBoxDispBuffer@@YAXHHHHEHH@Z:PROC		; StockBoxDispBuffer
EXTRN	?GetStrWidth@@YAHPAD@Z:PROC			; GetStrWidth
EXTRN	?StockFontBuffer@@YAHHHDHPADH@Z:PROC		; StockFontBuffer
EXTRN	?ShowBottomLineString@@YAXHPAD@Z:PROC		; ShowBottomLineString
EXTRN	?openServerWindow@@YAXHHHHPAD@Z:PROC		; openServerWindow
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?SpriteInfo@@3PAUSPRITE_INFO@@A:BYTE		; SpriteInfo
EXTRN	?lpDraw@@3PAUDIRECT_DRAW@@A:DWORD		; lpDraw
EXTRN	?ResoMode@@3HA:DWORD				; ResoMode
EXTRN	?ProcNo@@3IA:DWORD				; ProcNo
EXTRN	?DispBuffer@@3UDISP_BUFFER@@A:BYTE		; DispBuffer
EXTRN	?p_party@@3PAPAUaction@@A:BYTE			; p_party
EXTRN	?FontBuffer@@3PAUFONT_BUFFER@@A:BYTE		; FontBuffer
EXTRN	?FontCnt@@3HA:DWORD				; FontCnt
EXTRN	?pc@@3UPC@@A:BYTE				; pc
EXTRN	?TaskBarFlag@@3HA:DWORD				; TaskBarFlag
EXTRN	?MouseCursorFlag@@3HA:DWORD			; MouseCursorFlag
EXTRN	?BattleMyNo@@3HA:DWORD				; BattleMyNo
EXTRN	?mouseDblRightOn@@3HA:DWORD			; mouseDblRightOn
EXTRN	?transmigrationEffectFlag@@3HA:DWORD		; transmigrationEffectFlag
EXTRN	?ITEMPATHFLAG@@3HA:DWORD			; ITEMPATHFLAG
EXTRN	?nameOverTheHeadFlag@@3FA:WORD			; nameOverTheHeadFlag
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA DD 01H DUP (?) ; `MouseProc'::`2'::leftPushTimeBak
?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA DD 01H DUP (?) ; `MouseProc'::`2'::rightPushTimeBak
_BSS	ENDS
;	COMDAT __real@4038000000000000
CONST	SEGMENT
__real@4038000000000000 DQ 04038000000000000r	; 24
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?$AA@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO?$LN@
CONST	SEGMENT
??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO?$LN@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d [', 0c5H, 0beH, 0bdH
	DB	0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
CONST	SEGMENT
??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
CONST	SEGMENT
??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d [', 0c5H, 0beH, 0bdH
	DB	0c2H, ']%s Lv', 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@
CONST	SEGMENT
??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@
CONST	SEGMENT
??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
CONST	SEGMENT
??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
CONST	SEGMENT
??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d ', 0c3H, 0bcH, 0b7H, 0c2H, 0a3H
	DB	0baH, '%d', 0a3H, 0afH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@ DB '%s '
	DB	'   ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H, 0beH
	DB	0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@
CONST	SEGMENT
??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@
CONST	SEGMENT
??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CF@
CONST	SEGMENT
??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CF@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d [', 0c5H
	DB	0beH, 0bdH, 0c2H, ']%s ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
CONST	SEGMENT
??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d   ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
CONST	SEGMENT
??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d   ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@
CONST	SEGMENT
??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@ DB '%'
	DB	's    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H, 0bcH
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H, 0b7H
	DB	0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '{'
	DB	'%s} %s    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK@
CONST	SEGMENT
??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
CONST	SEGMENT
??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@ DB '%'
	DB	's [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK@
CONST	SEGMENT
??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK@ DB '{'
	DB	'%s} %s [%s]    ', 0b7H, 0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d  ', 0c3H
	DB	0bcH, 0b7H, 0c2H, 0a3H, 0baH, '%d', 0a3H, 0afH, '%d ', 0b1H, 0e2H
	DB	0b7H, 0c2H, 0a3H, 0baH, '%d [', 0c5H, 0beH, 0bdH, 0c2H, ']%s ', 0b7H
	DB	0b9H, 0baH, 0a7H, 0a3H, 0baH, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const *>, COMDAT

; 144  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ PROC		; sprintf_s<256>, COMDAT

; 1850 :     )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1846 : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(

  0001e	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@PBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const *>
  00023	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00026	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax
  00029	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00030	51		 push	 ecx
  00031	68 00 01 00 00	 push	 256			; 00000100H
  00036	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _vsprintf_s
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ENDP		; sprintf_s<256>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?CheckGroupSelect@@YAXH@Z
_TEXT	SEGMENT
_pDispSort$ = -32					; size = 4
_pDispInfo$ = -20					; size = 4
_i$ = -8						; size = 4
_no$ = 8						; size = 4
?CheckGroupSelect@@YAXH@Z PROC				; CheckGroupSelect, COMDAT

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 285  : 	int i;
; 286  : 	DISP_INFO 	*pDispInfo;
; 287  : 	DISP_SORT 	*pDispSort;
; 288  : 	/* ?????????????????????? */
; 289  : 	for (i = 0; i < DispBuffer.DispCnt; i++) {

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CheckGroup
$LN2@CheckGroup:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@CheckGroup:
  00030	0f bf 05 00 c0
	01 00		 movsx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  00037	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  0003a	0f 8d e7 00 00
	00		 jge	 $LN1@CheckGroup

; 290  : 
; 291  : 		pDispInfo = DispBuffer.DispInfo + i;

  00040	6b 45 f8 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00044	05 00 00 00 00	 add	 eax, OFFSET ?DispBuffer@@3UDISP_BUFFER@@A ; DispBuffer
  00049	89 45 ec	 mov	 DWORD PTR _pDispInfo$[ebp], eax

; 292  : 		pDispSort = DispBuffer.DispSort + i;

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004f	8d 0c 85 00 80
	01 00		 lea	 ecx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*4+98304]
  00056	89 4d e0	 mov	 DWORD PTR _pDispSort$[ebp], ecx

; 293  : 
; 294  : 		// ??????????
; 295  : 		if (pDispInfo->hitFlag == no) {

  00059	8b 45 ec	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0005c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005f	3b 4d 08	 cmp	 ecx, DWORD PTR _no$[ebp]
  00062	0f 85 ba 00 00
	00		 jne	 $LN5@CheckGroup

; 296  : 			// ??????????
; 297  : 			if (pDispSort->dispPrio >= DISP_PRIO_MENU) {

  00068	8b 45 e0	 mov	 eax, DWORD PTR _pDispSort$[ebp]
  0006b	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0006f	83 f9 68	 cmp	 ecx, 104		; 00000068H
  00072	7c 58		 jl	 SHORT $LN6@CheckGroup

; 298  : 				// ????????????????
; 299  : #ifndef __CARYTEST
; 300  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  00074	6a 00		 push	 0
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BoxColor@@3HA ; BoxColor
  0007b	50		 push	 eax
  0007c	6a 6b		 push	 107			; 0000006bH
  0007e	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00081	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  00085	0f bf 82 06 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+6]
  0008c	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0008f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00092	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  00096	50		 push	 eax
  00097	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0009a	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  0009e	0f bf 82 04 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+4]
  000a5	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  000ae	50		 push	 eax
  000af	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  000b2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b5	83 ea 02	 sub	 edx, 2
  000b8	52		 push	 edx
  000b9	8b 45 ec	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	83 e9 02	 sub	 ecx, 2
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  000c7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 301  : 					pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 302  : 					pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 303  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 304  : #else
; 305  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 306  : 					pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 307  : 					pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 308  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 309  : #endif
; 310  : 			}
; 311  : 			else {

  000ca	eb 56		 jmp	 SHORT $LN5@CheckGroup
$LN6@CheckGroup:

; 312  : 				// ????????????????
; 313  : #ifndef __CARYTEST
; 314  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  000cc	6a 00		 push	 0
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BoxColor@@3HA ; BoxColor
  000d3	50		 push	 eax
  000d4	6a 65		 push	 101			; 00000065H
  000d6	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  000d9	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  000dd	0f bf 82 06 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+6]
  000e4	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  000e7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ea	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  000ee	50		 push	 eax
  000ef	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  000f2	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  000f6	0f bf 82 04 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+4]
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00100	8b 11		 mov	 edx, DWORD PTR [ecx]
  00102	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  00106	50		 push	 eax
  00107	8b 4d ec	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0010a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0010d	83 ea 02	 sub	 edx, 2
  00110	52		 push	 edx
  00111	8b 45 ec	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00114	8b 08		 mov	 ecx, DWORD PTR [eax]
  00116	83 e9 02	 sub	 ecx, 2
  00119	51		 push	 ecx
  0011a	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  0011f	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN5@CheckGroup:

; 315  : 					pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 316  : 					pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 317  : 					DISP_PRIO_BOX, BoxColor, 0);
; 318  : 				//pDispSort->dispPrio, 250, 0 );
; 319  : #else
; 320  : 				StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 321  : 					pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 322  : 					pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 323  : 					DISP_PRIO_BOX, BoxColor, 0);
; 324  : #endif
; 325  : 			}
; 326  : 		}
; 327  : 	}

  00122	e9 00 ff ff ff	 jmp	 $LN2@CheckGroup
$LN1@CheckGroup:

; 328  : }

  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?CheckGroupSelect@@YAXH@Z ENDP				; CheckGroupSelect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?HitMouseCursor@@YAXXZ
_TEXT	SEGMENT
$T1 = -588						; size = 4
$T2 = -576						; size = 4
$T3 = -564						; size = 4
_left$4 = -360						; size = 4
_msg$5 = -348						; size = 256
_cnt$6 = -84						; size = 4
_pDispInfo$ = -72					; size = 4
_pDispSort$ = -60					; size = 4
_itemNameColor$ = -48					; size = 4
_hitFlag$ = -36						; size = 4
_strWidth$ = -24					; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?HitMouseCursor@@YAXXZ PROC				; HitMouseCursor, COMDAT

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 02 00
	00		 sub	 esp, 592		; 00000250H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd b0 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-592]
  00012	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 365  : 	int i;					// ???????
; 366  : 	int strWidth;			// ???????
; 367  : 	int hitFlag = FALSE;	// ??????

  00028	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hitFlag$[ebp], 0

; 368  : 	static int cnt = 0;		// ?????
; 369  : 	int itemNameColor = FONT_PAL_WHITE;	// ?????

  0002f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _itemNameColor$[ebp], 0

; 370  : 
; 371  : 	DISP_SORT 	*pDispSort = DispBuffer.DispSort + DispBuffer.DispCnt - 1;

  00036	0f bf 05 00 c0
	01 00		 movsx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0003d	8d 0c 85 fc 7f
	01 00		 lea	 ecx, DWORD PTR ?DispBuffer@@3UDISP_BUFFER@@A[eax*4+98300]
  00044	89 4d c4	 mov	 DWORD PTR _pDispSort$[ebp], ecx

; 372  : 	DISP_INFO 	*pDispInfo;
; 373  : 
; 374  : 	// ??????
; 375  : 	if (!transmigrationEffectFlag)

  00047	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?transmigrationEffectFlag@@3HA, 0 ; transmigrationEffectFlag
  0004e	75 0c		 jne	 SHORT $LN11@HitMouseCu

; 376  : 		oneLineInfoFlag = 1;

  00050	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?oneLineInfoFlag@@3HA, 1 ; oneLineInfoFlag

; 377  : 	else

  0005a	eb 0a		 jmp	 SHORT $LN12@HitMouseCu
$LN11@HitMouseCu:

; 378  : 		oneLineInfoFlag = 0;

  0005c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?oneLineInfoFlag@@3HA, 0 ; oneLineInfoFlag
$LN12@HitMouseCu:

; 379  : 
; 380  : 	if (cnt >= sizeof(BoxColorTbl) - 1) cnt = 0;

  00066	83 3d 00 00 00
	00 3b		 cmp	 DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA, 59 ; 0000003bH
  0006d	72 0c		 jb	 SHORT $LN13@HitMouseCu
  0006f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA, 0
  00079	eb 0d		 jmp	 SHORT $LN14@HitMouseCu
$LN13@HitMouseCu:

; 381  : 	else cnt++;

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA
  00080	83 c0 01	 add	 eax, 1
  00083	a3 00 00 00 00	 mov	 DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA, eax
$LN14@HitMouseCu:

; 382  : 
; 383  : 	// ?????
; 384  : 	BoxColor = BoxColorTbl[cnt];

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?cnt@?1??HitMouseCursor@@YAXXZ@4HA
  0008d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?BoxColorTbl@@3PAEA[eax]
  00094	89 0d 00 00 00
	00		 mov	 DWORD PTR ?BoxColor@@3HA, ecx ; BoxColor

; 385  : #ifdef _ITEM_PATH
; 386  : 	ITEMPATHFLAG = FALSE;

  0009a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ITEMPATHFLAG@@3HA, 0 ; ITEMPATHFLAG

; 387  : #endif
; 388  : 	for (i = 0; i < FontCnt; i++) {

  000a4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ab	eb 09		 jmp	 SHORT $LN4@HitMouseCu
$LN2@HitMouseCu:
  000ad	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000b0	83 c0 01	 add	 eax, 1
  000b3	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@HitMouseCu:
  000b6	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000b9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?FontCnt@@3HA ; FontCnt
  000bf	0f 8d 89 01 00
	00		 jge	 $LN3@HitMouseCu

; 389  : 		// jl 文字不接受点击则跳过
; 390  : 		if (FontBuffer[i].hitFlag == 0) continue;

  000c5	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  000cc	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax+264], 0
  000d3	75 02		 jne	 SHORT $LN15@HitMouseCu
  000d5	eb d6		 jmp	 SHORT $LN2@HitMouseCu
$LN15@HitMouseCu:

; 391  : 		// jl 取文字宽度
; 392  : 		strWidth = GetStrWidth(FontBuffer[i].str);

  000d7	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  000de	05 05 00 00 00	 add	 eax, OFFSET ?FontBuffer@@3PAUFONT_BUFFER@@A+5
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ?GetStrWidth@@YAHPAD@Z	; GetStrWidth
  000e9	83 c4 04	 add	 esp, 4
  000ec	89 45 e8	 mov	 DWORD PTR _strWidth$[ebp], eax

; 393  : 		// jl 检测鼠标在文字矩形内
; 394  : 		if (mouse.nowPoint.x <= FontBuffer[i].x + strWidth + 2 && FontBuffer[i].x - 2 <= mouse.nowPoint.x &&
; 395  : 			mouse.nowPoint.y <= FontBuffer[i].y + FONT_SIZE + 2 && FontBuffer[i].y - 2 <= mouse.nowPoint.y) {

  000ef	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  000f6	0f bf 88 00 00
	00 00		 movsx	 ecx, WORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax]
  000fd	8b 55 e8	 mov	 edx, DWORD PTR _strWidth$[ebp]
  00100	8d 44 11 02	 lea	 eax, DWORD PTR [ecx+edx+2]
  00104	39 05 00 00 00
	00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A, eax
  0010a	0f 8f 39 01 00
	00		 jg	 $LN16@HitMouseCu
  00110	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  00117	0f bf 88 00 00
	00 00		 movsx	 ecx, WORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax]
  0011e	83 e9 02	 sub	 ecx, 2
  00121	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A
  00127	0f 8f 1c 01 00
	00		 jg	 $LN16@HitMouseCu
  0012d	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  00134	0f bf 88 02 00
	00 00		 movsx	 ecx, WORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax+2]
  0013b	83 c1 10	 add	 ecx, 16			; 00000010H
  0013e	39 0d 04 00 00
	00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+4, ecx
  00144	0f 8f ff 00 00
	00		 jg	 $LN16@HitMouseCu
  0014a	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  00151	0f bf 88 02 00
	00 00		 movsx	 ecx, WORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax+2]
  00158	83 e9 02	 sub	 ecx, 2
  0015b	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  00161	0f 8f e2 00 00
	00		 jg	 $LN16@HitMouseCu

; 396  : 			// jl 赋值点击的文字编号，鼠标在上面就赋值，不需要点击
; 397  : 			HitFontNo = i;

  00167	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0016a	a3 00 00 00 00	 mov	 DWORD PTR ?HitFontNo@@3HA, eax ; HitFontNo

; 398  : 			// 如果hitFlag为2则画一个边框
; 399  : 			if (FontBuffer[i].hitFlag == 2) {

  0016f	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  00176	83 b8 08 01 00
	00 02		 cmp	 DWORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax+264], 2
  0017d	75 63		 jne	 SHORT $LN17@HitMouseCu

; 400  : 				StockBoxDispBuffer(FontBuffer[i].x - 3,

  0017f	6a 00		 push	 0
  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BoxColor@@3HA ; BoxColor
  00186	50		 push	 eax
  00187	6a 6b		 push	 107			; 0000006bH
  00189	69 4d f4 10 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 272
  00190	0f bf 91 02 00
	00 00		 movsx	 edx, WORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[ecx+2]
  00197	83 c2 12	 add	 edx, 18			; 00000012H
  0019a	52		 push	 edx
  0019b	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  001a2	0f bf 88 00 00
	00 00		 movsx	 ecx, WORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax]
  001a9	8b 55 e8	 mov	 edx, DWORD PTR _strWidth$[ebp]
  001ac	8d 44 11 02	 lea	 eax, DWORD PTR [ecx+edx+2]
  001b0	50		 push	 eax
  001b1	69 4d f4 10 01
	00 00		 imul	 ecx, DWORD PTR _i$[ebp], 272
  001b8	0f bf 91 02 00
	00 00		 movsx	 edx, WORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[ecx+2]
  001bf	83 ea 04	 sub	 edx, 4
  001c2	52		 push	 edx
  001c3	69 45 f4 10 01
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 272
  001ca	0f bf 88 00 00
	00 00		 movsx	 ecx, WORD PTR ?FontBuffer@@3PAUFONT_BUFFER@@A[eax]
  001d1	83 e9 03	 sub	 ecx, 3
  001d4	51		 push	 ecx
  001d5	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  001da	83 c4 1c	 add	 esp, 28			; 0000001cH

; 401  : #ifdef _NEWFONT_
; 402  : 					FontBuffer[i].y - 2,
; 403  : #else
; 404  : 					FontBuffer[i].y - 4,
; 405  : #endif
; 406  : 					FontBuffer[i].x + strWidth + 2,
; 407  : #ifdef _NEWFONT_
; 408  : 					FontBuffer[i].y + FONT_SIZE + 6,
; 409  : #else
; 410  : 					FontBuffer[i].y + FONT_SIZE + 4,
; 411  : #endif
; 412  : 
; 413  : 					DISP_PRIO_BOX2, BoxColor, 0);
; 414  : 
; 415  : 				SortDispBuffer();

  001dd	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer
$LN17@HitMouseCu:

; 416  : 			}
; 417  : 			//jl 点击的是文字，则把图片点击赋值-1
; 418  : 			HitDispNo = -1;

  001e2	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitDispNo@@3HA, -1 ; HitDispNo

; 419  : 			mouse.level = DISP_PRIO_MENU;

  001ec	c6 05 44 00 00
	00 68		 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, 104 ; 00000068H

; 420  : 			// jl状态栏显示提示文字
; 421  : 			if (TaskBarFlag == FALSE && oneLineInfoFlag) {

  001f3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  001fa	75 1a		 jne	 SHORT $LN18@HitMouseCu
  001fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?oneLineInfoFlag@@3HA, 0 ; oneLineInfoFlag
  00203	74 11		 je	 SHORT $LN18@HitMouseCu

; 422  : 				ShowBottomLineString(itemNameColor, OneLineInfoStr);

  00205	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0020a	8b 45 d0	 mov	 eax, DWORD PTR _itemNameColor$[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  00213	83 c4 08	 add	 esp, 8
$LN18@HitMouseCu:

; 423  : 				//the third StockFontBuffer( 8, 460, FONT_PRIO_FRONT, itemNameColor, OneLineInfoStr, 0 );
; 424  : 			}
; 425  : 			OneLineInfoStr[0] = NULL;

  00216	b8 01 00 00 00	 mov	 eax, 1
  0021b	6b c8 00	 imul	 ecx, eax, 0
  0021e	89 8d cc fd ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  00224	81 bd cc fd ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T3[ebp], 256	; 00000100H
  0022e	73 02		 jae	 SHORT $LN125@HitMouseCu
  00230	eb 05		 jmp	 SHORT $LN126@HitMouseCu
$LN125@HitMouseCu:
  00232	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN126@HitMouseCu:
  00237	8b 95 cc fd ff
	ff		 mov	 edx, DWORD PTR $T3[ebp]
  0023d	c6 82 00 00 00
	00 00		 mov	 BYTE PTR ?OneLineInfoStr@@3PADA[edx], 0

; 426  : 			return;		// jl 拿到HitDispNo就返回

  00244	e9 d8 13 00 00	 jmp	 $LN1@HitMouseCu
$LN16@HitMouseCu:

; 427  : 		}
; 428  : 	}

  00249	e9 5f fe ff ff	 jmp	 $LN2@HitMouseCu
$LN3@HitMouseCu:

; 429  : 	// jl 没有文字点击则赋值-1
; 430  : 	HitFontNo = -1;

  0024e	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitFontNo@@3HA, -1 ; HitFontNo

; 431  : 	for (i = DispBuffer.DispCnt - 1; i >= 0; i--, pDispSort--) {

  00258	0f bf 05 00 c0
	01 00		 movsx	 eax, WORD PTR ?DispBuffer@@3UDISP_BUFFER@@A+114688
  0025f	83 e8 01	 sub	 eax, 1
  00262	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  00265	eb 12		 jmp	 SHORT $LN7@HitMouseCu
$LN5@HitMouseCu:
  00267	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0026a	83 e8 01	 sub	 eax, 1
  0026d	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  00270	8b 4d c4	 mov	 ecx, DWORD PTR _pDispSort$[ebp]
  00273	83 e9 04	 sub	 ecx, 4
  00276	89 4d c4	 mov	 DWORD PTR _pDispSort$[ebp], ecx
$LN7@HitMouseCu:
  00279	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  0027d	0f 8c 45 13 00
	00		 jl	 $LN6@HitMouseCu

; 432  : 		pDispInfo = DispBuffer.DispInfo + pDispSort->no;

  00283	8b 45 c4	 mov	 eax, DWORD PTR _pDispSort$[ebp]
  00286	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00289	6b d1 18	 imul	 edx, ecx, 24
  0028c	81 c2 00 00 00
	00		 add	 edx, OFFSET ?DispBuffer@@3UDISP_BUFFER@@A ; DispBuffer
  00292	89 55 b8	 mov	 DWORD PTR _pDispInfo$[ebp], edx

; 433  : 		if (pDispInfo->hitFlag == 0) continue;

  00295	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00298	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0029c	75 02		 jne	 SHORT $LN19@HitMouseCu
  0029e	eb c7		 jmp	 SHORT $LN5@HitMouseCu
$LN19@HitMouseCu:

; 434  : 		//if( SpriteInfo[ pDispInfo->bmpNo ].lpSurfaceInfo == NULL ) continue;
; 435  : 		if (LoadBmp(pDispInfo->bmpNo) == FALSE) continue;

  002a0	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  002a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002a6	51		 push	 ecx
  002a7	e8 00 00 00 00	 call	 ?LoadBmp@@YAHH@Z	; LoadBmp
  002ac	83 c4 04	 add	 esp, 4
  002af	85 c0		 test	 eax, eax
  002b1	75 02		 jne	 SHORT $LN20@HitMouseCu
  002b3	eb b2		 jmp	 SHORT $LN5@HitMouseCu
$LN20@HitMouseCu:

; 436  : 		if (pDispInfo->pAct == NULL) {

  002b5	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  002b8	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  002bc	75 5e		 jne	 SHORT $LN21@HitMouseCu

; 437  : #ifndef __CARYTEST
; 438  : 			if (mouse.nowPoint.x <= pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width &&
; 439  : 				pDispInfo->x <= mouse.nowPoint.x &&
; 440  : 				mouse.nowPoint.y <= pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height &&

  002be	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  002c1	6b 48 08 0c	 imul	 ecx, DWORD PTR [eax+8], 12
  002c5	0f bf 91 04 00
	00 00		 movsx	 edx, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx+4]
  002cc	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  002cf	03 10		 add	 edx, DWORD PTR [eax]
  002d1	39 15 00 00 00
	00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A, edx
  002d7	7f 3e		 jg	 SHORT $LN23@HitMouseCu
  002d9	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  002dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  002de	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A
  002e4	7f 31		 jg	 SHORT $LN23@HitMouseCu
  002e6	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  002e9	6b 48 08 0c	 imul	 ecx, DWORD PTR [eax+8], 12
  002ed	0f bf 91 06 00
	00 00		 movsx	 edx, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx+6]
  002f4	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  002f7	03 50 04	 add	 edx, DWORD PTR [eax+4]
  002fa	39 15 04 00 00
	00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+4, edx
  00300	7f 15		 jg	 SHORT $LN23@HitMouseCu
  00302	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00305	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00308	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  0030e	7f 07		 jg	 SHORT $LN23@HitMouseCu

; 441  : 				pDispInfo->y <= mouse.nowPoint.y)
; 442  : #else
; 443  : 			if (mouse.nowPoint.x <= pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width &&
; 444  : 				pDispInfo->x <= mouse.nowPoint.x &&
; 445  : 				mouse.nowPoint.y <= pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height &&
; 446  : 				pDispInfo->y <= mouse.nowPoint.y)
; 447  : #endif				
; 448  : 				hitFlag = TRUE;

  00310	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _hitFlag$[ebp], 1
$LN23@HitMouseCu:

; 449  : 		}else{

  00317	e9 b9 00 00 00	 jmp	 $LN24@HitMouseCu
$LN21@HitMouseCu:

; 450  : #ifndef __CARYTEST
; 451  : 			if (mouse.nowPoint.x <= pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width * 0.5 + MOUSE_HIT_SIZE_X * 0.5 &&
; 452  : 				pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width * 0.5 - MOUSE_HIT_SIZE_X * 0.5 <= mouse.nowPoint.x &&
; 453  : 				mouse.nowPoint.y <= pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height &&

  0031c	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?mouse@@3UMOUSE@@A
  00324	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00327	f2 0f 2a 08	 cvtsi2sd xmm1, DWORD PTR [eax]
  0032b	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0032e	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  00332	0f bf 82 04 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+4]
  00339	f2 0f 2a d0	 cvtsi2sd xmm2, eax
  0033d	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  00345	f2 0f 58 ca	 addsd	 xmm1, xmm2
  00349	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@4038000000000000
  00351	66 0f 2f c8	 comisd	 xmm1, xmm0
  00355	72 7e		 jb	 SHORT $LN24@HitMouseCu
  00357	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0035a	f2 0f 2a 00	 cvtsi2sd xmm0, DWORD PTR [eax]
  0035e	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00361	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  00365	0f bf 82 04 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+4]
  0036c	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  00370	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00378	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0037c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4038000000000000
  00384	f2 0f 2a 0d 00
	00 00 00	 cvtsi2sd xmm1, DWORD PTR ?mouse@@3UMOUSE@@A
  0038c	66 0f 2f c8	 comisd	 xmm1, xmm0
  00390	72 43		 jb	 SHORT $LN24@HitMouseCu
  00392	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00395	6b 48 08 0c	 imul	 ecx, DWORD PTR [eax+8], 12
  00399	0f bf 91 06 00
	00 00		 movsx	 edx, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx+6]
  003a0	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  003a3	03 50 04	 add	 edx, DWORD PTR [eax+4]
  003a6	39 15 04 00 00
	00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+4, edx
  003ac	7f 27		 jg	 SHORT $LN24@HitMouseCu
  003ae	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  003b1	6b 48 08 0c	 imul	 ecx, DWORD PTR [eax+8], 12
  003b5	0f bf 91 06 00
	00 00		 movsx	 edx, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[ecx+6]
  003bc	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  003bf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003c2	8d 54 11 d0	 lea	 edx, DWORD PTR [ecx+edx-48]
  003c6	3b 15 04 00 00
	00		 cmp	 edx, DWORD PTR ?mouse@@3UMOUSE@@A+4
  003cc	7f 07		 jg	 SHORT $LN24@HitMouseCu

; 454  : 				pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height - MOUSE_HIT_SIZE_Y <= mouse.nowPoint.y)
; 455  : #else
; 456  : 			if (mouse.nowPoint.x <= pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width * 0.5 + MOUSE_HIT_SIZE_X * 0.5 &&
; 457  : 				pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width * 0.5 - MOUSE_HIT_SIZE_X * 0.5 <= mouse.nowPoint.x &&
; 458  : 				mouse.nowPoint.y <= pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height &&
; 459  : 				pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height - MOUSE_HIT_SIZE_Y <= mouse.nowPoint.y)
; 460  : #endif				
; 461  : 				hitFlag = TRUE;

  003ce	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _hitFlag$[ebp], 1
$LN24@HitMouseCu:

; 462  : 		}
; 463  : 
; 464  : 		if (hitFlag == TRUE) {

  003d5	83 7d dc 01	 cmp	 DWORD PTR _hitFlag$[ebp], 1
  003d9	0f 85 e4 11 00
	00		 jne	 $LN25@HitMouseCu

; 465  : 
; 466  : #ifdef __ATTACK_MAGIC
; 467  : 
; 468  : 			int cnt;
; 469  : 
; 470  : 			for (cnt = 0; cnt < BATTLKPKPLYAERNUM; cnt++)

  003df	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _cnt$6[ebp], 0
  003e6	eb 09		 jmp	 SHORT $LN10@HitMouseCu
$LN8@HitMouseCu:
  003e8	8b 45 ac	 mov	 eax, DWORD PTR _cnt$6[ebp]
  003eb	83 c0 01	 add	 eax, 1
  003ee	89 45 ac	 mov	 DWORD PTR _cnt$6[ebp], eax
$LN10@HitMouseCu:
  003f1	83 7d ac 14	 cmp	 DWORD PTR _cnt$6[ebp], 20 ; 00000014H
  003f5	7d 16		 jge	 SHORT $LN9@HitMouseCu

; 471  : 			{
; 472  : 				if (p_party[cnt] == pDispInfo->pAct)

  003f7	8b 45 ac	 mov	 eax, DWORD PTR _cnt$6[ebp]
  003fa	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  003fd	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  00404	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00407	75 02		 jne	 SHORT $LN26@HitMouseCu

; 473  : 					break;

  00409	eb 02		 jmp	 SHORT $LN9@HitMouseCu
$LN26@HitMouseCu:

; 474  : 			}

  0040b	eb db		 jmp	 SHORT $LN8@HitMouseCu
$LN9@HitMouseCu:

; 475  : 
; 476  : 			// 左上到右下编号为6 , 7 , 8 , 9
; 477  : 			// 当仅能选择单排且目前所选择的在我方的位置
; 478  : 			//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 479  : 			if (BattleMyNo >= 10 && (6 == pDispInfo->hitFlag || 7 == pDispInfo->hitFlag))

  0040d	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?BattleMyNo@@3HA, 10 ; BattleMyNo, 0000000aH
  00414	7c 1e		 jl	 SHORT $LN27@HitMouseCu
  00416	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00419	83 78 10 06	 cmp	 DWORD PTR [eax+16], 6
  0041d	74 09		 je	 SHORT $LN28@HitMouseCu
  0041f	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00422	83 78 10 07	 cmp	 DWORD PTR [eax+16], 7
  00426	75 0c		 jne	 SHORT $LN27@HitMouseCu
$LN28@HitMouseCu:

; 480  : 			{
; 481  : 				hitFlag = FALSE;

  00428	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hitFlag$[ebp], 0

; 482  : 				continue;

  0042f	e9 33 fe ff ff	 jmp	 $LN5@HitMouseCu
$LN27@HitMouseCu:

; 483  : 			}
; 484  : #ifdef _SKILL_85_LSFIX
; 485  : 			// CAX修正攻击一排时候出错
; 486  : 			if (BattleMyNo < 10 && (10 == pDispInfo->hitFlag || 9 == pDispInfo->hitFlag))

  00434	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?BattleMyNo@@3HA, 10 ; BattleMyNo, 0000000aH
  0043b	7d 1e		 jge	 SHORT $LN29@HitMouseCu
  0043d	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00440	83 78 10 0a	 cmp	 DWORD PTR [eax+16], 10	; 0000000aH
  00444	74 09		 je	 SHORT $LN30@HitMouseCu
  00446	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00449	83 78 10 09	 cmp	 DWORD PTR [eax+16], 9
  0044d	75 0c		 jne	 SHORT $LN29@HitMouseCu
$LN30@HitMouseCu:

; 487  : #else
; 488  : 			// 当仅能选择单排且目前所选择的在我方的位置
; 489  : 			if (BattleMyNo < 10 && (8 == pDispInfo->hitFlag || 9 == pDispInfo->hitFlag))
; 490  : #endif
; 491  : 			{
; 492  : 				//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 493  : 				hitFlag = FALSE;

  0044f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hitFlag$[ebp], 0

; 494  : 				continue;

  00456	e9 0c fe ff ff	 jmp	 $LN5@HitMouseCu
$LN29@HitMouseCu:

; 495  : 			}
; 496  : #ifdef _SKILL_ADDBARRIER
; 497  : 			// 只能选我方
; 498  : 			if (BattleMyNo < 10 && (11 == pDispInfo->hitFlag || 12 == pDispInfo->hitFlag)){

  0045b	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?BattleMyNo@@3HA, 10 ; BattleMyNo, 0000000aH
  00462	7d 1e		 jge	 SHORT $LN31@HitMouseCu
  00464	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00467	83 78 10 0b	 cmp	 DWORD PTR [eax+16], 11	; 0000000bH
  0046b	74 09		 je	 SHORT $LN32@HitMouseCu
  0046d	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00470	83 78 10 0c	 cmp	 DWORD PTR [eax+16], 12	; 0000000cH
  00474	75 0c		 jne	 SHORT $LN31@HitMouseCu
$LN32@HitMouseCu:

; 499  : 				//printf("\n BattleMyNo=%d  pDispInfo->hitFlag=%d",BattleMyNo,pDispInfo->hitFlag);
; 500  : 				hitFlag = FALSE;

  00476	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hitFlag$[ebp], 0

; 501  : 				continue;

  0047d	e9 e5 fd ff ff	 jmp	 $LN5@HitMouseCu
$LN31@HitMouseCu:

; 502  : 			}
; 503  : 			if (BattleMyNo >= 10 && (12 == pDispInfo->hitFlag || 13 == pDispInfo->hitFlag)){

  00482	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?BattleMyNo@@3HA, 10 ; BattleMyNo, 0000000aH
  00489	7c 1e		 jl	 SHORT $LN33@HitMouseCu
  0048b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0048e	83 78 10 0c	 cmp	 DWORD PTR [eax+16], 12	; 0000000cH
  00492	74 09		 je	 SHORT $LN34@HitMouseCu
  00494	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00497	83 78 10 0d	 cmp	 DWORD PTR [eax+16], 13	; 0000000dH
  0049b	75 0c		 jne	 SHORT $LN33@HitMouseCu
$LN34@HitMouseCu:

; 504  : 				hitFlag = FALSE;

  0049d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hitFlag$[ebp], 0

; 505  : 				continue;

  004a4	e9 be fd ff ff	 jmp	 $LN5@HitMouseCu
$LN33@HitMouseCu:

; 506  : 			}
; 507  : #endif
; 508  : #endif
; 509  : 			//			StockFontBuffer( pDispInfo->x, pDispInfo->y, FONT_PRIO_FRONT, 0, "Hit", 1 );
; 510  : 			HitDispNo = pDispSort->no;

  004a9	8b 45 c4	 mov	 eax, DWORD PTR _pDispSort$[ebp]
  004ac	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  004af	89 0d 00 00 00
	00		 mov	 DWORD PTR ?HitDispNo@@3HA, ecx ; HitDispNo

; 511  : 			if (pDispInfo->hitFlag >= 2) {

  004b5	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  004b8	83 78 10 02	 cmp	 DWORD PTR [eax+16], 2
  004bc	0f 8c 3e 01 00
	00		 jl	 $LN35@HitMouseCu

; 512  : 				if (pDispSort->dispPrio >= DISP_PRIO_YES_NO_WND) {

  004c2	8b 45 c4	 mov	 eax, DWORD PTR _pDispSort$[ebp]
  004c5	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  004c9	83 f9 6d	 cmp	 ecx, 109		; 0000006dH
  004cc	7c 5b		 jl	 SHORT $LN36@HitMouseCu

; 513  : #ifndef __CARYTEST
; 514  : 					StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  004ce	6a 00		 push	 0
  004d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BoxColor@@3HA ; BoxColor
  004d5	50		 push	 eax
  004d6	6a 6f		 push	 111			; 0000006fH
  004d8	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  004db	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  004df	0f bf 82 06 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+6]
  004e6	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  004e9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  004ec	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  004f0	50		 push	 eax
  004f1	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  004f4	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  004f8	0f bf 82 04 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+4]
  004ff	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00502	8b 11		 mov	 edx, DWORD PTR [ecx]
  00504	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  00508	50		 push	 eax
  00509	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0050c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0050f	83 ea 02	 sub	 edx, 2
  00512	52		 push	 edx
  00513	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00516	8b 08		 mov	 ecx, DWORD PTR [eax]
  00518	83 e9 02	 sub	 ecx, 2
  0051b	51		 push	 ecx
  0051c	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  00521	83 c4 1c	 add	 esp, 28			; 0000001cH

; 515  : 						pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 516  : 						pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 517  : 						//DISP_PRIO_BOX2, 250, 0 );
; 518  : 						DISP_PRIO_BOX3, BoxColor, 0);
; 519  : #else
; 520  : 					StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 521  : 						pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 522  : 						pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 523  : 						DISP_PRIO_BOX3, BoxColor, 0);
; 524  : #endif
; 525  : 				}
; 526  : 				else

  00524	e9 ba 00 00 00	 jmp	 $LN39@HitMouseCu
$LN36@HitMouseCu:

; 527  : 					if (pDispSort->dispPrio >= DISP_PRIO_MENU) {

  00529	8b 45 c4	 mov	 eax, DWORD PTR _pDispSort$[ebp]
  0052c	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00530	83 f9 68	 cmp	 ecx, 104		; 00000068H
  00533	7c 58		 jl	 SHORT $LN38@HitMouseCu

; 528  : #ifndef __CARYTEST
; 529  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  00535	6a 00		 push	 0
  00537	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BoxColor@@3HA ; BoxColor
  0053c	50		 push	 eax
  0053d	6a 6b		 push	 107			; 0000006bH
  0053f	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00542	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  00546	0f bf 82 06 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+6]
  0054d	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00550	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00553	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  00557	50		 push	 eax
  00558	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0055b	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  0055f	0f bf 82 04 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+4]
  00566	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00569	8b 11		 mov	 edx, DWORD PTR [ecx]
  0056b	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  0056f	50		 push	 eax
  00570	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00573	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00576	83 ea 02	 sub	 edx, 2
  00579	52		 push	 edx
  0057a	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0057d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0057f	83 e9 02	 sub	 ecx, 2
  00582	51		 push	 ecx
  00583	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  00588	83 c4 1c	 add	 esp, 28			; 0000001cH

; 530  : 							pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 531  : 							pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 532  : 							//DISP_PRIO_BOX2, 250, 0 );
; 533  : 							DISP_PRIO_BOX2, BoxColor, 0);
; 534  : #else
; 535  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 536  : 							pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 537  : 							pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 538  : 							DISP_PRIO_BOX2, BoxColor, 0);
; 539  : #endif
; 540  : 					}else {

  0058b	eb 56		 jmp	 SHORT $LN39@HitMouseCu
$LN38@HitMouseCu:

; 541  : #ifndef __CARYTEST
; 542  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,

  0058d	6a 00		 push	 0
  0058f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BoxColor@@3HA ; BoxColor
  00594	50		 push	 eax
  00595	6a 65		 push	 101			; 00000065H
  00597	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0059a	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  0059e	0f bf 82 06 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+6]
  005a5	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  005a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  005ab	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  005af	50		 push	 eax
  005b0	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  005b3	6b 51 08 0c	 imul	 edx, DWORD PTR [ecx+8], 12
  005b7	0f bf 82 04 00
	00 00		 movsx	 eax, WORD PTR ?SpriteInfo@@3PAUSPRITE_INFO@@A[edx+4]
  005be	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  005c1	8b 11		 mov	 edx, DWORD PTR [ecx]
  005c3	8d 44 02 02	 lea	 eax, DWORD PTR [edx+eax+2]
  005c7	50		 push	 eax
  005c8	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  005cb	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  005ce	83 ea 02	 sub	 edx, 2
  005d1	52		 push	 edx
  005d2	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  005d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d7	83 e9 02	 sub	 ecx, 2
  005da	51		 push	 ecx
  005db	e8 00 00 00 00	 call	 ?StockBoxDispBuffer@@YAXHHHHEHH@Z ; StockBoxDispBuffer
  005e0	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN39@HitMouseCu:

; 543  : 							pDispInfo->x + SpriteInfo[pDispInfo->bmpNo].width + 2,
; 544  : 							pDispInfo->y + SpriteInfo[pDispInfo->bmpNo].height + 2,
; 545  : 							//DISP_PRIO_BOX, 250, 0 );
; 546  : 							DISP_PRIO_BOX, BoxColor, 0);
; 547  : 						//pDispSort->dispPrio, 250, 0 );
; 548  : #else
; 549  : 						StockBoxDispBuffer(pDispInfo->x - 2, pDispInfo->y - 2,
; 550  : 							pDispInfo->x + g_lpRealAdrn[pDispInfo->bmpNo].width + 2,
; 551  : 							pDispInfo->y + g_lpRealAdrn[pDispInfo->bmpNo].height + 2,
; 552  : 							DISP_PRIO_BOX, BoxColor, 0);
; 553  : #endif
; 554  : 					}
; 555  : 					if (pDispInfo->hitFlag >= 3) CheckGroupSelect(pDispInfo->hitFlag);

  005e3	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  005e6	83 78 10 03	 cmp	 DWORD PTR [eax+16], 3
  005ea	7c 0f		 jl	 SHORT $LN40@HitMouseCu
  005ec	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  005ef	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  005f2	51		 push	 ecx
  005f3	e8 00 00 00 00	 call	 ?CheckGroupSelect@@YAXH@Z ; CheckGroupSelect
  005f8	83 c4 04	 add	 esp, 4
$LN40@HitMouseCu:

; 556  : 					SortDispBuffer();

  005fb	e8 00 00 00 00	 call	 ?SortDispBuffer@@YAXXZ	; SortDispBuffer
$LN35@HitMouseCu:

; 557  : 			}
; 558  : 			if (TaskBarFlag == FALSE){

  00600	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  00607	0f 85 7a 0f 00
	00		 jne	 $LN122@HitMouseCu

; 559  : 				if (pDispInfo->pAct != NULL){

  0060d	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00610	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00614	0f 84 53 0f 00
	00		 je	 $LN121@HitMouseCu

; 560  : 					if (pDispInfo->pAct->atr & ACT_ATR_INFO){

  0061a	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0061d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00620	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00626	83 e2 10	 and	 edx, 16			; 00000010H
  00629	0f 84 3e 0f 00
	00		 je	 $LN121@HitMouseCu

; 561  : 						if (ProcNo == PROC_GAME){

  0062f	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?ProcNo@@3IA, 9 ; ProcNo
  00636	0f 85 9b 08 00
	00		 jne	 $LN44@HitMouseCu

; 562  : #ifdef _MOUSE_SHOW_INFO_FOR_HEAD
; 563  : 							extern short nameOverTheHeadFlag;
; 564  : 							if (!nameOverTheHeadFlag){//F11开启时，不显示

  0063c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?nameOverTheHeadFlag@@3FA ; nameOverTheHeadFlag
  00643	85 c0		 test	 eax, eax
  00645	75 6a		 jne	 SHORT $LN46@HitMouseCu

; 565  : 								char msg[256];
; 566  : 								sprintf( msg, "%s", pDispInfo->pAct->name);

  00647	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0064a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0064d	83 c1 38	 add	 ecx, 56			; 00000038H
  00650	51		 push	 ecx
  00651	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00656	8d 95 a4 fe ff
	ff		 lea	 edx, DWORD PTR _msg$5[ebp]
  0065c	52		 push	 edx
  0065d	e8 00 00 00 00	 call	 _sprintf
  00662	83 c4 0c	 add	 esp, 12			; 0000000cH

; 567  : 								int left = GetStrWidth(msg) / 2;

  00665	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _msg$5[ebp]
  0066b	50		 push	 eax
  0066c	e8 00 00 00 00	 call	 ?GetStrWidth@@YAHPAD@Z	; GetStrWidth
  00671	83 c4 04	 add	 esp, 4
  00674	99		 cdq
  00675	2b c2		 sub	 eax, edx
  00677	d1 f8		 sar	 eax, 1
  00679	89 85 98 fe ff
	ff		 mov	 DWORD PTR _left$4[ebp], eax

; 568  : 								StockFontBuffer( pDispInfo->pAct->x-left, pDispInfo->pAct->y-10, FONT_PRIO_FRONT, 0, msg, 0 );

  0067f	6a 00		 push	 0
  00681	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _msg$5[ebp]
  00687	50		 push	 eax
  00688	6a 00		 push	 0
  0068a	6a 01		 push	 1
  0068c	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0068f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00692	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00695	83 e8 0a	 sub	 eax, 10			; 0000000aH
  00698	50		 push	 eax
  00699	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0069c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0069f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  006a2	2b 85 98 fe ff
	ff		 sub	 eax, DWORD PTR _left$4[ebp]
  006a8	50		 push	 eax
  006a9	e8 00 00 00 00	 call	 ?StockFontBuffer@@YAHHHDHPADH@Z ; StockFontBuffer
  006ae	83 c4 18	 add	 esp, 24			; 00000018H
$LN46@HitMouseCu:

; 569  : 								//StockFontBuffer(pDispInfo->x + 20 - left, pDispInfo->y - 10, FONT_PRIO_FRONT, itemNameColor, pDispInfo->pAct->name, 0);
; 570  : 
; 571  : 							}
; 572  : #endif
; 573  : #ifdef _STONEAGE_NG
; 574  : 							if (DllInterface.MouseShowName != NULL) {
; 575  : 								if (DllOptionCheck.MouseShowName == TRUE) {
; 576  : 									DllInterface.MouseShowName(pDispInfo);
; 577  : 								}
; 578  : 							}
; 579  : #endif
; 580  : 							if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PC){

  006b1	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  006b4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  006b7	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  006bd	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  006c3	0f 84 a6 03 00
	00		 je	 $LN47@HitMouseCu

; 581  : 								itemNameColor = pDispInfo->pAct->itemNameColor;

  006c9	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  006cc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  006cf	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  006d5	89 55 d0	 mov	 DWORD PTR _itemNameColor$[ebp], edx

; 582  : 								if (pDispInfo->pAct->freeName[0] != NULL) {

  006d8	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  006db	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  006de	ba 01 00 00 00	 mov	 edx, 1
  006e3	6b c2 00	 imul	 eax, edx, 0
  006e6	0f be 4c 01 55	 movsx	 ecx, BYTE PTR [ecx+eax+85]
  006eb	85 c9		 test	 ecx, ecx
  006ed	0f 84 d2 01 00
	00		 je	 $LN49@HitMouseCu

; 583  : 									//sprintf_s( OneLineInfoStr,"%s [%s] Lv：%d  耐：%d／%d  气：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp );
; 584  : 									if (pDispInfo->pAct->petName[0] != NULL){

  006f3	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  006f6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  006f9	ba 01 00 00 00	 mov	 edx, 1
  006fe	6b c2 00	 imul	 eax, edx, 0
  00701	0f be 8c 01 98
	01 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+408]
  00709	85 c9		 test	 ecx, ecx
  0070b	0f 84 f5 00 00
	00		 je	 $LN51@HitMouseCu

; 585  : 										if (pc.familyName[0] != NULL){

  00711	b8 01 00 00 00	 mov	 eax, 1
  00716	6b c8 00	 imul	 ecx, eax, 0
  00719	0f be 91 f6 50
	00 00		 movsx	 edx, BYTE PTR ?pc@@3UPC@@A[ecx+20726]
  00720	85 d2		 test	 edx, edx
  00722	74 72		 je	 SHORT $LN53@HitMouseCu

; 586  : 											sprintf_s(OneLineInfoStr, "{%s} %s [%s]    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d",

  00724	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00727	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0072a	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  00730	52		 push	 edx
  00731	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00734	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00737	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  0073d	51		 push	 ecx
  0073e	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR ?pc@@3UPC@@A+24
  00744	52		 push	 edx
  00745	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00748	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0074b	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00751	52		 push	 edx
  00752	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00755	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00758	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0075b	52		 push	 edx
  0075c	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0075f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00762	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00768	52		 push	 edx
  00769	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0076c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0076f	83 c1 55	 add	 ecx, 85			; 00000055H
  00772	51		 push	 ecx
  00773	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00776	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00779	83 c0 38	 add	 eax, 56			; 00000038H
  0077c	50		 push	 eax
  0077d	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  00782	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@DGKOJMON@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK@
  00787	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0078c	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00791	83 c4 2c	 add	 esp, 44			; 0000002cH

; 587  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp,
; 588  : 												pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 589  : 										}else{

  00794	eb 6b		 jmp	 SHORT $LN54@HitMouseCu
$LN53@HitMouseCu:

; 590  : 											sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d",

  00796	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00799	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0079c	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  007a2	52		 push	 edx
  007a3	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  007a6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007a9	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  007af	51		 push	 ecx
  007b0	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR ?pc@@3UPC@@A+24
  007b6	52		 push	 edx
  007b7	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  007ba	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007bd	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  007c3	52		 push	 edx
  007c4	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  007c7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007ca	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  007cd	52		 push	 edx
  007ce	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  007d1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007d4	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  007da	52		 push	 edx
  007db	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  007de	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007e1	83 c1 55	 add	 ecx, 85			; 00000055H
  007e4	51		 push	 ecx
  007e5	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  007e8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  007eb	83 c0 38	 add	 eax, 56			; 00000038H
  007ee	50		 push	 eax
  007ef	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@LNBNKOOL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  007f4	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  007f9	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  007fe	83 c4 28	 add	 esp, 40			; 00000028H
$LN54@HitMouseCu:

; 591  : 												pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp,
; 592  : 												pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 593  : 										}
; 594  : 									}else{

  00801	e9 ba 00 00 00	 jmp	 $LN56@HitMouseCu
$LN51@HitMouseCu:

; 595  : 										if (pc.familyName[0] != NULL)

  00806	b8 01 00 00 00	 mov	 eax, 1
  0080b	6b c8 00	 imul	 ecx, eax, 0
  0080e	0f be 91 f6 50
	00 00		 movsx	 edx, BYTE PTR ?pc@@3UPC@@A[ecx+20726]
  00815	85 d2		 test	 edx, edx
  00817	74 57		 je	 SHORT $LN55@HitMouseCu

; 596  : 											sprintf_s(OneLineInfoStr, "{%s} %s [%s]    레벨：%d  체력：%d／%d 기력：%d",

  00819	a1 18 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+24
  0081e	50		 push	 eax
  0081f	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00822	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00825	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  0082b	50		 push	 eax
  0082c	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0082f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00832	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00835	50		 push	 eax
  00836	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00839	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0083c	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00842	50		 push	 eax
  00843	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00846	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00849	83 c2 55	 add	 edx, 85			; 00000055H
  0084c	52		 push	 edx
  0084d	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00850	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00853	83 c1 38	 add	 ecx, 56			; 00000038H
  00856	51		 push	 ecx
  00857	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  0085c	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@PPDMLLNC@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK@
  00861	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00866	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0086b	83 c4 24	 add	 esp, 36			; 00000024H

; 597  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 598  : 										else

  0086e	eb 50		 jmp	 SHORT $LN56@HitMouseCu
$LN55@HitMouseCu:

; 599  : 											sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d  체력：%d／%d 기력：%d",

  00870	a1 18 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+24
  00875	50		 push	 eax
  00876	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00879	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0087c	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00882	50		 push	 eax
  00883	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00886	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00889	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0088c	50		 push	 eax
  0088d	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00890	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00893	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00899	50		 push	 eax
  0089a	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  0089d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  008a0	83 c2 55	 add	 edx, 85			; 00000055H
  008a3	52		 push	 edx
  008a4	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  008a7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  008aa	83 c1 38	 add	 ecx, 56			; 00000038H
  008ad	51		 push	 ecx
  008ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@HOJFKBGI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  008b3	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  008b8	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  008bd	83 c4 20	 add	 esp, 32			; 00000020H
$LN56@HitMouseCu:

; 600  : 												pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 601  : 									}
; 602  : 								}else {

  008c0	e9 a5 01 00 00	 jmp	 $LN62@HitMouseCu
$LN49@HitMouseCu:

; 603  : 									//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d  气：%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp );
; 604  : 									if (pDispInfo->pAct->petName[0] != NULL)

  008c5	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  008c8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  008cb	ba 01 00 00 00	 mov	 edx, 1
  008d0	6b c2 00	 imul	 eax, edx, 0
  008d3	0f be 8c 01 98
	01 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+408]
  008db	85 c9		 test	 ecx, ecx
  008dd	0f 84 e1 00 00
	00		 je	 $LN57@HitMouseCu

; 605  : 										if (pc.familyName[0] != NULL)

  008e3	b8 01 00 00 00	 mov	 eax, 1
  008e8	6b c8 00	 imul	 ecx, eax, 0
  008eb	0f be 91 f6 50
	00 00		 movsx	 edx, BYTE PTR ?pc@@3UPC@@A[ecx+20726]
  008f2	85 d2		 test	 edx, edx
  008f4	74 68		 je	 SHORT $LN59@HitMouseCu

; 606  : 											sprintf_s(OneLineInfoStr, "{%s} %s    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d",

  008f6	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  008f9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  008fc	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  00902	52		 push	 edx
  00903	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00906	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00909	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  0090f	51		 push	 ecx
  00910	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR ?pc@@3UPC@@A+24
  00916	52		 push	 edx
  00917	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0091a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0091d	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  00923	52		 push	 edx
  00924	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00927	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0092a	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0092d	52		 push	 edx
  0092e	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00931	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00934	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  0093a	52		 push	 edx
  0093b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0093e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00941	83 c1 38	 add	 ecx, 56			; 00000038H
  00944	51		 push	 ecx
  00945	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  0094a	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@LEINODAC@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CF@
  0094f	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00954	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00959	83 c4 28	 add	 esp, 40			; 00000028H

; 607  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 608  : 										else

  0095c	eb 61		 jmp	 SHORT $LN60@HitMouseCu
$LN59@HitMouseCu:

; 609  : 											sprintf_s(OneLineInfoStr, "%s    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d",

  0095e	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00961	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00964	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  0096a	52		 push	 edx
  0096b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0096e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00971	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  00977	51		 push	 ecx
  00978	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR ?pc@@3UPC@@A+24
  0097e	52		 push	 edx
  0097f	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00982	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00985	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0098b	52		 push	 edx
  0098c	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0098f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00992	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00995	52		 push	 edx
  00996	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00999	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0099c	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  009a2	52		 push	 edx
  009a3	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  009a6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  009a9	83 c1 38	 add	 ecx, 56			; 00000038H
  009ac	51		 push	 ecx
  009ad	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EMBJKOHD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@
  009b2	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  009b7	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  009bc	83 c4 24	 add	 esp, 36			; 00000024H
$LN60@HitMouseCu:

; 610  : 												pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 611  : 									else

  009bf	e9 a6 00 00 00	 jmp	 $LN62@HitMouseCu
$LN57@HitMouseCu:

; 612  : 										if (pc.familyName[0] != NULL)

  009c4	b8 01 00 00 00	 mov	 eax, 1
  009c9	6b c8 00	 imul	 ecx, eax, 0
  009cc	0f be 91 f6 50
	00 00		 movsx	 edx, BYTE PTR ?pc@@3UPC@@A[ecx+20726]
  009d3	85 d2		 test	 edx, edx
  009d5	74 4d		 je	 SHORT $LN61@HitMouseCu

; 613  : 											sprintf_s(OneLineInfoStr, "{%s} %s    레벨：%d   체력：%d／%d 기력：%d",

  009d7	a1 18 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+24
  009dc	50		 push	 eax
  009dd	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  009e0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  009e3	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  009e9	50		 push	 eax
  009ea	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  009ed	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  009f0	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  009f3	50		 push	 eax
  009f4	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  009f7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  009fa	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00a00	50		 push	 eax
  00a01	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00a04	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00a07	83 c2 38	 add	 edx, 56			; 00000038H
  00a0a	52		 push	 edx
  00a0b	68 f6 50 00 00	 push	 OFFSET ?pc@@3UPC@@A+20726
  00a10	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BCLHOFFF@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP@
  00a15	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00a1a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a1f	83 c4 20	 add	 esp, 32			; 00000020H

; 614  : 												pc.familyName, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 615  : 										else

  00a22	eb 46		 jmp	 SHORT $LN62@HitMouseCu
$LN61@HitMouseCu:

; 616  : 											sprintf_s(OneLineInfoStr, "%s    레벨：%d   체력：%d／%d 기력：%d",

  00a24	a1 18 00 00 00	 mov	 eax, DWORD PTR ?pc@@3UPC@@A+24
  00a29	50		 push	 eax
  00a2a	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00a2d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00a30	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  00a36	50		 push	 eax
  00a37	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00a3a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00a3d	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00a40	50		 push	 eax
  00a41	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00a44	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00a47	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00a4d	50		 push	 eax
  00a4e	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00a51	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00a54	83 c2 38	 add	 edx, 56			; 00000038H
  00a57	52		 push	 edx
  00a58	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BFNFPHOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b@
  00a5d	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00a62	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00a67	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN62@HitMouseCu:

; 617  : 												pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pc.mp);
; 618  : 								}
; 619  : 							}else

  00a6a	e9 63 04 00 00	 jmp	 $LN88@HitMouseCu
$LN47@HitMouseCu:

; 620  : 								if (pDispInfo->pAct->atr & ACT_ATR_TYPE_OTHER_PC) {

  00a6f	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00a72	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00a75	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00a7b	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  00a81	0f 84 1a 03 00
	00		 je	 $LN63@HitMouseCu

; 621  : #ifdef _MOUSE_DBL_CLICK
; 622  : 									if (mouseDblRightOn) {

  00a87	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mouseDblRightOn@@3HA, 0 ; mouseDblRightOn
  00a8e	74 1f		 je	 SHORT $LN65@HitMouseCu

; 623  : 										openServerWindow(WINDOW_MESSAGETYPE_MOUSEGETNAME, 0, 0, 0, pDispInfo->pAct->name);

  00a90	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00a93	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00a96	83 c1 38	 add	 ecx, 56			; 00000038H
  00a99	51		 push	 ecx
  00a9a	6a 00		 push	 0
  00a9c	6a 00		 push	 0
  00a9e	6a 00		 push	 0
  00aa0	6a 67		 push	 103			; 00000067H
  00aa2	e8 00 00 00 00	 call	 ?openServerWindow@@YAXHHHHPAD@Z ; openServerWindow
  00aa7	83 c4 14	 add	 esp, 20			; 00000014H

; 624  : 										return;

  00aaa	e9 72 0b 00 00	 jmp	 $LN1@HitMouseCu
$LN65@HitMouseCu:

; 625  : 									}
; 626  : #endif
; 627  : 									itemNameColor = pDispInfo->pAct->itemNameColor;

  00aaf	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00ab2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00ab5	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00abb	89 55 d0	 mov	 DWORD PTR _itemNameColor$[ebp], edx

; 628  : 									if (pDispInfo->pAct->freeName[0] != NULL) {

  00abe	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00ac1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00ac4	ba 01 00 00 00	 mov	 edx, 1
  00ac9	6b c2 00	 imul	 eax, edx, 0
  00acc	0f be 4c 01 55	 movsx	 ecx, BYTE PTR [ecx+eax+85]
  00ad1	85 c9		 test	 ecx, ecx
  00ad3	0f 84 7a 01 00
	00		 je	 $LN66@HitMouseCu

; 629  : 										//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 630  : 										if (pDispInfo->pAct->petName[0] != NULL)

  00ad9	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00adc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00adf	ba 01 00 00 00	 mov	 edx, 1
  00ae4	6b c2 00	 imul	 eax, edx, 0
  00ae7	0f be 8c 01 98
	01 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+408]
  00aef	85 c9		 test	 ecx, ecx
  00af1	0f 84 c8 00 00
	00		 je	 $LN68@HitMouseCu

; 631  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  00af7	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00afa	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00afd	ba 01 00 00 00	 mov	 edx, 1
  00b02	6b c2 00	 imul	 eax, edx, 0
  00b05	0f be 8c 01 70
	01 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+368]
  00b0d	85 c9		 test	 ecx, ecx
  00b0f	74 5c		 je	 SHORT $LN70@HitMouseCu

; 632  : 												sprintf_s(OneLineInfoStr, "{%s} %s [%s]    레벨：%d [탑승]%s 레벨：%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  00b11	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00b14	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00b17	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  00b1d	52		 push	 edx
  00b1e	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00b21	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00b24	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  00b2a	51		 push	 ecx
  00b2b	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00b2e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00b31	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00b37	51		 push	 ecx
  00b38	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00b3b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00b3e	83 c0 55	 add	 eax, 85			; 00000055H
  00b41	50		 push	 eax
  00b42	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00b45	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00b48	83 c2 38	 add	 edx, 56			; 00000038H
  00b4b	52		 push	 edx
  00b4c	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00b4f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00b52	81 c1 70 01 00
	00		 add	 ecx, 368		; 00000170H
  00b58	51		 push	 ecx
  00b59	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@BJMFPFF@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CF@
  00b5e	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00b63	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00b68	83 c4 20	 add	 esp, 32			; 00000020H

; 633  : 											else

  00b6b	eb 4d		 jmp	 SHORT $LN71@HitMouseCu
$LN70@HitMouseCu:

; 634  : 												sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d [탑승]%s 레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  00b6d	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00b70	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00b73	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  00b79	52		 push	 edx
  00b7a	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00b7d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00b80	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  00b86	51		 push	 ecx
  00b87	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00b8a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00b8d	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00b93	51		 push	 ecx
  00b94	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00b97	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00b9a	83 c0 55	 add	 eax, 85			; 00000055H
  00b9d	50		 push	 eax
  00b9e	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00ba1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00ba4	83 c2 38	 add	 edx, 56			; 00000038H
  00ba7	52		 push	 edx
  00ba8	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@
  00bad	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00bb2	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00bb7	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN71@HitMouseCu:

; 635  : 										else

  00bba	e9 8f 00 00 00	 jmp	 $LN73@HitMouseCu
$LN68@HitMouseCu:

; 636  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  00bbf	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00bc2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00bc5	ba 01 00 00 00	 mov	 edx, 1
  00bca	6b c2 00	 imul	 eax, edx, 0
  00bcd	0f be 8c 01 70
	01 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+368]
  00bd5	85 c9		 test	 ecx, ecx
  00bd7	74 42		 je	 SHORT $LN72@HitMouseCu

; 637  : 												sprintf_s(OneLineInfoStr, "{%s} %s [%s]    레벨：%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00bd9	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00bdc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00bdf	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00be5	52		 push	 edx
  00be6	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00be9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00bec	83 c1 55	 add	 ecx, 85			; 00000055H
  00bef	51		 push	 ecx
  00bf0	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00bf3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00bf6	83 c0 38	 add	 eax, 56			; 00000038H
  00bf9	50		 push	 eax
  00bfa	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00bfd	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00c00	81 c2 70 01 00
	00		 add	 edx, 368		; 00000170H
  00c06	52		 push	 edx
  00c07	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GLFJPAHD@?$HL?$CFs?$HN?5?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  00c0c	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00c11	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00c16	83 c4 18	 add	 esp, 24			; 00000018H

; 638  : 											else

  00c19	eb 33		 jmp	 SHORT $LN73@HitMouseCu
$LN72@HitMouseCu:

; 639  : 												sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00c1b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00c1e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c21	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00c27	52		 push	 edx
  00c28	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00c2b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c2e	83 c1 55	 add	 ecx, 85			; 00000055H
  00c31	51		 push	 ecx
  00c32	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00c35	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00c38	83 c0 38	 add	 eax, 56			; 00000038H
  00c3b	50		 push	 eax
  00c3c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  00c41	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00c46	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00c4b	83 c4 14	 add	 esp, 20			; 00000014H
$LN73@HitMouseCu:

; 640  : 									}else{

  00c4e	e9 49 01 00 00	 jmp	 $LN79@HitMouseCu
$LN66@HitMouseCu:

; 641  : 										//sprintf_s( OneLineInfoStr,"%s  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 642  : 										if (pDispInfo->pAct->petName[0] != NULL)

  00c53	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00c56	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c59	ba 01 00 00 00	 mov	 edx, 1
  00c5e	6b c2 00	 imul	 eax, edx, 0
  00c61	0f be 8c 01 98
	01 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+408]
  00c69	85 c9		 test	 ecx, ecx
  00c6b	0f 84 b1 00 00
	00		 je	 $LN74@HitMouseCu

; 643  : 											if (pDispInfo->pAct->fmname[0] != NULL)

  00c71	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00c74	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c77	ba 01 00 00 00	 mov	 edx, 1
  00c7c	6b c2 00	 imul	 eax, edx, 0
  00c7f	0f be 8c 01 70
	01 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+368]
  00c87	85 c9		 test	 ecx, ecx
  00c89	74 52		 je	 SHORT $LN76@HitMouseCu

; 644  : 												sprintf_s(OneLineInfoStr, "{%s} %s    레벨：%d [탑승]%s 레벨：%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  00c8b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00c8e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c91	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  00c97	52		 push	 edx
  00c98	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00c9b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c9e	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  00ca4	51		 push	 ecx
  00ca5	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00ca8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00cab	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00cb1	51		 push	 ecx
  00cb2	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00cb5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00cb8	83 c0 38	 add	 eax, 56			; 00000038H
  00cbb	50		 push	 eax
  00cbc	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  00cbf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00cc2	81 c2 70 01 00
	00		 add	 edx, 368		; 00000170H
  00cc8	52		 push	 edx
  00cc9	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NEECIEOL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@
  00cce	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00cd3	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00cd8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 645  : 											else

  00cdb	eb 43		 jmp	 SHORT $LN77@HitMouseCu
$LN76@HitMouseCu:

; 646  : 												sprintf_s(OneLineInfoStr, "%s    레벨：%d [탑승]%s 레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);

  00cdd	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00ce0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00ce3	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  00ce9	52		 push	 edx
  00cea	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00ced	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00cf0	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  00cf6	51		 push	 ecx
  00cf7	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00cfa	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00cfd	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00d03	51		 push	 ecx
  00d04	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00d07	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00d0a	83 c0 38	 add	 eax, 56			; 00000038H
  00d0d	50		 push	 eax
  00d0e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  00d13	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00d18	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00d1d	83 c4 18	 add	 esp, 24			; 00000018H
$LN77@HitMouseCu:

; 647  : 										else

  00d20	eb 7a		 jmp	 SHORT $LN79@HitMouseCu
$LN74@HitMouseCu:

; 648  : 											if (pDispInfo->pAct->fmname[0] != NULL) {

  00d22	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00d25	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00d28	ba 01 00 00 00	 mov	 edx, 1
  00d2d	6b c2 00	 imul	 eax, edx, 0
  00d30	0f be 8c 01 70
	01 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+368]
  00d38	85 c9		 test	 ecx, ecx
  00d3a	74 37		 je	 SHORT $LN78@HitMouseCu

; 649  : 												sprintf_s(OneLineInfoStr, "{%s} %s    레벨：%d", pDispInfo->pAct->fmname, pDispInfo->pAct->name, pDispInfo->pAct->level);

  00d3c	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00d3f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00d42	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00d48	52		 push	 edx
  00d49	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00d4c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00d4f	83 c1 38	 add	 ecx, 56			; 00000038H
  00d52	51		 push	 ecx
  00d53	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  00d56	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00d59	05 70 01 00 00	 add	 eax, 368		; 00000170H
  00d5e	50		 push	 eax
  00d5f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HHCDKFL@?$HL?$CFs?$HN?5?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  00d64	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00d69	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00d6e	83 c4 14	 add	 esp, 20			; 00000014H

; 650  : 											}
; 651  : 											else {

  00d71	eb 29		 jmp	 SHORT $LN79@HitMouseCu
$LN78@HitMouseCu:

; 652  : 												sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  00d73	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00d76	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00d79	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00d7f	52		 push	 edx
  00d80	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00d83	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00d86	83 c1 38	 add	 ecx, 56			; 00000038H
  00d89	51		 push	 ecx
  00d8a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  00d8f	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00d94	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00d99	83 c4 10	 add	 esp, 16			; 00000010H
$LN79@HitMouseCu:

; 653  : 											}
; 654  : 									}
; 655  : 								}else

  00d9c	e9 31 01 00 00	 jmp	 $LN88@HitMouseCu
$LN63@HitMouseCu:

; 656  : 									if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PET) {//对像单纯是宠物

  00da1	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00da4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00da7	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00dad	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  00db3	74 70		 je	 SHORT $LN80@HitMouseCu

; 657  : 										if (pDispInfo->pAct->freeName[0] != NULL) {

  00db5	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00db8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00dbb	ba 01 00 00 00	 mov	 edx, 1
  00dc0	6b c2 00	 imul	 eax, edx, 0
  00dc3	0f be 4c 01 55	 movsx	 ecx, BYTE PTR [ecx+eax+85]
  00dc8	85 c9		 test	 ecx, ecx
  00dca	74 2b		 je	 SHORT $LN82@HitMouseCu

; 658  : 											sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00dcc	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00dcf	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00dd2	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00dd8	52		 push	 edx
  00dd9	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00ddc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00ddf	83 c1 55	 add	 ecx, 85			; 00000055H
  00de2	51		 push	 ecx
  00de3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  00de8	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00ded	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00df2	83 c4 10	 add	 esp, 16			; 00000010H

; 659  : 										}
; 660  : 										else {

  00df5	eb 29		 jmp	 SHORT $LN83@HitMouseCu
$LN82@HitMouseCu:

; 661  : 											sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  00df7	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00dfa	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00dfd	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00e03	52		 push	 edx
  00e04	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00e07	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e0a	83 c1 38	 add	 ecx, 56			; 00000038H
  00e0d	51		 push	 ecx
  00e0e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  00e13	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00e18	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00e1d	83 c4 10	 add	 esp, 16			; 00000010H
$LN83@HitMouseCu:

; 662  : 										}
; 663  : 									}else

  00e20	e9 ad 00 00 00	 jmp	 $LN88@HitMouseCu
$LN80@HitMouseCu:

; 664  : 										if (pDispInfo->pAct->atr & ACT_ATR_TYPE_ITEM) {

  00e25	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00e28	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e2b	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00e31	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00e37	74 37		 je	 SHORT $LN84@HitMouseCu

; 665  : 											itemNameColor = pDispInfo->pAct->itemNameColor;

  00e39	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00e3c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e3f	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00e45	89 55 d0	 mov	 DWORD PTR _itemNameColor$[ebp], edx

; 666  : 											sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);

  00e48	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00e4b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e4e	83 c1 38	 add	 ecx, 56			; 00000038H
  00e51	51		 push	 ecx
  00e52	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00e57	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00e5c	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00e61	83 c4 0c	 add	 esp, 12			; 0000000cH

; 667  : #ifdef _ITEM_PATH
; 668  : 											ITEMPATHFLAG = TRUE;

  00e64	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ITEMPATHFLAG@@3HA, 1 ; ITEMPATHFLAG

; 669  : #endif
; 670  : 										}else

  00e6e	eb 62		 jmp	 SHORT $LN88@HitMouseCu
$LN84@HitMouseCu:

; 671  : 											if (pDispInfo->pAct->atr & ACT_ATR_TYPE_GOLD) {

  00e70	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00e73	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e76	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00e7c	81 e2 00 08 00
	00		 and	 edx, 2048		; 00000800H
  00e82	74 1e		 je	 SHORT $LN86@HitMouseCu

; 672  : 												sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);

  00e84	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00e87	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e8a	83 c1 38	 add	 ecx, 56			; 00000038H
  00e8d	51		 push	 ecx
  00e8e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00e93	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00e98	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00e9d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 673  : 											}else

  00ea0	eb 30		 jmp	 SHORT $LN88@HitMouseCu
$LN86@HitMouseCu:

; 674  : 												if (pDispInfo->pAct->atr & ACT_ATR_TYPE_OTHER) {

  00ea2	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00ea5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00ea8	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00eae	81 e2 00 10 00
	00		 and	 edx, 4096		; 00001000H
  00eb4	74 1c		 je	 SHORT $LN88@HitMouseCu

; 675  : 													sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);

  00eb6	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00eb9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00ebc	83 c1 38	 add	 ecx, 56			; 00000038H
  00ebf	51		 push	 ecx
  00ec0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00ec5	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00eca	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00ecf	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN88@HitMouseCu:

; 676  : 												}
; 677  : 						}else

  00ed2	e9 96 06 00 00	 jmp	 $LN121@HitMouseCu
$LN44@HitMouseCu:

; 678  : 							if (ProcNo == PROC_BATTLE) {

  00ed7	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?ProcNo@@3IA, 10 ; ProcNo, 0000000aH
  00ede	0f 85 89 06 00
	00		 jne	 $LN121@HitMouseCu

; 679  : 								if (pDispInfo->pAct->atr & ACT_ATR_TYPE_PET) {

  00ee4	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00ee7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00eea	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00ef0	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  00ef6	74 70		 je	 SHORT $LN90@HitMouseCu

; 680  : 									if (pDispInfo->pAct->freeName[0] != NULL) {

  00ef8	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00efb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00efe	ba 01 00 00 00	 mov	 edx, 1
  00f03	6b c2 00	 imul	 eax, edx, 0
  00f06	0f be 4c 01 55	 movsx	 ecx, BYTE PTR [ecx+eax+85]
  00f0b	85 c9		 test	 ecx, ecx
  00f0d	74 2b		 je	 SHORT $LN92@HitMouseCu

; 681  : 										sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  00f0f	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00f12	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f15	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00f1b	52		 push	 edx
  00f1c	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00f1f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f22	83 c1 55	 add	 ecx, 85			; 00000055H
  00f25	51		 push	 ecx
  00f26	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  00f2b	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00f30	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00f35	83 c4 10	 add	 esp, 16			; 00000010H

; 682  : 									}else {

  00f38	eb 29		 jmp	 SHORT $LN93@HitMouseCu
$LN92@HitMouseCu:

; 683  : 										sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  00f3a	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00f3d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f40	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00f46	52		 push	 edx
  00f47	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00f4a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f4d	83 c1 38	 add	 ecx, 56			; 00000038H
  00f50	51		 push	 ecx
  00f51	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  00f56	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00f5b	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00f60	83 c4 10	 add	 esp, 16			; 00000010H
$LN93@HitMouseCu:

; 684  : 									}
; 685  : 								}else

  00f63	e9 05 06 00 00	 jmp	 $LN121@HitMouseCu
$LN90@HitMouseCu:

; 686  : 									if (pDispInfo->pAct->atr & ACT_ATR_TYPE_ITEM) {

  00f68	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00f6b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f6e	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00f74	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00f7a	74 21		 je	 SHORT $LN94@HitMouseCu

; 687  : 										//itemNameColor = pDispInfo->pAct->itemNameColor;
; 688  : 										sprintf_s(OneLineInfoStr, "%s", pDispInfo->pAct->name);

  00f7c	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00f7f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f82	83 c1 38	 add	 ecx, 56			; 00000038H
  00f85	51		 push	 ecx
  00f86	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00f8b	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  00f90	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  00f95	83 c4 0c	 add	 esp, 12			; 0000000cH

; 689  : 									}else

  00f98	e9 d0 05 00 00	 jmp	 $LN121@HitMouseCu
$LN94@HitMouseCu:

; 690  : 										if (BattleMyNo < BATTLKPKPLYAERNUM) {

  00f9d	83 3d 00 00 00
	00 14		 cmp	 DWORD PTR ?BattleMyNo@@3HA, 20 ; BattleMyNo, 00000014H
  00fa4	0f 8d 4e 05 00
	00		 jge	 $LN96@HitMouseCu

; 691  : 											if (((ATR_EQU *)pDispInfo->pAct->pYobi)->place_no == BattleMyNo) {

  00faa	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00fad	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00fb0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00fb3	0f b6 82 1f 01
	00 00		 movzx	 eax, BYTE PTR [edx+287]
  00fba	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  00fc0	0f 85 ff 01 00
	00		 jne	 $LN98@HitMouseCu

; 692  : 												if (pDispInfo->pAct->freeName[0] != NULL) {

  00fc6	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00fc9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00fcc	ba 01 00 00 00	 mov	 edx, 1
  00fd1	6b c2 00	 imul	 eax, edx, 0
  00fd4	0f be 4c 01 55	 movsx	 ecx, BYTE PTR [ecx+eax+85]
  00fd9	85 c9		 test	 ecx, ecx
  00fdb	0f 84 fc 00 00
	00		 je	 $LN100@HitMouseCu

; 693  : 													if (pDispInfo->pAct->onRide == 1)

  00fe1	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00fe4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00fe7	83 b9 94 01 00
	00 01		 cmp	 DWORD PTR [ecx+404], 1
  00fee	0f 85 8d 00 00
	00		 jne	 $LN102@HitMouseCu

; 694  : 														sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d 기력：%d [탑승]%s 레벨：%d 체력：%d／%d",

  00ff4	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  00ff7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00ffa	8b 91 b4 01 00
	00		 mov	 edx, DWORD PTR [ecx+436]
  01000	52		 push	 edx
  01001	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01004	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01007	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  0100d	52		 push	 edx
  0100e	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01011	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01014	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  0101a	52		 push	 edx
  0101b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0101e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01021	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  01027	51		 push	 ecx
  01028	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  0102b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0102e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01034	51		 push	 ecx
  01035	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01038	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0103b	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01041	51		 push	 ecx
  01042	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01045	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01048	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0104b	51		 push	 ecx
  0104c	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  0104f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01052	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01058	51		 push	 ecx
  01059	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  0105c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0105f	83 c0 55	 add	 eax, 85			; 00000055H
  01062	50		 push	 eax
  01063	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  01066	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01069	83 c2 38	 add	 edx, 56			; 00000038H
  0106c	52		 push	 edx
  0106d	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@DGCMKPJE@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
  01072	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  01077	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0107c	83 c4 30	 add	 esp, 48			; 00000030H

; 695  : 															pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp,
; 696  : 															pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 697  : 													else

  0107f	eb 57		 jmp	 SHORT $LN103@HitMouseCu
$LN102@HitMouseCu:

; 698  : 														sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d 기력：%d",

  01081	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01084	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01087	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0108d	52		 push	 edx
  0108e	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01091	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01094	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0109a	52		 push	 edx
  0109b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0109e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  010a1	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  010a4	52		 push	 edx
  010a5	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  010a8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  010ab	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  010b1	52		 push	 edx
  010b2	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  010b5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  010b8	83 c1 55	 add	 ecx, 85			; 00000055H
  010bb	51		 push	 ecx
  010bc	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  010bf	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  010c2	83 c0 38	 add	 eax, 56			; 00000038H
  010c5	50		 push	 eax
  010c6	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@POBHMKAL@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
  010cb	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  010d0	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  010d5	83 c4 20	 add	 esp, 32			; 00000020H
$LN103@HitMouseCu:

; 699  : 															pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp);
; 700  : 												}
; 701  : 												else {

  010d8	e9 e3 00 00 00	 jmp	 $LN105@HitMouseCu
$LN100@HitMouseCu:

; 702  : 													//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d  气：%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, BattleMyMp );
; 703  : 													//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d  气：%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp );
; 704  : 													if (pDispInfo->pAct->onRide == 1)

  010dd	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  010e0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  010e3	83 b9 94 01 00
	00 01		 cmp	 DWORD PTR [ecx+404], 1
  010ea	0f 85 83 00 00
	00		 jne	 $LN104@HitMouseCu

; 705  : 														sprintf_s(OneLineInfoStr, "%s    레벨：%d  체력：%d／%d 기력：%d [탑승]%s 레벨：%d 체력：%d／%d",

  010f0	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  010f3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  010f6	8b 91 b4 01 00
	00		 mov	 edx, DWORD PTR [ecx+436]
  010fc	52		 push	 edx
  010fd	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01100	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01103	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  01109	52		 push	 edx
  0110a	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0110d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01110	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  01116	52		 push	 edx
  01117	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0111a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0111d	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  01123	51		 push	 ecx
  01124	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01127	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0112a	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  01130	51		 push	 ecx
  01131	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01134	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01137	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0113d	51		 push	 ecx
  0113e	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01141	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01144	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  01147	51		 push	 ecx
  01148	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  0114b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0114e	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01154	51		 push	 ecx
  01155	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01158	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0115b	83 c0 38	 add	 eax, 56			; 00000038H
  0115e	50		 push	 eax
  0115f	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FIPEICPD@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@
  01164	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  01169	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0116e	83 c4 2c	 add	 esp, 44			; 0000002cH

; 706  : 															pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp,
; 707  : 															pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 708  : 													else

  01171	eb 4d		 jmp	 SHORT $LN105@HitMouseCu
$LN104@HitMouseCu:

; 709  : 														sprintf_s(OneLineInfoStr, "%s    레벨：%d  체력：%d／%d 기력：%d",

  01173	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01176	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01179	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0117f	52		 push	 edx
  01180	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01183	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01186	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0118c	52		 push	 edx
  0118d	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01190	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01193	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  01196	52		 push	 edx
  01197	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0119a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0119d	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  011a3	52		 push	 edx
  011a4	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  011a7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  011aa	83 c1 38	 add	 ecx, 56			; 00000038H
  011ad	51		 push	 ecx
  011ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NFBALPFL@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$LB?b?$LH@
  011b3	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  011b8	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  011bd	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN105@HitMouseCu:

; 710  : 															pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp, pDispInfo->pAct->mp);
; 711  : 												}
; 712  : 											}else

  011c0	e9 31 03 00 00	 jmp	 $LN119@HitMouseCu
$LN98@HitMouseCu:

; 713  : 												if (((ATR_EQU *)p_party[BattleMyNo]->pYobi)->group_flg == ((ATR_EQU *)pDispInfo->pAct->pYobi)->group_flg) {

  011c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BattleMyNo@@3HA ; BattleMyNo
  011ca	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?p_party@@3PAPAUaction@@A[eax*4]
  011d1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  011d4	0f b6 42 5e	 movzx	 eax, BYTE PTR [edx+94]
  011d8	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  011db	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  011de	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  011e1	0f b6 51 5e	 movzx	 edx, BYTE PTR [ecx+94]
  011e5	3b c2		 cmp	 eax, edx
  011e7	0f 85 c7 01 00
	00		 jne	 $LN106@HitMouseCu

; 714  : 													//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%4d/%4d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 715  : 													if (pDispInfo->pAct->freeName[0] != NULL) {

  011ed	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  011f0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  011f3	ba 01 00 00 00	 mov	 edx, 1
  011f8	6b c2 00	 imul	 eax, edx, 0
  011fb	0f be 4c 01 55	 movsx	 ecx, BYTE PTR [ecx+eax+85]
  01200	85 c9		 test	 ecx, ecx
  01202	0f 84 e2 00 00
	00		 je	 $LN108@HitMouseCu

; 716  : 														//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 717  : 														if (pDispInfo->pAct->onRide == 1)

  01208	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0120b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0120e	83 b9 94 01 00
	00 01		 cmp	 DWORD PTR [ecx+404], 1
  01215	0f 85 80 00 00
	00		 jne	 $LN110@HitMouseCu

; 718  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d [탑승]%s Lv：%d 체력：%d／%d",

  0121b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0121e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01221	8b 91 b4 01 00
	00		 mov	 edx, DWORD PTR [ecx+436]
  01227	52		 push	 edx
  01228	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0122b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0122e	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  01234	52		 push	 edx
  01235	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01238	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0123b	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  01241	52		 push	 edx
  01242	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01245	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01248	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  0124e	51		 push	 ecx
  0124f	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01252	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01255	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0125b	51		 push	 ecx
  0125c	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  0125f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01262	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  01265	51		 push	 ecx
  01266	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01269	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0126c	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01272	51		 push	 ecx
  01273	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01276	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01279	83 c0 55	 add	 eax, 85			; 00000055H
  0127c	50		 push	 eax
  0127d	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  01280	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01283	83 c2 38	 add	 edx, 56			; 00000038H
  01286	52		 push	 edx
  01287	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@NPPEMHLM@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
  0128c	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  01291	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  01296	83 c4 2c	 add	 esp, 44			; 0000002cH

; 719  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp,
; 720  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 721  : 														else

  01299	eb 4a		 jmp	 SHORT $LN111@HitMouseCu
$LN110@HitMouseCu:

; 722  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d",

  0129b	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0129e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  012a1	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  012a7	52		 push	 edx
  012a8	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  012ab	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  012ae	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  012b1	52		 push	 edx
  012b2	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  012b5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  012b8	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  012be	52		 push	 edx
  012bf	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  012c2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  012c5	83 c1 55	 add	 ecx, 85			; 00000055H
  012c8	51		 push	 ecx
  012c9	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  012cc	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  012cf	83 c0 38	 add	 eax, 56			; 00000038H
  012d2	50		 push	 eax
  012d3	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
  012d8	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  012dd	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  012e2	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN111@HitMouseCu:

; 723  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 724  : 													}else {

  012e5	e9 c5 00 00 00	 jmp	 $LN113@HitMouseCu
$LN108@HitMouseCu:

; 725  : 														//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 726  : 														if (pDispInfo->pAct->onRide == 1)

  012ea	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  012ed	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  012f0	83 b9 94 01 00
	00 01		 cmp	 DWORD PTR [ecx+404], 1
  012f7	75 76		 jne	 SHORT $LN112@HitMouseCu

; 727  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d／%d [탑승]%s 레벨：%d 체력：%d／%d",

  012f9	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  012fc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  012ff	8b 91 b4 01 00
	00		 mov	 edx, DWORD PTR [ecx+436]
  01305	52		 push	 edx
  01306	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01309	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0130c	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  01312	52		 push	 edx
  01313	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01316	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01319	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  0131f	52		 push	 edx
  01320	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01323	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01326	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  0132c	51		 push	 ecx
  0132d	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01330	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01333	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  01339	51		 push	 ecx
  0133a	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  0133d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01340	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  01343	51		 push	 ecx
  01344	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01347	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0134a	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01350	51		 push	 ecx
  01351	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01354	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01357	83 c0 38	 add	 eax, 56			; 00000038H
  0135a	50		 push	 eax
  0135b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KIHEBAMM@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?5?$FL?E?$LO?$LN@
  01360	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  01365	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0136a	83 c4 28	 add	 esp, 40			; 00000028H

; 728  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp,
; 729  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp, pDispInfo->pAct->petMaxHp);
; 730  : 														else

  0136d	eb 40		 jmp	 SHORT $LN113@HitMouseCu
$LN112@HitMouseCu:

; 731  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d／%d",

  0136f	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01372	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01375	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0137b	52		 push	 edx
  0137c	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0137f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01382	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  01385	52		 push	 edx
  01386	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01389	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0138c	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  01392	52		 push	 edx
  01393	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01396	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01399	83 c1 38	 add	 ecx, 56			; 00000038H
  0139c	51		 push	 ecx
  0139d	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IDEDLOOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd?$AA@
  013a2	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  013a7	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  013ac	83 c4 18	 add	 esp, 24			; 00000018H
$LN113@HitMouseCu:

; 732  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 733  : 													}
; 734  : 												}else{

  013af	e9 42 01 00 00	 jmp	 $LN119@HitMouseCu
$LN106@HitMouseCu:

; 735  : 													if (pDispInfo->pAct->freeName[0] != NULL) {

  013b4	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  013b7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  013ba	ba 01 00 00 00	 mov	 edx, 1
  013bf	6b c2 00	 imul	 eax, edx, 0
  013c2	0f be 4c 01 55	 movsx	 ecx, BYTE PTR [ecx+eax+85]
  013c7	85 c9		 test	 ecx, ecx
  013c9	0f 84 aa 00 00
	00		 je	 $LN114@HitMouseCu

; 736  : 														//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 737  : 														if (pDispInfo->pAct->onRide == 1)

  013cf	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  013d2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  013d5	83 b9 94 01 00
	00 01		 cmp	 DWORD PTR [ecx+404], 1
  013dc	75 4f		 jne	 SHORT $LN116@HitMouseCu

; 738  : #ifdef _CAX_LOOK_HPMP
; 739  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d [탑승]%s 레벨：%d 체력：%d",
; 740  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 741  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 742  : #else
; 743  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d [탑승]%s 레벨：%d",

  013de	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  013e1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  013e4	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  013ea	52		 push	 edx
  013eb	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  013ee	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  013f1	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  013f7	51		 push	 ecx
  013f8	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  013fb	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  013fe	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  01404	51		 push	 ecx
  01405	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01408	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0140b	83 c0 55	 add	 eax, 85			; 00000055H
  0140e	50		 push	 eax
  0140f	8b 4d b8	 mov	 ecx, DWORD PTR _pDispInfo$[ebp]
  01412	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01415	83 c2 38	 add	 edx, 56			; 00000038H
  01418	52		 push	 edx
  01419	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@OEKPKFB@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK@
  0141e	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  01423	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  01428	83 c4 1c	 add	 esp, 28			; 0000001cH

; 744  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level,
; 745  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 746  : #endif
; 747  : 														else

  0142b	eb 4a		 jmp	 SHORT $LN117@HitMouseCu
$LN116@HitMouseCu:

; 748  : #ifndef _CAX_LOOK_HPMP
; 749  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d／%d",

  0142d	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01430	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01433	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  01439	52		 push	 edx
  0143a	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0143d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01440	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  01443	52		 push	 edx
  01444	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01447	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0144a	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  01450	52		 push	 edx
  01451	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01454	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01457	83 c1 55	 add	 ecx, 85			; 00000055H
  0145a	51		 push	 ecx
  0145b	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  0145e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01461	83 c0 38	 add	 eax, 56			; 00000038H
  01464	50		 push	 eax
  01465	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CHFACOAD@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?C?$LM?$LH?B?$KD?$LK?$CFd?$KD?$KP?$CFd@
  0146a	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0146f	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  01474	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN117@HitMouseCu:

; 750  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 751  : #else
; 752  : 															sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d",
; 753  : 																pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);
; 754  : #endif
; 755  : 													}else{

  01477	eb 7d		 jmp	 SHORT $LN119@HitMouseCu
$LN114@HitMouseCu:

; 756  : 														//sprintf_s( OneLineInfoStr,"%s  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 757  : 														if (pDispInfo->pAct->onRide == 1)

  01479	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0147c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0147f	83 b9 94 01 00
	00 01		 cmp	 DWORD PTR [ecx+404], 1
  01486	75 45		 jne	 SHORT $LN118@HitMouseCu

; 758  : #ifdef _CAX_LOOK_HPMP
; 759  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d [탑승]%s 레벨：%d 체력：%d",
; 760  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 761  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 762  : #else
; 763  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d [탑승]%s 레벨：%d",

  01488	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0148b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0148e	8b 91 ac 01 00
	00		 mov	 edx, DWORD PTR [ecx+428]
  01494	52		 push	 edx
  01495	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01498	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0149b	81 c1 98 01 00
	00		 add	 ecx, 408		; 00000198H
  014a1	51		 push	 ecx
  014a2	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  014a5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  014a8	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  014ae	51		 push	 ecx
  014af	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  014b2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  014b5	83 c0 38	 add	 eax, 56			; 00000038H
  014b8	50		 push	 eax
  014b9	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FGFKAEP@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?5?$FL?E?$LO?$LN?B?$FN?$CFs?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd@
  014be	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  014c3	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  014c8	83 c4 18	 add	 esp, 24			; 00000018H

; 764  : 																pDispInfo->pAct->name, pDispInfo->pAct->level,
; 765  : 																pDispInfo->pAct->petName, pDispInfo->pAct->petLevel);
; 766  : #endif
; 767  : 														else

  014cb	eb 29		 jmp	 SHORT $LN119@HitMouseCu
$LN118@HitMouseCu:

; 768  : #ifdef _CAX_LOOK_HPMP
; 769  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d／%d",
; 770  : 																pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 771  : #else
; 772  : 															sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  014cd	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  014d0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  014d3	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  014d9	52		 push	 edx
  014da	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  014dd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  014e0	83 c1 38	 add	 ecx, 56			; 00000038H
  014e3	51		 push	 ecx
  014e4	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  014e9	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  014ee	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  014f3	83 c4 10	 add	 esp, 16			; 00000010H
$LN119@HitMouseCu:

; 773  : #endif
; 774  : 													}
; 775  : 												}
; 776  : 										}else{

  014f6	eb 75		 jmp	 SHORT $LN121@HitMouseCu
$LN96@HitMouseCu:

; 777  : #ifdef _CAX_LOOK_HPMP
; 778  : 											if (pDispInfo->pAct->freeName[0] != NULL) {
; 779  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 780  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 781  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level );
; 782  : 												sprintf(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d [탑승]%s 레벨：%d 耐：%d",
; 783  : 													pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 784  : 													pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 785  : 											}else{
; 786  : 												//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 787  : 												//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 788  : 												//sprintf_s( OneLineInfoStr,"%s  Lv：%d", pDispInfo->pAct->name, pDispInfo->pAct->level );
; 789  : 												if (pDispInfo->pAct->petLevel == 0) {
; 790  : 													sprintf_s(OneLineInfoStr, "%s    레벨：%d 체력：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp);
; 791  : 												}
; 792  : 												else {
; 793  : 													sprintf(OneLineInfoStr, "%s [%s]    레벨：%d 체력：%d [탑승]%s 레벨：%d 체력：%d",
; 794  : 														pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp,
; 795  : 														pDispInfo->pAct->petName, pDispInfo->pAct->petLevel, pDispInfo->pAct->petHp);
; 796  : 												}
; 797  : 											}
; 798  : #else
; 799  : 											if (pDispInfo->pAct->freeName[0] != NULL) {

  014f8	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  014fb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  014fe	ba 01 00 00 00	 mov	 edx, 1
  01503	6b c2 00	 imul	 eax, edx, 0
  01506	0f be 4c 01 55	 movsx	 ecx, BYTE PTR [ecx+eax+85]
  0150b	85 c9		 test	 ecx, ecx
  0150d	74 35		 je	 SHORT $LN120@HitMouseCu

; 800  : 												//sprintf_s( OneLineInfoStr,"%s [%s]  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 801  : 												sprintf_s(OneLineInfoStr, "%s [%s]    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->freeName, pDispInfo->pAct->level);

  0150f	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01512	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01515	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  0151b	52		 push	 edx
  0151c	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  0151f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01522	83 c1 55	 add	 ecx, 85			; 00000055H
  01525	51		 push	 ecx
  01526	8b 55 b8	 mov	 edx, DWORD PTR _pDispInfo$[ebp]
  01529	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0152c	83 c0 38	 add	 eax, 56			; 00000038H
  0152f	50		 push	 eax
  01530	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPNIBCFI@?$CFs?5?$FL?$CFs?$FN?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  01535	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0153a	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0153f	83 c4 14	 add	 esp, 20			; 00000014H

; 802  : 											}else{

  01542	eb 29		 jmp	 SHORT $LN121@HitMouseCu
$LN120@HitMouseCu:

; 803  : 												//sprintf_s( OneLineInfoStr,"%s  Lv：%d  耐：%d／%d", pDispInfo->pAct->name, pDispInfo->pAct->level, pDispInfo->pAct->hp, pDispInfo->pAct->maxHp );
; 804  : 												sprintf_s(OneLineInfoStr, "%s    레벨：%d", pDispInfo->pAct->name, pDispInfo->pAct->level);

  01544	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01547	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0154a	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  01550	52		 push	 edx
  01551	8b 45 b8	 mov	 eax, DWORD PTR _pDispInfo$[ebp]
  01554	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01557	83 c1 38	 add	 ecx, 56			; 00000038H
  0155a	51		 push	 ecx
  0155b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HIBBMGOJ@?$CFs?5?5?5?5?$LH?$LJ?$LK?$KH?$KD?$LK?$CFd?$AA@
  01560	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  01565	e8 00 00 00 00	 call	 ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ; sprintf_s<256>
  0156a	83 c4 10	 add	 esp, 16			; 00000010H
$LN121@HitMouseCu:

; 805  : 											}
; 806  : #endif
; 807  : 										}
; 808  : 							}
; 809  : 					}
; 810  : 				}
; 811  : 				if (oneLineInfoFlag)

  0156d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?oneLineInfoFlag@@3HA, 0 ; oneLineInfoFlag
  01574	74 11		 je	 SHORT $LN122@HitMouseCu

; 812  : 					ShowBottomLineString(itemNameColor, OneLineInfoStr);

  01576	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  0157b	8b 45 d0	 mov	 eax, DWORD PTR _itemNameColor$[ebp]
  0157e	50		 push	 eax
  0157f	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  01584	83 c4 08	 add	 esp, 8
$LN122@HitMouseCu:

; 813  : 			}
; 814  : 			OneLineInfoStr[0] = NULL;

  01587	b8 01 00 00 00	 mov	 eax, 1
  0158c	6b c8 00	 imul	 ecx, eax, 0
  0158f	89 8d c0 fd ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  01595	81 bd c0 fd ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T2[ebp], 256	; 00000100H
  0159f	73 02		 jae	 SHORT $LN127@HitMouseCu
  015a1	eb 05		 jmp	 SHORT $LN128@HitMouseCu
$LN127@HitMouseCu:
  015a3	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN128@HitMouseCu:
  015a8	8b 95 c0 fd ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  015ae	c6 82 00 00 00
	00 00		 mov	 BYTE PTR ?OneLineInfoStr@@3PADA[edx], 0

; 815  : 			mouse.level = pDispSort->dispPrio;

  015b5	8b 45 c4	 mov	 eax, DWORD PTR _pDispSort$[ebp]
  015b8	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  015bb	88 0d 44 00 00
	00		 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, cl

; 816  : 			return;

  015c1	eb 5e		 jmp	 SHORT $LN1@HitMouseCu
$LN25@HitMouseCu:

; 817  : 		}
; 818  : 	}

  015c3	e9 9f ec ff ff	 jmp	 $LN5@HitMouseCu
$LN6@HitMouseCu:

; 819  : 	mouse.level = DISP_PRIO_TILE;

  015c8	c6 05 44 00 00
	00 01		 mov	 BYTE PTR ?mouse@@3UMOUSE@@A+68, 1

; 820  : 	HitDispNo = -1;

  015cf	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?HitDispNo@@3HA, -1 ; HitDispNo

; 821  : 	if (TaskBarFlag == FALSE) {

  015d9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TaskBarFlag@@3HA, 0 ; TaskBarFlag
  015e0	75 11		 jne	 SHORT $LN123@HitMouseCu

; 822  : 		ShowBottomLineString(itemNameColor, OneLineInfoStr);

  015e2	68 00 00 00 00	 push	 OFFSET ?OneLineInfoStr@@3PADA ; OneLineInfoStr
  015e7	8b 45 d0	 mov	 eax, DWORD PTR _itemNameColor$[ebp]
  015ea	50		 push	 eax
  015eb	e8 00 00 00 00	 call	 ?ShowBottomLineString@@YAXHPAD@Z ; ShowBottomLineString
  015f0	83 c4 08	 add	 esp, 8
$LN123@HitMouseCu:

; 823  : 	}
; 824  : 	OneLineInfoStr[0] = NULL;

  015f3	b8 01 00 00 00	 mov	 eax, 1
  015f8	6b c8 00	 imul	 ecx, eax, 0
  015fb	89 8d b4 fd ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  01601	81 bd b4 fd ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T1[ebp], 256	; 00000100H
  0160b	73 02		 jae	 SHORT $LN129@HitMouseCu
  0160d	eb 05		 jmp	 SHORT $LN130@HitMouseCu
$LN129@HitMouseCu:
  0160f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN130@HitMouseCu:
  01614	8b 95 b4 fd ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0161a	c6 82 00 00 00
	00 00		 mov	 BYTE PTR ?OneLineInfoStr@@3PADA[edx], 0
$LN1@HitMouseCu:

; 825  : 
; 826  : }

  01621	52		 push	 edx
  01622	8b cd		 mov	 ecx, ebp
  01624	50		 push	 eax
  01625	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN133@HitMouseCu
  0162b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01630	58		 pop	 eax
  01631	5a		 pop	 edx
  01632	5f		 pop	 edi
  01633	5e		 pop	 esi
  01634	5b		 pop	 ebx
  01635	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01638	33 cd		 xor	 ecx, ebp
  0163a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0163f	81 c4 50 02 00
	00		 add	 esp, 592		; 00000250H
  01645	3b ec		 cmp	 ebp, esp
  01647	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0164c	8b e5		 mov	 esp, ebp
  0164e	5d		 pop	 ebp
  0164f	c3		 ret	 0
$LN133@HitMouseCu:
  01650	01 00 00 00	 DD	 1
  01654	00 00 00 00	 DD	 $LN132@HitMouseCu
$LN132@HitMouseCu:
  01658	a4 fe ff ff	 DD	 -348			; fffffea4H
  0165c	00 01 00 00	 DD	 256			; 00000100H
  01660	00 00 00 00	 DD	 $LN131@HitMouseCu
$LN131@HitMouseCu:
  01664	6d		 DB	 109			; 0000006dH
  01665	73		 DB	 115			; 00000073H
  01666	67		 DB	 103			; 00000067H
  01667	00		 DB	 0
?HitMouseCursor@@YAXXZ ENDP				; HitMouseCursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseProc@@YAXXZ
_TEXT	SEGMENT
?MouseProc@@YAXXZ PROC					; MouseProc, COMDAT

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 196  : 	static UINT leftPushTimeBak;
; 197  : 	static UINT rightPushTimeBak;
; 198  : 
; 199  : 	// ????
; 200  : 	mouse.onceState = MOUSE_NO_CRICK;

  0001e	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, 0

; 201  : 	// ???????????????????
; 202  : 	if (mouse.beforeLeftPushTime > 0)

  00028	83 3d 34 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+52, 0
  0002f	76 10		 jbe	 SHORT $LN2@MouseProc

; 203  : 	{
; 204  : 		mouse.leftPushTime = TimeGetTime() - mouse.beforeLeftPushTime;

  00031	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00036	2b 05 34 00 00
	00		 sub	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+52
  0003c	a3 38 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, eax
$LN2@MouseProc:

; 205  : 	}
; 206  : 	// ???????????????????
; 207  : 	if (mouse.beforeRightPushTime > 0)

  00041	83 3d 3c 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+60, 0
  00048	76 10		 jbe	 SHORT $LN3@MouseProc

; 208  : 	{
; 209  : 		mouse.rightPushTime = TimeGetTime() - mouse.beforeRightPushTime;

  0004a	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0004f	2b 05 3c 00 00
	00		 sub	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+60
  00055	a3 40 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, eax
$LN3@MouseProc:

; 210  : 	}
; 211  : 	// ?????????
; 212  : 	// ????????????
; 213  : 	// ?????????
; 214  : 	if (mouse.leftPushTime > 500) {

  0005a	81 3d 38 00 00
	00 f4 01 00 00	 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 500 ; 000001f4H
  00064	76 5a		 jbe	 SHORT $LN4@MouseProc

; 215  : 		// ???????
; 216  : 		if (leftPushTimeBak == 0) {

  00066	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, 0
  0006d	75 19		 jne	 SHORT $LN6@MouseProc

; 217  : 			mouse.autoState |= MOUSE_LEFT_CRICK; // ?????

  0006f	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  00074	83 c8 01	 or	 eax, 1
  00077	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 218  : 			leftPushTimeBak = mouse.leftPushTime;	// ?????

  0007c	a1 38 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+56
  00081	a3 00 00 00 00	 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, eax

; 219  : 		}
; 220  : 		else

  00086	eb 36		 jmp	 SHORT $LN7@MouseProc
$LN6@MouseProc:

; 221  : 			// ?????????
; 222  : 			if (mouse.leftPushTime - leftPushTimeBak >= MOUSE_AUTO_REPEATE_TIME) {

  00088	a1 38 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+56
  0008d	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA
  00093	83 f8 64	 cmp	 eax, 100		; 00000064H
  00096	72 19		 jb	 SHORT $LN8@MouseProc

; 223  : 				mouse.autoState |= MOUSE_LEFT_CRICK; // ?????

  00098	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  0009d	83 c8 01	 or	 eax, 1
  000a0	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 224  : 				leftPushTimeBak = mouse.leftPushTime;	// ?????

  000a5	a1 38 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+56
  000aa	a3 00 00 00 00	 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, eax

; 225  : 			}
; 226  : 			else {	// ?????????

  000af	eb 0d		 jmp	 SHORT $LN7@MouseProc
$LN8@MouseProc:

; 227  : 				mouse.autoState &= (~MOUSE_LEFT_CRICK);	// ??????

  000b1	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  000b6	83 e0 fe	 and	 eax, -2			; fffffffeH
  000b9	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax
$LN7@MouseProc:

; 228  : 			}
; 229  : 	}
; 230  : 	else {

  000be	eb 17		 jmp	 SHORT $LN5@MouseProc
$LN4@MouseProc:

; 231  : 		mouse.autoState &= (~MOUSE_LEFT_CRICK);	// ??????

  000c0	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  000c5	83 e0 fe	 and	 eax, -2			; fffffffeH
  000c8	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 232  : 		leftPushTimeBak = 0;

  000cd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?leftPushTimeBak@?1??MouseProc@@YAXXZ@4IA, 0
$LN5@MouseProc:

; 233  : 	}
; 234  : 
; 235  : 	// ????????????
; 236  : 	// ?????????
; 237  : 	if (mouse.rightPushTime > 500) {

  000d7	81 3d 40 00 00
	00 f4 01 00 00	 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 500 ; 000001f4H
  000e1	76 5a		 jbe	 SHORT $LN10@MouseProc

; 238  : 		// ???????
; 239  : 		if (rightPushTimeBak == 0) {

  000e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA, 0
  000ea	75 19		 jne	 SHORT $LN12@MouseProc

; 240  : 			mouse.autoState |= MOUSE_RIGHT_CRICK; // ?????

  000ec	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  000f1	83 c8 02	 or	 eax, 2
  000f4	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 241  : 			rightPushTimeBak = mouse.rightPushTime;	// ?????

  000f9	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+64
  000fe	a3 00 00 00 00	 mov	 DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA, eax

; 242  : 		}
; 243  : 		else

  00103	eb 36		 jmp	 SHORT $LN13@MouseProc
$LN12@MouseProc:

; 244  : 			// ?????????
; 245  : 			if (mouse.rightPushTime - rightPushTimeBak >= MOUSE_AUTO_REPEATE_TIME) {

  00105	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+64
  0010a	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA
  00110	83 f8 64	 cmp	 eax, 100		; 00000064H
  00113	72 19		 jb	 SHORT $LN14@MouseProc

; 246  : 				mouse.autoState |= MOUSE_RIGHT_CRICK; // ?????

  00115	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  0011a	83 c8 02	 or	 eax, 2
  0011d	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 247  : 				rightPushTimeBak = mouse.rightPushTime;	// ?????

  00122	a1 40 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+64
  00127	a3 00 00 00 00	 mov	 DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA, eax

; 248  : 			}
; 249  : 			else {	// ?????????

  0012c	eb 0d		 jmp	 SHORT $LN13@MouseProc
$LN14@MouseProc:

; 250  : 				mouse.autoState &= (~MOUSE_RIGHT_CRICK);	// ??????

  0012e	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  00133	83 e0 fd	 and	 eax, -3			; fffffffdH
  00136	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax
$LN13@MouseProc:

; 251  : 			}
; 252  : 	}
; 253  : 	else {

  0013b	eb 17		 jmp	 SHORT $LN11@MouseProc
$LN10@MouseProc:

; 254  : 		mouse.autoState &= (~MOUSE_RIGHT_CRICK);	// ??????

  0013d	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  00142	83 e0 fd	 and	 eax, -3			; fffffffdH
  00145	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 255  : 		rightPushTimeBak = 0;

  0014a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rightPushTimeBak@?1??MouseProc@@YAXXZ@4IA, 0
$LN11@MouseProc:

; 256  : 	}
; 257  : 
; 258  : 
; 259  : 
; 260  : 	// ????????????
; 261  : 	//if( mouse.rightPushTime > 0 ){
; 262  : 	//}else mouse.state &= (~MOUSE_RIGHT_AUTO_CRICK);
; 263  : 	// ????????????
; 264  : 	//if( !WindowMode ){
; 265  : 	//if( 0 <= mouse.nowPoint.x && mouse.nowPoint.x < 640 &&
; 266  : 	//	0 <= mouse.nowPoint.y && mouse.nowPoint.y < 480 ){
; 267  : 
; 268  : 	// ????????
; 269  : 	if (MouseCursorFlag == FALSE) {

  00154	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?MouseCursorFlag@@3HA, 0 ; MouseCursorFlag
  0015b	75 2d		 jne	 SHORT $LN1@MouseProc

; 270  : 		if (mouse.flag == FALSE) {

  0015d	83 3d 4c 00 00
	00 00		 cmp	 DWORD PTR ?mouse@@3UMOUSE@@A+76, 0
  00164	75 24		 jne	 SHORT $LN1@MouseProc

; 271  : 			StockDispBuffer(mouse.nowPoint.x + 16, mouse.nowPoint.y + 16, DISP_PRIO_MOUSE, CG_MOUSE_CURSOR, 0);

  00166	6a 00		 push	 0
  00168	68 a8 61 00 00	 push	 25000			; 000061a8H
  0016d	6a 71		 push	 113			; 00000071H
  0016f	a1 04 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+4
  00174	83 c0 10	 add	 eax, 16			; 00000010H
  00177	50		 push	 eax
  00178	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mouse@@3UMOUSE@@A
  0017e	83 c1 10	 add	 ecx, 16			; 00000010H
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 ?StockDispBuffer@@YAHHHEHH@Z ; StockDispBuffer
  00187	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@MouseProc:

; 272  : #ifdef _SHOW_MOUSE_POS
; 273  : 			char buf[20];
; 274  : 			wsprintf(buf, "%d,%d", mouse.nowPoint.x, mouse.nowPoint.y);
; 275  : 			StockFontBuffer(mouse.nowPoint.x, mouse.nowPoint.y - 15, FONT_PRIO_FRONT, 4, buf, 0);
; 276  : #endif // _SHOW_MOUSE_POS
; 277  : 
; 278  : 		}
; 279  : 	}
; 280  : 
; 281  : }

  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx
  0018d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00193	3b ec		 cmp	 ebp, esp
  00195	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
?MouseProc@@YAXXZ ENDP					; MouseProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseDblCrickRightUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseDblCrickRightUpPoint@@YAXHH@Z PROC		; MouseDblCrickRightUpPoint, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 180  : 	// ????
; 181  : 	mouse.state |= MOUSE_RIGHT_CRICK;

  0001e	a1 28 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+40
  00023	83 c8 02	 or	 eax, 2
  00026	a3 28 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, eax

; 182  : 	mouse.onceState |= MOUSE_RIGHT_DBL_CRICK;

  0002b	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00030	83 c8 20	 or	 eax, 32			; 00000020H
  00033	a3 2c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, eax

; 183  : 	mouse.onceState |= MOUSE_RIGHT_CRICK;

  00038	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  0003d	83 c8 02	 or	 eax, 2
  00040	a3 2c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, eax

; 184  : 	mouse.autoState |= MOUSE_RIGHT_CRICK;

  00045	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  0004a	83 c8 02	 or	 eax, 2
  0004d	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 185  : 	// ?????
; 186  : 	mouse.crickRightDownPoint.x = x;

  00052	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00055	a3 18 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+24, eax

; 187  : 	mouse.crickRightDownPoint.y = y;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0005d	a3 1c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+28, eax

; 188  : 	// ???????????????????
; 189  : 	mouse.beforeRightPushTime = TimeGetTime();

  00062	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00067	a3 3c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, eax

; 190  : 	mouse.rightPushTime = 0;

  0006c	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 191  : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?MouseDblCrickRightUpPoint@@YAXHH@Z ENDP		; MouseDblCrickRightUpPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseDblCrickLeftUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseDblCrickLeftUpPoint@@YAXHH@Z PROC			; MouseDblCrickLeftUpPoint, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 133  : 	// ????
; 134  : 	//mouse.onceState |= ( MOUSE_LEFT_DBL_CRICK | MOUSE_LEFT_CRICK );
; 135  : 	mouse.state |= MOUSE_LEFT_CRICK;

  0001e	a1 28 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+40
  00023	83 c8 01	 or	 eax, 1
  00026	a3 28 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, eax

; 136  : 	mouse.onceState |= MOUSE_LEFT_DBL_CRICK;

  0002b	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00030	83 c8 10	 or	 eax, 16			; 00000010H
  00033	a3 2c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, eax

; 137  : 	mouse.onceState |= MOUSE_LEFT_CRICK;

  00038	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  0003d	83 c8 01	 or	 eax, 1
  00040	a3 2c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, eax

; 138  : 	mouse.autoState |= MOUSE_LEFT_CRICK;

  00045	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  0004a	83 c8 01	 or	 eax, 1
  0004d	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 139  : 	// ?????
; 140  : 	mouse.crickLeftDownPoint.x = x;

  00052	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00055	a3 08 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+8, eax

; 141  : 	mouse.crickLeftDownPoint.y = y;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0005d	a3 0c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+12, eax

; 142  : 	// ???????????????????
; 143  : 	mouse.beforeLeftPushTime = TimeGetTime();

  00062	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00067	a3 34 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, eax

; 144  : 	mouse.leftPushTime = 0;

  0006c	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 145  : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?MouseDblCrickLeftUpPoint@@YAXHH@Z ENDP			; MouseDblCrickLeftUpPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseCrickRightUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickRightUpPoint@@YAXHH@Z PROC			; MouseCrickRightUpPoint, COMDAT

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 165  : 	// ????
; 166  : 	mouse.state &= (~MOUSE_RIGHT_CRICK);

  0001e	a1 28 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+40
  00023	83 e0 fd	 and	 eax, -3			; fffffffdH
  00026	a3 28 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, eax

; 167  : 	mouse.onceState |= MOUSE_RIGHT_CRICK_UP;

  0002b	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00030	83 c8 08	 or	 eax, 8
  00033	a3 2c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, eax

; 168  : 	mouse.autoState &= (~MOUSE_RIGHT_CRICK);

  00038	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  0003d	83 e0 fd	 and	 eax, -3			; fffffffdH
  00040	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 169  : 	// ?????
; 170  : 	mouse.crickRightUpPoint.x = x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00048	a3 20 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+32, eax

; 171  : 	mouse.crickRightUpPoint.y = y;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00050	a3 24 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+36, eax

; 172  : 	// ????????????????
; 173  : 	mouse.beforeRightPushTime = 0;

  00055	c7 05 3c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, 0

; 174  : 	mouse.rightPushTime = 0;

  0005f	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 175  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?MouseCrickRightUpPoint@@YAXHH@Z ENDP			; MouseCrickRightUpPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseCrickRightDownPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickRightDownPoint@@YAXHH@Z PROC			; MouseCrickRightDownPoint, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 150  : 	// ????
; 151  : 	mouse.state |= MOUSE_RIGHT_CRICK;

  0001e	a1 28 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+40
  00023	83 c8 02	 or	 eax, 2
  00026	a3 28 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, eax

; 152  : 	mouse.onceState |= MOUSE_RIGHT_CRICK;

  0002b	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00030	83 c8 02	 or	 eax, 2
  00033	a3 2c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, eax

; 153  : 	mouse.autoState |= MOUSE_RIGHT_CRICK;

  00038	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  0003d	83 c8 02	 or	 eax, 2
  00040	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 154  : 	// ?????
; 155  : 	mouse.crickRightDownPoint.x = x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00048	a3 18 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+24, eax

; 156  : 	mouse.crickRightDownPoint.y = y;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00050	a3 1c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+28, eax

; 157  : 	// ???????????????????
; 158  : 	mouse.beforeRightPushTime = TimeGetTime();

  00055	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0005a	a3 3c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+60, eax

; 159  : 	mouse.rightPushTime = 0;

  0005f	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+64, 0

; 160  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?MouseCrickRightDownPoint@@YAXHH@Z ENDP			; MouseCrickRightDownPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseCrickLeftUpPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickLeftUpPoint@@YAXHH@Z PROC			; MouseCrickLeftUpPoint, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 118  : 	// ????
; 119  : 	mouse.state &= (~MOUSE_LEFT_CRICK);

  0001e	a1 28 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+40
  00023	83 e0 fe	 and	 eax, -2			; fffffffeH
  00026	a3 28 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, eax

; 120  : 	mouse.onceState |= MOUSE_LEFT_CRICK_UP;

  0002b	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00030	83 c8 04	 or	 eax, 4
  00033	a3 2c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, eax

; 121  : 	mouse.autoState &= (~MOUSE_LEFT_CRICK);

  00038	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  0003d	83 e0 fe	 and	 eax, -2			; fffffffeH
  00040	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 122  : 	// ?????
; 123  : 	mouse.crickLeftUpPoint.x = x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00048	a3 10 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+16, eax

; 124  : 	mouse.crickLeftUpPoint.y = y;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00050	a3 14 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+20, eax

; 125  : 	// ????????????????
; 126  : 	mouse.beforeLeftPushTime = 0;

  00055	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, 0

; 127  : 	mouse.leftPushTime = 0;

  0005f	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 128  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?MouseCrickLeftUpPoint@@YAXHH@Z ENDP			; MouseCrickLeftUpPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseCrickLeftDownPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseCrickLeftDownPoint@@YAXHH@Z PROC			; MouseCrickLeftDownPoint, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 86   : #ifdef _SASHIELD
; 87   : 	VMProtectBeginVirtualization("SAS_MCLK_D");
; 88   : 	mouse.state |= MOUSE_LEFT_CRICK;
; 89   : 	mouse.onceState |= MOUSE_LEFT_CRICK;
; 90   : 	mouse.autoState |= MOUSE_LEFT_CRICK;
; 91   : 	// ?????
; 92   : 	mouse.crickLeftDownPoint.x = x;
; 93   : 	mouse.crickLeftDownPoint.y = y;
; 94   : 	// ???????????????????
; 95   : 	mouse.beforeLeftPushTime = TimeGetTime();
; 96   : 	mouse.leftPushTime = 0;
; 97   : 
; 98   : 	extern void SAS_CheckMouseClick(int x, int y);
; 99   : 	SAS_CheckMouseClick(x, y);
; 100  : 	VMProtectEnd();
; 101  : #else
; 102  : 	// ????
; 103  : 	mouse.state |= MOUSE_LEFT_CRICK;

  0001e	a1 28 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+40
  00023	83 c8 01	 or	 eax, 1
  00026	a3 28 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+40, eax

; 104  : 	mouse.onceState |= MOUSE_LEFT_CRICK;

  0002b	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+44
  00030	83 c8 01	 or	 eax, 1
  00033	a3 2c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+44, eax

; 105  : 	mouse.autoState |= MOUSE_LEFT_CRICK;

  00038	a1 30 00 00 00	 mov	 eax, DWORD PTR ?mouse@@3UMOUSE@@A+48
  0003d	83 c8 01	 or	 eax, 1
  00040	a3 30 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+48, eax

; 106  : 	// ?????
; 107  : 	mouse.crickLeftDownPoint.x = x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00048	a3 08 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+8, eax

; 108  : 	mouse.crickLeftDownPoint.y = y;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00050	a3 0c 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+12, eax

; 109  : 	// ???????????????????
; 110  : 	mouse.beforeLeftPushTime = TimeGetTime();

  00055	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  0005a	a3 34 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+52, eax

; 111  : 	mouse.leftPushTime = 0;

  0005f	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+56, 0

; 112  : #endif
; 113  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?MouseCrickLeftDownPoint@@YAXHH@Z ENDP			; MouseCrickLeftDownPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseNowPoint@@YAXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?MouseNowPoint@@YAXHH@Z PROC				; MouseNowPoint, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 48   : #ifdef _SASHIELD
; 49   : 	VMProtectBeginVirtualization("SAS_MMOVE");
; 50   : 	if (ResoMode == 1) {
; 51   : 		mouse.nowPoint.x = x * 2;
; 52   : 		mouse.nowPoint.y = y * 2;
; 53   : 	}
; 54   : 	else {
; 55   : 		mouse.nowPoint.x = x;
; 56   : 		mouse.nowPoint.y = y;
; 57   : 	}
; 58   : 	extern void RecordMouseMoveline(int x, int y);
; 59   : 	RecordMouseMoveline(x, y);
; 60   : 	VMProtectEnd();
; 61   : #else
; 62   : 	if (ResoMode == 1) {

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  00025	75 22		 jne	 SHORT $LN2@MouseNowPo

; 63   : 		if (x > 640)x = 640;

  00027	81 7d 08 80 02
	00 00		 cmp	 DWORD PTR _x$[ebp], 640	; 00000280H
  0002e	7e 07		 jle	 SHORT $LN4@MouseNowPo
  00030	c7 45 08 80 02
	00 00		 mov	 DWORD PTR _x$[ebp], 640	; 00000280H
$LN4@MouseNowPo:

; 64   : 		if (y > 480)y = 480;

  00037	81 7d 0c e0 01
	00 00		 cmp	 DWORD PTR _y$[ebp], 480	; 000001e0H
  0003e	7e 07		 jle	 SHORT $LN5@MouseNowPo
  00040	c7 45 0c e0 01
	00 00		 mov	 DWORD PTR _y$[ebp], 480	; 000001e0H
$LN5@MouseNowPo:

; 65   : 	}
; 66   : 	else {

  00047	eb 3c		 jmp	 SHORT $LN3@MouseNowPo
$LN2@MouseNowPo:

; 67   : 		if (x > lpDraw->xSize)x = lpDraw->xSize;

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00051	3b 88 84 00 00
	00		 cmp	 ecx, DWORD PTR [eax+132]
  00057	7e 0e		 jle	 SHORT $LN6@MouseNowPo
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0005e	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00064	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx
$LN6@MouseNowPo:

; 68   : 		if (y > lpDraw->ySize)y = lpDraw->ySize;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0006f	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  00075	7e 0e		 jle	 SHORT $LN3@MouseNowPo
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpDraw@@3PAUDIRECT_DRAW@@A ; lpDraw
  0007c	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00082	89 4d 0c	 mov	 DWORD PTR _y$[ebp], ecx
$LN3@MouseNowPo:

; 69   : 	}
; 70   : 	// ?????
; 71   : 	//???????????????
; 72   : 	if (ResoMode == 1) {

  00085	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ResoMode@@3HA, 1 ; ResoMode
  0008c	75 16		 jne	 SHORT $LN8@MouseNowPo

; 73   : 		mouse.nowPoint.x = x * 2;

  0008e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00091	d1 e0		 shl	 eax, 1
  00093	a3 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A, eax

; 74   : 		mouse.nowPoint.y = y * 2;

  00098	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0009b	d1 e0		 shl	 eax, 1
  0009d	a3 04 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+4, eax

; 75   : 	}
; 76   : 	else {

  000a2	eb 10		 jmp	 SHORT $LN1@MouseNowPo
$LN8@MouseNowPo:

; 77   : 		mouse.nowPoint.x = x;

  000a4	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000a7	a3 00 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A, eax

; 78   : 		mouse.nowPoint.y = y;

  000ac	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  000af	a3 04 00 00 00	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+4, eax
$LN1@MouseNowPo:

; 79   : 	}
; 80   : #endif
; 81   : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
?MouseNowPoint@@YAXHH@Z ENDP				; MouseNowPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\mouse.cpp
;	COMDAT ?MouseInit@@YAXXZ
_TEXT	SEGMENT
?MouseInit@@YAXXZ PROC					; MouseInit, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 40   : 	memset(&mouse, 0, sizeof(MOUSE));

  0001e	6a 50		 push	 80			; 00000050H
  00020	6a 00		 push	 0
  00022	68 00 00 00 00	 push	 OFFSET ?mouse@@3UMOUSE@@A ; mouse
  00027	e8 00 00 00 00	 call	 _memset
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 	mouse.itemNo = -1;

  0002f	c7 05 48 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?mouse@@3UMOUSE@@A+72, -1

; 42   : 
; 43   : 
; 44   : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?MouseInit@@YAXXZ ENDP					; MouseInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  0001e	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00023	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00026	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00029	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 __vsprintf_l
  0003c	83 c4 10	 add	 esp, 16			; 00000010H
  0003f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00042	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1787 :     return _Result;

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1788 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vsprintf_s PROC					; COMDAT

; 1515 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1516 :         return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0001e	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00021	50		 push	 eax
  00022	6a 00		 push	 0
  00024	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 __vsprintf_s_l
  00035	83 c4 14	 add	 esp, 20			; 00000014H

; 1517 :     }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_vsprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
tv73 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1494 :     int const _Result = __stdio_common_vsprintf_s(

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00039	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003c	52		 push	 edx
  0003d	8b 00		 mov	 eax, DWORD PTR [eax]
  0003f	50		 push	 eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf_s
  00046	83 c4 1c	 add	 esp, 28			; 0000001cH
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1495 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1496 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1497 : 
; 1498 :     return _Result < 0 ? -1 : _Result;

  00053	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00057	7d 0c		 jge	 SHORT $LN3@vsprintf_s
  00059	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv73[ebp], -1
  00063	eb 09		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  00065	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  00068	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
$LN4@vsprintf_s:
  0006e	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]

; 1499 : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  0001e	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00029	52		 push	 edx
  0002a	6a ff		 push	 -1
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 __vsnprintf_l
  00035	83 c4 14	 add	 esp, 20			; 00000014H

; 1459 :     #pragma warning(pop)
; 1460 : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1386 :     int const _Result = __stdio_common_vsprintf(

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	83 ca 01	 or	 edx, 1
  0003e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00041	50		 push	 eax
  00042	52		 push	 edx
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00049	83 c4 1c	 add	 esp, 28			; 0000001cH
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00056	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0005a	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  0005c	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00066	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00068	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  0006b	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  00071	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1391 : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  0001e	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
