; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Administrator\Desktop\????? ??\????? ??\Client Source Code\other\WMIInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?PADDING@@3PAEA DB 080H					; PADDING
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
PUBLIC	?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z		; MD5Update
PUBLIC	?MD5String@@YAPADPAEH@Z				; MD5String
PUBLIC	?MD5Int@@YAHPAEH@Z				; MD5Int
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?MD5Init@@YAXPAUMD5_CTX@@@Z			; MD5Init
PUBLIC	?MD5Final@@YAXQAEPAUMD5_CTX@@@Z			; MD5Final
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_04NOJCDH@?$CF02x?$AA@			; `string'
EXTRN	__imp__malloc:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_04NOJCDH@?$CF02x?$AA@
CONST	SEGMENT
??_C@_04NOJCDH@?$CF02x?$AA@ DB '%02x', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?MD5Final@@YAXQAEPAUMD5_CTX@@@Z
_TEXT	SEGMENT
tv76 = -240						; size = 4
_padLen$ = -40						; size = 4
_index$ = -28						; size = 4
_bits$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_digest$ = 8						; size = 4
_context$ = 12						; size = 4
?MD5Final@@YAXQAEPAUMD5_CTX@@@Z PROC			; MD5Final, COMDAT

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 127  :   unsigned char bits[8];
; 128  :   unsigned int index, padLen;
; 129  : 
; 130  :   /* Save number of bits */
; 131  :   Encode (bits, context->count, 8);

  00028	6a 08		 push	 8
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _context$[ebp]
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	50		 push	 eax
  00031	8d 4d f0	 lea	 ecx, DWORD PTR _bits$[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ?Encode@@YAXPAEPAKI@Z	; Encode
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 132  : 
; 133  :   /* Pad out to 56 mod 64.*/
; 134  :   index = (unsigned int)((context->count[0] >> 3) & 0x3f);

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	8b 55 0c	 mov	 edx, DWORD PTR _context$[ebp]
  00048	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0004c	c1 e8 03	 shr	 eax, 3
  0004f	83 e0 3f	 and	 eax, 63			; 0000003fH
  00052	89 45 e4	 mov	 DWORD PTR _index$[ebp], eax

; 135  :   padLen = (index < 56) ? (56 - index) : (120 - index);

  00055	83 7d e4 38	 cmp	 DWORD PTR _index$[ebp], 56 ; 00000038H
  00059	73 10		 jae	 SHORT $LN3@MD5Final
  0005b	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00060	2b 45 e4	 sub	 eax, DWORD PTR _index$[ebp]
  00063	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  00069	eb 0e		 jmp	 SHORT $LN4@MD5Final
$LN3@MD5Final:
  0006b	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00070	2b 4d e4	 sub	 ecx, DWORD PTR _index$[ebp]
  00073	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
$LN4@MD5Final:
  00079	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv76[ebp]
  0007f	89 55 d8	 mov	 DWORD PTR _padLen$[ebp], edx

; 136  :   MD5Update (context, PADDING, padLen);

  00082	8b 45 d8	 mov	 eax, DWORD PTR _padLen$[ebp]
  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET ?PADDING@@3PAEA
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _context$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ; MD5Update
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH

; 137  : 
; 138  :   /* Append length (before padding) */
; 139  :   MD5Update (context, bits, 8);

  00097	6a 08		 push	 8
  00099	8d 45 f0	 lea	 eax, DWORD PTR _bits$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _context$[ebp]
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ; MD5Update
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 140  : 
; 141  :   /* Store state in digest */
; 142  :   Encode (digest, context->state, 16);

  000a9	6a 10		 push	 16			; 00000010H
  000ab	8b 45 0c	 mov	 eax, DWORD PTR _context$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _digest$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ?Encode@@YAXPAEPAKI@Z	; Encode
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 143  : 
; 144  :   /* Zeroize sensitive information.*/
; 145  :   MD5_memset ((POINTER)context, 0, sizeof (*context));

  000bb	6a 58		 push	 88			; 00000058H
  000bd	6a 00		 push	 0
  000bf	8b 45 0c	 mov	 eax, DWORD PTR _context$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?MD5_memset@@YAXPAEHI@Z	; MD5_memset
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 146  : }

  000cb	52		 push	 edx
  000cc	8b cd		 mov	 ecx, ebp
  000ce	50		 push	 eax
  000cf	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@MD5Final
  000d5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000da	58		 pop	 eax
  000db	5a		 pop	 edx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000ef	3b ec		 cmp	 ebp, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
  000fa	66 90		 npad	 2
$LN7@MD5Final:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN6@MD5Final
$LN6@MD5Final:
  00104	f0 ff ff ff	 DD	 -16			; fffffff0H
  00108	08 00 00 00	 DD	 8
  0010c	00 00 00 00	 DD	 $LN5@MD5Final
$LN5@MD5Final:
  00110	62		 DB	 98			; 00000062H
  00111	69		 DB	 105			; 00000069H
  00112	74		 DB	 116			; 00000074H
  00113	73		 DB	 115			; 00000073H
  00114	00		 DB	 0
?MD5Final@@YAXQAEPAUMD5_CTX@@@Z ENDP			; MD5Final
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?MD5Init@@YAXPAUMD5_CTX@@@Z
_TEXT	SEGMENT
_context$ = 8						; size = 4
?MD5Init@@YAXPAUMD5_CTX@@@Z PROC			; MD5Init, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 75   :   context->count[0] = context->count[1] = 0;

  0001e	b8 04 00 00 00	 mov	 eax, 4
  00023	c1 e0 00	 shl	 eax, 0
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  00029	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0
  00031	ba 04 00 00 00	 mov	 edx, 4
  00036	6b c2 00	 imul	 eax, edx, 0
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  0003c	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 0

; 76   :   /* Load magic initialization constants.*/
; 77   :   context->state[0] = 0x67452301;

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	6b c8 00	 imul	 ecx, eax, 0
  0004c	8b 55 08	 mov	 edx, DWORD PTR _context$[ebp]
  0004f	c7 04 0a 01 23
	45 67		 mov	 DWORD PTR [edx+ecx], 1732584193 ; 67452301H

; 78   :   context->state[1] = 0xefcdab89;

  00056	b8 04 00 00 00	 mov	 eax, 4
  0005b	c1 e0 00	 shl	 eax, 0
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  00061	c7 04 01 89 ab
	cd ef		 mov	 DWORD PTR [ecx+eax], -271733879 ; efcdab89H

; 79   :   context->state[2] = 0x98badcfe;

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	d1 e0		 shl	 eax, 1
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  00072	c7 04 01 fe dc
	ba 98		 mov	 DWORD PTR [ecx+eax], -1732584194 ; 98badcfeH

; 80   :   context->state[3] = 0x10325476;

  00079	b8 04 00 00 00	 mov	 eax, 4
  0007e	6b c8 03	 imul	 ecx, eax, 3
  00081	8b 55 08	 mov	 edx, DWORD PTR _context$[ebp]
  00084	c7 04 0a 76 54
	32 10		 mov	 DWORD PTR [edx+ecx], 271733878 ; 10325476H

; 81   : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?MD5Init@@YAXPAUMD5_CTX@@@Z ENDP			; MD5Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?MD5_memset@@YAXPAEHI@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_output$ = 8						; size = 4
_value$ = 12						; size = 4
_len$ = 16						; size = 4
?MD5_memset@@YAXPAEHI@Z PROC				; MD5_memset, COMDAT

; 271  : static void MD5_memset (POINTER output, int value, unsigned int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 272  :   unsigned int i;
; 273  :   for (i = 0; i < len; i++)

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@MD5_memset
$LN2@MD5_memset:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@MD5_memset:
  00030	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00033	3b 45 10	 cmp	 eax, DWORD PTR _len$[ebp]
  00036	73 0d		 jae	 SHORT $LN1@MD5_memset

; 274  :  ((char *)output)[i] = (char)value;

  00038	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  0003b	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  0003e	8a 4d 0c	 mov	 cl, BYTE PTR _value$[ebp]
  00041	88 08		 mov	 BYTE PTR [eax], cl
  00043	eb e2		 jmp	 SHORT $LN2@MD5_memset
$LN1@MD5_memset:

; 275  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?MD5_memset@@YAXPAEHI@Z ENDP				; MD5_memset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?MD5_memcpy@@YAXPAE0I@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?MD5_memcpy@@YAXPAE0I@Z PROC				; MD5_memcpy, COMDAT

; 262  : static void MD5_memcpy (POINTER output, POINTER input, unsigned int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 263  :   unsigned int i;
; 264  : 
; 265  :   for (i = 0; i < len; i++)

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@MD5_memcpy
$LN2@MD5_memcpy:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@MD5_memcpy:
  00030	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00033	3b 45 10	 cmp	 eax, DWORD PTR _len$[ebp]
  00036	73 12		 jae	 SHORT $LN1@MD5_memcpy

; 266  : 
; 267  :  output[i] = input[i];

  00038	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  0003b	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  00041	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  00044	8a 11		 mov	 dl, BYTE PTR [ecx]
  00046	88 10		 mov	 BYTE PTR [eax], dl
  00048	eb dd		 jmp	 SHORT $LN2@MD5_memcpy
$LN1@MD5_memcpy:

; 268  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?MD5_memcpy@@YAXPAE0I@Z ENDP				; MD5_memcpy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?Decode@@YAXPAKPAEI@Z
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?Decode@@YAXPAKPAEI@Z PROC				; Decode, COMDAT

; 252  : static void Decode (UINT4 *output, unsigned char *input, unsigned int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 253  :   unsigned int i, j;
; 254  : 
; 255  :   for (i = 0, j = 0; j < len; i++, j += 4)

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 12		 jmp	 SHORT $LN4@Decode
$LN2@Decode:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  0003a	83 c1 04	 add	 ecx, 4
  0003d	89 4d ec	 mov	 DWORD PTR _j$[ebp], ecx
$LN4@Decode:
  00040	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00043	3b 45 10	 cmp	 eax, DWORD PTR _len$[ebp]
  00046	73 41		 jae	 SHORT $LN1@Decode

; 256  :  output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1]) << 8) |

  00048	8b 45 0c	 mov	 eax, DWORD PTR _input$[ebp]
  0004b	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  0004e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00051	8b 55 0c	 mov	 edx, DWORD PTR _input$[ebp]
  00054	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00057	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0005b	c1 e0 08	 shl	 eax, 8
  0005e	0b c8		 or	 ecx, eax
  00060	8b 55 0c	 mov	 edx, DWORD PTR _input$[ebp]
  00063	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00066	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0006a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0006d	0b c8		 or	 ecx, eax
  0006f	8b 55 0c	 mov	 edx, DWORD PTR _input$[ebp]
  00072	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00075	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00079	c1 e0 18	 shl	 eax, 24			; 00000018H
  0007c	0b c8		 or	 ecx, eax
  0007e	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00081	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  00084	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  00087	eb a5		 jmp	 SHORT $LN2@Decode
$LN1@Decode:

; 257  :    (((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3]) << 24);
; 258  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?Decode@@YAXPAKPAEI@Z ENDP				; Decode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?Encode@@YAXPAEPAKI@Z
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_output$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
?Encode@@YAXPAEPAKI@Z PROC				; Encode, COMDAT

; 239  : static void Encode (unsigned char *output, UINT4 *input,unsigned int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 240  :   unsigned int i, j;
; 241  : 
; 242  :   for (i = 0, j = 0; j < len; i++, j += 4) {

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 12		 jmp	 SHORT $LN4@Encode
$LN2@Encode:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  0003a	83 c1 04	 add	 ecx, 4
  0003d	89 4d ec	 mov	 DWORD PTR _j$[ebp], ecx
$LN4@Encode:
  00040	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00043	3b 45 10	 cmp	 eax, DWORD PTR _len$[ebp]
  00046	73 6d		 jae	 SHORT $LN1@Encode

; 243  :  output[j] = (unsigned char)(input[i] & 0xff);

  00048	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  0004e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00051	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00057	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  0005a	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  0005d	88 10		 mov	 BYTE PTR [eax], dl

; 244  :  output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  00065	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00068	c1 ea 08	 shr	 edx, 8
  0006b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00071	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  00074	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  00077	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 245  :  output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  00080	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00083	c1 ea 10	 shr	 edx, 16			; 00000010H
  00086	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0008c	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  0008f	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  00092	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 246  :  output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);

  00095	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  0009b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0009e	c1 ea 18	 shr	 edx, 24			; 00000018H
  000a1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000a7	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  000aa	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  000ad	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 247  :   }

  000b0	e9 79 ff ff ff	 jmp	 $LN2@Encode
$LN1@Encode:

; 248  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
?Encode@@YAXPAEPAKI@Z ENDP				; Encode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?MD5Transform@@YAXQAKQAE@Z
_TEXT	SEGMENT
_x$ = -120						; size = 64
_d$ = -48						; size = 4
_c$ = -36						; size = 4
_b$ = -24						; size = 4
_a$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_block$ = 12						; size = 4
?MD5Transform@@YAXQAKQAE@Z PROC				; MD5Transform, COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00012	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 151  :   UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	c1 e0 00	 shl	 eax, 0
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  00044	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00047	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  0004a	b8 04 00 00 00	 mov	 eax, 4
  0004f	d1 e0		 shl	 eax, 1
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  00054	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00057	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  0005a	b8 04 00 00 00	 mov	 eax, 4
  0005f	6b c8 03	 imul	 ecx, eax, 3
  00062	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 152  : 
; 153  :   Decode (x, block, 64);

  0006b	6a 40		 push	 64			; 00000040H
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _block$[ebp]
  00070	50		 push	 eax
  00071	8d 4d 88	 lea	 ecx, DWORD PTR _x$[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?Decode@@YAXPAKPAEI@Z	; Decode
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 154  : 
; 155  :   /* Round 1 */
; 156  :   FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */

  0007d	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00080	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  00083	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00086	f7 d1		 not	 ecx
  00088	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  0008b	0b c1		 or	 eax, ecx
  0008d	ba 04 00 00 00	 mov	 edx, 4
  00092	6b ca 00	 imul	 ecx, edx, 0
  00095	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00099	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  0009c	8d 84 02 78 a4
	6a d7		 lea	 eax, DWORD PTR [edx+eax-680876936]
  000a3	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  000a6	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  000a9	c1 e0 07	 shl	 eax, 7
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  000af	c1 e9 19	 shr	 ecx, 25			; 00000019H
  000b2	0b c1		 or	 eax, ecx
  000b4	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  000b7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  000ba	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  000bd	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 157  :   FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */

  000c0	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  000c3	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  000c9	f7 d1		 not	 ecx
  000cb	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  000ce	0b c1		 or	 eax, ecx
  000d0	ba 04 00 00 00	 mov	 edx, 4
  000d5	c1 e2 00	 shl	 edx, 0
  000d8	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  000dc	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  000df	8d 94 01 56 b7
	c7 e8		 lea	 edx, DWORD PTR [ecx+eax-389564586]
  000e6	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  000e9	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  000ec	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  000ef	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  000f2	c1 e9 14	 shr	 ecx, 20			; 00000014H
  000f5	0b c1		 or	 eax, ecx
  000f7	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  000fa	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  000fd	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00100	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 158  :   FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */

  00103	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00106	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00109	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  0010c	f7 d1		 not	 ecx
  0010e	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00111	0b c1		 or	 eax, ecx
  00113	ba 04 00 00 00	 mov	 edx, 4
  00118	d1 e2		 shl	 edx, 1
  0011a	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  0011e	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00121	8d 94 01 db 70
	20 24		 lea	 edx, DWORD PTR [ecx+eax+606105819]
  00128	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  0012b	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0012e	c1 e0 11	 shl	 eax, 17			; 00000011H
  00131	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00134	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  00137	0b c1		 or	 eax, ecx
  00139	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0013c	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0013f	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00142	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 159  :   FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */

  00145	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00148	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  0014b	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0014e	f7 d1		 not	 ecx
  00150	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00153	0b c1		 or	 eax, ecx
  00155	ba 04 00 00 00	 mov	 edx, 4
  0015a	6b ca 03	 imul	 ecx, edx, 3
  0015d	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00161	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00164	8d 84 02 ee ce
	bd c1		 lea	 eax, DWORD PTR [edx+eax-1044525330]
  0016b	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0016e	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00171	c1 e0 16	 shl	 eax, 22			; 00000016H
  00174	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00177	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0017a	0b c1		 or	 eax, ecx
  0017c	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0017f	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00182	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00185	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 160  :   FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */

  00188	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0018b	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  0018e	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00191	f7 d1		 not	 ecx
  00193	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  00196	0b c1		 or	 eax, ecx
  00198	ba 04 00 00 00	 mov	 edx, 4
  0019d	c1 e2 02	 shl	 edx, 2
  001a0	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  001a4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  001a7	8d 94 01 af 0f
	7c f5		 lea	 edx, DWORD PTR [ecx+eax-176418897]
  001ae	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  001b1	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  001b4	c1 e0 07	 shl	 eax, 7
  001b7	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  001ba	c1 e9 19	 shr	 ecx, 25			; 00000019H
  001bd	0b c1		 or	 eax, ecx
  001bf	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  001c2	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  001c5	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  001c8	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 161  :   FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */

  001cb	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  001ce	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  001d1	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  001d4	f7 d1		 not	 ecx
  001d6	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  001d9	0b c1		 or	 eax, ecx
  001db	ba 04 00 00 00	 mov	 edx, 4
  001e0	6b ca 05	 imul	 ecx, edx, 5
  001e3	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  001e7	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  001ea	8d 84 02 2a c6
	87 47		 lea	 eax, DWORD PTR [edx+eax+1200080426]
  001f1	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  001f4	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  001f7	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  001fa	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  001fd	c1 e9 14	 shr	 ecx, 20			; 00000014H
  00200	0b c1		 or	 eax, ecx
  00202	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00205	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00208	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0020b	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 162  :   FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */

  0020e	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00211	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00214	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00217	f7 d1		 not	 ecx
  00219	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  0021c	0b c1		 or	 eax, ecx
  0021e	ba 04 00 00 00	 mov	 edx, 4
  00223	6b ca 06	 imul	 ecx, edx, 6
  00226	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0022a	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  0022d	8d 84 02 13 46
	30 a8		 lea	 eax, DWORD PTR [edx+eax-1473231341]
  00234	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00237	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0023a	c1 e0 11	 shl	 eax, 17			; 00000011H
  0023d	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00240	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  00243	0b c1		 or	 eax, ecx
  00245	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00248	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0024b	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  0024e	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 163  :   FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */

  00251	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00254	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  00257	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0025a	f7 d1		 not	 ecx
  0025c	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  0025f	0b c1		 or	 eax, ecx
  00261	ba 04 00 00 00	 mov	 edx, 4
  00266	6b ca 07	 imul	 ecx, edx, 7
  00269	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0026d	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00270	8d 84 02 01 95
	46 fd		 lea	 eax, DWORD PTR [edx+eax-45705983]
  00277	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0027a	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0027d	c1 e0 16	 shl	 eax, 22			; 00000016H
  00280	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00283	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00286	0b c1		 or	 eax, ecx
  00288	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0028b	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0028e	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00291	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 164  :   FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */

  00294	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00297	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  0029a	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0029d	f7 d1		 not	 ecx
  0029f	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  002a2	0b c1		 or	 eax, ecx
  002a4	ba 04 00 00 00	 mov	 edx, 4
  002a9	c1 e2 03	 shl	 edx, 3
  002ac	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  002b0	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  002b3	8d 94 01 d8 98
	80 69		 lea	 edx, DWORD PTR [ecx+eax+1770035416]
  002ba	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  002bd	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  002c0	c1 e0 07	 shl	 eax, 7
  002c3	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  002c6	c1 e9 19	 shr	 ecx, 25			; 00000019H
  002c9	0b c1		 or	 eax, ecx
  002cb	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  002ce	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  002d1	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  002d4	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 165  :   FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */

  002d7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  002da	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  002dd	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  002e0	f7 d1		 not	 ecx
  002e2	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  002e5	0b c1		 or	 eax, ecx
  002e7	ba 04 00 00 00	 mov	 edx, 4
  002ec	6b ca 09	 imul	 ecx, edx, 9
  002ef	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  002f3	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  002f6	8d 84 02 af f7
	44 8b		 lea	 eax, DWORD PTR [edx+eax-1958414417]
  002fd	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00300	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00303	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  00306	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00309	c1 e9 14	 shr	 ecx, 20			; 00000014H
  0030c	0b c1		 or	 eax, ecx
  0030e	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00311	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00314	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00317	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 166  :   FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */

  0031a	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0031d	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00320	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00323	f7 d1		 not	 ecx
  00325	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00328	0b c1		 or	 eax, ecx
  0032a	ba 04 00 00 00	 mov	 edx, 4
  0032f	6b ca 0a	 imul	 ecx, edx, 10
  00332	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00336	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  00339	8d 84 02 b1 5b
	ff ff		 lea	 eax, DWORD PTR [edx+eax-42063]
  00340	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00343	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00346	c1 e0 11	 shl	 eax, 17			; 00000011H
  00349	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0034c	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  0034f	0b c1		 or	 eax, ecx
  00351	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00354	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00357	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  0035a	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 167  :   FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */

  0035d	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00360	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  00363	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00366	f7 d1		 not	 ecx
  00368	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  0036b	0b c1		 or	 eax, ecx
  0036d	ba 04 00 00 00	 mov	 edx, 4
  00372	6b ca 0b	 imul	 ecx, edx, 11
  00375	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00379	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  0037c	8d 84 02 be d7
	5c 89		 lea	 eax, DWORD PTR [edx+eax-1990404162]
  00383	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00386	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00389	c1 e0 16	 shl	 eax, 22			; 00000016H
  0038c	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0038f	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00392	0b c1		 or	 eax, ecx
  00394	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00397	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0039a	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  0039d	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 168  :   FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */

  003a0	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  003a3	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  003a6	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  003a9	f7 d1		 not	 ecx
  003ab	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  003ae	0b c1		 or	 eax, ecx
  003b0	ba 04 00 00 00	 mov	 edx, 4
  003b5	6b ca 0c	 imul	 ecx, edx, 12
  003b8	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  003bc	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  003bf	8d 84 02 22 11
	90 6b		 lea	 eax, DWORD PTR [edx+eax+1804603682]
  003c6	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  003c9	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  003cc	c1 e0 07	 shl	 eax, 7
  003cf	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  003d2	c1 e9 19	 shr	 ecx, 25			; 00000019H
  003d5	0b c1		 or	 eax, ecx
  003d7	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  003da	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  003dd	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  003e0	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 169  :   FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */

  003e3	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  003e6	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  003e9	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  003ec	f7 d1		 not	 ecx
  003ee	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  003f1	0b c1		 or	 eax, ecx
  003f3	ba 04 00 00 00	 mov	 edx, 4
  003f8	6b ca 0d	 imul	 ecx, edx, 13
  003fb	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  003ff	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  00402	8d 84 02 93 71
	98 fd		 lea	 eax, DWORD PTR [edx+eax-40341101]
  00409	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  0040c	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0040f	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  00412	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00415	c1 e9 14	 shr	 ecx, 20			; 00000014H
  00418	0b c1		 or	 eax, ecx
  0041a	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  0041d	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00420	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00423	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 170  :   FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */

  00426	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00429	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  0042c	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  0042f	f7 d1		 not	 ecx
  00431	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00434	0b c1		 or	 eax, ecx
  00436	ba 04 00 00 00	 mov	 edx, 4
  0043b	6b ca 0e	 imul	 ecx, edx, 14
  0043e	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00442	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  00445	8d 84 02 8e 43
	79 a6		 lea	 eax, DWORD PTR [edx+eax-1502002290]
  0044c	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0044f	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00452	c1 e0 11	 shl	 eax, 17			; 00000011H
  00455	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00458	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  0045b	0b c1		 or	 eax, ecx
  0045d	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00460	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00463	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00466	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 171  :   FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

  00469	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0046c	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  0046f	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00472	f7 d1		 not	 ecx
  00474	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00477	0b c1		 or	 eax, ecx
  00479	ba 04 00 00 00	 mov	 edx, 4
  0047e	6b ca 0f	 imul	 ecx, edx, 15
  00481	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00485	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00488	8d 84 02 21 08
	b4 49		 lea	 eax, DWORD PTR [edx+eax+1236535329]
  0048f	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00492	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00495	c1 e0 16	 shl	 eax, 22			; 00000016H
  00498	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0049b	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0049e	0b c1		 or	 eax, ecx
  004a0	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  004a3	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  004a6	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  004a9	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 172  : 
; 173  :  /* Round 2 */
; 174  :   GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */

  004ac	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  004af	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  004b2	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  004b5	f7 d1		 not	 ecx
  004b7	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  004ba	0b c1		 or	 eax, ecx
  004bc	ba 04 00 00 00	 mov	 edx, 4
  004c1	c1 e2 00	 shl	 edx, 0
  004c4	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  004c8	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  004cb	8d 94 01 62 25
	1e f6		 lea	 edx, DWORD PTR [ecx+eax-165796510]
  004d2	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  004d5	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  004d8	c1 e0 05	 shl	 eax, 5
  004db	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  004de	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  004e1	0b c1		 or	 eax, ecx
  004e3	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  004e6	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  004e9	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  004ec	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 175  :   GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */

  004ef	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  004f2	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  004f5	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  004f8	f7 d1		 not	 ecx
  004fa	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  004fd	0b c1		 or	 eax, ecx
  004ff	ba 04 00 00 00	 mov	 edx, 4
  00504	6b ca 06	 imul	 ecx, edx, 6
  00507	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0050b	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  0050e	8d 84 02 40 b3
	40 c0		 lea	 eax, DWORD PTR [edx+eax-1069501632]
  00515	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00518	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0051b	c1 e0 09	 shl	 eax, 9
  0051e	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00521	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00524	0b c1		 or	 eax, ecx
  00526	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00529	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0052c	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0052f	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 176  :   GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */

  00532	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00535	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  00538	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0053b	f7 d1		 not	 ecx
  0053d	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00540	0b c1		 or	 eax, ecx
  00542	ba 04 00 00 00	 mov	 edx, 4
  00547	6b ca 0b	 imul	 ecx, edx, 11
  0054a	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0054e	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  00551	8d 84 02 51 5a
	5e 26		 lea	 eax, DWORD PTR [edx+eax+643717713]
  00558	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0055b	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0055e	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00561	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00564	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00567	0b c1		 or	 eax, ecx
  00569	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0056c	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0056f	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00572	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 177  :   GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */

  00575	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00578	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  0057b	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0057e	f7 d1		 not	 ecx
  00580	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  00583	0b c1		 or	 eax, ecx
  00585	ba 04 00 00 00	 mov	 edx, 4
  0058a	6b ca 00	 imul	 ecx, edx, 0
  0058d	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00591	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00594	8d 84 02 aa c7
	b6 e9		 lea	 eax, DWORD PTR [edx+eax-373897302]
  0059b	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0059e	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  005a1	c1 e0 14	 shl	 eax, 20			; 00000014H
  005a4	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  005a7	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  005aa	0b c1		 or	 eax, ecx
  005ac	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  005af	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  005b2	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  005b5	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 178  :   GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */

  005b8	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  005bb	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  005be	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  005c1	f7 d1		 not	 ecx
  005c3	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  005c6	0b c1		 or	 eax, ecx
  005c8	ba 04 00 00 00	 mov	 edx, 4
  005cd	6b ca 05	 imul	 ecx, edx, 5
  005d0	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  005d4	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  005d7	8d 84 02 5d 10
	2f d6		 lea	 eax, DWORD PTR [edx+eax-701558691]
  005de	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  005e1	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  005e4	c1 e0 05	 shl	 eax, 5
  005e7	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  005ea	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  005ed	0b c1		 or	 eax, ecx
  005ef	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  005f2	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  005f5	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  005f8	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 179  :   GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */

  005fb	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  005fe	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  00601	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00604	f7 d1		 not	 ecx
  00606	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00609	0b c1		 or	 eax, ecx
  0060b	ba 04 00 00 00	 mov	 edx, 4
  00610	6b ca 0a	 imul	 ecx, edx, 10
  00613	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00617	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  0061a	8d 84 02 53 14
	44 02		 lea	 eax, DWORD PTR [edx+eax+38016083]
  00621	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00624	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00627	c1 e0 09	 shl	 eax, 9
  0062a	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  0062d	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00630	0b c1		 or	 eax, ecx
  00632	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00635	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00638	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0063b	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 180  :   GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */

  0063e	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00641	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  00644	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00647	f7 d1		 not	 ecx
  00649	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  0064c	0b c1		 or	 eax, ecx
  0064e	ba 04 00 00 00	 mov	 edx, 4
  00653	6b ca 0f	 imul	 ecx, edx, 15
  00656	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0065a	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  0065d	8d 84 02 81 e6
	a1 d8		 lea	 eax, DWORD PTR [edx+eax-660478335]
  00664	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00667	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0066a	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  0066d	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00670	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00673	0b c1		 or	 eax, ecx
  00675	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00678	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0067b	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  0067e	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 181  :   GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */

  00681	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00684	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00687	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0068a	f7 d1		 not	 ecx
  0068c	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  0068f	0b c1		 or	 eax, ecx
  00691	ba 04 00 00 00	 mov	 edx, 4
  00696	c1 e2 02	 shl	 edx, 2
  00699	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  0069d	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  006a0	8d 94 01 c8 fb
	d3 e7		 lea	 edx, DWORD PTR [ecx+eax-405537848]
  006a7	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  006aa	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  006ad	c1 e0 14	 shl	 eax, 20			; 00000014H
  006b0	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  006b3	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  006b6	0b c1		 or	 eax, ecx
  006b8	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  006bb	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  006be	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  006c1	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 182  :   GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */

  006c4	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  006c7	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  006ca	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  006cd	f7 d1		 not	 ecx
  006cf	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  006d2	0b c1		 or	 eax, ecx
  006d4	ba 04 00 00 00	 mov	 edx, 4
  006d9	6b ca 09	 imul	 ecx, edx, 9
  006dc	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  006e0	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  006e3	8d 84 02 e6 cd
	e1 21		 lea	 eax, DWORD PTR [edx+eax+568446438]
  006ea	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  006ed	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  006f0	c1 e0 05	 shl	 eax, 5
  006f3	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  006f6	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  006f9	0b c1		 or	 eax, ecx
  006fb	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  006fe	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00701	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00704	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 183  :   GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */

  00707	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0070a	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  0070d	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00710	f7 d1		 not	 ecx
  00712	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00715	0b c1		 or	 eax, ecx
  00717	ba 04 00 00 00	 mov	 edx, 4
  0071c	6b ca 0e	 imul	 ecx, edx, 14
  0071f	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00723	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  00726	8d 84 02 d6 07
	37 c3		 lea	 eax, DWORD PTR [edx+eax-1019803690]
  0072d	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00730	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00733	c1 e0 09	 shl	 eax, 9
  00736	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00739	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0073c	0b c1		 or	 eax, ecx
  0073e	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00741	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00744	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00747	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 184  :   GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */

  0074a	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0074d	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  00750	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00753	f7 d1		 not	 ecx
  00755	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00758	0b c1		 or	 eax, ecx
  0075a	ba 04 00 00 00	 mov	 edx, 4
  0075f	6b ca 03	 imul	 ecx, edx, 3
  00762	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00766	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  00769	8d 84 02 87 0d
	d5 f4		 lea	 eax, DWORD PTR [edx+eax-187363961]
  00770	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00773	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00776	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00779	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0077c	c1 e9 12	 shr	 ecx, 18			; 00000012H
  0077f	0b c1		 or	 eax, ecx
  00781	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00784	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00787	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  0078a	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 185  : 
; 186  :   GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */

  0078d	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00790	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00793	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00796	f7 d1		 not	 ecx
  00798	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  0079b	0b c1		 or	 eax, ecx
  0079d	ba 04 00 00 00	 mov	 edx, 4
  007a2	c1 e2 03	 shl	 edx, 3
  007a5	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  007a9	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  007ac	8d 94 01 ed 14
	5a 45		 lea	 edx, DWORD PTR [ecx+eax+1163531501]
  007b3	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  007b6	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  007b9	c1 e0 14	 shl	 eax, 20			; 00000014H
  007bc	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  007bf	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  007c2	0b c1		 or	 eax, ecx
  007c4	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  007c7	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  007ca	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  007cd	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 187  :   GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */

  007d0	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  007d3	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  007d6	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  007d9	f7 d1		 not	 ecx
  007db	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  007de	0b c1		 or	 eax, ecx
  007e0	ba 04 00 00 00	 mov	 edx, 4
  007e5	6b ca 0d	 imul	 ecx, edx, 13
  007e8	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  007ec	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  007ef	8d 84 02 05 e9
	e3 a9		 lea	 eax, DWORD PTR [edx+eax-1444681467]
  007f6	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  007f9	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  007fc	c1 e0 05	 shl	 eax, 5
  007ff	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00802	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  00805	0b c1		 or	 eax, ecx
  00807	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0080a	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0080d	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00810	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 188  :   GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */

  00813	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00816	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  00819	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0081c	f7 d1		 not	 ecx
  0081e	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00821	0b c1		 or	 eax, ecx
  00823	ba 04 00 00 00	 mov	 edx, 4
  00828	d1 e2		 shl	 edx, 1
  0082a	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  0082e	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00831	8d 94 01 f8 a3
	ef fc		 lea	 edx, DWORD PTR [ecx+eax-51403784]
  00838	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  0083b	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0083e	c1 e0 09	 shl	 eax, 9
  00841	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00844	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00847	0b c1		 or	 eax, ecx
  00849	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  0084c	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0084f	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00852	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 189  :   GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */

  00855	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00858	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  0085b	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0085e	f7 d1		 not	 ecx
  00860	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00863	0b c1		 or	 eax, ecx
  00865	ba 04 00 00 00	 mov	 edx, 4
  0086a	6b ca 07	 imul	 ecx, edx, 7
  0086d	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00871	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  00874	8d 84 02 d9 02
	6f 67		 lea	 eax, DWORD PTR [edx+eax+1735328473]
  0087b	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0087e	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00881	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00884	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00887	c1 e9 12	 shr	 ecx, 18			; 00000012H
  0088a	0b c1		 or	 eax, ecx
  0088c	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0088f	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00892	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00895	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 190  :   GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

  00898	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0089b	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  0089e	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  008a1	f7 d1		 not	 ecx
  008a3	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  008a6	0b c1		 or	 eax, ecx
  008a8	ba 04 00 00 00	 mov	 edx, 4
  008ad	6b ca 0c	 imul	 ecx, edx, 12
  008b0	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  008b4	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  008b7	8d 84 02 8a 4c
	2a 8d		 lea	 eax, DWORD PTR [edx+eax-1926607734]
  008be	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  008c1	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  008c4	c1 e0 14	 shl	 eax, 20			; 00000014H
  008c7	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  008ca	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  008cd	0b c1		 or	 eax, ecx
  008cf	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  008d2	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  008d5	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  008d8	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 191  : 
; 192  :   /* Round 3 */
; 193  :   HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */

  008db	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  008de	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  008e1	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  008e4	b9 04 00 00 00	 mov	 ecx, 4
  008e9	6b d1 05	 imul	 edx, ecx, 5
  008ec	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  008f0	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  008f3	8d 94 01 42 39
	fa ff		 lea	 edx, DWORD PTR [ecx+eax-378558]
  008fa	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  008fd	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00900	c1 e0 04	 shl	 eax, 4
  00903	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00906	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00909	0b c1		 or	 eax, ecx
  0090b	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0090e	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00911	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00914	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 194  :   HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */

  00917	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0091a	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  0091d	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00920	b9 04 00 00 00	 mov	 ecx, 4
  00925	c1 e1 03	 shl	 ecx, 3
  00928	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0092c	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  0092f	8d 84 02 81 f6
	71 87		 lea	 eax, DWORD PTR [edx+eax-2022574463]
  00936	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00939	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0093c	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  0093f	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00942	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00945	0b c1		 or	 eax, ecx
  00947	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  0094a	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0094d	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00950	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 195  :   HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */

  00953	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00956	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00959	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  0095c	b9 04 00 00 00	 mov	 ecx, 4
  00961	6b d1 0b	 imul	 edx, ecx, 11
  00964	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00968	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0096b	8d 94 01 22 61
	9d 6d		 lea	 edx, DWORD PTR [ecx+eax+1839030562]
  00972	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00975	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00978	c1 e0 10	 shl	 eax, 16			; 00000010H
  0097b	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0097e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00981	0b c1		 or	 eax, ecx
  00983	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00986	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00989	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  0098c	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 196  :   HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */

  0098f	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00992	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00995	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00998	b9 04 00 00 00	 mov	 ecx, 4
  0099d	6b d1 0e	 imul	 edx, ecx, 14
  009a0	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  009a4	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  009a7	8d 94 01 0c 38
	e5 fd		 lea	 edx, DWORD PTR [ecx+eax-35309556]
  009ae	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  009b1	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  009b4	c1 e0 17	 shl	 eax, 23			; 00000017H
  009b7	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  009ba	c1 e9 09	 shr	 ecx, 9
  009bd	0b c1		 or	 eax, ecx
  009bf	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  009c2	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  009c5	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  009c8	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 197  :   HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */

  009cb	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  009ce	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  009d1	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  009d4	b9 04 00 00 00	 mov	 ecx, 4
  009d9	c1 e1 00	 shl	 ecx, 0
  009dc	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  009e0	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  009e3	8d 84 02 44 ea
	be a4		 lea	 eax, DWORD PTR [edx+eax-1530992060]
  009ea	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  009ed	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  009f0	c1 e0 04	 shl	 eax, 4
  009f3	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  009f6	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  009f9	0b c1		 or	 eax, ecx
  009fb	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  009fe	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00a01	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00a04	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 198  :   HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */

  00a07	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00a0a	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00a0d	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00a10	b9 04 00 00 00	 mov	 ecx, 4
  00a15	c1 e1 02	 shl	 ecx, 2
  00a18	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00a1c	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  00a1f	8d 84 02 a9 cf
	de 4b		 lea	 eax, DWORD PTR [edx+eax+1272893353]
  00a26	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00a29	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00a2c	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00a2f	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00a32	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00a35	0b c1		 or	 eax, ecx
  00a37	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00a3a	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00a3d	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00a40	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 199  :   HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */

  00a43	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00a46	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00a49	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00a4c	b9 04 00 00 00	 mov	 ecx, 4
  00a51	6b d1 07	 imul	 edx, ecx, 7
  00a54	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00a58	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00a5b	8d 94 01 60 4b
	bb f6		 lea	 edx, DWORD PTR [ecx+eax-155497632]
  00a62	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00a65	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00a68	c1 e0 10	 shl	 eax, 16			; 00000010H
  00a6b	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00a6e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a71	0b c1		 or	 eax, ecx
  00a73	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00a76	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00a79	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00a7c	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 200  :   HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */

  00a7f	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00a82	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00a85	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00a88	b9 04 00 00 00	 mov	 ecx, 4
  00a8d	6b d1 0a	 imul	 edx, ecx, 10
  00a90	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00a94	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00a97	8d 94 01 70 bc
	bf be		 lea	 edx, DWORD PTR [ecx+eax-1094730640]
  00a9e	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00aa1	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00aa4	c1 e0 17	 shl	 eax, 23			; 00000017H
  00aa7	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00aaa	c1 e9 09	 shr	 ecx, 9
  00aad	0b c1		 or	 eax, ecx
  00aaf	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00ab2	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00ab5	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00ab8	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 201  :   HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */

  00abb	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00abe	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00ac1	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00ac4	b9 04 00 00 00	 mov	 ecx, 4
  00ac9	6b d1 0d	 imul	 edx, ecx, 13
  00acc	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00ad0	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00ad3	8d 94 01 c6 7e
	9b 28		 lea	 edx, DWORD PTR [ecx+eax+681279174]
  00ada	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00add	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00ae0	c1 e0 04	 shl	 eax, 4
  00ae3	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00ae6	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00ae9	0b c1		 or	 eax, ecx
  00aeb	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00aee	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00af1	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00af4	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 202  :   HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */

  00af7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00afa	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00afd	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00b00	b9 04 00 00 00	 mov	 ecx, 4
  00b05	6b d1 00	 imul	 edx, ecx, 0
  00b08	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00b0c	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00b0f	8d 94 01 fa 27
	a1 ea		 lea	 edx, DWORD PTR [ecx+eax-358537222]
  00b16	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00b19	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00b1c	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00b1f	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00b22	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00b25	0b c1		 or	 eax, ecx
  00b27	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00b2a	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00b2d	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00b30	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 203  :   HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */

  00b33	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00b36	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00b39	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00b3c	b9 04 00 00 00	 mov	 ecx, 4
  00b41	6b d1 03	 imul	 edx, ecx, 3
  00b44	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00b48	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00b4b	8d 94 01 85 30
	ef d4		 lea	 edx, DWORD PTR [ecx+eax-722521979]
  00b52	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00b55	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00b58	c1 e0 10	 shl	 eax, 16			; 00000010H
  00b5b	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00b5e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b61	0b c1		 or	 eax, ecx
  00b63	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00b66	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00b69	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00b6c	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 204  :   HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */

  00b6f	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00b72	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00b75	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00b78	b9 04 00 00 00	 mov	 ecx, 4
  00b7d	6b d1 06	 imul	 edx, ecx, 6
  00b80	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00b84	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00b87	8d 94 01 05 1d
	88 04		 lea	 edx, DWORD PTR [ecx+eax+76029189]
  00b8e	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00b91	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00b94	c1 e0 17	 shl	 eax, 23			; 00000017H
  00b97	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00b9a	c1 e9 09	 shr	 ecx, 9
  00b9d	0b c1		 or	 eax, ecx
  00b9f	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00ba2	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00ba5	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00ba8	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 205  :   HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */

  00bab	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00bae	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00bb1	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00bb4	b9 04 00 00 00	 mov	 ecx, 4
  00bb9	6b d1 09	 imul	 edx, ecx, 9
  00bbc	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00bc0	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00bc3	8d 94 01 39 d0
	d4 d9		 lea	 edx, DWORD PTR [ecx+eax-640364487]
  00bca	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00bcd	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00bd0	c1 e0 04	 shl	 eax, 4
  00bd3	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00bd6	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00bd9	0b c1		 or	 eax, ecx
  00bdb	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00bde	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00be1	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00be4	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 206  :   HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */

  00be7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00bea	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00bed	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00bf0	b9 04 00 00 00	 mov	 ecx, 4
  00bf5	6b d1 0c	 imul	 edx, ecx, 12
  00bf8	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00bfc	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00bff	8d 94 01 e5 99
	db e6		 lea	 edx, DWORD PTR [ecx+eax-421815835]
  00c06	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00c09	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00c0c	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00c0f	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00c12	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00c15	0b c1		 or	 eax, ecx
  00c17	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00c1a	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00c1d	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00c20	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 207  :   HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */

  00c23	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00c26	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00c29	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00c2c	b9 04 00 00 00	 mov	 ecx, 4
  00c31	6b d1 0f	 imul	 edx, ecx, 15
  00c34	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00c38	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00c3b	8d 94 01 f8 7c
	a2 1f		 lea	 edx, DWORD PTR [ecx+eax+530742520]
  00c42	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00c45	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00c48	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c4b	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00c4e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c51	0b c1		 or	 eax, ecx
  00c53	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00c56	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00c59	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00c5c	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 208  :   HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

  00c5f	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00c62	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00c65	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00c68	b9 04 00 00 00	 mov	 ecx, 4
  00c6d	d1 e1		 shl	 ecx, 1
  00c6f	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00c73	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00c76	8d 84 02 65 56
	ac c4		 lea	 eax, DWORD PTR [edx+eax-995338651]
  00c7d	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00c80	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00c83	c1 e0 17	 shl	 eax, 23			; 00000017H
  00c86	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00c89	c1 e9 09	 shr	 ecx, 9
  00c8c	0b c1		 or	 eax, ecx
  00c8e	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00c91	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00c94	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00c97	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 209  : 
; 210  :   /* Round 4 */
; 211  :   II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */

  00c9a	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00c9d	f7 d0		 not	 eax
  00c9f	0b 45 e8	 or	 eax, DWORD PTR _b$[ebp]
  00ca2	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00ca5	b9 04 00 00 00	 mov	 ecx, 4
  00caa	6b d1 00	 imul	 edx, ecx, 0
  00cad	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00cb1	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00cb4	8d 94 01 44 22
	29 f4		 lea	 edx, DWORD PTR [ecx+eax-198630844]
  00cbb	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00cbe	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00cc1	c1 e0 06	 shl	 eax, 6
  00cc4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00cc7	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00cca	0b c1		 or	 eax, ecx
  00ccc	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00ccf	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00cd2	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00cd5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 212  :   II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */

  00cd8	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00cdb	f7 d0		 not	 eax
  00cdd	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00ce0	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00ce3	b9 04 00 00 00	 mov	 ecx, 4
  00ce8	6b d1 07	 imul	 edx, ecx, 7
  00ceb	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00cef	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00cf2	8d 94 01 97 ff
	2a 43		 lea	 edx, DWORD PTR [ecx+eax+1126891415]
  00cf9	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00cfc	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00cff	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00d02	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00d05	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00d08	0b c1		 or	 eax, ecx
  00d0a	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00d0d	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00d10	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00d13	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 213  :   II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */

  00d16	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00d19	f7 d0		 not	 eax
  00d1b	0b 45 d0	 or	 eax, DWORD PTR _d$[ebp]
  00d1e	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00d21	b9 04 00 00 00	 mov	 ecx, 4
  00d26	6b d1 0e	 imul	 edx, ecx, 14
  00d29	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00d2d	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00d30	8d 94 01 a7 23
	94 ab		 lea	 edx, DWORD PTR [ecx+eax-1416354905]
  00d37	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00d3a	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00d3d	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00d40	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00d43	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00d46	0b c1		 or	 eax, ecx
  00d48	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00d4b	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00d4e	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00d51	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 214  :   II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */

  00d54	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00d57	f7 d0		 not	 eax
  00d59	0b 45 dc	 or	 eax, DWORD PTR _c$[ebp]
  00d5c	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00d5f	b9 04 00 00 00	 mov	 ecx, 4
  00d64	6b d1 05	 imul	 edx, ecx, 5
  00d67	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00d6b	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00d6e	8d 94 01 39 a0
	93 fc		 lea	 edx, DWORD PTR [ecx+eax-57434055]
  00d75	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00d78	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00d7b	c1 e0 15	 shl	 eax, 21			; 00000015H
  00d7e	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00d81	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00d84	0b c1		 or	 eax, ecx
  00d86	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00d89	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00d8c	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00d8f	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 215  :   II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */

  00d92	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00d95	f7 d0		 not	 eax
  00d97	0b 45 e8	 or	 eax, DWORD PTR _b$[ebp]
  00d9a	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00d9d	b9 04 00 00 00	 mov	 ecx, 4
  00da2	6b d1 0c	 imul	 edx, ecx, 12
  00da5	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00da9	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00dac	8d 94 01 c3 59
	5b 65		 lea	 edx, DWORD PTR [ecx+eax+1700485571]
  00db3	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00db6	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00db9	c1 e0 06	 shl	 eax, 6
  00dbc	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00dbf	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00dc2	0b c1		 or	 eax, ecx
  00dc4	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00dc7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00dca	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00dcd	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 216  :   II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */

  00dd0	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00dd3	f7 d0		 not	 eax
  00dd5	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00dd8	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00ddb	b9 04 00 00 00	 mov	 ecx, 4
  00de0	6b d1 03	 imul	 edx, ecx, 3
  00de3	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00de7	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00dea	8d 94 01 92 cc
	0c 8f		 lea	 edx, DWORD PTR [ecx+eax-1894986606]
  00df1	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00df4	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00df7	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00dfa	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00dfd	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00e00	0b c1		 or	 eax, ecx
  00e02	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00e05	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00e08	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00e0b	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 217  :   II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */

  00e0e	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00e11	f7 d0		 not	 eax
  00e13	0b 45 d0	 or	 eax, DWORD PTR _d$[ebp]
  00e16	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00e19	b9 04 00 00 00	 mov	 ecx, 4
  00e1e	6b d1 0a	 imul	 edx, ecx, 10
  00e21	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00e25	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00e28	8d 94 01 7d f4
	ef ff		 lea	 edx, DWORD PTR [ecx+eax-1051523]
  00e2f	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00e32	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00e35	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00e38	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00e3b	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00e3e	0b c1		 or	 eax, ecx
  00e40	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00e43	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00e46	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00e49	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 218  :   II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */

  00e4c	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00e4f	f7 d0		 not	 eax
  00e51	0b 45 dc	 or	 eax, DWORD PTR _c$[ebp]
  00e54	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00e57	b9 04 00 00 00	 mov	 ecx, 4
  00e5c	c1 e1 00	 shl	 ecx, 0
  00e5f	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00e63	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00e66	8d 84 02 d1 5d
	84 85		 lea	 eax, DWORD PTR [edx+eax-2054922799]
  00e6d	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00e70	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00e73	c1 e0 15	 shl	 eax, 21			; 00000015H
  00e76	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00e79	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00e7c	0b c1		 or	 eax, ecx
  00e7e	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00e81	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00e84	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00e87	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 219  :   II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */

  00e8a	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00e8d	f7 d0		 not	 eax
  00e8f	0b 45 e8	 or	 eax, DWORD PTR _b$[ebp]
  00e92	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00e95	b9 04 00 00 00	 mov	 ecx, 4
  00e9a	c1 e1 03	 shl	 ecx, 3
  00e9d	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00ea1	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  00ea4	8d 84 02 4f 7e
	a8 6f		 lea	 eax, DWORD PTR [edx+eax+1873313359]
  00eab	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00eae	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00eb1	c1 e0 06	 shl	 eax, 6
  00eb4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00eb7	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00eba	0b c1		 or	 eax, ecx
  00ebc	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00ebf	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00ec2	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00ec5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 220  :   II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */

  00ec8	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00ecb	f7 d0		 not	 eax
  00ecd	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00ed0	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00ed3	b9 04 00 00 00	 mov	 ecx, 4
  00ed8	6b d1 0f	 imul	 edx, ecx, 15
  00edb	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00edf	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00ee2	8d 94 01 e0 e6
	2c fe		 lea	 edx, DWORD PTR [ecx+eax-30611744]
  00ee9	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00eec	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00eef	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00ef2	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00ef5	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00ef8	0b c1		 or	 eax, ecx
  00efa	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00efd	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00f00	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00f03	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 221  :   II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */

  00f06	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00f09	f7 d0		 not	 eax
  00f0b	0b 45 d0	 or	 eax, DWORD PTR _d$[ebp]
  00f0e	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00f11	b9 04 00 00 00	 mov	 ecx, 4
  00f16	6b d1 06	 imul	 edx, ecx, 6
  00f19	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00f1d	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00f20	8d 94 01 14 43
	01 a3		 lea	 edx, DWORD PTR [ecx+eax-1560198380]
  00f27	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00f2a	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00f2d	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00f30	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00f33	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00f36	0b c1		 or	 eax, ecx
  00f38	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00f3b	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00f3e	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00f41	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 222  :   II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */

  00f44	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00f47	f7 d0		 not	 eax
  00f49	0b 45 dc	 or	 eax, DWORD PTR _c$[ebp]
  00f4c	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00f4f	b9 04 00 00 00	 mov	 ecx, 4
  00f54	6b d1 0d	 imul	 edx, ecx, 13
  00f57	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00f5b	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00f5e	8d 94 01 a1 11
	08 4e		 lea	 edx, DWORD PTR [ecx+eax+1309151649]
  00f65	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00f68	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00f6b	c1 e0 15	 shl	 eax, 21			; 00000015H
  00f6e	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00f71	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00f74	0b c1		 or	 eax, ecx
  00f76	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00f79	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00f7c	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00f7f	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 223  :   II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */

  00f82	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00f85	f7 d0		 not	 eax
  00f87	0b 45 e8	 or	 eax, DWORD PTR _b$[ebp]
  00f8a	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00f8d	b9 04 00 00 00	 mov	 ecx, 4
  00f92	c1 e1 02	 shl	 ecx, 2
  00f95	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00f99	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  00f9c	8d 84 02 82 7e
	53 f7		 lea	 eax, DWORD PTR [edx+eax-145523070]
  00fa3	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00fa6	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00fa9	c1 e0 06	 shl	 eax, 6
  00fac	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00faf	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00fb2	0b c1		 or	 eax, ecx
  00fb4	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00fb7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00fba	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00fbd	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 224  :   II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */

  00fc0	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00fc3	f7 d0		 not	 eax
  00fc5	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00fc8	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00fcb	b9 04 00 00 00	 mov	 ecx, 4
  00fd0	6b d1 0b	 imul	 edx, ecx, 11
  00fd3	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  00fd7	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00fda	8d 94 01 35 f2
	3a bd		 lea	 edx, DWORD PTR [ecx+eax-1120210379]
  00fe1	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00fe4	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00fe7	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00fea	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00fed	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00ff0	0b c1		 or	 eax, ecx
  00ff2	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00ff5	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00ff8	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00ffb	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 225  :   II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */

  00ffe	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  01001	f7 d0		 not	 eax
  01003	0b 45 d0	 or	 eax, DWORD PTR _d$[ebp]
  01006	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  01009	b9 04 00 00 00	 mov	 ecx, 4
  0100e	d1 e1		 shl	 ecx, 1
  01010	03 44 0d 88	 add	 eax, DWORD PTR _x$[ebp+ecx]
  01014	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  01017	8d 84 02 bb d2
	d7 2a		 lea	 eax, DWORD PTR [edx+eax+718787259]
  0101e	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  01021	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  01024	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  01027	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0102a	c1 e9 11	 shr	 ecx, 17			; 00000011H
  0102d	0b c1		 or	 eax, ecx
  0102f	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  01032	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  01035	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  01038	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 226  :   II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */

  0103b	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0103e	f7 d0		 not	 eax
  01040	0b 45 dc	 or	 eax, DWORD PTR _c$[ebp]
  01043	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  01046	b9 04 00 00 00	 mov	 ecx, 4
  0104b	6b d1 09	 imul	 edx, ecx, 9
  0104e	03 44 15 88	 add	 eax, DWORD PTR _x$[ebp+edx]
  01052	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  01055	8d 94 01 91 d3
	86 eb		 lea	 edx, DWORD PTR [ecx+eax-343485551]
  0105c	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  0105f	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  01062	c1 e0 15	 shl	 eax, 21			; 00000015H
  01065	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  01068	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0106b	0b c1		 or	 eax, ecx
  0106d	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  01070	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  01073	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  01076	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 227  : 
; 228  :   state[0] += a;

  01079	b8 04 00 00 00	 mov	 eax, 4
  0107e	6b c8 00	 imul	 ecx, eax, 0
  01081	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  01084	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  01087	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0108a	b9 04 00 00 00	 mov	 ecx, 4
  0108f	6b d1 00	 imul	 edx, ecx, 0
  01092	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  01095	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 229  :   state[1] += b;

  01098	b8 04 00 00 00	 mov	 eax, 4
  0109d	c1 e0 00	 shl	 eax, 0
  010a0	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  010a3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  010a6	03 55 e8	 add	 edx, DWORD PTR _b$[ebp]
  010a9	b8 04 00 00 00	 mov	 eax, 4
  010ae	c1 e0 00	 shl	 eax, 0
  010b1	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  010b4	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 230  :   state[2] += c;

  010b7	b8 04 00 00 00	 mov	 eax, 4
  010bc	d1 e0		 shl	 eax, 1
  010be	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  010c1	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  010c4	03 55 dc	 add	 edx, DWORD PTR _c$[ebp]
  010c7	b8 04 00 00 00	 mov	 eax, 4
  010cc	d1 e0		 shl	 eax, 1
  010ce	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  010d1	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 231  :   state[3] += d;

  010d4	b8 04 00 00 00	 mov	 eax, 4
  010d9	6b c8 03	 imul	 ecx, eax, 3
  010dc	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  010df	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  010e2	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  010e5	b9 04 00 00 00	 mov	 ecx, 4
  010ea	6b d1 03	 imul	 edx, ecx, 3
  010ed	8b 4d 08	 mov	 ecx, DWORD PTR _state$[ebp]
  010f0	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 232  : 
; 233  :   /* Zeroize sensitive information. */
; 234  :   MD5_memset ((POINTER)x, 0, sizeof (x));

  010f3	6a 40		 push	 64			; 00000040H
  010f5	6a 00		 push	 0
  010f7	8d 45 88	 lea	 eax, DWORD PTR _x$[ebp]
  010fa	50		 push	 eax
  010fb	e8 00 00 00 00	 call	 ?MD5_memset@@YAXPAEHI@Z	; MD5_memset
  01100	83 c4 0c	 add	 esp, 12			; 0000000cH

; 235  : }

  01103	52		 push	 edx
  01104	8b cd		 mov	 ecx, ebp
  01106	50		 push	 eax
  01107	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@MD5Transfo
  0110d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01112	58		 pop	 eax
  01113	5a		 pop	 edx
  01114	5f		 pop	 edi
  01115	5e		 pop	 esi
  01116	5b		 pop	 ebx
  01117	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0111a	33 cd		 xor	 ecx, ebp
  0111c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01121	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  01127	3b ec		 cmp	 ebp, esp
  01129	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0112e	8b e5		 mov	 esp, ebp
  01130	5d		 pop	 ebp
  01131	c3		 ret	 0
  01132	66 90		 npad	 2
$LN5@MD5Transfo:
  01134	01 00 00 00	 DD	 1
  01138	00 00 00 00	 DD	 $LN4@MD5Transfo
$LN4@MD5Transfo:
  0113c	88 ff ff ff	 DD	 -120			; ffffff88H
  01140	40 00 00 00	 DD	 64			; 00000040H
  01144	00 00 00 00	 DD	 $LN3@MD5Transfo
$LN3@MD5Transfo:
  01148	78		 DB	 120			; 00000078H
  01149	00		 DB	 0
?MD5Transform@@YAXQAKQAE@Z ENDP				; MD5Transform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  0001e	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00023	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00026	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00029	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 __vsprintf_l
  0003c	83 c4 10	 add	 esp, 16			; 00000010H
  0003f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00042	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1787 :     return _Result;

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1788 : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  0001e	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00029	52		 push	 edx
  0002a	6a ff		 push	 -1
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 __vsnprintf_l
  00035	83 c4 14	 add	 esp, 20			; 00000014H

; 1459 :     #pragma warning(pop)
; 1460 : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1386 :     int const _Result = __stdio_common_vsprintf(

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	83 ca 01	 or	 edx, 1
  0003e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00041	50		 push	 eax
  00042	52		 push	 edx
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00049	83 c4 1c	 add	 esp, 28			; 0000001cH
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00056	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0005a	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  0005c	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00066	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00068	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  0006b	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  00071	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1391 : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  0001e	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?MD5Int@@YAHPAEH@Z
_TEXT	SEGMENT
_result$ = -144						; size = 4
_digest$ = -132						; size = 16
_context$ = -108					; size = 88
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_strlen$ = 12						; size = 4
?MD5Int@@YAHPAEH@Z PROC					; MD5Int, COMDAT

; 295  : int MD5Int (unsigned char *string, int strlen){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ac fe ff
	ff		 lea	 edi, DWORD PTR [ebp-340]
  00012	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 296  : 	int i;
; 297  : 	MD5_CTX context;
; 298  : 	unsigned char digest[16];
; 299  : 	int result = 0;

  00028	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _result$[ebp], 0

; 300  : 	MD5Init (&context);

  00032	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?MD5Init@@YAXPAUMD5_CTX@@@Z ; MD5Init
  0003b	83 c4 04	 add	 esp, 4

; 301  : 	MD5Update (&context, string, strlen);

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _strlen$[ebp]
  00041	50		 push	 eax
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _string$[ebp]
  00045	51		 push	 ecx
  00046	8d 55 94	 lea	 edx, DWORD PTR _context$[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ; MD5Update
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 302  : 	MD5Final (digest, &context);

  00052	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  00055	50		 push	 eax
  00056	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _digest$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ?MD5Final@@YAXQAEPAUMD5_CTX@@@Z ; MD5Final
  00062	83 c4 08	 add	 esp, 8

; 303  : 	for (i=0; i<16; i++){

  00065	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006c	eb 09		 jmp	 SHORT $LN4@MD5Int
$LN2@MD5Int:
  0006e	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@MD5Int:
  00077	83 7d f4 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0007b	7d 19		 jge	 SHORT $LN3@MD5Int

; 304  : 		result += digest[i];

  0007d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00080	0f b6 8c 05 7c
	ff ff ff	 movzx	 ecx, BYTE PTR _digest$[ebp+eax]
  00088	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _result$[ebp]
  0008e	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _result$[ebp], ecx

; 305  : 	}

  00094	eb d8		 jmp	 SHORT $LN2@MD5Int
$LN3@MD5Int:

; 306  : 
; 307  : 	return result;

  00096	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _result$[ebp]

; 308  : }

  0009c	52		 push	 edx
  0009d	8b cd		 mov	 ecx, ebp
  0009f	50		 push	 eax
  000a0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@MD5Int
  000a6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ab	58		 pop	 eax
  000ac	5a		 pop	 edx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	33 cd		 xor	 ecx, ebp
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	81 c4 54 01 00
	00		 add	 esp, 340		; 00000154H
  000c0	3b ec		 cmp	 ebp, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
  000cb	90		 npad	 1
$LN9@MD5Int:
  000cc	02 00 00 00	 DD	 2
  000d0	00 00 00 00	 DD	 $LN8@MD5Int
$LN8@MD5Int:
  000d4	94 ff ff ff	 DD	 -108			; ffffff94H
  000d8	58 00 00 00	 DD	 88			; 00000058H
  000dc	00 00 00 00	 DD	 $LN6@MD5Int
  000e0	7c ff ff ff	 DD	 -132			; ffffff7cH
  000e4	10 00 00 00	 DD	 16			; 00000010H
  000e8	00 00 00 00	 DD	 $LN7@MD5Int
$LN7@MD5Int:
  000ec	64		 DB	 100			; 00000064H
  000ed	69		 DB	 105			; 00000069H
  000ee	67		 DB	 103			; 00000067H
  000ef	65		 DB	 101			; 00000065H
  000f0	73		 DB	 115			; 00000073H
  000f1	74		 DB	 116			; 00000074H
  000f2	00		 DB	 0
$LN6@MD5Int:
  000f3	63		 DB	 99			; 00000063H
  000f4	6f		 DB	 111			; 0000006fH
  000f5	6e		 DB	 110			; 0000006eH
  000f6	74		 DB	 116			; 00000074H
  000f7	65		 DB	 101			; 00000065H
  000f8	78		 DB	 120			; 00000078H
  000f9	74		 DB	 116			; 00000074H
  000fa	00		 DB	 0
?MD5Int@@YAHPAEH@Z ENDP					; MD5Int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?MD5String@@YAPADPAEH@Z
_TEXT	SEGMENT
_result$ = -144						; size = 4
_digest$ = -132						; size = 16
_context$ = -108					; size = 88
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_strlen$ = 12						; size = 4
?MD5String@@YAPADPAEH@Z PROC				; MD5String, COMDAT

; 278  : char *MD5String (unsigned char *string, int strlen){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ac fe ff
	ff		 lea	 edi, DWORD PTR [ebp-340]
  00012	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 279  : 	int i;
; 280  : 	MD5_CTX context;
; 281  : 	unsigned char digest[16];
; 282  : 	char *result=(char *)malloc(33);

  00028	8b f4		 mov	 esi, esp
  0002a	6a 21		 push	 33			; 00000021H
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00032	83 c4 04	 add	 esp, 4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 85 70 ff ff
	ff		 mov	 DWORD PTR _result$[ebp], eax

; 283  : 
; 284  : 	MD5Init (&context);

  00042	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?MD5Init@@YAXPAUMD5_CTX@@@Z ; MD5Init
  0004b	83 c4 04	 add	 esp, 4

; 285  : 	MD5Update (&context, string, strlen);

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _strlen$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _string$[ebp]
  00055	51		 push	 ecx
  00056	8d 55 94	 lea	 edx, DWORD PTR _context$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ; MD5Update
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 286  : 	MD5Final (digest, &context);

  00062	8d 45 94	 lea	 eax, DWORD PTR _context$[ebp]
  00065	50		 push	 eax
  00066	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _digest$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ?MD5Final@@YAXQAEPAUMD5_CTX@@@Z ; MD5Final
  00072	83 c4 08	 add	 esp, 8

; 287  : 
; 288  : 	for (i=0; i<16; i++)

  00075	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007c	eb 09		 jmp	 SHORT $LN4@MD5String
$LN2@MD5String:
  0007e	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00081	83 c0 01	 add	 eax, 1
  00084	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@MD5String:
  00087	83 7d f4 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0008b	7d 28		 jge	 SHORT $LN3@MD5String

; 289  : 		sprintf(result+2*i, "%02x", digest[i]);

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00090	0f b6 8c 05 7c
	ff ff ff	 movzx	 ecx, BYTE PTR _digest$[ebp+eax]
  00098	51		 push	 ecx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_04NOJCDH@?$CF02x?$AA@
  0009e	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  000a1	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _result$[ebp]
  000a7	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 _sprintf
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b3	eb c9		 jmp	 SHORT $LN2@MD5String
$LN3@MD5String:

; 290  : 	result[32]=0;

  000b5	b8 01 00 00 00	 mov	 eax, 1
  000ba	c1 e0 05	 shl	 eax, 5
  000bd	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _result$[ebp]
  000c3	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 291  : 	return result;

  000c7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _result$[ebp]

; 292  : }

  000cd	52		 push	 edx
  000ce	8b cd		 mov	 ecx, ebp
  000d0	50		 push	 eax
  000d1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@MD5String
  000d7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000dc	58		 pop	 eax
  000dd	5a		 pop	 edx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	81 c4 54 01 00
	00		 add	 esp, 340		; 00000154H
  000f1	3b ec		 cmp	 ebp, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
$LN9@MD5String:
  000fc	02 00 00 00	 DD	 2
  00100	00 00 00 00	 DD	 $LN8@MD5String
$LN8@MD5String:
  00104	94 ff ff ff	 DD	 -108			; ffffff94H
  00108	58 00 00 00	 DD	 88			; 00000058H
  0010c	00 00 00 00	 DD	 $LN6@MD5String
  00110	7c ff ff ff	 DD	 -132			; ffffff7cH
  00114	10 00 00 00	 DD	 16			; 00000010H
  00118	00 00 00 00	 DD	 $LN7@MD5String
$LN7@MD5String:
  0011c	64		 DB	 100			; 00000064H
  0011d	69		 DB	 105			; 00000069H
  0011e	67		 DB	 103			; 00000067H
  0011f	65		 DB	 101			; 00000065H
  00120	73		 DB	 115			; 00000073H
  00121	74		 DB	 116			; 00000074H
  00122	00		 DB	 0
$LN6@MD5String:
  00123	63		 DB	 99			; 00000063H
  00124	6f		 DB	 111			; 0000006fH
  00125	6e		 DB	 110			; 0000006eH
  00126	74		 DB	 116			; 00000074H
  00127	65		 DB	 101			; 00000065H
  00128	78		 DB	 120			; 00000078H
  00129	74		 DB	 116			; 00000074H
  0012a	00		 DB	 0
?MD5String@@YAPADPAEH@Z ENDP				; MD5String
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\other\wmiinfo.cpp
;	COMDAT ?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z
_TEXT	SEGMENT
tv76 = -232						; size = 4
_partLen$ = -32						; size = 4
_index$ = -20						; size = 4
_i$ = -8						; size = 4
_context$ = 8						; size = 4
_input$ = 12						; size = 4
_inputLen$ = 16						; size = 4
?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z PROC			; MD5Update, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 89   :   unsigned int i, index, partLen;
; 90   : 
; 91   :   /* Compute number of bytes mod 64 */
; 92   :   index = (unsigned int)((context->count[0] >> 3) & 0x3F);

  0001e	b8 04 00 00 00	 mov	 eax, 4
  00023	6b c8 00	 imul	 ecx, eax, 0
  00026	8b 55 08	 mov	 edx, DWORD PTR _context$[ebp]
  00029	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  0002d	c1 e8 03	 shr	 eax, 3
  00030	83 e0 3f	 and	 eax, 63			; 0000003fH
  00033	89 45 ec	 mov	 DWORD PTR _index$[ebp], eax

; 93   : 
; 94   :   /* Update number of bits */
; 95   :   if ((context->count[0] += ((UINT4)inputLen << 3))
; 96   : 
; 97   :    < ((UINT4)inputLen << 3))

  00036	b8 04 00 00 00	 mov	 eax, 4
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	8b 55 10	 mov	 edx, DWORD PTR _inputLen$[ebp]
  00041	c1 e2 03	 shl	 edx, 3
  00044	8b 45 08	 mov	 eax, DWORD PTR _context$[ebp]
  00047	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  0004b	03 ca		 add	 ecx, edx
  0004d	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
  00053	ba 04 00 00 00	 mov	 edx, 4
  00058	6b c2 00	 imul	 eax, edx, 0
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  0005e	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv76[ebp]
  00064	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
  00068	8b 45 10	 mov	 eax, DWORD PTR _inputLen$[ebp]
  0006b	c1 e0 03	 shl	 eax, 3
  0006e	39 85 18 ff ff
	ff		 cmp	 DWORD PTR tv76[ebp], eax
  00074	73 21		 jae	 SHORT $LN5@MD5Update

; 98   :  context->count[1]++;

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	c1 e0 00	 shl	 eax, 0
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  00081	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00085	83 c2 01	 add	 edx, 1
  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	c1 e0 00	 shl	 eax, 0
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  00093	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
$LN5@MD5Update:

; 99   :   context->count[1] += ((UINT4)inputLen >> 29);

  00097	b8 04 00 00 00	 mov	 eax, 4
  0009c	c1 e0 00	 shl	 eax, 0
  0009f	8b 4d 10	 mov	 ecx, DWORD PTR _inputLen$[ebp]
  000a2	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  000a5	8b 55 08	 mov	 edx, DWORD PTR _context$[ebp]
  000a8	03 4c 02 10	 add	 ecx, DWORD PTR [edx+eax+16]
  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	c1 e0 00	 shl	 eax, 0
  000b4	8b 55 08	 mov	 edx, DWORD PTR _context$[ebp]
  000b7	89 4c 02 10	 mov	 DWORD PTR [edx+eax+16], ecx

; 100  : 
; 101  :   partLen = 64 - index;

  000bb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000c0	2b 45 ec	 sub	 eax, DWORD PTR _index$[ebp]
  000c3	89 45 e0	 mov	 DWORD PTR _partLen$[ebp], eax

; 102  : 
; 103  :   /* Transform as many times as possible.*/
; 104  :   if (inputLen >= partLen) {

  000c6	8b 45 10	 mov	 eax, DWORD PTR _inputLen$[ebp]
  000c9	3b 45 e0	 cmp	 eax, DWORD PTR _partLen$[ebp]
  000cc	72 68		 jb	 SHORT $LN6@MD5Update

; 105  :  MD5_memcpy

  000ce	8b 45 e0	 mov	 eax, DWORD PTR _partLen$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  000d5	51		 push	 ecx
  000d6	8b 55 ec	 mov	 edx, DWORD PTR _index$[ebp]
  000d9	8b 45 08	 mov	 eax, DWORD PTR _context$[ebp]
  000dc	8d 4c 10 18	 lea	 ecx, DWORD PTR [eax+edx+24]
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ?MD5_memcpy@@YAXPAE0I@Z	; MD5_memcpy
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  :    ((POINTER)&context->buffer[index], (POINTER)input, partLen);
; 107  :  MD5Transform (context->state, context->buffer);

  000e9	8b 45 08	 mov	 eax, DWORD PTR _context$[ebp]
  000ec	83 c0 18	 add	 eax, 24			; 00000018H
  000ef	50		 push	 eax
  000f0	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ?MD5Transform@@YAXQAKQAE@Z ; MD5Transform
  000f9	83 c4 08	 add	 esp, 8

; 108  : 
; 109  :  for (i = partLen; i + 63 < inputLen; i += 64)

  000fc	8b 45 e0	 mov	 eax, DWORD PTR _partLen$[ebp]
  000ff	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00102	eb 09		 jmp	 SHORT $LN4@MD5Update
$LN2@MD5Update:
  00104	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00107	83 c0 40	 add	 eax, 64			; 00000040H
  0010a	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@MD5Update:
  0010d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00110	83 c0 3f	 add	 eax, 63			; 0000003fH
  00113	3b 45 10	 cmp	 eax, DWORD PTR _inputLen$[ebp]
  00116	73 15		 jae	 SHORT $LN3@MD5Update

; 110  :    MD5Transform (context->state, &input[i]);

  00118	8b 45 0c	 mov	 eax, DWORD PTR _input$[ebp]
  0011b	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  0011e	50		 push	 eax
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _context$[ebp]
  00122	51		 push	 ecx
  00123	e8 00 00 00 00	 call	 ?MD5Transform@@YAXQAKQAE@Z ; MD5Transform
  00128	83 c4 08	 add	 esp, 8
  0012b	eb d7		 jmp	 SHORT $LN2@MD5Update
$LN3@MD5Update:

; 111  : 
; 112  :  index = 0;

  0012d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0

; 113  :   }
; 114  :   else

  00134	eb 07		 jmp	 SHORT $LN7@MD5Update
$LN6@MD5Update:

; 115  :  i = 0;

  00136	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN7@MD5Update:

; 116  : 
; 117  :   /* Buffer remaining input */
; 118  :   MD5_memcpy

  0013d	8b 45 10	 mov	 eax, DWORD PTR _inputLen$[ebp]
  00140	2b 45 f8	 sub	 eax, DWORD PTR _i$[ebp]
  00143	50		 push	 eax
  00144	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  00147	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  0014a	51		 push	 ecx
  0014b	8b 55 ec	 mov	 edx, DWORD PTR _index$[ebp]
  0014e	8b 45 08	 mov	 eax, DWORD PTR _context$[ebp]
  00151	8d 4c 10 18	 lea	 ecx, DWORD PTR [eax+edx+24]
  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 ?MD5_memcpy@@YAXPAE0I@Z	; MD5_memcpy
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 119  :  ((POINTER)&context->buffer[index], (POINTER)&input[i],
; 120  :   inputLen-i);
; 121  : }

  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	5b		 pop	 ebx
  00161	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00167	3b ec		 cmp	 ebp, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
?MD5Update@@YAXPAUMD5_CTX@@PAEI@Z ENDP			; MD5Update
_TEXT	ENDS
END
