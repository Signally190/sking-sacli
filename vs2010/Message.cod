; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Administrator\Desktop\????? ??\????? ??\Client Source Code\Wgs\Message.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?RET_OK@@3KB					; RET_OK
PUBLIC	?RET_MEMORY@@3KB				; RET_MEMORY
PUBLIC	?RET_PARAM@@3KB					; RET_PARAM
PUBLIC	?messNew@@3PAUMessNode@@A			; messNew
PUBLIC	?messHead@@3PAUMessNode@@A			; messHead
PUBLIC	?messTail@@3PAUMessNode@@A			; messTail
PUBLIC	?iEncrypt@@3HA					; iEncrypt
PUBLIC	?messNewTailParam@@3PAUParameter@@A		; messNewTailParam
PUBLIC	?iFormatLen@@3HA				; iFormatLen
PUBLIC	?iNumStart@@3HA					; iNumStart
PUBLIC	?szFormatBuf@@3PADA				; szFormatBuf
PUBLIC	?szAnalyzeBuf@@3PADA				; szAnalyzeBuf
PUBLIC	?nState@@3HA					; nState
PUBLIC	?backslash@@3HA					; backslash
PUBLIC	?bAnd@@3HA					; bAnd
PUBLIC	?indexBuf@@3HA					; indexBuf
PUBLIC	?nParamCounter@@3HA				; nParamCounter
_BSS	SEGMENT
?messNew@@3PAUMessNode@@A DD 01H DUP (?)		; messNew
?messHead@@3PAUMessNode@@A DD 01H DUP (?)		; messHead
?messTail@@3PAUMessNode@@A DD 01H DUP (?)		; messTail
?iEncrypt@@3HA DD 01H DUP (?)				; iEncrypt
?messNewTailParam@@3PAUParameter@@A DD 01H DUP (?)	; messNewTailParam
?iFormatLen@@3HA DD 01H DUP (?)				; iFormatLen
?iNumStart@@3HA DD 01H DUP (?)				; iNumStart
?szFormatBuf@@3PADA DB 0400H DUP (?)			; szFormatBuf
?szAnalyzeBuf@@3PADA DB 0400H DUP (?)			; szAnalyzeBuf
?nState@@3HA DD	01H DUP (?)				; nState
?backslash@@3HA DD 01H DUP (?)				; backslash
?bAnd@@3HA DD	01H DUP (?)				; bAnd
?indexBuf@@3HA DD 01H DUP (?)				; indexBuf
?nParamCounter@@3HA DD 01H DUP (?)			; nParamCounter
_BSS	ENDS
CONST	SEGMENT
?RET_OK@@3KB DD	01H					; RET_OK
?RET_MEMORY@@3KB DD 02H					; RET_MEMORY
?RET_PARAM@@3KB DD 03H					; RET_PARAM
CONST	ENDS
PUBLIC	??0Parameter@@QAE@XZ				; Parameter::Parameter
PUBLIC	??0MessNode@@QAE@XZ				; MessNode::MessNode
PUBLIC	?AddParamForFormat@@YAXPADHK@Z			; AddParamForFormat
PUBLIC	?AddParamForFormat@@YAXDK@Z			; AddParamForFormat
PUBLIC	?GetString@@YAPADAAHPAD@Z			; GetString
PUBLIC	?AnalyzeMessage@@YAKPADH@Z			; AnalyzeMessage
PUBLIC	?ReleaseMessHeadParam@@YAPAUParameter@@XZ	; ReleaseMessHeadParam
PUBLIC	?RemoveMessHead@@YAXXZ				; RemoveMessHead
PUBLIC	?ReleaseMessList@@YAXXZ				; ReleaseMessList
PUBLIC	?GetCafeNumber@@YAKXZ				; GetCafeNumber
PUBLIC	?StartFormat@@YAXXZ				; StartFormat
PUBLIC	?FinishFormat@@YAXXZ				; FinishFormat
PUBLIC	?FormatAdd@@YAXXZ				; FormatAdd
PUBLIC	?ReleaseParam@@YAXPAUParameter@@@Z		; ReleaseParam
PUBLIC	?LinkParamToMessNew@@YAXPAUParameter@@@Z	; LinkParamToMessNew
PUBLIC	?LinkMessNewToMessTail@@YAXXZ			; LinkMessNewToMessTail
PUBLIC	?ReleaseMessNew@@YAXXZ				; ReleaseMessNew
PUBLIC	?HandleZero@@YAKAAPADAAH@Z			; HandleZero
PUBLIC	?HandleHead@@YAXAAPADAAH@Z			; HandleHead
PUBLIC	?HandleLen@@YAKAAPADAAH@Z			; HandleLen
PUBLIC	?HandleParam@@YAKAAPADAAH@Z			; HandleParam
PUBLIC	?__LINE__Var@?0??HandleZero@@YAKAAPADAAH@Z@4JA	; `HandleZero'::`1'::__LINE__Var
PUBLIC	??_C@_0GC@FBNBEIJH@c?3?2users?2administrator?2desktop?2?$LN@ ; `string'
PUBLIC	?__LINE__Var@?0??HandleParam@@YAKAAPADAAH@Z@4JA	; `HandleParam'::`1'::__LINE__Var
PUBLIC	??_C@_07LDMIILLH@8904001?$AA@			; `string'
PUBLIC	??_C@_0L@HFCDJNEB@vup2u4fu?46?$AA@		; `string'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	??2@YAPAXIHPBDH@Z:PROC				; operator new
EXTRN	??_U@YAPAXIHPBDH@Z:PROC				; operator new[]
EXTRN	??3@YAXPAXHPBDH@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__imp__lstrcpyA@8:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__OpenFileMappingA@12:PROC
EXTRN	__imp__atoi:PROC
EXTRN	?ecb_crypt@@YAHPAD0II@Z:PROC			; ecb_crypt
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?P_Key@@3PADA:BYTE				; P_Key
EXTRN	?szPid@@3PADA:BYTE				; szPid
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0L@HFCDJNEB@vup2u4fu?46?$AA@
CONST	SEGMENT
??_C@_0L@HFCDJNEB@vup2u4fu?46?$AA@ DB 'vup2u4fu.6', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LDMIILLH@8904001?$AA@
CONST	SEGMENT
??_C@_07LDMIILLH@8904001?$AA@ DB '8904001', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??HandleParam@@YAKAAPADAAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??HandleParam@@YAKAAPADAAH@Z@4JA DD 0faH	; `HandleParam'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GC@FBNBEIJH@c?3?2users?2administrator?2desktop?2?$LN@
CONST	SEGMENT
??_C@_0GC@FBNBEIJH@c?3?2users?2administrator?2desktop?2?$LN@ DB 'c:\users'
	DB	'\administrator\desktop\', 0bdH, 0baH, 0c5H, 0e6H, 0bfH, 0a1H, 0c0H
	DB	0ccH, 0c1H, 0f6H, ' ', 0c0H, 0daH, 0b7H, 0e1H, '\', 0c5H, 0acH
	DB	0b6H, 0f3H, 0c0H, 0ccH, 0beH, 0f0H, 0c6H, 0aeH, ' ', 0c0H, 0daH
	DB	0b7H, 0e1H, '\client source code\wgs\message.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??HandleZero@@YAKAAPADAAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??HandleZero@@YAKAAPADAAH@Z@4JA DD 0b9H	; `HandleZero'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?HandleParam@@YAKAAPADAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?HandleParam@@YAKAAPADAAH@Z$0
__ehfuncinfo$?HandleParam@@YAKAAPADAAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?HandleParam@@YAKAAPADAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?HandleZero@@YAKAAPADAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?HandleZero@@YAKAAPADAAH@Z$0
__ehfuncinfo$?HandleZero@@YAKAAPADAAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?HandleZero@@YAKAAPADAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?HandleParam@@YAKAAPADAAH@Z
_TEXT	SEGMENT
tv80 = -296						; size = 4
tv67 = -296						; size = 4
tv135 = -292						; size = 4
tv79 = -292						; size = 4
tv66 = -292						; size = 4
$T2 = -284						; size = 4
$T3 = -272						; size = 4
$T4 = -260						; size = 4
$T5 = -248						; size = 4
$T6 = -236						; size = 4
_paramNew$7 = -32					; size = 4
_ch$ = -17						; size = 1
__$EHRec$ = -12						; size = 12
_lpstr$ = 8						; size = 4
_iStrLen$ = 12						; size = 4
?HandleParam@@YAKAAPADAAH@Z PROC			; HandleParam, COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?HandleParam@@YAKAAPADAAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00020	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
$LN2@HandlePara:

; 251  : 	char	ch;
; 252  : 	while(iStrLen-- > 0)

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _iStrLen$[ebp]
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv66[ebp], ecx
  00048	8b 55 0c	 mov	 edx, DWORD PTR _iStrLen$[ebp]
  0004b	8b 02		 mov	 eax, DWORD PTR [edx]
  0004d	83 e8 01	 sub	 eax, 1
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _iStrLen$[ebp]
  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR tv66[ebp], 0
  0005c	7e 0c		 jle	 SHORT $LN17@HandlePara
  0005e	c7 85 d8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
  00068	eb 0a		 jmp	 SHORT $LN18@HandlePara
$LN17@HandlePara:
  0006a	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
$LN18@HandlePara:
  00074	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR tv67[ebp], 0
  0007b	0f 84 91 02 00
	00		 je	 $LN3@HandlePara

; 253  : 	{
; 254  : 		if(backslash)

  00081	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?backslash@@3HA, 0 ; backslash
  00088	74 3e		 je	 SHORT $LN4@HandlePara

; 255  : 		{
; 256  : 			backslash=FALSE;

  0008a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?backslash@@3HA, 0 ; backslash

; 257  : 			szAnalyzeBuf[indexBuf++]=*lpstr++;

  00094	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?indexBuf@@3HA ; indexBuf
  0009f	8a 01		 mov	 al, BYTE PTR [ecx]
  000a1	88 82 00 00 00
	00		 mov	 BYTE PTR ?szAnalyzeBuf@@3PADA[edx], al
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?indexBuf@@3HA ; indexBuf
  000ad	83 c1 01	 add	 ecx, 1
  000b0	89 0d 00 00 00
	00		 mov	 DWORD PTR ?indexBuf@@3HA, ecx ; indexBuf
  000b6	8b 55 08	 mov	 edx, DWORD PTR _lpstr$[ebp]
  000b9	8b 02		 mov	 eax, DWORD PTR [edx]
  000bb	83 c0 01	 add	 eax, 1
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _lpstr$[ebp]
  000c1	89 01		 mov	 DWORD PTR [ecx], eax

; 258  : 		}
; 259  : 		else

  000c3	e9 45 02 00 00	 jmp	 $LN5@HandlePara
$LN4@HandlePara:

; 260  : 		{
; 261  : 			if(';'==(ch=*lpstr++))

  000c8	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	8a 11		 mov	 dl, BYTE PTR [ecx]
  000cf	88 55 ef	 mov	 BYTE PTR _ch$[ebp], dl
  000d2	0f be 45 ef	 movsx	 eax, BYTE PTR _ch$[ebp]
  000d6	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv79[ebp], eax
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _lpstr$[ebp]
  000df	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e1	83 c2 01	 add	 edx, 1
  000e4	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  000e7	89 10		 mov	 DWORD PTR [eax], edx
  000e9	83 bd dc fe ff
	ff 3b		 cmp	 DWORD PTR tv79[ebp], 59	; 0000003bH
  000f0	75 0c		 jne	 SHORT $LN19@HandlePara
  000f2	c7 85 d8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv80[ebp], 1
  000fc	eb 0a		 jmp	 SHORT $LN20@HandlePara
$LN19@HandlePara:
  000fe	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN20@HandlePara:
  00108	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR tv80[ebp], 0
  0010f	0f 84 a5 01 00
	00		 je	 $LN6@HandlePara

; 262  : 			{
; 263  : 				Parameter *paramNew=NULL;

  00115	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _paramNew$7[ebp], 0

; 264  : 				szAnalyzeBuf[indexBuf++]='\0';

  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?indexBuf@@3HA ; indexBuf
  00121	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?indexBuf@@3HA ; indexBuf
  0012d	83 c1 01	 add	 ecx, 1
  00130	89 0d 00 00 00
	00		 mov	 DWORD PTR ?indexBuf@@3HA, ecx ; indexBuf
  00136	81 bd 14 ff ff
	ff 00 04 00 00	 cmp	 DWORD PTR $T6[ebp], 1024 ; 00000400H
  00140	73 02		 jae	 SHORT $LN21@HandlePara
  00142	eb 05		 jmp	 SHORT $LN22@HandlePara
$LN21@HandlePara:
  00144	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN22@HandlePara:
  00149	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR $T6[ebp]
  0014f	c6 82 00 00 00
	00 00		 mov	 BYTE PTR ?szAnalyzeBuf@@3PADA[edx], 0

; 265  : 				if((paramNew=new Parameter) && (paramNew->lpstrParam=new char[indexBuf+1]))

  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??HandleParam@@YAKAAPADAAH@Z@4JA
  0015b	83 c0 0f	 add	 eax, 15			; 0000000fH
  0015e	50		 push	 eax
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@FBNBEIJH@c?3?2users?2administrator?2desktop?2?$LN@
  00164	6a 01		 push	 1
  00166	6a 0c		 push	 12			; 0000000cH
  00168	e8 00 00 00 00	 call	 ??2@YAPAXIHPBDH@Z	; operator new
  0016d	83 c4 10	 add	 esp, 16			; 00000010H
  00170	89 85 fc fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00176	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0017d	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR $T4[ebp], 0
  00184	74 13		 je	 SHORT $LN23@HandlePara
  00186	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  0018c	e8 00 00 00 00	 call	 ??0Parameter@@QAE@XZ	; Parameter::Parameter
  00191	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00197	eb 0a		 jmp	 SHORT $LN24@HandlePara
$LN23@HandlePara:
  00199	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$LN24@HandlePara:
  001a3	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  001a9	89 8d 08 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], ecx
  001af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b6	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR $T5[ebp]
  001bc	89 55 e0	 mov	 DWORD PTR _paramNew$7[ebp], edx
  001bf	83 7d e0 00	 cmp	 DWORD PTR _paramNew$7[ebp], 0
  001c3	0f 84 8a 00 00
	00		 je	 $LN8@HandlePara
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??HandleParam@@YAKAAPADAAH@Z@4JA
  001ce	83 c0 0f	 add	 eax, 15			; 0000000fH
  001d1	50		 push	 eax
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@FBNBEIJH@c?3?2users?2administrator?2desktop?2?$LN@
  001d7	6a 01		 push	 1
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?indexBuf@@3HA ; indexBuf
  001df	83 c1 01	 add	 ecx, 1
  001e2	51		 push	 ecx
  001e3	e8 00 00 00 00	 call	 ??_U@YAPAXIHPBDH@Z	; operator new[]
  001e8	83 c4 10	 add	 esp, 16			; 00000010H
  001eb	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  001f1	8b 55 e0	 mov	 edx, DWORD PTR _paramNew$7[ebp]
  001f4	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  001fa	89 02		 mov	 DWORD PTR [edx], eax
  001fc	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR $T3[ebp], 0
  00203	74 4e		 je	 SHORT $LN8@HandlePara

; 266  : 				{
; 267  : 					paramNew->next=NULL;

  00205	8b 45 e0	 mov	 eax, DWORD PTR _paramNew$7[ebp]
  00208	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 268  : 					CopyMemory(paramNew->lpstrParam,szAnalyzeBuf,indexBuf);

  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?indexBuf@@3HA ; indexBuf
  00214	50		 push	 eax
  00215	68 00 00 00 00	 push	 OFFSET ?szAnalyzeBuf@@3PADA ; szAnalyzeBuf
  0021a	8b 4d e0	 mov	 ecx, DWORD PTR _paramNew$7[ebp]
  0021d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0021f	52		 push	 edx
  00220	e8 00 00 00 00	 call	 _memcpy
  00225	83 c4 0c	 add	 esp, 12			; 0000000cH

; 269  : 					paramNew->lpstrParam[indexBuf]='\0';

  00228	8b 45 e0	 mov	 eax, DWORD PTR _paramNew$7[ebp]
  0022b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?indexBuf@@3HA ; indexBuf
  00233	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0

; 270  : 					paramNew->iLen=indexBuf-1;

  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?indexBuf@@3HA ; indexBuf
  0023c	83 e8 01	 sub	 eax, 1
  0023f	8b 4d e0	 mov	 ecx, DWORD PTR _paramNew$7[ebp]
  00242	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 271  : 					LinkParamToMessNew(paramNew);

  00245	8b 45 e0	 mov	 eax, DWORD PTR _paramNew$7[ebp]
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ?LinkParamToMessNew@@YAXPAUParameter@@@Z ; LinkParamToMessNew
  0024e	83 c4 04	 add	 esp, 4

; 272  : 				}
; 273  : 				else

  00251	eb 2f		 jmp	 SHORT $LN9@HandlePara
$LN8@HandlePara:

; 274  : 				{
; 275  : 					if(paramNew)

  00253	83 7d e0 00	 cmp	 DWORD PTR _paramNew$7[ebp], 0
  00257	74 1a		 je	 SHORT $LN10@HandlePara

; 276  : 						delete paramNew;

  00259	8b 45 e0	 mov	 eax, DWORD PTR _paramNew$7[ebp]
  0025c	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00262	6a 0c		 push	 12			; 0000000cH
  00264	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0026a	51		 push	 ecx
  0026b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00270	83 c4 08	 add	 esp, 8
$LN10@HandlePara:

; 277  : 					ReleaseMessNew();

  00273	e8 00 00 00 00	 call	 ?ReleaseMessNew@@YAXXZ	; ReleaseMessNew

; 278  : 					return RET_MEMORY;

  00278	b8 02 00 00 00	 mov	 eax, 2
  0027d	e9 95 00 00 00	 jmp	 $LN16@HandlePara
$LN9@HandlePara:

; 279  : 				}
; 280  : 				if(--nParamCounter<=0)

  00282	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nParamCounter@@3HA ; nParamCounter
  00287	83 e8 01	 sub	 eax, 1
  0028a	a3 00 00 00 00	 mov	 DWORD PTR ?nParamCounter@@3HA, eax ; nParamCounter
  0028f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?nParamCounter@@3HA, 0 ; nParamCounter
  00296	7f 16		 jg	 SHORT $LN11@HandlePara

; 281  : 				{
; 282  : 					LinkMessNewToMessTail();

  00298	e8 00 00 00 00	 call	 ?LinkMessNewToMessTail@@YAXXZ ; LinkMessNewToMessTail

; 283  : 					nState=ZERO;

  0029d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nState@@3HA, 0 ; nState

; 284  : 					return RET_OK;

  002a7	b8 01 00 00 00	 mov	 eax, 1
  002ac	eb 69		 jmp	 SHORT $LN16@HandlePara
$LN11@HandlePara:

; 285  : 				}
; 286  : 				indexBuf=0;

  002ae	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?indexBuf@@3HA, 0 ; indexBuf

; 287  : 			}
; 288  : 			else

  002b8	eb 53		 jmp	 SHORT $LN5@HandlePara
$LN6@HandlePara:

; 289  : 			{
; 290  : 				if('\\'==ch)

  002ba	0f be 45 ef	 movsx	 eax, BYTE PTR _ch$[ebp]
  002be	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  002c1	75 0c		 jne	 SHORT $LN12@HandlePara

; 291  : 					backslash=TRUE;

  002c3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?backslash@@3HA, 1 ; backslash
  002cd	eb 3e		 jmp	 SHORT $LN5@HandlePara
$LN12@HandlePara:

; 292  : 				else if('&'==ch)

  002cf	0f be 45 ef	 movsx	 eax, BYTE PTR _ch$[ebp]
  002d3	83 f8 26	 cmp	 eax, 38			; 00000026H
  002d6	75 18		 jne	 SHORT $LN14@HandlePara

; 293  : 				{
; 294  : 					ReleaseMessNew();

  002d8	e8 00 00 00 00	 call	 ?ReleaseMessNew@@YAXXZ	; ReleaseMessNew

; 295  : 					nState=ZERO;

  002dd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nState@@3HA, 0 ; nState

; 296  : 					return RET_PARAM;

  002e7	b8 03 00 00 00	 mov	 eax, 3
  002ec	eb 29		 jmp	 SHORT $LN16@HandlePara

; 297  : 				}
; 298  : 				else

  002ee	eb 1d		 jmp	 SHORT $LN5@HandlePara
$LN14@HandlePara:

; 299  : 					szAnalyzeBuf[indexBuf++]=ch;

  002f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?indexBuf@@3HA ; indexBuf
  002f5	8a 4d ef	 mov	 cl, BYTE PTR _ch$[ebp]
  002f8	88 88 00 00 00
	00		 mov	 BYTE PTR ?szAnalyzeBuf@@3PADA[eax], cl
  002fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?indexBuf@@3HA ; indexBuf
  00304	83 c2 01	 add	 edx, 1
  00307	89 15 00 00 00
	00		 mov	 DWORD PTR ?indexBuf@@3HA, edx ; indexBuf
$LN5@HandlePara:

; 300  : 			}
; 301  : 		}
; 302  : 	}

  0030d	e9 2b fd ff ff	 jmp	 $LN2@HandlePara
$LN3@HandlePara:

; 303  : 	return RET_OK;

  00312	b8 01 00 00 00	 mov	 eax, 1
$LN16@HandlePara:

; 304  : }

  00317	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0031a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00321	59		 pop	 ecx
  00322	5f		 pop	 edi
  00323	5e		 pop	 esi
  00324	5b		 pop	 ebx
  00325	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  0032b	3b ec		 cmp	 ebp, esp
  0032d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00332	8b e5		 mov	 esp, ebp
  00334	5d		 pop	 ebp
  00335	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?HandleParam@@YAKAAPADAAH@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??HandleParam@@YAKAAPADAAH@Z@4JA
  00005	83 c0 0f	 add	 eax, 15			; 0000000fH
  00008	50		 push	 eax
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@FBNBEIJH@c?3?2users?2administrator?2desktop?2?$LN@
  0000e	6a 01		 push	 1
  00010	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXHPBDH@Z	; operator delete
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	c3		 ret	 0
__ehhandler$?HandleParam@@YAKAAPADAAH@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?HandleParam@@YAKAAPADAAH@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?HandleParam@@YAKAAPADAAH@Z ENDP			; HandleParam
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?HandleLen@@YAKAAPADAAH@Z
_TEXT	SEGMENT
tv74 = -224						; size = 4
tv67 = -224						; size = 4
tv73 = -220						; size = 4
tv66 = -220						; size = 4
$T1 = -212						; size = 4
_ch$ = -5						; size = 1
_lpstr$ = 8						; size = 4
_iStrLen$ = 12						; size = 4
?HandleLen@@YAKAAPADAAH@Z PROC				; HandleLen, COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
$LN2@HandleLen:

; 222  : 	char	ch;
; 223  : 	while(iStrLen-- > 0)

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _iStrLen$[ebp]
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], ecx
  00029	8b 55 0c	 mov	 edx, DWORD PTR _iStrLen$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	83 e8 01	 sub	 eax, 1
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _iStrLen$[ebp]
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	83 bd 24 ff ff
	ff 00		 cmp	 DWORD PTR tv66[ebp], 0
  0003d	7e 0c		 jle	 SHORT $LN8@HandleLen
  0003f	c7 85 20 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
  00049	eb 0a		 jmp	 SHORT $LN9@HandleLen
$LN8@HandleLen:
  0004b	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
$LN9@HandleLen:
  00055	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR tv67[ebp], 0
  0005c	0f 84 20 01 00
	00		 je	 $LN3@HandleLen

; 224  : 	{
; 225  : 		if(';'==(ch=*lpstr++))

  00062	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	8a 11		 mov	 dl, BYTE PTR [ecx]
  00069	88 55 fb	 mov	 BYTE PTR _ch$[ebp], dl
  0006c	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00070	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _lpstr$[ebp]
  00079	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007b	83 c2 01	 add	 edx, 1
  0007e	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  00081	89 10		 mov	 DWORD PTR [eax], edx
  00083	83 bd 24 ff ff
	ff 3b		 cmp	 DWORD PTR tv73[ebp], 59	; 0000003bH
  0008a	75 0c		 jne	 SHORT $LN10@HandleLen
  0008c	c7 85 20 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv74[ebp], 1
  00096	eb 0a		 jmp	 SHORT $LN11@HandleLen
$LN10@HandleLen:
  00098	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
$LN11@HandleLen:
  000a2	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR tv74[ebp], 0
  000a9	0f 84 97 00 00
	00		 je	 $LN4@HandleLen

; 226  : 		{
; 227  : 			szAnalyzeBuf[indexBuf]='\0';

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?indexBuf@@3HA ; indexBuf
  000b4	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000ba	81 bd 2c ff ff
	ff 00 04 00 00	 cmp	 DWORD PTR $T1[ebp], 1024 ; 00000400H
  000c4	73 02		 jae	 SHORT $LN12@HandleLen
  000c6	eb 05		 jmp	 SHORT $LN13@HandleLen
$LN12@HandleLen:
  000c8	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN13@HandleLen:
  000cd	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  000d3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?szAnalyzeBuf@@3PADA[ecx], 0

; 228  : 			nParamCounter=atoi(szAnalyzeBuf);

  000da	8b f4		 mov	 esi, esp
  000dc	68 00 00 00 00	 push	 OFFSET ?szAnalyzeBuf@@3PADA ; szAnalyzeBuf
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000e7	83 c4 04	 add	 esp, 4
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	a3 00 00 00 00	 mov	 DWORD PTR ?nParamCounter@@3HA, eax ; nParamCounter

; 229  : 			if(!nParamCounter)

  000f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?nParamCounter@@3HA, 0 ; nParamCounter
  000fd	75 11		 jne	 SHORT $LN5@HandleLen

; 230  : 			{
; 231  : 				nState=ZERO;

  000ff	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nState@@3HA, 0 ; nState

; 232  : 				return RET_PARAM;

  00109	b8 03 00 00 00	 mov	 eax, 3
  0010e	eb 77		 jmp	 SHORT $LN7@HandleLen
$LN5@HandleLen:

; 233  : 			}
; 234  : 			messNew->nParam=(nParamCounter-=1);

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nParamCounter@@3HA ; nParamCounter
  00115	83 e8 01	 sub	 eax, 1
  00118	a3 00 00 00 00	 mov	 DWORD PTR ?nParamCounter@@3HA, eax ; nParamCounter
  0011d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  00123	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nParamCounter@@3HA ; nParamCounter
  00129	89 11		 mov	 DWORD PTR [ecx], edx

; 235  : 			indexBuf=0;

  0012b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?indexBuf@@3HA, 0 ; indexBuf

; 236  : 			nState=READPARAM;

  00135	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?nState@@3HA, 3 ; nState

; 237  : 			return RET_OK;

  0013f	b8 01 00 00 00	 mov	 eax, 1
  00144	eb 41		 jmp	 SHORT $LN7@HandleLen
$LN4@HandleLen:

; 238  : 		}
; 239  : 		szAnalyzeBuf[indexBuf++]=ch;

  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR ?indexBuf@@3HA ; indexBuf
  0014b	8a 4d fb	 mov	 cl, BYTE PTR _ch$[ebp]
  0014e	88 88 00 00 00
	00		 mov	 BYTE PTR ?szAnalyzeBuf@@3PADA[eax], cl
  00154	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?indexBuf@@3HA ; indexBuf
  0015a	83 c2 01	 add	 edx, 1
  0015d	89 15 00 00 00
	00		 mov	 DWORD PTR ?indexBuf@@3HA, edx ; indexBuf

; 240  : 		if(indexBuf>5)

  00163	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?indexBuf@@3HA, 5 ; indexBuf
  0016a	7e 11		 jle	 SHORT $LN6@HandleLen

; 241  : 		{
; 242  : 			nState=ZERO;

  0016c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nState@@3HA, 0 ; nState

; 243  : 			return RET_PARAM;

  00176	b8 03 00 00 00	 mov	 eax, 3
  0017b	eb 0a		 jmp	 SHORT $LN7@HandleLen
$LN6@HandleLen:

; 244  : 		}
; 245  : 	}

  0017d	e9 9c fe ff ff	 jmp	 $LN2@HandleLen
$LN3@HandleLen:

; 246  : 	return RET_OK;

  00182	b8 01 00 00 00	 mov	 eax, 1
$LN7@HandleLen:

; 247  : }

  00187	5f		 pop	 edi
  00188	5e		 pop	 esi
  00189	5b		 pop	 ebx
  0018a	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  00190	3b ec		 cmp	 ebp, esp
  00192	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
?HandleLen@@YAKAAPADAAH@Z ENDP				; HandleLen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?HandleHead@@YAXAAPADAAH@Z
_TEXT	SEGMENT
tv84 = -212						; size = 4
tv75 = -212						; size = 4
tv67 = -212						; size = 4
tv83 = -208						; size = 4
tv74 = -208						; size = 4
tv66 = -208						; size = 4
_ch$ = -5						; size = 1
_lpstr$ = 8						; size = 4
_iStrLen$ = 12						; size = 4
?HandleHead@@YAXAAPADAAH@Z PROC				; HandleHead, COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00012	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
$LN2@HandleHead:

; 198  : 	char ch;
; 199  : 	while(iStrLen-- > 0)

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _iStrLen$[ebp]
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], ecx
  00029	8b 55 0c	 mov	 edx, DWORD PTR _iStrLen$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	83 e8 01	 sub	 eax, 1
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _iStrLen$[ebp]
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR tv66[ebp], 0
  0003d	7e 0c		 jle	 SHORT $LN11@HandleHead
  0003f	c7 85 2c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
  00049	eb 0a		 jmp	 SHORT $LN12@HandleHead
$LN11@HandleHead:
  0004b	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
$LN12@HandleHead:
  00055	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR tv67[ebp], 0
  0005c	0f 84 d1 00 00
	00		 je	 $LN1@HandleHead

; 200  : 	{
; 201  : 		if(bAnd)

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bAnd@@3HA, 0	; bAnd
  00069	74 76		 je	 SHORT $LN4@HandleHead

; 202  : 		{
; 203  : 			if(';'==(ch=*lpstr++))

  0006b	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	8a 11		 mov	 dl, BYTE PTR [ecx]
  00072	88 55 fb	 mov	 BYTE PTR _ch$[ebp], dl
  00075	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  00079	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _lpstr$[ebp]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	83 c2 01	 add	 edx, 1
  00087	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  0008a	89 10		 mov	 DWORD PTR [eax], edx
  0008c	83 bd 30 ff ff
	ff 3b		 cmp	 DWORD PTR tv74[ebp], 59	; 0000003bH
  00093	75 0c		 jne	 SHORT $LN13@HandleHead
  00095	c7 85 2c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv75[ebp], 1
  0009f	eb 0a		 jmp	 SHORT $LN14@HandleHead
$LN13@HandleHead:
  000a1	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN14@HandleHead:
  000ab	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR tv75[ebp], 0
  000b2	74 18		 je	 SHORT $LN6@HandleHead

; 204  : 			{
; 205  : 				bAnd=FALSE;

  000b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bAnd@@3HA, 0	; bAnd

; 206  : 				nState=READLEN;

  000be	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?nState@@3HA, 2 ; nState

; 207  : 				return;

  000c8	eb 69		 jmp	 SHORT $LN1@HandleHead
  000ca	eb 13		 jmp	 SHORT $LN7@HandleHead
$LN6@HandleHead:

; 208  : 			}
; 209  : 			else if('&'!=ch)

  000cc	0f be 45 fb	 movsx	 eax, BYTE PTR _ch$[ebp]
  000d0	83 f8 26	 cmp	 eax, 38			; 00000026H
  000d3	74 0a		 je	 SHORT $LN7@HandleHead

; 210  : 				bAnd=FALSE;

  000d5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bAnd@@3HA, 0	; bAnd
$LN7@HandleHead:

; 211  : 		}
; 212  : 		else

  000df	eb 4d		 jmp	 SHORT $LN5@HandleHead
$LN4@HandleHead:

; 213  : 		{
; 214  : 			if('&'==*lpstr++)

  000e1	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  000e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e6	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000e9	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv83[ebp], edx
  000ef	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  000f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f4	83 c1 01	 add	 ecx, 1
  000f7	8b 55 08	 mov	 edx, DWORD PTR _lpstr$[ebp]
  000fa	89 0a		 mov	 DWORD PTR [edx], ecx
  000fc	83 bd 30 ff ff
	ff 26		 cmp	 DWORD PTR tv83[ebp], 38	; 00000026H
  00103	75 0c		 jne	 SHORT $LN15@HandleHead
  00105	c7 85 2c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv84[ebp], 1
  0010f	eb 0a		 jmp	 SHORT $LN16@HandleHead
$LN15@HandleHead:
  00111	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN16@HandleHead:
  0011b	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR tv84[ebp], 0
  00122	74 0a		 je	 SHORT $LN5@HandleHead

; 215  : 				bAnd=TRUE;

  00124	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bAnd@@3HA, 1	; bAnd
$LN5@HandleHead:

; 216  : 		}
; 217  : 	}

  0012e	e9 eb fe ff ff	 jmp	 $LN2@HandleHead
$LN1@HandleHead:

; 218  : }

  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?HandleHead@@YAXAAPADAAH@Z ENDP				; HandleHead
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?HandleZero@@YAKAAPADAAH@Z
_TEXT	SEGMENT
tv82 = -232						; size = 4
$T2 = -224						; size = 4
$T3 = -212						; size = 4
__$EHRec$ = -12						; size = 12
_lpstr$ = 8						; size = 4
_iStrLen$ = 12						; size = 4
?HandleZero@@YAKAAPADAAH@Z PROC				; HandleZero, COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?HandleZero@@YAKAAPADAAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00020	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 186  : 	indexBuf=0;

  0003d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?indexBuf@@3HA, 0 ; indexBuf

; 187  : 	nParamCounter=0;

  00047	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nParamCounter@@3HA, 0 ; nParamCounter

; 188  : 	backslash=FALSE;

  00051	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?backslash@@3HA, 0 ; backslash

; 189  : 	bAnd=FALSE;

  0005b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bAnd@@3HA, 0	; bAnd

; 190  : 	nState=READHEAD;

  00065	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?nState@@3HA, 1 ; nState

; 191  : 	if(messNew=new MessNode)

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??HandleZero@@YAKAAPADAAH@Z@4JA
  00074	83 c0 06	 add	 eax, 6
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@FBNBEIJH@c?3?2users?2administrator?2desktop?2?$LN@
  0007d	6a 01		 push	 1
  0007f	6a 0c		 push	 12			; 0000000cH
  00081	e8 00 00 00 00	 call	 ??2@YAPAXIHPBDH@Z	; operator new
  00086	83 c4 10	 add	 esp, 16			; 00000010H
  00089	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0008f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00096	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR $T2[ebp], 0
  0009d	74 13		 je	 SHORT $LN4@HandleZero
  0009f	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  000a5	e8 00 00 00 00	 call	 ??0MessNode@@QAE@XZ	; MessNode::MessNode
  000aa	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], eax
  000b0	eb 0a		 jmp	 SHORT $LN5@HandleZero
$LN4@HandleZero:
  000b2	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN5@HandleZero:
  000bc	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv82[ebp]
  000c2	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  000c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cf	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR $T3[ebp]
  000d5	89 15 00 00 00
	00		 mov	 DWORD PTR ?messNew@@3PAUMessNode@@A, edx ; messNew
  000db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?messNew@@3PAUMessNode@@A, 0 ; messNew
  000e2	74 07		 je	 SHORT $LN2@HandleZero

; 192  : 		return RET_OK;

  000e4	b8 01 00 00 00	 mov	 eax, 1
  000e9	eb 05		 jmp	 SHORT $LN1@HandleZero
$LN2@HandleZero:

; 193  : 	return RET_MEMORY;

  000eb	b8 02 00 00 00	 mov	 eax, 2
$LN1@HandleZero:

; 194  : }

  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00104	3b ec		 cmp	 ebp, esp
  00106	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?HandleZero@@YAKAAPADAAH@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??HandleZero@@YAKAAPADAAH@Z@4JA
  00005	83 c0 06	 add	 eax, 6
  00008	50		 push	 eax
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@FBNBEIJH@c?3?2users?2administrator?2desktop?2?$LN@
  0000e	6a 01		 push	 1
  00010	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXHPBDH@Z	; operator delete
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	c3		 ret	 0
__ehhandler$?HandleZero@@YAKAAPADAAH@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?HandleZero@@YAKAAPADAAH@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?HandleZero@@YAKAAPADAAH@Z ENDP				; HandleZero
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?ReleaseMessNew@@YAXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_paramTemp$ = -8					; size = 4
?ReleaseMessNew@@YAXXZ PROC				; ReleaseMessNew, COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 169  : 	register Parameter *paramTemp;
; 170  : 	if(messNew)

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?messNew@@3PAUMessNode@@A, 0 ; messNew
  00025	74 67		 je	 SHORT $LN1@ReleaseMes
$LN2@ReleaseMes:

; 171  : 	{
; 172  : 		while(messNew->param)

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  0002c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00030	74 2c		 je	 SHORT $LN3@ReleaseMes

; 173  : 		{
; 174  : 			paramTemp=messNew->param->next;

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003d	89 55 f8	 mov	 DWORD PTR _paramTemp$[ebp], edx

; 175  : 			ReleaseParam(messNew->param);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  00045	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ?ReleaseParam@@YAXPAUParameter@@@Z ; ReleaseParam
  0004e	83 c4 04	 add	 esp, 4

; 176  : 			messNew->param=paramTemp;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _paramTemp$[ebp]
  00059	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 177  : 		}

  0005c	eb c9		 jmp	 SHORT $LN2@ReleaseMes
$LN3@ReleaseMes:

; 178  : 		delete messNew;

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  00063	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00069	6a 0c		 push	 12			; 0000000cH
  0006b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00077	83 c4 08	 add	 esp, 8

; 179  : 		messNew=NULL;

  0007a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?messNew@@3PAUMessNode@@A, 0 ; messNew

; 180  : 		messNewTailParam=NULL;

  00084	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?messNewTailParam@@3PAUParameter@@A, 0 ; messNewTailParam
$LN1@ReleaseMes:

; 181  : 	}
; 182  : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?ReleaseMessNew@@YAXXZ ENDP				; ReleaseMessNew
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?LinkMessNewToMessTail@@YAXXZ
_TEXT	SEGMENT
?LinkMessNewToMessTail@@YAXXZ PROC			; LinkMessNewToMessTail, COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 156  : 	if(messTail)

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?messTail@@3PAUMessNode@@A, 0 ; messTail
  00025	74 1a		 je	 SHORT $LN2@LinkMessNe

; 157  : 	{
; 158  : 		messTail->next=messNew;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messTail@@3PAUMessNode@@A ; messTail
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  00032	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 159  : 		messTail=messNew;

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  0003a	a3 00 00 00 00	 mov	 DWORD PTR ?messTail@@3PAUMessNode@@A, eax ; messTail

; 160  : 	}
; 161  : 	else

  0003f	eb 16		 jmp	 SHORT $LN3@LinkMessNe
$LN2@LinkMessNe:

; 162  : 		messTail=messHead=messNew;

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  00046	a3 00 00 00 00	 mov	 DWORD PTR ?messHead@@3PAUMessNode@@A, eax ; messHead
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00051	89 0d 00 00 00
	00		 mov	 DWORD PTR ?messTail@@3PAUMessNode@@A, ecx ; messTail
$LN3@LinkMessNe:

; 163  : 	messNew=NULL;

  00057	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?messNew@@3PAUMessNode@@A, 0 ; messNew

; 164  : 	messNewTailParam=NULL;

  00061	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?messNewTailParam@@3PAUParameter@@A, 0 ; messNewTailParam

; 165  : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?LinkMessNewToMessTail@@YAXXZ ENDP			; LinkMessNewToMessTail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?LinkParamToMessNew@@YAXPAUParameter@@@Z
_TEXT	SEGMENT
_paramNew$ = 8						; size = 4
?LinkParamToMessNew@@YAXPAUParameter@@@Z PROC		; LinkParamToMessNew, COMDAT

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 145  : 	if(messNewTailParam)

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?messNewTailParam@@3PAUParameter@@A, 0 ; messNewTailParam
  00025	74 15		 je	 SHORT $LN2@LinkParamT

; 146  : 	{
; 147  : 		messNewTailParam->next=paramNew;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messNewTailParam@@3PAUParameter@@A ; messNewTailParam
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _paramNew$[ebp]
  0002f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 148  : 		messNewTailParam=paramNew;

  00032	8b 45 08	 mov	 eax, DWORD PTR _paramNew$[ebp]
  00035	a3 00 00 00 00	 mov	 DWORD PTR ?messNewTailParam@@3PAUParameter@@A, eax ; messNewTailParam

; 149  : 	}
; 150  : 	else

  0003a	eb 17		 jmp	 SHORT $LN1@LinkParamT
$LN2@LinkParamT:

; 151  : 		messNew->param=messNewTailParam=paramNew;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _paramNew$[ebp]
  0003f	a3 00 00 00 00	 mov	 DWORD PTR ?messNewTailParam@@3PAUParameter@@A, eax ; messNewTailParam
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?messNew@@3PAUMessNode@@A ; messNew
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?messNewTailParam@@3PAUParameter@@A ; messNewTailParam
  00050	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN1@LinkParamT:

; 152  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?LinkParamToMessNew@@YAXPAUParameter@@@Z ENDP		; LinkParamToMessNew
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?ReleaseParam@@YAXPAUParameter@@@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
$T2 = -200						; size = 4
_param$ = 8						; size = 4
?ReleaseParam@@YAXPAUParameter@@@Z PROC			; ReleaseParam, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 138  : 	if(param->lpstrParam)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _param$[ebp]
  00021	83 38 00	 cmp	 DWORD PTR [eax], 0
  00024	74 1a		 je	 SHORT $LN2@ReleasePar

; 139  : 		delete[] param->lpstrParam;

  00026	8b 45 08	 mov	 eax, DWORD PTR _param$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	89 8d 38 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00031	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003d	83 c4 04	 add	 esp, 4
$LN2@ReleasePar:

; 140  : 	delete param;

  00040	8b 45 08	 mov	 eax, DWORD PTR _param$[ebp]
  00043	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00049	6a 0c		 push	 12			; 0000000cH
  0004b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8

; 141  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?ReleaseParam@@YAXPAUParameter@@@Z ENDP			; ReleaseParam
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?FormatAdd@@YAXXZ
_TEXT	SEGMENT
_ch$ = -8						; size = 4
?FormatAdd@@YAXXZ PROC					; FormatAdd, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 86   : 	char *ch=&szFormatBuf[iNumStart];

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iNumStart@@3HA ; iNumStart
  00023	05 00 00 00 00	 add	 eax, OFFSET ?szFormatBuf@@3PADA ; szFormatBuf
  00028	89 45 f8	 mov	 DWORD PTR _ch$[ebp], eax

; 87   : 	(*ch)++;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  0002e	8a 08		 mov	 cl, BYTE PTR [eax]
  00030	80 c1 01	 add	 cl, 1
  00033	8b 55 f8	 mov	 edx, DWORD PTR _ch$[ebp]
  00036	88 0a		 mov	 BYTE PTR [edx], cl

; 88   : 	if(*ch>'9'){

  00038	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  0003b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0003e	83 f9 39	 cmp	 ecx, 57			; 00000039H
  00041	0f 8e af 00 00
	00		 jle	 $LN1@FormatAdd

; 89   : 		*ch='0';

  00047	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  0004a	c6 00 30	 mov	 BYTE PTR [eax], 48	; 00000030H

; 90   : 		if((*(ch-=1)+=1)>'9'){

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  00050	83 e8 01	 sub	 eax, 1
  00053	89 45 f8	 mov	 DWORD PTR _ch$[ebp], eax
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _ch$[ebp]
  00059	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0005c	83 c2 01	 add	 edx, 1
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  00062	88 10		 mov	 BYTE PTR [eax], dl
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _ch$[ebp]
  00067	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0006a	83 fa 39	 cmp	 edx, 57			; 00000039H
  0006d	0f 8e 83 00 00
	00		 jle	 $LN1@FormatAdd

; 91   : 			*ch='0';

  00073	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  00076	c6 00 30	 mov	 BYTE PTR [eax], 48	; 00000030H

; 92   : 			if((*(ch-=1)+=1)>'9'){

  00079	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  0007c	83 e8 01	 sub	 eax, 1
  0007f	89 45 f8	 mov	 DWORD PTR _ch$[ebp], eax
  00082	8b 4d f8	 mov	 ecx, DWORD PTR _ch$[ebp]
  00085	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00088	83 c2 01	 add	 edx, 1
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  0008e	88 10		 mov	 BYTE PTR [eax], dl
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _ch$[ebp]
  00093	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00096	83 fa 39	 cmp	 edx, 57			; 00000039H
  00099	7e 5b		 jle	 SHORT $LN1@FormatAdd

; 93   : 				*ch='0';

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  0009e	c6 00 30	 mov	 BYTE PTR [eax], 48	; 00000030H

; 94   : 				if((*(ch-=1)+=1)>'9')

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  000a4	83 e8 01	 sub	 eax, 1
  000a7	89 45 f8	 mov	 DWORD PTR _ch$[ebp], eax
  000aa	8b 4d f8	 mov	 ecx, DWORD PTR _ch$[ebp]
  000ad	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000b0	83 c2 01	 add	 edx, 1
  000b3	8b 45 f8	 mov	 eax, DWORD PTR _ch$[ebp]
  000b6	88 10		 mov	 BYTE PTR [eax], dl
  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _ch$[ebp]
  000bb	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000be	83 fa 39	 cmp	 edx, 57			; 00000039H
  000c1	7e 33		 jle	 SHORT $LN1@FormatAdd

; 95   : 					*ch=szFormatBuf[3]=szFormatBuf[4]=szFormatBuf[5]='9';

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	6b c8 05	 imul	 ecx, eax, 5
  000cb	c6 81 00 00 00
	00 39		 mov	 BYTE PTR ?szFormatBuf@@3PADA[ecx], 57 ; 00000039H
  000d2	ba 01 00 00 00	 mov	 edx, 1
  000d7	c1 e2 02	 shl	 edx, 2
  000da	c6 82 00 00 00
	00 39		 mov	 BYTE PTR ?szFormatBuf@@3PADA[edx], 57 ; 00000039H
  000e1	b8 01 00 00 00	 mov	 eax, 1
  000e6	6b c8 03	 imul	 ecx, eax, 3
  000e9	c6 81 00 00 00
	00 39		 mov	 BYTE PTR ?szFormatBuf@@3PADA[ecx], 57 ; 00000039H
  000f0	8b 55 f8	 mov	 edx, DWORD PTR _ch$[ebp]
  000f3	c6 02 39	 mov	 BYTE PTR [edx], 57	; 00000039H
$LN1@FormatAdd:

; 96   : 			}
; 97   : 		}
; 98   : 	}
; 99   : }

  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
?FormatAdd@@YAXXZ ENDP					; FormatAdd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?FinishFormat@@YAXXZ
_TEXT	SEGMENT
_j$ = -8						; size = 4
?FinishFormat@@YAXXZ PROC				; FinishFormat, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 77   : 	int j;
; 78   : 	if((j=iFormatLen & 0x07)>0){

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00023	83 e0 07	 and	 eax, 7
  00026	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
  00029	7e 2e		 jle	 SHORT $LN1@FinishForm

; 79   : 		for(;j<8;j++)

  0002b	eb 09		 jmp	 SHORT $LN4@FinishForm
$LN2@FinishForm:
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN4@FinishForm:
  00036	83 7d f8 08	 cmp	 DWORD PTR _j$[ebp], 8
  0003a	7d 1d		 jge	 SHORT $LN1@FinishForm

; 80   : 			szFormatBuf[iFormatLen++]='&';

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00041	c6 80 00 00 00
	00 26		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 38 ; 00000026H
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  0004e	83 c1 01	 add	 ecx, 1
  00051	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iFormatLen@@3HA, ecx ; iFormatLen
  00057	eb d4		 jmp	 SHORT $LN2@FinishForm
$LN1@FinishForm:

; 81   : 	}
; 82   : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?FinishFormat@@YAXXZ ENDP				; FinishFormat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?StartFormat@@YAXXZ
_TEXT	SEGMENT
?StartFormat@@YAXXZ PROC				; StartFormat, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 62   : 	szFormatBuf[0]='&';

  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	6b c8 00	 imul	 ecx, eax, 0
  00026	c6 81 00 00 00
	00 26		 mov	 BYTE PTR ?szFormatBuf@@3PADA[ecx], 38 ; 00000026H

; 63   : 	szFormatBuf[1]=';';

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	c1 e0 00	 shl	 eax, 0
  00035	c6 80 00 00 00
	00 3b		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 59 ; 0000003bH

; 64   : 	lstrcpy(szFormatBuf+2,szPid);

  0003c	8b f4		 mov	 esi, esp
  0003e	68 00 00 00 00	 push	 OFFSET ?szPid@@3PADA	; szPid
  00043	68 02 00 00 00	 push	 OFFSET ?szFormatBuf@@3PADA+2
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyA@8
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 65   : 	iNumStart=lstrlen(szPid)+2;

  00055	8b f4		 mov	 esi, esp
  00057	68 00 00 00 00	 push	 OFFSET ?szPid@@3PADA	; szPid
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	83 c0 02	 add	 eax, 2
  0006c	a3 00 00 00 00	 mov	 DWORD PTR ?iNumStart@@3HA, eax ; iNumStart

; 66   : 	szFormatBuf[iNumStart++]=';';

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iNumStart@@3HA ; iNumStart
  00076	c6 80 00 00 00
	00 3b		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 59 ; 0000003bH
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iNumStart@@3HA ; iNumStart
  00083	83 c1 01	 add	 ecx, 1
  00086	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iNumStart@@3HA, ecx ; iNumStart

; 67   : 	szFormatBuf[iNumStart++]='0';

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iNumStart@@3HA ; iNumStart
  00091	c6 80 00 00 00
	00 30		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 48 ; 00000030H
  00098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iNumStart@@3HA ; iNumStart
  0009e	83 c1 01	 add	 ecx, 1
  000a1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iNumStart@@3HA, ecx ; iNumStart

; 68   : 	szFormatBuf[iNumStart++]='0';

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iNumStart@@3HA ; iNumStart
  000ac	c6 80 00 00 00
	00 30		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 48 ; 00000030H
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iNumStart@@3HA ; iNumStart
  000b9	83 c1 01	 add	 ecx, 1
  000bc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iNumStart@@3HA, ecx ; iNumStart

; 69   : 	szFormatBuf[iNumStart++]='0';

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iNumStart@@3HA ; iNumStart
  000c7	c6 80 00 00 00
	00 30		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 48 ; 00000030H
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iNumStart@@3HA ; iNumStart
  000d4	83 c1 01	 add	 ecx, 1
  000d7	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iNumStart@@3HA, ecx ; iNumStart

; 70   : 	szFormatBuf[iNumStart]='1';

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iNumStart@@3HA ; iNumStart
  000e2	c6 80 00 00 00
	00 31		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 49 ; 00000031H

; 71   : 	szFormatBuf[iNumStart+1]=';';

  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iNumStart@@3HA ; iNumStart
  000ee	c6 80 01 00 00
	00 3b		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax+1], 59 ; 0000003bH

; 72   : 	iFormatLen=iNumStart+2;

  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iNumStart@@3HA ; iNumStart
  000fa	83 c0 02	 add	 eax, 2
  000fd	a3 00 00 00 00	 mov	 DWORD PTR ?iFormatLen@@3HA, eax ; iFormatLen

; 73   : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0010b	3b ec		 cmp	 ebp, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
?StartFormat@@YAXXZ ENDP				; StartFormat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?GetCafeNumber@@YAKXZ
_TEXT	SEGMENT
_pFlag$1 = -44						; size = 4
_Id$ = -32						; size = 4
_lpstr$ = -20						; size = 4
_hFileMapping$ = -8					; size = 4
?GetCafeNumber@@YAKXZ PROC				; GetCafeNumber, COMDAT

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 404  : 	HANDLE hFileMapping=NULL;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFileMapping$[ebp], 0

; 405  : 	LPSTR lpstr=NULL;

  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _lpstr$[ebp], 0

; 406  : 	DWORD Id=0;

  0002c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Id$[ebp], 0

; 407  : #ifdef _NEW_EARTH
; 408  : 	if (hFileMapping = OpenFileMapping(FILE_MAP_READ | FILE_MAP_WRITE, FALSE, "vup2u4fu.6"))

  00033	8b f4		 mov	 esi, esp
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HFCDJNEB@vup2u4fu?46?$AA@
  0003a	6a 00		 push	 0
  0003c	6a 06		 push	 6
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenFileMappingA@12
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	89 45 f8	 mov	 DWORD PTR _hFileMapping$[ebp], eax
  0004e	83 7d f8 00	 cmp	 DWORD PTR _hFileMapping$[ebp], 0
  00052	74 46		 je	 SHORT $LN2@GetCafeNum

; 409  : 	{
; 410  : 		int *pFlag = NULL;

  00054	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pFlag$1[ebp], 0

; 411  : 
; 412  : 		if (pFlag = (int*)MapViewOfFile(hFileMapping, FILE_MAP_READ | FILE_MAP_WRITE, 0, 0, 0))

  0005b	8b f4		 mov	 esi, esp
  0005d	6a 00		 push	 0
  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	6a 06		 push	 6
  00065	8b 45 f8	 mov	 eax, DWORD PTR _hFileMapping$[ebp]
  00068	50		 push	 eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapViewOfFile@20
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	89 45 d4	 mov	 DWORD PTR _pFlag$1[ebp], eax
  00079	83 7d d4 00	 cmp	 DWORD PTR _pFlag$1[ebp], 0
  0007d	74 08		 je	 SHORT $LN3@GetCafeNum

; 413  : 			Id = *pFlag;

  0007f	8b 45 d4	 mov	 eax, DWORD PTR _pFlag$1[ebp]
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	89 4d e0	 mov	 DWORD PTR _Id$[ebp], ecx
$LN3@GetCafeNum:

; 414  : 		CloseHandle(hFileMapping);

  00087	8b f4		 mov	 esi, esp
  00089	8b 45 f8	 mov	 eax, DWORD PTR _hFileMapping$[ebp]
  0008c	50		 push	 eax
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00093	3b f4		 cmp	 esi, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@GetCafeNum:

; 415  : 	}
; 416  : #else
; 417  : 	char szTemp[64];
; 418  : 	if(hFileMapping=OpenFileMapping(FILE_MAP_READ | FILE_MAP_WRITE,FALSE,"f; enc ")){
; 419  : 		if(lpstr=(LPSTR)MapViewOfFile(hFileMapping,FILE_MAP_READ | FILE_MAP_WRITE,0,0,0)){
; 420  : 			strcpy(szTemp,lpstr);
; 421  : 			ecb_crypt("lbgorj/",szTemp,8,DES_DECRYPT);
; 422  : 			UnmapViewOfFile((LPVOID)lpstr);
; 423  : 			Id=atoi(szTemp);
; 424  : 		}
; 425  : 		CloseHandle(hFileMapping);
; 426  : 	}
; 427  : #endif
; 428  : 	return Id;

  0009a	8b 45 e0	 mov	 eax, DWORD PTR _Id$[ebp]

; 429  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
?GetCafeNumber@@YAKXZ ENDP				; GetCafeNumber
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?ReleaseMessList@@YAXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
_paramTemp$ = -20					; size = 4
_messTemp$ = -8						; size = 4
?ReleaseMessList@@YAXXZ PROC				; ReleaseMessList, COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 383  : 	ReleaseMessNew();

  0001e	e8 00 00 00 00	 call	 ?ReleaseMessNew@@YAXXZ	; ReleaseMessNew

; 384  : 	nState=ZERO;

  00023	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?nState@@3HA, 0 ; nState
$LN2@ReleaseMes:

; 385  : 	MessNode *messTemp;
; 386  : 	register Parameter *paramTemp;
; 387  : 	while(messHead)

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?messHead@@3PAUMessNode@@A, 0 ; messHead
  00034	74 68		 je	 SHORT $LN3@ReleaseMes

; 388  : 	{
; 389  : 		messTemp=messHead->next;

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  0003b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003e	89 4d f8	 mov	 DWORD PTR _messTemp$[ebp], ecx
$LN4@ReleaseMes:

; 390  : 		while(messHead->param)

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00046	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0004a	74 2c		 je	 SHORT $LN5@ReleaseMes

; 391  : 		{
; 392  : 			paramTemp=messHead->param->next;

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00057	89 55 ec	 mov	 DWORD PTR _paramTemp$[ebp], edx

; 393  : 			ReleaseParam(messHead->param);

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ?ReleaseParam@@YAXPAUParameter@@@Z ; ReleaseParam
  00068	83 c4 04	 add	 esp, 4

; 394  : 			messHead->param=paramTemp;

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00070	8b 4d ec	 mov	 ecx, DWORD PTR _paramTemp$[ebp]
  00073	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 395  : 		}

  00076	eb c9		 jmp	 SHORT $LN4@ReleaseMes
$LN5@ReleaseMes:

; 396  : 		delete messHead;

  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  0007d	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00083	6a 0c		 push	 12			; 0000000cH
  00085	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00091	83 c4 08	 add	 esp, 8

; 397  : 		messHead=messTemp;

  00094	8b 45 f8	 mov	 eax, DWORD PTR _messTemp$[ebp]
  00097	a3 00 00 00 00	 mov	 DWORD PTR ?messHead@@3PAUMessNode@@A, eax ; messHead

; 398  : 	}

  0009c	eb 8f		 jmp	 SHORT $LN2@ReleaseMes
$LN3@ReleaseMes:

; 399  : 	messTail=NULL;

  0009e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?messTail@@3PAUMessNode@@A, 0 ; messTail

; 400  : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
?ReleaseMessList@@YAXXZ ENDP				; ReleaseMessList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?RemoveMessHead@@YAXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
_messTemp$ = -20					; size = 4
_paramTemp$ = -8					; size = 4
?RemoveMessHead@@YAXXZ PROC				; RemoveMessHead, COMDAT

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 363  : 	register Parameter *paramTemp;
; 364  : 	MessNode	*messTemp;
; 365  : 	if(messHead)

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?messHead@@3PAUMessNode@@A, 0 ; messHead
  00025	74 76		 je	 SHORT $LN1@RemoveMess

; 366  : 	{
; 367  : 		messTemp=messHead->next;

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	89 4d ec	 mov	 DWORD PTR _messTemp$[ebp], ecx
$LN2@RemoveMess:

; 368  : 		while(messHead->param)

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00037	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003b	74 2c		 je	 SHORT $LN3@RemoveMess

; 369  : 		{
; 370  : 			paramTemp=messHead->param->next;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00048	89 55 f8	 mov	 DWORD PTR _paramTemp$[ebp], edx

; 371  : 			ReleaseParam(messHead->param);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?ReleaseParam@@YAXPAUParameter@@@Z ; ReleaseParam
  00059	83 c4 04	 add	 esp, 4

; 372  : 			messHead->param=paramTemp;

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _paramTemp$[ebp]
  00064	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 373  : 		}

  00067	eb c9		 jmp	 SHORT $LN2@RemoveMess
$LN3@RemoveMess:

; 374  : 		delete messHead;

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  0006e	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00074	6a 0c		 push	 12			; 0000000cH
  00076	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00082	83 c4 08	 add	 esp, 8

; 375  : 		if(!messTemp)

  00085	83 7d ec 00	 cmp	 DWORD PTR _messTemp$[ebp], 0
  00089	75 0a		 jne	 SHORT $LN5@RemoveMess

; 376  : 			messTail=NULL;

  0008b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?messTail@@3PAUMessNode@@A, 0 ; messTail
$LN5@RemoveMess:

; 377  : 		messHead=messTemp;

  00095	8b 45 ec	 mov	 eax, DWORD PTR _messTemp$[ebp]
  00098	a3 00 00 00 00	 mov	 DWORD PTR ?messHead@@3PAUMessNode@@A, eax ; messHead
$LN1@RemoveMess:

; 378  : 	}
; 379  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
?RemoveMessHead@@YAXXZ ENDP				; RemoveMessHead
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?ReleaseMessHeadParam@@YAPAUParameter@@XZ
_TEXT	SEGMENT
_paramTemp$ = -8					; size = 4
?ReleaseMessHeadParam@@YAPAUParameter@@XZ PROC		; ReleaseMessHeadParam, COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 352  : 	Parameter *paramTemp=NULL;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _paramTemp$[ebp], 0

; 353  : 	if(messHead&&(messHead->param)){

  00025	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?messHead@@3PAUMessNode@@A, 0 ; messHead
  0002c	74 35		 je	 SHORT $LN2@ReleaseMes
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  00033	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00037	74 2a		 je	 SHORT $LN2@ReleaseMes

; 354  : 		paramTemp=messHead->param->next;

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00044	89 55 f8	 mov	 DWORD PTR _paramTemp$[ebp], edx

; 355  : 		ReleaseParam(messHead->param);

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  0004c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?ReleaseParam@@YAXPAUParameter@@@Z ; ReleaseParam
  00055	83 c4 04	 add	 esp, 4

; 356  : 		messHead->param=paramTemp;

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?messHead@@3PAUMessNode@@A ; messHead
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _paramTemp$[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN2@ReleaseMes:

; 357  : 	}
; 358  : 	return paramTemp;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _paramTemp$[ebp]

; 359  : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?ReleaseMessHeadParam@@YAPAUParameter@@XZ ENDP		; ReleaseMessHeadParam
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?AnalyzeMessage@@YAKPADH@Z
_TEXT	SEGMENT
tv79 = -208						; size = 4
tv65 = -208						; size = 4
_dw$1 = -8						; size = 4
_lpstr$ = 8						; size = 4
_iStrLen$ = 12						; size = 4
?AnalyzeMessage@@YAKPADH@Z PROC				; AnalyzeMessage, COMDAT

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 308  : 	if(0<iStrLen){

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _iStrLen$[ebp], 0
  00022	0f 8e f4 00 00
	00		 jle	 $LN8@AnalyzeMes

; 309  : 		switch(iEncrypt){

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iEncrypt@@3HA ; iEncrypt
  0002d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00033	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR tv65[ebp], 0
  0003a	74 0b		 je	 SHORT $LN9@AnalyzeMes
  0003c	83 bd 30 ff ff
	ff 01		 cmp	 DWORD PTR tv65[ebp], 1
  00043	74 1b		 je	 SHORT $LN10@AnalyzeMes
  00045	eb 30		 jmp	 SHORT $LN2@AnalyzeMes
$LN9@AnalyzeMes:

; 310  : 		case E_INIT:
; 311  : 			ecb_crypt(SZ_ECB,lpstr,iStrLen,DES_DECRYPT);

  00047	6a 01		 push	 1
  00049	8b 45 0c	 mov	 eax, DWORD PTR _iStrLen$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _lpstr$[ebp]
  00050	51		 push	 ecx
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_07LDMIILLH@8904001?$AA@
  00056	e8 00 00 00 00	 call	 ?ecb_crypt@@YAHPAD0II@Z	; ecb_crypt
  0005b	83 c4 10	 add	 esp, 16			; 00000010H

; 312  : 			break;

  0005e	eb 17		 jmp	 SHORT $LN2@AnalyzeMes
$LN10@AnalyzeMes:

; 313  : 		case E_ECB:
; 314  : 			ecb_crypt(P_Key,lpstr,iStrLen,DES_DECRYPT);

  00060	6a 01		 push	 1
  00062	8b 45 0c	 mov	 eax, DWORD PTR _iStrLen$[ebp]
  00065	50		 push	 eax
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _lpstr$[ebp]
  00069	51		 push	 ecx
  0006a	68 00 00 00 00	 push	 OFFSET ?P_Key@@3PADA	; P_Key
  0006f	e8 00 00 00 00	 call	 ?ecb_crypt@@YAHPAD0II@Z	; ecb_crypt
  00074	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@AnalyzeMes:

; 315  : 			break;
; 316  : 		case E_NO:
; 317  : 			break;
; 318  : 		}
; 319  : 		lpstr[iStrLen]='\0';

  00077	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  0007a	03 45 0c	 add	 eax, DWORD PTR _iStrLen$[ebp]
  0007d	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN4@AnalyzeMes:

; 320  : #ifdef _LOG_MSG
; 321  : 		FILE *fp = fopen( "recvtime.txt", "a+" );
; 322  : 		if( fp ) fprintf( fp, "%u RECV %d  %s\n", TimeGetTime(), iStrLen, lpstr );
; 323  : 		if( fp ) fclose( fp );
; 324  : #endif	
; 325  : 		DWORD dw;
; 326  : 		while(0<iStrLen)

  00080	83 7d 0c 00	 cmp	 DWORD PTR _iStrLen$[ebp], 0
  00084	0f 8e 92 00 00
	00		 jle	 $LN8@AnalyzeMes

; 327  : 		{
; 328  : 			switch(nState)

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nState@@3HA ; nState
  0008f	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv79[ebp], eax
  00095	83 bd 30 ff ff
	ff 03		 cmp	 DWORD PTR tv79[ebp], 3
  0009c	77 79		 ja	 SHORT $LN6@AnalyzeMes
  0009e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv79[ebp]
  000a4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN20@AnalyzeMes[ecx*4]
$LN12@AnalyzeMes:

; 329  : 			{
; 330  : 			case READPARAM:
; 331  : 				if(RET_OK!=(dw=HandleParam(lpstr,iStrLen)))

  000ab	8d 45 0c	 lea	 eax, DWORD PTR _iStrLen$[ebp]
  000ae	50		 push	 eax
  000af	8d 4d 08	 lea	 ecx, DWORD PTR _lpstr$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ?HandleParam@@YAKAAPADAAH@Z ; HandleParam
  000b8	83 c4 08	 add	 esp, 8
  000bb	89 45 f8	 mov	 DWORD PTR _dw$1[ebp], eax
  000be	83 7d f8 01	 cmp	 DWORD PTR _dw$1[ebp], 1
  000c2	74 05		 je	 SHORT $LN13@AnalyzeMes

; 332  : 					return dw;

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _dw$1[ebp]
  000c7	eb 58		 jmp	 SHORT $LN1@AnalyzeMes
$LN13@AnalyzeMes:

; 333  : 				break;

  000c9	eb 4c		 jmp	 SHORT $LN6@AnalyzeMes
$LN14@AnalyzeMes:

; 334  : 			case READLEN:
; 335  : 				if(RET_PARAM==HandleLen(lpstr,iStrLen))

  000cb	8d 45 0c	 lea	 eax, DWORD PTR _iStrLen$[ebp]
  000ce	50		 push	 eax
  000cf	8d 4d 08	 lea	 ecx, DWORD PTR _lpstr$[ebp]
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ?HandleLen@@YAKAAPADAAH@Z ; HandleLen
  000d8	83 c4 08	 add	 esp, 8
  000db	83 f8 03	 cmp	 eax, 3
  000de	75 07		 jne	 SHORT $LN15@AnalyzeMes

; 336  : 					return RET_PARAM;

  000e0	b8 03 00 00 00	 mov	 eax, 3
  000e5	eb 3a		 jmp	 SHORT $LN1@AnalyzeMes
$LN15@AnalyzeMes:

; 337  : 				break;

  000e7	eb 2e		 jmp	 SHORT $LN6@AnalyzeMes
$LN16@AnalyzeMes:

; 338  : 			case READHEAD:
; 339  : 				HandleHead(lpstr,iStrLen);

  000e9	8d 45 0c	 lea	 eax, DWORD PTR _iStrLen$[ebp]
  000ec	50		 push	 eax
  000ed	8d 4d 08	 lea	 ecx, DWORD PTR _lpstr$[ebp]
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 ?HandleHead@@YAXAAPADAAH@Z ; HandleHead
  000f6	83 c4 08	 add	 esp, 8

; 340  : 				break;

  000f9	eb 1c		 jmp	 SHORT $LN6@AnalyzeMes
$LN17@AnalyzeMes:

; 341  : 			case ZERO:
; 342  : 				if(RET_MEMORY==HandleZero(lpstr,iStrLen))

  000fb	8d 45 0c	 lea	 eax, DWORD PTR _iStrLen$[ebp]
  000fe	50		 push	 eax
  000ff	8d 4d 08	 lea	 ecx, DWORD PTR _lpstr$[ebp]
  00102	51		 push	 ecx
  00103	e8 00 00 00 00	 call	 ?HandleZero@@YAKAAPADAAH@Z ; HandleZero
  00108	83 c4 08	 add	 esp, 8
  0010b	83 f8 02	 cmp	 eax, 2
  0010e	75 07		 jne	 SHORT $LN6@AnalyzeMes

; 343  : 					return RET_MEMORY;

  00110	b8 02 00 00 00	 mov	 eax, 2
  00115	eb 0a		 jmp	 SHORT $LN1@AnalyzeMes
$LN6@AnalyzeMes:

; 344  : 			}
; 345  : 		}

  00117	e9 64 ff ff ff	 jmp	 $LN4@AnalyzeMes
$LN8@AnalyzeMes:

; 346  : 	}
; 347  : 	return RET_OK;

  0011c	b8 01 00 00 00	 mov	 eax, 1
$LN1@AnalyzeMes:

; 348  : }

  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx
  00124	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0012a	3b ec		 cmp	 ebp, esp
  0012c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
  00135	0f 1f 00	 npad	 3
$LN20@AnalyzeMes:
  00138	00 00 00 00	 DD	 $LN17@AnalyzeMes
  0013c	00 00 00 00	 DD	 $LN16@AnalyzeMes
  00140	00 00 00 00	 DD	 $LN14@AnalyzeMes
  00144	00 00 00 00	 DD	 $LN12@AnalyzeMes
?AnalyzeMessage@@YAKPADH@Z ENDP				; AnalyzeMessage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?GetString@@YAPADAAHPAD@Z
_TEXT	SEGMENT
_iLen$ = 8						; size = 4
_lpstrEncrypt$ = 12					; size = 4
?GetString@@YAPADAAHPAD@Z PROC				; GetString, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 131  : 	ecb_crypt(lpstrEncrypt,szFormatBuf,iFormatLen,DES_ENCRYPT);

  0001e	6a 00		 push	 0
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ?szFormatBuf@@3PADA ; szFormatBuf
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _lpstrEncrypt$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?ecb_crypt@@YAHPAD0II@Z	; ecb_crypt
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 132  : 	iLen=iFormatLen;

  00037	8b 45 08	 mov	 eax, DWORD PTR _iLen$[ebp]
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00040	89 08		 mov	 DWORD PTR [eax], ecx

; 133  : 	return szFormatBuf;

  00042	b8 00 00 00 00	 mov	 eax, OFFSET ?szFormatBuf@@3PADA ; szFormatBuf

; 134  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?GetString@@YAPADAAHPAD@Z ENDP				; GetString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?AddParamForFormat@@YAXDK@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 1
_flag$ = 12						; size = 4
?AddParamForFormat@@YAXDK@Z PROC			; AddParamForFormat, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 118  : 	if(flag & FORMAT_START)

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _flag$[ebp]
  00021	83 e0 01	 and	 eax, 1
  00024	74 05		 je	 SHORT $LN2@AddParamFo

; 119  : 		StartFormat();

  00026	e8 00 00 00 00	 call	 ?StartFormat@@YAXXZ	; StartFormat
$LN2@AddParamFo:

; 120  : 	if(('\\'==ch)||(';'==ch)||('&'==ch))

  0002b	0f be 45 08	 movsx	 eax, BYTE PTR _ch$[ebp]
  0002f	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00032	74 12		 je	 SHORT $LN4@AddParamFo
  00034	0f be 45 08	 movsx	 eax, BYTE PTR _ch$[ebp]
  00038	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  0003b	74 09		 je	 SHORT $LN4@AddParamFo
  0003d	0f be 45 08	 movsx	 eax, BYTE PTR _ch$[ebp]
  00041	83 f8 26	 cmp	 eax, 38			; 00000026H
  00044	75 1b		 jne	 SHORT $LN3@AddParamFo
$LN4@AddParamFo:

; 121  : 		szFormatBuf[iFormatLen++]='\\';

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  0004b	c6 80 00 00 00
	00 5c		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 92 ; 0000005cH
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00058	83 c1 01	 add	 ecx, 1
  0005b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iFormatLen@@3HA, ecx ; iFormatLen
$LN3@AddParamFo:

; 122  : 	szFormatBuf[iFormatLen++]=ch;

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00066	8a 4d 08	 mov	 cl, BYTE PTR _ch$[ebp]
  00069	88 88 00 00 00
	00		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], cl
  0006f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00075	83 c2 01	 add	 edx, 1
  00078	89 15 00 00 00
	00		 mov	 DWORD PTR ?iFormatLen@@3HA, edx ; iFormatLen

; 123  : 	szFormatBuf[iFormatLen++]=';';

  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00083	c6 80 00 00 00
	00 3b		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 59 ; 0000003bH
  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00090	83 c1 01	 add	 ecx, 1
  00093	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iFormatLen@@3HA, ecx ; iFormatLen

; 124  : 	FormatAdd();

  00099	e8 00 00 00 00	 call	 ?FormatAdd@@YAXXZ	; FormatAdd

; 125  : 	if(flag & FORMAT_FINISH)

  0009e	8b 45 0c	 mov	 eax, DWORD PTR _flag$[ebp]
  000a1	83 e0 02	 and	 eax, 2
  000a4	74 05		 je	 SHORT $LN1@AddParamFo

; 126  : 		FinishFormat();

  000a6	e8 00 00 00 00	 call	 ?FinishFormat@@YAXXZ	; FinishFormat
$LN1@AddParamFo:

; 127  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
?AddParamForFormat@@YAXDK@Z ENDP			; AddParamForFormat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.cpp
;	COMDAT ?AddParamForFormat@@YAXPADHK@Z
_TEXT	SEGMENT
_j$1 = -8						; size = 4
_lpstr$ = 8						; size = 4
_iLen$ = 12						; size = 4
_flag$ = 16						; size = 4
?AddParamForFormat@@YAXPADHK@Z PROC			; AddParamForFormat, COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 103  : 	if(flag & FORMAT_START)

  0001e	8b 45 10	 mov	 eax, DWORD PTR _flag$[ebp]
  00021	83 e0 01	 and	 eax, 1
  00024	74 05		 je	 SHORT $LN5@AddParamFo

; 104  : 		StartFormat();

  00026	e8 00 00 00 00	 call	 ?StartFormat@@YAXXZ	; StartFormat
$LN5@AddParamFo:

; 105  : 	for(int j=0;j<iLen;j++){

  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$1[ebp], 0
  00032	eb 09		 jmp	 SHORT $LN4@AddParamFo
$LN2@AddParamFo:
  00034	8b 45 f8	 mov	 eax, DWORD PTR _j$1[ebp]
  00037	83 c0 01	 add	 eax, 1
  0003a	89 45 f8	 mov	 DWORD PTR _j$1[ebp], eax
$LN4@AddParamFo:
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _j$1[ebp]
  00040	3b 45 0c	 cmp	 eax, DWORD PTR _iLen$[ebp]
  00043	7d 68		 jge	 SHORT $LN3@AddParamFo

; 106  : 		if(('\\'==lpstr[j])||(';'==lpstr[j])||('&'==lpstr[j]))

  00045	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  00048	03 45 f8	 add	 eax, DWORD PTR _j$1[ebp]
  0004b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0004e	83 f9 5c	 cmp	 ecx, 92			; 0000005cH
  00051	74 1c		 je	 SHORT $LN7@AddParamFo
  00053	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  00056	03 45 f8	 add	 eax, DWORD PTR _j$1[ebp]
  00059	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0005c	83 f9 3b	 cmp	 ecx, 59			; 0000003bH
  0005f	74 0e		 je	 SHORT $LN7@AddParamFo
  00061	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  00064	03 45 f8	 add	 eax, DWORD PTR _j$1[ebp]
  00067	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0006a	83 f9 26	 cmp	 ecx, 38			; 00000026H
  0006d	75 1b		 jne	 SHORT $LN6@AddParamFo
$LN7@AddParamFo:

; 107  : 			szFormatBuf[iFormatLen++]='\\';

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00074	c6 80 00 00 00
	00 5c		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 92 ; 0000005cH
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00081	83 c1 01	 add	 ecx, 1
  00084	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iFormatLen@@3HA, ecx ; iFormatLen
$LN6@AddParamFo:

; 108  : 		szFormatBuf[iFormatLen++]=lpstr[j];

  0008a	8b 45 08	 mov	 eax, DWORD PTR _lpstr$[ebp]
  0008d	03 45 f8	 add	 eax, DWORD PTR _j$1[ebp]
  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  00096	8a 10		 mov	 dl, BYTE PTR [eax]
  00098	88 91 00 00 00
	00		 mov	 BYTE PTR ?szFormatBuf@@3PADA[ecx], dl
  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  000a3	83 c0 01	 add	 eax, 1
  000a6	a3 00 00 00 00	 mov	 DWORD PTR ?iFormatLen@@3HA, eax ; iFormatLen

; 109  : 	}

  000ab	eb 87		 jmp	 SHORT $LN2@AddParamFo
$LN3@AddParamFo:

; 110  : 	szFormatBuf[iFormatLen++]=';';

  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  000b2	c6 80 00 00 00
	00 3b		 mov	 BYTE PTR ?szFormatBuf@@3PADA[eax], 59 ; 0000003bH
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iFormatLen@@3HA ; iFormatLen
  000bf	83 c1 01	 add	 ecx, 1
  000c2	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iFormatLen@@3HA, ecx ; iFormatLen

; 111  : 	FormatAdd();

  000c8	e8 00 00 00 00	 call	 ?FormatAdd@@YAXXZ	; FormatAdd

; 112  : 	if(flag & FORMAT_FINISH)

  000cd	8b 45 10	 mov	 eax, DWORD PTR _flag$[ebp]
  000d0	83 e0 02	 and	 eax, 2
  000d3	74 05		 je	 SHORT $LN1@AddParamFo

; 113  : 		FinishFormat();

  000d5	e8 00 00 00 00	 call	 ?FinishFormat@@YAXXZ	; FinishFormat
$LN1@AddParamFo:

; 114  : }

  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000e3	3b ec		 cmp	 ebp, esp
  000e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
?AddParamForFormat@@YAXPADHK@Z ENDP			; AddParamForFormat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.h
;	COMDAT ??0MessNode@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0MessNode@@QAE@XZ PROC				; MessNode::MessNode, COMDAT
; _this$ = ecx

; 102  : 	MessNode(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 		param=NULL;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 104  : 		next=NULL;}

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0MessNode@@QAE@XZ ENDP				; MessNode::MessNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\message.h
;	COMDAT ??0Parameter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Parameter@@QAE@XZ PROC				; Parameter::Parameter, COMDAT
; _this$ = ecx

; 92   : 	Parameter(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 		lpstrParam=NULL;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 94   : 		next=NULL;}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0Parameter@@QAE@XZ ENDP				; Parameter::Parameter
_TEXT	ENDS
END
