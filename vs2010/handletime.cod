; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Administrator\Desktop\????? ??\????? ??\Client Source Code\system\handletime.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?SaTime@@3UtagLSTIME@@A				; SaTime
PUBLIC	?serverTime@@3JA				; serverTime
PUBLIC	?FirstTime@@3JA					; FirstTime
PUBLIC	?SaTimeZoneNo@@3HA				; SaTimeZoneNo
PUBLIC	?TimeZonePalChangeFlag@@3HA			; TimeZonePalChangeFlag
_BSS	SEGMENT
?SaTime@@3UtagLSTIME@@A DB 0cH DUP (?)			; SaTime
?serverTime@@3JA DD 01H DUP (?)				; serverTime
?FirstTime@@3JA DD 01H DUP (?)				; FirstTime
?SaTimeZoneNo@@3HA DD 01H DUP (?)			; SaTimeZoneNo
?TimeZonePalChangeFlag@@3HA DD 01H DUP (?)		; TimeZonePalChangeFlag
_BSS	ENDS
_DATA	SEGMENT
?era@@3JA DD	03667cae1H				; era
_DATA	ENDS
PUBLIC	?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z		; RealTimeToSATime
PUBLIC	?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z ; getLSTime
PUBLIC	?TimeZoneProc@@YAXXZ				; TimeZoneProc
PUBLIC	?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z	; LSTimeToRealTime
EXTRN	?TimeGetTime@@YAIXZ:PROC			; TimeGetTime
EXTRN	?PaletteChange@@YAXHH@Z:PROC			; PaletteChange
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\handletime.cpp
;	COMDAT ?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z
_TEXT	SEGMENT
_lstime$ = 8						; size = 4
_t$ = 12						; size = 4
?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z PROC		; LSTimeToRealTime, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 99   : 	*t=(long)(

  0001e	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  00021	6b 48 08 64	 imul	 ecx, DWORD PTR [eax+8], 100
  00025	8b 55 08	 mov	 edx, DWORD PTR _lstime$[ebp]
  00028	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0002b	c1 e1 0a	 shl	 ecx, 10			; 0000000aH
  0002e	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  00031	03 08		 add	 ecx, DWORD PTR [eax]
  00033	69 c9 c2 01 00
	00		 imul	 ecx, ecx, 450
  00039	8b 55 0c	 mov	 edx, DWORD PTR _t$[ebp]
  0003c	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  :         ( lstime->hour*LSTIME_DAYS_PER_YEAR+lstime->day) /* ?? */
; 101  :                *LSTIME_HOURS_PER_DAY
; 102  : 
; 103  :         +     lstime->year)
; 104  :         /*??????????????????nakamura      */
; 105  : 
; 106  : 
; 107  :         *450;
; 108  : 	return;
; 109  : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?LSTimeToRealTime@@YAXPAUtagLSTIME@@PAJ@Z ENDP		; LSTimeToRealTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\handletime.cpp
;	COMDAT ?TimeZoneProc@@YAXXZ
_TEXT	SEGMENT
_timeZoneNo$ = -8					; size = 4
?TimeZoneProc@@YAXXZ PROC				; TimeZoneProc, COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 134  : 	int	timeZoneNo;
; 135  : 	//??????????§Æ?¥x?
; 136  : 	timeZoneNo = getLSTime ( &SaTime );

  0001e	68 00 00 00 00	 push	 OFFSET ?SaTime@@3UtagLSTIME@@A ; SaTime
  00023	e8 00 00 00 00	 call	 ?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z ; getLSTime
  00028	83 c4 04	 add	 esp, 4
  0002b	89 45 f8	 mov	 DWORD PTR _timeZoneNo$[ebp], eax

; 137  : 	// ??¢q?¨Á????
; 138  : 	if( SaTimeZoneNo != timeZoneNo ){

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SaTimeZoneNo@@3HA ; SaTimeZoneNo
  00033	3b 45 f8	 cmp	 eax, DWORD PTR _timeZoneNo$[ebp]
  00036	74 24		 je	 SHORT $LN1@TimeZonePr

; 139  : 		SaTimeZoneNo = timeZoneNo;	// ??¢q?ýø

  00038	8b 45 f8	 mov	 eax, DWORD PTR _timeZoneNo$[ebp]
  0003b	a3 00 00 00 00	 mov	 DWORD PTR ?SaTimeZoneNo@@3HA, eax ; SaTimeZoneNo

; 140  : 		// ??¢q????????????
; 141  : 		if( TimeZonePalChangeFlag == TRUE ){

  00040	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?TimeZonePalChangeFlag@@3HA, 1 ; TimeZonePalChangeFlag
  00047	75 13		 jne	 SHORT $LN1@TimeZonePr

; 142  : 			PaletteChange( SaTimeZoneNo, PAL_CHANGE_TIME );// ????????

  00049	68 10 0e 00 00	 push	 3600			; 00000e10H
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SaTimeZoneNo@@3HA ; SaTimeZoneNo
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?PaletteChange@@YAXHH@Z	; PaletteChange
  00059	83 c4 08	 add	 esp, 8
$LN1@TimeZonePr:

; 143  : 		}
; 144  : 	}
; 145  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?TimeZoneProc@@YAXXZ ENDP				; TimeZoneProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\handletime.cpp
;	COMDAT ?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z
_TEXT	SEGMENT
_lstime$ = 8						; size = 4
?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z PROC	; getLSTime, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 118  : 	if (NIGHT_TO_MORNING < lstime->hour
; 119  :         && lstime->hour <= MORNING_TO_NOON)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  00021	81 78 08 bc 02
	00 00		 cmp	 DWORD PTR [eax+8], 700	; 000002bcH
  00028	7e 15		 jle	 SHORT $LN2@getLSTime
  0002a	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  0002d	81 78 08 a2 03
	00 00		 cmp	 DWORD PTR [eax+8], 930	; 000003a2H
  00034	7f 09		 jg	 SHORT $LN2@getLSTime

; 120  : 		return LS_MORNING;

  00036	b8 03 00 00 00	 mov	 eax, 3
  0003b	eb 46		 jmp	 SHORT $LN1@getLSTime

; 121  : 	else if(NOON_TO_EVENING < lstime->hour

  0003d	eb 44		 jmp	 SHORT $LN1@getLSTime
$LN2@getLSTime:

; 122  :             && lstime->hour <= EVENING_TO_NIGHT)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  00042	81 78 08 c8 00
	00 00		 cmp	 DWORD PTR [eax+8], 200	; 000000c8H
  00049	7e 15		 jle	 SHORT $LN4@getLSTime
  0004b	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  0004e	81 78 08 2c 01
	00 00		 cmp	 DWORD PTR [eax+8], 300	; 0000012cH
  00055	7f 09		 jg	 SHORT $LN4@getLSTime

; 123  : 		return LS_EVENING;

  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	eb 25		 jmp	 SHORT $LN1@getLSTime

; 124  : 	else if(EVENING_TO_NIGHT < lstime->hour

  0005e	eb 23		 jmp	 SHORT $LN1@getLSTime
$LN4@getLSTime:

; 125  :             && lstime->hour <= NIGHT_TO_MORNING)

  00060	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  00063	81 78 08 2c 01
	00 00		 cmp	 DWORD PTR [eax+8], 300	; 0000012cH
  0006a	7e 15		 jle	 SHORT $LN6@getLSTime
  0006c	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  0006f	81 78 08 bc 02
	00 00		 cmp	 DWORD PTR [eax+8], 700	; 000002bcH
  00076	7f 09		 jg	 SHORT $LN6@getLSTime

; 126  : 		return LS_NIGHT;

  00078	b8 02 00 00 00	 mov	 eax, 2
  0007d	eb 04		 jmp	 SHORT $LN1@getLSTime

; 127  : 	else

  0007f	eb 02		 jmp	 SHORT $LN1@getLSTime
$LN6@getLSTime:

; 128  : 		return LS_NOON;

  00081	33 c0		 xor	 eax, eax
$LN1@getLSTime:

; 129  : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?getLSTime@@YA?AW4LSTIME_SECTION@@PAUtagLSTIME@@@Z ENDP	; getLSTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\system\handletime.cpp
;	COMDAT ?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z
_TEXT	SEGMENT
_lsdays$ = -20						; size = 4
_lsseconds$ = -8					; size = 4
_lstime$ = 8						; size = 4
?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z PROC		; RealTimeToSATime, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 68   : 	long lsseconds; /* LS?¦g???¥ø? */
; 69   :     long lsdays; /* LS?¦g???¦T? */
; 70   : 
; 71   : 	//cary Ê®Îå
; 72   : 	lsseconds = (TimeGetTime()-FirstTime)/1000 + serverTime - era;

  0001e	e8 00 00 00 00	 call	 ?TimeGetTime@@YAIXZ	; TimeGetTime
  00023	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?FirstTime@@3JA ; FirstTime
  00029	33 d2		 xor	 edx, edx
  0002b	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00030	f7 f1		 div	 ecx
  00032	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?serverTime@@3JA ; serverTime
  00038	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?era@@3JA
  0003e	89 45 f8	 mov	 DWORD PTR _lsseconds$[ebp], eax

; 73   : 
; 74   :     /* ?¦g???¥ø??1¦g???¥ø??????¦g??? */
; 75   : 	lstime->year = (int)( lsseconds/(LSTIME_SECONDS_PER_DAY*LSTIME_DAYS_PER_YEAR) );

  00041	8b 45 f8	 mov	 eax, DWORD PTR _lsseconds$[ebp]
  00044	99		 cdq
  00045	b9 60 3d 08 00	 mov	 ecx, 540000		; 00083d60H
  0004a	f7 f9		 idiv	 ecx
  0004c	8b 55 08	 mov	 edx, DWORD PTR _lstime$[ebp]
  0004f	89 02		 mov	 DWORD PTR [edx], eax

; 76   : 
; 77   :     lsdays = lsseconds/LSTIME_SECONDS_PER_DAY;/* ???¦g???¦T???úÜ?? */

  00051	8b 45 f8	 mov	 eax, DWORD PTR _lsseconds$[ebp]
  00054	99		 cdq
  00055	b9 18 15 00 00	 mov	 ecx, 5400		; 00001518H
  0005a	f7 f9		 idiv	 ecx
  0005c	89 45 ec	 mov	 DWORD PTR _lsdays$[ebp], eax

; 78   : 	lstime->day  = lsdays % LSTIME_DAYS_PER_YEAR;/* ¦g????¦T?????????¦T*/

  0005f	8b 45 ec	 mov	 eax, DWORD PTR _lsdays$[ebp]
  00062	99		 cdq
  00063	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00068	f7 f9		 idiv	 ecx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _lstime$[ebp]
  0006d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 79   : 
; 80   : 
; 81   : 
; 82   :     /*(750*12)¥ø?1¦T*/
; 83   :     lstime->hour = (int)(lsseconds % LSTIME_SECONDS_PER_DAY )

  00070	8b 45 f8	 mov	 eax, DWORD PTR _lsseconds$[ebp]
  00073	99		 cdq
  00074	b9 18 15 00 00	 mov	 ecx, 5400		; 00001518H
  00079	f7 f9		 idiv	 ecx
  0007b	c1 e2 0a	 shl	 edx, 10			; 0000000aH
  0007e	8b c2		 mov	 eax, edx
  00080	99		 cdq
  00081	b9 18 15 00 00	 mov	 ecx, 5400		; 00001518H
  00086	f7 f9		 idiv	 ecx
  00088	8b 55 08	 mov	 edx, DWORD PTR _lstime$[ebp]
  0008b	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 84   : /* ???????¦T?úð??????¥ø????? */
; 85   :         * LSTIME_HOURS_PER_DAY / LSTIME_SECONDS_PER_DAY;
; 86   :     /* ?¦T????¥ø????????¦T????????????????
; 87   :      ????????*/
; 88   : 
; 89   : 	return;
; 90   : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?RealTimeToSATime@@YAXPAUtagLSTIME@@@Z ENDP		; RealTimeToSATime
_TEXT	ENDS
END
