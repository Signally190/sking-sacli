; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Administrator\Desktop\????? ??\????? ??\Client Source Code\wgs\descrypt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Keys@@3PAY01KA					; Keys
PUBLIC	?Psboxes@@3PAY0EA@KA				; Psboxes
PUBLIC	?Ip_l@@3PAKA					; Ip_l
PUBLIC	?Ip_r@@3PAKA					; Ip_r
PUBLIC	?Ip_inv_l@@3PAKA				; Ip_inv_l
PUBLIC	?Ip_inv_r@@3PAKA				; Ip_inv_r
_BSS	SEGMENT
?Keys@@3PAY01KA DD 020H DUP (?)				; Keys
_BSS	ENDS
_DATA	SEGMENT
?nshifts@?1??des_setkey@@YAXPAD@Z@4PADA DB 01H		; `des_setkey'::`2'::nshifts
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
?pc1@?1??des_setkey@@YAXPAD@Z@4PAEA DB 030H		; `des_setkey'::`2'::pc1
	DB	028H
	DB	020H
	DB	00H
	DB	04H
	DB	0cH
	DB	014H
	DB	031H
	DB	029H
	DB	021H
	DB	01H
	DB	05H
	DB	0dH
	DB	015H
	DB	032H
	DB	02aH
	DB	022H
	DB	02H
	DB	06H
	DB	0eH
	DB	016H
	DB	033H
	DB	02bH
	DB	023H
	DB	03H
	DB	07H
	DB	0fH
	DB	017H
	DB	034H
	DB	02cH
	DB	024H
	DB	01cH
	DB	08H
	DB	010H
	DB	018H
	DB	035H
	DB	02dH
	DB	025H
	DB	01dH
	DB	09H
	DB	011H
	DB	019H
	DB	036H
	DB	02eH
	DB	026H
	DB	01eH
	DB	0aH
	DB	012H
	DB	01aH
	DB	037H
	DB	02fH
	DB	027H
	DB	01fH
	DB	0bH
	DB	013H
	DB	01bH
?pc2_c@?1??des_setkey@@YAXPAD@Z@4PAEA DB 0eH		; `des_setkey'::`2'::pc2_c
	DB	0bH
	DB	011H
	DB	04H
	DB	01bH
	DB	017H
	DB	019H
	DB	00H
	DB	0dH
	DB	016H
	DB	07H
	DB	012H
	DB	05H
	DB	09H
	DB	010H
	DB	018H
	DB	02H
	DB	014H
	DB	0cH
	DB	015H
	DB	01H
	DB	08H
	DB	0fH
	DB	01aH
?pc2_d@?1??des_setkey@@YAXPAD@Z@4PAEA DB 0fH		; `des_setkey'::`2'::pc2_d
	DB	04H
	DB	019H
	DB	013H
	DB	09H
	DB	01H
	DB	01aH
	DB	010H
	DB	05H
	DB	0bH
	DB	017H
	DB	08H
	DB	0cH
	DB	07H
	DB	011H
	DB	00H
	DB	016H
	DB	03H
	DB	0aH
	DB	0eH
	DB	06H
	DB	014H
	DB	01bH
	DB	018H
?Psboxes@@3PAY0EA@KA DD 0808200H			; Psboxes
	DD	00H
	DD	08000H
	DD	0808202H
	DD	0808002H
	DD	08202H
	DD	02H
	DD	08000H
	DD	0200H
	DD	0808200H
	DD	0808202H
	DD	0200H
	DD	0800202H
	DD	0808002H
	DD	0800000H
	DD	02H
	DD	0202H
	DD	0800200H
	DD	0800200H
	DD	08200H
	DD	08200H
	DD	0808000H
	DD	0808000H
	DD	0800202H
	DD	08002H
	DD	0800002H
	DD	0800002H
	DD	08002H
	DD	00H
	DD	0202H
	DD	08202H
	DD	0800000H
	DD	08000H
	DD	0808202H
	DD	02H
	DD	0808000H
	DD	0808200H
	DD	0800000H
	DD	0800000H
	DD	0200H
	DD	0808002H
	DD	08000H
	DD	08200H
	DD	0800002H
	DD	0200H
	DD	02H
	DD	0800202H
	DD	08202H
	DD	0808202H
	DD	08002H
	DD	0808000H
	DD	0800202H
	DD	0800002H
	DD	0202H
	DD	08202H
	DD	0808200H
	DD	0202H
	DD	0800200H
	DD	0800200H
	DD	00H
	DD	08002H
	DD	08200H
	DD	00H
	DD	0808002H
	DD	040084010H
	DD	040004000H
	DD	04000H
	DD	084010H
	DD	080000H
	DD	010H
	DD	040080010H
	DD	040004010H
	DD	040000010H
	DD	040084010H
	DD	040084000H
	DD	040000000H
	DD	040004000H
	DD	080000H
	DD	010H
	DD	040080010H
	DD	084000H
	DD	080010H
	DD	040004010H
	DD	00H
	DD	040000000H
	DD	04000H
	DD	084010H
	DD	040080000H
	DD	080010H
	DD	040000010H
	DD	00H
	DD	084000H
	DD	04010H
	DD	040084000H
	DD	040080000H
	DD	04010H
	DD	00H
	DD	084010H
	DD	040080010H
	DD	080000H
	DD	040004010H
	DD	040080000H
	DD	040084000H
	DD	04000H
	DD	040080000H
	DD	040004000H
	DD	010H
	DD	040084010H
	DD	084010H
	DD	010H
	DD	04000H
	DD	040000000H
	DD	04010H
	DD	040084000H
	DD	080000H
	DD	040000010H
	DD	080010H
	DD	040004010H
	DD	040000010H
	DD	080010H
	DD	084000H
	DD	00H
	DD	040004000H
	DD	04010H
	DD	040000000H
	DD	040080010H
	DD	040084010H
	DD	084000H
	DD	0104H
	DD	04010100H
	DD	00H
	DD	04010004H
	DD	04000100H
	DD	00H
	DD	010104H
	DD	04000100H
	DD	010004H
	DD	04000004H
	DD	04000004H
	DD	010000H
	DD	04010104H
	DD	010004H
	DD	04010000H
	DD	0104H
	DD	04000000H
	DD	04H
	DD	04010100H
	DD	0100H
	DD	010100H
	DD	04010000H
	DD	04010004H
	DD	010104H
	DD	04000104H
	DD	010100H
	DD	010000H
	DD	04000104H
	DD	04H
	DD	04010104H
	DD	0100H
	DD	04000000H
	DD	04010100H
	DD	04000000H
	DD	010004H
	DD	0104H
	DD	010000H
	DD	04010100H
	DD	04000100H
	DD	00H
	DD	0100H
	DD	010004H
	DD	04010104H
	DD	04000100H
	DD	04000004H
	DD	0100H
	DD	00H
	DD	04010004H
	DD	04000104H
	DD	010000H
	DD	04000000H
	DD	04010104H
	DD	04H
	DD	010104H
	DD	010100H
	DD	04000004H
	DD	04010000H
	DD	04000104H
	DD	0104H
	DD	04010000H
	DD	010104H
	DD	04H
	DD	04010004H
	DD	010100H
	DD	080401000H
	DD	080001040H
	DD	080001040H
	DD	040H
	DD	0401040H
	DD	080400040H
	DD	080400000H
	DD	080001000H
	DD	00H
	DD	0401000H
	DD	0401000H
	DD	080401040H
	DD	080000040H
	DD	00H
	DD	0400040H
	DD	080400000H
	DD	080000000H
	DD	01000H
	DD	0400000H
	DD	080401000H
	DD	040H
	DD	0400000H
	DD	080001000H
	DD	01040H
	DD	080400040H
	DD	080000000H
	DD	01040H
	DD	0400040H
	DD	01000H
	DD	0401040H
	DD	080401040H
	DD	080000040H
	DD	0400040H
	DD	080400000H
	DD	0401000H
	DD	080401040H
	DD	080000040H
	DD	00H
	DD	00H
	DD	0401000H
	DD	01040H
	DD	0400040H
	DD	080400040H
	DD	080000000H
	DD	080401000H
	DD	080001040H
	DD	080001040H
	DD	040H
	DD	080401040H
	DD	080000040H
	DD	080000000H
	DD	01000H
	DD	080400000H
	DD	080001000H
	DD	0401040H
	DD	080400040H
	DD	080001000H
	DD	01040H
	DD	0400000H
	DD	080401000H
	DD	040H
	DD	0400000H
	DD	01000H
	DD	0401040H
	DD	080H
	DD	01040080H
	DD	01040000H
	DD	021000080H
	DD	040000H
	DD	080H
	DD	020000000H
	DD	01040000H
	DD	020040080H
	DD	040000H
	DD	01000080H
	DD	020040080H
	DD	021000080H
	DD	021040000H
	DD	040080H
	DD	020000000H
	DD	01000000H
	DD	020040000H
	DD	020040000H
	DD	00H
	DD	020000080H
	DD	021040080H
	DD	021040080H
	DD	01000080H
	DD	021040000H
	DD	020000080H
	DD	00H
	DD	021000000H
	DD	01040080H
	DD	01000000H
	DD	021000000H
	DD	040080H
	DD	040000H
	DD	021000080H
	DD	080H
	DD	01000000H
	DD	020000000H
	DD	01040000H
	DD	021000080H
	DD	020040080H
	DD	01000080H
	DD	020000000H
	DD	021040000H
	DD	01040080H
	DD	020040080H
	DD	080H
	DD	01000000H
	DD	021040000H
	DD	021040080H
	DD	040080H
	DD	021000000H
	DD	021040080H
	DD	01040000H
	DD	00H
	DD	020040000H
	DD	021000000H
	DD	040080H
	DD	01000080H
	DD	020000080H
	DD	040000H
	DD	00H
	DD	020040000H
	DD	01040080H
	DD	020000080H
	DD	010000008H
	DD	010200000H
	DD	02000H
	DD	010202008H
	DD	010200000H
	DD	08H
	DD	010202008H
	DD	0200000H
	DD	010002000H
	DD	0202008H
	DD	0200000H
	DD	010000008H
	DD	0200008H
	DD	010002000H
	DD	010000000H
	DD	02008H
	DD	00H
	DD	0200008H
	DD	010002008H
	DD	02000H
	DD	0202000H
	DD	010002008H
	DD	08H
	DD	010200008H
	DD	010200008H
	DD	00H
	DD	0202008H
	DD	010202000H
	DD	02008H
	DD	0202000H
	DD	010202000H
	DD	010000000H
	DD	010002000H
	DD	08H
	DD	010200008H
	DD	0202000H
	DD	010202008H
	DD	0200000H
	DD	02008H
	DD	010000008H
	DD	0200000H
	DD	010002000H
	DD	010000000H
	DD	02008H
	DD	010000008H
	DD	010202008H
	DD	0202000H
	DD	010200000H
	DD	0202008H
	DD	010202000H
	DD	00H
	DD	010200008H
	DD	08H
	DD	02000H
	DD	010200000H
	DD	0202008H
	DD	02000H
	DD	0200008H
	DD	010002008H
	DD	00H
	DD	010202000H
	DD	010000000H
	DD	0200008H
	DD	010002008H
	DD	0100000H
	DD	02100001H
	DD	02000401H
	DD	00H
	DD	0400H
	DD	02000401H
	DD	0100401H
	DD	02100400H
	DD	02100401H
	DD	0100000H
	DD	00H
	DD	02000001H
	DD	01H
	DD	02000000H
	DD	02100001H
	DD	0401H
	DD	02000400H
	DD	0100401H
	DD	0100001H
	DD	02000400H
	DD	02000001H
	DD	02100000H
	DD	02100400H
	DD	0100001H
	DD	02100000H
	DD	0400H
	DD	0401H
	DD	02100401H
	DD	0100400H
	DD	01H
	DD	02000000H
	DD	0100400H
	DD	02000000H
	DD	0100400H
	DD	0100000H
	DD	02000401H
	DD	02000401H
	DD	02100001H
	DD	02100001H
	DD	01H
	DD	0100001H
	DD	02000000H
	DD	02000400H
	DD	0100000H
	DD	02100400H
	DD	0401H
	DD	0100401H
	DD	02100400H
	DD	0401H
	DD	02000001H
	DD	02100401H
	DD	02100000H
	DD	0100400H
	DD	00H
	DD	01H
	DD	02100401H
	DD	00H
	DD	0100401H
	DD	02100000H
	DD	0400H
	DD	02000001H
	DD	02000400H
	DD	0400H
	DD	0100001H
	DD	08000820H
	DD	0800H
	DD	020000H
	DD	08020820H
	DD	08000000H
	DD	08000820H
	DD	020H
	DD	08000000H
	DD	020020H
	DD	08020000H
	DD	08020820H
	DD	020800H
	DD	08020800H
	DD	020820H
	DD	0800H
	DD	020H
	DD	08020000H
	DD	08000020H
	DD	08000800H
	DD	0820H
	DD	020800H
	DD	020020H
	DD	08020020H
	DD	08020800H
	DD	0820H
	DD	00H
	DD	00H
	DD	08020020H
	DD	08000020H
	DD	08000800H
	DD	020820H
	DD	020000H
	DD	020820H
	DD	020000H
	DD	08020800H
	DD	0800H
	DD	020H
	DD	08020020H
	DD	0800H
	DD	020820H
	DD	08000800H
	DD	020H
	DD	08000020H
	DD	08020000H
	DD	08020020H
	DD	08000000H
	DD	020000H
	DD	08000820H
	DD	00H
	DD	08020820H
	DD	020020H
	DD	08000020H
	DD	08020000H
	DD	08000800H
	DD	08000820H
	DD	00H
	DD	08020820H
	DD	020800H
	DD	020800H
	DD	0820H
	DD	0820H
	DD	020020H
	DD	08000000H
	DD	08020800H
?Ip_l@@3PAKA DD	00H					; Ip_l
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	00H
	DD	080H
	DD	00H
	DD	080H
	DD	08000H
	DD	08080H
	DD	08000H
	DD	08080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	0800000H
	DD	0800080H
	DD	0800000H
	DD	0800080H
	DD	0808000H
	DD	0808080H
	DD	0808000H
	DD	0808080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080000000H
	DD	080000080H
	DD	080000000H
	DD	080000080H
	DD	080008000H
	DD	080008080H
	DD	080008000H
	DD	080008080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
	DD	080800000H
	DD	080800080H
	DD	080800000H
	DD	080800080H
	DD	080808000H
	DD	080808080H
	DD	080808000H
	DD	080808080H
?Ip_r@@3PAKA DD	00H					; Ip_r
	DD	00H
	DD	080H
	DD	080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	00H
	DD	00H
	DD	080H
	DD	080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	08000H
	DD	08000H
	DD	08080H
	DD	08080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0800000H
	DD	0800000H
	DD	0800080H
	DD	0800080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	0808000H
	DD	0808000H
	DD	0808080H
	DD	0808080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080000000H
	DD	080000000H
	DD	080000080H
	DD	080000080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080008000H
	DD	080008000H
	DD	080008080H
	DD	080008080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080800000H
	DD	080800000H
	DD	080800080H
	DD	080800080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
	DD	080808000H
	DD	080808000H
	DD	080808080H
	DD	080808080H
?Ip_inv_l@@3PAKA DD 00H					; Ip_inv_l
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
	DD	00H
	DD	080000000H
	DD	0800000H
	DD	080800000H
	DD	08000H
	DD	080008000H
	DD	0808000H
	DD	080808000H
	DD	080H
	DD	080000080H
	DD	0800080H
	DD	080800080H
	DD	08080H
	DD	080008080H
	DD	0808080H
	DD	080808080H
?Ip_inv_r@@3PAKA DD 00H					; Ip_inv_r
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	080000000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	0800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	080800000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	08000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	0808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080808000H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	080000080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	0800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	080800080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	08080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	080008080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	0808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
	DD	080808080H
_DATA	ENDS
PUBLIC	?ecb_crypt@@YAHPAD0II@Z				; ecb_crypt
PUBLIC	?cbc_crypt@@YAHPAD0II0@Z			; cbc_crypt
PUBLIC	?des_setparity@@YAXPAD@Z			; des_setparity
PUBLIC	?des_setkey@@YAXPAD@Z				; des_setkey
PUBLIC	?des_crypt@@YAXPADH@Z				; des_crypt
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\descrypt.cpp
;	COMDAT ?des_crypt@@YAXPADH@Z
_TEXT	SEGMENT
_x2$1 = -140						; size = 4
_x1$2 = -128						; size = 4
_v$3 = -116						; size = 4
_x2$4 = -104						; size = 4
_x1$5 = -92						; size = 4
_v$6 = -80						; size = 4
_i$ = -68						; size = 4
_s$ = -56						; size = 4
_r2$ = -44						; size = 4
_l2$ = -32						; size = 4
_r$ = -20						; size = 4
_l$ = -8						; size = 4
_block$ = 8						; size = 4
_dflag$ = 12						; size = 4
?des_crypt@@YAXPADH@Z PROC				; des_crypt, COMDAT

; 1436 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd b0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-336]
  00012	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1437 : 	ulong l, r, l2, r2;
; 1438 : 	uchar *s;
; 1439 : 	int i;
; 1440 : 
; 1441 : 	/* Initial Transpose */
; 1442 : 	s = (uchar *)block;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00021	89 45 c8	 mov	 DWORD PTR _s$[ebp], eax

; 1443 : 	l = (((((((Ip_l[s[0]] >> 1

  00024	b8 01 00 00 00	 mov	 eax, 1
  00029	6b c8 00	 imul	 ecx, eax, 0
  0002c	8b 55 c8	 mov	 edx, DWORD PTR _s$[ebp]
  0002f	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00033	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ip_l@@3PAKA[eax*4]
  0003a	d1 e9		 shr	 ecx, 1
  0003c	ba 01 00 00 00	 mov	 edx, 1
  00041	c1 e2 00	 shl	 edx, 0
  00044	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  00047	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  0004b	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_l@@3PAKA[edx*4]
  00052	d1 e9		 shr	 ecx, 1
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	d1 e0		 shl	 eax, 1
  0005b	8b 55 c8	 mov	 edx, DWORD PTR _s$[ebp]
  0005e	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00062	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_l@@3PAKA[eax*4]
  00069	d1 e9		 shr	 ecx, 1
  0006b	ba 01 00 00 00	 mov	 edx, 1
  00070	6b c2 03	 imul	 eax, edx, 3
  00073	8b 55 c8	 mov	 edx, DWORD PTR _s$[ebp]
  00076	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  0007a	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_l@@3PAKA[eax*4]
  00081	d1 e9		 shr	 ecx, 1
  00083	ba 01 00 00 00	 mov	 edx, 1
  00088	c1 e2 02	 shl	 edx, 2
  0008b	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  0008e	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  00092	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_l@@3PAKA[edx*4]
  00099	d1 e9		 shr	 ecx, 1
  0009b	b8 01 00 00 00	 mov	 eax, 1
  000a0	6b d0 05	 imul	 edx, eax, 5
  000a3	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  000a6	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  000aa	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_l@@3PAKA[edx*4]
  000b1	d1 e9		 shr	 ecx, 1
  000b3	b8 01 00 00 00	 mov	 eax, 1
  000b8	6b d0 06	 imul	 edx, eax, 6
  000bb	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  000be	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  000c2	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_l@@3PAKA[edx*4]
  000c9	d1 e9		 shr	 ecx, 1
  000cb	b8 01 00 00 00	 mov	 eax, 1
  000d0	6b d0 07	 imul	 edx, eax, 7
  000d3	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  000d6	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  000da	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_l@@3PAKA[edx*4]
  000e1	89 4d f8	 mov	 DWORD PTR _l$[ebp], ecx

; 1444 : 		  | Ip_l[s[1]]) >> 1
; 1445 : 		 | Ip_l[s[2]]) >> 1
; 1446 : 		| Ip_l[s[3]]) >> 1
; 1447 : 	       | Ip_l[s[4]]) >> 1
; 1448 : 	      | Ip_l[s[5]]) >> 1
; 1449 : 	     | Ip_l[s[6]]) >> 1
; 1450 : 	     | Ip_l[s[7]]);
; 1451 : 	r = (((((((Ip_r[s[0]] >> 1

  000e4	b8 01 00 00 00	 mov	 eax, 1
  000e9	6b c8 00	 imul	 ecx, eax, 0
  000ec	8b 55 c8	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  000f3	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ip_r@@3PAKA[eax*4]
  000fa	d1 e9		 shr	 ecx, 1
  000fc	ba 01 00 00 00	 mov	 edx, 1
  00101	c1 e2 00	 shl	 edx, 0
  00104	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  00107	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  0010b	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_r@@3PAKA[edx*4]
  00112	d1 e9		 shr	 ecx, 1
  00114	b8 01 00 00 00	 mov	 eax, 1
  00119	d1 e0		 shl	 eax, 1
  0011b	8b 55 c8	 mov	 edx, DWORD PTR _s$[ebp]
  0011e	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00122	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_r@@3PAKA[eax*4]
  00129	d1 e9		 shr	 ecx, 1
  0012b	ba 01 00 00 00	 mov	 edx, 1
  00130	6b c2 03	 imul	 eax, edx, 3
  00133	8b 55 c8	 mov	 edx, DWORD PTR _s$[ebp]
  00136	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  0013a	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_r@@3PAKA[eax*4]
  00141	d1 e9		 shr	 ecx, 1
  00143	ba 01 00 00 00	 mov	 edx, 1
  00148	c1 e2 02	 shl	 edx, 2
  0014b	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  0014e	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  00152	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_r@@3PAKA[edx*4]
  00159	d1 e9		 shr	 ecx, 1
  0015b	b8 01 00 00 00	 mov	 eax, 1
  00160	6b d0 05	 imul	 edx, eax, 5
  00163	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  00166	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  0016a	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_r@@3PAKA[edx*4]
  00171	d1 e9		 shr	 ecx, 1
  00173	b8 01 00 00 00	 mov	 eax, 1
  00178	6b d0 06	 imul	 edx, eax, 6
  0017b	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  0017e	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  00182	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_r@@3PAKA[edx*4]
  00189	d1 e9		 shr	 ecx, 1
  0018b	b8 01 00 00 00	 mov	 eax, 1
  00190	6b d0 07	 imul	 edx, eax, 7
  00193	8b 45 c8	 mov	 eax, DWORD PTR _s$[ebp]
  00196	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  0019a	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_r@@3PAKA[edx*4]
  001a1	89 4d ec	 mov	 DWORD PTR _r$[ebp], ecx

; 1452 : 		  | Ip_r[s[1]]) >> 1
; 1453 : 		 | Ip_r[s[2]]) >> 1
; 1454 : 		| Ip_r[s[3]]) >> 1
; 1455 : 	       | Ip_r[s[4]]) >> 1
; 1456 : 	      | Ip_r[s[5]]) >> 1
; 1457 : 	     | Ip_r[s[6]]) >> 1
; 1458 : 	     | Ip_r[s[7]]);
; 1459 : 
; 1460 : 	if (dflag == 0) {

  001a4	83 7d 0c 00	 cmp	 DWORD PTR _dflag$[ebp], 0
  001a8	0f 85 3c 01 00
	00		 jne	 $LN8@des_crypt

; 1461 : 		for (i = 0; i < 16; i++) {

  001ae	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001b5	eb 09		 jmp	 SHORT $LN4@des_crypt
$LN2@des_crypt:
  001b7	8b 45 bc	 mov	 eax, DWORD PTR _i$[ebp]
  001ba	83 c0 01	 add	 eax, 1
  001bd	89 45 bc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@des_crypt:
  001c0	83 7d bc 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  001c4	0f 8d 1b 01 00
	00		 jge	 $LN3@des_crypt

; 1462 : 			ulong v, x1, x2;
; 1463 : 
; 1464 : 			/* E-transpose, Xor, S-box and P-transpose */
; 1465 : 			x1 = rol1(r);

  001ca	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  001cd	d1 e0		 shl	 eax, 1
  001cf	8b 4d ec	 mov	 ecx, DWORD PTR _r$[ebp]
  001d2	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001d5	0b c1		 or	 eax, ecx
  001d7	89 45 a4	 mov	 DWORD PTR _x1$5[ebp], eax

; 1466 : 			x2 = ror4(x1) ^ Keys[i][0];

  001da	8b 45 a4	 mov	 eax, DWORD PTR _x1$5[ebp]
  001dd	c1 e8 04	 shr	 eax, 4
  001e0	8b 4d a4	 mov	 ecx, DWORD PTR _x1$5[ebp]
  001e3	c1 e1 1c	 shl	 ecx, 28			; 0000001cH
  001e6	0b c1		 or	 eax, ecx
  001e8	ba 04 00 00 00	 mov	 edx, 4
  001ed	6b ca 00	 imul	 ecx, edx, 0
  001f0	8b 55 bc	 mov	 edx, DWORD PTR _i$[ebp]
  001f3	33 84 d1 00 00
	00 00		 xor	 eax, DWORD PTR ?Keys@@3PAY01KA[ecx+edx*8]
  001fa	89 45 98	 mov	 DWORD PTR _x2$4[ebp], eax

; 1467 : 			x1 ^= Keys[i][1];

  001fd	b8 04 00 00 00	 mov	 eax, 4
  00202	c1 e0 00	 shl	 eax, 0
  00205	8b 4d bc	 mov	 ecx, DWORD PTR _i$[ebp]
  00208	8b 55 a4	 mov	 edx, DWORD PTR _x1$5[ebp]
  0020b	33 94 c8 00 00
	00 00		 xor	 edx, DWORD PTR ?Keys@@3PAY01KA[eax+ecx*8]
  00212	89 55 a4	 mov	 DWORD PTR _x1$5[ebp], edx

; 1468 : 			v = l	^ ps(7, x1 & 0x3f)

  00215	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0021a	6b c8 07	 imul	 ecx, eax, 7
  0021d	8b 55 a4	 mov	 edx, DWORD PTR _x1$5[ebp]
  00220	83 e2 3f	 and	 edx, 63			; 0000003fH
  00223	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  00226	33 84 91 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx+edx*4]
  0022d	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00232	6b d1 05	 imul	 edx, ecx, 5
  00235	8b 4d a4	 mov	 ecx, DWORD PTR _x1$5[ebp]
  00238	c1 e9 08	 shr	 ecx, 8
  0023b	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0023e	33 84 8a 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx+ecx*4]
  00245	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0024a	6b ca 03	 imul	 ecx, edx, 3
  0024d	8b 55 a4	 mov	 edx, DWORD PTR _x1$5[ebp]
  00250	c1 ea 10	 shr	 edx, 16			; 00000010H
  00253	83 e2 3f	 and	 edx, 63			; 0000003fH
  00256	33 84 91 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx+edx*4]
  0025d	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00262	c1 e1 00	 shl	 ecx, 0
  00265	8b 55 a4	 mov	 edx, DWORD PTR _x1$5[ebp]
  00268	c1 ea 18	 shr	 edx, 24			; 00000018H
  0026b	83 e2 3f	 and	 edx, 63			; 0000003fH
  0026e	33 84 91 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx+edx*4]
  00275	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0027a	6b d1 06	 imul	 edx, ecx, 6
  0027d	8b 4d 98	 mov	 ecx, DWORD PTR _x2$4[ebp]
  00280	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00283	33 84 8a 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx+ecx*4]
  0028a	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0028f	c1 e2 02	 shl	 edx, 2
  00292	8b 4d 98	 mov	 ecx, DWORD PTR _x2$4[ebp]
  00295	c1 e9 08	 shr	 ecx, 8
  00298	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0029b	33 84 8a 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx+ecx*4]
  002a2	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  002a7	d1 e2		 shl	 edx, 1
  002a9	8b 4d 98	 mov	 ecx, DWORD PTR _x2$4[ebp]
  002ac	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002af	83 e1 3f	 and	 ecx, 63			; 0000003fH
  002b2	33 84 8a 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx+ecx*4]
  002b9	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  002be	6b ca 00	 imul	 ecx, edx, 0
  002c1	8b 55 98	 mov	 edx, DWORD PTR _x2$4[ebp]
  002c4	c1 ea 18	 shr	 edx, 24			; 00000018H
  002c7	83 e2 3f	 and	 edx, 63			; 0000003fH
  002ca	33 84 91 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx+edx*4]
  002d1	89 45 b0	 mov	 DWORD PTR _v$6[ebp], eax

; 1469 : 				^ ps(5, (x1 >> 8) & 0x3f)
; 1470 : 				^ ps(3, (x1 >> 16) & 0x3f)
; 1471 : 				^ ps(1, (x1 >> 24) & 0x3f)
; 1472 : 				^ ps(6, x2 & 0x3f)
; 1473 : 				^ ps(4, (x2 >> 8) & 0x3f)
; 1474 : 				^ ps(2, (x2 >> 16) & 0x3f)
; 1475 : 				^ ps(0, (x2 >> 24) & 0x3f);
; 1476 : 			l = r;

  002d4	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  002d7	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 1477 : 			r = v;

  002da	8b 45 b0	 mov	 eax, DWORD PTR _v$6[ebp]
  002dd	89 45 ec	 mov	 DWORD PTR _r$[ebp], eax

; 1478 : 		}

  002e0	e9 d2 fe ff ff	 jmp	 $LN2@des_crypt
$LN3@des_crypt:

; 1479 : 	} else {

  002e5	e9 40 01 00 00	 jmp	 $LN9@des_crypt
$LN8@des_crypt:

; 1480 : 		for (i = 16; --i >= 0; ) {

  002ea	c7 45 bc 10 00
	00 00		 mov	 DWORD PTR _i$[ebp], 16	; 00000010H
$LN7@des_crypt:
  002f1	8b 45 bc	 mov	 eax, DWORD PTR _i$[ebp]
  002f4	83 e8 01	 sub	 eax, 1
  002f7	89 45 bc	 mov	 DWORD PTR _i$[ebp], eax
  002fa	0f 88 2a 01 00
	00		 js	 $LN9@des_crypt

; 1481 : 			ulong v, x1, x2;
; 1482 : 
; 1483 : 			/* E-transpose, Xor, S-box and P-transpose */
; 1484 : 			x1 = rol1(r);

  00300	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  00303	d1 e0		 shl	 eax, 1
  00305	8b 4d ec	 mov	 ecx, DWORD PTR _r$[ebp]
  00308	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0030b	0b c1		 or	 eax, ecx
  0030d	89 45 80	 mov	 DWORD PTR _x1$2[ebp], eax

; 1485 : 			x2 = ror4(x1) ^ Keys[i][0];

  00310	8b 45 80	 mov	 eax, DWORD PTR _x1$2[ebp]
  00313	c1 e8 04	 shr	 eax, 4
  00316	8b 4d 80	 mov	 ecx, DWORD PTR _x1$2[ebp]
  00319	c1 e1 1c	 shl	 ecx, 28			; 0000001cH
  0031c	0b c1		 or	 eax, ecx
  0031e	ba 04 00 00 00	 mov	 edx, 4
  00323	6b ca 00	 imul	 ecx, edx, 0
  00326	8b 55 bc	 mov	 edx, DWORD PTR _i$[ebp]
  00329	33 84 d1 00 00
	00 00		 xor	 eax, DWORD PTR ?Keys@@3PAY01KA[ecx+edx*8]
  00330	89 85 74 ff ff
	ff		 mov	 DWORD PTR _x2$1[ebp], eax

; 1486 : 			x1 ^= Keys[i][1];

  00336	b8 04 00 00 00	 mov	 eax, 4
  0033b	c1 e0 00	 shl	 eax, 0
  0033e	8b 4d bc	 mov	 ecx, DWORD PTR _i$[ebp]
  00341	8b 55 80	 mov	 edx, DWORD PTR _x1$2[ebp]
  00344	33 94 c8 00 00
	00 00		 xor	 edx, DWORD PTR ?Keys@@3PAY01KA[eax+ecx*8]
  0034b	89 55 80	 mov	 DWORD PTR _x1$2[ebp], edx

; 1487 : 			v = l	^ ps(7, x1 & 0x3f)

  0034e	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00353	6b c8 07	 imul	 ecx, eax, 7
  00356	8b 55 80	 mov	 edx, DWORD PTR _x1$2[ebp]
  00359	83 e2 3f	 and	 edx, 63			; 0000003fH
  0035c	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  0035f	33 84 91 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx+edx*4]
  00366	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0036b	6b d1 05	 imul	 edx, ecx, 5
  0036e	8b 4d 80	 mov	 ecx, DWORD PTR _x1$2[ebp]
  00371	c1 e9 08	 shr	 ecx, 8
  00374	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00377	33 84 8a 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx+ecx*4]
  0037e	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00383	6b ca 03	 imul	 ecx, edx, 3
  00386	8b 55 80	 mov	 edx, DWORD PTR _x1$2[ebp]
  00389	c1 ea 10	 shr	 edx, 16			; 00000010H
  0038c	83 e2 3f	 and	 edx, 63			; 0000003fH
  0038f	33 84 91 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx+edx*4]
  00396	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0039b	c1 e1 00	 shl	 ecx, 0
  0039e	8b 55 80	 mov	 edx, DWORD PTR _x1$2[ebp]
  003a1	c1 ea 18	 shr	 edx, 24			; 00000018H
  003a4	83 e2 3f	 and	 edx, 63			; 0000003fH
  003a7	33 84 91 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx+edx*4]
  003ae	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  003b3	6b d1 06	 imul	 edx, ecx, 6
  003b6	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _x2$1[ebp]
  003bc	83 e1 3f	 and	 ecx, 63			; 0000003fH
  003bf	33 84 8a 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx+ecx*4]
  003c6	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  003cb	c1 e2 02	 shl	 edx, 2
  003ce	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _x2$1[ebp]
  003d4	c1 e9 08	 shr	 ecx, 8
  003d7	83 e1 3f	 and	 ecx, 63			; 0000003fH
  003da	33 84 8a 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx+ecx*4]
  003e1	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  003e6	d1 e2		 shl	 edx, 1
  003e8	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _x2$1[ebp]
  003ee	c1 e9 10	 shr	 ecx, 16			; 00000010H
  003f1	83 e1 3f	 and	 ecx, 63			; 0000003fH
  003f4	33 84 8a 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[edx+ecx*4]
  003fb	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00400	6b ca 00	 imul	 ecx, edx, 0
  00403	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _x2$1[ebp]
  00409	c1 ea 18	 shr	 edx, 24			; 00000018H
  0040c	83 e2 3f	 and	 edx, 63			; 0000003fH
  0040f	33 84 91 00 00
	00 00		 xor	 eax, DWORD PTR ?Psboxes@@3PAY0EA@KA[ecx+edx*4]
  00416	89 45 8c	 mov	 DWORD PTR _v$3[ebp], eax

; 1488 : 				^ ps(5, (x1 >> 8) & 0x3f)
; 1489 : 				^ ps(3, (x1 >> 16) & 0x3f)
; 1490 : 				^ ps(1, (x1 >> 24) & 0x3f)
; 1491 : 				^ ps(6, x2 & 0x3f)
; 1492 : 				^ ps(4, (x2 >> 8) & 0x3f)
; 1493 : 				^ ps(2, (x2 >> 16) & 0x3f)
; 1494 : 				^ ps(0, (x2 >> 24) & 0x3f);
; 1495 : 			l = r;

  00419	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  0041c	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax

; 1496 : 			r = v;

  0041f	8b 45 8c	 mov	 eax, DWORD PTR _v$3[ebp]
  00422	89 45 ec	 mov	 DWORD PTR _r$[ebp], eax

; 1497 : 		}

  00425	e9 c7 fe ff ff	 jmp	 $LN7@des_crypt
$LN9@des_crypt:

; 1498 : 	}
; 1499 : 	/* Final transpose */
; 1500 : 	l2 = (((((((Ip_inv_l[r & 0xff] >> 1

  0042a	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  0042d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00432	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ip_inv_l@@3PAKA[eax*4]
  00439	d1 e9		 shr	 ecx, 1
  0043b	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  0043e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00444	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_l@@3PAKA[edx*4]
  0044b	d1 e9		 shr	 ecx, 1
  0044d	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  00450	c1 e8 08	 shr	 eax, 8
  00453	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00458	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_l@@3PAKA[eax*4]
  0045f	d1 e9		 shr	 ecx, 1
  00461	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  00464	c1 ea 08	 shr	 edx, 8
  00467	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0046d	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_l@@3PAKA[edx*4]
  00474	d1 e9		 shr	 ecx, 1
  00476	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  00479	c1 e8 10	 shr	 eax, 16			; 00000010H
  0047c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00481	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_l@@3PAKA[eax*4]
  00488	d1 e9		 shr	 ecx, 1
  0048a	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  0048d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00490	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00496	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_l@@3PAKA[edx*4]
  0049d	d1 e9		 shr	 ecx, 1
  0049f	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  004a2	c1 e8 18	 shr	 eax, 24			; 00000018H
  004a5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004aa	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_l@@3PAKA[eax*4]
  004b1	d1 e9		 shr	 ecx, 1
  004b3	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  004b6	c1 ea 18	 shr	 edx, 24			; 00000018H
  004b9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004bf	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_l@@3PAKA[edx*4]
  004c6	89 4d e0	 mov	 DWORD PTR _l2$[ebp], ecx

; 1501 : 		   | Ip_inv_l[l & 0xff]) >> 1
; 1502 : 		  | Ip_inv_l[r>>8 & 0xff]) >> 1
; 1503 : 		 | Ip_inv_l[l>>8 & 0xff]) >> 1
; 1504 : 		| Ip_inv_l[r>>16 & 0xff]) >> 1
; 1505 : 	       | Ip_inv_l[l>>16 & 0xff]) >> 1
; 1506 : 	      | Ip_inv_l[r>>24 & 0xff]) >> 1
; 1507 : 	     | Ip_inv_l[l>>24 & 0xff]);
; 1508 : 	r2 = (((((((Ip_inv_r[r & 0xff] >> 1

  004c9	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  004cc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004d1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ip_inv_r@@3PAKA[eax*4]
  004d8	d1 e9		 shr	 ecx, 1
  004da	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  004dd	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004e3	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_r@@3PAKA[edx*4]
  004ea	d1 e9		 shr	 ecx, 1
  004ec	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  004ef	c1 e8 08	 shr	 eax, 8
  004f2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004f7	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_r@@3PAKA[eax*4]
  004fe	d1 e9		 shr	 ecx, 1
  00500	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  00503	c1 ea 08	 shr	 edx, 8
  00506	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0050c	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_r@@3PAKA[edx*4]
  00513	d1 e9		 shr	 ecx, 1
  00515	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  00518	c1 e8 10	 shr	 eax, 16			; 00000010H
  0051b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00520	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_r@@3PAKA[eax*4]
  00527	d1 e9		 shr	 ecx, 1
  00529	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  0052c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0052f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00535	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_r@@3PAKA[edx*4]
  0053c	d1 e9		 shr	 ecx, 1
  0053e	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  00541	c1 e8 18	 shr	 eax, 24			; 00000018H
  00544	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00549	0b 0c 85 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_r@@3PAKA[eax*4]
  00550	d1 e9		 shr	 ecx, 1
  00552	8b 55 f8	 mov	 edx, DWORD PTR _l$[ebp]
  00555	c1 ea 18	 shr	 edx, 24			; 00000018H
  00558	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0055e	0b 0c 95 00 00
	00 00		 or	 ecx, DWORD PTR ?Ip_inv_r@@3PAKA[edx*4]
  00565	89 4d d4	 mov	 DWORD PTR _r2$[ebp], ecx

; 1509 : 		   | Ip_inv_r[l & 0xff]) >> 1
; 1510 : 		  | Ip_inv_r[r>>8 & 0xff]) >> 1
; 1511 : 		 | Ip_inv_r[l>>8 & 0xff]) >> 1
; 1512 : 		| Ip_inv_r[r>>16 & 0xff]) >> 1
; 1513 : 	       | Ip_inv_r[l>>16 & 0xff]) >> 1
; 1514 : 	      | Ip_inv_r[r>>24 & 0xff]) >> 1
; 1515 : 	     | Ip_inv_r[l>>24 & 0xff]);
; 1516 : 	*block++ = (char)(l2 >> 24);

  00568	8b 45 e0	 mov	 eax, DWORD PTR _l2$[ebp]
  0056b	c1 e8 18	 shr	 eax, 24			; 00000018H
  0056e	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00571	88 01		 mov	 BYTE PTR [ecx], al
  00573	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00576	83 c2 01	 add	 edx, 1
  00579	89 55 08	 mov	 DWORD PTR _block$[ebp], edx

; 1517 : 	*block++ = (char)(l2 >> 16);

  0057c	8b 45 e0	 mov	 eax, DWORD PTR _l2$[ebp]
  0057f	c1 e8 10	 shr	 eax, 16			; 00000010H
  00582	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00585	88 01		 mov	 BYTE PTR [ecx], al
  00587	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0058a	83 c2 01	 add	 edx, 1
  0058d	89 55 08	 mov	 DWORD PTR _block$[ebp], edx

; 1518 : 	*block++ = (char)(l2 >> 8);

  00590	8b 45 e0	 mov	 eax, DWORD PTR _l2$[ebp]
  00593	c1 e8 08	 shr	 eax, 8
  00596	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00599	88 01		 mov	 BYTE PTR [ecx], al
  0059b	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0059e	83 c2 01	 add	 edx, 1
  005a1	89 55 08	 mov	 DWORD PTR _block$[ebp], edx

; 1519 : 	*block++ = (char)l2;

  005a4	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  005a7	8a 4d e0	 mov	 cl, BYTE PTR _l2$[ebp]
  005aa	88 08		 mov	 BYTE PTR [eax], cl
  005ac	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  005af	83 c2 01	 add	 edx, 1
  005b2	89 55 08	 mov	 DWORD PTR _block$[ebp], edx

; 1520 : 	*block++ = (char)(r2 >> 24);

  005b5	8b 45 d4	 mov	 eax, DWORD PTR _r2$[ebp]
  005b8	c1 e8 18	 shr	 eax, 24			; 00000018H
  005bb	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  005be	88 01		 mov	 BYTE PTR [ecx], al
  005c0	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  005c3	83 c2 01	 add	 edx, 1
  005c6	89 55 08	 mov	 DWORD PTR _block$[ebp], edx

; 1521 : 	*block++ = (char)(r2 >> 16);

  005c9	8b 45 d4	 mov	 eax, DWORD PTR _r2$[ebp]
  005cc	c1 e8 10	 shr	 eax, 16			; 00000010H
  005cf	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  005d2	88 01		 mov	 BYTE PTR [ecx], al
  005d4	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  005d7	83 c2 01	 add	 edx, 1
  005da	89 55 08	 mov	 DWORD PTR _block$[ebp], edx

; 1522 : 	*block++ = (char)(r2 >> 8);

  005dd	8b 45 d4	 mov	 eax, DWORD PTR _r2$[ebp]
  005e0	c1 e8 08	 shr	 eax, 8
  005e3	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  005e6	88 01		 mov	 BYTE PTR [ecx], al
  005e8	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  005eb	83 c2 01	 add	 edx, 1
  005ee	89 55 08	 mov	 DWORD PTR _block$[ebp], edx

; 1523 : 	*block++ = (char)r2;

  005f1	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  005f4	8a 4d d4	 mov	 cl, BYTE PTR _r2$[ebp]
  005f7	88 08		 mov	 BYTE PTR [eax], cl
  005f9	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  005fc	83 c2 01	 add	 edx, 1
  005ff	89 55 08	 mov	 DWORD PTR _block$[ebp], edx

; 1524 : }

  00602	5f		 pop	 edi
  00603	5e		 pop	 esi
  00604	5b		 pop	 ebx
  00605	8b e5		 mov	 esp, ebp
  00607	5d		 pop	 ebp
  00608	c3		 ret	 0
?des_crypt@@YAXPADH@Z ENDP				; des_crypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\descrypt.cpp
;	COMDAT ?des_setkey@@YAXPAD@Z
_TEXT	SEGMENT
tv155 = -324						; size = 4
tv139 = -324						; size = 4
_n$1 = -124						; size = 4
_w$2 = -112						; size = 8
_mask$3 = -93						; size = 1
_k$4 = -84						; size = 4
_j$ = -72						; size = 4
_i$ = -60						; size = 4
_p$ = -48						; size = 4
_b$ = -33						; size = 1
_d$ = -24						; size = 4
_c$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
?des_setkey@@YAXPAD@Z PROC				; des_setkey, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd bc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-324]
  00012	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 40   : 	static char nshifts[]
; 41   : 		= { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };
; 42   : #define	C	28
; 43   : #define	D	0
; 44   : 	static uchar pc1[] = {
; 45   : 		C + 20, C + 12, C + 4, D + 0, D + 4, D + 12, D + 20,
; 46   : 		C + 21, C + 13, C + 5, D + 1, D + 5, D + 13, D + 21,
; 47   : 		C + 22, C + 14, C + 6, D + 2, D + 6, D + 14, D + 22,
; 48   : 		C + 23, C + 15, C + 7, D + 3, D + 7, D + 15, D + 23,
; 49   : 		C + 24, C + 16, C + 8, C + 0, D + 8, D + 16, D + 24,
; 50   : 		C + 25, C + 17, C + 9, C + 1, D + 9, D + 17, D + 25,
; 51   : 		C + 26, C + 18, C +10, C + 2, D +10, D + 18, D + 26,
; 52   : 		C + 27, C + 19, C +11, C + 3, D +11, D + 19, D + 27
; 53   : 	};
; 54   : 	static uchar pc2_c[] = {
; 55   : 		14, 11, 17,  4, 27, 23,
; 56   : 		25,  0, 13, 22,  7, 18,
; 57   : 		 5,  9, 16, 24,  2, 20,
; 58   : 		12, 21,  1,  8, 15, 26
; 59   : 	};
; 60   : 	static uchar pc2_d[] = {
; 61   : 		15,  4, 25, 19,  9,  1,
; 62   : 		26, 16,  5, 11, 23,  8,
; 63   : 		12,  7, 17,  0, 22,  3,
; 64   : 		10, 14,  6, 20, 27, 24,
; 65   : 	};
; 66   : 	ulong c, d;
; 67   : 	uchar b, *p;
; 68   : 	int i, j;
; 69   : 
; 70   : 	/* PC-1 (Permuted Choice 1) */
; 71   : 	c = d = 0;

  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _d$[ebp], 0
  0002f	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00032	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax

; 72   : 	p = pc1;

  00035	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET ?pc1@?1??des_setkey@@YAXPAD@Z@4PAEA

; 73   : 	for (i = 0; i < 8; i++) {

  0003c	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN4@des_setkey
$LN2@des_setkey:
  00045	8b 45 c4	 mov	 eax, DWORD PTR _i$[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 c4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@des_setkey:
  0004e	83 7d c4 08	 cmp	 DWORD PTR _i$[ebp], 8
  00052	0f 8d 82 00 00
	00		 jge	 $LN3@des_setkey

; 74   : 		b = *key++;

  00058	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0005b	8a 08		 mov	 cl, BYTE PTR [eax]
  0005d	88 4d df	 mov	 BYTE PTR _b$[ebp], cl
  00060	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  00063	83 c2 01	 add	 edx, 1
  00066	89 55 08	 mov	 DWORD PTR _key$[ebp], edx

; 75   : 		for (j = 0; j < 7; j++) {

  00069	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00070	eb 09		 jmp	 SHORT $LN7@des_setkey
$LN5@des_setkey:
  00072	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 b8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@des_setkey:
  0007b	83 7d b8 07	 cmp	 DWORD PTR _j$[ebp], 7
  0007f	7d 54		 jge	 SHORT $LN6@des_setkey

; 76   : 			if (b & 0x80) {

  00081	0f b6 45 df	 movzx	 eax, BYTE PTR _b$[ebp]
  00085	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0008a	74 36		 je	 SHORT $LN23@des_setkey

; 77   : 				if (*p >= C)

  0008c	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  0008f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00092	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  00095	7c 18		 jl	 SHORT $LN24@des_setkey

; 78   : 					c |= 1L << (*p - C);

  00097	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  0009a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0009d	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	d3 e2		 shl	 edx, cl
  000a7	0b 55 f4	 or	 edx, DWORD PTR _c$[ebp]
  000aa	89 55 f4	 mov	 DWORD PTR _c$[ebp], edx

; 79   : 				else

  000ad	eb 13		 jmp	 SHORT $LN23@des_setkey
$LN24@des_setkey:

; 80   : 					d |= 1L << *p;

  000af	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  000b2	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000b5	ba 01 00 00 00	 mov	 edx, 1
  000ba	d3 e2		 shl	 edx, cl
  000bc	0b 55 e8	 or	 edx, DWORD PTR _d$[ebp]
  000bf	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
$LN23@des_setkey:

; 81   : 			}
; 82   : 			p++;

  000c2	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  000c5	83 c0 01	 add	 eax, 1
  000c8	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax

; 83   : 			b <<= 1;

  000cb	8a 45 df	 mov	 al, BYTE PTR _b$[ebp]
  000ce	d0 e0		 shl	 al, 1
  000d0	88 45 df	 mov	 BYTE PTR _b$[ebp], al

; 84   : 		}

  000d3	eb 9d		 jmp	 SHORT $LN5@des_setkey
$LN6@des_setkey:

; 85   : 	}

  000d5	e9 6b ff ff ff	 jmp	 $LN2@des_setkey
$LN3@des_setkey:

; 86   : 
; 87   : 	for (i = 0; i < 16; i++) {

  000da	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000e1	eb 09		 jmp	 SHORT $LN10@des_setkey
$LN8@des_setkey:
  000e3	8b 45 c4	 mov	 eax, DWORD PTR _i$[ebp]
  000e6	83 c0 01	 add	 eax, 1
  000e9	89 45 c4	 mov	 DWORD PTR _i$[ebp], eax
$LN10@des_setkey:
  000ec	83 7d c4 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  000f0	0f 8d fd 01 00
	00		 jge	 $LN1@des_setkey

; 88   : 		uchar *k, mask, w[8];
; 89   : 		uint n = nshifts[i];

  000f6	8b 45 c4	 mov	 eax, DWORD PTR _i$[ebp]
  000f9	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR ?nshifts@?1??des_setkey@@YAXPAD@Z@4PADA[eax]
  00100	89 4d 84	 mov	 DWORD PTR _n$1[ebp], ecx

; 90   : 		
; 91   : 		c = (c << n | c >> (28 - n)) & 0x0fffffff;

  00103	8b 45 f4	 mov	 eax, DWORD PTR _c$[ebp]
  00106	8b 4d 84	 mov	 ecx, DWORD PTR _n$1[ebp]
  00109	d3 e0		 shl	 eax, cl
  0010b	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00110	2b 4d 84	 sub	 ecx, DWORD PTR _n$1[ebp]
  00113	8b 55 f4	 mov	 edx, DWORD PTR _c$[ebp]
  00116	d3 ea		 shr	 edx, cl
  00118	0b c2		 or	 eax, edx
  0011a	25 ff ff ff 0f	 and	 eax, 268435455		; 0fffffffH
  0011f	89 45 f4	 mov	 DWORD PTR _c$[ebp], eax

; 92   : 		d = (d << n | d >> (28 - n)) & 0x0fffffff;

  00122	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00125	8b 4d 84	 mov	 ecx, DWORD PTR _n$1[ebp]
  00128	d3 e0		 shl	 eax, cl
  0012a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0012f	2b 4d 84	 sub	 ecx, DWORD PTR _n$1[ebp]
  00132	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  00135	d3 ea		 shr	 edx, cl
  00137	0b c2		 or	 eax, edx
  00139	25 ff ff ff 0f	 and	 eax, 268435455		; 0fffffffH
  0013e	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 93   : 		/* PC-2 (Permuted Choice 2) */
; 94   : 		k = w;

  00141	8d 45 90	 lea	 eax, DWORD PTR _w$2[ebp]
  00144	89 45 ac	 mov	 DWORD PTR _k$4[ebp], eax

; 95   : 		p = pc2_c;

  00147	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET ?pc2_c@?1??des_setkey@@YAXPAD@Z@4PAEA

; 96   : 		for (j = 0; j < 4; j++) {

  0014e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00155	eb 09		 jmp	 SHORT $LN13@des_setkey
$LN11@des_setkey:
  00157	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  0015a	83 c0 01	 add	 eax, 1
  0015d	89 45 b8	 mov	 DWORD PTR _j$[ebp], eax
$LN13@des_setkey:
  00160	83 7d b8 04	 cmp	 DWORD PTR _j$[ebp], 4
  00164	7d 60		 jge	 SHORT $LN12@des_setkey

; 97   : 			*k = 0;

  00166	8b 45 ac	 mov	 eax, DWORD PTR _k$4[ebp]
  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 98   : 			for (mask = 0x20; mask > 0; mask >>= 1) {

  0016c	c6 45 a3 20	 mov	 BYTE PTR _mask$3[ebp], 32 ; 00000020H
  00170	eb 08		 jmp	 SHORT $LN16@des_setkey
$LN14@des_setkey:
  00172	8a 45 a3	 mov	 al, BYTE PTR _mask$3[ebp]
  00175	d0 e8		 shr	 al, 1
  00177	88 45 a3	 mov	 BYTE PTR _mask$3[ebp], al
$LN16@des_setkey:
  0017a	0f b6 45 a3	 movzx	 eax, BYTE PTR _mask$3[ebp]
  0017e	85 c0		 test	 eax, eax
  00180	7e 39		 jle	 SHORT $LN15@des_setkey

; 99   : 				if ((c >> *p++) & 1)

  00182	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00185	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00188	8b 55 f4	 mov	 edx, DWORD PTR _c$[ebp]
  0018b	d3 ea		 shr	 edx, cl
  0018d	83 e2 01	 and	 edx, 1
  00190	89 95 bc fe ff
	ff		 mov	 DWORD PTR tv139[ebp], edx
  00196	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00199	83 c0 01	 add	 eax, 1
  0019c	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  0019f	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR tv139[ebp], 0
  001a6	74 11		 je	 SHORT $LN26@des_setkey

; 100  : 					*k |= mask;

  001a8	0f b6 45 a3	 movzx	 eax, BYTE PTR _mask$3[ebp]
  001ac	8b 4d ac	 mov	 ecx, DWORD PTR _k$4[ebp]
  001af	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  001b2	0b d0		 or	 edx, eax
  001b4	8b 45 ac	 mov	 eax, DWORD PTR _k$4[ebp]
  001b7	88 10		 mov	 BYTE PTR [eax], dl
$LN26@des_setkey:

; 101  : 			}

  001b9	eb b7		 jmp	 SHORT $LN14@des_setkey
$LN15@des_setkey:

; 102  : 			k++;

  001bb	8b 45 ac	 mov	 eax, DWORD PTR _k$4[ebp]
  001be	83 c0 01	 add	 eax, 1
  001c1	89 45 ac	 mov	 DWORD PTR _k$4[ebp], eax

; 103  : 		}

  001c4	eb 91		 jmp	 SHORT $LN11@des_setkey
$LN12@des_setkey:

; 104  : 		p = pc2_d;

  001c6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], OFFSET ?pc2_d@?1??des_setkey@@YAXPAD@Z@4PAEA

; 105  : 		for (j = 0; j < 4; j++) {

  001cd	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  001d4	eb 09		 jmp	 SHORT $LN19@des_setkey
$LN17@des_setkey:
  001d6	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  001d9	83 c0 01	 add	 eax, 1
  001dc	89 45 b8	 mov	 DWORD PTR _j$[ebp], eax
$LN19@des_setkey:
  001df	83 7d b8 04	 cmp	 DWORD PTR _j$[ebp], 4
  001e3	7d 60		 jge	 SHORT $LN18@des_setkey

; 106  : 			*k = 0;

  001e5	8b 45 ac	 mov	 eax, DWORD PTR _k$4[ebp]
  001e8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 107  : 			for (mask = 0x20; mask > 0; mask >>= 1) {

  001eb	c6 45 a3 20	 mov	 BYTE PTR _mask$3[ebp], 32 ; 00000020H
  001ef	eb 08		 jmp	 SHORT $LN22@des_setkey
$LN20@des_setkey:
  001f1	8a 45 a3	 mov	 al, BYTE PTR _mask$3[ebp]
  001f4	d0 e8		 shr	 al, 1
  001f6	88 45 a3	 mov	 BYTE PTR _mask$3[ebp], al
$LN22@des_setkey:
  001f9	0f b6 45 a3	 movzx	 eax, BYTE PTR _mask$3[ebp]
  001fd	85 c0		 test	 eax, eax
  001ff	7e 39		 jle	 SHORT $LN21@des_setkey

; 108  : 				if ((d >> *p++) & 1)

  00201	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00204	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00207	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  0020a	d3 ea		 shr	 edx, cl
  0020c	83 e2 01	 and	 edx, 1
  0020f	89 95 bc fe ff
	ff		 mov	 DWORD PTR tv155[ebp], edx
  00215	8b 45 d0	 mov	 eax, DWORD PTR _p$[ebp]
  00218	83 c0 01	 add	 eax, 1
  0021b	89 45 d0	 mov	 DWORD PTR _p$[ebp], eax
  0021e	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR tv155[ebp], 0
  00225	74 11		 je	 SHORT $LN27@des_setkey

; 109  : 					*k |= mask;

  00227	0f b6 45 a3	 movzx	 eax, BYTE PTR _mask$3[ebp]
  0022b	8b 4d ac	 mov	 ecx, DWORD PTR _k$4[ebp]
  0022e	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00231	0b d0		 or	 edx, eax
  00233	8b 45 ac	 mov	 eax, DWORD PTR _k$4[ebp]
  00236	88 10		 mov	 BYTE PTR [eax], dl
$LN27@des_setkey:

; 110  : 			}

  00238	eb b7		 jmp	 SHORT $LN20@des_setkey
$LN21@des_setkey:

; 111  : 			k++;

  0023a	8b 45 ac	 mov	 eax, DWORD PTR _k$4[ebp]
  0023d	83 c0 01	 add	 eax, 1
  00240	89 45 ac	 mov	 DWORD PTR _k$4[ebp], eax

; 112  : 		}

  00243	eb 91		 jmp	 SHORT $LN17@des_setkey
$LN18@des_setkey:

; 113  : 
; 114  : 		Keys[i][0] = ((ulong)w[0] << 24) | ((ulong)w[2] << 16)

  00245	b8 01 00 00 00	 mov	 eax, 1
  0024a	6b c8 00	 imul	 ecx, eax, 0
  0024d	0f b6 54 0d 90	 movzx	 edx, BYTE PTR _w$2[ebp+ecx]
  00252	c1 e2 18	 shl	 edx, 24			; 00000018H
  00255	b8 01 00 00 00	 mov	 eax, 1
  0025a	d1 e0		 shl	 eax, 1
  0025c	0f b6 4c 05 90	 movzx	 ecx, BYTE PTR _w$2[ebp+eax]
  00261	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00264	0b d1		 or	 edx, ecx
  00266	b8 01 00 00 00	 mov	 eax, 1
  0026b	c1 e0 02	 shl	 eax, 2
  0026e	0f b6 4c 05 90	 movzx	 ecx, BYTE PTR _w$2[ebp+eax]
  00273	c1 e1 08	 shl	 ecx, 8
  00276	0b d1		 or	 edx, ecx
  00278	b8 01 00 00 00	 mov	 eax, 1
  0027d	6b c8 06	 imul	 ecx, eax, 6
  00280	0f b6 44 0d 90	 movzx	 eax, BYTE PTR _w$2[ebp+ecx]
  00285	0b d0		 or	 edx, eax
  00287	b9 04 00 00 00	 mov	 ecx, 4
  0028c	6b c1 00	 imul	 eax, ecx, 0
  0028f	8b 4d c4	 mov	 ecx, DWORD PTR _i$[ebp]
  00292	89 94 c8 00 00
	00 00		 mov	 DWORD PTR ?Keys@@3PAY01KA[eax+ecx*8], edx

; 115  : 			   | ((ulong)w[4] << 8) | (ulong)w[6];
; 116  : 		Keys[i][1] = ((ulong)w[1] << 24) | ((ulong)w[3] << 16)

  00299	b8 01 00 00 00	 mov	 eax, 1
  0029e	c1 e0 00	 shl	 eax, 0
  002a1	0f b6 4c 05 90	 movzx	 ecx, BYTE PTR _w$2[ebp+eax]
  002a6	c1 e1 18	 shl	 ecx, 24			; 00000018H
  002a9	ba 01 00 00 00	 mov	 edx, 1
  002ae	6b c2 03	 imul	 eax, edx, 3
  002b1	0f b6 54 05 90	 movzx	 edx, BYTE PTR _w$2[ebp+eax]
  002b6	c1 e2 10	 shl	 edx, 16			; 00000010H
  002b9	0b ca		 or	 ecx, edx
  002bb	b8 01 00 00 00	 mov	 eax, 1
  002c0	6b d0 05	 imul	 edx, eax, 5
  002c3	0f b6 44 15 90	 movzx	 eax, BYTE PTR _w$2[ebp+edx]
  002c8	c1 e0 08	 shl	 eax, 8
  002cb	0b c8		 or	 ecx, eax
  002cd	ba 01 00 00 00	 mov	 edx, 1
  002d2	6b c2 07	 imul	 eax, edx, 7
  002d5	0f b6 54 05 90	 movzx	 edx, BYTE PTR _w$2[ebp+eax]
  002da	0b ca		 or	 ecx, edx
  002dc	b8 04 00 00 00	 mov	 eax, 4
  002e1	c1 e0 00	 shl	 eax, 0
  002e4	8b 55 c4	 mov	 edx, DWORD PTR _i$[ebp]
  002e7	89 8c d0 00 00
	00 00		 mov	 DWORD PTR ?Keys@@3PAY01KA[eax+edx*8], ecx

; 117  : 			   | ((ulong)w[5] << 8) | (ulong)w[7];
; 118  : 
; 119  : 	}

  002ee	e9 f0 fd ff ff	 jmp	 $LN8@des_setkey
$LN1@des_setkey:

; 120  : }

  002f3	52		 push	 edx
  002f4	8b cd		 mov	 ecx, ebp
  002f6	50		 push	 eax
  002f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN31@des_setkey
  002fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00302	58		 pop	 eax
  00303	5a		 pop	 edx
  00304	5f		 pop	 edi
  00305	5e		 pop	 esi
  00306	5b		 pop	 ebx
  00307	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030a	33 cd		 xor	 ecx, ebp
  0030c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00311	8b e5		 mov	 esp, ebp
  00313	5d		 pop	 ebp
  00314	c3		 ret	 0
  00315	0f 1f 00	 npad	 3
$LN31@des_setkey:
  00318	01 00 00 00	 DD	 1
  0031c	00 00 00 00	 DD	 $LN30@des_setkey
$LN30@des_setkey:
  00320	90 ff ff ff	 DD	 -112			; ffffff90H
  00324	08 00 00 00	 DD	 8
  00328	00 00 00 00	 DD	 $LN29@des_setkey
$LN29@des_setkey:
  0032c	77		 DB	 119			; 00000077H
  0032d	00		 DB	 0
?des_setkey@@YAXPAD@Z ENDP				; des_setkey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\descrypt.cpp
;	COMDAT ?des_setparity@@YAXPAD@Z
_TEXT	SEGMENT
_c$1 = -17						; size = 1
_n$ = -8						; size = 4
_key$ = 8						; size = 4
?des_setparity@@YAXPAD@Z PROC				; des_setparity, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 22   : 	int n;
; 23   : 
; 24   : 	for (n = 8; n > 0; n--) {

  0001e	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR _n$[ebp], 8
  00025	eb 09		 jmp	 SHORT $LN4@des_setpar
$LN2@des_setpar:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0002a	83 e8 01	 sub	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN4@des_setpar:
  00030	83 7d f8 00	 cmp	 DWORD PTR _n$[ebp], 0
  00034	7e 68		 jle	 SHORT $LN1@des_setpar

; 25   : 		char c;
; 26   : 
; 27   : 		c = *key &= 0x7f;

  00036	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00039	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0003c	83 e1 7f	 and	 ecx, 127		; 0000007fH
  0003f	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  00042	88 0a		 mov	 BYTE PTR [edx], cl
  00044	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00047	8a 08		 mov	 cl, BYTE PTR [eax]
  00049	88 4d ef	 mov	 BYTE PTR _c$1[ebp], cl

; 28   : 		c ^= c << 4;

  0004c	0f be 45 ef	 movsx	 eax, BYTE PTR _c$1[ebp]
  00050	c1 e0 04	 shl	 eax, 4
  00053	0f be 4d ef	 movsx	 ecx, BYTE PTR _c$1[ebp]
  00057	33 c8		 xor	 ecx, eax
  00059	88 4d ef	 mov	 BYTE PTR _c$1[ebp], cl

; 29   : 		c ^= c << 2;

  0005c	0f be 45 ef	 movsx	 eax, BYTE PTR _c$1[ebp]
  00060	c1 e0 02	 shl	 eax, 2
  00063	0f be 4d ef	 movsx	 ecx, BYTE PTR _c$1[ebp]
  00067	33 c8		 xor	 ecx, eax
  00069	88 4d ef	 mov	 BYTE PTR _c$1[ebp], cl

; 30   : 		c ^= c << 1;

  0006c	0f be 45 ef	 movsx	 eax, BYTE PTR _c$1[ebp]
  00070	d1 e0		 shl	 eax, 1
  00072	0f be 4d ef	 movsx	 ecx, BYTE PTR _c$1[ebp]
  00076	33 c8		 xor	 ecx, eax
  00078	88 4d ef	 mov	 BYTE PTR _c$1[ebp], cl

; 31   : 		*key++ ^= ~c & 0x80;

  0007b	0f be 45 ef	 movsx	 eax, BYTE PTR _c$1[ebp]
  0007f	f7 d0		 not	 eax
  00081	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  00089	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0008c	33 d0		 xor	 edx, eax
  0008e	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00091	88 10		 mov	 BYTE PTR [eax], dl
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  00096	83 c1 01	 add	 ecx, 1
  00099	89 4d 08	 mov	 DWORD PTR _key$[ebp], ecx

; 32   : 	}

  0009c	eb 89		 jmp	 SHORT $LN2@des_setpar
$LN1@des_setpar:

; 33   : }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?des_setparity@@YAXPAD@Z ENDP				; des_setparity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\descrypt.cpp
;	COMDAT ?cbc_crypt@@YAHPAD0II0@Z
_TEXT	SEGMENT
tv339 = -216						; size = 4
tv66 = -216						; size = 4
_nvec$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_mode$ = 20						; size = 4
_ivec$ = 24						; size = 4
?cbc_crypt@@YAHPAD0II0@Z PROC				; cbc_crypt, COMDAT

; 1539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1540 : 	char nvec[8];
; 1541 : 
; 1542 : 	des_setkey(key);

  00028	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?des_setkey@@YAXPAD@Z	; des_setkey
  00031	83 c4 04	 add	 esp, 4

; 1543 : 	switch (mode & DES_DIRMASK) {

  00034	8b 45 14	 mov	 eax, DWORD PTR _mode$[ebp]
  00037	83 e0 01	 and	 eax, 1
  0003a	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00040	74 12		 je	 SHORT $LN10@cbc_crypt
  00042	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR tv66[ebp], 1
  00049	0f 84 8a 02 00
	00		 je	 $LN11@cbc_crypt
  0004f	e9 7c 05 00 00	 jmp	 $LN2@cbc_crypt
$LN10@cbc_crypt:

; 1544 : 	case DES_ENCRYPT:
; 1545 : 		for (len = (len + 7) & ~7; len != 0; len -= 8) {

  00054	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00057	83 c0 07	 add	 eax, 7
  0005a	83 e0 f8	 and	 eax, -8			; fffffff8H
  0005d	89 45 10	 mov	 DWORD PTR _len$[ebp], eax
  00060	eb 09		 jmp	 SHORT $LN6@cbc_crypt
$LN4@cbc_crypt:
  00062	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00065	83 e8 08	 sub	 eax, 8
  00068	89 45 10	 mov	 DWORD PTR _len$[ebp], eax
$LN6@cbc_crypt:
  0006b	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  0006f	0f 84 5f 02 00
	00		 je	 $LN5@cbc_crypt

; 1546 : 			buf[0] ^= ivec[0];

  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	6b c8 00	 imul	 ecx, eax, 0
  0007d	ba 01 00 00 00	 mov	 edx, 1
  00082	6b c2 00	 imul	 eax, edx, 0
  00085	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  00088	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  0008c	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0008f	0f be 0c 0a	 movsx	 ecx, BYTE PTR [edx+ecx]
  00093	33 c8		 xor	 ecx, eax
  00095	ba 01 00 00 00	 mov	 edx, 1
  0009a	6b c2 00	 imul	 eax, edx, 0
  0009d	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000a0	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1547 : 			buf[1] ^= ivec[1];

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	c1 e0 00	 shl	 eax, 0
  000ab	b9 01 00 00 00	 mov	 ecx, 1
  000b0	c1 e1 00	 shl	 ecx, 0
  000b3	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  000b6	0f be 0c 0a	 movsx	 ecx, BYTE PTR [edx+ecx]
  000ba	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000bd	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  000c1	33 c1		 xor	 eax, ecx
  000c3	b9 01 00 00 00	 mov	 ecx, 1
  000c8	c1 e1 00	 shl	 ecx, 0
  000cb	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000ce	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1548 : 			buf[2] ^= ivec[2];

  000d1	b8 01 00 00 00	 mov	 eax, 1
  000d6	d1 e0		 shl	 eax, 1
  000d8	b9 01 00 00 00	 mov	 ecx, 1
  000dd	d1 e1		 shl	 ecx, 1
  000df	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  000e2	0f be 0c 0a	 movsx	 ecx, BYTE PTR [edx+ecx]
  000e6	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000e9	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  000ed	33 c1		 xor	 eax, ecx
  000ef	b9 01 00 00 00	 mov	 ecx, 1
  000f4	d1 e1		 shl	 ecx, 1
  000f6	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000f9	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1549 : 			buf[3] ^= ivec[3];

  000fc	b8 01 00 00 00	 mov	 eax, 1
  00101	6b c8 03	 imul	 ecx, eax, 3
  00104	ba 01 00 00 00	 mov	 edx, 1
  00109	6b c2 03	 imul	 eax, edx, 3
  0010c	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  0010f	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  00113	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00116	0f be 0c 0a	 movsx	 ecx, BYTE PTR [edx+ecx]
  0011a	33 c8		 xor	 ecx, eax
  0011c	ba 01 00 00 00	 mov	 edx, 1
  00121	6b c2 03	 imul	 eax, edx, 3
  00124	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00127	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1550 : 			buf[4] ^= ivec[4];

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	c1 e0 02	 shl	 eax, 2
  00132	b9 01 00 00 00	 mov	 ecx, 1
  00137	c1 e1 02	 shl	 ecx, 2
  0013a	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  0013d	0f be 0c 0a	 movsx	 ecx, BYTE PTR [edx+ecx]
  00141	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00144	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  00148	33 c1		 xor	 eax, ecx
  0014a	b9 01 00 00 00	 mov	 ecx, 1
  0014f	c1 e1 02	 shl	 ecx, 2
  00152	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00155	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1551 : 			buf[5] ^= ivec[5];

  00158	b8 01 00 00 00	 mov	 eax, 1
  0015d	6b c8 05	 imul	 ecx, eax, 5
  00160	ba 01 00 00 00	 mov	 edx, 1
  00165	6b c2 05	 imul	 eax, edx, 5
  00168	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  0016b	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  0016f	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00172	0f be 0c 0a	 movsx	 ecx, BYTE PTR [edx+ecx]
  00176	33 c8		 xor	 ecx, eax
  00178	ba 01 00 00 00	 mov	 edx, 1
  0017d	6b c2 05	 imul	 eax, edx, 5
  00180	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00183	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1552 : 			buf[6] ^= ivec[6];

  00186	b8 01 00 00 00	 mov	 eax, 1
  0018b	6b c8 06	 imul	 ecx, eax, 6
  0018e	ba 01 00 00 00	 mov	 edx, 1
  00193	6b c2 06	 imul	 eax, edx, 6
  00196	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  00199	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  0019d	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  001a0	0f be 0c 0a	 movsx	 ecx, BYTE PTR [edx+ecx]
  001a4	33 c8		 xor	 ecx, eax
  001a6	ba 01 00 00 00	 mov	 edx, 1
  001ab	6b c2 06	 imul	 eax, edx, 6
  001ae	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  001b1	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1553 : 			buf[7] ^= ivec[7];

  001b4	b8 01 00 00 00	 mov	 eax, 1
  001b9	6b c8 07	 imul	 ecx, eax, 7
  001bc	ba 01 00 00 00	 mov	 edx, 1
  001c1	6b c2 07	 imul	 eax, edx, 7
  001c4	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  001c7	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  001cb	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  001ce	0f be 0c 0a	 movsx	 ecx, BYTE PTR [edx+ecx]
  001d2	33 c8		 xor	 ecx, eax
  001d4	ba 01 00 00 00	 mov	 edx, 1
  001d9	6b c2 07	 imul	 eax, edx, 7
  001dc	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  001df	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1554 : 			des_crypt(buf, DES_ENCRYPT);

  001e2	6a 00		 push	 0
  001e4	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?des_crypt@@YAXPADH@Z	; des_crypt
  001ed	83 c4 08	 add	 esp, 8

; 1555 : 			ivec[0] = *buf++;

  001f0	b8 01 00 00 00	 mov	 eax, 1
  001f5	6b c8 00	 imul	 ecx, eax, 0
  001f8	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  001fb	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  001fe	8a 00		 mov	 al, BYTE PTR [eax]
  00200	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00203	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00206	83 c1 01	 add	 ecx, 1
  00209	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1556 : 			ivec[1] = *buf++;

  0020c	b8 01 00 00 00	 mov	 eax, 1
  00211	c1 e0 00	 shl	 eax, 0
  00214	8b 4d 18	 mov	 ecx, DWORD PTR _ivec$[ebp]
  00217	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0021a	8a 12		 mov	 dl, BYTE PTR [edx]
  0021c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0021f	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00222	83 c0 01	 add	 eax, 1
  00225	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 1557 : 			ivec[2] = *buf++;

  00228	b8 01 00 00 00	 mov	 eax, 1
  0022d	d1 e0		 shl	 eax, 1
  0022f	8b 4d 18	 mov	 ecx, DWORD PTR _ivec$[ebp]
  00232	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00235	8a 12		 mov	 dl, BYTE PTR [edx]
  00237	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0023a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0023d	83 c0 01	 add	 eax, 1
  00240	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 1558 : 			ivec[3] = *buf++;

  00243	b8 01 00 00 00	 mov	 eax, 1
  00248	6b c8 03	 imul	 ecx, eax, 3
  0024b	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  0024e	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00251	8a 00		 mov	 al, BYTE PTR [eax]
  00253	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00256	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00259	83 c1 01	 add	 ecx, 1
  0025c	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1559 : 			ivec[4] = *buf++;

  0025f	b8 01 00 00 00	 mov	 eax, 1
  00264	c1 e0 02	 shl	 eax, 2
  00267	8b 4d 18	 mov	 ecx, DWORD PTR _ivec$[ebp]
  0026a	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0026d	8a 12		 mov	 dl, BYTE PTR [edx]
  0026f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00272	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00275	83 c0 01	 add	 eax, 1
  00278	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 1560 : 			ivec[5] = *buf++;

  0027b	b8 01 00 00 00	 mov	 eax, 1
  00280	6b c8 05	 imul	 ecx, eax, 5
  00283	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  00286	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00289	8a 00		 mov	 al, BYTE PTR [eax]
  0028b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0028e	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00291	83 c1 01	 add	 ecx, 1
  00294	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1561 : 			ivec[6] = *buf++;

  00297	b8 01 00 00 00	 mov	 eax, 1
  0029c	6b c8 06	 imul	 ecx, eax, 6
  0029f	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  002a2	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  002a5	8a 00		 mov	 al, BYTE PTR [eax]
  002a7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002aa	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  002ad	83 c1 01	 add	 ecx, 1
  002b0	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1562 : 			ivec[7] = *buf++;

  002b3	b8 01 00 00 00	 mov	 eax, 1
  002b8	6b c8 07	 imul	 ecx, eax, 7
  002bb	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  002be	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  002c1	8a 00		 mov	 al, BYTE PTR [eax]
  002c3	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002c6	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  002c9	83 c1 01	 add	 ecx, 1
  002cc	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1563 : 		} 

  002cf	e9 8e fd ff ff	 jmp	 $LN4@cbc_crypt
$LN5@cbc_crypt:

; 1564 : 		break;

  002d4	e9 f7 02 00 00	 jmp	 $LN2@cbc_crypt
$LN11@cbc_crypt:

; 1565 : 	case DES_DECRYPT:
; 1566 : 		for (len = (len + 7) & ~7; len != 0; len -= 8) {

  002d9	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  002dc	83 c0 07	 add	 eax, 7
  002df	83 e0 f8	 and	 eax, -8			; fffffff8H
  002e2	89 45 10	 mov	 DWORD PTR _len$[ebp], eax
  002e5	eb 09		 jmp	 SHORT $LN9@cbc_crypt
$LN7@cbc_crypt:
  002e7	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  002ea	83 e8 08	 sub	 eax, 8
  002ed	89 45 10	 mov	 DWORD PTR _len$[ebp], eax
$LN9@cbc_crypt:
  002f0	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  002f4	0f 84 d6 02 00
	00		 je	 $LN2@cbc_crypt

; 1567 : 			nvec[0] = buf[0];

  002fa	b8 01 00 00 00	 mov	 eax, 1
  002ff	6b c8 00	 imul	 ecx, eax, 0
  00302	ba 01 00 00 00	 mov	 edx, 1
  00307	6b c2 00	 imul	 eax, edx, 0
  0030a	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0030d	8a 0c 0a	 mov	 cl, BYTE PTR [edx+ecx]
  00310	88 4c 05 f0	 mov	 BYTE PTR _nvec$[ebp+eax], cl

; 1568 : 			nvec[1] = buf[1];

  00314	b8 01 00 00 00	 mov	 eax, 1
  00319	c1 e0 00	 shl	 eax, 0
  0031c	b9 01 00 00 00	 mov	 ecx, 1
  00321	c1 e1 00	 shl	 ecx, 0
  00324	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00327	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  0032a	88 44 0d f0	 mov	 BYTE PTR _nvec$[ebp+ecx], al

; 1569 : 			nvec[2] = buf[2];

  0032e	b8 01 00 00 00	 mov	 eax, 1
  00333	d1 e0		 shl	 eax, 1
  00335	b9 01 00 00 00	 mov	 ecx, 1
  0033a	d1 e1		 shl	 ecx, 1
  0033c	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0033f	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00342	88 44 0d f0	 mov	 BYTE PTR _nvec$[ebp+ecx], al

; 1570 : 			nvec[3] = buf[3];

  00346	b8 01 00 00 00	 mov	 eax, 1
  0034b	6b c8 03	 imul	 ecx, eax, 3
  0034e	ba 01 00 00 00	 mov	 edx, 1
  00353	6b c2 03	 imul	 eax, edx, 3
  00356	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00359	8a 0c 0a	 mov	 cl, BYTE PTR [edx+ecx]
  0035c	88 4c 05 f0	 mov	 BYTE PTR _nvec$[ebp+eax], cl

; 1571 : 			nvec[4] = buf[4];

  00360	b8 01 00 00 00	 mov	 eax, 1
  00365	c1 e0 02	 shl	 eax, 2
  00368	b9 01 00 00 00	 mov	 ecx, 1
  0036d	c1 e1 02	 shl	 ecx, 2
  00370	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00373	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00376	88 44 0d f0	 mov	 BYTE PTR _nvec$[ebp+ecx], al

; 1572 : 			nvec[5] = buf[5];

  0037a	b8 01 00 00 00	 mov	 eax, 1
  0037f	6b c8 05	 imul	 ecx, eax, 5
  00382	ba 01 00 00 00	 mov	 edx, 1
  00387	6b c2 05	 imul	 eax, edx, 5
  0038a	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0038d	8a 0c 0a	 mov	 cl, BYTE PTR [edx+ecx]
  00390	88 4c 05 f0	 mov	 BYTE PTR _nvec$[ebp+eax], cl

; 1573 : 			nvec[6] = buf[6];

  00394	b8 01 00 00 00	 mov	 eax, 1
  00399	6b c8 06	 imul	 ecx, eax, 6
  0039c	ba 01 00 00 00	 mov	 edx, 1
  003a1	6b c2 06	 imul	 eax, edx, 6
  003a4	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  003a7	8a 0c 0a	 mov	 cl, BYTE PTR [edx+ecx]
  003aa	88 4c 05 f0	 mov	 BYTE PTR _nvec$[ebp+eax], cl

; 1574 : 			nvec[7] = buf[7];

  003ae	b8 01 00 00 00	 mov	 eax, 1
  003b3	6b c8 07	 imul	 ecx, eax, 7
  003b6	ba 01 00 00 00	 mov	 edx, 1
  003bb	6b c2 07	 imul	 eax, edx, 7
  003be	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  003c1	8a 0c 0a	 mov	 cl, BYTE PTR [edx+ecx]
  003c4	88 4c 05 f0	 mov	 BYTE PTR _nvec$[ebp+eax], cl

; 1575 : 			des_crypt(buf, DES_DECRYPT);

  003c8	6a 01		 push	 1
  003ca	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  003cd	50		 push	 eax
  003ce	e8 00 00 00 00	 call	 ?des_crypt@@YAXPADH@Z	; des_crypt
  003d3	83 c4 08	 add	 esp, 8

; 1576 : 			*buf++ ^= ivec[0];

  003d6	b8 01 00 00 00	 mov	 eax, 1
  003db	6b c8 00	 imul	 ecx, eax, 0
  003de	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  003e1	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  003e5	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  003e8	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  003eb	33 d0		 xor	 edx, eax
  003ed	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  003f0	88 10		 mov	 BYTE PTR [eax], dl
  003f2	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  003f5	83 c1 01	 add	 ecx, 1
  003f8	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1577 : 			*buf++ ^= ivec[1];

  003fb	b8 01 00 00 00	 mov	 eax, 1
  00400	c1 e0 00	 shl	 eax, 0
  00403	8b 4d 18	 mov	 ecx, DWORD PTR _ivec$[ebp]
  00406	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0040a	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0040d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00410	33 ca		 xor	 ecx, edx
  00412	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00415	88 0a		 mov	 BYTE PTR [edx], cl
  00417	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0041a	83 c0 01	 add	 eax, 1
  0041d	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 1578 : 			*buf++ ^= ivec[2];

  00420	b8 01 00 00 00	 mov	 eax, 1
  00425	d1 e0		 shl	 eax, 1
  00427	8b 4d 18	 mov	 ecx, DWORD PTR _ivec$[ebp]
  0042a	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  0042e	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00431	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00434	33 ca		 xor	 ecx, edx
  00436	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00439	88 0a		 mov	 BYTE PTR [edx], cl
  0043b	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0043e	83 c0 01	 add	 eax, 1
  00441	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 1579 : 			*buf++ ^= ivec[3];

  00444	b8 01 00 00 00	 mov	 eax, 1
  00449	6b c8 03	 imul	 ecx, eax, 3
  0044c	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  0044f	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00453	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00456	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00459	33 d0		 xor	 edx, eax
  0045b	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0045e	88 10		 mov	 BYTE PTR [eax], dl
  00460	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00463	83 c1 01	 add	 ecx, 1
  00466	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1580 : 			*buf++ ^= ivec[4];

  00469	b8 01 00 00 00	 mov	 eax, 1
  0046e	c1 e0 02	 shl	 eax, 2
  00471	8b 4d 18	 mov	 ecx, DWORD PTR _ivec$[ebp]
  00474	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00478	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0047b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0047e	33 ca		 xor	 ecx, edx
  00480	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00483	88 0a		 mov	 BYTE PTR [edx], cl
  00485	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00488	83 c0 01	 add	 eax, 1
  0048b	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax

; 1581 : 			*buf++ ^= ivec[5];

  0048e	b8 01 00 00 00	 mov	 eax, 1
  00493	6b c8 05	 imul	 ecx, eax, 5
  00496	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  00499	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0049d	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  004a0	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  004a3	33 d0		 xor	 edx, eax
  004a5	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  004a8	88 10		 mov	 BYTE PTR [eax], dl
  004aa	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  004ad	83 c1 01	 add	 ecx, 1
  004b0	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1582 : 			*buf++ ^= ivec[6];

  004b3	b8 01 00 00 00	 mov	 eax, 1
  004b8	6b c8 06	 imul	 ecx, eax, 6
  004bb	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  004be	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  004c2	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  004c5	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  004c8	33 d0		 xor	 edx, eax
  004ca	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  004cd	88 10		 mov	 BYTE PTR [eax], dl
  004cf	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  004d2	83 c1 01	 add	 ecx, 1
  004d5	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1583 : 			*buf++ ^= ivec[7];

  004d8	b8 01 00 00 00	 mov	 eax, 1
  004dd	6b c8 07	 imul	 ecx, eax, 7
  004e0	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  004e3	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  004e7	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  004ea	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  004ed	33 d0		 xor	 edx, eax
  004ef	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  004f2	88 10		 mov	 BYTE PTR [eax], dl
  004f4	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  004f7	83 c1 01	 add	 ecx, 1
  004fa	89 4d 0c	 mov	 DWORD PTR _buf$[ebp], ecx

; 1584 : 			ivec[0] = nvec[0];

  004fd	b8 01 00 00 00	 mov	 eax, 1
  00502	6b c8 00	 imul	 ecx, eax, 0
  00505	ba 01 00 00 00	 mov	 edx, 1
  0050a	6b c2 00	 imul	 eax, edx, 0
  0050d	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  00510	8a 4c 0d f0	 mov	 cl, BYTE PTR _nvec$[ebp+ecx]
  00514	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1585 : 			ivec[1] = nvec[1];

  00517	b8 01 00 00 00	 mov	 eax, 1
  0051c	c1 e0 00	 shl	 eax, 0
  0051f	b9 01 00 00 00	 mov	 ecx, 1
  00524	c1 e1 00	 shl	 ecx, 0
  00527	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  0052a	8a 44 05 f0	 mov	 al, BYTE PTR _nvec$[ebp+eax]
  0052e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1586 : 			ivec[2] = nvec[2];

  00531	b8 01 00 00 00	 mov	 eax, 1
  00536	d1 e0		 shl	 eax, 1
  00538	b9 01 00 00 00	 mov	 ecx, 1
  0053d	d1 e1		 shl	 ecx, 1
  0053f	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  00542	8a 44 05 f0	 mov	 al, BYTE PTR _nvec$[ebp+eax]
  00546	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1587 : 			ivec[3] = nvec[3];

  00549	b8 01 00 00 00	 mov	 eax, 1
  0054e	6b c8 03	 imul	 ecx, eax, 3
  00551	ba 01 00 00 00	 mov	 edx, 1
  00556	6b c2 03	 imul	 eax, edx, 3
  00559	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  0055c	8a 4c 0d f0	 mov	 cl, BYTE PTR _nvec$[ebp+ecx]
  00560	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1588 : 			ivec[4] = nvec[4];

  00563	b8 01 00 00 00	 mov	 eax, 1
  00568	c1 e0 02	 shl	 eax, 2
  0056b	b9 01 00 00 00	 mov	 ecx, 1
  00570	c1 e1 02	 shl	 ecx, 2
  00573	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  00576	8a 44 05 f0	 mov	 al, BYTE PTR _nvec$[ebp+eax]
  0057a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1589 : 			ivec[5] = nvec[5];

  0057d	b8 01 00 00 00	 mov	 eax, 1
  00582	6b c8 05	 imul	 ecx, eax, 5
  00585	ba 01 00 00 00	 mov	 edx, 1
  0058a	6b c2 05	 imul	 eax, edx, 5
  0058d	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  00590	8a 4c 0d f0	 mov	 cl, BYTE PTR _nvec$[ebp+ecx]
  00594	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1590 : 			ivec[6] = nvec[6];

  00597	b8 01 00 00 00	 mov	 eax, 1
  0059c	6b c8 06	 imul	 ecx, eax, 6
  0059f	ba 01 00 00 00	 mov	 edx, 1
  005a4	6b c2 06	 imul	 eax, edx, 6
  005a7	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  005aa	8a 4c 0d f0	 mov	 cl, BYTE PTR _nvec$[ebp+ecx]
  005ae	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1591 : 			ivec[7] = nvec[7];

  005b1	b8 01 00 00 00	 mov	 eax, 1
  005b6	6b c8 07	 imul	 ecx, eax, 7
  005b9	ba 01 00 00 00	 mov	 edx, 1
  005be	6b c2 07	 imul	 eax, edx, 7
  005c1	8b 55 18	 mov	 edx, DWORD PTR _ivec$[ebp]
  005c4	8a 4c 0d f0	 mov	 cl, BYTE PTR _nvec$[ebp+ecx]
  005c8	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 1592 : 		}

  005cb	e9 17 fd ff ff	 jmp	 $LN7@cbc_crypt
$LN2@cbc_crypt:

; 1593 : 		break;
; 1594 : 	}
; 1595 : 	return ((mode & DES_DEVMASK) == DES_SW ? DESERR_NONE

  005d0	8b 45 14	 mov	 eax, DWORD PTR _mode$[ebp]
  005d3	83 e0 02	 and	 eax, 2
  005d6	74 0c		 je	 SHORT $LN13@cbc_crypt
  005d8	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv339[ebp], 0
  005e2	eb 0a		 jmp	 SHORT $LN14@cbc_crypt
$LN13@cbc_crypt:
  005e4	c7 85 28 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv339[ebp], 1
$LN14@cbc_crypt:
  005ee	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR tv339[ebp]

; 1596 : 					       : DESERR_NOHWDEVICE);
; 1597 : }

  005f4	52		 push	 edx
  005f5	8b cd		 mov	 ecx, ebp
  005f7	50		 push	 eax
  005f8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@cbc_crypt
  005fe	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00603	58		 pop	 eax
  00604	5a		 pop	 edx
  00605	5f		 pop	 edi
  00606	5e		 pop	 esi
  00607	5b		 pop	 ebx
  00608	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0060b	33 cd		 xor	 ecx, ebp
  0060d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00612	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00618	3b ec		 cmp	 ebp, esp
  0061a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0061f	8b e5		 mov	 esp, ebp
  00621	5d		 pop	 ebp
  00622	c3		 ret	 0
  00623	90		 npad	 1
$LN17@cbc_crypt:
  00624	01 00 00 00	 DD	 1
  00628	00 00 00 00	 DD	 $LN16@cbc_crypt
$LN16@cbc_crypt:
  0062c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00630	08 00 00 00	 DD	 8
  00634	00 00 00 00	 DD	 $LN15@cbc_crypt
$LN15@cbc_crypt:
  00638	6e		 DB	 110			; 0000006eH
  00639	76		 DB	 118			; 00000076H
  0063a	65		 DB	 101			; 00000065H
  0063b	63		 DB	 99			; 00000063H
  0063c	00		 DB	 0
?cbc_crypt@@YAHPAD0II0@Z ENDP				; cbc_crypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\administrator\desktop\????? ??\????? ??\client source code\wgs\descrypt.cpp
;	COMDAT ?ecb_crypt@@YAHPAD0II@Z
_TEXT	SEGMENT
tv75 = -196						; size = 4
_key$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_mode$ = 20						; size = 4
?ecb_crypt@@YAHPAD0II@Z PROC				; ecb_crypt, COMDAT

; 1529 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1530 : 	des_setkey(key);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?des_setkey@@YAXPAD@Z	; des_setkey
  00027	83 c4 04	 add	 esp, 4

; 1531 : 	for (len = (len + 7) & ~7; len != 0; buf += 8, len -= 8)

  0002a	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0002d	83 c0 07	 add	 eax, 7
  00030	83 e0 f8	 and	 eax, -8			; fffffff8H
  00033	89 45 10	 mov	 DWORD PTR _len$[ebp], eax
  00036	eb 12		 jmp	 SHORT $LN4@ecb_crypt
$LN2@ecb_crypt:
  00038	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0003b	83 c0 08	 add	 eax, 8
  0003e	89 45 0c	 mov	 DWORD PTR _buf$[ebp], eax
  00041	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00044	83 e9 08	 sub	 ecx, 8
  00047	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx
$LN4@ecb_crypt:
  0004a	83 7d 10 00	 cmp	 DWORD PTR _len$[ebp], 0
  0004e	74 15		 je	 SHORT $LN3@ecb_crypt

; 1532 : 		des_crypt(buf, mode & DES_DIRMASK);

  00050	8b 45 14	 mov	 eax, DWORD PTR _mode$[ebp]
  00053	83 e0 01	 and	 eax, 1
  00056	50		 push	 eax
  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?des_crypt@@YAXPADH@Z	; des_crypt
  00060	83 c4 08	 add	 esp, 8
  00063	eb d3		 jmp	 SHORT $LN2@ecb_crypt
$LN3@ecb_crypt:

; 1533 : 	return ((mode & DES_DEVMASK) == DES_SW ? DESERR_NONE

  00065	8b 45 14	 mov	 eax, DWORD PTR _mode$[ebp]
  00068	83 e0 02	 and	 eax, 2
  0006b	74 0c		 je	 SHORT $LN6@ecb_crypt
  0006d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
  00077	eb 0a		 jmp	 SHORT $LN7@ecb_crypt
$LN6@ecb_crypt:
  00079	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv75[ebp], 1
$LN7@ecb_crypt:
  00083	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv75[ebp]

; 1534 : 					       : DESERR_NOHWDEVICE);
; 1535 : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?ecb_crypt@@YAHPAD0II@Z ENDP				; ecb_crypt
_TEXT	ENDS
END
